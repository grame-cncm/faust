#!/bin/bash

. faustpath
. faustoptflags

CXXFLAGS=$MYGCCFLAGS

OSCDEFS=""

#####################################################################
#                                                                   #
#               Compiles Faust programs to ladspa plugins           #
#               (c) Grame, 2011                                     #
#                                                                   #
#####################################################################

#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    MARCH=""
    SPEC="-fPIC -bundle"
else
    MARCH="-march=native"
    SPEC="-fPIC -shared"
fi

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# PHASE 1 : Look for -icc option to force use of intel icc (actually icpc)
# without having to configure CXX and CXXFLAGS

for p in $@; do
	if [ "$p" = -icc ]; then
		CXX=icpc
		CXXFLAGS='-O3 -xT -ftz -fno-alias -fp-model fast=2'
    fi
done

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-arch32" ]; then
	PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
	PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done



#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    SPEC="-fPIC -bundle"
else
	SPEC="-fPIC -shared"
fi




	
#-------------------------------------------------------------------
# compile the *.dsp files as ladspa plugins
#
for f in $FILES; do

	dst="${f%.dsp}.so"
	module=`basename $f .dsp`
	
	# compile faust to c++
	faust -i -a ladspa.cpp $OPTIONS "$f" -o "$f.cpp" || exit

	# compile c++ to binary
	(
		${CXX=g++} $CXXFLAGS $FAUSTTOOLSFLAGS $PROCARCH $SPEC -Dmydsp=$module -I/usr/local/share/faust "$f.cpp" -o $dst
	) > /dev/null || exit
	rm "$f.cpp"

	# collect binary file name for FaustGIDE
	BINARIES="$BINARIES$dst;"
done


echo $BINARIES


