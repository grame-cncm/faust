#! /bin/bash -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to ladspa plugins           #
#               (c) Grame, 2011                                     #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags
. usage.sh

CXXFLAGS+=" $MYGCCFLAGS"  # So that additional CXXFLAGS can be used

OSCDEFS=""
ARCHFILE=$FAUSTARCH/ladspa.cpp

#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    SPEC="-fPIC -bundle"
else
    SPEC="-fPIC -shared"
fi

echoHelp()
{
    usage faust2ladspa "[options] [Faust options] <file.dsp>"
    platform Linux
    echo "Compiles Faust programs to LADSPA plugins"
    option
    option -arch32 "generates a 32 bit architecture."
    option -arch64 "generates a 64 bit architecture."
    option "Faust options"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# dispatch command arguments
for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echoHelp
    elif [ $p = "-arch32" ]; then
        PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
        PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    SPEC="-fPIC -bundle"
else
    SPEC="-fPIC -shared"
fi

#-------------------------------------------------------------------
# compile the *.dsp files as ladspa plugins
#
for f in $FILES; do

    dst="${f%.dsp}.so"
    module=`basename $f .dsp`

    # compile faust to c++
    faust -i -a $ARCHFILE $OPTIONS "$f" -o "$f.cpp" || exit

    # compile c++ to binary
    (
        ${CXX=g++} $CXXFLAGS $FAUSTTOOLSFLAGS $PROCARCH $SPEC -Dmydsp=$module -I/usr/local/share/faust "$f.cpp" -o $dst
    ) > /dev/null || exit
    rm "$f.cpp"

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES$dst;"
done

echo $BINARIES
