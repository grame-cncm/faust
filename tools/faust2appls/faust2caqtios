#!/bin/bash

#####################################################################
#                                                                   #
#          Compiles Faust programs to CoreAudio and QT for iOS      #
#                   (c) Grame, 2016                                 #
#                                                                   #
#####################################################################

. faustpath
#. faustoptflags
. usage.sh

CXXFLAGS+=" $MYGCCFLAGS -DIOS"  # So that additional CXXFLAGS can be used

ARCHFILE="ca-qt.cpp"
ARCHLIB=" -framework CoreMIDI -framework CoreFoundation -framework CoreAudio -framework AudioUnit -framework CoreServices"
PATH=$PATH:/usr/local/bin

function nqmakeios() {
	echo "#### qmake-ios is not available"
	echo "#### you must create an alias named 'qmake-ios' that points to the appropriate qmake in your QT ios dist"
	exit 1
}
QMAKE=qmake-ios
which $QMAKE > /dev/null || nqmakeios
DEBUG=false

echoHelp() 
{
    usage faust2caqtios "[options] [Faust options] <file.dsp>"
    platform iOS
    require QT
    echo "Compiles Faust programs to CoreAudio and QT for iOS"
    option
    options -httpd -osc -midi -qrcode -poly
    option -debug "print all the build steps"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# dispatch command arguments

OSCINC=""
QTDEFS=""
OSCLIB=""

for p in $@; do
	if [ $p = "-help" ] || [ $p = "-h" ]; then
		echoHelp
	elif [ "$p" = -debug ]; then
		DEBUG=true
	elif [ "$p" = -icc ]; then
		ignore=" "
	elif [ $p = "-poly" ]; then
		POLYDEFS="DEFINES += POLY"
	elif [ $p = "-midi" ]; then
		MIDIDEFS="DEFINES += MIDICTRL"
	elif [ $p = "-osc" ]; then
		OSCDEFS="DEFINES += OSCCTRL"
		OSCLIBS="-lOSCFaust"
	elif [ "$p" = "-httpd" ]; then
		HTTPDEFS="DEFINES += HTTPCTRL"
		HTTPLIBS="-lHTTPDFaust"
		HTTPLIBS1=`pkg-config --cflags --libs libmicrohttpd`
	elif [ "$p" = "-qrcode" ]; then # requires -httpd
		QRDEFS="DEFINES += QRCODECTRL"
	elif [ ${p:0:1} = "-" ]; then
		OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
		FILES="$FILES $p"
	else
		OPTIONS="$OPTIONS $p"
	fi
done



#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
	SYS_VERSION=$(uname -v | cut -d : -f1 | cut -d. -f1 | cut -d' ' -f4)
	CXXFLAGS+=" -D__MACOSX_CORE__"
	if [ $SYS_VERSION -gt 12 ]
	then
		SPEC="-spec macx-clang"
		CLANGOPT="CONFIG+=c++11"
	else
		SPEC="-spec macx-g++"
		CLANGOPT=""
	fi
	EXT=".app"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

	CUR=$(pwd)
	f=$(basename "$p")
	SRCDIR=$(dirname "$p")

	# creates a temporary dir
	TDR=$(mktemp -d faust.XXX)
	TMP="$TDR/${f%.dsp}"
	mkdir "$TMP"

	# compile faust to c++
	FAUST='faust -i -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp"'
	if $DEBUG; then echo $FAUST; fi
	eval $FAUST || exit

	IOSDIR=/usr/local/share/faust/iOS
	RSRC=$IOSDIR/*.png
	RFILES="RSRC.files=$(echo $RSRC)"

	PRJ='$QMAKE -project "QT += widgets printsupport network sensors" "CONFIG+=warn_off" "$CLANGOPT" "INCLUDEPATH+=$CUR" "INCLUDEPATH+=$FAUSTINC" "QMAKE_CXXFLAGS= $CXXFLAGS -Wno-unused-parameter   -I/usr/local/include/ $FAUSTTOOLSFLAGS" "LIBS+=$ARCHLIB $OSCLIBS $HTTPLIBS $HTTPLIBS1" "HEADERS+=$FAUSTINC/faust/gui/QTUI.h" "RESOURCES+= $FAUSTINC/faust/gui/Styles/Grey.qrc" "$OSCDEFS" "$HTTPDEFS" "$QRDEFS" "$POLYDEFS" "$MIDIDEFS" "$RFILES" "RSRC.path = ." "QMAKE_BUNDLE_DATA +=RSRC"'

	BUILD='$QMAKE -spec macx-xcode && xcodebuild -jobs 8 -project ${f%.dsp}.xcodeproj -target ${f%.dsp} -configuration Release'

	# compile c++ to binary
	if $DEBUG; then (
		cd "$TMP"
		echo $PRJ
		eval $PRJ
		echo $BUILD
		eval $BUILD
	) else (
		cd "$TMP"
		eval $PRJ
		eval $BUILD
	) > /dev/null || exit
	fi

	rm -rf "$SRCDIR/${f%.dsp}$EXT"
	cp -r "$TMP/Release-iphoneos/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
	RMTMP=true
	if $DEBUG; then
		echo "====> delete temporary folder $TDR ? [Y/n]"
		read DEL
		[ $DEL == "n" ] && RMTMP=false
	fi
	[ $RMTMP == true ] && rm -rf "$TDR"

	# collect binary file name for FaustGIDE
	BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
done

echo $BINARIES


