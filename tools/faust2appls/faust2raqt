#!/bin/bash

#####################################################################
#                                                                   #
#               Compiles Faust programs to RtAudio-qt               #
#               (c) Grame, 2015                                     #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags
. usage.sh

CXXFLAGS+=" $MYGCCFLAGS"  # So that additional CXXFLAGS can be used

ARCHFILE=$FAUSTARCH/ra-qt.cpp
ARCHLIB="-L/usr/local/lib -lrtaudio"

#-------------------------------------------------------------------------------
# Search for qmake or qmake-qt4

QMAKE=$(which qmake-qt4 || echo qmake)

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# existing *.dsp files          -> FILES
#

#PHASE 2 : dispatch command arguments

OSCINC=""
QTDEFS=""
OSCLIB=""
DEPLOY="yes"

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        usage faust2raqt "[options] [Faust options] <file.dsp>"
        require Qt
        echo "Compiles Faust programs to RtAudio and QT"
        option
        options -httpd -osc -midi -qrcode -poly -nodeploy
        option "Faust options"
        exit
    fi

    if [ $p = "-poly" ]; then
        POLYDEFS="DEFINES += POLY"
    elif [ $p = "-midi" ]; then
        MIDIDEFS="DEFINES += MIDICTRL"
    elif [ $p = "-osc" ]; then
        OSCDEFS="DEFINES += OSCCTRL"
        OSCLIBS="-lOSCFaust"
    elif [ "$p" = "-httpd" ]; then
        HTTPDEFS="DEFINES += HTTPCTRL"
        HTTPLIBS="-lHTTPDFaust -lmicrohttpd"
        HTTPLIBS1=`pkg-config --cflags --libs libmicrohttpd`
    elif [ $p = "-nodeploy" ]; then
        DEPLOY="no"
    elif [ "$p" = "-qrcode" ]; then # requires -httpd
        QRDEFS="DEFINES += QRCODECTRL"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

#-------------------------------------------------------------------
# Check Darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    ARCHLIB+=" -framework CoreMIDI -framework CoreFoundation -framework CoreAudio -framework AudioUnit -framework CoreServices"
    CXXFLAGS+=" -D__MACOSX_CORE__"
    SYS_VERSION=$(uname -v | cut -d : -f1 | cut -d. -f1 | cut -d' ' -f4)
    if [ $SYS_VERSION -gt 12 ]
    then
        SPEC=""
        CLANGOPT="QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9"
        CXXFLAGS="$CXXFLAGS -mmacosx-version-min=10.9"
    else
        SPEC="-spec macx-g++"
        CLANGOPT=""
    fi
    EXT=".app"
fi

#-------------------------------------------------------------------
# Check Linux specifics
#
if [[ $(uname) == Linux ]]; then
    ARCHLIB+=" -lasound"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")

    # creates a temporary dir
    TDR=$(mktemp -d faust.XXX)
    TMP="$TDR/${f%.dsp}"
    mkdir "$TMP"

    # compile faust to c++
     faust -i -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit

    # compile c++ to binary
    (
        cd "$TMP"
        $QMAKE -project "QT += widgets printsupport network" "CONFIG+=warn_off" "$CLANGOPT" "INCLUDEPATH+=$CUR" "INCLUDEPATH+=$FAUSTINC" "QMAKE_CXXFLAGS=$CXXFLAGS -Wno-unused-parameter $FAUSTTOOLSFLAGS" "QMAKE_INFO_PLIST=$FAUSTARCH/Info.plist" "LIBS+=$ARCHLIB $OSCLIBS $HTTPLIBS $HTTPLIBS1" "HEADERS+=$FAUSTINC/faust/gui/QTUI.h" "RESOURCES+= $FAUSTINC/faust/gui/Styles/Grey.qrc" "$OSCDEFS" "$HTTPDEFS" "$QRDEFS" "$POLYDEFS" "$MIDIDEFS"
        $QMAKE $SPEC QMAKE_CFLAGS_ISYSTEM=-I
        make
    ) > /dev/null || exit

    # on Mac add the QT libraries to the bundle
    if [[ $(uname) == Darwin ]]; then
        if [ "$DEPLOY" = "yes" ]; then
            macdeployqt "$TMP/${f%.dsp}$EXT" || exit
        fi
    fi

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp -a "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    if [[ $(uname) == Darwin ]]; then
        codesign --sign - --deep --force "$SRCDIR/${f%.dsp}$EXT"
    fi
    rm -rf "$TDR"

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
done

echo $BINARIES
