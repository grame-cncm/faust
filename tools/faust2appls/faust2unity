#! /bin/bash -e

. faustpath


#------------------------------------------------------------------------------
# Generates a folder with all available architecture libraries for faust unity
# plugin and the C# and JSON files required

#PHASE 1 : dispatch command arguments

ALL="1"
W32="0"
W64="0"
OSX="0"
IOS="0"
ANDROID="0"

for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2unity [-w32] [-ios] <file1.dsp> <file2.dsp>"
        echo "Generates a folder with all available architecture libraries for faust unity plugin and the C# and JSON files required. See architecture/unity/README.md for more info."
        echo "Use -w32 to produce a w32 library"
        echo "Use -w64 to produce a w64 library"
        echo "Use -osx to produce a MACOSX library"
        echo "Use -ios to produce a iOS library"
        echo "Use -android to produce android libraries (armabi-v7a and x86)."
        echo "See architecture/unity/README.md for more info."
        exit
    fi
    if [ $p = "-w32" ]; then
        W32="1"
        ALL="0"
    elif [ $p = "-w64" ]; then
        W64="1"
        ALL="0"
    elif [ $p = "-osx" ]; then
        OSX="1"
        ALL="0"
    elif [ $p = "-ios" ]; then
        IOS="1"
        ALL="0"
    elif [ $p = "-android" ]; then
        ANDROID="1"
        ALL="0"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")
    NAME=${f%.dsp}
    DIR=$SRCDIR/FaustPlugin_$NAME


    # creates final dir / overwrites it if already created
    if [ -d "$DIR" ]; then
        rm -rf "$DIR"
    fi
    mkdir "$DIR"

    # finds number of parameters
    faust -uim $f -o $NAME.cpp
    grep FAUST_ACTIVES $NAME.cpp > params.txt
    var1=$(cut -d" " -f3- params.txt)
    grep FAUST_PASSIVES $NAME.cpp > params.txt
    var2=$(cut -d" " -f3- params.txt)
    let "var=var1+var2"
    rm $NAME.cpp
    rm params.txt

    # generates c# file
    sed -e "s/model/FaustPlugin_$NAME/g;s/plugname/libFaustPlugin_$NAME/g;s/_UI/_$NAME/g;s/Ctx/Context_$NAME/g;s/variables/$var/g;s/androidpluginname/FaustPlugin_$NAME/g" $FAUSTLIB/unity/template.cs > $SRCDIR/$DIR/FaustPlugin_$NAME.cs

    # compiles faust to c++ and json
    faust -json "$SRCDIR/$f" -o /dev/null;
    mv "$SRCDIR/$f.json" $DIR/FaustPlugin_$NAME.json

    # compiles c++ to binaries

        # w64
        if [ $W64 = "1" ] || [ $ALL = "1" ]; then
            faust2w64unity $f || exit
            mv $SRCDIR/FaustPlugin_w64_$NAME $DIR/w64
        fi

        # w32
        if [ $W32 = "1" ] || [ $ALL = "1" ]; then
            faust2w32unity $f || exit
            mv $SRCDIR/FaustPlugin_w32_$NAME $DIR/w32

        fi

        # macos
        if [ $OSX = "1" ] || [ $ALL = "1" ]; then
            faust2osxiosunity $f || exit
            mv $SRCDIR/FaustPlugin_OSX_$NAME $DIR/OSX

        fi
        # ios
        if [ $IOS = "1" ] || [ $ALL = "1" ]; then
            faust2osxiosunity -ios $f || exit
            mv $SRCDIR/FaustPlugin_iOS_$NAME $DIR/iOS

        fi
        # android
        if [ $ANDROID = "1" ] || [ $ALL = "1" ]; then
            faust2androidunity $f || exit
            mv $SRCDIR/FaustPlugin_Android_$NAME $DIR/Android
        fi

done



