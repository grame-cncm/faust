#! /bin/bash -e

#############################################################################################################
#                                                                                                           #
#   Compiles Faust programs to Linux x86_64 library suitable for the Unity environment                      #
#                                                                                                           #
#   (c) Grame, 2017                                                                                         #
#                                                                                                           #
#############################################################################################################

#   This script shouldn't be used on its own, use the "faust2unity" script instead
#   The libraries are firstly wrapped by the unityplugin.cpp architecture file
#   They have to be used in the Unity environment
#   The libraries does not work by themselves, they need the FaustPlugin_<dspname>.cs and FaustUtilities_<dspname>.cs files to be functional
#   These files are automatically generated by the "faust2unity" script

. faustpath
. faustoptflags
. usage.sh

CXXFLAGS+=" $MYGCCFLAGS"  # So that additional CXXFLAGS can be used

NVOICES=-1

echoHelp()
{
    usage faust2linuxunity "[options] [Faust options] <file.dsp>"
    platform Linux
    require Jack, Unity
    echo "Compiles Faust programs to Linux x86_64 libraries suitable for the Unity environment"
    option
    option "-nvoices <num>"
    option "Faust options"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#-------------------------------------------------------------------
# Dispatch command arguments

while [ $1 ]
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echoHelp
    elif [ $p = "-nvoices" ]; then
        shift
        NVOICES=$1
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi

shift
done

#------------------------------------------------------------------------------
# Compiler g++
#

CXX="g++"
(which "$CXX" >/dev/null) || (echo "compiler $CXX not found. See -help for more info"; exit 1)

#-------------------------------------------------------------------
# Compiler settings

CXXFLAGS+=" -fPIC"
LIB="-shared"
EXT=".so"

#-------------------------------------------------------------------
# compile the *.dsp files

for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    NAME=${f%.dsp}
    FNAME=FaustPlugin_$NAME
    LIBNAME=lib$FNAME$EXT
    SRCDIR=$(dirname "$p")
    FIN=$FNAME/Linux

    # creates a temporary dir
    TDR=$(mktemp -d faust.XXXXXX)
    TMP=$TDR/${f%.dsp}
    mkdir "$TMP"

    # checks if final dir exists, if not creates it
    if [ ! -d "$FIN" ]; then
        mkdir -p "$FIN"
    fi

    # compile faust to c++
    faust -uim -i -a $FAUSTARCH/unity/unityplugin.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/$NAME.cpp" || (echo "$f : Faust to C++ compilation failed in faust2linuxunity"; exit 1)

    # compile c++ to binary
    (
        cd "$TMP"
        if [ $NVOICES == -1 ]; then
            $CXX $CXXFLAGS $LIB -Dmydsp=$NAME -o $LIBNAME $NAME.cpp
        else
            $CXX $CXXFLAGS $LIB -Dmydsp=$NAME -DPOLY -o $LIBNAME $NAME.cpp
        fi
    ) > /dev/null || (echo "$f : C++ to linux library compilation failed in faust2linuxunity"; exit 1)

    # moves binary to final dir
    rm -rf "$SRCDIR/$LIBNAME"
    mv "$TMP/$LIBNAME" "$FIN/$LIBNAME"
    rm -rf "$TDR"

    echo "$f : linux compilation completed"
done



