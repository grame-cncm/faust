#!/bin/bash

#####################################################################
#                                                                   #
#               Compiles Faust programs to dummy                    #
#               (c) Grame, 2017                                     #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS+=" $MYGCCFLAGS"  # So that additional CXXFLAGS can be used

ARCHFILE=$FAUSTARCH/dummy-mem.cpp

OSCDEFS=""
NVOICES=-1
OSCDEFS=""
HTTPDEFS=""
MIDIDEFS=""

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

if [[ $(uname) == Darwin ]]; then
    ARCHLIB=" -framework CoreServices -framework CoreMIDI -framework CoreFoundation -framework CoreAudio -framework AudioUnit"
else
    ARCHLIB="`pkg-config --cflags --libs alsa` -pthread"
fi

echoHelp()
{
    usage faust2dummymem "[options] [Faust options] <file.dsp>"
    platform MacOS
    echo "Compiles Faust programs to dummy audio driver"
    option
    options -httpd -osc -midi
    option "-nvoices <num>"
    option "Faust options"
    exit
}

if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#PHASE 2 : dispatch command arguments
while [ $1 ]
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echoHelp
    elif [ $p = "-osc" ]; then
        OSCDEFS="-DOSCCTRL -lOSCFaust"
    elif [ $p = "-httpd" ]; then
        HTTPDEFS="-DHTTPCTRL -lHTTPDFaust"
        HTTPLIBS=`pkg-config --cflags --libs libmicrohttpd`
    elif [ $p = "-nvoices" ]; then
        shift
        NVOICES=$1
        if [ $NVOICES -ge 0 ]; then
            CXXFLAGS="$CXXFLAGS -DNVOICES=$NVOICES"
        fi
    elif [ $p = "-midi" ]; then
        MIDIDEFS="-DMIDICTRL"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi

shift

done

#-------------------------------------------------------------------
# compile the *.dsp files using dummy
#
for f in $FILES; do

    # compile faust to c++
    faust -i -a $ARCHFILE -mem $OPTIONS "$f" -o "$f.cpp" || exit

    # compile c++ to binary
    (
        $CXX $CXXFLAGS "$f.cpp" $OSCDEFS $HTTPDEFS $HTTPLIBS $POLYDEFS $MIDIDEFS $ARCHLIB -o "${f%.dsp}"
        if [[ $(uname) == Darwin ]]; then
            codesign --sign - --deep --force "${f%.dsp}"
        fi
    ) > /dev/null || exit
    rm "$f.cpp"

    # collect binary file name for FaustWorks
    BINARIES="$BINARIES${f%.dsp};"
done

echo $BINARIES


