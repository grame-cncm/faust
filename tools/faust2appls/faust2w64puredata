#! /bin/bash -e

#####################################################################
#                                                                   #
#               Cross-compiles Faust programs to PureData           #
#                      from : Linux or OSX                          #
#                        to : Windows 64                            #
#                       (c) Grame, 2021                             #
#                                                                   #
#####################################################################

#------------------------------------------------------------------------------
# mingw crosscompiler should be installed ('mingw64' package on Ubuntu)
# the exact prefix should be specified in the environment variable MINGW
PDW64INCLUDEDIR=/usr/include/pd
PDW64BINDIR=/usr/lib/x86_64-w64-mingw32/pd
. faustpath

: ${MINGWPREFIX="x86_64-w64-mingw32-"}
CXX="${MINGWPREFIX}g++"
(which "$CXX" >/dev/null) || (echo "MingW compiler $CXX not found"; exit 1)

if [ ! -e "${PDW64BINDIR}/pd.dll" ]; then
    echo "Unable to locate pd.dll: PDW64BINDIR=${PDW64BINDIR}!" 1>&2
    exit 1
fi

#-------------------------------------------------------------------
# Compiler settings

CXXFLAGS="-std=c++11 -O3 -mfpmath=sse -msse -ffast-math -Wl,--enable-auto-import"

LIB="-I${PDW64INCLUDEDIR} -shared ${PDW64BINDIR}/pd.dll"
EXT="~.dll"

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
        OMP="-fopenmp"
    fi

    if [ "$p" = -icc ]; then
        ignore=" "
    elif [ $p = "-poly" ]; then
        F2PDPOLY="-n 8"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")

    # creates a temporary dir
    TDR=$(mktemp -d faust.XXXXXX)
    TMP=$TDR/${f%.dsp}
    mkdir "$TMP"

    # case where a foreign C++ function is called in the Faust code (TODO: this is only a quick fix!)
    count=`ls -1 *.h 2>/dev/null | wc -l`
    if [ $count != 0 ]; then
        cp *.h $TMP
    fi

    # compile faust to c++ and xml
    faust -xml "$SRCDIR/$f" -o /dev/null;
    mv "$SRCDIR/$f.xml" $TMP/
    faust -i -a puredata.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit

    # compile c++ to binary
    (
        cd "$TMP"
        $CXX $CXXFLAGS $FAUSTTOOLSFLAGS $PROCARCH $OMP $LIB -static-libstdc++ -static-libgcc -Dmydsp=${f%.dsp} -o ${f%.dsp}$EXT ${f%.dsp}.cpp

        if [ $(which faust2pd) ]; then
            faust2pd -s $F2PDPOLY $f.xml
        fi
    ) > /dev/null || exit

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"

    # collects all the files produced
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
    if [ $(which faust2pd)  ]; then
        cp "$TMP/${f%.dsp}.pd" "$SRCDIR/${f%.dsp}.pd"
        BINARIES="$BINARIES$SRCDIR/${f%.dsp}.pd;"
    fi
    rm -rf "$TDR"

done

# return the binaries names
echo "$BINARIES"
