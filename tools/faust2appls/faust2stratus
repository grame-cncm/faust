#!/bin/bash
#####################################################################
#                                                                   #
#               Compiles Faust programs for the Chaos Stratus pedal #
#                                                                   #
#####################################################################

#-------------------------------------------------------------------
#
# Various default variables
#
ARCHFILE=${STRATUS_ARCH:-chaos-stratus/stratus.cpp}
HOSTNAME="$(hostname)"
CPPCOMPILE=true
export TMPDIR=$(mktemp -d)
PEDAL_BUILD="buildOnStratus"
which docker > /dev/null && PEDAL_BUILD="buildWithDocker"

##
## Install cleanup routine
##
for sig in SIGTERM ERR EXIT; do trap "_term ${sig}" ${sig}; done
_term() {
  trap "" SIGTERM ERR EXIT
  declare -F "disconnectStratus" > /dev/null && disconnectStratus
  rm -rf ${TMPDIR}
  exit 0
}

#-------------------------------------------------------------------
#
# Bring in the Faust environment and the usage utilities,
# and the pedal-specific utilities
#
. faustpath
. usage.sh
. ${FAUSTARCH}/chaos-stratus/_pedal-tools.sh

#-------------------------------------------------------------------
#
# Standard help
#
echoHelp() 
{
    usage faust2stratus "[options] [Faust options] <file.dsp> ..."
    platform "Chaos Audio Stratus pedal"
    echo "Compiles Faust programs for the Chaos Audio Stratus pedal"
    echo "Can be used build and install multiple different effects in one go"
    option "-nocppc" "Do not compile the generated CPP source files"
    option "-nodocker" "Do not use docker for pedal builds even if it is available"
    option "-stratusbuild" "Generates the CPP code locally, then builds the effect library on the Stratus pedal"
    option "-stratusinstall" "Generates the CPP code locally, then builds and installs the effect library on the Stratus pedal"
    option "Faust options"
    echo   "      the script uses '-i -scn FaustDSP -light -nvi'"
    echo   "      -O and/or -o can be used, otherwise all output is in the same folder as the corresponding input"
    exit
}

#-------------------------------------------------------------------
#
# Initial sniff test
#
if [ "$#" -eq 0 ]; then
    echo 'Please, provide a Faust file to process !'
    echo ''
    echoHelp
fi

#-------------------------------------------------------------------
#
# Pick out the Faust and Stratus options
#
OPTIONS="-i -scn FaustDSP -light -nvi"
STRATUSCLASS=dsp
while [[ "$1" ]]; do
    opt=$1
    shift
    if [[ "${opt}" =~ ^--?"help"$ || ${opt} == "-h" ]]; then
        echoHelp
    elif [[ "${opt}" =~ ^--?"stratusc"$ ]]; then
        # Ignore obsolete option
        true
    elif [[ "${opt}" =~ ^--?"stratusbuild"$ ]]; then
        STRATUSBUILD="true"
    elif [[ "${opt}" =~ ^--?"stratusinstall"$ ]]; then
        STRATUSBUILD="true"
        STRATUSINSTALL="true"
    elif [[ "${opt}" =~ ^--?"nocppc"$ ]]; then
        CPPCOMPILE="false"
    elif [[ "${opt}" =~ ^--?"nodocker"$ ]]; then
        PEDAL_BUILD="buildOnStratus"
    elif [[ "${opt}" =~ ^--?"stratusclass"$ ]]; then
        STRATUSCLASS=${1:-dsp}
        shift
    elif [[ "${opt}" =~ ^--?"o"$ ]]; then
        OUTPUT_FILE=${1:-}
        shift
    elif [[ "${opt}" =~ ^--?"O"$ ]]; then
        OUTPUT_DIR=${1:-}
        shift
    elif [[ "${opt}" =~ ^--?"a"$ ]]; then
    #
    # Used to test other versions of the Stratus arch file!
    #
        ARCHFILE=${1:-stratus.cpp}
        shift
    elif [[ -f "${opt}" && ${opt: -4} == ".dsp" ]]; then
        FILES="${FILES} ${opt}"
    else
        OPTIONS="${OPTIONS} ${opt}"
    fi
done

#-------------------------------------------------------------------
# compile the *.dsp files using faust and ${CXX}
#

#
# OUTPUT_DIR is -O, or the dirname of -o, or (eventually) where the input comes from
#
OUTPUT_DIR=${OUTPUT_DIR:-${OUTPUT_FILE:+$(dirname "$([[ ! "${OUTPUT_FILE}" =~ ^/ ]] && echo "${PWD}/")${OUTPUT_FILE}")}}
OUTPUT_FILE=${OUTPUT_FILE:+$(basename ${OUTPUT_FILE})}

for f in ${FILES}; do

    EFFECT="$([[ ! "${f}" =~ ^/ ]] && echo "${PWD}/")${f}"

    EFFECT_OUPUT_DIR=${OUTPUT_DIR:-$(dirname "${EFFECT}")}

    # Derive the various output file names based on -o (first only) or the input file name
    EFFECT_FILENAME="${OUTPUT_FILE:-$(basename ${EFFECT})}"
    OUTPUT_FILE_STEM="${EFFECT_FILENAME%%.*}"

    # -o, if presented, is interpreted as the Faust compiler output file name (first only)
    EFFECT_CPP="${EFFECT_OUPUT_DIR}/${OUTPUT_FILE:-${OUTPUT_FILE_STEM}.cpp}"
    # The SO file name is based on the output file stem wherever that came from
    EFFECT_SO="${EFFECT_OUPUT_DIR}/${OUTPUT_FILE_STEM}.so"

    # In a multi-file build, the "-o" option can only apply to the first DSP file
    OUTPUT_FILE=""
    
    # compile faust to c++
    echo "Building effect ${EFFECT}:" >&2
    echo "  Faust options: -a ${ARCHFILE} ${OPTIONS} ${EFFECT} -o ${EFFECT_CPP}"

    faust -a ${ARCHFILE} ${OPTIONS} "${EFFECT}" -o "${EFFECT_CPP}" || exit

    if [[ "${CPPCOMPILE}" == true ]]; then
        if [[ "${STRATUSINSTALL}" == true ]]; then
            setIDandVersion "${EFFECT}"
            if [[ -z "${EFFECT_ID}" ]]; then
                echo "Unable to find 'stratusId' in the effect metadata - install not possible"
                STRATUSINSTALL=""
            fi
        fi

        #
        # We are supposed to compile - but what is our context?
        #

        #
        # If we are on the Stratus, or we are NOT supposed to build on the stratus, then it's simply a local compile
        #
        if [[ "${HOSTNAME}" == "stratus" || "${STRATUSBUILD}" != "true" ]]; then
            buildLocal "${EFFECT_CPP}" "${EFFECT_SO}" || { echo "Local build failed"; exit 1; }
            if [[ "${HOSTNAME}" == "stratus" && "${STRATUSINSTALL}" == "true" ]]; then
                installLocal "${EFFECT_SO}" "${EFFECT_ID}" "${EFFECT_VERSION}" || { echo "Install on stratus failed"; exit 1; }
            fi
        else
            #
            # If we are not on the Stratus, and we are supposed to at least build on the stratus, then do that
            #
            ${PEDAL_BUILD} "${EFFECT_CPP}" "${EFFECT_SO}" || { echo "Build for stratus failed"; exit 1; }
            if [[ "${STRATUSINSTALL}" == "true" ]]; then
                installOnStratus "${EFFECT_SO}" "${EFFECT_ID}" "${EFFECT_VERSION}" || { echo "Install on stratus failed"; exit 1; }
            fi
        fi
    else
        echo "NOT CPP compiling ${EFFECT_CPP} (-nocppc specified)"
    fi
done
