#!/bin/bash

OSCDEFS=""
#####################################################################
#                                                                   #
#               Crosscompiles Faust programs to RaspberryPi 		#
#				alsa-console architecture     						#
#               Author : Pilar de la Cruz                           #
#               (c) Grame, 2009-2013                                #
#                                                                   #
#####################################################################

. faustpath

# base directory for tools

BASE_DIR="/opt/rpicrosstool"

#-------------------------------------------------------------------
# Default compilation flags for gcc and icc :
#
CXXFLAGS="-O3 -march=armv6zk -mcpu=arm1176jzf-s -mtune=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard -ffast-math -ftree-vectorize"

#-------------------------------------------------------------------
# Kernel Sources Dir
LINUX_KERNEL_INSTALL_DIR="$BASE_DIR/x-tools/arm-unknown-linux-gnueabi/arm-unknown-linux-gnueabi/"

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#
# Toolchain cross-compilation for Raspberry Pi

CXX=$BASE_DIR"/x-tools/arm-unknown-linux-gnueabi/bin/arm-unknown-linux-gnueabi-c++"

# Librairies and includes directories for Rapsberry Pi
LD_LIBRARY_PATHS="-L$LINUX_KERNEL_INSTALL_DIR/lib -lasound"
INCLUDES_DIR="-L$LINUX_KERNEL_INSTALL_DIR_INCLUDE/include/"

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-osc" ]; then
	 OSCDEFS="-DOSCCTRL -L$LINUX_KERNEL_INSTALL_DIR/lib/ -lOSCFaust -loscpack"
    elif [ $p = "-httpd" ]; then
	 HTTPDEFS="-DHTTPCTRL -L$LINUX_KERNEL_INSTALL_DIR/lib -lHTTPDFaust -lmicrohttpd"
    elif [ $p = "-arch32" ]; then
	PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
	PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-------------------------------------------------------------------
# compile the *.dsp files using ALSA and GTK on linux
#
for f in $FILES; do
	
	# compile faust to c++
	faust -i -a alsa-console.cpp $OPTIONS "$f" -o "$f.cpp" || exit

	# compile c++ to binary
	(
		$CXX $CXXFLAGS $OMP "$f.cpp" $INCLUDES_DIR $LD_LIBRARY_PATHS $PROCARCH $OSCDEFS $HTTPDEFS -o "${f%.dsp}"
	) > /dev/null || exit
	rm "$f.cpp"

	# collect binary file name for FaustWorks
	BINARIES="$BINARIES${f%.dsp};"
done

echo $BINARIES


