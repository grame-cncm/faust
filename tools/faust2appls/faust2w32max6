#!/bin/bash

#####################################################################
#                                                                   #
#               Cross-compiles Faust programs to Max/MSP            #
#                      from : Linux or OSX                          #
#                        to : Windows 32                            #
#                       (c) Grame, 2011                             #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS+=" $MYGCCFLAGS -fbracket-depth=512"  # So that additional CXXFLAGS can be used

POLY=""
NOPATCH="0"
NVOICES=-1
EFFECT=""
SOUNDFILE="0"
SOUNDFILEDEFS=""
SOUNDFILELIBS=""

JSFILE_PATH="ui.js"

#------------------------------------------------------------------------------
# 1/ MAX/MSP SDK Should be installed somewhere
MAXSDK=/usr/local/include/c74support
EXT="~.mxe"

if [ ! -d "${MAXSDK}" ]; then
     echo "Unable to locate Max/Msp SDK: MAXSDK=${MAXSDK}" 1>&2
     exit 1
fi

#------------------------------------------------------------------------------
# 2/ mingw crosscompiler should be installed ('mingw32' package on Ubuntu)
# It must be in the PATH and the exact prefix should be specified in
# the environment variable MINGWPREFIX

: ${MINGWPREFIX="i686-w64-mingw32-"}
CXX="${MINGWPREFIX}g++"
(which "$CXX" >/dev/null) || (echo "MingW compiler $CXX not found"; exit 1)
DLLWRAP="${MINGWPREFIX}dllwrap --target=i686-w64-mingw32"
STRIP="${MINGWPREFIX}strip"

#-----------------------------------------------------------------------------
# Compilation flags
LIBS="$MAXSDK/max-includes/MaxAPI.lib  $MAXSDK/msp-includes/MaxAudio.lib"
CXXINCS="-I$MAXSDK/max-includes -I$MAXSDK/msp-includes "
CXXFLAGS="-std=c++11 -DWIN_VERSION -DWIN_EXT_VERSION"

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi

    if [ "$p" = -icc ]; then
        ignore=" "
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]] && [ ${p: -4} == ".dsp" ]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

BINARIES=""

#PHASE 3 : Compile each dsp files in $FILES
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")

    # creates a temporary dir
    TDR=$(mktemp -d faust.XXX)
    TMP="$TDR/${f%.dsp}"
    mkdir "$TMP"

    # compile faust to c++
    faust -i -double -cn ${f%.dsp} -uim -a $FAUSTARCH/max-msp/max-msp64.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit

    # compile c++ to binary
    (
        cd "$TMP"
        echo "TMP=$TMP"

        # we need to create the .def file needed to generate the .dll
        echo "LIBRARY     ${f%.dsp}~"                          > ${f%.dsp}.def
        echo "DESCRIPTION 'Faust generated MAX plugin'"     >> ${f%.dsp}.def
        echo "EXPORTS     main"                             >> ${f%.dsp}.def

        $CXX $CXXINCS $CXXFLAGS -c "${f%.dsp}.cpp" -o "${f%.dsp}.o"
        $DLLWRAP --driver-name $CXX --def ${f%.dsp}.def *.o  $LIBS -static -o "${f%.dsp}$EXT"
        $STRIP "${f%.dsp}$EXT"
    ) > /dev/null || exit

    cp "$TMP/${f%.dsp}$EXT" "$SRCDIR"

    # remove temporary directory
    rm -rf "$TDR"

    # collect binary file name for FaustWorks
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"

    # create Max patch
    if [ "$NOPATCH" = "0" ]; then
        if [ "$POLY" = "POLY1" ]; then
            cat $FAUSTARCH/max-msp/wrapper-poly.maxpat > ${f%.dsp}-temp1.maxpat
        else
            cat $FAUSTARCH/max-msp/wrapper.maxpat > ${f%.dsp}-temp1.maxpat
        fi
        sed -e "s/DSP_NAME/"${f%.dsp}"~/g" ${f%.dsp}-temp1.maxpat >> ${f%.dsp}-temp2.maxpat
        sed -e "s/UI_FILE/"$JSFILE_PATH"/g" ${f%.dsp}-temp2.maxpat > ${f%.dsp}.maxpat

        # copy JavaScript UI file
        cp $FAUSTARCH/max-msp/ui.js .
        rm ${f%.dsp}-temp1.maxpat
        rm ${f%.dsp}-temp2.maxpat

        BINARIES="$BINARIES ${f%.dsp}.maxpat ui.js"
    fi

done

echo "$BINARIES"
