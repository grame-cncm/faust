#! /bin/bash -e

#####################################################################
#                                                                   #
#               Compiles Faust programs to puredata                 #
#               (c) Grame, 2009-2014                                #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS=$MYGCCFLAGS

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# PHASE 1 : Look for -icc option to force use of intel icc (actually icpc)
# without having to configure CXX and CXXFLAGS
for p in $@; do
	if [ "$p" = -icc ]; then
		CXX=icpc
		CXXFLAGS='-O3 -xHost -ftz -fno-alias -fp-model fast=2'
    fi
done

#PHASE 2 : dispatch command arguments
for p in $@; do

	if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2puredata [-arch32] [-arch64]  <file.dsp>"
        echo "Use '-arch32' to compile in 32 bits"
        echo "Use '-arch64' to compile in 64 bits"
        echo "Use '-poly' to produce a polyphonic self-contained DSP"
        exit
    fi
    
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-arch32" ]; then
		PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-poly" ]; then
		F2PDPOLY="-n 8"
    elif [ $p = "-arch64" ]; then
		PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-------------------------------------------------------------------
# Check darwin specifics
#
if [[ $(uname) == Darwin ]]; then
    LIB="-I/Applications/Pd-extended.app/Contents/Resources/include/ -I. -bundle -undefined suppress -flat_namespace"    
    EXT="~.pd_darwin"
else
    LIB="-I/usr/include/pd -I/usr/include/pdextended -I. -fPIC -shared"
    EXT="~.pd_linux"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")

    # creates a temporary dir 
    TDR=$(mktemp -d faust.XXXXXX)
    TMP=$TDR/${f%.dsp}
    mkdir "$TMP"
    
    # case where a foreign C++ function is called in the Faust code (TODO: this is only a quick fix!)
    count=`ls -1 *.h 2>/dev/null | wc -l`
    if [ $count != 0 ]; then
    	cp *.h $TMP
    fi

    # compile faust to c++ and xml
    faust -xml "$SRCDIR/$f" -o /dev/null || exit
    mv "$SRCDIR/$f.xml" $TMP/
    faust -i -a puredata.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit

    # compile c++ to binary
    (
        cd "$TMP"
		if [[ $(uname) == Darwin ]]; then
			# On Darwin we build 32-bits and 64-bits plugins combined with lipo
			${CXX=g++}  -arch i386 $CXXFLAGS  $FAUSTTOOLSFLAGS $OMP $LIB -Dmydsp=${f%.dsp} -o ${f%.dsp}.i386 ${f%.dsp}.cpp || exit
			${CXX=g++}  -arch x86_64 $CXXFLAGS $FAUSTTOOLSFLAGS $OMP $LIB -Dmydsp=${f%.dsp} -o ${f%.dsp}.x86_64 ${f%.dsp}.cpp || exit
			lipo -create "${f%.dsp}.i386" "${f%.dsp}.x86_64"  -output "${f%.dsp}$EXT" || exit
		else
			${CXX=g++} $CXXFLAGS $FAUSTTOOLSFLAGS $PROCARCH $OMP $LIB -Dmydsp=${f%.dsp} -o ${f%.dsp}$EXT ${f%.dsp}.cpp || exit
		fi		
        if [ $(which faust2pd) ]; then
        	faust2pd -s $F2PDPOLY $f.xml
        fi
    ) > /dev/null || exit

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    # collects all the files produced
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
    if [ $(which faust2pd)  ]; then
    	cp "$TMP/${f%.dsp}.pd" "$SRCDIR/${f%.dsp}.pd"
    	BINARIES="$BINARIES$SRCDIR/${f%.dsp}.pd;"
    fi
    rm -rf "$TDR"

done

# return the binaries names
echo "$BINARIES"


