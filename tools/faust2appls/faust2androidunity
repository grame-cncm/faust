#! /bin/bash -e

#############################################################################################################
#                                                                                                           #
#   Compiles Faust programs to Android libraries for the Unity environment                                  #
#       suitable for armeabi-v7a and x86 Android architectures                                              #
#                                                                                                           #
#   (c) Grame, 2017                                                                                         #
#                                                                                                           #
#############################################################################################################

#   This script shouldn't be used on its own, use the "faust2unity" script instead
#   The libraries are firstly wrapped by the unityplugin.cpp architecture file
#   They have to be used in the Unity environment
#   The libraries does not work by themselves, they need the FaustPlugin_<dspname>.cs and FaustUtilities_<dspname>.cs files to be functionnal
#   These files are automatically generated by the "faust2unity" script

. faustpath
. faustoptflags

NVOICES=-1

CXXFLAGS=$MYGCCFLAGS

ANDROID_MK=Android.mk

#-------------------------------------------------------------------
# Dispatch command arguments

SOURCE="0"

while [ $1 ] 
do
    p=$1
    
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2androidunity [-nvoices <num>] [additional Faust options (-vec -vs 8...)] <file1.dsp> [<file2.dsp>]"
        echo "Creates android libraries (armeabi-v7a and x86) for faust unity plugin."
        echo "Android sdk should be installed. Make sure the ANDROID_HOME environment variable is correctly set up. It should be pointing to the sdk folder."
        echo "Use 'faust2unity -android' to also create the c# and JSON files"
        echo "Use '-nvoices <num>' to produce a polyphonic self-contained DSP with <num> voices, ready to be used with MIDI"
        echo "If you need other android architectures, open architecture/unity/Android/Application.mk and modify APP_ABI."
        echo "See architecture/unity/README.md for more info or in the compile folder"
        exit
    fi
    
    if [ $p = "-nvoices" ]; then
        shift
        NVOICES=$1
        ANDROID_MK=AndroidPoly.mk
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
    
shift
done

#-------------------------------------------------------------------
# compiles the *.dsp files

for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    NAME=${f%.dsp}
    FNAME=FaustPlugin_$NAME
    SRCDIR=$(dirname "$p")
    FIN=$FNAME/Android

    # creates a temporary dir
    TMP=$(mktemp -d android.XXXX)

    # checks if final dir exists
    if [ ! -d "$FIN" ]; then
        mkdir -p "$FIN"
    fi

    # compiles faust to c++
    faust -i -a $FAUSTLIB/unity/unityplugin.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/$NAME.cpp" || (echo "$f : Faust to C++ compilation failed in faust2androidunity"; exit 1)

    # compiles c++ to binary
    cd "$TMP"

    # Android.mk and Application.mk contains the compilation settings.
    # They are moved to the working directory for compilation then deleted
    cp -r "$FAUSTLIB/unity/Android/$ANDROID_MK" "Android.mk"
    cp -r "$FAUSTLIB/unity/Android/Application.mk" "Application.mk"
    $ANDROID_HOME/ndk-bundle/ndk-build NDK_PROJECT_PATH=. NDK_APPLICATION_MK=Application.mk FILE=$NAME > /dev/null || (echo "$f : C++ to armeabi-v7a and x86 library compilations failed in faust2androidunity"; exit 1)
    rm -rf "Android.mk"
    rm -rf "Application.mk"
    rm -rf "obj"
    rm -rf "$NAME.cpp"
    cd ..

    # moves binaries to final dir and deletes libs/
    mv $TMP/libs/* $TMP
    rm -rf $TMP/libs

    mv $TMP/* $FIN/
    rm -rf $TMP

    echo "$f : Android armeabi-v7a and x86 compilations completed"

done

