#! /bin/bash -e

. faustpath

#-------------------------------------------------------------------
# Compiler settings


for p in $@; do
    if [ "$p" = -omp ]; then
        OMP="-fopenmp"
    fi

    if [ "$p" = -icc ]; then
        ignore=" "
    elif [ $p = "-arch32" ]; then
        PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
        PROCARCH="-m64"
    elif [ $p = "-poly" ]; then
        F2PDPOLY="-n 8"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"
    fi
done

#-------------------------------------------------------------------
# compiles the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    NAME=${f%.dsp}
    SRCDIR=$(dirname "$p")
    DIR="$SRCDIR/Android"
    if [ -d "$DIR" ]; then
        rm -rf "$DIR"
    fi
    mkdir "$DIR"

    # compiles faust to c++

    faust -i -a unity/unityplugin.cpp $OPTIONS "$SRCDIR/$f" -o "$DIR/$NAME.cpp" || exit

    # compiles c++ to binary
    (
        cd "$DIR"
        cp -r "$FAUSTLIB/unity/Makefile" "Makefile"
        cp -r "$FAUSTLIB/unity/Android/Android.mk" "Android.mk"
        cp -r "$FAUSTLIB/unity/Android/Application.mk" "Application.mk"
        make FILE=$NAME
        rm -rf "Makefile"
        rm -rf "Android.mk"
        rm -rf "Application.mk"
        rm -rf "obj"
        rm -rf "$NAME.cpp"

    ) > /dev/null || exit



done




