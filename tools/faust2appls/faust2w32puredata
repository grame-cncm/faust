#! /bin/bash -e

#####################################################################
#                                                                   #
#               Cross-compiles Faust programs to puredata           #
#			from 	: Linux				    #
#			to	: Windows 32			    #
#               (c) Grame, 2014                                     #
#                                                                   #
#####################################################################

#------------------------------------------------------------------------------
# mingw crosscompiler should be installed ('mingw32' package on Ubuntu)
# the exact prefix should be specified in the environment variable MINGW
PDW32INCLUDEDIR=/usr/include/pd
PDW32BINDIR=/usr/lib/i686-w64-mingw32/pd
. faustpath

: ${MINGWPREFIX="i686-w64-mingw32-"}
CXX="${MINGWPREFIX}g++"
(which "$CXX" >/dev/null) || (echo "MingW compiler $CXX not found"; exit 1)

if [ ! -e "${PDW32BINDIR}/pd.dll" ]; then
  echo "Unable to locate pd.dll: PDW32BINDIR=${PDW32BINDIR}!" 1>&2
  exit 1
fi

#-------------------------------------------------------------------
# Compiler settings

CXXFLAGS="-O3 -mfpmath=sse -msse -ffast-math -Wl,--enable-auto-import"
LIB="-I${PDW32INCLUDEDIR} -shared ${PDW32BINDIR}/pd.dll"
EXT="~.dll"



#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ "$p" = -omp ]; then
    	OMP="-fopenmp"
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-arch32" ]; then
	PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
	PROCARCH="-m64"
    elif [ $p = "-poly" ]; then
	F2PDPOLY="-n 8"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done




#-------------------------------------------------------------------
# compile the *.dsp files
#
for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
    SRCDIR=$(dirname "$p")

    # creates a temporary dir 
    TDR=$(mktemp -d faust.XXXXXX)
    TMP=$TDR/${f%.dsp}
    mkdir "$TMP"
    
    # case where a foreign C++ function is called in the Faust code (TODO: this is only a quick fix!)
    count=`ls -1 *.h 2>/dev/null | wc -l`
    if [ $count != 0 ]; then
    	cp *.h $TMP
    fi

    # compile faust to c++ and xml
    faust -xml "$SRCDIR/$f" -o /dev/null;
    mv "$SRCDIR/$f.xml" $TMP/
    faust -i -a puredata.cpp $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}.cpp" || exit

    # compile c++ to binary
    (
        cd "$TMP"
		$CXX $CXXFLAGS $FAUSTTOOLSFLAGS $PROCARCH $OMP $LIB -static-libstdc++ -static-libgcc -Dmydsp=${f%.dsp} -o ${f%.dsp}$EXT ${f%.dsp}.cpp

        if [ $(which faust2pd) ]; then
        	faust2pd -s $F2PDPOLY $f.xml
        fi
    ) > /dev/null || exit

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    cp "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    
    # collects all the files produced
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
    if [ $(which faust2pd)  ]; then
    	cp "$TMP/${f%.dsp}.pd" "$SRCDIR/${f%.dsp}.pd"
    	BINARIES="$BINARIES$SRCDIR/${f%.dsp}.pd;"
    fi
    rm -rf "$TDR"


done

# return the binaries names
echo "$BINARIES"


