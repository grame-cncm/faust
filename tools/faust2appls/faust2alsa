#!/bin/bash

OSCDEFS=""

#####################################################################
#                                                                   #
#               Compiles Faust programs to alsa-gtk                 #
#               (c) Grame, 2009-2013                                #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS=$MYGCCFLAGS

#-------------------------------------------------------------------
# Analyze command arguments :
# faust options                 -> OPTIONS
# if -omp : -openmp or -fopenmp -> OPENMP
# existing *.dsp files          -> FILES
#

# PHASE 1 : Look for -icc option to force use of intel icc (actually icpc)
# without having to configure CXX and CXXFLAGS
CXX=g++
for p in $@; do
	if [ "$p" = -icc ]; then
		CXX=icpc
		CXXFLAGS=$MYICCFLAGS
    fi
done

#PHASE 2 : dispatch command arguments
for p in $@; do
    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2alsa [-httpd] [-qrcode] [-midi] [-osc] <file.dsp>"
        echo "Use '-httpd' to activate HTTP control"
        echo "Use '-qrcode' to activate QR code generation"
        echo "Use '-poly' to produce a polyphonic DSP, ready to be used with MIDI events"
        echo "Use '-midi' to activate MIDI control"
        echo "Use '-osc' to activate OSC control"
    fi
    if [ "$p" = -omp ]; then
        if [[ $CXX == "icpc" ]]; then
            OMP="-openmp"
        else
            OMP="-fopenmp"
        fi
    fi
  
    if [ "$p" = -icc ]; then
    	ignore=" "
    elif [ $p = "-poly" ]; then
        POLYDEFS="-DPOLY"
    elif [ $p = "-midi" ]; then
        MIDIDEFS="-DMIDICTRL"
    elif [ $p = "-osc" ]; then
	 OSCDEFS="-DOSCCTRL -lOSCFaust"
	 YPATH="-L/usr/local/lib"
    elif [ $p = "-httpd" ]; then
	 HTTPDEFS="-DHTTPCTRL -lHTTPDFaust -lmicrohttpd"
	 YPATH="-L/usr/local/lib"
    elif [ $p = "-arch32" ]; then
	PROCARCH="-m32 -L/usr/lib32"
    elif [ $p = "-arch64" ]; then
	PROCARCH="-m64"
    elif [ ${p:0:1} = "-" ]; then
	    OPTIONS="$OPTIONS $p"
	elif [[ -f "$p" ]]; then
	    FILES="$FILES $p"
	else
	    OPTIONS="$OPTIONS $p"        
	fi
done

#-------------------------------------------------------------------
# compile the *.dsp files using ALSA and GTK on linux
#
for f in $FILES; do
	
	# compile faust to c++
	faust -i -a alsa-gtk.cpp $OPTIONS "$f" -o "$f.cpp" || exit

	# compile c++ to binary
	(
		$CXX $CXXFLAGS $FAUSTTOOLSFLAGS $OMP "$f.cpp" `pkg-config --cflags --libs alsa gtk+-2.0` $PROCARCH $YPATH $OSCDEFS $HTTPDEFS $POLYDEFS $MIDIDEFS -o "${f%.dsp}"
	)> /dev/null  || exit
	rm "$f.cpp"

	# collect binary file name for FaustWorks
	BINARIES="$BINARIES${f%.dsp};"
done

echo $BINARIES


