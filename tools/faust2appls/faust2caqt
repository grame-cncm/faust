#! /bin/bash -e
set -e
#set -x

#####################################################################
#                                                                   #
#               Compiles Faust programs to CoreAudio and QT         #
#               (c) Grame, 2012-2018                                #
#                                                                   #
#####################################################################

. faustpath
. faustoptflags

CXXFLAGS=$MYGCCFLAGS

ARCHFILE=$FAUSTARCH/ca-qt.cpp

[ -d /opt/local/lib ] && OPTLIB=-L/opt/local/lib
ARCHLIB="-L$FAUSTLDDIR -L/usr/local/lib $OPTLIB -framework CoreAudio -framework AudioUnit -framework CoreServices -framework CoreMIDI -framework CoreFoundation"
DEBUG=false

#-------------------------------------------------------------------
#PHASE 1 : dispatch command arguments
#-------------------------------------------------------------------

OSCDEFS=""
OSCLIB=""
POLY="POLY"
DEPLOY="yes"
EFFECT=""
PRESETDIR="auto"
NVOICES=-1
SOUNDFILE="0"
SOUNDFILEDEFS=""
SOUNDFILELIBS=""
SAMPLERATEDEFS=""
SAMPLERATELIBS=""
OPT=""

while [ $1 ] 
do
    p=$1

    if [ $p = "-help" ] || [ $p = "-h" ]; then
        echo "faust2caqt [-opt native|generic] [-httpd] [-qrcode] [-soundfile] [-resample] [-nvoices <num>] [-effect auto|<effect.dsp>] [-midi] [-osc] [-preset auto|<directory>] [-me] [-debug] [-nodeploy] [additional Faust options (-vec -vs 8...)] <file.dsp>"
        echo "Use '-opt native' to activate the best compilation options for the native CPU"
        echo "Use '-opt generic' to activate the best compilation options for a generic CPU"
        echo "Use '-httpd' to activate HTTP control"
        echo "Use '-qrcode' to activate QR code generation"
        echo "Use '-nvoices <num>' to produce a polyphonic self-contained DSP with <num> voices, ready to be used with MIDI or OSC"
        echo "Use '-soundfile' when compiling DSP using 'soundfile' primitive, to add needed resources"
        echo "Use '-resample' to resample soundfiles to the audio driver sample rate"
        echo "Use '-effect <effect.dsp>' to produce a polyphonic DSP connected to a global output effect, ready to be used with MIDI or OSC"
        echo "Use '-effect auto' to produce a polyphonic DSP connected to a global output effect defined as 'effect' in <file.dsp>, ready to be used with MIDI or OSC"
        echo "Use '-midi' to activate MIDI control"
        echo "Use '-osc' to activate OSC control"
        echo "Use '-preset <directory>' to add a preset manager on top of GUI and save the preset files in a given directory"
        echo "Use '-preset auto' to add a preset manager on top of GUI and save the preset files in a system temporary directory"
        echo "Use '-me' to catch math computation exception (floating point exceptions and integer div-by-zero or overflow)"
        echo "Use '-debug' to print all the build steps"
        echo "Use '-nodeploy' to not create a self-contained application using 'macdeployqt'"
        exit
    fi

    if [ "$p" = -debug ]; then
        DEBUG=true
    elif [ $p = "-opt" ]; then
        shift
        OPT=$1
    elif [ $p = "-nodeploy" ]; then
    	DEPLOY="no"
    elif [ "$p" = "-icc" ]; then
        ignore=" "
    elif [ "$p" = "-me" ]; then
    	MATHDEFS="DEFINES += HAS_MATH_EXCEPTION"
    elif [ $p = "-nvoices" ]; then
        POLYDEFS="DEFINES += POLY"
        shift
        NVOICES=$1
        if [ $NVOICES -ge 0 ]; then
            CXXFLAGS="$CXXFLAGS -DNVOICES=$NVOICES"
        fi
    elif [ $p = "-effect" ]; then
        POLYDEFS="DEFINES += POLY2"
        POLY="POLY2"
        shift
        EFFECT=$1
    elif [ $p = "-midi" ]; then
        MIDIDEFS="DEFINES += MIDICTRL"
    elif [ $p = "-soundfile" ]; then
        SOUNDFILE="1"
        SOUNDFILEDEFS="DEFINES += SOUNDFILE"
        SOUNDFILELIBS=`pkg-config --cflags --static --libs sndfile`
    elif [ $p = "-resample" ]; then
        SAMPLERATEDEFS="DEFINES += SAMPLERATE"
        SAMPLERATELIBS=`pkg-config --cflags --static --libs samplerate`
    elif [ $p = "-osc" ]; then
         OSCDEFS="DEFINES += OSCCTRL"
         OSCLIBS="-lOSCFaust"
    elif [ "$p" = "-httpd" ]; then
        HTTPDEFS="DEFINES += HTTPCTRL"
        HTTPLIBS="-lHTTPDFaust -lmicrohttpd"
    elif [ "$p" = "-preset" ]; then
        PRESETDEFS="DEFINES += PRESETUI"
        shift
        PRESETDIR=$1
    elif [ "$p" = "-qrcode" ]; then # requires -httpd
        QRDEFS="DEFINES += QRCODECTRL"
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    elif [[ -f "$p" ]]; then
        FILES="$FILES $p"
    else
        OPTIONS="$OPTIONS $p"        
	fi

shift

done

#-------------------------------------------------------------------
# Check darwin specifics
#-------------------------------------------------------------------

if [[ $(uname) == Darwin ]]; then
    SYS_VERSION=$(uname -v | cut -d : -f1 | cut -d. -f1 | cut -d' ' -f4)
    if [ $SYS_VERSION -ge 13 ]
	then
	    SPEC="-spec macx-clang"
	    CLANGOPT="QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9"  
	    CXXFLAGS="$CXXFLAGS -mmacosx-version-min=10.9"
	else
	    SPEC="-spec macx-g++"
	    CLANGOPT=""
	fi
    EXT=".app"
fi

#-------------------------------------------------------------------
# compile the *.dsp files
#-------------------------------------------------------------------

for p in $FILES; do

    CUR=$(pwd)
    f=$(basename "$p")
	SRCDIR=$(dirname "$p")

    # creates a temporary dir 
    TDR=$(mktemp -d faust.XXXXXX)
	TMP="$TDR/${f%.dsp}"
    mkdir "$TMP"

    # discover best compilation options
    if [ "$OPT" = "generic" ]; then
        echo "Look for best compilation options in generic mode..."
        OPTIONS="$(faustbench-llvm -notrace -generic $f)"
    elif [ "$OPT" = "native" ]; then
        echo "Look for best compilation options in native mode..."
        OPTIONS="$(faustbench-llvm -notrace $f)"
        echo $OPTIONS
    fi

    # compile faust to c++
    if [ $POLY = "POLY2" ]; then
        if [ $EFFECT = "auto" ]; then
            cat > $TMP/effect.dsp << EndOfCode
            adapt(1,1) = _;
            adapt(2,2) = _,_;
            adapt(1,2) = _ <: _,_;
            adapt(2,1) = _,_ :> _;
            adaptor(F,G) = adapt(outputs(F),inputs(G));
            process = adaptor(library("$SRCDIR/$f").process, library("$SRCDIR/$f").effect) : library("$SRCDIR/$f").effect;
EndOfCode
            faust -i -json -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}_tmp.cpp" || exit
            faust -i -cn effect -a minimal-effect.cpp "$TMP/effect.dsp" -o "$TMP/effect.h" || exit
            rm "$TMP/effect.dsp"
        else
            faust -i -json -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}_tmp.cpp" || exit
            faust -i -cn effect -a minimal-effect.cpp "$SRCDIR/$EFFECT" -o "$TMP/effect.h" || exit
        fi
    else
        faust -i -json -a $ARCHFILE $OPTIONS "$SRCDIR/$f" -o "$TMP/${f%.dsp}_tmp.cpp" || exit
    fi

    # add preset management
    if [ $PRESETDIR = "auto" ]; then
        echo "#define PRESETDIR \"/var/tmp/\"" > "$TMP/preset.cpp"
    else
        echo "#define PRESETDIR \"$PRESETDIR\"" > "$TMP/preset.cpp"
    fi

    cat "$TMP/preset.cpp" "$TMP/${f%.dsp}_tmp.cpp" > "$TMP/${f%.dsp}.cpp"
    rm "$TMP/preset.cpp"
    rm "$TMP/${f%.dsp}_tmp.cpp"

    # compile c++ to binary
    (
	    cd "$TMP"
	    qmake -project "QT += widgets printsupport network" "CONFIG+=warn_off" "$CLANGOPT" "INCLUDEPATH+=$CUR" "INCLUDEPATH+=$FAUSTINC /opt/local/include" "QMAKE_CXXFLAGS= $CXXFLAGS -Wno-unused-parameter $FAUSTTOOLSFLAGS" "QMAKE_INFO_PLIST=$FAUSTARCH/Info.plist" "LIBS+=$ARCHLIB $SOUNDFILELIBS $SAMPLERATELIBS $OSCLIBS $HTTPLIBS" "HEADERS+=$FAUSTINC/faust/gui/QTUI.h" "RESOURCES+= $FAUSTINC/faust/gui/Styles/Grey.qrc" "$OSCDEFS" "$HTTPDEFS" "$QRDEFS" "$POLYDEFS" "$MIDIDEFS" "$SOUNDFILEDEFS" "$MATHDEFS" "$SAMPLERATEDEFS" "$PRESETDEFS"
	    qmake $SPEC
        make
    ) > /dev/null || exit

    if [ "$SOUNDFILE" = "1" ]; then
        echo $p.json
        # get all soundfiles from the JSON file
        cat $p.json | awk '
            BEGIN { FS=":"; SOFI=0; }
                /"soundfile"/ { SOFI=1; }
                /"url"/ {
                if (SOFI) {
                    match($2, /"[^"]*/);
                    split(substr($2, RSTART+2, RLENGTH-3), res, ";");
                    for (x in res) print substr(res[x], 2, length(res[x])-2);
                    SOFI=0;
                }
            }
        ' > $p-tmp.txt
        # copy found soundfiles in the final binary
        for snd in $(cat $p-tmp.txt); do
            if [ -f $snd ]; then
                if [ ${snd:0:1} = "/" ]; then 
                    echo "Warning: soundfile with absolute path is not copied !"
                else
                    # create destination path and possibly create directory
                    sfpath="$TMP/${f%.dsp}$EXT/Contents/Resources/$(dirname $snd)/"
                    if ! [ -d $sfpath ]; then 
                        echo "Create $sfpath"
                        mkdir $sfpath
                    fi
                    echo "Copy $snd in ${f%.dsp}$EXT"
                    cp $snd $sfpath
                fi
            else
                echo "Error: file $snd not found !"
            fi
        done
        rm $p-tmp.txt
    fi

    # on Mac add the QT libraries to the bundle
    if [[ $(uname) == Darwin ]]; then
        if [ "$DEPLOY" = "yes" ]; then
            macdeployqt "$TMP/${f%.dsp}$EXT" || exit
        fi
    fi

    rm -rf "$SRCDIR/${f%.dsp}$EXT"
    rm $p.json

    cp -r "$TMP/${f%.dsp}$EXT" "$SRCDIR/${f%.dsp}$EXT"
    RMTMP=true
    if $DEBUG;
    then
	    echo "====> delete temporary folder $TDR ? [Y/n]"
	    read DEL
	    [ $DEL == "n" ] && RMTMP=false
	fi	
	[ $RMTMP == true ] && rm -rf "$TDR"

    # collect binary file name for FaustGIDE
    BINARIES="$BINARIES$SRCDIR/${f%.dsp}$EXT;"
done

echo $BINARIES


