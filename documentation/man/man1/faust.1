.\" Automatically generated by Pandoc 2.7.3
.\"
.TH "man" "1" "" "Version 2.20.2 (05-December-2019)" "Faust man page"
.hy
.SH NAME
.PP
Faust - DSP to C/C++, Rust, LLVM IR, JAVA, WebAssembly (wast/wasm),
Interpreter compiler
.SH SYNOPSIS
.PP
\f[B]faust\f[R] [options] file1 [file2 \&...]
.SH DESCRIPTION
.PP
Faust (Functional Audio Stream) is a functional programming language
specifically designed for real-time signal processing and synthesis.
Faust targets high-performance signal processing applications and audio
plug-ins for a variety of platforms and standards.
.SH OPTIONS
.SS Input options:
.PP
\f[B]-a\f[R] <file> wrapper architecture file.
.PP
\f[B]-i\f[R] \f[B]\[en]inline-architecture-files\f[R] inline
architecture files.
.PP
\f[B]-A\f[R] <dir> \f[B]\[en]architecture-dir\f[R] <dir> add the
directory <dir> to the architecture search path.
.PP
\f[B]-I\f[R] <dir> \f[B]\[en]import-dir\f[R] <dir> add the directory
<dir> to the import search path.
.PP
\f[B]-L\f[R] <file> \f[B]\[en]library\f[R] <file> link with the LLVM
module <file>.
.PP
\f[B]-t\f[R] <sec> \f[B]\[en]timeout\f[R] <sec> abort compilation after
<sec> seconds (default 120).
.SS Output options:
.PP
\f[B]-o\f[R] <file> the output file.
.PP
\f[B]-e\f[R] \f[B]\[en]export-dsp\f[R] export expanded DSP (with all
included libraries).
.PP
\f[B]-uim\f[R] \f[B]\[en]user-interface-macros\f[R] add user interface
macro definitions to the output code.
.PP
\f[B]-xml\f[R] generate an XML description file.
.PP
\f[B]-json\f[R] generate a JSON description file.
.PP
\f[B]-O\f[R] <dir> \f[B]\[en]output-dir\f[R] <dir> specify the relative
directory of the generated output code and of additional generated files
(SVG, XML\&...).
.SS Code generation options:
.PP
\f[B]-lang\f[R] <lang> \f[B]\[en]language\f[R] select output language,
`lang' should be in c, ocpp, cpp (default), rust, java, llvm, cllvm,
fir, wast/wasm, soul, interp.
.PP
\f[B]-single\f[R] \f[B]\[en]single-precision-floats\f[R] use single
precision floats for internal computations (default).
.PP
\f[B]-double\f[R] \f[B]\[en]double-precision-floats\f[R] use double
precision floats for internal computations.
.PP
\f[B]-quad\f[R] \f[B]\[en]quad-precision-floats\f[R] use quad precision
floats for internal computations.
.PP
\f[B]-es\f[R] 1|0 \f[B]\[en]enable-semantics\f[R] 1|0 use enable
semantics when 1 (default), and simple multiplication otherwise.
.PP
\f[B]-lcc\f[R] \f[B]\[en]local-causality-check\f[R] check causality also
at local level.
.PP
\f[B]-light\f[R] \f[B]\[en]light-mode\f[R] do not generate the entire
DSP API.
.PP
\f[B]-clang\f[R] \f[B]\[en]clang\f[R] when compiled with clang/clang++,
adds specific #pragma for auto-vectorization.
.PP
\f[B]-flist\f[R] \f[B]\[en]file-list\f[R] use file list used to eval
process.
.PP
\f[B]-exp10\f[R] \f[B]\[en]generate-exp10\f[R] function call instead of
pow(10) function.
.PP
\f[B]-os\f[R] \f[B]\[en]one-sample\f[R] generate one sample computation.
.PP
\f[B]-cn\f[R] <name> \f[B]\[en]class-name\f[R] <name> specify the name
of the dsp class to be used instead of mydsp.
.PP
\f[B]-scn\f[R] <name> \f[B]\[en]super-class-name\f[R] <name> specify the
name of the super class to be used instead of dsp.
.PP
\f[B]-pn\f[R] <name> \f[B]\[en]process-name\f[R] <name> specify the name
of the dsp entry-point instead of process.
.PP
\f[B]-lb\f[R] \f[B]\[en]left-balanced\f[R] generate left balanced
expressions.
.PP
\f[B]-mb\f[R] \f[B]\[en]mid-balanced\f[R] generate mid balanced
expressions (default).
.PP
\f[B]-rb\f[R] \f[B]\[en]right-balanced\f[R] generate right balanced
expressions.
.PP
\f[B]-lt\f[R] \f[B]\[en]less-temporaries\f[R] generate less temporaries
in compiling delays.
.PP
\f[B]-mcd\f[R] <n> \f[B]\[en]max-copy-delay\f[R] <n> threshold between
copy and ring buffer implementation (default 16 samples).
.PP
\f[B]-mem\f[R] \f[B]\[en]memory\f[R] allocate static in global state
using a custom memory manager.
.PP
\f[B]-ftz\f[R] <n> \f[B]\[en]flush-to-zero\f[R] <n> code added to
recursive signals [0:no (default), 1:fabs based, 2:mask based
(fastest)].
.PP
\f[B]-inj\f[R] <f> \f[B]\[en]inject\f[R] <f> inject source file <f> into
architecture file instead of compile a dsp file.
.PP
\f[B]-scal\f[R] \f[B]\[en]scalar\f[R] generate non-vectorized code.
.PP
\f[B]-inpl\f[R] \f[B]\[en]in-place\f[R] generates code working when
input and output buffers are the same (scalar mode only).
.PP
\f[B]-vec\f[R] \f[B]\[en]vectorize\f[R] generate easier to vectorize
code.
.PP
\f[B]-vs\f[R] <n> \f[B]\[en]vec-size\f[R] <n> size of the vector
(default 32 samples).
.PP
\f[B]-lv\f[R] <n> \f[B]\[en]loop-variant\f[R] <n> [0:fastest (default),
1:simple].
.PP
\f[B]-omp\f[R] \f[B]\[en]openmp\f[R] generate OpenMP pragmas, activates
\[en]vectorize option.
.PP
\f[B]-pl\f[R] \f[B]\[en]par-loop\f[R] generate parallel loops in
\[en]openmp mode.
.PP
\f[B]-sch\f[R] \f[B]\[en]scheduler\f[R] generate tasks and use a Work
Stealing scheduler, activates \[en]vectorize option.
.PP
\f[B]-ocl\f[R] \f[B]\[en]opencl\f[R] generate tasks with OpenCL
(experimental).
.PP
\f[B]-cuda\f[R] \f[B]\[en]cuda\f[R] generate tasks with CUDA
(experimental).
.PP
\f[B]-dfs\f[R] \f[B]\[en]deep-first-scheduling\f[R] schedule vector
loops in deep first order.
.PP
\f[B]-g\f[R] \f[B]\[en]group-tasks\f[R] group single-threaded sequential
tasks together when -omp or -sch is used.
.PP
\f[B]-fun\f[R] \f[B]\[en]fun-tasks\f[R] separate tasks code as separated
functions (in -vec, -sch, or -omp mode).
.PP
\f[B]-fm\f[R] <file> \f[B]\[en]fast-math\f[R] <file> use optimized
versions of mathematical functions implemented in <file>, use
`faust/dsp/fastmath.cpp' when file is `def'.
.PP
\f[B]-ns\f[R] <name> \f[B]\[en]namespace\f[R] <name> generate C++ code
in a namespace <name>
.SS Block diagram options:
.PP
\f[B]-ps\f[R] \f[B]\[en]postscript\f[R] print block-diagram to a
postscript file.
.PP
\f[B]-svg\f[R] \f[B]\[en]svg\f[R] print block-diagram to a svg file.
.PP
\f[B]-sd\f[R] \f[B]\[en]simplify-diagrams\f[R] try to further simplify
diagrams before drawing.
.PP
\f[B]-drf\f[R] \f[B]\[en]draw-route-frame\f[R] draw route frames instead
of simple cables.
.PP
\f[B]-f\f[R] <n> \f[B]\[en]fold\f[R] <n> threshold to activate folding
mode during block-diagram generation (default 25 elements).
.PP
\f[B]-fc\f[R] <n> \f[B]\[en]fold-complexity\f[R] <n> complexity
threshold to fold an expression in folding mode (default 2)
\f[B]-mns\f[R] <n> \f[B]\[en]max-name-size\f[R] <n> threshold during
block-diagram generation (default 40 char).
.PP
\f[B]-sn\f[R] \f[B]\[en]simple-names\f[R] use simple names (without
arguments) during block-diagram generation.
.PP
\f[B]-blur\f[R] \f[B]\[en]shadow-blur\f[R] add a shadow blur to SVG
boxes.
.SS Math doc options:
.PP
\f[B]-mdoc\f[R] \f[B]\[en]mathdoc\f[R] print math documentation of the
Faust program in LaTeX format in a -mdoc folder.
.PP
\f[B]-mdlang\f[R] <l> \f[B]\[en]mathdoc-lang\f[R] <l> if translation
file exists (<l> = en, fr, \&...).
.PP
\f[B]-stripmdoc\f[R] \f[B]\[en]strip-mdoc-tags\f[R] strip mdoc tags when
printing Faust -mdoc listings.
.SS Debug options:
.PP
\f[B]-d\f[R] \f[B]\[en]details\f[R] print compilation details.
.PP
\f[B]-time\f[R] \f[B]\[en]compilation-time\f[R] display compilation
phases timing information.
.PP
\f[B]-tg\f[R] \f[B]\[en]task-graph\f[R] print the internal task graph in
dot format.
.PP
\f[B]-sg\f[R] \f[B]\[en]signal-graph\f[R] print the internal signal
graph in dot format.
.PP
\f[B]-norm\f[R] \f[B]\[en]normalized-form\f[R] print signals in
normalized form and exit.
.PP
\f[B]-ct\f[R] \f[B]\[en]check-table\f[R] check table index range.
.SS Information options:
.PP
\f[B]-h\f[R] \f[B]\[en]help\f[R] print this help message.
.PP
\f[B]-v\f[R] \f[B]\[en]version\f[R] print version information and
embedded backends list.
.PP
\f[B]-libdir\f[R] \f[B]\[en]libdir\f[R] print directory containing the
Faust libraries.
.PP
\f[B]-includedir\f[R] \f[B]\[en]includedir\f[R] print directory
containing the Faust headers.
.PP
\f[B]-archdir\f[R] \f[B]\[en]archdir\f[R] print directory containing the
Faust architectures.
.PP
\f[B]-dspdir\f[R] \f[B]\[en]dspdir\f[R] print directory containing the
Faust dsp libraries.
.PP
\f[B]-pathslist\f[R] \f[B]\[en]pathslist\f[R] print the architectures
and dsp library paths.
.SS Example:
.PP
faust \f[B]-a\f[R] jack-gtk.cpp -o myfx.cpp myfx.dsp
.SH SEE ALSO
.PP
Grame Faust site at: \f[B]<https://faust.grame.fr>\f[R]
.SH BUGS
.PP
Please report bugs to:
\f[B]<https://github.com/grame-cncm/faust/issues>\f[R]
.SH AUTHOR
.PP
Copyright (C) 2002-2019, GRAME - Centre National de Creation Musicale.
All rights reserved.
