//################################### synths.lib ##########################################
// This library contains a collection of envelope generators.
//
// It should be used using the `sy` environment:
//
// ```
// sy = library("synths.lib");
// process = sy.functionCall;
// ```
//
// Another option is to import `stdfaust.lib` which already contains the `sy`
// environment:
//
// ```
// import("stdfaust.lib");
// process = sy.functionCall;
// ```
//########################################################################################

/************************************************************************
************************************************************************
FAUST library file
Copyright (C) 2003-2016 GRAME, Centre National de Creation Musicale
----------------------------------------------------------------------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the GNU C Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a
larger FAUST program which directly or indirectly imports this library
file and still distribute the compiled code generated by the FAUST
compiler, or a modified version of this compiled code, under your own
copyright and license. This EXCEPTION TO THE LGPL LICENSE explicitly
grants you the right to freely choose the license for the resulting
compiled code. In particular the resulting compiled code has no obligation
to be LGPL or GPL. For example you are free to choose a commercial or
closed source license or any other license if you decide so.
************************************************************************
************************************************************************/

declare name "Faust Synthesizer Library";
declare version "0.0";

ma = library("maths.lib");
ba = library("basics.lib");
en = library("envelopes.lib");
fi = library("filters.lib");
os = library("oscillators.lib");
no = library("noises.lib");

//-----------------------------------`popFilterPerc`--------------------------------------
// A simple percussion instrument based on a "popped" resonant bandpass filter.
// `popFilterPerc` is a standard Faust function.
//
// #### Usage
//
// ```
// popFilterDrum(freq,q,gate) : _;
// ```
//
// Where:
//
// * `freq`: the resonance frequency of the instrument 
// * `q`: the q of the res filter (typically, 5 is a good value)
// * `gate`: the trigger signal (0 or 1)
//----------------------------------------------------------------------------------------
// TODO: author RM
popFilterDrum(freq,q,gate) = en.ar(0.001,0.001,gate)*no.noise : fi.resonbp(freq,q,1);


//---------------------------------------`dubDub`-----------------------------------------
// A simple synth based on a sawtooth wave filtered by a resonant lowpass.
// `dubDub` is a standard Faust function.
// 
// #### Usage
// 
// ```
// dubDub(freq,ctFreq,q,gate) : _;
// ```
//
// Where:
//
// * `freq`: frequency of the sawtooth
// * `ctFreq`: cutoff frequency of the filter
// * `q`: Q of the filter
// * `gate`: the trigger signal (0 or 1)
//----------------------------------------------------------------------------------------
// TODO: author RM
dubDub(freq,ctFreq,q,gate) = os.sawtooth(freq)*gainEnvelope : fi.resonlp(ctFreq,q,1)
with{
	maxGain = 0.5;
	gainEnvelope = en.smoothEnvelope(0.01,gate)*maxGain;
};


//-----------------------------------`sawTrombone`----------------------------------------
// A simple trombone based on a lowpassed sawtooth wave.
// `sawTrombone` is a standard Faust function.
//
// #### Usage
//
// ```
// sawTrombone(att,freq,gain,gate) : _
// ```
//
// Where:
//
// * `att`: exponential attack duration in s (typically 0.01)
// * `freq`: the frequency
// * `gain`: the gain (0-1)
// * `gate`: the gate (0 or 1)
//----------------------------------------------------------------------------------------
// TODO: author RM
sawTrombone(freq,gain,gate) = os.sawtooth(freq)*gainEnvelope : fi.lowpass(3,cutoff)
with{
	// controls both the gain of the instrument and the lowpass frequency
	gainEnvelope = en.smoothEnvelope(0.01,gate)*gain;
	cutoff = gainEnvelope*5000+50;
};


//-----------------------------------`combString`-----------------------------------------
// Simplest string physical model ever based on a comb filter.
// `combString` is a standard Faust function.
//
// #### Usage
//
// ```
// combString(freq,res,gate) : _;
// ```
//
// Where:
// 
// * `freq`: the frequency of the string
// * `res`: string T60 (resonance time) in second
// * `gate`: trigger signal (0 or 1)
//----------------------------------------------------------------------------------------
// TODO: author RM
combString(freq,res,gate) = excitation : fi.fb_fcomb(maxDel,N,b0,aN)
with{
	maxDel = 1024;
	N = ma.SR/freq;
	b0 = 1;
	aN = ba.tau2pole(res*0.001)*-1;
	excitation = no.noise*en.ar(0.001,0.001,gate);
};


//-----------------------------------`additiveDrum`---------------------------------------
// A simple drum using additive synthesis.
// `additiveDrum` is a standard Faust function.
//
// #### Usage
//
// ```
// additiveDrum(freq,freqRatio,gain,harmDec,att,rel,gate) : _
// ```
//
// Where:
//
// * `freq`: the resonance frequency of the drum
// * `freqRatio`: a list of ratio to choose the frequency of the mode in 
// 		function of `freq` e.g.(1 1.2 1.5 ...). The first element should always 
//		be one (fundamental).
// * `gain`: the gain of each mode as a list (1 0.9 0.8 ...). The first element 
//		is the gain of the fundamental.
// * `harmDec`: harmonic decay ratio (0-1): configure the speed at which 
//		higher modes decay compare to lower modes.
// * `att`: attack duration in second
// * `rel`: release duration in second
// * `gate`: trigger signal (0 or 1)
//----------------------------------------------------------------------------------------
// TODO: author RM
additiveDrum(freq,freqRatio,gain,modeDec,att,rel,gate) = par(i,N,os.osc(modeFreq(i))*gainEnvelope(i)) :> _
with{
	N = ba.count(freqRatio);
	modeFreq(i) = freq*ba.take(i+1,freqRatio);
	modeGain(i) = ba.take(i+1,gain);
	gainEnvelope(i) = modeGain(i)*en.ar(att,rel*(1-(modeDec*(i/N))),gate);
};


//-----------------------------------`fm`---------------------------------------
// An FM synthesizer with an arbitrary number of modulators connected as a sequence.
// `fm` is a standard Faust function.
//
// #### Usage
//
// ```
// freqs = (300,400,...);
// indices = (20,...);
// fm(freqs,indices) : _
// ```
// 
// Where:
// 
// * `freqs`: a list of frequencies where the first one is the frequency of the carrier
//		and the others, the frequency of the modulator(s)
// * `indices`: the indices of modulation (Nfreqs-1)
//----------------------------------------------------------------------------------------
// TODO: author RM
fm(freqs,indices) = seq(i,N,fmBlock(i))
with{
	N = ba.count(freqs);
	freq(i) = ba.take(N-i,freqs);
	gain(i) = ba.take(N-i,indices);
	fmBlock(0) = freq(0) : os.osc;
	fmBlock(i) = *(gain(i))*freq(i) : os.osc;
};





