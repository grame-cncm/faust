// Faust DX7 presets library created from brass.syx

import("stdfaust.lib");

// NAME: BRASS1
// ALGORITHM: 18
dx7_BRASS1(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,37,46,66,48,42));
	egR2(n) = ba.take(n+1,(24,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(19,15,22,22,22,20));
	egR4(n) = ba.take(n+1,(60,64,56,50,50,70));
	egL1(n) = ba.take(n+1,(99,85,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,0,86,61,61,0));
	egL3(n) = ba.take(n+1,(86,0,86,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,67,79,79,70,79));
	keyVelSens(n) = ba.take(n+1,(2,2,3,1,1,1));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,1,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 5;
	lfoSpeed = 35;
};

// NAME: BRASS2
// ALGORITHM: 18
dx7_BRASS2(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(55,37,46,66,48,77));
	egR2(n) = ba.take(n+1,(24,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(19,15,22,22,22,20));
	egR4(n) = ba.take(n+1,(55,70,50,50,50,70));
	egL1(n) = ba.take(n+1,(99,85,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,0,86,61,61,0));
	egL3(n) = ba.take(n+1,(86,0,86,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,70,77,79,70,79));
	keyVelSens(n) = ba.take(n+1,(2,1,1,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,1,0,0,7));
	feedback = 6 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 5;
	lfoSpeed = 35;
};

// NAME: BRASS3
// ALGORITHM: 22
dx7_BRASS3(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(67,35,67,67,67,53));
	egR2(n) = ba.take(n+1,(36,32,36,36,36,32));
	egR3(n) = ba.take(n+1,(27,28,27,27,27,28));
	egR4(n) = ba.take(n+1,(71,58,71,71,71,58));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(97,97,97,97,97,97));
	egL3(n) = ba.take(n+1,(99,96,99,99,99,96));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,88,99,99,99,80));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,2));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.5,0.5,0.5,0.5,0.5));
	opDetune(n) = ba.take(n+1,(0,4,-1,2,1,5));
	opRateScale(n) = ba.take(n+1,(0,4,0,0,0,4));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 37;
};

// NAME: BRASS4
// ALGORITHM: 2
dx7_BRASS4(freq,gain,gate) = 
dx.dx7_algo(1,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(65,50,64,70,70,77));
	egR2(n) = ba.take(n+1,(99,26,40,27,27,27));
	egR3(n) = ba.take(n+1,(99,18,23,16,16,16));
	egR4(n) = ba.take(n+1,(41,31,42,49,49,49));
	egL1(n) = ba.take(n+1,(99,94,99,90,90,90));
	egL2(n) = ba.take(n+1,(99,99,97,99,99,99));
	egL3(n) = ba.take(n+1,(99,95,94,91,91,91));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,88,99,76,91,48));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.5,0.5,0.5,0.5,3));
	opDetune(n) = ba.take(n+1,(-3,6,2,-6,3,7));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 5 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 10;
	lfoSpeed = 33;
};

// NAME: BRASSENS
// ALGORITHM: 9
dx7_BRASSENS(freq,gain,gate) = 
dx.dx7_algo(8,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(65,50,64,70,70,70));
	egR2(n) = ba.take(n+1,(99,26,40,27,27,27));
	egR3(n) = ba.take(n+1,(99,9,23,16,16,16));
	egR4(n) = ba.take(n+1,(41,42,42,49,49,49));
	egL1(n) = ba.take(n+1,(99,94,99,90,90,90));
	egL2(n) = ba.take(n+1,(99,99,97,99,99,99));
	egL3(n) = ba.take(n+1,(99,93,94,91,91,91));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,83,99,70,65,99));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.5,0.5,0.5,0.5,1));
	opDetune(n) = ba.take(n+1,(-2,7,7,6,-6,-6));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 6 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 13;
	lfoSpeed = 14;
};

// NAME: BRASS5THS
// ALGORITHM: 2
dx7_BRASS5THS(freq,gain,gate) = 
dx.dx7_algo(1,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(62,53,62,53,53,70));
	egR2(n) = ba.take(n+1,(70,46,70,13,13,13));
	egR3(n) = ba.take(n+1,(20,60,20,60,60,60));
	egR4(n) = ba.take(n+1,(54,53,54,53,53,53));
	egL1(n) = ba.take(n+1,(99,98,99,98,98,98));
	egL2(n) = ba.take(n+1,(97,95,92,80,80,80));
	egL3(n) = ba.take(n+1,(95,95,84,85,85,85));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,82,98,84,57,92));
	keyVelSens(n) = ba.take(n+1,(1,1,0,1,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1.5,1.5,1.5,1.5));
	opDetune(n) = ba.take(n+1,(0,-7,4,-2,0,2));
	opRateScale(n) = ba.take(n+1,(2,1,2,1,1,1));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 33;
	lfoDepth = 0;
	lfoSpeed = 38;
};

// NAME: PERCBRASS
// ALGORITHM: 28
dx7_PERCBRASS(freq,gain,gate) = 
dx.dx7_algo(27,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(65,50,64,70,70,72));
	egR2(n) = ba.take(n+1,(99,26,40,27,27,27));
	egR3(n) = ba.take(n+1,(99,18,23,16,16,16));
	egR4(n) = ba.take(n+1,(41,31,42,49,49,49));
	egL1(n) = ba.take(n+1,(99,94,99,90,90,90));
	egL2(n) = ba.take(n+1,(99,99,97,99,99,99));
	egL3(n) = ba.take(n+1,(99,95,94,91,91,91));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,89,99,85,73,99));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.5,0.5,0.5,0.5,3));
	opDetune(n) = ba.take(n+1,(0,3,2,-4,3,7));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 10;
	lfoSpeed = 33;
};

// NAME: BRASSBC1
// ALGORITHM: 22
dx7_BRASSBC1(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(60,70,56,57,57,70));
	egR2(n) = ba.take(n+1,(66,37,17,66,66,36));
	egR3(n) = ba.take(n+1,(48,3,17,17,17,26));
	egR4(n) = ba.take(n+1,(58,56,51,51,51,51));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(54,54,94,94,94,96));
	egL3(n) = ba.take(n+1,(0,0,90,90,90,94));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,89,99,99,99,81));
	keyVelSens(n) = ba.take(n+1,(1,1,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(3,3,3,3,3,3));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.54,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(2,2,3,3,3,1));
	feedback = 5 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 30;
};

// NAME: BRASSBC2
// ALGORITHM: 22
dx7_BRASSBC2(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(50,50,50,50,50,50));
	egR2(n) = ba.take(n+1,(20,15,20,20,20,61));
	egR3(n) = ba.take(n+1,(20,15,20,20,20,19));
	egR4(n) = ba.take(n+1,(49,49,49,49,50,48));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(95,99,96,95,95,98));
	egL3(n) = ba.take(n+1,(95,99,95,95,95,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,55,99,97,99,80));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(3,0,3,3,3,3));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,0.82,1,1,1,1.01));
	opDetune(n) = ba.take(n+1,(0,7,0,0,0,-6));
	opRateScale(n) = ba.take(n+1,(2,2,2,2,2,1));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 33;
	lfoDepth = 0;
	lfoSpeed = 34;
};

// NAME: BCBRSENSM
// ALGORITHM: 22
dx7_BCBRSENSM(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(56,54,50,50,50,77));
	egR2(n) = ba.take(n+1,(49,28,27,27,27,30));
	egR3(n) = ba.take(n+1,(45,38,16,16,16,16));
	egR4(n) = ba.take(n+1,(51,49,52,52,52,52));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(96,98,97,97,97,97));
	egL3(n) = ba.take(n+1,(99,97,99,99,99,96));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,94,99,97,99,82));
	keyVelSens(n) = ba.take(n+1,(0,2,0,0,0,1));
	ampModSens(n) = ba.take(n+1,(3,1,3,3,3,2));
	opMode(n) = ba.take(n+1,(1,0,1,1,1,0));
	opFreq(n) = ba.take(n+1,(1,1,1.413,1.413,1.413,1.01));
	opDetune(n) = ba.take(n+1,(-7,7,-3,0,3,-4));
	opRateScale(n) = ba.take(n+1,(2,2,2,2,2,2));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 33;
	lfoDepth = 0;
	lfoSpeed = 34;
};

// NAME: HORNS1
// ALGORITHM: 18
dx7_HORNS1(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(61,37,46,53,53,53));
	egR2(n) = ba.take(n+1,(23,34,35,30,32,32));
	egR3(n) = ba.take(n+1,(17,15,22,22,24,24));
	egR4(n) = ba.take(n+1,(55,70,50,50,50,50));
	egL1(n) = ba.take(n+1,(99,85,99,99,99,99));
	egL2(n) = ba.take(n+1,(86,0,96,97,97,97));
	egL3(n) = ba.take(n+1,(86,0,95,94,94,94));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,96,79,64,79,77));
	keyVelSens(n) = ba.take(n+1,(1,3,6,3,4,7));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(-2,4,2,-1,3,3));
	opRateScale(n) = ba.take(n+1,(2,2,3,0,0,0));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNS2
// ALGORITHM: 18
dx7_HORNS2(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(61,37,46,66,48,77));
	egR2(n) = ba.take(n+1,(23,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(17,15,22,22,22,20));
	egR4(n) = ba.take(n+1,(55,70,50,50,50,70));
	egL1(n) = ba.take(n+1,(99,85,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,0,96,61,61,0));
	egL3(n) = ba.take(n+1,(86,0,95,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,70,80,82,70,79));
	keyVelSens(n) = ba.take(n+1,(2,1,4,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,3,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNS3
// ALGORITHM: 18
dx7_HORNS3(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,45,46,66,48,77));
	egR2(n) = ba.take(n+1,(24,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(19,50,17,22,22,20));
	egR4(n) = ba.take(n+1,(60,64,56,50,50,70));
	egL1(n) = ba.take(n+1,(99,99,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,97,86,65,61,0));
	egL3(n) = ba.take(n+1,(92,95,91,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,83,80,93,70,84));
	keyVelSens(n) = ba.take(n+1,(0,2,3,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,7,7,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,2,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNS4
// ALGORITHM: 18
dx7_HORNS4(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(61,37,46,53,53,77));
	egR2(n) = ba.take(n+1,(23,34,35,30,32,32));
	egR3(n) = ba.take(n+1,(17,15,22,22,24,24));
	egR4(n) = ba.take(n+1,(55,70,50,50,50,50));
	egL1(n) = ba.take(n+1,(99,85,99,99,99,99));
	egL2(n) = ba.take(n+1,(86,0,96,97,97,97));
	egL3(n) = ba.take(n+1,(86,0,95,94,94,94));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,96,79,64,79,77));
	keyVelSens(n) = ba.take(n+1,(1,3,6,3,4,7));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(-2,4,2,-1,3,3));
	opRateScale(n) = ba.take(n+1,(2,2,3,0,0,0));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNS5
// ALGORITHM: 22
dx7_HORNS5(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,52,50,50,50,35));
	egR2(n) = ba.take(n+1,(24,26,19,19,19,25));
	egR3(n) = ba.take(n+1,(18,29,31,31,31,28));
	egR4(n) = ba.take(n+1,(50,47,71,71,71,68));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(94,96,96,96,96,99));
	egL3(n) = ba.take(n+1,(96,96,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,94,99,99,99,84));
	keyVelSens(n) = ba.take(n+1,(1,0,1,1,1,6));
	ampModSens(n) = ba.take(n+1,(0,1,0,0,0,2));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(1,2,2,2,-2,7));
	opRateScale(n) = ba.take(n+1,(2,0,0,0,0,4));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 56;
	lfoDepth = 0;
	lfoSpeed = 32;
};

// NAME: HORNS6
// ALGORITHM: 22
dx7_HORNS6(freq,gain,gate) = 
dx.dx7_algo(21,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,52,57,55,52,59));
	egR2(n) = ba.take(n+1,(24,26,76,36,36,25));
	egR3(n) = ba.take(n+1,(18,29,82,41,41,28));
	egR4(n) = ba.take(n+1,(50,47,71,71,71,68));
	egL1(n) = ba.take(n+1,(99,93,99,99,99,99));
	egL2(n) = ba.take(n+1,(94,98,98,98,98,94));
	egL3(n) = ba.take(n+1,(96,97,98,98,98,94));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,83,99,99,99,79));
	keyVelSens(n) = ba.take(n+1,(0,0,2,2,2,3));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,1));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(1,2,2,2,-2,7));
	opRateScale(n) = ba.take(n+1,(2,0,0,0,0,4));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 56;
	lfoDepth = 0;
	lfoSpeed = 32;
};

// NAME: HORNS7
// ALGORITHM: 9
dx7_HORNS7(freq,gain,gate) = 
dx.dx7_algo(8,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(66,49,69,46,46,99));
	egR2(n) = ba.take(n+1,(99,26,40,27,27,27));
	egR3(n) = ba.take(n+1,(99,18,23,16,16,16));
	egR4(n) = ba.take(n+1,(44,42,44,49,53,49));
	egL1(n) = ba.take(n+1,(99,94,99,90,90,90));
	egL2(n) = ba.take(n+1,(99,99,97,99,99,99));
	egL3(n) = ba.take(n+1,(99,0,94,91,91,91));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,85,99,75,84,94));
	keyVelSens(n) = ba.take(n+1,(0,2,0,0,0,3));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(1,0,1,0,0,0));
	opFreq(n) = ba.take(n+1,(2.138,0.5,2.239,0.5,0.5,0.5));
	opDetune(n) = ba.take(n+1,(-2,3,-3,-2,0,7));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 6 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNSBC1
// ALGORITHM: 18
dx7_HORNSBC1(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,52,52,66,48,70));
	egR2(n) = ba.take(n+1,(24,28,28,92,55,56));
	egR3(n) = ba.take(n+1,(19,50,50,22,22,20));
	egR4(n) = ba.take(n+1,(60,56,56,50,50,70));
	egL1(n) = ba.take(n+1,(99,99,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,86,86,65,61,0));
	egL3(n) = ba.take(n+1,(92,90,88,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,96,87,93,70,84));
	keyVelSens(n) = ba.take(n+1,(1,1,3,1,1,1));
	ampModSens(n) = ba.take(n+1,(0,1,1,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,7,7,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,2,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: HORNSBC2
// ALGORITHM: 18
dx7_HORNSBC2(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(61,37,46,66,48,53));
	egR2(n) = ba.take(n+1,(28,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(44,15,22,22,22,20));
	egR4(n) = ba.take(n+1,(55,70,50,50,50,70));
	egL1(n) = ba.take(n+1,(99,99,99,53,98,99));
	egL2(n) = ba.take(n+1,(92,97,96,61,61,0));
	egL3(n) = ba.take(n+1,(99,95,95,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,81,79,82,70,79));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(3,3,3,3,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,4.02,7));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,3,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: FRENCHHORN
// ALGORITHM: 18
dx7_FRENCHHORN(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(57,37,46,66,48,44));
	egR2(n) = ba.take(n+1,(24,34,35,92,55,56));
	egR3(n) = ba.take(n+1,(19,15,22,22,22,20));
	egR4(n) = ba.take(n+1,(60,64,56,50,50,70));
	egL1(n) = ba.take(n+1,(99,85,99,53,98,99));
	egL2(n) = ba.take(n+1,(86,0,86,61,61,0));
	egL3(n) = ba.take(n+1,(86,0,86,62,62,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,67,79,79,70,79));
	keyVelSens(n) = ba.take(n+1,(2,2,3,1,1,1));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,3.18,8.47));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,1,0,0,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 3;
	lfoSpeed = 35;
};

// NAME: TRUMPET
// ALGORITHM: 18
dx7_TRUMPET(freq,gain,gate) = 
dx.dx7_algo(17,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(70,99,41,66,48,46));
	egR2(n) = ba.take(n+1,(24,12,12,76,12,56));
	egR3(n) = ba.take(n+1,(19,22,22,22,22,20));
	egR4(n) = ba.take(n+1,(55,50,50,50,50,70));
	egL1(n) = ba.take(n+1,(99,85,99,99,99,99));
	egL2(n) = ba.take(n+1,(86,0,61,61,61,0));
	egL3(n) = ba.take(n+1,(86,0,61,61,61,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,50,79,74,50,99));
	keyVelSens(n) = ba.take(n+1,(4,7,1,4,0,3));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,2.1,1,1,6.24,8.47));
	opDetune(n) = ba.take(n+1,(0,0,0,0,-1,0));
	opRateScale(n) = ba.take(n+1,(2,2,5,5,5,7));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 45;
	lfoDepth = 5;
	lfoSpeed = 34;
};

// NAME: ANLGBRASS
// ALGORITHM: 9
dx7_ANLGBRASS(freq,gain,gate) = 
dx.dx7_algo(8,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(65,50,64,70,70,77));
	egR2(n) = ba.take(n+1,(99,26,40,27,27,27));
	egR3(n) = ba.take(n+1,(99,9,23,16,16,16));
	egR4(n) = ba.take(n+1,(41,36,42,39,40,31));
	egL1(n) = ba.take(n+1,(99,94,99,90,90,90));
	egL2(n) = ba.take(n+1,(99,99,97,99,99,99));
	egL3(n) = ba.take(n+1,(99,94,94,94,95,94));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,86,99,82,65,99));
	keyVelSens(n) = ba.take(n+1,(0,1,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(0.5,0.5,0.5,0.5,0.5,2));
	opDetune(n) = ba.take(n+1,(6,7,0,-6,7,-6));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 6 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 11;
	lfoSpeed = 23;
};

// NAME: ORCHESTRA
// ALGORITHM: 2
dx7_ORCHESTRA(freq,gain,gate) = 
dx.dx7_algo(1,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(80,53,54,56,76,99));
	egR2(n) = ba.take(n+1,(56,46,15,74,73,76));
	egR3(n) = ba.take(n+1,(10,32,10,10,10,10));
	egR4(n) = ba.take(n+1,(45,61,47,45,55,32));
	egL1(n) = ba.take(n+1,(98,99,99,98,99,99));
	egL2(n) = ba.take(n+1,(98,93,92,98,92,92));
	egL3(n) = ba.take(n+1,(36,90,0,36,0,0));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,83,96,72,80,82));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,2,2,2,2));
	opDetune(n) = ba.take(n+1,(0,-6,6,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 7 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 63;
	lfoDepth = 6;
	lfoSpeed = 30;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

// NAME: 
// ALGORITHM: 1
dx7_(freq,gain,gate) = 
dx.dx7_algo(0,egR1,egR2,egR3,egR4,egL1,egL2,egL3,egL4,outLevel,keyVelSens,ampModSens,opMode,opFreq,opDetune,opRateScale,feedback,lfoDelay,lfoDepth,lfoSpeed,freq,gain,gate)
with{
	egR1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egR4(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL1(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL2(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL3(n) = ba.take(n+1,(99,99,99,99,99,99));
	egL4(n) = ba.take(n+1,(0,0,0,0,0,0));
	outLevel(n) = ba.take(n+1,(99,0,0,0,0,0));
	keyVelSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	ampModSens(n) = ba.take(n+1,(0,0,0,0,0,0));
	opMode(n) = ba.take(n+1,(0,0,0,0,0,0));
	opFreq(n) = ba.take(n+1,(1,1,1,1,1,1));
	opDetune(n) = ba.take(n+1,(0,0,0,0,0,0));
	opRateScale(n) = ba.take(n+1,(0,0,0,0,0,0));
	feedback = 0 : dx.dx7_fdbkscalef/(2*ma.PI);
	lfoDelay = 0;
	lfoDepth = 0;
	lfoSpeed = 35;
};

