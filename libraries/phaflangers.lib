//#################################### phaflangers.lib ########################################
// A library of compressor effects.
//
// It should be used using the `pf` environment:
//
// ```
// pf = library("phaflangers.lib");
// process = pf.functionCall;
// ```
//
// Another option is to import `stdfaust.lib` which already contains the `pf`
// environment:
//
// ```
// import("stdfaust.lib");
// process = pf.functionCall;
// ```
//########################################################################################

/************************************************************************
************************************************************************
FAUST library file
Copyright (C) 2003-2016 GRAME, Centre National de Creation Musicale
----------------------------------------------------------------------
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the GNU C Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

EXCEPTION TO THE LGPL LICENSE : As a special exception, you may create a
larger FAUST program which directly or indirectly imports this library
file and still distribute the compiled code generated by the FAUST
compiler, or a modified version of this compiled code, under your own
copyright and license. This EXCEPTION TO THE LGPL LICENSE explicitly
grants you the right to freely choose the license for the resulting
compiled code. In particular the resulting compiled code has no obligation
to be LGPL or GPL. For example you are free to choose a commercial or
closed source license or any other license if you decide so.
************************************************************************
************************************************************************/

ma = library("maths.lib");
de = library("delays.lib");
fi = library("filters.lib");
os = library("oscillators.lib");


declare name "Faust Phaser and Flanger Library";
declare version "0.0";

//=============================Functions Reference========================================
//========================================================================================

//---------------`flanger_mono`-------------
// Mono flanging effect.
//
// #### Usage:
//
// ```
// _ : flanger_mono(dmax,curdel,depth,fb,invert) : _;
// ```
//
// Where:
//
// * `dmax`: maximum delay-line length (power of 2) - 10 ms typical
// * `curdel`: current dynamic delay (not to exceed dmax)
// * `depth`: effect strength between 0 and 1 (1 typical)
// * `fb`: feedback gain between 0 and 1 (0 typical)
// * `invert`: 0 for normal, 1 to invert sign of flanging sum
//
// #### Reference
//
// <https://ccrma.stanford.edu/~jos/pasp/Flanging.html>
//------------------------------------------------------------
// TODO: author JOS, revised by RM
flanger_mono(dmax,curdel,depth,fb,invert)
  = _ <: _, (- : de.fdelay(dmax,curdel)) ~ *(fb) : _,
  *(select2(invert,depth,0-depth))
  : + : *(0.5);

//---------------`flanger_stereo`-------------
// Stereo flanging effect.
// `flanger_stereo` is a standard Faust function.
//
// #### Usage:
//
// ```
// _,_ : flanger_stereo(dmax,curdel1,curdel2,depth,fb,invert) : _,_;
// ```
//
// Where:
//
// * `dmax`: maximum delay-line length (power of 2) - 10 ms typical
// * `curdel`: current dynamic delay (not to exceed dmax)
// * `depth`: effect strength between 0 and 1 (1 typical)
// * `fb`: feedback gain between 0 and 1 (0 typical)
// * `invert`: 0 for normal, 1 to invert sign of flanging sum
//
// #### Reference
//
// <https://ccrma.stanford.edu/~jos/pasp/Flanging.html>
//------------------------------------------------------------
// TODO: author JOS, revised by RM
flanger_stereo(dmax,curdel1,curdel2,depth,fb,invert)
  =  flanger_mono(dmax,curdel1,depth,fb,invert),
     flanger_mono(dmax,curdel2,depth,fb,invert);


vibrato2_mono(sections,phase01,fb,width,frqmin,fratio,frqmax,speed) =
 (+ : seq(i,sections,ap2p(R,th(i)))) ~ *(fb)
with {
     //tf2 = component("filters.lib").tf2;
     // second-order resonant digital allpass given pole radius and angle:
     ap2p(R,th) = fi.tf2(a2,a1,1,a1,a2) with {
       a2 = R^2;
       a1 = -2*R*cos(th);
     };
     R = exp(-pi*width/ma.SR);
     cososc = os.oscrc; // oscillators.lib
     sinosc = os.oscrs; // oscillators.lib
     osc = cososc(speed) * phase01 + sinosc(speed) * (1-phase01);
     lfo = (1-osc)/2; // in [0,1]
     pi = 4*atan(1);
     thmin = 2*pi*frqmin/ma.SR;
     thmax = 2*pi*frqmax/ma.SR;
     th1 = thmin + (thmax-thmin)*lfo;
     th(i) = (fratio^(i+1))*th1;
};


//-------`phaser2_mono`-----------------
// Mono phasing effect.
//
// #### Phaser
//
// ```
// _ : phaser2_mono(Notches,phase,width,frqmin,fratio,frqmax,speed,depth,fb,invert) : _;
// ```
//
// Where:
//
// * `Notches`: number of spectral notches (MACRO ARGUMENT - not a signal)
// * `phase`: phase of the oscillator (0-1)
// * `width`: approximate width of spectral notches in Hz
// * `frqmin`: approximate minimum frequency of first spectral notch in Hz
// * `fratio`: ratio of adjacent notch frequencies
// * `frqmax`: approximate maximum frequency of first spectral notch in Hz
// * `speed`: LFO frequency in Hz (rate of periodic notch sweep cycles)
// * `depth`: effect strength between 0 and 1 (1 typical) (aka "intensity")
//            when depth=2, "vibrato mode" is obtained (pure allpass chain)
// * `fb`: feedback gain between -1 and 1 (0 typical)
// * `invert`: 0 for normal, 1 to invert sign of flanging sum
//
// Reference:
//
// * <https://ccrma.stanford.edu/~jos/pasp/Phasing.html>
// * <http://www.geofex.com/Article_Folders/phasers/phase.html>
// * 'An Allpass Approach to Digital Phasing and Flanging', Julius O. Smith III,
//		Proc. Int. Computer Music Conf. (ICMC-84), pp. 103-109, Paris, 1984.
// * CCRMA Tech. Report STAN-M-21: <https://ccrma.stanford.edu/STANM/stanms/stanm21/>
//------------------------------------------------------------
// TODO: author JOS, revised by RM
phaser2_mono(Notches,phase01,width,frqmin,fratio,frqmax,speed,depth,fb,invert) =
      _ <: *(g1) + g2mi*vibrato2_mono(Notches,phase01,fb,width,frqmin,fratio,frqmax,speed)
with {               // depth=0 => direct-signal only
     g1 = 1-depth/2; // depth=1 => phaser mode (equal sum of direct and allpass-chain)
     g2 = depth/2;   // depth=2 => vibrato mode (allpass-chain signal only)
     g2mi = select2(invert,g2,-g2); // inversion negates the allpass-chain signal
};


//-------`phaser2_stereo`-------
// Stereo phasing effect.
// `phaser2_stereo` is a standard Faust function.
//
// #### Phaser
//
// ```
// _ : phaser2_stereo(Notches,phase,width,frqmin,fratio,frqmax,speed,depth,fb,invert) : _;
// ```
//
// Where:
//
// * `Notches`: number of spectral notches (MACRO ARGUMENT - not a signal)
// * `phase`: phase of the oscillator (0-1)
// * `width`: approximate width of spectral notches in Hz
// * `frqmin`: approximate minimum frequency of first spectral notch in Hz
// * `fratio`: ratio of adjacent notch frequencies
// * `frqmax`: approximate maximum frequency of first spectral notch in Hz
// * `speed`: LFO frequency in Hz (rate of periodic notch sweep cycles)
// * `depth`: effect strength between 0 and 1 (1 typical) (aka "intensity")
//            when depth=2, "vibrato mode" is obtained (pure allpass chain)
// * `fb`: feedback gain between -1 and 1 (0 typical)
// * `invert`: 0 for normal, 1 to invert sign of flanging sum
//
// Reference:
//
// * <https://ccrma.stanford.edu/~jos/pasp/Phasing.html>
// * <http://www.geofex.com/Article_Folders/phasers/phase.html>
// * 'An Allpass Approach to Digital Phasing and Flanging', Julius O. Smith III,
//		Proc. Int. Computer Music Conf. (ICMC-84), pp. 103-109, Paris, 1984.
// * CCRMA Tech. Report STAN-M-21: <https://ccrma.stanford.edu/STANM/stanms/stanm21/>
//------------------------------------------------------------
// TODO: author JOS, revised by RM
phaser2_stereo(Notches,width,frqmin,fratio,frqmax,speed,depth,fb,invert)
   = phaser2_mono(Notches,0,width,frqmin,fratio,frqmax,speed,depth,fb,invert),
     phaser2_mono(Notches,1,width,frqmin,fratio,frqmax,speed,depth,fb,invert);
