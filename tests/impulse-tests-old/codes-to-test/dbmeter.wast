
(module
	(import $log10 "env" "_log10" (param f64) (result f64))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(memory (export "memory") 32)
	(data (i32.const 0) "{\"name\":\"dbmeter\",\"version\":\"2.5.15\",\"options\":\"wast-i, -double -ftz 0\",\"size\":\"272\",\"inputs\":\"8\",\"outputs\":\"8\",\"meta\":[{\"author\":\"Grame\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"math.lib/author\":\"GRAME\"},{\"math.lib/copyright\":\"GRAME\"},{\"math.lib/deprecated\":\"This library is deprecated and is not maintained anymore. It will be removed in August 2017.\"},{\"math.lib/license\":\"LGPL with exception\"},{\"math.lib/name\":\"Math Library\"},{\"math.lib/version\":\"1.0\"},{\"music.lib/author\":\"GRAME\"},{\"music.lib/copyright\":\"GRAME\"},{\"music.lib/license\":\"LGPL with exception\"},{\"music.lib/name\":\"Music Library\"},{\"music.lib/version\":\"1.0\"},{\"name\":\"dbmeter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"8 channels dB meter\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f825172a070\",\"address\":\"/8_channels_dB_meter/0/0x7f825172a070\",\"index\":\"32\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"1\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f825172e7a0\",\"address\":\"/8_channels_dB_meter/1/0x7f825172e7a0\",\"index\":\"64\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"2\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f8251732eb0\",\"address\":\"/8_channels_dB_meter/2/0x7f8251732eb0\",\"index\":\"96\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"3\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f8251737670\",\"address\":\"/8_channels_dB_meter/3/0x7f8251737670\",\"index\":\"128\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"4\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f825173bee0\",\"address\":\"/8_channels_dB_meter/4/0x7f825173bee0\",\"index\":\"160\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"5\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f8251740800\",\"address\":\"/8_channels_dB_meter/5/0x7f8251740800\",\"index\":\"192\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"6\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f82517451d0\",\"address\":\"/8_channels_dB_meter/6/0x7f82517451d0\",\"index\":\"224\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"7\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7f8251749c50\",\"address\":\"/8_channels_dB_meter/7/0x7f8251749c50\",\"index\":\"256\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.const 0) (get_local $samplingFreq))
		(f64.store offset=8 (i32.const 0) (f64.div (f64.const 80.) (f64.min (f64.const 192000.) (f64.max (f64.const 1.) (f64.convert_s/i32 (i32.load (i32.const 0)))))))
		(i32.store offset=40 (i32.const 0) (i32.const 0))
		(i32.store offset=72 (i32.const 0) (i32.const 0))
		(i32.store offset=104 (i32.const 0) (i32.const 0))
		(i32.store offset=136 (i32.const 0) (i32.const 0))
		(i32.store offset=168 (i32.const 0) (i32.const 0))
		(i32.store offset=200 (i32.const 0) (i32.const 0))
		(i32.store offset=232 (i32.const 0) (i32.const 0))
		(i32.store offset=264 (i32.const 0) (i32.const 0))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f64.store (i32.add (i32.const 16) (i32.shl (get_local $l0) (i32.const 3))) (f64.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f64.store (i32.add (i32.const 48) (i32.shl (get_local $l1) (i32.const 3))) (f64.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f64.store (i32.add (i32.const 80) (i32.shl (get_local $l2) (i32.const 3))) (f64.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f64.store (i32.add (i32.const 112) (i32.shl (get_local $l3) (i32.const 3))) (f64.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f64.store (i32.add (i32.const 144) (i32.shl (get_local $l4) (i32.const 3))) (f64.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f64.store (i32.add (i32.const 176) (i32.shl (get_local $l5) (i32.const 3))) (f64.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f64.store (i32.add (i32.const 208) (i32.shl (get_local $l6) (i32.const 3))) (f64.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f64.store (i32.add (i32.const 240) (i32.shl (get_local $l7) (i32.const 3))) (f64.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.const 0)))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f64)
		(f64.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f64)
		(return (f64.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $input2 i32)
		(local $input3 i32)
		(local $input4 i32)
		(local $input5 i32)
		(local $input6 i32)
		(local $input7 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $output2 i32)
		(local $output3 i32)
		(local $output4 i32)
		(local $output5 i32)
		(local $output6 i32)
		(local $output7 i32)
		(local $i i32)
		(local $fTemp0 f64)
		(local $fTemp1 f64)
		(local $fTemp2 f64)
		(local $fTemp3 f64)
		(local $fTemp4 f64)
		(local $fTemp5 f64)
		(local $fTemp6 f64)
		(local $fTemp7 f64)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $input2 (i32.const 0))
		(set_local $input3 (i32.const 0))
		(set_local $input4 (i32.const 0))
		(set_local $input5 (i32.const 0))
		(set_local $input6 (i32.const 0))
		(set_local $input7 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $output2 (i32.const 0))
		(set_local $output3 (i32.const 0))
		(set_local $output4 (i32.const 0))
		(set_local $output5 (i32.const 0))
		(set_local $output6 (i32.const 0))
		(set_local $output7 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f64.const 0.))
		(set_local $fTemp1 (f64.const 0.))
		(set_local $fTemp2 (f64.const 0.))
		(set_local $fTemp3 (f64.const 0.))
		(set_local $fTemp4 (f64.const 0.))
		(set_local $fTemp5 (f64.const 0.))
		(set_local $fTemp6 (f64.const 0.))
		(set_local $fTemp7 (f64.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $input2 (i32.load (i32.add (get_local $inputs) (i32.const 8))))
		(set_local $input3 (i32.load (i32.add (get_local $inputs) (i32.const 12))))
		(set_local $input4 (i32.load (i32.add (get_local $inputs) (i32.const 16))))
		(set_local $input5 (i32.load (i32.add (get_local $inputs) (i32.const 20))))
		(set_local $input6 (i32.load (i32.add (get_local $inputs) (i32.const 24))))
		(set_local $input7 (i32.load (i32.add (get_local $inputs) (i32.const 28))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $output2 (i32.load (i32.add (get_local $outputs) (i32.const 8))))
		(set_local $output3 (i32.load (i32.add (get_local $outputs) (i32.const 12))))
		(set_local $output4 (i32.load (i32.add (get_local $outputs) (i32.const 16))))
		(set_local $output5 (i32.load (i32.add (get_local $outputs) (i32.const 20))))
		(set_local $output6 (i32.load (i32.add (get_local $outputs) (i32.const 24))))
		(set_local $output7 (i32.load (i32.add (get_local $outputs) (i32.const 28))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f64.load (i32.add (get_local $input0) (get_local $i))))
				(f64.store offset=16 (i32.const 0) (f64.max (f64.sub (f64.load offset=24 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp0))))))))
				(f64.store offset=32 (i32.const 0) (f64.load offset=16 (i32.const 0)))
				(f64.store (i32.add (get_local $output0) (get_local $i)) (f64.convert_s/i32 (i32.load offset=40 (i32.const 0))))
				(set_local $fTemp1 (f64.load (i32.add (get_local $input1) (get_local $i))))
				(f64.store offset=48 (i32.const 0) (f64.max (f64.sub (f64.load offset=56 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp1))))))))
				(f64.store offset=64 (i32.const 0) (f64.load offset=48 (i32.const 0)))
				(f64.store (i32.add (get_local $output1) (get_local $i)) (f64.convert_s/i32 (i32.load offset=72 (i32.const 0))))
				(set_local $fTemp2 (f64.load (i32.add (get_local $input2) (get_local $i))))
				(f64.store offset=80 (i32.const 0) (f64.max (f64.sub (f64.load offset=88 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp2))))))))
				(f64.store offset=96 (i32.const 0) (f64.load offset=80 (i32.const 0)))
				(f64.store (i32.add (get_local $output2) (get_local $i)) (f64.convert_s/i32 (i32.load offset=104 (i32.const 0))))
				(set_local $fTemp3 (f64.load (i32.add (get_local $input3) (get_local $i))))
				(f64.store offset=112 (i32.const 0) (f64.max (f64.sub (f64.load offset=120 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp3))))))))
				(f64.store offset=128 (i32.const 0) (f64.load offset=112 (i32.const 0)))
				(f64.store (i32.add (get_local $output3) (get_local $i)) (f64.convert_s/i32 (i32.load offset=136 (i32.const 0))))
				(set_local $fTemp4 (f64.load (i32.add (get_local $input4) (get_local $i))))
				(f64.store offset=144 (i32.const 0) (f64.max (f64.sub (f64.load offset=152 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp4))))))))
				(f64.store offset=160 (i32.const 0) (f64.load offset=144 (i32.const 0)))
				(f64.store (i32.add (get_local $output4) (get_local $i)) (f64.convert_s/i32 (i32.load offset=168 (i32.const 0))))
				(set_local $fTemp5 (f64.load (i32.add (get_local $input5) (get_local $i))))
				(f64.store offset=176 (i32.const 0) (f64.max (f64.sub (f64.load offset=184 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp5))))))))
				(f64.store offset=192 (i32.const 0) (f64.load offset=176 (i32.const 0)))
				(f64.store (i32.add (get_local $output5) (get_local $i)) (f64.convert_s/i32 (i32.load offset=200 (i32.const 0))))
				(set_local $fTemp6 (f64.load (i32.add (get_local $input6) (get_local $i))))
				(f64.store offset=208 (i32.const 0) (f64.max (f64.sub (f64.load offset=216 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp6))))))))
				(f64.store offset=224 (i32.const 0) (f64.load offset=208 (i32.const 0)))
				(f64.store (i32.add (get_local $output6) (get_local $i)) (f64.convert_s/i32 (i32.load offset=232 (i32.const 0))))
				(set_local $fTemp7 (f64.load (i32.add (get_local $input7) (get_local $i))))
				(f64.store offset=240 (i32.const 0) (f64.max (f64.sub (f64.load offset=248 (i32.const 0)) (f64.load offset=8 (i32.const 0))) (f64.min (f64.const 10.) (f64.mul (f64.const 20.) (call $log10 (f64.max (f64.const 0.00031622776601683794) (f64.abs (get_local $fTemp7))))))))
				(f64.store offset=256 (i32.const 0) (f64.load offset=240 (i32.const 0)))
				(f64.store (i32.add (get_local $output7) (get_local $i)) (f64.convert_s/i32 (i32.load offset=264 (i32.const 0))))
				(f64.store offset=24 (i32.const 0) (f64.load offset=16 (i32.const 0)))
				(f64.store offset=56 (i32.const 0) (f64.load offset=48 (i32.const 0)))
				(f64.store offset=88 (i32.const 0) (f64.load offset=80 (i32.const 0)))
				(f64.store offset=120 (i32.const 0) (f64.load offset=112 (i32.const 0)))
				(f64.store offset=152 (i32.const 0) (f64.load offset=144 (i32.const 0)))
				(f64.store offset=184 (i32.const 0) (f64.load offset=176 (i32.const 0)))
				(f64.store offset=216 (i32.const 0) (f64.load offset=208 (i32.const 0)))
				(f64.store offset=248 (i32.const 0) (f64.load offset=240 (i32.const 0)))
				(set_local $i (i32.add (get_local $i) (i32.const 8)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 8) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
