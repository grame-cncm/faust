
(module
	(import $sin "env" "_sin" (param f64) (result f64))
	(import $cos "env" "_cos" (param f64) (result f64))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(memory (export "memory") 4)
	(data (i32.const 0) "{\"name\":\"BPF.dsp-mute\",\"version\":\"2.5.15\",\"options\":\"wast-i, -double -ftz 0\",\"size\":\"64\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"math.lib/author\":\"GRAME\"},{\"math.lib/copyright\":\"GRAME\"},{\"math.lib/deprecated\":\"This library is deprecated and is not maintained anymore. It will be removed in August 2017.\"},{\"math.lib/license\":\"LGPL with exception\"},{\"math.lib/name\":\"Math Library\"},{\"math.lib/version\":\"1.0\"},{\"maxmsp.lib/author\":\"GRAME\"},{\"maxmsp.lib/copyright\":\"GRAME\"},{\"maxmsp.lib/license\":\"LGPL\"},{\"maxmsp.lib/name\":\"MaxMSP compatibility Library\"},{\"maxmsp.lib/version\":\"1.1\"},{\"music.lib/author\":\"GRAME\"},{\"music.lib/copyright\":\"GRAME\"},{\"music.lib/license\":\"LGPL with exception\"},{\"music.lib/name\":\"Music Library\"},{\"music.lib/version\":\"1.0\"},{\"name\":\"BPF.dsp-mute\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"BPF.dsp-mute\",\"items\":[{\"type\":\"hslider\",\"label\":\"Freq\",\"address\":\"/BPF.dsp-mute/Freq\",\"index\":\"24\",\"init\":\"1000\",\"min\":\"100\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Q\",\"address\":\"/BPF.dsp-mute/Q\",\"index\":\"32\",\"init\":\"1\",\"min\":\"0.01\",\"max\":\"100\",\"step\":\"0.01\"},{\"type\":\"checkbox\",\"label\":\"fakedisable  0\",\"address\":\"/BPF.dsp-mute/fakedisable__0\",\"index\":\"0\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store offset=8 (i32.const 0) (get_local $samplingFreq))
		(f64.store offset=16 (i32.const 0) (f64.div (f64.const 6.2831853071795862) (f64.min (f64.const 192000.) (f64.max (f64.const 1.) (f64.convert_s/i32 (i32.load offset=8 (i32.const 0)))))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f64.store (i32.const 0) (f64.const 0.))
		(f64.store offset=24 (i32.const 0) (f64.const 1000.))
		(f64.store offset=32 (i32.const 0) (f64.const 1.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f64.store (i32.add (i32.const 40) (i32.shl (get_local $l0) (i32.const 3))) (f64.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 3)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load offset=8 (i32.const 0)))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f64)
		(f64.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f64)
		(return (f64.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f64)
		(local $fSlow1 f64)
		(local $fSlow2 f64)
		(local $fSlow3 f64)
		(local $fSlow4 f64)
		(local $fSlow5 f64)
		(local $fSlow6 f64)
		(local $fSlow7 f64)
		(local $i i32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f64.const 0.))
		(set_local $fSlow1 (f64.const 0.))
		(set_local $fSlow2 (f64.const 0.))
		(set_local $fSlow3 (f64.const 0.))
		(set_local $fSlow4 (f64.const 0.))
		(set_local $fSlow5 (f64.const 0.))
		(set_local $fSlow6 (f64.const 0.))
		(set_local $fSlow7 (f64.const 0.))
		(set_local $i (i32.const 0))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f64.mul (f64.load offset=16 (i32.const 0)) (f64.max (f64.const 0.) (f64.load offset=24 (i32.const 0)))))
		(set_local $fSlow1 (f64.mul (f64.const 0.5) (f64.div (call $sin (get_local $fSlow0)) (f64.max (f64.const 0.001) (f64.load offset=32 (i32.const 0))))))
		(set_local $fSlow2 (f64.add (get_local $fSlow1) (f64.const 1.)))
		(set_local $fSlow3 (f64.div (f64.sub (f64.const 1.) (f64.load (i32.const 0))) (get_local $fSlow2)))
		(set_local $fSlow4 (f64.sub (f64.const 0.) (get_local $fSlow1)))
		(set_local $fSlow5 (f64.div (f64.const 1.) (get_local $fSlow2)))
		(set_local $fSlow6 (f64.sub (f64.const 0.) (f64.mul (f64.const 2.) (call $cos (get_local $fSlow0)))))
		(set_local $fSlow7 (f64.sub (f64.const 1.) (get_local $fSlow1)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f64.store offset=40 (i32.const 0) (f64.sub (f64.load (i32.add (get_local $input0) (get_local $i))) (f64.mul (get_local $fSlow5) (f64.add (f64.mul (get_local $fSlow6) (f64.load offset=48 (i32.const 0))) (f64.mul (get_local $fSlow7) (f64.load offset=56 (i32.const 0)))))))
				(f64.store (i32.add (get_local $output0) (get_local $i)) (f64.mul (get_local $fSlow3) (f64.add (f64.mul (get_local $fSlow4) (f64.load offset=56 (i32.const 0))) (f64.mul (get_local $fSlow1) (f64.load offset=40 (i32.const 0))))))
				(f64.store offset=56 (i32.const 0) (f64.load offset=48 (i32.const 0)))
				(f64.store offset=48 (i32.const 0) (f64.load offset=40 (i32.const 0)))
				(set_local $i (i32.add (get_local $i) (i32.const 8)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 8) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
