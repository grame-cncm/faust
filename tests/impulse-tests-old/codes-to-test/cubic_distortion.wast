
(module
	(import $tan "env" "_tan" (param f64) (result f64))
	(import $pow "env" "_pow" (param f64 f64) (result f64))
	(import $exp "env" "_exp" (param f64) (result f64))
	(import $sin "env" "_sin" (param f64) (result f64))
	(import $cos "env" "_cos" (param f64) (result f64))
	(import $log10 "env" "_log10" (param f64) (result f64))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(memory (export "memory") 4)
	(data (i32.const 0) "{\"name\":\"cubic_distortion\",\"version\":\"2.5.15\",\"options\":\"wast-i, -double -ftz 0\",\"size\":\"6880\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"effect.lib/author\":\"Julius O. Smith (jos at ccrma.stanford.edu)\"},{\"effect.lib/copyright\":\"Julius O. Smith III\"},{\"effect.lib/exciter_author\":\"Priyanka Shekar (pshekar@ccrma.stanford.edu)\"},{\"effect.lib/exciter_copyright\":\"Copyright (c) 2013 Priyanka Shekar\"},{\"effect.lib/exciter_license\":\"MIT License (MIT)\"},{\"effect.lib/exciter_name\":\"Harmonic Exciter\"},{\"effect.lib/exciter_version\":\"1.0\"},{\"effect.lib/license\":\"STK-4.3\"},{\"effect.lib/name\":\"Faust Audio Effect Library\"},{\"effect.lib/version\":\"1.33\"},{\"filter.lib/author\":\"Julius O. Smith (jos at ccrma.stanford.edu)\"},{\"filter.lib/copyright\":\"Julius O. Smith III\"},{\"filter.lib/license\":\"STK-4.3\"},{\"filter.lib/name\":\"Faust Filter Library\"},{\"filter.lib/reference\":\"https://ccrma.stanford.edu/~jos/filters/\"},{\"filter.lib/version\":\"1.29\"},{\"math.lib/author\":\"GRAME\"},{\"math.lib/copyright\":\"GRAME\"},{\"math.lib/deprecated\":\"This library is deprecated and is not maintained anymore. It will be removed in August 2017.\"},{\"math.lib/license\":\"LGPL with exception\"},{\"math.lib/name\":\"Math Library\"},{\"math.lib/version\":\"1.0\"},{\"music.lib/author\":\"GRAME\"},{\"music.lib/copyright\":\"GRAME\"},{\"music.lib/license\":\"LGPL with exception\"},{\"music.lib/name\":\"Music Library\"},{\"music.lib/version\":\"1.0\"},{\"name\":\"cubic_distortion\"},{\"oscillator.lib/author\":\"Julius O. Smith (jos at ccrma.stanford.edu)\"},{\"oscillator.lib/copyright\":\"Julius O. Smith III\"},{\"oscillator.lib/license\":\"STK-4.3\"},{\"oscillator.lib/name\":\"Faust Oscillator Library\"},{\"oscillator.lib/version\":\"1.11\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"cubic_distortion\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"vgroup\",\"label\":\"SINE WAVE OSCILLATOR oscrs\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"Sine oscillator based on 2D vector rotation\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Amplitude\",\"address\":\"/cubic_distortion/0x00/SINE_WAVE_OSCILLATOR_oscrs/Amplitude\",\"index\":\"1024\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Sawtooth waveform amplitude\"},{\"unit\":\"dB\"}],\"init\":\"-20\",\"min\":\"-120\",\"max\":\"10\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Frequency\",\"address\":\"/cubic_distortion/0x00/SINE_WAVE_OSCILLATOR_oscrs/Frequency\",\"index\":\"1072\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Sine wave frequency as a Piano Key (PK) number (A440 = 49 PK)\"},{\"unit\":\"PK\"}],\"init\":\"49\",\"min\":\"1\",\"max\":\"88\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Portamento\",\"address\":\"/cubic_distortion/0x00/SINE_WAVE_OSCILLATOR_oscrs/Portamento\",\"index\":\"1056\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"tooltip\":\"Portamento (frequency-glide) time-constant in seconds\"},{\"unit\":\"sec\"}],\"init\":\"0.1\",\"min\":\"0.001\",\"max\":\"10\",\"step\":\"0.001\"}]}]},{\"type\":\"vgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vgroup\",\"label\":\"CUBIC NONLINEARITY cubicnl\",\"meta\":[{\"tooltip\":\"Reference:          https://ccrma.stanford.edu/~jos/pasp/Cubic_Soft_Clipper.html\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/cubic_distortion/0x00/CUBIC_NONLINEARITY_cubicnl/Bypass\",\"index\":\"1000\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the nonlinearity has no effect\"}]},{\"type\":\"hslider\",\"label\":\"Drive\",\"address\":\"/cubic_distortion/0x00/CUBIC_NONLINEARITY_cubicnl/Drive\",\"index\":\"1128\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Amount of distortion\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Offset\",\"address\":\"/cubic_distortion/0x00/CUBIC_NONLINEARITY_cubicnl/Offset\",\"index\":\"1152\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Brings in even harmonics\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]},{\"type\":\"vgroup\",\"label\":\"0x00\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"See Faust's filter.lib for documentation and references\"}],\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7117a0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7117a0\",\"index\":\"4472\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7001e0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7001e0\",\"index\":\"4248\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae6da560\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae6da560\",\"index\":\"3776\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae6b8860\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae6b8860\",\"index\":\"3304\",\"meta\":[{\"3\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae696d80\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae696d80\",\"index\":\"2832\",\"meta\":[{\"4\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7c63d0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7c63d0\",\"index\":\"6872\",\"meta\":[{\"5\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7b4240\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7b4240\",\"index\":\"6632\",\"meta\":[{\"6\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7a20b0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7a20b0\",\"index\":\"6392\",\"meta\":[{\"7\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae78ff20\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae78ff20\",\"index\":\"6152\",\"meta\":[{\"8\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae77dd90\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae77dd90\",\"index\":\"5912\",\"meta\":[{\"9\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae76bc00\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae76bc00\",\"index\":\"5672\",\"meta\":[{\"10\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae759a70\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae759a70\",\"index\":\"5432\",\"meta\":[{\"11\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7478e0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7478e0\",\"index\":\"5192\",\"meta\":[{\"12\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae735750\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae735750\",\"index\":\"4952\",\"meta\":[{\"13\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"},{\"type\":\"vbargraph\",\"label\":\"0x7ff3ae7235c0\",\"address\":\"/cubic_distortion/0x00/CONSTANT-Q_SPECTRUM_ANALYZER_(6E),_15_bands_spanning_LP,_9_octaves_below_16000_Hz,_HP/0x7ff3ae7235c0\",\"index\":\"4712\",\"meta\":[{\"14\":\"\"},{\"tooltip\":\"Spectral Band Level in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"}]},{\"type\":\"hgroup\",\"label\":\"SPECTRUM ANALYZER CONTROLS\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Level Averaging Time\",\"address\":\"/cubic_distortion/0x00/SPECTRUM_ANALYZER_CONTROLS/Level_Averaging_Time\",\"index\":\"2800\",\"meta\":[{\"0\":\"\"},{\"scale\":\"log\"},{\"tooltip\":\"band-level averaging time in milliseconds\"},{\"unit\":\"ms\"}],\"init\":\"100\",\"min\":\"1\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Level dB Offset\",\"address\":\"/cubic_distortion/0x00/SPECTRUM_ANALYZER_CONTROLS/Level_dB_Offset\",\"index\":\"0\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Level offset in decibels\"},{\"unit\":\"dB\"}],\"init\":\"50\",\"min\":\"0\",\"max\":\"100\",\"step\":\"1\"}]}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store offset=8 (i32.const 0) (get_local $samplingFreq))
		(f64.store offset=16 (i32.const 0) (f64.min (f64.const 192000.) (f64.max (f64.const 1.) (f64.convert_s/i32 (i32.load offset=8 (i32.const 0))))))
		(f64.store offset=24 (i32.const 0) (call $tan (f64.div (f64.const 494.76983930660901) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=32 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=24 (i32.const 0))))
		(f64.store offset=40 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=24 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=48 (i32.const 0) (call $pow (f64.load offset=24 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=56 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=48 (i32.const 0))))
		(f64.store offset=64 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=56 (i32.const 0)))))
		(f64.store offset=72 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=24 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=80 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=48 (i32.const 0))))
		(f64.store offset=88 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=80 (i32.const 0)))))
		(f64.store offset=96 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=24 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=104 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=48 (i32.const 0))))
		(f64.store offset=112 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=104 (i32.const 0)))))
		(f64.store offset=120 (i32.const 0) (call $tan (f64.div (f64.const 785.39816339744823) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=128 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=120 (i32.const 0))))
		(f64.store offset=136 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=120 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=144 (i32.const 0) (call $pow (f64.load offset=120 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=152 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=144 (i32.const 0))))
		(f64.store offset=160 (i32.const 0) (f64.add (f64.load offset=152 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=168 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=120 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=176 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=184 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=120 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=192 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=144 (i32.const 0))))
		(f64.store offset=200 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=192 (i32.const 0)))))
		(f64.store offset=208 (i32.const 0) (call $tan (f64.div (f64.const 1246.7418707910015) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=216 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=208 (i32.const 0))))
		(f64.store offset=224 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=208 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=232 (i32.const 0) (call $pow (f64.load offset=208 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=240 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=232 (i32.const 0))))
		(f64.store offset=248 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=256 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=208 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=264 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=272 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=208 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=280 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=232 (i32.const 0))))
		(f64.store offset=288 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=280 (i32.const 0)))))
		(f64.store offset=296 (i32.const 0) (call $tan (f64.div (f64.const 1979.0793572264361) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=304 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=296 (i32.const 0))))
		(f64.store offset=312 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=296 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=320 (i32.const 0) (call $pow (f64.load offset=296 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=328 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=320 (i32.const 0))))
		(f64.store offset=336 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=344 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=296 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=352 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=360 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=296 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=368 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=320 (i32.const 0))))
		(f64.store offset=376 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=368 (i32.const 0)))))
		(f64.store offset=384 (i32.const 0) (call $tan (f64.div (f64.const 3141.5926535897929) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=392 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=384 (i32.const 0))))
		(f64.store offset=400 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=384 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=408 (i32.const 0) (call $pow (f64.load offset=384 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=416 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=408 (i32.const 0))))
		(f64.store offset=424 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=432 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=384 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=440 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=448 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=384 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=456 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=408 (i32.const 0))))
		(f64.store offset=464 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=456 (i32.const 0)))))
		(f64.store offset=472 (i32.const 0) (call $tan (f64.div (f64.const 4986.967483164005) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=480 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=472 (i32.const 0))))
		(f64.store offset=488 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=472 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=496 (i32.const 0) (call $pow (f64.load offset=472 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=504 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=496 (i32.const 0))))
		(f64.store offset=512 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=520 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=472 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=528 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=536 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=472 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=544 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=496 (i32.const 0))))
		(f64.store offset=552 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=544 (i32.const 0)))))
		(f64.store offset=560 (i32.const 0) (call $tan (f64.div (f64.const 7916.3174289057461) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=568 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=560 (i32.const 0))))
		(f64.store offset=576 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=560 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=584 (i32.const 0) (call $pow (f64.load offset=560 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=592 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=584 (i32.const 0))))
		(f64.store offset=600 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=608 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=560 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=616 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=624 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=560 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=632 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=584 (i32.const 0))))
		(f64.store offset=640 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=632 (i32.const 0)))))
		(f64.store offset=648 (i32.const 0) (call $tan (f64.div (f64.const 12566.370614359172) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=656 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=648 (i32.const 0))))
		(f64.store offset=664 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=648 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=672 (i32.const 0) (call $pow (f64.load offset=648 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=680 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=672 (i32.const 0))))
		(f64.store offset=688 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=696 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=648 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=704 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=712 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=648 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=720 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=672 (i32.const 0))))
		(f64.store offset=728 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=720 (i32.const 0)))))
		(f64.store offset=736 (i32.const 0) (call $tan (f64.div (f64.const 19947.869932656024) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=744 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=736 (i32.const 0))))
		(f64.store offset=752 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=736 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=760 (i32.const 0) (call $pow (f64.load offset=736 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=768 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=760 (i32.const 0))))
		(f64.store offset=776 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=784 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=736 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=792 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=800 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=736 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=808 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=760 (i32.const 0))))
		(f64.store offset=816 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=808 (i32.const 0)))))
		(f64.store offset=824 (i32.const 0) (call $tan (f64.div (f64.const 31665.269715622984) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=832 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=824 (i32.const 0))))
		(f64.store offset=840 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=824 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=848 (i32.const 0) (call $pow (f64.load offset=824 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=856 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=848 (i32.const 0))))
		(f64.store offset=864 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=872 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=824 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=880 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=888 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=824 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=896 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=848 (i32.const 0))))
		(f64.store offset=904 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=896 (i32.const 0)))))
		(f64.store offset=912 (i32.const 0) (call $tan (f64.div (f64.const 50265.482457436687) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=920 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=912 (i32.const 0))))
		(f64.store offset=928 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=912 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=936 (i32.const 0) (call $pow (f64.load offset=912 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=944 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=936 (i32.const 0))))
		(f64.store offset=952 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=960 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=912 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=968 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=976 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=912 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=984 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=936 (i32.const 0))))
		(f64.store offset=992 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=984 (i32.const 0)))))
		(f64.store offset=1048 (i32.const 0) (f64.div (f64.const 6.2831853071795862) (f64.load offset=16 (i32.const 0))))
		(f64.store offset=1064 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=16 (i32.const 0))))
		(f64.store offset=1208 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=912 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1216 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=1248 (i32.const 0) (f64.add (f64.load offset=984 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1256 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=912 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1264 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=1296 (i32.const 0) (f64.add (f64.load offset=944 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=1304 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=912 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=1312 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=1344 (i32.const 0) (f64.add (f64.load offset=944 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=1352 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=824 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1360 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=1392 (i32.const 0) (f64.add (f64.load offset=896 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1400 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=824 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1408 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=1440 (i32.const 0) (f64.add (f64.load offset=856 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=1448 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=824 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=1456 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=1488 (i32.const 0) (f64.add (f64.load offset=856 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=1496 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=736 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1504 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=1536 (i32.const 0) (f64.add (f64.load offset=808 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1544 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=736 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1552 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=1584 (i32.const 0) (f64.add (f64.load offset=768 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=1592 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=736 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=1600 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=1632 (i32.const 0) (f64.add (f64.load offset=768 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=1640 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=648 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1648 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=1680 (i32.const 0) (f64.add (f64.load offset=720 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1688 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=648 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1696 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=1728 (i32.const 0) (f64.add (f64.load offset=680 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=1736 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=648 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=1744 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=1776 (i32.const 0) (f64.add (f64.load offset=680 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=1784 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=560 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1792 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=1824 (i32.const 0) (f64.add (f64.load offset=632 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1832 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=560 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1840 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=1872 (i32.const 0) (f64.add (f64.load offset=592 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=1880 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=560 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=1888 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=1920 (i32.const 0) (f64.add (f64.load offset=592 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=1928 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=472 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=1936 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=1968 (i32.const 0) (f64.add (f64.load offset=544 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=1976 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=472 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=1984 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=2016 (i32.const 0) (f64.add (f64.load offset=504 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=2024 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=472 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=2032 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=2064 (i32.const 0) (f64.add (f64.load offset=504 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=2072 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=384 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=2080 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=2112 (i32.const 0) (f64.add (f64.load offset=456 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=2120 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=384 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=2128 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=2160 (i32.const 0) (f64.add (f64.load offset=416 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=2168 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=384 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=2176 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=2208 (i32.const 0) (f64.add (f64.load offset=416 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=2216 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=296 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=2224 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=2256 (i32.const 0) (f64.add (f64.load offset=368 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=2264 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=296 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=2272 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=2304 (i32.const 0) (f64.add (f64.load offset=328 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=2312 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=296 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=2320 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=2352 (i32.const 0) (f64.add (f64.load offset=328 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=2360 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=208 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=2368 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=2400 (i32.const 0) (f64.add (f64.load offset=280 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=2408 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=208 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=2416 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=2448 (i32.const 0) (f64.add (f64.load offset=240 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=2456 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=208 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=2464 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=2496 (i32.const 0) (f64.add (f64.load offset=240 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=2504 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=120 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=2512 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=2544 (i32.const 0) (f64.add (f64.load offset=192 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=2552 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=120 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=2560 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=2592 (i32.const 0) (f64.add (f64.load offset=152 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=2600 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=120 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=2608 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=2640 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=2648 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=24 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=2656 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=48 (i32.const 0))))
		(f64.store offset=2664 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=2696 (i32.const 0) (f64.add (f64.load offset=104 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=2704 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=24 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=2712 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=2744 (i32.const 0) (f64.add (f64.load offset=80 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=2752 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=24 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=2760 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=2792 (i32.const 0) (f64.add (f64.load offset=56 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=2808 (i32.const 0) (f64.div (f64.const 1000.) (f64.load offset=16 (i32.const 0))))
		(f64.store offset=2840 (i32.const 0) (call $tan (f64.div (f64.const 311.68546769775037) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=2848 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=2840 (i32.const 0))))
		(f64.store offset=2856 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=2864 (i32.const 0) (call $pow (f64.load offset=2840 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=2872 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=2864 (i32.const 0))))
		(f64.store offset=2880 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=2872 (i32.const 0)))))
		(f64.store offset=2888 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=2840 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=2896 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=2864 (i32.const 0))))
		(f64.store offset=2904 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=2896 (i32.const 0)))))
		(f64.store offset=2912 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=2840 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=2920 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=2864 (i32.const 0))))
		(f64.store offset=2928 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=2920 (i32.const 0)))))
		(f64.store offset=2936 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=24 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=2944 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=2952 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=24 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=2960 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=2968 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=24 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=2976 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=48 (i32.const 0))))
		(f64.store offset=2984 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=2976 (i32.const 0)))))
		(f64.store offset=2992 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=24 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=3000 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=3032 (i32.const 0) (f64.add (f64.load offset=2976 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=3040 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=24 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=3048 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=3080 (i32.const 0) (f64.add (f64.load offset=2656 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=3088 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=32 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=24 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=3096 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=2656 (i32.const 0)))))
		(f64.store offset=3128 (i32.const 0) (f64.add (f64.load offset=2656 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=3136 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=2840 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=3144 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=2864 (i32.const 0))))
		(f64.store offset=3152 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3184 (i32.const 0) (f64.add (f64.load offset=2920 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=3192 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=2840 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=3200 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3232 (i32.const 0) (f64.add (f64.load offset=2896 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=3240 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=3248 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3280 (i32.const 0) (f64.add (f64.load offset=2872 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=3312 (i32.const 0) (call $tan (f64.div (f64.const 196.34954084936206) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=3320 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=3312 (i32.const 0))))
		(f64.store offset=3328 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=3336 (i32.const 0) (call $pow (f64.load offset=3312 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=3344 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=3336 (i32.const 0))))
		(f64.store offset=3352 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=3344 (i32.const 0)))))
		(f64.store offset=3360 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=3312 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=3368 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=3336 (i32.const 0))))
		(f64.store offset=3376 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=3368 (i32.const 0)))))
		(f64.store offset=3384 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=3312 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=3392 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=3336 (i32.const 0))))
		(f64.store offset=3400 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=3392 (i32.const 0)))))
		(f64.store offset=3408 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=2840 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=3416 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3424 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=3432 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3440 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=3448 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=2864 (i32.const 0))))
		(f64.store offset=3456 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=3448 (i32.const 0)))))
		(f64.store offset=3464 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=3472 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3504 (i32.const 0) (f64.add (f64.load offset=3448 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=3512 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=2840 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=3520 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3552 (i32.const 0) (f64.add (f64.load offset=3144 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=3560 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=2848 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=2840 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=3568 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=3144 (i32.const 0)))))
		(f64.store offset=3600 (i32.const 0) (f64.add (f64.load offset=3144 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=3608 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=3312 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=3616 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=3336 (i32.const 0))))
		(f64.store offset=3624 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3656 (i32.const 0) (f64.add (f64.load offset=3392 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=3664 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=3312 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=3672 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3704 (i32.const 0) (f64.add (f64.load offset=3368 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=3712 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=3720 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3752 (i32.const 0) (f64.add (f64.load offset=3344 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=3784 (i32.const 0) (call $tan (f64.div (f64.const 123.69245982665232) (f64.load offset=16 (i32.const 0)))))
		(f64.store offset=3792 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=3784 (i32.const 0))))
		(f64.store offset=3800 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=3808 (i32.const 0) (call $pow (f64.load offset=3784 (i32.const 0)) (f64.const 2.)))
		(f64.store offset=3816 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=3808 (i32.const 0))))
		(f64.store offset=3824 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=3816 (i32.const 0)))))
		(f64.store offset=3832 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=3784 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=3840 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=3808 (i32.const 0))))
		(f64.store offset=3848 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=3840 (i32.const 0)))))
		(f64.store offset=3856 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=3784 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=3864 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=3808 (i32.const 0))))
		(f64.store offset=3872 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=3864 (i32.const 0)))))
		(f64.store offset=3880 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=3312 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=3888 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3896 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=3904 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3912 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=3920 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=3336 (i32.const 0))))
		(f64.store offset=3928 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=3920 (i32.const 0)))))
		(f64.store offset=3936 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=3944 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=3976 (i32.const 0) (f64.add (f64.load offset=3920 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=3984 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=3312 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=3992 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=4024 (i32.const 0) (f64.add (f64.load offset=3616 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=4032 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3320 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=3312 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=4040 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=3616 (i32.const 0)))))
		(f64.store offset=4072 (i32.const 0) (f64.add (f64.load offset=3616 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=4080 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=3784 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=4088 (i32.const 0) (f64.div (f64.const 1.) (f64.load offset=3808 (i32.const 0))))
		(f64.store offset=4096 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4128 (i32.const 0) (f64.add (f64.load offset=3864 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=4136 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=3784 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=4144 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4176 (i32.const 0) (f64.add (f64.load offset=3840 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=4184 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=4192 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4224 (i32.const 0) (f64.add (f64.load offset=3816 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=4256 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 0.16840487111358901)) (f64.load offset=3784 (i32.const 0))) (f64.const 1.0693584077073119))))
		(f64.store offset=4264 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 53.536152954556727) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4272 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 0.51247864188914105)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.68962136448467504))))
		(f64.store offset=4280 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 7.6217312988706034) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4288 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const 0.78241304682164503)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.24529150870616001))))
		(f64.store offset=4296 (i32.const 0) (f64.div (f64.const 9.9999997054999994e-05) (f64.load offset=3808 (i32.const 0))))
		(f64.store offset=4304 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00043322720055500002) (f64.load offset=4296 (i32.const 0)))))
		(f64.store offset=4312 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -0.78241304682164503)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.24529150870616001)))
		(f64.store offset=4320 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.24529150870616001) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4352 (i32.const 0) (f64.add (f64.load offset=4296 (i32.const 0)) (f64.const 0.00043322720055500002)))
		(f64.store offset=4360 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -0.51247864188914105)) (f64.load offset=3784 (i32.const 0))) (f64.const 0.68962136448467504)))
		(f64.store offset=4368 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.68962136448467504) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4400 (i32.const 0) (f64.add (f64.load offset=4088 (i32.const 0)) (f64.const 7.6217312988706034)))
		(f64.store offset=4408 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=3792 (i32.const 0)) (f64.const -0.16840487111358901)) (f64.load offset=3784 (i32.const 0))) (f64.const 1.0693584077073119)))
		(f64.store offset=4416 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.0693584077073119) (f64.load offset=4088 (i32.const 0)))))
		(f64.store offset=4448 (i32.const 0) (f64.add (f64.load offset=4088 (i32.const 0)) (f64.const 53.536152954556727)))
		(f64.store offset=4480 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=912 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=4488 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=936 (i32.const 0))))
		(f64.store offset=4496 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=4488 (i32.const 0)))))
		(f64.store offset=4504 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=912 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=4512 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=936 (i32.const 0))))
		(f64.store offset=4520 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=4512 (i32.const 0)))))
		(f64.store offset=4528 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=912 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=4536 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=936 (i32.const 0))))
		(f64.store offset=4544 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=4536 (i32.const 0)))))
		(f64.store offset=4552 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=912 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=4560 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=4592 (i32.const 0) (f64.add (f64.load offset=4536 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=4600 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=912 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=4608 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=4640 (i32.const 0) (f64.add (f64.load offset=4512 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=4648 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=920 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=912 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=4656 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=944 (i32.const 0)))))
		(f64.store offset=4688 (i32.const 0) (f64.add (f64.load offset=4488 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=4720 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=824 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=4728 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=848 (i32.const 0))))
		(f64.store offset=4736 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=4728 (i32.const 0)))))
		(f64.store offset=4744 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=824 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=4752 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=848 (i32.const 0))))
		(f64.store offset=4760 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=4752 (i32.const 0)))))
		(f64.store offset=4768 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=824 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=4776 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=848 (i32.const 0))))
		(f64.store offset=4784 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=4776 (i32.const 0)))))
		(f64.store offset=4792 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=824 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=4800 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=4832 (i32.const 0) (f64.add (f64.load offset=4776 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=4840 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=824 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=4848 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=4880 (i32.const 0) (f64.add (f64.load offset=4752 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=4888 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=832 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=824 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=4896 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=856 (i32.const 0)))))
		(f64.store offset=4928 (i32.const 0) (f64.add (f64.load offset=4728 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=4960 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=736 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=4968 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=760 (i32.const 0))))
		(f64.store offset=4976 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=4968 (i32.const 0)))))
		(f64.store offset=4984 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=736 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=4992 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=760 (i32.const 0))))
		(f64.store offset=5000 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=4992 (i32.const 0)))))
		(f64.store offset=5008 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=736 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=5016 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=760 (i32.const 0))))
		(f64.store offset=5024 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=5016 (i32.const 0)))))
		(f64.store offset=5032 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=736 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=5040 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=5072 (i32.const 0) (f64.add (f64.load offset=5016 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=5080 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=736 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=5088 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=5120 (i32.const 0) (f64.add (f64.load offset=4992 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=5128 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=744 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=736 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=5136 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=768 (i32.const 0)))))
		(f64.store offset=5168 (i32.const 0) (f64.add (f64.load offset=4968 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=5200 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=648 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=5208 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=672 (i32.const 0))))
		(f64.store offset=5216 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=5208 (i32.const 0)))))
		(f64.store offset=5224 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=648 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=5232 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=672 (i32.const 0))))
		(f64.store offset=5240 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=5232 (i32.const 0)))))
		(f64.store offset=5248 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=648 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=5256 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=672 (i32.const 0))))
		(f64.store offset=5264 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=5256 (i32.const 0)))))
		(f64.store offset=5272 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=648 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=5280 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=5312 (i32.const 0) (f64.add (f64.load offset=5256 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=5320 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=648 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=5328 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=5360 (i32.const 0) (f64.add (f64.load offset=5232 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=5368 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=656 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=648 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=5376 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=680 (i32.const 0)))))
		(f64.store offset=5408 (i32.const 0) (f64.add (f64.load offset=5208 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=5440 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=560 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=5448 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=584 (i32.const 0))))
		(f64.store offset=5456 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=5448 (i32.const 0)))))
		(f64.store offset=5464 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=560 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=5472 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=584 (i32.const 0))))
		(f64.store offset=5480 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=5472 (i32.const 0)))))
		(f64.store offset=5488 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=560 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=5496 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=584 (i32.const 0))))
		(f64.store offset=5504 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=5496 (i32.const 0)))))
		(f64.store offset=5512 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=560 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=5520 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=5552 (i32.const 0) (f64.add (f64.load offset=5496 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=5560 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=560 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=5568 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=5600 (i32.const 0) (f64.add (f64.load offset=5472 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=5608 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=568 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=560 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=5616 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=592 (i32.const 0)))))
		(f64.store offset=5648 (i32.const 0) (f64.add (f64.load offset=5448 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=5680 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=472 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=5688 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=496 (i32.const 0))))
		(f64.store offset=5696 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=5688 (i32.const 0)))))
		(f64.store offset=5704 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=472 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=5712 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=496 (i32.const 0))))
		(f64.store offset=5720 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=5712 (i32.const 0)))))
		(f64.store offset=5728 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=472 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=5736 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=496 (i32.const 0))))
		(f64.store offset=5744 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=5736 (i32.const 0)))))
		(f64.store offset=5752 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=472 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=5760 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=5792 (i32.const 0) (f64.add (f64.load offset=5736 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=5800 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=472 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=5808 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=5840 (i32.const 0) (f64.add (f64.load offset=5712 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=5848 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=480 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=472 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=5856 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=504 (i32.const 0)))))
		(f64.store offset=5888 (i32.const 0) (f64.add (f64.load offset=5688 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=5920 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=384 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=5928 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=408 (i32.const 0))))
		(f64.store offset=5936 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=5928 (i32.const 0)))))
		(f64.store offset=5944 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=384 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=5952 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=408 (i32.const 0))))
		(f64.store offset=5960 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=5952 (i32.const 0)))))
		(f64.store offset=5968 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=384 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=5976 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=408 (i32.const 0))))
		(f64.store offset=5984 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=5976 (i32.const 0)))))
		(f64.store offset=5992 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=384 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=6000 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=6032 (i32.const 0) (f64.add (f64.load offset=5976 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=6040 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=384 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=6048 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=6080 (i32.const 0) (f64.add (f64.load offset=5952 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=6088 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=392 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=384 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=6096 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=416 (i32.const 0)))))
		(f64.store offset=6128 (i32.const 0) (f64.add (f64.load offset=5928 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=6160 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=296 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=6168 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=320 (i32.const 0))))
		(f64.store offset=6176 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=6168 (i32.const 0)))))
		(f64.store offset=6184 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=296 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=6192 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=320 (i32.const 0))))
		(f64.store offset=6200 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=6192 (i32.const 0)))))
		(f64.store offset=6208 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=296 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=6216 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=320 (i32.const 0))))
		(f64.store offset=6224 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=6216 (i32.const 0)))))
		(f64.store offset=6232 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=296 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=6240 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=6272 (i32.const 0) (f64.add (f64.load offset=6216 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=6280 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=296 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=6288 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=6320 (i32.const 0) (f64.add (f64.load offset=6192 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=6328 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=304 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=296 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=6336 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=328 (i32.const 0)))))
		(f64.store offset=6368 (i32.const 0) (f64.add (f64.load offset=6168 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=6400 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=208 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=6408 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=232 (i32.const 0))))
		(f64.store offset=6416 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=6408 (i32.const 0)))))
		(f64.store offset=6424 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=208 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=6432 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=232 (i32.const 0))))
		(f64.store offset=6440 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=6432 (i32.const 0)))))
		(f64.store offset=6448 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=208 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=6456 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=232 (i32.const 0))))
		(f64.store offset=6464 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=6456 (i32.const 0)))))
		(f64.store offset=6472 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=208 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=6480 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=6512 (i32.const 0) (f64.add (f64.load offset=6456 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=6520 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=208 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=6528 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=6560 (i32.const 0) (f64.add (f64.load offset=6432 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=6568 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=216 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=208 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=6576 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=240 (i32.const 0)))))
		(f64.store offset=6608 (i32.const 0) (f64.add (f64.load offset=6408 (i32.const 0)) (f64.const 0.93514016703154246)))
		(f64.store offset=6640 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 0.157482159302087)) (f64.load offset=120 (i32.const 0))) (f64.const 0.93514016703154246))))
		(f64.store offset=6648 (i32.const 0) (f64.div (f64.const 50.063807016150385) (f64.load offset=144 (i32.const 0))))
		(f64.store offset=6656 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=6648 (i32.const 0)))))
		(f64.store offset=6664 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 0.74313046010703965)) (f64.load offset=120 (i32.const 0))) (f64.const 1.450071084655647))))
		(f64.store offset=6672 (i32.const 0) (f64.div (f64.const 11.052052171507189) (f64.load offset=144 (i32.const 0))))
		(f64.store offset=6680 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=6672 (i32.const 0)))))
		(f64.store offset=6688 (i32.const 0) (f64.div (f64.const 1.) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const 3.1897274020965583)) (f64.load offset=120 (i32.const 0))) (f64.const 4.0767819696438066))))
		(f64.store offset=6696 (i32.const 0) (f64.div (f64.const 0.0017661728399818856) (f64.load offset=144 (i32.const 0))))
		(f64.store offset=6704 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.00040767818495825777) (f64.load offset=6696 (i32.const 0)))))
		(f64.store offset=6712 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -3.1897274020965583)) (f64.load offset=120 (i32.const 0))) (f64.const 4.0767819696438066)))
		(f64.store offset=6720 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 4.0767819696438066) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=6752 (i32.const 0) (f64.add (f64.load offset=6696 (i32.const 0)) (f64.const 0.00040767818495825777)))
		(f64.store offset=6760 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -0.74313046010703965)) (f64.load offset=120 (i32.const 0))) (f64.const 1.450071084655647)))
		(f64.store offset=6768 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 1.450071084655647) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=6800 (i32.const 0) (f64.add (f64.load offset=6672 (i32.const 0)) (f64.const 1.450071084655647)))
		(f64.store offset=6808 (i32.const 0) (f64.add (f64.div (f64.add (f64.load offset=128 (i32.const 0)) (f64.const -0.157482159302087)) (f64.load offset=120 (i32.const 0))) (f64.const 0.93514016703154246)))
		(f64.store offset=6816 (i32.const 0) (f64.mul (f64.const 2.) (f64.sub (f64.const 0.93514016703154246) (f64.load offset=152 (i32.const 0)))))
		(f64.store offset=6848 (i32.const 0) (f64.add (f64.load offset=6648 (i32.const 0)) (f64.const 0.93514016703154246)))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f64.store (i32.const 0) (f64.const 50.))
		(f64.store offset=1000 (i32.const 0) (f64.const 0.))
		(f64.store offset=1024 (i32.const 0) (f64.const -20.))
		(f64.store offset=1056 (i32.const 0) (f64.const 0.10000000000000001))
		(f64.store offset=1072 (i32.const 0) (f64.const 49.))
		(f64.store offset=1128 (i32.const 0) (f64.const 0.))
		(f64.store offset=1152 (i32.const 0) (f64.const 0.))
		(f64.store offset=2800 (i32.const 0) (f64.const 100.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(local $l16 i32)
		(local $l17 i32)
		(local $l18 i32)
		(local $l19 i32)
		(local $l20 i32)
		(local $l21 i32)
		(local $l22 i32)
		(local $l23 i32)
		(local $l24 i32)
		(local $l25 i32)
		(local $l26 i32)
		(local $l27 i32)
		(local $l28 i32)
		(local $l29 i32)
		(local $l30 i32)
		(local $l31 i32)
		(local $l32 i32)
		(local $l33 i32)
		(local $l34 i32)
		(local $l35 i32)
		(local $l36 i32)
		(local $l37 i32)
		(local $l38 i32)
		(local $l39 i32)
		(local $l40 i32)
		(local $l41 i32)
		(local $l42 i32)
		(local $l43 i32)
		(local $l44 i32)
		(local $l45 i32)
		(local $l46 i32)
		(local $l47 i32)
		(local $l48 i32)
		(local $l49 i32)
		(local $l50 i32)
		(local $l51 i32)
		(local $l52 i32)
		(local $l53 i32)
		(local $l54 i32)
		(local $l55 i32)
		(local $l56 i32)
		(local $l57 i32)
		(local $l58 i32)
		(local $l59 i32)
		(local $l60 i32)
		(local $l61 i32)
		(local $l62 i32)
		(local $l63 i32)
		(local $l64 i32)
		(local $l65 i32)
		(local $l66 i32)
		(local $l67 i32)
		(local $l68 i32)
		(local $l69 i32)
		(local $l70 i32)
		(local $l71 i32)
		(local $l72 i32)
		(local $l73 i32)
		(local $l74 i32)
		(local $l75 i32)
		(local $l76 i32)
		(local $l77 i32)
		(local $l78 i32)
		(local $l79 i32)
		(local $l80 i32)
		(local $l81 i32)
		(local $l82 i32)
		(local $l83 i32)
		(local $l84 i32)
		(local $l85 i32)
		(local $l86 i32)
		(local $l87 i32)
		(local $l88 i32)
		(local $l89 i32)
		(local $l90 i32)
		(local $l91 i32)
		(local $l92 i32)
		(local $l93 i32)
		(local $l94 i32)
		(local $l95 i32)
		(local $l96 i32)
		(local $l97 i32)
		(local $l98 i32)
		(local $l99 i32)
		(local $l100 i32)
		(local $l101 i32)
		(local $l102 i32)
		(local $l103 i32)
		(local $l104 i32)
		(local $l105 i32)
		(local $l106 i32)
		(local $l107 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l16 (i32.const 0))
		(set_local $l17 (i32.const 0))
		(set_local $l18 (i32.const 0))
		(set_local $l19 (i32.const 0))
		(set_local $l20 (i32.const 0))
		(set_local $l21 (i32.const 0))
		(set_local $l22 (i32.const 0))
		(set_local $l23 (i32.const 0))
		(set_local $l24 (i32.const 0))
		(set_local $l25 (i32.const 0))
		(set_local $l26 (i32.const 0))
		(set_local $l27 (i32.const 0))
		(set_local $l28 (i32.const 0))
		(set_local $l29 (i32.const 0))
		(set_local $l30 (i32.const 0))
		(set_local $l31 (i32.const 0))
		(set_local $l32 (i32.const 0))
		(set_local $l33 (i32.const 0))
		(set_local $l34 (i32.const 0))
		(set_local $l35 (i32.const 0))
		(set_local $l36 (i32.const 0))
		(set_local $l37 (i32.const 0))
		(set_local $l38 (i32.const 0))
		(set_local $l39 (i32.const 0))
		(set_local $l40 (i32.const 0))
		(set_local $l41 (i32.const 0))
		(set_local $l42 (i32.const 0))
		(set_local $l43 (i32.const 0))
		(set_local $l44 (i32.const 0))
		(set_local $l45 (i32.const 0))
		(set_local $l46 (i32.const 0))
		(set_local $l47 (i32.const 0))
		(set_local $l48 (i32.const 0))
		(set_local $l49 (i32.const 0))
		(set_local $l50 (i32.const 0))
		(set_local $l51 (i32.const 0))
		(set_local $l52 (i32.const 0))
		(set_local $l53 (i32.const 0))
		(set_local $l54 (i32.const 0))
		(set_local $l55 (i32.const 0))
		(set_local $l56 (i32.const 0))
		(set_local $l57 (i32.const 0))
		(set_local $l58 (i32.const 0))
		(set_local $l59 (i32.const 0))
		(set_local $l60 (i32.const 0))
		(set_local $l61 (i32.const 0))
		(set_local $l62 (i32.const 0))
		(set_local $l63 (i32.const 0))
		(set_local $l64 (i32.const 0))
		(set_local $l65 (i32.const 0))
		(set_local $l66 (i32.const 0))
		(set_local $l67 (i32.const 0))
		(set_local $l68 (i32.const 0))
		(set_local $l69 (i32.const 0))
		(set_local $l70 (i32.const 0))
		(set_local $l71 (i32.const 0))
		(set_local $l72 (i32.const 0))
		(set_local $l73 (i32.const 0))
		(set_local $l74 (i32.const 0))
		(set_local $l75 (i32.const 0))
		(set_local $l76 (i32.const 0))
		(set_local $l77 (i32.const 0))
		(set_local $l78 (i32.const 0))
		(set_local $l79 (i32.const 0))
		(set_local $l80 (i32.const 0))
		(set_local $l81 (i32.const 0))
		(set_local $l82 (i32.const 0))
		(set_local $l83 (i32.const 0))
		(set_local $l84 (i32.const 0))
		(set_local $l85 (i32.const 0))
		(set_local $l86 (i32.const 0))
		(set_local $l87 (i32.const 0))
		(set_local $l88 (i32.const 0))
		(set_local $l89 (i32.const 0))
		(set_local $l90 (i32.const 0))
		(set_local $l91 (i32.const 0))
		(set_local $l92 (i32.const 0))
		(set_local $l93 (i32.const 0))
		(set_local $l94 (i32.const 0))
		(set_local $l95 (i32.const 0))
		(set_local $l96 (i32.const 0))
		(set_local $l97 (i32.const 0))
		(set_local $l98 (i32.const 0))
		(set_local $l99 (i32.const 0))
		(set_local $l100 (i32.const 0))
		(set_local $l101 (i32.const 0))
		(set_local $l102 (i32.const 0))
		(set_local $l103 (i32.const 0))
		(set_local $l104 (i32.const 0))
		(set_local $l105 (i32.const 0))
		(set_local $l106 (i32.const 0))
		(set_local $l107 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (i32.const 1008) (i32.shl (get_local $l0) (i32.const 3))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f64.store (i32.add (i32.const 1032) (i32.shl (get_local $l1) (i32.const 3))) (f64.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f64.store (i32.add (i32.const 1080) (i32.shl (get_local $l2) (i32.const 3))) (f64.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f64.store (i32.add (i32.const 1096) (i32.shl (get_local $l3) (i32.const 3))) (f64.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f64.store (i32.add (i32.const 1112) (i32.shl (get_local $l4) (i32.const 3))) (f64.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f64.store (i32.add (i32.const 1136) (i32.shl (get_local $l5) (i32.const 3))) (f64.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f64.store (i32.add (i32.const 1160) (i32.shl (get_local $l6) (i32.const 3))) (f64.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f64.store (i32.add (i32.const 1176) (i32.shl (get_local $l7) (i32.const 3))) (f64.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f64.store (i32.add (i32.const 1192) (i32.shl (get_local $l8) (i32.const 3))) (f64.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f64.store (i32.add (i32.const 1224) (i32.shl (get_local $l9) (i32.const 3))) (f64.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 3)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f64.store (i32.add (i32.const 1272) (i32.shl (get_local $l10) (i32.const 3))) (f64.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 3)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f64.store (i32.add (i32.const 1320) (i32.shl (get_local $l11) (i32.const 3))) (f64.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 3)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f64.store (i32.add (i32.const 1368) (i32.shl (get_local $l12) (i32.const 3))) (f64.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 3)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f64.store (i32.add (i32.const 1416) (i32.shl (get_local $l13) (i32.const 3))) (f64.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 3)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f64.store (i32.add (i32.const 1464) (i32.shl (get_local $l14) (i32.const 3))) (f64.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 3)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f64.store (i32.add (i32.const 1512) (i32.shl (get_local $l15) (i32.const 3))) (f64.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 3)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		(set_local $l16 (i32.const 0))
		(loop $for-in-l16 
			(block $for-out-l16 
				(f64.store (i32.add (i32.const 1560) (i32.shl (get_local $l16) (i32.const 3))) (f64.const 0.))
				(set_local $l16 (i32.add (get_local $l16) (i32.const 1)))
				(if (i32.lt_s (get_local $l16) (i32.const 3)) (br $for-in-l16) (br $for-out-l16))
				
			)
		)
		(set_local $l17 (i32.const 0))
		(loop $for-in-l17 
			(block $for-out-l17 
				(f64.store (i32.add (i32.const 1608) (i32.shl (get_local $l17) (i32.const 3))) (f64.const 0.))
				(set_local $l17 (i32.add (get_local $l17) (i32.const 1)))
				(if (i32.lt_s (get_local $l17) (i32.const 3)) (br $for-in-l17) (br $for-out-l17))
				
			)
		)
		(set_local $l18 (i32.const 0))
		(loop $for-in-l18 
			(block $for-out-l18 
				(f64.store (i32.add (i32.const 1656) (i32.shl (get_local $l18) (i32.const 3))) (f64.const 0.))
				(set_local $l18 (i32.add (get_local $l18) (i32.const 1)))
				(if (i32.lt_s (get_local $l18) (i32.const 3)) (br $for-in-l18) (br $for-out-l18))
				
			)
		)
		(set_local $l19 (i32.const 0))
		(loop $for-in-l19 
			(block $for-out-l19 
				(f64.store (i32.add (i32.const 1704) (i32.shl (get_local $l19) (i32.const 3))) (f64.const 0.))
				(set_local $l19 (i32.add (get_local $l19) (i32.const 1)))
				(if (i32.lt_s (get_local $l19) (i32.const 3)) (br $for-in-l19) (br $for-out-l19))
				
			)
		)
		(set_local $l20 (i32.const 0))
		(loop $for-in-l20 
			(block $for-out-l20 
				(f64.store (i32.add (i32.const 1752) (i32.shl (get_local $l20) (i32.const 3))) (f64.const 0.))
				(set_local $l20 (i32.add (get_local $l20) (i32.const 1)))
				(if (i32.lt_s (get_local $l20) (i32.const 3)) (br $for-in-l20) (br $for-out-l20))
				
			)
		)
		(set_local $l21 (i32.const 0))
		(loop $for-in-l21 
			(block $for-out-l21 
				(f64.store (i32.add (i32.const 1800) (i32.shl (get_local $l21) (i32.const 3))) (f64.const 0.))
				(set_local $l21 (i32.add (get_local $l21) (i32.const 1)))
				(if (i32.lt_s (get_local $l21) (i32.const 3)) (br $for-in-l21) (br $for-out-l21))
				
			)
		)
		(set_local $l22 (i32.const 0))
		(loop $for-in-l22 
			(block $for-out-l22 
				(f64.store (i32.add (i32.const 1848) (i32.shl (get_local $l22) (i32.const 3))) (f64.const 0.))
				(set_local $l22 (i32.add (get_local $l22) (i32.const 1)))
				(if (i32.lt_s (get_local $l22) (i32.const 3)) (br $for-in-l22) (br $for-out-l22))
				
			)
		)
		(set_local $l23 (i32.const 0))
		(loop $for-in-l23 
			(block $for-out-l23 
				(f64.store (i32.add (i32.const 1896) (i32.shl (get_local $l23) (i32.const 3))) (f64.const 0.))
				(set_local $l23 (i32.add (get_local $l23) (i32.const 1)))
				(if (i32.lt_s (get_local $l23) (i32.const 3)) (br $for-in-l23) (br $for-out-l23))
				
			)
		)
		(set_local $l24 (i32.const 0))
		(loop $for-in-l24 
			(block $for-out-l24 
				(f64.store (i32.add (i32.const 1944) (i32.shl (get_local $l24) (i32.const 3))) (f64.const 0.))
				(set_local $l24 (i32.add (get_local $l24) (i32.const 1)))
				(if (i32.lt_s (get_local $l24) (i32.const 3)) (br $for-in-l24) (br $for-out-l24))
				
			)
		)
		(set_local $l25 (i32.const 0))
		(loop $for-in-l25 
			(block $for-out-l25 
				(f64.store (i32.add (i32.const 1992) (i32.shl (get_local $l25) (i32.const 3))) (f64.const 0.))
				(set_local $l25 (i32.add (get_local $l25) (i32.const 1)))
				(if (i32.lt_s (get_local $l25) (i32.const 3)) (br $for-in-l25) (br $for-out-l25))
				
			)
		)
		(set_local $l26 (i32.const 0))
		(loop $for-in-l26 
			(block $for-out-l26 
				(f64.store (i32.add (i32.const 2040) (i32.shl (get_local $l26) (i32.const 3))) (f64.const 0.))
				(set_local $l26 (i32.add (get_local $l26) (i32.const 1)))
				(if (i32.lt_s (get_local $l26) (i32.const 3)) (br $for-in-l26) (br $for-out-l26))
				
			)
		)
		(set_local $l27 (i32.const 0))
		(loop $for-in-l27 
			(block $for-out-l27 
				(f64.store (i32.add (i32.const 2088) (i32.shl (get_local $l27) (i32.const 3))) (f64.const 0.))
				(set_local $l27 (i32.add (get_local $l27) (i32.const 1)))
				(if (i32.lt_s (get_local $l27) (i32.const 3)) (br $for-in-l27) (br $for-out-l27))
				
			)
		)
		(set_local $l28 (i32.const 0))
		(loop $for-in-l28 
			(block $for-out-l28 
				(f64.store (i32.add (i32.const 2136) (i32.shl (get_local $l28) (i32.const 3))) (f64.const 0.))
				(set_local $l28 (i32.add (get_local $l28) (i32.const 1)))
				(if (i32.lt_s (get_local $l28) (i32.const 3)) (br $for-in-l28) (br $for-out-l28))
				
			)
		)
		(set_local $l29 (i32.const 0))
		(loop $for-in-l29 
			(block $for-out-l29 
				(f64.store (i32.add (i32.const 2184) (i32.shl (get_local $l29) (i32.const 3))) (f64.const 0.))
				(set_local $l29 (i32.add (get_local $l29) (i32.const 1)))
				(if (i32.lt_s (get_local $l29) (i32.const 3)) (br $for-in-l29) (br $for-out-l29))
				
			)
		)
		(set_local $l30 (i32.const 0))
		(loop $for-in-l30 
			(block $for-out-l30 
				(f64.store (i32.add (i32.const 2232) (i32.shl (get_local $l30) (i32.const 3))) (f64.const 0.))
				(set_local $l30 (i32.add (get_local $l30) (i32.const 1)))
				(if (i32.lt_s (get_local $l30) (i32.const 3)) (br $for-in-l30) (br $for-out-l30))
				
			)
		)
		(set_local $l31 (i32.const 0))
		(loop $for-in-l31 
			(block $for-out-l31 
				(f64.store (i32.add (i32.const 2280) (i32.shl (get_local $l31) (i32.const 3))) (f64.const 0.))
				(set_local $l31 (i32.add (get_local $l31) (i32.const 1)))
				(if (i32.lt_s (get_local $l31) (i32.const 3)) (br $for-in-l31) (br $for-out-l31))
				
			)
		)
		(set_local $l32 (i32.const 0))
		(loop $for-in-l32 
			(block $for-out-l32 
				(f64.store (i32.add (i32.const 2328) (i32.shl (get_local $l32) (i32.const 3))) (f64.const 0.))
				(set_local $l32 (i32.add (get_local $l32) (i32.const 1)))
				(if (i32.lt_s (get_local $l32) (i32.const 3)) (br $for-in-l32) (br $for-out-l32))
				
			)
		)
		(set_local $l33 (i32.const 0))
		(loop $for-in-l33 
			(block $for-out-l33 
				(f64.store (i32.add (i32.const 2376) (i32.shl (get_local $l33) (i32.const 3))) (f64.const 0.))
				(set_local $l33 (i32.add (get_local $l33) (i32.const 1)))
				(if (i32.lt_s (get_local $l33) (i32.const 3)) (br $for-in-l33) (br $for-out-l33))
				
			)
		)
		(set_local $l34 (i32.const 0))
		(loop $for-in-l34 
			(block $for-out-l34 
				(f64.store (i32.add (i32.const 2424) (i32.shl (get_local $l34) (i32.const 3))) (f64.const 0.))
				(set_local $l34 (i32.add (get_local $l34) (i32.const 1)))
				(if (i32.lt_s (get_local $l34) (i32.const 3)) (br $for-in-l34) (br $for-out-l34))
				
			)
		)
		(set_local $l35 (i32.const 0))
		(loop $for-in-l35 
			(block $for-out-l35 
				(f64.store (i32.add (i32.const 2472) (i32.shl (get_local $l35) (i32.const 3))) (f64.const 0.))
				(set_local $l35 (i32.add (get_local $l35) (i32.const 1)))
				(if (i32.lt_s (get_local $l35) (i32.const 3)) (br $for-in-l35) (br $for-out-l35))
				
			)
		)
		(set_local $l36 (i32.const 0))
		(loop $for-in-l36 
			(block $for-out-l36 
				(f64.store (i32.add (i32.const 2520) (i32.shl (get_local $l36) (i32.const 3))) (f64.const 0.))
				(set_local $l36 (i32.add (get_local $l36) (i32.const 1)))
				(if (i32.lt_s (get_local $l36) (i32.const 3)) (br $for-in-l36) (br $for-out-l36))
				
			)
		)
		(set_local $l37 (i32.const 0))
		(loop $for-in-l37 
			(block $for-out-l37 
				(f64.store (i32.add (i32.const 2568) (i32.shl (get_local $l37) (i32.const 3))) (f64.const 0.))
				(set_local $l37 (i32.add (get_local $l37) (i32.const 1)))
				(if (i32.lt_s (get_local $l37) (i32.const 3)) (br $for-in-l37) (br $for-out-l37))
				
			)
		)
		(set_local $l38 (i32.const 0))
		(loop $for-in-l38 
			(block $for-out-l38 
				(f64.store (i32.add (i32.const 2616) (i32.shl (get_local $l38) (i32.const 3))) (f64.const 0.))
				(set_local $l38 (i32.add (get_local $l38) (i32.const 1)))
				(if (i32.lt_s (get_local $l38) (i32.const 3)) (br $for-in-l38) (br $for-out-l38))
				
			)
		)
		(set_local $l39 (i32.const 0))
		(loop $for-in-l39 
			(block $for-out-l39 
				(f64.store (i32.add (i32.const 2672) (i32.shl (get_local $l39) (i32.const 3))) (f64.const 0.))
				(set_local $l39 (i32.add (get_local $l39) (i32.const 1)))
				(if (i32.lt_s (get_local $l39) (i32.const 3)) (br $for-in-l39) (br $for-out-l39))
				
			)
		)
		(set_local $l40 (i32.const 0))
		(loop $for-in-l40 
			(block $for-out-l40 
				(f64.store (i32.add (i32.const 2720) (i32.shl (get_local $l40) (i32.const 3))) (f64.const 0.))
				(set_local $l40 (i32.add (get_local $l40) (i32.const 1)))
				(if (i32.lt_s (get_local $l40) (i32.const 3)) (br $for-in-l40) (br $for-out-l40))
				
			)
		)
		(set_local $l41 (i32.const 0))
		(loop $for-in-l41 
			(block $for-out-l41 
				(f64.store (i32.add (i32.const 2768) (i32.shl (get_local $l41) (i32.const 3))) (f64.const 0.))
				(set_local $l41 (i32.add (get_local $l41) (i32.const 1)))
				(if (i32.lt_s (get_local $l41) (i32.const 3)) (br $for-in-l41) (br $for-out-l41))
				
			)
		)
		(set_local $l42 (i32.const 0))
		(loop $for-in-l42 
			(block $for-out-l42 
				(f64.store (i32.add (i32.const 2816) (i32.shl (get_local $l42) (i32.const 3))) (f64.const 0.))
				(set_local $l42 (i32.add (get_local $l42) (i32.const 1)))
				(if (i32.lt_s (get_local $l42) (i32.const 2)) (br $for-in-l42) (br $for-out-l42))
				
			)
		)
		(set_local $l43 (i32.const 0))
		(loop $for-in-l43 
			(block $for-out-l43 
				(f64.store (i32.add (i32.const 3008) (i32.shl (get_local $l43) (i32.const 3))) (f64.const 0.))
				(set_local $l43 (i32.add (get_local $l43) (i32.const 1)))
				(if (i32.lt_s (get_local $l43) (i32.const 3)) (br $for-in-l43) (br $for-out-l43))
				
			)
		)
		(set_local $l44 (i32.const 0))
		(loop $for-in-l44 
			(block $for-out-l44 
				(f64.store (i32.add (i32.const 3056) (i32.shl (get_local $l44) (i32.const 3))) (f64.const 0.))
				(set_local $l44 (i32.add (get_local $l44) (i32.const 1)))
				(if (i32.lt_s (get_local $l44) (i32.const 3)) (br $for-in-l44) (br $for-out-l44))
				
			)
		)
		(set_local $l45 (i32.const 0))
		(loop $for-in-l45 
			(block $for-out-l45 
				(f64.store (i32.add (i32.const 3104) (i32.shl (get_local $l45) (i32.const 3))) (f64.const 0.))
				(set_local $l45 (i32.add (get_local $l45) (i32.const 1)))
				(if (i32.lt_s (get_local $l45) (i32.const 3)) (br $for-in-l45) (br $for-out-l45))
				
			)
		)
		(set_local $l46 (i32.const 0))
		(loop $for-in-l46 
			(block $for-out-l46 
				(f64.store (i32.add (i32.const 3160) (i32.shl (get_local $l46) (i32.const 3))) (f64.const 0.))
				(set_local $l46 (i32.add (get_local $l46) (i32.const 1)))
				(if (i32.lt_s (get_local $l46) (i32.const 3)) (br $for-in-l46) (br $for-out-l46))
				
			)
		)
		(set_local $l47 (i32.const 0))
		(loop $for-in-l47 
			(block $for-out-l47 
				(f64.store (i32.add (i32.const 3208) (i32.shl (get_local $l47) (i32.const 3))) (f64.const 0.))
				(set_local $l47 (i32.add (get_local $l47) (i32.const 1)))
				(if (i32.lt_s (get_local $l47) (i32.const 3)) (br $for-in-l47) (br $for-out-l47))
				
			)
		)
		(set_local $l48 (i32.const 0))
		(loop $for-in-l48 
			(block $for-out-l48 
				(f64.store (i32.add (i32.const 3256) (i32.shl (get_local $l48) (i32.const 3))) (f64.const 0.))
				(set_local $l48 (i32.add (get_local $l48) (i32.const 1)))
				(if (i32.lt_s (get_local $l48) (i32.const 3)) (br $for-in-l48) (br $for-out-l48))
				
			)
		)
		(set_local $l49 (i32.const 0))
		(loop $for-in-l49 
			(block $for-out-l49 
				(f64.store (i32.add (i32.const 3288) (i32.shl (get_local $l49) (i32.const 3))) (f64.const 0.))
				(set_local $l49 (i32.add (get_local $l49) (i32.const 1)))
				(if (i32.lt_s (get_local $l49) (i32.const 2)) (br $for-in-l49) (br $for-out-l49))
				
			)
		)
		(set_local $l50 (i32.const 0))
		(loop $for-in-l50 
			(block $for-out-l50 
				(f64.store (i32.add (i32.const 3480) (i32.shl (get_local $l50) (i32.const 3))) (f64.const 0.))
				(set_local $l50 (i32.add (get_local $l50) (i32.const 1)))
				(if (i32.lt_s (get_local $l50) (i32.const 3)) (br $for-in-l50) (br $for-out-l50))
				
			)
		)
		(set_local $l51 (i32.const 0))
		(loop $for-in-l51 
			(block $for-out-l51 
				(f64.store (i32.add (i32.const 3528) (i32.shl (get_local $l51) (i32.const 3))) (f64.const 0.))
				(set_local $l51 (i32.add (get_local $l51) (i32.const 1)))
				(if (i32.lt_s (get_local $l51) (i32.const 3)) (br $for-in-l51) (br $for-out-l51))
				
			)
		)
		(set_local $l52 (i32.const 0))
		(loop $for-in-l52 
			(block $for-out-l52 
				(f64.store (i32.add (i32.const 3576) (i32.shl (get_local $l52) (i32.const 3))) (f64.const 0.))
				(set_local $l52 (i32.add (get_local $l52) (i32.const 1)))
				(if (i32.lt_s (get_local $l52) (i32.const 3)) (br $for-in-l52) (br $for-out-l52))
				
			)
		)
		(set_local $l53 (i32.const 0))
		(loop $for-in-l53 
			(block $for-out-l53 
				(f64.store (i32.add (i32.const 3632) (i32.shl (get_local $l53) (i32.const 3))) (f64.const 0.))
				(set_local $l53 (i32.add (get_local $l53) (i32.const 1)))
				(if (i32.lt_s (get_local $l53) (i32.const 3)) (br $for-in-l53) (br $for-out-l53))
				
			)
		)
		(set_local $l54 (i32.const 0))
		(loop $for-in-l54 
			(block $for-out-l54 
				(f64.store (i32.add (i32.const 3680) (i32.shl (get_local $l54) (i32.const 3))) (f64.const 0.))
				(set_local $l54 (i32.add (get_local $l54) (i32.const 1)))
				(if (i32.lt_s (get_local $l54) (i32.const 3)) (br $for-in-l54) (br $for-out-l54))
				
			)
		)
		(set_local $l55 (i32.const 0))
		(loop $for-in-l55 
			(block $for-out-l55 
				(f64.store (i32.add (i32.const 3728) (i32.shl (get_local $l55) (i32.const 3))) (f64.const 0.))
				(set_local $l55 (i32.add (get_local $l55) (i32.const 1)))
				(if (i32.lt_s (get_local $l55) (i32.const 3)) (br $for-in-l55) (br $for-out-l55))
				
			)
		)
		(set_local $l56 (i32.const 0))
		(loop $for-in-l56 
			(block $for-out-l56 
				(f64.store (i32.add (i32.const 3760) (i32.shl (get_local $l56) (i32.const 3))) (f64.const 0.))
				(set_local $l56 (i32.add (get_local $l56) (i32.const 1)))
				(if (i32.lt_s (get_local $l56) (i32.const 2)) (br $for-in-l56) (br $for-out-l56))
				
			)
		)
		(set_local $l57 (i32.const 0))
		(loop $for-in-l57 
			(block $for-out-l57 
				(f64.store (i32.add (i32.const 3952) (i32.shl (get_local $l57) (i32.const 3))) (f64.const 0.))
				(set_local $l57 (i32.add (get_local $l57) (i32.const 1)))
				(if (i32.lt_s (get_local $l57) (i32.const 3)) (br $for-in-l57) (br $for-out-l57))
				
			)
		)
		(set_local $l58 (i32.const 0))
		(loop $for-in-l58 
			(block $for-out-l58 
				(f64.store (i32.add (i32.const 4000) (i32.shl (get_local $l58) (i32.const 3))) (f64.const 0.))
				(set_local $l58 (i32.add (get_local $l58) (i32.const 1)))
				(if (i32.lt_s (get_local $l58) (i32.const 3)) (br $for-in-l58) (br $for-out-l58))
				
			)
		)
		(set_local $l59 (i32.const 0))
		(loop $for-in-l59 
			(block $for-out-l59 
				(f64.store (i32.add (i32.const 4048) (i32.shl (get_local $l59) (i32.const 3))) (f64.const 0.))
				(set_local $l59 (i32.add (get_local $l59) (i32.const 1)))
				(if (i32.lt_s (get_local $l59) (i32.const 3)) (br $for-in-l59) (br $for-out-l59))
				
			)
		)
		(set_local $l60 (i32.const 0))
		(loop $for-in-l60 
			(block $for-out-l60 
				(f64.store (i32.add (i32.const 4104) (i32.shl (get_local $l60) (i32.const 3))) (f64.const 0.))
				(set_local $l60 (i32.add (get_local $l60) (i32.const 1)))
				(if (i32.lt_s (get_local $l60) (i32.const 3)) (br $for-in-l60) (br $for-out-l60))
				
			)
		)
		(set_local $l61 (i32.const 0))
		(loop $for-in-l61 
			(block $for-out-l61 
				(f64.store (i32.add (i32.const 4152) (i32.shl (get_local $l61) (i32.const 3))) (f64.const 0.))
				(set_local $l61 (i32.add (get_local $l61) (i32.const 1)))
				(if (i32.lt_s (get_local $l61) (i32.const 3)) (br $for-in-l61) (br $for-out-l61))
				
			)
		)
		(set_local $l62 (i32.const 0))
		(loop $for-in-l62 
			(block $for-out-l62 
				(f64.store (i32.add (i32.const 4200) (i32.shl (get_local $l62) (i32.const 3))) (f64.const 0.))
				(set_local $l62 (i32.add (get_local $l62) (i32.const 1)))
				(if (i32.lt_s (get_local $l62) (i32.const 3)) (br $for-in-l62) (br $for-out-l62))
				
			)
		)
		(set_local $l63 (i32.const 0))
		(loop $for-in-l63 
			(block $for-out-l63 
				(f64.store (i32.add (i32.const 4232) (i32.shl (get_local $l63) (i32.const 3))) (f64.const 0.))
				(set_local $l63 (i32.add (get_local $l63) (i32.const 1)))
				(if (i32.lt_s (get_local $l63) (i32.const 2)) (br $for-in-l63) (br $for-out-l63))
				
			)
		)
		(set_local $l64 (i32.const 0))
		(loop $for-in-l64 
			(block $for-out-l64 
				(f64.store (i32.add (i32.const 4328) (i32.shl (get_local $l64) (i32.const 3))) (f64.const 0.))
				(set_local $l64 (i32.add (get_local $l64) (i32.const 1)))
				(if (i32.lt_s (get_local $l64) (i32.const 3)) (br $for-in-l64) (br $for-out-l64))
				
			)
		)
		(set_local $l65 (i32.const 0))
		(loop $for-in-l65 
			(block $for-out-l65 
				(f64.store (i32.add (i32.const 4376) (i32.shl (get_local $l65) (i32.const 3))) (f64.const 0.))
				(set_local $l65 (i32.add (get_local $l65) (i32.const 1)))
				(if (i32.lt_s (get_local $l65) (i32.const 3)) (br $for-in-l65) (br $for-out-l65))
				
			)
		)
		(set_local $l66 (i32.const 0))
		(loop $for-in-l66 
			(block $for-out-l66 
				(f64.store (i32.add (i32.const 4424) (i32.shl (get_local $l66) (i32.const 3))) (f64.const 0.))
				(set_local $l66 (i32.add (get_local $l66) (i32.const 1)))
				(if (i32.lt_s (get_local $l66) (i32.const 3)) (br $for-in-l66) (br $for-out-l66))
				
			)
		)
		(set_local $l67 (i32.const 0))
		(loop $for-in-l67 
			(block $for-out-l67 
				(f64.store (i32.add (i32.const 4456) (i32.shl (get_local $l67) (i32.const 3))) (f64.const 0.))
				(set_local $l67 (i32.add (get_local $l67) (i32.const 1)))
				(if (i32.lt_s (get_local $l67) (i32.const 2)) (br $for-in-l67) (br $for-out-l67))
				
			)
		)
		(set_local $l68 (i32.const 0))
		(loop $for-in-l68 
			(block $for-out-l68 
				(f64.store (i32.add (i32.const 4568) (i32.shl (get_local $l68) (i32.const 3))) (f64.const 0.))
				(set_local $l68 (i32.add (get_local $l68) (i32.const 1)))
				(if (i32.lt_s (get_local $l68) (i32.const 3)) (br $for-in-l68) (br $for-out-l68))
				
			)
		)
		(set_local $l69 (i32.const 0))
		(loop $for-in-l69 
			(block $for-out-l69 
				(f64.store (i32.add (i32.const 4616) (i32.shl (get_local $l69) (i32.const 3))) (f64.const 0.))
				(set_local $l69 (i32.add (get_local $l69) (i32.const 1)))
				(if (i32.lt_s (get_local $l69) (i32.const 3)) (br $for-in-l69) (br $for-out-l69))
				
			)
		)
		(set_local $l70 (i32.const 0))
		(loop $for-in-l70 
			(block $for-out-l70 
				(f64.store (i32.add (i32.const 4664) (i32.shl (get_local $l70) (i32.const 3))) (f64.const 0.))
				(set_local $l70 (i32.add (get_local $l70) (i32.const 1)))
				(if (i32.lt_s (get_local $l70) (i32.const 3)) (br $for-in-l70) (br $for-out-l70))
				
			)
		)
		(set_local $l71 (i32.const 0))
		(loop $for-in-l71 
			(block $for-out-l71 
				(f64.store (i32.add (i32.const 4696) (i32.shl (get_local $l71) (i32.const 3))) (f64.const 0.))
				(set_local $l71 (i32.add (get_local $l71) (i32.const 1)))
				(if (i32.lt_s (get_local $l71) (i32.const 2)) (br $for-in-l71) (br $for-out-l71))
				
			)
		)
		(set_local $l72 (i32.const 0))
		(loop $for-in-l72 
			(block $for-out-l72 
				(f64.store (i32.add (i32.const 4808) (i32.shl (get_local $l72) (i32.const 3))) (f64.const 0.))
				(set_local $l72 (i32.add (get_local $l72) (i32.const 1)))
				(if (i32.lt_s (get_local $l72) (i32.const 3)) (br $for-in-l72) (br $for-out-l72))
				
			)
		)
		(set_local $l73 (i32.const 0))
		(loop $for-in-l73 
			(block $for-out-l73 
				(f64.store (i32.add (i32.const 4856) (i32.shl (get_local $l73) (i32.const 3))) (f64.const 0.))
				(set_local $l73 (i32.add (get_local $l73) (i32.const 1)))
				(if (i32.lt_s (get_local $l73) (i32.const 3)) (br $for-in-l73) (br $for-out-l73))
				
			)
		)
		(set_local $l74 (i32.const 0))
		(loop $for-in-l74 
			(block $for-out-l74 
				(f64.store (i32.add (i32.const 4904) (i32.shl (get_local $l74) (i32.const 3))) (f64.const 0.))
				(set_local $l74 (i32.add (get_local $l74) (i32.const 1)))
				(if (i32.lt_s (get_local $l74) (i32.const 3)) (br $for-in-l74) (br $for-out-l74))
				
			)
		)
		(set_local $l75 (i32.const 0))
		(loop $for-in-l75 
			(block $for-out-l75 
				(f64.store (i32.add (i32.const 4936) (i32.shl (get_local $l75) (i32.const 3))) (f64.const 0.))
				(set_local $l75 (i32.add (get_local $l75) (i32.const 1)))
				(if (i32.lt_s (get_local $l75) (i32.const 2)) (br $for-in-l75) (br $for-out-l75))
				
			)
		)
		(set_local $l76 (i32.const 0))
		(loop $for-in-l76 
			(block $for-out-l76 
				(f64.store (i32.add (i32.const 5048) (i32.shl (get_local $l76) (i32.const 3))) (f64.const 0.))
				(set_local $l76 (i32.add (get_local $l76) (i32.const 1)))
				(if (i32.lt_s (get_local $l76) (i32.const 3)) (br $for-in-l76) (br $for-out-l76))
				
			)
		)
		(set_local $l77 (i32.const 0))
		(loop $for-in-l77 
			(block $for-out-l77 
				(f64.store (i32.add (i32.const 5096) (i32.shl (get_local $l77) (i32.const 3))) (f64.const 0.))
				(set_local $l77 (i32.add (get_local $l77) (i32.const 1)))
				(if (i32.lt_s (get_local $l77) (i32.const 3)) (br $for-in-l77) (br $for-out-l77))
				
			)
		)
		(set_local $l78 (i32.const 0))
		(loop $for-in-l78 
			(block $for-out-l78 
				(f64.store (i32.add (i32.const 5144) (i32.shl (get_local $l78) (i32.const 3))) (f64.const 0.))
				(set_local $l78 (i32.add (get_local $l78) (i32.const 1)))
				(if (i32.lt_s (get_local $l78) (i32.const 3)) (br $for-in-l78) (br $for-out-l78))
				
			)
		)
		(set_local $l79 (i32.const 0))
		(loop $for-in-l79 
			(block $for-out-l79 
				(f64.store (i32.add (i32.const 5176) (i32.shl (get_local $l79) (i32.const 3))) (f64.const 0.))
				(set_local $l79 (i32.add (get_local $l79) (i32.const 1)))
				(if (i32.lt_s (get_local $l79) (i32.const 2)) (br $for-in-l79) (br $for-out-l79))
				
			)
		)
		(set_local $l80 (i32.const 0))
		(loop $for-in-l80 
			(block $for-out-l80 
				(f64.store (i32.add (i32.const 5288) (i32.shl (get_local $l80) (i32.const 3))) (f64.const 0.))
				(set_local $l80 (i32.add (get_local $l80) (i32.const 1)))
				(if (i32.lt_s (get_local $l80) (i32.const 3)) (br $for-in-l80) (br $for-out-l80))
				
			)
		)
		(set_local $l81 (i32.const 0))
		(loop $for-in-l81 
			(block $for-out-l81 
				(f64.store (i32.add (i32.const 5336) (i32.shl (get_local $l81) (i32.const 3))) (f64.const 0.))
				(set_local $l81 (i32.add (get_local $l81) (i32.const 1)))
				(if (i32.lt_s (get_local $l81) (i32.const 3)) (br $for-in-l81) (br $for-out-l81))
				
			)
		)
		(set_local $l82 (i32.const 0))
		(loop $for-in-l82 
			(block $for-out-l82 
				(f64.store (i32.add (i32.const 5384) (i32.shl (get_local $l82) (i32.const 3))) (f64.const 0.))
				(set_local $l82 (i32.add (get_local $l82) (i32.const 1)))
				(if (i32.lt_s (get_local $l82) (i32.const 3)) (br $for-in-l82) (br $for-out-l82))
				
			)
		)
		(set_local $l83 (i32.const 0))
		(loop $for-in-l83 
			(block $for-out-l83 
				(f64.store (i32.add (i32.const 5416) (i32.shl (get_local $l83) (i32.const 3))) (f64.const 0.))
				(set_local $l83 (i32.add (get_local $l83) (i32.const 1)))
				(if (i32.lt_s (get_local $l83) (i32.const 2)) (br $for-in-l83) (br $for-out-l83))
				
			)
		)
		(set_local $l84 (i32.const 0))
		(loop $for-in-l84 
			(block $for-out-l84 
				(f64.store (i32.add (i32.const 5528) (i32.shl (get_local $l84) (i32.const 3))) (f64.const 0.))
				(set_local $l84 (i32.add (get_local $l84) (i32.const 1)))
				(if (i32.lt_s (get_local $l84) (i32.const 3)) (br $for-in-l84) (br $for-out-l84))
				
			)
		)
		(set_local $l85 (i32.const 0))
		(loop $for-in-l85 
			(block $for-out-l85 
				(f64.store (i32.add (i32.const 5576) (i32.shl (get_local $l85) (i32.const 3))) (f64.const 0.))
				(set_local $l85 (i32.add (get_local $l85) (i32.const 1)))
				(if (i32.lt_s (get_local $l85) (i32.const 3)) (br $for-in-l85) (br $for-out-l85))
				
			)
		)
		(set_local $l86 (i32.const 0))
		(loop $for-in-l86 
			(block $for-out-l86 
				(f64.store (i32.add (i32.const 5624) (i32.shl (get_local $l86) (i32.const 3))) (f64.const 0.))
				(set_local $l86 (i32.add (get_local $l86) (i32.const 1)))
				(if (i32.lt_s (get_local $l86) (i32.const 3)) (br $for-in-l86) (br $for-out-l86))
				
			)
		)
		(set_local $l87 (i32.const 0))
		(loop $for-in-l87 
			(block $for-out-l87 
				(f64.store (i32.add (i32.const 5656) (i32.shl (get_local $l87) (i32.const 3))) (f64.const 0.))
				(set_local $l87 (i32.add (get_local $l87) (i32.const 1)))
				(if (i32.lt_s (get_local $l87) (i32.const 2)) (br $for-in-l87) (br $for-out-l87))
				
			)
		)
		(set_local $l88 (i32.const 0))
		(loop $for-in-l88 
			(block $for-out-l88 
				(f64.store (i32.add (i32.const 5768) (i32.shl (get_local $l88) (i32.const 3))) (f64.const 0.))
				(set_local $l88 (i32.add (get_local $l88) (i32.const 1)))
				(if (i32.lt_s (get_local $l88) (i32.const 3)) (br $for-in-l88) (br $for-out-l88))
				
			)
		)
		(set_local $l89 (i32.const 0))
		(loop $for-in-l89 
			(block $for-out-l89 
				(f64.store (i32.add (i32.const 5816) (i32.shl (get_local $l89) (i32.const 3))) (f64.const 0.))
				(set_local $l89 (i32.add (get_local $l89) (i32.const 1)))
				(if (i32.lt_s (get_local $l89) (i32.const 3)) (br $for-in-l89) (br $for-out-l89))
				
			)
		)
		(set_local $l90 (i32.const 0))
		(loop $for-in-l90 
			(block $for-out-l90 
				(f64.store (i32.add (i32.const 5864) (i32.shl (get_local $l90) (i32.const 3))) (f64.const 0.))
				(set_local $l90 (i32.add (get_local $l90) (i32.const 1)))
				(if (i32.lt_s (get_local $l90) (i32.const 3)) (br $for-in-l90) (br $for-out-l90))
				
			)
		)
		(set_local $l91 (i32.const 0))
		(loop $for-in-l91 
			(block $for-out-l91 
				(f64.store (i32.add (i32.const 5896) (i32.shl (get_local $l91) (i32.const 3))) (f64.const 0.))
				(set_local $l91 (i32.add (get_local $l91) (i32.const 1)))
				(if (i32.lt_s (get_local $l91) (i32.const 2)) (br $for-in-l91) (br $for-out-l91))
				
			)
		)
		(set_local $l92 (i32.const 0))
		(loop $for-in-l92 
			(block $for-out-l92 
				(f64.store (i32.add (i32.const 6008) (i32.shl (get_local $l92) (i32.const 3))) (f64.const 0.))
				(set_local $l92 (i32.add (get_local $l92) (i32.const 1)))
				(if (i32.lt_s (get_local $l92) (i32.const 3)) (br $for-in-l92) (br $for-out-l92))
				
			)
		)
		(set_local $l93 (i32.const 0))
		(loop $for-in-l93 
			(block $for-out-l93 
				(f64.store (i32.add (i32.const 6056) (i32.shl (get_local $l93) (i32.const 3))) (f64.const 0.))
				(set_local $l93 (i32.add (get_local $l93) (i32.const 1)))
				(if (i32.lt_s (get_local $l93) (i32.const 3)) (br $for-in-l93) (br $for-out-l93))
				
			)
		)
		(set_local $l94 (i32.const 0))
		(loop $for-in-l94 
			(block $for-out-l94 
				(f64.store (i32.add (i32.const 6104) (i32.shl (get_local $l94) (i32.const 3))) (f64.const 0.))
				(set_local $l94 (i32.add (get_local $l94) (i32.const 1)))
				(if (i32.lt_s (get_local $l94) (i32.const 3)) (br $for-in-l94) (br $for-out-l94))
				
			)
		)
		(set_local $l95 (i32.const 0))
		(loop $for-in-l95 
			(block $for-out-l95 
				(f64.store (i32.add (i32.const 6136) (i32.shl (get_local $l95) (i32.const 3))) (f64.const 0.))
				(set_local $l95 (i32.add (get_local $l95) (i32.const 1)))
				(if (i32.lt_s (get_local $l95) (i32.const 2)) (br $for-in-l95) (br $for-out-l95))
				
			)
		)
		(set_local $l96 (i32.const 0))
		(loop $for-in-l96 
			(block $for-out-l96 
				(f64.store (i32.add (i32.const 6248) (i32.shl (get_local $l96) (i32.const 3))) (f64.const 0.))
				(set_local $l96 (i32.add (get_local $l96) (i32.const 1)))
				(if (i32.lt_s (get_local $l96) (i32.const 3)) (br $for-in-l96) (br $for-out-l96))
				
			)
		)
		(set_local $l97 (i32.const 0))
		(loop $for-in-l97 
			(block $for-out-l97 
				(f64.store (i32.add (i32.const 6296) (i32.shl (get_local $l97) (i32.const 3))) (f64.const 0.))
				(set_local $l97 (i32.add (get_local $l97) (i32.const 1)))
				(if (i32.lt_s (get_local $l97) (i32.const 3)) (br $for-in-l97) (br $for-out-l97))
				
			)
		)
		(set_local $l98 (i32.const 0))
		(loop $for-in-l98 
			(block $for-out-l98 
				(f64.store (i32.add (i32.const 6344) (i32.shl (get_local $l98) (i32.const 3))) (f64.const 0.))
				(set_local $l98 (i32.add (get_local $l98) (i32.const 1)))
				(if (i32.lt_s (get_local $l98) (i32.const 3)) (br $for-in-l98) (br $for-out-l98))
				
			)
		)
		(set_local $l99 (i32.const 0))
		(loop $for-in-l99 
			(block $for-out-l99 
				(f64.store (i32.add (i32.const 6376) (i32.shl (get_local $l99) (i32.const 3))) (f64.const 0.))
				(set_local $l99 (i32.add (get_local $l99) (i32.const 1)))
				(if (i32.lt_s (get_local $l99) (i32.const 2)) (br $for-in-l99) (br $for-out-l99))
				
			)
		)
		(set_local $l100 (i32.const 0))
		(loop $for-in-l100 
			(block $for-out-l100 
				(f64.store (i32.add (i32.const 6488) (i32.shl (get_local $l100) (i32.const 3))) (f64.const 0.))
				(set_local $l100 (i32.add (get_local $l100) (i32.const 1)))
				(if (i32.lt_s (get_local $l100) (i32.const 3)) (br $for-in-l100) (br $for-out-l100))
				
			)
		)
		(set_local $l101 (i32.const 0))
		(loop $for-in-l101 
			(block $for-out-l101 
				(f64.store (i32.add (i32.const 6536) (i32.shl (get_local $l101) (i32.const 3))) (f64.const 0.))
				(set_local $l101 (i32.add (get_local $l101) (i32.const 1)))
				(if (i32.lt_s (get_local $l101) (i32.const 3)) (br $for-in-l101) (br $for-out-l101))
				
			)
		)
		(set_local $l102 (i32.const 0))
		(loop $for-in-l102 
			(block $for-out-l102 
				(f64.store (i32.add (i32.const 6584) (i32.shl (get_local $l102) (i32.const 3))) (f64.const 0.))
				(set_local $l102 (i32.add (get_local $l102) (i32.const 1)))
				(if (i32.lt_s (get_local $l102) (i32.const 3)) (br $for-in-l102) (br $for-out-l102))
				
			)
		)
		(set_local $l103 (i32.const 0))
		(loop $for-in-l103 
			(block $for-out-l103 
				(f64.store (i32.add (i32.const 6616) (i32.shl (get_local $l103) (i32.const 3))) (f64.const 0.))
				(set_local $l103 (i32.add (get_local $l103) (i32.const 1)))
				(if (i32.lt_s (get_local $l103) (i32.const 2)) (br $for-in-l103) (br $for-out-l103))
				
			)
		)
		(set_local $l104 (i32.const 0))
		(loop $for-in-l104 
			(block $for-out-l104 
				(f64.store (i32.add (i32.const 6728) (i32.shl (get_local $l104) (i32.const 3))) (f64.const 0.))
				(set_local $l104 (i32.add (get_local $l104) (i32.const 1)))
				(if (i32.lt_s (get_local $l104) (i32.const 3)) (br $for-in-l104) (br $for-out-l104))
				
			)
		)
		(set_local $l105 (i32.const 0))
		(loop $for-in-l105 
			(block $for-out-l105 
				(f64.store (i32.add (i32.const 6776) (i32.shl (get_local $l105) (i32.const 3))) (f64.const 0.))
				(set_local $l105 (i32.add (get_local $l105) (i32.const 1)))
				(if (i32.lt_s (get_local $l105) (i32.const 3)) (br $for-in-l105) (br $for-out-l105))
				
			)
		)
		(set_local $l106 (i32.const 0))
		(loop $for-in-l106 
			(block $for-out-l106 
				(f64.store (i32.add (i32.const 6824) (i32.shl (get_local $l106) (i32.const 3))) (f64.const 0.))
				(set_local $l106 (i32.add (get_local $l106) (i32.const 1)))
				(if (i32.lt_s (get_local $l106) (i32.const 3)) (br $for-in-l106) (br $for-out-l106))
				
			)
		)
		(set_local $l107 (i32.const 0))
		(loop $for-in-l107 
			(block $for-out-l107 
				(f64.store (i32.add (i32.const 6856) (i32.shl (get_local $l107) (i32.const 3))) (f64.const 0.))
				(set_local $l107 (i32.add (get_local $l107) (i32.const 1)))
				(if (i32.lt_s (get_local $l107) (i32.const 2)) (br $for-in-l107) (br $for-out-l107))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load offset=8 (i32.const 0)))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f64)
		(f64.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f64)
		(return (f64.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f64)
		(local $iSlow1 i32)
		(local $fSlow2 f64)
		(local $fSlow3 f64)
		(local $fSlow4 f64)
		(local $fSlow5 f64)
		(local $fSlow6 f64)
		(local $fSlow7 f64)
		(local $fSlow8 f64)
		(local $fSlow9 f64)
		(local $fSlow10 f64)
		(local $i i32)
		(local $fTemp0 f64)
		(local $fTemp1 f64)
		(local $fTemp2 f64)
		(local $fTemp3 f64)
		(local $fTemp4 f64)
		(local $fTemp5 f64)
		(local $fTemp6 f64)
		(local $fTemp7 f64)
		(local $fTemp8 f64)
		(local $fTemp9 f64)
		(local $fTemp10 f64)
		(local $fTemp11 f64)
		(local $fTemp12 f64)
		(local $fTemp13 f64)
		(local $fTemp14 f64)
		(local $fTemp15 f64)
		(local $fTemp16 f64)
		(local $fTemp17 f64)
		(local $fTemp18 f64)
		(local $fTemp19 f64)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f64.const 0.))
		(set_local $iSlow1 (i32.const 0))
		(set_local $fSlow2 (f64.const 0.))
		(set_local $fSlow3 (f64.const 0.))
		(set_local $fSlow4 (f64.const 0.))
		(set_local $fSlow5 (f64.const 0.))
		(set_local $fSlow6 (f64.const 0.))
		(set_local $fSlow7 (f64.const 0.))
		(set_local $fSlow8 (f64.const 0.))
		(set_local $fSlow9 (f64.const 0.))
		(set_local $fSlow10 (f64.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f64.const 0.))
		(set_local $fTemp1 (f64.const 0.))
		(set_local $fTemp2 (f64.const 0.))
		(set_local $fTemp3 (f64.const 0.))
		(set_local $fTemp4 (f64.const 0.))
		(set_local $fTemp5 (f64.const 0.))
		(set_local $fTemp6 (f64.const 0.))
		(set_local $fTemp7 (f64.const 0.))
		(set_local $fTemp8 (f64.const 0.))
		(set_local $fTemp9 (f64.const 0.))
		(set_local $fTemp10 (f64.const 0.))
		(set_local $fTemp11 (f64.const 0.))
		(set_local $fTemp12 (f64.const 0.))
		(set_local $fTemp13 (f64.const 0.))
		(set_local $fTemp14 (f64.const 0.))
		(set_local $fTemp15 (f64.const 0.))
		(set_local $fTemp16 (f64.const 0.))
		(set_local $fTemp17 (f64.const 0.))
		(set_local $fTemp18 (f64.const 0.))
		(set_local $fTemp19 (f64.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f64.load (i32.const 0)))
		(set_local $iSlow1 (i32.trunc_s/f64 (f64.load offset=1000 (i32.const 0))))
		(set_local $fSlow2 (f64.mul (f64.const 0.0010000000000000009) (call $pow (f64.const 10.) (f64.mul (f64.const 0.050000000000000003) (f64.load offset=1024 (i32.const 0))))))
		(set_local $fSlow3 (f64.load offset=1056 (i32.const 0)))
		(set_local $fSlow4 (select (call $exp (f64.sub (f64.const 0.) (f64.div (f64.load offset=1064 (i32.const 0)) (get_local $fSlow3)))) (f64.const 0.) (f64.gt (get_local $fSlow3) (f64.const 0.))))
		(set_local $fSlow5 (f64.mul (f64.mul (f64.const 440.) (call $pow (f64.const 2.) (f64.mul (f64.const 0.083333333333333329) (f64.add (f64.load offset=1072 (i32.const 0)) (f64.const -49.))))) (f64.sub (f64.const 1.) (get_local $fSlow4))))
		(set_local $fSlow6 (f64.mul (f64.const 0.0010000000000000009) (f64.load offset=1128 (i32.const 0))))
		(set_local $fSlow7 (f64.mul (f64.const 0.0010000000000000009) (f64.load offset=1152 (i32.const 0))))
		(set_local $fSlow8 (f64.load offset=2800 (i32.const 0)))
		(set_local $fSlow9 (select (call $exp (f64.sub (f64.const 0.) (f64.div (f64.load offset=2808 (i32.const 0)) (get_local $fSlow8)))) (f64.const 0.) (f64.gt (f64.mul (f64.const 0.001) (get_local $fSlow8)) (f64.const 0.))))
		(set_local $fSlow10 (f64.sub (f64.const 1.) (get_local $fSlow9)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store offset=1008 (i32.const 0) (i32.const 1))
				(f64.store offset=1032 (i32.const 0) (f64.add (get_local $fSlow2) (f64.mul (f64.const 0.999) (f64.load offset=1040 (i32.const 0)))))
				(f64.store offset=1080 (i32.const 0) (f64.add (f64.mul (f64.load offset=1088 (i32.const 0)) (get_local $fSlow4)) (get_local $fSlow5)))
				(set_local $fTemp0 (f64.mul (f64.load offset=1048 (i32.const 0)) (f64.load offset=1080 (i32.const 0))))
				(set_local $fTemp1 (call $sin (get_local $fTemp0)))
				(set_local $fTemp2 (call $cos (get_local $fTemp0)))
				(f64.store offset=1096 (i32.const 0) (f64.add (f64.mul (f64.load offset=1120 (i32.const 0)) (get_local $fTemp1)) (f64.mul (f64.load offset=1104 (i32.const 0)) (get_local $fTemp2))))
				(f64.store offset=1112 (i32.const 0) (f64.add (f64.add (f64.mul (f64.load offset=1120 (i32.const 0)) (get_local $fTemp2)) (f64.mul (f64.load offset=1104 (i32.const 0)) (f64.sub (f64.const 0.) (get_local $fTemp1)))) (f64.convert_s/i32 (i32.sub (i32.const 1) (i32.load offset=1016 (i32.const 0))))))
				(set_local $fTemp3 (f64.mul (f64.load offset=1032 (i32.const 0)) (f64.load offset=1096 (i32.const 0))))
				(f64.store offset=1136 (i32.const 0) (f64.add (get_local $fSlow6) (f64.mul (f64.const 0.999) (f64.load offset=1144 (i32.const 0)))))
				(f64.store offset=1160 (i32.const 0) (f64.add (get_local $fSlow7) (f64.mul (f64.const 0.999) (f64.load offset=1168 (i32.const 0)))))
				(set_local $fTemp4 (f64.max (f64.const -1.) (f64.min (f64.const 1.) (f64.add (f64.mul (select (f64.const 0.) (get_local $fTemp3) (get_local $iSlow1)) (call $pow (f64.const 10.) (f64.mul (f64.const 2.) (f64.load offset=1136 (i32.const 0))))) (f64.load offset=1160 (i32.const 0))))))
				(set_local $fTemp5 (f64.mul (get_local $fTemp4) (f64.sub (f64.const 1.) (f64.mul (f64.const 0.33333333333333331) (call $pow (get_local $fTemp4) (f64.const 2.))))))
				(f64.store offset=1176 (i32.const 0) (get_local $fTemp5))
				(f64.store offset=1192 (i32.const 0) (f64.sub (f64.add (f64.mul (f64.const 0.995) (f64.load offset=1200 (i32.const 0))) (get_local $fTemp5)) (f64.load offset=1184 (i32.const 0))))
				(set_local $fTemp6 (select (get_local $fTemp3) (f64.load offset=1192 (i32.const 0)) (get_local $iSlow1)))
				(f64.store offset=1224 (i32.const 0) (f64.sub (get_local $fTemp6) (f64.mul (f64.load offset=976 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1208 (i32.const 0)) (f64.load offset=1240 (i32.const 0))) (f64.mul (f64.load offset=1216 (i32.const 0)) (f64.load offset=1232 (i32.const 0)))))))
				(f64.store offset=1272 (i32.const 0) (f64.sub (f64.mul (f64.load offset=976 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=992 (i32.const 0)) (f64.load offset=1232 (i32.const 0))) (f64.mul (f64.load offset=1248 (i32.const 0)) (f64.load offset=1224 (i32.const 0)))) (f64.mul (f64.load offset=1248 (i32.const 0)) (f64.load offset=1240 (i32.const 0))))) (f64.mul (f64.load offset=960 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1256 (i32.const 0)) (f64.load offset=1288 (i32.const 0))) (f64.mul (f64.load offset=1264 (i32.const 0)) (f64.load offset=1280 (i32.const 0)))))))
				(f64.store offset=1320 (i32.const 0) (f64.sub (f64.mul (f64.load offset=960 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=968 (i32.const 0)) (f64.load offset=1280 (i32.const 0))) (f64.mul (f64.load offset=1296 (i32.const 0)) (f64.load offset=1272 (i32.const 0)))) (f64.mul (f64.load offset=1296 (i32.const 0)) (f64.load offset=1288 (i32.const 0))))) (f64.mul (f64.load offset=928 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1304 (i32.const 0)) (f64.load offset=1336 (i32.const 0))) (f64.mul (f64.load offset=1312 (i32.const 0)) (f64.load offset=1328 (i32.const 0)))))))
				(set_local $fTemp7 (f64.mul (f64.load offset=928 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=952 (i32.const 0)) (f64.load offset=1328 (i32.const 0))) (f64.mul (f64.load offset=1344 (i32.const 0)) (f64.load offset=1320 (i32.const 0)))) (f64.mul (f64.load offset=1344 (i32.const 0)) (f64.load offset=1336 (i32.const 0))))))
				(f64.store offset=1368 (i32.const 0) (f64.sub (get_local $fTemp7) (f64.mul (f64.load offset=888 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1352 (i32.const 0)) (f64.load offset=1384 (i32.const 0))) (f64.mul (f64.load offset=1360 (i32.const 0)) (f64.load offset=1376 (i32.const 0)))))))
				(f64.store offset=1416 (i32.const 0) (f64.sub (f64.mul (f64.load offset=888 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=904 (i32.const 0)) (f64.load offset=1376 (i32.const 0))) (f64.mul (f64.load offset=1392 (i32.const 0)) (f64.load offset=1368 (i32.const 0)))) (f64.mul (f64.load offset=1392 (i32.const 0)) (f64.load offset=1384 (i32.const 0))))) (f64.mul (f64.load offset=872 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1400 (i32.const 0)) (f64.load offset=1432 (i32.const 0))) (f64.mul (f64.load offset=1408 (i32.const 0)) (f64.load offset=1424 (i32.const 0)))))))
				(f64.store offset=1464 (i32.const 0) (f64.sub (f64.mul (f64.load offset=872 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=880 (i32.const 0)) (f64.load offset=1424 (i32.const 0))) (f64.mul (f64.load offset=1440 (i32.const 0)) (f64.load offset=1416 (i32.const 0)))) (f64.mul (f64.load offset=1440 (i32.const 0)) (f64.load offset=1432 (i32.const 0))))) (f64.mul (f64.load offset=840 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1448 (i32.const 0)) (f64.load offset=1480 (i32.const 0))) (f64.mul (f64.load offset=1456 (i32.const 0)) (f64.load offset=1472 (i32.const 0)))))))
				(set_local $fTemp8 (f64.mul (f64.load offset=840 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=864 (i32.const 0)) (f64.load offset=1472 (i32.const 0))) (f64.mul (f64.load offset=1488 (i32.const 0)) (f64.load offset=1464 (i32.const 0)))) (f64.mul (f64.load offset=1488 (i32.const 0)) (f64.load offset=1480 (i32.const 0))))))
				(f64.store offset=1512 (i32.const 0) (f64.sub (get_local $fTemp8) (f64.mul (f64.load offset=800 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1496 (i32.const 0)) (f64.load offset=1528 (i32.const 0))) (f64.mul (f64.load offset=1504 (i32.const 0)) (f64.load offset=1520 (i32.const 0)))))))
				(f64.store offset=1560 (i32.const 0) (f64.sub (f64.mul (f64.load offset=800 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=816 (i32.const 0)) (f64.load offset=1520 (i32.const 0))) (f64.mul (f64.load offset=1536 (i32.const 0)) (f64.load offset=1512 (i32.const 0)))) (f64.mul (f64.load offset=1536 (i32.const 0)) (f64.load offset=1528 (i32.const 0))))) (f64.mul (f64.load offset=784 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1544 (i32.const 0)) (f64.load offset=1576 (i32.const 0))) (f64.mul (f64.load offset=1552 (i32.const 0)) (f64.load offset=1568 (i32.const 0)))))))
				(f64.store offset=1608 (i32.const 0) (f64.sub (f64.mul (f64.load offset=784 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=792 (i32.const 0)) (f64.load offset=1568 (i32.const 0))) (f64.mul (f64.load offset=1584 (i32.const 0)) (f64.load offset=1560 (i32.const 0)))) (f64.mul (f64.load offset=1584 (i32.const 0)) (f64.load offset=1576 (i32.const 0))))) (f64.mul (f64.load offset=752 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1592 (i32.const 0)) (f64.load offset=1624 (i32.const 0))) (f64.mul (f64.load offset=1600 (i32.const 0)) (f64.load offset=1616 (i32.const 0)))))))
				(set_local $fTemp9 (f64.mul (f64.load offset=752 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=776 (i32.const 0)) (f64.load offset=1616 (i32.const 0))) (f64.mul (f64.load offset=1632 (i32.const 0)) (f64.load offset=1608 (i32.const 0)))) (f64.mul (f64.load offset=1632 (i32.const 0)) (f64.load offset=1624 (i32.const 0))))))
				(f64.store offset=1656 (i32.const 0) (f64.sub (get_local $fTemp9) (f64.mul (f64.load offset=712 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1640 (i32.const 0)) (f64.load offset=1672 (i32.const 0))) (f64.mul (f64.load offset=1648 (i32.const 0)) (f64.load offset=1664 (i32.const 0)))))))
				(f64.store offset=1704 (i32.const 0) (f64.sub (f64.mul (f64.load offset=712 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=728 (i32.const 0)) (f64.load offset=1664 (i32.const 0))) (f64.mul (f64.load offset=1680 (i32.const 0)) (f64.load offset=1656 (i32.const 0)))) (f64.mul (f64.load offset=1680 (i32.const 0)) (f64.load offset=1672 (i32.const 0))))) (f64.mul (f64.load offset=696 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1688 (i32.const 0)) (f64.load offset=1720 (i32.const 0))) (f64.mul (f64.load offset=1696 (i32.const 0)) (f64.load offset=1712 (i32.const 0)))))))
				(f64.store offset=1752 (i32.const 0) (f64.sub (f64.mul (f64.load offset=696 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=704 (i32.const 0)) (f64.load offset=1712 (i32.const 0))) (f64.mul (f64.load offset=1728 (i32.const 0)) (f64.load offset=1704 (i32.const 0)))) (f64.mul (f64.load offset=1728 (i32.const 0)) (f64.load offset=1720 (i32.const 0))))) (f64.mul (f64.load offset=664 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1736 (i32.const 0)) (f64.load offset=1768 (i32.const 0))) (f64.mul (f64.load offset=1744 (i32.const 0)) (f64.load offset=1760 (i32.const 0)))))))
				(set_local $fTemp10 (f64.mul (f64.load offset=664 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=688 (i32.const 0)) (f64.load offset=1760 (i32.const 0))) (f64.mul (f64.load offset=1776 (i32.const 0)) (f64.load offset=1752 (i32.const 0)))) (f64.mul (f64.load offset=1776 (i32.const 0)) (f64.load offset=1768 (i32.const 0))))))
				(f64.store offset=1800 (i32.const 0) (f64.sub (get_local $fTemp10) (f64.mul (f64.load offset=624 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1784 (i32.const 0)) (f64.load offset=1816 (i32.const 0))) (f64.mul (f64.load offset=1792 (i32.const 0)) (f64.load offset=1808 (i32.const 0)))))))
				(f64.store offset=1848 (i32.const 0) (f64.sub (f64.mul (f64.load offset=624 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=640 (i32.const 0)) (f64.load offset=1808 (i32.const 0))) (f64.mul (f64.load offset=1824 (i32.const 0)) (f64.load offset=1800 (i32.const 0)))) (f64.mul (f64.load offset=1824 (i32.const 0)) (f64.load offset=1816 (i32.const 0))))) (f64.mul (f64.load offset=608 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1832 (i32.const 0)) (f64.load offset=1864 (i32.const 0))) (f64.mul (f64.load offset=1840 (i32.const 0)) (f64.load offset=1856 (i32.const 0)))))))
				(f64.store offset=1896 (i32.const 0) (f64.sub (f64.mul (f64.load offset=608 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=616 (i32.const 0)) (f64.load offset=1856 (i32.const 0))) (f64.mul (f64.load offset=1872 (i32.const 0)) (f64.load offset=1848 (i32.const 0)))) (f64.mul (f64.load offset=1872 (i32.const 0)) (f64.load offset=1864 (i32.const 0))))) (f64.mul (f64.load offset=576 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1880 (i32.const 0)) (f64.load offset=1912 (i32.const 0))) (f64.mul (f64.load offset=1888 (i32.const 0)) (f64.load offset=1904 (i32.const 0)))))))
				(set_local $fTemp11 (f64.mul (f64.load offset=576 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=600 (i32.const 0)) (f64.load offset=1904 (i32.const 0))) (f64.mul (f64.load offset=1920 (i32.const 0)) (f64.load offset=1896 (i32.const 0)))) (f64.mul (f64.load offset=1920 (i32.const 0)) (f64.load offset=1912 (i32.const 0))))))
				(f64.store offset=1944 (i32.const 0) (f64.sub (get_local $fTemp11) (f64.mul (f64.load offset=536 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1928 (i32.const 0)) (f64.load offset=1960 (i32.const 0))) (f64.mul (f64.load offset=1936 (i32.const 0)) (f64.load offset=1952 (i32.const 0)))))))
				(f64.store offset=1992 (i32.const 0) (f64.sub (f64.mul (f64.load offset=536 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=552 (i32.const 0)) (f64.load offset=1952 (i32.const 0))) (f64.mul (f64.load offset=1968 (i32.const 0)) (f64.load offset=1944 (i32.const 0)))) (f64.mul (f64.load offset=1968 (i32.const 0)) (f64.load offset=1960 (i32.const 0))))) (f64.mul (f64.load offset=520 (i32.const 0)) (f64.add (f64.mul (f64.load offset=1976 (i32.const 0)) (f64.load offset=2008 (i32.const 0))) (f64.mul (f64.load offset=1984 (i32.const 0)) (f64.load offset=2000 (i32.const 0)))))))
				(f64.store offset=2040 (i32.const 0) (f64.sub (f64.mul (f64.load offset=520 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=528 (i32.const 0)) (f64.load offset=2000 (i32.const 0))) (f64.mul (f64.load offset=2016 (i32.const 0)) (f64.load offset=1992 (i32.const 0)))) (f64.mul (f64.load offset=2016 (i32.const 0)) (f64.load offset=2008 (i32.const 0))))) (f64.mul (f64.load offset=488 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2024 (i32.const 0)) (f64.load offset=2056 (i32.const 0))) (f64.mul (f64.load offset=2032 (i32.const 0)) (f64.load offset=2048 (i32.const 0)))))))
				(set_local $fTemp12 (f64.mul (f64.load offset=488 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=512 (i32.const 0)) (f64.load offset=2048 (i32.const 0))) (f64.mul (f64.load offset=2064 (i32.const 0)) (f64.load offset=2040 (i32.const 0)))) (f64.mul (f64.load offset=2064 (i32.const 0)) (f64.load offset=2056 (i32.const 0))))))
				(f64.store offset=2088 (i32.const 0) (f64.sub (get_local $fTemp12) (f64.mul (f64.load offset=448 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2072 (i32.const 0)) (f64.load offset=2104 (i32.const 0))) (f64.mul (f64.load offset=2080 (i32.const 0)) (f64.load offset=2096 (i32.const 0)))))))
				(f64.store offset=2136 (i32.const 0) (f64.sub (f64.mul (f64.load offset=448 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=464 (i32.const 0)) (f64.load offset=2096 (i32.const 0))) (f64.mul (f64.load offset=2112 (i32.const 0)) (f64.load offset=2088 (i32.const 0)))) (f64.mul (f64.load offset=2112 (i32.const 0)) (f64.load offset=2104 (i32.const 0))))) (f64.mul (f64.load offset=432 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2120 (i32.const 0)) (f64.load offset=2152 (i32.const 0))) (f64.mul (f64.load offset=2128 (i32.const 0)) (f64.load offset=2144 (i32.const 0)))))))
				(f64.store offset=2184 (i32.const 0) (f64.sub (f64.mul (f64.load offset=432 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=440 (i32.const 0)) (f64.load offset=2144 (i32.const 0))) (f64.mul (f64.load offset=2160 (i32.const 0)) (f64.load offset=2136 (i32.const 0)))) (f64.mul (f64.load offset=2160 (i32.const 0)) (f64.load offset=2152 (i32.const 0))))) (f64.mul (f64.load offset=400 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2168 (i32.const 0)) (f64.load offset=2200 (i32.const 0))) (f64.mul (f64.load offset=2176 (i32.const 0)) (f64.load offset=2192 (i32.const 0)))))))
				(set_local $fTemp13 (f64.mul (f64.load offset=400 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=424 (i32.const 0)) (f64.load offset=2192 (i32.const 0))) (f64.mul (f64.load offset=2208 (i32.const 0)) (f64.load offset=2184 (i32.const 0)))) (f64.mul (f64.load offset=2208 (i32.const 0)) (f64.load offset=2200 (i32.const 0))))))
				(f64.store offset=2232 (i32.const 0) (f64.sub (get_local $fTemp13) (f64.mul (f64.load offset=360 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2216 (i32.const 0)) (f64.load offset=2248 (i32.const 0))) (f64.mul (f64.load offset=2224 (i32.const 0)) (f64.load offset=2240 (i32.const 0)))))))
				(f64.store offset=2280 (i32.const 0) (f64.sub (f64.mul (f64.load offset=360 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=376 (i32.const 0)) (f64.load offset=2240 (i32.const 0))) (f64.mul (f64.load offset=2256 (i32.const 0)) (f64.load offset=2232 (i32.const 0)))) (f64.mul (f64.load offset=2256 (i32.const 0)) (f64.load offset=2248 (i32.const 0))))) (f64.mul (f64.load offset=344 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2264 (i32.const 0)) (f64.load offset=2296 (i32.const 0))) (f64.mul (f64.load offset=2272 (i32.const 0)) (f64.load offset=2288 (i32.const 0)))))))
				(f64.store offset=2328 (i32.const 0) (f64.sub (f64.mul (f64.load offset=344 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=352 (i32.const 0)) (f64.load offset=2288 (i32.const 0))) (f64.mul (f64.load offset=2304 (i32.const 0)) (f64.load offset=2280 (i32.const 0)))) (f64.mul (f64.load offset=2304 (i32.const 0)) (f64.load offset=2296 (i32.const 0))))) (f64.mul (f64.load offset=312 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2312 (i32.const 0)) (f64.load offset=2344 (i32.const 0))) (f64.mul (f64.load offset=2320 (i32.const 0)) (f64.load offset=2336 (i32.const 0)))))))
				(set_local $fTemp14 (f64.mul (f64.load offset=312 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=336 (i32.const 0)) (f64.load offset=2336 (i32.const 0))) (f64.mul (f64.load offset=2352 (i32.const 0)) (f64.load offset=2328 (i32.const 0)))) (f64.mul (f64.load offset=2352 (i32.const 0)) (f64.load offset=2344 (i32.const 0))))))
				(f64.store offset=2376 (i32.const 0) (f64.sub (get_local $fTemp14) (f64.mul (f64.load offset=272 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2360 (i32.const 0)) (f64.load offset=2392 (i32.const 0))) (f64.mul (f64.load offset=2368 (i32.const 0)) (f64.load offset=2384 (i32.const 0)))))))
				(f64.store offset=2424 (i32.const 0) (f64.sub (f64.mul (f64.load offset=272 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=288 (i32.const 0)) (f64.load offset=2384 (i32.const 0))) (f64.mul (f64.load offset=2400 (i32.const 0)) (f64.load offset=2376 (i32.const 0)))) (f64.mul (f64.load offset=2400 (i32.const 0)) (f64.load offset=2392 (i32.const 0))))) (f64.mul (f64.load offset=256 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2408 (i32.const 0)) (f64.load offset=2440 (i32.const 0))) (f64.mul (f64.load offset=2416 (i32.const 0)) (f64.load offset=2432 (i32.const 0)))))))
				(f64.store offset=2472 (i32.const 0) (f64.sub (f64.mul (f64.load offset=256 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=264 (i32.const 0)) (f64.load offset=2432 (i32.const 0))) (f64.mul (f64.load offset=2448 (i32.const 0)) (f64.load offset=2424 (i32.const 0)))) (f64.mul (f64.load offset=2448 (i32.const 0)) (f64.load offset=2440 (i32.const 0))))) (f64.mul (f64.load offset=224 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2456 (i32.const 0)) (f64.load offset=2488 (i32.const 0))) (f64.mul (f64.load offset=2464 (i32.const 0)) (f64.load offset=2480 (i32.const 0)))))))
				(set_local $fTemp15 (f64.mul (f64.load offset=224 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=248 (i32.const 0)) (f64.load offset=2480 (i32.const 0))) (f64.mul (f64.load offset=2496 (i32.const 0)) (f64.load offset=2472 (i32.const 0)))) (f64.mul (f64.load offset=2496 (i32.const 0)) (f64.load offset=2488 (i32.const 0))))))
				(f64.store offset=2520 (i32.const 0) (f64.sub (get_local $fTemp15) (f64.mul (f64.load offset=184 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2504 (i32.const 0)) (f64.load offset=2536 (i32.const 0))) (f64.mul (f64.load offset=2512 (i32.const 0)) (f64.load offset=2528 (i32.const 0)))))))
				(f64.store offset=2568 (i32.const 0) (f64.sub (f64.mul (f64.load offset=184 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=200 (i32.const 0)) (f64.load offset=2528 (i32.const 0))) (f64.mul (f64.load offset=2544 (i32.const 0)) (f64.load offset=2520 (i32.const 0)))) (f64.mul (f64.load offset=2544 (i32.const 0)) (f64.load offset=2536 (i32.const 0))))) (f64.mul (f64.load offset=168 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2552 (i32.const 0)) (f64.load offset=2584 (i32.const 0))) (f64.mul (f64.load offset=2560 (i32.const 0)) (f64.load offset=2576 (i32.const 0)))))))
				(f64.store offset=2616 (i32.const 0) (f64.sub (f64.mul (f64.load offset=168 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=176 (i32.const 0)) (f64.load offset=2576 (i32.const 0))) (f64.mul (f64.load offset=2592 (i32.const 0)) (f64.load offset=2568 (i32.const 0)))) (f64.mul (f64.load offset=2592 (i32.const 0)) (f64.load offset=2584 (i32.const 0))))) (f64.mul (f64.load offset=136 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2600 (i32.const 0)) (f64.load offset=2632 (i32.const 0))) (f64.mul (f64.load offset=2608 (i32.const 0)) (f64.load offset=2624 (i32.const 0)))))))
				(set_local $fTemp16 (f64.mul (f64.load offset=136 (i32.const 0)) (f64.add (f64.mul (f64.load offset=160 (i32.const 0)) (f64.load offset=2632 (i32.const 0))) (f64.add (f64.mul (f64.load offset=2640 (i32.const 0)) (f64.load offset=2624 (i32.const 0))) (f64.mul (f64.load offset=160 (i32.const 0)) (f64.load offset=2616 (i32.const 0)))))))
				(f64.store offset=2672 (i32.const 0) (f64.sub (get_local $fTemp16) (f64.mul (f64.load offset=96 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2648 (i32.const 0)) (f64.load offset=2688 (i32.const 0))) (f64.mul (f64.load offset=2664 (i32.const 0)) (f64.load offset=2680 (i32.const 0)))))))
				(f64.store offset=2720 (i32.const 0) (f64.sub (f64.mul (f64.load offset=96 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=112 (i32.const 0)) (f64.load offset=2680 (i32.const 0))) (f64.mul (f64.load offset=2696 (i32.const 0)) (f64.load offset=2672 (i32.const 0)))) (f64.mul (f64.load offset=2696 (i32.const 0)) (f64.load offset=2688 (i32.const 0))))) (f64.mul (f64.load offset=72 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2704 (i32.const 0)) (f64.load offset=2736 (i32.const 0))) (f64.mul (f64.load offset=2712 (i32.const 0)) (f64.load offset=2728 (i32.const 0)))))))
				(f64.store offset=2768 (i32.const 0) (f64.sub (f64.mul (f64.load offset=72 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=88 (i32.const 0)) (f64.load offset=2728 (i32.const 0))) (f64.mul (f64.load offset=2744 (i32.const 0)) (f64.load offset=2720 (i32.const 0)))) (f64.mul (f64.load offset=2744 (i32.const 0)) (f64.load offset=2736 (i32.const 0))))) (f64.mul (f64.load offset=40 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2752 (i32.const 0)) (f64.load offset=2784 (i32.const 0))) (f64.mul (f64.load offset=2760 (i32.const 0)) (f64.load offset=2776 (i32.const 0)))))))
				(f64.store offset=2816 (i32.const 0) (f64.add (f64.mul (f64.abs (f64.mul (f64.load offset=40 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=64 (i32.const 0)) (f64.load offset=2776 (i32.const 0))) (f64.mul (f64.load offset=2792 (i32.const 0)) (f64.load offset=2768 (i32.const 0)))) (f64.mul (f64.load offset=2792 (i32.const 0)) (f64.load offset=2784 (i32.const 0)))))) (get_local $fSlow10)) (f64.mul (get_local $fSlow9) (f64.load offset=2824 (i32.const 0)))))
				(f64.store offset=2832 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=2816 (i32.const 0))))))
				(f64.store offset=3008 (i32.const 0) (f64.sub (get_local $fTemp16) (f64.mul (f64.load offset=2968 (i32.const 0)) (f64.add (f64.mul (f64.load offset=2992 (i32.const 0)) (f64.load offset=3024 (i32.const 0))) (f64.mul (f64.load offset=3000 (i32.const 0)) (f64.load offset=3016 (i32.const 0)))))))
				(f64.store offset=3056 (i32.const 0) (f64.sub (f64.mul (f64.load offset=2968 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2984 (i32.const 0)) (f64.load offset=3016 (i32.const 0))) (f64.mul (f64.load offset=3032 (i32.const 0)) (f64.load offset=3008 (i32.const 0)))) (f64.mul (f64.load offset=3032 (i32.const 0)) (f64.load offset=3024 (i32.const 0))))) (f64.mul (f64.load offset=2952 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3040 (i32.const 0)) (f64.load offset=3072 (i32.const 0))) (f64.mul (f64.load offset=3048 (i32.const 0)) (f64.load offset=3064 (i32.const 0)))))))
				(f64.store offset=3104 (i32.const 0) (f64.sub (f64.mul (f64.load offset=2952 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2960 (i32.const 0)) (f64.load offset=3064 (i32.const 0))) (f64.mul (f64.load offset=3080 (i32.const 0)) (f64.load offset=3056 (i32.const 0)))) (f64.mul (f64.load offset=3080 (i32.const 0)) (f64.load offset=3072 (i32.const 0))))) (f64.mul (f64.load offset=2936 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3088 (i32.const 0)) (f64.load offset=3120 (i32.const 0))) (f64.mul (f64.load offset=3096 (i32.const 0)) (f64.load offset=3112 (i32.const 0)))))))
				(set_local $fTemp17 (f64.mul (f64.load offset=2936 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2944 (i32.const 0)) (f64.load offset=3112 (i32.const 0))) (f64.mul (f64.load offset=3128 (i32.const 0)) (f64.load offset=3104 (i32.const 0)))) (f64.mul (f64.load offset=3128 (i32.const 0)) (f64.load offset=3120 (i32.const 0))))))
				(f64.store offset=3160 (i32.const 0) (f64.sub (get_local $fTemp17) (f64.mul (f64.load offset=2912 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3136 (i32.const 0)) (f64.load offset=3176 (i32.const 0))) (f64.mul (f64.load offset=3152 (i32.const 0)) (f64.load offset=3168 (i32.const 0)))))))
				(f64.store offset=3208 (i32.const 0) (f64.sub (f64.mul (f64.load offset=2912 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2928 (i32.const 0)) (f64.load offset=3168 (i32.const 0))) (f64.mul (f64.load offset=3184 (i32.const 0)) (f64.load offset=3160 (i32.const 0)))) (f64.mul (f64.load offset=3184 (i32.const 0)) (f64.load offset=3176 (i32.const 0))))) (f64.mul (f64.load offset=2888 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3192 (i32.const 0)) (f64.load offset=3224 (i32.const 0))) (f64.mul (f64.load offset=3200 (i32.const 0)) (f64.load offset=3216 (i32.const 0)))))))
				(f64.store offset=3256 (i32.const 0) (f64.sub (f64.mul (f64.load offset=2888 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2904 (i32.const 0)) (f64.load offset=3216 (i32.const 0))) (f64.mul (f64.load offset=3232 (i32.const 0)) (f64.load offset=3208 (i32.const 0)))) (f64.mul (f64.load offset=3232 (i32.const 0)) (f64.load offset=3224 (i32.const 0))))) (f64.mul (f64.load offset=2856 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3240 (i32.const 0)) (f64.load offset=3272 (i32.const 0))) (f64.mul (f64.load offset=3248 (i32.const 0)) (f64.load offset=3264 (i32.const 0)))))))
				(f64.store offset=3288 (i32.const 0) (f64.add (f64.mul (f64.load offset=3296 (i32.const 0)) (get_local $fSlow9)) (f64.mul (f64.abs (f64.mul (f64.load offset=2856 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=2880 (i32.const 0)) (f64.load offset=3264 (i32.const 0))) (f64.mul (f64.load offset=3280 (i32.const 0)) (f64.load offset=3256 (i32.const 0)))) (f64.mul (f64.load offset=3280 (i32.const 0)) (f64.load offset=3272 (i32.const 0)))))) (get_local $fSlow10))))
				(f64.store offset=3304 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=3288 (i32.const 0))))))
				(f64.store offset=3480 (i32.const 0) (f64.sub (get_local $fTemp17) (f64.mul (f64.load offset=3440 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3464 (i32.const 0)) (f64.load offset=3496 (i32.const 0))) (f64.mul (f64.load offset=3472 (i32.const 0)) (f64.load offset=3488 (i32.const 0)))))))
				(f64.store offset=3528 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3440 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3456 (i32.const 0)) (f64.load offset=3488 (i32.const 0))) (f64.mul (f64.load offset=3504 (i32.const 0)) (f64.load offset=3480 (i32.const 0)))) (f64.mul (f64.load offset=3504 (i32.const 0)) (f64.load offset=3496 (i32.const 0))))) (f64.mul (f64.load offset=3424 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3512 (i32.const 0)) (f64.load offset=3544 (i32.const 0))) (f64.mul (f64.load offset=3520 (i32.const 0)) (f64.load offset=3536 (i32.const 0)))))))
				(f64.store offset=3576 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3424 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3432 (i32.const 0)) (f64.load offset=3536 (i32.const 0))) (f64.mul (f64.load offset=3552 (i32.const 0)) (f64.load offset=3528 (i32.const 0)))) (f64.mul (f64.load offset=3552 (i32.const 0)) (f64.load offset=3544 (i32.const 0))))) (f64.mul (f64.load offset=3408 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3560 (i32.const 0)) (f64.load offset=3592 (i32.const 0))) (f64.mul (f64.load offset=3568 (i32.const 0)) (f64.load offset=3584 (i32.const 0)))))))
				(set_local $fTemp18 (f64.mul (f64.load offset=3408 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3416 (i32.const 0)) (f64.load offset=3584 (i32.const 0))) (f64.mul (f64.load offset=3600 (i32.const 0)) (f64.load offset=3576 (i32.const 0)))) (f64.mul (f64.load offset=3600 (i32.const 0)) (f64.load offset=3592 (i32.const 0))))))
				(f64.store offset=3632 (i32.const 0) (f64.sub (get_local $fTemp18) (f64.mul (f64.load offset=3384 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3608 (i32.const 0)) (f64.load offset=3648 (i32.const 0))) (f64.mul (f64.load offset=3624 (i32.const 0)) (f64.load offset=3640 (i32.const 0)))))))
				(f64.store offset=3680 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3384 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3400 (i32.const 0)) (f64.load offset=3640 (i32.const 0))) (f64.mul (f64.load offset=3656 (i32.const 0)) (f64.load offset=3632 (i32.const 0)))) (f64.mul (f64.load offset=3656 (i32.const 0)) (f64.load offset=3648 (i32.const 0))))) (f64.mul (f64.load offset=3360 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3664 (i32.const 0)) (f64.load offset=3696 (i32.const 0))) (f64.mul (f64.load offset=3672 (i32.const 0)) (f64.load offset=3688 (i32.const 0)))))))
				(f64.store offset=3728 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3360 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3376 (i32.const 0)) (f64.load offset=3688 (i32.const 0))) (f64.mul (f64.load offset=3704 (i32.const 0)) (f64.load offset=3680 (i32.const 0)))) (f64.mul (f64.load offset=3704 (i32.const 0)) (f64.load offset=3696 (i32.const 0))))) (f64.mul (f64.load offset=3328 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3712 (i32.const 0)) (f64.load offset=3744 (i32.const 0))) (f64.mul (f64.load offset=3720 (i32.const 0)) (f64.load offset=3736 (i32.const 0)))))))
				(f64.store offset=3760 (i32.const 0) (f64.add (f64.mul (f64.load offset=3768 (i32.const 0)) (get_local $fSlow9)) (f64.mul (f64.abs (f64.mul (f64.load offset=3328 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3352 (i32.const 0)) (f64.load offset=3736 (i32.const 0))) (f64.mul (f64.load offset=3752 (i32.const 0)) (f64.load offset=3728 (i32.const 0)))) (f64.mul (f64.load offset=3752 (i32.const 0)) (f64.load offset=3744 (i32.const 0)))))) (get_local $fSlow10))))
				(f64.store offset=3776 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=3760 (i32.const 0))))))
				(f64.store offset=3952 (i32.const 0) (f64.sub (get_local $fTemp18) (f64.mul (f64.load offset=3912 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3936 (i32.const 0)) (f64.load offset=3968 (i32.const 0))) (f64.mul (f64.load offset=3944 (i32.const 0)) (f64.load offset=3960 (i32.const 0)))))))
				(f64.store offset=4000 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3912 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3928 (i32.const 0)) (f64.load offset=3960 (i32.const 0))) (f64.mul (f64.load offset=3976 (i32.const 0)) (f64.load offset=3952 (i32.const 0)))) (f64.mul (f64.load offset=3976 (i32.const 0)) (f64.load offset=3968 (i32.const 0))))) (f64.mul (f64.load offset=3896 (i32.const 0)) (f64.add (f64.mul (f64.load offset=3984 (i32.const 0)) (f64.load offset=4016 (i32.const 0))) (f64.mul (f64.load offset=3992 (i32.const 0)) (f64.load offset=4008 (i32.const 0)))))))
				(f64.store offset=4048 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3896 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3904 (i32.const 0)) (f64.load offset=4008 (i32.const 0))) (f64.mul (f64.load offset=4024 (i32.const 0)) (f64.load offset=4000 (i32.const 0)))) (f64.mul (f64.load offset=4024 (i32.const 0)) (f64.load offset=4016 (i32.const 0))))) (f64.mul (f64.load offset=3880 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4032 (i32.const 0)) (f64.load offset=4064 (i32.const 0))) (f64.mul (f64.load offset=4040 (i32.const 0)) (f64.load offset=4056 (i32.const 0)))))))
				(set_local $fTemp19 (f64.mul (f64.load offset=3880 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3888 (i32.const 0)) (f64.load offset=4056 (i32.const 0))) (f64.mul (f64.load offset=4072 (i32.const 0)) (f64.load offset=4048 (i32.const 0)))) (f64.mul (f64.load offset=4072 (i32.const 0)) (f64.load offset=4064 (i32.const 0))))))
				(f64.store offset=4104 (i32.const 0) (f64.sub (get_local $fTemp19) (f64.mul (f64.load offset=3856 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4080 (i32.const 0)) (f64.load offset=4120 (i32.const 0))) (f64.mul (f64.load offset=4096 (i32.const 0)) (f64.load offset=4112 (i32.const 0)))))))
				(f64.store offset=4152 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3856 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3872 (i32.const 0)) (f64.load offset=4112 (i32.const 0))) (f64.mul (f64.load offset=4128 (i32.const 0)) (f64.load offset=4104 (i32.const 0)))) (f64.mul (f64.load offset=4128 (i32.const 0)) (f64.load offset=4120 (i32.const 0))))) (f64.mul (f64.load offset=3832 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4136 (i32.const 0)) (f64.load offset=4168 (i32.const 0))) (f64.mul (f64.load offset=4144 (i32.const 0)) (f64.load offset=4160 (i32.const 0)))))))
				(f64.store offset=4200 (i32.const 0) (f64.sub (f64.mul (f64.load offset=3832 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3848 (i32.const 0)) (f64.load offset=4160 (i32.const 0))) (f64.mul (f64.load offset=4176 (i32.const 0)) (f64.load offset=4152 (i32.const 0)))) (f64.mul (f64.load offset=4176 (i32.const 0)) (f64.load offset=4168 (i32.const 0))))) (f64.mul (f64.load offset=3800 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4184 (i32.const 0)) (f64.load offset=4216 (i32.const 0))) (f64.mul (f64.load offset=4192 (i32.const 0)) (f64.load offset=4208 (i32.const 0)))))))
				(f64.store offset=4232 (i32.const 0) (f64.add (f64.mul (f64.load offset=4240 (i32.const 0)) (get_local $fSlow9)) (f64.mul (f64.abs (f64.mul (f64.load offset=3800 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=3824 (i32.const 0)) (f64.load offset=4208 (i32.const 0))) (f64.mul (f64.load offset=4224 (i32.const 0)) (f64.load offset=4200 (i32.const 0)))) (f64.mul (f64.load offset=4224 (i32.const 0)) (f64.load offset=4216 (i32.const 0)))))) (get_local $fSlow10))))
				(f64.store offset=4248 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=4232 (i32.const 0))))))
				(f64.store offset=4328 (i32.const 0) (f64.sub (get_local $fTemp19) (f64.mul (f64.load offset=4288 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4312 (i32.const 0)) (f64.load offset=4344 (i32.const 0))) (f64.mul (f64.load offset=4320 (i32.const 0)) (f64.load offset=4336 (i32.const 0)))))))
				(f64.store offset=4376 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4288 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4304 (i32.const 0)) (f64.load offset=4336 (i32.const 0))) (f64.mul (f64.load offset=4352 (i32.const 0)) (f64.load offset=4328 (i32.const 0)))) (f64.mul (f64.load offset=4352 (i32.const 0)) (f64.load offset=4344 (i32.const 0))))) (f64.mul (f64.load offset=4272 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4360 (i32.const 0)) (f64.load offset=4392 (i32.const 0))) (f64.mul (f64.load offset=4368 (i32.const 0)) (f64.load offset=4384 (i32.const 0)))))))
				(f64.store offset=4424 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4272 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4280 (i32.const 0)) (f64.load offset=4384 (i32.const 0))) (f64.mul (f64.load offset=4400 (i32.const 0)) (f64.load offset=4376 (i32.const 0)))) (f64.mul (f64.load offset=4400 (i32.const 0)) (f64.load offset=4392 (i32.const 0))))) (f64.mul (f64.load offset=4256 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4408 (i32.const 0)) (f64.load offset=4440 (i32.const 0))) (f64.mul (f64.load offset=4416 (i32.const 0)) (f64.load offset=4432 (i32.const 0)))))))
				(f64.store offset=4456 (i32.const 0) (f64.add (f64.mul (f64.load offset=4464 (i32.const 0)) (get_local $fSlow9)) (f64.mul (f64.abs (f64.mul (f64.load offset=4256 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4264 (i32.const 0)) (f64.load offset=4432 (i32.const 0))) (f64.mul (f64.load offset=4448 (i32.const 0)) (f64.load offset=4424 (i32.const 0)))) (f64.mul (f64.load offset=4448 (i32.const 0)) (f64.load offset=4440 (i32.const 0)))))) (get_local $fSlow10))))
				(f64.store offset=4472 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=4456 (i32.const 0))))))
				(f64.store offset=4568 (i32.const 0) (f64.sub (get_local $fTemp6) (f64.mul (f64.load offset=4528 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4552 (i32.const 0)) (f64.load offset=4584 (i32.const 0))) (f64.mul (f64.load offset=4560 (i32.const 0)) (f64.load offset=4576 (i32.const 0)))))))
				(f64.store offset=4616 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4528 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4544 (i32.const 0)) (f64.load offset=4576 (i32.const 0))) (f64.mul (f64.load offset=4592 (i32.const 0)) (f64.load offset=4568 (i32.const 0)))) (f64.mul (f64.load offset=4592 (i32.const 0)) (f64.load offset=4584 (i32.const 0))))) (f64.mul (f64.load offset=4504 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4600 (i32.const 0)) (f64.load offset=4632 (i32.const 0))) (f64.mul (f64.load offset=4608 (i32.const 0)) (f64.load offset=4624 (i32.const 0)))))))
				(f64.store offset=4664 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4504 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4520 (i32.const 0)) (f64.load offset=4624 (i32.const 0))) (f64.mul (f64.load offset=4640 (i32.const 0)) (f64.load offset=4616 (i32.const 0)))) (f64.mul (f64.load offset=4640 (i32.const 0)) (f64.load offset=4632 (i32.const 0))))) (f64.mul (f64.load offset=4480 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4648 (i32.const 0)) (f64.load offset=4680 (i32.const 0))) (f64.mul (f64.load offset=4656 (i32.const 0)) (f64.load offset=4672 (i32.const 0)))))))
				(f64.store offset=4696 (i32.const 0) (f64.add (f64.mul (f64.load offset=4704 (i32.const 0)) (get_local $fSlow9)) (f64.mul (f64.abs (f64.mul (f64.load offset=4480 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4496 (i32.const 0)) (f64.load offset=4672 (i32.const 0))) (f64.mul (f64.load offset=4688 (i32.const 0)) (f64.load offset=4664 (i32.const 0)))) (f64.mul (f64.load offset=4688 (i32.const 0)) (f64.load offset=4680 (i32.const 0)))))) (get_local $fSlow10))))
				(f64.store offset=4712 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=4696 (i32.const 0))))))
				(f64.store offset=4808 (i32.const 0) (f64.sub (get_local $fTemp7) (f64.mul (f64.load offset=4768 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4792 (i32.const 0)) (f64.load offset=4824 (i32.const 0))) (f64.mul (f64.load offset=4800 (i32.const 0)) (f64.load offset=4816 (i32.const 0)))))))
				(f64.store offset=4856 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4768 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4784 (i32.const 0)) (f64.load offset=4816 (i32.const 0))) (f64.mul (f64.load offset=4832 (i32.const 0)) (f64.load offset=4808 (i32.const 0)))) (f64.mul (f64.load offset=4832 (i32.const 0)) (f64.load offset=4824 (i32.const 0))))) (f64.mul (f64.load offset=4744 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4840 (i32.const 0)) (f64.load offset=4872 (i32.const 0))) (f64.mul (f64.load offset=4848 (i32.const 0)) (f64.load offset=4864 (i32.const 0)))))))
				(f64.store offset=4904 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4744 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4760 (i32.const 0)) (f64.load offset=4864 (i32.const 0))) (f64.mul (f64.load offset=4880 (i32.const 0)) (f64.load offset=4856 (i32.const 0)))) (f64.mul (f64.load offset=4880 (i32.const 0)) (f64.load offset=4872 (i32.const 0))))) (f64.mul (f64.load offset=4720 (i32.const 0)) (f64.add (f64.mul (f64.load offset=4888 (i32.const 0)) (f64.load offset=4920 (i32.const 0))) (f64.mul (f64.load offset=4896 (i32.const 0)) (f64.load offset=4912 (i32.const 0)))))))
				(f64.store offset=4936 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=4944 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=4720 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4736 (i32.const 0)) (f64.load offset=4912 (i32.const 0))) (f64.mul (f64.load offset=4928 (i32.const 0)) (f64.load offset=4904 (i32.const 0)))) (f64.mul (f64.load offset=4928 (i32.const 0)) (f64.load offset=4920 (i32.const 0)))))))))
				(f64.store offset=4952 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=4936 (i32.const 0))))))
				(f64.store offset=5048 (i32.const 0) (f64.sub (get_local $fTemp8) (f64.mul (f64.load offset=5008 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5032 (i32.const 0)) (f64.load offset=5064 (i32.const 0))) (f64.mul (f64.load offset=5040 (i32.const 0)) (f64.load offset=5056 (i32.const 0)))))))
				(f64.store offset=5096 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5008 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5024 (i32.const 0)) (f64.load offset=5056 (i32.const 0))) (f64.mul (f64.load offset=5072 (i32.const 0)) (f64.load offset=5048 (i32.const 0)))) (f64.mul (f64.load offset=5072 (i32.const 0)) (f64.load offset=5064 (i32.const 0))))) (f64.mul (f64.load offset=4984 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5080 (i32.const 0)) (f64.load offset=5112 (i32.const 0))) (f64.mul (f64.load offset=5088 (i32.const 0)) (f64.load offset=5104 (i32.const 0)))))))
				(f64.store offset=5144 (i32.const 0) (f64.sub (f64.mul (f64.load offset=4984 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5000 (i32.const 0)) (f64.load offset=5104 (i32.const 0))) (f64.mul (f64.load offset=5120 (i32.const 0)) (f64.load offset=5096 (i32.const 0)))) (f64.mul (f64.load offset=5120 (i32.const 0)) (f64.load offset=5112 (i32.const 0))))) (f64.mul (f64.load offset=4960 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5128 (i32.const 0)) (f64.load offset=5160 (i32.const 0))) (f64.mul (f64.load offset=5136 (i32.const 0)) (f64.load offset=5152 (i32.const 0)))))))
				(f64.store offset=5176 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=5184 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=4960 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=4976 (i32.const 0)) (f64.load offset=5152 (i32.const 0))) (f64.mul (f64.load offset=5168 (i32.const 0)) (f64.load offset=5144 (i32.const 0)))) (f64.mul (f64.load offset=5168 (i32.const 0)) (f64.load offset=5160 (i32.const 0)))))))))
				(f64.store offset=5192 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=5176 (i32.const 0))))))
				(f64.store offset=5288 (i32.const 0) (f64.sub (get_local $fTemp9) (f64.mul (f64.load offset=5248 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5272 (i32.const 0)) (f64.load offset=5304 (i32.const 0))) (f64.mul (f64.load offset=5280 (i32.const 0)) (f64.load offset=5296 (i32.const 0)))))))
				(f64.store offset=5336 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5248 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5264 (i32.const 0)) (f64.load offset=5296 (i32.const 0))) (f64.mul (f64.load offset=5312 (i32.const 0)) (f64.load offset=5288 (i32.const 0)))) (f64.mul (f64.load offset=5312 (i32.const 0)) (f64.load offset=5304 (i32.const 0))))) (f64.mul (f64.load offset=5224 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5320 (i32.const 0)) (f64.load offset=5352 (i32.const 0))) (f64.mul (f64.load offset=5328 (i32.const 0)) (f64.load offset=5344 (i32.const 0)))))))
				(f64.store offset=5384 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5224 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5240 (i32.const 0)) (f64.load offset=5344 (i32.const 0))) (f64.mul (f64.load offset=5360 (i32.const 0)) (f64.load offset=5336 (i32.const 0)))) (f64.mul (f64.load offset=5360 (i32.const 0)) (f64.load offset=5352 (i32.const 0))))) (f64.mul (f64.load offset=5200 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5368 (i32.const 0)) (f64.load offset=5400 (i32.const 0))) (f64.mul (f64.load offset=5376 (i32.const 0)) (f64.load offset=5392 (i32.const 0)))))))
				(f64.store offset=5416 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=5424 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=5200 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5216 (i32.const 0)) (f64.load offset=5392 (i32.const 0))) (f64.mul (f64.load offset=5408 (i32.const 0)) (f64.load offset=5384 (i32.const 0)))) (f64.mul (f64.load offset=5408 (i32.const 0)) (f64.load offset=5400 (i32.const 0)))))))))
				(f64.store offset=5432 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=5416 (i32.const 0))))))
				(f64.store offset=5528 (i32.const 0) (f64.sub (get_local $fTemp10) (f64.mul (f64.load offset=5488 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5512 (i32.const 0)) (f64.load offset=5544 (i32.const 0))) (f64.mul (f64.load offset=5520 (i32.const 0)) (f64.load offset=5536 (i32.const 0)))))))
				(f64.store offset=5576 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5488 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5504 (i32.const 0)) (f64.load offset=5536 (i32.const 0))) (f64.mul (f64.load offset=5552 (i32.const 0)) (f64.load offset=5528 (i32.const 0)))) (f64.mul (f64.load offset=5552 (i32.const 0)) (f64.load offset=5544 (i32.const 0))))) (f64.mul (f64.load offset=5464 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5560 (i32.const 0)) (f64.load offset=5592 (i32.const 0))) (f64.mul (f64.load offset=5568 (i32.const 0)) (f64.load offset=5584 (i32.const 0)))))))
				(f64.store offset=5624 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5464 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5480 (i32.const 0)) (f64.load offset=5584 (i32.const 0))) (f64.mul (f64.load offset=5600 (i32.const 0)) (f64.load offset=5576 (i32.const 0)))) (f64.mul (f64.load offset=5600 (i32.const 0)) (f64.load offset=5592 (i32.const 0))))) (f64.mul (f64.load offset=5440 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5608 (i32.const 0)) (f64.load offset=5640 (i32.const 0))) (f64.mul (f64.load offset=5616 (i32.const 0)) (f64.load offset=5632 (i32.const 0)))))))
				(f64.store offset=5656 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=5664 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=5440 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5456 (i32.const 0)) (f64.load offset=5632 (i32.const 0))) (f64.mul (f64.load offset=5648 (i32.const 0)) (f64.load offset=5624 (i32.const 0)))) (f64.mul (f64.load offset=5648 (i32.const 0)) (f64.load offset=5640 (i32.const 0)))))))))
				(f64.store offset=5672 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=5656 (i32.const 0))))))
				(f64.store offset=5768 (i32.const 0) (f64.sub (get_local $fTemp11) (f64.mul (f64.load offset=5728 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5752 (i32.const 0)) (f64.load offset=5784 (i32.const 0))) (f64.mul (f64.load offset=5760 (i32.const 0)) (f64.load offset=5776 (i32.const 0)))))))
				(f64.store offset=5816 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5728 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5744 (i32.const 0)) (f64.load offset=5776 (i32.const 0))) (f64.mul (f64.load offset=5792 (i32.const 0)) (f64.load offset=5768 (i32.const 0)))) (f64.mul (f64.load offset=5792 (i32.const 0)) (f64.load offset=5784 (i32.const 0))))) (f64.mul (f64.load offset=5704 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5800 (i32.const 0)) (f64.load offset=5832 (i32.const 0))) (f64.mul (f64.load offset=5808 (i32.const 0)) (f64.load offset=5824 (i32.const 0)))))))
				(f64.store offset=5864 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5704 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5720 (i32.const 0)) (f64.load offset=5824 (i32.const 0))) (f64.mul (f64.load offset=5840 (i32.const 0)) (f64.load offset=5816 (i32.const 0)))) (f64.mul (f64.load offset=5840 (i32.const 0)) (f64.load offset=5832 (i32.const 0))))) (f64.mul (f64.load offset=5680 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5848 (i32.const 0)) (f64.load offset=5880 (i32.const 0))) (f64.mul (f64.load offset=5856 (i32.const 0)) (f64.load offset=5872 (i32.const 0)))))))
				(f64.store offset=5896 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=5904 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=5680 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5696 (i32.const 0)) (f64.load offset=5872 (i32.const 0))) (f64.mul (f64.load offset=5888 (i32.const 0)) (f64.load offset=5864 (i32.const 0)))) (f64.mul (f64.load offset=5888 (i32.const 0)) (f64.load offset=5880 (i32.const 0)))))))))
				(f64.store offset=5912 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=5896 (i32.const 0))))))
				(f64.store offset=6008 (i32.const 0) (f64.sub (get_local $fTemp12) (f64.mul (f64.load offset=5968 (i32.const 0)) (f64.add (f64.mul (f64.load offset=5992 (i32.const 0)) (f64.load offset=6024 (i32.const 0))) (f64.mul (f64.load offset=6000 (i32.const 0)) (f64.load offset=6016 (i32.const 0)))))))
				(f64.store offset=6056 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5968 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5984 (i32.const 0)) (f64.load offset=6016 (i32.const 0))) (f64.mul (f64.load offset=6032 (i32.const 0)) (f64.load offset=6008 (i32.const 0)))) (f64.mul (f64.load offset=6032 (i32.const 0)) (f64.load offset=6024 (i32.const 0))))) (f64.mul (f64.load offset=5944 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6040 (i32.const 0)) (f64.load offset=6072 (i32.const 0))) (f64.mul (f64.load offset=6048 (i32.const 0)) (f64.load offset=6064 (i32.const 0)))))))
				(f64.store offset=6104 (i32.const 0) (f64.sub (f64.mul (f64.load offset=5944 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5960 (i32.const 0)) (f64.load offset=6064 (i32.const 0))) (f64.mul (f64.load offset=6080 (i32.const 0)) (f64.load offset=6056 (i32.const 0)))) (f64.mul (f64.load offset=6080 (i32.const 0)) (f64.load offset=6072 (i32.const 0))))) (f64.mul (f64.load offset=5920 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6088 (i32.const 0)) (f64.load offset=6120 (i32.const 0))) (f64.mul (f64.load offset=6096 (i32.const 0)) (f64.load offset=6112 (i32.const 0)))))))
				(f64.store offset=6136 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=6144 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=5920 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=5936 (i32.const 0)) (f64.load offset=6112 (i32.const 0))) (f64.mul (f64.load offset=6128 (i32.const 0)) (f64.load offset=6104 (i32.const 0)))) (f64.mul (f64.load offset=6128 (i32.const 0)) (f64.load offset=6120 (i32.const 0)))))))))
				(f64.store offset=6152 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=6136 (i32.const 0))))))
				(f64.store offset=6248 (i32.const 0) (f64.sub (get_local $fTemp13) (f64.mul (f64.load offset=6208 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6232 (i32.const 0)) (f64.load offset=6264 (i32.const 0))) (f64.mul (f64.load offset=6240 (i32.const 0)) (f64.load offset=6256 (i32.const 0)))))))
				(f64.store offset=6296 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6208 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6224 (i32.const 0)) (f64.load offset=6256 (i32.const 0))) (f64.mul (f64.load offset=6272 (i32.const 0)) (f64.load offset=6248 (i32.const 0)))) (f64.mul (f64.load offset=6272 (i32.const 0)) (f64.load offset=6264 (i32.const 0))))) (f64.mul (f64.load offset=6184 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6280 (i32.const 0)) (f64.load offset=6312 (i32.const 0))) (f64.mul (f64.load offset=6288 (i32.const 0)) (f64.load offset=6304 (i32.const 0)))))))
				(f64.store offset=6344 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6184 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6200 (i32.const 0)) (f64.load offset=6304 (i32.const 0))) (f64.mul (f64.load offset=6320 (i32.const 0)) (f64.load offset=6296 (i32.const 0)))) (f64.mul (f64.load offset=6320 (i32.const 0)) (f64.load offset=6312 (i32.const 0))))) (f64.mul (f64.load offset=6160 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6328 (i32.const 0)) (f64.load offset=6360 (i32.const 0))) (f64.mul (f64.load offset=6336 (i32.const 0)) (f64.load offset=6352 (i32.const 0)))))))
				(f64.store offset=6376 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=6384 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=6160 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6176 (i32.const 0)) (f64.load offset=6352 (i32.const 0))) (f64.mul (f64.load offset=6368 (i32.const 0)) (f64.load offset=6344 (i32.const 0)))) (f64.mul (f64.load offset=6368 (i32.const 0)) (f64.load offset=6360 (i32.const 0)))))))))
				(f64.store offset=6392 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=6376 (i32.const 0))))))
				(f64.store offset=6488 (i32.const 0) (f64.sub (get_local $fTemp14) (f64.mul (f64.load offset=6448 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6472 (i32.const 0)) (f64.load offset=6504 (i32.const 0))) (f64.mul (f64.load offset=6480 (i32.const 0)) (f64.load offset=6496 (i32.const 0)))))))
				(f64.store offset=6536 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6448 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6464 (i32.const 0)) (f64.load offset=6496 (i32.const 0))) (f64.mul (f64.load offset=6512 (i32.const 0)) (f64.load offset=6488 (i32.const 0)))) (f64.mul (f64.load offset=6512 (i32.const 0)) (f64.load offset=6504 (i32.const 0))))) (f64.mul (f64.load offset=6424 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6520 (i32.const 0)) (f64.load offset=6552 (i32.const 0))) (f64.mul (f64.load offset=6528 (i32.const 0)) (f64.load offset=6544 (i32.const 0)))))))
				(f64.store offset=6584 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6424 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6440 (i32.const 0)) (f64.load offset=6544 (i32.const 0))) (f64.mul (f64.load offset=6560 (i32.const 0)) (f64.load offset=6536 (i32.const 0)))) (f64.mul (f64.load offset=6560 (i32.const 0)) (f64.load offset=6552 (i32.const 0))))) (f64.mul (f64.load offset=6400 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6568 (i32.const 0)) (f64.load offset=6600 (i32.const 0))) (f64.mul (f64.load offset=6576 (i32.const 0)) (f64.load offset=6592 (i32.const 0)))))))
				(f64.store offset=6616 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=6624 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=6400 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6416 (i32.const 0)) (f64.load offset=6592 (i32.const 0))) (f64.mul (f64.load offset=6608 (i32.const 0)) (f64.load offset=6584 (i32.const 0)))) (f64.mul (f64.load offset=6608 (i32.const 0)) (f64.load offset=6600 (i32.const 0)))))))))
				(f64.store offset=6632 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=6616 (i32.const 0))))))
				(f64.store offset=6728 (i32.const 0) (f64.sub (get_local $fTemp15) (f64.mul (f64.load offset=6688 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6712 (i32.const 0)) (f64.load offset=6744 (i32.const 0))) (f64.mul (f64.load offset=6720 (i32.const 0)) (f64.load offset=6736 (i32.const 0)))))))
				(f64.store offset=6776 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6688 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6704 (i32.const 0)) (f64.load offset=6736 (i32.const 0))) (f64.mul (f64.load offset=6752 (i32.const 0)) (f64.load offset=6728 (i32.const 0)))) (f64.mul (f64.load offset=6752 (i32.const 0)) (f64.load offset=6744 (i32.const 0))))) (f64.mul (f64.load offset=6664 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6760 (i32.const 0)) (f64.load offset=6792 (i32.const 0))) (f64.mul (f64.load offset=6768 (i32.const 0)) (f64.load offset=6784 (i32.const 0)))))))
				(f64.store offset=6824 (i32.const 0) (f64.sub (f64.mul (f64.load offset=6664 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6680 (i32.const 0)) (f64.load offset=6784 (i32.const 0))) (f64.mul (f64.load offset=6800 (i32.const 0)) (f64.load offset=6776 (i32.const 0)))) (f64.mul (f64.load offset=6800 (i32.const 0)) (f64.load offset=6792 (i32.const 0))))) (f64.mul (f64.load offset=6640 (i32.const 0)) (f64.add (f64.mul (f64.load offset=6808 (i32.const 0)) (f64.load offset=6840 (i32.const 0))) (f64.mul (f64.load offset=6816 (i32.const 0)) (f64.load offset=6832 (i32.const 0)))))))
				(f64.store offset=6856 (i32.const 0) (f64.add (f64.mul (get_local $fSlow9) (f64.load offset=6864 (i32.const 0))) (f64.mul (get_local $fSlow10) (f64.abs (f64.mul (f64.load offset=6640 (i32.const 0)) (f64.add (f64.add (f64.mul (f64.load offset=6656 (i32.const 0)) (f64.load offset=6832 (i32.const 0))) (f64.mul (f64.load offset=6848 (i32.const 0)) (f64.load offset=6824 (i32.const 0)))) (f64.mul (f64.load offset=6848 (i32.const 0)) (f64.load offset=6840 (i32.const 0)))))))))
				(f64.store offset=6872 (i32.const 0) (f64.add (get_local $fSlow0) (f64.mul (f64.const 20.) (call $log10 (f64.load offset=6856 (i32.const 0))))))
				(f64.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp6))
				(f64.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp6))
				(i32.store offset=1016 (i32.const 0) (i32.load offset=1008 (i32.const 0)))
				(f64.store offset=1040 (i32.const 0) (f64.load offset=1032 (i32.const 0)))
				(f64.store offset=1088 (i32.const 0) (f64.load offset=1080 (i32.const 0)))
				(f64.store offset=1104 (i32.const 0) (f64.load offset=1096 (i32.const 0)))
				(f64.store offset=1120 (i32.const 0) (f64.load offset=1112 (i32.const 0)))
				(f64.store offset=1144 (i32.const 0) (f64.load offset=1136 (i32.const 0)))
				(f64.store offset=1168 (i32.const 0) (f64.load offset=1160 (i32.const 0)))
				(f64.store offset=1184 (i32.const 0) (f64.load offset=1176 (i32.const 0)))
				(f64.store offset=1200 (i32.const 0) (f64.load offset=1192 (i32.const 0)))
				(f64.store offset=1240 (i32.const 0) (f64.load offset=1232 (i32.const 0)))
				(f64.store offset=1232 (i32.const 0) (f64.load offset=1224 (i32.const 0)))
				(f64.store offset=1288 (i32.const 0) (f64.load offset=1280 (i32.const 0)))
				(f64.store offset=1280 (i32.const 0) (f64.load offset=1272 (i32.const 0)))
				(f64.store offset=1336 (i32.const 0) (f64.load offset=1328 (i32.const 0)))
				(f64.store offset=1328 (i32.const 0) (f64.load offset=1320 (i32.const 0)))
				(f64.store offset=1384 (i32.const 0) (f64.load offset=1376 (i32.const 0)))
				(f64.store offset=1376 (i32.const 0) (f64.load offset=1368 (i32.const 0)))
				(f64.store offset=1432 (i32.const 0) (f64.load offset=1424 (i32.const 0)))
				(f64.store offset=1424 (i32.const 0) (f64.load offset=1416 (i32.const 0)))
				(f64.store offset=1480 (i32.const 0) (f64.load offset=1472 (i32.const 0)))
				(f64.store offset=1472 (i32.const 0) (f64.load offset=1464 (i32.const 0)))
				(f64.store offset=1528 (i32.const 0) (f64.load offset=1520 (i32.const 0)))
				(f64.store offset=1520 (i32.const 0) (f64.load offset=1512 (i32.const 0)))
				(f64.store offset=1576 (i32.const 0) (f64.load offset=1568 (i32.const 0)))
				(f64.store offset=1568 (i32.const 0) (f64.load offset=1560 (i32.const 0)))
				(f64.store offset=1624 (i32.const 0) (f64.load offset=1616 (i32.const 0)))
				(f64.store offset=1616 (i32.const 0) (f64.load offset=1608 (i32.const 0)))
				(f64.store offset=1672 (i32.const 0) (f64.load offset=1664 (i32.const 0)))
				(f64.store offset=1664 (i32.const 0) (f64.load offset=1656 (i32.const 0)))
				(f64.store offset=1720 (i32.const 0) (f64.load offset=1712 (i32.const 0)))
				(f64.store offset=1712 (i32.const 0) (f64.load offset=1704 (i32.const 0)))
				(f64.store offset=1768 (i32.const 0) (f64.load offset=1760 (i32.const 0)))
				(f64.store offset=1760 (i32.const 0) (f64.load offset=1752 (i32.const 0)))
				(f64.store offset=1816 (i32.const 0) (f64.load offset=1808 (i32.const 0)))
				(f64.store offset=1808 (i32.const 0) (f64.load offset=1800 (i32.const 0)))
				(f64.store offset=1864 (i32.const 0) (f64.load offset=1856 (i32.const 0)))
				(f64.store offset=1856 (i32.const 0) (f64.load offset=1848 (i32.const 0)))
				(f64.store offset=1912 (i32.const 0) (f64.load offset=1904 (i32.const 0)))
				(f64.store offset=1904 (i32.const 0) (f64.load offset=1896 (i32.const 0)))
				(f64.store offset=1960 (i32.const 0) (f64.load offset=1952 (i32.const 0)))
				(f64.store offset=1952 (i32.const 0) (f64.load offset=1944 (i32.const 0)))
				(f64.store offset=2008 (i32.const 0) (f64.load offset=2000 (i32.const 0)))
				(f64.store offset=2000 (i32.const 0) (f64.load offset=1992 (i32.const 0)))
				(f64.store offset=2056 (i32.const 0) (f64.load offset=2048 (i32.const 0)))
				(f64.store offset=2048 (i32.const 0) (f64.load offset=2040 (i32.const 0)))
				(f64.store offset=2104 (i32.const 0) (f64.load offset=2096 (i32.const 0)))
				(f64.store offset=2096 (i32.const 0) (f64.load offset=2088 (i32.const 0)))
				(f64.store offset=2152 (i32.const 0) (f64.load offset=2144 (i32.const 0)))
				(f64.store offset=2144 (i32.const 0) (f64.load offset=2136 (i32.const 0)))
				(f64.store offset=2200 (i32.const 0) (f64.load offset=2192 (i32.const 0)))
				(f64.store offset=2192 (i32.const 0) (f64.load offset=2184 (i32.const 0)))
				(f64.store offset=2248 (i32.const 0) (f64.load offset=2240 (i32.const 0)))
				(f64.store offset=2240 (i32.const 0) (f64.load offset=2232 (i32.const 0)))
				(f64.store offset=2296 (i32.const 0) (f64.load offset=2288 (i32.const 0)))
				(f64.store offset=2288 (i32.const 0) (f64.load offset=2280 (i32.const 0)))
				(f64.store offset=2344 (i32.const 0) (f64.load offset=2336 (i32.const 0)))
				(f64.store offset=2336 (i32.const 0) (f64.load offset=2328 (i32.const 0)))
				(f64.store offset=2392 (i32.const 0) (f64.load offset=2384 (i32.const 0)))
				(f64.store offset=2384 (i32.const 0) (f64.load offset=2376 (i32.const 0)))
				(f64.store offset=2440 (i32.const 0) (f64.load offset=2432 (i32.const 0)))
				(f64.store offset=2432 (i32.const 0) (f64.load offset=2424 (i32.const 0)))
				(f64.store offset=2488 (i32.const 0) (f64.load offset=2480 (i32.const 0)))
				(f64.store offset=2480 (i32.const 0) (f64.load offset=2472 (i32.const 0)))
				(f64.store offset=2536 (i32.const 0) (f64.load offset=2528 (i32.const 0)))
				(f64.store offset=2528 (i32.const 0) (f64.load offset=2520 (i32.const 0)))
				(f64.store offset=2584 (i32.const 0) (f64.load offset=2576 (i32.const 0)))
				(f64.store offset=2576 (i32.const 0) (f64.load offset=2568 (i32.const 0)))
				(f64.store offset=2632 (i32.const 0) (f64.load offset=2624 (i32.const 0)))
				(f64.store offset=2624 (i32.const 0) (f64.load offset=2616 (i32.const 0)))
				(f64.store offset=2688 (i32.const 0) (f64.load offset=2680 (i32.const 0)))
				(f64.store offset=2680 (i32.const 0) (f64.load offset=2672 (i32.const 0)))
				(f64.store offset=2736 (i32.const 0) (f64.load offset=2728 (i32.const 0)))
				(f64.store offset=2728 (i32.const 0) (f64.load offset=2720 (i32.const 0)))
				(f64.store offset=2784 (i32.const 0) (f64.load offset=2776 (i32.const 0)))
				(f64.store offset=2776 (i32.const 0) (f64.load offset=2768 (i32.const 0)))
				(f64.store offset=2824 (i32.const 0) (f64.load offset=2816 (i32.const 0)))
				(f64.store offset=3024 (i32.const 0) (f64.load offset=3016 (i32.const 0)))
				(f64.store offset=3016 (i32.const 0) (f64.load offset=3008 (i32.const 0)))
				(f64.store offset=3072 (i32.const 0) (f64.load offset=3064 (i32.const 0)))
				(f64.store offset=3064 (i32.const 0) (f64.load offset=3056 (i32.const 0)))
				(f64.store offset=3120 (i32.const 0) (f64.load offset=3112 (i32.const 0)))
				(f64.store offset=3112 (i32.const 0) (f64.load offset=3104 (i32.const 0)))
				(f64.store offset=3176 (i32.const 0) (f64.load offset=3168 (i32.const 0)))
				(f64.store offset=3168 (i32.const 0) (f64.load offset=3160 (i32.const 0)))
				(f64.store offset=3224 (i32.const 0) (f64.load offset=3216 (i32.const 0)))
				(f64.store offset=3216 (i32.const 0) (f64.load offset=3208 (i32.const 0)))
				(f64.store offset=3272 (i32.const 0) (f64.load offset=3264 (i32.const 0)))
				(f64.store offset=3264 (i32.const 0) (f64.load offset=3256 (i32.const 0)))
				(f64.store offset=3296 (i32.const 0) (f64.load offset=3288 (i32.const 0)))
				(f64.store offset=3496 (i32.const 0) (f64.load offset=3488 (i32.const 0)))
				(f64.store offset=3488 (i32.const 0) (f64.load offset=3480 (i32.const 0)))
				(f64.store offset=3544 (i32.const 0) (f64.load offset=3536 (i32.const 0)))
				(f64.store offset=3536 (i32.const 0) (f64.load offset=3528 (i32.const 0)))
				(f64.store offset=3592 (i32.const 0) (f64.load offset=3584 (i32.const 0)))
				(f64.store offset=3584 (i32.const 0) (f64.load offset=3576 (i32.const 0)))
				(f64.store offset=3648 (i32.const 0) (f64.load offset=3640 (i32.const 0)))
				(f64.store offset=3640 (i32.const 0) (f64.load offset=3632 (i32.const 0)))
				(f64.store offset=3696 (i32.const 0) (f64.load offset=3688 (i32.const 0)))
				(f64.store offset=3688 (i32.const 0) (f64.load offset=3680 (i32.const 0)))
				(f64.store offset=3744 (i32.const 0) (f64.load offset=3736 (i32.const 0)))
				(f64.store offset=3736 (i32.const 0) (f64.load offset=3728 (i32.const 0)))
				(f64.store offset=3768 (i32.const 0) (f64.load offset=3760 (i32.const 0)))
				(f64.store offset=3968 (i32.const 0) (f64.load offset=3960 (i32.const 0)))
				(f64.store offset=3960 (i32.const 0) (f64.load offset=3952 (i32.const 0)))
				(f64.store offset=4016 (i32.const 0) (f64.load offset=4008 (i32.const 0)))
				(f64.store offset=4008 (i32.const 0) (f64.load offset=4000 (i32.const 0)))
				(f64.store offset=4064 (i32.const 0) (f64.load offset=4056 (i32.const 0)))
				(f64.store offset=4056 (i32.const 0) (f64.load offset=4048 (i32.const 0)))
				(f64.store offset=4120 (i32.const 0) (f64.load offset=4112 (i32.const 0)))
				(f64.store offset=4112 (i32.const 0) (f64.load offset=4104 (i32.const 0)))
				(f64.store offset=4168 (i32.const 0) (f64.load offset=4160 (i32.const 0)))
				(f64.store offset=4160 (i32.const 0) (f64.load offset=4152 (i32.const 0)))
				(f64.store offset=4216 (i32.const 0) (f64.load offset=4208 (i32.const 0)))
				(f64.store offset=4208 (i32.const 0) (f64.load offset=4200 (i32.const 0)))
				(f64.store offset=4240 (i32.const 0) (f64.load offset=4232 (i32.const 0)))
				(f64.store offset=4344 (i32.const 0) (f64.load offset=4336 (i32.const 0)))
				(f64.store offset=4336 (i32.const 0) (f64.load offset=4328 (i32.const 0)))
				(f64.store offset=4392 (i32.const 0) (f64.load offset=4384 (i32.const 0)))
				(f64.store offset=4384 (i32.const 0) (f64.load offset=4376 (i32.const 0)))
				(f64.store offset=4440 (i32.const 0) (f64.load offset=4432 (i32.const 0)))
				(f64.store offset=4432 (i32.const 0) (f64.load offset=4424 (i32.const 0)))
				(f64.store offset=4464 (i32.const 0) (f64.load offset=4456 (i32.const 0)))
				(f64.store offset=4584 (i32.const 0) (f64.load offset=4576 (i32.const 0)))
				(f64.store offset=4576 (i32.const 0) (f64.load offset=4568 (i32.const 0)))
				(f64.store offset=4632 (i32.const 0) (f64.load offset=4624 (i32.const 0)))
				(f64.store offset=4624 (i32.const 0) (f64.load offset=4616 (i32.const 0)))
				(f64.store offset=4680 (i32.const 0) (f64.load offset=4672 (i32.const 0)))
				(f64.store offset=4672 (i32.const 0) (f64.load offset=4664 (i32.const 0)))
				(f64.store offset=4704 (i32.const 0) (f64.load offset=4696 (i32.const 0)))
				(f64.store offset=4824 (i32.const 0) (f64.load offset=4816 (i32.const 0)))
				(f64.store offset=4816 (i32.const 0) (f64.load offset=4808 (i32.const 0)))
				(f64.store offset=4872 (i32.const 0) (f64.load offset=4864 (i32.const 0)))
				(f64.store offset=4864 (i32.const 0) (f64.load offset=4856 (i32.const 0)))
				(f64.store offset=4920 (i32.const 0) (f64.load offset=4912 (i32.const 0)))
				(f64.store offset=4912 (i32.const 0) (f64.load offset=4904 (i32.const 0)))
				(f64.store offset=4944 (i32.const 0) (f64.load offset=4936 (i32.const 0)))
				(f64.store offset=5064 (i32.const 0) (f64.load offset=5056 (i32.const 0)))
				(f64.store offset=5056 (i32.const 0) (f64.load offset=5048 (i32.const 0)))
				(f64.store offset=5112 (i32.const 0) (f64.load offset=5104 (i32.const 0)))
				(f64.store offset=5104 (i32.const 0) (f64.load offset=5096 (i32.const 0)))
				(f64.store offset=5160 (i32.const 0) (f64.load offset=5152 (i32.const 0)))
				(f64.store offset=5152 (i32.const 0) (f64.load offset=5144 (i32.const 0)))
				(f64.store offset=5184 (i32.const 0) (f64.load offset=5176 (i32.const 0)))
				(f64.store offset=5304 (i32.const 0) (f64.load offset=5296 (i32.const 0)))
				(f64.store offset=5296 (i32.const 0) (f64.load offset=5288 (i32.const 0)))
				(f64.store offset=5352 (i32.const 0) (f64.load offset=5344 (i32.const 0)))
				(f64.store offset=5344 (i32.const 0) (f64.load offset=5336 (i32.const 0)))
				(f64.store offset=5400 (i32.const 0) (f64.load offset=5392 (i32.const 0)))
				(f64.store offset=5392 (i32.const 0) (f64.load offset=5384 (i32.const 0)))
				(f64.store offset=5424 (i32.const 0) (f64.load offset=5416 (i32.const 0)))
				(f64.store offset=5544 (i32.const 0) (f64.load offset=5536 (i32.const 0)))
				(f64.store offset=5536 (i32.const 0) (f64.load offset=5528 (i32.const 0)))
				(f64.store offset=5592 (i32.const 0) (f64.load offset=5584 (i32.const 0)))
				(f64.store offset=5584 (i32.const 0) (f64.load offset=5576 (i32.const 0)))
				(f64.store offset=5640 (i32.const 0) (f64.load offset=5632 (i32.const 0)))
				(f64.store offset=5632 (i32.const 0) (f64.load offset=5624 (i32.const 0)))
				(f64.store offset=5664 (i32.const 0) (f64.load offset=5656 (i32.const 0)))
				(f64.store offset=5784 (i32.const 0) (f64.load offset=5776 (i32.const 0)))
				(f64.store offset=5776 (i32.const 0) (f64.load offset=5768 (i32.const 0)))
				(f64.store offset=5832 (i32.const 0) (f64.load offset=5824 (i32.const 0)))
				(f64.store offset=5824 (i32.const 0) (f64.load offset=5816 (i32.const 0)))
				(f64.store offset=5880 (i32.const 0) (f64.load offset=5872 (i32.const 0)))
				(f64.store offset=5872 (i32.const 0) (f64.load offset=5864 (i32.const 0)))
				(f64.store offset=5904 (i32.const 0) (f64.load offset=5896 (i32.const 0)))
				(f64.store offset=6024 (i32.const 0) (f64.load offset=6016 (i32.const 0)))
				(f64.store offset=6016 (i32.const 0) (f64.load offset=6008 (i32.const 0)))
				(f64.store offset=6072 (i32.const 0) (f64.load offset=6064 (i32.const 0)))
				(f64.store offset=6064 (i32.const 0) (f64.load offset=6056 (i32.const 0)))
				(f64.store offset=6120 (i32.const 0) (f64.load offset=6112 (i32.const 0)))
				(f64.store offset=6112 (i32.const 0) (f64.load offset=6104 (i32.const 0)))
				(f64.store offset=6144 (i32.const 0) (f64.load offset=6136 (i32.const 0)))
				(f64.store offset=6264 (i32.const 0) (f64.load offset=6256 (i32.const 0)))
				(f64.store offset=6256 (i32.const 0) (f64.load offset=6248 (i32.const 0)))
				(f64.store offset=6312 (i32.const 0) (f64.load offset=6304 (i32.const 0)))
				(f64.store offset=6304 (i32.const 0) (f64.load offset=6296 (i32.const 0)))
				(f64.store offset=6360 (i32.const 0) (f64.load offset=6352 (i32.const 0)))
				(f64.store offset=6352 (i32.const 0) (f64.load offset=6344 (i32.const 0)))
				(f64.store offset=6384 (i32.const 0) (f64.load offset=6376 (i32.const 0)))
				(f64.store offset=6504 (i32.const 0) (f64.load offset=6496 (i32.const 0)))
				(f64.store offset=6496 (i32.const 0) (f64.load offset=6488 (i32.const 0)))
				(f64.store offset=6552 (i32.const 0) (f64.load offset=6544 (i32.const 0)))
				(f64.store offset=6544 (i32.const 0) (f64.load offset=6536 (i32.const 0)))
				(f64.store offset=6600 (i32.const 0) (f64.load offset=6592 (i32.const 0)))
				(f64.store offset=6592 (i32.const 0) (f64.load offset=6584 (i32.const 0)))
				(f64.store offset=6624 (i32.const 0) (f64.load offset=6616 (i32.const 0)))
				(f64.store offset=6744 (i32.const 0) (f64.load offset=6736 (i32.const 0)))
				(f64.store offset=6736 (i32.const 0) (f64.load offset=6728 (i32.const 0)))
				(f64.store offset=6792 (i32.const 0) (f64.load offset=6784 (i32.const 0)))
				(f64.store offset=6784 (i32.const 0) (f64.load offset=6776 (i32.const 0)))
				(f64.store offset=6840 (i32.const 0) (f64.load offset=6832 (i32.const 0)))
				(f64.store offset=6832 (i32.const 0) (f64.load offset=6824 (i32.const 0)))
				(f64.store offset=6864 (i32.const 0) (f64.load offset=6856 (i32.const 0)))
				(set_local $i (i32.add (get_local $i) (i32.const 8)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 8) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
