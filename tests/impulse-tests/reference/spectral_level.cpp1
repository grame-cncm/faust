//----------------------------------------------------------
// name: "spectral_level"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	float 	fConst0KI; // step: 11
	float 	fConst1KI; // step: 13
	float 	fConst2KI; // step: 15
	float 	fConst3KI; // step: 19
	float 	fConst4KI; // step: 23
	float 	fConst5KI; // step: 28
	float 	fConst6KI; // step: 29
	float 	fConst7KI; // step: 32
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec0SEState[2]; // Copy Delay
	float 	fConst8KI; // step: 45
	float 	fConst9KI; // step: 46
	float 	fConst10KI; // step: 52
	float 	fConst11KI; // step: 63
	float 	fConst12KI; // step: 67
	float 	fConst13KI; // step: 71
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	float 	fVec5SEState[2]; // Copy Delay
	float 	fConst14KI; // step: 82
	float 	fConst15KI; // step: 83
	float 	fConst16KI; // step: 88
	float 	fConst17KI; // step: 99
	float 	fConst18KI; // step: 103
	float 	fConst19KI; // step: 107
	// Recursion delay fVec11SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec11SEState; // Single Delay
	float 	fVec10SEState[2]; // Copy Delay
	float 	fConst20KI; // step: 122
	float 	fConst21KI; // step: 126
	float 	fConst22KI; // step: 130
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	float 	fVec13SEState[2]; // Copy Delay
	float 	fConst23KI; // step: 142
	float 	fConst24KI; // step: 143
	float 	fConst25KI; // step: 148
	float 	fConst26KI; // step: 159
	float 	fConst27KI; // step: 163
	float 	fConst28KI; // step: 167
	// Recursion delay fVec19SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec19SEState; // Single Delay
	float 	fVec18SEState[2]; // Copy Delay
	float 	fConst29KI; // step: 178
	float 	fConst30KI; // step: 182
	float 	fConst31KI; // step: 193
	float 	fConst32KI; // step: 197
	float 	fConst33KI; // step: 201
	// Recursion delay fVec24SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec24SEState; // Single Delay
	float 	fVec23SEState[2]; // Copy Delay
	float 	fConst34KI; // step: 212
	float 	fConst35KI; // step: 216
	float 	fConst36KI; // step: 224
	float 	fConst37KI; // step: 225
	float 	fConst38KI; // step: 229
	float 	fConst39KI; // step: 232
	float 	fConst40KI; // step: 235
	float 	fConst41KI; // step: 236
	float 	fConst42KI; // step: 239
	// Recursion delay fVec29SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec29SEState; // Single Delay
	float 	fVec28SEState[2]; // Copy Delay
	float 	fConst43KI; // step: 249
	float 	fConst44KI; // step: 250
	float 	fConst45KI; // step: 255
	float 	fConst46KI; // step: 264
	float 	fConst47KI; // step: 267
	float 	fConst48KI; // step: 271
	// Recursion delay fVec34SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec34SEState; // Single Delay
	float 	fVec33SEState[2]; // Copy Delay
	float 	fConst49KI; // step: 281
	float 	fConst50KI; // step: 282
	float 	fConst51KI; // step: 287
	float 	fConst52KI; // step: 296
	float 	fConst53KI; // step: 299
	float 	fConst54KI; // step: 303
	// Recursion delay fVec39SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec39SEState; // Single Delay
	float 	fVec38SEState[2]; // Copy Delay
	float 	fConst55KI; // step: 316
	float 	fConst56KI; // step: 319
	float 	fConst57KI; // step: 323
	// Recursion delay fVec42SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec42SEState; // Single Delay
	float 	fVec41SEState[2]; // Copy Delay
	float 	fConst58KI; // step: 333
	float 	fConst59KI; // step: 334
	float 	fConst60KI; // step: 339
	float 	fConst61KI; // step: 348
	float 	fConst62KI; // step: 351
	float 	fConst63KI; // step: 355
	// Recursion delay fVec47SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec47SEState; // Single Delay
	float 	fVec46SEState[2]; // Copy Delay
	float 	fConst64KI; // step: 365
	float 	fConst65KI; // step: 369
	float 	fConst66KI; // step: 378
	float 	fConst67KI; // step: 381
	float 	fConst68KI; // step: 385
	// Recursion delay fVec52SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec52SEState; // Single Delay
	float 	fVec51SEState[2]; // Copy Delay
	float 	fConst69KI; // step: 395
	float 	fConst70KI; // step: 399
	float 	fConst71KI; // step: 407
	float 	fConst72KI; // step: 408
	float 	fConst73KI; // step: 412
	float 	fConst74KI; // step: 415
	float 	fConst75KI; // step: 418
	float 	fConst76KI; // step: 419
	float 	fConst77KI; // step: 422
	// Recursion delay fVec57SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec57SEState; // Single Delay
	float 	fVec56SEState[2]; // Copy Delay
	float 	fConst78KI; // step: 432
	float 	fConst79KI; // step: 433
	float 	fConst80KI; // step: 438
	float 	fConst81KI; // step: 447
	float 	fConst82KI; // step: 450
	float 	fConst83KI; // step: 454
	// Recursion delay fVec62SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec62SEState; // Single Delay
	float 	fVec61SEState[2]; // Copy Delay
	float 	fConst84KI; // step: 464
	float 	fConst85KI; // step: 465
	float 	fConst86KI; // step: 470
	float 	fConst87KI; // step: 479
	float 	fConst88KI; // step: 482
	float 	fConst89KI; // step: 486
	// Recursion delay fVec67SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec67SEState; // Single Delay
	float 	fVec66SEState[2]; // Copy Delay
	float 	fConst90KI; // step: 499
	float 	fConst91KI; // step: 502
	float 	fConst92KI; // step: 506
	// Recursion delay fVec70SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec70SEState; // Single Delay
	float 	fVec69SEState[2]; // Copy Delay
	float 	fConst93KI; // step: 516
	float 	fConst94KI; // step: 517
	float 	fConst95KI; // step: 522
	float 	fConst96KI; // step: 531
	float 	fConst97KI; // step: 534
	float 	fConst98KI; // step: 538
	// Recursion delay fVec75SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec75SEState; // Single Delay
	float 	fVec74SEState[2]; // Copy Delay
	float 	fConst99KI; // step: 548
	float 	fConst100KI; // step: 552
	float 	fConst101KI; // step: 561
	float 	fConst102KI; // step: 564
	float 	fConst103KI; // step: 568
	// Recursion delay fVec80SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec80SEState; // Single Delay
	float 	fVec79SEState[2]; // Copy Delay
	float 	fConst104KI; // step: 578
	float 	fConst105KI; // step: 582
	float 	fConst106KI; // step: 590
	float 	fConst107KI; // step: 591
	float 	fConst108KI; // step: 595
	float 	fConst109KI; // step: 598
	float 	fConst110KI; // step: 601
	float 	fConst111KI; // step: 602
	float 	fConst112KI; // step: 605
	// Recursion delay fVec85SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec85SEState; // Single Delay
	float 	fVec84SEState[2]; // Copy Delay
	float 	fConst113KI; // step: 615
	float 	fConst114KI; // step: 616
	float 	fConst115KI; // step: 621
	float 	fConst116KI; // step: 630
	float 	fConst117KI; // step: 633
	float 	fConst118KI; // step: 637
	// Recursion delay fVec90SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec90SEState; // Single Delay
	float 	fVec89SEState[2]; // Copy Delay
	float 	fConst119KI; // step: 647
	float 	fConst120KI; // step: 648
	float 	fConst121KI; // step: 653
	float 	fConst122KI; // step: 662
	float 	fConst123KI; // step: 665
	float 	fConst124KI; // step: 669
	// Recursion delay fVec95SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec95SEState; // Single Delay
	float 	fVec94SEState[2]; // Copy Delay
	float 	fConst125KI; // step: 682
	float 	fConst126KI; // step: 685
	float 	fConst127KI; // step: 689
	// Recursion delay fVec98SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec98SEState; // Single Delay
	float 	fVec97SEState[2]; // Copy Delay
	float 	fConst128KI; // step: 699
	float 	fConst129KI; // step: 700
	float 	fConst130KI; // step: 705
	float 	fConst131KI; // step: 714
	float 	fConst132KI; // step: 717
	float 	fConst133KI; // step: 721
	// Recursion delay fVec103SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec103SEState; // Single Delay
	float 	fVec102SEState[2]; // Copy Delay
	float 	fConst134KI; // step: 731
	float 	fConst135KI; // step: 735
	float 	fConst136KI; // step: 744
	float 	fConst137KI; // step: 747
	float 	fConst138KI; // step: 751
	// Recursion delay fVec108SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec108SEState; // Single Delay
	float 	fVec107SEState[2]; // Copy Delay
	float 	fConst139KI; // step: 761
	float 	fConst140KI; // step: 765
	float 	fConst141KI; // step: 773
	float 	fConst142KI; // step: 774
	float 	fConst143KI; // step: 778
	float 	fConst144KI; // step: 781
	float 	fConst145KI; // step: 784
	float 	fConst146KI; // step: 785
	float 	fConst147KI; // step: 788
	// Recursion delay fVec113SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec113SEState; // Single Delay
	float 	fVec112SEState[2]; // Copy Delay
	float 	fConst148KI; // step: 798
	float 	fConst149KI; // step: 799
	float 	fConst150KI; // step: 804
	float 	fConst151KI; // step: 813
	float 	fConst152KI; // step: 816
	float 	fConst153KI; // step: 820
	// Recursion delay fVec118SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec118SEState; // Single Delay
	float 	fVec117SEState[2]; // Copy Delay
	float 	fConst154KI; // step: 830
	float 	fConst155KI; // step: 831
	float 	fConst156KI; // step: 836
	float 	fConst157KI; // step: 845
	float 	fConst158KI; // step: 848
	float 	fConst159KI; // step: 852
	// Recursion delay fVec123SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec123SEState; // Single Delay
	float 	fVec122SEState[2]; // Copy Delay
	float 	fConst160KI; // step: 865
	float 	fConst161KI; // step: 868
	float 	fConst162KI; // step: 872
	// Recursion delay fVec126SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec126SEState; // Single Delay
	float 	fVec125SEState[2]; // Copy Delay
	float 	fConst163KI; // step: 882
	float 	fConst164KI; // step: 883
	float 	fConst165KI; // step: 888
	float 	fConst166KI; // step: 897
	float 	fConst167KI; // step: 900
	float 	fConst168KI; // step: 904
	// Recursion delay fVec131SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec131SEState; // Single Delay
	float 	fVec130SEState[2]; // Copy Delay
	float 	fConst169KI; // step: 914
	float 	fConst170KI; // step: 918
	float 	fConst171KI; // step: 927
	float 	fConst172KI; // step: 930
	float 	fConst173KI; // step: 934
	// Recursion delay fVec136SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec136SEState; // Single Delay
	float 	fVec135SEState[2]; // Copy Delay
	float 	fConst174KI; // step: 944
	float 	fConst175KI; // step: 948
	float 	fConst176KI; // step: 956
	float 	fConst177KI; // step: 957
	float 	fConst178KI; // step: 961
	float 	fConst179KI; // step: 964
	float 	fConst180KI; // step: 967
	float 	fConst181KI; // step: 968
	float 	fConst182KI; // step: 971
	// Recursion delay fVec141SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec141SEState; // Single Delay
	float 	fVec140SEState[2]; // Copy Delay
	float 	fConst183KI; // step: 981
	float 	fConst184KI; // step: 982
	float 	fConst185KI; // step: 987
	float 	fConst186KI; // step: 996
	float 	fConst187KI; // step: 999
	float 	fConst188KI; // step: 1003
	// Recursion delay fVec146SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec146SEState; // Single Delay
	float 	fVec145SEState[2]; // Copy Delay
	float 	fConst189KI; // step: 1013
	float 	fConst190KI; // step: 1014
	float 	fConst191KI; // step: 1019
	float 	fConst192KI; // step: 1028
	float 	fConst193KI; // step: 1031
	float 	fConst194KI; // step: 1035
	// Recursion delay fVec151SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec151SEState; // Single Delay
	float 	fVec150SEState[2]; // Copy Delay
	float 	fConst195KI; // step: 1048
	float 	fConst196KI; // step: 1051
	float 	fConst197KI; // step: 1055
	// Recursion delay fVec154SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec154SEState; // Single Delay
	float 	fVec153SEState[2]; // Copy Delay
	float 	fConst198KI; // step: 1065
	float 	fConst199KI; // step: 1066
	float 	fConst200KI; // step: 1071
	float 	fConst201KI; // step: 1080
	float 	fConst202KI; // step: 1083
	float 	fConst203KI; // step: 1087
	// Recursion delay fVec159SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec159SEState; // Single Delay
	float 	fVec158SEState[2]; // Copy Delay
	float 	fConst204KI; // step: 1097
	float 	fConst205KI; // step: 1101
	float 	fConst206KI; // step: 1110
	float 	fConst207KI; // step: 1113
	float 	fConst208KI; // step: 1117
	// Recursion delay fVec164SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec164SEState; // Single Delay
	float 	fVec163SEState[2]; // Copy Delay
	float 	fConst209KI; // step: 1127
	float 	fConst210KI; // step: 1131
	float 	fConst211KI; // step: 1139
	float 	fConst212KI; // step: 1140
	float 	fConst213KI; // step: 1144
	float 	fConst214KI; // step: 1147
	float 	fConst215KI; // step: 1150
	float 	fConst216KI; // step: 1151
	float 	fConst217KI; // step: 1154
	// Recursion delay fVec169SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec169SEState; // Single Delay
	float 	fVec168SEState[2]; // Copy Delay
	float 	fConst218KI; // step: 1164
	float 	fConst219KI; // step: 1165
	float 	fConst220KI; // step: 1170
	float 	fConst221KI; // step: 1179
	float 	fConst222KI; // step: 1182
	float 	fConst223KI; // step: 1186
	// Recursion delay fVec174SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec174SEState; // Single Delay
	float 	fVec173SEState[2]; // Copy Delay
	float 	fConst224KI; // step: 1196
	float 	fConst225KI; // step: 1197
	float 	fConst226KI; // step: 1202
	float 	fConst227KI; // step: 1211
	float 	fConst228KI; // step: 1214
	float 	fConst229KI; // step: 1218
	// Recursion delay fVec179SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec179SEState; // Single Delay
	float 	fVec178SEState[2]; // Copy Delay
	float 	fConst230KI; // step: 1231
	float 	fConst231KI; // step: 1234
	float 	fConst232KI; // step: 1238
	// Recursion delay fVec182SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec182SEState; // Single Delay
	float 	fVec181SEState[2]; // Copy Delay
	float 	fConst233KI; // step: 1248
	float 	fConst234KI; // step: 1249
	float 	fConst235KI; // step: 1254
	float 	fConst236KI; // step: 1263
	float 	fConst237KI; // step: 1266
	float 	fConst238KI; // step: 1270
	// Recursion delay fVec187SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec187SEState; // Single Delay
	float 	fVec186SEState[2]; // Copy Delay
	float 	fConst239KI; // step: 1280
	float 	fConst240KI; // step: 1284
	float 	fConst241KI; // step: 1293
	float 	fConst242KI; // step: 1296
	float 	fConst243KI; // step: 1300
	// Recursion delay fVec192SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec192SEState; // Single Delay
	float 	fVec191SEState[2]; // Copy Delay
	float 	fConst244KI; // step: 1310
	float 	fConst245KI; // step: 1314
	float 	fConst246KI; // step: 1322
	float 	fConst247KI; // step: 1323
	float 	fConst248KI; // step: 1327
	float 	fConst249KI; // step: 1330
	float 	fConst250KI; // step: 1333
	float 	fConst251KI; // step: 1334
	float 	fConst252KI; // step: 1337
	// Recursion delay fVec197SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec197SEState; // Single Delay
	float 	fVec196SEState[2]; // Copy Delay
	float 	fConst253KI; // step: 1347
	float 	fConst254KI; // step: 1348
	float 	fConst255KI; // step: 1353
	float 	fConst256KI; // step: 1362
	float 	fConst257KI; // step: 1365
	float 	fConst258KI; // step: 1369
	// Recursion delay fVec202SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec202SEState; // Single Delay
	float 	fVec201SEState[2]; // Copy Delay
	float 	fConst259KI; // step: 1379
	float 	fConst260KI; // step: 1380
	float 	fConst261KI; // step: 1385
	float 	fConst262KI; // step: 1394
	float 	fConst263KI; // step: 1397
	float 	fConst264KI; // step: 1401
	// Recursion delay fVec207SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec207SEState; // Single Delay
	float 	fVec206SEState[2]; // Copy Delay
	float 	fConst265KI; // step: 1414
	float 	fConst266KI; // step: 1417
	float 	fConst267KI; // step: 1421
	// Recursion delay fVec210SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec210SEState; // Single Delay
	float 	fVec209SEState[2]; // Copy Delay
	float 	fConst268KI; // step: 1431
	float 	fConst269KI; // step: 1432
	float 	fConst270KI; // step: 1437
	float 	fConst271KI; // step: 1446
	float 	fConst272KI; // step: 1449
	float 	fConst273KI; // step: 1453
	// Recursion delay fVec215SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec215SEState; // Single Delay
	float 	fVec214SEState[2]; // Copy Delay
	float 	fConst274KI; // step: 1463
	float 	fConst275KI; // step: 1467
	float 	fConst276KI; // step: 1476
	float 	fConst277KI; // step: 1479
	float 	fConst278KI; // step: 1483
	// Recursion delay fVec220SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec220SEState; // Single Delay
	float 	fVec219SEState[2]; // Copy Delay
	float 	fConst279KI; // step: 1493
	float 	fConst280KI; // step: 1497
	float 	fConst281KI; // step: 1505
	float 	fConst282KI; // step: 1506
	float 	fConst283KI; // step: 1510
	float 	fConst284KI; // step: 1513
	float 	fConst285KI; // step: 1516
	float 	fConst286KI; // step: 1517
	float 	fConst287KI; // step: 1520
	// Recursion delay fVec225SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec225SEState; // Single Delay
	float 	fVec224SEState[2]; // Copy Delay
	float 	fConst288KI; // step: 1530
	float 	fConst289KI; // step: 1531
	float 	fConst290KI; // step: 1536
	float 	fConst291KI; // step: 1545
	float 	fConst292KI; // step: 1548
	float 	fConst293KI; // step: 1552
	// Recursion delay fVec230SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec230SEState; // Single Delay
	float 	fVec229SEState[2]; // Copy Delay
	float 	fConst294KI; // step: 1562
	float 	fConst295KI; // step: 1563
	float 	fConst296KI; // step: 1568
	float 	fConst297KI; // step: 1577
	float 	fConst298KI; // step: 1580
	float 	fConst299KI; // step: 1584
	// Recursion delay fVec235SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec235SEState; // Single Delay
	float 	fVec234SEState[2]; // Copy Delay
	float 	fConst300KI; // step: 1597
	float 	fConst301KI; // step: 1600
	float 	fConst302KI; // step: 1604
	// Recursion delay fVec238SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec238SEState; // Single Delay
	float 	fVec237SEState[2]; // Copy Delay
	float 	fConst303KI; // step: 1614
	float 	fConst304KI; // step: 1615
	float 	fConst305KI; // step: 1620
	float 	fConst306KI; // step: 1629
	float 	fConst307KI; // step: 1632
	float 	fConst308KI; // step: 1636
	// Recursion delay fVec243SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec243SEState; // Single Delay
	float 	fVec242SEState[2]; // Copy Delay
	float 	fConst309KI; // step: 1646
	float 	fConst310KI; // step: 1650
	float 	fConst311KI; // step: 1659
	float 	fConst312KI; // step: 1662
	float 	fConst313KI; // step: 1666
	// Recursion delay fVec248SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec248SEState; // Single Delay
	float 	fVec247SEState[2]; // Copy Delay
	float 	fConst314KI; // step: 1676
	float 	fConst315KI; // step: 1680
	float 	fConst316KI; // step: 1688
	float 	fConst317KI; // step: 1689
	float 	fConst318KI; // step: 1693
	float 	fConst319KI; // step: 1696
	float 	fConst320KI; // step: 1699
	float 	fConst321KI; // step: 1700
	float 	fConst322KI; // step: 1703
	// Recursion delay fVec253SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec253SEState; // Single Delay
	float 	fVec252SEState[2]; // Copy Delay
	float 	fConst323KI; // step: 1713
	float 	fConst324KI; // step: 1714
	float 	fConst325KI; // step: 1719
	float 	fConst326KI; // step: 1728
	float 	fConst327KI; // step: 1731
	float 	fConst328KI; // step: 1735
	// Recursion delay fVec258SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec258SEState; // Single Delay
	float 	fVec257SEState[2]; // Copy Delay
	float 	fConst329KI; // step: 1745
	float 	fConst330KI; // step: 1746
	float 	fConst331KI; // step: 1751
	float 	fConst332KI; // step: 1760
	float 	fConst333KI; // step: 1763
	float 	fConst334KI; // step: 1767
	// Recursion delay fVec263SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec263SEState; // Single Delay
	float 	fVec262SEState[2]; // Copy Delay
	float 	fConst335KI; // step: 1780
	float 	fConst336KI; // step: 1783
	float 	fConst337KI; // step: 1787
	// Recursion delay fVec266SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec266SEState; // Single Delay
	float 	fVec265SEState[2]; // Copy Delay
	float 	fConst338KI; // step: 1797
	float 	fConst339KI; // step: 1798
	float 	fConst340KI; // step: 1803
	float 	fConst341KI; // step: 1812
	float 	fConst342KI; // step: 1815
	float 	fConst343KI; // step: 1819
	// Recursion delay fVec271SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec271SEState; // Single Delay
	float 	fVec270SEState[2]; // Copy Delay
	float 	fConst344KI; // step: 1829
	float 	fConst345KI; // step: 1833
	float 	fConst346KI; // step: 1842
	float 	fConst347KI; // step: 1845
	float 	fConst348KI; // step: 1849
	// Recursion delay fVec276SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec276SEState; // Single Delay
	float 	fVec275SEState[2]; // Copy Delay
	float 	fConst349KI; // step: 1859
	float 	fConst350KI; // step: 1863
	float 	fConst351KI; // step: 1871
	float 	fConst352KI; // step: 1872
	float 	fConst353KI; // step: 1876
	float 	fConst354KI; // step: 1879
	float 	fConst355KI; // step: 1882
	float 	fConst356KI; // step: 1883
	float 	fConst357KI; // step: 1886
	// Recursion delay fVec281SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec281SEState; // Single Delay
	float 	fVec280SEState[2]; // Copy Delay
	float 	fConst358KI; // step: 1896
	float 	fConst359KI; // step: 1897
	float 	fConst360KI; // step: 1902
	float 	fConst361KI; // step: 1911
	float 	fConst362KI; // step: 1914
	float 	fConst363KI; // step: 1918
	// Recursion delay fVec286SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec286SEState; // Single Delay
	float 	fVec285SEState[2]; // Copy Delay
	float 	fConst364KI; // step: 1928
	float 	fConst365KI; // step: 1929
	float 	fConst366KI; // step: 1934
	float 	fConst367KI; // step: 1943
	float 	fConst368KI; // step: 1946
	float 	fConst369KI; // step: 1950
	// Recursion delay fVec291SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec291SEState; // Single Delay
	float 	fVec290SEState[2]; // Copy Delay
	float 	fConst370KI; // step: 1963
	float 	fConst371KI; // step: 1966
	float 	fConst372KI; // step: 1970
	// Recursion delay fVec294SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec294SEState; // Single Delay
	float 	fVec293SEState[2]; // Copy Delay
	float 	fConst373KI; // step: 1980
	float 	fConst374KI; // step: 1981
	float 	fConst375KI; // step: 1986
	float 	fConst376KI; // step: 1995
	float 	fConst377KI; // step: 1998
	float 	fConst378KI; // step: 2002
	// Recursion delay fVec299SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec299SEState; // Single Delay
	float 	fVec298SEState[2]; // Copy Delay
	float 	fConst379KI; // step: 2012
	float 	fConst380KI; // step: 2016
	float 	fConst381KI; // step: 2025
	float 	fConst382KI; // step: 2028
	float 	fConst383KI; // step: 2032
	// Recursion delay fVec304SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec304SEState; // Single Delay
	float 	fVec303SEState[2]; // Copy Delay
	float 	fConst384KI; // step: 2042
	float 	fConst385KI; // step: 2046
	float 	fConst386KI; // step: 2054
	float 	fConst387KI; // step: 2055
	float 	fConst388KI; // step: 2059
	float 	fConst389KI; // step: 2062
	float 	fConst390KI; // step: 2065
	float 	fConst391KI; // step: 2066
	float 	fConst392KI; // step: 2069
	// Recursion delay fVec309SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec309SEState; // Single Delay
	float 	fVec308SEState[2]; // Copy Delay
	float 	fConst393KI; // step: 2079
	float 	fConst394KI; // step: 2080
	float 	fConst395KI; // step: 2085
	float 	fConst396KI; // step: 2094
	float 	fConst397KI; // step: 2097
	float 	fConst398KI; // step: 2101
	// Recursion delay fVec314SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec314SEState; // Single Delay
	float 	fVec313SEState[2]; // Copy Delay
	float 	fConst399KI; // step: 2111
	float 	fConst400KI; // step: 2112
	float 	fConst401KI; // step: 2117
	float 	fConst402KI; // step: 2126
	float 	fConst403KI; // step: 2129
	float 	fConst404KI; // step: 2133
	// Recursion delay fVec319SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec319SEState; // Single Delay
	float 	fVec318SEState[2]; // Copy Delay
	float 	fConst405KI; // step: 2146
	float 	fConst406KI; // step: 2149
	float 	fConst407KI; // step: 2153
	// Recursion delay fVec322SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec322SEState; // Single Delay
	float 	fVec321SEState[2]; // Copy Delay
	float 	fConst408KI; // step: 2163
	float 	fConst409KI; // step: 2164
	float 	fConst410KI; // step: 2169
	float 	fConst411KI; // step: 2178
	float 	fConst412KI; // step: 2181
	float 	fConst413KI; // step: 2185
	// Recursion delay fVec327SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec327SEState; // Single Delay
	float 	fVec326SEState[2]; // Copy Delay
	float 	fConst414KI; // step: 2195
	float 	fConst415KI; // step: 2199
	float 	fConst416KI; // step: 2208
	float 	fConst417KI; // step: 2211
	float 	fConst418KI; // step: 2215
	// Recursion delay fVec332SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec332SEState; // Single Delay
	float 	fVec331SEState[2]; // Copy Delay
	float 	fConst419KI; // step: 2225
	float 	fConst420KI; // step: 2229
	float 	fConst421KI; // step: 2237
	float 	fConst422KI; // step: 2238
	float 	fConst423KI; // step: 2242
	float 	fConst424KI; // step: 2245
	float 	fConst425KI; // step: 2248
	float 	fConst426KI; // step: 2249
	float 	fConst427KI; // step: 2252
	// Recursion delay fVec337SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec337SEState; // Single Delay
	float 	fVec336SEState[2]; // Copy Delay
	float 	fConst428KI; // step: 2262
	float 	fConst429KI; // step: 2263
	float 	fConst430KI; // step: 2268
	float 	fConst431KI; // step: 2277
	float 	fConst432KI; // step: 2280
	float 	fConst433KI; // step: 2284
	// Recursion delay fVec342SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec342SEState; // Single Delay
	float 	fVec341SEState[2]; // Copy Delay
	float 	fConst434KI; // step: 2294
	float 	fConst435KI; // step: 2295
	float 	fConst436KI; // step: 2300
	float 	fConst437KI; // step: 2309
	float 	fConst438KI; // step: 2312
	float 	fConst439KI; // step: 2316
	// Recursion delay fVec347SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec347SEState; // Single Delay
	float 	fVec346SEState[2]; // Copy Delay
	float 	fConst440KI; // step: 2329
	float 	fConst441KI; // step: 2332
	float 	fConst442KI; // step: 2336
	// Recursion delay fVec350SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec350SEState; // Single Delay
	float 	fVec349SEState[2]; // Copy Delay
	float 	fConst443KI; // step: 2346
	float 	fConst444KI; // step: 2347
	float 	fConst445KI; // step: 2352
	float 	fConst446KI; // step: 2361
	float 	fConst447KI; // step: 2364
	float 	fConst448KI; // step: 2368
	// Recursion delay fVec355SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec355SEState; // Single Delay
	float 	fVec354SEState[2]; // Copy Delay
	float 	fConst449KI; // step: 2378
	float 	fConst450KI; // step: 2382
	float 	fConst451KI; // step: 2391
	float 	fConst452KI; // step: 2394
	float 	fConst453KI; // step: 2398
	// Recursion delay fVec360SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec360SEState; // Single Delay
	float 	fVec359SEState[2]; // Copy Delay
	float 	fConst454KI; // step: 2408
	float 	fConst455KI; // step: 2412
	float 	fConst456KI; // step: 2420
	float 	fConst457KI; // step: 2421
	float 	fConst458KI; // step: 2425
	float 	fConst459KI; // step: 2428
	float 	fConst460KI; // step: 2431
	float 	fConst461KI; // step: 2432
	float 	fConst462KI; // step: 2435
	// Recursion delay fVec365SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec365SEState; // Single Delay
	float 	fVec364SEState[2]; // Copy Delay
	float 	fConst463KI; // step: 2445
	float 	fConst464KI; // step: 2446
	float 	fConst465KI; // step: 2451
	float 	fConst466KI; // step: 2460
	float 	fConst467KI; // step: 2463
	float 	fConst468KI; // step: 2467
	// Recursion delay fVec370SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec370SEState; // Single Delay
	float 	fVec369SEState[2]; // Copy Delay
	float 	fConst469KI; // step: 2477
	float 	fConst470KI; // step: 2478
	float 	fConst471KI; // step: 2483
	float 	fConst472KI; // step: 2492
	float 	fConst473KI; // step: 2495
	float 	fConst474KI; // step: 2499
	// Recursion delay fVec375SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec375SEState; // Single Delay
	float 	fVec374SEState[2]; // Copy Delay
	float 	fConst475KI; // step: 2512
	float 	fConst476KI; // step: 2515
	float 	fConst477KI; // step: 2519
	// Recursion delay fVec378SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec378SEState; // Single Delay
	float 	fVec377SEState[2]; // Copy Delay
	float 	fConst478KI; // step: 2529
	float 	fConst479KI; // step: 2530
	float 	fConst480KI; // step: 2535
	float 	fConst481KI; // step: 2544
	float 	fConst482KI; // step: 2547
	float 	fConst483KI; // step: 2551
	// Recursion delay fVec383SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec383SEState; // Single Delay
	float 	fVec382SEState[2]; // Copy Delay
	float 	fConst484KI; // step: 2561
	float 	fConst485KI; // step: 2565
	float 	fConst486KI; // step: 2574
	float 	fConst487KI; // step: 2577
	float 	fConst488KI; // step: 2581
	// Recursion delay fVec388SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec388SEState; // Single Delay
	float 	fVec387SEState[2]; // Copy Delay
	float 	fConst489KI; // step: 2591
	float 	fConst490KI; // step: 2595
	float 	fConst491KI; // step: 2603
	float 	fConst492KI; // step: 2604
	float 	fConst493KI; // step: 2608
	float 	fConst494KI; // step: 2611
	float 	fConst495KI; // step: 2614
	float 	fConst496KI; // step: 2615
	float 	fConst497KI; // step: 2618
	// Recursion delay fVec393SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec393SEState; // Single Delay
	float 	fVec392SEState[2]; // Copy Delay
	float 	fConst498KI; // step: 2628
	float 	fConst499KI; // step: 2629
	float 	fConst500KI; // step: 2634
	float 	fConst501KI; // step: 2643
	float 	fConst502KI; // step: 2646
	float 	fConst503KI; // step: 2650
	// Recursion delay fVec398SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec398SEState; // Single Delay
	float 	fVec397SEState[2]; // Copy Delay
	float 	fConst504KI; // step: 2660
	float 	fConst505KI; // step: 2661
	float 	fConst506KI; // step: 2666
	float 	fConst507KI; // step: 2675
	float 	fConst508KI; // step: 2678
	float 	fConst509KI; // step: 2682
	// Recursion delay fVec403SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec403SEState; // Single Delay
	float 	fVec402SEState[2]; // Copy Delay
	float 	fConst510KI; // step: 2695
	float 	fConst511KI; // step: 2698
	float 	fConst512KI; // step: 2702
	// Recursion delay fVec406SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec406SEState; // Single Delay
	float 	fVec405SEState[2]; // Copy Delay
	float 	fConst513KI; // step: 2712
	float 	fConst514KI; // step: 2713
	float 	fConst515KI; // step: 2718
	float 	fConst516KI; // step: 2727
	float 	fConst517KI; // step: 2730
	float 	fConst518KI; // step: 2734
	// Recursion delay fVec411SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec411SEState; // Single Delay
	float 	fVec410SEState[2]; // Copy Delay
	float 	fConst519KI; // step: 2744
	float 	fConst520KI; // step: 2748
	float 	fConst521KI; // step: 2757
	float 	fConst522KI; // step: 2760
	float 	fConst523KI; // step: 2764
	// Recursion delay fVec416SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec416SEState; // Single Delay
	float 	fVec415SEState[2]; // Copy Delay
	float 	fConst524KI; // step: 2774
	float 	fConst525KI; // step: 2778
	float 	fConst526KI; // step: 2786
	float 	fConst527KI; // step: 2787
	float 	fConst528KI; // step: 2791
	float 	fConst529KI; // step: 2794
	float 	fConst530KI; // step: 2797
	float 	fConst531KI; // step: 2798
	float 	fConst532KI; // step: 2801
	// Recursion delay fVec421SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec421SEState; // Single Delay
	float 	fVec420SEState[2]; // Copy Delay
	float 	fConst533KI; // step: 2811
	float 	fConst534KI; // step: 2812
	float 	fConst535KI; // step: 2817
	float 	fConst536KI; // step: 2826
	float 	fConst537KI; // step: 2829
	float 	fConst538KI; // step: 2833
	// Recursion delay fVec426SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec426SEState; // Single Delay
	float 	fVec425SEState[2]; // Copy Delay
	float 	fConst539KI; // step: 2843
	float 	fConst540KI; // step: 2844
	float 	fConst541KI; // step: 2849
	float 	fConst542KI; // step: 2858
	float 	fConst543KI; // step: 2861
	float 	fConst544KI; // step: 2865
	// Recursion delay fVec431SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec431SEState; // Single Delay
	float 	fVec430SEState[2]; // Copy Delay
	float 	fConst545KI; // step: 2878
	float 	fConst546KI; // step: 2881
	float 	fConst547KI; // step: 2885
	// Recursion delay fVec434SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec434SEState; // Single Delay
	float 	fVec433SEState[2]; // Copy Delay
	float 	fConst548KI; // step: 2895
	float 	fConst549KI; // step: 2896
	float 	fConst550KI; // step: 2901
	float 	fConst551KI; // step: 2910
	float 	fConst552KI; // step: 2913
	float 	fConst553KI; // step: 2917
	// Recursion delay fVec439SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec439SEState; // Single Delay
	float 	fVec438SEState[2]; // Copy Delay
	float 	fConst554KI; // step: 2927
	float 	fConst555KI; // step: 2931
	float 	fConst556KI; // step: 2940
	float 	fConst557KI; // step: 2943
	float 	fConst558KI; // step: 2947
	// Recursion delay fVec444SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec444SEState; // Single Delay
	float 	fVec443SEState[2]; // Copy Delay
	float 	fConst559KI; // step: 2957
	float 	fConst560KI; // step: 2961
	float 	fConst561KI; // step: 2969
	float 	fConst562KI; // step: 2970
	float 	fConst563KI; // step: 2974
	float 	fConst564KI; // step: 2977
	float 	fConst565KI; // step: 2980
	float 	fConst566KI; // step: 2981
	float 	fConst567KI; // step: 2984
	// Recursion delay fVec449SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec449SEState; // Single Delay
	float 	fVec448SEState[2]; // Copy Delay
	float 	fConst568KI; // step: 2994
	float 	fConst569KI; // step: 2995
	float 	fConst570KI; // step: 3000
	float 	fConst571KI; // step: 3009
	float 	fConst572KI; // step: 3012
	float 	fConst573KI; // step: 3016
	// Recursion delay fVec454SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec454SEState; // Single Delay
	float 	fVec453SEState[2]; // Copy Delay
	float 	fConst574KI; // step: 3026
	float 	fConst575KI; // step: 3027
	float 	fConst576KI; // step: 3032
	float 	fConst577KI; // step: 3041
	float 	fConst578KI; // step: 3044
	float 	fConst579KI; // step: 3048
	// Recursion delay fVec459SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec459SEState; // Single Delay
	float 	fVec458SEState[2]; // Copy Delay
	float 	fConst580KI; // step: 3061
	float 	fConst581KI; // step: 3064
	float 	fConst582KI; // step: 3068
	// Recursion delay fVec462SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec462SEState; // Single Delay
	float 	fVec461SEState[2]; // Copy Delay
	float 	fConst583KI; // step: 3078
	float 	fConst584KI; // step: 3079
	float 	fConst585KI; // step: 3084
	float 	fConst586KI; // step: 3093
	float 	fConst587KI; // step: 3096
	float 	fConst588KI; // step: 3100
	// Recursion delay fVec467SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec467SEState; // Single Delay
	float 	fVec466SEState[2]; // Copy Delay
	float 	fConst589KI; // step: 3110
	float 	fConst590KI; // step: 3114
	float 	fConst591KI; // step: 3123
	float 	fConst592KI; // step: 3126
	float 	fConst593KI; // step: 3130
	// Recursion delay fVec472SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec472SEState; // Single Delay
	float 	fVec471SEState[2]; // Copy Delay
	float 	fConst594KI; // step: 3140
	float 	fConst595KI; // step: 3144
	float 	fConst596KI; // step: 3152
	float 	fConst597KI; // step: 3153
	float 	fConst598KI; // step: 3157
	float 	fConst599KI; // step: 3160
	float 	fConst600KI; // step: 3163
	float 	fConst601KI; // step: 3164
	float 	fConst602KI; // step: 3167
	// Recursion delay fVec477SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec477SEState; // Single Delay
	float 	fVec476SEState[2]; // Copy Delay
	float 	fConst603KI; // step: 3177
	float 	fConst604KI; // step: 3178
	float 	fConst605KI; // step: 3183
	float 	fConst606KI; // step: 3192
	float 	fConst607KI; // step: 3195
	float 	fConst608KI; // step: 3199
	// Recursion delay fVec482SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec482SEState; // Single Delay
	float 	fVec481SEState[2]; // Copy Delay
	float 	fConst609KI; // step: 3209
	float 	fConst610KI; // step: 3210
	float 	fConst611KI; // step: 3215
	float 	fConst612KI; // step: 3224
	float 	fConst613KI; // step: 3227
	float 	fConst614KI; // step: 3231
	// Recursion delay fVec487SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec487SEState; // Single Delay
	float 	fVec486SEState[2]; // Copy Delay
	float 	fConst615KI; // step: 3244
	float 	fConst616KI; // step: 3247
	float 	fConst617KI; // step: 3251
	// Recursion delay fVec490SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec490SEState; // Single Delay
	float 	fVec489SEState[2]; // Copy Delay
	float 	fConst618KI; // step: 3261
	float 	fConst619KI; // step: 3262
	float 	fConst620KI; // step: 3267
	float 	fConst621KI; // step: 3276
	float 	fConst622KI; // step: 3279
	float 	fConst623KI; // step: 3283
	// Recursion delay fVec495SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec495SEState; // Single Delay
	float 	fVec494SEState[2]; // Copy Delay
	float 	fConst624KI; // step: 3293
	float 	fConst625KI; // step: 3297
	float 	fConst626KI; // step: 3306
	float 	fConst627KI; // step: 3309
	float 	fConst628KI; // step: 3313
	// Recursion delay fVec500SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec500SEState; // Single Delay
	float 	fVec499SEState[2]; // Copy Delay
	float 	fConst629KI; // step: 3323
	float 	fConst630KI; // step: 3327
	float 	fConst631KI; // step: 3335
	float 	fConst632KI; // step: 3336
	float 	fConst633KI; // step: 3340
	float 	fConst634KI; // step: 3343
	float 	fConst635KI; // step: 3346
	float 	fConst636KI; // step: 3347
	float 	fConst637KI; // step: 3350
	// Recursion delay fVec505SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec505SEState; // Single Delay
	float 	fVec504SEState[2]; // Copy Delay
	float 	fConst638KI; // step: 3360
	float 	fConst639KI; // step: 3361
	float 	fConst640KI; // step: 3366
	float 	fConst641KI; // step: 3375
	float 	fConst642KI; // step: 3378
	float 	fConst643KI; // step: 3382
	// Recursion delay fVec510SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec510SEState; // Single Delay
	float 	fVec509SEState[2]; // Copy Delay
	float 	fConst644KI; // step: 3392
	float 	fConst645KI; // step: 3393
	float 	fConst646KI; // step: 3398
	float 	fConst647KI; // step: 3407
	float 	fConst648KI; // step: 3410
	float 	fConst649KI; // step: 3414
	// Recursion delay fVec515SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec515SEState; // Single Delay
	float 	fVec514SEState[2]; // Copy Delay
	float 	fConst650KI; // step: 3427
	float 	fConst651KI; // step: 3430
	float 	fConst652KI; // step: 3434
	// Recursion delay fVec518SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec518SEState; // Single Delay
	float 	fVec517SEState[2]; // Copy Delay
	float 	fConst653KI; // step: 3444
	float 	fConst654KI; // step: 3445
	float 	fConst655KI; // step: 3450
	float 	fConst656KI; // step: 3459
	float 	fConst657KI; // step: 3462
	float 	fConst658KI; // step: 3466
	// Recursion delay fVec523SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec523SEState; // Single Delay
	float 	fVec522SEState[2]; // Copy Delay
	float 	fConst659KI; // step: 3476
	float 	fConst660KI; // step: 3480
	float 	fConst661KI; // step: 3489
	float 	fConst662KI; // step: 3492
	float 	fConst663KI; // step: 3496
	// Recursion delay fVec528SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec528SEState; // Single Delay
	float 	fVec527SEState[2]; // Copy Delay
	float 	fConst664KI; // step: 3506
	float 	fConst665KI; // step: 3510
	float 	fConst666KI; // step: 3518
	float 	fConst667KI; // step: 3519
	float 	fConst668KI; // step: 3523
	float 	fConst669KI; // step: 3526
	float 	fConst670KI; // step: 3529
	float 	fConst671KI; // step: 3530
	float 	fConst672KI; // step: 3533
	// Recursion delay fVec533SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec533SEState; // Single Delay
	float 	fVec532SEState[2]; // Copy Delay
	float 	fConst673KI; // step: 3543
	float 	fConst674KI; // step: 3544
	float 	fConst675KI; // step: 3549
	float 	fConst676KI; // step: 3558
	float 	fConst677KI; // step: 3561
	float 	fConst678KI; // step: 3565
	// Recursion delay fVec538SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec538SEState; // Single Delay
	float 	fVec537SEState[2]; // Copy Delay
	float 	fConst679KI; // step: 3575
	float 	fConst680KI; // step: 3576
	float 	fConst681KI; // step: 3581
	float 	fConst682KI; // step: 3590
	float 	fConst683KI; // step: 3593
	float 	fConst684KI; // step: 3597
	// Recursion delay fVec543SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec543SEState; // Single Delay
	float 	fVec542SEState[2]; // Copy Delay
	float 	fConst685KI; // step: 3610
	float 	fConst686KI; // step: 3613
	float 	fConst687KI; // step: 3617
	// Recursion delay fVec546SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec546SEState; // Single Delay
	float 	fVec545SEState[2]; // Copy Delay
	float 	fConst688KI; // step: 3627
	float 	fConst689KI; // step: 3628
	float 	fConst690KI; // step: 3633
	float 	fConst691KI; // step: 3642
	float 	fConst692KI; // step: 3645
	float 	fConst693KI; // step: 3649
	// Recursion delay fVec551SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec551SEState; // Single Delay
	float 	fVec550SEState[2]; // Copy Delay
	float 	fConst694KI; // step: 3659
	float 	fConst695KI; // step: 3663
	float 	fConst696KI; // step: 3672
	float 	fConst697KI; // step: 3675
	float 	fConst698KI; // step: 3679
	// Recursion delay fVec556SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec556SEState; // Single Delay
	float 	fVec555SEState[2]; // Copy Delay
	float 	fConst699KI; // step: 3689
	float 	fConst700KI; // step: 3693
	float 	fConst701KI; // step: 3701
	float 	fConst702KI; // step: 3702
	float 	fConst703KI; // step: 3706
	float 	fConst704KI; // step: 3709
	float 	fConst705KI; // step: 3712
	float 	fConst706KI; // step: 3713
	float 	fConst707KI; // step: 3716
	// Recursion delay fVec561SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec561SEState; // Single Delay
	float 	fVec560SEState[2]; // Copy Delay
	float 	fConst708KI; // step: 3726
	float 	fConst709KI; // step: 3727
	float 	fConst710KI; // step: 3732
	float 	fConst711KI; // step: 3741
	float 	fConst712KI; // step: 3744
	float 	fConst713KI; // step: 3748
	// Recursion delay fVec566SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec566SEState; // Single Delay
	float 	fVec565SEState[2]; // Copy Delay
	float 	fConst714KI; // step: 3758
	float 	fConst715KI; // step: 3759
	float 	fConst716KI; // step: 3764
	float 	fConst717KI; // step: 3773
	float 	fConst718KI; // step: 3776
	float 	fConst719KI; // step: 3780
	// Recursion delay fVec571SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec571SEState; // Single Delay
	float 	fVec570SEState[2]; // Copy Delay
	float 	fConst720KI; // step: 3793
	float 	fConst721KI; // step: 3796
	float 	fConst722KI; // step: 3800
	// Recursion delay fVec574SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec574SEState; // Single Delay
	float 	fVec573SEState[2]; // Copy Delay
	float 	fConst723KI; // step: 3810
	float 	fConst724KI; // step: 3811
	float 	fConst725KI; // step: 3816
	float 	fConst726KI; // step: 3825
	float 	fConst727KI; // step: 3828
	float 	fConst728KI; // step: 3832
	// Recursion delay fVec579SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec579SEState; // Single Delay
	float 	fVec578SEState[2]; // Copy Delay
	float 	fConst729KI; // step: 3842
	float 	fConst730KI; // step: 3846
	float 	fConst731KI; // step: 3855
	float 	fConst732KI; // step: 3858
	float 	fConst733KI; // step: 3862
	// Recursion delay fVec584SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec584SEState; // Single Delay
	float 	fVec583SEState[2]; // Copy Delay
	float 	fConst734KI; // step: 3872
	float 	fConst735KI; // step: 3876
	float 	fConst736KI; // step: 3884
	float 	fConst737KI; // step: 3885
	float 	fConst738KI; // step: 3889
	float 	fConst739KI; // step: 3892
	float 	fConst740KI; // step: 3895
	float 	fConst741KI; // step: 3896
	float 	fConst742KI; // step: 3899
	// Recursion delay fVec589SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec589SEState; // Single Delay
	float 	fVec588SEState[2]; // Copy Delay
	float 	fConst743KI; // step: 3909
	float 	fConst744KI; // step: 3910
	float 	fConst745KI; // step: 3915
	float 	fConst746KI; // step: 3924
	float 	fConst747KI; // step: 3927
	float 	fConst748KI; // step: 3931
	// Recursion delay fVec594SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec594SEState; // Single Delay
	float 	fVec593SEState[2]; // Copy Delay
	float 	fConst749KI; // step: 3941
	float 	fConst750KI; // step: 3942
	float 	fConst751KI; // step: 3947
	float 	fConst752KI; // step: 3956
	float 	fConst753KI; // step: 3959
	float 	fConst754KI; // step: 3963
	// Recursion delay fVec599SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec599SEState; // Single Delay
	float 	fVec598SEState[2]; // Copy Delay
	float 	fConst755KI; // step: 3976
	float 	fConst756KI; // step: 3979
	float 	fConst757KI; // step: 3983
	// Recursion delay fVec602SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec602SEState; // Single Delay
	float 	fVec601SEState[2]; // Copy Delay
	float 	fConst758KI; // step: 3993
	float 	fConst759KI; // step: 3994
	float 	fConst760KI; // step: 3999
	float 	fConst761KI; // step: 4008
	float 	fConst762KI; // step: 4011
	float 	fConst763KI; // step: 4015
	// Recursion delay fVec607SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec607SEState; // Single Delay
	float 	fVec606SEState[2]; // Copy Delay
	float 	fConst764KI; // step: 4025
	float 	fConst765KI; // step: 4029
	float 	fConst766KI; // step: 4038
	float 	fConst767KI; // step: 4041
	float 	fConst768KI; // step: 4045
	// Recursion delay fVec612SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec612SEState; // Single Delay
	float 	fVec611SEState[2]; // Copy Delay
	float 	fConst769KI; // step: 4055
	float 	fConst770KI; // step: 4059
	float 	fConst771KI; // step: 4067
	float 	fConst772KI; // step: 4068
	float 	fConst773KI; // step: 4072
	float 	fConst774KI; // step: 4075
	float 	fConst775KI; // step: 4078
	float 	fConst776KI; // step: 4079
	float 	fConst777KI; // step: 4082
	// Recursion delay fVec617SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec617SEState; // Single Delay
	float 	fVec616SEState[2]; // Copy Delay
	float 	fConst778KI; // step: 4092
	float 	fConst779KI; // step: 4093
	float 	fConst780KI; // step: 4098
	float 	fConst781KI; // step: 4107
	float 	fConst782KI; // step: 4110
	float 	fConst783KI; // step: 4114
	// Recursion delay fVec622SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec622SEState; // Single Delay
	float 	fVec621SEState[2]; // Copy Delay
	float 	fConst784KI; // step: 4124
	float 	fConst785KI; // step: 4125
	float 	fConst786KI; // step: 4130
	float 	fConst787KI; // step: 4139
	float 	fConst788KI; // step: 4142
	float 	fConst789KI; // step: 4146
	// Recursion delay fVec627SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec627SEState; // Single Delay
	float 	fVec626SEState[2]; // Copy Delay
	float 	fConst790KI; // step: 4159
	float 	fConst791KI; // step: 4162
	float 	fConst792KI; // step: 4166
	// Recursion delay fVec630SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec630SEState; // Single Delay
	float 	fVec629SEState[2]; // Copy Delay
	float 	fConst793KI; // step: 4176
	float 	fConst794KI; // step: 4177
	float 	fConst795KI; // step: 4182
	float 	fConst796KI; // step: 4191
	float 	fConst797KI; // step: 4194
	float 	fConst798KI; // step: 4198
	// Recursion delay fVec635SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec635SEState; // Single Delay
	float 	fVec634SEState[2]; // Copy Delay
	float 	fConst799KI; // step: 4208
	float 	fConst800KI; // step: 4212
	float 	fConst801KI; // step: 4221
	float 	fConst802KI; // step: 4224
	float 	fConst803KI; // step: 4228
	// Recursion delay fVec640SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec640SEState; // Single Delay
	float 	fVec639SEState[2]; // Copy Delay
	float 	fConst804KI; // step: 4238
	float 	fConst805KI; // step: 4242
	float 	fConst806KI; // step: 4250
	float 	fConst807KI; // step: 4251
	float 	fConst808KI; // step: 4255
	float 	fConst809KI; // step: 4258
	float 	fConst810KI; // step: 4261
	float 	fConst811KI; // step: 4262
	float 	fConst812KI; // step: 4265
	// Recursion delay fVec645SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec645SEState; // Single Delay
	float 	fVec644SEState[2]; // Copy Delay
	float 	fConst813KI; // step: 4275
	float 	fConst814KI; // step: 4276
	float 	fConst815KI; // step: 4281
	float 	fConst816KI; // step: 4290
	float 	fConst817KI; // step: 4293
	float 	fConst818KI; // step: 4297
	// Recursion delay fVec650SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec650SEState; // Single Delay
	float 	fVec649SEState[2]; // Copy Delay
	float 	fConst819KI; // step: 4307
	float 	fConst820KI; // step: 4308
	float 	fConst821KI; // step: 4313
	float 	fConst822KI; // step: 4322
	float 	fConst823KI; // step: 4325
	float 	fConst824KI; // step: 4329
	// Recursion delay fVec655SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec655SEState; // Single Delay
	float 	fVec654SEState[2]; // Copy Delay
	float 	fConst825KI; // step: 4342
	float 	fConst826KI; // step: 4345
	float 	fConst827KI; // step: 4349
	// Recursion delay fVec658SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec658SEState; // Single Delay
	float 	fVec657SEState[2]; // Copy Delay
	float 	fConst828KI; // step: 4359
	float 	fConst829KI; // step: 4360
	float 	fConst830KI; // step: 4365
	float 	fConst831KI; // step: 4374
	float 	fConst832KI; // step: 4377
	float 	fConst833KI; // step: 4381
	// Recursion delay fVec663SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec663SEState; // Single Delay
	float 	fVec662SEState[2]; // Copy Delay
	float 	fConst834KI; // step: 4391
	float 	fConst835KI; // step: 4395
	float 	fConst836KI; // step: 4404
	float 	fConst837KI; // step: 4407
	float 	fConst838KI; // step: 4411
	// Recursion delay fVec668SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec668SEState; // Single Delay
	float 	fVec667SEState[2]; // Copy Delay
	float 	fConst839KI; // step: 4421
	float 	fConst840KI; // step: 4425
	float 	fConst841KI; // step: 4433
	float 	fConst842KI; // step: 4434
	float 	fConst843KI; // step: 4438
	float 	fConst844KI; // step: 4441
	float 	fConst845KI; // step: 4444
	float 	fConst846KI; // step: 4445
	float 	fConst847KI; // step: 4448
	// Recursion delay fVec673SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec673SEState; // Single Delay
	float 	fVec672SEState[2]; // Copy Delay
	float 	fConst848KI; // step: 4458
	float 	fConst849KI; // step: 4459
	float 	fConst850KI; // step: 4464
	float 	fConst851KI; // step: 4473
	float 	fConst852KI; // step: 4476
	float 	fConst853KI; // step: 4480
	// Recursion delay fVec678SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec678SEState; // Single Delay
	float 	fVec677SEState[2]; // Copy Delay
	float 	fConst854KI; // step: 4490
	float 	fConst855KI; // step: 4491
	float 	fConst856KI; // step: 4496
	float 	fConst857KI; // step: 4505
	float 	fConst858KI; // step: 4508
	float 	fConst859KI; // step: 4512
	// Recursion delay fVec683SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec683SEState; // Single Delay
	float 	fVec682SEState[2]; // Copy Delay
	float 	fConst860KI; // step: 4525
	float 	fConst861KI; // step: 4528
	float 	fConst862KI; // step: 4532
	// Recursion delay fVec686SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec686SEState; // Single Delay
	float 	fVec685SEState[2]; // Copy Delay
	float 	fConst863KI; // step: 4542
	float 	fConst864KI; // step: 4543
	float 	fConst865KI; // step: 4548
	float 	fConst866KI; // step: 4557
	float 	fConst867KI; // step: 4560
	float 	fConst868KI; // step: 4564
	// Recursion delay fVec691SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec691SEState; // Single Delay
	float 	fVec690SEState[2]; // Copy Delay
	float 	fConst869KI; // step: 4574
	float 	fConst870KI; // step: 4578
	float 	fConst871KI; // step: 4587
	float 	fConst872KI; // step: 4590
	float 	fConst873KI; // step: 4594
	// Recursion delay fVec696SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec696SEState; // Single Delay
	float 	fVec695SEState[2]; // Copy Delay
	float 	fConst874KI; // step: 4604
	float 	fConst875KI; // step: 4608
	float 	fConst876KI; // step: 4616
	float 	fConst877KI; // step: 4617
	float 	fConst878KI; // step: 4621
	float 	fConst879KI; // step: 4624
	float 	fConst880KI; // step: 4627
	float 	fConst881KI; // step: 4628
	float 	fConst882KI; // step: 4631
	// Recursion delay fVec701SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec701SEState; // Single Delay
	float 	fVec700SEState[2]; // Copy Delay
	float 	fConst883KI; // step: 4641
	float 	fConst884KI; // step: 4642
	float 	fConst885KI; // step: 4647
	float 	fConst886KI; // step: 4656
	float 	fConst887KI; // step: 4659
	float 	fConst888KI; // step: 4663
	// Recursion delay fVec706SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec706SEState; // Single Delay
	float 	fVec705SEState[2]; // Copy Delay
	float 	fConst889KI; // step: 4673
	float 	fConst890KI; // step: 4674
	float 	fConst891KI; // step: 4679
	float 	fConst892KI; // step: 4688
	float 	fConst893KI; // step: 4691
	float 	fConst894KI; // step: 4695
	// Recursion delay fVec711SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec711SEState; // Single Delay
	float 	fVec710SEState[2]; // Copy Delay
	float 	fConst895KI; // step: 4708
	float 	fConst896KI; // step: 4711
	float 	fConst897KI; // step: 4715
	// Recursion delay fVec714SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec714SEState; // Single Delay
	float 	fVec713SEState[2]; // Copy Delay
	float 	fConst898KI; // step: 4725
	float 	fConst899KI; // step: 4726
	float 	fConst900KI; // step: 4731
	float 	fConst901KI; // step: 4740
	float 	fConst902KI; // step: 4743
	float 	fConst903KI; // step: 4747
	// Recursion delay fVec719SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec719SEState; // Single Delay
	float 	fVec718SEState[2]; // Copy Delay
	float 	fConst904KI; // step: 4757
	float 	fConst905KI; // step: 4761
	float 	fConst906KI; // step: 4770
	float 	fConst907KI; // step: 4773
	float 	fConst908KI; // step: 4777
	// Recursion delay fVec724SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec724SEState; // Single Delay
	float 	fVec723SEState[2]; // Copy Delay
	float 	fConst909KI; // step: 4787
	float 	fConst910KI; // step: 4791
	float 	fConst911KI; // step: 4799
	float 	fConst912KI; // step: 4800
	float 	fConst913KI; // step: 4804
	float 	fConst914KI; // step: 4807
	float 	fConst915KI; // step: 4810
	float 	fConst916KI; // step: 4811
	float 	fConst917KI; // step: 4814
	// Recursion delay fVec729SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec729SEState; // Single Delay
	float 	fVec728SEState[2]; // Copy Delay
	float 	fConst918KI; // step: 4824
	float 	fConst919KI; // step: 4825
	float 	fConst920KI; // step: 4830
	float 	fConst921KI; // step: 4839
	float 	fConst922KI; // step: 4842
	float 	fConst923KI; // step: 4846
	// Recursion delay fVec734SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec734SEState; // Single Delay
	float 	fVec733SEState[2]; // Copy Delay
	float 	fConst924KI; // step: 4856
	float 	fConst925KI; // step: 4857
	float 	fConst926KI; // step: 4862
	float 	fConst927KI; // step: 4871
	float 	fConst928KI; // step: 4874
	float 	fConst929KI; // step: 4878
	// Recursion delay fVec739SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec739SEState; // Single Delay
	float 	fVec738SEState[2]; // Copy Delay
	float 	fConst930KI; // step: 4891
	float 	fConst931KI; // step: 4894
	float 	fConst932KI; // step: 4898
	// Recursion delay fVec742SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec742SEState; // Single Delay
	float 	fVec741SEState[2]; // Copy Delay
	float 	fConst933KI; // step: 4908
	float 	fConst934KI; // step: 4909
	float 	fConst935KI; // step: 4914
	float 	fConst936KI; // step: 4923
	float 	fConst937KI; // step: 4926
	float 	fConst938KI; // step: 4930
	// Recursion delay fVec747SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec747SEState; // Single Delay
	float 	fVec746SEState[2]; // Copy Delay
	float 	fConst939KI; // step: 4940
	float 	fConst940KI; // step: 4944
	float 	fConst941KI; // step: 4953
	float 	fConst942KI; // step: 4956
	float 	fConst943KI; // step: 4960
	// Recursion delay fVec752SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec752SEState; // Single Delay
	float 	fVec751SEState[2]; // Copy Delay
	float 	fConst944KI; // step: 4970
	float 	fConst945KI; // step: 4974
	float 	fConst946KI; // step: 4982
	float 	fConst947KI; // step: 4983
	float 	fConst948KI; // step: 4987
	float 	fConst949KI; // step: 4990
	float 	fConst950KI; // step: 4993
	float 	fConst951KI; // step: 4994
	float 	fConst952KI; // step: 4997
	// Recursion delay fVec757SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec757SEState; // Single Delay
	float 	fVec756SEState[2]; // Copy Delay
	float 	fConst953KI; // step: 5007
	float 	fConst954KI; // step: 5008
	float 	fConst955KI; // step: 5013
	float 	fConst956KI; // step: 5022
	float 	fConst957KI; // step: 5025
	float 	fConst958KI; // step: 5029
	// Recursion delay fVec762SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec762SEState; // Single Delay
	float 	fVec761SEState[2]; // Copy Delay
	float 	fConst959KI; // step: 5039
	float 	fConst960KI; // step: 5040
	float 	fConst961KI; // step: 5045
	float 	fConst962KI; // step: 5054
	float 	fConst963KI; // step: 5057
	float 	fConst964KI; // step: 5061
	// Recursion delay fVec767SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec767SEState; // Single Delay
	float 	fVec766SEState[2]; // Copy Delay
	float 	fConst965KI; // step: 5074
	float 	fConst966KI; // step: 5077
	float 	fConst967KI; // step: 5081
	// Recursion delay fVec770SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec770SEState; // Single Delay
	float 	fVec769SEState[2]; // Copy Delay
	float 	fConst968KI; // step: 5091
	float 	fConst969KI; // step: 5092
	float 	fConst970KI; // step: 5097
	float 	fConst971KI; // step: 5106
	float 	fConst972KI; // step: 5109
	float 	fConst973KI; // step: 5113
	// Recursion delay fVec775SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec775SEState; // Single Delay
	float 	fVec774SEState[2]; // Copy Delay
	float 	fConst974KI; // step: 5123
	float 	fConst975KI; // step: 5127
	float 	fConst976KI; // step: 5136
	float 	fConst977KI; // step: 5139
	float 	fConst978KI; // step: 5143
	// Recursion delay fVec780SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec780SEState; // Single Delay
	float 	fVec779SEState[2]; // Copy Delay
	float 	fConst979KI; // step: 5153
	float 	fConst980KI; // step: 5157
	float 	fConst981KI; // step: 5165
	float 	fConst982KI; // step: 5166
	float 	fConst983KI; // step: 5170
	float 	fConst984KI; // step: 5173
	float 	fConst985KI; // step: 5176
	float 	fConst986KI; // step: 5177
	float 	fConst987KI; // step: 5180
	// Recursion delay fVec785SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec785SEState; // Single Delay
	float 	fVec784SEState[2]; // Copy Delay
	float 	fConst988KI; // step: 5190
	float 	fConst989KI; // step: 5191
	float 	fConst990KI; // step: 5196
	float 	fConst991KI; // step: 5205
	float 	fConst992KI; // step: 5208
	float 	fConst993KI; // step: 5212
	// Recursion delay fVec790SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec790SEState; // Single Delay
	float 	fVec789SEState[2]; // Copy Delay
	float 	fConst994KI; // step: 5222
	float 	fConst995KI; // step: 5223
	float 	fConst996KI; // step: 5228
	float 	fConst997KI; // step: 5237
	float 	fConst998KI; // step: 5240
	float 	fConst999KI; // step: 5244
	// Recursion delay fVec795SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec795SEState; // Single Delay
	float 	fVec794SEState[2]; // Copy Delay
	float 	fConst1000KI; // step: 5257
	float 	fConst1001KI; // step: 5260
	float 	fConst1002KI; // step: 5264
	// Recursion delay fVec798SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec798SEState; // Single Delay
	float 	fVec797SEState[2]; // Copy Delay
	float 	fConst1003KI; // step: 5274
	float 	fConst1004KI; // step: 5275
	float 	fConst1005KI; // step: 5280
	float 	fConst1006KI; // step: 5289
	float 	fConst1007KI; // step: 5292
	float 	fConst1008KI; // step: 5296
	// Recursion delay fVec803SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec803SEState; // Single Delay
	float 	fVec802SEState[2]; // Copy Delay
	float 	fConst1009KI; // step: 5306
	float 	fConst1010KI; // step: 5310
	float 	fConst1011KI; // step: 5319
	float 	fConst1012KI; // step: 5322
	float 	fConst1013KI; // step: 5326
	// Recursion delay fVec808SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec808SEState; // Single Delay
	float 	fVec807SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fConst1014KI; // step: 5347
	float 	fConst1015KI; // step: 5356
	float 	fConst1016KI; // step: 5357
	float 	fConst1017KI; // step: 5362
	// Recursion delay fVec810SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec810SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst1018KI; // step: 5385
	float 	fConst1019KI; // step: 5386
	float 	fConst1020KI; // step: 5391
	// Recursion delay fVec814SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec814SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst1021KI; // step: 5410
	float 	fConst1022KI; // step: 5411
	float 	fConst1023KI; // step: 5416
	// Recursion delay fVec818SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec818SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst1024KI; // step: 5435
	float 	fConst1025KI; // step: 5436
	float 	fConst1026KI; // step: 5441
	// Recursion delay fVec822SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec822SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst1027KI; // step: 5460
	float 	fConst1028KI; // step: 5461
	float 	fConst1029KI; // step: 5466
	// Recursion delay fVec826SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec826SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst1030KI; // step: 5485
	float 	fConst1031KI; // step: 5486
	float 	fConst1032KI; // step: 5491
	// Recursion delay fVec830SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec830SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst1033KI; // step: 5510
	float 	fConst1034KI; // step: 5511
	float 	fConst1035KI; // step: 5516
	// Recursion delay fVec834SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec834SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst1036KI; // step: 5535
	float 	fConst1037KI; // step: 5536
	float 	fConst1038KI; // step: 5541
	// Recursion delay fVec838SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec838SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst1039KI; // step: 5560
	float 	fConst1040KI; // step: 5561
	float 	fConst1041KI; // step: 5566
	// Recursion delay fVec842SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec842SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst1042KI; // step: 5585
	float 	fConst1043KI; // step: 5586
	float 	fConst1044KI; // step: 5591
	// Recursion delay fVec846SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec846SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst1045KI; // step: 5610
	float 	fConst1046KI; // step: 5611
	float 	fConst1047KI; // step: 5616
	// Recursion delay fVec850SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec850SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst1048KI; // step: 5635
	float 	fConst1049KI; // step: 5636
	float 	fConst1050KI; // step: 5641
	// Recursion delay fVec854SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec854SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst1051KI; // step: 5660
	float 	fConst1052KI; // step: 5661
	float 	fConst1053KI; // step: 5666
	// Recursion delay fVec858SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec858SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst1054KI; // step: 5685
	float 	fConst1055KI; // step: 5686
	float 	fConst1056KI; // step: 5691
	// Recursion delay fVec862SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec862SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst1057KI; // step: 5710
	float 	fConst1058KI; // step: 5711
	float 	fConst1059KI; // step: 5716
	// Recursion delay fVec866SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec866SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst1060KI; // step: 5735
	float 	fConst1061KI; // step: 5736
	float 	fConst1062KI; // step: 5741
	// Recursion delay fVec870SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec870SEState; // Single Delay
	FAUSTFLOAT 	fbargraph15;
	float 	fConst1063KI; // step: 5760
	float 	fConst1064KI; // step: 5761
	float 	fConst1065KI; // step: 5766
	// Recursion delay fVec874SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec874SEState; // Single Delay
	FAUSTFLOAT 	fbargraph16;
	float 	fConst1066KI; // step: 5785
	float 	fConst1067KI; // step: 5786
	float 	fConst1068KI; // step: 5791
	// Recursion delay fVec878SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec878SEState; // Single Delay
	FAUSTFLOAT 	fbargraph17;
	float 	fConst1069KI; // step: 5810
	float 	fConst1070KI; // step: 5811
	float 	fConst1071KI; // step: 5816
	// Recursion delay fVec882SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec882SEState; // Single Delay
	FAUSTFLOAT 	fbargraph18;
	float 	fConst1072KI; // step: 5835
	float 	fConst1073KI; // step: 5836
	float 	fConst1074KI; // step: 5841
	// Recursion delay fVec886SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec886SEState; // Single Delay
	FAUSTFLOAT 	fbargraph19;
	float 	fConst1075KI; // step: 5860
	float 	fConst1076KI; // step: 5861
	float 	fConst1077KI; // step: 5866
	// Recursion delay fVec890SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec890SEState; // Single Delay
	FAUSTFLOAT 	fbargraph20;
	float 	fConst1078KI; // step: 5885
	float 	fConst1079KI; // step: 5886
	float 	fConst1080KI; // step: 5891
	// Recursion delay fVec894SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec894SEState; // Single Delay
	FAUSTFLOAT 	fbargraph21;
	float 	fConst1081KI; // step: 5910
	float 	fConst1082KI; // step: 5911
	float 	fConst1083KI; // step: 5916
	// Recursion delay fVec898SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec898SEState; // Single Delay
	FAUSTFLOAT 	fbargraph22;
	float 	fConst1084KI; // step: 5935
	float 	fConst1085KI; // step: 5936
	float 	fConst1086KI; // step: 5941
	// Recursion delay fVec902SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec902SEState; // Single Delay
	FAUSTFLOAT 	fbargraph23;
	float 	fConst1087KI; // step: 5960
	float 	fConst1088KI; // step: 5961
	float 	fConst1089KI; // step: 5966
	// Recursion delay fVec906SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec906SEState; // Single Delay
	FAUSTFLOAT 	fbargraph24;
	float 	fConst1090KI; // step: 5985
	float 	fConst1091KI; // step: 5986
	float 	fConst1092KI; // step: 5991
	// Recursion delay fVec910SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec910SEState; // Single Delay
	FAUSTFLOAT 	fbargraph25;
	float 	fConst1093KI; // step: 6010
	float 	fConst1094KI; // step: 6011
	float 	fConst1095KI; // step: 6016
	// Recursion delay fVec914SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec914SEState; // Single Delay
	FAUSTFLOAT 	fbargraph26;
	float 	fConst1096KI; // step: 6035
	float 	fConst1097KI; // step: 6036
	float 	fConst1098KI; // step: 6041
	// Recursion delay fVec918SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec918SEState; // Single Delay
	FAUSTFLOAT 	fbargraph27;
	float 	fConst1099KI; // step: 6060
	float 	fConst1100KI; // step: 6061
	float 	fConst1101KI; // step: 6066
	// Recursion delay fVec922SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec922SEState; // Single Delay
	FAUSTFLOAT 	fbargraph28;
	float 	fConst1102KI; // step: 6085
	float 	fConst1103KI; // step: 6089
	// Recursion delay fVec926SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec926SEState; // Single Delay
	FAUSTFLOAT 	fbargraph29;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "spectral_level.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "spectral_level");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 11
		fConst1KI = tanf((50265.484f / fConst0KI)); // step: 13
		fConst2KI = (1.0f / fConst1KI); // step: 15
		fConst3KI = (1.0f / (((fConst2KI + 3.1897273f /* Sum */) / fConst1KI) + 4.0767817f /* Sum */)); // step: 19
		fConst4KI = (((fConst2KI + -3.1897273f /* Sum */) / fConst1KI) + 4.0767817f /* Sum */); // step: 23
		fConst5KI = powf(fConst1KI,2.0f); // step: 28
		fConst6KI = (1.0f / fConst5KI); // step: 29
		fConst7KI = (2.0f * (4.0767817f + -fConst6KI /* Sum */)); // step: 32
		fConst8KI = (0.0017661728f / fConst5KI); // step: 45
		fConst9KI = (fConst8KI + 0.0004076782f /* Sum */); // step: 46
		fConst10KI = (2.0f * (0.0004076782f + -fConst8KI /* Sum */)); // step: 52
		fConst11KI = (1.0f / (((fConst2KI + 0.74313045f /* Sum */) / fConst1KI) + 1.4500711f /* Sum */)); // step: 63
		fConst12KI = (((fConst2KI + -0.74313045f /* Sum */) / fConst1KI) + 1.4500711f /* Sum */); // step: 67
		fConst13KI = (2.0f * (1.4500711f + -fConst6KI /* Sum */)); // step: 71
		fConst14KI = (11.0520525f / fConst5KI); // step: 82
		fConst15KI = (fConst14KI + 1.4500711f /* Sum */); // step: 83
		fConst16KI = (2.0f * (1.4500711f + -fConst14KI /* Sum */)); // step: 88
		fConst17KI = (1.0f / (((fConst2KI + 0.15748216f /* Sum */) / fConst1KI) + 0.9351402f /* Sum */)); // step: 99
		fConst18KI = (((fConst2KI + -0.15748216f /* Sum */) / fConst1KI) + 0.9351402f /* Sum */); // step: 103
		fConst19KI = (2.0f * (0.9351402f + -fConst6KI /* Sum */)); // step: 107
		fConst20KI = (1.0f / (((fConst2KI + 0.78241307f /* Sum */) / fConst1KI) + 0.2452915f /* Sum */)); // step: 122
		fConst21KI = (((fConst2KI + -0.78241307f /* Sum */) / fConst1KI) + 0.2452915f /* Sum */); // step: 126
		fConst22KI = (2.0f * (0.2452915f + -fConst6KI /* Sum */)); // step: 130
		fConst23KI = (0.0001f / fConst5KI); // step: 142
		fConst24KI = (fConst23KI + 0.0004332272f /* Sum */); // step: 143
		fConst25KI = (2.0f * (0.0004332272f + -fConst23KI /* Sum */)); // step: 148
		fConst26KI = (1.0f / (((fConst2KI + 0.51247865f /* Sum */) / fConst1KI) + 0.6896214f /* Sum */)); // step: 159
		fConst27KI = (((fConst2KI + -0.51247865f /* Sum */) / fConst1KI) + 0.6896214f /* Sum */); // step: 163
		fConst28KI = (2.0f * (0.6896214f + -fConst6KI /* Sum */)); // step: 167
		fConst29KI = (fConst6KI + 7.6217313f /* Sum */); // step: 178
		fConst30KI = (2.0f * (7.6217313f + -fConst6KI /* Sum */)); // step: 182
		fConst31KI = (1.0f / (((fConst2KI + 0.16840488f /* Sum */) / fConst1KI) + 1.0693583f /* Sum */)); // step: 193
		fConst32KI = (((fConst2KI + -0.16840488f /* Sum */) / fConst1KI) + 1.0693583f /* Sum */); // step: 197
		fConst33KI = (2.0f * (1.0693583f + -fConst6KI /* Sum */)); // step: 201
		fConst34KI = (fConst6KI + 53.53615f /* Sum */); // step: 212
		fConst35KI = (2.0f * (53.53615f + -fConst6KI /* Sum */)); // step: 216
		fConst36KI = tanf((39895.74f / fConst0KI)); // step: 224
		fConst37KI = (1.0f / fConst36KI); // step: 225
		fConst38KI = (1.0f / (((fConst37KI + 3.1897273f /* Sum */) / fConst36KI) + 4.0767817f /* Sum */)); // step: 229
		fConst39KI = (((fConst37KI + -3.1897273f /* Sum */) / fConst36KI) + 4.0767817f /* Sum */); // step: 232
		fConst40KI = powf(fConst36KI,2.0f); // step: 235
		fConst41KI = (1.0f / fConst40KI); // step: 236
		fConst42KI = (2.0f * (4.0767817f + -fConst41KI /* Sum */)); // step: 239
		fConst43KI = (0.0017661728f / fConst40KI); // step: 249
		fConst44KI = (fConst43KI + 0.0004076782f /* Sum */); // step: 250
		fConst45KI = (2.0f * (0.0004076782f + -fConst43KI /* Sum */)); // step: 255
		fConst46KI = (1.0f / (((fConst37KI + 0.74313045f /* Sum */) / fConst36KI) + 1.4500711f /* Sum */)); // step: 264
		fConst47KI = (((fConst37KI + -0.74313045f /* Sum */) / fConst36KI) + 1.4500711f /* Sum */); // step: 267
		fConst48KI = (2.0f * (1.4500711f + -fConst41KI /* Sum */)); // step: 271
		fConst49KI = (11.0520525f / fConst40KI); // step: 281
		fConst50KI = (fConst49KI + 1.4500711f /* Sum */); // step: 282
		fConst51KI = (2.0f * (1.4500711f + -fConst49KI /* Sum */)); // step: 287
		fConst52KI = (1.0f / (((fConst37KI + 0.15748216f /* Sum */) / fConst36KI) + 0.9351402f /* Sum */)); // step: 296
		fConst53KI = (((fConst37KI + -0.15748216f /* Sum */) / fConst36KI) + 0.9351402f /* Sum */); // step: 299
		fConst54KI = (2.0f * (0.9351402f + -fConst41KI /* Sum */)); // step: 303
		fConst55KI = (1.0f / (((fConst37KI + 0.78241307f /* Sum */) / fConst36KI) + 0.2452915f /* Sum */)); // step: 316
		fConst56KI = (((fConst37KI + -0.78241307f /* Sum */) / fConst36KI) + 0.2452915f /* Sum */); // step: 319
		fConst57KI = (2.0f * (0.2452915f + -fConst41KI /* Sum */)); // step: 323
		fConst58KI = (0.0001f / fConst40KI); // step: 333
		fConst59KI = (fConst58KI + 0.0004332272f /* Sum */); // step: 334
		fConst60KI = (2.0f * (0.0004332272f + -fConst58KI /* Sum */)); // step: 339
		fConst61KI = (1.0f / (((fConst37KI + 0.51247865f /* Sum */) / fConst36KI) + 0.6896214f /* Sum */)); // step: 348
		fConst62KI = (((fConst37KI + -0.51247865f /* Sum */) / fConst36KI) + 0.6896214f /* Sum */); // step: 351
		fConst63KI = (2.0f * (0.6896214f + -fConst41KI /* Sum */)); // step: 355
		fConst64KI = (fConst41KI + 7.6217313f /* Sum */); // step: 365
		fConst65KI = (2.0f * (7.6217313f + -fConst41KI /* Sum */)); // step: 369
		fConst66KI = (1.0f / (((fConst37KI + 0.16840488f /* Sum */) / fConst36KI) + 1.0693583f /* Sum */)); // step: 378
		fConst67KI = (((fConst37KI + -0.16840488f /* Sum */) / fConst36KI) + 1.0693583f /* Sum */); // step: 381
		fConst68KI = (2.0f * (1.0693583f + -fConst41KI /* Sum */)); // step: 385
		fConst69KI = (fConst41KI + 53.53615f /* Sum */); // step: 395
		fConst70KI = (2.0f * (53.53615f + -fConst41KI /* Sum */)); // step: 399
		fConst71KI = tanf((31665.27f / fConst0KI)); // step: 407
		fConst72KI = (1.0f / fConst71KI); // step: 408
		fConst73KI = (1.0f / (((fConst72KI + 3.1897273f /* Sum */) / fConst71KI) + 4.0767817f /* Sum */)); // step: 412
		fConst74KI = (((fConst72KI + -3.1897273f /* Sum */) / fConst71KI) + 4.0767817f /* Sum */); // step: 415
		fConst75KI = powf(fConst71KI,2.0f); // step: 418
		fConst76KI = (1.0f / fConst75KI); // step: 419
		fConst77KI = (2.0f * (4.0767817f + -fConst76KI /* Sum */)); // step: 422
		fConst78KI = (0.0017661728f / fConst75KI); // step: 432
		fConst79KI = (fConst78KI + 0.0004076782f /* Sum */); // step: 433
		fConst80KI = (2.0f * (0.0004076782f + -fConst78KI /* Sum */)); // step: 438
		fConst81KI = (1.0f / (((fConst72KI + 0.74313045f /* Sum */) / fConst71KI) + 1.4500711f /* Sum */)); // step: 447
		fConst82KI = (((fConst72KI + -0.74313045f /* Sum */) / fConst71KI) + 1.4500711f /* Sum */); // step: 450
		fConst83KI = (2.0f * (1.4500711f + -fConst76KI /* Sum */)); // step: 454
		fConst84KI = (11.0520525f / fConst75KI); // step: 464
		fConst85KI = (fConst84KI + 1.4500711f /* Sum */); // step: 465
		fConst86KI = (2.0f * (1.4500711f + -fConst84KI /* Sum */)); // step: 470
		fConst87KI = (1.0f / (((fConst72KI + 0.15748216f /* Sum */) / fConst71KI) + 0.9351402f /* Sum */)); // step: 479
		fConst88KI = (((fConst72KI + -0.15748216f /* Sum */) / fConst71KI) + 0.9351402f /* Sum */); // step: 482
		fConst89KI = (2.0f * (0.9351402f + -fConst76KI /* Sum */)); // step: 486
		fConst90KI = (1.0f / (((fConst72KI + 0.78241307f /* Sum */) / fConst71KI) + 0.2452915f /* Sum */)); // step: 499
		fConst91KI = (((fConst72KI + -0.78241307f /* Sum */) / fConst71KI) + 0.2452915f /* Sum */); // step: 502
		fConst92KI = (2.0f * (0.2452915f + -fConst76KI /* Sum */)); // step: 506
		fConst93KI = (0.0001f / fConst75KI); // step: 516
		fConst94KI = (fConst93KI + 0.0004332272f /* Sum */); // step: 517
		fConst95KI = (2.0f * (0.0004332272f + -fConst93KI /* Sum */)); // step: 522
		fConst96KI = (1.0f / (((fConst72KI + 0.51247865f /* Sum */) / fConst71KI) + 0.6896214f /* Sum */)); // step: 531
		fConst97KI = (((fConst72KI + -0.51247865f /* Sum */) / fConst71KI) + 0.6896214f /* Sum */); // step: 534
		fConst98KI = (2.0f * (0.6896214f + -fConst76KI /* Sum */)); // step: 538
		fConst99KI = (fConst76KI + 7.6217313f /* Sum */); // step: 548
		fConst100KI = (2.0f * (7.6217313f + -fConst76KI /* Sum */)); // step: 552
		fConst101KI = (1.0f / (((fConst72KI + 0.16840488f /* Sum */) / fConst71KI) + 1.0693583f /* Sum */)); // step: 561
		fConst102KI = (((fConst72KI + -0.16840488f /* Sum */) / fConst71KI) + 1.0693583f /* Sum */); // step: 564
		fConst103KI = (2.0f * (1.0693583f + -fConst76KI /* Sum */)); // step: 568
		fConst104KI = (fConst76KI + 53.53615f /* Sum */); // step: 578
		fConst105KI = (2.0f * (53.53615f + -fConst76KI /* Sum */)); // step: 582
		fConst106KI = tanf((25132.742f / fConst0KI)); // step: 590
		fConst107KI = (1.0f / fConst106KI); // step: 591
		fConst108KI = (1.0f / (((fConst107KI + 3.1897273f /* Sum */) / fConst106KI) + 4.0767817f /* Sum */)); // step: 595
		fConst109KI = (((fConst107KI + -3.1897273f /* Sum */) / fConst106KI) + 4.0767817f /* Sum */); // step: 598
		fConst110KI = powf(fConst106KI,2.0f); // step: 601
		fConst111KI = (1.0f / fConst110KI); // step: 602
		fConst112KI = (2.0f * (4.0767817f + -fConst111KI /* Sum */)); // step: 605
		fConst113KI = (0.0017661728f / fConst110KI); // step: 615
		fConst114KI = (fConst113KI + 0.0004076782f /* Sum */); // step: 616
		fConst115KI = (2.0f * (0.0004076782f + -fConst113KI /* Sum */)); // step: 621
		fConst116KI = (1.0f / (((fConst107KI + 0.74313045f /* Sum */) / fConst106KI) + 1.4500711f /* Sum */)); // step: 630
		fConst117KI = (((fConst107KI + -0.74313045f /* Sum */) / fConst106KI) + 1.4500711f /* Sum */); // step: 633
		fConst118KI = (2.0f * (1.4500711f + -fConst111KI /* Sum */)); // step: 637
		fConst119KI = (11.0520525f / fConst110KI); // step: 647
		fConst120KI = (fConst119KI + 1.4500711f /* Sum */); // step: 648
		fConst121KI = (2.0f * (1.4500711f + -fConst119KI /* Sum */)); // step: 653
		fConst122KI = (1.0f / (((fConst107KI + 0.15748216f /* Sum */) / fConst106KI) + 0.9351402f /* Sum */)); // step: 662
		fConst123KI = (((fConst107KI + -0.15748216f /* Sum */) / fConst106KI) + 0.9351402f /* Sum */); // step: 665
		fConst124KI = (2.0f * (0.9351402f + -fConst111KI /* Sum */)); // step: 669
		fConst125KI = (1.0f / (((fConst107KI + 0.78241307f /* Sum */) / fConst106KI) + 0.2452915f /* Sum */)); // step: 682
		fConst126KI = (((fConst107KI + -0.78241307f /* Sum */) / fConst106KI) + 0.2452915f /* Sum */); // step: 685
		fConst127KI = (2.0f * (0.2452915f + -fConst111KI /* Sum */)); // step: 689
		fConst128KI = (0.0001f / fConst110KI); // step: 699
		fConst129KI = (fConst128KI + 0.0004332272f /* Sum */); // step: 700
		fConst130KI = (2.0f * (0.0004332272f + -fConst128KI /* Sum */)); // step: 705
		fConst131KI = (1.0f / (((fConst107KI + 0.51247865f /* Sum */) / fConst106KI) + 0.6896214f /* Sum */)); // step: 714
		fConst132KI = (((fConst107KI + -0.51247865f /* Sum */) / fConst106KI) + 0.6896214f /* Sum */); // step: 717
		fConst133KI = (2.0f * (0.6896214f + -fConst111KI /* Sum */)); // step: 721
		fConst134KI = (fConst111KI + 7.6217313f /* Sum */); // step: 731
		fConst135KI = (2.0f * (7.6217313f + -fConst111KI /* Sum */)); // step: 735
		fConst136KI = (1.0f / (((fConst107KI + 0.16840488f /* Sum */) / fConst106KI) + 1.0693583f /* Sum */)); // step: 744
		fConst137KI = (((fConst107KI + -0.16840488f /* Sum */) / fConst106KI) + 1.0693583f /* Sum */); // step: 747
		fConst138KI = (2.0f * (1.0693583f + -fConst111KI /* Sum */)); // step: 751
		fConst139KI = (fConst111KI + 53.53615f /* Sum */); // step: 761
		fConst140KI = (2.0f * (53.53615f + -fConst111KI /* Sum */)); // step: 765
		fConst141KI = tanf((19947.87f / fConst0KI)); // step: 773
		fConst142KI = (1.0f / fConst141KI); // step: 774
		fConst143KI = (1.0f / (((fConst142KI + 3.1897273f /* Sum */) / fConst141KI) + 4.0767817f /* Sum */)); // step: 778
		fConst144KI = (((fConst142KI + -3.1897273f /* Sum */) / fConst141KI) + 4.0767817f /* Sum */); // step: 781
		fConst145KI = powf(fConst141KI,2.0f); // step: 784
		fConst146KI = (1.0f / fConst145KI); // step: 785
		fConst147KI = (2.0f * (4.0767817f + -fConst146KI /* Sum */)); // step: 788
		fConst148KI = (0.0017661728f / fConst145KI); // step: 798
		fConst149KI = (fConst148KI + 0.0004076782f /* Sum */); // step: 799
		fConst150KI = (2.0f * (0.0004076782f + -fConst148KI /* Sum */)); // step: 804
		fConst151KI = (1.0f / (((fConst142KI + 0.74313045f /* Sum */) / fConst141KI) + 1.4500711f /* Sum */)); // step: 813
		fConst152KI = (((fConst142KI + -0.74313045f /* Sum */) / fConst141KI) + 1.4500711f /* Sum */); // step: 816
		fConst153KI = (2.0f * (1.4500711f + -fConst146KI /* Sum */)); // step: 820
		fConst154KI = (11.0520525f / fConst145KI); // step: 830
		fConst155KI = (fConst154KI + 1.4500711f /* Sum */); // step: 831
		fConst156KI = (2.0f * (1.4500711f + -fConst154KI /* Sum */)); // step: 836
		fConst157KI = (1.0f / (((fConst142KI + 0.15748216f /* Sum */) / fConst141KI) + 0.9351402f /* Sum */)); // step: 845
		fConst158KI = (((fConst142KI + -0.15748216f /* Sum */) / fConst141KI) + 0.9351402f /* Sum */); // step: 848
		fConst159KI = (2.0f * (0.9351402f + -fConst146KI /* Sum */)); // step: 852
		fConst160KI = (1.0f / (((fConst142KI + 0.78241307f /* Sum */) / fConst141KI) + 0.2452915f /* Sum */)); // step: 865
		fConst161KI = (((fConst142KI + -0.78241307f /* Sum */) / fConst141KI) + 0.2452915f /* Sum */); // step: 868
		fConst162KI = (2.0f * (0.2452915f + -fConst146KI /* Sum */)); // step: 872
		fConst163KI = (0.0001f / fConst145KI); // step: 882
		fConst164KI = (fConst163KI + 0.0004332272f /* Sum */); // step: 883
		fConst165KI = (2.0f * (0.0004332272f + -fConst163KI /* Sum */)); // step: 888
		fConst166KI = (1.0f / (((fConst142KI + 0.51247865f /* Sum */) / fConst141KI) + 0.6896214f /* Sum */)); // step: 897
		fConst167KI = (((fConst142KI + -0.51247865f /* Sum */) / fConst141KI) + 0.6896214f /* Sum */); // step: 900
		fConst168KI = (2.0f * (0.6896214f + -fConst146KI /* Sum */)); // step: 904
		fConst169KI = (fConst146KI + 7.6217313f /* Sum */); // step: 914
		fConst170KI = (2.0f * (7.6217313f + -fConst146KI /* Sum */)); // step: 918
		fConst171KI = (1.0f / (((fConst142KI + 0.16840488f /* Sum */) / fConst141KI) + 1.0693583f /* Sum */)); // step: 927
		fConst172KI = (((fConst142KI + -0.16840488f /* Sum */) / fConst141KI) + 1.0693583f /* Sum */); // step: 930
		fConst173KI = (2.0f * (1.0693583f + -fConst146KI /* Sum */)); // step: 934
		fConst174KI = (fConst146KI + 53.53615f /* Sum */); // step: 944
		fConst175KI = (2.0f * (53.53615f + -fConst146KI /* Sum */)); // step: 948
		fConst176KI = tanf((15832.635f / fConst0KI)); // step: 956
		fConst177KI = (1.0f / fConst176KI); // step: 957
		fConst178KI = (1.0f / (((fConst177KI + 3.1897273f /* Sum */) / fConst176KI) + 4.0767817f /* Sum */)); // step: 961
		fConst179KI = (((fConst177KI + -3.1897273f /* Sum */) / fConst176KI) + 4.0767817f /* Sum */); // step: 964
		fConst180KI = powf(fConst176KI,2.0f); // step: 967
		fConst181KI = (1.0f / fConst180KI); // step: 968
		fConst182KI = (2.0f * (4.0767817f + -fConst181KI /* Sum */)); // step: 971
		fConst183KI = (0.0017661728f / fConst180KI); // step: 981
		fConst184KI = (fConst183KI + 0.0004076782f /* Sum */); // step: 982
		fConst185KI = (2.0f * (0.0004076782f + -fConst183KI /* Sum */)); // step: 987
		fConst186KI = (1.0f / (((fConst177KI + 0.74313045f /* Sum */) / fConst176KI) + 1.4500711f /* Sum */)); // step: 996
		fConst187KI = (((fConst177KI + -0.74313045f /* Sum */) / fConst176KI) + 1.4500711f /* Sum */); // step: 999
		fConst188KI = (2.0f * (1.4500711f + -fConst181KI /* Sum */)); // step: 1003
		fConst189KI = (11.0520525f / fConst180KI); // step: 1013
		fConst190KI = (fConst189KI + 1.4500711f /* Sum */); // step: 1014
		fConst191KI = (2.0f * (1.4500711f + -fConst189KI /* Sum */)); // step: 1019
		fConst192KI = (1.0f / (((fConst177KI + 0.15748216f /* Sum */) / fConst176KI) + 0.9351402f /* Sum */)); // step: 1028
		fConst193KI = (((fConst177KI + -0.15748216f /* Sum */) / fConst176KI) + 0.9351402f /* Sum */); // step: 1031
		fConst194KI = (2.0f * (0.9351402f + -fConst181KI /* Sum */)); // step: 1035
		fConst195KI = (1.0f / (((fConst177KI + 0.78241307f /* Sum */) / fConst176KI) + 0.2452915f /* Sum */)); // step: 1048
		fConst196KI = (((fConst177KI + -0.78241307f /* Sum */) / fConst176KI) + 0.2452915f /* Sum */); // step: 1051
		fConst197KI = (2.0f * (0.2452915f + -fConst181KI /* Sum */)); // step: 1055
		fConst198KI = (0.0001f / fConst180KI); // step: 1065
		fConst199KI = (fConst198KI + 0.0004332272f /* Sum */); // step: 1066
		fConst200KI = (2.0f * (0.0004332272f + -fConst198KI /* Sum */)); // step: 1071
		fConst201KI = (1.0f / (((fConst177KI + 0.51247865f /* Sum */) / fConst176KI) + 0.6896214f /* Sum */)); // step: 1080
		fConst202KI = (((fConst177KI + -0.51247865f /* Sum */) / fConst176KI) + 0.6896214f /* Sum */); // step: 1083
		fConst203KI = (2.0f * (0.6896214f + -fConst181KI /* Sum */)); // step: 1087
		fConst204KI = (fConst181KI + 7.6217313f /* Sum */); // step: 1097
		fConst205KI = (2.0f * (7.6217313f + -fConst181KI /* Sum */)); // step: 1101
		fConst206KI = (1.0f / (((fConst177KI + 0.16840488f /* Sum */) / fConst176KI) + 1.0693583f /* Sum */)); // step: 1110
		fConst207KI = (((fConst177KI + -0.16840488f /* Sum */) / fConst176KI) + 1.0693583f /* Sum */); // step: 1113
		fConst208KI = (2.0f * (1.0693583f + -fConst181KI /* Sum */)); // step: 1117
		fConst209KI = (fConst181KI + 53.53615f /* Sum */); // step: 1127
		fConst210KI = (2.0f * (53.53615f + -fConst181KI /* Sum */)); // step: 1131
		fConst211KI = tanf((12566.371f / fConst0KI)); // step: 1139
		fConst212KI = (1.0f / fConst211KI); // step: 1140
		fConst213KI = (1.0f / (((fConst212KI + 3.1897273f /* Sum */) / fConst211KI) + 4.0767817f /* Sum */)); // step: 1144
		fConst214KI = (((fConst212KI + -3.1897273f /* Sum */) / fConst211KI) + 4.0767817f /* Sum */); // step: 1147
		fConst215KI = powf(fConst211KI,2.0f); // step: 1150
		fConst216KI = (1.0f / fConst215KI); // step: 1151
		fConst217KI = (2.0f * (4.0767817f + -fConst216KI /* Sum */)); // step: 1154
		fConst218KI = (0.0017661728f / fConst215KI); // step: 1164
		fConst219KI = (fConst218KI + 0.0004076782f /* Sum */); // step: 1165
		fConst220KI = (2.0f * (0.0004076782f + -fConst218KI /* Sum */)); // step: 1170
		fConst221KI = (1.0f / (((fConst212KI + 0.74313045f /* Sum */) / fConst211KI) + 1.4500711f /* Sum */)); // step: 1179
		fConst222KI = (((fConst212KI + -0.74313045f /* Sum */) / fConst211KI) + 1.4500711f /* Sum */); // step: 1182
		fConst223KI = (2.0f * (1.4500711f + -fConst216KI /* Sum */)); // step: 1186
		fConst224KI = (11.0520525f / fConst215KI); // step: 1196
		fConst225KI = (fConst224KI + 1.4500711f /* Sum */); // step: 1197
		fConst226KI = (2.0f * (1.4500711f + -fConst224KI /* Sum */)); // step: 1202
		fConst227KI = (1.0f / (((fConst212KI + 0.15748216f /* Sum */) / fConst211KI) + 0.9351402f /* Sum */)); // step: 1211
		fConst228KI = (((fConst212KI + -0.15748216f /* Sum */) / fConst211KI) + 0.9351402f /* Sum */); // step: 1214
		fConst229KI = (2.0f * (0.9351402f + -fConst216KI /* Sum */)); // step: 1218
		fConst230KI = (1.0f / (((fConst212KI + 0.78241307f /* Sum */) / fConst211KI) + 0.2452915f /* Sum */)); // step: 1231
		fConst231KI = (((fConst212KI + -0.78241307f /* Sum */) / fConst211KI) + 0.2452915f /* Sum */); // step: 1234
		fConst232KI = (2.0f * (0.2452915f + -fConst216KI /* Sum */)); // step: 1238
		fConst233KI = (0.0001f / fConst215KI); // step: 1248
		fConst234KI = (fConst233KI + 0.0004332272f /* Sum */); // step: 1249
		fConst235KI = (2.0f * (0.0004332272f + -fConst233KI /* Sum */)); // step: 1254
		fConst236KI = (1.0f / (((fConst212KI + 0.51247865f /* Sum */) / fConst211KI) + 0.6896214f /* Sum */)); // step: 1263
		fConst237KI = (((fConst212KI + -0.51247865f /* Sum */) / fConst211KI) + 0.6896214f /* Sum */); // step: 1266
		fConst238KI = (2.0f * (0.6896214f + -fConst216KI /* Sum */)); // step: 1270
		fConst239KI = (fConst216KI + 7.6217313f /* Sum */); // step: 1280
		fConst240KI = (2.0f * (7.6217313f + -fConst216KI /* Sum */)); // step: 1284
		fConst241KI = (1.0f / (((fConst212KI + 0.16840488f /* Sum */) / fConst211KI) + 1.0693583f /* Sum */)); // step: 1293
		fConst242KI = (((fConst212KI + -0.16840488f /* Sum */) / fConst211KI) + 1.0693583f /* Sum */); // step: 1296
		fConst243KI = (2.0f * (1.0693583f + -fConst216KI /* Sum */)); // step: 1300
		fConst244KI = (fConst216KI + 53.53615f /* Sum */); // step: 1310
		fConst245KI = (2.0f * (53.53615f + -fConst216KI /* Sum */)); // step: 1314
		fConst246KI = tanf((9973.935f / fConst0KI)); // step: 1322
		fConst247KI = (1.0f / fConst246KI); // step: 1323
		fConst248KI = (1.0f / (((fConst247KI + 3.1897273f /* Sum */) / fConst246KI) + 4.0767817f /* Sum */)); // step: 1327
		fConst249KI = (((fConst247KI + -3.1897273f /* Sum */) / fConst246KI) + 4.0767817f /* Sum */); // step: 1330
		fConst250KI = powf(fConst246KI,2.0f); // step: 1333
		fConst251KI = (1.0f / fConst250KI); // step: 1334
		fConst252KI = (2.0f * (4.0767817f + -fConst251KI /* Sum */)); // step: 1337
		fConst253KI = (0.0017661728f / fConst250KI); // step: 1347
		fConst254KI = (fConst253KI + 0.0004076782f /* Sum */); // step: 1348
		fConst255KI = (2.0f * (0.0004076782f + -fConst253KI /* Sum */)); // step: 1353
		fConst256KI = (1.0f / (((fConst247KI + 0.74313045f /* Sum */) / fConst246KI) + 1.4500711f /* Sum */)); // step: 1362
		fConst257KI = (((fConst247KI + -0.74313045f /* Sum */) / fConst246KI) + 1.4500711f /* Sum */); // step: 1365
		fConst258KI = (2.0f * (1.4500711f + -fConst251KI /* Sum */)); // step: 1369
		fConst259KI = (11.0520525f / fConst250KI); // step: 1379
		fConst260KI = (fConst259KI + 1.4500711f /* Sum */); // step: 1380
		fConst261KI = (2.0f * (1.4500711f + -fConst259KI /* Sum */)); // step: 1385
		fConst262KI = (1.0f / (((fConst247KI + 0.15748216f /* Sum */) / fConst246KI) + 0.9351402f /* Sum */)); // step: 1394
		fConst263KI = (((fConst247KI + -0.15748216f /* Sum */) / fConst246KI) + 0.9351402f /* Sum */); // step: 1397
		fConst264KI = (2.0f * (0.9351402f + -fConst251KI /* Sum */)); // step: 1401
		fConst265KI = (1.0f / (((fConst247KI + 0.78241307f /* Sum */) / fConst246KI) + 0.2452915f /* Sum */)); // step: 1414
		fConst266KI = (((fConst247KI + -0.78241307f /* Sum */) / fConst246KI) + 0.2452915f /* Sum */); // step: 1417
		fConst267KI = (2.0f * (0.2452915f + -fConst251KI /* Sum */)); // step: 1421
		fConst268KI = (0.0001f / fConst250KI); // step: 1431
		fConst269KI = (fConst268KI + 0.0004332272f /* Sum */); // step: 1432
		fConst270KI = (2.0f * (0.0004332272f + -fConst268KI /* Sum */)); // step: 1437
		fConst271KI = (1.0f / (((fConst247KI + 0.51247865f /* Sum */) / fConst246KI) + 0.6896214f /* Sum */)); // step: 1446
		fConst272KI = (((fConst247KI + -0.51247865f /* Sum */) / fConst246KI) + 0.6896214f /* Sum */); // step: 1449
		fConst273KI = (2.0f * (0.6896214f + -fConst251KI /* Sum */)); // step: 1453
		fConst274KI = (fConst251KI + 7.6217313f /* Sum */); // step: 1463
		fConst275KI = (2.0f * (7.6217313f + -fConst251KI /* Sum */)); // step: 1467
		fConst276KI = (1.0f / (((fConst247KI + 0.16840488f /* Sum */) / fConst246KI) + 1.0693583f /* Sum */)); // step: 1476
		fConst277KI = (((fConst247KI + -0.16840488f /* Sum */) / fConst246KI) + 1.0693583f /* Sum */); // step: 1479
		fConst278KI = (2.0f * (1.0693583f + -fConst251KI /* Sum */)); // step: 1483
		fConst279KI = (fConst251KI + 53.53615f /* Sum */); // step: 1493
		fConst280KI = (2.0f * (53.53615f + -fConst251KI /* Sum */)); // step: 1497
		fConst281KI = tanf((7916.3174f / fConst0KI)); // step: 1505
		fConst282KI = (1.0f / fConst281KI); // step: 1506
		fConst283KI = (1.0f / (((fConst282KI + 3.1897273f /* Sum */) / fConst281KI) + 4.0767817f /* Sum */)); // step: 1510
		fConst284KI = (((fConst282KI + -3.1897273f /* Sum */) / fConst281KI) + 4.0767817f /* Sum */); // step: 1513
		fConst285KI = powf(fConst281KI,2.0f); // step: 1516
		fConst286KI = (1.0f / fConst285KI); // step: 1517
		fConst287KI = (2.0f * (4.0767817f + -fConst286KI /* Sum */)); // step: 1520
		fConst288KI = (0.0017661728f / fConst285KI); // step: 1530
		fConst289KI = (fConst288KI + 0.0004076782f /* Sum */); // step: 1531
		fConst290KI = (2.0f * (0.0004076782f + -fConst288KI /* Sum */)); // step: 1536
		fConst291KI = (1.0f / (((fConst282KI + 0.74313045f /* Sum */) / fConst281KI) + 1.4500711f /* Sum */)); // step: 1545
		fConst292KI = (((fConst282KI + -0.74313045f /* Sum */) / fConst281KI) + 1.4500711f /* Sum */); // step: 1548
		fConst293KI = (2.0f * (1.4500711f + -fConst286KI /* Sum */)); // step: 1552
		fConst294KI = (11.0520525f / fConst285KI); // step: 1562
		fConst295KI = (fConst294KI + 1.4500711f /* Sum */); // step: 1563
		fConst296KI = (2.0f * (1.4500711f + -fConst294KI /* Sum */)); // step: 1568
		fConst297KI = (1.0f / (((fConst282KI + 0.15748216f /* Sum */) / fConst281KI) + 0.9351402f /* Sum */)); // step: 1577
		fConst298KI = (((fConst282KI + -0.15748216f /* Sum */) / fConst281KI) + 0.9351402f /* Sum */); // step: 1580
		fConst299KI = (2.0f * (0.9351402f + -fConst286KI /* Sum */)); // step: 1584
		fConst300KI = (1.0f / (((fConst282KI + 0.78241307f /* Sum */) / fConst281KI) + 0.2452915f /* Sum */)); // step: 1597
		fConst301KI = (((fConst282KI + -0.78241307f /* Sum */) / fConst281KI) + 0.2452915f /* Sum */); // step: 1600
		fConst302KI = (2.0f * (0.2452915f + -fConst286KI /* Sum */)); // step: 1604
		fConst303KI = (0.0001f / fConst285KI); // step: 1614
		fConst304KI = (fConst303KI + 0.0004332272f /* Sum */); // step: 1615
		fConst305KI = (2.0f * (0.0004332272f + -fConst303KI /* Sum */)); // step: 1620
		fConst306KI = (1.0f / (((fConst282KI + 0.51247865f /* Sum */) / fConst281KI) + 0.6896214f /* Sum */)); // step: 1629
		fConst307KI = (((fConst282KI + -0.51247865f /* Sum */) / fConst281KI) + 0.6896214f /* Sum */); // step: 1632
		fConst308KI = (2.0f * (0.6896214f + -fConst286KI /* Sum */)); // step: 1636
		fConst309KI = (fConst286KI + 7.6217313f /* Sum */); // step: 1646
		fConst310KI = (2.0f * (7.6217313f + -fConst286KI /* Sum */)); // step: 1650
		fConst311KI = (1.0f / (((fConst282KI + 0.16840488f /* Sum */) / fConst281KI) + 1.0693583f /* Sum */)); // step: 1659
		fConst312KI = (((fConst282KI + -0.16840488f /* Sum */) / fConst281KI) + 1.0693583f /* Sum */); // step: 1662
		fConst313KI = (2.0f * (1.0693583f + -fConst286KI /* Sum */)); // step: 1666
		fConst314KI = (fConst286KI + 53.53615f /* Sum */); // step: 1676
		fConst315KI = (2.0f * (53.53615f + -fConst286KI /* Sum */)); // step: 1680
		fConst316KI = tanf((6283.1855f / fConst0KI)); // step: 1688
		fConst317KI = (1.0f / fConst316KI); // step: 1689
		fConst318KI = (1.0f / (((fConst317KI + 3.1897273f /* Sum */) / fConst316KI) + 4.0767817f /* Sum */)); // step: 1693
		fConst319KI = (((fConst317KI + -3.1897273f /* Sum */) / fConst316KI) + 4.0767817f /* Sum */); // step: 1696
		fConst320KI = powf(fConst316KI,2.0f); // step: 1699
		fConst321KI = (1.0f / fConst320KI); // step: 1700
		fConst322KI = (2.0f * (4.0767817f + -fConst321KI /* Sum */)); // step: 1703
		fConst323KI = (0.0017661728f / fConst320KI); // step: 1713
		fConst324KI = (fConst323KI + 0.0004076782f /* Sum */); // step: 1714
		fConst325KI = (2.0f * (0.0004076782f + -fConst323KI /* Sum */)); // step: 1719
		fConst326KI = (1.0f / (((fConst317KI + 0.74313045f /* Sum */) / fConst316KI) + 1.4500711f /* Sum */)); // step: 1728
		fConst327KI = (((fConst317KI + -0.74313045f /* Sum */) / fConst316KI) + 1.4500711f /* Sum */); // step: 1731
		fConst328KI = (2.0f * (1.4500711f + -fConst321KI /* Sum */)); // step: 1735
		fConst329KI = (11.0520525f / fConst320KI); // step: 1745
		fConst330KI = (fConst329KI + 1.4500711f /* Sum */); // step: 1746
		fConst331KI = (2.0f * (1.4500711f + -fConst329KI /* Sum */)); // step: 1751
		fConst332KI = (1.0f / (((fConst317KI + 0.15748216f /* Sum */) / fConst316KI) + 0.9351402f /* Sum */)); // step: 1760
		fConst333KI = (((fConst317KI + -0.15748216f /* Sum */) / fConst316KI) + 0.9351402f /* Sum */); // step: 1763
		fConst334KI = (2.0f * (0.9351402f + -fConst321KI /* Sum */)); // step: 1767
		fConst335KI = (1.0f / (((fConst317KI + 0.78241307f /* Sum */) / fConst316KI) + 0.2452915f /* Sum */)); // step: 1780
		fConst336KI = (((fConst317KI + -0.78241307f /* Sum */) / fConst316KI) + 0.2452915f /* Sum */); // step: 1783
		fConst337KI = (2.0f * (0.2452915f + -fConst321KI /* Sum */)); // step: 1787
		fConst338KI = (0.0001f / fConst320KI); // step: 1797
		fConst339KI = (fConst338KI + 0.0004332272f /* Sum */); // step: 1798
		fConst340KI = (2.0f * (0.0004332272f + -fConst338KI /* Sum */)); // step: 1803
		fConst341KI = (1.0f / (((fConst317KI + 0.51247865f /* Sum */) / fConst316KI) + 0.6896214f /* Sum */)); // step: 1812
		fConst342KI = (((fConst317KI + -0.51247865f /* Sum */) / fConst316KI) + 0.6896214f /* Sum */); // step: 1815
		fConst343KI = (2.0f * (0.6896214f + -fConst321KI /* Sum */)); // step: 1819
		fConst344KI = (fConst321KI + 7.6217313f /* Sum */); // step: 1829
		fConst345KI = (2.0f * (7.6217313f + -fConst321KI /* Sum */)); // step: 1833
		fConst346KI = (1.0f / (((fConst317KI + 0.16840488f /* Sum */) / fConst316KI) + 1.0693583f /* Sum */)); // step: 1842
		fConst347KI = (((fConst317KI + -0.16840488f /* Sum */) / fConst316KI) + 1.0693583f /* Sum */); // step: 1845
		fConst348KI = (2.0f * (1.0693583f + -fConst321KI /* Sum */)); // step: 1849
		fConst349KI = (fConst321KI + 53.53615f /* Sum */); // step: 1859
		fConst350KI = (2.0f * (53.53615f + -fConst321KI /* Sum */)); // step: 1863
		fConst351KI = tanf((4986.9673f / fConst0KI)); // step: 1871
		fConst352KI = (1.0f / fConst351KI); // step: 1872
		fConst353KI = (1.0f / (((fConst352KI + 3.1897273f /* Sum */) / fConst351KI) + 4.0767817f /* Sum */)); // step: 1876
		fConst354KI = (((fConst352KI + -3.1897273f /* Sum */) / fConst351KI) + 4.0767817f /* Sum */); // step: 1879
		fConst355KI = powf(fConst351KI,2.0f); // step: 1882
		fConst356KI = (1.0f / fConst355KI); // step: 1883
		fConst357KI = (2.0f * (4.0767817f + -fConst356KI /* Sum */)); // step: 1886
		fConst358KI = (0.0017661728f / fConst355KI); // step: 1896
		fConst359KI = (fConst358KI + 0.0004076782f /* Sum */); // step: 1897
		fConst360KI = (2.0f * (0.0004076782f + -fConst358KI /* Sum */)); // step: 1902
		fConst361KI = (1.0f / (((fConst352KI + 0.74313045f /* Sum */) / fConst351KI) + 1.4500711f /* Sum */)); // step: 1911
		fConst362KI = (((fConst352KI + -0.74313045f /* Sum */) / fConst351KI) + 1.4500711f /* Sum */); // step: 1914
		fConst363KI = (2.0f * (1.4500711f + -fConst356KI /* Sum */)); // step: 1918
		fConst364KI = (11.0520525f / fConst355KI); // step: 1928
		fConst365KI = (fConst364KI + 1.4500711f /* Sum */); // step: 1929
		fConst366KI = (2.0f * (1.4500711f + -fConst364KI /* Sum */)); // step: 1934
		fConst367KI = (1.0f / (((fConst352KI + 0.15748216f /* Sum */) / fConst351KI) + 0.9351402f /* Sum */)); // step: 1943
		fConst368KI = (((fConst352KI + -0.15748216f /* Sum */) / fConst351KI) + 0.9351402f /* Sum */); // step: 1946
		fConst369KI = (2.0f * (0.9351402f + -fConst356KI /* Sum */)); // step: 1950
		fConst370KI = (1.0f / (((fConst352KI + 0.78241307f /* Sum */) / fConst351KI) + 0.2452915f /* Sum */)); // step: 1963
		fConst371KI = (((fConst352KI + -0.78241307f /* Sum */) / fConst351KI) + 0.2452915f /* Sum */); // step: 1966
		fConst372KI = (2.0f * (0.2452915f + -fConst356KI /* Sum */)); // step: 1970
		fConst373KI = (0.0001f / fConst355KI); // step: 1980
		fConst374KI = (fConst373KI + 0.0004332272f /* Sum */); // step: 1981
		fConst375KI = (2.0f * (0.0004332272f + -fConst373KI /* Sum */)); // step: 1986
		fConst376KI = (1.0f / (((fConst352KI + 0.51247865f /* Sum */) / fConst351KI) + 0.6896214f /* Sum */)); // step: 1995
		fConst377KI = (((fConst352KI + -0.51247865f /* Sum */) / fConst351KI) + 0.6896214f /* Sum */); // step: 1998
		fConst378KI = (2.0f * (0.6896214f + -fConst356KI /* Sum */)); // step: 2002
		fConst379KI = (fConst356KI + 7.6217313f /* Sum */); // step: 2012
		fConst380KI = (2.0f * (7.6217313f + -fConst356KI /* Sum */)); // step: 2016
		fConst381KI = (1.0f / (((fConst352KI + 0.16840488f /* Sum */) / fConst351KI) + 1.0693583f /* Sum */)); // step: 2025
		fConst382KI = (((fConst352KI + -0.16840488f /* Sum */) / fConst351KI) + 1.0693583f /* Sum */); // step: 2028
		fConst383KI = (2.0f * (1.0693583f + -fConst356KI /* Sum */)); // step: 2032
		fConst384KI = (fConst356KI + 53.53615f /* Sum */); // step: 2042
		fConst385KI = (2.0f * (53.53615f + -fConst356KI /* Sum */)); // step: 2046
		fConst386KI = tanf((3958.1587f / fConst0KI)); // step: 2054
		fConst387KI = (1.0f / fConst386KI); // step: 2055
		fConst388KI = (1.0f / (((fConst387KI + 3.1897273f /* Sum */) / fConst386KI) + 4.0767817f /* Sum */)); // step: 2059
		fConst389KI = (((fConst387KI + -3.1897273f /* Sum */) / fConst386KI) + 4.0767817f /* Sum */); // step: 2062
		fConst390KI = powf(fConst386KI,2.0f); // step: 2065
		fConst391KI = (1.0f / fConst390KI); // step: 2066
		fConst392KI = (2.0f * (4.0767817f + -fConst391KI /* Sum */)); // step: 2069
		fConst393KI = (0.0017661728f / fConst390KI); // step: 2079
		fConst394KI = (fConst393KI + 0.0004076782f /* Sum */); // step: 2080
		fConst395KI = (2.0f * (0.0004076782f + -fConst393KI /* Sum */)); // step: 2085
		fConst396KI = (1.0f / (((fConst387KI + 0.74313045f /* Sum */) / fConst386KI) + 1.4500711f /* Sum */)); // step: 2094
		fConst397KI = (((fConst387KI + -0.74313045f /* Sum */) / fConst386KI) + 1.4500711f /* Sum */); // step: 2097
		fConst398KI = (2.0f * (1.4500711f + -fConst391KI /* Sum */)); // step: 2101
		fConst399KI = (11.0520525f / fConst390KI); // step: 2111
		fConst400KI = (fConst399KI + 1.4500711f /* Sum */); // step: 2112
		fConst401KI = (2.0f * (1.4500711f + -fConst399KI /* Sum */)); // step: 2117
		fConst402KI = (1.0f / (((fConst387KI + 0.15748216f /* Sum */) / fConst386KI) + 0.9351402f /* Sum */)); // step: 2126
		fConst403KI = (((fConst387KI + -0.15748216f /* Sum */) / fConst386KI) + 0.9351402f /* Sum */); // step: 2129
		fConst404KI = (2.0f * (0.9351402f + -fConst391KI /* Sum */)); // step: 2133
		fConst405KI = (1.0f / (((fConst387KI + 0.78241307f /* Sum */) / fConst386KI) + 0.2452915f /* Sum */)); // step: 2146
		fConst406KI = (((fConst387KI + -0.78241307f /* Sum */) / fConst386KI) + 0.2452915f /* Sum */); // step: 2149
		fConst407KI = (2.0f * (0.2452915f + -fConst391KI /* Sum */)); // step: 2153
		fConst408KI = (0.0001f / fConst390KI); // step: 2163
		fConst409KI = (fConst408KI + 0.0004332272f /* Sum */); // step: 2164
		fConst410KI = (2.0f * (0.0004332272f + -fConst408KI /* Sum */)); // step: 2169
		fConst411KI = (1.0f / (((fConst387KI + 0.51247865f /* Sum */) / fConst386KI) + 0.6896214f /* Sum */)); // step: 2178
		fConst412KI = (((fConst387KI + -0.51247865f /* Sum */) / fConst386KI) + 0.6896214f /* Sum */); // step: 2181
		fConst413KI = (2.0f * (0.6896214f + -fConst391KI /* Sum */)); // step: 2185
		fConst414KI = (fConst391KI + 7.6217313f /* Sum */); // step: 2195
		fConst415KI = (2.0f * (7.6217313f + -fConst391KI /* Sum */)); // step: 2199
		fConst416KI = (1.0f / (((fConst387KI + 0.16840488f /* Sum */) / fConst386KI) + 1.0693583f /* Sum */)); // step: 2208
		fConst417KI = (((fConst387KI + -0.16840488f /* Sum */) / fConst386KI) + 1.0693583f /* Sum */); // step: 2211
		fConst418KI = (2.0f * (1.0693583f + -fConst391KI /* Sum */)); // step: 2215
		fConst419KI = (fConst391KI + 53.53615f /* Sum */); // step: 2225
		fConst420KI = (2.0f * (53.53615f + -fConst391KI /* Sum */)); // step: 2229
		fConst421KI = tanf((3141.5928f / fConst0KI)); // step: 2237
		fConst422KI = (1.0f / fConst421KI); // step: 2238
		fConst423KI = (1.0f / (((fConst422KI + 3.1897273f /* Sum */) / fConst421KI) + 4.0767817f /* Sum */)); // step: 2242
		fConst424KI = (((fConst422KI + -3.1897273f /* Sum */) / fConst421KI) + 4.0767817f /* Sum */); // step: 2245
		fConst425KI = powf(fConst421KI,2.0f); // step: 2248
		fConst426KI = (1.0f / fConst425KI); // step: 2249
		fConst427KI = (2.0f * (4.0767817f + -fConst426KI /* Sum */)); // step: 2252
		fConst428KI = (0.0017661728f / fConst425KI); // step: 2262
		fConst429KI = (fConst428KI + 0.0004076782f /* Sum */); // step: 2263
		fConst430KI = (2.0f * (0.0004076782f + -fConst428KI /* Sum */)); // step: 2268
		fConst431KI = (1.0f / (((fConst422KI + 0.74313045f /* Sum */) / fConst421KI) + 1.4500711f /* Sum */)); // step: 2277
		fConst432KI = (((fConst422KI + -0.74313045f /* Sum */) / fConst421KI) + 1.4500711f /* Sum */); // step: 2280
		fConst433KI = (2.0f * (1.4500711f + -fConst426KI /* Sum */)); // step: 2284
		fConst434KI = (11.0520525f / fConst425KI); // step: 2294
		fConst435KI = (fConst434KI + 1.4500711f /* Sum */); // step: 2295
		fConst436KI = (2.0f * (1.4500711f + -fConst434KI /* Sum */)); // step: 2300
		fConst437KI = (1.0f / (((fConst422KI + 0.15748216f /* Sum */) / fConst421KI) + 0.9351402f /* Sum */)); // step: 2309
		fConst438KI = (((fConst422KI + -0.15748216f /* Sum */) / fConst421KI) + 0.9351402f /* Sum */); // step: 2312
		fConst439KI = (2.0f * (0.9351402f + -fConst426KI /* Sum */)); // step: 2316
		fConst440KI = (1.0f / (((fConst422KI + 0.78241307f /* Sum */) / fConst421KI) + 0.2452915f /* Sum */)); // step: 2329
		fConst441KI = (((fConst422KI + -0.78241307f /* Sum */) / fConst421KI) + 0.2452915f /* Sum */); // step: 2332
		fConst442KI = (2.0f * (0.2452915f + -fConst426KI /* Sum */)); // step: 2336
		fConst443KI = (0.0001f / fConst425KI); // step: 2346
		fConst444KI = (fConst443KI + 0.0004332272f /* Sum */); // step: 2347
		fConst445KI = (2.0f * (0.0004332272f + -fConst443KI /* Sum */)); // step: 2352
		fConst446KI = (1.0f / (((fConst422KI + 0.51247865f /* Sum */) / fConst421KI) + 0.6896214f /* Sum */)); // step: 2361
		fConst447KI = (((fConst422KI + -0.51247865f /* Sum */) / fConst421KI) + 0.6896214f /* Sum */); // step: 2364
		fConst448KI = (2.0f * (0.6896214f + -fConst426KI /* Sum */)); // step: 2368
		fConst449KI = (fConst426KI + 7.6217313f /* Sum */); // step: 2378
		fConst450KI = (2.0f * (7.6217313f + -fConst426KI /* Sum */)); // step: 2382
		fConst451KI = (1.0f / (((fConst422KI + 0.16840488f /* Sum */) / fConst421KI) + 1.0693583f /* Sum */)); // step: 2391
		fConst452KI = (((fConst422KI + -0.16840488f /* Sum */) / fConst421KI) + 1.0693583f /* Sum */); // step: 2394
		fConst453KI = (2.0f * (1.0693583f + -fConst426KI /* Sum */)); // step: 2398
		fConst454KI = (fConst426KI + 53.53615f /* Sum */); // step: 2408
		fConst455KI = (2.0f * (53.53615f + -fConst426KI /* Sum */)); // step: 2412
		fConst456KI = tanf((2493.4836f / fConst0KI)); // step: 2420
		fConst457KI = (1.0f / fConst456KI); // step: 2421
		fConst458KI = (1.0f / (((fConst457KI + 3.1897273f /* Sum */) / fConst456KI) + 4.0767817f /* Sum */)); // step: 2425
		fConst459KI = (((fConst457KI + -3.1897273f /* Sum */) / fConst456KI) + 4.0767817f /* Sum */); // step: 2428
		fConst460KI = powf(fConst456KI,2.0f); // step: 2431
		fConst461KI = (1.0f / fConst460KI); // step: 2432
		fConst462KI = (2.0f * (4.0767817f + -fConst461KI /* Sum */)); // step: 2435
		fConst463KI = (0.0017661728f / fConst460KI); // step: 2445
		fConst464KI = (fConst463KI + 0.0004076782f /* Sum */); // step: 2446
		fConst465KI = (2.0f * (0.0004076782f + -fConst463KI /* Sum */)); // step: 2451
		fConst466KI = (1.0f / (((fConst457KI + 0.74313045f /* Sum */) / fConst456KI) + 1.4500711f /* Sum */)); // step: 2460
		fConst467KI = (((fConst457KI + -0.74313045f /* Sum */) / fConst456KI) + 1.4500711f /* Sum */); // step: 2463
		fConst468KI = (2.0f * (1.4500711f + -fConst461KI /* Sum */)); // step: 2467
		fConst469KI = (11.0520525f / fConst460KI); // step: 2477
		fConst470KI = (fConst469KI + 1.4500711f /* Sum */); // step: 2478
		fConst471KI = (2.0f * (1.4500711f + -fConst469KI /* Sum */)); // step: 2483
		fConst472KI = (1.0f / (((fConst457KI + 0.15748216f /* Sum */) / fConst456KI) + 0.9351402f /* Sum */)); // step: 2492
		fConst473KI = (((fConst457KI + -0.15748216f /* Sum */) / fConst456KI) + 0.9351402f /* Sum */); // step: 2495
		fConst474KI = (2.0f * (0.9351402f + -fConst461KI /* Sum */)); // step: 2499
		fConst475KI = (1.0f / (((fConst457KI + 0.78241307f /* Sum */) / fConst456KI) + 0.2452915f /* Sum */)); // step: 2512
		fConst476KI = (((fConst457KI + -0.78241307f /* Sum */) / fConst456KI) + 0.2452915f /* Sum */); // step: 2515
		fConst477KI = (2.0f * (0.2452915f + -fConst461KI /* Sum */)); // step: 2519
		fConst478KI = (0.0001f / fConst460KI); // step: 2529
		fConst479KI = (fConst478KI + 0.0004332272f /* Sum */); // step: 2530
		fConst480KI = (2.0f * (0.0004332272f + -fConst478KI /* Sum */)); // step: 2535
		fConst481KI = (1.0f / (((fConst457KI + 0.51247865f /* Sum */) / fConst456KI) + 0.6896214f /* Sum */)); // step: 2544
		fConst482KI = (((fConst457KI + -0.51247865f /* Sum */) / fConst456KI) + 0.6896214f /* Sum */); // step: 2547
		fConst483KI = (2.0f * (0.6896214f + -fConst461KI /* Sum */)); // step: 2551
		fConst484KI = (fConst461KI + 7.6217313f /* Sum */); // step: 2561
		fConst485KI = (2.0f * (7.6217313f + -fConst461KI /* Sum */)); // step: 2565
		fConst486KI = (1.0f / (((fConst457KI + 0.16840488f /* Sum */) / fConst456KI) + 1.0693583f /* Sum */)); // step: 2574
		fConst487KI = (((fConst457KI + -0.16840488f /* Sum */) / fConst456KI) + 1.0693583f /* Sum */); // step: 2577
		fConst488KI = (2.0f * (1.0693583f + -fConst461KI /* Sum */)); // step: 2581
		fConst489KI = (fConst461KI + 53.53615f /* Sum */); // step: 2591
		fConst490KI = (2.0f * (53.53615f + -fConst461KI /* Sum */)); // step: 2595
		fConst491KI = tanf((1979.0793f / fConst0KI)); // step: 2603
		fConst492KI = (1.0f / fConst491KI); // step: 2604
		fConst493KI = (1.0f / (((fConst492KI + 3.1897273f /* Sum */) / fConst491KI) + 4.0767817f /* Sum */)); // step: 2608
		fConst494KI = (((fConst492KI + -3.1897273f /* Sum */) / fConst491KI) + 4.0767817f /* Sum */); // step: 2611
		fConst495KI = powf(fConst491KI,2.0f); // step: 2614
		fConst496KI = (1.0f / fConst495KI); // step: 2615
		fConst497KI = (2.0f * (4.0767817f + -fConst496KI /* Sum */)); // step: 2618
		fConst498KI = (0.0017661728f / fConst495KI); // step: 2628
		fConst499KI = (fConst498KI + 0.0004076782f /* Sum */); // step: 2629
		fConst500KI = (2.0f * (0.0004076782f + -fConst498KI /* Sum */)); // step: 2634
		fConst501KI = (1.0f / (((fConst492KI + 0.74313045f /* Sum */) / fConst491KI) + 1.4500711f /* Sum */)); // step: 2643
		fConst502KI = (((fConst492KI + -0.74313045f /* Sum */) / fConst491KI) + 1.4500711f /* Sum */); // step: 2646
		fConst503KI = (2.0f * (1.4500711f + -fConst496KI /* Sum */)); // step: 2650
		fConst504KI = (11.0520525f / fConst495KI); // step: 2660
		fConst505KI = (fConst504KI + 1.4500711f /* Sum */); // step: 2661
		fConst506KI = (2.0f * (1.4500711f + -fConst504KI /* Sum */)); // step: 2666
		fConst507KI = (1.0f / (((fConst492KI + 0.15748216f /* Sum */) / fConst491KI) + 0.9351402f /* Sum */)); // step: 2675
		fConst508KI = (((fConst492KI + -0.15748216f /* Sum */) / fConst491KI) + 0.9351402f /* Sum */); // step: 2678
		fConst509KI = (2.0f * (0.9351402f + -fConst496KI /* Sum */)); // step: 2682
		fConst510KI = (1.0f / (((fConst492KI + 0.78241307f /* Sum */) / fConst491KI) + 0.2452915f /* Sum */)); // step: 2695
		fConst511KI = (((fConst492KI + -0.78241307f /* Sum */) / fConst491KI) + 0.2452915f /* Sum */); // step: 2698
		fConst512KI = (2.0f * (0.2452915f + -fConst496KI /* Sum */)); // step: 2702
		fConst513KI = (0.0001f / fConst495KI); // step: 2712
		fConst514KI = (fConst513KI + 0.0004332272f /* Sum */); // step: 2713
		fConst515KI = (2.0f * (0.0004332272f + -fConst513KI /* Sum */)); // step: 2718
		fConst516KI = (1.0f / (((fConst492KI + 0.51247865f /* Sum */) / fConst491KI) + 0.6896214f /* Sum */)); // step: 2727
		fConst517KI = (((fConst492KI + -0.51247865f /* Sum */) / fConst491KI) + 0.6896214f /* Sum */); // step: 2730
		fConst518KI = (2.0f * (0.6896214f + -fConst496KI /* Sum */)); // step: 2734
		fConst519KI = (fConst496KI + 7.6217313f /* Sum */); // step: 2744
		fConst520KI = (2.0f * (7.6217313f + -fConst496KI /* Sum */)); // step: 2748
		fConst521KI = (1.0f / (((fConst492KI + 0.16840488f /* Sum */) / fConst491KI) + 1.0693583f /* Sum */)); // step: 2757
		fConst522KI = (((fConst492KI + -0.16840488f /* Sum */) / fConst491KI) + 1.0693583f /* Sum */); // step: 2760
		fConst523KI = (2.0f * (1.0693583f + -fConst496KI /* Sum */)); // step: 2764
		fConst524KI = (fConst496KI + 53.53615f /* Sum */); // step: 2774
		fConst525KI = (2.0f * (53.53615f + -fConst496KI /* Sum */)); // step: 2778
		fConst526KI = tanf((1570.7964f / fConst0KI)); // step: 2786
		fConst527KI = (1.0f / fConst526KI); // step: 2787
		fConst528KI = (1.0f / (((fConst527KI + 3.1897273f /* Sum */) / fConst526KI) + 4.0767817f /* Sum */)); // step: 2791
		fConst529KI = (((fConst527KI + -3.1897273f /* Sum */) / fConst526KI) + 4.0767817f /* Sum */); // step: 2794
		fConst530KI = powf(fConst526KI,2.0f); // step: 2797
		fConst531KI = (1.0f / fConst530KI); // step: 2798
		fConst532KI = (2.0f * (4.0767817f + -fConst531KI /* Sum */)); // step: 2801
		fConst533KI = (0.0017661728f / fConst530KI); // step: 2811
		fConst534KI = (fConst533KI + 0.0004076782f /* Sum */); // step: 2812
		fConst535KI = (2.0f * (0.0004076782f + -fConst533KI /* Sum */)); // step: 2817
		fConst536KI = (1.0f / (((fConst527KI + 0.74313045f /* Sum */) / fConst526KI) + 1.4500711f /* Sum */)); // step: 2826
		fConst537KI = (((fConst527KI + -0.74313045f /* Sum */) / fConst526KI) + 1.4500711f /* Sum */); // step: 2829
		fConst538KI = (2.0f * (1.4500711f + -fConst531KI /* Sum */)); // step: 2833
		fConst539KI = (11.0520525f / fConst530KI); // step: 2843
		fConst540KI = (fConst539KI + 1.4500711f /* Sum */); // step: 2844
		fConst541KI = (2.0f * (1.4500711f + -fConst539KI /* Sum */)); // step: 2849
		fConst542KI = (1.0f / (((fConst527KI + 0.15748216f /* Sum */) / fConst526KI) + 0.9351402f /* Sum */)); // step: 2858
		fConst543KI = (((fConst527KI + -0.15748216f /* Sum */) / fConst526KI) + 0.9351402f /* Sum */); // step: 2861
		fConst544KI = (2.0f * (0.9351402f + -fConst531KI /* Sum */)); // step: 2865
		fConst545KI = (1.0f / (((fConst527KI + 0.78241307f /* Sum */) / fConst526KI) + 0.2452915f /* Sum */)); // step: 2878
		fConst546KI = (((fConst527KI + -0.78241307f /* Sum */) / fConst526KI) + 0.2452915f /* Sum */); // step: 2881
		fConst547KI = (2.0f * (0.2452915f + -fConst531KI /* Sum */)); // step: 2885
		fConst548KI = (0.0001f / fConst530KI); // step: 2895
		fConst549KI = (fConst548KI + 0.0004332272f /* Sum */); // step: 2896
		fConst550KI = (2.0f * (0.0004332272f + -fConst548KI /* Sum */)); // step: 2901
		fConst551KI = (1.0f / (((fConst527KI + 0.51247865f /* Sum */) / fConst526KI) + 0.6896214f /* Sum */)); // step: 2910
		fConst552KI = (((fConst527KI + -0.51247865f /* Sum */) / fConst526KI) + 0.6896214f /* Sum */); // step: 2913
		fConst553KI = (2.0f * (0.6896214f + -fConst531KI /* Sum */)); // step: 2917
		fConst554KI = (fConst531KI + 7.6217313f /* Sum */); // step: 2927
		fConst555KI = (2.0f * (7.6217313f + -fConst531KI /* Sum */)); // step: 2931
		fConst556KI = (1.0f / (((fConst527KI + 0.16840488f /* Sum */) / fConst526KI) + 1.0693583f /* Sum */)); // step: 2940
		fConst557KI = (((fConst527KI + -0.16840488f /* Sum */) / fConst526KI) + 1.0693583f /* Sum */); // step: 2943
		fConst558KI = (2.0f * (1.0693583f + -fConst531KI /* Sum */)); // step: 2947
		fConst559KI = (fConst531KI + 53.53615f /* Sum */); // step: 2957
		fConst560KI = (2.0f * (53.53615f + -fConst531KI /* Sum */)); // step: 2961
		fConst561KI = tanf((1246.7418f / fConst0KI)); // step: 2969
		fConst562KI = (1.0f / fConst561KI); // step: 2970
		fConst563KI = (1.0f / (((fConst562KI + 3.1897273f /* Sum */) / fConst561KI) + 4.0767817f /* Sum */)); // step: 2974
		fConst564KI = (((fConst562KI + -3.1897273f /* Sum */) / fConst561KI) + 4.0767817f /* Sum */); // step: 2977
		fConst565KI = powf(fConst561KI,2.0f); // step: 2980
		fConst566KI = (1.0f / fConst565KI); // step: 2981
		fConst567KI = (2.0f * (4.0767817f + -fConst566KI /* Sum */)); // step: 2984
		fConst568KI = (0.0017661728f / fConst565KI); // step: 2994
		fConst569KI = (fConst568KI + 0.0004076782f /* Sum */); // step: 2995
		fConst570KI = (2.0f * (0.0004076782f + -fConst568KI /* Sum */)); // step: 3000
		fConst571KI = (1.0f / (((fConst562KI + 0.74313045f /* Sum */) / fConst561KI) + 1.4500711f /* Sum */)); // step: 3009
		fConst572KI = (((fConst562KI + -0.74313045f /* Sum */) / fConst561KI) + 1.4500711f /* Sum */); // step: 3012
		fConst573KI = (2.0f * (1.4500711f + -fConst566KI /* Sum */)); // step: 3016
		fConst574KI = (11.0520525f / fConst565KI); // step: 3026
		fConst575KI = (fConst574KI + 1.4500711f /* Sum */); // step: 3027
		fConst576KI = (2.0f * (1.4500711f + -fConst574KI /* Sum */)); // step: 3032
		fConst577KI = (1.0f / (((fConst562KI + 0.15748216f /* Sum */) / fConst561KI) + 0.9351402f /* Sum */)); // step: 3041
		fConst578KI = (((fConst562KI + -0.15748216f /* Sum */) / fConst561KI) + 0.9351402f /* Sum */); // step: 3044
		fConst579KI = (2.0f * (0.9351402f + -fConst566KI /* Sum */)); // step: 3048
		fConst580KI = (1.0f / (((fConst562KI + 0.78241307f /* Sum */) / fConst561KI) + 0.2452915f /* Sum */)); // step: 3061
		fConst581KI = (((fConst562KI + -0.78241307f /* Sum */) / fConst561KI) + 0.2452915f /* Sum */); // step: 3064
		fConst582KI = (2.0f * (0.2452915f + -fConst566KI /* Sum */)); // step: 3068
		fConst583KI = (0.0001f / fConst565KI); // step: 3078
		fConst584KI = (fConst583KI + 0.0004332272f /* Sum */); // step: 3079
		fConst585KI = (2.0f * (0.0004332272f + -fConst583KI /* Sum */)); // step: 3084
		fConst586KI = (1.0f / (((fConst562KI + 0.51247865f /* Sum */) / fConst561KI) + 0.6896214f /* Sum */)); // step: 3093
		fConst587KI = (((fConst562KI + -0.51247865f /* Sum */) / fConst561KI) + 0.6896214f /* Sum */); // step: 3096
		fConst588KI = (2.0f * (0.6896214f + -fConst566KI /* Sum */)); // step: 3100
		fConst589KI = (fConst566KI + 7.6217313f /* Sum */); // step: 3110
		fConst590KI = (2.0f * (7.6217313f + -fConst566KI /* Sum */)); // step: 3114
		fConst591KI = (1.0f / (((fConst562KI + 0.16840488f /* Sum */) / fConst561KI) + 1.0693583f /* Sum */)); // step: 3123
		fConst592KI = (((fConst562KI + -0.16840488f /* Sum */) / fConst561KI) + 1.0693583f /* Sum */); // step: 3126
		fConst593KI = (2.0f * (1.0693583f + -fConst566KI /* Sum */)); // step: 3130
		fConst594KI = (fConst566KI + 53.53615f /* Sum */); // step: 3140
		fConst595KI = (2.0f * (53.53615f + -fConst566KI /* Sum */)); // step: 3144
		fConst596KI = tanf((989.5397f / fConst0KI)); // step: 3152
		fConst597KI = (1.0f / fConst596KI); // step: 3153
		fConst598KI = (1.0f / (((fConst597KI + 3.1897273f /* Sum */) / fConst596KI) + 4.0767817f /* Sum */)); // step: 3157
		fConst599KI = (((fConst597KI + -3.1897273f /* Sum */) / fConst596KI) + 4.0767817f /* Sum */); // step: 3160
		fConst600KI = powf(fConst596KI,2.0f); // step: 3163
		fConst601KI = (1.0f / fConst600KI); // step: 3164
		fConst602KI = (2.0f * (4.0767817f + -fConst601KI /* Sum */)); // step: 3167
		fConst603KI = (0.0017661728f / fConst600KI); // step: 3177
		fConst604KI = (fConst603KI + 0.0004076782f /* Sum */); // step: 3178
		fConst605KI = (2.0f * (0.0004076782f + -fConst603KI /* Sum */)); // step: 3183
		fConst606KI = (1.0f / (((fConst597KI + 0.74313045f /* Sum */) / fConst596KI) + 1.4500711f /* Sum */)); // step: 3192
		fConst607KI = (((fConst597KI + -0.74313045f /* Sum */) / fConst596KI) + 1.4500711f /* Sum */); // step: 3195
		fConst608KI = (2.0f * (1.4500711f + -fConst601KI /* Sum */)); // step: 3199
		fConst609KI = (11.0520525f / fConst600KI); // step: 3209
		fConst610KI = (fConst609KI + 1.4500711f /* Sum */); // step: 3210
		fConst611KI = (2.0f * (1.4500711f + -fConst609KI /* Sum */)); // step: 3215
		fConst612KI = (1.0f / (((fConst597KI + 0.15748216f /* Sum */) / fConst596KI) + 0.9351402f /* Sum */)); // step: 3224
		fConst613KI = (((fConst597KI + -0.15748216f /* Sum */) / fConst596KI) + 0.9351402f /* Sum */); // step: 3227
		fConst614KI = (2.0f * (0.9351402f + -fConst601KI /* Sum */)); // step: 3231
		fConst615KI = (1.0f / (((fConst597KI + 0.78241307f /* Sum */) / fConst596KI) + 0.2452915f /* Sum */)); // step: 3244
		fConst616KI = (((fConst597KI + -0.78241307f /* Sum */) / fConst596KI) + 0.2452915f /* Sum */); // step: 3247
		fConst617KI = (2.0f * (0.2452915f + -fConst601KI /* Sum */)); // step: 3251
		fConst618KI = (0.0001f / fConst600KI); // step: 3261
		fConst619KI = (fConst618KI + 0.0004332272f /* Sum */); // step: 3262
		fConst620KI = (2.0f * (0.0004332272f + -fConst618KI /* Sum */)); // step: 3267
		fConst621KI = (1.0f / (((fConst597KI + 0.51247865f /* Sum */) / fConst596KI) + 0.6896214f /* Sum */)); // step: 3276
		fConst622KI = (((fConst597KI + -0.51247865f /* Sum */) / fConst596KI) + 0.6896214f /* Sum */); // step: 3279
		fConst623KI = (2.0f * (0.6896214f + -fConst601KI /* Sum */)); // step: 3283
		fConst624KI = (fConst601KI + 7.6217313f /* Sum */); // step: 3293
		fConst625KI = (2.0f * (7.6217313f + -fConst601KI /* Sum */)); // step: 3297
		fConst626KI = (1.0f / (((fConst597KI + 0.16840488f /* Sum */) / fConst596KI) + 1.0693583f /* Sum */)); // step: 3306
		fConst627KI = (((fConst597KI + -0.16840488f /* Sum */) / fConst596KI) + 1.0693583f /* Sum */); // step: 3309
		fConst628KI = (2.0f * (1.0693583f + -fConst601KI /* Sum */)); // step: 3313
		fConst629KI = (fConst601KI + 53.53615f /* Sum */); // step: 3323
		fConst630KI = (2.0f * (53.53615f + -fConst601KI /* Sum */)); // step: 3327
		fConst631KI = tanf((785.3982f / fConst0KI)); // step: 3335
		fConst632KI = (1.0f / fConst631KI); // step: 3336
		fConst633KI = (1.0f / (((fConst632KI + 3.1897273f /* Sum */) / fConst631KI) + 4.0767817f /* Sum */)); // step: 3340
		fConst634KI = (((fConst632KI + -3.1897273f /* Sum */) / fConst631KI) + 4.0767817f /* Sum */); // step: 3343
		fConst635KI = powf(fConst631KI,2.0f); // step: 3346
		fConst636KI = (1.0f / fConst635KI); // step: 3347
		fConst637KI = (2.0f * (4.0767817f + -fConst636KI /* Sum */)); // step: 3350
		fConst638KI = (0.0017661728f / fConst635KI); // step: 3360
		fConst639KI = (fConst638KI + 0.0004076782f /* Sum */); // step: 3361
		fConst640KI = (2.0f * (0.0004076782f + -fConst638KI /* Sum */)); // step: 3366
		fConst641KI = (1.0f / (((fConst632KI + 0.74313045f /* Sum */) / fConst631KI) + 1.4500711f /* Sum */)); // step: 3375
		fConst642KI = (((fConst632KI + -0.74313045f /* Sum */) / fConst631KI) + 1.4500711f /* Sum */); // step: 3378
		fConst643KI = (2.0f * (1.4500711f + -fConst636KI /* Sum */)); // step: 3382
		fConst644KI = (11.0520525f / fConst635KI); // step: 3392
		fConst645KI = (fConst644KI + 1.4500711f /* Sum */); // step: 3393
		fConst646KI = (2.0f * (1.4500711f + -fConst644KI /* Sum */)); // step: 3398
		fConst647KI = (1.0f / (((fConst632KI + 0.15748216f /* Sum */) / fConst631KI) + 0.9351402f /* Sum */)); // step: 3407
		fConst648KI = (((fConst632KI + -0.15748216f /* Sum */) / fConst631KI) + 0.9351402f /* Sum */); // step: 3410
		fConst649KI = (2.0f * (0.9351402f + -fConst636KI /* Sum */)); // step: 3414
		fConst650KI = (1.0f / (((fConst632KI + 0.78241307f /* Sum */) / fConst631KI) + 0.2452915f /* Sum */)); // step: 3427
		fConst651KI = (((fConst632KI + -0.78241307f /* Sum */) / fConst631KI) + 0.2452915f /* Sum */); // step: 3430
		fConst652KI = (2.0f * (0.2452915f + -fConst636KI /* Sum */)); // step: 3434
		fConst653KI = (0.0001f / fConst635KI); // step: 3444
		fConst654KI = (fConst653KI + 0.0004332272f /* Sum */); // step: 3445
		fConst655KI = (2.0f * (0.0004332272f + -fConst653KI /* Sum */)); // step: 3450
		fConst656KI = (1.0f / (((fConst632KI + 0.51247865f /* Sum */) / fConst631KI) + 0.6896214f /* Sum */)); // step: 3459
		fConst657KI = (((fConst632KI + -0.51247865f /* Sum */) / fConst631KI) + 0.6896214f /* Sum */); // step: 3462
		fConst658KI = (2.0f * (0.6896214f + -fConst636KI /* Sum */)); // step: 3466
		fConst659KI = (fConst636KI + 7.6217313f /* Sum */); // step: 3476
		fConst660KI = (2.0f * (7.6217313f + -fConst636KI /* Sum */)); // step: 3480
		fConst661KI = (1.0f / (((fConst632KI + 0.16840488f /* Sum */) / fConst631KI) + 1.0693583f /* Sum */)); // step: 3489
		fConst662KI = (((fConst632KI + -0.16840488f /* Sum */) / fConst631KI) + 1.0693583f /* Sum */); // step: 3492
		fConst663KI = (2.0f * (1.0693583f + -fConst636KI /* Sum */)); // step: 3496
		fConst664KI = (fConst636KI + 53.53615f /* Sum */); // step: 3506
		fConst665KI = (2.0f * (53.53615f + -fConst636KI /* Sum */)); // step: 3510
		fConst666KI = tanf((623.3709f / fConst0KI)); // step: 3518
		fConst667KI = (1.0f / fConst666KI); // step: 3519
		fConst668KI = (1.0f / (((fConst667KI + 3.1897273f /* Sum */) / fConst666KI) + 4.0767817f /* Sum */)); // step: 3523
		fConst669KI = (((fConst667KI + -3.1897273f /* Sum */) / fConst666KI) + 4.0767817f /* Sum */); // step: 3526
		fConst670KI = powf(fConst666KI,2.0f); // step: 3529
		fConst671KI = (1.0f / fConst670KI); // step: 3530
		fConst672KI = (2.0f * (4.0767817f + -fConst671KI /* Sum */)); // step: 3533
		fConst673KI = (0.0017661728f / fConst670KI); // step: 3543
		fConst674KI = (fConst673KI + 0.0004076782f /* Sum */); // step: 3544
		fConst675KI = (2.0f * (0.0004076782f + -fConst673KI /* Sum */)); // step: 3549
		fConst676KI = (1.0f / (((fConst667KI + 0.74313045f /* Sum */) / fConst666KI) + 1.4500711f /* Sum */)); // step: 3558
		fConst677KI = (((fConst667KI + -0.74313045f /* Sum */) / fConst666KI) + 1.4500711f /* Sum */); // step: 3561
		fConst678KI = (2.0f * (1.4500711f + -fConst671KI /* Sum */)); // step: 3565
		fConst679KI = (11.0520525f / fConst670KI); // step: 3575
		fConst680KI = (fConst679KI + 1.4500711f /* Sum */); // step: 3576
		fConst681KI = (2.0f * (1.4500711f + -fConst679KI /* Sum */)); // step: 3581
		fConst682KI = (1.0f / (((fConst667KI + 0.15748216f /* Sum */) / fConst666KI) + 0.9351402f /* Sum */)); // step: 3590
		fConst683KI = (((fConst667KI + -0.15748216f /* Sum */) / fConst666KI) + 0.9351402f /* Sum */); // step: 3593
		fConst684KI = (2.0f * (0.9351402f + -fConst671KI /* Sum */)); // step: 3597
		fConst685KI = (1.0f / (((fConst667KI + 0.78241307f /* Sum */) / fConst666KI) + 0.2452915f /* Sum */)); // step: 3610
		fConst686KI = (((fConst667KI + -0.78241307f /* Sum */) / fConst666KI) + 0.2452915f /* Sum */); // step: 3613
		fConst687KI = (2.0f * (0.2452915f + -fConst671KI /* Sum */)); // step: 3617
		fConst688KI = (0.0001f / fConst670KI); // step: 3627
		fConst689KI = (fConst688KI + 0.0004332272f /* Sum */); // step: 3628
		fConst690KI = (2.0f * (0.0004332272f + -fConst688KI /* Sum */)); // step: 3633
		fConst691KI = (1.0f / (((fConst667KI + 0.51247865f /* Sum */) / fConst666KI) + 0.6896214f /* Sum */)); // step: 3642
		fConst692KI = (((fConst667KI + -0.51247865f /* Sum */) / fConst666KI) + 0.6896214f /* Sum */); // step: 3645
		fConst693KI = (2.0f * (0.6896214f + -fConst671KI /* Sum */)); // step: 3649
		fConst694KI = (fConst671KI + 7.6217313f /* Sum */); // step: 3659
		fConst695KI = (2.0f * (7.6217313f + -fConst671KI /* Sum */)); // step: 3663
		fConst696KI = (1.0f / (((fConst667KI + 0.16840488f /* Sum */) / fConst666KI) + 1.0693583f /* Sum */)); // step: 3672
		fConst697KI = (((fConst667KI + -0.16840488f /* Sum */) / fConst666KI) + 1.0693583f /* Sum */); // step: 3675
		fConst698KI = (2.0f * (1.0693583f + -fConst671KI /* Sum */)); // step: 3679
		fConst699KI = (fConst671KI + 53.53615f /* Sum */); // step: 3689
		fConst700KI = (2.0f * (53.53615f + -fConst671KI /* Sum */)); // step: 3693
		fConst701KI = tanf((494.76984f / fConst0KI)); // step: 3701
		fConst702KI = (1.0f / fConst701KI); // step: 3702
		fConst703KI = (1.0f / (((fConst702KI + 3.1897273f /* Sum */) / fConst701KI) + 4.0767817f /* Sum */)); // step: 3706
		fConst704KI = (((fConst702KI + -3.1897273f /* Sum */) / fConst701KI) + 4.0767817f /* Sum */); // step: 3709
		fConst705KI = powf(fConst701KI,2.0f); // step: 3712
		fConst706KI = (1.0f / fConst705KI); // step: 3713
		fConst707KI = (2.0f * (4.0767817f + -fConst706KI /* Sum */)); // step: 3716
		fConst708KI = (0.0017661728f / fConst705KI); // step: 3726
		fConst709KI = (fConst708KI + 0.0004076782f /* Sum */); // step: 3727
		fConst710KI = (2.0f * (0.0004076782f + -fConst708KI /* Sum */)); // step: 3732
		fConst711KI = (1.0f / (((fConst702KI + 0.74313045f /* Sum */) / fConst701KI) + 1.4500711f /* Sum */)); // step: 3741
		fConst712KI = (((fConst702KI + -0.74313045f /* Sum */) / fConst701KI) + 1.4500711f /* Sum */); // step: 3744
		fConst713KI = (2.0f * (1.4500711f + -fConst706KI /* Sum */)); // step: 3748
		fConst714KI = (11.0520525f / fConst705KI); // step: 3758
		fConst715KI = (fConst714KI + 1.4500711f /* Sum */); // step: 3759
		fConst716KI = (2.0f * (1.4500711f + -fConst714KI /* Sum */)); // step: 3764
		fConst717KI = (1.0f / (((fConst702KI + 0.15748216f /* Sum */) / fConst701KI) + 0.9351402f /* Sum */)); // step: 3773
		fConst718KI = (((fConst702KI + -0.15748216f /* Sum */) / fConst701KI) + 0.9351402f /* Sum */); // step: 3776
		fConst719KI = (2.0f * (0.9351402f + -fConst706KI /* Sum */)); // step: 3780
		fConst720KI = (1.0f / (((fConst702KI + 0.78241307f /* Sum */) / fConst701KI) + 0.2452915f /* Sum */)); // step: 3793
		fConst721KI = (((fConst702KI + -0.78241307f /* Sum */) / fConst701KI) + 0.2452915f /* Sum */); // step: 3796
		fConst722KI = (2.0f * (0.2452915f + -fConst706KI /* Sum */)); // step: 3800
		fConst723KI = (0.0001f / fConst705KI); // step: 3810
		fConst724KI = (fConst723KI + 0.0004332272f /* Sum */); // step: 3811
		fConst725KI = (2.0f * (0.0004332272f + -fConst723KI /* Sum */)); // step: 3816
		fConst726KI = (1.0f / (((fConst702KI + 0.51247865f /* Sum */) / fConst701KI) + 0.6896214f /* Sum */)); // step: 3825
		fConst727KI = (((fConst702KI + -0.51247865f /* Sum */) / fConst701KI) + 0.6896214f /* Sum */); // step: 3828
		fConst728KI = (2.0f * (0.6896214f + -fConst706KI /* Sum */)); // step: 3832
		fConst729KI = (fConst706KI + 7.6217313f /* Sum */); // step: 3842
		fConst730KI = (2.0f * (7.6217313f + -fConst706KI /* Sum */)); // step: 3846
		fConst731KI = (1.0f / (((fConst702KI + 0.16840488f /* Sum */) / fConst701KI) + 1.0693583f /* Sum */)); // step: 3855
		fConst732KI = (((fConst702KI + -0.16840488f /* Sum */) / fConst701KI) + 1.0693583f /* Sum */); // step: 3858
		fConst733KI = (2.0f * (1.0693583f + -fConst706KI /* Sum */)); // step: 3862
		fConst734KI = (fConst706KI + 53.53615f /* Sum */); // step: 3872
		fConst735KI = (2.0f * (53.53615f + -fConst706KI /* Sum */)); // step: 3876
		fConst736KI = tanf((392.6991f / fConst0KI)); // step: 3884
		fConst737KI = (1.0f / fConst736KI); // step: 3885
		fConst738KI = (1.0f / (((fConst737KI + 3.1897273f /* Sum */) / fConst736KI) + 4.0767817f /* Sum */)); // step: 3889
		fConst739KI = (((fConst737KI + -3.1897273f /* Sum */) / fConst736KI) + 4.0767817f /* Sum */); // step: 3892
		fConst740KI = powf(fConst736KI,2.0f); // step: 3895
		fConst741KI = (1.0f / fConst740KI); // step: 3896
		fConst742KI = (2.0f * (4.0767817f + -fConst741KI /* Sum */)); // step: 3899
		fConst743KI = (0.0017661728f / fConst740KI); // step: 3909
		fConst744KI = (fConst743KI + 0.0004076782f /* Sum */); // step: 3910
		fConst745KI = (2.0f * (0.0004076782f + -fConst743KI /* Sum */)); // step: 3915
		fConst746KI = (1.0f / (((fConst737KI + 0.74313045f /* Sum */) / fConst736KI) + 1.4500711f /* Sum */)); // step: 3924
		fConst747KI = (((fConst737KI + -0.74313045f /* Sum */) / fConst736KI) + 1.4500711f /* Sum */); // step: 3927
		fConst748KI = (2.0f * (1.4500711f + -fConst741KI /* Sum */)); // step: 3931
		fConst749KI = (11.0520525f / fConst740KI); // step: 3941
		fConst750KI = (fConst749KI + 1.4500711f /* Sum */); // step: 3942
		fConst751KI = (2.0f * (1.4500711f + -fConst749KI /* Sum */)); // step: 3947
		fConst752KI = (1.0f / (((fConst737KI + 0.15748216f /* Sum */) / fConst736KI) + 0.9351402f /* Sum */)); // step: 3956
		fConst753KI = (((fConst737KI + -0.15748216f /* Sum */) / fConst736KI) + 0.9351402f /* Sum */); // step: 3959
		fConst754KI = (2.0f * (0.9351402f + -fConst741KI /* Sum */)); // step: 3963
		fConst755KI = (1.0f / (((fConst737KI + 0.78241307f /* Sum */) / fConst736KI) + 0.2452915f /* Sum */)); // step: 3976
		fConst756KI = (((fConst737KI + -0.78241307f /* Sum */) / fConst736KI) + 0.2452915f /* Sum */); // step: 3979
		fConst757KI = (2.0f * (0.2452915f + -fConst741KI /* Sum */)); // step: 3983
		fConst758KI = (0.0001f / fConst740KI); // step: 3993
		fConst759KI = (fConst758KI + 0.0004332272f /* Sum */); // step: 3994
		fConst760KI = (2.0f * (0.0004332272f + -fConst758KI /* Sum */)); // step: 3999
		fConst761KI = (1.0f / (((fConst737KI + 0.51247865f /* Sum */) / fConst736KI) + 0.6896214f /* Sum */)); // step: 4008
		fConst762KI = (((fConst737KI + -0.51247865f /* Sum */) / fConst736KI) + 0.6896214f /* Sum */); // step: 4011
		fConst763KI = (2.0f * (0.6896214f + -fConst741KI /* Sum */)); // step: 4015
		fConst764KI = (fConst741KI + 7.6217313f /* Sum */); // step: 4025
		fConst765KI = (2.0f * (7.6217313f + -fConst741KI /* Sum */)); // step: 4029
		fConst766KI = (1.0f / (((fConst737KI + 0.16840488f /* Sum */) / fConst736KI) + 1.0693583f /* Sum */)); // step: 4038
		fConst767KI = (((fConst737KI + -0.16840488f /* Sum */) / fConst736KI) + 1.0693583f /* Sum */); // step: 4041
		fConst768KI = (2.0f * (1.0693583f + -fConst741KI /* Sum */)); // step: 4045
		fConst769KI = (fConst741KI + 53.53615f /* Sum */); // step: 4055
		fConst770KI = (2.0f * (53.53615f + -fConst741KI /* Sum */)); // step: 4059
		fConst771KI = tanf((311.68546f / fConst0KI)); // step: 4067
		fConst772KI = (1.0f / fConst771KI); // step: 4068
		fConst773KI = (1.0f / (((fConst772KI + 3.1897273f /* Sum */) / fConst771KI) + 4.0767817f /* Sum */)); // step: 4072
		fConst774KI = (((fConst772KI + -3.1897273f /* Sum */) / fConst771KI) + 4.0767817f /* Sum */); // step: 4075
		fConst775KI = powf(fConst771KI,2.0f); // step: 4078
		fConst776KI = (1.0f / fConst775KI); // step: 4079
		fConst777KI = (2.0f * (4.0767817f + -fConst776KI /* Sum */)); // step: 4082
		fConst778KI = (0.0017661728f / fConst775KI); // step: 4092
		fConst779KI = (fConst778KI + 0.0004076782f /* Sum */); // step: 4093
		fConst780KI = (2.0f * (0.0004076782f + -fConst778KI /* Sum */)); // step: 4098
		fConst781KI = (1.0f / (((fConst772KI + 0.74313045f /* Sum */) / fConst771KI) + 1.4500711f /* Sum */)); // step: 4107
		fConst782KI = (((fConst772KI + -0.74313045f /* Sum */) / fConst771KI) + 1.4500711f /* Sum */); // step: 4110
		fConst783KI = (2.0f * (1.4500711f + -fConst776KI /* Sum */)); // step: 4114
		fConst784KI = (11.0520525f / fConst775KI); // step: 4124
		fConst785KI = (fConst784KI + 1.4500711f /* Sum */); // step: 4125
		fConst786KI = (2.0f * (1.4500711f + -fConst784KI /* Sum */)); // step: 4130
		fConst787KI = (1.0f / (((fConst772KI + 0.15748216f /* Sum */) / fConst771KI) + 0.9351402f /* Sum */)); // step: 4139
		fConst788KI = (((fConst772KI + -0.15748216f /* Sum */) / fConst771KI) + 0.9351402f /* Sum */); // step: 4142
		fConst789KI = (2.0f * (0.9351402f + -fConst776KI /* Sum */)); // step: 4146
		fConst790KI = (1.0f / (((fConst772KI + 0.78241307f /* Sum */) / fConst771KI) + 0.2452915f /* Sum */)); // step: 4159
		fConst791KI = (((fConst772KI + -0.78241307f /* Sum */) / fConst771KI) + 0.2452915f /* Sum */); // step: 4162
		fConst792KI = (2.0f * (0.2452915f + -fConst776KI /* Sum */)); // step: 4166
		fConst793KI = (0.0001f / fConst775KI); // step: 4176
		fConst794KI = (fConst793KI + 0.0004332272f /* Sum */); // step: 4177
		fConst795KI = (2.0f * (0.0004332272f + -fConst793KI /* Sum */)); // step: 4182
		fConst796KI = (1.0f / (((fConst772KI + 0.51247865f /* Sum */) / fConst771KI) + 0.6896214f /* Sum */)); // step: 4191
		fConst797KI = (((fConst772KI + -0.51247865f /* Sum */) / fConst771KI) + 0.6896214f /* Sum */); // step: 4194
		fConst798KI = (2.0f * (0.6896214f + -fConst776KI /* Sum */)); // step: 4198
		fConst799KI = (fConst776KI + 7.6217313f /* Sum */); // step: 4208
		fConst800KI = (2.0f * (7.6217313f + -fConst776KI /* Sum */)); // step: 4212
		fConst801KI = (1.0f / (((fConst772KI + 0.16840488f /* Sum */) / fConst771KI) + 1.0693583f /* Sum */)); // step: 4221
		fConst802KI = (((fConst772KI + -0.16840488f /* Sum */) / fConst771KI) + 1.0693583f /* Sum */); // step: 4224
		fConst803KI = (2.0f * (1.0693583f + -fConst776KI /* Sum */)); // step: 4228
		fConst804KI = (fConst776KI + 53.53615f /* Sum */); // step: 4238
		fConst805KI = (2.0f * (53.53615f + -fConst776KI /* Sum */)); // step: 4242
		fConst806KI = tanf((247.38492f / fConst0KI)); // step: 4250
		fConst807KI = (1.0f / fConst806KI); // step: 4251
		fConst808KI = (1.0f / (((fConst807KI + 3.1897273f /* Sum */) / fConst806KI) + 4.0767817f /* Sum */)); // step: 4255
		fConst809KI = (((fConst807KI + -3.1897273f /* Sum */) / fConst806KI) + 4.0767817f /* Sum */); // step: 4258
		fConst810KI = powf(fConst806KI,2.0f); // step: 4261
		fConst811KI = (1.0f / fConst810KI); // step: 4262
		fConst812KI = (2.0f * (4.0767817f + -fConst811KI /* Sum */)); // step: 4265
		fConst813KI = (0.0017661728f / fConst810KI); // step: 4275
		fConst814KI = (fConst813KI + 0.0004076782f /* Sum */); // step: 4276
		fConst815KI = (2.0f * (0.0004076782f + -fConst813KI /* Sum */)); // step: 4281
		fConst816KI = (1.0f / (((fConst807KI + 0.74313045f /* Sum */) / fConst806KI) + 1.4500711f /* Sum */)); // step: 4290
		fConst817KI = (((fConst807KI + -0.74313045f /* Sum */) / fConst806KI) + 1.4500711f /* Sum */); // step: 4293
		fConst818KI = (2.0f * (1.4500711f + -fConst811KI /* Sum */)); // step: 4297
		fConst819KI = (11.0520525f / fConst810KI); // step: 4307
		fConst820KI = (fConst819KI + 1.4500711f /* Sum */); // step: 4308
		fConst821KI = (2.0f * (1.4500711f + -fConst819KI /* Sum */)); // step: 4313
		fConst822KI = (1.0f / (((fConst807KI + 0.15748216f /* Sum */) / fConst806KI) + 0.9351402f /* Sum */)); // step: 4322
		fConst823KI = (((fConst807KI + -0.15748216f /* Sum */) / fConst806KI) + 0.9351402f /* Sum */); // step: 4325
		fConst824KI = (2.0f * (0.9351402f + -fConst811KI /* Sum */)); // step: 4329
		fConst825KI = (1.0f / (((fConst807KI + 0.78241307f /* Sum */) / fConst806KI) + 0.2452915f /* Sum */)); // step: 4342
		fConst826KI = (((fConst807KI + -0.78241307f /* Sum */) / fConst806KI) + 0.2452915f /* Sum */); // step: 4345
		fConst827KI = (2.0f * (0.2452915f + -fConst811KI /* Sum */)); // step: 4349
		fConst828KI = (0.0001f / fConst810KI); // step: 4359
		fConst829KI = (fConst828KI + 0.0004332272f /* Sum */); // step: 4360
		fConst830KI = (2.0f * (0.0004332272f + -fConst828KI /* Sum */)); // step: 4365
		fConst831KI = (1.0f / (((fConst807KI + 0.51247865f /* Sum */) / fConst806KI) + 0.6896214f /* Sum */)); // step: 4374
		fConst832KI = (((fConst807KI + -0.51247865f /* Sum */) / fConst806KI) + 0.6896214f /* Sum */); // step: 4377
		fConst833KI = (2.0f * (0.6896214f + -fConst811KI /* Sum */)); // step: 4381
		fConst834KI = (fConst811KI + 7.6217313f /* Sum */); // step: 4391
		fConst835KI = (2.0f * (7.6217313f + -fConst811KI /* Sum */)); // step: 4395
		fConst836KI = (1.0f / (((fConst807KI + 0.16840488f /* Sum */) / fConst806KI) + 1.0693583f /* Sum */)); // step: 4404
		fConst837KI = (((fConst807KI + -0.16840488f /* Sum */) / fConst806KI) + 1.0693583f /* Sum */); // step: 4407
		fConst838KI = (2.0f * (1.0693583f + -fConst811KI /* Sum */)); // step: 4411
		fConst839KI = (fConst811KI + 53.53615f /* Sum */); // step: 4421
		fConst840KI = (2.0f * (53.53615f + -fConst811KI /* Sum */)); // step: 4425
		fConst841KI = tanf((196.34955f / fConst0KI)); // step: 4433
		fConst842KI = (1.0f / fConst841KI); // step: 4434
		fConst843KI = (1.0f / (((fConst842KI + 3.1897273f /* Sum */) / fConst841KI) + 4.0767817f /* Sum */)); // step: 4438
		fConst844KI = (((fConst842KI + -3.1897273f /* Sum */) / fConst841KI) + 4.0767817f /* Sum */); // step: 4441
		fConst845KI = powf(fConst841KI,2.0f); // step: 4444
		fConst846KI = (1.0f / fConst845KI); // step: 4445
		fConst847KI = (2.0f * (4.0767817f + -fConst846KI /* Sum */)); // step: 4448
		fConst848KI = (0.0017661728f / fConst845KI); // step: 4458
		fConst849KI = (fConst848KI + 0.0004076782f /* Sum */); // step: 4459
		fConst850KI = (2.0f * (0.0004076782f + -fConst848KI /* Sum */)); // step: 4464
		fConst851KI = (1.0f / (((fConst842KI + 0.74313045f /* Sum */) / fConst841KI) + 1.4500711f /* Sum */)); // step: 4473
		fConst852KI = (((fConst842KI + -0.74313045f /* Sum */) / fConst841KI) + 1.4500711f /* Sum */); // step: 4476
		fConst853KI = (2.0f * (1.4500711f + -fConst846KI /* Sum */)); // step: 4480
		fConst854KI = (11.0520525f / fConst845KI); // step: 4490
		fConst855KI = (fConst854KI + 1.4500711f /* Sum */); // step: 4491
		fConst856KI = (2.0f * (1.4500711f + -fConst854KI /* Sum */)); // step: 4496
		fConst857KI = (1.0f / (((fConst842KI + 0.15748216f /* Sum */) / fConst841KI) + 0.9351402f /* Sum */)); // step: 4505
		fConst858KI = (((fConst842KI + -0.15748216f /* Sum */) / fConst841KI) + 0.9351402f /* Sum */); // step: 4508
		fConst859KI = (2.0f * (0.9351402f + -fConst846KI /* Sum */)); // step: 4512
		fConst860KI = (1.0f / (((fConst842KI + 0.78241307f /* Sum */) / fConst841KI) + 0.2452915f /* Sum */)); // step: 4525
		fConst861KI = (((fConst842KI + -0.78241307f /* Sum */) / fConst841KI) + 0.2452915f /* Sum */); // step: 4528
		fConst862KI = (2.0f * (0.2452915f + -fConst846KI /* Sum */)); // step: 4532
		fConst863KI = (0.0001f / fConst845KI); // step: 4542
		fConst864KI = (fConst863KI + 0.0004332272f /* Sum */); // step: 4543
		fConst865KI = (2.0f * (0.0004332272f + -fConst863KI /* Sum */)); // step: 4548
		fConst866KI = (1.0f / (((fConst842KI + 0.51247865f /* Sum */) / fConst841KI) + 0.6896214f /* Sum */)); // step: 4557
		fConst867KI = (((fConst842KI + -0.51247865f /* Sum */) / fConst841KI) + 0.6896214f /* Sum */); // step: 4560
		fConst868KI = (2.0f * (0.6896214f + -fConst846KI /* Sum */)); // step: 4564
		fConst869KI = (fConst846KI + 7.6217313f /* Sum */); // step: 4574
		fConst870KI = (2.0f * (7.6217313f + -fConst846KI /* Sum */)); // step: 4578
		fConst871KI = (1.0f / (((fConst842KI + 0.16840488f /* Sum */) / fConst841KI) + 1.0693583f /* Sum */)); // step: 4587
		fConst872KI = (((fConst842KI + -0.16840488f /* Sum */) / fConst841KI) + 1.0693583f /* Sum */); // step: 4590
		fConst873KI = (2.0f * (1.0693583f + -fConst846KI /* Sum */)); // step: 4594
		fConst874KI = (fConst846KI + 53.53615f /* Sum */); // step: 4604
		fConst875KI = (2.0f * (53.53615f + -fConst846KI /* Sum */)); // step: 4608
		fConst876KI = tanf((155.84273f / fConst0KI)); // step: 4616
		fConst877KI = (1.0f / fConst876KI); // step: 4617
		fConst878KI = (1.0f / (((fConst877KI + 3.1897273f /* Sum */) / fConst876KI) + 4.0767817f /* Sum */)); // step: 4621
		fConst879KI = (((fConst877KI + -3.1897273f /* Sum */) / fConst876KI) + 4.0767817f /* Sum */); // step: 4624
		fConst880KI = powf(fConst876KI,2.0f); // step: 4627
		fConst881KI = (1.0f / fConst880KI); // step: 4628
		fConst882KI = (2.0f * (4.0767817f + -fConst881KI /* Sum */)); // step: 4631
		fConst883KI = (0.0017661728f / fConst880KI); // step: 4641
		fConst884KI = (fConst883KI + 0.0004076782f /* Sum */); // step: 4642
		fConst885KI = (2.0f * (0.0004076782f + -fConst883KI /* Sum */)); // step: 4647
		fConst886KI = (1.0f / (((fConst877KI + 0.74313045f /* Sum */) / fConst876KI) + 1.4500711f /* Sum */)); // step: 4656
		fConst887KI = (((fConst877KI + -0.74313045f /* Sum */) / fConst876KI) + 1.4500711f /* Sum */); // step: 4659
		fConst888KI = (2.0f * (1.4500711f + -fConst881KI /* Sum */)); // step: 4663
		fConst889KI = (11.0520525f / fConst880KI); // step: 4673
		fConst890KI = (fConst889KI + 1.4500711f /* Sum */); // step: 4674
		fConst891KI = (2.0f * (1.4500711f + -fConst889KI /* Sum */)); // step: 4679
		fConst892KI = (1.0f / (((fConst877KI + 0.15748216f /* Sum */) / fConst876KI) + 0.9351402f /* Sum */)); // step: 4688
		fConst893KI = (((fConst877KI + -0.15748216f /* Sum */) / fConst876KI) + 0.9351402f /* Sum */); // step: 4691
		fConst894KI = (2.0f * (0.9351402f + -fConst881KI /* Sum */)); // step: 4695
		fConst895KI = (1.0f / (((fConst877KI + 0.78241307f /* Sum */) / fConst876KI) + 0.2452915f /* Sum */)); // step: 4708
		fConst896KI = (((fConst877KI + -0.78241307f /* Sum */) / fConst876KI) + 0.2452915f /* Sum */); // step: 4711
		fConst897KI = (2.0f * (0.2452915f + -fConst881KI /* Sum */)); // step: 4715
		fConst898KI = (0.0001f / fConst880KI); // step: 4725
		fConst899KI = (fConst898KI + 0.0004332272f /* Sum */); // step: 4726
		fConst900KI = (2.0f * (0.0004332272f + -fConst898KI /* Sum */)); // step: 4731
		fConst901KI = (1.0f / (((fConst877KI + 0.51247865f /* Sum */) / fConst876KI) + 0.6896214f /* Sum */)); // step: 4740
		fConst902KI = (((fConst877KI + -0.51247865f /* Sum */) / fConst876KI) + 0.6896214f /* Sum */); // step: 4743
		fConst903KI = (2.0f * (0.6896214f + -fConst881KI /* Sum */)); // step: 4747
		fConst904KI = (fConst881KI + 7.6217313f /* Sum */); // step: 4757
		fConst905KI = (2.0f * (7.6217313f + -fConst881KI /* Sum */)); // step: 4761
		fConst906KI = (1.0f / (((fConst877KI + 0.16840488f /* Sum */) / fConst876KI) + 1.0693583f /* Sum */)); // step: 4770
		fConst907KI = (((fConst877KI + -0.16840488f /* Sum */) / fConst876KI) + 1.0693583f /* Sum */); // step: 4773
		fConst908KI = (2.0f * (1.0693583f + -fConst881KI /* Sum */)); // step: 4777
		fConst909KI = (fConst881KI + 53.53615f /* Sum */); // step: 4787
		fConst910KI = (2.0f * (53.53615f + -fConst881KI /* Sum */)); // step: 4791
		fConst911KI = tanf((123.69246f / fConst0KI)); // step: 4799
		fConst912KI = (1.0f / fConst911KI); // step: 4800
		fConst913KI = (1.0f / (((fConst912KI + 3.1897273f /* Sum */) / fConst911KI) + 4.0767817f /* Sum */)); // step: 4804
		fConst914KI = (((fConst912KI + -3.1897273f /* Sum */) / fConst911KI) + 4.0767817f /* Sum */); // step: 4807
		fConst915KI = powf(fConst911KI,2.0f); // step: 4810
		fConst916KI = (1.0f / fConst915KI); // step: 4811
		fConst917KI = (2.0f * (4.0767817f + -fConst916KI /* Sum */)); // step: 4814
		fConst918KI = (0.0017661728f / fConst915KI); // step: 4824
		fConst919KI = (fConst918KI + 0.0004076782f /* Sum */); // step: 4825
		fConst920KI = (2.0f * (0.0004076782f + -fConst918KI /* Sum */)); // step: 4830
		fConst921KI = (1.0f / (((fConst912KI + 0.74313045f /* Sum */) / fConst911KI) + 1.4500711f /* Sum */)); // step: 4839
		fConst922KI = (((fConst912KI + -0.74313045f /* Sum */) / fConst911KI) + 1.4500711f /* Sum */); // step: 4842
		fConst923KI = (2.0f * (1.4500711f + -fConst916KI /* Sum */)); // step: 4846
		fConst924KI = (11.0520525f / fConst915KI); // step: 4856
		fConst925KI = (fConst924KI + 1.4500711f /* Sum */); // step: 4857
		fConst926KI = (2.0f * (1.4500711f + -fConst924KI /* Sum */)); // step: 4862
		fConst927KI = (1.0f / (((fConst912KI + 0.15748216f /* Sum */) / fConst911KI) + 0.9351402f /* Sum */)); // step: 4871
		fConst928KI = (((fConst912KI + -0.15748216f /* Sum */) / fConst911KI) + 0.9351402f /* Sum */); // step: 4874
		fConst929KI = (2.0f * (0.9351402f + -fConst916KI /* Sum */)); // step: 4878
		fConst930KI = (1.0f / (((fConst912KI + 0.78241307f /* Sum */) / fConst911KI) + 0.2452915f /* Sum */)); // step: 4891
		fConst931KI = (((fConst912KI + -0.78241307f /* Sum */) / fConst911KI) + 0.2452915f /* Sum */); // step: 4894
		fConst932KI = (2.0f * (0.2452915f + -fConst916KI /* Sum */)); // step: 4898
		fConst933KI = (0.0001f / fConst915KI); // step: 4908
		fConst934KI = (fConst933KI + 0.0004332272f /* Sum */); // step: 4909
		fConst935KI = (2.0f * (0.0004332272f + -fConst933KI /* Sum */)); // step: 4914
		fConst936KI = (1.0f / (((fConst912KI + 0.51247865f /* Sum */) / fConst911KI) + 0.6896214f /* Sum */)); // step: 4923
		fConst937KI = (((fConst912KI + -0.51247865f /* Sum */) / fConst911KI) + 0.6896214f /* Sum */); // step: 4926
		fConst938KI = (2.0f * (0.6896214f + -fConst916KI /* Sum */)); // step: 4930
		fConst939KI = (fConst916KI + 7.6217313f /* Sum */); // step: 4940
		fConst940KI = (2.0f * (7.6217313f + -fConst916KI /* Sum */)); // step: 4944
		fConst941KI = (1.0f / (((fConst912KI + 0.16840488f /* Sum */) / fConst911KI) + 1.0693583f /* Sum */)); // step: 4953
		fConst942KI = (((fConst912KI + -0.16840488f /* Sum */) / fConst911KI) + 1.0693583f /* Sum */); // step: 4956
		fConst943KI = (2.0f * (1.0693583f + -fConst916KI /* Sum */)); // step: 4960
		fConst944KI = (fConst916KI + 53.53615f /* Sum */); // step: 4970
		fConst945KI = (2.0f * (53.53615f + -fConst916KI /* Sum */)); // step: 4974
		fConst946KI = tanf((98.174774f / fConst0KI)); // step: 4982
		fConst947KI = (1.0f / fConst946KI); // step: 4983
		fConst948KI = (1.0f / (((fConst947KI + 3.1897273f /* Sum */) / fConst946KI) + 4.0767817f /* Sum */)); // step: 4987
		fConst949KI = (((fConst947KI + -3.1897273f /* Sum */) / fConst946KI) + 4.0767817f /* Sum */); // step: 4990
		fConst950KI = powf(fConst946KI,2.0f); // step: 4993
		fConst951KI = (1.0f / fConst950KI); // step: 4994
		fConst952KI = (2.0f * (4.0767817f + -fConst951KI /* Sum */)); // step: 4997
		fConst953KI = (0.0017661728f / fConst950KI); // step: 5007
		fConst954KI = (fConst953KI + 0.0004076782f /* Sum */); // step: 5008
		fConst955KI = (2.0f * (0.0004076782f + -fConst953KI /* Sum */)); // step: 5013
		fConst956KI = (1.0f / (((fConst947KI + 0.74313045f /* Sum */) / fConst946KI) + 1.4500711f /* Sum */)); // step: 5022
		fConst957KI = (((fConst947KI + -0.74313045f /* Sum */) / fConst946KI) + 1.4500711f /* Sum */); // step: 5025
		fConst958KI = (2.0f * (1.4500711f + -fConst951KI /* Sum */)); // step: 5029
		fConst959KI = (11.0520525f / fConst950KI); // step: 5039
		fConst960KI = (fConst959KI + 1.4500711f /* Sum */); // step: 5040
		fConst961KI = (2.0f * (1.4500711f + -fConst959KI /* Sum */)); // step: 5045
		fConst962KI = (1.0f / (((fConst947KI + 0.15748216f /* Sum */) / fConst946KI) + 0.9351402f /* Sum */)); // step: 5054
		fConst963KI = (((fConst947KI + -0.15748216f /* Sum */) / fConst946KI) + 0.9351402f /* Sum */); // step: 5057
		fConst964KI = (2.0f * (0.9351402f + -fConst951KI /* Sum */)); // step: 5061
		fConst965KI = (1.0f / (((fConst947KI + 0.78241307f /* Sum */) / fConst946KI) + 0.2452915f /* Sum */)); // step: 5074
		fConst966KI = (((fConst947KI + -0.78241307f /* Sum */) / fConst946KI) + 0.2452915f /* Sum */); // step: 5077
		fConst967KI = (2.0f * (0.2452915f + -fConst951KI /* Sum */)); // step: 5081
		fConst968KI = (0.0001f / fConst950KI); // step: 5091
		fConst969KI = (fConst968KI + 0.0004332272f /* Sum */); // step: 5092
		fConst970KI = (2.0f * (0.0004332272f + -fConst968KI /* Sum */)); // step: 5097
		fConst971KI = (1.0f / (((fConst947KI + 0.51247865f /* Sum */) / fConst946KI) + 0.6896214f /* Sum */)); // step: 5106
		fConst972KI = (((fConst947KI + -0.51247865f /* Sum */) / fConst946KI) + 0.6896214f /* Sum */); // step: 5109
		fConst973KI = (2.0f * (0.6896214f + -fConst951KI /* Sum */)); // step: 5113
		fConst974KI = (fConst951KI + 7.6217313f /* Sum */); // step: 5123
		fConst975KI = (2.0f * (7.6217313f + -fConst951KI /* Sum */)); // step: 5127
		fConst976KI = (1.0f / (((fConst947KI + 0.16840488f /* Sum */) / fConst946KI) + 1.0693583f /* Sum */)); // step: 5136
		fConst977KI = (((fConst947KI + -0.16840488f /* Sum */) / fConst946KI) + 1.0693583f /* Sum */); // step: 5139
		fConst978KI = (2.0f * (1.0693583f + -fConst951KI /* Sum */)); // step: 5143
		fConst979KI = (fConst951KI + 53.53615f /* Sum */); // step: 5153
		fConst980KI = (2.0f * (53.53615f + -fConst951KI /* Sum */)); // step: 5157
		fConst981KI = tanf((77.921364f / fConst0KI)); // step: 5165
		fConst982KI = (1.0f / fConst981KI); // step: 5166
		fConst983KI = (1.0f / (((fConst982KI + 3.1897273f /* Sum */) / fConst981KI) + 4.0767817f /* Sum */)); // step: 5170
		fConst984KI = (((fConst982KI + -3.1897273f /* Sum */) / fConst981KI) + 4.0767817f /* Sum */); // step: 5173
		fConst985KI = powf(fConst981KI,2.0f); // step: 5176
		fConst986KI = (1.0f / fConst985KI); // step: 5177
		fConst987KI = (2.0f * (4.0767817f + -fConst986KI /* Sum */)); // step: 5180
		fConst988KI = (0.0017661728f / fConst985KI); // step: 5190
		fConst989KI = (fConst988KI + 0.0004076782f /* Sum */); // step: 5191
		fConst990KI = (2.0f * (0.0004076782f + -fConst988KI /* Sum */)); // step: 5196
		fConst991KI = (1.0f / (((fConst982KI + 0.74313045f /* Sum */) / fConst981KI) + 1.4500711f /* Sum */)); // step: 5205
		fConst992KI = (((fConst982KI + -0.74313045f /* Sum */) / fConst981KI) + 1.4500711f /* Sum */); // step: 5208
		fConst993KI = (2.0f * (1.4500711f + -fConst986KI /* Sum */)); // step: 5212
		fConst994KI = (11.0520525f / fConst985KI); // step: 5222
		fConst995KI = (fConst994KI + 1.4500711f /* Sum */); // step: 5223
		fConst996KI = (2.0f * (1.4500711f + -fConst994KI /* Sum */)); // step: 5228
		fConst997KI = (1.0f / (((fConst982KI + 0.15748216f /* Sum */) / fConst981KI) + 0.9351402f /* Sum */)); // step: 5237
		fConst998KI = (((fConst982KI + -0.15748216f /* Sum */) / fConst981KI) + 0.9351402f /* Sum */); // step: 5240
		fConst999KI = (2.0f * (0.9351402f + -fConst986KI /* Sum */)); // step: 5244
		fConst1000KI = (1.0f / (((fConst982KI + 0.78241307f /* Sum */) / fConst981KI) + 0.2452915f /* Sum */)); // step: 5257
		fConst1001KI = (((fConst982KI + -0.78241307f /* Sum */) / fConst981KI) + 0.2452915f /* Sum */); // step: 5260
		fConst1002KI = (2.0f * (0.2452915f + -fConst986KI /* Sum */)); // step: 5264
		fConst1003KI = (0.0001f / fConst985KI); // step: 5274
		fConst1004KI = (fConst1003KI + 0.0004332272f /* Sum */); // step: 5275
		fConst1005KI = (2.0f * (0.0004332272f + -fConst1003KI /* Sum */)); // step: 5280
		fConst1006KI = (1.0f / (((fConst982KI + 0.51247865f /* Sum */) / fConst981KI) + 0.6896214f /* Sum */)); // step: 5289
		fConst1007KI = (((fConst982KI + -0.51247865f /* Sum */) / fConst981KI) + 0.6896214f /* Sum */); // step: 5292
		fConst1008KI = (2.0f * (0.6896214f + -fConst986KI /* Sum */)); // step: 5296
		fConst1009KI = (fConst986KI + 7.6217313f /* Sum */); // step: 5306
		fConst1010KI = (2.0f * (7.6217313f + -fConst986KI /* Sum */)); // step: 5310
		fConst1011KI = (1.0f / (((fConst982KI + 0.16840488f /* Sum */) / fConst981KI) + 1.0693583f /* Sum */)); // step: 5319
		fConst1012KI = (((fConst982KI + -0.16840488f /* Sum */) / fConst981KI) + 1.0693583f /* Sum */); // step: 5322
		fConst1013KI = (2.0f * (1.0693583f + -fConst986KI /* Sum */)); // step: 5326
		fConst1014KI = (1e+03f / fConst0KI); // step: 5347
		fConst1015KI = (50.06381f / fConst5KI); // step: 5356
		fConst1016KI = (fConst1015KI + 0.9351402f /* Sum */); // step: 5357
		fConst1017KI = (2.0f * (0.9351402f + -fConst1015KI /* Sum */)); // step: 5362
		fConst1018KI = (50.06381f / fConst40KI); // step: 5385
		fConst1019KI = (fConst1018KI + 0.9351402f /* Sum */); // step: 5386
		fConst1020KI = (2.0f * (0.9351402f + -fConst1018KI /* Sum */)); // step: 5391
		fConst1021KI = (50.06381f / fConst75KI); // step: 5410
		fConst1022KI = (fConst1021KI + 0.9351402f /* Sum */); // step: 5411
		fConst1023KI = (2.0f * (0.9351402f + -fConst1021KI /* Sum */)); // step: 5416
		fConst1024KI = (50.06381f / fConst110KI); // step: 5435
		fConst1025KI = (fConst1024KI + 0.9351402f /* Sum */); // step: 5436
		fConst1026KI = (2.0f * (0.9351402f + -fConst1024KI /* Sum */)); // step: 5441
		fConst1027KI = (50.06381f / fConst145KI); // step: 5460
		fConst1028KI = (fConst1027KI + 0.9351402f /* Sum */); // step: 5461
		fConst1029KI = (2.0f * (0.9351402f + -fConst1027KI /* Sum */)); // step: 5466
		fConst1030KI = (50.06381f / fConst180KI); // step: 5485
		fConst1031KI = (fConst1030KI + 0.9351402f /* Sum */); // step: 5486
		fConst1032KI = (2.0f * (0.9351402f + -fConst1030KI /* Sum */)); // step: 5491
		fConst1033KI = (50.06381f / fConst215KI); // step: 5510
		fConst1034KI = (fConst1033KI + 0.9351402f /* Sum */); // step: 5511
		fConst1035KI = (2.0f * (0.9351402f + -fConst1033KI /* Sum */)); // step: 5516
		fConst1036KI = (50.06381f / fConst250KI); // step: 5535
		fConst1037KI = (fConst1036KI + 0.9351402f /* Sum */); // step: 5536
		fConst1038KI = (2.0f * (0.9351402f + -fConst1036KI /* Sum */)); // step: 5541
		fConst1039KI = (50.06381f / fConst285KI); // step: 5560
		fConst1040KI = (fConst1039KI + 0.9351402f /* Sum */); // step: 5561
		fConst1041KI = (2.0f * (0.9351402f + -fConst1039KI /* Sum */)); // step: 5566
		fConst1042KI = (50.06381f / fConst320KI); // step: 5585
		fConst1043KI = (fConst1042KI + 0.9351402f /* Sum */); // step: 5586
		fConst1044KI = (2.0f * (0.9351402f + -fConst1042KI /* Sum */)); // step: 5591
		fConst1045KI = (50.06381f / fConst355KI); // step: 5610
		fConst1046KI = (fConst1045KI + 0.9351402f /* Sum */); // step: 5611
		fConst1047KI = (2.0f * (0.9351402f + -fConst1045KI /* Sum */)); // step: 5616
		fConst1048KI = (50.06381f / fConst390KI); // step: 5635
		fConst1049KI = (fConst1048KI + 0.9351402f /* Sum */); // step: 5636
		fConst1050KI = (2.0f * (0.9351402f + -fConst1048KI /* Sum */)); // step: 5641
		fConst1051KI = (50.06381f / fConst425KI); // step: 5660
		fConst1052KI = (fConst1051KI + 0.9351402f /* Sum */); // step: 5661
		fConst1053KI = (2.0f * (0.9351402f + -fConst1051KI /* Sum */)); // step: 5666
		fConst1054KI = (50.06381f / fConst460KI); // step: 5685
		fConst1055KI = (fConst1054KI + 0.9351402f /* Sum */); // step: 5686
		fConst1056KI = (2.0f * (0.9351402f + -fConst1054KI /* Sum */)); // step: 5691
		fConst1057KI = (50.06381f / fConst495KI); // step: 5710
		fConst1058KI = (fConst1057KI + 0.9351402f /* Sum */); // step: 5711
		fConst1059KI = (2.0f * (0.9351402f + -fConst1057KI /* Sum */)); // step: 5716
		fConst1060KI = (50.06381f / fConst530KI); // step: 5735
		fConst1061KI = (fConst1060KI + 0.9351402f /* Sum */); // step: 5736
		fConst1062KI = (2.0f * (0.9351402f + -fConst1060KI /* Sum */)); // step: 5741
		fConst1063KI = (50.06381f / fConst565KI); // step: 5760
		fConst1064KI = (fConst1063KI + 0.9351402f /* Sum */); // step: 5761
		fConst1065KI = (2.0f * (0.9351402f + -fConst1063KI /* Sum */)); // step: 5766
		fConst1066KI = (50.06381f / fConst600KI); // step: 5785
		fConst1067KI = (fConst1066KI + 0.9351402f /* Sum */); // step: 5786
		fConst1068KI = (2.0f * (0.9351402f + -fConst1066KI /* Sum */)); // step: 5791
		fConst1069KI = (50.06381f / fConst635KI); // step: 5810
		fConst1070KI = (fConst1069KI + 0.9351402f /* Sum */); // step: 5811
		fConst1071KI = (2.0f * (0.9351402f + -fConst1069KI /* Sum */)); // step: 5816
		fConst1072KI = (50.06381f / fConst670KI); // step: 5835
		fConst1073KI = (fConst1072KI + 0.9351402f /* Sum */); // step: 5836
		fConst1074KI = (2.0f * (0.9351402f + -fConst1072KI /* Sum */)); // step: 5841
		fConst1075KI = (50.06381f / fConst705KI); // step: 5860
		fConst1076KI = (fConst1075KI + 0.9351402f /* Sum */); // step: 5861
		fConst1077KI = (2.0f * (0.9351402f + -fConst1075KI /* Sum */)); // step: 5866
		fConst1078KI = (50.06381f / fConst740KI); // step: 5885
		fConst1079KI = (fConst1078KI + 0.9351402f /* Sum */); // step: 5886
		fConst1080KI = (2.0f * (0.9351402f + -fConst1078KI /* Sum */)); // step: 5891
		fConst1081KI = (50.06381f / fConst775KI); // step: 5910
		fConst1082KI = (fConst1081KI + 0.9351402f /* Sum */); // step: 5911
		fConst1083KI = (2.0f * (0.9351402f + -fConst1081KI /* Sum */)); // step: 5916
		fConst1084KI = (50.06381f / fConst810KI); // step: 5935
		fConst1085KI = (fConst1084KI + 0.9351402f /* Sum */); // step: 5936
		fConst1086KI = (2.0f * (0.9351402f + -fConst1084KI /* Sum */)); // step: 5941
		fConst1087KI = (50.06381f / fConst845KI); // step: 5960
		fConst1088KI = (fConst1087KI + 0.9351402f /* Sum */); // step: 5961
		fConst1089KI = (2.0f * (0.9351402f + -fConst1087KI /* Sum */)); // step: 5966
		fConst1090KI = (50.06381f / fConst880KI); // step: 5985
		fConst1091KI = (fConst1090KI + 0.9351402f /* Sum */); // step: 5986
		fConst1092KI = (2.0f * (0.9351402f + -fConst1090KI /* Sum */)); // step: 5991
		fConst1093KI = (50.06381f / fConst915KI); // step: 6010
		fConst1094KI = (fConst1093KI + 0.9351402f /* Sum */); // step: 6011
		fConst1095KI = (2.0f * (0.9351402f + -fConst1093KI /* Sum */)); // step: 6016
		fConst1096KI = (50.06381f / fConst950KI); // step: 6035
		fConst1097KI = (fConst1096KI + 0.9351402f /* Sum */); // step: 6036
		fConst1098KI = (2.0f * (0.9351402f + -fConst1096KI /* Sum */)); // step: 6041
		fConst1099KI = (50.06381f / fConst985KI); // step: 6060
		fConst1100KI = (fConst1099KI + 0.9351402f /* Sum */); // step: 6061
		fConst1101KI = (2.0f * (0.9351402f + -fConst1099KI /* Sum */)); // step: 6066
		fConst1102KI = (fConst986KI + 53.53615f /* Sum */); // step: 6085
		fConst1103KI = (2.0f * (53.53615f + -fConst986KI /* Sum */)); // step: 6089
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 5e+01f;
		fslider1 = 1e+02f;
	}
	virtual void instanceClear() {
		fVec1SEState = 0;
		for (int j = 0; j < 2; j++) { fVec0SEState[j] = 0; }
		fVec6SEState = 0;
		for (int j = 0; j < 2; j++) { fVec5SEState[j] = 0; }
		fVec11SEState = 0;
		for (int j = 0; j < 2; j++) { fVec10SEState[j] = 0; }
		fVec14SEState = 0;
		for (int j = 0; j < 2; j++) { fVec13SEState[j] = 0; }
		fVec19SEState = 0;
		for (int j = 0; j < 2; j++) { fVec18SEState[j] = 0; }
		fVec24SEState = 0;
		for (int j = 0; j < 2; j++) { fVec23SEState[j] = 0; }
		fVec29SEState = 0;
		for (int j = 0; j < 2; j++) { fVec28SEState[j] = 0; }
		fVec34SEState = 0;
		for (int j = 0; j < 2; j++) { fVec33SEState[j] = 0; }
		fVec39SEState = 0;
		for (int j = 0; j < 2; j++) { fVec38SEState[j] = 0; }
		fVec42SEState = 0;
		for (int j = 0; j < 2; j++) { fVec41SEState[j] = 0; }
		fVec47SEState = 0;
		for (int j = 0; j < 2; j++) { fVec46SEState[j] = 0; }
		fVec52SEState = 0;
		for (int j = 0; j < 2; j++) { fVec51SEState[j] = 0; }
		fVec57SEState = 0;
		for (int j = 0; j < 2; j++) { fVec56SEState[j] = 0; }
		fVec62SEState = 0;
		for (int j = 0; j < 2; j++) { fVec61SEState[j] = 0; }
		fVec67SEState = 0;
		for (int j = 0; j < 2; j++) { fVec66SEState[j] = 0; }
		fVec70SEState = 0;
		for (int j = 0; j < 2; j++) { fVec69SEState[j] = 0; }
		fVec75SEState = 0;
		for (int j = 0; j < 2; j++) { fVec74SEState[j] = 0; }
		fVec80SEState = 0;
		for (int j = 0; j < 2; j++) { fVec79SEState[j] = 0; }
		fVec85SEState = 0;
		for (int j = 0; j < 2; j++) { fVec84SEState[j] = 0; }
		fVec90SEState = 0;
		for (int j = 0; j < 2; j++) { fVec89SEState[j] = 0; }
		fVec95SEState = 0;
		for (int j = 0; j < 2; j++) { fVec94SEState[j] = 0; }
		fVec98SEState = 0;
		for (int j = 0; j < 2; j++) { fVec97SEState[j] = 0; }
		fVec103SEState = 0;
		for (int j = 0; j < 2; j++) { fVec102SEState[j] = 0; }
		fVec108SEState = 0;
		for (int j = 0; j < 2; j++) { fVec107SEState[j] = 0; }
		fVec113SEState = 0;
		for (int j = 0; j < 2; j++) { fVec112SEState[j] = 0; }
		fVec118SEState = 0;
		for (int j = 0; j < 2; j++) { fVec117SEState[j] = 0; }
		fVec123SEState = 0;
		for (int j = 0; j < 2; j++) { fVec122SEState[j] = 0; }
		fVec126SEState = 0;
		for (int j = 0; j < 2; j++) { fVec125SEState[j] = 0; }
		fVec131SEState = 0;
		for (int j = 0; j < 2; j++) { fVec130SEState[j] = 0; }
		fVec136SEState = 0;
		for (int j = 0; j < 2; j++) { fVec135SEState[j] = 0; }
		fVec141SEState = 0;
		for (int j = 0; j < 2; j++) { fVec140SEState[j] = 0; }
		fVec146SEState = 0;
		for (int j = 0; j < 2; j++) { fVec145SEState[j] = 0; }
		fVec151SEState = 0;
		for (int j = 0; j < 2; j++) { fVec150SEState[j] = 0; }
		fVec154SEState = 0;
		for (int j = 0; j < 2; j++) { fVec153SEState[j] = 0; }
		fVec159SEState = 0;
		for (int j = 0; j < 2; j++) { fVec158SEState[j] = 0; }
		fVec164SEState = 0;
		for (int j = 0; j < 2; j++) { fVec163SEState[j] = 0; }
		fVec169SEState = 0;
		for (int j = 0; j < 2; j++) { fVec168SEState[j] = 0; }
		fVec174SEState = 0;
		for (int j = 0; j < 2; j++) { fVec173SEState[j] = 0; }
		fVec179SEState = 0;
		for (int j = 0; j < 2; j++) { fVec178SEState[j] = 0; }
		fVec182SEState = 0;
		for (int j = 0; j < 2; j++) { fVec181SEState[j] = 0; }
		fVec187SEState = 0;
		for (int j = 0; j < 2; j++) { fVec186SEState[j] = 0; }
		fVec192SEState = 0;
		for (int j = 0; j < 2; j++) { fVec191SEState[j] = 0; }
		fVec197SEState = 0;
		for (int j = 0; j < 2; j++) { fVec196SEState[j] = 0; }
		fVec202SEState = 0;
		for (int j = 0; j < 2; j++) { fVec201SEState[j] = 0; }
		fVec207SEState = 0;
		for (int j = 0; j < 2; j++) { fVec206SEState[j] = 0; }
		fVec210SEState = 0;
		for (int j = 0; j < 2; j++) { fVec209SEState[j] = 0; }
		fVec215SEState = 0;
		for (int j = 0; j < 2; j++) { fVec214SEState[j] = 0; }
		fVec220SEState = 0;
		for (int j = 0; j < 2; j++) { fVec219SEState[j] = 0; }
		fVec225SEState = 0;
		for (int j = 0; j < 2; j++) { fVec224SEState[j] = 0; }
		fVec230SEState = 0;
		for (int j = 0; j < 2; j++) { fVec229SEState[j] = 0; }
		fVec235SEState = 0;
		for (int j = 0; j < 2; j++) { fVec234SEState[j] = 0; }
		fVec238SEState = 0;
		for (int j = 0; j < 2; j++) { fVec237SEState[j] = 0; }
		fVec243SEState = 0;
		for (int j = 0; j < 2; j++) { fVec242SEState[j] = 0; }
		fVec248SEState = 0;
		for (int j = 0; j < 2; j++) { fVec247SEState[j] = 0; }
		fVec253SEState = 0;
		for (int j = 0; j < 2; j++) { fVec252SEState[j] = 0; }
		fVec258SEState = 0;
		for (int j = 0; j < 2; j++) { fVec257SEState[j] = 0; }
		fVec263SEState = 0;
		for (int j = 0; j < 2; j++) { fVec262SEState[j] = 0; }
		fVec266SEState = 0;
		for (int j = 0; j < 2; j++) { fVec265SEState[j] = 0; }
		fVec271SEState = 0;
		for (int j = 0; j < 2; j++) { fVec270SEState[j] = 0; }
		fVec276SEState = 0;
		for (int j = 0; j < 2; j++) { fVec275SEState[j] = 0; }
		fVec281SEState = 0;
		for (int j = 0; j < 2; j++) { fVec280SEState[j] = 0; }
		fVec286SEState = 0;
		for (int j = 0; j < 2; j++) { fVec285SEState[j] = 0; }
		fVec291SEState = 0;
		for (int j = 0; j < 2; j++) { fVec290SEState[j] = 0; }
		fVec294SEState = 0;
		for (int j = 0; j < 2; j++) { fVec293SEState[j] = 0; }
		fVec299SEState = 0;
		for (int j = 0; j < 2; j++) { fVec298SEState[j] = 0; }
		fVec304SEState = 0;
		for (int j = 0; j < 2; j++) { fVec303SEState[j] = 0; }
		fVec309SEState = 0;
		for (int j = 0; j < 2; j++) { fVec308SEState[j] = 0; }
		fVec314SEState = 0;
		for (int j = 0; j < 2; j++) { fVec313SEState[j] = 0; }
		fVec319SEState = 0;
		for (int j = 0; j < 2; j++) { fVec318SEState[j] = 0; }
		fVec322SEState = 0;
		for (int j = 0; j < 2; j++) { fVec321SEState[j] = 0; }
		fVec327SEState = 0;
		for (int j = 0; j < 2; j++) { fVec326SEState[j] = 0; }
		fVec332SEState = 0;
		for (int j = 0; j < 2; j++) { fVec331SEState[j] = 0; }
		fVec337SEState = 0;
		for (int j = 0; j < 2; j++) { fVec336SEState[j] = 0; }
		fVec342SEState = 0;
		for (int j = 0; j < 2; j++) { fVec341SEState[j] = 0; }
		fVec347SEState = 0;
		for (int j = 0; j < 2; j++) { fVec346SEState[j] = 0; }
		fVec350SEState = 0;
		for (int j = 0; j < 2; j++) { fVec349SEState[j] = 0; }
		fVec355SEState = 0;
		for (int j = 0; j < 2; j++) { fVec354SEState[j] = 0; }
		fVec360SEState = 0;
		for (int j = 0; j < 2; j++) { fVec359SEState[j] = 0; }
		fVec365SEState = 0;
		for (int j = 0; j < 2; j++) { fVec364SEState[j] = 0; }
		fVec370SEState = 0;
		for (int j = 0; j < 2; j++) { fVec369SEState[j] = 0; }
		fVec375SEState = 0;
		for (int j = 0; j < 2; j++) { fVec374SEState[j] = 0; }
		fVec378SEState = 0;
		for (int j = 0; j < 2; j++) { fVec377SEState[j] = 0; }
		fVec383SEState = 0;
		for (int j = 0; j < 2; j++) { fVec382SEState[j] = 0; }
		fVec388SEState = 0;
		for (int j = 0; j < 2; j++) { fVec387SEState[j] = 0; }
		fVec393SEState = 0;
		for (int j = 0; j < 2; j++) { fVec392SEState[j] = 0; }
		fVec398SEState = 0;
		for (int j = 0; j < 2; j++) { fVec397SEState[j] = 0; }
		fVec403SEState = 0;
		for (int j = 0; j < 2; j++) { fVec402SEState[j] = 0; }
		fVec406SEState = 0;
		for (int j = 0; j < 2; j++) { fVec405SEState[j] = 0; }
		fVec411SEState = 0;
		for (int j = 0; j < 2; j++) { fVec410SEState[j] = 0; }
		fVec416SEState = 0;
		for (int j = 0; j < 2; j++) { fVec415SEState[j] = 0; }
		fVec421SEState = 0;
		for (int j = 0; j < 2; j++) { fVec420SEState[j] = 0; }
		fVec426SEState = 0;
		for (int j = 0; j < 2; j++) { fVec425SEState[j] = 0; }
		fVec431SEState = 0;
		for (int j = 0; j < 2; j++) { fVec430SEState[j] = 0; }
		fVec434SEState = 0;
		for (int j = 0; j < 2; j++) { fVec433SEState[j] = 0; }
		fVec439SEState = 0;
		for (int j = 0; j < 2; j++) { fVec438SEState[j] = 0; }
		fVec444SEState = 0;
		for (int j = 0; j < 2; j++) { fVec443SEState[j] = 0; }
		fVec449SEState = 0;
		for (int j = 0; j < 2; j++) { fVec448SEState[j] = 0; }
		fVec454SEState = 0;
		for (int j = 0; j < 2; j++) { fVec453SEState[j] = 0; }
		fVec459SEState = 0;
		for (int j = 0; j < 2; j++) { fVec458SEState[j] = 0; }
		fVec462SEState = 0;
		for (int j = 0; j < 2; j++) { fVec461SEState[j] = 0; }
		fVec467SEState = 0;
		for (int j = 0; j < 2; j++) { fVec466SEState[j] = 0; }
		fVec472SEState = 0;
		for (int j = 0; j < 2; j++) { fVec471SEState[j] = 0; }
		fVec477SEState = 0;
		for (int j = 0; j < 2; j++) { fVec476SEState[j] = 0; }
		fVec482SEState = 0;
		for (int j = 0; j < 2; j++) { fVec481SEState[j] = 0; }
		fVec487SEState = 0;
		for (int j = 0; j < 2; j++) { fVec486SEState[j] = 0; }
		fVec490SEState = 0;
		for (int j = 0; j < 2; j++) { fVec489SEState[j] = 0; }
		fVec495SEState = 0;
		for (int j = 0; j < 2; j++) { fVec494SEState[j] = 0; }
		fVec500SEState = 0;
		for (int j = 0; j < 2; j++) { fVec499SEState[j] = 0; }
		fVec505SEState = 0;
		for (int j = 0; j < 2; j++) { fVec504SEState[j] = 0; }
		fVec510SEState = 0;
		for (int j = 0; j < 2; j++) { fVec509SEState[j] = 0; }
		fVec515SEState = 0;
		for (int j = 0; j < 2; j++) { fVec514SEState[j] = 0; }
		fVec518SEState = 0;
		for (int j = 0; j < 2; j++) { fVec517SEState[j] = 0; }
		fVec523SEState = 0;
		for (int j = 0; j < 2; j++) { fVec522SEState[j] = 0; }
		fVec528SEState = 0;
		for (int j = 0; j < 2; j++) { fVec527SEState[j] = 0; }
		fVec533SEState = 0;
		for (int j = 0; j < 2; j++) { fVec532SEState[j] = 0; }
		fVec538SEState = 0;
		for (int j = 0; j < 2; j++) { fVec537SEState[j] = 0; }
		fVec543SEState = 0;
		for (int j = 0; j < 2; j++) { fVec542SEState[j] = 0; }
		fVec546SEState = 0;
		for (int j = 0; j < 2; j++) { fVec545SEState[j] = 0; }
		fVec551SEState = 0;
		for (int j = 0; j < 2; j++) { fVec550SEState[j] = 0; }
		fVec556SEState = 0;
		for (int j = 0; j < 2; j++) { fVec555SEState[j] = 0; }
		fVec561SEState = 0;
		for (int j = 0; j < 2; j++) { fVec560SEState[j] = 0; }
		fVec566SEState = 0;
		for (int j = 0; j < 2; j++) { fVec565SEState[j] = 0; }
		fVec571SEState = 0;
		for (int j = 0; j < 2; j++) { fVec570SEState[j] = 0; }
		fVec574SEState = 0;
		for (int j = 0; j < 2; j++) { fVec573SEState[j] = 0; }
		fVec579SEState = 0;
		for (int j = 0; j < 2; j++) { fVec578SEState[j] = 0; }
		fVec584SEState = 0;
		for (int j = 0; j < 2; j++) { fVec583SEState[j] = 0; }
		fVec589SEState = 0;
		for (int j = 0; j < 2; j++) { fVec588SEState[j] = 0; }
		fVec594SEState = 0;
		for (int j = 0; j < 2; j++) { fVec593SEState[j] = 0; }
		fVec599SEState = 0;
		for (int j = 0; j < 2; j++) { fVec598SEState[j] = 0; }
		fVec602SEState = 0;
		for (int j = 0; j < 2; j++) { fVec601SEState[j] = 0; }
		fVec607SEState = 0;
		for (int j = 0; j < 2; j++) { fVec606SEState[j] = 0; }
		fVec612SEState = 0;
		for (int j = 0; j < 2; j++) { fVec611SEState[j] = 0; }
		fVec617SEState = 0;
		for (int j = 0; j < 2; j++) { fVec616SEState[j] = 0; }
		fVec622SEState = 0;
		for (int j = 0; j < 2; j++) { fVec621SEState[j] = 0; }
		fVec627SEState = 0;
		for (int j = 0; j < 2; j++) { fVec626SEState[j] = 0; }
		fVec630SEState = 0;
		for (int j = 0; j < 2; j++) { fVec629SEState[j] = 0; }
		fVec635SEState = 0;
		for (int j = 0; j < 2; j++) { fVec634SEState[j] = 0; }
		fVec640SEState = 0;
		for (int j = 0; j < 2; j++) { fVec639SEState[j] = 0; }
		fVec645SEState = 0;
		for (int j = 0; j < 2; j++) { fVec644SEState[j] = 0; }
		fVec650SEState = 0;
		for (int j = 0; j < 2; j++) { fVec649SEState[j] = 0; }
		fVec655SEState = 0;
		for (int j = 0; j < 2; j++) { fVec654SEState[j] = 0; }
		fVec658SEState = 0;
		for (int j = 0; j < 2; j++) { fVec657SEState[j] = 0; }
		fVec663SEState = 0;
		for (int j = 0; j < 2; j++) { fVec662SEState[j] = 0; }
		fVec668SEState = 0;
		for (int j = 0; j < 2; j++) { fVec667SEState[j] = 0; }
		fVec673SEState = 0;
		for (int j = 0; j < 2; j++) { fVec672SEState[j] = 0; }
		fVec678SEState = 0;
		for (int j = 0; j < 2; j++) { fVec677SEState[j] = 0; }
		fVec683SEState = 0;
		for (int j = 0; j < 2; j++) { fVec682SEState[j] = 0; }
		fVec686SEState = 0;
		for (int j = 0; j < 2; j++) { fVec685SEState[j] = 0; }
		fVec691SEState = 0;
		for (int j = 0; j < 2; j++) { fVec690SEState[j] = 0; }
		fVec696SEState = 0;
		for (int j = 0; j < 2; j++) { fVec695SEState[j] = 0; }
		fVec701SEState = 0;
		for (int j = 0; j < 2; j++) { fVec700SEState[j] = 0; }
		fVec706SEState = 0;
		for (int j = 0; j < 2; j++) { fVec705SEState[j] = 0; }
		fVec711SEState = 0;
		for (int j = 0; j < 2; j++) { fVec710SEState[j] = 0; }
		fVec714SEState = 0;
		for (int j = 0; j < 2; j++) { fVec713SEState[j] = 0; }
		fVec719SEState = 0;
		for (int j = 0; j < 2; j++) { fVec718SEState[j] = 0; }
		fVec724SEState = 0;
		for (int j = 0; j < 2; j++) { fVec723SEState[j] = 0; }
		fVec729SEState = 0;
		for (int j = 0; j < 2; j++) { fVec728SEState[j] = 0; }
		fVec734SEState = 0;
		for (int j = 0; j < 2; j++) { fVec733SEState[j] = 0; }
		fVec739SEState = 0;
		for (int j = 0; j < 2; j++) { fVec738SEState[j] = 0; }
		fVec742SEState = 0;
		for (int j = 0; j < 2; j++) { fVec741SEState[j] = 0; }
		fVec747SEState = 0;
		for (int j = 0; j < 2; j++) { fVec746SEState[j] = 0; }
		fVec752SEState = 0;
		for (int j = 0; j < 2; j++) { fVec751SEState[j] = 0; }
		fVec757SEState = 0;
		for (int j = 0; j < 2; j++) { fVec756SEState[j] = 0; }
		fVec762SEState = 0;
		for (int j = 0; j < 2; j++) { fVec761SEState[j] = 0; }
		fVec767SEState = 0;
		for (int j = 0; j < 2; j++) { fVec766SEState[j] = 0; }
		fVec770SEState = 0;
		for (int j = 0; j < 2; j++) { fVec769SEState[j] = 0; }
		fVec775SEState = 0;
		for (int j = 0; j < 2; j++) { fVec774SEState[j] = 0; }
		fVec780SEState = 0;
		for (int j = 0; j < 2; j++) { fVec779SEState[j] = 0; }
		fVec785SEState = 0;
		for (int j = 0; j < 2; j++) { fVec784SEState[j] = 0; }
		fVec790SEState = 0;
		for (int j = 0; j < 2; j++) { fVec789SEState[j] = 0; }
		fVec795SEState = 0;
		for (int j = 0; j < 2; j++) { fVec794SEState[j] = 0; }
		fVec798SEState = 0;
		for (int j = 0; j < 2; j++) { fVec797SEState[j] = 0; }
		fVec803SEState = 0;
		for (int j = 0; j < 2; j++) { fVec802SEState[j] = 0; }
		fVec808SEState = 0;
		for (int j = 0; j < 2; j++) { fVec807SEState[j] = 0; }
		fVec810SEState = 0;
		fVec814SEState = 0;
		fVec818SEState = 0;
		fVec822SEState = 0;
		fVec826SEState = 0;
		fVec830SEState = 0;
		fVec834SEState = 0;
		fVec838SEState = 0;
		fVec842SEState = 0;
		fVec846SEState = 0;
		fVec850SEState = 0;
		fVec854SEState = 0;
		fVec858SEState = 0;
		fVec862SEState = 0;
		fVec866SEState = 0;
		fVec870SEState = 0;
		fVec874SEState = 0;
		fVec878SEState = 0;
		fVec882SEState = 0;
		fVec886SEState = 0;
		fVec890SEState = 0;
		fVec894SEState = 0;
		fVec898SEState = 0;
		fVec902SEState = 0;
		fVec906SEState = 0;
		fVec910SEState = 0;
		fVec914SEState = 0;
		fVec918SEState = 0;
		fVec922SEState = 0;
		fVec926SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("spectral_level");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 30 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph29, "0", "");
		ui_interface->declare(&fbargraph29, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph29, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph29, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph28, "1", "");
		ui_interface->declare(&fbargraph28, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph28, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph28, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph27, "2", "");
		ui_interface->declare(&fbargraph27, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph27, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph27, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph26, "3", "");
		ui_interface->declare(&fbargraph26, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph26, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph26, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph25, "4", "");
		ui_interface->declare(&fbargraph25, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph25, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph25, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph24, "5", "");
		ui_interface->declare(&fbargraph24, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph24, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph24, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph23, "6", "");
		ui_interface->declare(&fbargraph23, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph23, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph23, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph22, "7", "");
		ui_interface->declare(&fbargraph22, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph22, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph22, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph21, "8", "");
		ui_interface->declare(&fbargraph21, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph21, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph21, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph20, "9", "");
		ui_interface->declare(&fbargraph20, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph20, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph20, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph19, "10", "");
		ui_interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph19, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph18, "11", "");
		ui_interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph18, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph17, "12", "");
		ui_interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph17, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph16, "13", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph16, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph15, "14", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "15", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph15", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "16", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph16", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "17", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph17", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "18", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph18", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "19", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph19", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "20", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph20", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "21", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph21", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "22", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph22", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "23", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph23", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "24", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph24", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "25", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph25", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "26", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph26", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "27", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph27", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "28", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph28", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "29", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph29", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fTemp1SE; // step: 25
		float 	fVec1SE[2];
		float 	fTemp2SE; // step: 42
		float 	fVec0SE[3];
		float 	fTemp3SE; // step: 68
		float 	fVec6SE[2];
		float 	fTemp4SE; // step: 80
		float 	fVec5SE[3];
		float 	fTemp5SE; // step: 104
		float 	fVec11SE[2];
		float 	fTemp6SE; // step: 116
		float 	fVec10SE[3];
		float 	fTemp7SE; // step: 127
		float 	fVec14SE[2];
		float 	fTemp8SE; // step: 139
		float 	fVec13SE[3];
		float 	fTemp9SE; // step: 164
		float 	fVec19SE[2];
		float 	fTemp10SE; // step: 176
		float 	fVec18SE[3];
		float 	fTemp11SE; // step: 198
		float 	fVec24SE[2];
		float 	fTemp12SE; // step: 210
		float 	fVec23SE[3];
		float 	fTemp13SE; // step: 221
		float 	fTemp14SE; // step: 233
		float 	fVec29SE[2];
		float 	fTemp15SE; // step: 248
		float 	fVec28SE[3];
		float 	fTemp16SE; // step: 268
		float 	fVec34SE[2];
		float 	fTemp17SE; // step: 280
		float 	fVec33SE[3];
		float 	fTemp18SE; // step: 300
		float 	fVec39SE[2];
		float 	fTemp19SE; // step: 312
		float 	fVec38SE[3];
		float 	fTemp20SE; // step: 320
		float 	fVec42SE[2];
		float 	fTemp21SE; // step: 332
		float 	fVec41SE[3];
		float 	fTemp22SE; // step: 352
		float 	fVec47SE[2];
		float 	fTemp23SE; // step: 364
		float 	fVec46SE[3];
		float 	fTemp24SE; // step: 382
		float 	fVec52SE[2];
		float 	fTemp25SE; // step: 394
		float 	fVec51SE[3];
		float 	fTemp26SE; // step: 404
		float 	fTemp27SE; // step: 416
		float 	fVec57SE[2];
		float 	fTemp28SE; // step: 431
		float 	fVec56SE[3];
		float 	fTemp29SE; // step: 451
		float 	fVec62SE[2];
		float 	fTemp30SE; // step: 463
		float 	fVec61SE[3];
		float 	fTemp31SE; // step: 483
		float 	fVec67SE[2];
		float 	fTemp32SE; // step: 495
		float 	fVec66SE[3];
		float 	fTemp33SE; // step: 503
		float 	fVec70SE[2];
		float 	fTemp34SE; // step: 515
		float 	fVec69SE[3];
		float 	fTemp35SE; // step: 535
		float 	fVec75SE[2];
		float 	fTemp36SE; // step: 547
		float 	fVec74SE[3];
		float 	fTemp37SE; // step: 565
		float 	fVec80SE[2];
		float 	fTemp38SE; // step: 577
		float 	fVec79SE[3];
		float 	fTemp39SE; // step: 587
		float 	fTemp40SE; // step: 599
		float 	fVec85SE[2];
		float 	fTemp41SE; // step: 614
		float 	fVec84SE[3];
		float 	fTemp42SE; // step: 634
		float 	fVec90SE[2];
		float 	fTemp43SE; // step: 646
		float 	fVec89SE[3];
		float 	fTemp44SE; // step: 666
		float 	fVec95SE[2];
		float 	fTemp45SE; // step: 678
		float 	fVec94SE[3];
		float 	fTemp46SE; // step: 686
		float 	fVec98SE[2];
		float 	fTemp47SE; // step: 698
		float 	fVec97SE[3];
		float 	fTemp48SE; // step: 718
		float 	fVec103SE[2];
		float 	fTemp49SE; // step: 730
		float 	fVec102SE[3];
		float 	fTemp50SE; // step: 748
		float 	fVec108SE[2];
		float 	fTemp51SE; // step: 760
		float 	fVec107SE[3];
		float 	fTemp52SE; // step: 770
		float 	fTemp53SE; // step: 782
		float 	fVec113SE[2];
		float 	fTemp54SE; // step: 797
		float 	fVec112SE[3];
		float 	fTemp55SE; // step: 817
		float 	fVec118SE[2];
		float 	fTemp56SE; // step: 829
		float 	fVec117SE[3];
		float 	fTemp57SE; // step: 849
		float 	fVec123SE[2];
		float 	fTemp58SE; // step: 861
		float 	fVec122SE[3];
		float 	fTemp59SE; // step: 869
		float 	fVec126SE[2];
		float 	fTemp60SE; // step: 881
		float 	fVec125SE[3];
		float 	fTemp61SE; // step: 901
		float 	fVec131SE[2];
		float 	fTemp62SE; // step: 913
		float 	fVec130SE[3];
		float 	fTemp63SE; // step: 931
		float 	fVec136SE[2];
		float 	fTemp64SE; // step: 943
		float 	fVec135SE[3];
		float 	fTemp65SE; // step: 953
		float 	fTemp66SE; // step: 965
		float 	fVec141SE[2];
		float 	fTemp67SE; // step: 980
		float 	fVec140SE[3];
		float 	fTemp68SE; // step: 1000
		float 	fVec146SE[2];
		float 	fTemp69SE; // step: 1012
		float 	fVec145SE[3];
		float 	fTemp70SE; // step: 1032
		float 	fVec151SE[2];
		float 	fTemp71SE; // step: 1044
		float 	fVec150SE[3];
		float 	fTemp72SE; // step: 1052
		float 	fVec154SE[2];
		float 	fTemp73SE; // step: 1064
		float 	fVec153SE[3];
		float 	fTemp74SE; // step: 1084
		float 	fVec159SE[2];
		float 	fTemp75SE; // step: 1096
		float 	fVec158SE[3];
		float 	fTemp76SE; // step: 1114
		float 	fVec164SE[2];
		float 	fTemp77SE; // step: 1126
		float 	fVec163SE[3];
		float 	fTemp78SE; // step: 1136
		float 	fTemp79SE; // step: 1148
		float 	fVec169SE[2];
		float 	fTemp80SE; // step: 1163
		float 	fVec168SE[3];
		float 	fTemp81SE; // step: 1183
		float 	fVec174SE[2];
		float 	fTemp82SE; // step: 1195
		float 	fVec173SE[3];
		float 	fTemp83SE; // step: 1215
		float 	fVec179SE[2];
		float 	fTemp84SE; // step: 1227
		float 	fVec178SE[3];
		float 	fTemp85SE; // step: 1235
		float 	fVec182SE[2];
		float 	fTemp86SE; // step: 1247
		float 	fVec181SE[3];
		float 	fTemp87SE; // step: 1267
		float 	fVec187SE[2];
		float 	fTemp88SE; // step: 1279
		float 	fVec186SE[3];
		float 	fTemp89SE; // step: 1297
		float 	fVec192SE[2];
		float 	fTemp90SE; // step: 1309
		float 	fVec191SE[3];
		float 	fTemp91SE; // step: 1319
		float 	fTemp92SE; // step: 1331
		float 	fVec197SE[2];
		float 	fTemp93SE; // step: 1346
		float 	fVec196SE[3];
		float 	fTemp94SE; // step: 1366
		float 	fVec202SE[2];
		float 	fTemp95SE; // step: 1378
		float 	fVec201SE[3];
		float 	fTemp96SE; // step: 1398
		float 	fVec207SE[2];
		float 	fTemp97SE; // step: 1410
		float 	fVec206SE[3];
		float 	fTemp98SE; // step: 1418
		float 	fVec210SE[2];
		float 	fTemp99SE; // step: 1430
		float 	fVec209SE[3];
		float 	fTemp100SE; // step: 1450
		float 	fVec215SE[2];
		float 	fTemp101SE; // step: 1462
		float 	fVec214SE[3];
		float 	fTemp102SE; // step: 1480
		float 	fVec220SE[2];
		float 	fTemp103SE; // step: 1492
		float 	fVec219SE[3];
		float 	fTemp104SE; // step: 1502
		float 	fTemp105SE; // step: 1514
		float 	fVec225SE[2];
		float 	fTemp106SE; // step: 1529
		float 	fVec224SE[3];
		float 	fTemp107SE; // step: 1549
		float 	fVec230SE[2];
		float 	fTemp108SE; // step: 1561
		float 	fVec229SE[3];
		float 	fTemp109SE; // step: 1581
		float 	fVec235SE[2];
		float 	fTemp110SE; // step: 1593
		float 	fVec234SE[3];
		float 	fTemp111SE; // step: 1601
		float 	fVec238SE[2];
		float 	fTemp112SE; // step: 1613
		float 	fVec237SE[3];
		float 	fTemp113SE; // step: 1633
		float 	fVec243SE[2];
		float 	fTemp114SE; // step: 1645
		float 	fVec242SE[3];
		float 	fTemp115SE; // step: 1663
		float 	fVec248SE[2];
		float 	fTemp116SE; // step: 1675
		float 	fVec247SE[3];
		float 	fTemp117SE; // step: 1685
		float 	fTemp118SE; // step: 1697
		float 	fVec253SE[2];
		float 	fTemp119SE; // step: 1712
		float 	fVec252SE[3];
		float 	fTemp120SE; // step: 1732
		float 	fVec258SE[2];
		float 	fTemp121SE; // step: 1744
		float 	fVec257SE[3];
		float 	fTemp122SE; // step: 1764
		float 	fVec263SE[2];
		float 	fTemp123SE; // step: 1776
		float 	fVec262SE[3];
		float 	fTemp124SE; // step: 1784
		float 	fVec266SE[2];
		float 	fTemp125SE; // step: 1796
		float 	fVec265SE[3];
		float 	fTemp126SE; // step: 1816
		float 	fVec271SE[2];
		float 	fTemp127SE; // step: 1828
		float 	fVec270SE[3];
		float 	fTemp128SE; // step: 1846
		float 	fVec276SE[2];
		float 	fTemp129SE; // step: 1858
		float 	fVec275SE[3];
		float 	fTemp130SE; // step: 1868
		float 	fTemp131SE; // step: 1880
		float 	fVec281SE[2];
		float 	fTemp132SE; // step: 1895
		float 	fVec280SE[3];
		float 	fTemp133SE; // step: 1915
		float 	fVec286SE[2];
		float 	fTemp134SE; // step: 1927
		float 	fVec285SE[3];
		float 	fTemp135SE; // step: 1947
		float 	fVec291SE[2];
		float 	fTemp136SE; // step: 1959
		float 	fVec290SE[3];
		float 	fTemp137SE; // step: 1967
		float 	fVec294SE[2];
		float 	fTemp138SE; // step: 1979
		float 	fVec293SE[3];
		float 	fTemp139SE; // step: 1999
		float 	fVec299SE[2];
		float 	fTemp140SE; // step: 2011
		float 	fVec298SE[3];
		float 	fTemp141SE; // step: 2029
		float 	fVec304SE[2];
		float 	fTemp142SE; // step: 2041
		float 	fVec303SE[3];
		float 	fTemp143SE; // step: 2051
		float 	fTemp144SE; // step: 2063
		float 	fVec309SE[2];
		float 	fTemp145SE; // step: 2078
		float 	fVec308SE[3];
		float 	fTemp146SE; // step: 2098
		float 	fVec314SE[2];
		float 	fTemp147SE; // step: 2110
		float 	fVec313SE[3];
		float 	fTemp148SE; // step: 2130
		float 	fVec319SE[2];
		float 	fTemp149SE; // step: 2142
		float 	fVec318SE[3];
		float 	fTemp150SE; // step: 2150
		float 	fVec322SE[2];
		float 	fTemp151SE; // step: 2162
		float 	fVec321SE[3];
		float 	fTemp152SE; // step: 2182
		float 	fVec327SE[2];
		float 	fTemp153SE; // step: 2194
		float 	fVec326SE[3];
		float 	fTemp154SE; // step: 2212
		float 	fVec332SE[2];
		float 	fTemp155SE; // step: 2224
		float 	fVec331SE[3];
		float 	fTemp156SE; // step: 2234
		float 	fTemp157SE; // step: 2246
		float 	fVec337SE[2];
		float 	fTemp158SE; // step: 2261
		float 	fVec336SE[3];
		float 	fTemp159SE; // step: 2281
		float 	fVec342SE[2];
		float 	fTemp160SE; // step: 2293
		float 	fVec341SE[3];
		float 	fTemp161SE; // step: 2313
		float 	fVec347SE[2];
		float 	fTemp162SE; // step: 2325
		float 	fVec346SE[3];
		float 	fTemp163SE; // step: 2333
		float 	fVec350SE[2];
		float 	fTemp164SE; // step: 2345
		float 	fVec349SE[3];
		float 	fTemp165SE; // step: 2365
		float 	fVec355SE[2];
		float 	fTemp166SE; // step: 2377
		float 	fVec354SE[3];
		float 	fTemp167SE; // step: 2395
		float 	fVec360SE[2];
		float 	fTemp168SE; // step: 2407
		float 	fVec359SE[3];
		float 	fTemp169SE; // step: 2417
		float 	fTemp170SE; // step: 2429
		float 	fVec365SE[2];
		float 	fTemp171SE; // step: 2444
		float 	fVec364SE[3];
		float 	fTemp172SE; // step: 2464
		float 	fVec370SE[2];
		float 	fTemp173SE; // step: 2476
		float 	fVec369SE[3];
		float 	fTemp174SE; // step: 2496
		float 	fVec375SE[2];
		float 	fTemp175SE; // step: 2508
		float 	fVec374SE[3];
		float 	fTemp176SE; // step: 2516
		float 	fVec378SE[2];
		float 	fTemp177SE; // step: 2528
		float 	fVec377SE[3];
		float 	fTemp178SE; // step: 2548
		float 	fVec383SE[2];
		float 	fTemp179SE; // step: 2560
		float 	fVec382SE[3];
		float 	fTemp180SE; // step: 2578
		float 	fVec388SE[2];
		float 	fTemp181SE; // step: 2590
		float 	fVec387SE[3];
		float 	fTemp182SE; // step: 2600
		float 	fTemp183SE; // step: 2612
		float 	fVec393SE[2];
		float 	fTemp184SE; // step: 2627
		float 	fVec392SE[3];
		float 	fTemp185SE; // step: 2647
		float 	fVec398SE[2];
		float 	fTemp186SE; // step: 2659
		float 	fVec397SE[3];
		float 	fTemp187SE; // step: 2679
		float 	fVec403SE[2];
		float 	fTemp188SE; // step: 2691
		float 	fVec402SE[3];
		float 	fTemp189SE; // step: 2699
		float 	fVec406SE[2];
		float 	fTemp190SE; // step: 2711
		float 	fVec405SE[3];
		float 	fTemp191SE; // step: 2731
		float 	fVec411SE[2];
		float 	fTemp192SE; // step: 2743
		float 	fVec410SE[3];
		float 	fTemp193SE; // step: 2761
		float 	fVec416SE[2];
		float 	fTemp194SE; // step: 2773
		float 	fVec415SE[3];
		float 	fTemp195SE; // step: 2783
		float 	fTemp196SE; // step: 2795
		float 	fVec421SE[2];
		float 	fTemp197SE; // step: 2810
		float 	fVec420SE[3];
		float 	fTemp198SE; // step: 2830
		float 	fVec426SE[2];
		float 	fTemp199SE; // step: 2842
		float 	fVec425SE[3];
		float 	fTemp200SE; // step: 2862
		float 	fVec431SE[2];
		float 	fTemp201SE; // step: 2874
		float 	fVec430SE[3];
		float 	fTemp202SE; // step: 2882
		float 	fVec434SE[2];
		float 	fTemp203SE; // step: 2894
		float 	fVec433SE[3];
		float 	fTemp204SE; // step: 2914
		float 	fVec439SE[2];
		float 	fTemp205SE; // step: 2926
		float 	fVec438SE[3];
		float 	fTemp206SE; // step: 2944
		float 	fVec444SE[2];
		float 	fTemp207SE; // step: 2956
		float 	fVec443SE[3];
		float 	fTemp208SE; // step: 2966
		float 	fTemp209SE; // step: 2978
		float 	fVec449SE[2];
		float 	fTemp210SE; // step: 2993
		float 	fVec448SE[3];
		float 	fTemp211SE; // step: 3013
		float 	fVec454SE[2];
		float 	fTemp212SE; // step: 3025
		float 	fVec453SE[3];
		float 	fTemp213SE; // step: 3045
		float 	fVec459SE[2];
		float 	fTemp214SE; // step: 3057
		float 	fVec458SE[3];
		float 	fTemp215SE; // step: 3065
		float 	fVec462SE[2];
		float 	fTemp216SE; // step: 3077
		float 	fVec461SE[3];
		float 	fTemp217SE; // step: 3097
		float 	fVec467SE[2];
		float 	fTemp218SE; // step: 3109
		float 	fVec466SE[3];
		float 	fTemp219SE; // step: 3127
		float 	fVec472SE[2];
		float 	fTemp220SE; // step: 3139
		float 	fVec471SE[3];
		float 	fTemp221SE; // step: 3149
		float 	fTemp222SE; // step: 3161
		float 	fVec477SE[2];
		float 	fTemp223SE; // step: 3176
		float 	fVec476SE[3];
		float 	fTemp224SE; // step: 3196
		float 	fVec482SE[2];
		float 	fTemp225SE; // step: 3208
		float 	fVec481SE[3];
		float 	fTemp226SE; // step: 3228
		float 	fVec487SE[2];
		float 	fTemp227SE; // step: 3240
		float 	fVec486SE[3];
		float 	fTemp228SE; // step: 3248
		float 	fVec490SE[2];
		float 	fTemp229SE; // step: 3260
		float 	fVec489SE[3];
		float 	fTemp230SE; // step: 3280
		float 	fVec495SE[2];
		float 	fTemp231SE; // step: 3292
		float 	fVec494SE[3];
		float 	fTemp232SE; // step: 3310
		float 	fVec500SE[2];
		float 	fTemp233SE; // step: 3322
		float 	fVec499SE[3];
		float 	fTemp234SE; // step: 3332
		float 	fTemp235SE; // step: 3344
		float 	fVec505SE[2];
		float 	fTemp236SE; // step: 3359
		float 	fVec504SE[3];
		float 	fTemp237SE; // step: 3379
		float 	fVec510SE[2];
		float 	fTemp238SE; // step: 3391
		float 	fVec509SE[3];
		float 	fTemp239SE; // step: 3411
		float 	fVec515SE[2];
		float 	fTemp240SE; // step: 3423
		float 	fVec514SE[3];
		float 	fTemp241SE; // step: 3431
		float 	fVec518SE[2];
		float 	fTemp242SE; // step: 3443
		float 	fVec517SE[3];
		float 	fTemp243SE; // step: 3463
		float 	fVec523SE[2];
		float 	fTemp244SE; // step: 3475
		float 	fVec522SE[3];
		float 	fTemp245SE; // step: 3493
		float 	fVec528SE[2];
		float 	fTemp246SE; // step: 3505
		float 	fVec527SE[3];
		float 	fTemp247SE; // step: 3515
		float 	fTemp248SE; // step: 3527
		float 	fVec533SE[2];
		float 	fTemp249SE; // step: 3542
		float 	fVec532SE[3];
		float 	fTemp250SE; // step: 3562
		float 	fVec538SE[2];
		float 	fTemp251SE; // step: 3574
		float 	fVec537SE[3];
		float 	fTemp252SE; // step: 3594
		float 	fVec543SE[2];
		float 	fTemp253SE; // step: 3606
		float 	fVec542SE[3];
		float 	fTemp254SE; // step: 3614
		float 	fVec546SE[2];
		float 	fTemp255SE; // step: 3626
		float 	fVec545SE[3];
		float 	fTemp256SE; // step: 3646
		float 	fVec551SE[2];
		float 	fTemp257SE; // step: 3658
		float 	fVec550SE[3];
		float 	fTemp258SE; // step: 3676
		float 	fVec556SE[2];
		float 	fTemp259SE; // step: 3688
		float 	fVec555SE[3];
		float 	fTemp260SE; // step: 3698
		float 	fTemp261SE; // step: 3710
		float 	fVec561SE[2];
		float 	fTemp262SE; // step: 3725
		float 	fVec560SE[3];
		float 	fTemp263SE; // step: 3745
		float 	fVec566SE[2];
		float 	fTemp264SE; // step: 3757
		float 	fVec565SE[3];
		float 	fTemp265SE; // step: 3777
		float 	fVec571SE[2];
		float 	fTemp266SE; // step: 3789
		float 	fVec570SE[3];
		float 	fTemp267SE; // step: 3797
		float 	fVec574SE[2];
		float 	fTemp268SE; // step: 3809
		float 	fVec573SE[3];
		float 	fTemp269SE; // step: 3829
		float 	fVec579SE[2];
		float 	fTemp270SE; // step: 3841
		float 	fVec578SE[3];
		float 	fTemp271SE; // step: 3859
		float 	fVec584SE[2];
		float 	fTemp272SE; // step: 3871
		float 	fVec583SE[3];
		float 	fTemp273SE; // step: 3881
		float 	fTemp274SE; // step: 3893
		float 	fVec589SE[2];
		float 	fTemp275SE; // step: 3908
		float 	fVec588SE[3];
		float 	fTemp276SE; // step: 3928
		float 	fVec594SE[2];
		float 	fTemp277SE; // step: 3940
		float 	fVec593SE[3];
		float 	fTemp278SE; // step: 3960
		float 	fVec599SE[2];
		float 	fTemp279SE; // step: 3972
		float 	fVec598SE[3];
		float 	fTemp280SE; // step: 3980
		float 	fVec602SE[2];
		float 	fTemp281SE; // step: 3992
		float 	fVec601SE[3];
		float 	fTemp282SE; // step: 4012
		float 	fVec607SE[2];
		float 	fTemp283SE; // step: 4024
		float 	fVec606SE[3];
		float 	fTemp284SE; // step: 4042
		float 	fVec612SE[2];
		float 	fTemp285SE; // step: 4054
		float 	fVec611SE[3];
		float 	fTemp286SE; // step: 4064
		float 	fTemp287SE; // step: 4076
		float 	fVec617SE[2];
		float 	fTemp288SE; // step: 4091
		float 	fVec616SE[3];
		float 	fTemp289SE; // step: 4111
		float 	fVec622SE[2];
		float 	fTemp290SE; // step: 4123
		float 	fVec621SE[3];
		float 	fTemp291SE; // step: 4143
		float 	fVec627SE[2];
		float 	fTemp292SE; // step: 4155
		float 	fVec626SE[3];
		float 	fTemp293SE; // step: 4163
		float 	fVec630SE[2];
		float 	fTemp294SE; // step: 4175
		float 	fVec629SE[3];
		float 	fTemp295SE; // step: 4195
		float 	fVec635SE[2];
		float 	fTemp296SE; // step: 4207
		float 	fVec634SE[3];
		float 	fTemp297SE; // step: 4225
		float 	fVec640SE[2];
		float 	fTemp298SE; // step: 4237
		float 	fVec639SE[3];
		float 	fTemp299SE; // step: 4247
		float 	fTemp300SE; // step: 4259
		float 	fVec645SE[2];
		float 	fTemp301SE; // step: 4274
		float 	fVec644SE[3];
		float 	fTemp302SE; // step: 4294
		float 	fVec650SE[2];
		float 	fTemp303SE; // step: 4306
		float 	fVec649SE[3];
		float 	fTemp304SE; // step: 4326
		float 	fVec655SE[2];
		float 	fTemp305SE; // step: 4338
		float 	fVec654SE[3];
		float 	fTemp306SE; // step: 4346
		float 	fVec658SE[2];
		float 	fTemp307SE; // step: 4358
		float 	fVec657SE[3];
		float 	fTemp308SE; // step: 4378
		float 	fVec663SE[2];
		float 	fTemp309SE; // step: 4390
		float 	fVec662SE[3];
		float 	fTemp310SE; // step: 4408
		float 	fVec668SE[2];
		float 	fTemp311SE; // step: 4420
		float 	fVec667SE[3];
		float 	fTemp312SE; // step: 4430
		float 	fTemp313SE; // step: 4442
		float 	fVec673SE[2];
		float 	fTemp314SE; // step: 4457
		float 	fVec672SE[3];
		float 	fTemp315SE; // step: 4477
		float 	fVec678SE[2];
		float 	fTemp316SE; // step: 4489
		float 	fVec677SE[3];
		float 	fTemp317SE; // step: 4509
		float 	fVec683SE[2];
		float 	fTemp318SE; // step: 4521
		float 	fVec682SE[3];
		float 	fTemp319SE; // step: 4529
		float 	fVec686SE[2];
		float 	fTemp320SE; // step: 4541
		float 	fVec685SE[3];
		float 	fTemp321SE; // step: 4561
		float 	fVec691SE[2];
		float 	fTemp322SE; // step: 4573
		float 	fVec690SE[3];
		float 	fTemp323SE; // step: 4591
		float 	fVec696SE[2];
		float 	fTemp324SE; // step: 4603
		float 	fVec695SE[3];
		float 	fTemp325SE; // step: 4613
		float 	fTemp326SE; // step: 4625
		float 	fVec701SE[2];
		float 	fTemp327SE; // step: 4640
		float 	fVec700SE[3];
		float 	fTemp328SE; // step: 4660
		float 	fVec706SE[2];
		float 	fTemp329SE; // step: 4672
		float 	fVec705SE[3];
		float 	fTemp330SE; // step: 4692
		float 	fVec711SE[2];
		float 	fTemp331SE; // step: 4704
		float 	fVec710SE[3];
		float 	fTemp332SE; // step: 4712
		float 	fVec714SE[2];
		float 	fTemp333SE; // step: 4724
		float 	fVec713SE[3];
		float 	fTemp334SE; // step: 4744
		float 	fVec719SE[2];
		float 	fTemp335SE; // step: 4756
		float 	fVec718SE[3];
		float 	fTemp336SE; // step: 4774
		float 	fVec724SE[2];
		float 	fTemp337SE; // step: 4786
		float 	fVec723SE[3];
		float 	fTemp338SE; // step: 4796
		float 	fTemp339SE; // step: 4808
		float 	fVec729SE[2];
		float 	fTemp340SE; // step: 4823
		float 	fVec728SE[3];
		float 	fTemp341SE; // step: 4843
		float 	fVec734SE[2];
		float 	fTemp342SE; // step: 4855
		float 	fVec733SE[3];
		float 	fTemp343SE; // step: 4875
		float 	fVec739SE[2];
		float 	fTemp344SE; // step: 4887
		float 	fVec738SE[3];
		float 	fTemp345SE; // step: 4895
		float 	fVec742SE[2];
		float 	fTemp346SE; // step: 4907
		float 	fVec741SE[3];
		float 	fTemp347SE; // step: 4927
		float 	fVec747SE[2];
		float 	fTemp348SE; // step: 4939
		float 	fVec746SE[3];
		float 	fTemp349SE; // step: 4957
		float 	fVec752SE[2];
		float 	fTemp350SE; // step: 4969
		float 	fVec751SE[3];
		float 	fTemp351SE; // step: 4979
		float 	fTemp352SE; // step: 4991
		float 	fVec757SE[2];
		float 	fTemp353SE; // step: 5006
		float 	fVec756SE[3];
		float 	fTemp354SE; // step: 5026
		float 	fVec762SE[2];
		float 	fTemp355SE; // step: 5038
		float 	fVec761SE[3];
		float 	fTemp356SE; // step: 5058
		float 	fVec767SE[2];
		float 	fTemp357SE; // step: 5070
		float 	fVec766SE[3];
		float 	fTemp358SE; // step: 5078
		float 	fVec770SE[2];
		float 	fTemp359SE; // step: 5090
		float 	fVec769SE[3];
		float 	fTemp360SE; // step: 5110
		float 	fVec775SE[2];
		float 	fTemp361SE; // step: 5122
		float 	fVec774SE[3];
		float 	fTemp362SE; // step: 5140
		float 	fVec780SE[2];
		float 	fTemp363SE; // step: 5152
		float 	fVec779SE[3];
		float 	fTemp364SE; // step: 5162
		float 	fTemp365SE; // step: 5174
		float 	fVec785SE[2];
		float 	fTemp366SE; // step: 5189
		float 	fVec784SE[3];
		float 	fTemp367SE; // step: 5209
		float 	fVec790SE[2];
		float 	fTemp368SE; // step: 5221
		float 	fVec789SE[3];
		float 	fTemp369SE; // step: 5241
		float 	fVec795SE[2];
		float 	fTemp370SE; // step: 5253
		float 	fVec794SE[3];
		float 	fTemp371SE; // step: 5261
		float 	fVec798SE[2];
		float 	fTemp372SE; // step: 5273
		float 	fVec797SE[3];
		float 	fTemp373SE; // step: 5293
		float 	fVec803SE[2];
		float 	fTemp374SE; // step: 5305
		float 	fVec802SE[3];
		float 	fTemp375SE; // step: 5323
		float 	fVec808SE[2];
		float 	fTemp376SE; // step: 5335
		float 	fVec807SE[3];
		float 	fSlow0BE = float(fslider0); // Zone 2, step: 5341
		float 	fSlow1BE = (fConst1014KI / float(fslider1)); // Zone 2, step: 5348
		float 	fSlow2BE = ((1) ? expf(-fSlow1BE) : 0.0f); // Zone 2, step: 5351
		float 	fSlow3BE = (1.0f + -(expf(-fSlow1BE)) /* Sum */); // Zone 2, step: 5372
		float 	fVec810SE[2];
		float 	fSlow4SE;
		float 	fVec814SE[2];
		float 	fSlow5SE;
		float 	fVec818SE[2];
		float 	fSlow6SE;
		float 	fVec822SE[2];
		float 	fSlow7SE;
		float 	fVec826SE[2];
		float 	fSlow8SE;
		float 	fVec830SE[2];
		float 	fSlow9SE;
		float 	fVec834SE[2];
		float 	fSlow10SE;
		float 	fVec838SE[2];
		float 	fSlow11SE;
		float 	fVec842SE[2];
		float 	fSlow12SE;
		float 	fVec846SE[2];
		float 	fSlow13SE;
		float 	fVec850SE[2];
		float 	fSlow14SE;
		float 	fVec854SE[2];
		float 	fSlow15SE;
		float 	fVec858SE[2];
		float 	fSlow16SE;
		float 	fVec862SE[2];
		float 	fSlow17SE;
		float 	fVec866SE[2];
		float 	fSlow18SE;
		float 	fVec870SE[2];
		float 	fSlow19SE;
		float 	fVec874SE[2];
		float 	fSlow20SE;
		float 	fVec878SE[2];
		float 	fSlow21SE;
		float 	fVec882SE[2];
		float 	fSlow22SE;
		float 	fVec886SE[2];
		float 	fSlow23SE;
		float 	fVec890SE[2];
		float 	fSlow24SE;
		float 	fVec894SE[2];
		float 	fSlow25SE;
		float 	fVec898SE[2];
		float 	fSlow26SE;
		float 	fVec902SE[2];
		float 	fSlow27SE;
		float 	fVec906SE[2];
		float 	fSlow28SE;
		float 	fVec910SE[2];
		float 	fSlow29SE;
		float 	fVec914SE[2];
		float 	fSlow30SE;
		float 	fVec918SE[2];
		float 	fSlow31SE;
		float 	fVec922SE[2];
		float 	fSlow32SE;
		float 	fVec926SE[2];
		float 	fSlow33SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec1SE[1] = fVec1SEState;
		fVec0SE[1] = fVec0SEState[0];
		fVec0SE[2] = fVec0SEState[1];
		fVec6SE[1] = fVec6SEState;
		fVec5SE[1] = fVec5SEState[0];
		fVec5SE[2] = fVec5SEState[1];
		fVec11SE[1] = fVec11SEState;
		fVec10SE[1] = fVec10SEState[0];
		fVec10SE[2] = fVec10SEState[1];
		fVec14SE[1] = fVec14SEState;
		fVec13SE[1] = fVec13SEState[0];
		fVec13SE[2] = fVec13SEState[1];
		fVec19SE[1] = fVec19SEState;
		fVec18SE[1] = fVec18SEState[0];
		fVec18SE[2] = fVec18SEState[1];
		fVec24SE[1] = fVec24SEState;
		fVec23SE[1] = fVec23SEState[0];
		fVec23SE[2] = fVec23SEState[1];
		fVec29SE[1] = fVec29SEState;
		fVec28SE[1] = fVec28SEState[0];
		fVec28SE[2] = fVec28SEState[1];
		fVec34SE[1] = fVec34SEState;
		fVec33SE[1] = fVec33SEState[0];
		fVec33SE[2] = fVec33SEState[1];
		fVec39SE[1] = fVec39SEState;
		fVec38SE[1] = fVec38SEState[0];
		fVec38SE[2] = fVec38SEState[1];
		fVec42SE[1] = fVec42SEState;
		fVec41SE[1] = fVec41SEState[0];
		fVec41SE[2] = fVec41SEState[1];
		fVec47SE[1] = fVec47SEState;
		fVec46SE[1] = fVec46SEState[0];
		fVec46SE[2] = fVec46SEState[1];
		fVec52SE[1] = fVec52SEState;
		fVec51SE[1] = fVec51SEState[0];
		fVec51SE[2] = fVec51SEState[1];
		fVec57SE[1] = fVec57SEState;
		fVec56SE[1] = fVec56SEState[0];
		fVec56SE[2] = fVec56SEState[1];
		fVec62SE[1] = fVec62SEState;
		fVec61SE[1] = fVec61SEState[0];
		fVec61SE[2] = fVec61SEState[1];
		fVec67SE[1] = fVec67SEState;
		fVec66SE[1] = fVec66SEState[0];
		fVec66SE[2] = fVec66SEState[1];
		fVec70SE[1] = fVec70SEState;
		fVec69SE[1] = fVec69SEState[0];
		fVec69SE[2] = fVec69SEState[1];
		fVec75SE[1] = fVec75SEState;
		fVec74SE[1] = fVec74SEState[0];
		fVec74SE[2] = fVec74SEState[1];
		fVec80SE[1] = fVec80SEState;
		fVec79SE[1] = fVec79SEState[0];
		fVec79SE[2] = fVec79SEState[1];
		fVec85SE[1] = fVec85SEState;
		fVec84SE[1] = fVec84SEState[0];
		fVec84SE[2] = fVec84SEState[1];
		fVec90SE[1] = fVec90SEState;
		fVec89SE[1] = fVec89SEState[0];
		fVec89SE[2] = fVec89SEState[1];
		fVec95SE[1] = fVec95SEState;
		fVec94SE[1] = fVec94SEState[0];
		fVec94SE[2] = fVec94SEState[1];
		fVec98SE[1] = fVec98SEState;
		fVec97SE[1] = fVec97SEState[0];
		fVec97SE[2] = fVec97SEState[1];
		fVec103SE[1] = fVec103SEState;
		fVec102SE[1] = fVec102SEState[0];
		fVec102SE[2] = fVec102SEState[1];
		fVec108SE[1] = fVec108SEState;
		fVec107SE[1] = fVec107SEState[0];
		fVec107SE[2] = fVec107SEState[1];
		fVec113SE[1] = fVec113SEState;
		fVec112SE[1] = fVec112SEState[0];
		fVec112SE[2] = fVec112SEState[1];
		fVec118SE[1] = fVec118SEState;
		fVec117SE[1] = fVec117SEState[0];
		fVec117SE[2] = fVec117SEState[1];
		fVec123SE[1] = fVec123SEState;
		fVec122SE[1] = fVec122SEState[0];
		fVec122SE[2] = fVec122SEState[1];
		fVec126SE[1] = fVec126SEState;
		fVec125SE[1] = fVec125SEState[0];
		fVec125SE[2] = fVec125SEState[1];
		fVec131SE[1] = fVec131SEState;
		fVec130SE[1] = fVec130SEState[0];
		fVec130SE[2] = fVec130SEState[1];
		fVec136SE[1] = fVec136SEState;
		fVec135SE[1] = fVec135SEState[0];
		fVec135SE[2] = fVec135SEState[1];
		fVec141SE[1] = fVec141SEState;
		fVec140SE[1] = fVec140SEState[0];
		fVec140SE[2] = fVec140SEState[1];
		fVec146SE[1] = fVec146SEState;
		fVec145SE[1] = fVec145SEState[0];
		fVec145SE[2] = fVec145SEState[1];
		fVec151SE[1] = fVec151SEState;
		fVec150SE[1] = fVec150SEState[0];
		fVec150SE[2] = fVec150SEState[1];
		fVec154SE[1] = fVec154SEState;
		fVec153SE[1] = fVec153SEState[0];
		fVec153SE[2] = fVec153SEState[1];
		fVec159SE[1] = fVec159SEState;
		fVec158SE[1] = fVec158SEState[0];
		fVec158SE[2] = fVec158SEState[1];
		fVec164SE[1] = fVec164SEState;
		fVec163SE[1] = fVec163SEState[0];
		fVec163SE[2] = fVec163SEState[1];
		fVec169SE[1] = fVec169SEState;
		fVec168SE[1] = fVec168SEState[0];
		fVec168SE[2] = fVec168SEState[1];
		fVec174SE[1] = fVec174SEState;
		fVec173SE[1] = fVec173SEState[0];
		fVec173SE[2] = fVec173SEState[1];
		fVec179SE[1] = fVec179SEState;
		fVec178SE[1] = fVec178SEState[0];
		fVec178SE[2] = fVec178SEState[1];
		fVec182SE[1] = fVec182SEState;
		fVec181SE[1] = fVec181SEState[0];
		fVec181SE[2] = fVec181SEState[1];
		fVec187SE[1] = fVec187SEState;
		fVec186SE[1] = fVec186SEState[0];
		fVec186SE[2] = fVec186SEState[1];
		fVec192SE[1] = fVec192SEState;
		fVec191SE[1] = fVec191SEState[0];
		fVec191SE[2] = fVec191SEState[1];
		fVec197SE[1] = fVec197SEState;
		fVec196SE[1] = fVec196SEState[0];
		fVec196SE[2] = fVec196SEState[1];
		fVec202SE[1] = fVec202SEState;
		fVec201SE[1] = fVec201SEState[0];
		fVec201SE[2] = fVec201SEState[1];
		fVec207SE[1] = fVec207SEState;
		fVec206SE[1] = fVec206SEState[0];
		fVec206SE[2] = fVec206SEState[1];
		fVec210SE[1] = fVec210SEState;
		fVec209SE[1] = fVec209SEState[0];
		fVec209SE[2] = fVec209SEState[1];
		fVec215SE[1] = fVec215SEState;
		fVec214SE[1] = fVec214SEState[0];
		fVec214SE[2] = fVec214SEState[1];
		fVec220SE[1] = fVec220SEState;
		fVec219SE[1] = fVec219SEState[0];
		fVec219SE[2] = fVec219SEState[1];
		fVec225SE[1] = fVec225SEState;
		fVec224SE[1] = fVec224SEState[0];
		fVec224SE[2] = fVec224SEState[1];
		fVec230SE[1] = fVec230SEState;
		fVec229SE[1] = fVec229SEState[0];
		fVec229SE[2] = fVec229SEState[1];
		fVec235SE[1] = fVec235SEState;
		fVec234SE[1] = fVec234SEState[0];
		fVec234SE[2] = fVec234SEState[1];
		fVec238SE[1] = fVec238SEState;
		fVec237SE[1] = fVec237SEState[0];
		fVec237SE[2] = fVec237SEState[1];
		fVec243SE[1] = fVec243SEState;
		fVec242SE[1] = fVec242SEState[0];
		fVec242SE[2] = fVec242SEState[1];
		fVec248SE[1] = fVec248SEState;
		fVec247SE[1] = fVec247SEState[0];
		fVec247SE[2] = fVec247SEState[1];
		fVec253SE[1] = fVec253SEState;
		fVec252SE[1] = fVec252SEState[0];
		fVec252SE[2] = fVec252SEState[1];
		fVec258SE[1] = fVec258SEState;
		fVec257SE[1] = fVec257SEState[0];
		fVec257SE[2] = fVec257SEState[1];
		fVec263SE[1] = fVec263SEState;
		fVec262SE[1] = fVec262SEState[0];
		fVec262SE[2] = fVec262SEState[1];
		fVec266SE[1] = fVec266SEState;
		fVec265SE[1] = fVec265SEState[0];
		fVec265SE[2] = fVec265SEState[1];
		fVec271SE[1] = fVec271SEState;
		fVec270SE[1] = fVec270SEState[0];
		fVec270SE[2] = fVec270SEState[1];
		fVec276SE[1] = fVec276SEState;
		fVec275SE[1] = fVec275SEState[0];
		fVec275SE[2] = fVec275SEState[1];
		fVec281SE[1] = fVec281SEState;
		fVec280SE[1] = fVec280SEState[0];
		fVec280SE[2] = fVec280SEState[1];
		fVec286SE[1] = fVec286SEState;
		fVec285SE[1] = fVec285SEState[0];
		fVec285SE[2] = fVec285SEState[1];
		fVec291SE[1] = fVec291SEState;
		fVec290SE[1] = fVec290SEState[0];
		fVec290SE[2] = fVec290SEState[1];
		fVec294SE[1] = fVec294SEState;
		fVec293SE[1] = fVec293SEState[0];
		fVec293SE[2] = fVec293SEState[1];
		fVec299SE[1] = fVec299SEState;
		fVec298SE[1] = fVec298SEState[0];
		fVec298SE[2] = fVec298SEState[1];
		fVec304SE[1] = fVec304SEState;
		fVec303SE[1] = fVec303SEState[0];
		fVec303SE[2] = fVec303SEState[1];
		fVec309SE[1] = fVec309SEState;
		fVec308SE[1] = fVec308SEState[0];
		fVec308SE[2] = fVec308SEState[1];
		fVec314SE[1] = fVec314SEState;
		fVec313SE[1] = fVec313SEState[0];
		fVec313SE[2] = fVec313SEState[1];
		fVec319SE[1] = fVec319SEState;
		fVec318SE[1] = fVec318SEState[0];
		fVec318SE[2] = fVec318SEState[1];
		fVec322SE[1] = fVec322SEState;
		fVec321SE[1] = fVec321SEState[0];
		fVec321SE[2] = fVec321SEState[1];
		fVec327SE[1] = fVec327SEState;
		fVec326SE[1] = fVec326SEState[0];
		fVec326SE[2] = fVec326SEState[1];
		fVec332SE[1] = fVec332SEState;
		fVec331SE[1] = fVec331SEState[0];
		fVec331SE[2] = fVec331SEState[1];
		fVec337SE[1] = fVec337SEState;
		fVec336SE[1] = fVec336SEState[0];
		fVec336SE[2] = fVec336SEState[1];
		fVec342SE[1] = fVec342SEState;
		fVec341SE[1] = fVec341SEState[0];
		fVec341SE[2] = fVec341SEState[1];
		fVec347SE[1] = fVec347SEState;
		fVec346SE[1] = fVec346SEState[0];
		fVec346SE[2] = fVec346SEState[1];
		fVec350SE[1] = fVec350SEState;
		fVec349SE[1] = fVec349SEState[0];
		fVec349SE[2] = fVec349SEState[1];
		fVec355SE[1] = fVec355SEState;
		fVec354SE[1] = fVec354SEState[0];
		fVec354SE[2] = fVec354SEState[1];
		fVec360SE[1] = fVec360SEState;
		fVec359SE[1] = fVec359SEState[0];
		fVec359SE[2] = fVec359SEState[1];
		fVec365SE[1] = fVec365SEState;
		fVec364SE[1] = fVec364SEState[0];
		fVec364SE[2] = fVec364SEState[1];
		fVec370SE[1] = fVec370SEState;
		fVec369SE[1] = fVec369SEState[0];
		fVec369SE[2] = fVec369SEState[1];
		fVec375SE[1] = fVec375SEState;
		fVec374SE[1] = fVec374SEState[0];
		fVec374SE[2] = fVec374SEState[1];
		fVec378SE[1] = fVec378SEState;
		fVec377SE[1] = fVec377SEState[0];
		fVec377SE[2] = fVec377SEState[1];
		fVec383SE[1] = fVec383SEState;
		fVec382SE[1] = fVec382SEState[0];
		fVec382SE[2] = fVec382SEState[1];
		fVec388SE[1] = fVec388SEState;
		fVec387SE[1] = fVec387SEState[0];
		fVec387SE[2] = fVec387SEState[1];
		fVec393SE[1] = fVec393SEState;
		fVec392SE[1] = fVec392SEState[0];
		fVec392SE[2] = fVec392SEState[1];
		fVec398SE[1] = fVec398SEState;
		fVec397SE[1] = fVec397SEState[0];
		fVec397SE[2] = fVec397SEState[1];
		fVec403SE[1] = fVec403SEState;
		fVec402SE[1] = fVec402SEState[0];
		fVec402SE[2] = fVec402SEState[1];
		fVec406SE[1] = fVec406SEState;
		fVec405SE[1] = fVec405SEState[0];
		fVec405SE[2] = fVec405SEState[1];
		fVec411SE[1] = fVec411SEState;
		fVec410SE[1] = fVec410SEState[0];
		fVec410SE[2] = fVec410SEState[1];
		fVec416SE[1] = fVec416SEState;
		fVec415SE[1] = fVec415SEState[0];
		fVec415SE[2] = fVec415SEState[1];
		fVec421SE[1] = fVec421SEState;
		fVec420SE[1] = fVec420SEState[0];
		fVec420SE[2] = fVec420SEState[1];
		fVec426SE[1] = fVec426SEState;
		fVec425SE[1] = fVec425SEState[0];
		fVec425SE[2] = fVec425SEState[1];
		fVec431SE[1] = fVec431SEState;
		fVec430SE[1] = fVec430SEState[0];
		fVec430SE[2] = fVec430SEState[1];
		fVec434SE[1] = fVec434SEState;
		fVec433SE[1] = fVec433SEState[0];
		fVec433SE[2] = fVec433SEState[1];
		fVec439SE[1] = fVec439SEState;
		fVec438SE[1] = fVec438SEState[0];
		fVec438SE[2] = fVec438SEState[1];
		fVec444SE[1] = fVec444SEState;
		fVec443SE[1] = fVec443SEState[0];
		fVec443SE[2] = fVec443SEState[1];
		fVec449SE[1] = fVec449SEState;
		fVec448SE[1] = fVec448SEState[0];
		fVec448SE[2] = fVec448SEState[1];
		fVec454SE[1] = fVec454SEState;
		fVec453SE[1] = fVec453SEState[0];
		fVec453SE[2] = fVec453SEState[1];
		fVec459SE[1] = fVec459SEState;
		fVec458SE[1] = fVec458SEState[0];
		fVec458SE[2] = fVec458SEState[1];
		fVec462SE[1] = fVec462SEState;
		fVec461SE[1] = fVec461SEState[0];
		fVec461SE[2] = fVec461SEState[1];
		fVec467SE[1] = fVec467SEState;
		fVec466SE[1] = fVec466SEState[0];
		fVec466SE[2] = fVec466SEState[1];
		fVec472SE[1] = fVec472SEState;
		fVec471SE[1] = fVec471SEState[0];
		fVec471SE[2] = fVec471SEState[1];
		fVec477SE[1] = fVec477SEState;
		fVec476SE[1] = fVec476SEState[0];
		fVec476SE[2] = fVec476SEState[1];
		fVec482SE[1] = fVec482SEState;
		fVec481SE[1] = fVec481SEState[0];
		fVec481SE[2] = fVec481SEState[1];
		fVec487SE[1] = fVec487SEState;
		fVec486SE[1] = fVec486SEState[0];
		fVec486SE[2] = fVec486SEState[1];
		fVec490SE[1] = fVec490SEState;
		fVec489SE[1] = fVec489SEState[0];
		fVec489SE[2] = fVec489SEState[1];
		fVec495SE[1] = fVec495SEState;
		fVec494SE[1] = fVec494SEState[0];
		fVec494SE[2] = fVec494SEState[1];
		fVec500SE[1] = fVec500SEState;
		fVec499SE[1] = fVec499SEState[0];
		fVec499SE[2] = fVec499SEState[1];
		fVec505SE[1] = fVec505SEState;
		fVec504SE[1] = fVec504SEState[0];
		fVec504SE[2] = fVec504SEState[1];
		fVec510SE[1] = fVec510SEState;
		fVec509SE[1] = fVec509SEState[0];
		fVec509SE[2] = fVec509SEState[1];
		fVec515SE[1] = fVec515SEState;
		fVec514SE[1] = fVec514SEState[0];
		fVec514SE[2] = fVec514SEState[1];
		fVec518SE[1] = fVec518SEState;
		fVec517SE[1] = fVec517SEState[0];
		fVec517SE[2] = fVec517SEState[1];
		fVec523SE[1] = fVec523SEState;
		fVec522SE[1] = fVec522SEState[0];
		fVec522SE[2] = fVec522SEState[1];
		fVec528SE[1] = fVec528SEState;
		fVec527SE[1] = fVec527SEState[0];
		fVec527SE[2] = fVec527SEState[1];
		fVec533SE[1] = fVec533SEState;
		fVec532SE[1] = fVec532SEState[0];
		fVec532SE[2] = fVec532SEState[1];
		fVec538SE[1] = fVec538SEState;
		fVec537SE[1] = fVec537SEState[0];
		fVec537SE[2] = fVec537SEState[1];
		fVec543SE[1] = fVec543SEState;
		fVec542SE[1] = fVec542SEState[0];
		fVec542SE[2] = fVec542SEState[1];
		fVec546SE[1] = fVec546SEState;
		fVec545SE[1] = fVec545SEState[0];
		fVec545SE[2] = fVec545SEState[1];
		fVec551SE[1] = fVec551SEState;
		fVec550SE[1] = fVec550SEState[0];
		fVec550SE[2] = fVec550SEState[1];
		fVec556SE[1] = fVec556SEState;
		fVec555SE[1] = fVec555SEState[0];
		fVec555SE[2] = fVec555SEState[1];
		fVec561SE[1] = fVec561SEState;
		fVec560SE[1] = fVec560SEState[0];
		fVec560SE[2] = fVec560SEState[1];
		fVec566SE[1] = fVec566SEState;
		fVec565SE[1] = fVec565SEState[0];
		fVec565SE[2] = fVec565SEState[1];
		fVec571SE[1] = fVec571SEState;
		fVec570SE[1] = fVec570SEState[0];
		fVec570SE[2] = fVec570SEState[1];
		fVec574SE[1] = fVec574SEState;
		fVec573SE[1] = fVec573SEState[0];
		fVec573SE[2] = fVec573SEState[1];
		fVec579SE[1] = fVec579SEState;
		fVec578SE[1] = fVec578SEState[0];
		fVec578SE[2] = fVec578SEState[1];
		fVec584SE[1] = fVec584SEState;
		fVec583SE[1] = fVec583SEState[0];
		fVec583SE[2] = fVec583SEState[1];
		fVec589SE[1] = fVec589SEState;
		fVec588SE[1] = fVec588SEState[0];
		fVec588SE[2] = fVec588SEState[1];
		fVec594SE[1] = fVec594SEState;
		fVec593SE[1] = fVec593SEState[0];
		fVec593SE[2] = fVec593SEState[1];
		fVec599SE[1] = fVec599SEState;
		fVec598SE[1] = fVec598SEState[0];
		fVec598SE[2] = fVec598SEState[1];
		fVec602SE[1] = fVec602SEState;
		fVec601SE[1] = fVec601SEState[0];
		fVec601SE[2] = fVec601SEState[1];
		fVec607SE[1] = fVec607SEState;
		fVec606SE[1] = fVec606SEState[0];
		fVec606SE[2] = fVec606SEState[1];
		fVec612SE[1] = fVec612SEState;
		fVec611SE[1] = fVec611SEState[0];
		fVec611SE[2] = fVec611SEState[1];
		fVec617SE[1] = fVec617SEState;
		fVec616SE[1] = fVec616SEState[0];
		fVec616SE[2] = fVec616SEState[1];
		fVec622SE[1] = fVec622SEState;
		fVec621SE[1] = fVec621SEState[0];
		fVec621SE[2] = fVec621SEState[1];
		fVec627SE[1] = fVec627SEState;
		fVec626SE[1] = fVec626SEState[0];
		fVec626SE[2] = fVec626SEState[1];
		fVec630SE[1] = fVec630SEState;
		fVec629SE[1] = fVec629SEState[0];
		fVec629SE[2] = fVec629SEState[1];
		fVec635SE[1] = fVec635SEState;
		fVec634SE[1] = fVec634SEState[0];
		fVec634SE[2] = fVec634SEState[1];
		fVec640SE[1] = fVec640SEState;
		fVec639SE[1] = fVec639SEState[0];
		fVec639SE[2] = fVec639SEState[1];
		fVec645SE[1] = fVec645SEState;
		fVec644SE[1] = fVec644SEState[0];
		fVec644SE[2] = fVec644SEState[1];
		fVec650SE[1] = fVec650SEState;
		fVec649SE[1] = fVec649SEState[0];
		fVec649SE[2] = fVec649SEState[1];
		fVec655SE[1] = fVec655SEState;
		fVec654SE[1] = fVec654SEState[0];
		fVec654SE[2] = fVec654SEState[1];
		fVec658SE[1] = fVec658SEState;
		fVec657SE[1] = fVec657SEState[0];
		fVec657SE[2] = fVec657SEState[1];
		fVec663SE[1] = fVec663SEState;
		fVec662SE[1] = fVec662SEState[0];
		fVec662SE[2] = fVec662SEState[1];
		fVec668SE[1] = fVec668SEState;
		fVec667SE[1] = fVec667SEState[0];
		fVec667SE[2] = fVec667SEState[1];
		fVec673SE[1] = fVec673SEState;
		fVec672SE[1] = fVec672SEState[0];
		fVec672SE[2] = fVec672SEState[1];
		fVec678SE[1] = fVec678SEState;
		fVec677SE[1] = fVec677SEState[0];
		fVec677SE[2] = fVec677SEState[1];
		fVec683SE[1] = fVec683SEState;
		fVec682SE[1] = fVec682SEState[0];
		fVec682SE[2] = fVec682SEState[1];
		fVec686SE[1] = fVec686SEState;
		fVec685SE[1] = fVec685SEState[0];
		fVec685SE[2] = fVec685SEState[1];
		fVec691SE[1] = fVec691SEState;
		fVec690SE[1] = fVec690SEState[0];
		fVec690SE[2] = fVec690SEState[1];
		fVec696SE[1] = fVec696SEState;
		fVec695SE[1] = fVec695SEState[0];
		fVec695SE[2] = fVec695SEState[1];
		fVec701SE[1] = fVec701SEState;
		fVec700SE[1] = fVec700SEState[0];
		fVec700SE[2] = fVec700SEState[1];
		fVec706SE[1] = fVec706SEState;
		fVec705SE[1] = fVec705SEState[0];
		fVec705SE[2] = fVec705SEState[1];
		fVec711SE[1] = fVec711SEState;
		fVec710SE[1] = fVec710SEState[0];
		fVec710SE[2] = fVec710SEState[1];
		fVec714SE[1] = fVec714SEState;
		fVec713SE[1] = fVec713SEState[0];
		fVec713SE[2] = fVec713SEState[1];
		fVec719SE[1] = fVec719SEState;
		fVec718SE[1] = fVec718SEState[0];
		fVec718SE[2] = fVec718SEState[1];
		fVec724SE[1] = fVec724SEState;
		fVec723SE[1] = fVec723SEState[0];
		fVec723SE[2] = fVec723SEState[1];
		fVec729SE[1] = fVec729SEState;
		fVec728SE[1] = fVec728SEState[0];
		fVec728SE[2] = fVec728SEState[1];
		fVec734SE[1] = fVec734SEState;
		fVec733SE[1] = fVec733SEState[0];
		fVec733SE[2] = fVec733SEState[1];
		fVec739SE[1] = fVec739SEState;
		fVec738SE[1] = fVec738SEState[0];
		fVec738SE[2] = fVec738SEState[1];
		fVec742SE[1] = fVec742SEState;
		fVec741SE[1] = fVec741SEState[0];
		fVec741SE[2] = fVec741SEState[1];
		fVec747SE[1] = fVec747SEState;
		fVec746SE[1] = fVec746SEState[0];
		fVec746SE[2] = fVec746SEState[1];
		fVec752SE[1] = fVec752SEState;
		fVec751SE[1] = fVec751SEState[0];
		fVec751SE[2] = fVec751SEState[1];
		fVec757SE[1] = fVec757SEState;
		fVec756SE[1] = fVec756SEState[0];
		fVec756SE[2] = fVec756SEState[1];
		fVec762SE[1] = fVec762SEState;
		fVec761SE[1] = fVec761SEState[0];
		fVec761SE[2] = fVec761SEState[1];
		fVec767SE[1] = fVec767SEState;
		fVec766SE[1] = fVec766SEState[0];
		fVec766SE[2] = fVec766SEState[1];
		fVec770SE[1] = fVec770SEState;
		fVec769SE[1] = fVec769SEState[0];
		fVec769SE[2] = fVec769SEState[1];
		fVec775SE[1] = fVec775SEState;
		fVec774SE[1] = fVec774SEState[0];
		fVec774SE[2] = fVec774SEState[1];
		fVec780SE[1] = fVec780SEState;
		fVec779SE[1] = fVec779SEState[0];
		fVec779SE[2] = fVec779SEState[1];
		fVec785SE[1] = fVec785SEState;
		fVec784SE[1] = fVec784SEState[0];
		fVec784SE[2] = fVec784SEState[1];
		fVec790SE[1] = fVec790SEState;
		fVec789SE[1] = fVec789SEState[0];
		fVec789SE[2] = fVec789SEState[1];
		fVec795SE[1] = fVec795SEState;
		fVec794SE[1] = fVec794SEState[0];
		fVec794SE[2] = fVec794SEState[1];
		fVec798SE[1] = fVec798SEState;
		fVec797SE[1] = fVec797SEState[0];
		fVec797SE[2] = fVec797SEState[1];
		fVec803SE[1] = fVec803SEState;
		fVec802SE[1] = fVec802SEState[0];
		fVec802SE[2] = fVec802SEState[1];
		fVec808SE[1] = fVec808SEState;
		fVec807SE[1] = fVec807SEState[0];
		fVec807SE[2] = fVec807SEState[1];
		fVec810SE[1] = fVec810SEState;
		fVec814SE[1] = fVec814SEState;
		fVec818SE[1] = fVec818SEState;
		fVec822SE[1] = fVec822SEState;
		fVec826SE[1] = fVec826SEState;
		fVec830SE[1] = fVec830SEState;
		fVec834SE[1] = fVec834SEState;
		fVec838SE[1] = fVec838SEState;
		fVec842SE[1] = fVec842SEState;
		fVec846SE[1] = fVec846SEState;
		fVec850SE[1] = fVec850SEState;
		fVec854SE[1] = fVec854SEState;
		fVec858SE[1] = fVec858SEState;
		fVec862SE[1] = fVec862SEState;
		fVec866SE[1] = fVec866SEState;
		fVec870SE[1] = fVec870SEState;
		fVec874SE[1] = fVec874SEState;
		fVec878SE[1] = fVec878SEState;
		fVec882SE[1] = fVec882SEState;
		fVec886SE[1] = fVec886SEState;
		fVec890SE[1] = fVec890SEState;
		fVec894SE[1] = fVec894SEState;
		fVec898SE[1] = fVec898SEState;
		fVec902SE[1] = fVec902SEState;
		fVec906SE[1] = fVec906SEState;
		fVec910SE[1] = fVec910SEState;
		fVec914SE[1] = fVec914SEState;
		fVec918SE[1] = fVec918SEState;
		fVec922SE[1] = fVec922SEState;
		fVec926SE[1] = fVec926SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fTemp1SE = fVec0SE[2]; // step: 25
			fVec1SE[0] = (fTemp0SE + -(fConst3KI * ((fConst4KI * fTemp1SE) + (fConst7KI * fVec1SE[1]) /* Sum */)) /* Sum */);
			fTemp2SE = fVec1SE[0]; // step: 42
			fVec0SE[0] = fTemp2SE;
			fTemp3SE = fVec5SE[2]; // step: 68
			fVec6SE[0] = ((fConst3KI * ((fConst9KI * fVec1SE[0]) + (fConst10KI * fVec0SE[1]) + (fConst9KI * fTemp1SE) /* Sum */)) + -(fConst11KI * ((fConst12KI * fTemp3SE) + (fConst13KI * fVec6SE[1]) /* Sum */)) /* Sum */);
			fTemp4SE = fVec6SE[0]; // step: 80
			fVec5SE[0] = fTemp4SE;
			fTemp5SE = fVec10SE[2]; // step: 104
			fVec11SE[0] = ((fConst11KI * ((fConst15KI * fVec6SE[0]) + (fConst16KI * fVec5SE[1]) + (fConst15KI * fTemp3SE) /* Sum */)) + -(fConst17KI * ((fConst18KI * fTemp5SE) + (fConst19KI * fVec11SE[1]) /* Sum */)) /* Sum */);
			fTemp6SE = fVec11SE[0]; // step: 116
			fVec10SE[0] = fTemp6SE;
			fTemp7SE = fVec13SE[2]; // step: 127
			fVec14SE[0] = (fTemp0SE + -(fConst20KI * ((fConst21KI * fTemp7SE) + (fConst22KI * fVec14SE[1]) /* Sum */)) /* Sum */);
			fTemp8SE = fVec14SE[0]; // step: 139
			fVec13SE[0] = fTemp8SE;
			fTemp9SE = fVec18SE[2]; // step: 164
			fVec19SE[0] = ((fConst20KI * ((fConst24KI * fVec14SE[0]) + (fConst25KI * fVec13SE[1]) + (fConst24KI * fTemp7SE) /* Sum */)) + -(fConst26KI * ((fConst27KI * fTemp9SE) + (fConst28KI * fVec19SE[1]) /* Sum */)) /* Sum */);
			fTemp10SE = fVec19SE[0]; // step: 176
			fVec18SE[0] = fTemp10SE;
			fTemp11SE = fVec23SE[2]; // step: 198
			fVec24SE[0] = ((fConst26KI * ((fConst29KI * fVec19SE[0]) + (fConst30KI * fVec18SE[1]) + (fConst29KI * fTemp9SE) /* Sum */)) + -(fConst31KI * ((fConst32KI * fTemp11SE) + (fConst33KI * fVec24SE[1]) /* Sum */)) /* Sum */);
			fTemp12SE = fVec24SE[0]; // step: 210
			fVec23SE[0] = fTemp12SE;
			fTemp13SE = (fConst31KI * ((fConst34KI * fVec24SE[0]) + (fConst35KI * fVec23SE[1]) + (fConst34KI * fTemp11SE) /* Sum */)); // step: 221
			fTemp14SE = fVec28SE[2]; // step: 233
			fVec29SE[0] = (fTemp13SE + -(fConst38KI * ((fConst39KI * fTemp14SE) + (fConst42KI * fVec29SE[1]) /* Sum */)) /* Sum */);
			fTemp15SE = fVec29SE[0]; // step: 248
			fVec28SE[0] = fTemp15SE;
			fTemp16SE = fVec33SE[2]; // step: 268
			fVec34SE[0] = ((fConst38KI * ((fConst44KI * fVec29SE[0]) + (fConst45KI * fVec28SE[1]) + (fConst44KI * fTemp14SE) /* Sum */)) + -(fConst46KI * ((fConst47KI * fTemp16SE) + (fConst48KI * fVec34SE[1]) /* Sum */)) /* Sum */);
			fTemp17SE = fVec34SE[0]; // step: 280
			fVec33SE[0] = fTemp17SE;
			fTemp18SE = fVec38SE[2]; // step: 300
			fVec39SE[0] = ((fConst46KI * ((fConst50KI * fVec34SE[0]) + (fConst51KI * fVec33SE[1]) + (fConst50KI * fTemp16SE) /* Sum */)) + -(fConst52KI * ((fConst53KI * fTemp18SE) + (fConst54KI * fVec39SE[1]) /* Sum */)) /* Sum */);
			fTemp19SE = fVec39SE[0]; // step: 312
			fVec38SE[0] = fTemp19SE;
			fTemp20SE = fVec41SE[2]; // step: 320
			fVec42SE[0] = (fTemp13SE + -(fConst55KI * ((fConst56KI * fTemp20SE) + (fConst57KI * fVec42SE[1]) /* Sum */)) /* Sum */);
			fTemp21SE = fVec42SE[0]; // step: 332
			fVec41SE[0] = fTemp21SE;
			fTemp22SE = fVec46SE[2]; // step: 352
			fVec47SE[0] = ((fConst55KI * ((fConst59KI * fVec42SE[0]) + (fConst60KI * fVec41SE[1]) + (fConst59KI * fTemp20SE) /* Sum */)) + -(fConst61KI * ((fConst62KI * fTemp22SE) + (fConst63KI * fVec47SE[1]) /* Sum */)) /* Sum */);
			fTemp23SE = fVec47SE[0]; // step: 364
			fVec46SE[0] = fTemp23SE;
			fTemp24SE = fVec51SE[2]; // step: 382
			fVec52SE[0] = ((fConst61KI * ((fConst64KI * fVec47SE[0]) + (fConst65KI * fVec46SE[1]) + (fConst64KI * fTemp22SE) /* Sum */)) + -(fConst66KI * ((fConst67KI * fTemp24SE) + (fConst68KI * fVec52SE[1]) /* Sum */)) /* Sum */);
			fTemp25SE = fVec52SE[0]; // step: 394
			fVec51SE[0] = fTemp25SE;
			fTemp26SE = (fConst66KI * ((fConst69KI * fVec52SE[0]) + (fConst70KI * fVec51SE[1]) + (fConst69KI * fTemp24SE) /* Sum */)); // step: 404
			fTemp27SE = fVec56SE[2]; // step: 416
			fVec57SE[0] = (fTemp26SE + -(fConst73KI * ((fConst74KI * fTemp27SE) + (fConst77KI * fVec57SE[1]) /* Sum */)) /* Sum */);
			fTemp28SE = fVec57SE[0]; // step: 431
			fVec56SE[0] = fTemp28SE;
			fTemp29SE = fVec61SE[2]; // step: 451
			fVec62SE[0] = ((fConst73KI * ((fConst79KI * fVec57SE[0]) + (fConst80KI * fVec56SE[1]) + (fConst79KI * fTemp27SE) /* Sum */)) + -(fConst81KI * ((fConst82KI * fTemp29SE) + (fConst83KI * fVec62SE[1]) /* Sum */)) /* Sum */);
			fTemp30SE = fVec62SE[0]; // step: 463
			fVec61SE[0] = fTemp30SE;
			fTemp31SE = fVec66SE[2]; // step: 483
			fVec67SE[0] = ((fConst81KI * ((fConst85KI * fVec62SE[0]) + (fConst86KI * fVec61SE[1]) + (fConst85KI * fTemp29SE) /* Sum */)) + -(fConst87KI * ((fConst88KI * fTemp31SE) + (fConst89KI * fVec67SE[1]) /* Sum */)) /* Sum */);
			fTemp32SE = fVec67SE[0]; // step: 495
			fVec66SE[0] = fTemp32SE;
			fTemp33SE = fVec69SE[2]; // step: 503
			fVec70SE[0] = (fTemp26SE + -(fConst90KI * ((fConst91KI * fTemp33SE) + (fConst92KI * fVec70SE[1]) /* Sum */)) /* Sum */);
			fTemp34SE = fVec70SE[0]; // step: 515
			fVec69SE[0] = fTemp34SE;
			fTemp35SE = fVec74SE[2]; // step: 535
			fVec75SE[0] = ((fConst90KI * ((fConst94KI * fVec70SE[0]) + (fConst95KI * fVec69SE[1]) + (fConst94KI * fTemp33SE) /* Sum */)) + -(fConst96KI * ((fConst97KI * fTemp35SE) + (fConst98KI * fVec75SE[1]) /* Sum */)) /* Sum */);
			fTemp36SE = fVec75SE[0]; // step: 547
			fVec74SE[0] = fTemp36SE;
			fTemp37SE = fVec79SE[2]; // step: 565
			fVec80SE[0] = ((fConst96KI * ((fConst99KI * fVec75SE[0]) + (fConst100KI * fVec74SE[1]) + (fConst99KI * fTemp35SE) /* Sum */)) + -(fConst101KI * ((fConst102KI * fTemp37SE) + (fConst103KI * fVec80SE[1]) /* Sum */)) /* Sum */);
			fTemp38SE = fVec80SE[0]; // step: 577
			fVec79SE[0] = fTemp38SE;
			fTemp39SE = (fConst101KI * ((fConst104KI * fVec80SE[0]) + (fConst105KI * fVec79SE[1]) + (fConst104KI * fTemp37SE) /* Sum */)); // step: 587
			fTemp40SE = fVec84SE[2]; // step: 599
			fVec85SE[0] = (fTemp39SE + -(fConst108KI * ((fConst109KI * fTemp40SE) + (fConst112KI * fVec85SE[1]) /* Sum */)) /* Sum */);
			fTemp41SE = fVec85SE[0]; // step: 614
			fVec84SE[0] = fTemp41SE;
			fTemp42SE = fVec89SE[2]; // step: 634
			fVec90SE[0] = ((fConst108KI * ((fConst114KI * fVec85SE[0]) + (fConst115KI * fVec84SE[1]) + (fConst114KI * fTemp40SE) /* Sum */)) + -(fConst116KI * ((fConst117KI * fTemp42SE) + (fConst118KI * fVec90SE[1]) /* Sum */)) /* Sum */);
			fTemp43SE = fVec90SE[0]; // step: 646
			fVec89SE[0] = fTemp43SE;
			fTemp44SE = fVec94SE[2]; // step: 666
			fVec95SE[0] = ((fConst116KI * ((fConst120KI * fVec90SE[0]) + (fConst121KI * fVec89SE[1]) + (fConst120KI * fTemp42SE) /* Sum */)) + -(fConst122KI * ((fConst123KI * fTemp44SE) + (fConst124KI * fVec95SE[1]) /* Sum */)) /* Sum */);
			fTemp45SE = fVec95SE[0]; // step: 678
			fVec94SE[0] = fTemp45SE;
			fTemp46SE = fVec97SE[2]; // step: 686
			fVec98SE[0] = (fTemp39SE + -(fConst125KI * ((fConst126KI * fTemp46SE) + (fConst127KI * fVec98SE[1]) /* Sum */)) /* Sum */);
			fTemp47SE = fVec98SE[0]; // step: 698
			fVec97SE[0] = fTemp47SE;
			fTemp48SE = fVec102SE[2]; // step: 718
			fVec103SE[0] = ((fConst125KI * ((fConst129KI * fVec98SE[0]) + (fConst130KI * fVec97SE[1]) + (fConst129KI * fTemp46SE) /* Sum */)) + -(fConst131KI * ((fConst132KI * fTemp48SE) + (fConst133KI * fVec103SE[1]) /* Sum */)) /* Sum */);
			fTemp49SE = fVec103SE[0]; // step: 730
			fVec102SE[0] = fTemp49SE;
			fTemp50SE = fVec107SE[2]; // step: 748
			fVec108SE[0] = ((fConst131KI * ((fConst134KI * fVec103SE[0]) + (fConst135KI * fVec102SE[1]) + (fConst134KI * fTemp48SE) /* Sum */)) + -(fConst136KI * ((fConst137KI * fTemp50SE) + (fConst138KI * fVec108SE[1]) /* Sum */)) /* Sum */);
			fTemp51SE = fVec108SE[0]; // step: 760
			fVec107SE[0] = fTemp51SE;
			fTemp52SE = (fConst136KI * ((fConst139KI * fVec108SE[0]) + (fConst140KI * fVec107SE[1]) + (fConst139KI * fTemp50SE) /* Sum */)); // step: 770
			fTemp53SE = fVec112SE[2]; // step: 782
			fVec113SE[0] = (fTemp52SE + -(fConst143KI * ((fConst144KI * fTemp53SE) + (fConst147KI * fVec113SE[1]) /* Sum */)) /* Sum */);
			fTemp54SE = fVec113SE[0]; // step: 797
			fVec112SE[0] = fTemp54SE;
			fTemp55SE = fVec117SE[2]; // step: 817
			fVec118SE[0] = ((fConst143KI * ((fConst149KI * fVec113SE[0]) + (fConst150KI * fVec112SE[1]) + (fConst149KI * fTemp53SE) /* Sum */)) + -(fConst151KI * ((fConst152KI * fTemp55SE) + (fConst153KI * fVec118SE[1]) /* Sum */)) /* Sum */);
			fTemp56SE = fVec118SE[0]; // step: 829
			fVec117SE[0] = fTemp56SE;
			fTemp57SE = fVec122SE[2]; // step: 849
			fVec123SE[0] = ((fConst151KI * ((fConst155KI * fVec118SE[0]) + (fConst156KI * fVec117SE[1]) + (fConst155KI * fTemp55SE) /* Sum */)) + -(fConst157KI * ((fConst158KI * fTemp57SE) + (fConst159KI * fVec123SE[1]) /* Sum */)) /* Sum */);
			fTemp58SE = fVec123SE[0]; // step: 861
			fVec122SE[0] = fTemp58SE;
			fTemp59SE = fVec125SE[2]; // step: 869
			fVec126SE[0] = (fTemp52SE + -(fConst160KI * ((fConst161KI * fTemp59SE) + (fConst162KI * fVec126SE[1]) /* Sum */)) /* Sum */);
			fTemp60SE = fVec126SE[0]; // step: 881
			fVec125SE[0] = fTemp60SE;
			fTemp61SE = fVec130SE[2]; // step: 901
			fVec131SE[0] = ((fConst160KI * ((fConst164KI * fVec126SE[0]) + (fConst165KI * fVec125SE[1]) + (fConst164KI * fTemp59SE) /* Sum */)) + -(fConst166KI * ((fConst167KI * fTemp61SE) + (fConst168KI * fVec131SE[1]) /* Sum */)) /* Sum */);
			fTemp62SE = fVec131SE[0]; // step: 913
			fVec130SE[0] = fTemp62SE;
			fTemp63SE = fVec135SE[2]; // step: 931
			fVec136SE[0] = ((fConst166KI * ((fConst169KI * fVec131SE[0]) + (fConst170KI * fVec130SE[1]) + (fConst169KI * fTemp61SE) /* Sum */)) + -(fConst171KI * ((fConst172KI * fTemp63SE) + (fConst173KI * fVec136SE[1]) /* Sum */)) /* Sum */);
			fTemp64SE = fVec136SE[0]; // step: 943
			fVec135SE[0] = fTemp64SE;
			fTemp65SE = (fConst171KI * ((fConst174KI * fVec136SE[0]) + (fConst175KI * fVec135SE[1]) + (fConst174KI * fTemp63SE) /* Sum */)); // step: 953
			fTemp66SE = fVec140SE[2]; // step: 965
			fVec141SE[0] = (fTemp65SE + -(fConst178KI * ((fConst179KI * fTemp66SE) + (fConst182KI * fVec141SE[1]) /* Sum */)) /* Sum */);
			fTemp67SE = fVec141SE[0]; // step: 980
			fVec140SE[0] = fTemp67SE;
			fTemp68SE = fVec145SE[2]; // step: 1000
			fVec146SE[0] = ((fConst178KI * ((fConst184KI * fVec141SE[0]) + (fConst185KI * fVec140SE[1]) + (fConst184KI * fTemp66SE) /* Sum */)) + -(fConst186KI * ((fConst187KI * fTemp68SE) + (fConst188KI * fVec146SE[1]) /* Sum */)) /* Sum */);
			fTemp69SE = fVec146SE[0]; // step: 1012
			fVec145SE[0] = fTemp69SE;
			fTemp70SE = fVec150SE[2]; // step: 1032
			fVec151SE[0] = ((fConst186KI * ((fConst190KI * fVec146SE[0]) + (fConst191KI * fVec145SE[1]) + (fConst190KI * fTemp68SE) /* Sum */)) + -(fConst192KI * ((fConst193KI * fTemp70SE) + (fConst194KI * fVec151SE[1]) /* Sum */)) /* Sum */);
			fTemp71SE = fVec151SE[0]; // step: 1044
			fVec150SE[0] = fTemp71SE;
			fTemp72SE = fVec153SE[2]; // step: 1052
			fVec154SE[0] = (fTemp65SE + -(fConst195KI * ((fConst196KI * fTemp72SE) + (fConst197KI * fVec154SE[1]) /* Sum */)) /* Sum */);
			fTemp73SE = fVec154SE[0]; // step: 1064
			fVec153SE[0] = fTemp73SE;
			fTemp74SE = fVec158SE[2]; // step: 1084
			fVec159SE[0] = ((fConst195KI * ((fConst199KI * fVec154SE[0]) + (fConst200KI * fVec153SE[1]) + (fConst199KI * fTemp72SE) /* Sum */)) + -(fConst201KI * ((fConst202KI * fTemp74SE) + (fConst203KI * fVec159SE[1]) /* Sum */)) /* Sum */);
			fTemp75SE = fVec159SE[0]; // step: 1096
			fVec158SE[0] = fTemp75SE;
			fTemp76SE = fVec163SE[2]; // step: 1114
			fVec164SE[0] = ((fConst201KI * ((fConst204KI * fVec159SE[0]) + (fConst205KI * fVec158SE[1]) + (fConst204KI * fTemp74SE) /* Sum */)) + -(fConst206KI * ((fConst207KI * fTemp76SE) + (fConst208KI * fVec164SE[1]) /* Sum */)) /* Sum */);
			fTemp77SE = fVec164SE[0]; // step: 1126
			fVec163SE[0] = fTemp77SE;
			fTemp78SE = (fConst206KI * ((fConst209KI * fVec164SE[0]) + (fConst210KI * fVec163SE[1]) + (fConst209KI * fTemp76SE) /* Sum */)); // step: 1136
			fTemp79SE = fVec168SE[2]; // step: 1148
			fVec169SE[0] = (fTemp78SE + -(fConst213KI * ((fConst214KI * fTemp79SE) + (fConst217KI * fVec169SE[1]) /* Sum */)) /* Sum */);
			fTemp80SE = fVec169SE[0]; // step: 1163
			fVec168SE[0] = fTemp80SE;
			fTemp81SE = fVec173SE[2]; // step: 1183
			fVec174SE[0] = ((fConst213KI * ((fConst219KI * fVec169SE[0]) + (fConst220KI * fVec168SE[1]) + (fConst219KI * fTemp79SE) /* Sum */)) + -(fConst221KI * ((fConst222KI * fTemp81SE) + (fConst223KI * fVec174SE[1]) /* Sum */)) /* Sum */);
			fTemp82SE = fVec174SE[0]; // step: 1195
			fVec173SE[0] = fTemp82SE;
			fTemp83SE = fVec178SE[2]; // step: 1215
			fVec179SE[0] = ((fConst221KI * ((fConst225KI * fVec174SE[0]) + (fConst226KI * fVec173SE[1]) + (fConst225KI * fTemp81SE) /* Sum */)) + -(fConst227KI * ((fConst228KI * fTemp83SE) + (fConst229KI * fVec179SE[1]) /* Sum */)) /* Sum */);
			fTemp84SE = fVec179SE[0]; // step: 1227
			fVec178SE[0] = fTemp84SE;
			fTemp85SE = fVec181SE[2]; // step: 1235
			fVec182SE[0] = (fTemp78SE + -(fConst230KI * ((fConst231KI * fTemp85SE) + (fConst232KI * fVec182SE[1]) /* Sum */)) /* Sum */);
			fTemp86SE = fVec182SE[0]; // step: 1247
			fVec181SE[0] = fTemp86SE;
			fTemp87SE = fVec186SE[2]; // step: 1267
			fVec187SE[0] = ((fConst230KI * ((fConst234KI * fVec182SE[0]) + (fConst235KI * fVec181SE[1]) + (fConst234KI * fTemp85SE) /* Sum */)) + -(fConst236KI * ((fConst237KI * fTemp87SE) + (fConst238KI * fVec187SE[1]) /* Sum */)) /* Sum */);
			fTemp88SE = fVec187SE[0]; // step: 1279
			fVec186SE[0] = fTemp88SE;
			fTemp89SE = fVec191SE[2]; // step: 1297
			fVec192SE[0] = ((fConst236KI * ((fConst239KI * fVec187SE[0]) + (fConst240KI * fVec186SE[1]) + (fConst239KI * fTemp87SE) /* Sum */)) + -(fConst241KI * ((fConst242KI * fTemp89SE) + (fConst243KI * fVec192SE[1]) /* Sum */)) /* Sum */);
			fTemp90SE = fVec192SE[0]; // step: 1309
			fVec191SE[0] = fTemp90SE;
			fTemp91SE = (fConst241KI * ((fConst244KI * fVec192SE[0]) + (fConst245KI * fVec191SE[1]) + (fConst244KI * fTemp89SE) /* Sum */)); // step: 1319
			fTemp92SE = fVec196SE[2]; // step: 1331
			fVec197SE[0] = (fTemp91SE + -(fConst248KI * ((fConst249KI * fTemp92SE) + (fConst252KI * fVec197SE[1]) /* Sum */)) /* Sum */);
			fTemp93SE = fVec197SE[0]; // step: 1346
			fVec196SE[0] = fTemp93SE;
			fTemp94SE = fVec201SE[2]; // step: 1366
			fVec202SE[0] = ((fConst248KI * ((fConst254KI * fVec197SE[0]) + (fConst255KI * fVec196SE[1]) + (fConst254KI * fTemp92SE) /* Sum */)) + -(fConst256KI * ((fConst257KI * fTemp94SE) + (fConst258KI * fVec202SE[1]) /* Sum */)) /* Sum */);
			fTemp95SE = fVec202SE[0]; // step: 1378
			fVec201SE[0] = fTemp95SE;
			fTemp96SE = fVec206SE[2]; // step: 1398
			fVec207SE[0] = ((fConst256KI * ((fConst260KI * fVec202SE[0]) + (fConst261KI * fVec201SE[1]) + (fConst260KI * fTemp94SE) /* Sum */)) + -(fConst262KI * ((fConst263KI * fTemp96SE) + (fConst264KI * fVec207SE[1]) /* Sum */)) /* Sum */);
			fTemp97SE = fVec207SE[0]; // step: 1410
			fVec206SE[0] = fTemp97SE;
			fTemp98SE = fVec209SE[2]; // step: 1418
			fVec210SE[0] = (fTemp91SE + -(fConst265KI * ((fConst266KI * fTemp98SE) + (fConst267KI * fVec210SE[1]) /* Sum */)) /* Sum */);
			fTemp99SE = fVec210SE[0]; // step: 1430
			fVec209SE[0] = fTemp99SE;
			fTemp100SE = fVec214SE[2]; // step: 1450
			fVec215SE[0] = ((fConst265KI * ((fConst269KI * fVec210SE[0]) + (fConst270KI * fVec209SE[1]) + (fConst269KI * fTemp98SE) /* Sum */)) + -(fConst271KI * ((fConst272KI * fTemp100SE) + (fConst273KI * fVec215SE[1]) /* Sum */)) /* Sum */);
			fTemp101SE = fVec215SE[0]; // step: 1462
			fVec214SE[0] = fTemp101SE;
			fTemp102SE = fVec219SE[2]; // step: 1480
			fVec220SE[0] = ((fConst271KI * ((fConst274KI * fVec215SE[0]) + (fConst275KI * fVec214SE[1]) + (fConst274KI * fTemp100SE) /* Sum */)) + -(fConst276KI * ((fConst277KI * fTemp102SE) + (fConst278KI * fVec220SE[1]) /* Sum */)) /* Sum */);
			fTemp103SE = fVec220SE[0]; // step: 1492
			fVec219SE[0] = fTemp103SE;
			fTemp104SE = (fConst276KI * ((fConst279KI * fVec220SE[0]) + (fConst280KI * fVec219SE[1]) + (fConst279KI * fTemp102SE) /* Sum */)); // step: 1502
			fTemp105SE = fVec224SE[2]; // step: 1514
			fVec225SE[0] = (fTemp104SE + -(fConst283KI * ((fConst284KI * fTemp105SE) + (fConst287KI * fVec225SE[1]) /* Sum */)) /* Sum */);
			fTemp106SE = fVec225SE[0]; // step: 1529
			fVec224SE[0] = fTemp106SE;
			fTemp107SE = fVec229SE[2]; // step: 1549
			fVec230SE[0] = ((fConst283KI * ((fConst289KI * fVec225SE[0]) + (fConst290KI * fVec224SE[1]) + (fConst289KI * fTemp105SE) /* Sum */)) + -(fConst291KI * ((fConst292KI * fTemp107SE) + (fConst293KI * fVec230SE[1]) /* Sum */)) /* Sum */);
			fTemp108SE = fVec230SE[0]; // step: 1561
			fVec229SE[0] = fTemp108SE;
			fTemp109SE = fVec234SE[2]; // step: 1581
			fVec235SE[0] = ((fConst291KI * ((fConst295KI * fVec230SE[0]) + (fConst296KI * fVec229SE[1]) + (fConst295KI * fTemp107SE) /* Sum */)) + -(fConst297KI * ((fConst298KI * fTemp109SE) + (fConst299KI * fVec235SE[1]) /* Sum */)) /* Sum */);
			fTemp110SE = fVec235SE[0]; // step: 1593
			fVec234SE[0] = fTemp110SE;
			fTemp111SE = fVec237SE[2]; // step: 1601
			fVec238SE[0] = (fTemp104SE + -(fConst300KI * ((fConst301KI * fTemp111SE) + (fConst302KI * fVec238SE[1]) /* Sum */)) /* Sum */);
			fTemp112SE = fVec238SE[0]; // step: 1613
			fVec237SE[0] = fTemp112SE;
			fTemp113SE = fVec242SE[2]; // step: 1633
			fVec243SE[0] = ((fConst300KI * ((fConst304KI * fVec238SE[0]) + (fConst305KI * fVec237SE[1]) + (fConst304KI * fTemp111SE) /* Sum */)) + -(fConst306KI * ((fConst307KI * fTemp113SE) + (fConst308KI * fVec243SE[1]) /* Sum */)) /* Sum */);
			fTemp114SE = fVec243SE[0]; // step: 1645
			fVec242SE[0] = fTemp114SE;
			fTemp115SE = fVec247SE[2]; // step: 1663
			fVec248SE[0] = ((fConst306KI * ((fConst309KI * fVec243SE[0]) + (fConst310KI * fVec242SE[1]) + (fConst309KI * fTemp113SE) /* Sum */)) + -(fConst311KI * ((fConst312KI * fTemp115SE) + (fConst313KI * fVec248SE[1]) /* Sum */)) /* Sum */);
			fTemp116SE = fVec248SE[0]; // step: 1675
			fVec247SE[0] = fTemp116SE;
			fTemp117SE = (fConst311KI * ((fConst314KI * fVec248SE[0]) + (fConst315KI * fVec247SE[1]) + (fConst314KI * fTemp115SE) /* Sum */)); // step: 1685
			fTemp118SE = fVec252SE[2]; // step: 1697
			fVec253SE[0] = (fTemp117SE + -(fConst318KI * ((fConst319KI * fTemp118SE) + (fConst322KI * fVec253SE[1]) /* Sum */)) /* Sum */);
			fTemp119SE = fVec253SE[0]; // step: 1712
			fVec252SE[0] = fTemp119SE;
			fTemp120SE = fVec257SE[2]; // step: 1732
			fVec258SE[0] = ((fConst318KI * ((fConst324KI * fVec253SE[0]) + (fConst325KI * fVec252SE[1]) + (fConst324KI * fTemp118SE) /* Sum */)) + -(fConst326KI * ((fConst327KI * fTemp120SE) + (fConst328KI * fVec258SE[1]) /* Sum */)) /* Sum */);
			fTemp121SE = fVec258SE[0]; // step: 1744
			fVec257SE[0] = fTemp121SE;
			fTemp122SE = fVec262SE[2]; // step: 1764
			fVec263SE[0] = ((fConst326KI * ((fConst330KI * fVec258SE[0]) + (fConst331KI * fVec257SE[1]) + (fConst330KI * fTemp120SE) /* Sum */)) + -(fConst332KI * ((fConst333KI * fTemp122SE) + (fConst334KI * fVec263SE[1]) /* Sum */)) /* Sum */);
			fTemp123SE = fVec263SE[0]; // step: 1776
			fVec262SE[0] = fTemp123SE;
			fTemp124SE = fVec265SE[2]; // step: 1784
			fVec266SE[0] = (fTemp117SE + -(fConst335KI * ((fConst336KI * fTemp124SE) + (fConst337KI * fVec266SE[1]) /* Sum */)) /* Sum */);
			fTemp125SE = fVec266SE[0]; // step: 1796
			fVec265SE[0] = fTemp125SE;
			fTemp126SE = fVec270SE[2]; // step: 1816
			fVec271SE[0] = ((fConst335KI * ((fConst339KI * fVec266SE[0]) + (fConst340KI * fVec265SE[1]) + (fConst339KI * fTemp124SE) /* Sum */)) + -(fConst341KI * ((fConst342KI * fTemp126SE) + (fConst343KI * fVec271SE[1]) /* Sum */)) /* Sum */);
			fTemp127SE = fVec271SE[0]; // step: 1828
			fVec270SE[0] = fTemp127SE;
			fTemp128SE = fVec275SE[2]; // step: 1846
			fVec276SE[0] = ((fConst341KI * ((fConst344KI * fVec271SE[0]) + (fConst345KI * fVec270SE[1]) + (fConst344KI * fTemp126SE) /* Sum */)) + -(fConst346KI * ((fConst347KI * fTemp128SE) + (fConst348KI * fVec276SE[1]) /* Sum */)) /* Sum */);
			fTemp129SE = fVec276SE[0]; // step: 1858
			fVec275SE[0] = fTemp129SE;
			fTemp130SE = (fConst346KI * ((fConst349KI * fVec276SE[0]) + (fConst350KI * fVec275SE[1]) + (fConst349KI * fTemp128SE) /* Sum */)); // step: 1868
			fTemp131SE = fVec280SE[2]; // step: 1880
			fVec281SE[0] = (fTemp130SE + -(fConst353KI * ((fConst354KI * fTemp131SE) + (fConst357KI * fVec281SE[1]) /* Sum */)) /* Sum */);
			fTemp132SE = fVec281SE[0]; // step: 1895
			fVec280SE[0] = fTemp132SE;
			fTemp133SE = fVec285SE[2]; // step: 1915
			fVec286SE[0] = ((fConst353KI * ((fConst359KI * fVec281SE[0]) + (fConst360KI * fVec280SE[1]) + (fConst359KI * fTemp131SE) /* Sum */)) + -(fConst361KI * ((fConst362KI * fTemp133SE) + (fConst363KI * fVec286SE[1]) /* Sum */)) /* Sum */);
			fTemp134SE = fVec286SE[0]; // step: 1927
			fVec285SE[0] = fTemp134SE;
			fTemp135SE = fVec290SE[2]; // step: 1947
			fVec291SE[0] = ((fConst361KI * ((fConst365KI * fVec286SE[0]) + (fConst366KI * fVec285SE[1]) + (fConst365KI * fTemp133SE) /* Sum */)) + -(fConst367KI * ((fConst368KI * fTemp135SE) + (fConst369KI * fVec291SE[1]) /* Sum */)) /* Sum */);
			fTemp136SE = fVec291SE[0]; // step: 1959
			fVec290SE[0] = fTemp136SE;
			fTemp137SE = fVec293SE[2]; // step: 1967
			fVec294SE[0] = (fTemp130SE + -(fConst370KI * ((fConst371KI * fTemp137SE) + (fConst372KI * fVec294SE[1]) /* Sum */)) /* Sum */);
			fTemp138SE = fVec294SE[0]; // step: 1979
			fVec293SE[0] = fTemp138SE;
			fTemp139SE = fVec298SE[2]; // step: 1999
			fVec299SE[0] = ((fConst370KI * ((fConst374KI * fVec294SE[0]) + (fConst375KI * fVec293SE[1]) + (fConst374KI * fTemp137SE) /* Sum */)) + -(fConst376KI * ((fConst377KI * fTemp139SE) + (fConst378KI * fVec299SE[1]) /* Sum */)) /* Sum */);
			fTemp140SE = fVec299SE[0]; // step: 2011
			fVec298SE[0] = fTemp140SE;
			fTemp141SE = fVec303SE[2]; // step: 2029
			fVec304SE[0] = ((fConst376KI * ((fConst379KI * fVec299SE[0]) + (fConst380KI * fVec298SE[1]) + (fConst379KI * fTemp139SE) /* Sum */)) + -(fConst381KI * ((fConst382KI * fTemp141SE) + (fConst383KI * fVec304SE[1]) /* Sum */)) /* Sum */);
			fTemp142SE = fVec304SE[0]; // step: 2041
			fVec303SE[0] = fTemp142SE;
			fTemp143SE = (fConst381KI * ((fConst384KI * fVec304SE[0]) + (fConst385KI * fVec303SE[1]) + (fConst384KI * fTemp141SE) /* Sum */)); // step: 2051
			fTemp144SE = fVec308SE[2]; // step: 2063
			fVec309SE[0] = (fTemp143SE + -(fConst388KI * ((fConst389KI * fTemp144SE) + (fConst392KI * fVec309SE[1]) /* Sum */)) /* Sum */);
			fTemp145SE = fVec309SE[0]; // step: 2078
			fVec308SE[0] = fTemp145SE;
			fTemp146SE = fVec313SE[2]; // step: 2098
			fVec314SE[0] = ((fConst388KI * ((fConst394KI * fVec309SE[0]) + (fConst395KI * fVec308SE[1]) + (fConst394KI * fTemp144SE) /* Sum */)) + -(fConst396KI * ((fConst397KI * fTemp146SE) + (fConst398KI * fVec314SE[1]) /* Sum */)) /* Sum */);
			fTemp147SE = fVec314SE[0]; // step: 2110
			fVec313SE[0] = fTemp147SE;
			fTemp148SE = fVec318SE[2]; // step: 2130
			fVec319SE[0] = ((fConst396KI * ((fConst400KI * fVec314SE[0]) + (fConst401KI * fVec313SE[1]) + (fConst400KI * fTemp146SE) /* Sum */)) + -(fConst402KI * ((fConst403KI * fTemp148SE) + (fConst404KI * fVec319SE[1]) /* Sum */)) /* Sum */);
			fTemp149SE = fVec319SE[0]; // step: 2142
			fVec318SE[0] = fTemp149SE;
			fTemp150SE = fVec321SE[2]; // step: 2150
			fVec322SE[0] = (fTemp143SE + -(fConst405KI * ((fConst406KI * fTemp150SE) + (fConst407KI * fVec322SE[1]) /* Sum */)) /* Sum */);
			fTemp151SE = fVec322SE[0]; // step: 2162
			fVec321SE[0] = fTemp151SE;
			fTemp152SE = fVec326SE[2]; // step: 2182
			fVec327SE[0] = ((fConst405KI * ((fConst409KI * fVec322SE[0]) + (fConst410KI * fVec321SE[1]) + (fConst409KI * fTemp150SE) /* Sum */)) + -(fConst411KI * ((fConst412KI * fTemp152SE) + (fConst413KI * fVec327SE[1]) /* Sum */)) /* Sum */);
			fTemp153SE = fVec327SE[0]; // step: 2194
			fVec326SE[0] = fTemp153SE;
			fTemp154SE = fVec331SE[2]; // step: 2212
			fVec332SE[0] = ((fConst411KI * ((fConst414KI * fVec327SE[0]) + (fConst415KI * fVec326SE[1]) + (fConst414KI * fTemp152SE) /* Sum */)) + -(fConst416KI * ((fConst417KI * fTemp154SE) + (fConst418KI * fVec332SE[1]) /* Sum */)) /* Sum */);
			fTemp155SE = fVec332SE[0]; // step: 2224
			fVec331SE[0] = fTemp155SE;
			fTemp156SE = (fConst416KI * ((fConst419KI * fVec332SE[0]) + (fConst420KI * fVec331SE[1]) + (fConst419KI * fTemp154SE) /* Sum */)); // step: 2234
			fTemp157SE = fVec336SE[2]; // step: 2246
			fVec337SE[0] = (fTemp156SE + -(fConst423KI * ((fConst424KI * fTemp157SE) + (fConst427KI * fVec337SE[1]) /* Sum */)) /* Sum */);
			fTemp158SE = fVec337SE[0]; // step: 2261
			fVec336SE[0] = fTemp158SE;
			fTemp159SE = fVec341SE[2]; // step: 2281
			fVec342SE[0] = ((fConst423KI * ((fConst429KI * fVec337SE[0]) + (fConst430KI * fVec336SE[1]) + (fConst429KI * fTemp157SE) /* Sum */)) + -(fConst431KI * ((fConst432KI * fTemp159SE) + (fConst433KI * fVec342SE[1]) /* Sum */)) /* Sum */);
			fTemp160SE = fVec342SE[0]; // step: 2293
			fVec341SE[0] = fTemp160SE;
			fTemp161SE = fVec346SE[2]; // step: 2313
			fVec347SE[0] = ((fConst431KI * ((fConst435KI * fVec342SE[0]) + (fConst436KI * fVec341SE[1]) + (fConst435KI * fTemp159SE) /* Sum */)) + -(fConst437KI * ((fConst438KI * fTemp161SE) + (fConst439KI * fVec347SE[1]) /* Sum */)) /* Sum */);
			fTemp162SE = fVec347SE[0]; // step: 2325
			fVec346SE[0] = fTemp162SE;
			fTemp163SE = fVec349SE[2]; // step: 2333
			fVec350SE[0] = (fTemp156SE + -(fConst440KI * ((fConst441KI * fTemp163SE) + (fConst442KI * fVec350SE[1]) /* Sum */)) /* Sum */);
			fTemp164SE = fVec350SE[0]; // step: 2345
			fVec349SE[0] = fTemp164SE;
			fTemp165SE = fVec354SE[2]; // step: 2365
			fVec355SE[0] = ((fConst440KI * ((fConst444KI * fVec350SE[0]) + (fConst445KI * fVec349SE[1]) + (fConst444KI * fTemp163SE) /* Sum */)) + -(fConst446KI * ((fConst447KI * fTemp165SE) + (fConst448KI * fVec355SE[1]) /* Sum */)) /* Sum */);
			fTemp166SE = fVec355SE[0]; // step: 2377
			fVec354SE[0] = fTemp166SE;
			fTemp167SE = fVec359SE[2]; // step: 2395
			fVec360SE[0] = ((fConst446KI * ((fConst449KI * fVec355SE[0]) + (fConst450KI * fVec354SE[1]) + (fConst449KI * fTemp165SE) /* Sum */)) + -(fConst451KI * ((fConst452KI * fTemp167SE) + (fConst453KI * fVec360SE[1]) /* Sum */)) /* Sum */);
			fTemp168SE = fVec360SE[0]; // step: 2407
			fVec359SE[0] = fTemp168SE;
			fTemp169SE = (fConst451KI * ((fConst454KI * fVec360SE[0]) + (fConst455KI * fVec359SE[1]) + (fConst454KI * fTemp167SE) /* Sum */)); // step: 2417
			fTemp170SE = fVec364SE[2]; // step: 2429
			fVec365SE[0] = (fTemp169SE + -(fConst458KI * ((fConst459KI * fTemp170SE) + (fConst462KI * fVec365SE[1]) /* Sum */)) /* Sum */);
			fTemp171SE = fVec365SE[0]; // step: 2444
			fVec364SE[0] = fTemp171SE;
			fTemp172SE = fVec369SE[2]; // step: 2464
			fVec370SE[0] = ((fConst458KI * ((fConst464KI * fVec365SE[0]) + (fConst465KI * fVec364SE[1]) + (fConst464KI * fTemp170SE) /* Sum */)) + -(fConst466KI * ((fConst467KI * fTemp172SE) + (fConst468KI * fVec370SE[1]) /* Sum */)) /* Sum */);
			fTemp173SE = fVec370SE[0]; // step: 2476
			fVec369SE[0] = fTemp173SE;
			fTemp174SE = fVec374SE[2]; // step: 2496
			fVec375SE[0] = ((fConst466KI * ((fConst470KI * fVec370SE[0]) + (fConst471KI * fVec369SE[1]) + (fConst470KI * fTemp172SE) /* Sum */)) + -(fConst472KI * ((fConst473KI * fTemp174SE) + (fConst474KI * fVec375SE[1]) /* Sum */)) /* Sum */);
			fTemp175SE = fVec375SE[0]; // step: 2508
			fVec374SE[0] = fTemp175SE;
			fTemp176SE = fVec377SE[2]; // step: 2516
			fVec378SE[0] = (fTemp169SE + -(fConst475KI * ((fConst476KI * fTemp176SE) + (fConst477KI * fVec378SE[1]) /* Sum */)) /* Sum */);
			fTemp177SE = fVec378SE[0]; // step: 2528
			fVec377SE[0] = fTemp177SE;
			fTemp178SE = fVec382SE[2]; // step: 2548
			fVec383SE[0] = ((fConst475KI * ((fConst479KI * fVec378SE[0]) + (fConst480KI * fVec377SE[1]) + (fConst479KI * fTemp176SE) /* Sum */)) + -(fConst481KI * ((fConst482KI * fTemp178SE) + (fConst483KI * fVec383SE[1]) /* Sum */)) /* Sum */);
			fTemp179SE = fVec383SE[0]; // step: 2560
			fVec382SE[0] = fTemp179SE;
			fTemp180SE = fVec387SE[2]; // step: 2578
			fVec388SE[0] = ((fConst481KI * ((fConst484KI * fVec383SE[0]) + (fConst485KI * fVec382SE[1]) + (fConst484KI * fTemp178SE) /* Sum */)) + -(fConst486KI * ((fConst487KI * fTemp180SE) + (fConst488KI * fVec388SE[1]) /* Sum */)) /* Sum */);
			fTemp181SE = fVec388SE[0]; // step: 2590
			fVec387SE[0] = fTemp181SE;
			fTemp182SE = (fConst486KI * ((fConst489KI * fVec388SE[0]) + (fConst490KI * fVec387SE[1]) + (fConst489KI * fTemp180SE) /* Sum */)); // step: 2600
			fTemp183SE = fVec392SE[2]; // step: 2612
			fVec393SE[0] = (fTemp182SE + -(fConst493KI * ((fConst494KI * fTemp183SE) + (fConst497KI * fVec393SE[1]) /* Sum */)) /* Sum */);
			fTemp184SE = fVec393SE[0]; // step: 2627
			fVec392SE[0] = fTemp184SE;
			fTemp185SE = fVec397SE[2]; // step: 2647
			fVec398SE[0] = ((fConst493KI * ((fConst499KI * fVec393SE[0]) + (fConst500KI * fVec392SE[1]) + (fConst499KI * fTemp183SE) /* Sum */)) + -(fConst501KI * ((fConst502KI * fTemp185SE) + (fConst503KI * fVec398SE[1]) /* Sum */)) /* Sum */);
			fTemp186SE = fVec398SE[0]; // step: 2659
			fVec397SE[0] = fTemp186SE;
			fTemp187SE = fVec402SE[2]; // step: 2679
			fVec403SE[0] = ((fConst501KI * ((fConst505KI * fVec398SE[0]) + (fConst506KI * fVec397SE[1]) + (fConst505KI * fTemp185SE) /* Sum */)) + -(fConst507KI * ((fConst508KI * fTemp187SE) + (fConst509KI * fVec403SE[1]) /* Sum */)) /* Sum */);
			fTemp188SE = fVec403SE[0]; // step: 2691
			fVec402SE[0] = fTemp188SE;
			fTemp189SE = fVec405SE[2]; // step: 2699
			fVec406SE[0] = (fTemp182SE + -(fConst510KI * ((fConst511KI * fTemp189SE) + (fConst512KI * fVec406SE[1]) /* Sum */)) /* Sum */);
			fTemp190SE = fVec406SE[0]; // step: 2711
			fVec405SE[0] = fTemp190SE;
			fTemp191SE = fVec410SE[2]; // step: 2731
			fVec411SE[0] = ((fConst510KI * ((fConst514KI * fVec406SE[0]) + (fConst515KI * fVec405SE[1]) + (fConst514KI * fTemp189SE) /* Sum */)) + -(fConst516KI * ((fConst517KI * fTemp191SE) + (fConst518KI * fVec411SE[1]) /* Sum */)) /* Sum */);
			fTemp192SE = fVec411SE[0]; // step: 2743
			fVec410SE[0] = fTemp192SE;
			fTemp193SE = fVec415SE[2]; // step: 2761
			fVec416SE[0] = ((fConst516KI * ((fConst519KI * fVec411SE[0]) + (fConst520KI * fVec410SE[1]) + (fConst519KI * fTemp191SE) /* Sum */)) + -(fConst521KI * ((fConst522KI * fTemp193SE) + (fConst523KI * fVec416SE[1]) /* Sum */)) /* Sum */);
			fTemp194SE = fVec416SE[0]; // step: 2773
			fVec415SE[0] = fTemp194SE;
			fTemp195SE = (fConst521KI * ((fConst524KI * fVec416SE[0]) + (fConst525KI * fVec415SE[1]) + (fConst524KI * fTemp193SE) /* Sum */)); // step: 2783
			fTemp196SE = fVec420SE[2]; // step: 2795
			fVec421SE[0] = (fTemp195SE + -(fConst528KI * ((fConst529KI * fTemp196SE) + (fConst532KI * fVec421SE[1]) /* Sum */)) /* Sum */);
			fTemp197SE = fVec421SE[0]; // step: 2810
			fVec420SE[0] = fTemp197SE;
			fTemp198SE = fVec425SE[2]; // step: 2830
			fVec426SE[0] = ((fConst528KI * ((fConst534KI * fVec421SE[0]) + (fConst535KI * fVec420SE[1]) + (fConst534KI * fTemp196SE) /* Sum */)) + -(fConst536KI * ((fConst537KI * fTemp198SE) + (fConst538KI * fVec426SE[1]) /* Sum */)) /* Sum */);
			fTemp199SE = fVec426SE[0]; // step: 2842
			fVec425SE[0] = fTemp199SE;
			fTemp200SE = fVec430SE[2]; // step: 2862
			fVec431SE[0] = ((fConst536KI * ((fConst540KI * fVec426SE[0]) + (fConst541KI * fVec425SE[1]) + (fConst540KI * fTemp198SE) /* Sum */)) + -(fConst542KI * ((fConst543KI * fTemp200SE) + (fConst544KI * fVec431SE[1]) /* Sum */)) /* Sum */);
			fTemp201SE = fVec431SE[0]; // step: 2874
			fVec430SE[0] = fTemp201SE;
			fTemp202SE = fVec433SE[2]; // step: 2882
			fVec434SE[0] = (fTemp195SE + -(fConst545KI * ((fConst546KI * fTemp202SE) + (fConst547KI * fVec434SE[1]) /* Sum */)) /* Sum */);
			fTemp203SE = fVec434SE[0]; // step: 2894
			fVec433SE[0] = fTemp203SE;
			fTemp204SE = fVec438SE[2]; // step: 2914
			fVec439SE[0] = ((fConst545KI * ((fConst549KI * fVec434SE[0]) + (fConst550KI * fVec433SE[1]) + (fConst549KI * fTemp202SE) /* Sum */)) + -(fConst551KI * ((fConst552KI * fTemp204SE) + (fConst553KI * fVec439SE[1]) /* Sum */)) /* Sum */);
			fTemp205SE = fVec439SE[0]; // step: 2926
			fVec438SE[0] = fTemp205SE;
			fTemp206SE = fVec443SE[2]; // step: 2944
			fVec444SE[0] = ((fConst551KI * ((fConst554KI * fVec439SE[0]) + (fConst555KI * fVec438SE[1]) + (fConst554KI * fTemp204SE) /* Sum */)) + -(fConst556KI * ((fConst557KI * fTemp206SE) + (fConst558KI * fVec444SE[1]) /* Sum */)) /* Sum */);
			fTemp207SE = fVec444SE[0]; // step: 2956
			fVec443SE[0] = fTemp207SE;
			fTemp208SE = (fConst556KI * ((fConst559KI * fVec444SE[0]) + (fConst560KI * fVec443SE[1]) + (fConst559KI * fTemp206SE) /* Sum */)); // step: 2966
			fTemp209SE = fVec448SE[2]; // step: 2978
			fVec449SE[0] = (fTemp208SE + -(fConst563KI * ((fConst564KI * fTemp209SE) + (fConst567KI * fVec449SE[1]) /* Sum */)) /* Sum */);
			fTemp210SE = fVec449SE[0]; // step: 2993
			fVec448SE[0] = fTemp210SE;
			fTemp211SE = fVec453SE[2]; // step: 3013
			fVec454SE[0] = ((fConst563KI * ((fConst569KI * fVec449SE[0]) + (fConst570KI * fVec448SE[1]) + (fConst569KI * fTemp209SE) /* Sum */)) + -(fConst571KI * ((fConst572KI * fTemp211SE) + (fConst573KI * fVec454SE[1]) /* Sum */)) /* Sum */);
			fTemp212SE = fVec454SE[0]; // step: 3025
			fVec453SE[0] = fTemp212SE;
			fTemp213SE = fVec458SE[2]; // step: 3045
			fVec459SE[0] = ((fConst571KI * ((fConst575KI * fVec454SE[0]) + (fConst576KI * fVec453SE[1]) + (fConst575KI * fTemp211SE) /* Sum */)) + -(fConst577KI * ((fConst578KI * fTemp213SE) + (fConst579KI * fVec459SE[1]) /* Sum */)) /* Sum */);
			fTemp214SE = fVec459SE[0]; // step: 3057
			fVec458SE[0] = fTemp214SE;
			fTemp215SE = fVec461SE[2]; // step: 3065
			fVec462SE[0] = (fTemp208SE + -(fConst580KI * ((fConst581KI * fTemp215SE) + (fConst582KI * fVec462SE[1]) /* Sum */)) /* Sum */);
			fTemp216SE = fVec462SE[0]; // step: 3077
			fVec461SE[0] = fTemp216SE;
			fTemp217SE = fVec466SE[2]; // step: 3097
			fVec467SE[0] = ((fConst580KI * ((fConst584KI * fVec462SE[0]) + (fConst585KI * fVec461SE[1]) + (fConst584KI * fTemp215SE) /* Sum */)) + -(fConst586KI * ((fConst587KI * fTemp217SE) + (fConst588KI * fVec467SE[1]) /* Sum */)) /* Sum */);
			fTemp218SE = fVec467SE[0]; // step: 3109
			fVec466SE[0] = fTemp218SE;
			fTemp219SE = fVec471SE[2]; // step: 3127
			fVec472SE[0] = ((fConst586KI * ((fConst589KI * fVec467SE[0]) + (fConst590KI * fVec466SE[1]) + (fConst589KI * fTemp217SE) /* Sum */)) + -(fConst591KI * ((fConst592KI * fTemp219SE) + (fConst593KI * fVec472SE[1]) /* Sum */)) /* Sum */);
			fTemp220SE = fVec472SE[0]; // step: 3139
			fVec471SE[0] = fTemp220SE;
			fTemp221SE = (fConst591KI * ((fConst594KI * fVec472SE[0]) + (fConst595KI * fVec471SE[1]) + (fConst594KI * fTemp219SE) /* Sum */)); // step: 3149
			fTemp222SE = fVec476SE[2]; // step: 3161
			fVec477SE[0] = (fTemp221SE + -(fConst598KI * ((fConst599KI * fTemp222SE) + (fConst602KI * fVec477SE[1]) /* Sum */)) /* Sum */);
			fTemp223SE = fVec477SE[0]; // step: 3176
			fVec476SE[0] = fTemp223SE;
			fTemp224SE = fVec481SE[2]; // step: 3196
			fVec482SE[0] = ((fConst598KI * ((fConst604KI * fVec477SE[0]) + (fConst605KI * fVec476SE[1]) + (fConst604KI * fTemp222SE) /* Sum */)) + -(fConst606KI * ((fConst607KI * fTemp224SE) + (fConst608KI * fVec482SE[1]) /* Sum */)) /* Sum */);
			fTemp225SE = fVec482SE[0]; // step: 3208
			fVec481SE[0] = fTemp225SE;
			fTemp226SE = fVec486SE[2]; // step: 3228
			fVec487SE[0] = ((fConst606KI * ((fConst610KI * fVec482SE[0]) + (fConst611KI * fVec481SE[1]) + (fConst610KI * fTemp224SE) /* Sum */)) + -(fConst612KI * ((fConst613KI * fTemp226SE) + (fConst614KI * fVec487SE[1]) /* Sum */)) /* Sum */);
			fTemp227SE = fVec487SE[0]; // step: 3240
			fVec486SE[0] = fTemp227SE;
			fTemp228SE = fVec489SE[2]; // step: 3248
			fVec490SE[0] = (fTemp221SE + -(fConst615KI * ((fConst616KI * fTemp228SE) + (fConst617KI * fVec490SE[1]) /* Sum */)) /* Sum */);
			fTemp229SE = fVec490SE[0]; // step: 3260
			fVec489SE[0] = fTemp229SE;
			fTemp230SE = fVec494SE[2]; // step: 3280
			fVec495SE[0] = ((fConst615KI * ((fConst619KI * fVec490SE[0]) + (fConst620KI * fVec489SE[1]) + (fConst619KI * fTemp228SE) /* Sum */)) + -(fConst621KI * ((fConst622KI * fTemp230SE) + (fConst623KI * fVec495SE[1]) /* Sum */)) /* Sum */);
			fTemp231SE = fVec495SE[0]; // step: 3292
			fVec494SE[0] = fTemp231SE;
			fTemp232SE = fVec499SE[2]; // step: 3310
			fVec500SE[0] = ((fConst621KI * ((fConst624KI * fVec495SE[0]) + (fConst625KI * fVec494SE[1]) + (fConst624KI * fTemp230SE) /* Sum */)) + -(fConst626KI * ((fConst627KI * fTemp232SE) + (fConst628KI * fVec500SE[1]) /* Sum */)) /* Sum */);
			fTemp233SE = fVec500SE[0]; // step: 3322
			fVec499SE[0] = fTemp233SE;
			fTemp234SE = (fConst626KI * ((fConst629KI * fVec500SE[0]) + (fConst630KI * fVec499SE[1]) + (fConst629KI * fTemp232SE) /* Sum */)); // step: 3332
			fTemp235SE = fVec504SE[2]; // step: 3344
			fVec505SE[0] = (fTemp234SE + -(fConst633KI * ((fConst634KI * fTemp235SE) + (fConst637KI * fVec505SE[1]) /* Sum */)) /* Sum */);
			fTemp236SE = fVec505SE[0]; // step: 3359
			fVec504SE[0] = fTemp236SE;
			fTemp237SE = fVec509SE[2]; // step: 3379
			fVec510SE[0] = ((fConst633KI * ((fConst639KI * fVec505SE[0]) + (fConst640KI * fVec504SE[1]) + (fConst639KI * fTemp235SE) /* Sum */)) + -(fConst641KI * ((fConst642KI * fTemp237SE) + (fConst643KI * fVec510SE[1]) /* Sum */)) /* Sum */);
			fTemp238SE = fVec510SE[0]; // step: 3391
			fVec509SE[0] = fTemp238SE;
			fTemp239SE = fVec514SE[2]; // step: 3411
			fVec515SE[0] = ((fConst641KI * ((fConst645KI * fVec510SE[0]) + (fConst646KI * fVec509SE[1]) + (fConst645KI * fTemp237SE) /* Sum */)) + -(fConst647KI * ((fConst648KI * fTemp239SE) + (fConst649KI * fVec515SE[1]) /* Sum */)) /* Sum */);
			fTemp240SE = fVec515SE[0]; // step: 3423
			fVec514SE[0] = fTemp240SE;
			fTemp241SE = fVec517SE[2]; // step: 3431
			fVec518SE[0] = (fTemp234SE + -(fConst650KI * ((fConst651KI * fTemp241SE) + (fConst652KI * fVec518SE[1]) /* Sum */)) /* Sum */);
			fTemp242SE = fVec518SE[0]; // step: 3443
			fVec517SE[0] = fTemp242SE;
			fTemp243SE = fVec522SE[2]; // step: 3463
			fVec523SE[0] = ((fConst650KI * ((fConst654KI * fVec518SE[0]) + (fConst655KI * fVec517SE[1]) + (fConst654KI * fTemp241SE) /* Sum */)) + -(fConst656KI * ((fConst657KI * fTemp243SE) + (fConst658KI * fVec523SE[1]) /* Sum */)) /* Sum */);
			fTemp244SE = fVec523SE[0]; // step: 3475
			fVec522SE[0] = fTemp244SE;
			fTemp245SE = fVec527SE[2]; // step: 3493
			fVec528SE[0] = ((fConst656KI * ((fConst659KI * fVec523SE[0]) + (fConst660KI * fVec522SE[1]) + (fConst659KI * fTemp243SE) /* Sum */)) + -(fConst661KI * ((fConst662KI * fTemp245SE) + (fConst663KI * fVec528SE[1]) /* Sum */)) /* Sum */);
			fTemp246SE = fVec528SE[0]; // step: 3505
			fVec527SE[0] = fTemp246SE;
			fTemp247SE = (fConst661KI * ((fConst664KI * fVec528SE[0]) + (fConst665KI * fVec527SE[1]) + (fConst664KI * fTemp245SE) /* Sum */)); // step: 3515
			fTemp248SE = fVec532SE[2]; // step: 3527
			fVec533SE[0] = (fTemp247SE + -(fConst668KI * ((fConst669KI * fTemp248SE) + (fConst672KI * fVec533SE[1]) /* Sum */)) /* Sum */);
			fTemp249SE = fVec533SE[0]; // step: 3542
			fVec532SE[0] = fTemp249SE;
			fTemp250SE = fVec537SE[2]; // step: 3562
			fVec538SE[0] = ((fConst668KI * ((fConst674KI * fVec533SE[0]) + (fConst675KI * fVec532SE[1]) + (fConst674KI * fTemp248SE) /* Sum */)) + -(fConst676KI * ((fConst677KI * fTemp250SE) + (fConst678KI * fVec538SE[1]) /* Sum */)) /* Sum */);
			fTemp251SE = fVec538SE[0]; // step: 3574
			fVec537SE[0] = fTemp251SE;
			fTemp252SE = fVec542SE[2]; // step: 3594
			fVec543SE[0] = ((fConst676KI * ((fConst680KI * fVec538SE[0]) + (fConst681KI * fVec537SE[1]) + (fConst680KI * fTemp250SE) /* Sum */)) + -(fConst682KI * ((fConst683KI * fTemp252SE) + (fConst684KI * fVec543SE[1]) /* Sum */)) /* Sum */);
			fTemp253SE = fVec543SE[0]; // step: 3606
			fVec542SE[0] = fTemp253SE;
			fTemp254SE = fVec545SE[2]; // step: 3614
			fVec546SE[0] = (fTemp247SE + -(fConst685KI * ((fConst686KI * fTemp254SE) + (fConst687KI * fVec546SE[1]) /* Sum */)) /* Sum */);
			fTemp255SE = fVec546SE[0]; // step: 3626
			fVec545SE[0] = fTemp255SE;
			fTemp256SE = fVec550SE[2]; // step: 3646
			fVec551SE[0] = ((fConst685KI * ((fConst689KI * fVec546SE[0]) + (fConst690KI * fVec545SE[1]) + (fConst689KI * fTemp254SE) /* Sum */)) + -(fConst691KI * ((fConst692KI * fTemp256SE) + (fConst693KI * fVec551SE[1]) /* Sum */)) /* Sum */);
			fTemp257SE = fVec551SE[0]; // step: 3658
			fVec550SE[0] = fTemp257SE;
			fTemp258SE = fVec555SE[2]; // step: 3676
			fVec556SE[0] = ((fConst691KI * ((fConst694KI * fVec551SE[0]) + (fConst695KI * fVec550SE[1]) + (fConst694KI * fTemp256SE) /* Sum */)) + -(fConst696KI * ((fConst697KI * fTemp258SE) + (fConst698KI * fVec556SE[1]) /* Sum */)) /* Sum */);
			fTemp259SE = fVec556SE[0]; // step: 3688
			fVec555SE[0] = fTemp259SE;
			fTemp260SE = (fConst696KI * ((fConst699KI * fVec556SE[0]) + (fConst700KI * fVec555SE[1]) + (fConst699KI * fTemp258SE) /* Sum */)); // step: 3698
			fTemp261SE = fVec560SE[2]; // step: 3710
			fVec561SE[0] = (fTemp260SE + -(fConst703KI * ((fConst704KI * fTemp261SE) + (fConst707KI * fVec561SE[1]) /* Sum */)) /* Sum */);
			fTemp262SE = fVec561SE[0]; // step: 3725
			fVec560SE[0] = fTemp262SE;
			fTemp263SE = fVec565SE[2]; // step: 3745
			fVec566SE[0] = ((fConst703KI * ((fConst709KI * fVec561SE[0]) + (fConst710KI * fVec560SE[1]) + (fConst709KI * fTemp261SE) /* Sum */)) + -(fConst711KI * ((fConst712KI * fTemp263SE) + (fConst713KI * fVec566SE[1]) /* Sum */)) /* Sum */);
			fTemp264SE = fVec566SE[0]; // step: 3757
			fVec565SE[0] = fTemp264SE;
			fTemp265SE = fVec570SE[2]; // step: 3777
			fVec571SE[0] = ((fConst711KI * ((fConst715KI * fVec566SE[0]) + (fConst716KI * fVec565SE[1]) + (fConst715KI * fTemp263SE) /* Sum */)) + -(fConst717KI * ((fConst718KI * fTemp265SE) + (fConst719KI * fVec571SE[1]) /* Sum */)) /* Sum */);
			fTemp266SE = fVec571SE[0]; // step: 3789
			fVec570SE[0] = fTemp266SE;
			fTemp267SE = fVec573SE[2]; // step: 3797
			fVec574SE[0] = (fTemp260SE + -(fConst720KI * ((fConst721KI * fTemp267SE) + (fConst722KI * fVec574SE[1]) /* Sum */)) /* Sum */);
			fTemp268SE = fVec574SE[0]; // step: 3809
			fVec573SE[0] = fTemp268SE;
			fTemp269SE = fVec578SE[2]; // step: 3829
			fVec579SE[0] = ((fConst720KI * ((fConst724KI * fVec574SE[0]) + (fConst725KI * fVec573SE[1]) + (fConst724KI * fTemp267SE) /* Sum */)) + -(fConst726KI * ((fConst727KI * fTemp269SE) + (fConst728KI * fVec579SE[1]) /* Sum */)) /* Sum */);
			fTemp270SE = fVec579SE[0]; // step: 3841
			fVec578SE[0] = fTemp270SE;
			fTemp271SE = fVec583SE[2]; // step: 3859
			fVec584SE[0] = ((fConst726KI * ((fConst729KI * fVec579SE[0]) + (fConst730KI * fVec578SE[1]) + (fConst729KI * fTemp269SE) /* Sum */)) + -(fConst731KI * ((fConst732KI * fTemp271SE) + (fConst733KI * fVec584SE[1]) /* Sum */)) /* Sum */);
			fTemp272SE = fVec584SE[0]; // step: 3871
			fVec583SE[0] = fTemp272SE;
			fTemp273SE = (fConst731KI * ((fConst734KI * fVec584SE[0]) + (fConst735KI * fVec583SE[1]) + (fConst734KI * fTemp271SE) /* Sum */)); // step: 3881
			fTemp274SE = fVec588SE[2]; // step: 3893
			fVec589SE[0] = (fTemp273SE + -(fConst738KI * ((fConst739KI * fTemp274SE) + (fConst742KI * fVec589SE[1]) /* Sum */)) /* Sum */);
			fTemp275SE = fVec589SE[0]; // step: 3908
			fVec588SE[0] = fTemp275SE;
			fTemp276SE = fVec593SE[2]; // step: 3928
			fVec594SE[0] = ((fConst738KI * ((fConst744KI * fVec589SE[0]) + (fConst745KI * fVec588SE[1]) + (fConst744KI * fTemp274SE) /* Sum */)) + -(fConst746KI * ((fConst747KI * fTemp276SE) + (fConst748KI * fVec594SE[1]) /* Sum */)) /* Sum */);
			fTemp277SE = fVec594SE[0]; // step: 3940
			fVec593SE[0] = fTemp277SE;
			fTemp278SE = fVec598SE[2]; // step: 3960
			fVec599SE[0] = ((fConst746KI * ((fConst750KI * fVec594SE[0]) + (fConst751KI * fVec593SE[1]) + (fConst750KI * fTemp276SE) /* Sum */)) + -(fConst752KI * ((fConst753KI * fTemp278SE) + (fConst754KI * fVec599SE[1]) /* Sum */)) /* Sum */);
			fTemp279SE = fVec599SE[0]; // step: 3972
			fVec598SE[0] = fTemp279SE;
			fTemp280SE = fVec601SE[2]; // step: 3980
			fVec602SE[0] = (fTemp273SE + -(fConst755KI * ((fConst756KI * fTemp280SE) + (fConst757KI * fVec602SE[1]) /* Sum */)) /* Sum */);
			fTemp281SE = fVec602SE[0]; // step: 3992
			fVec601SE[0] = fTemp281SE;
			fTemp282SE = fVec606SE[2]; // step: 4012
			fVec607SE[0] = ((fConst755KI * ((fConst759KI * fVec602SE[0]) + (fConst760KI * fVec601SE[1]) + (fConst759KI * fTemp280SE) /* Sum */)) + -(fConst761KI * ((fConst762KI * fTemp282SE) + (fConst763KI * fVec607SE[1]) /* Sum */)) /* Sum */);
			fTemp283SE = fVec607SE[0]; // step: 4024
			fVec606SE[0] = fTemp283SE;
			fTemp284SE = fVec611SE[2]; // step: 4042
			fVec612SE[0] = ((fConst761KI * ((fConst764KI * fVec607SE[0]) + (fConst765KI * fVec606SE[1]) + (fConst764KI * fTemp282SE) /* Sum */)) + -(fConst766KI * ((fConst767KI * fTemp284SE) + (fConst768KI * fVec612SE[1]) /* Sum */)) /* Sum */);
			fTemp285SE = fVec612SE[0]; // step: 4054
			fVec611SE[0] = fTemp285SE;
			fTemp286SE = (fConst766KI * ((fConst769KI * fVec612SE[0]) + (fConst770KI * fVec611SE[1]) + (fConst769KI * fTemp284SE) /* Sum */)); // step: 4064
			fTemp287SE = fVec616SE[2]; // step: 4076
			fVec617SE[0] = (fTemp286SE + -(fConst773KI * ((fConst774KI * fTemp287SE) + (fConst777KI * fVec617SE[1]) /* Sum */)) /* Sum */);
			fTemp288SE = fVec617SE[0]; // step: 4091
			fVec616SE[0] = fTemp288SE;
			fTemp289SE = fVec621SE[2]; // step: 4111
			fVec622SE[0] = ((fConst773KI * ((fConst779KI * fVec617SE[0]) + (fConst780KI * fVec616SE[1]) + (fConst779KI * fTemp287SE) /* Sum */)) + -(fConst781KI * ((fConst782KI * fTemp289SE) + (fConst783KI * fVec622SE[1]) /* Sum */)) /* Sum */);
			fTemp290SE = fVec622SE[0]; // step: 4123
			fVec621SE[0] = fTemp290SE;
			fTemp291SE = fVec626SE[2]; // step: 4143
			fVec627SE[0] = ((fConst781KI * ((fConst785KI * fVec622SE[0]) + (fConst786KI * fVec621SE[1]) + (fConst785KI * fTemp289SE) /* Sum */)) + -(fConst787KI * ((fConst788KI * fTemp291SE) + (fConst789KI * fVec627SE[1]) /* Sum */)) /* Sum */);
			fTemp292SE = fVec627SE[0]; // step: 4155
			fVec626SE[0] = fTemp292SE;
			fTemp293SE = fVec629SE[2]; // step: 4163
			fVec630SE[0] = (fTemp286SE + -(fConst790KI * ((fConst791KI * fTemp293SE) + (fConst792KI * fVec630SE[1]) /* Sum */)) /* Sum */);
			fTemp294SE = fVec630SE[0]; // step: 4175
			fVec629SE[0] = fTemp294SE;
			fTemp295SE = fVec634SE[2]; // step: 4195
			fVec635SE[0] = ((fConst790KI * ((fConst794KI * fVec630SE[0]) + (fConst795KI * fVec629SE[1]) + (fConst794KI * fTemp293SE) /* Sum */)) + -(fConst796KI * ((fConst797KI * fTemp295SE) + (fConst798KI * fVec635SE[1]) /* Sum */)) /* Sum */);
			fTemp296SE = fVec635SE[0]; // step: 4207
			fVec634SE[0] = fTemp296SE;
			fTemp297SE = fVec639SE[2]; // step: 4225
			fVec640SE[0] = ((fConst796KI * ((fConst799KI * fVec635SE[0]) + (fConst800KI * fVec634SE[1]) + (fConst799KI * fTemp295SE) /* Sum */)) + -(fConst801KI * ((fConst802KI * fTemp297SE) + (fConst803KI * fVec640SE[1]) /* Sum */)) /* Sum */);
			fTemp298SE = fVec640SE[0]; // step: 4237
			fVec639SE[0] = fTemp298SE;
			fTemp299SE = (fConst801KI * ((fConst804KI * fVec640SE[0]) + (fConst805KI * fVec639SE[1]) + (fConst804KI * fTemp297SE) /* Sum */)); // step: 4247
			fTemp300SE = fVec644SE[2]; // step: 4259
			fVec645SE[0] = (fTemp299SE + -(fConst808KI * ((fConst809KI * fTemp300SE) + (fConst812KI * fVec645SE[1]) /* Sum */)) /* Sum */);
			fTemp301SE = fVec645SE[0]; // step: 4274
			fVec644SE[0] = fTemp301SE;
			fTemp302SE = fVec649SE[2]; // step: 4294
			fVec650SE[0] = ((fConst808KI * ((fConst814KI * fVec645SE[0]) + (fConst815KI * fVec644SE[1]) + (fConst814KI * fTemp300SE) /* Sum */)) + -(fConst816KI * ((fConst817KI * fTemp302SE) + (fConst818KI * fVec650SE[1]) /* Sum */)) /* Sum */);
			fTemp303SE = fVec650SE[0]; // step: 4306
			fVec649SE[0] = fTemp303SE;
			fTemp304SE = fVec654SE[2]; // step: 4326
			fVec655SE[0] = ((fConst816KI * ((fConst820KI * fVec650SE[0]) + (fConst821KI * fVec649SE[1]) + (fConst820KI * fTemp302SE) /* Sum */)) + -(fConst822KI * ((fConst823KI * fTemp304SE) + (fConst824KI * fVec655SE[1]) /* Sum */)) /* Sum */);
			fTemp305SE = fVec655SE[0]; // step: 4338
			fVec654SE[0] = fTemp305SE;
			fTemp306SE = fVec657SE[2]; // step: 4346
			fVec658SE[0] = (fTemp299SE + -(fConst825KI * ((fConst826KI * fTemp306SE) + (fConst827KI * fVec658SE[1]) /* Sum */)) /* Sum */);
			fTemp307SE = fVec658SE[0]; // step: 4358
			fVec657SE[0] = fTemp307SE;
			fTemp308SE = fVec662SE[2]; // step: 4378
			fVec663SE[0] = ((fConst825KI * ((fConst829KI * fVec658SE[0]) + (fConst830KI * fVec657SE[1]) + (fConst829KI * fTemp306SE) /* Sum */)) + -(fConst831KI * ((fConst832KI * fTemp308SE) + (fConst833KI * fVec663SE[1]) /* Sum */)) /* Sum */);
			fTemp309SE = fVec663SE[0]; // step: 4390
			fVec662SE[0] = fTemp309SE;
			fTemp310SE = fVec667SE[2]; // step: 4408
			fVec668SE[0] = ((fConst831KI * ((fConst834KI * fVec663SE[0]) + (fConst835KI * fVec662SE[1]) + (fConst834KI * fTemp308SE) /* Sum */)) + -(fConst836KI * ((fConst837KI * fTemp310SE) + (fConst838KI * fVec668SE[1]) /* Sum */)) /* Sum */);
			fTemp311SE = fVec668SE[0]; // step: 4420
			fVec667SE[0] = fTemp311SE;
			fTemp312SE = (fConst836KI * ((fConst839KI * fVec668SE[0]) + (fConst840KI * fVec667SE[1]) + (fConst839KI * fTemp310SE) /* Sum */)); // step: 4430
			fTemp313SE = fVec672SE[2]; // step: 4442
			fVec673SE[0] = (fTemp312SE + -(fConst843KI * ((fConst844KI * fTemp313SE) + (fConst847KI * fVec673SE[1]) /* Sum */)) /* Sum */);
			fTemp314SE = fVec673SE[0]; // step: 4457
			fVec672SE[0] = fTemp314SE;
			fTemp315SE = fVec677SE[2]; // step: 4477
			fVec678SE[0] = ((fConst843KI * ((fConst849KI * fVec673SE[0]) + (fConst850KI * fVec672SE[1]) + (fConst849KI * fTemp313SE) /* Sum */)) + -(fConst851KI * ((fConst852KI * fTemp315SE) + (fConst853KI * fVec678SE[1]) /* Sum */)) /* Sum */);
			fTemp316SE = fVec678SE[0]; // step: 4489
			fVec677SE[0] = fTemp316SE;
			fTemp317SE = fVec682SE[2]; // step: 4509
			fVec683SE[0] = ((fConst851KI * ((fConst855KI * fVec678SE[0]) + (fConst856KI * fVec677SE[1]) + (fConst855KI * fTemp315SE) /* Sum */)) + -(fConst857KI * ((fConst858KI * fTemp317SE) + (fConst859KI * fVec683SE[1]) /* Sum */)) /* Sum */);
			fTemp318SE = fVec683SE[0]; // step: 4521
			fVec682SE[0] = fTemp318SE;
			fTemp319SE = fVec685SE[2]; // step: 4529
			fVec686SE[0] = (fTemp312SE + -(fConst860KI * ((fConst861KI * fTemp319SE) + (fConst862KI * fVec686SE[1]) /* Sum */)) /* Sum */);
			fTemp320SE = fVec686SE[0]; // step: 4541
			fVec685SE[0] = fTemp320SE;
			fTemp321SE = fVec690SE[2]; // step: 4561
			fVec691SE[0] = ((fConst860KI * ((fConst864KI * fVec686SE[0]) + (fConst865KI * fVec685SE[1]) + (fConst864KI * fTemp319SE) /* Sum */)) + -(fConst866KI * ((fConst867KI * fTemp321SE) + (fConst868KI * fVec691SE[1]) /* Sum */)) /* Sum */);
			fTemp322SE = fVec691SE[0]; // step: 4573
			fVec690SE[0] = fTemp322SE;
			fTemp323SE = fVec695SE[2]; // step: 4591
			fVec696SE[0] = ((fConst866KI * ((fConst869KI * fVec691SE[0]) + (fConst870KI * fVec690SE[1]) + (fConst869KI * fTemp321SE) /* Sum */)) + -(fConst871KI * ((fConst872KI * fTemp323SE) + (fConst873KI * fVec696SE[1]) /* Sum */)) /* Sum */);
			fTemp324SE = fVec696SE[0]; // step: 4603
			fVec695SE[0] = fTemp324SE;
			fTemp325SE = (fConst871KI * ((fConst874KI * fVec696SE[0]) + (fConst875KI * fVec695SE[1]) + (fConst874KI * fTemp323SE) /* Sum */)); // step: 4613
			fTemp326SE = fVec700SE[2]; // step: 4625
			fVec701SE[0] = (fTemp325SE + -(fConst878KI * ((fConst879KI * fTemp326SE) + (fConst882KI * fVec701SE[1]) /* Sum */)) /* Sum */);
			fTemp327SE = fVec701SE[0]; // step: 4640
			fVec700SE[0] = fTemp327SE;
			fTemp328SE = fVec705SE[2]; // step: 4660
			fVec706SE[0] = ((fConst878KI * ((fConst884KI * fVec701SE[0]) + (fConst885KI * fVec700SE[1]) + (fConst884KI * fTemp326SE) /* Sum */)) + -(fConst886KI * ((fConst887KI * fTemp328SE) + (fConst888KI * fVec706SE[1]) /* Sum */)) /* Sum */);
			fTemp329SE = fVec706SE[0]; // step: 4672
			fVec705SE[0] = fTemp329SE;
			fTemp330SE = fVec710SE[2]; // step: 4692
			fVec711SE[0] = ((fConst886KI * ((fConst890KI * fVec706SE[0]) + (fConst891KI * fVec705SE[1]) + (fConst890KI * fTemp328SE) /* Sum */)) + -(fConst892KI * ((fConst893KI * fTemp330SE) + (fConst894KI * fVec711SE[1]) /* Sum */)) /* Sum */);
			fTemp331SE = fVec711SE[0]; // step: 4704
			fVec710SE[0] = fTemp331SE;
			fTemp332SE = fVec713SE[2]; // step: 4712
			fVec714SE[0] = (fTemp325SE + -(fConst895KI * ((fConst896KI * fTemp332SE) + (fConst897KI * fVec714SE[1]) /* Sum */)) /* Sum */);
			fTemp333SE = fVec714SE[0]; // step: 4724
			fVec713SE[0] = fTemp333SE;
			fTemp334SE = fVec718SE[2]; // step: 4744
			fVec719SE[0] = ((fConst895KI * ((fConst899KI * fVec714SE[0]) + (fConst900KI * fVec713SE[1]) + (fConst899KI * fTemp332SE) /* Sum */)) + -(fConst901KI * ((fConst902KI * fTemp334SE) + (fConst903KI * fVec719SE[1]) /* Sum */)) /* Sum */);
			fTemp335SE = fVec719SE[0]; // step: 4756
			fVec718SE[0] = fTemp335SE;
			fTemp336SE = fVec723SE[2]; // step: 4774
			fVec724SE[0] = ((fConst901KI * ((fConst904KI * fVec719SE[0]) + (fConst905KI * fVec718SE[1]) + (fConst904KI * fTemp334SE) /* Sum */)) + -(fConst906KI * ((fConst907KI * fTemp336SE) + (fConst908KI * fVec724SE[1]) /* Sum */)) /* Sum */);
			fTemp337SE = fVec724SE[0]; // step: 4786
			fVec723SE[0] = fTemp337SE;
			fTemp338SE = (fConst906KI * ((fConst909KI * fVec724SE[0]) + (fConst910KI * fVec723SE[1]) + (fConst909KI * fTemp336SE) /* Sum */)); // step: 4796
			fTemp339SE = fVec728SE[2]; // step: 4808
			fVec729SE[0] = (fTemp338SE + -(fConst913KI * ((fConst914KI * fTemp339SE) + (fConst917KI * fVec729SE[1]) /* Sum */)) /* Sum */);
			fTemp340SE = fVec729SE[0]; // step: 4823
			fVec728SE[0] = fTemp340SE;
			fTemp341SE = fVec733SE[2]; // step: 4843
			fVec734SE[0] = ((fConst913KI * ((fConst919KI * fVec729SE[0]) + (fConst920KI * fVec728SE[1]) + (fConst919KI * fTemp339SE) /* Sum */)) + -(fConst921KI * ((fConst922KI * fTemp341SE) + (fConst923KI * fVec734SE[1]) /* Sum */)) /* Sum */);
			fTemp342SE = fVec734SE[0]; // step: 4855
			fVec733SE[0] = fTemp342SE;
			fTemp343SE = fVec738SE[2]; // step: 4875
			fVec739SE[0] = ((fConst921KI * ((fConst925KI * fVec734SE[0]) + (fConst926KI * fVec733SE[1]) + (fConst925KI * fTemp341SE) /* Sum */)) + -(fConst927KI * ((fConst928KI * fTemp343SE) + (fConst929KI * fVec739SE[1]) /* Sum */)) /* Sum */);
			fTemp344SE = fVec739SE[0]; // step: 4887
			fVec738SE[0] = fTemp344SE;
			fTemp345SE = fVec741SE[2]; // step: 4895
			fVec742SE[0] = (fTemp338SE + -(fConst930KI * ((fConst931KI * fTemp345SE) + (fConst932KI * fVec742SE[1]) /* Sum */)) /* Sum */);
			fTemp346SE = fVec742SE[0]; // step: 4907
			fVec741SE[0] = fTemp346SE;
			fTemp347SE = fVec746SE[2]; // step: 4927
			fVec747SE[0] = ((fConst930KI * ((fConst934KI * fVec742SE[0]) + (fConst935KI * fVec741SE[1]) + (fConst934KI * fTemp345SE) /* Sum */)) + -(fConst936KI * ((fConst937KI * fTemp347SE) + (fConst938KI * fVec747SE[1]) /* Sum */)) /* Sum */);
			fTemp348SE = fVec747SE[0]; // step: 4939
			fVec746SE[0] = fTemp348SE;
			fTemp349SE = fVec751SE[2]; // step: 4957
			fVec752SE[0] = ((fConst936KI * ((fConst939KI * fVec747SE[0]) + (fConst940KI * fVec746SE[1]) + (fConst939KI * fTemp347SE) /* Sum */)) + -(fConst941KI * ((fConst942KI * fTemp349SE) + (fConst943KI * fVec752SE[1]) /* Sum */)) /* Sum */);
			fTemp350SE = fVec752SE[0]; // step: 4969
			fVec751SE[0] = fTemp350SE;
			fTemp351SE = (fConst941KI * ((fConst944KI * fVec752SE[0]) + (fConst945KI * fVec751SE[1]) + (fConst944KI * fTemp349SE) /* Sum */)); // step: 4979
			fTemp352SE = fVec756SE[2]; // step: 4991
			fVec757SE[0] = (fTemp351SE + -(fConst948KI * ((fConst949KI * fTemp352SE) + (fConst952KI * fVec757SE[1]) /* Sum */)) /* Sum */);
			fTemp353SE = fVec757SE[0]; // step: 5006
			fVec756SE[0] = fTemp353SE;
			fTemp354SE = fVec761SE[2]; // step: 5026
			fVec762SE[0] = ((fConst948KI * ((fConst954KI * fVec757SE[0]) + (fConst955KI * fVec756SE[1]) + (fConst954KI * fTemp352SE) /* Sum */)) + -(fConst956KI * ((fConst957KI * fTemp354SE) + (fConst958KI * fVec762SE[1]) /* Sum */)) /* Sum */);
			fTemp355SE = fVec762SE[0]; // step: 5038
			fVec761SE[0] = fTemp355SE;
			fTemp356SE = fVec766SE[2]; // step: 5058
			fVec767SE[0] = ((fConst956KI * ((fConst960KI * fVec762SE[0]) + (fConst961KI * fVec761SE[1]) + (fConst960KI * fTemp354SE) /* Sum */)) + -(fConst962KI * ((fConst963KI * fTemp356SE) + (fConst964KI * fVec767SE[1]) /* Sum */)) /* Sum */);
			fTemp357SE = fVec767SE[0]; // step: 5070
			fVec766SE[0] = fTemp357SE;
			fTemp358SE = fVec769SE[2]; // step: 5078
			fVec770SE[0] = (fTemp351SE + -(fConst965KI * ((fConst966KI * fTemp358SE) + (fConst967KI * fVec770SE[1]) /* Sum */)) /* Sum */);
			fTemp359SE = fVec770SE[0]; // step: 5090
			fVec769SE[0] = fTemp359SE;
			fTemp360SE = fVec774SE[2]; // step: 5110
			fVec775SE[0] = ((fConst965KI * ((fConst969KI * fVec770SE[0]) + (fConst970KI * fVec769SE[1]) + (fConst969KI * fTemp358SE) /* Sum */)) + -(fConst971KI * ((fConst972KI * fTemp360SE) + (fConst973KI * fVec775SE[1]) /* Sum */)) /* Sum */);
			fTemp361SE = fVec775SE[0]; // step: 5122
			fVec774SE[0] = fTemp361SE;
			fTemp362SE = fVec779SE[2]; // step: 5140
			fVec780SE[0] = ((fConst971KI * ((fConst974KI * fVec775SE[0]) + (fConst975KI * fVec774SE[1]) + (fConst974KI * fTemp360SE) /* Sum */)) + -(fConst976KI * ((fConst977KI * fTemp362SE) + (fConst978KI * fVec780SE[1]) /* Sum */)) /* Sum */);
			fTemp363SE = fVec780SE[0]; // step: 5152
			fVec779SE[0] = fTemp363SE;
			fTemp364SE = (fConst976KI * ((fConst979KI * fVec780SE[0]) + (fConst980KI * fVec779SE[1]) + (fConst979KI * fTemp362SE) /* Sum */)); // step: 5162
			fTemp365SE = fVec784SE[2]; // step: 5174
			fVec785SE[0] = (fTemp364SE + -(fConst983KI * ((fConst984KI * fTemp365SE) + (fConst987KI * fVec785SE[1]) /* Sum */)) /* Sum */);
			fTemp366SE = fVec785SE[0]; // step: 5189
			fVec784SE[0] = fTemp366SE;
			fTemp367SE = fVec789SE[2]; // step: 5209
			fVec790SE[0] = ((fConst983KI * ((fConst989KI * fVec785SE[0]) + (fConst990KI * fVec784SE[1]) + (fConst989KI * fTemp365SE) /* Sum */)) + -(fConst991KI * ((fConst992KI * fTemp367SE) + (fConst993KI * fVec790SE[1]) /* Sum */)) /* Sum */);
			fTemp368SE = fVec790SE[0]; // step: 5221
			fVec789SE[0] = fTemp368SE;
			fTemp369SE = fVec794SE[2]; // step: 5241
			fVec795SE[0] = ((fConst991KI * ((fConst995KI * fVec790SE[0]) + (fConst996KI * fVec789SE[1]) + (fConst995KI * fTemp367SE) /* Sum */)) + -(fConst997KI * ((fConst998KI * fTemp369SE) + (fConst999KI * fVec795SE[1]) /* Sum */)) /* Sum */);
			fTemp370SE = fVec795SE[0]; // step: 5253
			fVec794SE[0] = fTemp370SE;
			fTemp371SE = fVec797SE[2]; // step: 5261
			fVec798SE[0] = (fTemp364SE + -(fConst1000KI * ((fConst1001KI * fTemp371SE) + (fConst1002KI * fVec798SE[1]) /* Sum */)) /* Sum */);
			fTemp372SE = fVec798SE[0]; // step: 5273
			fVec797SE[0] = fTemp372SE;
			fTemp373SE = fVec802SE[2]; // step: 5293
			fVec803SE[0] = ((fConst1000KI * ((fConst1004KI * fVec798SE[0]) + (fConst1005KI * fVec797SE[1]) + (fConst1004KI * fTemp371SE) /* Sum */)) + -(fConst1006KI * ((fConst1007KI * fTemp373SE) + (fConst1008KI * fVec803SE[1]) /* Sum */)) /* Sum */);
			fTemp374SE = fVec803SE[0]; // step: 5305
			fVec802SE[0] = fTemp374SE;
			fTemp375SE = fVec807SE[2]; // step: 5323
			fVec808SE[0] = ((fConst1006KI * ((fConst1009KI * fVec803SE[0]) + (fConst1010KI * fVec802SE[1]) + (fConst1009KI * fTemp373SE) /* Sum */)) + -(fConst1011KI * ((fConst1012KI * fTemp375SE) + (fConst1013KI * fVec808SE[1]) /* Sum */)) /* Sum */);
			fTemp376SE = fVec808SE[0]; // step: 5335
			fVec807SE[0] = fTemp376SE;
			fVec810SE[0] = ((fVec810SE[1] * fSlow2BE) + (fabsf((fConst17KI * ((fConst1016KI * fVec11SE[0]) + (fConst1017KI * fVec10SE[1]) + (fConst1016KI * fTemp5SE) /* Sum */))) * fSlow3BE) /* Sum */);
			fSlow4SE = (fSlow0BE + (2e+01f * log10f(fVec810SE[0])) /* Sum */);
			fVec814SE[0] = ((fSlow2BE * fVec814SE[1]) + (fSlow3BE * fabsf((fConst52KI * ((fConst1019KI * fVec39SE[0]) + (fConst1020KI * fVec38SE[1]) + (fConst1019KI * fTemp18SE) /* Sum */)))) /* Sum */);
			fSlow5SE = (fSlow0BE + (2e+01f * log10f(fVec814SE[0])) /* Sum */);
			fVec818SE[0] = ((fSlow2BE * fVec818SE[1]) + (fSlow3BE * fabsf((fConst87KI * ((fConst1022KI * fVec67SE[0]) + (fConst1023KI * fVec66SE[1]) + (fConst1022KI * fTemp31SE) /* Sum */)))) /* Sum */);
			fSlow6SE = (fSlow0BE + (2e+01f * log10f(fVec818SE[0])) /* Sum */);
			fVec822SE[0] = ((fSlow2BE * fVec822SE[1]) + (fSlow3BE * fabsf((fConst122KI * ((fConst1025KI * fVec95SE[0]) + (fConst1026KI * fVec94SE[1]) + (fConst1025KI * fTemp44SE) /* Sum */)))) /* Sum */);
			fSlow7SE = (fSlow0BE + (2e+01f * log10f(fVec822SE[0])) /* Sum */);
			fVec826SE[0] = ((fSlow2BE * fVec826SE[1]) + (fSlow3BE * fabsf((fConst157KI * ((fConst1028KI * fVec123SE[0]) + (fConst1029KI * fVec122SE[1]) + (fConst1028KI * fTemp57SE) /* Sum */)))) /* Sum */);
			fSlow8SE = (fSlow0BE + (2e+01f * log10f(fVec826SE[0])) /* Sum */);
			fVec830SE[0] = ((fSlow2BE * fVec830SE[1]) + (fSlow3BE * fabsf((fConst192KI * ((fConst1031KI * fVec151SE[0]) + (fConst1032KI * fVec150SE[1]) + (fConst1031KI * fTemp70SE) /* Sum */)))) /* Sum */);
			fSlow9SE = (fSlow0BE + (2e+01f * log10f(fVec830SE[0])) /* Sum */);
			fVec834SE[0] = ((fSlow2BE * fVec834SE[1]) + (fSlow3BE * fabsf((fConst227KI * ((fConst1034KI * fVec179SE[0]) + (fConst1035KI * fVec178SE[1]) + (fConst1034KI * fTemp83SE) /* Sum */)))) /* Sum */);
			fSlow10SE = (fSlow0BE + (2e+01f * log10f(fVec834SE[0])) /* Sum */);
			fVec838SE[0] = ((fSlow2BE * fVec838SE[1]) + (fSlow3BE * fabsf((fConst262KI * ((fConst1037KI * fVec207SE[0]) + (fConst1038KI * fVec206SE[1]) + (fConst1037KI * fTemp96SE) /* Sum */)))) /* Sum */);
			fSlow11SE = (fSlow0BE + (2e+01f * log10f(fVec838SE[0])) /* Sum */);
			fVec842SE[0] = ((fSlow2BE * fVec842SE[1]) + (fSlow3BE * fabsf((fConst297KI * ((fConst1040KI * fVec235SE[0]) + (fConst1041KI * fVec234SE[1]) + (fConst1040KI * fTemp109SE) /* Sum */)))) /* Sum */);
			fSlow12SE = (fSlow0BE + (2e+01f * log10f(fVec842SE[0])) /* Sum */);
			fVec846SE[0] = ((fSlow2BE * fVec846SE[1]) + (fSlow3BE * fabsf((fConst332KI * ((fConst1043KI * fVec263SE[0]) + (fConst1044KI * fVec262SE[1]) + (fConst1043KI * fTemp122SE) /* Sum */)))) /* Sum */);
			fSlow13SE = (fSlow0BE + (2e+01f * log10f(fVec846SE[0])) /* Sum */);
			fVec850SE[0] = ((fSlow2BE * fVec850SE[1]) + (fSlow3BE * fabsf((fConst367KI * ((fConst1046KI * fVec291SE[0]) + (fConst1047KI * fVec290SE[1]) + (fConst1046KI * fTemp135SE) /* Sum */)))) /* Sum */);
			fSlow14SE = (fSlow0BE + (2e+01f * log10f(fVec850SE[0])) /* Sum */);
			fVec854SE[0] = ((fSlow2BE * fVec854SE[1]) + (fSlow3BE * fabsf((fConst402KI * ((fConst1049KI * fVec319SE[0]) + (fConst1050KI * fVec318SE[1]) + (fConst1049KI * fTemp148SE) /* Sum */)))) /* Sum */);
			fSlow15SE = (fSlow0BE + (2e+01f * log10f(fVec854SE[0])) /* Sum */);
			fVec858SE[0] = ((fSlow2BE * fVec858SE[1]) + (fSlow3BE * fabsf((fConst437KI * ((fConst1052KI * fVec347SE[0]) + (fConst1053KI * fVec346SE[1]) + (fConst1052KI * fTemp161SE) /* Sum */)))) /* Sum */);
			fSlow16SE = (fSlow0BE + (2e+01f * log10f(fVec858SE[0])) /* Sum */);
			fVec862SE[0] = ((fSlow2BE * fVec862SE[1]) + (fSlow3BE * fabsf((fConst472KI * ((fConst1055KI * fVec375SE[0]) + (fConst1056KI * fVec374SE[1]) + (fConst1055KI * fTemp174SE) /* Sum */)))) /* Sum */);
			fSlow17SE = (fSlow0BE + (2e+01f * log10f(fVec862SE[0])) /* Sum */);
			fVec866SE[0] = ((fSlow2BE * fVec866SE[1]) + (fSlow3BE * fabsf((fConst507KI * ((fConst1058KI * fVec403SE[0]) + (fConst1059KI * fVec402SE[1]) + (fConst1058KI * fTemp187SE) /* Sum */)))) /* Sum */);
			fSlow18SE = (fSlow0BE + (2e+01f * log10f(fVec866SE[0])) /* Sum */);
			fVec870SE[0] = ((fSlow2BE * fVec870SE[1]) + (fSlow3BE * fabsf((fConst542KI * ((fConst1061KI * fVec431SE[0]) + (fConst1062KI * fVec430SE[1]) + (fConst1061KI * fTemp200SE) /* Sum */)))) /* Sum */);
			fSlow19SE = (fSlow0BE + (2e+01f * log10f(fVec870SE[0])) /* Sum */);
			fVec874SE[0] = ((fSlow2BE * fVec874SE[1]) + (fSlow3BE * fabsf((fConst577KI * ((fConst1064KI * fVec459SE[0]) + (fConst1065KI * fVec458SE[1]) + (fConst1064KI * fTemp213SE) /* Sum */)))) /* Sum */);
			fSlow20SE = (fSlow0BE + (2e+01f * log10f(fVec874SE[0])) /* Sum */);
			fVec878SE[0] = ((fSlow2BE * fVec878SE[1]) + (fSlow3BE * fabsf((fConst612KI * ((fConst1067KI * fVec487SE[0]) + (fConst1068KI * fVec486SE[1]) + (fConst1067KI * fTemp226SE) /* Sum */)))) /* Sum */);
			fSlow21SE = (fSlow0BE + (2e+01f * log10f(fVec878SE[0])) /* Sum */);
			fVec882SE[0] = ((fSlow2BE * fVec882SE[1]) + (fSlow3BE * fabsf((fConst647KI * ((fConst1070KI * fVec515SE[0]) + (fConst1071KI * fVec514SE[1]) + (fConst1070KI * fTemp239SE) /* Sum */)))) /* Sum */);
			fSlow22SE = (fSlow0BE + (2e+01f * log10f(fVec882SE[0])) /* Sum */);
			fVec886SE[0] = ((fSlow2BE * fVec886SE[1]) + (fSlow3BE * fabsf((fConst682KI * ((fConst1073KI * fVec543SE[0]) + (fConst1074KI * fVec542SE[1]) + (fConst1073KI * fTemp252SE) /* Sum */)))) /* Sum */);
			fSlow23SE = (fSlow0BE + (2e+01f * log10f(fVec886SE[0])) /* Sum */);
			fVec890SE[0] = ((fSlow2BE * fVec890SE[1]) + (fSlow3BE * fabsf((fConst717KI * ((fConst1076KI * fVec571SE[0]) + (fConst1077KI * fVec570SE[1]) + (fConst1076KI * fTemp265SE) /* Sum */)))) /* Sum */);
			fSlow24SE = (fSlow0BE + (2e+01f * log10f(fVec890SE[0])) /* Sum */);
			fVec894SE[0] = ((fSlow2BE * fVec894SE[1]) + (fSlow3BE * fabsf((fConst752KI * ((fConst1079KI * fVec599SE[0]) + (fConst1080KI * fVec598SE[1]) + (fConst1079KI * fTemp278SE) /* Sum */)))) /* Sum */);
			fSlow25SE = (fSlow0BE + (2e+01f * log10f(fVec894SE[0])) /* Sum */);
			fVec898SE[0] = ((fSlow2BE * fVec898SE[1]) + (fSlow3BE * fabsf((fConst787KI * ((fConst1082KI * fVec627SE[0]) + (fConst1083KI * fVec626SE[1]) + (fConst1082KI * fTemp291SE) /* Sum */)))) /* Sum */);
			fSlow26SE = (fSlow0BE + (2e+01f * log10f(fVec898SE[0])) /* Sum */);
			fVec902SE[0] = ((fSlow2BE * fVec902SE[1]) + (fSlow3BE * fabsf((fConst822KI * ((fConst1085KI * fVec655SE[0]) + (fConst1086KI * fVec654SE[1]) + (fConst1085KI * fTemp304SE) /* Sum */)))) /* Sum */);
			fSlow27SE = (fSlow0BE + (2e+01f * log10f(fVec902SE[0])) /* Sum */);
			fVec906SE[0] = ((fSlow2BE * fVec906SE[1]) + (fSlow3BE * fabsf((fConst857KI * ((fConst1088KI * fVec683SE[0]) + (fConst1089KI * fVec682SE[1]) + (fConst1088KI * fTemp317SE) /* Sum */)))) /* Sum */);
			fSlow28SE = (fSlow0BE + (2e+01f * log10f(fVec906SE[0])) /* Sum */);
			fVec910SE[0] = ((fSlow2BE * fVec910SE[1]) + (fSlow3BE * fabsf((fConst892KI * ((fConst1091KI * fVec711SE[0]) + (fConst1092KI * fVec710SE[1]) + (fConst1091KI * fTemp330SE) /* Sum */)))) /* Sum */);
			fSlow29SE = (fSlow0BE + (2e+01f * log10f(fVec910SE[0])) /* Sum */);
			fVec914SE[0] = ((fSlow2BE * fVec914SE[1]) + (fSlow3BE * fabsf((fConst927KI * ((fConst1094KI * fVec739SE[0]) + (fConst1095KI * fVec738SE[1]) + (fConst1094KI * fTemp343SE) /* Sum */)))) /* Sum */);
			fSlow30SE = (fSlow0BE + (2e+01f * log10f(fVec914SE[0])) /* Sum */);
			fVec918SE[0] = ((fSlow2BE * fVec918SE[1]) + (fSlow3BE * fabsf((fConst962KI * ((fConst1097KI * fVec767SE[0]) + (fConst1098KI * fVec766SE[1]) + (fConst1097KI * fTemp356SE) /* Sum */)))) /* Sum */);
			fSlow31SE = (fSlow0BE + (2e+01f * log10f(fVec918SE[0])) /* Sum */);
			fVec922SE[0] = ((fSlow2BE * fVec922SE[1]) + (fSlow3BE * fabsf((fConst997KI * ((fConst1100KI * fVec795SE[0]) + (fConst1101KI * fVec794SE[1]) + (fConst1100KI * fTemp369SE) /* Sum */)))) /* Sum */);
			fSlow32SE = (fSlow0BE + (2e+01f * log10f(fVec922SE[0])) /* Sum */);
			fVec926SE[0] = ((fSlow2BE * fVec926SE[1]) + (fSlow3BE * fabsf((fConst1011KI * ((fConst1102KI * fVec808SE[0]) + (fConst1103KI * fVec807SE[1]) + (fConst1102KI * fTemp375SE) /* Sum */)))) /* Sum */);
			fSlow33SE = (fSlow0BE + (2e+01f * log10f(fVec926SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp0SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp0SE);  // Zone Exec Code
			// post processing
			fVec926SE[1] = fVec926SE[0];
			fVec922SE[1] = fVec922SE[0];
			fVec918SE[1] = fVec918SE[0];
			fVec914SE[1] = fVec914SE[0];
			fVec910SE[1] = fVec910SE[0];
			fVec906SE[1] = fVec906SE[0];
			fVec902SE[1] = fVec902SE[0];
			fVec898SE[1] = fVec898SE[0];
			fVec894SE[1] = fVec894SE[0];
			fVec890SE[1] = fVec890SE[0];
			fVec886SE[1] = fVec886SE[0];
			fVec882SE[1] = fVec882SE[0];
			fVec878SE[1] = fVec878SE[0];
			fVec874SE[1] = fVec874SE[0];
			fVec870SE[1] = fVec870SE[0];
			fVec866SE[1] = fVec866SE[0];
			fVec862SE[1] = fVec862SE[0];
			fVec858SE[1] = fVec858SE[0];
			fVec854SE[1] = fVec854SE[0];
			fVec850SE[1] = fVec850SE[0];
			fVec846SE[1] = fVec846SE[0];
			fVec842SE[1] = fVec842SE[0];
			fVec838SE[1] = fVec838SE[0];
			fVec834SE[1] = fVec834SE[0];
			fVec830SE[1] = fVec830SE[0];
			fVec826SE[1] = fVec826SE[0];
			fVec822SE[1] = fVec822SE[0];
			fVec818SE[1] = fVec818SE[0];
			fVec814SE[1] = fVec814SE[0];
			fVec810SE[1] = fVec810SE[0];
			fVec807SE[2] = fVec807SE[1];
			fVec807SE[1] = fVec807SE[0];
			fVec808SE[1] = fVec808SE[0];
			fVec802SE[2] = fVec802SE[1];
			fVec802SE[1] = fVec802SE[0];
			fVec803SE[1] = fVec803SE[0];
			fVec797SE[2] = fVec797SE[1];
			fVec797SE[1] = fVec797SE[0];
			fVec798SE[1] = fVec798SE[0];
			fVec794SE[2] = fVec794SE[1];
			fVec794SE[1] = fVec794SE[0];
			fVec795SE[1] = fVec795SE[0];
			fVec789SE[2] = fVec789SE[1];
			fVec789SE[1] = fVec789SE[0];
			fVec790SE[1] = fVec790SE[0];
			fVec784SE[2] = fVec784SE[1];
			fVec784SE[1] = fVec784SE[0];
			fVec785SE[1] = fVec785SE[0];
			fVec779SE[2] = fVec779SE[1];
			fVec779SE[1] = fVec779SE[0];
			fVec780SE[1] = fVec780SE[0];
			fVec774SE[2] = fVec774SE[1];
			fVec774SE[1] = fVec774SE[0];
			fVec775SE[1] = fVec775SE[0];
			fVec769SE[2] = fVec769SE[1];
			fVec769SE[1] = fVec769SE[0];
			fVec770SE[1] = fVec770SE[0];
			fVec766SE[2] = fVec766SE[1];
			fVec766SE[1] = fVec766SE[0];
			fVec767SE[1] = fVec767SE[0];
			fVec761SE[2] = fVec761SE[1];
			fVec761SE[1] = fVec761SE[0];
			fVec762SE[1] = fVec762SE[0];
			fVec756SE[2] = fVec756SE[1];
			fVec756SE[1] = fVec756SE[0];
			fVec757SE[1] = fVec757SE[0];
			fVec751SE[2] = fVec751SE[1];
			fVec751SE[1] = fVec751SE[0];
			fVec752SE[1] = fVec752SE[0];
			fVec746SE[2] = fVec746SE[1];
			fVec746SE[1] = fVec746SE[0];
			fVec747SE[1] = fVec747SE[0];
			fVec741SE[2] = fVec741SE[1];
			fVec741SE[1] = fVec741SE[0];
			fVec742SE[1] = fVec742SE[0];
			fVec738SE[2] = fVec738SE[1];
			fVec738SE[1] = fVec738SE[0];
			fVec739SE[1] = fVec739SE[0];
			fVec733SE[2] = fVec733SE[1];
			fVec733SE[1] = fVec733SE[0];
			fVec734SE[1] = fVec734SE[0];
			fVec728SE[2] = fVec728SE[1];
			fVec728SE[1] = fVec728SE[0];
			fVec729SE[1] = fVec729SE[0];
			fVec723SE[2] = fVec723SE[1];
			fVec723SE[1] = fVec723SE[0];
			fVec724SE[1] = fVec724SE[0];
			fVec718SE[2] = fVec718SE[1];
			fVec718SE[1] = fVec718SE[0];
			fVec719SE[1] = fVec719SE[0];
			fVec713SE[2] = fVec713SE[1];
			fVec713SE[1] = fVec713SE[0];
			fVec714SE[1] = fVec714SE[0];
			fVec710SE[2] = fVec710SE[1];
			fVec710SE[1] = fVec710SE[0];
			fVec711SE[1] = fVec711SE[0];
			fVec705SE[2] = fVec705SE[1];
			fVec705SE[1] = fVec705SE[0];
			fVec706SE[1] = fVec706SE[0];
			fVec700SE[2] = fVec700SE[1];
			fVec700SE[1] = fVec700SE[0];
			fVec701SE[1] = fVec701SE[0];
			fVec695SE[2] = fVec695SE[1];
			fVec695SE[1] = fVec695SE[0];
			fVec696SE[1] = fVec696SE[0];
			fVec690SE[2] = fVec690SE[1];
			fVec690SE[1] = fVec690SE[0];
			fVec691SE[1] = fVec691SE[0];
			fVec685SE[2] = fVec685SE[1];
			fVec685SE[1] = fVec685SE[0];
			fVec686SE[1] = fVec686SE[0];
			fVec682SE[2] = fVec682SE[1];
			fVec682SE[1] = fVec682SE[0];
			fVec683SE[1] = fVec683SE[0];
			fVec677SE[2] = fVec677SE[1];
			fVec677SE[1] = fVec677SE[0];
			fVec678SE[1] = fVec678SE[0];
			fVec672SE[2] = fVec672SE[1];
			fVec672SE[1] = fVec672SE[0];
			fVec673SE[1] = fVec673SE[0];
			fVec667SE[2] = fVec667SE[1];
			fVec667SE[1] = fVec667SE[0];
			fVec668SE[1] = fVec668SE[0];
			fVec662SE[2] = fVec662SE[1];
			fVec662SE[1] = fVec662SE[0];
			fVec663SE[1] = fVec663SE[0];
			fVec657SE[2] = fVec657SE[1];
			fVec657SE[1] = fVec657SE[0];
			fVec658SE[1] = fVec658SE[0];
			fVec654SE[2] = fVec654SE[1];
			fVec654SE[1] = fVec654SE[0];
			fVec655SE[1] = fVec655SE[0];
			fVec649SE[2] = fVec649SE[1];
			fVec649SE[1] = fVec649SE[0];
			fVec650SE[1] = fVec650SE[0];
			fVec644SE[2] = fVec644SE[1];
			fVec644SE[1] = fVec644SE[0];
			fVec645SE[1] = fVec645SE[0];
			fVec639SE[2] = fVec639SE[1];
			fVec639SE[1] = fVec639SE[0];
			fVec640SE[1] = fVec640SE[0];
			fVec634SE[2] = fVec634SE[1];
			fVec634SE[1] = fVec634SE[0];
			fVec635SE[1] = fVec635SE[0];
			fVec629SE[2] = fVec629SE[1];
			fVec629SE[1] = fVec629SE[0];
			fVec630SE[1] = fVec630SE[0];
			fVec626SE[2] = fVec626SE[1];
			fVec626SE[1] = fVec626SE[0];
			fVec627SE[1] = fVec627SE[0];
			fVec621SE[2] = fVec621SE[1];
			fVec621SE[1] = fVec621SE[0];
			fVec622SE[1] = fVec622SE[0];
			fVec616SE[2] = fVec616SE[1];
			fVec616SE[1] = fVec616SE[0];
			fVec617SE[1] = fVec617SE[0];
			fVec611SE[2] = fVec611SE[1];
			fVec611SE[1] = fVec611SE[0];
			fVec612SE[1] = fVec612SE[0];
			fVec606SE[2] = fVec606SE[1];
			fVec606SE[1] = fVec606SE[0];
			fVec607SE[1] = fVec607SE[0];
			fVec601SE[2] = fVec601SE[1];
			fVec601SE[1] = fVec601SE[0];
			fVec602SE[1] = fVec602SE[0];
			fVec598SE[2] = fVec598SE[1];
			fVec598SE[1] = fVec598SE[0];
			fVec599SE[1] = fVec599SE[0];
			fVec593SE[2] = fVec593SE[1];
			fVec593SE[1] = fVec593SE[0];
			fVec594SE[1] = fVec594SE[0];
			fVec588SE[2] = fVec588SE[1];
			fVec588SE[1] = fVec588SE[0];
			fVec589SE[1] = fVec589SE[0];
			fVec583SE[2] = fVec583SE[1];
			fVec583SE[1] = fVec583SE[0];
			fVec584SE[1] = fVec584SE[0];
			fVec578SE[2] = fVec578SE[1];
			fVec578SE[1] = fVec578SE[0];
			fVec579SE[1] = fVec579SE[0];
			fVec573SE[2] = fVec573SE[1];
			fVec573SE[1] = fVec573SE[0];
			fVec574SE[1] = fVec574SE[0];
			fVec570SE[2] = fVec570SE[1];
			fVec570SE[1] = fVec570SE[0];
			fVec571SE[1] = fVec571SE[0];
			fVec565SE[2] = fVec565SE[1];
			fVec565SE[1] = fVec565SE[0];
			fVec566SE[1] = fVec566SE[0];
			fVec560SE[2] = fVec560SE[1];
			fVec560SE[1] = fVec560SE[0];
			fVec561SE[1] = fVec561SE[0];
			fVec555SE[2] = fVec555SE[1];
			fVec555SE[1] = fVec555SE[0];
			fVec556SE[1] = fVec556SE[0];
			fVec550SE[2] = fVec550SE[1];
			fVec550SE[1] = fVec550SE[0];
			fVec551SE[1] = fVec551SE[0];
			fVec545SE[2] = fVec545SE[1];
			fVec545SE[1] = fVec545SE[0];
			fVec546SE[1] = fVec546SE[0];
			fVec542SE[2] = fVec542SE[1];
			fVec542SE[1] = fVec542SE[0];
			fVec543SE[1] = fVec543SE[0];
			fVec537SE[2] = fVec537SE[1];
			fVec537SE[1] = fVec537SE[0];
			fVec538SE[1] = fVec538SE[0];
			fVec532SE[2] = fVec532SE[1];
			fVec532SE[1] = fVec532SE[0];
			fVec533SE[1] = fVec533SE[0];
			fVec527SE[2] = fVec527SE[1];
			fVec527SE[1] = fVec527SE[0];
			fVec528SE[1] = fVec528SE[0];
			fVec522SE[2] = fVec522SE[1];
			fVec522SE[1] = fVec522SE[0];
			fVec523SE[1] = fVec523SE[0];
			fVec517SE[2] = fVec517SE[1];
			fVec517SE[1] = fVec517SE[0];
			fVec518SE[1] = fVec518SE[0];
			fVec514SE[2] = fVec514SE[1];
			fVec514SE[1] = fVec514SE[0];
			fVec515SE[1] = fVec515SE[0];
			fVec509SE[2] = fVec509SE[1];
			fVec509SE[1] = fVec509SE[0];
			fVec510SE[1] = fVec510SE[0];
			fVec504SE[2] = fVec504SE[1];
			fVec504SE[1] = fVec504SE[0];
			fVec505SE[1] = fVec505SE[0];
			fVec499SE[2] = fVec499SE[1];
			fVec499SE[1] = fVec499SE[0];
			fVec500SE[1] = fVec500SE[0];
			fVec494SE[2] = fVec494SE[1];
			fVec494SE[1] = fVec494SE[0];
			fVec495SE[1] = fVec495SE[0];
			fVec489SE[2] = fVec489SE[1];
			fVec489SE[1] = fVec489SE[0];
			fVec490SE[1] = fVec490SE[0];
			fVec486SE[2] = fVec486SE[1];
			fVec486SE[1] = fVec486SE[0];
			fVec487SE[1] = fVec487SE[0];
			fVec481SE[2] = fVec481SE[1];
			fVec481SE[1] = fVec481SE[0];
			fVec482SE[1] = fVec482SE[0];
			fVec476SE[2] = fVec476SE[1];
			fVec476SE[1] = fVec476SE[0];
			fVec477SE[1] = fVec477SE[0];
			fVec471SE[2] = fVec471SE[1];
			fVec471SE[1] = fVec471SE[0];
			fVec472SE[1] = fVec472SE[0];
			fVec466SE[2] = fVec466SE[1];
			fVec466SE[1] = fVec466SE[0];
			fVec467SE[1] = fVec467SE[0];
			fVec461SE[2] = fVec461SE[1];
			fVec461SE[1] = fVec461SE[0];
			fVec462SE[1] = fVec462SE[0];
			fVec458SE[2] = fVec458SE[1];
			fVec458SE[1] = fVec458SE[0];
			fVec459SE[1] = fVec459SE[0];
			fVec453SE[2] = fVec453SE[1];
			fVec453SE[1] = fVec453SE[0];
			fVec454SE[1] = fVec454SE[0];
			fVec448SE[2] = fVec448SE[1];
			fVec448SE[1] = fVec448SE[0];
			fVec449SE[1] = fVec449SE[0];
			fVec443SE[2] = fVec443SE[1];
			fVec443SE[1] = fVec443SE[0];
			fVec444SE[1] = fVec444SE[0];
			fVec438SE[2] = fVec438SE[1];
			fVec438SE[1] = fVec438SE[0];
			fVec439SE[1] = fVec439SE[0];
			fVec433SE[2] = fVec433SE[1];
			fVec433SE[1] = fVec433SE[0];
			fVec434SE[1] = fVec434SE[0];
			fVec430SE[2] = fVec430SE[1];
			fVec430SE[1] = fVec430SE[0];
			fVec431SE[1] = fVec431SE[0];
			fVec425SE[2] = fVec425SE[1];
			fVec425SE[1] = fVec425SE[0];
			fVec426SE[1] = fVec426SE[0];
			fVec420SE[2] = fVec420SE[1];
			fVec420SE[1] = fVec420SE[0];
			fVec421SE[1] = fVec421SE[0];
			fVec415SE[2] = fVec415SE[1];
			fVec415SE[1] = fVec415SE[0];
			fVec416SE[1] = fVec416SE[0];
			fVec410SE[2] = fVec410SE[1];
			fVec410SE[1] = fVec410SE[0];
			fVec411SE[1] = fVec411SE[0];
			fVec405SE[2] = fVec405SE[1];
			fVec405SE[1] = fVec405SE[0];
			fVec406SE[1] = fVec406SE[0];
			fVec402SE[2] = fVec402SE[1];
			fVec402SE[1] = fVec402SE[0];
			fVec403SE[1] = fVec403SE[0];
			fVec397SE[2] = fVec397SE[1];
			fVec397SE[1] = fVec397SE[0];
			fVec398SE[1] = fVec398SE[0];
			fVec392SE[2] = fVec392SE[1];
			fVec392SE[1] = fVec392SE[0];
			fVec393SE[1] = fVec393SE[0];
			fVec387SE[2] = fVec387SE[1];
			fVec387SE[1] = fVec387SE[0];
			fVec388SE[1] = fVec388SE[0];
			fVec382SE[2] = fVec382SE[1];
			fVec382SE[1] = fVec382SE[0];
			fVec383SE[1] = fVec383SE[0];
			fVec377SE[2] = fVec377SE[1];
			fVec377SE[1] = fVec377SE[0];
			fVec378SE[1] = fVec378SE[0];
			fVec374SE[2] = fVec374SE[1];
			fVec374SE[1] = fVec374SE[0];
			fVec375SE[1] = fVec375SE[0];
			fVec369SE[2] = fVec369SE[1];
			fVec369SE[1] = fVec369SE[0];
			fVec370SE[1] = fVec370SE[0];
			fVec364SE[2] = fVec364SE[1];
			fVec364SE[1] = fVec364SE[0];
			fVec365SE[1] = fVec365SE[0];
			fVec359SE[2] = fVec359SE[1];
			fVec359SE[1] = fVec359SE[0];
			fVec360SE[1] = fVec360SE[0];
			fVec354SE[2] = fVec354SE[1];
			fVec354SE[1] = fVec354SE[0];
			fVec355SE[1] = fVec355SE[0];
			fVec349SE[2] = fVec349SE[1];
			fVec349SE[1] = fVec349SE[0];
			fVec350SE[1] = fVec350SE[0];
			fVec346SE[2] = fVec346SE[1];
			fVec346SE[1] = fVec346SE[0];
			fVec347SE[1] = fVec347SE[0];
			fVec341SE[2] = fVec341SE[1];
			fVec341SE[1] = fVec341SE[0];
			fVec342SE[1] = fVec342SE[0];
			fVec336SE[2] = fVec336SE[1];
			fVec336SE[1] = fVec336SE[0];
			fVec337SE[1] = fVec337SE[0];
			fVec331SE[2] = fVec331SE[1];
			fVec331SE[1] = fVec331SE[0];
			fVec332SE[1] = fVec332SE[0];
			fVec326SE[2] = fVec326SE[1];
			fVec326SE[1] = fVec326SE[0];
			fVec327SE[1] = fVec327SE[0];
			fVec321SE[2] = fVec321SE[1];
			fVec321SE[1] = fVec321SE[0];
			fVec322SE[1] = fVec322SE[0];
			fVec318SE[2] = fVec318SE[1];
			fVec318SE[1] = fVec318SE[0];
			fVec319SE[1] = fVec319SE[0];
			fVec313SE[2] = fVec313SE[1];
			fVec313SE[1] = fVec313SE[0];
			fVec314SE[1] = fVec314SE[0];
			fVec308SE[2] = fVec308SE[1];
			fVec308SE[1] = fVec308SE[0];
			fVec309SE[1] = fVec309SE[0];
			fVec303SE[2] = fVec303SE[1];
			fVec303SE[1] = fVec303SE[0];
			fVec304SE[1] = fVec304SE[0];
			fVec298SE[2] = fVec298SE[1];
			fVec298SE[1] = fVec298SE[0];
			fVec299SE[1] = fVec299SE[0];
			fVec293SE[2] = fVec293SE[1];
			fVec293SE[1] = fVec293SE[0];
			fVec294SE[1] = fVec294SE[0];
			fVec290SE[2] = fVec290SE[1];
			fVec290SE[1] = fVec290SE[0];
			fVec291SE[1] = fVec291SE[0];
			fVec285SE[2] = fVec285SE[1];
			fVec285SE[1] = fVec285SE[0];
			fVec286SE[1] = fVec286SE[0];
			fVec280SE[2] = fVec280SE[1];
			fVec280SE[1] = fVec280SE[0];
			fVec281SE[1] = fVec281SE[0];
			fVec275SE[2] = fVec275SE[1];
			fVec275SE[1] = fVec275SE[0];
			fVec276SE[1] = fVec276SE[0];
			fVec270SE[2] = fVec270SE[1];
			fVec270SE[1] = fVec270SE[0];
			fVec271SE[1] = fVec271SE[0];
			fVec265SE[2] = fVec265SE[1];
			fVec265SE[1] = fVec265SE[0];
			fVec266SE[1] = fVec266SE[0];
			fVec262SE[2] = fVec262SE[1];
			fVec262SE[1] = fVec262SE[0];
			fVec263SE[1] = fVec263SE[0];
			fVec257SE[2] = fVec257SE[1];
			fVec257SE[1] = fVec257SE[0];
			fVec258SE[1] = fVec258SE[0];
			fVec252SE[2] = fVec252SE[1];
			fVec252SE[1] = fVec252SE[0];
			fVec253SE[1] = fVec253SE[0];
			fVec247SE[2] = fVec247SE[1];
			fVec247SE[1] = fVec247SE[0];
			fVec248SE[1] = fVec248SE[0];
			fVec242SE[2] = fVec242SE[1];
			fVec242SE[1] = fVec242SE[0];
			fVec243SE[1] = fVec243SE[0];
			fVec237SE[2] = fVec237SE[1];
			fVec237SE[1] = fVec237SE[0];
			fVec238SE[1] = fVec238SE[0];
			fVec234SE[2] = fVec234SE[1];
			fVec234SE[1] = fVec234SE[0];
			fVec235SE[1] = fVec235SE[0];
			fVec229SE[2] = fVec229SE[1];
			fVec229SE[1] = fVec229SE[0];
			fVec230SE[1] = fVec230SE[0];
			fVec224SE[2] = fVec224SE[1];
			fVec224SE[1] = fVec224SE[0];
			fVec225SE[1] = fVec225SE[0];
			fVec219SE[2] = fVec219SE[1];
			fVec219SE[1] = fVec219SE[0];
			fVec220SE[1] = fVec220SE[0];
			fVec214SE[2] = fVec214SE[1];
			fVec214SE[1] = fVec214SE[0];
			fVec215SE[1] = fVec215SE[0];
			fVec209SE[2] = fVec209SE[1];
			fVec209SE[1] = fVec209SE[0];
			fVec210SE[1] = fVec210SE[0];
			fVec206SE[2] = fVec206SE[1];
			fVec206SE[1] = fVec206SE[0];
			fVec207SE[1] = fVec207SE[0];
			fVec201SE[2] = fVec201SE[1];
			fVec201SE[1] = fVec201SE[0];
			fVec202SE[1] = fVec202SE[0];
			fVec196SE[2] = fVec196SE[1];
			fVec196SE[1] = fVec196SE[0];
			fVec197SE[1] = fVec197SE[0];
			fVec191SE[2] = fVec191SE[1];
			fVec191SE[1] = fVec191SE[0];
			fVec192SE[1] = fVec192SE[0];
			fVec186SE[2] = fVec186SE[1];
			fVec186SE[1] = fVec186SE[0];
			fVec187SE[1] = fVec187SE[0];
			fVec181SE[2] = fVec181SE[1];
			fVec181SE[1] = fVec181SE[0];
			fVec182SE[1] = fVec182SE[0];
			fVec178SE[2] = fVec178SE[1];
			fVec178SE[1] = fVec178SE[0];
			fVec179SE[1] = fVec179SE[0];
			fVec173SE[2] = fVec173SE[1];
			fVec173SE[1] = fVec173SE[0];
			fVec174SE[1] = fVec174SE[0];
			fVec168SE[2] = fVec168SE[1];
			fVec168SE[1] = fVec168SE[0];
			fVec169SE[1] = fVec169SE[0];
			fVec163SE[2] = fVec163SE[1];
			fVec163SE[1] = fVec163SE[0];
			fVec164SE[1] = fVec164SE[0];
			fVec158SE[2] = fVec158SE[1];
			fVec158SE[1] = fVec158SE[0];
			fVec159SE[1] = fVec159SE[0];
			fVec153SE[2] = fVec153SE[1];
			fVec153SE[1] = fVec153SE[0];
			fVec154SE[1] = fVec154SE[0];
			fVec150SE[2] = fVec150SE[1];
			fVec150SE[1] = fVec150SE[0];
			fVec151SE[1] = fVec151SE[0];
			fVec145SE[2] = fVec145SE[1];
			fVec145SE[1] = fVec145SE[0];
			fVec146SE[1] = fVec146SE[0];
			fVec140SE[2] = fVec140SE[1];
			fVec140SE[1] = fVec140SE[0];
			fVec141SE[1] = fVec141SE[0];
			fVec135SE[2] = fVec135SE[1];
			fVec135SE[1] = fVec135SE[0];
			fVec136SE[1] = fVec136SE[0];
			fVec130SE[2] = fVec130SE[1];
			fVec130SE[1] = fVec130SE[0];
			fVec131SE[1] = fVec131SE[0];
			fVec125SE[2] = fVec125SE[1];
			fVec125SE[1] = fVec125SE[0];
			fVec126SE[1] = fVec126SE[0];
			fVec122SE[2] = fVec122SE[1];
			fVec122SE[1] = fVec122SE[0];
			fVec123SE[1] = fVec123SE[0];
			fVec117SE[2] = fVec117SE[1];
			fVec117SE[1] = fVec117SE[0];
			fVec118SE[1] = fVec118SE[0];
			fVec112SE[2] = fVec112SE[1];
			fVec112SE[1] = fVec112SE[0];
			fVec113SE[1] = fVec113SE[0];
			fVec107SE[2] = fVec107SE[1];
			fVec107SE[1] = fVec107SE[0];
			fVec108SE[1] = fVec108SE[0];
			fVec102SE[2] = fVec102SE[1];
			fVec102SE[1] = fVec102SE[0];
			fVec103SE[1] = fVec103SE[0];
			fVec97SE[2] = fVec97SE[1];
			fVec97SE[1] = fVec97SE[0];
			fVec98SE[1] = fVec98SE[0];
			fVec94SE[2] = fVec94SE[1];
			fVec94SE[1] = fVec94SE[0];
			fVec95SE[1] = fVec95SE[0];
			fVec89SE[2] = fVec89SE[1];
			fVec89SE[1] = fVec89SE[0];
			fVec90SE[1] = fVec90SE[0];
			fVec84SE[2] = fVec84SE[1];
			fVec84SE[1] = fVec84SE[0];
			fVec85SE[1] = fVec85SE[0];
			fVec79SE[2] = fVec79SE[1];
			fVec79SE[1] = fVec79SE[0];
			fVec80SE[1] = fVec80SE[0];
			fVec74SE[2] = fVec74SE[1];
			fVec74SE[1] = fVec74SE[0];
			fVec75SE[1] = fVec75SE[0];
			fVec69SE[2] = fVec69SE[1];
			fVec69SE[1] = fVec69SE[0];
			fVec70SE[1] = fVec70SE[0];
			fVec66SE[2] = fVec66SE[1];
			fVec66SE[1] = fVec66SE[0];
			fVec67SE[1] = fVec67SE[0];
			fVec61SE[2] = fVec61SE[1];
			fVec61SE[1] = fVec61SE[0];
			fVec62SE[1] = fVec62SE[0];
			fVec56SE[2] = fVec56SE[1];
			fVec56SE[1] = fVec56SE[0];
			fVec57SE[1] = fVec57SE[0];
			fVec51SE[2] = fVec51SE[1];
			fVec51SE[1] = fVec51SE[0];
			fVec52SE[1] = fVec52SE[0];
			fVec46SE[2] = fVec46SE[1];
			fVec46SE[1] = fVec46SE[0];
			fVec47SE[1] = fVec47SE[0];
			fVec41SE[2] = fVec41SE[1];
			fVec41SE[1] = fVec41SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec38SE[2] = fVec38SE[1];
			fVec38SE[1] = fVec38SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec33SE[2] = fVec33SE[1];
			fVec33SE[1] = fVec33SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec28SE[2] = fVec28SE[1];
			fVec28SE[1] = fVec28SE[0];
			fVec29SE[1] = fVec29SE[0];
			fVec23SE[2] = fVec23SE[1];
			fVec23SE[1] = fVec23SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec18SE[2] = fVec18SE[1];
			fVec18SE[1] = fVec18SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec13SE[2] = fVec13SE[1];
			fVec13SE[1] = fVec13SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec10SE[2] = fVec10SE[1];
			fVec10SE[1] = fVec10SE[0];
			fVec11SE[1] = fVec11SE[0];
			fVec5SE[2] = fVec5SE[1];
			fVec5SE[1] = fVec5SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec0SE[2] = fVec0SE[1];
			fVec0SE[1] = fVec0SE[0];
			fVec1SE[1] = fVec1SE[0];
		}
		fVec1SEState = fVec1SE[1];
		fVec0SEState[0] = fVec0SE[1];
		fVec0SEState[1] = fVec0SE[2];
		fVec6SEState = fVec6SE[1];
		fVec5SEState[0] = fVec5SE[1];
		fVec5SEState[1] = fVec5SE[2];
		fVec11SEState = fVec11SE[1];
		fVec10SEState[0] = fVec10SE[1];
		fVec10SEState[1] = fVec10SE[2];
		fVec14SEState = fVec14SE[1];
		fVec13SEState[0] = fVec13SE[1];
		fVec13SEState[1] = fVec13SE[2];
		fVec19SEState = fVec19SE[1];
		fVec18SEState[0] = fVec18SE[1];
		fVec18SEState[1] = fVec18SE[2];
		fVec24SEState = fVec24SE[1];
		fVec23SEState[0] = fVec23SE[1];
		fVec23SEState[1] = fVec23SE[2];
		fVec29SEState = fVec29SE[1];
		fVec28SEState[0] = fVec28SE[1];
		fVec28SEState[1] = fVec28SE[2];
		fVec34SEState = fVec34SE[1];
		fVec33SEState[0] = fVec33SE[1];
		fVec33SEState[1] = fVec33SE[2];
		fVec39SEState = fVec39SE[1];
		fVec38SEState[0] = fVec38SE[1];
		fVec38SEState[1] = fVec38SE[2];
		fVec42SEState = fVec42SE[1];
		fVec41SEState[0] = fVec41SE[1];
		fVec41SEState[1] = fVec41SE[2];
		fVec47SEState = fVec47SE[1];
		fVec46SEState[0] = fVec46SE[1];
		fVec46SEState[1] = fVec46SE[2];
		fVec52SEState = fVec52SE[1];
		fVec51SEState[0] = fVec51SE[1];
		fVec51SEState[1] = fVec51SE[2];
		fVec57SEState = fVec57SE[1];
		fVec56SEState[0] = fVec56SE[1];
		fVec56SEState[1] = fVec56SE[2];
		fVec62SEState = fVec62SE[1];
		fVec61SEState[0] = fVec61SE[1];
		fVec61SEState[1] = fVec61SE[2];
		fVec67SEState = fVec67SE[1];
		fVec66SEState[0] = fVec66SE[1];
		fVec66SEState[1] = fVec66SE[2];
		fVec70SEState = fVec70SE[1];
		fVec69SEState[0] = fVec69SE[1];
		fVec69SEState[1] = fVec69SE[2];
		fVec75SEState = fVec75SE[1];
		fVec74SEState[0] = fVec74SE[1];
		fVec74SEState[1] = fVec74SE[2];
		fVec80SEState = fVec80SE[1];
		fVec79SEState[0] = fVec79SE[1];
		fVec79SEState[1] = fVec79SE[2];
		fVec85SEState = fVec85SE[1];
		fVec84SEState[0] = fVec84SE[1];
		fVec84SEState[1] = fVec84SE[2];
		fVec90SEState = fVec90SE[1];
		fVec89SEState[0] = fVec89SE[1];
		fVec89SEState[1] = fVec89SE[2];
		fVec95SEState = fVec95SE[1];
		fVec94SEState[0] = fVec94SE[1];
		fVec94SEState[1] = fVec94SE[2];
		fVec98SEState = fVec98SE[1];
		fVec97SEState[0] = fVec97SE[1];
		fVec97SEState[1] = fVec97SE[2];
		fVec103SEState = fVec103SE[1];
		fVec102SEState[0] = fVec102SE[1];
		fVec102SEState[1] = fVec102SE[2];
		fVec108SEState = fVec108SE[1];
		fVec107SEState[0] = fVec107SE[1];
		fVec107SEState[1] = fVec107SE[2];
		fVec113SEState = fVec113SE[1];
		fVec112SEState[0] = fVec112SE[1];
		fVec112SEState[1] = fVec112SE[2];
		fVec118SEState = fVec118SE[1];
		fVec117SEState[0] = fVec117SE[1];
		fVec117SEState[1] = fVec117SE[2];
		fVec123SEState = fVec123SE[1];
		fVec122SEState[0] = fVec122SE[1];
		fVec122SEState[1] = fVec122SE[2];
		fVec126SEState = fVec126SE[1];
		fVec125SEState[0] = fVec125SE[1];
		fVec125SEState[1] = fVec125SE[2];
		fVec131SEState = fVec131SE[1];
		fVec130SEState[0] = fVec130SE[1];
		fVec130SEState[1] = fVec130SE[2];
		fVec136SEState = fVec136SE[1];
		fVec135SEState[0] = fVec135SE[1];
		fVec135SEState[1] = fVec135SE[2];
		fVec141SEState = fVec141SE[1];
		fVec140SEState[0] = fVec140SE[1];
		fVec140SEState[1] = fVec140SE[2];
		fVec146SEState = fVec146SE[1];
		fVec145SEState[0] = fVec145SE[1];
		fVec145SEState[1] = fVec145SE[2];
		fVec151SEState = fVec151SE[1];
		fVec150SEState[0] = fVec150SE[1];
		fVec150SEState[1] = fVec150SE[2];
		fVec154SEState = fVec154SE[1];
		fVec153SEState[0] = fVec153SE[1];
		fVec153SEState[1] = fVec153SE[2];
		fVec159SEState = fVec159SE[1];
		fVec158SEState[0] = fVec158SE[1];
		fVec158SEState[1] = fVec158SE[2];
		fVec164SEState = fVec164SE[1];
		fVec163SEState[0] = fVec163SE[1];
		fVec163SEState[1] = fVec163SE[2];
		fVec169SEState = fVec169SE[1];
		fVec168SEState[0] = fVec168SE[1];
		fVec168SEState[1] = fVec168SE[2];
		fVec174SEState = fVec174SE[1];
		fVec173SEState[0] = fVec173SE[1];
		fVec173SEState[1] = fVec173SE[2];
		fVec179SEState = fVec179SE[1];
		fVec178SEState[0] = fVec178SE[1];
		fVec178SEState[1] = fVec178SE[2];
		fVec182SEState = fVec182SE[1];
		fVec181SEState[0] = fVec181SE[1];
		fVec181SEState[1] = fVec181SE[2];
		fVec187SEState = fVec187SE[1];
		fVec186SEState[0] = fVec186SE[1];
		fVec186SEState[1] = fVec186SE[2];
		fVec192SEState = fVec192SE[1];
		fVec191SEState[0] = fVec191SE[1];
		fVec191SEState[1] = fVec191SE[2];
		fVec197SEState = fVec197SE[1];
		fVec196SEState[0] = fVec196SE[1];
		fVec196SEState[1] = fVec196SE[2];
		fVec202SEState = fVec202SE[1];
		fVec201SEState[0] = fVec201SE[1];
		fVec201SEState[1] = fVec201SE[2];
		fVec207SEState = fVec207SE[1];
		fVec206SEState[0] = fVec206SE[1];
		fVec206SEState[1] = fVec206SE[2];
		fVec210SEState = fVec210SE[1];
		fVec209SEState[0] = fVec209SE[1];
		fVec209SEState[1] = fVec209SE[2];
		fVec215SEState = fVec215SE[1];
		fVec214SEState[0] = fVec214SE[1];
		fVec214SEState[1] = fVec214SE[2];
		fVec220SEState = fVec220SE[1];
		fVec219SEState[0] = fVec219SE[1];
		fVec219SEState[1] = fVec219SE[2];
		fVec225SEState = fVec225SE[1];
		fVec224SEState[0] = fVec224SE[1];
		fVec224SEState[1] = fVec224SE[2];
		fVec230SEState = fVec230SE[1];
		fVec229SEState[0] = fVec229SE[1];
		fVec229SEState[1] = fVec229SE[2];
		fVec235SEState = fVec235SE[1];
		fVec234SEState[0] = fVec234SE[1];
		fVec234SEState[1] = fVec234SE[2];
		fVec238SEState = fVec238SE[1];
		fVec237SEState[0] = fVec237SE[1];
		fVec237SEState[1] = fVec237SE[2];
		fVec243SEState = fVec243SE[1];
		fVec242SEState[0] = fVec242SE[1];
		fVec242SEState[1] = fVec242SE[2];
		fVec248SEState = fVec248SE[1];
		fVec247SEState[0] = fVec247SE[1];
		fVec247SEState[1] = fVec247SE[2];
		fVec253SEState = fVec253SE[1];
		fVec252SEState[0] = fVec252SE[1];
		fVec252SEState[1] = fVec252SE[2];
		fVec258SEState = fVec258SE[1];
		fVec257SEState[0] = fVec257SE[1];
		fVec257SEState[1] = fVec257SE[2];
		fVec263SEState = fVec263SE[1];
		fVec262SEState[0] = fVec262SE[1];
		fVec262SEState[1] = fVec262SE[2];
		fVec266SEState = fVec266SE[1];
		fVec265SEState[0] = fVec265SE[1];
		fVec265SEState[1] = fVec265SE[2];
		fVec271SEState = fVec271SE[1];
		fVec270SEState[0] = fVec270SE[1];
		fVec270SEState[1] = fVec270SE[2];
		fVec276SEState = fVec276SE[1];
		fVec275SEState[0] = fVec275SE[1];
		fVec275SEState[1] = fVec275SE[2];
		fVec281SEState = fVec281SE[1];
		fVec280SEState[0] = fVec280SE[1];
		fVec280SEState[1] = fVec280SE[2];
		fVec286SEState = fVec286SE[1];
		fVec285SEState[0] = fVec285SE[1];
		fVec285SEState[1] = fVec285SE[2];
		fVec291SEState = fVec291SE[1];
		fVec290SEState[0] = fVec290SE[1];
		fVec290SEState[1] = fVec290SE[2];
		fVec294SEState = fVec294SE[1];
		fVec293SEState[0] = fVec293SE[1];
		fVec293SEState[1] = fVec293SE[2];
		fVec299SEState = fVec299SE[1];
		fVec298SEState[0] = fVec298SE[1];
		fVec298SEState[1] = fVec298SE[2];
		fVec304SEState = fVec304SE[1];
		fVec303SEState[0] = fVec303SE[1];
		fVec303SEState[1] = fVec303SE[2];
		fVec309SEState = fVec309SE[1];
		fVec308SEState[0] = fVec308SE[1];
		fVec308SEState[1] = fVec308SE[2];
		fVec314SEState = fVec314SE[1];
		fVec313SEState[0] = fVec313SE[1];
		fVec313SEState[1] = fVec313SE[2];
		fVec319SEState = fVec319SE[1];
		fVec318SEState[0] = fVec318SE[1];
		fVec318SEState[1] = fVec318SE[2];
		fVec322SEState = fVec322SE[1];
		fVec321SEState[0] = fVec321SE[1];
		fVec321SEState[1] = fVec321SE[2];
		fVec327SEState = fVec327SE[1];
		fVec326SEState[0] = fVec326SE[1];
		fVec326SEState[1] = fVec326SE[2];
		fVec332SEState = fVec332SE[1];
		fVec331SEState[0] = fVec331SE[1];
		fVec331SEState[1] = fVec331SE[2];
		fVec337SEState = fVec337SE[1];
		fVec336SEState[0] = fVec336SE[1];
		fVec336SEState[1] = fVec336SE[2];
		fVec342SEState = fVec342SE[1];
		fVec341SEState[0] = fVec341SE[1];
		fVec341SEState[1] = fVec341SE[2];
		fVec347SEState = fVec347SE[1];
		fVec346SEState[0] = fVec346SE[1];
		fVec346SEState[1] = fVec346SE[2];
		fVec350SEState = fVec350SE[1];
		fVec349SEState[0] = fVec349SE[1];
		fVec349SEState[1] = fVec349SE[2];
		fVec355SEState = fVec355SE[1];
		fVec354SEState[0] = fVec354SE[1];
		fVec354SEState[1] = fVec354SE[2];
		fVec360SEState = fVec360SE[1];
		fVec359SEState[0] = fVec359SE[1];
		fVec359SEState[1] = fVec359SE[2];
		fVec365SEState = fVec365SE[1];
		fVec364SEState[0] = fVec364SE[1];
		fVec364SEState[1] = fVec364SE[2];
		fVec370SEState = fVec370SE[1];
		fVec369SEState[0] = fVec369SE[1];
		fVec369SEState[1] = fVec369SE[2];
		fVec375SEState = fVec375SE[1];
		fVec374SEState[0] = fVec374SE[1];
		fVec374SEState[1] = fVec374SE[2];
		fVec378SEState = fVec378SE[1];
		fVec377SEState[0] = fVec377SE[1];
		fVec377SEState[1] = fVec377SE[2];
		fVec383SEState = fVec383SE[1];
		fVec382SEState[0] = fVec382SE[1];
		fVec382SEState[1] = fVec382SE[2];
		fVec388SEState = fVec388SE[1];
		fVec387SEState[0] = fVec387SE[1];
		fVec387SEState[1] = fVec387SE[2];
		fVec393SEState = fVec393SE[1];
		fVec392SEState[0] = fVec392SE[1];
		fVec392SEState[1] = fVec392SE[2];
		fVec398SEState = fVec398SE[1];
		fVec397SEState[0] = fVec397SE[1];
		fVec397SEState[1] = fVec397SE[2];
		fVec403SEState = fVec403SE[1];
		fVec402SEState[0] = fVec402SE[1];
		fVec402SEState[1] = fVec402SE[2];
		fVec406SEState = fVec406SE[1];
		fVec405SEState[0] = fVec405SE[1];
		fVec405SEState[1] = fVec405SE[2];
		fVec411SEState = fVec411SE[1];
		fVec410SEState[0] = fVec410SE[1];
		fVec410SEState[1] = fVec410SE[2];
		fVec416SEState = fVec416SE[1];
		fVec415SEState[0] = fVec415SE[1];
		fVec415SEState[1] = fVec415SE[2];
		fVec421SEState = fVec421SE[1];
		fVec420SEState[0] = fVec420SE[1];
		fVec420SEState[1] = fVec420SE[2];
		fVec426SEState = fVec426SE[1];
		fVec425SEState[0] = fVec425SE[1];
		fVec425SEState[1] = fVec425SE[2];
		fVec431SEState = fVec431SE[1];
		fVec430SEState[0] = fVec430SE[1];
		fVec430SEState[1] = fVec430SE[2];
		fVec434SEState = fVec434SE[1];
		fVec433SEState[0] = fVec433SE[1];
		fVec433SEState[1] = fVec433SE[2];
		fVec439SEState = fVec439SE[1];
		fVec438SEState[0] = fVec438SE[1];
		fVec438SEState[1] = fVec438SE[2];
		fVec444SEState = fVec444SE[1];
		fVec443SEState[0] = fVec443SE[1];
		fVec443SEState[1] = fVec443SE[2];
		fVec449SEState = fVec449SE[1];
		fVec448SEState[0] = fVec448SE[1];
		fVec448SEState[1] = fVec448SE[2];
		fVec454SEState = fVec454SE[1];
		fVec453SEState[0] = fVec453SE[1];
		fVec453SEState[1] = fVec453SE[2];
		fVec459SEState = fVec459SE[1];
		fVec458SEState[0] = fVec458SE[1];
		fVec458SEState[1] = fVec458SE[2];
		fVec462SEState = fVec462SE[1];
		fVec461SEState[0] = fVec461SE[1];
		fVec461SEState[1] = fVec461SE[2];
		fVec467SEState = fVec467SE[1];
		fVec466SEState[0] = fVec466SE[1];
		fVec466SEState[1] = fVec466SE[2];
		fVec472SEState = fVec472SE[1];
		fVec471SEState[0] = fVec471SE[1];
		fVec471SEState[1] = fVec471SE[2];
		fVec477SEState = fVec477SE[1];
		fVec476SEState[0] = fVec476SE[1];
		fVec476SEState[1] = fVec476SE[2];
		fVec482SEState = fVec482SE[1];
		fVec481SEState[0] = fVec481SE[1];
		fVec481SEState[1] = fVec481SE[2];
		fVec487SEState = fVec487SE[1];
		fVec486SEState[0] = fVec486SE[1];
		fVec486SEState[1] = fVec486SE[2];
		fVec490SEState = fVec490SE[1];
		fVec489SEState[0] = fVec489SE[1];
		fVec489SEState[1] = fVec489SE[2];
		fVec495SEState = fVec495SE[1];
		fVec494SEState[0] = fVec494SE[1];
		fVec494SEState[1] = fVec494SE[2];
		fVec500SEState = fVec500SE[1];
		fVec499SEState[0] = fVec499SE[1];
		fVec499SEState[1] = fVec499SE[2];
		fVec505SEState = fVec505SE[1];
		fVec504SEState[0] = fVec504SE[1];
		fVec504SEState[1] = fVec504SE[2];
		fVec510SEState = fVec510SE[1];
		fVec509SEState[0] = fVec509SE[1];
		fVec509SEState[1] = fVec509SE[2];
		fVec515SEState = fVec515SE[1];
		fVec514SEState[0] = fVec514SE[1];
		fVec514SEState[1] = fVec514SE[2];
		fVec518SEState = fVec518SE[1];
		fVec517SEState[0] = fVec517SE[1];
		fVec517SEState[1] = fVec517SE[2];
		fVec523SEState = fVec523SE[1];
		fVec522SEState[0] = fVec522SE[1];
		fVec522SEState[1] = fVec522SE[2];
		fVec528SEState = fVec528SE[1];
		fVec527SEState[0] = fVec527SE[1];
		fVec527SEState[1] = fVec527SE[2];
		fVec533SEState = fVec533SE[1];
		fVec532SEState[0] = fVec532SE[1];
		fVec532SEState[1] = fVec532SE[2];
		fVec538SEState = fVec538SE[1];
		fVec537SEState[0] = fVec537SE[1];
		fVec537SEState[1] = fVec537SE[2];
		fVec543SEState = fVec543SE[1];
		fVec542SEState[0] = fVec542SE[1];
		fVec542SEState[1] = fVec542SE[2];
		fVec546SEState = fVec546SE[1];
		fVec545SEState[0] = fVec545SE[1];
		fVec545SEState[1] = fVec545SE[2];
		fVec551SEState = fVec551SE[1];
		fVec550SEState[0] = fVec550SE[1];
		fVec550SEState[1] = fVec550SE[2];
		fVec556SEState = fVec556SE[1];
		fVec555SEState[0] = fVec555SE[1];
		fVec555SEState[1] = fVec555SE[2];
		fVec561SEState = fVec561SE[1];
		fVec560SEState[0] = fVec560SE[1];
		fVec560SEState[1] = fVec560SE[2];
		fVec566SEState = fVec566SE[1];
		fVec565SEState[0] = fVec565SE[1];
		fVec565SEState[1] = fVec565SE[2];
		fVec571SEState = fVec571SE[1];
		fVec570SEState[0] = fVec570SE[1];
		fVec570SEState[1] = fVec570SE[2];
		fVec574SEState = fVec574SE[1];
		fVec573SEState[0] = fVec573SE[1];
		fVec573SEState[1] = fVec573SE[2];
		fVec579SEState = fVec579SE[1];
		fVec578SEState[0] = fVec578SE[1];
		fVec578SEState[1] = fVec578SE[2];
		fVec584SEState = fVec584SE[1];
		fVec583SEState[0] = fVec583SE[1];
		fVec583SEState[1] = fVec583SE[2];
		fVec589SEState = fVec589SE[1];
		fVec588SEState[0] = fVec588SE[1];
		fVec588SEState[1] = fVec588SE[2];
		fVec594SEState = fVec594SE[1];
		fVec593SEState[0] = fVec593SE[1];
		fVec593SEState[1] = fVec593SE[2];
		fVec599SEState = fVec599SE[1];
		fVec598SEState[0] = fVec598SE[1];
		fVec598SEState[1] = fVec598SE[2];
		fVec602SEState = fVec602SE[1];
		fVec601SEState[0] = fVec601SE[1];
		fVec601SEState[1] = fVec601SE[2];
		fVec607SEState = fVec607SE[1];
		fVec606SEState[0] = fVec606SE[1];
		fVec606SEState[1] = fVec606SE[2];
		fVec612SEState = fVec612SE[1];
		fVec611SEState[0] = fVec611SE[1];
		fVec611SEState[1] = fVec611SE[2];
		fVec617SEState = fVec617SE[1];
		fVec616SEState[0] = fVec616SE[1];
		fVec616SEState[1] = fVec616SE[2];
		fVec622SEState = fVec622SE[1];
		fVec621SEState[0] = fVec621SE[1];
		fVec621SEState[1] = fVec621SE[2];
		fVec627SEState = fVec627SE[1];
		fVec626SEState[0] = fVec626SE[1];
		fVec626SEState[1] = fVec626SE[2];
		fVec630SEState = fVec630SE[1];
		fVec629SEState[0] = fVec629SE[1];
		fVec629SEState[1] = fVec629SE[2];
		fVec635SEState = fVec635SE[1];
		fVec634SEState[0] = fVec634SE[1];
		fVec634SEState[1] = fVec634SE[2];
		fVec640SEState = fVec640SE[1];
		fVec639SEState[0] = fVec639SE[1];
		fVec639SEState[1] = fVec639SE[2];
		fVec645SEState = fVec645SE[1];
		fVec644SEState[0] = fVec644SE[1];
		fVec644SEState[1] = fVec644SE[2];
		fVec650SEState = fVec650SE[1];
		fVec649SEState[0] = fVec649SE[1];
		fVec649SEState[1] = fVec649SE[2];
		fVec655SEState = fVec655SE[1];
		fVec654SEState[0] = fVec654SE[1];
		fVec654SEState[1] = fVec654SE[2];
		fVec658SEState = fVec658SE[1];
		fVec657SEState[0] = fVec657SE[1];
		fVec657SEState[1] = fVec657SE[2];
		fVec663SEState = fVec663SE[1];
		fVec662SEState[0] = fVec662SE[1];
		fVec662SEState[1] = fVec662SE[2];
		fVec668SEState = fVec668SE[1];
		fVec667SEState[0] = fVec667SE[1];
		fVec667SEState[1] = fVec667SE[2];
		fVec673SEState = fVec673SE[1];
		fVec672SEState[0] = fVec672SE[1];
		fVec672SEState[1] = fVec672SE[2];
		fVec678SEState = fVec678SE[1];
		fVec677SEState[0] = fVec677SE[1];
		fVec677SEState[1] = fVec677SE[2];
		fVec683SEState = fVec683SE[1];
		fVec682SEState[0] = fVec682SE[1];
		fVec682SEState[1] = fVec682SE[2];
		fVec686SEState = fVec686SE[1];
		fVec685SEState[0] = fVec685SE[1];
		fVec685SEState[1] = fVec685SE[2];
		fVec691SEState = fVec691SE[1];
		fVec690SEState[0] = fVec690SE[1];
		fVec690SEState[1] = fVec690SE[2];
		fVec696SEState = fVec696SE[1];
		fVec695SEState[0] = fVec695SE[1];
		fVec695SEState[1] = fVec695SE[2];
		fVec701SEState = fVec701SE[1];
		fVec700SEState[0] = fVec700SE[1];
		fVec700SEState[1] = fVec700SE[2];
		fVec706SEState = fVec706SE[1];
		fVec705SEState[0] = fVec705SE[1];
		fVec705SEState[1] = fVec705SE[2];
		fVec711SEState = fVec711SE[1];
		fVec710SEState[0] = fVec710SE[1];
		fVec710SEState[1] = fVec710SE[2];
		fVec714SEState = fVec714SE[1];
		fVec713SEState[0] = fVec713SE[1];
		fVec713SEState[1] = fVec713SE[2];
		fVec719SEState = fVec719SE[1];
		fVec718SEState[0] = fVec718SE[1];
		fVec718SEState[1] = fVec718SE[2];
		fVec724SEState = fVec724SE[1];
		fVec723SEState[0] = fVec723SE[1];
		fVec723SEState[1] = fVec723SE[2];
		fVec729SEState = fVec729SE[1];
		fVec728SEState[0] = fVec728SE[1];
		fVec728SEState[1] = fVec728SE[2];
		fVec734SEState = fVec734SE[1];
		fVec733SEState[0] = fVec733SE[1];
		fVec733SEState[1] = fVec733SE[2];
		fVec739SEState = fVec739SE[1];
		fVec738SEState[0] = fVec738SE[1];
		fVec738SEState[1] = fVec738SE[2];
		fVec742SEState = fVec742SE[1];
		fVec741SEState[0] = fVec741SE[1];
		fVec741SEState[1] = fVec741SE[2];
		fVec747SEState = fVec747SE[1];
		fVec746SEState[0] = fVec746SE[1];
		fVec746SEState[1] = fVec746SE[2];
		fVec752SEState = fVec752SE[1];
		fVec751SEState[0] = fVec751SE[1];
		fVec751SEState[1] = fVec751SE[2];
		fVec757SEState = fVec757SE[1];
		fVec756SEState[0] = fVec756SE[1];
		fVec756SEState[1] = fVec756SE[2];
		fVec762SEState = fVec762SE[1];
		fVec761SEState[0] = fVec761SE[1];
		fVec761SEState[1] = fVec761SE[2];
		fVec767SEState = fVec767SE[1];
		fVec766SEState[0] = fVec766SE[1];
		fVec766SEState[1] = fVec766SE[2];
		fVec770SEState = fVec770SE[1];
		fVec769SEState[0] = fVec769SE[1];
		fVec769SEState[1] = fVec769SE[2];
		fVec775SEState = fVec775SE[1];
		fVec774SEState[0] = fVec774SE[1];
		fVec774SEState[1] = fVec774SE[2];
		fVec780SEState = fVec780SE[1];
		fVec779SEState[0] = fVec779SE[1];
		fVec779SEState[1] = fVec779SE[2];
		fVec785SEState = fVec785SE[1];
		fVec784SEState[0] = fVec784SE[1];
		fVec784SEState[1] = fVec784SE[2];
		fVec790SEState = fVec790SE[1];
		fVec789SEState[0] = fVec789SE[1];
		fVec789SEState[1] = fVec789SE[2];
		fVec795SEState = fVec795SE[1];
		fVec794SEState[0] = fVec794SE[1];
		fVec794SEState[1] = fVec794SE[2];
		fVec798SEState = fVec798SE[1];
		fVec797SEState[0] = fVec797SE[1];
		fVec797SEState[1] = fVec797SE[2];
		fVec803SEState = fVec803SE[1];
		fVec802SEState[0] = fVec802SE[1];
		fVec802SEState[1] = fVec802SE[2];
		fVec808SEState = fVec808SE[1];
		fVec807SEState[0] = fVec807SE[1];
		fVec807SEState[1] = fVec807SE[2];
		fVec810SEState = fVec810SE[1];
		fVec814SEState = fVec814SE[1];
		fVec818SEState = fVec818SE[1];
		fVec822SEState = fVec822SE[1];
		fVec826SEState = fVec826SE[1];
		fVec830SEState = fVec830SE[1];
		fVec834SEState = fVec834SE[1];
		fVec838SEState = fVec838SE[1];
		fVec842SEState = fVec842SE[1];
		fVec846SEState = fVec846SE[1];
		fVec850SEState = fVec850SE[1];
		fVec854SEState = fVec854SE[1];
		fVec858SEState = fVec858SE[1];
		fVec862SEState = fVec862SE[1];
		fVec866SEState = fVec866SE[1];
		fVec870SEState = fVec870SE[1];
		fVec874SEState = fVec874SE[1];
		fVec878SEState = fVec878SE[1];
		fVec882SEState = fVec882SE[1];
		fVec886SEState = fVec886SE[1];
		fVec890SEState = fVec890SE[1];
		fVec894SEState = fVec894SE[1];
		fVec898SEState = fVec898SE[1];
		fVec902SEState = fVec902SE[1];
		fVec906SEState = fVec906SE[1];
		fVec910SEState = fVec910SE[1];
		fVec914SEState = fVec914SE[1];
		fVec918SEState = fVec918SE[1];
		fVec922SEState = fVec922SE[1];
		fVec926SEState = fVec926SE[1];
		fbargraph0 = fSlow4SE;
		fbargraph1 = fSlow5SE;
		fbargraph2 = fSlow6SE;
		fbargraph3 = fSlow7SE;
		fbargraph4 = fSlow8SE;
		fbargraph5 = fSlow9SE;
		fbargraph6 = fSlow10SE;
		fbargraph7 = fSlow11SE;
		fbargraph8 = fSlow12SE;
		fbargraph9 = fSlow13SE;
		fbargraph10 = fSlow14SE;
		fbargraph11 = fSlow15SE;
		fbargraph12 = fSlow16SE;
		fbargraph13 = fSlow17SE;
		fbargraph14 = fSlow18SE;
		fbargraph15 = fSlow19SE;
		fbargraph16 = fSlow20SE;
		fbargraph17 = fSlow21SE;
		fbargraph18 = fSlow22SE;
		fbargraph19 = fSlow23SE;
		fbargraph20 = fSlow24SE;
		fbargraph21 = fSlow25SE;
		fbargraph22 = fSlow26SE;
		fbargraph23 = fSlow27SE;
		fbargraph24 = fSlow28SE;
		fbargraph25 = fSlow29SE;
		fbargraph26 = fSlow30SE;
		fbargraph27 = fSlow31SE;
		fbargraph28 = fSlow32SE;
		fbargraph29 = fSlow33SE;
	}
};


