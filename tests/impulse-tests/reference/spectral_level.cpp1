//----------------------------------------------------------
// name: "spectral_level"
//
// Code generated with Faust 2.77.2 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fConst0; // step: 16
	float 	fConst1; // step: 17
	float 	fConst2; // step: 26
	float 	fConst3; // step: 28
	float 	fConst4; // step: 32
	float 	fConst5; // step: 38
	float 	fConst6; // step: 44
	float 	fConst7; // step: 50
	float 	fConst8; // step: 54
	float 	fConst9; // step: 55
	float 	fConst10; // step: 57
	// Recursion delay fVeeec1 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec1State[2]; // Copy Delay
	float 	fConst11; // step: 66
	float 	fConst12; // step: 67
	float 	fConst13; // step: 70
	float 	fConst14; // step: 80
	float 	fConst15; // step: 84
	// Recursion delay fVeeec4 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec4State[2]; // Copy Delay
	float 	fConst16; // step: 92
	float 	fConst17; // step: 93
	float 	fConst18; // step: 96
	float 	fConst19; // step: 106
	float 	fConst20; // step: 110
	// Recursion delay fVeeec7 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec7State[2]; // Copy Delay
	float 	fConst21; // step: 118
	float 	fConst22; // step: 119
	float 	fConst23; // step: 122
	// Recursion delay fVeeec0 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec0State; // Mono Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst24; // step: 142
	float 	fConst25; // step: 143
	float 	fConst26; // step: 147
	float 	fConst27; // step: 151
	float 	fConst28; // step: 155
	float 	fConst29; // step: 161
	float 	fConst30; // step: 167
	float 	fConst31; // step: 173
	float 	fConst32; // step: 178
	float 	fConst33; // step: 182
	// Recursion delay fVeeec12 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec12State[2]; // Copy Delay
	float 	fConst34; // step: 191
	float 	fConst35; // step: 192
	float 	fConst36; // step: 195
	float 	fConst37; // step: 205
	float 	fConst38; // step: 209
	// Recursion delay fVeeec15 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec15State[2]; // Copy Delay
	float 	fConst39; // step: 217
	float 	fConst40; // step: 220
	float 	fConst41; // step: 230
	float 	fConst42; // step: 234
	// Recursion delay fVeeec18 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec18State[2]; // Copy Delay
	float 	fConst43; // step: 242
	float 	fConst44; // step: 245
	float 	fConst45; // step: 254
	float 	fConst46; // step: 257
	float 	fConst47; // step: 258
	float 	fConst48; // step: 260
	// Recursion delay fVeeec21 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec21State[2]; // Copy Delay
	float 	fConst49; // step: 267
	float 	fConst50; // step: 268
	float 	fConst51; // step: 271
	float 	fConst52; // step: 280
	float 	fConst53; // step: 284
	// Recursion delay fVeeec24 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec24State[2]; // Copy Delay
	float 	fConst54; // step: 291
	float 	fConst55; // step: 292
	float 	fConst56; // step: 295
	float 	fConst57; // step: 304
	float 	fConst58; // step: 308
	// Recursion delay fVeeec27 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec27State[2]; // Copy Delay
	float 	fConst59; // step: 315
	float 	fConst60; // step: 316
	float 	fConst61; // step: 319
	// Recursion delay fVeeec11 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec11State; // Mono Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst62; // step: 339
	float 	fConst63; // step: 340
	float 	fConst64; // step: 344
	float 	fConst65; // step: 348
	float 	fConst66; // step: 352
	float 	fConst67; // step: 356
	float 	fConst68; // step: 360
	float 	fConst69; // step: 364
	float 	fConst70; // step: 368
	float 	fConst71; // step: 372
	// Recursion delay fVeeec32 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec32State[2]; // Copy Delay
	float 	fConst72; // step: 379
	float 	fConst73; // step: 380
	float 	fConst74; // step: 383
	float 	fConst75; // step: 392
	float 	fConst76; // step: 396
	// Recursion delay fVeeec35 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec35State[2]; // Copy Delay
	float 	fConst77; // step: 403
	float 	fConst78; // step: 406
	float 	fConst79; // step: 415
	float 	fConst80; // step: 419
	// Recursion delay fVeeec38 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec38State[2]; // Copy Delay
	float 	fConst81; // step: 426
	float 	fConst82; // step: 429
	float 	fConst83; // step: 438
	float 	fConst84; // step: 441
	float 	fConst85; // step: 442
	float 	fConst86; // step: 444
	// Recursion delay fVeeec41 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec41State[2]; // Copy Delay
	float 	fConst87; // step: 451
	float 	fConst88; // step: 452
	float 	fConst89; // step: 455
	float 	fConst90; // step: 464
	float 	fConst91; // step: 468
	// Recursion delay fVeeec44 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec44State[2]; // Copy Delay
	float 	fConst92; // step: 475
	float 	fConst93; // step: 476
	float 	fConst94; // step: 479
	float 	fConst95; // step: 488
	float 	fConst96; // step: 492
	// Recursion delay fVeeec47 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec47State[2]; // Copy Delay
	float 	fConst97; // step: 499
	float 	fConst98; // step: 500
	float 	fConst99; // step: 503
	// Recursion delay fVeeec31 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec31State; // Mono Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst100; // step: 523
	float 	fConst101; // step: 524
	float 	fConst102; // step: 528
	float 	fConst103; // step: 532
	float 	fConst104; // step: 536
	float 	fConst105; // step: 540
	float 	fConst106; // step: 544
	float 	fConst107; // step: 548
	float 	fConst108; // step: 552
	float 	fConst109; // step: 556
	// Recursion delay fVeeec52 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec52State[2]; // Copy Delay
	float 	fConst110; // step: 563
	float 	fConst111; // step: 564
	float 	fConst112; // step: 567
	float 	fConst113; // step: 576
	float 	fConst114; // step: 580
	// Recursion delay fVeeec55 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec55State[2]; // Copy Delay
	float 	fConst115; // step: 587
	float 	fConst116; // step: 590
	float 	fConst117; // step: 599
	float 	fConst118; // step: 603
	// Recursion delay fVeeec58 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec58State[2]; // Copy Delay
	float 	fConst119; // step: 610
	float 	fConst120; // step: 613
	float 	fConst121; // step: 622
	float 	fConst122; // step: 625
	float 	fConst123; // step: 626
	float 	fConst124; // step: 628
	// Recursion delay fVeeec61 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec61State[2]; // Copy Delay
	float 	fConst125; // step: 635
	float 	fConst126; // step: 636
	float 	fConst127; // step: 639
	float 	fConst128; // step: 648
	float 	fConst129; // step: 652
	// Recursion delay fVeeec64 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec64State[2]; // Copy Delay
	float 	fConst130; // step: 659
	float 	fConst131; // step: 660
	float 	fConst132; // step: 663
	float 	fConst133; // step: 672
	float 	fConst134; // step: 676
	// Recursion delay fVeeec67 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec67State[2]; // Copy Delay
	float 	fConst135; // step: 683
	float 	fConst136; // step: 684
	float 	fConst137; // step: 687
	// Recursion delay fVeeec51 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec51State; // Mono Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst138; // step: 707
	float 	fConst139; // step: 708
	float 	fConst140; // step: 712
	float 	fConst141; // step: 716
	float 	fConst142; // step: 720
	float 	fConst143; // step: 724
	float 	fConst144; // step: 728
	float 	fConst145; // step: 732
	float 	fConst146; // step: 736
	float 	fConst147; // step: 740
	// Recursion delay fVeeec72 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec72State[2]; // Copy Delay
	float 	fConst148; // step: 747
	float 	fConst149; // step: 748
	float 	fConst150; // step: 751
	float 	fConst151; // step: 760
	float 	fConst152; // step: 764
	// Recursion delay fVeeec75 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec75State[2]; // Copy Delay
	float 	fConst153; // step: 771
	float 	fConst154; // step: 774
	float 	fConst155; // step: 783
	float 	fConst156; // step: 787
	// Recursion delay fVeeec78 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec78State[2]; // Copy Delay
	float 	fConst157; // step: 794
	float 	fConst158; // step: 797
	float 	fConst159; // step: 806
	float 	fConst160; // step: 809
	float 	fConst161; // step: 810
	float 	fConst162; // step: 812
	// Recursion delay fVeeec81 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec81State[2]; // Copy Delay
	float 	fConst163; // step: 819
	float 	fConst164; // step: 820
	float 	fConst165; // step: 823
	float 	fConst166; // step: 832
	float 	fConst167; // step: 836
	// Recursion delay fVeeec84 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec84State[2]; // Copy Delay
	float 	fConst168; // step: 843
	float 	fConst169; // step: 844
	float 	fConst170; // step: 847
	float 	fConst171; // step: 856
	float 	fConst172; // step: 860
	// Recursion delay fVeeec87 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec87State[2]; // Copy Delay
	float 	fConst173; // step: 867
	float 	fConst174; // step: 868
	float 	fConst175; // step: 871
	// Recursion delay fVeeec71 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec71State; // Mono Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst176; // step: 891
	float 	fConst177; // step: 892
	float 	fConst178; // step: 896
	float 	fConst179; // step: 900
	float 	fConst180; // step: 904
	float 	fConst181; // step: 908
	float 	fConst182; // step: 912
	float 	fConst183; // step: 916
	float 	fConst184; // step: 920
	float 	fConst185; // step: 924
	// Recursion delay fVeeec92 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec92State[2]; // Copy Delay
	float 	fConst186; // step: 931
	float 	fConst187; // step: 932
	float 	fConst188; // step: 935
	float 	fConst189; // step: 944
	float 	fConst190; // step: 948
	// Recursion delay fVeeec95 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec95State[2]; // Copy Delay
	float 	fConst191; // step: 955
	float 	fConst192; // step: 958
	float 	fConst193; // step: 967
	float 	fConst194; // step: 971
	// Recursion delay fVeeec98 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec98State[2]; // Copy Delay
	float 	fConst195; // step: 978
	float 	fConst196; // step: 981
	float 	fConst197; // step: 990
	float 	fConst198; // step: 993
	float 	fConst199; // step: 994
	float 	fConst200; // step: 996
	// Recursion delay fVeeec101 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec101State[2]; // Copy Delay
	float 	fConst201; // step: 1003
	float 	fConst202; // step: 1004
	float 	fConst203; // step: 1007
	float 	fConst204; // step: 1016
	float 	fConst205; // step: 1020
	// Recursion delay fVeeec104 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec104State[2]; // Copy Delay
	float 	fConst206; // step: 1027
	float 	fConst207; // step: 1028
	float 	fConst208; // step: 1031
	float 	fConst209; // step: 1040
	float 	fConst210; // step: 1044
	// Recursion delay fVeeec107 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec107State[2]; // Copy Delay
	float 	fConst211; // step: 1051
	float 	fConst212; // step: 1052
	float 	fConst213; // step: 1055
	// Recursion delay fVeeec91 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec91State; // Mono Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst214; // step: 1075
	float 	fConst215; // step: 1076
	float 	fConst216; // step: 1080
	float 	fConst217; // step: 1084
	float 	fConst218; // step: 1088
	float 	fConst219; // step: 1092
	float 	fConst220; // step: 1096
	float 	fConst221; // step: 1100
	float 	fConst222; // step: 1104
	float 	fConst223; // step: 1108
	// Recursion delay fVeeec112 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec112State[2]; // Copy Delay
	float 	fConst224; // step: 1115
	float 	fConst225; // step: 1116
	float 	fConst226; // step: 1119
	float 	fConst227; // step: 1128
	float 	fConst228; // step: 1132
	// Recursion delay fVeeec115 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec115State[2]; // Copy Delay
	float 	fConst229; // step: 1139
	float 	fConst230; // step: 1142
	float 	fConst231; // step: 1151
	float 	fConst232; // step: 1155
	// Recursion delay fVeeec118 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec118State[2]; // Copy Delay
	float 	fConst233; // step: 1162
	float 	fConst234; // step: 1165
	float 	fConst235; // step: 1174
	float 	fConst236; // step: 1177
	float 	fConst237; // step: 1178
	float 	fConst238; // step: 1180
	// Recursion delay fVeeec121 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec121State[2]; // Copy Delay
	float 	fConst239; // step: 1187
	float 	fConst240; // step: 1188
	float 	fConst241; // step: 1191
	float 	fConst242; // step: 1200
	float 	fConst243; // step: 1204
	// Recursion delay fVeeec124 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec124State[2]; // Copy Delay
	float 	fConst244; // step: 1211
	float 	fConst245; // step: 1212
	float 	fConst246; // step: 1215
	float 	fConst247; // step: 1224
	float 	fConst248; // step: 1228
	// Recursion delay fVeeec127 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec127State[2]; // Copy Delay
	float 	fConst249; // step: 1235
	float 	fConst250; // step: 1236
	float 	fConst251; // step: 1239
	// Recursion delay fVeeec111 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec111State; // Mono Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst252; // step: 1259
	float 	fConst253; // step: 1260
	float 	fConst254; // step: 1264
	float 	fConst255; // step: 1268
	float 	fConst256; // step: 1272
	float 	fConst257; // step: 1276
	float 	fConst258; // step: 1280
	float 	fConst259; // step: 1284
	float 	fConst260; // step: 1288
	float 	fConst261; // step: 1292
	// Recursion delay fVeeec132 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec132State[2]; // Copy Delay
	float 	fConst262; // step: 1299
	float 	fConst263; // step: 1300
	float 	fConst264; // step: 1303
	float 	fConst265; // step: 1312
	float 	fConst266; // step: 1316
	// Recursion delay fVeeec135 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec135State[2]; // Copy Delay
	float 	fConst267; // step: 1323
	float 	fConst268; // step: 1326
	float 	fConst269; // step: 1335
	float 	fConst270; // step: 1339
	// Recursion delay fVeeec138 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec138State[2]; // Copy Delay
	float 	fConst271; // step: 1346
	float 	fConst272; // step: 1349
	float 	fConst273; // step: 1358
	float 	fConst274; // step: 1361
	float 	fConst275; // step: 1362
	float 	fConst276; // step: 1364
	// Recursion delay fVeeec141 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec141State[2]; // Copy Delay
	float 	fConst277; // step: 1371
	float 	fConst278; // step: 1372
	float 	fConst279; // step: 1375
	float 	fConst280; // step: 1384
	float 	fConst281; // step: 1388
	// Recursion delay fVeeec144 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec144State[2]; // Copy Delay
	float 	fConst282; // step: 1395
	float 	fConst283; // step: 1396
	float 	fConst284; // step: 1399
	float 	fConst285; // step: 1408
	float 	fConst286; // step: 1412
	// Recursion delay fVeeec147 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec147State[2]; // Copy Delay
	float 	fConst287; // step: 1419
	float 	fConst288; // step: 1420
	float 	fConst289; // step: 1423
	// Recursion delay fVeeec131 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec131State; // Mono Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst290; // step: 1443
	float 	fConst291; // step: 1444
	float 	fConst292; // step: 1448
	float 	fConst293; // step: 1452
	float 	fConst294; // step: 1456
	float 	fConst295; // step: 1460
	float 	fConst296; // step: 1464
	float 	fConst297; // step: 1468
	float 	fConst298; // step: 1472
	float 	fConst299; // step: 1476
	// Recursion delay fVeeec152 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec152State[2]; // Copy Delay
	float 	fConst300; // step: 1483
	float 	fConst301; // step: 1484
	float 	fConst302; // step: 1487
	float 	fConst303; // step: 1496
	float 	fConst304; // step: 1500
	// Recursion delay fVeeec155 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec155State[2]; // Copy Delay
	float 	fConst305; // step: 1507
	float 	fConst306; // step: 1510
	float 	fConst307; // step: 1519
	float 	fConst308; // step: 1523
	// Recursion delay fVeeec158 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec158State[2]; // Copy Delay
	float 	fConst309; // step: 1530
	float 	fConst310; // step: 1533
	float 	fConst311; // step: 1542
	float 	fConst312; // step: 1545
	float 	fConst313; // step: 1546
	float 	fConst314; // step: 1548
	// Recursion delay fVeeec161 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec161State[2]; // Copy Delay
	float 	fConst315; // step: 1555
	float 	fConst316; // step: 1556
	float 	fConst317; // step: 1559
	float 	fConst318; // step: 1568
	float 	fConst319; // step: 1572
	// Recursion delay fVeeec164 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec164State[2]; // Copy Delay
	float 	fConst320; // step: 1579
	float 	fConst321; // step: 1580
	float 	fConst322; // step: 1583
	float 	fConst323; // step: 1592
	float 	fConst324; // step: 1596
	// Recursion delay fVeeec167 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec167State[2]; // Copy Delay
	float 	fConst325; // step: 1603
	float 	fConst326; // step: 1604
	float 	fConst327; // step: 1607
	// Recursion delay fVeeec151 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec151State; // Mono Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst328; // step: 1627
	float 	fConst329; // step: 1628
	float 	fConst330; // step: 1632
	float 	fConst331; // step: 1636
	float 	fConst332; // step: 1640
	float 	fConst333; // step: 1644
	float 	fConst334; // step: 1648
	float 	fConst335; // step: 1652
	float 	fConst336; // step: 1656
	float 	fConst337; // step: 1660
	// Recursion delay fVeeec172 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec172State[2]; // Copy Delay
	float 	fConst338; // step: 1667
	float 	fConst339; // step: 1668
	float 	fConst340; // step: 1671
	float 	fConst341; // step: 1680
	float 	fConst342; // step: 1684
	// Recursion delay fVeeec175 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec175State[2]; // Copy Delay
	float 	fConst343; // step: 1691
	float 	fConst344; // step: 1694
	float 	fConst345; // step: 1703
	float 	fConst346; // step: 1707
	// Recursion delay fVeeec178 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec178State[2]; // Copy Delay
	float 	fConst347; // step: 1714
	float 	fConst348; // step: 1717
	float 	fConst349; // step: 1726
	float 	fConst350; // step: 1729
	float 	fConst351; // step: 1730
	float 	fConst352; // step: 1732
	// Recursion delay fVeeec181 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec181State[2]; // Copy Delay
	float 	fConst353; // step: 1739
	float 	fConst354; // step: 1740
	float 	fConst355; // step: 1743
	float 	fConst356; // step: 1752
	float 	fConst357; // step: 1756
	// Recursion delay fVeeec184 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec184State[2]; // Copy Delay
	float 	fConst358; // step: 1763
	float 	fConst359; // step: 1764
	float 	fConst360; // step: 1767
	float 	fConst361; // step: 1776
	float 	fConst362; // step: 1780
	// Recursion delay fVeeec187 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec187State[2]; // Copy Delay
	float 	fConst363; // step: 1787
	float 	fConst364; // step: 1788
	float 	fConst365; // step: 1791
	// Recursion delay fVeeec171 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec171State; // Mono Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst366; // step: 1811
	float 	fConst367; // step: 1812
	float 	fConst368; // step: 1816
	float 	fConst369; // step: 1820
	float 	fConst370; // step: 1824
	float 	fConst371; // step: 1828
	float 	fConst372; // step: 1832
	float 	fConst373; // step: 1836
	float 	fConst374; // step: 1840
	float 	fConst375; // step: 1844
	// Recursion delay fVeeec192 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec192State[2]; // Copy Delay
	float 	fConst376; // step: 1851
	float 	fConst377; // step: 1852
	float 	fConst378; // step: 1855
	float 	fConst379; // step: 1864
	float 	fConst380; // step: 1868
	// Recursion delay fVeeec195 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec195State[2]; // Copy Delay
	float 	fConst381; // step: 1875
	float 	fConst382; // step: 1878
	float 	fConst383; // step: 1887
	float 	fConst384; // step: 1891
	// Recursion delay fVeeec198 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec198State[2]; // Copy Delay
	float 	fConst385; // step: 1898
	float 	fConst386; // step: 1901
	float 	fConst387; // step: 1910
	float 	fConst388; // step: 1913
	float 	fConst389; // step: 1914
	float 	fConst390; // step: 1916
	// Recursion delay fVeeec201 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec201State[2]; // Copy Delay
	float 	fConst391; // step: 1923
	float 	fConst392; // step: 1924
	float 	fConst393; // step: 1927
	float 	fConst394; // step: 1936
	float 	fConst395; // step: 1940
	// Recursion delay fVeeec204 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec204State[2]; // Copy Delay
	float 	fConst396; // step: 1947
	float 	fConst397; // step: 1948
	float 	fConst398; // step: 1951
	float 	fConst399; // step: 1960
	float 	fConst400; // step: 1964
	// Recursion delay fVeeec207 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec207State[2]; // Copy Delay
	float 	fConst401; // step: 1971
	float 	fConst402; // step: 1972
	float 	fConst403; // step: 1975
	// Recursion delay fVeeec191 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec191State; // Mono Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst404; // step: 1995
	float 	fConst405; // step: 1996
	float 	fConst406; // step: 2000
	float 	fConst407; // step: 2004
	float 	fConst408; // step: 2008
	float 	fConst409; // step: 2012
	float 	fConst410; // step: 2016
	float 	fConst411; // step: 2020
	float 	fConst412; // step: 2024
	float 	fConst413; // step: 2028
	// Recursion delay fVeeec212 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec212State[2]; // Copy Delay
	float 	fConst414; // step: 2035
	float 	fConst415; // step: 2036
	float 	fConst416; // step: 2039
	float 	fConst417; // step: 2048
	float 	fConst418; // step: 2052
	// Recursion delay fVeeec215 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec215State[2]; // Copy Delay
	float 	fConst419; // step: 2059
	float 	fConst420; // step: 2062
	float 	fConst421; // step: 2071
	float 	fConst422; // step: 2075
	// Recursion delay fVeeec218 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec218State[2]; // Copy Delay
	float 	fConst423; // step: 2082
	float 	fConst424; // step: 2085
	float 	fConst425; // step: 2094
	float 	fConst426; // step: 2097
	float 	fConst427; // step: 2098
	float 	fConst428; // step: 2100
	// Recursion delay fVeeec221 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec221State[2]; // Copy Delay
	float 	fConst429; // step: 2107
	float 	fConst430; // step: 2108
	float 	fConst431; // step: 2111
	float 	fConst432; // step: 2120
	float 	fConst433; // step: 2124
	// Recursion delay fVeeec224 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec224State[2]; // Copy Delay
	float 	fConst434; // step: 2131
	float 	fConst435; // step: 2132
	float 	fConst436; // step: 2135
	float 	fConst437; // step: 2144
	float 	fConst438; // step: 2148
	// Recursion delay fVeeec227 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec227State[2]; // Copy Delay
	float 	fConst439; // step: 2155
	float 	fConst440; // step: 2156
	float 	fConst441; // step: 2159
	// Recursion delay fVeeec211 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec211State; // Mono Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst442; // step: 2179
	float 	fConst443; // step: 2180
	float 	fConst444; // step: 2184
	float 	fConst445; // step: 2188
	float 	fConst446; // step: 2192
	float 	fConst447; // step: 2196
	float 	fConst448; // step: 2200
	float 	fConst449; // step: 2204
	float 	fConst450; // step: 2208
	float 	fConst451; // step: 2212
	// Recursion delay fVeeec232 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec232State[2]; // Copy Delay
	float 	fConst452; // step: 2219
	float 	fConst453; // step: 2220
	float 	fConst454; // step: 2223
	float 	fConst455; // step: 2232
	float 	fConst456; // step: 2236
	// Recursion delay fVeeec235 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec235State[2]; // Copy Delay
	float 	fConst457; // step: 2243
	float 	fConst458; // step: 2246
	float 	fConst459; // step: 2255
	float 	fConst460; // step: 2259
	// Recursion delay fVeeec238 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec238State[2]; // Copy Delay
	float 	fConst461; // step: 2266
	float 	fConst462; // step: 2269
	float 	fConst463; // step: 2278
	float 	fConst464; // step: 2281
	float 	fConst465; // step: 2282
	float 	fConst466; // step: 2284
	// Recursion delay fVeeec241 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec241State[2]; // Copy Delay
	float 	fConst467; // step: 2291
	float 	fConst468; // step: 2292
	float 	fConst469; // step: 2295
	float 	fConst470; // step: 2304
	float 	fConst471; // step: 2308
	// Recursion delay fVeeec244 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec244State[2]; // Copy Delay
	float 	fConst472; // step: 2315
	float 	fConst473; // step: 2316
	float 	fConst474; // step: 2319
	float 	fConst475; // step: 2328
	float 	fConst476; // step: 2332
	// Recursion delay fVeeec247 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec247State[2]; // Copy Delay
	float 	fConst477; // step: 2339
	float 	fConst478; // step: 2340
	float 	fConst479; // step: 2343
	// Recursion delay fVeeec231 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec231State; // Mono Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst480; // step: 2363
	float 	fConst481; // step: 2364
	float 	fConst482; // step: 2368
	float 	fConst483; // step: 2372
	float 	fConst484; // step: 2376
	float 	fConst485; // step: 2380
	float 	fConst486; // step: 2384
	float 	fConst487; // step: 2388
	float 	fConst488; // step: 2392
	float 	fConst489; // step: 2396
	// Recursion delay fVeeec252 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec252State[2]; // Copy Delay
	float 	fConst490; // step: 2403
	float 	fConst491; // step: 2404
	float 	fConst492; // step: 2407
	float 	fConst493; // step: 2416
	float 	fConst494; // step: 2420
	// Recursion delay fVeeec255 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec255State[2]; // Copy Delay
	float 	fConst495; // step: 2427
	float 	fConst496; // step: 2430
	float 	fConst497; // step: 2439
	float 	fConst498; // step: 2443
	// Recursion delay fVeeec258 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec258State[2]; // Copy Delay
	float 	fConst499; // step: 2450
	float 	fConst500; // step: 2453
	float 	fConst501; // step: 2462
	float 	fConst502; // step: 2465
	float 	fConst503; // step: 2466
	float 	fConst504; // step: 2468
	// Recursion delay fVeeec261 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec261State[2]; // Copy Delay
	float 	fConst505; // step: 2475
	float 	fConst506; // step: 2476
	float 	fConst507; // step: 2479
	float 	fConst508; // step: 2488
	float 	fConst509; // step: 2492
	// Recursion delay fVeeec264 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec264State[2]; // Copy Delay
	float 	fConst510; // step: 2499
	float 	fConst511; // step: 2500
	float 	fConst512; // step: 2503
	float 	fConst513; // step: 2512
	float 	fConst514; // step: 2516
	// Recursion delay fVeeec267 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec267State[2]; // Copy Delay
	float 	fConst515; // step: 2523
	float 	fConst516; // step: 2524
	float 	fConst517; // step: 2527
	// Recursion delay fVeeec251 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec251State; // Mono Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst518; // step: 2547
	float 	fConst519; // step: 2548
	float 	fConst520; // step: 2552
	float 	fConst521; // step: 2556
	float 	fConst522; // step: 2560
	float 	fConst523; // step: 2564
	float 	fConst524; // step: 2568
	float 	fConst525; // step: 2572
	float 	fConst526; // step: 2576
	float 	fConst527; // step: 2580
	// Recursion delay fVeeec272 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec272State[2]; // Copy Delay
	float 	fConst528; // step: 2587
	float 	fConst529; // step: 2588
	float 	fConst530; // step: 2591
	float 	fConst531; // step: 2600
	float 	fConst532; // step: 2604
	// Recursion delay fVeeec275 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec275State[2]; // Copy Delay
	float 	fConst533; // step: 2611
	float 	fConst534; // step: 2614
	float 	fConst535; // step: 2623
	float 	fConst536; // step: 2627
	// Recursion delay fVeeec278 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec278State[2]; // Copy Delay
	float 	fConst537; // step: 2634
	float 	fConst538; // step: 2637
	float 	fConst539; // step: 2646
	float 	fConst540; // step: 2649
	float 	fConst541; // step: 2650
	float 	fConst542; // step: 2652
	// Recursion delay fVeeec281 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec281State[2]; // Copy Delay
	float 	fConst543; // step: 2659
	float 	fConst544; // step: 2660
	float 	fConst545; // step: 2663
	float 	fConst546; // step: 2672
	float 	fConst547; // step: 2676
	// Recursion delay fVeeec284 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec284State[2]; // Copy Delay
	float 	fConst548; // step: 2683
	float 	fConst549; // step: 2684
	float 	fConst550; // step: 2687
	float 	fConst551; // step: 2696
	float 	fConst552; // step: 2700
	// Recursion delay fVeeec287 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec287State[2]; // Copy Delay
	float 	fConst553; // step: 2707
	float 	fConst554; // step: 2708
	float 	fConst555; // step: 2711
	// Recursion delay fVeeec271 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec271State; // Mono Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst556; // step: 2731
	float 	fConst557; // step: 2732
	float 	fConst558; // step: 2736
	float 	fConst559; // step: 2740
	float 	fConst560; // step: 2744
	float 	fConst561; // step: 2748
	float 	fConst562; // step: 2752
	float 	fConst563; // step: 2756
	float 	fConst564; // step: 2760
	float 	fConst565; // step: 2764
	// Recursion delay fVeeec292 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec292State[2]; // Copy Delay
	float 	fConst566; // step: 2771
	float 	fConst567; // step: 2772
	float 	fConst568; // step: 2775
	float 	fConst569; // step: 2784
	float 	fConst570; // step: 2788
	// Recursion delay fVeeec295 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec295State[2]; // Copy Delay
	float 	fConst571; // step: 2795
	float 	fConst572; // step: 2798
	float 	fConst573; // step: 2807
	float 	fConst574; // step: 2811
	// Recursion delay fVeeec298 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec298State[2]; // Copy Delay
	float 	fConst575; // step: 2818
	float 	fConst576; // step: 2821
	float 	fConst577; // step: 2830
	float 	fConst578; // step: 2833
	float 	fConst579; // step: 2834
	float 	fConst580; // step: 2836
	// Recursion delay fVeeec301 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec301State[2]; // Copy Delay
	float 	fConst581; // step: 2843
	float 	fConst582; // step: 2844
	float 	fConst583; // step: 2847
	float 	fConst584; // step: 2856
	float 	fConst585; // step: 2860
	// Recursion delay fVeeec304 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec304State[2]; // Copy Delay
	float 	fConst586; // step: 2867
	float 	fConst587; // step: 2868
	float 	fConst588; // step: 2871
	float 	fConst589; // step: 2880
	float 	fConst590; // step: 2884
	// Recursion delay fVeeec307 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec307State[2]; // Copy Delay
	float 	fConst591; // step: 2891
	float 	fConst592; // step: 2892
	float 	fConst593; // step: 2895
	// Recursion delay fVeeec291 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec291State; // Mono Delay
	FAUSTFLOAT 	fbargraph15;
	float 	fConst594; // step: 2915
	float 	fConst595; // step: 2916
	float 	fConst596; // step: 2920
	float 	fConst597; // step: 2924
	float 	fConst598; // step: 2928
	float 	fConst599; // step: 2932
	float 	fConst600; // step: 2936
	float 	fConst601; // step: 2940
	float 	fConst602; // step: 2944
	float 	fConst603; // step: 2948
	// Recursion delay fVeeec312 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec312State[2]; // Copy Delay
	float 	fConst604; // step: 2955
	float 	fConst605; // step: 2956
	float 	fConst606; // step: 2959
	float 	fConst607; // step: 2968
	float 	fConst608; // step: 2972
	// Recursion delay fVeeec315 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec315State[2]; // Copy Delay
	float 	fConst609; // step: 2979
	float 	fConst610; // step: 2982
	float 	fConst611; // step: 2991
	float 	fConst612; // step: 2995
	// Recursion delay fVeeec318 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec318State[2]; // Copy Delay
	float 	fConst613; // step: 3002
	float 	fConst614; // step: 3005
	float 	fConst615; // step: 3014
	float 	fConst616; // step: 3017
	float 	fConst617; // step: 3018
	float 	fConst618; // step: 3020
	// Recursion delay fVeeec321 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec321State[2]; // Copy Delay
	float 	fConst619; // step: 3027
	float 	fConst620; // step: 3028
	float 	fConst621; // step: 3031
	float 	fConst622; // step: 3040
	float 	fConst623; // step: 3044
	// Recursion delay fVeeec324 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec324State[2]; // Copy Delay
	float 	fConst624; // step: 3051
	float 	fConst625; // step: 3052
	float 	fConst626; // step: 3055
	float 	fConst627; // step: 3064
	float 	fConst628; // step: 3068
	// Recursion delay fVeeec327 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec327State[2]; // Copy Delay
	float 	fConst629; // step: 3075
	float 	fConst630; // step: 3076
	float 	fConst631; // step: 3079
	// Recursion delay fVeeec311 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec311State; // Mono Delay
	FAUSTFLOAT 	fbargraph16;
	float 	fConst632; // step: 3099
	float 	fConst633; // step: 3100
	float 	fConst634; // step: 3104
	float 	fConst635; // step: 3108
	float 	fConst636; // step: 3112
	float 	fConst637; // step: 3116
	float 	fConst638; // step: 3120
	float 	fConst639; // step: 3124
	float 	fConst640; // step: 3128
	float 	fConst641; // step: 3132
	// Recursion delay fVeeec332 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec332State[2]; // Copy Delay
	float 	fConst642; // step: 3139
	float 	fConst643; // step: 3140
	float 	fConst644; // step: 3143
	float 	fConst645; // step: 3152
	float 	fConst646; // step: 3156
	// Recursion delay fVeeec335 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec335State[2]; // Copy Delay
	float 	fConst647; // step: 3163
	float 	fConst648; // step: 3166
	float 	fConst649; // step: 3175
	float 	fConst650; // step: 3179
	// Recursion delay fVeeec338 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec338State[2]; // Copy Delay
	float 	fConst651; // step: 3186
	float 	fConst652; // step: 3189
	float 	fConst653; // step: 3198
	float 	fConst654; // step: 3201
	float 	fConst655; // step: 3202
	float 	fConst656; // step: 3204
	// Recursion delay fVeeec341 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec341State[2]; // Copy Delay
	float 	fConst657; // step: 3211
	float 	fConst658; // step: 3212
	float 	fConst659; // step: 3215
	float 	fConst660; // step: 3224
	float 	fConst661; // step: 3228
	// Recursion delay fVeeec344 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec344State[2]; // Copy Delay
	float 	fConst662; // step: 3235
	float 	fConst663; // step: 3236
	float 	fConst664; // step: 3239
	float 	fConst665; // step: 3248
	float 	fConst666; // step: 3252
	// Recursion delay fVeeec347 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec347State[2]; // Copy Delay
	float 	fConst667; // step: 3259
	float 	fConst668; // step: 3260
	float 	fConst669; // step: 3263
	// Recursion delay fVeeec331 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec331State; // Mono Delay
	FAUSTFLOAT 	fbargraph17;
	float 	fConst670; // step: 3283
	float 	fConst671; // step: 3284
	float 	fConst672; // step: 3288
	float 	fConst673; // step: 3292
	float 	fConst674; // step: 3296
	float 	fConst675; // step: 3300
	float 	fConst676; // step: 3304
	float 	fConst677; // step: 3308
	float 	fConst678; // step: 3312
	float 	fConst679; // step: 3316
	// Recursion delay fVeeec352 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec352State[2]; // Copy Delay
	float 	fConst680; // step: 3323
	float 	fConst681; // step: 3324
	float 	fConst682; // step: 3327
	float 	fConst683; // step: 3336
	float 	fConst684; // step: 3340
	// Recursion delay fVeeec355 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec355State[2]; // Copy Delay
	float 	fConst685; // step: 3347
	float 	fConst686; // step: 3350
	float 	fConst687; // step: 3359
	float 	fConst688; // step: 3363
	// Recursion delay fVeeec358 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec358State[2]; // Copy Delay
	float 	fConst689; // step: 3370
	float 	fConst690; // step: 3373
	float 	fConst691; // step: 3382
	float 	fConst692; // step: 3385
	float 	fConst693; // step: 3386
	float 	fConst694; // step: 3388
	// Recursion delay fVeeec361 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec361State[2]; // Copy Delay
	float 	fConst695; // step: 3395
	float 	fConst696; // step: 3396
	float 	fConst697; // step: 3399
	float 	fConst698; // step: 3408
	float 	fConst699; // step: 3412
	// Recursion delay fVeeec364 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec364State[2]; // Copy Delay
	float 	fConst700; // step: 3419
	float 	fConst701; // step: 3420
	float 	fConst702; // step: 3423
	float 	fConst703; // step: 3432
	float 	fConst704; // step: 3436
	// Recursion delay fVeeec367 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec367State[2]; // Copy Delay
	float 	fConst705; // step: 3443
	float 	fConst706; // step: 3444
	float 	fConst707; // step: 3447
	// Recursion delay fVeeec351 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec351State; // Mono Delay
	FAUSTFLOAT 	fbargraph18;
	float 	fConst708; // step: 3467
	float 	fConst709; // step: 3468
	float 	fConst710; // step: 3472
	float 	fConst711; // step: 3476
	float 	fConst712; // step: 3480
	float 	fConst713; // step: 3484
	float 	fConst714; // step: 3488
	float 	fConst715; // step: 3492
	float 	fConst716; // step: 3496
	float 	fConst717; // step: 3500
	// Recursion delay fVeeec372 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec372State[2]; // Copy Delay
	float 	fConst718; // step: 3507
	float 	fConst719; // step: 3508
	float 	fConst720; // step: 3511
	float 	fConst721; // step: 3520
	float 	fConst722; // step: 3524
	// Recursion delay fVeeec375 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec375State[2]; // Copy Delay
	float 	fConst723; // step: 3531
	float 	fConst724; // step: 3534
	float 	fConst725; // step: 3543
	float 	fConst726; // step: 3547
	// Recursion delay fVeeec378 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec378State[2]; // Copy Delay
	float 	fConst727; // step: 3554
	float 	fConst728; // step: 3557
	float 	fConst729; // step: 3566
	float 	fConst730; // step: 3569
	float 	fConst731; // step: 3570
	float 	fConst732; // step: 3572
	// Recursion delay fVeeec381 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec381State[2]; // Copy Delay
	float 	fConst733; // step: 3579
	float 	fConst734; // step: 3580
	float 	fConst735; // step: 3583
	float 	fConst736; // step: 3592
	float 	fConst737; // step: 3596
	// Recursion delay fVeeec384 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec384State[2]; // Copy Delay
	float 	fConst738; // step: 3603
	float 	fConst739; // step: 3604
	float 	fConst740; // step: 3607
	float 	fConst741; // step: 3616
	float 	fConst742; // step: 3620
	// Recursion delay fVeeec387 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec387State[2]; // Copy Delay
	float 	fConst743; // step: 3627
	float 	fConst744; // step: 3628
	float 	fConst745; // step: 3631
	// Recursion delay fVeeec371 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec371State; // Mono Delay
	FAUSTFLOAT 	fbargraph19;
	float 	fConst746; // step: 3651
	float 	fConst747; // step: 3652
	float 	fConst748; // step: 3656
	float 	fConst749; // step: 3660
	float 	fConst750; // step: 3664
	float 	fConst751; // step: 3668
	float 	fConst752; // step: 3672
	float 	fConst753; // step: 3676
	float 	fConst754; // step: 3680
	float 	fConst755; // step: 3684
	// Recursion delay fVeeec392 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec392State[2]; // Copy Delay
	float 	fConst756; // step: 3691
	float 	fConst757; // step: 3692
	float 	fConst758; // step: 3695
	float 	fConst759; // step: 3704
	float 	fConst760; // step: 3708
	// Recursion delay fVeeec395 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec395State[2]; // Copy Delay
	float 	fConst761; // step: 3715
	float 	fConst762; // step: 3718
	float 	fConst763; // step: 3727
	float 	fConst764; // step: 3731
	// Recursion delay fVeeec398 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec398State[2]; // Copy Delay
	float 	fConst765; // step: 3738
	float 	fConst766; // step: 3741
	float 	fConst767; // step: 3750
	float 	fConst768; // step: 3753
	float 	fConst769; // step: 3754
	float 	fConst770; // step: 3756
	// Recursion delay fVeeec401 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec401State[2]; // Copy Delay
	float 	fConst771; // step: 3763
	float 	fConst772; // step: 3764
	float 	fConst773; // step: 3767
	float 	fConst774; // step: 3776
	float 	fConst775; // step: 3780
	// Recursion delay fVeeec404 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec404State[2]; // Copy Delay
	float 	fConst776; // step: 3787
	float 	fConst777; // step: 3788
	float 	fConst778; // step: 3791
	float 	fConst779; // step: 3800
	float 	fConst780; // step: 3804
	// Recursion delay fVeeec407 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec407State[2]; // Copy Delay
	float 	fConst781; // step: 3811
	float 	fConst782; // step: 3812
	float 	fConst783; // step: 3815
	// Recursion delay fVeeec391 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec391State; // Mono Delay
	FAUSTFLOAT 	fbargraph20;
	float 	fConst784; // step: 3835
	float 	fConst785; // step: 3836
	float 	fConst786; // step: 3840
	float 	fConst787; // step: 3844
	float 	fConst788; // step: 3848
	float 	fConst789; // step: 3852
	float 	fConst790; // step: 3856
	float 	fConst791; // step: 3860
	float 	fConst792; // step: 3864
	float 	fConst793; // step: 3868
	// Recursion delay fVeeec412 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec412State[2]; // Copy Delay
	float 	fConst794; // step: 3875
	float 	fConst795; // step: 3876
	float 	fConst796; // step: 3879
	float 	fConst797; // step: 3888
	float 	fConst798; // step: 3892
	// Recursion delay fVeeec415 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec415State[2]; // Copy Delay
	float 	fConst799; // step: 3899
	float 	fConst800; // step: 3902
	float 	fConst801; // step: 3911
	float 	fConst802; // step: 3915
	// Recursion delay fVeeec418 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec418State[2]; // Copy Delay
	float 	fConst803; // step: 3922
	float 	fConst804; // step: 3925
	float 	fConst805; // step: 3934
	float 	fConst806; // step: 3937
	float 	fConst807; // step: 3938
	float 	fConst808; // step: 3940
	// Recursion delay fVeeec421 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec421State[2]; // Copy Delay
	float 	fConst809; // step: 3947
	float 	fConst810; // step: 3948
	float 	fConst811; // step: 3951
	float 	fConst812; // step: 3960
	float 	fConst813; // step: 3964
	// Recursion delay fVeeec424 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec424State[2]; // Copy Delay
	float 	fConst814; // step: 3971
	float 	fConst815; // step: 3972
	float 	fConst816; // step: 3975
	float 	fConst817; // step: 3984
	float 	fConst818; // step: 3988
	// Recursion delay fVeeec427 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec427State[2]; // Copy Delay
	float 	fConst819; // step: 3995
	float 	fConst820; // step: 3996
	float 	fConst821; // step: 3999
	// Recursion delay fVeeec411 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec411State; // Mono Delay
	FAUSTFLOAT 	fbargraph21;
	float 	fConst822; // step: 4019
	float 	fConst823; // step: 4020
	float 	fConst824; // step: 4024
	float 	fConst825; // step: 4028
	float 	fConst826; // step: 4032
	float 	fConst827; // step: 4036
	float 	fConst828; // step: 4040
	float 	fConst829; // step: 4044
	float 	fConst830; // step: 4048
	float 	fConst831; // step: 4052
	// Recursion delay fVeeec432 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec432State[2]; // Copy Delay
	float 	fConst832; // step: 4059
	float 	fConst833; // step: 4060
	float 	fConst834; // step: 4063
	float 	fConst835; // step: 4072
	float 	fConst836; // step: 4076
	// Recursion delay fVeeec435 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec435State[2]; // Copy Delay
	float 	fConst837; // step: 4083
	float 	fConst838; // step: 4086
	float 	fConst839; // step: 4095
	float 	fConst840; // step: 4099
	// Recursion delay fVeeec438 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec438State[2]; // Copy Delay
	float 	fConst841; // step: 4106
	float 	fConst842; // step: 4109
	float 	fConst843; // step: 4118
	float 	fConst844; // step: 4121
	float 	fConst845; // step: 4122
	float 	fConst846; // step: 4124
	// Recursion delay fVeeec441 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec441State[2]; // Copy Delay
	float 	fConst847; // step: 4131
	float 	fConst848; // step: 4132
	float 	fConst849; // step: 4135
	float 	fConst850; // step: 4144
	float 	fConst851; // step: 4148
	// Recursion delay fVeeec444 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec444State[2]; // Copy Delay
	float 	fConst852; // step: 4155
	float 	fConst853; // step: 4156
	float 	fConst854; // step: 4159
	float 	fConst855; // step: 4168
	float 	fConst856; // step: 4172
	// Recursion delay fVeeec447 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec447State[2]; // Copy Delay
	float 	fConst857; // step: 4179
	float 	fConst858; // step: 4180
	float 	fConst859; // step: 4183
	// Recursion delay fVeeec431 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec431State; // Mono Delay
	FAUSTFLOAT 	fbargraph22;
	float 	fConst860; // step: 4203
	float 	fConst861; // step: 4204
	float 	fConst862; // step: 4208
	float 	fConst863; // step: 4212
	float 	fConst864; // step: 4216
	float 	fConst865; // step: 4220
	float 	fConst866; // step: 4224
	float 	fConst867; // step: 4228
	float 	fConst868; // step: 4232
	float 	fConst869; // step: 4236
	// Recursion delay fVeeec452 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec452State[2]; // Copy Delay
	float 	fConst870; // step: 4243
	float 	fConst871; // step: 4244
	float 	fConst872; // step: 4247
	float 	fConst873; // step: 4256
	float 	fConst874; // step: 4260
	// Recursion delay fVeeec455 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec455State[2]; // Copy Delay
	float 	fConst875; // step: 4267
	float 	fConst876; // step: 4270
	float 	fConst877; // step: 4279
	float 	fConst878; // step: 4283
	// Recursion delay fVeeec458 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec458State[2]; // Copy Delay
	float 	fConst879; // step: 4290
	float 	fConst880; // step: 4293
	float 	fConst881; // step: 4302
	float 	fConst882; // step: 4305
	float 	fConst883; // step: 4306
	float 	fConst884; // step: 4308
	// Recursion delay fVeeec461 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec461State[2]; // Copy Delay
	float 	fConst885; // step: 4315
	float 	fConst886; // step: 4316
	float 	fConst887; // step: 4319
	float 	fConst888; // step: 4328
	float 	fConst889; // step: 4332
	// Recursion delay fVeeec464 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec464State[2]; // Copy Delay
	float 	fConst890; // step: 4339
	float 	fConst891; // step: 4340
	float 	fConst892; // step: 4343
	float 	fConst893; // step: 4352
	float 	fConst894; // step: 4356
	// Recursion delay fVeeec467 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec467State[2]; // Copy Delay
	float 	fConst895; // step: 4363
	float 	fConst896; // step: 4364
	float 	fConst897; // step: 4367
	// Recursion delay fVeeec451 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec451State; // Mono Delay
	FAUSTFLOAT 	fbargraph23;
	float 	fConst898; // step: 4387
	float 	fConst899; // step: 4388
	float 	fConst900; // step: 4392
	float 	fConst901; // step: 4396
	float 	fConst902; // step: 4400
	float 	fConst903; // step: 4404
	float 	fConst904; // step: 4408
	float 	fConst905; // step: 4412
	float 	fConst906; // step: 4416
	float 	fConst907; // step: 4420
	// Recursion delay fVeeec472 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec472State[2]; // Copy Delay
	float 	fConst908; // step: 4427
	float 	fConst909; // step: 4428
	float 	fConst910; // step: 4431
	float 	fConst911; // step: 4440
	float 	fConst912; // step: 4444
	// Recursion delay fVeeec475 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec475State[2]; // Copy Delay
	float 	fConst913; // step: 4451
	float 	fConst914; // step: 4454
	float 	fConst915; // step: 4463
	float 	fConst916; // step: 4467
	// Recursion delay fVeeec478 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec478State[2]; // Copy Delay
	float 	fConst917; // step: 4474
	float 	fConst918; // step: 4477
	float 	fConst919; // step: 4486
	float 	fConst920; // step: 4489
	float 	fConst921; // step: 4490
	float 	fConst922; // step: 4492
	// Recursion delay fVeeec481 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec481State[2]; // Copy Delay
	float 	fConst923; // step: 4499
	float 	fConst924; // step: 4500
	float 	fConst925; // step: 4503
	float 	fConst926; // step: 4512
	float 	fConst927; // step: 4516
	// Recursion delay fVeeec484 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec484State[2]; // Copy Delay
	float 	fConst928; // step: 4523
	float 	fConst929; // step: 4524
	float 	fConst930; // step: 4527
	float 	fConst931; // step: 4536
	float 	fConst932; // step: 4540
	// Recursion delay fVeeec487 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec487State[2]; // Copy Delay
	float 	fConst933; // step: 4547
	float 	fConst934; // step: 4548
	float 	fConst935; // step: 4551
	// Recursion delay fVeeec471 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec471State; // Mono Delay
	FAUSTFLOAT 	fbargraph24;
	float 	fConst936; // step: 4571
	float 	fConst937; // step: 4572
	float 	fConst938; // step: 4576
	float 	fConst939; // step: 4580
	float 	fConst940; // step: 4584
	float 	fConst941; // step: 4588
	float 	fConst942; // step: 4592
	float 	fConst943; // step: 4596
	float 	fConst944; // step: 4600
	float 	fConst945; // step: 4604
	// Recursion delay fVeeec492 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec492State[2]; // Copy Delay
	float 	fConst946; // step: 4611
	float 	fConst947; // step: 4612
	float 	fConst948; // step: 4615
	float 	fConst949; // step: 4624
	float 	fConst950; // step: 4628
	// Recursion delay fVeeec495 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec495State[2]; // Copy Delay
	float 	fConst951; // step: 4635
	float 	fConst952; // step: 4638
	float 	fConst953; // step: 4647
	float 	fConst954; // step: 4651
	// Recursion delay fVeeec498 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec498State[2]; // Copy Delay
	float 	fConst955; // step: 4658
	float 	fConst956; // step: 4661
	float 	fConst957; // step: 4670
	float 	fConst958; // step: 4673
	float 	fConst959; // step: 4674
	float 	fConst960; // step: 4676
	// Recursion delay fVeeec501 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec501State[2]; // Copy Delay
	float 	fConst961; // step: 4683
	float 	fConst962; // step: 4684
	float 	fConst963; // step: 4687
	float 	fConst964; // step: 4696
	float 	fConst965; // step: 4700
	// Recursion delay fVeeec504 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec504State[2]; // Copy Delay
	float 	fConst966; // step: 4707
	float 	fConst967; // step: 4708
	float 	fConst968; // step: 4711
	float 	fConst969; // step: 4720
	float 	fConst970; // step: 4724
	// Recursion delay fVeeec507 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec507State[2]; // Copy Delay
	float 	fConst971; // step: 4731
	float 	fConst972; // step: 4732
	float 	fConst973; // step: 4735
	// Recursion delay fVeeec491 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec491State; // Mono Delay
	FAUSTFLOAT 	fbargraph25;
	float 	fConst974; // step: 4755
	float 	fConst975; // step: 4756
	float 	fConst976; // step: 4760
	float 	fConst977; // step: 4764
	float 	fConst978; // step: 4768
	float 	fConst979; // step: 4772
	float 	fConst980; // step: 4776
	float 	fConst981; // step: 4780
	float 	fConst982; // step: 4784
	float 	fConst983; // step: 4788
	// Recursion delay fVeeec512 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec512State[2]; // Copy Delay
	float 	fConst984; // step: 4795
	float 	fConst985; // step: 4796
	float 	fConst986; // step: 4799
	float 	fConst987; // step: 4808
	float 	fConst988; // step: 4812
	// Recursion delay fVeeec515 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec515State[2]; // Copy Delay
	float 	fConst989; // step: 4819
	float 	fConst990; // step: 4822
	float 	fConst991; // step: 4831
	float 	fConst992; // step: 4835
	// Recursion delay fVeeec518 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec518State[2]; // Copy Delay
	float 	fConst993; // step: 4842
	float 	fConst994; // step: 4845
	float 	fConst995; // step: 4854
	float 	fConst996; // step: 4857
	float 	fConst997; // step: 4858
	float 	fConst998; // step: 4860
	// Recursion delay fVeeec521 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec521State[2]; // Copy Delay
	float 	fConst999; // step: 4867
	float 	fConst1000; // step: 4868
	float 	fConst1001; // step: 4871
	float 	fConst1002; // step: 4880
	float 	fConst1003; // step: 4884
	// Recursion delay fVeeec524 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec524State[2]; // Copy Delay
	float 	fConst1004; // step: 4891
	float 	fConst1005; // step: 4892
	float 	fConst1006; // step: 4895
	float 	fConst1007; // step: 4904
	float 	fConst1008; // step: 4908
	// Recursion delay fVeeec527 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec527State[2]; // Copy Delay
	float 	fConst1009; // step: 4915
	float 	fConst1010; // step: 4916
	float 	fConst1011; // step: 4919
	// Recursion delay fVeeec511 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec511State; // Mono Delay
	FAUSTFLOAT 	fbargraph26;
	float 	fConst1012; // step: 4939
	float 	fConst1013; // step: 4940
	float 	fConst1014; // step: 4944
	float 	fConst1015; // step: 4948
	float 	fConst1016; // step: 4952
	float 	fConst1017; // step: 4956
	float 	fConst1018; // step: 4960
	float 	fConst1019; // step: 4964
	float 	fConst1020; // step: 4968
	float 	fConst1021; // step: 4972
	// Recursion delay fVeeec532 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec532State[2]; // Copy Delay
	float 	fConst1022; // step: 4979
	float 	fConst1023; // step: 4980
	float 	fConst1024; // step: 4983
	float 	fConst1025; // step: 4992
	float 	fConst1026; // step: 4996
	// Recursion delay fVeeec535 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec535State[2]; // Copy Delay
	float 	fConst1027; // step: 5003
	float 	fConst1028; // step: 5006
	float 	fConst1029; // step: 5015
	float 	fConst1030; // step: 5019
	// Recursion delay fVeeec538 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec538State[2]; // Copy Delay
	float 	fConst1031; // step: 5026
	float 	fConst1032; // step: 5029
	float 	fConst1033; // step: 5038
	float 	fConst1034; // step: 5041
	float 	fConst1035; // step: 5042
	float 	fConst1036; // step: 5044
	// Recursion delay fVeeec541 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec541State[2]; // Copy Delay
	float 	fConst1037; // step: 5051
	float 	fConst1038; // step: 5052
	float 	fConst1039; // step: 5055
	float 	fConst1040; // step: 5064
	float 	fConst1041; // step: 5068
	// Recursion delay fVeeec544 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec544State[2]; // Copy Delay
	float 	fConst1042; // step: 5075
	float 	fConst1043; // step: 5076
	float 	fConst1044; // step: 5079
	float 	fConst1045; // step: 5088
	float 	fConst1046; // step: 5092
	// Recursion delay fVeeec547 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec547State[2]; // Copy Delay
	float 	fConst1047; // step: 5099
	float 	fConst1048; // step: 5100
	float 	fConst1049; // step: 5103
	// Recursion delay fVeeec531 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec531State; // Mono Delay
	FAUSTFLOAT 	fbargraph27;
	float 	fConst1050; // step: 5123
	float 	fConst1051; // step: 5124
	float 	fConst1052; // step: 5128
	float 	fConst1053; // step: 5132
	float 	fConst1054; // step: 5136
	float 	fConst1055; // step: 5140
	float 	fConst1056; // step: 5144
	float 	fConst1057; // step: 5148
	float 	fConst1058; // step: 5152
	float 	fConst1059; // step: 5156
	// Recursion delay fVeeec552 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec552State[2]; // Copy Delay
	float 	fConst1060; // step: 5163
	float 	fConst1061; // step: 5164
	float 	fConst1062; // step: 5167
	float 	fConst1063; // step: 5176
	float 	fConst1064; // step: 5180
	// Recursion delay fVeeec555 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec555State[2]; // Copy Delay
	float 	fConst1065; // step: 5187
	float 	fConst1066; // step: 5190
	float 	fConst1067; // step: 5199
	float 	fConst1068; // step: 5203
	// Recursion delay fVeeec558 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec558State[2]; // Copy Delay
	float 	fConst1069; // step: 5210
	float 	fConst1070; // step: 5213
	float 	fConst1071; // step: 5222
	float 	fConst1072; // step: 5225
	float 	fConst1073; // step: 5226
	float 	fConst1074; // step: 5228
	// Recursion delay fVeeec561 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec561State[2]; // Copy Delay
	float 	fConst1075; // step: 5235
	float 	fConst1076; // step: 5236
	float 	fConst1077; // step: 5239
	float 	fConst1078; // step: 5248
	float 	fConst1079; // step: 5252
	// Recursion delay fVeeec564 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec564State[2]; // Copy Delay
	float 	fConst1080; // step: 5259
	float 	fConst1081; // step: 5260
	float 	fConst1082; // step: 5263
	float 	fConst1083; // step: 5272
	float 	fConst1084; // step: 5276
	// Recursion delay fVeeec567 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec567State[2]; // Copy Delay
	float 	fConst1085; // step: 5283
	float 	fConst1086; // step: 5284
	float 	fConst1087; // step: 5287
	// Recursion delay fVeeec551 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec551State; // Mono Delay
	FAUSTFLOAT 	fbargraph28;
	float 	fConst1088; // step: 5308
	float 	fConst1089; // step: 5312
	float 	fConst1090; // step: 5316
	float 	fConst1091; // step: 5320
	float 	fConst1092; // step: 5324
	// Recursion delay fVeeec572 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec572State[2]; // Copy Delay
	float 	fConst1093; // step: 5331
	float 	fConst1094; // step: 5332
	float 	fConst1095; // step: 5335
	float 	fConst1096; // step: 5344
	float 	fConst1097; // step: 5348
	// Recursion delay fVeeec575 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec575State[2]; // Copy Delay
	float 	fConst1098; // step: 5355
	float 	fConst1099; // step: 5358
	float 	fConst1100; // step: 5367
	float 	fConst1101; // step: 5371
	// Recursion delay fVeeec578 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec578State[2]; // Copy Delay
	float 	fConst1102; // step: 5378
	float 	fConst1103; // step: 5381
	// Recursion delay fVeeec571 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec571State; // Mono Delay
	FAUSTFLOAT 	fbargraph29;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("filename", "spectral_level.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "spectral_level");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = min(1.92e+05f, max(1.0f, float(fSampleRate))); // step: 16
		fConst1 = (1e+03f / fConst0); // step: 17
		fConst2 = tanf((50265.484f / fConst0)); // step: 26
		fConst3 = (1.0f / fConst2); // step: 28
		fConst4 = (1.0f / (((fConst3 + 0.15748216f) / fConst2) + 0.9351402f)); // step: 32
		fConst5 = (1.0f / (((fConst3 + 0.74313045f) / fConst2) + 1.4500711f)); // step: 38
		fConst6 = (1.0f / (((fConst3 + 3.1897273f) / fConst2) + 4.0767817f)); // step: 44
		fConst7 = (((fConst3 + -3.1897273f) / fConst2) + 4.0767817f); // step: 50
		fConst8 = powf(fConst2,2.0f); // step: 54
		fConst9 = (1.0f / fConst8); // step: 55
		fConst10 = (2.0f * (4.0767817f - fConst9)); // step: 57
		fConst11 = (0.0017661728f / fConst8); // step: 66
		fConst12 = (fConst11 + 0.0004076782f); // step: 67
		fConst13 = (2.0f * (0.0004076782f - fConst11)); // step: 70
		fConst14 = (((fConst3 + -0.74313045f) / fConst2) + 1.4500711f); // step: 80
		fConst15 = (2.0f * (1.4500711f - fConst9)); // step: 84
		fConst16 = (11.0520525f / fConst8); // step: 92
		fConst17 = (fConst16 + 1.4500711f); // step: 93
		fConst18 = (2.0f * (1.4500711f - fConst16)); // step: 96
		fConst19 = (((fConst3 + -0.15748216f) / fConst2) + 0.9351402f); // step: 106
		fConst20 = (2.0f * (0.9351402f - fConst9)); // step: 110
		fConst21 = (50.06381f / fConst8); // step: 118
		fConst22 = (fConst21 + 0.9351402f); // step: 119
		fConst23 = (2.0f * (0.9351402f - fConst21)); // step: 122
		fConst24 = tanf((39895.74f / fConst0)); // step: 142
		fConst25 = (1.0f / fConst24); // step: 143
		fConst26 = (1.0f / (((fConst25 + 0.15748216f) / fConst24) + 0.9351402f)); // step: 147
		fConst27 = (1.0f / (((fConst25 + 0.74313045f) / fConst24) + 1.4500711f)); // step: 151
		fConst28 = (1.0f / (((fConst25 + 3.1897273f) / fConst24) + 4.0767817f)); // step: 155
		fConst29 = (1.0f / (((fConst3 + 0.16840488f) / fConst2) + 1.0693583f)); // step: 161
		fConst30 = (1.0f / (((fConst3 + 0.51247865f) / fConst2) + 0.6896214f)); // step: 167
		fConst31 = (1.0f / (((fConst3 + 0.78241307f) / fConst2) + 0.2452915f)); // step: 173
		fConst32 = (((fConst3 + -0.78241307f) / fConst2) + 0.2452915f); // step: 178
		fConst33 = (2.0f * (0.2452915f - fConst9)); // step: 182
		fConst34 = (0.0001f / fConst8); // step: 191
		fConst35 = (fConst34 + 0.0004332272f); // step: 192
		fConst36 = (2.0f * (0.0004332272f - fConst34)); // step: 195
		fConst37 = (((fConst3 + -0.51247865f) / fConst2) + 0.6896214f); // step: 205
		fConst38 = (2.0f * (0.6896214f - fConst9)); // step: 209
		fConst39 = (fConst9 + 7.6217313f); // step: 217
		fConst40 = (2.0f * (7.6217313f - fConst9)); // step: 220
		fConst41 = (((fConst3 + -0.16840488f) / fConst2) + 1.0693583f); // step: 230
		fConst42 = (2.0f * (1.0693583f - fConst9)); // step: 234
		fConst43 = (fConst9 + 53.53615f); // step: 242
		fConst44 = (2.0f * (53.53615f - fConst9)); // step: 245
		fConst45 = (((fConst25 + -3.1897273f) / fConst24) + 4.0767817f); // step: 254
		fConst46 = powf(fConst24,2.0f); // step: 257
		fConst47 = (1.0f / fConst46); // step: 258
		fConst48 = (2.0f * (4.0767817f - fConst47)); // step: 260
		fConst49 = (0.0017661728f / fConst46); // step: 267
		fConst50 = (fConst49 + 0.0004076782f); // step: 268
		fConst51 = (2.0f * (0.0004076782f - fConst49)); // step: 271
		fConst52 = (((fConst25 + -0.74313045f) / fConst24) + 1.4500711f); // step: 280
		fConst53 = (2.0f * (1.4500711f - fConst47)); // step: 284
		fConst54 = (11.0520525f / fConst46); // step: 291
		fConst55 = (fConst54 + 1.4500711f); // step: 292
		fConst56 = (2.0f * (1.4500711f - fConst54)); // step: 295
		fConst57 = (((fConst25 + -0.15748216f) / fConst24) + 0.9351402f); // step: 304
		fConst58 = (2.0f * (0.9351402f - fConst47)); // step: 308
		fConst59 = (50.06381f / fConst46); // step: 315
		fConst60 = (fConst59 + 0.9351402f); // step: 316
		fConst61 = (2.0f * (0.9351402f - fConst59)); // step: 319
		fConst62 = tanf((31665.27f / fConst0)); // step: 339
		fConst63 = (1.0f / fConst62); // step: 340
		fConst64 = (1.0f / (((fConst63 + 0.15748216f) / fConst62) + 0.9351402f)); // step: 344
		fConst65 = (1.0f / (((fConst63 + 0.74313045f) / fConst62) + 1.4500711f)); // step: 348
		fConst66 = (1.0f / (((fConst63 + 3.1897273f) / fConst62) + 4.0767817f)); // step: 352
		fConst67 = (1.0f / (((fConst25 + 0.16840488f) / fConst24) + 1.0693583f)); // step: 356
		fConst68 = (1.0f / (((fConst25 + 0.51247865f) / fConst24) + 0.6896214f)); // step: 360
		fConst69 = (1.0f / (((fConst25 + 0.78241307f) / fConst24) + 0.2452915f)); // step: 364
		fConst70 = (((fConst25 + -0.78241307f) / fConst24) + 0.2452915f); // step: 368
		fConst71 = (2.0f * (0.2452915f - fConst47)); // step: 372
		fConst72 = (0.0001f / fConst46); // step: 379
		fConst73 = (fConst72 + 0.0004332272f); // step: 380
		fConst74 = (2.0f * (0.0004332272f - fConst72)); // step: 383
		fConst75 = (((fConst25 + -0.51247865f) / fConst24) + 0.6896214f); // step: 392
		fConst76 = (2.0f * (0.6896214f - fConst47)); // step: 396
		fConst77 = (fConst47 + 7.6217313f); // step: 403
		fConst78 = (2.0f * (7.6217313f - fConst47)); // step: 406
		fConst79 = (((fConst25 + -0.16840488f) / fConst24) + 1.0693583f); // step: 415
		fConst80 = (2.0f * (1.0693583f - fConst47)); // step: 419
		fConst81 = (fConst47 + 53.53615f); // step: 426
		fConst82 = (2.0f * (53.53615f - fConst47)); // step: 429
		fConst83 = (((fConst63 + -3.1897273f) / fConst62) + 4.0767817f); // step: 438
		fConst84 = powf(fConst62,2.0f); // step: 441
		fConst85 = (1.0f / fConst84); // step: 442
		fConst86 = (2.0f * (4.0767817f - fConst85)); // step: 444
		fConst87 = (0.0017661728f / fConst84); // step: 451
		fConst88 = (fConst87 + 0.0004076782f); // step: 452
		fConst89 = (2.0f * (0.0004076782f - fConst87)); // step: 455
		fConst90 = (((fConst63 + -0.74313045f) / fConst62) + 1.4500711f); // step: 464
		fConst91 = (2.0f * (1.4500711f - fConst85)); // step: 468
		fConst92 = (11.0520525f / fConst84); // step: 475
		fConst93 = (fConst92 + 1.4500711f); // step: 476
		fConst94 = (2.0f * (1.4500711f - fConst92)); // step: 479
		fConst95 = (((fConst63 + -0.15748216f) / fConst62) + 0.9351402f); // step: 488
		fConst96 = (2.0f * (0.9351402f - fConst85)); // step: 492
		fConst97 = (50.06381f / fConst84); // step: 499
		fConst98 = (fConst97 + 0.9351402f); // step: 500
		fConst99 = (2.0f * (0.9351402f - fConst97)); // step: 503
		fConst100 = tanf((25132.742f / fConst0)); // step: 523
		fConst101 = (1.0f / fConst100); // step: 524
		fConst102 = (1.0f / (((fConst101 + 0.15748216f) / fConst100) + 0.9351402f)); // step: 528
		fConst103 = (1.0f / (((fConst101 + 0.74313045f) / fConst100) + 1.4500711f)); // step: 532
		fConst104 = (1.0f / (((fConst101 + 3.1897273f) / fConst100) + 4.0767817f)); // step: 536
		fConst105 = (1.0f / (((fConst63 + 0.16840488f) / fConst62) + 1.0693583f)); // step: 540
		fConst106 = (1.0f / (((fConst63 + 0.51247865f) / fConst62) + 0.6896214f)); // step: 544
		fConst107 = (1.0f / (((fConst63 + 0.78241307f) / fConst62) + 0.2452915f)); // step: 548
		fConst108 = (((fConst63 + -0.78241307f) / fConst62) + 0.2452915f); // step: 552
		fConst109 = (2.0f * (0.2452915f - fConst85)); // step: 556
		fConst110 = (0.0001f / fConst84); // step: 563
		fConst111 = (fConst110 + 0.0004332272f); // step: 564
		fConst112 = (2.0f * (0.0004332272f - fConst110)); // step: 567
		fConst113 = (((fConst63 + -0.51247865f) / fConst62) + 0.6896214f); // step: 576
		fConst114 = (2.0f * (0.6896214f - fConst85)); // step: 580
		fConst115 = (fConst85 + 7.6217313f); // step: 587
		fConst116 = (2.0f * (7.6217313f - fConst85)); // step: 590
		fConst117 = (((fConst63 + -0.16840488f) / fConst62) + 1.0693583f); // step: 599
		fConst118 = (2.0f * (1.0693583f - fConst85)); // step: 603
		fConst119 = (fConst85 + 53.53615f); // step: 610
		fConst120 = (2.0f * (53.53615f - fConst85)); // step: 613
		fConst121 = (((fConst101 + -3.1897273f) / fConst100) + 4.0767817f); // step: 622
		fConst122 = powf(fConst100,2.0f); // step: 625
		fConst123 = (1.0f / fConst122); // step: 626
		fConst124 = (2.0f * (4.0767817f - fConst123)); // step: 628
		fConst125 = (0.0017661728f / fConst122); // step: 635
		fConst126 = (fConst125 + 0.0004076782f); // step: 636
		fConst127 = (2.0f * (0.0004076782f - fConst125)); // step: 639
		fConst128 = (((fConst101 + -0.74313045f) / fConst100) + 1.4500711f); // step: 648
		fConst129 = (2.0f * (1.4500711f - fConst123)); // step: 652
		fConst130 = (11.0520525f / fConst122); // step: 659
		fConst131 = (fConst130 + 1.4500711f); // step: 660
		fConst132 = (2.0f * (1.4500711f - fConst130)); // step: 663
		fConst133 = (((fConst101 + -0.15748216f) / fConst100) + 0.9351402f); // step: 672
		fConst134 = (2.0f * (0.9351402f - fConst123)); // step: 676
		fConst135 = (50.06381f / fConst122); // step: 683
		fConst136 = (fConst135 + 0.9351402f); // step: 684
		fConst137 = (2.0f * (0.9351402f - fConst135)); // step: 687
		fConst138 = tanf((19947.87f / fConst0)); // step: 707
		fConst139 = (1.0f / fConst138); // step: 708
		fConst140 = (1.0f / (((fConst139 + 0.15748216f) / fConst138) + 0.9351402f)); // step: 712
		fConst141 = (1.0f / (((fConst139 + 0.74313045f) / fConst138) + 1.4500711f)); // step: 716
		fConst142 = (1.0f / (((fConst139 + 3.1897273f) / fConst138) + 4.0767817f)); // step: 720
		fConst143 = (1.0f / (((fConst101 + 0.16840488f) / fConst100) + 1.0693583f)); // step: 724
		fConst144 = (1.0f / (((fConst101 + 0.51247865f) / fConst100) + 0.6896214f)); // step: 728
		fConst145 = (1.0f / (((fConst101 + 0.78241307f) / fConst100) + 0.2452915f)); // step: 732
		fConst146 = (((fConst101 + -0.78241307f) / fConst100) + 0.2452915f); // step: 736
		fConst147 = (2.0f * (0.2452915f - fConst123)); // step: 740
		fConst148 = (0.0001f / fConst122); // step: 747
		fConst149 = (fConst148 + 0.0004332272f); // step: 748
		fConst150 = (2.0f * (0.0004332272f - fConst148)); // step: 751
		fConst151 = (((fConst101 + -0.51247865f) / fConst100) + 0.6896214f); // step: 760
		fConst152 = (2.0f * (0.6896214f - fConst123)); // step: 764
		fConst153 = (fConst123 + 7.6217313f); // step: 771
		fConst154 = (2.0f * (7.6217313f - fConst123)); // step: 774
		fConst155 = (((fConst101 + -0.16840488f) / fConst100) + 1.0693583f); // step: 783
		fConst156 = (2.0f * (1.0693583f - fConst123)); // step: 787
		fConst157 = (fConst123 + 53.53615f); // step: 794
		fConst158 = (2.0f * (53.53615f - fConst123)); // step: 797
		fConst159 = (((fConst139 + -3.1897273f) / fConst138) + 4.0767817f); // step: 806
		fConst160 = powf(fConst138,2.0f); // step: 809
		fConst161 = (1.0f / fConst160); // step: 810
		fConst162 = (2.0f * (4.0767817f - fConst161)); // step: 812
		fConst163 = (0.0017661728f / fConst160); // step: 819
		fConst164 = (fConst163 + 0.0004076782f); // step: 820
		fConst165 = (2.0f * (0.0004076782f - fConst163)); // step: 823
		fConst166 = (((fConst139 + -0.74313045f) / fConst138) + 1.4500711f); // step: 832
		fConst167 = (2.0f * (1.4500711f - fConst161)); // step: 836
		fConst168 = (11.0520525f / fConst160); // step: 843
		fConst169 = (fConst168 + 1.4500711f); // step: 844
		fConst170 = (2.0f * (1.4500711f - fConst168)); // step: 847
		fConst171 = (((fConst139 + -0.15748216f) / fConst138) + 0.9351402f); // step: 856
		fConst172 = (2.0f * (0.9351402f - fConst161)); // step: 860
		fConst173 = (50.06381f / fConst160); // step: 867
		fConst174 = (fConst173 + 0.9351402f); // step: 868
		fConst175 = (2.0f * (0.9351402f - fConst173)); // step: 871
		fConst176 = tanf((15832.635f / fConst0)); // step: 891
		fConst177 = (1.0f / fConst176); // step: 892
		fConst178 = (1.0f / (((fConst177 + 0.15748216f) / fConst176) + 0.9351402f)); // step: 896
		fConst179 = (1.0f / (((fConst177 + 0.74313045f) / fConst176) + 1.4500711f)); // step: 900
		fConst180 = (1.0f / (((fConst177 + 3.1897273f) / fConst176) + 4.0767817f)); // step: 904
		fConst181 = (1.0f / (((fConst139 + 0.16840488f) / fConst138) + 1.0693583f)); // step: 908
		fConst182 = (1.0f / (((fConst139 + 0.51247865f) / fConst138) + 0.6896214f)); // step: 912
		fConst183 = (1.0f / (((fConst139 + 0.78241307f) / fConst138) + 0.2452915f)); // step: 916
		fConst184 = (((fConst139 + -0.78241307f) / fConst138) + 0.2452915f); // step: 920
		fConst185 = (2.0f * (0.2452915f - fConst161)); // step: 924
		fConst186 = (0.0001f / fConst160); // step: 931
		fConst187 = (fConst186 + 0.0004332272f); // step: 932
		fConst188 = (2.0f * (0.0004332272f - fConst186)); // step: 935
		fConst189 = (((fConst139 + -0.51247865f) / fConst138) + 0.6896214f); // step: 944
		fConst190 = (2.0f * (0.6896214f - fConst161)); // step: 948
		fConst191 = (fConst161 + 7.6217313f); // step: 955
		fConst192 = (2.0f * (7.6217313f - fConst161)); // step: 958
		fConst193 = (((fConst139 + -0.16840488f) / fConst138) + 1.0693583f); // step: 967
		fConst194 = (2.0f * (1.0693583f - fConst161)); // step: 971
		fConst195 = (fConst161 + 53.53615f); // step: 978
		fConst196 = (2.0f * (53.53615f - fConst161)); // step: 981
		fConst197 = (((fConst177 + -3.1897273f) / fConst176) + 4.0767817f); // step: 990
		fConst198 = powf(fConst176,2.0f); // step: 993
		fConst199 = (1.0f / fConst198); // step: 994
		fConst200 = (2.0f * (4.0767817f - fConst199)); // step: 996
		fConst201 = (0.0017661728f / fConst198); // step: 1003
		fConst202 = (fConst201 + 0.0004076782f); // step: 1004
		fConst203 = (2.0f * (0.0004076782f - fConst201)); // step: 1007
		fConst204 = (((fConst177 + -0.74313045f) / fConst176) + 1.4500711f); // step: 1016
		fConst205 = (2.0f * (1.4500711f - fConst199)); // step: 1020
		fConst206 = (11.0520525f / fConst198); // step: 1027
		fConst207 = (fConst206 + 1.4500711f); // step: 1028
		fConst208 = (2.0f * (1.4500711f - fConst206)); // step: 1031
		fConst209 = (((fConst177 + -0.15748216f) / fConst176) + 0.9351402f); // step: 1040
		fConst210 = (2.0f * (0.9351402f - fConst199)); // step: 1044
		fConst211 = (50.06381f / fConst198); // step: 1051
		fConst212 = (fConst211 + 0.9351402f); // step: 1052
		fConst213 = (2.0f * (0.9351402f - fConst211)); // step: 1055
		fConst214 = tanf((12566.371f / fConst0)); // step: 1075
		fConst215 = (1.0f / fConst214); // step: 1076
		fConst216 = (1.0f / (((fConst215 + 0.15748216f) / fConst214) + 0.9351402f)); // step: 1080
		fConst217 = (1.0f / (((fConst215 + 0.74313045f) / fConst214) + 1.4500711f)); // step: 1084
		fConst218 = (1.0f / (((fConst215 + 3.1897273f) / fConst214) + 4.0767817f)); // step: 1088
		fConst219 = (1.0f / (((fConst177 + 0.16840488f) / fConst176) + 1.0693583f)); // step: 1092
		fConst220 = (1.0f / (((fConst177 + 0.51247865f) / fConst176) + 0.6896214f)); // step: 1096
		fConst221 = (1.0f / (((fConst177 + 0.78241307f) / fConst176) + 0.2452915f)); // step: 1100
		fConst222 = (((fConst177 + -0.78241307f) / fConst176) + 0.2452915f); // step: 1104
		fConst223 = (2.0f * (0.2452915f - fConst199)); // step: 1108
		fConst224 = (0.0001f / fConst198); // step: 1115
		fConst225 = (fConst224 + 0.0004332272f); // step: 1116
		fConst226 = (2.0f * (0.0004332272f - fConst224)); // step: 1119
		fConst227 = (((fConst177 + -0.51247865f) / fConst176) + 0.6896214f); // step: 1128
		fConst228 = (2.0f * (0.6896214f - fConst199)); // step: 1132
		fConst229 = (fConst199 + 7.6217313f); // step: 1139
		fConst230 = (2.0f * (7.6217313f - fConst199)); // step: 1142
		fConst231 = (((fConst177 + -0.16840488f) / fConst176) + 1.0693583f); // step: 1151
		fConst232 = (2.0f * (1.0693583f - fConst199)); // step: 1155
		fConst233 = (fConst199 + 53.53615f); // step: 1162
		fConst234 = (2.0f * (53.53615f - fConst199)); // step: 1165
		fConst235 = (((fConst215 + -3.1897273f) / fConst214) + 4.0767817f); // step: 1174
		fConst236 = powf(fConst214,2.0f); // step: 1177
		fConst237 = (1.0f / fConst236); // step: 1178
		fConst238 = (2.0f * (4.0767817f - fConst237)); // step: 1180
		fConst239 = (0.0017661728f / fConst236); // step: 1187
		fConst240 = (fConst239 + 0.0004076782f); // step: 1188
		fConst241 = (2.0f * (0.0004076782f - fConst239)); // step: 1191
		fConst242 = (((fConst215 + -0.74313045f) / fConst214) + 1.4500711f); // step: 1200
		fConst243 = (2.0f * (1.4500711f - fConst237)); // step: 1204
		fConst244 = (11.0520525f / fConst236); // step: 1211
		fConst245 = (fConst244 + 1.4500711f); // step: 1212
		fConst246 = (2.0f * (1.4500711f - fConst244)); // step: 1215
		fConst247 = (((fConst215 + -0.15748216f) / fConst214) + 0.9351402f); // step: 1224
		fConst248 = (2.0f * (0.9351402f - fConst237)); // step: 1228
		fConst249 = (50.06381f / fConst236); // step: 1235
		fConst250 = (fConst249 + 0.9351402f); // step: 1236
		fConst251 = (2.0f * (0.9351402f - fConst249)); // step: 1239
		fConst252 = tanf((9973.935f / fConst0)); // step: 1259
		fConst253 = (1.0f / fConst252); // step: 1260
		fConst254 = (1.0f / (((fConst253 + 0.15748216f) / fConst252) + 0.9351402f)); // step: 1264
		fConst255 = (1.0f / (((fConst253 + 0.74313045f) / fConst252) + 1.4500711f)); // step: 1268
		fConst256 = (1.0f / (((fConst253 + 3.1897273f) / fConst252) + 4.0767817f)); // step: 1272
		fConst257 = (1.0f / (((fConst215 + 0.16840488f) / fConst214) + 1.0693583f)); // step: 1276
		fConst258 = (1.0f / (((fConst215 + 0.51247865f) / fConst214) + 0.6896214f)); // step: 1280
		fConst259 = (1.0f / (((fConst215 + 0.78241307f) / fConst214) + 0.2452915f)); // step: 1284
		fConst260 = (((fConst215 + -0.78241307f) / fConst214) + 0.2452915f); // step: 1288
		fConst261 = (2.0f * (0.2452915f - fConst237)); // step: 1292
		fConst262 = (0.0001f / fConst236); // step: 1299
		fConst263 = (fConst262 + 0.0004332272f); // step: 1300
		fConst264 = (2.0f * (0.0004332272f - fConst262)); // step: 1303
		fConst265 = (((fConst215 + -0.51247865f) / fConst214) + 0.6896214f); // step: 1312
		fConst266 = (2.0f * (0.6896214f - fConst237)); // step: 1316
		fConst267 = (fConst237 + 7.6217313f); // step: 1323
		fConst268 = (2.0f * (7.6217313f - fConst237)); // step: 1326
		fConst269 = (((fConst215 + -0.16840488f) / fConst214) + 1.0693583f); // step: 1335
		fConst270 = (2.0f * (1.0693583f - fConst237)); // step: 1339
		fConst271 = (fConst237 + 53.53615f); // step: 1346
		fConst272 = (2.0f * (53.53615f - fConst237)); // step: 1349
		fConst273 = (((fConst253 + -3.1897273f) / fConst252) + 4.0767817f); // step: 1358
		fConst274 = powf(fConst252,2.0f); // step: 1361
		fConst275 = (1.0f / fConst274); // step: 1362
		fConst276 = (2.0f * (4.0767817f - fConst275)); // step: 1364
		fConst277 = (0.0017661728f / fConst274); // step: 1371
		fConst278 = (fConst277 + 0.0004076782f); // step: 1372
		fConst279 = (2.0f * (0.0004076782f - fConst277)); // step: 1375
		fConst280 = (((fConst253 + -0.74313045f) / fConst252) + 1.4500711f); // step: 1384
		fConst281 = (2.0f * (1.4500711f - fConst275)); // step: 1388
		fConst282 = (11.0520525f / fConst274); // step: 1395
		fConst283 = (fConst282 + 1.4500711f); // step: 1396
		fConst284 = (2.0f * (1.4500711f - fConst282)); // step: 1399
		fConst285 = (((fConst253 + -0.15748216f) / fConst252) + 0.9351402f); // step: 1408
		fConst286 = (2.0f * (0.9351402f - fConst275)); // step: 1412
		fConst287 = (50.06381f / fConst274); // step: 1419
		fConst288 = (fConst287 + 0.9351402f); // step: 1420
		fConst289 = (2.0f * (0.9351402f - fConst287)); // step: 1423
		fConst290 = tanf((7916.3174f / fConst0)); // step: 1443
		fConst291 = (1.0f / fConst290); // step: 1444
		fConst292 = (1.0f / (((fConst291 + 0.15748216f) / fConst290) + 0.9351402f)); // step: 1448
		fConst293 = (1.0f / (((fConst291 + 0.74313045f) / fConst290) + 1.4500711f)); // step: 1452
		fConst294 = (1.0f / (((fConst291 + 3.1897273f) / fConst290) + 4.0767817f)); // step: 1456
		fConst295 = (1.0f / (((fConst253 + 0.16840488f) / fConst252) + 1.0693583f)); // step: 1460
		fConst296 = (1.0f / (((fConst253 + 0.51247865f) / fConst252) + 0.6896214f)); // step: 1464
		fConst297 = (1.0f / (((fConst253 + 0.78241307f) / fConst252) + 0.2452915f)); // step: 1468
		fConst298 = (((fConst253 + -0.78241307f) / fConst252) + 0.2452915f); // step: 1472
		fConst299 = (2.0f * (0.2452915f - fConst275)); // step: 1476
		fConst300 = (0.0001f / fConst274); // step: 1483
		fConst301 = (fConst300 + 0.0004332272f); // step: 1484
		fConst302 = (2.0f * (0.0004332272f - fConst300)); // step: 1487
		fConst303 = (((fConst253 + -0.51247865f) / fConst252) + 0.6896214f); // step: 1496
		fConst304 = (2.0f * (0.6896214f - fConst275)); // step: 1500
		fConst305 = (fConst275 + 7.6217313f); // step: 1507
		fConst306 = (2.0f * (7.6217313f - fConst275)); // step: 1510
		fConst307 = (((fConst253 + -0.16840488f) / fConst252) + 1.0693583f); // step: 1519
		fConst308 = (2.0f * (1.0693583f - fConst275)); // step: 1523
		fConst309 = (fConst275 + 53.53615f); // step: 1530
		fConst310 = (2.0f * (53.53615f - fConst275)); // step: 1533
		fConst311 = (((fConst291 + -3.1897273f) / fConst290) + 4.0767817f); // step: 1542
		fConst312 = powf(fConst290,2.0f); // step: 1545
		fConst313 = (1.0f / fConst312); // step: 1546
		fConst314 = (2.0f * (4.0767817f - fConst313)); // step: 1548
		fConst315 = (0.0017661728f / fConst312); // step: 1555
		fConst316 = (fConst315 + 0.0004076782f); // step: 1556
		fConst317 = (2.0f * (0.0004076782f - fConst315)); // step: 1559
		fConst318 = (((fConst291 + -0.74313045f) / fConst290) + 1.4500711f); // step: 1568
		fConst319 = (2.0f * (1.4500711f - fConst313)); // step: 1572
		fConst320 = (11.0520525f / fConst312); // step: 1579
		fConst321 = (fConst320 + 1.4500711f); // step: 1580
		fConst322 = (2.0f * (1.4500711f - fConst320)); // step: 1583
		fConst323 = (((fConst291 + -0.15748216f) / fConst290) + 0.9351402f); // step: 1592
		fConst324 = (2.0f * (0.9351402f - fConst313)); // step: 1596
		fConst325 = (50.06381f / fConst312); // step: 1603
		fConst326 = (fConst325 + 0.9351402f); // step: 1604
		fConst327 = (2.0f * (0.9351402f - fConst325)); // step: 1607
		fConst328 = tanf((6283.1855f / fConst0)); // step: 1627
		fConst329 = (1.0f / fConst328); // step: 1628
		fConst330 = (1.0f / (((fConst329 + 0.15748216f) / fConst328) + 0.9351402f)); // step: 1632
		fConst331 = (1.0f / (((fConst329 + 0.74313045f) / fConst328) + 1.4500711f)); // step: 1636
		fConst332 = (1.0f / (((fConst329 + 3.1897273f) / fConst328) + 4.0767817f)); // step: 1640
		fConst333 = (1.0f / (((fConst291 + 0.16840488f) / fConst290) + 1.0693583f)); // step: 1644
		fConst334 = (1.0f / (((fConst291 + 0.51247865f) / fConst290) + 0.6896214f)); // step: 1648
		fConst335 = (1.0f / (((fConst291 + 0.78241307f) / fConst290) + 0.2452915f)); // step: 1652
		fConst336 = (((fConst291 + -0.78241307f) / fConst290) + 0.2452915f); // step: 1656
		fConst337 = (2.0f * (0.2452915f - fConst313)); // step: 1660
		fConst338 = (0.0001f / fConst312); // step: 1667
		fConst339 = (fConst338 + 0.0004332272f); // step: 1668
		fConst340 = (2.0f * (0.0004332272f - fConst338)); // step: 1671
		fConst341 = (((fConst291 + -0.51247865f) / fConst290) + 0.6896214f); // step: 1680
		fConst342 = (2.0f * (0.6896214f - fConst313)); // step: 1684
		fConst343 = (fConst313 + 7.6217313f); // step: 1691
		fConst344 = (2.0f * (7.6217313f - fConst313)); // step: 1694
		fConst345 = (((fConst291 + -0.16840488f) / fConst290) + 1.0693583f); // step: 1703
		fConst346 = (2.0f * (1.0693583f - fConst313)); // step: 1707
		fConst347 = (fConst313 + 53.53615f); // step: 1714
		fConst348 = (2.0f * (53.53615f - fConst313)); // step: 1717
		fConst349 = (((fConst329 + -3.1897273f) / fConst328) + 4.0767817f); // step: 1726
		fConst350 = powf(fConst328,2.0f); // step: 1729
		fConst351 = (1.0f / fConst350); // step: 1730
		fConst352 = (2.0f * (4.0767817f - fConst351)); // step: 1732
		fConst353 = (0.0017661728f / fConst350); // step: 1739
		fConst354 = (fConst353 + 0.0004076782f); // step: 1740
		fConst355 = (2.0f * (0.0004076782f - fConst353)); // step: 1743
		fConst356 = (((fConst329 + -0.74313045f) / fConst328) + 1.4500711f); // step: 1752
		fConst357 = (2.0f * (1.4500711f - fConst351)); // step: 1756
		fConst358 = (11.0520525f / fConst350); // step: 1763
		fConst359 = (fConst358 + 1.4500711f); // step: 1764
		fConst360 = (2.0f * (1.4500711f - fConst358)); // step: 1767
		fConst361 = (((fConst329 + -0.15748216f) / fConst328) + 0.9351402f); // step: 1776
		fConst362 = (2.0f * (0.9351402f - fConst351)); // step: 1780
		fConst363 = (50.06381f / fConst350); // step: 1787
		fConst364 = (fConst363 + 0.9351402f); // step: 1788
		fConst365 = (2.0f * (0.9351402f - fConst363)); // step: 1791
		fConst366 = tanf((4986.9673f / fConst0)); // step: 1811
		fConst367 = (1.0f / fConst366); // step: 1812
		fConst368 = (1.0f / (((fConst367 + 0.15748216f) / fConst366) + 0.9351402f)); // step: 1816
		fConst369 = (1.0f / (((fConst367 + 0.74313045f) / fConst366) + 1.4500711f)); // step: 1820
		fConst370 = (1.0f / (((fConst367 + 3.1897273f) / fConst366) + 4.0767817f)); // step: 1824
		fConst371 = (1.0f / (((fConst329 + 0.16840488f) / fConst328) + 1.0693583f)); // step: 1828
		fConst372 = (1.0f / (((fConst329 + 0.51247865f) / fConst328) + 0.6896214f)); // step: 1832
		fConst373 = (1.0f / (((fConst329 + 0.78241307f) / fConst328) + 0.2452915f)); // step: 1836
		fConst374 = (((fConst329 + -0.78241307f) / fConst328) + 0.2452915f); // step: 1840
		fConst375 = (2.0f * (0.2452915f - fConst351)); // step: 1844
		fConst376 = (0.0001f / fConst350); // step: 1851
		fConst377 = (fConst376 + 0.0004332272f); // step: 1852
		fConst378 = (2.0f * (0.0004332272f - fConst376)); // step: 1855
		fConst379 = (((fConst329 + -0.51247865f) / fConst328) + 0.6896214f); // step: 1864
		fConst380 = (2.0f * (0.6896214f - fConst351)); // step: 1868
		fConst381 = (fConst351 + 7.6217313f); // step: 1875
		fConst382 = (2.0f * (7.6217313f - fConst351)); // step: 1878
		fConst383 = (((fConst329 + -0.16840488f) / fConst328) + 1.0693583f); // step: 1887
		fConst384 = (2.0f * (1.0693583f - fConst351)); // step: 1891
		fConst385 = (fConst351 + 53.53615f); // step: 1898
		fConst386 = (2.0f * (53.53615f - fConst351)); // step: 1901
		fConst387 = (((fConst367 + -3.1897273f) / fConst366) + 4.0767817f); // step: 1910
		fConst388 = powf(fConst366,2.0f); // step: 1913
		fConst389 = (1.0f / fConst388); // step: 1914
		fConst390 = (2.0f * (4.0767817f - fConst389)); // step: 1916
		fConst391 = (0.0017661728f / fConst388); // step: 1923
		fConst392 = (fConst391 + 0.0004076782f); // step: 1924
		fConst393 = (2.0f * (0.0004076782f - fConst391)); // step: 1927
		fConst394 = (((fConst367 + -0.74313045f) / fConst366) + 1.4500711f); // step: 1936
		fConst395 = (2.0f * (1.4500711f - fConst389)); // step: 1940
		fConst396 = (11.0520525f / fConst388); // step: 1947
		fConst397 = (fConst396 + 1.4500711f); // step: 1948
		fConst398 = (2.0f * (1.4500711f - fConst396)); // step: 1951
		fConst399 = (((fConst367 + -0.15748216f) / fConst366) + 0.9351402f); // step: 1960
		fConst400 = (2.0f * (0.9351402f - fConst389)); // step: 1964
		fConst401 = (50.06381f / fConst388); // step: 1971
		fConst402 = (fConst401 + 0.9351402f); // step: 1972
		fConst403 = (2.0f * (0.9351402f - fConst401)); // step: 1975
		fConst404 = tanf((3958.1587f / fConst0)); // step: 1995
		fConst405 = (1.0f / fConst404); // step: 1996
		fConst406 = (1.0f / (((fConst405 + 0.15748216f) / fConst404) + 0.9351402f)); // step: 2000
		fConst407 = (1.0f / (((fConst405 + 0.74313045f) / fConst404) + 1.4500711f)); // step: 2004
		fConst408 = (1.0f / (((fConst405 + 3.1897273f) / fConst404) + 4.0767817f)); // step: 2008
		fConst409 = (1.0f / (((fConst367 + 0.16840488f) / fConst366) + 1.0693583f)); // step: 2012
		fConst410 = (1.0f / (((fConst367 + 0.51247865f) / fConst366) + 0.6896214f)); // step: 2016
		fConst411 = (1.0f / (((fConst367 + 0.78241307f) / fConst366) + 0.2452915f)); // step: 2020
		fConst412 = (((fConst367 + -0.78241307f) / fConst366) + 0.2452915f); // step: 2024
		fConst413 = (2.0f * (0.2452915f - fConst389)); // step: 2028
		fConst414 = (0.0001f / fConst388); // step: 2035
		fConst415 = (fConst414 + 0.0004332272f); // step: 2036
		fConst416 = (2.0f * (0.0004332272f - fConst414)); // step: 2039
		fConst417 = (((fConst367 + -0.51247865f) / fConst366) + 0.6896214f); // step: 2048
		fConst418 = (2.0f * (0.6896214f - fConst389)); // step: 2052
		fConst419 = (fConst389 + 7.6217313f); // step: 2059
		fConst420 = (2.0f * (7.6217313f - fConst389)); // step: 2062
		fConst421 = (((fConst367 + -0.16840488f) / fConst366) + 1.0693583f); // step: 2071
		fConst422 = (2.0f * (1.0693583f - fConst389)); // step: 2075
		fConst423 = (fConst389 + 53.53615f); // step: 2082
		fConst424 = (2.0f * (53.53615f - fConst389)); // step: 2085
		fConst425 = (((fConst405 + -3.1897273f) / fConst404) + 4.0767817f); // step: 2094
		fConst426 = powf(fConst404,2.0f); // step: 2097
		fConst427 = (1.0f / fConst426); // step: 2098
		fConst428 = (2.0f * (4.0767817f - fConst427)); // step: 2100
		fConst429 = (0.0017661728f / fConst426); // step: 2107
		fConst430 = (fConst429 + 0.0004076782f); // step: 2108
		fConst431 = (2.0f * (0.0004076782f - fConst429)); // step: 2111
		fConst432 = (((fConst405 + -0.74313045f) / fConst404) + 1.4500711f); // step: 2120
		fConst433 = (2.0f * (1.4500711f - fConst427)); // step: 2124
		fConst434 = (11.0520525f / fConst426); // step: 2131
		fConst435 = (fConst434 + 1.4500711f); // step: 2132
		fConst436 = (2.0f * (1.4500711f - fConst434)); // step: 2135
		fConst437 = (((fConst405 + -0.15748216f) / fConst404) + 0.9351402f); // step: 2144
		fConst438 = (2.0f * (0.9351402f - fConst427)); // step: 2148
		fConst439 = (50.06381f / fConst426); // step: 2155
		fConst440 = (fConst439 + 0.9351402f); // step: 2156
		fConst441 = (2.0f * (0.9351402f - fConst439)); // step: 2159
		fConst442 = tanf((3141.5928f / fConst0)); // step: 2179
		fConst443 = (1.0f / fConst442); // step: 2180
		fConst444 = (1.0f / (((fConst443 + 0.15748216f) / fConst442) + 0.9351402f)); // step: 2184
		fConst445 = (1.0f / (((fConst443 + 0.74313045f) / fConst442) + 1.4500711f)); // step: 2188
		fConst446 = (1.0f / (((fConst443 + 3.1897273f) / fConst442) + 4.0767817f)); // step: 2192
		fConst447 = (1.0f / (((fConst405 + 0.16840488f) / fConst404) + 1.0693583f)); // step: 2196
		fConst448 = (1.0f / (((fConst405 + 0.51247865f) / fConst404) + 0.6896214f)); // step: 2200
		fConst449 = (1.0f / (((fConst405 + 0.78241307f) / fConst404) + 0.2452915f)); // step: 2204
		fConst450 = (((fConst405 + -0.78241307f) / fConst404) + 0.2452915f); // step: 2208
		fConst451 = (2.0f * (0.2452915f - fConst427)); // step: 2212
		fConst452 = (0.0001f / fConst426); // step: 2219
		fConst453 = (fConst452 + 0.0004332272f); // step: 2220
		fConst454 = (2.0f * (0.0004332272f - fConst452)); // step: 2223
		fConst455 = (((fConst405 + -0.51247865f) / fConst404) + 0.6896214f); // step: 2232
		fConst456 = (2.0f * (0.6896214f - fConst427)); // step: 2236
		fConst457 = (fConst427 + 7.6217313f); // step: 2243
		fConst458 = (2.0f * (7.6217313f - fConst427)); // step: 2246
		fConst459 = (((fConst405 + -0.16840488f) / fConst404) + 1.0693583f); // step: 2255
		fConst460 = (2.0f * (1.0693583f - fConst427)); // step: 2259
		fConst461 = (fConst427 + 53.53615f); // step: 2266
		fConst462 = (2.0f * (53.53615f - fConst427)); // step: 2269
		fConst463 = (((fConst443 + -3.1897273f) / fConst442) + 4.0767817f); // step: 2278
		fConst464 = powf(fConst442,2.0f); // step: 2281
		fConst465 = (1.0f / fConst464); // step: 2282
		fConst466 = (2.0f * (4.0767817f - fConst465)); // step: 2284
		fConst467 = (0.0017661728f / fConst464); // step: 2291
		fConst468 = (fConst467 + 0.0004076782f); // step: 2292
		fConst469 = (2.0f * (0.0004076782f - fConst467)); // step: 2295
		fConst470 = (((fConst443 + -0.74313045f) / fConst442) + 1.4500711f); // step: 2304
		fConst471 = (2.0f * (1.4500711f - fConst465)); // step: 2308
		fConst472 = (11.0520525f / fConst464); // step: 2315
		fConst473 = (fConst472 + 1.4500711f); // step: 2316
		fConst474 = (2.0f * (1.4500711f - fConst472)); // step: 2319
		fConst475 = (((fConst443 + -0.15748216f) / fConst442) + 0.9351402f); // step: 2328
		fConst476 = (2.0f * (0.9351402f - fConst465)); // step: 2332
		fConst477 = (50.06381f / fConst464); // step: 2339
		fConst478 = (fConst477 + 0.9351402f); // step: 2340
		fConst479 = (2.0f * (0.9351402f - fConst477)); // step: 2343
		fConst480 = tanf((2493.4836f / fConst0)); // step: 2363
		fConst481 = (1.0f / fConst480); // step: 2364
		fConst482 = (1.0f / (((fConst481 + 0.15748216f) / fConst480) + 0.9351402f)); // step: 2368
		fConst483 = (1.0f / (((fConst481 + 0.74313045f) / fConst480) + 1.4500711f)); // step: 2372
		fConst484 = (1.0f / (((fConst481 + 3.1897273f) / fConst480) + 4.0767817f)); // step: 2376
		fConst485 = (1.0f / (((fConst443 + 0.16840488f) / fConst442) + 1.0693583f)); // step: 2380
		fConst486 = (1.0f / (((fConst443 + 0.51247865f) / fConst442) + 0.6896214f)); // step: 2384
		fConst487 = (1.0f / (((fConst443 + 0.78241307f) / fConst442) + 0.2452915f)); // step: 2388
		fConst488 = (((fConst443 + -0.78241307f) / fConst442) + 0.2452915f); // step: 2392
		fConst489 = (2.0f * (0.2452915f - fConst465)); // step: 2396
		fConst490 = (0.0001f / fConst464); // step: 2403
		fConst491 = (fConst490 + 0.0004332272f); // step: 2404
		fConst492 = (2.0f * (0.0004332272f - fConst490)); // step: 2407
		fConst493 = (((fConst443 + -0.51247865f) / fConst442) + 0.6896214f); // step: 2416
		fConst494 = (2.0f * (0.6896214f - fConst465)); // step: 2420
		fConst495 = (fConst465 + 7.6217313f); // step: 2427
		fConst496 = (2.0f * (7.6217313f - fConst465)); // step: 2430
		fConst497 = (((fConst443 + -0.16840488f) / fConst442) + 1.0693583f); // step: 2439
		fConst498 = (2.0f * (1.0693583f - fConst465)); // step: 2443
		fConst499 = (fConst465 + 53.53615f); // step: 2450
		fConst500 = (2.0f * (53.53615f - fConst465)); // step: 2453
		fConst501 = (((fConst481 + -3.1897273f) / fConst480) + 4.0767817f); // step: 2462
		fConst502 = powf(fConst480,2.0f); // step: 2465
		fConst503 = (1.0f / fConst502); // step: 2466
		fConst504 = (2.0f * (4.0767817f - fConst503)); // step: 2468
		fConst505 = (0.0017661728f / fConst502); // step: 2475
		fConst506 = (fConst505 + 0.0004076782f); // step: 2476
		fConst507 = (2.0f * (0.0004076782f - fConst505)); // step: 2479
		fConst508 = (((fConst481 + -0.74313045f) / fConst480) + 1.4500711f); // step: 2488
		fConst509 = (2.0f * (1.4500711f - fConst503)); // step: 2492
		fConst510 = (11.0520525f / fConst502); // step: 2499
		fConst511 = (fConst510 + 1.4500711f); // step: 2500
		fConst512 = (2.0f * (1.4500711f - fConst510)); // step: 2503
		fConst513 = (((fConst481 + -0.15748216f) / fConst480) + 0.9351402f); // step: 2512
		fConst514 = (2.0f * (0.9351402f - fConst503)); // step: 2516
		fConst515 = (50.06381f / fConst502); // step: 2523
		fConst516 = (fConst515 + 0.9351402f); // step: 2524
		fConst517 = (2.0f * (0.9351402f - fConst515)); // step: 2527
		fConst518 = tanf((1979.0793f / fConst0)); // step: 2547
		fConst519 = (1.0f / fConst518); // step: 2548
		fConst520 = (1.0f / (((fConst519 + 0.15748216f) / fConst518) + 0.9351402f)); // step: 2552
		fConst521 = (1.0f / (((fConst519 + 0.74313045f) / fConst518) + 1.4500711f)); // step: 2556
		fConst522 = (1.0f / (((fConst519 + 3.1897273f) / fConst518) + 4.0767817f)); // step: 2560
		fConst523 = (1.0f / (((fConst481 + 0.16840488f) / fConst480) + 1.0693583f)); // step: 2564
		fConst524 = (1.0f / (((fConst481 + 0.51247865f) / fConst480) + 0.6896214f)); // step: 2568
		fConst525 = (1.0f / (((fConst481 + 0.78241307f) / fConst480) + 0.2452915f)); // step: 2572
		fConst526 = (((fConst481 + -0.78241307f) / fConst480) + 0.2452915f); // step: 2576
		fConst527 = (2.0f * (0.2452915f - fConst503)); // step: 2580
		fConst528 = (0.0001f / fConst502); // step: 2587
		fConst529 = (fConst528 + 0.0004332272f); // step: 2588
		fConst530 = (2.0f * (0.0004332272f - fConst528)); // step: 2591
		fConst531 = (((fConst481 + -0.51247865f) / fConst480) + 0.6896214f); // step: 2600
		fConst532 = (2.0f * (0.6896214f - fConst503)); // step: 2604
		fConst533 = (fConst503 + 7.6217313f); // step: 2611
		fConst534 = (2.0f * (7.6217313f - fConst503)); // step: 2614
		fConst535 = (((fConst481 + -0.16840488f) / fConst480) + 1.0693583f); // step: 2623
		fConst536 = (2.0f * (1.0693583f - fConst503)); // step: 2627
		fConst537 = (fConst503 + 53.53615f); // step: 2634
		fConst538 = (2.0f * (53.53615f - fConst503)); // step: 2637
		fConst539 = (((fConst519 + -3.1897273f) / fConst518) + 4.0767817f); // step: 2646
		fConst540 = powf(fConst518,2.0f); // step: 2649
		fConst541 = (1.0f / fConst540); // step: 2650
		fConst542 = (2.0f * (4.0767817f - fConst541)); // step: 2652
		fConst543 = (0.0017661728f / fConst540); // step: 2659
		fConst544 = (fConst543 + 0.0004076782f); // step: 2660
		fConst545 = (2.0f * (0.0004076782f - fConst543)); // step: 2663
		fConst546 = (((fConst519 + -0.74313045f) / fConst518) + 1.4500711f); // step: 2672
		fConst547 = (2.0f * (1.4500711f - fConst541)); // step: 2676
		fConst548 = (11.0520525f / fConst540); // step: 2683
		fConst549 = (fConst548 + 1.4500711f); // step: 2684
		fConst550 = (2.0f * (1.4500711f - fConst548)); // step: 2687
		fConst551 = (((fConst519 + -0.15748216f) / fConst518) + 0.9351402f); // step: 2696
		fConst552 = (2.0f * (0.9351402f - fConst541)); // step: 2700
		fConst553 = (50.06381f / fConst540); // step: 2707
		fConst554 = (fConst553 + 0.9351402f); // step: 2708
		fConst555 = (2.0f * (0.9351402f - fConst553)); // step: 2711
		fConst556 = tanf((1570.7964f / fConst0)); // step: 2731
		fConst557 = (1.0f / fConst556); // step: 2732
		fConst558 = (1.0f / (((fConst557 + 0.15748216f) / fConst556) + 0.9351402f)); // step: 2736
		fConst559 = (1.0f / (((fConst557 + 0.74313045f) / fConst556) + 1.4500711f)); // step: 2740
		fConst560 = (1.0f / (((fConst557 + 3.1897273f) / fConst556) + 4.0767817f)); // step: 2744
		fConst561 = (1.0f / (((fConst519 + 0.16840488f) / fConst518) + 1.0693583f)); // step: 2748
		fConst562 = (1.0f / (((fConst519 + 0.51247865f) / fConst518) + 0.6896214f)); // step: 2752
		fConst563 = (1.0f / (((fConst519 + 0.78241307f) / fConst518) + 0.2452915f)); // step: 2756
		fConst564 = (((fConst519 + -0.78241307f) / fConst518) + 0.2452915f); // step: 2760
		fConst565 = (2.0f * (0.2452915f - fConst541)); // step: 2764
		fConst566 = (0.0001f / fConst540); // step: 2771
		fConst567 = (fConst566 + 0.0004332272f); // step: 2772
		fConst568 = (2.0f * (0.0004332272f - fConst566)); // step: 2775
		fConst569 = (((fConst519 + -0.51247865f) / fConst518) + 0.6896214f); // step: 2784
		fConst570 = (2.0f * (0.6896214f - fConst541)); // step: 2788
		fConst571 = (fConst541 + 7.6217313f); // step: 2795
		fConst572 = (2.0f * (7.6217313f - fConst541)); // step: 2798
		fConst573 = (((fConst519 + -0.16840488f) / fConst518) + 1.0693583f); // step: 2807
		fConst574 = (2.0f * (1.0693583f - fConst541)); // step: 2811
		fConst575 = (fConst541 + 53.53615f); // step: 2818
		fConst576 = (2.0f * (53.53615f - fConst541)); // step: 2821
		fConst577 = (((fConst557 + -3.1897273f) / fConst556) + 4.0767817f); // step: 2830
		fConst578 = powf(fConst556,2.0f); // step: 2833
		fConst579 = (1.0f / fConst578); // step: 2834
		fConst580 = (2.0f * (4.0767817f - fConst579)); // step: 2836
		fConst581 = (0.0017661728f / fConst578); // step: 2843
		fConst582 = (fConst581 + 0.0004076782f); // step: 2844
		fConst583 = (2.0f * (0.0004076782f - fConst581)); // step: 2847
		fConst584 = (((fConst557 + -0.74313045f) / fConst556) + 1.4500711f); // step: 2856
		fConst585 = (2.0f * (1.4500711f - fConst579)); // step: 2860
		fConst586 = (11.0520525f / fConst578); // step: 2867
		fConst587 = (fConst586 + 1.4500711f); // step: 2868
		fConst588 = (2.0f * (1.4500711f - fConst586)); // step: 2871
		fConst589 = (((fConst557 + -0.15748216f) / fConst556) + 0.9351402f); // step: 2880
		fConst590 = (2.0f * (0.9351402f - fConst579)); // step: 2884
		fConst591 = (50.06381f / fConst578); // step: 2891
		fConst592 = (fConst591 + 0.9351402f); // step: 2892
		fConst593 = (2.0f * (0.9351402f - fConst591)); // step: 2895
		fConst594 = tanf((1246.7418f / fConst0)); // step: 2915
		fConst595 = (1.0f / fConst594); // step: 2916
		fConst596 = (1.0f / (((fConst595 + 0.15748216f) / fConst594) + 0.9351402f)); // step: 2920
		fConst597 = (1.0f / (((fConst595 + 0.74313045f) / fConst594) + 1.4500711f)); // step: 2924
		fConst598 = (1.0f / (((fConst595 + 3.1897273f) / fConst594) + 4.0767817f)); // step: 2928
		fConst599 = (1.0f / (((fConst557 + 0.16840488f) / fConst556) + 1.0693583f)); // step: 2932
		fConst600 = (1.0f / (((fConst557 + 0.51247865f) / fConst556) + 0.6896214f)); // step: 2936
		fConst601 = (1.0f / (((fConst557 + 0.78241307f) / fConst556) + 0.2452915f)); // step: 2940
		fConst602 = (((fConst557 + -0.78241307f) / fConst556) + 0.2452915f); // step: 2944
		fConst603 = (2.0f * (0.2452915f - fConst579)); // step: 2948
		fConst604 = (0.0001f / fConst578); // step: 2955
		fConst605 = (fConst604 + 0.0004332272f); // step: 2956
		fConst606 = (2.0f * (0.0004332272f - fConst604)); // step: 2959
		fConst607 = (((fConst557 + -0.51247865f) / fConst556) + 0.6896214f); // step: 2968
		fConst608 = (2.0f * (0.6896214f - fConst579)); // step: 2972
		fConst609 = (fConst579 + 7.6217313f); // step: 2979
		fConst610 = (2.0f * (7.6217313f - fConst579)); // step: 2982
		fConst611 = (((fConst557 + -0.16840488f) / fConst556) + 1.0693583f); // step: 2991
		fConst612 = (2.0f * (1.0693583f - fConst579)); // step: 2995
		fConst613 = (fConst579 + 53.53615f); // step: 3002
		fConst614 = (2.0f * (53.53615f - fConst579)); // step: 3005
		fConst615 = (((fConst595 + -3.1897273f) / fConst594) + 4.0767817f); // step: 3014
		fConst616 = powf(fConst594,2.0f); // step: 3017
		fConst617 = (1.0f / fConst616); // step: 3018
		fConst618 = (2.0f * (4.0767817f - fConst617)); // step: 3020
		fConst619 = (0.0017661728f / fConst616); // step: 3027
		fConst620 = (fConst619 + 0.0004076782f); // step: 3028
		fConst621 = (2.0f * (0.0004076782f - fConst619)); // step: 3031
		fConst622 = (((fConst595 + -0.74313045f) / fConst594) + 1.4500711f); // step: 3040
		fConst623 = (2.0f * (1.4500711f - fConst617)); // step: 3044
		fConst624 = (11.0520525f / fConst616); // step: 3051
		fConst625 = (fConst624 + 1.4500711f); // step: 3052
		fConst626 = (2.0f * (1.4500711f - fConst624)); // step: 3055
		fConst627 = (((fConst595 + -0.15748216f) / fConst594) + 0.9351402f); // step: 3064
		fConst628 = (2.0f * (0.9351402f - fConst617)); // step: 3068
		fConst629 = (50.06381f / fConst616); // step: 3075
		fConst630 = (fConst629 + 0.9351402f); // step: 3076
		fConst631 = (2.0f * (0.9351402f - fConst629)); // step: 3079
		fConst632 = tanf((989.5397f / fConst0)); // step: 3099
		fConst633 = (1.0f / fConst632); // step: 3100
		fConst634 = (1.0f / (((fConst633 + 0.15748216f) / fConst632) + 0.9351402f)); // step: 3104
		fConst635 = (1.0f / (((fConst633 + 0.74313045f) / fConst632) + 1.4500711f)); // step: 3108
		fConst636 = (1.0f / (((fConst633 + 3.1897273f) / fConst632) + 4.0767817f)); // step: 3112
		fConst637 = (1.0f / (((fConst595 + 0.16840488f) / fConst594) + 1.0693583f)); // step: 3116
		fConst638 = (1.0f / (((fConst595 + 0.51247865f) / fConst594) + 0.6896214f)); // step: 3120
		fConst639 = (1.0f / (((fConst595 + 0.78241307f) / fConst594) + 0.2452915f)); // step: 3124
		fConst640 = (((fConst595 + -0.78241307f) / fConst594) + 0.2452915f); // step: 3128
		fConst641 = (2.0f * (0.2452915f - fConst617)); // step: 3132
		fConst642 = (0.0001f / fConst616); // step: 3139
		fConst643 = (fConst642 + 0.0004332272f); // step: 3140
		fConst644 = (2.0f * (0.0004332272f - fConst642)); // step: 3143
		fConst645 = (((fConst595 + -0.51247865f) / fConst594) + 0.6896214f); // step: 3152
		fConst646 = (2.0f * (0.6896214f - fConst617)); // step: 3156
		fConst647 = (fConst617 + 7.6217313f); // step: 3163
		fConst648 = (2.0f * (7.6217313f - fConst617)); // step: 3166
		fConst649 = (((fConst595 + -0.16840488f) / fConst594) + 1.0693583f); // step: 3175
		fConst650 = (2.0f * (1.0693583f - fConst617)); // step: 3179
		fConst651 = (fConst617 + 53.53615f); // step: 3186
		fConst652 = (2.0f * (53.53615f - fConst617)); // step: 3189
		fConst653 = (((fConst633 + -3.1897273f) / fConst632) + 4.0767817f); // step: 3198
		fConst654 = powf(fConst632,2.0f); // step: 3201
		fConst655 = (1.0f / fConst654); // step: 3202
		fConst656 = (2.0f * (4.0767817f - fConst655)); // step: 3204
		fConst657 = (0.0017661728f / fConst654); // step: 3211
		fConst658 = (fConst657 + 0.0004076782f); // step: 3212
		fConst659 = (2.0f * (0.0004076782f - fConst657)); // step: 3215
		fConst660 = (((fConst633 + -0.74313045f) / fConst632) + 1.4500711f); // step: 3224
		fConst661 = (2.0f * (1.4500711f - fConst655)); // step: 3228
		fConst662 = (11.0520525f / fConst654); // step: 3235
		fConst663 = (fConst662 + 1.4500711f); // step: 3236
		fConst664 = (2.0f * (1.4500711f - fConst662)); // step: 3239
		fConst665 = (((fConst633 + -0.15748216f) / fConst632) + 0.9351402f); // step: 3248
		fConst666 = (2.0f * (0.9351402f - fConst655)); // step: 3252
		fConst667 = (50.06381f / fConst654); // step: 3259
		fConst668 = (fConst667 + 0.9351402f); // step: 3260
		fConst669 = (2.0f * (0.9351402f - fConst667)); // step: 3263
		fConst670 = tanf((785.3982f / fConst0)); // step: 3283
		fConst671 = (1.0f / fConst670); // step: 3284
		fConst672 = (1.0f / (((fConst671 + 0.15748216f) / fConst670) + 0.9351402f)); // step: 3288
		fConst673 = (1.0f / (((fConst671 + 0.74313045f) / fConst670) + 1.4500711f)); // step: 3292
		fConst674 = (1.0f / (((fConst671 + 3.1897273f) / fConst670) + 4.0767817f)); // step: 3296
		fConst675 = (1.0f / (((fConst633 + 0.16840488f) / fConst632) + 1.0693583f)); // step: 3300
		fConst676 = (1.0f / (((fConst633 + 0.51247865f) / fConst632) + 0.6896214f)); // step: 3304
		fConst677 = (1.0f / (((fConst633 + 0.78241307f) / fConst632) + 0.2452915f)); // step: 3308
		fConst678 = (((fConst633 + -0.78241307f) / fConst632) + 0.2452915f); // step: 3312
		fConst679 = (2.0f * (0.2452915f - fConst655)); // step: 3316
		fConst680 = (0.0001f / fConst654); // step: 3323
		fConst681 = (fConst680 + 0.0004332272f); // step: 3324
		fConst682 = (2.0f * (0.0004332272f - fConst680)); // step: 3327
		fConst683 = (((fConst633 + -0.51247865f) / fConst632) + 0.6896214f); // step: 3336
		fConst684 = (2.0f * (0.6896214f - fConst655)); // step: 3340
		fConst685 = (fConst655 + 7.6217313f); // step: 3347
		fConst686 = (2.0f * (7.6217313f - fConst655)); // step: 3350
		fConst687 = (((fConst633 + -0.16840488f) / fConst632) + 1.0693583f); // step: 3359
		fConst688 = (2.0f * (1.0693583f - fConst655)); // step: 3363
		fConst689 = (fConst655 + 53.53615f); // step: 3370
		fConst690 = (2.0f * (53.53615f - fConst655)); // step: 3373
		fConst691 = (((fConst671 + -3.1897273f) / fConst670) + 4.0767817f); // step: 3382
		fConst692 = powf(fConst670,2.0f); // step: 3385
		fConst693 = (1.0f / fConst692); // step: 3386
		fConst694 = (2.0f * (4.0767817f - fConst693)); // step: 3388
		fConst695 = (0.0017661728f / fConst692); // step: 3395
		fConst696 = (fConst695 + 0.0004076782f); // step: 3396
		fConst697 = (2.0f * (0.0004076782f - fConst695)); // step: 3399
		fConst698 = (((fConst671 + -0.74313045f) / fConst670) + 1.4500711f); // step: 3408
		fConst699 = (2.0f * (1.4500711f - fConst693)); // step: 3412
		fConst700 = (11.0520525f / fConst692); // step: 3419
		fConst701 = (fConst700 + 1.4500711f); // step: 3420
		fConst702 = (2.0f * (1.4500711f - fConst700)); // step: 3423
		fConst703 = (((fConst671 + -0.15748216f) / fConst670) + 0.9351402f); // step: 3432
		fConst704 = (2.0f * (0.9351402f - fConst693)); // step: 3436
		fConst705 = (50.06381f / fConst692); // step: 3443
		fConst706 = (fConst705 + 0.9351402f); // step: 3444
		fConst707 = (2.0f * (0.9351402f - fConst705)); // step: 3447
		fConst708 = tanf((623.3709f / fConst0)); // step: 3467
		fConst709 = (1.0f / fConst708); // step: 3468
		fConst710 = (1.0f / (((fConst709 + 0.15748216f) / fConst708) + 0.9351402f)); // step: 3472
		fConst711 = (1.0f / (((fConst709 + 0.74313045f) / fConst708) + 1.4500711f)); // step: 3476
		fConst712 = (1.0f / (((fConst709 + 3.1897273f) / fConst708) + 4.0767817f)); // step: 3480
		fConst713 = (1.0f / (((fConst671 + 0.16840488f) / fConst670) + 1.0693583f)); // step: 3484
		fConst714 = (1.0f / (((fConst671 + 0.51247865f) / fConst670) + 0.6896214f)); // step: 3488
		fConst715 = (1.0f / (((fConst671 + 0.78241307f) / fConst670) + 0.2452915f)); // step: 3492
		fConst716 = (((fConst671 + -0.78241307f) / fConst670) + 0.2452915f); // step: 3496
		fConst717 = (2.0f * (0.2452915f - fConst693)); // step: 3500
		fConst718 = (0.0001f / fConst692); // step: 3507
		fConst719 = (fConst718 + 0.0004332272f); // step: 3508
		fConst720 = (2.0f * (0.0004332272f - fConst718)); // step: 3511
		fConst721 = (((fConst671 + -0.51247865f) / fConst670) + 0.6896214f); // step: 3520
		fConst722 = (2.0f * (0.6896214f - fConst693)); // step: 3524
		fConst723 = (fConst693 + 7.6217313f); // step: 3531
		fConst724 = (2.0f * (7.6217313f - fConst693)); // step: 3534
		fConst725 = (((fConst671 + -0.16840488f) / fConst670) + 1.0693583f); // step: 3543
		fConst726 = (2.0f * (1.0693583f - fConst693)); // step: 3547
		fConst727 = (fConst693 + 53.53615f); // step: 3554
		fConst728 = (2.0f * (53.53615f - fConst693)); // step: 3557
		fConst729 = (((fConst709 + -3.1897273f) / fConst708) + 4.0767817f); // step: 3566
		fConst730 = powf(fConst708,2.0f); // step: 3569
		fConst731 = (1.0f / fConst730); // step: 3570
		fConst732 = (2.0f * (4.0767817f - fConst731)); // step: 3572
		fConst733 = (0.0017661728f / fConst730); // step: 3579
		fConst734 = (fConst733 + 0.0004076782f); // step: 3580
		fConst735 = (2.0f * (0.0004076782f - fConst733)); // step: 3583
		fConst736 = (((fConst709 + -0.74313045f) / fConst708) + 1.4500711f); // step: 3592
		fConst737 = (2.0f * (1.4500711f - fConst731)); // step: 3596
		fConst738 = (11.0520525f / fConst730); // step: 3603
		fConst739 = (fConst738 + 1.4500711f); // step: 3604
		fConst740 = (2.0f * (1.4500711f - fConst738)); // step: 3607
		fConst741 = (((fConst709 + -0.15748216f) / fConst708) + 0.9351402f); // step: 3616
		fConst742 = (2.0f * (0.9351402f - fConst731)); // step: 3620
		fConst743 = (50.06381f / fConst730); // step: 3627
		fConst744 = (fConst743 + 0.9351402f); // step: 3628
		fConst745 = (2.0f * (0.9351402f - fConst743)); // step: 3631
		fConst746 = tanf((494.76984f / fConst0)); // step: 3651
		fConst747 = (1.0f / fConst746); // step: 3652
		fConst748 = (1.0f / (((fConst747 + 0.15748216f) / fConst746) + 0.9351402f)); // step: 3656
		fConst749 = (1.0f / (((fConst747 + 0.74313045f) / fConst746) + 1.4500711f)); // step: 3660
		fConst750 = (1.0f / (((fConst747 + 3.1897273f) / fConst746) + 4.0767817f)); // step: 3664
		fConst751 = (1.0f / (((fConst709 + 0.16840488f) / fConst708) + 1.0693583f)); // step: 3668
		fConst752 = (1.0f / (((fConst709 + 0.51247865f) / fConst708) + 0.6896214f)); // step: 3672
		fConst753 = (1.0f / (((fConst709 + 0.78241307f) / fConst708) + 0.2452915f)); // step: 3676
		fConst754 = (((fConst709 + -0.78241307f) / fConst708) + 0.2452915f); // step: 3680
		fConst755 = (2.0f * (0.2452915f - fConst731)); // step: 3684
		fConst756 = (0.0001f / fConst730); // step: 3691
		fConst757 = (fConst756 + 0.0004332272f); // step: 3692
		fConst758 = (2.0f * (0.0004332272f - fConst756)); // step: 3695
		fConst759 = (((fConst709 + -0.51247865f) / fConst708) + 0.6896214f); // step: 3704
		fConst760 = (2.0f * (0.6896214f - fConst731)); // step: 3708
		fConst761 = (fConst731 + 7.6217313f); // step: 3715
		fConst762 = (2.0f * (7.6217313f - fConst731)); // step: 3718
		fConst763 = (((fConst709 + -0.16840488f) / fConst708) + 1.0693583f); // step: 3727
		fConst764 = (2.0f * (1.0693583f - fConst731)); // step: 3731
		fConst765 = (fConst731 + 53.53615f); // step: 3738
		fConst766 = (2.0f * (53.53615f - fConst731)); // step: 3741
		fConst767 = (((fConst747 + -3.1897273f) / fConst746) + 4.0767817f); // step: 3750
		fConst768 = powf(fConst746,2.0f); // step: 3753
		fConst769 = (1.0f / fConst768); // step: 3754
		fConst770 = (2.0f * (4.0767817f - fConst769)); // step: 3756
		fConst771 = (0.0017661728f / fConst768); // step: 3763
		fConst772 = (fConst771 + 0.0004076782f); // step: 3764
		fConst773 = (2.0f * (0.0004076782f - fConst771)); // step: 3767
		fConst774 = (((fConst747 + -0.74313045f) / fConst746) + 1.4500711f); // step: 3776
		fConst775 = (2.0f * (1.4500711f - fConst769)); // step: 3780
		fConst776 = (11.0520525f / fConst768); // step: 3787
		fConst777 = (fConst776 + 1.4500711f); // step: 3788
		fConst778 = (2.0f * (1.4500711f - fConst776)); // step: 3791
		fConst779 = (((fConst747 + -0.15748216f) / fConst746) + 0.9351402f); // step: 3800
		fConst780 = (2.0f * (0.9351402f - fConst769)); // step: 3804
		fConst781 = (50.06381f / fConst768); // step: 3811
		fConst782 = (fConst781 + 0.9351402f); // step: 3812
		fConst783 = (2.0f * (0.9351402f - fConst781)); // step: 3815
		fConst784 = tanf((392.6991f / fConst0)); // step: 3835
		fConst785 = (1.0f / fConst784); // step: 3836
		fConst786 = (1.0f / (((fConst785 + 0.15748216f) / fConst784) + 0.9351402f)); // step: 3840
		fConst787 = (1.0f / (((fConst785 + 0.74313045f) / fConst784) + 1.4500711f)); // step: 3844
		fConst788 = (1.0f / (((fConst785 + 3.1897273f) / fConst784) + 4.0767817f)); // step: 3848
		fConst789 = (1.0f / (((fConst747 + 0.16840488f) / fConst746) + 1.0693583f)); // step: 3852
		fConst790 = (1.0f / (((fConst747 + 0.51247865f) / fConst746) + 0.6896214f)); // step: 3856
		fConst791 = (1.0f / (((fConst747 + 0.78241307f) / fConst746) + 0.2452915f)); // step: 3860
		fConst792 = (((fConst747 + -0.78241307f) / fConst746) + 0.2452915f); // step: 3864
		fConst793 = (2.0f * (0.2452915f - fConst769)); // step: 3868
		fConst794 = (0.0001f / fConst768); // step: 3875
		fConst795 = (fConst794 + 0.0004332272f); // step: 3876
		fConst796 = (2.0f * (0.0004332272f - fConst794)); // step: 3879
		fConst797 = (((fConst747 + -0.51247865f) / fConst746) + 0.6896214f); // step: 3888
		fConst798 = (2.0f * (0.6896214f - fConst769)); // step: 3892
		fConst799 = (fConst769 + 7.6217313f); // step: 3899
		fConst800 = (2.0f * (7.6217313f - fConst769)); // step: 3902
		fConst801 = (((fConst747 + -0.16840488f) / fConst746) + 1.0693583f); // step: 3911
		fConst802 = (2.0f * (1.0693583f - fConst769)); // step: 3915
		fConst803 = (fConst769 + 53.53615f); // step: 3922
		fConst804 = (2.0f * (53.53615f - fConst769)); // step: 3925
		fConst805 = (((fConst785 + -3.1897273f) / fConst784) + 4.0767817f); // step: 3934
		fConst806 = powf(fConst784,2.0f); // step: 3937
		fConst807 = (1.0f / fConst806); // step: 3938
		fConst808 = (2.0f * (4.0767817f - fConst807)); // step: 3940
		fConst809 = (0.0017661728f / fConst806); // step: 3947
		fConst810 = (fConst809 + 0.0004076782f); // step: 3948
		fConst811 = (2.0f * (0.0004076782f - fConst809)); // step: 3951
		fConst812 = (((fConst785 + -0.74313045f) / fConst784) + 1.4500711f); // step: 3960
		fConst813 = (2.0f * (1.4500711f - fConst807)); // step: 3964
		fConst814 = (11.0520525f / fConst806); // step: 3971
		fConst815 = (fConst814 + 1.4500711f); // step: 3972
		fConst816 = (2.0f * (1.4500711f - fConst814)); // step: 3975
		fConst817 = (((fConst785 + -0.15748216f) / fConst784) + 0.9351402f); // step: 3984
		fConst818 = (2.0f * (0.9351402f - fConst807)); // step: 3988
		fConst819 = (50.06381f / fConst806); // step: 3995
		fConst820 = (fConst819 + 0.9351402f); // step: 3996
		fConst821 = (2.0f * (0.9351402f - fConst819)); // step: 3999
		fConst822 = tanf((311.68546f / fConst0)); // step: 4019
		fConst823 = (1.0f / fConst822); // step: 4020
		fConst824 = (1.0f / (((fConst823 + 0.15748216f) / fConst822) + 0.9351402f)); // step: 4024
		fConst825 = (1.0f / (((fConst823 + 0.74313045f) / fConst822) + 1.4500711f)); // step: 4028
		fConst826 = (1.0f / (((fConst823 + 3.1897273f) / fConst822) + 4.0767817f)); // step: 4032
		fConst827 = (1.0f / (((fConst785 + 0.16840488f) / fConst784) + 1.0693583f)); // step: 4036
		fConst828 = (1.0f / (((fConst785 + 0.51247865f) / fConst784) + 0.6896214f)); // step: 4040
		fConst829 = (1.0f / (((fConst785 + 0.78241307f) / fConst784) + 0.2452915f)); // step: 4044
		fConst830 = (((fConst785 + -0.78241307f) / fConst784) + 0.2452915f); // step: 4048
		fConst831 = (2.0f * (0.2452915f - fConst807)); // step: 4052
		fConst832 = (0.0001f / fConst806); // step: 4059
		fConst833 = (fConst832 + 0.0004332272f); // step: 4060
		fConst834 = (2.0f * (0.0004332272f - fConst832)); // step: 4063
		fConst835 = (((fConst785 + -0.51247865f) / fConst784) + 0.6896214f); // step: 4072
		fConst836 = (2.0f * (0.6896214f - fConst807)); // step: 4076
		fConst837 = (fConst807 + 7.6217313f); // step: 4083
		fConst838 = (2.0f * (7.6217313f - fConst807)); // step: 4086
		fConst839 = (((fConst785 + -0.16840488f) / fConst784) + 1.0693583f); // step: 4095
		fConst840 = (2.0f * (1.0693583f - fConst807)); // step: 4099
		fConst841 = (fConst807 + 53.53615f); // step: 4106
		fConst842 = (2.0f * (53.53615f - fConst807)); // step: 4109
		fConst843 = (((fConst823 + -3.1897273f) / fConst822) + 4.0767817f); // step: 4118
		fConst844 = powf(fConst822,2.0f); // step: 4121
		fConst845 = (1.0f / fConst844); // step: 4122
		fConst846 = (2.0f * (4.0767817f - fConst845)); // step: 4124
		fConst847 = (0.0017661728f / fConst844); // step: 4131
		fConst848 = (fConst847 + 0.0004076782f); // step: 4132
		fConst849 = (2.0f * (0.0004076782f - fConst847)); // step: 4135
		fConst850 = (((fConst823 + -0.74313045f) / fConst822) + 1.4500711f); // step: 4144
		fConst851 = (2.0f * (1.4500711f - fConst845)); // step: 4148
		fConst852 = (11.0520525f / fConst844); // step: 4155
		fConst853 = (fConst852 + 1.4500711f); // step: 4156
		fConst854 = (2.0f * (1.4500711f - fConst852)); // step: 4159
		fConst855 = (((fConst823 + -0.15748216f) / fConst822) + 0.9351402f); // step: 4168
		fConst856 = (2.0f * (0.9351402f - fConst845)); // step: 4172
		fConst857 = (50.06381f / fConst844); // step: 4179
		fConst858 = (fConst857 + 0.9351402f); // step: 4180
		fConst859 = (2.0f * (0.9351402f - fConst857)); // step: 4183
		fConst860 = tanf((247.38492f / fConst0)); // step: 4203
		fConst861 = (1.0f / fConst860); // step: 4204
		fConst862 = (1.0f / (((fConst861 + 0.15748216f) / fConst860) + 0.9351402f)); // step: 4208
		fConst863 = (1.0f / (((fConst861 + 0.74313045f) / fConst860) + 1.4500711f)); // step: 4212
		fConst864 = (1.0f / (((fConst861 + 3.1897273f) / fConst860) + 4.0767817f)); // step: 4216
		fConst865 = (1.0f / (((fConst823 + 0.16840488f) / fConst822) + 1.0693583f)); // step: 4220
		fConst866 = (1.0f / (((fConst823 + 0.51247865f) / fConst822) + 0.6896214f)); // step: 4224
		fConst867 = (1.0f / (((fConst823 + 0.78241307f) / fConst822) + 0.2452915f)); // step: 4228
		fConst868 = (((fConst823 + -0.78241307f) / fConst822) + 0.2452915f); // step: 4232
		fConst869 = (2.0f * (0.2452915f - fConst845)); // step: 4236
		fConst870 = (0.0001f / fConst844); // step: 4243
		fConst871 = (fConst870 + 0.0004332272f); // step: 4244
		fConst872 = (2.0f * (0.0004332272f - fConst870)); // step: 4247
		fConst873 = (((fConst823 + -0.51247865f) / fConst822) + 0.6896214f); // step: 4256
		fConst874 = (2.0f * (0.6896214f - fConst845)); // step: 4260
		fConst875 = (fConst845 + 7.6217313f); // step: 4267
		fConst876 = (2.0f * (7.6217313f - fConst845)); // step: 4270
		fConst877 = (((fConst823 + -0.16840488f) / fConst822) + 1.0693583f); // step: 4279
		fConst878 = (2.0f * (1.0693583f - fConst845)); // step: 4283
		fConst879 = (fConst845 + 53.53615f); // step: 4290
		fConst880 = (2.0f * (53.53615f - fConst845)); // step: 4293
		fConst881 = (((fConst861 + -3.1897273f) / fConst860) + 4.0767817f); // step: 4302
		fConst882 = powf(fConst860,2.0f); // step: 4305
		fConst883 = (1.0f / fConst882); // step: 4306
		fConst884 = (2.0f * (4.0767817f - fConst883)); // step: 4308
		fConst885 = (0.0017661728f / fConst882); // step: 4315
		fConst886 = (fConst885 + 0.0004076782f); // step: 4316
		fConst887 = (2.0f * (0.0004076782f - fConst885)); // step: 4319
		fConst888 = (((fConst861 + -0.74313045f) / fConst860) + 1.4500711f); // step: 4328
		fConst889 = (2.0f * (1.4500711f - fConst883)); // step: 4332
		fConst890 = (11.0520525f / fConst882); // step: 4339
		fConst891 = (fConst890 + 1.4500711f); // step: 4340
		fConst892 = (2.0f * (1.4500711f - fConst890)); // step: 4343
		fConst893 = (((fConst861 + -0.15748216f) / fConst860) + 0.9351402f); // step: 4352
		fConst894 = (2.0f * (0.9351402f - fConst883)); // step: 4356
		fConst895 = (50.06381f / fConst882); // step: 4363
		fConst896 = (fConst895 + 0.9351402f); // step: 4364
		fConst897 = (2.0f * (0.9351402f - fConst895)); // step: 4367
		fConst898 = tanf((196.34955f / fConst0)); // step: 4387
		fConst899 = (1.0f / fConst898); // step: 4388
		fConst900 = (1.0f / (((fConst899 + 0.15748216f) / fConst898) + 0.9351402f)); // step: 4392
		fConst901 = (1.0f / (((fConst899 + 0.74313045f) / fConst898) + 1.4500711f)); // step: 4396
		fConst902 = (1.0f / (((fConst899 + 3.1897273f) / fConst898) + 4.0767817f)); // step: 4400
		fConst903 = (1.0f / (((fConst861 + 0.16840488f) / fConst860) + 1.0693583f)); // step: 4404
		fConst904 = (1.0f / (((fConst861 + 0.51247865f) / fConst860) + 0.6896214f)); // step: 4408
		fConst905 = (1.0f / (((fConst861 + 0.78241307f) / fConst860) + 0.2452915f)); // step: 4412
		fConst906 = (((fConst861 + -0.78241307f) / fConst860) + 0.2452915f); // step: 4416
		fConst907 = (2.0f * (0.2452915f - fConst883)); // step: 4420
		fConst908 = (0.0001f / fConst882); // step: 4427
		fConst909 = (fConst908 + 0.0004332272f); // step: 4428
		fConst910 = (2.0f * (0.0004332272f - fConst908)); // step: 4431
		fConst911 = (((fConst861 + -0.51247865f) / fConst860) + 0.6896214f); // step: 4440
		fConst912 = (2.0f * (0.6896214f - fConst883)); // step: 4444
		fConst913 = (fConst883 + 7.6217313f); // step: 4451
		fConst914 = (2.0f * (7.6217313f - fConst883)); // step: 4454
		fConst915 = (((fConst861 + -0.16840488f) / fConst860) + 1.0693583f); // step: 4463
		fConst916 = (2.0f * (1.0693583f - fConst883)); // step: 4467
		fConst917 = (fConst883 + 53.53615f); // step: 4474
		fConst918 = (2.0f * (53.53615f - fConst883)); // step: 4477
		fConst919 = (((fConst899 + -3.1897273f) / fConst898) + 4.0767817f); // step: 4486
		fConst920 = powf(fConst898,2.0f); // step: 4489
		fConst921 = (1.0f / fConst920); // step: 4490
		fConst922 = (2.0f * (4.0767817f - fConst921)); // step: 4492
		fConst923 = (0.0017661728f / fConst920); // step: 4499
		fConst924 = (fConst923 + 0.0004076782f); // step: 4500
		fConst925 = (2.0f * (0.0004076782f - fConst923)); // step: 4503
		fConst926 = (((fConst899 + -0.74313045f) / fConst898) + 1.4500711f); // step: 4512
		fConst927 = (2.0f * (1.4500711f - fConst921)); // step: 4516
		fConst928 = (11.0520525f / fConst920); // step: 4523
		fConst929 = (fConst928 + 1.4500711f); // step: 4524
		fConst930 = (2.0f * (1.4500711f - fConst928)); // step: 4527
		fConst931 = (((fConst899 + -0.15748216f) / fConst898) + 0.9351402f); // step: 4536
		fConst932 = (2.0f * (0.9351402f - fConst921)); // step: 4540
		fConst933 = (50.06381f / fConst920); // step: 4547
		fConst934 = (fConst933 + 0.9351402f); // step: 4548
		fConst935 = (2.0f * (0.9351402f - fConst933)); // step: 4551
		fConst936 = tanf((155.84273f / fConst0)); // step: 4571
		fConst937 = (1.0f / fConst936); // step: 4572
		fConst938 = (1.0f / (((fConst937 + 0.15748216f) / fConst936) + 0.9351402f)); // step: 4576
		fConst939 = (1.0f / (((fConst937 + 0.74313045f) / fConst936) + 1.4500711f)); // step: 4580
		fConst940 = (1.0f / (((fConst937 + 3.1897273f) / fConst936) + 4.0767817f)); // step: 4584
		fConst941 = (1.0f / (((fConst899 + 0.16840488f) / fConst898) + 1.0693583f)); // step: 4588
		fConst942 = (1.0f / (((fConst899 + 0.51247865f) / fConst898) + 0.6896214f)); // step: 4592
		fConst943 = (1.0f / (((fConst899 + 0.78241307f) / fConst898) + 0.2452915f)); // step: 4596
		fConst944 = (((fConst899 + -0.78241307f) / fConst898) + 0.2452915f); // step: 4600
		fConst945 = (2.0f * (0.2452915f - fConst921)); // step: 4604
		fConst946 = (0.0001f / fConst920); // step: 4611
		fConst947 = (fConst946 + 0.0004332272f); // step: 4612
		fConst948 = (2.0f * (0.0004332272f - fConst946)); // step: 4615
		fConst949 = (((fConst899 + -0.51247865f) / fConst898) + 0.6896214f); // step: 4624
		fConst950 = (2.0f * (0.6896214f - fConst921)); // step: 4628
		fConst951 = (fConst921 + 7.6217313f); // step: 4635
		fConst952 = (2.0f * (7.6217313f - fConst921)); // step: 4638
		fConst953 = (((fConst899 + -0.16840488f) / fConst898) + 1.0693583f); // step: 4647
		fConst954 = (2.0f * (1.0693583f - fConst921)); // step: 4651
		fConst955 = (fConst921 + 53.53615f); // step: 4658
		fConst956 = (2.0f * (53.53615f - fConst921)); // step: 4661
		fConst957 = (((fConst937 + -3.1897273f) / fConst936) + 4.0767817f); // step: 4670
		fConst958 = powf(fConst936,2.0f); // step: 4673
		fConst959 = (1.0f / fConst958); // step: 4674
		fConst960 = (2.0f * (4.0767817f - fConst959)); // step: 4676
		fConst961 = (0.0017661728f / fConst958); // step: 4683
		fConst962 = (fConst961 + 0.0004076782f); // step: 4684
		fConst963 = (2.0f * (0.0004076782f - fConst961)); // step: 4687
		fConst964 = (((fConst937 + -0.74313045f) / fConst936) + 1.4500711f); // step: 4696
		fConst965 = (2.0f * (1.4500711f - fConst959)); // step: 4700
		fConst966 = (11.0520525f / fConst958); // step: 4707
		fConst967 = (fConst966 + 1.4500711f); // step: 4708
		fConst968 = (2.0f * (1.4500711f - fConst966)); // step: 4711
		fConst969 = (((fConst937 + -0.15748216f) / fConst936) + 0.9351402f); // step: 4720
		fConst970 = (2.0f * (0.9351402f - fConst959)); // step: 4724
		fConst971 = (50.06381f / fConst958); // step: 4731
		fConst972 = (fConst971 + 0.9351402f); // step: 4732
		fConst973 = (2.0f * (0.9351402f - fConst971)); // step: 4735
		fConst974 = tanf((123.69246f / fConst0)); // step: 4755
		fConst975 = (1.0f / fConst974); // step: 4756
		fConst976 = (1.0f / (((fConst975 + 0.15748216f) / fConst974) + 0.9351402f)); // step: 4760
		fConst977 = (1.0f / (((fConst975 + 0.74313045f) / fConst974) + 1.4500711f)); // step: 4764
		fConst978 = (1.0f / (((fConst975 + 3.1897273f) / fConst974) + 4.0767817f)); // step: 4768
		fConst979 = (1.0f / (((fConst937 + 0.16840488f) / fConst936) + 1.0693583f)); // step: 4772
		fConst980 = (1.0f / (((fConst937 + 0.51247865f) / fConst936) + 0.6896214f)); // step: 4776
		fConst981 = (1.0f / (((fConst937 + 0.78241307f) / fConst936) + 0.2452915f)); // step: 4780
		fConst982 = (((fConst937 + -0.78241307f) / fConst936) + 0.2452915f); // step: 4784
		fConst983 = (2.0f * (0.2452915f - fConst959)); // step: 4788
		fConst984 = (0.0001f / fConst958); // step: 4795
		fConst985 = (fConst984 + 0.0004332272f); // step: 4796
		fConst986 = (2.0f * (0.0004332272f - fConst984)); // step: 4799
		fConst987 = (((fConst937 + -0.51247865f) / fConst936) + 0.6896214f); // step: 4808
		fConst988 = (2.0f * (0.6896214f - fConst959)); // step: 4812
		fConst989 = (fConst959 + 7.6217313f); // step: 4819
		fConst990 = (2.0f * (7.6217313f - fConst959)); // step: 4822
		fConst991 = (((fConst937 + -0.16840488f) / fConst936) + 1.0693583f); // step: 4831
		fConst992 = (2.0f * (1.0693583f - fConst959)); // step: 4835
		fConst993 = (fConst959 + 53.53615f); // step: 4842
		fConst994 = (2.0f * (53.53615f - fConst959)); // step: 4845
		fConst995 = (((fConst975 + -3.1897273f) / fConst974) + 4.0767817f); // step: 4854
		fConst996 = powf(fConst974,2.0f); // step: 4857
		fConst997 = (1.0f / fConst996); // step: 4858
		fConst998 = (2.0f * (4.0767817f - fConst997)); // step: 4860
		fConst999 = (0.0017661728f / fConst996); // step: 4867
		fConst1000 = (fConst999 + 0.0004076782f); // step: 4868
		fConst1001 = (2.0f * (0.0004076782f - fConst999)); // step: 4871
		fConst1002 = (((fConst975 + -0.74313045f) / fConst974) + 1.4500711f); // step: 4880
		fConst1003 = (2.0f * (1.4500711f - fConst997)); // step: 4884
		fConst1004 = (11.0520525f / fConst996); // step: 4891
		fConst1005 = (fConst1004 + 1.4500711f); // step: 4892
		fConst1006 = (2.0f * (1.4500711f - fConst1004)); // step: 4895
		fConst1007 = (((fConst975 + -0.15748216f) / fConst974) + 0.9351402f); // step: 4904
		fConst1008 = (2.0f * (0.9351402f - fConst997)); // step: 4908
		fConst1009 = (50.06381f / fConst996); // step: 4915
		fConst1010 = (fConst1009 + 0.9351402f); // step: 4916
		fConst1011 = (2.0f * (0.9351402f - fConst1009)); // step: 4919
		fConst1012 = tanf((98.174774f / fConst0)); // step: 4939
		fConst1013 = (1.0f / fConst1012); // step: 4940
		fConst1014 = (1.0f / (((fConst1013 + 0.15748216f) / fConst1012) + 0.9351402f)); // step: 4944
		fConst1015 = (1.0f / (((fConst1013 + 0.74313045f) / fConst1012) + 1.4500711f)); // step: 4948
		fConst1016 = (1.0f / (((fConst1013 + 3.1897273f) / fConst1012) + 4.0767817f)); // step: 4952
		fConst1017 = (1.0f / (((fConst975 + 0.16840488f) / fConst974) + 1.0693583f)); // step: 4956
		fConst1018 = (1.0f / (((fConst975 + 0.51247865f) / fConst974) + 0.6896214f)); // step: 4960
		fConst1019 = (1.0f / (((fConst975 + 0.78241307f) / fConst974) + 0.2452915f)); // step: 4964
		fConst1020 = (((fConst975 + -0.78241307f) / fConst974) + 0.2452915f); // step: 4968
		fConst1021 = (2.0f * (0.2452915f - fConst997)); // step: 4972
		fConst1022 = (0.0001f / fConst996); // step: 4979
		fConst1023 = (fConst1022 + 0.0004332272f); // step: 4980
		fConst1024 = (2.0f * (0.0004332272f - fConst1022)); // step: 4983
		fConst1025 = (((fConst975 + -0.51247865f) / fConst974) + 0.6896214f); // step: 4992
		fConst1026 = (2.0f * (0.6896214f - fConst997)); // step: 4996
		fConst1027 = (fConst997 + 7.6217313f); // step: 5003
		fConst1028 = (2.0f * (7.6217313f - fConst997)); // step: 5006
		fConst1029 = (((fConst975 + -0.16840488f) / fConst974) + 1.0693583f); // step: 5015
		fConst1030 = (2.0f * (1.0693583f - fConst997)); // step: 5019
		fConst1031 = (fConst997 + 53.53615f); // step: 5026
		fConst1032 = (2.0f * (53.53615f - fConst997)); // step: 5029
		fConst1033 = (((fConst1013 + -3.1897273f) / fConst1012) + 4.0767817f); // step: 5038
		fConst1034 = powf(fConst1012,2.0f); // step: 5041
		fConst1035 = (1.0f / fConst1034); // step: 5042
		fConst1036 = (2.0f * (4.0767817f - fConst1035)); // step: 5044
		fConst1037 = (0.0017661728f / fConst1034); // step: 5051
		fConst1038 = (fConst1037 + 0.0004076782f); // step: 5052
		fConst1039 = (2.0f * (0.0004076782f - fConst1037)); // step: 5055
		fConst1040 = (((fConst1013 + -0.74313045f) / fConst1012) + 1.4500711f); // step: 5064
		fConst1041 = (2.0f * (1.4500711f - fConst1035)); // step: 5068
		fConst1042 = (11.0520525f / fConst1034); // step: 5075
		fConst1043 = (fConst1042 + 1.4500711f); // step: 5076
		fConst1044 = (2.0f * (1.4500711f - fConst1042)); // step: 5079
		fConst1045 = (((fConst1013 + -0.15748216f) / fConst1012) + 0.9351402f); // step: 5088
		fConst1046 = (2.0f * (0.9351402f - fConst1035)); // step: 5092
		fConst1047 = (50.06381f / fConst1034); // step: 5099
		fConst1048 = (fConst1047 + 0.9351402f); // step: 5100
		fConst1049 = (2.0f * (0.9351402f - fConst1047)); // step: 5103
		fConst1050 = tanf((77.921364f / fConst0)); // step: 5123
		fConst1051 = (1.0f / fConst1050); // step: 5124
		fConst1052 = (1.0f / (((fConst1051 + 0.15748216f) / fConst1050) + 0.9351402f)); // step: 5128
		fConst1053 = (1.0f / (((fConst1051 + 0.74313045f) / fConst1050) + 1.4500711f)); // step: 5132
		fConst1054 = (1.0f / (((fConst1051 + 3.1897273f) / fConst1050) + 4.0767817f)); // step: 5136
		fConst1055 = (1.0f / (((fConst1013 + 0.16840488f) / fConst1012) + 1.0693583f)); // step: 5140
		fConst1056 = (1.0f / (((fConst1013 + 0.51247865f) / fConst1012) + 0.6896214f)); // step: 5144
		fConst1057 = (1.0f / (((fConst1013 + 0.78241307f) / fConst1012) + 0.2452915f)); // step: 5148
		fConst1058 = (((fConst1013 + -0.78241307f) / fConst1012) + 0.2452915f); // step: 5152
		fConst1059 = (2.0f * (0.2452915f - fConst1035)); // step: 5156
		fConst1060 = (0.0001f / fConst1034); // step: 5163
		fConst1061 = (fConst1060 + 0.0004332272f); // step: 5164
		fConst1062 = (2.0f * (0.0004332272f - fConst1060)); // step: 5167
		fConst1063 = (((fConst1013 + -0.51247865f) / fConst1012) + 0.6896214f); // step: 5176
		fConst1064 = (2.0f * (0.6896214f - fConst1035)); // step: 5180
		fConst1065 = (fConst1035 + 7.6217313f); // step: 5187
		fConst1066 = (2.0f * (7.6217313f - fConst1035)); // step: 5190
		fConst1067 = (((fConst1013 + -0.16840488f) / fConst1012) + 1.0693583f); // step: 5199
		fConst1068 = (2.0f * (1.0693583f - fConst1035)); // step: 5203
		fConst1069 = (fConst1035 + 53.53615f); // step: 5210
		fConst1070 = (2.0f * (53.53615f - fConst1035)); // step: 5213
		fConst1071 = (((fConst1051 + -3.1897273f) / fConst1050) + 4.0767817f); // step: 5222
		fConst1072 = powf(fConst1050,2.0f); // step: 5225
		fConst1073 = (1.0f / fConst1072); // step: 5226
		fConst1074 = (2.0f * (4.0767817f - fConst1073)); // step: 5228
		fConst1075 = (0.0017661728f / fConst1072); // step: 5235
		fConst1076 = (fConst1075 + 0.0004076782f); // step: 5236
		fConst1077 = (2.0f * (0.0004076782f - fConst1075)); // step: 5239
		fConst1078 = (((fConst1051 + -0.74313045f) / fConst1050) + 1.4500711f); // step: 5248
		fConst1079 = (2.0f * (1.4500711f - fConst1073)); // step: 5252
		fConst1080 = (11.0520525f / fConst1072); // step: 5259
		fConst1081 = (fConst1080 + 1.4500711f); // step: 5260
		fConst1082 = (2.0f * (1.4500711f - fConst1080)); // step: 5263
		fConst1083 = (((fConst1051 + -0.15748216f) / fConst1050) + 0.9351402f); // step: 5272
		fConst1084 = (2.0f * (0.9351402f - fConst1073)); // step: 5276
		fConst1085 = (50.06381f / fConst1072); // step: 5283
		fConst1086 = (fConst1085 + 0.9351402f); // step: 5284
		fConst1087 = (2.0f * (0.9351402f - fConst1085)); // step: 5287
		fConst1088 = (1.0f / (((fConst1051 + 0.16840488f) / fConst1050) + 1.0693583f)); // step: 5308
		fConst1089 = (1.0f / (((fConst1051 + 0.51247865f) / fConst1050) + 0.6896214f)); // step: 5312
		fConst1090 = (1.0f / (((fConst1051 + 0.78241307f) / fConst1050) + 0.2452915f)); // step: 5316
		fConst1091 = (((fConst1051 + -0.78241307f) / fConst1050) + 0.2452915f); // step: 5320
		fConst1092 = (2.0f * (0.2452915f - fConst1073)); // step: 5324
		fConst1093 = (0.0001f / fConst1072); // step: 5331
		fConst1094 = (fConst1093 + 0.0004332272f); // step: 5332
		fConst1095 = (2.0f * (0.0004332272f - fConst1093)); // step: 5335
		fConst1096 = (((fConst1051 + -0.51247865f) / fConst1050) + 0.6896214f); // step: 5344
		fConst1097 = (2.0f * (0.6896214f - fConst1073)); // step: 5348
		fConst1098 = (fConst1073 + 7.6217313f); // step: 5355
		fConst1099 = (2.0f * (7.6217313f - fConst1073)); // step: 5358
		fConst1100 = (((fConst1051 + -0.16840488f) / fConst1050) + 1.0693583f); // step: 5367
		fConst1101 = (2.0f * (1.0693583f - fConst1073)); // step: 5371
		fConst1102 = (fConst1073 + 53.53615f); // step: 5378
		fConst1103 = (2.0f * (53.53615f - fConst1073)); // step: 5381
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 5e+01f;
		fslider1 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 2; j++) { fVeeec1State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec4State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec7State[j] = 0; }
		fVeeec0State = 0;
		for (int j = 0; j < 2; j++) { fVeeec12State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec15State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec18State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec21State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec24State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec27State[j] = 0; }
		fVeeec11State = 0;
		for (int j = 0; j < 2; j++) { fVeeec32State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec35State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec38State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec41State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec44State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec47State[j] = 0; }
		fVeeec31State = 0;
		for (int j = 0; j < 2; j++) { fVeeec52State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec55State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec58State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec61State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec64State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec67State[j] = 0; }
		fVeeec51State = 0;
		for (int j = 0; j < 2; j++) { fVeeec72State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec75State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec78State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec81State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec84State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec87State[j] = 0; }
		fVeeec71State = 0;
		for (int j = 0; j < 2; j++) { fVeeec92State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec95State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec98State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec101State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec104State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec107State[j] = 0; }
		fVeeec91State = 0;
		for (int j = 0; j < 2; j++) { fVeeec112State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec115State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec118State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec121State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec124State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec127State[j] = 0; }
		fVeeec111State = 0;
		for (int j = 0; j < 2; j++) { fVeeec132State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec135State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec138State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec141State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec144State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec147State[j] = 0; }
		fVeeec131State = 0;
		for (int j = 0; j < 2; j++) { fVeeec152State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec155State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec158State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec161State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec164State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec167State[j] = 0; }
		fVeeec151State = 0;
		for (int j = 0; j < 2; j++) { fVeeec172State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec175State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec178State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec181State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec184State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec187State[j] = 0; }
		fVeeec171State = 0;
		for (int j = 0; j < 2; j++) { fVeeec192State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec195State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec198State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec201State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec204State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec207State[j] = 0; }
		fVeeec191State = 0;
		for (int j = 0; j < 2; j++) { fVeeec212State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec215State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec218State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec221State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec224State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec227State[j] = 0; }
		fVeeec211State = 0;
		for (int j = 0; j < 2; j++) { fVeeec232State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec235State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec238State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec241State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec244State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec247State[j] = 0; }
		fVeeec231State = 0;
		for (int j = 0; j < 2; j++) { fVeeec252State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec255State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec258State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec261State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec264State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec267State[j] = 0; }
		fVeeec251State = 0;
		for (int j = 0; j < 2; j++) { fVeeec272State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec275State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec278State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec281State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec284State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec287State[j] = 0; }
		fVeeec271State = 0;
		for (int j = 0; j < 2; j++) { fVeeec292State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec295State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec298State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec301State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec304State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec307State[j] = 0; }
		fVeeec291State = 0;
		for (int j = 0; j < 2; j++) { fVeeec312State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec315State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec318State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec321State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec324State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec327State[j] = 0; }
		fVeeec311State = 0;
		for (int j = 0; j < 2; j++) { fVeeec332State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec335State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec338State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec341State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec344State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec347State[j] = 0; }
		fVeeec331State = 0;
		for (int j = 0; j < 2; j++) { fVeeec352State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec355State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec358State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec361State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec364State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec367State[j] = 0; }
		fVeeec351State = 0;
		for (int j = 0; j < 2; j++) { fVeeec372State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec375State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec378State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec381State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec384State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec387State[j] = 0; }
		fVeeec371State = 0;
		for (int j = 0; j < 2; j++) { fVeeec392State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec395State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec398State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec401State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec404State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec407State[j] = 0; }
		fVeeec391State = 0;
		for (int j = 0; j < 2; j++) { fVeeec412State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec415State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec418State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec421State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec424State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec427State[j] = 0; }
		fVeeec411State = 0;
		for (int j = 0; j < 2; j++) { fVeeec432State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec435State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec438State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec441State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec444State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec447State[j] = 0; }
		fVeeec431State = 0;
		for (int j = 0; j < 2; j++) { fVeeec452State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec455State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec458State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec461State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec464State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec467State[j] = 0; }
		fVeeec451State = 0;
		for (int j = 0; j < 2; j++) { fVeeec472State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec475State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec478State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec481State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec484State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec487State[j] = 0; }
		fVeeec471State = 0;
		for (int j = 0; j < 2; j++) { fVeeec492State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec495State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec498State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec501State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec504State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec507State[j] = 0; }
		fVeeec491State = 0;
		for (int j = 0; j < 2; j++) { fVeeec512State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec515State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec518State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec521State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec524State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec527State[j] = 0; }
		fVeeec511State = 0;
		for (int j = 0; j < 2; j++) { fVeeec532State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec535State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec538State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec541State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec544State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec547State[j] = 0; }
		fVeeec531State = 0;
		for (int j = 0; j < 2; j++) { fVeeec552State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec555State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec558State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec561State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec564State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec567State[j] = 0; }
		fVeeec551State = 0;
		for (int j = 0; j < 2; j++) { fVeeec572State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec575State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec578State[j] = 0; }
		fVeeec571State = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("spectral_level");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 30 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph29, "0", "");
		ui_interface->declare(&fbargraph29, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph29, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph29, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph28, "1", "");
		ui_interface->declare(&fbargraph28, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph28, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph28, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph27, "2", "");
		ui_interface->declare(&fbargraph27, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph27, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph27, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph26, "3", "");
		ui_interface->declare(&fbargraph26, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph26, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph26, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph25, "4", "");
		ui_interface->declare(&fbargraph25, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph25, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph25, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph24, "5", "");
		ui_interface->declare(&fbargraph24, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph24, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph24, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph23, "6", "");
		ui_interface->declare(&fbargraph23, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph23, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph23, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph22, "7", "");
		ui_interface->declare(&fbargraph22, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph22, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph22, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph21, "8", "");
		ui_interface->declare(&fbargraph21, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph21, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph21, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph20, "9", "");
		ui_interface->declare(&fbargraph20, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph20, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph20, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph19, "10", "");
		ui_interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph19, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph18, "11", "");
		ui_interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph18, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph17, "12", "");
		ui_interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph17, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph16, "13", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph16, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph15, "14", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "15", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph15", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "16", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph16", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "17", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph17", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "18", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph18", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "19", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph19", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "20", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph20", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "21", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph21", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "22", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph22", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "23", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph23", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "24", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph24", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "25", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph25", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "26", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph26", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "27", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph27", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "28", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph28", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "29", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph29", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = float(fslider0); // step: 2
		float 	fSlow1 = ((1) ? expf(-(fConst1 / float(fslider1))) : 0.0f); // step: 21
		float 	fVeeec1[3];
		float 	fVeeec4[3];
		float 	fVeeec7[3];
		float 	fSlow2 = (1.0f - fSlow1); // step: 129
		float 	fVeeec0;
		float 	fVeeec12[3];
		float 	fVeeec15[3];
		float 	fVeeec18[3];
		float 	fVeeec21[3];
		float 	fVeeec24[3];
		float 	fVeeec27[3];
		float 	fVeeec11;
		float 	fVeeec32[3];
		float 	fVeeec35[3];
		float 	fVeeec38[3];
		float 	fVeeec41[3];
		float 	fVeeec44[3];
		float 	fVeeec47[3];
		float 	fVeeec31;
		float 	fVeeec52[3];
		float 	fVeeec55[3];
		float 	fVeeec58[3];
		float 	fVeeec61[3];
		float 	fVeeec64[3];
		float 	fVeeec67[3];
		float 	fVeeec51;
		float 	fVeeec72[3];
		float 	fVeeec75[3];
		float 	fVeeec78[3];
		float 	fVeeec81[3];
		float 	fVeeec84[3];
		float 	fVeeec87[3];
		float 	fVeeec71;
		float 	fVeeec92[3];
		float 	fVeeec95[3];
		float 	fVeeec98[3];
		float 	fVeeec101[3];
		float 	fVeeec104[3];
		float 	fVeeec107[3];
		float 	fVeeec91;
		float 	fVeeec112[3];
		float 	fVeeec115[3];
		float 	fVeeec118[3];
		float 	fVeeec121[3];
		float 	fVeeec124[3];
		float 	fVeeec127[3];
		float 	fVeeec111;
		float 	fVeeec132[3];
		float 	fVeeec135[3];
		float 	fVeeec138[3];
		float 	fVeeec141[3];
		float 	fVeeec144[3];
		float 	fVeeec147[3];
		float 	fVeeec131;
		float 	fVeeec152[3];
		float 	fVeeec155[3];
		float 	fVeeec158[3];
		float 	fVeeec161[3];
		float 	fVeeec164[3];
		float 	fVeeec167[3];
		float 	fVeeec151;
		float 	fVeeec172[3];
		float 	fVeeec175[3];
		float 	fVeeec178[3];
		float 	fVeeec181[3];
		float 	fVeeec184[3];
		float 	fVeeec187[3];
		float 	fVeeec171;
		float 	fVeeec192[3];
		float 	fVeeec195[3];
		float 	fVeeec198[3];
		float 	fVeeec201[3];
		float 	fVeeec204[3];
		float 	fVeeec207[3];
		float 	fVeeec191;
		float 	fVeeec212[3];
		float 	fVeeec215[3];
		float 	fVeeec218[3];
		float 	fVeeec221[3];
		float 	fVeeec224[3];
		float 	fVeeec227[3];
		float 	fVeeec211;
		float 	fVeeec232[3];
		float 	fVeeec235[3];
		float 	fVeeec238[3];
		float 	fVeeec241[3];
		float 	fVeeec244[3];
		float 	fVeeec247[3];
		float 	fVeeec231;
		float 	fVeeec252[3];
		float 	fVeeec255[3];
		float 	fVeeec258[3];
		float 	fVeeec261[3];
		float 	fVeeec264[3];
		float 	fVeeec267[3];
		float 	fVeeec251;
		float 	fVeeec272[3];
		float 	fVeeec275[3];
		float 	fVeeec278[3];
		float 	fVeeec281[3];
		float 	fVeeec284[3];
		float 	fVeeec287[3];
		float 	fVeeec271;
		float 	fVeeec292[3];
		float 	fVeeec295[3];
		float 	fVeeec298[3];
		float 	fVeeec301[3];
		float 	fVeeec304[3];
		float 	fVeeec307[3];
		float 	fVeeec291;
		float 	fVeeec312[3];
		float 	fVeeec315[3];
		float 	fVeeec318[3];
		float 	fVeeec321[3];
		float 	fVeeec324[3];
		float 	fVeeec327[3];
		float 	fVeeec311;
		float 	fVeeec332[3];
		float 	fVeeec335[3];
		float 	fVeeec338[3];
		float 	fVeeec341[3];
		float 	fVeeec344[3];
		float 	fVeeec347[3];
		float 	fVeeec331;
		float 	fVeeec352[3];
		float 	fVeeec355[3];
		float 	fVeeec358[3];
		float 	fVeeec361[3];
		float 	fVeeec364[3];
		float 	fVeeec367[3];
		float 	fVeeec351;
		float 	fVeeec372[3];
		float 	fVeeec375[3];
		float 	fVeeec378[3];
		float 	fVeeec381[3];
		float 	fVeeec384[3];
		float 	fVeeec387[3];
		float 	fVeeec371;
		float 	fVeeec392[3];
		float 	fVeeec395[3];
		float 	fVeeec398[3];
		float 	fVeeec401[3];
		float 	fVeeec404[3];
		float 	fVeeec407[3];
		float 	fVeeec391;
		float 	fVeeec412[3];
		float 	fVeeec415[3];
		float 	fVeeec418[3];
		float 	fVeeec421[3];
		float 	fVeeec424[3];
		float 	fVeeec427[3];
		float 	fVeeec411;
		float 	fVeeec432[3];
		float 	fVeeec435[3];
		float 	fVeeec438[3];
		float 	fVeeec441[3];
		float 	fVeeec444[3];
		float 	fVeeec447[3];
		float 	fVeeec431;
		float 	fVeeec452[3];
		float 	fVeeec455[3];
		float 	fVeeec458[3];
		float 	fVeeec461[3];
		float 	fVeeec464[3];
		float 	fVeeec467[3];
		float 	fVeeec451;
		float 	fVeeec472[3];
		float 	fVeeec475[3];
		float 	fVeeec478[3];
		float 	fVeeec481[3];
		float 	fVeeec484[3];
		float 	fVeeec487[3];
		float 	fVeeec471;
		float 	fVeeec492[3];
		float 	fVeeec495[3];
		float 	fVeeec498[3];
		float 	fVeeec501[3];
		float 	fVeeec504[3];
		float 	fVeeec507[3];
		float 	fVeeec491;
		float 	fVeeec512[3];
		float 	fVeeec515[3];
		float 	fVeeec518[3];
		float 	fVeeec521[3];
		float 	fVeeec524[3];
		float 	fVeeec527[3];
		float 	fVeeec511;
		float 	fVeeec532[3];
		float 	fVeeec535[3];
		float 	fVeeec538[3];
		float 	fVeeec541[3];
		float 	fVeeec544[3];
		float 	fVeeec547[3];
		float 	fVeeec531;
		float 	fVeeec552[3];
		float 	fVeeec555[3];
		float 	fVeeec558[3];
		float 	fVeeec561[3];
		float 	fVeeec564[3];
		float 	fVeeec567[3];
		float 	fVeeec551;
		float 	fVeeec572[3];
		float 	fVeeec575[3];
		float 	fVeeec578[3];
		float 	fVeeec571;
		int fullcount = count;
		for (int index = 0; index < fullcount; index += 32) {
			int count = min(32, fullcount-index);
			FAUSTFLOAT* input0 = &input[0][index]; // Zone 3
			FAUSTFLOAT* output0 = &output[0][index]; // Zone 3
			FAUSTFLOAT* output1 = &output[1][index]; // Zone 3
			fVeeec1[1] = fVeeec1State[0];
			fVeeec1[2] = fVeeec1State[1];
			fVeeec4[1] = fVeeec4State[0];
			fVeeec4[2] = fVeeec4State[1];
			fVeeec7[1] = fVeeec7State[0];
			fVeeec7[2] = fVeeec7State[1];
			fVeeec0 = fVeeec0State;
			fVeeec12[1] = fVeeec12State[0];
			fVeeec12[2] = fVeeec12State[1];
			fVeeec15[1] = fVeeec15State[0];
			fVeeec15[2] = fVeeec15State[1];
			fVeeec18[1] = fVeeec18State[0];
			fVeeec18[2] = fVeeec18State[1];
			fVeeec21[1] = fVeeec21State[0];
			fVeeec21[2] = fVeeec21State[1];
			fVeeec24[1] = fVeeec24State[0];
			fVeeec24[2] = fVeeec24State[1];
			fVeeec27[1] = fVeeec27State[0];
			fVeeec27[2] = fVeeec27State[1];
			fVeeec11 = fVeeec11State;
			fVeeec32[1] = fVeeec32State[0];
			fVeeec32[2] = fVeeec32State[1];
			fVeeec35[1] = fVeeec35State[0];
			fVeeec35[2] = fVeeec35State[1];
			fVeeec38[1] = fVeeec38State[0];
			fVeeec38[2] = fVeeec38State[1];
			fVeeec41[1] = fVeeec41State[0];
			fVeeec41[2] = fVeeec41State[1];
			fVeeec44[1] = fVeeec44State[0];
			fVeeec44[2] = fVeeec44State[1];
			fVeeec47[1] = fVeeec47State[0];
			fVeeec47[2] = fVeeec47State[1];
			fVeeec31 = fVeeec31State;
			fVeeec52[1] = fVeeec52State[0];
			fVeeec52[2] = fVeeec52State[1];
			fVeeec55[1] = fVeeec55State[0];
			fVeeec55[2] = fVeeec55State[1];
			fVeeec58[1] = fVeeec58State[0];
			fVeeec58[2] = fVeeec58State[1];
			fVeeec61[1] = fVeeec61State[0];
			fVeeec61[2] = fVeeec61State[1];
			fVeeec64[1] = fVeeec64State[0];
			fVeeec64[2] = fVeeec64State[1];
			fVeeec67[1] = fVeeec67State[0];
			fVeeec67[2] = fVeeec67State[1];
			fVeeec51 = fVeeec51State;
			fVeeec72[1] = fVeeec72State[0];
			fVeeec72[2] = fVeeec72State[1];
			fVeeec75[1] = fVeeec75State[0];
			fVeeec75[2] = fVeeec75State[1];
			fVeeec78[1] = fVeeec78State[0];
			fVeeec78[2] = fVeeec78State[1];
			fVeeec81[1] = fVeeec81State[0];
			fVeeec81[2] = fVeeec81State[1];
			fVeeec84[1] = fVeeec84State[0];
			fVeeec84[2] = fVeeec84State[1];
			fVeeec87[1] = fVeeec87State[0];
			fVeeec87[2] = fVeeec87State[1];
			fVeeec71 = fVeeec71State;
			fVeeec92[1] = fVeeec92State[0];
			fVeeec92[2] = fVeeec92State[1];
			fVeeec95[1] = fVeeec95State[0];
			fVeeec95[2] = fVeeec95State[1];
			fVeeec98[1] = fVeeec98State[0];
			fVeeec98[2] = fVeeec98State[1];
			fVeeec101[1] = fVeeec101State[0];
			fVeeec101[2] = fVeeec101State[1];
			fVeeec104[1] = fVeeec104State[0];
			fVeeec104[2] = fVeeec104State[1];
			fVeeec107[1] = fVeeec107State[0];
			fVeeec107[2] = fVeeec107State[1];
			fVeeec91 = fVeeec91State;
			fVeeec112[1] = fVeeec112State[0];
			fVeeec112[2] = fVeeec112State[1];
			fVeeec115[1] = fVeeec115State[0];
			fVeeec115[2] = fVeeec115State[1];
			fVeeec118[1] = fVeeec118State[0];
			fVeeec118[2] = fVeeec118State[1];
			fVeeec121[1] = fVeeec121State[0];
			fVeeec121[2] = fVeeec121State[1];
			fVeeec124[1] = fVeeec124State[0];
			fVeeec124[2] = fVeeec124State[1];
			fVeeec127[1] = fVeeec127State[0];
			fVeeec127[2] = fVeeec127State[1];
			fVeeec111 = fVeeec111State;
			fVeeec132[1] = fVeeec132State[0];
			fVeeec132[2] = fVeeec132State[1];
			fVeeec135[1] = fVeeec135State[0];
			fVeeec135[2] = fVeeec135State[1];
			fVeeec138[1] = fVeeec138State[0];
			fVeeec138[2] = fVeeec138State[1];
			fVeeec141[1] = fVeeec141State[0];
			fVeeec141[2] = fVeeec141State[1];
			fVeeec144[1] = fVeeec144State[0];
			fVeeec144[2] = fVeeec144State[1];
			fVeeec147[1] = fVeeec147State[0];
			fVeeec147[2] = fVeeec147State[1];
			fVeeec131 = fVeeec131State;
			fVeeec152[1] = fVeeec152State[0];
			fVeeec152[2] = fVeeec152State[1];
			fVeeec155[1] = fVeeec155State[0];
			fVeeec155[2] = fVeeec155State[1];
			fVeeec158[1] = fVeeec158State[0];
			fVeeec158[2] = fVeeec158State[1];
			fVeeec161[1] = fVeeec161State[0];
			fVeeec161[2] = fVeeec161State[1];
			fVeeec164[1] = fVeeec164State[0];
			fVeeec164[2] = fVeeec164State[1];
			fVeeec167[1] = fVeeec167State[0];
			fVeeec167[2] = fVeeec167State[1];
			fVeeec151 = fVeeec151State;
			fVeeec172[1] = fVeeec172State[0];
			fVeeec172[2] = fVeeec172State[1];
			fVeeec175[1] = fVeeec175State[0];
			fVeeec175[2] = fVeeec175State[1];
			fVeeec178[1] = fVeeec178State[0];
			fVeeec178[2] = fVeeec178State[1];
			fVeeec181[1] = fVeeec181State[0];
			fVeeec181[2] = fVeeec181State[1];
			fVeeec184[1] = fVeeec184State[0];
			fVeeec184[2] = fVeeec184State[1];
			fVeeec187[1] = fVeeec187State[0];
			fVeeec187[2] = fVeeec187State[1];
			fVeeec171 = fVeeec171State;
			fVeeec192[1] = fVeeec192State[0];
			fVeeec192[2] = fVeeec192State[1];
			fVeeec195[1] = fVeeec195State[0];
			fVeeec195[2] = fVeeec195State[1];
			fVeeec198[1] = fVeeec198State[0];
			fVeeec198[2] = fVeeec198State[1];
			fVeeec201[1] = fVeeec201State[0];
			fVeeec201[2] = fVeeec201State[1];
			fVeeec204[1] = fVeeec204State[0];
			fVeeec204[2] = fVeeec204State[1];
			fVeeec207[1] = fVeeec207State[0];
			fVeeec207[2] = fVeeec207State[1];
			fVeeec191 = fVeeec191State;
			fVeeec212[1] = fVeeec212State[0];
			fVeeec212[2] = fVeeec212State[1];
			fVeeec215[1] = fVeeec215State[0];
			fVeeec215[2] = fVeeec215State[1];
			fVeeec218[1] = fVeeec218State[0];
			fVeeec218[2] = fVeeec218State[1];
			fVeeec221[1] = fVeeec221State[0];
			fVeeec221[2] = fVeeec221State[1];
			fVeeec224[1] = fVeeec224State[0];
			fVeeec224[2] = fVeeec224State[1];
			fVeeec227[1] = fVeeec227State[0];
			fVeeec227[2] = fVeeec227State[1];
			fVeeec211 = fVeeec211State;
			fVeeec232[1] = fVeeec232State[0];
			fVeeec232[2] = fVeeec232State[1];
			fVeeec235[1] = fVeeec235State[0];
			fVeeec235[2] = fVeeec235State[1];
			fVeeec238[1] = fVeeec238State[0];
			fVeeec238[2] = fVeeec238State[1];
			fVeeec241[1] = fVeeec241State[0];
			fVeeec241[2] = fVeeec241State[1];
			fVeeec244[1] = fVeeec244State[0];
			fVeeec244[2] = fVeeec244State[1];
			fVeeec247[1] = fVeeec247State[0];
			fVeeec247[2] = fVeeec247State[1];
			fVeeec231 = fVeeec231State;
			fVeeec252[1] = fVeeec252State[0];
			fVeeec252[2] = fVeeec252State[1];
			fVeeec255[1] = fVeeec255State[0];
			fVeeec255[2] = fVeeec255State[1];
			fVeeec258[1] = fVeeec258State[0];
			fVeeec258[2] = fVeeec258State[1];
			fVeeec261[1] = fVeeec261State[0];
			fVeeec261[2] = fVeeec261State[1];
			fVeeec264[1] = fVeeec264State[0];
			fVeeec264[2] = fVeeec264State[1];
			fVeeec267[1] = fVeeec267State[0];
			fVeeec267[2] = fVeeec267State[1];
			fVeeec251 = fVeeec251State;
			fVeeec272[1] = fVeeec272State[0];
			fVeeec272[2] = fVeeec272State[1];
			fVeeec275[1] = fVeeec275State[0];
			fVeeec275[2] = fVeeec275State[1];
			fVeeec278[1] = fVeeec278State[0];
			fVeeec278[2] = fVeeec278State[1];
			fVeeec281[1] = fVeeec281State[0];
			fVeeec281[2] = fVeeec281State[1];
			fVeeec284[1] = fVeeec284State[0];
			fVeeec284[2] = fVeeec284State[1];
			fVeeec287[1] = fVeeec287State[0];
			fVeeec287[2] = fVeeec287State[1];
			fVeeec271 = fVeeec271State;
			fVeeec292[1] = fVeeec292State[0];
			fVeeec292[2] = fVeeec292State[1];
			fVeeec295[1] = fVeeec295State[0];
			fVeeec295[2] = fVeeec295State[1];
			fVeeec298[1] = fVeeec298State[0];
			fVeeec298[2] = fVeeec298State[1];
			fVeeec301[1] = fVeeec301State[0];
			fVeeec301[2] = fVeeec301State[1];
			fVeeec304[1] = fVeeec304State[0];
			fVeeec304[2] = fVeeec304State[1];
			fVeeec307[1] = fVeeec307State[0];
			fVeeec307[2] = fVeeec307State[1];
			fVeeec291 = fVeeec291State;
			fVeeec312[1] = fVeeec312State[0];
			fVeeec312[2] = fVeeec312State[1];
			fVeeec315[1] = fVeeec315State[0];
			fVeeec315[2] = fVeeec315State[1];
			fVeeec318[1] = fVeeec318State[0];
			fVeeec318[2] = fVeeec318State[1];
			fVeeec321[1] = fVeeec321State[0];
			fVeeec321[2] = fVeeec321State[1];
			fVeeec324[1] = fVeeec324State[0];
			fVeeec324[2] = fVeeec324State[1];
			fVeeec327[1] = fVeeec327State[0];
			fVeeec327[2] = fVeeec327State[1];
			fVeeec311 = fVeeec311State;
			fVeeec332[1] = fVeeec332State[0];
			fVeeec332[2] = fVeeec332State[1];
			fVeeec335[1] = fVeeec335State[0];
			fVeeec335[2] = fVeeec335State[1];
			fVeeec338[1] = fVeeec338State[0];
			fVeeec338[2] = fVeeec338State[1];
			fVeeec341[1] = fVeeec341State[0];
			fVeeec341[2] = fVeeec341State[1];
			fVeeec344[1] = fVeeec344State[0];
			fVeeec344[2] = fVeeec344State[1];
			fVeeec347[1] = fVeeec347State[0];
			fVeeec347[2] = fVeeec347State[1];
			fVeeec331 = fVeeec331State;
			fVeeec352[1] = fVeeec352State[0];
			fVeeec352[2] = fVeeec352State[1];
			fVeeec355[1] = fVeeec355State[0];
			fVeeec355[2] = fVeeec355State[1];
			fVeeec358[1] = fVeeec358State[0];
			fVeeec358[2] = fVeeec358State[1];
			fVeeec361[1] = fVeeec361State[0];
			fVeeec361[2] = fVeeec361State[1];
			fVeeec364[1] = fVeeec364State[0];
			fVeeec364[2] = fVeeec364State[1];
			fVeeec367[1] = fVeeec367State[0];
			fVeeec367[2] = fVeeec367State[1];
			fVeeec351 = fVeeec351State;
			fVeeec372[1] = fVeeec372State[0];
			fVeeec372[2] = fVeeec372State[1];
			fVeeec375[1] = fVeeec375State[0];
			fVeeec375[2] = fVeeec375State[1];
			fVeeec378[1] = fVeeec378State[0];
			fVeeec378[2] = fVeeec378State[1];
			fVeeec381[1] = fVeeec381State[0];
			fVeeec381[2] = fVeeec381State[1];
			fVeeec384[1] = fVeeec384State[0];
			fVeeec384[2] = fVeeec384State[1];
			fVeeec387[1] = fVeeec387State[0];
			fVeeec387[2] = fVeeec387State[1];
			fVeeec371 = fVeeec371State;
			fVeeec392[1] = fVeeec392State[0];
			fVeeec392[2] = fVeeec392State[1];
			fVeeec395[1] = fVeeec395State[0];
			fVeeec395[2] = fVeeec395State[1];
			fVeeec398[1] = fVeeec398State[0];
			fVeeec398[2] = fVeeec398State[1];
			fVeeec401[1] = fVeeec401State[0];
			fVeeec401[2] = fVeeec401State[1];
			fVeeec404[1] = fVeeec404State[0];
			fVeeec404[2] = fVeeec404State[1];
			fVeeec407[1] = fVeeec407State[0];
			fVeeec407[2] = fVeeec407State[1];
			fVeeec391 = fVeeec391State;
			fVeeec412[1] = fVeeec412State[0];
			fVeeec412[2] = fVeeec412State[1];
			fVeeec415[1] = fVeeec415State[0];
			fVeeec415[2] = fVeeec415State[1];
			fVeeec418[1] = fVeeec418State[0];
			fVeeec418[2] = fVeeec418State[1];
			fVeeec421[1] = fVeeec421State[0];
			fVeeec421[2] = fVeeec421State[1];
			fVeeec424[1] = fVeeec424State[0];
			fVeeec424[2] = fVeeec424State[1];
			fVeeec427[1] = fVeeec427State[0];
			fVeeec427[2] = fVeeec427State[1];
			fVeeec411 = fVeeec411State;
			fVeeec432[1] = fVeeec432State[0];
			fVeeec432[2] = fVeeec432State[1];
			fVeeec435[1] = fVeeec435State[0];
			fVeeec435[2] = fVeeec435State[1];
			fVeeec438[1] = fVeeec438State[0];
			fVeeec438[2] = fVeeec438State[1];
			fVeeec441[1] = fVeeec441State[0];
			fVeeec441[2] = fVeeec441State[1];
			fVeeec444[1] = fVeeec444State[0];
			fVeeec444[2] = fVeeec444State[1];
			fVeeec447[1] = fVeeec447State[0];
			fVeeec447[2] = fVeeec447State[1];
			fVeeec431 = fVeeec431State;
			fVeeec452[1] = fVeeec452State[0];
			fVeeec452[2] = fVeeec452State[1];
			fVeeec455[1] = fVeeec455State[0];
			fVeeec455[2] = fVeeec455State[1];
			fVeeec458[1] = fVeeec458State[0];
			fVeeec458[2] = fVeeec458State[1];
			fVeeec461[1] = fVeeec461State[0];
			fVeeec461[2] = fVeeec461State[1];
			fVeeec464[1] = fVeeec464State[0];
			fVeeec464[2] = fVeeec464State[1];
			fVeeec467[1] = fVeeec467State[0];
			fVeeec467[2] = fVeeec467State[1];
			fVeeec451 = fVeeec451State;
			fVeeec472[1] = fVeeec472State[0];
			fVeeec472[2] = fVeeec472State[1];
			fVeeec475[1] = fVeeec475State[0];
			fVeeec475[2] = fVeeec475State[1];
			fVeeec478[1] = fVeeec478State[0];
			fVeeec478[2] = fVeeec478State[1];
			fVeeec481[1] = fVeeec481State[0];
			fVeeec481[2] = fVeeec481State[1];
			fVeeec484[1] = fVeeec484State[0];
			fVeeec484[2] = fVeeec484State[1];
			fVeeec487[1] = fVeeec487State[0];
			fVeeec487[2] = fVeeec487State[1];
			fVeeec471 = fVeeec471State;
			fVeeec492[1] = fVeeec492State[0];
			fVeeec492[2] = fVeeec492State[1];
			fVeeec495[1] = fVeeec495State[0];
			fVeeec495[2] = fVeeec495State[1];
			fVeeec498[1] = fVeeec498State[0];
			fVeeec498[2] = fVeeec498State[1];
			fVeeec501[1] = fVeeec501State[0];
			fVeeec501[2] = fVeeec501State[1];
			fVeeec504[1] = fVeeec504State[0];
			fVeeec504[2] = fVeeec504State[1];
			fVeeec507[1] = fVeeec507State[0];
			fVeeec507[2] = fVeeec507State[1];
			fVeeec491 = fVeeec491State;
			fVeeec512[1] = fVeeec512State[0];
			fVeeec512[2] = fVeeec512State[1];
			fVeeec515[1] = fVeeec515State[0];
			fVeeec515[2] = fVeeec515State[1];
			fVeeec518[1] = fVeeec518State[0];
			fVeeec518[2] = fVeeec518State[1];
			fVeeec521[1] = fVeeec521State[0];
			fVeeec521[2] = fVeeec521State[1];
			fVeeec524[1] = fVeeec524State[0];
			fVeeec524[2] = fVeeec524State[1];
			fVeeec527[1] = fVeeec527State[0];
			fVeeec527[2] = fVeeec527State[1];
			fVeeec511 = fVeeec511State;
			fVeeec532[1] = fVeeec532State[0];
			fVeeec532[2] = fVeeec532State[1];
			fVeeec535[1] = fVeeec535State[0];
			fVeeec535[2] = fVeeec535State[1];
			fVeeec538[1] = fVeeec538State[0];
			fVeeec538[2] = fVeeec538State[1];
			fVeeec541[1] = fVeeec541State[0];
			fVeeec541[2] = fVeeec541State[1];
			fVeeec544[1] = fVeeec544State[0];
			fVeeec544[2] = fVeeec544State[1];
			fVeeec547[1] = fVeeec547State[0];
			fVeeec547[2] = fVeeec547State[1];
			fVeeec531 = fVeeec531State;
			fVeeec552[1] = fVeeec552State[0];
			fVeeec552[2] = fVeeec552State[1];
			fVeeec555[1] = fVeeec555State[0];
			fVeeec555[2] = fVeeec555State[1];
			fVeeec558[1] = fVeeec558State[0];
			fVeeec558[2] = fVeeec558State[1];
			fVeeec561[1] = fVeeec561State[0];
			fVeeec561[2] = fVeeec561State[1];
			fVeeec564[1] = fVeeec564State[0];
			fVeeec564[2] = fVeeec564State[1];
			fVeeec567[1] = fVeeec567State[0];
			fVeeec567[2] = fVeeec567State[1];
			fVeeec551 = fVeeec551State;
			fVeeec572[1] = fVeeec572State[0];
			fVeeec572[2] = fVeeec572State[1];
			fVeeec575[1] = fVeeec575State[0];
			fVeeec575[2] = fVeeec575State[1];
			fVeeec578[1] = fVeeec578State[0];
			fVeeec578[2] = fVeeec578State[1];
			fVeeec571 = fVeeec571State;
			for (int i=0; i<count; i++) {
				float 	fTemp0 = (float)input0[i]; // step: 1
				float 	fTemp1 = fVeeec1[2]; // step: 46
				float 	fTemp2 = fVeeec1[1]; // step: 52
				fVeeec1[0] = (fTemp0 - (fConst6 * ((fConst7 * fTemp1) + (fConst10 * fTemp2))));
				float 	fTemp3 = fVeeec4[2]; // step: 76
				float 	fTemp4 = fVeeec4[1]; // step: 82
				fVeeec4[0] = ((fConst6 * (((fConst12 * fVeeec1[0]) + (fConst13 * fTemp2)) + (fConst12 * fTemp1))) - (fConst5 * ((fConst14 * fTemp3) + (fConst15 * fTemp4))));
				float 	fTemp5 = fVeeec7[2]; // step: 102
				float 	fTemp6 = fVeeec7[1]; // step: 108
				fVeeec7[0] = ((fConst5 * (((fConst17 * fVeeec4[0]) + (fConst18 * fTemp4)) + (fConst17 * fTemp3))) - (fConst4 * ((fConst19 * fTemp5) + (fConst20 * fTemp6))));
				fVeeec0 = ((fVeeec0 * fSlow1) + (fabsf((fConst4 * (((fConst22 * fVeeec7[0]) + (fConst23 * fTemp6)) + (fConst22 * fTemp5)))) * fSlow2));
				fbargraph0 = (fSlow0 + (2e+01f * log10f(fVeeec0)));
				float 	fTemp7 = fVeeec12[2]; // step: 174
				float 	fTemp8 = fVeeec12[1]; // step: 180
				fVeeec12[0] = (fTemp0 - (fConst31 * ((fConst32 * fTemp7) + (fConst33 * fTemp8))));
				float 	fTemp9 = fVeeec15[2]; // step: 201
				float 	fTemp10 = fVeeec15[1]; // step: 207
				fVeeec15[0] = ((fConst31 * (((fConst35 * fVeeec12[0]) + (fConst36 * fTemp8)) + (fConst35 * fTemp7))) - (fConst30 * ((fConst37 * fTemp9) + (fConst38 * fTemp10))));
				float 	fTemp11 = fVeeec18[2]; // step: 226
				float 	fTemp12 = fVeeec18[1]; // step: 232
				fVeeec18[0] = ((fConst30 * (((fConst39 * fVeeec15[0]) + (fConst40 * fTemp10)) + (fConst39 * fTemp9))) - (fConst29 * ((fConst41 * fTemp11) + (fConst42 * fTemp12))));
				float 	fTemp13 = (fConst29 * (((fConst43 * fVeeec18[0]) + (fConst44 * fTemp12)) + (fConst43 * fTemp11))); // step: 250
				float 	fTemp14 = fVeeec21[2]; // step: 251
				float 	fTemp15 = fVeeec21[1]; // step: 256
				fVeeec21[0] = (fTemp13 - (fConst28 * ((fConst45 * fTemp14) + (fConst48 * fTemp15))));
				float 	fTemp16 = fVeeec24[2]; // step: 277
				float 	fTemp17 = fVeeec24[1]; // step: 282
				fVeeec24[0] = ((fConst28 * (((fConst50 * fVeeec21[0]) + (fConst51 * fTemp15)) + (fConst50 * fTemp14))) - (fConst27 * ((fConst52 * fTemp16) + (fConst53 * fTemp17))));
				float 	fTemp18 = fVeeec27[2]; // step: 301
				float 	fTemp19 = fVeeec27[1]; // step: 306
				fVeeec27[0] = ((fConst27 * (((fConst55 * fVeeec24[0]) + (fConst56 * fTemp17)) + (fConst55 * fTemp16))) - (fConst26 * ((fConst57 * fTemp18) + (fConst58 * fTemp19))));
				fVeeec11 = ((fSlow1 * fVeeec11) + (fSlow2 * fabsf((fConst26 * (((fConst60 * fVeeec27[0]) + (fConst61 * fTemp19)) + (fConst60 * fTemp18))))));
				fbargraph1 = (fSlow0 + (2e+01f * log10f(fVeeec11)));
				float 	fTemp20 = fVeeec32[2]; // step: 365
				float 	fTemp21 = fVeeec32[1]; // step: 370
				fVeeec32[0] = (fTemp13 - (fConst69 * ((fConst70 * fTemp20) + (fConst71 * fTemp21))));
				float 	fTemp22 = fVeeec35[2]; // step: 389
				float 	fTemp23 = fVeeec35[1]; // step: 394
				fVeeec35[0] = ((fConst69 * (((fConst73 * fVeeec32[0]) + (fConst74 * fTemp21)) + (fConst73 * fTemp20))) - (fConst68 * ((fConst75 * fTemp22) + (fConst76 * fTemp23))));
				float 	fTemp24 = fVeeec38[2]; // step: 412
				float 	fTemp25 = fVeeec38[1]; // step: 417
				fVeeec38[0] = ((fConst68 * (((fConst77 * fVeeec35[0]) + (fConst78 * fTemp23)) + (fConst77 * fTemp22))) - (fConst67 * ((fConst79 * fTemp24) + (fConst80 * fTemp25))));
				float 	fTemp26 = (fConst67 * (((fConst81 * fVeeec38[0]) + (fConst82 * fTemp25)) + (fConst81 * fTemp24))); // step: 434
				float 	fTemp27 = fVeeec41[2]; // step: 435
				float 	fTemp28 = fVeeec41[1]; // step: 440
				fVeeec41[0] = (fTemp26 - (fConst66 * ((fConst83 * fTemp27) + (fConst86 * fTemp28))));
				float 	fTemp29 = fVeeec44[2]; // step: 461
				float 	fTemp30 = fVeeec44[1]; // step: 466
				fVeeec44[0] = ((fConst66 * (((fConst88 * fVeeec41[0]) + (fConst89 * fTemp28)) + (fConst88 * fTemp27))) - (fConst65 * ((fConst90 * fTemp29) + (fConst91 * fTemp30))));
				float 	fTemp31 = fVeeec47[2]; // step: 485
				float 	fTemp32 = fVeeec47[1]; // step: 490
				fVeeec47[0] = ((fConst65 * (((fConst93 * fVeeec44[0]) + (fConst94 * fTemp30)) + (fConst93 * fTemp29))) - (fConst64 * ((fConst95 * fTemp31) + (fConst96 * fTemp32))));
				fVeeec31 = ((fSlow1 * fVeeec31) + (fSlow2 * fabsf((fConst64 * (((fConst98 * fVeeec47[0]) + (fConst99 * fTemp32)) + (fConst98 * fTemp31))))));
				fbargraph2 = (fSlow0 + (2e+01f * log10f(fVeeec31)));
				float 	fTemp33 = fVeeec52[2]; // step: 549
				float 	fTemp34 = fVeeec52[1]; // step: 554
				fVeeec52[0] = (fTemp26 - (fConst107 * ((fConst108 * fTemp33) + (fConst109 * fTemp34))));
				float 	fTemp35 = fVeeec55[2]; // step: 573
				float 	fTemp36 = fVeeec55[1]; // step: 578
				fVeeec55[0] = ((fConst107 * (((fConst111 * fVeeec52[0]) + (fConst112 * fTemp34)) + (fConst111 * fTemp33))) - (fConst106 * ((fConst113 * fTemp35) + (fConst114 * fTemp36))));
				float 	fTemp37 = fVeeec58[2]; // step: 596
				float 	fTemp38 = fVeeec58[1]; // step: 601
				fVeeec58[0] = ((fConst106 * (((fConst115 * fVeeec55[0]) + (fConst116 * fTemp36)) + (fConst115 * fTemp35))) - (fConst105 * ((fConst117 * fTemp37) + (fConst118 * fTemp38))));
				float 	fTemp39 = (fConst105 * (((fConst119 * fVeeec58[0]) + (fConst120 * fTemp38)) + (fConst119 * fTemp37))); // step: 618
				float 	fTemp40 = fVeeec61[2]; // step: 619
				float 	fTemp41 = fVeeec61[1]; // step: 624
				fVeeec61[0] = (fTemp39 - (fConst104 * ((fConst121 * fTemp40) + (fConst124 * fTemp41))));
				float 	fTemp42 = fVeeec64[2]; // step: 645
				float 	fTemp43 = fVeeec64[1]; // step: 650
				fVeeec64[0] = ((fConst104 * (((fConst126 * fVeeec61[0]) + (fConst127 * fTemp41)) + (fConst126 * fTemp40))) - (fConst103 * ((fConst128 * fTemp42) + (fConst129 * fTemp43))));
				float 	fTemp44 = fVeeec67[2]; // step: 669
				float 	fTemp45 = fVeeec67[1]; // step: 674
				fVeeec67[0] = ((fConst103 * (((fConst131 * fVeeec64[0]) + (fConst132 * fTemp43)) + (fConst131 * fTemp42))) - (fConst102 * ((fConst133 * fTemp44) + (fConst134 * fTemp45))));
				fVeeec51 = ((fSlow1 * fVeeec51) + (fSlow2 * fabsf((fConst102 * (((fConst136 * fVeeec67[0]) + (fConst137 * fTemp45)) + (fConst136 * fTemp44))))));
				fbargraph3 = (fSlow0 + (2e+01f * log10f(fVeeec51)));
				float 	fTemp46 = fVeeec72[2]; // step: 733
				float 	fTemp47 = fVeeec72[1]; // step: 738
				fVeeec72[0] = (fTemp39 - (fConst145 * ((fConst146 * fTemp46) + (fConst147 * fTemp47))));
				float 	fTemp48 = fVeeec75[2]; // step: 757
				float 	fTemp49 = fVeeec75[1]; // step: 762
				fVeeec75[0] = ((fConst145 * (((fConst149 * fVeeec72[0]) + (fConst150 * fTemp47)) + (fConst149 * fTemp46))) - (fConst144 * ((fConst151 * fTemp48) + (fConst152 * fTemp49))));
				float 	fTemp50 = fVeeec78[2]; // step: 780
				float 	fTemp51 = fVeeec78[1]; // step: 785
				fVeeec78[0] = ((fConst144 * (((fConst153 * fVeeec75[0]) + (fConst154 * fTemp49)) + (fConst153 * fTemp48))) - (fConst143 * ((fConst155 * fTemp50) + (fConst156 * fTemp51))));
				float 	fTemp52 = (fConst143 * (((fConst157 * fVeeec78[0]) + (fConst158 * fTemp51)) + (fConst157 * fTemp50))); // step: 802
				float 	fTemp53 = fVeeec81[2]; // step: 803
				float 	fTemp54 = fVeeec81[1]; // step: 808
				fVeeec81[0] = (fTemp52 - (fConst142 * ((fConst159 * fTemp53) + (fConst162 * fTemp54))));
				float 	fTemp55 = fVeeec84[2]; // step: 829
				float 	fTemp56 = fVeeec84[1]; // step: 834
				fVeeec84[0] = ((fConst142 * (((fConst164 * fVeeec81[0]) + (fConst165 * fTemp54)) + (fConst164 * fTemp53))) - (fConst141 * ((fConst166 * fTemp55) + (fConst167 * fTemp56))));
				float 	fTemp57 = fVeeec87[2]; // step: 853
				float 	fTemp58 = fVeeec87[1]; // step: 858
				fVeeec87[0] = ((fConst141 * (((fConst169 * fVeeec84[0]) + (fConst170 * fTemp56)) + (fConst169 * fTemp55))) - (fConst140 * ((fConst171 * fTemp57) + (fConst172 * fTemp58))));
				fVeeec71 = ((fSlow1 * fVeeec71) + (fSlow2 * fabsf((fConst140 * (((fConst174 * fVeeec87[0]) + (fConst175 * fTemp58)) + (fConst174 * fTemp57))))));
				fbargraph4 = (fSlow0 + (2e+01f * log10f(fVeeec71)));
				float 	fTemp59 = fVeeec92[2]; // step: 917
				float 	fTemp60 = fVeeec92[1]; // step: 922
				fVeeec92[0] = (fTemp52 - (fConst183 * ((fConst184 * fTemp59) + (fConst185 * fTemp60))));
				float 	fTemp61 = fVeeec95[2]; // step: 941
				float 	fTemp62 = fVeeec95[1]; // step: 946
				fVeeec95[0] = ((fConst183 * (((fConst187 * fVeeec92[0]) + (fConst188 * fTemp60)) + (fConst187 * fTemp59))) - (fConst182 * ((fConst189 * fTemp61) + (fConst190 * fTemp62))));
				float 	fTemp63 = fVeeec98[2]; // step: 964
				float 	fTemp64 = fVeeec98[1]; // step: 969
				fVeeec98[0] = ((fConst182 * (((fConst191 * fVeeec95[0]) + (fConst192 * fTemp62)) + (fConst191 * fTemp61))) - (fConst181 * ((fConst193 * fTemp63) + (fConst194 * fTemp64))));
				float 	fTemp65 = (fConst181 * (((fConst195 * fVeeec98[0]) + (fConst196 * fTemp64)) + (fConst195 * fTemp63))); // step: 986
				float 	fTemp66 = fVeeec101[2]; // step: 987
				float 	fTemp67 = fVeeec101[1]; // step: 992
				fVeeec101[0] = (fTemp65 - (fConst180 * ((fConst197 * fTemp66) + (fConst200 * fTemp67))));
				float 	fTemp68 = fVeeec104[2]; // step: 1013
				float 	fTemp69 = fVeeec104[1]; // step: 1018
				fVeeec104[0] = ((fConst180 * (((fConst202 * fVeeec101[0]) + (fConst203 * fTemp67)) + (fConst202 * fTemp66))) - (fConst179 * ((fConst204 * fTemp68) + (fConst205 * fTemp69))));
				float 	fTemp70 = fVeeec107[2]; // step: 1037
				float 	fTemp71 = fVeeec107[1]; // step: 1042
				fVeeec107[0] = ((fConst179 * (((fConst207 * fVeeec104[0]) + (fConst208 * fTemp69)) + (fConst207 * fTemp68))) - (fConst178 * ((fConst209 * fTemp70) + (fConst210 * fTemp71))));
				fVeeec91 = ((fSlow1 * fVeeec91) + (fSlow2 * fabsf((fConst178 * (((fConst212 * fVeeec107[0]) + (fConst213 * fTemp71)) + (fConst212 * fTemp70))))));
				fbargraph5 = (fSlow0 + (2e+01f * log10f(fVeeec91)));
				float 	fTemp72 = fVeeec112[2]; // step: 1101
				float 	fTemp73 = fVeeec112[1]; // step: 1106
				fVeeec112[0] = (fTemp65 - (fConst221 * ((fConst222 * fTemp72) + (fConst223 * fTemp73))));
				float 	fTemp74 = fVeeec115[2]; // step: 1125
				float 	fTemp75 = fVeeec115[1]; // step: 1130
				fVeeec115[0] = ((fConst221 * (((fConst225 * fVeeec112[0]) + (fConst226 * fTemp73)) + (fConst225 * fTemp72))) - (fConst220 * ((fConst227 * fTemp74) + (fConst228 * fTemp75))));
				float 	fTemp76 = fVeeec118[2]; // step: 1148
				float 	fTemp77 = fVeeec118[1]; // step: 1153
				fVeeec118[0] = ((fConst220 * (((fConst229 * fVeeec115[0]) + (fConst230 * fTemp75)) + (fConst229 * fTemp74))) - (fConst219 * ((fConst231 * fTemp76) + (fConst232 * fTemp77))));
				float 	fTemp78 = (fConst219 * (((fConst233 * fVeeec118[0]) + (fConst234 * fTemp77)) + (fConst233 * fTemp76))); // step: 1170
				float 	fTemp79 = fVeeec121[2]; // step: 1171
				float 	fTemp80 = fVeeec121[1]; // step: 1176
				fVeeec121[0] = (fTemp78 - (fConst218 * ((fConst235 * fTemp79) + (fConst238 * fTemp80))));
				float 	fTemp81 = fVeeec124[2]; // step: 1197
				float 	fTemp82 = fVeeec124[1]; // step: 1202
				fVeeec124[0] = ((fConst218 * (((fConst240 * fVeeec121[0]) + (fConst241 * fTemp80)) + (fConst240 * fTemp79))) - (fConst217 * ((fConst242 * fTemp81) + (fConst243 * fTemp82))));
				float 	fTemp83 = fVeeec127[2]; // step: 1221
				float 	fTemp84 = fVeeec127[1]; // step: 1226
				fVeeec127[0] = ((fConst217 * (((fConst245 * fVeeec124[0]) + (fConst246 * fTemp82)) + (fConst245 * fTemp81))) - (fConst216 * ((fConst247 * fTemp83) + (fConst248 * fTemp84))));
				fVeeec111 = ((fSlow1 * fVeeec111) + (fSlow2 * fabsf((fConst216 * (((fConst250 * fVeeec127[0]) + (fConst251 * fTemp84)) + (fConst250 * fTemp83))))));
				fbargraph6 = (fSlow0 + (2e+01f * log10f(fVeeec111)));
				float 	fTemp85 = fVeeec132[2]; // step: 1285
				float 	fTemp86 = fVeeec132[1]; // step: 1290
				fVeeec132[0] = (fTemp78 - (fConst259 * ((fConst260 * fTemp85) + (fConst261 * fTemp86))));
				float 	fTemp87 = fVeeec135[2]; // step: 1309
				float 	fTemp88 = fVeeec135[1]; // step: 1314
				fVeeec135[0] = ((fConst259 * (((fConst263 * fVeeec132[0]) + (fConst264 * fTemp86)) + (fConst263 * fTemp85))) - (fConst258 * ((fConst265 * fTemp87) + (fConst266 * fTemp88))));
				float 	fTemp89 = fVeeec138[2]; // step: 1332
				float 	fTemp90 = fVeeec138[1]; // step: 1337
				fVeeec138[0] = ((fConst258 * (((fConst267 * fVeeec135[0]) + (fConst268 * fTemp88)) + (fConst267 * fTemp87))) - (fConst257 * ((fConst269 * fTemp89) + (fConst270 * fTemp90))));
				float 	fTemp91 = (fConst257 * (((fConst271 * fVeeec138[0]) + (fConst272 * fTemp90)) + (fConst271 * fTemp89))); // step: 1354
				float 	fTemp92 = fVeeec141[2]; // step: 1355
				float 	fTemp93 = fVeeec141[1]; // step: 1360
				fVeeec141[0] = (fTemp91 - (fConst256 * ((fConst273 * fTemp92) + (fConst276 * fTemp93))));
				float 	fTemp94 = fVeeec144[2]; // step: 1381
				float 	fTemp95 = fVeeec144[1]; // step: 1386
				fVeeec144[0] = ((fConst256 * (((fConst278 * fVeeec141[0]) + (fConst279 * fTemp93)) + (fConst278 * fTemp92))) - (fConst255 * ((fConst280 * fTemp94) + (fConst281 * fTemp95))));
				float 	fTemp96 = fVeeec147[2]; // step: 1405
				float 	fTemp97 = fVeeec147[1]; // step: 1410
				fVeeec147[0] = ((fConst255 * (((fConst283 * fVeeec144[0]) + (fConst284 * fTemp95)) + (fConst283 * fTemp94))) - (fConst254 * ((fConst285 * fTemp96) + (fConst286 * fTemp97))));
				fVeeec131 = ((fSlow1 * fVeeec131) + (fSlow2 * fabsf((fConst254 * (((fConst288 * fVeeec147[0]) + (fConst289 * fTemp97)) + (fConst288 * fTemp96))))));
				fbargraph7 = (fSlow0 + (2e+01f * log10f(fVeeec131)));
				float 	fTemp98 = fVeeec152[2]; // step: 1469
				float 	fTemp99 = fVeeec152[1]; // step: 1474
				fVeeec152[0] = (fTemp91 - (fConst297 * ((fConst298 * fTemp98) + (fConst299 * fTemp99))));
				float 	fTemp100 = fVeeec155[2]; // step: 1493
				float 	fTemp101 = fVeeec155[1]; // step: 1498
				fVeeec155[0] = ((fConst297 * (((fConst301 * fVeeec152[0]) + (fConst302 * fTemp99)) + (fConst301 * fTemp98))) - (fConst296 * ((fConst303 * fTemp100) + (fConst304 * fTemp101))));
				float 	fTemp102 = fVeeec158[2]; // step: 1516
				float 	fTemp103 = fVeeec158[1]; // step: 1521
				fVeeec158[0] = ((fConst296 * (((fConst305 * fVeeec155[0]) + (fConst306 * fTemp101)) + (fConst305 * fTemp100))) - (fConst295 * ((fConst307 * fTemp102) + (fConst308 * fTemp103))));
				float 	fTemp104 = (fConst295 * (((fConst309 * fVeeec158[0]) + (fConst310 * fTemp103)) + (fConst309 * fTemp102))); // step: 1538
				float 	fTemp105 = fVeeec161[2]; // step: 1539
				float 	fTemp106 = fVeeec161[1]; // step: 1544
				fVeeec161[0] = (fTemp104 - (fConst294 * ((fConst311 * fTemp105) + (fConst314 * fTemp106))));
				float 	fTemp107 = fVeeec164[2]; // step: 1565
				float 	fTemp108 = fVeeec164[1]; // step: 1570
				fVeeec164[0] = ((fConst294 * (((fConst316 * fVeeec161[0]) + (fConst317 * fTemp106)) + (fConst316 * fTemp105))) - (fConst293 * ((fConst318 * fTemp107) + (fConst319 * fTemp108))));
				float 	fTemp109 = fVeeec167[2]; // step: 1589
				float 	fTemp110 = fVeeec167[1]; // step: 1594
				fVeeec167[0] = ((fConst293 * (((fConst321 * fVeeec164[0]) + (fConst322 * fTemp108)) + (fConst321 * fTemp107))) - (fConst292 * ((fConst323 * fTemp109) + (fConst324 * fTemp110))));
				fVeeec151 = ((fSlow1 * fVeeec151) + (fSlow2 * fabsf((fConst292 * (((fConst326 * fVeeec167[0]) + (fConst327 * fTemp110)) + (fConst326 * fTemp109))))));
				fbargraph8 = (fSlow0 + (2e+01f * log10f(fVeeec151)));
				float 	fTemp111 = fVeeec172[2]; // step: 1653
				float 	fTemp112 = fVeeec172[1]; // step: 1658
				fVeeec172[0] = (fTemp104 - (fConst335 * ((fConst336 * fTemp111) + (fConst337 * fTemp112))));
				float 	fTemp113 = fVeeec175[2]; // step: 1677
				float 	fTemp114 = fVeeec175[1]; // step: 1682
				fVeeec175[0] = ((fConst335 * (((fConst339 * fVeeec172[0]) + (fConst340 * fTemp112)) + (fConst339 * fTemp111))) - (fConst334 * ((fConst341 * fTemp113) + (fConst342 * fTemp114))));
				float 	fTemp115 = fVeeec178[2]; // step: 1700
				float 	fTemp116 = fVeeec178[1]; // step: 1705
				fVeeec178[0] = ((fConst334 * (((fConst343 * fVeeec175[0]) + (fConst344 * fTemp114)) + (fConst343 * fTemp113))) - (fConst333 * ((fConst345 * fTemp115) + (fConst346 * fTemp116))));
				float 	fTemp117 = (fConst333 * (((fConst347 * fVeeec178[0]) + (fConst348 * fTemp116)) + (fConst347 * fTemp115))); // step: 1722
				float 	fTemp118 = fVeeec181[2]; // step: 1723
				float 	fTemp119 = fVeeec181[1]; // step: 1728
				fVeeec181[0] = (fTemp117 - (fConst332 * ((fConst349 * fTemp118) + (fConst352 * fTemp119))));
				float 	fTemp120 = fVeeec184[2]; // step: 1749
				float 	fTemp121 = fVeeec184[1]; // step: 1754
				fVeeec184[0] = ((fConst332 * (((fConst354 * fVeeec181[0]) + (fConst355 * fTemp119)) + (fConst354 * fTemp118))) - (fConst331 * ((fConst356 * fTemp120) + (fConst357 * fTemp121))));
				float 	fTemp122 = fVeeec187[2]; // step: 1773
				float 	fTemp123 = fVeeec187[1]; // step: 1778
				fVeeec187[0] = ((fConst331 * (((fConst359 * fVeeec184[0]) + (fConst360 * fTemp121)) + (fConst359 * fTemp120))) - (fConst330 * ((fConst361 * fTemp122) + (fConst362 * fTemp123))));
				fVeeec171 = ((fSlow1 * fVeeec171) + (fSlow2 * fabsf((fConst330 * (((fConst364 * fVeeec187[0]) + (fConst365 * fTemp123)) + (fConst364 * fTemp122))))));
				fbargraph9 = (fSlow0 + (2e+01f * log10f(fVeeec171)));
				float 	fTemp124 = fVeeec192[2]; // step: 1837
				float 	fTemp125 = fVeeec192[1]; // step: 1842
				fVeeec192[0] = (fTemp117 - (fConst373 * ((fConst374 * fTemp124) + (fConst375 * fTemp125))));
				float 	fTemp126 = fVeeec195[2]; // step: 1861
				float 	fTemp127 = fVeeec195[1]; // step: 1866
				fVeeec195[0] = ((fConst373 * (((fConst377 * fVeeec192[0]) + (fConst378 * fTemp125)) + (fConst377 * fTemp124))) - (fConst372 * ((fConst379 * fTemp126) + (fConst380 * fTemp127))));
				float 	fTemp128 = fVeeec198[2]; // step: 1884
				float 	fTemp129 = fVeeec198[1]; // step: 1889
				fVeeec198[0] = ((fConst372 * (((fConst381 * fVeeec195[0]) + (fConst382 * fTemp127)) + (fConst381 * fTemp126))) - (fConst371 * ((fConst383 * fTemp128) + (fConst384 * fTemp129))));
				float 	fTemp130 = (fConst371 * (((fConst385 * fVeeec198[0]) + (fConst386 * fTemp129)) + (fConst385 * fTemp128))); // step: 1906
				float 	fTemp131 = fVeeec201[2]; // step: 1907
				float 	fTemp132 = fVeeec201[1]; // step: 1912
				fVeeec201[0] = (fTemp130 - (fConst370 * ((fConst387 * fTemp131) + (fConst390 * fTemp132))));
				float 	fTemp133 = fVeeec204[2]; // step: 1933
				float 	fTemp134 = fVeeec204[1]; // step: 1938
				fVeeec204[0] = ((fConst370 * (((fConst392 * fVeeec201[0]) + (fConst393 * fTemp132)) + (fConst392 * fTemp131))) - (fConst369 * ((fConst394 * fTemp133) + (fConst395 * fTemp134))));
				float 	fTemp135 = fVeeec207[2]; // step: 1957
				float 	fTemp136 = fVeeec207[1]; // step: 1962
				fVeeec207[0] = ((fConst369 * (((fConst397 * fVeeec204[0]) + (fConst398 * fTemp134)) + (fConst397 * fTemp133))) - (fConst368 * ((fConst399 * fTemp135) + (fConst400 * fTemp136))));
				fVeeec191 = ((fSlow1 * fVeeec191) + (fSlow2 * fabsf((fConst368 * (((fConst402 * fVeeec207[0]) + (fConst403 * fTemp136)) + (fConst402 * fTemp135))))));
				fbargraph10 = (fSlow0 + (2e+01f * log10f(fVeeec191)));
				float 	fTemp137 = fVeeec212[2]; // step: 2021
				float 	fTemp138 = fVeeec212[1]; // step: 2026
				fVeeec212[0] = (fTemp130 - (fConst411 * ((fConst412 * fTemp137) + (fConst413 * fTemp138))));
				float 	fTemp139 = fVeeec215[2]; // step: 2045
				float 	fTemp140 = fVeeec215[1]; // step: 2050
				fVeeec215[0] = ((fConst411 * (((fConst415 * fVeeec212[0]) + (fConst416 * fTemp138)) + (fConst415 * fTemp137))) - (fConst410 * ((fConst417 * fTemp139) + (fConst418 * fTemp140))));
				float 	fTemp141 = fVeeec218[2]; // step: 2068
				float 	fTemp142 = fVeeec218[1]; // step: 2073
				fVeeec218[0] = ((fConst410 * (((fConst419 * fVeeec215[0]) + (fConst420 * fTemp140)) + (fConst419 * fTemp139))) - (fConst409 * ((fConst421 * fTemp141) + (fConst422 * fTemp142))));
				float 	fTemp143 = (fConst409 * (((fConst423 * fVeeec218[0]) + (fConst424 * fTemp142)) + (fConst423 * fTemp141))); // step: 2090
				float 	fTemp144 = fVeeec221[2]; // step: 2091
				float 	fTemp145 = fVeeec221[1]; // step: 2096
				fVeeec221[0] = (fTemp143 - (fConst408 * ((fConst425 * fTemp144) + (fConst428 * fTemp145))));
				float 	fTemp146 = fVeeec224[2]; // step: 2117
				float 	fTemp147 = fVeeec224[1]; // step: 2122
				fVeeec224[0] = ((fConst408 * (((fConst430 * fVeeec221[0]) + (fConst431 * fTemp145)) + (fConst430 * fTemp144))) - (fConst407 * ((fConst432 * fTemp146) + (fConst433 * fTemp147))));
				float 	fTemp148 = fVeeec227[2]; // step: 2141
				float 	fTemp149 = fVeeec227[1]; // step: 2146
				fVeeec227[0] = ((fConst407 * (((fConst435 * fVeeec224[0]) + (fConst436 * fTemp147)) + (fConst435 * fTemp146))) - (fConst406 * ((fConst437 * fTemp148) + (fConst438 * fTemp149))));
				fVeeec211 = ((fSlow1 * fVeeec211) + (fSlow2 * fabsf((fConst406 * (((fConst440 * fVeeec227[0]) + (fConst441 * fTemp149)) + (fConst440 * fTemp148))))));
				fbargraph11 = (fSlow0 + (2e+01f * log10f(fVeeec211)));
				float 	fTemp150 = fVeeec232[2]; // step: 2205
				float 	fTemp151 = fVeeec232[1]; // step: 2210
				fVeeec232[0] = (fTemp143 - (fConst449 * ((fConst450 * fTemp150) + (fConst451 * fTemp151))));
				float 	fTemp152 = fVeeec235[2]; // step: 2229
				float 	fTemp153 = fVeeec235[1]; // step: 2234
				fVeeec235[0] = ((fConst449 * (((fConst453 * fVeeec232[0]) + (fConst454 * fTemp151)) + (fConst453 * fTemp150))) - (fConst448 * ((fConst455 * fTemp152) + (fConst456 * fTemp153))));
				float 	fTemp154 = fVeeec238[2]; // step: 2252
				float 	fTemp155 = fVeeec238[1]; // step: 2257
				fVeeec238[0] = ((fConst448 * (((fConst457 * fVeeec235[0]) + (fConst458 * fTemp153)) + (fConst457 * fTemp152))) - (fConst447 * ((fConst459 * fTemp154) + (fConst460 * fTemp155))));
				float 	fTemp156 = (fConst447 * (((fConst461 * fVeeec238[0]) + (fConst462 * fTemp155)) + (fConst461 * fTemp154))); // step: 2274
				float 	fTemp157 = fVeeec241[2]; // step: 2275
				float 	fTemp158 = fVeeec241[1]; // step: 2280
				fVeeec241[0] = (fTemp156 - (fConst446 * ((fConst463 * fTemp157) + (fConst466 * fTemp158))));
				float 	fTemp159 = fVeeec244[2]; // step: 2301
				float 	fTemp160 = fVeeec244[1]; // step: 2306
				fVeeec244[0] = ((fConst446 * (((fConst468 * fVeeec241[0]) + (fConst469 * fTemp158)) + (fConst468 * fTemp157))) - (fConst445 * ((fConst470 * fTemp159) + (fConst471 * fTemp160))));
				float 	fTemp161 = fVeeec247[2]; // step: 2325
				float 	fTemp162 = fVeeec247[1]; // step: 2330
				fVeeec247[0] = ((fConst445 * (((fConst473 * fVeeec244[0]) + (fConst474 * fTemp160)) + (fConst473 * fTemp159))) - (fConst444 * ((fConst475 * fTemp161) + (fConst476 * fTemp162))));
				fVeeec231 = ((fSlow1 * fVeeec231) + (fSlow2 * fabsf((fConst444 * (((fConst478 * fVeeec247[0]) + (fConst479 * fTemp162)) + (fConst478 * fTemp161))))));
				fbargraph12 = (fSlow0 + (2e+01f * log10f(fVeeec231)));
				float 	fTemp163 = fVeeec252[2]; // step: 2389
				float 	fTemp164 = fVeeec252[1]; // step: 2394
				fVeeec252[0] = (fTemp156 - (fConst487 * ((fConst488 * fTemp163) + (fConst489 * fTemp164))));
				float 	fTemp165 = fVeeec255[2]; // step: 2413
				float 	fTemp166 = fVeeec255[1]; // step: 2418
				fVeeec255[0] = ((fConst487 * (((fConst491 * fVeeec252[0]) + (fConst492 * fTemp164)) + (fConst491 * fTemp163))) - (fConst486 * ((fConst493 * fTemp165) + (fConst494 * fTemp166))));
				float 	fTemp167 = fVeeec258[2]; // step: 2436
				float 	fTemp168 = fVeeec258[1]; // step: 2441
				fVeeec258[0] = ((fConst486 * (((fConst495 * fVeeec255[0]) + (fConst496 * fTemp166)) + (fConst495 * fTemp165))) - (fConst485 * ((fConst497 * fTemp167) + (fConst498 * fTemp168))));
				float 	fTemp169 = (fConst485 * (((fConst499 * fVeeec258[0]) + (fConst500 * fTemp168)) + (fConst499 * fTemp167))); // step: 2458
				float 	fTemp170 = fVeeec261[2]; // step: 2459
				float 	fTemp171 = fVeeec261[1]; // step: 2464
				fVeeec261[0] = (fTemp169 - (fConst484 * ((fConst501 * fTemp170) + (fConst504 * fTemp171))));
				float 	fTemp172 = fVeeec264[2]; // step: 2485
				float 	fTemp173 = fVeeec264[1]; // step: 2490
				fVeeec264[0] = ((fConst484 * (((fConst506 * fVeeec261[0]) + (fConst507 * fTemp171)) + (fConst506 * fTemp170))) - (fConst483 * ((fConst508 * fTemp172) + (fConst509 * fTemp173))));
				float 	fTemp174 = fVeeec267[2]; // step: 2509
				float 	fTemp175 = fVeeec267[1]; // step: 2514
				fVeeec267[0] = ((fConst483 * (((fConst511 * fVeeec264[0]) + (fConst512 * fTemp173)) + (fConst511 * fTemp172))) - (fConst482 * ((fConst513 * fTemp174) + (fConst514 * fTemp175))));
				fVeeec251 = ((fSlow1 * fVeeec251) + (fSlow2 * fabsf((fConst482 * (((fConst516 * fVeeec267[0]) + (fConst517 * fTemp175)) + (fConst516 * fTemp174))))));
				fbargraph13 = (fSlow0 + (2e+01f * log10f(fVeeec251)));
				float 	fTemp176 = fVeeec272[2]; // step: 2573
				float 	fTemp177 = fVeeec272[1]; // step: 2578
				fVeeec272[0] = (fTemp169 - (fConst525 * ((fConst526 * fTemp176) + (fConst527 * fTemp177))));
				float 	fTemp178 = fVeeec275[2]; // step: 2597
				float 	fTemp179 = fVeeec275[1]; // step: 2602
				fVeeec275[0] = ((fConst525 * (((fConst529 * fVeeec272[0]) + (fConst530 * fTemp177)) + (fConst529 * fTemp176))) - (fConst524 * ((fConst531 * fTemp178) + (fConst532 * fTemp179))));
				float 	fTemp180 = fVeeec278[2]; // step: 2620
				float 	fTemp181 = fVeeec278[1]; // step: 2625
				fVeeec278[0] = ((fConst524 * (((fConst533 * fVeeec275[0]) + (fConst534 * fTemp179)) + (fConst533 * fTemp178))) - (fConst523 * ((fConst535 * fTemp180) + (fConst536 * fTemp181))));
				float 	fTemp182 = (fConst523 * (((fConst537 * fVeeec278[0]) + (fConst538 * fTemp181)) + (fConst537 * fTemp180))); // step: 2642
				float 	fTemp183 = fVeeec281[2]; // step: 2643
				float 	fTemp184 = fVeeec281[1]; // step: 2648
				fVeeec281[0] = (fTemp182 - (fConst522 * ((fConst539 * fTemp183) + (fConst542 * fTemp184))));
				float 	fTemp185 = fVeeec284[2]; // step: 2669
				float 	fTemp186 = fVeeec284[1]; // step: 2674
				fVeeec284[0] = ((fConst522 * (((fConst544 * fVeeec281[0]) + (fConst545 * fTemp184)) + (fConst544 * fTemp183))) - (fConst521 * ((fConst546 * fTemp185) + (fConst547 * fTemp186))));
				float 	fTemp187 = fVeeec287[2]; // step: 2693
				float 	fTemp188 = fVeeec287[1]; // step: 2698
				fVeeec287[0] = ((fConst521 * (((fConst549 * fVeeec284[0]) + (fConst550 * fTemp186)) + (fConst549 * fTemp185))) - (fConst520 * ((fConst551 * fTemp187) + (fConst552 * fTemp188))));
				fVeeec271 = ((fSlow1 * fVeeec271) + (fSlow2 * fabsf((fConst520 * (((fConst554 * fVeeec287[0]) + (fConst555 * fTemp188)) + (fConst554 * fTemp187))))));
				fbargraph14 = (fSlow0 + (2e+01f * log10f(fVeeec271)));
				float 	fTemp189 = fVeeec292[2]; // step: 2757
				float 	fTemp190 = fVeeec292[1]; // step: 2762
				fVeeec292[0] = (fTemp182 - (fConst563 * ((fConst564 * fTemp189) + (fConst565 * fTemp190))));
				float 	fTemp191 = fVeeec295[2]; // step: 2781
				float 	fTemp192 = fVeeec295[1]; // step: 2786
				fVeeec295[0] = ((fConst563 * (((fConst567 * fVeeec292[0]) + (fConst568 * fTemp190)) + (fConst567 * fTemp189))) - (fConst562 * ((fConst569 * fTemp191) + (fConst570 * fTemp192))));
				float 	fTemp193 = fVeeec298[2]; // step: 2804
				float 	fTemp194 = fVeeec298[1]; // step: 2809
				fVeeec298[0] = ((fConst562 * (((fConst571 * fVeeec295[0]) + (fConst572 * fTemp192)) + (fConst571 * fTemp191))) - (fConst561 * ((fConst573 * fTemp193) + (fConst574 * fTemp194))));
				float 	fTemp195 = (fConst561 * (((fConst575 * fVeeec298[0]) + (fConst576 * fTemp194)) + (fConst575 * fTemp193))); // step: 2826
				float 	fTemp196 = fVeeec301[2]; // step: 2827
				float 	fTemp197 = fVeeec301[1]; // step: 2832
				fVeeec301[0] = (fTemp195 - (fConst560 * ((fConst577 * fTemp196) + (fConst580 * fTemp197))));
				float 	fTemp198 = fVeeec304[2]; // step: 2853
				float 	fTemp199 = fVeeec304[1]; // step: 2858
				fVeeec304[0] = ((fConst560 * (((fConst582 * fVeeec301[0]) + (fConst583 * fTemp197)) + (fConst582 * fTemp196))) - (fConst559 * ((fConst584 * fTemp198) + (fConst585 * fTemp199))));
				float 	fTemp200 = fVeeec307[2]; // step: 2877
				float 	fTemp201 = fVeeec307[1]; // step: 2882
				fVeeec307[0] = ((fConst559 * (((fConst587 * fVeeec304[0]) + (fConst588 * fTemp199)) + (fConst587 * fTemp198))) - (fConst558 * ((fConst589 * fTemp200) + (fConst590 * fTemp201))));
				fVeeec291 = ((fSlow1 * fVeeec291) + (fSlow2 * fabsf((fConst558 * (((fConst592 * fVeeec307[0]) + (fConst593 * fTemp201)) + (fConst592 * fTemp200))))));
				fbargraph15 = (fSlow0 + (2e+01f * log10f(fVeeec291)));
				float 	fTemp202 = fVeeec312[2]; // step: 2941
				float 	fTemp203 = fVeeec312[1]; // step: 2946
				fVeeec312[0] = (fTemp195 - (fConst601 * ((fConst602 * fTemp202) + (fConst603 * fTemp203))));
				float 	fTemp204 = fVeeec315[2]; // step: 2965
				float 	fTemp205 = fVeeec315[1]; // step: 2970
				fVeeec315[0] = ((fConst601 * (((fConst605 * fVeeec312[0]) + (fConst606 * fTemp203)) + (fConst605 * fTemp202))) - (fConst600 * ((fConst607 * fTemp204) + (fConst608 * fTemp205))));
				float 	fTemp206 = fVeeec318[2]; // step: 2988
				float 	fTemp207 = fVeeec318[1]; // step: 2993
				fVeeec318[0] = ((fConst600 * (((fConst609 * fVeeec315[0]) + (fConst610 * fTemp205)) + (fConst609 * fTemp204))) - (fConst599 * ((fConst611 * fTemp206) + (fConst612 * fTemp207))));
				float 	fTemp208 = (fConst599 * (((fConst613 * fVeeec318[0]) + (fConst614 * fTemp207)) + (fConst613 * fTemp206))); // step: 3010
				float 	fTemp209 = fVeeec321[2]; // step: 3011
				float 	fTemp210 = fVeeec321[1]; // step: 3016
				fVeeec321[0] = (fTemp208 - (fConst598 * ((fConst615 * fTemp209) + (fConst618 * fTemp210))));
				float 	fTemp211 = fVeeec324[2]; // step: 3037
				float 	fTemp212 = fVeeec324[1]; // step: 3042
				fVeeec324[0] = ((fConst598 * (((fConst620 * fVeeec321[0]) + (fConst621 * fTemp210)) + (fConst620 * fTemp209))) - (fConst597 * ((fConst622 * fTemp211) + (fConst623 * fTemp212))));
				float 	fTemp213 = fVeeec327[2]; // step: 3061
				float 	fTemp214 = fVeeec327[1]; // step: 3066
				fVeeec327[0] = ((fConst597 * (((fConst625 * fVeeec324[0]) + (fConst626 * fTemp212)) + (fConst625 * fTemp211))) - (fConst596 * ((fConst627 * fTemp213) + (fConst628 * fTemp214))));
				fVeeec311 = ((fSlow1 * fVeeec311) + (fSlow2 * fabsf((fConst596 * (((fConst630 * fVeeec327[0]) + (fConst631 * fTemp214)) + (fConst630 * fTemp213))))));
				fbargraph16 = (fSlow0 + (2e+01f * log10f(fVeeec311)));
				float 	fTemp215 = fVeeec332[2]; // step: 3125
				float 	fTemp216 = fVeeec332[1]; // step: 3130
				fVeeec332[0] = (fTemp208 - (fConst639 * ((fConst640 * fTemp215) + (fConst641 * fTemp216))));
				float 	fTemp217 = fVeeec335[2]; // step: 3149
				float 	fTemp218 = fVeeec335[1]; // step: 3154
				fVeeec335[0] = ((fConst639 * (((fConst643 * fVeeec332[0]) + (fConst644 * fTemp216)) + (fConst643 * fTemp215))) - (fConst638 * ((fConst645 * fTemp217) + (fConst646 * fTemp218))));
				float 	fTemp219 = fVeeec338[2]; // step: 3172
				float 	fTemp220 = fVeeec338[1]; // step: 3177
				fVeeec338[0] = ((fConst638 * (((fConst647 * fVeeec335[0]) + (fConst648 * fTemp218)) + (fConst647 * fTemp217))) - (fConst637 * ((fConst649 * fTemp219) + (fConst650 * fTemp220))));
				float 	fTemp221 = (fConst637 * (((fConst651 * fVeeec338[0]) + (fConst652 * fTemp220)) + (fConst651 * fTemp219))); // step: 3194
				float 	fTemp222 = fVeeec341[2]; // step: 3195
				float 	fTemp223 = fVeeec341[1]; // step: 3200
				fVeeec341[0] = (fTemp221 - (fConst636 * ((fConst653 * fTemp222) + (fConst656 * fTemp223))));
				float 	fTemp224 = fVeeec344[2]; // step: 3221
				float 	fTemp225 = fVeeec344[1]; // step: 3226
				fVeeec344[0] = ((fConst636 * (((fConst658 * fVeeec341[0]) + (fConst659 * fTemp223)) + (fConst658 * fTemp222))) - (fConst635 * ((fConst660 * fTemp224) + (fConst661 * fTemp225))));
				float 	fTemp226 = fVeeec347[2]; // step: 3245
				float 	fTemp227 = fVeeec347[1]; // step: 3250
				fVeeec347[0] = ((fConst635 * (((fConst663 * fVeeec344[0]) + (fConst664 * fTemp225)) + (fConst663 * fTemp224))) - (fConst634 * ((fConst665 * fTemp226) + (fConst666 * fTemp227))));
				fVeeec331 = ((fSlow1 * fVeeec331) + (fSlow2 * fabsf((fConst634 * (((fConst668 * fVeeec347[0]) + (fConst669 * fTemp227)) + (fConst668 * fTemp226))))));
				fbargraph17 = (fSlow0 + (2e+01f * log10f(fVeeec331)));
				float 	fTemp228 = fVeeec352[2]; // step: 3309
				float 	fTemp229 = fVeeec352[1]; // step: 3314
				fVeeec352[0] = (fTemp221 - (fConst677 * ((fConst678 * fTemp228) + (fConst679 * fTemp229))));
				float 	fTemp230 = fVeeec355[2]; // step: 3333
				float 	fTemp231 = fVeeec355[1]; // step: 3338
				fVeeec355[0] = ((fConst677 * (((fConst681 * fVeeec352[0]) + (fConst682 * fTemp229)) + (fConst681 * fTemp228))) - (fConst676 * ((fConst683 * fTemp230) + (fConst684 * fTemp231))));
				float 	fTemp232 = fVeeec358[2]; // step: 3356
				float 	fTemp233 = fVeeec358[1]; // step: 3361
				fVeeec358[0] = ((fConst676 * (((fConst685 * fVeeec355[0]) + (fConst686 * fTemp231)) + (fConst685 * fTemp230))) - (fConst675 * ((fConst687 * fTemp232) + (fConst688 * fTemp233))));
				float 	fTemp234 = (fConst675 * (((fConst689 * fVeeec358[0]) + (fConst690 * fTemp233)) + (fConst689 * fTemp232))); // step: 3378
				float 	fTemp235 = fVeeec361[2]; // step: 3379
				float 	fTemp236 = fVeeec361[1]; // step: 3384
				fVeeec361[0] = (fTemp234 - (fConst674 * ((fConst691 * fTemp235) + (fConst694 * fTemp236))));
				float 	fTemp237 = fVeeec364[2]; // step: 3405
				float 	fTemp238 = fVeeec364[1]; // step: 3410
				fVeeec364[0] = ((fConst674 * (((fConst696 * fVeeec361[0]) + (fConst697 * fTemp236)) + (fConst696 * fTemp235))) - (fConst673 * ((fConst698 * fTemp237) + (fConst699 * fTemp238))));
				float 	fTemp239 = fVeeec367[2]; // step: 3429
				float 	fTemp240 = fVeeec367[1]; // step: 3434
				fVeeec367[0] = ((fConst673 * (((fConst701 * fVeeec364[0]) + (fConst702 * fTemp238)) + (fConst701 * fTemp237))) - (fConst672 * ((fConst703 * fTemp239) + (fConst704 * fTemp240))));
				fVeeec351 = ((fSlow1 * fVeeec351) + (fSlow2 * fabsf((fConst672 * (((fConst706 * fVeeec367[0]) + (fConst707 * fTemp240)) + (fConst706 * fTemp239))))));
				fbargraph18 = (fSlow0 + (2e+01f * log10f(fVeeec351)));
				float 	fTemp241 = fVeeec372[2]; // step: 3493
				float 	fTemp242 = fVeeec372[1]; // step: 3498
				fVeeec372[0] = (fTemp234 - (fConst715 * ((fConst716 * fTemp241) + (fConst717 * fTemp242))));
				float 	fTemp243 = fVeeec375[2]; // step: 3517
				float 	fTemp244 = fVeeec375[1]; // step: 3522
				fVeeec375[0] = ((fConst715 * (((fConst719 * fVeeec372[0]) + (fConst720 * fTemp242)) + (fConst719 * fTemp241))) - (fConst714 * ((fConst721 * fTemp243) + (fConst722 * fTemp244))));
				float 	fTemp245 = fVeeec378[2]; // step: 3540
				float 	fTemp246 = fVeeec378[1]; // step: 3545
				fVeeec378[0] = ((fConst714 * (((fConst723 * fVeeec375[0]) + (fConst724 * fTemp244)) + (fConst723 * fTemp243))) - (fConst713 * ((fConst725 * fTemp245) + (fConst726 * fTemp246))));
				float 	fTemp247 = (fConst713 * (((fConst727 * fVeeec378[0]) + (fConst728 * fTemp246)) + (fConst727 * fTemp245))); // step: 3562
				float 	fTemp248 = fVeeec381[2]; // step: 3563
				float 	fTemp249 = fVeeec381[1]; // step: 3568
				fVeeec381[0] = (fTemp247 - (fConst712 * ((fConst729 * fTemp248) + (fConst732 * fTemp249))));
				float 	fTemp250 = fVeeec384[2]; // step: 3589
				float 	fTemp251 = fVeeec384[1]; // step: 3594
				fVeeec384[0] = ((fConst712 * (((fConst734 * fVeeec381[0]) + (fConst735 * fTemp249)) + (fConst734 * fTemp248))) - (fConst711 * ((fConst736 * fTemp250) + (fConst737 * fTemp251))));
				float 	fTemp252 = fVeeec387[2]; // step: 3613
				float 	fTemp253 = fVeeec387[1]; // step: 3618
				fVeeec387[0] = ((fConst711 * (((fConst739 * fVeeec384[0]) + (fConst740 * fTemp251)) + (fConst739 * fTemp250))) - (fConst710 * ((fConst741 * fTemp252) + (fConst742 * fTemp253))));
				fVeeec371 = ((fSlow1 * fVeeec371) + (fSlow2 * fabsf((fConst710 * (((fConst744 * fVeeec387[0]) + (fConst745 * fTemp253)) + (fConst744 * fTemp252))))));
				fbargraph19 = (fSlow0 + (2e+01f * log10f(fVeeec371)));
				float 	fTemp254 = fVeeec392[2]; // step: 3677
				float 	fTemp255 = fVeeec392[1]; // step: 3682
				fVeeec392[0] = (fTemp247 - (fConst753 * ((fConst754 * fTemp254) + (fConst755 * fTemp255))));
				float 	fTemp256 = fVeeec395[2]; // step: 3701
				float 	fTemp257 = fVeeec395[1]; // step: 3706
				fVeeec395[0] = ((fConst753 * (((fConst757 * fVeeec392[0]) + (fConst758 * fTemp255)) + (fConst757 * fTemp254))) - (fConst752 * ((fConst759 * fTemp256) + (fConst760 * fTemp257))));
				float 	fTemp258 = fVeeec398[2]; // step: 3724
				float 	fTemp259 = fVeeec398[1]; // step: 3729
				fVeeec398[0] = ((fConst752 * (((fConst761 * fVeeec395[0]) + (fConst762 * fTemp257)) + (fConst761 * fTemp256))) - (fConst751 * ((fConst763 * fTemp258) + (fConst764 * fTemp259))));
				float 	fTemp260 = (fConst751 * (((fConst765 * fVeeec398[0]) + (fConst766 * fTemp259)) + (fConst765 * fTemp258))); // step: 3746
				float 	fTemp261 = fVeeec401[2]; // step: 3747
				float 	fTemp262 = fVeeec401[1]; // step: 3752
				fVeeec401[0] = (fTemp260 - (fConst750 * ((fConst767 * fTemp261) + (fConst770 * fTemp262))));
				float 	fTemp263 = fVeeec404[2]; // step: 3773
				float 	fTemp264 = fVeeec404[1]; // step: 3778
				fVeeec404[0] = ((fConst750 * (((fConst772 * fVeeec401[0]) + (fConst773 * fTemp262)) + (fConst772 * fTemp261))) - (fConst749 * ((fConst774 * fTemp263) + (fConst775 * fTemp264))));
				float 	fTemp265 = fVeeec407[2]; // step: 3797
				float 	fTemp266 = fVeeec407[1]; // step: 3802
				fVeeec407[0] = ((fConst749 * (((fConst777 * fVeeec404[0]) + (fConst778 * fTemp264)) + (fConst777 * fTemp263))) - (fConst748 * ((fConst779 * fTemp265) + (fConst780 * fTemp266))));
				fVeeec391 = ((fSlow1 * fVeeec391) + (fSlow2 * fabsf((fConst748 * (((fConst782 * fVeeec407[0]) + (fConst783 * fTemp266)) + (fConst782 * fTemp265))))));
				fbargraph20 = (fSlow0 + (2e+01f * log10f(fVeeec391)));
				float 	fTemp267 = fVeeec412[2]; // step: 3861
				float 	fTemp268 = fVeeec412[1]; // step: 3866
				fVeeec412[0] = (fTemp260 - (fConst791 * ((fConst792 * fTemp267) + (fConst793 * fTemp268))));
				float 	fTemp269 = fVeeec415[2]; // step: 3885
				float 	fTemp270 = fVeeec415[1]; // step: 3890
				fVeeec415[0] = ((fConst791 * (((fConst795 * fVeeec412[0]) + (fConst796 * fTemp268)) + (fConst795 * fTemp267))) - (fConst790 * ((fConst797 * fTemp269) + (fConst798 * fTemp270))));
				float 	fTemp271 = fVeeec418[2]; // step: 3908
				float 	fTemp272 = fVeeec418[1]; // step: 3913
				fVeeec418[0] = ((fConst790 * (((fConst799 * fVeeec415[0]) + (fConst800 * fTemp270)) + (fConst799 * fTemp269))) - (fConst789 * ((fConst801 * fTemp271) + (fConst802 * fTemp272))));
				float 	fTemp273 = (fConst789 * (((fConst803 * fVeeec418[0]) + (fConst804 * fTemp272)) + (fConst803 * fTemp271))); // step: 3930
				float 	fTemp274 = fVeeec421[2]; // step: 3931
				float 	fTemp275 = fVeeec421[1]; // step: 3936
				fVeeec421[0] = (fTemp273 - (fConst788 * ((fConst805 * fTemp274) + (fConst808 * fTemp275))));
				float 	fTemp276 = fVeeec424[2]; // step: 3957
				float 	fTemp277 = fVeeec424[1]; // step: 3962
				fVeeec424[0] = ((fConst788 * (((fConst810 * fVeeec421[0]) + (fConst811 * fTemp275)) + (fConst810 * fTemp274))) - (fConst787 * ((fConst812 * fTemp276) + (fConst813 * fTemp277))));
				float 	fTemp278 = fVeeec427[2]; // step: 3981
				float 	fTemp279 = fVeeec427[1]; // step: 3986
				fVeeec427[0] = ((fConst787 * (((fConst815 * fVeeec424[0]) + (fConst816 * fTemp277)) + (fConst815 * fTemp276))) - (fConst786 * ((fConst817 * fTemp278) + (fConst818 * fTemp279))));
				fVeeec411 = ((fSlow1 * fVeeec411) + (fSlow2 * fabsf((fConst786 * (((fConst820 * fVeeec427[0]) + (fConst821 * fTemp279)) + (fConst820 * fTemp278))))));
				fbargraph21 = (fSlow0 + (2e+01f * log10f(fVeeec411)));
				float 	fTemp280 = fVeeec432[2]; // step: 4045
				float 	fTemp281 = fVeeec432[1]; // step: 4050
				fVeeec432[0] = (fTemp273 - (fConst829 * ((fConst830 * fTemp280) + (fConst831 * fTemp281))));
				float 	fTemp282 = fVeeec435[2]; // step: 4069
				float 	fTemp283 = fVeeec435[1]; // step: 4074
				fVeeec435[0] = ((fConst829 * (((fConst833 * fVeeec432[0]) + (fConst834 * fTemp281)) + (fConst833 * fTemp280))) - (fConst828 * ((fConst835 * fTemp282) + (fConst836 * fTemp283))));
				float 	fTemp284 = fVeeec438[2]; // step: 4092
				float 	fTemp285 = fVeeec438[1]; // step: 4097
				fVeeec438[0] = ((fConst828 * (((fConst837 * fVeeec435[0]) + (fConst838 * fTemp283)) + (fConst837 * fTemp282))) - (fConst827 * ((fConst839 * fTemp284) + (fConst840 * fTemp285))));
				float 	fTemp286 = (fConst827 * (((fConst841 * fVeeec438[0]) + (fConst842 * fTemp285)) + (fConst841 * fTemp284))); // step: 4114
				float 	fTemp287 = fVeeec441[2]; // step: 4115
				float 	fTemp288 = fVeeec441[1]; // step: 4120
				fVeeec441[0] = (fTemp286 - (fConst826 * ((fConst843 * fTemp287) + (fConst846 * fTemp288))));
				float 	fTemp289 = fVeeec444[2]; // step: 4141
				float 	fTemp290 = fVeeec444[1]; // step: 4146
				fVeeec444[0] = ((fConst826 * (((fConst848 * fVeeec441[0]) + (fConst849 * fTemp288)) + (fConst848 * fTemp287))) - (fConst825 * ((fConst850 * fTemp289) + (fConst851 * fTemp290))));
				float 	fTemp291 = fVeeec447[2]; // step: 4165
				float 	fTemp292 = fVeeec447[1]; // step: 4170
				fVeeec447[0] = ((fConst825 * (((fConst853 * fVeeec444[0]) + (fConst854 * fTemp290)) + (fConst853 * fTemp289))) - (fConst824 * ((fConst855 * fTemp291) + (fConst856 * fTemp292))));
				fVeeec431 = ((fSlow1 * fVeeec431) + (fSlow2 * fabsf((fConst824 * (((fConst858 * fVeeec447[0]) + (fConst859 * fTemp292)) + (fConst858 * fTemp291))))));
				fbargraph22 = (fSlow0 + (2e+01f * log10f(fVeeec431)));
				float 	fTemp293 = fVeeec452[2]; // step: 4229
				float 	fTemp294 = fVeeec452[1]; // step: 4234
				fVeeec452[0] = (fTemp286 - (fConst867 * ((fConst868 * fTemp293) + (fConst869 * fTemp294))));
				float 	fTemp295 = fVeeec455[2]; // step: 4253
				float 	fTemp296 = fVeeec455[1]; // step: 4258
				fVeeec455[0] = ((fConst867 * (((fConst871 * fVeeec452[0]) + (fConst872 * fTemp294)) + (fConst871 * fTemp293))) - (fConst866 * ((fConst873 * fTemp295) + (fConst874 * fTemp296))));
				float 	fTemp297 = fVeeec458[2]; // step: 4276
				float 	fTemp298 = fVeeec458[1]; // step: 4281
				fVeeec458[0] = ((fConst866 * (((fConst875 * fVeeec455[0]) + (fConst876 * fTemp296)) + (fConst875 * fTemp295))) - (fConst865 * ((fConst877 * fTemp297) + (fConst878 * fTemp298))));
				float 	fTemp299 = (fConst865 * (((fConst879 * fVeeec458[0]) + (fConst880 * fTemp298)) + (fConst879 * fTemp297))); // step: 4298
				float 	fTemp300 = fVeeec461[2]; // step: 4299
				float 	fTemp301 = fVeeec461[1]; // step: 4304
				fVeeec461[0] = (fTemp299 - (fConst864 * ((fConst881 * fTemp300) + (fConst884 * fTemp301))));
				float 	fTemp302 = fVeeec464[2]; // step: 4325
				float 	fTemp303 = fVeeec464[1]; // step: 4330
				fVeeec464[0] = ((fConst864 * (((fConst886 * fVeeec461[0]) + (fConst887 * fTemp301)) + (fConst886 * fTemp300))) - (fConst863 * ((fConst888 * fTemp302) + (fConst889 * fTemp303))));
				float 	fTemp304 = fVeeec467[2]; // step: 4349
				float 	fTemp305 = fVeeec467[1]; // step: 4354
				fVeeec467[0] = ((fConst863 * (((fConst891 * fVeeec464[0]) + (fConst892 * fTemp303)) + (fConst891 * fTemp302))) - (fConst862 * ((fConst893 * fTemp304) + (fConst894 * fTemp305))));
				fVeeec451 = ((fSlow1 * fVeeec451) + (fSlow2 * fabsf((fConst862 * (((fConst896 * fVeeec467[0]) + (fConst897 * fTemp305)) + (fConst896 * fTemp304))))));
				fbargraph23 = (fSlow0 + (2e+01f * log10f(fVeeec451)));
				float 	fTemp306 = fVeeec472[2]; // step: 4413
				float 	fTemp307 = fVeeec472[1]; // step: 4418
				fVeeec472[0] = (fTemp299 - (fConst905 * ((fConst906 * fTemp306) + (fConst907 * fTemp307))));
				float 	fTemp308 = fVeeec475[2]; // step: 4437
				float 	fTemp309 = fVeeec475[1]; // step: 4442
				fVeeec475[0] = ((fConst905 * (((fConst909 * fVeeec472[0]) + (fConst910 * fTemp307)) + (fConst909 * fTemp306))) - (fConst904 * ((fConst911 * fTemp308) + (fConst912 * fTemp309))));
				float 	fTemp310 = fVeeec478[2]; // step: 4460
				float 	fTemp311 = fVeeec478[1]; // step: 4465
				fVeeec478[0] = ((fConst904 * (((fConst913 * fVeeec475[0]) + (fConst914 * fTemp309)) + (fConst913 * fTemp308))) - (fConst903 * ((fConst915 * fTemp310) + (fConst916 * fTemp311))));
				float 	fTemp312 = (fConst903 * (((fConst917 * fVeeec478[0]) + (fConst918 * fTemp311)) + (fConst917 * fTemp310))); // step: 4482
				float 	fTemp313 = fVeeec481[2]; // step: 4483
				float 	fTemp314 = fVeeec481[1]; // step: 4488
				fVeeec481[0] = (fTemp312 - (fConst902 * ((fConst919 * fTemp313) + (fConst922 * fTemp314))));
				float 	fTemp315 = fVeeec484[2]; // step: 4509
				float 	fTemp316 = fVeeec484[1]; // step: 4514
				fVeeec484[0] = ((fConst902 * (((fConst924 * fVeeec481[0]) + (fConst925 * fTemp314)) + (fConst924 * fTemp313))) - (fConst901 * ((fConst926 * fTemp315) + (fConst927 * fTemp316))));
				float 	fTemp317 = fVeeec487[2]; // step: 4533
				float 	fTemp318 = fVeeec487[1]; // step: 4538
				fVeeec487[0] = ((fConst901 * (((fConst929 * fVeeec484[0]) + (fConst930 * fTemp316)) + (fConst929 * fTemp315))) - (fConst900 * ((fConst931 * fTemp317) + (fConst932 * fTemp318))));
				fVeeec471 = ((fSlow1 * fVeeec471) + (fSlow2 * fabsf((fConst900 * (((fConst934 * fVeeec487[0]) + (fConst935 * fTemp318)) + (fConst934 * fTemp317))))));
				fbargraph24 = (fSlow0 + (2e+01f * log10f(fVeeec471)));
				float 	fTemp319 = fVeeec492[2]; // step: 4597
				float 	fTemp320 = fVeeec492[1]; // step: 4602
				fVeeec492[0] = (fTemp312 - (fConst943 * ((fConst944 * fTemp319) + (fConst945 * fTemp320))));
				float 	fTemp321 = fVeeec495[2]; // step: 4621
				float 	fTemp322 = fVeeec495[1]; // step: 4626
				fVeeec495[0] = ((fConst943 * (((fConst947 * fVeeec492[0]) + (fConst948 * fTemp320)) + (fConst947 * fTemp319))) - (fConst942 * ((fConst949 * fTemp321) + (fConst950 * fTemp322))));
				float 	fTemp323 = fVeeec498[2]; // step: 4644
				float 	fTemp324 = fVeeec498[1]; // step: 4649
				fVeeec498[0] = ((fConst942 * (((fConst951 * fVeeec495[0]) + (fConst952 * fTemp322)) + (fConst951 * fTemp321))) - (fConst941 * ((fConst953 * fTemp323) + (fConst954 * fTemp324))));
				float 	fTemp325 = (fConst941 * (((fConst955 * fVeeec498[0]) + (fConst956 * fTemp324)) + (fConst955 * fTemp323))); // step: 4666
				float 	fTemp326 = fVeeec501[2]; // step: 4667
				float 	fTemp327 = fVeeec501[1]; // step: 4672
				fVeeec501[0] = (fTemp325 - (fConst940 * ((fConst957 * fTemp326) + (fConst960 * fTemp327))));
				float 	fTemp328 = fVeeec504[2]; // step: 4693
				float 	fTemp329 = fVeeec504[1]; // step: 4698
				fVeeec504[0] = ((fConst940 * (((fConst962 * fVeeec501[0]) + (fConst963 * fTemp327)) + (fConst962 * fTemp326))) - (fConst939 * ((fConst964 * fTemp328) + (fConst965 * fTemp329))));
				float 	fTemp330 = fVeeec507[2]; // step: 4717
				float 	fTemp331 = fVeeec507[1]; // step: 4722
				fVeeec507[0] = ((fConst939 * (((fConst967 * fVeeec504[0]) + (fConst968 * fTemp329)) + (fConst967 * fTemp328))) - (fConst938 * ((fConst969 * fTemp330) + (fConst970 * fTemp331))));
				fVeeec491 = ((fSlow1 * fVeeec491) + (fSlow2 * fabsf((fConst938 * (((fConst972 * fVeeec507[0]) + (fConst973 * fTemp331)) + (fConst972 * fTemp330))))));
				fbargraph25 = (fSlow0 + (2e+01f * log10f(fVeeec491)));
				float 	fTemp332 = fVeeec512[2]; // step: 4781
				float 	fTemp333 = fVeeec512[1]; // step: 4786
				fVeeec512[0] = (fTemp325 - (fConst981 * ((fConst982 * fTemp332) + (fConst983 * fTemp333))));
				float 	fTemp334 = fVeeec515[2]; // step: 4805
				float 	fTemp335 = fVeeec515[1]; // step: 4810
				fVeeec515[0] = ((fConst981 * (((fConst985 * fVeeec512[0]) + (fConst986 * fTemp333)) + (fConst985 * fTemp332))) - (fConst980 * ((fConst987 * fTemp334) + (fConst988 * fTemp335))));
				float 	fTemp336 = fVeeec518[2]; // step: 4828
				float 	fTemp337 = fVeeec518[1]; // step: 4833
				fVeeec518[0] = ((fConst980 * (((fConst989 * fVeeec515[0]) + (fConst990 * fTemp335)) + (fConst989 * fTemp334))) - (fConst979 * ((fConst991 * fTemp336) + (fConst992 * fTemp337))));
				float 	fTemp338 = (fConst979 * (((fConst993 * fVeeec518[0]) + (fConst994 * fTemp337)) + (fConst993 * fTemp336))); // step: 4850
				float 	fTemp339 = fVeeec521[2]; // step: 4851
				float 	fTemp340 = fVeeec521[1]; // step: 4856
				fVeeec521[0] = (fTemp338 - (fConst978 * ((fConst995 * fTemp339) + (fConst998 * fTemp340))));
				float 	fTemp341 = fVeeec524[2]; // step: 4877
				float 	fTemp342 = fVeeec524[1]; // step: 4882
				fVeeec524[0] = ((fConst978 * (((fConst1000 * fVeeec521[0]) + (fConst1001 * fTemp340)) + (fConst1000 * fTemp339))) - (fConst977 * ((fConst1002 * fTemp341) + (fConst1003 * fTemp342))));
				float 	fTemp343 = fVeeec527[2]; // step: 4901
				float 	fTemp344 = fVeeec527[1]; // step: 4906
				fVeeec527[0] = ((fConst977 * (((fConst1005 * fVeeec524[0]) + (fConst1006 * fTemp342)) + (fConst1005 * fTemp341))) - (fConst976 * ((fConst1007 * fTemp343) + (fConst1008 * fTemp344))));
				fVeeec511 = ((fSlow1 * fVeeec511) + (fSlow2 * fabsf((fConst976 * (((fConst1010 * fVeeec527[0]) + (fConst1011 * fTemp344)) + (fConst1010 * fTemp343))))));
				fbargraph26 = (fSlow0 + (2e+01f * log10f(fVeeec511)));
				float 	fTemp345 = fVeeec532[2]; // step: 4965
				float 	fTemp346 = fVeeec532[1]; // step: 4970
				fVeeec532[0] = (fTemp338 - (fConst1019 * ((fConst1020 * fTemp345) + (fConst1021 * fTemp346))));
				float 	fTemp347 = fVeeec535[2]; // step: 4989
				float 	fTemp348 = fVeeec535[1]; // step: 4994
				fVeeec535[0] = ((fConst1019 * (((fConst1023 * fVeeec532[0]) + (fConst1024 * fTemp346)) + (fConst1023 * fTemp345))) - (fConst1018 * ((fConst1025 * fTemp347) + (fConst1026 * fTemp348))));
				float 	fTemp349 = fVeeec538[2]; // step: 5012
				float 	fTemp350 = fVeeec538[1]; // step: 5017
				fVeeec538[0] = ((fConst1018 * (((fConst1027 * fVeeec535[0]) + (fConst1028 * fTemp348)) + (fConst1027 * fTemp347))) - (fConst1017 * ((fConst1029 * fTemp349) + (fConst1030 * fTemp350))));
				float 	fTemp351 = (fConst1017 * (((fConst1031 * fVeeec538[0]) + (fConst1032 * fTemp350)) + (fConst1031 * fTemp349))); // step: 5034
				float 	fTemp352 = fVeeec541[2]; // step: 5035
				float 	fTemp353 = fVeeec541[1]; // step: 5040
				fVeeec541[0] = (fTemp351 - (fConst1016 * ((fConst1033 * fTemp352) + (fConst1036 * fTemp353))));
				float 	fTemp354 = fVeeec544[2]; // step: 5061
				float 	fTemp355 = fVeeec544[1]; // step: 5066
				fVeeec544[0] = ((fConst1016 * (((fConst1038 * fVeeec541[0]) + (fConst1039 * fTemp353)) + (fConst1038 * fTemp352))) - (fConst1015 * ((fConst1040 * fTemp354) + (fConst1041 * fTemp355))));
				float 	fTemp356 = fVeeec547[2]; // step: 5085
				float 	fTemp357 = fVeeec547[1]; // step: 5090
				fVeeec547[0] = ((fConst1015 * (((fConst1043 * fVeeec544[0]) + (fConst1044 * fTemp355)) + (fConst1043 * fTemp354))) - (fConst1014 * ((fConst1045 * fTemp356) + (fConst1046 * fTemp357))));
				fVeeec531 = ((fSlow1 * fVeeec531) + (fSlow2 * fabsf((fConst1014 * (((fConst1048 * fVeeec547[0]) + (fConst1049 * fTemp357)) + (fConst1048 * fTemp356))))));
				fbargraph27 = (fSlow0 + (2e+01f * log10f(fVeeec531)));
				float 	fTemp358 = fVeeec552[2]; // step: 5149
				float 	fTemp359 = fVeeec552[1]; // step: 5154
				fVeeec552[0] = (fTemp351 - (fConst1057 * ((fConst1058 * fTemp358) + (fConst1059 * fTemp359))));
				float 	fTemp360 = fVeeec555[2]; // step: 5173
				float 	fTemp361 = fVeeec555[1]; // step: 5178
				fVeeec555[0] = ((fConst1057 * (((fConst1061 * fVeeec552[0]) + (fConst1062 * fTemp359)) + (fConst1061 * fTemp358))) - (fConst1056 * ((fConst1063 * fTemp360) + (fConst1064 * fTemp361))));
				float 	fTemp362 = fVeeec558[2]; // step: 5196
				float 	fTemp363 = fVeeec558[1]; // step: 5201
				fVeeec558[0] = ((fConst1056 * (((fConst1065 * fVeeec555[0]) + (fConst1066 * fTemp361)) + (fConst1065 * fTemp360))) - (fConst1055 * ((fConst1067 * fTemp362) + (fConst1068 * fTemp363))));
				float 	fTemp364 = (fConst1055 * (((fConst1069 * fVeeec558[0]) + (fConst1070 * fTemp363)) + (fConst1069 * fTemp362))); // step: 5218
				float 	fTemp365 = fVeeec561[2]; // step: 5219
				float 	fTemp366 = fVeeec561[1]; // step: 5224
				fVeeec561[0] = (fTemp364 - (fConst1054 * ((fConst1071 * fTemp365) + (fConst1074 * fTemp366))));
				float 	fTemp367 = fVeeec564[2]; // step: 5245
				float 	fTemp368 = fVeeec564[1]; // step: 5250
				fVeeec564[0] = ((fConst1054 * (((fConst1076 * fVeeec561[0]) + (fConst1077 * fTemp366)) + (fConst1076 * fTemp365))) - (fConst1053 * ((fConst1078 * fTemp367) + (fConst1079 * fTemp368))));
				float 	fTemp369 = fVeeec567[2]; // step: 5269
				float 	fTemp370 = fVeeec567[1]; // step: 5274
				fVeeec567[0] = ((fConst1053 * (((fConst1081 * fVeeec564[0]) + (fConst1082 * fTemp368)) + (fConst1081 * fTemp367))) - (fConst1052 * ((fConst1083 * fTemp369) + (fConst1084 * fTemp370))));
				fVeeec551 = ((fSlow1 * fVeeec551) + (fSlow2 * fabsf((fConst1052 * (((fConst1086 * fVeeec567[0]) + (fConst1087 * fTemp370)) + (fConst1086 * fTemp369))))));
				fbargraph28 = (fSlow0 + (2e+01f * log10f(fVeeec551)));
				float 	fTemp371 = fVeeec572[2]; // step: 5317
				float 	fTemp372 = fVeeec572[1]; // step: 5322
				fVeeec572[0] = (fTemp364 - (fConst1090 * ((fConst1091 * fTemp371) + (fConst1092 * fTemp372))));
				float 	fTemp373 = fVeeec575[2]; // step: 5341
				float 	fTemp374 = fVeeec575[1]; // step: 5346
				fVeeec575[0] = ((fConst1090 * (((fConst1094 * fVeeec572[0]) + (fConst1095 * fTemp372)) + (fConst1094 * fTemp371))) - (fConst1089 * ((fConst1096 * fTemp373) + (fConst1097 * fTemp374))));
				float 	fTemp375 = fVeeec578[2]; // step: 5364
				float 	fTemp376 = fVeeec578[1]; // step: 5369
				fVeeec578[0] = ((fConst1089 * (((fConst1098 * fVeeec575[0]) + (fConst1099 * fTemp374)) + (fConst1098 * fTemp373))) - (fConst1088 * ((fConst1100 * fTemp375) + (fConst1101 * fTemp376))));
				fVeeec571 = ((fSlow1 * fVeeec571) + (fSlow2 * fabsf((fConst1088 * (((fConst1102 * fVeeec578[0]) + (fConst1103 * fTemp376)) + (fConst1102 * fTemp375))))));
				fbargraph29 = (fSlow0 + (2e+01f * log10f(fVeeec571)));
				float 	fTemp377 = fTemp0; // step: 5397
				output0[i] = (FAUSTFLOAT)(fTemp377);  // Zone Exec Code
				output1[i] = (FAUSTFLOAT)(fTemp377);  // Zone Exec Code
				// post processing
				fVeeec578[2] = fVeeec578[1];
				fVeeec578[1] = fVeeec578[0];
				fVeeec575[2] = fVeeec575[1];
				fVeeec575[1] = fVeeec575[0];
				fVeeec572[2] = fVeeec572[1];
				fVeeec572[1] = fVeeec572[0];
				fVeeec567[2] = fVeeec567[1];
				fVeeec567[1] = fVeeec567[0];
				fVeeec564[2] = fVeeec564[1];
				fVeeec564[1] = fVeeec564[0];
				fVeeec561[2] = fVeeec561[1];
				fVeeec561[1] = fVeeec561[0];
				fVeeec558[2] = fVeeec558[1];
				fVeeec558[1] = fVeeec558[0];
				fVeeec555[2] = fVeeec555[1];
				fVeeec555[1] = fVeeec555[0];
				fVeeec552[2] = fVeeec552[1];
				fVeeec552[1] = fVeeec552[0];
				fVeeec547[2] = fVeeec547[1];
				fVeeec547[1] = fVeeec547[0];
				fVeeec544[2] = fVeeec544[1];
				fVeeec544[1] = fVeeec544[0];
				fVeeec541[2] = fVeeec541[1];
				fVeeec541[1] = fVeeec541[0];
				fVeeec538[2] = fVeeec538[1];
				fVeeec538[1] = fVeeec538[0];
				fVeeec535[2] = fVeeec535[1];
				fVeeec535[1] = fVeeec535[0];
				fVeeec532[2] = fVeeec532[1];
				fVeeec532[1] = fVeeec532[0];
				fVeeec527[2] = fVeeec527[1];
				fVeeec527[1] = fVeeec527[0];
				fVeeec524[2] = fVeeec524[1];
				fVeeec524[1] = fVeeec524[0];
				fVeeec521[2] = fVeeec521[1];
				fVeeec521[1] = fVeeec521[0];
				fVeeec518[2] = fVeeec518[1];
				fVeeec518[1] = fVeeec518[0];
				fVeeec515[2] = fVeeec515[1];
				fVeeec515[1] = fVeeec515[0];
				fVeeec512[2] = fVeeec512[1];
				fVeeec512[1] = fVeeec512[0];
				fVeeec507[2] = fVeeec507[1];
				fVeeec507[1] = fVeeec507[0];
				fVeeec504[2] = fVeeec504[1];
				fVeeec504[1] = fVeeec504[0];
				fVeeec501[2] = fVeeec501[1];
				fVeeec501[1] = fVeeec501[0];
				fVeeec498[2] = fVeeec498[1];
				fVeeec498[1] = fVeeec498[0];
				fVeeec495[2] = fVeeec495[1];
				fVeeec495[1] = fVeeec495[0];
				fVeeec492[2] = fVeeec492[1];
				fVeeec492[1] = fVeeec492[0];
				fVeeec487[2] = fVeeec487[1];
				fVeeec487[1] = fVeeec487[0];
				fVeeec484[2] = fVeeec484[1];
				fVeeec484[1] = fVeeec484[0];
				fVeeec481[2] = fVeeec481[1];
				fVeeec481[1] = fVeeec481[0];
				fVeeec478[2] = fVeeec478[1];
				fVeeec478[1] = fVeeec478[0];
				fVeeec475[2] = fVeeec475[1];
				fVeeec475[1] = fVeeec475[0];
				fVeeec472[2] = fVeeec472[1];
				fVeeec472[1] = fVeeec472[0];
				fVeeec467[2] = fVeeec467[1];
				fVeeec467[1] = fVeeec467[0];
				fVeeec464[2] = fVeeec464[1];
				fVeeec464[1] = fVeeec464[0];
				fVeeec461[2] = fVeeec461[1];
				fVeeec461[1] = fVeeec461[0];
				fVeeec458[2] = fVeeec458[1];
				fVeeec458[1] = fVeeec458[0];
				fVeeec455[2] = fVeeec455[1];
				fVeeec455[1] = fVeeec455[0];
				fVeeec452[2] = fVeeec452[1];
				fVeeec452[1] = fVeeec452[0];
				fVeeec447[2] = fVeeec447[1];
				fVeeec447[1] = fVeeec447[0];
				fVeeec444[2] = fVeeec444[1];
				fVeeec444[1] = fVeeec444[0];
				fVeeec441[2] = fVeeec441[1];
				fVeeec441[1] = fVeeec441[0];
				fVeeec438[2] = fVeeec438[1];
				fVeeec438[1] = fVeeec438[0];
				fVeeec435[2] = fVeeec435[1];
				fVeeec435[1] = fVeeec435[0];
				fVeeec432[2] = fVeeec432[1];
				fVeeec432[1] = fVeeec432[0];
				fVeeec427[2] = fVeeec427[1];
				fVeeec427[1] = fVeeec427[0];
				fVeeec424[2] = fVeeec424[1];
				fVeeec424[1] = fVeeec424[0];
				fVeeec421[2] = fVeeec421[1];
				fVeeec421[1] = fVeeec421[0];
				fVeeec418[2] = fVeeec418[1];
				fVeeec418[1] = fVeeec418[0];
				fVeeec415[2] = fVeeec415[1];
				fVeeec415[1] = fVeeec415[0];
				fVeeec412[2] = fVeeec412[1];
				fVeeec412[1] = fVeeec412[0];
				fVeeec407[2] = fVeeec407[1];
				fVeeec407[1] = fVeeec407[0];
				fVeeec404[2] = fVeeec404[1];
				fVeeec404[1] = fVeeec404[0];
				fVeeec401[2] = fVeeec401[1];
				fVeeec401[1] = fVeeec401[0];
				fVeeec398[2] = fVeeec398[1];
				fVeeec398[1] = fVeeec398[0];
				fVeeec395[2] = fVeeec395[1];
				fVeeec395[1] = fVeeec395[0];
				fVeeec392[2] = fVeeec392[1];
				fVeeec392[1] = fVeeec392[0];
				fVeeec387[2] = fVeeec387[1];
				fVeeec387[1] = fVeeec387[0];
				fVeeec384[2] = fVeeec384[1];
				fVeeec384[1] = fVeeec384[0];
				fVeeec381[2] = fVeeec381[1];
				fVeeec381[1] = fVeeec381[0];
				fVeeec378[2] = fVeeec378[1];
				fVeeec378[1] = fVeeec378[0];
				fVeeec375[2] = fVeeec375[1];
				fVeeec375[1] = fVeeec375[0];
				fVeeec372[2] = fVeeec372[1];
				fVeeec372[1] = fVeeec372[0];
				fVeeec367[2] = fVeeec367[1];
				fVeeec367[1] = fVeeec367[0];
				fVeeec364[2] = fVeeec364[1];
				fVeeec364[1] = fVeeec364[0];
				fVeeec361[2] = fVeeec361[1];
				fVeeec361[1] = fVeeec361[0];
				fVeeec358[2] = fVeeec358[1];
				fVeeec358[1] = fVeeec358[0];
				fVeeec355[2] = fVeeec355[1];
				fVeeec355[1] = fVeeec355[0];
				fVeeec352[2] = fVeeec352[1];
				fVeeec352[1] = fVeeec352[0];
				fVeeec347[2] = fVeeec347[1];
				fVeeec347[1] = fVeeec347[0];
				fVeeec344[2] = fVeeec344[1];
				fVeeec344[1] = fVeeec344[0];
				fVeeec341[2] = fVeeec341[1];
				fVeeec341[1] = fVeeec341[0];
				fVeeec338[2] = fVeeec338[1];
				fVeeec338[1] = fVeeec338[0];
				fVeeec335[2] = fVeeec335[1];
				fVeeec335[1] = fVeeec335[0];
				fVeeec332[2] = fVeeec332[1];
				fVeeec332[1] = fVeeec332[0];
				fVeeec327[2] = fVeeec327[1];
				fVeeec327[1] = fVeeec327[0];
				fVeeec324[2] = fVeeec324[1];
				fVeeec324[1] = fVeeec324[0];
				fVeeec321[2] = fVeeec321[1];
				fVeeec321[1] = fVeeec321[0];
				fVeeec318[2] = fVeeec318[1];
				fVeeec318[1] = fVeeec318[0];
				fVeeec315[2] = fVeeec315[1];
				fVeeec315[1] = fVeeec315[0];
				fVeeec312[2] = fVeeec312[1];
				fVeeec312[1] = fVeeec312[0];
				fVeeec307[2] = fVeeec307[1];
				fVeeec307[1] = fVeeec307[0];
				fVeeec304[2] = fVeeec304[1];
				fVeeec304[1] = fVeeec304[0];
				fVeeec301[2] = fVeeec301[1];
				fVeeec301[1] = fVeeec301[0];
				fVeeec298[2] = fVeeec298[1];
				fVeeec298[1] = fVeeec298[0];
				fVeeec295[2] = fVeeec295[1];
				fVeeec295[1] = fVeeec295[0];
				fVeeec292[2] = fVeeec292[1];
				fVeeec292[1] = fVeeec292[0];
				fVeeec287[2] = fVeeec287[1];
				fVeeec287[1] = fVeeec287[0];
				fVeeec284[2] = fVeeec284[1];
				fVeeec284[1] = fVeeec284[0];
				fVeeec281[2] = fVeeec281[1];
				fVeeec281[1] = fVeeec281[0];
				fVeeec278[2] = fVeeec278[1];
				fVeeec278[1] = fVeeec278[0];
				fVeeec275[2] = fVeeec275[1];
				fVeeec275[1] = fVeeec275[0];
				fVeeec272[2] = fVeeec272[1];
				fVeeec272[1] = fVeeec272[0];
				fVeeec267[2] = fVeeec267[1];
				fVeeec267[1] = fVeeec267[0];
				fVeeec264[2] = fVeeec264[1];
				fVeeec264[1] = fVeeec264[0];
				fVeeec261[2] = fVeeec261[1];
				fVeeec261[1] = fVeeec261[0];
				fVeeec258[2] = fVeeec258[1];
				fVeeec258[1] = fVeeec258[0];
				fVeeec255[2] = fVeeec255[1];
				fVeeec255[1] = fVeeec255[0];
				fVeeec252[2] = fVeeec252[1];
				fVeeec252[1] = fVeeec252[0];
				fVeeec247[2] = fVeeec247[1];
				fVeeec247[1] = fVeeec247[0];
				fVeeec244[2] = fVeeec244[1];
				fVeeec244[1] = fVeeec244[0];
				fVeeec241[2] = fVeeec241[1];
				fVeeec241[1] = fVeeec241[0];
				fVeeec238[2] = fVeeec238[1];
				fVeeec238[1] = fVeeec238[0];
				fVeeec235[2] = fVeeec235[1];
				fVeeec235[1] = fVeeec235[0];
				fVeeec232[2] = fVeeec232[1];
				fVeeec232[1] = fVeeec232[0];
				fVeeec227[2] = fVeeec227[1];
				fVeeec227[1] = fVeeec227[0];
				fVeeec224[2] = fVeeec224[1];
				fVeeec224[1] = fVeeec224[0];
				fVeeec221[2] = fVeeec221[1];
				fVeeec221[1] = fVeeec221[0];
				fVeeec218[2] = fVeeec218[1];
				fVeeec218[1] = fVeeec218[0];
				fVeeec215[2] = fVeeec215[1];
				fVeeec215[1] = fVeeec215[0];
				fVeeec212[2] = fVeeec212[1];
				fVeeec212[1] = fVeeec212[0];
				fVeeec207[2] = fVeeec207[1];
				fVeeec207[1] = fVeeec207[0];
				fVeeec204[2] = fVeeec204[1];
				fVeeec204[1] = fVeeec204[0];
				fVeeec201[2] = fVeeec201[1];
				fVeeec201[1] = fVeeec201[0];
				fVeeec198[2] = fVeeec198[1];
				fVeeec198[1] = fVeeec198[0];
				fVeeec195[2] = fVeeec195[1];
				fVeeec195[1] = fVeeec195[0];
				fVeeec192[2] = fVeeec192[1];
				fVeeec192[1] = fVeeec192[0];
				fVeeec187[2] = fVeeec187[1];
				fVeeec187[1] = fVeeec187[0];
				fVeeec184[2] = fVeeec184[1];
				fVeeec184[1] = fVeeec184[0];
				fVeeec181[2] = fVeeec181[1];
				fVeeec181[1] = fVeeec181[0];
				fVeeec178[2] = fVeeec178[1];
				fVeeec178[1] = fVeeec178[0];
				fVeeec175[2] = fVeeec175[1];
				fVeeec175[1] = fVeeec175[0];
				fVeeec172[2] = fVeeec172[1];
				fVeeec172[1] = fVeeec172[0];
				fVeeec167[2] = fVeeec167[1];
				fVeeec167[1] = fVeeec167[0];
				fVeeec164[2] = fVeeec164[1];
				fVeeec164[1] = fVeeec164[0];
				fVeeec161[2] = fVeeec161[1];
				fVeeec161[1] = fVeeec161[0];
				fVeeec158[2] = fVeeec158[1];
				fVeeec158[1] = fVeeec158[0];
				fVeeec155[2] = fVeeec155[1];
				fVeeec155[1] = fVeeec155[0];
				fVeeec152[2] = fVeeec152[1];
				fVeeec152[1] = fVeeec152[0];
				fVeeec147[2] = fVeeec147[1];
				fVeeec147[1] = fVeeec147[0];
				fVeeec144[2] = fVeeec144[1];
				fVeeec144[1] = fVeeec144[0];
				fVeeec141[2] = fVeeec141[1];
				fVeeec141[1] = fVeeec141[0];
				fVeeec138[2] = fVeeec138[1];
				fVeeec138[1] = fVeeec138[0];
				fVeeec135[2] = fVeeec135[1];
				fVeeec135[1] = fVeeec135[0];
				fVeeec132[2] = fVeeec132[1];
				fVeeec132[1] = fVeeec132[0];
				fVeeec127[2] = fVeeec127[1];
				fVeeec127[1] = fVeeec127[0];
				fVeeec124[2] = fVeeec124[1];
				fVeeec124[1] = fVeeec124[0];
				fVeeec121[2] = fVeeec121[1];
				fVeeec121[1] = fVeeec121[0];
				fVeeec118[2] = fVeeec118[1];
				fVeeec118[1] = fVeeec118[0];
				fVeeec115[2] = fVeeec115[1];
				fVeeec115[1] = fVeeec115[0];
				fVeeec112[2] = fVeeec112[1];
				fVeeec112[1] = fVeeec112[0];
				fVeeec107[2] = fVeeec107[1];
				fVeeec107[1] = fVeeec107[0];
				fVeeec104[2] = fVeeec104[1];
				fVeeec104[1] = fVeeec104[0];
				fVeeec101[2] = fVeeec101[1];
				fVeeec101[1] = fVeeec101[0];
				fVeeec98[2] = fVeeec98[1];
				fVeeec98[1] = fVeeec98[0];
				fVeeec95[2] = fVeeec95[1];
				fVeeec95[1] = fVeeec95[0];
				fVeeec92[2] = fVeeec92[1];
				fVeeec92[1] = fVeeec92[0];
				fVeeec87[2] = fVeeec87[1];
				fVeeec87[1] = fVeeec87[0];
				fVeeec84[2] = fVeeec84[1];
				fVeeec84[1] = fVeeec84[0];
				fVeeec81[2] = fVeeec81[1];
				fVeeec81[1] = fVeeec81[0];
				fVeeec78[2] = fVeeec78[1];
				fVeeec78[1] = fVeeec78[0];
				fVeeec75[2] = fVeeec75[1];
				fVeeec75[1] = fVeeec75[0];
				fVeeec72[2] = fVeeec72[1];
				fVeeec72[1] = fVeeec72[0];
				fVeeec67[2] = fVeeec67[1];
				fVeeec67[1] = fVeeec67[0];
				fVeeec64[2] = fVeeec64[1];
				fVeeec64[1] = fVeeec64[0];
				fVeeec61[2] = fVeeec61[1];
				fVeeec61[1] = fVeeec61[0];
				fVeeec58[2] = fVeeec58[1];
				fVeeec58[1] = fVeeec58[0];
				fVeeec55[2] = fVeeec55[1];
				fVeeec55[1] = fVeeec55[0];
				fVeeec52[2] = fVeeec52[1];
				fVeeec52[1] = fVeeec52[0];
				fVeeec47[2] = fVeeec47[1];
				fVeeec47[1] = fVeeec47[0];
				fVeeec44[2] = fVeeec44[1];
				fVeeec44[1] = fVeeec44[0];
				fVeeec41[2] = fVeeec41[1];
				fVeeec41[1] = fVeeec41[0];
				fVeeec38[2] = fVeeec38[1];
				fVeeec38[1] = fVeeec38[0];
				fVeeec35[2] = fVeeec35[1];
				fVeeec35[1] = fVeeec35[0];
				fVeeec32[2] = fVeeec32[1];
				fVeeec32[1] = fVeeec32[0];
				fVeeec27[2] = fVeeec27[1];
				fVeeec27[1] = fVeeec27[0];
				fVeeec24[2] = fVeeec24[1];
				fVeeec24[1] = fVeeec24[0];
				fVeeec21[2] = fVeeec21[1];
				fVeeec21[1] = fVeeec21[0];
				fVeeec18[2] = fVeeec18[1];
				fVeeec18[1] = fVeeec18[0];
				fVeeec15[2] = fVeeec15[1];
				fVeeec15[1] = fVeeec15[0];
				fVeeec12[2] = fVeeec12[1];
				fVeeec12[1] = fVeeec12[0];
				fVeeec7[2] = fVeeec7[1];
				fVeeec7[1] = fVeeec7[0];
				fVeeec4[2] = fVeeec4[1];
				fVeeec4[1] = fVeeec4[0];
				fVeeec1[2] = fVeeec1[1];
				fVeeec1[1] = fVeeec1[0];
			}
			fVeeec1State[0] = fVeeec1[1];
			fVeeec1State[1] = fVeeec1[2];
			fVeeec4State[0] = fVeeec4[1];
			fVeeec4State[1] = fVeeec4[2];
			fVeeec7State[0] = fVeeec7[1];
			fVeeec7State[1] = fVeeec7[2];
			fVeeec0State = fVeeec0;
			fVeeec12State[0] = fVeeec12[1];
			fVeeec12State[1] = fVeeec12[2];
			fVeeec15State[0] = fVeeec15[1];
			fVeeec15State[1] = fVeeec15[2];
			fVeeec18State[0] = fVeeec18[1];
			fVeeec18State[1] = fVeeec18[2];
			fVeeec21State[0] = fVeeec21[1];
			fVeeec21State[1] = fVeeec21[2];
			fVeeec24State[0] = fVeeec24[1];
			fVeeec24State[1] = fVeeec24[2];
			fVeeec27State[0] = fVeeec27[1];
			fVeeec27State[1] = fVeeec27[2];
			fVeeec11State = fVeeec11;
			fVeeec32State[0] = fVeeec32[1];
			fVeeec32State[1] = fVeeec32[2];
			fVeeec35State[0] = fVeeec35[1];
			fVeeec35State[1] = fVeeec35[2];
			fVeeec38State[0] = fVeeec38[1];
			fVeeec38State[1] = fVeeec38[2];
			fVeeec41State[0] = fVeeec41[1];
			fVeeec41State[1] = fVeeec41[2];
			fVeeec44State[0] = fVeeec44[1];
			fVeeec44State[1] = fVeeec44[2];
			fVeeec47State[0] = fVeeec47[1];
			fVeeec47State[1] = fVeeec47[2];
			fVeeec31State = fVeeec31;
			fVeeec52State[0] = fVeeec52[1];
			fVeeec52State[1] = fVeeec52[2];
			fVeeec55State[0] = fVeeec55[1];
			fVeeec55State[1] = fVeeec55[2];
			fVeeec58State[0] = fVeeec58[1];
			fVeeec58State[1] = fVeeec58[2];
			fVeeec61State[0] = fVeeec61[1];
			fVeeec61State[1] = fVeeec61[2];
			fVeeec64State[0] = fVeeec64[1];
			fVeeec64State[1] = fVeeec64[2];
			fVeeec67State[0] = fVeeec67[1];
			fVeeec67State[1] = fVeeec67[2];
			fVeeec51State = fVeeec51;
			fVeeec72State[0] = fVeeec72[1];
			fVeeec72State[1] = fVeeec72[2];
			fVeeec75State[0] = fVeeec75[1];
			fVeeec75State[1] = fVeeec75[2];
			fVeeec78State[0] = fVeeec78[1];
			fVeeec78State[1] = fVeeec78[2];
			fVeeec81State[0] = fVeeec81[1];
			fVeeec81State[1] = fVeeec81[2];
			fVeeec84State[0] = fVeeec84[1];
			fVeeec84State[1] = fVeeec84[2];
			fVeeec87State[0] = fVeeec87[1];
			fVeeec87State[1] = fVeeec87[2];
			fVeeec71State = fVeeec71;
			fVeeec92State[0] = fVeeec92[1];
			fVeeec92State[1] = fVeeec92[2];
			fVeeec95State[0] = fVeeec95[1];
			fVeeec95State[1] = fVeeec95[2];
			fVeeec98State[0] = fVeeec98[1];
			fVeeec98State[1] = fVeeec98[2];
			fVeeec101State[0] = fVeeec101[1];
			fVeeec101State[1] = fVeeec101[2];
			fVeeec104State[0] = fVeeec104[1];
			fVeeec104State[1] = fVeeec104[2];
			fVeeec107State[0] = fVeeec107[1];
			fVeeec107State[1] = fVeeec107[2];
			fVeeec91State = fVeeec91;
			fVeeec112State[0] = fVeeec112[1];
			fVeeec112State[1] = fVeeec112[2];
			fVeeec115State[0] = fVeeec115[1];
			fVeeec115State[1] = fVeeec115[2];
			fVeeec118State[0] = fVeeec118[1];
			fVeeec118State[1] = fVeeec118[2];
			fVeeec121State[0] = fVeeec121[1];
			fVeeec121State[1] = fVeeec121[2];
			fVeeec124State[0] = fVeeec124[1];
			fVeeec124State[1] = fVeeec124[2];
			fVeeec127State[0] = fVeeec127[1];
			fVeeec127State[1] = fVeeec127[2];
			fVeeec111State = fVeeec111;
			fVeeec132State[0] = fVeeec132[1];
			fVeeec132State[1] = fVeeec132[2];
			fVeeec135State[0] = fVeeec135[1];
			fVeeec135State[1] = fVeeec135[2];
			fVeeec138State[0] = fVeeec138[1];
			fVeeec138State[1] = fVeeec138[2];
			fVeeec141State[0] = fVeeec141[1];
			fVeeec141State[1] = fVeeec141[2];
			fVeeec144State[0] = fVeeec144[1];
			fVeeec144State[1] = fVeeec144[2];
			fVeeec147State[0] = fVeeec147[1];
			fVeeec147State[1] = fVeeec147[2];
			fVeeec131State = fVeeec131;
			fVeeec152State[0] = fVeeec152[1];
			fVeeec152State[1] = fVeeec152[2];
			fVeeec155State[0] = fVeeec155[1];
			fVeeec155State[1] = fVeeec155[2];
			fVeeec158State[0] = fVeeec158[1];
			fVeeec158State[1] = fVeeec158[2];
			fVeeec161State[0] = fVeeec161[1];
			fVeeec161State[1] = fVeeec161[2];
			fVeeec164State[0] = fVeeec164[1];
			fVeeec164State[1] = fVeeec164[2];
			fVeeec167State[0] = fVeeec167[1];
			fVeeec167State[1] = fVeeec167[2];
			fVeeec151State = fVeeec151;
			fVeeec172State[0] = fVeeec172[1];
			fVeeec172State[1] = fVeeec172[2];
			fVeeec175State[0] = fVeeec175[1];
			fVeeec175State[1] = fVeeec175[2];
			fVeeec178State[0] = fVeeec178[1];
			fVeeec178State[1] = fVeeec178[2];
			fVeeec181State[0] = fVeeec181[1];
			fVeeec181State[1] = fVeeec181[2];
			fVeeec184State[0] = fVeeec184[1];
			fVeeec184State[1] = fVeeec184[2];
			fVeeec187State[0] = fVeeec187[1];
			fVeeec187State[1] = fVeeec187[2];
			fVeeec171State = fVeeec171;
			fVeeec192State[0] = fVeeec192[1];
			fVeeec192State[1] = fVeeec192[2];
			fVeeec195State[0] = fVeeec195[1];
			fVeeec195State[1] = fVeeec195[2];
			fVeeec198State[0] = fVeeec198[1];
			fVeeec198State[1] = fVeeec198[2];
			fVeeec201State[0] = fVeeec201[1];
			fVeeec201State[1] = fVeeec201[2];
			fVeeec204State[0] = fVeeec204[1];
			fVeeec204State[1] = fVeeec204[2];
			fVeeec207State[0] = fVeeec207[1];
			fVeeec207State[1] = fVeeec207[2];
			fVeeec191State = fVeeec191;
			fVeeec212State[0] = fVeeec212[1];
			fVeeec212State[1] = fVeeec212[2];
			fVeeec215State[0] = fVeeec215[1];
			fVeeec215State[1] = fVeeec215[2];
			fVeeec218State[0] = fVeeec218[1];
			fVeeec218State[1] = fVeeec218[2];
			fVeeec221State[0] = fVeeec221[1];
			fVeeec221State[1] = fVeeec221[2];
			fVeeec224State[0] = fVeeec224[1];
			fVeeec224State[1] = fVeeec224[2];
			fVeeec227State[0] = fVeeec227[1];
			fVeeec227State[1] = fVeeec227[2];
			fVeeec211State = fVeeec211;
			fVeeec232State[0] = fVeeec232[1];
			fVeeec232State[1] = fVeeec232[2];
			fVeeec235State[0] = fVeeec235[1];
			fVeeec235State[1] = fVeeec235[2];
			fVeeec238State[0] = fVeeec238[1];
			fVeeec238State[1] = fVeeec238[2];
			fVeeec241State[0] = fVeeec241[1];
			fVeeec241State[1] = fVeeec241[2];
			fVeeec244State[0] = fVeeec244[1];
			fVeeec244State[1] = fVeeec244[2];
			fVeeec247State[0] = fVeeec247[1];
			fVeeec247State[1] = fVeeec247[2];
			fVeeec231State = fVeeec231;
			fVeeec252State[0] = fVeeec252[1];
			fVeeec252State[1] = fVeeec252[2];
			fVeeec255State[0] = fVeeec255[1];
			fVeeec255State[1] = fVeeec255[2];
			fVeeec258State[0] = fVeeec258[1];
			fVeeec258State[1] = fVeeec258[2];
			fVeeec261State[0] = fVeeec261[1];
			fVeeec261State[1] = fVeeec261[2];
			fVeeec264State[0] = fVeeec264[1];
			fVeeec264State[1] = fVeeec264[2];
			fVeeec267State[0] = fVeeec267[1];
			fVeeec267State[1] = fVeeec267[2];
			fVeeec251State = fVeeec251;
			fVeeec272State[0] = fVeeec272[1];
			fVeeec272State[1] = fVeeec272[2];
			fVeeec275State[0] = fVeeec275[1];
			fVeeec275State[1] = fVeeec275[2];
			fVeeec278State[0] = fVeeec278[1];
			fVeeec278State[1] = fVeeec278[2];
			fVeeec281State[0] = fVeeec281[1];
			fVeeec281State[1] = fVeeec281[2];
			fVeeec284State[0] = fVeeec284[1];
			fVeeec284State[1] = fVeeec284[2];
			fVeeec287State[0] = fVeeec287[1];
			fVeeec287State[1] = fVeeec287[2];
			fVeeec271State = fVeeec271;
			fVeeec292State[0] = fVeeec292[1];
			fVeeec292State[1] = fVeeec292[2];
			fVeeec295State[0] = fVeeec295[1];
			fVeeec295State[1] = fVeeec295[2];
			fVeeec298State[0] = fVeeec298[1];
			fVeeec298State[1] = fVeeec298[2];
			fVeeec301State[0] = fVeeec301[1];
			fVeeec301State[1] = fVeeec301[2];
			fVeeec304State[0] = fVeeec304[1];
			fVeeec304State[1] = fVeeec304[2];
			fVeeec307State[0] = fVeeec307[1];
			fVeeec307State[1] = fVeeec307[2];
			fVeeec291State = fVeeec291;
			fVeeec312State[0] = fVeeec312[1];
			fVeeec312State[1] = fVeeec312[2];
			fVeeec315State[0] = fVeeec315[1];
			fVeeec315State[1] = fVeeec315[2];
			fVeeec318State[0] = fVeeec318[1];
			fVeeec318State[1] = fVeeec318[2];
			fVeeec321State[0] = fVeeec321[1];
			fVeeec321State[1] = fVeeec321[2];
			fVeeec324State[0] = fVeeec324[1];
			fVeeec324State[1] = fVeeec324[2];
			fVeeec327State[0] = fVeeec327[1];
			fVeeec327State[1] = fVeeec327[2];
			fVeeec311State = fVeeec311;
			fVeeec332State[0] = fVeeec332[1];
			fVeeec332State[1] = fVeeec332[2];
			fVeeec335State[0] = fVeeec335[1];
			fVeeec335State[1] = fVeeec335[2];
			fVeeec338State[0] = fVeeec338[1];
			fVeeec338State[1] = fVeeec338[2];
			fVeeec341State[0] = fVeeec341[1];
			fVeeec341State[1] = fVeeec341[2];
			fVeeec344State[0] = fVeeec344[1];
			fVeeec344State[1] = fVeeec344[2];
			fVeeec347State[0] = fVeeec347[1];
			fVeeec347State[1] = fVeeec347[2];
			fVeeec331State = fVeeec331;
			fVeeec352State[0] = fVeeec352[1];
			fVeeec352State[1] = fVeeec352[2];
			fVeeec355State[0] = fVeeec355[1];
			fVeeec355State[1] = fVeeec355[2];
			fVeeec358State[0] = fVeeec358[1];
			fVeeec358State[1] = fVeeec358[2];
			fVeeec361State[0] = fVeeec361[1];
			fVeeec361State[1] = fVeeec361[2];
			fVeeec364State[0] = fVeeec364[1];
			fVeeec364State[1] = fVeeec364[2];
			fVeeec367State[0] = fVeeec367[1];
			fVeeec367State[1] = fVeeec367[2];
			fVeeec351State = fVeeec351;
			fVeeec372State[0] = fVeeec372[1];
			fVeeec372State[1] = fVeeec372[2];
			fVeeec375State[0] = fVeeec375[1];
			fVeeec375State[1] = fVeeec375[2];
			fVeeec378State[0] = fVeeec378[1];
			fVeeec378State[1] = fVeeec378[2];
			fVeeec381State[0] = fVeeec381[1];
			fVeeec381State[1] = fVeeec381[2];
			fVeeec384State[0] = fVeeec384[1];
			fVeeec384State[1] = fVeeec384[2];
			fVeeec387State[0] = fVeeec387[1];
			fVeeec387State[1] = fVeeec387[2];
			fVeeec371State = fVeeec371;
			fVeeec392State[0] = fVeeec392[1];
			fVeeec392State[1] = fVeeec392[2];
			fVeeec395State[0] = fVeeec395[1];
			fVeeec395State[1] = fVeeec395[2];
			fVeeec398State[0] = fVeeec398[1];
			fVeeec398State[1] = fVeeec398[2];
			fVeeec401State[0] = fVeeec401[1];
			fVeeec401State[1] = fVeeec401[2];
			fVeeec404State[0] = fVeeec404[1];
			fVeeec404State[1] = fVeeec404[2];
			fVeeec407State[0] = fVeeec407[1];
			fVeeec407State[1] = fVeeec407[2];
			fVeeec391State = fVeeec391;
			fVeeec412State[0] = fVeeec412[1];
			fVeeec412State[1] = fVeeec412[2];
			fVeeec415State[0] = fVeeec415[1];
			fVeeec415State[1] = fVeeec415[2];
			fVeeec418State[0] = fVeeec418[1];
			fVeeec418State[1] = fVeeec418[2];
			fVeeec421State[0] = fVeeec421[1];
			fVeeec421State[1] = fVeeec421[2];
			fVeeec424State[0] = fVeeec424[1];
			fVeeec424State[1] = fVeeec424[2];
			fVeeec427State[0] = fVeeec427[1];
			fVeeec427State[1] = fVeeec427[2];
			fVeeec411State = fVeeec411;
			fVeeec432State[0] = fVeeec432[1];
			fVeeec432State[1] = fVeeec432[2];
			fVeeec435State[0] = fVeeec435[1];
			fVeeec435State[1] = fVeeec435[2];
			fVeeec438State[0] = fVeeec438[1];
			fVeeec438State[1] = fVeeec438[2];
			fVeeec441State[0] = fVeeec441[1];
			fVeeec441State[1] = fVeeec441[2];
			fVeeec444State[0] = fVeeec444[1];
			fVeeec444State[1] = fVeeec444[2];
			fVeeec447State[0] = fVeeec447[1];
			fVeeec447State[1] = fVeeec447[2];
			fVeeec431State = fVeeec431;
			fVeeec452State[0] = fVeeec452[1];
			fVeeec452State[1] = fVeeec452[2];
			fVeeec455State[0] = fVeeec455[1];
			fVeeec455State[1] = fVeeec455[2];
			fVeeec458State[0] = fVeeec458[1];
			fVeeec458State[1] = fVeeec458[2];
			fVeeec461State[0] = fVeeec461[1];
			fVeeec461State[1] = fVeeec461[2];
			fVeeec464State[0] = fVeeec464[1];
			fVeeec464State[1] = fVeeec464[2];
			fVeeec467State[0] = fVeeec467[1];
			fVeeec467State[1] = fVeeec467[2];
			fVeeec451State = fVeeec451;
			fVeeec472State[0] = fVeeec472[1];
			fVeeec472State[1] = fVeeec472[2];
			fVeeec475State[0] = fVeeec475[1];
			fVeeec475State[1] = fVeeec475[2];
			fVeeec478State[0] = fVeeec478[1];
			fVeeec478State[1] = fVeeec478[2];
			fVeeec481State[0] = fVeeec481[1];
			fVeeec481State[1] = fVeeec481[2];
			fVeeec484State[0] = fVeeec484[1];
			fVeeec484State[1] = fVeeec484[2];
			fVeeec487State[0] = fVeeec487[1];
			fVeeec487State[1] = fVeeec487[2];
			fVeeec471State = fVeeec471;
			fVeeec492State[0] = fVeeec492[1];
			fVeeec492State[1] = fVeeec492[2];
			fVeeec495State[0] = fVeeec495[1];
			fVeeec495State[1] = fVeeec495[2];
			fVeeec498State[0] = fVeeec498[1];
			fVeeec498State[1] = fVeeec498[2];
			fVeeec501State[0] = fVeeec501[1];
			fVeeec501State[1] = fVeeec501[2];
			fVeeec504State[0] = fVeeec504[1];
			fVeeec504State[1] = fVeeec504[2];
			fVeeec507State[0] = fVeeec507[1];
			fVeeec507State[1] = fVeeec507[2];
			fVeeec491State = fVeeec491;
			fVeeec512State[0] = fVeeec512[1];
			fVeeec512State[1] = fVeeec512[2];
			fVeeec515State[0] = fVeeec515[1];
			fVeeec515State[1] = fVeeec515[2];
			fVeeec518State[0] = fVeeec518[1];
			fVeeec518State[1] = fVeeec518[2];
			fVeeec521State[0] = fVeeec521[1];
			fVeeec521State[1] = fVeeec521[2];
			fVeeec524State[0] = fVeeec524[1];
			fVeeec524State[1] = fVeeec524[2];
			fVeeec527State[0] = fVeeec527[1];
			fVeeec527State[1] = fVeeec527[2];
			fVeeec511State = fVeeec511;
			fVeeec532State[0] = fVeeec532[1];
			fVeeec532State[1] = fVeeec532[2];
			fVeeec535State[0] = fVeeec535[1];
			fVeeec535State[1] = fVeeec535[2];
			fVeeec538State[0] = fVeeec538[1];
			fVeeec538State[1] = fVeeec538[2];
			fVeeec541State[0] = fVeeec541[1];
			fVeeec541State[1] = fVeeec541[2];
			fVeeec544State[0] = fVeeec544[1];
			fVeeec544State[1] = fVeeec544[2];
			fVeeec547State[0] = fVeeec547[1];
			fVeeec547State[1] = fVeeec547[2];
			fVeeec531State = fVeeec531;
			fVeeec552State[0] = fVeeec552[1];
			fVeeec552State[1] = fVeeec552[2];
			fVeeec555State[0] = fVeeec555[1];
			fVeeec555State[1] = fVeeec555[2];
			fVeeec558State[0] = fVeeec558[1];
			fVeeec558State[1] = fVeeec558[2];
			fVeeec561State[0] = fVeeec561[1];
			fVeeec561State[1] = fVeeec561[2];
			fVeeec564State[0] = fVeeec564[1];
			fVeeec564State[1] = fVeeec564[2];
			fVeeec567State[0] = fVeeec567[1];
			fVeeec567State[1] = fVeeec567[2];
			fVeeec551State = fVeeec551;
			fVeeec572State[0] = fVeeec572[1];
			fVeeec572State[1] = fVeeec572[2];
			fVeeec575State[0] = fVeeec575[1];
			fVeeec575State[1] = fVeeec575[2];
			fVeeec578State[0] = fVeeec578[1];
			fVeeec578State[1] = fVeeec578[2];
			fVeeec571State = fVeeec571;
		}
	}
};


