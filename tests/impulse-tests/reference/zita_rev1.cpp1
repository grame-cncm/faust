/* ------------------------------------------------------------
name: "zita_rev1"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fVslider0;
	float fRec0[2];
	int IOTA0;
	float fVec0[8192];
	FAUSTFLOAT fVslider1;
	float fRec1[2];
	int fSampleRate;
	float fConst0;
	float fConst1;
	FAUSTFLOAT fVslider2;
	FAUSTFLOAT fVslider3;
	FAUSTFLOAT fVslider4;
	float fConst2;
	float fConst3;
	FAUSTFLOAT fVslider5;
	FAUSTFLOAT fVslider6;
	float fConst4;
	FAUSTFLOAT fVslider7;
	float fRec15[2];
	float fRec14[2];
	float fVec1[16384];
	float fConst5;
	int iConst6;
	float fVec2[8192];
	float fConst7;
	FAUSTFLOAT fVslider8;
	float fVec3[1024];
	int iConst8;
	float fRec12[2];
	float fConst9;
	float fConst10;
	float fRec19[2];
	float fRec18[2];
	float fVec4[16384];
	float fConst11;
	int iConst12;
	float fVec5[2048];
	int iConst13;
	float fRec16[2];
	float fConst14;
	float fConst15;
	float fRec23[2];
	float fRec22[2];
	float fVec6[8192];
	float fConst16;
	int iConst17;
	float fVec7[2048];
	int iConst18;
	float fRec20[2];
	float fConst19;
	float fConst20;
	float fRec27[2];
	float fRec26[2];
	float fVec8[16384];
	float fConst21;
	int iConst22;
	float fVec9[2048];
	int iConst23;
	float fRec24[2];
	float fConst24;
	float fConst25;
	float fRec31[2];
	float fRec30[2];
	float fVec10[8192];
	float fConst26;
	int iConst27;
	float fVec11[1024];
	int iConst28;
	float fRec28[2];
	float fConst29;
	float fConst30;
	float fRec35[2];
	float fRec34[2];
	float fVec12[8192];
	float fConst31;
	int iConst32;
	float fVec13[2048];
	int iConst33;
	float fRec32[2];
	float fConst34;
	float fConst35;
	float fRec39[2];
	float fRec38[2];
	float fVec14[8192];
	float fConst36;
	int iConst37;
	float fVec15[2048];
	int iConst38;
	float fRec36[2];
	float fConst39;
	float fConst40;
	float fRec43[2];
	float fRec42[2];
	float fVec16[8192];
	float fConst41;
	int iConst42;
	float fVec17[1024];
	int iConst43;
	float fRec40[2];
	float fRec4[3];
	float fRec5[3];
	float fRec6[3];
	float fRec7[3];
	float fRec8[3];
	float fRec9[3];
	float fRec10[3];
	float fRec11[3];
	float fRec3[3];
	FAUSTFLOAT fVslider9;
	FAUSTFLOAT fVslider10;
	float fRec2[3];
	float fRec45[3];
	float fRec44[3];
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/zita_distrib2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_distrib2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_distrib2:license", "STK-4.3");
		m->declare("effect.lib/zita_in_delay:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_in_delay:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_in_delay:license", "STK-4.3");
		m->declare("effect.lib/zita_rev1_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_rev1_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_rev1_stereo:license", "STK-4.3");
		m->declare("effect.lib/zita_rev_fdn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_rev_fdn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_rev_fdn:license", "STK-4.3");
		m->declare("filename", "zita_rev1.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "zita_rev1");
	}

	virtual int getNumInputs() {
		return 2;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 6.2831855f / fConst0;
		fConst2 = std::floor(0.219991f * fConst0 + 0.5f);
		fConst3 = 6.9077554f * (fConst2 / fConst0);
		fConst4 = 3.1415927f / fConst0;
		fConst5 = std::floor(0.019123f * fConst0 + 0.5f);
		iConst6 = int(fConst2 - fConst5) & 16383;
		fConst7 = 0.001f * fConst0;
		iConst8 = int(fConst5 + -1.0f) & 1023;
		fConst9 = std::floor(0.256891f * fConst0 + 0.5f);
		fConst10 = 6.9077554f * (fConst9 / fConst0);
		fConst11 = std::floor(0.027333f * fConst0 + 0.5f);
		iConst12 = int(fConst9 - fConst11) & 16383;
		iConst13 = int(fConst11 + -1.0f) & 2047;
		fConst14 = std::floor(0.192303f * fConst0 + 0.5f);
		fConst15 = 6.9077554f * (fConst14 / fConst0);
		fConst16 = std::floor(0.029291f * fConst0 + 0.5f);
		iConst17 = int(fConst14 - fConst16) & 8191;
		iConst18 = int(fConst16 + -1.0f) & 2047;
		fConst19 = std::floor(0.210389f * fConst0 + 0.5f);
		fConst20 = 6.9077554f * (fConst19 / fConst0);
		fConst21 = std::floor(0.024421f * fConst0 + 0.5f);
		iConst22 = int(fConst19 - fConst21) & 16383;
		iConst23 = int(fConst21 + -1.0f) & 2047;
		fConst24 = std::floor(0.125f * fConst0 + 0.5f);
		fConst25 = 6.9077554f * (fConst24 / fConst0);
		fConst26 = std::floor(0.013458f * fConst0 + 0.5f);
		iConst27 = int(fConst24 - fConst26) & 8191;
		iConst28 = int(fConst26 + -1.0f) & 1023;
		fConst29 = std::floor(0.127837f * fConst0 + 0.5f);
		fConst30 = 6.9077554f * (fConst29 / fConst0);
		fConst31 = std::floor(0.031604f * fConst0 + 0.5f);
		iConst32 = int(fConst29 - fConst31) & 8191;
		iConst33 = int(fConst31 + -1.0f) & 2047;
		fConst34 = std::floor(0.174713f * fConst0 + 0.5f);
		fConst35 = 6.9077554f * (fConst34 / fConst0);
		fConst36 = std::floor(0.022904f * fConst0 + 0.5f);
		iConst37 = int(fConst34 - fConst36) & 8191;
		iConst38 = int(fConst36 + -1.0f) & 2047;
		fConst39 = std::floor(0.153129f * fConst0 + 0.5f);
		fConst40 = 6.9077554f * (fConst39 / fConst0);
		fConst41 = std::floor(0.020346f * fConst0 + 0.5f);
		iConst42 = int(fConst39 - fConst41) & 8191;
		iConst43 = int(fConst41 + -1.0f) & 1023;
	}
	
	virtual void instanceResetUserInterface() {
		fVslider0 = FAUSTFLOAT(16.79f);
		fVslider1 = FAUSTFLOAT(0.4492f);
		fVslider2 = FAUSTFLOAT(315.0f);
		fVslider3 = FAUSTFLOAT(0.0f);
		fVslider4 = FAUSTFLOAT(6e+03f);
		fVslider5 = FAUSTFLOAT(2.0f);
		fVslider6 = FAUSTFLOAT(3.0f);
		fVslider7 = FAUSTFLOAT(2e+02f);
		fVslider8 = FAUSTFLOAT(6e+01f);
		fVslider9 = FAUSTFLOAT(1.5e+03f);
		fVslider10 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			fRec0[l0] = 0.0f;
		}
		IOTA0 = 0;
		for (int l1 = 0; l1 < 8192; l1 = l1 + 1) {
			fVec0[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec1[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec15[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec14[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 16384; l5 = l5 + 1) {
			fVec1[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 8192; l6 = l6 + 1) {
			fVec2[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 1024; l7 = l7 + 1) {
			fVec3[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fRec12[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fRec19[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fRec18[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 16384; l11 = l11 + 1) {
			fVec4[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2048; l12 = l12 + 1) {
			fVec5[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fRec16[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fRec23[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fRec22[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 8192; l16 = l16 + 1) {
			fVec6[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2048; l17 = l17 + 1) {
			fVec7[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fRec20[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fRec27[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fRec26[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 16384; l21 = l21 + 1) {
			fVec8[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2048; l22 = l22 + 1) {
			fVec9[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fRec24[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			fRec31[l24] = 0.0f;
		}
		for (int l25 = 0; l25 < 2; l25 = l25 + 1) {
			fRec30[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 8192; l26 = l26 + 1) {
			fVec10[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 1024; l27 = l27 + 1) {
			fVec11[l27] = 0.0f;
		}
		for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
			fRec28[l28] = 0.0f;
		}
		for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
			fRec35[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			fRec34[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 8192; l31 = l31 + 1) {
			fVec12[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 2048; l32 = l32 + 1) {
			fVec13[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			fRec32[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			fRec39[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec38[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 8192; l36 = l36 + 1) {
			fVec14[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 2048; l37 = l37 + 1) {
			fVec15[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			fRec36[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fRec43[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
			fRec42[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 8192; l41 = l41 + 1) {
			fVec16[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 1024; l42 = l42 + 1) {
			fVec17[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
			fRec40[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
			fRec4[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 3; l45 = l45 + 1) {
			fRec5[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 3; l46 = l46 + 1) {
			fRec6[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 3; l47 = l47 + 1) {
			fRec7[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 3; l48 = l48 + 1) {
			fRec8[l48] = 0.0f;
		}
		for (int l49 = 0; l49 < 3; l49 = l49 + 1) {
			fRec9[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 3; l50 = l50 + 1) {
			fRec10[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 3; l51 = l51 + 1) {
			fRec11[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 3; l52 = l52 + 1) {
			fRec3[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 3; l53 = l53 + 1) {
			fRec2[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 3; l54 = l54 + 1) {
			fRec45[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 3; l55 = l55 + 1) {
			fRec44[l55] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "~ ZITA REV1 FEEDBACK DELAY NETWORK (FDN) & SCHROEDER ALLPASS-COMB REVERBERATOR (8x8). See Faust's effect.lib for documentation and references");
		ui_interface->openHorizontalBox("Zita_Rev1");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("Input");
		ui_interface->declare(&fVslider8, "1", "");
		ui_interface->declare(&fVslider8, "style", "knob");
		ui_interface->declare(&fVslider8, "tooltip", "Delay in ms before reverberation begins");
		ui_interface->declare(&fVslider8, "unit", "ms");
		ui_interface->addVerticalSlider("In Delay", &fVslider8, FAUSTFLOAT(6e+01f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("Decay Times in Bands (see tooltips)");
		ui_interface->declare(&fVslider7, "1", "");
		ui_interface->declare(&fVslider7, "scale", "log");
		ui_interface->declare(&fVslider7, "style", "knob");
		ui_interface->declare(&fVslider7, "tooltip", "Crossover frequency (Hz) separating low and middle frequencies");
		ui_interface->declare(&fVslider7, "unit", "Hz");
		ui_interface->addVerticalSlider("LF X", &fVslider7, FAUSTFLOAT(2e+02f), FAUSTFLOAT(5e+01f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fVslider6, "2", "");
		ui_interface->declare(&fVslider6, "scale", "log");
		ui_interface->declare(&fVslider6, "style", "knob");
		ui_interface->declare(&fVslider6, "tooltip", "T60 = time (in seconds) to decay 60dB in low-frequency band");
		ui_interface->declare(&fVslider6, "unit", "s");
		ui_interface->addVerticalSlider("Low RT60", &fVslider6, FAUSTFLOAT(3.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(8.0f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fVslider5, "3", "");
		ui_interface->declare(&fVslider5, "scale", "log");
		ui_interface->declare(&fVslider5, "style", "knob");
		ui_interface->declare(&fVslider5, "tooltip", "T60 = time (in seconds) to decay 60dB in middle band");
		ui_interface->declare(&fVslider5, "unit", "s");
		ui_interface->addVerticalSlider("Mid RT60", &fVslider5, FAUSTFLOAT(2.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(8.0f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fVslider4, "4", "");
		ui_interface->declare(&fVslider4, "scale", "log");
		ui_interface->declare(&fVslider4, "style", "knob");
		ui_interface->declare(&fVslider4, "tooltip", "Frequency (Hz) at which the high-frequency T60 is half the middle-band's T60");
		ui_interface->declare(&fVslider4, "unit", "Hz");
		ui_interface->addVerticalSlider("HF Damping", &fVslider4, FAUSTFLOAT(6e+03f), FAUSTFLOAT(1.5e+03f), FAUSTFLOAT(2.352e+04f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("RM Peaking Equalizer 1");
		ui_interface->declare(&fVslider2, "1", "");
		ui_interface->declare(&fVslider2, "scale", "log");
		ui_interface->declare(&fVslider2, "style", "knob");
		ui_interface->declare(&fVslider2, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface->declare(&fVslider2, "unit", "Hz");
		ui_interface->addVerticalSlider("Eq1 Freq", &fVslider2, FAUSTFLOAT(315.0f), FAUSTFLOAT(4e+01f), FAUSTFLOAT(2.5e+03f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fVslider3, "2", "");
		ui_interface->declare(&fVslider3, "style", "knob");
		ui_interface->declare(&fVslider3, "tooltip", "Peak level in dB of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface->declare(&fVslider3, "unit", "dB");
		ui_interface->addVerticalSlider("Eq1 Level", &fVslider3, FAUSTFLOAT(0.0f), FAUSTFLOAT(-15.0f), FAUSTFLOAT(15.0f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openHorizontalBox("RM Peaking Equalizer 2");
		ui_interface->declare(&fVslider9, "1", "");
		ui_interface->declare(&fVslider9, "scale", "log");
		ui_interface->declare(&fVslider9, "style", "knob");
		ui_interface->declare(&fVslider9, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface->declare(&fVslider9, "unit", "Hz");
		ui_interface->addVerticalSlider("Eq2 Freq", &fVslider9, FAUSTFLOAT(1.5e+03f), FAUSTFLOAT(1.6e+02f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fVslider10, "2", "");
		ui_interface->declare(&fVslider10, "style", "knob");
		ui_interface->declare(&fVslider10, "tooltip", "Peak level in dB of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface->declare(&fVslider10, "unit", "dB");
		ui_interface->addVerticalSlider("Eq2 Level", &fVslider10, FAUSTFLOAT(0.0f), FAUSTFLOAT(-15.0f), FAUSTFLOAT(15.0f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->declare(0, "5", "");
		ui_interface->openHorizontalBox("Output");
		ui_interface->declare(&fVslider1, "1", "");
		ui_interface->declare(&fVslider1, "style", "knob");
		ui_interface->declare(&fVslider1, "tooltip", "-1 = dry, 1 = wet");
		ui_interface->addVerticalSlider("Dry/Wet Mix", &fVslider1, FAUSTFLOAT(0.4492f), FAUSTFLOAT(-1.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider0, "2", "");
		ui_interface->declare(&fVslider0, "style", "knob");
		ui_interface->declare(&fVslider0, "tooltip", "Output scale factor");
		ui_interface->declare(&fVslider0, "unit", "dB");
		ui_interface->addVerticalSlider("Level", &fVslider0, FAUSTFLOAT(16.79f), FAUSTFLOAT(-7e+01f), FAUSTFLOAT(4e+01f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* input1 = inputs[1];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = 0.001f * std::pow(1e+01f, 0.05f * float(fVslider0));
		float fSlow1 = 0.001f * float(fVslider1);
		float fSlow2 = float(fVslider2);
		float fSlow3 = std::pow(1e+01f, 0.05f * float(fVslider3));
		float fSlow4 = fConst1 * (fSlow2 / std::sqrt(std::max<float>(0.0f, fSlow3)));
		float fSlow5 = (1.0f - fSlow4) / (fSlow4 + 1.0f);
		float fSlow6 = std::cos(fConst1 * float(fVslider4));
		float fSlow7 = float(fVslider5);
		float fSlow8 = std::exp(-(fConst3 / fSlow7));
		float fSlow9 = mydsp_faustpower2_f(fSlow8);
		float fSlow10 = 1.0f - fSlow6 * fSlow9;
		float fSlow11 = 1.0f - fSlow9;
		float fSlow12 = fSlow10 / fSlow11;
		float fSlow13 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow10) / mydsp_faustpower2_f(fSlow11) + -1.0f));
		float fSlow14 = fSlow12 - fSlow13;
		float fSlow15 = fSlow8 * (fSlow13 + (1.0f - fSlow12));
		float fSlow16 = float(fVslider6);
		float fSlow17 = std::exp(-(fConst3 / fSlow16)) / fSlow8 + -1.0f;
		float fSlow18 = 1.0f / std::tan(fConst4 * float(fVslider7));
		float fSlow19 = 1.0f / (fSlow18 + 1.0f);
		float fSlow20 = 1.0f - fSlow18;
		int iSlow21 = int(fConst7 * float(fVslider8)) & 8191;
		float fSlow22 = std::exp(-(fConst10 / fSlow7));
		float fSlow23 = mydsp_faustpower2_f(fSlow22);
		float fSlow24 = 1.0f - fSlow6 * fSlow23;
		float fSlow25 = 1.0f - fSlow23;
		float fSlow26 = fSlow24 / fSlow25;
		float fSlow27 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow24) / mydsp_faustpower2_f(fSlow25) + -1.0f));
		float fSlow28 = fSlow26 - fSlow27;
		float fSlow29 = fSlow22 * (fSlow27 + (1.0f - fSlow26));
		float fSlow30 = std::exp(-(fConst10 / fSlow16)) / fSlow22 + -1.0f;
		float fSlow31 = std::exp(-(fConst15 / fSlow7));
		float fSlow32 = mydsp_faustpower2_f(fSlow31);
		float fSlow33 = 1.0f - fSlow6 * fSlow32;
		float fSlow34 = 1.0f - fSlow32;
		float fSlow35 = fSlow33 / fSlow34;
		float fSlow36 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow33) / mydsp_faustpower2_f(fSlow34) + -1.0f));
		float fSlow37 = fSlow35 - fSlow36;
		float fSlow38 = fSlow31 * (fSlow36 + (1.0f - fSlow35));
		float fSlow39 = std::exp(-(fConst15 / fSlow16)) / fSlow31 + -1.0f;
		float fSlow40 = std::exp(-(fConst20 / fSlow7));
		float fSlow41 = mydsp_faustpower2_f(fSlow40);
		float fSlow42 = 1.0f - fSlow6 * fSlow41;
		float fSlow43 = 1.0f - fSlow41;
		float fSlow44 = fSlow42 / fSlow43;
		float fSlow45 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow42) / mydsp_faustpower2_f(fSlow43) + -1.0f));
		float fSlow46 = fSlow44 - fSlow45;
		float fSlow47 = fSlow40 * (fSlow45 + (1.0f - fSlow44));
		float fSlow48 = std::exp(-(fConst20 / fSlow16)) / fSlow40 + -1.0f;
		float fSlow49 = std::exp(-(fConst25 / fSlow7));
		float fSlow50 = mydsp_faustpower2_f(fSlow49);
		float fSlow51 = 1.0f - fSlow6 * fSlow50;
		float fSlow52 = 1.0f - fSlow50;
		float fSlow53 = fSlow51 / fSlow52;
		float fSlow54 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow51) / mydsp_faustpower2_f(fSlow52) + -1.0f));
		float fSlow55 = fSlow53 - fSlow54;
		float fSlow56 = fSlow49 * (fSlow54 + (1.0f - fSlow53));
		float fSlow57 = std::exp(-(fConst25 / fSlow16)) / fSlow49 + -1.0f;
		float fSlow58 = std::exp(-(fConst30 / fSlow7));
		float fSlow59 = mydsp_faustpower2_f(fSlow58);
		float fSlow60 = 1.0f - fSlow6 * fSlow59;
		float fSlow61 = 1.0f - fSlow59;
		float fSlow62 = fSlow60 / fSlow61;
		float fSlow63 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow60) / mydsp_faustpower2_f(fSlow61) + -1.0f));
		float fSlow64 = fSlow62 - fSlow63;
		float fSlow65 = fSlow58 * (fSlow63 + (1.0f - fSlow62));
		float fSlow66 = std::exp(-(fConst30 / fSlow16)) / fSlow58 + -1.0f;
		float fSlow67 = std::exp(-(fConst35 / fSlow7));
		float fSlow68 = mydsp_faustpower2_f(fSlow67);
		float fSlow69 = 1.0f - fSlow6 * fSlow68;
		float fSlow70 = 1.0f - fSlow68;
		float fSlow71 = fSlow69 / fSlow70;
		float fSlow72 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow69) / mydsp_faustpower2_f(fSlow70) + -1.0f));
		float fSlow73 = fSlow71 - fSlow72;
		float fSlow74 = fSlow67 * (fSlow72 + (1.0f - fSlow71));
		float fSlow75 = std::exp(-(fConst35 / fSlow16)) / fSlow67 + -1.0f;
		float fSlow76 = std::exp(-(fConst40 / fSlow7));
		float fSlow77 = mydsp_faustpower2_f(fSlow76);
		float fSlow78 = 1.0f - fSlow77 * fSlow6;
		float fSlow79 = 1.0f - fSlow77;
		float fSlow80 = fSlow78 / fSlow79;
		float fSlow81 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow78) / mydsp_faustpower2_f(fSlow79) + -1.0f));
		float fSlow82 = fSlow80 - fSlow81;
		float fSlow83 = fSlow76 * (fSlow81 + (1.0f - fSlow80));
		float fSlow84 = std::exp(-(fConst40 / fSlow16)) / fSlow76 + -1.0f;
		float fSlow85 = std::cos(fConst1 * fSlow2) * (fSlow5 + 1.0f);
		float fSlow86 = float(fVslider9);
		float fSlow87 = std::pow(1e+01f, 0.05f * float(fVslider10));
		float fSlow88 = fConst1 * (fSlow86 / std::sqrt(std::max<float>(0.0f, fSlow87)));
		float fSlow89 = (1.0f - fSlow88) / (fSlow88 + 1.0f);
		float fSlow90 = std::cos(fConst1 * fSlow86) * (fSlow89 + 1.0f);
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			fRec0[0] = fSlow0 + 0.999f * fRec0[1];
			float fTemp0 = float(input0[i0]);
			fVec0[IOTA0 & 8191] = fTemp0;
			fRec1[0] = fSlow1 + 0.999f * fRec1[1];
			float fTemp1 = fRec1[0] + 1.0f;
			float fTemp2 = 1.0f - 0.5f * fTemp1;
			fRec15[0] = -(fSlow19 * (fSlow20 * fRec15[1] - (fRec11[1] + fRec11[2])));
			fRec14[0] = fSlow14 * fRec14[1] + fSlow15 * (fRec11[1] + fSlow17 * fRec15[0]);
			fVec1[IOTA0 & 16383] = 0.35355338f * fRec14[0] + 1e-20f;
			float fTemp3 = 0.6f * fRec12[1] + fVec1[(IOTA0 - iConst6) & 16383];
			float fTemp4 = float(input1[i0]);
			fVec2[IOTA0 & 8191] = fTemp4;
			float fTemp5 = 0.3f * fVec2[(IOTA0 - iSlow21) & 8191];
			fVec3[IOTA0 & 1023] = fTemp3 - fTemp5;
			fRec12[0] = fVec3[(IOTA0 - iConst8) & 1023];
			float fRec13 = 0.6f * (fTemp5 - fTemp3);
			fRec19[0] = -(fSlow19 * (fSlow20 * fRec19[1] - (fRec7[1] + fRec7[2])));
			fRec18[0] = fSlow28 * fRec18[1] + fSlow29 * (fRec7[1] + fSlow30 * fRec19[0]);
			fVec4[IOTA0 & 16383] = 0.35355338f * fRec18[0] + 1e-20f;
			float fTemp6 = 0.6f * fRec16[1] + fVec4[(IOTA0 - iConst12) & 16383];
			fVec5[IOTA0 & 2047] = fTemp6 - fTemp5;
			fRec16[0] = fVec5[(IOTA0 - iConst13) & 2047];
			float fRec17 = 0.6f * (fTemp5 - fTemp6);
			fRec23[0] = -(fSlow19 * (fSlow20 * fRec23[1] - (fRec9[1] + fRec9[2])));
			fRec22[0] = fSlow37 * fRec22[1] + fSlow38 * (fRec9[1] + fSlow39 * fRec23[0]);
			fVec6[IOTA0 & 8191] = 0.35355338f * fRec22[0] + 1e-20f;
			float fTemp7 = fVec6[(IOTA0 - iConst17) & 8191] + fTemp5 + 0.6f * fRec20[1];
			fVec7[IOTA0 & 2047] = fTemp7;
			fRec20[0] = fVec7[(IOTA0 - iConst18) & 2047];
			float fRec21 = -(0.6f * fTemp7);
			fRec27[0] = -(fSlow19 * (fSlow20 * fRec27[1] - (fRec5[1] + fRec5[2])));
			fRec26[0] = fSlow46 * fRec26[1] + fSlow47 * (fRec5[1] + fSlow48 * fRec27[0]);
			fVec8[IOTA0 & 16383] = 0.35355338f * fRec26[0] + 1e-20f;
			float fTemp8 = fTemp5 + 0.6f * fRec24[1] + fVec8[(IOTA0 - iConst22) & 16383];
			fVec9[IOTA0 & 2047] = fTemp8;
			fRec24[0] = fVec9[(IOTA0 - iConst23) & 2047];
			float fRec25 = -(0.6f * fTemp8);
			fRec31[0] = -(fSlow19 * (fSlow20 * fRec31[1] - (fRec10[1] + fRec10[2])));
			fRec30[0] = fSlow55 * fRec30[1] + fSlow56 * (fRec10[1] + fSlow57 * fRec31[0]);
			fVec10[IOTA0 & 8191] = 0.35355338f * fRec30[0] + 1e-20f;
			float fTemp9 = 0.3f * fVec0[(IOTA0 - iSlow21) & 8191];
			float fTemp10 = fVec10[(IOTA0 - iConst27) & 8191] - (fTemp9 + 0.6f * fRec28[1]);
			fVec11[IOTA0 & 1023] = fTemp10;
			fRec28[0] = fVec11[(IOTA0 - iConst28) & 1023];
			float fRec29 = 0.6f * fTemp10;
			fRec35[0] = -(fSlow19 * (fSlow20 * fRec35[1] - (fRec6[1] + fRec6[2])));
			fRec34[0] = fSlow64 * fRec34[1] + fSlow65 * (fRec6[1] + fSlow66 * fRec35[0]);
			fVec12[IOTA0 & 8191] = 0.35355338f * fRec34[0] + 1e-20f;
			float fTemp11 = fVec12[(IOTA0 - iConst32) & 8191] - (fTemp9 + 0.6f * fRec32[1]);
			fVec13[IOTA0 & 2047] = fTemp11;
			fRec32[0] = fVec13[(IOTA0 - iConst33) & 2047];
			float fRec33 = 0.6f * fTemp11;
			fRec39[0] = -(fSlow19 * (fSlow20 * fRec39[1] - (fRec8[1] + fRec8[2])));
			fRec38[0] = fSlow73 * fRec38[1] + fSlow74 * (fRec8[1] + fSlow75 * fRec39[0]);
			fVec14[IOTA0 & 8191] = 0.35355338f * fRec38[0] + 1e-20f;
			float fTemp12 = fTemp9 + fVec14[(IOTA0 - iConst37) & 8191] - 0.6f * fRec36[1];
			fVec15[IOTA0 & 2047] = fTemp12;
			fRec36[0] = fVec15[(IOTA0 - iConst38) & 2047];
			float fRec37 = 0.6f * fTemp12;
			fRec43[0] = -(fSlow19 * (fSlow20 * fRec43[1] - (fRec4[1] + fRec4[2])));
			fRec42[0] = fSlow82 * fRec42[1] + fSlow83 * (fRec4[1] + fSlow84 * fRec43[0]);
			fVec16[IOTA0 & 8191] = 0.35355338f * fRec42[0] + 1e-20f;
			float fTemp13 = fVec16[(IOTA0 - iConst42) & 8191] + fTemp9 - 0.6f * fRec40[1];
			fVec17[IOTA0 & 1023] = fTemp13;
			fRec40[0] = fVec17[(IOTA0 - iConst43) & 1023];
			float fRec41 = 0.6f * fTemp13;
			float fTemp14 = fRec41 + fRec37;
			float fTemp15 = fRec29 + fRec33 + fTemp14;
			fRec4[0] = fRec12[1] + fRec16[1] + fRec20[1] + fRec24[1] + fRec28[1] + fRec32[1] + fRec36[1] + fRec40[1] + fRec13 + fRec17 + fRec21 + fRec25 + fTemp15;
			fRec5[0] = fRec28[1] + fRec32[1] + fRec36[1] + fRec40[1] + fTemp15 - (fRec12[1] + fRec16[1] + fRec20[1] + fRec24[1] + fRec13 + fRec17 + fRec25 + fRec21);
			float fTemp16 = fRec33 + fRec29;
			fRec6[0] = fRec20[1] + fRec24[1] + fRec36[1] + fRec40[1] + fRec21 + fRec25 + fTemp14 - (fRec12[1] + fRec16[1] + fRec28[1] + fRec32[1] + fRec13 + fRec17 + fTemp16);
			fRec7[0] = fRec12[1] + fRec16[1] + fRec36[1] + fRec40[1] + fRec13 + fRec17 + fTemp14 - (fRec20[1] + fRec24[1] + fRec28[1] + fRec32[1] + fRec21 + fRec25 + fTemp16);
			float fTemp17 = fRec41 + fRec33;
			float fTemp18 = fRec37 + fRec29;
			fRec8[0] = fRec16[1] + fRec24[1] + fRec32[1] + fRec40[1] + fRec17 + fRec25 + fTemp17 - (fRec12[1] + fRec20[1] + fRec28[1] + fRec36[1] + fRec13 + fRec21 + fTemp18);
			fRec9[0] = fRec12[1] + fRec20[1] + fRec32[1] + fRec40[1] + fRec13 + fRec21 + fTemp17 - (fRec16[1] + fRec24[1] + fRec28[1] + fRec36[1] + fRec17 + fRec25 + fTemp18);
			float fTemp19 = fRec41 + fRec29;
			float fTemp20 = fRec37 + fRec33;
			fRec10[0] = fRec12[1] + fRec24[1] + fRec28[1] + fRec40[1] + fRec13 + fRec25 + fTemp19 - (fRec16[1] + fRec20[1] + fRec32[1] + fRec36[1] + fRec17 + fRec21 + fTemp20);
			fRec11[0] = fRec16[1] + fRec20[1] + fRec28[1] + fRec40[1] + fRec17 + fRec21 + fTemp19 - (fRec12[1] + fRec24[1] + fRec32[1] + fRec36[1] + fRec13 + fRec25 + fTemp20);
			float fTemp21 = 0.37f * (fRec5[0] + fRec6[0]);
			float fTemp22 = fSlow85 * fRec3[1];
			float fTemp23 = fTemp21 + fTemp22;
			fRec3[0] = fTemp23 - fSlow5 * fRec3[2];
			float fTemp24 = fSlow5 * fRec3[0];
			float fTemp25 = fTemp24 + fTemp21 + fRec3[2];
			float fTemp26 = fSlow3 * (fRec3[2] + fTemp24 - fTemp23);
			float fTemp27 = fSlow90 * fRec2[1];
			fRec2[0] = 0.5f * (fTemp25 - fTemp22 + fTemp26) + fTemp27 - fSlow89 * fRec2[2];
			float fTemp28 = fRec2[2] + fSlow89 * fRec2[0];
			float fTemp29 = 0.5f * (fTemp25 + fTemp26 - fTemp22);
			output0[i0] = FAUSTFLOAT(fRec0[0] * (fTemp0 * fTemp2 + 0.25f * fTemp1 * (fTemp28 + fTemp29 + fSlow87 * (fTemp28 - (fTemp27 + fTemp29)) - fTemp27)));
			float fTemp30 = 0.37f * (fRec5[0] - fRec6[0]);
			float fTemp31 = fSlow85 * fRec45[1];
			float fTemp32 = fTemp30 + fTemp31;
			fRec45[0] = fTemp32 - fSlow5 * fRec45[2];
			float fTemp33 = fSlow5 * fRec45[0];
			float fTemp34 = fTemp33 + fTemp30 + fRec45[2];
			float fTemp35 = fSlow3 * (fRec45[2] + fTemp33 - fTemp32);
			float fTemp36 = fSlow90 * fRec44[1];
			fRec44[0] = 0.5f * (fTemp34 - fTemp31 + fTemp35) + fTemp36 - fSlow89 * fRec44[2];
			float fTemp37 = fRec44[2] + fSlow89 * fRec44[0];
			float fTemp38 = 0.5f * (fTemp34 + fTemp35 - fTemp31);
			output1[i0] = FAUSTFLOAT(fRec0[0] * (fTemp4 * fTemp2 + 0.25f * fTemp1 * (fTemp37 + fTemp38 + fSlow87 * (fTemp37 - (fTemp36 + fTemp38)) - fTemp36)));
			fRec0[1] = fRec0[0];
			IOTA0 = IOTA0 + 1;
			fRec1[1] = fRec1[0];
			fRec15[1] = fRec15[0];
			fRec14[1] = fRec14[0];
			fRec12[1] = fRec12[0];
			fRec19[1] = fRec19[0];
			fRec18[1] = fRec18[0];
			fRec16[1] = fRec16[0];
			fRec23[1] = fRec23[0];
			fRec22[1] = fRec22[0];
			fRec20[1] = fRec20[0];
			fRec27[1] = fRec27[0];
			fRec26[1] = fRec26[0];
			fRec24[1] = fRec24[0];
			fRec31[1] = fRec31[0];
			fRec30[1] = fRec30[0];
			fRec28[1] = fRec28[0];
			fRec35[1] = fRec35[0];
			fRec34[1] = fRec34[0];
			fRec32[1] = fRec32[0];
			fRec39[1] = fRec39[0];
			fRec38[1] = fRec38[0];
			fRec36[1] = fRec36[0];
			fRec43[1] = fRec43[0];
			fRec42[1] = fRec42[0];
			fRec40[1] = fRec40[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1];
			fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1];
			fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1];
			fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1];
			fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1];
			fRec9[1] = fRec9[0];
			fRec10[2] = fRec10[1];
			fRec10[1] = fRec10[0];
			fRec11[2] = fRec11[1];
			fRec11[1] = fRec11[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec45[2] = fRec45[1];
			fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1];
			fRec44[1] = fRec44[0];
		}
	}

};

#endif
