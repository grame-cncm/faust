//----------------------------------------------------------
// name: "zita_rev1"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	IOTA0;
	float 	fVec4SE[8192]; // Ring Delay
	FAUSTFLOAT 	fslider0;
	float 	fConst0KI; // step: 22
	float 	fConst1KI; // step: 23
	FAUSTFLOAT 	fslider1;
	float 	fConst2KI; // step: 41
	FAUSTFLOAT 	fslider2;
	float 	fConst3KI; // step: 53
	float 	fConst4KI; // step: 55
	FAUSTFLOAT 	fslider3;
	float 	fConst5KI; // step: 89
	// Recursion delay fVec9SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec9SEState; // Single Delay
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec7SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec7SEState; // Single Delay
	float 	fVec13SE[16384]; // Ring Delay
	float 	fConst6KI; // step: 129
	int 	iConst7KI; // step: 133
	// Recursion delay fRec2SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst8KI; // step: 143
	float 	fConst9KI; // step: 145
	// Recursion delay fVec18SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec18SEState; // Single Delay
	// Recursion delay fVec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec16SEState; // Single Delay
	float 	fVec22SE[8192]; // Ring Delay
	float 	fConst10KI; // step: 200
	int 	iConst11KI; // step: 204
	// Recursion delay fRec5SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst12KI; // step: 216
	float 	fConst13KI; // step: 218
	// Recursion delay fVec28SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SEState; // Single Delay
	// Recursion delay fVec26SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec26SEState; // Single Delay
	float 	fVec32SE[8192]; // Ring Delay
	float 	fConst14KI; // step: 275
	int 	iConst15KI; // step: 279
	float 	fVec34SE[8192]; // Ring Delay
	// Recursion delay fRec8SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst16KI; // step: 297
	float 	fConst17KI; // step: 299
	// Recursion delay fVec40SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec40SEState; // Single Delay
	// Recursion delay fVec38SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec38SEState; // Single Delay
	float 	fVec44SE[8192]; // Ring Delay
	float 	fConst18KI; // step: 356
	int 	iConst19KI; // step: 360
	// Recursion delay fRec11SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst20KI; // step: 379
	float 	fConst21KI; // step: 381
	// Recursion delay fVec53SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec53SEState; // Single Delay
	// Recursion delay fVec51SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec51SEState; // Single Delay
	float 	fVec57SE[16384]; // Ring Delay
	float 	fConst22KI; // step: 436
	int 	iConst23KI; // step: 440
	// Recursion delay fRec14SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst24KI; // step: 454
	float 	fConst25KI; // step: 456
	// Recursion delay fVec63SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec63SEState; // Single Delay
	// Recursion delay fVec61SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec61SEState; // Single Delay
	float 	fVec67SE[16384]; // Ring Delay
	float 	fConst26KI; // step: 511
	int 	iConst27KI; // step: 515
	// Recursion delay fRec17SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst28KI; // step: 527
	float 	fConst29KI; // step: 529
	// Recursion delay fVec73SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec73SEState; // Single Delay
	// Recursion delay fVec71SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec71SEState; // Single Delay
	float 	fVec77SE[8192]; // Ring Delay
	float 	fConst30KI; // step: 586
	int 	iConst31KI; // step: 590
	// Recursion delay fRec20SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst32KI; // step: 605
	float 	fConst33KI; // step: 607
	// Recursion delay fVec84SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec84SEState; // Single Delay
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	float 	fVec88SE[8192]; // Ring Delay
	float 	fConst34KI; // step: 664
	int 	iConst35KI; // step: 668
	// Recursion delay fRec23SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	// Recursion delay fVec52SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec52SEState; // Single Delay
	float 	fVec54SEState[2]; // Copy Delay
	float 	fVec93SE[1024]; // Ring Delay
	int 	iConst36KI; // step: 688
	// Recursion delay fVec50SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec50SEState; // Single Delay
	float 	fVec48SEState; // Single Delay
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	float 	fVec10SEState[2]; // Copy Delay
	float 	fVec97SE[2048]; // Ring Delay
	int 	iConst37KI; // step: 705
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	float 	fVec0SEState; // Single Delay
	// Recursion delay fVec17SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SEState; // Single Delay
	float 	fVec19SEState[2]; // Copy Delay
	float 	fVec101SE[2048]; // Ring Delay
	int 	iConst38KI; // step: 717
	// Recursion delay fVec24SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec24SEState; // Single Delay
	float 	fVec1SEState; // Single Delay
	// Recursion delay fVec62SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec62SEState; // Single Delay
	float 	fVec64SEState[2]; // Copy Delay
	float 	fVec105SE[2048]; // Ring Delay
	int 	iConst39KI; // step: 727
	// Recursion delay fVec60SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec60SEState; // Single Delay
	float 	fVec49SEState; // Single Delay
	// Recursion delay fVec27SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec27SEState; // Single Delay
	float 	fVec29SEState[2]; // Copy Delay
	float 	fVec109SE[1024]; // Ring Delay
	int 	iConst40KI; // step: 737
	// Recursion delay fVec36SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec36SEState; // Single Delay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec72SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec72SEState; // Single Delay
	float 	fVec74SEState[2]; // Copy Delay
	float 	fVec113SE[2048]; // Ring Delay
	int 	iConst41KI; // step: 747
	// Recursion delay fVec79SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec79SEState; // Single Delay
	float 	fVec70SEState; // Single Delay
	// Recursion delay fVec83SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec83SEState; // Single Delay
	float 	fVec85SEState[2]; // Copy Delay
	float 	fVec117SE[2048]; // Ring Delay
	int 	iConst42KI; // step: 757
	// Recursion delay fVec90SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec90SEState; // Single Delay
	float 	fVec81SEState; // Single Delay
	// Recursion delay fVec39SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec39SEState; // Single Delay
	float 	fVec41SEState[2]; // Copy Delay
	float 	fVec121SE[1024]; // Ring Delay
	int 	iConst43KI; // step: 767
	// Recursion delay fVec46SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec46SEState; // Single Delay
	float 	fVec3SEState; // Single Delay
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	// Recursion delay fVec126SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec126SEState; // Single Delay
	float 	fVec127SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	// Recursion delay fVec131SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec131SEState; // Single Delay
	float 	fVec132SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider9;
	// Recursion delay fVec134SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec134SEState; // Single Delay
	FAUSTFLOAT 	fslider10;
	// Recursion delay fVec136SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec136SEState; // Single Delay
	// Recursion delay fVec140SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec140SEState; // Single Delay
	float 	fVec141SEState[2]; // Copy Delay
	// Recursion delay fVec145SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec145SEState; // Single Delay
	float 	fVec146SEState[2]; // Copy Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/zita_distrib2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_distrib2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_distrib2:license", "STK-4.3");
		m->declare("effect.lib/zita_in_delay:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_in_delay:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_in_delay:license", "STK-4.3");
		m->declare("effect.lib/zita_rev1_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_rev1_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_rev1_stereo:license", "STK-4.3");
		m->declare("effect.lib/zita_rev_fdn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/zita_rev_fdn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/zita_rev_fdn:license", "STK-4.3");
		m->declare("filename", "zita_rev1.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "zita_rev1");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 22
		fConst1KI = (0.001f * fConst0KI); // step: 23
		fConst2KI = (6.2831855f / fConst0KI); // step: 41
		fConst3KI = floorf(((0.256891f * fConst0KI) + 0.5f /* Sum */)); // step: 53
		fConst4KI = (6.9077554f * (fConst3KI / fConst0KI)); // step: 55
		fConst5KI = (3.1415927f / fConst0KI); // step: 89
		fConst6KI = floorf(((0.027333f * fConst0KI) + 0.5f /* Sum */)); // step: 129
		iConst7KI = (int((fConst3KI + -fConst6KI /* Sum */)) & 16383); // step: 133
		fConst8KI = floorf(((0.192303f * fConst0KI) + 0.5f /* Sum */)); // step: 143
		fConst9KI = (6.9077554f * (fConst8KI / fConst0KI)); // step: 145
		fConst10KI = floorf(((0.029291f * fConst0KI) + 0.5f /* Sum */)); // step: 200
		iConst11KI = (int((fConst8KI + -fConst10KI /* Sum */)) & 8191); // step: 204
		fConst12KI = floorf(((0.125f * fConst0KI) + 0.5f /* Sum */)); // step: 216
		fConst13KI = (6.9077554f * (fConst12KI / fConst0KI)); // step: 218
		fConst14KI = floorf(((0.013458f * fConst0KI) + 0.5f /* Sum */)); // step: 275
		iConst15KI = (int((fConst12KI + -fConst14KI /* Sum */)) & 8191); // step: 279
		fConst16KI = floorf(((0.153129f * fConst0KI) + 0.5f /* Sum */)); // step: 297
		fConst17KI = (6.9077554f * (fConst16KI / fConst0KI)); // step: 299
		fConst18KI = floorf(((0.020346f * fConst0KI) + 0.5f /* Sum */)); // step: 356
		iConst19KI = (int((fConst16KI + -fConst18KI /* Sum */)) & 8191); // step: 360
		fConst20KI = floorf(((0.219991f * fConst0KI) + 0.5f /* Sum */)); // step: 379
		fConst21KI = (6.9077554f * (fConst20KI / fConst0KI)); // step: 381
		fConst22KI = floorf(((0.019123f * fConst0KI) + 0.5f /* Sum */)); // step: 436
		iConst23KI = (int((fConst20KI + -fConst22KI /* Sum */)) & 16383); // step: 440
		fConst24KI = floorf(((0.210389f * fConst0KI) + 0.5f /* Sum */)); // step: 454
		fConst25KI = (6.9077554f * (fConst24KI / fConst0KI)); // step: 456
		fConst26KI = floorf(((0.024421f * fConst0KI) + 0.5f /* Sum */)); // step: 511
		iConst27KI = (int((fConst24KI + -fConst26KI /* Sum */)) & 16383); // step: 515
		fConst28KI = floorf(((0.127837f * fConst0KI) + 0.5f /* Sum */)); // step: 527
		fConst29KI = (6.9077554f * (fConst28KI / fConst0KI)); // step: 529
		fConst30KI = floorf(((0.031604f * fConst0KI) + 0.5f /* Sum */)); // step: 586
		iConst31KI = (int((fConst28KI + -fConst30KI /* Sum */)) & 8191); // step: 590
		fConst32KI = floorf(((0.174713f * fConst0KI) + 0.5f /* Sum */)); // step: 605
		fConst33KI = (6.9077554f * (fConst32KI / fConst0KI)); // step: 607
		fConst34KI = floorf(((0.022904f * fConst0KI) + 0.5f /* Sum */)); // step: 664
		iConst35KI = (int((fConst32KI + -fConst34KI /* Sum */)) & 8191); // step: 668
		iConst36KI = (int((fConst22KI + -1.0f /* Sum */)) & 1023); // step: 688
		iConst37KI = (int((fConst6KI + -1.0f /* Sum */)) & 2047); // step: 705
		iConst38KI = (int((fConst10KI + -1.0f /* Sum */)) & 2047); // step: 717
		iConst39KI = (int((fConst26KI + -1.0f /* Sum */)) & 2047); // step: 727
		iConst40KI = (int((fConst14KI + -1.0f /* Sum */)) & 1023); // step: 737
		iConst41KI = (int((fConst30KI + -1.0f /* Sum */)) & 2047); // step: 747
		iConst42KI = (int((fConst34KI + -1.0f /* Sum */)) & 2047); // step: 757
		iConst43KI = (int((fConst18KI + -1.0f /* Sum */)) & 1023); // step: 767
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 6e+01f;
		fslider1 = 6e+03f;
		fslider2 = 2.0f;
		fslider3 = 2e+02f;
		fslider4 = 3.0f;
		fslider5 = 315.0f;
		fslider6 = 0.0f;
		fslider7 = 1.5e+03f;
		fslider8 = 0.0f;
		fslider9 = 16.79f;
		fslider10 = 0.4492f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 8192; i++) { fVec4SE[i] = 0; }
		fVec4SE[0] = -1;  // detect unintialized
		fVec9SEState = 0;
		fVec7SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec13SE[i] = 0; }
		fVec13SE[0] = -1;  // detect unintialized
		fVec18SEState = 0;
		fVec16SEState = 0;
		for (int i = 1; i < 8192; i++) { fVec22SE[i] = 0; }
		fVec22SE[0] = -1;  // detect unintialized
		fVec28SEState = 0;
		fVec26SEState = 0;
		for (int i = 1; i < 8192; i++) { fVec32SE[i] = 0; }
		fVec32SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 8192; i++) { fVec34SE[i] = 0; }
		fVec34SE[0] = -1;  // detect unintialized
		fVec40SEState = 0;
		fVec38SEState = 0;
		for (int i = 1; i < 8192; i++) { fVec44SE[i] = 0; }
		fVec44SE[0] = -1;  // detect unintialized
		fVec53SEState = 0;
		fVec51SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec57SE[i] = 0; }
		fVec57SE[0] = -1;  // detect unintialized
		fVec63SEState = 0;
		fVec61SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec67SE[i] = 0; }
		fVec67SE[0] = -1;  // detect unintialized
		fVec73SEState = 0;
		fVec71SEState = 0;
		for (int i = 1; i < 8192; i++) { fVec77SE[i] = 0; }
		fVec77SE[0] = -1;  // detect unintialized
		fVec84SEState = 0;
		fVec82SEState = 0;
		for (int i = 1; i < 8192; i++) { fVec88SE[i] = 0; }
		fVec88SE[0] = -1;  // detect unintialized
		fVec52SEState = 0;
		for (int j = 0; j < 2; j++) { fVec54SEState[j] = 0; }
		for (int i = 1; i < 1024; i++) { fVec93SE[i] = 0; }
		fVec93SE[0] = -1;  // detect unintialized
		fVec50SEState = 0;
		fVec48SEState = 0;
		fVec8SEState = 0;
		for (int j = 0; j < 2; j++) { fVec10SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec97SE[i] = 0; }
		fVec97SE[0] = -1;  // detect unintialized
		fVec6SEState = 0;
		fVec0SEState = 0;
		fVec17SEState = 0;
		for (int j = 0; j < 2; j++) { fVec19SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec101SE[i] = 0; }
		fVec101SE[0] = -1;  // detect unintialized
		fVec24SEState = 0;
		fVec1SEState = 0;
		fVec62SEState = 0;
		for (int j = 0; j < 2; j++) { fVec64SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec105SE[i] = 0; }
		fVec105SE[0] = -1;  // detect unintialized
		fVec60SEState = 0;
		fVec49SEState = 0;
		fVec27SEState = 0;
		for (int j = 0; j < 2; j++) { fVec29SEState[j] = 0; }
		for (int i = 1; i < 1024; i++) { fVec109SE[i] = 0; }
		fVec109SE[0] = -1;  // detect unintialized
		fVec36SEState = 0;
		fVec2SEState = 0;
		fVec72SEState = 0;
		for (int j = 0; j < 2; j++) { fVec74SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec113SE[i] = 0; }
		fVec113SE[0] = -1;  // detect unintialized
		fVec79SEState = 0;
		fVec70SEState = 0;
		fVec83SEState = 0;
		for (int j = 0; j < 2; j++) { fVec85SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec117SE[i] = 0; }
		fVec117SE[0] = -1;  // detect unintialized
		fVec90SEState = 0;
		fVec81SEState = 0;
		fVec39SEState = 0;
		for (int j = 0; j < 2; j++) { fVec41SEState[j] = 0; }
		for (int i = 1; i < 1024; i++) { fVec121SE[i] = 0; }
		fVec121SE[0] = -1;  // detect unintialized
		fVec46SEState = 0;
		fVec3SEState = 0;
		fVec126SEState = 0;
		for (int j = 0; j < 2; j++) { fVec127SEState[j] = 0; }
		fVec131SEState = 0;
		for (int j = 0; j < 2; j++) { fVec132SEState[j] = 0; }
		fVec134SEState = 0;
		fVec136SEState = 0;
		fVec140SEState = 0;
		for (int j = 0; j < 2; j++) { fVec141SEState[j] = 0; }
		fVec145SEState = 0;
		for (int j = 0; j < 2; j++) { fVec146SEState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "~ ZITA REV1 FEEDBACK DELAY NETWORK (FDN) & SCHROEDER ALLPASS-COMB REVERBERATOR (8x8). See Faust's effect.lib for documentation and references");
		ui_interface->openHorizontalBox("Zita_Rev1");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("Input");
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Delay in ms before reverberation begins");
		ui_interface->declare(&fslider0, "unit", "ms");
		ui_interface->addVerticalSlider("In Delay", &fslider0, 6e+01f, 2e+01f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("Decay Times in Bands (see tooltips)");
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "scale", "log");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Crossover frequency (Hz) separating low and middle frequencies");
		ui_interface->declare(&fslider3, "unit", "Hz");
		ui_interface->addVerticalSlider("LF X", &fslider3, 2e+02f, 5e+01f, 1e+03f, 1.0f);
		ui_interface->declare(&fslider4, "2", "");
		ui_interface->declare(&fslider4, "scale", "log");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "T60 = time (in seconds) to decay 60dB in low-frequency band");
		ui_interface->declare(&fslider4, "unit", "s");
		ui_interface->addVerticalSlider("Low RT60", &fslider4, 3.0f, 1.0f, 8.0f, 0.1f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "scale", "log");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "T60 = time (in seconds) to decay 60dB in middle band");
		ui_interface->declare(&fslider2, "unit", "s");
		ui_interface->addVerticalSlider("Mid RT60", &fslider2, 2.0f, 1.0f, 8.0f, 0.1f);
		ui_interface->declare(&fslider1, "4", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Frequency (Hz) at which the high-frequency T60 is half the middle-band's T60");
		ui_interface->declare(&fslider1, "unit", "Hz");
		ui_interface->addVerticalSlider("HF Damping", &fslider1, 6e+03f, 1.5e+03f, 2.352e+04f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("RM Peaking Equalizer 1");
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "scale", "log");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface->declare(&fslider5, "unit", "Hz");
		ui_interface->addVerticalSlider("Eq1 Freq", &fslider5, 315.0f, 4e+01f, 2.5e+03f, 1.0f);
		ui_interface->declare(&fslider6, "2", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Peak level in dB of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface->declare(&fslider6, "unit", "dB");
		ui_interface->addVerticalSlider("Eq1 Level", &fslider6, 0.0f, -15.0f, 15.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openHorizontalBox("RM Peaking Equalizer 2");
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->declare(&fslider7, "scale", "log");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface->declare(&fslider7, "unit", "Hz");
		ui_interface->addVerticalSlider("Eq2 Freq", &fslider7, 1.5e+03f, 1.6e+02f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider8, "2", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Peak level in dB of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addVerticalSlider("Eq2 Level", &fslider8, 0.0f, -15.0f, 15.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->declare(0, "5", "");
		ui_interface->openHorizontalBox("Output");
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "-1 = dry, 1 = wet");
		ui_interface->addVerticalSlider("Dry/Wet Mix", &fslider10, 0.4492f, -1.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider9, "2", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "Output scale factor");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addVerticalSlider("Level", &fslider9, 16.79f, -7e+01f, 4e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fTemp1SE; // step: 3
		float 	fTemp2SE; // step: 4
		float 	fTemp3SE; // step: 5
		float 	fTemp4SE; // step: 10
		int 	iSlow0BE = (int((fConst1KI * float(fslider0))) & 8191); // Zone 2, step: 26
		float 	fTemp5SE; // step: 27
		float 	fTemp6SE; // step: 28
		float 	fTemp7SE; // step: 31
		float 	fSlow1BE = cosf((fConst2KI * float(fslider1))); // Zone 2, step: 43
		float 	fSlow2BE = float(fslider2); // Zone 2, step: 47
		float 	fSlow3BE = expf(-(fConst4KI / fSlow2BE)); // Zone 2, step: 58
		float 	fSlow4BE = powf(fSlow3BE,2.0f); // Zone 2, step: 59
		float 	fSlow5BE = (1.0f + -(fSlow1BE * fSlow4BE) /* Sum */); // Zone 2, step: 62
		float 	fSlow6BE = (1.0f + -fSlow4BE /* Sum */); // Zone 2, step: 64
		float 	fSlow7BE = (fSlow5BE / fSlow6BE); // Zone 2, step: 65
		float 	fSlow8BE = sqrtf(std::max(0.0f, ((powf(fSlow5BE,2.0f) / powf(fSlow6BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 73
		float 	fSlow9BE = (fSlow7BE + -fSlow8BE /* Sum */); // Zone 2, step: 75
		float 	fSlow10BE = (fSlow3BE * (fSlow8BE + 1.0f + -fSlow7BE /* Sum */)); // Zone 2, step: 81
		float 	fTemp8SE; // step: 83
		float 	fSlow11BE = (1.0f / tanf((fConst5KI * float(fslider3)))); // Zone 2, step: 92
		float 	fSlow12BE = (1.0f / (fSlow11BE + 1.0f /* Sum */)); // Zone 2, step: 94
		float 	fSlow13BE = (1.0f + -fSlow11BE /* Sum */); // Zone 2, step: 96
		float 	fVec9SE[2];
		float 	fSlow14BE = float(fslider4); // Zone 2, step: 110
		float 	fSlow15BE = ((expf(-(fConst4KI / fSlow14BE)) / fSlow3BE) + -1.0f /* Sum */); // Zone 2, step: 115
		float 	fVec7SE[2];
		float 	fTemp9SE; // step: 134
		float 	fSlow16BE = expf(-(fConst9KI / fSlow2BE)); // Zone 2, step: 148
		float 	fSlow17BE = powf(fSlow16BE,2.0f); // Zone 2, step: 149
		float 	fSlow18BE = (1.0f + -(fSlow1BE * fSlow17BE) /* Sum */); // Zone 2, step: 152
		float 	fSlow19BE = (1.0f + -fSlow17BE /* Sum */); // Zone 2, step: 154
		float 	fSlow20BE = (fSlow18BE / fSlow19BE); // Zone 2, step: 155
		float 	fSlow21BE = sqrtf(std::max(0.0f, ((powf(fSlow18BE,2.0f) / powf(fSlow19BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 161
		float 	fSlow22BE = (fSlow20BE + -fSlow21BE /* Sum */); // Zone 2, step: 163
		float 	fSlow23BE = (fSlow16BE * (fSlow21BE + 1.0f + -fSlow20BE /* Sum */)); // Zone 2, step: 169
		float 	fTemp10SE; // step: 171
		float 	fVec18SE[2];
		float 	fSlow24BE = ((expf(-(fConst9KI / fSlow14BE)) / fSlow16BE) + -1.0f /* Sum */); // Zone 2, step: 187
		float 	fVec16SE[2];
		float 	fTemp11SE; // step: 209
		float 	fSlow25BE = (fConst13KI / fSlow2BE); // Zone 2, step: 219
		float 	fSlow26BE = powf(expf(-fSlow25BE),2.0f); // Zone 2, step: 222
		float 	fSlow27BE = (1.0f + -(fSlow1BE * fSlow26BE) /* Sum */); // Zone 2, step: 225
		float 	fSlow28BE = (1.0f + -fSlow26BE /* Sum */); // Zone 2, step: 227
		float 	fSlow29BE = (fSlow27BE / fSlow28BE); // Zone 2, step: 228
		float 	fSlow30BE = sqrtf(std::max(0.0f, ((powf(fSlow27BE,2.0f) / powf(fSlow28BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 234
		float 	fSlow31BE = (fSlow29BE + -fSlow30BE /* Sum */); // Zone 2, step: 236
		float 	fSlow32BE = expf(-fSlow25BE); // Zone 2, step: 241
		float 	fSlow33BE = (fSlow32BE * (fSlow30BE + 1.0f + -fSlow29BE /* Sum */)); // Zone 2, step: 244
		float 	fTemp12SE; // step: 246
		float 	fSlow34BE = ((expf(-(fConst13KI / fSlow14BE)) / fSlow32BE) + -1.0f /* Sum */); // Zone 2, step: 251
		float 	fVec28SE[2];
		float 	fVec26SE[2];
		float 	fTemp13SE; // step: 283
		float 	fTemp14SE; // step: 284
		float 	fTemp15SE; // step: 285
		float 	fTemp16SE; // step: 289
		float 	fTemp17SE; // step: 293
		float 	fSlow35BE = (fConst17KI / fSlow2BE); // Zone 2, step: 300
		float 	fSlow36BE = powf(expf(-fSlow35BE),2.0f); // Zone 2, step: 303
		float 	fSlow37BE = (1.0f + -(fSlow1BE * fSlow36BE) /* Sum */); // Zone 2, step: 306
		float 	fSlow38BE = (1.0f + -fSlow36BE /* Sum */); // Zone 2, step: 308
		float 	fSlow39BE = (fSlow37BE / fSlow38BE); // Zone 2, step: 309
		float 	fSlow40BE = sqrtf(std::max(0.0f, ((powf(fSlow37BE,2.0f) / powf(fSlow38BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 315
		float 	fSlow41BE = (fSlow39BE + -fSlow40BE /* Sum */); // Zone 2, step: 317
		float 	fSlow42BE = expf(-fSlow35BE); // Zone 2, step: 322
		float 	fSlow43BE = (fSlow42BE * (fSlow40BE + 1.0f + -fSlow39BE /* Sum */)); // Zone 2, step: 325
		float 	fTemp18SE; // step: 327
		float 	fSlow44BE = ((expf(-(fConst17KI / fSlow14BE)) / fSlow42BE) + -1.0f /* Sum */); // Zone 2, step: 332
		float 	fVec40SE[2];
		float 	fVec38SE[2];
		float 	fTemp19SE; // step: 365
		float 	fTemp20SE; // step: 369
		float 	fTemp21SE; // step: 371
		float 	fTemp22SE; // step: 374
		float 	fSlow45BE = expf(-(fConst21KI / fSlow2BE)); // Zone 2, step: 384
		float 	fSlow46BE = powf(fSlow45BE,2.0f); // Zone 2, step: 385
		float 	fSlow47BE = (1.0f + -(fSlow1BE * fSlow46BE) /* Sum */); // Zone 2, step: 388
		float 	fSlow48BE = (1.0f + -fSlow46BE /* Sum */); // Zone 2, step: 390
		float 	fSlow49BE = (fSlow47BE / fSlow48BE); // Zone 2, step: 391
		float 	fSlow50BE = sqrtf(std::max(0.0f, ((powf(fSlow47BE,2.0f) / powf(fSlow48BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 397
		float 	fSlow51BE = (fSlow49BE + -fSlow50BE /* Sum */); // Zone 2, step: 399
		float 	fSlow52BE = (fSlow45BE * (fSlow50BE + 1.0f + -fSlow49BE /* Sum */)); // Zone 2, step: 405
		float 	fTemp23SE; // step: 407
		float 	fVec53SE[2];
		float 	fSlow53BE = ((expf(-(fConst21KI / fSlow14BE)) / fSlow45BE) + -1.0f /* Sum */); // Zone 2, step: 423
		float 	fVec51SE[2];
		float 	fTemp24SE; // step: 441
		float 	fSlow54BE = expf(-(fConst25KI / fSlow2BE)); // Zone 2, step: 459
		float 	fSlow55BE = powf(fSlow54BE,2.0f); // Zone 2, step: 460
		float 	fSlow56BE = (1.0f + -(fSlow1BE * fSlow55BE) /* Sum */); // Zone 2, step: 463
		float 	fSlow57BE = (1.0f + -fSlow55BE /* Sum */); // Zone 2, step: 465
		float 	fSlow58BE = (fSlow56BE / fSlow57BE); // Zone 2, step: 466
		float 	fSlow59BE = sqrtf(std::max(0.0f, ((powf(fSlow56BE,2.0f) / powf(fSlow57BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 472
		float 	fSlow60BE = (fSlow58BE + -fSlow59BE /* Sum */); // Zone 2, step: 474
		float 	fSlow61BE = (fSlow54BE * (fSlow59BE + 1.0f + -fSlow58BE /* Sum */)); // Zone 2, step: 480
		float 	fTemp25SE; // step: 482
		float 	fVec63SE[2];
		float 	fSlow62BE = ((expf(-(fConst25KI / fSlow14BE)) / fSlow54BE) + -1.0f /* Sum */); // Zone 2, step: 498
		float 	fVec61SE[2];
		float 	fTemp26SE; // step: 517
		float 	fTemp27SE; // step: 522
		float 	fSlow63BE = (fConst29KI / fSlow2BE); // Zone 2, step: 530
		float 	fSlow64BE = powf(expf(-fSlow63BE),2.0f); // Zone 2, step: 533
		float 	fSlow65BE = (1.0f + -(fSlow1BE * fSlow64BE) /* Sum */); // Zone 2, step: 536
		float 	fSlow66BE = (1.0f + -fSlow64BE /* Sum */); // Zone 2, step: 538
		float 	fSlow67BE = (fSlow65BE / fSlow66BE); // Zone 2, step: 539
		float 	fSlow68BE = sqrtf(std::max(0.0f, ((powf(fSlow65BE,2.0f) / powf(fSlow66BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 545
		float 	fSlow69BE = (fSlow67BE + -fSlow68BE /* Sum */); // Zone 2, step: 547
		float 	fSlow70BE = expf(-fSlow63BE); // Zone 2, step: 552
		float 	fSlow71BE = (fSlow70BE * (fSlow68BE + 1.0f + -fSlow67BE /* Sum */)); // Zone 2, step: 555
		float 	fTemp28SE; // step: 557
		float 	fSlow72BE = ((expf(-(fConst29KI / fSlow14BE)) / fSlow70BE) + -1.0f /* Sum */); // Zone 2, step: 562
		float 	fVec73SE[2];
		float 	fVec71SE[2];
		float 	fTemp29SE; // step: 595
		float 	fTemp30SE; // step: 600
		float 	fSlow73BE = (fConst33KI / fSlow2BE); // Zone 2, step: 608
		float 	fSlow74BE = powf(expf(-fSlow73BE),2.0f); // Zone 2, step: 611
		float 	fSlow75BE = (1.0f + -(fSlow1BE * fSlow74BE) /* Sum */); // Zone 2, step: 614
		float 	fSlow76BE = (1.0f + -fSlow74BE /* Sum */); // Zone 2, step: 616
		float 	fSlow77BE = (fSlow75BE / fSlow76BE); // Zone 2, step: 617
		float 	fSlow78BE = sqrtf(std::max(0.0f, ((powf(fSlow75BE,2.0f) / powf(fSlow76BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 623
		float 	fSlow79BE = (fSlow77BE + -fSlow78BE /* Sum */); // Zone 2, step: 625
		float 	fSlow80BE = expf(-fSlow73BE); // Zone 2, step: 630
		float 	fSlow81BE = (fSlow80BE * (fSlow78BE + 1.0f + -fSlow77BE /* Sum */)); // Zone 2, step: 633
		float 	fTemp31SE; // step: 635
		float 	fSlow82BE = ((expf(-(fConst33KI / fSlow14BE)) / fSlow80BE) + -1.0f /* Sum */); // Zone 2, step: 640
		float 	fVec84SE[2];
		float 	fVec82SE[2];
		float 	fTemp32SE; // step: 673
		float 	fVec52SE[2];
		float 	fVec54SE[3];
		float 	fTemp33SE; // step: 682
		float 	fVec50SE[2];
		float 	fVec48SE[2];
		float 	fVec8SE[2];
		float 	fVec10SE[3];
		float 	fVec6SE[2];
		float 	fVec0SE[2];
		float 	fVec17SE[2];
		float 	fVec19SE[3];
		float 	fVec24SE[2];
		float 	fVec1SE[2];
		float 	fVec62SE[2];
		float 	fVec64SE[3];
		float 	fVec60SE[2];
		float 	fVec49SE[2];
		float 	fVec27SE[2];
		float 	fVec29SE[3];
		float 	fVec36SE[2];
		float 	fVec2SE[2];
		float 	fVec72SE[2];
		float 	fVec74SE[3];
		float 	fVec79SE[2];
		float 	fVec70SE[2];
		float 	fVec83SE[2];
		float 	fVec85SE[3];
		float 	fVec90SE[2];
		float 	fVec81SE[2];
		float 	fVec39SE[2];
		float 	fVec41SE[3];
		float 	fVec46SE[2];
		float 	fVec3SE[2];
		float 	fTemp34SE; // step: 772
		float 	fTemp35SE; // step: 773
		float 	fTemp36SE; // step: 774
		float 	fTemp37SE; // step: 775
		float 	fSlow83BE = float(fslider5); // Zone 2, step: 779
		float 	fSlow84BE = powf(1e+01f,(0.05f * float(fslider6))); // Zone 2, step: 788
		float 	fSlow85BE = (fConst2KI * (fSlow83BE / sqrtf(std::max(0.0f, fSlow84BE)))); // Zone 2, step: 792
		float 	fSlow86BE = ((1.0f + -fSlow85BE /* Sum */) / (fSlow85BE + 1.0f /* Sum */)); // Zone 2, step: 796
		float 	fSlow87BE = (cosf((fConst2KI * fSlow83BE)) * (fSlow86BE + 1.0f /* Sum */)); // Zone 2, step: 798
		float 	fTemp38SE; // step: 802
		float 	fVec126SE[2];
		float 	fTemp39SE; // step: 807
		float 	fVec127SE[3];
		float 	fTemp40SE; // step: 809
		float 	fTemp41SE; // step: 811
		float 	fTemp42SE; // step: 818
		float 	fSlow88BE = float(fslider7); // Zone 2, step: 821
		float 	fSlow89BE = powf(1e+01f,(0.05f * float(fslider8))); // Zone 2, step: 826
		float 	fSlow90BE = (fConst2KI * (fSlow88BE / sqrtf(std::max(0.0f, fSlow89BE)))); // Zone 2, step: 830
		float 	fSlow91BE = ((1.0f + -fSlow90BE /* Sum */) / (fSlow90BE + 1.0f /* Sum */)); // Zone 2, step: 834
		float 	fSlow92BE = (cosf((fConst2KI * fSlow88BE)) * (fSlow91BE + 1.0f /* Sum */)); // Zone 2, step: 836
		float 	fTemp43SE; // step: 840
		float 	fVec131SE[2];
		float 	fTemp44SE; // step: 845
		float 	fVec132SE[3];
		float 	fSlow93BE = (0.001f * powf(1e+01f,(0.05f * float(fslider9)))); // Zone 2, step: 852
		float 	fVec134SE[2];
		float 	fTemp45SE; // step: 859
		float 	fSlow94BE = (0.001f * float(fslider10)); // Zone 2, step: 864
		float 	fVec136SE[2];
		float 	fTemp46SE; // step: 871
		float 	fTemp47SE; // step: 873
		float 	fTemp48SE; // step: 875
		float 	fTemp49SE; // step: 889
		float 	fTemp50SE; // step: 894
		float 	fTemp51SE; // step: 895
		float 	fTemp52SE; // step: 899
		float 	fVec140SE[2];
		float 	fTemp53SE; // step: 904
		float 	fVec141SE[3];
		float 	fTemp54SE; // step: 906
		float 	fTemp55SE; // step: 908
		float 	fTemp56SE; // step: 914
		float 	fTemp57SE; // step: 918
		float 	fVec145SE[2];
		float 	fTemp58SE; // step: 923
		float 	fVec146SE[3];
		float 	fTemp59SE; // step: 925
		float 	fTemp60SE; // step: 927
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec9SE[1] = fVec9SEState;
		fVec7SE[1] = fVec7SEState;
		fVec18SE[1] = fVec18SEState;
		fVec16SE[1] = fVec16SEState;
		fVec28SE[1] = fVec28SEState;
		fVec26SE[1] = fVec26SEState;
		fVec40SE[1] = fVec40SEState;
		fVec38SE[1] = fVec38SEState;
		fVec53SE[1] = fVec53SEState;
		fVec51SE[1] = fVec51SEState;
		fVec63SE[1] = fVec63SEState;
		fVec61SE[1] = fVec61SEState;
		fVec73SE[1] = fVec73SEState;
		fVec71SE[1] = fVec71SEState;
		fVec84SE[1] = fVec84SEState;
		fVec82SE[1] = fVec82SEState;
		fVec52SE[1] = fVec52SEState;
		fVec54SE[1] = fVec54SEState[0];
		fVec54SE[2] = fVec54SEState[1];
		fVec50SE[1] = fVec50SEState;
		fVec48SE[1] = fVec48SEState;
		fVec8SE[1] = fVec8SEState;
		fVec10SE[1] = fVec10SEState[0];
		fVec10SE[2] = fVec10SEState[1];
		fVec6SE[1] = fVec6SEState;
		fVec0SE[1] = fVec0SEState;
		fVec17SE[1] = fVec17SEState;
		fVec19SE[1] = fVec19SEState[0];
		fVec19SE[2] = fVec19SEState[1];
		fVec24SE[1] = fVec24SEState;
		fVec1SE[1] = fVec1SEState;
		fVec62SE[1] = fVec62SEState;
		fVec64SE[1] = fVec64SEState[0];
		fVec64SE[2] = fVec64SEState[1];
		fVec60SE[1] = fVec60SEState;
		fVec49SE[1] = fVec49SEState;
		fVec27SE[1] = fVec27SEState;
		fVec29SE[1] = fVec29SEState[0];
		fVec29SE[2] = fVec29SEState[1];
		fVec36SE[1] = fVec36SEState;
		fVec2SE[1] = fVec2SEState;
		fVec72SE[1] = fVec72SEState;
		fVec74SE[1] = fVec74SEState[0];
		fVec74SE[2] = fVec74SEState[1];
		fVec79SE[1] = fVec79SEState;
		fVec70SE[1] = fVec70SEState;
		fVec83SE[1] = fVec83SEState;
		fVec85SE[1] = fVec85SEState[0];
		fVec85SE[2] = fVec85SEState[1];
		fVec90SE[1] = fVec90SEState;
		fVec81SE[1] = fVec81SEState;
		fVec39SE[1] = fVec39SEState;
		fVec41SE[1] = fVec41SEState[0];
		fVec41SE[2] = fVec41SEState[1];
		fVec46SE[1] = fVec46SEState;
		fVec3SE[1] = fVec3SEState;
		fVec126SE[1] = fVec126SEState;
		fVec127SE[1] = fVec127SEState[0];
		fVec127SE[2] = fVec127SEState[1];
		fVec131SE[1] = fVec131SEState;
		fVec132SE[1] = fVec132SEState[0];
		fVec132SE[2] = fVec132SEState[1];
		fVec134SE[1] = fVec134SEState;
		fVec136SE[1] = fVec136SEState;
		fVec140SE[1] = fVec140SEState;
		fVec141SE[1] = fVec141SEState[0];
		fVec141SE[2] = fVec141SEState[1];
		fVec145SE[1] = fVec145SEState;
		fVec146SE[1] = fVec146SEState[0];
		fVec146SE[2] = fVec146SEState[1];
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[1]; // step: 2
			fTemp1SE = fVec1SE[1]; // step: 3
			fTemp2SE = fVec2SE[1]; // step: 4
			fTemp3SE = fVec3SE[1]; // step: 5
			fTemp4SE = (float)input1[i]; // step: 10
			fVec4SE[IOTA0&8191] = fTemp4SE;
			fTemp5SE = fVec4SE[(IOTA0-iSlow0BE)&8191]; // step: 27
			fTemp6SE = (0.3f * fTemp5SE); // step: 28
			fTemp7SE = fVec6SE[1]; // step: 31
			fTemp8SE = fVec8SE[1]; // step: 83
			fVec9SE[0] = -(fSlow12BE * ((fSlow13BE * fVec9SE[1]) + -fTemp8SE + -fVec10SE[2] /* Sum */));
			fVec7SE[0] = ((fSlow9BE * fVec7SE[1]) + (fSlow10BE * (fTemp8SE + (fSlow15BE * fVec9SE[0]) /* Sum */)) /* Sum */);
			fVec13SE[IOTA0&16383] = ((0.35355338f * fVec7SE[0]) + 1e-20f /* Sum */);
			fTemp9SE = fVec13SE[(IOTA0-iConst7KI)&16383]; // step: 134
			float 	fRec2SE = (0.6f * (fTemp6SE + (-0.6f * fTemp7SE) + -fTemp9SE /* Sum */)); // Zero delay
			fTemp10SE = fVec17SE[1]; // step: 171
			fVec18SE[0] = -(fSlow12BE * ((fSlow13BE * fVec18SE[1]) + -fTemp10SE + -fVec19SE[2] /* Sum */));
			fVec16SE[0] = ((fSlow22BE * fVec16SE[1]) + (fSlow23BE * (fTemp10SE + (fSlow24BE * fVec18SE[0]) /* Sum */)) /* Sum */);
			fVec22SE[IOTA0&8191] = ((0.35355338f * fVec16SE[0]) + 1e-20f /* Sum */);
			fTemp11SE = (fVec22SE[(IOTA0-iConst11KI)&8191] + fTemp6SE + (0.6f * fVec24SE[1]) /* Sum */); // step: 209
			float 	fRec5SE = (-0.6f * fTemp11SE); // Zero delay
			fTemp12SE = fVec27SE[1]; // step: 246
			fVec28SE[0] = -(fSlow12BE * ((fSlow13BE * fVec28SE[1]) + -fTemp12SE + -fVec29SE[2] /* Sum */));
			fVec26SE[0] = ((fSlow31BE * fVec26SE[1]) + (fSlow33BE * (fTemp12SE + (fSlow34BE * fVec28SE[0]) /* Sum */)) /* Sum */);
			fVec32SE[IOTA0&8191] = ((0.35355338f * fVec26SE[0]) + 1e-20f /* Sum */);
			fTemp13SE = (float)input0[i]; // step: 283
			fVec34SE[IOTA0&8191] = fTemp13SE;
			fTemp14SE = fVec34SE[(IOTA0-iSlow0BE)&8191]; // step: 284
			fTemp15SE = (-0.3f * fTemp14SE); // step: 285
			fTemp16SE = (fVec32SE[(IOTA0-iConst15KI)&8191] + fTemp15SE + (-0.6f * fVec36SE[1]) /* Sum */); // step: 289
			float 	fRec8SE = (0.6f * fTemp16SE); // Zero delay
			fTemp17SE = (0.3f * fTemp14SE); // step: 293
			fTemp18SE = fVec39SE[1]; // step: 327
			fVec40SE[0] = -(fSlow12BE * ((fSlow13BE * fVec40SE[1]) + -fTemp18SE + -fVec41SE[2] /* Sum */));
			fVec38SE[0] = ((fSlow41BE * fVec38SE[1]) + (fSlow43BE * (fTemp18SE + (fSlow44BE * fVec40SE[0]) /* Sum */)) /* Sum */);
			fVec44SE[IOTA0&8191] = ((0.35355338f * fVec38SE[0]) + 1e-20f /* Sum */);
			fTemp19SE = (fVec44SE[(IOTA0-iConst19KI)&8191] + fTemp17SE + (-0.6f * fVec46SE[1]) /* Sum */); // step: 365
			float 	fRec11SE = (0.6f * fTemp19SE); // Zero delay
			fTemp20SE = fVec48SE[1]; // step: 369
			fTemp21SE = fVec49SE[1]; // step: 371
			fTemp22SE = fVec50SE[1]; // step: 374
			fTemp23SE = fVec52SE[1]; // step: 407
			fVec53SE[0] = -(fSlow12BE * ((fSlow13BE * fVec53SE[1]) + -fTemp23SE + -fVec54SE[2] /* Sum */));
			fVec51SE[0] = ((fSlow51BE * fVec51SE[1]) + (fSlow52BE * (fTemp23SE + (fSlow53BE * fVec53SE[0]) /* Sum */)) /* Sum */);
			fVec57SE[IOTA0&16383] = ((0.35355338f * fVec51SE[0]) + 1e-20f /* Sum */);
			fTemp24SE = fVec57SE[(IOTA0-iConst23KI)&16383]; // step: 441
			float 	fRec14SE = (0.6f * (fTemp6SE + (-0.6f * fTemp22SE) + -fTemp24SE /* Sum */)); // Zero delay
			fTemp25SE = fVec62SE[1]; // step: 482
			fVec63SE[0] = -(fSlow12BE * ((fSlow13BE * fVec63SE[1]) + -fTemp25SE + -fVec64SE[2] /* Sum */));
			fVec61SE[0] = ((fSlow60BE * fVec61SE[1]) + (fSlow61BE * (fTemp25SE + (fSlow62BE * fVec63SE[0]) /* Sum */)) /* Sum */);
			fVec67SE[IOTA0&16383] = ((0.35355338f * fVec61SE[0]) + 1e-20f /* Sum */);
			fTemp26SE = (fTemp6SE + (0.6f * fVec60SE[1]) + fVec67SE[(IOTA0-iConst27KI)&16383] /* Sum */); // step: 517
			float 	fRec17SE = (-0.6f * fTemp26SE); // Zero delay
			fTemp27SE = fVec70SE[1]; // step: 522
			fTemp28SE = fVec72SE[1]; // step: 557
			fVec73SE[0] = -(fSlow12BE * ((fSlow13BE * fVec73SE[1]) + -fTemp28SE + -fVec74SE[2] /* Sum */));
			fVec71SE[0] = ((fSlow69BE * fVec71SE[1]) + (fSlow71BE * (fTemp28SE + (fSlow72BE * fVec73SE[0]) /* Sum */)) /* Sum */);
			fVec77SE[IOTA0&8191] = ((0.35355338f * fVec71SE[0]) + 1e-20f /* Sum */);
			fTemp29SE = (fVec77SE[(IOTA0-iConst31KI)&8191] + fTemp15SE + (-0.6f * fVec79SE[1]) /* Sum */); // step: 595
			float 	fRec20SE = (0.6f * fTemp29SE); // Zero delay
			fTemp30SE = fVec81SE[1]; // step: 600
			fTemp31SE = fVec83SE[1]; // step: 635
			fVec84SE[0] = -(fSlow12BE * ((fSlow13BE * fVec84SE[1]) + -fTemp31SE + -fVec85SE[2] /* Sum */));
			fVec82SE[0] = ((fSlow79BE * fVec82SE[1]) + (fSlow81BE * (fTemp31SE + (fSlow82BE * fVec84SE[0]) /* Sum */)) /* Sum */);
			fVec88SE[IOTA0&8191] = ((0.35355338f * fVec82SE[0]) + 1e-20f /* Sum */);
			fTemp32SE = (fTemp17SE + fVec88SE[(IOTA0-iConst35KI)&8191] + (-0.6f * fVec90SE[1]) /* Sum */); // step: 673
			float 	fRec23SE = (0.6f * fTemp32SE); // Zero delay
			fVec52SE[0] = (fTemp0SE + fTemp1SE + fTemp2SE + fTemp3SE + fRec2SE + fRec5SE + fRec11SE + fRec8SE + -fTemp20SE + -fTemp21SE + -fTemp27SE + -fTemp30SE + -fRec14SE + -fRec17SE + -fRec23SE + -fRec20SE /* Sum */);
			fVec54SE[0] = fVec52SE[0];
			fTemp33SE = (-0.3f * fTemp5SE); // step: 682
			fVec93SE[IOTA0&1023] = ((0.6f * fTemp22SE) + fTemp24SE + fTemp33SE /* Sum */);
			fVec50SE[0] = fVec93SE[(IOTA0-iConst36KI)&1023];
			fVec48SE[0] = fVec50SE[0];
			fVec8SE[0] = (fTemp20SE + fTemp0SE + fTemp30SE + fTemp3SE + fRec14SE + fRec2SE + fRec11SE + fRec23SE + -fTemp1SE + -fTemp21SE + -fTemp2SE + -fTemp27SE + -fRec5SE + -fRec17SE + -fRec20SE + -fRec8SE /* Sum */);
			fVec10SE[0] = fVec8SE[0];
			fVec97SE[IOTA0&2047] = ((0.6f * fTemp7SE) + fTemp9SE + fTemp33SE /* Sum */);
			fVec6SE[0] = fVec97SE[(IOTA0-iConst37KI)&2047];
			fVec0SE[0] = fVec6SE[0];
			fVec17SE[0] = (fTemp20SE + fTemp1SE + fTemp27SE + fTemp3SE + fRec14SE + fRec5SE + fRec11SE + fRec20SE + -fTemp0SE + -fTemp21SE + -fTemp2SE + -fTemp30SE + -fRec2SE + -fRec17SE + -fRec23SE + -fRec8SE /* Sum */);
			fVec19SE[0] = fVec17SE[0];
			fVec101SE[IOTA0&2047] = fTemp11SE;
			fVec24SE[0] = fVec101SE[(IOTA0-iConst38KI)&2047];
			fVec1SE[0] = fVec24SE[0];
			fVec62SE[0] = (fTemp2SE + fTemp27SE + fTemp30SE + fTemp3SE + fRec8SE + fRec20SE + fRec11SE + fRec23SE + -fTemp20SE + -fTemp0SE + -fTemp1SE + -fTemp21SE + -fRec14SE + -fRec2SE + -fRec17SE + -fRec5SE /* Sum */);
			fVec64SE[0] = fVec62SE[0];
			fVec105SE[IOTA0&2047] = fTemp26SE;
			fVec60SE[0] = fVec105SE[(IOTA0-iConst39KI)&2047];
			fVec49SE[0] = fVec60SE[0];
			fVec27SE[0] = (fTemp20SE + fTemp21SE + fTemp2SE + fTemp3SE + fRec14SE + fRec17SE + fRec11SE + fRec8SE + -fTemp0SE + -fTemp1SE + -fTemp27SE + -fTemp30SE + -fRec2SE + -fRec5SE + -fRec23SE + -fRec20SE /* Sum */);
			fVec29SE[0] = fVec27SE[0];
			fVec109SE[IOTA0&1023] = fTemp16SE;
			fVec36SE[0] = fVec109SE[(IOTA0-iConst40KI)&1023];
			fVec2SE[0] = fVec36SE[0];
			fVec72SE[0] = (fTemp1SE + fTemp21SE + fTemp30SE + fTemp3SE + fRec5SE + fRec17SE + fRec11SE + fRec23SE + -fTemp20SE + -fTemp0SE + -fTemp2SE + -fTemp27SE + -fRec14SE + -fRec2SE + -fRec20SE + -fRec8SE /* Sum */);
			fVec74SE[0] = fVec72SE[0];
			fVec113SE[IOTA0&2047] = fTemp29SE;
			fVec79SE[0] = fVec113SE[(IOTA0-iConst41KI)&2047];
			fVec70SE[0] = fVec79SE[0];
			fVec83SE[0] = (fTemp0SE + fTemp21SE + fTemp27SE + fTemp3SE + fRec2SE + fRec17SE + fRec11SE + fRec20SE + -fTemp20SE + -fTemp1SE + -fTemp2SE + -fTemp30SE + -fRec14SE + -fRec5SE + -fRec23SE + -fRec8SE /* Sum */);
			fVec85SE[0] = fVec83SE[0];
			fVec117SE[IOTA0&2047] = fTemp32SE;
			fVec90SE[0] = fVec117SE[(IOTA0-iConst42KI)&2047];
			fVec81SE[0] = fVec90SE[0];
			fVec39SE[0] = (fTemp20SE + fTemp0SE + fTemp1SE + fTemp21SE + fTemp2SE + fTemp27SE + fTemp30SE + fTemp3SE + fRec14SE + fRec2SE + fRec5SE + fRec17SE + fRec8SE + fRec20SE + fRec11SE + fRec23SE /* Sum */);
			fVec41SE[0] = fVec39SE[0];
			fVec121SE[IOTA0&1023] = fTemp19SE;
			fVec46SE[0] = fVec121SE[(IOTA0-iConst43KI)&1023];
			fVec3SE[0] = fVec46SE[0];
			fTemp34SE = fVec62SE[0]; // step: 772
			fTemp35SE = fVec72SE[0]; // step: 773
			fTemp36SE = (fTemp34SE + fTemp35SE /* Sum */); // step: 774
			fTemp37SE = (0.37f * fTemp36SE); // step: 775
			fTemp38SE = fVec127SE[2]; // step: 802
			fVec126SE[0] = (fTemp37SE + (fSlow87BE * fVec126SE[1]) + -(fSlow86BE * fTemp38SE) /* Sum */);
			fTemp39SE = fVec126SE[0]; // step: 807
			fVec127SE[0] = fTemp39SE;
			fTemp40SE = (fSlow86BE * fVec126SE[0]); // step: 809
			fTemp41SE = (fSlow87BE * fVec127SE[1]); // step: 811
			fTemp42SE = (0.5f * (fTemp40SE + fTemp37SE + fTemp38SE + -fTemp41SE + (fSlow84BE * (fTemp38SE + fTemp40SE + (-0.37f * fTemp36SE) + -fTemp41SE /* Sum */)) /* Sum */)); // step: 818
			fTemp43SE = fVec132SE[2]; // step: 840
			fVec131SE[0] = (fTemp42SE + (fSlow92BE * fVec131SE[1]) + -(fSlow91BE * fTemp43SE) /* Sum */);
			fTemp44SE = fVec131SE[0]; // step: 845
			fVec132SE[0] = fTemp44SE;
			fVec134SE[0] = (fSlow93BE + (0.999f * fVec134SE[1]) /* Sum */);
			fTemp45SE = fVec134SE[0]; // step: 859
			fVec136SE[0] = (fSlow94BE + (0.999f * fVec136SE[1]) /* Sum */);
			fTemp46SE = (fVec136SE[0] + 1.0f /* Sum */); // step: 871
			fTemp47SE = (fSlow91BE * fVec131SE[0]); // step: 873
			fTemp48SE = (fSlow92BE * fVec132SE[1]); // step: 875
			fTemp49SE = (1.0f + (-0.5f * fTemp46SE) /* Sum */); // step: 889
			fTemp50SE = (fTemp34SE + -fTemp35SE /* Sum */); // step: 894
			fTemp51SE = (0.37f * fTemp50SE); // step: 895
			fTemp52SE = fVec141SE[2]; // step: 899
			fVec140SE[0] = (fTemp51SE + (fSlow87BE * fVec140SE[1]) + -(fSlow86BE * fTemp52SE) /* Sum */);
			fTemp53SE = fVec140SE[0]; // step: 904
			fVec141SE[0] = fTemp53SE;
			fTemp54SE = (fSlow86BE * fVec140SE[0]); // step: 906
			fTemp55SE = (fSlow87BE * fVec141SE[1]); // step: 908
			fTemp56SE = (0.5f * (fTemp54SE + fTemp51SE + fTemp52SE + -fTemp55SE + (fSlow84BE * (fTemp52SE + fTemp54SE + (-0.37f * fTemp50SE) + -fTemp55SE /* Sum */)) /* Sum */)); // step: 914
			fTemp57SE = fVec146SE[2]; // step: 918
			fVec145SE[0] = (fTemp56SE + (fSlow92BE * fVec145SE[1]) + -(fSlow91BE * fTemp57SE) /* Sum */);
			fTemp58SE = fVec145SE[0]; // step: 923
			fVec146SE[0] = fTemp58SE;
			fTemp59SE = (fSlow91BE * fVec145SE[0]); // step: 925
			fTemp60SE = (fSlow92BE * fVec146SE[1]); // step: 927
			output0[i] = (FAUSTFLOAT)((fTemp45SE * ((0.25f * (fTemp46SE * (fTemp47SE + fTemp42SE + fTemp43SE + -fTemp48SE + (fSlow89BE * (fTemp43SE + fTemp47SE + (-0.5f * (fTemp40SE + fTemp37SE + fTemp38SE + -fTemp41SE + (fSlow84BE * (fTemp38SE + fTemp40SE + -fTemp37SE + -fTemp41SE /* Sum */)) /* Sum */)) + -fTemp48SE /* Sum */)) /* Sum */))) + (fVec34SE[IOTA0&8191] * fTemp49SE) /* Sum */)));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fTemp45SE * ((0.25f * (fTemp46SE * (fTemp59SE + fTemp56SE + fTemp57SE + -fTemp60SE + (fSlow89BE * (fTemp57SE + fTemp59SE + (-0.5f * (fTemp54SE + fTemp51SE + fTemp52SE + -fTemp55SE + (fSlow84BE * (fTemp52SE + fTemp54SE + -fTemp51SE + -fTemp55SE /* Sum */)) /* Sum */)) + -fTemp60SE /* Sum */)) /* Sum */))) + (fVec4SE[IOTA0&8191] * fTemp49SE) /* Sum */)));  // Zone Exec Code
			// post processing
			fVec146SE[2] = fVec146SE[1];
			fVec146SE[1] = fVec146SE[0];
			fVec145SE[1] = fVec145SE[0];
			fVec141SE[2] = fVec141SE[1];
			fVec141SE[1] = fVec141SE[0];
			fVec140SE[1] = fVec140SE[0];
			fVec136SE[1] = fVec136SE[0];
			fVec134SE[1] = fVec134SE[0];
			fVec132SE[2] = fVec132SE[1];
			fVec132SE[1] = fVec132SE[0];
			fVec131SE[1] = fVec131SE[0];
			fVec127SE[2] = fVec127SE[1];
			fVec127SE[1] = fVec127SE[0];
			fVec126SE[1] = fVec126SE[0];
			fVec3SE[1] = fVec3SE[0];
			fVec46SE[1] = fVec46SE[0];
			fVec41SE[2] = fVec41SE[1];
			fVec41SE[1] = fVec41SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec81SE[1] = fVec81SE[0];
			fVec90SE[1] = fVec90SE[0];
			fVec85SE[2] = fVec85SE[1];
			fVec85SE[1] = fVec85SE[0];
			fVec83SE[1] = fVec83SE[0];
			fVec70SE[1] = fVec70SE[0];
			fVec79SE[1] = fVec79SE[0];
			fVec74SE[2] = fVec74SE[1];
			fVec74SE[1] = fVec74SE[0];
			fVec72SE[1] = fVec72SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec36SE[1] = fVec36SE[0];
			fVec29SE[2] = fVec29SE[1];
			fVec29SE[1] = fVec29SE[0];
			fVec27SE[1] = fVec27SE[0];
			fVec49SE[1] = fVec49SE[0];
			fVec60SE[1] = fVec60SE[0];
			fVec64SE[2] = fVec64SE[1];
			fVec64SE[1] = fVec64SE[0];
			fVec62SE[1] = fVec62SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec19SE[2] = fVec19SE[1];
			fVec19SE[1] = fVec19SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec0SE[1] = fVec0SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec10SE[2] = fVec10SE[1];
			fVec10SE[1] = fVec10SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec48SE[1] = fVec48SE[0];
			fVec50SE[1] = fVec50SE[0];
			fVec54SE[2] = fVec54SE[1];
			fVec54SE[1] = fVec54SE[0];
			fVec52SE[1] = fVec52SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec84SE[1] = fVec84SE[0];
			fVec71SE[1] = fVec71SE[0];
			fVec73SE[1] = fVec73SE[0];
			fVec61SE[1] = fVec61SE[0];
			fVec63SE[1] = fVec63SE[0];
			fVec51SE[1] = fVec51SE[0];
			fVec53SE[1] = fVec53SE[0];
			fVec38SE[1] = fVec38SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec9SE[1] = fVec9SE[0];
			++IOTA0;
		}
		fVec9SEState = fVec9SE[1];
		fVec7SEState = fVec7SE[1];
		fVec18SEState = fVec18SE[1];
		fVec16SEState = fVec16SE[1];
		fVec28SEState = fVec28SE[1];
		fVec26SEState = fVec26SE[1];
		fVec40SEState = fVec40SE[1];
		fVec38SEState = fVec38SE[1];
		fVec53SEState = fVec53SE[1];
		fVec51SEState = fVec51SE[1];
		fVec63SEState = fVec63SE[1];
		fVec61SEState = fVec61SE[1];
		fVec73SEState = fVec73SE[1];
		fVec71SEState = fVec71SE[1];
		fVec84SEState = fVec84SE[1];
		fVec82SEState = fVec82SE[1];
		fVec52SEState = fVec52SE[1];
		fVec54SEState[0] = fVec54SE[1];
		fVec54SEState[1] = fVec54SE[2];
		fVec50SEState = fVec50SE[1];
		fVec48SEState = fVec48SE[1];
		fVec8SEState = fVec8SE[1];
		fVec10SEState[0] = fVec10SE[1];
		fVec10SEState[1] = fVec10SE[2];
		fVec6SEState = fVec6SE[1];
		fVec0SEState = fVec0SE[1];
		fVec17SEState = fVec17SE[1];
		fVec19SEState[0] = fVec19SE[1];
		fVec19SEState[1] = fVec19SE[2];
		fVec24SEState = fVec24SE[1];
		fVec1SEState = fVec1SE[1];
		fVec62SEState = fVec62SE[1];
		fVec64SEState[0] = fVec64SE[1];
		fVec64SEState[1] = fVec64SE[2];
		fVec60SEState = fVec60SE[1];
		fVec49SEState = fVec49SE[1];
		fVec27SEState = fVec27SE[1];
		fVec29SEState[0] = fVec29SE[1];
		fVec29SEState[1] = fVec29SE[2];
		fVec36SEState = fVec36SE[1];
		fVec2SEState = fVec2SE[1];
		fVec72SEState = fVec72SE[1];
		fVec74SEState[0] = fVec74SE[1];
		fVec74SEState[1] = fVec74SE[2];
		fVec79SEState = fVec79SE[1];
		fVec70SEState = fVec70SE[1];
		fVec83SEState = fVec83SE[1];
		fVec85SEState[0] = fVec85SE[1];
		fVec85SEState[1] = fVec85SE[2];
		fVec90SEState = fVec90SE[1];
		fVec81SEState = fVec81SE[1];
		fVec39SEState = fVec39SE[1];
		fVec41SEState[0] = fVec41SE[1];
		fVec41SEState[1] = fVec41SE[2];
		fVec46SEState = fVec46SE[1];
		fVec3SEState = fVec3SE[1];
		fVec126SEState = fVec126SE[1];
		fVec127SEState[0] = fVec127SE[1];
		fVec127SEState[1] = fVec127SE[2];
		fVec131SEState = fVec131SE[1];
		fVec132SEState[0] = fVec132SE[1];
		fVec132SEState[1] = fVec132SE[2];
		fVec134SEState = fVec134SE[1];
		fVec136SEState = fVec136SE[1];
		fVec140SEState = fVec140SE[1];
		fVec141SEState[0] = fVec141SE[1];
		fVec141SEState[1] = fVec141SE[2];
		fVec145SEState = fVec145SE[1];
		fVec146SEState[0] = fVec146SE[1];
		fVec146SEState[1] = fVec146SE[2];
	}
};


