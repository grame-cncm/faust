//----------------------------------------------------------
// name: "parametric_eq"
//
// Code generated with Faust 2.77.2 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0State[3]; // Copy Delay
	FAUSTFLOAT 	fslider0;
	float 	fConst0; // step: 15
	float 	fConst1; // step: 16
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVeeec1 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec1State; // Mono Delay
	// Recursion delay fVeeec0 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec0State; // Mono Delay
	float 	fVec1State; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVeeec4 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec4State; // Mono Delay
	float 	fVec2State; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVeeec6 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec6State; // Mono Delay
	float 	fVec3State; // Single Delay
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fConst2; // step: 90
	float 	fConst3; // step: 99
	float 	fConst4; // step: 101
	float 	fConst5; // step: 105
	float 	fConst6; // step: 111
	float 	fConst7; // step: 117
	FAUSTFLOAT 	fslider6;
	float 	fConst8; // step: 120
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVeeec11 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec11State; // Mono Delay
	float 	fConst9; // step: 149
	FAUSTFLOAT 	fslider8;
	float 	fConst10; // step: 156
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	// Recursion delay fVeeec16 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec16State; // Mono Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	// Recursion delay iVeeec18 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	int 	iVeeec18State; // Mono Delay
	// Recursion delay fVeeec20 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec20State[3]; // Copy Delay
	FAUSTFLOAT 	fentry0;
	float 	fConst11; // step: 255
	float 	fVec4State; // Single Delay
	float 	fConst12; // step: 268
	float 	fVec5State; // Single Delay
	float 	fConst13; // step: 283
	float 	fVec6State; // Single Delay
	float 	fVec7State; // Single Delay
	float 	fVec8State; // Single Delay
	float 	fVec9State; // Single Delay
	float 	fVec10State; // Single Delay
	float 	fVec11State; // Single Delay
	float 	fVec12State; // Single Delay
	float 	fVec13State; // Single Delay
	float 	fVec14State; // Single Delay
	float 	fVec15State; // Single Delay
	float 	fVec16State; // Single Delay
	float 	fVec17State; // Single Delay
	float 	fVec18State; // Single Delay
	float 	fVec19State; // Single Delay
	// Recursion delay fVeeec15 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec15State; // Mono Delay
	// Recursion delay fVeeec14 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec14State[2]; // Copy Delay
	FAUSTFLOAT 	fslider12;
	// Recursion delay fVeeec50 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec50State; // Mono Delay
	// Recursion delay fVeeec49 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec49State[2]; // Copy Delay
	// Recursion delay fVeeec13 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec13State[2]; // Copy Delay
	float 	fVec20State; // Single Delay
	// Recursion delay fVeeec10 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec10State; // Mono Delay
	// Recursion delay fVeeec9 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec9State[2]; // Copy Delay
	// Recursion delay fVeeec61 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec61State; // Mono Delay
	// Recursion delay fVeeec60 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec60State[2]; // Copy Delay
	FAUSTFLOAT 	fslider13;
	float 	fConst14; // step: 506
	float 	fConst15; // step: 509
	float 	fConst16; // step: 510
	float 	fConst17; // step: 512
	// Recursion delay fVeeec65 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec65State[2]; // Copy Delay
	float 	fConst18; // step: 521
	float 	fConst19; // step: 522
	float 	fConst20; // step: 525
	float 	fConst21; // step: 535
	float 	fConst22; // step: 539
	// Recursion delay fVeeec68 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec68State[2]; // Copy Delay
	float 	fConst23; // step: 547
	float 	fConst24; // step: 548
	float 	fConst25; // step: 551
	float 	fConst26; // step: 561
	float 	fConst27; // step: 565
	// Recursion delay fVeeec71 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec71State[2]; // Copy Delay
	float 	fConst28; // step: 573
	float 	fConst29; // step: 574
	float 	fConst30; // step: 577
	// Recursion delay fVeeec8 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec8State; // Mono Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst31; // step: 597
	float 	fConst32; // step: 598
	float 	fConst33; // step: 602
	float 	fConst34; // step: 606
	float 	fConst35; // step: 610
	float 	fConst36; // step: 616
	float 	fConst37; // step: 622
	float 	fConst38; // step: 628
	float 	fConst39; // step: 633
	float 	fConst40; // step: 637
	// Recursion delay fVeeec76 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec76State[2]; // Copy Delay
	float 	fConst41; // step: 646
	float 	fConst42; // step: 647
	float 	fConst43; // step: 650
	float 	fConst44; // step: 660
	float 	fConst45; // step: 664
	// Recursion delay fVeeec79 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec79State[2]; // Copy Delay
	float 	fConst46; // step: 672
	float 	fConst47; // step: 675
	float 	fConst48; // step: 685
	float 	fConst49; // step: 689
	// Recursion delay fVeeec82 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec82State[2]; // Copy Delay
	float 	fConst50; // step: 697
	float 	fConst51; // step: 700
	float 	fConst52; // step: 709
	float 	fConst53; // step: 712
	float 	fConst54; // step: 713
	float 	fConst55; // step: 715
	// Recursion delay fVeeec85 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec85State[2]; // Copy Delay
	float 	fConst56; // step: 722
	float 	fConst57; // step: 723
	float 	fConst58; // step: 726
	float 	fConst59; // step: 735
	float 	fConst60; // step: 739
	// Recursion delay fVeeec88 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec88State[2]; // Copy Delay
	float 	fConst61; // step: 746
	float 	fConst62; // step: 747
	float 	fConst63; // step: 750
	float 	fConst64; // step: 759
	float 	fConst65; // step: 763
	// Recursion delay fVeeec91 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec91State[2]; // Copy Delay
	float 	fConst66; // step: 770
	float 	fConst67; // step: 771
	float 	fConst68; // step: 774
	// Recursion delay fVeeec75 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec75State; // Mono Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst69; // step: 794
	float 	fConst70; // step: 795
	float 	fConst71; // step: 799
	float 	fConst72; // step: 803
	float 	fConst73; // step: 807
	float 	fConst74; // step: 811
	float 	fConst75; // step: 815
	float 	fConst76; // step: 819
	float 	fConst77; // step: 823
	float 	fConst78; // step: 827
	// Recursion delay fVeeec96 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec96State[2]; // Copy Delay
	float 	fConst79; // step: 834
	float 	fConst80; // step: 835
	float 	fConst81; // step: 838
	float 	fConst82; // step: 847
	float 	fConst83; // step: 851
	// Recursion delay fVeeec99 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec99State[2]; // Copy Delay
	float 	fConst84; // step: 858
	float 	fConst85; // step: 861
	float 	fConst86; // step: 870
	float 	fConst87; // step: 874
	// Recursion delay fVeeec102 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec102State[2]; // Copy Delay
	float 	fConst88; // step: 881
	float 	fConst89; // step: 884
	float 	fConst90; // step: 893
	float 	fConst91; // step: 896
	float 	fConst92; // step: 897
	float 	fConst93; // step: 899
	// Recursion delay fVeeec105 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec105State[2]; // Copy Delay
	float 	fConst94; // step: 906
	float 	fConst95; // step: 907
	float 	fConst96; // step: 910
	float 	fConst97; // step: 919
	float 	fConst98; // step: 923
	// Recursion delay fVeeec108 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec108State[2]; // Copy Delay
	float 	fConst99; // step: 930
	float 	fConst100; // step: 931
	float 	fConst101; // step: 934
	float 	fConst102; // step: 943
	float 	fConst103; // step: 947
	// Recursion delay fVeeec111 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec111State[2]; // Copy Delay
	float 	fConst104; // step: 954
	float 	fConst105; // step: 955
	float 	fConst106; // step: 958
	// Recursion delay fVeeec95 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec95State; // Mono Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst107; // step: 978
	float 	fConst108; // step: 979
	float 	fConst109; // step: 983
	float 	fConst110; // step: 987
	float 	fConst111; // step: 991
	float 	fConst112; // step: 995
	float 	fConst113; // step: 999
	float 	fConst114; // step: 1003
	float 	fConst115; // step: 1007
	float 	fConst116; // step: 1011
	// Recursion delay fVeeec116 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec116State[2]; // Copy Delay
	float 	fConst117; // step: 1018
	float 	fConst118; // step: 1019
	float 	fConst119; // step: 1022
	float 	fConst120; // step: 1031
	float 	fConst121; // step: 1035
	// Recursion delay fVeeec119 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec119State[2]; // Copy Delay
	float 	fConst122; // step: 1042
	float 	fConst123; // step: 1045
	float 	fConst124; // step: 1054
	float 	fConst125; // step: 1058
	// Recursion delay fVeeec122 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec122State[2]; // Copy Delay
	float 	fConst126; // step: 1065
	float 	fConst127; // step: 1068
	float 	fConst128; // step: 1077
	float 	fConst129; // step: 1080
	float 	fConst130; // step: 1081
	float 	fConst131; // step: 1083
	// Recursion delay fVeeec125 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec125State[2]; // Copy Delay
	float 	fConst132; // step: 1090
	float 	fConst133; // step: 1091
	float 	fConst134; // step: 1094
	float 	fConst135; // step: 1103
	float 	fConst136; // step: 1107
	// Recursion delay fVeeec128 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec128State[2]; // Copy Delay
	float 	fConst137; // step: 1114
	float 	fConst138; // step: 1115
	float 	fConst139; // step: 1118
	float 	fConst140; // step: 1127
	float 	fConst141; // step: 1131
	// Recursion delay fVeeec131 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec131State[2]; // Copy Delay
	float 	fConst142; // step: 1138
	float 	fConst143; // step: 1139
	float 	fConst144; // step: 1142
	// Recursion delay fVeeec115 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec115State; // Mono Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst145; // step: 1162
	float 	fConst146; // step: 1163
	float 	fConst147; // step: 1167
	float 	fConst148; // step: 1171
	float 	fConst149; // step: 1175
	float 	fConst150; // step: 1179
	float 	fConst151; // step: 1183
	float 	fConst152; // step: 1187
	float 	fConst153; // step: 1191
	float 	fConst154; // step: 1195
	// Recursion delay fVeeec136 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec136State[2]; // Copy Delay
	float 	fConst155; // step: 1202
	float 	fConst156; // step: 1203
	float 	fConst157; // step: 1206
	float 	fConst158; // step: 1215
	float 	fConst159; // step: 1219
	// Recursion delay fVeeec139 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec139State[2]; // Copy Delay
	float 	fConst160; // step: 1226
	float 	fConst161; // step: 1229
	float 	fConst162; // step: 1238
	float 	fConst163; // step: 1242
	// Recursion delay fVeeec142 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec142State[2]; // Copy Delay
	float 	fConst164; // step: 1249
	float 	fConst165; // step: 1252
	float 	fConst166; // step: 1261
	float 	fConst167; // step: 1264
	float 	fConst168; // step: 1265
	float 	fConst169; // step: 1267
	// Recursion delay fVeeec145 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec145State[2]; // Copy Delay
	float 	fConst170; // step: 1274
	float 	fConst171; // step: 1275
	float 	fConst172; // step: 1278
	float 	fConst173; // step: 1287
	float 	fConst174; // step: 1291
	// Recursion delay fVeeec148 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec148State[2]; // Copy Delay
	float 	fConst175; // step: 1298
	float 	fConst176; // step: 1299
	float 	fConst177; // step: 1302
	float 	fConst178; // step: 1311
	float 	fConst179; // step: 1315
	// Recursion delay fVeeec151 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec151State[2]; // Copy Delay
	float 	fConst180; // step: 1322
	float 	fConst181; // step: 1323
	float 	fConst182; // step: 1326
	// Recursion delay fVeeec135 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec135State; // Mono Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst183; // step: 1346
	float 	fConst184; // step: 1347
	float 	fConst185; // step: 1351
	float 	fConst186; // step: 1355
	float 	fConst187; // step: 1359
	float 	fConst188; // step: 1363
	float 	fConst189; // step: 1367
	float 	fConst190; // step: 1371
	float 	fConst191; // step: 1375
	float 	fConst192; // step: 1379
	// Recursion delay fVeeec156 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec156State[2]; // Copy Delay
	float 	fConst193; // step: 1386
	float 	fConst194; // step: 1387
	float 	fConst195; // step: 1390
	float 	fConst196; // step: 1399
	float 	fConst197; // step: 1403
	// Recursion delay fVeeec159 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec159State[2]; // Copy Delay
	float 	fConst198; // step: 1410
	float 	fConst199; // step: 1413
	float 	fConst200; // step: 1422
	float 	fConst201; // step: 1426
	// Recursion delay fVeeec162 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec162State[2]; // Copy Delay
	float 	fConst202; // step: 1433
	float 	fConst203; // step: 1436
	float 	fConst204; // step: 1445
	float 	fConst205; // step: 1448
	float 	fConst206; // step: 1449
	float 	fConst207; // step: 1451
	// Recursion delay fVeeec165 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec165State[2]; // Copy Delay
	float 	fConst208; // step: 1458
	float 	fConst209; // step: 1459
	float 	fConst210; // step: 1462
	float 	fConst211; // step: 1471
	float 	fConst212; // step: 1475
	// Recursion delay fVeeec168 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec168State[2]; // Copy Delay
	float 	fConst213; // step: 1482
	float 	fConst214; // step: 1483
	float 	fConst215; // step: 1486
	float 	fConst216; // step: 1495
	float 	fConst217; // step: 1499
	// Recursion delay fVeeec171 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec171State[2]; // Copy Delay
	float 	fConst218; // step: 1506
	float 	fConst219; // step: 1507
	float 	fConst220; // step: 1510
	// Recursion delay fVeeec155 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec155State; // Mono Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst221; // step: 1530
	float 	fConst222; // step: 1531
	float 	fConst223; // step: 1535
	float 	fConst224; // step: 1539
	float 	fConst225; // step: 1543
	float 	fConst226; // step: 1547
	float 	fConst227; // step: 1551
	float 	fConst228; // step: 1555
	float 	fConst229; // step: 1559
	float 	fConst230; // step: 1563
	// Recursion delay fVeeec176 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec176State[2]; // Copy Delay
	float 	fConst231; // step: 1570
	float 	fConst232; // step: 1571
	float 	fConst233; // step: 1574
	float 	fConst234; // step: 1583
	float 	fConst235; // step: 1587
	// Recursion delay fVeeec179 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec179State[2]; // Copy Delay
	float 	fConst236; // step: 1594
	float 	fConst237; // step: 1597
	float 	fConst238; // step: 1606
	float 	fConst239; // step: 1610
	// Recursion delay fVeeec182 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec182State[2]; // Copy Delay
	float 	fConst240; // step: 1617
	float 	fConst241; // step: 1620
	float 	fConst242; // step: 1629
	float 	fConst243; // step: 1632
	float 	fConst244; // step: 1633
	float 	fConst245; // step: 1635
	// Recursion delay fVeeec185 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec185State[2]; // Copy Delay
	float 	fConst246; // step: 1642
	float 	fConst247; // step: 1643
	float 	fConst248; // step: 1646
	float 	fConst249; // step: 1655
	float 	fConst250; // step: 1659
	// Recursion delay fVeeec188 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec188State[2]; // Copy Delay
	float 	fConst251; // step: 1666
	float 	fConst252; // step: 1667
	float 	fConst253; // step: 1670
	float 	fConst254; // step: 1679
	float 	fConst255; // step: 1683
	// Recursion delay fVeeec191 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec191State[2]; // Copy Delay
	float 	fConst256; // step: 1690
	float 	fConst257; // step: 1691
	float 	fConst258; // step: 1694
	// Recursion delay fVeeec175 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec175State; // Mono Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst259; // step: 1714
	float 	fConst260; // step: 1715
	float 	fConst261; // step: 1719
	float 	fConst262; // step: 1723
	float 	fConst263; // step: 1727
	float 	fConst264; // step: 1731
	float 	fConst265; // step: 1735
	float 	fConst266; // step: 1739
	float 	fConst267; // step: 1743
	float 	fConst268; // step: 1747
	// Recursion delay fVeeec196 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec196State[2]; // Copy Delay
	float 	fConst269; // step: 1754
	float 	fConst270; // step: 1755
	float 	fConst271; // step: 1758
	float 	fConst272; // step: 1767
	float 	fConst273; // step: 1771
	// Recursion delay fVeeec199 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec199State[2]; // Copy Delay
	float 	fConst274; // step: 1778
	float 	fConst275; // step: 1781
	float 	fConst276; // step: 1790
	float 	fConst277; // step: 1794
	// Recursion delay fVeeec202 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec202State[2]; // Copy Delay
	float 	fConst278; // step: 1801
	float 	fConst279; // step: 1804
	float 	fConst280; // step: 1813
	float 	fConst281; // step: 1816
	float 	fConst282; // step: 1817
	float 	fConst283; // step: 1819
	// Recursion delay fVeeec205 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec205State[2]; // Copy Delay
	float 	fConst284; // step: 1826
	float 	fConst285; // step: 1827
	float 	fConst286; // step: 1830
	float 	fConst287; // step: 1839
	float 	fConst288; // step: 1843
	// Recursion delay fVeeec208 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec208State[2]; // Copy Delay
	float 	fConst289; // step: 1850
	float 	fConst290; // step: 1851
	float 	fConst291; // step: 1854
	float 	fConst292; // step: 1863
	float 	fConst293; // step: 1867
	// Recursion delay fVeeec211 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec211State[2]; // Copy Delay
	float 	fConst294; // step: 1874
	float 	fConst295; // step: 1875
	float 	fConst296; // step: 1878
	// Recursion delay fVeeec195 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec195State; // Mono Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst297; // step: 1898
	float 	fConst298; // step: 1899
	float 	fConst299; // step: 1903
	float 	fConst300; // step: 1907
	float 	fConst301; // step: 1911
	float 	fConst302; // step: 1915
	float 	fConst303; // step: 1919
	float 	fConst304; // step: 1923
	float 	fConst305; // step: 1927
	float 	fConst306; // step: 1931
	// Recursion delay fVeeec216 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec216State[2]; // Copy Delay
	float 	fConst307; // step: 1938
	float 	fConst308; // step: 1939
	float 	fConst309; // step: 1942
	float 	fConst310; // step: 1951
	float 	fConst311; // step: 1955
	// Recursion delay fVeeec219 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec219State[2]; // Copy Delay
	float 	fConst312; // step: 1962
	float 	fConst313; // step: 1965
	float 	fConst314; // step: 1974
	float 	fConst315; // step: 1978
	// Recursion delay fVeeec222 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec222State[2]; // Copy Delay
	float 	fConst316; // step: 1985
	float 	fConst317; // step: 1988
	float 	fConst318; // step: 1997
	float 	fConst319; // step: 2000
	float 	fConst320; // step: 2001
	float 	fConst321; // step: 2003
	// Recursion delay fVeeec225 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec225State[2]; // Copy Delay
	float 	fConst322; // step: 2010
	float 	fConst323; // step: 2011
	float 	fConst324; // step: 2014
	float 	fConst325; // step: 2023
	float 	fConst326; // step: 2027
	// Recursion delay fVeeec228 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec228State[2]; // Copy Delay
	float 	fConst327; // step: 2034
	float 	fConst328; // step: 2035
	float 	fConst329; // step: 2038
	float 	fConst330; // step: 2047
	float 	fConst331; // step: 2051
	// Recursion delay fVeeec231 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec231State[2]; // Copy Delay
	float 	fConst332; // step: 2058
	float 	fConst333; // step: 2059
	float 	fConst334; // step: 2062
	// Recursion delay fVeeec215 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec215State; // Mono Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst335; // step: 2082
	float 	fConst336; // step: 2083
	float 	fConst337; // step: 2087
	float 	fConst338; // step: 2091
	float 	fConst339; // step: 2095
	float 	fConst340; // step: 2099
	float 	fConst341; // step: 2103
	float 	fConst342; // step: 2107
	float 	fConst343; // step: 2111
	float 	fConst344; // step: 2115
	// Recursion delay fVeeec236 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec236State[2]; // Copy Delay
	float 	fConst345; // step: 2122
	float 	fConst346; // step: 2123
	float 	fConst347; // step: 2126
	float 	fConst348; // step: 2135
	float 	fConst349; // step: 2139
	// Recursion delay fVeeec239 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec239State[2]; // Copy Delay
	float 	fConst350; // step: 2146
	float 	fConst351; // step: 2149
	float 	fConst352; // step: 2158
	float 	fConst353; // step: 2162
	// Recursion delay fVeeec242 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec242State[2]; // Copy Delay
	float 	fConst354; // step: 2169
	float 	fConst355; // step: 2172
	float 	fConst356; // step: 2181
	float 	fConst357; // step: 2184
	float 	fConst358; // step: 2185
	float 	fConst359; // step: 2187
	// Recursion delay fVeeec245 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec245State[2]; // Copy Delay
	float 	fConst360; // step: 2194
	float 	fConst361; // step: 2195
	float 	fConst362; // step: 2198
	float 	fConst363; // step: 2207
	float 	fConst364; // step: 2211
	// Recursion delay fVeeec248 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec248State[2]; // Copy Delay
	float 	fConst365; // step: 2218
	float 	fConst366; // step: 2219
	float 	fConst367; // step: 2222
	float 	fConst368; // step: 2231
	float 	fConst369; // step: 2235
	// Recursion delay fVeeec251 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec251State[2]; // Copy Delay
	float 	fConst370; // step: 2242
	float 	fConst371; // step: 2243
	float 	fConst372; // step: 2246
	// Recursion delay fVeeec235 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec235State; // Mono Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst373; // step: 2266
	float 	fConst374; // step: 2267
	float 	fConst375; // step: 2271
	float 	fConst376; // step: 2275
	float 	fConst377; // step: 2279
	float 	fConst378; // step: 2283
	float 	fConst379; // step: 2287
	float 	fConst380; // step: 2291
	float 	fConst381; // step: 2295
	float 	fConst382; // step: 2299
	// Recursion delay fVeeec256 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec256State[2]; // Copy Delay
	float 	fConst383; // step: 2306
	float 	fConst384; // step: 2307
	float 	fConst385; // step: 2310
	float 	fConst386; // step: 2319
	float 	fConst387; // step: 2323
	// Recursion delay fVeeec259 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec259State[2]; // Copy Delay
	float 	fConst388; // step: 2330
	float 	fConst389; // step: 2333
	float 	fConst390; // step: 2342
	float 	fConst391; // step: 2346
	// Recursion delay fVeeec262 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec262State[2]; // Copy Delay
	float 	fConst392; // step: 2353
	float 	fConst393; // step: 2356
	float 	fConst394; // step: 2365
	float 	fConst395; // step: 2368
	float 	fConst396; // step: 2369
	float 	fConst397; // step: 2371
	// Recursion delay fVeeec265 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec265State[2]; // Copy Delay
	float 	fConst398; // step: 2378
	float 	fConst399; // step: 2379
	float 	fConst400; // step: 2382
	float 	fConst401; // step: 2391
	float 	fConst402; // step: 2395
	// Recursion delay fVeeec268 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec268State[2]; // Copy Delay
	float 	fConst403; // step: 2402
	float 	fConst404; // step: 2403
	float 	fConst405; // step: 2406
	float 	fConst406; // step: 2415
	float 	fConst407; // step: 2419
	// Recursion delay fVeeec271 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec271State[2]; // Copy Delay
	float 	fConst408; // step: 2426
	float 	fConst409; // step: 2427
	float 	fConst410; // step: 2430
	// Recursion delay fVeeec255 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec255State; // Mono Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst411; // step: 2450
	float 	fConst412; // step: 2451
	float 	fConst413; // step: 2455
	float 	fConst414; // step: 2459
	float 	fConst415; // step: 2463
	float 	fConst416; // step: 2467
	float 	fConst417; // step: 2471
	float 	fConst418; // step: 2475
	float 	fConst419; // step: 2479
	float 	fConst420; // step: 2483
	// Recursion delay fVeeec276 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec276State[2]; // Copy Delay
	float 	fConst421; // step: 2490
	float 	fConst422; // step: 2491
	float 	fConst423; // step: 2494
	float 	fConst424; // step: 2503
	float 	fConst425; // step: 2507
	// Recursion delay fVeeec279 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec279State[2]; // Copy Delay
	float 	fConst426; // step: 2514
	float 	fConst427; // step: 2517
	float 	fConst428; // step: 2526
	float 	fConst429; // step: 2530
	// Recursion delay fVeeec282 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec282State[2]; // Copy Delay
	float 	fConst430; // step: 2537
	float 	fConst431; // step: 2540
	float 	fConst432; // step: 2549
	float 	fConst433; // step: 2552
	float 	fConst434; // step: 2553
	float 	fConst435; // step: 2555
	// Recursion delay fVeeec285 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec285State[2]; // Copy Delay
	float 	fConst436; // step: 2562
	float 	fConst437; // step: 2563
	float 	fConst438; // step: 2566
	float 	fConst439; // step: 2575
	float 	fConst440; // step: 2579
	// Recursion delay fVeeec288 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec288State[2]; // Copy Delay
	float 	fConst441; // step: 2586
	float 	fConst442; // step: 2587
	float 	fConst443; // step: 2590
	float 	fConst444; // step: 2599
	float 	fConst445; // step: 2603
	// Recursion delay fVeeec291 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec291State[2]; // Copy Delay
	float 	fConst446; // step: 2610
	float 	fConst447; // step: 2611
	float 	fConst448; // step: 2614
	// Recursion delay fVeeec275 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec275State; // Mono Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst449; // step: 2634
	float 	fConst450; // step: 2635
	float 	fConst451; // step: 2639
	float 	fConst452; // step: 2643
	float 	fConst453; // step: 2647
	float 	fConst454; // step: 2651
	float 	fConst455; // step: 2655
	float 	fConst456; // step: 2659
	float 	fConst457; // step: 2663
	float 	fConst458; // step: 2667
	// Recursion delay fVeeec296 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec296State[2]; // Copy Delay
	float 	fConst459; // step: 2674
	float 	fConst460; // step: 2675
	float 	fConst461; // step: 2678
	float 	fConst462; // step: 2687
	float 	fConst463; // step: 2691
	// Recursion delay fVeeec299 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec299State[2]; // Copy Delay
	float 	fConst464; // step: 2698
	float 	fConst465; // step: 2701
	float 	fConst466; // step: 2710
	float 	fConst467; // step: 2714
	// Recursion delay fVeeec302 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec302State[2]; // Copy Delay
	float 	fConst468; // step: 2721
	float 	fConst469; // step: 2724
	float 	fConst470; // step: 2733
	float 	fConst471; // step: 2736
	float 	fConst472; // step: 2737
	float 	fConst473; // step: 2739
	// Recursion delay fVeeec305 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec305State[2]; // Copy Delay
	float 	fConst474; // step: 2746
	float 	fConst475; // step: 2747
	float 	fConst476; // step: 2750
	float 	fConst477; // step: 2759
	float 	fConst478; // step: 2763
	// Recursion delay fVeeec308 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec308State[2]; // Copy Delay
	float 	fConst479; // step: 2770
	float 	fConst480; // step: 2771
	float 	fConst481; // step: 2774
	float 	fConst482; // step: 2783
	float 	fConst483; // step: 2787
	// Recursion delay fVeeec311 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec311State[2]; // Copy Delay
	float 	fConst484; // step: 2794
	float 	fConst485; // step: 2795
	float 	fConst486; // step: 2798
	// Recursion delay fVeeec295 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec295State; // Mono Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst487; // step: 2818
	float 	fConst488; // step: 2819
	float 	fConst489; // step: 2823
	float 	fConst490; // step: 2827
	float 	fConst491; // step: 2831
	float 	fConst492; // step: 2835
	float 	fConst493; // step: 2839
	float 	fConst494; // step: 2843
	float 	fConst495; // step: 2847
	float 	fConst496; // step: 2851
	// Recursion delay fVeeec316 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec316State[2]; // Copy Delay
	float 	fConst497; // step: 2858
	float 	fConst498; // step: 2859
	float 	fConst499; // step: 2862
	float 	fConst500; // step: 2871
	float 	fConst501; // step: 2875
	// Recursion delay fVeeec319 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec319State[2]; // Copy Delay
	float 	fConst502; // step: 2882
	float 	fConst503; // step: 2885
	float 	fConst504; // step: 2894
	float 	fConst505; // step: 2898
	// Recursion delay fVeeec322 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec322State[2]; // Copy Delay
	float 	fConst506; // step: 2905
	float 	fConst507; // step: 2908
	float 	fConst508; // step: 2917
	float 	fConst509; // step: 2920
	float 	fConst510; // step: 2921
	float 	fConst511; // step: 2923
	// Recursion delay fVeeec325 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec325State[2]; // Copy Delay
	float 	fConst512; // step: 2930
	float 	fConst513; // step: 2931
	float 	fConst514; // step: 2934
	float 	fConst515; // step: 2943
	float 	fConst516; // step: 2947
	// Recursion delay fVeeec328 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec328State[2]; // Copy Delay
	float 	fConst517; // step: 2954
	float 	fConst518; // step: 2955
	float 	fConst519; // step: 2958
	float 	fConst520; // step: 2967
	float 	fConst521; // step: 2971
	// Recursion delay fVeeec331 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec331State[2]; // Copy Delay
	float 	fConst522; // step: 2978
	float 	fConst523; // step: 2979
	float 	fConst524; // step: 2982
	// Recursion delay fVeeec315 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec315State; // Mono Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst525; // step: 3002
	float 	fConst526; // step: 3003
	float 	fConst527; // step: 3007
	float 	fConst528; // step: 3011
	float 	fConst529; // step: 3015
	float 	fConst530; // step: 3019
	float 	fConst531; // step: 3023
	float 	fConst532; // step: 3027
	float 	fConst533; // step: 3031
	float 	fConst534; // step: 3035
	// Recursion delay fVeeec336 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec336State[2]; // Copy Delay
	float 	fConst535; // step: 3042
	float 	fConst536; // step: 3043
	float 	fConst537; // step: 3046
	float 	fConst538; // step: 3055
	float 	fConst539; // step: 3059
	// Recursion delay fVeeec339 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec339State[2]; // Copy Delay
	float 	fConst540; // step: 3066
	float 	fConst541; // step: 3069
	float 	fConst542; // step: 3078
	float 	fConst543; // step: 3082
	// Recursion delay fVeeec342 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec342State[2]; // Copy Delay
	float 	fConst544; // step: 3089
	float 	fConst545; // step: 3092
	float 	fConst546; // step: 3101
	float 	fConst547; // step: 3104
	float 	fConst548; // step: 3105
	float 	fConst549; // step: 3107
	// Recursion delay fVeeec345 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec345State[2]; // Copy Delay
	float 	fConst550; // step: 3114
	float 	fConst551; // step: 3115
	float 	fConst552; // step: 3118
	float 	fConst553; // step: 3127
	float 	fConst554; // step: 3131
	// Recursion delay fVeeec348 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec348State[2]; // Copy Delay
	float 	fConst555; // step: 3138
	float 	fConst556; // step: 3139
	float 	fConst557; // step: 3142
	float 	fConst558; // step: 3151
	float 	fConst559; // step: 3155
	// Recursion delay fVeeec351 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec351State[2]; // Copy Delay
	float 	fConst560; // step: 3162
	float 	fConst561; // step: 3163
	float 	fConst562; // step: 3166
	// Recursion delay fVeeec335 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec335State; // Mono Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst563; // step: 3186
	float 	fConst564; // step: 3187
	float 	fConst565; // step: 3191
	float 	fConst566; // step: 3195
	float 	fConst567; // step: 3199
	float 	fConst568; // step: 3203
	float 	fConst569; // step: 3207
	float 	fConst570; // step: 3211
	float 	fConst571; // step: 3215
	float 	fConst572; // step: 3219
	// Recursion delay fVeeec356 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec356State[2]; // Copy Delay
	float 	fConst573; // step: 3226
	float 	fConst574; // step: 3227
	float 	fConst575; // step: 3230
	float 	fConst576; // step: 3239
	float 	fConst577; // step: 3243
	// Recursion delay fVeeec359 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec359State[2]; // Copy Delay
	float 	fConst578; // step: 3250
	float 	fConst579; // step: 3253
	float 	fConst580; // step: 3262
	float 	fConst581; // step: 3266
	// Recursion delay fVeeec362 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec362State[2]; // Copy Delay
	float 	fConst582; // step: 3273
	float 	fConst583; // step: 3276
	float 	fConst584; // step: 3285
	float 	fConst585; // step: 3288
	float 	fConst586; // step: 3289
	float 	fConst587; // step: 3291
	// Recursion delay fVeeec365 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec365State[2]; // Copy Delay
	float 	fConst588; // step: 3298
	float 	fConst589; // step: 3299
	float 	fConst590; // step: 3302
	float 	fConst591; // step: 3311
	float 	fConst592; // step: 3315
	// Recursion delay fVeeec368 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec368State[2]; // Copy Delay
	float 	fConst593; // step: 3322
	float 	fConst594; // step: 3323
	float 	fConst595; // step: 3326
	float 	fConst596; // step: 3335
	float 	fConst597; // step: 3339
	// Recursion delay fVeeec371 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec371State[2]; // Copy Delay
	float 	fConst598; // step: 3346
	float 	fConst599; // step: 3347
	float 	fConst600; // step: 3350
	// Recursion delay fVeeec355 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec355State; // Mono Delay
	FAUSTFLOAT 	fbargraph15;
	float 	fConst601; // step: 3370
	float 	fConst602; // step: 3371
	float 	fConst603; // step: 3375
	float 	fConst604; // step: 3379
	float 	fConst605; // step: 3383
	float 	fConst606; // step: 3387
	float 	fConst607; // step: 3391
	float 	fConst608; // step: 3395
	float 	fConst609; // step: 3399
	float 	fConst610; // step: 3403
	// Recursion delay fVeeec376 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec376State[2]; // Copy Delay
	float 	fConst611; // step: 3410
	float 	fConst612; // step: 3411
	float 	fConst613; // step: 3414
	float 	fConst614; // step: 3423
	float 	fConst615; // step: 3427
	// Recursion delay fVeeec379 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec379State[2]; // Copy Delay
	float 	fConst616; // step: 3434
	float 	fConst617; // step: 3437
	float 	fConst618; // step: 3446
	float 	fConst619; // step: 3450
	// Recursion delay fVeeec382 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec382State[2]; // Copy Delay
	float 	fConst620; // step: 3457
	float 	fConst621; // step: 3460
	float 	fConst622; // step: 3469
	float 	fConst623; // step: 3472
	float 	fConst624; // step: 3473
	float 	fConst625; // step: 3475
	// Recursion delay fVeeec385 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec385State[2]; // Copy Delay
	float 	fConst626; // step: 3482
	float 	fConst627; // step: 3483
	float 	fConst628; // step: 3486
	float 	fConst629; // step: 3495
	float 	fConst630; // step: 3499
	// Recursion delay fVeeec388 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec388State[2]; // Copy Delay
	float 	fConst631; // step: 3506
	float 	fConst632; // step: 3507
	float 	fConst633; // step: 3510
	float 	fConst634; // step: 3519
	float 	fConst635; // step: 3523
	// Recursion delay fVeeec391 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec391State[2]; // Copy Delay
	float 	fConst636; // step: 3530
	float 	fConst637; // step: 3531
	float 	fConst638; // step: 3534
	// Recursion delay fVeeec375 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec375State; // Mono Delay
	FAUSTFLOAT 	fbargraph16;
	float 	fConst639; // step: 3554
	float 	fConst640; // step: 3555
	float 	fConst641; // step: 3559
	float 	fConst642; // step: 3563
	float 	fConst643; // step: 3567
	float 	fConst644; // step: 3571
	float 	fConst645; // step: 3575
	float 	fConst646; // step: 3579
	float 	fConst647; // step: 3583
	float 	fConst648; // step: 3587
	// Recursion delay fVeeec396 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec396State[2]; // Copy Delay
	float 	fConst649; // step: 3594
	float 	fConst650; // step: 3595
	float 	fConst651; // step: 3598
	float 	fConst652; // step: 3607
	float 	fConst653; // step: 3611
	// Recursion delay fVeeec399 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec399State[2]; // Copy Delay
	float 	fConst654; // step: 3618
	float 	fConst655; // step: 3621
	float 	fConst656; // step: 3630
	float 	fConst657; // step: 3634
	// Recursion delay fVeeec402 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec402State[2]; // Copy Delay
	float 	fConst658; // step: 3641
	float 	fConst659; // step: 3644
	float 	fConst660; // step: 3653
	float 	fConst661; // step: 3656
	float 	fConst662; // step: 3657
	float 	fConst663; // step: 3659
	// Recursion delay fVeeec405 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec405State[2]; // Copy Delay
	float 	fConst664; // step: 3666
	float 	fConst665; // step: 3667
	float 	fConst666; // step: 3670
	float 	fConst667; // step: 3679
	float 	fConst668; // step: 3683
	// Recursion delay fVeeec408 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec408State[2]; // Copy Delay
	float 	fConst669; // step: 3690
	float 	fConst670; // step: 3691
	float 	fConst671; // step: 3694
	float 	fConst672; // step: 3703
	float 	fConst673; // step: 3707
	// Recursion delay fVeeec411 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec411State[2]; // Copy Delay
	float 	fConst674; // step: 3714
	float 	fConst675; // step: 3715
	float 	fConst676; // step: 3718
	// Recursion delay fVeeec395 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec395State; // Mono Delay
	FAUSTFLOAT 	fbargraph17;
	float 	fConst677; // step: 3738
	float 	fConst678; // step: 3739
	float 	fConst679; // step: 3743
	float 	fConst680; // step: 3747
	float 	fConst681; // step: 3751
	float 	fConst682; // step: 3755
	float 	fConst683; // step: 3759
	float 	fConst684; // step: 3763
	float 	fConst685; // step: 3767
	float 	fConst686; // step: 3771
	// Recursion delay fVeeec416 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec416State[2]; // Copy Delay
	float 	fConst687; // step: 3778
	float 	fConst688; // step: 3779
	float 	fConst689; // step: 3782
	float 	fConst690; // step: 3791
	float 	fConst691; // step: 3795
	// Recursion delay fVeeec419 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec419State[2]; // Copy Delay
	float 	fConst692; // step: 3802
	float 	fConst693; // step: 3805
	float 	fConst694; // step: 3814
	float 	fConst695; // step: 3818
	// Recursion delay fVeeec422 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec422State[2]; // Copy Delay
	float 	fConst696; // step: 3825
	float 	fConst697; // step: 3828
	float 	fConst698; // step: 3837
	float 	fConst699; // step: 3840
	float 	fConst700; // step: 3841
	float 	fConst701; // step: 3843
	// Recursion delay fVeeec425 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec425State[2]; // Copy Delay
	float 	fConst702; // step: 3850
	float 	fConst703; // step: 3851
	float 	fConst704; // step: 3854
	float 	fConst705; // step: 3863
	float 	fConst706; // step: 3867
	// Recursion delay fVeeec428 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec428State[2]; // Copy Delay
	float 	fConst707; // step: 3874
	float 	fConst708; // step: 3875
	float 	fConst709; // step: 3878
	float 	fConst710; // step: 3887
	float 	fConst711; // step: 3891
	// Recursion delay fVeeec431 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec431State[2]; // Copy Delay
	float 	fConst712; // step: 3898
	float 	fConst713; // step: 3899
	float 	fConst714; // step: 3902
	// Recursion delay fVeeec415 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec415State; // Mono Delay
	FAUSTFLOAT 	fbargraph18;
	float 	fConst715; // step: 3923
	float 	fConst716; // step: 3927
	float 	fConst717; // step: 3931
	float 	fConst718; // step: 3935
	float 	fConst719; // step: 3939
	// Recursion delay fVeeec436 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec436State[2]; // Copy Delay
	float 	fConst720; // step: 3946
	float 	fConst721; // step: 3947
	float 	fConst722; // step: 3950
	float 	fConst723; // step: 3959
	float 	fConst724; // step: 3963
	// Recursion delay fVeeec439 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec439State[2]; // Copy Delay
	float 	fConst725; // step: 3970
	float 	fConst726; // step: 3973
	float 	fConst727; // step: 3982
	float 	fConst728; // step: 3986
	// Recursion delay fVeeec442 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec442State[2]; // Copy Delay
	float 	fConst729; // step: 3993
	float 	fConst730; // step: 3996
	// Recursion delay fVeeec435 is of type kMonoDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec435State; // Mono Delay
	FAUSTFLOAT 	fbargraph19;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("filename", "parametric_eq.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "parametric_eq");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = min(1.92e+05f, max(1.0f, float(fSampleRate))); // step: 15
		fConst1 = (1.0f / fConst0); // step: 16
		fConst2 = (1e+03f / fConst0); // step: 90
		fConst3 = tanf((50265.484f / fConst0)); // step: 99
		fConst4 = (1.0f / fConst3); // step: 101
		fConst5 = (1.0f / (((fConst4 + 0.15748216f) / fConst3) + 0.9351402f)); // step: 105
		fConst6 = (1.0f / (((fConst4 + 0.74313045f) / fConst3) + 1.4500711f)); // step: 111
		fConst7 = (1.0f / (((fConst4 + 3.1897273f) / fConst3) + 4.0767817f)); // step: 117
		fConst8 = (3.1415927f / fConst0); // step: 120
		fConst9 = (1382.3008f / fConst0); // step: 149
		fConst10 = (2764.6016f / fConst0); // step: 156
		fConst11 = (0.25f * fConst0); // step: 255
		fConst12 = (0.041666668f * powf(fConst0,2.0f)); // step: 268
		fConst13 = (0.0052083335f * powf(fConst0,3.0f)); // step: 283
		fConst14 = (((fConst4 + -3.1897273f) / fConst3) + 4.0767817f); // step: 506
		fConst15 = powf(fConst3,2.0f); // step: 509
		fConst16 = (1.0f / fConst15); // step: 510
		fConst17 = (2.0f * (4.0767817f - fConst16)); // step: 512
		fConst18 = (0.0017661728f / fConst15); // step: 521
		fConst19 = (fConst18 + 0.0004076782f); // step: 522
		fConst20 = (2.0f * (0.0004076782f - fConst18)); // step: 525
		fConst21 = (((fConst4 + -0.74313045f) / fConst3) + 1.4500711f); // step: 535
		fConst22 = (2.0f * (1.4500711f - fConst16)); // step: 539
		fConst23 = (11.0520525f / fConst15); // step: 547
		fConst24 = (fConst23 + 1.4500711f); // step: 548
		fConst25 = (2.0f * (1.4500711f - fConst23)); // step: 551
		fConst26 = (((fConst4 + -0.15748216f) / fConst3) + 0.9351402f); // step: 561
		fConst27 = (2.0f * (0.9351402f - fConst16)); // step: 565
		fConst28 = (50.06381f / fConst15); // step: 573
		fConst29 = (fConst28 + 0.9351402f); // step: 574
		fConst30 = (2.0f * (0.9351402f - fConst28)); // step: 577
		fConst31 = tanf((35543.062f / fConst0)); // step: 597
		fConst32 = (1.0f / fConst31); // step: 598
		fConst33 = (1.0f / (((fConst32 + 0.15748216f) / fConst31) + 0.9351402f)); // step: 602
		fConst34 = (1.0f / (((fConst32 + 0.74313045f) / fConst31) + 1.4500711f)); // step: 606
		fConst35 = (1.0f / (((fConst32 + 3.1897273f) / fConst31) + 4.0767817f)); // step: 610
		fConst36 = (1.0f / (((fConst4 + 0.16840488f) / fConst3) + 1.0693583f)); // step: 616
		fConst37 = (1.0f / (((fConst4 + 0.51247865f) / fConst3) + 0.6896214f)); // step: 622
		fConst38 = (1.0f / (((fConst4 + 0.78241307f) / fConst3) + 0.2452915f)); // step: 628
		fConst39 = (((fConst4 + -0.78241307f) / fConst3) + 0.2452915f); // step: 633
		fConst40 = (2.0f * (0.2452915f - fConst16)); // step: 637
		fConst41 = (0.0001f / fConst15); // step: 646
		fConst42 = (fConst41 + 0.0004332272f); // step: 647
		fConst43 = (2.0f * (0.0004332272f - fConst41)); // step: 650
		fConst44 = (((fConst4 + -0.51247865f) / fConst3) + 0.6896214f); // step: 660
		fConst45 = (2.0f * (0.6896214f - fConst16)); // step: 664
		fConst46 = (fConst16 + 7.6217313f); // step: 672
		fConst47 = (2.0f * (7.6217313f - fConst16)); // step: 675
		fConst48 = (((fConst4 + -0.16840488f) / fConst3) + 1.0693583f); // step: 685
		fConst49 = (2.0f * (1.0693583f - fConst16)); // step: 689
		fConst50 = (fConst16 + 53.53615f); // step: 697
		fConst51 = (2.0f * (53.53615f - fConst16)); // step: 700
		fConst52 = (((fConst32 + -3.1897273f) / fConst31) + 4.0767817f); // step: 709
		fConst53 = powf(fConst31,2.0f); // step: 712
		fConst54 = (1.0f / fConst53); // step: 713
		fConst55 = (2.0f * (4.0767817f - fConst54)); // step: 715
		fConst56 = (0.0017661728f / fConst53); // step: 722
		fConst57 = (fConst56 + 0.0004076782f); // step: 723
		fConst58 = (2.0f * (0.0004076782f - fConst56)); // step: 726
		fConst59 = (((fConst32 + -0.74313045f) / fConst31) + 1.4500711f); // step: 735
		fConst60 = (2.0f * (1.4500711f - fConst54)); // step: 739
		fConst61 = (11.0520525f / fConst53); // step: 746
		fConst62 = (fConst61 + 1.4500711f); // step: 747
		fConst63 = (2.0f * (1.4500711f - fConst61)); // step: 750
		fConst64 = (((fConst32 + -0.15748216f) / fConst31) + 0.9351402f); // step: 759
		fConst65 = (2.0f * (0.9351402f - fConst54)); // step: 763
		fConst66 = (50.06381f / fConst53); // step: 770
		fConst67 = (fConst66 + 0.9351402f); // step: 771
		fConst68 = (2.0f * (0.9351402f - fConst66)); // step: 774
		fConst69 = tanf((25132.742f / fConst0)); // step: 794
		fConst70 = (1.0f / fConst69); // step: 795
		fConst71 = (1.0f / (((fConst70 + 0.15748216f) / fConst69) + 0.9351402f)); // step: 799
		fConst72 = (1.0f / (((fConst70 + 0.74313045f) / fConst69) + 1.4500711f)); // step: 803
		fConst73 = (1.0f / (((fConst70 + 3.1897273f) / fConst69) + 4.0767817f)); // step: 807
		fConst74 = (1.0f / (((fConst32 + 0.16840488f) / fConst31) + 1.0693583f)); // step: 811
		fConst75 = (1.0f / (((fConst32 + 0.51247865f) / fConst31) + 0.6896214f)); // step: 815
		fConst76 = (1.0f / (((fConst32 + 0.78241307f) / fConst31) + 0.2452915f)); // step: 819
		fConst77 = (((fConst32 + -0.78241307f) / fConst31) + 0.2452915f); // step: 823
		fConst78 = (2.0f * (0.2452915f - fConst54)); // step: 827
		fConst79 = (0.0001f / fConst53); // step: 834
		fConst80 = (fConst79 + 0.0004332272f); // step: 835
		fConst81 = (2.0f * (0.0004332272f - fConst79)); // step: 838
		fConst82 = (((fConst32 + -0.51247865f) / fConst31) + 0.6896214f); // step: 847
		fConst83 = (2.0f * (0.6896214f - fConst54)); // step: 851
		fConst84 = (fConst54 + 7.6217313f); // step: 858
		fConst85 = (2.0f * (7.6217313f - fConst54)); // step: 861
		fConst86 = (((fConst32 + -0.16840488f) / fConst31) + 1.0693583f); // step: 870
		fConst87 = (2.0f * (1.0693583f - fConst54)); // step: 874
		fConst88 = (fConst54 + 53.53615f); // step: 881
		fConst89 = (2.0f * (53.53615f - fConst54)); // step: 884
		fConst90 = (((fConst70 + -3.1897273f) / fConst69) + 4.0767817f); // step: 893
		fConst91 = powf(fConst69,2.0f); // step: 896
		fConst92 = (1.0f / fConst91); // step: 897
		fConst93 = (2.0f * (4.0767817f - fConst92)); // step: 899
		fConst94 = (0.0017661728f / fConst91); // step: 906
		fConst95 = (fConst94 + 0.0004076782f); // step: 907
		fConst96 = (2.0f * (0.0004076782f - fConst94)); // step: 910
		fConst97 = (((fConst70 + -0.74313045f) / fConst69) + 1.4500711f); // step: 919
		fConst98 = (2.0f * (1.4500711f - fConst92)); // step: 923
		fConst99 = (11.0520525f / fConst91); // step: 930
		fConst100 = (fConst99 + 1.4500711f); // step: 931
		fConst101 = (2.0f * (1.4500711f - fConst99)); // step: 934
		fConst102 = (((fConst70 + -0.15748216f) / fConst69) + 0.9351402f); // step: 943
		fConst103 = (2.0f * (0.9351402f - fConst92)); // step: 947
		fConst104 = (50.06381f / fConst91); // step: 954
		fConst105 = (fConst104 + 0.9351402f); // step: 955
		fConst106 = (2.0f * (0.9351402f - fConst104)); // step: 958
		fConst107 = tanf((17771.531f / fConst0)); // step: 978
		fConst108 = (1.0f / fConst107); // step: 979
		fConst109 = (1.0f / (((fConst108 + 0.15748216f) / fConst107) + 0.9351402f)); // step: 983
		fConst110 = (1.0f / (((fConst108 + 0.74313045f) / fConst107) + 1.4500711f)); // step: 987
		fConst111 = (1.0f / (((fConst108 + 3.1897273f) / fConst107) + 4.0767817f)); // step: 991
		fConst112 = (1.0f / (((fConst70 + 0.16840488f) / fConst69) + 1.0693583f)); // step: 995
		fConst113 = (1.0f / (((fConst70 + 0.51247865f) / fConst69) + 0.6896214f)); // step: 999
		fConst114 = (1.0f / (((fConst70 + 0.78241307f) / fConst69) + 0.2452915f)); // step: 1003
		fConst115 = (((fConst70 + -0.78241307f) / fConst69) + 0.2452915f); // step: 1007
		fConst116 = (2.0f * (0.2452915f - fConst92)); // step: 1011
		fConst117 = (0.0001f / fConst91); // step: 1018
		fConst118 = (fConst117 + 0.0004332272f); // step: 1019
		fConst119 = (2.0f * (0.0004332272f - fConst117)); // step: 1022
		fConst120 = (((fConst70 + -0.51247865f) / fConst69) + 0.6896214f); // step: 1031
		fConst121 = (2.0f * (0.6896214f - fConst92)); // step: 1035
		fConst122 = (fConst92 + 7.6217313f); // step: 1042
		fConst123 = (2.0f * (7.6217313f - fConst92)); // step: 1045
		fConst124 = (((fConst70 + -0.16840488f) / fConst69) + 1.0693583f); // step: 1054
		fConst125 = (2.0f * (1.0693583f - fConst92)); // step: 1058
		fConst126 = (fConst92 + 53.53615f); // step: 1065
		fConst127 = (2.0f * (53.53615f - fConst92)); // step: 1068
		fConst128 = (((fConst108 + -3.1897273f) / fConst107) + 4.0767817f); // step: 1077
		fConst129 = powf(fConst107,2.0f); // step: 1080
		fConst130 = (1.0f / fConst129); // step: 1081
		fConst131 = (2.0f * (4.0767817f - fConst130)); // step: 1083
		fConst132 = (0.0017661728f / fConst129); // step: 1090
		fConst133 = (fConst132 + 0.0004076782f); // step: 1091
		fConst134 = (2.0f * (0.0004076782f - fConst132)); // step: 1094
		fConst135 = (((fConst108 + -0.74313045f) / fConst107) + 1.4500711f); // step: 1103
		fConst136 = (2.0f * (1.4500711f - fConst130)); // step: 1107
		fConst137 = (11.0520525f / fConst129); // step: 1114
		fConst138 = (fConst137 + 1.4500711f); // step: 1115
		fConst139 = (2.0f * (1.4500711f - fConst137)); // step: 1118
		fConst140 = (((fConst108 + -0.15748216f) / fConst107) + 0.9351402f); // step: 1127
		fConst141 = (2.0f * (0.9351402f - fConst130)); // step: 1131
		fConst142 = (50.06381f / fConst129); // step: 1138
		fConst143 = (fConst142 + 0.9351402f); // step: 1139
		fConst144 = (2.0f * (0.9351402f - fConst142)); // step: 1142
		fConst145 = tanf((12566.371f / fConst0)); // step: 1162
		fConst146 = (1.0f / fConst145); // step: 1163
		fConst147 = (1.0f / (((fConst146 + 0.15748216f) / fConst145) + 0.9351402f)); // step: 1167
		fConst148 = (1.0f / (((fConst146 + 0.74313045f) / fConst145) + 1.4500711f)); // step: 1171
		fConst149 = (1.0f / (((fConst146 + 3.1897273f) / fConst145) + 4.0767817f)); // step: 1175
		fConst150 = (1.0f / (((fConst108 + 0.16840488f) / fConst107) + 1.0693583f)); // step: 1179
		fConst151 = (1.0f / (((fConst108 + 0.51247865f) / fConst107) + 0.6896214f)); // step: 1183
		fConst152 = (1.0f / (((fConst108 + 0.78241307f) / fConst107) + 0.2452915f)); // step: 1187
		fConst153 = (((fConst108 + -0.78241307f) / fConst107) + 0.2452915f); // step: 1191
		fConst154 = (2.0f * (0.2452915f - fConst130)); // step: 1195
		fConst155 = (0.0001f / fConst129); // step: 1202
		fConst156 = (fConst155 + 0.0004332272f); // step: 1203
		fConst157 = (2.0f * (0.0004332272f - fConst155)); // step: 1206
		fConst158 = (((fConst108 + -0.51247865f) / fConst107) + 0.6896214f); // step: 1215
		fConst159 = (2.0f * (0.6896214f - fConst130)); // step: 1219
		fConst160 = (fConst130 + 7.6217313f); // step: 1226
		fConst161 = (2.0f * (7.6217313f - fConst130)); // step: 1229
		fConst162 = (((fConst108 + -0.16840488f) / fConst107) + 1.0693583f); // step: 1238
		fConst163 = (2.0f * (1.0693583f - fConst130)); // step: 1242
		fConst164 = (fConst130 + 53.53615f); // step: 1249
		fConst165 = (2.0f * (53.53615f - fConst130)); // step: 1252
		fConst166 = (((fConst146 + -3.1897273f) / fConst145) + 4.0767817f); // step: 1261
		fConst167 = powf(fConst145,2.0f); // step: 1264
		fConst168 = (1.0f / fConst167); // step: 1265
		fConst169 = (2.0f * (4.0767817f - fConst168)); // step: 1267
		fConst170 = (0.0017661728f / fConst167); // step: 1274
		fConst171 = (fConst170 + 0.0004076782f); // step: 1275
		fConst172 = (2.0f * (0.0004076782f - fConst170)); // step: 1278
		fConst173 = (((fConst146 + -0.74313045f) / fConst145) + 1.4500711f); // step: 1287
		fConst174 = (2.0f * (1.4500711f - fConst168)); // step: 1291
		fConst175 = (11.0520525f / fConst167); // step: 1298
		fConst176 = (fConst175 + 1.4500711f); // step: 1299
		fConst177 = (2.0f * (1.4500711f - fConst175)); // step: 1302
		fConst178 = (((fConst146 + -0.15748216f) / fConst145) + 0.9351402f); // step: 1311
		fConst179 = (2.0f * (0.9351402f - fConst168)); // step: 1315
		fConst180 = (50.06381f / fConst167); // step: 1322
		fConst181 = (fConst180 + 0.9351402f); // step: 1323
		fConst182 = (2.0f * (0.9351402f - fConst180)); // step: 1326
		fConst183 = tanf((8885.766f / fConst0)); // step: 1346
		fConst184 = (1.0f / fConst183); // step: 1347
		fConst185 = (1.0f / (((fConst184 + 0.15748216f) / fConst183) + 0.9351402f)); // step: 1351
		fConst186 = (1.0f / (((fConst184 + 0.74313045f) / fConst183) + 1.4500711f)); // step: 1355
		fConst187 = (1.0f / (((fConst184 + 3.1897273f) / fConst183) + 4.0767817f)); // step: 1359
		fConst188 = (1.0f / (((fConst146 + 0.16840488f) / fConst145) + 1.0693583f)); // step: 1363
		fConst189 = (1.0f / (((fConst146 + 0.51247865f) / fConst145) + 0.6896214f)); // step: 1367
		fConst190 = (1.0f / (((fConst146 + 0.78241307f) / fConst145) + 0.2452915f)); // step: 1371
		fConst191 = (((fConst146 + -0.78241307f) / fConst145) + 0.2452915f); // step: 1375
		fConst192 = (2.0f * (0.2452915f - fConst168)); // step: 1379
		fConst193 = (0.0001f / fConst167); // step: 1386
		fConst194 = (fConst193 + 0.0004332272f); // step: 1387
		fConst195 = (2.0f * (0.0004332272f - fConst193)); // step: 1390
		fConst196 = (((fConst146 + -0.51247865f) / fConst145) + 0.6896214f); // step: 1399
		fConst197 = (2.0f * (0.6896214f - fConst168)); // step: 1403
		fConst198 = (fConst168 + 7.6217313f); // step: 1410
		fConst199 = (2.0f * (7.6217313f - fConst168)); // step: 1413
		fConst200 = (((fConst146 + -0.16840488f) / fConst145) + 1.0693583f); // step: 1422
		fConst201 = (2.0f * (1.0693583f - fConst168)); // step: 1426
		fConst202 = (fConst168 + 53.53615f); // step: 1433
		fConst203 = (2.0f * (53.53615f - fConst168)); // step: 1436
		fConst204 = (((fConst184 + -3.1897273f) / fConst183) + 4.0767817f); // step: 1445
		fConst205 = powf(fConst183,2.0f); // step: 1448
		fConst206 = (1.0f / fConst205); // step: 1449
		fConst207 = (2.0f * (4.0767817f - fConst206)); // step: 1451
		fConst208 = (0.0017661728f / fConst205); // step: 1458
		fConst209 = (fConst208 + 0.0004076782f); // step: 1459
		fConst210 = (2.0f * (0.0004076782f - fConst208)); // step: 1462
		fConst211 = (((fConst184 + -0.74313045f) / fConst183) + 1.4500711f); // step: 1471
		fConst212 = (2.0f * (1.4500711f - fConst206)); // step: 1475
		fConst213 = (11.0520525f / fConst205); // step: 1482
		fConst214 = (fConst213 + 1.4500711f); // step: 1483
		fConst215 = (2.0f * (1.4500711f - fConst213)); // step: 1486
		fConst216 = (((fConst184 + -0.15748216f) / fConst183) + 0.9351402f); // step: 1495
		fConst217 = (2.0f * (0.9351402f - fConst206)); // step: 1499
		fConst218 = (50.06381f / fConst205); // step: 1506
		fConst219 = (fConst218 + 0.9351402f); // step: 1507
		fConst220 = (2.0f * (0.9351402f - fConst218)); // step: 1510
		fConst221 = tanf((6283.1855f / fConst0)); // step: 1530
		fConst222 = (1.0f / fConst221); // step: 1531
		fConst223 = (1.0f / (((fConst222 + 0.15748216f) / fConst221) + 0.9351402f)); // step: 1535
		fConst224 = (1.0f / (((fConst222 + 0.74313045f) / fConst221) + 1.4500711f)); // step: 1539
		fConst225 = (1.0f / (((fConst222 + 3.1897273f) / fConst221) + 4.0767817f)); // step: 1543
		fConst226 = (1.0f / (((fConst184 + 0.16840488f) / fConst183) + 1.0693583f)); // step: 1547
		fConst227 = (1.0f / (((fConst184 + 0.51247865f) / fConst183) + 0.6896214f)); // step: 1551
		fConst228 = (1.0f / (((fConst184 + 0.78241307f) / fConst183) + 0.2452915f)); // step: 1555
		fConst229 = (((fConst184 + -0.78241307f) / fConst183) + 0.2452915f); // step: 1559
		fConst230 = (2.0f * (0.2452915f - fConst206)); // step: 1563
		fConst231 = (0.0001f / fConst205); // step: 1570
		fConst232 = (fConst231 + 0.0004332272f); // step: 1571
		fConst233 = (2.0f * (0.0004332272f - fConst231)); // step: 1574
		fConst234 = (((fConst184 + -0.51247865f) / fConst183) + 0.6896214f); // step: 1583
		fConst235 = (2.0f * (0.6896214f - fConst206)); // step: 1587
		fConst236 = (fConst206 + 7.6217313f); // step: 1594
		fConst237 = (2.0f * (7.6217313f - fConst206)); // step: 1597
		fConst238 = (((fConst184 + -0.16840488f) / fConst183) + 1.0693583f); // step: 1606
		fConst239 = (2.0f * (1.0693583f - fConst206)); // step: 1610
		fConst240 = (fConst206 + 53.53615f); // step: 1617
		fConst241 = (2.0f * (53.53615f - fConst206)); // step: 1620
		fConst242 = (((fConst222 + -3.1897273f) / fConst221) + 4.0767817f); // step: 1629
		fConst243 = powf(fConst221,2.0f); // step: 1632
		fConst244 = (1.0f / fConst243); // step: 1633
		fConst245 = (2.0f * (4.0767817f - fConst244)); // step: 1635
		fConst246 = (0.0017661728f / fConst243); // step: 1642
		fConst247 = (fConst246 + 0.0004076782f); // step: 1643
		fConst248 = (2.0f * (0.0004076782f - fConst246)); // step: 1646
		fConst249 = (((fConst222 + -0.74313045f) / fConst221) + 1.4500711f); // step: 1655
		fConst250 = (2.0f * (1.4500711f - fConst244)); // step: 1659
		fConst251 = (11.0520525f / fConst243); // step: 1666
		fConst252 = (fConst251 + 1.4500711f); // step: 1667
		fConst253 = (2.0f * (1.4500711f - fConst251)); // step: 1670
		fConst254 = (((fConst222 + -0.15748216f) / fConst221) + 0.9351402f); // step: 1679
		fConst255 = (2.0f * (0.9351402f - fConst244)); // step: 1683
		fConst256 = (50.06381f / fConst243); // step: 1690
		fConst257 = (fConst256 + 0.9351402f); // step: 1691
		fConst258 = (2.0f * (0.9351402f - fConst256)); // step: 1694
		fConst259 = tanf((4442.883f / fConst0)); // step: 1714
		fConst260 = (1.0f / fConst259); // step: 1715
		fConst261 = (1.0f / (((fConst260 + 0.15748216f) / fConst259) + 0.9351402f)); // step: 1719
		fConst262 = (1.0f / (((fConst260 + 0.74313045f) / fConst259) + 1.4500711f)); // step: 1723
		fConst263 = (1.0f / (((fConst260 + 3.1897273f) / fConst259) + 4.0767817f)); // step: 1727
		fConst264 = (1.0f / (((fConst222 + 0.16840488f) / fConst221) + 1.0693583f)); // step: 1731
		fConst265 = (1.0f / (((fConst222 + 0.51247865f) / fConst221) + 0.6896214f)); // step: 1735
		fConst266 = (1.0f / (((fConst222 + 0.78241307f) / fConst221) + 0.2452915f)); // step: 1739
		fConst267 = (((fConst222 + -0.78241307f) / fConst221) + 0.2452915f); // step: 1743
		fConst268 = (2.0f * (0.2452915f - fConst244)); // step: 1747
		fConst269 = (0.0001f / fConst243); // step: 1754
		fConst270 = (fConst269 + 0.0004332272f); // step: 1755
		fConst271 = (2.0f * (0.0004332272f - fConst269)); // step: 1758
		fConst272 = (((fConst222 + -0.51247865f) / fConst221) + 0.6896214f); // step: 1767
		fConst273 = (2.0f * (0.6896214f - fConst244)); // step: 1771
		fConst274 = (fConst244 + 7.6217313f); // step: 1778
		fConst275 = (2.0f * (7.6217313f - fConst244)); // step: 1781
		fConst276 = (((fConst222 + -0.16840488f) / fConst221) + 1.0693583f); // step: 1790
		fConst277 = (2.0f * (1.0693583f - fConst244)); // step: 1794
		fConst278 = (fConst244 + 53.53615f); // step: 1801
		fConst279 = (2.0f * (53.53615f - fConst244)); // step: 1804
		fConst280 = (((fConst260 + -3.1897273f) / fConst259) + 4.0767817f); // step: 1813
		fConst281 = powf(fConst259,2.0f); // step: 1816
		fConst282 = (1.0f / fConst281); // step: 1817
		fConst283 = (2.0f * (4.0767817f - fConst282)); // step: 1819
		fConst284 = (0.0017661728f / fConst281); // step: 1826
		fConst285 = (fConst284 + 0.0004076782f); // step: 1827
		fConst286 = (2.0f * (0.0004076782f - fConst284)); // step: 1830
		fConst287 = (((fConst260 + -0.74313045f) / fConst259) + 1.4500711f); // step: 1839
		fConst288 = (2.0f * (1.4500711f - fConst282)); // step: 1843
		fConst289 = (11.0520525f / fConst281); // step: 1850
		fConst290 = (fConst289 + 1.4500711f); // step: 1851
		fConst291 = (2.0f * (1.4500711f - fConst289)); // step: 1854
		fConst292 = (((fConst260 + -0.15748216f) / fConst259) + 0.9351402f); // step: 1863
		fConst293 = (2.0f * (0.9351402f - fConst282)); // step: 1867
		fConst294 = (50.06381f / fConst281); // step: 1874
		fConst295 = (fConst294 + 0.9351402f); // step: 1875
		fConst296 = (2.0f * (0.9351402f - fConst294)); // step: 1878
		fConst297 = tanf((3141.5928f / fConst0)); // step: 1898
		fConst298 = (1.0f / fConst297); // step: 1899
		fConst299 = (1.0f / (((fConst298 + 0.15748216f) / fConst297) + 0.9351402f)); // step: 1903
		fConst300 = (1.0f / (((fConst298 + 0.74313045f) / fConst297) + 1.4500711f)); // step: 1907
		fConst301 = (1.0f / (((fConst298 + 3.1897273f) / fConst297) + 4.0767817f)); // step: 1911
		fConst302 = (1.0f / (((fConst260 + 0.16840488f) / fConst259) + 1.0693583f)); // step: 1915
		fConst303 = (1.0f / (((fConst260 + 0.51247865f) / fConst259) + 0.6896214f)); // step: 1919
		fConst304 = (1.0f / (((fConst260 + 0.78241307f) / fConst259) + 0.2452915f)); // step: 1923
		fConst305 = (((fConst260 + -0.78241307f) / fConst259) + 0.2452915f); // step: 1927
		fConst306 = (2.0f * (0.2452915f - fConst282)); // step: 1931
		fConst307 = (0.0001f / fConst281); // step: 1938
		fConst308 = (fConst307 + 0.0004332272f); // step: 1939
		fConst309 = (2.0f * (0.0004332272f - fConst307)); // step: 1942
		fConst310 = (((fConst260 + -0.51247865f) / fConst259) + 0.6896214f); // step: 1951
		fConst311 = (2.0f * (0.6896214f - fConst282)); // step: 1955
		fConst312 = (fConst282 + 7.6217313f); // step: 1962
		fConst313 = (2.0f * (7.6217313f - fConst282)); // step: 1965
		fConst314 = (((fConst260 + -0.16840488f) / fConst259) + 1.0693583f); // step: 1974
		fConst315 = (2.0f * (1.0693583f - fConst282)); // step: 1978
		fConst316 = (fConst282 + 53.53615f); // step: 1985
		fConst317 = (2.0f * (53.53615f - fConst282)); // step: 1988
		fConst318 = (((fConst298 + -3.1897273f) / fConst297) + 4.0767817f); // step: 1997
		fConst319 = powf(fConst297,2.0f); // step: 2000
		fConst320 = (1.0f / fConst319); // step: 2001
		fConst321 = (2.0f * (4.0767817f - fConst320)); // step: 2003
		fConst322 = (0.0017661728f / fConst319); // step: 2010
		fConst323 = (fConst322 + 0.0004076782f); // step: 2011
		fConst324 = (2.0f * (0.0004076782f - fConst322)); // step: 2014
		fConst325 = (((fConst298 + -0.74313045f) / fConst297) + 1.4500711f); // step: 2023
		fConst326 = (2.0f * (1.4500711f - fConst320)); // step: 2027
		fConst327 = (11.0520525f / fConst319); // step: 2034
		fConst328 = (fConst327 + 1.4500711f); // step: 2035
		fConst329 = (2.0f * (1.4500711f - fConst327)); // step: 2038
		fConst330 = (((fConst298 + -0.15748216f) / fConst297) + 0.9351402f); // step: 2047
		fConst331 = (2.0f * (0.9351402f - fConst320)); // step: 2051
		fConst332 = (50.06381f / fConst319); // step: 2058
		fConst333 = (fConst332 + 0.9351402f); // step: 2059
		fConst334 = (2.0f * (0.9351402f - fConst332)); // step: 2062
		fConst335 = tanf((2221.4414f / fConst0)); // step: 2082
		fConst336 = (1.0f / fConst335); // step: 2083
		fConst337 = (1.0f / (((fConst336 + 0.15748216f) / fConst335) + 0.9351402f)); // step: 2087
		fConst338 = (1.0f / (((fConst336 + 0.74313045f) / fConst335) + 1.4500711f)); // step: 2091
		fConst339 = (1.0f / (((fConst336 + 3.1897273f) / fConst335) + 4.0767817f)); // step: 2095
		fConst340 = (1.0f / (((fConst298 + 0.16840488f) / fConst297) + 1.0693583f)); // step: 2099
		fConst341 = (1.0f / (((fConst298 + 0.51247865f) / fConst297) + 0.6896214f)); // step: 2103
		fConst342 = (1.0f / (((fConst298 + 0.78241307f) / fConst297) + 0.2452915f)); // step: 2107
		fConst343 = (((fConst298 + -0.78241307f) / fConst297) + 0.2452915f); // step: 2111
		fConst344 = (2.0f * (0.2452915f - fConst320)); // step: 2115
		fConst345 = (0.0001f / fConst319); // step: 2122
		fConst346 = (fConst345 + 0.0004332272f); // step: 2123
		fConst347 = (2.0f * (0.0004332272f - fConst345)); // step: 2126
		fConst348 = (((fConst298 + -0.51247865f) / fConst297) + 0.6896214f); // step: 2135
		fConst349 = (2.0f * (0.6896214f - fConst320)); // step: 2139
		fConst350 = (fConst320 + 7.6217313f); // step: 2146
		fConst351 = (2.0f * (7.6217313f - fConst320)); // step: 2149
		fConst352 = (((fConst298 + -0.16840488f) / fConst297) + 1.0693583f); // step: 2158
		fConst353 = (2.0f * (1.0693583f - fConst320)); // step: 2162
		fConst354 = (fConst320 + 53.53615f); // step: 2169
		fConst355 = (2.0f * (53.53615f - fConst320)); // step: 2172
		fConst356 = (((fConst336 + -3.1897273f) / fConst335) + 4.0767817f); // step: 2181
		fConst357 = powf(fConst335,2.0f); // step: 2184
		fConst358 = (1.0f / fConst357); // step: 2185
		fConst359 = (2.0f * (4.0767817f - fConst358)); // step: 2187
		fConst360 = (0.0017661728f / fConst357); // step: 2194
		fConst361 = (fConst360 + 0.0004076782f); // step: 2195
		fConst362 = (2.0f * (0.0004076782f - fConst360)); // step: 2198
		fConst363 = (((fConst336 + -0.74313045f) / fConst335) + 1.4500711f); // step: 2207
		fConst364 = (2.0f * (1.4500711f - fConst358)); // step: 2211
		fConst365 = (11.0520525f / fConst357); // step: 2218
		fConst366 = (fConst365 + 1.4500711f); // step: 2219
		fConst367 = (2.0f * (1.4500711f - fConst365)); // step: 2222
		fConst368 = (((fConst336 + -0.15748216f) / fConst335) + 0.9351402f); // step: 2231
		fConst369 = (2.0f * (0.9351402f - fConst358)); // step: 2235
		fConst370 = (50.06381f / fConst357); // step: 2242
		fConst371 = (fConst370 + 0.9351402f); // step: 2243
		fConst372 = (2.0f * (0.9351402f - fConst370)); // step: 2246
		fConst373 = tanf((1570.7964f / fConst0)); // step: 2266
		fConst374 = (1.0f / fConst373); // step: 2267
		fConst375 = (1.0f / (((fConst374 + 0.15748216f) / fConst373) + 0.9351402f)); // step: 2271
		fConst376 = (1.0f / (((fConst374 + 0.74313045f) / fConst373) + 1.4500711f)); // step: 2275
		fConst377 = (1.0f / (((fConst374 + 3.1897273f) / fConst373) + 4.0767817f)); // step: 2279
		fConst378 = (1.0f / (((fConst336 + 0.16840488f) / fConst335) + 1.0693583f)); // step: 2283
		fConst379 = (1.0f / (((fConst336 + 0.51247865f) / fConst335) + 0.6896214f)); // step: 2287
		fConst380 = (1.0f / (((fConst336 + 0.78241307f) / fConst335) + 0.2452915f)); // step: 2291
		fConst381 = (((fConst336 + -0.78241307f) / fConst335) + 0.2452915f); // step: 2295
		fConst382 = (2.0f * (0.2452915f - fConst358)); // step: 2299
		fConst383 = (0.0001f / fConst357); // step: 2306
		fConst384 = (fConst383 + 0.0004332272f); // step: 2307
		fConst385 = (2.0f * (0.0004332272f - fConst383)); // step: 2310
		fConst386 = (((fConst336 + -0.51247865f) / fConst335) + 0.6896214f); // step: 2319
		fConst387 = (2.0f * (0.6896214f - fConst358)); // step: 2323
		fConst388 = (fConst358 + 7.6217313f); // step: 2330
		fConst389 = (2.0f * (7.6217313f - fConst358)); // step: 2333
		fConst390 = (((fConst336 + -0.16840488f) / fConst335) + 1.0693583f); // step: 2342
		fConst391 = (2.0f * (1.0693583f - fConst358)); // step: 2346
		fConst392 = (fConst358 + 53.53615f); // step: 2353
		fConst393 = (2.0f * (53.53615f - fConst358)); // step: 2356
		fConst394 = (((fConst374 + -3.1897273f) / fConst373) + 4.0767817f); // step: 2365
		fConst395 = powf(fConst373,2.0f); // step: 2368
		fConst396 = (1.0f / fConst395); // step: 2369
		fConst397 = (2.0f * (4.0767817f - fConst396)); // step: 2371
		fConst398 = (0.0017661728f / fConst395); // step: 2378
		fConst399 = (fConst398 + 0.0004076782f); // step: 2379
		fConst400 = (2.0f * (0.0004076782f - fConst398)); // step: 2382
		fConst401 = (((fConst374 + -0.74313045f) / fConst373) + 1.4500711f); // step: 2391
		fConst402 = (2.0f * (1.4500711f - fConst396)); // step: 2395
		fConst403 = (11.0520525f / fConst395); // step: 2402
		fConst404 = (fConst403 + 1.4500711f); // step: 2403
		fConst405 = (2.0f * (1.4500711f - fConst403)); // step: 2406
		fConst406 = (((fConst374 + -0.15748216f) / fConst373) + 0.9351402f); // step: 2415
		fConst407 = (2.0f * (0.9351402f - fConst396)); // step: 2419
		fConst408 = (50.06381f / fConst395); // step: 2426
		fConst409 = (fConst408 + 0.9351402f); // step: 2427
		fConst410 = (2.0f * (0.9351402f - fConst408)); // step: 2430
		fConst411 = tanf((1110.7207f / fConst0)); // step: 2450
		fConst412 = (1.0f / fConst411); // step: 2451
		fConst413 = (1.0f / (((fConst412 + 0.15748216f) / fConst411) + 0.9351402f)); // step: 2455
		fConst414 = (1.0f / (((fConst412 + 0.74313045f) / fConst411) + 1.4500711f)); // step: 2459
		fConst415 = (1.0f / (((fConst412 + 3.1897273f) / fConst411) + 4.0767817f)); // step: 2463
		fConst416 = (1.0f / (((fConst374 + 0.16840488f) / fConst373) + 1.0693583f)); // step: 2467
		fConst417 = (1.0f / (((fConst374 + 0.51247865f) / fConst373) + 0.6896214f)); // step: 2471
		fConst418 = (1.0f / (((fConst374 + 0.78241307f) / fConst373) + 0.2452915f)); // step: 2475
		fConst419 = (((fConst374 + -0.78241307f) / fConst373) + 0.2452915f); // step: 2479
		fConst420 = (2.0f * (0.2452915f - fConst396)); // step: 2483
		fConst421 = (0.0001f / fConst395); // step: 2490
		fConst422 = (fConst421 + 0.0004332272f); // step: 2491
		fConst423 = (2.0f * (0.0004332272f - fConst421)); // step: 2494
		fConst424 = (((fConst374 + -0.51247865f) / fConst373) + 0.6896214f); // step: 2503
		fConst425 = (2.0f * (0.6896214f - fConst396)); // step: 2507
		fConst426 = (fConst396 + 7.6217313f); // step: 2514
		fConst427 = (2.0f * (7.6217313f - fConst396)); // step: 2517
		fConst428 = (((fConst374 + -0.16840488f) / fConst373) + 1.0693583f); // step: 2526
		fConst429 = (2.0f * (1.0693583f - fConst396)); // step: 2530
		fConst430 = (fConst396 + 53.53615f); // step: 2537
		fConst431 = (2.0f * (53.53615f - fConst396)); // step: 2540
		fConst432 = (((fConst412 + -3.1897273f) / fConst411) + 4.0767817f); // step: 2549
		fConst433 = powf(fConst411,2.0f); // step: 2552
		fConst434 = (1.0f / fConst433); // step: 2553
		fConst435 = (2.0f * (4.0767817f - fConst434)); // step: 2555
		fConst436 = (0.0017661728f / fConst433); // step: 2562
		fConst437 = (fConst436 + 0.0004076782f); // step: 2563
		fConst438 = (2.0f * (0.0004076782f - fConst436)); // step: 2566
		fConst439 = (((fConst412 + -0.74313045f) / fConst411) + 1.4500711f); // step: 2575
		fConst440 = (2.0f * (1.4500711f - fConst434)); // step: 2579
		fConst441 = (11.0520525f / fConst433); // step: 2586
		fConst442 = (fConst441 + 1.4500711f); // step: 2587
		fConst443 = (2.0f * (1.4500711f - fConst441)); // step: 2590
		fConst444 = (((fConst412 + -0.15748216f) / fConst411) + 0.9351402f); // step: 2599
		fConst445 = (2.0f * (0.9351402f - fConst434)); // step: 2603
		fConst446 = (50.06381f / fConst433); // step: 2610
		fConst447 = (fConst446 + 0.9351402f); // step: 2611
		fConst448 = (2.0f * (0.9351402f - fConst446)); // step: 2614
		fConst449 = tanf((785.3982f / fConst0)); // step: 2634
		fConst450 = (1.0f / fConst449); // step: 2635
		fConst451 = (1.0f / (((fConst450 + 0.15748216f) / fConst449) + 0.9351402f)); // step: 2639
		fConst452 = (1.0f / (((fConst450 + 0.74313045f) / fConst449) + 1.4500711f)); // step: 2643
		fConst453 = (1.0f / (((fConst450 + 3.1897273f) / fConst449) + 4.0767817f)); // step: 2647
		fConst454 = (1.0f / (((fConst412 + 0.16840488f) / fConst411) + 1.0693583f)); // step: 2651
		fConst455 = (1.0f / (((fConst412 + 0.51247865f) / fConst411) + 0.6896214f)); // step: 2655
		fConst456 = (1.0f / (((fConst412 + 0.78241307f) / fConst411) + 0.2452915f)); // step: 2659
		fConst457 = (((fConst412 + -0.78241307f) / fConst411) + 0.2452915f); // step: 2663
		fConst458 = (2.0f * (0.2452915f - fConst434)); // step: 2667
		fConst459 = (0.0001f / fConst433); // step: 2674
		fConst460 = (fConst459 + 0.0004332272f); // step: 2675
		fConst461 = (2.0f * (0.0004332272f - fConst459)); // step: 2678
		fConst462 = (((fConst412 + -0.51247865f) / fConst411) + 0.6896214f); // step: 2687
		fConst463 = (2.0f * (0.6896214f - fConst434)); // step: 2691
		fConst464 = (fConst434 + 7.6217313f); // step: 2698
		fConst465 = (2.0f * (7.6217313f - fConst434)); // step: 2701
		fConst466 = (((fConst412 + -0.16840488f) / fConst411) + 1.0693583f); // step: 2710
		fConst467 = (2.0f * (1.0693583f - fConst434)); // step: 2714
		fConst468 = (fConst434 + 53.53615f); // step: 2721
		fConst469 = (2.0f * (53.53615f - fConst434)); // step: 2724
		fConst470 = (((fConst450 + -3.1897273f) / fConst449) + 4.0767817f); // step: 2733
		fConst471 = powf(fConst449,2.0f); // step: 2736
		fConst472 = (1.0f / fConst471); // step: 2737
		fConst473 = (2.0f * (4.0767817f - fConst472)); // step: 2739
		fConst474 = (0.0017661728f / fConst471); // step: 2746
		fConst475 = (fConst474 + 0.0004076782f); // step: 2747
		fConst476 = (2.0f * (0.0004076782f - fConst474)); // step: 2750
		fConst477 = (((fConst450 + -0.74313045f) / fConst449) + 1.4500711f); // step: 2759
		fConst478 = (2.0f * (1.4500711f - fConst472)); // step: 2763
		fConst479 = (11.0520525f / fConst471); // step: 2770
		fConst480 = (fConst479 + 1.4500711f); // step: 2771
		fConst481 = (2.0f * (1.4500711f - fConst479)); // step: 2774
		fConst482 = (((fConst450 + -0.15748216f) / fConst449) + 0.9351402f); // step: 2783
		fConst483 = (2.0f * (0.9351402f - fConst472)); // step: 2787
		fConst484 = (50.06381f / fConst471); // step: 2794
		fConst485 = (fConst484 + 0.9351402f); // step: 2795
		fConst486 = (2.0f * (0.9351402f - fConst484)); // step: 2798
		fConst487 = tanf((555.36035f / fConst0)); // step: 2818
		fConst488 = (1.0f / fConst487); // step: 2819
		fConst489 = (1.0f / (((fConst488 + 0.15748216f) / fConst487) + 0.9351402f)); // step: 2823
		fConst490 = (1.0f / (((fConst488 + 0.74313045f) / fConst487) + 1.4500711f)); // step: 2827
		fConst491 = (1.0f / (((fConst488 + 3.1897273f) / fConst487) + 4.0767817f)); // step: 2831
		fConst492 = (1.0f / (((fConst450 + 0.16840488f) / fConst449) + 1.0693583f)); // step: 2835
		fConst493 = (1.0f / (((fConst450 + 0.51247865f) / fConst449) + 0.6896214f)); // step: 2839
		fConst494 = (1.0f / (((fConst450 + 0.78241307f) / fConst449) + 0.2452915f)); // step: 2843
		fConst495 = (((fConst450 + -0.78241307f) / fConst449) + 0.2452915f); // step: 2847
		fConst496 = (2.0f * (0.2452915f - fConst472)); // step: 2851
		fConst497 = (0.0001f / fConst471); // step: 2858
		fConst498 = (fConst497 + 0.0004332272f); // step: 2859
		fConst499 = (2.0f * (0.0004332272f - fConst497)); // step: 2862
		fConst500 = (((fConst450 + -0.51247865f) / fConst449) + 0.6896214f); // step: 2871
		fConst501 = (2.0f * (0.6896214f - fConst472)); // step: 2875
		fConst502 = (fConst472 + 7.6217313f); // step: 2882
		fConst503 = (2.0f * (7.6217313f - fConst472)); // step: 2885
		fConst504 = (((fConst450 + -0.16840488f) / fConst449) + 1.0693583f); // step: 2894
		fConst505 = (2.0f * (1.0693583f - fConst472)); // step: 2898
		fConst506 = (fConst472 + 53.53615f); // step: 2905
		fConst507 = (2.0f * (53.53615f - fConst472)); // step: 2908
		fConst508 = (((fConst488 + -3.1897273f) / fConst487) + 4.0767817f); // step: 2917
		fConst509 = powf(fConst487,2.0f); // step: 2920
		fConst510 = (1.0f / fConst509); // step: 2921
		fConst511 = (2.0f * (4.0767817f - fConst510)); // step: 2923
		fConst512 = (0.0017661728f / fConst509); // step: 2930
		fConst513 = (fConst512 + 0.0004076782f); // step: 2931
		fConst514 = (2.0f * (0.0004076782f - fConst512)); // step: 2934
		fConst515 = (((fConst488 + -0.74313045f) / fConst487) + 1.4500711f); // step: 2943
		fConst516 = (2.0f * (1.4500711f - fConst510)); // step: 2947
		fConst517 = (11.0520525f / fConst509); // step: 2954
		fConst518 = (fConst517 + 1.4500711f); // step: 2955
		fConst519 = (2.0f * (1.4500711f - fConst517)); // step: 2958
		fConst520 = (((fConst488 + -0.15748216f) / fConst487) + 0.9351402f); // step: 2967
		fConst521 = (2.0f * (0.9351402f - fConst510)); // step: 2971
		fConst522 = (50.06381f / fConst509); // step: 2978
		fConst523 = (fConst522 + 0.9351402f); // step: 2979
		fConst524 = (2.0f * (0.9351402f - fConst522)); // step: 2982
		fConst525 = tanf((392.6991f / fConst0)); // step: 3002
		fConst526 = (1.0f / fConst525); // step: 3003
		fConst527 = (1.0f / (((fConst526 + 0.15748216f) / fConst525) + 0.9351402f)); // step: 3007
		fConst528 = (1.0f / (((fConst526 + 0.74313045f) / fConst525) + 1.4500711f)); // step: 3011
		fConst529 = (1.0f / (((fConst526 + 3.1897273f) / fConst525) + 4.0767817f)); // step: 3015
		fConst530 = (1.0f / (((fConst488 + 0.16840488f) / fConst487) + 1.0693583f)); // step: 3019
		fConst531 = (1.0f / (((fConst488 + 0.51247865f) / fConst487) + 0.6896214f)); // step: 3023
		fConst532 = (1.0f / (((fConst488 + 0.78241307f) / fConst487) + 0.2452915f)); // step: 3027
		fConst533 = (((fConst488 + -0.78241307f) / fConst487) + 0.2452915f); // step: 3031
		fConst534 = (2.0f * (0.2452915f - fConst510)); // step: 3035
		fConst535 = (0.0001f / fConst509); // step: 3042
		fConst536 = (fConst535 + 0.0004332272f); // step: 3043
		fConst537 = (2.0f * (0.0004332272f - fConst535)); // step: 3046
		fConst538 = (((fConst488 + -0.51247865f) / fConst487) + 0.6896214f); // step: 3055
		fConst539 = (2.0f * (0.6896214f - fConst510)); // step: 3059
		fConst540 = (fConst510 + 7.6217313f); // step: 3066
		fConst541 = (2.0f * (7.6217313f - fConst510)); // step: 3069
		fConst542 = (((fConst488 + -0.16840488f) / fConst487) + 1.0693583f); // step: 3078
		fConst543 = (2.0f * (1.0693583f - fConst510)); // step: 3082
		fConst544 = (fConst510 + 53.53615f); // step: 3089
		fConst545 = (2.0f * (53.53615f - fConst510)); // step: 3092
		fConst546 = (((fConst526 + -3.1897273f) / fConst525) + 4.0767817f); // step: 3101
		fConst547 = powf(fConst525,2.0f); // step: 3104
		fConst548 = (1.0f / fConst547); // step: 3105
		fConst549 = (2.0f * (4.0767817f - fConst548)); // step: 3107
		fConst550 = (0.0017661728f / fConst547); // step: 3114
		fConst551 = (fConst550 + 0.0004076782f); // step: 3115
		fConst552 = (2.0f * (0.0004076782f - fConst550)); // step: 3118
		fConst553 = (((fConst526 + -0.74313045f) / fConst525) + 1.4500711f); // step: 3127
		fConst554 = (2.0f * (1.4500711f - fConst548)); // step: 3131
		fConst555 = (11.0520525f / fConst547); // step: 3138
		fConst556 = (fConst555 + 1.4500711f); // step: 3139
		fConst557 = (2.0f * (1.4500711f - fConst555)); // step: 3142
		fConst558 = (((fConst526 + -0.15748216f) / fConst525) + 0.9351402f); // step: 3151
		fConst559 = (2.0f * (0.9351402f - fConst548)); // step: 3155
		fConst560 = (50.06381f / fConst547); // step: 3162
		fConst561 = (fConst560 + 0.9351402f); // step: 3163
		fConst562 = (2.0f * (0.9351402f - fConst560)); // step: 3166
		fConst563 = tanf((277.68018f / fConst0)); // step: 3186
		fConst564 = (1.0f / fConst563); // step: 3187
		fConst565 = (1.0f / (((fConst564 + 0.15748216f) / fConst563) + 0.9351402f)); // step: 3191
		fConst566 = (1.0f / (((fConst564 + 0.74313045f) / fConst563) + 1.4500711f)); // step: 3195
		fConst567 = (1.0f / (((fConst564 + 3.1897273f) / fConst563) + 4.0767817f)); // step: 3199
		fConst568 = (1.0f / (((fConst526 + 0.16840488f) / fConst525) + 1.0693583f)); // step: 3203
		fConst569 = (1.0f / (((fConst526 + 0.51247865f) / fConst525) + 0.6896214f)); // step: 3207
		fConst570 = (1.0f / (((fConst526 + 0.78241307f) / fConst525) + 0.2452915f)); // step: 3211
		fConst571 = (((fConst526 + -0.78241307f) / fConst525) + 0.2452915f); // step: 3215
		fConst572 = (2.0f * (0.2452915f - fConst548)); // step: 3219
		fConst573 = (0.0001f / fConst547); // step: 3226
		fConst574 = (fConst573 + 0.0004332272f); // step: 3227
		fConst575 = (2.0f * (0.0004332272f - fConst573)); // step: 3230
		fConst576 = (((fConst526 + -0.51247865f) / fConst525) + 0.6896214f); // step: 3239
		fConst577 = (2.0f * (0.6896214f - fConst548)); // step: 3243
		fConst578 = (fConst548 + 7.6217313f); // step: 3250
		fConst579 = (2.0f * (7.6217313f - fConst548)); // step: 3253
		fConst580 = (((fConst526 + -0.16840488f) / fConst525) + 1.0693583f); // step: 3262
		fConst581 = (2.0f * (1.0693583f - fConst548)); // step: 3266
		fConst582 = (fConst548 + 53.53615f); // step: 3273
		fConst583 = (2.0f * (53.53615f - fConst548)); // step: 3276
		fConst584 = (((fConst564 + -3.1897273f) / fConst563) + 4.0767817f); // step: 3285
		fConst585 = powf(fConst563,2.0f); // step: 3288
		fConst586 = (1.0f / fConst585); // step: 3289
		fConst587 = (2.0f * (4.0767817f - fConst586)); // step: 3291
		fConst588 = (0.0017661728f / fConst585); // step: 3298
		fConst589 = (fConst588 + 0.0004076782f); // step: 3299
		fConst590 = (2.0f * (0.0004076782f - fConst588)); // step: 3302
		fConst591 = (((fConst564 + -0.74313045f) / fConst563) + 1.4500711f); // step: 3311
		fConst592 = (2.0f * (1.4500711f - fConst586)); // step: 3315
		fConst593 = (11.0520525f / fConst585); // step: 3322
		fConst594 = (fConst593 + 1.4500711f); // step: 3323
		fConst595 = (2.0f * (1.4500711f - fConst593)); // step: 3326
		fConst596 = (((fConst564 + -0.15748216f) / fConst563) + 0.9351402f); // step: 3335
		fConst597 = (2.0f * (0.9351402f - fConst586)); // step: 3339
		fConst598 = (50.06381f / fConst585); // step: 3346
		fConst599 = (fConst598 + 0.9351402f); // step: 3347
		fConst600 = (2.0f * (0.9351402f - fConst598)); // step: 3350
		fConst601 = tanf((196.34955f / fConst0)); // step: 3370
		fConst602 = (1.0f / fConst601); // step: 3371
		fConst603 = (1.0f / (((fConst602 + 0.15748216f) / fConst601) + 0.9351402f)); // step: 3375
		fConst604 = (1.0f / (((fConst602 + 0.74313045f) / fConst601) + 1.4500711f)); // step: 3379
		fConst605 = (1.0f / (((fConst602 + 3.1897273f) / fConst601) + 4.0767817f)); // step: 3383
		fConst606 = (1.0f / (((fConst564 + 0.16840488f) / fConst563) + 1.0693583f)); // step: 3387
		fConst607 = (1.0f / (((fConst564 + 0.51247865f) / fConst563) + 0.6896214f)); // step: 3391
		fConst608 = (1.0f / (((fConst564 + 0.78241307f) / fConst563) + 0.2452915f)); // step: 3395
		fConst609 = (((fConst564 + -0.78241307f) / fConst563) + 0.2452915f); // step: 3399
		fConst610 = (2.0f * (0.2452915f - fConst586)); // step: 3403
		fConst611 = (0.0001f / fConst585); // step: 3410
		fConst612 = (fConst611 + 0.0004332272f); // step: 3411
		fConst613 = (2.0f * (0.0004332272f - fConst611)); // step: 3414
		fConst614 = (((fConst564 + -0.51247865f) / fConst563) + 0.6896214f); // step: 3423
		fConst615 = (2.0f * (0.6896214f - fConst586)); // step: 3427
		fConst616 = (fConst586 + 7.6217313f); // step: 3434
		fConst617 = (2.0f * (7.6217313f - fConst586)); // step: 3437
		fConst618 = (((fConst564 + -0.16840488f) / fConst563) + 1.0693583f); // step: 3446
		fConst619 = (2.0f * (1.0693583f - fConst586)); // step: 3450
		fConst620 = (fConst586 + 53.53615f); // step: 3457
		fConst621 = (2.0f * (53.53615f - fConst586)); // step: 3460
		fConst622 = (((fConst602 + -3.1897273f) / fConst601) + 4.0767817f); // step: 3469
		fConst623 = powf(fConst601,2.0f); // step: 3472
		fConst624 = (1.0f / fConst623); // step: 3473
		fConst625 = (2.0f * (4.0767817f - fConst624)); // step: 3475
		fConst626 = (0.0017661728f / fConst623); // step: 3482
		fConst627 = (fConst626 + 0.0004076782f); // step: 3483
		fConst628 = (2.0f * (0.0004076782f - fConst626)); // step: 3486
		fConst629 = (((fConst602 + -0.74313045f) / fConst601) + 1.4500711f); // step: 3495
		fConst630 = (2.0f * (1.4500711f - fConst624)); // step: 3499
		fConst631 = (11.0520525f / fConst623); // step: 3506
		fConst632 = (fConst631 + 1.4500711f); // step: 3507
		fConst633 = (2.0f * (1.4500711f - fConst631)); // step: 3510
		fConst634 = (((fConst602 + -0.15748216f) / fConst601) + 0.9351402f); // step: 3519
		fConst635 = (2.0f * (0.9351402f - fConst624)); // step: 3523
		fConst636 = (50.06381f / fConst623); // step: 3530
		fConst637 = (fConst636 + 0.9351402f); // step: 3531
		fConst638 = (2.0f * (0.9351402f - fConst636)); // step: 3534
		fConst639 = tanf((138.84009f / fConst0)); // step: 3554
		fConst640 = (1.0f / fConst639); // step: 3555
		fConst641 = (1.0f / (((fConst640 + 0.15748216f) / fConst639) + 0.9351402f)); // step: 3559
		fConst642 = (1.0f / (((fConst640 + 0.74313045f) / fConst639) + 1.4500711f)); // step: 3563
		fConst643 = (1.0f / (((fConst640 + 3.1897273f) / fConst639) + 4.0767817f)); // step: 3567
		fConst644 = (1.0f / (((fConst602 + 0.16840488f) / fConst601) + 1.0693583f)); // step: 3571
		fConst645 = (1.0f / (((fConst602 + 0.51247865f) / fConst601) + 0.6896214f)); // step: 3575
		fConst646 = (1.0f / (((fConst602 + 0.78241307f) / fConst601) + 0.2452915f)); // step: 3579
		fConst647 = (((fConst602 + -0.78241307f) / fConst601) + 0.2452915f); // step: 3583
		fConst648 = (2.0f * (0.2452915f - fConst624)); // step: 3587
		fConst649 = (0.0001f / fConst623); // step: 3594
		fConst650 = (fConst649 + 0.0004332272f); // step: 3595
		fConst651 = (2.0f * (0.0004332272f - fConst649)); // step: 3598
		fConst652 = (((fConst602 + -0.51247865f) / fConst601) + 0.6896214f); // step: 3607
		fConst653 = (2.0f * (0.6896214f - fConst624)); // step: 3611
		fConst654 = (fConst624 + 7.6217313f); // step: 3618
		fConst655 = (2.0f * (7.6217313f - fConst624)); // step: 3621
		fConst656 = (((fConst602 + -0.16840488f) / fConst601) + 1.0693583f); // step: 3630
		fConst657 = (2.0f * (1.0693583f - fConst624)); // step: 3634
		fConst658 = (fConst624 + 53.53615f); // step: 3641
		fConst659 = (2.0f * (53.53615f - fConst624)); // step: 3644
		fConst660 = (((fConst640 + -3.1897273f) / fConst639) + 4.0767817f); // step: 3653
		fConst661 = powf(fConst639,2.0f); // step: 3656
		fConst662 = (1.0f / fConst661); // step: 3657
		fConst663 = (2.0f * (4.0767817f - fConst662)); // step: 3659
		fConst664 = (0.0017661728f / fConst661); // step: 3666
		fConst665 = (fConst664 + 0.0004076782f); // step: 3667
		fConst666 = (2.0f * (0.0004076782f - fConst664)); // step: 3670
		fConst667 = (((fConst640 + -0.74313045f) / fConst639) + 1.4500711f); // step: 3679
		fConst668 = (2.0f * (1.4500711f - fConst662)); // step: 3683
		fConst669 = (11.0520525f / fConst661); // step: 3690
		fConst670 = (fConst669 + 1.4500711f); // step: 3691
		fConst671 = (2.0f * (1.4500711f - fConst669)); // step: 3694
		fConst672 = (((fConst640 + -0.15748216f) / fConst639) + 0.9351402f); // step: 3703
		fConst673 = (2.0f * (0.9351402f - fConst662)); // step: 3707
		fConst674 = (50.06381f / fConst661); // step: 3714
		fConst675 = (fConst674 + 0.9351402f); // step: 3715
		fConst676 = (2.0f * (0.9351402f - fConst674)); // step: 3718
		fConst677 = tanf((98.174774f / fConst0)); // step: 3738
		fConst678 = (1.0f / fConst677); // step: 3739
		fConst679 = (1.0f / (((fConst678 + 0.15748216f) / fConst677) + 0.9351402f)); // step: 3743
		fConst680 = (1.0f / (((fConst678 + 0.74313045f) / fConst677) + 1.4500711f)); // step: 3747
		fConst681 = (1.0f / (((fConst678 + 3.1897273f) / fConst677) + 4.0767817f)); // step: 3751
		fConst682 = (1.0f / (((fConst640 + 0.16840488f) / fConst639) + 1.0693583f)); // step: 3755
		fConst683 = (1.0f / (((fConst640 + 0.51247865f) / fConst639) + 0.6896214f)); // step: 3759
		fConst684 = (1.0f / (((fConst640 + 0.78241307f) / fConst639) + 0.2452915f)); // step: 3763
		fConst685 = (((fConst640 + -0.78241307f) / fConst639) + 0.2452915f); // step: 3767
		fConst686 = (2.0f * (0.2452915f - fConst662)); // step: 3771
		fConst687 = (0.0001f / fConst661); // step: 3778
		fConst688 = (fConst687 + 0.0004332272f); // step: 3779
		fConst689 = (2.0f * (0.0004332272f - fConst687)); // step: 3782
		fConst690 = (((fConst640 + -0.51247865f) / fConst639) + 0.6896214f); // step: 3791
		fConst691 = (2.0f * (0.6896214f - fConst662)); // step: 3795
		fConst692 = (fConst662 + 7.6217313f); // step: 3802
		fConst693 = (2.0f * (7.6217313f - fConst662)); // step: 3805
		fConst694 = (((fConst640 + -0.16840488f) / fConst639) + 1.0693583f); // step: 3814
		fConst695 = (2.0f * (1.0693583f - fConst662)); // step: 3818
		fConst696 = (fConst662 + 53.53615f); // step: 3825
		fConst697 = (2.0f * (53.53615f - fConst662)); // step: 3828
		fConst698 = (((fConst678 + -3.1897273f) / fConst677) + 4.0767817f); // step: 3837
		fConst699 = powf(fConst677,2.0f); // step: 3840
		fConst700 = (1.0f / fConst699); // step: 3841
		fConst701 = (2.0f * (4.0767817f - fConst700)); // step: 3843
		fConst702 = (0.0017661728f / fConst699); // step: 3850
		fConst703 = (fConst702 + 0.0004076782f); // step: 3851
		fConst704 = (2.0f * (0.0004076782f - fConst702)); // step: 3854
		fConst705 = (((fConst678 + -0.74313045f) / fConst677) + 1.4500711f); // step: 3863
		fConst706 = (2.0f * (1.4500711f - fConst700)); // step: 3867
		fConst707 = (11.0520525f / fConst699); // step: 3874
		fConst708 = (fConst707 + 1.4500711f); // step: 3875
		fConst709 = (2.0f * (1.4500711f - fConst707)); // step: 3878
		fConst710 = (((fConst678 + -0.15748216f) / fConst677) + 0.9351402f); // step: 3887
		fConst711 = (2.0f * (0.9351402f - fConst700)); // step: 3891
		fConst712 = (50.06381f / fConst699); // step: 3898
		fConst713 = (fConst712 + 0.9351402f); // step: 3899
		fConst714 = (2.0f * (0.9351402f - fConst712)); // step: 3902
		fConst715 = (1.0f / (((fConst678 + 0.16840488f) / fConst677) + 1.0693583f)); // step: 3923
		fConst716 = (1.0f / (((fConst678 + 0.51247865f) / fConst677) + 0.6896214f)); // step: 3927
		fConst717 = (1.0f / (((fConst678 + 0.78241307f) / fConst677) + 0.2452915f)); // step: 3931
		fConst718 = (((fConst678 + -0.78241307f) / fConst677) + 0.2452915f); // step: 3935
		fConst719 = (2.0f * (0.2452915f - fConst700)); // step: 3939
		fConst720 = (0.0001f / fConst699); // step: 3946
		fConst721 = (fConst720 + 0.0004332272f); // step: 3947
		fConst722 = (2.0f * (0.0004332272f - fConst720)); // step: 3950
		fConst723 = (((fConst678 + -0.51247865f) / fConst677) + 0.6896214f); // step: 3959
		fConst724 = (2.0f * (0.6896214f - fConst700)); // step: 3963
		fConst725 = (fConst700 + 7.6217313f); // step: 3970
		fConst726 = (2.0f * (7.6217313f - fConst700)); // step: 3973
		fConst727 = (((fConst678 + -0.16840488f) / fConst677) + 1.0693583f); // step: 3982
		fConst728 = (2.0f * (1.0693583f - fConst700)); // step: 3986
		fConst729 = (fConst700 + 53.53615f); // step: 3993
		fConst730 = (2.0f * (53.53615f - fConst700)); // step: 3996
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fslider4 = 5e+01f;
		fslider5 = 1e+02f;
		fslider6 = 8e+03f;
		fslider7 = 49.0f;
		fslider8 = 0.0f;
		fslider9 = 4e+01f;
		fslider10 = 2e+02f;
		fslider11 = -2e+01f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fentry0 = 2.0f;
		fslider12 = 0.0f;
		fslider13 = 0.0f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0State[j] = 0; }
		fVeeec1State = 0;
		fVeeec0State = 0;
		fVec1State = 0;
		fVeeec4State = 0;
		fVec2State = 0;
		fVeeec6State = 0;
		fVec3State = 0;
		fVeeec11State = 0;
		fVeeec16State = 0;
		iVeeec18State = 0;
		for (int j = 0; j < 3; j++) { fVeeec20State[j] = 0; }
		fVec4State = 0;
		fVec5State = 0;
		fVec6State = 0;
		fVec7State = 0;
		fVec8State = 0;
		fVec9State = 0;
		fVec10State = 0;
		fVec11State = 0;
		fVec12State = 0;
		fVec13State = 0;
		fVec14State = 0;
		fVec15State = 0;
		fVec16State = 0;
		fVec17State = 0;
		fVec18State = 0;
		fVec19State = 0;
		fVeeec15State = 0;
		for (int j = 0; j < 2; j++) { fVeeec14State[j] = 0; }
		fVeeec50State = 0;
		for (int j = 0; j < 2; j++) { fVeeec49State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec13State[j] = 0; }
		fVec20State = 0;
		fVeeec10State = 0;
		for (int j = 0; j < 2; j++) { fVeeec9State[j] = 0; }
		fVeeec61State = 0;
		for (int j = 0; j < 2; j++) { fVeeec60State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec65State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec68State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec71State[j] = 0; }
		fVeeec8State = 0;
		for (int j = 0; j < 2; j++) { fVeeec76State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec79State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec82State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec85State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec88State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec91State[j] = 0; }
		fVeeec75State = 0;
		for (int j = 0; j < 2; j++) { fVeeec96State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec99State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec102State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec105State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec108State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec111State[j] = 0; }
		fVeeec95State = 0;
		for (int j = 0; j < 2; j++) { fVeeec116State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec119State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec122State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec125State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec128State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec131State[j] = 0; }
		fVeeec115State = 0;
		for (int j = 0; j < 2; j++) { fVeeec136State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec139State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec142State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec145State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec148State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec151State[j] = 0; }
		fVeeec135State = 0;
		for (int j = 0; j < 2; j++) { fVeeec156State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec159State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec162State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec165State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec168State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec171State[j] = 0; }
		fVeeec155State = 0;
		for (int j = 0; j < 2; j++) { fVeeec176State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec179State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec182State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec185State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec188State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec191State[j] = 0; }
		fVeeec175State = 0;
		for (int j = 0; j < 2; j++) { fVeeec196State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec199State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec202State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec205State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec208State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec211State[j] = 0; }
		fVeeec195State = 0;
		for (int j = 0; j < 2; j++) { fVeeec216State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec219State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec222State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec225State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec228State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec231State[j] = 0; }
		fVeeec215State = 0;
		for (int j = 0; j < 2; j++) { fVeeec236State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec239State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec242State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec245State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec248State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec251State[j] = 0; }
		fVeeec235State = 0;
		for (int j = 0; j < 2; j++) { fVeeec256State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec259State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec262State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec265State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec268State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec271State[j] = 0; }
		fVeeec255State = 0;
		for (int j = 0; j < 2; j++) { fVeeec276State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec279State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec282State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec285State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec288State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec291State[j] = 0; }
		fVeeec275State = 0;
		for (int j = 0; j < 2; j++) { fVeeec296State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec299State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec302State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec305State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec308State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec311State[j] = 0; }
		fVeeec295State = 0;
		for (int j = 0; j < 2; j++) { fVeeec316State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec319State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec322State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec325State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec328State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec331State[j] = 0; }
		fVeeec315State = 0;
		for (int j = 0; j < 2; j++) { fVeeec336State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec339State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec342State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec345State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec348State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec351State[j] = 0; }
		fVeeec335State = 0;
		for (int j = 0; j < 2; j++) { fVeeec356State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec359State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec362State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec365State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec368State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec371State[j] = 0; }
		fVeeec355State = 0;
		for (int j = 0; j < 2; j++) { fVeeec376State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec379State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec382State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec385State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec388State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec391State[j] = 0; }
		fVeeec375State = 0;
		for (int j = 0; j < 2; j++) { fVeeec396State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec399State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec402State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec405State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec408State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec411State[j] = 0; }
		fVeeec395State = 0;
		for (int j = 0; j < 2; j++) { fVeeec416State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec419State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec422State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec425State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec428State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec431State[j] = 0; }
		fVeeec415State = 0;
		for (int j = 0; j < 2; j++) { fVeeec436State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec439State[j] = 0; }
		for (int j = 0; j < 2; j++) { fVeeec442State[j] = 0; }
		fVeeec435State = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("parametric_eq");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider11, "1", "");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider11, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider11, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox1);
		ui_interface->declare(&fcheckbox2, "1", "");
		ui_interface->declare(&fcheckbox2, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox2);
		ui_interface->declare(&fcheckbox0, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for info and pointers");
		ui_interface->openHorizontalBox("PARAMETRIC EQ SECTIONS");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Low Shelf");
		ui_interface->declare(&fslider12, "0", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "tooltip", "Amount of low-frequency boost or cut in decibels");
		ui_interface->declare(&fslider12, "unit", "dB");
		ui_interface->addHorizontalSlider("Low Boost|Cut", &fslider12, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "scale", "log");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider10, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider10, 2e+02f, 1.0f, 5e+03f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->declare(0, "tooltip", "Parametric Equalizer sections from filter.lib");
		ui_interface->openVerticalBox("Peaking Equalizer");
		ui_interface->declare(&fslider8, "0", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Amount of local boost or cut in decibels");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addHorizontalSlider("Peak Boost|Cut", &fslider8, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Peak Frequency in Piano Key (PK) units (A440 = 49PK)");
		ui_interface->declare(&fslider7, "unit", "PK");
		ui_interface->addHorizontalSlider("Peak Frequency", &fslider7, 49.0f, 1.0f, 1e+02f, 1.0f);
		ui_interface->declare(&fslider9, "2", "");
		ui_interface->declare(&fslider9, "scale", "log");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "Quality factor (Q) of the peak = center-frequency/bandwidth");
		ui_interface->addHorizontalSlider("Peak Q", &fslider9, 4e+01f, 1.0f, 1e+03f, 0.1f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->declare(0, "tooltip", "A high shelf provides a boost or cut                            above some frequency");
		ui_interface->openVerticalBox("High Shelf");
		ui_interface->declare(&fslider13, "0", "");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->declare(&fslider13, "tooltip", "Amount of high-frequency boost or cut in decibels");
		ui_interface->declare(&fslider13, "unit", "dB");
		ui_interface->addHorizontalSlider("High Boost|Cut", &fslider13, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider6, "1", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider6, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider6, 8e+03f, 2e+01f, 1e+04f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 20 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph19, "0", "");
		ui_interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph19, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph18, "1", "");
		ui_interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph18, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph17, "2", "");
		ui_interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph17, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph16, "3", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph16, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph15, "4", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "5", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "6", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "7", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "8", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "9", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "10", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "11", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "12", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "13", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "14", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "15", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph15", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "16", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph16", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "17", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph17", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "18", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph18", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "19", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph19", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider5, "0", "");
		ui_interface->declare(&fslider5, "scale", "log");
		ui_interface->declare(&fslider5, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider5, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider5, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider4, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0[4];
		float 	fSlow0 = ((1) ? expf(-(fConst1 / float(fslider0))) : 0.0f); // step: 20
		float 	fSlow1 = ((4.4e+02f * powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f)))) * (1.0f - fSlow0)); // step: 31
		float 	fVeeec1;
		float 	fVeeec0;
		float 	fVec1[2];
		float 	fSlow2 = ((0.01f * float(fslider2)) + 1.0f); // step: 53
		float 	fVeeec4;
		float 	fVec2[2];
		float 	fSlow3 = ((0.01f * float(fslider3)) + 1.0f); // step: 71
		float 	fVeeec6;
		float 	fVec3[2];
		float 	fSlow4 = float(fslider4); // step: 86
		float 	fSlow5 = ((1) ? expf(-(fConst2 / float(fslider5))) : 0.0f); // step: 94
		float 	fSlow6 = tanf((fConst8 * float(fslider6))); // step: 122
		float 	fSlow7 = (1.0f / fSlow6); // step: 124
		float 	fSlow8 = (1.0f / (((fSlow7 + 1.0f) / fSlow6) + 1.0f)); // step: 128
		float 	fSlow9 = (1.0f / (fSlow7 + 1.0f)); // step: 132
		float 	fSlow10 = (1.0f - fSlow7); // step: 133
		float 	fSlow11 = (0.001f * float(fslider7)); // step: 141
		float 	fVeeec11;
		float 	fSlow12 = float(fslider8); // step: 153
		int 	iSlow13 = (fSlow12 > 0.0f); // step: 154
		float 	fSlow14 = float(fslider9); // step: 160
		float 	fSlow15 = (fConst9 / fSlow14); // step: 161
		float 	fSlow16 = (fConst9 * (powf(1e+01f,(0.05f * fabsf(fSlow12))) / fSlow14)); // step: 169
		float 	fSlow17 = tanf((fConst8 * float(fslider10))); // step: 183
		float 	fSlow18 = (1.0f / fSlow17); // step: 184
		float 	fSlow19 = (1.0f / (((fSlow18 + 1.0f) / fSlow17) + 1.0f)); // step: 188
		float 	fSlow20 = (1.0f / (fSlow18 + 1.0f)); // step: 191
		float 	fSlow21 = (1.0f - fSlow18); // step: 192
		float 	fSlow22 = (0.001f * powf(1e+01f,(0.05f * float(fslider11)))); // step: 200
		float 	fVeeec16;
		int 	iSlow23 = int(float(fcheckbox0)); // step: 206
		int 	iSlow24 = int(float(fcheckbox1)); // step: 208
		int 	iSlow25 = int(float(fcheckbox2)); // step: 210
		int 	iVeeec18;
		float 	fVeeec20[4];
		int 	iSlow26 = int((float(fentry0) + -1.0f)); // step: 251
		int 	iSlow27 = (iSlow26 >= 2); // step: 252
		int 	iSlow28 = (iSlow26 >= 1); // step: 253
		float 	fVec4[2];
		int 	iSlow29 = (iSlow26 >= 3); // step: 265
		float 	fVec5[2];
		float 	fVec6[2];
		float 	fVec7[2];
		float 	fVec8[2];
		float 	fVec9[2];
		float 	fVec10[2];
		float 	fVec11[2];
		float 	fVec12[2];
		float 	fVec13[2];
		float 	fVec14[2];
		float 	fVec15[2];
		float 	fVec16[2];
		float 	fVec17[2];
		float 	fVec18[2];
		float 	fVec19[2];
		float 	fVeeec15;
		float 	fSlow30 = (((fSlow18 + -1.0f) / fSlow17) + 1.0f); // step: 383
		float 	fSlow31 = (1.0f / powf(fSlow17,2.0f)); // step: 387
		float 	fSlow32 = (2.0f * (1.0f - fSlow31)); // step: 389
		float 	fVeeec14[3];
		float 	fSlow33 = powf(1e+01f,(0.05f * float(fslider12))); // step: 401
		float 	fVeeec50;
		float 	fVeeec49[3];
		float 	fVeeec13[3];
		float 	fVec20[2];
		float 	fVeeec10;
		float 	fSlow34 = (((fSlow7 + -1.0f) / fSlow6) + 1.0f); // step: 458
		float 	fSlow35 = powf(fSlow6,2.0f); // step: 461
		float 	fSlow36 = (2.0f * (1.0f - (1.0f / fSlow35))); // step: 464
		float 	fVeeec9[3];
		float 	fVeeec61;
		float 	fVeeec60[3];
		float 	fSlow37 = (powf(1e+01f,(0.05f * float(fslider13))) / fSlow35); // step: 498
		float 	fVeeec65[3];
		float 	fVeeec68[3];
		float 	fVeeec71[3];
		float 	fSlow38 = (1.0f - fSlow5); // step: 584
		float 	fVeeec8;
		float 	fVeeec76[3];
		float 	fVeeec79[3];
		float 	fVeeec82[3];
		float 	fVeeec85[3];
		float 	fVeeec88[3];
		float 	fVeeec91[3];
		float 	fVeeec75;
		float 	fVeeec96[3];
		float 	fVeeec99[3];
		float 	fVeeec102[3];
		float 	fVeeec105[3];
		float 	fVeeec108[3];
		float 	fVeeec111[3];
		float 	fVeeec95;
		float 	fVeeec116[3];
		float 	fVeeec119[3];
		float 	fVeeec122[3];
		float 	fVeeec125[3];
		float 	fVeeec128[3];
		float 	fVeeec131[3];
		float 	fVeeec115;
		float 	fVeeec136[3];
		float 	fVeeec139[3];
		float 	fVeeec142[3];
		float 	fVeeec145[3];
		float 	fVeeec148[3];
		float 	fVeeec151[3];
		float 	fVeeec135;
		float 	fVeeec156[3];
		float 	fVeeec159[3];
		float 	fVeeec162[3];
		float 	fVeeec165[3];
		float 	fVeeec168[3];
		float 	fVeeec171[3];
		float 	fVeeec155;
		float 	fVeeec176[3];
		float 	fVeeec179[3];
		float 	fVeeec182[3];
		float 	fVeeec185[3];
		float 	fVeeec188[3];
		float 	fVeeec191[3];
		float 	fVeeec175;
		float 	fVeeec196[3];
		float 	fVeeec199[3];
		float 	fVeeec202[3];
		float 	fVeeec205[3];
		float 	fVeeec208[3];
		float 	fVeeec211[3];
		float 	fVeeec195;
		float 	fVeeec216[3];
		float 	fVeeec219[3];
		float 	fVeeec222[3];
		float 	fVeeec225[3];
		float 	fVeeec228[3];
		float 	fVeeec231[3];
		float 	fVeeec215;
		float 	fVeeec236[3];
		float 	fVeeec239[3];
		float 	fVeeec242[3];
		float 	fVeeec245[3];
		float 	fVeeec248[3];
		float 	fVeeec251[3];
		float 	fVeeec235;
		float 	fVeeec256[3];
		float 	fVeeec259[3];
		float 	fVeeec262[3];
		float 	fVeeec265[3];
		float 	fVeeec268[3];
		float 	fVeeec271[3];
		float 	fVeeec255;
		float 	fVeeec276[3];
		float 	fVeeec279[3];
		float 	fVeeec282[3];
		float 	fVeeec285[3];
		float 	fVeeec288[3];
		float 	fVeeec291[3];
		float 	fVeeec275;
		float 	fVeeec296[3];
		float 	fVeeec299[3];
		float 	fVeeec302[3];
		float 	fVeeec305[3];
		float 	fVeeec308[3];
		float 	fVeeec311[3];
		float 	fVeeec295;
		float 	fVeeec316[3];
		float 	fVeeec319[3];
		float 	fVeeec322[3];
		float 	fVeeec325[3];
		float 	fVeeec328[3];
		float 	fVeeec331[3];
		float 	fVeeec315;
		float 	fVeeec336[3];
		float 	fVeeec339[3];
		float 	fVeeec342[3];
		float 	fVeeec345[3];
		float 	fVeeec348[3];
		float 	fVeeec351[3];
		float 	fVeeec335;
		float 	fVeeec356[3];
		float 	fVeeec359[3];
		float 	fVeeec362[3];
		float 	fVeeec365[3];
		float 	fVeeec368[3];
		float 	fVeeec371[3];
		float 	fVeeec355;
		float 	fVeeec376[3];
		float 	fVeeec379[3];
		float 	fVeeec382[3];
		float 	fVeeec385[3];
		float 	fVeeec388[3];
		float 	fVeeec391[3];
		float 	fVeeec375;
		float 	fVeeec396[3];
		float 	fVeeec399[3];
		float 	fVeeec402[3];
		float 	fVeeec405[3];
		float 	fVeeec408[3];
		float 	fVeeec411[3];
		float 	fVeeec395;
		float 	fVeeec416[3];
		float 	fVeeec419[3];
		float 	fVeeec422[3];
		float 	fVeeec425[3];
		float 	fVeeec428[3];
		float 	fVeeec431[3];
		float 	fVeeec415;
		float 	fVeeec436[3];
		float 	fVeeec439[3];
		float 	fVeeec442[3];
		float 	fVeeec435;
		int fullcount = count;
		for (int index = 0; index < fullcount; index += 32) {
			int count = min(32, fullcount-index);
			FAUSTFLOAT* input0 = &input[0][index]; // Zone 3
			FAUSTFLOAT* output0 = &output[0][index]; // Zone 3
			FAUSTFLOAT* output1 = &output[1][index]; // Zone 3
			iVec0[1] = iVec0State[0];
			iVec0[2] = iVec0State[1];
			iVec0[3] = iVec0State[2];
			fVeeec1 = fVeeec1State;
			fVeeec0 = fVeeec0State;
			fVec1[1] = fVec1State;
			fVeeec4 = fVeeec4State;
			fVec2[1] = fVec2State;
			fVeeec6 = fVeeec6State;
			fVec3[1] = fVec3State;
			fVeeec11 = fVeeec11State;
			fVeeec16 = fVeeec16State;
			iVeeec18 = iVeeec18State;
			fVeeec20[1] = fVeeec20State[0];
			fVeeec20[2] = fVeeec20State[1];
			fVeeec20[3] = fVeeec20State[2];
			fVec4[1] = fVec4State;
			fVec5[1] = fVec5State;
			fVec6[1] = fVec6State;
			fVec7[1] = fVec7State;
			fVec8[1] = fVec8State;
			fVec9[1] = fVec9State;
			fVec10[1] = fVec10State;
			fVec11[1] = fVec11State;
			fVec12[1] = fVec12State;
			fVec13[1] = fVec13State;
			fVec14[1] = fVec14State;
			fVec15[1] = fVec15State;
			fVec16[1] = fVec16State;
			fVec17[1] = fVec17State;
			fVec18[1] = fVec18State;
			fVec19[1] = fVec19State;
			fVeeec15 = fVeeec15State;
			fVeeec14[1] = fVeeec14State[0];
			fVeeec14[2] = fVeeec14State[1];
			fVeeec50 = fVeeec50State;
			fVeeec49[1] = fVeeec49State[0];
			fVeeec49[2] = fVeeec49State[1];
			fVeeec13[1] = fVeeec13State[0];
			fVeeec13[2] = fVeeec13State[1];
			fVec20[1] = fVec20State;
			fVeeec10 = fVeeec10State;
			fVeeec9[1] = fVeeec9State[0];
			fVeeec9[2] = fVeeec9State[1];
			fVeeec61 = fVeeec61State;
			fVeeec60[1] = fVeeec60State[0];
			fVeeec60[2] = fVeeec60State[1];
			fVeeec65[1] = fVeeec65State[0];
			fVeeec65[2] = fVeeec65State[1];
			fVeeec68[1] = fVeeec68State[0];
			fVeeec68[2] = fVeeec68State[1];
			fVeeec71[1] = fVeeec71State[0];
			fVeeec71[2] = fVeeec71State[1];
			fVeeec8 = fVeeec8State;
			fVeeec76[1] = fVeeec76State[0];
			fVeeec76[2] = fVeeec76State[1];
			fVeeec79[1] = fVeeec79State[0];
			fVeeec79[2] = fVeeec79State[1];
			fVeeec82[1] = fVeeec82State[0];
			fVeeec82[2] = fVeeec82State[1];
			fVeeec85[1] = fVeeec85State[0];
			fVeeec85[2] = fVeeec85State[1];
			fVeeec88[1] = fVeeec88State[0];
			fVeeec88[2] = fVeeec88State[1];
			fVeeec91[1] = fVeeec91State[0];
			fVeeec91[2] = fVeeec91State[1];
			fVeeec75 = fVeeec75State;
			fVeeec96[1] = fVeeec96State[0];
			fVeeec96[2] = fVeeec96State[1];
			fVeeec99[1] = fVeeec99State[0];
			fVeeec99[2] = fVeeec99State[1];
			fVeeec102[1] = fVeeec102State[0];
			fVeeec102[2] = fVeeec102State[1];
			fVeeec105[1] = fVeeec105State[0];
			fVeeec105[2] = fVeeec105State[1];
			fVeeec108[1] = fVeeec108State[0];
			fVeeec108[2] = fVeeec108State[1];
			fVeeec111[1] = fVeeec111State[0];
			fVeeec111[2] = fVeeec111State[1];
			fVeeec95 = fVeeec95State;
			fVeeec116[1] = fVeeec116State[0];
			fVeeec116[2] = fVeeec116State[1];
			fVeeec119[1] = fVeeec119State[0];
			fVeeec119[2] = fVeeec119State[1];
			fVeeec122[1] = fVeeec122State[0];
			fVeeec122[2] = fVeeec122State[1];
			fVeeec125[1] = fVeeec125State[0];
			fVeeec125[2] = fVeeec125State[1];
			fVeeec128[1] = fVeeec128State[0];
			fVeeec128[2] = fVeeec128State[1];
			fVeeec131[1] = fVeeec131State[0];
			fVeeec131[2] = fVeeec131State[1];
			fVeeec115 = fVeeec115State;
			fVeeec136[1] = fVeeec136State[0];
			fVeeec136[2] = fVeeec136State[1];
			fVeeec139[1] = fVeeec139State[0];
			fVeeec139[2] = fVeeec139State[1];
			fVeeec142[1] = fVeeec142State[0];
			fVeeec142[2] = fVeeec142State[1];
			fVeeec145[1] = fVeeec145State[0];
			fVeeec145[2] = fVeeec145State[1];
			fVeeec148[1] = fVeeec148State[0];
			fVeeec148[2] = fVeeec148State[1];
			fVeeec151[1] = fVeeec151State[0];
			fVeeec151[2] = fVeeec151State[1];
			fVeeec135 = fVeeec135State;
			fVeeec156[1] = fVeeec156State[0];
			fVeeec156[2] = fVeeec156State[1];
			fVeeec159[1] = fVeeec159State[0];
			fVeeec159[2] = fVeeec159State[1];
			fVeeec162[1] = fVeeec162State[0];
			fVeeec162[2] = fVeeec162State[1];
			fVeeec165[1] = fVeeec165State[0];
			fVeeec165[2] = fVeeec165State[1];
			fVeeec168[1] = fVeeec168State[0];
			fVeeec168[2] = fVeeec168State[1];
			fVeeec171[1] = fVeeec171State[0];
			fVeeec171[2] = fVeeec171State[1];
			fVeeec155 = fVeeec155State;
			fVeeec176[1] = fVeeec176State[0];
			fVeeec176[2] = fVeeec176State[1];
			fVeeec179[1] = fVeeec179State[0];
			fVeeec179[2] = fVeeec179State[1];
			fVeeec182[1] = fVeeec182State[0];
			fVeeec182[2] = fVeeec182State[1];
			fVeeec185[1] = fVeeec185State[0];
			fVeeec185[2] = fVeeec185State[1];
			fVeeec188[1] = fVeeec188State[0];
			fVeeec188[2] = fVeeec188State[1];
			fVeeec191[1] = fVeeec191State[0];
			fVeeec191[2] = fVeeec191State[1];
			fVeeec175 = fVeeec175State;
			fVeeec196[1] = fVeeec196State[0];
			fVeeec196[2] = fVeeec196State[1];
			fVeeec199[1] = fVeeec199State[0];
			fVeeec199[2] = fVeeec199State[1];
			fVeeec202[1] = fVeeec202State[0];
			fVeeec202[2] = fVeeec202State[1];
			fVeeec205[1] = fVeeec205State[0];
			fVeeec205[2] = fVeeec205State[1];
			fVeeec208[1] = fVeeec208State[0];
			fVeeec208[2] = fVeeec208State[1];
			fVeeec211[1] = fVeeec211State[0];
			fVeeec211[2] = fVeeec211State[1];
			fVeeec195 = fVeeec195State;
			fVeeec216[1] = fVeeec216State[0];
			fVeeec216[2] = fVeeec216State[1];
			fVeeec219[1] = fVeeec219State[0];
			fVeeec219[2] = fVeeec219State[1];
			fVeeec222[1] = fVeeec222State[0];
			fVeeec222[2] = fVeeec222State[1];
			fVeeec225[1] = fVeeec225State[0];
			fVeeec225[2] = fVeeec225State[1];
			fVeeec228[1] = fVeeec228State[0];
			fVeeec228[2] = fVeeec228State[1];
			fVeeec231[1] = fVeeec231State[0];
			fVeeec231[2] = fVeeec231State[1];
			fVeeec215 = fVeeec215State;
			fVeeec236[1] = fVeeec236State[0];
			fVeeec236[2] = fVeeec236State[1];
			fVeeec239[1] = fVeeec239State[0];
			fVeeec239[2] = fVeeec239State[1];
			fVeeec242[1] = fVeeec242State[0];
			fVeeec242[2] = fVeeec242State[1];
			fVeeec245[1] = fVeeec245State[0];
			fVeeec245[2] = fVeeec245State[1];
			fVeeec248[1] = fVeeec248State[0];
			fVeeec248[2] = fVeeec248State[1];
			fVeeec251[1] = fVeeec251State[0];
			fVeeec251[2] = fVeeec251State[1];
			fVeeec235 = fVeeec235State;
			fVeeec256[1] = fVeeec256State[0];
			fVeeec256[2] = fVeeec256State[1];
			fVeeec259[1] = fVeeec259State[0];
			fVeeec259[2] = fVeeec259State[1];
			fVeeec262[1] = fVeeec262State[0];
			fVeeec262[2] = fVeeec262State[1];
			fVeeec265[1] = fVeeec265State[0];
			fVeeec265[2] = fVeeec265State[1];
			fVeeec268[1] = fVeeec268State[0];
			fVeeec268[2] = fVeeec268State[1];
			fVeeec271[1] = fVeeec271State[0];
			fVeeec271[2] = fVeeec271State[1];
			fVeeec255 = fVeeec255State;
			fVeeec276[1] = fVeeec276State[0];
			fVeeec276[2] = fVeeec276State[1];
			fVeeec279[1] = fVeeec279State[0];
			fVeeec279[2] = fVeeec279State[1];
			fVeeec282[1] = fVeeec282State[0];
			fVeeec282[2] = fVeeec282State[1];
			fVeeec285[1] = fVeeec285State[0];
			fVeeec285[2] = fVeeec285State[1];
			fVeeec288[1] = fVeeec288State[0];
			fVeeec288[2] = fVeeec288State[1];
			fVeeec291[1] = fVeeec291State[0];
			fVeeec291[2] = fVeeec291State[1];
			fVeeec275 = fVeeec275State;
			fVeeec296[1] = fVeeec296State[0];
			fVeeec296[2] = fVeeec296State[1];
			fVeeec299[1] = fVeeec299State[0];
			fVeeec299[2] = fVeeec299State[1];
			fVeeec302[1] = fVeeec302State[0];
			fVeeec302[2] = fVeeec302State[1];
			fVeeec305[1] = fVeeec305State[0];
			fVeeec305[2] = fVeeec305State[1];
			fVeeec308[1] = fVeeec308State[0];
			fVeeec308[2] = fVeeec308State[1];
			fVeeec311[1] = fVeeec311State[0];
			fVeeec311[2] = fVeeec311State[1];
			fVeeec295 = fVeeec295State;
			fVeeec316[1] = fVeeec316State[0];
			fVeeec316[2] = fVeeec316State[1];
			fVeeec319[1] = fVeeec319State[0];
			fVeeec319[2] = fVeeec319State[1];
			fVeeec322[1] = fVeeec322State[0];
			fVeeec322[2] = fVeeec322State[1];
			fVeeec325[1] = fVeeec325State[0];
			fVeeec325[2] = fVeeec325State[1];
			fVeeec328[1] = fVeeec328State[0];
			fVeeec328[2] = fVeeec328State[1];
			fVeeec331[1] = fVeeec331State[0];
			fVeeec331[2] = fVeeec331State[1];
			fVeeec315 = fVeeec315State;
			fVeeec336[1] = fVeeec336State[0];
			fVeeec336[2] = fVeeec336State[1];
			fVeeec339[1] = fVeeec339State[0];
			fVeeec339[2] = fVeeec339State[1];
			fVeeec342[1] = fVeeec342State[0];
			fVeeec342[2] = fVeeec342State[1];
			fVeeec345[1] = fVeeec345State[0];
			fVeeec345[2] = fVeeec345State[1];
			fVeeec348[1] = fVeeec348State[0];
			fVeeec348[2] = fVeeec348State[1];
			fVeeec351[1] = fVeeec351State[0];
			fVeeec351[2] = fVeeec351State[1];
			fVeeec335 = fVeeec335State;
			fVeeec356[1] = fVeeec356State[0];
			fVeeec356[2] = fVeeec356State[1];
			fVeeec359[1] = fVeeec359State[0];
			fVeeec359[2] = fVeeec359State[1];
			fVeeec362[1] = fVeeec362State[0];
			fVeeec362[2] = fVeeec362State[1];
			fVeeec365[1] = fVeeec365State[0];
			fVeeec365[2] = fVeeec365State[1];
			fVeeec368[1] = fVeeec368State[0];
			fVeeec368[2] = fVeeec368State[1];
			fVeeec371[1] = fVeeec371State[0];
			fVeeec371[2] = fVeeec371State[1];
			fVeeec355 = fVeeec355State;
			fVeeec376[1] = fVeeec376State[0];
			fVeeec376[2] = fVeeec376State[1];
			fVeeec379[1] = fVeeec379State[0];
			fVeeec379[2] = fVeeec379State[1];
			fVeeec382[1] = fVeeec382State[0];
			fVeeec382[2] = fVeeec382State[1];
			fVeeec385[1] = fVeeec385State[0];
			fVeeec385[2] = fVeeec385State[1];
			fVeeec388[1] = fVeeec388State[0];
			fVeeec388[2] = fVeeec388State[1];
			fVeeec391[1] = fVeeec391State[0];
			fVeeec391[2] = fVeeec391State[1];
			fVeeec375 = fVeeec375State;
			fVeeec396[1] = fVeeec396State[0];
			fVeeec396[2] = fVeeec396State[1];
			fVeeec399[1] = fVeeec399State[0];
			fVeeec399[2] = fVeeec399State[1];
			fVeeec402[1] = fVeeec402State[0];
			fVeeec402[2] = fVeeec402State[1];
			fVeeec405[1] = fVeeec405State[0];
			fVeeec405[2] = fVeeec405State[1];
			fVeeec408[1] = fVeeec408State[0];
			fVeeec408[2] = fVeeec408State[1];
			fVeeec411[1] = fVeeec411State[0];
			fVeeec411[2] = fVeeec411State[1];
			fVeeec395 = fVeeec395State;
			fVeeec416[1] = fVeeec416State[0];
			fVeeec416[2] = fVeeec416State[1];
			fVeeec419[1] = fVeeec419State[0];
			fVeeec419[2] = fVeeec419State[1];
			fVeeec422[1] = fVeeec422State[0];
			fVeeec422[2] = fVeeec422State[1];
			fVeeec425[1] = fVeeec425State[0];
			fVeeec425[2] = fVeeec425State[1];
			fVeeec428[1] = fVeeec428State[0];
			fVeeec428[2] = fVeeec428State[1];
			fVeeec431[1] = fVeeec431State[0];
			fVeeec431[2] = fVeeec431State[1];
			fVeeec415 = fVeeec415State;
			fVeeec436[1] = fVeeec436State[0];
			fVeeec436[2] = fVeeec436State[1];
			fVeeec439[1] = fVeeec439State[0];
			fVeeec439[2] = fVeeec439State[1];
			fVeeec442[1] = fVeeec442State[0];
			fVeeec442[2] = fVeeec442State[1];
			fVeeec435 = fVeeec435State;
			for (int i=0; i<count; i++) {
				iVec0[0] = 1;
				fVeeec1 = ((fVeeec1 * fSlow0) + fSlow1);
				float 	fTemp0 = fVeeec1; // step: 34
				float 	fTemp1 = max(2e+01f, fabsf(fTemp0)); // step: 36
				float 	fTemp2 = (fVeeec0 + (fConst1 * fTemp1)); // step: 38
				fVeeec0 = (fTemp2 - floorf(fTemp2));
				float 	fTemp3 = (2.0f * fVeeec0); // step: 43
				float 	fTemp4 = (fTemp3 + -1.0f); // step: 46
				float 	fTemp5 = powf(fTemp4,3.0f); // step: 47
				fVec1[0] = (fTemp5 + (1.0f - fTemp3));
				float 	fTemp6 = max(2e+01f, fabsf((fSlow2 * fTemp0))); // step: 56
				float 	fTemp7 = (fVeeec4 + (fConst1 * fTemp6)); // step: 58
				fVeeec4 = (fTemp7 - floorf(fTemp7));
				float 	fTemp8 = (2.0f * fVeeec4); // step: 63
				float 	fTemp9 = (fTemp8 + -1.0f); // step: 65
				float 	fTemp10 = powf(fTemp9,3.0f); // step: 66
				fVec2[0] = (fTemp10 + (1.0f - fTemp8));
				float 	fTemp11 = max(2e+01f, fabsf((fSlow3 * fTemp0))); // step: 74
				float 	fTemp12 = (fVeeec6 + (fConst1 * fTemp11)); // step: 76
				fVeeec6 = (fTemp12 - floorf(fTemp12));
				float 	fTemp13 = (2.0f * fVeeec6); // step: 81
				float 	fTemp14 = (fTemp13 + -1.0f); // step: 83
				float 	fTemp15 = powf(fTemp14,3.0f); // step: 84
				fVec3[0] = (fTemp15 + (1.0f - fTemp13));
				float 	fTemp16 = fVeeec9[2]; // step: 130
				fVeeec11 = (fSlow11 + (0.999f * fVeeec11));
				float 	fTemp17 = powf(2.0f,(0.083333336f * (fVeeec11 + -49.0f))); // step: 147
				float 	fTemp18 = tanf((fConst9 * fTemp17)); // step: 151
				float 	fTemp19 = (1.0f / fTemp18); // step: 152
				float 	fTemp20 = (fTemp17 / sinf((fConst10 * fTemp17))); // step: 159
				float 	fTemp21 = (fSlow15 * fTemp20); // step: 162
				float 	fTemp22 = (fSlow16 * fTemp20); // step: 170
				float 	fTemp23 = ((iSlow13) ? fTemp21 : fTemp22); // step: 171
				float 	fTemp24 = (((fTemp19 + fTemp23) / fTemp18) + 1.0f); // step: 174
				float 	fTemp25 = fVeeec13[2]; // step: 175
				float 	fTemp26 = ((iSlow13) ? fTemp22 : fTemp21); // step: 176
				float 	fTemp27 = fVeeec14[2]; // step: 189
				fVeeec16 = (fSlow22 + (0.999f * fVeeec16));
				float 	fTemp28 = fVeeec16; // step: 203
				iVeeec18 = ((1103515245 * iVeeec18) + 12345);
				float 	fTemp29 = (4.656613e-10f * float(iVeeec18)); // step: 220
				float 	fTemp30 = fVeeec20[2]; // step: 223
				float 	fTemp31 = fVeeec20[3]; // step: 226
				float 	fTemp32 = fVeeec20[1]; // step: 229
				fVeeec20[0] = (((0.5221894f * fTemp31) + (fTemp29 + (2.494956f * fTemp32))) - (2.0172658f * fTemp30));
				float 	fTemp33 = float(iVec0[1]); // step: 257
				float 	fTemp34 = powf(fTemp4,2.0f); // step: 258
				fVec4[0] = fTemp34;
				float 	fTemp35 = float(iVec0[2]); // step: 270
				float 	fTemp36 = ((fTemp5 + (1.0f - (fTemp3 + fVec1[1]))) / fTemp1); // step: 275
				fVec5[0] = fTemp36;
				float 	fTemp37 = float(iVec0[3]); // step: 285
				float 	fTemp38 = (fVec4[0] * (fVec4[0] + -2.0f)); // step: 288
				fVec6[0] = fTemp38;
				float 	fTemp39 = ((fVec6[0] - fVec6[1]) / fTemp1); // step: 291
				fVec7[0] = fTemp39;
				float 	fTemp40 = ((fVec7[0] - fVec7[1]) / fTemp1); // step: 294
				fVec8[0] = fTemp40;
				float 	fTemp41 = powf(fTemp9,2.0f); // step: 302
				fVec9[0] = fTemp41;
				float 	fTemp42 = ((fTemp10 + (1.0f - (fTemp8 + fVec2[1]))) / fTemp6); // step: 313
				fVec10[0] = fTemp42;
				float 	fTemp43 = (fVec9[0] * (fVec9[0] + -2.0f)); // step: 320
				fVec11[0] = fTemp43;
				float 	fTemp44 = ((fVec11[0] - fVec11[1]) / fTemp6); // step: 323
				fVec12[0] = fTemp44;
				float 	fTemp45 = ((fVec12[0] - fVec12[1]) / fTemp6); // step: 326
				fVec13[0] = fTemp45;
				float 	fTemp46 = powf(fTemp14,2.0f); // step: 335
				fVec14[0] = fTemp46;
				float 	fTemp47 = ((fTemp15 + (1.0f - (fTemp13 + fVec3[1]))) / fTemp11); // step: 346
				fVec15[0] = fTemp47;
				float 	fTemp48 = (fVec14[0] * (fVec14[0] + -2.0f)); // step: 353
				fVec16[0] = fTemp48;
				float 	fTemp49 = ((fVec16[0] - fVec16[1]) / fTemp11); // step: 356
				fVec17[0] = fTemp49;
				float 	fTemp50 = ((fVec17[0] - fVec17[1]) / fTemp11); // step: 359
				fVec18[0] = fTemp50;
				float 	fTemp51 = (fTemp28 * ((iSlow23) ? (float)input0[i] : ((iSlow24) ? ((iSlow25) ? (((0.049922034f * fVeeec20[0]) + (0.0506127f * fTemp30)) - ((0.095993534f * fTemp32) + (0.004408786f * fTemp31))) : fTemp29) : (0.33333334f * (fTemp28 * ((((iSlow27) ? ((iSlow29) ? (fConst13 * ((fTemp37 * (fVec8[0] - fVec8[1])) / fTemp1)) : (fConst12 * ((fTemp35 * (fVec5[0] - fVec5[1])) / fTemp1))) : ((iSlow28) ? (fConst11 * ((fTemp33 * (fVec4[0] - fVec4[1])) / fTemp1)) : fTemp4)) + ((iSlow27) ? ((iSlow29) ? (fConst13 * ((fTemp37 * (fVec13[0] - fVec13[1])) / fTemp6)) : (fConst12 * ((fTemp35 * (fVec10[0] - fVec10[1])) / fTemp6))) : ((iSlow28) ? (fConst11 * ((fTemp33 * (fVec9[0] - fVec9[1])) / fTemp6)) : fTemp9))) + ((iSlow27) ? ((iSlow29) ? (fConst13 * ((fTemp37 * (fVec18[0] - fVec18[1])) / fTemp11)) : (fConst12 * ((fTemp35 * (fVec15[0] - fVec15[1])) / fTemp11))) : ((iSlow28) ? (fConst11 * ((fTemp33 * (fVec14[0] - fVec14[1])) / fTemp11)) : fTemp14)))))))); // step: 372
				fVec19[0] = fTemp51;
				float 	fTemp52 = fVec19[1]; // step: 373
				fVeeec15 = -(fSlow20 * ((fSlow21 * fVeeec15) - (fVec19[0] + fTemp52)));
				float 	fTemp53 = fVeeec14[1]; // step: 385
				fVeeec14[0] = (fVeeec15 - (fSlow19 * ((fSlow30 * fTemp27) + (fSlow32 * fTemp53))));
				float 	fTemp54 = fVeeec49[2]; // step: 403
				fVeeec50 = -(fSlow20 * ((fSlow21 * fVeeec50) - (fSlow18 * (fVec19[0] - fTemp52))));
				float 	fTemp55 = fVeeec49[1]; // step: 414
				fVeeec49[0] = (fVeeec50 - (fSlow19 * ((fSlow30 * fTemp54) + (fSlow32 * fTemp55))));
				float 	fTemp56 = (2.0f * (fVeeec13[1] * (1.0f - (1.0f / powf(fTemp18,2.0f))))); // step: 436
				fVeeec13[0] = ((fSlow19 * ((fSlow31 * (fTemp54 + (fVeeec49[0] - (2.0f * fTemp55)))) + (fSlow33 * (fTemp27 + (fVeeec14[0] + (2.0f * fTemp53)))))) - (((fTemp25 * (((fTemp19 - fTemp23) / fTemp18) + 1.0f)) + fTemp56) / fTemp24));
				float 	fTemp57 = (((fTemp56 + (fVeeec13[0] * (((fTemp19 + fTemp26) / fTemp18) + 1.0f))) + (fTemp25 * (((fTemp19 - fTemp26) / fTemp18) + 1.0f))) / fTemp24); // step: 448
				fVec20[0] = fTemp57;
				float 	fTemp58 = fVec20[1]; // step: 449
				fVeeec10 = -(fSlow9 * ((fSlow10 * fVeeec10) - (fVec20[0] + fTemp58)));
				float 	fTemp59 = fVeeec9[1]; // step: 460
				fVeeec9[0] = (fVeeec10 - (fSlow8 * ((fSlow34 * fTemp16) + (fSlow36 * fTemp59))));
				float 	fTemp60 = fVeeec60[2]; // step: 474
				fVeeec61 = -(fSlow9 * ((fSlow10 * fVeeec61) - (fSlow7 * (fVec20[0] - fTemp58))));
				float 	fTemp61 = fVeeec60[1]; // step: 485
				fVeeec60[0] = (fVeeec61 - (fSlow8 * ((fSlow34 * fTemp60) + (fSlow36 * fTemp61))));
				float 	fTemp62 = (fSlow8 * ((fTemp16 + (fVeeec9[0] + (2.0f * fTemp59))) + (fSlow37 * (fTemp60 + (fVeeec60[0] - (2.0f * fTemp61)))))); // step: 501
				float 	fTemp63 = fVeeec65[2]; // step: 502
				float 	fTemp64 = fVeeec65[1]; // step: 508
				fVeeec65[0] = (fTemp62 - (fConst7 * ((fConst14 * fTemp63) + (fConst17 * fTemp64))));
				float 	fTemp65 = fVeeec68[2]; // step: 531
				float 	fTemp66 = fVeeec68[1]; // step: 537
				fVeeec68[0] = ((fConst7 * (((fConst19 * fVeeec65[0]) + (fConst20 * fTemp64)) + (fConst19 * fTemp63))) - (fConst6 * ((fConst21 * fTemp65) + (fConst22 * fTemp66))));
				float 	fTemp67 = fVeeec71[2]; // step: 557
				float 	fTemp68 = fVeeec71[1]; // step: 563
				fVeeec71[0] = ((fConst6 * (((fConst24 * fVeeec68[0]) + (fConst25 * fTemp66)) + (fConst24 * fTemp65))) - (fConst5 * ((fConst26 * fTemp67) + (fConst27 * fTemp68))));
				fVeeec8 = ((fVeeec8 * fSlow5) + (fabsf((fConst5 * (((fConst29 * fVeeec71[0]) + (fConst30 * fTemp68)) + (fConst29 * fTemp67)))) * fSlow38));
				fbargraph0 = (fSlow4 + (2e+01f * log10f(fVeeec8)));
				float 	fTemp69 = fVeeec76[2]; // step: 629
				float 	fTemp70 = fVeeec76[1]; // step: 635
				fVeeec76[0] = (fTemp62 - (fConst38 * ((fConst39 * fTemp69) + (fConst40 * fTemp70))));
				float 	fTemp71 = fVeeec79[2]; // step: 656
				float 	fTemp72 = fVeeec79[1]; // step: 662
				fVeeec79[0] = ((fConst38 * (((fConst42 * fVeeec76[0]) + (fConst43 * fTemp70)) + (fConst42 * fTemp69))) - (fConst37 * ((fConst44 * fTemp71) + (fConst45 * fTemp72))));
				float 	fTemp73 = fVeeec82[2]; // step: 681
				float 	fTemp74 = fVeeec82[1]; // step: 687
				fVeeec82[0] = ((fConst37 * (((fConst46 * fVeeec79[0]) + (fConst47 * fTemp72)) + (fConst46 * fTemp71))) - (fConst36 * ((fConst48 * fTemp73) + (fConst49 * fTemp74))));
				float 	fTemp75 = (fConst36 * (((fConst50 * fVeeec82[0]) + (fConst51 * fTemp74)) + (fConst50 * fTemp73))); // step: 705
				float 	fTemp76 = fVeeec85[2]; // step: 706
				float 	fTemp77 = fVeeec85[1]; // step: 711
				fVeeec85[0] = (fTemp75 - (fConst35 * ((fConst52 * fTemp76) + (fConst55 * fTemp77))));
				float 	fTemp78 = fVeeec88[2]; // step: 732
				float 	fTemp79 = fVeeec88[1]; // step: 737
				fVeeec88[0] = ((fConst35 * (((fConst57 * fVeeec85[0]) + (fConst58 * fTemp77)) + (fConst57 * fTemp76))) - (fConst34 * ((fConst59 * fTemp78) + (fConst60 * fTemp79))));
				float 	fTemp80 = fVeeec91[2]; // step: 756
				float 	fTemp81 = fVeeec91[1]; // step: 761
				fVeeec91[0] = ((fConst34 * (((fConst62 * fVeeec88[0]) + (fConst63 * fTemp79)) + (fConst62 * fTemp78))) - (fConst33 * ((fConst64 * fTemp80) + (fConst65 * fTemp81))));
				fVeeec75 = ((fSlow5 * fVeeec75) + (fSlow38 * fabsf((fConst33 * (((fConst67 * fVeeec91[0]) + (fConst68 * fTemp81)) + (fConst67 * fTemp80))))));
				fbargraph1 = (fSlow4 + (2e+01f * log10f(fVeeec75)));
				float 	fTemp82 = fVeeec96[2]; // step: 820
				float 	fTemp83 = fVeeec96[1]; // step: 825
				fVeeec96[0] = (fTemp75 - (fConst76 * ((fConst77 * fTemp82) + (fConst78 * fTemp83))));
				float 	fTemp84 = fVeeec99[2]; // step: 844
				float 	fTemp85 = fVeeec99[1]; // step: 849
				fVeeec99[0] = ((fConst76 * (((fConst80 * fVeeec96[0]) + (fConst81 * fTemp83)) + (fConst80 * fTemp82))) - (fConst75 * ((fConst82 * fTemp84) + (fConst83 * fTemp85))));
				float 	fTemp86 = fVeeec102[2]; // step: 867
				float 	fTemp87 = fVeeec102[1]; // step: 872
				fVeeec102[0] = ((fConst75 * (((fConst84 * fVeeec99[0]) + (fConst85 * fTemp85)) + (fConst84 * fTemp84))) - (fConst74 * ((fConst86 * fTemp86) + (fConst87 * fTemp87))));
				float 	fTemp88 = (fConst74 * (((fConst88 * fVeeec102[0]) + (fConst89 * fTemp87)) + (fConst88 * fTemp86))); // step: 889
				float 	fTemp89 = fVeeec105[2]; // step: 890
				float 	fTemp90 = fVeeec105[1]; // step: 895
				fVeeec105[0] = (fTemp88 - (fConst73 * ((fConst90 * fTemp89) + (fConst93 * fTemp90))));
				float 	fTemp91 = fVeeec108[2]; // step: 916
				float 	fTemp92 = fVeeec108[1]; // step: 921
				fVeeec108[0] = ((fConst73 * (((fConst95 * fVeeec105[0]) + (fConst96 * fTemp90)) + (fConst95 * fTemp89))) - (fConst72 * ((fConst97 * fTemp91) + (fConst98 * fTemp92))));
				float 	fTemp93 = fVeeec111[2]; // step: 940
				float 	fTemp94 = fVeeec111[1]; // step: 945
				fVeeec111[0] = ((fConst72 * (((fConst100 * fVeeec108[0]) + (fConst101 * fTemp92)) + (fConst100 * fTemp91))) - (fConst71 * ((fConst102 * fTemp93) + (fConst103 * fTemp94))));
				fVeeec95 = ((fSlow5 * fVeeec95) + (fSlow38 * fabsf((fConst71 * (((fConst105 * fVeeec111[0]) + (fConst106 * fTemp94)) + (fConst105 * fTemp93))))));
				fbargraph2 = (fSlow4 + (2e+01f * log10f(fVeeec95)));
				float 	fTemp95 = fVeeec116[2]; // step: 1004
				float 	fTemp96 = fVeeec116[1]; // step: 1009
				fVeeec116[0] = (fTemp88 - (fConst114 * ((fConst115 * fTemp95) + (fConst116 * fTemp96))));
				float 	fTemp97 = fVeeec119[2]; // step: 1028
				float 	fTemp98 = fVeeec119[1]; // step: 1033
				fVeeec119[0] = ((fConst114 * (((fConst118 * fVeeec116[0]) + (fConst119 * fTemp96)) + (fConst118 * fTemp95))) - (fConst113 * ((fConst120 * fTemp97) + (fConst121 * fTemp98))));
				float 	fTemp99 = fVeeec122[2]; // step: 1051
				float 	fTemp100 = fVeeec122[1]; // step: 1056
				fVeeec122[0] = ((fConst113 * (((fConst122 * fVeeec119[0]) + (fConst123 * fTemp98)) + (fConst122 * fTemp97))) - (fConst112 * ((fConst124 * fTemp99) + (fConst125 * fTemp100))));
				float 	fTemp101 = (fConst112 * (((fConst126 * fVeeec122[0]) + (fConst127 * fTemp100)) + (fConst126 * fTemp99))); // step: 1073
				float 	fTemp102 = fVeeec125[2]; // step: 1074
				float 	fTemp103 = fVeeec125[1]; // step: 1079
				fVeeec125[0] = (fTemp101 - (fConst111 * ((fConst128 * fTemp102) + (fConst131 * fTemp103))));
				float 	fTemp104 = fVeeec128[2]; // step: 1100
				float 	fTemp105 = fVeeec128[1]; // step: 1105
				fVeeec128[0] = ((fConst111 * (((fConst133 * fVeeec125[0]) + (fConst134 * fTemp103)) + (fConst133 * fTemp102))) - (fConst110 * ((fConst135 * fTemp104) + (fConst136 * fTemp105))));
				float 	fTemp106 = fVeeec131[2]; // step: 1124
				float 	fTemp107 = fVeeec131[1]; // step: 1129
				fVeeec131[0] = ((fConst110 * (((fConst138 * fVeeec128[0]) + (fConst139 * fTemp105)) + (fConst138 * fTemp104))) - (fConst109 * ((fConst140 * fTemp106) + (fConst141 * fTemp107))));
				fVeeec115 = ((fSlow5 * fVeeec115) + (fSlow38 * fabsf((fConst109 * (((fConst143 * fVeeec131[0]) + (fConst144 * fTemp107)) + (fConst143 * fTemp106))))));
				fbargraph3 = (fSlow4 + (2e+01f * log10f(fVeeec115)));
				float 	fTemp108 = fVeeec136[2]; // step: 1188
				float 	fTemp109 = fVeeec136[1]; // step: 1193
				fVeeec136[0] = (fTemp101 - (fConst152 * ((fConst153 * fTemp108) + (fConst154 * fTemp109))));
				float 	fTemp110 = fVeeec139[2]; // step: 1212
				float 	fTemp111 = fVeeec139[1]; // step: 1217
				fVeeec139[0] = ((fConst152 * (((fConst156 * fVeeec136[0]) + (fConst157 * fTemp109)) + (fConst156 * fTemp108))) - (fConst151 * ((fConst158 * fTemp110) + (fConst159 * fTemp111))));
				float 	fTemp112 = fVeeec142[2]; // step: 1235
				float 	fTemp113 = fVeeec142[1]; // step: 1240
				fVeeec142[0] = ((fConst151 * (((fConst160 * fVeeec139[0]) + (fConst161 * fTemp111)) + (fConst160 * fTemp110))) - (fConst150 * ((fConst162 * fTemp112) + (fConst163 * fTemp113))));
				float 	fTemp114 = (fConst150 * (((fConst164 * fVeeec142[0]) + (fConst165 * fTemp113)) + (fConst164 * fTemp112))); // step: 1257
				float 	fTemp115 = fVeeec145[2]; // step: 1258
				float 	fTemp116 = fVeeec145[1]; // step: 1263
				fVeeec145[0] = (fTemp114 - (fConst149 * ((fConst166 * fTemp115) + (fConst169 * fTemp116))));
				float 	fTemp117 = fVeeec148[2]; // step: 1284
				float 	fTemp118 = fVeeec148[1]; // step: 1289
				fVeeec148[0] = ((fConst149 * (((fConst171 * fVeeec145[0]) + (fConst172 * fTemp116)) + (fConst171 * fTemp115))) - (fConst148 * ((fConst173 * fTemp117) + (fConst174 * fTemp118))));
				float 	fTemp119 = fVeeec151[2]; // step: 1308
				float 	fTemp120 = fVeeec151[1]; // step: 1313
				fVeeec151[0] = ((fConst148 * (((fConst176 * fVeeec148[0]) + (fConst177 * fTemp118)) + (fConst176 * fTemp117))) - (fConst147 * ((fConst178 * fTemp119) + (fConst179 * fTemp120))));
				fVeeec135 = ((fSlow5 * fVeeec135) + (fSlow38 * fabsf((fConst147 * (((fConst181 * fVeeec151[0]) + (fConst182 * fTemp120)) + (fConst181 * fTemp119))))));
				fbargraph4 = (fSlow4 + (2e+01f * log10f(fVeeec135)));
				float 	fTemp121 = fVeeec156[2]; // step: 1372
				float 	fTemp122 = fVeeec156[1]; // step: 1377
				fVeeec156[0] = (fTemp114 - (fConst190 * ((fConst191 * fTemp121) + (fConst192 * fTemp122))));
				float 	fTemp123 = fVeeec159[2]; // step: 1396
				float 	fTemp124 = fVeeec159[1]; // step: 1401
				fVeeec159[0] = ((fConst190 * (((fConst194 * fVeeec156[0]) + (fConst195 * fTemp122)) + (fConst194 * fTemp121))) - (fConst189 * ((fConst196 * fTemp123) + (fConst197 * fTemp124))));
				float 	fTemp125 = fVeeec162[2]; // step: 1419
				float 	fTemp126 = fVeeec162[1]; // step: 1424
				fVeeec162[0] = ((fConst189 * (((fConst198 * fVeeec159[0]) + (fConst199 * fTemp124)) + (fConst198 * fTemp123))) - (fConst188 * ((fConst200 * fTemp125) + (fConst201 * fTemp126))));
				float 	fTemp127 = (fConst188 * (((fConst202 * fVeeec162[0]) + (fConst203 * fTemp126)) + (fConst202 * fTemp125))); // step: 1441
				float 	fTemp128 = fVeeec165[2]; // step: 1442
				float 	fTemp129 = fVeeec165[1]; // step: 1447
				fVeeec165[0] = (fTemp127 - (fConst187 * ((fConst204 * fTemp128) + (fConst207 * fTemp129))));
				float 	fTemp130 = fVeeec168[2]; // step: 1468
				float 	fTemp131 = fVeeec168[1]; // step: 1473
				fVeeec168[0] = ((fConst187 * (((fConst209 * fVeeec165[0]) + (fConst210 * fTemp129)) + (fConst209 * fTemp128))) - (fConst186 * ((fConst211 * fTemp130) + (fConst212 * fTemp131))));
				float 	fTemp132 = fVeeec171[2]; // step: 1492
				float 	fTemp133 = fVeeec171[1]; // step: 1497
				fVeeec171[0] = ((fConst186 * (((fConst214 * fVeeec168[0]) + (fConst215 * fTemp131)) + (fConst214 * fTemp130))) - (fConst185 * ((fConst216 * fTemp132) + (fConst217 * fTemp133))));
				fVeeec155 = ((fSlow5 * fVeeec155) + (fSlow38 * fabsf((fConst185 * (((fConst219 * fVeeec171[0]) + (fConst220 * fTemp133)) + (fConst219 * fTemp132))))));
				fbargraph5 = (fSlow4 + (2e+01f * log10f(fVeeec155)));
				float 	fTemp134 = fVeeec176[2]; // step: 1556
				float 	fTemp135 = fVeeec176[1]; // step: 1561
				fVeeec176[0] = (fTemp127 - (fConst228 * ((fConst229 * fTemp134) + (fConst230 * fTemp135))));
				float 	fTemp136 = fVeeec179[2]; // step: 1580
				float 	fTemp137 = fVeeec179[1]; // step: 1585
				fVeeec179[0] = ((fConst228 * (((fConst232 * fVeeec176[0]) + (fConst233 * fTemp135)) + (fConst232 * fTemp134))) - (fConst227 * ((fConst234 * fTemp136) + (fConst235 * fTemp137))));
				float 	fTemp138 = fVeeec182[2]; // step: 1603
				float 	fTemp139 = fVeeec182[1]; // step: 1608
				fVeeec182[0] = ((fConst227 * (((fConst236 * fVeeec179[0]) + (fConst237 * fTemp137)) + (fConst236 * fTemp136))) - (fConst226 * ((fConst238 * fTemp138) + (fConst239 * fTemp139))));
				float 	fTemp140 = (fConst226 * (((fConst240 * fVeeec182[0]) + (fConst241 * fTemp139)) + (fConst240 * fTemp138))); // step: 1625
				float 	fTemp141 = fVeeec185[2]; // step: 1626
				float 	fTemp142 = fVeeec185[1]; // step: 1631
				fVeeec185[0] = (fTemp140 - (fConst225 * ((fConst242 * fTemp141) + (fConst245 * fTemp142))));
				float 	fTemp143 = fVeeec188[2]; // step: 1652
				float 	fTemp144 = fVeeec188[1]; // step: 1657
				fVeeec188[0] = ((fConst225 * (((fConst247 * fVeeec185[0]) + (fConst248 * fTemp142)) + (fConst247 * fTemp141))) - (fConst224 * ((fConst249 * fTemp143) + (fConst250 * fTemp144))));
				float 	fTemp145 = fVeeec191[2]; // step: 1676
				float 	fTemp146 = fVeeec191[1]; // step: 1681
				fVeeec191[0] = ((fConst224 * (((fConst252 * fVeeec188[0]) + (fConst253 * fTemp144)) + (fConst252 * fTemp143))) - (fConst223 * ((fConst254 * fTemp145) + (fConst255 * fTemp146))));
				fVeeec175 = ((fSlow5 * fVeeec175) + (fSlow38 * fabsf((fConst223 * (((fConst257 * fVeeec191[0]) + (fConst258 * fTemp146)) + (fConst257 * fTemp145))))));
				fbargraph6 = (fSlow4 + (2e+01f * log10f(fVeeec175)));
				float 	fTemp147 = fVeeec196[2]; // step: 1740
				float 	fTemp148 = fVeeec196[1]; // step: 1745
				fVeeec196[0] = (fTemp140 - (fConst266 * ((fConst267 * fTemp147) + (fConst268 * fTemp148))));
				float 	fTemp149 = fVeeec199[2]; // step: 1764
				float 	fTemp150 = fVeeec199[1]; // step: 1769
				fVeeec199[0] = ((fConst266 * (((fConst270 * fVeeec196[0]) + (fConst271 * fTemp148)) + (fConst270 * fTemp147))) - (fConst265 * ((fConst272 * fTemp149) + (fConst273 * fTemp150))));
				float 	fTemp151 = fVeeec202[2]; // step: 1787
				float 	fTemp152 = fVeeec202[1]; // step: 1792
				fVeeec202[0] = ((fConst265 * (((fConst274 * fVeeec199[0]) + (fConst275 * fTemp150)) + (fConst274 * fTemp149))) - (fConst264 * ((fConst276 * fTemp151) + (fConst277 * fTemp152))));
				float 	fTemp153 = (fConst264 * (((fConst278 * fVeeec202[0]) + (fConst279 * fTemp152)) + (fConst278 * fTemp151))); // step: 1809
				float 	fTemp154 = fVeeec205[2]; // step: 1810
				float 	fTemp155 = fVeeec205[1]; // step: 1815
				fVeeec205[0] = (fTemp153 - (fConst263 * ((fConst280 * fTemp154) + (fConst283 * fTemp155))));
				float 	fTemp156 = fVeeec208[2]; // step: 1836
				float 	fTemp157 = fVeeec208[1]; // step: 1841
				fVeeec208[0] = ((fConst263 * (((fConst285 * fVeeec205[0]) + (fConst286 * fTemp155)) + (fConst285 * fTemp154))) - (fConst262 * ((fConst287 * fTemp156) + (fConst288 * fTemp157))));
				float 	fTemp158 = fVeeec211[2]; // step: 1860
				float 	fTemp159 = fVeeec211[1]; // step: 1865
				fVeeec211[0] = ((fConst262 * (((fConst290 * fVeeec208[0]) + (fConst291 * fTemp157)) + (fConst290 * fTemp156))) - (fConst261 * ((fConst292 * fTemp158) + (fConst293 * fTemp159))));
				fVeeec195 = ((fSlow5 * fVeeec195) + (fSlow38 * fabsf((fConst261 * (((fConst295 * fVeeec211[0]) + (fConst296 * fTemp159)) + (fConst295 * fTemp158))))));
				fbargraph7 = (fSlow4 + (2e+01f * log10f(fVeeec195)));
				float 	fTemp160 = fVeeec216[2]; // step: 1924
				float 	fTemp161 = fVeeec216[1]; // step: 1929
				fVeeec216[0] = (fTemp153 - (fConst304 * ((fConst305 * fTemp160) + (fConst306 * fTemp161))));
				float 	fTemp162 = fVeeec219[2]; // step: 1948
				float 	fTemp163 = fVeeec219[1]; // step: 1953
				fVeeec219[0] = ((fConst304 * (((fConst308 * fVeeec216[0]) + (fConst309 * fTemp161)) + (fConst308 * fTemp160))) - (fConst303 * ((fConst310 * fTemp162) + (fConst311 * fTemp163))));
				float 	fTemp164 = fVeeec222[2]; // step: 1971
				float 	fTemp165 = fVeeec222[1]; // step: 1976
				fVeeec222[0] = ((fConst303 * (((fConst312 * fVeeec219[0]) + (fConst313 * fTemp163)) + (fConst312 * fTemp162))) - (fConst302 * ((fConst314 * fTemp164) + (fConst315 * fTemp165))));
				float 	fTemp166 = (fConst302 * (((fConst316 * fVeeec222[0]) + (fConst317 * fTemp165)) + (fConst316 * fTemp164))); // step: 1993
				float 	fTemp167 = fVeeec225[2]; // step: 1994
				float 	fTemp168 = fVeeec225[1]; // step: 1999
				fVeeec225[0] = (fTemp166 - (fConst301 * ((fConst318 * fTemp167) + (fConst321 * fTemp168))));
				float 	fTemp169 = fVeeec228[2]; // step: 2020
				float 	fTemp170 = fVeeec228[1]; // step: 2025
				fVeeec228[0] = ((fConst301 * (((fConst323 * fVeeec225[0]) + (fConst324 * fTemp168)) + (fConst323 * fTemp167))) - (fConst300 * ((fConst325 * fTemp169) + (fConst326 * fTemp170))));
				float 	fTemp171 = fVeeec231[2]; // step: 2044
				float 	fTemp172 = fVeeec231[1]; // step: 2049
				fVeeec231[0] = ((fConst300 * (((fConst328 * fVeeec228[0]) + (fConst329 * fTemp170)) + (fConst328 * fTemp169))) - (fConst299 * ((fConst330 * fTemp171) + (fConst331 * fTemp172))));
				fVeeec215 = ((fSlow5 * fVeeec215) + (fSlow38 * fabsf((fConst299 * (((fConst333 * fVeeec231[0]) + (fConst334 * fTemp172)) + (fConst333 * fTemp171))))));
				fbargraph8 = (fSlow4 + (2e+01f * log10f(fVeeec215)));
				float 	fTemp173 = fVeeec236[2]; // step: 2108
				float 	fTemp174 = fVeeec236[1]; // step: 2113
				fVeeec236[0] = (fTemp166 - (fConst342 * ((fConst343 * fTemp173) + (fConst344 * fTemp174))));
				float 	fTemp175 = fVeeec239[2]; // step: 2132
				float 	fTemp176 = fVeeec239[1]; // step: 2137
				fVeeec239[0] = ((fConst342 * (((fConst346 * fVeeec236[0]) + (fConst347 * fTemp174)) + (fConst346 * fTemp173))) - (fConst341 * ((fConst348 * fTemp175) + (fConst349 * fTemp176))));
				float 	fTemp177 = fVeeec242[2]; // step: 2155
				float 	fTemp178 = fVeeec242[1]; // step: 2160
				fVeeec242[0] = ((fConst341 * (((fConst350 * fVeeec239[0]) + (fConst351 * fTemp176)) + (fConst350 * fTemp175))) - (fConst340 * ((fConst352 * fTemp177) + (fConst353 * fTemp178))));
				float 	fTemp179 = (fConst340 * (((fConst354 * fVeeec242[0]) + (fConst355 * fTemp178)) + (fConst354 * fTemp177))); // step: 2177
				float 	fTemp180 = fVeeec245[2]; // step: 2178
				float 	fTemp181 = fVeeec245[1]; // step: 2183
				fVeeec245[0] = (fTemp179 - (fConst339 * ((fConst356 * fTemp180) + (fConst359 * fTemp181))));
				float 	fTemp182 = fVeeec248[2]; // step: 2204
				float 	fTemp183 = fVeeec248[1]; // step: 2209
				fVeeec248[0] = ((fConst339 * (((fConst361 * fVeeec245[0]) + (fConst362 * fTemp181)) + (fConst361 * fTemp180))) - (fConst338 * ((fConst363 * fTemp182) + (fConst364 * fTemp183))));
				float 	fTemp184 = fVeeec251[2]; // step: 2228
				float 	fTemp185 = fVeeec251[1]; // step: 2233
				fVeeec251[0] = ((fConst338 * (((fConst366 * fVeeec248[0]) + (fConst367 * fTemp183)) + (fConst366 * fTemp182))) - (fConst337 * ((fConst368 * fTemp184) + (fConst369 * fTemp185))));
				fVeeec235 = ((fSlow5 * fVeeec235) + (fSlow38 * fabsf((fConst337 * (((fConst371 * fVeeec251[0]) + (fConst372 * fTemp185)) + (fConst371 * fTemp184))))));
				fbargraph9 = (fSlow4 + (2e+01f * log10f(fVeeec235)));
				float 	fTemp186 = fVeeec256[2]; // step: 2292
				float 	fTemp187 = fVeeec256[1]; // step: 2297
				fVeeec256[0] = (fTemp179 - (fConst380 * ((fConst381 * fTemp186) + (fConst382 * fTemp187))));
				float 	fTemp188 = fVeeec259[2]; // step: 2316
				float 	fTemp189 = fVeeec259[1]; // step: 2321
				fVeeec259[0] = ((fConst380 * (((fConst384 * fVeeec256[0]) + (fConst385 * fTemp187)) + (fConst384 * fTemp186))) - (fConst379 * ((fConst386 * fTemp188) + (fConst387 * fTemp189))));
				float 	fTemp190 = fVeeec262[2]; // step: 2339
				float 	fTemp191 = fVeeec262[1]; // step: 2344
				fVeeec262[0] = ((fConst379 * (((fConst388 * fVeeec259[0]) + (fConst389 * fTemp189)) + (fConst388 * fTemp188))) - (fConst378 * ((fConst390 * fTemp190) + (fConst391 * fTemp191))));
				float 	fTemp192 = (fConst378 * (((fConst392 * fVeeec262[0]) + (fConst393 * fTemp191)) + (fConst392 * fTemp190))); // step: 2361
				float 	fTemp193 = fVeeec265[2]; // step: 2362
				float 	fTemp194 = fVeeec265[1]; // step: 2367
				fVeeec265[0] = (fTemp192 - (fConst377 * ((fConst394 * fTemp193) + (fConst397 * fTemp194))));
				float 	fTemp195 = fVeeec268[2]; // step: 2388
				float 	fTemp196 = fVeeec268[1]; // step: 2393
				fVeeec268[0] = ((fConst377 * (((fConst399 * fVeeec265[0]) + (fConst400 * fTemp194)) + (fConst399 * fTemp193))) - (fConst376 * ((fConst401 * fTemp195) + (fConst402 * fTemp196))));
				float 	fTemp197 = fVeeec271[2]; // step: 2412
				float 	fTemp198 = fVeeec271[1]; // step: 2417
				fVeeec271[0] = ((fConst376 * (((fConst404 * fVeeec268[0]) + (fConst405 * fTemp196)) + (fConst404 * fTemp195))) - (fConst375 * ((fConst406 * fTemp197) + (fConst407 * fTemp198))));
				fVeeec255 = ((fSlow5 * fVeeec255) + (fSlow38 * fabsf((fConst375 * (((fConst409 * fVeeec271[0]) + (fConst410 * fTemp198)) + (fConst409 * fTemp197))))));
				fbargraph10 = (fSlow4 + (2e+01f * log10f(fVeeec255)));
				float 	fTemp199 = fVeeec276[2]; // step: 2476
				float 	fTemp200 = fVeeec276[1]; // step: 2481
				fVeeec276[0] = (fTemp192 - (fConst418 * ((fConst419 * fTemp199) + (fConst420 * fTemp200))));
				float 	fTemp201 = fVeeec279[2]; // step: 2500
				float 	fTemp202 = fVeeec279[1]; // step: 2505
				fVeeec279[0] = ((fConst418 * (((fConst422 * fVeeec276[0]) + (fConst423 * fTemp200)) + (fConst422 * fTemp199))) - (fConst417 * ((fConst424 * fTemp201) + (fConst425 * fTemp202))));
				float 	fTemp203 = fVeeec282[2]; // step: 2523
				float 	fTemp204 = fVeeec282[1]; // step: 2528
				fVeeec282[0] = ((fConst417 * (((fConst426 * fVeeec279[0]) + (fConst427 * fTemp202)) + (fConst426 * fTemp201))) - (fConst416 * ((fConst428 * fTemp203) + (fConst429 * fTemp204))));
				float 	fTemp205 = (fConst416 * (((fConst430 * fVeeec282[0]) + (fConst431 * fTemp204)) + (fConst430 * fTemp203))); // step: 2545
				float 	fTemp206 = fVeeec285[2]; // step: 2546
				float 	fTemp207 = fVeeec285[1]; // step: 2551
				fVeeec285[0] = (fTemp205 - (fConst415 * ((fConst432 * fTemp206) + (fConst435 * fTemp207))));
				float 	fTemp208 = fVeeec288[2]; // step: 2572
				float 	fTemp209 = fVeeec288[1]; // step: 2577
				fVeeec288[0] = ((fConst415 * (((fConst437 * fVeeec285[0]) + (fConst438 * fTemp207)) + (fConst437 * fTemp206))) - (fConst414 * ((fConst439 * fTemp208) + (fConst440 * fTemp209))));
				float 	fTemp210 = fVeeec291[2]; // step: 2596
				float 	fTemp211 = fVeeec291[1]; // step: 2601
				fVeeec291[0] = ((fConst414 * (((fConst442 * fVeeec288[0]) + (fConst443 * fTemp209)) + (fConst442 * fTemp208))) - (fConst413 * ((fConst444 * fTemp210) + (fConst445 * fTemp211))));
				fVeeec275 = ((fSlow5 * fVeeec275) + (fSlow38 * fabsf((fConst413 * (((fConst447 * fVeeec291[0]) + (fConst448 * fTemp211)) + (fConst447 * fTemp210))))));
				fbargraph11 = (fSlow4 + (2e+01f * log10f(fVeeec275)));
				float 	fTemp212 = fVeeec296[2]; // step: 2660
				float 	fTemp213 = fVeeec296[1]; // step: 2665
				fVeeec296[0] = (fTemp205 - (fConst456 * ((fConst457 * fTemp212) + (fConst458 * fTemp213))));
				float 	fTemp214 = fVeeec299[2]; // step: 2684
				float 	fTemp215 = fVeeec299[1]; // step: 2689
				fVeeec299[0] = ((fConst456 * (((fConst460 * fVeeec296[0]) + (fConst461 * fTemp213)) + (fConst460 * fTemp212))) - (fConst455 * ((fConst462 * fTemp214) + (fConst463 * fTemp215))));
				float 	fTemp216 = fVeeec302[2]; // step: 2707
				float 	fTemp217 = fVeeec302[1]; // step: 2712
				fVeeec302[0] = ((fConst455 * (((fConst464 * fVeeec299[0]) + (fConst465 * fTemp215)) + (fConst464 * fTemp214))) - (fConst454 * ((fConst466 * fTemp216) + (fConst467 * fTemp217))));
				float 	fTemp218 = (fConst454 * (((fConst468 * fVeeec302[0]) + (fConst469 * fTemp217)) + (fConst468 * fTemp216))); // step: 2729
				float 	fTemp219 = fVeeec305[2]; // step: 2730
				float 	fTemp220 = fVeeec305[1]; // step: 2735
				fVeeec305[0] = (fTemp218 - (fConst453 * ((fConst470 * fTemp219) + (fConst473 * fTemp220))));
				float 	fTemp221 = fVeeec308[2]; // step: 2756
				float 	fTemp222 = fVeeec308[1]; // step: 2761
				fVeeec308[0] = ((fConst453 * (((fConst475 * fVeeec305[0]) + (fConst476 * fTemp220)) + (fConst475 * fTemp219))) - (fConst452 * ((fConst477 * fTemp221) + (fConst478 * fTemp222))));
				float 	fTemp223 = fVeeec311[2]; // step: 2780
				float 	fTemp224 = fVeeec311[1]; // step: 2785
				fVeeec311[0] = ((fConst452 * (((fConst480 * fVeeec308[0]) + (fConst481 * fTemp222)) + (fConst480 * fTemp221))) - (fConst451 * ((fConst482 * fTemp223) + (fConst483 * fTemp224))));
				fVeeec295 = ((fSlow5 * fVeeec295) + (fSlow38 * fabsf((fConst451 * (((fConst485 * fVeeec311[0]) + (fConst486 * fTemp224)) + (fConst485 * fTemp223))))));
				fbargraph12 = (fSlow4 + (2e+01f * log10f(fVeeec295)));
				float 	fTemp225 = fVeeec316[2]; // step: 2844
				float 	fTemp226 = fVeeec316[1]; // step: 2849
				fVeeec316[0] = (fTemp218 - (fConst494 * ((fConst495 * fTemp225) + (fConst496 * fTemp226))));
				float 	fTemp227 = fVeeec319[2]; // step: 2868
				float 	fTemp228 = fVeeec319[1]; // step: 2873
				fVeeec319[0] = ((fConst494 * (((fConst498 * fVeeec316[0]) + (fConst499 * fTemp226)) + (fConst498 * fTemp225))) - (fConst493 * ((fConst500 * fTemp227) + (fConst501 * fTemp228))));
				float 	fTemp229 = fVeeec322[2]; // step: 2891
				float 	fTemp230 = fVeeec322[1]; // step: 2896
				fVeeec322[0] = ((fConst493 * (((fConst502 * fVeeec319[0]) + (fConst503 * fTemp228)) + (fConst502 * fTemp227))) - (fConst492 * ((fConst504 * fTemp229) + (fConst505 * fTemp230))));
				float 	fTemp231 = (fConst492 * (((fConst506 * fVeeec322[0]) + (fConst507 * fTemp230)) + (fConst506 * fTemp229))); // step: 2913
				float 	fTemp232 = fVeeec325[2]; // step: 2914
				float 	fTemp233 = fVeeec325[1]; // step: 2919
				fVeeec325[0] = (fTemp231 - (fConst491 * ((fConst508 * fTemp232) + (fConst511 * fTemp233))));
				float 	fTemp234 = fVeeec328[2]; // step: 2940
				float 	fTemp235 = fVeeec328[1]; // step: 2945
				fVeeec328[0] = ((fConst491 * (((fConst513 * fVeeec325[0]) + (fConst514 * fTemp233)) + (fConst513 * fTemp232))) - (fConst490 * ((fConst515 * fTemp234) + (fConst516 * fTemp235))));
				float 	fTemp236 = fVeeec331[2]; // step: 2964
				float 	fTemp237 = fVeeec331[1]; // step: 2969
				fVeeec331[0] = ((fConst490 * (((fConst518 * fVeeec328[0]) + (fConst519 * fTemp235)) + (fConst518 * fTemp234))) - (fConst489 * ((fConst520 * fTemp236) + (fConst521 * fTemp237))));
				fVeeec315 = ((fSlow5 * fVeeec315) + (fSlow38 * fabsf((fConst489 * (((fConst523 * fVeeec331[0]) + (fConst524 * fTemp237)) + (fConst523 * fTemp236))))));
				fbargraph13 = (fSlow4 + (2e+01f * log10f(fVeeec315)));
				float 	fTemp238 = fVeeec336[2]; // step: 3028
				float 	fTemp239 = fVeeec336[1]; // step: 3033
				fVeeec336[0] = (fTemp231 - (fConst532 * ((fConst533 * fTemp238) + (fConst534 * fTemp239))));
				float 	fTemp240 = fVeeec339[2]; // step: 3052
				float 	fTemp241 = fVeeec339[1]; // step: 3057
				fVeeec339[0] = ((fConst532 * (((fConst536 * fVeeec336[0]) + (fConst537 * fTemp239)) + (fConst536 * fTemp238))) - (fConst531 * ((fConst538 * fTemp240) + (fConst539 * fTemp241))));
				float 	fTemp242 = fVeeec342[2]; // step: 3075
				float 	fTemp243 = fVeeec342[1]; // step: 3080
				fVeeec342[0] = ((fConst531 * (((fConst540 * fVeeec339[0]) + (fConst541 * fTemp241)) + (fConst540 * fTemp240))) - (fConst530 * ((fConst542 * fTemp242) + (fConst543 * fTemp243))));
				float 	fTemp244 = (fConst530 * (((fConst544 * fVeeec342[0]) + (fConst545 * fTemp243)) + (fConst544 * fTemp242))); // step: 3097
				float 	fTemp245 = fVeeec345[2]; // step: 3098
				float 	fTemp246 = fVeeec345[1]; // step: 3103
				fVeeec345[0] = (fTemp244 - (fConst529 * ((fConst546 * fTemp245) + (fConst549 * fTemp246))));
				float 	fTemp247 = fVeeec348[2]; // step: 3124
				float 	fTemp248 = fVeeec348[1]; // step: 3129
				fVeeec348[0] = ((fConst529 * (((fConst551 * fVeeec345[0]) + (fConst552 * fTemp246)) + (fConst551 * fTemp245))) - (fConst528 * ((fConst553 * fTemp247) + (fConst554 * fTemp248))));
				float 	fTemp249 = fVeeec351[2]; // step: 3148
				float 	fTemp250 = fVeeec351[1]; // step: 3153
				fVeeec351[0] = ((fConst528 * (((fConst556 * fVeeec348[0]) + (fConst557 * fTemp248)) + (fConst556 * fTemp247))) - (fConst527 * ((fConst558 * fTemp249) + (fConst559 * fTemp250))));
				fVeeec335 = ((fSlow5 * fVeeec335) + (fSlow38 * fabsf((fConst527 * (((fConst561 * fVeeec351[0]) + (fConst562 * fTemp250)) + (fConst561 * fTemp249))))));
				fbargraph14 = (fSlow4 + (2e+01f * log10f(fVeeec335)));
				float 	fTemp251 = fVeeec356[2]; // step: 3212
				float 	fTemp252 = fVeeec356[1]; // step: 3217
				fVeeec356[0] = (fTemp244 - (fConst570 * ((fConst571 * fTemp251) + (fConst572 * fTemp252))));
				float 	fTemp253 = fVeeec359[2]; // step: 3236
				float 	fTemp254 = fVeeec359[1]; // step: 3241
				fVeeec359[0] = ((fConst570 * (((fConst574 * fVeeec356[0]) + (fConst575 * fTemp252)) + (fConst574 * fTemp251))) - (fConst569 * ((fConst576 * fTemp253) + (fConst577 * fTemp254))));
				float 	fTemp255 = fVeeec362[2]; // step: 3259
				float 	fTemp256 = fVeeec362[1]; // step: 3264
				fVeeec362[0] = ((fConst569 * (((fConst578 * fVeeec359[0]) + (fConst579 * fTemp254)) + (fConst578 * fTemp253))) - (fConst568 * ((fConst580 * fTemp255) + (fConst581 * fTemp256))));
				float 	fTemp257 = (fConst568 * (((fConst582 * fVeeec362[0]) + (fConst583 * fTemp256)) + (fConst582 * fTemp255))); // step: 3281
				float 	fTemp258 = fVeeec365[2]; // step: 3282
				float 	fTemp259 = fVeeec365[1]; // step: 3287
				fVeeec365[0] = (fTemp257 - (fConst567 * ((fConst584 * fTemp258) + (fConst587 * fTemp259))));
				float 	fTemp260 = fVeeec368[2]; // step: 3308
				float 	fTemp261 = fVeeec368[1]; // step: 3313
				fVeeec368[0] = ((fConst567 * (((fConst589 * fVeeec365[0]) + (fConst590 * fTemp259)) + (fConst589 * fTemp258))) - (fConst566 * ((fConst591 * fTemp260) + (fConst592 * fTemp261))));
				float 	fTemp262 = fVeeec371[2]; // step: 3332
				float 	fTemp263 = fVeeec371[1]; // step: 3337
				fVeeec371[0] = ((fConst566 * (((fConst594 * fVeeec368[0]) + (fConst595 * fTemp261)) + (fConst594 * fTemp260))) - (fConst565 * ((fConst596 * fTemp262) + (fConst597 * fTemp263))));
				fVeeec355 = ((fSlow5 * fVeeec355) + (fSlow38 * fabsf((fConst565 * (((fConst599 * fVeeec371[0]) + (fConst600 * fTemp263)) + (fConst599 * fTemp262))))));
				fbargraph15 = (fSlow4 + (2e+01f * log10f(fVeeec355)));
				float 	fTemp264 = fVeeec376[2]; // step: 3396
				float 	fTemp265 = fVeeec376[1]; // step: 3401
				fVeeec376[0] = (fTemp257 - (fConst608 * ((fConst609 * fTemp264) + (fConst610 * fTemp265))));
				float 	fTemp266 = fVeeec379[2]; // step: 3420
				float 	fTemp267 = fVeeec379[1]; // step: 3425
				fVeeec379[0] = ((fConst608 * (((fConst612 * fVeeec376[0]) + (fConst613 * fTemp265)) + (fConst612 * fTemp264))) - (fConst607 * ((fConst614 * fTemp266) + (fConst615 * fTemp267))));
				float 	fTemp268 = fVeeec382[2]; // step: 3443
				float 	fTemp269 = fVeeec382[1]; // step: 3448
				fVeeec382[0] = ((fConst607 * (((fConst616 * fVeeec379[0]) + (fConst617 * fTemp267)) + (fConst616 * fTemp266))) - (fConst606 * ((fConst618 * fTemp268) + (fConst619 * fTemp269))));
				float 	fTemp270 = (fConst606 * (((fConst620 * fVeeec382[0]) + (fConst621 * fTemp269)) + (fConst620 * fTemp268))); // step: 3465
				float 	fTemp271 = fVeeec385[2]; // step: 3466
				float 	fTemp272 = fVeeec385[1]; // step: 3471
				fVeeec385[0] = (fTemp270 - (fConst605 * ((fConst622 * fTemp271) + (fConst625 * fTemp272))));
				float 	fTemp273 = fVeeec388[2]; // step: 3492
				float 	fTemp274 = fVeeec388[1]; // step: 3497
				fVeeec388[0] = ((fConst605 * (((fConst627 * fVeeec385[0]) + (fConst628 * fTemp272)) + (fConst627 * fTemp271))) - (fConst604 * ((fConst629 * fTemp273) + (fConst630 * fTemp274))));
				float 	fTemp275 = fVeeec391[2]; // step: 3516
				float 	fTemp276 = fVeeec391[1]; // step: 3521
				fVeeec391[0] = ((fConst604 * (((fConst632 * fVeeec388[0]) + (fConst633 * fTemp274)) + (fConst632 * fTemp273))) - (fConst603 * ((fConst634 * fTemp275) + (fConst635 * fTemp276))));
				fVeeec375 = ((fSlow5 * fVeeec375) + (fSlow38 * fabsf((fConst603 * (((fConst637 * fVeeec391[0]) + (fConst638 * fTemp276)) + (fConst637 * fTemp275))))));
				fbargraph16 = (fSlow4 + (2e+01f * log10f(fVeeec375)));
				float 	fTemp277 = fVeeec396[2]; // step: 3580
				float 	fTemp278 = fVeeec396[1]; // step: 3585
				fVeeec396[0] = (fTemp270 - (fConst646 * ((fConst647 * fTemp277) + (fConst648 * fTemp278))));
				float 	fTemp279 = fVeeec399[2]; // step: 3604
				float 	fTemp280 = fVeeec399[1]; // step: 3609
				fVeeec399[0] = ((fConst646 * (((fConst650 * fVeeec396[0]) + (fConst651 * fTemp278)) + (fConst650 * fTemp277))) - (fConst645 * ((fConst652 * fTemp279) + (fConst653 * fTemp280))));
				float 	fTemp281 = fVeeec402[2]; // step: 3627
				float 	fTemp282 = fVeeec402[1]; // step: 3632
				fVeeec402[0] = ((fConst645 * (((fConst654 * fVeeec399[0]) + (fConst655 * fTemp280)) + (fConst654 * fTemp279))) - (fConst644 * ((fConst656 * fTemp281) + (fConst657 * fTemp282))));
				float 	fTemp283 = (fConst644 * (((fConst658 * fVeeec402[0]) + (fConst659 * fTemp282)) + (fConst658 * fTemp281))); // step: 3649
				float 	fTemp284 = fVeeec405[2]; // step: 3650
				float 	fTemp285 = fVeeec405[1]; // step: 3655
				fVeeec405[0] = (fTemp283 - (fConst643 * ((fConst660 * fTemp284) + (fConst663 * fTemp285))));
				float 	fTemp286 = fVeeec408[2]; // step: 3676
				float 	fTemp287 = fVeeec408[1]; // step: 3681
				fVeeec408[0] = ((fConst643 * (((fConst665 * fVeeec405[0]) + (fConst666 * fTemp285)) + (fConst665 * fTemp284))) - (fConst642 * ((fConst667 * fTemp286) + (fConst668 * fTemp287))));
				float 	fTemp288 = fVeeec411[2]; // step: 3700
				float 	fTemp289 = fVeeec411[1]; // step: 3705
				fVeeec411[0] = ((fConst642 * (((fConst670 * fVeeec408[0]) + (fConst671 * fTemp287)) + (fConst670 * fTemp286))) - (fConst641 * ((fConst672 * fTemp288) + (fConst673 * fTemp289))));
				fVeeec395 = ((fSlow5 * fVeeec395) + (fSlow38 * fabsf((fConst641 * (((fConst675 * fVeeec411[0]) + (fConst676 * fTemp289)) + (fConst675 * fTemp288))))));
				fbargraph17 = (fSlow4 + (2e+01f * log10f(fVeeec395)));
				float 	fTemp290 = fVeeec416[2]; // step: 3764
				float 	fTemp291 = fVeeec416[1]; // step: 3769
				fVeeec416[0] = (fTemp283 - (fConst684 * ((fConst685 * fTemp290) + (fConst686 * fTemp291))));
				float 	fTemp292 = fVeeec419[2]; // step: 3788
				float 	fTemp293 = fVeeec419[1]; // step: 3793
				fVeeec419[0] = ((fConst684 * (((fConst688 * fVeeec416[0]) + (fConst689 * fTemp291)) + (fConst688 * fTemp290))) - (fConst683 * ((fConst690 * fTemp292) + (fConst691 * fTemp293))));
				float 	fTemp294 = fVeeec422[2]; // step: 3811
				float 	fTemp295 = fVeeec422[1]; // step: 3816
				fVeeec422[0] = ((fConst683 * (((fConst692 * fVeeec419[0]) + (fConst693 * fTemp293)) + (fConst692 * fTemp292))) - (fConst682 * ((fConst694 * fTemp294) + (fConst695 * fTemp295))));
				float 	fTemp296 = (fConst682 * (((fConst696 * fVeeec422[0]) + (fConst697 * fTemp295)) + (fConst696 * fTemp294))); // step: 3833
				float 	fTemp297 = fVeeec425[2]; // step: 3834
				float 	fTemp298 = fVeeec425[1]; // step: 3839
				fVeeec425[0] = (fTemp296 - (fConst681 * ((fConst698 * fTemp297) + (fConst701 * fTemp298))));
				float 	fTemp299 = fVeeec428[2]; // step: 3860
				float 	fTemp300 = fVeeec428[1]; // step: 3865
				fVeeec428[0] = ((fConst681 * (((fConst703 * fVeeec425[0]) + (fConst704 * fTemp298)) + (fConst703 * fTemp297))) - (fConst680 * ((fConst705 * fTemp299) + (fConst706 * fTemp300))));
				float 	fTemp301 = fVeeec431[2]; // step: 3884
				float 	fTemp302 = fVeeec431[1]; // step: 3889
				fVeeec431[0] = ((fConst680 * (((fConst708 * fVeeec428[0]) + (fConst709 * fTemp300)) + (fConst708 * fTemp299))) - (fConst679 * ((fConst710 * fTemp301) + (fConst711 * fTemp302))));
				fVeeec415 = ((fSlow5 * fVeeec415) + (fSlow38 * fabsf((fConst679 * (((fConst713 * fVeeec431[0]) + (fConst714 * fTemp302)) + (fConst713 * fTemp301))))));
				fbargraph18 = (fSlow4 + (2e+01f * log10f(fVeeec415)));
				float 	fTemp303 = fVeeec436[2]; // step: 3932
				float 	fTemp304 = fVeeec436[1]; // step: 3937
				fVeeec436[0] = (fTemp296 - (fConst717 * ((fConst718 * fTemp303) + (fConst719 * fTemp304))));
				float 	fTemp305 = fVeeec439[2]; // step: 3956
				float 	fTemp306 = fVeeec439[1]; // step: 3961
				fVeeec439[0] = ((fConst717 * (((fConst721 * fVeeec436[0]) + (fConst722 * fTemp304)) + (fConst721 * fTemp303))) - (fConst716 * ((fConst723 * fTemp305) + (fConst724 * fTemp306))));
				float 	fTemp307 = fVeeec442[2]; // step: 3979
				float 	fTemp308 = fVeeec442[1]; // step: 3984
				fVeeec442[0] = ((fConst716 * (((fConst725 * fVeeec439[0]) + (fConst726 * fTemp306)) + (fConst725 * fTemp305))) - (fConst715 * ((fConst727 * fTemp307) + (fConst728 * fTemp308))));
				fVeeec435 = ((fSlow5 * fVeeec435) + (fSlow38 * fabsf((fConst715 * (((fConst729 * fVeeec442[0]) + (fConst730 * fTemp308)) + (fConst729 * fTemp307))))));
				fbargraph19 = (fSlow4 + (2e+01f * log10f(fVeeec435)));
				float 	fTemp309 = fTemp62; // step: 4012
				output0[i] = (FAUSTFLOAT)(fTemp309);  // Zone Exec Code
				output1[i] = (FAUSTFLOAT)(fTemp309);  // Zone Exec Code
				// post processing
				fVeeec442[2] = fVeeec442[1];
				fVeeec442[1] = fVeeec442[0];
				fVeeec439[2] = fVeeec439[1];
				fVeeec439[1] = fVeeec439[0];
				fVeeec436[2] = fVeeec436[1];
				fVeeec436[1] = fVeeec436[0];
				fVeeec431[2] = fVeeec431[1];
				fVeeec431[1] = fVeeec431[0];
				fVeeec428[2] = fVeeec428[1];
				fVeeec428[1] = fVeeec428[0];
				fVeeec425[2] = fVeeec425[1];
				fVeeec425[1] = fVeeec425[0];
				fVeeec422[2] = fVeeec422[1];
				fVeeec422[1] = fVeeec422[0];
				fVeeec419[2] = fVeeec419[1];
				fVeeec419[1] = fVeeec419[0];
				fVeeec416[2] = fVeeec416[1];
				fVeeec416[1] = fVeeec416[0];
				fVeeec411[2] = fVeeec411[1];
				fVeeec411[1] = fVeeec411[0];
				fVeeec408[2] = fVeeec408[1];
				fVeeec408[1] = fVeeec408[0];
				fVeeec405[2] = fVeeec405[1];
				fVeeec405[1] = fVeeec405[0];
				fVeeec402[2] = fVeeec402[1];
				fVeeec402[1] = fVeeec402[0];
				fVeeec399[2] = fVeeec399[1];
				fVeeec399[1] = fVeeec399[0];
				fVeeec396[2] = fVeeec396[1];
				fVeeec396[1] = fVeeec396[0];
				fVeeec391[2] = fVeeec391[1];
				fVeeec391[1] = fVeeec391[0];
				fVeeec388[2] = fVeeec388[1];
				fVeeec388[1] = fVeeec388[0];
				fVeeec385[2] = fVeeec385[1];
				fVeeec385[1] = fVeeec385[0];
				fVeeec382[2] = fVeeec382[1];
				fVeeec382[1] = fVeeec382[0];
				fVeeec379[2] = fVeeec379[1];
				fVeeec379[1] = fVeeec379[0];
				fVeeec376[2] = fVeeec376[1];
				fVeeec376[1] = fVeeec376[0];
				fVeeec371[2] = fVeeec371[1];
				fVeeec371[1] = fVeeec371[0];
				fVeeec368[2] = fVeeec368[1];
				fVeeec368[1] = fVeeec368[0];
				fVeeec365[2] = fVeeec365[1];
				fVeeec365[1] = fVeeec365[0];
				fVeeec362[2] = fVeeec362[1];
				fVeeec362[1] = fVeeec362[0];
				fVeeec359[2] = fVeeec359[1];
				fVeeec359[1] = fVeeec359[0];
				fVeeec356[2] = fVeeec356[1];
				fVeeec356[1] = fVeeec356[0];
				fVeeec351[2] = fVeeec351[1];
				fVeeec351[1] = fVeeec351[0];
				fVeeec348[2] = fVeeec348[1];
				fVeeec348[1] = fVeeec348[0];
				fVeeec345[2] = fVeeec345[1];
				fVeeec345[1] = fVeeec345[0];
				fVeeec342[2] = fVeeec342[1];
				fVeeec342[1] = fVeeec342[0];
				fVeeec339[2] = fVeeec339[1];
				fVeeec339[1] = fVeeec339[0];
				fVeeec336[2] = fVeeec336[1];
				fVeeec336[1] = fVeeec336[0];
				fVeeec331[2] = fVeeec331[1];
				fVeeec331[1] = fVeeec331[0];
				fVeeec328[2] = fVeeec328[1];
				fVeeec328[1] = fVeeec328[0];
				fVeeec325[2] = fVeeec325[1];
				fVeeec325[1] = fVeeec325[0];
				fVeeec322[2] = fVeeec322[1];
				fVeeec322[1] = fVeeec322[0];
				fVeeec319[2] = fVeeec319[1];
				fVeeec319[1] = fVeeec319[0];
				fVeeec316[2] = fVeeec316[1];
				fVeeec316[1] = fVeeec316[0];
				fVeeec311[2] = fVeeec311[1];
				fVeeec311[1] = fVeeec311[0];
				fVeeec308[2] = fVeeec308[1];
				fVeeec308[1] = fVeeec308[0];
				fVeeec305[2] = fVeeec305[1];
				fVeeec305[1] = fVeeec305[0];
				fVeeec302[2] = fVeeec302[1];
				fVeeec302[1] = fVeeec302[0];
				fVeeec299[2] = fVeeec299[1];
				fVeeec299[1] = fVeeec299[0];
				fVeeec296[2] = fVeeec296[1];
				fVeeec296[1] = fVeeec296[0];
				fVeeec291[2] = fVeeec291[1];
				fVeeec291[1] = fVeeec291[0];
				fVeeec288[2] = fVeeec288[1];
				fVeeec288[1] = fVeeec288[0];
				fVeeec285[2] = fVeeec285[1];
				fVeeec285[1] = fVeeec285[0];
				fVeeec282[2] = fVeeec282[1];
				fVeeec282[1] = fVeeec282[0];
				fVeeec279[2] = fVeeec279[1];
				fVeeec279[1] = fVeeec279[0];
				fVeeec276[2] = fVeeec276[1];
				fVeeec276[1] = fVeeec276[0];
				fVeeec271[2] = fVeeec271[1];
				fVeeec271[1] = fVeeec271[0];
				fVeeec268[2] = fVeeec268[1];
				fVeeec268[1] = fVeeec268[0];
				fVeeec265[2] = fVeeec265[1];
				fVeeec265[1] = fVeeec265[0];
				fVeeec262[2] = fVeeec262[1];
				fVeeec262[1] = fVeeec262[0];
				fVeeec259[2] = fVeeec259[1];
				fVeeec259[1] = fVeeec259[0];
				fVeeec256[2] = fVeeec256[1];
				fVeeec256[1] = fVeeec256[0];
				fVeeec251[2] = fVeeec251[1];
				fVeeec251[1] = fVeeec251[0];
				fVeeec248[2] = fVeeec248[1];
				fVeeec248[1] = fVeeec248[0];
				fVeeec245[2] = fVeeec245[1];
				fVeeec245[1] = fVeeec245[0];
				fVeeec242[2] = fVeeec242[1];
				fVeeec242[1] = fVeeec242[0];
				fVeeec239[2] = fVeeec239[1];
				fVeeec239[1] = fVeeec239[0];
				fVeeec236[2] = fVeeec236[1];
				fVeeec236[1] = fVeeec236[0];
				fVeeec231[2] = fVeeec231[1];
				fVeeec231[1] = fVeeec231[0];
				fVeeec228[2] = fVeeec228[1];
				fVeeec228[1] = fVeeec228[0];
				fVeeec225[2] = fVeeec225[1];
				fVeeec225[1] = fVeeec225[0];
				fVeeec222[2] = fVeeec222[1];
				fVeeec222[1] = fVeeec222[0];
				fVeeec219[2] = fVeeec219[1];
				fVeeec219[1] = fVeeec219[0];
				fVeeec216[2] = fVeeec216[1];
				fVeeec216[1] = fVeeec216[0];
				fVeeec211[2] = fVeeec211[1];
				fVeeec211[1] = fVeeec211[0];
				fVeeec208[2] = fVeeec208[1];
				fVeeec208[1] = fVeeec208[0];
				fVeeec205[2] = fVeeec205[1];
				fVeeec205[1] = fVeeec205[0];
				fVeeec202[2] = fVeeec202[1];
				fVeeec202[1] = fVeeec202[0];
				fVeeec199[2] = fVeeec199[1];
				fVeeec199[1] = fVeeec199[0];
				fVeeec196[2] = fVeeec196[1];
				fVeeec196[1] = fVeeec196[0];
				fVeeec191[2] = fVeeec191[1];
				fVeeec191[1] = fVeeec191[0];
				fVeeec188[2] = fVeeec188[1];
				fVeeec188[1] = fVeeec188[0];
				fVeeec185[2] = fVeeec185[1];
				fVeeec185[1] = fVeeec185[0];
				fVeeec182[2] = fVeeec182[1];
				fVeeec182[1] = fVeeec182[0];
				fVeeec179[2] = fVeeec179[1];
				fVeeec179[1] = fVeeec179[0];
				fVeeec176[2] = fVeeec176[1];
				fVeeec176[1] = fVeeec176[0];
				fVeeec171[2] = fVeeec171[1];
				fVeeec171[1] = fVeeec171[0];
				fVeeec168[2] = fVeeec168[1];
				fVeeec168[1] = fVeeec168[0];
				fVeeec165[2] = fVeeec165[1];
				fVeeec165[1] = fVeeec165[0];
				fVeeec162[2] = fVeeec162[1];
				fVeeec162[1] = fVeeec162[0];
				fVeeec159[2] = fVeeec159[1];
				fVeeec159[1] = fVeeec159[0];
				fVeeec156[2] = fVeeec156[1];
				fVeeec156[1] = fVeeec156[0];
				fVeeec151[2] = fVeeec151[1];
				fVeeec151[1] = fVeeec151[0];
				fVeeec148[2] = fVeeec148[1];
				fVeeec148[1] = fVeeec148[0];
				fVeeec145[2] = fVeeec145[1];
				fVeeec145[1] = fVeeec145[0];
				fVeeec142[2] = fVeeec142[1];
				fVeeec142[1] = fVeeec142[0];
				fVeeec139[2] = fVeeec139[1];
				fVeeec139[1] = fVeeec139[0];
				fVeeec136[2] = fVeeec136[1];
				fVeeec136[1] = fVeeec136[0];
				fVeeec131[2] = fVeeec131[1];
				fVeeec131[1] = fVeeec131[0];
				fVeeec128[2] = fVeeec128[1];
				fVeeec128[1] = fVeeec128[0];
				fVeeec125[2] = fVeeec125[1];
				fVeeec125[1] = fVeeec125[0];
				fVeeec122[2] = fVeeec122[1];
				fVeeec122[1] = fVeeec122[0];
				fVeeec119[2] = fVeeec119[1];
				fVeeec119[1] = fVeeec119[0];
				fVeeec116[2] = fVeeec116[1];
				fVeeec116[1] = fVeeec116[0];
				fVeeec111[2] = fVeeec111[1];
				fVeeec111[1] = fVeeec111[0];
				fVeeec108[2] = fVeeec108[1];
				fVeeec108[1] = fVeeec108[0];
				fVeeec105[2] = fVeeec105[1];
				fVeeec105[1] = fVeeec105[0];
				fVeeec102[2] = fVeeec102[1];
				fVeeec102[1] = fVeeec102[0];
				fVeeec99[2] = fVeeec99[1];
				fVeeec99[1] = fVeeec99[0];
				fVeeec96[2] = fVeeec96[1];
				fVeeec96[1] = fVeeec96[0];
				fVeeec91[2] = fVeeec91[1];
				fVeeec91[1] = fVeeec91[0];
				fVeeec88[2] = fVeeec88[1];
				fVeeec88[1] = fVeeec88[0];
				fVeeec85[2] = fVeeec85[1];
				fVeeec85[1] = fVeeec85[0];
				fVeeec82[2] = fVeeec82[1];
				fVeeec82[1] = fVeeec82[0];
				fVeeec79[2] = fVeeec79[1];
				fVeeec79[1] = fVeeec79[0];
				fVeeec76[2] = fVeeec76[1];
				fVeeec76[1] = fVeeec76[0];
				fVeeec71[2] = fVeeec71[1];
				fVeeec71[1] = fVeeec71[0];
				fVeeec68[2] = fVeeec68[1];
				fVeeec68[1] = fVeeec68[0];
				fVeeec65[2] = fVeeec65[1];
				fVeeec65[1] = fVeeec65[0];
				fVeeec60[2] = fVeeec60[1];
				fVeeec60[1] = fVeeec60[0];
				fVeeec9[2] = fVeeec9[1];
				fVeeec9[1] = fVeeec9[0];
				fVec20[1] = fVec20[0];
				fVeeec13[2] = fVeeec13[1];
				fVeeec13[1] = fVeeec13[0];
				fVeeec49[2] = fVeeec49[1];
				fVeeec49[1] = fVeeec49[0];
				fVeeec14[2] = fVeeec14[1];
				fVeeec14[1] = fVeeec14[0];
				fVec19[1] = fVec19[0];
				fVec18[1] = fVec18[0];
				fVec17[1] = fVec17[0];
				fVec16[1] = fVec16[0];
				fVec15[1] = fVec15[0];
				fVec14[1] = fVec14[0];
				fVec13[1] = fVec13[0];
				fVec12[1] = fVec12[0];
				fVec11[1] = fVec11[0];
				fVec10[1] = fVec10[0];
				fVec9[1] = fVec9[0];
				fVec8[1] = fVec8[0];
				fVec7[1] = fVec7[0];
				fVec6[1] = fVec6[0];
				fVec5[1] = fVec5[0];
				fVec4[1] = fVec4[0];
				fVeeec20[3] = fVeeec20[2];
				fVeeec20[2] = fVeeec20[1];
				fVeeec20[1] = fVeeec20[0];
				fVec3[1] = fVec3[0];
				fVec2[1] = fVec2[0];
				fVec1[1] = fVec1[0];
				iVec0[3] = iVec0[2];
				iVec0[2] = iVec0[1];
				iVec0[1] = iVec0[0];
			}
			iVec0State[0] = iVec0[1];
			iVec0State[1] = iVec0[2];
			iVec0State[2] = iVec0[3];
			fVeeec1State = fVeeec1;
			fVeeec0State = fVeeec0;
			fVec1State = fVec1[1];
			fVeeec4State = fVeeec4;
			fVec2State = fVec2[1];
			fVeeec6State = fVeeec6;
			fVec3State = fVec3[1];
			fVeeec11State = fVeeec11;
			fVeeec16State = fVeeec16;
			iVeeec18State = iVeeec18;
			fVeeec20State[0] = fVeeec20[1];
			fVeeec20State[1] = fVeeec20[2];
			fVeeec20State[2] = fVeeec20[3];
			fVec4State = fVec4[1];
			fVec5State = fVec5[1];
			fVec6State = fVec6[1];
			fVec7State = fVec7[1];
			fVec8State = fVec8[1];
			fVec9State = fVec9[1];
			fVec10State = fVec10[1];
			fVec11State = fVec11[1];
			fVec12State = fVec12[1];
			fVec13State = fVec13[1];
			fVec14State = fVec14[1];
			fVec15State = fVec15[1];
			fVec16State = fVec16[1];
			fVec17State = fVec17[1];
			fVec18State = fVec18[1];
			fVec19State = fVec19[1];
			fVeeec15State = fVeeec15;
			fVeeec14State[0] = fVeeec14[1];
			fVeeec14State[1] = fVeeec14[2];
			fVeeec50State = fVeeec50;
			fVeeec49State[0] = fVeeec49[1];
			fVeeec49State[1] = fVeeec49[2];
			fVeeec13State[0] = fVeeec13[1];
			fVeeec13State[1] = fVeeec13[2];
			fVec20State = fVec20[1];
			fVeeec10State = fVeeec10;
			fVeeec9State[0] = fVeeec9[1];
			fVeeec9State[1] = fVeeec9[2];
			fVeeec61State = fVeeec61;
			fVeeec60State[0] = fVeeec60[1];
			fVeeec60State[1] = fVeeec60[2];
			fVeeec65State[0] = fVeeec65[1];
			fVeeec65State[1] = fVeeec65[2];
			fVeeec68State[0] = fVeeec68[1];
			fVeeec68State[1] = fVeeec68[2];
			fVeeec71State[0] = fVeeec71[1];
			fVeeec71State[1] = fVeeec71[2];
			fVeeec8State = fVeeec8;
			fVeeec76State[0] = fVeeec76[1];
			fVeeec76State[1] = fVeeec76[2];
			fVeeec79State[0] = fVeeec79[1];
			fVeeec79State[1] = fVeeec79[2];
			fVeeec82State[0] = fVeeec82[1];
			fVeeec82State[1] = fVeeec82[2];
			fVeeec85State[0] = fVeeec85[1];
			fVeeec85State[1] = fVeeec85[2];
			fVeeec88State[0] = fVeeec88[1];
			fVeeec88State[1] = fVeeec88[2];
			fVeeec91State[0] = fVeeec91[1];
			fVeeec91State[1] = fVeeec91[2];
			fVeeec75State = fVeeec75;
			fVeeec96State[0] = fVeeec96[1];
			fVeeec96State[1] = fVeeec96[2];
			fVeeec99State[0] = fVeeec99[1];
			fVeeec99State[1] = fVeeec99[2];
			fVeeec102State[0] = fVeeec102[1];
			fVeeec102State[1] = fVeeec102[2];
			fVeeec105State[0] = fVeeec105[1];
			fVeeec105State[1] = fVeeec105[2];
			fVeeec108State[0] = fVeeec108[1];
			fVeeec108State[1] = fVeeec108[2];
			fVeeec111State[0] = fVeeec111[1];
			fVeeec111State[1] = fVeeec111[2];
			fVeeec95State = fVeeec95;
			fVeeec116State[0] = fVeeec116[1];
			fVeeec116State[1] = fVeeec116[2];
			fVeeec119State[0] = fVeeec119[1];
			fVeeec119State[1] = fVeeec119[2];
			fVeeec122State[0] = fVeeec122[1];
			fVeeec122State[1] = fVeeec122[2];
			fVeeec125State[0] = fVeeec125[1];
			fVeeec125State[1] = fVeeec125[2];
			fVeeec128State[0] = fVeeec128[1];
			fVeeec128State[1] = fVeeec128[2];
			fVeeec131State[0] = fVeeec131[1];
			fVeeec131State[1] = fVeeec131[2];
			fVeeec115State = fVeeec115;
			fVeeec136State[0] = fVeeec136[1];
			fVeeec136State[1] = fVeeec136[2];
			fVeeec139State[0] = fVeeec139[1];
			fVeeec139State[1] = fVeeec139[2];
			fVeeec142State[0] = fVeeec142[1];
			fVeeec142State[1] = fVeeec142[2];
			fVeeec145State[0] = fVeeec145[1];
			fVeeec145State[1] = fVeeec145[2];
			fVeeec148State[0] = fVeeec148[1];
			fVeeec148State[1] = fVeeec148[2];
			fVeeec151State[0] = fVeeec151[1];
			fVeeec151State[1] = fVeeec151[2];
			fVeeec135State = fVeeec135;
			fVeeec156State[0] = fVeeec156[1];
			fVeeec156State[1] = fVeeec156[2];
			fVeeec159State[0] = fVeeec159[1];
			fVeeec159State[1] = fVeeec159[2];
			fVeeec162State[0] = fVeeec162[1];
			fVeeec162State[1] = fVeeec162[2];
			fVeeec165State[0] = fVeeec165[1];
			fVeeec165State[1] = fVeeec165[2];
			fVeeec168State[0] = fVeeec168[1];
			fVeeec168State[1] = fVeeec168[2];
			fVeeec171State[0] = fVeeec171[1];
			fVeeec171State[1] = fVeeec171[2];
			fVeeec155State = fVeeec155;
			fVeeec176State[0] = fVeeec176[1];
			fVeeec176State[1] = fVeeec176[2];
			fVeeec179State[0] = fVeeec179[1];
			fVeeec179State[1] = fVeeec179[2];
			fVeeec182State[0] = fVeeec182[1];
			fVeeec182State[1] = fVeeec182[2];
			fVeeec185State[0] = fVeeec185[1];
			fVeeec185State[1] = fVeeec185[2];
			fVeeec188State[0] = fVeeec188[1];
			fVeeec188State[1] = fVeeec188[2];
			fVeeec191State[0] = fVeeec191[1];
			fVeeec191State[1] = fVeeec191[2];
			fVeeec175State = fVeeec175;
			fVeeec196State[0] = fVeeec196[1];
			fVeeec196State[1] = fVeeec196[2];
			fVeeec199State[0] = fVeeec199[1];
			fVeeec199State[1] = fVeeec199[2];
			fVeeec202State[0] = fVeeec202[1];
			fVeeec202State[1] = fVeeec202[2];
			fVeeec205State[0] = fVeeec205[1];
			fVeeec205State[1] = fVeeec205[2];
			fVeeec208State[0] = fVeeec208[1];
			fVeeec208State[1] = fVeeec208[2];
			fVeeec211State[0] = fVeeec211[1];
			fVeeec211State[1] = fVeeec211[2];
			fVeeec195State = fVeeec195;
			fVeeec216State[0] = fVeeec216[1];
			fVeeec216State[1] = fVeeec216[2];
			fVeeec219State[0] = fVeeec219[1];
			fVeeec219State[1] = fVeeec219[2];
			fVeeec222State[0] = fVeeec222[1];
			fVeeec222State[1] = fVeeec222[2];
			fVeeec225State[0] = fVeeec225[1];
			fVeeec225State[1] = fVeeec225[2];
			fVeeec228State[0] = fVeeec228[1];
			fVeeec228State[1] = fVeeec228[2];
			fVeeec231State[0] = fVeeec231[1];
			fVeeec231State[1] = fVeeec231[2];
			fVeeec215State = fVeeec215;
			fVeeec236State[0] = fVeeec236[1];
			fVeeec236State[1] = fVeeec236[2];
			fVeeec239State[0] = fVeeec239[1];
			fVeeec239State[1] = fVeeec239[2];
			fVeeec242State[0] = fVeeec242[1];
			fVeeec242State[1] = fVeeec242[2];
			fVeeec245State[0] = fVeeec245[1];
			fVeeec245State[1] = fVeeec245[2];
			fVeeec248State[0] = fVeeec248[1];
			fVeeec248State[1] = fVeeec248[2];
			fVeeec251State[0] = fVeeec251[1];
			fVeeec251State[1] = fVeeec251[2];
			fVeeec235State = fVeeec235;
			fVeeec256State[0] = fVeeec256[1];
			fVeeec256State[1] = fVeeec256[2];
			fVeeec259State[0] = fVeeec259[1];
			fVeeec259State[1] = fVeeec259[2];
			fVeeec262State[0] = fVeeec262[1];
			fVeeec262State[1] = fVeeec262[2];
			fVeeec265State[0] = fVeeec265[1];
			fVeeec265State[1] = fVeeec265[2];
			fVeeec268State[0] = fVeeec268[1];
			fVeeec268State[1] = fVeeec268[2];
			fVeeec271State[0] = fVeeec271[1];
			fVeeec271State[1] = fVeeec271[2];
			fVeeec255State = fVeeec255;
			fVeeec276State[0] = fVeeec276[1];
			fVeeec276State[1] = fVeeec276[2];
			fVeeec279State[0] = fVeeec279[1];
			fVeeec279State[1] = fVeeec279[2];
			fVeeec282State[0] = fVeeec282[1];
			fVeeec282State[1] = fVeeec282[2];
			fVeeec285State[0] = fVeeec285[1];
			fVeeec285State[1] = fVeeec285[2];
			fVeeec288State[0] = fVeeec288[1];
			fVeeec288State[1] = fVeeec288[2];
			fVeeec291State[0] = fVeeec291[1];
			fVeeec291State[1] = fVeeec291[2];
			fVeeec275State = fVeeec275;
			fVeeec296State[0] = fVeeec296[1];
			fVeeec296State[1] = fVeeec296[2];
			fVeeec299State[0] = fVeeec299[1];
			fVeeec299State[1] = fVeeec299[2];
			fVeeec302State[0] = fVeeec302[1];
			fVeeec302State[1] = fVeeec302[2];
			fVeeec305State[0] = fVeeec305[1];
			fVeeec305State[1] = fVeeec305[2];
			fVeeec308State[0] = fVeeec308[1];
			fVeeec308State[1] = fVeeec308[2];
			fVeeec311State[0] = fVeeec311[1];
			fVeeec311State[1] = fVeeec311[2];
			fVeeec295State = fVeeec295;
			fVeeec316State[0] = fVeeec316[1];
			fVeeec316State[1] = fVeeec316[2];
			fVeeec319State[0] = fVeeec319[1];
			fVeeec319State[1] = fVeeec319[2];
			fVeeec322State[0] = fVeeec322[1];
			fVeeec322State[1] = fVeeec322[2];
			fVeeec325State[0] = fVeeec325[1];
			fVeeec325State[1] = fVeeec325[2];
			fVeeec328State[0] = fVeeec328[1];
			fVeeec328State[1] = fVeeec328[2];
			fVeeec331State[0] = fVeeec331[1];
			fVeeec331State[1] = fVeeec331[2];
			fVeeec315State = fVeeec315;
			fVeeec336State[0] = fVeeec336[1];
			fVeeec336State[1] = fVeeec336[2];
			fVeeec339State[0] = fVeeec339[1];
			fVeeec339State[1] = fVeeec339[2];
			fVeeec342State[0] = fVeeec342[1];
			fVeeec342State[1] = fVeeec342[2];
			fVeeec345State[0] = fVeeec345[1];
			fVeeec345State[1] = fVeeec345[2];
			fVeeec348State[0] = fVeeec348[1];
			fVeeec348State[1] = fVeeec348[2];
			fVeeec351State[0] = fVeeec351[1];
			fVeeec351State[1] = fVeeec351[2];
			fVeeec335State = fVeeec335;
			fVeeec356State[0] = fVeeec356[1];
			fVeeec356State[1] = fVeeec356[2];
			fVeeec359State[0] = fVeeec359[1];
			fVeeec359State[1] = fVeeec359[2];
			fVeeec362State[0] = fVeeec362[1];
			fVeeec362State[1] = fVeeec362[2];
			fVeeec365State[0] = fVeeec365[1];
			fVeeec365State[1] = fVeeec365[2];
			fVeeec368State[0] = fVeeec368[1];
			fVeeec368State[1] = fVeeec368[2];
			fVeeec371State[0] = fVeeec371[1];
			fVeeec371State[1] = fVeeec371[2];
			fVeeec355State = fVeeec355;
			fVeeec376State[0] = fVeeec376[1];
			fVeeec376State[1] = fVeeec376[2];
			fVeeec379State[0] = fVeeec379[1];
			fVeeec379State[1] = fVeeec379[2];
			fVeeec382State[0] = fVeeec382[1];
			fVeeec382State[1] = fVeeec382[2];
			fVeeec385State[0] = fVeeec385[1];
			fVeeec385State[1] = fVeeec385[2];
			fVeeec388State[0] = fVeeec388[1];
			fVeeec388State[1] = fVeeec388[2];
			fVeeec391State[0] = fVeeec391[1];
			fVeeec391State[1] = fVeeec391[2];
			fVeeec375State = fVeeec375;
			fVeeec396State[0] = fVeeec396[1];
			fVeeec396State[1] = fVeeec396[2];
			fVeeec399State[0] = fVeeec399[1];
			fVeeec399State[1] = fVeeec399[2];
			fVeeec402State[0] = fVeeec402[1];
			fVeeec402State[1] = fVeeec402[2];
			fVeeec405State[0] = fVeeec405[1];
			fVeeec405State[1] = fVeeec405[2];
			fVeeec408State[0] = fVeeec408[1];
			fVeeec408State[1] = fVeeec408[2];
			fVeeec411State[0] = fVeeec411[1];
			fVeeec411State[1] = fVeeec411[2];
			fVeeec395State = fVeeec395;
			fVeeec416State[0] = fVeeec416[1];
			fVeeec416State[1] = fVeeec416[2];
			fVeeec419State[0] = fVeeec419[1];
			fVeeec419State[1] = fVeeec419[2];
			fVeeec422State[0] = fVeeec422[1];
			fVeeec422State[1] = fVeeec422[2];
			fVeeec425State[0] = fVeeec425[1];
			fVeeec425State[1] = fVeeec425[2];
			fVeeec428State[0] = fVeeec428[1];
			fVeeec428State[1] = fVeeec428[2];
			fVeeec431State[0] = fVeeec431[1];
			fVeeec431State[1] = fVeeec431[2];
			fVeeec415State = fVeeec415;
			fVeeec436State[0] = fVeeec436[1];
			fVeeec436State[1] = fVeeec436[2];
			fVeeec439State[0] = fVeeec439[1];
			fVeeec439State[1] = fVeeec439[2];
			fVeeec442State[0] = fVeeec442[1];
			fVeeec442State[1] = fVeeec442[2];
			fVeeec435State = fVeeec435;
		}
	}
};


