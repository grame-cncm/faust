/* ------------------------------------------------------------
name: "parametric_eq"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}
static float mydsp_faustpower3_f(float value) {
	return value * value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	int iVec0[4];
	FAUSTFLOAT fHslider1;
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	float fConst5;
	float fConst6;
	float fConst7;
	float fConst8;
	float fConst9;
	float fConst10;
	float fConst11;
	float fConst12;
	float fConst13;
	float fConst14;
	FAUSTFLOAT fHslider2;
	FAUSTFLOAT fHslider3;
	FAUSTFLOAT fVslider0;
	float fRec9[2];
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT fCheckbox1;
	FAUSTFLOAT fEntry0;
	float fConst15;
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fVslider2;
	float fRec11[2];
	float fRec10[2];
	float fConst16;
	float fVec1[2];
	float fConst17;
	float fVec2[2];
	float fVec3[2];
	float fConst18;
	float fVec4[2];
	float fVec5[2];
	float fVec6[2];
	FAUSTFLOAT fVslider3;
	float fRec12[2];
	float fVec7[2];
	float fVec8[2];
	float fVec9[2];
	float fVec10[2];
	float fVec11[2];
	float fVec12[2];
	FAUSTFLOAT fVslider4;
	float fRec13[2];
	float fVec13[2];
	float fVec14[2];
	float fVec15[2];
	float fVec16[2];
	float fVec17[2];
	float fVec18[2];
	FAUSTFLOAT fCheckbox2;
	int iRec14[2];
	float fRec15[4];
	float fVec19[2];
	float fRec8[2];
	float fRec7[3];
	FAUSTFLOAT fHslider4;
	float fRec17[2];
	float fRec16[3];
	float fConst19;
	FAUSTFLOAT fHslider5;
	float fRec18[2];
	FAUSTFLOAT fHslider6;
	FAUSTFLOAT fHslider7;
	float fConst20;
	float fRec6[3];
	float fVec20[2];
	float fRec5[2];
	float fRec4[3];
	FAUSTFLOAT fHslider8;
	float fRec20[2];
	float fRec19[3];
	float fConst21;
	float fConst22;
	float fConst23;
	float fRec3[3];
	float fConst24;
	float fConst25;
	float fConst26;
	float fRec2[3];
	float fConst27;
	float fConst28;
	float fConst29;
	float fRec1[3];
	float fConst30;
	float fRec0[2];
	FAUSTFLOAT fVbargraph0;
	float fConst31;
	float fConst32;
	float fConst33;
	float fConst34;
	float fConst35;
	float fConst36;
	float fConst37;
	float fConst38;
	float fConst39;
	float fConst40;
	float fConst41;
	float fConst42;
	float fConst43;
	float fConst44;
	float fConst45;
	float fConst46;
	float fConst47;
	float fConst48;
	float fConst49;
	float fConst50;
	float fConst51;
	float fRec27[3];
	float fConst52;
	float fConst53;
	float fConst54;
	float fRec26[3];
	float fConst55;
	float fConst56;
	float fConst57;
	float fRec25[3];
	float fConst58;
	float fConst59;
	float fConst60;
	float fConst61;
	float fRec24[3];
	float fConst62;
	float fConst63;
	float fConst64;
	float fRec23[3];
	float fConst65;
	float fConst66;
	float fConst67;
	float fRec22[3];
	float fConst68;
	float fRec21[2];
	FAUSTFLOAT fVbargraph1;
	float fConst69;
	float fConst70;
	float fConst71;
	float fConst72;
	float fConst73;
	float fConst74;
	float fConst75;
	float fConst76;
	float fConst77;
	float fConst78;
	float fConst79;
	float fConst80;
	float fConst81;
	float fConst82;
	float fConst83;
	float fConst84;
	float fConst85;
	float fConst86;
	float fConst87;
	float fConst88;
	float fConst89;
	float fRec34[3];
	float fConst90;
	float fConst91;
	float fConst92;
	float fRec33[3];
	float fConst93;
	float fConst94;
	float fConst95;
	float fRec32[3];
	float fConst96;
	float fConst97;
	float fConst98;
	float fConst99;
	float fRec31[3];
	float fConst100;
	float fConst101;
	float fConst102;
	float fRec30[3];
	float fConst103;
	float fConst104;
	float fConst105;
	float fRec29[3];
	float fConst106;
	float fRec28[2];
	FAUSTFLOAT fVbargraph2;
	float fConst107;
	float fConst108;
	float fConst109;
	float fConst110;
	float fConst111;
	float fConst112;
	float fConst113;
	float fConst114;
	float fConst115;
	float fConst116;
	float fConst117;
	float fConst118;
	float fConst119;
	float fConst120;
	float fConst121;
	float fConst122;
	float fConst123;
	float fConst124;
	float fConst125;
	float fConst126;
	float fConst127;
	float fRec41[3];
	float fConst128;
	float fConst129;
	float fConst130;
	float fRec40[3];
	float fConst131;
	float fConst132;
	float fConst133;
	float fRec39[3];
	float fConst134;
	float fConst135;
	float fConst136;
	float fConst137;
	float fRec38[3];
	float fConst138;
	float fConst139;
	float fConst140;
	float fRec37[3];
	float fConst141;
	float fConst142;
	float fConst143;
	float fRec36[3];
	float fConst144;
	float fRec35[2];
	FAUSTFLOAT fVbargraph3;
	float fConst145;
	float fConst146;
	float fConst147;
	float fConst148;
	float fConst149;
	float fConst150;
	float fConst151;
	float fConst152;
	float fConst153;
	float fConst154;
	float fConst155;
	float fConst156;
	float fConst157;
	float fConst158;
	float fConst159;
	float fConst160;
	float fConst161;
	float fConst162;
	float fConst163;
	float fConst164;
	float fConst165;
	float fRec48[3];
	float fConst166;
	float fConst167;
	float fConst168;
	float fRec47[3];
	float fConst169;
	float fConst170;
	float fConst171;
	float fRec46[3];
	float fConst172;
	float fConst173;
	float fConst174;
	float fConst175;
	float fRec45[3];
	float fConst176;
	float fConst177;
	float fConst178;
	float fRec44[3];
	float fConst179;
	float fConst180;
	float fConst181;
	float fRec43[3];
	float fConst182;
	float fRec42[2];
	FAUSTFLOAT fVbargraph4;
	float fConst183;
	float fConst184;
	float fConst185;
	float fConst186;
	float fConst187;
	float fConst188;
	float fConst189;
	float fConst190;
	float fConst191;
	float fConst192;
	float fConst193;
	float fConst194;
	float fConst195;
	float fConst196;
	float fConst197;
	float fConst198;
	float fConst199;
	float fConst200;
	float fConst201;
	float fConst202;
	float fConst203;
	float fRec55[3];
	float fConst204;
	float fConst205;
	float fConst206;
	float fRec54[3];
	float fConst207;
	float fConst208;
	float fConst209;
	float fRec53[3];
	float fConst210;
	float fConst211;
	float fConst212;
	float fConst213;
	float fRec52[3];
	float fConst214;
	float fConst215;
	float fConst216;
	float fRec51[3];
	float fConst217;
	float fConst218;
	float fConst219;
	float fRec50[3];
	float fConst220;
	float fRec49[2];
	FAUSTFLOAT fVbargraph5;
	float fConst221;
	float fConst222;
	float fConst223;
	float fConst224;
	float fConst225;
	float fConst226;
	float fConst227;
	float fConst228;
	float fConst229;
	float fConst230;
	float fConst231;
	float fConst232;
	float fConst233;
	float fConst234;
	float fConst235;
	float fConst236;
	float fConst237;
	float fConst238;
	float fConst239;
	float fConst240;
	float fConst241;
	float fRec62[3];
	float fConst242;
	float fConst243;
	float fConst244;
	float fRec61[3];
	float fConst245;
	float fConst246;
	float fConst247;
	float fRec60[3];
	float fConst248;
	float fConst249;
	float fConst250;
	float fConst251;
	float fRec59[3];
	float fConst252;
	float fConst253;
	float fConst254;
	float fRec58[3];
	float fConst255;
	float fConst256;
	float fConst257;
	float fRec57[3];
	float fConst258;
	float fRec56[2];
	FAUSTFLOAT fVbargraph6;
	float fConst259;
	float fConst260;
	float fConst261;
	float fConst262;
	float fConst263;
	float fConst264;
	float fConst265;
	float fConst266;
	float fConst267;
	float fConst268;
	float fConst269;
	float fConst270;
	float fConst271;
	float fConst272;
	float fConst273;
	float fConst274;
	float fConst275;
	float fConst276;
	float fConst277;
	float fConst278;
	float fConst279;
	float fRec69[3];
	float fConst280;
	float fConst281;
	float fConst282;
	float fRec68[3];
	float fConst283;
	float fConst284;
	float fConst285;
	float fRec67[3];
	float fConst286;
	float fConst287;
	float fConst288;
	float fConst289;
	float fRec66[3];
	float fConst290;
	float fConst291;
	float fConst292;
	float fRec65[3];
	float fConst293;
	float fConst294;
	float fConst295;
	float fRec64[3];
	float fConst296;
	float fRec63[2];
	FAUSTFLOAT fVbargraph7;
	float fConst297;
	float fConst298;
	float fConst299;
	float fConst300;
	float fConst301;
	float fConst302;
	float fConst303;
	float fConst304;
	float fConst305;
	float fConst306;
	float fConst307;
	float fConst308;
	float fConst309;
	float fConst310;
	float fConst311;
	float fConst312;
	float fConst313;
	float fConst314;
	float fConst315;
	float fConst316;
	float fConst317;
	float fRec76[3];
	float fConst318;
	float fConst319;
	float fConst320;
	float fRec75[3];
	float fConst321;
	float fConst322;
	float fConst323;
	float fRec74[3];
	float fConst324;
	float fConst325;
	float fConst326;
	float fConst327;
	float fRec73[3];
	float fConst328;
	float fConst329;
	float fConst330;
	float fRec72[3];
	float fConst331;
	float fConst332;
	float fConst333;
	float fRec71[3];
	float fConst334;
	float fRec70[2];
	FAUSTFLOAT fVbargraph8;
	float fConst335;
	float fConst336;
	float fConst337;
	float fConst338;
	float fConst339;
	float fConst340;
	float fConst341;
	float fConst342;
	float fConst343;
	float fConst344;
	float fConst345;
	float fConst346;
	float fConst347;
	float fConst348;
	float fConst349;
	float fConst350;
	float fConst351;
	float fConst352;
	float fConst353;
	float fConst354;
	float fConst355;
	float fRec83[3];
	float fConst356;
	float fConst357;
	float fConst358;
	float fRec82[3];
	float fConst359;
	float fConst360;
	float fConst361;
	float fRec81[3];
	float fConst362;
	float fConst363;
	float fConst364;
	float fConst365;
	float fRec80[3];
	float fConst366;
	float fConst367;
	float fConst368;
	float fRec79[3];
	float fConst369;
	float fConst370;
	float fConst371;
	float fRec78[3];
	float fConst372;
	float fRec77[2];
	FAUSTFLOAT fVbargraph9;
	float fConst373;
	float fConst374;
	float fConst375;
	float fConst376;
	float fConst377;
	float fConst378;
	float fConst379;
	float fConst380;
	float fConst381;
	float fConst382;
	float fConst383;
	float fConst384;
	float fConst385;
	float fConst386;
	float fConst387;
	float fConst388;
	float fConst389;
	float fConst390;
	float fConst391;
	float fConst392;
	float fConst393;
	float fRec90[3];
	float fConst394;
	float fConst395;
	float fConst396;
	float fRec89[3];
	float fConst397;
	float fConst398;
	float fConst399;
	float fRec88[3];
	float fConst400;
	float fConst401;
	float fConst402;
	float fConst403;
	float fRec87[3];
	float fConst404;
	float fConst405;
	float fConst406;
	float fRec86[3];
	float fConst407;
	float fConst408;
	float fConst409;
	float fRec85[3];
	float fConst410;
	float fRec84[2];
	FAUSTFLOAT fVbargraph10;
	float fConst411;
	float fConst412;
	float fConst413;
	float fConst414;
	float fConst415;
	float fConst416;
	float fConst417;
	float fConst418;
	float fConst419;
	float fConst420;
	float fConst421;
	float fConst422;
	float fConst423;
	float fConst424;
	float fConst425;
	float fConst426;
	float fConst427;
	float fConst428;
	float fConst429;
	float fConst430;
	float fConst431;
	float fRec97[3];
	float fConst432;
	float fConst433;
	float fConst434;
	float fRec96[3];
	float fConst435;
	float fConst436;
	float fConst437;
	float fRec95[3];
	float fConst438;
	float fConst439;
	float fConst440;
	float fConst441;
	float fRec94[3];
	float fConst442;
	float fConst443;
	float fConst444;
	float fRec93[3];
	float fConst445;
	float fConst446;
	float fConst447;
	float fRec92[3];
	float fConst448;
	float fRec91[2];
	FAUSTFLOAT fVbargraph11;
	float fConst449;
	float fConst450;
	float fConst451;
	float fConst452;
	float fConst453;
	float fConst454;
	float fConst455;
	float fConst456;
	float fConst457;
	float fConst458;
	float fConst459;
	float fConst460;
	float fConst461;
	float fConst462;
	float fConst463;
	float fConst464;
	float fConst465;
	float fConst466;
	float fConst467;
	float fConst468;
	float fConst469;
	float fRec104[3];
	float fConst470;
	float fConst471;
	float fConst472;
	float fRec103[3];
	float fConst473;
	float fConst474;
	float fConst475;
	float fRec102[3];
	float fConst476;
	float fConst477;
	float fConst478;
	float fConst479;
	float fRec101[3];
	float fConst480;
	float fConst481;
	float fConst482;
	float fRec100[3];
	float fConst483;
	float fConst484;
	float fConst485;
	float fRec99[3];
	float fConst486;
	float fRec98[2];
	FAUSTFLOAT fVbargraph12;
	float fConst487;
	float fConst488;
	float fConst489;
	float fConst490;
	float fConst491;
	float fConst492;
	float fConst493;
	float fConst494;
	float fConst495;
	float fConst496;
	float fConst497;
	float fConst498;
	float fConst499;
	float fConst500;
	float fConst501;
	float fConst502;
	float fConst503;
	float fConst504;
	float fConst505;
	float fConst506;
	float fConst507;
	float fRec111[3];
	float fConst508;
	float fConst509;
	float fConst510;
	float fRec110[3];
	float fConst511;
	float fConst512;
	float fConst513;
	float fRec109[3];
	float fConst514;
	float fConst515;
	float fConst516;
	float fConst517;
	float fRec108[3];
	float fConst518;
	float fConst519;
	float fConst520;
	float fRec107[3];
	float fConst521;
	float fConst522;
	float fConst523;
	float fRec106[3];
	float fConst524;
	float fRec105[2];
	FAUSTFLOAT fVbargraph13;
	float fConst525;
	float fConst526;
	float fConst527;
	float fConst528;
	float fConst529;
	float fConst530;
	float fConst531;
	float fConst532;
	float fConst533;
	float fConst534;
	float fConst535;
	float fConst536;
	float fConst537;
	float fConst538;
	float fConst539;
	float fConst540;
	float fConst541;
	float fConst542;
	float fConst543;
	float fConst544;
	float fConst545;
	float fRec118[3];
	float fConst546;
	float fConst547;
	float fConst548;
	float fRec117[3];
	float fConst549;
	float fConst550;
	float fConst551;
	float fRec116[3];
	float fConst552;
	float fConst553;
	float fConst554;
	float fConst555;
	float fRec115[3];
	float fConst556;
	float fConst557;
	float fConst558;
	float fRec114[3];
	float fConst559;
	float fConst560;
	float fConst561;
	float fRec113[3];
	float fConst562;
	float fRec112[2];
	FAUSTFLOAT fVbargraph14;
	float fConst563;
	float fConst564;
	float fConst565;
	float fConst566;
	float fConst567;
	float fConst568;
	float fConst569;
	float fConst570;
	float fConst571;
	float fConst572;
	float fConst573;
	float fConst574;
	float fConst575;
	float fConst576;
	float fConst577;
	float fConst578;
	float fConst579;
	float fConst580;
	float fConst581;
	float fConst582;
	float fConst583;
	float fRec125[3];
	float fConst584;
	float fConst585;
	float fConst586;
	float fRec124[3];
	float fConst587;
	float fConst588;
	float fConst589;
	float fRec123[3];
	float fConst590;
	float fConst591;
	float fConst592;
	float fConst593;
	float fRec122[3];
	float fConst594;
	float fConst595;
	float fConst596;
	float fRec121[3];
	float fConst597;
	float fConst598;
	float fConst599;
	float fRec120[3];
	float fConst600;
	float fRec119[2];
	FAUSTFLOAT fVbargraph15;
	float fConst601;
	float fConst602;
	float fConst603;
	float fConst604;
	float fConst605;
	float fConst606;
	float fConst607;
	float fConst608;
	float fConst609;
	float fConst610;
	float fConst611;
	float fConst612;
	float fConst613;
	float fConst614;
	float fConst615;
	float fConst616;
	float fConst617;
	float fConst618;
	float fConst619;
	float fConst620;
	float fConst621;
	float fRec132[3];
	float fConst622;
	float fConst623;
	float fConst624;
	float fRec131[3];
	float fConst625;
	float fConst626;
	float fConst627;
	float fRec130[3];
	float fConst628;
	float fConst629;
	float fConst630;
	float fConst631;
	float fRec129[3];
	float fConst632;
	float fConst633;
	float fConst634;
	float fRec128[3];
	float fConst635;
	float fConst636;
	float fConst637;
	float fRec127[3];
	float fConst638;
	float fRec126[2];
	FAUSTFLOAT fVbargraph16;
	float fConst639;
	float fConst640;
	float fConst641;
	float fConst642;
	float fConst643;
	float fConst644;
	float fConst645;
	float fConst646;
	float fConst647;
	float fConst648;
	float fConst649;
	float fConst650;
	float fConst651;
	float fConst652;
	float fConst653;
	float fConst654;
	float fConst655;
	float fConst656;
	float fConst657;
	float fConst658;
	float fConst659;
	float fRec139[3];
	float fConst660;
	float fConst661;
	float fConst662;
	float fRec138[3];
	float fConst663;
	float fConst664;
	float fConst665;
	float fRec137[3];
	float fConst666;
	float fConst667;
	float fConst668;
	float fConst669;
	float fRec136[3];
	float fConst670;
	float fConst671;
	float fConst672;
	float fRec135[3];
	float fConst673;
	float fConst674;
	float fConst675;
	float fRec134[3];
	float fConst676;
	float fRec133[2];
	FAUSTFLOAT fVbargraph17;
	float fConst677;
	float fConst678;
	float fConst679;
	float fConst680;
	float fConst681;
	float fConst682;
	float fConst683;
	float fConst684;
	float fConst685;
	float fConst686;
	float fConst687;
	float fConst688;
	float fConst689;
	float fConst690;
	float fConst691;
	float fConst692;
	float fConst693;
	float fConst694;
	float fConst695;
	float fConst696;
	float fConst697;
	float fRec146[3];
	float fConst698;
	float fConst699;
	float fConst700;
	float fRec145[3];
	float fConst701;
	float fConst702;
	float fConst703;
	float fRec144[3];
	float fConst704;
	float fConst705;
	float fConst706;
	float fConst707;
	float fRec143[3];
	float fConst708;
	float fConst709;
	float fConst710;
	float fRec142[3];
	float fConst711;
	float fConst712;
	float fConst713;
	float fRec141[3];
	float fConst714;
	float fRec140[2];
	FAUSTFLOAT fVbargraph18;
	float fConst715;
	float fConst716;
	float fConst717;
	float fConst718;
	float fConst719;
	float fConst720;
	float fConst721;
	float fConst722;
	float fConst723;
	float fRec150[3];
	float fConst724;
	float fConst725;
	float fConst726;
	float fRec149[3];
	float fConst727;
	float fConst728;
	float fConst729;
	float fRec148[3];
	float fConst730;
	float fRec147[2];
	FAUSTFLOAT fVbargraph19;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("filename", "parametric_eq.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "parametric_eq");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 1e+03f / fConst0;
		fConst2 = std::tan(50265.484f / fConst0);
		fConst3 = 1.0f / fConst2;
		fConst4 = 1.0f / ((fConst3 + 0.15748216f) / fConst2 + 0.9351402f);
		fConst5 = mydsp_faustpower2_f(fConst2);
		fConst6 = 50.06381f / fConst5;
		fConst7 = fConst6 + 0.9351402f;
		fConst8 = 1.0f / ((fConst3 + 0.74313045f) / fConst2 + 1.4500711f);
		fConst9 = 11.0520525f / fConst5;
		fConst10 = fConst9 + 1.4500711f;
		fConst11 = 1.0f / ((fConst3 + 3.1897273f) / fConst2 + 4.0767817f);
		fConst12 = 0.0017661728f / fConst5;
		fConst13 = fConst12 + 0.0004076782f;
		fConst14 = 3.1415927f / fConst0;
		fConst15 = 1.0f / fConst0;
		fConst16 = 0.25f * fConst0;
		fConst17 = 0.041666668f * mydsp_faustpower2_f(fConst0);
		fConst18 = 0.0052083335f * mydsp_faustpower3_f(fConst0);
		fConst19 = 1382.3008f / fConst0;
		fConst20 = 2764.6016f / fConst0;
		fConst21 = (fConst3 + -3.1897273f) / fConst2 + 4.0767817f;
		fConst22 = 1.0f / fConst5;
		fConst23 = 2.0f * (4.0767817f - fConst22);
		fConst24 = 2.0f * (0.0004076782f - fConst12);
		fConst25 = (fConst3 + -0.74313045f) / fConst2 + 1.4500711f;
		fConst26 = 2.0f * (1.4500711f - fConst22);
		fConst27 = 2.0f * (1.4500711f - fConst9);
		fConst28 = (fConst3 + -0.15748216f) / fConst2 + 0.9351402f;
		fConst29 = 2.0f * (0.9351402f - fConst22);
		fConst30 = 2.0f * (0.9351402f - fConst6);
		fConst31 = std::tan(35543.062f / fConst0);
		fConst32 = 1.0f / fConst31;
		fConst33 = 1.0f / ((fConst32 + 0.15748216f) / fConst31 + 0.9351402f);
		fConst34 = mydsp_faustpower2_f(fConst31);
		fConst35 = 50.06381f / fConst34;
		fConst36 = fConst35 + 0.9351402f;
		fConst37 = 1.0f / ((fConst32 + 0.74313045f) / fConst31 + 1.4500711f);
		fConst38 = 11.0520525f / fConst34;
		fConst39 = fConst38 + 1.4500711f;
		fConst40 = 1.0f / ((fConst32 + 3.1897273f) / fConst31 + 4.0767817f);
		fConst41 = 0.0017661728f / fConst34;
		fConst42 = fConst41 + 0.0004076782f;
		fConst43 = 1.0f / ((fConst3 + 0.16840488f) / fConst2 + 1.0693583f);
		fConst44 = fConst22 + 53.53615f;
		fConst45 = 1.0f / ((fConst3 + 0.51247865f) / fConst2 + 0.6896214f);
		fConst46 = fConst22 + 7.6217313f;
		fConst47 = 1.0f / ((fConst3 + 0.78241307f) / fConst2 + 0.2452915f);
		fConst48 = 0.0001f / fConst5;
		fConst49 = fConst48 + 0.0004332272f;
		fConst50 = (fConst3 + -0.78241307f) / fConst2 + 0.2452915f;
		fConst51 = 2.0f * (0.2452915f - fConst22);
		fConst52 = 2.0f * (0.0004332272f - fConst48);
		fConst53 = (fConst3 + -0.51247865f) / fConst2 + 0.6896214f;
		fConst54 = 2.0f * (0.6896214f - fConst22);
		fConst55 = 2.0f * (7.6217313f - fConst22);
		fConst56 = (fConst3 + -0.16840488f) / fConst2 + 1.0693583f;
		fConst57 = 2.0f * (1.0693583f - fConst22);
		fConst58 = 2.0f * (53.53615f - fConst22);
		fConst59 = (fConst32 + -3.1897273f) / fConst31 + 4.0767817f;
		fConst60 = 1.0f / fConst34;
		fConst61 = 2.0f * (4.0767817f - fConst60);
		fConst62 = 2.0f * (0.0004076782f - fConst41);
		fConst63 = (fConst32 + -0.74313045f) / fConst31 + 1.4500711f;
		fConst64 = 2.0f * (1.4500711f - fConst60);
		fConst65 = 2.0f * (1.4500711f - fConst38);
		fConst66 = (fConst32 + -0.15748216f) / fConst31 + 0.9351402f;
		fConst67 = 2.0f * (0.9351402f - fConst60);
		fConst68 = 2.0f * (0.9351402f - fConst35);
		fConst69 = std::tan(25132.742f / fConst0);
		fConst70 = 1.0f / fConst69;
		fConst71 = 1.0f / ((fConst70 + 0.15748216f) / fConst69 + 0.9351402f);
		fConst72 = mydsp_faustpower2_f(fConst69);
		fConst73 = 50.06381f / fConst72;
		fConst74 = fConst73 + 0.9351402f;
		fConst75 = 1.0f / ((fConst70 + 0.74313045f) / fConst69 + 1.4500711f);
		fConst76 = 11.0520525f / fConst72;
		fConst77 = fConst76 + 1.4500711f;
		fConst78 = 1.0f / ((fConst70 + 3.1897273f) / fConst69 + 4.0767817f);
		fConst79 = 0.0017661728f / fConst72;
		fConst80 = fConst79 + 0.0004076782f;
		fConst81 = 1.0f / ((fConst32 + 0.16840488f) / fConst31 + 1.0693583f);
		fConst82 = fConst60 + 53.53615f;
		fConst83 = 1.0f / ((fConst32 + 0.51247865f) / fConst31 + 0.6896214f);
		fConst84 = fConst60 + 7.6217313f;
		fConst85 = 1.0f / ((fConst32 + 0.78241307f) / fConst31 + 0.2452915f);
		fConst86 = 0.0001f / fConst34;
		fConst87 = fConst86 + 0.0004332272f;
		fConst88 = (fConst32 + -0.78241307f) / fConst31 + 0.2452915f;
		fConst89 = 2.0f * (0.2452915f - fConst60);
		fConst90 = 2.0f * (0.0004332272f - fConst86);
		fConst91 = (fConst32 + -0.51247865f) / fConst31 + 0.6896214f;
		fConst92 = 2.0f * (0.6896214f - fConst60);
		fConst93 = 2.0f * (7.6217313f - fConst60);
		fConst94 = (fConst32 + -0.16840488f) / fConst31 + 1.0693583f;
		fConst95 = 2.0f * (1.0693583f - fConst60);
		fConst96 = 2.0f * (53.53615f - fConst60);
		fConst97 = (fConst70 + -3.1897273f) / fConst69 + 4.0767817f;
		fConst98 = 1.0f / fConst72;
		fConst99 = 2.0f * (4.0767817f - fConst98);
		fConst100 = 2.0f * (0.0004076782f - fConst79);
		fConst101 = (fConst70 + -0.74313045f) / fConst69 + 1.4500711f;
		fConst102 = 2.0f * (1.4500711f - fConst98);
		fConst103 = 2.0f * (1.4500711f - fConst76);
		fConst104 = (fConst70 + -0.15748216f) / fConst69 + 0.9351402f;
		fConst105 = 2.0f * (0.9351402f - fConst98);
		fConst106 = 2.0f * (0.9351402f - fConst73);
		fConst107 = std::tan(17771.531f / fConst0);
		fConst108 = 1.0f / fConst107;
		fConst109 = 1.0f / ((fConst108 + 0.15748216f) / fConst107 + 0.9351402f);
		fConst110 = mydsp_faustpower2_f(fConst107);
		fConst111 = 50.06381f / fConst110;
		fConst112 = fConst111 + 0.9351402f;
		fConst113 = 1.0f / ((fConst108 + 0.74313045f) / fConst107 + 1.4500711f);
		fConst114 = 11.0520525f / fConst110;
		fConst115 = fConst114 + 1.4500711f;
		fConst116 = 1.0f / ((fConst108 + 3.1897273f) / fConst107 + 4.0767817f);
		fConst117 = 0.0017661728f / fConst110;
		fConst118 = fConst117 + 0.0004076782f;
		fConst119 = 1.0f / ((fConst70 + 0.16840488f) / fConst69 + 1.0693583f);
		fConst120 = fConst98 + 53.53615f;
		fConst121 = 1.0f / ((fConst70 + 0.51247865f) / fConst69 + 0.6896214f);
		fConst122 = fConst98 + 7.6217313f;
		fConst123 = 1.0f / ((fConst70 + 0.78241307f) / fConst69 + 0.2452915f);
		fConst124 = 0.0001f / fConst72;
		fConst125 = fConst124 + 0.0004332272f;
		fConst126 = (fConst70 + -0.78241307f) / fConst69 + 0.2452915f;
		fConst127 = 2.0f * (0.2452915f - fConst98);
		fConst128 = 2.0f * (0.0004332272f - fConst124);
		fConst129 = (fConst70 + -0.51247865f) / fConst69 + 0.6896214f;
		fConst130 = 2.0f * (0.6896214f - fConst98);
		fConst131 = 2.0f * (7.6217313f - fConst98);
		fConst132 = (fConst70 + -0.16840488f) / fConst69 + 1.0693583f;
		fConst133 = 2.0f * (1.0693583f - fConst98);
		fConst134 = 2.0f * (53.53615f - fConst98);
		fConst135 = (fConst108 + -3.1897273f) / fConst107 + 4.0767817f;
		fConst136 = 1.0f / fConst110;
		fConst137 = 2.0f * (4.0767817f - fConst136);
		fConst138 = 2.0f * (0.0004076782f - fConst117);
		fConst139 = (fConst108 + -0.74313045f) / fConst107 + 1.4500711f;
		fConst140 = 2.0f * (1.4500711f - fConst136);
		fConst141 = 2.0f * (1.4500711f - fConst114);
		fConst142 = (fConst108 + -0.15748216f) / fConst107 + 0.9351402f;
		fConst143 = 2.0f * (0.9351402f - fConst136);
		fConst144 = 2.0f * (0.9351402f - fConst111);
		fConst145 = std::tan(12566.371f / fConst0);
		fConst146 = 1.0f / fConst145;
		fConst147 = 1.0f / ((fConst146 + 0.15748216f) / fConst145 + 0.9351402f);
		fConst148 = mydsp_faustpower2_f(fConst145);
		fConst149 = 50.06381f / fConst148;
		fConst150 = fConst149 + 0.9351402f;
		fConst151 = 1.0f / ((fConst146 + 0.74313045f) / fConst145 + 1.4500711f);
		fConst152 = 11.0520525f / fConst148;
		fConst153 = fConst152 + 1.4500711f;
		fConst154 = 1.0f / ((fConst146 + 3.1897273f) / fConst145 + 4.0767817f);
		fConst155 = 0.0017661728f / fConst148;
		fConst156 = fConst155 + 0.0004076782f;
		fConst157 = 1.0f / ((fConst108 + 0.16840488f) / fConst107 + 1.0693583f);
		fConst158 = fConst136 + 53.53615f;
		fConst159 = 1.0f / ((fConst108 + 0.51247865f) / fConst107 + 0.6896214f);
		fConst160 = fConst136 + 7.6217313f;
		fConst161 = 1.0f / ((fConst108 + 0.78241307f) / fConst107 + 0.2452915f);
		fConst162 = 0.0001f / fConst110;
		fConst163 = fConst162 + 0.0004332272f;
		fConst164 = (fConst108 + -0.78241307f) / fConst107 + 0.2452915f;
		fConst165 = 2.0f * (0.2452915f - fConst136);
		fConst166 = 2.0f * (0.0004332272f - fConst162);
		fConst167 = (fConst108 + -0.51247865f) / fConst107 + 0.6896214f;
		fConst168 = 2.0f * (0.6896214f - fConst136);
		fConst169 = 2.0f * (7.6217313f - fConst136);
		fConst170 = (fConst108 + -0.16840488f) / fConst107 + 1.0693583f;
		fConst171 = 2.0f * (1.0693583f - fConst136);
		fConst172 = 2.0f * (53.53615f - fConst136);
		fConst173 = (fConst146 + -3.1897273f) / fConst145 + 4.0767817f;
		fConst174 = 1.0f / fConst148;
		fConst175 = 2.0f * (4.0767817f - fConst174);
		fConst176 = 2.0f * (0.0004076782f - fConst155);
		fConst177 = (fConst146 + -0.74313045f) / fConst145 + 1.4500711f;
		fConst178 = 2.0f * (1.4500711f - fConst174);
		fConst179 = 2.0f * (1.4500711f - fConst152);
		fConst180 = (fConst146 + -0.15748216f) / fConst145 + 0.9351402f;
		fConst181 = 2.0f * (0.9351402f - fConst174);
		fConst182 = 2.0f * (0.9351402f - fConst149);
		fConst183 = std::tan(8885.766f / fConst0);
		fConst184 = 1.0f / fConst183;
		fConst185 = 1.0f / ((fConst184 + 0.15748216f) / fConst183 + 0.9351402f);
		fConst186 = mydsp_faustpower2_f(fConst183);
		fConst187 = 50.06381f / fConst186;
		fConst188 = fConst187 + 0.9351402f;
		fConst189 = 1.0f / ((fConst184 + 0.74313045f) / fConst183 + 1.4500711f);
		fConst190 = 11.0520525f / fConst186;
		fConst191 = fConst190 + 1.4500711f;
		fConst192 = 1.0f / ((fConst184 + 3.1897273f) / fConst183 + 4.0767817f);
		fConst193 = 0.0017661728f / fConst186;
		fConst194 = fConst193 + 0.0004076782f;
		fConst195 = 1.0f / ((fConst146 + 0.16840488f) / fConst145 + 1.0693583f);
		fConst196 = fConst174 + 53.53615f;
		fConst197 = 1.0f / ((fConst146 + 0.51247865f) / fConst145 + 0.6896214f);
		fConst198 = fConst174 + 7.6217313f;
		fConst199 = 1.0f / ((fConst146 + 0.78241307f) / fConst145 + 0.2452915f);
		fConst200 = 0.0001f / fConst148;
		fConst201 = fConst200 + 0.0004332272f;
		fConst202 = (fConst146 + -0.78241307f) / fConst145 + 0.2452915f;
		fConst203 = 2.0f * (0.2452915f - fConst174);
		fConst204 = 2.0f * (0.0004332272f - fConst200);
		fConst205 = (fConst146 + -0.51247865f) / fConst145 + 0.6896214f;
		fConst206 = 2.0f * (0.6896214f - fConst174);
		fConst207 = 2.0f * (7.6217313f - fConst174);
		fConst208 = (fConst146 + -0.16840488f) / fConst145 + 1.0693583f;
		fConst209 = 2.0f * (1.0693583f - fConst174);
		fConst210 = 2.0f * (53.53615f - fConst174);
		fConst211 = (fConst184 + -3.1897273f) / fConst183 + 4.0767817f;
		fConst212 = 1.0f / fConst186;
		fConst213 = 2.0f * (4.0767817f - fConst212);
		fConst214 = 2.0f * (0.0004076782f - fConst193);
		fConst215 = (fConst184 + -0.74313045f) / fConst183 + 1.4500711f;
		fConst216 = 2.0f * (1.4500711f - fConst212);
		fConst217 = 2.0f * (1.4500711f - fConst190);
		fConst218 = (fConst184 + -0.15748216f) / fConst183 + 0.9351402f;
		fConst219 = 2.0f * (0.9351402f - fConst212);
		fConst220 = 2.0f * (0.9351402f - fConst187);
		fConst221 = std::tan(6283.1855f / fConst0);
		fConst222 = 1.0f / fConst221;
		fConst223 = 1.0f / ((fConst222 + 0.15748216f) / fConst221 + 0.9351402f);
		fConst224 = mydsp_faustpower2_f(fConst221);
		fConst225 = 50.06381f / fConst224;
		fConst226 = fConst225 + 0.9351402f;
		fConst227 = 1.0f / ((fConst222 + 0.74313045f) / fConst221 + 1.4500711f);
		fConst228 = 11.0520525f / fConst224;
		fConst229 = fConst228 + 1.4500711f;
		fConst230 = 1.0f / ((fConst222 + 3.1897273f) / fConst221 + 4.0767817f);
		fConst231 = 0.0017661728f / fConst224;
		fConst232 = fConst231 + 0.0004076782f;
		fConst233 = 1.0f / ((fConst184 + 0.16840488f) / fConst183 + 1.0693583f);
		fConst234 = fConst212 + 53.53615f;
		fConst235 = 1.0f / ((fConst184 + 0.51247865f) / fConst183 + 0.6896214f);
		fConst236 = fConst212 + 7.6217313f;
		fConst237 = 1.0f / ((fConst184 + 0.78241307f) / fConst183 + 0.2452915f);
		fConst238 = 0.0001f / fConst186;
		fConst239 = fConst238 + 0.0004332272f;
		fConst240 = (fConst184 + -0.78241307f) / fConst183 + 0.2452915f;
		fConst241 = 2.0f * (0.2452915f - fConst212);
		fConst242 = 2.0f * (0.0004332272f - fConst238);
		fConst243 = (fConst184 + -0.51247865f) / fConst183 + 0.6896214f;
		fConst244 = 2.0f * (0.6896214f - fConst212);
		fConst245 = 2.0f * (7.6217313f - fConst212);
		fConst246 = (fConst184 + -0.16840488f) / fConst183 + 1.0693583f;
		fConst247 = 2.0f * (1.0693583f - fConst212);
		fConst248 = 2.0f * (53.53615f - fConst212);
		fConst249 = (fConst222 + -3.1897273f) / fConst221 + 4.0767817f;
		fConst250 = 1.0f / fConst224;
		fConst251 = 2.0f * (4.0767817f - fConst250);
		fConst252 = 2.0f * (0.0004076782f - fConst231);
		fConst253 = (fConst222 + -0.74313045f) / fConst221 + 1.4500711f;
		fConst254 = 2.0f * (1.4500711f - fConst250);
		fConst255 = 2.0f * (1.4500711f - fConst228);
		fConst256 = (fConst222 + -0.15748216f) / fConst221 + 0.9351402f;
		fConst257 = 2.0f * (0.9351402f - fConst250);
		fConst258 = 2.0f * (0.9351402f - fConst225);
		fConst259 = std::tan(4442.883f / fConst0);
		fConst260 = 1.0f / fConst259;
		fConst261 = 1.0f / ((fConst260 + 0.15748216f) / fConst259 + 0.9351402f);
		fConst262 = mydsp_faustpower2_f(fConst259);
		fConst263 = 50.06381f / fConst262;
		fConst264 = fConst263 + 0.9351402f;
		fConst265 = 1.0f / ((fConst260 + 0.74313045f) / fConst259 + 1.4500711f);
		fConst266 = 11.0520525f / fConst262;
		fConst267 = fConst266 + 1.4500711f;
		fConst268 = 1.0f / ((fConst260 + 3.1897273f) / fConst259 + 4.0767817f);
		fConst269 = 0.0017661728f / fConst262;
		fConst270 = fConst269 + 0.0004076782f;
		fConst271 = 1.0f / ((fConst222 + 0.16840488f) / fConst221 + 1.0693583f);
		fConst272 = fConst250 + 53.53615f;
		fConst273 = 1.0f / ((fConst222 + 0.51247865f) / fConst221 + 0.6896214f);
		fConst274 = fConst250 + 7.6217313f;
		fConst275 = 1.0f / ((fConst222 + 0.78241307f) / fConst221 + 0.2452915f);
		fConst276 = 0.0001f / fConst224;
		fConst277 = fConst276 + 0.0004332272f;
		fConst278 = (fConst222 + -0.78241307f) / fConst221 + 0.2452915f;
		fConst279 = 2.0f * (0.2452915f - fConst250);
		fConst280 = 2.0f * (0.0004332272f - fConst276);
		fConst281 = (fConst222 + -0.51247865f) / fConst221 + 0.6896214f;
		fConst282 = 2.0f * (0.6896214f - fConst250);
		fConst283 = 2.0f * (7.6217313f - fConst250);
		fConst284 = (fConst222 + -0.16840488f) / fConst221 + 1.0693583f;
		fConst285 = 2.0f * (1.0693583f - fConst250);
		fConst286 = 2.0f * (53.53615f - fConst250);
		fConst287 = (fConst260 + -3.1897273f) / fConst259 + 4.0767817f;
		fConst288 = 1.0f / fConst262;
		fConst289 = 2.0f * (4.0767817f - fConst288);
		fConst290 = 2.0f * (0.0004076782f - fConst269);
		fConst291 = (fConst260 + -0.74313045f) / fConst259 + 1.4500711f;
		fConst292 = 2.0f * (1.4500711f - fConst288);
		fConst293 = 2.0f * (1.4500711f - fConst266);
		fConst294 = (fConst260 + -0.15748216f) / fConst259 + 0.9351402f;
		fConst295 = 2.0f * (0.9351402f - fConst288);
		fConst296 = 2.0f * (0.9351402f - fConst263);
		fConst297 = std::tan(3141.5928f / fConst0);
		fConst298 = 1.0f / fConst297;
		fConst299 = 1.0f / ((fConst298 + 0.15748216f) / fConst297 + 0.9351402f);
		fConst300 = mydsp_faustpower2_f(fConst297);
		fConst301 = 50.06381f / fConst300;
		fConst302 = fConst301 + 0.9351402f;
		fConst303 = 1.0f / ((fConst298 + 0.74313045f) / fConst297 + 1.4500711f);
		fConst304 = 11.0520525f / fConst300;
		fConst305 = fConst304 + 1.4500711f;
		fConst306 = 1.0f / ((fConst298 + 3.1897273f) / fConst297 + 4.0767817f);
		fConst307 = 0.0017661728f / fConst300;
		fConst308 = fConst307 + 0.0004076782f;
		fConst309 = 1.0f / ((fConst260 + 0.16840488f) / fConst259 + 1.0693583f);
		fConst310 = fConst288 + 53.53615f;
		fConst311 = 1.0f / ((fConst260 + 0.51247865f) / fConst259 + 0.6896214f);
		fConst312 = fConst288 + 7.6217313f;
		fConst313 = 1.0f / ((fConst260 + 0.78241307f) / fConst259 + 0.2452915f);
		fConst314 = 0.0001f / fConst262;
		fConst315 = fConst314 + 0.0004332272f;
		fConst316 = (fConst260 + -0.78241307f) / fConst259 + 0.2452915f;
		fConst317 = 2.0f * (0.2452915f - fConst288);
		fConst318 = 2.0f * (0.0004332272f - fConst314);
		fConst319 = (fConst260 + -0.51247865f) / fConst259 + 0.6896214f;
		fConst320 = 2.0f * (0.6896214f - fConst288);
		fConst321 = 2.0f * (7.6217313f - fConst288);
		fConst322 = (fConst260 + -0.16840488f) / fConst259 + 1.0693583f;
		fConst323 = 2.0f * (1.0693583f - fConst288);
		fConst324 = 2.0f * (53.53615f - fConst288);
		fConst325 = (fConst298 + -3.1897273f) / fConst297 + 4.0767817f;
		fConst326 = 1.0f / fConst300;
		fConst327 = 2.0f * (4.0767817f - fConst326);
		fConst328 = 2.0f * (0.0004076782f - fConst307);
		fConst329 = (fConst298 + -0.74313045f) / fConst297 + 1.4500711f;
		fConst330 = 2.0f * (1.4500711f - fConst326);
		fConst331 = 2.0f * (1.4500711f - fConst304);
		fConst332 = (fConst298 + -0.15748216f) / fConst297 + 0.9351402f;
		fConst333 = 2.0f * (0.9351402f - fConst326);
		fConst334 = 2.0f * (0.9351402f - fConst301);
		fConst335 = std::tan(2221.4414f / fConst0);
		fConst336 = 1.0f / fConst335;
		fConst337 = 1.0f / ((fConst336 + 0.15748216f) / fConst335 + 0.9351402f);
		fConst338 = mydsp_faustpower2_f(fConst335);
		fConst339 = 50.06381f / fConst338;
		fConst340 = fConst339 + 0.9351402f;
		fConst341 = 1.0f / ((fConst336 + 0.74313045f) / fConst335 + 1.4500711f);
		fConst342 = 11.0520525f / fConst338;
		fConst343 = fConst342 + 1.4500711f;
		fConst344 = 1.0f / ((fConst336 + 3.1897273f) / fConst335 + 4.0767817f);
		fConst345 = 0.0017661728f / fConst338;
		fConst346 = fConst345 + 0.0004076782f;
		fConst347 = 1.0f / ((fConst298 + 0.16840488f) / fConst297 + 1.0693583f);
		fConst348 = fConst326 + 53.53615f;
		fConst349 = 1.0f / ((fConst298 + 0.51247865f) / fConst297 + 0.6896214f);
		fConst350 = fConst326 + 7.6217313f;
		fConst351 = 1.0f / ((fConst298 + 0.78241307f) / fConst297 + 0.2452915f);
		fConst352 = 0.0001f / fConst300;
		fConst353 = fConst352 + 0.0004332272f;
		fConst354 = (fConst298 + -0.78241307f) / fConst297 + 0.2452915f;
		fConst355 = 2.0f * (0.2452915f - fConst326);
		fConst356 = 2.0f * (0.0004332272f - fConst352);
		fConst357 = (fConst298 + -0.51247865f) / fConst297 + 0.6896214f;
		fConst358 = 2.0f * (0.6896214f - fConst326);
		fConst359 = 2.0f * (7.6217313f - fConst326);
		fConst360 = (fConst298 + -0.16840488f) / fConst297 + 1.0693583f;
		fConst361 = 2.0f * (1.0693583f - fConst326);
		fConst362 = 2.0f * (53.53615f - fConst326);
		fConst363 = (fConst336 + -3.1897273f) / fConst335 + 4.0767817f;
		fConst364 = 1.0f / fConst338;
		fConst365 = 2.0f * (4.0767817f - fConst364);
		fConst366 = 2.0f * (0.0004076782f - fConst345);
		fConst367 = (fConst336 + -0.74313045f) / fConst335 + 1.4500711f;
		fConst368 = 2.0f * (1.4500711f - fConst364);
		fConst369 = 2.0f * (1.4500711f - fConst342);
		fConst370 = (fConst336 + -0.15748216f) / fConst335 + 0.9351402f;
		fConst371 = 2.0f * (0.9351402f - fConst364);
		fConst372 = 2.0f * (0.9351402f - fConst339);
		fConst373 = std::tan(1570.7964f / fConst0);
		fConst374 = 1.0f / fConst373;
		fConst375 = 1.0f / ((fConst374 + 0.15748216f) / fConst373 + 0.9351402f);
		fConst376 = mydsp_faustpower2_f(fConst373);
		fConst377 = 50.06381f / fConst376;
		fConst378 = fConst377 + 0.9351402f;
		fConst379 = 1.0f / ((fConst374 + 0.74313045f) / fConst373 + 1.4500711f);
		fConst380 = 11.0520525f / fConst376;
		fConst381 = fConst380 + 1.4500711f;
		fConst382 = 1.0f / ((fConst374 + 3.1897273f) / fConst373 + 4.0767817f);
		fConst383 = 0.0017661728f / fConst376;
		fConst384 = fConst383 + 0.0004076782f;
		fConst385 = 1.0f / ((fConst336 + 0.16840488f) / fConst335 + 1.0693583f);
		fConst386 = fConst364 + 53.53615f;
		fConst387 = 1.0f / ((fConst336 + 0.51247865f) / fConst335 + 0.6896214f);
		fConst388 = fConst364 + 7.6217313f;
		fConst389 = 1.0f / ((fConst336 + 0.78241307f) / fConst335 + 0.2452915f);
		fConst390 = 0.0001f / fConst338;
		fConst391 = fConst390 + 0.0004332272f;
		fConst392 = (fConst336 + -0.78241307f) / fConst335 + 0.2452915f;
		fConst393 = 2.0f * (0.2452915f - fConst364);
		fConst394 = 2.0f * (0.0004332272f - fConst390);
		fConst395 = (fConst336 + -0.51247865f) / fConst335 + 0.6896214f;
		fConst396 = 2.0f * (0.6896214f - fConst364);
		fConst397 = 2.0f * (7.6217313f - fConst364);
		fConst398 = (fConst336 + -0.16840488f) / fConst335 + 1.0693583f;
		fConst399 = 2.0f * (1.0693583f - fConst364);
		fConst400 = 2.0f * (53.53615f - fConst364);
		fConst401 = (fConst374 + -3.1897273f) / fConst373 + 4.0767817f;
		fConst402 = 1.0f / fConst376;
		fConst403 = 2.0f * (4.0767817f - fConst402);
		fConst404 = 2.0f * (0.0004076782f - fConst383);
		fConst405 = (fConst374 + -0.74313045f) / fConst373 + 1.4500711f;
		fConst406 = 2.0f * (1.4500711f - fConst402);
		fConst407 = 2.0f * (1.4500711f - fConst380);
		fConst408 = (fConst374 + -0.15748216f) / fConst373 + 0.9351402f;
		fConst409 = 2.0f * (0.9351402f - fConst402);
		fConst410 = 2.0f * (0.9351402f - fConst377);
		fConst411 = std::tan(1110.7207f / fConst0);
		fConst412 = 1.0f / fConst411;
		fConst413 = 1.0f / ((fConst412 + 0.15748216f) / fConst411 + 0.9351402f);
		fConst414 = mydsp_faustpower2_f(fConst411);
		fConst415 = 50.06381f / fConst414;
		fConst416 = fConst415 + 0.9351402f;
		fConst417 = 1.0f / ((fConst412 + 0.74313045f) / fConst411 + 1.4500711f);
		fConst418 = 11.0520525f / fConst414;
		fConst419 = fConst418 + 1.4500711f;
		fConst420 = 1.0f / ((fConst412 + 3.1897273f) / fConst411 + 4.0767817f);
		fConst421 = 0.0017661728f / fConst414;
		fConst422 = fConst421 + 0.0004076782f;
		fConst423 = 1.0f / ((fConst374 + 0.16840488f) / fConst373 + 1.0693583f);
		fConst424 = fConst402 + 53.53615f;
		fConst425 = 1.0f / ((fConst374 + 0.51247865f) / fConst373 + 0.6896214f);
		fConst426 = fConst402 + 7.6217313f;
		fConst427 = 1.0f / ((fConst374 + 0.78241307f) / fConst373 + 0.2452915f);
		fConst428 = 0.0001f / fConst376;
		fConst429 = fConst428 + 0.0004332272f;
		fConst430 = (fConst374 + -0.78241307f) / fConst373 + 0.2452915f;
		fConst431 = 2.0f * (0.2452915f - fConst402);
		fConst432 = 2.0f * (0.0004332272f - fConst428);
		fConst433 = (fConst374 + -0.51247865f) / fConst373 + 0.6896214f;
		fConst434 = 2.0f * (0.6896214f - fConst402);
		fConst435 = 2.0f * (7.6217313f - fConst402);
		fConst436 = (fConst374 + -0.16840488f) / fConst373 + 1.0693583f;
		fConst437 = 2.0f * (1.0693583f - fConst402);
		fConst438 = 2.0f * (53.53615f - fConst402);
		fConst439 = (fConst412 + -3.1897273f) / fConst411 + 4.0767817f;
		fConst440 = 1.0f / fConst414;
		fConst441 = 2.0f * (4.0767817f - fConst440);
		fConst442 = 2.0f * (0.0004076782f - fConst421);
		fConst443 = (fConst412 + -0.74313045f) / fConst411 + 1.4500711f;
		fConst444 = 2.0f * (1.4500711f - fConst440);
		fConst445 = 2.0f * (1.4500711f - fConst418);
		fConst446 = (fConst412 + -0.15748216f) / fConst411 + 0.9351402f;
		fConst447 = 2.0f * (0.9351402f - fConst440);
		fConst448 = 2.0f * (0.9351402f - fConst415);
		fConst449 = std::tan(785.3982f / fConst0);
		fConst450 = 1.0f / fConst449;
		fConst451 = 1.0f / ((fConst450 + 0.15748216f) / fConst449 + 0.9351402f);
		fConst452 = mydsp_faustpower2_f(fConst449);
		fConst453 = 50.06381f / fConst452;
		fConst454 = fConst453 + 0.9351402f;
		fConst455 = 1.0f / ((fConst450 + 0.74313045f) / fConst449 + 1.4500711f);
		fConst456 = 11.0520525f / fConst452;
		fConst457 = fConst456 + 1.4500711f;
		fConst458 = 1.0f / ((fConst450 + 3.1897273f) / fConst449 + 4.0767817f);
		fConst459 = 0.0017661728f / fConst452;
		fConst460 = fConst459 + 0.0004076782f;
		fConst461 = 1.0f / ((fConst412 + 0.16840488f) / fConst411 + 1.0693583f);
		fConst462 = fConst440 + 53.53615f;
		fConst463 = 1.0f / ((fConst412 + 0.51247865f) / fConst411 + 0.6896214f);
		fConst464 = fConst440 + 7.6217313f;
		fConst465 = 1.0f / ((fConst412 + 0.78241307f) / fConst411 + 0.2452915f);
		fConst466 = 0.0001f / fConst414;
		fConst467 = fConst466 + 0.0004332272f;
		fConst468 = (fConst412 + -0.78241307f) / fConst411 + 0.2452915f;
		fConst469 = 2.0f * (0.2452915f - fConst440);
		fConst470 = 2.0f * (0.0004332272f - fConst466);
		fConst471 = (fConst412 + -0.51247865f) / fConst411 + 0.6896214f;
		fConst472 = 2.0f * (0.6896214f - fConst440);
		fConst473 = 2.0f * (7.6217313f - fConst440);
		fConst474 = (fConst412 + -0.16840488f) / fConst411 + 1.0693583f;
		fConst475 = 2.0f * (1.0693583f - fConst440);
		fConst476 = 2.0f * (53.53615f - fConst440);
		fConst477 = (fConst450 + -3.1897273f) / fConst449 + 4.0767817f;
		fConst478 = 1.0f / fConst452;
		fConst479 = 2.0f * (4.0767817f - fConst478);
		fConst480 = 2.0f * (0.0004076782f - fConst459);
		fConst481 = (fConst450 + -0.74313045f) / fConst449 + 1.4500711f;
		fConst482 = 2.0f * (1.4500711f - fConst478);
		fConst483 = 2.0f * (1.4500711f - fConst456);
		fConst484 = (fConst450 + -0.15748216f) / fConst449 + 0.9351402f;
		fConst485 = 2.0f * (0.9351402f - fConst478);
		fConst486 = 2.0f * (0.9351402f - fConst453);
		fConst487 = std::tan(555.36035f / fConst0);
		fConst488 = 1.0f / fConst487;
		fConst489 = 1.0f / ((fConst488 + 0.15748216f) / fConst487 + 0.9351402f);
		fConst490 = mydsp_faustpower2_f(fConst487);
		fConst491 = 50.06381f / fConst490;
		fConst492 = fConst491 + 0.9351402f;
		fConst493 = 1.0f / ((fConst488 + 0.74313045f) / fConst487 + 1.4500711f);
		fConst494 = 11.0520525f / fConst490;
		fConst495 = fConst494 + 1.4500711f;
		fConst496 = 1.0f / ((fConst488 + 3.1897273f) / fConst487 + 4.0767817f);
		fConst497 = 0.0017661728f / fConst490;
		fConst498 = fConst497 + 0.0004076782f;
		fConst499 = 1.0f / ((fConst450 + 0.16840488f) / fConst449 + 1.0693583f);
		fConst500 = fConst478 + 53.53615f;
		fConst501 = 1.0f / ((fConst450 + 0.51247865f) / fConst449 + 0.6896214f);
		fConst502 = fConst478 + 7.6217313f;
		fConst503 = 1.0f / ((fConst450 + 0.78241307f) / fConst449 + 0.2452915f);
		fConst504 = 0.0001f / fConst452;
		fConst505 = fConst504 + 0.0004332272f;
		fConst506 = (fConst450 + -0.78241307f) / fConst449 + 0.2452915f;
		fConst507 = 2.0f * (0.2452915f - fConst478);
		fConst508 = 2.0f * (0.0004332272f - fConst504);
		fConst509 = (fConst450 + -0.51247865f) / fConst449 + 0.6896214f;
		fConst510 = 2.0f * (0.6896214f - fConst478);
		fConst511 = 2.0f * (7.6217313f - fConst478);
		fConst512 = (fConst450 + -0.16840488f) / fConst449 + 1.0693583f;
		fConst513 = 2.0f * (1.0693583f - fConst478);
		fConst514 = 2.0f * (53.53615f - fConst478);
		fConst515 = (fConst488 + -3.1897273f) / fConst487 + 4.0767817f;
		fConst516 = 1.0f / fConst490;
		fConst517 = 2.0f * (4.0767817f - fConst516);
		fConst518 = 2.0f * (0.0004076782f - fConst497);
		fConst519 = (fConst488 + -0.74313045f) / fConst487 + 1.4500711f;
		fConst520 = 2.0f * (1.4500711f - fConst516);
		fConst521 = 2.0f * (1.4500711f - fConst494);
		fConst522 = (fConst488 + -0.15748216f) / fConst487 + 0.9351402f;
		fConst523 = 2.0f * (0.9351402f - fConst516);
		fConst524 = 2.0f * (0.9351402f - fConst491);
		fConst525 = std::tan(392.6991f / fConst0);
		fConst526 = 1.0f / fConst525;
		fConst527 = 1.0f / ((fConst526 + 0.15748216f) / fConst525 + 0.9351402f);
		fConst528 = mydsp_faustpower2_f(fConst525);
		fConst529 = 50.06381f / fConst528;
		fConst530 = fConst529 + 0.9351402f;
		fConst531 = 1.0f / ((fConst526 + 0.74313045f) / fConst525 + 1.4500711f);
		fConst532 = 11.0520525f / fConst528;
		fConst533 = fConst532 + 1.4500711f;
		fConst534 = 1.0f / ((fConst526 + 3.1897273f) / fConst525 + 4.0767817f);
		fConst535 = 0.0017661728f / fConst528;
		fConst536 = fConst535 + 0.0004076782f;
		fConst537 = 1.0f / ((fConst488 + 0.16840488f) / fConst487 + 1.0693583f);
		fConst538 = fConst516 + 53.53615f;
		fConst539 = 1.0f / ((fConst488 + 0.51247865f) / fConst487 + 0.6896214f);
		fConst540 = fConst516 + 7.6217313f;
		fConst541 = 1.0f / ((fConst488 + 0.78241307f) / fConst487 + 0.2452915f);
		fConst542 = 0.0001f / fConst490;
		fConst543 = fConst542 + 0.0004332272f;
		fConst544 = (fConst488 + -0.78241307f) / fConst487 + 0.2452915f;
		fConst545 = 2.0f * (0.2452915f - fConst516);
		fConst546 = 2.0f * (0.0004332272f - fConst542);
		fConst547 = (fConst488 + -0.51247865f) / fConst487 + 0.6896214f;
		fConst548 = 2.0f * (0.6896214f - fConst516);
		fConst549 = 2.0f * (7.6217313f - fConst516);
		fConst550 = (fConst488 + -0.16840488f) / fConst487 + 1.0693583f;
		fConst551 = 2.0f * (1.0693583f - fConst516);
		fConst552 = 2.0f * (53.53615f - fConst516);
		fConst553 = (fConst526 + -3.1897273f) / fConst525 + 4.0767817f;
		fConst554 = 1.0f / fConst528;
		fConst555 = 2.0f * (4.0767817f - fConst554);
		fConst556 = 2.0f * (0.0004076782f - fConst535);
		fConst557 = (fConst526 + -0.74313045f) / fConst525 + 1.4500711f;
		fConst558 = 2.0f * (1.4500711f - fConst554);
		fConst559 = 2.0f * (1.4500711f - fConst532);
		fConst560 = (fConst526 + -0.15748216f) / fConst525 + 0.9351402f;
		fConst561 = 2.0f * (0.9351402f - fConst554);
		fConst562 = 2.0f * (0.9351402f - fConst529);
		fConst563 = std::tan(277.68018f / fConst0);
		fConst564 = 1.0f / fConst563;
		fConst565 = 1.0f / ((fConst564 + 0.15748216f) / fConst563 + 0.9351402f);
		fConst566 = mydsp_faustpower2_f(fConst563);
		fConst567 = 50.06381f / fConst566;
		fConst568 = fConst567 + 0.9351402f;
		fConst569 = 1.0f / ((fConst564 + 0.74313045f) / fConst563 + 1.4500711f);
		fConst570 = 11.0520525f / fConst566;
		fConst571 = fConst570 + 1.4500711f;
		fConst572 = 1.0f / ((fConst564 + 3.1897273f) / fConst563 + 4.0767817f);
		fConst573 = 0.0017661728f / fConst566;
		fConst574 = fConst573 + 0.0004076782f;
		fConst575 = 1.0f / ((fConst526 + 0.16840488f) / fConst525 + 1.0693583f);
		fConst576 = fConst554 + 53.53615f;
		fConst577 = 1.0f / ((fConst526 + 0.51247865f) / fConst525 + 0.6896214f);
		fConst578 = fConst554 + 7.6217313f;
		fConst579 = 1.0f / ((fConst526 + 0.78241307f) / fConst525 + 0.2452915f);
		fConst580 = 0.0001f / fConst528;
		fConst581 = fConst580 + 0.0004332272f;
		fConst582 = (fConst526 + -0.78241307f) / fConst525 + 0.2452915f;
		fConst583 = 2.0f * (0.2452915f - fConst554);
		fConst584 = 2.0f * (0.0004332272f - fConst580);
		fConst585 = (fConst526 + -0.51247865f) / fConst525 + 0.6896214f;
		fConst586 = 2.0f * (0.6896214f - fConst554);
		fConst587 = 2.0f * (7.6217313f - fConst554);
		fConst588 = (fConst526 + -0.16840488f) / fConst525 + 1.0693583f;
		fConst589 = 2.0f * (1.0693583f - fConst554);
		fConst590 = 2.0f * (53.53615f - fConst554);
		fConst591 = (fConst564 + -3.1897273f) / fConst563 + 4.0767817f;
		fConst592 = 1.0f / fConst566;
		fConst593 = 2.0f * (4.0767817f - fConst592);
		fConst594 = 2.0f * (0.0004076782f - fConst573);
		fConst595 = (fConst564 + -0.74313045f) / fConst563 + 1.4500711f;
		fConst596 = 2.0f * (1.4500711f - fConst592);
		fConst597 = 2.0f * (1.4500711f - fConst570);
		fConst598 = (fConst564 + -0.15748216f) / fConst563 + 0.9351402f;
		fConst599 = 2.0f * (0.9351402f - fConst592);
		fConst600 = 2.0f * (0.9351402f - fConst567);
		fConst601 = std::tan(196.34955f / fConst0);
		fConst602 = 1.0f / fConst601;
		fConst603 = 1.0f / ((fConst602 + 0.15748216f) / fConst601 + 0.9351402f);
		fConst604 = mydsp_faustpower2_f(fConst601);
		fConst605 = 50.06381f / fConst604;
		fConst606 = fConst605 + 0.9351402f;
		fConst607 = 1.0f / ((fConst602 + 0.74313045f) / fConst601 + 1.4500711f);
		fConst608 = 11.0520525f / fConst604;
		fConst609 = fConst608 + 1.4500711f;
		fConst610 = 1.0f / ((fConst602 + 3.1897273f) / fConst601 + 4.0767817f);
		fConst611 = 0.0017661728f / fConst604;
		fConst612 = fConst611 + 0.0004076782f;
		fConst613 = 1.0f / ((fConst564 + 0.16840488f) / fConst563 + 1.0693583f);
		fConst614 = fConst592 + 53.53615f;
		fConst615 = 1.0f / ((fConst564 + 0.51247865f) / fConst563 + 0.6896214f);
		fConst616 = fConst592 + 7.6217313f;
		fConst617 = 1.0f / ((fConst564 + 0.78241307f) / fConst563 + 0.2452915f);
		fConst618 = 0.0001f / fConst566;
		fConst619 = fConst618 + 0.0004332272f;
		fConst620 = (fConst564 + -0.78241307f) / fConst563 + 0.2452915f;
		fConst621 = 2.0f * (0.2452915f - fConst592);
		fConst622 = 2.0f * (0.0004332272f - fConst618);
		fConst623 = (fConst564 + -0.51247865f) / fConst563 + 0.6896214f;
		fConst624 = 2.0f * (0.6896214f - fConst592);
		fConst625 = 2.0f * (7.6217313f - fConst592);
		fConst626 = (fConst564 + -0.16840488f) / fConst563 + 1.0693583f;
		fConst627 = 2.0f * (1.0693583f - fConst592);
		fConst628 = 2.0f * (53.53615f - fConst592);
		fConst629 = (fConst602 + -3.1897273f) / fConst601 + 4.0767817f;
		fConst630 = 1.0f / fConst604;
		fConst631 = 2.0f * (4.0767817f - fConst630);
		fConst632 = 2.0f * (0.0004076782f - fConst611);
		fConst633 = (fConst602 + -0.74313045f) / fConst601 + 1.4500711f;
		fConst634 = 2.0f * (1.4500711f - fConst630);
		fConst635 = 2.0f * (1.4500711f - fConst608);
		fConst636 = (fConst602 + -0.15748216f) / fConst601 + 0.9351402f;
		fConst637 = 2.0f * (0.9351402f - fConst630);
		fConst638 = 2.0f * (0.9351402f - fConst605);
		fConst639 = std::tan(138.84009f / fConst0);
		fConst640 = 1.0f / fConst639;
		fConst641 = 1.0f / ((fConst640 + 0.15748216f) / fConst639 + 0.9351402f);
		fConst642 = mydsp_faustpower2_f(fConst639);
		fConst643 = 50.06381f / fConst642;
		fConst644 = fConst643 + 0.9351402f;
		fConst645 = 1.0f / ((fConst640 + 0.74313045f) / fConst639 + 1.4500711f);
		fConst646 = 11.0520525f / fConst642;
		fConst647 = fConst646 + 1.4500711f;
		fConst648 = 1.0f / ((fConst640 + 3.1897273f) / fConst639 + 4.0767817f);
		fConst649 = 0.0017661728f / fConst642;
		fConst650 = fConst649 + 0.0004076782f;
		fConst651 = 1.0f / ((fConst602 + 0.16840488f) / fConst601 + 1.0693583f);
		fConst652 = fConst630 + 53.53615f;
		fConst653 = 1.0f / ((fConst602 + 0.51247865f) / fConst601 + 0.6896214f);
		fConst654 = fConst630 + 7.6217313f;
		fConst655 = 1.0f / ((fConst602 + 0.78241307f) / fConst601 + 0.2452915f);
		fConst656 = 0.0001f / fConst604;
		fConst657 = fConst656 + 0.0004332272f;
		fConst658 = (fConst602 + -0.78241307f) / fConst601 + 0.2452915f;
		fConst659 = 2.0f * (0.2452915f - fConst630);
		fConst660 = 2.0f * (0.0004332272f - fConst656);
		fConst661 = (fConst602 + -0.51247865f) / fConst601 + 0.6896214f;
		fConst662 = 2.0f * (0.6896214f - fConst630);
		fConst663 = 2.0f * (7.6217313f - fConst630);
		fConst664 = (fConst602 + -0.16840488f) / fConst601 + 1.0693583f;
		fConst665 = 2.0f * (1.0693583f - fConst630);
		fConst666 = 2.0f * (53.53615f - fConst630);
		fConst667 = (fConst640 + -3.1897273f) / fConst639 + 4.0767817f;
		fConst668 = 1.0f / fConst642;
		fConst669 = 2.0f * (4.0767817f - fConst668);
		fConst670 = 2.0f * (0.0004076782f - fConst649);
		fConst671 = (fConst640 + -0.74313045f) / fConst639 + 1.4500711f;
		fConst672 = 2.0f * (1.4500711f - fConst668);
		fConst673 = 2.0f * (1.4500711f - fConst646);
		fConst674 = (fConst640 + -0.15748216f) / fConst639 + 0.9351402f;
		fConst675 = 2.0f * (0.9351402f - fConst668);
		fConst676 = 2.0f * (0.9351402f - fConst643);
		fConst677 = std::tan(98.174774f / fConst0);
		fConst678 = 1.0f / fConst677;
		fConst679 = 1.0f / ((fConst678 + 0.15748216f) / fConst677 + 0.9351402f);
		fConst680 = mydsp_faustpower2_f(fConst677);
		fConst681 = 50.06381f / fConst680;
		fConst682 = fConst681 + 0.9351402f;
		fConst683 = 1.0f / ((fConst678 + 0.74313045f) / fConst677 + 1.4500711f);
		fConst684 = 11.0520525f / fConst680;
		fConst685 = fConst684 + 1.4500711f;
		fConst686 = 1.0f / ((fConst678 + 3.1897273f) / fConst677 + 4.0767817f);
		fConst687 = 0.0017661728f / fConst680;
		fConst688 = fConst687 + 0.0004076782f;
		fConst689 = 1.0f / ((fConst640 + 0.16840488f) / fConst639 + 1.0693583f);
		fConst690 = fConst668 + 53.53615f;
		fConst691 = 1.0f / ((fConst640 + 0.51247865f) / fConst639 + 0.6896214f);
		fConst692 = fConst668 + 7.6217313f;
		fConst693 = 1.0f / ((fConst640 + 0.78241307f) / fConst639 + 0.2452915f);
		fConst694 = 0.0001f / fConst642;
		fConst695 = fConst694 + 0.0004332272f;
		fConst696 = (fConst640 + -0.78241307f) / fConst639 + 0.2452915f;
		fConst697 = 2.0f * (0.2452915f - fConst668);
		fConst698 = 2.0f * (0.0004332272f - fConst694);
		fConst699 = (fConst640 + -0.51247865f) / fConst639 + 0.6896214f;
		fConst700 = 2.0f * (0.6896214f - fConst668);
		fConst701 = 2.0f * (7.6217313f - fConst668);
		fConst702 = (fConst640 + -0.16840488f) / fConst639 + 1.0693583f;
		fConst703 = 2.0f * (1.0693583f - fConst668);
		fConst704 = 2.0f * (53.53615f - fConst668);
		fConst705 = (fConst678 + -3.1897273f) / fConst677 + 4.0767817f;
		fConst706 = 1.0f / fConst680;
		fConst707 = 2.0f * (4.0767817f - fConst706);
		fConst708 = 2.0f * (0.0004076782f - fConst687);
		fConst709 = (fConst678 + -0.74313045f) / fConst677 + 1.4500711f;
		fConst710 = 2.0f * (1.4500711f - fConst706);
		fConst711 = 2.0f * (1.4500711f - fConst684);
		fConst712 = (fConst678 + -0.15748216f) / fConst677 + 0.9351402f;
		fConst713 = 2.0f * (0.9351402f - fConst706);
		fConst714 = 2.0f * (0.9351402f - fConst681);
		fConst715 = 1.0f / ((fConst678 + 0.16840488f) / fConst677 + 1.0693583f);
		fConst716 = fConst706 + 53.53615f;
		fConst717 = 1.0f / ((fConst678 + 0.51247865f) / fConst677 + 0.6896214f);
		fConst718 = fConst706 + 7.6217313f;
		fConst719 = 1.0f / ((fConst678 + 0.78241307f) / fConst677 + 0.2452915f);
		fConst720 = 0.0001f / fConst680;
		fConst721 = fConst720 + 0.0004332272f;
		fConst722 = (fConst678 + -0.78241307f) / fConst677 + 0.2452915f;
		fConst723 = 2.0f * (0.2452915f - fConst706);
		fConst724 = 2.0f * (0.0004332272f - fConst720);
		fConst725 = (fConst678 + -0.51247865f) / fConst677 + 0.6896214f;
		fConst726 = 2.0f * (0.6896214f - fConst706);
		fConst727 = 2.0f * (7.6217313f - fConst706);
		fConst728 = (fConst678 + -0.16840488f) / fConst677 + 1.0693583f;
		fConst729 = 2.0f * (1.0693583f - fConst706);
		fConst730 = 2.0f * (53.53615f - fConst706);
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(5e+01f);
		fHslider1 = FAUSTFLOAT(1e+02f);
		fHslider2 = FAUSTFLOAT(8e+03f);
		fHslider3 = FAUSTFLOAT(2e+02f);
		fVslider0 = FAUSTFLOAT(-2e+01f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
		fEntry0 = FAUSTFLOAT(2.0f);
		fVslider1 = FAUSTFLOAT(0.1f);
		fVslider2 = FAUSTFLOAT(49.0f);
		fVslider3 = FAUSTFLOAT(-0.1f);
		fVslider4 = FAUSTFLOAT(0.1f);
		fCheckbox2 = FAUSTFLOAT(0.0f);
		fHslider4 = FAUSTFLOAT(0.0f);
		fHslider5 = FAUSTFLOAT(49.0f);
		fHslider6 = FAUSTFLOAT(0.0f);
		fHslider7 = FAUSTFLOAT(4e+01f);
		fHslider8 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 4; l0 = l0 + 1) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec9[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec11[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec10[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fVec1[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fVec2[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fVec3[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fVec4[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fVec5[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fVec6[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fRec12[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fVec7[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fVec8[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fVec9[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fVec10[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fVec11[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
			fVec12[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2; l17 = l17 + 1) {
			fRec13[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fVec13[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fVec14[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fVec15[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 2; l21 = l21 + 1) {
			fVec16[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			fVec17[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fVec18[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			iRec14[l24] = 0;
		}
		for (int l25 = 0; l25 < 4; l25 = l25 + 1) {
			fRec15[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			fVec19[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			fRec8[l27] = 0.0f;
		}
		for (int l28 = 0; l28 < 3; l28 = l28 + 1) {
			fRec7[l28] = 0.0f;
		}
		for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
			fRec17[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 3; l30 = l30 + 1) {
			fRec16[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
			fRec18[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 3; l32 = l32 + 1) {
			fRec6[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			fVec20[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			fRec5[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 3; l35 = l35 + 1) {
			fRec4[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
			fRec20[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 3; l37 = l37 + 1) {
			fRec19[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 3; l38 = l38 + 1) {
			fRec3[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 3; l39 = l39 + 1) {
			fRec2[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 3; l40 = l40 + 1) {
			fRec1[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
			fRec0[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 3; l42 = l42 + 1) {
			fRec27[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 3; l43 = l43 + 1) {
			fRec26[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
			fRec25[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 3; l45 = l45 + 1) {
			fRec24[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 3; l46 = l46 + 1) {
			fRec23[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 3; l47 = l47 + 1) {
			fRec22[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 2; l48 = l48 + 1) {
			fRec21[l48] = 0.0f;
		}
		for (int l49 = 0; l49 < 3; l49 = l49 + 1) {
			fRec34[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 3; l50 = l50 + 1) {
			fRec33[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 3; l51 = l51 + 1) {
			fRec32[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 3; l52 = l52 + 1) {
			fRec31[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 3; l53 = l53 + 1) {
			fRec30[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 3; l54 = l54 + 1) {
			fRec29[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 2; l55 = l55 + 1) {
			fRec28[l55] = 0.0f;
		}
		for (int l56 = 0; l56 < 3; l56 = l56 + 1) {
			fRec41[l56] = 0.0f;
		}
		for (int l57 = 0; l57 < 3; l57 = l57 + 1) {
			fRec40[l57] = 0.0f;
		}
		for (int l58 = 0; l58 < 3; l58 = l58 + 1) {
			fRec39[l58] = 0.0f;
		}
		for (int l59 = 0; l59 < 3; l59 = l59 + 1) {
			fRec38[l59] = 0.0f;
		}
		for (int l60 = 0; l60 < 3; l60 = l60 + 1) {
			fRec37[l60] = 0.0f;
		}
		for (int l61 = 0; l61 < 3; l61 = l61 + 1) {
			fRec36[l61] = 0.0f;
		}
		for (int l62 = 0; l62 < 2; l62 = l62 + 1) {
			fRec35[l62] = 0.0f;
		}
		for (int l63 = 0; l63 < 3; l63 = l63 + 1) {
			fRec48[l63] = 0.0f;
		}
		for (int l64 = 0; l64 < 3; l64 = l64 + 1) {
			fRec47[l64] = 0.0f;
		}
		for (int l65 = 0; l65 < 3; l65 = l65 + 1) {
			fRec46[l65] = 0.0f;
		}
		for (int l66 = 0; l66 < 3; l66 = l66 + 1) {
			fRec45[l66] = 0.0f;
		}
		for (int l67 = 0; l67 < 3; l67 = l67 + 1) {
			fRec44[l67] = 0.0f;
		}
		for (int l68 = 0; l68 < 3; l68 = l68 + 1) {
			fRec43[l68] = 0.0f;
		}
		for (int l69 = 0; l69 < 2; l69 = l69 + 1) {
			fRec42[l69] = 0.0f;
		}
		for (int l70 = 0; l70 < 3; l70 = l70 + 1) {
			fRec55[l70] = 0.0f;
		}
		for (int l71 = 0; l71 < 3; l71 = l71 + 1) {
			fRec54[l71] = 0.0f;
		}
		for (int l72 = 0; l72 < 3; l72 = l72 + 1) {
			fRec53[l72] = 0.0f;
		}
		for (int l73 = 0; l73 < 3; l73 = l73 + 1) {
			fRec52[l73] = 0.0f;
		}
		for (int l74 = 0; l74 < 3; l74 = l74 + 1) {
			fRec51[l74] = 0.0f;
		}
		for (int l75 = 0; l75 < 3; l75 = l75 + 1) {
			fRec50[l75] = 0.0f;
		}
		for (int l76 = 0; l76 < 2; l76 = l76 + 1) {
			fRec49[l76] = 0.0f;
		}
		for (int l77 = 0; l77 < 3; l77 = l77 + 1) {
			fRec62[l77] = 0.0f;
		}
		for (int l78 = 0; l78 < 3; l78 = l78 + 1) {
			fRec61[l78] = 0.0f;
		}
		for (int l79 = 0; l79 < 3; l79 = l79 + 1) {
			fRec60[l79] = 0.0f;
		}
		for (int l80 = 0; l80 < 3; l80 = l80 + 1) {
			fRec59[l80] = 0.0f;
		}
		for (int l81 = 0; l81 < 3; l81 = l81 + 1) {
			fRec58[l81] = 0.0f;
		}
		for (int l82 = 0; l82 < 3; l82 = l82 + 1) {
			fRec57[l82] = 0.0f;
		}
		for (int l83 = 0; l83 < 2; l83 = l83 + 1) {
			fRec56[l83] = 0.0f;
		}
		for (int l84 = 0; l84 < 3; l84 = l84 + 1) {
			fRec69[l84] = 0.0f;
		}
		for (int l85 = 0; l85 < 3; l85 = l85 + 1) {
			fRec68[l85] = 0.0f;
		}
		for (int l86 = 0; l86 < 3; l86 = l86 + 1) {
			fRec67[l86] = 0.0f;
		}
		for (int l87 = 0; l87 < 3; l87 = l87 + 1) {
			fRec66[l87] = 0.0f;
		}
		for (int l88 = 0; l88 < 3; l88 = l88 + 1) {
			fRec65[l88] = 0.0f;
		}
		for (int l89 = 0; l89 < 3; l89 = l89 + 1) {
			fRec64[l89] = 0.0f;
		}
		for (int l90 = 0; l90 < 2; l90 = l90 + 1) {
			fRec63[l90] = 0.0f;
		}
		for (int l91 = 0; l91 < 3; l91 = l91 + 1) {
			fRec76[l91] = 0.0f;
		}
		for (int l92 = 0; l92 < 3; l92 = l92 + 1) {
			fRec75[l92] = 0.0f;
		}
		for (int l93 = 0; l93 < 3; l93 = l93 + 1) {
			fRec74[l93] = 0.0f;
		}
		for (int l94 = 0; l94 < 3; l94 = l94 + 1) {
			fRec73[l94] = 0.0f;
		}
		for (int l95 = 0; l95 < 3; l95 = l95 + 1) {
			fRec72[l95] = 0.0f;
		}
		for (int l96 = 0; l96 < 3; l96 = l96 + 1) {
			fRec71[l96] = 0.0f;
		}
		for (int l97 = 0; l97 < 2; l97 = l97 + 1) {
			fRec70[l97] = 0.0f;
		}
		for (int l98 = 0; l98 < 3; l98 = l98 + 1) {
			fRec83[l98] = 0.0f;
		}
		for (int l99 = 0; l99 < 3; l99 = l99 + 1) {
			fRec82[l99] = 0.0f;
		}
		for (int l100 = 0; l100 < 3; l100 = l100 + 1) {
			fRec81[l100] = 0.0f;
		}
		for (int l101 = 0; l101 < 3; l101 = l101 + 1) {
			fRec80[l101] = 0.0f;
		}
		for (int l102 = 0; l102 < 3; l102 = l102 + 1) {
			fRec79[l102] = 0.0f;
		}
		for (int l103 = 0; l103 < 3; l103 = l103 + 1) {
			fRec78[l103] = 0.0f;
		}
		for (int l104 = 0; l104 < 2; l104 = l104 + 1) {
			fRec77[l104] = 0.0f;
		}
		for (int l105 = 0; l105 < 3; l105 = l105 + 1) {
			fRec90[l105] = 0.0f;
		}
		for (int l106 = 0; l106 < 3; l106 = l106 + 1) {
			fRec89[l106] = 0.0f;
		}
		for (int l107 = 0; l107 < 3; l107 = l107 + 1) {
			fRec88[l107] = 0.0f;
		}
		for (int l108 = 0; l108 < 3; l108 = l108 + 1) {
			fRec87[l108] = 0.0f;
		}
		for (int l109 = 0; l109 < 3; l109 = l109 + 1) {
			fRec86[l109] = 0.0f;
		}
		for (int l110 = 0; l110 < 3; l110 = l110 + 1) {
			fRec85[l110] = 0.0f;
		}
		for (int l111 = 0; l111 < 2; l111 = l111 + 1) {
			fRec84[l111] = 0.0f;
		}
		for (int l112 = 0; l112 < 3; l112 = l112 + 1) {
			fRec97[l112] = 0.0f;
		}
		for (int l113 = 0; l113 < 3; l113 = l113 + 1) {
			fRec96[l113] = 0.0f;
		}
		for (int l114 = 0; l114 < 3; l114 = l114 + 1) {
			fRec95[l114] = 0.0f;
		}
		for (int l115 = 0; l115 < 3; l115 = l115 + 1) {
			fRec94[l115] = 0.0f;
		}
		for (int l116 = 0; l116 < 3; l116 = l116 + 1) {
			fRec93[l116] = 0.0f;
		}
		for (int l117 = 0; l117 < 3; l117 = l117 + 1) {
			fRec92[l117] = 0.0f;
		}
		for (int l118 = 0; l118 < 2; l118 = l118 + 1) {
			fRec91[l118] = 0.0f;
		}
		for (int l119 = 0; l119 < 3; l119 = l119 + 1) {
			fRec104[l119] = 0.0f;
		}
		for (int l120 = 0; l120 < 3; l120 = l120 + 1) {
			fRec103[l120] = 0.0f;
		}
		for (int l121 = 0; l121 < 3; l121 = l121 + 1) {
			fRec102[l121] = 0.0f;
		}
		for (int l122 = 0; l122 < 3; l122 = l122 + 1) {
			fRec101[l122] = 0.0f;
		}
		for (int l123 = 0; l123 < 3; l123 = l123 + 1) {
			fRec100[l123] = 0.0f;
		}
		for (int l124 = 0; l124 < 3; l124 = l124 + 1) {
			fRec99[l124] = 0.0f;
		}
		for (int l125 = 0; l125 < 2; l125 = l125 + 1) {
			fRec98[l125] = 0.0f;
		}
		for (int l126 = 0; l126 < 3; l126 = l126 + 1) {
			fRec111[l126] = 0.0f;
		}
		for (int l127 = 0; l127 < 3; l127 = l127 + 1) {
			fRec110[l127] = 0.0f;
		}
		for (int l128 = 0; l128 < 3; l128 = l128 + 1) {
			fRec109[l128] = 0.0f;
		}
		for (int l129 = 0; l129 < 3; l129 = l129 + 1) {
			fRec108[l129] = 0.0f;
		}
		for (int l130 = 0; l130 < 3; l130 = l130 + 1) {
			fRec107[l130] = 0.0f;
		}
		for (int l131 = 0; l131 < 3; l131 = l131 + 1) {
			fRec106[l131] = 0.0f;
		}
		for (int l132 = 0; l132 < 2; l132 = l132 + 1) {
			fRec105[l132] = 0.0f;
		}
		for (int l133 = 0; l133 < 3; l133 = l133 + 1) {
			fRec118[l133] = 0.0f;
		}
		for (int l134 = 0; l134 < 3; l134 = l134 + 1) {
			fRec117[l134] = 0.0f;
		}
		for (int l135 = 0; l135 < 3; l135 = l135 + 1) {
			fRec116[l135] = 0.0f;
		}
		for (int l136 = 0; l136 < 3; l136 = l136 + 1) {
			fRec115[l136] = 0.0f;
		}
		for (int l137 = 0; l137 < 3; l137 = l137 + 1) {
			fRec114[l137] = 0.0f;
		}
		for (int l138 = 0; l138 < 3; l138 = l138 + 1) {
			fRec113[l138] = 0.0f;
		}
		for (int l139 = 0; l139 < 2; l139 = l139 + 1) {
			fRec112[l139] = 0.0f;
		}
		for (int l140 = 0; l140 < 3; l140 = l140 + 1) {
			fRec125[l140] = 0.0f;
		}
		for (int l141 = 0; l141 < 3; l141 = l141 + 1) {
			fRec124[l141] = 0.0f;
		}
		for (int l142 = 0; l142 < 3; l142 = l142 + 1) {
			fRec123[l142] = 0.0f;
		}
		for (int l143 = 0; l143 < 3; l143 = l143 + 1) {
			fRec122[l143] = 0.0f;
		}
		for (int l144 = 0; l144 < 3; l144 = l144 + 1) {
			fRec121[l144] = 0.0f;
		}
		for (int l145 = 0; l145 < 3; l145 = l145 + 1) {
			fRec120[l145] = 0.0f;
		}
		for (int l146 = 0; l146 < 2; l146 = l146 + 1) {
			fRec119[l146] = 0.0f;
		}
		for (int l147 = 0; l147 < 3; l147 = l147 + 1) {
			fRec132[l147] = 0.0f;
		}
		for (int l148 = 0; l148 < 3; l148 = l148 + 1) {
			fRec131[l148] = 0.0f;
		}
		for (int l149 = 0; l149 < 3; l149 = l149 + 1) {
			fRec130[l149] = 0.0f;
		}
		for (int l150 = 0; l150 < 3; l150 = l150 + 1) {
			fRec129[l150] = 0.0f;
		}
		for (int l151 = 0; l151 < 3; l151 = l151 + 1) {
			fRec128[l151] = 0.0f;
		}
		for (int l152 = 0; l152 < 3; l152 = l152 + 1) {
			fRec127[l152] = 0.0f;
		}
		for (int l153 = 0; l153 < 2; l153 = l153 + 1) {
			fRec126[l153] = 0.0f;
		}
		for (int l154 = 0; l154 < 3; l154 = l154 + 1) {
			fRec139[l154] = 0.0f;
		}
		for (int l155 = 0; l155 < 3; l155 = l155 + 1) {
			fRec138[l155] = 0.0f;
		}
		for (int l156 = 0; l156 < 3; l156 = l156 + 1) {
			fRec137[l156] = 0.0f;
		}
		for (int l157 = 0; l157 < 3; l157 = l157 + 1) {
			fRec136[l157] = 0.0f;
		}
		for (int l158 = 0; l158 < 3; l158 = l158 + 1) {
			fRec135[l158] = 0.0f;
		}
		for (int l159 = 0; l159 < 3; l159 = l159 + 1) {
			fRec134[l159] = 0.0f;
		}
		for (int l160 = 0; l160 < 2; l160 = l160 + 1) {
			fRec133[l160] = 0.0f;
		}
		for (int l161 = 0; l161 < 3; l161 = l161 + 1) {
			fRec146[l161] = 0.0f;
		}
		for (int l162 = 0; l162 < 3; l162 = l162 + 1) {
			fRec145[l162] = 0.0f;
		}
		for (int l163 = 0; l163 < 3; l163 = l163 + 1) {
			fRec144[l163] = 0.0f;
		}
		for (int l164 = 0; l164 < 3; l164 = l164 + 1) {
			fRec143[l164] = 0.0f;
		}
		for (int l165 = 0; l165 < 3; l165 = l165 + 1) {
			fRec142[l165] = 0.0f;
		}
		for (int l166 = 0; l166 < 3; l166 = l166 + 1) {
			fRec141[l166] = 0.0f;
		}
		for (int l167 = 0; l167 < 2; l167 = l167 + 1) {
			fRec140[l167] = 0.0f;
		}
		for (int l168 = 0; l168 < 3; l168 = l168 + 1) {
			fRec150[l168] = 0.0f;
		}
		for (int l169 = 0; l169 < 3; l169 = l169 + 1) {
			fRec149[l169] = 0.0f;
		}
		for (int l170 = 0; l170 < 3; l170 = l170 + 1) {
			fRec148[l170] = 0.0f;
		}
		for (int l171 = 0; l171 < 2; l171 = l171 + 1) {
			fRec147[l171] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("parametric_eq");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fVslider0, "1", "");
		ui_interface->declare(&fVslider0, "style", "knob");
		ui_interface->declare(&fVslider0, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fVslider0, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fVslider0, FAUSTFLOAT(-2e+01f), FAUSTFLOAT(-1.2e+02f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fVslider2, "2", "");
		ui_interface->declare(&fVslider2, "style", "knob");
		ui_interface->declare(&fVslider2, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fVslider2, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fVslider2, FAUSTFLOAT(49.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider3, "3", "");
		ui_interface->declare(&fVslider3, "style", "knob");
		ui_interface->declare(&fVslider3, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fVslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fVslider3, FAUSTFLOAT(-0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider4, "4", "");
		ui_interface->declare(&fVslider4, "style", "knob");
		ui_interface->declare(&fVslider4, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fVslider4, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fVslider4, FAUSTFLOAT(0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider1, "5", "");
		ui_interface->declare(&fVslider1, "scale", "log");
		ui_interface->declare(&fVslider1, "style", "knob");
		ui_interface->declare(&fVslider1, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fVslider1, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fVslider1, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fEntry0, "6", "");
		ui_interface->declare(&fEntry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fEntry0, FAUSTFLOAT(2.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(4.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fCheckbox1, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fCheckbox1);
		ui_interface->declare(&fCheckbox2, "1", "");
		ui_interface->declare(&fCheckbox2, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fCheckbox2);
		ui_interface->declare(&fCheckbox0, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fCheckbox0);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for info and pointers");
		ui_interface->openHorizontalBox("PARAMETRIC EQ SECTIONS");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Low Shelf");
		ui_interface->declare(&fHslider4, "0", "");
		ui_interface->declare(&fHslider4, "style", "knob");
		ui_interface->declare(&fHslider4, "tooltip", "Amount of low-frequency boost or cut in decibels");
		ui_interface->declare(&fHslider4, "unit", "dB");
		ui_interface->addHorizontalSlider("Low Boost|Cut", &fHslider4, FAUSTFLOAT(0.0f), FAUSTFLOAT(-4e+01f), FAUSTFLOAT(4e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider3, "1", "");
		ui_interface->declare(&fHslider3, "scale", "log");
		ui_interface->declare(&fHslider3, "style", "knob");
		ui_interface->declare(&fHslider3, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fHslider3, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fHslider3, FAUSTFLOAT(2e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(5e+03f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->declare(0, "tooltip", "Parametric Equalizer sections from filter.lib");
		ui_interface->openVerticalBox("Peaking Equalizer");
		ui_interface->declare(&fHslider6, "0", "");
		ui_interface->declare(&fHslider6, "style", "knob");
		ui_interface->declare(&fHslider6, "tooltip", "Amount of local boost or cut in decibels");
		ui_interface->declare(&fHslider6, "unit", "dB");
		ui_interface->addHorizontalSlider("Peak Boost|Cut", &fHslider6, FAUSTFLOAT(0.0f), FAUSTFLOAT(-4e+01f), FAUSTFLOAT(4e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider5, "1", "");
		ui_interface->declare(&fHslider5, "style", "knob");
		ui_interface->declare(&fHslider5, "tooltip", "Peak Frequency in Piano Key (PK) units (A440 = 49PK)");
		ui_interface->declare(&fHslider5, "unit", "PK");
		ui_interface->addHorizontalSlider("Peak Frequency", &fHslider5, FAUSTFLOAT(49.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider7, "2", "");
		ui_interface->declare(&fHslider7, "scale", "log");
		ui_interface->declare(&fHslider7, "style", "knob");
		ui_interface->declare(&fHslider7, "tooltip", "Quality factor (Q) of the peak = center-frequency/bandwidth");
		ui_interface->addHorizontalSlider("Peak Q", &fHslider7, FAUSTFLOAT(4e+01f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->declare(0, "tooltip", "A high shelf provides a boost or cut                            above some frequency");
		ui_interface->openVerticalBox("High Shelf");
		ui_interface->declare(&fHslider8, "0", "");
		ui_interface->declare(&fHslider8, "style", "knob");
		ui_interface->declare(&fHslider8, "tooltip", "Amount of high-frequency boost or cut in decibels");
		ui_interface->declare(&fHslider8, "unit", "dB");
		ui_interface->addHorizontalSlider("High Boost|Cut", &fHslider8, FAUSTFLOAT(0.0f), FAUSTFLOAT(-4e+01f), FAUSTFLOAT(4e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider2, "1", "");
		ui_interface->declare(&fHslider2, "scale", "log");
		ui_interface->declare(&fHslider2, "style", "knob");
		ui_interface->declare(&fHslider2, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fHslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fHslider2, FAUSTFLOAT(8e+03f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 20 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fVbargraph19, "0", "");
		ui_interface->declare(&fVbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fVbargraph19, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph18, "1", "");
		ui_interface->declare(&fVbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fVbargraph18, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph17, "2", "");
		ui_interface->declare(&fVbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fVbargraph17, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph16, "3", "");
		ui_interface->declare(&fVbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fVbargraph16, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph15, "4", "");
		ui_interface->declare(&fVbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fVbargraph15, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph14, "5", "");
		ui_interface->declare(&fVbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fVbargraph14, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph13, "6", "");
		ui_interface->declare(&fVbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fVbargraph13, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph12, "7", "");
		ui_interface->declare(&fVbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fVbargraph12, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph11, "8", "");
		ui_interface->declare(&fVbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fVbargraph11, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph10, "9", "");
		ui_interface->declare(&fVbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fVbargraph10, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph9, "10", "");
		ui_interface->declare(&fVbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fVbargraph9, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph8, "11", "");
		ui_interface->declare(&fVbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fVbargraph8, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph7, "12", "");
		ui_interface->declare(&fVbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fVbargraph7, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph6, "13", "");
		ui_interface->declare(&fVbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fVbargraph6, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph5, "14", "");
		ui_interface->declare(&fVbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fVbargraph5, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph4, "15", "");
		ui_interface->declare(&fVbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph15", &fVbargraph4, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph3, "16", "");
		ui_interface->declare(&fVbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph16", &fVbargraph3, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph2, "17", "");
		ui_interface->declare(&fVbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph17", &fVbargraph2, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph1, "18", "");
		ui_interface->declare(&fVbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph18", &fVbargraph1, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph0, "19", "");
		ui_interface->declare(&fVbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph19", &fVbargraph0, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fHslider1, "0", "");
		ui_interface->declare(&fHslider1, "scale", "log");
		ui_interface->declare(&fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fHslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fHslider1, FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider0, "1", "");
		ui_interface->declare(&fHslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fHslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fHslider0, FAUSTFLOAT(5e+01f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fHslider1);
		float fSlow2 = (((0.001f * fSlow1) > 0.0f) ? std::exp(-(fConst1 / fSlow1)) : 0.0f);
		float fSlow3 = std::tan(fConst14 * float(fHslider2));
		float fSlow4 = 1.0f / fSlow3;
		float fSlow5 = 1.0f / ((fSlow4 + 1.0f) / fSlow3 + 1.0f);
		float fSlow6 = 1.0f / (fSlow4 + 1.0f);
		float fSlow7 = 1.0f - fSlow4;
		float fSlow8 = std::tan(fConst14 * float(fHslider3));
		float fSlow9 = 1.0f / fSlow8;
		float fSlow10 = 1.0f / ((fSlow9 + 1.0f) / fSlow8 + 1.0f);
		float fSlow11 = 1.0f / mydsp_faustpower2_f(fSlow8);
		float fSlow12 = 1.0f / (fSlow9 + 1.0f);
		float fSlow13 = 1.0f - fSlow9;
		float fSlow14 = 0.001f * std::pow(1e+01f, 0.05f * float(fVslider0));
		int iSlow15 = int(float(fCheckbox0));
		int iSlow16 = int(float(fCheckbox1));
		int iSlow17 = int(float(fEntry0) + -1.0f);
		int iSlow18 = iSlow17 >= 2;
		int iSlow19 = iSlow17 >= 1;
		float fSlow20 = float(fVslider1);
		float fSlow21 = ((fSlow20 > 0.0f) ? std::exp(-(fConst15 / fSlow20)) : 0.0f);
		float fSlow22 = 4.4e+02f * std::pow(2.0f, 0.083333336f * (float(fVslider2) + -49.0f)) * (1.0f - fSlow21);
		int iSlow23 = iSlow17 >= 3;
		float fSlow24 = 0.01f * float(fVslider3) + 1.0f;
		float fSlow25 = 0.01f * float(fVslider4) + 1.0f;
		int iSlow26 = int(float(fCheckbox2));
		float fSlow27 = (fSlow9 + -1.0f) / fSlow8 + 1.0f;
		float fSlow28 = 2.0f * (1.0f - fSlow11);
		float fSlow29 = std::pow(1e+01f, 0.05f * float(fHslider4));
		float fSlow30 = 0.001f * float(fHslider5);
		float fSlow31 = float(fHslider6);
		int iSlow32 = fSlow31 > 0.0f;
		float fSlow33 = float(fHslider7);
		float fSlow34 = fConst19 * (std::pow(1e+01f, 0.05f * std::fabs(fSlow31)) / fSlow33);
		float fSlow35 = fConst19 / fSlow33;
		float fSlow36 = (fSlow4 + -1.0f) / fSlow3 + 1.0f;
		float fSlow37 = mydsp_faustpower2_f(fSlow3);
		float fSlow38 = 2.0f * (1.0f - 1.0f / fSlow37);
		float fSlow39 = std::pow(1e+01f, 0.05f * float(fHslider8)) / fSlow37;
		float fSlow40 = 1.0f - fSlow2;
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iVec0[0] = 1;
			fRec9[0] = fSlow14 + 0.999f * fRec9[1];
			fRec11[0] = fRec11[1] * fSlow21 + fSlow22;
			float fTemp0 = std::max<float>(2e+01f, std::fabs(fRec11[0]));
			float fTemp1 = fRec10[1] + fConst15 * fTemp0;
			fRec10[0] = fTemp1 - std::floor(fTemp1);
			float fTemp2 = 2.0f * fRec10[0];
			float fTemp3 = fTemp2 + -1.0f;
			float fTemp4 = float(iVec0[1]);
			float fTemp5 = mydsp_faustpower2_f(fTemp3);
			fVec1[0] = fTemp5;
			float fTemp6 = float(iVec0[2]);
			float fTemp7 = mydsp_faustpower3_f(fTemp3);
			fVec2[0] = fTemp7 + (1.0f - fTemp2);
			float fTemp8 = (fTemp7 + (1.0f - (fTemp2 + fVec2[1]))) / fTemp0;
			fVec3[0] = fTemp8;
			float fTemp9 = float(iVec0[3]);
			float fTemp10 = fTemp5 * (fTemp5 + -2.0f);
			fVec4[0] = fTemp10;
			float fTemp11 = (fTemp10 - fVec4[1]) / fTemp0;
			fVec5[0] = fTemp11;
			float fTemp12 = (fTemp11 - fVec5[1]) / fTemp0;
			fVec6[0] = fTemp12;
			float fTemp13 = std::max<float>(2e+01f, std::fabs(fSlow24 * fRec11[0]));
			float fTemp14 = fRec12[1] + fConst15 * fTemp13;
			fRec12[0] = fTemp14 - std::floor(fTemp14);
			float fTemp15 = 2.0f * fRec12[0];
			float fTemp16 = fTemp15 + -1.0f;
			float fTemp17 = mydsp_faustpower2_f(fTemp16);
			fVec7[0] = fTemp17;
			float fTemp18 = mydsp_faustpower3_f(fTemp16);
			fVec8[0] = fTemp18 + (1.0f - fTemp15);
			float fTemp19 = (fTemp18 + (1.0f - (fTemp15 + fVec8[1]))) / fTemp13;
			fVec9[0] = fTemp19;
			float fTemp20 = fTemp17 * (fTemp17 + -2.0f);
			fVec10[0] = fTemp20;
			float fTemp21 = (fTemp20 - fVec10[1]) / fTemp13;
			fVec11[0] = fTemp21;
			float fTemp22 = (fTemp21 - fVec11[1]) / fTemp13;
			fVec12[0] = fTemp22;
			float fTemp23 = std::max<float>(2e+01f, std::fabs(fSlow25 * fRec11[0]));
			float fTemp24 = fRec13[1] + fConst15 * fTemp23;
			fRec13[0] = fTemp24 - std::floor(fTemp24);
			float fTemp25 = 2.0f * fRec13[0];
			float fTemp26 = fTemp25 + -1.0f;
			float fTemp27 = mydsp_faustpower2_f(fTemp26);
			fVec13[0] = fTemp27;
			float fTemp28 = mydsp_faustpower3_f(fTemp26);
			fVec14[0] = fTemp28 + (1.0f - fTemp25);
			float fTemp29 = (fTemp28 + (1.0f - (fTemp25 + fVec14[1]))) / fTemp23;
			fVec15[0] = fTemp29;
			float fTemp30 = fTemp27 * (fTemp27 + -2.0f);
			fVec16[0] = fTemp30;
			float fTemp31 = (fTemp30 - fVec16[1]) / fTemp23;
			fVec17[0] = fTemp31;
			float fTemp32 = (fTemp31 - fVec17[1]) / fTemp23;
			fVec18[0] = fTemp32;
			iRec14[0] = 1103515245 * iRec14[1] + 12345;
			float fTemp33 = 4.656613e-10f * float(iRec14[0]);
			fRec15[0] = 0.5221894f * fRec15[3] + fTemp33 + 2.494956f * fRec15[1] - 2.0172658f * fRec15[2];
			float fTemp34 = fRec9[0] * ((iSlow15) ? float(input0[i0]) : ((iSlow16) ? ((iSlow26) ? 0.049922034f * fRec15[0] + 0.0506127f * fRec15[2] - (0.095993534f * fRec15[1] + 0.004408786f * fRec15[3]) : fTemp33) : 0.33333334f * fRec9[0] * (((iSlow18) ? ((iSlow23) ? fConst18 * (fTemp9 * (fTemp12 - fVec6[1]) / fTemp0) : fConst17 * (fTemp6 * (fTemp8 - fVec3[1]) / fTemp0)) : ((iSlow19) ? fConst16 * (fTemp4 * (fTemp5 - fVec1[1]) / fTemp0) : fTemp3)) + ((iSlow18) ? ((iSlow23) ? fConst18 * (fTemp9 * (fTemp22 - fVec12[1]) / fTemp13) : fConst17 * (fTemp6 * (fTemp19 - fVec9[1]) / fTemp13)) : ((iSlow19) ? fConst16 * (fTemp4 * (fTemp17 - fVec7[1]) / fTemp13) : fTemp16)) + ((iSlow18) ? ((iSlow23) ? fConst18 * (fTemp9 * (fTemp32 - fVec18[1]) / fTemp23) : fConst17 * (fTemp6 * (fTemp29 - fVec15[1]) / fTemp23)) : ((iSlow19) ? fConst16 * (fTemp4 * (fTemp27 - fVec13[1]) / fTemp23) : fTemp26)))));
			fVec19[0] = fTemp34;
			fRec8[0] = -(fSlow12 * (fSlow13 * fRec8[1] - fSlow9 * (fTemp34 - fVec19[1])));
			fRec7[0] = fRec8[0] - fSlow10 * (fSlow27 * fRec7[2] + fSlow28 * fRec7[1]);
			fRec17[0] = -(fSlow12 * (fSlow13 * fRec17[1] - (fTemp34 + fVec19[1])));
			fRec16[0] = fRec17[0] - fSlow10 * (fSlow27 * fRec16[2] + fSlow28 * fRec16[1]);
			fRec18[0] = fSlow30 + 0.999f * fRec18[1];
			float fTemp35 = std::pow(2.0f, 0.083333336f * (fRec18[0] + -49.0f));
			float fTemp36 = std::tan(fConst19 * fTemp35);
			float fTemp37 = 1.0f / fTemp36;
			float fTemp38 = fTemp35 / std::sin(fConst20 * fTemp35);
			float fTemp39 = fSlow34 * fTemp38;
			float fTemp40 = fSlow35 * fTemp38;
			float fTemp41 = ((iSlow32) ? fTemp40 : fTemp39);
			float fTemp42 = 2.0f * fRec6[1] * (1.0f - 1.0f / mydsp_faustpower2_f(fTemp36));
			float fTemp43 = (fTemp37 + fTemp41) / fTemp36 + 1.0f;
			fRec6[0] = fSlow10 * (fSlow11 * (fRec7[2] + (fRec7[0] - 2.0f * fRec7[1])) + fSlow29 * (fRec16[2] + fRec16[0] + 2.0f * fRec16[1])) - (fRec6[2] * ((fTemp37 - fTemp41) / fTemp36 + 1.0f) + fTemp42) / fTemp43;
			float fTemp44 = ((iSlow32) ? fTemp39 : fTemp40);
			float fTemp45 = (fTemp42 + fRec6[0] * ((fTemp37 + fTemp44) / fTemp36 + 1.0f) + fRec6[2] * ((fTemp37 - fTemp44) / fTemp36 + 1.0f)) / fTemp43;
			fVec20[0] = fTemp45;
			fRec5[0] = -(fSlow6 * (fSlow7 * fRec5[1] - (fTemp45 + fVec20[1])));
			fRec4[0] = fRec5[0] - fSlow5 * (fSlow36 * fRec4[2] + fSlow38 * fRec4[1]);
			float fTemp46 = fRec4[2] + fRec4[0] + 2.0f * fRec4[1];
			fRec20[0] = -(fSlow6 * (fSlow7 * fRec20[1] - fSlow4 * (fTemp45 - fVec20[1])));
			fRec19[0] = fRec20[0] - fSlow5 * (fSlow36 * fRec19[2] + fSlow38 * fRec19[1]);
			float fTemp47 = 2.0f * fRec19[1];
			float fTemp48 = fSlow5 * (fTemp46 + fSlow39 * (fRec19[2] + (fRec19[0] - fTemp47)));
			fRec3[0] = fTemp48 - fConst11 * (fConst21 * fRec3[2] + fConst23 * fRec3[1]);
			fRec2[0] = fConst11 * (fConst13 * fRec3[0] + fConst24 * fRec3[1] + fConst13 * fRec3[2]) - fConst8 * (fConst25 * fRec2[2] + fConst26 * fRec2[1]);
			fRec1[0] = fConst8 * (fConst10 * fRec2[0] + fConst27 * fRec2[1] + fConst10 * fRec2[2]) - fConst4 * (fConst28 * fRec1[2] + fConst29 * fRec1[1]);
			fRec0[0] = fRec0[1] * fSlow2 + std::fabs(fConst4 * (fConst7 * fRec1[0] + fConst30 * fRec1[1] + fConst7 * fRec1[2])) * fSlow40;
			fVbargraph0 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec0[0]));
			fRec27[0] = fTemp48 - fConst47 * (fConst50 * fRec27[2] + fConst51 * fRec27[1]);
			fRec26[0] = fConst47 * (fConst49 * fRec27[0] + fConst52 * fRec27[1] + fConst49 * fRec27[2]) - fConst45 * (fConst53 * fRec26[2] + fConst54 * fRec26[1]);
			fRec25[0] = fConst45 * (fConst46 * fRec26[0] + fConst55 * fRec26[1] + fConst46 * fRec26[2]) - fConst43 * (fConst56 * fRec25[2] + fConst57 * fRec25[1]);
			float fTemp49 = fConst43 * (fConst44 * fRec25[0] + fConst58 * fRec25[1] + fConst44 * fRec25[2]);
			fRec24[0] = fTemp49 - fConst40 * (fConst59 * fRec24[2] + fConst61 * fRec24[1]);
			fRec23[0] = fConst40 * (fConst42 * fRec24[0] + fConst62 * fRec24[1] + fConst42 * fRec24[2]) - fConst37 * (fConst63 * fRec23[2] + fConst64 * fRec23[1]);
			fRec22[0] = fConst37 * (fConst39 * fRec23[0] + fConst65 * fRec23[1] + fConst39 * fRec23[2]) - fConst33 * (fConst66 * fRec22[2] + fConst67 * fRec22[1]);
			fRec21[0] = fSlow2 * fRec21[1] + fSlow40 * std::fabs(fConst33 * (fConst36 * fRec22[0] + fConst68 * fRec22[1] + fConst36 * fRec22[2]));
			fVbargraph1 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec21[0]));
			fRec34[0] = fTemp49 - fConst85 * (fConst88 * fRec34[2] + fConst89 * fRec34[1]);
			fRec33[0] = fConst85 * (fConst87 * fRec34[0] + fConst90 * fRec34[1] + fConst87 * fRec34[2]) - fConst83 * (fConst91 * fRec33[2] + fConst92 * fRec33[1]);
			fRec32[0] = fConst83 * (fConst84 * fRec33[0] + fConst93 * fRec33[1] + fConst84 * fRec33[2]) - fConst81 * (fConst94 * fRec32[2] + fConst95 * fRec32[1]);
			float fTemp50 = fConst81 * (fConst82 * fRec32[0] + fConst96 * fRec32[1] + fConst82 * fRec32[2]);
			fRec31[0] = fTemp50 - fConst78 * (fConst97 * fRec31[2] + fConst99 * fRec31[1]);
			fRec30[0] = fConst78 * (fConst80 * fRec31[0] + fConst100 * fRec31[1] + fConst80 * fRec31[2]) - fConst75 * (fConst101 * fRec30[2] + fConst102 * fRec30[1]);
			fRec29[0] = fConst75 * (fConst77 * fRec30[0] + fConst103 * fRec30[1] + fConst77 * fRec30[2]) - fConst71 * (fConst104 * fRec29[2] + fConst105 * fRec29[1]);
			fRec28[0] = fSlow2 * fRec28[1] + fSlow40 * std::fabs(fConst71 * (fConst74 * fRec29[0] + fConst106 * fRec29[1] + fConst74 * fRec29[2]));
			fVbargraph2 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec28[0]));
			fRec41[0] = fTemp50 - fConst123 * (fConst126 * fRec41[2] + fConst127 * fRec41[1]);
			fRec40[0] = fConst123 * (fConst125 * fRec41[0] + fConst128 * fRec41[1] + fConst125 * fRec41[2]) - fConst121 * (fConst129 * fRec40[2] + fConst130 * fRec40[1]);
			fRec39[0] = fConst121 * (fConst122 * fRec40[0] + fConst131 * fRec40[1] + fConst122 * fRec40[2]) - fConst119 * (fConst132 * fRec39[2] + fConst133 * fRec39[1]);
			float fTemp51 = fConst119 * (fConst120 * fRec39[0] + fConst134 * fRec39[1] + fConst120 * fRec39[2]);
			fRec38[0] = fTemp51 - fConst116 * (fConst135 * fRec38[2] + fConst137 * fRec38[1]);
			fRec37[0] = fConst116 * (fConst118 * fRec38[0] + fConst138 * fRec38[1] + fConst118 * fRec38[2]) - fConst113 * (fConst139 * fRec37[2] + fConst140 * fRec37[1]);
			fRec36[0] = fConst113 * (fConst115 * fRec37[0] + fConst141 * fRec37[1] + fConst115 * fRec37[2]) - fConst109 * (fConst142 * fRec36[2] + fConst143 * fRec36[1]);
			fRec35[0] = fSlow2 * fRec35[1] + fSlow40 * std::fabs(fConst109 * (fConst112 * fRec36[0] + fConst144 * fRec36[1] + fConst112 * fRec36[2]));
			fVbargraph3 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec35[0]));
			fRec48[0] = fTemp51 - fConst161 * (fConst164 * fRec48[2] + fConst165 * fRec48[1]);
			fRec47[0] = fConst161 * (fConst163 * fRec48[0] + fConst166 * fRec48[1] + fConst163 * fRec48[2]) - fConst159 * (fConst167 * fRec47[2] + fConst168 * fRec47[1]);
			fRec46[0] = fConst159 * (fConst160 * fRec47[0] + fConst169 * fRec47[1] + fConst160 * fRec47[2]) - fConst157 * (fConst170 * fRec46[2] + fConst171 * fRec46[1]);
			float fTemp52 = fConst157 * (fConst158 * fRec46[0] + fConst172 * fRec46[1] + fConst158 * fRec46[2]);
			fRec45[0] = fTemp52 - fConst154 * (fConst173 * fRec45[2] + fConst175 * fRec45[1]);
			fRec44[0] = fConst154 * (fConst156 * fRec45[0] + fConst176 * fRec45[1] + fConst156 * fRec45[2]) - fConst151 * (fConst177 * fRec44[2] + fConst178 * fRec44[1]);
			fRec43[0] = fConst151 * (fConst153 * fRec44[0] + fConst179 * fRec44[1] + fConst153 * fRec44[2]) - fConst147 * (fConst180 * fRec43[2] + fConst181 * fRec43[1]);
			fRec42[0] = fSlow2 * fRec42[1] + fSlow40 * std::fabs(fConst147 * (fConst150 * fRec43[0] + fConst182 * fRec43[1] + fConst150 * fRec43[2]));
			fVbargraph4 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec42[0]));
			fRec55[0] = fTemp52 - fConst199 * (fConst202 * fRec55[2] + fConst203 * fRec55[1]);
			fRec54[0] = fConst199 * (fConst201 * fRec55[0] + fConst204 * fRec55[1] + fConst201 * fRec55[2]) - fConst197 * (fConst205 * fRec54[2] + fConst206 * fRec54[1]);
			fRec53[0] = fConst197 * (fConst198 * fRec54[0] + fConst207 * fRec54[1] + fConst198 * fRec54[2]) - fConst195 * (fConst208 * fRec53[2] + fConst209 * fRec53[1]);
			float fTemp53 = fConst195 * (fConst196 * fRec53[0] + fConst210 * fRec53[1] + fConst196 * fRec53[2]);
			fRec52[0] = fTemp53 - fConst192 * (fConst211 * fRec52[2] + fConst213 * fRec52[1]);
			fRec51[0] = fConst192 * (fConst194 * fRec52[0] + fConst214 * fRec52[1] + fConst194 * fRec52[2]) - fConst189 * (fConst215 * fRec51[2] + fConst216 * fRec51[1]);
			fRec50[0] = fConst189 * (fConst191 * fRec51[0] + fConst217 * fRec51[1] + fConst191 * fRec51[2]) - fConst185 * (fConst218 * fRec50[2] + fConst219 * fRec50[1]);
			fRec49[0] = fSlow2 * fRec49[1] + fSlow40 * std::fabs(fConst185 * (fConst188 * fRec50[0] + fConst220 * fRec50[1] + fConst188 * fRec50[2]));
			fVbargraph5 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec49[0]));
			fRec62[0] = fTemp53 - fConst237 * (fConst240 * fRec62[2] + fConst241 * fRec62[1]);
			fRec61[0] = fConst237 * (fConst239 * fRec62[0] + fConst242 * fRec62[1] + fConst239 * fRec62[2]) - fConst235 * (fConst243 * fRec61[2] + fConst244 * fRec61[1]);
			fRec60[0] = fConst235 * (fConst236 * fRec61[0] + fConst245 * fRec61[1] + fConst236 * fRec61[2]) - fConst233 * (fConst246 * fRec60[2] + fConst247 * fRec60[1]);
			float fTemp54 = fConst233 * (fConst234 * fRec60[0] + fConst248 * fRec60[1] + fConst234 * fRec60[2]);
			fRec59[0] = fTemp54 - fConst230 * (fConst249 * fRec59[2] + fConst251 * fRec59[1]);
			fRec58[0] = fConst230 * (fConst232 * fRec59[0] + fConst252 * fRec59[1] + fConst232 * fRec59[2]) - fConst227 * (fConst253 * fRec58[2] + fConst254 * fRec58[1]);
			fRec57[0] = fConst227 * (fConst229 * fRec58[0] + fConst255 * fRec58[1] + fConst229 * fRec58[2]) - fConst223 * (fConst256 * fRec57[2] + fConst257 * fRec57[1]);
			fRec56[0] = fSlow2 * fRec56[1] + fSlow40 * std::fabs(fConst223 * (fConst226 * fRec57[0] + fConst258 * fRec57[1] + fConst226 * fRec57[2]));
			fVbargraph6 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec56[0]));
			fRec69[0] = fTemp54 - fConst275 * (fConst278 * fRec69[2] + fConst279 * fRec69[1]);
			fRec68[0] = fConst275 * (fConst277 * fRec69[0] + fConst280 * fRec69[1] + fConst277 * fRec69[2]) - fConst273 * (fConst281 * fRec68[2] + fConst282 * fRec68[1]);
			fRec67[0] = fConst273 * (fConst274 * fRec68[0] + fConst283 * fRec68[1] + fConst274 * fRec68[2]) - fConst271 * (fConst284 * fRec67[2] + fConst285 * fRec67[1]);
			float fTemp55 = fConst271 * (fConst272 * fRec67[0] + fConst286 * fRec67[1] + fConst272 * fRec67[2]);
			fRec66[0] = fTemp55 - fConst268 * (fConst287 * fRec66[2] + fConst289 * fRec66[1]);
			fRec65[0] = fConst268 * (fConst270 * fRec66[0] + fConst290 * fRec66[1] + fConst270 * fRec66[2]) - fConst265 * (fConst291 * fRec65[2] + fConst292 * fRec65[1]);
			fRec64[0] = fConst265 * (fConst267 * fRec65[0] + fConst293 * fRec65[1] + fConst267 * fRec65[2]) - fConst261 * (fConst294 * fRec64[2] + fConst295 * fRec64[1]);
			fRec63[0] = fSlow2 * fRec63[1] + fSlow40 * std::fabs(fConst261 * (fConst264 * fRec64[0] + fConst296 * fRec64[1] + fConst264 * fRec64[2]));
			fVbargraph7 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec63[0]));
			fRec76[0] = fTemp55 - fConst313 * (fConst316 * fRec76[2] + fConst317 * fRec76[1]);
			fRec75[0] = fConst313 * (fConst315 * fRec76[0] + fConst318 * fRec76[1] + fConst315 * fRec76[2]) - fConst311 * (fConst319 * fRec75[2] + fConst320 * fRec75[1]);
			fRec74[0] = fConst311 * (fConst312 * fRec75[0] + fConst321 * fRec75[1] + fConst312 * fRec75[2]) - fConst309 * (fConst322 * fRec74[2] + fConst323 * fRec74[1]);
			float fTemp56 = fConst309 * (fConst310 * fRec74[0] + fConst324 * fRec74[1] + fConst310 * fRec74[2]);
			fRec73[0] = fTemp56 - fConst306 * (fConst325 * fRec73[2] + fConst327 * fRec73[1]);
			fRec72[0] = fConst306 * (fConst308 * fRec73[0] + fConst328 * fRec73[1] + fConst308 * fRec73[2]) - fConst303 * (fConst329 * fRec72[2] + fConst330 * fRec72[1]);
			fRec71[0] = fConst303 * (fConst305 * fRec72[0] + fConst331 * fRec72[1] + fConst305 * fRec72[2]) - fConst299 * (fConst332 * fRec71[2] + fConst333 * fRec71[1]);
			fRec70[0] = fSlow2 * fRec70[1] + fSlow40 * std::fabs(fConst299 * (fConst302 * fRec71[0] + fConst334 * fRec71[1] + fConst302 * fRec71[2]));
			fVbargraph8 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec70[0]));
			fRec83[0] = fTemp56 - fConst351 * (fConst354 * fRec83[2] + fConst355 * fRec83[1]);
			fRec82[0] = fConst351 * (fConst353 * fRec83[0] + fConst356 * fRec83[1] + fConst353 * fRec83[2]) - fConst349 * (fConst357 * fRec82[2] + fConst358 * fRec82[1]);
			fRec81[0] = fConst349 * (fConst350 * fRec82[0] + fConst359 * fRec82[1] + fConst350 * fRec82[2]) - fConst347 * (fConst360 * fRec81[2] + fConst361 * fRec81[1]);
			float fTemp57 = fConst347 * (fConst348 * fRec81[0] + fConst362 * fRec81[1] + fConst348 * fRec81[2]);
			fRec80[0] = fTemp57 - fConst344 * (fConst363 * fRec80[2] + fConst365 * fRec80[1]);
			fRec79[0] = fConst344 * (fConst346 * fRec80[0] + fConst366 * fRec80[1] + fConst346 * fRec80[2]) - fConst341 * (fConst367 * fRec79[2] + fConst368 * fRec79[1]);
			fRec78[0] = fConst341 * (fConst343 * fRec79[0] + fConst369 * fRec79[1] + fConst343 * fRec79[2]) - fConst337 * (fConst370 * fRec78[2] + fConst371 * fRec78[1]);
			fRec77[0] = fSlow2 * fRec77[1] + fSlow40 * std::fabs(fConst337 * (fConst340 * fRec78[0] + fConst372 * fRec78[1] + fConst340 * fRec78[2]));
			fVbargraph9 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec77[0]));
			fRec90[0] = fTemp57 - fConst389 * (fConst392 * fRec90[2] + fConst393 * fRec90[1]);
			fRec89[0] = fConst389 * (fConst391 * fRec90[0] + fConst394 * fRec90[1] + fConst391 * fRec90[2]) - fConst387 * (fConst395 * fRec89[2] + fConst396 * fRec89[1]);
			fRec88[0] = fConst387 * (fConst388 * fRec89[0] + fConst397 * fRec89[1] + fConst388 * fRec89[2]) - fConst385 * (fConst398 * fRec88[2] + fConst399 * fRec88[1]);
			float fTemp58 = fConst385 * (fConst386 * fRec88[0] + fConst400 * fRec88[1] + fConst386 * fRec88[2]);
			fRec87[0] = fTemp58 - fConst382 * (fConst401 * fRec87[2] + fConst403 * fRec87[1]);
			fRec86[0] = fConst382 * (fConst384 * fRec87[0] + fConst404 * fRec87[1] + fConst384 * fRec87[2]) - fConst379 * (fConst405 * fRec86[2] + fConst406 * fRec86[1]);
			fRec85[0] = fConst379 * (fConst381 * fRec86[0] + fConst407 * fRec86[1] + fConst381 * fRec86[2]) - fConst375 * (fConst408 * fRec85[2] + fConst409 * fRec85[1]);
			fRec84[0] = fSlow2 * fRec84[1] + fSlow40 * std::fabs(fConst375 * (fConst378 * fRec85[0] + fConst410 * fRec85[1] + fConst378 * fRec85[2]));
			fVbargraph10 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec84[0]));
			fRec97[0] = fTemp58 - fConst427 * (fConst430 * fRec97[2] + fConst431 * fRec97[1]);
			fRec96[0] = fConst427 * (fConst429 * fRec97[0] + fConst432 * fRec97[1] + fConst429 * fRec97[2]) - fConst425 * (fConst433 * fRec96[2] + fConst434 * fRec96[1]);
			fRec95[0] = fConst425 * (fConst426 * fRec96[0] + fConst435 * fRec96[1] + fConst426 * fRec96[2]) - fConst423 * (fConst436 * fRec95[2] + fConst437 * fRec95[1]);
			float fTemp59 = fConst423 * (fConst424 * fRec95[0] + fConst438 * fRec95[1] + fConst424 * fRec95[2]);
			fRec94[0] = fTemp59 - fConst420 * (fConst439 * fRec94[2] + fConst441 * fRec94[1]);
			fRec93[0] = fConst420 * (fConst422 * fRec94[0] + fConst442 * fRec94[1] + fConst422 * fRec94[2]) - fConst417 * (fConst443 * fRec93[2] + fConst444 * fRec93[1]);
			fRec92[0] = fConst417 * (fConst419 * fRec93[0] + fConst445 * fRec93[1] + fConst419 * fRec93[2]) - fConst413 * (fConst446 * fRec92[2] + fConst447 * fRec92[1]);
			fRec91[0] = fSlow2 * fRec91[1] + fSlow40 * std::fabs(fConst413 * (fConst416 * fRec92[0] + fConst448 * fRec92[1] + fConst416 * fRec92[2]));
			fVbargraph11 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec91[0]));
			fRec104[0] = fTemp59 - fConst465 * (fConst468 * fRec104[2] + fConst469 * fRec104[1]);
			fRec103[0] = fConst465 * (fConst467 * fRec104[0] + fConst470 * fRec104[1] + fConst467 * fRec104[2]) - fConst463 * (fConst471 * fRec103[2] + fConst472 * fRec103[1]);
			fRec102[0] = fConst463 * (fConst464 * fRec103[0] + fConst473 * fRec103[1] + fConst464 * fRec103[2]) - fConst461 * (fConst474 * fRec102[2] + fConst475 * fRec102[1]);
			float fTemp60 = fConst461 * (fConst462 * fRec102[0] + fConst476 * fRec102[1] + fConst462 * fRec102[2]);
			fRec101[0] = fTemp60 - fConst458 * (fConst477 * fRec101[2] + fConst479 * fRec101[1]);
			fRec100[0] = fConst458 * (fConst460 * fRec101[0] + fConst480 * fRec101[1] + fConst460 * fRec101[2]) - fConst455 * (fConst481 * fRec100[2] + fConst482 * fRec100[1]);
			fRec99[0] = fConst455 * (fConst457 * fRec100[0] + fConst483 * fRec100[1] + fConst457 * fRec100[2]) - fConst451 * (fConst484 * fRec99[2] + fConst485 * fRec99[1]);
			fRec98[0] = fSlow2 * fRec98[1] + fSlow40 * std::fabs(fConst451 * (fConst454 * fRec99[0] + fConst486 * fRec99[1] + fConst454 * fRec99[2]));
			fVbargraph12 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec98[0]));
			fRec111[0] = fTemp60 - fConst503 * (fConst506 * fRec111[2] + fConst507 * fRec111[1]);
			fRec110[0] = fConst503 * (fConst505 * fRec111[0] + fConst508 * fRec111[1] + fConst505 * fRec111[2]) - fConst501 * (fConst509 * fRec110[2] + fConst510 * fRec110[1]);
			fRec109[0] = fConst501 * (fConst502 * fRec110[0] + fConst511 * fRec110[1] + fConst502 * fRec110[2]) - fConst499 * (fConst512 * fRec109[2] + fConst513 * fRec109[1]);
			float fTemp61 = fConst499 * (fConst500 * fRec109[0] + fConst514 * fRec109[1] + fConst500 * fRec109[2]);
			fRec108[0] = fTemp61 - fConst496 * (fConst515 * fRec108[2] + fConst517 * fRec108[1]);
			fRec107[0] = fConst496 * (fConst498 * fRec108[0] + fConst518 * fRec108[1] + fConst498 * fRec108[2]) - fConst493 * (fConst519 * fRec107[2] + fConst520 * fRec107[1]);
			fRec106[0] = fConst493 * (fConst495 * fRec107[0] + fConst521 * fRec107[1] + fConst495 * fRec107[2]) - fConst489 * (fConst522 * fRec106[2] + fConst523 * fRec106[1]);
			fRec105[0] = fSlow2 * fRec105[1] + fSlow40 * std::fabs(fConst489 * (fConst492 * fRec106[0] + fConst524 * fRec106[1] + fConst492 * fRec106[2]));
			fVbargraph13 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec105[0]));
			fRec118[0] = fTemp61 - fConst541 * (fConst544 * fRec118[2] + fConst545 * fRec118[1]);
			fRec117[0] = fConst541 * (fConst543 * fRec118[0] + fConst546 * fRec118[1] + fConst543 * fRec118[2]) - fConst539 * (fConst547 * fRec117[2] + fConst548 * fRec117[1]);
			fRec116[0] = fConst539 * (fConst540 * fRec117[0] + fConst549 * fRec117[1] + fConst540 * fRec117[2]) - fConst537 * (fConst550 * fRec116[2] + fConst551 * fRec116[1]);
			float fTemp62 = fConst537 * (fConst538 * fRec116[0] + fConst552 * fRec116[1] + fConst538 * fRec116[2]);
			fRec115[0] = fTemp62 - fConst534 * (fConst553 * fRec115[2] + fConst555 * fRec115[1]);
			fRec114[0] = fConst534 * (fConst536 * fRec115[0] + fConst556 * fRec115[1] + fConst536 * fRec115[2]) - fConst531 * (fConst557 * fRec114[2] + fConst558 * fRec114[1]);
			fRec113[0] = fConst531 * (fConst533 * fRec114[0] + fConst559 * fRec114[1] + fConst533 * fRec114[2]) - fConst527 * (fConst560 * fRec113[2] + fConst561 * fRec113[1]);
			fRec112[0] = fSlow2 * fRec112[1] + fSlow40 * std::fabs(fConst527 * (fConst530 * fRec113[0] + fConst562 * fRec113[1] + fConst530 * fRec113[2]));
			fVbargraph14 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec112[0]));
			fRec125[0] = fTemp62 - fConst579 * (fConst582 * fRec125[2] + fConst583 * fRec125[1]);
			fRec124[0] = fConst579 * (fConst581 * fRec125[0] + fConst584 * fRec125[1] + fConst581 * fRec125[2]) - fConst577 * (fConst585 * fRec124[2] + fConst586 * fRec124[1]);
			fRec123[0] = fConst577 * (fConst578 * fRec124[0] + fConst587 * fRec124[1] + fConst578 * fRec124[2]) - fConst575 * (fConst588 * fRec123[2] + fConst589 * fRec123[1]);
			float fTemp63 = fConst575 * (fConst576 * fRec123[0] + fConst590 * fRec123[1] + fConst576 * fRec123[2]);
			fRec122[0] = fTemp63 - fConst572 * (fConst591 * fRec122[2] + fConst593 * fRec122[1]);
			fRec121[0] = fConst572 * (fConst574 * fRec122[0] + fConst594 * fRec122[1] + fConst574 * fRec122[2]) - fConst569 * (fConst595 * fRec121[2] + fConst596 * fRec121[1]);
			fRec120[0] = fConst569 * (fConst571 * fRec121[0] + fConst597 * fRec121[1] + fConst571 * fRec121[2]) - fConst565 * (fConst598 * fRec120[2] + fConst599 * fRec120[1]);
			fRec119[0] = fSlow2 * fRec119[1] + fSlow40 * std::fabs(fConst565 * (fConst568 * fRec120[0] + fConst600 * fRec120[1] + fConst568 * fRec120[2]));
			fVbargraph15 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec119[0]));
			fRec132[0] = fTemp63 - fConst617 * (fConst620 * fRec132[2] + fConst621 * fRec132[1]);
			fRec131[0] = fConst617 * (fConst619 * fRec132[0] + fConst622 * fRec132[1] + fConst619 * fRec132[2]) - fConst615 * (fConst623 * fRec131[2] + fConst624 * fRec131[1]);
			fRec130[0] = fConst615 * (fConst616 * fRec131[0] + fConst625 * fRec131[1] + fConst616 * fRec131[2]) - fConst613 * (fConst626 * fRec130[2] + fConst627 * fRec130[1]);
			float fTemp64 = fConst613 * (fConst614 * fRec130[0] + fConst628 * fRec130[1] + fConst614 * fRec130[2]);
			fRec129[0] = fTemp64 - fConst610 * (fConst629 * fRec129[2] + fConst631 * fRec129[1]);
			fRec128[0] = fConst610 * (fConst612 * fRec129[0] + fConst632 * fRec129[1] + fConst612 * fRec129[2]) - fConst607 * (fConst633 * fRec128[2] + fConst634 * fRec128[1]);
			fRec127[0] = fConst607 * (fConst609 * fRec128[0] + fConst635 * fRec128[1] + fConst609 * fRec128[2]) - fConst603 * (fConst636 * fRec127[2] + fConst637 * fRec127[1]);
			fRec126[0] = fSlow2 * fRec126[1] + fSlow40 * std::fabs(fConst603 * (fConst606 * fRec127[0] + fConst638 * fRec127[1] + fConst606 * fRec127[2]));
			fVbargraph16 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec126[0]));
			fRec139[0] = fTemp64 - fConst655 * (fConst658 * fRec139[2] + fConst659 * fRec139[1]);
			fRec138[0] = fConst655 * (fConst657 * fRec139[0] + fConst660 * fRec139[1] + fConst657 * fRec139[2]) - fConst653 * (fConst661 * fRec138[2] + fConst662 * fRec138[1]);
			fRec137[0] = fConst653 * (fConst654 * fRec138[0] + fConst663 * fRec138[1] + fConst654 * fRec138[2]) - fConst651 * (fConst664 * fRec137[2] + fConst665 * fRec137[1]);
			float fTemp65 = fConst651 * (fConst652 * fRec137[0] + fConst666 * fRec137[1] + fConst652 * fRec137[2]);
			fRec136[0] = fTemp65 - fConst648 * (fConst667 * fRec136[2] + fConst669 * fRec136[1]);
			fRec135[0] = fConst648 * (fConst650 * fRec136[0] + fConst670 * fRec136[1] + fConst650 * fRec136[2]) - fConst645 * (fConst671 * fRec135[2] + fConst672 * fRec135[1]);
			fRec134[0] = fConst645 * (fConst647 * fRec135[0] + fConst673 * fRec135[1] + fConst647 * fRec135[2]) - fConst641 * (fConst674 * fRec134[2] + fConst675 * fRec134[1]);
			fRec133[0] = fSlow2 * fRec133[1] + fSlow40 * std::fabs(fConst641 * (fConst644 * fRec134[0] + fConst676 * fRec134[1] + fConst644 * fRec134[2]));
			fVbargraph17 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec133[0]));
			fRec146[0] = fTemp65 - fConst693 * (fConst696 * fRec146[2] + fConst697 * fRec146[1]);
			fRec145[0] = fConst693 * (fConst695 * fRec146[0] + fConst698 * fRec146[1] + fConst695 * fRec146[2]) - fConst691 * (fConst699 * fRec145[2] + fConst700 * fRec145[1]);
			fRec144[0] = fConst691 * (fConst692 * fRec145[0] + fConst701 * fRec145[1] + fConst692 * fRec145[2]) - fConst689 * (fConst702 * fRec144[2] + fConst703 * fRec144[1]);
			float fTemp66 = fConst689 * (fConst690 * fRec144[0] + fConst704 * fRec144[1] + fConst690 * fRec144[2]);
			fRec143[0] = fTemp66 - fConst686 * (fConst705 * fRec143[2] + fConst707 * fRec143[1]);
			fRec142[0] = fConst686 * (fConst688 * fRec143[0] + fConst708 * fRec143[1] + fConst688 * fRec143[2]) - fConst683 * (fConst709 * fRec142[2] + fConst710 * fRec142[1]);
			fRec141[0] = fConst683 * (fConst685 * fRec142[0] + fConst711 * fRec142[1] + fConst685 * fRec142[2]) - fConst679 * (fConst712 * fRec141[2] + fConst713 * fRec141[1]);
			fRec140[0] = fSlow2 * fRec140[1] + fSlow40 * std::fabs(fConst679 * (fConst682 * fRec141[0] + fConst714 * fRec141[1] + fConst682 * fRec141[2]));
			fVbargraph18 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec140[0]));
			fRec150[0] = fTemp66 - fConst719 * (fConst722 * fRec150[2] + fConst723 * fRec150[1]);
			fRec149[0] = fConst719 * (fConst721 * fRec150[0] + fConst724 * fRec150[1] + fConst721 * fRec150[2]) - fConst717 * (fConst725 * fRec149[2] + fConst726 * fRec149[1]);
			fRec148[0] = fConst717 * (fConst718 * fRec149[0] + fConst727 * fRec149[1] + fConst718 * fRec149[2]) - fConst715 * (fConst728 * fRec148[2] + fConst729 * fRec148[1]);
			fRec147[0] = fSlow2 * fRec147[1] + fSlow40 * std::fabs(fConst715 * (fConst716 * fRec148[0] + fConst730 * fRec148[1] + fConst716 * fRec148[2]));
			fVbargraph19 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec147[0]));
			float fTemp67 = fSlow5 * (fTemp46 + fSlow39 * (fRec19[0] + fRec19[2] - fTemp47));
			output0[i0] = FAUSTFLOAT(fTemp67);
			output1[i0] = FAUSTFLOAT(fTemp67);
			for (int j0 = 3; j0 > 0; j0 = j0 - 1) {
				iVec0[j0] = iVec0[j0 - 1];
			}
			fRec9[1] = fRec9[0];
			fRec11[1] = fRec11[0];
			fRec10[1] = fRec10[0];
			fVec1[1] = fVec1[0];
			fVec2[1] = fVec2[0];
			fVec3[1] = fVec3[0];
			fVec4[1] = fVec4[0];
			fVec5[1] = fVec5[0];
			fVec6[1] = fVec6[0];
			fRec12[1] = fRec12[0];
			fVec7[1] = fVec7[0];
			fVec8[1] = fVec8[0];
			fVec9[1] = fVec9[0];
			fVec10[1] = fVec10[0];
			fVec11[1] = fVec11[0];
			fVec12[1] = fVec12[0];
			fRec13[1] = fRec13[0];
			fVec13[1] = fVec13[0];
			fVec14[1] = fVec14[0];
			fVec15[1] = fVec15[0];
			fVec16[1] = fVec16[0];
			fVec17[1] = fVec17[0];
			fVec18[1] = fVec18[0];
			iRec14[1] = iRec14[0];
			for (int j1 = 3; j1 > 0; j1 = j1 - 1) {
				fRec15[j1] = fRec15[j1 - 1];
			}
			fVec19[1] = fVec19[0];
			fRec8[1] = fRec8[0];
			fRec7[2] = fRec7[1];
			fRec7[1] = fRec7[0];
			fRec17[1] = fRec17[0];
			fRec16[2] = fRec16[1];
			fRec16[1] = fRec16[0];
			fRec18[1] = fRec18[0];
			fRec6[2] = fRec6[1];
			fRec6[1] = fRec6[0];
			fVec20[1] = fVec20[0];
			fRec5[1] = fRec5[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
			fRec20[1] = fRec20[0];
			fRec19[2] = fRec19[1];
			fRec19[1] = fRec19[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[1] = fRec0[0];
			fRec27[2] = fRec27[1];
			fRec27[1] = fRec27[0];
			fRec26[2] = fRec26[1];
			fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1];
			fRec25[1] = fRec25[0];
			fRec24[2] = fRec24[1];
			fRec24[1] = fRec24[0];
			fRec23[2] = fRec23[1];
			fRec23[1] = fRec23[0];
			fRec22[2] = fRec22[1];
			fRec22[1] = fRec22[0];
			fRec21[1] = fRec21[0];
			fRec34[2] = fRec34[1];
			fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1];
			fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1];
			fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1];
			fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1];
			fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1];
			fRec29[1] = fRec29[0];
			fRec28[1] = fRec28[0];
			fRec41[2] = fRec41[1];
			fRec41[1] = fRec41[0];
			fRec40[2] = fRec40[1];
			fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1];
			fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1];
			fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1];
			fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1];
			fRec36[1] = fRec36[0];
			fRec35[1] = fRec35[0];
			fRec48[2] = fRec48[1];
			fRec48[1] = fRec48[0];
			fRec47[2] = fRec47[1];
			fRec47[1] = fRec47[0];
			fRec46[2] = fRec46[1];
			fRec46[1] = fRec46[0];
			fRec45[2] = fRec45[1];
			fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1];
			fRec44[1] = fRec44[0];
			fRec43[2] = fRec43[1];
			fRec43[1] = fRec43[0];
			fRec42[1] = fRec42[0];
			fRec55[2] = fRec55[1];
			fRec55[1] = fRec55[0];
			fRec54[2] = fRec54[1];
			fRec54[1] = fRec54[0];
			fRec53[2] = fRec53[1];
			fRec53[1] = fRec53[0];
			fRec52[2] = fRec52[1];
			fRec52[1] = fRec52[0];
			fRec51[2] = fRec51[1];
			fRec51[1] = fRec51[0];
			fRec50[2] = fRec50[1];
			fRec50[1] = fRec50[0];
			fRec49[1] = fRec49[0];
			fRec62[2] = fRec62[1];
			fRec62[1] = fRec62[0];
			fRec61[2] = fRec61[1];
			fRec61[1] = fRec61[0];
			fRec60[2] = fRec60[1];
			fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1];
			fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1];
			fRec58[1] = fRec58[0];
			fRec57[2] = fRec57[1];
			fRec57[1] = fRec57[0];
			fRec56[1] = fRec56[0];
			fRec69[2] = fRec69[1];
			fRec69[1] = fRec69[0];
			fRec68[2] = fRec68[1];
			fRec68[1] = fRec68[0];
			fRec67[2] = fRec67[1];
			fRec67[1] = fRec67[0];
			fRec66[2] = fRec66[1];
			fRec66[1] = fRec66[0];
			fRec65[2] = fRec65[1];
			fRec65[1] = fRec65[0];
			fRec64[2] = fRec64[1];
			fRec64[1] = fRec64[0];
			fRec63[1] = fRec63[0];
			fRec76[2] = fRec76[1];
			fRec76[1] = fRec76[0];
			fRec75[2] = fRec75[1];
			fRec75[1] = fRec75[0];
			fRec74[2] = fRec74[1];
			fRec74[1] = fRec74[0];
			fRec73[2] = fRec73[1];
			fRec73[1] = fRec73[0];
			fRec72[2] = fRec72[1];
			fRec72[1] = fRec72[0];
			fRec71[2] = fRec71[1];
			fRec71[1] = fRec71[0];
			fRec70[1] = fRec70[0];
			fRec83[2] = fRec83[1];
			fRec83[1] = fRec83[0];
			fRec82[2] = fRec82[1];
			fRec82[1] = fRec82[0];
			fRec81[2] = fRec81[1];
			fRec81[1] = fRec81[0];
			fRec80[2] = fRec80[1];
			fRec80[1] = fRec80[0];
			fRec79[2] = fRec79[1];
			fRec79[1] = fRec79[0];
			fRec78[2] = fRec78[1];
			fRec78[1] = fRec78[0];
			fRec77[1] = fRec77[0];
			fRec90[2] = fRec90[1];
			fRec90[1] = fRec90[0];
			fRec89[2] = fRec89[1];
			fRec89[1] = fRec89[0];
			fRec88[2] = fRec88[1];
			fRec88[1] = fRec88[0];
			fRec87[2] = fRec87[1];
			fRec87[1] = fRec87[0];
			fRec86[2] = fRec86[1];
			fRec86[1] = fRec86[0];
			fRec85[2] = fRec85[1];
			fRec85[1] = fRec85[0];
			fRec84[1] = fRec84[0];
			fRec97[2] = fRec97[1];
			fRec97[1] = fRec97[0];
			fRec96[2] = fRec96[1];
			fRec96[1] = fRec96[0];
			fRec95[2] = fRec95[1];
			fRec95[1] = fRec95[0];
			fRec94[2] = fRec94[1];
			fRec94[1] = fRec94[0];
			fRec93[2] = fRec93[1];
			fRec93[1] = fRec93[0];
			fRec92[2] = fRec92[1];
			fRec92[1] = fRec92[0];
			fRec91[1] = fRec91[0];
			fRec104[2] = fRec104[1];
			fRec104[1] = fRec104[0];
			fRec103[2] = fRec103[1];
			fRec103[1] = fRec103[0];
			fRec102[2] = fRec102[1];
			fRec102[1] = fRec102[0];
			fRec101[2] = fRec101[1];
			fRec101[1] = fRec101[0];
			fRec100[2] = fRec100[1];
			fRec100[1] = fRec100[0];
			fRec99[2] = fRec99[1];
			fRec99[1] = fRec99[0];
			fRec98[1] = fRec98[0];
			fRec111[2] = fRec111[1];
			fRec111[1] = fRec111[0];
			fRec110[2] = fRec110[1];
			fRec110[1] = fRec110[0];
			fRec109[2] = fRec109[1];
			fRec109[1] = fRec109[0];
			fRec108[2] = fRec108[1];
			fRec108[1] = fRec108[0];
			fRec107[2] = fRec107[1];
			fRec107[1] = fRec107[0];
			fRec106[2] = fRec106[1];
			fRec106[1] = fRec106[0];
			fRec105[1] = fRec105[0];
			fRec118[2] = fRec118[1];
			fRec118[1] = fRec118[0];
			fRec117[2] = fRec117[1];
			fRec117[1] = fRec117[0];
			fRec116[2] = fRec116[1];
			fRec116[1] = fRec116[0];
			fRec115[2] = fRec115[1];
			fRec115[1] = fRec115[0];
			fRec114[2] = fRec114[1];
			fRec114[1] = fRec114[0];
			fRec113[2] = fRec113[1];
			fRec113[1] = fRec113[0];
			fRec112[1] = fRec112[0];
			fRec125[2] = fRec125[1];
			fRec125[1] = fRec125[0];
			fRec124[2] = fRec124[1];
			fRec124[1] = fRec124[0];
			fRec123[2] = fRec123[1];
			fRec123[1] = fRec123[0];
			fRec122[2] = fRec122[1];
			fRec122[1] = fRec122[0];
			fRec121[2] = fRec121[1];
			fRec121[1] = fRec121[0];
			fRec120[2] = fRec120[1];
			fRec120[1] = fRec120[0];
			fRec119[1] = fRec119[0];
			fRec132[2] = fRec132[1];
			fRec132[1] = fRec132[0];
			fRec131[2] = fRec131[1];
			fRec131[1] = fRec131[0];
			fRec130[2] = fRec130[1];
			fRec130[1] = fRec130[0];
			fRec129[2] = fRec129[1];
			fRec129[1] = fRec129[0];
			fRec128[2] = fRec128[1];
			fRec128[1] = fRec128[0];
			fRec127[2] = fRec127[1];
			fRec127[1] = fRec127[0];
			fRec126[1] = fRec126[0];
			fRec139[2] = fRec139[1];
			fRec139[1] = fRec139[0];
			fRec138[2] = fRec138[1];
			fRec138[1] = fRec138[0];
			fRec137[2] = fRec137[1];
			fRec137[1] = fRec137[0];
			fRec136[2] = fRec136[1];
			fRec136[1] = fRec136[0];
			fRec135[2] = fRec135[1];
			fRec135[1] = fRec135[0];
			fRec134[2] = fRec134[1];
			fRec134[1] = fRec134[0];
			fRec133[1] = fRec133[0];
			fRec146[2] = fRec146[1];
			fRec146[1] = fRec146[0];
			fRec145[2] = fRec145[1];
			fRec145[1] = fRec145[0];
			fRec144[2] = fRec144[1];
			fRec144[1] = fRec144[0];
			fRec143[2] = fRec143[1];
			fRec143[1] = fRec143[0];
			fRec142[2] = fRec142[1];
			fRec142[1] = fRec142[0];
			fRec141[2] = fRec141[1];
			fRec141[1] = fRec141[0];
			fRec140[1] = fRec140[0];
			fRec150[2] = fRec150[1];
			fRec150[1] = fRec150[0];
			fRec149[2] = fRec149[1];
			fRec149[1] = fRec149[0];
			fRec148[2] = fRec148[1];
			fRec148[1] = fRec148[0];
			fRec147[1] = fRec147[0];
		}
	}

};

#endif
