//----------------------------------------------------------
// name: "parametric_eq"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec11SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	float 	fVec16SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec17SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec20SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec23SEState; // Single Delay
	float 	fVec25SEState; // Single Delay
	float 	fVec26SEState; // Single Delay
	float 	fVec28SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec31SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SEState; // Single Delay
	float 	fVec33SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec35SEState; // Single Delay
	float 	fVec37SEState; // Single Delay
	float 	fVec39SEState; // Single Delay
	float 	fVec40SEState; // Single Delay
	float 	fVec42SEState; // Single Delay
	float 	fVec44SEState; // Single Delay
	// Recursion delay iVec45SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec45SIState; // Single Delay
	// Recursion delay fVec48SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec48SIState; // Single Delay
	float 	fVec47SIState[3]; // Copy Delay
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec51SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec51SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 244
	float 	fConst3KI; // step: 257
	float 	fConst4KI; // step: 268
	FAUSTFLOAT 	fcheckbox2;
	float 	fVec67SEState; // Single Delay
	float 	fVec71SEState; // Single Delay
	FAUSTFLOAT 	fslider5;
	float 	fConst5KI; // step: 385
	// Recursion delay fVec72SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec72SEState; // Single Delay
	// Recursion delay fVec76SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec76SEState; // Single Delay
	float 	fVec75SEState[2]; // Copy Delay
	// Recursion delay fVec79SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec79SEState; // Single Delay
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	float 	fVec81SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider6;
	float 	fConst6KI; // step: 473
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVec89SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec89SEState; // Single Delay
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	float 	fConst7KI; // step: 499
	// Recursion delay fVec91SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec91SEState; // Single Delay
	float 	fVec88SEState[2]; // Copy Delay
	float 	fVec95SEState; // Single Delay
	FAUSTFLOAT 	fslider10;
	// Recursion delay fVec96SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec96SEState; // Single Delay
	// Recursion delay fVec100SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec100SEState; // Single Delay
	float 	fVec99SEState[2]; // Copy Delay
	// Recursion delay fVec102SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec102SEState; // Single Delay
	// Recursion delay fVec105SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec105SEState; // Single Delay
	float 	fVec104SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider11;
	float 	fConst8KI; // step: 629
	float 	fConst9KI; // step: 631
	float 	fConst10KI; // step: 635
	float 	fConst11KI; // step: 639
	float 	fConst12KI; // step: 642
	float 	fConst13KI; // step: 643
	float 	fConst14KI; // step: 646
	// Recursion delay fVec112SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec112SEState; // Single Delay
	float 	fVec111SEState[2]; // Copy Delay
	float 	fConst15KI; // step: 658
	float 	fConst16KI; // step: 659
	float 	fConst17KI; // step: 664
	float 	fConst18KI; // step: 675
	float 	fConst19KI; // step: 679
	float 	fConst20KI; // step: 683
	// Recursion delay fVec117SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec117SEState; // Single Delay
	float 	fVec116SEState[2]; // Copy Delay
	float 	fConst21KI; // step: 694
	float 	fConst22KI; // step: 695
	float 	fConst23KI; // step: 700
	float 	fConst24KI; // step: 711
	float 	fConst25KI; // step: 715
	float 	fConst26KI; // step: 719
	// Recursion delay fVec122SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec122SEState; // Single Delay
	float 	fVec121SEState[2]; // Copy Delay
	float 	fConst27KI; // step: 734
	float 	fConst28KI; // step: 738
	float 	fConst29KI; // step: 742
	// Recursion delay fVec125SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec125SEState; // Single Delay
	float 	fVec124SEState[2]; // Copy Delay
	float 	fConst30KI; // step: 754
	float 	fConst31KI; // step: 755
	float 	fConst32KI; // step: 760
	float 	fConst33KI; // step: 771
	float 	fConst34KI; // step: 775
	float 	fConst35KI; // step: 779
	// Recursion delay fVec130SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec130SEState; // Single Delay
	float 	fVec129SEState[2]; // Copy Delay
	float 	fConst36KI; // step: 790
	float 	fConst37KI; // step: 794
	float 	fConst38KI; // step: 805
	float 	fConst39KI; // step: 809
	float 	fConst40KI; // step: 813
	// Recursion delay fVec135SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec135SEState; // Single Delay
	float 	fVec134SEState[2]; // Copy Delay
	float 	fConst41KI; // step: 824
	float 	fConst42KI; // step: 828
	float 	fConst43KI; // step: 836
	float 	fConst44KI; // step: 837
	float 	fConst45KI; // step: 841
	float 	fConst46KI; // step: 844
	float 	fConst47KI; // step: 847
	float 	fConst48KI; // step: 848
	float 	fConst49KI; // step: 851
	// Recursion delay fVec140SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec140SEState; // Single Delay
	float 	fVec139SEState[2]; // Copy Delay
	float 	fConst50KI; // step: 861
	float 	fConst51KI; // step: 862
	float 	fConst52KI; // step: 867
	float 	fConst53KI; // step: 876
	float 	fConst54KI; // step: 879
	float 	fConst55KI; // step: 883
	// Recursion delay fVec145SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec145SEState; // Single Delay
	float 	fVec144SEState[2]; // Copy Delay
	float 	fConst56KI; // step: 893
	float 	fConst57KI; // step: 894
	float 	fConst58KI; // step: 899
	float 	fConst59KI; // step: 908
	float 	fConst60KI; // step: 911
	float 	fConst61KI; // step: 915
	// Recursion delay fVec150SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec150SEState; // Single Delay
	float 	fVec149SEState[2]; // Copy Delay
	float 	fConst62KI; // step: 928
	float 	fConst63KI; // step: 931
	float 	fConst64KI; // step: 935
	// Recursion delay fVec153SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec153SEState; // Single Delay
	float 	fVec152SEState[2]; // Copy Delay
	float 	fConst65KI; // step: 945
	float 	fConst66KI; // step: 946
	float 	fConst67KI; // step: 951
	float 	fConst68KI; // step: 960
	float 	fConst69KI; // step: 963
	float 	fConst70KI; // step: 967
	// Recursion delay fVec158SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec158SEState; // Single Delay
	float 	fVec157SEState[2]; // Copy Delay
	float 	fConst71KI; // step: 977
	float 	fConst72KI; // step: 981
	float 	fConst73KI; // step: 990
	float 	fConst74KI; // step: 993
	float 	fConst75KI; // step: 997
	// Recursion delay fVec163SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec163SEState; // Single Delay
	float 	fVec162SEState[2]; // Copy Delay
	float 	fConst76KI; // step: 1007
	float 	fConst77KI; // step: 1011
	float 	fConst78KI; // step: 1019
	float 	fConst79KI; // step: 1020
	float 	fConst80KI; // step: 1024
	float 	fConst81KI; // step: 1027
	float 	fConst82KI; // step: 1030
	float 	fConst83KI; // step: 1031
	float 	fConst84KI; // step: 1034
	// Recursion delay fVec168SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec168SEState; // Single Delay
	float 	fVec167SEState[2]; // Copy Delay
	float 	fConst85KI; // step: 1044
	float 	fConst86KI; // step: 1045
	float 	fConst87KI; // step: 1050
	float 	fConst88KI; // step: 1059
	float 	fConst89KI; // step: 1062
	float 	fConst90KI; // step: 1066
	// Recursion delay fVec173SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec173SEState; // Single Delay
	float 	fVec172SEState[2]; // Copy Delay
	float 	fConst91KI; // step: 1076
	float 	fConst92KI; // step: 1077
	float 	fConst93KI; // step: 1082
	float 	fConst94KI; // step: 1091
	float 	fConst95KI; // step: 1094
	float 	fConst96KI; // step: 1098
	// Recursion delay fVec178SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec178SEState; // Single Delay
	float 	fVec177SEState[2]; // Copy Delay
	float 	fConst97KI; // step: 1111
	float 	fConst98KI; // step: 1114
	float 	fConst99KI; // step: 1118
	// Recursion delay fVec181SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec181SEState; // Single Delay
	float 	fVec180SEState[2]; // Copy Delay
	float 	fConst100KI; // step: 1128
	float 	fConst101KI; // step: 1129
	float 	fConst102KI; // step: 1134
	float 	fConst103KI; // step: 1143
	float 	fConst104KI; // step: 1146
	float 	fConst105KI; // step: 1150
	// Recursion delay fVec186SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec186SEState; // Single Delay
	float 	fVec185SEState[2]; // Copy Delay
	float 	fConst106KI; // step: 1160
	float 	fConst107KI; // step: 1164
	float 	fConst108KI; // step: 1173
	float 	fConst109KI; // step: 1176
	float 	fConst110KI; // step: 1180
	// Recursion delay fVec191SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec191SEState; // Single Delay
	float 	fVec190SEState[2]; // Copy Delay
	float 	fConst111KI; // step: 1190
	float 	fConst112KI; // step: 1194
	float 	fConst113KI; // step: 1202
	float 	fConst114KI; // step: 1203
	float 	fConst115KI; // step: 1207
	float 	fConst116KI; // step: 1210
	float 	fConst117KI; // step: 1213
	float 	fConst118KI; // step: 1214
	float 	fConst119KI; // step: 1217
	// Recursion delay fVec196SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec196SEState; // Single Delay
	float 	fVec195SEState[2]; // Copy Delay
	float 	fConst120KI; // step: 1227
	float 	fConst121KI; // step: 1228
	float 	fConst122KI; // step: 1233
	float 	fConst123KI; // step: 1242
	float 	fConst124KI; // step: 1245
	float 	fConst125KI; // step: 1249
	// Recursion delay fVec201SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec201SEState; // Single Delay
	float 	fVec200SEState[2]; // Copy Delay
	float 	fConst126KI; // step: 1259
	float 	fConst127KI; // step: 1260
	float 	fConst128KI; // step: 1265
	float 	fConst129KI; // step: 1274
	float 	fConst130KI; // step: 1277
	float 	fConst131KI; // step: 1281
	// Recursion delay fVec206SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec206SEState; // Single Delay
	float 	fVec205SEState[2]; // Copy Delay
	float 	fConst132KI; // step: 1294
	float 	fConst133KI; // step: 1297
	float 	fConst134KI; // step: 1301
	// Recursion delay fVec209SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec209SEState; // Single Delay
	float 	fVec208SEState[2]; // Copy Delay
	float 	fConst135KI; // step: 1311
	float 	fConst136KI; // step: 1312
	float 	fConst137KI; // step: 1317
	float 	fConst138KI; // step: 1326
	float 	fConst139KI; // step: 1329
	float 	fConst140KI; // step: 1333
	// Recursion delay fVec214SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec214SEState; // Single Delay
	float 	fVec213SEState[2]; // Copy Delay
	float 	fConst141KI; // step: 1343
	float 	fConst142KI; // step: 1347
	float 	fConst143KI; // step: 1356
	float 	fConst144KI; // step: 1359
	float 	fConst145KI; // step: 1363
	// Recursion delay fVec219SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec219SEState; // Single Delay
	float 	fVec218SEState[2]; // Copy Delay
	float 	fConst146KI; // step: 1373
	float 	fConst147KI; // step: 1377
	float 	fConst148KI; // step: 1385
	float 	fConst149KI; // step: 1386
	float 	fConst150KI; // step: 1390
	float 	fConst151KI; // step: 1393
	float 	fConst152KI; // step: 1396
	float 	fConst153KI; // step: 1397
	float 	fConst154KI; // step: 1400
	// Recursion delay fVec224SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec224SEState; // Single Delay
	float 	fVec223SEState[2]; // Copy Delay
	float 	fConst155KI; // step: 1410
	float 	fConst156KI; // step: 1411
	float 	fConst157KI; // step: 1416
	float 	fConst158KI; // step: 1425
	float 	fConst159KI; // step: 1428
	float 	fConst160KI; // step: 1432
	// Recursion delay fVec229SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec229SEState; // Single Delay
	float 	fVec228SEState[2]; // Copy Delay
	float 	fConst161KI; // step: 1442
	float 	fConst162KI; // step: 1443
	float 	fConst163KI; // step: 1448
	float 	fConst164KI; // step: 1457
	float 	fConst165KI; // step: 1460
	float 	fConst166KI; // step: 1464
	// Recursion delay fVec234SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec234SEState; // Single Delay
	float 	fVec233SEState[2]; // Copy Delay
	float 	fConst167KI; // step: 1477
	float 	fConst168KI; // step: 1480
	float 	fConst169KI; // step: 1484
	// Recursion delay fVec237SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec237SEState; // Single Delay
	float 	fVec236SEState[2]; // Copy Delay
	float 	fConst170KI; // step: 1494
	float 	fConst171KI; // step: 1495
	float 	fConst172KI; // step: 1500
	float 	fConst173KI; // step: 1509
	float 	fConst174KI; // step: 1512
	float 	fConst175KI; // step: 1516
	// Recursion delay fVec242SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec242SEState; // Single Delay
	float 	fVec241SEState[2]; // Copy Delay
	float 	fConst176KI; // step: 1526
	float 	fConst177KI; // step: 1530
	float 	fConst178KI; // step: 1539
	float 	fConst179KI; // step: 1542
	float 	fConst180KI; // step: 1546
	// Recursion delay fVec247SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec247SEState; // Single Delay
	float 	fVec246SEState[2]; // Copy Delay
	float 	fConst181KI; // step: 1556
	float 	fConst182KI; // step: 1560
	float 	fConst183KI; // step: 1568
	float 	fConst184KI; // step: 1569
	float 	fConst185KI; // step: 1573
	float 	fConst186KI; // step: 1576
	float 	fConst187KI; // step: 1579
	float 	fConst188KI; // step: 1580
	float 	fConst189KI; // step: 1583
	// Recursion delay fVec252SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec252SEState; // Single Delay
	float 	fVec251SEState[2]; // Copy Delay
	float 	fConst190KI; // step: 1593
	float 	fConst191KI; // step: 1594
	float 	fConst192KI; // step: 1599
	float 	fConst193KI; // step: 1608
	float 	fConst194KI; // step: 1611
	float 	fConst195KI; // step: 1615
	// Recursion delay fVec257SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec257SEState; // Single Delay
	float 	fVec256SEState[2]; // Copy Delay
	float 	fConst196KI; // step: 1625
	float 	fConst197KI; // step: 1626
	float 	fConst198KI; // step: 1631
	float 	fConst199KI; // step: 1640
	float 	fConst200KI; // step: 1643
	float 	fConst201KI; // step: 1647
	// Recursion delay fVec262SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec262SEState; // Single Delay
	float 	fVec261SEState[2]; // Copy Delay
	float 	fConst202KI; // step: 1660
	float 	fConst203KI; // step: 1663
	float 	fConst204KI; // step: 1667
	// Recursion delay fVec265SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec265SEState; // Single Delay
	float 	fVec264SEState[2]; // Copy Delay
	float 	fConst205KI; // step: 1677
	float 	fConst206KI; // step: 1678
	float 	fConst207KI; // step: 1683
	float 	fConst208KI; // step: 1692
	float 	fConst209KI; // step: 1695
	float 	fConst210KI; // step: 1699
	// Recursion delay fVec270SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec270SEState; // Single Delay
	float 	fVec269SEState[2]; // Copy Delay
	float 	fConst211KI; // step: 1709
	float 	fConst212KI; // step: 1713
	float 	fConst213KI; // step: 1722
	float 	fConst214KI; // step: 1725
	float 	fConst215KI; // step: 1729
	// Recursion delay fVec275SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec275SEState; // Single Delay
	float 	fVec274SEState[2]; // Copy Delay
	float 	fConst216KI; // step: 1739
	float 	fConst217KI; // step: 1743
	float 	fConst218KI; // step: 1751
	float 	fConst219KI; // step: 1752
	float 	fConst220KI; // step: 1756
	float 	fConst221KI; // step: 1759
	float 	fConst222KI; // step: 1762
	float 	fConst223KI; // step: 1763
	float 	fConst224KI; // step: 1766
	// Recursion delay fVec280SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec280SEState; // Single Delay
	float 	fVec279SEState[2]; // Copy Delay
	float 	fConst225KI; // step: 1776
	float 	fConst226KI; // step: 1777
	float 	fConst227KI; // step: 1782
	float 	fConst228KI; // step: 1791
	float 	fConst229KI; // step: 1794
	float 	fConst230KI; // step: 1798
	// Recursion delay fVec285SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec285SEState; // Single Delay
	float 	fVec284SEState[2]; // Copy Delay
	float 	fConst231KI; // step: 1808
	float 	fConst232KI; // step: 1809
	float 	fConst233KI; // step: 1814
	float 	fConst234KI; // step: 1823
	float 	fConst235KI; // step: 1826
	float 	fConst236KI; // step: 1830
	// Recursion delay fVec290SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec290SEState; // Single Delay
	float 	fVec289SEState[2]; // Copy Delay
	float 	fConst237KI; // step: 1843
	float 	fConst238KI; // step: 1846
	float 	fConst239KI; // step: 1850
	// Recursion delay fVec293SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec293SEState; // Single Delay
	float 	fVec292SEState[2]; // Copy Delay
	float 	fConst240KI; // step: 1860
	float 	fConst241KI; // step: 1861
	float 	fConst242KI; // step: 1866
	float 	fConst243KI; // step: 1875
	float 	fConst244KI; // step: 1878
	float 	fConst245KI; // step: 1882
	// Recursion delay fVec298SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec298SEState; // Single Delay
	float 	fVec297SEState[2]; // Copy Delay
	float 	fConst246KI; // step: 1892
	float 	fConst247KI; // step: 1896
	float 	fConst248KI; // step: 1905
	float 	fConst249KI; // step: 1908
	float 	fConst250KI; // step: 1912
	// Recursion delay fVec303SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec303SEState; // Single Delay
	float 	fVec302SEState[2]; // Copy Delay
	float 	fConst251KI; // step: 1922
	float 	fConst252KI; // step: 1926
	float 	fConst253KI; // step: 1934
	float 	fConst254KI; // step: 1935
	float 	fConst255KI; // step: 1939
	float 	fConst256KI; // step: 1942
	float 	fConst257KI; // step: 1945
	float 	fConst258KI; // step: 1946
	float 	fConst259KI; // step: 1949
	// Recursion delay fVec308SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec308SEState; // Single Delay
	float 	fVec307SEState[2]; // Copy Delay
	float 	fConst260KI; // step: 1959
	float 	fConst261KI; // step: 1960
	float 	fConst262KI; // step: 1965
	float 	fConst263KI; // step: 1974
	float 	fConst264KI; // step: 1977
	float 	fConst265KI; // step: 1981
	// Recursion delay fVec313SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec313SEState; // Single Delay
	float 	fVec312SEState[2]; // Copy Delay
	float 	fConst266KI; // step: 1991
	float 	fConst267KI; // step: 1992
	float 	fConst268KI; // step: 1997
	float 	fConst269KI; // step: 2006
	float 	fConst270KI; // step: 2009
	float 	fConst271KI; // step: 2013
	// Recursion delay fVec318SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec318SEState; // Single Delay
	float 	fVec317SEState[2]; // Copy Delay
	float 	fConst272KI; // step: 2026
	float 	fConst273KI; // step: 2029
	float 	fConst274KI; // step: 2033
	// Recursion delay fVec321SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec321SEState; // Single Delay
	float 	fVec320SEState[2]; // Copy Delay
	float 	fConst275KI; // step: 2043
	float 	fConst276KI; // step: 2044
	float 	fConst277KI; // step: 2049
	float 	fConst278KI; // step: 2058
	float 	fConst279KI; // step: 2061
	float 	fConst280KI; // step: 2065
	// Recursion delay fVec326SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec326SEState; // Single Delay
	float 	fVec325SEState[2]; // Copy Delay
	float 	fConst281KI; // step: 2075
	float 	fConst282KI; // step: 2079
	float 	fConst283KI; // step: 2088
	float 	fConst284KI; // step: 2091
	float 	fConst285KI; // step: 2095
	// Recursion delay fVec331SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec331SEState; // Single Delay
	float 	fVec330SEState[2]; // Copy Delay
	float 	fConst286KI; // step: 2105
	float 	fConst287KI; // step: 2109
	float 	fConst288KI; // step: 2117
	float 	fConst289KI; // step: 2118
	float 	fConst290KI; // step: 2122
	float 	fConst291KI; // step: 2125
	float 	fConst292KI; // step: 2128
	float 	fConst293KI; // step: 2129
	float 	fConst294KI; // step: 2132
	// Recursion delay fVec336SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec336SEState; // Single Delay
	float 	fVec335SEState[2]; // Copy Delay
	float 	fConst295KI; // step: 2142
	float 	fConst296KI; // step: 2143
	float 	fConst297KI; // step: 2148
	float 	fConst298KI; // step: 2157
	float 	fConst299KI; // step: 2160
	float 	fConst300KI; // step: 2164
	// Recursion delay fVec341SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec341SEState; // Single Delay
	float 	fVec340SEState[2]; // Copy Delay
	float 	fConst301KI; // step: 2174
	float 	fConst302KI; // step: 2175
	float 	fConst303KI; // step: 2180
	float 	fConst304KI; // step: 2189
	float 	fConst305KI; // step: 2192
	float 	fConst306KI; // step: 2196
	// Recursion delay fVec346SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec346SEState; // Single Delay
	float 	fVec345SEState[2]; // Copy Delay
	float 	fConst307KI; // step: 2209
	float 	fConst308KI; // step: 2212
	float 	fConst309KI; // step: 2216
	// Recursion delay fVec349SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec349SEState; // Single Delay
	float 	fVec348SEState[2]; // Copy Delay
	float 	fConst310KI; // step: 2226
	float 	fConst311KI; // step: 2227
	float 	fConst312KI; // step: 2232
	float 	fConst313KI; // step: 2241
	float 	fConst314KI; // step: 2244
	float 	fConst315KI; // step: 2248
	// Recursion delay fVec354SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec354SEState; // Single Delay
	float 	fVec353SEState[2]; // Copy Delay
	float 	fConst316KI; // step: 2258
	float 	fConst317KI; // step: 2262
	float 	fConst318KI; // step: 2271
	float 	fConst319KI; // step: 2274
	float 	fConst320KI; // step: 2278
	// Recursion delay fVec359SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec359SEState; // Single Delay
	float 	fVec358SEState[2]; // Copy Delay
	float 	fConst321KI; // step: 2288
	float 	fConst322KI; // step: 2292
	float 	fConst323KI; // step: 2300
	float 	fConst324KI; // step: 2301
	float 	fConst325KI; // step: 2305
	float 	fConst326KI; // step: 2308
	float 	fConst327KI; // step: 2311
	float 	fConst328KI; // step: 2312
	float 	fConst329KI; // step: 2315
	// Recursion delay fVec364SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec364SEState; // Single Delay
	float 	fVec363SEState[2]; // Copy Delay
	float 	fConst330KI; // step: 2325
	float 	fConst331KI; // step: 2326
	float 	fConst332KI; // step: 2331
	float 	fConst333KI; // step: 2340
	float 	fConst334KI; // step: 2343
	float 	fConst335KI; // step: 2347
	// Recursion delay fVec369SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec369SEState; // Single Delay
	float 	fVec368SEState[2]; // Copy Delay
	float 	fConst336KI; // step: 2357
	float 	fConst337KI; // step: 2358
	float 	fConst338KI; // step: 2363
	float 	fConst339KI; // step: 2372
	float 	fConst340KI; // step: 2375
	float 	fConst341KI; // step: 2379
	// Recursion delay fVec374SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec374SEState; // Single Delay
	float 	fVec373SEState[2]; // Copy Delay
	float 	fConst342KI; // step: 2392
	float 	fConst343KI; // step: 2395
	float 	fConst344KI; // step: 2399
	// Recursion delay fVec377SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec377SEState; // Single Delay
	float 	fVec376SEState[2]; // Copy Delay
	float 	fConst345KI; // step: 2409
	float 	fConst346KI; // step: 2410
	float 	fConst347KI; // step: 2415
	float 	fConst348KI; // step: 2424
	float 	fConst349KI; // step: 2427
	float 	fConst350KI; // step: 2431
	// Recursion delay fVec382SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec382SEState; // Single Delay
	float 	fVec381SEState[2]; // Copy Delay
	float 	fConst351KI; // step: 2441
	float 	fConst352KI; // step: 2445
	float 	fConst353KI; // step: 2454
	float 	fConst354KI; // step: 2457
	float 	fConst355KI; // step: 2461
	// Recursion delay fVec387SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec387SEState; // Single Delay
	float 	fVec386SEState[2]; // Copy Delay
	float 	fConst356KI; // step: 2471
	float 	fConst357KI; // step: 2475
	float 	fConst358KI; // step: 2483
	float 	fConst359KI; // step: 2484
	float 	fConst360KI; // step: 2488
	float 	fConst361KI; // step: 2491
	float 	fConst362KI; // step: 2494
	float 	fConst363KI; // step: 2495
	float 	fConst364KI; // step: 2498
	// Recursion delay fVec392SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec392SEState; // Single Delay
	float 	fVec391SEState[2]; // Copy Delay
	float 	fConst365KI; // step: 2508
	float 	fConst366KI; // step: 2509
	float 	fConst367KI; // step: 2514
	float 	fConst368KI; // step: 2523
	float 	fConst369KI; // step: 2526
	float 	fConst370KI; // step: 2530
	// Recursion delay fVec397SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec397SEState; // Single Delay
	float 	fVec396SEState[2]; // Copy Delay
	float 	fConst371KI; // step: 2540
	float 	fConst372KI; // step: 2541
	float 	fConst373KI; // step: 2546
	float 	fConst374KI; // step: 2555
	float 	fConst375KI; // step: 2558
	float 	fConst376KI; // step: 2562
	// Recursion delay fVec402SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec402SEState; // Single Delay
	float 	fVec401SEState[2]; // Copy Delay
	float 	fConst377KI; // step: 2575
	float 	fConst378KI; // step: 2578
	float 	fConst379KI; // step: 2582
	// Recursion delay fVec405SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec405SEState; // Single Delay
	float 	fVec404SEState[2]; // Copy Delay
	float 	fConst380KI; // step: 2592
	float 	fConst381KI; // step: 2593
	float 	fConst382KI; // step: 2598
	float 	fConst383KI; // step: 2607
	float 	fConst384KI; // step: 2610
	float 	fConst385KI; // step: 2614
	// Recursion delay fVec410SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec410SEState; // Single Delay
	float 	fVec409SEState[2]; // Copy Delay
	float 	fConst386KI; // step: 2624
	float 	fConst387KI; // step: 2628
	float 	fConst388KI; // step: 2637
	float 	fConst389KI; // step: 2640
	float 	fConst390KI; // step: 2644
	// Recursion delay fVec415SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec415SEState; // Single Delay
	float 	fVec414SEState[2]; // Copy Delay
	float 	fConst391KI; // step: 2654
	float 	fConst392KI; // step: 2658
	float 	fConst393KI; // step: 2666
	float 	fConst394KI; // step: 2667
	float 	fConst395KI; // step: 2671
	float 	fConst396KI; // step: 2674
	float 	fConst397KI; // step: 2677
	float 	fConst398KI; // step: 2678
	float 	fConst399KI; // step: 2681
	// Recursion delay fVec420SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec420SEState; // Single Delay
	float 	fVec419SEState[2]; // Copy Delay
	float 	fConst400KI; // step: 2691
	float 	fConst401KI; // step: 2692
	float 	fConst402KI; // step: 2697
	float 	fConst403KI; // step: 2706
	float 	fConst404KI; // step: 2709
	float 	fConst405KI; // step: 2713
	// Recursion delay fVec425SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec425SEState; // Single Delay
	float 	fVec424SEState[2]; // Copy Delay
	float 	fConst406KI; // step: 2723
	float 	fConst407KI; // step: 2724
	float 	fConst408KI; // step: 2729
	float 	fConst409KI; // step: 2738
	float 	fConst410KI; // step: 2741
	float 	fConst411KI; // step: 2745
	// Recursion delay fVec430SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec430SEState; // Single Delay
	float 	fVec429SEState[2]; // Copy Delay
	float 	fConst412KI; // step: 2758
	float 	fConst413KI; // step: 2761
	float 	fConst414KI; // step: 2765
	// Recursion delay fVec433SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec433SEState; // Single Delay
	float 	fVec432SEState[2]; // Copy Delay
	float 	fConst415KI; // step: 2775
	float 	fConst416KI; // step: 2776
	float 	fConst417KI; // step: 2781
	float 	fConst418KI; // step: 2790
	float 	fConst419KI; // step: 2793
	float 	fConst420KI; // step: 2797
	// Recursion delay fVec438SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec438SEState; // Single Delay
	float 	fVec437SEState[2]; // Copy Delay
	float 	fConst421KI; // step: 2807
	float 	fConst422KI; // step: 2811
	float 	fConst423KI; // step: 2820
	float 	fConst424KI; // step: 2823
	float 	fConst425KI; // step: 2827
	// Recursion delay fVec443SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec443SEState; // Single Delay
	float 	fVec442SEState[2]; // Copy Delay
	float 	fConst426KI; // step: 2837
	float 	fConst427KI; // step: 2841
	float 	fConst428KI; // step: 2849
	float 	fConst429KI; // step: 2850
	float 	fConst430KI; // step: 2854
	float 	fConst431KI; // step: 2857
	float 	fConst432KI; // step: 2860
	float 	fConst433KI; // step: 2861
	float 	fConst434KI; // step: 2864
	// Recursion delay fVec448SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec448SEState; // Single Delay
	float 	fVec447SEState[2]; // Copy Delay
	float 	fConst435KI; // step: 2874
	float 	fConst436KI; // step: 2875
	float 	fConst437KI; // step: 2880
	float 	fConst438KI; // step: 2889
	float 	fConst439KI; // step: 2892
	float 	fConst440KI; // step: 2896
	// Recursion delay fVec453SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec453SEState; // Single Delay
	float 	fVec452SEState[2]; // Copy Delay
	float 	fConst441KI; // step: 2906
	float 	fConst442KI; // step: 2907
	float 	fConst443KI; // step: 2912
	float 	fConst444KI; // step: 2921
	float 	fConst445KI; // step: 2924
	float 	fConst446KI; // step: 2928
	// Recursion delay fVec458SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec458SEState; // Single Delay
	float 	fVec457SEState[2]; // Copy Delay
	float 	fConst447KI; // step: 2941
	float 	fConst448KI; // step: 2944
	float 	fConst449KI; // step: 2948
	// Recursion delay fVec461SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec461SEState; // Single Delay
	float 	fVec460SEState[2]; // Copy Delay
	float 	fConst450KI; // step: 2958
	float 	fConst451KI; // step: 2959
	float 	fConst452KI; // step: 2964
	float 	fConst453KI; // step: 2973
	float 	fConst454KI; // step: 2976
	float 	fConst455KI; // step: 2980
	// Recursion delay fVec466SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec466SEState; // Single Delay
	float 	fVec465SEState[2]; // Copy Delay
	float 	fConst456KI; // step: 2990
	float 	fConst457KI; // step: 2994
	float 	fConst458KI; // step: 3003
	float 	fConst459KI; // step: 3006
	float 	fConst460KI; // step: 3010
	// Recursion delay fVec471SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec471SEState; // Single Delay
	float 	fVec470SEState[2]; // Copy Delay
	float 	fConst461KI; // step: 3020
	float 	fConst462KI; // step: 3024
	float 	fConst463KI; // step: 3032
	float 	fConst464KI; // step: 3033
	float 	fConst465KI; // step: 3037
	float 	fConst466KI; // step: 3040
	float 	fConst467KI; // step: 3043
	float 	fConst468KI; // step: 3044
	float 	fConst469KI; // step: 3047
	// Recursion delay fVec476SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec476SEState; // Single Delay
	float 	fVec475SEState[2]; // Copy Delay
	float 	fConst470KI; // step: 3057
	float 	fConst471KI; // step: 3058
	float 	fConst472KI; // step: 3063
	float 	fConst473KI; // step: 3072
	float 	fConst474KI; // step: 3075
	float 	fConst475KI; // step: 3079
	// Recursion delay fVec481SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec481SEState; // Single Delay
	float 	fVec480SEState[2]; // Copy Delay
	float 	fConst476KI; // step: 3089
	float 	fConst477KI; // step: 3090
	float 	fConst478KI; // step: 3095
	float 	fConst479KI; // step: 3104
	float 	fConst480KI; // step: 3107
	float 	fConst481KI; // step: 3111
	// Recursion delay fVec486SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec486SEState; // Single Delay
	float 	fVec485SEState[2]; // Copy Delay
	float 	fConst482KI; // step: 3124
	float 	fConst483KI; // step: 3127
	float 	fConst484KI; // step: 3131
	// Recursion delay fVec489SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec489SEState; // Single Delay
	float 	fVec488SEState[2]; // Copy Delay
	float 	fConst485KI; // step: 3141
	float 	fConst486KI; // step: 3142
	float 	fConst487KI; // step: 3147
	float 	fConst488KI; // step: 3156
	float 	fConst489KI; // step: 3159
	float 	fConst490KI; // step: 3163
	// Recursion delay fVec494SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec494SEState; // Single Delay
	float 	fVec493SEState[2]; // Copy Delay
	float 	fConst491KI; // step: 3173
	float 	fConst492KI; // step: 3177
	float 	fConst493KI; // step: 3186
	float 	fConst494KI; // step: 3189
	float 	fConst495KI; // step: 3193
	// Recursion delay fVec499SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec499SEState; // Single Delay
	float 	fVec498SEState[2]; // Copy Delay
	float 	fConst496KI; // step: 3203
	float 	fConst497KI; // step: 3207
	float 	fConst498KI; // step: 3215
	float 	fConst499KI; // step: 3216
	float 	fConst500KI; // step: 3220
	float 	fConst501KI; // step: 3223
	float 	fConst502KI; // step: 3226
	float 	fConst503KI; // step: 3227
	float 	fConst504KI; // step: 3230
	// Recursion delay fVec504SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec504SEState; // Single Delay
	float 	fVec503SEState[2]; // Copy Delay
	float 	fConst505KI; // step: 3240
	float 	fConst506KI; // step: 3241
	float 	fConst507KI; // step: 3246
	float 	fConst508KI; // step: 3255
	float 	fConst509KI; // step: 3258
	float 	fConst510KI; // step: 3262
	// Recursion delay fVec509SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec509SEState; // Single Delay
	float 	fVec508SEState[2]; // Copy Delay
	float 	fConst511KI; // step: 3272
	float 	fConst512KI; // step: 3273
	float 	fConst513KI; // step: 3278
	float 	fConst514KI; // step: 3287
	float 	fConst515KI; // step: 3290
	float 	fConst516KI; // step: 3294
	// Recursion delay fVec514SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec514SEState; // Single Delay
	float 	fVec513SEState[2]; // Copy Delay
	float 	fConst517KI; // step: 3307
	float 	fConst518KI; // step: 3310
	float 	fConst519KI; // step: 3314
	// Recursion delay fVec517SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec517SEState; // Single Delay
	float 	fVec516SEState[2]; // Copy Delay
	float 	fConst520KI; // step: 3324
	float 	fConst521KI; // step: 3325
	float 	fConst522KI; // step: 3330
	float 	fConst523KI; // step: 3339
	float 	fConst524KI; // step: 3342
	float 	fConst525KI; // step: 3346
	// Recursion delay fVec522SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec522SEState; // Single Delay
	float 	fVec521SEState[2]; // Copy Delay
	float 	fConst526KI; // step: 3356
	float 	fConst527KI; // step: 3360
	float 	fConst528KI; // step: 3369
	float 	fConst529KI; // step: 3372
	float 	fConst530KI; // step: 3376
	// Recursion delay fVec527SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec527SEState; // Single Delay
	float 	fVec526SEState[2]; // Copy Delay
	float 	fConst531KI; // step: 3386
	float 	fConst532KI; // step: 3390
	float 	fConst533KI; // step: 3398
	float 	fConst534KI; // step: 3399
	float 	fConst535KI; // step: 3403
	float 	fConst536KI; // step: 3406
	float 	fConst537KI; // step: 3409
	float 	fConst538KI; // step: 3410
	float 	fConst539KI; // step: 3413
	// Recursion delay fVec532SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec532SEState; // Single Delay
	float 	fVec531SEState[2]; // Copy Delay
	float 	fConst540KI; // step: 3423
	float 	fConst541KI; // step: 3424
	float 	fConst542KI; // step: 3429
	float 	fConst543KI; // step: 3438
	float 	fConst544KI; // step: 3441
	float 	fConst545KI; // step: 3445
	// Recursion delay fVec537SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec537SEState; // Single Delay
	float 	fVec536SEState[2]; // Copy Delay
	float 	fConst546KI; // step: 3455
	float 	fConst547KI; // step: 3456
	float 	fConst548KI; // step: 3461
	float 	fConst549KI; // step: 3470
	float 	fConst550KI; // step: 3473
	float 	fConst551KI; // step: 3477
	// Recursion delay fVec542SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec542SEState; // Single Delay
	float 	fVec541SEState[2]; // Copy Delay
	float 	fConst552KI; // step: 3490
	float 	fConst553KI; // step: 3493
	float 	fConst554KI; // step: 3497
	// Recursion delay fVec545SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec545SEState; // Single Delay
	float 	fVec544SEState[2]; // Copy Delay
	float 	fConst555KI; // step: 3507
	float 	fConst556KI; // step: 3508
	float 	fConst557KI; // step: 3513
	float 	fConst558KI; // step: 3522
	float 	fConst559KI; // step: 3525
	float 	fConst560KI; // step: 3529
	// Recursion delay fVec550SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec550SEState; // Single Delay
	float 	fVec549SEState[2]; // Copy Delay
	float 	fConst561KI; // step: 3539
	float 	fConst562KI; // step: 3543
	float 	fConst563KI; // step: 3552
	float 	fConst564KI; // step: 3555
	float 	fConst565KI; // step: 3559
	// Recursion delay fVec555SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec555SEState; // Single Delay
	float 	fVec554SEState[2]; // Copy Delay
	float 	fConst566KI; // step: 3569
	float 	fConst567KI; // step: 3573
	float 	fConst568KI; // step: 3581
	float 	fConst569KI; // step: 3582
	float 	fConst570KI; // step: 3586
	float 	fConst571KI; // step: 3589
	float 	fConst572KI; // step: 3592
	float 	fConst573KI; // step: 3593
	float 	fConst574KI; // step: 3596
	// Recursion delay fVec560SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec560SEState; // Single Delay
	float 	fVec559SEState[2]; // Copy Delay
	float 	fConst575KI; // step: 3606
	float 	fConst576KI; // step: 3607
	float 	fConst577KI; // step: 3612
	float 	fConst578KI; // step: 3621
	float 	fConst579KI; // step: 3624
	float 	fConst580KI; // step: 3628
	// Recursion delay fVec565SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec565SEState; // Single Delay
	float 	fVec564SEState[2]; // Copy Delay
	float 	fConst581KI; // step: 3638
	float 	fConst582KI; // step: 3639
	float 	fConst583KI; // step: 3644
	float 	fConst584KI; // step: 3653
	float 	fConst585KI; // step: 3656
	float 	fConst586KI; // step: 3660
	// Recursion delay fVec570SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec570SEState; // Single Delay
	float 	fVec569SEState[2]; // Copy Delay
	float 	fConst587KI; // step: 3673
	float 	fConst588KI; // step: 3676
	float 	fConst589KI; // step: 3680
	// Recursion delay fVec573SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec573SEState; // Single Delay
	float 	fVec572SEState[2]; // Copy Delay
	float 	fConst590KI; // step: 3690
	float 	fConst591KI; // step: 3691
	float 	fConst592KI; // step: 3696
	float 	fConst593KI; // step: 3705
	float 	fConst594KI; // step: 3708
	float 	fConst595KI; // step: 3712
	// Recursion delay fVec578SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec578SEState; // Single Delay
	float 	fVec577SEState[2]; // Copy Delay
	float 	fConst596KI; // step: 3722
	float 	fConst597KI; // step: 3726
	float 	fConst598KI; // step: 3735
	float 	fConst599KI; // step: 3738
	float 	fConst600KI; // step: 3742
	// Recursion delay fVec583SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec583SEState; // Single Delay
	float 	fVec582SEState[2]; // Copy Delay
	float 	fConst601KI; // step: 3752
	float 	fConst602KI; // step: 3756
	float 	fConst603KI; // step: 3764
	float 	fConst604KI; // step: 3765
	float 	fConst605KI; // step: 3769
	float 	fConst606KI; // step: 3772
	float 	fConst607KI; // step: 3775
	float 	fConst608KI; // step: 3776
	float 	fConst609KI; // step: 3779
	// Recursion delay fVec588SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec588SEState; // Single Delay
	float 	fVec587SEState[2]; // Copy Delay
	float 	fConst610KI; // step: 3789
	float 	fConst611KI; // step: 3790
	float 	fConst612KI; // step: 3795
	float 	fConst613KI; // step: 3804
	float 	fConst614KI; // step: 3807
	float 	fConst615KI; // step: 3811
	// Recursion delay fVec593SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec593SEState; // Single Delay
	float 	fVec592SEState[2]; // Copy Delay
	float 	fConst616KI; // step: 3821
	float 	fConst617KI; // step: 3822
	float 	fConst618KI; // step: 3827
	float 	fConst619KI; // step: 3836
	float 	fConst620KI; // step: 3839
	float 	fConst621KI; // step: 3843
	// Recursion delay fVec598SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec598SEState; // Single Delay
	float 	fVec597SEState[2]; // Copy Delay
	float 	fConst622KI; // step: 3856
	float 	fConst623KI; // step: 3859
	float 	fConst624KI; // step: 3863
	// Recursion delay fVec601SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec601SEState; // Single Delay
	float 	fVec600SEState[2]; // Copy Delay
	float 	fConst625KI; // step: 3873
	float 	fConst626KI; // step: 3874
	float 	fConst627KI; // step: 3879
	float 	fConst628KI; // step: 3888
	float 	fConst629KI; // step: 3891
	float 	fConst630KI; // step: 3895
	// Recursion delay fVec606SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec606SEState; // Single Delay
	float 	fVec605SEState[2]; // Copy Delay
	float 	fConst631KI; // step: 3905
	float 	fConst632KI; // step: 3909
	float 	fConst633KI; // step: 3918
	float 	fConst634KI; // step: 3921
	float 	fConst635KI; // step: 3925
	// Recursion delay fVec611SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec611SEState; // Single Delay
	float 	fVec610SEState[2]; // Copy Delay
	float 	fConst636KI; // step: 3935
	float 	fConst637KI; // step: 3939
	float 	fConst638KI; // step: 3947
	float 	fConst639KI; // step: 3948
	float 	fConst640KI; // step: 3952
	float 	fConst641KI; // step: 3955
	float 	fConst642KI; // step: 3958
	float 	fConst643KI; // step: 3959
	float 	fConst644KI; // step: 3962
	// Recursion delay fVec616SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec616SEState; // Single Delay
	float 	fVec615SEState[2]; // Copy Delay
	float 	fConst645KI; // step: 3972
	float 	fConst646KI; // step: 3973
	float 	fConst647KI; // step: 3978
	float 	fConst648KI; // step: 3987
	float 	fConst649KI; // step: 3990
	float 	fConst650KI; // step: 3994
	// Recursion delay fVec621SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec621SEState; // Single Delay
	float 	fVec620SEState[2]; // Copy Delay
	float 	fConst651KI; // step: 4004
	float 	fConst652KI; // step: 4005
	float 	fConst653KI; // step: 4010
	float 	fConst654KI; // step: 4019
	float 	fConst655KI; // step: 4022
	float 	fConst656KI; // step: 4026
	// Recursion delay fVec626SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec626SEState; // Single Delay
	float 	fVec625SEState[2]; // Copy Delay
	float 	fConst657KI; // step: 4039
	float 	fConst658KI; // step: 4042
	float 	fConst659KI; // step: 4046
	// Recursion delay fVec629SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec629SEState; // Single Delay
	float 	fVec628SEState[2]; // Copy Delay
	float 	fConst660KI; // step: 4056
	float 	fConst661KI; // step: 4057
	float 	fConst662KI; // step: 4062
	float 	fConst663KI; // step: 4071
	float 	fConst664KI; // step: 4074
	float 	fConst665KI; // step: 4078
	// Recursion delay fVec634SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec634SEState; // Single Delay
	float 	fVec633SEState[2]; // Copy Delay
	float 	fConst666KI; // step: 4088
	float 	fConst667KI; // step: 4092
	float 	fConst668KI; // step: 4101
	float 	fConst669KI; // step: 4104
	float 	fConst670KI; // step: 4108
	// Recursion delay fVec639SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec639SEState; // Single Delay
	float 	fVec638SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	float 	fConst671KI; // step: 4122
	float 	fConst672KI; // step: 4131
	float 	fConst673KI; // step: 4132
	float 	fConst674KI; // step: 4137
	// Recursion delay fVec641SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec641SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst675KI; // step: 4160
	float 	fConst676KI; // step: 4161
	float 	fConst677KI; // step: 4166
	// Recursion delay fVec645SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec645SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst678KI; // step: 4185
	float 	fConst679KI; // step: 4186
	float 	fConst680KI; // step: 4191
	// Recursion delay fVec649SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec649SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst681KI; // step: 4210
	float 	fConst682KI; // step: 4211
	float 	fConst683KI; // step: 4216
	// Recursion delay fVec653SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec653SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst684KI; // step: 4235
	float 	fConst685KI; // step: 4236
	float 	fConst686KI; // step: 4241
	// Recursion delay fVec657SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec657SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst687KI; // step: 4260
	float 	fConst688KI; // step: 4261
	float 	fConst689KI; // step: 4266
	// Recursion delay fVec661SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec661SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst690KI; // step: 4285
	float 	fConst691KI; // step: 4286
	float 	fConst692KI; // step: 4291
	// Recursion delay fVec665SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec665SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst693KI; // step: 4310
	float 	fConst694KI; // step: 4311
	float 	fConst695KI; // step: 4316
	// Recursion delay fVec669SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec669SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst696KI; // step: 4335
	float 	fConst697KI; // step: 4336
	float 	fConst698KI; // step: 4341
	// Recursion delay fVec673SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec673SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst699KI; // step: 4360
	float 	fConst700KI; // step: 4361
	float 	fConst701KI; // step: 4366
	// Recursion delay fVec677SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec677SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst702KI; // step: 4385
	float 	fConst703KI; // step: 4386
	float 	fConst704KI; // step: 4391
	// Recursion delay fVec681SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec681SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst705KI; // step: 4410
	float 	fConst706KI; // step: 4411
	float 	fConst707KI; // step: 4416
	// Recursion delay fVec685SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec685SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst708KI; // step: 4435
	float 	fConst709KI; // step: 4436
	float 	fConst710KI; // step: 4441
	// Recursion delay fVec689SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec689SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst711KI; // step: 4460
	float 	fConst712KI; // step: 4461
	float 	fConst713KI; // step: 4466
	// Recursion delay fVec693SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec693SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst714KI; // step: 4485
	float 	fConst715KI; // step: 4486
	float 	fConst716KI; // step: 4491
	// Recursion delay fVec697SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec697SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst717KI; // step: 4510
	float 	fConst718KI; // step: 4511
	float 	fConst719KI; // step: 4516
	// Recursion delay fVec701SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec701SEState; // Single Delay
	FAUSTFLOAT 	fbargraph15;
	float 	fConst720KI; // step: 4535
	float 	fConst721KI; // step: 4536
	float 	fConst722KI; // step: 4541
	// Recursion delay fVec705SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec705SEState; // Single Delay
	FAUSTFLOAT 	fbargraph16;
	float 	fConst723KI; // step: 4560
	float 	fConst724KI; // step: 4561
	float 	fConst725KI; // step: 4566
	// Recursion delay fVec709SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec709SEState; // Single Delay
	FAUSTFLOAT 	fbargraph17;
	float 	fConst726KI; // step: 4585
	float 	fConst727KI; // step: 4586
	float 	fConst728KI; // step: 4591
	// Recursion delay fVec713SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec713SEState; // Single Delay
	FAUSTFLOAT 	fbargraph18;
	float 	fConst729KI; // step: 4610
	float 	fConst730KI; // step: 4614
	// Recursion delay fVec717SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec717SEState; // Single Delay
	FAUSTFLOAT 	fbargraph19;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "parametric_eq.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "parametric_eq");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 244
		fConst3KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 257
		fConst4KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 268
		fConst5KI = (3.1415927f / fConst0KI); // step: 385
		fConst6KI = (1382.3008f / fConst0KI); // step: 473
		fConst7KI = (2764.6016f / fConst0KI); // step: 499
		fConst8KI = tanf((50265.484f / fConst0KI)); // step: 629
		fConst9KI = (1.0f / fConst8KI); // step: 631
		fConst10KI = (1.0f / (((fConst9KI + 3.1897273f /* Sum */) / fConst8KI) + 4.0767817f /* Sum */)); // step: 635
		fConst11KI = (((fConst9KI + -3.1897273f /* Sum */) / fConst8KI) + 4.0767817f /* Sum */); // step: 639
		fConst12KI = powf(fConst8KI,2.0f); // step: 642
		fConst13KI = (1.0f / fConst12KI); // step: 643
		fConst14KI = (2.0f * (4.0767817f + -fConst13KI /* Sum */)); // step: 646
		fConst15KI = (0.0017661728f / fConst12KI); // step: 658
		fConst16KI = (fConst15KI + 0.0004076782f /* Sum */); // step: 659
		fConst17KI = (2.0f * (0.0004076782f + -fConst15KI /* Sum */)); // step: 664
		fConst18KI = (1.0f / (((fConst9KI + 0.74313045f /* Sum */) / fConst8KI) + 1.4500711f /* Sum */)); // step: 675
		fConst19KI = (((fConst9KI + -0.74313045f /* Sum */) / fConst8KI) + 1.4500711f /* Sum */); // step: 679
		fConst20KI = (2.0f * (1.4500711f + -fConst13KI /* Sum */)); // step: 683
		fConst21KI = (11.0520525f / fConst12KI); // step: 694
		fConst22KI = (fConst21KI + 1.4500711f /* Sum */); // step: 695
		fConst23KI = (2.0f * (1.4500711f + -fConst21KI /* Sum */)); // step: 700
		fConst24KI = (1.0f / (((fConst9KI + 0.15748216f /* Sum */) / fConst8KI) + 0.9351402f /* Sum */)); // step: 711
		fConst25KI = (((fConst9KI + -0.15748216f /* Sum */) / fConst8KI) + 0.9351402f /* Sum */); // step: 715
		fConst26KI = (2.0f * (0.9351402f + -fConst13KI /* Sum */)); // step: 719
		fConst27KI = (1.0f / (((fConst9KI + 0.78241307f /* Sum */) / fConst8KI) + 0.2452915f /* Sum */)); // step: 734
		fConst28KI = (((fConst9KI + -0.78241307f /* Sum */) / fConst8KI) + 0.2452915f /* Sum */); // step: 738
		fConst29KI = (2.0f * (0.2452915f + -fConst13KI /* Sum */)); // step: 742
		fConst30KI = (0.0001f / fConst12KI); // step: 754
		fConst31KI = (fConst30KI + 0.0004332272f /* Sum */); // step: 755
		fConst32KI = (2.0f * (0.0004332272f + -fConst30KI /* Sum */)); // step: 760
		fConst33KI = (1.0f / (((fConst9KI + 0.51247865f /* Sum */) / fConst8KI) + 0.6896214f /* Sum */)); // step: 771
		fConst34KI = (((fConst9KI + -0.51247865f /* Sum */) / fConst8KI) + 0.6896214f /* Sum */); // step: 775
		fConst35KI = (2.0f * (0.6896214f + -fConst13KI /* Sum */)); // step: 779
		fConst36KI = (fConst13KI + 7.6217313f /* Sum */); // step: 790
		fConst37KI = (2.0f * (7.6217313f + -fConst13KI /* Sum */)); // step: 794
		fConst38KI = (1.0f / (((fConst9KI + 0.16840488f /* Sum */) / fConst8KI) + 1.0693583f /* Sum */)); // step: 805
		fConst39KI = (((fConst9KI + -0.16840488f /* Sum */) / fConst8KI) + 1.0693583f /* Sum */); // step: 809
		fConst40KI = (2.0f * (1.0693583f + -fConst13KI /* Sum */)); // step: 813
		fConst41KI = (fConst13KI + 53.53615f /* Sum */); // step: 824
		fConst42KI = (2.0f * (53.53615f + -fConst13KI /* Sum */)); // step: 828
		fConst43KI = tanf((35543.062f / fConst0KI)); // step: 836
		fConst44KI = (1.0f / fConst43KI); // step: 837
		fConst45KI = (1.0f / (((fConst44KI + 3.1897273f /* Sum */) / fConst43KI) + 4.0767817f /* Sum */)); // step: 841
		fConst46KI = (((fConst44KI + -3.1897273f /* Sum */) / fConst43KI) + 4.0767817f /* Sum */); // step: 844
		fConst47KI = powf(fConst43KI,2.0f); // step: 847
		fConst48KI = (1.0f / fConst47KI); // step: 848
		fConst49KI = (2.0f * (4.0767817f + -fConst48KI /* Sum */)); // step: 851
		fConst50KI = (0.0017661728f / fConst47KI); // step: 861
		fConst51KI = (fConst50KI + 0.0004076782f /* Sum */); // step: 862
		fConst52KI = (2.0f * (0.0004076782f + -fConst50KI /* Sum */)); // step: 867
		fConst53KI = (1.0f / (((fConst44KI + 0.74313045f /* Sum */) / fConst43KI) + 1.4500711f /* Sum */)); // step: 876
		fConst54KI = (((fConst44KI + -0.74313045f /* Sum */) / fConst43KI) + 1.4500711f /* Sum */); // step: 879
		fConst55KI = (2.0f * (1.4500711f + -fConst48KI /* Sum */)); // step: 883
		fConst56KI = (11.0520525f / fConst47KI); // step: 893
		fConst57KI = (fConst56KI + 1.4500711f /* Sum */); // step: 894
		fConst58KI = (2.0f * (1.4500711f + -fConst56KI /* Sum */)); // step: 899
		fConst59KI = (1.0f / (((fConst44KI + 0.15748216f /* Sum */) / fConst43KI) + 0.9351402f /* Sum */)); // step: 908
		fConst60KI = (((fConst44KI + -0.15748216f /* Sum */) / fConst43KI) + 0.9351402f /* Sum */); // step: 911
		fConst61KI = (2.0f * (0.9351402f + -fConst48KI /* Sum */)); // step: 915
		fConst62KI = (1.0f / (((fConst44KI + 0.78241307f /* Sum */) / fConst43KI) + 0.2452915f /* Sum */)); // step: 928
		fConst63KI = (((fConst44KI + -0.78241307f /* Sum */) / fConst43KI) + 0.2452915f /* Sum */); // step: 931
		fConst64KI = (2.0f * (0.2452915f + -fConst48KI /* Sum */)); // step: 935
		fConst65KI = (0.0001f / fConst47KI); // step: 945
		fConst66KI = (fConst65KI + 0.0004332272f /* Sum */); // step: 946
		fConst67KI = (2.0f * (0.0004332272f + -fConst65KI /* Sum */)); // step: 951
		fConst68KI = (1.0f / (((fConst44KI + 0.51247865f /* Sum */) / fConst43KI) + 0.6896214f /* Sum */)); // step: 960
		fConst69KI = (((fConst44KI + -0.51247865f /* Sum */) / fConst43KI) + 0.6896214f /* Sum */); // step: 963
		fConst70KI = (2.0f * (0.6896214f + -fConst48KI /* Sum */)); // step: 967
		fConst71KI = (fConst48KI + 7.6217313f /* Sum */); // step: 977
		fConst72KI = (2.0f * (7.6217313f + -fConst48KI /* Sum */)); // step: 981
		fConst73KI = (1.0f / (((fConst44KI + 0.16840488f /* Sum */) / fConst43KI) + 1.0693583f /* Sum */)); // step: 990
		fConst74KI = (((fConst44KI + -0.16840488f /* Sum */) / fConst43KI) + 1.0693583f /* Sum */); // step: 993
		fConst75KI = (2.0f * (1.0693583f + -fConst48KI /* Sum */)); // step: 997
		fConst76KI = (fConst48KI + 53.53615f /* Sum */); // step: 1007
		fConst77KI = (2.0f * (53.53615f + -fConst48KI /* Sum */)); // step: 1011
		fConst78KI = tanf((25132.742f / fConst0KI)); // step: 1019
		fConst79KI = (1.0f / fConst78KI); // step: 1020
		fConst80KI = (1.0f / (((fConst79KI + 3.1897273f /* Sum */) / fConst78KI) + 4.0767817f /* Sum */)); // step: 1024
		fConst81KI = (((fConst79KI + -3.1897273f /* Sum */) / fConst78KI) + 4.0767817f /* Sum */); // step: 1027
		fConst82KI = powf(fConst78KI,2.0f); // step: 1030
		fConst83KI = (1.0f / fConst82KI); // step: 1031
		fConst84KI = (2.0f * (4.0767817f + -fConst83KI /* Sum */)); // step: 1034
		fConst85KI = (0.0017661728f / fConst82KI); // step: 1044
		fConst86KI = (fConst85KI + 0.0004076782f /* Sum */); // step: 1045
		fConst87KI = (2.0f * (0.0004076782f + -fConst85KI /* Sum */)); // step: 1050
		fConst88KI = (1.0f / (((fConst79KI + 0.74313045f /* Sum */) / fConst78KI) + 1.4500711f /* Sum */)); // step: 1059
		fConst89KI = (((fConst79KI + -0.74313045f /* Sum */) / fConst78KI) + 1.4500711f /* Sum */); // step: 1062
		fConst90KI = (2.0f * (1.4500711f + -fConst83KI /* Sum */)); // step: 1066
		fConst91KI = (11.0520525f / fConst82KI); // step: 1076
		fConst92KI = (fConst91KI + 1.4500711f /* Sum */); // step: 1077
		fConst93KI = (2.0f * (1.4500711f + -fConst91KI /* Sum */)); // step: 1082
		fConst94KI = (1.0f / (((fConst79KI + 0.15748216f /* Sum */) / fConst78KI) + 0.9351402f /* Sum */)); // step: 1091
		fConst95KI = (((fConst79KI + -0.15748216f /* Sum */) / fConst78KI) + 0.9351402f /* Sum */); // step: 1094
		fConst96KI = (2.0f * (0.9351402f + -fConst83KI /* Sum */)); // step: 1098
		fConst97KI = (1.0f / (((fConst79KI + 0.78241307f /* Sum */) / fConst78KI) + 0.2452915f /* Sum */)); // step: 1111
		fConst98KI = (((fConst79KI + -0.78241307f /* Sum */) / fConst78KI) + 0.2452915f /* Sum */); // step: 1114
		fConst99KI = (2.0f * (0.2452915f + -fConst83KI /* Sum */)); // step: 1118
		fConst100KI = (0.0001f / fConst82KI); // step: 1128
		fConst101KI = (fConst100KI + 0.0004332272f /* Sum */); // step: 1129
		fConst102KI = (2.0f * (0.0004332272f + -fConst100KI /* Sum */)); // step: 1134
		fConst103KI = (1.0f / (((fConst79KI + 0.51247865f /* Sum */) / fConst78KI) + 0.6896214f /* Sum */)); // step: 1143
		fConst104KI = (((fConst79KI + -0.51247865f /* Sum */) / fConst78KI) + 0.6896214f /* Sum */); // step: 1146
		fConst105KI = (2.0f * (0.6896214f + -fConst83KI /* Sum */)); // step: 1150
		fConst106KI = (fConst83KI + 7.6217313f /* Sum */); // step: 1160
		fConst107KI = (2.0f * (7.6217313f + -fConst83KI /* Sum */)); // step: 1164
		fConst108KI = (1.0f / (((fConst79KI + 0.16840488f /* Sum */) / fConst78KI) + 1.0693583f /* Sum */)); // step: 1173
		fConst109KI = (((fConst79KI + -0.16840488f /* Sum */) / fConst78KI) + 1.0693583f /* Sum */); // step: 1176
		fConst110KI = (2.0f * (1.0693583f + -fConst83KI /* Sum */)); // step: 1180
		fConst111KI = (fConst83KI + 53.53615f /* Sum */); // step: 1190
		fConst112KI = (2.0f * (53.53615f + -fConst83KI /* Sum */)); // step: 1194
		fConst113KI = tanf((17771.531f / fConst0KI)); // step: 1202
		fConst114KI = (1.0f / fConst113KI); // step: 1203
		fConst115KI = (1.0f / (((fConst114KI + 3.1897273f /* Sum */) / fConst113KI) + 4.0767817f /* Sum */)); // step: 1207
		fConst116KI = (((fConst114KI + -3.1897273f /* Sum */) / fConst113KI) + 4.0767817f /* Sum */); // step: 1210
		fConst117KI = powf(fConst113KI,2.0f); // step: 1213
		fConst118KI = (1.0f / fConst117KI); // step: 1214
		fConst119KI = (2.0f * (4.0767817f + -fConst118KI /* Sum */)); // step: 1217
		fConst120KI = (0.0017661728f / fConst117KI); // step: 1227
		fConst121KI = (fConst120KI + 0.0004076782f /* Sum */); // step: 1228
		fConst122KI = (2.0f * (0.0004076782f + -fConst120KI /* Sum */)); // step: 1233
		fConst123KI = (1.0f / (((fConst114KI + 0.74313045f /* Sum */) / fConst113KI) + 1.4500711f /* Sum */)); // step: 1242
		fConst124KI = (((fConst114KI + -0.74313045f /* Sum */) / fConst113KI) + 1.4500711f /* Sum */); // step: 1245
		fConst125KI = (2.0f * (1.4500711f + -fConst118KI /* Sum */)); // step: 1249
		fConst126KI = (11.0520525f / fConst117KI); // step: 1259
		fConst127KI = (fConst126KI + 1.4500711f /* Sum */); // step: 1260
		fConst128KI = (2.0f * (1.4500711f + -fConst126KI /* Sum */)); // step: 1265
		fConst129KI = (1.0f / (((fConst114KI + 0.15748216f /* Sum */) / fConst113KI) + 0.9351402f /* Sum */)); // step: 1274
		fConst130KI = (((fConst114KI + -0.15748216f /* Sum */) / fConst113KI) + 0.9351402f /* Sum */); // step: 1277
		fConst131KI = (2.0f * (0.9351402f + -fConst118KI /* Sum */)); // step: 1281
		fConst132KI = (1.0f / (((fConst114KI + 0.78241307f /* Sum */) / fConst113KI) + 0.2452915f /* Sum */)); // step: 1294
		fConst133KI = (((fConst114KI + -0.78241307f /* Sum */) / fConst113KI) + 0.2452915f /* Sum */); // step: 1297
		fConst134KI = (2.0f * (0.2452915f + -fConst118KI /* Sum */)); // step: 1301
		fConst135KI = (0.0001f / fConst117KI); // step: 1311
		fConst136KI = (fConst135KI + 0.0004332272f /* Sum */); // step: 1312
		fConst137KI = (2.0f * (0.0004332272f + -fConst135KI /* Sum */)); // step: 1317
		fConst138KI = (1.0f / (((fConst114KI + 0.51247865f /* Sum */) / fConst113KI) + 0.6896214f /* Sum */)); // step: 1326
		fConst139KI = (((fConst114KI + -0.51247865f /* Sum */) / fConst113KI) + 0.6896214f /* Sum */); // step: 1329
		fConst140KI = (2.0f * (0.6896214f + -fConst118KI /* Sum */)); // step: 1333
		fConst141KI = (fConst118KI + 7.6217313f /* Sum */); // step: 1343
		fConst142KI = (2.0f * (7.6217313f + -fConst118KI /* Sum */)); // step: 1347
		fConst143KI = (1.0f / (((fConst114KI + 0.16840488f /* Sum */) / fConst113KI) + 1.0693583f /* Sum */)); // step: 1356
		fConst144KI = (((fConst114KI + -0.16840488f /* Sum */) / fConst113KI) + 1.0693583f /* Sum */); // step: 1359
		fConst145KI = (2.0f * (1.0693583f + -fConst118KI /* Sum */)); // step: 1363
		fConst146KI = (fConst118KI + 53.53615f /* Sum */); // step: 1373
		fConst147KI = (2.0f * (53.53615f + -fConst118KI /* Sum */)); // step: 1377
		fConst148KI = tanf((12566.371f / fConst0KI)); // step: 1385
		fConst149KI = (1.0f / fConst148KI); // step: 1386
		fConst150KI = (1.0f / (((fConst149KI + 3.1897273f /* Sum */) / fConst148KI) + 4.0767817f /* Sum */)); // step: 1390
		fConst151KI = (((fConst149KI + -3.1897273f /* Sum */) / fConst148KI) + 4.0767817f /* Sum */); // step: 1393
		fConst152KI = powf(fConst148KI,2.0f); // step: 1396
		fConst153KI = (1.0f / fConst152KI); // step: 1397
		fConst154KI = (2.0f * (4.0767817f + -fConst153KI /* Sum */)); // step: 1400
		fConst155KI = (0.0017661728f / fConst152KI); // step: 1410
		fConst156KI = (fConst155KI + 0.0004076782f /* Sum */); // step: 1411
		fConst157KI = (2.0f * (0.0004076782f + -fConst155KI /* Sum */)); // step: 1416
		fConst158KI = (1.0f / (((fConst149KI + 0.74313045f /* Sum */) / fConst148KI) + 1.4500711f /* Sum */)); // step: 1425
		fConst159KI = (((fConst149KI + -0.74313045f /* Sum */) / fConst148KI) + 1.4500711f /* Sum */); // step: 1428
		fConst160KI = (2.0f * (1.4500711f + -fConst153KI /* Sum */)); // step: 1432
		fConst161KI = (11.0520525f / fConst152KI); // step: 1442
		fConst162KI = (fConst161KI + 1.4500711f /* Sum */); // step: 1443
		fConst163KI = (2.0f * (1.4500711f + -fConst161KI /* Sum */)); // step: 1448
		fConst164KI = (1.0f / (((fConst149KI + 0.15748216f /* Sum */) / fConst148KI) + 0.9351402f /* Sum */)); // step: 1457
		fConst165KI = (((fConst149KI + -0.15748216f /* Sum */) / fConst148KI) + 0.9351402f /* Sum */); // step: 1460
		fConst166KI = (2.0f * (0.9351402f + -fConst153KI /* Sum */)); // step: 1464
		fConst167KI = (1.0f / (((fConst149KI + 0.78241307f /* Sum */) / fConst148KI) + 0.2452915f /* Sum */)); // step: 1477
		fConst168KI = (((fConst149KI + -0.78241307f /* Sum */) / fConst148KI) + 0.2452915f /* Sum */); // step: 1480
		fConst169KI = (2.0f * (0.2452915f + -fConst153KI /* Sum */)); // step: 1484
		fConst170KI = (0.0001f / fConst152KI); // step: 1494
		fConst171KI = (fConst170KI + 0.0004332272f /* Sum */); // step: 1495
		fConst172KI = (2.0f * (0.0004332272f + -fConst170KI /* Sum */)); // step: 1500
		fConst173KI = (1.0f / (((fConst149KI + 0.51247865f /* Sum */) / fConst148KI) + 0.6896214f /* Sum */)); // step: 1509
		fConst174KI = (((fConst149KI + -0.51247865f /* Sum */) / fConst148KI) + 0.6896214f /* Sum */); // step: 1512
		fConst175KI = (2.0f * (0.6896214f + -fConst153KI /* Sum */)); // step: 1516
		fConst176KI = (fConst153KI + 7.6217313f /* Sum */); // step: 1526
		fConst177KI = (2.0f * (7.6217313f + -fConst153KI /* Sum */)); // step: 1530
		fConst178KI = (1.0f / (((fConst149KI + 0.16840488f /* Sum */) / fConst148KI) + 1.0693583f /* Sum */)); // step: 1539
		fConst179KI = (((fConst149KI + -0.16840488f /* Sum */) / fConst148KI) + 1.0693583f /* Sum */); // step: 1542
		fConst180KI = (2.0f * (1.0693583f + -fConst153KI /* Sum */)); // step: 1546
		fConst181KI = (fConst153KI + 53.53615f /* Sum */); // step: 1556
		fConst182KI = (2.0f * (53.53615f + -fConst153KI /* Sum */)); // step: 1560
		fConst183KI = tanf((8885.766f / fConst0KI)); // step: 1568
		fConst184KI = (1.0f / fConst183KI); // step: 1569
		fConst185KI = (1.0f / (((fConst184KI + 3.1897273f /* Sum */) / fConst183KI) + 4.0767817f /* Sum */)); // step: 1573
		fConst186KI = (((fConst184KI + -3.1897273f /* Sum */) / fConst183KI) + 4.0767817f /* Sum */); // step: 1576
		fConst187KI = powf(fConst183KI,2.0f); // step: 1579
		fConst188KI = (1.0f / fConst187KI); // step: 1580
		fConst189KI = (2.0f * (4.0767817f + -fConst188KI /* Sum */)); // step: 1583
		fConst190KI = (0.0017661728f / fConst187KI); // step: 1593
		fConst191KI = (fConst190KI + 0.0004076782f /* Sum */); // step: 1594
		fConst192KI = (2.0f * (0.0004076782f + -fConst190KI /* Sum */)); // step: 1599
		fConst193KI = (1.0f / (((fConst184KI + 0.74313045f /* Sum */) / fConst183KI) + 1.4500711f /* Sum */)); // step: 1608
		fConst194KI = (((fConst184KI + -0.74313045f /* Sum */) / fConst183KI) + 1.4500711f /* Sum */); // step: 1611
		fConst195KI = (2.0f * (1.4500711f + -fConst188KI /* Sum */)); // step: 1615
		fConst196KI = (11.0520525f / fConst187KI); // step: 1625
		fConst197KI = (fConst196KI + 1.4500711f /* Sum */); // step: 1626
		fConst198KI = (2.0f * (1.4500711f + -fConst196KI /* Sum */)); // step: 1631
		fConst199KI = (1.0f / (((fConst184KI + 0.15748216f /* Sum */) / fConst183KI) + 0.9351402f /* Sum */)); // step: 1640
		fConst200KI = (((fConst184KI + -0.15748216f /* Sum */) / fConst183KI) + 0.9351402f /* Sum */); // step: 1643
		fConst201KI = (2.0f * (0.9351402f + -fConst188KI /* Sum */)); // step: 1647
		fConst202KI = (1.0f / (((fConst184KI + 0.78241307f /* Sum */) / fConst183KI) + 0.2452915f /* Sum */)); // step: 1660
		fConst203KI = (((fConst184KI + -0.78241307f /* Sum */) / fConst183KI) + 0.2452915f /* Sum */); // step: 1663
		fConst204KI = (2.0f * (0.2452915f + -fConst188KI /* Sum */)); // step: 1667
		fConst205KI = (0.0001f / fConst187KI); // step: 1677
		fConst206KI = (fConst205KI + 0.0004332272f /* Sum */); // step: 1678
		fConst207KI = (2.0f * (0.0004332272f + -fConst205KI /* Sum */)); // step: 1683
		fConst208KI = (1.0f / (((fConst184KI + 0.51247865f /* Sum */) / fConst183KI) + 0.6896214f /* Sum */)); // step: 1692
		fConst209KI = (((fConst184KI + -0.51247865f /* Sum */) / fConst183KI) + 0.6896214f /* Sum */); // step: 1695
		fConst210KI = (2.0f * (0.6896214f + -fConst188KI /* Sum */)); // step: 1699
		fConst211KI = (fConst188KI + 7.6217313f /* Sum */); // step: 1709
		fConst212KI = (2.0f * (7.6217313f + -fConst188KI /* Sum */)); // step: 1713
		fConst213KI = (1.0f / (((fConst184KI + 0.16840488f /* Sum */) / fConst183KI) + 1.0693583f /* Sum */)); // step: 1722
		fConst214KI = (((fConst184KI + -0.16840488f /* Sum */) / fConst183KI) + 1.0693583f /* Sum */); // step: 1725
		fConst215KI = (2.0f * (1.0693583f + -fConst188KI /* Sum */)); // step: 1729
		fConst216KI = (fConst188KI + 53.53615f /* Sum */); // step: 1739
		fConst217KI = (2.0f * (53.53615f + -fConst188KI /* Sum */)); // step: 1743
		fConst218KI = tanf((6283.1855f / fConst0KI)); // step: 1751
		fConst219KI = (1.0f / fConst218KI); // step: 1752
		fConst220KI = (1.0f / (((fConst219KI + 3.1897273f /* Sum */) / fConst218KI) + 4.0767817f /* Sum */)); // step: 1756
		fConst221KI = (((fConst219KI + -3.1897273f /* Sum */) / fConst218KI) + 4.0767817f /* Sum */); // step: 1759
		fConst222KI = powf(fConst218KI,2.0f); // step: 1762
		fConst223KI = (1.0f / fConst222KI); // step: 1763
		fConst224KI = (2.0f * (4.0767817f + -fConst223KI /* Sum */)); // step: 1766
		fConst225KI = (0.0017661728f / fConst222KI); // step: 1776
		fConst226KI = (fConst225KI + 0.0004076782f /* Sum */); // step: 1777
		fConst227KI = (2.0f * (0.0004076782f + -fConst225KI /* Sum */)); // step: 1782
		fConst228KI = (1.0f / (((fConst219KI + 0.74313045f /* Sum */) / fConst218KI) + 1.4500711f /* Sum */)); // step: 1791
		fConst229KI = (((fConst219KI + -0.74313045f /* Sum */) / fConst218KI) + 1.4500711f /* Sum */); // step: 1794
		fConst230KI = (2.0f * (1.4500711f + -fConst223KI /* Sum */)); // step: 1798
		fConst231KI = (11.0520525f / fConst222KI); // step: 1808
		fConst232KI = (fConst231KI + 1.4500711f /* Sum */); // step: 1809
		fConst233KI = (2.0f * (1.4500711f + -fConst231KI /* Sum */)); // step: 1814
		fConst234KI = (1.0f / (((fConst219KI + 0.15748216f /* Sum */) / fConst218KI) + 0.9351402f /* Sum */)); // step: 1823
		fConst235KI = (((fConst219KI + -0.15748216f /* Sum */) / fConst218KI) + 0.9351402f /* Sum */); // step: 1826
		fConst236KI = (2.0f * (0.9351402f + -fConst223KI /* Sum */)); // step: 1830
		fConst237KI = (1.0f / (((fConst219KI + 0.78241307f /* Sum */) / fConst218KI) + 0.2452915f /* Sum */)); // step: 1843
		fConst238KI = (((fConst219KI + -0.78241307f /* Sum */) / fConst218KI) + 0.2452915f /* Sum */); // step: 1846
		fConst239KI = (2.0f * (0.2452915f + -fConst223KI /* Sum */)); // step: 1850
		fConst240KI = (0.0001f / fConst222KI); // step: 1860
		fConst241KI = (fConst240KI + 0.0004332272f /* Sum */); // step: 1861
		fConst242KI = (2.0f * (0.0004332272f + -fConst240KI /* Sum */)); // step: 1866
		fConst243KI = (1.0f / (((fConst219KI + 0.51247865f /* Sum */) / fConst218KI) + 0.6896214f /* Sum */)); // step: 1875
		fConst244KI = (((fConst219KI + -0.51247865f /* Sum */) / fConst218KI) + 0.6896214f /* Sum */); // step: 1878
		fConst245KI = (2.0f * (0.6896214f + -fConst223KI /* Sum */)); // step: 1882
		fConst246KI = (fConst223KI + 7.6217313f /* Sum */); // step: 1892
		fConst247KI = (2.0f * (7.6217313f + -fConst223KI /* Sum */)); // step: 1896
		fConst248KI = (1.0f / (((fConst219KI + 0.16840488f /* Sum */) / fConst218KI) + 1.0693583f /* Sum */)); // step: 1905
		fConst249KI = (((fConst219KI + -0.16840488f /* Sum */) / fConst218KI) + 1.0693583f /* Sum */); // step: 1908
		fConst250KI = (2.0f * (1.0693583f + -fConst223KI /* Sum */)); // step: 1912
		fConst251KI = (fConst223KI + 53.53615f /* Sum */); // step: 1922
		fConst252KI = (2.0f * (53.53615f + -fConst223KI /* Sum */)); // step: 1926
		fConst253KI = tanf((4442.883f / fConst0KI)); // step: 1934
		fConst254KI = (1.0f / fConst253KI); // step: 1935
		fConst255KI = (1.0f / (((fConst254KI + 3.1897273f /* Sum */) / fConst253KI) + 4.0767817f /* Sum */)); // step: 1939
		fConst256KI = (((fConst254KI + -3.1897273f /* Sum */) / fConst253KI) + 4.0767817f /* Sum */); // step: 1942
		fConst257KI = powf(fConst253KI,2.0f); // step: 1945
		fConst258KI = (1.0f / fConst257KI); // step: 1946
		fConst259KI = (2.0f * (4.0767817f + -fConst258KI /* Sum */)); // step: 1949
		fConst260KI = (0.0017661728f / fConst257KI); // step: 1959
		fConst261KI = (fConst260KI + 0.0004076782f /* Sum */); // step: 1960
		fConst262KI = (2.0f * (0.0004076782f + -fConst260KI /* Sum */)); // step: 1965
		fConst263KI = (1.0f / (((fConst254KI + 0.74313045f /* Sum */) / fConst253KI) + 1.4500711f /* Sum */)); // step: 1974
		fConst264KI = (((fConst254KI + -0.74313045f /* Sum */) / fConst253KI) + 1.4500711f /* Sum */); // step: 1977
		fConst265KI = (2.0f * (1.4500711f + -fConst258KI /* Sum */)); // step: 1981
		fConst266KI = (11.0520525f / fConst257KI); // step: 1991
		fConst267KI = (fConst266KI + 1.4500711f /* Sum */); // step: 1992
		fConst268KI = (2.0f * (1.4500711f + -fConst266KI /* Sum */)); // step: 1997
		fConst269KI = (1.0f / (((fConst254KI + 0.15748216f /* Sum */) / fConst253KI) + 0.9351402f /* Sum */)); // step: 2006
		fConst270KI = (((fConst254KI + -0.15748216f /* Sum */) / fConst253KI) + 0.9351402f /* Sum */); // step: 2009
		fConst271KI = (2.0f * (0.9351402f + -fConst258KI /* Sum */)); // step: 2013
		fConst272KI = (1.0f / (((fConst254KI + 0.78241307f /* Sum */) / fConst253KI) + 0.2452915f /* Sum */)); // step: 2026
		fConst273KI = (((fConst254KI + -0.78241307f /* Sum */) / fConst253KI) + 0.2452915f /* Sum */); // step: 2029
		fConst274KI = (2.0f * (0.2452915f + -fConst258KI /* Sum */)); // step: 2033
		fConst275KI = (0.0001f / fConst257KI); // step: 2043
		fConst276KI = (fConst275KI + 0.0004332272f /* Sum */); // step: 2044
		fConst277KI = (2.0f * (0.0004332272f + -fConst275KI /* Sum */)); // step: 2049
		fConst278KI = (1.0f / (((fConst254KI + 0.51247865f /* Sum */) / fConst253KI) + 0.6896214f /* Sum */)); // step: 2058
		fConst279KI = (((fConst254KI + -0.51247865f /* Sum */) / fConst253KI) + 0.6896214f /* Sum */); // step: 2061
		fConst280KI = (2.0f * (0.6896214f + -fConst258KI /* Sum */)); // step: 2065
		fConst281KI = (fConst258KI + 7.6217313f /* Sum */); // step: 2075
		fConst282KI = (2.0f * (7.6217313f + -fConst258KI /* Sum */)); // step: 2079
		fConst283KI = (1.0f / (((fConst254KI + 0.16840488f /* Sum */) / fConst253KI) + 1.0693583f /* Sum */)); // step: 2088
		fConst284KI = (((fConst254KI + -0.16840488f /* Sum */) / fConst253KI) + 1.0693583f /* Sum */); // step: 2091
		fConst285KI = (2.0f * (1.0693583f + -fConst258KI /* Sum */)); // step: 2095
		fConst286KI = (fConst258KI + 53.53615f /* Sum */); // step: 2105
		fConst287KI = (2.0f * (53.53615f + -fConst258KI /* Sum */)); // step: 2109
		fConst288KI = tanf((3141.5928f / fConst0KI)); // step: 2117
		fConst289KI = (1.0f / fConst288KI); // step: 2118
		fConst290KI = (1.0f / (((fConst289KI + 3.1897273f /* Sum */) / fConst288KI) + 4.0767817f /* Sum */)); // step: 2122
		fConst291KI = (((fConst289KI + -3.1897273f /* Sum */) / fConst288KI) + 4.0767817f /* Sum */); // step: 2125
		fConst292KI = powf(fConst288KI,2.0f); // step: 2128
		fConst293KI = (1.0f / fConst292KI); // step: 2129
		fConst294KI = (2.0f * (4.0767817f + -fConst293KI /* Sum */)); // step: 2132
		fConst295KI = (0.0017661728f / fConst292KI); // step: 2142
		fConst296KI = (fConst295KI + 0.0004076782f /* Sum */); // step: 2143
		fConst297KI = (2.0f * (0.0004076782f + -fConst295KI /* Sum */)); // step: 2148
		fConst298KI = (1.0f / (((fConst289KI + 0.74313045f /* Sum */) / fConst288KI) + 1.4500711f /* Sum */)); // step: 2157
		fConst299KI = (((fConst289KI + -0.74313045f /* Sum */) / fConst288KI) + 1.4500711f /* Sum */); // step: 2160
		fConst300KI = (2.0f * (1.4500711f + -fConst293KI /* Sum */)); // step: 2164
		fConst301KI = (11.0520525f / fConst292KI); // step: 2174
		fConst302KI = (fConst301KI + 1.4500711f /* Sum */); // step: 2175
		fConst303KI = (2.0f * (1.4500711f + -fConst301KI /* Sum */)); // step: 2180
		fConst304KI = (1.0f / (((fConst289KI + 0.15748216f /* Sum */) / fConst288KI) + 0.9351402f /* Sum */)); // step: 2189
		fConst305KI = (((fConst289KI + -0.15748216f /* Sum */) / fConst288KI) + 0.9351402f /* Sum */); // step: 2192
		fConst306KI = (2.0f * (0.9351402f + -fConst293KI /* Sum */)); // step: 2196
		fConst307KI = (1.0f / (((fConst289KI + 0.78241307f /* Sum */) / fConst288KI) + 0.2452915f /* Sum */)); // step: 2209
		fConst308KI = (((fConst289KI + -0.78241307f /* Sum */) / fConst288KI) + 0.2452915f /* Sum */); // step: 2212
		fConst309KI = (2.0f * (0.2452915f + -fConst293KI /* Sum */)); // step: 2216
		fConst310KI = (0.0001f / fConst292KI); // step: 2226
		fConst311KI = (fConst310KI + 0.0004332272f /* Sum */); // step: 2227
		fConst312KI = (2.0f * (0.0004332272f + -fConst310KI /* Sum */)); // step: 2232
		fConst313KI = (1.0f / (((fConst289KI + 0.51247865f /* Sum */) / fConst288KI) + 0.6896214f /* Sum */)); // step: 2241
		fConst314KI = (((fConst289KI + -0.51247865f /* Sum */) / fConst288KI) + 0.6896214f /* Sum */); // step: 2244
		fConst315KI = (2.0f * (0.6896214f + -fConst293KI /* Sum */)); // step: 2248
		fConst316KI = (fConst293KI + 7.6217313f /* Sum */); // step: 2258
		fConst317KI = (2.0f * (7.6217313f + -fConst293KI /* Sum */)); // step: 2262
		fConst318KI = (1.0f / (((fConst289KI + 0.16840488f /* Sum */) / fConst288KI) + 1.0693583f /* Sum */)); // step: 2271
		fConst319KI = (((fConst289KI + -0.16840488f /* Sum */) / fConst288KI) + 1.0693583f /* Sum */); // step: 2274
		fConst320KI = (2.0f * (1.0693583f + -fConst293KI /* Sum */)); // step: 2278
		fConst321KI = (fConst293KI + 53.53615f /* Sum */); // step: 2288
		fConst322KI = (2.0f * (53.53615f + -fConst293KI /* Sum */)); // step: 2292
		fConst323KI = tanf((2221.4414f / fConst0KI)); // step: 2300
		fConst324KI = (1.0f / fConst323KI); // step: 2301
		fConst325KI = (1.0f / (((fConst324KI + 3.1897273f /* Sum */) / fConst323KI) + 4.0767817f /* Sum */)); // step: 2305
		fConst326KI = (((fConst324KI + -3.1897273f /* Sum */) / fConst323KI) + 4.0767817f /* Sum */); // step: 2308
		fConst327KI = powf(fConst323KI,2.0f); // step: 2311
		fConst328KI = (1.0f / fConst327KI); // step: 2312
		fConst329KI = (2.0f * (4.0767817f + -fConst328KI /* Sum */)); // step: 2315
		fConst330KI = (0.0017661728f / fConst327KI); // step: 2325
		fConst331KI = (fConst330KI + 0.0004076782f /* Sum */); // step: 2326
		fConst332KI = (2.0f * (0.0004076782f + -fConst330KI /* Sum */)); // step: 2331
		fConst333KI = (1.0f / (((fConst324KI + 0.74313045f /* Sum */) / fConst323KI) + 1.4500711f /* Sum */)); // step: 2340
		fConst334KI = (((fConst324KI + -0.74313045f /* Sum */) / fConst323KI) + 1.4500711f /* Sum */); // step: 2343
		fConst335KI = (2.0f * (1.4500711f + -fConst328KI /* Sum */)); // step: 2347
		fConst336KI = (11.0520525f / fConst327KI); // step: 2357
		fConst337KI = (fConst336KI + 1.4500711f /* Sum */); // step: 2358
		fConst338KI = (2.0f * (1.4500711f + -fConst336KI /* Sum */)); // step: 2363
		fConst339KI = (1.0f / (((fConst324KI + 0.15748216f /* Sum */) / fConst323KI) + 0.9351402f /* Sum */)); // step: 2372
		fConst340KI = (((fConst324KI + -0.15748216f /* Sum */) / fConst323KI) + 0.9351402f /* Sum */); // step: 2375
		fConst341KI = (2.0f * (0.9351402f + -fConst328KI /* Sum */)); // step: 2379
		fConst342KI = (1.0f / (((fConst324KI + 0.78241307f /* Sum */) / fConst323KI) + 0.2452915f /* Sum */)); // step: 2392
		fConst343KI = (((fConst324KI + -0.78241307f /* Sum */) / fConst323KI) + 0.2452915f /* Sum */); // step: 2395
		fConst344KI = (2.0f * (0.2452915f + -fConst328KI /* Sum */)); // step: 2399
		fConst345KI = (0.0001f / fConst327KI); // step: 2409
		fConst346KI = (fConst345KI + 0.0004332272f /* Sum */); // step: 2410
		fConst347KI = (2.0f * (0.0004332272f + -fConst345KI /* Sum */)); // step: 2415
		fConst348KI = (1.0f / (((fConst324KI + 0.51247865f /* Sum */) / fConst323KI) + 0.6896214f /* Sum */)); // step: 2424
		fConst349KI = (((fConst324KI + -0.51247865f /* Sum */) / fConst323KI) + 0.6896214f /* Sum */); // step: 2427
		fConst350KI = (2.0f * (0.6896214f + -fConst328KI /* Sum */)); // step: 2431
		fConst351KI = (fConst328KI + 7.6217313f /* Sum */); // step: 2441
		fConst352KI = (2.0f * (7.6217313f + -fConst328KI /* Sum */)); // step: 2445
		fConst353KI = (1.0f / (((fConst324KI + 0.16840488f /* Sum */) / fConst323KI) + 1.0693583f /* Sum */)); // step: 2454
		fConst354KI = (((fConst324KI + -0.16840488f /* Sum */) / fConst323KI) + 1.0693583f /* Sum */); // step: 2457
		fConst355KI = (2.0f * (1.0693583f + -fConst328KI /* Sum */)); // step: 2461
		fConst356KI = (fConst328KI + 53.53615f /* Sum */); // step: 2471
		fConst357KI = (2.0f * (53.53615f + -fConst328KI /* Sum */)); // step: 2475
		fConst358KI = tanf((1570.7964f / fConst0KI)); // step: 2483
		fConst359KI = (1.0f / fConst358KI); // step: 2484
		fConst360KI = (1.0f / (((fConst359KI + 3.1897273f /* Sum */) / fConst358KI) + 4.0767817f /* Sum */)); // step: 2488
		fConst361KI = (((fConst359KI + -3.1897273f /* Sum */) / fConst358KI) + 4.0767817f /* Sum */); // step: 2491
		fConst362KI = powf(fConst358KI,2.0f); // step: 2494
		fConst363KI = (1.0f / fConst362KI); // step: 2495
		fConst364KI = (2.0f * (4.0767817f + -fConst363KI /* Sum */)); // step: 2498
		fConst365KI = (0.0017661728f / fConst362KI); // step: 2508
		fConst366KI = (fConst365KI + 0.0004076782f /* Sum */); // step: 2509
		fConst367KI = (2.0f * (0.0004076782f + -fConst365KI /* Sum */)); // step: 2514
		fConst368KI = (1.0f / (((fConst359KI + 0.74313045f /* Sum */) / fConst358KI) + 1.4500711f /* Sum */)); // step: 2523
		fConst369KI = (((fConst359KI + -0.74313045f /* Sum */) / fConst358KI) + 1.4500711f /* Sum */); // step: 2526
		fConst370KI = (2.0f * (1.4500711f + -fConst363KI /* Sum */)); // step: 2530
		fConst371KI = (11.0520525f / fConst362KI); // step: 2540
		fConst372KI = (fConst371KI + 1.4500711f /* Sum */); // step: 2541
		fConst373KI = (2.0f * (1.4500711f + -fConst371KI /* Sum */)); // step: 2546
		fConst374KI = (1.0f / (((fConst359KI + 0.15748216f /* Sum */) / fConst358KI) + 0.9351402f /* Sum */)); // step: 2555
		fConst375KI = (((fConst359KI + -0.15748216f /* Sum */) / fConst358KI) + 0.9351402f /* Sum */); // step: 2558
		fConst376KI = (2.0f * (0.9351402f + -fConst363KI /* Sum */)); // step: 2562
		fConst377KI = (1.0f / (((fConst359KI + 0.78241307f /* Sum */) / fConst358KI) + 0.2452915f /* Sum */)); // step: 2575
		fConst378KI = (((fConst359KI + -0.78241307f /* Sum */) / fConst358KI) + 0.2452915f /* Sum */); // step: 2578
		fConst379KI = (2.0f * (0.2452915f + -fConst363KI /* Sum */)); // step: 2582
		fConst380KI = (0.0001f / fConst362KI); // step: 2592
		fConst381KI = (fConst380KI + 0.0004332272f /* Sum */); // step: 2593
		fConst382KI = (2.0f * (0.0004332272f + -fConst380KI /* Sum */)); // step: 2598
		fConst383KI = (1.0f / (((fConst359KI + 0.51247865f /* Sum */) / fConst358KI) + 0.6896214f /* Sum */)); // step: 2607
		fConst384KI = (((fConst359KI + -0.51247865f /* Sum */) / fConst358KI) + 0.6896214f /* Sum */); // step: 2610
		fConst385KI = (2.0f * (0.6896214f + -fConst363KI /* Sum */)); // step: 2614
		fConst386KI = (fConst363KI + 7.6217313f /* Sum */); // step: 2624
		fConst387KI = (2.0f * (7.6217313f + -fConst363KI /* Sum */)); // step: 2628
		fConst388KI = (1.0f / (((fConst359KI + 0.16840488f /* Sum */) / fConst358KI) + 1.0693583f /* Sum */)); // step: 2637
		fConst389KI = (((fConst359KI + -0.16840488f /* Sum */) / fConst358KI) + 1.0693583f /* Sum */); // step: 2640
		fConst390KI = (2.0f * (1.0693583f + -fConst363KI /* Sum */)); // step: 2644
		fConst391KI = (fConst363KI + 53.53615f /* Sum */); // step: 2654
		fConst392KI = (2.0f * (53.53615f + -fConst363KI /* Sum */)); // step: 2658
		fConst393KI = tanf((1110.7207f / fConst0KI)); // step: 2666
		fConst394KI = (1.0f / fConst393KI); // step: 2667
		fConst395KI = (1.0f / (((fConst394KI + 3.1897273f /* Sum */) / fConst393KI) + 4.0767817f /* Sum */)); // step: 2671
		fConst396KI = (((fConst394KI + -3.1897273f /* Sum */) / fConst393KI) + 4.0767817f /* Sum */); // step: 2674
		fConst397KI = powf(fConst393KI,2.0f); // step: 2677
		fConst398KI = (1.0f / fConst397KI); // step: 2678
		fConst399KI = (2.0f * (4.0767817f + -fConst398KI /* Sum */)); // step: 2681
		fConst400KI = (0.0017661728f / fConst397KI); // step: 2691
		fConst401KI = (fConst400KI + 0.0004076782f /* Sum */); // step: 2692
		fConst402KI = (2.0f * (0.0004076782f + -fConst400KI /* Sum */)); // step: 2697
		fConst403KI = (1.0f / (((fConst394KI + 0.74313045f /* Sum */) / fConst393KI) + 1.4500711f /* Sum */)); // step: 2706
		fConst404KI = (((fConst394KI + -0.74313045f /* Sum */) / fConst393KI) + 1.4500711f /* Sum */); // step: 2709
		fConst405KI = (2.0f * (1.4500711f + -fConst398KI /* Sum */)); // step: 2713
		fConst406KI = (11.0520525f / fConst397KI); // step: 2723
		fConst407KI = (fConst406KI + 1.4500711f /* Sum */); // step: 2724
		fConst408KI = (2.0f * (1.4500711f + -fConst406KI /* Sum */)); // step: 2729
		fConst409KI = (1.0f / (((fConst394KI + 0.15748216f /* Sum */) / fConst393KI) + 0.9351402f /* Sum */)); // step: 2738
		fConst410KI = (((fConst394KI + -0.15748216f /* Sum */) / fConst393KI) + 0.9351402f /* Sum */); // step: 2741
		fConst411KI = (2.0f * (0.9351402f + -fConst398KI /* Sum */)); // step: 2745
		fConst412KI = (1.0f / (((fConst394KI + 0.78241307f /* Sum */) / fConst393KI) + 0.2452915f /* Sum */)); // step: 2758
		fConst413KI = (((fConst394KI + -0.78241307f /* Sum */) / fConst393KI) + 0.2452915f /* Sum */); // step: 2761
		fConst414KI = (2.0f * (0.2452915f + -fConst398KI /* Sum */)); // step: 2765
		fConst415KI = (0.0001f / fConst397KI); // step: 2775
		fConst416KI = (fConst415KI + 0.0004332272f /* Sum */); // step: 2776
		fConst417KI = (2.0f * (0.0004332272f + -fConst415KI /* Sum */)); // step: 2781
		fConst418KI = (1.0f / (((fConst394KI + 0.51247865f /* Sum */) / fConst393KI) + 0.6896214f /* Sum */)); // step: 2790
		fConst419KI = (((fConst394KI + -0.51247865f /* Sum */) / fConst393KI) + 0.6896214f /* Sum */); // step: 2793
		fConst420KI = (2.0f * (0.6896214f + -fConst398KI /* Sum */)); // step: 2797
		fConst421KI = (fConst398KI + 7.6217313f /* Sum */); // step: 2807
		fConst422KI = (2.0f * (7.6217313f + -fConst398KI /* Sum */)); // step: 2811
		fConst423KI = (1.0f / (((fConst394KI + 0.16840488f /* Sum */) / fConst393KI) + 1.0693583f /* Sum */)); // step: 2820
		fConst424KI = (((fConst394KI + -0.16840488f /* Sum */) / fConst393KI) + 1.0693583f /* Sum */); // step: 2823
		fConst425KI = (2.0f * (1.0693583f + -fConst398KI /* Sum */)); // step: 2827
		fConst426KI = (fConst398KI + 53.53615f /* Sum */); // step: 2837
		fConst427KI = (2.0f * (53.53615f + -fConst398KI /* Sum */)); // step: 2841
		fConst428KI = tanf((785.3982f / fConst0KI)); // step: 2849
		fConst429KI = (1.0f / fConst428KI); // step: 2850
		fConst430KI = (1.0f / (((fConst429KI + 3.1897273f /* Sum */) / fConst428KI) + 4.0767817f /* Sum */)); // step: 2854
		fConst431KI = (((fConst429KI + -3.1897273f /* Sum */) / fConst428KI) + 4.0767817f /* Sum */); // step: 2857
		fConst432KI = powf(fConst428KI,2.0f); // step: 2860
		fConst433KI = (1.0f / fConst432KI); // step: 2861
		fConst434KI = (2.0f * (4.0767817f + -fConst433KI /* Sum */)); // step: 2864
		fConst435KI = (0.0017661728f / fConst432KI); // step: 2874
		fConst436KI = (fConst435KI + 0.0004076782f /* Sum */); // step: 2875
		fConst437KI = (2.0f * (0.0004076782f + -fConst435KI /* Sum */)); // step: 2880
		fConst438KI = (1.0f / (((fConst429KI + 0.74313045f /* Sum */) / fConst428KI) + 1.4500711f /* Sum */)); // step: 2889
		fConst439KI = (((fConst429KI + -0.74313045f /* Sum */) / fConst428KI) + 1.4500711f /* Sum */); // step: 2892
		fConst440KI = (2.0f * (1.4500711f + -fConst433KI /* Sum */)); // step: 2896
		fConst441KI = (11.0520525f / fConst432KI); // step: 2906
		fConst442KI = (fConst441KI + 1.4500711f /* Sum */); // step: 2907
		fConst443KI = (2.0f * (1.4500711f + -fConst441KI /* Sum */)); // step: 2912
		fConst444KI = (1.0f / (((fConst429KI + 0.15748216f /* Sum */) / fConst428KI) + 0.9351402f /* Sum */)); // step: 2921
		fConst445KI = (((fConst429KI + -0.15748216f /* Sum */) / fConst428KI) + 0.9351402f /* Sum */); // step: 2924
		fConst446KI = (2.0f * (0.9351402f + -fConst433KI /* Sum */)); // step: 2928
		fConst447KI = (1.0f / (((fConst429KI + 0.78241307f /* Sum */) / fConst428KI) + 0.2452915f /* Sum */)); // step: 2941
		fConst448KI = (((fConst429KI + -0.78241307f /* Sum */) / fConst428KI) + 0.2452915f /* Sum */); // step: 2944
		fConst449KI = (2.0f * (0.2452915f + -fConst433KI /* Sum */)); // step: 2948
		fConst450KI = (0.0001f / fConst432KI); // step: 2958
		fConst451KI = (fConst450KI + 0.0004332272f /* Sum */); // step: 2959
		fConst452KI = (2.0f * (0.0004332272f + -fConst450KI /* Sum */)); // step: 2964
		fConst453KI = (1.0f / (((fConst429KI + 0.51247865f /* Sum */) / fConst428KI) + 0.6896214f /* Sum */)); // step: 2973
		fConst454KI = (((fConst429KI + -0.51247865f /* Sum */) / fConst428KI) + 0.6896214f /* Sum */); // step: 2976
		fConst455KI = (2.0f * (0.6896214f + -fConst433KI /* Sum */)); // step: 2980
		fConst456KI = (fConst433KI + 7.6217313f /* Sum */); // step: 2990
		fConst457KI = (2.0f * (7.6217313f + -fConst433KI /* Sum */)); // step: 2994
		fConst458KI = (1.0f / (((fConst429KI + 0.16840488f /* Sum */) / fConst428KI) + 1.0693583f /* Sum */)); // step: 3003
		fConst459KI = (((fConst429KI + -0.16840488f /* Sum */) / fConst428KI) + 1.0693583f /* Sum */); // step: 3006
		fConst460KI = (2.0f * (1.0693583f + -fConst433KI /* Sum */)); // step: 3010
		fConst461KI = (fConst433KI + 53.53615f /* Sum */); // step: 3020
		fConst462KI = (2.0f * (53.53615f + -fConst433KI /* Sum */)); // step: 3024
		fConst463KI = tanf((555.36035f / fConst0KI)); // step: 3032
		fConst464KI = (1.0f / fConst463KI); // step: 3033
		fConst465KI = (1.0f / (((fConst464KI + 3.1897273f /* Sum */) / fConst463KI) + 4.0767817f /* Sum */)); // step: 3037
		fConst466KI = (((fConst464KI + -3.1897273f /* Sum */) / fConst463KI) + 4.0767817f /* Sum */); // step: 3040
		fConst467KI = powf(fConst463KI,2.0f); // step: 3043
		fConst468KI = (1.0f / fConst467KI); // step: 3044
		fConst469KI = (2.0f * (4.0767817f + -fConst468KI /* Sum */)); // step: 3047
		fConst470KI = (0.0017661728f / fConst467KI); // step: 3057
		fConst471KI = (fConst470KI + 0.0004076782f /* Sum */); // step: 3058
		fConst472KI = (2.0f * (0.0004076782f + -fConst470KI /* Sum */)); // step: 3063
		fConst473KI = (1.0f / (((fConst464KI + 0.74313045f /* Sum */) / fConst463KI) + 1.4500711f /* Sum */)); // step: 3072
		fConst474KI = (((fConst464KI + -0.74313045f /* Sum */) / fConst463KI) + 1.4500711f /* Sum */); // step: 3075
		fConst475KI = (2.0f * (1.4500711f + -fConst468KI /* Sum */)); // step: 3079
		fConst476KI = (11.0520525f / fConst467KI); // step: 3089
		fConst477KI = (fConst476KI + 1.4500711f /* Sum */); // step: 3090
		fConst478KI = (2.0f * (1.4500711f + -fConst476KI /* Sum */)); // step: 3095
		fConst479KI = (1.0f / (((fConst464KI + 0.15748216f /* Sum */) / fConst463KI) + 0.9351402f /* Sum */)); // step: 3104
		fConst480KI = (((fConst464KI + -0.15748216f /* Sum */) / fConst463KI) + 0.9351402f /* Sum */); // step: 3107
		fConst481KI = (2.0f * (0.9351402f + -fConst468KI /* Sum */)); // step: 3111
		fConst482KI = (1.0f / (((fConst464KI + 0.78241307f /* Sum */) / fConst463KI) + 0.2452915f /* Sum */)); // step: 3124
		fConst483KI = (((fConst464KI + -0.78241307f /* Sum */) / fConst463KI) + 0.2452915f /* Sum */); // step: 3127
		fConst484KI = (2.0f * (0.2452915f + -fConst468KI /* Sum */)); // step: 3131
		fConst485KI = (0.0001f / fConst467KI); // step: 3141
		fConst486KI = (fConst485KI + 0.0004332272f /* Sum */); // step: 3142
		fConst487KI = (2.0f * (0.0004332272f + -fConst485KI /* Sum */)); // step: 3147
		fConst488KI = (1.0f / (((fConst464KI + 0.51247865f /* Sum */) / fConst463KI) + 0.6896214f /* Sum */)); // step: 3156
		fConst489KI = (((fConst464KI + -0.51247865f /* Sum */) / fConst463KI) + 0.6896214f /* Sum */); // step: 3159
		fConst490KI = (2.0f * (0.6896214f + -fConst468KI /* Sum */)); // step: 3163
		fConst491KI = (fConst468KI + 7.6217313f /* Sum */); // step: 3173
		fConst492KI = (2.0f * (7.6217313f + -fConst468KI /* Sum */)); // step: 3177
		fConst493KI = (1.0f / (((fConst464KI + 0.16840488f /* Sum */) / fConst463KI) + 1.0693583f /* Sum */)); // step: 3186
		fConst494KI = (((fConst464KI + -0.16840488f /* Sum */) / fConst463KI) + 1.0693583f /* Sum */); // step: 3189
		fConst495KI = (2.0f * (1.0693583f + -fConst468KI /* Sum */)); // step: 3193
		fConst496KI = (fConst468KI + 53.53615f /* Sum */); // step: 3203
		fConst497KI = (2.0f * (53.53615f + -fConst468KI /* Sum */)); // step: 3207
		fConst498KI = tanf((392.6991f / fConst0KI)); // step: 3215
		fConst499KI = (1.0f / fConst498KI); // step: 3216
		fConst500KI = (1.0f / (((fConst499KI + 3.1897273f /* Sum */) / fConst498KI) + 4.0767817f /* Sum */)); // step: 3220
		fConst501KI = (((fConst499KI + -3.1897273f /* Sum */) / fConst498KI) + 4.0767817f /* Sum */); // step: 3223
		fConst502KI = powf(fConst498KI,2.0f); // step: 3226
		fConst503KI = (1.0f / fConst502KI); // step: 3227
		fConst504KI = (2.0f * (4.0767817f + -fConst503KI /* Sum */)); // step: 3230
		fConst505KI = (0.0017661728f / fConst502KI); // step: 3240
		fConst506KI = (fConst505KI + 0.0004076782f /* Sum */); // step: 3241
		fConst507KI = (2.0f * (0.0004076782f + -fConst505KI /* Sum */)); // step: 3246
		fConst508KI = (1.0f / (((fConst499KI + 0.74313045f /* Sum */) / fConst498KI) + 1.4500711f /* Sum */)); // step: 3255
		fConst509KI = (((fConst499KI + -0.74313045f /* Sum */) / fConst498KI) + 1.4500711f /* Sum */); // step: 3258
		fConst510KI = (2.0f * (1.4500711f + -fConst503KI /* Sum */)); // step: 3262
		fConst511KI = (11.0520525f / fConst502KI); // step: 3272
		fConst512KI = (fConst511KI + 1.4500711f /* Sum */); // step: 3273
		fConst513KI = (2.0f * (1.4500711f + -fConst511KI /* Sum */)); // step: 3278
		fConst514KI = (1.0f / (((fConst499KI + 0.15748216f /* Sum */) / fConst498KI) + 0.9351402f /* Sum */)); // step: 3287
		fConst515KI = (((fConst499KI + -0.15748216f /* Sum */) / fConst498KI) + 0.9351402f /* Sum */); // step: 3290
		fConst516KI = (2.0f * (0.9351402f + -fConst503KI /* Sum */)); // step: 3294
		fConst517KI = (1.0f / (((fConst499KI + 0.78241307f /* Sum */) / fConst498KI) + 0.2452915f /* Sum */)); // step: 3307
		fConst518KI = (((fConst499KI + -0.78241307f /* Sum */) / fConst498KI) + 0.2452915f /* Sum */); // step: 3310
		fConst519KI = (2.0f * (0.2452915f + -fConst503KI /* Sum */)); // step: 3314
		fConst520KI = (0.0001f / fConst502KI); // step: 3324
		fConst521KI = (fConst520KI + 0.0004332272f /* Sum */); // step: 3325
		fConst522KI = (2.0f * (0.0004332272f + -fConst520KI /* Sum */)); // step: 3330
		fConst523KI = (1.0f / (((fConst499KI + 0.51247865f /* Sum */) / fConst498KI) + 0.6896214f /* Sum */)); // step: 3339
		fConst524KI = (((fConst499KI + -0.51247865f /* Sum */) / fConst498KI) + 0.6896214f /* Sum */); // step: 3342
		fConst525KI = (2.0f * (0.6896214f + -fConst503KI /* Sum */)); // step: 3346
		fConst526KI = (fConst503KI + 7.6217313f /* Sum */); // step: 3356
		fConst527KI = (2.0f * (7.6217313f + -fConst503KI /* Sum */)); // step: 3360
		fConst528KI = (1.0f / (((fConst499KI + 0.16840488f /* Sum */) / fConst498KI) + 1.0693583f /* Sum */)); // step: 3369
		fConst529KI = (((fConst499KI + -0.16840488f /* Sum */) / fConst498KI) + 1.0693583f /* Sum */); // step: 3372
		fConst530KI = (2.0f * (1.0693583f + -fConst503KI /* Sum */)); // step: 3376
		fConst531KI = (fConst503KI + 53.53615f /* Sum */); // step: 3386
		fConst532KI = (2.0f * (53.53615f + -fConst503KI /* Sum */)); // step: 3390
		fConst533KI = tanf((277.68018f / fConst0KI)); // step: 3398
		fConst534KI = (1.0f / fConst533KI); // step: 3399
		fConst535KI = (1.0f / (((fConst534KI + 3.1897273f /* Sum */) / fConst533KI) + 4.0767817f /* Sum */)); // step: 3403
		fConst536KI = (((fConst534KI + -3.1897273f /* Sum */) / fConst533KI) + 4.0767817f /* Sum */); // step: 3406
		fConst537KI = powf(fConst533KI,2.0f); // step: 3409
		fConst538KI = (1.0f / fConst537KI); // step: 3410
		fConst539KI = (2.0f * (4.0767817f + -fConst538KI /* Sum */)); // step: 3413
		fConst540KI = (0.0017661728f / fConst537KI); // step: 3423
		fConst541KI = (fConst540KI + 0.0004076782f /* Sum */); // step: 3424
		fConst542KI = (2.0f * (0.0004076782f + -fConst540KI /* Sum */)); // step: 3429
		fConst543KI = (1.0f / (((fConst534KI + 0.74313045f /* Sum */) / fConst533KI) + 1.4500711f /* Sum */)); // step: 3438
		fConst544KI = (((fConst534KI + -0.74313045f /* Sum */) / fConst533KI) + 1.4500711f /* Sum */); // step: 3441
		fConst545KI = (2.0f * (1.4500711f + -fConst538KI /* Sum */)); // step: 3445
		fConst546KI = (11.0520525f / fConst537KI); // step: 3455
		fConst547KI = (fConst546KI + 1.4500711f /* Sum */); // step: 3456
		fConst548KI = (2.0f * (1.4500711f + -fConst546KI /* Sum */)); // step: 3461
		fConst549KI = (1.0f / (((fConst534KI + 0.15748216f /* Sum */) / fConst533KI) + 0.9351402f /* Sum */)); // step: 3470
		fConst550KI = (((fConst534KI + -0.15748216f /* Sum */) / fConst533KI) + 0.9351402f /* Sum */); // step: 3473
		fConst551KI = (2.0f * (0.9351402f + -fConst538KI /* Sum */)); // step: 3477
		fConst552KI = (1.0f / (((fConst534KI + 0.78241307f /* Sum */) / fConst533KI) + 0.2452915f /* Sum */)); // step: 3490
		fConst553KI = (((fConst534KI + -0.78241307f /* Sum */) / fConst533KI) + 0.2452915f /* Sum */); // step: 3493
		fConst554KI = (2.0f * (0.2452915f + -fConst538KI /* Sum */)); // step: 3497
		fConst555KI = (0.0001f / fConst537KI); // step: 3507
		fConst556KI = (fConst555KI + 0.0004332272f /* Sum */); // step: 3508
		fConst557KI = (2.0f * (0.0004332272f + -fConst555KI /* Sum */)); // step: 3513
		fConst558KI = (1.0f / (((fConst534KI + 0.51247865f /* Sum */) / fConst533KI) + 0.6896214f /* Sum */)); // step: 3522
		fConst559KI = (((fConst534KI + -0.51247865f /* Sum */) / fConst533KI) + 0.6896214f /* Sum */); // step: 3525
		fConst560KI = (2.0f * (0.6896214f + -fConst538KI /* Sum */)); // step: 3529
		fConst561KI = (fConst538KI + 7.6217313f /* Sum */); // step: 3539
		fConst562KI = (2.0f * (7.6217313f + -fConst538KI /* Sum */)); // step: 3543
		fConst563KI = (1.0f / (((fConst534KI + 0.16840488f /* Sum */) / fConst533KI) + 1.0693583f /* Sum */)); // step: 3552
		fConst564KI = (((fConst534KI + -0.16840488f /* Sum */) / fConst533KI) + 1.0693583f /* Sum */); // step: 3555
		fConst565KI = (2.0f * (1.0693583f + -fConst538KI /* Sum */)); // step: 3559
		fConst566KI = (fConst538KI + 53.53615f /* Sum */); // step: 3569
		fConst567KI = (2.0f * (53.53615f + -fConst538KI /* Sum */)); // step: 3573
		fConst568KI = tanf((196.34955f / fConst0KI)); // step: 3581
		fConst569KI = (1.0f / fConst568KI); // step: 3582
		fConst570KI = (1.0f / (((fConst569KI + 3.1897273f /* Sum */) / fConst568KI) + 4.0767817f /* Sum */)); // step: 3586
		fConst571KI = (((fConst569KI + -3.1897273f /* Sum */) / fConst568KI) + 4.0767817f /* Sum */); // step: 3589
		fConst572KI = powf(fConst568KI,2.0f); // step: 3592
		fConst573KI = (1.0f / fConst572KI); // step: 3593
		fConst574KI = (2.0f * (4.0767817f + -fConst573KI /* Sum */)); // step: 3596
		fConst575KI = (0.0017661728f / fConst572KI); // step: 3606
		fConst576KI = (fConst575KI + 0.0004076782f /* Sum */); // step: 3607
		fConst577KI = (2.0f * (0.0004076782f + -fConst575KI /* Sum */)); // step: 3612
		fConst578KI = (1.0f / (((fConst569KI + 0.74313045f /* Sum */) / fConst568KI) + 1.4500711f /* Sum */)); // step: 3621
		fConst579KI = (((fConst569KI + -0.74313045f /* Sum */) / fConst568KI) + 1.4500711f /* Sum */); // step: 3624
		fConst580KI = (2.0f * (1.4500711f + -fConst573KI /* Sum */)); // step: 3628
		fConst581KI = (11.0520525f / fConst572KI); // step: 3638
		fConst582KI = (fConst581KI + 1.4500711f /* Sum */); // step: 3639
		fConst583KI = (2.0f * (1.4500711f + -fConst581KI /* Sum */)); // step: 3644
		fConst584KI = (1.0f / (((fConst569KI + 0.15748216f /* Sum */) / fConst568KI) + 0.9351402f /* Sum */)); // step: 3653
		fConst585KI = (((fConst569KI + -0.15748216f /* Sum */) / fConst568KI) + 0.9351402f /* Sum */); // step: 3656
		fConst586KI = (2.0f * (0.9351402f + -fConst573KI /* Sum */)); // step: 3660
		fConst587KI = (1.0f / (((fConst569KI + 0.78241307f /* Sum */) / fConst568KI) + 0.2452915f /* Sum */)); // step: 3673
		fConst588KI = (((fConst569KI + -0.78241307f /* Sum */) / fConst568KI) + 0.2452915f /* Sum */); // step: 3676
		fConst589KI = (2.0f * (0.2452915f + -fConst573KI /* Sum */)); // step: 3680
		fConst590KI = (0.0001f / fConst572KI); // step: 3690
		fConst591KI = (fConst590KI + 0.0004332272f /* Sum */); // step: 3691
		fConst592KI = (2.0f * (0.0004332272f + -fConst590KI /* Sum */)); // step: 3696
		fConst593KI = (1.0f / (((fConst569KI + 0.51247865f /* Sum */) / fConst568KI) + 0.6896214f /* Sum */)); // step: 3705
		fConst594KI = (((fConst569KI + -0.51247865f /* Sum */) / fConst568KI) + 0.6896214f /* Sum */); // step: 3708
		fConst595KI = (2.0f * (0.6896214f + -fConst573KI /* Sum */)); // step: 3712
		fConst596KI = (fConst573KI + 7.6217313f /* Sum */); // step: 3722
		fConst597KI = (2.0f * (7.6217313f + -fConst573KI /* Sum */)); // step: 3726
		fConst598KI = (1.0f / (((fConst569KI + 0.16840488f /* Sum */) / fConst568KI) + 1.0693583f /* Sum */)); // step: 3735
		fConst599KI = (((fConst569KI + -0.16840488f /* Sum */) / fConst568KI) + 1.0693583f /* Sum */); // step: 3738
		fConst600KI = (2.0f * (1.0693583f + -fConst573KI /* Sum */)); // step: 3742
		fConst601KI = (fConst573KI + 53.53615f /* Sum */); // step: 3752
		fConst602KI = (2.0f * (53.53615f + -fConst573KI /* Sum */)); // step: 3756
		fConst603KI = tanf((138.84009f / fConst0KI)); // step: 3764
		fConst604KI = (1.0f / fConst603KI); // step: 3765
		fConst605KI = (1.0f / (((fConst604KI + 3.1897273f /* Sum */) / fConst603KI) + 4.0767817f /* Sum */)); // step: 3769
		fConst606KI = (((fConst604KI + -3.1897273f /* Sum */) / fConst603KI) + 4.0767817f /* Sum */); // step: 3772
		fConst607KI = powf(fConst603KI,2.0f); // step: 3775
		fConst608KI = (1.0f / fConst607KI); // step: 3776
		fConst609KI = (2.0f * (4.0767817f + -fConst608KI /* Sum */)); // step: 3779
		fConst610KI = (0.0017661728f / fConst607KI); // step: 3789
		fConst611KI = (fConst610KI + 0.0004076782f /* Sum */); // step: 3790
		fConst612KI = (2.0f * (0.0004076782f + -fConst610KI /* Sum */)); // step: 3795
		fConst613KI = (1.0f / (((fConst604KI + 0.74313045f /* Sum */) / fConst603KI) + 1.4500711f /* Sum */)); // step: 3804
		fConst614KI = (((fConst604KI + -0.74313045f /* Sum */) / fConst603KI) + 1.4500711f /* Sum */); // step: 3807
		fConst615KI = (2.0f * (1.4500711f + -fConst608KI /* Sum */)); // step: 3811
		fConst616KI = (11.0520525f / fConst607KI); // step: 3821
		fConst617KI = (fConst616KI + 1.4500711f /* Sum */); // step: 3822
		fConst618KI = (2.0f * (1.4500711f + -fConst616KI /* Sum */)); // step: 3827
		fConst619KI = (1.0f / (((fConst604KI + 0.15748216f /* Sum */) / fConst603KI) + 0.9351402f /* Sum */)); // step: 3836
		fConst620KI = (((fConst604KI + -0.15748216f /* Sum */) / fConst603KI) + 0.9351402f /* Sum */); // step: 3839
		fConst621KI = (2.0f * (0.9351402f + -fConst608KI /* Sum */)); // step: 3843
		fConst622KI = (1.0f / (((fConst604KI + 0.78241307f /* Sum */) / fConst603KI) + 0.2452915f /* Sum */)); // step: 3856
		fConst623KI = (((fConst604KI + -0.78241307f /* Sum */) / fConst603KI) + 0.2452915f /* Sum */); // step: 3859
		fConst624KI = (2.0f * (0.2452915f + -fConst608KI /* Sum */)); // step: 3863
		fConst625KI = (0.0001f / fConst607KI); // step: 3873
		fConst626KI = (fConst625KI + 0.0004332272f /* Sum */); // step: 3874
		fConst627KI = (2.0f * (0.0004332272f + -fConst625KI /* Sum */)); // step: 3879
		fConst628KI = (1.0f / (((fConst604KI + 0.51247865f /* Sum */) / fConst603KI) + 0.6896214f /* Sum */)); // step: 3888
		fConst629KI = (((fConst604KI + -0.51247865f /* Sum */) / fConst603KI) + 0.6896214f /* Sum */); // step: 3891
		fConst630KI = (2.0f * (0.6896214f + -fConst608KI /* Sum */)); // step: 3895
		fConst631KI = (fConst608KI + 7.6217313f /* Sum */); // step: 3905
		fConst632KI = (2.0f * (7.6217313f + -fConst608KI /* Sum */)); // step: 3909
		fConst633KI = (1.0f / (((fConst604KI + 0.16840488f /* Sum */) / fConst603KI) + 1.0693583f /* Sum */)); // step: 3918
		fConst634KI = (((fConst604KI + -0.16840488f /* Sum */) / fConst603KI) + 1.0693583f /* Sum */); // step: 3921
		fConst635KI = (2.0f * (1.0693583f + -fConst608KI /* Sum */)); // step: 3925
		fConst636KI = (fConst608KI + 53.53615f /* Sum */); // step: 3935
		fConst637KI = (2.0f * (53.53615f + -fConst608KI /* Sum */)); // step: 3939
		fConst638KI = tanf((98.174774f / fConst0KI)); // step: 3947
		fConst639KI = (1.0f / fConst638KI); // step: 3948
		fConst640KI = (1.0f / (((fConst639KI + 3.1897273f /* Sum */) / fConst638KI) + 4.0767817f /* Sum */)); // step: 3952
		fConst641KI = (((fConst639KI + -3.1897273f /* Sum */) / fConst638KI) + 4.0767817f /* Sum */); // step: 3955
		fConst642KI = powf(fConst638KI,2.0f); // step: 3958
		fConst643KI = (1.0f / fConst642KI); // step: 3959
		fConst644KI = (2.0f * (4.0767817f + -fConst643KI /* Sum */)); // step: 3962
		fConst645KI = (0.0017661728f / fConst642KI); // step: 3972
		fConst646KI = (fConst645KI + 0.0004076782f /* Sum */); // step: 3973
		fConst647KI = (2.0f * (0.0004076782f + -fConst645KI /* Sum */)); // step: 3978
		fConst648KI = (1.0f / (((fConst639KI + 0.74313045f /* Sum */) / fConst638KI) + 1.4500711f /* Sum */)); // step: 3987
		fConst649KI = (((fConst639KI + -0.74313045f /* Sum */) / fConst638KI) + 1.4500711f /* Sum */); // step: 3990
		fConst650KI = (2.0f * (1.4500711f + -fConst643KI /* Sum */)); // step: 3994
		fConst651KI = (11.0520525f / fConst642KI); // step: 4004
		fConst652KI = (fConst651KI + 1.4500711f /* Sum */); // step: 4005
		fConst653KI = (2.0f * (1.4500711f + -fConst651KI /* Sum */)); // step: 4010
		fConst654KI = (1.0f / (((fConst639KI + 0.15748216f /* Sum */) / fConst638KI) + 0.9351402f /* Sum */)); // step: 4019
		fConst655KI = (((fConst639KI + -0.15748216f /* Sum */) / fConst638KI) + 0.9351402f /* Sum */); // step: 4022
		fConst656KI = (2.0f * (0.9351402f + -fConst643KI /* Sum */)); // step: 4026
		fConst657KI = (1.0f / (((fConst639KI + 0.78241307f /* Sum */) / fConst638KI) + 0.2452915f /* Sum */)); // step: 4039
		fConst658KI = (((fConst639KI + -0.78241307f /* Sum */) / fConst638KI) + 0.2452915f /* Sum */); // step: 4042
		fConst659KI = (2.0f * (0.2452915f + -fConst643KI /* Sum */)); // step: 4046
		fConst660KI = (0.0001f / fConst642KI); // step: 4056
		fConst661KI = (fConst660KI + 0.0004332272f /* Sum */); // step: 4057
		fConst662KI = (2.0f * (0.0004332272f + -fConst660KI /* Sum */)); // step: 4062
		fConst663KI = (1.0f / (((fConst639KI + 0.51247865f /* Sum */) / fConst638KI) + 0.6896214f /* Sum */)); // step: 4071
		fConst664KI = (((fConst639KI + -0.51247865f /* Sum */) / fConst638KI) + 0.6896214f /* Sum */); // step: 4074
		fConst665KI = (2.0f * (0.6896214f + -fConst643KI /* Sum */)); // step: 4078
		fConst666KI = (fConst643KI + 7.6217313f /* Sum */); // step: 4088
		fConst667KI = (2.0f * (7.6217313f + -fConst643KI /* Sum */)); // step: 4092
		fConst668KI = (1.0f / (((fConst639KI + 0.16840488f /* Sum */) / fConst638KI) + 1.0693583f /* Sum */)); // step: 4101
		fConst669KI = (((fConst639KI + -0.16840488f /* Sum */) / fConst638KI) + 1.0693583f /* Sum */); // step: 4104
		fConst670KI = (2.0f * (1.0693583f + -fConst643KI /* Sum */)); // step: 4108
		fConst671KI = (1e+03f / fConst0KI); // step: 4122
		fConst672KI = (50.06381f / fConst12KI); // step: 4131
		fConst673KI = (fConst672KI + 0.9351402f /* Sum */); // step: 4132
		fConst674KI = (2.0f * (0.9351402f + -fConst672KI /* Sum */)); // step: 4137
		fConst675KI = (50.06381f / fConst47KI); // step: 4160
		fConst676KI = (fConst675KI + 0.9351402f /* Sum */); // step: 4161
		fConst677KI = (2.0f * (0.9351402f + -fConst675KI /* Sum */)); // step: 4166
		fConst678KI = (50.06381f / fConst82KI); // step: 4185
		fConst679KI = (fConst678KI + 0.9351402f /* Sum */); // step: 4186
		fConst680KI = (2.0f * (0.9351402f + -fConst678KI /* Sum */)); // step: 4191
		fConst681KI = (50.06381f / fConst117KI); // step: 4210
		fConst682KI = (fConst681KI + 0.9351402f /* Sum */); // step: 4211
		fConst683KI = (2.0f * (0.9351402f + -fConst681KI /* Sum */)); // step: 4216
		fConst684KI = (50.06381f / fConst152KI); // step: 4235
		fConst685KI = (fConst684KI + 0.9351402f /* Sum */); // step: 4236
		fConst686KI = (2.0f * (0.9351402f + -fConst684KI /* Sum */)); // step: 4241
		fConst687KI = (50.06381f / fConst187KI); // step: 4260
		fConst688KI = (fConst687KI + 0.9351402f /* Sum */); // step: 4261
		fConst689KI = (2.0f * (0.9351402f + -fConst687KI /* Sum */)); // step: 4266
		fConst690KI = (50.06381f / fConst222KI); // step: 4285
		fConst691KI = (fConst690KI + 0.9351402f /* Sum */); // step: 4286
		fConst692KI = (2.0f * (0.9351402f + -fConst690KI /* Sum */)); // step: 4291
		fConst693KI = (50.06381f / fConst257KI); // step: 4310
		fConst694KI = (fConst693KI + 0.9351402f /* Sum */); // step: 4311
		fConst695KI = (2.0f * (0.9351402f + -fConst693KI /* Sum */)); // step: 4316
		fConst696KI = (50.06381f / fConst292KI); // step: 4335
		fConst697KI = (fConst696KI + 0.9351402f /* Sum */); // step: 4336
		fConst698KI = (2.0f * (0.9351402f + -fConst696KI /* Sum */)); // step: 4341
		fConst699KI = (50.06381f / fConst327KI); // step: 4360
		fConst700KI = (fConst699KI + 0.9351402f /* Sum */); // step: 4361
		fConst701KI = (2.0f * (0.9351402f + -fConst699KI /* Sum */)); // step: 4366
		fConst702KI = (50.06381f / fConst362KI); // step: 4385
		fConst703KI = (fConst702KI + 0.9351402f /* Sum */); // step: 4386
		fConst704KI = (2.0f * (0.9351402f + -fConst702KI /* Sum */)); // step: 4391
		fConst705KI = (50.06381f / fConst397KI); // step: 4410
		fConst706KI = (fConst705KI + 0.9351402f /* Sum */); // step: 4411
		fConst707KI = (2.0f * (0.9351402f + -fConst705KI /* Sum */)); // step: 4416
		fConst708KI = (50.06381f / fConst432KI); // step: 4435
		fConst709KI = (fConst708KI + 0.9351402f /* Sum */); // step: 4436
		fConst710KI = (2.0f * (0.9351402f + -fConst708KI /* Sum */)); // step: 4441
		fConst711KI = (50.06381f / fConst467KI); // step: 4460
		fConst712KI = (fConst711KI + 0.9351402f /* Sum */); // step: 4461
		fConst713KI = (2.0f * (0.9351402f + -fConst711KI /* Sum */)); // step: 4466
		fConst714KI = (50.06381f / fConst502KI); // step: 4485
		fConst715KI = (fConst714KI + 0.9351402f /* Sum */); // step: 4486
		fConst716KI = (2.0f * (0.9351402f + -fConst714KI /* Sum */)); // step: 4491
		fConst717KI = (50.06381f / fConst537KI); // step: 4510
		fConst718KI = (fConst717KI + 0.9351402f /* Sum */); // step: 4511
		fConst719KI = (2.0f * (0.9351402f + -fConst717KI /* Sum */)); // step: 4516
		fConst720KI = (50.06381f / fConst572KI); // step: 4535
		fConst721KI = (fConst720KI + 0.9351402f /* Sum */); // step: 4536
		fConst722KI = (2.0f * (0.9351402f + -fConst720KI /* Sum */)); // step: 4541
		fConst723KI = (50.06381f / fConst607KI); // step: 4560
		fConst724KI = (fConst723KI + 0.9351402f /* Sum */); // step: 4561
		fConst725KI = (2.0f * (0.9351402f + -fConst723KI /* Sum */)); // step: 4566
		fConst726KI = (50.06381f / fConst642KI); // step: 4585
		fConst727KI = (fConst726KI + 0.9351402f /* Sum */); // step: 4586
		fConst728KI = (2.0f * (0.9351402f + -fConst726KI /* Sum */)); // step: 4591
		fConst729KI = (fConst643KI + 53.53615f /* Sum */); // step: 4610
		fConst730KI = (2.0f * (53.53615f + -fConst643KI /* Sum */)); // step: 4614
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fslider4 = -2e+01f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fentry0 = 2.0f;
		fcheckbox2 = 0.0;
		fslider5 = 2e+02f;
		fslider6 = 0.0f;
		fslider7 = 49.0f;
		fslider8 = 0.0f;
		fslider9 = 4e+01f;
		fslider10 = 8e+03f;
		fslider11 = 0.0f;
		fslider12 = 5e+01f;
		fslider13 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec11SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec16SEState = 0;
		fVec17SEState = 0;
		fVec19SEState = 0;
		fVec20SEState = 0;
		fVec21SEState = 0;
		fVec23SEState = 0;
		fVec25SEState = 0;
		fVec26SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec33SEState = 0;
		fVec34SEState = 0;
		fVec35SEState = 0;
		fVec37SEState = 0;
		fVec39SEState = 0;
		fVec40SEState = 0;
		fVec42SEState = 0;
		fVec44SEState = 0;
		iVec45SIState = 0;
		fVec48SIState = 0;
		for (int j = 0; j < 3; j++) { fVec47SIState[j] = 0; }
		fVec51SEState = 0;
		fVec67SEState = 0;
		fVec71SEState = 0;
		fVec72SEState = 0;
		fVec76SEState = 0;
		for (int j = 0; j < 2; j++) { fVec75SEState[j] = 0; }
		fVec79SEState = 0;
		fVec82SEState = 0;
		for (int j = 0; j < 2; j++) { fVec81SEState[j] = 0; }
		fVec89SEState = 0;
		fVec91SEState = 0;
		for (int j = 0; j < 2; j++) { fVec88SEState[j] = 0; }
		fVec95SEState = 0;
		fVec96SEState = 0;
		fVec100SEState = 0;
		for (int j = 0; j < 2; j++) { fVec99SEState[j] = 0; }
		fVec102SEState = 0;
		fVec105SEState = 0;
		for (int j = 0; j < 2; j++) { fVec104SEState[j] = 0; }
		fVec112SEState = 0;
		for (int j = 0; j < 2; j++) { fVec111SEState[j] = 0; }
		fVec117SEState = 0;
		for (int j = 0; j < 2; j++) { fVec116SEState[j] = 0; }
		fVec122SEState = 0;
		for (int j = 0; j < 2; j++) { fVec121SEState[j] = 0; }
		fVec125SEState = 0;
		for (int j = 0; j < 2; j++) { fVec124SEState[j] = 0; }
		fVec130SEState = 0;
		for (int j = 0; j < 2; j++) { fVec129SEState[j] = 0; }
		fVec135SEState = 0;
		for (int j = 0; j < 2; j++) { fVec134SEState[j] = 0; }
		fVec140SEState = 0;
		for (int j = 0; j < 2; j++) { fVec139SEState[j] = 0; }
		fVec145SEState = 0;
		for (int j = 0; j < 2; j++) { fVec144SEState[j] = 0; }
		fVec150SEState = 0;
		for (int j = 0; j < 2; j++) { fVec149SEState[j] = 0; }
		fVec153SEState = 0;
		for (int j = 0; j < 2; j++) { fVec152SEState[j] = 0; }
		fVec158SEState = 0;
		for (int j = 0; j < 2; j++) { fVec157SEState[j] = 0; }
		fVec163SEState = 0;
		for (int j = 0; j < 2; j++) { fVec162SEState[j] = 0; }
		fVec168SEState = 0;
		for (int j = 0; j < 2; j++) { fVec167SEState[j] = 0; }
		fVec173SEState = 0;
		for (int j = 0; j < 2; j++) { fVec172SEState[j] = 0; }
		fVec178SEState = 0;
		for (int j = 0; j < 2; j++) { fVec177SEState[j] = 0; }
		fVec181SEState = 0;
		for (int j = 0; j < 2; j++) { fVec180SEState[j] = 0; }
		fVec186SEState = 0;
		for (int j = 0; j < 2; j++) { fVec185SEState[j] = 0; }
		fVec191SEState = 0;
		for (int j = 0; j < 2; j++) { fVec190SEState[j] = 0; }
		fVec196SEState = 0;
		for (int j = 0; j < 2; j++) { fVec195SEState[j] = 0; }
		fVec201SEState = 0;
		for (int j = 0; j < 2; j++) { fVec200SEState[j] = 0; }
		fVec206SEState = 0;
		for (int j = 0; j < 2; j++) { fVec205SEState[j] = 0; }
		fVec209SEState = 0;
		for (int j = 0; j < 2; j++) { fVec208SEState[j] = 0; }
		fVec214SEState = 0;
		for (int j = 0; j < 2; j++) { fVec213SEState[j] = 0; }
		fVec219SEState = 0;
		for (int j = 0; j < 2; j++) { fVec218SEState[j] = 0; }
		fVec224SEState = 0;
		for (int j = 0; j < 2; j++) { fVec223SEState[j] = 0; }
		fVec229SEState = 0;
		for (int j = 0; j < 2; j++) { fVec228SEState[j] = 0; }
		fVec234SEState = 0;
		for (int j = 0; j < 2; j++) { fVec233SEState[j] = 0; }
		fVec237SEState = 0;
		for (int j = 0; j < 2; j++) { fVec236SEState[j] = 0; }
		fVec242SEState = 0;
		for (int j = 0; j < 2; j++) { fVec241SEState[j] = 0; }
		fVec247SEState = 0;
		for (int j = 0; j < 2; j++) { fVec246SEState[j] = 0; }
		fVec252SEState = 0;
		for (int j = 0; j < 2; j++) { fVec251SEState[j] = 0; }
		fVec257SEState = 0;
		for (int j = 0; j < 2; j++) { fVec256SEState[j] = 0; }
		fVec262SEState = 0;
		for (int j = 0; j < 2; j++) { fVec261SEState[j] = 0; }
		fVec265SEState = 0;
		for (int j = 0; j < 2; j++) { fVec264SEState[j] = 0; }
		fVec270SEState = 0;
		for (int j = 0; j < 2; j++) { fVec269SEState[j] = 0; }
		fVec275SEState = 0;
		for (int j = 0; j < 2; j++) { fVec274SEState[j] = 0; }
		fVec280SEState = 0;
		for (int j = 0; j < 2; j++) { fVec279SEState[j] = 0; }
		fVec285SEState = 0;
		for (int j = 0; j < 2; j++) { fVec284SEState[j] = 0; }
		fVec290SEState = 0;
		for (int j = 0; j < 2; j++) { fVec289SEState[j] = 0; }
		fVec293SEState = 0;
		for (int j = 0; j < 2; j++) { fVec292SEState[j] = 0; }
		fVec298SEState = 0;
		for (int j = 0; j < 2; j++) { fVec297SEState[j] = 0; }
		fVec303SEState = 0;
		for (int j = 0; j < 2; j++) { fVec302SEState[j] = 0; }
		fVec308SEState = 0;
		for (int j = 0; j < 2; j++) { fVec307SEState[j] = 0; }
		fVec313SEState = 0;
		for (int j = 0; j < 2; j++) { fVec312SEState[j] = 0; }
		fVec318SEState = 0;
		for (int j = 0; j < 2; j++) { fVec317SEState[j] = 0; }
		fVec321SEState = 0;
		for (int j = 0; j < 2; j++) { fVec320SEState[j] = 0; }
		fVec326SEState = 0;
		for (int j = 0; j < 2; j++) { fVec325SEState[j] = 0; }
		fVec331SEState = 0;
		for (int j = 0; j < 2; j++) { fVec330SEState[j] = 0; }
		fVec336SEState = 0;
		for (int j = 0; j < 2; j++) { fVec335SEState[j] = 0; }
		fVec341SEState = 0;
		for (int j = 0; j < 2; j++) { fVec340SEState[j] = 0; }
		fVec346SEState = 0;
		for (int j = 0; j < 2; j++) { fVec345SEState[j] = 0; }
		fVec349SEState = 0;
		for (int j = 0; j < 2; j++) { fVec348SEState[j] = 0; }
		fVec354SEState = 0;
		for (int j = 0; j < 2; j++) { fVec353SEState[j] = 0; }
		fVec359SEState = 0;
		for (int j = 0; j < 2; j++) { fVec358SEState[j] = 0; }
		fVec364SEState = 0;
		for (int j = 0; j < 2; j++) { fVec363SEState[j] = 0; }
		fVec369SEState = 0;
		for (int j = 0; j < 2; j++) { fVec368SEState[j] = 0; }
		fVec374SEState = 0;
		for (int j = 0; j < 2; j++) { fVec373SEState[j] = 0; }
		fVec377SEState = 0;
		for (int j = 0; j < 2; j++) { fVec376SEState[j] = 0; }
		fVec382SEState = 0;
		for (int j = 0; j < 2; j++) { fVec381SEState[j] = 0; }
		fVec387SEState = 0;
		for (int j = 0; j < 2; j++) { fVec386SEState[j] = 0; }
		fVec392SEState = 0;
		for (int j = 0; j < 2; j++) { fVec391SEState[j] = 0; }
		fVec397SEState = 0;
		for (int j = 0; j < 2; j++) { fVec396SEState[j] = 0; }
		fVec402SEState = 0;
		for (int j = 0; j < 2; j++) { fVec401SEState[j] = 0; }
		fVec405SEState = 0;
		for (int j = 0; j < 2; j++) { fVec404SEState[j] = 0; }
		fVec410SEState = 0;
		for (int j = 0; j < 2; j++) { fVec409SEState[j] = 0; }
		fVec415SEState = 0;
		for (int j = 0; j < 2; j++) { fVec414SEState[j] = 0; }
		fVec420SEState = 0;
		for (int j = 0; j < 2; j++) { fVec419SEState[j] = 0; }
		fVec425SEState = 0;
		for (int j = 0; j < 2; j++) { fVec424SEState[j] = 0; }
		fVec430SEState = 0;
		for (int j = 0; j < 2; j++) { fVec429SEState[j] = 0; }
		fVec433SEState = 0;
		for (int j = 0; j < 2; j++) { fVec432SEState[j] = 0; }
		fVec438SEState = 0;
		for (int j = 0; j < 2; j++) { fVec437SEState[j] = 0; }
		fVec443SEState = 0;
		for (int j = 0; j < 2; j++) { fVec442SEState[j] = 0; }
		fVec448SEState = 0;
		for (int j = 0; j < 2; j++) { fVec447SEState[j] = 0; }
		fVec453SEState = 0;
		for (int j = 0; j < 2; j++) { fVec452SEState[j] = 0; }
		fVec458SEState = 0;
		for (int j = 0; j < 2; j++) { fVec457SEState[j] = 0; }
		fVec461SEState = 0;
		for (int j = 0; j < 2; j++) { fVec460SEState[j] = 0; }
		fVec466SEState = 0;
		for (int j = 0; j < 2; j++) { fVec465SEState[j] = 0; }
		fVec471SEState = 0;
		for (int j = 0; j < 2; j++) { fVec470SEState[j] = 0; }
		fVec476SEState = 0;
		for (int j = 0; j < 2; j++) { fVec475SEState[j] = 0; }
		fVec481SEState = 0;
		for (int j = 0; j < 2; j++) { fVec480SEState[j] = 0; }
		fVec486SEState = 0;
		for (int j = 0; j < 2; j++) { fVec485SEState[j] = 0; }
		fVec489SEState = 0;
		for (int j = 0; j < 2; j++) { fVec488SEState[j] = 0; }
		fVec494SEState = 0;
		for (int j = 0; j < 2; j++) { fVec493SEState[j] = 0; }
		fVec499SEState = 0;
		for (int j = 0; j < 2; j++) { fVec498SEState[j] = 0; }
		fVec504SEState = 0;
		for (int j = 0; j < 2; j++) { fVec503SEState[j] = 0; }
		fVec509SEState = 0;
		for (int j = 0; j < 2; j++) { fVec508SEState[j] = 0; }
		fVec514SEState = 0;
		for (int j = 0; j < 2; j++) { fVec513SEState[j] = 0; }
		fVec517SEState = 0;
		for (int j = 0; j < 2; j++) { fVec516SEState[j] = 0; }
		fVec522SEState = 0;
		for (int j = 0; j < 2; j++) { fVec521SEState[j] = 0; }
		fVec527SEState = 0;
		for (int j = 0; j < 2; j++) { fVec526SEState[j] = 0; }
		fVec532SEState = 0;
		for (int j = 0; j < 2; j++) { fVec531SEState[j] = 0; }
		fVec537SEState = 0;
		for (int j = 0; j < 2; j++) { fVec536SEState[j] = 0; }
		fVec542SEState = 0;
		for (int j = 0; j < 2; j++) { fVec541SEState[j] = 0; }
		fVec545SEState = 0;
		for (int j = 0; j < 2; j++) { fVec544SEState[j] = 0; }
		fVec550SEState = 0;
		for (int j = 0; j < 2; j++) { fVec549SEState[j] = 0; }
		fVec555SEState = 0;
		for (int j = 0; j < 2; j++) { fVec554SEState[j] = 0; }
		fVec560SEState = 0;
		for (int j = 0; j < 2; j++) { fVec559SEState[j] = 0; }
		fVec565SEState = 0;
		for (int j = 0; j < 2; j++) { fVec564SEState[j] = 0; }
		fVec570SEState = 0;
		for (int j = 0; j < 2; j++) { fVec569SEState[j] = 0; }
		fVec573SEState = 0;
		for (int j = 0; j < 2; j++) { fVec572SEState[j] = 0; }
		fVec578SEState = 0;
		for (int j = 0; j < 2; j++) { fVec577SEState[j] = 0; }
		fVec583SEState = 0;
		for (int j = 0; j < 2; j++) { fVec582SEState[j] = 0; }
		fVec588SEState = 0;
		for (int j = 0; j < 2; j++) { fVec587SEState[j] = 0; }
		fVec593SEState = 0;
		for (int j = 0; j < 2; j++) { fVec592SEState[j] = 0; }
		fVec598SEState = 0;
		for (int j = 0; j < 2; j++) { fVec597SEState[j] = 0; }
		fVec601SEState = 0;
		for (int j = 0; j < 2; j++) { fVec600SEState[j] = 0; }
		fVec606SEState = 0;
		for (int j = 0; j < 2; j++) { fVec605SEState[j] = 0; }
		fVec611SEState = 0;
		for (int j = 0; j < 2; j++) { fVec610SEState[j] = 0; }
		fVec616SEState = 0;
		for (int j = 0; j < 2; j++) { fVec615SEState[j] = 0; }
		fVec621SEState = 0;
		for (int j = 0; j < 2; j++) { fVec620SEState[j] = 0; }
		fVec626SEState = 0;
		for (int j = 0; j < 2; j++) { fVec625SEState[j] = 0; }
		fVec629SEState = 0;
		for (int j = 0; j < 2; j++) { fVec628SEState[j] = 0; }
		fVec634SEState = 0;
		for (int j = 0; j < 2; j++) { fVec633SEState[j] = 0; }
		fVec639SEState = 0;
		for (int j = 0; j < 2; j++) { fVec638SEState[j] = 0; }
		fVec641SEState = 0;
		fVec645SEState = 0;
		fVec649SEState = 0;
		fVec653SEState = 0;
		fVec657SEState = 0;
		fVec661SEState = 0;
		fVec665SEState = 0;
		fVec669SEState = 0;
		fVec673SEState = 0;
		fVec677SEState = 0;
		fVec681SEState = 0;
		fVec685SEState = 0;
		fVec689SEState = 0;
		fVec693SEState = 0;
		fVec697SEState = 0;
		fVec701SEState = 0;
		fVec705SEState = 0;
		fVec709SEState = 0;
		fVec713SEState = 0;
		fVec717SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("parametric_eq");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider4, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox1);
		ui_interface->declare(&fcheckbox2, "1", "");
		ui_interface->declare(&fcheckbox2, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox2);
		ui_interface->declare(&fcheckbox0, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for info and pointers");
		ui_interface->openHorizontalBox("PARAMETRIC EQ SECTIONS");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Low Shelf");
		ui_interface->declare(&fslider6, "0", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Amount of low-frequency boost or cut in decibels");
		ui_interface->declare(&fslider6, "unit", "dB");
		ui_interface->addHorizontalSlider("Low Boost|Cut", &fslider6, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "scale", "log");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider5, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider5, 2e+02f, 1.0f, 5e+03f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->declare(0, "tooltip", "Parametric Equalizer sections from filter.lib");
		ui_interface->openVerticalBox("Peaking Equalizer");
		ui_interface->declare(&fslider8, "0", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Amount of local boost or cut in decibels");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addHorizontalSlider("Peak Boost|Cut", &fslider8, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Peak Frequency in Piano Key (PK) units (A440 = 49PK)");
		ui_interface->declare(&fslider7, "unit", "PK");
		ui_interface->addHorizontalSlider("Peak Frequency", &fslider7, 49.0f, 1.0f, 1e+02f, 1.0f);
		ui_interface->declare(&fslider9, "2", "");
		ui_interface->declare(&fslider9, "scale", "log");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "Quality factor (Q) of the peak = center-frequency/bandwidth");
		ui_interface->addHorizontalSlider("Peak Q", &fslider9, 4e+01f, 1.0f, 1e+03f, 0.1f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->declare(0, "tooltip", "A high shelf provides a boost or cut                            above some frequency");
		ui_interface->openVerticalBox("High Shelf");
		ui_interface->declare(&fslider11, "0", "");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "tooltip", "Amount of high-frequency boost or cut in decibels");
		ui_interface->declare(&fslider11, "unit", "dB");
		ui_interface->addHorizontalSlider("High Boost|Cut", &fslider11, 0.0f, -4e+01f, 4e+01f, 0.1f);
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "scale", "log");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider10, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider10, 8e+03f, 2e+01f, 1e+04f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 20 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph19, "0", "");
		ui_interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph19, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph18, "1", "");
		ui_interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph18, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph17, "2", "");
		ui_interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph17, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph16, "3", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph16, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph15, "4", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "5", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "6", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "7", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "8", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "9", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "10", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "11", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "12", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "13", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "14", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "15", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph15", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "16", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph16", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "17", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph17", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "18", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph18", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "19", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph19", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider13, "0", "");
		ui_interface->declare(&fslider13, "scale", "log");
		ui_interface->declare(&fslider13, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider13, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider13, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider12, "1", "");
		ui_interface->declare(&fslider12, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider12, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider12, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fTemp10SE; // step: 69
		float 	fVec9SE[2];
		float 	fTemp11SE; // step: 74
		float 	fVec11SE[2];
		float 	fTemp12SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp13SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp14SE; // step: 87
		float 	fVec16SE[2];
		float 	fTemp15SE; // step: 90
		float 	fSlow2BE = ((0.01f * float(fslider2)) + 1.0f /* Sum */); // Zone 2, step: 95
		float 	fTemp16SE; // step: 98
		float 	fTemp17SE; // step: 99
		float 	fVec17SE[2];
		float 	fTemp18SE; // step: 105
		float 	fTemp19SE; // step: 106
		float 	fTemp20SE; // step: 107
		float 	fTemp21SE; // step: 108
		float 	fVec19SE[2];
		float 	fTemp22SE; // step: 110
		float 	fTemp23SE; // step: 111
		float 	fVec20SE[2];
		float 	fVec21SE[2];
		float 	fTemp24SE; // step: 120
		float 	fVec23SE[2];
		float 	fTemp25SE; // step: 125
		float 	fVec25SE[2];
		float 	fTemp26SE; // step: 128
		float 	fVec26SE[2];
		float 	fTemp27SE; // step: 133
		float 	fVec28SE[2];
		float 	fTemp28SE; // step: 138
		float 	fVec30SE[2];
		float 	fTemp29SE; // step: 141
		float 	fSlow3BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 144
		float 	fTemp30SE; // step: 147
		float 	fTemp31SE; // step: 148
		float 	fVec31SE[2];
		float 	fTemp32SE; // step: 154
		float 	fTemp33SE; // step: 155
		float 	fTemp34SE; // step: 156
		float 	fTemp35SE; // step: 157
		float 	fVec33SE[2];
		float 	fTemp36SE; // step: 159
		float 	fTemp37SE; // step: 160
		float 	fVec34SE[2];
		float 	fVec35SE[2];
		float 	fTemp38SE; // step: 169
		float 	fVec37SE[2];
		float 	fTemp39SE; // step: 174
		float 	fVec39SE[2];
		float 	fTemp40SE; // step: 177
		float 	fVec40SE[2];
		float 	fTemp41SE; // step: 182
		float 	fVec42SE[2];
		float 	fTemp42SE; // step: 187
		float 	fVec44SE[2];
		int 	iVec45SI[2];
		float 	fTemp43SI; // step: 199
		float 	fTemp44SI; // step: 202
		float 	fTemp45SI; // step: 210
		float 	fVec48SI[2];
		float 	fTemp46SI; // step: 214
		float 	fVec47SI[4];
		float 	fSlow4BE = (0.001f * powf(1e+01f,(0.05f * float(fslider4)))); // Zone 2, step: 222
		float 	fVec51SE[2];
		float 	fTemp47SE; // step: 229
		float 	fTemp48SE; // step: 231
		int 	iSlow5BE = int(float(fcheckbox0)); // Zone 2, step: 233
		int 	iSlow6BE = int(float(fcheckbox1)); // Zone 2, step: 235
		int 	iSlow7BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 240
		int 	iSlow8BE = (iSlow7BE >= 2); // Zone 2, step: 241
		int 	iSlow9BE = (iSlow7BE >= 1); // Zone 2, step: 242
		float 	fTemp49SC; // step: 246
		float 	fTemp50SE; // step: 253
		int 	iSlow10BE = (iSlow7BE >= 3); // Zone 2, step: 254
		float 	fTemp51SC; // step: 259
		float 	fTemp52SC; // step: 270
		float 	fTemp53SE; // step: 276
		float 	fTemp54SE; // step: 285
		float 	fTemp55SE; // step: 297
		float 	fTemp56SE; // step: 306
		float 	fTemp57SE; // step: 318
		int 	iSlow11BE = int(float(fcheckbox2)); // Zone 2, step: 325
		float 	fTemp58SI; // step: 328
		float 	fTemp59SI; // step: 330
		float 	fTemp60SI; // step: 332
		float 	fVec67SE[2];
		float 	fTemp61SE; // step: 379
		float 	fVec71SE[2];
		float 	fSlow12BE = tanf((fConst5KI * float(fslider5))); // Zone 2, step: 387
		float 	fSlow13BE = (1.0f / fSlow12BE); // Zone 2, step: 388
		float 	fSlow14BE = (1.0f / (fSlow13BE + 1.0f /* Sum */)); // Zone 2, step: 390
		float 	fSlow15BE = (1.0f + -fSlow13BE /* Sum */); // Zone 2, step: 392
		float 	fVec72SE[2];
		float 	fSlow16BE = (1.0f / (((fSlow13BE + 1.0f /* Sum */) / fSlow12BE) + 1.0f /* Sum */)); // Zone 2, step: 410
		float 	fSlow17BE = (((fSlow13BE + -1.0f /* Sum */) / fSlow12BE) + 1.0f /* Sum */); // Zone 2, step: 414
		float 	fTemp62SE; // step: 415
		float 	fSlow18BE = (1.0f / powf(fSlow12BE,2.0f)); // Zone 2, step: 418
		float 	fSlow19BE = (2.0f * (1.0f + -fSlow18BE /* Sum */)); // Zone 2, step: 421
		float 	fVec76SE[2];
		float 	fTemp63SE; // step: 430
		float 	fVec75SE[3];
		float 	fVec79SE[2];
		float 	fTemp64SE; // step: 442
		float 	fVec82SE[2];
		float 	fTemp65SE; // step: 452
		float 	fVec81SE[3];
		float 	fSlow20BE = powf(1e+01f,(0.05f * float(fslider6))); // Zone 2, step: 463
		float 	fTemp66SE; // step: 471
		float 	fSlow21BE = (0.001f * float(fslider7)); // Zone 2, step: 476
		float 	fVec89SE[2];
		float 	fTemp67SE; // step: 485
		float 	fTemp68SE; // step: 487
		float 	fTemp69SE; // step: 488
		float 	fSlow22BE = float(fslider8); // Zone 2, step: 489
		int 	iSlow23BE = (fSlow22BE > 0.0f); // Zone 2, step: 490
		float 	fSlow24BE = float(fslider9); // Zone 2, step: 492
		float 	fSlow25BE = (fConst6KI * (powf(1e+01f,(0.05f * fabsf(fSlow22BE))) / fSlow24BE)); // Zone 2, step: 497
		float 	fTemp70SE; // step: 502
		float 	fTemp71SE; // step: 503
		float 	fSlow26BE = (fConst6KI / fSlow24BE); // Zone 2, step: 504
		float 	fTemp72SE; // step: 505
		float 	fTemp73SE; // step: 506
		float 	fTemp74SE; // step: 517
		float 	fTemp75SE; // step: 523
		float 	fVec91SE[2];
		float 	fTemp76SE; // step: 528
		float 	fVec88SE[3];
		float 	fTemp77SE; // step: 530
		float 	fTemp78SE; // step: 544
		float 	fVec95SE[2];
		float 	fSlow27BE = tanf((fConst5KI * float(fslider10))); // Zone 2, step: 550
		float 	fSlow28BE = (1.0f / fSlow27BE); // Zone 2, step: 551
		float 	fSlow29BE = (1.0f / (fSlow28BE + 1.0f /* Sum */)); // Zone 2, step: 553
		float 	fSlow30BE = (1.0f + -fSlow28BE /* Sum */); // Zone 2, step: 555
		float 	fTemp79SE; // step: 560
		float 	fVec96SE[2];
		float 	fSlow31BE = (1.0f / (((fSlow28BE + 1.0f /* Sum */) / fSlow27BE) + 1.0f /* Sum */)); // Zone 2, step: 570
		float 	fSlow32BE = (((fSlow28BE + -1.0f /* Sum */) / fSlow27BE) + 1.0f /* Sum */); // Zone 2, step: 573
		float 	fTemp80SE; // step: 574
		float 	fSlow33BE = powf(fSlow27BE,2.0f); // Zone 2, step: 576
		float 	fSlow34BE = (2.0f * (1.0f + -(1.0f / fSlow33BE) /* Sum */)); // Zone 2, step: 580
		float 	fVec100SE[2];
		float 	fTemp81SE; // step: 589
		float 	fVec99SE[3];
		float 	fVec102SE[2];
		float 	fTemp82SE; // step: 601
		float 	fVec105SE[2];
		float 	fTemp83SE; // step: 611
		float 	fVec104SE[3];
		float 	fSlow35BE = (powf(1e+01f,(0.05f * float(fslider11))) / fSlow33BE); // Zone 2, step: 618
		float 	fTemp84SE; // step: 625
		float 	fTemp85SE; // step: 640
		float 	fVec112SE[2];
		float 	fTemp86SE; // step: 655
		float 	fVec111SE[3];
		float 	fTemp87SE; // step: 680
		float 	fVec117SE[2];
		float 	fTemp88SE; // step: 692
		float 	fVec116SE[3];
		float 	fTemp89SE; // step: 716
		float 	fVec122SE[2];
		float 	fTemp90SE; // step: 728
		float 	fVec121SE[3];
		float 	fTemp91SE; // step: 739
		float 	fVec125SE[2];
		float 	fTemp92SE; // step: 751
		float 	fVec124SE[3];
		float 	fTemp93SE; // step: 776
		float 	fVec130SE[2];
		float 	fTemp94SE; // step: 788
		float 	fVec129SE[3];
		float 	fTemp95SE; // step: 810
		float 	fVec135SE[2];
		float 	fTemp96SE; // step: 822
		float 	fVec134SE[3];
		float 	fTemp97SE; // step: 833
		float 	fTemp98SE; // step: 845
		float 	fVec140SE[2];
		float 	fTemp99SE; // step: 860
		float 	fVec139SE[3];
		float 	fTemp100SE; // step: 880
		float 	fVec145SE[2];
		float 	fTemp101SE; // step: 892
		float 	fVec144SE[3];
		float 	fTemp102SE; // step: 912
		float 	fVec150SE[2];
		float 	fTemp103SE; // step: 924
		float 	fVec149SE[3];
		float 	fTemp104SE; // step: 932
		float 	fVec153SE[2];
		float 	fTemp105SE; // step: 944
		float 	fVec152SE[3];
		float 	fTemp106SE; // step: 964
		float 	fVec158SE[2];
		float 	fTemp107SE; // step: 976
		float 	fVec157SE[3];
		float 	fTemp108SE; // step: 994
		float 	fVec163SE[2];
		float 	fTemp109SE; // step: 1006
		float 	fVec162SE[3];
		float 	fTemp110SE; // step: 1016
		float 	fTemp111SE; // step: 1028
		float 	fVec168SE[2];
		float 	fTemp112SE; // step: 1043
		float 	fVec167SE[3];
		float 	fTemp113SE; // step: 1063
		float 	fVec173SE[2];
		float 	fTemp114SE; // step: 1075
		float 	fVec172SE[3];
		float 	fTemp115SE; // step: 1095
		float 	fVec178SE[2];
		float 	fTemp116SE; // step: 1107
		float 	fVec177SE[3];
		float 	fTemp117SE; // step: 1115
		float 	fVec181SE[2];
		float 	fTemp118SE; // step: 1127
		float 	fVec180SE[3];
		float 	fTemp119SE; // step: 1147
		float 	fVec186SE[2];
		float 	fTemp120SE; // step: 1159
		float 	fVec185SE[3];
		float 	fTemp121SE; // step: 1177
		float 	fVec191SE[2];
		float 	fTemp122SE; // step: 1189
		float 	fVec190SE[3];
		float 	fTemp123SE; // step: 1199
		float 	fTemp124SE; // step: 1211
		float 	fVec196SE[2];
		float 	fTemp125SE; // step: 1226
		float 	fVec195SE[3];
		float 	fTemp126SE; // step: 1246
		float 	fVec201SE[2];
		float 	fTemp127SE; // step: 1258
		float 	fVec200SE[3];
		float 	fTemp128SE; // step: 1278
		float 	fVec206SE[2];
		float 	fTemp129SE; // step: 1290
		float 	fVec205SE[3];
		float 	fTemp130SE; // step: 1298
		float 	fVec209SE[2];
		float 	fTemp131SE; // step: 1310
		float 	fVec208SE[3];
		float 	fTemp132SE; // step: 1330
		float 	fVec214SE[2];
		float 	fTemp133SE; // step: 1342
		float 	fVec213SE[3];
		float 	fTemp134SE; // step: 1360
		float 	fVec219SE[2];
		float 	fTemp135SE; // step: 1372
		float 	fVec218SE[3];
		float 	fTemp136SE; // step: 1382
		float 	fTemp137SE; // step: 1394
		float 	fVec224SE[2];
		float 	fTemp138SE; // step: 1409
		float 	fVec223SE[3];
		float 	fTemp139SE; // step: 1429
		float 	fVec229SE[2];
		float 	fTemp140SE; // step: 1441
		float 	fVec228SE[3];
		float 	fTemp141SE; // step: 1461
		float 	fVec234SE[2];
		float 	fTemp142SE; // step: 1473
		float 	fVec233SE[3];
		float 	fTemp143SE; // step: 1481
		float 	fVec237SE[2];
		float 	fTemp144SE; // step: 1493
		float 	fVec236SE[3];
		float 	fTemp145SE; // step: 1513
		float 	fVec242SE[2];
		float 	fTemp146SE; // step: 1525
		float 	fVec241SE[3];
		float 	fTemp147SE; // step: 1543
		float 	fVec247SE[2];
		float 	fTemp148SE; // step: 1555
		float 	fVec246SE[3];
		float 	fTemp149SE; // step: 1565
		float 	fTemp150SE; // step: 1577
		float 	fVec252SE[2];
		float 	fTemp151SE; // step: 1592
		float 	fVec251SE[3];
		float 	fTemp152SE; // step: 1612
		float 	fVec257SE[2];
		float 	fTemp153SE; // step: 1624
		float 	fVec256SE[3];
		float 	fTemp154SE; // step: 1644
		float 	fVec262SE[2];
		float 	fTemp155SE; // step: 1656
		float 	fVec261SE[3];
		float 	fTemp156SE; // step: 1664
		float 	fVec265SE[2];
		float 	fTemp157SE; // step: 1676
		float 	fVec264SE[3];
		float 	fTemp158SE; // step: 1696
		float 	fVec270SE[2];
		float 	fTemp159SE; // step: 1708
		float 	fVec269SE[3];
		float 	fTemp160SE; // step: 1726
		float 	fVec275SE[2];
		float 	fTemp161SE; // step: 1738
		float 	fVec274SE[3];
		float 	fTemp162SE; // step: 1748
		float 	fTemp163SE; // step: 1760
		float 	fVec280SE[2];
		float 	fTemp164SE; // step: 1775
		float 	fVec279SE[3];
		float 	fTemp165SE; // step: 1795
		float 	fVec285SE[2];
		float 	fTemp166SE; // step: 1807
		float 	fVec284SE[3];
		float 	fTemp167SE; // step: 1827
		float 	fVec290SE[2];
		float 	fTemp168SE; // step: 1839
		float 	fVec289SE[3];
		float 	fTemp169SE; // step: 1847
		float 	fVec293SE[2];
		float 	fTemp170SE; // step: 1859
		float 	fVec292SE[3];
		float 	fTemp171SE; // step: 1879
		float 	fVec298SE[2];
		float 	fTemp172SE; // step: 1891
		float 	fVec297SE[3];
		float 	fTemp173SE; // step: 1909
		float 	fVec303SE[2];
		float 	fTemp174SE; // step: 1921
		float 	fVec302SE[3];
		float 	fTemp175SE; // step: 1931
		float 	fTemp176SE; // step: 1943
		float 	fVec308SE[2];
		float 	fTemp177SE; // step: 1958
		float 	fVec307SE[3];
		float 	fTemp178SE; // step: 1978
		float 	fVec313SE[2];
		float 	fTemp179SE; // step: 1990
		float 	fVec312SE[3];
		float 	fTemp180SE; // step: 2010
		float 	fVec318SE[2];
		float 	fTemp181SE; // step: 2022
		float 	fVec317SE[3];
		float 	fTemp182SE; // step: 2030
		float 	fVec321SE[2];
		float 	fTemp183SE; // step: 2042
		float 	fVec320SE[3];
		float 	fTemp184SE; // step: 2062
		float 	fVec326SE[2];
		float 	fTemp185SE; // step: 2074
		float 	fVec325SE[3];
		float 	fTemp186SE; // step: 2092
		float 	fVec331SE[2];
		float 	fTemp187SE; // step: 2104
		float 	fVec330SE[3];
		float 	fTemp188SE; // step: 2114
		float 	fTemp189SE; // step: 2126
		float 	fVec336SE[2];
		float 	fTemp190SE; // step: 2141
		float 	fVec335SE[3];
		float 	fTemp191SE; // step: 2161
		float 	fVec341SE[2];
		float 	fTemp192SE; // step: 2173
		float 	fVec340SE[3];
		float 	fTemp193SE; // step: 2193
		float 	fVec346SE[2];
		float 	fTemp194SE; // step: 2205
		float 	fVec345SE[3];
		float 	fTemp195SE; // step: 2213
		float 	fVec349SE[2];
		float 	fTemp196SE; // step: 2225
		float 	fVec348SE[3];
		float 	fTemp197SE; // step: 2245
		float 	fVec354SE[2];
		float 	fTemp198SE; // step: 2257
		float 	fVec353SE[3];
		float 	fTemp199SE; // step: 2275
		float 	fVec359SE[2];
		float 	fTemp200SE; // step: 2287
		float 	fVec358SE[3];
		float 	fTemp201SE; // step: 2297
		float 	fTemp202SE; // step: 2309
		float 	fVec364SE[2];
		float 	fTemp203SE; // step: 2324
		float 	fVec363SE[3];
		float 	fTemp204SE; // step: 2344
		float 	fVec369SE[2];
		float 	fTemp205SE; // step: 2356
		float 	fVec368SE[3];
		float 	fTemp206SE; // step: 2376
		float 	fVec374SE[2];
		float 	fTemp207SE; // step: 2388
		float 	fVec373SE[3];
		float 	fTemp208SE; // step: 2396
		float 	fVec377SE[2];
		float 	fTemp209SE; // step: 2408
		float 	fVec376SE[3];
		float 	fTemp210SE; // step: 2428
		float 	fVec382SE[2];
		float 	fTemp211SE; // step: 2440
		float 	fVec381SE[3];
		float 	fTemp212SE; // step: 2458
		float 	fVec387SE[2];
		float 	fTemp213SE; // step: 2470
		float 	fVec386SE[3];
		float 	fTemp214SE; // step: 2480
		float 	fTemp215SE; // step: 2492
		float 	fVec392SE[2];
		float 	fTemp216SE; // step: 2507
		float 	fVec391SE[3];
		float 	fTemp217SE; // step: 2527
		float 	fVec397SE[2];
		float 	fTemp218SE; // step: 2539
		float 	fVec396SE[3];
		float 	fTemp219SE; // step: 2559
		float 	fVec402SE[2];
		float 	fTemp220SE; // step: 2571
		float 	fVec401SE[3];
		float 	fTemp221SE; // step: 2579
		float 	fVec405SE[2];
		float 	fTemp222SE; // step: 2591
		float 	fVec404SE[3];
		float 	fTemp223SE; // step: 2611
		float 	fVec410SE[2];
		float 	fTemp224SE; // step: 2623
		float 	fVec409SE[3];
		float 	fTemp225SE; // step: 2641
		float 	fVec415SE[2];
		float 	fTemp226SE; // step: 2653
		float 	fVec414SE[3];
		float 	fTemp227SE; // step: 2663
		float 	fTemp228SE; // step: 2675
		float 	fVec420SE[2];
		float 	fTemp229SE; // step: 2690
		float 	fVec419SE[3];
		float 	fTemp230SE; // step: 2710
		float 	fVec425SE[2];
		float 	fTemp231SE; // step: 2722
		float 	fVec424SE[3];
		float 	fTemp232SE; // step: 2742
		float 	fVec430SE[2];
		float 	fTemp233SE; // step: 2754
		float 	fVec429SE[3];
		float 	fTemp234SE; // step: 2762
		float 	fVec433SE[2];
		float 	fTemp235SE; // step: 2774
		float 	fVec432SE[3];
		float 	fTemp236SE; // step: 2794
		float 	fVec438SE[2];
		float 	fTemp237SE; // step: 2806
		float 	fVec437SE[3];
		float 	fTemp238SE; // step: 2824
		float 	fVec443SE[2];
		float 	fTemp239SE; // step: 2836
		float 	fVec442SE[3];
		float 	fTemp240SE; // step: 2846
		float 	fTemp241SE; // step: 2858
		float 	fVec448SE[2];
		float 	fTemp242SE; // step: 2873
		float 	fVec447SE[3];
		float 	fTemp243SE; // step: 2893
		float 	fVec453SE[2];
		float 	fTemp244SE; // step: 2905
		float 	fVec452SE[3];
		float 	fTemp245SE; // step: 2925
		float 	fVec458SE[2];
		float 	fTemp246SE; // step: 2937
		float 	fVec457SE[3];
		float 	fTemp247SE; // step: 2945
		float 	fVec461SE[2];
		float 	fTemp248SE; // step: 2957
		float 	fVec460SE[3];
		float 	fTemp249SE; // step: 2977
		float 	fVec466SE[2];
		float 	fTemp250SE; // step: 2989
		float 	fVec465SE[3];
		float 	fTemp251SE; // step: 3007
		float 	fVec471SE[2];
		float 	fTemp252SE; // step: 3019
		float 	fVec470SE[3];
		float 	fTemp253SE; // step: 3029
		float 	fTemp254SE; // step: 3041
		float 	fVec476SE[2];
		float 	fTemp255SE; // step: 3056
		float 	fVec475SE[3];
		float 	fTemp256SE; // step: 3076
		float 	fVec481SE[2];
		float 	fTemp257SE; // step: 3088
		float 	fVec480SE[3];
		float 	fTemp258SE; // step: 3108
		float 	fVec486SE[2];
		float 	fTemp259SE; // step: 3120
		float 	fVec485SE[3];
		float 	fTemp260SE; // step: 3128
		float 	fVec489SE[2];
		float 	fTemp261SE; // step: 3140
		float 	fVec488SE[3];
		float 	fTemp262SE; // step: 3160
		float 	fVec494SE[2];
		float 	fTemp263SE; // step: 3172
		float 	fVec493SE[3];
		float 	fTemp264SE; // step: 3190
		float 	fVec499SE[2];
		float 	fTemp265SE; // step: 3202
		float 	fVec498SE[3];
		float 	fTemp266SE; // step: 3212
		float 	fTemp267SE; // step: 3224
		float 	fVec504SE[2];
		float 	fTemp268SE; // step: 3239
		float 	fVec503SE[3];
		float 	fTemp269SE; // step: 3259
		float 	fVec509SE[2];
		float 	fTemp270SE; // step: 3271
		float 	fVec508SE[3];
		float 	fTemp271SE; // step: 3291
		float 	fVec514SE[2];
		float 	fTemp272SE; // step: 3303
		float 	fVec513SE[3];
		float 	fTemp273SE; // step: 3311
		float 	fVec517SE[2];
		float 	fTemp274SE; // step: 3323
		float 	fVec516SE[3];
		float 	fTemp275SE; // step: 3343
		float 	fVec522SE[2];
		float 	fTemp276SE; // step: 3355
		float 	fVec521SE[3];
		float 	fTemp277SE; // step: 3373
		float 	fVec527SE[2];
		float 	fTemp278SE; // step: 3385
		float 	fVec526SE[3];
		float 	fTemp279SE; // step: 3395
		float 	fTemp280SE; // step: 3407
		float 	fVec532SE[2];
		float 	fTemp281SE; // step: 3422
		float 	fVec531SE[3];
		float 	fTemp282SE; // step: 3442
		float 	fVec537SE[2];
		float 	fTemp283SE; // step: 3454
		float 	fVec536SE[3];
		float 	fTemp284SE; // step: 3474
		float 	fVec542SE[2];
		float 	fTemp285SE; // step: 3486
		float 	fVec541SE[3];
		float 	fTemp286SE; // step: 3494
		float 	fVec545SE[2];
		float 	fTemp287SE; // step: 3506
		float 	fVec544SE[3];
		float 	fTemp288SE; // step: 3526
		float 	fVec550SE[2];
		float 	fTemp289SE; // step: 3538
		float 	fVec549SE[3];
		float 	fTemp290SE; // step: 3556
		float 	fVec555SE[2];
		float 	fTemp291SE; // step: 3568
		float 	fVec554SE[3];
		float 	fTemp292SE; // step: 3578
		float 	fTemp293SE; // step: 3590
		float 	fVec560SE[2];
		float 	fTemp294SE; // step: 3605
		float 	fVec559SE[3];
		float 	fTemp295SE; // step: 3625
		float 	fVec565SE[2];
		float 	fTemp296SE; // step: 3637
		float 	fVec564SE[3];
		float 	fTemp297SE; // step: 3657
		float 	fVec570SE[2];
		float 	fTemp298SE; // step: 3669
		float 	fVec569SE[3];
		float 	fTemp299SE; // step: 3677
		float 	fVec573SE[2];
		float 	fTemp300SE; // step: 3689
		float 	fVec572SE[3];
		float 	fTemp301SE; // step: 3709
		float 	fVec578SE[2];
		float 	fTemp302SE; // step: 3721
		float 	fVec577SE[3];
		float 	fTemp303SE; // step: 3739
		float 	fVec583SE[2];
		float 	fTemp304SE; // step: 3751
		float 	fVec582SE[3];
		float 	fTemp305SE; // step: 3761
		float 	fTemp306SE; // step: 3773
		float 	fVec588SE[2];
		float 	fTemp307SE; // step: 3788
		float 	fVec587SE[3];
		float 	fTemp308SE; // step: 3808
		float 	fVec593SE[2];
		float 	fTemp309SE; // step: 3820
		float 	fVec592SE[3];
		float 	fTemp310SE; // step: 3840
		float 	fVec598SE[2];
		float 	fTemp311SE; // step: 3852
		float 	fVec597SE[3];
		float 	fTemp312SE; // step: 3860
		float 	fVec601SE[2];
		float 	fTemp313SE; // step: 3872
		float 	fVec600SE[3];
		float 	fTemp314SE; // step: 3892
		float 	fVec606SE[2];
		float 	fTemp315SE; // step: 3904
		float 	fVec605SE[3];
		float 	fTemp316SE; // step: 3922
		float 	fVec611SE[2];
		float 	fTemp317SE; // step: 3934
		float 	fVec610SE[3];
		float 	fTemp318SE; // step: 3944
		float 	fTemp319SE; // step: 3956
		float 	fVec616SE[2];
		float 	fTemp320SE; // step: 3971
		float 	fVec615SE[3];
		float 	fTemp321SE; // step: 3991
		float 	fVec621SE[2];
		float 	fTemp322SE; // step: 4003
		float 	fVec620SE[3];
		float 	fTemp323SE; // step: 4023
		float 	fVec626SE[2];
		float 	fTemp324SE; // step: 4035
		float 	fVec625SE[3];
		float 	fTemp325SE; // step: 4043
		float 	fVec629SE[2];
		float 	fTemp326SE; // step: 4055
		float 	fVec628SE[3];
		float 	fTemp327SE; // step: 4075
		float 	fVec634SE[2];
		float 	fTemp328SE; // step: 4087
		float 	fVec633SE[3];
		float 	fTemp329SE; // step: 4105
		float 	fVec639SE[2];
		float 	fTemp330SE; // step: 4117
		float 	fVec638SE[3];
		float 	fSlow36BE = float(fslider12); // Zone 2, step: 4120
		float 	fSlow37BE = (fConst671KI / float(fslider13)); // Zone 2, step: 4123
		float 	fSlow38BE = ((1) ? expf(-fSlow37BE) : 0.0f); // Zone 2, step: 4126
		float 	fSlow39BE = (1.0f + -(expf(-fSlow37BE)) /* Sum */); // Zone 2, step: 4147
		float 	fVec641SE[2];
		float 	fSlow40SE;
		float 	fVec645SE[2];
		float 	fSlow41SE;
		float 	fVec649SE[2];
		float 	fSlow42SE;
		float 	fVec653SE[2];
		float 	fSlow43SE;
		float 	fVec657SE[2];
		float 	fSlow44SE;
		float 	fVec661SE[2];
		float 	fSlow45SE;
		float 	fVec665SE[2];
		float 	fSlow46SE;
		float 	fVec669SE[2];
		float 	fSlow47SE;
		float 	fVec673SE[2];
		float 	fSlow48SE;
		float 	fVec677SE[2];
		float 	fSlow49SE;
		float 	fVec681SE[2];
		float 	fSlow50SE;
		float 	fVec685SE[2];
		float 	fSlow51SE;
		float 	fVec689SE[2];
		float 	fSlow52SE;
		float 	fVec693SE[2];
		float 	fSlow53SE;
		float 	fVec697SE[2];
		float 	fSlow54SE;
		float 	fVec701SE[2];
		float 	fSlow55SE;
		float 	fVec705SE[2];
		float 	fSlow56SE;
		float 	fVec709SE[2];
		float 	fSlow57SE;
		float 	fVec713SE[2];
		float 	fSlow58SE;
		float 	fVec717SE[2];
		float 	fSlow59SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec11SE[1] = fVec11SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec16SE[1] = fVec16SEState;
		fVec17SE[1] = fVec17SEState;
		fVec19SE[1] = fVec19SEState;
		fVec20SE[1] = fVec20SEState;
		fVec21SE[1] = fVec21SEState;
		fVec23SE[1] = fVec23SEState;
		fVec25SE[1] = fVec25SEState;
		fVec26SE[1] = fVec26SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec33SE[1] = fVec33SEState;
		fVec34SE[1] = fVec34SEState;
		fVec35SE[1] = fVec35SEState;
		fVec37SE[1] = fVec37SEState;
		fVec39SE[1] = fVec39SEState;
		fVec40SE[1] = fVec40SEState;
		fVec42SE[1] = fVec42SEState;
		fVec44SE[1] = fVec44SEState;
		iVec45SI[1] = iVec45SIState;
		fVec48SI[1] = fVec48SIState;
		fVec47SI[1] = fVec47SIState[0];
		fVec47SI[2] = fVec47SIState[1];
		fVec47SI[3] = fVec47SIState[2];
		fVec51SE[1] = fVec51SEState;
		fVec67SE[1] = fVec67SEState;
		fVec71SE[1] = fVec71SEState;
		fVec72SE[1] = fVec72SEState;
		fVec76SE[1] = fVec76SEState;
		fVec75SE[1] = fVec75SEState[0];
		fVec75SE[2] = fVec75SEState[1];
		fVec79SE[1] = fVec79SEState;
		fVec82SE[1] = fVec82SEState;
		fVec81SE[1] = fVec81SEState[0];
		fVec81SE[2] = fVec81SEState[1];
		fVec89SE[1] = fVec89SEState;
		fVec91SE[1] = fVec91SEState;
		fVec88SE[1] = fVec88SEState[0];
		fVec88SE[2] = fVec88SEState[1];
		fVec95SE[1] = fVec95SEState;
		fVec96SE[1] = fVec96SEState;
		fVec100SE[1] = fVec100SEState;
		fVec99SE[1] = fVec99SEState[0];
		fVec99SE[2] = fVec99SEState[1];
		fVec102SE[1] = fVec102SEState;
		fVec105SE[1] = fVec105SEState;
		fVec104SE[1] = fVec104SEState[0];
		fVec104SE[2] = fVec104SEState[1];
		fVec112SE[1] = fVec112SEState;
		fVec111SE[1] = fVec111SEState[0];
		fVec111SE[2] = fVec111SEState[1];
		fVec117SE[1] = fVec117SEState;
		fVec116SE[1] = fVec116SEState[0];
		fVec116SE[2] = fVec116SEState[1];
		fVec122SE[1] = fVec122SEState;
		fVec121SE[1] = fVec121SEState[0];
		fVec121SE[2] = fVec121SEState[1];
		fVec125SE[1] = fVec125SEState;
		fVec124SE[1] = fVec124SEState[0];
		fVec124SE[2] = fVec124SEState[1];
		fVec130SE[1] = fVec130SEState;
		fVec129SE[1] = fVec129SEState[0];
		fVec129SE[2] = fVec129SEState[1];
		fVec135SE[1] = fVec135SEState;
		fVec134SE[1] = fVec134SEState[0];
		fVec134SE[2] = fVec134SEState[1];
		fVec140SE[1] = fVec140SEState;
		fVec139SE[1] = fVec139SEState[0];
		fVec139SE[2] = fVec139SEState[1];
		fVec145SE[1] = fVec145SEState;
		fVec144SE[1] = fVec144SEState[0];
		fVec144SE[2] = fVec144SEState[1];
		fVec150SE[1] = fVec150SEState;
		fVec149SE[1] = fVec149SEState[0];
		fVec149SE[2] = fVec149SEState[1];
		fVec153SE[1] = fVec153SEState;
		fVec152SE[1] = fVec152SEState[0];
		fVec152SE[2] = fVec152SEState[1];
		fVec158SE[1] = fVec158SEState;
		fVec157SE[1] = fVec157SEState[0];
		fVec157SE[2] = fVec157SEState[1];
		fVec163SE[1] = fVec163SEState;
		fVec162SE[1] = fVec162SEState[0];
		fVec162SE[2] = fVec162SEState[1];
		fVec168SE[1] = fVec168SEState;
		fVec167SE[1] = fVec167SEState[0];
		fVec167SE[2] = fVec167SEState[1];
		fVec173SE[1] = fVec173SEState;
		fVec172SE[1] = fVec172SEState[0];
		fVec172SE[2] = fVec172SEState[1];
		fVec178SE[1] = fVec178SEState;
		fVec177SE[1] = fVec177SEState[0];
		fVec177SE[2] = fVec177SEState[1];
		fVec181SE[1] = fVec181SEState;
		fVec180SE[1] = fVec180SEState[0];
		fVec180SE[2] = fVec180SEState[1];
		fVec186SE[1] = fVec186SEState;
		fVec185SE[1] = fVec185SEState[0];
		fVec185SE[2] = fVec185SEState[1];
		fVec191SE[1] = fVec191SEState;
		fVec190SE[1] = fVec190SEState[0];
		fVec190SE[2] = fVec190SEState[1];
		fVec196SE[1] = fVec196SEState;
		fVec195SE[1] = fVec195SEState[0];
		fVec195SE[2] = fVec195SEState[1];
		fVec201SE[1] = fVec201SEState;
		fVec200SE[1] = fVec200SEState[0];
		fVec200SE[2] = fVec200SEState[1];
		fVec206SE[1] = fVec206SEState;
		fVec205SE[1] = fVec205SEState[0];
		fVec205SE[2] = fVec205SEState[1];
		fVec209SE[1] = fVec209SEState;
		fVec208SE[1] = fVec208SEState[0];
		fVec208SE[2] = fVec208SEState[1];
		fVec214SE[1] = fVec214SEState;
		fVec213SE[1] = fVec213SEState[0];
		fVec213SE[2] = fVec213SEState[1];
		fVec219SE[1] = fVec219SEState;
		fVec218SE[1] = fVec218SEState[0];
		fVec218SE[2] = fVec218SEState[1];
		fVec224SE[1] = fVec224SEState;
		fVec223SE[1] = fVec223SEState[0];
		fVec223SE[2] = fVec223SEState[1];
		fVec229SE[1] = fVec229SEState;
		fVec228SE[1] = fVec228SEState[0];
		fVec228SE[2] = fVec228SEState[1];
		fVec234SE[1] = fVec234SEState;
		fVec233SE[1] = fVec233SEState[0];
		fVec233SE[2] = fVec233SEState[1];
		fVec237SE[1] = fVec237SEState;
		fVec236SE[1] = fVec236SEState[0];
		fVec236SE[2] = fVec236SEState[1];
		fVec242SE[1] = fVec242SEState;
		fVec241SE[1] = fVec241SEState[0];
		fVec241SE[2] = fVec241SEState[1];
		fVec247SE[1] = fVec247SEState;
		fVec246SE[1] = fVec246SEState[0];
		fVec246SE[2] = fVec246SEState[1];
		fVec252SE[1] = fVec252SEState;
		fVec251SE[1] = fVec251SEState[0];
		fVec251SE[2] = fVec251SEState[1];
		fVec257SE[1] = fVec257SEState;
		fVec256SE[1] = fVec256SEState[0];
		fVec256SE[2] = fVec256SEState[1];
		fVec262SE[1] = fVec262SEState;
		fVec261SE[1] = fVec261SEState[0];
		fVec261SE[2] = fVec261SEState[1];
		fVec265SE[1] = fVec265SEState;
		fVec264SE[1] = fVec264SEState[0];
		fVec264SE[2] = fVec264SEState[1];
		fVec270SE[1] = fVec270SEState;
		fVec269SE[1] = fVec269SEState[0];
		fVec269SE[2] = fVec269SEState[1];
		fVec275SE[1] = fVec275SEState;
		fVec274SE[1] = fVec274SEState[0];
		fVec274SE[2] = fVec274SEState[1];
		fVec280SE[1] = fVec280SEState;
		fVec279SE[1] = fVec279SEState[0];
		fVec279SE[2] = fVec279SEState[1];
		fVec285SE[1] = fVec285SEState;
		fVec284SE[1] = fVec284SEState[0];
		fVec284SE[2] = fVec284SEState[1];
		fVec290SE[1] = fVec290SEState;
		fVec289SE[1] = fVec289SEState[0];
		fVec289SE[2] = fVec289SEState[1];
		fVec293SE[1] = fVec293SEState;
		fVec292SE[1] = fVec292SEState[0];
		fVec292SE[2] = fVec292SEState[1];
		fVec298SE[1] = fVec298SEState;
		fVec297SE[1] = fVec297SEState[0];
		fVec297SE[2] = fVec297SEState[1];
		fVec303SE[1] = fVec303SEState;
		fVec302SE[1] = fVec302SEState[0];
		fVec302SE[2] = fVec302SEState[1];
		fVec308SE[1] = fVec308SEState;
		fVec307SE[1] = fVec307SEState[0];
		fVec307SE[2] = fVec307SEState[1];
		fVec313SE[1] = fVec313SEState;
		fVec312SE[1] = fVec312SEState[0];
		fVec312SE[2] = fVec312SEState[1];
		fVec318SE[1] = fVec318SEState;
		fVec317SE[1] = fVec317SEState[0];
		fVec317SE[2] = fVec317SEState[1];
		fVec321SE[1] = fVec321SEState;
		fVec320SE[1] = fVec320SEState[0];
		fVec320SE[2] = fVec320SEState[1];
		fVec326SE[1] = fVec326SEState;
		fVec325SE[1] = fVec325SEState[0];
		fVec325SE[2] = fVec325SEState[1];
		fVec331SE[1] = fVec331SEState;
		fVec330SE[1] = fVec330SEState[0];
		fVec330SE[2] = fVec330SEState[1];
		fVec336SE[1] = fVec336SEState;
		fVec335SE[1] = fVec335SEState[0];
		fVec335SE[2] = fVec335SEState[1];
		fVec341SE[1] = fVec341SEState;
		fVec340SE[1] = fVec340SEState[0];
		fVec340SE[2] = fVec340SEState[1];
		fVec346SE[1] = fVec346SEState;
		fVec345SE[1] = fVec345SEState[0];
		fVec345SE[2] = fVec345SEState[1];
		fVec349SE[1] = fVec349SEState;
		fVec348SE[1] = fVec348SEState[0];
		fVec348SE[2] = fVec348SEState[1];
		fVec354SE[1] = fVec354SEState;
		fVec353SE[1] = fVec353SEState[0];
		fVec353SE[2] = fVec353SEState[1];
		fVec359SE[1] = fVec359SEState;
		fVec358SE[1] = fVec358SEState[0];
		fVec358SE[2] = fVec358SEState[1];
		fVec364SE[1] = fVec364SEState;
		fVec363SE[1] = fVec363SEState[0];
		fVec363SE[2] = fVec363SEState[1];
		fVec369SE[1] = fVec369SEState;
		fVec368SE[1] = fVec368SEState[0];
		fVec368SE[2] = fVec368SEState[1];
		fVec374SE[1] = fVec374SEState;
		fVec373SE[1] = fVec373SEState[0];
		fVec373SE[2] = fVec373SEState[1];
		fVec377SE[1] = fVec377SEState;
		fVec376SE[1] = fVec376SEState[0];
		fVec376SE[2] = fVec376SEState[1];
		fVec382SE[1] = fVec382SEState;
		fVec381SE[1] = fVec381SEState[0];
		fVec381SE[2] = fVec381SEState[1];
		fVec387SE[1] = fVec387SEState;
		fVec386SE[1] = fVec386SEState[0];
		fVec386SE[2] = fVec386SEState[1];
		fVec392SE[1] = fVec392SEState;
		fVec391SE[1] = fVec391SEState[0];
		fVec391SE[2] = fVec391SEState[1];
		fVec397SE[1] = fVec397SEState;
		fVec396SE[1] = fVec396SEState[0];
		fVec396SE[2] = fVec396SEState[1];
		fVec402SE[1] = fVec402SEState;
		fVec401SE[1] = fVec401SEState[0];
		fVec401SE[2] = fVec401SEState[1];
		fVec405SE[1] = fVec405SEState;
		fVec404SE[1] = fVec404SEState[0];
		fVec404SE[2] = fVec404SEState[1];
		fVec410SE[1] = fVec410SEState;
		fVec409SE[1] = fVec409SEState[0];
		fVec409SE[2] = fVec409SEState[1];
		fVec415SE[1] = fVec415SEState;
		fVec414SE[1] = fVec414SEState[0];
		fVec414SE[2] = fVec414SEState[1];
		fVec420SE[1] = fVec420SEState;
		fVec419SE[1] = fVec419SEState[0];
		fVec419SE[2] = fVec419SEState[1];
		fVec425SE[1] = fVec425SEState;
		fVec424SE[1] = fVec424SEState[0];
		fVec424SE[2] = fVec424SEState[1];
		fVec430SE[1] = fVec430SEState;
		fVec429SE[1] = fVec429SEState[0];
		fVec429SE[2] = fVec429SEState[1];
		fVec433SE[1] = fVec433SEState;
		fVec432SE[1] = fVec432SEState[0];
		fVec432SE[2] = fVec432SEState[1];
		fVec438SE[1] = fVec438SEState;
		fVec437SE[1] = fVec437SEState[0];
		fVec437SE[2] = fVec437SEState[1];
		fVec443SE[1] = fVec443SEState;
		fVec442SE[1] = fVec442SEState[0];
		fVec442SE[2] = fVec442SEState[1];
		fVec448SE[1] = fVec448SEState;
		fVec447SE[1] = fVec447SEState[0];
		fVec447SE[2] = fVec447SEState[1];
		fVec453SE[1] = fVec453SEState;
		fVec452SE[1] = fVec452SEState[0];
		fVec452SE[2] = fVec452SEState[1];
		fVec458SE[1] = fVec458SEState;
		fVec457SE[1] = fVec457SEState[0];
		fVec457SE[2] = fVec457SEState[1];
		fVec461SE[1] = fVec461SEState;
		fVec460SE[1] = fVec460SEState[0];
		fVec460SE[2] = fVec460SEState[1];
		fVec466SE[1] = fVec466SEState;
		fVec465SE[1] = fVec465SEState[0];
		fVec465SE[2] = fVec465SEState[1];
		fVec471SE[1] = fVec471SEState;
		fVec470SE[1] = fVec470SEState[0];
		fVec470SE[2] = fVec470SEState[1];
		fVec476SE[1] = fVec476SEState;
		fVec475SE[1] = fVec475SEState[0];
		fVec475SE[2] = fVec475SEState[1];
		fVec481SE[1] = fVec481SEState;
		fVec480SE[1] = fVec480SEState[0];
		fVec480SE[2] = fVec480SEState[1];
		fVec486SE[1] = fVec486SEState;
		fVec485SE[1] = fVec485SEState[0];
		fVec485SE[2] = fVec485SEState[1];
		fVec489SE[1] = fVec489SEState;
		fVec488SE[1] = fVec488SEState[0];
		fVec488SE[2] = fVec488SEState[1];
		fVec494SE[1] = fVec494SEState;
		fVec493SE[1] = fVec493SEState[0];
		fVec493SE[2] = fVec493SEState[1];
		fVec499SE[1] = fVec499SEState;
		fVec498SE[1] = fVec498SEState[0];
		fVec498SE[2] = fVec498SEState[1];
		fVec504SE[1] = fVec504SEState;
		fVec503SE[1] = fVec503SEState[0];
		fVec503SE[2] = fVec503SEState[1];
		fVec509SE[1] = fVec509SEState;
		fVec508SE[1] = fVec508SEState[0];
		fVec508SE[2] = fVec508SEState[1];
		fVec514SE[1] = fVec514SEState;
		fVec513SE[1] = fVec513SEState[0];
		fVec513SE[2] = fVec513SEState[1];
		fVec517SE[1] = fVec517SEState;
		fVec516SE[1] = fVec516SEState[0];
		fVec516SE[2] = fVec516SEState[1];
		fVec522SE[1] = fVec522SEState;
		fVec521SE[1] = fVec521SEState[0];
		fVec521SE[2] = fVec521SEState[1];
		fVec527SE[1] = fVec527SEState;
		fVec526SE[1] = fVec526SEState[0];
		fVec526SE[2] = fVec526SEState[1];
		fVec532SE[1] = fVec532SEState;
		fVec531SE[1] = fVec531SEState[0];
		fVec531SE[2] = fVec531SEState[1];
		fVec537SE[1] = fVec537SEState;
		fVec536SE[1] = fVec536SEState[0];
		fVec536SE[2] = fVec536SEState[1];
		fVec542SE[1] = fVec542SEState;
		fVec541SE[1] = fVec541SEState[0];
		fVec541SE[2] = fVec541SEState[1];
		fVec545SE[1] = fVec545SEState;
		fVec544SE[1] = fVec544SEState[0];
		fVec544SE[2] = fVec544SEState[1];
		fVec550SE[1] = fVec550SEState;
		fVec549SE[1] = fVec549SEState[0];
		fVec549SE[2] = fVec549SEState[1];
		fVec555SE[1] = fVec555SEState;
		fVec554SE[1] = fVec554SEState[0];
		fVec554SE[2] = fVec554SEState[1];
		fVec560SE[1] = fVec560SEState;
		fVec559SE[1] = fVec559SEState[0];
		fVec559SE[2] = fVec559SEState[1];
		fVec565SE[1] = fVec565SEState;
		fVec564SE[1] = fVec564SEState[0];
		fVec564SE[2] = fVec564SEState[1];
		fVec570SE[1] = fVec570SEState;
		fVec569SE[1] = fVec569SEState[0];
		fVec569SE[2] = fVec569SEState[1];
		fVec573SE[1] = fVec573SEState;
		fVec572SE[1] = fVec572SEState[0];
		fVec572SE[2] = fVec572SEState[1];
		fVec578SE[1] = fVec578SEState;
		fVec577SE[1] = fVec577SEState[0];
		fVec577SE[2] = fVec577SEState[1];
		fVec583SE[1] = fVec583SEState;
		fVec582SE[1] = fVec582SEState[0];
		fVec582SE[2] = fVec582SEState[1];
		fVec588SE[1] = fVec588SEState;
		fVec587SE[1] = fVec587SEState[0];
		fVec587SE[2] = fVec587SEState[1];
		fVec593SE[1] = fVec593SEState;
		fVec592SE[1] = fVec592SEState[0];
		fVec592SE[2] = fVec592SEState[1];
		fVec598SE[1] = fVec598SEState;
		fVec597SE[1] = fVec597SEState[0];
		fVec597SE[2] = fVec597SEState[1];
		fVec601SE[1] = fVec601SEState;
		fVec600SE[1] = fVec600SEState[0];
		fVec600SE[2] = fVec600SEState[1];
		fVec606SE[1] = fVec606SEState;
		fVec605SE[1] = fVec605SEState[0];
		fVec605SE[2] = fVec605SEState[1];
		fVec611SE[1] = fVec611SEState;
		fVec610SE[1] = fVec610SEState[0];
		fVec610SE[2] = fVec610SEState[1];
		fVec616SE[1] = fVec616SEState;
		fVec615SE[1] = fVec615SEState[0];
		fVec615SE[2] = fVec615SEState[1];
		fVec621SE[1] = fVec621SEState;
		fVec620SE[1] = fVec620SEState[0];
		fVec620SE[2] = fVec620SEState[1];
		fVec626SE[1] = fVec626SEState;
		fVec625SE[1] = fVec625SEState[0];
		fVec625SE[2] = fVec625SEState[1];
		fVec629SE[1] = fVec629SEState;
		fVec628SE[1] = fVec628SEState[0];
		fVec628SE[2] = fVec628SEState[1];
		fVec634SE[1] = fVec634SEState;
		fVec633SE[1] = fVec633SEState[0];
		fVec633SE[2] = fVec633SEState[1];
		fVec639SE[1] = fVec639SEState;
		fVec638SE[1] = fVec638SEState[0];
		fVec638SE[2] = fVec638SEState[1];
		fVec641SE[1] = fVec641SEState;
		fVec645SE[1] = fVec645SEState;
		fVec649SE[1] = fVec649SEState;
		fVec653SE[1] = fVec653SEState;
		fVec657SE[1] = fVec657SEState;
		fVec661SE[1] = fVec661SEState;
		fVec665SE[1] = fVec665SEState;
		fVec669SE[1] = fVec669SEState;
		fVec673SE[1] = fVec673SEState;
		fVec677SE[1] = fVec677SEState;
		fVec681SE[1] = fVec681SEState;
		fVec685SE[1] = fVec685SEState;
		fVec689SE[1] = fVec689SEState;
		fVec693SE[1] = fVec693SEState;
		fVec697SE[1] = fVec697SEState;
		fVec701SE[1] = fVec701SEState;
		fVec705SE[1] = fVec705SEState;
		fVec709SE[1] = fVec709SEState;
		fVec713SE[1] = fVec713SEState;
		fVec717SE[1] = fVec717SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fTemp10SE = ((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE); // step: 69
			fVec9SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE); // step: 74
			fVec11SE[0] = fTemp11SE;
			fTemp12SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 77
			fVec12SE[0] = fTemp12SE;
			fTemp13SE = ((fTemp12SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp13SE;
			fTemp14SE = ((fTemp13SE + -fVec14SE[1] /* Sum */) / fTemp2SE); // step: 87
			fVec16SE[0] = fTemp14SE;
			fTemp15SE = fVec17SE[1]; // step: 90
			fTemp16SE = std::max(2e+01f, fabsf((fSlow2BE * fTemp1SE))); // step: 98
			fTemp17SE = (fConst1KI * fTemp16SE); // step: 99
			fVec17SE[0] = (fTemp15SE + fTemp17SE + -floorf((fTemp15SE + fTemp17SE /* Sum */)) /* Sum */);
			fTemp18SE = fVec17SE[0]; // step: 105
			fTemp19SE = (2.0f * fTemp18SE); // step: 106
			fTemp20SE = (fTemp19SE + -1.0f /* Sum */); // step: 107
			fTemp21SE = powf(fTemp20SE,2.0f); // step: 108
			fVec19SE[0] = fTemp21SE;
			fTemp22SE = powf(fTemp20SE,3.0f); // step: 110
			fTemp23SE = (-2.0f * fTemp18SE); // step: 111
			fVec20SE[0] = (fTemp22SE + 1.0f + fTemp23SE /* Sum */);
			fVec21SE[0] = (fTemp22SE + 1.0f + -fTemp19SE /* Sum */);
			fTemp24SE = ((fTemp22SE + 1.0f + fTemp23SE + -fVec21SE[1] /* Sum */) / fTemp16SE); // step: 120
			fVec23SE[0] = fTemp24SE;
			fTemp25SE = ((fTemp22SE + 1.0f + -fTemp19SE + -fVec20SE[1] /* Sum */) / fTemp16SE); // step: 125
			fVec25SE[0] = fTemp25SE;
			fTemp26SE = (fTemp21SE * (fTemp21SE + -2.0f /* Sum */)); // step: 128
			fVec26SE[0] = fTemp26SE;
			fTemp27SE = ((fTemp26SE + -fVec26SE[1] /* Sum */) / fTemp16SE); // step: 133
			fVec28SE[0] = fTemp27SE;
			fTemp28SE = ((fTemp27SE + -fVec28SE[1] /* Sum */) / fTemp16SE); // step: 138
			fVec30SE[0] = fTemp28SE;
			fTemp29SE = fVec31SE[1]; // step: 141
			fTemp30SE = std::max(2e+01f, fabsf((fSlow3BE * fTemp1SE))); // step: 147
			fTemp31SE = (fConst1KI * fTemp30SE); // step: 148
			fVec31SE[0] = (fTemp29SE + fTemp31SE + -floorf((fTemp29SE + fTemp31SE /* Sum */)) /* Sum */);
			fTemp32SE = fVec31SE[0]; // step: 154
			fTemp33SE = (2.0f * fTemp32SE); // step: 155
			fTemp34SE = (fTemp33SE + -1.0f /* Sum */); // step: 156
			fTemp35SE = powf(fTemp34SE,2.0f); // step: 157
			fVec33SE[0] = fTemp35SE;
			fTemp36SE = powf(fTemp34SE,3.0f); // step: 159
			fTemp37SE = (-2.0f * fTemp32SE); // step: 160
			fVec34SE[0] = (fTemp36SE + 1.0f + fTemp37SE /* Sum */);
			fVec35SE[0] = (fTemp36SE + 1.0f + -fTemp33SE /* Sum */);
			fTemp38SE = ((fTemp36SE + 1.0f + fTemp37SE + -fVec35SE[1] /* Sum */) / fTemp30SE); // step: 169
			fVec37SE[0] = fTemp38SE;
			fTemp39SE = ((fTemp36SE + 1.0f + -fTemp33SE + -fVec34SE[1] /* Sum */) / fTemp30SE); // step: 174
			fVec39SE[0] = fTemp39SE;
			fTemp40SE = (fTemp35SE * (fTemp35SE + -2.0f /* Sum */)); // step: 177
			fVec40SE[0] = fTemp40SE;
			fTemp41SE = ((fTemp40SE + -fVec40SE[1] /* Sum */) / fTemp30SE); // step: 182
			fVec42SE[0] = fTemp41SE;
			fTemp42SE = ((fTemp41SE + -fVec42SE[1] /* Sum */) / fTemp30SE); // step: 187
			fVec44SE[0] = fTemp42SE;
			iVec45SI[0] = ((1103515245 * iVec45SI[1]) + 12345 /* Sum */);
			fTemp43SI = (4.656613e-10f * float(iVec45SI[0])); // step: 199
			fTemp44SI = fVec47SI[3]; // step: 202
			fTemp45SI = fVec47SI[2]; // step: 210
			fVec48SI[0] = ((0.5221894f * fTemp44SI) + fTemp43SI + (2.494956f * fVec48SI[1]) + (-2.0172658f * fTemp45SI) /* Sum */);
			fTemp46SI = fVec48SI[0]; // step: 214
			fVec47SI[0] = fTemp46SI;
			fVec51SE[0] = (fSlow4BE + (0.999f * fVec51SE[1]) /* Sum */);
			fTemp47SE = fVec51SE[0]; // step: 229
			fTemp48SE = (float)input0[i]; // step: 231
			fTemp49SC = float(iVec0KC[1]); // step: 246
			fTemp50SE = ((iSlow9BE) ? (fConst2KI * ((fTemp49SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE); // step: 253
			fTemp51SC = float(iVec0KC[2]); // step: 259
			fTemp52SC = float(iVec0KC[3]); // step: 270
			fTemp53SE = (fConst4KI * ((fTemp52SC * (fTemp14SE + -fVec16SE[1] /* Sum */)) / fTemp2SE)); // step: 276
			fTemp54SE = ((iSlow9BE) ? (fConst2KI * ((fTemp49SC * (fTemp21SE + -fVec19SE[1] /* Sum */)) / fTemp16SE)) : fTemp20SE); // step: 285
			fTemp55SE = (fConst4KI * ((fTemp52SC * (fTemp28SE + -fVec30SE[1] /* Sum */)) / fTemp16SE)); // step: 297
			fTemp56SE = ((iSlow9BE) ? (fConst2KI * ((fTemp49SC * (fTemp35SE + -fVec33SE[1] /* Sum */)) / fTemp30SE)) : fTemp34SE); // step: 306
			fTemp57SE = (fConst4KI * ((fTemp52SC * (fTemp42SE + -fVec44SE[1] /* Sum */)) / fTemp30SE)); // step: 318
			fTemp58SI = (0.049922034f * fVec48SI[0]); // step: 328
			fTemp59SI = (0.0506127f * fTemp45SI); // step: 330
			fTemp60SI = fVec47SI[1]; // step: 332
			fVec67SE[0] = (fTemp47SE * ((iSlow5BE) ? fTemp48SE : ((iSlow6BE) ? ((iSlow11BE) ? (fTemp58SI + fTemp59SI + (-0.095993534f * fTemp60SI) + (-0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow8BE) ? ((iSlow10BE) ? fTemp53SE : (fConst3KI * ((fTemp51SC * (fTemp10SE + -fVec11SE[1] /* Sum */)) / fTemp2SE))) : fTemp50SE) + ((iSlow8BE) ? ((iSlow10BE) ? fTemp55SE : (fConst3KI * ((fTemp51SC * (fTemp24SE + -fVec25SE[1] /* Sum */)) / fTemp16SE))) : fTemp54SE) + ((iSlow8BE) ? ((iSlow10BE) ? fTemp57SE : (fConst3KI * ((fTemp51SC * (fTemp38SE + -fVec39SE[1] /* Sum */)) / fTemp30SE))) : fTemp56SE) /* Sum */))))));
			fTemp61SE = (fTemp47SE * ((iSlow5BE) ? fTemp48SE : ((iSlow6BE) ? ((iSlow11BE) ? (fTemp58SI + fTemp59SI + -(0.095993534f * fTemp60SI) + -(0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow8BE) ? ((iSlow10BE) ? fTemp53SE : (fConst3KI * ((fTemp51SC * (fTemp11SE + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : fTemp50SE) + ((iSlow8BE) ? ((iSlow10BE) ? fTemp55SE : (fConst3KI * ((fTemp51SC * (fTemp25SE + -fVec23SE[1] /* Sum */)) / fTemp16SE))) : fTemp54SE) + ((iSlow8BE) ? ((iSlow10BE) ? fTemp57SE : (fConst3KI * ((fTemp51SC * (fTemp39SE + -fVec37SE[1] /* Sum */)) / fTemp30SE))) : fTemp56SE) /* Sum */)))))); // step: 379
			fVec71SE[0] = fTemp61SE;
			fVec72SE[0] = -(fSlow14BE * ((fSlow15BE * fVec72SE[1]) + -(fSlow13BE * (fTemp61SE + -fVec67SE[1] /* Sum */)) /* Sum */));
			fTemp62SE = fVec75SE[2]; // step: 415
			fVec76SE[0] = (fVec72SE[0] + -(fSlow16BE * ((fSlow17BE * fTemp62SE) + (fSlow19BE * fVec76SE[1]) /* Sum */)) /* Sum */);
			fTemp63SE = fVec76SE[0]; // step: 430
			fVec75SE[0] = fTemp63SE;
			fVec79SE[0] = -(fSlow14BE * ((fSlow15BE * fVec79SE[1]) + -fTemp61SE + -fVec71SE[1] /* Sum */));
			fTemp64SE = fVec81SE[2]; // step: 442
			fVec82SE[0] = (fVec79SE[0] + -(fSlow16BE * ((fSlow17BE * fTemp64SE) + (fSlow19BE * fVec82SE[1]) /* Sum */)) /* Sum */);
			fTemp65SE = fVec82SE[0]; // step: 452
			fVec81SE[0] = fTemp65SE;
			fTemp66SE = fVec88SE[2]; // step: 471
			fVec89SE[0] = (fSlow21BE + (0.999f * fVec89SE[1]) /* Sum */);
			fTemp67SE = powf(2.0f,(0.083333336f * (fVec89SE[0] + -49.0f /* Sum */))); // step: 485
			fTemp68SE = tanf((fConst6KI * fTemp67SE)); // step: 487
			fTemp69SE = (1.0f / fTemp68SE); // step: 488
			fTemp70SE = (fTemp67SE / sinf((fConst7KI * fTemp67SE))); // step: 502
			fTemp71SE = (fSlow25BE * fTemp70SE); // step: 503
			fTemp72SE = (fSlow26BE * fTemp70SE); // step: 505
			fTemp73SE = ((iSlow23BE) ? fTemp72SE : fTemp71SE); // step: 506
			fTemp74SE = (1.0f + -(1.0f / powf(fTemp68SE,2.0f)) /* Sum */); // step: 517
			fTemp75SE = (((fTemp69SE + fTemp73SE /* Sum */) / fTemp68SE) + 1.0f /* Sum */); // step: 523
			fVec91SE[0] = ((fSlow16BE * ((fSlow18BE * (fTemp62SE + fVec76SE[0] + (-2.0f * fVec75SE[1]) /* Sum */)) + (fSlow20BE * (fTemp64SE + fVec82SE[0] + (2.0f * fVec81SE[1]) /* Sum */)) /* Sum */)) + -(((fTemp66SE * (((fTemp69SE + -fTemp73SE /* Sum */) / fTemp68SE) + 1.0f /* Sum */)) + (2.0f * (fVec91SE[1] * fTemp74SE)) /* Sum */) / fTemp75SE) /* Sum */);
			fTemp76SE = fVec91SE[0]; // step: 528
			fVec88SE[0] = fTemp76SE;
			fTemp77SE = ((iSlow23BE) ? fTemp71SE : fTemp72SE); // step: 530
			fTemp78SE = (((fVec91SE[0] * (((fTemp69SE + fTemp77SE /* Sum */) / fTemp68SE) + 1.0f /* Sum */)) + (2.0f * (fTemp74SE * fVec88SE[1])) + (fTemp66SE * (((fTemp69SE + -fTemp77SE /* Sum */) / fTemp68SE) + 1.0f /* Sum */)) /* Sum */) / fTemp75SE); // step: 544
			fVec95SE[0] = fTemp78SE;
			fTemp79SE = fVec95SE[1]; // step: 560
			fVec96SE[0] = -(fSlow29BE * ((fSlow30BE * fVec96SE[1]) + -fTemp78SE + -fTemp79SE /* Sum */));
			fTemp80SE = fVec99SE[2]; // step: 574
			fVec100SE[0] = (fVec96SE[0] + -(fSlow31BE * ((fSlow32BE * fTemp80SE) + (fSlow34BE * fVec100SE[1]) /* Sum */)) /* Sum */);
			fTemp81SE = fVec100SE[0]; // step: 589
			fVec99SE[0] = fTemp81SE;
			fVec102SE[0] = -(fSlow29BE * ((fSlow30BE * fVec102SE[1]) + -(fSlow28BE * (fTemp78SE + -fTemp79SE /* Sum */)) /* Sum */));
			fTemp82SE = fVec104SE[2]; // step: 601
			fVec105SE[0] = (fVec102SE[0] + -(fSlow31BE * ((fSlow32BE * fTemp82SE) + (fSlow34BE * fVec105SE[1]) /* Sum */)) /* Sum */);
			fTemp83SE = fVec105SE[0]; // step: 611
			fVec104SE[0] = fTemp83SE;
			fTemp84SE = (fSlow31BE * (fTemp80SE + fVec100SE[0] + (2.0f * fVec99SE[1]) + (fSlow35BE * (fTemp82SE + fVec105SE[0] + (-2.0f * fVec104SE[1]) /* Sum */)) /* Sum */)); // step: 625
			fTemp85SE = fVec111SE[2]; // step: 640
			fVec112SE[0] = (fTemp84SE + -(fConst10KI * ((fConst11KI * fTemp85SE) + (fConst14KI * fVec112SE[1]) /* Sum */)) /* Sum */);
			fTemp86SE = fVec112SE[0]; // step: 655
			fVec111SE[0] = fTemp86SE;
			fTemp87SE = fVec116SE[2]; // step: 680
			fVec117SE[0] = ((fConst10KI * ((fConst16KI * fVec112SE[0]) + (fConst17KI * fVec111SE[1]) + (fConst16KI * fTemp85SE) /* Sum */)) + -(fConst18KI * ((fConst19KI * fTemp87SE) + (fConst20KI * fVec117SE[1]) /* Sum */)) /* Sum */);
			fTemp88SE = fVec117SE[0]; // step: 692
			fVec116SE[0] = fTemp88SE;
			fTemp89SE = fVec121SE[2]; // step: 716
			fVec122SE[0] = ((fConst18KI * ((fConst22KI * fVec117SE[0]) + (fConst23KI * fVec116SE[1]) + (fConst22KI * fTemp87SE) /* Sum */)) + -(fConst24KI * ((fConst25KI * fTemp89SE) + (fConst26KI * fVec122SE[1]) /* Sum */)) /* Sum */);
			fTemp90SE = fVec122SE[0]; // step: 728
			fVec121SE[0] = fTemp90SE;
			fTemp91SE = fVec124SE[2]; // step: 739
			fVec125SE[0] = (fTemp84SE + -(fConst27KI * ((fConst28KI * fTemp91SE) + (fConst29KI * fVec125SE[1]) /* Sum */)) /* Sum */);
			fTemp92SE = fVec125SE[0]; // step: 751
			fVec124SE[0] = fTemp92SE;
			fTemp93SE = fVec129SE[2]; // step: 776
			fVec130SE[0] = ((fConst27KI * ((fConst31KI * fVec125SE[0]) + (fConst32KI * fVec124SE[1]) + (fConst31KI * fTemp91SE) /* Sum */)) + -(fConst33KI * ((fConst34KI * fTemp93SE) + (fConst35KI * fVec130SE[1]) /* Sum */)) /* Sum */);
			fTemp94SE = fVec130SE[0]; // step: 788
			fVec129SE[0] = fTemp94SE;
			fTemp95SE = fVec134SE[2]; // step: 810
			fVec135SE[0] = ((fConst33KI * ((fConst36KI * fVec130SE[0]) + (fConst37KI * fVec129SE[1]) + (fConst36KI * fTemp93SE) /* Sum */)) + -(fConst38KI * ((fConst39KI * fTemp95SE) + (fConst40KI * fVec135SE[1]) /* Sum */)) /* Sum */);
			fTemp96SE = fVec135SE[0]; // step: 822
			fVec134SE[0] = fTemp96SE;
			fTemp97SE = (fConst38KI * ((fConst41KI * fVec135SE[0]) + (fConst42KI * fVec134SE[1]) + (fConst41KI * fTemp95SE) /* Sum */)); // step: 833
			fTemp98SE = fVec139SE[2]; // step: 845
			fVec140SE[0] = (fTemp97SE + -(fConst45KI * ((fConst46KI * fTemp98SE) + (fConst49KI * fVec140SE[1]) /* Sum */)) /* Sum */);
			fTemp99SE = fVec140SE[0]; // step: 860
			fVec139SE[0] = fTemp99SE;
			fTemp100SE = fVec144SE[2]; // step: 880
			fVec145SE[0] = ((fConst45KI * ((fConst51KI * fVec140SE[0]) + (fConst52KI * fVec139SE[1]) + (fConst51KI * fTemp98SE) /* Sum */)) + -(fConst53KI * ((fConst54KI * fTemp100SE) + (fConst55KI * fVec145SE[1]) /* Sum */)) /* Sum */);
			fTemp101SE = fVec145SE[0]; // step: 892
			fVec144SE[0] = fTemp101SE;
			fTemp102SE = fVec149SE[2]; // step: 912
			fVec150SE[0] = ((fConst53KI * ((fConst57KI * fVec145SE[0]) + (fConst58KI * fVec144SE[1]) + (fConst57KI * fTemp100SE) /* Sum */)) + -(fConst59KI * ((fConst60KI * fTemp102SE) + (fConst61KI * fVec150SE[1]) /* Sum */)) /* Sum */);
			fTemp103SE = fVec150SE[0]; // step: 924
			fVec149SE[0] = fTemp103SE;
			fTemp104SE = fVec152SE[2]; // step: 932
			fVec153SE[0] = (fTemp97SE + -(fConst62KI * ((fConst63KI * fTemp104SE) + (fConst64KI * fVec153SE[1]) /* Sum */)) /* Sum */);
			fTemp105SE = fVec153SE[0]; // step: 944
			fVec152SE[0] = fTemp105SE;
			fTemp106SE = fVec157SE[2]; // step: 964
			fVec158SE[0] = ((fConst62KI * ((fConst66KI * fVec153SE[0]) + (fConst67KI * fVec152SE[1]) + (fConst66KI * fTemp104SE) /* Sum */)) + -(fConst68KI * ((fConst69KI * fTemp106SE) + (fConst70KI * fVec158SE[1]) /* Sum */)) /* Sum */);
			fTemp107SE = fVec158SE[0]; // step: 976
			fVec157SE[0] = fTemp107SE;
			fTemp108SE = fVec162SE[2]; // step: 994
			fVec163SE[0] = ((fConst68KI * ((fConst71KI * fVec158SE[0]) + (fConst72KI * fVec157SE[1]) + (fConst71KI * fTemp106SE) /* Sum */)) + -(fConst73KI * ((fConst74KI * fTemp108SE) + (fConst75KI * fVec163SE[1]) /* Sum */)) /* Sum */);
			fTemp109SE = fVec163SE[0]; // step: 1006
			fVec162SE[0] = fTemp109SE;
			fTemp110SE = (fConst73KI * ((fConst76KI * fVec163SE[0]) + (fConst77KI * fVec162SE[1]) + (fConst76KI * fTemp108SE) /* Sum */)); // step: 1016
			fTemp111SE = fVec167SE[2]; // step: 1028
			fVec168SE[0] = (fTemp110SE + -(fConst80KI * ((fConst81KI * fTemp111SE) + (fConst84KI * fVec168SE[1]) /* Sum */)) /* Sum */);
			fTemp112SE = fVec168SE[0]; // step: 1043
			fVec167SE[0] = fTemp112SE;
			fTemp113SE = fVec172SE[2]; // step: 1063
			fVec173SE[0] = ((fConst80KI * ((fConst86KI * fVec168SE[0]) + (fConst87KI * fVec167SE[1]) + (fConst86KI * fTemp111SE) /* Sum */)) + -(fConst88KI * ((fConst89KI * fTemp113SE) + (fConst90KI * fVec173SE[1]) /* Sum */)) /* Sum */);
			fTemp114SE = fVec173SE[0]; // step: 1075
			fVec172SE[0] = fTemp114SE;
			fTemp115SE = fVec177SE[2]; // step: 1095
			fVec178SE[0] = ((fConst88KI * ((fConst92KI * fVec173SE[0]) + (fConst93KI * fVec172SE[1]) + (fConst92KI * fTemp113SE) /* Sum */)) + -(fConst94KI * ((fConst95KI * fTemp115SE) + (fConst96KI * fVec178SE[1]) /* Sum */)) /* Sum */);
			fTemp116SE = fVec178SE[0]; // step: 1107
			fVec177SE[0] = fTemp116SE;
			fTemp117SE = fVec180SE[2]; // step: 1115
			fVec181SE[0] = (fTemp110SE + -(fConst97KI * ((fConst98KI * fTemp117SE) + (fConst99KI * fVec181SE[1]) /* Sum */)) /* Sum */);
			fTemp118SE = fVec181SE[0]; // step: 1127
			fVec180SE[0] = fTemp118SE;
			fTemp119SE = fVec185SE[2]; // step: 1147
			fVec186SE[0] = ((fConst97KI * ((fConst101KI * fVec181SE[0]) + (fConst102KI * fVec180SE[1]) + (fConst101KI * fTemp117SE) /* Sum */)) + -(fConst103KI * ((fConst104KI * fTemp119SE) + (fConst105KI * fVec186SE[1]) /* Sum */)) /* Sum */);
			fTemp120SE = fVec186SE[0]; // step: 1159
			fVec185SE[0] = fTemp120SE;
			fTemp121SE = fVec190SE[2]; // step: 1177
			fVec191SE[0] = ((fConst103KI * ((fConst106KI * fVec186SE[0]) + (fConst107KI * fVec185SE[1]) + (fConst106KI * fTemp119SE) /* Sum */)) + -(fConst108KI * ((fConst109KI * fTemp121SE) + (fConst110KI * fVec191SE[1]) /* Sum */)) /* Sum */);
			fTemp122SE = fVec191SE[0]; // step: 1189
			fVec190SE[0] = fTemp122SE;
			fTemp123SE = (fConst108KI * ((fConst111KI * fVec191SE[0]) + (fConst112KI * fVec190SE[1]) + (fConst111KI * fTemp121SE) /* Sum */)); // step: 1199
			fTemp124SE = fVec195SE[2]; // step: 1211
			fVec196SE[0] = (fTemp123SE + -(fConst115KI * ((fConst116KI * fTemp124SE) + (fConst119KI * fVec196SE[1]) /* Sum */)) /* Sum */);
			fTemp125SE = fVec196SE[0]; // step: 1226
			fVec195SE[0] = fTemp125SE;
			fTemp126SE = fVec200SE[2]; // step: 1246
			fVec201SE[0] = ((fConst115KI * ((fConst121KI * fVec196SE[0]) + (fConst122KI * fVec195SE[1]) + (fConst121KI * fTemp124SE) /* Sum */)) + -(fConst123KI * ((fConst124KI * fTemp126SE) + (fConst125KI * fVec201SE[1]) /* Sum */)) /* Sum */);
			fTemp127SE = fVec201SE[0]; // step: 1258
			fVec200SE[0] = fTemp127SE;
			fTemp128SE = fVec205SE[2]; // step: 1278
			fVec206SE[0] = ((fConst123KI * ((fConst127KI * fVec201SE[0]) + (fConst128KI * fVec200SE[1]) + (fConst127KI * fTemp126SE) /* Sum */)) + -(fConst129KI * ((fConst130KI * fTemp128SE) + (fConst131KI * fVec206SE[1]) /* Sum */)) /* Sum */);
			fTemp129SE = fVec206SE[0]; // step: 1290
			fVec205SE[0] = fTemp129SE;
			fTemp130SE = fVec208SE[2]; // step: 1298
			fVec209SE[0] = (fTemp123SE + -(fConst132KI * ((fConst133KI * fTemp130SE) + (fConst134KI * fVec209SE[1]) /* Sum */)) /* Sum */);
			fTemp131SE = fVec209SE[0]; // step: 1310
			fVec208SE[0] = fTemp131SE;
			fTemp132SE = fVec213SE[2]; // step: 1330
			fVec214SE[0] = ((fConst132KI * ((fConst136KI * fVec209SE[0]) + (fConst137KI * fVec208SE[1]) + (fConst136KI * fTemp130SE) /* Sum */)) + -(fConst138KI * ((fConst139KI * fTemp132SE) + (fConst140KI * fVec214SE[1]) /* Sum */)) /* Sum */);
			fTemp133SE = fVec214SE[0]; // step: 1342
			fVec213SE[0] = fTemp133SE;
			fTemp134SE = fVec218SE[2]; // step: 1360
			fVec219SE[0] = ((fConst138KI * ((fConst141KI * fVec214SE[0]) + (fConst142KI * fVec213SE[1]) + (fConst141KI * fTemp132SE) /* Sum */)) + -(fConst143KI * ((fConst144KI * fTemp134SE) + (fConst145KI * fVec219SE[1]) /* Sum */)) /* Sum */);
			fTemp135SE = fVec219SE[0]; // step: 1372
			fVec218SE[0] = fTemp135SE;
			fTemp136SE = (fConst143KI * ((fConst146KI * fVec219SE[0]) + (fConst147KI * fVec218SE[1]) + (fConst146KI * fTemp134SE) /* Sum */)); // step: 1382
			fTemp137SE = fVec223SE[2]; // step: 1394
			fVec224SE[0] = (fTemp136SE + -(fConst150KI * ((fConst151KI * fTemp137SE) + (fConst154KI * fVec224SE[1]) /* Sum */)) /* Sum */);
			fTemp138SE = fVec224SE[0]; // step: 1409
			fVec223SE[0] = fTemp138SE;
			fTemp139SE = fVec228SE[2]; // step: 1429
			fVec229SE[0] = ((fConst150KI * ((fConst156KI * fVec224SE[0]) + (fConst157KI * fVec223SE[1]) + (fConst156KI * fTemp137SE) /* Sum */)) + -(fConst158KI * ((fConst159KI * fTemp139SE) + (fConst160KI * fVec229SE[1]) /* Sum */)) /* Sum */);
			fTemp140SE = fVec229SE[0]; // step: 1441
			fVec228SE[0] = fTemp140SE;
			fTemp141SE = fVec233SE[2]; // step: 1461
			fVec234SE[0] = ((fConst158KI * ((fConst162KI * fVec229SE[0]) + (fConst163KI * fVec228SE[1]) + (fConst162KI * fTemp139SE) /* Sum */)) + -(fConst164KI * ((fConst165KI * fTemp141SE) + (fConst166KI * fVec234SE[1]) /* Sum */)) /* Sum */);
			fTemp142SE = fVec234SE[0]; // step: 1473
			fVec233SE[0] = fTemp142SE;
			fTemp143SE = fVec236SE[2]; // step: 1481
			fVec237SE[0] = (fTemp136SE + -(fConst167KI * ((fConst168KI * fTemp143SE) + (fConst169KI * fVec237SE[1]) /* Sum */)) /* Sum */);
			fTemp144SE = fVec237SE[0]; // step: 1493
			fVec236SE[0] = fTemp144SE;
			fTemp145SE = fVec241SE[2]; // step: 1513
			fVec242SE[0] = ((fConst167KI * ((fConst171KI * fVec237SE[0]) + (fConst172KI * fVec236SE[1]) + (fConst171KI * fTemp143SE) /* Sum */)) + -(fConst173KI * ((fConst174KI * fTemp145SE) + (fConst175KI * fVec242SE[1]) /* Sum */)) /* Sum */);
			fTemp146SE = fVec242SE[0]; // step: 1525
			fVec241SE[0] = fTemp146SE;
			fTemp147SE = fVec246SE[2]; // step: 1543
			fVec247SE[0] = ((fConst173KI * ((fConst176KI * fVec242SE[0]) + (fConst177KI * fVec241SE[1]) + (fConst176KI * fTemp145SE) /* Sum */)) + -(fConst178KI * ((fConst179KI * fTemp147SE) + (fConst180KI * fVec247SE[1]) /* Sum */)) /* Sum */);
			fTemp148SE = fVec247SE[0]; // step: 1555
			fVec246SE[0] = fTemp148SE;
			fTemp149SE = (fConst178KI * ((fConst181KI * fVec247SE[0]) + (fConst182KI * fVec246SE[1]) + (fConst181KI * fTemp147SE) /* Sum */)); // step: 1565
			fTemp150SE = fVec251SE[2]; // step: 1577
			fVec252SE[0] = (fTemp149SE + -(fConst185KI * ((fConst186KI * fTemp150SE) + (fConst189KI * fVec252SE[1]) /* Sum */)) /* Sum */);
			fTemp151SE = fVec252SE[0]; // step: 1592
			fVec251SE[0] = fTemp151SE;
			fTemp152SE = fVec256SE[2]; // step: 1612
			fVec257SE[0] = ((fConst185KI * ((fConst191KI * fVec252SE[0]) + (fConst192KI * fVec251SE[1]) + (fConst191KI * fTemp150SE) /* Sum */)) + -(fConst193KI * ((fConst194KI * fTemp152SE) + (fConst195KI * fVec257SE[1]) /* Sum */)) /* Sum */);
			fTemp153SE = fVec257SE[0]; // step: 1624
			fVec256SE[0] = fTemp153SE;
			fTemp154SE = fVec261SE[2]; // step: 1644
			fVec262SE[0] = ((fConst193KI * ((fConst197KI * fVec257SE[0]) + (fConst198KI * fVec256SE[1]) + (fConst197KI * fTemp152SE) /* Sum */)) + -(fConst199KI * ((fConst200KI * fTemp154SE) + (fConst201KI * fVec262SE[1]) /* Sum */)) /* Sum */);
			fTemp155SE = fVec262SE[0]; // step: 1656
			fVec261SE[0] = fTemp155SE;
			fTemp156SE = fVec264SE[2]; // step: 1664
			fVec265SE[0] = (fTemp149SE + -(fConst202KI * ((fConst203KI * fTemp156SE) + (fConst204KI * fVec265SE[1]) /* Sum */)) /* Sum */);
			fTemp157SE = fVec265SE[0]; // step: 1676
			fVec264SE[0] = fTemp157SE;
			fTemp158SE = fVec269SE[2]; // step: 1696
			fVec270SE[0] = ((fConst202KI * ((fConst206KI * fVec265SE[0]) + (fConst207KI * fVec264SE[1]) + (fConst206KI * fTemp156SE) /* Sum */)) + -(fConst208KI * ((fConst209KI * fTemp158SE) + (fConst210KI * fVec270SE[1]) /* Sum */)) /* Sum */);
			fTemp159SE = fVec270SE[0]; // step: 1708
			fVec269SE[0] = fTemp159SE;
			fTemp160SE = fVec274SE[2]; // step: 1726
			fVec275SE[0] = ((fConst208KI * ((fConst211KI * fVec270SE[0]) + (fConst212KI * fVec269SE[1]) + (fConst211KI * fTemp158SE) /* Sum */)) + -(fConst213KI * ((fConst214KI * fTemp160SE) + (fConst215KI * fVec275SE[1]) /* Sum */)) /* Sum */);
			fTemp161SE = fVec275SE[0]; // step: 1738
			fVec274SE[0] = fTemp161SE;
			fTemp162SE = (fConst213KI * ((fConst216KI * fVec275SE[0]) + (fConst217KI * fVec274SE[1]) + (fConst216KI * fTemp160SE) /* Sum */)); // step: 1748
			fTemp163SE = fVec279SE[2]; // step: 1760
			fVec280SE[0] = (fTemp162SE + -(fConst220KI * ((fConst221KI * fTemp163SE) + (fConst224KI * fVec280SE[1]) /* Sum */)) /* Sum */);
			fTemp164SE = fVec280SE[0]; // step: 1775
			fVec279SE[0] = fTemp164SE;
			fTemp165SE = fVec284SE[2]; // step: 1795
			fVec285SE[0] = ((fConst220KI * ((fConst226KI * fVec280SE[0]) + (fConst227KI * fVec279SE[1]) + (fConst226KI * fTemp163SE) /* Sum */)) + -(fConst228KI * ((fConst229KI * fTemp165SE) + (fConst230KI * fVec285SE[1]) /* Sum */)) /* Sum */);
			fTemp166SE = fVec285SE[0]; // step: 1807
			fVec284SE[0] = fTemp166SE;
			fTemp167SE = fVec289SE[2]; // step: 1827
			fVec290SE[0] = ((fConst228KI * ((fConst232KI * fVec285SE[0]) + (fConst233KI * fVec284SE[1]) + (fConst232KI * fTemp165SE) /* Sum */)) + -(fConst234KI * ((fConst235KI * fTemp167SE) + (fConst236KI * fVec290SE[1]) /* Sum */)) /* Sum */);
			fTemp168SE = fVec290SE[0]; // step: 1839
			fVec289SE[0] = fTemp168SE;
			fTemp169SE = fVec292SE[2]; // step: 1847
			fVec293SE[0] = (fTemp162SE + -(fConst237KI * ((fConst238KI * fTemp169SE) + (fConst239KI * fVec293SE[1]) /* Sum */)) /* Sum */);
			fTemp170SE = fVec293SE[0]; // step: 1859
			fVec292SE[0] = fTemp170SE;
			fTemp171SE = fVec297SE[2]; // step: 1879
			fVec298SE[0] = ((fConst237KI * ((fConst241KI * fVec293SE[0]) + (fConst242KI * fVec292SE[1]) + (fConst241KI * fTemp169SE) /* Sum */)) + -(fConst243KI * ((fConst244KI * fTemp171SE) + (fConst245KI * fVec298SE[1]) /* Sum */)) /* Sum */);
			fTemp172SE = fVec298SE[0]; // step: 1891
			fVec297SE[0] = fTemp172SE;
			fTemp173SE = fVec302SE[2]; // step: 1909
			fVec303SE[0] = ((fConst243KI * ((fConst246KI * fVec298SE[0]) + (fConst247KI * fVec297SE[1]) + (fConst246KI * fTemp171SE) /* Sum */)) + -(fConst248KI * ((fConst249KI * fTemp173SE) + (fConst250KI * fVec303SE[1]) /* Sum */)) /* Sum */);
			fTemp174SE = fVec303SE[0]; // step: 1921
			fVec302SE[0] = fTemp174SE;
			fTemp175SE = (fConst248KI * ((fConst251KI * fVec303SE[0]) + (fConst252KI * fVec302SE[1]) + (fConst251KI * fTemp173SE) /* Sum */)); // step: 1931
			fTemp176SE = fVec307SE[2]; // step: 1943
			fVec308SE[0] = (fTemp175SE + -(fConst255KI * ((fConst256KI * fTemp176SE) + (fConst259KI * fVec308SE[1]) /* Sum */)) /* Sum */);
			fTemp177SE = fVec308SE[0]; // step: 1958
			fVec307SE[0] = fTemp177SE;
			fTemp178SE = fVec312SE[2]; // step: 1978
			fVec313SE[0] = ((fConst255KI * ((fConst261KI * fVec308SE[0]) + (fConst262KI * fVec307SE[1]) + (fConst261KI * fTemp176SE) /* Sum */)) + -(fConst263KI * ((fConst264KI * fTemp178SE) + (fConst265KI * fVec313SE[1]) /* Sum */)) /* Sum */);
			fTemp179SE = fVec313SE[0]; // step: 1990
			fVec312SE[0] = fTemp179SE;
			fTemp180SE = fVec317SE[2]; // step: 2010
			fVec318SE[0] = ((fConst263KI * ((fConst267KI * fVec313SE[0]) + (fConst268KI * fVec312SE[1]) + (fConst267KI * fTemp178SE) /* Sum */)) + -(fConst269KI * ((fConst270KI * fTemp180SE) + (fConst271KI * fVec318SE[1]) /* Sum */)) /* Sum */);
			fTemp181SE = fVec318SE[0]; // step: 2022
			fVec317SE[0] = fTemp181SE;
			fTemp182SE = fVec320SE[2]; // step: 2030
			fVec321SE[0] = (fTemp175SE + -(fConst272KI * ((fConst273KI * fTemp182SE) + (fConst274KI * fVec321SE[1]) /* Sum */)) /* Sum */);
			fTemp183SE = fVec321SE[0]; // step: 2042
			fVec320SE[0] = fTemp183SE;
			fTemp184SE = fVec325SE[2]; // step: 2062
			fVec326SE[0] = ((fConst272KI * ((fConst276KI * fVec321SE[0]) + (fConst277KI * fVec320SE[1]) + (fConst276KI * fTemp182SE) /* Sum */)) + -(fConst278KI * ((fConst279KI * fTemp184SE) + (fConst280KI * fVec326SE[1]) /* Sum */)) /* Sum */);
			fTemp185SE = fVec326SE[0]; // step: 2074
			fVec325SE[0] = fTemp185SE;
			fTemp186SE = fVec330SE[2]; // step: 2092
			fVec331SE[0] = ((fConst278KI * ((fConst281KI * fVec326SE[0]) + (fConst282KI * fVec325SE[1]) + (fConst281KI * fTemp184SE) /* Sum */)) + -(fConst283KI * ((fConst284KI * fTemp186SE) + (fConst285KI * fVec331SE[1]) /* Sum */)) /* Sum */);
			fTemp187SE = fVec331SE[0]; // step: 2104
			fVec330SE[0] = fTemp187SE;
			fTemp188SE = (fConst283KI * ((fConst286KI * fVec331SE[0]) + (fConst287KI * fVec330SE[1]) + (fConst286KI * fTemp186SE) /* Sum */)); // step: 2114
			fTemp189SE = fVec335SE[2]; // step: 2126
			fVec336SE[0] = (fTemp188SE + -(fConst290KI * ((fConst291KI * fTemp189SE) + (fConst294KI * fVec336SE[1]) /* Sum */)) /* Sum */);
			fTemp190SE = fVec336SE[0]; // step: 2141
			fVec335SE[0] = fTemp190SE;
			fTemp191SE = fVec340SE[2]; // step: 2161
			fVec341SE[0] = ((fConst290KI * ((fConst296KI * fVec336SE[0]) + (fConst297KI * fVec335SE[1]) + (fConst296KI * fTemp189SE) /* Sum */)) + -(fConst298KI * ((fConst299KI * fTemp191SE) + (fConst300KI * fVec341SE[1]) /* Sum */)) /* Sum */);
			fTemp192SE = fVec341SE[0]; // step: 2173
			fVec340SE[0] = fTemp192SE;
			fTemp193SE = fVec345SE[2]; // step: 2193
			fVec346SE[0] = ((fConst298KI * ((fConst302KI * fVec341SE[0]) + (fConst303KI * fVec340SE[1]) + (fConst302KI * fTemp191SE) /* Sum */)) + -(fConst304KI * ((fConst305KI * fTemp193SE) + (fConst306KI * fVec346SE[1]) /* Sum */)) /* Sum */);
			fTemp194SE = fVec346SE[0]; // step: 2205
			fVec345SE[0] = fTemp194SE;
			fTemp195SE = fVec348SE[2]; // step: 2213
			fVec349SE[0] = (fTemp188SE + -(fConst307KI * ((fConst308KI * fTemp195SE) + (fConst309KI * fVec349SE[1]) /* Sum */)) /* Sum */);
			fTemp196SE = fVec349SE[0]; // step: 2225
			fVec348SE[0] = fTemp196SE;
			fTemp197SE = fVec353SE[2]; // step: 2245
			fVec354SE[0] = ((fConst307KI * ((fConst311KI * fVec349SE[0]) + (fConst312KI * fVec348SE[1]) + (fConst311KI * fTemp195SE) /* Sum */)) + -(fConst313KI * ((fConst314KI * fTemp197SE) + (fConst315KI * fVec354SE[1]) /* Sum */)) /* Sum */);
			fTemp198SE = fVec354SE[0]; // step: 2257
			fVec353SE[0] = fTemp198SE;
			fTemp199SE = fVec358SE[2]; // step: 2275
			fVec359SE[0] = ((fConst313KI * ((fConst316KI * fVec354SE[0]) + (fConst317KI * fVec353SE[1]) + (fConst316KI * fTemp197SE) /* Sum */)) + -(fConst318KI * ((fConst319KI * fTemp199SE) + (fConst320KI * fVec359SE[1]) /* Sum */)) /* Sum */);
			fTemp200SE = fVec359SE[0]; // step: 2287
			fVec358SE[0] = fTemp200SE;
			fTemp201SE = (fConst318KI * ((fConst321KI * fVec359SE[0]) + (fConst322KI * fVec358SE[1]) + (fConst321KI * fTemp199SE) /* Sum */)); // step: 2297
			fTemp202SE = fVec363SE[2]; // step: 2309
			fVec364SE[0] = (fTemp201SE + -(fConst325KI * ((fConst326KI * fTemp202SE) + (fConst329KI * fVec364SE[1]) /* Sum */)) /* Sum */);
			fTemp203SE = fVec364SE[0]; // step: 2324
			fVec363SE[0] = fTemp203SE;
			fTemp204SE = fVec368SE[2]; // step: 2344
			fVec369SE[0] = ((fConst325KI * ((fConst331KI * fVec364SE[0]) + (fConst332KI * fVec363SE[1]) + (fConst331KI * fTemp202SE) /* Sum */)) + -(fConst333KI * ((fConst334KI * fTemp204SE) + (fConst335KI * fVec369SE[1]) /* Sum */)) /* Sum */);
			fTemp205SE = fVec369SE[0]; // step: 2356
			fVec368SE[0] = fTemp205SE;
			fTemp206SE = fVec373SE[2]; // step: 2376
			fVec374SE[0] = ((fConst333KI * ((fConst337KI * fVec369SE[0]) + (fConst338KI * fVec368SE[1]) + (fConst337KI * fTemp204SE) /* Sum */)) + -(fConst339KI * ((fConst340KI * fTemp206SE) + (fConst341KI * fVec374SE[1]) /* Sum */)) /* Sum */);
			fTemp207SE = fVec374SE[0]; // step: 2388
			fVec373SE[0] = fTemp207SE;
			fTemp208SE = fVec376SE[2]; // step: 2396
			fVec377SE[0] = (fTemp201SE + -(fConst342KI * ((fConst343KI * fTemp208SE) + (fConst344KI * fVec377SE[1]) /* Sum */)) /* Sum */);
			fTemp209SE = fVec377SE[0]; // step: 2408
			fVec376SE[0] = fTemp209SE;
			fTemp210SE = fVec381SE[2]; // step: 2428
			fVec382SE[0] = ((fConst342KI * ((fConst346KI * fVec377SE[0]) + (fConst347KI * fVec376SE[1]) + (fConst346KI * fTemp208SE) /* Sum */)) + -(fConst348KI * ((fConst349KI * fTemp210SE) + (fConst350KI * fVec382SE[1]) /* Sum */)) /* Sum */);
			fTemp211SE = fVec382SE[0]; // step: 2440
			fVec381SE[0] = fTemp211SE;
			fTemp212SE = fVec386SE[2]; // step: 2458
			fVec387SE[0] = ((fConst348KI * ((fConst351KI * fVec382SE[0]) + (fConst352KI * fVec381SE[1]) + (fConst351KI * fTemp210SE) /* Sum */)) + -(fConst353KI * ((fConst354KI * fTemp212SE) + (fConst355KI * fVec387SE[1]) /* Sum */)) /* Sum */);
			fTemp213SE = fVec387SE[0]; // step: 2470
			fVec386SE[0] = fTemp213SE;
			fTemp214SE = (fConst353KI * ((fConst356KI * fVec387SE[0]) + (fConst357KI * fVec386SE[1]) + (fConst356KI * fTemp212SE) /* Sum */)); // step: 2480
			fTemp215SE = fVec391SE[2]; // step: 2492
			fVec392SE[0] = (fTemp214SE + -(fConst360KI * ((fConst361KI * fTemp215SE) + (fConst364KI * fVec392SE[1]) /* Sum */)) /* Sum */);
			fTemp216SE = fVec392SE[0]; // step: 2507
			fVec391SE[0] = fTemp216SE;
			fTemp217SE = fVec396SE[2]; // step: 2527
			fVec397SE[0] = ((fConst360KI * ((fConst366KI * fVec392SE[0]) + (fConst367KI * fVec391SE[1]) + (fConst366KI * fTemp215SE) /* Sum */)) + -(fConst368KI * ((fConst369KI * fTemp217SE) + (fConst370KI * fVec397SE[1]) /* Sum */)) /* Sum */);
			fTemp218SE = fVec397SE[0]; // step: 2539
			fVec396SE[0] = fTemp218SE;
			fTemp219SE = fVec401SE[2]; // step: 2559
			fVec402SE[0] = ((fConst368KI * ((fConst372KI * fVec397SE[0]) + (fConst373KI * fVec396SE[1]) + (fConst372KI * fTemp217SE) /* Sum */)) + -(fConst374KI * ((fConst375KI * fTemp219SE) + (fConst376KI * fVec402SE[1]) /* Sum */)) /* Sum */);
			fTemp220SE = fVec402SE[0]; // step: 2571
			fVec401SE[0] = fTemp220SE;
			fTemp221SE = fVec404SE[2]; // step: 2579
			fVec405SE[0] = (fTemp214SE + -(fConst377KI * ((fConst378KI * fTemp221SE) + (fConst379KI * fVec405SE[1]) /* Sum */)) /* Sum */);
			fTemp222SE = fVec405SE[0]; // step: 2591
			fVec404SE[0] = fTemp222SE;
			fTemp223SE = fVec409SE[2]; // step: 2611
			fVec410SE[0] = ((fConst377KI * ((fConst381KI * fVec405SE[0]) + (fConst382KI * fVec404SE[1]) + (fConst381KI * fTemp221SE) /* Sum */)) + -(fConst383KI * ((fConst384KI * fTemp223SE) + (fConst385KI * fVec410SE[1]) /* Sum */)) /* Sum */);
			fTemp224SE = fVec410SE[0]; // step: 2623
			fVec409SE[0] = fTemp224SE;
			fTemp225SE = fVec414SE[2]; // step: 2641
			fVec415SE[0] = ((fConst383KI * ((fConst386KI * fVec410SE[0]) + (fConst387KI * fVec409SE[1]) + (fConst386KI * fTemp223SE) /* Sum */)) + -(fConst388KI * ((fConst389KI * fTemp225SE) + (fConst390KI * fVec415SE[1]) /* Sum */)) /* Sum */);
			fTemp226SE = fVec415SE[0]; // step: 2653
			fVec414SE[0] = fTemp226SE;
			fTemp227SE = (fConst388KI * ((fConst391KI * fVec415SE[0]) + (fConst392KI * fVec414SE[1]) + (fConst391KI * fTemp225SE) /* Sum */)); // step: 2663
			fTemp228SE = fVec419SE[2]; // step: 2675
			fVec420SE[0] = (fTemp227SE + -(fConst395KI * ((fConst396KI * fTemp228SE) + (fConst399KI * fVec420SE[1]) /* Sum */)) /* Sum */);
			fTemp229SE = fVec420SE[0]; // step: 2690
			fVec419SE[0] = fTemp229SE;
			fTemp230SE = fVec424SE[2]; // step: 2710
			fVec425SE[0] = ((fConst395KI * ((fConst401KI * fVec420SE[0]) + (fConst402KI * fVec419SE[1]) + (fConst401KI * fTemp228SE) /* Sum */)) + -(fConst403KI * ((fConst404KI * fTemp230SE) + (fConst405KI * fVec425SE[1]) /* Sum */)) /* Sum */);
			fTemp231SE = fVec425SE[0]; // step: 2722
			fVec424SE[0] = fTemp231SE;
			fTemp232SE = fVec429SE[2]; // step: 2742
			fVec430SE[0] = ((fConst403KI * ((fConst407KI * fVec425SE[0]) + (fConst408KI * fVec424SE[1]) + (fConst407KI * fTemp230SE) /* Sum */)) + -(fConst409KI * ((fConst410KI * fTemp232SE) + (fConst411KI * fVec430SE[1]) /* Sum */)) /* Sum */);
			fTemp233SE = fVec430SE[0]; // step: 2754
			fVec429SE[0] = fTemp233SE;
			fTemp234SE = fVec432SE[2]; // step: 2762
			fVec433SE[0] = (fTemp227SE + -(fConst412KI * ((fConst413KI * fTemp234SE) + (fConst414KI * fVec433SE[1]) /* Sum */)) /* Sum */);
			fTemp235SE = fVec433SE[0]; // step: 2774
			fVec432SE[0] = fTemp235SE;
			fTemp236SE = fVec437SE[2]; // step: 2794
			fVec438SE[0] = ((fConst412KI * ((fConst416KI * fVec433SE[0]) + (fConst417KI * fVec432SE[1]) + (fConst416KI * fTemp234SE) /* Sum */)) + -(fConst418KI * ((fConst419KI * fTemp236SE) + (fConst420KI * fVec438SE[1]) /* Sum */)) /* Sum */);
			fTemp237SE = fVec438SE[0]; // step: 2806
			fVec437SE[0] = fTemp237SE;
			fTemp238SE = fVec442SE[2]; // step: 2824
			fVec443SE[0] = ((fConst418KI * ((fConst421KI * fVec438SE[0]) + (fConst422KI * fVec437SE[1]) + (fConst421KI * fTemp236SE) /* Sum */)) + -(fConst423KI * ((fConst424KI * fTemp238SE) + (fConst425KI * fVec443SE[1]) /* Sum */)) /* Sum */);
			fTemp239SE = fVec443SE[0]; // step: 2836
			fVec442SE[0] = fTemp239SE;
			fTemp240SE = (fConst423KI * ((fConst426KI * fVec443SE[0]) + (fConst427KI * fVec442SE[1]) + (fConst426KI * fTemp238SE) /* Sum */)); // step: 2846
			fTemp241SE = fVec447SE[2]; // step: 2858
			fVec448SE[0] = (fTemp240SE + -(fConst430KI * ((fConst431KI * fTemp241SE) + (fConst434KI * fVec448SE[1]) /* Sum */)) /* Sum */);
			fTemp242SE = fVec448SE[0]; // step: 2873
			fVec447SE[0] = fTemp242SE;
			fTemp243SE = fVec452SE[2]; // step: 2893
			fVec453SE[0] = ((fConst430KI * ((fConst436KI * fVec448SE[0]) + (fConst437KI * fVec447SE[1]) + (fConst436KI * fTemp241SE) /* Sum */)) + -(fConst438KI * ((fConst439KI * fTemp243SE) + (fConst440KI * fVec453SE[1]) /* Sum */)) /* Sum */);
			fTemp244SE = fVec453SE[0]; // step: 2905
			fVec452SE[0] = fTemp244SE;
			fTemp245SE = fVec457SE[2]; // step: 2925
			fVec458SE[0] = ((fConst438KI * ((fConst442KI * fVec453SE[0]) + (fConst443KI * fVec452SE[1]) + (fConst442KI * fTemp243SE) /* Sum */)) + -(fConst444KI * ((fConst445KI * fTemp245SE) + (fConst446KI * fVec458SE[1]) /* Sum */)) /* Sum */);
			fTemp246SE = fVec458SE[0]; // step: 2937
			fVec457SE[0] = fTemp246SE;
			fTemp247SE = fVec460SE[2]; // step: 2945
			fVec461SE[0] = (fTemp240SE + -(fConst447KI * ((fConst448KI * fTemp247SE) + (fConst449KI * fVec461SE[1]) /* Sum */)) /* Sum */);
			fTemp248SE = fVec461SE[0]; // step: 2957
			fVec460SE[0] = fTemp248SE;
			fTemp249SE = fVec465SE[2]; // step: 2977
			fVec466SE[0] = ((fConst447KI * ((fConst451KI * fVec461SE[0]) + (fConst452KI * fVec460SE[1]) + (fConst451KI * fTemp247SE) /* Sum */)) + -(fConst453KI * ((fConst454KI * fTemp249SE) + (fConst455KI * fVec466SE[1]) /* Sum */)) /* Sum */);
			fTemp250SE = fVec466SE[0]; // step: 2989
			fVec465SE[0] = fTemp250SE;
			fTemp251SE = fVec470SE[2]; // step: 3007
			fVec471SE[0] = ((fConst453KI * ((fConst456KI * fVec466SE[0]) + (fConst457KI * fVec465SE[1]) + (fConst456KI * fTemp249SE) /* Sum */)) + -(fConst458KI * ((fConst459KI * fTemp251SE) + (fConst460KI * fVec471SE[1]) /* Sum */)) /* Sum */);
			fTemp252SE = fVec471SE[0]; // step: 3019
			fVec470SE[0] = fTemp252SE;
			fTemp253SE = (fConst458KI * ((fConst461KI * fVec471SE[0]) + (fConst462KI * fVec470SE[1]) + (fConst461KI * fTemp251SE) /* Sum */)); // step: 3029
			fTemp254SE = fVec475SE[2]; // step: 3041
			fVec476SE[0] = (fTemp253SE + -(fConst465KI * ((fConst466KI * fTemp254SE) + (fConst469KI * fVec476SE[1]) /* Sum */)) /* Sum */);
			fTemp255SE = fVec476SE[0]; // step: 3056
			fVec475SE[0] = fTemp255SE;
			fTemp256SE = fVec480SE[2]; // step: 3076
			fVec481SE[0] = ((fConst465KI * ((fConst471KI * fVec476SE[0]) + (fConst472KI * fVec475SE[1]) + (fConst471KI * fTemp254SE) /* Sum */)) + -(fConst473KI * ((fConst474KI * fTemp256SE) + (fConst475KI * fVec481SE[1]) /* Sum */)) /* Sum */);
			fTemp257SE = fVec481SE[0]; // step: 3088
			fVec480SE[0] = fTemp257SE;
			fTemp258SE = fVec485SE[2]; // step: 3108
			fVec486SE[0] = ((fConst473KI * ((fConst477KI * fVec481SE[0]) + (fConst478KI * fVec480SE[1]) + (fConst477KI * fTemp256SE) /* Sum */)) + -(fConst479KI * ((fConst480KI * fTemp258SE) + (fConst481KI * fVec486SE[1]) /* Sum */)) /* Sum */);
			fTemp259SE = fVec486SE[0]; // step: 3120
			fVec485SE[0] = fTemp259SE;
			fTemp260SE = fVec488SE[2]; // step: 3128
			fVec489SE[0] = (fTemp253SE + -(fConst482KI * ((fConst483KI * fTemp260SE) + (fConst484KI * fVec489SE[1]) /* Sum */)) /* Sum */);
			fTemp261SE = fVec489SE[0]; // step: 3140
			fVec488SE[0] = fTemp261SE;
			fTemp262SE = fVec493SE[2]; // step: 3160
			fVec494SE[0] = ((fConst482KI * ((fConst486KI * fVec489SE[0]) + (fConst487KI * fVec488SE[1]) + (fConst486KI * fTemp260SE) /* Sum */)) + -(fConst488KI * ((fConst489KI * fTemp262SE) + (fConst490KI * fVec494SE[1]) /* Sum */)) /* Sum */);
			fTemp263SE = fVec494SE[0]; // step: 3172
			fVec493SE[0] = fTemp263SE;
			fTemp264SE = fVec498SE[2]; // step: 3190
			fVec499SE[0] = ((fConst488KI * ((fConst491KI * fVec494SE[0]) + (fConst492KI * fVec493SE[1]) + (fConst491KI * fTemp262SE) /* Sum */)) + -(fConst493KI * ((fConst494KI * fTemp264SE) + (fConst495KI * fVec499SE[1]) /* Sum */)) /* Sum */);
			fTemp265SE = fVec499SE[0]; // step: 3202
			fVec498SE[0] = fTemp265SE;
			fTemp266SE = (fConst493KI * ((fConst496KI * fVec499SE[0]) + (fConst497KI * fVec498SE[1]) + (fConst496KI * fTemp264SE) /* Sum */)); // step: 3212
			fTemp267SE = fVec503SE[2]; // step: 3224
			fVec504SE[0] = (fTemp266SE + -(fConst500KI * ((fConst501KI * fTemp267SE) + (fConst504KI * fVec504SE[1]) /* Sum */)) /* Sum */);
			fTemp268SE = fVec504SE[0]; // step: 3239
			fVec503SE[0] = fTemp268SE;
			fTemp269SE = fVec508SE[2]; // step: 3259
			fVec509SE[0] = ((fConst500KI * ((fConst506KI * fVec504SE[0]) + (fConst507KI * fVec503SE[1]) + (fConst506KI * fTemp267SE) /* Sum */)) + -(fConst508KI * ((fConst509KI * fTemp269SE) + (fConst510KI * fVec509SE[1]) /* Sum */)) /* Sum */);
			fTemp270SE = fVec509SE[0]; // step: 3271
			fVec508SE[0] = fTemp270SE;
			fTemp271SE = fVec513SE[2]; // step: 3291
			fVec514SE[0] = ((fConst508KI * ((fConst512KI * fVec509SE[0]) + (fConst513KI * fVec508SE[1]) + (fConst512KI * fTemp269SE) /* Sum */)) + -(fConst514KI * ((fConst515KI * fTemp271SE) + (fConst516KI * fVec514SE[1]) /* Sum */)) /* Sum */);
			fTemp272SE = fVec514SE[0]; // step: 3303
			fVec513SE[0] = fTemp272SE;
			fTemp273SE = fVec516SE[2]; // step: 3311
			fVec517SE[0] = (fTemp266SE + -(fConst517KI * ((fConst518KI * fTemp273SE) + (fConst519KI * fVec517SE[1]) /* Sum */)) /* Sum */);
			fTemp274SE = fVec517SE[0]; // step: 3323
			fVec516SE[0] = fTemp274SE;
			fTemp275SE = fVec521SE[2]; // step: 3343
			fVec522SE[0] = ((fConst517KI * ((fConst521KI * fVec517SE[0]) + (fConst522KI * fVec516SE[1]) + (fConst521KI * fTemp273SE) /* Sum */)) + -(fConst523KI * ((fConst524KI * fTemp275SE) + (fConst525KI * fVec522SE[1]) /* Sum */)) /* Sum */);
			fTemp276SE = fVec522SE[0]; // step: 3355
			fVec521SE[0] = fTemp276SE;
			fTemp277SE = fVec526SE[2]; // step: 3373
			fVec527SE[0] = ((fConst523KI * ((fConst526KI * fVec522SE[0]) + (fConst527KI * fVec521SE[1]) + (fConst526KI * fTemp275SE) /* Sum */)) + -(fConst528KI * ((fConst529KI * fTemp277SE) + (fConst530KI * fVec527SE[1]) /* Sum */)) /* Sum */);
			fTemp278SE = fVec527SE[0]; // step: 3385
			fVec526SE[0] = fTemp278SE;
			fTemp279SE = (fConst528KI * ((fConst531KI * fVec527SE[0]) + (fConst532KI * fVec526SE[1]) + (fConst531KI * fTemp277SE) /* Sum */)); // step: 3395
			fTemp280SE = fVec531SE[2]; // step: 3407
			fVec532SE[0] = (fTemp279SE + -(fConst535KI * ((fConst536KI * fTemp280SE) + (fConst539KI * fVec532SE[1]) /* Sum */)) /* Sum */);
			fTemp281SE = fVec532SE[0]; // step: 3422
			fVec531SE[0] = fTemp281SE;
			fTemp282SE = fVec536SE[2]; // step: 3442
			fVec537SE[0] = ((fConst535KI * ((fConst541KI * fVec532SE[0]) + (fConst542KI * fVec531SE[1]) + (fConst541KI * fTemp280SE) /* Sum */)) + -(fConst543KI * ((fConst544KI * fTemp282SE) + (fConst545KI * fVec537SE[1]) /* Sum */)) /* Sum */);
			fTemp283SE = fVec537SE[0]; // step: 3454
			fVec536SE[0] = fTemp283SE;
			fTemp284SE = fVec541SE[2]; // step: 3474
			fVec542SE[0] = ((fConst543KI * ((fConst547KI * fVec537SE[0]) + (fConst548KI * fVec536SE[1]) + (fConst547KI * fTemp282SE) /* Sum */)) + -(fConst549KI * ((fConst550KI * fTemp284SE) + (fConst551KI * fVec542SE[1]) /* Sum */)) /* Sum */);
			fTemp285SE = fVec542SE[0]; // step: 3486
			fVec541SE[0] = fTemp285SE;
			fTemp286SE = fVec544SE[2]; // step: 3494
			fVec545SE[0] = (fTemp279SE + -(fConst552KI * ((fConst553KI * fTemp286SE) + (fConst554KI * fVec545SE[1]) /* Sum */)) /* Sum */);
			fTemp287SE = fVec545SE[0]; // step: 3506
			fVec544SE[0] = fTemp287SE;
			fTemp288SE = fVec549SE[2]; // step: 3526
			fVec550SE[0] = ((fConst552KI * ((fConst556KI * fVec545SE[0]) + (fConst557KI * fVec544SE[1]) + (fConst556KI * fTemp286SE) /* Sum */)) + -(fConst558KI * ((fConst559KI * fTemp288SE) + (fConst560KI * fVec550SE[1]) /* Sum */)) /* Sum */);
			fTemp289SE = fVec550SE[0]; // step: 3538
			fVec549SE[0] = fTemp289SE;
			fTemp290SE = fVec554SE[2]; // step: 3556
			fVec555SE[0] = ((fConst558KI * ((fConst561KI * fVec550SE[0]) + (fConst562KI * fVec549SE[1]) + (fConst561KI * fTemp288SE) /* Sum */)) + -(fConst563KI * ((fConst564KI * fTemp290SE) + (fConst565KI * fVec555SE[1]) /* Sum */)) /* Sum */);
			fTemp291SE = fVec555SE[0]; // step: 3568
			fVec554SE[0] = fTemp291SE;
			fTemp292SE = (fConst563KI * ((fConst566KI * fVec555SE[0]) + (fConst567KI * fVec554SE[1]) + (fConst566KI * fTemp290SE) /* Sum */)); // step: 3578
			fTemp293SE = fVec559SE[2]; // step: 3590
			fVec560SE[0] = (fTemp292SE + -(fConst570KI * ((fConst571KI * fTemp293SE) + (fConst574KI * fVec560SE[1]) /* Sum */)) /* Sum */);
			fTemp294SE = fVec560SE[0]; // step: 3605
			fVec559SE[0] = fTemp294SE;
			fTemp295SE = fVec564SE[2]; // step: 3625
			fVec565SE[0] = ((fConst570KI * ((fConst576KI * fVec560SE[0]) + (fConst577KI * fVec559SE[1]) + (fConst576KI * fTemp293SE) /* Sum */)) + -(fConst578KI * ((fConst579KI * fTemp295SE) + (fConst580KI * fVec565SE[1]) /* Sum */)) /* Sum */);
			fTemp296SE = fVec565SE[0]; // step: 3637
			fVec564SE[0] = fTemp296SE;
			fTemp297SE = fVec569SE[2]; // step: 3657
			fVec570SE[0] = ((fConst578KI * ((fConst582KI * fVec565SE[0]) + (fConst583KI * fVec564SE[1]) + (fConst582KI * fTemp295SE) /* Sum */)) + -(fConst584KI * ((fConst585KI * fTemp297SE) + (fConst586KI * fVec570SE[1]) /* Sum */)) /* Sum */);
			fTemp298SE = fVec570SE[0]; // step: 3669
			fVec569SE[0] = fTemp298SE;
			fTemp299SE = fVec572SE[2]; // step: 3677
			fVec573SE[0] = (fTemp292SE + -(fConst587KI * ((fConst588KI * fTemp299SE) + (fConst589KI * fVec573SE[1]) /* Sum */)) /* Sum */);
			fTemp300SE = fVec573SE[0]; // step: 3689
			fVec572SE[0] = fTemp300SE;
			fTemp301SE = fVec577SE[2]; // step: 3709
			fVec578SE[0] = ((fConst587KI * ((fConst591KI * fVec573SE[0]) + (fConst592KI * fVec572SE[1]) + (fConst591KI * fTemp299SE) /* Sum */)) + -(fConst593KI * ((fConst594KI * fTemp301SE) + (fConst595KI * fVec578SE[1]) /* Sum */)) /* Sum */);
			fTemp302SE = fVec578SE[0]; // step: 3721
			fVec577SE[0] = fTemp302SE;
			fTemp303SE = fVec582SE[2]; // step: 3739
			fVec583SE[0] = ((fConst593KI * ((fConst596KI * fVec578SE[0]) + (fConst597KI * fVec577SE[1]) + (fConst596KI * fTemp301SE) /* Sum */)) + -(fConst598KI * ((fConst599KI * fTemp303SE) + (fConst600KI * fVec583SE[1]) /* Sum */)) /* Sum */);
			fTemp304SE = fVec583SE[0]; // step: 3751
			fVec582SE[0] = fTemp304SE;
			fTemp305SE = (fConst598KI * ((fConst601KI * fVec583SE[0]) + (fConst602KI * fVec582SE[1]) + (fConst601KI * fTemp303SE) /* Sum */)); // step: 3761
			fTemp306SE = fVec587SE[2]; // step: 3773
			fVec588SE[0] = (fTemp305SE + -(fConst605KI * ((fConst606KI * fTemp306SE) + (fConst609KI * fVec588SE[1]) /* Sum */)) /* Sum */);
			fTemp307SE = fVec588SE[0]; // step: 3788
			fVec587SE[0] = fTemp307SE;
			fTemp308SE = fVec592SE[2]; // step: 3808
			fVec593SE[0] = ((fConst605KI * ((fConst611KI * fVec588SE[0]) + (fConst612KI * fVec587SE[1]) + (fConst611KI * fTemp306SE) /* Sum */)) + -(fConst613KI * ((fConst614KI * fTemp308SE) + (fConst615KI * fVec593SE[1]) /* Sum */)) /* Sum */);
			fTemp309SE = fVec593SE[0]; // step: 3820
			fVec592SE[0] = fTemp309SE;
			fTemp310SE = fVec597SE[2]; // step: 3840
			fVec598SE[0] = ((fConst613KI * ((fConst617KI * fVec593SE[0]) + (fConst618KI * fVec592SE[1]) + (fConst617KI * fTemp308SE) /* Sum */)) + -(fConst619KI * ((fConst620KI * fTemp310SE) + (fConst621KI * fVec598SE[1]) /* Sum */)) /* Sum */);
			fTemp311SE = fVec598SE[0]; // step: 3852
			fVec597SE[0] = fTemp311SE;
			fTemp312SE = fVec600SE[2]; // step: 3860
			fVec601SE[0] = (fTemp305SE + -(fConst622KI * ((fConst623KI * fTemp312SE) + (fConst624KI * fVec601SE[1]) /* Sum */)) /* Sum */);
			fTemp313SE = fVec601SE[0]; // step: 3872
			fVec600SE[0] = fTemp313SE;
			fTemp314SE = fVec605SE[2]; // step: 3892
			fVec606SE[0] = ((fConst622KI * ((fConst626KI * fVec601SE[0]) + (fConst627KI * fVec600SE[1]) + (fConst626KI * fTemp312SE) /* Sum */)) + -(fConst628KI * ((fConst629KI * fTemp314SE) + (fConst630KI * fVec606SE[1]) /* Sum */)) /* Sum */);
			fTemp315SE = fVec606SE[0]; // step: 3904
			fVec605SE[0] = fTemp315SE;
			fTemp316SE = fVec610SE[2]; // step: 3922
			fVec611SE[0] = ((fConst628KI * ((fConst631KI * fVec606SE[0]) + (fConst632KI * fVec605SE[1]) + (fConst631KI * fTemp314SE) /* Sum */)) + -(fConst633KI * ((fConst634KI * fTemp316SE) + (fConst635KI * fVec611SE[1]) /* Sum */)) /* Sum */);
			fTemp317SE = fVec611SE[0]; // step: 3934
			fVec610SE[0] = fTemp317SE;
			fTemp318SE = (fConst633KI * ((fConst636KI * fVec611SE[0]) + (fConst637KI * fVec610SE[1]) + (fConst636KI * fTemp316SE) /* Sum */)); // step: 3944
			fTemp319SE = fVec615SE[2]; // step: 3956
			fVec616SE[0] = (fTemp318SE + -(fConst640KI * ((fConst641KI * fTemp319SE) + (fConst644KI * fVec616SE[1]) /* Sum */)) /* Sum */);
			fTemp320SE = fVec616SE[0]; // step: 3971
			fVec615SE[0] = fTemp320SE;
			fTemp321SE = fVec620SE[2]; // step: 3991
			fVec621SE[0] = ((fConst640KI * ((fConst646KI * fVec616SE[0]) + (fConst647KI * fVec615SE[1]) + (fConst646KI * fTemp319SE) /* Sum */)) + -(fConst648KI * ((fConst649KI * fTemp321SE) + (fConst650KI * fVec621SE[1]) /* Sum */)) /* Sum */);
			fTemp322SE = fVec621SE[0]; // step: 4003
			fVec620SE[0] = fTemp322SE;
			fTemp323SE = fVec625SE[2]; // step: 4023
			fVec626SE[0] = ((fConst648KI * ((fConst652KI * fVec621SE[0]) + (fConst653KI * fVec620SE[1]) + (fConst652KI * fTemp321SE) /* Sum */)) + -(fConst654KI * ((fConst655KI * fTemp323SE) + (fConst656KI * fVec626SE[1]) /* Sum */)) /* Sum */);
			fTemp324SE = fVec626SE[0]; // step: 4035
			fVec625SE[0] = fTemp324SE;
			fTemp325SE = fVec628SE[2]; // step: 4043
			fVec629SE[0] = (fTemp318SE + -(fConst657KI * ((fConst658KI * fTemp325SE) + (fConst659KI * fVec629SE[1]) /* Sum */)) /* Sum */);
			fTemp326SE = fVec629SE[0]; // step: 4055
			fVec628SE[0] = fTemp326SE;
			fTemp327SE = fVec633SE[2]; // step: 4075
			fVec634SE[0] = ((fConst657KI * ((fConst661KI * fVec629SE[0]) + (fConst662KI * fVec628SE[1]) + (fConst661KI * fTemp325SE) /* Sum */)) + -(fConst663KI * ((fConst664KI * fTemp327SE) + (fConst665KI * fVec634SE[1]) /* Sum */)) /* Sum */);
			fTemp328SE = fVec634SE[0]; // step: 4087
			fVec633SE[0] = fTemp328SE;
			fTemp329SE = fVec638SE[2]; // step: 4105
			fVec639SE[0] = ((fConst663KI * ((fConst666KI * fVec634SE[0]) + (fConst667KI * fVec633SE[1]) + (fConst666KI * fTemp327SE) /* Sum */)) + -(fConst668KI * ((fConst669KI * fTemp329SE) + (fConst670KI * fVec639SE[1]) /* Sum */)) /* Sum */);
			fTemp330SE = fVec639SE[0]; // step: 4117
			fVec638SE[0] = fTemp330SE;
			fVec641SE[0] = ((fVec641SE[1] * fSlow38BE) + (fabsf((fConst24KI * ((fConst673KI * fVec122SE[0]) + (fConst674KI * fVec121SE[1]) + (fConst673KI * fTemp89SE) /* Sum */))) * fSlow39BE) /* Sum */);
			fSlow40SE = (fSlow36BE + (2e+01f * log10f(fVec641SE[0])) /* Sum */);
			fVec645SE[0] = ((fSlow38BE * fVec645SE[1]) + (fSlow39BE * fabsf((fConst59KI * ((fConst676KI * fVec150SE[0]) + (fConst677KI * fVec149SE[1]) + (fConst676KI * fTemp102SE) /* Sum */)))) /* Sum */);
			fSlow41SE = (fSlow36BE + (2e+01f * log10f(fVec645SE[0])) /* Sum */);
			fVec649SE[0] = ((fSlow38BE * fVec649SE[1]) + (fSlow39BE * fabsf((fConst94KI * ((fConst679KI * fVec178SE[0]) + (fConst680KI * fVec177SE[1]) + (fConst679KI * fTemp115SE) /* Sum */)))) /* Sum */);
			fSlow42SE = (fSlow36BE + (2e+01f * log10f(fVec649SE[0])) /* Sum */);
			fVec653SE[0] = ((fSlow38BE * fVec653SE[1]) + (fSlow39BE * fabsf((fConst129KI * ((fConst682KI * fVec206SE[0]) + (fConst683KI * fVec205SE[1]) + (fConst682KI * fTemp128SE) /* Sum */)))) /* Sum */);
			fSlow43SE = (fSlow36BE + (2e+01f * log10f(fVec653SE[0])) /* Sum */);
			fVec657SE[0] = ((fSlow38BE * fVec657SE[1]) + (fSlow39BE * fabsf((fConst164KI * ((fConst685KI * fVec234SE[0]) + (fConst686KI * fVec233SE[1]) + (fConst685KI * fTemp141SE) /* Sum */)))) /* Sum */);
			fSlow44SE = (fSlow36BE + (2e+01f * log10f(fVec657SE[0])) /* Sum */);
			fVec661SE[0] = ((fSlow38BE * fVec661SE[1]) + (fSlow39BE * fabsf((fConst199KI * ((fConst688KI * fVec262SE[0]) + (fConst689KI * fVec261SE[1]) + (fConst688KI * fTemp154SE) /* Sum */)))) /* Sum */);
			fSlow45SE = (fSlow36BE + (2e+01f * log10f(fVec661SE[0])) /* Sum */);
			fVec665SE[0] = ((fSlow38BE * fVec665SE[1]) + (fSlow39BE * fabsf((fConst234KI * ((fConst691KI * fVec290SE[0]) + (fConst692KI * fVec289SE[1]) + (fConst691KI * fTemp167SE) /* Sum */)))) /* Sum */);
			fSlow46SE = (fSlow36BE + (2e+01f * log10f(fVec665SE[0])) /* Sum */);
			fVec669SE[0] = ((fSlow38BE * fVec669SE[1]) + (fSlow39BE * fabsf((fConst269KI * ((fConst694KI * fVec318SE[0]) + (fConst695KI * fVec317SE[1]) + (fConst694KI * fTemp180SE) /* Sum */)))) /* Sum */);
			fSlow47SE = (fSlow36BE + (2e+01f * log10f(fVec669SE[0])) /* Sum */);
			fVec673SE[0] = ((fSlow38BE * fVec673SE[1]) + (fSlow39BE * fabsf((fConst304KI * ((fConst697KI * fVec346SE[0]) + (fConst698KI * fVec345SE[1]) + (fConst697KI * fTemp193SE) /* Sum */)))) /* Sum */);
			fSlow48SE = (fSlow36BE + (2e+01f * log10f(fVec673SE[0])) /* Sum */);
			fVec677SE[0] = ((fSlow38BE * fVec677SE[1]) + (fSlow39BE * fabsf((fConst339KI * ((fConst700KI * fVec374SE[0]) + (fConst701KI * fVec373SE[1]) + (fConst700KI * fTemp206SE) /* Sum */)))) /* Sum */);
			fSlow49SE = (fSlow36BE + (2e+01f * log10f(fVec677SE[0])) /* Sum */);
			fVec681SE[0] = ((fSlow38BE * fVec681SE[1]) + (fSlow39BE * fabsf((fConst374KI * ((fConst703KI * fVec402SE[0]) + (fConst704KI * fVec401SE[1]) + (fConst703KI * fTemp219SE) /* Sum */)))) /* Sum */);
			fSlow50SE = (fSlow36BE + (2e+01f * log10f(fVec681SE[0])) /* Sum */);
			fVec685SE[0] = ((fSlow38BE * fVec685SE[1]) + (fSlow39BE * fabsf((fConst409KI * ((fConst706KI * fVec430SE[0]) + (fConst707KI * fVec429SE[1]) + (fConst706KI * fTemp232SE) /* Sum */)))) /* Sum */);
			fSlow51SE = (fSlow36BE + (2e+01f * log10f(fVec685SE[0])) /* Sum */);
			fVec689SE[0] = ((fSlow38BE * fVec689SE[1]) + (fSlow39BE * fabsf((fConst444KI * ((fConst709KI * fVec458SE[0]) + (fConst710KI * fVec457SE[1]) + (fConst709KI * fTemp245SE) /* Sum */)))) /* Sum */);
			fSlow52SE = (fSlow36BE + (2e+01f * log10f(fVec689SE[0])) /* Sum */);
			fVec693SE[0] = ((fSlow38BE * fVec693SE[1]) + (fSlow39BE * fabsf((fConst479KI * ((fConst712KI * fVec486SE[0]) + (fConst713KI * fVec485SE[1]) + (fConst712KI * fTemp258SE) /* Sum */)))) /* Sum */);
			fSlow53SE = (fSlow36BE + (2e+01f * log10f(fVec693SE[0])) /* Sum */);
			fVec697SE[0] = ((fSlow38BE * fVec697SE[1]) + (fSlow39BE * fabsf((fConst514KI * ((fConst715KI * fVec514SE[0]) + (fConst716KI * fVec513SE[1]) + (fConst715KI * fTemp271SE) /* Sum */)))) /* Sum */);
			fSlow54SE = (fSlow36BE + (2e+01f * log10f(fVec697SE[0])) /* Sum */);
			fVec701SE[0] = ((fSlow38BE * fVec701SE[1]) + (fSlow39BE * fabsf((fConst549KI * ((fConst718KI * fVec542SE[0]) + (fConst719KI * fVec541SE[1]) + (fConst718KI * fTemp284SE) /* Sum */)))) /* Sum */);
			fSlow55SE = (fSlow36BE + (2e+01f * log10f(fVec701SE[0])) /* Sum */);
			fVec705SE[0] = ((fSlow38BE * fVec705SE[1]) + (fSlow39BE * fabsf((fConst584KI * ((fConst721KI * fVec570SE[0]) + (fConst722KI * fVec569SE[1]) + (fConst721KI * fTemp297SE) /* Sum */)))) /* Sum */);
			fSlow56SE = (fSlow36BE + (2e+01f * log10f(fVec705SE[0])) /* Sum */);
			fVec709SE[0] = ((fSlow38BE * fVec709SE[1]) + (fSlow39BE * fabsf((fConst619KI * ((fConst724KI * fVec598SE[0]) + (fConst725KI * fVec597SE[1]) + (fConst724KI * fTemp310SE) /* Sum */)))) /* Sum */);
			fSlow57SE = (fSlow36BE + (2e+01f * log10f(fVec709SE[0])) /* Sum */);
			fVec713SE[0] = ((fSlow38BE * fVec713SE[1]) + (fSlow39BE * fabsf((fConst654KI * ((fConst727KI * fVec626SE[0]) + (fConst728KI * fVec625SE[1]) + (fConst727KI * fTemp323SE) /* Sum */)))) /* Sum */);
			fSlow58SE = (fSlow36BE + (2e+01f * log10f(fVec713SE[0])) /* Sum */);
			fVec717SE[0] = ((fSlow38BE * fVec717SE[1]) + (fSlow39BE * fabsf((fConst668KI * ((fConst729KI * fVec639SE[0]) + (fConst730KI * fVec638SE[1]) + (fConst729KI * fTemp329SE) /* Sum */)))) /* Sum */);
			fSlow59SE = (fSlow36BE + (2e+01f * log10f(fVec717SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp84SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp84SE);  // Zone Exec Code
			// post processing
			fVec717SE[1] = fVec717SE[0];
			fVec713SE[1] = fVec713SE[0];
			fVec709SE[1] = fVec709SE[0];
			fVec705SE[1] = fVec705SE[0];
			fVec701SE[1] = fVec701SE[0];
			fVec697SE[1] = fVec697SE[0];
			fVec693SE[1] = fVec693SE[0];
			fVec689SE[1] = fVec689SE[0];
			fVec685SE[1] = fVec685SE[0];
			fVec681SE[1] = fVec681SE[0];
			fVec677SE[1] = fVec677SE[0];
			fVec673SE[1] = fVec673SE[0];
			fVec669SE[1] = fVec669SE[0];
			fVec665SE[1] = fVec665SE[0];
			fVec661SE[1] = fVec661SE[0];
			fVec657SE[1] = fVec657SE[0];
			fVec653SE[1] = fVec653SE[0];
			fVec649SE[1] = fVec649SE[0];
			fVec645SE[1] = fVec645SE[0];
			fVec641SE[1] = fVec641SE[0];
			fVec638SE[2] = fVec638SE[1];
			fVec638SE[1] = fVec638SE[0];
			fVec639SE[1] = fVec639SE[0];
			fVec633SE[2] = fVec633SE[1];
			fVec633SE[1] = fVec633SE[0];
			fVec634SE[1] = fVec634SE[0];
			fVec628SE[2] = fVec628SE[1];
			fVec628SE[1] = fVec628SE[0];
			fVec629SE[1] = fVec629SE[0];
			fVec625SE[2] = fVec625SE[1];
			fVec625SE[1] = fVec625SE[0];
			fVec626SE[1] = fVec626SE[0];
			fVec620SE[2] = fVec620SE[1];
			fVec620SE[1] = fVec620SE[0];
			fVec621SE[1] = fVec621SE[0];
			fVec615SE[2] = fVec615SE[1];
			fVec615SE[1] = fVec615SE[0];
			fVec616SE[1] = fVec616SE[0];
			fVec610SE[2] = fVec610SE[1];
			fVec610SE[1] = fVec610SE[0];
			fVec611SE[1] = fVec611SE[0];
			fVec605SE[2] = fVec605SE[1];
			fVec605SE[1] = fVec605SE[0];
			fVec606SE[1] = fVec606SE[0];
			fVec600SE[2] = fVec600SE[1];
			fVec600SE[1] = fVec600SE[0];
			fVec601SE[1] = fVec601SE[0];
			fVec597SE[2] = fVec597SE[1];
			fVec597SE[1] = fVec597SE[0];
			fVec598SE[1] = fVec598SE[0];
			fVec592SE[2] = fVec592SE[1];
			fVec592SE[1] = fVec592SE[0];
			fVec593SE[1] = fVec593SE[0];
			fVec587SE[2] = fVec587SE[1];
			fVec587SE[1] = fVec587SE[0];
			fVec588SE[1] = fVec588SE[0];
			fVec582SE[2] = fVec582SE[1];
			fVec582SE[1] = fVec582SE[0];
			fVec583SE[1] = fVec583SE[0];
			fVec577SE[2] = fVec577SE[1];
			fVec577SE[1] = fVec577SE[0];
			fVec578SE[1] = fVec578SE[0];
			fVec572SE[2] = fVec572SE[1];
			fVec572SE[1] = fVec572SE[0];
			fVec573SE[1] = fVec573SE[0];
			fVec569SE[2] = fVec569SE[1];
			fVec569SE[1] = fVec569SE[0];
			fVec570SE[1] = fVec570SE[0];
			fVec564SE[2] = fVec564SE[1];
			fVec564SE[1] = fVec564SE[0];
			fVec565SE[1] = fVec565SE[0];
			fVec559SE[2] = fVec559SE[1];
			fVec559SE[1] = fVec559SE[0];
			fVec560SE[1] = fVec560SE[0];
			fVec554SE[2] = fVec554SE[1];
			fVec554SE[1] = fVec554SE[0];
			fVec555SE[1] = fVec555SE[0];
			fVec549SE[2] = fVec549SE[1];
			fVec549SE[1] = fVec549SE[0];
			fVec550SE[1] = fVec550SE[0];
			fVec544SE[2] = fVec544SE[1];
			fVec544SE[1] = fVec544SE[0];
			fVec545SE[1] = fVec545SE[0];
			fVec541SE[2] = fVec541SE[1];
			fVec541SE[1] = fVec541SE[0];
			fVec542SE[1] = fVec542SE[0];
			fVec536SE[2] = fVec536SE[1];
			fVec536SE[1] = fVec536SE[0];
			fVec537SE[1] = fVec537SE[0];
			fVec531SE[2] = fVec531SE[1];
			fVec531SE[1] = fVec531SE[0];
			fVec532SE[1] = fVec532SE[0];
			fVec526SE[2] = fVec526SE[1];
			fVec526SE[1] = fVec526SE[0];
			fVec527SE[1] = fVec527SE[0];
			fVec521SE[2] = fVec521SE[1];
			fVec521SE[1] = fVec521SE[0];
			fVec522SE[1] = fVec522SE[0];
			fVec516SE[2] = fVec516SE[1];
			fVec516SE[1] = fVec516SE[0];
			fVec517SE[1] = fVec517SE[0];
			fVec513SE[2] = fVec513SE[1];
			fVec513SE[1] = fVec513SE[0];
			fVec514SE[1] = fVec514SE[0];
			fVec508SE[2] = fVec508SE[1];
			fVec508SE[1] = fVec508SE[0];
			fVec509SE[1] = fVec509SE[0];
			fVec503SE[2] = fVec503SE[1];
			fVec503SE[1] = fVec503SE[0];
			fVec504SE[1] = fVec504SE[0];
			fVec498SE[2] = fVec498SE[1];
			fVec498SE[1] = fVec498SE[0];
			fVec499SE[1] = fVec499SE[0];
			fVec493SE[2] = fVec493SE[1];
			fVec493SE[1] = fVec493SE[0];
			fVec494SE[1] = fVec494SE[0];
			fVec488SE[2] = fVec488SE[1];
			fVec488SE[1] = fVec488SE[0];
			fVec489SE[1] = fVec489SE[0];
			fVec485SE[2] = fVec485SE[1];
			fVec485SE[1] = fVec485SE[0];
			fVec486SE[1] = fVec486SE[0];
			fVec480SE[2] = fVec480SE[1];
			fVec480SE[1] = fVec480SE[0];
			fVec481SE[1] = fVec481SE[0];
			fVec475SE[2] = fVec475SE[1];
			fVec475SE[1] = fVec475SE[0];
			fVec476SE[1] = fVec476SE[0];
			fVec470SE[2] = fVec470SE[1];
			fVec470SE[1] = fVec470SE[0];
			fVec471SE[1] = fVec471SE[0];
			fVec465SE[2] = fVec465SE[1];
			fVec465SE[1] = fVec465SE[0];
			fVec466SE[1] = fVec466SE[0];
			fVec460SE[2] = fVec460SE[1];
			fVec460SE[1] = fVec460SE[0];
			fVec461SE[1] = fVec461SE[0];
			fVec457SE[2] = fVec457SE[1];
			fVec457SE[1] = fVec457SE[0];
			fVec458SE[1] = fVec458SE[0];
			fVec452SE[2] = fVec452SE[1];
			fVec452SE[1] = fVec452SE[0];
			fVec453SE[1] = fVec453SE[0];
			fVec447SE[2] = fVec447SE[1];
			fVec447SE[1] = fVec447SE[0];
			fVec448SE[1] = fVec448SE[0];
			fVec442SE[2] = fVec442SE[1];
			fVec442SE[1] = fVec442SE[0];
			fVec443SE[1] = fVec443SE[0];
			fVec437SE[2] = fVec437SE[1];
			fVec437SE[1] = fVec437SE[0];
			fVec438SE[1] = fVec438SE[0];
			fVec432SE[2] = fVec432SE[1];
			fVec432SE[1] = fVec432SE[0];
			fVec433SE[1] = fVec433SE[0];
			fVec429SE[2] = fVec429SE[1];
			fVec429SE[1] = fVec429SE[0];
			fVec430SE[1] = fVec430SE[0];
			fVec424SE[2] = fVec424SE[1];
			fVec424SE[1] = fVec424SE[0];
			fVec425SE[1] = fVec425SE[0];
			fVec419SE[2] = fVec419SE[1];
			fVec419SE[1] = fVec419SE[0];
			fVec420SE[1] = fVec420SE[0];
			fVec414SE[2] = fVec414SE[1];
			fVec414SE[1] = fVec414SE[0];
			fVec415SE[1] = fVec415SE[0];
			fVec409SE[2] = fVec409SE[1];
			fVec409SE[1] = fVec409SE[0];
			fVec410SE[1] = fVec410SE[0];
			fVec404SE[2] = fVec404SE[1];
			fVec404SE[1] = fVec404SE[0];
			fVec405SE[1] = fVec405SE[0];
			fVec401SE[2] = fVec401SE[1];
			fVec401SE[1] = fVec401SE[0];
			fVec402SE[1] = fVec402SE[0];
			fVec396SE[2] = fVec396SE[1];
			fVec396SE[1] = fVec396SE[0];
			fVec397SE[1] = fVec397SE[0];
			fVec391SE[2] = fVec391SE[1];
			fVec391SE[1] = fVec391SE[0];
			fVec392SE[1] = fVec392SE[0];
			fVec386SE[2] = fVec386SE[1];
			fVec386SE[1] = fVec386SE[0];
			fVec387SE[1] = fVec387SE[0];
			fVec381SE[2] = fVec381SE[1];
			fVec381SE[1] = fVec381SE[0];
			fVec382SE[1] = fVec382SE[0];
			fVec376SE[2] = fVec376SE[1];
			fVec376SE[1] = fVec376SE[0];
			fVec377SE[1] = fVec377SE[0];
			fVec373SE[2] = fVec373SE[1];
			fVec373SE[1] = fVec373SE[0];
			fVec374SE[1] = fVec374SE[0];
			fVec368SE[2] = fVec368SE[1];
			fVec368SE[1] = fVec368SE[0];
			fVec369SE[1] = fVec369SE[0];
			fVec363SE[2] = fVec363SE[1];
			fVec363SE[1] = fVec363SE[0];
			fVec364SE[1] = fVec364SE[0];
			fVec358SE[2] = fVec358SE[1];
			fVec358SE[1] = fVec358SE[0];
			fVec359SE[1] = fVec359SE[0];
			fVec353SE[2] = fVec353SE[1];
			fVec353SE[1] = fVec353SE[0];
			fVec354SE[1] = fVec354SE[0];
			fVec348SE[2] = fVec348SE[1];
			fVec348SE[1] = fVec348SE[0];
			fVec349SE[1] = fVec349SE[0];
			fVec345SE[2] = fVec345SE[1];
			fVec345SE[1] = fVec345SE[0];
			fVec346SE[1] = fVec346SE[0];
			fVec340SE[2] = fVec340SE[1];
			fVec340SE[1] = fVec340SE[0];
			fVec341SE[1] = fVec341SE[0];
			fVec335SE[2] = fVec335SE[1];
			fVec335SE[1] = fVec335SE[0];
			fVec336SE[1] = fVec336SE[0];
			fVec330SE[2] = fVec330SE[1];
			fVec330SE[1] = fVec330SE[0];
			fVec331SE[1] = fVec331SE[0];
			fVec325SE[2] = fVec325SE[1];
			fVec325SE[1] = fVec325SE[0];
			fVec326SE[1] = fVec326SE[0];
			fVec320SE[2] = fVec320SE[1];
			fVec320SE[1] = fVec320SE[0];
			fVec321SE[1] = fVec321SE[0];
			fVec317SE[2] = fVec317SE[1];
			fVec317SE[1] = fVec317SE[0];
			fVec318SE[1] = fVec318SE[0];
			fVec312SE[2] = fVec312SE[1];
			fVec312SE[1] = fVec312SE[0];
			fVec313SE[1] = fVec313SE[0];
			fVec307SE[2] = fVec307SE[1];
			fVec307SE[1] = fVec307SE[0];
			fVec308SE[1] = fVec308SE[0];
			fVec302SE[2] = fVec302SE[1];
			fVec302SE[1] = fVec302SE[0];
			fVec303SE[1] = fVec303SE[0];
			fVec297SE[2] = fVec297SE[1];
			fVec297SE[1] = fVec297SE[0];
			fVec298SE[1] = fVec298SE[0];
			fVec292SE[2] = fVec292SE[1];
			fVec292SE[1] = fVec292SE[0];
			fVec293SE[1] = fVec293SE[0];
			fVec289SE[2] = fVec289SE[1];
			fVec289SE[1] = fVec289SE[0];
			fVec290SE[1] = fVec290SE[0];
			fVec284SE[2] = fVec284SE[1];
			fVec284SE[1] = fVec284SE[0];
			fVec285SE[1] = fVec285SE[0];
			fVec279SE[2] = fVec279SE[1];
			fVec279SE[1] = fVec279SE[0];
			fVec280SE[1] = fVec280SE[0];
			fVec274SE[2] = fVec274SE[1];
			fVec274SE[1] = fVec274SE[0];
			fVec275SE[1] = fVec275SE[0];
			fVec269SE[2] = fVec269SE[1];
			fVec269SE[1] = fVec269SE[0];
			fVec270SE[1] = fVec270SE[0];
			fVec264SE[2] = fVec264SE[1];
			fVec264SE[1] = fVec264SE[0];
			fVec265SE[1] = fVec265SE[0];
			fVec261SE[2] = fVec261SE[1];
			fVec261SE[1] = fVec261SE[0];
			fVec262SE[1] = fVec262SE[0];
			fVec256SE[2] = fVec256SE[1];
			fVec256SE[1] = fVec256SE[0];
			fVec257SE[1] = fVec257SE[0];
			fVec251SE[2] = fVec251SE[1];
			fVec251SE[1] = fVec251SE[0];
			fVec252SE[1] = fVec252SE[0];
			fVec246SE[2] = fVec246SE[1];
			fVec246SE[1] = fVec246SE[0];
			fVec247SE[1] = fVec247SE[0];
			fVec241SE[2] = fVec241SE[1];
			fVec241SE[1] = fVec241SE[0];
			fVec242SE[1] = fVec242SE[0];
			fVec236SE[2] = fVec236SE[1];
			fVec236SE[1] = fVec236SE[0];
			fVec237SE[1] = fVec237SE[0];
			fVec233SE[2] = fVec233SE[1];
			fVec233SE[1] = fVec233SE[0];
			fVec234SE[1] = fVec234SE[0];
			fVec228SE[2] = fVec228SE[1];
			fVec228SE[1] = fVec228SE[0];
			fVec229SE[1] = fVec229SE[0];
			fVec223SE[2] = fVec223SE[1];
			fVec223SE[1] = fVec223SE[0];
			fVec224SE[1] = fVec224SE[0];
			fVec218SE[2] = fVec218SE[1];
			fVec218SE[1] = fVec218SE[0];
			fVec219SE[1] = fVec219SE[0];
			fVec213SE[2] = fVec213SE[1];
			fVec213SE[1] = fVec213SE[0];
			fVec214SE[1] = fVec214SE[0];
			fVec208SE[2] = fVec208SE[1];
			fVec208SE[1] = fVec208SE[0];
			fVec209SE[1] = fVec209SE[0];
			fVec205SE[2] = fVec205SE[1];
			fVec205SE[1] = fVec205SE[0];
			fVec206SE[1] = fVec206SE[0];
			fVec200SE[2] = fVec200SE[1];
			fVec200SE[1] = fVec200SE[0];
			fVec201SE[1] = fVec201SE[0];
			fVec195SE[2] = fVec195SE[1];
			fVec195SE[1] = fVec195SE[0];
			fVec196SE[1] = fVec196SE[0];
			fVec190SE[2] = fVec190SE[1];
			fVec190SE[1] = fVec190SE[0];
			fVec191SE[1] = fVec191SE[0];
			fVec185SE[2] = fVec185SE[1];
			fVec185SE[1] = fVec185SE[0];
			fVec186SE[1] = fVec186SE[0];
			fVec180SE[2] = fVec180SE[1];
			fVec180SE[1] = fVec180SE[0];
			fVec181SE[1] = fVec181SE[0];
			fVec177SE[2] = fVec177SE[1];
			fVec177SE[1] = fVec177SE[0];
			fVec178SE[1] = fVec178SE[0];
			fVec172SE[2] = fVec172SE[1];
			fVec172SE[1] = fVec172SE[0];
			fVec173SE[1] = fVec173SE[0];
			fVec167SE[2] = fVec167SE[1];
			fVec167SE[1] = fVec167SE[0];
			fVec168SE[1] = fVec168SE[0];
			fVec162SE[2] = fVec162SE[1];
			fVec162SE[1] = fVec162SE[0];
			fVec163SE[1] = fVec163SE[0];
			fVec157SE[2] = fVec157SE[1];
			fVec157SE[1] = fVec157SE[0];
			fVec158SE[1] = fVec158SE[0];
			fVec152SE[2] = fVec152SE[1];
			fVec152SE[1] = fVec152SE[0];
			fVec153SE[1] = fVec153SE[0];
			fVec149SE[2] = fVec149SE[1];
			fVec149SE[1] = fVec149SE[0];
			fVec150SE[1] = fVec150SE[0];
			fVec144SE[2] = fVec144SE[1];
			fVec144SE[1] = fVec144SE[0];
			fVec145SE[1] = fVec145SE[0];
			fVec139SE[2] = fVec139SE[1];
			fVec139SE[1] = fVec139SE[0];
			fVec140SE[1] = fVec140SE[0];
			fVec134SE[2] = fVec134SE[1];
			fVec134SE[1] = fVec134SE[0];
			fVec135SE[1] = fVec135SE[0];
			fVec129SE[2] = fVec129SE[1];
			fVec129SE[1] = fVec129SE[0];
			fVec130SE[1] = fVec130SE[0];
			fVec124SE[2] = fVec124SE[1];
			fVec124SE[1] = fVec124SE[0];
			fVec125SE[1] = fVec125SE[0];
			fVec121SE[2] = fVec121SE[1];
			fVec121SE[1] = fVec121SE[0];
			fVec122SE[1] = fVec122SE[0];
			fVec116SE[2] = fVec116SE[1];
			fVec116SE[1] = fVec116SE[0];
			fVec117SE[1] = fVec117SE[0];
			fVec111SE[2] = fVec111SE[1];
			fVec111SE[1] = fVec111SE[0];
			fVec112SE[1] = fVec112SE[0];
			fVec104SE[2] = fVec104SE[1];
			fVec104SE[1] = fVec104SE[0];
			fVec105SE[1] = fVec105SE[0];
			fVec102SE[1] = fVec102SE[0];
			fVec99SE[2] = fVec99SE[1];
			fVec99SE[1] = fVec99SE[0];
			fVec100SE[1] = fVec100SE[0];
			fVec96SE[1] = fVec96SE[0];
			fVec95SE[1] = fVec95SE[0];
			fVec88SE[2] = fVec88SE[1];
			fVec88SE[1] = fVec88SE[0];
			fVec91SE[1] = fVec91SE[0];
			fVec89SE[1] = fVec89SE[0];
			fVec81SE[2] = fVec81SE[1];
			fVec81SE[1] = fVec81SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec79SE[1] = fVec79SE[0];
			fVec75SE[2] = fVec75SE[1];
			fVec75SE[1] = fVec75SE[0];
			fVec76SE[1] = fVec76SE[0];
			fVec72SE[1] = fVec72SE[0];
			fVec71SE[1] = fVec71SE[0];
			fVec67SE[1] = fVec67SE[0];
			fVec51SE[1] = fVec51SE[0];
			fVec47SI[3] = fVec47SI[2];
			fVec47SI[2] = fVec47SI[1];
			fVec47SI[1] = fVec47SI[0];
			fVec48SI[1] = fVec48SI[0];
			iVec45SI[1] = iVec45SI[0];
			fVec44SE[1] = fVec44SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec37SE[1] = fVec37SE[0];
			fVec35SE[1] = fVec35SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec25SE[1] = fVec25SE[0];
			fVec23SE[1] = fVec23SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec11SE[1] = fVec11SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec11SEState = fVec11SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec16SEState = fVec16SE[1];
		fVec17SEState = fVec17SE[1];
		fVec19SEState = fVec19SE[1];
		fVec20SEState = fVec20SE[1];
		fVec21SEState = fVec21SE[1];
		fVec23SEState = fVec23SE[1];
		fVec25SEState = fVec25SE[1];
		fVec26SEState = fVec26SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec33SEState = fVec33SE[1];
		fVec34SEState = fVec34SE[1];
		fVec35SEState = fVec35SE[1];
		fVec37SEState = fVec37SE[1];
		fVec39SEState = fVec39SE[1];
		fVec40SEState = fVec40SE[1];
		fVec42SEState = fVec42SE[1];
		fVec44SEState = fVec44SE[1];
		iVec45SIState = iVec45SI[1];
		fVec48SIState = fVec48SI[1];
		fVec47SIState[0] = fVec47SI[1];
		fVec47SIState[1] = fVec47SI[2];
		fVec47SIState[2] = fVec47SI[3];
		fVec51SEState = fVec51SE[1];
		fVec67SEState = fVec67SE[1];
		fVec71SEState = fVec71SE[1];
		fVec72SEState = fVec72SE[1];
		fVec76SEState = fVec76SE[1];
		fVec75SEState[0] = fVec75SE[1];
		fVec75SEState[1] = fVec75SE[2];
		fVec79SEState = fVec79SE[1];
		fVec82SEState = fVec82SE[1];
		fVec81SEState[0] = fVec81SE[1];
		fVec81SEState[1] = fVec81SE[2];
		fVec89SEState = fVec89SE[1];
		fVec91SEState = fVec91SE[1];
		fVec88SEState[0] = fVec88SE[1];
		fVec88SEState[1] = fVec88SE[2];
		fVec95SEState = fVec95SE[1];
		fVec96SEState = fVec96SE[1];
		fVec100SEState = fVec100SE[1];
		fVec99SEState[0] = fVec99SE[1];
		fVec99SEState[1] = fVec99SE[2];
		fVec102SEState = fVec102SE[1];
		fVec105SEState = fVec105SE[1];
		fVec104SEState[0] = fVec104SE[1];
		fVec104SEState[1] = fVec104SE[2];
		fVec112SEState = fVec112SE[1];
		fVec111SEState[0] = fVec111SE[1];
		fVec111SEState[1] = fVec111SE[2];
		fVec117SEState = fVec117SE[1];
		fVec116SEState[0] = fVec116SE[1];
		fVec116SEState[1] = fVec116SE[2];
		fVec122SEState = fVec122SE[1];
		fVec121SEState[0] = fVec121SE[1];
		fVec121SEState[1] = fVec121SE[2];
		fVec125SEState = fVec125SE[1];
		fVec124SEState[0] = fVec124SE[1];
		fVec124SEState[1] = fVec124SE[2];
		fVec130SEState = fVec130SE[1];
		fVec129SEState[0] = fVec129SE[1];
		fVec129SEState[1] = fVec129SE[2];
		fVec135SEState = fVec135SE[1];
		fVec134SEState[0] = fVec134SE[1];
		fVec134SEState[1] = fVec134SE[2];
		fVec140SEState = fVec140SE[1];
		fVec139SEState[0] = fVec139SE[1];
		fVec139SEState[1] = fVec139SE[2];
		fVec145SEState = fVec145SE[1];
		fVec144SEState[0] = fVec144SE[1];
		fVec144SEState[1] = fVec144SE[2];
		fVec150SEState = fVec150SE[1];
		fVec149SEState[0] = fVec149SE[1];
		fVec149SEState[1] = fVec149SE[2];
		fVec153SEState = fVec153SE[1];
		fVec152SEState[0] = fVec152SE[1];
		fVec152SEState[1] = fVec152SE[2];
		fVec158SEState = fVec158SE[1];
		fVec157SEState[0] = fVec157SE[1];
		fVec157SEState[1] = fVec157SE[2];
		fVec163SEState = fVec163SE[1];
		fVec162SEState[0] = fVec162SE[1];
		fVec162SEState[1] = fVec162SE[2];
		fVec168SEState = fVec168SE[1];
		fVec167SEState[0] = fVec167SE[1];
		fVec167SEState[1] = fVec167SE[2];
		fVec173SEState = fVec173SE[1];
		fVec172SEState[0] = fVec172SE[1];
		fVec172SEState[1] = fVec172SE[2];
		fVec178SEState = fVec178SE[1];
		fVec177SEState[0] = fVec177SE[1];
		fVec177SEState[1] = fVec177SE[2];
		fVec181SEState = fVec181SE[1];
		fVec180SEState[0] = fVec180SE[1];
		fVec180SEState[1] = fVec180SE[2];
		fVec186SEState = fVec186SE[1];
		fVec185SEState[0] = fVec185SE[1];
		fVec185SEState[1] = fVec185SE[2];
		fVec191SEState = fVec191SE[1];
		fVec190SEState[0] = fVec190SE[1];
		fVec190SEState[1] = fVec190SE[2];
		fVec196SEState = fVec196SE[1];
		fVec195SEState[0] = fVec195SE[1];
		fVec195SEState[1] = fVec195SE[2];
		fVec201SEState = fVec201SE[1];
		fVec200SEState[0] = fVec200SE[1];
		fVec200SEState[1] = fVec200SE[2];
		fVec206SEState = fVec206SE[1];
		fVec205SEState[0] = fVec205SE[1];
		fVec205SEState[1] = fVec205SE[2];
		fVec209SEState = fVec209SE[1];
		fVec208SEState[0] = fVec208SE[1];
		fVec208SEState[1] = fVec208SE[2];
		fVec214SEState = fVec214SE[1];
		fVec213SEState[0] = fVec213SE[1];
		fVec213SEState[1] = fVec213SE[2];
		fVec219SEState = fVec219SE[1];
		fVec218SEState[0] = fVec218SE[1];
		fVec218SEState[1] = fVec218SE[2];
		fVec224SEState = fVec224SE[1];
		fVec223SEState[0] = fVec223SE[1];
		fVec223SEState[1] = fVec223SE[2];
		fVec229SEState = fVec229SE[1];
		fVec228SEState[0] = fVec228SE[1];
		fVec228SEState[1] = fVec228SE[2];
		fVec234SEState = fVec234SE[1];
		fVec233SEState[0] = fVec233SE[1];
		fVec233SEState[1] = fVec233SE[2];
		fVec237SEState = fVec237SE[1];
		fVec236SEState[0] = fVec236SE[1];
		fVec236SEState[1] = fVec236SE[2];
		fVec242SEState = fVec242SE[1];
		fVec241SEState[0] = fVec241SE[1];
		fVec241SEState[1] = fVec241SE[2];
		fVec247SEState = fVec247SE[1];
		fVec246SEState[0] = fVec246SE[1];
		fVec246SEState[1] = fVec246SE[2];
		fVec252SEState = fVec252SE[1];
		fVec251SEState[0] = fVec251SE[1];
		fVec251SEState[1] = fVec251SE[2];
		fVec257SEState = fVec257SE[1];
		fVec256SEState[0] = fVec256SE[1];
		fVec256SEState[1] = fVec256SE[2];
		fVec262SEState = fVec262SE[1];
		fVec261SEState[0] = fVec261SE[1];
		fVec261SEState[1] = fVec261SE[2];
		fVec265SEState = fVec265SE[1];
		fVec264SEState[0] = fVec264SE[1];
		fVec264SEState[1] = fVec264SE[2];
		fVec270SEState = fVec270SE[1];
		fVec269SEState[0] = fVec269SE[1];
		fVec269SEState[1] = fVec269SE[2];
		fVec275SEState = fVec275SE[1];
		fVec274SEState[0] = fVec274SE[1];
		fVec274SEState[1] = fVec274SE[2];
		fVec280SEState = fVec280SE[1];
		fVec279SEState[0] = fVec279SE[1];
		fVec279SEState[1] = fVec279SE[2];
		fVec285SEState = fVec285SE[1];
		fVec284SEState[0] = fVec284SE[1];
		fVec284SEState[1] = fVec284SE[2];
		fVec290SEState = fVec290SE[1];
		fVec289SEState[0] = fVec289SE[1];
		fVec289SEState[1] = fVec289SE[2];
		fVec293SEState = fVec293SE[1];
		fVec292SEState[0] = fVec292SE[1];
		fVec292SEState[1] = fVec292SE[2];
		fVec298SEState = fVec298SE[1];
		fVec297SEState[0] = fVec297SE[1];
		fVec297SEState[1] = fVec297SE[2];
		fVec303SEState = fVec303SE[1];
		fVec302SEState[0] = fVec302SE[1];
		fVec302SEState[1] = fVec302SE[2];
		fVec308SEState = fVec308SE[1];
		fVec307SEState[0] = fVec307SE[1];
		fVec307SEState[1] = fVec307SE[2];
		fVec313SEState = fVec313SE[1];
		fVec312SEState[0] = fVec312SE[1];
		fVec312SEState[1] = fVec312SE[2];
		fVec318SEState = fVec318SE[1];
		fVec317SEState[0] = fVec317SE[1];
		fVec317SEState[1] = fVec317SE[2];
		fVec321SEState = fVec321SE[1];
		fVec320SEState[0] = fVec320SE[1];
		fVec320SEState[1] = fVec320SE[2];
		fVec326SEState = fVec326SE[1];
		fVec325SEState[0] = fVec325SE[1];
		fVec325SEState[1] = fVec325SE[2];
		fVec331SEState = fVec331SE[1];
		fVec330SEState[0] = fVec330SE[1];
		fVec330SEState[1] = fVec330SE[2];
		fVec336SEState = fVec336SE[1];
		fVec335SEState[0] = fVec335SE[1];
		fVec335SEState[1] = fVec335SE[2];
		fVec341SEState = fVec341SE[1];
		fVec340SEState[0] = fVec340SE[1];
		fVec340SEState[1] = fVec340SE[2];
		fVec346SEState = fVec346SE[1];
		fVec345SEState[0] = fVec345SE[1];
		fVec345SEState[1] = fVec345SE[2];
		fVec349SEState = fVec349SE[1];
		fVec348SEState[0] = fVec348SE[1];
		fVec348SEState[1] = fVec348SE[2];
		fVec354SEState = fVec354SE[1];
		fVec353SEState[0] = fVec353SE[1];
		fVec353SEState[1] = fVec353SE[2];
		fVec359SEState = fVec359SE[1];
		fVec358SEState[0] = fVec358SE[1];
		fVec358SEState[1] = fVec358SE[2];
		fVec364SEState = fVec364SE[1];
		fVec363SEState[0] = fVec363SE[1];
		fVec363SEState[1] = fVec363SE[2];
		fVec369SEState = fVec369SE[1];
		fVec368SEState[0] = fVec368SE[1];
		fVec368SEState[1] = fVec368SE[2];
		fVec374SEState = fVec374SE[1];
		fVec373SEState[0] = fVec373SE[1];
		fVec373SEState[1] = fVec373SE[2];
		fVec377SEState = fVec377SE[1];
		fVec376SEState[0] = fVec376SE[1];
		fVec376SEState[1] = fVec376SE[2];
		fVec382SEState = fVec382SE[1];
		fVec381SEState[0] = fVec381SE[1];
		fVec381SEState[1] = fVec381SE[2];
		fVec387SEState = fVec387SE[1];
		fVec386SEState[0] = fVec386SE[1];
		fVec386SEState[1] = fVec386SE[2];
		fVec392SEState = fVec392SE[1];
		fVec391SEState[0] = fVec391SE[1];
		fVec391SEState[1] = fVec391SE[2];
		fVec397SEState = fVec397SE[1];
		fVec396SEState[0] = fVec396SE[1];
		fVec396SEState[1] = fVec396SE[2];
		fVec402SEState = fVec402SE[1];
		fVec401SEState[0] = fVec401SE[1];
		fVec401SEState[1] = fVec401SE[2];
		fVec405SEState = fVec405SE[1];
		fVec404SEState[0] = fVec404SE[1];
		fVec404SEState[1] = fVec404SE[2];
		fVec410SEState = fVec410SE[1];
		fVec409SEState[0] = fVec409SE[1];
		fVec409SEState[1] = fVec409SE[2];
		fVec415SEState = fVec415SE[1];
		fVec414SEState[0] = fVec414SE[1];
		fVec414SEState[1] = fVec414SE[2];
		fVec420SEState = fVec420SE[1];
		fVec419SEState[0] = fVec419SE[1];
		fVec419SEState[1] = fVec419SE[2];
		fVec425SEState = fVec425SE[1];
		fVec424SEState[0] = fVec424SE[1];
		fVec424SEState[1] = fVec424SE[2];
		fVec430SEState = fVec430SE[1];
		fVec429SEState[0] = fVec429SE[1];
		fVec429SEState[1] = fVec429SE[2];
		fVec433SEState = fVec433SE[1];
		fVec432SEState[0] = fVec432SE[1];
		fVec432SEState[1] = fVec432SE[2];
		fVec438SEState = fVec438SE[1];
		fVec437SEState[0] = fVec437SE[1];
		fVec437SEState[1] = fVec437SE[2];
		fVec443SEState = fVec443SE[1];
		fVec442SEState[0] = fVec442SE[1];
		fVec442SEState[1] = fVec442SE[2];
		fVec448SEState = fVec448SE[1];
		fVec447SEState[0] = fVec447SE[1];
		fVec447SEState[1] = fVec447SE[2];
		fVec453SEState = fVec453SE[1];
		fVec452SEState[0] = fVec452SE[1];
		fVec452SEState[1] = fVec452SE[2];
		fVec458SEState = fVec458SE[1];
		fVec457SEState[0] = fVec457SE[1];
		fVec457SEState[1] = fVec457SE[2];
		fVec461SEState = fVec461SE[1];
		fVec460SEState[0] = fVec460SE[1];
		fVec460SEState[1] = fVec460SE[2];
		fVec466SEState = fVec466SE[1];
		fVec465SEState[0] = fVec465SE[1];
		fVec465SEState[1] = fVec465SE[2];
		fVec471SEState = fVec471SE[1];
		fVec470SEState[0] = fVec470SE[1];
		fVec470SEState[1] = fVec470SE[2];
		fVec476SEState = fVec476SE[1];
		fVec475SEState[0] = fVec475SE[1];
		fVec475SEState[1] = fVec475SE[2];
		fVec481SEState = fVec481SE[1];
		fVec480SEState[0] = fVec480SE[1];
		fVec480SEState[1] = fVec480SE[2];
		fVec486SEState = fVec486SE[1];
		fVec485SEState[0] = fVec485SE[1];
		fVec485SEState[1] = fVec485SE[2];
		fVec489SEState = fVec489SE[1];
		fVec488SEState[0] = fVec488SE[1];
		fVec488SEState[1] = fVec488SE[2];
		fVec494SEState = fVec494SE[1];
		fVec493SEState[0] = fVec493SE[1];
		fVec493SEState[1] = fVec493SE[2];
		fVec499SEState = fVec499SE[1];
		fVec498SEState[0] = fVec498SE[1];
		fVec498SEState[1] = fVec498SE[2];
		fVec504SEState = fVec504SE[1];
		fVec503SEState[0] = fVec503SE[1];
		fVec503SEState[1] = fVec503SE[2];
		fVec509SEState = fVec509SE[1];
		fVec508SEState[0] = fVec508SE[1];
		fVec508SEState[1] = fVec508SE[2];
		fVec514SEState = fVec514SE[1];
		fVec513SEState[0] = fVec513SE[1];
		fVec513SEState[1] = fVec513SE[2];
		fVec517SEState = fVec517SE[1];
		fVec516SEState[0] = fVec516SE[1];
		fVec516SEState[1] = fVec516SE[2];
		fVec522SEState = fVec522SE[1];
		fVec521SEState[0] = fVec521SE[1];
		fVec521SEState[1] = fVec521SE[2];
		fVec527SEState = fVec527SE[1];
		fVec526SEState[0] = fVec526SE[1];
		fVec526SEState[1] = fVec526SE[2];
		fVec532SEState = fVec532SE[1];
		fVec531SEState[0] = fVec531SE[1];
		fVec531SEState[1] = fVec531SE[2];
		fVec537SEState = fVec537SE[1];
		fVec536SEState[0] = fVec536SE[1];
		fVec536SEState[1] = fVec536SE[2];
		fVec542SEState = fVec542SE[1];
		fVec541SEState[0] = fVec541SE[1];
		fVec541SEState[1] = fVec541SE[2];
		fVec545SEState = fVec545SE[1];
		fVec544SEState[0] = fVec544SE[1];
		fVec544SEState[1] = fVec544SE[2];
		fVec550SEState = fVec550SE[1];
		fVec549SEState[0] = fVec549SE[1];
		fVec549SEState[1] = fVec549SE[2];
		fVec555SEState = fVec555SE[1];
		fVec554SEState[0] = fVec554SE[1];
		fVec554SEState[1] = fVec554SE[2];
		fVec560SEState = fVec560SE[1];
		fVec559SEState[0] = fVec559SE[1];
		fVec559SEState[1] = fVec559SE[2];
		fVec565SEState = fVec565SE[1];
		fVec564SEState[0] = fVec564SE[1];
		fVec564SEState[1] = fVec564SE[2];
		fVec570SEState = fVec570SE[1];
		fVec569SEState[0] = fVec569SE[1];
		fVec569SEState[1] = fVec569SE[2];
		fVec573SEState = fVec573SE[1];
		fVec572SEState[0] = fVec572SE[1];
		fVec572SEState[1] = fVec572SE[2];
		fVec578SEState = fVec578SE[1];
		fVec577SEState[0] = fVec577SE[1];
		fVec577SEState[1] = fVec577SE[2];
		fVec583SEState = fVec583SE[1];
		fVec582SEState[0] = fVec582SE[1];
		fVec582SEState[1] = fVec582SE[2];
		fVec588SEState = fVec588SE[1];
		fVec587SEState[0] = fVec587SE[1];
		fVec587SEState[1] = fVec587SE[2];
		fVec593SEState = fVec593SE[1];
		fVec592SEState[0] = fVec592SE[1];
		fVec592SEState[1] = fVec592SE[2];
		fVec598SEState = fVec598SE[1];
		fVec597SEState[0] = fVec597SE[1];
		fVec597SEState[1] = fVec597SE[2];
		fVec601SEState = fVec601SE[1];
		fVec600SEState[0] = fVec600SE[1];
		fVec600SEState[1] = fVec600SE[2];
		fVec606SEState = fVec606SE[1];
		fVec605SEState[0] = fVec605SE[1];
		fVec605SEState[1] = fVec605SE[2];
		fVec611SEState = fVec611SE[1];
		fVec610SEState[0] = fVec610SE[1];
		fVec610SEState[1] = fVec610SE[2];
		fVec616SEState = fVec616SE[1];
		fVec615SEState[0] = fVec615SE[1];
		fVec615SEState[1] = fVec615SE[2];
		fVec621SEState = fVec621SE[1];
		fVec620SEState[0] = fVec620SE[1];
		fVec620SEState[1] = fVec620SE[2];
		fVec626SEState = fVec626SE[1];
		fVec625SEState[0] = fVec625SE[1];
		fVec625SEState[1] = fVec625SE[2];
		fVec629SEState = fVec629SE[1];
		fVec628SEState[0] = fVec628SE[1];
		fVec628SEState[1] = fVec628SE[2];
		fVec634SEState = fVec634SE[1];
		fVec633SEState[0] = fVec633SE[1];
		fVec633SEState[1] = fVec633SE[2];
		fVec639SEState = fVec639SE[1];
		fVec638SEState[0] = fVec638SE[1];
		fVec638SEState[1] = fVec638SE[2];
		fVec641SEState = fVec641SE[1];
		fVec645SEState = fVec645SE[1];
		fVec649SEState = fVec649SE[1];
		fVec653SEState = fVec653SE[1];
		fVec657SEState = fVec657SE[1];
		fVec661SEState = fVec661SE[1];
		fVec665SEState = fVec665SE[1];
		fVec669SEState = fVec669SE[1];
		fVec673SEState = fVec673SE[1];
		fVec677SEState = fVec677SE[1];
		fVec681SEState = fVec681SE[1];
		fVec685SEState = fVec685SE[1];
		fVec689SEState = fVec689SE[1];
		fVec693SEState = fVec693SE[1];
		fVec697SEState = fVec697SE[1];
		fVec701SEState = fVec701SE[1];
		fVec705SEState = fVec705SE[1];
		fVec709SEState = fVec709SE[1];
		fVec713SEState = fVec713SE[1];
		fVec717SEState = fVec717SE[1];
		fbargraph0 = fSlow40SE;
		fbargraph1 = fSlow41SE;
		fbargraph2 = fSlow42SE;
		fbargraph3 = fSlow43SE;
		fbargraph4 = fSlow44SE;
		fbargraph5 = fSlow45SE;
		fbargraph6 = fSlow46SE;
		fbargraph7 = fSlow47SE;
		fbargraph8 = fSlow48SE;
		fbargraph9 = fSlow49SE;
		fbargraph10 = fSlow50SE;
		fbargraph11 = fSlow51SE;
		fbargraph12 = fSlow52SE;
		fbargraph13 = fSlow53SE;
		fbargraph14 = fSlow54SE;
		fbargraph15 = fSlow55SE;
		fbargraph16 = fSlow56SE;
		fbargraph17 = fSlow57SE;
		fbargraph18 = fSlow58SE;
		fbargraph19 = fSlow59SE;
	}
};


