//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "tapiir"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fConst0KI; // step: 23
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	int 	IOTA0;
	float 	fVec6SE[524288]; // Ring Delay
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	FAUSTFLOAT 	fslider21;
	FAUSTFLOAT 	fslider22;
	FAUSTFLOAT 	fslider23;
	FAUSTFLOAT 	fslider24;
	float 	fVec9SE[524288]; // Ring Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider25;
	FAUSTFLOAT 	fslider26;
	FAUSTFLOAT 	fslider27;
	FAUSTFLOAT 	fslider28;
	FAUSTFLOAT 	fslider29;
	FAUSTFLOAT 	fslider30;
	FAUSTFLOAT 	fslider31;
	FAUSTFLOAT 	fslider32;
	FAUSTFLOAT 	fslider33;
	FAUSTFLOAT 	fslider34;
	FAUSTFLOAT 	fslider35;
	float 	fVec12SE[524288]; // Ring Delay
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	FAUSTFLOAT 	fslider36;
	FAUSTFLOAT 	fslider37;
	FAUSTFLOAT 	fslider38;
	FAUSTFLOAT 	fslider39;
	FAUSTFLOAT 	fslider40;
	FAUSTFLOAT 	fslider41;
	FAUSTFLOAT 	fslider42;
	FAUSTFLOAT 	fslider43;
	FAUSTFLOAT 	fslider44;
	FAUSTFLOAT 	fslider45;
	FAUSTFLOAT 	fslider46;
	float 	fVec15SE[524288]; // Ring Delay
	// Recursion delay fVec3SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec3SEState; // Single Delay
	FAUSTFLOAT 	fslider47;
	FAUSTFLOAT 	fslider48;
	FAUSTFLOAT 	fslider49;
	FAUSTFLOAT 	fslider50;
	FAUSTFLOAT 	fslider51;
	FAUSTFLOAT 	fslider52;
	FAUSTFLOAT 	fslider53;
	FAUSTFLOAT 	fslider54;
	FAUSTFLOAT 	fslider55;
	FAUSTFLOAT 	fslider56;
	FAUSTFLOAT 	fslider57;
	float 	fVec18SE[524288]; // Ring Delay
	// Recursion delay fVec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SEState; // Single Delay
	FAUSTFLOAT 	fslider58;
	FAUSTFLOAT 	fslider59;
	FAUSTFLOAT 	fslider60;
	FAUSTFLOAT 	fslider61;
	FAUSTFLOAT 	fslider62;
	FAUSTFLOAT 	fslider63;
	FAUSTFLOAT 	fslider64;
	FAUSTFLOAT 	fslider65;
	FAUSTFLOAT 	fslider66;
	FAUSTFLOAT 	fslider67;
	FAUSTFLOAT 	fslider68;
	float 	fVec21SE[524288]; // Ring Delay
	// Recursion delay fVec5SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SEState; // Single Delay
	FAUSTFLOAT 	fslider69;
	FAUSTFLOAT 	fslider70;
	FAUSTFLOAT 	fslider71;
	FAUSTFLOAT 	fslider72;
	FAUSTFLOAT 	fslider73;
	FAUSTFLOAT 	fslider74;
	FAUSTFLOAT 	fslider75;
	FAUSTFLOAT 	fslider76;
	FAUSTFLOAT 	fslider77;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "tapiir.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "tapiir");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 23
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1.0f;
		fslider1 = 1.0f;
		fslider2 = 1.0f;
		fslider3 = 0.0f;
		fslider4 = 0.0f;
		fslider5 = 1.0f;
		fslider6 = 1.0f;
		fslider7 = 1.0f;
		fslider8 = 0.0f;
		fslider9 = 0.0f;
		fslider10 = 0.0f;
		fslider11 = 0.0f;
		fslider12 = 0.0f;
		fslider13 = 0.0f;
		fslider14 = 0.0f;
		fslider15 = 0.0f;
		fslider16 = 1.0f;
		fslider17 = 1.0f;
		fslider18 = 1.0f;
		fslider19 = 0.0f;
		fslider20 = 0.0f;
		fslider21 = 0.0f;
		fslider22 = 0.0f;
		fslider23 = 0.0f;
		fslider24 = 0.0f;
		fslider25 = 0.0f;
		fslider26 = 0.0f;
		fslider27 = 1.0f;
		fslider28 = 1.0f;
		fslider29 = 1.0f;
		fslider30 = 0.0f;
		fslider31 = 0.0f;
		fslider32 = 0.0f;
		fslider33 = 0.0f;
		fslider34 = 0.0f;
		fslider35 = 0.0f;
		fslider36 = 0.0f;
		fslider37 = 0.0f;
		fslider38 = 1.0f;
		fslider39 = 1.0f;
		fslider40 = 1.0f;
		fslider41 = 0.0f;
		fslider42 = 0.0f;
		fslider43 = 0.0f;
		fslider44 = 0.0f;
		fslider45 = 0.0f;
		fslider46 = 0.0f;
		fslider47 = 0.0f;
		fslider48 = 0.0f;
		fslider49 = 1.0f;
		fslider50 = 1.0f;
		fslider51 = 1.0f;
		fslider52 = 0.0f;
		fslider53 = 0.0f;
		fslider54 = 0.0f;
		fslider55 = 0.0f;
		fslider56 = 0.0f;
		fslider57 = 0.0f;
		fslider58 = 0.0f;
		fslider59 = 0.0f;
		fslider60 = 1.0f;
		fslider61 = 1.0f;
		fslider62 = 1.0f;
		fslider63 = 0.0f;
		fslider64 = 0.0f;
		fslider65 = 0.0f;
		fslider66 = 0.0f;
		fslider67 = 0.0f;
		fslider68 = 0.0f;
		fslider69 = 1.0f;
		fslider70 = 1.0f;
		fslider71 = 1.0f;
		fslider72 = 0.0f;
		fslider73 = 0.0f;
		fslider74 = 0.0f;
		fslider75 = 0.0f;
		fslider76 = 0.0f;
		fslider77 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 524288; i++) { fVec6SE[i] = 0; }
		fVec6SE[0] = -1;  // detect unintialized
		fVec0SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec9SE[i] = 0; }
		fVec9SE[0] = -1;  // detect unintialized
		fVec1SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec12SE[i] = 0; }
		fVec12SE[0] = -1;  // detect unintialized
		fVec2SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec15SE[i] = 0; }
		fVec15SE[0] = -1;  // detect unintialized
		fVec3SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec18SE[i] = 0; }
		fVec18SE[0] = -1;  // detect unintialized
		fVec4SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec21SE[i] = 0; }
		fVec21SE[0] = -1;  // detect unintialized
		fVec5SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Tapiir");
		ui_interface->openTabBox("0x00");
		ui_interface->openHorizontalBox("Tap 0");
		ui_interface->addVerticalSlider("delay (sec)", &fslider4, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider5, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider6, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider7, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider8, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider9, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider10, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider11, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider12, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider13, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Tap 1");
		ui_interface->addVerticalSlider("delay (sec)", &fslider15, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider16, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider17, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider18, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider19, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider20, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider21, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider22, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider23, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider24, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Tap 2");
		ui_interface->addVerticalSlider("delay (sec)", &fslider26, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider27, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider28, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider29, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider30, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider31, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider32, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider33, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider34, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider35, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Tap 3");
		ui_interface->addVerticalSlider("delay (sec)", &fslider37, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider38, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider39, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider40, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider41, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider42, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider43, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider44, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider45, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider46, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Tap 4");
		ui_interface->addVerticalSlider("delay (sec)", &fslider48, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider49, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider50, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider51, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider52, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider53, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider54, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider55, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider56, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider57, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Tap 5");
		ui_interface->addVerticalSlider("delay (sec)", &fslider59, 0.0f, 0.0f, 5.0f, 0.01f);
		ui_interface->addVerticalSlider("gain", &fslider60, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider61, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider62, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider63, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider64, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider65, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider66, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider67, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider68, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->openVerticalBox("outputs");
		ui_interface->openHorizontalBox("output 0");
		ui_interface->addVerticalSlider("gain", &fslider0, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider1, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider2, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider3, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider14, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider25, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider36, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider47, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider58, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("output 1");
		ui_interface->addVerticalSlider("gain", &fslider69, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 0", &fslider70, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("input 1", &fslider71, 1.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 0", &fslider72, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 1", &fslider73, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 2", &fslider74, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 3", &fslider75, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 4", &fslider76, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->addVerticalSlider("tap 5", &fslider77, 0.0f, 0.0f, 1.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = float(fslider0); // Zone 2, step: 4
		float 	fTemp0SE; // step: 6
		float 	fSlow1BE = float(fslider1); // Zone 2, step: 7
		float 	fTemp1SE; // step: 10
		float 	fSlow2BE = float(fslider2); // Zone 2, step: 11
		float 	fSlow3BE = float(fslider3); // Zone 2, step: 13
		int 	iSlow4BE = (int((fConst0KI * float(fslider4))) & 524287); // Zone 2, step: 26
		float 	fSlow5BE = float(fslider5); // Zone 2, step: 27
		float 	fSlow6BE = float(fslider6); // Zone 2, step: 28
		float 	fSlow7BE = float(fslider7); // Zone 2, step: 30
		float 	fSlow8BE = float(fslider8); // Zone 2, step: 32
		float 	fTemp2SE; // step: 35
		float 	fSlow9BE = float(fslider9); // Zone 2, step: 37
		float 	fTemp3SE; // step: 39
		float 	fSlow10BE = float(fslider10); // Zone 2, step: 41
		float 	fTemp4SE; // step: 43
		float 	fSlow11BE = float(fslider11); // Zone 2, step: 45
		float 	fTemp5SE; // step: 47
		float 	fSlow12BE = float(fslider12); // Zone 2, step: 49
		float 	fTemp6SE; // step: 51
		float 	fSlow13BE = float(fslider13); // Zone 2, step: 53
		float 	fTemp7SE; // step: 55
		float 	fVec0SE[2];
		float 	fTemp8SE; // step: 62
		float 	fSlow14BE = float(fslider14); // Zone 2, step: 64
		int 	iSlow15BE = (int((fConst0KI * float(fslider15))) & 524287); // Zone 2, step: 68
		float 	fSlow16BE = float(fslider16); // Zone 2, step: 69
		float 	fSlow17BE = float(fslider17); // Zone 2, step: 70
		float 	fSlow18BE = float(fslider18); // Zone 2, step: 72
		float 	fSlow19BE = float(fslider19); // Zone 2, step: 74
		float 	fSlow20BE = float(fslider20); // Zone 2, step: 76
		float 	fSlow21BE = float(fslider21); // Zone 2, step: 78
		float 	fSlow22BE = float(fslider22); // Zone 2, step: 80
		float 	fSlow23BE = float(fslider23); // Zone 2, step: 82
		float 	fSlow24BE = float(fslider24); // Zone 2, step: 84
		float 	fVec1SE[2];
		float 	fTemp9SE; // step: 91
		float 	fSlow25BE = float(fslider25); // Zone 2, step: 93
		int 	iSlow26BE = (int((fConst0KI * float(fslider26))) & 524287); // Zone 2, step: 97
		float 	fSlow27BE = float(fslider27); // Zone 2, step: 98
		float 	fSlow28BE = float(fslider28); // Zone 2, step: 99
		float 	fSlow29BE = float(fslider29); // Zone 2, step: 101
		float 	fSlow30BE = float(fslider30); // Zone 2, step: 103
		float 	fSlow31BE = float(fslider31); // Zone 2, step: 105
		float 	fSlow32BE = float(fslider32); // Zone 2, step: 107
		float 	fSlow33BE = float(fslider33); // Zone 2, step: 109
		float 	fSlow34BE = float(fslider34); // Zone 2, step: 111
		float 	fSlow35BE = float(fslider35); // Zone 2, step: 113
		float 	fVec2SE[2];
		float 	fTemp10SE; // step: 120
		float 	fSlow36BE = float(fslider36); // Zone 2, step: 122
		int 	iSlow37BE = (int((fConst0KI * float(fslider37))) & 524287); // Zone 2, step: 126
		float 	fSlow38BE = float(fslider38); // Zone 2, step: 127
		float 	fSlow39BE = float(fslider39); // Zone 2, step: 128
		float 	fSlow40BE = float(fslider40); // Zone 2, step: 130
		float 	fSlow41BE = float(fslider41); // Zone 2, step: 132
		float 	fSlow42BE = float(fslider42); // Zone 2, step: 134
		float 	fSlow43BE = float(fslider43); // Zone 2, step: 136
		float 	fSlow44BE = float(fslider44); // Zone 2, step: 138
		float 	fSlow45BE = float(fslider45); // Zone 2, step: 140
		float 	fSlow46BE = float(fslider46); // Zone 2, step: 142
		float 	fVec3SE[2];
		float 	fTemp11SE; // step: 149
		float 	fSlow47BE = float(fslider47); // Zone 2, step: 151
		int 	iSlow48BE = (int((fConst0KI * float(fslider48))) & 524287); // Zone 2, step: 155
		float 	fSlow49BE = float(fslider49); // Zone 2, step: 156
		float 	fSlow50BE = float(fslider50); // Zone 2, step: 157
		float 	fSlow51BE = float(fslider51); // Zone 2, step: 159
		float 	fSlow52BE = float(fslider52); // Zone 2, step: 161
		float 	fSlow53BE = float(fslider53); // Zone 2, step: 163
		float 	fSlow54BE = float(fslider54); // Zone 2, step: 165
		float 	fSlow55BE = float(fslider55); // Zone 2, step: 167
		float 	fSlow56BE = float(fslider56); // Zone 2, step: 169
		float 	fSlow57BE = float(fslider57); // Zone 2, step: 171
		float 	fVec4SE[2];
		float 	fTemp12SE; // step: 178
		float 	fSlow58BE = float(fslider58); // Zone 2, step: 180
		int 	iSlow59BE = (int((fConst0KI * float(fslider59))) & 524287); // Zone 2, step: 184
		float 	fSlow60BE = float(fslider60); // Zone 2, step: 185
		float 	fSlow61BE = float(fslider61); // Zone 2, step: 186
		float 	fSlow62BE = float(fslider62); // Zone 2, step: 188
		float 	fSlow63BE = float(fslider63); // Zone 2, step: 190
		float 	fSlow64BE = float(fslider64); // Zone 2, step: 192
		float 	fSlow65BE = float(fslider65); // Zone 2, step: 194
		float 	fSlow66BE = float(fslider66); // Zone 2, step: 196
		float 	fSlow67BE = float(fslider67); // Zone 2, step: 198
		float 	fSlow68BE = float(fslider68); // Zone 2, step: 200
		float 	fVec5SE[2];
		float 	fTemp13SE; // step: 207
		float 	fSlow69BE = float(fslider69); // Zone 2, step: 211
		float 	fSlow70BE = float(fslider70); // Zone 2, step: 212
		float 	fSlow71BE = float(fslider71); // Zone 2, step: 214
		float 	fSlow72BE = float(fslider72); // Zone 2, step: 216
		float 	fSlow73BE = float(fslider73); // Zone 2, step: 218
		float 	fSlow74BE = float(fslider74); // Zone 2, step: 220
		float 	fSlow75BE = float(fslider75); // Zone 2, step: 222
		float 	fSlow76BE = float(fslider76); // Zone 2, step: 224
		float 	fSlow77BE = float(fslider77); // Zone 2, step: 226
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec1SE[1] = fVec1SEState;
		fVec2SE[1] = fVec2SEState;
		fVec3SE[1] = fVec3SEState;
		fVec4SE[1] = fVec4SEState;
		fVec5SE[1] = fVec5SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 6
			fTemp1SE = (float)input1[i]; // step: 10
			fTemp2SE = fVec0SE[1]; // step: 35
			fTemp3SE = fVec1SE[1]; // step: 39
			fTemp4SE = fVec2SE[1]; // step: 43
			fTemp5SE = fVec3SE[1]; // step: 47
			fTemp6SE = fVec4SE[1]; // step: 51
			fTemp7SE = fVec5SE[1]; // step: 55
			fVec6SE[IOTA0&524287] = (fSlow5BE * ((fSlow8BE * fTemp2SE) + (fSlow9BE * fTemp3SE) + (fSlow10BE * fTemp4SE) + (fSlow11BE * fTemp5SE) + (fSlow12BE * fTemp6SE) + (fSlow13BE * fTemp7SE) + (fSlow6BE * fTemp0SE) + (fSlow7BE * fTemp1SE) /* Sum */));
			fVec0SE[0] = fVec6SE[(IOTA0-iSlow4BE)&524287];
			fTemp8SE = fVec0SE[0]; // step: 62
			fVec9SE[IOTA0&524287] = (fSlow16BE * ((fSlow19BE * fTemp2SE) + (fSlow20BE * fTemp3SE) + (fSlow21BE * fTemp4SE) + (fSlow22BE * fTemp5SE) + (fSlow23BE * fTemp6SE) + (fSlow24BE * fTemp7SE) + (fSlow17BE * fTemp0SE) + (fSlow18BE * fTemp1SE) /* Sum */));
			fVec1SE[0] = fVec9SE[(IOTA0-iSlow15BE)&524287];
			fTemp9SE = fVec1SE[0]; // step: 91
			fVec12SE[IOTA0&524287] = (fSlow27BE * ((fSlow30BE * fTemp2SE) + (fSlow31BE * fTemp3SE) + (fSlow32BE * fTemp4SE) + (fSlow33BE * fTemp5SE) + (fSlow34BE * fTemp6SE) + (fSlow35BE * fTemp7SE) + (fSlow28BE * fTemp0SE) + (fSlow29BE * fTemp1SE) /* Sum */));
			fVec2SE[0] = fVec12SE[(IOTA0-iSlow26BE)&524287];
			fTemp10SE = fVec2SE[0]; // step: 120
			fVec15SE[IOTA0&524287] = (fSlow38BE * ((fSlow41BE * fTemp2SE) + (fSlow42BE * fTemp3SE) + (fSlow43BE * fTemp4SE) + (fSlow44BE * fTemp5SE) + (fSlow45BE * fTemp6SE) + (fSlow46BE * fTemp7SE) + (fSlow39BE * fTemp0SE) + (fSlow40BE * fTemp1SE) /* Sum */));
			fVec3SE[0] = fVec15SE[(IOTA0-iSlow37BE)&524287];
			fTemp11SE = fVec3SE[0]; // step: 149
			fVec18SE[IOTA0&524287] = (fSlow49BE * ((fSlow52BE * fTemp2SE) + (fSlow53BE * fTemp3SE) + (fSlow54BE * fTemp4SE) + (fSlow55BE * fTemp5SE) + (fSlow56BE * fTemp6SE) + (fSlow57BE * fTemp7SE) + (fSlow50BE * fTemp0SE) + (fSlow51BE * fTemp1SE) /* Sum */));
			fVec4SE[0] = fVec18SE[(IOTA0-iSlow48BE)&524287];
			fTemp12SE = fVec4SE[0]; // step: 178
			fVec21SE[IOTA0&524287] = (fSlow60BE * ((fSlow63BE * fTemp2SE) + (fSlow64BE * fTemp3SE) + (fSlow65BE * fTemp4SE) + (fSlow66BE * fTemp5SE) + (fSlow67BE * fTemp6SE) + (fSlow68BE * fTemp7SE) + (fSlow61BE * fTemp0SE) + (fSlow62BE * fTemp1SE) /* Sum */));
			fVec5SE[0] = fVec21SE[(IOTA0-iSlow59BE)&524287];
			fTemp13SE = fVec5SE[0]; // step: 207
			output0[i] = (FAUSTFLOAT)((fSlow0BE * ((fSlow3BE * fTemp8SE) + (fSlow14BE * fTemp9SE) + (fSlow25BE * fTemp10SE) + (fSlow36BE * fTemp11SE) + (fSlow47BE * fTemp12SE) + (fSlow58BE * fTemp13SE) + (fSlow1BE * fTemp0SE) + (fSlow2BE * fTemp1SE) /* Sum */)));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fSlow69BE * ((fSlow72BE * fTemp8SE) + (fSlow73BE * fTemp9SE) + (fSlow74BE * fTemp10SE) + (fSlow75BE * fTemp11SE) + (fSlow76BE * fTemp12SE) + (fSlow77BE * fTemp13SE) + (fSlow70BE * fTemp0SE) + (fSlow71BE * fTemp1SE) /* Sum */)));  // Zone Exec Code
			// post processing
			fVec5SE[1] = fVec5SE[0];
			fVec4SE[1] = fVec4SE[0];
			fVec3SE[1] = fVec3SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec0SE[1] = fVec0SE[0];
			++IOTA0;
		}
		fVec0SEState = fVec0SE[1];
		fVec1SEState = fVec1SE[1];
		fVec2SEState = fVec2SE[1];
		fVec3SEState = fVec3SE[1];
		fVec4SEState = fVec4SE[1];
		fVec5SEState = fVec5SE[1];
	}
};


