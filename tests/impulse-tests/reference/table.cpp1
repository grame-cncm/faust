//----------------------------------------------------------
// name: "table"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec4SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec4SIState; // Single Delay
		float 	fVec2SIState[2]; // Copy Delay
		// Recursion delay fVec6SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		float 	fVec6SIState; // Single Delay
		float 	fVec9SIState[3]; // Copy Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec4SIState = 0;
			for (int j = 0; j < 2; j++) { fVec2SIState[j] = 0; }
			fVec6SIState = 0;
			for (int j = 0; j < 3; j++) { fVec9SIState[j] = 0; }
		}
		void fill(int count, float output[]) {
			int 	iVec4SI[2];
			float 	fTemp1SI; // step: 52
			float 	fVec2SI[3];
			float 	fVec6SI[2];
			float 	fTemp2SI; // step: 59
			float 	fVec9SI[4];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec4SI[1] = iVec4SIState;
				fVec2SI[1] = fVec2SIState[0];
				fVec2SI[2] = fVec2SIState[1];
				fVec6SI[1] = fVec6SIState;
				fVec9SI[1] = fVec9SIState[0];
				fVec9SI[2] = fVec9SIState[1];
				fVec9SI[3] = fVec9SIState[2];
				for (int i=0; i<count; i++) {
					iVec4SI[0] = ((1103515245 * iVec4SI[1]) + 12345);
					fTemp1SI = fVec6SI[1]; // step: 52
					fVec2SI[0] = fTemp1SI;
					fVec6SI[0] = (((0.5221894f * fVec2SI[2]) + ((4.656613e-10f * float(iVec4SI[0])) + (2.494956f * fVec2SI[0]))) - (2.0172658f * fVec2SI[1]));
					fTemp2SI = fVec6SI[0]; // step: 59
					fVec9SI[0] = fTemp2SI;
					output[i] = (((0.049922034f * fVec9SI[0]) + (0.0506127f * fVec9SI[2])) - ((0.095993534f * fVec9SI[1]) + (0.004408786f * fVec9SI[3])));
					// post processing
					fVec9SI[3] = fVec9SI[2];
					fVec9SI[2] = fVec9SI[1];
					fVec9SI[1] = fVec9SI[0];
					fVec6SI[1] = fVec6SI[0];
					fVec2SI[2] = fVec2SI[1];
					fVec2SI[1] = fVec2SI[0];
					iVec4SI[1] = iVec4SI[0];
				}
				iVec4SIState = iVec4SI[1];
				fVec2SIState[0] = fVec2SI[1];
				fVec2SIState[1] = fVec2SI[2];
				fVec6SIState = fVec6SI[1];
				fVec9SIState[0] = fVec9SI[1];
				fVec9SIState[1] = fVec9SI[2];
				fVec9SIState[2] = fVec9SI[3];
				output += 128;
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	float 	fConst0KI; // step: 15
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	static float 	ftbl0SI[65536];
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compilation_options", "-single -scal -e table.dsp -o table.dsp");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "table.dsp");
		m->declare("filters_lib_fir_author", "Julius O. Smith III");
		m->declare("filters_lib_fir_copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters_lib_fir_license", "MIT-style STK-4.3 license");
		m->declare("filters_lib_iir_author", "Julius O. Smith III");
		m->declare("filters_lib_iir_copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters_lib_iir_license", "MIT-style STK-4.3 license");
		m->declare("filters_lib_lowpass0_highpass1", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters_lib_name", "Faust Filters Library");
		m->declare("filters_lib_version", "0.3");
		m->declare("library_path", "/usr/local/share/faust/stdfaust.lib");
		m->declare("maths_lib_author", "GRAME");
		m->declare("maths_lib_copyright", "GRAME");
		m->declare("maths_lib_license", "LGPL with exception");
		m->declare("maths_lib_name", "Faust Math Library");
		m->declare("maths_lib_version", "2.3");
		m->declare("name", "table");
		m->declare("noises_lib_name", "Faust Noise Generator Library");
		m->declare("noises_lib_version", "0.0");
		m->declare("oscillators_lib_name", "Faust Oscillator Library");
		m->declare("oscillators_lib_version", "0.1");
		m->declare("platform_lib_name", "Generic Platform Library");
		m->declare("platform_lib_version", "0.1");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65536,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (1.0f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 15
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 4.4e+02f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("table");
		ui_interface->addHorizontalSlider("freq", &fslider0, 4.4e+02f, 5e+01f, 2e+03f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (fConst0KI * float(fslider0)); // Zone 2, step: 16
		float 	fTemp0SE; // step: 19
		float 	fVec0SE[2];
		float 	fTemp3SE; // step: 74
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[1]; // step: 19
			fVec0SE[0] = (fSlow0BE + fTemp0SE + -floorf((fSlow0BE + fTemp0SE /* Sum */)) /* Sum */);
			fTemp3SE = ftbl0SI[std::max(0, std::min(int((65536.0f * fVec0SE[0])), 65535))]; // step: 74
			output0[i] = (FAUSTFLOAT)(fTemp3SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp3SE);  // Zone Exec Code
			// post processing
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
	}
};


float 	mydsp::ftbl0SI[65536];
