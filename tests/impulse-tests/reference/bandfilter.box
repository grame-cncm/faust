declare version "2.50.2";
declare compile_options "-single -scal ../../build/bin/faust -I dsp -e dsp/bandfilter.dsp -o reference/bandfilter.box";
declare library_path0 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/music.lib";
declare library_path1 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/math.lib";
declare author "Grame";
declare copyright "(c)GRAME 2006";
declare filename "bandfilter.dsp";
declare license "BSD";
declare math_lib_author "GRAME";
declare math_lib_copyright "GRAME";
declare math_lib_deprecated "This library is deprecated and is not maintained anymore. It will be removed in August 2017.";
declare math_lib_license "LGPL with exception";
declare math_lib_name "Math Library";
declare math_lib_version "1.0";
declare music_lib_author "GRAME";
declare music_lib_copyright "GRAME";
declare music_lib_license "LGPL with exception";
declare music_lib_name "Music Library";
declare music_lib_version "1.0";
declare name "bandfilter";
declare version "1.0";
ID_0 = \(x1).(\(x2).(x2,x1 : -)) ~ \(x3).((((2,((((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),1 : -) : *),((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),x3 : *),((((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : -),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x3 : mem) : *) : +);
ID_1 = ID_0 : \(x4).((((((1,(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),x4 : *),(((2,((((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),1 : -) : *),((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x4 : mem) : *) : +),((((1,(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : -),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((10,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x4 : mem : mem) : *) : +);
ID_2 = vgroup("Bandfilter", ID_1);
process = ID_2;
