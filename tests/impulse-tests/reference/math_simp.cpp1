//----------------------------------------------------------
// name: "math_simp"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	IOTA0;
	float 	fVec0SE[16]; // Ring Delay
	float 	fConst0KI; // step: 14
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "math_simp.dsp");
		m->declare("name", "math_simp");
	}

	virtual int getNumInputs() { return 3; }
	virtual int getNumOutputs() { return 32; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 14
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		for (int i = 1; i < 16; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("math_simp");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 3
		float 	fTemp1SE; // step: 7
		float 	fTemp2SE; // step: 18
		float 	fTemp3SE; // step: 19
		float 	fTemp4SE; // step: 21
		float 	fTemp5SE; // step: 25
		float 	fTemp6SE; // step: 36
		float 	fTemp7SE; // step: 38
		float 	fTemp8SE; // step: 40
		float 	fTemp9SE; // step: 42
		float 	fTemp10SE; // step: 47
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		FAUSTFLOAT* output8 = output[8]; // Zone 3
		FAUSTFLOAT* output9 = output[9]; // Zone 3
		FAUSTFLOAT* output10 = output[10]; // Zone 3
		FAUSTFLOAT* output11 = output[11]; // Zone 3
		FAUSTFLOAT* output12 = output[12]; // Zone 3
		FAUSTFLOAT* output13 = output[13]; // Zone 3
		FAUSTFLOAT* output14 = output[14]; // Zone 3
		FAUSTFLOAT* output15 = output[15]; // Zone 3
		FAUSTFLOAT* output16 = output[16]; // Zone 3
		FAUSTFLOAT* output17 = output[17]; // Zone 3
		FAUSTFLOAT* output18 = output[18]; // Zone 3
		FAUSTFLOAT* output19 = output[19]; // Zone 3
		FAUSTFLOAT* output20 = output[20]; // Zone 3
		FAUSTFLOAT* output21 = output[21]; // Zone 3
		FAUSTFLOAT* output22 = output[22]; // Zone 3
		FAUSTFLOAT* output23 = output[23]; // Zone 3
		FAUSTFLOAT* output24 = output[24]; // Zone 3
		FAUSTFLOAT* output25 = output[25]; // Zone 3
		FAUSTFLOAT* output26 = output[26]; // Zone 3
		FAUSTFLOAT* output27 = output[27]; // Zone 3
		FAUSTFLOAT* output28 = output[28]; // Zone 3
		FAUSTFLOAT* output29 = output[29]; // Zone 3
		FAUSTFLOAT* output30 = output[30]; // Zone 3
		FAUSTFLOAT* output31 = output[31]; // Zone 3
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 3
			fVec0SE[IOTA0&15] = fTemp0SE;
			fTemp1SE = fVec0SE[(IOTA0-10)&15]; // step: 7
			fTemp2SE = fVec0SE[(IOTA0-1)&15]; // step: 18
			fTemp3SE = (3.0f * fTemp2SE); // step: 19
			fTemp4SE = fVec0SE[(IOTA0-2)&15]; // step: 21
			fTemp5SE = (fConst0KI * fVec0SE[IOTA0&15]); // step: 25
			fTemp6SE = (float)input1[i]; // step: 36
			fTemp7SE = (fVec0SE[IOTA0&15] + -fTemp6SE + -(float)input2[i] /* Sum */); // step: 38
			fTemp8SE = (fTemp6SE + -fVec0SE[IOTA0&15] /* Sum */); // step: 40
			fTemp9SE = (fVec0SE[IOTA0&15] + -fTemp6SE /* Sum */); // step: 42
			fTemp10SE = (fVec0SE[IOTA0&15] + fTemp6SE /* Sum */); // step: 47
			output0[i] = (FAUSTFLOAT)(-fVec0SE[IOTA0&15]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(-fVec0SE[IOTA0&15]);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(-fVec0SE[IOTA0&15]);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(fVec0SE[IOTA0&15]);  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(fTemp9SE);  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)(fTemp8SE);  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)(fTemp9SE);  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)(fTemp7SE);  // Zone Exec Code
			output8[i] = (FAUSTFLOAT)(fTemp7SE);  // Zone Exec Code
			output9[i] = (FAUSTFLOAT)((3.0f * fTemp8SE));  // Zone Exec Code
			output10[i] = (FAUSTFLOAT)((fTemp6SE + (3.0f * fTemp9SE) + -fVec0SE[IOTA0&15] /* Sum */));  // Zone Exec Code
			output11[i] = (FAUSTFLOAT)((4.0f * fabsf(fTemp8SE)));  // Zone Exec Code
			output12[i] = (FAUSTFLOAT)(-fConst0KI);  // Zone Exec Code
			output13[i] = (FAUSTFLOAT)(-fTemp5SE);  // Zone Exec Code
			output14[i] = (FAUSTFLOAT)(-(-fVec0SE[IOTA0&15]));  // Zone Exec Code
			output15[i] = (FAUSTFLOAT)(-fVec0SE[IOTA0&15]);  // Zone Exec Code
			output16[i] = (FAUSTFLOAT)(-fConst0KI);  // Zone Exec Code
			output17[i] = (FAUSTFLOAT)(-fTemp5SE);  // Zone Exec Code
			output18[i] = (FAUSTFLOAT)(fTemp5SE);  // Zone Exec Code
			output19[i] = (FAUSTFLOAT)(-fConst0KI);  // Zone Exec Code
			output20[i] = (FAUSTFLOAT)(-fTemp5SE);  // Zone Exec Code
			output21[i] = (FAUSTFLOAT)(fConst0KI);  // Zone Exec Code
			output22[i] = (FAUSTFLOAT)(-fTemp10SE);  // Zone Exec Code
			output23[i] = (FAUSTFLOAT)(-fTemp10SE);  // Zone Exec Code
			output24[i] = (FAUSTFLOAT)(-fTemp1SE);  // Zone Exec Code
			output25[i] = (FAUSTFLOAT)(-fTemp1SE);  // Zone Exec Code
			output26[i] = (FAUSTFLOAT)(fTemp3SE);  // Zone Exec Code
			output27[i] = (FAUSTFLOAT)((3.0f * fTemp4SE));  // Zone Exec Code
			output28[i] = (FAUSTFLOAT)(fTemp3SE);  // Zone Exec Code
			output29[i] = (FAUSTFLOAT)((4.0f * fTemp4SE));  // Zone Exec Code
			output30[i] = (FAUSTFLOAT)(-(fConst0KI * fTemp2SE));  // Zone Exec Code
			output31[i] = (FAUSTFLOAT)(-(fConst0KI * fTemp4SE));  // Zone Exec Code
			// post processing
			++IOTA0;
		}
	}
};


