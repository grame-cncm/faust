//----------------------------------------------------------
// name: "priority1"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SEState; // Single Delay
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	// Recursion delay fVec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec10SEState; // Single Delay
	// Recursion delay fVec12SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SEState; // Single Delay
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	// Recursion delay fVec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec16SEState; // Single Delay
	// Recursion delay fVec18SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec18SEState; // Single Delay
	// Recursion delay fVec20SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec20SEState; // Single Delay
	// Recursion delay fVec22SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec22SEState; // Single Delay
	// Recursion delay fVec24SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec24SEState; // Single Delay
	// Recursion delay fVec26SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec26SEState; // Single Delay
	// Recursion delay fVec28SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SEState; // Single Delay
	// Recursion delay fVec30SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec30SEState; // Single Delay
	// Recursion delay fVec32SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec32SEState; // Single Delay
	// Recursion delay fVec34SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec34SEState; // Single Delay
	// Recursion delay fVec36SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec36SEState; // Single Delay
	// Recursion delay fVec38SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec38SEState; // Single Delay
	// Recursion delay fVec40SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec40SEState; // Single Delay
	// Recursion delay fVec42SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec42SEState; // Single Delay
	// Recursion delay fVec44SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec44SEState; // Single Delay
	// Recursion delay fVec46SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec46SEState; // Single Delay
	// Recursion delay fVec48SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec48SEState; // Single Delay
	// Recursion delay fVec50SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec50SEState; // Single Delay
	// Recursion delay fVec52SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec52SEState; // Single Delay
	// Recursion delay fVec54SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec54SIState; // Single Delay
	// Recursion delay fVec56SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec56SIState; // Single Delay
	// Recursion delay fVec58SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec58SEState; // Single Delay
	// Recursion delay fVec60SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec60SIState; // Single Delay
	// Recursion delay fVec62SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec62SIState; // Single Delay
	// Recursion delay fVec64SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec64SEState; // Single Delay
	// Recursion delay fVec66SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec66SEState; // Single Delay
	// Recursion delay fVec68SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec68SEState; // Single Delay
	// Recursion delay fVec70SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec70SEState; // Single Delay
	// Recursion delay fVec72SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec72SEState; // Single Delay
	// Recursion delay fVec74SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec74SEState; // Single Delay
	// Recursion delay fVec76SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec76SEState; // Single Delay
	// Recursion delay fVec78SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec78SEState; // Single Delay
	// Recursion delay fVec80SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec80SEState; // Single Delay
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	// Recursion delay fVec84SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec84SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "priority1.dsp");
		m->declare("name", "priority1");
	}

	virtual int getNumInputs() { return 110; }
	virtual int getNumOutputs() { return 31; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec2SEState = 0;
		fVec4SEState = 0;
		fVec6SEState = 0;
		fVec8SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec16SEState = 0;
		fVec18SEState = 0;
		fVec20SEState = 0;
		fVec22SEState = 0;
		fVec24SEState = 0;
		fVec26SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec32SEState = 0;
		fVec34SEState = 0;
		fVec36SEState = 0;
		fVec38SEState = 0;
		fVec40SEState = 0;
		fVec42SEState = 0;
		fVec44SEState = 0;
		fVec46SEState = 0;
		fVec48SEState = 0;
		fVec50SEState = 0;
		fVec52SEState = 0;
		fVec54SIState = 0;
		fVec56SIState = 0;
		fVec58SEState = 0;
		fVec60SIState = 0;
		fVec62SIState = 0;
		fVec64SEState = 0;
		fVec66SEState = 0;
		fVec68SEState = 0;
		fVec70SEState = 0;
		fVec72SEState = 0;
		fVec74SEState = 0;
		fVec76SEState = 0;
		fVec78SEState = 0;
		fVec80SEState = 0;
		fVec82SEState = 0;
		fVec84SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("priority1");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fVec0SE[2];
		float 	fVec2SE[2];
		float 	fVec4SE[2];
		float 	fVec6SE[2];
		float 	fVec8SE[2];
		float 	fVec10SE[2];
		float 	fVec12SE[2];
		float 	fVec14SE[2];
		float 	fVec16SE[2];
		float 	fVec18SE[2];
		float 	fVec20SE[2];
		float 	fVec22SE[2];
		float 	fVec24SE[2];
		float 	fVec26SE[2];
		float 	fVec28SE[2];
		float 	fVec30SE[2];
		float 	fVec32SE[2];
		float 	fVec34SE[2];
		float 	fVec36SE[2];
		float 	fVec38SE[2];
		float 	fVec40SE[2];
		float 	fVec42SE[2];
		float 	fVec44SE[2];
		float 	fVec46SE[2];
		float 	fVec48SE[2];
		float 	fVec50SE[2];
		float 	fVec52SE[2];
		float 	fVec54SI[2];
		float 	fVec56SI[2];
		float 	fVec58SE[2];
		float 	fVec60SI[2];
		float 	fVec62SI[2];
		float 	fVec64SE[2];
		float 	fVec66SE[2];
		float 	fVec68SE[2];
		float 	fVec70SE[2];
		float 	fVec72SE[2];
		float 	fVec74SE[2];
		float 	fVec76SE[2];
		float 	fVec78SE[2];
		float 	fVec80SE[2];
		float 	fVec82SE[2];
		float 	fVec84SE[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* input3 = input[3]; // Zone 3
		FAUSTFLOAT* input4 = input[4]; // Zone 3
		FAUSTFLOAT* input5 = input[5]; // Zone 3
		FAUSTFLOAT* input6 = input[6]; // Zone 3
		FAUSTFLOAT* input7 = input[7]; // Zone 3
		FAUSTFLOAT* input8 = input[8]; // Zone 3
		FAUSTFLOAT* input9 = input[9]; // Zone 3
		FAUSTFLOAT* input10 = input[10]; // Zone 3
		FAUSTFLOAT* input11 = input[11]; // Zone 3
		FAUSTFLOAT* input12 = input[12]; // Zone 3
		FAUSTFLOAT* input13 = input[13]; // Zone 3
		FAUSTFLOAT* input14 = input[14]; // Zone 3
		FAUSTFLOAT* input15 = input[15]; // Zone 3
		FAUSTFLOAT* input16 = input[16]; // Zone 3
		FAUSTFLOAT* input17 = input[17]; // Zone 3
		FAUSTFLOAT* input18 = input[18]; // Zone 3
		FAUSTFLOAT* input19 = input[19]; // Zone 3
		FAUSTFLOAT* input20 = input[20]; // Zone 3
		FAUSTFLOAT* input21 = input[21]; // Zone 3
		FAUSTFLOAT* input22 = input[22]; // Zone 3
		FAUSTFLOAT* input23 = input[23]; // Zone 3
		FAUSTFLOAT* input24 = input[24]; // Zone 3
		FAUSTFLOAT* input25 = input[25]; // Zone 3
		FAUSTFLOAT* input26 = input[26]; // Zone 3
		FAUSTFLOAT* input27 = input[27]; // Zone 3
		FAUSTFLOAT* input28 = input[28]; // Zone 3
		FAUSTFLOAT* input29 = input[29]; // Zone 3
		FAUSTFLOAT* input30 = input[30]; // Zone 3
		FAUSTFLOAT* input31 = input[31]; // Zone 3
		FAUSTFLOAT* input32 = input[32]; // Zone 3
		FAUSTFLOAT* input33 = input[33]; // Zone 3
		FAUSTFLOAT* input34 = input[34]; // Zone 3
		FAUSTFLOAT* input35 = input[35]; // Zone 3
		FAUSTFLOAT* input36 = input[36]; // Zone 3
		FAUSTFLOAT* input37 = input[37]; // Zone 3
		FAUSTFLOAT* input38 = input[38]; // Zone 3
		FAUSTFLOAT* input39 = input[39]; // Zone 3
		FAUSTFLOAT* input40 = input[40]; // Zone 3
		FAUSTFLOAT* input41 = input[41]; // Zone 3
		FAUSTFLOAT* input42 = input[42]; // Zone 3
		FAUSTFLOAT* input43 = input[43]; // Zone 3
		FAUSTFLOAT* input44 = input[44]; // Zone 3
		FAUSTFLOAT* input45 = input[45]; // Zone 3
		FAUSTFLOAT* input46 = input[46]; // Zone 3
		FAUSTFLOAT* input47 = input[47]; // Zone 3
		FAUSTFLOAT* input48 = input[48]; // Zone 3
		FAUSTFLOAT* input49 = input[49]; // Zone 3
		FAUSTFLOAT* input50 = input[50]; // Zone 3
		FAUSTFLOAT* input51 = input[51]; // Zone 3
		FAUSTFLOAT* input52 = input[52]; // Zone 3
		FAUSTFLOAT* input53 = input[53]; // Zone 3
		FAUSTFLOAT* input54 = input[54]; // Zone 3
		FAUSTFLOAT* input55 = input[55]; // Zone 3
		FAUSTFLOAT* input56 = input[56]; // Zone 3
		FAUSTFLOAT* input57 = input[57]; // Zone 3
		FAUSTFLOAT* input58 = input[58]; // Zone 3
		FAUSTFLOAT* input59 = input[59]; // Zone 3
		FAUSTFLOAT* input60 = input[60]; // Zone 3
		FAUSTFLOAT* input61 = input[61]; // Zone 3
		FAUSTFLOAT* input62 = input[62]; // Zone 3
		FAUSTFLOAT* input63 = input[63]; // Zone 3
		FAUSTFLOAT* input64 = input[64]; // Zone 3
		FAUSTFLOAT* input65 = input[65]; // Zone 3
		FAUSTFLOAT* input66 = input[66]; // Zone 3
		FAUSTFLOAT* input67 = input[67]; // Zone 3
		FAUSTFLOAT* input68 = input[68]; // Zone 3
		FAUSTFLOAT* input69 = input[69]; // Zone 3
		FAUSTFLOAT* input70 = input[70]; // Zone 3
		FAUSTFLOAT* input71 = input[71]; // Zone 3
		FAUSTFLOAT* input72 = input[72]; // Zone 3
		FAUSTFLOAT* input73 = input[73]; // Zone 3
		FAUSTFLOAT* input74 = input[74]; // Zone 3
		FAUSTFLOAT* input75 = input[75]; // Zone 3
		FAUSTFLOAT* input76 = input[76]; // Zone 3
		FAUSTFLOAT* input77 = input[77]; // Zone 3
		FAUSTFLOAT* input78 = input[78]; // Zone 3
		FAUSTFLOAT* input79 = input[79]; // Zone 3
		FAUSTFLOAT* input80 = input[80]; // Zone 3
		FAUSTFLOAT* input81 = input[81]; // Zone 3
		FAUSTFLOAT* input82 = input[82]; // Zone 3
		FAUSTFLOAT* input83 = input[83]; // Zone 3
		FAUSTFLOAT* input84 = input[84]; // Zone 3
		FAUSTFLOAT* input85 = input[85]; // Zone 3
		FAUSTFLOAT* input86 = input[86]; // Zone 3
		FAUSTFLOAT* input87 = input[87]; // Zone 3
		FAUSTFLOAT* input88 = input[88]; // Zone 3
		FAUSTFLOAT* input89 = input[89]; // Zone 3
		FAUSTFLOAT* input90 = input[90]; // Zone 3
		FAUSTFLOAT* input91 = input[91]; // Zone 3
		FAUSTFLOAT* input92 = input[92]; // Zone 3
		FAUSTFLOAT* input93 = input[93]; // Zone 3
		FAUSTFLOAT* input94 = input[94]; // Zone 3
		FAUSTFLOAT* input95 = input[95]; // Zone 3
		FAUSTFLOAT* input96 = input[96]; // Zone 3
		FAUSTFLOAT* input97 = input[97]; // Zone 3
		FAUSTFLOAT* input98 = input[98]; // Zone 3
		FAUSTFLOAT* input99 = input[99]; // Zone 3
		FAUSTFLOAT* input100 = input[100]; // Zone 3
		FAUSTFLOAT* input101 = input[101]; // Zone 3
		FAUSTFLOAT* input102 = input[102]; // Zone 3
		FAUSTFLOAT* input103 = input[103]; // Zone 3
		FAUSTFLOAT* input104 = input[104]; // Zone 3
		FAUSTFLOAT* input105 = input[105]; // Zone 3
		FAUSTFLOAT* input106 = input[106]; // Zone 3
		FAUSTFLOAT* input107 = input[107]; // Zone 3
		FAUSTFLOAT* input108 = input[108]; // Zone 3
		FAUSTFLOAT* input109 = input[109]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		FAUSTFLOAT* output8 = output[8]; // Zone 3
		FAUSTFLOAT* output9 = output[9]; // Zone 3
		FAUSTFLOAT* output10 = output[10]; // Zone 3
		FAUSTFLOAT* output11 = output[11]; // Zone 3
		FAUSTFLOAT* output12 = output[12]; // Zone 3
		FAUSTFLOAT* output13 = output[13]; // Zone 3
		FAUSTFLOAT* output14 = output[14]; // Zone 3
		FAUSTFLOAT* output15 = output[15]; // Zone 3
		FAUSTFLOAT* output16 = output[16]; // Zone 3
		FAUSTFLOAT* output17 = output[17]; // Zone 3
		FAUSTFLOAT* output18 = output[18]; // Zone 3
		FAUSTFLOAT* output19 = output[19]; // Zone 3
		FAUSTFLOAT* output20 = output[20]; // Zone 3
		FAUSTFLOAT* output21 = output[21]; // Zone 3
		FAUSTFLOAT* output22 = output[22]; // Zone 3
		FAUSTFLOAT* output23 = output[23]; // Zone 3
		FAUSTFLOAT* output24 = output[24]; // Zone 3
		FAUSTFLOAT* output25 = output[25]; // Zone 3
		FAUSTFLOAT* output26 = output[26]; // Zone 3
		FAUSTFLOAT* output27 = output[27]; // Zone 3
		FAUSTFLOAT* output28 = output[28]; // Zone 3
		FAUSTFLOAT* output29 = output[29]; // Zone 3
		FAUSTFLOAT* output30 = output[30]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec2SE[1] = fVec2SEState;
		fVec4SE[1] = fVec4SEState;
		fVec6SE[1] = fVec6SEState;
		fVec8SE[1] = fVec8SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec16SE[1] = fVec16SEState;
		fVec18SE[1] = fVec18SEState;
		fVec20SE[1] = fVec20SEState;
		fVec22SE[1] = fVec22SEState;
		fVec24SE[1] = fVec24SEState;
		fVec26SE[1] = fVec26SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec32SE[1] = fVec32SEState;
		fVec34SE[1] = fVec34SEState;
		fVec36SE[1] = fVec36SEState;
		fVec38SE[1] = fVec38SEState;
		fVec40SE[1] = fVec40SEState;
		fVec42SE[1] = fVec42SEState;
		fVec44SE[1] = fVec44SEState;
		fVec46SE[1] = fVec46SEState;
		fVec48SE[1] = fVec48SEState;
		fVec50SE[1] = fVec50SEState;
		fVec52SE[1] = fVec52SEState;
		fVec54SI[1] = fVec54SIState;
		fVec56SI[1] = fVec56SIState;
		fVec58SE[1] = fVec58SEState;
		fVec60SI[1] = fVec60SIState;
		fVec62SI[1] = fVec62SIState;
		fVec64SE[1] = fVec64SEState;
		fVec66SE[1] = fVec66SEState;
		fVec68SE[1] = fVec68SEState;
		fVec70SE[1] = fVec70SEState;
		fVec72SE[1] = fVec72SEState;
		fVec74SE[1] = fVec74SEState;
		fVec76SE[1] = fVec76SEState;
		fVec78SE[1] = fVec78SEState;
		fVec80SE[1] = fVec80SEState;
		fVec82SE[1] = fVec82SEState;
		fVec84SE[1] = fVec84SEState;
		for (int i=0; i<count; i++) {
			fVec0SE[0] = ((1.05f * (float)input0[i]) + (0.9f * fVec0SE[1]) /* Sum */);
			fVec2SE[0] = ((1.05f * (float)input1[i]) + (0.9f * fVec2SE[1]) /* Sum */);
			fVec4SE[0] = ((1.05f * (float)input2[i]) + (0.9f * fVec4SE[1]) /* Sum */);
			fVec6SE[0] = ((1.05f * (float)input3[i]) + (0.9f * fVec6SE[1]) /* Sum */);
			fVec8SE[0] = ((1.05f * (float)input4[i]) + (0.9f * fVec8SE[1]) /* Sum */);
			fVec10SE[0] = ((1.05f * (float)input5[i]) + (0.9f * fVec10SE[1]) /* Sum */);
			fVec12SE[0] = ((1.05f * (float)input6[i]) + (0.9f * fVec12SE[1]) /* Sum */);
			fVec14SE[0] = ((1.05f * (float)input7[i]) + (0.9f * fVec14SE[1]) /* Sum */);
			fVec16SE[0] = ((1.05f * (float)input8[i]) + (0.9f * fVec16SE[1]) /* Sum */);
			fVec18SE[0] = ((1.05f * (float)input9[i]) + (0.9f * fVec18SE[1]) /* Sum */);
			fVec20SE[0] = ((1.05f * (float)input10[i]) + (0.9f * fVec20SE[1]) /* Sum */);
			fVec22SE[0] = ((1.05f * (float)input11[i]) + (0.9f * fVec22SE[1]) /* Sum */);
			fVec24SE[0] = ((1.05f * (float)input12[i]) + (0.9f * fVec24SE[1]) /* Sum */);
			fVec26SE[0] = ((1.05f * (float)input13[i]) + (0.9f * fVec26SE[1]) /* Sum */);
			fVec28SE[0] = ((1.05f * (float)input14[i]) + (0.9f * fVec28SE[1]) /* Sum */);
			fVec30SE[0] = ((1.05f * (float)input15[i]) + (0.9f * fVec30SE[1]) /* Sum */);
			fVec32SE[0] = ((1.05f * (float)input16[i]) + (0.9f * fVec32SE[1]) /* Sum */);
			fVec34SE[0] = ((1.05f * (float)input17[i]) + (0.9f * fVec34SE[1]) /* Sum */);
			fVec36SE[0] = ((0.1f * float(((int((3.5f * (float)input18[i])) * int((3.5f * (float)input19[i]))) % (int((float)input20[i]) + 3 /* Sum */)))) + (0.9f * fVec36SE[1]) /* Sum */);
			fVec38SE[0] = ((0.1f * float(((int((3.5f * (float)input21[i])) * int((3.5f * (float)input22[i]))) % (int((float)input23[i]) + 3 /* Sum */)))) + (0.9f * fVec38SE[1]) /* Sum */);
			fVec40SE[0] = ((0.1f * float((int((3.5f * (float)input24[i])) * (int((3.5f * (float)input25[i])) % (int((float)input26[i]) + 3 /* Sum */))))) + (0.9f * fVec40SE[1]) /* Sum */);
			fVec42SE[0] = ((0.1f * float(((int((3.5f * (float)input27[i])) << int((3.5f * (float)input28[i]))) >> (int((float)input29[i]) + 3 /* Sum */)))) + (0.9f * fVec42SE[1]) /* Sum */);
			fVec44SE[0] = ((0.1f * float(((int((3.5f * (float)input30[i])) << int((3.5f * (float)input31[i]))) >> (int((float)input32[i]) + 3 /* Sum */)))) + (0.9f * fVec44SE[1]) /* Sum */);
			fVec46SE[0] = ((0.1f * float(int((3.5f * (float)input33[i])))) + (0.9f * fVec46SE[1]) /* Sum */);
			fVec48SE[0] = ((0.1f * float(((int((3.5f * (float)input36[i])) << int((3.5f * (float)input37[i]))) <= (int((float)input38[i]) + 3 /* Sum */)))) + (0.9f * fVec48SE[1]) /* Sum */);
			fVec50SE[0] = ((0.1f * float(((int((3.5f * (float)input39[i])) << int((3.5f * (float)input40[i]))) <= (int((float)input41[i]) + 3 /* Sum */)))) + (0.9f * fVec50SE[1]) /* Sum */);
			fVec52SE[0] = ((0.1f * float((int((3.5f * (float)input42[i])) << (int((3.5f * (float)input43[i])) <= (int((float)input44[i]) + 3 /* Sum */))))) + (0.9f * fVec52SE[1]) /* Sum */);
			fVec54SI[0] = (0.1f + (0.9f * fVec54SI[1]) /* Sum */);
			fVec56SI[0] = (0.1f + (0.9f * fVec56SI[1]) /* Sum */);
			fVec58SE[0] = ((0.1f * float((int((3.5f * (float)input51[i])) < (int((3.5f * (float)input52[i])) <= (int((float)input53[i]) + 3 /* Sum */))))) + (0.9f * fVec58SE[1]) /* Sum */);
			fVec60SI[0] = (0.1f + (0.9f * fVec60SI[1]) /* Sum */);
			fVec62SI[0] = (0.1f + (0.9f * fVec62SI[1]) /* Sum */);
			fVec64SE[0] = ((0.1f * float((int((3.5f * (float)input60[i])) == (int((3.5f * (float)input61[i])) != (int((float)input62[i]) + 3 /* Sum */))))) + (0.9f * fVec64SE[1]) /* Sum */);
			fVec66SE[0] = ((0.1f * float(((int((3.5f * (float)input63[i])) & int((3.5f * (float)input64[i]))) | (int((float)input65[i]) + 3 /* Sum */)))) + (0.9f * fVec66SE[1]) /* Sum */);
			fVec68SE[0] = ((0.1f * float(((int((3.5f * (float)input66[i])) & int((3.5f * (float)input67[i]))) ^ (int((float)input68[i]) + 3 /* Sum */)))) + (0.9f * fVec68SE[1]) /* Sum */);
			fVec70SE[0] = ((0.1f * float(((int((3.5f * (float)input69[i])) & int((3.5f * (float)input70[i]))) | (int((float)input71[i]) + 3 /* Sum */)))) + (0.9f * fVec70SE[1]) /* Sum */);
			fVec72SE[0] = ((0.1f * float(((int((3.5f * (float)input72[i])) & int((3.5f * (float)input73[i]))) ^ (int((float)input74[i]) + 3 /* Sum */)))) + (0.9f * fVec72SE[1]) /* Sum */);
			fVec74SE[0] = ((0.1f * float((int((3.5f * (float)input75[i])) & (int((3.5f * (float)input76[i])) | (int((float)input77[i]) + 3 /* Sum */))))) + (0.9f * fVec74SE[1]) /* Sum */);
			fVec76SE[0] = ((0.1f * float((int((3.5f * (float)input78[i])) & (int((3.5f * (float)input79[i])) ^ (int((float)input80[i]) + 3 /* Sum */))))) + (0.9f * fVec76SE[1]) /* Sum */);
			fVec78SE[0] = ((0.1f * float(((int((float)input82[i]) + int((3.5f * (float)input81[i])) + 3 + -int((3.5f * (float)input83[i])) /* Sum */) | (int((float)input84[i]) + 3 /* Sum */)))) + (0.9f * fVec78SE[1]) /* Sum */);
			fVec80SE[0] = ((0.1f * float(((((int(fmodf((float(((int((float)input86[i]) + 3 /* Sum */) * int((3.5f * (float)input85[i])))) / float(int((3.5f * (float)input87[i])))),float((int((float)input88[i]) + 3 /* Sum */)))) & int((3.5f * (float)input89[i]))) ^ (int((float)input90[i]) + 3 /* Sum */)) << int((3.5f * (float)input91[i]))) >> (int((float)input92[i]) + 3 /* Sum */)))) + (0.9f * fVec80SE[1]) /* Sum */);
			fVec82SE[0] = ((0.1f * float(((int((3.5f * (float)input93[i])) <= (int((float)input94[i]) + 3 /* Sum */)) >= ((int((float)input96[i]) + int((3.5f * (float)input95[i])) + 3 + -int((3.5f * (float)input97[i])) /* Sum */) | (int((float)input98[i]) + 3 /* Sum */))))) + (0.9f * fVec82SE[1]) /* Sum */);
			fVec84SE[0] = ((0.1f * float(((int((float)input99[i]) + int((3.5f * (float)input100[i])) + -int((float)input101[i]) /* Sum */) | ((((int(fmodf((float(((int((float)input103[i]) + 3 /* Sum */) * int((3.5f * (float)input102[i])))) / float(int((3.5f * (float)input104[i])))),float((int((float)input105[i]) + 3 /* Sum */)))) & int((3.5f * (float)input106[i]))) ^ (int((float)input107[i]) + 3 /* Sum */)) << int((3.5f * (float)input108[i]))) >> (int((float)input109[i]) + 3 /* Sum */))))) + (0.9f * fVec84SE[1]) /* Sum */);
			output0[i] = (FAUSTFLOAT)(((fVec0SE[0] * fVec2SE[0]) * fVec4SE[0]));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(((fVec6SE[0] * fVec8SE[0]) * fVec10SE[0]));  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(((fVec12SE[0] * fVec14SE[0]) * fVec16SE[0]));  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(((fVec18SE[0] * fVec20SE[0]) + fVec22SE[0] /* Sum */));  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(((fVec24SE[0] * fVec26SE[0]) + fVec28SE[0] /* Sum */));  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)((fVec30SE[0] * (fVec32SE[0] + fVec34SE[0] /* Sum */)));  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)(fVec36SE[0]);  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)(fVec38SE[0]);  // Zone Exec Code
			output8[i] = (FAUSTFLOAT)(fVec40SE[0]);  // Zone Exec Code
			output9[i] = (FAUSTFLOAT)(fVec42SE[0]);  // Zone Exec Code
			output10[i] = (FAUSTFLOAT)(fVec44SE[0]);  // Zone Exec Code
			output11[i] = (FAUSTFLOAT)(fVec46SE[0]);  // Zone Exec Code
			output12[i] = (FAUSTFLOAT)(fVec48SE[0]);  // Zone Exec Code
			output13[i] = (FAUSTFLOAT)(fVec50SE[0]);  // Zone Exec Code
			output14[i] = (FAUSTFLOAT)(fVec52SE[0]);  // Zone Exec Code
			output15[i] = (FAUSTFLOAT)(fVec54SI[0]);  // Zone Exec Code
			output16[i] = (FAUSTFLOAT)(fVec56SI[0]);  // Zone Exec Code
			output17[i] = (FAUSTFLOAT)(fVec58SE[0]);  // Zone Exec Code
			output18[i] = (FAUSTFLOAT)(fVec60SI[0]);  // Zone Exec Code
			output19[i] = (FAUSTFLOAT)(fVec62SI[0]);  // Zone Exec Code
			output20[i] = (FAUSTFLOAT)(fVec64SE[0]);  // Zone Exec Code
			output21[i] = (FAUSTFLOAT)(fVec66SE[0]);  // Zone Exec Code
			output22[i] = (FAUSTFLOAT)(fVec68SE[0]);  // Zone Exec Code
			output23[i] = (FAUSTFLOAT)(fVec70SE[0]);  // Zone Exec Code
			output24[i] = (FAUSTFLOAT)(fVec72SE[0]);  // Zone Exec Code
			output25[i] = (FAUSTFLOAT)(fVec74SE[0]);  // Zone Exec Code
			output26[i] = (FAUSTFLOAT)(fVec76SE[0]);  // Zone Exec Code
			output27[i] = (FAUSTFLOAT)(fVec78SE[0]);  // Zone Exec Code
			output28[i] = (FAUSTFLOAT)(fVec80SE[0]);  // Zone Exec Code
			output29[i] = (FAUSTFLOAT)(fVec82SE[0]);  // Zone Exec Code
			output30[i] = (FAUSTFLOAT)(fVec84SE[0]);  // Zone Exec Code
			// post processing
			fVec84SE[1] = fVec84SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec80SE[1] = fVec80SE[0];
			fVec78SE[1] = fVec78SE[0];
			fVec76SE[1] = fVec76SE[0];
			fVec74SE[1] = fVec74SE[0];
			fVec72SE[1] = fVec72SE[0];
			fVec70SE[1] = fVec70SE[0];
			fVec68SE[1] = fVec68SE[0];
			fVec66SE[1] = fVec66SE[0];
			fVec64SE[1] = fVec64SE[0];
			fVec62SI[1] = fVec62SI[0];
			fVec60SI[1] = fVec60SI[0];
			fVec58SE[1] = fVec58SE[0];
			fVec56SI[1] = fVec56SI[0];
			fVec54SI[1] = fVec54SI[0];
			fVec52SE[1] = fVec52SE[0];
			fVec50SE[1] = fVec50SE[0];
			fVec48SE[1] = fVec48SE[0];
			fVec46SE[1] = fVec46SE[0];
			fVec44SE[1] = fVec44SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec38SE[1] = fVec38SE[0];
			fVec36SE[1] = fVec36SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec32SE[1] = fVec32SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec22SE[1] = fVec22SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec4SE[1] = fVec4SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec2SEState = fVec2SE[1];
		fVec4SEState = fVec4SE[1];
		fVec6SEState = fVec6SE[1];
		fVec8SEState = fVec8SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec16SEState = fVec16SE[1];
		fVec18SEState = fVec18SE[1];
		fVec20SEState = fVec20SE[1];
		fVec22SEState = fVec22SE[1];
		fVec24SEState = fVec24SE[1];
		fVec26SEState = fVec26SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec32SEState = fVec32SE[1];
		fVec34SEState = fVec34SE[1];
		fVec36SEState = fVec36SE[1];
		fVec38SEState = fVec38SE[1];
		fVec40SEState = fVec40SE[1];
		fVec42SEState = fVec42SE[1];
		fVec44SEState = fVec44SE[1];
		fVec46SEState = fVec46SE[1];
		fVec48SEState = fVec48SE[1];
		fVec50SEState = fVec50SE[1];
		fVec52SEState = fVec52SE[1];
		fVec54SIState = fVec54SI[1];
		fVec56SIState = fVec56SI[1];
		fVec58SEState = fVec58SE[1];
		fVec60SIState = fVec60SI[1];
		fVec62SIState = fVec62SI[1];
		fVec64SEState = fVec64SE[1];
		fVec66SEState = fVec66SE[1];
		fVec68SEState = fVec68SE[1];
		fVec70SEState = fVec70SE[1];
		fVec72SEState = fVec72SE[1];
		fVec74SEState = fVec74SE[1];
		fVec76SEState = fVec76SE[1];
		fVec78SEState = fVec78SE[1];
		fVec80SEState = fVec80SE[1];
		fVec82SEState = fVec82SE[1];
		fVec84SEState = fVec84SE[1];
	}
};


