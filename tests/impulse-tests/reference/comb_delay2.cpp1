//----------------------------------------------------------
// name: "comb_delay2"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec2SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec2SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec2SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec2SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec2SI[1] = iVec2SIState;
				for (int i=0; i<count; i++) {
					iVec2SI[0] = (iVec2SI[1] + 1);
					output[i] = sinf((9.58738e-05f * float((iVec2SI[0] + -1))));
					// post processing
					iVec2SI[1] = iVec2SI[0];
				}
				iVec2SIState = iVec2SI[1];
				output += 128;
			}
		}
	};


	float 	fConst0KI; // step: 10
	float 	fConst1KI; // step: 11
	// Recursion delay fVec0SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SIState; // Single Delay
	static float 	ftbl0SI[65536];
	int 	IOTA0;
	float 	fVec4SI[128]; // Ring Delay
	float 	fConst2KI; // step: 47
	// Recursion delay fVec5SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SIState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "comb_delay2.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "comb_delay2");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65536,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 10
		fConst1KI = (4.4e+02f / fConst0KI); // step: 11
		IOTA0 = 0;
		fConst2KI = (1e+03f / fConst0KI); // step: 47
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0SIState = 0;
		for (int i = 1; i < 128; i++) { fVec4SI[i] = 0; }
		fVec4SI[0] = -1;  // detect unintialized
		fVec5SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("comb_delay2");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SI; // step: 14
		float 	fVec0SI[2];
		float 	fTemp1SI; // step: 49
		float 	fVec5SI[2];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0SI[1] = fVec0SIState;
		fVec5SI[1] = fVec5SIState;
		for (int i=0; i<count; i++) {
			fTemp0SI = fVec0SI[1]; // step: 14
			fVec0SI[0] = (fConst1KI + fTemp0SI + -floorf((fConst1KI + fTemp0SI /* Sum */)) /* Sum */);
			fVec4SI[IOTA0&127] = ftbl0SI[std::max(0, std::min(int((65536.0f * fVec0SI[0])), 65535))];
			fTemp1SI = fVec5SI[1]; // step: 49
			fVec5SI[0] = (fConst2KI + fTemp1SI + -floorf((fConst2KI + fTemp1SI /* Sum */)) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fVec4SI[(IOTA0-(int(std::max(0.0f, std::min(1e+01f, (5.0f * (ftbl0SI[std::max(0, std::min(int((65536.0f * fVec5SI[0])), 65535))] + 1.0f /* Sum */))))) + 100 /* Sum */))&127]);  // Zone Exec Code
			// post processing
			fVec5SI[1] = fVec5SI[0];
			++IOTA0;
			fVec0SI[1] = fVec0SI[0];
		}
		fVec0SIState = fVec0SI[1];
		fVec5SIState = fVec5SI[1];
	}
};


float 	mydsp::ftbl0SI[65536];
