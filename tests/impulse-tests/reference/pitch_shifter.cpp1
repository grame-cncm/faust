//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "pitch-shifter"
// version: "1.0"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	IOTA0;
	float 	fVec0SE[65536]; // Ring Delay
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "pitch_shifter.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "pitch-shifter");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1e+03f;
		fslider1 = 0.0f;
		fslider2 = 1e+01f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 65536; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
		fVec1SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Pitch Shifter");
		ui_interface->addHorizontalSlider("shift (semitones)", &fslider1, 0.0f, -12.0f, 12.0f, 0.1f);
		ui_interface->addHorizontalSlider("window (samples)", &fslider0, 1e+03f, 5e+01f, 1e+04f, 1.0f);
		ui_interface->addHorizontalSlider("xfade (samples)", &fslider2, 1e+01f, 1.0f, 1e+04f, 1.0f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fSlow0BE = float(fslider0); // Zone 2, step: 9
		float 	fVec1SE[2];
		float 	fTemp1SE; // step: 27
		int 	iTemp2SE; // step: 28
		float 	fTemp3SE; // step: 31
		float 	fSlow1BE = (1.0f / float(fslider2)); // Zone 2, step: 44
		float 	fTemp4SE; // step: 46
		int 	iTemp5SE; // step: 49
		float 	fTemp6SE; // step: 52
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec1SE[1] = fVec1SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fVec0SE[IOTA0&65535] = fTemp0SE;
			fVec1SE[0] = fmodf((fSlow0BE + fVec1SE[1] + 1.0f + -(powf(2.0f,(0.083333336f * float(fslider1)))) /* Sum */),fSlow0BE);
			fTemp1SE = fVec1SE[0]; // step: 27
			iTemp2SE = int(fTemp1SE); // step: 28
			fTemp3SE = float(iTemp2SE); // step: 31
			fTemp4SE = std::min((fSlow1BE * fTemp1SE), 1.0f); // step: 46
			iTemp5SE = int((fSlow0BE + fTemp1SE /* Sum */)); // step: 49
			fTemp6SE = float(iTemp5SE); // step: 52
			output0[i] = (FAUSTFLOAT)(((((fVec0SE[(IOTA0-(iTemp2SE & 65535))&65535] * (fTemp3SE + 1.0f + -fTemp1SE /* Sum */)) + ((fTemp1SE + -fTemp3SE /* Sum */) * fVec0SE[(IOTA0-((iTemp2SE + 1 /* Sum */) & 65535))&65535]) /* Sum */) * fTemp4SE) + (((fVec0SE[(IOTA0-(iTemp5SE & 65535))&65535] * (fTemp6SE + 1.0f + -fTemp1SE + -fSlow0BE /* Sum */)) + ((fSlow0BE + fTemp1SE + -fTemp6SE /* Sum */) * fVec0SE[(IOTA0-((iTemp5SE + 1 /* Sum */) & 65535))&65535]) /* Sum */) * (1.0f + -fTemp4SE /* Sum */)) /* Sum */));  // Zone Exec Code
			// post processing
			fVec1SE[1] = fVec1SE[0];
			++IOTA0;
		}
		fVec1SEState = fVec1SE[1];
	}
};


