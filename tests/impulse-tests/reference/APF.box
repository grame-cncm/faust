declare version "2.50.2";
declare compile_options "-single -scal ../../build/bin/faust -I dsp -e dsp/APF.dsp -o reference/APF.box";
declare library_path0 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/maxmsp.lib";
declare library_path1 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/music.lib";
declare library_path2 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/math.lib";
declare filename "APF.dsp";
declare math_lib_author "GRAME";
declare math_lib_copyright "GRAME";
declare math_lib_deprecated "This library is deprecated and is not maintained anymore. It will be removed in August 2017.";
declare math_lib_license "LGPL with exception";
declare math_lib_name "Math Library";
declare math_lib_version "1.0";
declare maxmsp_lib_author "GRAME";
declare maxmsp_lib_copyright "GRAME";
declare maxmsp_lib_license "LGPL";
declare maxmsp_lib_name "MaxMSP compatibility Library";
declare maxmsp_lib_version "1.1";
declare music_lib_author "GRAME";
declare music_lib_copyright "GRAME";
declare music_lib_license "LGPL with exception";
declare music_lib_name "Music Library";
declare music_lib_version "1.0";
declare name "APF";
process = \(x1).(x1,((1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : -),(1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +) : /),((-2,((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : cos) : *),(1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +) : /),((1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +),(1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +) : /),((-2,((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : cos) : *),(1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +) : /),((1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : -),(1,(((6.2831855f,(0,hslider("Freq", 1e+03f, 1e+02f, 1e+04f, 1.0f) : max) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : sin),(2,(0.001f,hslider("Q", 1.0f, 0.01f, 1e+02f, 0.01f) : max) : *) : /) : +) : /) : \(x2).(\(x3).(\(x4).(\(x5).(\(x6).(\(x7).(x2 : +~(-1,\(x8).((x6,x8 : *),(x7,(x8 : mem) : *) : +) : *) : \(x9).(((x3,x9 : *),(x4,(x9 : mem) : *) : +),(x5,(x9 : mem : mem) : *) : +))))))));
