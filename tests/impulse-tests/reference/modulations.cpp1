/* ------------------------------------------------------------
author: "ER"
name: "modulations"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

class mydspSIG0 {
	
  private:
	
	int iRec16[2];
	
  public:
	
	int getNumInputsmydspSIG0() {
		return 0;
	}
	int getNumOutputsmydspSIG0() {
		return 1;
	}
	
	void instanceInitmydspSIG0(int sample_rate) {
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			iRec16[l5] = 0;
		}
	}
	
	void fillmydspSIG0(int count, float* table) {
		for (int i1 = 0; i1 < count; i1 = i1 + 1) {
			iRec16[0] = iRec16[1] + 1;
			table[i1] = std::sin(9.58738e-05f * float(iRec16[0] + -1));
			iRec16[1] = iRec16[0];
		}
	}

};

static mydspSIG0* newmydspSIG0() { return (mydspSIG0*)new mydspSIG0(); }
static void deletemydspSIG0(mydspSIG0* dsp) { delete dsp; }

static float mydsp_faustpower2_f(float value) {
	return value * value;
}
static float ftbl0mydspSIG0[65536];
static float ftbl1mydspSIG0[65537];

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	float fRec0[2];
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	FAUSTFLOAT fHslider1;
	float fConst5;
	float fConst6;
	float fConst7;
	float fConst8;
	float fRec12[2];
	float fRec11[2];
	int IOTA0;
	float fVec0[32768];
	float fConst9;
	int iConst10;
	float fConst11;
	float fConst12;
	float fConst13;
	float fRec15[2];
	float fConst14;
	FAUSTFLOAT fHslider2;
	float fRec18[2];
	float fRec17[2];
	FAUSTFLOAT fHslider3;
	float fConst15;
	float fRec19[2];
	float fConst16;
	float fRec21[2];
	float fConst17;
	float fRec20[2];
	float fConst18;
	FAUSTFLOAT fHslider4;
	float fRec23[2];
	float fRec22[2];
	float fRec28[2];
	float fRec27[2];
	float fRec26[2];
	float fRec25[2];
	float fRec24[2];
	float fRec14[2];
	FAUSTFLOAT fHslider5;
	float fRec29[2];
	float fRec31[2];
	float fRec30[2];
	float fRec37[2];
	float fRec36[2];
	float fRec35[2];
	float fRec34[2];
	float fRec33[2];
	float fRec32[2];
	float fVec1[2];
	FAUSTFLOAT fHslider6;
	float fRec38[2];
	float fRec40[2];
	float fRec39[2];
	float fRec46[2];
	float fRec45[2];
	float fRec44[2];
	float fRec43[2];
	float fRec42[2];
	float fRec41[2];
	FAUSTFLOAT fHslider7;
	float fRec47[2];
	float fRec49[2];
	float fRec48[2];
	float fRec55[2];
	float fRec54[2];
	float fRec53[2];
	float fRec52[2];
	float fRec51[2];
	float fRec50[2];
	float fVec2[2];
	float fRec13[2];
	FAUSTFLOAT fHslider8;
	float fRec56[2];
	FAUSTFLOAT fHslider9;
	float fRec57[2];
	float fVec3[4096];
	int iConst19;
	float fVec4[2048];
	int iConst20;
	float fRec9[2];
	float fConst21;
	float fConst22;
	float fConst23;
	float fConst24;
	float fRec61[2];
	float fRec60[2];
	float fVec5[32768];
	float fConst25;
	int iConst26;
	float fVec6[4096];
	int iConst27;
	float fRec58[2];
	float fConst28;
	float fConst29;
	float fConst30;
	float fConst31;
	float fRec65[2];
	float fRec64[2];
	float fVec7[16384];
	float fConst32;
	int iConst33;
	float fVec8[4096];
	int iConst34;
	float fRec62[2];
	float fConst35;
	float fConst36;
	float fConst37;
	float fConst38;
	float fRec69[2];
	float fRec68[2];
	float fVec9[32768];
	float fConst39;
	int iConst40;
	float fVec10[4096];
	int iConst41;
	float fRec66[2];
	float fConst42;
	float fConst43;
	float fConst44;
	float fConst45;
	float fRec73[2];
	float fRec72[2];
	float fVec11[16384];
	float fConst46;
	int iConst47;
	float fVec12[2048];
	int iConst48;
	float fRec70[2];
	float fConst49;
	float fConst50;
	float fConst51;
	float fConst52;
	float fRec77[2];
	float fRec76[2];
	float fVec13[16384];
	float fConst53;
	int iConst54;
	float fVec14[4096];
	int iConst55;
	float fRec74[2];
	float fConst56;
	float fConst57;
	float fConst58;
	float fConst59;
	float fRec81[2];
	float fRec80[2];
	float fVec15[16384];
	float fConst60;
	int iConst61;
	float fVec16[4096];
	int iConst62;
	float fRec78[2];
	float fConst63;
	float fConst64;
	float fConst65;
	float fConst66;
	float fRec85[2];
	float fRec84[2];
	float fVec17[16384];
	float fConst67;
	int iConst68;
	float fVec18[2048];
	int iConst69;
	float fRec82[2];
	float fRec1[3];
	float fRec2[3];
	float fRec3[3];
	float fRec4[3];
	float fRec5[3];
	float fRec6[3];
	float fRec7[3];
	float fRec8[3];
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("author", "ER");
		m->declare("basics_lib_name", "Faust Basic Element Library");
		m->declare("basics_lib_version", "0.0");
		m->declare("compilation_options", "-single -scal -e modulations.dsp -o modulations_exp.dsp");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("delays_lib_name", "Faust Delay Library");
		m->declare("delays_lib_version", "0.1");
		m->declare("envelopes_lib_author", "GRAME");
		m->declare("envelopes_lib_copyright", "GRAME");
		m->declare("envelopes_lib_license", "LGPL with exception");
		m->declare("envelopes_lib_name", "Faust Envelope Library");
		m->declare("envelopes_lib_version", "0.0");
		m->declare("filename", "modulations.dsp");
		m->declare("filters_lib_name", "Faust Filters Library");
		m->declare("filters_lib_version", "0.0");
		m->declare("instruments_lib_author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instruments_lib_copyright", "Romain Michon");
		m->declare("instruments_lib_licence", "STK-4.3");
		m->declare("instruments_lib_name", "Faust-STK Tools Library");
		m->declare("instruments_lib_version", "1.0");
		m->declare("library_path", "/usr/local/share/faust/stdfaust.lib");
		m->declare("maths_lib_author", "GRAME");
		m->declare("maths_lib_copyright", "GRAME");
		m->declare("maths_lib_license", "LGPL with exception");
		m->declare("maths_lib_name", "Faust Math Library");
		m->declare("maths_lib_version", "2.1");
		m->declare("name", "modulations");
		m->declare("oscillators_lib_name", "Faust Oscillator Library");
		m->declare("oscillators_lib_version", "0.0");
		m->declare("reverbs_lib_name", "Faust Reverb Library");
		m->declare("reverbs_lib_version", "0.0");
		m->declare("routes_lib_name", "Faust Signal Routing Library");
		m->declare("routes_lib_version", "0.0");
		m->declare("signals_lib_name", "Faust Signal Routing Library");
		m->declare("signals_lib_version", "0.0");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
		mydspSIG0* sig0 = newmydspSIG0();
		sig0->instanceInitmydspSIG0(sample_rate);
		sig0->fillmydspSIG0(65536, ftbl0mydspSIG0);
		sig0->instanceInitmydspSIG0(sample_rate);
		sig0->fillmydspSIG0(65537, ftbl1mydspSIG0);
		deletemydspSIG0(sig0);
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = std::cos(37699.113f / fConst0);
		fConst2 = std::floor(0.219991f * fConst0 + 0.5f);
		fConst3 = fConst2 / fConst0;
		fConst4 = 3.4538777f * fConst3;
		fConst5 = 2.3025851f * fConst3;
		fConst6 = 1.0f / std::tan(628.31854f / fConst0);
		fConst7 = 1.0f / (fConst6 + 1.0f);
		fConst8 = 1.0f - fConst6;
		fConst9 = std::floor(0.019123f * fConst0 + 0.5f);
		iConst10 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst2 - fConst9)));
		fConst11 = 1.0f / std::tan(6283.1855f / fConst0);
		fConst12 = 1.0f / (fConst11 + 1.0f);
		fConst13 = 1.0f - fConst11;
		fConst14 = 1.0f / fConst0;
		fConst15 = 2.0f * fConst0;
		fConst16 = 3.0f * fConst0;
		fConst17 = 0.33333334f / fConst0;
		fConst18 = 0.5f / fConst0;
		iConst19 = int(std::min<float>(8192.0f, std::max<float>(0.0f, 0.02f * fConst0)));
		iConst20 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst9 + -1.0f)));
		fConst21 = std::floor(0.256891f * fConst0 + 0.5f);
		fConst22 = fConst21 / fConst0;
		fConst23 = 3.4538777f * fConst22;
		fConst24 = 2.3025851f * fConst22;
		fConst25 = std::floor(0.027333f * fConst0 + 0.5f);
		iConst26 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst21 - fConst25)));
		iConst27 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst25 + -1.0f)));
		fConst28 = std::floor(0.192303f * fConst0 + 0.5f);
		fConst29 = fConst28 / fConst0;
		fConst30 = 3.4538777f * fConst29;
		fConst31 = 2.3025851f * fConst29;
		fConst32 = std::floor(0.029291f * fConst0 + 0.5f);
		iConst33 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst28 - fConst32)));
		iConst34 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst32 + -1.0f)));
		fConst35 = std::floor(0.210389f * fConst0 + 0.5f);
		fConst36 = fConst35 / fConst0;
		fConst37 = 3.4538777f * fConst36;
		fConst38 = 2.3025851f * fConst36;
		fConst39 = std::floor(0.024421f * fConst0 + 0.5f);
		iConst40 = int(std::min<float>(16384.0f, std::max<float>(0.0f, fConst35 - fConst39)));
		iConst41 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst39 + -1.0f)));
		fConst42 = std::floor(0.125f * fConst0 + 0.5f);
		fConst43 = fConst42 / fConst0;
		fConst44 = 3.4538777f * fConst43;
		fConst45 = 2.3025851f * fConst43;
		fConst46 = std::floor(0.013458f * fConst0 + 0.5f);
		iConst47 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst42 - fConst46)));
		iConst48 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst46 + -1.0f)));
		fConst49 = std::floor(0.127837f * fConst0 + 0.5f);
		fConst50 = fConst49 / fConst0;
		fConst51 = 3.4538777f * fConst50;
		fConst52 = 2.3025851f * fConst50;
		fConst53 = std::floor(0.031604f * fConst0 + 0.5f);
		iConst54 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst49 - fConst53)));
		iConst55 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst53 + -1.0f)));
		fConst56 = std::floor(0.174713f * fConst0 + 0.5f);
		fConst57 = fConst56 / fConst0;
		fConst58 = 3.4538777f * fConst57;
		fConst59 = 2.3025851f * fConst57;
		fConst60 = std::floor(0.022904f * fConst0 + 0.5f);
		iConst61 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst56 - fConst60)));
		iConst62 = int(std::min<float>(2048.0f, std::max<float>(0.0f, fConst60 + -1.0f)));
		fConst63 = std::floor(0.153129f * fConst0 + 0.5f);
		fConst64 = fConst63 / fConst0;
		fConst65 = 3.4538777f * fConst64;
		fConst66 = 2.3025851f * fConst64;
		fConst67 = std::floor(0.020346f * fConst0 + 0.5f);
		iConst68 = int(std::min<float>(8192.0f, std::max<float>(0.0f, fConst63 - fConst67)));
		iConst69 = int(std::min<float>(1024.0f, std::max<float>(0.0f, fConst67 + -1.0f)));
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(1.0f);
		fHslider1 = FAUSTFLOAT(0.5f);
		fHslider2 = FAUSTFLOAT(1.2e+03f);
		fHslider3 = FAUSTFLOAT(0.0f);
		fHslider4 = FAUSTFLOAT(3.3e+02f);
		fHslider5 = FAUSTFLOAT(0.0f);
		fHslider6 = FAUSTFLOAT(0.0f);
		fHslider7 = FAUSTFLOAT(0.0f);
		fHslider8 = FAUSTFLOAT(0.5f);
		fHslider9 = FAUSTFLOAT(0.25f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			fRec0[l0] = 0.0f;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec12[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec11[l2] = 0.0f;
		}
		IOTA0 = 0;
		for (int l3 = 0; l3 < 32768; l3 = l3 + 1) {
			fVec0[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec15[l4] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fRec18[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec17[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fRec19[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fRec21[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fRec20[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fRec23[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fRec22[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fRec28[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fRec27[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fRec26[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
			fRec25[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2; l17 = l17 + 1) {
			fRec24[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fRec14[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fRec29[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fRec31[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 2; l21 = l21 + 1) {
			fRec30[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			fRec37[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fRec36[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			fRec35[l24] = 0.0f;
		}
		for (int l25 = 0; l25 < 2; l25 = l25 + 1) {
			fRec34[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			fRec33[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			fRec32[l27] = 0.0f;
		}
		for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
			fVec1[l28] = 0.0f;
		}
		for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
			fRec38[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			fRec40[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
			fRec39[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 2; l32 = l32 + 1) {
			fRec46[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			fRec45[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			fRec44[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec43[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
			fRec42[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 2; l37 = l37 + 1) {
			fRec41[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			fRec47[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fRec49[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
			fRec48[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
			fRec55[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 2; l42 = l42 + 1) {
			fRec54[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
			fRec53[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 2; l44 = l44 + 1) {
			fRec52[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 2; l45 = l45 + 1) {
			fRec51[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 2; l46 = l46 + 1) {
			fRec50[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 2; l47 = l47 + 1) {
			fVec2[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 2; l48 = l48 + 1) {
			fRec13[l48] = 0.0f;
		}
		for (int l49 = 0; l49 < 2; l49 = l49 + 1) {
			fRec56[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 2; l50 = l50 + 1) {
			fRec57[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 4096; l51 = l51 + 1) {
			fVec3[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 2048; l52 = l52 + 1) {
			fVec4[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 2; l53 = l53 + 1) {
			fRec9[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 2; l54 = l54 + 1) {
			fRec61[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 2; l55 = l55 + 1) {
			fRec60[l55] = 0.0f;
		}
		for (int l56 = 0; l56 < 32768; l56 = l56 + 1) {
			fVec5[l56] = 0.0f;
		}
		for (int l57 = 0; l57 < 4096; l57 = l57 + 1) {
			fVec6[l57] = 0.0f;
		}
		for (int l58 = 0; l58 < 2; l58 = l58 + 1) {
			fRec58[l58] = 0.0f;
		}
		for (int l59 = 0; l59 < 2; l59 = l59 + 1) {
			fRec65[l59] = 0.0f;
		}
		for (int l60 = 0; l60 < 2; l60 = l60 + 1) {
			fRec64[l60] = 0.0f;
		}
		for (int l61 = 0; l61 < 16384; l61 = l61 + 1) {
			fVec7[l61] = 0.0f;
		}
		for (int l62 = 0; l62 < 4096; l62 = l62 + 1) {
			fVec8[l62] = 0.0f;
		}
		for (int l63 = 0; l63 < 2; l63 = l63 + 1) {
			fRec62[l63] = 0.0f;
		}
		for (int l64 = 0; l64 < 2; l64 = l64 + 1) {
			fRec69[l64] = 0.0f;
		}
		for (int l65 = 0; l65 < 2; l65 = l65 + 1) {
			fRec68[l65] = 0.0f;
		}
		for (int l66 = 0; l66 < 32768; l66 = l66 + 1) {
			fVec9[l66] = 0.0f;
		}
		for (int l67 = 0; l67 < 4096; l67 = l67 + 1) {
			fVec10[l67] = 0.0f;
		}
		for (int l68 = 0; l68 < 2; l68 = l68 + 1) {
			fRec66[l68] = 0.0f;
		}
		for (int l69 = 0; l69 < 2; l69 = l69 + 1) {
			fRec73[l69] = 0.0f;
		}
		for (int l70 = 0; l70 < 2; l70 = l70 + 1) {
			fRec72[l70] = 0.0f;
		}
		for (int l71 = 0; l71 < 16384; l71 = l71 + 1) {
			fVec11[l71] = 0.0f;
		}
		for (int l72 = 0; l72 < 2048; l72 = l72 + 1) {
			fVec12[l72] = 0.0f;
		}
		for (int l73 = 0; l73 < 2; l73 = l73 + 1) {
			fRec70[l73] = 0.0f;
		}
		for (int l74 = 0; l74 < 2; l74 = l74 + 1) {
			fRec77[l74] = 0.0f;
		}
		for (int l75 = 0; l75 < 2; l75 = l75 + 1) {
			fRec76[l75] = 0.0f;
		}
		for (int l76 = 0; l76 < 16384; l76 = l76 + 1) {
			fVec13[l76] = 0.0f;
		}
		for (int l77 = 0; l77 < 4096; l77 = l77 + 1) {
			fVec14[l77] = 0.0f;
		}
		for (int l78 = 0; l78 < 2; l78 = l78 + 1) {
			fRec74[l78] = 0.0f;
		}
		for (int l79 = 0; l79 < 2; l79 = l79 + 1) {
			fRec81[l79] = 0.0f;
		}
		for (int l80 = 0; l80 < 2; l80 = l80 + 1) {
			fRec80[l80] = 0.0f;
		}
		for (int l81 = 0; l81 < 16384; l81 = l81 + 1) {
			fVec15[l81] = 0.0f;
		}
		for (int l82 = 0; l82 < 4096; l82 = l82 + 1) {
			fVec16[l82] = 0.0f;
		}
		for (int l83 = 0; l83 < 2; l83 = l83 + 1) {
			fRec78[l83] = 0.0f;
		}
		for (int l84 = 0; l84 < 2; l84 = l84 + 1) {
			fRec85[l84] = 0.0f;
		}
		for (int l85 = 0; l85 < 2; l85 = l85 + 1) {
			fRec84[l85] = 0.0f;
		}
		for (int l86 = 0; l86 < 16384; l86 = l86 + 1) {
			fVec17[l86] = 0.0f;
		}
		for (int l87 = 0; l87 < 2048; l87 = l87 + 1) {
			fVec18[l87] = 0.0f;
		}
		for (int l88 = 0; l88 < 2; l88 = l88 + 1) {
			fRec82[l88] = 0.0f;
		}
		for (int l89 = 0; l89 < 3; l89 = l89 + 1) {
			fRec1[l89] = 0.0f;
		}
		for (int l90 = 0; l90 < 3; l90 = l90 + 1) {
			fRec2[l90] = 0.0f;
		}
		for (int l91 = 0; l91 < 3; l91 = l91 + 1) {
			fRec3[l91] = 0.0f;
		}
		for (int l92 = 0; l92 < 3; l92 = l92 + 1) {
			fRec4[l92] = 0.0f;
		}
		for (int l93 = 0; l93 < 3; l93 = l93 + 1) {
			fRec5[l93] = 0.0f;
		}
		for (int l94 = 0; l94 < 3; l94 = l94 + 1) {
			fRec6[l94] = 0.0f;
		}
		for (int l95 = 0; l95 < 3; l95 = l95 + 1) {
			fRec7[l95] = 0.0f;
		}
		for (int l96 = 0; l96 < 3; l96 = l96 + 1) {
			fRec8[l96] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Modulations");
		ui_interface->openHorizontalBox("Instrument");
		ui_interface->declare(&fHslider4, "acc", "1 1 -10 0 15");
		ui_interface->declare(&fHslider4, "unit", "Hz");
		ui_interface->addHorizontalSlider("Frequency", &fHslider4, FAUSTFLOAT(3.3e+02f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.2e+03f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider0, "acc", "1 1 -10 0 10");
		ui_interface->declare(&fHslider0, "style", "knob");
		ui_interface->addHorizontalSlider("General Volume", &fHslider0, FAUSTFLOAT(1.0f), FAUSTFLOAT(0.75f), FAUSTFLOAT(4.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider8, "acc", "1 0 -10 0 10");
		ui_interface->declare(&fHslider8, "style", "knob");
		ui_interface->addHorizontalSlider("Oscillator Volume", &fHslider8, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider2, "acc", "0 0 -10 0 10");
		ui_interface->declare(&fHslider2, "style", "knob");
		ui_interface->declare(&fHslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("Modulating Frequency", &fHslider2, FAUSTFLOAT(1.2e+03f), FAUSTFLOAT(9e+02f), FAUSTFLOAT(1.7e+03f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Modulations");
		ui_interface->declare(&fHslider5, "acc", "0 0 -30 0 10");
		ui_interface->declare(&fHslider5, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 0 (ASR Envelope)", &fHslider5, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider6, "acc", "0 0 -30 0 5");
		ui_interface->declare(&fHslider6, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 1 (ASR Envelope)", &fHslider6, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider7, "acc", "2 1 -30 0 10");
		ui_interface->declare(&fHslider7, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 2 (ASR Envelope)", &fHslider7, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider3, "acc", "1 0 -10 0 10");
		ui_interface->declare(&fHslider3, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 3 (ASR Envelope)", &fHslider3, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Reverb");
		ui_interface->declare(&fHslider1, "acc", "1 1 -10 0 10");
		ui_interface->addHorizontalSlider("Reverberation Room Size(InstrReverb)", &fHslider1, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.05f), FAUSTFLOAT(2.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider9, "acc", "1 1 -10 0 10");
		ui_interface->addHorizontalSlider("Reverberation Volume(InstrReverb)", &fHslider9, FAUSTFLOAT(0.25f), FAUSTFLOAT(0.05f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = 0.001f * float(fHslider0);
		float fSlow1 = std::max<float>(0.05f, std::min<float>(2.0f, float(fHslider1)));
		float fSlow2 = std::exp(-(fConst4 / fSlow1));
		float fSlow3 = mydsp_faustpower2_f(fSlow2);
		float fSlow4 = 1.0f - fConst1 * fSlow3;
		float fSlow5 = 1.0f - fSlow3;
		float fSlow6 = fSlow4 / fSlow5;
		float fSlow7 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow4) / mydsp_faustpower2_f(fSlow5) + -1.0f));
		float fSlow8 = fSlow6 - fSlow7;
		float fSlow9 = fSlow2 * (fSlow7 + (1.0f - fSlow6));
		float fSlow10 = std::exp(-(fConst5 / fSlow1)) / fSlow2 + -1.0f;
		float fSlow11 = 0.001f * float(fHslider2);
		float fSlow12 = float(fHslider3);
		int iSlow13 = fSlow12 > 0.0f;
		int iSlow14 = iSlow13 > 0;
		float fSlow15 = float(iSlow13);
		int iSlow16 = (fSlow12 == 0.0f) > 0;
		float fSlow17 = fConst17 * fSlow12;
		float fSlow18 = 0.001f * float(fHslider4);
		float fSlow19 = float(fHslider5);
		int iSlow20 = fSlow19 > 0.0f;
		int iSlow21 = iSlow20 > 0;
		float fSlow22 = float(iSlow20);
		int iSlow23 = (fSlow19 == 0.0f) > 0;
		float fSlow24 = fConst17 * fSlow19;
		float fSlow25 = float(fHslider6);
		int iSlow26 = fSlow25 > 0.0f;
		int iSlow27 = iSlow26 > 0;
		float fSlow28 = float(iSlow26);
		int iSlow29 = (fSlow25 == 0.0f) > 0;
		float fSlow30 = fConst17 * fSlow25;
		float fSlow31 = float(fHslider7);
		int iSlow32 = fSlow31 > 0.0f;
		int iSlow33 = iSlow32 > 0;
		float fSlow34 = float(iSlow32);
		int iSlow35 = (fSlow31 == 0.0f) > 0;
		float fSlow36 = fConst17 * fSlow31;
		float fSlow37 = 0.001f * mydsp_faustpower2_f(float(fHslider8));
		float fSlow38 = 0.001f * float(fHslider9);
		float fSlow39 = std::exp(-(fConst23 / fSlow1));
		float fSlow40 = mydsp_faustpower2_f(fSlow39);
		float fSlow41 = 1.0f - fConst1 * fSlow40;
		float fSlow42 = 1.0f - fSlow40;
		float fSlow43 = fSlow41 / fSlow42;
		float fSlow44 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow41) / mydsp_faustpower2_f(fSlow42) + -1.0f));
		float fSlow45 = fSlow43 - fSlow44;
		float fSlow46 = fSlow39 * (fSlow44 + (1.0f - fSlow43));
		float fSlow47 = std::exp(-(fConst24 / fSlow1)) / fSlow39 + -1.0f;
		float fSlow48 = std::exp(-(fConst30 / fSlow1));
		float fSlow49 = mydsp_faustpower2_f(fSlow48);
		float fSlow50 = 1.0f - fConst1 * fSlow49;
		float fSlow51 = 1.0f - fSlow49;
		float fSlow52 = fSlow50 / fSlow51;
		float fSlow53 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow50) / mydsp_faustpower2_f(fSlow51) + -1.0f));
		float fSlow54 = fSlow52 - fSlow53;
		float fSlow55 = fSlow48 * (fSlow53 + (1.0f - fSlow52));
		float fSlow56 = std::exp(-(fConst31 / fSlow1)) / fSlow48 + -1.0f;
		float fSlow57 = std::exp(-(fConst37 / fSlow1));
		float fSlow58 = mydsp_faustpower2_f(fSlow57);
		float fSlow59 = 1.0f - fConst1 * fSlow58;
		float fSlow60 = 1.0f - fSlow58;
		float fSlow61 = fSlow59 / fSlow60;
		float fSlow62 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow59) / mydsp_faustpower2_f(fSlow60) + -1.0f));
		float fSlow63 = fSlow61 - fSlow62;
		float fSlow64 = fSlow57 * (fSlow62 + (1.0f - fSlow61));
		float fSlow65 = std::exp(-(fConst38 / fSlow1)) / fSlow57 + -1.0f;
		float fSlow66 = std::exp(-(fConst44 / fSlow1));
		float fSlow67 = mydsp_faustpower2_f(fSlow66);
		float fSlow68 = 1.0f - fConst1 * fSlow67;
		float fSlow69 = 1.0f - fSlow67;
		float fSlow70 = fSlow68 / fSlow69;
		float fSlow71 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow68) / mydsp_faustpower2_f(fSlow69) + -1.0f));
		float fSlow72 = fSlow70 - fSlow71;
		float fSlow73 = fSlow66 * (fSlow71 + (1.0f - fSlow70));
		float fSlow74 = std::exp(-(fConst45 / fSlow1)) / fSlow66 + -1.0f;
		float fSlow75 = std::exp(-(fConst51 / fSlow1));
		float fSlow76 = mydsp_faustpower2_f(fSlow75);
		float fSlow77 = 1.0f - fConst1 * fSlow76;
		float fSlow78 = 1.0f - fSlow76;
		float fSlow79 = fSlow77 / fSlow78;
		float fSlow80 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow77) / mydsp_faustpower2_f(fSlow78) + -1.0f));
		float fSlow81 = fSlow79 - fSlow80;
		float fSlow82 = fSlow75 * (fSlow80 + (1.0f - fSlow79));
		float fSlow83 = std::exp(-(fConst52 / fSlow1)) / fSlow75 + -1.0f;
		float fSlow84 = std::exp(-(fConst58 / fSlow1));
		float fSlow85 = mydsp_faustpower2_f(fSlow84);
		float fSlow86 = 1.0f - fConst1 * fSlow85;
		float fSlow87 = 1.0f - fSlow85;
		float fSlow88 = fSlow86 / fSlow87;
		float fSlow89 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow86) / mydsp_faustpower2_f(fSlow87) + -1.0f));
		float fSlow90 = fSlow88 - fSlow89;
		float fSlow91 = fSlow84 * (fSlow89 + (1.0f - fSlow88));
		float fSlow92 = std::exp(-(fConst59 / fSlow1)) / fSlow84 + -1.0f;
		float fSlow93 = std::exp(-(fConst65 / fSlow1));
		float fSlow94 = mydsp_faustpower2_f(fSlow93);
		float fSlow95 = 1.0f - fConst1 * fSlow94;
		float fSlow96 = 1.0f - fSlow94;
		float fSlow97 = fSlow95 / fSlow96;
		float fSlow98 = std::sqrt(std::max<float>(0.0f, mydsp_faustpower2_f(fSlow95) / mydsp_faustpower2_f(fSlow96) + -1.0f));
		float fSlow99 = fSlow97 - fSlow98;
		float fSlow100 = fSlow93 * (fSlow98 + (1.0f - fSlow97));
		float fSlow101 = std::exp(-(fConst66 / fSlow1)) / fSlow93 + -1.0f;
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			fRec0[0] = fSlow0 + 0.999f * fRec0[1];
			float fTemp0 = std::max<float>(0.75f, std::min<float>(4.0f, fRec0[0]));
			fRec12[0] = -(fConst7 * (fConst8 * fRec12[1] - (fRec8[1] + fRec8[2])));
			fRec11[0] = fSlow8 * fRec11[1] + fSlow9 * (fRec8[1] + fSlow10 * fRec12[0]);
			fVec0[IOTA0 & 32767] = 0.35355338f * fRec11[0] + 1e-20f;
			float fTemp1 = 0.6f * fRec9[1] + fVec0[(IOTA0 - iConst10) & 32767];
			fRec15[0] = 0.999f * fRec15[1] + 0.0008f;
			fRec18[0] = fSlow11 + 0.999f * fRec18[1];
			float fTemp2 = fRec17[1] + fConst14 * fRec18[0];
			fRec17[0] = fTemp2 - std::floor(fTemp2);
			fRec19[0] = ((iSlow14) ? 0.0f : std::min<float>(fConst15, fRec19[1] + 1.0f));
			fRec21[0] = ((iSlow16) ? 0.0f : std::min<float>(fConst16, fRec21[1] + 1.0f));
			fRec20[0] = ((iSlow13) ? fSlow15 * ((fRec21[0] < 0.0f) ? 0.0f : ((fRec21[0] < fConst16) ? fSlow17 * fRec21[0] : fSlow12)) : fRec20[1]);
			float fTemp3 = 3.1415927f * fRec15[0] * ftbl0mydspSIG0[std::max<int>(0, std::min<int>(int(65536.0f * fRec17[0]), 65535))] * ((fRec19[0] < 0.0f) ? fRec20[0] : ((fRec19[0] < fConst15) ? fRec20[0] * (1.0f - fConst18 * fRec19[0]) : 0.0f));
			float fTemp4 = std::sin(fTemp3);
			fRec23[0] = fSlow18 + 0.999f * fRec23[1];
			float fTemp5 = fRec22[1] + fConst14 * fRec23[0];
			fRec22[0] = fTemp5 - std::floor(fTemp5);
			float fTemp6 = 65536.0f * fRec22[0];
			int iTemp7 = int(fTemp6);
			float fTemp8 = ftbl1mydspSIG0[std::max<int>(0, std::min<int>(iTemp7, 65536))];
			float fTemp9 = fTemp8 + (fTemp6 - std::floor(fTemp6)) * (ftbl1mydspSIG0[std::max<int>(0, std::min<int>(iTemp7 + 1, 65536))] - fTemp8);
			float fTemp10 = std::cos(fTemp3);
			float fTemp11 = fTemp9 * fTemp10 - fTemp4 * fRec14[1];
			float fTemp12 = fTemp10 * fTemp11 - fTemp4 * fRec24[1];
			float fTemp13 = fTemp10 * fTemp12 - fTemp4 * fRec25[1];
			float fTemp14 = fTemp10 * fTemp13 - fTemp4 * fRec26[1];
			float fTemp15 = fTemp10 * fTemp14 - fTemp4 * fRec27[1];
			fRec28[0] = fTemp10 * fTemp15 - fTemp4 * fRec28[1];
			fRec27[0] = fTemp4 * fTemp15 + fTemp10 * fRec28[1];
			fRec26[0] = fTemp4 * fTemp14 + fTemp10 * fRec27[1];
			fRec25[0] = fTemp4 * fTemp13 + fTemp10 * fRec26[1];
			fRec24[0] = fTemp4 * fTemp12 + fTemp10 * fRec25[1];
			fRec14[0] = fTemp4 * fTemp11 + fTemp10 * fRec24[1];
			fRec29[0] = ((iSlow21) ? 0.0f : std::min<float>(fConst15, fRec29[1] + 1.0f));
			fRec31[0] = ((iSlow23) ? 0.0f : std::min<float>(fConst16, fRec31[1] + 1.0f));
			fRec30[0] = ((iSlow20) ? fSlow22 * ((fRec31[0] < 0.0f) ? 0.0f : ((fRec31[0] < fConst16) ? fSlow24 * fRec31[0] : fSlow19)) : fRec30[1]);
			float fTemp16 = 3.1415927f * fRec15[0] * fTemp9 * ((fRec29[0] < 0.0f) ? fRec30[0] : ((fRec29[0] < fConst15) ? fRec30[0] * (1.0f - fConst18 * fRec29[0]) : 0.0f));
			float fTemp17 = std::sin(fTemp16);
			float fTemp18 = std::cos(fTemp16);
			float fTemp19 = fTemp9 * fTemp18 - fTemp17 * fRec32[1];
			float fTemp20 = fTemp18 * fTemp19 - fTemp17 * fRec33[1];
			float fTemp21 = fTemp18 * fTemp20 - fTemp17 * fRec34[1];
			float fTemp22 = fTemp18 * fTemp21 - fTemp17 * fRec35[1];
			float fTemp23 = fTemp18 * fTemp22 - fTemp17 * fRec36[1];
			fRec37[0] = fTemp18 * fTemp23 - fTemp17 * fRec37[1];
			fRec36[0] = fTemp17 * fTemp23 + fTemp18 * fRec37[1];
			fRec35[0] = fTemp17 * fTemp22 + fTemp18 * fRec36[1];
			fRec34[0] = fTemp17 * fTemp21 + fTemp18 * fRec35[1];
			fRec33[0] = fTemp17 * fTemp20 + fTemp18 * fRec34[1];
			fRec32[0] = fTemp17 * fTemp19 + fTemp18 * fRec33[1];
			float fTemp24 = 1.0f - fRec15[0];
			float fTemp25 = fRec15[0] * (fTemp9 * fTemp17 + fRec32[1] * fTemp18) + fTemp24 * fTemp9;
			fVec1[0] = fTemp25;
			fRec38[0] = ((iSlow27) ? 0.0f : std::min<float>(fConst15, fRec38[1] + 1.0f));
			fRec40[0] = ((iSlow29) ? 0.0f : std::min<float>(fConst16, fRec40[1] + 1.0f));
			fRec39[0] = ((iSlow26) ? fSlow28 * ((fRec40[0] < 0.0f) ? 0.0f : ((fRec40[0] < fConst16) ? fSlow30 * fRec40[0] : fSlow25)) : fRec39[1]);
			float fTemp26 = 1.5707964f * fRec15[0] * ((fRec38[0] < 0.0f) ? fRec39[0] : ((fRec38[0] < fConst15) ? fRec39[0] * (1.0f - fConst18 * fRec38[0]) : 0.0f)) * (fTemp25 + fVec1[1]);
			float fTemp27 = std::sin(fTemp26);
			float fTemp28 = std::cos(fTemp26);
			float fTemp29 = fTemp25 * fTemp28 - fTemp27 * fRec41[1];
			float fTemp30 = fTemp28 * fTemp29 - fTemp27 * fRec42[1];
			float fTemp31 = fTemp28 * fTemp30 - fTemp27 * fRec43[1];
			float fTemp32 = fTemp28 * fTemp31 - fTemp27 * fRec44[1];
			float fTemp33 = fTemp28 * fTemp32 - fTemp27 * fRec45[1];
			fRec46[0] = fTemp28 * fTemp33 - fTemp27 * fRec46[1];
			fRec45[0] = fTemp27 * fTemp33 + fTemp28 * fRec46[1];
			fRec44[0] = fTemp27 * fTemp32 + fTemp28 * fRec45[1];
			fRec43[0] = fTemp27 * fTemp31 + fTemp28 * fRec44[1];
			fRec42[0] = fTemp27 * fTemp30 + fTemp28 * fRec43[1];
			fRec41[0] = fTemp27 * fTemp29 + fTemp28 * fRec42[1];
			float fTemp34 = fRec15[0] * (fTemp25 * fTemp27 + fRec41[1] * fTemp28) + fTemp24 * fTemp25;
			fRec47[0] = ((iSlow33) ? 0.0f : std::min<float>(fConst15, fRec47[1] + 1.0f));
			fRec49[0] = ((iSlow35) ? 0.0f : std::min<float>(fConst16, fRec49[1] + 1.0f));
			fRec48[0] = ((iSlow32) ? fSlow34 * ((fRec49[0] < 0.0f) ? 0.0f : ((fRec49[0] < fConst16) ? fSlow36 * fRec49[0] : fSlow31)) : fRec48[1]);
			float fTemp35 = 3.1415927f * fRec15[0] * mydsp_faustpower2_f(fTemp34) * ((fRec47[0] < 0.0f) ? fRec48[0] : ((fRec47[0] < fConst15) ? fRec48[0] * (1.0f - fConst18 * fRec47[0]) : 0.0f));
			float fTemp36 = std::sin(fTemp35);
			float fTemp37 = std::cos(fTemp35);
			float fTemp38 = fTemp34 * fTemp37 - fTemp36 * fRec50[1];
			float fTemp39 = fTemp37 * fTemp38 - fTemp36 * fRec51[1];
			float fTemp40 = fTemp37 * fTemp39 - fTemp36 * fRec52[1];
			float fTemp41 = fTemp37 * fTemp40 - fTemp36 * fRec53[1];
			float fTemp42 = fTemp37 * fTemp41 - fTemp36 * fRec54[1];
			fRec55[0] = fTemp37 * fTemp42 - fTemp36 * fRec55[1];
			fRec54[0] = fTemp36 * fTemp42 + fTemp37 * fRec55[1];
			fRec53[0] = fTemp36 * fTemp41 + fTemp37 * fRec54[1];
			fRec52[0] = fTemp36 * fTemp40 + fTemp37 * fRec53[1];
			fRec51[0] = fTemp36 * fTemp39 + fTemp37 * fRec52[1];
			fRec50[0] = fTemp36 * fTemp38 + fTemp37 * fRec51[1];
			float fTemp43 = fRec14[1] * fTemp10 + fRec15[0] * (fTemp34 * fTemp36 + fRec50[1] * fTemp37) + fTemp24 * fTemp34 + fTemp9 * fTemp4;
			fVec2[0] = fTemp43;
			fRec13[0] = -(fConst12 * (fConst13 * fRec13[1] - (fTemp43 + fVec2[1])));
			fRec56[0] = fSlow37 + 0.999f * fRec56[1];
			float fTemp44 = fRec13[0] * fRec56[0];
			fRec57[0] = fSlow38 + 0.999f * fRec57[1];
			float fTemp45 = std::max<float>(0.05f, std::min<float>(1.0f, fRec57[0]));
			fVec3[IOTA0 & 4095] = fTemp44 * fTemp45;
			float fTemp46 = 0.18f * fVec3[(IOTA0 - iConst19) & 4095];
			fVec4[IOTA0 & 2047] = fTemp1 - fTemp46;
			fRec9[0] = fVec4[(IOTA0 - iConst20) & 2047];
			float fRec10 = 0.6f * (fTemp46 - fTemp1);
			fRec61[0] = -(fConst7 * (fConst8 * fRec61[1] - (fRec4[1] + fRec4[2])));
			fRec60[0] = fSlow45 * fRec60[1] + fSlow46 * (fRec4[1] + fSlow47 * fRec61[0]);
			fVec5[IOTA0 & 32767] = 0.35355338f * fRec60[0] + 1e-20f;
			float fTemp47 = 0.6f * fRec58[1] + fVec5[(IOTA0 - iConst26) & 32767];
			fVec6[IOTA0 & 4095] = fTemp47 - fTemp46;
			fRec58[0] = fVec6[(IOTA0 - iConst27) & 4095];
			float fRec59 = 0.6f * (fTemp46 - fTemp47);
			fRec65[0] = -(fConst7 * (fConst8 * fRec65[1] - (fRec6[1] + fRec6[2])));
			fRec64[0] = fSlow54 * fRec64[1] + fSlow55 * (fRec6[1] + fSlow56 * fRec65[0]);
			fVec7[IOTA0 & 16383] = 0.35355338f * fRec64[0] + 1e-20f;
			float fTemp48 = fVec7[(IOTA0 - iConst33) & 16383] + fTemp46 + 0.6f * fRec62[1];
			fVec8[IOTA0 & 4095] = fTemp48;
			fRec62[0] = fVec8[(IOTA0 - iConst34) & 4095];
			float fRec63 = -(0.6f * fTemp48);
			fRec69[0] = -(fConst7 * (fConst8 * fRec69[1] - (fRec2[1] + fRec2[2])));
			fRec68[0] = fSlow63 * fRec68[1] + fSlow64 * (fRec2[1] + fSlow65 * fRec69[0]);
			fVec9[IOTA0 & 32767] = 0.35355338f * fRec68[0] + 1e-20f;
			float fTemp49 = fVec9[(IOTA0 - iConst40) & 32767] + fTemp46 + 0.6f * fRec66[1];
			fVec10[IOTA0 & 4095] = fTemp49;
			fRec66[0] = fVec10[(IOTA0 - iConst41) & 4095];
			float fRec67 = -(0.6f * fTemp49);
			fRec73[0] = -(fConst7 * (fConst8 * fRec73[1] - (fRec7[1] + fRec7[2])));
			fRec72[0] = fSlow72 * fRec72[1] + fSlow73 * (fRec7[1] + fSlow74 * fRec73[0]);
			fVec11[IOTA0 & 16383] = 0.35355338f * fRec72[0] + 1e-20f;
			float fTemp50 = fVec11[(IOTA0 - iConst47) & 16383] - (fTemp46 + 0.6f * fRec70[1]);
			fVec12[IOTA0 & 2047] = fTemp50;
			fRec70[0] = fVec12[(IOTA0 - iConst48) & 2047];
			float fRec71 = 0.6f * fTemp50;
			fRec77[0] = -(fConst7 * (fConst8 * fRec77[1] - (fRec3[1] + fRec3[2])));
			fRec76[0] = fSlow81 * fRec76[1] + fSlow82 * (fRec3[1] + fSlow83 * fRec77[0]);
			fVec13[IOTA0 & 16383] = 0.35355338f * fRec76[0] + 1e-20f;
			float fTemp51 = fVec13[(IOTA0 - iConst54) & 16383] - (fTemp46 + 0.6f * fRec74[1]);
			fVec14[IOTA0 & 4095] = fTemp51;
			fRec74[0] = fVec14[(IOTA0 - iConst55) & 4095];
			float fRec75 = 0.6f * fTemp51;
			fRec81[0] = -(fConst7 * (fConst8 * fRec81[1] - (fRec5[1] + fRec5[2])));
			fRec80[0] = fSlow90 * fRec80[1] + fSlow91 * (fRec5[1] + fSlow92 * fRec81[0]);
			fVec15[IOTA0 & 16383] = 0.35355338f * fRec80[0] + 1e-20f;
			float fTemp52 = fTemp46 + fVec15[(IOTA0 - iConst61) & 16383] - 0.6f * fRec78[1];
			fVec16[IOTA0 & 4095] = fTemp52;
			fRec78[0] = fVec16[(IOTA0 - iConst62) & 4095];
			float fRec79 = 0.6f * fTemp52;
			fRec85[0] = -(fConst7 * (fConst8 * fRec85[1] - (fRec1[1] + fRec1[2])));
			fRec84[0] = fSlow99 * fRec84[1] + fSlow100 * (fRec1[1] + fSlow101 * fRec85[0]);
			fVec17[IOTA0 & 16383] = 0.35355338f * fRec84[0] + 1e-20f;
			float fTemp53 = fVec17[(IOTA0 - iConst68) & 16383] + fTemp46 - 0.6f * fRec82[1];
			fVec18[IOTA0 & 2047] = fTemp53;
			fRec82[0] = fVec18[(IOTA0 - iConst69) & 2047];
			float fRec83 = 0.6f * fTemp53;
			float fTemp54 = fRec83 + fRec79;
			float fTemp55 = fRec71 + fRec75 + fTemp54;
			fRec1[0] = fRec9[1] + fRec58[1] + fRec62[1] + fRec66[1] + fRec70[1] + fRec74[1] + fRec78[1] + fRec82[1] + fRec10 + fRec59 + fRec63 + fRec67 + fTemp55;
			fRec2[0] = fRec70[1] + fRec74[1] + fRec78[1] + fRec82[1] + fTemp55 - (fRec9[1] + fRec58[1] + fRec62[1] + fRec66[1] + fRec10 + fRec59 + fRec67 + fRec63);
			float fTemp56 = fRec75 + fRec71;
			fRec3[0] = fRec62[1] + fRec66[1] + fRec78[1] + fRec82[1] + fRec63 + fRec67 + fTemp54 - (fRec9[1] + fRec58[1] + fRec70[1] + fRec74[1] + fRec10 + fRec59 + fTemp56);
			fRec4[0] = fRec9[1] + fRec58[1] + fRec78[1] + fRec82[1] + fRec10 + fRec59 + fTemp54 - (fRec62[1] + fRec66[1] + fRec70[1] + fRec74[1] + fRec63 + fRec67 + fTemp56);
			float fTemp57 = fRec83 + fRec75;
			float fTemp58 = fRec79 + fRec71;
			fRec5[0] = fRec58[1] + fRec66[1] + fRec74[1] + fRec82[1] + fRec59 + fRec67 + fTemp57 - (fRec9[1] + fRec62[1] + fRec70[1] + fRec78[1] + fRec10 + fRec63 + fTemp58);
			fRec6[0] = fRec9[1] + fRec62[1] + fRec74[1] + fRec82[1] + fRec10 + fRec63 + fTemp57 - (fRec58[1] + fRec66[1] + fRec70[1] + fRec78[1] + fRec59 + fRec67 + fTemp58);
			float fTemp59 = fRec83 + fRec71;
			float fTemp60 = fRec79 + fRec75;
			fRec7[0] = fRec9[1] + fRec66[1] + fRec70[1] + fRec82[1] + fRec10 + fRec67 + fTemp59 - (fRec58[1] + fRec62[1] + fRec74[1] + fRec78[1] + fRec59 + fRec63 + fTemp60);
			fRec8[0] = fRec58[1] + fRec62[1] + fRec70[1] + fRec82[1] + fRec59 + fRec63 + fTemp59 - (fRec9[1] + fRec66[1] + fRec74[1] + fRec78[1] + fRec10 + fRec67 + fTemp60);
			float fTemp61 = 0.6f * fTemp44 * (1.0f - fTemp45);
			output0[i0] = FAUSTFLOAT(fTemp0 * (0.37f * (fRec2[0] + fRec3[0]) + fTemp61));
			output1[i0] = FAUSTFLOAT(fTemp0 * (fTemp61 + 0.37f * (fRec2[0] - fRec3[0])));
			fRec0[1] = fRec0[0];
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			IOTA0 = IOTA0 + 1;
			fRec15[1] = fRec15[0];
			fRec18[1] = fRec18[0];
			fRec17[1] = fRec17[0];
			fRec19[1] = fRec19[0];
			fRec21[1] = fRec21[0];
			fRec20[1] = fRec20[0];
			fRec23[1] = fRec23[0];
			fRec22[1] = fRec22[0];
			fRec28[1] = fRec28[0];
			fRec27[1] = fRec27[0];
			fRec26[1] = fRec26[0];
			fRec25[1] = fRec25[0];
			fRec24[1] = fRec24[0];
			fRec14[1] = fRec14[0];
			fRec29[1] = fRec29[0];
			fRec31[1] = fRec31[0];
			fRec30[1] = fRec30[0];
			fRec37[1] = fRec37[0];
			fRec36[1] = fRec36[0];
			fRec35[1] = fRec35[0];
			fRec34[1] = fRec34[0];
			fRec33[1] = fRec33[0];
			fRec32[1] = fRec32[0];
			fVec1[1] = fVec1[0];
			fRec38[1] = fRec38[0];
			fRec40[1] = fRec40[0];
			fRec39[1] = fRec39[0];
			fRec46[1] = fRec46[0];
			fRec45[1] = fRec45[0];
			fRec44[1] = fRec44[0];
			fRec43[1] = fRec43[0];
			fRec42[1] = fRec42[0];
			fRec41[1] = fRec41[0];
			fRec47[1] = fRec47[0];
			fRec49[1] = fRec49[0];
			fRec48[1] = fRec48[0];
			fRec55[1] = fRec55[0];
			fRec54[1] = fRec54[0];
			fRec53[1] = fRec53[0];
			fRec52[1] = fRec52[0];
			fRec51[1] = fRec51[0];
			fRec50[1] = fRec50[0];
			fVec2[1] = fVec2[0];
			fRec13[1] = fRec13[0];
			fRec56[1] = fRec56[0];
			fRec57[1] = fRec57[0];
			fRec9[1] = fRec9[0];
			fRec61[1] = fRec61[0];
			fRec60[1] = fRec60[0];
			fRec58[1] = fRec58[0];
			fRec65[1] = fRec65[0];
			fRec64[1] = fRec64[0];
			fRec62[1] = fRec62[0];
			fRec69[1] = fRec69[0];
			fRec68[1] = fRec68[0];
			fRec66[1] = fRec66[0];
			fRec73[1] = fRec73[0];
			fRec72[1] = fRec72[0];
			fRec70[1] = fRec70[0];
			fRec77[1] = fRec77[0];
			fRec76[1] = fRec76[0];
			fRec74[1] = fRec74[0];
			fRec81[1] = fRec81[0];
			fRec80[1] = fRec80[0];
			fRec78[1] = fRec78[0];
			fRec85[1] = fRec85[0];
			fRec84[1] = fRec84[0];
			fRec82[1] = fRec82[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1];
			fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1];
			fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1];
			fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1];
			fRec8[1] = fRec8[0];
		}
	}

};

#endif
