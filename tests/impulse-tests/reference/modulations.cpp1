//----------------------------------------------------------
// author: "ER"
// name: "modulations"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec12SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec12SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec12SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec12SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec12SI[1] = iVec12SIState;
				for (int i=0; i<count; i++) {
					iVec12SI[0] = (iVec12SI[1] + 1);
					output[i] = sinf((9.58738e-05f * float((iVec12SI[0] + -1))));
					// post processing
					iVec12SI[1] = iVec12SI[0];
				}
				iVec12SIState = iVec12SI[1];
				output += 128;
			}
		}
	};


	float 	fConst0KI; // step: 17
	int 	iConst1KI; // step: 21
	float 	fConst2KI; // step: 26
	float 	fConst3KI; // step: 28
	float 	fConst4KI; // step: 30
	// Recursion delay fVec6SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SIState; // Single Delay
	float 	fConst5KI; // step: 48
	FAUSTFLOAT 	fslider0;
	// Recursion delay fVec9SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec9SEState; // Single Delay
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	static float 	ftbl0SI[65536];
	float 	fConst6KI; // step: 89
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	float 	fConst7KI; // step: 105
	// Recursion delay fVec17SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SEState; // Single Delay
	float 	fConst8KI; // step: 117
	// Recursion delay fVec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec16SEState; // Single Delay
	float 	fConst9KI; // step: 126
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec21SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec21SEState; // Single Delay
	// Recursion delay fVec20SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec20SEState; // Single Delay
	static float 	ftbl1SI[65537];
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec24SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec24SEState; // Single Delay
	// Recursion delay fVec27SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec27SEState; // Single Delay
	// Recursion delay fVec26SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec26SEState; // Single Delay
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec31SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SEState; // Single Delay
	// Recursion delay fVec34SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec34SEState; // Single Delay
	// Recursion delay fVec33SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec33SEState; // Single Delay
	FAUSTFLOAT 	fslider5;
	// Recursion delay fVec39SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec39SEState; // Single Delay
	// Recursion delay fVec42SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec42SEState; // Single Delay
	// Recursion delay fVec41SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec41SEState; // Single Delay
	// Recursion delay fVec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SEState; // Single Delay
	FAUSTFLOAT 	fslider6;
	// Recursion delay fVec48SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec48SEState; // Single Delay
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVec50SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec50SEState; // Single Delay
	int 	IOTA0;
	float 	fVec52SE[4096]; // Ring Delay
	float 	fConst10KI; // step: 371
	FAUSTFLOAT 	fslider8;
	float 	fConst11KI; // step: 379
	float 	fConst12KI; // step: 380
	float 	fConst13KI; // step: 381
	float 	fConst14KI; // step: 412
	float 	fConst15KI; // step: 414
	float 	fConst16KI; // step: 416
	// Recursion delay fVec57SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec57SEState; // Single Delay
	float 	fConst17KI; // step: 430
	// Recursion delay fVec55SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec55SEState; // Single Delay
	float 	fVec61SE[32768]; // Ring Delay
	float 	fConst18KI; // step: 449
	int 	iConst19KI; // step: 454
	// Recursion delay fRec23SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst20KI; // step: 464
	float 	fConst21KI; // step: 465
	float 	fConst22KI; // step: 466
	// Recursion delay fVec66SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec66SEState; // Single Delay
	float 	fConst23KI; // step: 504
	// Recursion delay fVec64SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec64SEState; // Single Delay
	float 	fVec70SE[16384]; // Ring Delay
	float 	fConst24KI; // step: 522
	int 	iConst25KI; // step: 527
	// Recursion delay fRec26SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst26KI; // step: 541
	float 	fConst27KI; // step: 542
	float 	fConst28KI; // step: 543
	float 	fConst29KI; // step: 572
	// Recursion delay fVec76SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec76SEState; // Single Delay
	// Recursion delay fVec74SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec74SEState; // Single Delay
	float 	fVec80SE[16384]; // Ring Delay
	float 	fConst30KI; // step: 601
	int 	iConst31KI; // step: 606
	// Recursion delay fRec29SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst32KI; // step: 618
	float 	fConst33KI; // step: 619
	float 	fConst34KI; // step: 620
	float 	fConst35KI; // step: 649
	// Recursion delay fVec86SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec86SEState; // Single Delay
	// Recursion delay fVec84SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec84SEState; // Single Delay
	float 	fVec90SE[16384]; // Ring Delay
	float 	fConst36KI; // step: 678
	int 	iConst37KI; // step: 683
	// Recursion delay fRec32SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst38KI; // step: 702
	float 	fConst39KI; // step: 703
	float 	fConst40KI; // step: 704
	// Recursion delay fVec99SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec99SEState; // Single Delay
	float 	fConst41KI; // step: 742
	// Recursion delay fVec97SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec97SEState; // Single Delay
	float 	fVec103SE[32768]; // Ring Delay
	float 	fConst42KI; // step: 760
	int 	iConst43KI; // step: 765
	// Recursion delay fRec35SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst44KI; // step: 776
	float 	fConst45KI; // step: 777
	float 	fConst46KI; // step: 778
	// Recursion delay fVec108SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec108SEState; // Single Delay
	float 	fConst47KI; // step: 816
	// Recursion delay fVec106SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec106SEState; // Single Delay
	float 	fVec112SE[32768]; // Ring Delay
	float 	fConst48KI; // step: 834
	int 	iConst49KI; // step: 839
	// Recursion delay fRec38SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst50KI; // step: 854
	float 	fConst51KI; // step: 855
	float 	fConst52KI; // step: 856
	float 	fConst53KI; // step: 885
	// Recursion delay fVec119SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec119SEState; // Single Delay
	// Recursion delay fVec117SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec117SEState; // Single Delay
	float 	fVec123SE[16384]; // Ring Delay
	float 	fConst54KI; // step: 914
	int 	iConst55KI; // step: 919
	// Recursion delay fRec41SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst56KI; // step: 934
	float 	fConst57KI; // step: 935
	float 	fConst58KI; // step: 936
	float 	fConst59KI; // step: 965
	// Recursion delay fVec130SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec130SEState; // Single Delay
	// Recursion delay fVec128SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec128SEState; // Single Delay
	float 	fVec134SE[16384]; // Ring Delay
	float 	fConst60KI; // step: 994
	int 	iConst61KI; // step: 999
	// Recursion delay fRec44SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	// Recursion delay fVec98SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec98SEState; // Single Delay
	float 	fVec100SEState[2]; // Copy Delay
	// Recursion delay fVec144SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec144SEState; // Single Delay
	float 	fVec145SEState; // Single Delay
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec147SEState; // Single Delay
	// Recursion delay fVec142SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec142SEState; // Single Delay
	float 	fVec149SEState; // Single Delay
	// Recursion delay fVec141SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec141SEState; // Single Delay
	float 	fVec151SEState; // Single Delay
	// Recursion delay fVec140SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec140SEState; // Single Delay
	float 	fVec153SEState; // Single Delay
	// Recursion delay fVec139SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec139SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	// Recursion delay fVec161SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec161SEState; // Single Delay
	float 	fVec162SEState; // Single Delay
	// Recursion delay fVec160SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec160SEState; // Single Delay
	float 	fVec164SEState; // Single Delay
	// Recursion delay fVec159SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec159SEState; // Single Delay
	float 	fVec166SEState; // Single Delay
	// Recursion delay fVec158SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec158SEState; // Single Delay
	float 	fVec168SEState; // Single Delay
	// Recursion delay fVec157SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec157SEState; // Single Delay
	float 	fVec170SEState; // Single Delay
	// Recursion delay fVec156SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec156SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	float 	fVec173SEState; // Single Delay
	float 	fVec37SEState; // Single Delay
	// Recursion delay fVec181SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec181SEState; // Single Delay
	float 	fVec182SEState; // Single Delay
	// Recursion delay fVec180SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec180SEState; // Single Delay
	float 	fVec184SEState; // Single Delay
	// Recursion delay fVec179SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec179SEState; // Single Delay
	float 	fVec186SEState; // Single Delay
	// Recursion delay fVec178SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec178SEState; // Single Delay
	float 	fVec188SEState; // Single Delay
	// Recursion delay fVec177SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec177SEState; // Single Delay
	float 	fVec190SEState; // Single Delay
	// Recursion delay fVec176SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec176SEState; // Single Delay
	float 	fVec38SEState; // Single Delay
	// Recursion delay fVec198SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec198SEState; // Single Delay
	float 	fVec199SEState; // Single Delay
	// Recursion delay fVec197SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec197SEState; // Single Delay
	float 	fVec201SEState; // Single Delay
	// Recursion delay fVec196SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec196SEState; // Single Delay
	float 	fVec203SEState; // Single Delay
	// Recursion delay fVec195SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec195SEState; // Single Delay
	float 	fVec205SEState; // Single Delay
	// Recursion delay fVec194SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec194SEState; // Single Delay
	float 	fVec207SEState; // Single Delay
	// Recursion delay fVec193SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec193SEState; // Single Delay
	float 	fVec45SEState; // Single Delay
	float 	fVec46SEState; // Single Delay
	float 	fVec211SE[2048]; // Ring Delay
	int 	iConst62KI; // step: 1332
	// Recursion delay fVec96SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec96SEState; // Single Delay
	float 	fVec94SEState; // Single Delay
	// Recursion delay fVec56SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec56SEState; // Single Delay
	float 	fVec58SEState[2]; // Copy Delay
	float 	fVec215SE[4096]; // Ring Delay
	int 	iConst63KI; // step: 1350
	// Recursion delay fVec54SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec54SEState; // Single Delay
	float 	fVec0SEState; // Single Delay
	// Recursion delay fVec65SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec65SEState; // Single Delay
	float 	fVec67SEState[2]; // Copy Delay
	float 	fVec219SE[4096]; // Ring Delay
	int 	iConst64KI; // step: 1363
	// Recursion delay fVec72SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec72SEState; // Single Delay
	float 	fVec1SEState; // Single Delay
	// Recursion delay fVec107SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec107SEState; // Single Delay
	float 	fVec109SEState[2]; // Copy Delay
	float 	fVec223SE[4096]; // Ring Delay
	int 	iConst65KI; // step: 1374
	// Recursion delay fVec114SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec114SEState; // Single Delay
	float 	fVec95SEState; // Single Delay
	// Recursion delay fVec75SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec75SEState; // Single Delay
	float 	fVec77SEState[2]; // Copy Delay
	float 	fVec227SE[2048]; // Ring Delay
	int 	iConst66KI; // step: 1385
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec118SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec118SEState; // Single Delay
	float 	fVec120SEState[2]; // Copy Delay
	float 	fVec231SE[4096]; // Ring Delay
	int 	iConst67KI; // step: 1396
	// Recursion delay fVec125SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec125SEState; // Single Delay
	float 	fVec116SEState; // Single Delay
	// Recursion delay fVec129SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec129SEState; // Single Delay
	float 	fVec131SEState[2]; // Copy Delay
	float 	fVec235SE[4096]; // Ring Delay
	int 	iConst68KI; // step: 1407
	// Recursion delay fVec136SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec136SEState; // Single Delay
	float 	fVec127SEState; // Single Delay
	// Recursion delay fVec85SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec85SEState; // Single Delay
	float 	fVec87SEState[2]; // Copy Delay
	float 	fVec239SE[2048]; // Ring Delay
	int 	iConst69KI; // step: 1418
	// Recursion delay fVec92SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec92SEState; // Single Delay
	float 	fVec3SEState; // Single Delay
	FAUSTFLOAT 	fslider9;
	// Recursion delay fVec242SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec242SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "ER");
		m->declare("basics_lib_name", "Faust Basic Element Library");
		m->declare("basics_lib_version", "0.0");
		m->declare("compilation_options", "-single -scal -e modulations.dsp -o modulations_exp.dsp");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("delays_lib_name", "Faust Delay Library");
		m->declare("delays_lib_version", "0.1");
		m->declare("envelopes_lib_author", "GRAME");
		m->declare("envelopes_lib_copyright", "GRAME");
		m->declare("envelopes_lib_license", "LGPL with exception");
		m->declare("envelopes_lib_name", "Faust Envelope Library");
		m->declare("envelopes_lib_version", "0.0");
		m->declare("filename", "modulations.dsp");
		m->declare("filters_lib_name", "Faust Filters Library");
		m->declare("filters_lib_version", "0.0");
		m->declare("instruments_lib_author", "Romain Michon (rmichon@ccrma.stanford.edu)");
		m->declare("instruments_lib_copyright", "Romain Michon");
		m->declare("instruments_lib_licence", "STK-4.3");
		m->declare("instruments_lib_name", "Faust-STK Tools Library");
		m->declare("instruments_lib_version", "1.0");
		m->declare("library_path", "/usr/local/share/faust/stdfaust.lib");
		m->declare("maths_lib_author", "GRAME");
		m->declare("maths_lib_copyright", "GRAME");
		m->declare("maths_lib_license", "LGPL with exception");
		m->declare("maths_lib_name", "Faust Math Library");
		m->declare("maths_lib_version", "2.1");
		m->declare("name", "modulations");
		m->declare("oscillators_lib_name", "Faust Oscillator Library");
		m->declare("oscillators_lib_version", "0.0");
		m->declare("reverbs_lib_name", "Faust Reverb Library");
		m->declare("reverbs_lib_version", "0.0");
		m->declare("routes_lib_name", "Faust Signal Routing Library");
		m->declare("routes_lib_version", "0.0");
		m->declare("signals_lib_name", "Faust Signal Routing Library");
		m->declare("signals_lib_version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65536,ftbl0SI);
		sig0.init(sample_rate);
		sig0.fill(65537,ftbl1SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 17
		iConst1KI = int(std::min(8192.0f, std::max(0.0f, (0.02f * fConst0KI)))); // step: 21
		fConst2KI = (1.0f / tanf((6283.1855f / fConst0KI))); // step: 26
		fConst3KI = (1.0f / (fConst2KI + 1.0f /* Sum */)); // step: 28
		fConst4KI = (1.0f + -fConst2KI /* Sum */); // step: 30
		fConst5KI = (1.0f / fConst0KI); // step: 48
		fConst6KI = (2.0f * fConst0KI); // step: 89
		fConst7KI = (3.0f * fConst0KI); // step: 105
		fConst8KI = (0.33333334f / fConst0KI); // step: 117
		fConst9KI = (0.5f / fConst0KI); // step: 126
		IOTA0 = 0;
		fConst10KI = cosf((37699.113f / fConst0KI)); // step: 371
		fConst11KI = floorf(((0.256891f * fConst0KI) + 0.5f /* Sum */)); // step: 379
		fConst12KI = (fConst11KI / fConst0KI); // step: 380
		fConst13KI = (3.4538777f * fConst12KI); // step: 381
		fConst14KI = (1.0f / tanf((628.31854f / fConst0KI))); // step: 412
		fConst15KI = (1.0f / (fConst14KI + 1.0f /* Sum */)); // step: 414
		fConst16KI = (1.0f + -fConst14KI /* Sum */); // step: 416
		fConst17KI = (2.3025851f * fConst12KI); // step: 430
		fConst18KI = floorf(((0.027333f * fConst0KI) + 0.5f /* Sum */)); // step: 449
		iConst19KI = int(std::min(16384.0f, std::max(0.0f, (fConst11KI + -fConst18KI /* Sum */)))); // step: 454
		fConst20KI = floorf(((0.192303f * fConst0KI) + 0.5f /* Sum */)); // step: 464
		fConst21KI = (fConst20KI / fConst0KI); // step: 465
		fConst22KI = (3.4538777f * fConst21KI); // step: 466
		fConst23KI = (2.3025851f * fConst21KI); // step: 504
		fConst24KI = floorf(((0.029291f * fConst0KI) + 0.5f /* Sum */)); // step: 522
		iConst25KI = int(std::min(8192.0f, std::max(0.0f, (fConst20KI + -fConst24KI /* Sum */)))); // step: 527
		fConst26KI = floorf(((0.125f * fConst0KI) + 0.5f /* Sum */)); // step: 541
		fConst27KI = (fConst26KI / fConst0KI); // step: 542
		fConst28KI = (3.4538777f * fConst27KI); // step: 543
		fConst29KI = (2.3025851f * fConst27KI); // step: 572
		fConst30KI = floorf(((0.013458f * fConst0KI) + 0.5f /* Sum */)); // step: 601
		iConst31KI = int(std::min(8192.0f, std::max(0.0f, (fConst26KI + -fConst30KI /* Sum */)))); // step: 606
		fConst32KI = floorf(((0.153129f * fConst0KI) + 0.5f /* Sum */)); // step: 618
		fConst33KI = (fConst32KI / fConst0KI); // step: 619
		fConst34KI = (3.4538777f * fConst33KI); // step: 620
		fConst35KI = (2.3025851f * fConst33KI); // step: 649
		fConst36KI = floorf(((0.020346f * fConst0KI) + 0.5f /* Sum */)); // step: 678
		iConst37KI = int(std::min(8192.0f, std::max(0.0f, (fConst32KI + -fConst36KI /* Sum */)))); // step: 683
		fConst38KI = floorf(((0.219991f * fConst0KI) + 0.5f /* Sum */)); // step: 702
		fConst39KI = (fConst38KI / fConst0KI); // step: 703
		fConst40KI = (3.4538777f * fConst39KI); // step: 704
		fConst41KI = (2.3025851f * fConst39KI); // step: 742
		fConst42KI = floorf(((0.019123f * fConst0KI) + 0.5f /* Sum */)); // step: 760
		iConst43KI = int(std::min(16384.0f, std::max(0.0f, (fConst38KI + -fConst42KI /* Sum */)))); // step: 765
		fConst44KI = floorf(((0.210389f * fConst0KI) + 0.5f /* Sum */)); // step: 776
		fConst45KI = (fConst44KI / fConst0KI); // step: 777
		fConst46KI = (3.4538777f * fConst45KI); // step: 778
		fConst47KI = (2.3025851f * fConst45KI); // step: 816
		fConst48KI = floorf(((0.024421f * fConst0KI) + 0.5f /* Sum */)); // step: 834
		iConst49KI = int(std::min(16384.0f, std::max(0.0f, (fConst44KI + -fConst48KI /* Sum */)))); // step: 839
		fConst50KI = floorf(((0.127837f * fConst0KI) + 0.5f /* Sum */)); // step: 854
		fConst51KI = (fConst50KI / fConst0KI); // step: 855
		fConst52KI = (3.4538777f * fConst51KI); // step: 856
		fConst53KI = (2.3025851f * fConst51KI); // step: 885
		fConst54KI = floorf(((0.031604f * fConst0KI) + 0.5f /* Sum */)); // step: 914
		iConst55KI = int(std::min(8192.0f, std::max(0.0f, (fConst50KI + -fConst54KI /* Sum */)))); // step: 919
		fConst56KI = floorf(((0.174713f * fConst0KI) + 0.5f /* Sum */)); // step: 934
		fConst57KI = (fConst56KI / fConst0KI); // step: 935
		fConst58KI = (3.4538777f * fConst57KI); // step: 936
		fConst59KI = (2.3025851f * fConst57KI); // step: 965
		fConst60KI = floorf(((0.022904f * fConst0KI) + 0.5f /* Sum */)); // step: 994
		iConst61KI = int(std::min(8192.0f, std::max(0.0f, (fConst56KI + -fConst60KI /* Sum */)))); // step: 999
		iConst62KI = int(std::min(1024.0f, std::max(0.0f, (fConst42KI + -1.0f /* Sum */)))); // step: 1332
		iConst63KI = int(std::min(2048.0f, std::max(0.0f, (fConst18KI + -1.0f /* Sum */)))); // step: 1350
		iConst64KI = int(std::min(2048.0f, std::max(0.0f, (fConst24KI + -1.0f /* Sum */)))); // step: 1363
		iConst65KI = int(std::min(2048.0f, std::max(0.0f, (fConst48KI + -1.0f /* Sum */)))); // step: 1374
		iConst66KI = int(std::min(1024.0f, std::max(0.0f, (fConst30KI + -1.0f /* Sum */)))); // step: 1385
		iConst67KI = int(std::min(2048.0f, std::max(0.0f, (fConst54KI + -1.0f /* Sum */)))); // step: 1396
		iConst68KI = int(std::min(2048.0f, std::max(0.0f, (fConst60KI + -1.0f /* Sum */)))); // step: 1407
		iConst69KI = int(std::min(1024.0f, std::max(0.0f, (fConst36KI + -1.0f /* Sum */)))); // step: 1418
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1.2e+03f;
		fslider1 = 0.0f;
		fslider2 = 3.3e+02f;
		fslider3 = 0.0f;
		fslider4 = 0.0f;
		fslider5 = 0.0f;
		fslider6 = 0.5f;
		fslider7 = 0.25f;
		fslider8 = 0.5f;
		fslider9 = 1.0f;
	}
	virtual void instanceClear() {
		fVec6SIState = 0;
		fVec9SEState = 0;
		fVec8SEState = 0;
		fVec14SEState = 0;
		fVec17SEState = 0;
		fVec16SEState = 0;
		fVec21SEState = 0;
		fVec20SEState = 0;
		fVec24SEState = 0;
		fVec27SEState = 0;
		fVec26SEState = 0;
		fVec31SEState = 0;
		fVec34SEState = 0;
		fVec33SEState = 0;
		fVec39SEState = 0;
		fVec42SEState = 0;
		fVec41SEState = 0;
		fVec4SEState = 0;
		fVec48SEState = 0;
		fVec50SEState = 0;
		for (int i = 1; i < 4096; i++) { fVec52SE[i] = 0; }
		fVec52SE[0] = -1;  // detect unintialized
		fVec57SEState = 0;
		fVec55SEState = 0;
		for (int i = 1; i < 32768; i++) { fVec61SE[i] = 0; }
		fVec61SE[0] = -1;  // detect unintialized
		fVec66SEState = 0;
		fVec64SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec70SE[i] = 0; }
		fVec70SE[0] = -1;  // detect unintialized
		fVec76SEState = 0;
		fVec74SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec80SE[i] = 0; }
		fVec80SE[0] = -1;  // detect unintialized
		fVec86SEState = 0;
		fVec84SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec90SE[i] = 0; }
		fVec90SE[0] = -1;  // detect unintialized
		fVec99SEState = 0;
		fVec97SEState = 0;
		for (int i = 1; i < 32768; i++) { fVec103SE[i] = 0; }
		fVec103SE[0] = -1;  // detect unintialized
		fVec108SEState = 0;
		fVec106SEState = 0;
		for (int i = 1; i < 32768; i++) { fVec112SE[i] = 0; }
		fVec112SE[0] = -1;  // detect unintialized
		fVec119SEState = 0;
		fVec117SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec123SE[i] = 0; }
		fVec123SE[0] = -1;  // detect unintialized
		fVec130SEState = 0;
		fVec128SEState = 0;
		for (int i = 1; i < 16384; i++) { fVec134SE[i] = 0; }
		fVec134SE[0] = -1;  // detect unintialized
		fVec98SEState = 0;
		for (int j = 0; j < 2; j++) { fVec100SEState[j] = 0; }
		fVec144SEState = 0;
		fVec145SEState = 0;
		fVec143SEState = 0;
		fVec147SEState = 0;
		fVec142SEState = 0;
		fVec149SEState = 0;
		fVec141SEState = 0;
		fVec151SEState = 0;
		fVec140SEState = 0;
		fVec153SEState = 0;
		fVec139SEState = 0;
		fVec5SEState = 0;
		fVec161SEState = 0;
		fVec162SEState = 0;
		fVec160SEState = 0;
		fVec164SEState = 0;
		fVec159SEState = 0;
		fVec166SEState = 0;
		fVec158SEState = 0;
		fVec168SEState = 0;
		fVec157SEState = 0;
		fVec170SEState = 0;
		fVec156SEState = 0;
		fVec30SEState = 0;
		fVec173SEState = 0;
		fVec37SEState = 0;
		fVec181SEState = 0;
		fVec182SEState = 0;
		fVec180SEState = 0;
		fVec184SEState = 0;
		fVec179SEState = 0;
		fVec186SEState = 0;
		fVec178SEState = 0;
		fVec188SEState = 0;
		fVec177SEState = 0;
		fVec190SEState = 0;
		fVec176SEState = 0;
		fVec38SEState = 0;
		fVec198SEState = 0;
		fVec199SEState = 0;
		fVec197SEState = 0;
		fVec201SEState = 0;
		fVec196SEState = 0;
		fVec203SEState = 0;
		fVec195SEState = 0;
		fVec205SEState = 0;
		fVec194SEState = 0;
		fVec207SEState = 0;
		fVec193SEState = 0;
		fVec45SEState = 0;
		fVec46SEState = 0;
		for (int i = 1; i < 2048; i++) { fVec211SE[i] = 0; }
		fVec211SE[0] = -1;  // detect unintialized
		fVec96SEState = 0;
		fVec94SEState = 0;
		fVec56SEState = 0;
		for (int j = 0; j < 2; j++) { fVec58SEState[j] = 0; }
		for (int i = 1; i < 4096; i++) { fVec215SE[i] = 0; }
		fVec215SE[0] = -1;  // detect unintialized
		fVec54SEState = 0;
		fVec0SEState = 0;
		fVec65SEState = 0;
		for (int j = 0; j < 2; j++) { fVec67SEState[j] = 0; }
		for (int i = 1; i < 4096; i++) { fVec219SE[i] = 0; }
		fVec219SE[0] = -1;  // detect unintialized
		fVec72SEState = 0;
		fVec1SEState = 0;
		fVec107SEState = 0;
		for (int j = 0; j < 2; j++) { fVec109SEState[j] = 0; }
		for (int i = 1; i < 4096; i++) { fVec223SE[i] = 0; }
		fVec223SE[0] = -1;  // detect unintialized
		fVec114SEState = 0;
		fVec95SEState = 0;
		fVec75SEState = 0;
		for (int j = 0; j < 2; j++) { fVec77SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec227SE[i] = 0; }
		fVec227SE[0] = -1;  // detect unintialized
		fVec82SEState = 0;
		fVec2SEState = 0;
		fVec118SEState = 0;
		for (int j = 0; j < 2; j++) { fVec120SEState[j] = 0; }
		for (int i = 1; i < 4096; i++) { fVec231SE[i] = 0; }
		fVec231SE[0] = -1;  // detect unintialized
		fVec125SEState = 0;
		fVec116SEState = 0;
		fVec129SEState = 0;
		for (int j = 0; j < 2; j++) { fVec131SEState[j] = 0; }
		for (int i = 1; i < 4096; i++) { fVec235SE[i] = 0; }
		fVec235SE[0] = -1;  // detect unintialized
		fVec136SEState = 0;
		fVec127SEState = 0;
		fVec85SEState = 0;
		for (int j = 0; j < 2; j++) { fVec87SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec239SE[i] = 0; }
		fVec239SE[0] = -1;  // detect unintialized
		fVec92SEState = 0;
		fVec3SEState = 0;
		fVec242SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Modulations");
		ui_interface->openHorizontalBox("Instrument");
		ui_interface->declare(&fslider2, "acc", "1 1 -10 0 15");
		ui_interface->declare(&fslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("Frequency", &fslider2, 3.3e+02f, 1e+02f, 1.2e+03f, 0.1f);
		ui_interface->declare(&fslider9, "acc", "1 1 -10 0 10");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->addHorizontalSlider("General Volume", &fslider9, 1.0f, 0.75f, 4.0f, 0.01f);
		ui_interface->declare(&fslider6, "acc", "1 0 -10 0 10");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->addHorizontalSlider("Oscillator Volume", &fslider6, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider0, "acc", "0 0 -10 0 10");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "unit", "Hz");
		ui_interface->addHorizontalSlider("Modulating Frequency", &fslider0, 1.2e+03f, 9e+02f, 1.7e+03f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Modulations");
		ui_interface->declare(&fslider3, "acc", "0 0 -30 0 10");
		ui_interface->declare(&fslider3, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 0 (ASR Envelope)", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->declare(&fslider4, "acc", "0 0 -30 0 5");
		ui_interface->declare(&fslider4, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 1 (ASR Envelope)", &fslider4, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->declare(&fslider5, "acc", "2 1 -30 0 10");
		ui_interface->declare(&fslider5, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 2 (ASR Envelope)", &fslider5, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->declare(&fslider1, "acc", "1 0 -10 0 10");
		ui_interface->declare(&fslider1, "tooltip", "noteOn = 1, noteOff = 0");
		ui_interface->addHorizontalSlider("Play Modulation 3 (ASR Envelope)", &fslider1, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Reverb");
		ui_interface->declare(&fslider8, "acc", "1 1 -10 0 10");
		ui_interface->addHorizontalSlider("Reverberation Room Size(InstrReverb)", &fslider8, 0.5f, 0.05f, 2.0f, 0.01f);
		ui_interface->declare(&fslider7, "acc", "1 1 -10 0 10");
		ui_interface->addHorizontalSlider("Reverberation Volume(InstrReverb)", &fslider7, 0.25f, 0.05f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fTemp1SE; // step: 3
		float 	fTemp2SE; // step: 4
		float 	fTemp3SE; // step: 5
		float 	fVec6SI[2];
		float 	fTemp4SI; // step: 43
		float 	fTemp5SE; // step: 47
		float 	fSlow0BE = (0.001f * float(fslider0)); // Zone 2, step: 55
		float 	fVec9SE[2];
		float 	fTemp6SE; // step: 62
		float 	fVec8SE[2];
		float 	fTemp7SE; // step: 87
		float 	fSlow1BE = float(fslider1); // Zone 2, step: 90
		int 	iSlow2BE = (fSlow1BE > 0.0f); // Zone 2, step: 91
		int 	iSlow3BE = (iSlow2BE > 0); // Zone 2, step: 92
		float 	fVec14SE[2];
		float 	fTemp8SE; // step: 99
		float 	fSlow4BE = float(iSlow2BE); // Zone 2, step: 103
		int 	iSlow5BE = ((fSlow1BE == 0.0f) > 0); // Zone 2, step: 107
		float 	fVec17SE[2];
		float 	fTemp9SE; // step: 114
		float 	fSlow6BE = (fConst8KI * fSlow1BE); // Zone 2, step: 118
		float 	fVec16SE[2];
		float 	fTemp10SE; // step: 124
		float 	fTemp11SE; // step: 131
		float 	fTemp12SE; // step: 133
		float 	fTemp13SE; // step: 135
		float 	fTemp14SE; // step: 139
		float 	fSlow7BE = (0.001f * float(fslider2)); // Zone 2, step: 143
		float 	fVec21SE[2];
		float 	fTemp15SE; // step: 150
		float 	fVec20SE[2];
		float 	fTemp16SE; // step: 157
		int 	iTemp17SE; // step: 158
		float 	fTemp18SE; // step: 162
		float 	fTemp19SE; // step: 174
		float 	fTemp20SE; // step: 175
		float 	fSlow8BE = float(fslider3); // Zone 2, step: 176
		int 	iSlow9BE = (fSlow8BE > 0.0f); // Zone 2, step: 177
		int 	iSlow10BE = (iSlow9BE > 0); // Zone 2, step: 178
		float 	fVec24SE[2];
		float 	fTemp21SE; // step: 185
		float 	fSlow11BE = float(iSlow9BE); // Zone 2, step: 189
		int 	iSlow12BE = ((fSlow8BE == 0.0f) > 0); // Zone 2, step: 191
		float 	fVec27SE[2];
		float 	fTemp22SE; // step: 198
		float 	fSlow13BE = (fConst8KI * fSlow8BE); // Zone 2, step: 200
		float 	fVec26SE[2];
		float 	fTemp23SE; // step: 206
		float 	fTemp24SE; // step: 211
		float 	fTemp25SE; // step: 213
		float 	fTemp26SE; // step: 214
		float 	fTemp27SE; // step: 216
		float 	fTemp28SE; // step: 220
		float 	fTemp29SI; // step: 222
		float 	fTemp30SE; // step: 223
		float 	fTemp31SE; // step: 224
		float 	fSlow14BE = float(fslider4); // Zone 2, step: 226
		int 	iSlow15BE = (fSlow14BE > 0.0f); // Zone 2, step: 227
		int 	iSlow16BE = (iSlow15BE > 0); // Zone 2, step: 228
		float 	fVec31SE[2];
		float 	fTemp32SE; // step: 235
		float 	fSlow17BE = float(iSlow15BE); // Zone 2, step: 239
		int 	iSlow18BE = ((fSlow14BE == 0.0f) > 0); // Zone 2, step: 241
		float 	fVec34SE[2];
		float 	fTemp33SE; // step: 248
		float 	fSlow19BE = (fConst8KI * fSlow14BE); // Zone 2, step: 250
		float 	fVec33SE[2];
		float 	fTemp34SE; // step: 256
		float 	fTemp35SE; // step: 261
		float 	fTemp36SE; // step: 266
		float 	fTemp37SE; // step: 267
		float 	fTemp38SE; // step: 269
		float 	fTemp39SE; // step: 275
		float 	fSlow20BE = float(fslider5); // Zone 2, step: 277
		int 	iSlow21BE = (fSlow20BE > 0.0f); // Zone 2, step: 278
		int 	iSlow22BE = (iSlow21BE > 0); // Zone 2, step: 279
		float 	fVec39SE[2];
		float 	fTemp40SE; // step: 286
		float 	fSlow23BE = float(iSlow21BE); // Zone 2, step: 290
		int 	iSlow24BE = ((fSlow20BE == 0.0f) > 0); // Zone 2, step: 292
		float 	fVec42SE[2];
		float 	fTemp41SE; // step: 299
		float 	fSlow25BE = (fConst8KI * fSlow20BE); // Zone 2, step: 301
		float 	fVec41SE[2];
		float 	fTemp42SE; // step: 307
		float 	fTemp43SE; // step: 312
		float 	fTemp44SE; // step: 315
		float 	fTemp45SE; // step: 316
		float 	fTemp46SE; // step: 322
		float 	fTemp47SE; // step: 324
		float 	fTemp48SE; // step: 326
		float 	fTemp49SE; // step: 327
		float 	fVec4SE[2];
		float 	fSlow26BE = (0.001f * powf(float(fslider6),2.0f)); // Zone 2, step: 339
		float 	fVec48SE[2];
		float 	fTemp50SE; // step: 346
		float 	fSlow27BE = (0.001f * float(fslider7)); // Zone 2, step: 350
		float 	fVec50SE[2];
		float 	fTemp51SE; // step: 358
		float 	fTemp52SE; // step: 361
		float 	fTemp53SE; // step: 362
		float 	fTemp54SE; // step: 365
		float 	fSlow28BE = std::max(0.05f, std::min(2.0f, float(fslider8))); // Zone 2, step: 374
		float 	fSlow29BE = expf(-(fConst13KI / fSlow28BE)); // Zone 2, step: 384
		float 	fSlow30BE = powf(fSlow29BE,2.0f); // Zone 2, step: 385
		float 	fSlow31BE = (1.0f + -(fConst10KI * fSlow30BE) /* Sum */); // Zone 2, step: 388
		float 	fSlow32BE = (1.0f + -fSlow30BE /* Sum */); // Zone 2, step: 390
		float 	fSlow33BE = (fSlow31BE / fSlow32BE); // Zone 2, step: 391
		float 	fSlow34BE = sqrtf(std::max(0.0f, ((powf(fSlow31BE,2.0f) / powf(fSlow32BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 398
		float 	fSlow35BE = (fSlow33BE + -fSlow34BE /* Sum */); // Zone 2, step: 400
		float 	fSlow36BE = (fSlow29BE * (fSlow34BE + 1.0f + -fSlow33BE /* Sum */)); // Zone 2, step: 406
		float 	fTemp55SE; // step: 408
		float 	fVec57SE[2];
		float 	fSlow37BE = ((expf(-(fConst17KI / fSlow28BE)) / fSlow29BE) + -1.0f /* Sum */); // Zone 2, step: 435
		float 	fVec55SE[2];
		float 	fTemp56SE; // step: 455
		float 	fSlow38BE = expf(-(fConst22KI / fSlow28BE)); // Zone 2, step: 469
		float 	fSlow39BE = powf(fSlow38BE,2.0f); // Zone 2, step: 470
		float 	fSlow40BE = (1.0f + -(fConst10KI * fSlow39BE) /* Sum */); // Zone 2, step: 473
		float 	fSlow41BE = (1.0f + -fSlow39BE /* Sum */); // Zone 2, step: 475
		float 	fSlow42BE = (fSlow40BE / fSlow41BE); // Zone 2, step: 476
		float 	fSlow43BE = sqrtf(std::max(0.0f, ((powf(fSlow40BE,2.0f) / powf(fSlow41BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 482
		float 	fSlow44BE = (fSlow42BE + -fSlow43BE /* Sum */); // Zone 2, step: 484
		float 	fSlow45BE = (fSlow38BE * (fSlow43BE + 1.0f + -fSlow42BE /* Sum */)); // Zone 2, step: 490
		float 	fTemp57SE; // step: 492
		float 	fVec66SE[2];
		float 	fSlow46BE = ((expf(-(fConst23KI / fSlow28BE)) / fSlow38BE) + -1.0f /* Sum */); // Zone 2, step: 509
		float 	fVec64SE[2];
		float 	fTemp58SE; // step: 532
		float 	fTemp59SE; // step: 537
		float 	fSlow47BE = (fConst28KI / fSlow28BE); // Zone 2, step: 544
		float 	fSlow48BE = powf(expf(-fSlow47BE),2.0f); // Zone 2, step: 547
		float 	fSlow49BE = (1.0f + -(fConst10KI * fSlow48BE) /* Sum */); // Zone 2, step: 550
		float 	fSlow50BE = (1.0f + -fSlow48BE /* Sum */); // Zone 2, step: 552
		float 	fSlow51BE = (fSlow49BE / fSlow50BE); // Zone 2, step: 553
		float 	fSlow52BE = sqrtf(std::max(0.0f, ((powf(fSlow49BE,2.0f) / powf(fSlow50BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 559
		float 	fSlow53BE = (fSlow51BE + -fSlow52BE /* Sum */); // Zone 2, step: 561
		float 	fSlow54BE = expf(-fSlow47BE); // Zone 2, step: 566
		float 	fSlow55BE = (fSlow54BE * (fSlow52BE + 1.0f + -fSlow51BE /* Sum */)); // Zone 2, step: 569
		float 	fTemp60SE; // step: 571
		float 	fSlow56BE = ((expf(-(fConst29KI / fSlow28BE)) / fSlow54BE) + -1.0f /* Sum */); // Zone 2, step: 577
		float 	fVec76SE[2];
		float 	fVec74SE[2];
		float 	fTemp61SE; // step: 611
		float 	fSlow57BE = (fConst34KI / fSlow28BE); // Zone 2, step: 621
		float 	fSlow58BE = powf(expf(-fSlow57BE),2.0f); // Zone 2, step: 624
		float 	fSlow59BE = (1.0f + -(fConst10KI * fSlow58BE) /* Sum */); // Zone 2, step: 627
		float 	fSlow60BE = (1.0f + -fSlow58BE /* Sum */); // Zone 2, step: 629
		float 	fSlow61BE = (fSlow59BE / fSlow60BE); // Zone 2, step: 630
		float 	fSlow62BE = sqrtf(std::max(0.0f, ((powf(fSlow59BE,2.0f) / powf(fSlow60BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 636
		float 	fSlow63BE = (fSlow61BE + -fSlow62BE /* Sum */); // Zone 2, step: 638
		float 	fSlow64BE = expf(-fSlow57BE); // Zone 2, step: 643
		float 	fSlow65BE = (fSlow64BE * (fSlow62BE + 1.0f + -fSlow61BE /* Sum */)); // Zone 2, step: 646
		float 	fTemp62SE; // step: 648
		float 	fSlow66BE = ((expf(-(fConst35KI / fSlow28BE)) / fSlow64BE) + -1.0f /* Sum */); // Zone 2, step: 654
		float 	fVec86SE[2];
		float 	fVec84SE[2];
		float 	fTemp63SE; // step: 688
		float 	fTemp64SE; // step: 692
		float 	fTemp65SE; // step: 694
		float 	fTemp66SE; // step: 697
		float 	fSlow67BE = expf(-(fConst40KI / fSlow28BE)); // Zone 2, step: 707
		float 	fSlow68BE = powf(fSlow67BE,2.0f); // Zone 2, step: 708
		float 	fSlow69BE = (1.0f + -(fConst10KI * fSlow68BE) /* Sum */); // Zone 2, step: 711
		float 	fSlow70BE = (1.0f + -fSlow68BE /* Sum */); // Zone 2, step: 713
		float 	fSlow71BE = (fSlow69BE / fSlow70BE); // Zone 2, step: 714
		float 	fSlow72BE = sqrtf(std::max(0.0f, ((powf(fSlow69BE,2.0f) / powf(fSlow70BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 720
		float 	fSlow73BE = (fSlow71BE + -fSlow72BE /* Sum */); // Zone 2, step: 722
		float 	fSlow74BE = (fSlow67BE * (fSlow72BE + 1.0f + -fSlow71BE /* Sum */)); // Zone 2, step: 728
		float 	fTemp67SE; // step: 730
		float 	fVec99SE[2];
		float 	fSlow75BE = ((expf(-(fConst41KI / fSlow28BE)) / fSlow67BE) + -1.0f /* Sum */); // Zone 2, step: 747
		float 	fVec97SE[2];
		float 	fTemp68SE; // step: 766
		float 	fSlow76BE = expf(-(fConst46KI / fSlow28BE)); // Zone 2, step: 781
		float 	fSlow77BE = powf(fSlow76BE,2.0f); // Zone 2, step: 782
		float 	fSlow78BE = (1.0f + -(fConst10KI * fSlow77BE) /* Sum */); // Zone 2, step: 785
		float 	fSlow79BE = (1.0f + -fSlow77BE /* Sum */); // Zone 2, step: 787
		float 	fSlow80BE = (fSlow78BE / fSlow79BE); // Zone 2, step: 788
		float 	fSlow81BE = sqrtf(std::max(0.0f, ((powf(fSlow78BE,2.0f) / powf(fSlow79BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 794
		float 	fSlow82BE = (fSlow80BE + -fSlow81BE /* Sum */); // Zone 2, step: 796
		float 	fSlow83BE = (fSlow76BE * (fSlow81BE + 1.0f + -fSlow80BE /* Sum */)); // Zone 2, step: 802
		float 	fTemp69SE; // step: 804
		float 	fVec108SE[2];
		float 	fSlow84BE = ((expf(-(fConst47KI / fSlow28BE)) / fSlow76BE) + -1.0f /* Sum */); // Zone 2, step: 821
		float 	fVec106SE[2];
		float 	fTemp70SE; // step: 844
		float 	fTemp71SE; // step: 849
		float 	fSlow85BE = (fConst52KI / fSlow28BE); // Zone 2, step: 857
		float 	fSlow86BE = powf(expf(-fSlow85BE),2.0f); // Zone 2, step: 860
		float 	fSlow87BE = (1.0f + -(fConst10KI * fSlow86BE) /* Sum */); // Zone 2, step: 863
		float 	fSlow88BE = (1.0f + -fSlow86BE /* Sum */); // Zone 2, step: 865
		float 	fSlow89BE = (fSlow87BE / fSlow88BE); // Zone 2, step: 866
		float 	fSlow90BE = sqrtf(std::max(0.0f, ((powf(fSlow87BE,2.0f) / powf(fSlow88BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 872
		float 	fSlow91BE = (fSlow89BE + -fSlow90BE /* Sum */); // Zone 2, step: 874
		float 	fSlow92BE = expf(-fSlow85BE); // Zone 2, step: 879
		float 	fSlow93BE = (fSlow92BE * (fSlow90BE + 1.0f + -fSlow89BE /* Sum */)); // Zone 2, step: 882
		float 	fTemp72SE; // step: 884
		float 	fSlow94BE = ((expf(-(fConst53KI / fSlow28BE)) / fSlow92BE) + -1.0f /* Sum */); // Zone 2, step: 890
		float 	fVec119SE[2];
		float 	fVec117SE[2];
		float 	fTemp73SE; // step: 924
		float 	fTemp74SE; // step: 929
		float 	fSlow95BE = (fConst58KI / fSlow28BE); // Zone 2, step: 937
		float 	fSlow96BE = powf(expf(-fSlow95BE),2.0f); // Zone 2, step: 940
		float 	fSlow97BE = (1.0f + -(fConst10KI * fSlow96BE) /* Sum */); // Zone 2, step: 943
		float 	fSlow98BE = (1.0f + -fSlow96BE /* Sum */); // Zone 2, step: 945
		float 	fSlow99BE = (fSlow97BE / fSlow98BE); // Zone 2, step: 946
		float 	fSlow100BE = sqrtf(std::max(0.0f, ((powf(fSlow97BE,2.0f) / powf(fSlow98BE,2.0f)) + -1.0f /* Sum */))); // Zone 2, step: 952
		float 	fSlow101BE = (fSlow99BE + -fSlow100BE /* Sum */); // Zone 2, step: 954
		float 	fSlow102BE = expf(-fSlow95BE); // Zone 2, step: 959
		float 	fSlow103BE = (fSlow102BE * (fSlow100BE + 1.0f + -fSlow99BE /* Sum */)); // Zone 2, step: 962
		float 	fTemp75SE; // step: 964
		float 	fSlow104BE = ((expf(-(fConst59KI / fSlow28BE)) / fSlow102BE) + -1.0f /* Sum */); // Zone 2, step: 970
		float 	fVec130SE[2];
		float 	fVec128SE[2];
		float 	fTemp76SE; // step: 1004
		float 	fVec98SE[2];
		float 	fVec100SE[3];
		float 	fTemp77SE; // step: 1014
		float 	fTemp78SE; // step: 1015
		float 	fTemp79SE; // step: 1021
		float 	fTemp80SE; // step: 1027
		float 	fTemp81SE; // step: 1033
		float 	fTemp82SE; // step: 1039
		float 	fTemp83SE; // step: 1045
		float 	fVec144SE[2];
		float 	fVec145SE[2];
		float 	fTemp84SE; // step: 1054
		float 	fVec143SE[2];
		float 	fVec147SE[2];
		float 	fVec142SE[2];
		float 	fVec149SE[2];
		float 	fVec141SE[2];
		float 	fVec151SE[2];
		float 	fVec140SE[2];
		float 	fVec153SE[2];
		float 	fVec139SE[2];
		float 	fVec5SE[2];
		float 	fTemp85SE; // step: 1087
		float 	fTemp86SE; // step: 1088
		float 	fTemp87SE; // step: 1094
		float 	fTemp88SE; // step: 1100
		float 	fTemp89SE; // step: 1106
		float 	fTemp90SE; // step: 1112
		float 	fTemp91SE; // step: 1118
		float 	fVec161SE[2];
		float 	fVec162SE[2];
		float 	fTemp92SE; // step: 1127
		float 	fVec160SE[2];
		float 	fVec164SE[2];
		float 	fVec159SE[2];
		float 	fVec166SE[2];
		float 	fVec158SE[2];
		float 	fVec168SE[2];
		float 	fVec157SE[2];
		float 	fVec170SE[2];
		float 	fVec156SE[2];
		float 	fVec30SE[2];
		float 	fTemp93SE; // step: 1161
		float 	fTemp94SE; // step: 1162
		float 	fTemp95SE; // step: 1163
		float 	fVec173SE[2];
		float 	fVec37SE[2];
		float 	fTemp96SE; // step: 1171
		float 	fTemp97SE; // step: 1172
		float 	fTemp98SE; // step: 1178
		float 	fTemp99SE; // step: 1184
		float 	fTemp100SE; // step: 1190
		float 	fTemp101SE; // step: 1196
		float 	fTemp102SE; // step: 1202
		float 	fVec181SE[2];
		float 	fVec182SE[2];
		float 	fTemp103SE; // step: 1211
		float 	fVec180SE[2];
		float 	fVec184SE[2];
		float 	fVec179SE[2];
		float 	fVec186SE[2];
		float 	fVec178SE[2];
		float 	fVec188SE[2];
		float 	fVec177SE[2];
		float 	fVec190SE[2];
		float 	fVec176SE[2];
		float 	fVec38SE[2];
		float 	fTemp104SE; // step: 1247
		float 	fTemp105SE; // step: 1252
		float 	fTemp106SE; // step: 1253
		float 	fTemp107SE; // step: 1259
		float 	fTemp108SE; // step: 1265
		float 	fTemp109SE; // step: 1271
		float 	fTemp110SE; // step: 1277
		float 	fTemp111SE; // step: 1283
		float 	fVec198SE[2];
		float 	fVec199SE[2];
		float 	fTemp112SE; // step: 1292
		float 	fVec197SE[2];
		float 	fVec201SE[2];
		float 	fVec196SE[2];
		float 	fVec203SE[2];
		float 	fVec195SE[2];
		float 	fVec205SE[2];
		float 	fVec194SE[2];
		float 	fVec207SE[2];
		float 	fVec193SE[2];
		float 	fVec45SE[2];
		float 	fVec46SE[2];
		float 	fVec96SE[2];
		float 	fVec94SE[2];
		float 	fVec56SE[2];
		float 	fVec58SE[3];
		float 	fVec54SE[2];
		float 	fVec0SE[2];
		float 	fVec65SE[2];
		float 	fVec67SE[3];
		float 	fVec72SE[2];
		float 	fVec1SE[2];
		float 	fVec107SE[2];
		float 	fVec109SE[3];
		float 	fVec114SE[2];
		float 	fVec95SE[2];
		float 	fVec75SE[2];
		float 	fVec77SE[3];
		float 	fVec82SE[2];
		float 	fVec2SE[2];
		float 	fVec118SE[2];
		float 	fVec120SE[3];
		float 	fVec125SE[2];
		float 	fVec116SE[2];
		float 	fVec129SE[2];
		float 	fVec131SE[3];
		float 	fVec136SE[2];
		float 	fVec127SE[2];
		float 	fVec85SE[2];
		float 	fVec87SE[3];
		float 	fVec92SE[2];
		float 	fVec3SE[2];
		float 	fSlow105BE = (0.001f * float(fslider9)); // Zone 2, step: 1425
		float 	fVec242SE[2];
		float 	fTemp113SE; // step: 1433
		float 	fTemp114SE; // step: 1435
		float 	fTemp115SE; // step: 1436
		float 	fTemp116SE; // step: 1442
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec6SI[1] = fVec6SIState;
		fVec9SE[1] = fVec9SEState;
		fVec8SE[1] = fVec8SEState;
		fVec14SE[1] = fVec14SEState;
		fVec17SE[1] = fVec17SEState;
		fVec16SE[1] = fVec16SEState;
		fVec21SE[1] = fVec21SEState;
		fVec20SE[1] = fVec20SEState;
		fVec24SE[1] = fVec24SEState;
		fVec27SE[1] = fVec27SEState;
		fVec26SE[1] = fVec26SEState;
		fVec31SE[1] = fVec31SEState;
		fVec34SE[1] = fVec34SEState;
		fVec33SE[1] = fVec33SEState;
		fVec39SE[1] = fVec39SEState;
		fVec42SE[1] = fVec42SEState;
		fVec41SE[1] = fVec41SEState;
		fVec4SE[1] = fVec4SEState;
		fVec48SE[1] = fVec48SEState;
		fVec50SE[1] = fVec50SEState;
		fVec57SE[1] = fVec57SEState;
		fVec55SE[1] = fVec55SEState;
		fVec66SE[1] = fVec66SEState;
		fVec64SE[1] = fVec64SEState;
		fVec76SE[1] = fVec76SEState;
		fVec74SE[1] = fVec74SEState;
		fVec86SE[1] = fVec86SEState;
		fVec84SE[1] = fVec84SEState;
		fVec99SE[1] = fVec99SEState;
		fVec97SE[1] = fVec97SEState;
		fVec108SE[1] = fVec108SEState;
		fVec106SE[1] = fVec106SEState;
		fVec119SE[1] = fVec119SEState;
		fVec117SE[1] = fVec117SEState;
		fVec130SE[1] = fVec130SEState;
		fVec128SE[1] = fVec128SEState;
		fVec98SE[1] = fVec98SEState;
		fVec100SE[1] = fVec100SEState[0];
		fVec100SE[2] = fVec100SEState[1];
		fVec144SE[1] = fVec144SEState;
		fVec145SE[1] = fVec145SEState;
		fVec143SE[1] = fVec143SEState;
		fVec147SE[1] = fVec147SEState;
		fVec142SE[1] = fVec142SEState;
		fVec149SE[1] = fVec149SEState;
		fVec141SE[1] = fVec141SEState;
		fVec151SE[1] = fVec151SEState;
		fVec140SE[1] = fVec140SEState;
		fVec153SE[1] = fVec153SEState;
		fVec139SE[1] = fVec139SEState;
		fVec5SE[1] = fVec5SEState;
		fVec161SE[1] = fVec161SEState;
		fVec162SE[1] = fVec162SEState;
		fVec160SE[1] = fVec160SEState;
		fVec164SE[1] = fVec164SEState;
		fVec159SE[1] = fVec159SEState;
		fVec166SE[1] = fVec166SEState;
		fVec158SE[1] = fVec158SEState;
		fVec168SE[1] = fVec168SEState;
		fVec157SE[1] = fVec157SEState;
		fVec170SE[1] = fVec170SEState;
		fVec156SE[1] = fVec156SEState;
		fVec30SE[1] = fVec30SEState;
		fVec173SE[1] = fVec173SEState;
		fVec37SE[1] = fVec37SEState;
		fVec181SE[1] = fVec181SEState;
		fVec182SE[1] = fVec182SEState;
		fVec180SE[1] = fVec180SEState;
		fVec184SE[1] = fVec184SEState;
		fVec179SE[1] = fVec179SEState;
		fVec186SE[1] = fVec186SEState;
		fVec178SE[1] = fVec178SEState;
		fVec188SE[1] = fVec188SEState;
		fVec177SE[1] = fVec177SEState;
		fVec190SE[1] = fVec190SEState;
		fVec176SE[1] = fVec176SEState;
		fVec38SE[1] = fVec38SEState;
		fVec198SE[1] = fVec198SEState;
		fVec199SE[1] = fVec199SEState;
		fVec197SE[1] = fVec197SEState;
		fVec201SE[1] = fVec201SEState;
		fVec196SE[1] = fVec196SEState;
		fVec203SE[1] = fVec203SEState;
		fVec195SE[1] = fVec195SEState;
		fVec205SE[1] = fVec205SEState;
		fVec194SE[1] = fVec194SEState;
		fVec207SE[1] = fVec207SEState;
		fVec193SE[1] = fVec193SEState;
		fVec45SE[1] = fVec45SEState;
		fVec46SE[1] = fVec46SEState;
		fVec96SE[1] = fVec96SEState;
		fVec94SE[1] = fVec94SEState;
		fVec56SE[1] = fVec56SEState;
		fVec58SE[1] = fVec58SEState[0];
		fVec58SE[2] = fVec58SEState[1];
		fVec54SE[1] = fVec54SEState;
		fVec0SE[1] = fVec0SEState;
		fVec65SE[1] = fVec65SEState;
		fVec67SE[1] = fVec67SEState[0];
		fVec67SE[2] = fVec67SEState[1];
		fVec72SE[1] = fVec72SEState;
		fVec1SE[1] = fVec1SEState;
		fVec107SE[1] = fVec107SEState;
		fVec109SE[1] = fVec109SEState[0];
		fVec109SE[2] = fVec109SEState[1];
		fVec114SE[1] = fVec114SEState;
		fVec95SE[1] = fVec95SEState;
		fVec75SE[1] = fVec75SEState;
		fVec77SE[1] = fVec77SEState[0];
		fVec77SE[2] = fVec77SEState[1];
		fVec82SE[1] = fVec82SEState;
		fVec2SE[1] = fVec2SEState;
		fVec118SE[1] = fVec118SEState;
		fVec120SE[1] = fVec120SEState[0];
		fVec120SE[2] = fVec120SEState[1];
		fVec125SE[1] = fVec125SEState;
		fVec116SE[1] = fVec116SEState;
		fVec129SE[1] = fVec129SEState;
		fVec131SE[1] = fVec131SEState[0];
		fVec131SE[2] = fVec131SEState[1];
		fVec136SE[1] = fVec136SEState;
		fVec127SE[1] = fVec127SEState;
		fVec85SE[1] = fVec85SEState;
		fVec87SE[1] = fVec87SEState[0];
		fVec87SE[2] = fVec87SEState[1];
		fVec92SE[1] = fVec92SEState;
		fVec3SE[1] = fVec3SEState;
		fVec242SE[1] = fVec242SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[1]; // step: 2
			fTemp1SE = fVec1SE[1]; // step: 3
			fTemp2SE = fVec2SE[1]; // step: 4
			fTemp3SE = fVec3SE[1]; // step: 5
			fVec6SI[0] = ((0.999f * fVec6SI[1]) + 0.0008f /* Sum */);
			fTemp4SI = fVec6SI[0]; // step: 43
			fTemp5SE = fVec8SE[1]; // step: 47
			fVec9SE[0] = (fSlow0BE + (0.999f * fVec9SE[1]) /* Sum */);
			fTemp6SE = (fConst5KI * fVec9SE[0]); // step: 62
			fVec8SE[0] = (fTemp5SE + fTemp6SE + -floorf((fTemp5SE + fTemp6SE /* Sum */)) /* Sum */);
			fTemp7SE = (fTemp4SI * ftbl0SI[std::max(0, std::min(int((65536.0f * fVec8SE[0])), 65535))]); // step: 87
			fVec14SE[0] = ((iSlow3BE) ? 0.0f : std::min(fConst6KI, (fVec14SE[1] + 1.0f /* Sum */)));
			fTemp8SE = fVec14SE[0]; // step: 99
			fVec17SE[0] = ((iSlow5BE) ? 0.0f : std::min(fConst7KI, (fVec17SE[1] + 1.0f /* Sum */)));
			fTemp9SE = fVec17SE[0]; // step: 114
			fVec16SE[0] = ((iSlow2BE) ? (fSlow4BE * (((fTemp9SE < fConst7KI)) ? (fSlow6BE * fTemp9SE) : fSlow1BE)) : fVec16SE[1]);
			fTemp10SE = fVec16SE[0]; // step: 124
			fTemp11SE = (((fTemp8SE < fConst6KI)) ? (fTemp10SE * (1.0f + -(fConst9KI * fTemp8SE) /* Sum */)) : 0.0f); // step: 131
			fTemp12SE = (3.1415927f * (fTemp7SE * fTemp11SE)); // step: 133
			fTemp13SE = (fVec5SE[1] * cosf(fTemp12SE)); // step: 135
			fTemp14SE = fVec20SE[1]; // step: 139
			fVec21SE[0] = (fSlow7BE + (0.999f * fVec21SE[1]) /* Sum */);
			fTemp15SE = (fConst5KI * fVec21SE[0]); // step: 150
			fVec20SE[0] = (fTemp14SE + fTemp15SE + -floorf((fTemp14SE + fTemp15SE /* Sum */)) /* Sum */);
			fTemp16SE = (65536.0f * fVec20SE[0]); // step: 157
			iTemp17SE = int(fTemp16SE); // step: 158
			fTemp18SE = ftbl1SI[std::max(0, std::min(iTemp17SE, 65536))]; // step: 162
			fTemp19SE = (fTemp18SE + ((fTemp16SE + -floorf(fTemp16SE) /* Sum */) * (ftbl1SI[std::max(0, std::min((iTemp17SE + 1 /* Sum */), 65536))] + -fTemp18SE /* Sum */)) /* Sum */); // step: 174
			fTemp20SE = (fTemp4SI * fTemp19SE); // step: 175
			fVec24SE[0] = ((iSlow10BE) ? 0.0f : std::min(fConst6KI, (fVec24SE[1] + 1.0f /* Sum */)));
			fTemp21SE = fVec24SE[0]; // step: 185
			fVec27SE[0] = ((iSlow12BE) ? 0.0f : std::min(fConst7KI, (fVec27SE[1] + 1.0f /* Sum */)));
			fTemp22SE = fVec27SE[0]; // step: 198
			fVec26SE[0] = ((iSlow9BE) ? (fSlow11BE * (((fTemp22SE < fConst7KI)) ? (fSlow13BE * fTemp22SE) : fSlow8BE)) : fVec26SE[1]);
			fTemp23SE = fVec26SE[0]; // step: 206
			fTemp24SE = (((fTemp21SE < fConst6KI)) ? (fTemp23SE * (1.0f + -(fConst9KI * fTemp21SE) /* Sum */)) : 0.0f); // step: 211
			fTemp25SE = (3.1415927f * (fTemp20SE * fTemp24SE)); // step: 213
			fTemp26SE = sinf(fTemp25SE); // step: 214
			fTemp27SE = fVec30SE[1]; // step: 216
			fTemp28SE = (fTemp4SI * ((fTemp19SE * fTemp26SE) + (fTemp27SE * cosf(fTemp25SE)) /* Sum */)); // step: 220
			fTemp29SI = (1.0f + -fTemp4SI /* Sum */); // step: 222
			fTemp30SE = (fTemp19SE * fTemp29SI); // step: 223
			fTemp31SE = (fTemp28SE + fTemp30SE /* Sum */); // step: 224
			fVec31SE[0] = ((iSlow16BE) ? 0.0f : std::min(fConst6KI, (fVec31SE[1] + 1.0f /* Sum */)));
			fTemp32SE = fVec31SE[0]; // step: 235
			fVec34SE[0] = ((iSlow18BE) ? 0.0f : std::min(fConst7KI, (fVec34SE[1] + 1.0f /* Sum */)));
			fTemp33SE = fVec34SE[0]; // step: 248
			fVec33SE[0] = ((iSlow15BE) ? (fSlow17BE * (((fTemp33SE < fConst7KI)) ? (fSlow19BE * fTemp33SE) : fSlow14BE)) : fVec33SE[1]);
			fTemp34SE = fVec33SE[0]; // step: 256
			fTemp35SE = (((fTemp32SE < fConst6KI)) ? (fTemp34SE * (1.0f + -(fConst9KI * fTemp32SE) /* Sum */)) : 0.0f); // step: 261
			fTemp36SE = (1.5707964f * ((fTemp4SI * fTemp35SE) * (fTemp28SE + fTemp30SE + fVec37SE[1] /* Sum */))); // step: 266
			fTemp37SE = sinf(fTemp36SE); // step: 267
			fTemp38SE = fVec38SE[1]; // step: 269
			fTemp39SE = ((fTemp4SI * ((fTemp31SE * fTemp37SE) + (fTemp38SE * cosf(fTemp36SE)) /* Sum */)) + (fTemp29SI * fTemp31SE) /* Sum */); // step: 275
			fVec39SE[0] = ((iSlow22BE) ? 0.0f : std::min(fConst6KI, (fVec39SE[1] + 1.0f /* Sum */)));
			fTemp40SE = fVec39SE[0]; // step: 286
			fVec42SE[0] = ((iSlow24BE) ? 0.0f : std::min(fConst7KI, (fVec42SE[1] + 1.0f /* Sum */)));
			fTemp41SE = fVec42SE[0]; // step: 299
			fVec41SE[0] = ((iSlow21BE) ? (fSlow23BE * (((fTemp41SE < fConst7KI)) ? (fSlow25BE * fTemp41SE) : fSlow20BE)) : fVec41SE[1]);
			fTemp42SE = fVec41SE[0]; // step: 307
			fTemp43SE = (((fTemp40SE < fConst6KI)) ? (fTemp42SE * (1.0f + -(fConst9KI * fTemp40SE) /* Sum */)) : 0.0f); // step: 312
			fTemp44SE = (3.1415927f * ((fTemp4SI * fTemp43SE) * powf(fTemp39SE,2.0f))); // step: 315
			fTemp45SE = sinf(fTemp44SE); // step: 316
			fTemp46SE = (fTemp4SI * ((fTemp39SE * fTemp45SE) + (fVec45SE[1] * cosf(fTemp44SE)) /* Sum */)); // step: 322
			fTemp47SE = (fTemp29SI * fTemp39SE); // step: 324
			fTemp48SE = sinf(fTemp12SE); // step: 326
			fTemp49SE = (fTemp19SE * fTemp48SE); // step: 327
			fVec4SE[0] = -(fConst3KI * ((fConst4KI * fVec4SE[1]) + -fTemp13SE + -fTemp46SE + -fTemp47SE + -fTemp49SE + -fVec46SE[1] /* Sum */));
			fVec48SE[0] = (fSlow26BE + (0.999f * fVec48SE[1]) /* Sum */);
			fTemp50SE = (fVec4SE[0] * fVec48SE[0]); // step: 346
			fVec50SE[0] = (fSlow27BE + (0.999f * fVec50SE[1]) /* Sum */);
			fTemp51SE = std::max(0.05f, std::min(1.0f, fVec50SE[0])); // step: 358
			fVec52SE[IOTA0&4095] = (fTemp50SE * fTemp51SE);
			fTemp52SE = fVec52SE[(IOTA0-iConst1KI)&4095]; // step: 361
			fTemp53SE = (0.18f * fTemp52SE); // step: 362
			fTemp54SE = fVec54SE[1]; // step: 365
			fTemp55SE = fVec56SE[1]; // step: 408
			fVec57SE[0] = -(fConst15KI * ((fConst16KI * fVec57SE[1]) + -fTemp55SE + -fVec58SE[2] /* Sum */));
			fVec55SE[0] = ((fSlow35BE * fVec55SE[1]) + (fSlow36BE * (fTemp55SE + (fSlow37BE * fVec57SE[0]) /* Sum */)) /* Sum */);
			fVec61SE[IOTA0&32767] = ((0.35355338f * fVec55SE[0]) + 1e-20f /* Sum */);
			fTemp56SE = fVec61SE[(IOTA0-iConst19KI)&32767]; // step: 455
			float 	fRec23SE = (0.6f * (fTemp53SE + (-0.6f * fTemp54SE) + -fTemp56SE /* Sum */)); // Zero delay
			fTemp57SE = fVec65SE[1]; // step: 492
			fVec66SE[0] = -(fConst15KI * ((fConst16KI * fVec66SE[1]) + -fTemp57SE + -fVec67SE[2] /* Sum */));
			fVec64SE[0] = ((fSlow44BE * fVec64SE[1]) + (fSlow45BE * (fTemp57SE + (fSlow46BE * fVec66SE[0]) /* Sum */)) /* Sum */);
			fVec70SE[IOTA0&16383] = ((0.35355338f * fVec64SE[0]) + 1e-20f /* Sum */);
			fTemp58SE = (fVec70SE[(IOTA0-iConst25KI)&16383] + fTemp53SE + (0.6f * fVec72SE[1]) /* Sum */); // step: 532
			float 	fRec26SE = (-0.6f * fTemp58SE); // Zero delay
			fTemp59SE = (-0.18f * fTemp52SE); // step: 537
			fTemp60SE = fVec75SE[1]; // step: 571
			fVec76SE[0] = -(fConst15KI * ((fConst16KI * fVec76SE[1]) + -fTemp60SE + -fVec77SE[2] /* Sum */));
			fVec74SE[0] = ((fSlow53BE * fVec74SE[1]) + (fSlow55BE * (fTemp60SE + (fSlow56BE * fVec76SE[0]) /* Sum */)) /* Sum */);
			fVec80SE[IOTA0&16383] = ((0.35355338f * fVec74SE[0]) + 1e-20f /* Sum */);
			fTemp61SE = (fVec80SE[(IOTA0-iConst31KI)&16383] + fTemp59SE + (-0.6f * fVec82SE[1]) /* Sum */); // step: 611
			float 	fRec29SE = (0.6f * fTemp61SE); // Zero delay
			fTemp62SE = fVec85SE[1]; // step: 648
			fVec86SE[0] = -(fConst15KI * ((fConst16KI * fVec86SE[1]) + -fTemp62SE + -fVec87SE[2] /* Sum */));
			fVec84SE[0] = ((fSlow63BE * fVec84SE[1]) + (fSlow65BE * (fTemp62SE + (fSlow66BE * fVec86SE[0]) /* Sum */)) /* Sum */);
			fVec90SE[IOTA0&16383] = ((0.35355338f * fVec84SE[0]) + 1e-20f /* Sum */);
			fTemp63SE = (fVec90SE[(IOTA0-iConst37KI)&16383] + fTemp53SE + (-0.6f * fVec92SE[1]) /* Sum */); // step: 688
			float 	fRec32SE = (0.6f * fTemp63SE); // Zero delay
			fTemp64SE = fVec94SE[1]; // step: 692
			fTemp65SE = fVec95SE[1]; // step: 694
			fTemp66SE = fVec96SE[1]; // step: 697
			fTemp67SE = fVec98SE[1]; // step: 730
			fVec99SE[0] = -(fConst15KI * ((fConst16KI * fVec99SE[1]) + -fTemp67SE + -fVec100SE[2] /* Sum */));
			fVec97SE[0] = ((fSlow73BE * fVec97SE[1]) + (fSlow74BE * (fTemp67SE + (fSlow75BE * fVec99SE[0]) /* Sum */)) /* Sum */);
			fVec103SE[IOTA0&32767] = ((0.35355338f * fVec97SE[0]) + 1e-20f /* Sum */);
			fTemp68SE = fVec103SE[(IOTA0-iConst43KI)&32767]; // step: 766
			float 	fRec35SE = (0.6f * (fTemp53SE + (-0.6f * fTemp66SE) + -fTemp68SE /* Sum */)); // Zero delay
			fTemp69SE = fVec107SE[1]; // step: 804
			fVec108SE[0] = -(fConst15KI * ((fConst16KI * fVec108SE[1]) + -fTemp69SE + -fVec109SE[2] /* Sum */));
			fVec106SE[0] = ((fSlow82BE * fVec106SE[1]) + (fSlow83BE * (fTemp69SE + (fSlow84BE * fVec108SE[0]) /* Sum */)) /* Sum */);
			fVec112SE[IOTA0&32767] = ((0.35355338f * fVec106SE[0]) + 1e-20f /* Sum */);
			fTemp70SE = (fVec112SE[(IOTA0-iConst49KI)&32767] + fTemp53SE + (0.6f * fVec114SE[1]) /* Sum */); // step: 844
			float 	fRec38SE = (-0.6f * fTemp70SE); // Zero delay
			fTemp71SE = fVec116SE[1]; // step: 849
			fTemp72SE = fVec118SE[1]; // step: 884
			fVec119SE[0] = -(fConst15KI * ((fConst16KI * fVec119SE[1]) + -fTemp72SE + -fVec120SE[2] /* Sum */));
			fVec117SE[0] = ((fSlow91BE * fVec117SE[1]) + (fSlow93BE * (fTemp72SE + (fSlow94BE * fVec119SE[0]) /* Sum */)) /* Sum */);
			fVec123SE[IOTA0&16383] = ((0.35355338f * fVec117SE[0]) + 1e-20f /* Sum */);
			fTemp73SE = (fVec123SE[(IOTA0-iConst55KI)&16383] + fTemp59SE + (-0.6f * fVec125SE[1]) /* Sum */); // step: 924
			float 	fRec41SE = (0.6f * fTemp73SE); // Zero delay
			fTemp74SE = fVec127SE[1]; // step: 929
			fTemp75SE = fVec129SE[1]; // step: 964
			fVec130SE[0] = -(fConst15KI * ((fConst16KI * fVec130SE[1]) + -fTemp75SE + -fVec131SE[2] /* Sum */));
			fVec128SE[0] = ((fSlow101BE * fVec128SE[1]) + (fSlow103BE * (fTemp75SE + (fSlow104BE * fVec130SE[0]) /* Sum */)) /* Sum */);
			fVec134SE[IOTA0&16383] = ((0.35355338f * fVec128SE[0]) + 1e-20f /* Sum */);
			fTemp76SE = (fTemp53SE + fVec134SE[(IOTA0-iConst61KI)&16383] + (-0.6f * fVec136SE[1]) /* Sum */); // step: 1004
			float 	fRec44SE = (0.6f * fTemp76SE); // Zero delay
			fVec98SE[0] = (fTemp0SE + fTemp1SE + fTemp2SE + fTemp3SE + fRec23SE + fRec26SE + fRec32SE + fRec29SE + -fTemp64SE + -fTemp65SE + -fTemp71SE + -fTemp74SE + -fRec35SE + -fRec38SE + -fRec44SE + -fRec41SE /* Sum */);
			fVec100SE[0] = fVec98SE[0];
			fTemp77SE = (3.1415927f * (fTemp7SE * ((0) ? fTemp10SE : fTemp11SE))); // step: 1014
			fTemp78SE = cosf(fTemp77SE); // step: 1015
			fTemp79SE = ((fTemp19SE * fTemp78SE) + -(fVec139SE[1] * fTemp48SE) /* Sum */); // step: 1021
			fTemp80SE = ((fTemp78SE * fTemp79SE) + -(fTemp48SE * fVec140SE[1]) /* Sum */); // step: 1027
			fTemp81SE = ((fTemp78SE * fTemp80SE) + -(fTemp48SE * fVec141SE[1]) /* Sum */); // step: 1033
			fTemp82SE = ((fTemp78SE * fTemp81SE) + -(fTemp48SE * fVec142SE[1]) /* Sum */); // step: 1039
			fTemp83SE = ((fTemp78SE * fTemp82SE) + -(fTemp48SE * fVec143SE[1]) /* Sum */); // step: 1045
			fVec144SE[0] = ((fTemp78SE * fTemp83SE) + -(fTemp48SE * fVec144SE[1]) /* Sum */);
			fVec145SE[0] = fVec144SE[0];
			fTemp84SE = sinf(fTemp77SE); // step: 1054
			fVec143SE[0] = ((fTemp84SE * fTemp83SE) + (fTemp78SE * fVec145SE[1]) /* Sum */);
			fVec147SE[0] = fVec143SE[0];
			fVec142SE[0] = ((fTemp84SE * fTemp82SE) + (fTemp78SE * fVec147SE[1]) /* Sum */);
			fVec149SE[0] = fVec142SE[0];
			fVec141SE[0] = ((fTemp84SE * fTemp81SE) + (fTemp78SE * fVec149SE[1]) /* Sum */);
			fVec151SE[0] = fVec141SE[0];
			fVec140SE[0] = ((fTemp84SE * fTemp80SE) + (fTemp78SE * fVec151SE[1]) /* Sum */);
			fVec153SE[0] = fVec140SE[0];
			fVec139SE[0] = ((fTemp84SE * fTemp79SE) + (fTemp78SE * fVec153SE[1]) /* Sum */);
			fVec5SE[0] = fVec139SE[0];
			fTemp85SE = (3.1415927f * (fTemp20SE * ((0) ? fTemp23SE : fTemp24SE))); // step: 1087
			fTemp86SE = cosf(fTemp85SE); // step: 1088
			fTemp87SE = ((fTemp19SE * fTemp86SE) + -(fVec156SE[1] * fTemp26SE) /* Sum */); // step: 1094
			fTemp88SE = ((fTemp86SE * fTemp87SE) + -(fTemp26SE * fVec157SE[1]) /* Sum */); // step: 1100
			fTemp89SE = ((fTemp86SE * fTemp88SE) + -(fTemp26SE * fVec158SE[1]) /* Sum */); // step: 1106
			fTemp90SE = ((fTemp86SE * fTemp89SE) + -(fTemp26SE * fVec159SE[1]) /* Sum */); // step: 1112
			fTemp91SE = ((fTemp86SE * fTemp90SE) + -(fTemp26SE * fVec160SE[1]) /* Sum */); // step: 1118
			fVec161SE[0] = ((fTemp86SE * fTemp91SE) + -(fTemp26SE * fVec161SE[1]) /* Sum */);
			fVec162SE[0] = fVec161SE[0];
			fTemp92SE = sinf(fTemp85SE); // step: 1127
			fVec160SE[0] = ((fTemp92SE * fTemp91SE) + (fTemp86SE * fVec162SE[1]) /* Sum */);
			fVec164SE[0] = fVec160SE[0];
			fVec159SE[0] = ((fTemp92SE * fTemp90SE) + (fTemp86SE * fVec164SE[1]) /* Sum */);
			fVec166SE[0] = fVec159SE[0];
			fVec158SE[0] = ((fTemp92SE * fTemp89SE) + (fTemp86SE * fVec166SE[1]) /* Sum */);
			fVec168SE[0] = fVec158SE[0];
			fVec157SE[0] = ((fTemp92SE * fTemp88SE) + (fTemp86SE * fVec168SE[1]) /* Sum */);
			fVec170SE[0] = fVec157SE[0];
			fVec156SE[0] = ((fTemp92SE * fTemp87SE) + (fTemp86SE * fVec170SE[1]) /* Sum */);
			fVec30SE[0] = fVec156SE[0];
			fTemp93SE = (fTemp4SI * ((fTemp19SE * fTemp92SE) + (fTemp86SE * fTemp27SE) /* Sum */)); // step: 1161
			fTemp94SE = (fTemp29SI * fTemp19SE); // step: 1162
			fTemp95SE = (fTemp93SE + fTemp94SE /* Sum */); // step: 1163
			fVec173SE[0] = fTemp95SE;
			fVec37SE[0] = fTemp31SE;
			fTemp96SE = (1.5707964f * ((fTemp4SI * ((0) ? fTemp34SE : fTemp35SE)) * (fTemp93SE + fTemp94SE + fVec173SE[1] /* Sum */))); // step: 1171
			fTemp97SE = cosf(fTemp96SE); // step: 1172
			fTemp98SE = ((fTemp95SE * fTemp97SE) + -(fVec176SE[1] * fTemp37SE) /* Sum */); // step: 1178
			fTemp99SE = ((fTemp97SE * fTemp98SE) + -(fTemp37SE * fVec177SE[1]) /* Sum */); // step: 1184
			fTemp100SE = ((fTemp97SE * fTemp99SE) + -(fTemp37SE * fVec178SE[1]) /* Sum */); // step: 1190
			fTemp101SE = ((fTemp97SE * fTemp100SE) + -(fTemp37SE * fVec179SE[1]) /* Sum */); // step: 1196
			fTemp102SE = ((fTemp97SE * fTemp101SE) + -(fTemp37SE * fVec180SE[1]) /* Sum */); // step: 1202
			fVec181SE[0] = ((fTemp97SE * fTemp102SE) + -(fTemp37SE * fVec181SE[1]) /* Sum */);
			fVec182SE[0] = fVec181SE[0];
			fTemp103SE = sinf(fTemp96SE); // step: 1211
			fVec180SE[0] = ((fTemp103SE * fTemp102SE) + (fTemp97SE * fVec182SE[1]) /* Sum */);
			fVec184SE[0] = fVec180SE[0];
			fVec179SE[0] = ((fTemp103SE * fTemp101SE) + (fTemp97SE * fVec184SE[1]) /* Sum */);
			fVec186SE[0] = fVec179SE[0];
			fVec178SE[0] = ((fTemp103SE * fTemp100SE) + (fTemp97SE * fVec186SE[1]) /* Sum */);
			fVec188SE[0] = fVec178SE[0];
			fVec177SE[0] = ((fTemp103SE * fTemp99SE) + (fTemp97SE * fVec188SE[1]) /* Sum */);
			fVec190SE[0] = fVec177SE[0];
			fVec176SE[0] = ((fTemp103SE * fTemp98SE) + (fTemp97SE * fVec190SE[1]) /* Sum */);
			fVec38SE[0] = fVec176SE[0];
			fTemp104SE = ((fTemp4SI * ((fTemp95SE * fTemp103SE) + (fTemp97SE * fTemp38SE) /* Sum */)) + (fTemp29SI * fTemp95SE) /* Sum */); // step: 1247
			fTemp105SE = (3.1415927f * ((fTemp4SI * powf(fTemp104SE,2.0f)) * ((0) ? fTemp42SE : fTemp43SE))); // step: 1252
			fTemp106SE = cosf(fTemp105SE); // step: 1253
			fTemp107SE = ((fTemp104SE * fTemp106SE) + -(fVec193SE[1] * fTemp45SE) /* Sum */); // step: 1259
			fTemp108SE = ((fTemp106SE * fTemp107SE) + -(fTemp45SE * fVec194SE[1]) /* Sum */); // step: 1265
			fTemp109SE = ((fTemp106SE * fTemp108SE) + -(fTemp45SE * fVec195SE[1]) /* Sum */); // step: 1271
			fTemp110SE = ((fTemp106SE * fTemp109SE) + -(fTemp45SE * fVec196SE[1]) /* Sum */); // step: 1277
			fTemp111SE = ((fTemp106SE * fTemp110SE) + -(fTemp45SE * fVec197SE[1]) /* Sum */); // step: 1283
			fVec198SE[0] = ((fTemp106SE * fTemp111SE) + -(fTemp45SE * fVec198SE[1]) /* Sum */);
			fVec199SE[0] = fVec198SE[0];
			fTemp112SE = sinf(fTemp105SE); // step: 1292
			fVec197SE[0] = ((fTemp112SE * fTemp111SE) + (fTemp106SE * fVec199SE[1]) /* Sum */);
			fVec201SE[0] = fVec197SE[0];
			fVec196SE[0] = ((fTemp112SE * fTemp110SE) + (fTemp106SE * fVec201SE[1]) /* Sum */);
			fVec203SE[0] = fVec196SE[0];
			fVec195SE[0] = ((fTemp112SE * fTemp109SE) + (fTemp106SE * fVec203SE[1]) /* Sum */);
			fVec205SE[0] = fVec195SE[0];
			fVec194SE[0] = ((fTemp112SE * fTemp108SE) + (fTemp106SE * fVec205SE[1]) /* Sum */);
			fVec207SE[0] = fVec194SE[0];
			fVec193SE[0] = ((fTemp112SE * fTemp107SE) + (fTemp106SE * fVec207SE[1]) /* Sum */);
			fVec45SE[0] = fVec193SE[0];
			fVec46SE[0] = (fTemp13SE + fTemp46SE + fTemp47SE + fTemp49SE /* Sum */);
			fVec211SE[IOTA0&2047] = ((0.6f * fTemp66SE) + fTemp68SE + fTemp59SE /* Sum */);
			fVec96SE[0] = fVec211SE[(IOTA0-iConst62KI)&2047];
			fVec94SE[0] = fVec96SE[0];
			fVec56SE[0] = (fTemp64SE + fTemp0SE + fTemp74SE + fTemp3SE + fRec35SE + fRec23SE + fRec32SE + fRec44SE + -fTemp1SE + -fTemp65SE + -fTemp2SE + -fTemp71SE + -fRec26SE + -fRec38SE + -fRec41SE + -fRec29SE /* Sum */);
			fVec58SE[0] = fVec56SE[0];
			fVec215SE[IOTA0&4095] = ((0.6f * fTemp54SE) + fTemp56SE + fTemp59SE /* Sum */);
			fVec54SE[0] = fVec215SE[(IOTA0-iConst63KI)&4095];
			fVec0SE[0] = fVec54SE[0];
			fVec65SE[0] = (fTemp64SE + fTemp1SE + fTemp71SE + fTemp3SE + fRec35SE + fRec26SE + fRec32SE + fRec41SE + -fTemp0SE + -fTemp65SE + -fTemp2SE + -fTemp74SE + -fRec23SE + -fRec38SE + -fRec44SE + -fRec29SE /* Sum */);
			fVec67SE[0] = fVec65SE[0];
			fVec219SE[IOTA0&4095] = fTemp58SE;
			fVec72SE[0] = fVec219SE[(IOTA0-iConst64KI)&4095];
			fVec1SE[0] = fVec72SE[0];
			fVec107SE[0] = (fTemp2SE + fTemp71SE + fTemp74SE + fTemp3SE + fRec29SE + fRec41SE + fRec32SE + fRec44SE + -fTemp64SE + -fTemp0SE + -fTemp1SE + -fTemp65SE + -fRec35SE + -fRec23SE + -fRec38SE + -fRec26SE /* Sum */);
			fVec109SE[0] = fVec107SE[0];
			fVec223SE[IOTA0&4095] = fTemp70SE;
			fVec114SE[0] = fVec223SE[(IOTA0-iConst65KI)&4095];
			fVec95SE[0] = fVec114SE[0];
			fVec75SE[0] = (fTemp64SE + fTemp65SE + fTemp2SE + fTemp3SE + fRec35SE + fRec38SE + fRec32SE + fRec29SE + -fTemp0SE + -fTemp1SE + -fTemp71SE + -fTemp74SE + -fRec23SE + -fRec26SE + -fRec44SE + -fRec41SE /* Sum */);
			fVec77SE[0] = fVec75SE[0];
			fVec227SE[IOTA0&2047] = fTemp61SE;
			fVec82SE[0] = fVec227SE[(IOTA0-iConst66KI)&2047];
			fVec2SE[0] = fVec82SE[0];
			fVec118SE[0] = (fTemp1SE + fTemp65SE + fTemp74SE + fTemp3SE + fRec26SE + fRec38SE + fRec32SE + fRec44SE + -fTemp64SE + -fTemp0SE + -fTemp2SE + -fTemp71SE + -fRec35SE + -fRec23SE + -fRec41SE + -fRec29SE /* Sum */);
			fVec120SE[0] = fVec118SE[0];
			fVec231SE[IOTA0&4095] = fTemp73SE;
			fVec125SE[0] = fVec231SE[(IOTA0-iConst67KI)&4095];
			fVec116SE[0] = fVec125SE[0];
			fVec129SE[0] = (fTemp0SE + fTemp65SE + fTemp71SE + fTemp3SE + fRec23SE + fRec38SE + fRec32SE + fRec41SE + -fTemp64SE + -fTemp1SE + -fTemp2SE + -fTemp74SE + -fRec35SE + -fRec26SE + -fRec44SE + -fRec29SE /* Sum */);
			fVec131SE[0] = fVec129SE[0];
			fVec235SE[IOTA0&4095] = fTemp76SE;
			fVec136SE[0] = fVec235SE[(IOTA0-iConst68KI)&4095];
			fVec127SE[0] = fVec136SE[0];
			fVec85SE[0] = (fTemp64SE + fTemp0SE + fTemp1SE + fTemp65SE + fTemp2SE + fTemp71SE + fTemp74SE + fTemp3SE + fRec35SE + fRec23SE + fRec26SE + fRec38SE + fRec29SE + fRec41SE + fRec32SE + fRec44SE /* Sum */);
			fVec87SE[0] = fVec85SE[0];
			fVec239SE[IOTA0&2047] = fTemp63SE;
			fVec92SE[0] = fVec239SE[(IOTA0-iConst69KI)&2047];
			fVec3SE[0] = fVec92SE[0];
			fVec242SE[0] = (fSlow105BE + (0.999f * fVec242SE[1]) /* Sum */);
			fTemp113SE = std::max(0.75f, std::min(4.0f, fVec242SE[0])); // step: 1433
			fTemp114SE = fVec107SE[0]; // step: 1435
			fTemp115SE = fVec118SE[0]; // step: 1436
			fTemp116SE = (0.6f * (fTemp50SE * (1.0f + -fTemp51SE /* Sum */))); // step: 1442
			output0[i] = (FAUSTFLOAT)((fTemp113SE * ((0.37f * (fTemp114SE + fTemp115SE /* Sum */)) + fTemp116SE /* Sum */)));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fTemp113SE * (fTemp116SE + (0.37f * (fTemp114SE + -fTemp115SE /* Sum */)) /* Sum */)));  // Zone Exec Code
			// post processing
			fVec242SE[1] = fVec242SE[0];
			fVec3SE[1] = fVec3SE[0];
			fVec92SE[1] = fVec92SE[0];
			fVec87SE[2] = fVec87SE[1];
			fVec87SE[1] = fVec87SE[0];
			fVec85SE[1] = fVec85SE[0];
			fVec127SE[1] = fVec127SE[0];
			fVec136SE[1] = fVec136SE[0];
			fVec131SE[2] = fVec131SE[1];
			fVec131SE[1] = fVec131SE[0];
			fVec129SE[1] = fVec129SE[0];
			fVec116SE[1] = fVec116SE[0];
			fVec125SE[1] = fVec125SE[0];
			fVec120SE[2] = fVec120SE[1];
			fVec120SE[1] = fVec120SE[0];
			fVec118SE[1] = fVec118SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec77SE[2] = fVec77SE[1];
			fVec77SE[1] = fVec77SE[0];
			fVec75SE[1] = fVec75SE[0];
			fVec95SE[1] = fVec95SE[0];
			fVec114SE[1] = fVec114SE[0];
			fVec109SE[2] = fVec109SE[1];
			fVec109SE[1] = fVec109SE[0];
			fVec107SE[1] = fVec107SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec72SE[1] = fVec72SE[0];
			fVec67SE[2] = fVec67SE[1];
			fVec67SE[1] = fVec67SE[0];
			fVec65SE[1] = fVec65SE[0];
			fVec0SE[1] = fVec0SE[0];
			fVec54SE[1] = fVec54SE[0];
			fVec58SE[2] = fVec58SE[1];
			fVec58SE[1] = fVec58SE[0];
			fVec56SE[1] = fVec56SE[0];
			fVec94SE[1] = fVec94SE[0];
			fVec96SE[1] = fVec96SE[0];
			fVec46SE[1] = fVec46SE[0];
			fVec45SE[1] = fVec45SE[0];
			fVec193SE[1] = fVec193SE[0];
			fVec207SE[1] = fVec207SE[0];
			fVec194SE[1] = fVec194SE[0];
			fVec205SE[1] = fVec205SE[0];
			fVec195SE[1] = fVec195SE[0];
			fVec203SE[1] = fVec203SE[0];
			fVec196SE[1] = fVec196SE[0];
			fVec201SE[1] = fVec201SE[0];
			fVec197SE[1] = fVec197SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec198SE[1] = fVec198SE[0];
			fVec38SE[1] = fVec38SE[0];
			fVec176SE[1] = fVec176SE[0];
			fVec190SE[1] = fVec190SE[0];
			fVec177SE[1] = fVec177SE[0];
			fVec188SE[1] = fVec188SE[0];
			fVec178SE[1] = fVec178SE[0];
			fVec186SE[1] = fVec186SE[0];
			fVec179SE[1] = fVec179SE[0];
			fVec184SE[1] = fVec184SE[0];
			fVec180SE[1] = fVec180SE[0];
			fVec182SE[1] = fVec182SE[0];
			fVec181SE[1] = fVec181SE[0];
			fVec37SE[1] = fVec37SE[0];
			fVec173SE[1] = fVec173SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec156SE[1] = fVec156SE[0];
			fVec170SE[1] = fVec170SE[0];
			fVec157SE[1] = fVec157SE[0];
			fVec168SE[1] = fVec168SE[0];
			fVec158SE[1] = fVec158SE[0];
			fVec166SE[1] = fVec166SE[0];
			fVec159SE[1] = fVec159SE[0];
			fVec164SE[1] = fVec164SE[0];
			fVec160SE[1] = fVec160SE[0];
			fVec162SE[1] = fVec162SE[0];
			fVec161SE[1] = fVec161SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec139SE[1] = fVec139SE[0];
			fVec153SE[1] = fVec153SE[0];
			fVec140SE[1] = fVec140SE[0];
			fVec151SE[1] = fVec151SE[0];
			fVec141SE[1] = fVec141SE[0];
			fVec149SE[1] = fVec149SE[0];
			fVec142SE[1] = fVec142SE[0];
			fVec147SE[1] = fVec147SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec145SE[1] = fVec145SE[0];
			fVec144SE[1] = fVec144SE[0];
			fVec100SE[2] = fVec100SE[1];
			fVec100SE[1] = fVec100SE[0];
			fVec98SE[1] = fVec98SE[0];
			fVec128SE[1] = fVec128SE[0];
			fVec130SE[1] = fVec130SE[0];
			fVec117SE[1] = fVec117SE[0];
			fVec119SE[1] = fVec119SE[0];
			fVec106SE[1] = fVec106SE[0];
			fVec108SE[1] = fVec108SE[0];
			fVec97SE[1] = fVec97SE[0];
			fVec99SE[1] = fVec99SE[0];
			fVec84SE[1] = fVec84SE[0];
			fVec86SE[1] = fVec86SE[0];
			fVec74SE[1] = fVec74SE[0];
			fVec76SE[1] = fVec76SE[0];
			fVec64SE[1] = fVec64SE[0];
			fVec66SE[1] = fVec66SE[0];
			fVec55SE[1] = fVec55SE[0];
			fVec57SE[1] = fVec57SE[0];
			++IOTA0;
			fVec50SE[1] = fVec50SE[0];
			fVec48SE[1] = fVec48SE[0];
			fVec4SE[1] = fVec4SE[0];
			fVec41SE[1] = fVec41SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec27SE[1] = fVec27SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec6SI[1] = fVec6SI[0];
		}
		fVec6SIState = fVec6SI[1];
		fVec9SEState = fVec9SE[1];
		fVec8SEState = fVec8SE[1];
		fVec14SEState = fVec14SE[1];
		fVec17SEState = fVec17SE[1];
		fVec16SEState = fVec16SE[1];
		fVec21SEState = fVec21SE[1];
		fVec20SEState = fVec20SE[1];
		fVec24SEState = fVec24SE[1];
		fVec27SEState = fVec27SE[1];
		fVec26SEState = fVec26SE[1];
		fVec31SEState = fVec31SE[1];
		fVec34SEState = fVec34SE[1];
		fVec33SEState = fVec33SE[1];
		fVec39SEState = fVec39SE[1];
		fVec42SEState = fVec42SE[1];
		fVec41SEState = fVec41SE[1];
		fVec4SEState = fVec4SE[1];
		fVec48SEState = fVec48SE[1];
		fVec50SEState = fVec50SE[1];
		fVec57SEState = fVec57SE[1];
		fVec55SEState = fVec55SE[1];
		fVec66SEState = fVec66SE[1];
		fVec64SEState = fVec64SE[1];
		fVec76SEState = fVec76SE[1];
		fVec74SEState = fVec74SE[1];
		fVec86SEState = fVec86SE[1];
		fVec84SEState = fVec84SE[1];
		fVec99SEState = fVec99SE[1];
		fVec97SEState = fVec97SE[1];
		fVec108SEState = fVec108SE[1];
		fVec106SEState = fVec106SE[1];
		fVec119SEState = fVec119SE[1];
		fVec117SEState = fVec117SE[1];
		fVec130SEState = fVec130SE[1];
		fVec128SEState = fVec128SE[1];
		fVec98SEState = fVec98SE[1];
		fVec100SEState[0] = fVec100SE[1];
		fVec100SEState[1] = fVec100SE[2];
		fVec144SEState = fVec144SE[1];
		fVec145SEState = fVec145SE[1];
		fVec143SEState = fVec143SE[1];
		fVec147SEState = fVec147SE[1];
		fVec142SEState = fVec142SE[1];
		fVec149SEState = fVec149SE[1];
		fVec141SEState = fVec141SE[1];
		fVec151SEState = fVec151SE[1];
		fVec140SEState = fVec140SE[1];
		fVec153SEState = fVec153SE[1];
		fVec139SEState = fVec139SE[1];
		fVec5SEState = fVec5SE[1];
		fVec161SEState = fVec161SE[1];
		fVec162SEState = fVec162SE[1];
		fVec160SEState = fVec160SE[1];
		fVec164SEState = fVec164SE[1];
		fVec159SEState = fVec159SE[1];
		fVec166SEState = fVec166SE[1];
		fVec158SEState = fVec158SE[1];
		fVec168SEState = fVec168SE[1];
		fVec157SEState = fVec157SE[1];
		fVec170SEState = fVec170SE[1];
		fVec156SEState = fVec156SE[1];
		fVec30SEState = fVec30SE[1];
		fVec173SEState = fVec173SE[1];
		fVec37SEState = fVec37SE[1];
		fVec181SEState = fVec181SE[1];
		fVec182SEState = fVec182SE[1];
		fVec180SEState = fVec180SE[1];
		fVec184SEState = fVec184SE[1];
		fVec179SEState = fVec179SE[1];
		fVec186SEState = fVec186SE[1];
		fVec178SEState = fVec178SE[1];
		fVec188SEState = fVec188SE[1];
		fVec177SEState = fVec177SE[1];
		fVec190SEState = fVec190SE[1];
		fVec176SEState = fVec176SE[1];
		fVec38SEState = fVec38SE[1];
		fVec198SEState = fVec198SE[1];
		fVec199SEState = fVec199SE[1];
		fVec197SEState = fVec197SE[1];
		fVec201SEState = fVec201SE[1];
		fVec196SEState = fVec196SE[1];
		fVec203SEState = fVec203SE[1];
		fVec195SEState = fVec195SE[1];
		fVec205SEState = fVec205SE[1];
		fVec194SEState = fVec194SE[1];
		fVec207SEState = fVec207SE[1];
		fVec193SEState = fVec193SE[1];
		fVec45SEState = fVec45SE[1];
		fVec46SEState = fVec46SE[1];
		fVec96SEState = fVec96SE[1];
		fVec94SEState = fVec94SE[1];
		fVec56SEState = fVec56SE[1];
		fVec58SEState[0] = fVec58SE[1];
		fVec58SEState[1] = fVec58SE[2];
		fVec54SEState = fVec54SE[1];
		fVec0SEState = fVec0SE[1];
		fVec65SEState = fVec65SE[1];
		fVec67SEState[0] = fVec67SE[1];
		fVec67SEState[1] = fVec67SE[2];
		fVec72SEState = fVec72SE[1];
		fVec1SEState = fVec1SE[1];
		fVec107SEState = fVec107SE[1];
		fVec109SEState[0] = fVec109SE[1];
		fVec109SEState[1] = fVec109SE[2];
		fVec114SEState = fVec114SE[1];
		fVec95SEState = fVec95SE[1];
		fVec75SEState = fVec75SE[1];
		fVec77SEState[0] = fVec77SE[1];
		fVec77SEState[1] = fVec77SE[2];
		fVec82SEState = fVec82SE[1];
		fVec2SEState = fVec2SE[1];
		fVec118SEState = fVec118SE[1];
		fVec120SEState[0] = fVec120SE[1];
		fVec120SEState[1] = fVec120SE[2];
		fVec125SEState = fVec125SE[1];
		fVec116SEState = fVec116SE[1];
		fVec129SEState = fVec129SE[1];
		fVec131SEState[0] = fVec131SE[1];
		fVec131SEState[1] = fVec131SE[2];
		fVec136SEState = fVec136SE[1];
		fVec127SEState = fVec127SE[1];
		fVec85SEState = fVec85SE[1];
		fVec87SEState[0] = fVec87SE[1];
		fVec87SEState[1] = fVec87SE[2];
		fVec92SEState = fVec92SE[1];
		fVec3SEState = fVec3SE[1];
		fVec242SEState = fVec242SE[1];
	}
};


float 	mydsp::ftbl0SI[65536];
float 	mydsp::ftbl1SI[65537];
