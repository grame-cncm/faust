//----------------------------------------------------------
// name: "phaser_flanger"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec11SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	float 	fVec16SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec17SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec20SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec23SEState; // Single Delay
	float 	fVec25SEState; // Single Delay
	float 	fVec26SEState; // Single Delay
	float 	fVec28SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec31SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SEState; // Single Delay
	float 	fVec33SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec35SEState; // Single Delay
	float 	fVec37SEState; // Single Delay
	float 	fVec39SEState; // Single Delay
	float 	fVec40SEState; // Single Delay
	float 	fVec42SEState; // Single Delay
	float 	fVec44SEState; // Single Delay
	// Recursion delay iVec45SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec45SIState; // Single Delay
	// Recursion delay fVec48SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec48SIState; // Single Delay
	float 	fVec47SIState[3]; // Copy Delay
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fslider5;
	// Recursion delay fVec51SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec51SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 253
	float 	fConst3KI; // step: 266
	float 	fConst4KI; // step: 277
	FAUSTFLOAT 	fcheckbox4;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	float 	fConst5KI; // step: 359
	// Recursion delay fVec67SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec67SEState; // Single Delay
	// Recursion delay fVec68SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec68SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fcheckbox5;
	FAUSTFLOAT 	fslider9;
	int 	IOTA0;
	float 	fVec75SE[2048]; // Ring Delay
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	// Recursion delay fVec71SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec71SEState; // Single Delay
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	float 	fConst6KI; // step: 480
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	// Recursion delay fVec80SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec80SEState; // Single Delay
	float 	fVec84SEState[2]; // Copy Delay
	// Recursion delay fVec89SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec89SEState; // Single Delay
	float 	fVec87SEState[2]; // Copy Delay
	// Recursion delay fVec94SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec94SEState; // Single Delay
	float 	fVec92SEState[2]; // Copy Delay
	// Recursion delay fVec99SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec99SEState; // Single Delay
	float 	fVec97SEState[2]; // Copy Delay
	float 	fVec102SE[2048]; // Ring Delay
	// Recursion delay fVec101SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec101SEState; // Single Delay
	// Recursion delay fVec81SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec81SEState; // Single Delay
	// Recursion delay fVec107SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec107SEState; // Single Delay
	float 	fVec109SEState[2]; // Copy Delay
	// Recursion delay fVec114SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec114SEState; // Single Delay
	float 	fVec112SEState[2]; // Copy Delay
	// Recursion delay fVec119SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec119SEState; // Single Delay
	float 	fVec117SEState[2]; // Copy Delay
	// Recursion delay fVec124SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec124SEState; // Single Delay
	float 	fVec122SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fcheckbox6;
	FAUSTFLOAT 	fcheckbox7;
	// Recursion delay fVec79SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec79SEState; // Single Delay
	// Recursion delay fVec106SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec106SEState; // Single Delay
	float 	fConst7KI; // step: 756
	float 	fConst8KI; // step: 758
	float 	fConst9KI; // step: 762
	float 	fConst10KI; // step: 766
	float 	fConst11KI; // step: 769
	float 	fConst12KI; // step: 770
	float 	fConst13KI; // step: 773
	// Recursion delay fVec133SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec133SEState; // Single Delay
	float 	fVec132SEState[2]; // Copy Delay
	float 	fConst14KI; // step: 785
	float 	fConst15KI; // step: 786
	float 	fConst16KI; // step: 791
	float 	fConst17KI; // step: 802
	float 	fConst18KI; // step: 806
	float 	fConst19KI; // step: 810
	// Recursion delay fVec138SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec138SEState; // Single Delay
	float 	fVec137SEState[2]; // Copy Delay
	float 	fConst20KI; // step: 821
	float 	fConst21KI; // step: 822
	float 	fConst22KI; // step: 827
	float 	fConst23KI; // step: 838
	float 	fConst24KI; // step: 842
	float 	fConst25KI; // step: 846
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec142SEState[2]; // Copy Delay
	float 	fConst26KI; // step: 861
	float 	fConst27KI; // step: 865
	float 	fConst28KI; // step: 869
	// Recursion delay fVec146SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec146SEState; // Single Delay
	float 	fVec145SEState[2]; // Copy Delay
	float 	fConst29KI; // step: 881
	float 	fConst30KI; // step: 882
	float 	fConst31KI; // step: 887
	float 	fConst32KI; // step: 898
	float 	fConst33KI; // step: 902
	float 	fConst34KI; // step: 906
	// Recursion delay fVec151SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec151SEState; // Single Delay
	float 	fVec150SEState[2]; // Copy Delay
	float 	fConst35KI; // step: 917
	float 	fConst36KI; // step: 921
	float 	fConst37KI; // step: 932
	float 	fConst38KI; // step: 936
	float 	fConst39KI; // step: 940
	// Recursion delay fVec156SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec156SEState; // Single Delay
	float 	fVec155SEState[2]; // Copy Delay
	float 	fConst40KI; // step: 951
	float 	fConst41KI; // step: 955
	float 	fConst42KI; // step: 963
	float 	fConst43KI; // step: 964
	float 	fConst44KI; // step: 968
	float 	fConst45KI; // step: 971
	float 	fConst46KI; // step: 974
	float 	fConst47KI; // step: 975
	float 	fConst48KI; // step: 978
	// Recursion delay fVec161SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec161SEState; // Single Delay
	float 	fVec160SEState[2]; // Copy Delay
	float 	fConst49KI; // step: 988
	float 	fConst50KI; // step: 989
	float 	fConst51KI; // step: 994
	float 	fConst52KI; // step: 1003
	float 	fConst53KI; // step: 1006
	float 	fConst54KI; // step: 1010
	// Recursion delay fVec166SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec166SEState; // Single Delay
	float 	fVec165SEState[2]; // Copy Delay
	float 	fConst55KI; // step: 1020
	float 	fConst56KI; // step: 1021
	float 	fConst57KI; // step: 1026
	float 	fConst58KI; // step: 1035
	float 	fConst59KI; // step: 1038
	float 	fConst60KI; // step: 1042
	// Recursion delay fVec171SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec171SEState; // Single Delay
	float 	fVec170SEState[2]; // Copy Delay
	float 	fConst61KI; // step: 1055
	float 	fConst62KI; // step: 1058
	float 	fConst63KI; // step: 1062
	// Recursion delay fVec174SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec174SEState; // Single Delay
	float 	fVec173SEState[2]; // Copy Delay
	float 	fConst64KI; // step: 1072
	float 	fConst65KI; // step: 1073
	float 	fConst66KI; // step: 1078
	float 	fConst67KI; // step: 1087
	float 	fConst68KI; // step: 1090
	float 	fConst69KI; // step: 1094
	// Recursion delay fVec179SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec179SEState; // Single Delay
	float 	fVec178SEState[2]; // Copy Delay
	float 	fConst70KI; // step: 1104
	float 	fConst71KI; // step: 1108
	float 	fConst72KI; // step: 1117
	float 	fConst73KI; // step: 1120
	float 	fConst74KI; // step: 1124
	// Recursion delay fVec184SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec184SEState; // Single Delay
	float 	fVec183SEState[2]; // Copy Delay
	float 	fConst75KI; // step: 1134
	float 	fConst76KI; // step: 1138
	float 	fConst77KI; // step: 1146
	float 	fConst78KI; // step: 1147
	float 	fConst79KI; // step: 1151
	float 	fConst80KI; // step: 1154
	float 	fConst81KI; // step: 1157
	float 	fConst82KI; // step: 1158
	float 	fConst83KI; // step: 1161
	// Recursion delay fVec189SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec189SEState; // Single Delay
	float 	fVec188SEState[2]; // Copy Delay
	float 	fConst84KI; // step: 1171
	float 	fConst85KI; // step: 1172
	float 	fConst86KI; // step: 1177
	float 	fConst87KI; // step: 1186
	float 	fConst88KI; // step: 1189
	float 	fConst89KI; // step: 1193
	// Recursion delay fVec194SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec194SEState; // Single Delay
	float 	fVec193SEState[2]; // Copy Delay
	float 	fConst90KI; // step: 1203
	float 	fConst91KI; // step: 1204
	float 	fConst92KI; // step: 1209
	float 	fConst93KI; // step: 1218
	float 	fConst94KI; // step: 1221
	float 	fConst95KI; // step: 1225
	// Recursion delay fVec199SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec199SEState; // Single Delay
	float 	fVec198SEState[2]; // Copy Delay
	float 	fConst96KI; // step: 1238
	float 	fConst97KI; // step: 1241
	float 	fConst98KI; // step: 1245
	// Recursion delay fVec202SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec202SEState; // Single Delay
	float 	fVec201SEState[2]; // Copy Delay
	float 	fConst99KI; // step: 1255
	float 	fConst100KI; // step: 1256
	float 	fConst101KI; // step: 1261
	float 	fConst102KI; // step: 1270
	float 	fConst103KI; // step: 1273
	float 	fConst104KI; // step: 1277
	// Recursion delay fVec207SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec207SEState; // Single Delay
	float 	fVec206SEState[2]; // Copy Delay
	float 	fConst105KI; // step: 1287
	float 	fConst106KI; // step: 1291
	float 	fConst107KI; // step: 1300
	float 	fConst108KI; // step: 1303
	float 	fConst109KI; // step: 1307
	// Recursion delay fVec212SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec212SEState; // Single Delay
	float 	fVec211SEState[2]; // Copy Delay
	float 	fConst110KI; // step: 1317
	float 	fConst111KI; // step: 1321
	float 	fConst112KI; // step: 1329
	float 	fConst113KI; // step: 1330
	float 	fConst114KI; // step: 1334
	float 	fConst115KI; // step: 1337
	float 	fConst116KI; // step: 1340
	float 	fConst117KI; // step: 1341
	float 	fConst118KI; // step: 1344
	// Recursion delay fVec217SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec217SEState; // Single Delay
	float 	fVec216SEState[2]; // Copy Delay
	float 	fConst119KI; // step: 1354
	float 	fConst120KI; // step: 1355
	float 	fConst121KI; // step: 1360
	float 	fConst122KI; // step: 1369
	float 	fConst123KI; // step: 1372
	float 	fConst124KI; // step: 1376
	// Recursion delay fVec222SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec222SEState; // Single Delay
	float 	fVec221SEState[2]; // Copy Delay
	float 	fConst125KI; // step: 1386
	float 	fConst126KI; // step: 1387
	float 	fConst127KI; // step: 1392
	float 	fConst128KI; // step: 1401
	float 	fConst129KI; // step: 1404
	float 	fConst130KI; // step: 1408
	// Recursion delay fVec227SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec227SEState; // Single Delay
	float 	fVec226SEState[2]; // Copy Delay
	float 	fConst131KI; // step: 1421
	float 	fConst132KI; // step: 1424
	float 	fConst133KI; // step: 1428
	// Recursion delay fVec230SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec230SEState; // Single Delay
	float 	fVec229SEState[2]; // Copy Delay
	float 	fConst134KI; // step: 1438
	float 	fConst135KI; // step: 1439
	float 	fConst136KI; // step: 1444
	float 	fConst137KI; // step: 1453
	float 	fConst138KI; // step: 1456
	float 	fConst139KI; // step: 1460
	// Recursion delay fVec235SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec235SEState; // Single Delay
	float 	fVec234SEState[2]; // Copy Delay
	float 	fConst140KI; // step: 1470
	float 	fConst141KI; // step: 1474
	float 	fConst142KI; // step: 1483
	float 	fConst143KI; // step: 1486
	float 	fConst144KI; // step: 1490
	// Recursion delay fVec240SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec240SEState; // Single Delay
	float 	fVec239SEState[2]; // Copy Delay
	float 	fConst145KI; // step: 1500
	float 	fConst146KI; // step: 1504
	float 	fConst147KI; // step: 1512
	float 	fConst148KI; // step: 1513
	float 	fConst149KI; // step: 1517
	float 	fConst150KI; // step: 1520
	float 	fConst151KI; // step: 1523
	float 	fConst152KI; // step: 1524
	float 	fConst153KI; // step: 1527
	// Recursion delay fVec245SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec245SEState; // Single Delay
	float 	fVec244SEState[2]; // Copy Delay
	float 	fConst154KI; // step: 1537
	float 	fConst155KI; // step: 1538
	float 	fConst156KI; // step: 1543
	float 	fConst157KI; // step: 1552
	float 	fConst158KI; // step: 1555
	float 	fConst159KI; // step: 1559
	// Recursion delay fVec250SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec250SEState; // Single Delay
	float 	fVec249SEState[2]; // Copy Delay
	float 	fConst160KI; // step: 1569
	float 	fConst161KI; // step: 1570
	float 	fConst162KI; // step: 1575
	float 	fConst163KI; // step: 1584
	float 	fConst164KI; // step: 1587
	float 	fConst165KI; // step: 1591
	// Recursion delay fVec255SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec255SEState; // Single Delay
	float 	fVec254SEState[2]; // Copy Delay
	float 	fConst166KI; // step: 1604
	float 	fConst167KI; // step: 1607
	float 	fConst168KI; // step: 1611
	// Recursion delay fVec258SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec258SEState; // Single Delay
	float 	fVec257SEState[2]; // Copy Delay
	float 	fConst169KI; // step: 1621
	float 	fConst170KI; // step: 1622
	float 	fConst171KI; // step: 1627
	float 	fConst172KI; // step: 1636
	float 	fConst173KI; // step: 1639
	float 	fConst174KI; // step: 1643
	// Recursion delay fVec263SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec263SEState; // Single Delay
	float 	fVec262SEState[2]; // Copy Delay
	float 	fConst175KI; // step: 1653
	float 	fConst176KI; // step: 1657
	float 	fConst177KI; // step: 1666
	float 	fConst178KI; // step: 1669
	float 	fConst179KI; // step: 1673
	// Recursion delay fVec268SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec268SEState; // Single Delay
	float 	fVec267SEState[2]; // Copy Delay
	float 	fConst180KI; // step: 1683
	float 	fConst181KI; // step: 1687
	float 	fConst182KI; // step: 1695
	float 	fConst183KI; // step: 1696
	float 	fConst184KI; // step: 1700
	float 	fConst185KI; // step: 1703
	float 	fConst186KI; // step: 1706
	float 	fConst187KI; // step: 1707
	float 	fConst188KI; // step: 1710
	// Recursion delay fVec273SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec273SEState; // Single Delay
	float 	fVec272SEState[2]; // Copy Delay
	float 	fConst189KI; // step: 1720
	float 	fConst190KI; // step: 1721
	float 	fConst191KI; // step: 1726
	float 	fConst192KI; // step: 1735
	float 	fConst193KI; // step: 1738
	float 	fConst194KI; // step: 1742
	// Recursion delay fVec278SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec278SEState; // Single Delay
	float 	fVec277SEState[2]; // Copy Delay
	float 	fConst195KI; // step: 1752
	float 	fConst196KI; // step: 1753
	float 	fConst197KI; // step: 1758
	float 	fConst198KI; // step: 1767
	float 	fConst199KI; // step: 1770
	float 	fConst200KI; // step: 1774
	// Recursion delay fVec283SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec283SEState; // Single Delay
	float 	fVec282SEState[2]; // Copy Delay
	float 	fConst201KI; // step: 1787
	float 	fConst202KI; // step: 1790
	float 	fConst203KI; // step: 1794
	// Recursion delay fVec286SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec286SEState; // Single Delay
	float 	fVec285SEState[2]; // Copy Delay
	float 	fConst204KI; // step: 1804
	float 	fConst205KI; // step: 1805
	float 	fConst206KI; // step: 1810
	float 	fConst207KI; // step: 1819
	float 	fConst208KI; // step: 1822
	float 	fConst209KI; // step: 1826
	// Recursion delay fVec291SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec291SEState; // Single Delay
	float 	fVec290SEState[2]; // Copy Delay
	float 	fConst210KI; // step: 1836
	float 	fConst211KI; // step: 1840
	float 	fConst212KI; // step: 1849
	float 	fConst213KI; // step: 1852
	float 	fConst214KI; // step: 1856
	// Recursion delay fVec296SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec296SEState; // Single Delay
	float 	fVec295SEState[2]; // Copy Delay
	float 	fConst215KI; // step: 1866
	float 	fConst216KI; // step: 1870
	float 	fConst217KI; // step: 1878
	float 	fConst218KI; // step: 1879
	float 	fConst219KI; // step: 1883
	float 	fConst220KI; // step: 1886
	float 	fConst221KI; // step: 1889
	float 	fConst222KI; // step: 1890
	float 	fConst223KI; // step: 1893
	// Recursion delay fVec301SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec301SEState; // Single Delay
	float 	fVec300SEState[2]; // Copy Delay
	float 	fConst224KI; // step: 1903
	float 	fConst225KI; // step: 1904
	float 	fConst226KI; // step: 1909
	float 	fConst227KI; // step: 1918
	float 	fConst228KI; // step: 1921
	float 	fConst229KI; // step: 1925
	// Recursion delay fVec306SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec306SEState; // Single Delay
	float 	fVec305SEState[2]; // Copy Delay
	float 	fConst230KI; // step: 1935
	float 	fConst231KI; // step: 1936
	float 	fConst232KI; // step: 1941
	float 	fConst233KI; // step: 1950
	float 	fConst234KI; // step: 1953
	float 	fConst235KI; // step: 1957
	// Recursion delay fVec311SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec311SEState; // Single Delay
	float 	fVec310SEState[2]; // Copy Delay
	float 	fConst236KI; // step: 1970
	float 	fConst237KI; // step: 1973
	float 	fConst238KI; // step: 1977
	// Recursion delay fVec314SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec314SEState; // Single Delay
	float 	fVec313SEState[2]; // Copy Delay
	float 	fConst239KI; // step: 1987
	float 	fConst240KI; // step: 1988
	float 	fConst241KI; // step: 1993
	float 	fConst242KI; // step: 2002
	float 	fConst243KI; // step: 2005
	float 	fConst244KI; // step: 2009
	// Recursion delay fVec319SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec319SEState; // Single Delay
	float 	fVec318SEState[2]; // Copy Delay
	float 	fConst245KI; // step: 2019
	float 	fConst246KI; // step: 2023
	float 	fConst247KI; // step: 2032
	float 	fConst248KI; // step: 2035
	float 	fConst249KI; // step: 2039
	// Recursion delay fVec324SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec324SEState; // Single Delay
	float 	fVec323SEState[2]; // Copy Delay
	float 	fConst250KI; // step: 2049
	float 	fConst251KI; // step: 2053
	float 	fConst252KI; // step: 2061
	float 	fConst253KI; // step: 2062
	float 	fConst254KI; // step: 2066
	float 	fConst255KI; // step: 2069
	float 	fConst256KI; // step: 2072
	float 	fConst257KI; // step: 2073
	float 	fConst258KI; // step: 2076
	// Recursion delay fVec329SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec329SEState; // Single Delay
	float 	fVec328SEState[2]; // Copy Delay
	float 	fConst259KI; // step: 2086
	float 	fConst260KI; // step: 2087
	float 	fConst261KI; // step: 2092
	float 	fConst262KI; // step: 2101
	float 	fConst263KI; // step: 2104
	float 	fConst264KI; // step: 2108
	// Recursion delay fVec334SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec334SEState; // Single Delay
	float 	fVec333SEState[2]; // Copy Delay
	float 	fConst265KI; // step: 2118
	float 	fConst266KI; // step: 2119
	float 	fConst267KI; // step: 2124
	float 	fConst268KI; // step: 2133
	float 	fConst269KI; // step: 2136
	float 	fConst270KI; // step: 2140
	// Recursion delay fVec339SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec339SEState; // Single Delay
	float 	fVec338SEState[2]; // Copy Delay
	float 	fConst271KI; // step: 2153
	float 	fConst272KI; // step: 2156
	float 	fConst273KI; // step: 2160
	// Recursion delay fVec342SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec342SEState; // Single Delay
	float 	fVec341SEState[2]; // Copy Delay
	float 	fConst274KI; // step: 2170
	float 	fConst275KI; // step: 2171
	float 	fConst276KI; // step: 2176
	float 	fConst277KI; // step: 2185
	float 	fConst278KI; // step: 2188
	float 	fConst279KI; // step: 2192
	// Recursion delay fVec347SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec347SEState; // Single Delay
	float 	fVec346SEState[2]; // Copy Delay
	float 	fConst280KI; // step: 2202
	float 	fConst281KI; // step: 2206
	float 	fConst282KI; // step: 2215
	float 	fConst283KI; // step: 2218
	float 	fConst284KI; // step: 2222
	// Recursion delay fVec352SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec352SEState; // Single Delay
	float 	fVec351SEState[2]; // Copy Delay
	float 	fConst285KI; // step: 2232
	float 	fConst286KI; // step: 2236
	float 	fConst287KI; // step: 2244
	float 	fConst288KI; // step: 2245
	float 	fConst289KI; // step: 2249
	float 	fConst290KI; // step: 2252
	float 	fConst291KI; // step: 2255
	float 	fConst292KI; // step: 2256
	float 	fConst293KI; // step: 2259
	// Recursion delay fVec357SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec357SEState; // Single Delay
	float 	fVec356SEState[2]; // Copy Delay
	float 	fConst294KI; // step: 2269
	float 	fConst295KI; // step: 2270
	float 	fConst296KI; // step: 2275
	float 	fConst297KI; // step: 2284
	float 	fConst298KI; // step: 2287
	float 	fConst299KI; // step: 2291
	// Recursion delay fVec362SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec362SEState; // Single Delay
	float 	fVec361SEState[2]; // Copy Delay
	float 	fConst300KI; // step: 2301
	float 	fConst301KI; // step: 2302
	float 	fConst302KI; // step: 2307
	float 	fConst303KI; // step: 2316
	float 	fConst304KI; // step: 2319
	float 	fConst305KI; // step: 2323
	// Recursion delay fVec367SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec367SEState; // Single Delay
	float 	fVec366SEState[2]; // Copy Delay
	float 	fConst306KI; // step: 2336
	float 	fConst307KI; // step: 2339
	float 	fConst308KI; // step: 2343
	// Recursion delay fVec370SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec370SEState; // Single Delay
	float 	fVec369SEState[2]; // Copy Delay
	float 	fConst309KI; // step: 2353
	float 	fConst310KI; // step: 2354
	float 	fConst311KI; // step: 2359
	float 	fConst312KI; // step: 2368
	float 	fConst313KI; // step: 2371
	float 	fConst314KI; // step: 2375
	// Recursion delay fVec375SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec375SEState; // Single Delay
	float 	fVec374SEState[2]; // Copy Delay
	float 	fConst315KI; // step: 2385
	float 	fConst316KI; // step: 2389
	float 	fConst317KI; // step: 2398
	float 	fConst318KI; // step: 2401
	float 	fConst319KI; // step: 2405
	// Recursion delay fVec380SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec380SEState; // Single Delay
	float 	fVec379SEState[2]; // Copy Delay
	float 	fConst320KI; // step: 2415
	float 	fConst321KI; // step: 2419
	float 	fConst322KI; // step: 2427
	float 	fConst323KI; // step: 2428
	float 	fConst324KI; // step: 2432
	float 	fConst325KI; // step: 2435
	float 	fConst326KI; // step: 2438
	float 	fConst327KI; // step: 2439
	float 	fConst328KI; // step: 2442
	// Recursion delay fVec385SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec385SEState; // Single Delay
	float 	fVec384SEState[2]; // Copy Delay
	float 	fConst329KI; // step: 2452
	float 	fConst330KI; // step: 2453
	float 	fConst331KI; // step: 2458
	float 	fConst332KI; // step: 2467
	float 	fConst333KI; // step: 2470
	float 	fConst334KI; // step: 2474
	// Recursion delay fVec390SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec390SEState; // Single Delay
	float 	fVec389SEState[2]; // Copy Delay
	float 	fConst335KI; // step: 2484
	float 	fConst336KI; // step: 2485
	float 	fConst337KI; // step: 2490
	float 	fConst338KI; // step: 2499
	float 	fConst339KI; // step: 2502
	float 	fConst340KI; // step: 2506
	// Recursion delay fVec395SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec395SEState; // Single Delay
	float 	fVec394SEState[2]; // Copy Delay
	float 	fConst341KI; // step: 2519
	float 	fConst342KI; // step: 2522
	float 	fConst343KI; // step: 2526
	// Recursion delay fVec398SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec398SEState; // Single Delay
	float 	fVec397SEState[2]; // Copy Delay
	float 	fConst344KI; // step: 2536
	float 	fConst345KI; // step: 2537
	float 	fConst346KI; // step: 2542
	float 	fConst347KI; // step: 2551
	float 	fConst348KI; // step: 2554
	float 	fConst349KI; // step: 2558
	// Recursion delay fVec403SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec403SEState; // Single Delay
	float 	fVec402SEState[2]; // Copy Delay
	float 	fConst350KI; // step: 2568
	float 	fConst351KI; // step: 2572
	float 	fConst352KI; // step: 2581
	float 	fConst353KI; // step: 2584
	float 	fConst354KI; // step: 2588
	// Recursion delay fVec408SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec408SEState; // Single Delay
	float 	fVec407SEState[2]; // Copy Delay
	float 	fConst355KI; // step: 2598
	float 	fConst356KI; // step: 2602
	float 	fConst357KI; // step: 2610
	float 	fConst358KI; // step: 2611
	float 	fConst359KI; // step: 2615
	float 	fConst360KI; // step: 2618
	float 	fConst361KI; // step: 2621
	float 	fConst362KI; // step: 2622
	float 	fConst363KI; // step: 2625
	// Recursion delay fVec413SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec413SEState; // Single Delay
	float 	fVec412SEState[2]; // Copy Delay
	float 	fConst364KI; // step: 2635
	float 	fConst365KI; // step: 2636
	float 	fConst366KI; // step: 2641
	float 	fConst367KI; // step: 2650
	float 	fConst368KI; // step: 2653
	float 	fConst369KI; // step: 2657
	// Recursion delay fVec418SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec418SEState; // Single Delay
	float 	fVec417SEState[2]; // Copy Delay
	float 	fConst370KI; // step: 2667
	float 	fConst371KI; // step: 2668
	float 	fConst372KI; // step: 2673
	float 	fConst373KI; // step: 2682
	float 	fConst374KI; // step: 2685
	float 	fConst375KI; // step: 2689
	// Recursion delay fVec423SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec423SEState; // Single Delay
	float 	fVec422SEState[2]; // Copy Delay
	float 	fConst376KI; // step: 2702
	float 	fConst377KI; // step: 2705
	float 	fConst378KI; // step: 2709
	// Recursion delay fVec426SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec426SEState; // Single Delay
	float 	fVec425SEState[2]; // Copy Delay
	float 	fConst379KI; // step: 2719
	float 	fConst380KI; // step: 2720
	float 	fConst381KI; // step: 2725
	float 	fConst382KI; // step: 2734
	float 	fConst383KI; // step: 2737
	float 	fConst384KI; // step: 2741
	// Recursion delay fVec431SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec431SEState; // Single Delay
	float 	fVec430SEState[2]; // Copy Delay
	float 	fConst385KI; // step: 2751
	float 	fConst386KI; // step: 2755
	float 	fConst387KI; // step: 2764
	float 	fConst388KI; // step: 2767
	float 	fConst389KI; // step: 2771
	// Recursion delay fVec436SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec436SEState; // Single Delay
	float 	fVec435SEState[2]; // Copy Delay
	float 	fConst390KI; // step: 2781
	float 	fConst391KI; // step: 2785
	float 	fConst392KI; // step: 2793
	float 	fConst393KI; // step: 2794
	float 	fConst394KI; // step: 2798
	float 	fConst395KI; // step: 2801
	float 	fConst396KI; // step: 2804
	float 	fConst397KI; // step: 2805
	float 	fConst398KI; // step: 2808
	// Recursion delay fVec441SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec441SEState; // Single Delay
	float 	fVec440SEState[2]; // Copy Delay
	float 	fConst399KI; // step: 2818
	float 	fConst400KI; // step: 2819
	float 	fConst401KI; // step: 2824
	float 	fConst402KI; // step: 2833
	float 	fConst403KI; // step: 2836
	float 	fConst404KI; // step: 2840
	// Recursion delay fVec446SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec446SEState; // Single Delay
	float 	fVec445SEState[2]; // Copy Delay
	float 	fConst405KI; // step: 2850
	float 	fConst406KI; // step: 2851
	float 	fConst407KI; // step: 2856
	float 	fConst408KI; // step: 2865
	float 	fConst409KI; // step: 2868
	float 	fConst410KI; // step: 2872
	// Recursion delay fVec451SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec451SEState; // Single Delay
	float 	fVec450SEState[2]; // Copy Delay
	float 	fConst411KI; // step: 2885
	float 	fConst412KI; // step: 2888
	float 	fConst413KI; // step: 2892
	// Recursion delay fVec454SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec454SEState; // Single Delay
	float 	fVec453SEState[2]; // Copy Delay
	float 	fConst414KI; // step: 2902
	float 	fConst415KI; // step: 2903
	float 	fConst416KI; // step: 2908
	float 	fConst417KI; // step: 2917
	float 	fConst418KI; // step: 2920
	float 	fConst419KI; // step: 2924
	// Recursion delay fVec459SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec459SEState; // Single Delay
	float 	fVec458SEState[2]; // Copy Delay
	float 	fConst420KI; // step: 2934
	float 	fConst421KI; // step: 2938
	float 	fConst422KI; // step: 2947
	float 	fConst423KI; // step: 2950
	float 	fConst424KI; // step: 2954
	// Recursion delay fVec464SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec464SEState; // Single Delay
	float 	fVec463SEState[2]; // Copy Delay
	float 	fConst425KI; // step: 2964
	float 	fConst426KI; // step: 2968
	float 	fConst427KI; // step: 2976
	float 	fConst428KI; // step: 2977
	float 	fConst429KI; // step: 2981
	float 	fConst430KI; // step: 2984
	float 	fConst431KI; // step: 2987
	float 	fConst432KI; // step: 2988
	float 	fConst433KI; // step: 2991
	// Recursion delay fVec469SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec469SEState; // Single Delay
	float 	fVec468SEState[2]; // Copy Delay
	float 	fConst434KI; // step: 3001
	float 	fConst435KI; // step: 3002
	float 	fConst436KI; // step: 3007
	float 	fConst437KI; // step: 3016
	float 	fConst438KI; // step: 3019
	float 	fConst439KI; // step: 3023
	// Recursion delay fVec474SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec474SEState; // Single Delay
	float 	fVec473SEState[2]; // Copy Delay
	float 	fConst440KI; // step: 3033
	float 	fConst441KI; // step: 3034
	float 	fConst442KI; // step: 3039
	float 	fConst443KI; // step: 3048
	float 	fConst444KI; // step: 3051
	float 	fConst445KI; // step: 3055
	// Recursion delay fVec479SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec479SEState; // Single Delay
	float 	fVec478SEState[2]; // Copy Delay
	float 	fConst446KI; // step: 3068
	float 	fConst447KI; // step: 3071
	float 	fConst448KI; // step: 3075
	// Recursion delay fVec482SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec482SEState; // Single Delay
	float 	fVec481SEState[2]; // Copy Delay
	float 	fConst449KI; // step: 3085
	float 	fConst450KI; // step: 3086
	float 	fConst451KI; // step: 3091
	float 	fConst452KI; // step: 3100
	float 	fConst453KI; // step: 3103
	float 	fConst454KI; // step: 3107
	// Recursion delay fVec487SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec487SEState; // Single Delay
	float 	fVec486SEState[2]; // Copy Delay
	float 	fConst455KI; // step: 3117
	float 	fConst456KI; // step: 3121
	float 	fConst457KI; // step: 3130
	float 	fConst458KI; // step: 3133
	float 	fConst459KI; // step: 3137
	// Recursion delay fVec492SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec492SEState; // Single Delay
	float 	fVec491SEState[2]; // Copy Delay
	float 	fConst460KI; // step: 3147
	float 	fConst461KI; // step: 3151
	float 	fConst462KI; // step: 3159
	float 	fConst463KI; // step: 3160
	float 	fConst464KI; // step: 3164
	float 	fConst465KI; // step: 3167
	float 	fConst466KI; // step: 3170
	float 	fConst467KI; // step: 3171
	float 	fConst468KI; // step: 3174
	// Recursion delay fVec497SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec497SEState; // Single Delay
	float 	fVec496SEState[2]; // Copy Delay
	float 	fConst469KI; // step: 3184
	float 	fConst470KI; // step: 3185
	float 	fConst471KI; // step: 3190
	float 	fConst472KI; // step: 3199
	float 	fConst473KI; // step: 3202
	float 	fConst474KI; // step: 3206
	// Recursion delay fVec502SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec502SEState; // Single Delay
	float 	fVec501SEState[2]; // Copy Delay
	float 	fConst475KI; // step: 3216
	float 	fConst476KI; // step: 3217
	float 	fConst477KI; // step: 3222
	float 	fConst478KI; // step: 3231
	float 	fConst479KI; // step: 3234
	float 	fConst480KI; // step: 3238
	// Recursion delay fVec507SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec507SEState; // Single Delay
	float 	fVec506SEState[2]; // Copy Delay
	float 	fConst481KI; // step: 3251
	float 	fConst482KI; // step: 3254
	float 	fConst483KI; // step: 3258
	// Recursion delay fVec510SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec510SEState; // Single Delay
	float 	fVec509SEState[2]; // Copy Delay
	float 	fConst484KI; // step: 3268
	float 	fConst485KI; // step: 3269
	float 	fConst486KI; // step: 3274
	float 	fConst487KI; // step: 3283
	float 	fConst488KI; // step: 3286
	float 	fConst489KI; // step: 3290
	// Recursion delay fVec515SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec515SEState; // Single Delay
	float 	fVec514SEState[2]; // Copy Delay
	float 	fConst490KI; // step: 3300
	float 	fConst491KI; // step: 3304
	float 	fConst492KI; // step: 3313
	float 	fConst493KI; // step: 3316
	float 	fConst494KI; // step: 3320
	// Recursion delay fVec520SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec520SEState; // Single Delay
	float 	fVec519SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	float 	fConst495KI; // step: 3335
	float 	fConst496KI; // step: 3344
	float 	fConst497KI; // step: 3345
	float 	fConst498KI; // step: 3350
	// Recursion delay fVec522SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec522SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst499KI; // step: 3373
	float 	fConst500KI; // step: 3374
	float 	fConst501KI; // step: 3379
	// Recursion delay fVec526SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec526SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst502KI; // step: 3398
	float 	fConst503KI; // step: 3399
	float 	fConst504KI; // step: 3404
	// Recursion delay fVec530SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec530SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst505KI; // step: 3423
	float 	fConst506KI; // step: 3424
	float 	fConst507KI; // step: 3429
	// Recursion delay fVec534SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec534SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst508KI; // step: 3448
	float 	fConst509KI; // step: 3449
	float 	fConst510KI; // step: 3454
	// Recursion delay fVec538SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec538SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst511KI; // step: 3473
	float 	fConst512KI; // step: 3474
	float 	fConst513KI; // step: 3479
	// Recursion delay fVec542SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec542SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst514KI; // step: 3498
	float 	fConst515KI; // step: 3499
	float 	fConst516KI; // step: 3504
	// Recursion delay fVec546SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec546SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst517KI; // step: 3523
	float 	fConst518KI; // step: 3524
	float 	fConst519KI; // step: 3529
	// Recursion delay fVec550SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec550SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst520KI; // step: 3548
	float 	fConst521KI; // step: 3549
	float 	fConst522KI; // step: 3554
	// Recursion delay fVec554SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec554SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst523KI; // step: 3573
	float 	fConst524KI; // step: 3574
	float 	fConst525KI; // step: 3579
	// Recursion delay fVec558SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec558SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst526KI; // step: 3598
	float 	fConst527KI; // step: 3599
	float 	fConst528KI; // step: 3604
	// Recursion delay fVec562SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec562SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst529KI; // step: 3623
	float 	fConst530KI; // step: 3624
	float 	fConst531KI; // step: 3629
	// Recursion delay fVec566SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec566SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst532KI; // step: 3648
	float 	fConst533KI; // step: 3649
	float 	fConst534KI; // step: 3654
	// Recursion delay fVec570SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec570SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst535KI; // step: 3673
	float 	fConst536KI; // step: 3674
	float 	fConst537KI; // step: 3679
	// Recursion delay fVec574SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec574SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst538KI; // step: 3698
	float 	fConst539KI; // step: 3702
	// Recursion delay fVec578SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec578SEState; // Single Delay
	FAUSTFLOAT 	fbargraph15;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/bypass2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass2:license", "STK-4.3");
		m->declare("effect.lib/cross2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cross2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cross2:license", "STK-4.3");
		m->declare("effect.lib/flanger_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/flanger_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/flanger_demo:license", "STK-4.3");
		m->declare("effect.lib/flanger_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/flanger_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/flanger_mono:license", "STK-4.3");
		m->declare("effect.lib/flanger_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/flanger_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/flanger_stereo:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/phaser2_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/phaser2_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/phaser2_demo:license", "STK-4.3");
		m->declare("effect.lib/phaser2_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/phaser2_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/phaser2_mono:license", "STK-4.3");
		m->declare("effect.lib/phaser2_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/phaser2_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/phaser2_stereo:license", "STK-4.3");
		m->declare("effect.lib/select2stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/select2stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/select2stereo:license", "STK-4.3");
		m->declare("effect.lib/vibrato2_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/vibrato2_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/vibrato2_mono:license", "STK-4.3");
		m->declare("filename", "phaser_flanger.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "phaser_flanger");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 253
		fConst3KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 266
		fConst4KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 277
		fConst5KI = (6.2831855f / fConst0KI); // step: 359
		IOTA0 = 0;
		fConst6KI = (3.1415927f / fConst0KI); // step: 480
		fConst7KI = tanf((50265.484f / fConst0KI)); // step: 756
		fConst8KI = (1.0f / fConst7KI); // step: 758
		fConst9KI = (1.0f / (((fConst8KI + 3.1897273f /* Sum */) / fConst7KI) + 4.0767817f /* Sum */)); // step: 762
		fConst10KI = (((fConst8KI + -3.1897273f /* Sum */) / fConst7KI) + 4.0767817f /* Sum */); // step: 766
		fConst11KI = powf(fConst7KI,2.0f); // step: 769
		fConst12KI = (1.0f / fConst11KI); // step: 770
		fConst13KI = (2.0f * (4.0767817f + -fConst12KI /* Sum */)); // step: 773
		fConst14KI = (0.0017661728f / fConst11KI); // step: 785
		fConst15KI = (fConst14KI + 0.0004076782f /* Sum */); // step: 786
		fConst16KI = (2.0f * (0.0004076782f + -fConst14KI /* Sum */)); // step: 791
		fConst17KI = (1.0f / (((fConst8KI + 0.74313045f /* Sum */) / fConst7KI) + 1.4500711f /* Sum */)); // step: 802
		fConst18KI = (((fConst8KI + -0.74313045f /* Sum */) / fConst7KI) + 1.4500711f /* Sum */); // step: 806
		fConst19KI = (2.0f * (1.4500711f + -fConst12KI /* Sum */)); // step: 810
		fConst20KI = (11.0520525f / fConst11KI); // step: 821
		fConst21KI = (fConst20KI + 1.4500711f /* Sum */); // step: 822
		fConst22KI = (2.0f * (1.4500711f + -fConst20KI /* Sum */)); // step: 827
		fConst23KI = (1.0f / (((fConst8KI + 0.15748216f /* Sum */) / fConst7KI) + 0.9351402f /* Sum */)); // step: 838
		fConst24KI = (((fConst8KI + -0.15748216f /* Sum */) / fConst7KI) + 0.9351402f /* Sum */); // step: 842
		fConst25KI = (2.0f * (0.9351402f + -fConst12KI /* Sum */)); // step: 846
		fConst26KI = (1.0f / (((fConst8KI + 0.78241307f /* Sum */) / fConst7KI) + 0.2452915f /* Sum */)); // step: 861
		fConst27KI = (((fConst8KI + -0.78241307f /* Sum */) / fConst7KI) + 0.2452915f /* Sum */); // step: 865
		fConst28KI = (2.0f * (0.2452915f + -fConst12KI /* Sum */)); // step: 869
		fConst29KI = (0.0001f / fConst11KI); // step: 881
		fConst30KI = (fConst29KI + 0.0004332272f /* Sum */); // step: 882
		fConst31KI = (2.0f * (0.0004332272f + -fConst29KI /* Sum */)); // step: 887
		fConst32KI = (1.0f / (((fConst8KI + 0.51247865f /* Sum */) / fConst7KI) + 0.6896214f /* Sum */)); // step: 898
		fConst33KI = (((fConst8KI + -0.51247865f /* Sum */) / fConst7KI) + 0.6896214f /* Sum */); // step: 902
		fConst34KI = (2.0f * (0.6896214f + -fConst12KI /* Sum */)); // step: 906
		fConst35KI = (fConst12KI + 7.6217313f /* Sum */); // step: 917
		fConst36KI = (2.0f * (7.6217313f + -fConst12KI /* Sum */)); // step: 921
		fConst37KI = (1.0f / (((fConst8KI + 0.16840488f /* Sum */) / fConst7KI) + 1.0693583f /* Sum */)); // step: 932
		fConst38KI = (((fConst8KI + -0.16840488f /* Sum */) / fConst7KI) + 1.0693583f /* Sum */); // step: 936
		fConst39KI = (2.0f * (1.0693583f + -fConst12KI /* Sum */)); // step: 940
		fConst40KI = (fConst12KI + 53.53615f /* Sum */); // step: 951
		fConst41KI = (2.0f * (53.53615f + -fConst12KI /* Sum */)); // step: 955
		fConst42KI = tanf((31665.27f / fConst0KI)); // step: 963
		fConst43KI = (1.0f / fConst42KI); // step: 964
		fConst44KI = (1.0f / (((fConst43KI + 3.1897273f /* Sum */) / fConst42KI) + 4.0767817f /* Sum */)); // step: 968
		fConst45KI = (((fConst43KI + -3.1897273f /* Sum */) / fConst42KI) + 4.0767817f /* Sum */); // step: 971
		fConst46KI = powf(fConst42KI,2.0f); // step: 974
		fConst47KI = (1.0f / fConst46KI); // step: 975
		fConst48KI = (2.0f * (4.0767817f + -fConst47KI /* Sum */)); // step: 978
		fConst49KI = (0.0017661728f / fConst46KI); // step: 988
		fConst50KI = (fConst49KI + 0.0004076782f /* Sum */); // step: 989
		fConst51KI = (2.0f * (0.0004076782f + -fConst49KI /* Sum */)); // step: 994
		fConst52KI = (1.0f / (((fConst43KI + 0.74313045f /* Sum */) / fConst42KI) + 1.4500711f /* Sum */)); // step: 1003
		fConst53KI = (((fConst43KI + -0.74313045f /* Sum */) / fConst42KI) + 1.4500711f /* Sum */); // step: 1006
		fConst54KI = (2.0f * (1.4500711f + -fConst47KI /* Sum */)); // step: 1010
		fConst55KI = (11.0520525f / fConst46KI); // step: 1020
		fConst56KI = (fConst55KI + 1.4500711f /* Sum */); // step: 1021
		fConst57KI = (2.0f * (1.4500711f + -fConst55KI /* Sum */)); // step: 1026
		fConst58KI = (1.0f / (((fConst43KI + 0.15748216f /* Sum */) / fConst42KI) + 0.9351402f /* Sum */)); // step: 1035
		fConst59KI = (((fConst43KI + -0.15748216f /* Sum */) / fConst42KI) + 0.9351402f /* Sum */); // step: 1038
		fConst60KI = (2.0f * (0.9351402f + -fConst47KI /* Sum */)); // step: 1042
		fConst61KI = (1.0f / (((fConst43KI + 0.78241307f /* Sum */) / fConst42KI) + 0.2452915f /* Sum */)); // step: 1055
		fConst62KI = (((fConst43KI + -0.78241307f /* Sum */) / fConst42KI) + 0.2452915f /* Sum */); // step: 1058
		fConst63KI = (2.0f * (0.2452915f + -fConst47KI /* Sum */)); // step: 1062
		fConst64KI = (0.0001f / fConst46KI); // step: 1072
		fConst65KI = (fConst64KI + 0.0004332272f /* Sum */); // step: 1073
		fConst66KI = (2.0f * (0.0004332272f + -fConst64KI /* Sum */)); // step: 1078
		fConst67KI = (1.0f / (((fConst43KI + 0.51247865f /* Sum */) / fConst42KI) + 0.6896214f /* Sum */)); // step: 1087
		fConst68KI = (((fConst43KI + -0.51247865f /* Sum */) / fConst42KI) + 0.6896214f /* Sum */); // step: 1090
		fConst69KI = (2.0f * (0.6896214f + -fConst47KI /* Sum */)); // step: 1094
		fConst70KI = (fConst47KI + 7.6217313f /* Sum */); // step: 1104
		fConst71KI = (2.0f * (7.6217313f + -fConst47KI /* Sum */)); // step: 1108
		fConst72KI = (1.0f / (((fConst43KI + 0.16840488f /* Sum */) / fConst42KI) + 1.0693583f /* Sum */)); // step: 1117
		fConst73KI = (((fConst43KI + -0.16840488f /* Sum */) / fConst42KI) + 1.0693583f /* Sum */); // step: 1120
		fConst74KI = (2.0f * (1.0693583f + -fConst47KI /* Sum */)); // step: 1124
		fConst75KI = (fConst47KI + 53.53615f /* Sum */); // step: 1134
		fConst76KI = (2.0f * (53.53615f + -fConst47KI /* Sum */)); // step: 1138
		fConst77KI = tanf((19947.87f / fConst0KI)); // step: 1146
		fConst78KI = (1.0f / fConst77KI); // step: 1147
		fConst79KI = (1.0f / (((fConst78KI + 3.1897273f /* Sum */) / fConst77KI) + 4.0767817f /* Sum */)); // step: 1151
		fConst80KI = (((fConst78KI + -3.1897273f /* Sum */) / fConst77KI) + 4.0767817f /* Sum */); // step: 1154
		fConst81KI = powf(fConst77KI,2.0f); // step: 1157
		fConst82KI = (1.0f / fConst81KI); // step: 1158
		fConst83KI = (2.0f * (4.0767817f + -fConst82KI /* Sum */)); // step: 1161
		fConst84KI = (0.0017661728f / fConst81KI); // step: 1171
		fConst85KI = (fConst84KI + 0.0004076782f /* Sum */); // step: 1172
		fConst86KI = (2.0f * (0.0004076782f + -fConst84KI /* Sum */)); // step: 1177
		fConst87KI = (1.0f / (((fConst78KI + 0.74313045f /* Sum */) / fConst77KI) + 1.4500711f /* Sum */)); // step: 1186
		fConst88KI = (((fConst78KI + -0.74313045f /* Sum */) / fConst77KI) + 1.4500711f /* Sum */); // step: 1189
		fConst89KI = (2.0f * (1.4500711f + -fConst82KI /* Sum */)); // step: 1193
		fConst90KI = (11.0520525f / fConst81KI); // step: 1203
		fConst91KI = (fConst90KI + 1.4500711f /* Sum */); // step: 1204
		fConst92KI = (2.0f * (1.4500711f + -fConst90KI /* Sum */)); // step: 1209
		fConst93KI = (1.0f / (((fConst78KI + 0.15748216f /* Sum */) / fConst77KI) + 0.9351402f /* Sum */)); // step: 1218
		fConst94KI = (((fConst78KI + -0.15748216f /* Sum */) / fConst77KI) + 0.9351402f /* Sum */); // step: 1221
		fConst95KI = (2.0f * (0.9351402f + -fConst82KI /* Sum */)); // step: 1225
		fConst96KI = (1.0f / (((fConst78KI + 0.78241307f /* Sum */) / fConst77KI) + 0.2452915f /* Sum */)); // step: 1238
		fConst97KI = (((fConst78KI + -0.78241307f /* Sum */) / fConst77KI) + 0.2452915f /* Sum */); // step: 1241
		fConst98KI = (2.0f * (0.2452915f + -fConst82KI /* Sum */)); // step: 1245
		fConst99KI = (0.0001f / fConst81KI); // step: 1255
		fConst100KI = (fConst99KI + 0.0004332272f /* Sum */); // step: 1256
		fConst101KI = (2.0f * (0.0004332272f + -fConst99KI /* Sum */)); // step: 1261
		fConst102KI = (1.0f / (((fConst78KI + 0.51247865f /* Sum */) / fConst77KI) + 0.6896214f /* Sum */)); // step: 1270
		fConst103KI = (((fConst78KI + -0.51247865f /* Sum */) / fConst77KI) + 0.6896214f /* Sum */); // step: 1273
		fConst104KI = (2.0f * (0.6896214f + -fConst82KI /* Sum */)); // step: 1277
		fConst105KI = (fConst82KI + 7.6217313f /* Sum */); // step: 1287
		fConst106KI = (2.0f * (7.6217313f + -fConst82KI /* Sum */)); // step: 1291
		fConst107KI = (1.0f / (((fConst78KI + 0.16840488f /* Sum */) / fConst77KI) + 1.0693583f /* Sum */)); // step: 1300
		fConst108KI = (((fConst78KI + -0.16840488f /* Sum */) / fConst77KI) + 1.0693583f /* Sum */); // step: 1303
		fConst109KI = (2.0f * (1.0693583f + -fConst82KI /* Sum */)); // step: 1307
		fConst110KI = (fConst82KI + 53.53615f /* Sum */); // step: 1317
		fConst111KI = (2.0f * (53.53615f + -fConst82KI /* Sum */)); // step: 1321
		fConst112KI = tanf((12566.371f / fConst0KI)); // step: 1329
		fConst113KI = (1.0f / fConst112KI); // step: 1330
		fConst114KI = (1.0f / (((fConst113KI + 3.1897273f /* Sum */) / fConst112KI) + 4.0767817f /* Sum */)); // step: 1334
		fConst115KI = (((fConst113KI + -3.1897273f /* Sum */) / fConst112KI) + 4.0767817f /* Sum */); // step: 1337
		fConst116KI = powf(fConst112KI,2.0f); // step: 1340
		fConst117KI = (1.0f / fConst116KI); // step: 1341
		fConst118KI = (2.0f * (4.0767817f + -fConst117KI /* Sum */)); // step: 1344
		fConst119KI = (0.0017661728f / fConst116KI); // step: 1354
		fConst120KI = (fConst119KI + 0.0004076782f /* Sum */); // step: 1355
		fConst121KI = (2.0f * (0.0004076782f + -fConst119KI /* Sum */)); // step: 1360
		fConst122KI = (1.0f / (((fConst113KI + 0.74313045f /* Sum */) / fConst112KI) + 1.4500711f /* Sum */)); // step: 1369
		fConst123KI = (((fConst113KI + -0.74313045f /* Sum */) / fConst112KI) + 1.4500711f /* Sum */); // step: 1372
		fConst124KI = (2.0f * (1.4500711f + -fConst117KI /* Sum */)); // step: 1376
		fConst125KI = (11.0520525f / fConst116KI); // step: 1386
		fConst126KI = (fConst125KI + 1.4500711f /* Sum */); // step: 1387
		fConst127KI = (2.0f * (1.4500711f + -fConst125KI /* Sum */)); // step: 1392
		fConst128KI = (1.0f / (((fConst113KI + 0.15748216f /* Sum */) / fConst112KI) + 0.9351402f /* Sum */)); // step: 1401
		fConst129KI = (((fConst113KI + -0.15748216f /* Sum */) / fConst112KI) + 0.9351402f /* Sum */); // step: 1404
		fConst130KI = (2.0f * (0.9351402f + -fConst117KI /* Sum */)); // step: 1408
		fConst131KI = (1.0f / (((fConst113KI + 0.78241307f /* Sum */) / fConst112KI) + 0.2452915f /* Sum */)); // step: 1421
		fConst132KI = (((fConst113KI + -0.78241307f /* Sum */) / fConst112KI) + 0.2452915f /* Sum */); // step: 1424
		fConst133KI = (2.0f * (0.2452915f + -fConst117KI /* Sum */)); // step: 1428
		fConst134KI = (0.0001f / fConst116KI); // step: 1438
		fConst135KI = (fConst134KI + 0.0004332272f /* Sum */); // step: 1439
		fConst136KI = (2.0f * (0.0004332272f + -fConst134KI /* Sum */)); // step: 1444
		fConst137KI = (1.0f / (((fConst113KI + 0.51247865f /* Sum */) / fConst112KI) + 0.6896214f /* Sum */)); // step: 1453
		fConst138KI = (((fConst113KI + -0.51247865f /* Sum */) / fConst112KI) + 0.6896214f /* Sum */); // step: 1456
		fConst139KI = (2.0f * (0.6896214f + -fConst117KI /* Sum */)); // step: 1460
		fConst140KI = (fConst117KI + 7.6217313f /* Sum */); // step: 1470
		fConst141KI = (2.0f * (7.6217313f + -fConst117KI /* Sum */)); // step: 1474
		fConst142KI = (1.0f / (((fConst113KI + 0.16840488f /* Sum */) / fConst112KI) + 1.0693583f /* Sum */)); // step: 1483
		fConst143KI = (((fConst113KI + -0.16840488f /* Sum */) / fConst112KI) + 1.0693583f /* Sum */); // step: 1486
		fConst144KI = (2.0f * (1.0693583f + -fConst117KI /* Sum */)); // step: 1490
		fConst145KI = (fConst117KI + 53.53615f /* Sum */); // step: 1500
		fConst146KI = (2.0f * (53.53615f + -fConst117KI /* Sum */)); // step: 1504
		fConst147KI = tanf((7916.3174f / fConst0KI)); // step: 1512
		fConst148KI = (1.0f / fConst147KI); // step: 1513
		fConst149KI = (1.0f / (((fConst148KI + 3.1897273f /* Sum */) / fConst147KI) + 4.0767817f /* Sum */)); // step: 1517
		fConst150KI = (((fConst148KI + -3.1897273f /* Sum */) / fConst147KI) + 4.0767817f /* Sum */); // step: 1520
		fConst151KI = powf(fConst147KI,2.0f); // step: 1523
		fConst152KI = (1.0f / fConst151KI); // step: 1524
		fConst153KI = (2.0f * (4.0767817f + -fConst152KI /* Sum */)); // step: 1527
		fConst154KI = (0.0017661728f / fConst151KI); // step: 1537
		fConst155KI = (fConst154KI + 0.0004076782f /* Sum */); // step: 1538
		fConst156KI = (2.0f * (0.0004076782f + -fConst154KI /* Sum */)); // step: 1543
		fConst157KI = (1.0f / (((fConst148KI + 0.74313045f /* Sum */) / fConst147KI) + 1.4500711f /* Sum */)); // step: 1552
		fConst158KI = (((fConst148KI + -0.74313045f /* Sum */) / fConst147KI) + 1.4500711f /* Sum */); // step: 1555
		fConst159KI = (2.0f * (1.4500711f + -fConst152KI /* Sum */)); // step: 1559
		fConst160KI = (11.0520525f / fConst151KI); // step: 1569
		fConst161KI = (fConst160KI + 1.4500711f /* Sum */); // step: 1570
		fConst162KI = (2.0f * (1.4500711f + -fConst160KI /* Sum */)); // step: 1575
		fConst163KI = (1.0f / (((fConst148KI + 0.15748216f /* Sum */) / fConst147KI) + 0.9351402f /* Sum */)); // step: 1584
		fConst164KI = (((fConst148KI + -0.15748216f /* Sum */) / fConst147KI) + 0.9351402f /* Sum */); // step: 1587
		fConst165KI = (2.0f * (0.9351402f + -fConst152KI /* Sum */)); // step: 1591
		fConst166KI = (1.0f / (((fConst148KI + 0.78241307f /* Sum */) / fConst147KI) + 0.2452915f /* Sum */)); // step: 1604
		fConst167KI = (((fConst148KI + -0.78241307f /* Sum */) / fConst147KI) + 0.2452915f /* Sum */); // step: 1607
		fConst168KI = (2.0f * (0.2452915f + -fConst152KI /* Sum */)); // step: 1611
		fConst169KI = (0.0001f / fConst151KI); // step: 1621
		fConst170KI = (fConst169KI + 0.0004332272f /* Sum */); // step: 1622
		fConst171KI = (2.0f * (0.0004332272f + -fConst169KI /* Sum */)); // step: 1627
		fConst172KI = (1.0f / (((fConst148KI + 0.51247865f /* Sum */) / fConst147KI) + 0.6896214f /* Sum */)); // step: 1636
		fConst173KI = (((fConst148KI + -0.51247865f /* Sum */) / fConst147KI) + 0.6896214f /* Sum */); // step: 1639
		fConst174KI = (2.0f * (0.6896214f + -fConst152KI /* Sum */)); // step: 1643
		fConst175KI = (fConst152KI + 7.6217313f /* Sum */); // step: 1653
		fConst176KI = (2.0f * (7.6217313f + -fConst152KI /* Sum */)); // step: 1657
		fConst177KI = (1.0f / (((fConst148KI + 0.16840488f /* Sum */) / fConst147KI) + 1.0693583f /* Sum */)); // step: 1666
		fConst178KI = (((fConst148KI + -0.16840488f /* Sum */) / fConst147KI) + 1.0693583f /* Sum */); // step: 1669
		fConst179KI = (2.0f * (1.0693583f + -fConst152KI /* Sum */)); // step: 1673
		fConst180KI = (fConst152KI + 53.53615f /* Sum */); // step: 1683
		fConst181KI = (2.0f * (53.53615f + -fConst152KI /* Sum */)); // step: 1687
		fConst182KI = tanf((4986.9673f / fConst0KI)); // step: 1695
		fConst183KI = (1.0f / fConst182KI); // step: 1696
		fConst184KI = (1.0f / (((fConst183KI + 3.1897273f /* Sum */) / fConst182KI) + 4.0767817f /* Sum */)); // step: 1700
		fConst185KI = (((fConst183KI + -3.1897273f /* Sum */) / fConst182KI) + 4.0767817f /* Sum */); // step: 1703
		fConst186KI = powf(fConst182KI,2.0f); // step: 1706
		fConst187KI = (1.0f / fConst186KI); // step: 1707
		fConst188KI = (2.0f * (4.0767817f + -fConst187KI /* Sum */)); // step: 1710
		fConst189KI = (0.0017661728f / fConst186KI); // step: 1720
		fConst190KI = (fConst189KI + 0.0004076782f /* Sum */); // step: 1721
		fConst191KI = (2.0f * (0.0004076782f + -fConst189KI /* Sum */)); // step: 1726
		fConst192KI = (1.0f / (((fConst183KI + 0.74313045f /* Sum */) / fConst182KI) + 1.4500711f /* Sum */)); // step: 1735
		fConst193KI = (((fConst183KI + -0.74313045f /* Sum */) / fConst182KI) + 1.4500711f /* Sum */); // step: 1738
		fConst194KI = (2.0f * (1.4500711f + -fConst187KI /* Sum */)); // step: 1742
		fConst195KI = (11.0520525f / fConst186KI); // step: 1752
		fConst196KI = (fConst195KI + 1.4500711f /* Sum */); // step: 1753
		fConst197KI = (2.0f * (1.4500711f + -fConst195KI /* Sum */)); // step: 1758
		fConst198KI = (1.0f / (((fConst183KI + 0.15748216f /* Sum */) / fConst182KI) + 0.9351402f /* Sum */)); // step: 1767
		fConst199KI = (((fConst183KI + -0.15748216f /* Sum */) / fConst182KI) + 0.9351402f /* Sum */); // step: 1770
		fConst200KI = (2.0f * (0.9351402f + -fConst187KI /* Sum */)); // step: 1774
		fConst201KI = (1.0f / (((fConst183KI + 0.78241307f /* Sum */) / fConst182KI) + 0.2452915f /* Sum */)); // step: 1787
		fConst202KI = (((fConst183KI + -0.78241307f /* Sum */) / fConst182KI) + 0.2452915f /* Sum */); // step: 1790
		fConst203KI = (2.0f * (0.2452915f + -fConst187KI /* Sum */)); // step: 1794
		fConst204KI = (0.0001f / fConst186KI); // step: 1804
		fConst205KI = (fConst204KI + 0.0004332272f /* Sum */); // step: 1805
		fConst206KI = (2.0f * (0.0004332272f + -fConst204KI /* Sum */)); // step: 1810
		fConst207KI = (1.0f / (((fConst183KI + 0.51247865f /* Sum */) / fConst182KI) + 0.6896214f /* Sum */)); // step: 1819
		fConst208KI = (((fConst183KI + -0.51247865f /* Sum */) / fConst182KI) + 0.6896214f /* Sum */); // step: 1822
		fConst209KI = (2.0f * (0.6896214f + -fConst187KI /* Sum */)); // step: 1826
		fConst210KI = (fConst187KI + 7.6217313f /* Sum */); // step: 1836
		fConst211KI = (2.0f * (7.6217313f + -fConst187KI /* Sum */)); // step: 1840
		fConst212KI = (1.0f / (((fConst183KI + 0.16840488f /* Sum */) / fConst182KI) + 1.0693583f /* Sum */)); // step: 1849
		fConst213KI = (((fConst183KI + -0.16840488f /* Sum */) / fConst182KI) + 1.0693583f /* Sum */); // step: 1852
		fConst214KI = (2.0f * (1.0693583f + -fConst187KI /* Sum */)); // step: 1856
		fConst215KI = (fConst187KI + 53.53615f /* Sum */); // step: 1866
		fConst216KI = (2.0f * (53.53615f + -fConst187KI /* Sum */)); // step: 1870
		fConst217KI = tanf((3141.5928f / fConst0KI)); // step: 1878
		fConst218KI = (1.0f / fConst217KI); // step: 1879
		fConst219KI = (1.0f / (((fConst218KI + 3.1897273f /* Sum */) / fConst217KI) + 4.0767817f /* Sum */)); // step: 1883
		fConst220KI = (((fConst218KI + -3.1897273f /* Sum */) / fConst217KI) + 4.0767817f /* Sum */); // step: 1886
		fConst221KI = powf(fConst217KI,2.0f); // step: 1889
		fConst222KI = (1.0f / fConst221KI); // step: 1890
		fConst223KI = (2.0f * (4.0767817f + -fConst222KI /* Sum */)); // step: 1893
		fConst224KI = (0.0017661728f / fConst221KI); // step: 1903
		fConst225KI = (fConst224KI + 0.0004076782f /* Sum */); // step: 1904
		fConst226KI = (2.0f * (0.0004076782f + -fConst224KI /* Sum */)); // step: 1909
		fConst227KI = (1.0f / (((fConst218KI + 0.74313045f /* Sum */) / fConst217KI) + 1.4500711f /* Sum */)); // step: 1918
		fConst228KI = (((fConst218KI + -0.74313045f /* Sum */) / fConst217KI) + 1.4500711f /* Sum */); // step: 1921
		fConst229KI = (2.0f * (1.4500711f + -fConst222KI /* Sum */)); // step: 1925
		fConst230KI = (11.0520525f / fConst221KI); // step: 1935
		fConst231KI = (fConst230KI + 1.4500711f /* Sum */); // step: 1936
		fConst232KI = (2.0f * (1.4500711f + -fConst230KI /* Sum */)); // step: 1941
		fConst233KI = (1.0f / (((fConst218KI + 0.15748216f /* Sum */) / fConst217KI) + 0.9351402f /* Sum */)); // step: 1950
		fConst234KI = (((fConst218KI + -0.15748216f /* Sum */) / fConst217KI) + 0.9351402f /* Sum */); // step: 1953
		fConst235KI = (2.0f * (0.9351402f + -fConst222KI /* Sum */)); // step: 1957
		fConst236KI = (1.0f / (((fConst218KI + 0.78241307f /* Sum */) / fConst217KI) + 0.2452915f /* Sum */)); // step: 1970
		fConst237KI = (((fConst218KI + -0.78241307f /* Sum */) / fConst217KI) + 0.2452915f /* Sum */); // step: 1973
		fConst238KI = (2.0f * (0.2452915f + -fConst222KI /* Sum */)); // step: 1977
		fConst239KI = (0.0001f / fConst221KI); // step: 1987
		fConst240KI = (fConst239KI + 0.0004332272f /* Sum */); // step: 1988
		fConst241KI = (2.0f * (0.0004332272f + -fConst239KI /* Sum */)); // step: 1993
		fConst242KI = (1.0f / (((fConst218KI + 0.51247865f /* Sum */) / fConst217KI) + 0.6896214f /* Sum */)); // step: 2002
		fConst243KI = (((fConst218KI + -0.51247865f /* Sum */) / fConst217KI) + 0.6896214f /* Sum */); // step: 2005
		fConst244KI = (2.0f * (0.6896214f + -fConst222KI /* Sum */)); // step: 2009
		fConst245KI = (fConst222KI + 7.6217313f /* Sum */); // step: 2019
		fConst246KI = (2.0f * (7.6217313f + -fConst222KI /* Sum */)); // step: 2023
		fConst247KI = (1.0f / (((fConst218KI + 0.16840488f /* Sum */) / fConst217KI) + 1.0693583f /* Sum */)); // step: 2032
		fConst248KI = (((fConst218KI + -0.16840488f /* Sum */) / fConst217KI) + 1.0693583f /* Sum */); // step: 2035
		fConst249KI = (2.0f * (1.0693583f + -fConst222KI /* Sum */)); // step: 2039
		fConst250KI = (fConst222KI + 53.53615f /* Sum */); // step: 2049
		fConst251KI = (2.0f * (53.53615f + -fConst222KI /* Sum */)); // step: 2053
		fConst252KI = tanf((1979.0793f / fConst0KI)); // step: 2061
		fConst253KI = (1.0f / fConst252KI); // step: 2062
		fConst254KI = (1.0f / (((fConst253KI + 3.1897273f /* Sum */) / fConst252KI) + 4.0767817f /* Sum */)); // step: 2066
		fConst255KI = (((fConst253KI + -3.1897273f /* Sum */) / fConst252KI) + 4.0767817f /* Sum */); // step: 2069
		fConst256KI = powf(fConst252KI,2.0f); // step: 2072
		fConst257KI = (1.0f / fConst256KI); // step: 2073
		fConst258KI = (2.0f * (4.0767817f + -fConst257KI /* Sum */)); // step: 2076
		fConst259KI = (0.0017661728f / fConst256KI); // step: 2086
		fConst260KI = (fConst259KI + 0.0004076782f /* Sum */); // step: 2087
		fConst261KI = (2.0f * (0.0004076782f + -fConst259KI /* Sum */)); // step: 2092
		fConst262KI = (1.0f / (((fConst253KI + 0.74313045f /* Sum */) / fConst252KI) + 1.4500711f /* Sum */)); // step: 2101
		fConst263KI = (((fConst253KI + -0.74313045f /* Sum */) / fConst252KI) + 1.4500711f /* Sum */); // step: 2104
		fConst264KI = (2.0f * (1.4500711f + -fConst257KI /* Sum */)); // step: 2108
		fConst265KI = (11.0520525f / fConst256KI); // step: 2118
		fConst266KI = (fConst265KI + 1.4500711f /* Sum */); // step: 2119
		fConst267KI = (2.0f * (1.4500711f + -fConst265KI /* Sum */)); // step: 2124
		fConst268KI = (1.0f / (((fConst253KI + 0.15748216f /* Sum */) / fConst252KI) + 0.9351402f /* Sum */)); // step: 2133
		fConst269KI = (((fConst253KI + -0.15748216f /* Sum */) / fConst252KI) + 0.9351402f /* Sum */); // step: 2136
		fConst270KI = (2.0f * (0.9351402f + -fConst257KI /* Sum */)); // step: 2140
		fConst271KI = (1.0f / (((fConst253KI + 0.78241307f /* Sum */) / fConst252KI) + 0.2452915f /* Sum */)); // step: 2153
		fConst272KI = (((fConst253KI + -0.78241307f /* Sum */) / fConst252KI) + 0.2452915f /* Sum */); // step: 2156
		fConst273KI = (2.0f * (0.2452915f + -fConst257KI /* Sum */)); // step: 2160
		fConst274KI = (0.0001f / fConst256KI); // step: 2170
		fConst275KI = (fConst274KI + 0.0004332272f /* Sum */); // step: 2171
		fConst276KI = (2.0f * (0.0004332272f + -fConst274KI /* Sum */)); // step: 2176
		fConst277KI = (1.0f / (((fConst253KI + 0.51247865f /* Sum */) / fConst252KI) + 0.6896214f /* Sum */)); // step: 2185
		fConst278KI = (((fConst253KI + -0.51247865f /* Sum */) / fConst252KI) + 0.6896214f /* Sum */); // step: 2188
		fConst279KI = (2.0f * (0.6896214f + -fConst257KI /* Sum */)); // step: 2192
		fConst280KI = (fConst257KI + 7.6217313f /* Sum */); // step: 2202
		fConst281KI = (2.0f * (7.6217313f + -fConst257KI /* Sum */)); // step: 2206
		fConst282KI = (1.0f / (((fConst253KI + 0.16840488f /* Sum */) / fConst252KI) + 1.0693583f /* Sum */)); // step: 2215
		fConst283KI = (((fConst253KI + -0.16840488f /* Sum */) / fConst252KI) + 1.0693583f /* Sum */); // step: 2218
		fConst284KI = (2.0f * (1.0693583f + -fConst257KI /* Sum */)); // step: 2222
		fConst285KI = (fConst257KI + 53.53615f /* Sum */); // step: 2232
		fConst286KI = (2.0f * (53.53615f + -fConst257KI /* Sum */)); // step: 2236
		fConst287KI = tanf((1246.7418f / fConst0KI)); // step: 2244
		fConst288KI = (1.0f / fConst287KI); // step: 2245
		fConst289KI = (1.0f / (((fConst288KI + 3.1897273f /* Sum */) / fConst287KI) + 4.0767817f /* Sum */)); // step: 2249
		fConst290KI = (((fConst288KI + -3.1897273f /* Sum */) / fConst287KI) + 4.0767817f /* Sum */); // step: 2252
		fConst291KI = powf(fConst287KI,2.0f); // step: 2255
		fConst292KI = (1.0f / fConst291KI); // step: 2256
		fConst293KI = (2.0f * (4.0767817f + -fConst292KI /* Sum */)); // step: 2259
		fConst294KI = (0.0017661728f / fConst291KI); // step: 2269
		fConst295KI = (fConst294KI + 0.0004076782f /* Sum */); // step: 2270
		fConst296KI = (2.0f * (0.0004076782f + -fConst294KI /* Sum */)); // step: 2275
		fConst297KI = (1.0f / (((fConst288KI + 0.74313045f /* Sum */) / fConst287KI) + 1.4500711f /* Sum */)); // step: 2284
		fConst298KI = (((fConst288KI + -0.74313045f /* Sum */) / fConst287KI) + 1.4500711f /* Sum */); // step: 2287
		fConst299KI = (2.0f * (1.4500711f + -fConst292KI /* Sum */)); // step: 2291
		fConst300KI = (11.0520525f / fConst291KI); // step: 2301
		fConst301KI = (fConst300KI + 1.4500711f /* Sum */); // step: 2302
		fConst302KI = (2.0f * (1.4500711f + -fConst300KI /* Sum */)); // step: 2307
		fConst303KI = (1.0f / (((fConst288KI + 0.15748216f /* Sum */) / fConst287KI) + 0.9351402f /* Sum */)); // step: 2316
		fConst304KI = (((fConst288KI + -0.15748216f /* Sum */) / fConst287KI) + 0.9351402f /* Sum */); // step: 2319
		fConst305KI = (2.0f * (0.9351402f + -fConst292KI /* Sum */)); // step: 2323
		fConst306KI = (1.0f / (((fConst288KI + 0.78241307f /* Sum */) / fConst287KI) + 0.2452915f /* Sum */)); // step: 2336
		fConst307KI = (((fConst288KI + -0.78241307f /* Sum */) / fConst287KI) + 0.2452915f /* Sum */); // step: 2339
		fConst308KI = (2.0f * (0.2452915f + -fConst292KI /* Sum */)); // step: 2343
		fConst309KI = (0.0001f / fConst291KI); // step: 2353
		fConst310KI = (fConst309KI + 0.0004332272f /* Sum */); // step: 2354
		fConst311KI = (2.0f * (0.0004332272f + -fConst309KI /* Sum */)); // step: 2359
		fConst312KI = (1.0f / (((fConst288KI + 0.51247865f /* Sum */) / fConst287KI) + 0.6896214f /* Sum */)); // step: 2368
		fConst313KI = (((fConst288KI + -0.51247865f /* Sum */) / fConst287KI) + 0.6896214f /* Sum */); // step: 2371
		fConst314KI = (2.0f * (0.6896214f + -fConst292KI /* Sum */)); // step: 2375
		fConst315KI = (fConst292KI + 7.6217313f /* Sum */); // step: 2385
		fConst316KI = (2.0f * (7.6217313f + -fConst292KI /* Sum */)); // step: 2389
		fConst317KI = (1.0f / (((fConst288KI + 0.16840488f /* Sum */) / fConst287KI) + 1.0693583f /* Sum */)); // step: 2398
		fConst318KI = (((fConst288KI + -0.16840488f /* Sum */) / fConst287KI) + 1.0693583f /* Sum */); // step: 2401
		fConst319KI = (2.0f * (1.0693583f + -fConst292KI /* Sum */)); // step: 2405
		fConst320KI = (fConst292KI + 53.53615f /* Sum */); // step: 2415
		fConst321KI = (2.0f * (53.53615f + -fConst292KI /* Sum */)); // step: 2419
		fConst322KI = tanf((785.3982f / fConst0KI)); // step: 2427
		fConst323KI = (1.0f / fConst322KI); // step: 2428
		fConst324KI = (1.0f / (((fConst323KI + 3.1897273f /* Sum */) / fConst322KI) + 4.0767817f /* Sum */)); // step: 2432
		fConst325KI = (((fConst323KI + -3.1897273f /* Sum */) / fConst322KI) + 4.0767817f /* Sum */); // step: 2435
		fConst326KI = powf(fConst322KI,2.0f); // step: 2438
		fConst327KI = (1.0f / fConst326KI); // step: 2439
		fConst328KI = (2.0f * (4.0767817f + -fConst327KI /* Sum */)); // step: 2442
		fConst329KI = (0.0017661728f / fConst326KI); // step: 2452
		fConst330KI = (fConst329KI + 0.0004076782f /* Sum */); // step: 2453
		fConst331KI = (2.0f * (0.0004076782f + -fConst329KI /* Sum */)); // step: 2458
		fConst332KI = (1.0f / (((fConst323KI + 0.74313045f /* Sum */) / fConst322KI) + 1.4500711f /* Sum */)); // step: 2467
		fConst333KI = (((fConst323KI + -0.74313045f /* Sum */) / fConst322KI) + 1.4500711f /* Sum */); // step: 2470
		fConst334KI = (2.0f * (1.4500711f + -fConst327KI /* Sum */)); // step: 2474
		fConst335KI = (11.0520525f / fConst326KI); // step: 2484
		fConst336KI = (fConst335KI + 1.4500711f /* Sum */); // step: 2485
		fConst337KI = (2.0f * (1.4500711f + -fConst335KI /* Sum */)); // step: 2490
		fConst338KI = (1.0f / (((fConst323KI + 0.15748216f /* Sum */) / fConst322KI) + 0.9351402f /* Sum */)); // step: 2499
		fConst339KI = (((fConst323KI + -0.15748216f /* Sum */) / fConst322KI) + 0.9351402f /* Sum */); // step: 2502
		fConst340KI = (2.0f * (0.9351402f + -fConst327KI /* Sum */)); // step: 2506
		fConst341KI = (1.0f / (((fConst323KI + 0.78241307f /* Sum */) / fConst322KI) + 0.2452915f /* Sum */)); // step: 2519
		fConst342KI = (((fConst323KI + -0.78241307f /* Sum */) / fConst322KI) + 0.2452915f /* Sum */); // step: 2522
		fConst343KI = (2.0f * (0.2452915f + -fConst327KI /* Sum */)); // step: 2526
		fConst344KI = (0.0001f / fConst326KI); // step: 2536
		fConst345KI = (fConst344KI + 0.0004332272f /* Sum */); // step: 2537
		fConst346KI = (2.0f * (0.0004332272f + -fConst344KI /* Sum */)); // step: 2542
		fConst347KI = (1.0f / (((fConst323KI + 0.51247865f /* Sum */) / fConst322KI) + 0.6896214f /* Sum */)); // step: 2551
		fConst348KI = (((fConst323KI + -0.51247865f /* Sum */) / fConst322KI) + 0.6896214f /* Sum */); // step: 2554
		fConst349KI = (2.0f * (0.6896214f + -fConst327KI /* Sum */)); // step: 2558
		fConst350KI = (fConst327KI + 7.6217313f /* Sum */); // step: 2568
		fConst351KI = (2.0f * (7.6217313f + -fConst327KI /* Sum */)); // step: 2572
		fConst352KI = (1.0f / (((fConst323KI + 0.16840488f /* Sum */) / fConst322KI) + 1.0693583f /* Sum */)); // step: 2581
		fConst353KI = (((fConst323KI + -0.16840488f /* Sum */) / fConst322KI) + 1.0693583f /* Sum */); // step: 2584
		fConst354KI = (2.0f * (1.0693583f + -fConst327KI /* Sum */)); // step: 2588
		fConst355KI = (fConst327KI + 53.53615f /* Sum */); // step: 2598
		fConst356KI = (2.0f * (53.53615f + -fConst327KI /* Sum */)); // step: 2602
		fConst357KI = tanf((494.76984f / fConst0KI)); // step: 2610
		fConst358KI = (1.0f / fConst357KI); // step: 2611
		fConst359KI = (1.0f / (((fConst358KI + 3.1897273f /* Sum */) / fConst357KI) + 4.0767817f /* Sum */)); // step: 2615
		fConst360KI = (((fConst358KI + -3.1897273f /* Sum */) / fConst357KI) + 4.0767817f /* Sum */); // step: 2618
		fConst361KI = powf(fConst357KI,2.0f); // step: 2621
		fConst362KI = (1.0f / fConst361KI); // step: 2622
		fConst363KI = (2.0f * (4.0767817f + -fConst362KI /* Sum */)); // step: 2625
		fConst364KI = (0.0017661728f / fConst361KI); // step: 2635
		fConst365KI = (fConst364KI + 0.0004076782f /* Sum */); // step: 2636
		fConst366KI = (2.0f * (0.0004076782f + -fConst364KI /* Sum */)); // step: 2641
		fConst367KI = (1.0f / (((fConst358KI + 0.74313045f /* Sum */) / fConst357KI) + 1.4500711f /* Sum */)); // step: 2650
		fConst368KI = (((fConst358KI + -0.74313045f /* Sum */) / fConst357KI) + 1.4500711f /* Sum */); // step: 2653
		fConst369KI = (2.0f * (1.4500711f + -fConst362KI /* Sum */)); // step: 2657
		fConst370KI = (11.0520525f / fConst361KI); // step: 2667
		fConst371KI = (fConst370KI + 1.4500711f /* Sum */); // step: 2668
		fConst372KI = (2.0f * (1.4500711f + -fConst370KI /* Sum */)); // step: 2673
		fConst373KI = (1.0f / (((fConst358KI + 0.15748216f /* Sum */) / fConst357KI) + 0.9351402f /* Sum */)); // step: 2682
		fConst374KI = (((fConst358KI + -0.15748216f /* Sum */) / fConst357KI) + 0.9351402f /* Sum */); // step: 2685
		fConst375KI = (2.0f * (0.9351402f + -fConst362KI /* Sum */)); // step: 2689
		fConst376KI = (1.0f / (((fConst358KI + 0.78241307f /* Sum */) / fConst357KI) + 0.2452915f /* Sum */)); // step: 2702
		fConst377KI = (((fConst358KI + -0.78241307f /* Sum */) / fConst357KI) + 0.2452915f /* Sum */); // step: 2705
		fConst378KI = (2.0f * (0.2452915f + -fConst362KI /* Sum */)); // step: 2709
		fConst379KI = (0.0001f / fConst361KI); // step: 2719
		fConst380KI = (fConst379KI + 0.0004332272f /* Sum */); // step: 2720
		fConst381KI = (2.0f * (0.0004332272f + -fConst379KI /* Sum */)); // step: 2725
		fConst382KI = (1.0f / (((fConst358KI + 0.51247865f /* Sum */) / fConst357KI) + 0.6896214f /* Sum */)); // step: 2734
		fConst383KI = (((fConst358KI + -0.51247865f /* Sum */) / fConst357KI) + 0.6896214f /* Sum */); // step: 2737
		fConst384KI = (2.0f * (0.6896214f + -fConst362KI /* Sum */)); // step: 2741
		fConst385KI = (fConst362KI + 7.6217313f /* Sum */); // step: 2751
		fConst386KI = (2.0f * (7.6217313f + -fConst362KI /* Sum */)); // step: 2755
		fConst387KI = (1.0f / (((fConst358KI + 0.16840488f /* Sum */) / fConst357KI) + 1.0693583f /* Sum */)); // step: 2764
		fConst388KI = (((fConst358KI + -0.16840488f /* Sum */) / fConst357KI) + 1.0693583f /* Sum */); // step: 2767
		fConst389KI = (2.0f * (1.0693583f + -fConst362KI /* Sum */)); // step: 2771
		fConst390KI = (fConst362KI + 53.53615f /* Sum */); // step: 2781
		fConst391KI = (2.0f * (53.53615f + -fConst362KI /* Sum */)); // step: 2785
		fConst392KI = tanf((311.68546f / fConst0KI)); // step: 2793
		fConst393KI = (1.0f / fConst392KI); // step: 2794
		fConst394KI = (1.0f / (((fConst393KI + 3.1897273f /* Sum */) / fConst392KI) + 4.0767817f /* Sum */)); // step: 2798
		fConst395KI = (((fConst393KI + -3.1897273f /* Sum */) / fConst392KI) + 4.0767817f /* Sum */); // step: 2801
		fConst396KI = powf(fConst392KI,2.0f); // step: 2804
		fConst397KI = (1.0f / fConst396KI); // step: 2805
		fConst398KI = (2.0f * (4.0767817f + -fConst397KI /* Sum */)); // step: 2808
		fConst399KI = (0.0017661728f / fConst396KI); // step: 2818
		fConst400KI = (fConst399KI + 0.0004076782f /* Sum */); // step: 2819
		fConst401KI = (2.0f * (0.0004076782f + -fConst399KI /* Sum */)); // step: 2824
		fConst402KI = (1.0f / (((fConst393KI + 0.74313045f /* Sum */) / fConst392KI) + 1.4500711f /* Sum */)); // step: 2833
		fConst403KI = (((fConst393KI + -0.74313045f /* Sum */) / fConst392KI) + 1.4500711f /* Sum */); // step: 2836
		fConst404KI = (2.0f * (1.4500711f + -fConst397KI /* Sum */)); // step: 2840
		fConst405KI = (11.0520525f / fConst396KI); // step: 2850
		fConst406KI = (fConst405KI + 1.4500711f /* Sum */); // step: 2851
		fConst407KI = (2.0f * (1.4500711f + -fConst405KI /* Sum */)); // step: 2856
		fConst408KI = (1.0f / (((fConst393KI + 0.15748216f /* Sum */) / fConst392KI) + 0.9351402f /* Sum */)); // step: 2865
		fConst409KI = (((fConst393KI + -0.15748216f /* Sum */) / fConst392KI) + 0.9351402f /* Sum */); // step: 2868
		fConst410KI = (2.0f * (0.9351402f + -fConst397KI /* Sum */)); // step: 2872
		fConst411KI = (1.0f / (((fConst393KI + 0.78241307f /* Sum */) / fConst392KI) + 0.2452915f /* Sum */)); // step: 2885
		fConst412KI = (((fConst393KI + -0.78241307f /* Sum */) / fConst392KI) + 0.2452915f /* Sum */); // step: 2888
		fConst413KI = (2.0f * (0.2452915f + -fConst397KI /* Sum */)); // step: 2892
		fConst414KI = (0.0001f / fConst396KI); // step: 2902
		fConst415KI = (fConst414KI + 0.0004332272f /* Sum */); // step: 2903
		fConst416KI = (2.0f * (0.0004332272f + -fConst414KI /* Sum */)); // step: 2908
		fConst417KI = (1.0f / (((fConst393KI + 0.51247865f /* Sum */) / fConst392KI) + 0.6896214f /* Sum */)); // step: 2917
		fConst418KI = (((fConst393KI + -0.51247865f /* Sum */) / fConst392KI) + 0.6896214f /* Sum */); // step: 2920
		fConst419KI = (2.0f * (0.6896214f + -fConst397KI /* Sum */)); // step: 2924
		fConst420KI = (fConst397KI + 7.6217313f /* Sum */); // step: 2934
		fConst421KI = (2.0f * (7.6217313f + -fConst397KI /* Sum */)); // step: 2938
		fConst422KI = (1.0f / (((fConst393KI + 0.16840488f /* Sum */) / fConst392KI) + 1.0693583f /* Sum */)); // step: 2947
		fConst423KI = (((fConst393KI + -0.16840488f /* Sum */) / fConst392KI) + 1.0693583f /* Sum */); // step: 2950
		fConst424KI = (2.0f * (1.0693583f + -fConst397KI /* Sum */)); // step: 2954
		fConst425KI = (fConst397KI + 53.53615f /* Sum */); // step: 2964
		fConst426KI = (2.0f * (53.53615f + -fConst397KI /* Sum */)); // step: 2968
		fConst427KI = tanf((196.34955f / fConst0KI)); // step: 2976
		fConst428KI = (1.0f / fConst427KI); // step: 2977
		fConst429KI = (1.0f / (((fConst428KI + 3.1897273f /* Sum */) / fConst427KI) + 4.0767817f /* Sum */)); // step: 2981
		fConst430KI = (((fConst428KI + -3.1897273f /* Sum */) / fConst427KI) + 4.0767817f /* Sum */); // step: 2984
		fConst431KI = powf(fConst427KI,2.0f); // step: 2987
		fConst432KI = (1.0f / fConst431KI); // step: 2988
		fConst433KI = (2.0f * (4.0767817f + -fConst432KI /* Sum */)); // step: 2991
		fConst434KI = (0.0017661728f / fConst431KI); // step: 3001
		fConst435KI = (fConst434KI + 0.0004076782f /* Sum */); // step: 3002
		fConst436KI = (2.0f * (0.0004076782f + -fConst434KI /* Sum */)); // step: 3007
		fConst437KI = (1.0f / (((fConst428KI + 0.74313045f /* Sum */) / fConst427KI) + 1.4500711f /* Sum */)); // step: 3016
		fConst438KI = (((fConst428KI + -0.74313045f /* Sum */) / fConst427KI) + 1.4500711f /* Sum */); // step: 3019
		fConst439KI = (2.0f * (1.4500711f + -fConst432KI /* Sum */)); // step: 3023
		fConst440KI = (11.0520525f / fConst431KI); // step: 3033
		fConst441KI = (fConst440KI + 1.4500711f /* Sum */); // step: 3034
		fConst442KI = (2.0f * (1.4500711f + -fConst440KI /* Sum */)); // step: 3039
		fConst443KI = (1.0f / (((fConst428KI + 0.15748216f /* Sum */) / fConst427KI) + 0.9351402f /* Sum */)); // step: 3048
		fConst444KI = (((fConst428KI + -0.15748216f /* Sum */) / fConst427KI) + 0.9351402f /* Sum */); // step: 3051
		fConst445KI = (2.0f * (0.9351402f + -fConst432KI /* Sum */)); // step: 3055
		fConst446KI = (1.0f / (((fConst428KI + 0.78241307f /* Sum */) / fConst427KI) + 0.2452915f /* Sum */)); // step: 3068
		fConst447KI = (((fConst428KI + -0.78241307f /* Sum */) / fConst427KI) + 0.2452915f /* Sum */); // step: 3071
		fConst448KI = (2.0f * (0.2452915f + -fConst432KI /* Sum */)); // step: 3075
		fConst449KI = (0.0001f / fConst431KI); // step: 3085
		fConst450KI = (fConst449KI + 0.0004332272f /* Sum */); // step: 3086
		fConst451KI = (2.0f * (0.0004332272f + -fConst449KI /* Sum */)); // step: 3091
		fConst452KI = (1.0f / (((fConst428KI + 0.51247865f /* Sum */) / fConst427KI) + 0.6896214f /* Sum */)); // step: 3100
		fConst453KI = (((fConst428KI + -0.51247865f /* Sum */) / fConst427KI) + 0.6896214f /* Sum */); // step: 3103
		fConst454KI = (2.0f * (0.6896214f + -fConst432KI /* Sum */)); // step: 3107
		fConst455KI = (fConst432KI + 7.6217313f /* Sum */); // step: 3117
		fConst456KI = (2.0f * (7.6217313f + -fConst432KI /* Sum */)); // step: 3121
		fConst457KI = (1.0f / (((fConst428KI + 0.16840488f /* Sum */) / fConst427KI) + 1.0693583f /* Sum */)); // step: 3130
		fConst458KI = (((fConst428KI + -0.16840488f /* Sum */) / fConst427KI) + 1.0693583f /* Sum */); // step: 3133
		fConst459KI = (2.0f * (1.0693583f + -fConst432KI /* Sum */)); // step: 3137
		fConst460KI = (fConst432KI + 53.53615f /* Sum */); // step: 3147
		fConst461KI = (2.0f * (53.53615f + -fConst432KI /* Sum */)); // step: 3151
		fConst462KI = tanf((123.69246f / fConst0KI)); // step: 3159
		fConst463KI = (1.0f / fConst462KI); // step: 3160
		fConst464KI = (1.0f / (((fConst463KI + 3.1897273f /* Sum */) / fConst462KI) + 4.0767817f /* Sum */)); // step: 3164
		fConst465KI = (((fConst463KI + -3.1897273f /* Sum */) / fConst462KI) + 4.0767817f /* Sum */); // step: 3167
		fConst466KI = powf(fConst462KI,2.0f); // step: 3170
		fConst467KI = (1.0f / fConst466KI); // step: 3171
		fConst468KI = (2.0f * (4.0767817f + -fConst467KI /* Sum */)); // step: 3174
		fConst469KI = (0.0017661728f / fConst466KI); // step: 3184
		fConst470KI = (fConst469KI + 0.0004076782f /* Sum */); // step: 3185
		fConst471KI = (2.0f * (0.0004076782f + -fConst469KI /* Sum */)); // step: 3190
		fConst472KI = (1.0f / (((fConst463KI + 0.74313045f /* Sum */) / fConst462KI) + 1.4500711f /* Sum */)); // step: 3199
		fConst473KI = (((fConst463KI + -0.74313045f /* Sum */) / fConst462KI) + 1.4500711f /* Sum */); // step: 3202
		fConst474KI = (2.0f * (1.4500711f + -fConst467KI /* Sum */)); // step: 3206
		fConst475KI = (11.0520525f / fConst466KI); // step: 3216
		fConst476KI = (fConst475KI + 1.4500711f /* Sum */); // step: 3217
		fConst477KI = (2.0f * (1.4500711f + -fConst475KI /* Sum */)); // step: 3222
		fConst478KI = (1.0f / (((fConst463KI + 0.15748216f /* Sum */) / fConst462KI) + 0.9351402f /* Sum */)); // step: 3231
		fConst479KI = (((fConst463KI + -0.15748216f /* Sum */) / fConst462KI) + 0.9351402f /* Sum */); // step: 3234
		fConst480KI = (2.0f * (0.9351402f + -fConst467KI /* Sum */)); // step: 3238
		fConst481KI = (1.0f / (((fConst463KI + 0.78241307f /* Sum */) / fConst462KI) + 0.2452915f /* Sum */)); // step: 3251
		fConst482KI = (((fConst463KI + -0.78241307f /* Sum */) / fConst462KI) + 0.2452915f /* Sum */); // step: 3254
		fConst483KI = (2.0f * (0.2452915f + -fConst467KI /* Sum */)); // step: 3258
		fConst484KI = (0.0001f / fConst466KI); // step: 3268
		fConst485KI = (fConst484KI + 0.0004332272f /* Sum */); // step: 3269
		fConst486KI = (2.0f * (0.0004332272f + -fConst484KI /* Sum */)); // step: 3274
		fConst487KI = (1.0f / (((fConst463KI + 0.51247865f /* Sum */) / fConst462KI) + 0.6896214f /* Sum */)); // step: 3283
		fConst488KI = (((fConst463KI + -0.51247865f /* Sum */) / fConst462KI) + 0.6896214f /* Sum */); // step: 3286
		fConst489KI = (2.0f * (0.6896214f + -fConst467KI /* Sum */)); // step: 3290
		fConst490KI = (fConst467KI + 7.6217313f /* Sum */); // step: 3300
		fConst491KI = (2.0f * (7.6217313f + -fConst467KI /* Sum */)); // step: 3304
		fConst492KI = (1.0f / (((fConst463KI + 0.16840488f /* Sum */) / fConst462KI) + 1.0693583f /* Sum */)); // step: 3313
		fConst493KI = (((fConst463KI + -0.16840488f /* Sum */) / fConst462KI) + 1.0693583f /* Sum */); // step: 3316
		fConst494KI = (2.0f * (1.0693583f + -fConst467KI /* Sum */)); // step: 3320
		fConst495KI = (1e+03f / fConst0KI); // step: 3335
		fConst496KI = (50.06381f / fConst11KI); // step: 3344
		fConst497KI = (fConst496KI + 0.9351402f /* Sum */); // step: 3345
		fConst498KI = (2.0f * (0.9351402f + -fConst496KI /* Sum */)); // step: 3350
		fConst499KI = (50.06381f / fConst46KI); // step: 3373
		fConst500KI = (fConst499KI + 0.9351402f /* Sum */); // step: 3374
		fConst501KI = (2.0f * (0.9351402f + -fConst499KI /* Sum */)); // step: 3379
		fConst502KI = (50.06381f / fConst81KI); // step: 3398
		fConst503KI = (fConst502KI + 0.9351402f /* Sum */); // step: 3399
		fConst504KI = (2.0f * (0.9351402f + -fConst502KI /* Sum */)); // step: 3404
		fConst505KI = (50.06381f / fConst116KI); // step: 3423
		fConst506KI = (fConst505KI + 0.9351402f /* Sum */); // step: 3424
		fConst507KI = (2.0f * (0.9351402f + -fConst505KI /* Sum */)); // step: 3429
		fConst508KI = (50.06381f / fConst151KI); // step: 3448
		fConst509KI = (fConst508KI + 0.9351402f /* Sum */); // step: 3449
		fConst510KI = (2.0f * (0.9351402f + -fConst508KI /* Sum */)); // step: 3454
		fConst511KI = (50.06381f / fConst186KI); // step: 3473
		fConst512KI = (fConst511KI + 0.9351402f /* Sum */); // step: 3474
		fConst513KI = (2.0f * (0.9351402f + -fConst511KI /* Sum */)); // step: 3479
		fConst514KI = (50.06381f / fConst221KI); // step: 3498
		fConst515KI = (fConst514KI + 0.9351402f /* Sum */); // step: 3499
		fConst516KI = (2.0f * (0.9351402f + -fConst514KI /* Sum */)); // step: 3504
		fConst517KI = (50.06381f / fConst256KI); // step: 3523
		fConst518KI = (fConst517KI + 0.9351402f /* Sum */); // step: 3524
		fConst519KI = (2.0f * (0.9351402f + -fConst517KI /* Sum */)); // step: 3529
		fConst520KI = (50.06381f / fConst291KI); // step: 3548
		fConst521KI = (fConst520KI + 0.9351402f /* Sum */); // step: 3549
		fConst522KI = (2.0f * (0.9351402f + -fConst520KI /* Sum */)); // step: 3554
		fConst523KI = (50.06381f / fConst326KI); // step: 3573
		fConst524KI = (fConst523KI + 0.9351402f /* Sum */); // step: 3574
		fConst525KI = (2.0f * (0.9351402f + -fConst523KI /* Sum */)); // step: 3579
		fConst526KI = (50.06381f / fConst361KI); // step: 3598
		fConst527KI = (fConst526KI + 0.9351402f /* Sum */); // step: 3599
		fConst528KI = (2.0f * (0.9351402f + -fConst526KI /* Sum */)); // step: 3604
		fConst529KI = (50.06381f / fConst396KI); // step: 3623
		fConst530KI = (fConst529KI + 0.9351402f /* Sum */); // step: 3624
		fConst531KI = (2.0f * (0.9351402f + -fConst529KI /* Sum */)); // step: 3629
		fConst532KI = (50.06381f / fConst431KI); // step: 3648
		fConst533KI = (fConst532KI + 0.9351402f /* Sum */); // step: 3649
		fConst534KI = (2.0f * (0.9351402f + -fConst532KI /* Sum */)); // step: 3654
		fConst535KI = (50.06381f / fConst466KI); // step: 3673
		fConst536KI = (fConst535KI + 0.9351402f /* Sum */); // step: 3674
		fConst537KI = (2.0f * (0.9351402f + -fConst535KI /* Sum */)); // step: 3679
		fConst538KI = (fConst467KI + 53.53615f /* Sum */); // step: 3698
		fConst539KI = (2.0f * (53.53615f + -fConst467KI /* Sum */)); // step: 3702
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fslider4 = 0.0f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fslider5 = -2e+01f;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fentry0 = 2.0f;
		fcheckbox4 = 0.0;
		fslider6 = 0.0f;
		fslider7 = 0.5f;
		fslider8 = 1.0f;
		fcheckbox5 = 0.0;
		fslider9 = 0.0f;
		fslider10 = 1.0f;
		fslider11 = 1e+01f;
		fslider12 = 0.0f;
		fslider13 = 1e+03f;
		fslider14 = 1.5f;
		fslider15 = 1e+02f;
		fslider16 = 8e+02f;
		fslider17 = 0.5f;
		fslider18 = 1.0f;
		fcheckbox6 = 0.0;
		fcheckbox7 = 0.0;
		fslider19 = 5e+01f;
		fslider20 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec11SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec16SEState = 0;
		fVec17SEState = 0;
		fVec19SEState = 0;
		fVec20SEState = 0;
		fVec21SEState = 0;
		fVec23SEState = 0;
		fVec25SEState = 0;
		fVec26SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec33SEState = 0;
		fVec34SEState = 0;
		fVec35SEState = 0;
		fVec37SEState = 0;
		fVec39SEState = 0;
		fVec40SEState = 0;
		fVec42SEState = 0;
		fVec44SEState = 0;
		iVec45SIState = 0;
		fVec48SIState = 0;
		for (int j = 0; j < 3; j++) { fVec47SIState[j] = 0; }
		fVec51SEState = 0;
		fVec67SEState = 0;
		fVec68SEState = 0;
		for (int i = 1; i < 2048; i++) { fVec75SE[i] = 0; }
		fVec75SE[0] = -1;  // detect unintialized
		fVec71SEState = 0;
		fVec82SEState = 0;
		fVec80SEState = 0;
		for (int j = 0; j < 2; j++) { fVec84SEState[j] = 0; }
		fVec89SEState = 0;
		for (int j = 0; j < 2; j++) { fVec87SEState[j] = 0; }
		fVec94SEState = 0;
		for (int j = 0; j < 2; j++) { fVec92SEState[j] = 0; }
		fVec99SEState = 0;
		for (int j = 0; j < 2; j++) { fVec97SEState[j] = 0; }
		for (int i = 1; i < 2048; i++) { fVec102SE[i] = 0; }
		fVec102SE[0] = -1;  // detect unintialized
		fVec101SEState = 0;
		fVec81SEState = 0;
		fVec107SEState = 0;
		for (int j = 0; j < 2; j++) { fVec109SEState[j] = 0; }
		fVec114SEState = 0;
		for (int j = 0; j < 2; j++) { fVec112SEState[j] = 0; }
		fVec119SEState = 0;
		for (int j = 0; j < 2; j++) { fVec117SEState[j] = 0; }
		fVec124SEState = 0;
		for (int j = 0; j < 2; j++) { fVec122SEState[j] = 0; }
		fVec79SEState = 0;
		fVec106SEState = 0;
		fVec133SEState = 0;
		for (int j = 0; j < 2; j++) { fVec132SEState[j] = 0; }
		fVec138SEState = 0;
		for (int j = 0; j < 2; j++) { fVec137SEState[j] = 0; }
		fVec143SEState = 0;
		for (int j = 0; j < 2; j++) { fVec142SEState[j] = 0; }
		fVec146SEState = 0;
		for (int j = 0; j < 2; j++) { fVec145SEState[j] = 0; }
		fVec151SEState = 0;
		for (int j = 0; j < 2; j++) { fVec150SEState[j] = 0; }
		fVec156SEState = 0;
		for (int j = 0; j < 2; j++) { fVec155SEState[j] = 0; }
		fVec161SEState = 0;
		for (int j = 0; j < 2; j++) { fVec160SEState[j] = 0; }
		fVec166SEState = 0;
		for (int j = 0; j < 2; j++) { fVec165SEState[j] = 0; }
		fVec171SEState = 0;
		for (int j = 0; j < 2; j++) { fVec170SEState[j] = 0; }
		fVec174SEState = 0;
		for (int j = 0; j < 2; j++) { fVec173SEState[j] = 0; }
		fVec179SEState = 0;
		for (int j = 0; j < 2; j++) { fVec178SEState[j] = 0; }
		fVec184SEState = 0;
		for (int j = 0; j < 2; j++) { fVec183SEState[j] = 0; }
		fVec189SEState = 0;
		for (int j = 0; j < 2; j++) { fVec188SEState[j] = 0; }
		fVec194SEState = 0;
		for (int j = 0; j < 2; j++) { fVec193SEState[j] = 0; }
		fVec199SEState = 0;
		for (int j = 0; j < 2; j++) { fVec198SEState[j] = 0; }
		fVec202SEState = 0;
		for (int j = 0; j < 2; j++) { fVec201SEState[j] = 0; }
		fVec207SEState = 0;
		for (int j = 0; j < 2; j++) { fVec206SEState[j] = 0; }
		fVec212SEState = 0;
		for (int j = 0; j < 2; j++) { fVec211SEState[j] = 0; }
		fVec217SEState = 0;
		for (int j = 0; j < 2; j++) { fVec216SEState[j] = 0; }
		fVec222SEState = 0;
		for (int j = 0; j < 2; j++) { fVec221SEState[j] = 0; }
		fVec227SEState = 0;
		for (int j = 0; j < 2; j++) { fVec226SEState[j] = 0; }
		fVec230SEState = 0;
		for (int j = 0; j < 2; j++) { fVec229SEState[j] = 0; }
		fVec235SEState = 0;
		for (int j = 0; j < 2; j++) { fVec234SEState[j] = 0; }
		fVec240SEState = 0;
		for (int j = 0; j < 2; j++) { fVec239SEState[j] = 0; }
		fVec245SEState = 0;
		for (int j = 0; j < 2; j++) { fVec244SEState[j] = 0; }
		fVec250SEState = 0;
		for (int j = 0; j < 2; j++) { fVec249SEState[j] = 0; }
		fVec255SEState = 0;
		for (int j = 0; j < 2; j++) { fVec254SEState[j] = 0; }
		fVec258SEState = 0;
		for (int j = 0; j < 2; j++) { fVec257SEState[j] = 0; }
		fVec263SEState = 0;
		for (int j = 0; j < 2; j++) { fVec262SEState[j] = 0; }
		fVec268SEState = 0;
		for (int j = 0; j < 2; j++) { fVec267SEState[j] = 0; }
		fVec273SEState = 0;
		for (int j = 0; j < 2; j++) { fVec272SEState[j] = 0; }
		fVec278SEState = 0;
		for (int j = 0; j < 2; j++) { fVec277SEState[j] = 0; }
		fVec283SEState = 0;
		for (int j = 0; j < 2; j++) { fVec282SEState[j] = 0; }
		fVec286SEState = 0;
		for (int j = 0; j < 2; j++) { fVec285SEState[j] = 0; }
		fVec291SEState = 0;
		for (int j = 0; j < 2; j++) { fVec290SEState[j] = 0; }
		fVec296SEState = 0;
		for (int j = 0; j < 2; j++) { fVec295SEState[j] = 0; }
		fVec301SEState = 0;
		for (int j = 0; j < 2; j++) { fVec300SEState[j] = 0; }
		fVec306SEState = 0;
		for (int j = 0; j < 2; j++) { fVec305SEState[j] = 0; }
		fVec311SEState = 0;
		for (int j = 0; j < 2; j++) { fVec310SEState[j] = 0; }
		fVec314SEState = 0;
		for (int j = 0; j < 2; j++) { fVec313SEState[j] = 0; }
		fVec319SEState = 0;
		for (int j = 0; j < 2; j++) { fVec318SEState[j] = 0; }
		fVec324SEState = 0;
		for (int j = 0; j < 2; j++) { fVec323SEState[j] = 0; }
		fVec329SEState = 0;
		for (int j = 0; j < 2; j++) { fVec328SEState[j] = 0; }
		fVec334SEState = 0;
		for (int j = 0; j < 2; j++) { fVec333SEState[j] = 0; }
		fVec339SEState = 0;
		for (int j = 0; j < 2; j++) { fVec338SEState[j] = 0; }
		fVec342SEState = 0;
		for (int j = 0; j < 2; j++) { fVec341SEState[j] = 0; }
		fVec347SEState = 0;
		for (int j = 0; j < 2; j++) { fVec346SEState[j] = 0; }
		fVec352SEState = 0;
		for (int j = 0; j < 2; j++) { fVec351SEState[j] = 0; }
		fVec357SEState = 0;
		for (int j = 0; j < 2; j++) { fVec356SEState[j] = 0; }
		fVec362SEState = 0;
		for (int j = 0; j < 2; j++) { fVec361SEState[j] = 0; }
		fVec367SEState = 0;
		for (int j = 0; j < 2; j++) { fVec366SEState[j] = 0; }
		fVec370SEState = 0;
		for (int j = 0; j < 2; j++) { fVec369SEState[j] = 0; }
		fVec375SEState = 0;
		for (int j = 0; j < 2; j++) { fVec374SEState[j] = 0; }
		fVec380SEState = 0;
		for (int j = 0; j < 2; j++) { fVec379SEState[j] = 0; }
		fVec385SEState = 0;
		for (int j = 0; j < 2; j++) { fVec384SEState[j] = 0; }
		fVec390SEState = 0;
		for (int j = 0; j < 2; j++) { fVec389SEState[j] = 0; }
		fVec395SEState = 0;
		for (int j = 0; j < 2; j++) { fVec394SEState[j] = 0; }
		fVec398SEState = 0;
		for (int j = 0; j < 2; j++) { fVec397SEState[j] = 0; }
		fVec403SEState = 0;
		for (int j = 0; j < 2; j++) { fVec402SEState[j] = 0; }
		fVec408SEState = 0;
		for (int j = 0; j < 2; j++) { fVec407SEState[j] = 0; }
		fVec413SEState = 0;
		for (int j = 0; j < 2; j++) { fVec412SEState[j] = 0; }
		fVec418SEState = 0;
		for (int j = 0; j < 2; j++) { fVec417SEState[j] = 0; }
		fVec423SEState = 0;
		for (int j = 0; j < 2; j++) { fVec422SEState[j] = 0; }
		fVec426SEState = 0;
		for (int j = 0; j < 2; j++) { fVec425SEState[j] = 0; }
		fVec431SEState = 0;
		for (int j = 0; j < 2; j++) { fVec430SEState[j] = 0; }
		fVec436SEState = 0;
		for (int j = 0; j < 2; j++) { fVec435SEState[j] = 0; }
		fVec441SEState = 0;
		for (int j = 0; j < 2; j++) { fVec440SEState[j] = 0; }
		fVec446SEState = 0;
		for (int j = 0; j < 2; j++) { fVec445SEState[j] = 0; }
		fVec451SEState = 0;
		for (int j = 0; j < 2; j++) { fVec450SEState[j] = 0; }
		fVec454SEState = 0;
		for (int j = 0; j < 2; j++) { fVec453SEState[j] = 0; }
		fVec459SEState = 0;
		for (int j = 0; j < 2; j++) { fVec458SEState[j] = 0; }
		fVec464SEState = 0;
		for (int j = 0; j < 2; j++) { fVec463SEState[j] = 0; }
		fVec469SEState = 0;
		for (int j = 0; j < 2; j++) { fVec468SEState[j] = 0; }
		fVec474SEState = 0;
		for (int j = 0; j < 2; j++) { fVec473SEState[j] = 0; }
		fVec479SEState = 0;
		for (int j = 0; j < 2; j++) { fVec478SEState[j] = 0; }
		fVec482SEState = 0;
		for (int j = 0; j < 2; j++) { fVec481SEState[j] = 0; }
		fVec487SEState = 0;
		for (int j = 0; j < 2; j++) { fVec486SEState[j] = 0; }
		fVec492SEState = 0;
		for (int j = 0; j < 2; j++) { fVec491SEState[j] = 0; }
		fVec497SEState = 0;
		for (int j = 0; j < 2; j++) { fVec496SEState[j] = 0; }
		fVec502SEState = 0;
		for (int j = 0; j < 2; j++) { fVec501SEState[j] = 0; }
		fVec507SEState = 0;
		for (int j = 0; j < 2; j++) { fVec506SEState[j] = 0; }
		fVec510SEState = 0;
		for (int j = 0; j < 2; j++) { fVec509SEState[j] = 0; }
		fVec515SEState = 0;
		for (int j = 0; j < 2; j++) { fVec514SEState[j] = 0; }
		fVec520SEState = 0;
		for (int j = 0; j < 2; j++) { fVec519SEState[j] = 0; }
		fVec522SEState = 0;
		fVec526SEState = 0;
		fVec530SEState = 0;
		fVec534SEState = 0;
		fVec538SEState = 0;
		fVec542SEState = 0;
		fVec546SEState = 0;
		fVec550SEState = 0;
		fVec554SEState = 0;
		fVec558SEState = 0;
		fVec562SEState = 0;
		fVec566SEState = 0;
		fVec570SEState = 0;
		fVec574SEState = 0;
		fVec578SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("phaser_flanger");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider5, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider5, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox3, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox3);
		ui_interface->declare(&fcheckbox4, "1", "");
		ui_interface->declare(&fcheckbox4, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox4);
		ui_interface->declare(&fcheckbox2, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox2);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface->openVerticalBox("FLANGER");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->declare(&fcheckbox1, "tooltip", "When this is checked, the flanger has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox1);
		ui_interface->declare(&fcheckbox5, "1", "");
		ui_interface->addCheckButton("Invert Flange Sum", &fcheckbox5);
		ui_interface->declare(&fbargraph0, "2", "");
		ui_interface->declare(&fbargraph0, "style", "led");
		ui_interface->declare(&fbargraph0, "tooltip", "Display sum of flange delays");
		ui_interface->addHorizontalBargraph("Flange LFO", &fbargraph0, -1.5f, 1.5f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "unit", "Hz");
		ui_interface->addHorizontalSlider("Speed", &fslider7, 0.5f, 0.0f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider8, "2", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->addHorizontalSlider("Depth", &fslider8, 1.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->declare(&fslider9, "3", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->addHorizontalSlider("Feedback", &fslider9, 0.0f, -0.999f, 0.999f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("Delay Controls");
		ui_interface->declare(&fslider11, "1", "");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "unit", "ms");
		ui_interface->addHorizontalSlider("Flange Delay", &fslider11, 1e+01f, 0.0f, 2e+01f, 0.001f);
		ui_interface->declare(&fslider10, "2", "");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "unit", "ms");
		ui_interface->addHorizontalSlider("Delay Offset", &fslider10, 1.0f, 0.0f, 2e+01f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider6, "unit", "dB");
		ui_interface->addHorizontalSlider("Flanger Output Level", &fslider6, 0.0f, -6e+01f, 1e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface->openVerticalBox("PHASER2");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the phaser has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fcheckbox7, "1", "");
		ui_interface->addCheckButton("Invert Internal Phaser Sum", &fcheckbox7);
		ui_interface->declare(&fcheckbox6, "2", "");
		ui_interface->addCheckButton("Vibrato Mode", &fcheckbox6);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider17, "1", "");
		ui_interface->declare(&fslider17, "style", "knob");
		ui_interface->declare(&fslider17, "unit", "Hz");
		ui_interface->addHorizontalSlider("Speed", &fslider17, 0.5f, 0.0f, 1e+01f, 0.001f);
		ui_interface->declare(&fslider18, "2", "");
		ui_interface->declare(&fslider18, "style", "knob");
		ui_interface->addHorizontalSlider("Notch Depth (Intensity)", &fslider18, 1.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->declare(&fslider12, "3", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->addHorizontalSlider("Feedback Gain", &fslider12, 0.0f, -0.999f, 0.999f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider13, "1", "");
		ui_interface->declare(&fslider13, "scale", "log");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->declare(&fslider13, "unit", "Hz");
		ui_interface->addHorizontalSlider("Notch width", &fslider13, 1e+03f, 1e+01f, 5e+03f, 1.0f);
		ui_interface->declare(&fslider15, "2", "");
		ui_interface->declare(&fslider15, "scale", "log");
		ui_interface->declare(&fslider15, "style", "knob");
		ui_interface->declare(&fslider15, "unit", "Hz");
		ui_interface->addHorizontalSlider("Min Notch1 Freq", &fslider15, 1e+02f, 2e+01f, 5e+03f, 1.0f);
		ui_interface->declare(&fslider16, "3", "");
		ui_interface->declare(&fslider16, "scale", "log");
		ui_interface->declare(&fslider16, "style", "knob");
		ui_interface->declare(&fslider16, "unit", "Hz");
		ui_interface->addHorizontalSlider("Max Notch1 Freq", &fslider16, 8e+02f, 2e+01f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider14, "4", "");
		ui_interface->declare(&fslider14, "style", "knob");
		ui_interface->addHorizontalSlider("Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n)", &fslider14, 1.5f, 1.1f, 4.0f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addHorizontalSlider("Phaser Output Level", &fslider4, 0.0f, -6e+01f, 1e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph15, "0", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "1", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "2", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "3", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "4", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "5", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "6", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "7", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "8", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "9", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "10", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "11", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "12", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "13", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "14", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider20, "0", "");
		ui_interface->declare(&fslider20, "scale", "log");
		ui_interface->declare(&fslider20, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider20, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider20, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider19, "1", "");
		ui_interface->declare(&fslider19, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider19, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider19, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fTemp10SE; // step: 69
		float 	fVec9SE[2];
		float 	fTemp11SE; // step: 74
		float 	fVec11SE[2];
		float 	fTemp12SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp13SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp14SE; // step: 87
		float 	fVec16SE[2];
		float 	fTemp15SE; // step: 90
		float 	fSlow2BE = ((0.01f * float(fslider2)) + 1.0f /* Sum */); // Zone 2, step: 95
		float 	fTemp16SE; // step: 98
		float 	fTemp17SE; // step: 99
		float 	fVec17SE[2];
		float 	fTemp18SE; // step: 105
		float 	fTemp19SE; // step: 106
		float 	fTemp20SE; // step: 107
		float 	fTemp21SE; // step: 108
		float 	fVec19SE[2];
		float 	fTemp22SE; // step: 110
		float 	fTemp23SE; // step: 111
		float 	fVec20SE[2];
		float 	fVec21SE[2];
		float 	fTemp24SE; // step: 120
		float 	fVec23SE[2];
		float 	fTemp25SE; // step: 125
		float 	fVec25SE[2];
		float 	fTemp26SE; // step: 128
		float 	fVec26SE[2];
		float 	fTemp27SE; // step: 133
		float 	fVec28SE[2];
		float 	fTemp28SE; // step: 138
		float 	fVec30SE[2];
		float 	fTemp29SE; // step: 141
		float 	fSlow3BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 144
		float 	fTemp30SE; // step: 147
		float 	fTemp31SE; // step: 148
		float 	fVec31SE[2];
		float 	fTemp32SE; // step: 154
		float 	fTemp33SE; // step: 155
		float 	fTemp34SE; // step: 156
		float 	fTemp35SE; // step: 157
		float 	fVec33SE[2];
		float 	fTemp36SE; // step: 159
		float 	fTemp37SE; // step: 160
		float 	fVec34SE[2];
		float 	fVec35SE[2];
		float 	fTemp38SE; // step: 169
		float 	fVec37SE[2];
		float 	fTemp39SE; // step: 174
		float 	fVec39SE[2];
		float 	fTemp40SE; // step: 177
		float 	fVec40SE[2];
		float 	fTemp41SE; // step: 182
		float 	fVec42SE[2];
		float 	fTemp42SE; // step: 187
		float 	fVec44SE[2];
		int 	iVec45SI[2];
		float 	fTemp43SI; // step: 199
		float 	fTemp44SI; // step: 202
		float 	fTemp45SI; // step: 210
		float 	fVec48SI[2];
		float 	fTemp46SI; // step: 214
		float 	fVec47SI[4];
		float 	fSlow4BE = powf(1e+01f,(0.05f * float(fslider4))); // Zone 2, step: 220
		int 	iSlow5BE = int(float(fcheckbox0)); // Zone 2, step: 222
		int 	iSlow6BE = int(float(fcheckbox1)); // Zone 2, step: 224
		float 	fSlow7BE = (0.001f * powf(1e+01f,(0.05f * float(fslider5)))); // Zone 2, step: 231
		float 	fVec51SE[2];
		float 	fTemp47SE; // step: 238
		float 	fTemp48SE; // step: 240
		int 	iSlow8BE = int(float(fcheckbox2)); // Zone 2, step: 242
		int 	iSlow9BE = int(float(fcheckbox3)); // Zone 2, step: 244
		int 	iSlow10BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 249
		int 	iSlow11BE = (iSlow10BE >= 2); // Zone 2, step: 250
		int 	iSlow12BE = (iSlow10BE >= 1); // Zone 2, step: 251
		int 	iTemp49SC; // step: 254
		float 	fTemp50SC; // step: 255
		float 	fTemp51SE; // step: 262
		int 	iSlow13BE = (iSlow10BE >= 3); // Zone 2, step: 263
		float 	fTemp52SC; // step: 268
		float 	fTemp53SC; // step: 279
		float 	fTemp54SE; // step: 285
		float 	fTemp55SE; // step: 294
		float 	fTemp56SE; // step: 306
		float 	fTemp57SE; // step: 315
		float 	fTemp58SE; // step: 327
		int 	iSlow14BE = int(float(fcheckbox4)); // Zone 2, step: 334
		float 	fTemp59SI; // step: 337
		float 	fTemp60SI; // step: 339
		float 	fTemp61SI; // step: 341
		float 	fTemp62SE; // step: 349
		float 	fSlow15BE = powf(1e+01f,(0.05f * float(fslider6))); // Zone 2, step: 353
		float 	fTemp63SE; // step: 354
		float 	fSlow16BE = (fConst5KI * float(fslider7)); // Zone 2, step: 360
		float 	fSlow17BE = cosf(fSlow16BE); // Zone 2, step: 361
		float 	fTemp64SE; // step: 363
		float 	fTemp65SC; // step: 367
		float 	fSlow18BE = sinf(fSlow16BE); // Zone 2, step: 368
		float 	fTemp66SE; // step: 370
		float 	fVec67SE[2];
		float 	fTemp67SE; // step: 375
		float 	fVec68SE[2];
		float 	fTemp68SE; // step: 380
		float 	fSlow19SE;
		float 	fSlow20BE = float(fslider8); // Zone 2, step: 386
		float 	fSlow21BE = ((int(float(fcheckbox5))) ? -fSlow20BE : fSlow20BE); // Zone 2, step: 390
		float 	fSlow22BE = float(fslider9); // Zone 2, step: 392
		float 	fTemp69SE; // step: 434
		float 	fTemp70SE; // step: 439
		float 	fSlow23BE = (0.001f * float(fslider10)); // Zone 2, step: 442
		float 	fSlow24BE = (0.0005f * float(fslider11)); // Zone 2, step: 445
		float 	fTemp71SE; // step: 449
		int 	iTemp72SE; // step: 450
		float 	fTemp73SE; // step: 453
		float 	fVec71SE[2];
		float 	fTemp74SE; // step: 469
		float 	fTemp75SE; // step: 470
		float 	fSlow25BE = float(fslider12); // Zone 2, step: 472
		float 	fSlow26BE = (fConst6KI * float(fslider13)); // Zone 2, step: 481
		float 	fSlow27BE = expf(-fSlow26BE); // Zone 2, step: 483
		float 	fSlow28BE = (2.0f * fSlow27BE); // Zone 2, step: 484
		float 	fSlow29BE = float(fslider14); // Zone 2, step: 488
		float 	fSlow30BE = (fConst1KI * fSlow29BE); // Zone 2, step: 489
		float 	fSlow31BE = float(fslider15); // Zone 2, step: 491
		float 	fSlow32BE = (6.2831855f * fSlow31BE); // Zone 2, step: 492
		float 	fSlow33BE = (3.1415927f * (fSlow31BE + -(std::max(fSlow31BE, float(fslider16))) /* Sum */)); // Zone 2, step: 499
		float 	fSlow34BE = (fConst5KI * float(fslider17)); // Zone 2, step: 501
		float 	fSlow35BE = sinf(fSlow34BE); // Zone 2, step: 502
		float 	fTemp76SE; // step: 504
		float 	fSlow36BE = cosf(fSlow34BE); // Zone 2, step: 506
		float 	fTemp77SE; // step: 508
		float 	fVec82SE[2];
		float 	fTemp78SE; // step: 517
		float 	fTemp79SE; // step: 519
		float 	fSlow37BE = expf(-fSlow26BE); // Zone 2, step: 523
		float 	fSlow38BE = powf(fSlow37BE,2.0f); // Zone 2, step: 524
		float 	fTemp80SE; // step: 525
		float 	fVec80SE[2];
		float 	fTemp81SE; // step: 530
		float 	fVec84SE[3];
		float 	fSlow39BE = powf(fSlow27BE,2.0f); // Zone 2, step: 531
		float 	fTemp82SE; // step: 533
		float 	fSlow40BE = (2.0f * fSlow37BE); // Zone 2, step: 537
		float 	fSlow41BE = (fConst1KI * powf(fSlow29BE,2.0f)); // Zone 2, step: 543
		float 	fTemp83SE; // step: 545
		float 	fVec89SE[2];
		float 	fTemp84SE; // step: 553
		float 	fVec87SE[3];
		float 	fTemp85SE; // step: 555
		float 	fSlow42BE = (fConst1KI * powf(fSlow29BE,3.0f)); // Zone 2, step: 564
		float 	fTemp86SE; // step: 566
		float 	fVec94SE[2];
		float 	fTemp87SE; // step: 574
		float 	fVec92SE[3];
		float 	fTemp88SE; // step: 576
		float 	fSlow43BE = (fConst1KI * powf(fSlow29BE,4.0f)); // Zone 2, step: 585
		float 	fTemp89SE; // step: 587
		float 	fVec99SE[2];
		float 	fTemp90SE; // step: 595
		float 	fVec97SE[3];
		float 	fTemp91SE; // step: 603
		float 	fTemp92SE; // step: 607
		int 	iTemp93SE; // step: 608
		float 	fTemp94SE; // step: 611
		float 	fVec101SE[2];
		float 	fTemp95SE; // step: 627
		float 	fTemp96SE; // step: 628
		float 	fVec81SE[2];
		float 	fTemp97SE; // step: 645
		float 	fTemp98SE; // step: 647
		float 	fTemp99SE; // step: 650
		float 	fVec107SE[2];
		float 	fTemp100SE; // step: 655
		float 	fVec109SE[3];
		float 	fTemp101SE; // step: 657
		float 	fTemp102SE; // step: 666
		float 	fVec114SE[2];
		float 	fTemp103SE; // step: 674
		float 	fVec112SE[3];
		float 	fTemp104SE; // step: 676
		float 	fTemp105SE; // step: 685
		float 	fVec119SE[2];
		float 	fTemp106SE; // step: 693
		float 	fVec117SE[3];
		float 	fTemp107SE; // step: 695
		float 	fTemp108SE; // step: 704
		float 	fVec124SE[2];
		float 	fTemp109SE; // step: 712
		float 	fVec122SE[3];
		float 	fSlow44BE = ((int(float(fcheckbox6))) ? 2.0f : float(fslider18)); // Zone 2, step: 716
		float 	fSlow45BE = (1.0f + (-0.5f * fSlow44BE) /* Sum */); // Zone 2, step: 719
		float 	fSlow46BE = (0.5f * fSlow44BE); // Zone 2, step: 724
		float 	fSlow47BE = ((int(float(fcheckbox7))) ? -fSlow46BE : fSlow46BE); // Zone 2, step: 726
		float 	fVec79SE[2];
		float 	fTemp110SE; // step: 738
		float 	fVec106SE[2];
		float 	fTemp111SE; // step: 752
		float 	fTemp112SE; // step: 767
		float 	fVec133SE[2];
		float 	fTemp113SE; // step: 782
		float 	fVec132SE[3];
		float 	fTemp114SE; // step: 807
		float 	fVec138SE[2];
		float 	fTemp115SE; // step: 819
		float 	fVec137SE[3];
		float 	fTemp116SE; // step: 843
		float 	fVec143SE[2];
		float 	fTemp117SE; // step: 855
		float 	fVec142SE[3];
		float 	fTemp118SE; // step: 866
		float 	fVec146SE[2];
		float 	fTemp119SE; // step: 878
		float 	fVec145SE[3];
		float 	fTemp120SE; // step: 903
		float 	fVec151SE[2];
		float 	fTemp121SE; // step: 915
		float 	fVec150SE[3];
		float 	fTemp122SE; // step: 937
		float 	fVec156SE[2];
		float 	fTemp123SE; // step: 949
		float 	fVec155SE[3];
		float 	fTemp124SE; // step: 960
		float 	fTemp125SE; // step: 972
		float 	fVec161SE[2];
		float 	fTemp126SE; // step: 987
		float 	fVec160SE[3];
		float 	fTemp127SE; // step: 1007
		float 	fVec166SE[2];
		float 	fTemp128SE; // step: 1019
		float 	fVec165SE[3];
		float 	fTemp129SE; // step: 1039
		float 	fVec171SE[2];
		float 	fTemp130SE; // step: 1051
		float 	fVec170SE[3];
		float 	fTemp131SE; // step: 1059
		float 	fVec174SE[2];
		float 	fTemp132SE; // step: 1071
		float 	fVec173SE[3];
		float 	fTemp133SE; // step: 1091
		float 	fVec179SE[2];
		float 	fTemp134SE; // step: 1103
		float 	fVec178SE[3];
		float 	fTemp135SE; // step: 1121
		float 	fVec184SE[2];
		float 	fTemp136SE; // step: 1133
		float 	fVec183SE[3];
		float 	fTemp137SE; // step: 1143
		float 	fTemp138SE; // step: 1155
		float 	fVec189SE[2];
		float 	fTemp139SE; // step: 1170
		float 	fVec188SE[3];
		float 	fTemp140SE; // step: 1190
		float 	fVec194SE[2];
		float 	fTemp141SE; // step: 1202
		float 	fVec193SE[3];
		float 	fTemp142SE; // step: 1222
		float 	fVec199SE[2];
		float 	fTemp143SE; // step: 1234
		float 	fVec198SE[3];
		float 	fTemp144SE; // step: 1242
		float 	fVec202SE[2];
		float 	fTemp145SE; // step: 1254
		float 	fVec201SE[3];
		float 	fTemp146SE; // step: 1274
		float 	fVec207SE[2];
		float 	fTemp147SE; // step: 1286
		float 	fVec206SE[3];
		float 	fTemp148SE; // step: 1304
		float 	fVec212SE[2];
		float 	fTemp149SE; // step: 1316
		float 	fVec211SE[3];
		float 	fTemp150SE; // step: 1326
		float 	fTemp151SE; // step: 1338
		float 	fVec217SE[2];
		float 	fTemp152SE; // step: 1353
		float 	fVec216SE[3];
		float 	fTemp153SE; // step: 1373
		float 	fVec222SE[2];
		float 	fTemp154SE; // step: 1385
		float 	fVec221SE[3];
		float 	fTemp155SE; // step: 1405
		float 	fVec227SE[2];
		float 	fTemp156SE; // step: 1417
		float 	fVec226SE[3];
		float 	fTemp157SE; // step: 1425
		float 	fVec230SE[2];
		float 	fTemp158SE; // step: 1437
		float 	fVec229SE[3];
		float 	fTemp159SE; // step: 1457
		float 	fVec235SE[2];
		float 	fTemp160SE; // step: 1469
		float 	fVec234SE[3];
		float 	fTemp161SE; // step: 1487
		float 	fVec240SE[2];
		float 	fTemp162SE; // step: 1499
		float 	fVec239SE[3];
		float 	fTemp163SE; // step: 1509
		float 	fTemp164SE; // step: 1521
		float 	fVec245SE[2];
		float 	fTemp165SE; // step: 1536
		float 	fVec244SE[3];
		float 	fTemp166SE; // step: 1556
		float 	fVec250SE[2];
		float 	fTemp167SE; // step: 1568
		float 	fVec249SE[3];
		float 	fTemp168SE; // step: 1588
		float 	fVec255SE[2];
		float 	fTemp169SE; // step: 1600
		float 	fVec254SE[3];
		float 	fTemp170SE; // step: 1608
		float 	fVec258SE[2];
		float 	fTemp171SE; // step: 1620
		float 	fVec257SE[3];
		float 	fTemp172SE; // step: 1640
		float 	fVec263SE[2];
		float 	fTemp173SE; // step: 1652
		float 	fVec262SE[3];
		float 	fTemp174SE; // step: 1670
		float 	fVec268SE[2];
		float 	fTemp175SE; // step: 1682
		float 	fVec267SE[3];
		float 	fTemp176SE; // step: 1692
		float 	fTemp177SE; // step: 1704
		float 	fVec273SE[2];
		float 	fTemp178SE; // step: 1719
		float 	fVec272SE[3];
		float 	fTemp179SE; // step: 1739
		float 	fVec278SE[2];
		float 	fTemp180SE; // step: 1751
		float 	fVec277SE[3];
		float 	fTemp181SE; // step: 1771
		float 	fVec283SE[2];
		float 	fTemp182SE; // step: 1783
		float 	fVec282SE[3];
		float 	fTemp183SE; // step: 1791
		float 	fVec286SE[2];
		float 	fTemp184SE; // step: 1803
		float 	fVec285SE[3];
		float 	fTemp185SE; // step: 1823
		float 	fVec291SE[2];
		float 	fTemp186SE; // step: 1835
		float 	fVec290SE[3];
		float 	fTemp187SE; // step: 1853
		float 	fVec296SE[2];
		float 	fTemp188SE; // step: 1865
		float 	fVec295SE[3];
		float 	fTemp189SE; // step: 1875
		float 	fTemp190SE; // step: 1887
		float 	fVec301SE[2];
		float 	fTemp191SE; // step: 1902
		float 	fVec300SE[3];
		float 	fTemp192SE; // step: 1922
		float 	fVec306SE[2];
		float 	fTemp193SE; // step: 1934
		float 	fVec305SE[3];
		float 	fTemp194SE; // step: 1954
		float 	fVec311SE[2];
		float 	fTemp195SE; // step: 1966
		float 	fVec310SE[3];
		float 	fTemp196SE; // step: 1974
		float 	fVec314SE[2];
		float 	fTemp197SE; // step: 1986
		float 	fVec313SE[3];
		float 	fTemp198SE; // step: 2006
		float 	fVec319SE[2];
		float 	fTemp199SE; // step: 2018
		float 	fVec318SE[3];
		float 	fTemp200SE; // step: 2036
		float 	fVec324SE[2];
		float 	fTemp201SE; // step: 2048
		float 	fVec323SE[3];
		float 	fTemp202SE; // step: 2058
		float 	fTemp203SE; // step: 2070
		float 	fVec329SE[2];
		float 	fTemp204SE; // step: 2085
		float 	fVec328SE[3];
		float 	fTemp205SE; // step: 2105
		float 	fVec334SE[2];
		float 	fTemp206SE; // step: 2117
		float 	fVec333SE[3];
		float 	fTemp207SE; // step: 2137
		float 	fVec339SE[2];
		float 	fTemp208SE; // step: 2149
		float 	fVec338SE[3];
		float 	fTemp209SE; // step: 2157
		float 	fVec342SE[2];
		float 	fTemp210SE; // step: 2169
		float 	fVec341SE[3];
		float 	fTemp211SE; // step: 2189
		float 	fVec347SE[2];
		float 	fTemp212SE; // step: 2201
		float 	fVec346SE[3];
		float 	fTemp213SE; // step: 2219
		float 	fVec352SE[2];
		float 	fTemp214SE; // step: 2231
		float 	fVec351SE[3];
		float 	fTemp215SE; // step: 2241
		float 	fTemp216SE; // step: 2253
		float 	fVec357SE[2];
		float 	fTemp217SE; // step: 2268
		float 	fVec356SE[3];
		float 	fTemp218SE; // step: 2288
		float 	fVec362SE[2];
		float 	fTemp219SE; // step: 2300
		float 	fVec361SE[3];
		float 	fTemp220SE; // step: 2320
		float 	fVec367SE[2];
		float 	fTemp221SE; // step: 2332
		float 	fVec366SE[3];
		float 	fTemp222SE; // step: 2340
		float 	fVec370SE[2];
		float 	fTemp223SE; // step: 2352
		float 	fVec369SE[3];
		float 	fTemp224SE; // step: 2372
		float 	fVec375SE[2];
		float 	fTemp225SE; // step: 2384
		float 	fVec374SE[3];
		float 	fTemp226SE; // step: 2402
		float 	fVec380SE[2];
		float 	fTemp227SE; // step: 2414
		float 	fVec379SE[3];
		float 	fTemp228SE; // step: 2424
		float 	fTemp229SE; // step: 2436
		float 	fVec385SE[2];
		float 	fTemp230SE; // step: 2451
		float 	fVec384SE[3];
		float 	fTemp231SE; // step: 2471
		float 	fVec390SE[2];
		float 	fTemp232SE; // step: 2483
		float 	fVec389SE[3];
		float 	fTemp233SE; // step: 2503
		float 	fVec395SE[2];
		float 	fTemp234SE; // step: 2515
		float 	fVec394SE[3];
		float 	fTemp235SE; // step: 2523
		float 	fVec398SE[2];
		float 	fTemp236SE; // step: 2535
		float 	fVec397SE[3];
		float 	fTemp237SE; // step: 2555
		float 	fVec403SE[2];
		float 	fTemp238SE; // step: 2567
		float 	fVec402SE[3];
		float 	fTemp239SE; // step: 2585
		float 	fVec408SE[2];
		float 	fTemp240SE; // step: 2597
		float 	fVec407SE[3];
		float 	fTemp241SE; // step: 2607
		float 	fTemp242SE; // step: 2619
		float 	fVec413SE[2];
		float 	fTemp243SE; // step: 2634
		float 	fVec412SE[3];
		float 	fTemp244SE; // step: 2654
		float 	fVec418SE[2];
		float 	fTemp245SE; // step: 2666
		float 	fVec417SE[3];
		float 	fTemp246SE; // step: 2686
		float 	fVec423SE[2];
		float 	fTemp247SE; // step: 2698
		float 	fVec422SE[3];
		float 	fTemp248SE; // step: 2706
		float 	fVec426SE[2];
		float 	fTemp249SE; // step: 2718
		float 	fVec425SE[3];
		float 	fTemp250SE; // step: 2738
		float 	fVec431SE[2];
		float 	fTemp251SE; // step: 2750
		float 	fVec430SE[3];
		float 	fTemp252SE; // step: 2768
		float 	fVec436SE[2];
		float 	fTemp253SE; // step: 2780
		float 	fVec435SE[3];
		float 	fTemp254SE; // step: 2790
		float 	fTemp255SE; // step: 2802
		float 	fVec441SE[2];
		float 	fTemp256SE; // step: 2817
		float 	fVec440SE[3];
		float 	fTemp257SE; // step: 2837
		float 	fVec446SE[2];
		float 	fTemp258SE; // step: 2849
		float 	fVec445SE[3];
		float 	fTemp259SE; // step: 2869
		float 	fVec451SE[2];
		float 	fTemp260SE; // step: 2881
		float 	fVec450SE[3];
		float 	fTemp261SE; // step: 2889
		float 	fVec454SE[2];
		float 	fTemp262SE; // step: 2901
		float 	fVec453SE[3];
		float 	fTemp263SE; // step: 2921
		float 	fVec459SE[2];
		float 	fTemp264SE; // step: 2933
		float 	fVec458SE[3];
		float 	fTemp265SE; // step: 2951
		float 	fVec464SE[2];
		float 	fTemp266SE; // step: 2963
		float 	fVec463SE[3];
		float 	fTemp267SE; // step: 2973
		float 	fTemp268SE; // step: 2985
		float 	fVec469SE[2];
		float 	fTemp269SE; // step: 3000
		float 	fVec468SE[3];
		float 	fTemp270SE; // step: 3020
		float 	fVec474SE[2];
		float 	fTemp271SE; // step: 3032
		float 	fVec473SE[3];
		float 	fTemp272SE; // step: 3052
		float 	fVec479SE[2];
		float 	fTemp273SE; // step: 3064
		float 	fVec478SE[3];
		float 	fTemp274SE; // step: 3072
		float 	fVec482SE[2];
		float 	fTemp275SE; // step: 3084
		float 	fVec481SE[3];
		float 	fTemp276SE; // step: 3104
		float 	fVec487SE[2];
		float 	fTemp277SE; // step: 3116
		float 	fVec486SE[3];
		float 	fTemp278SE; // step: 3134
		float 	fVec492SE[2];
		float 	fTemp279SE; // step: 3146
		float 	fVec491SE[3];
		float 	fTemp280SE; // step: 3156
		float 	fTemp281SE; // step: 3168
		float 	fVec497SE[2];
		float 	fTemp282SE; // step: 3183
		float 	fVec496SE[3];
		float 	fTemp283SE; // step: 3203
		float 	fVec502SE[2];
		float 	fTemp284SE; // step: 3215
		float 	fVec501SE[3];
		float 	fTemp285SE; // step: 3235
		float 	fVec507SE[2];
		float 	fTemp286SE; // step: 3247
		float 	fVec506SE[3];
		float 	fTemp287SE; // step: 3255
		float 	fVec510SE[2];
		float 	fTemp288SE; // step: 3267
		float 	fVec509SE[3];
		float 	fTemp289SE; // step: 3287
		float 	fVec515SE[2];
		float 	fTemp290SE; // step: 3299
		float 	fVec514SE[3];
		float 	fTemp291SE; // step: 3317
		float 	fVec520SE[2];
		float 	fTemp292SE; // step: 3329
		float 	fVec519SE[3];
		float 	fSlow48BE = float(fslider19); // Zone 2, step: 3333
		float 	fSlow49BE = (fConst495KI / float(fslider20)); // Zone 2, step: 3336
		float 	fSlow50BE = ((1) ? expf(-fSlow49BE) : 0.0f); // Zone 2, step: 3339
		float 	fSlow51BE = (1.0f + -(expf(-fSlow49BE)) /* Sum */); // Zone 2, step: 3360
		float 	fVec522SE[2];
		float 	fSlow52SE;
		float 	fVec526SE[2];
		float 	fSlow53SE;
		float 	fVec530SE[2];
		float 	fSlow54SE;
		float 	fVec534SE[2];
		float 	fSlow55SE;
		float 	fVec538SE[2];
		float 	fSlow56SE;
		float 	fVec542SE[2];
		float 	fSlow57SE;
		float 	fVec546SE[2];
		float 	fSlow58SE;
		float 	fVec550SE[2];
		float 	fSlow59SE;
		float 	fVec554SE[2];
		float 	fSlow60SE;
		float 	fVec558SE[2];
		float 	fSlow61SE;
		float 	fVec562SE[2];
		float 	fSlow62SE;
		float 	fVec566SE[2];
		float 	fSlow63SE;
		float 	fVec570SE[2];
		float 	fSlow64SE;
		float 	fVec574SE[2];
		float 	fSlow65SE;
		float 	fVec578SE[2];
		float 	fSlow66SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec11SE[1] = fVec11SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec16SE[1] = fVec16SEState;
		fVec17SE[1] = fVec17SEState;
		fVec19SE[1] = fVec19SEState;
		fVec20SE[1] = fVec20SEState;
		fVec21SE[1] = fVec21SEState;
		fVec23SE[1] = fVec23SEState;
		fVec25SE[1] = fVec25SEState;
		fVec26SE[1] = fVec26SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec33SE[1] = fVec33SEState;
		fVec34SE[1] = fVec34SEState;
		fVec35SE[1] = fVec35SEState;
		fVec37SE[1] = fVec37SEState;
		fVec39SE[1] = fVec39SEState;
		fVec40SE[1] = fVec40SEState;
		fVec42SE[1] = fVec42SEState;
		fVec44SE[1] = fVec44SEState;
		iVec45SI[1] = iVec45SIState;
		fVec48SI[1] = fVec48SIState;
		fVec47SI[1] = fVec47SIState[0];
		fVec47SI[2] = fVec47SIState[1];
		fVec47SI[3] = fVec47SIState[2];
		fVec51SE[1] = fVec51SEState;
		fVec67SE[1] = fVec67SEState;
		fVec68SE[1] = fVec68SEState;
		fVec71SE[1] = fVec71SEState;
		fVec82SE[1] = fVec82SEState;
		fVec80SE[1] = fVec80SEState;
		fVec84SE[1] = fVec84SEState[0];
		fVec84SE[2] = fVec84SEState[1];
		fVec89SE[1] = fVec89SEState;
		fVec87SE[1] = fVec87SEState[0];
		fVec87SE[2] = fVec87SEState[1];
		fVec94SE[1] = fVec94SEState;
		fVec92SE[1] = fVec92SEState[0];
		fVec92SE[2] = fVec92SEState[1];
		fVec99SE[1] = fVec99SEState;
		fVec97SE[1] = fVec97SEState[0];
		fVec97SE[2] = fVec97SEState[1];
		fVec101SE[1] = fVec101SEState;
		fVec81SE[1] = fVec81SEState;
		fVec107SE[1] = fVec107SEState;
		fVec109SE[1] = fVec109SEState[0];
		fVec109SE[2] = fVec109SEState[1];
		fVec114SE[1] = fVec114SEState;
		fVec112SE[1] = fVec112SEState[0];
		fVec112SE[2] = fVec112SEState[1];
		fVec119SE[1] = fVec119SEState;
		fVec117SE[1] = fVec117SEState[0];
		fVec117SE[2] = fVec117SEState[1];
		fVec124SE[1] = fVec124SEState;
		fVec122SE[1] = fVec122SEState[0];
		fVec122SE[2] = fVec122SEState[1];
		fVec79SE[1] = fVec79SEState;
		fVec106SE[1] = fVec106SEState;
		fVec133SE[1] = fVec133SEState;
		fVec132SE[1] = fVec132SEState[0];
		fVec132SE[2] = fVec132SEState[1];
		fVec138SE[1] = fVec138SEState;
		fVec137SE[1] = fVec137SEState[0];
		fVec137SE[2] = fVec137SEState[1];
		fVec143SE[1] = fVec143SEState;
		fVec142SE[1] = fVec142SEState[0];
		fVec142SE[2] = fVec142SEState[1];
		fVec146SE[1] = fVec146SEState;
		fVec145SE[1] = fVec145SEState[0];
		fVec145SE[2] = fVec145SEState[1];
		fVec151SE[1] = fVec151SEState;
		fVec150SE[1] = fVec150SEState[0];
		fVec150SE[2] = fVec150SEState[1];
		fVec156SE[1] = fVec156SEState;
		fVec155SE[1] = fVec155SEState[0];
		fVec155SE[2] = fVec155SEState[1];
		fVec161SE[1] = fVec161SEState;
		fVec160SE[1] = fVec160SEState[0];
		fVec160SE[2] = fVec160SEState[1];
		fVec166SE[1] = fVec166SEState;
		fVec165SE[1] = fVec165SEState[0];
		fVec165SE[2] = fVec165SEState[1];
		fVec171SE[1] = fVec171SEState;
		fVec170SE[1] = fVec170SEState[0];
		fVec170SE[2] = fVec170SEState[1];
		fVec174SE[1] = fVec174SEState;
		fVec173SE[1] = fVec173SEState[0];
		fVec173SE[2] = fVec173SEState[1];
		fVec179SE[1] = fVec179SEState;
		fVec178SE[1] = fVec178SEState[0];
		fVec178SE[2] = fVec178SEState[1];
		fVec184SE[1] = fVec184SEState;
		fVec183SE[1] = fVec183SEState[0];
		fVec183SE[2] = fVec183SEState[1];
		fVec189SE[1] = fVec189SEState;
		fVec188SE[1] = fVec188SEState[0];
		fVec188SE[2] = fVec188SEState[1];
		fVec194SE[1] = fVec194SEState;
		fVec193SE[1] = fVec193SEState[0];
		fVec193SE[2] = fVec193SEState[1];
		fVec199SE[1] = fVec199SEState;
		fVec198SE[1] = fVec198SEState[0];
		fVec198SE[2] = fVec198SEState[1];
		fVec202SE[1] = fVec202SEState;
		fVec201SE[1] = fVec201SEState[0];
		fVec201SE[2] = fVec201SEState[1];
		fVec207SE[1] = fVec207SEState;
		fVec206SE[1] = fVec206SEState[0];
		fVec206SE[2] = fVec206SEState[1];
		fVec212SE[1] = fVec212SEState;
		fVec211SE[1] = fVec211SEState[0];
		fVec211SE[2] = fVec211SEState[1];
		fVec217SE[1] = fVec217SEState;
		fVec216SE[1] = fVec216SEState[0];
		fVec216SE[2] = fVec216SEState[1];
		fVec222SE[1] = fVec222SEState;
		fVec221SE[1] = fVec221SEState[0];
		fVec221SE[2] = fVec221SEState[1];
		fVec227SE[1] = fVec227SEState;
		fVec226SE[1] = fVec226SEState[0];
		fVec226SE[2] = fVec226SEState[1];
		fVec230SE[1] = fVec230SEState;
		fVec229SE[1] = fVec229SEState[0];
		fVec229SE[2] = fVec229SEState[1];
		fVec235SE[1] = fVec235SEState;
		fVec234SE[1] = fVec234SEState[0];
		fVec234SE[2] = fVec234SEState[1];
		fVec240SE[1] = fVec240SEState;
		fVec239SE[1] = fVec239SEState[0];
		fVec239SE[2] = fVec239SEState[1];
		fVec245SE[1] = fVec245SEState;
		fVec244SE[1] = fVec244SEState[0];
		fVec244SE[2] = fVec244SEState[1];
		fVec250SE[1] = fVec250SEState;
		fVec249SE[1] = fVec249SEState[0];
		fVec249SE[2] = fVec249SEState[1];
		fVec255SE[1] = fVec255SEState;
		fVec254SE[1] = fVec254SEState[0];
		fVec254SE[2] = fVec254SEState[1];
		fVec258SE[1] = fVec258SEState;
		fVec257SE[1] = fVec257SEState[0];
		fVec257SE[2] = fVec257SEState[1];
		fVec263SE[1] = fVec263SEState;
		fVec262SE[1] = fVec262SEState[0];
		fVec262SE[2] = fVec262SEState[1];
		fVec268SE[1] = fVec268SEState;
		fVec267SE[1] = fVec267SEState[0];
		fVec267SE[2] = fVec267SEState[1];
		fVec273SE[1] = fVec273SEState;
		fVec272SE[1] = fVec272SEState[0];
		fVec272SE[2] = fVec272SEState[1];
		fVec278SE[1] = fVec278SEState;
		fVec277SE[1] = fVec277SEState[0];
		fVec277SE[2] = fVec277SEState[1];
		fVec283SE[1] = fVec283SEState;
		fVec282SE[1] = fVec282SEState[0];
		fVec282SE[2] = fVec282SEState[1];
		fVec286SE[1] = fVec286SEState;
		fVec285SE[1] = fVec285SEState[0];
		fVec285SE[2] = fVec285SEState[1];
		fVec291SE[1] = fVec291SEState;
		fVec290SE[1] = fVec290SEState[0];
		fVec290SE[2] = fVec290SEState[1];
		fVec296SE[1] = fVec296SEState;
		fVec295SE[1] = fVec295SEState[0];
		fVec295SE[2] = fVec295SEState[1];
		fVec301SE[1] = fVec301SEState;
		fVec300SE[1] = fVec300SEState[0];
		fVec300SE[2] = fVec300SEState[1];
		fVec306SE[1] = fVec306SEState;
		fVec305SE[1] = fVec305SEState[0];
		fVec305SE[2] = fVec305SEState[1];
		fVec311SE[1] = fVec311SEState;
		fVec310SE[1] = fVec310SEState[0];
		fVec310SE[2] = fVec310SEState[1];
		fVec314SE[1] = fVec314SEState;
		fVec313SE[1] = fVec313SEState[0];
		fVec313SE[2] = fVec313SEState[1];
		fVec319SE[1] = fVec319SEState;
		fVec318SE[1] = fVec318SEState[0];
		fVec318SE[2] = fVec318SEState[1];
		fVec324SE[1] = fVec324SEState;
		fVec323SE[1] = fVec323SEState[0];
		fVec323SE[2] = fVec323SEState[1];
		fVec329SE[1] = fVec329SEState;
		fVec328SE[1] = fVec328SEState[0];
		fVec328SE[2] = fVec328SEState[1];
		fVec334SE[1] = fVec334SEState;
		fVec333SE[1] = fVec333SEState[0];
		fVec333SE[2] = fVec333SEState[1];
		fVec339SE[1] = fVec339SEState;
		fVec338SE[1] = fVec338SEState[0];
		fVec338SE[2] = fVec338SEState[1];
		fVec342SE[1] = fVec342SEState;
		fVec341SE[1] = fVec341SEState[0];
		fVec341SE[2] = fVec341SEState[1];
		fVec347SE[1] = fVec347SEState;
		fVec346SE[1] = fVec346SEState[0];
		fVec346SE[2] = fVec346SEState[1];
		fVec352SE[1] = fVec352SEState;
		fVec351SE[1] = fVec351SEState[0];
		fVec351SE[2] = fVec351SEState[1];
		fVec357SE[1] = fVec357SEState;
		fVec356SE[1] = fVec356SEState[0];
		fVec356SE[2] = fVec356SEState[1];
		fVec362SE[1] = fVec362SEState;
		fVec361SE[1] = fVec361SEState[0];
		fVec361SE[2] = fVec361SEState[1];
		fVec367SE[1] = fVec367SEState;
		fVec366SE[1] = fVec366SEState[0];
		fVec366SE[2] = fVec366SEState[1];
		fVec370SE[1] = fVec370SEState;
		fVec369SE[1] = fVec369SEState[0];
		fVec369SE[2] = fVec369SEState[1];
		fVec375SE[1] = fVec375SEState;
		fVec374SE[1] = fVec374SEState[0];
		fVec374SE[2] = fVec374SEState[1];
		fVec380SE[1] = fVec380SEState;
		fVec379SE[1] = fVec379SEState[0];
		fVec379SE[2] = fVec379SEState[1];
		fVec385SE[1] = fVec385SEState;
		fVec384SE[1] = fVec384SEState[0];
		fVec384SE[2] = fVec384SEState[1];
		fVec390SE[1] = fVec390SEState;
		fVec389SE[1] = fVec389SEState[0];
		fVec389SE[2] = fVec389SEState[1];
		fVec395SE[1] = fVec395SEState;
		fVec394SE[1] = fVec394SEState[0];
		fVec394SE[2] = fVec394SEState[1];
		fVec398SE[1] = fVec398SEState;
		fVec397SE[1] = fVec397SEState[0];
		fVec397SE[2] = fVec397SEState[1];
		fVec403SE[1] = fVec403SEState;
		fVec402SE[1] = fVec402SEState[0];
		fVec402SE[2] = fVec402SEState[1];
		fVec408SE[1] = fVec408SEState;
		fVec407SE[1] = fVec407SEState[0];
		fVec407SE[2] = fVec407SEState[1];
		fVec413SE[1] = fVec413SEState;
		fVec412SE[1] = fVec412SEState[0];
		fVec412SE[2] = fVec412SEState[1];
		fVec418SE[1] = fVec418SEState;
		fVec417SE[1] = fVec417SEState[0];
		fVec417SE[2] = fVec417SEState[1];
		fVec423SE[1] = fVec423SEState;
		fVec422SE[1] = fVec422SEState[0];
		fVec422SE[2] = fVec422SEState[1];
		fVec426SE[1] = fVec426SEState;
		fVec425SE[1] = fVec425SEState[0];
		fVec425SE[2] = fVec425SEState[1];
		fVec431SE[1] = fVec431SEState;
		fVec430SE[1] = fVec430SEState[0];
		fVec430SE[2] = fVec430SEState[1];
		fVec436SE[1] = fVec436SEState;
		fVec435SE[1] = fVec435SEState[0];
		fVec435SE[2] = fVec435SEState[1];
		fVec441SE[1] = fVec441SEState;
		fVec440SE[1] = fVec440SEState[0];
		fVec440SE[2] = fVec440SEState[1];
		fVec446SE[1] = fVec446SEState;
		fVec445SE[1] = fVec445SEState[0];
		fVec445SE[2] = fVec445SEState[1];
		fVec451SE[1] = fVec451SEState;
		fVec450SE[1] = fVec450SEState[0];
		fVec450SE[2] = fVec450SEState[1];
		fVec454SE[1] = fVec454SEState;
		fVec453SE[1] = fVec453SEState[0];
		fVec453SE[2] = fVec453SEState[1];
		fVec459SE[1] = fVec459SEState;
		fVec458SE[1] = fVec458SEState[0];
		fVec458SE[2] = fVec458SEState[1];
		fVec464SE[1] = fVec464SEState;
		fVec463SE[1] = fVec463SEState[0];
		fVec463SE[2] = fVec463SEState[1];
		fVec469SE[1] = fVec469SEState;
		fVec468SE[1] = fVec468SEState[0];
		fVec468SE[2] = fVec468SEState[1];
		fVec474SE[1] = fVec474SEState;
		fVec473SE[1] = fVec473SEState[0];
		fVec473SE[2] = fVec473SEState[1];
		fVec479SE[1] = fVec479SEState;
		fVec478SE[1] = fVec478SEState[0];
		fVec478SE[2] = fVec478SEState[1];
		fVec482SE[1] = fVec482SEState;
		fVec481SE[1] = fVec481SEState[0];
		fVec481SE[2] = fVec481SEState[1];
		fVec487SE[1] = fVec487SEState;
		fVec486SE[1] = fVec486SEState[0];
		fVec486SE[2] = fVec486SEState[1];
		fVec492SE[1] = fVec492SEState;
		fVec491SE[1] = fVec491SEState[0];
		fVec491SE[2] = fVec491SEState[1];
		fVec497SE[1] = fVec497SEState;
		fVec496SE[1] = fVec496SEState[0];
		fVec496SE[2] = fVec496SEState[1];
		fVec502SE[1] = fVec502SEState;
		fVec501SE[1] = fVec501SEState[0];
		fVec501SE[2] = fVec501SEState[1];
		fVec507SE[1] = fVec507SEState;
		fVec506SE[1] = fVec506SEState[0];
		fVec506SE[2] = fVec506SEState[1];
		fVec510SE[1] = fVec510SEState;
		fVec509SE[1] = fVec509SEState[0];
		fVec509SE[2] = fVec509SEState[1];
		fVec515SE[1] = fVec515SEState;
		fVec514SE[1] = fVec514SEState[0];
		fVec514SE[2] = fVec514SEState[1];
		fVec520SE[1] = fVec520SEState;
		fVec519SE[1] = fVec519SEState[0];
		fVec519SE[2] = fVec519SEState[1];
		fVec522SE[1] = fVec522SEState;
		fVec526SE[1] = fVec526SEState;
		fVec530SE[1] = fVec530SEState;
		fVec534SE[1] = fVec534SEState;
		fVec538SE[1] = fVec538SEState;
		fVec542SE[1] = fVec542SEState;
		fVec546SE[1] = fVec546SEState;
		fVec550SE[1] = fVec550SEState;
		fVec554SE[1] = fVec554SEState;
		fVec558SE[1] = fVec558SEState;
		fVec562SE[1] = fVec562SEState;
		fVec566SE[1] = fVec566SEState;
		fVec570SE[1] = fVec570SEState;
		fVec574SE[1] = fVec574SEState;
		fVec578SE[1] = fVec578SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fTemp10SE = ((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE); // step: 69
			fVec9SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE); // step: 74
			fVec11SE[0] = fTemp11SE;
			fTemp12SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 77
			fVec12SE[0] = fTemp12SE;
			fTemp13SE = ((fTemp12SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp13SE;
			fTemp14SE = ((fTemp13SE + -fVec14SE[1] /* Sum */) / fTemp2SE); // step: 87
			fVec16SE[0] = fTemp14SE;
			fTemp15SE = fVec17SE[1]; // step: 90
			fTemp16SE = std::max(2e+01f, fabsf((fSlow2BE * fTemp1SE))); // step: 98
			fTemp17SE = (fConst1KI * fTemp16SE); // step: 99
			fVec17SE[0] = (fTemp15SE + fTemp17SE + -floorf((fTemp15SE + fTemp17SE /* Sum */)) /* Sum */);
			fTemp18SE = fVec17SE[0]; // step: 105
			fTemp19SE = (2.0f * fTemp18SE); // step: 106
			fTemp20SE = (fTemp19SE + -1.0f /* Sum */); // step: 107
			fTemp21SE = powf(fTemp20SE,2.0f); // step: 108
			fVec19SE[0] = fTemp21SE;
			fTemp22SE = powf(fTemp20SE,3.0f); // step: 110
			fTemp23SE = (-2.0f * fTemp18SE); // step: 111
			fVec20SE[0] = (fTemp22SE + 1.0f + fTemp23SE /* Sum */);
			fVec21SE[0] = (fTemp22SE + 1.0f + -fTemp19SE /* Sum */);
			fTemp24SE = ((fTemp22SE + 1.0f + fTemp23SE + -fVec21SE[1] /* Sum */) / fTemp16SE); // step: 120
			fVec23SE[0] = fTemp24SE;
			fTemp25SE = ((fTemp22SE + 1.0f + -fTemp19SE + -fVec20SE[1] /* Sum */) / fTemp16SE); // step: 125
			fVec25SE[0] = fTemp25SE;
			fTemp26SE = (fTemp21SE * (fTemp21SE + -2.0f /* Sum */)); // step: 128
			fVec26SE[0] = fTemp26SE;
			fTemp27SE = ((fTemp26SE + -fVec26SE[1] /* Sum */) / fTemp16SE); // step: 133
			fVec28SE[0] = fTemp27SE;
			fTemp28SE = ((fTemp27SE + -fVec28SE[1] /* Sum */) / fTemp16SE); // step: 138
			fVec30SE[0] = fTemp28SE;
			fTemp29SE = fVec31SE[1]; // step: 141
			fTemp30SE = std::max(2e+01f, fabsf((fSlow3BE * fTemp1SE))); // step: 147
			fTemp31SE = (fConst1KI * fTemp30SE); // step: 148
			fVec31SE[0] = (fTemp29SE + fTemp31SE + -floorf((fTemp29SE + fTemp31SE /* Sum */)) /* Sum */);
			fTemp32SE = fVec31SE[0]; // step: 154
			fTemp33SE = (2.0f * fTemp32SE); // step: 155
			fTemp34SE = (fTemp33SE + -1.0f /* Sum */); // step: 156
			fTemp35SE = powf(fTemp34SE,2.0f); // step: 157
			fVec33SE[0] = fTemp35SE;
			fTemp36SE = powf(fTemp34SE,3.0f); // step: 159
			fTemp37SE = (-2.0f * fTemp32SE); // step: 160
			fVec34SE[0] = (fTemp36SE + 1.0f + fTemp37SE /* Sum */);
			fVec35SE[0] = (fTemp36SE + 1.0f + -fTemp33SE /* Sum */);
			fTemp38SE = ((fTemp36SE + 1.0f + fTemp37SE + -fVec35SE[1] /* Sum */) / fTemp30SE); // step: 169
			fVec37SE[0] = fTemp38SE;
			fTemp39SE = ((fTemp36SE + 1.0f + -fTemp33SE + -fVec34SE[1] /* Sum */) / fTemp30SE); // step: 174
			fVec39SE[0] = fTemp39SE;
			fTemp40SE = (fTemp35SE * (fTemp35SE + -2.0f /* Sum */)); // step: 177
			fVec40SE[0] = fTemp40SE;
			fTemp41SE = ((fTemp40SE + -fVec40SE[1] /* Sum */) / fTemp30SE); // step: 182
			fVec42SE[0] = fTemp41SE;
			fTemp42SE = ((fTemp41SE + -fVec42SE[1] /* Sum */) / fTemp30SE); // step: 187
			fVec44SE[0] = fTemp42SE;
			iVec45SI[0] = ((1103515245 * iVec45SI[1]) + 12345 /* Sum */);
			fTemp43SI = (4.656613e-10f * float(iVec45SI[0])); // step: 199
			fTemp44SI = fVec47SI[3]; // step: 202
			fTemp45SI = fVec47SI[2]; // step: 210
			fVec48SI[0] = ((0.5221894f * fTemp44SI) + fTemp43SI + (2.494956f * fVec48SI[1]) + (-2.0172658f * fTemp45SI) /* Sum */);
			fTemp46SI = fVec48SI[0]; // step: 214
			fVec47SI[0] = fTemp46SI;
			fVec51SE[0] = (fSlow7BE + (0.999f * fVec51SE[1]) /* Sum */);
			fTemp47SE = fVec51SE[0]; // step: 238
			fTemp48SE = (float)input0[i]; // step: 240
			iTemp49SC = iVec0KC[1]; // step: 254
			fTemp50SC = float(iTemp49SC); // step: 255
			fTemp51SE = ((iSlow12BE) ? (fConst2KI * ((fTemp50SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE); // step: 262
			fTemp52SC = float(iVec0KC[2]); // step: 268
			fTemp53SC = float(iVec0KC[3]); // step: 279
			fTemp54SE = (fConst4KI * ((fTemp53SC * (fTemp14SE + -fVec16SE[1] /* Sum */)) / fTemp2SE)); // step: 285
			fTemp55SE = ((iSlow12BE) ? (fConst2KI * ((fTemp50SC * (fTemp21SE + -fVec19SE[1] /* Sum */)) / fTemp16SE)) : fTemp20SE); // step: 294
			fTemp56SE = (fConst4KI * ((fTemp53SC * (fTemp28SE + -fVec30SE[1] /* Sum */)) / fTemp16SE)); // step: 306
			fTemp57SE = ((iSlow12BE) ? (fConst2KI * ((fTemp50SC * (fTemp35SE + -fVec33SE[1] /* Sum */)) / fTemp30SE)) : fTemp34SE); // step: 315
			fTemp58SE = (fConst4KI * ((fTemp53SC * (fTemp42SE + -fVec44SE[1] /* Sum */)) / fTemp30SE)); // step: 327
			fTemp59SI = (0.049922034f * fVec48SI[0]); // step: 337
			fTemp60SI = (0.0506127f * fTemp45SI); // step: 339
			fTemp61SI = fVec47SI[1]; // step: 341
			fTemp62SE = (fTemp47SE * ((iSlow8BE) ? fTemp48SE : ((iSlow9BE) ? ((iSlow14BE) ? (fTemp59SI + fTemp60SI + (-0.095993534f * fTemp61SI) + (-0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow11BE) ? ((iSlow13BE) ? fTemp54SE : (fConst3KI * ((fTemp52SC * (fTemp10SE + -fVec11SE[1] /* Sum */)) / fTemp2SE))) : fTemp51SE) + ((iSlow11BE) ? ((iSlow13BE) ? fTemp56SE : (fConst3KI * ((fTemp52SC * (fTemp24SE + -fVec25SE[1] /* Sum */)) / fTemp16SE))) : fTemp55SE) + ((iSlow11BE) ? ((iSlow13BE) ? fTemp58SE : (fConst3KI * ((fTemp52SC * (fTemp38SE + -fVec39SE[1] /* Sum */)) / fTemp30SE))) : fTemp57SE) /* Sum */)))))); // step: 349
			fTemp63SE = ((iSlow6BE) ? 0.0f : fTemp62SE); // step: 354
			fTemp64SE = fVec67SE[1]; // step: 363
			fTemp65SC = float((1 + -iTemp49SC /* Sum */)); // step: 367
			fTemp66SE = fVec68SE[1]; // step: 370
			fVec67SE[0] = ((fSlow17BE * fTemp64SE) + fTemp65SC + -(fSlow18BE * fTemp66SE) /* Sum */);
			fTemp67SE = fVec67SE[0]; // step: 375
			fVec68SE[0] = ((fSlow18BE * fTemp64SE) + (fSlow17BE * fTemp66SE) /* Sum */);
			fTemp68SE = fVec68SE[0]; // step: 380
			fSlow19SE = (fTemp67SE + fTemp68SE /* Sum */);
			fTemp69SE = ((iSlow6BE) ? 0.0f : (fTemp47SE * ((iSlow8BE) ? fTemp48SE : ((iSlow9BE) ? ((iSlow14BE) ? (fTemp59SI + fTemp60SI + -(0.095993534f * fTemp61SI) + -(0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow11BE) ? ((iSlow13BE) ? fTemp54SE : (fConst3KI * ((fTemp52SC * (fTemp11SE + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : fTemp51SE) + ((iSlow11BE) ? ((iSlow13BE) ? fTemp56SE : (fConst3KI * ((fTemp52SC * (fTemp25SE + -fVec23SE[1] /* Sum */)) / fTemp16SE))) : fTemp55SE) + ((iSlow11BE) ? ((iSlow13BE) ? fTemp58SE : (fConst3KI * ((fTemp52SC * (fTemp39SE + -fVec37SE[1] /* Sum */)) / fTemp30SE))) : fTemp57SE) /* Sum */))))))); // step: 434
			fTemp70SE = ((fSlow22BE * fVec71SE[1]) + -(fSlow15BE * fTemp69SE) /* Sum */); // step: 439
			fVec75SE[IOTA0&2047] = fTemp70SE;
			fTemp71SE = (fConst0KI * (fSlow23BE + (fSlow24BE * (fTemp68SE + 1.0f /* Sum */)) /* Sum */)); // step: 449
			iTemp72SE = int(fTemp71SE); // step: 450
			fTemp73SE = float(iTemp72SE); // step: 453
			fVec71SE[0] = ((fVec75SE[(IOTA0-(iTemp72SE & 2047))&2047] * (fTemp73SE + 1.0f + -fTemp71SE /* Sum */)) + ((fTemp71SE + -fTemp73SE /* Sum */) * fVec75SE[(IOTA0-((iTemp72SE + 1 /* Sum */) & 2047))&2047]) /* Sum */);
			fTemp74SE = ((iSlow6BE) ? fTemp62SE : (0.5f * ((fSlow15BE * fTemp63SE) + (fVec71SE[0] * fSlow21BE) /* Sum */))); // step: 469
			fTemp75SE = ((iSlow5BE) ? 0.0f : fTemp74SE); // step: 470
			fTemp76SE = fVec81SE[1]; // step: 504
			fTemp77SE = fVec82SE[1]; // step: 508
			fVec82SE[0] = ((fSlow35BE * fTemp76SE) + (fSlow36BE * fTemp77SE) /* Sum */);
			fTemp78SE = (fSlow32BE + -(fSlow33BE * (1.0f + -fVec82SE[0] /* Sum */)) /* Sum */); // step: 517
			fTemp79SE = cosf((fSlow30BE * fTemp78SE)); // step: 519
			fTemp80SE = fVec84SE[2]; // step: 525
			fVec80SE[0] = ((fSlow4BE * fTemp75SE) + (fSlow25BE * fVec79SE[1]) + (fSlow28BE * (fVec80SE[1] * fTemp79SE)) + -(fSlow38BE * fTemp80SE) /* Sum */);
			fTemp81SE = fVec80SE[0]; // step: 530
			fVec84SE[0] = fTemp81SE;
			fTemp82SE = fVec87SE[2]; // step: 533
			fTemp83SE = cosf((fSlow41BE * fTemp78SE)); // step: 545
			fVec89SE[0] = (fTemp80SE + (fSlow39BE * (fVec80SE[0] + -fTemp82SE /* Sum */)) + -(fSlow40BE * ((fTemp79SE * fVec84SE[1]) + -(fVec89SE[1] * fTemp83SE) /* Sum */)) /* Sum */);
			fTemp84SE = fVec89SE[0]; // step: 553
			fVec87SE[0] = fTemp84SE;
			fTemp85SE = fVec92SE[2]; // step: 555
			fTemp86SE = cosf((fSlow42BE * fTemp78SE)); // step: 566
			fVec94SE[0] = (fTemp82SE + (fSlow39BE * (fVec89SE[0] + -fTemp85SE /* Sum */)) + -(fSlow40BE * ((fTemp83SE * fVec87SE[1]) + -(fVec94SE[1] * fTemp86SE) /* Sum */)) /* Sum */);
			fTemp87SE = fVec94SE[0]; // step: 574
			fVec92SE[0] = fTemp87SE;
			fTemp88SE = fVec97SE[2]; // step: 576
			fTemp89SE = cosf((fSlow43BE * fTemp78SE)); // step: 587
			fVec99SE[0] = (fTemp85SE + (fSlow39BE * (fVec94SE[0] + -fTemp88SE /* Sum */)) + -(fSlow40BE * ((fTemp86SE * fVec92SE[1]) + -(fVec99SE[1] * fTemp89SE) /* Sum */)) /* Sum */);
			fTemp90SE = fVec99SE[0]; // step: 595
			fVec97SE[0] = fTemp90SE;
			fTemp91SE = ((fSlow22BE * fVec101SE[1]) + -(fSlow15BE * fTemp69SE) /* Sum */); // step: 603
			fVec102SE[IOTA0&2047] = fTemp91SE;
			fTemp92SE = (fConst0KI * (fSlow23BE + (fSlow24BE * (fTemp67SE + 1.0f /* Sum */)) /* Sum */)); // step: 607
			iTemp93SE = int(fTemp92SE); // step: 608
			fTemp94SE = float(iTemp93SE); // step: 611
			fVec101SE[0] = ((fVec102SE[(IOTA0-(iTemp93SE & 2047))&2047] * (fTemp94SE + 1.0f + -fTemp92SE /* Sum */)) + ((fTemp92SE + -fTemp94SE /* Sum */) * fVec102SE[(IOTA0-((iTemp93SE + 1 /* Sum */) & 2047))&2047]) /* Sum */);
			fTemp95SE = ((iSlow6BE) ? fTemp62SE : (0.5f * ((fSlow15BE * fTemp63SE) + (fVec101SE[0] * fSlow21BE) /* Sum */))); // step: 627
			fTemp96SE = ((iSlow5BE) ? 0.0f : fTemp95SE); // step: 628
			fVec81SE[0] = (fTemp65SC + (fSlow36BE * fTemp76SE) + -(fSlow35BE * fTemp77SE) /* Sum */);
			fTemp97SE = (fSlow32BE + -(fSlow33BE * (1.0f + -fVec81SE[0] /* Sum */)) /* Sum */); // step: 645
			fTemp98SE = cosf((fSlow30BE * fTemp97SE)); // step: 647
			fTemp99SE = fVec109SE[2]; // step: 650
			fVec107SE[0] = ((fSlow4BE * fTemp96SE) + (fSlow25BE * fVec106SE[1]) + (fSlow28BE * (fVec107SE[1] * fTemp98SE)) + -(fSlow38BE * fTemp99SE) /* Sum */);
			fTemp100SE = fVec107SE[0]; // step: 655
			fVec109SE[0] = fTemp100SE;
			fTemp101SE = fVec112SE[2]; // step: 657
			fTemp102SE = cosf((fSlow41BE * fTemp97SE)); // step: 666
			fVec114SE[0] = (fTemp99SE + (fSlow39BE * (fVec107SE[0] + -fTemp101SE /* Sum */)) + -(fSlow40BE * ((fTemp98SE * fVec109SE[1]) + -(fVec114SE[1] * fTemp102SE) /* Sum */)) /* Sum */);
			fTemp103SE = fVec114SE[0]; // step: 674
			fVec112SE[0] = fTemp103SE;
			fTemp104SE = fVec117SE[2]; // step: 676
			fTemp105SE = cosf((fSlow42BE * fTemp97SE)); // step: 685
			fVec119SE[0] = (fTemp101SE + (fSlow39BE * (fVec114SE[0] + -fTemp104SE /* Sum */)) + -(fSlow40BE * ((fTemp102SE * fVec112SE[1]) + -(fVec119SE[1] * fTemp105SE) /* Sum */)) /* Sum */);
			fTemp106SE = fVec119SE[0]; // step: 693
			fVec117SE[0] = fTemp106SE;
			fTemp107SE = fVec122SE[2]; // step: 695
			fTemp108SE = cosf((fSlow43BE * fTemp97SE)); // step: 704
			fVec124SE[0] = (fTemp104SE + (fSlow39BE * (fVec119SE[0] + -fTemp107SE /* Sum */)) + -(fSlow40BE * ((fTemp105SE * fVec117SE[1]) + -(fVec124SE[1] * fTemp108SE) /* Sum */)) /* Sum */);
			fTemp109SE = fVec124SE[0]; // step: 712
			fVec122SE[0] = fTemp109SE;
			fVec79SE[0] = (fTemp88SE + (fSlow39BE * fVec99SE[0]) + -(fSlow40BE * (fTemp89SE * fVec97SE[1])) /* Sum */);
			fTemp110SE = ((iSlow5BE) ? fTemp74SE : ((fSlow4BE * (fTemp75SE * fSlow45BE)) + (fVec79SE[0] * fSlow47BE) /* Sum */)); // step: 738
			fVec106SE[0] = (fTemp107SE + (fSlow39BE * fVec124SE[0]) + -(fSlow40BE * (fTemp108SE * fVec122SE[1])) /* Sum */);
			fTemp111SE = ((iSlow5BE) ? fTemp95SE : ((fSlow4BE * (fSlow45BE * fTemp96SE)) + (fVec106SE[0] * fSlow47BE) /* Sum */)); // step: 752
			fTemp112SE = fVec132SE[2]; // step: 767
			fVec133SE[0] = (fTemp110SE + fTemp111SE + -(fConst9KI * ((fConst10KI * fTemp112SE) + (fConst13KI * fVec133SE[1]) /* Sum */)) /* Sum */);
			fTemp113SE = fVec133SE[0]; // step: 782
			fVec132SE[0] = fTemp113SE;
			fTemp114SE = fVec137SE[2]; // step: 807
			fVec138SE[0] = ((fConst9KI * ((fConst15KI * fVec133SE[0]) + (fConst16KI * fVec132SE[1]) + (fConst15KI * fTemp112SE) /* Sum */)) + -(fConst17KI * ((fConst18KI * fTemp114SE) + (fConst19KI * fVec138SE[1]) /* Sum */)) /* Sum */);
			fTemp115SE = fVec138SE[0]; // step: 819
			fVec137SE[0] = fTemp115SE;
			fTemp116SE = fVec142SE[2]; // step: 843
			fVec143SE[0] = ((fConst17KI * ((fConst21KI * fVec138SE[0]) + (fConst22KI * fVec137SE[1]) + (fConst21KI * fTemp114SE) /* Sum */)) + -(fConst23KI * ((fConst24KI * fTemp116SE) + (fConst25KI * fVec143SE[1]) /* Sum */)) /* Sum */);
			fTemp117SE = fVec143SE[0]; // step: 855
			fVec142SE[0] = fTemp117SE;
			fTemp118SE = fVec145SE[2]; // step: 866
			fVec146SE[0] = (fTemp110SE + fTemp111SE + -(fConst26KI * ((fConst27KI * fTemp118SE) + (fConst28KI * fVec146SE[1]) /* Sum */)) /* Sum */);
			fTemp119SE = fVec146SE[0]; // step: 878
			fVec145SE[0] = fTemp119SE;
			fTemp120SE = fVec150SE[2]; // step: 903
			fVec151SE[0] = ((fConst26KI * ((fConst30KI * fVec146SE[0]) + (fConst31KI * fVec145SE[1]) + (fConst30KI * fTemp118SE) /* Sum */)) + -(fConst32KI * ((fConst33KI * fTemp120SE) + (fConst34KI * fVec151SE[1]) /* Sum */)) /* Sum */);
			fTemp121SE = fVec151SE[0]; // step: 915
			fVec150SE[0] = fTemp121SE;
			fTemp122SE = fVec155SE[2]; // step: 937
			fVec156SE[0] = ((fConst32KI * ((fConst35KI * fVec151SE[0]) + (fConst36KI * fVec150SE[1]) + (fConst35KI * fTemp120SE) /* Sum */)) + -(fConst37KI * ((fConst38KI * fTemp122SE) + (fConst39KI * fVec156SE[1]) /* Sum */)) /* Sum */);
			fTemp123SE = fVec156SE[0]; // step: 949
			fVec155SE[0] = fTemp123SE;
			fTemp124SE = (fConst37KI * ((fConst40KI * fVec156SE[0]) + (fConst41KI * fVec155SE[1]) + (fConst40KI * fTemp122SE) /* Sum */)); // step: 960
			fTemp125SE = fVec160SE[2]; // step: 972
			fVec161SE[0] = (fTemp124SE + -(fConst44KI * ((fConst45KI * fTemp125SE) + (fConst48KI * fVec161SE[1]) /* Sum */)) /* Sum */);
			fTemp126SE = fVec161SE[0]; // step: 987
			fVec160SE[0] = fTemp126SE;
			fTemp127SE = fVec165SE[2]; // step: 1007
			fVec166SE[0] = ((fConst44KI * ((fConst50KI * fVec161SE[0]) + (fConst51KI * fVec160SE[1]) + (fConst50KI * fTemp125SE) /* Sum */)) + -(fConst52KI * ((fConst53KI * fTemp127SE) + (fConst54KI * fVec166SE[1]) /* Sum */)) /* Sum */);
			fTemp128SE = fVec166SE[0]; // step: 1019
			fVec165SE[0] = fTemp128SE;
			fTemp129SE = fVec170SE[2]; // step: 1039
			fVec171SE[0] = ((fConst52KI * ((fConst56KI * fVec166SE[0]) + (fConst57KI * fVec165SE[1]) + (fConst56KI * fTemp127SE) /* Sum */)) + -(fConst58KI * ((fConst59KI * fTemp129SE) + (fConst60KI * fVec171SE[1]) /* Sum */)) /* Sum */);
			fTemp130SE = fVec171SE[0]; // step: 1051
			fVec170SE[0] = fTemp130SE;
			fTemp131SE = fVec173SE[2]; // step: 1059
			fVec174SE[0] = (fTemp124SE + -(fConst61KI * ((fConst62KI * fTemp131SE) + (fConst63KI * fVec174SE[1]) /* Sum */)) /* Sum */);
			fTemp132SE = fVec174SE[0]; // step: 1071
			fVec173SE[0] = fTemp132SE;
			fTemp133SE = fVec178SE[2]; // step: 1091
			fVec179SE[0] = ((fConst61KI * ((fConst65KI * fVec174SE[0]) + (fConst66KI * fVec173SE[1]) + (fConst65KI * fTemp131SE) /* Sum */)) + -(fConst67KI * ((fConst68KI * fTemp133SE) + (fConst69KI * fVec179SE[1]) /* Sum */)) /* Sum */);
			fTemp134SE = fVec179SE[0]; // step: 1103
			fVec178SE[0] = fTemp134SE;
			fTemp135SE = fVec183SE[2]; // step: 1121
			fVec184SE[0] = ((fConst67KI * ((fConst70KI * fVec179SE[0]) + (fConst71KI * fVec178SE[1]) + (fConst70KI * fTemp133SE) /* Sum */)) + -(fConst72KI * ((fConst73KI * fTemp135SE) + (fConst74KI * fVec184SE[1]) /* Sum */)) /* Sum */);
			fTemp136SE = fVec184SE[0]; // step: 1133
			fVec183SE[0] = fTemp136SE;
			fTemp137SE = (fConst72KI * ((fConst75KI * fVec184SE[0]) + (fConst76KI * fVec183SE[1]) + (fConst75KI * fTemp135SE) /* Sum */)); // step: 1143
			fTemp138SE = fVec188SE[2]; // step: 1155
			fVec189SE[0] = (fTemp137SE + -(fConst79KI * ((fConst80KI * fTemp138SE) + (fConst83KI * fVec189SE[1]) /* Sum */)) /* Sum */);
			fTemp139SE = fVec189SE[0]; // step: 1170
			fVec188SE[0] = fTemp139SE;
			fTemp140SE = fVec193SE[2]; // step: 1190
			fVec194SE[0] = ((fConst79KI * ((fConst85KI * fVec189SE[0]) + (fConst86KI * fVec188SE[1]) + (fConst85KI * fTemp138SE) /* Sum */)) + -(fConst87KI * ((fConst88KI * fTemp140SE) + (fConst89KI * fVec194SE[1]) /* Sum */)) /* Sum */);
			fTemp141SE = fVec194SE[0]; // step: 1202
			fVec193SE[0] = fTemp141SE;
			fTemp142SE = fVec198SE[2]; // step: 1222
			fVec199SE[0] = ((fConst87KI * ((fConst91KI * fVec194SE[0]) + (fConst92KI * fVec193SE[1]) + (fConst91KI * fTemp140SE) /* Sum */)) + -(fConst93KI * ((fConst94KI * fTemp142SE) + (fConst95KI * fVec199SE[1]) /* Sum */)) /* Sum */);
			fTemp143SE = fVec199SE[0]; // step: 1234
			fVec198SE[0] = fTemp143SE;
			fTemp144SE = fVec201SE[2]; // step: 1242
			fVec202SE[0] = (fTemp137SE + -(fConst96KI * ((fConst97KI * fTemp144SE) + (fConst98KI * fVec202SE[1]) /* Sum */)) /* Sum */);
			fTemp145SE = fVec202SE[0]; // step: 1254
			fVec201SE[0] = fTemp145SE;
			fTemp146SE = fVec206SE[2]; // step: 1274
			fVec207SE[0] = ((fConst96KI * ((fConst100KI * fVec202SE[0]) + (fConst101KI * fVec201SE[1]) + (fConst100KI * fTemp144SE) /* Sum */)) + -(fConst102KI * ((fConst103KI * fTemp146SE) + (fConst104KI * fVec207SE[1]) /* Sum */)) /* Sum */);
			fTemp147SE = fVec207SE[0]; // step: 1286
			fVec206SE[0] = fTemp147SE;
			fTemp148SE = fVec211SE[2]; // step: 1304
			fVec212SE[0] = ((fConst102KI * ((fConst105KI * fVec207SE[0]) + (fConst106KI * fVec206SE[1]) + (fConst105KI * fTemp146SE) /* Sum */)) + -(fConst107KI * ((fConst108KI * fTemp148SE) + (fConst109KI * fVec212SE[1]) /* Sum */)) /* Sum */);
			fTemp149SE = fVec212SE[0]; // step: 1316
			fVec211SE[0] = fTemp149SE;
			fTemp150SE = (fConst107KI * ((fConst110KI * fVec212SE[0]) + (fConst111KI * fVec211SE[1]) + (fConst110KI * fTemp148SE) /* Sum */)); // step: 1326
			fTemp151SE = fVec216SE[2]; // step: 1338
			fVec217SE[0] = (fTemp150SE + -(fConst114KI * ((fConst115KI * fTemp151SE) + (fConst118KI * fVec217SE[1]) /* Sum */)) /* Sum */);
			fTemp152SE = fVec217SE[0]; // step: 1353
			fVec216SE[0] = fTemp152SE;
			fTemp153SE = fVec221SE[2]; // step: 1373
			fVec222SE[0] = ((fConst114KI * ((fConst120KI * fVec217SE[0]) + (fConst121KI * fVec216SE[1]) + (fConst120KI * fTemp151SE) /* Sum */)) + -(fConst122KI * ((fConst123KI * fTemp153SE) + (fConst124KI * fVec222SE[1]) /* Sum */)) /* Sum */);
			fTemp154SE = fVec222SE[0]; // step: 1385
			fVec221SE[0] = fTemp154SE;
			fTemp155SE = fVec226SE[2]; // step: 1405
			fVec227SE[0] = ((fConst122KI * ((fConst126KI * fVec222SE[0]) + (fConst127KI * fVec221SE[1]) + (fConst126KI * fTemp153SE) /* Sum */)) + -(fConst128KI * ((fConst129KI * fTemp155SE) + (fConst130KI * fVec227SE[1]) /* Sum */)) /* Sum */);
			fTemp156SE = fVec227SE[0]; // step: 1417
			fVec226SE[0] = fTemp156SE;
			fTemp157SE = fVec229SE[2]; // step: 1425
			fVec230SE[0] = (fTemp150SE + -(fConst131KI * ((fConst132KI * fTemp157SE) + (fConst133KI * fVec230SE[1]) /* Sum */)) /* Sum */);
			fTemp158SE = fVec230SE[0]; // step: 1437
			fVec229SE[0] = fTemp158SE;
			fTemp159SE = fVec234SE[2]; // step: 1457
			fVec235SE[0] = ((fConst131KI * ((fConst135KI * fVec230SE[0]) + (fConst136KI * fVec229SE[1]) + (fConst135KI * fTemp157SE) /* Sum */)) + -(fConst137KI * ((fConst138KI * fTemp159SE) + (fConst139KI * fVec235SE[1]) /* Sum */)) /* Sum */);
			fTemp160SE = fVec235SE[0]; // step: 1469
			fVec234SE[0] = fTemp160SE;
			fTemp161SE = fVec239SE[2]; // step: 1487
			fVec240SE[0] = ((fConst137KI * ((fConst140KI * fVec235SE[0]) + (fConst141KI * fVec234SE[1]) + (fConst140KI * fTemp159SE) /* Sum */)) + -(fConst142KI * ((fConst143KI * fTemp161SE) + (fConst144KI * fVec240SE[1]) /* Sum */)) /* Sum */);
			fTemp162SE = fVec240SE[0]; // step: 1499
			fVec239SE[0] = fTemp162SE;
			fTemp163SE = (fConst142KI * ((fConst145KI * fVec240SE[0]) + (fConst146KI * fVec239SE[1]) + (fConst145KI * fTemp161SE) /* Sum */)); // step: 1509
			fTemp164SE = fVec244SE[2]; // step: 1521
			fVec245SE[0] = (fTemp163SE + -(fConst149KI * ((fConst150KI * fTemp164SE) + (fConst153KI * fVec245SE[1]) /* Sum */)) /* Sum */);
			fTemp165SE = fVec245SE[0]; // step: 1536
			fVec244SE[0] = fTemp165SE;
			fTemp166SE = fVec249SE[2]; // step: 1556
			fVec250SE[0] = ((fConst149KI * ((fConst155KI * fVec245SE[0]) + (fConst156KI * fVec244SE[1]) + (fConst155KI * fTemp164SE) /* Sum */)) + -(fConst157KI * ((fConst158KI * fTemp166SE) + (fConst159KI * fVec250SE[1]) /* Sum */)) /* Sum */);
			fTemp167SE = fVec250SE[0]; // step: 1568
			fVec249SE[0] = fTemp167SE;
			fTemp168SE = fVec254SE[2]; // step: 1588
			fVec255SE[0] = ((fConst157KI * ((fConst161KI * fVec250SE[0]) + (fConst162KI * fVec249SE[1]) + (fConst161KI * fTemp166SE) /* Sum */)) + -(fConst163KI * ((fConst164KI * fTemp168SE) + (fConst165KI * fVec255SE[1]) /* Sum */)) /* Sum */);
			fTemp169SE = fVec255SE[0]; // step: 1600
			fVec254SE[0] = fTemp169SE;
			fTemp170SE = fVec257SE[2]; // step: 1608
			fVec258SE[0] = (fTemp163SE + -(fConst166KI * ((fConst167KI * fTemp170SE) + (fConst168KI * fVec258SE[1]) /* Sum */)) /* Sum */);
			fTemp171SE = fVec258SE[0]; // step: 1620
			fVec257SE[0] = fTemp171SE;
			fTemp172SE = fVec262SE[2]; // step: 1640
			fVec263SE[0] = ((fConst166KI * ((fConst170KI * fVec258SE[0]) + (fConst171KI * fVec257SE[1]) + (fConst170KI * fTemp170SE) /* Sum */)) + -(fConst172KI * ((fConst173KI * fTemp172SE) + (fConst174KI * fVec263SE[1]) /* Sum */)) /* Sum */);
			fTemp173SE = fVec263SE[0]; // step: 1652
			fVec262SE[0] = fTemp173SE;
			fTemp174SE = fVec267SE[2]; // step: 1670
			fVec268SE[0] = ((fConst172KI * ((fConst175KI * fVec263SE[0]) + (fConst176KI * fVec262SE[1]) + (fConst175KI * fTemp172SE) /* Sum */)) + -(fConst177KI * ((fConst178KI * fTemp174SE) + (fConst179KI * fVec268SE[1]) /* Sum */)) /* Sum */);
			fTemp175SE = fVec268SE[0]; // step: 1682
			fVec267SE[0] = fTemp175SE;
			fTemp176SE = (fConst177KI * ((fConst180KI * fVec268SE[0]) + (fConst181KI * fVec267SE[1]) + (fConst180KI * fTemp174SE) /* Sum */)); // step: 1692
			fTemp177SE = fVec272SE[2]; // step: 1704
			fVec273SE[0] = (fTemp176SE + -(fConst184KI * ((fConst185KI * fTemp177SE) + (fConst188KI * fVec273SE[1]) /* Sum */)) /* Sum */);
			fTemp178SE = fVec273SE[0]; // step: 1719
			fVec272SE[0] = fTemp178SE;
			fTemp179SE = fVec277SE[2]; // step: 1739
			fVec278SE[0] = ((fConst184KI * ((fConst190KI * fVec273SE[0]) + (fConst191KI * fVec272SE[1]) + (fConst190KI * fTemp177SE) /* Sum */)) + -(fConst192KI * ((fConst193KI * fTemp179SE) + (fConst194KI * fVec278SE[1]) /* Sum */)) /* Sum */);
			fTemp180SE = fVec278SE[0]; // step: 1751
			fVec277SE[0] = fTemp180SE;
			fTemp181SE = fVec282SE[2]; // step: 1771
			fVec283SE[0] = ((fConst192KI * ((fConst196KI * fVec278SE[0]) + (fConst197KI * fVec277SE[1]) + (fConst196KI * fTemp179SE) /* Sum */)) + -(fConst198KI * ((fConst199KI * fTemp181SE) + (fConst200KI * fVec283SE[1]) /* Sum */)) /* Sum */);
			fTemp182SE = fVec283SE[0]; // step: 1783
			fVec282SE[0] = fTemp182SE;
			fTemp183SE = fVec285SE[2]; // step: 1791
			fVec286SE[0] = (fTemp176SE + -(fConst201KI * ((fConst202KI * fTemp183SE) + (fConst203KI * fVec286SE[1]) /* Sum */)) /* Sum */);
			fTemp184SE = fVec286SE[0]; // step: 1803
			fVec285SE[0] = fTemp184SE;
			fTemp185SE = fVec290SE[2]; // step: 1823
			fVec291SE[0] = ((fConst201KI * ((fConst205KI * fVec286SE[0]) + (fConst206KI * fVec285SE[1]) + (fConst205KI * fTemp183SE) /* Sum */)) + -(fConst207KI * ((fConst208KI * fTemp185SE) + (fConst209KI * fVec291SE[1]) /* Sum */)) /* Sum */);
			fTemp186SE = fVec291SE[0]; // step: 1835
			fVec290SE[0] = fTemp186SE;
			fTemp187SE = fVec295SE[2]; // step: 1853
			fVec296SE[0] = ((fConst207KI * ((fConst210KI * fVec291SE[0]) + (fConst211KI * fVec290SE[1]) + (fConst210KI * fTemp185SE) /* Sum */)) + -(fConst212KI * ((fConst213KI * fTemp187SE) + (fConst214KI * fVec296SE[1]) /* Sum */)) /* Sum */);
			fTemp188SE = fVec296SE[0]; // step: 1865
			fVec295SE[0] = fTemp188SE;
			fTemp189SE = (fConst212KI * ((fConst215KI * fVec296SE[0]) + (fConst216KI * fVec295SE[1]) + (fConst215KI * fTemp187SE) /* Sum */)); // step: 1875
			fTemp190SE = fVec300SE[2]; // step: 1887
			fVec301SE[0] = (fTemp189SE + -(fConst219KI * ((fConst220KI * fTemp190SE) + (fConst223KI * fVec301SE[1]) /* Sum */)) /* Sum */);
			fTemp191SE = fVec301SE[0]; // step: 1902
			fVec300SE[0] = fTemp191SE;
			fTemp192SE = fVec305SE[2]; // step: 1922
			fVec306SE[0] = ((fConst219KI * ((fConst225KI * fVec301SE[0]) + (fConst226KI * fVec300SE[1]) + (fConst225KI * fTemp190SE) /* Sum */)) + -(fConst227KI * ((fConst228KI * fTemp192SE) + (fConst229KI * fVec306SE[1]) /* Sum */)) /* Sum */);
			fTemp193SE = fVec306SE[0]; // step: 1934
			fVec305SE[0] = fTemp193SE;
			fTemp194SE = fVec310SE[2]; // step: 1954
			fVec311SE[0] = ((fConst227KI * ((fConst231KI * fVec306SE[0]) + (fConst232KI * fVec305SE[1]) + (fConst231KI * fTemp192SE) /* Sum */)) + -(fConst233KI * ((fConst234KI * fTemp194SE) + (fConst235KI * fVec311SE[1]) /* Sum */)) /* Sum */);
			fTemp195SE = fVec311SE[0]; // step: 1966
			fVec310SE[0] = fTemp195SE;
			fTemp196SE = fVec313SE[2]; // step: 1974
			fVec314SE[0] = (fTemp189SE + -(fConst236KI * ((fConst237KI * fTemp196SE) + (fConst238KI * fVec314SE[1]) /* Sum */)) /* Sum */);
			fTemp197SE = fVec314SE[0]; // step: 1986
			fVec313SE[0] = fTemp197SE;
			fTemp198SE = fVec318SE[2]; // step: 2006
			fVec319SE[0] = ((fConst236KI * ((fConst240KI * fVec314SE[0]) + (fConst241KI * fVec313SE[1]) + (fConst240KI * fTemp196SE) /* Sum */)) + -(fConst242KI * ((fConst243KI * fTemp198SE) + (fConst244KI * fVec319SE[1]) /* Sum */)) /* Sum */);
			fTemp199SE = fVec319SE[0]; // step: 2018
			fVec318SE[0] = fTemp199SE;
			fTemp200SE = fVec323SE[2]; // step: 2036
			fVec324SE[0] = ((fConst242KI * ((fConst245KI * fVec319SE[0]) + (fConst246KI * fVec318SE[1]) + (fConst245KI * fTemp198SE) /* Sum */)) + -(fConst247KI * ((fConst248KI * fTemp200SE) + (fConst249KI * fVec324SE[1]) /* Sum */)) /* Sum */);
			fTemp201SE = fVec324SE[0]; // step: 2048
			fVec323SE[0] = fTemp201SE;
			fTemp202SE = (fConst247KI * ((fConst250KI * fVec324SE[0]) + (fConst251KI * fVec323SE[1]) + (fConst250KI * fTemp200SE) /* Sum */)); // step: 2058
			fTemp203SE = fVec328SE[2]; // step: 2070
			fVec329SE[0] = (fTemp202SE + -(fConst254KI * ((fConst255KI * fTemp203SE) + (fConst258KI * fVec329SE[1]) /* Sum */)) /* Sum */);
			fTemp204SE = fVec329SE[0]; // step: 2085
			fVec328SE[0] = fTemp204SE;
			fTemp205SE = fVec333SE[2]; // step: 2105
			fVec334SE[0] = ((fConst254KI * ((fConst260KI * fVec329SE[0]) + (fConst261KI * fVec328SE[1]) + (fConst260KI * fTemp203SE) /* Sum */)) + -(fConst262KI * ((fConst263KI * fTemp205SE) + (fConst264KI * fVec334SE[1]) /* Sum */)) /* Sum */);
			fTemp206SE = fVec334SE[0]; // step: 2117
			fVec333SE[0] = fTemp206SE;
			fTemp207SE = fVec338SE[2]; // step: 2137
			fVec339SE[0] = ((fConst262KI * ((fConst266KI * fVec334SE[0]) + (fConst267KI * fVec333SE[1]) + (fConst266KI * fTemp205SE) /* Sum */)) + -(fConst268KI * ((fConst269KI * fTemp207SE) + (fConst270KI * fVec339SE[1]) /* Sum */)) /* Sum */);
			fTemp208SE = fVec339SE[0]; // step: 2149
			fVec338SE[0] = fTemp208SE;
			fTemp209SE = fVec341SE[2]; // step: 2157
			fVec342SE[0] = (fTemp202SE + -(fConst271KI * ((fConst272KI * fTemp209SE) + (fConst273KI * fVec342SE[1]) /* Sum */)) /* Sum */);
			fTemp210SE = fVec342SE[0]; // step: 2169
			fVec341SE[0] = fTemp210SE;
			fTemp211SE = fVec346SE[2]; // step: 2189
			fVec347SE[0] = ((fConst271KI * ((fConst275KI * fVec342SE[0]) + (fConst276KI * fVec341SE[1]) + (fConst275KI * fTemp209SE) /* Sum */)) + -(fConst277KI * ((fConst278KI * fTemp211SE) + (fConst279KI * fVec347SE[1]) /* Sum */)) /* Sum */);
			fTemp212SE = fVec347SE[0]; // step: 2201
			fVec346SE[0] = fTemp212SE;
			fTemp213SE = fVec351SE[2]; // step: 2219
			fVec352SE[0] = ((fConst277KI * ((fConst280KI * fVec347SE[0]) + (fConst281KI * fVec346SE[1]) + (fConst280KI * fTemp211SE) /* Sum */)) + -(fConst282KI * ((fConst283KI * fTemp213SE) + (fConst284KI * fVec352SE[1]) /* Sum */)) /* Sum */);
			fTemp214SE = fVec352SE[0]; // step: 2231
			fVec351SE[0] = fTemp214SE;
			fTemp215SE = (fConst282KI * ((fConst285KI * fVec352SE[0]) + (fConst286KI * fVec351SE[1]) + (fConst285KI * fTemp213SE) /* Sum */)); // step: 2241
			fTemp216SE = fVec356SE[2]; // step: 2253
			fVec357SE[0] = (fTemp215SE + -(fConst289KI * ((fConst290KI * fTemp216SE) + (fConst293KI * fVec357SE[1]) /* Sum */)) /* Sum */);
			fTemp217SE = fVec357SE[0]; // step: 2268
			fVec356SE[0] = fTemp217SE;
			fTemp218SE = fVec361SE[2]; // step: 2288
			fVec362SE[0] = ((fConst289KI * ((fConst295KI * fVec357SE[0]) + (fConst296KI * fVec356SE[1]) + (fConst295KI * fTemp216SE) /* Sum */)) + -(fConst297KI * ((fConst298KI * fTemp218SE) + (fConst299KI * fVec362SE[1]) /* Sum */)) /* Sum */);
			fTemp219SE = fVec362SE[0]; // step: 2300
			fVec361SE[0] = fTemp219SE;
			fTemp220SE = fVec366SE[2]; // step: 2320
			fVec367SE[0] = ((fConst297KI * ((fConst301KI * fVec362SE[0]) + (fConst302KI * fVec361SE[1]) + (fConst301KI * fTemp218SE) /* Sum */)) + -(fConst303KI * ((fConst304KI * fTemp220SE) + (fConst305KI * fVec367SE[1]) /* Sum */)) /* Sum */);
			fTemp221SE = fVec367SE[0]; // step: 2332
			fVec366SE[0] = fTemp221SE;
			fTemp222SE = fVec369SE[2]; // step: 2340
			fVec370SE[0] = (fTemp215SE + -(fConst306KI * ((fConst307KI * fTemp222SE) + (fConst308KI * fVec370SE[1]) /* Sum */)) /* Sum */);
			fTemp223SE = fVec370SE[0]; // step: 2352
			fVec369SE[0] = fTemp223SE;
			fTemp224SE = fVec374SE[2]; // step: 2372
			fVec375SE[0] = ((fConst306KI * ((fConst310KI * fVec370SE[0]) + (fConst311KI * fVec369SE[1]) + (fConst310KI * fTemp222SE) /* Sum */)) + -(fConst312KI * ((fConst313KI * fTemp224SE) + (fConst314KI * fVec375SE[1]) /* Sum */)) /* Sum */);
			fTemp225SE = fVec375SE[0]; // step: 2384
			fVec374SE[0] = fTemp225SE;
			fTemp226SE = fVec379SE[2]; // step: 2402
			fVec380SE[0] = ((fConst312KI * ((fConst315KI * fVec375SE[0]) + (fConst316KI * fVec374SE[1]) + (fConst315KI * fTemp224SE) /* Sum */)) + -(fConst317KI * ((fConst318KI * fTemp226SE) + (fConst319KI * fVec380SE[1]) /* Sum */)) /* Sum */);
			fTemp227SE = fVec380SE[0]; // step: 2414
			fVec379SE[0] = fTemp227SE;
			fTemp228SE = (fConst317KI * ((fConst320KI * fVec380SE[0]) + (fConst321KI * fVec379SE[1]) + (fConst320KI * fTemp226SE) /* Sum */)); // step: 2424
			fTemp229SE = fVec384SE[2]; // step: 2436
			fVec385SE[0] = (fTemp228SE + -(fConst324KI * ((fConst325KI * fTemp229SE) + (fConst328KI * fVec385SE[1]) /* Sum */)) /* Sum */);
			fTemp230SE = fVec385SE[0]; // step: 2451
			fVec384SE[0] = fTemp230SE;
			fTemp231SE = fVec389SE[2]; // step: 2471
			fVec390SE[0] = ((fConst324KI * ((fConst330KI * fVec385SE[0]) + (fConst331KI * fVec384SE[1]) + (fConst330KI * fTemp229SE) /* Sum */)) + -(fConst332KI * ((fConst333KI * fTemp231SE) + (fConst334KI * fVec390SE[1]) /* Sum */)) /* Sum */);
			fTemp232SE = fVec390SE[0]; // step: 2483
			fVec389SE[0] = fTemp232SE;
			fTemp233SE = fVec394SE[2]; // step: 2503
			fVec395SE[0] = ((fConst332KI * ((fConst336KI * fVec390SE[0]) + (fConst337KI * fVec389SE[1]) + (fConst336KI * fTemp231SE) /* Sum */)) + -(fConst338KI * ((fConst339KI * fTemp233SE) + (fConst340KI * fVec395SE[1]) /* Sum */)) /* Sum */);
			fTemp234SE = fVec395SE[0]; // step: 2515
			fVec394SE[0] = fTemp234SE;
			fTemp235SE = fVec397SE[2]; // step: 2523
			fVec398SE[0] = (fTemp228SE + -(fConst341KI * ((fConst342KI * fTemp235SE) + (fConst343KI * fVec398SE[1]) /* Sum */)) /* Sum */);
			fTemp236SE = fVec398SE[0]; // step: 2535
			fVec397SE[0] = fTemp236SE;
			fTemp237SE = fVec402SE[2]; // step: 2555
			fVec403SE[0] = ((fConst341KI * ((fConst345KI * fVec398SE[0]) + (fConst346KI * fVec397SE[1]) + (fConst345KI * fTemp235SE) /* Sum */)) + -(fConst347KI * ((fConst348KI * fTemp237SE) + (fConst349KI * fVec403SE[1]) /* Sum */)) /* Sum */);
			fTemp238SE = fVec403SE[0]; // step: 2567
			fVec402SE[0] = fTemp238SE;
			fTemp239SE = fVec407SE[2]; // step: 2585
			fVec408SE[0] = ((fConst347KI * ((fConst350KI * fVec403SE[0]) + (fConst351KI * fVec402SE[1]) + (fConst350KI * fTemp237SE) /* Sum */)) + -(fConst352KI * ((fConst353KI * fTemp239SE) + (fConst354KI * fVec408SE[1]) /* Sum */)) /* Sum */);
			fTemp240SE = fVec408SE[0]; // step: 2597
			fVec407SE[0] = fTemp240SE;
			fTemp241SE = (fConst352KI * ((fConst355KI * fVec408SE[0]) + (fConst356KI * fVec407SE[1]) + (fConst355KI * fTemp239SE) /* Sum */)); // step: 2607
			fTemp242SE = fVec412SE[2]; // step: 2619
			fVec413SE[0] = (fTemp241SE + -(fConst359KI * ((fConst360KI * fTemp242SE) + (fConst363KI * fVec413SE[1]) /* Sum */)) /* Sum */);
			fTemp243SE = fVec413SE[0]; // step: 2634
			fVec412SE[0] = fTemp243SE;
			fTemp244SE = fVec417SE[2]; // step: 2654
			fVec418SE[0] = ((fConst359KI * ((fConst365KI * fVec413SE[0]) + (fConst366KI * fVec412SE[1]) + (fConst365KI * fTemp242SE) /* Sum */)) + -(fConst367KI * ((fConst368KI * fTemp244SE) + (fConst369KI * fVec418SE[1]) /* Sum */)) /* Sum */);
			fTemp245SE = fVec418SE[0]; // step: 2666
			fVec417SE[0] = fTemp245SE;
			fTemp246SE = fVec422SE[2]; // step: 2686
			fVec423SE[0] = ((fConst367KI * ((fConst371KI * fVec418SE[0]) + (fConst372KI * fVec417SE[1]) + (fConst371KI * fTemp244SE) /* Sum */)) + -(fConst373KI * ((fConst374KI * fTemp246SE) + (fConst375KI * fVec423SE[1]) /* Sum */)) /* Sum */);
			fTemp247SE = fVec423SE[0]; // step: 2698
			fVec422SE[0] = fTemp247SE;
			fTemp248SE = fVec425SE[2]; // step: 2706
			fVec426SE[0] = (fTemp241SE + -(fConst376KI * ((fConst377KI * fTemp248SE) + (fConst378KI * fVec426SE[1]) /* Sum */)) /* Sum */);
			fTemp249SE = fVec426SE[0]; // step: 2718
			fVec425SE[0] = fTemp249SE;
			fTemp250SE = fVec430SE[2]; // step: 2738
			fVec431SE[0] = ((fConst376KI * ((fConst380KI * fVec426SE[0]) + (fConst381KI * fVec425SE[1]) + (fConst380KI * fTemp248SE) /* Sum */)) + -(fConst382KI * ((fConst383KI * fTemp250SE) + (fConst384KI * fVec431SE[1]) /* Sum */)) /* Sum */);
			fTemp251SE = fVec431SE[0]; // step: 2750
			fVec430SE[0] = fTemp251SE;
			fTemp252SE = fVec435SE[2]; // step: 2768
			fVec436SE[0] = ((fConst382KI * ((fConst385KI * fVec431SE[0]) + (fConst386KI * fVec430SE[1]) + (fConst385KI * fTemp250SE) /* Sum */)) + -(fConst387KI * ((fConst388KI * fTemp252SE) + (fConst389KI * fVec436SE[1]) /* Sum */)) /* Sum */);
			fTemp253SE = fVec436SE[0]; // step: 2780
			fVec435SE[0] = fTemp253SE;
			fTemp254SE = (fConst387KI * ((fConst390KI * fVec436SE[0]) + (fConst391KI * fVec435SE[1]) + (fConst390KI * fTemp252SE) /* Sum */)); // step: 2790
			fTemp255SE = fVec440SE[2]; // step: 2802
			fVec441SE[0] = (fTemp254SE + -(fConst394KI * ((fConst395KI * fTemp255SE) + (fConst398KI * fVec441SE[1]) /* Sum */)) /* Sum */);
			fTemp256SE = fVec441SE[0]; // step: 2817
			fVec440SE[0] = fTemp256SE;
			fTemp257SE = fVec445SE[2]; // step: 2837
			fVec446SE[0] = ((fConst394KI * ((fConst400KI * fVec441SE[0]) + (fConst401KI * fVec440SE[1]) + (fConst400KI * fTemp255SE) /* Sum */)) + -(fConst402KI * ((fConst403KI * fTemp257SE) + (fConst404KI * fVec446SE[1]) /* Sum */)) /* Sum */);
			fTemp258SE = fVec446SE[0]; // step: 2849
			fVec445SE[0] = fTemp258SE;
			fTemp259SE = fVec450SE[2]; // step: 2869
			fVec451SE[0] = ((fConst402KI * ((fConst406KI * fVec446SE[0]) + (fConst407KI * fVec445SE[1]) + (fConst406KI * fTemp257SE) /* Sum */)) + -(fConst408KI * ((fConst409KI * fTemp259SE) + (fConst410KI * fVec451SE[1]) /* Sum */)) /* Sum */);
			fTemp260SE = fVec451SE[0]; // step: 2881
			fVec450SE[0] = fTemp260SE;
			fTemp261SE = fVec453SE[2]; // step: 2889
			fVec454SE[0] = (fTemp254SE + -(fConst411KI * ((fConst412KI * fTemp261SE) + (fConst413KI * fVec454SE[1]) /* Sum */)) /* Sum */);
			fTemp262SE = fVec454SE[0]; // step: 2901
			fVec453SE[0] = fTemp262SE;
			fTemp263SE = fVec458SE[2]; // step: 2921
			fVec459SE[0] = ((fConst411KI * ((fConst415KI * fVec454SE[0]) + (fConst416KI * fVec453SE[1]) + (fConst415KI * fTemp261SE) /* Sum */)) + -(fConst417KI * ((fConst418KI * fTemp263SE) + (fConst419KI * fVec459SE[1]) /* Sum */)) /* Sum */);
			fTemp264SE = fVec459SE[0]; // step: 2933
			fVec458SE[0] = fTemp264SE;
			fTemp265SE = fVec463SE[2]; // step: 2951
			fVec464SE[0] = ((fConst417KI * ((fConst420KI * fVec459SE[0]) + (fConst421KI * fVec458SE[1]) + (fConst420KI * fTemp263SE) /* Sum */)) + -(fConst422KI * ((fConst423KI * fTemp265SE) + (fConst424KI * fVec464SE[1]) /* Sum */)) /* Sum */);
			fTemp266SE = fVec464SE[0]; // step: 2963
			fVec463SE[0] = fTemp266SE;
			fTemp267SE = (fConst422KI * ((fConst425KI * fVec464SE[0]) + (fConst426KI * fVec463SE[1]) + (fConst425KI * fTemp265SE) /* Sum */)); // step: 2973
			fTemp268SE = fVec468SE[2]; // step: 2985
			fVec469SE[0] = (fTemp267SE + -(fConst429KI * ((fConst430KI * fTemp268SE) + (fConst433KI * fVec469SE[1]) /* Sum */)) /* Sum */);
			fTemp269SE = fVec469SE[0]; // step: 3000
			fVec468SE[0] = fTemp269SE;
			fTemp270SE = fVec473SE[2]; // step: 3020
			fVec474SE[0] = ((fConst429KI * ((fConst435KI * fVec469SE[0]) + (fConst436KI * fVec468SE[1]) + (fConst435KI * fTemp268SE) /* Sum */)) + -(fConst437KI * ((fConst438KI * fTemp270SE) + (fConst439KI * fVec474SE[1]) /* Sum */)) /* Sum */);
			fTemp271SE = fVec474SE[0]; // step: 3032
			fVec473SE[0] = fTemp271SE;
			fTemp272SE = fVec478SE[2]; // step: 3052
			fVec479SE[0] = ((fConst437KI * ((fConst441KI * fVec474SE[0]) + (fConst442KI * fVec473SE[1]) + (fConst441KI * fTemp270SE) /* Sum */)) + -(fConst443KI * ((fConst444KI * fTemp272SE) + (fConst445KI * fVec479SE[1]) /* Sum */)) /* Sum */);
			fTemp273SE = fVec479SE[0]; // step: 3064
			fVec478SE[0] = fTemp273SE;
			fTemp274SE = fVec481SE[2]; // step: 3072
			fVec482SE[0] = (fTemp267SE + -(fConst446KI * ((fConst447KI * fTemp274SE) + (fConst448KI * fVec482SE[1]) /* Sum */)) /* Sum */);
			fTemp275SE = fVec482SE[0]; // step: 3084
			fVec481SE[0] = fTemp275SE;
			fTemp276SE = fVec486SE[2]; // step: 3104
			fVec487SE[0] = ((fConst446KI * ((fConst450KI * fVec482SE[0]) + (fConst451KI * fVec481SE[1]) + (fConst450KI * fTemp274SE) /* Sum */)) + -(fConst452KI * ((fConst453KI * fTemp276SE) + (fConst454KI * fVec487SE[1]) /* Sum */)) /* Sum */);
			fTemp277SE = fVec487SE[0]; // step: 3116
			fVec486SE[0] = fTemp277SE;
			fTemp278SE = fVec491SE[2]; // step: 3134
			fVec492SE[0] = ((fConst452KI * ((fConst455KI * fVec487SE[0]) + (fConst456KI * fVec486SE[1]) + (fConst455KI * fTemp276SE) /* Sum */)) + -(fConst457KI * ((fConst458KI * fTemp278SE) + (fConst459KI * fVec492SE[1]) /* Sum */)) /* Sum */);
			fTemp279SE = fVec492SE[0]; // step: 3146
			fVec491SE[0] = fTemp279SE;
			fTemp280SE = (fConst457KI * ((fConst460KI * fVec492SE[0]) + (fConst461KI * fVec491SE[1]) + (fConst460KI * fTemp278SE) /* Sum */)); // step: 3156
			fTemp281SE = fVec496SE[2]; // step: 3168
			fVec497SE[0] = (fTemp280SE + -(fConst464KI * ((fConst465KI * fTemp281SE) + (fConst468KI * fVec497SE[1]) /* Sum */)) /* Sum */);
			fTemp282SE = fVec497SE[0]; // step: 3183
			fVec496SE[0] = fTemp282SE;
			fTemp283SE = fVec501SE[2]; // step: 3203
			fVec502SE[0] = ((fConst464KI * ((fConst470KI * fVec497SE[0]) + (fConst471KI * fVec496SE[1]) + (fConst470KI * fTemp281SE) /* Sum */)) + -(fConst472KI * ((fConst473KI * fTemp283SE) + (fConst474KI * fVec502SE[1]) /* Sum */)) /* Sum */);
			fTemp284SE = fVec502SE[0]; // step: 3215
			fVec501SE[0] = fTemp284SE;
			fTemp285SE = fVec506SE[2]; // step: 3235
			fVec507SE[0] = ((fConst472KI * ((fConst476KI * fVec502SE[0]) + (fConst477KI * fVec501SE[1]) + (fConst476KI * fTemp283SE) /* Sum */)) + -(fConst478KI * ((fConst479KI * fTemp285SE) + (fConst480KI * fVec507SE[1]) /* Sum */)) /* Sum */);
			fTemp286SE = fVec507SE[0]; // step: 3247
			fVec506SE[0] = fTemp286SE;
			fTemp287SE = fVec509SE[2]; // step: 3255
			fVec510SE[0] = (fTemp280SE + -(fConst481KI * ((fConst482KI * fTemp287SE) + (fConst483KI * fVec510SE[1]) /* Sum */)) /* Sum */);
			fTemp288SE = fVec510SE[0]; // step: 3267
			fVec509SE[0] = fTemp288SE;
			fTemp289SE = fVec514SE[2]; // step: 3287
			fVec515SE[0] = ((fConst481KI * ((fConst485KI * fVec510SE[0]) + (fConst486KI * fVec509SE[1]) + (fConst485KI * fTemp287SE) /* Sum */)) + -(fConst487KI * ((fConst488KI * fTemp289SE) + (fConst489KI * fVec515SE[1]) /* Sum */)) /* Sum */);
			fTemp290SE = fVec515SE[0]; // step: 3299
			fVec514SE[0] = fTemp290SE;
			fTemp291SE = fVec519SE[2]; // step: 3317
			fVec520SE[0] = ((fConst487KI * ((fConst490KI * fVec515SE[0]) + (fConst491KI * fVec514SE[1]) + (fConst490KI * fTemp289SE) /* Sum */)) + -(fConst492KI * ((fConst493KI * fTemp291SE) + (fConst494KI * fVec520SE[1]) /* Sum */)) /* Sum */);
			fTemp292SE = fVec520SE[0]; // step: 3329
			fVec519SE[0] = fTemp292SE;
			fVec522SE[0] = ((fVec522SE[1] * fSlow50BE) + (fabsf((fConst23KI * ((fConst497KI * fVec143SE[0]) + (fConst498KI * fVec142SE[1]) + (fConst497KI * fTemp116SE) /* Sum */))) * fSlow51BE) /* Sum */);
			fSlow52SE = (fSlow48BE + (2e+01f * log10f(fVec522SE[0])) /* Sum */);
			fVec526SE[0] = ((fSlow50BE * fVec526SE[1]) + (fSlow51BE * fabsf((fConst58KI * ((fConst500KI * fVec171SE[0]) + (fConst501KI * fVec170SE[1]) + (fConst500KI * fTemp129SE) /* Sum */)))) /* Sum */);
			fSlow53SE = (fSlow48BE + (2e+01f * log10f(fVec526SE[0])) /* Sum */);
			fVec530SE[0] = ((fSlow50BE * fVec530SE[1]) + (fSlow51BE * fabsf((fConst93KI * ((fConst503KI * fVec199SE[0]) + (fConst504KI * fVec198SE[1]) + (fConst503KI * fTemp142SE) /* Sum */)))) /* Sum */);
			fSlow54SE = (fSlow48BE + (2e+01f * log10f(fVec530SE[0])) /* Sum */);
			fVec534SE[0] = ((fSlow50BE * fVec534SE[1]) + (fSlow51BE * fabsf((fConst128KI * ((fConst506KI * fVec227SE[0]) + (fConst507KI * fVec226SE[1]) + (fConst506KI * fTemp155SE) /* Sum */)))) /* Sum */);
			fSlow55SE = (fSlow48BE + (2e+01f * log10f(fVec534SE[0])) /* Sum */);
			fVec538SE[0] = ((fSlow50BE * fVec538SE[1]) + (fSlow51BE * fabsf((fConst163KI * ((fConst509KI * fVec255SE[0]) + (fConst510KI * fVec254SE[1]) + (fConst509KI * fTemp168SE) /* Sum */)))) /* Sum */);
			fSlow56SE = (fSlow48BE + (2e+01f * log10f(fVec538SE[0])) /* Sum */);
			fVec542SE[0] = ((fSlow50BE * fVec542SE[1]) + (fSlow51BE * fabsf((fConst198KI * ((fConst512KI * fVec283SE[0]) + (fConst513KI * fVec282SE[1]) + (fConst512KI * fTemp181SE) /* Sum */)))) /* Sum */);
			fSlow57SE = (fSlow48BE + (2e+01f * log10f(fVec542SE[0])) /* Sum */);
			fVec546SE[0] = ((fSlow50BE * fVec546SE[1]) + (fSlow51BE * fabsf((fConst233KI * ((fConst515KI * fVec311SE[0]) + (fConst516KI * fVec310SE[1]) + (fConst515KI * fTemp194SE) /* Sum */)))) /* Sum */);
			fSlow58SE = (fSlow48BE + (2e+01f * log10f(fVec546SE[0])) /* Sum */);
			fVec550SE[0] = ((fSlow50BE * fVec550SE[1]) + (fSlow51BE * fabsf((fConst268KI * ((fConst518KI * fVec339SE[0]) + (fConst519KI * fVec338SE[1]) + (fConst518KI * fTemp207SE) /* Sum */)))) /* Sum */);
			fSlow59SE = (fSlow48BE + (2e+01f * log10f(fVec550SE[0])) /* Sum */);
			fVec554SE[0] = ((fSlow50BE * fVec554SE[1]) + (fSlow51BE * fabsf((fConst303KI * ((fConst521KI * fVec367SE[0]) + (fConst522KI * fVec366SE[1]) + (fConst521KI * fTemp220SE) /* Sum */)))) /* Sum */);
			fSlow60SE = (fSlow48BE + (2e+01f * log10f(fVec554SE[0])) /* Sum */);
			fVec558SE[0] = ((fSlow50BE * fVec558SE[1]) + (fSlow51BE * fabsf((fConst338KI * ((fConst524KI * fVec395SE[0]) + (fConst525KI * fVec394SE[1]) + (fConst524KI * fTemp233SE) /* Sum */)))) /* Sum */);
			fSlow61SE = (fSlow48BE + (2e+01f * log10f(fVec558SE[0])) /* Sum */);
			fVec562SE[0] = ((fSlow50BE * fVec562SE[1]) + (fSlow51BE * fabsf((fConst373KI * ((fConst527KI * fVec423SE[0]) + (fConst528KI * fVec422SE[1]) + (fConst527KI * fTemp246SE) /* Sum */)))) /* Sum */);
			fSlow62SE = (fSlow48BE + (2e+01f * log10f(fVec562SE[0])) /* Sum */);
			fVec566SE[0] = ((fSlow50BE * fVec566SE[1]) + (fSlow51BE * fabsf((fConst408KI * ((fConst530KI * fVec451SE[0]) + (fConst531KI * fVec450SE[1]) + (fConst530KI * fTemp259SE) /* Sum */)))) /* Sum */);
			fSlow63SE = (fSlow48BE + (2e+01f * log10f(fVec566SE[0])) /* Sum */);
			fVec570SE[0] = ((fSlow50BE * fVec570SE[1]) + (fSlow51BE * fabsf((fConst443KI * ((fConst533KI * fVec479SE[0]) + (fConst534KI * fVec478SE[1]) + (fConst533KI * fTemp272SE) /* Sum */)))) /* Sum */);
			fSlow64SE = (fSlow48BE + (2e+01f * log10f(fVec570SE[0])) /* Sum */);
			fVec574SE[0] = ((fSlow50BE * fVec574SE[1]) + (fSlow51BE * fabsf((fConst478KI * ((fConst536KI * fVec507SE[0]) + (fConst537KI * fVec506SE[1]) + (fConst536KI * fTemp285SE) /* Sum */)))) /* Sum */);
			fSlow65SE = (fSlow48BE + (2e+01f * log10f(fVec574SE[0])) /* Sum */);
			fVec578SE[0] = ((fSlow50BE * fVec578SE[1]) + (fSlow51BE * fabsf((fConst492KI * ((fConst538KI * fVec520SE[0]) + (fConst539KI * fVec519SE[1]) + (fConst538KI * fTemp291SE) /* Sum */)))) /* Sum */);
			fSlow66SE = (fSlow48BE + (2e+01f * log10f(fVec578SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp110SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp111SE);  // Zone Exec Code
			// post processing
			fVec578SE[1] = fVec578SE[0];
			fVec574SE[1] = fVec574SE[0];
			fVec570SE[1] = fVec570SE[0];
			fVec566SE[1] = fVec566SE[0];
			fVec562SE[1] = fVec562SE[0];
			fVec558SE[1] = fVec558SE[0];
			fVec554SE[1] = fVec554SE[0];
			fVec550SE[1] = fVec550SE[0];
			fVec546SE[1] = fVec546SE[0];
			fVec542SE[1] = fVec542SE[0];
			fVec538SE[1] = fVec538SE[0];
			fVec534SE[1] = fVec534SE[0];
			fVec530SE[1] = fVec530SE[0];
			fVec526SE[1] = fVec526SE[0];
			fVec522SE[1] = fVec522SE[0];
			fVec519SE[2] = fVec519SE[1];
			fVec519SE[1] = fVec519SE[0];
			fVec520SE[1] = fVec520SE[0];
			fVec514SE[2] = fVec514SE[1];
			fVec514SE[1] = fVec514SE[0];
			fVec515SE[1] = fVec515SE[0];
			fVec509SE[2] = fVec509SE[1];
			fVec509SE[1] = fVec509SE[0];
			fVec510SE[1] = fVec510SE[0];
			fVec506SE[2] = fVec506SE[1];
			fVec506SE[1] = fVec506SE[0];
			fVec507SE[1] = fVec507SE[0];
			fVec501SE[2] = fVec501SE[1];
			fVec501SE[1] = fVec501SE[0];
			fVec502SE[1] = fVec502SE[0];
			fVec496SE[2] = fVec496SE[1];
			fVec496SE[1] = fVec496SE[0];
			fVec497SE[1] = fVec497SE[0];
			fVec491SE[2] = fVec491SE[1];
			fVec491SE[1] = fVec491SE[0];
			fVec492SE[1] = fVec492SE[0];
			fVec486SE[2] = fVec486SE[1];
			fVec486SE[1] = fVec486SE[0];
			fVec487SE[1] = fVec487SE[0];
			fVec481SE[2] = fVec481SE[1];
			fVec481SE[1] = fVec481SE[0];
			fVec482SE[1] = fVec482SE[0];
			fVec478SE[2] = fVec478SE[1];
			fVec478SE[1] = fVec478SE[0];
			fVec479SE[1] = fVec479SE[0];
			fVec473SE[2] = fVec473SE[1];
			fVec473SE[1] = fVec473SE[0];
			fVec474SE[1] = fVec474SE[0];
			fVec468SE[2] = fVec468SE[1];
			fVec468SE[1] = fVec468SE[0];
			fVec469SE[1] = fVec469SE[0];
			fVec463SE[2] = fVec463SE[1];
			fVec463SE[1] = fVec463SE[0];
			fVec464SE[1] = fVec464SE[0];
			fVec458SE[2] = fVec458SE[1];
			fVec458SE[1] = fVec458SE[0];
			fVec459SE[1] = fVec459SE[0];
			fVec453SE[2] = fVec453SE[1];
			fVec453SE[1] = fVec453SE[0];
			fVec454SE[1] = fVec454SE[0];
			fVec450SE[2] = fVec450SE[1];
			fVec450SE[1] = fVec450SE[0];
			fVec451SE[1] = fVec451SE[0];
			fVec445SE[2] = fVec445SE[1];
			fVec445SE[1] = fVec445SE[0];
			fVec446SE[1] = fVec446SE[0];
			fVec440SE[2] = fVec440SE[1];
			fVec440SE[1] = fVec440SE[0];
			fVec441SE[1] = fVec441SE[0];
			fVec435SE[2] = fVec435SE[1];
			fVec435SE[1] = fVec435SE[0];
			fVec436SE[1] = fVec436SE[0];
			fVec430SE[2] = fVec430SE[1];
			fVec430SE[1] = fVec430SE[0];
			fVec431SE[1] = fVec431SE[0];
			fVec425SE[2] = fVec425SE[1];
			fVec425SE[1] = fVec425SE[0];
			fVec426SE[1] = fVec426SE[0];
			fVec422SE[2] = fVec422SE[1];
			fVec422SE[1] = fVec422SE[0];
			fVec423SE[1] = fVec423SE[0];
			fVec417SE[2] = fVec417SE[1];
			fVec417SE[1] = fVec417SE[0];
			fVec418SE[1] = fVec418SE[0];
			fVec412SE[2] = fVec412SE[1];
			fVec412SE[1] = fVec412SE[0];
			fVec413SE[1] = fVec413SE[0];
			fVec407SE[2] = fVec407SE[1];
			fVec407SE[1] = fVec407SE[0];
			fVec408SE[1] = fVec408SE[0];
			fVec402SE[2] = fVec402SE[1];
			fVec402SE[1] = fVec402SE[0];
			fVec403SE[1] = fVec403SE[0];
			fVec397SE[2] = fVec397SE[1];
			fVec397SE[1] = fVec397SE[0];
			fVec398SE[1] = fVec398SE[0];
			fVec394SE[2] = fVec394SE[1];
			fVec394SE[1] = fVec394SE[0];
			fVec395SE[1] = fVec395SE[0];
			fVec389SE[2] = fVec389SE[1];
			fVec389SE[1] = fVec389SE[0];
			fVec390SE[1] = fVec390SE[0];
			fVec384SE[2] = fVec384SE[1];
			fVec384SE[1] = fVec384SE[0];
			fVec385SE[1] = fVec385SE[0];
			fVec379SE[2] = fVec379SE[1];
			fVec379SE[1] = fVec379SE[0];
			fVec380SE[1] = fVec380SE[0];
			fVec374SE[2] = fVec374SE[1];
			fVec374SE[1] = fVec374SE[0];
			fVec375SE[1] = fVec375SE[0];
			fVec369SE[2] = fVec369SE[1];
			fVec369SE[1] = fVec369SE[0];
			fVec370SE[1] = fVec370SE[0];
			fVec366SE[2] = fVec366SE[1];
			fVec366SE[1] = fVec366SE[0];
			fVec367SE[1] = fVec367SE[0];
			fVec361SE[2] = fVec361SE[1];
			fVec361SE[1] = fVec361SE[0];
			fVec362SE[1] = fVec362SE[0];
			fVec356SE[2] = fVec356SE[1];
			fVec356SE[1] = fVec356SE[0];
			fVec357SE[1] = fVec357SE[0];
			fVec351SE[2] = fVec351SE[1];
			fVec351SE[1] = fVec351SE[0];
			fVec352SE[1] = fVec352SE[0];
			fVec346SE[2] = fVec346SE[1];
			fVec346SE[1] = fVec346SE[0];
			fVec347SE[1] = fVec347SE[0];
			fVec341SE[2] = fVec341SE[1];
			fVec341SE[1] = fVec341SE[0];
			fVec342SE[1] = fVec342SE[0];
			fVec338SE[2] = fVec338SE[1];
			fVec338SE[1] = fVec338SE[0];
			fVec339SE[1] = fVec339SE[0];
			fVec333SE[2] = fVec333SE[1];
			fVec333SE[1] = fVec333SE[0];
			fVec334SE[1] = fVec334SE[0];
			fVec328SE[2] = fVec328SE[1];
			fVec328SE[1] = fVec328SE[0];
			fVec329SE[1] = fVec329SE[0];
			fVec323SE[2] = fVec323SE[1];
			fVec323SE[1] = fVec323SE[0];
			fVec324SE[1] = fVec324SE[0];
			fVec318SE[2] = fVec318SE[1];
			fVec318SE[1] = fVec318SE[0];
			fVec319SE[1] = fVec319SE[0];
			fVec313SE[2] = fVec313SE[1];
			fVec313SE[1] = fVec313SE[0];
			fVec314SE[1] = fVec314SE[0];
			fVec310SE[2] = fVec310SE[1];
			fVec310SE[1] = fVec310SE[0];
			fVec311SE[1] = fVec311SE[0];
			fVec305SE[2] = fVec305SE[1];
			fVec305SE[1] = fVec305SE[0];
			fVec306SE[1] = fVec306SE[0];
			fVec300SE[2] = fVec300SE[1];
			fVec300SE[1] = fVec300SE[0];
			fVec301SE[1] = fVec301SE[0];
			fVec295SE[2] = fVec295SE[1];
			fVec295SE[1] = fVec295SE[0];
			fVec296SE[1] = fVec296SE[0];
			fVec290SE[2] = fVec290SE[1];
			fVec290SE[1] = fVec290SE[0];
			fVec291SE[1] = fVec291SE[0];
			fVec285SE[2] = fVec285SE[1];
			fVec285SE[1] = fVec285SE[0];
			fVec286SE[1] = fVec286SE[0];
			fVec282SE[2] = fVec282SE[1];
			fVec282SE[1] = fVec282SE[0];
			fVec283SE[1] = fVec283SE[0];
			fVec277SE[2] = fVec277SE[1];
			fVec277SE[1] = fVec277SE[0];
			fVec278SE[1] = fVec278SE[0];
			fVec272SE[2] = fVec272SE[1];
			fVec272SE[1] = fVec272SE[0];
			fVec273SE[1] = fVec273SE[0];
			fVec267SE[2] = fVec267SE[1];
			fVec267SE[1] = fVec267SE[0];
			fVec268SE[1] = fVec268SE[0];
			fVec262SE[2] = fVec262SE[1];
			fVec262SE[1] = fVec262SE[0];
			fVec263SE[1] = fVec263SE[0];
			fVec257SE[2] = fVec257SE[1];
			fVec257SE[1] = fVec257SE[0];
			fVec258SE[1] = fVec258SE[0];
			fVec254SE[2] = fVec254SE[1];
			fVec254SE[1] = fVec254SE[0];
			fVec255SE[1] = fVec255SE[0];
			fVec249SE[2] = fVec249SE[1];
			fVec249SE[1] = fVec249SE[0];
			fVec250SE[1] = fVec250SE[0];
			fVec244SE[2] = fVec244SE[1];
			fVec244SE[1] = fVec244SE[0];
			fVec245SE[1] = fVec245SE[0];
			fVec239SE[2] = fVec239SE[1];
			fVec239SE[1] = fVec239SE[0];
			fVec240SE[1] = fVec240SE[0];
			fVec234SE[2] = fVec234SE[1];
			fVec234SE[1] = fVec234SE[0];
			fVec235SE[1] = fVec235SE[0];
			fVec229SE[2] = fVec229SE[1];
			fVec229SE[1] = fVec229SE[0];
			fVec230SE[1] = fVec230SE[0];
			fVec226SE[2] = fVec226SE[1];
			fVec226SE[1] = fVec226SE[0];
			fVec227SE[1] = fVec227SE[0];
			fVec221SE[2] = fVec221SE[1];
			fVec221SE[1] = fVec221SE[0];
			fVec222SE[1] = fVec222SE[0];
			fVec216SE[2] = fVec216SE[1];
			fVec216SE[1] = fVec216SE[0];
			fVec217SE[1] = fVec217SE[0];
			fVec211SE[2] = fVec211SE[1];
			fVec211SE[1] = fVec211SE[0];
			fVec212SE[1] = fVec212SE[0];
			fVec206SE[2] = fVec206SE[1];
			fVec206SE[1] = fVec206SE[0];
			fVec207SE[1] = fVec207SE[0];
			fVec201SE[2] = fVec201SE[1];
			fVec201SE[1] = fVec201SE[0];
			fVec202SE[1] = fVec202SE[0];
			fVec198SE[2] = fVec198SE[1];
			fVec198SE[1] = fVec198SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec193SE[2] = fVec193SE[1];
			fVec193SE[1] = fVec193SE[0];
			fVec194SE[1] = fVec194SE[0];
			fVec188SE[2] = fVec188SE[1];
			fVec188SE[1] = fVec188SE[0];
			fVec189SE[1] = fVec189SE[0];
			fVec183SE[2] = fVec183SE[1];
			fVec183SE[1] = fVec183SE[0];
			fVec184SE[1] = fVec184SE[0];
			fVec178SE[2] = fVec178SE[1];
			fVec178SE[1] = fVec178SE[0];
			fVec179SE[1] = fVec179SE[0];
			fVec173SE[2] = fVec173SE[1];
			fVec173SE[1] = fVec173SE[0];
			fVec174SE[1] = fVec174SE[0];
			fVec170SE[2] = fVec170SE[1];
			fVec170SE[1] = fVec170SE[0];
			fVec171SE[1] = fVec171SE[0];
			fVec165SE[2] = fVec165SE[1];
			fVec165SE[1] = fVec165SE[0];
			fVec166SE[1] = fVec166SE[0];
			fVec160SE[2] = fVec160SE[1];
			fVec160SE[1] = fVec160SE[0];
			fVec161SE[1] = fVec161SE[0];
			fVec155SE[2] = fVec155SE[1];
			fVec155SE[1] = fVec155SE[0];
			fVec156SE[1] = fVec156SE[0];
			fVec150SE[2] = fVec150SE[1];
			fVec150SE[1] = fVec150SE[0];
			fVec151SE[1] = fVec151SE[0];
			fVec145SE[2] = fVec145SE[1];
			fVec145SE[1] = fVec145SE[0];
			fVec146SE[1] = fVec146SE[0];
			fVec142SE[2] = fVec142SE[1];
			fVec142SE[1] = fVec142SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec137SE[2] = fVec137SE[1];
			fVec137SE[1] = fVec137SE[0];
			fVec138SE[1] = fVec138SE[0];
			fVec132SE[2] = fVec132SE[1];
			fVec132SE[1] = fVec132SE[0];
			fVec133SE[1] = fVec133SE[0];
			fVec106SE[1] = fVec106SE[0];
			fVec79SE[1] = fVec79SE[0];
			fVec122SE[2] = fVec122SE[1];
			fVec122SE[1] = fVec122SE[0];
			fVec124SE[1] = fVec124SE[0];
			fVec117SE[2] = fVec117SE[1];
			fVec117SE[1] = fVec117SE[0];
			fVec119SE[1] = fVec119SE[0];
			fVec112SE[2] = fVec112SE[1];
			fVec112SE[1] = fVec112SE[0];
			fVec114SE[1] = fVec114SE[0];
			fVec109SE[2] = fVec109SE[1];
			fVec109SE[1] = fVec109SE[0];
			fVec107SE[1] = fVec107SE[0];
			fVec81SE[1] = fVec81SE[0];
			fVec101SE[1] = fVec101SE[0];
			fVec97SE[2] = fVec97SE[1];
			fVec97SE[1] = fVec97SE[0];
			fVec99SE[1] = fVec99SE[0];
			fVec92SE[2] = fVec92SE[1];
			fVec92SE[1] = fVec92SE[0];
			fVec94SE[1] = fVec94SE[0];
			fVec87SE[2] = fVec87SE[1];
			fVec87SE[1] = fVec87SE[0];
			fVec89SE[1] = fVec89SE[0];
			fVec84SE[2] = fVec84SE[1];
			fVec84SE[1] = fVec84SE[0];
			fVec80SE[1] = fVec80SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec71SE[1] = fVec71SE[0];
			++IOTA0;
			fVec68SE[1] = fVec68SE[0];
			fVec67SE[1] = fVec67SE[0];
			fVec51SE[1] = fVec51SE[0];
			fVec47SI[3] = fVec47SI[2];
			fVec47SI[2] = fVec47SI[1];
			fVec47SI[1] = fVec47SI[0];
			fVec48SI[1] = fVec48SI[0];
			iVec45SI[1] = iVec45SI[0];
			fVec44SE[1] = fVec44SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec37SE[1] = fVec37SE[0];
			fVec35SE[1] = fVec35SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec25SE[1] = fVec25SE[0];
			fVec23SE[1] = fVec23SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec11SE[1] = fVec11SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec11SEState = fVec11SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec16SEState = fVec16SE[1];
		fVec17SEState = fVec17SE[1];
		fVec19SEState = fVec19SE[1];
		fVec20SEState = fVec20SE[1];
		fVec21SEState = fVec21SE[1];
		fVec23SEState = fVec23SE[1];
		fVec25SEState = fVec25SE[1];
		fVec26SEState = fVec26SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec33SEState = fVec33SE[1];
		fVec34SEState = fVec34SE[1];
		fVec35SEState = fVec35SE[1];
		fVec37SEState = fVec37SE[1];
		fVec39SEState = fVec39SE[1];
		fVec40SEState = fVec40SE[1];
		fVec42SEState = fVec42SE[1];
		fVec44SEState = fVec44SE[1];
		iVec45SIState = iVec45SI[1];
		fVec48SIState = fVec48SI[1];
		fVec47SIState[0] = fVec47SI[1];
		fVec47SIState[1] = fVec47SI[2];
		fVec47SIState[2] = fVec47SI[3];
		fVec51SEState = fVec51SE[1];
		fVec67SEState = fVec67SE[1];
		fVec68SEState = fVec68SE[1];
		fVec71SEState = fVec71SE[1];
		fVec82SEState = fVec82SE[1];
		fVec80SEState = fVec80SE[1];
		fVec84SEState[0] = fVec84SE[1];
		fVec84SEState[1] = fVec84SE[2];
		fVec89SEState = fVec89SE[1];
		fVec87SEState[0] = fVec87SE[1];
		fVec87SEState[1] = fVec87SE[2];
		fVec94SEState = fVec94SE[1];
		fVec92SEState[0] = fVec92SE[1];
		fVec92SEState[1] = fVec92SE[2];
		fVec99SEState = fVec99SE[1];
		fVec97SEState[0] = fVec97SE[1];
		fVec97SEState[1] = fVec97SE[2];
		fVec101SEState = fVec101SE[1];
		fVec81SEState = fVec81SE[1];
		fVec107SEState = fVec107SE[1];
		fVec109SEState[0] = fVec109SE[1];
		fVec109SEState[1] = fVec109SE[2];
		fVec114SEState = fVec114SE[1];
		fVec112SEState[0] = fVec112SE[1];
		fVec112SEState[1] = fVec112SE[2];
		fVec119SEState = fVec119SE[1];
		fVec117SEState[0] = fVec117SE[1];
		fVec117SEState[1] = fVec117SE[2];
		fVec124SEState = fVec124SE[1];
		fVec122SEState[0] = fVec122SE[1];
		fVec122SEState[1] = fVec122SE[2];
		fVec79SEState = fVec79SE[1];
		fVec106SEState = fVec106SE[1];
		fVec133SEState = fVec133SE[1];
		fVec132SEState[0] = fVec132SE[1];
		fVec132SEState[1] = fVec132SE[2];
		fVec138SEState = fVec138SE[1];
		fVec137SEState[0] = fVec137SE[1];
		fVec137SEState[1] = fVec137SE[2];
		fVec143SEState = fVec143SE[1];
		fVec142SEState[0] = fVec142SE[1];
		fVec142SEState[1] = fVec142SE[2];
		fVec146SEState = fVec146SE[1];
		fVec145SEState[0] = fVec145SE[1];
		fVec145SEState[1] = fVec145SE[2];
		fVec151SEState = fVec151SE[1];
		fVec150SEState[0] = fVec150SE[1];
		fVec150SEState[1] = fVec150SE[2];
		fVec156SEState = fVec156SE[1];
		fVec155SEState[0] = fVec155SE[1];
		fVec155SEState[1] = fVec155SE[2];
		fVec161SEState = fVec161SE[1];
		fVec160SEState[0] = fVec160SE[1];
		fVec160SEState[1] = fVec160SE[2];
		fVec166SEState = fVec166SE[1];
		fVec165SEState[0] = fVec165SE[1];
		fVec165SEState[1] = fVec165SE[2];
		fVec171SEState = fVec171SE[1];
		fVec170SEState[0] = fVec170SE[1];
		fVec170SEState[1] = fVec170SE[2];
		fVec174SEState = fVec174SE[1];
		fVec173SEState[0] = fVec173SE[1];
		fVec173SEState[1] = fVec173SE[2];
		fVec179SEState = fVec179SE[1];
		fVec178SEState[0] = fVec178SE[1];
		fVec178SEState[1] = fVec178SE[2];
		fVec184SEState = fVec184SE[1];
		fVec183SEState[0] = fVec183SE[1];
		fVec183SEState[1] = fVec183SE[2];
		fVec189SEState = fVec189SE[1];
		fVec188SEState[0] = fVec188SE[1];
		fVec188SEState[1] = fVec188SE[2];
		fVec194SEState = fVec194SE[1];
		fVec193SEState[0] = fVec193SE[1];
		fVec193SEState[1] = fVec193SE[2];
		fVec199SEState = fVec199SE[1];
		fVec198SEState[0] = fVec198SE[1];
		fVec198SEState[1] = fVec198SE[2];
		fVec202SEState = fVec202SE[1];
		fVec201SEState[0] = fVec201SE[1];
		fVec201SEState[1] = fVec201SE[2];
		fVec207SEState = fVec207SE[1];
		fVec206SEState[0] = fVec206SE[1];
		fVec206SEState[1] = fVec206SE[2];
		fVec212SEState = fVec212SE[1];
		fVec211SEState[0] = fVec211SE[1];
		fVec211SEState[1] = fVec211SE[2];
		fVec217SEState = fVec217SE[1];
		fVec216SEState[0] = fVec216SE[1];
		fVec216SEState[1] = fVec216SE[2];
		fVec222SEState = fVec222SE[1];
		fVec221SEState[0] = fVec221SE[1];
		fVec221SEState[1] = fVec221SE[2];
		fVec227SEState = fVec227SE[1];
		fVec226SEState[0] = fVec226SE[1];
		fVec226SEState[1] = fVec226SE[2];
		fVec230SEState = fVec230SE[1];
		fVec229SEState[0] = fVec229SE[1];
		fVec229SEState[1] = fVec229SE[2];
		fVec235SEState = fVec235SE[1];
		fVec234SEState[0] = fVec234SE[1];
		fVec234SEState[1] = fVec234SE[2];
		fVec240SEState = fVec240SE[1];
		fVec239SEState[0] = fVec239SE[1];
		fVec239SEState[1] = fVec239SE[2];
		fVec245SEState = fVec245SE[1];
		fVec244SEState[0] = fVec244SE[1];
		fVec244SEState[1] = fVec244SE[2];
		fVec250SEState = fVec250SE[1];
		fVec249SEState[0] = fVec249SE[1];
		fVec249SEState[1] = fVec249SE[2];
		fVec255SEState = fVec255SE[1];
		fVec254SEState[0] = fVec254SE[1];
		fVec254SEState[1] = fVec254SE[2];
		fVec258SEState = fVec258SE[1];
		fVec257SEState[0] = fVec257SE[1];
		fVec257SEState[1] = fVec257SE[2];
		fVec263SEState = fVec263SE[1];
		fVec262SEState[0] = fVec262SE[1];
		fVec262SEState[1] = fVec262SE[2];
		fVec268SEState = fVec268SE[1];
		fVec267SEState[0] = fVec267SE[1];
		fVec267SEState[1] = fVec267SE[2];
		fVec273SEState = fVec273SE[1];
		fVec272SEState[0] = fVec272SE[1];
		fVec272SEState[1] = fVec272SE[2];
		fVec278SEState = fVec278SE[1];
		fVec277SEState[0] = fVec277SE[1];
		fVec277SEState[1] = fVec277SE[2];
		fVec283SEState = fVec283SE[1];
		fVec282SEState[0] = fVec282SE[1];
		fVec282SEState[1] = fVec282SE[2];
		fVec286SEState = fVec286SE[1];
		fVec285SEState[0] = fVec285SE[1];
		fVec285SEState[1] = fVec285SE[2];
		fVec291SEState = fVec291SE[1];
		fVec290SEState[0] = fVec290SE[1];
		fVec290SEState[1] = fVec290SE[2];
		fVec296SEState = fVec296SE[1];
		fVec295SEState[0] = fVec295SE[1];
		fVec295SEState[1] = fVec295SE[2];
		fVec301SEState = fVec301SE[1];
		fVec300SEState[0] = fVec300SE[1];
		fVec300SEState[1] = fVec300SE[2];
		fVec306SEState = fVec306SE[1];
		fVec305SEState[0] = fVec305SE[1];
		fVec305SEState[1] = fVec305SE[2];
		fVec311SEState = fVec311SE[1];
		fVec310SEState[0] = fVec310SE[1];
		fVec310SEState[1] = fVec310SE[2];
		fVec314SEState = fVec314SE[1];
		fVec313SEState[0] = fVec313SE[1];
		fVec313SEState[1] = fVec313SE[2];
		fVec319SEState = fVec319SE[1];
		fVec318SEState[0] = fVec318SE[1];
		fVec318SEState[1] = fVec318SE[2];
		fVec324SEState = fVec324SE[1];
		fVec323SEState[0] = fVec323SE[1];
		fVec323SEState[1] = fVec323SE[2];
		fVec329SEState = fVec329SE[1];
		fVec328SEState[0] = fVec328SE[1];
		fVec328SEState[1] = fVec328SE[2];
		fVec334SEState = fVec334SE[1];
		fVec333SEState[0] = fVec333SE[1];
		fVec333SEState[1] = fVec333SE[2];
		fVec339SEState = fVec339SE[1];
		fVec338SEState[0] = fVec338SE[1];
		fVec338SEState[1] = fVec338SE[2];
		fVec342SEState = fVec342SE[1];
		fVec341SEState[0] = fVec341SE[1];
		fVec341SEState[1] = fVec341SE[2];
		fVec347SEState = fVec347SE[1];
		fVec346SEState[0] = fVec346SE[1];
		fVec346SEState[1] = fVec346SE[2];
		fVec352SEState = fVec352SE[1];
		fVec351SEState[0] = fVec351SE[1];
		fVec351SEState[1] = fVec351SE[2];
		fVec357SEState = fVec357SE[1];
		fVec356SEState[0] = fVec356SE[1];
		fVec356SEState[1] = fVec356SE[2];
		fVec362SEState = fVec362SE[1];
		fVec361SEState[0] = fVec361SE[1];
		fVec361SEState[1] = fVec361SE[2];
		fVec367SEState = fVec367SE[1];
		fVec366SEState[0] = fVec366SE[1];
		fVec366SEState[1] = fVec366SE[2];
		fVec370SEState = fVec370SE[1];
		fVec369SEState[0] = fVec369SE[1];
		fVec369SEState[1] = fVec369SE[2];
		fVec375SEState = fVec375SE[1];
		fVec374SEState[0] = fVec374SE[1];
		fVec374SEState[1] = fVec374SE[2];
		fVec380SEState = fVec380SE[1];
		fVec379SEState[0] = fVec379SE[1];
		fVec379SEState[1] = fVec379SE[2];
		fVec385SEState = fVec385SE[1];
		fVec384SEState[0] = fVec384SE[1];
		fVec384SEState[1] = fVec384SE[2];
		fVec390SEState = fVec390SE[1];
		fVec389SEState[0] = fVec389SE[1];
		fVec389SEState[1] = fVec389SE[2];
		fVec395SEState = fVec395SE[1];
		fVec394SEState[0] = fVec394SE[1];
		fVec394SEState[1] = fVec394SE[2];
		fVec398SEState = fVec398SE[1];
		fVec397SEState[0] = fVec397SE[1];
		fVec397SEState[1] = fVec397SE[2];
		fVec403SEState = fVec403SE[1];
		fVec402SEState[0] = fVec402SE[1];
		fVec402SEState[1] = fVec402SE[2];
		fVec408SEState = fVec408SE[1];
		fVec407SEState[0] = fVec407SE[1];
		fVec407SEState[1] = fVec407SE[2];
		fVec413SEState = fVec413SE[1];
		fVec412SEState[0] = fVec412SE[1];
		fVec412SEState[1] = fVec412SE[2];
		fVec418SEState = fVec418SE[1];
		fVec417SEState[0] = fVec417SE[1];
		fVec417SEState[1] = fVec417SE[2];
		fVec423SEState = fVec423SE[1];
		fVec422SEState[0] = fVec422SE[1];
		fVec422SEState[1] = fVec422SE[2];
		fVec426SEState = fVec426SE[1];
		fVec425SEState[0] = fVec425SE[1];
		fVec425SEState[1] = fVec425SE[2];
		fVec431SEState = fVec431SE[1];
		fVec430SEState[0] = fVec430SE[1];
		fVec430SEState[1] = fVec430SE[2];
		fVec436SEState = fVec436SE[1];
		fVec435SEState[0] = fVec435SE[1];
		fVec435SEState[1] = fVec435SE[2];
		fVec441SEState = fVec441SE[1];
		fVec440SEState[0] = fVec440SE[1];
		fVec440SEState[1] = fVec440SE[2];
		fVec446SEState = fVec446SE[1];
		fVec445SEState[0] = fVec445SE[1];
		fVec445SEState[1] = fVec445SE[2];
		fVec451SEState = fVec451SE[1];
		fVec450SEState[0] = fVec450SE[1];
		fVec450SEState[1] = fVec450SE[2];
		fVec454SEState = fVec454SE[1];
		fVec453SEState[0] = fVec453SE[1];
		fVec453SEState[1] = fVec453SE[2];
		fVec459SEState = fVec459SE[1];
		fVec458SEState[0] = fVec458SE[1];
		fVec458SEState[1] = fVec458SE[2];
		fVec464SEState = fVec464SE[1];
		fVec463SEState[0] = fVec463SE[1];
		fVec463SEState[1] = fVec463SE[2];
		fVec469SEState = fVec469SE[1];
		fVec468SEState[0] = fVec468SE[1];
		fVec468SEState[1] = fVec468SE[2];
		fVec474SEState = fVec474SE[1];
		fVec473SEState[0] = fVec473SE[1];
		fVec473SEState[1] = fVec473SE[2];
		fVec479SEState = fVec479SE[1];
		fVec478SEState[0] = fVec478SE[1];
		fVec478SEState[1] = fVec478SE[2];
		fVec482SEState = fVec482SE[1];
		fVec481SEState[0] = fVec481SE[1];
		fVec481SEState[1] = fVec481SE[2];
		fVec487SEState = fVec487SE[1];
		fVec486SEState[0] = fVec486SE[1];
		fVec486SEState[1] = fVec486SE[2];
		fVec492SEState = fVec492SE[1];
		fVec491SEState[0] = fVec491SE[1];
		fVec491SEState[1] = fVec491SE[2];
		fVec497SEState = fVec497SE[1];
		fVec496SEState[0] = fVec496SE[1];
		fVec496SEState[1] = fVec496SE[2];
		fVec502SEState = fVec502SE[1];
		fVec501SEState[0] = fVec501SE[1];
		fVec501SEState[1] = fVec501SE[2];
		fVec507SEState = fVec507SE[1];
		fVec506SEState[0] = fVec506SE[1];
		fVec506SEState[1] = fVec506SE[2];
		fVec510SEState = fVec510SE[1];
		fVec509SEState[0] = fVec509SE[1];
		fVec509SEState[1] = fVec509SE[2];
		fVec515SEState = fVec515SE[1];
		fVec514SEState[0] = fVec514SE[1];
		fVec514SEState[1] = fVec514SE[2];
		fVec520SEState = fVec520SE[1];
		fVec519SEState[0] = fVec519SE[1];
		fVec519SEState[1] = fVec519SE[2];
		fVec522SEState = fVec522SE[1];
		fVec526SEState = fVec526SE[1];
		fVec530SEState = fVec530SE[1];
		fVec534SEState = fVec534SE[1];
		fVec538SEState = fVec538SE[1];
		fVec542SEState = fVec542SE[1];
		fVec546SEState = fVec546SE[1];
		fVec550SEState = fVec550SE[1];
		fVec554SEState = fVec554SE[1];
		fVec558SEState = fVec558SE[1];
		fVec562SEState = fVec562SE[1];
		fVec566SEState = fVec566SE[1];
		fVec570SEState = fVec570SE[1];
		fVec574SEState = fVec574SE[1];
		fVec578SEState = fVec578SE[1];
		fbargraph0 = fSlow19SE;
		fbargraph1 = fSlow52SE;
		fbargraph2 = fSlow53SE;
		fbargraph3 = fSlow54SE;
		fbargraph4 = fSlow55SE;
		fbargraph5 = fSlow56SE;
		fbargraph6 = fSlow57SE;
		fbargraph7 = fSlow58SE;
		fbargraph8 = fSlow59SE;
		fbargraph9 = fSlow60SE;
		fbargraph10 = fSlow61SE;
		fbargraph11 = fSlow62SE;
		fbargraph12 = fSlow63SE;
		fbargraph13 = fSlow64SE;
		fbargraph14 = fSlow65SE;
		fbargraph15 = fSlow66SE;
	}
};


