//----------------------------------------------------------
// name: "gate_compressor"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec11SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	float 	fVec16SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec17SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec20SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec23SEState; // Single Delay
	float 	fVec25SEState; // Single Delay
	float 	fVec26SEState; // Single Delay
	float 	fVec28SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec31SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SEState; // Single Delay
	float 	fVec33SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec35SEState; // Single Delay
	float 	fVec37SEState; // Single Delay
	float 	fVec39SEState; // Single Delay
	float 	fVec40SEState; // Single Delay
	float 	fVec42SEState; // Single Delay
	float 	fVec44SEState; // Single Delay
	// Recursion delay iVec45SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec45SIState; // Single Delay
	// Recursion delay fVec48SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec48SIState; // Single Delay
	float 	fVec47SIState[3]; // Copy Delay
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVec52SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec52SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 270
	float 	fConst3KI; // step: 283
	float 	fConst4KI; // step: 294
	FAUSTFLOAT 	fcheckbox3;
	// Recursion delay fVec51SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec51SEState; // Single Delay
	// Recursion delay fRec8SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	int 	iVec70SEState; // Single Delay
	FAUSTFLOAT 	fslider8;
	// Recursion delay iVec75SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec75SEState; // Single Delay
	// Recursion delay fVec72SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec72SEState; // Single Delay
	// Recursion delay fVec73SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec73SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	// Recursion delay fVec71SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec71SEState; // Single Delay
	// Recursion delay fRec13SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	int 	iVec81SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox4;
	// Recursion delay iVec88SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec88SEState; // Single Delay
	// Recursion delay fVec85SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec85SEState; // Single Delay
	// Recursion delay fVec86SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec86SEState; // Single Delay
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	float 	fConst5KI; // step: 532
	FAUSTFLOAT 	fslider11;
	// Recursion delay fVec93SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec93SEState; // Single Delay
	// Recursion delay fVec94SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec94SEState; // Single Delay
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	// Recursion delay fVec92SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec92SEState; // Single Delay
	// Recursion delay fVec99SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec99SEState; // Single Delay
	// Recursion delay fVec100SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec100SEState; // Single Delay
	// Recursion delay fVec98SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec98SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst6KI; // step: 667
	float 	fConst7KI; // step: 669
	float 	fConst8KI; // step: 673
	float 	fConst9KI; // step: 677
	float 	fConst10KI; // step: 680
	float 	fConst11KI; // step: 681
	float 	fConst12KI; // step: 684
	// Recursion delay fVec105SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec105SEState; // Single Delay
	float 	fVec104SEState[2]; // Copy Delay
	float 	fConst13KI; // step: 696
	float 	fConst14KI; // step: 697
	float 	fConst15KI; // step: 702
	float 	fConst16KI; // step: 713
	float 	fConst17KI; // step: 717
	float 	fConst18KI; // step: 721
	// Recursion delay fVec110SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec110SEState; // Single Delay
	float 	fVec109SEState[2]; // Copy Delay
	float 	fConst19KI; // step: 732
	float 	fConst20KI; // step: 733
	float 	fConst21KI; // step: 738
	float 	fConst22KI; // step: 749
	float 	fConst23KI; // step: 753
	float 	fConst24KI; // step: 757
	// Recursion delay fVec115SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec115SEState; // Single Delay
	float 	fVec114SEState[2]; // Copy Delay
	float 	fConst25KI; // step: 772
	float 	fConst26KI; // step: 776
	float 	fConst27KI; // step: 780
	// Recursion delay fVec118SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec118SEState; // Single Delay
	float 	fVec117SEState[2]; // Copy Delay
	float 	fConst28KI; // step: 792
	float 	fConst29KI; // step: 793
	float 	fConst30KI; // step: 798
	float 	fConst31KI; // step: 809
	float 	fConst32KI; // step: 813
	float 	fConst33KI; // step: 817
	// Recursion delay fVec123SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec123SEState; // Single Delay
	float 	fVec122SEState[2]; // Copy Delay
	float 	fConst34KI; // step: 828
	float 	fConst35KI; // step: 832
	float 	fConst36KI; // step: 843
	float 	fConst37KI; // step: 847
	float 	fConst38KI; // step: 851
	// Recursion delay fVec128SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec128SEState; // Single Delay
	float 	fVec127SEState[2]; // Copy Delay
	float 	fConst39KI; // step: 862
	float 	fConst40KI; // step: 866
	float 	fConst41KI; // step: 874
	float 	fConst42KI; // step: 875
	float 	fConst43KI; // step: 879
	float 	fConst44KI; // step: 882
	float 	fConst45KI; // step: 885
	float 	fConst46KI; // step: 886
	float 	fConst47KI; // step: 889
	// Recursion delay fVec133SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec133SEState; // Single Delay
	float 	fVec132SEState[2]; // Copy Delay
	float 	fConst48KI; // step: 899
	float 	fConst49KI; // step: 900
	float 	fConst50KI; // step: 905
	float 	fConst51KI; // step: 914
	float 	fConst52KI; // step: 917
	float 	fConst53KI; // step: 921
	// Recursion delay fVec138SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec138SEState; // Single Delay
	float 	fVec137SEState[2]; // Copy Delay
	float 	fConst54KI; // step: 931
	float 	fConst55KI; // step: 932
	float 	fConst56KI; // step: 937
	float 	fConst57KI; // step: 946
	float 	fConst58KI; // step: 949
	float 	fConst59KI; // step: 953
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec142SEState[2]; // Copy Delay
	float 	fConst60KI; // step: 966
	float 	fConst61KI; // step: 969
	float 	fConst62KI; // step: 973
	// Recursion delay fVec146SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec146SEState; // Single Delay
	float 	fVec145SEState[2]; // Copy Delay
	float 	fConst63KI; // step: 983
	float 	fConst64KI; // step: 984
	float 	fConst65KI; // step: 989
	float 	fConst66KI; // step: 998
	float 	fConst67KI; // step: 1001
	float 	fConst68KI; // step: 1005
	// Recursion delay fVec151SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec151SEState; // Single Delay
	float 	fVec150SEState[2]; // Copy Delay
	float 	fConst69KI; // step: 1015
	float 	fConst70KI; // step: 1019
	float 	fConst71KI; // step: 1028
	float 	fConst72KI; // step: 1031
	float 	fConst73KI; // step: 1035
	// Recursion delay fVec156SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec156SEState; // Single Delay
	float 	fVec155SEState[2]; // Copy Delay
	float 	fConst74KI; // step: 1045
	float 	fConst75KI; // step: 1049
	float 	fConst76KI; // step: 1057
	float 	fConst77KI; // step: 1058
	float 	fConst78KI; // step: 1062
	float 	fConst79KI; // step: 1065
	float 	fConst80KI; // step: 1068
	float 	fConst81KI; // step: 1069
	float 	fConst82KI; // step: 1072
	// Recursion delay fVec161SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec161SEState; // Single Delay
	float 	fVec160SEState[2]; // Copy Delay
	float 	fConst83KI; // step: 1082
	float 	fConst84KI; // step: 1083
	float 	fConst85KI; // step: 1088
	float 	fConst86KI; // step: 1097
	float 	fConst87KI; // step: 1100
	float 	fConst88KI; // step: 1104
	// Recursion delay fVec166SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec166SEState; // Single Delay
	float 	fVec165SEState[2]; // Copy Delay
	float 	fConst89KI; // step: 1114
	float 	fConst90KI; // step: 1115
	float 	fConst91KI; // step: 1120
	float 	fConst92KI; // step: 1129
	float 	fConst93KI; // step: 1132
	float 	fConst94KI; // step: 1136
	// Recursion delay fVec171SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec171SEState; // Single Delay
	float 	fVec170SEState[2]; // Copy Delay
	float 	fConst95KI; // step: 1149
	float 	fConst96KI; // step: 1152
	float 	fConst97KI; // step: 1156
	// Recursion delay fVec174SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec174SEState; // Single Delay
	float 	fVec173SEState[2]; // Copy Delay
	float 	fConst98KI; // step: 1166
	float 	fConst99KI; // step: 1167
	float 	fConst100KI; // step: 1172
	float 	fConst101KI; // step: 1181
	float 	fConst102KI; // step: 1184
	float 	fConst103KI; // step: 1188
	// Recursion delay fVec179SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec179SEState; // Single Delay
	float 	fVec178SEState[2]; // Copy Delay
	float 	fConst104KI; // step: 1198
	float 	fConst105KI; // step: 1202
	float 	fConst106KI; // step: 1211
	float 	fConst107KI; // step: 1214
	float 	fConst108KI; // step: 1218
	// Recursion delay fVec184SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec184SEState; // Single Delay
	float 	fVec183SEState[2]; // Copy Delay
	float 	fConst109KI; // step: 1228
	float 	fConst110KI; // step: 1232
	float 	fConst111KI; // step: 1240
	float 	fConst112KI; // step: 1241
	float 	fConst113KI; // step: 1245
	float 	fConst114KI; // step: 1248
	float 	fConst115KI; // step: 1251
	float 	fConst116KI; // step: 1252
	float 	fConst117KI; // step: 1255
	// Recursion delay fVec189SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec189SEState; // Single Delay
	float 	fVec188SEState[2]; // Copy Delay
	float 	fConst118KI; // step: 1265
	float 	fConst119KI; // step: 1266
	float 	fConst120KI; // step: 1271
	float 	fConst121KI; // step: 1280
	float 	fConst122KI; // step: 1283
	float 	fConst123KI; // step: 1287
	// Recursion delay fVec194SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec194SEState; // Single Delay
	float 	fVec193SEState[2]; // Copy Delay
	float 	fConst124KI; // step: 1297
	float 	fConst125KI; // step: 1298
	float 	fConst126KI; // step: 1303
	float 	fConst127KI; // step: 1312
	float 	fConst128KI; // step: 1315
	float 	fConst129KI; // step: 1319
	// Recursion delay fVec199SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec199SEState; // Single Delay
	float 	fVec198SEState[2]; // Copy Delay
	float 	fConst130KI; // step: 1332
	float 	fConst131KI; // step: 1335
	float 	fConst132KI; // step: 1339
	// Recursion delay fVec202SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec202SEState; // Single Delay
	float 	fVec201SEState[2]; // Copy Delay
	float 	fConst133KI; // step: 1349
	float 	fConst134KI; // step: 1350
	float 	fConst135KI; // step: 1355
	float 	fConst136KI; // step: 1364
	float 	fConst137KI; // step: 1367
	float 	fConst138KI; // step: 1371
	// Recursion delay fVec207SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec207SEState; // Single Delay
	float 	fVec206SEState[2]; // Copy Delay
	float 	fConst139KI; // step: 1381
	float 	fConst140KI; // step: 1385
	float 	fConst141KI; // step: 1394
	float 	fConst142KI; // step: 1397
	float 	fConst143KI; // step: 1401
	// Recursion delay fVec212SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec212SEState; // Single Delay
	float 	fVec211SEState[2]; // Copy Delay
	float 	fConst144KI; // step: 1411
	float 	fConst145KI; // step: 1415
	float 	fConst146KI; // step: 1423
	float 	fConst147KI; // step: 1424
	float 	fConst148KI; // step: 1428
	float 	fConst149KI; // step: 1431
	float 	fConst150KI; // step: 1434
	float 	fConst151KI; // step: 1435
	float 	fConst152KI; // step: 1438
	// Recursion delay fVec217SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec217SEState; // Single Delay
	float 	fVec216SEState[2]; // Copy Delay
	float 	fConst153KI; // step: 1448
	float 	fConst154KI; // step: 1449
	float 	fConst155KI; // step: 1454
	float 	fConst156KI; // step: 1463
	float 	fConst157KI; // step: 1466
	float 	fConst158KI; // step: 1470
	// Recursion delay fVec222SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec222SEState; // Single Delay
	float 	fVec221SEState[2]; // Copy Delay
	float 	fConst159KI; // step: 1480
	float 	fConst160KI; // step: 1481
	float 	fConst161KI; // step: 1486
	float 	fConst162KI; // step: 1495
	float 	fConst163KI; // step: 1498
	float 	fConst164KI; // step: 1502
	// Recursion delay fVec227SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec227SEState; // Single Delay
	float 	fVec226SEState[2]; // Copy Delay
	float 	fConst165KI; // step: 1515
	float 	fConst166KI; // step: 1518
	float 	fConst167KI; // step: 1522
	// Recursion delay fVec230SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec230SEState; // Single Delay
	float 	fVec229SEState[2]; // Copy Delay
	float 	fConst168KI; // step: 1532
	float 	fConst169KI; // step: 1533
	float 	fConst170KI; // step: 1538
	float 	fConst171KI; // step: 1547
	float 	fConst172KI; // step: 1550
	float 	fConst173KI; // step: 1554
	// Recursion delay fVec235SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec235SEState; // Single Delay
	float 	fVec234SEState[2]; // Copy Delay
	float 	fConst174KI; // step: 1564
	float 	fConst175KI; // step: 1568
	float 	fConst176KI; // step: 1577
	float 	fConst177KI; // step: 1580
	float 	fConst178KI; // step: 1584
	// Recursion delay fVec240SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec240SEState; // Single Delay
	float 	fVec239SEState[2]; // Copy Delay
	float 	fConst179KI; // step: 1594
	float 	fConst180KI; // step: 1598
	float 	fConst181KI; // step: 1606
	float 	fConst182KI; // step: 1607
	float 	fConst183KI; // step: 1611
	float 	fConst184KI; // step: 1614
	float 	fConst185KI; // step: 1617
	float 	fConst186KI; // step: 1618
	float 	fConst187KI; // step: 1621
	// Recursion delay fVec245SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec245SEState; // Single Delay
	float 	fVec244SEState[2]; // Copy Delay
	float 	fConst188KI; // step: 1631
	float 	fConst189KI; // step: 1632
	float 	fConst190KI; // step: 1637
	float 	fConst191KI; // step: 1646
	float 	fConst192KI; // step: 1649
	float 	fConst193KI; // step: 1653
	// Recursion delay fVec250SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec250SEState; // Single Delay
	float 	fVec249SEState[2]; // Copy Delay
	float 	fConst194KI; // step: 1663
	float 	fConst195KI; // step: 1664
	float 	fConst196KI; // step: 1669
	float 	fConst197KI; // step: 1678
	float 	fConst198KI; // step: 1681
	float 	fConst199KI; // step: 1685
	// Recursion delay fVec255SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec255SEState; // Single Delay
	float 	fVec254SEState[2]; // Copy Delay
	float 	fConst200KI; // step: 1698
	float 	fConst201KI; // step: 1701
	float 	fConst202KI; // step: 1705
	// Recursion delay fVec258SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec258SEState; // Single Delay
	float 	fVec257SEState[2]; // Copy Delay
	float 	fConst203KI; // step: 1715
	float 	fConst204KI; // step: 1716
	float 	fConst205KI; // step: 1721
	float 	fConst206KI; // step: 1730
	float 	fConst207KI; // step: 1733
	float 	fConst208KI; // step: 1737
	// Recursion delay fVec263SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec263SEState; // Single Delay
	float 	fVec262SEState[2]; // Copy Delay
	float 	fConst209KI; // step: 1747
	float 	fConst210KI; // step: 1751
	float 	fConst211KI; // step: 1760
	float 	fConst212KI; // step: 1763
	float 	fConst213KI; // step: 1767
	// Recursion delay fVec268SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec268SEState; // Single Delay
	float 	fVec267SEState[2]; // Copy Delay
	float 	fConst214KI; // step: 1777
	float 	fConst215KI; // step: 1781
	float 	fConst216KI; // step: 1789
	float 	fConst217KI; // step: 1790
	float 	fConst218KI; // step: 1794
	float 	fConst219KI; // step: 1797
	float 	fConst220KI; // step: 1800
	float 	fConst221KI; // step: 1801
	float 	fConst222KI; // step: 1804
	// Recursion delay fVec273SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec273SEState; // Single Delay
	float 	fVec272SEState[2]; // Copy Delay
	float 	fConst223KI; // step: 1814
	float 	fConst224KI; // step: 1815
	float 	fConst225KI; // step: 1820
	float 	fConst226KI; // step: 1829
	float 	fConst227KI; // step: 1832
	float 	fConst228KI; // step: 1836
	// Recursion delay fVec278SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec278SEState; // Single Delay
	float 	fVec277SEState[2]; // Copy Delay
	float 	fConst229KI; // step: 1846
	float 	fConst230KI; // step: 1847
	float 	fConst231KI; // step: 1852
	float 	fConst232KI; // step: 1861
	float 	fConst233KI; // step: 1864
	float 	fConst234KI; // step: 1868
	// Recursion delay fVec283SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec283SEState; // Single Delay
	float 	fVec282SEState[2]; // Copy Delay
	float 	fConst235KI; // step: 1881
	float 	fConst236KI; // step: 1884
	float 	fConst237KI; // step: 1888
	// Recursion delay fVec286SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec286SEState; // Single Delay
	float 	fVec285SEState[2]; // Copy Delay
	float 	fConst238KI; // step: 1898
	float 	fConst239KI; // step: 1899
	float 	fConst240KI; // step: 1904
	float 	fConst241KI; // step: 1913
	float 	fConst242KI; // step: 1916
	float 	fConst243KI; // step: 1920
	// Recursion delay fVec291SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec291SEState; // Single Delay
	float 	fVec290SEState[2]; // Copy Delay
	float 	fConst244KI; // step: 1930
	float 	fConst245KI; // step: 1934
	float 	fConst246KI; // step: 1943
	float 	fConst247KI; // step: 1946
	float 	fConst248KI; // step: 1950
	// Recursion delay fVec296SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec296SEState; // Single Delay
	float 	fVec295SEState[2]; // Copy Delay
	float 	fConst249KI; // step: 1960
	float 	fConst250KI; // step: 1964
	float 	fConst251KI; // step: 1972
	float 	fConst252KI; // step: 1973
	float 	fConst253KI; // step: 1977
	float 	fConst254KI; // step: 1980
	float 	fConst255KI; // step: 1983
	float 	fConst256KI; // step: 1984
	float 	fConst257KI; // step: 1987
	// Recursion delay fVec301SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec301SEState; // Single Delay
	float 	fVec300SEState[2]; // Copy Delay
	float 	fConst258KI; // step: 1997
	float 	fConst259KI; // step: 1998
	float 	fConst260KI; // step: 2003
	float 	fConst261KI; // step: 2012
	float 	fConst262KI; // step: 2015
	float 	fConst263KI; // step: 2019
	// Recursion delay fVec306SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec306SEState; // Single Delay
	float 	fVec305SEState[2]; // Copy Delay
	float 	fConst264KI; // step: 2029
	float 	fConst265KI; // step: 2030
	float 	fConst266KI; // step: 2035
	float 	fConst267KI; // step: 2044
	float 	fConst268KI; // step: 2047
	float 	fConst269KI; // step: 2051
	// Recursion delay fVec311SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec311SEState; // Single Delay
	float 	fVec310SEState[2]; // Copy Delay
	float 	fConst270KI; // step: 2064
	float 	fConst271KI; // step: 2067
	float 	fConst272KI; // step: 2071
	// Recursion delay fVec314SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec314SEState; // Single Delay
	float 	fVec313SEState[2]; // Copy Delay
	float 	fConst273KI; // step: 2081
	float 	fConst274KI; // step: 2082
	float 	fConst275KI; // step: 2087
	float 	fConst276KI; // step: 2096
	float 	fConst277KI; // step: 2099
	float 	fConst278KI; // step: 2103
	// Recursion delay fVec319SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec319SEState; // Single Delay
	float 	fVec318SEState[2]; // Copy Delay
	float 	fConst279KI; // step: 2113
	float 	fConst280KI; // step: 2117
	float 	fConst281KI; // step: 2126
	float 	fConst282KI; // step: 2129
	float 	fConst283KI; // step: 2133
	// Recursion delay fVec324SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec324SEState; // Single Delay
	float 	fVec323SEState[2]; // Copy Delay
	float 	fConst284KI; // step: 2143
	float 	fConst285KI; // step: 2147
	float 	fConst286KI; // step: 2155
	float 	fConst287KI; // step: 2156
	float 	fConst288KI; // step: 2160
	float 	fConst289KI; // step: 2163
	float 	fConst290KI; // step: 2166
	float 	fConst291KI; // step: 2167
	float 	fConst292KI; // step: 2170
	// Recursion delay fVec329SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec329SEState; // Single Delay
	float 	fVec328SEState[2]; // Copy Delay
	float 	fConst293KI; // step: 2180
	float 	fConst294KI; // step: 2181
	float 	fConst295KI; // step: 2186
	float 	fConst296KI; // step: 2195
	float 	fConst297KI; // step: 2198
	float 	fConst298KI; // step: 2202
	// Recursion delay fVec334SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec334SEState; // Single Delay
	float 	fVec333SEState[2]; // Copy Delay
	float 	fConst299KI; // step: 2212
	float 	fConst300KI; // step: 2213
	float 	fConst301KI; // step: 2218
	float 	fConst302KI; // step: 2227
	float 	fConst303KI; // step: 2230
	float 	fConst304KI; // step: 2234
	// Recursion delay fVec339SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec339SEState; // Single Delay
	float 	fVec338SEState[2]; // Copy Delay
	float 	fConst305KI; // step: 2247
	float 	fConst306KI; // step: 2250
	float 	fConst307KI; // step: 2254
	// Recursion delay fVec342SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec342SEState; // Single Delay
	float 	fVec341SEState[2]; // Copy Delay
	float 	fConst308KI; // step: 2264
	float 	fConst309KI; // step: 2265
	float 	fConst310KI; // step: 2270
	float 	fConst311KI; // step: 2279
	float 	fConst312KI; // step: 2282
	float 	fConst313KI; // step: 2286
	// Recursion delay fVec347SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec347SEState; // Single Delay
	float 	fVec346SEState[2]; // Copy Delay
	float 	fConst314KI; // step: 2296
	float 	fConst315KI; // step: 2300
	float 	fConst316KI; // step: 2309
	float 	fConst317KI; // step: 2312
	float 	fConst318KI; // step: 2316
	// Recursion delay fVec352SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec352SEState; // Single Delay
	float 	fVec351SEState[2]; // Copy Delay
	float 	fConst319KI; // step: 2326
	float 	fConst320KI; // step: 2330
	float 	fConst321KI; // step: 2338
	float 	fConst322KI; // step: 2339
	float 	fConst323KI; // step: 2343
	float 	fConst324KI; // step: 2346
	float 	fConst325KI; // step: 2349
	float 	fConst326KI; // step: 2350
	float 	fConst327KI; // step: 2353
	// Recursion delay fVec357SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec357SEState; // Single Delay
	float 	fVec356SEState[2]; // Copy Delay
	float 	fConst328KI; // step: 2363
	float 	fConst329KI; // step: 2364
	float 	fConst330KI; // step: 2369
	float 	fConst331KI; // step: 2378
	float 	fConst332KI; // step: 2381
	float 	fConst333KI; // step: 2385
	// Recursion delay fVec362SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec362SEState; // Single Delay
	float 	fVec361SEState[2]; // Copy Delay
	float 	fConst334KI; // step: 2395
	float 	fConst335KI; // step: 2396
	float 	fConst336KI; // step: 2401
	float 	fConst337KI; // step: 2410
	float 	fConst338KI; // step: 2413
	float 	fConst339KI; // step: 2417
	// Recursion delay fVec367SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec367SEState; // Single Delay
	float 	fVec366SEState[2]; // Copy Delay
	float 	fConst340KI; // step: 2430
	float 	fConst341KI; // step: 2433
	float 	fConst342KI; // step: 2437
	// Recursion delay fVec370SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec370SEState; // Single Delay
	float 	fVec369SEState[2]; // Copy Delay
	float 	fConst343KI; // step: 2447
	float 	fConst344KI; // step: 2448
	float 	fConst345KI; // step: 2453
	float 	fConst346KI; // step: 2462
	float 	fConst347KI; // step: 2465
	float 	fConst348KI; // step: 2469
	// Recursion delay fVec375SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec375SEState; // Single Delay
	float 	fVec374SEState[2]; // Copy Delay
	float 	fConst349KI; // step: 2479
	float 	fConst350KI; // step: 2483
	float 	fConst351KI; // step: 2492
	float 	fConst352KI; // step: 2495
	float 	fConst353KI; // step: 2499
	// Recursion delay fVec380SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec380SEState; // Single Delay
	float 	fVec379SEState[2]; // Copy Delay
	float 	fConst354KI; // step: 2509
	float 	fConst355KI; // step: 2513
	float 	fConst356KI; // step: 2521
	float 	fConst357KI; // step: 2522
	float 	fConst358KI; // step: 2526
	float 	fConst359KI; // step: 2529
	float 	fConst360KI; // step: 2532
	float 	fConst361KI; // step: 2533
	float 	fConst362KI; // step: 2536
	// Recursion delay fVec385SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec385SEState; // Single Delay
	float 	fVec384SEState[2]; // Copy Delay
	float 	fConst363KI; // step: 2546
	float 	fConst364KI; // step: 2547
	float 	fConst365KI; // step: 2552
	float 	fConst366KI; // step: 2561
	float 	fConst367KI; // step: 2564
	float 	fConst368KI; // step: 2568
	// Recursion delay fVec390SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec390SEState; // Single Delay
	float 	fVec389SEState[2]; // Copy Delay
	float 	fConst369KI; // step: 2578
	float 	fConst370KI; // step: 2579
	float 	fConst371KI; // step: 2584
	float 	fConst372KI; // step: 2593
	float 	fConst373KI; // step: 2596
	float 	fConst374KI; // step: 2600
	// Recursion delay fVec395SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec395SEState; // Single Delay
	float 	fVec394SEState[2]; // Copy Delay
	float 	fConst375KI; // step: 2613
	float 	fConst376KI; // step: 2616
	float 	fConst377KI; // step: 2620
	// Recursion delay fVec398SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec398SEState; // Single Delay
	float 	fVec397SEState[2]; // Copy Delay
	float 	fConst378KI; // step: 2630
	float 	fConst379KI; // step: 2631
	float 	fConst380KI; // step: 2636
	float 	fConst381KI; // step: 2645
	float 	fConst382KI; // step: 2648
	float 	fConst383KI; // step: 2652
	// Recursion delay fVec403SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec403SEState; // Single Delay
	float 	fVec402SEState[2]; // Copy Delay
	float 	fConst384KI; // step: 2662
	float 	fConst385KI; // step: 2666
	float 	fConst386KI; // step: 2675
	float 	fConst387KI; // step: 2678
	float 	fConst388KI; // step: 2682
	// Recursion delay fVec408SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec408SEState; // Single Delay
	float 	fVec407SEState[2]; // Copy Delay
	float 	fConst389KI; // step: 2692
	float 	fConst390KI; // step: 2696
	float 	fConst391KI; // step: 2704
	float 	fConst392KI; // step: 2705
	float 	fConst393KI; // step: 2709
	float 	fConst394KI; // step: 2712
	float 	fConst395KI; // step: 2715
	float 	fConst396KI; // step: 2716
	float 	fConst397KI; // step: 2719
	// Recursion delay fVec413SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec413SEState; // Single Delay
	float 	fVec412SEState[2]; // Copy Delay
	float 	fConst398KI; // step: 2729
	float 	fConst399KI; // step: 2730
	float 	fConst400KI; // step: 2735
	float 	fConst401KI; // step: 2744
	float 	fConst402KI; // step: 2747
	float 	fConst403KI; // step: 2751
	// Recursion delay fVec418SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec418SEState; // Single Delay
	float 	fVec417SEState[2]; // Copy Delay
	float 	fConst404KI; // step: 2761
	float 	fConst405KI; // step: 2762
	float 	fConst406KI; // step: 2767
	float 	fConst407KI; // step: 2776
	float 	fConst408KI; // step: 2779
	float 	fConst409KI; // step: 2783
	// Recursion delay fVec423SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec423SEState; // Single Delay
	float 	fVec422SEState[2]; // Copy Delay
	float 	fConst410KI; // step: 2796
	float 	fConst411KI; // step: 2799
	float 	fConst412KI; // step: 2803
	// Recursion delay fVec426SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec426SEState; // Single Delay
	float 	fVec425SEState[2]; // Copy Delay
	float 	fConst413KI; // step: 2813
	float 	fConst414KI; // step: 2814
	float 	fConst415KI; // step: 2819
	float 	fConst416KI; // step: 2828
	float 	fConst417KI; // step: 2831
	float 	fConst418KI; // step: 2835
	// Recursion delay fVec431SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec431SEState; // Single Delay
	float 	fVec430SEState[2]; // Copy Delay
	float 	fConst419KI; // step: 2845
	float 	fConst420KI; // step: 2849
	float 	fConst421KI; // step: 2858
	float 	fConst422KI; // step: 2861
	float 	fConst423KI; // step: 2865
	// Recursion delay fVec436SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec436SEState; // Single Delay
	float 	fVec435SEState[2]; // Copy Delay
	float 	fConst424KI; // step: 2875
	float 	fConst425KI; // step: 2879
	float 	fConst426KI; // step: 2887
	float 	fConst427KI; // step: 2888
	float 	fConst428KI; // step: 2892
	float 	fConst429KI; // step: 2895
	float 	fConst430KI; // step: 2898
	float 	fConst431KI; // step: 2899
	float 	fConst432KI; // step: 2902
	// Recursion delay fVec441SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec441SEState; // Single Delay
	float 	fVec440SEState[2]; // Copy Delay
	float 	fConst433KI; // step: 2912
	float 	fConst434KI; // step: 2913
	float 	fConst435KI; // step: 2918
	float 	fConst436KI; // step: 2927
	float 	fConst437KI; // step: 2930
	float 	fConst438KI; // step: 2934
	// Recursion delay fVec446SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec446SEState; // Single Delay
	float 	fVec445SEState[2]; // Copy Delay
	float 	fConst439KI; // step: 2944
	float 	fConst440KI; // step: 2945
	float 	fConst441KI; // step: 2950
	float 	fConst442KI; // step: 2959
	float 	fConst443KI; // step: 2962
	float 	fConst444KI; // step: 2966
	// Recursion delay fVec451SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec451SEState; // Single Delay
	float 	fVec450SEState[2]; // Copy Delay
	float 	fConst445KI; // step: 2979
	float 	fConst446KI; // step: 2982
	float 	fConst447KI; // step: 2986
	// Recursion delay fVec454SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec454SEState; // Single Delay
	float 	fVec453SEState[2]; // Copy Delay
	float 	fConst448KI; // step: 2996
	float 	fConst449KI; // step: 2997
	float 	fConst450KI; // step: 3002
	float 	fConst451KI; // step: 3011
	float 	fConst452KI; // step: 3014
	float 	fConst453KI; // step: 3018
	// Recursion delay fVec459SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec459SEState; // Single Delay
	float 	fVec458SEState[2]; // Copy Delay
	float 	fConst454KI; // step: 3028
	float 	fConst455KI; // step: 3032
	float 	fConst456KI; // step: 3041
	float 	fConst457KI; // step: 3044
	float 	fConst458KI; // step: 3048
	// Recursion delay fVec464SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec464SEState; // Single Delay
	float 	fVec463SEState[2]; // Copy Delay
	float 	fConst459KI; // step: 3058
	float 	fConst460KI; // step: 3062
	float 	fConst461KI; // step: 3070
	float 	fConst462KI; // step: 3071
	float 	fConst463KI; // step: 3075
	float 	fConst464KI; // step: 3078
	float 	fConst465KI; // step: 3081
	float 	fConst466KI; // step: 3082
	float 	fConst467KI; // step: 3085
	// Recursion delay fVec469SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec469SEState; // Single Delay
	float 	fVec468SEState[2]; // Copy Delay
	float 	fConst468KI; // step: 3095
	float 	fConst469KI; // step: 3096
	float 	fConst470KI; // step: 3101
	float 	fConst471KI; // step: 3110
	float 	fConst472KI; // step: 3113
	float 	fConst473KI; // step: 3117
	// Recursion delay fVec474SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec474SEState; // Single Delay
	float 	fVec473SEState[2]; // Copy Delay
	float 	fConst474KI; // step: 3127
	float 	fConst475KI; // step: 3128
	float 	fConst476KI; // step: 3133
	float 	fConst477KI; // step: 3142
	float 	fConst478KI; // step: 3145
	float 	fConst479KI; // step: 3149
	// Recursion delay fVec479SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec479SEState; // Single Delay
	float 	fVec478SEState[2]; // Copy Delay
	float 	fConst480KI; // step: 3162
	float 	fConst481KI; // step: 3165
	float 	fConst482KI; // step: 3169
	// Recursion delay fVec482SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec482SEState; // Single Delay
	float 	fVec481SEState[2]; // Copy Delay
	float 	fConst483KI; // step: 3179
	float 	fConst484KI; // step: 3180
	float 	fConst485KI; // step: 3185
	float 	fConst486KI; // step: 3194
	float 	fConst487KI; // step: 3197
	float 	fConst488KI; // step: 3201
	// Recursion delay fVec487SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec487SEState; // Single Delay
	float 	fVec486SEState[2]; // Copy Delay
	float 	fConst489KI; // step: 3211
	float 	fConst490KI; // step: 3215
	float 	fConst491KI; // step: 3224
	float 	fConst492KI; // step: 3227
	float 	fConst493KI; // step: 3231
	// Recursion delay fVec492SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec492SEState; // Single Delay
	float 	fVec491SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	float 	fConst494KI; // step: 3244
	float 	fConst495KI; // step: 3253
	float 	fConst496KI; // step: 3254
	float 	fConst497KI; // step: 3259
	// Recursion delay fVec494SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec494SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst498KI; // step: 3282
	float 	fConst499KI; // step: 3283
	float 	fConst500KI; // step: 3288
	// Recursion delay fVec498SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec498SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst501KI; // step: 3307
	float 	fConst502KI; // step: 3308
	float 	fConst503KI; // step: 3313
	// Recursion delay fVec502SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec502SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst504KI; // step: 3332
	float 	fConst505KI; // step: 3333
	float 	fConst506KI; // step: 3338
	// Recursion delay fVec506SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec506SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst507KI; // step: 3357
	float 	fConst508KI; // step: 3358
	float 	fConst509KI; // step: 3363
	// Recursion delay fVec510SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec510SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst510KI; // step: 3382
	float 	fConst511KI; // step: 3383
	float 	fConst512KI; // step: 3388
	// Recursion delay fVec514SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec514SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst513KI; // step: 3407
	float 	fConst514KI; // step: 3408
	float 	fConst515KI; // step: 3413
	// Recursion delay fVec518SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec518SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst516KI; // step: 3432
	float 	fConst517KI; // step: 3433
	float 	fConst518KI; // step: 3438
	// Recursion delay fVec522SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec522SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst519KI; // step: 3457
	float 	fConst520KI; // step: 3458
	float 	fConst521KI; // step: 3463
	// Recursion delay fVec526SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec526SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst522KI; // step: 3482
	float 	fConst523KI; // step: 3483
	float 	fConst524KI; // step: 3488
	// Recursion delay fVec530SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec530SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst525KI; // step: 3507
	float 	fConst526KI; // step: 3508
	float 	fConst527KI; // step: 3513
	// Recursion delay fVec534SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec534SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst528KI; // step: 3532
	float 	fConst529KI; // step: 3533
	float 	fConst530KI; // step: 3538
	// Recursion delay fVec538SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec538SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst531KI; // step: 3557
	float 	fConst532KI; // step: 3558
	float 	fConst533KI; // step: 3563
	// Recursion delay fVec542SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec542SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	float 	fConst534KI; // step: 3582
	float 	fConst535KI; // step: 3583
	float 	fConst536KI; // step: 3588
	// Recursion delay fVec546SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec546SEState; // Single Delay
	FAUSTFLOAT 	fbargraph15;
	float 	fConst537KI; // step: 3607
	float 	fConst538KI; // step: 3611
	// Recursion delay fVec550SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec550SEState; // Single Delay
	FAUSTFLOAT 	fbargraph16;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/amp_follower_ar:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/amp_follower_ar:copyright", "Julius O. Smith III");
		m->declare("effect.lib/amp_follower_ar:license", "STK-4.3");
		m->declare("effect.lib/bypass2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass2:license", "STK-4.3");
		m->declare("effect.lib/compression_gain_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compression_gain_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compression_gain_mono:license", "STK-4.3");
		m->declare("effect.lib/compressor_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compressor_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compressor_demo:license", "STK-4.3");
		m->declare("effect.lib/compressor_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compressor_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compressor_stereo:license", "STK-4.3");
		m->declare("effect.lib/cross2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cross2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cross2:license", "STK-4.3");
		m->declare("effect.lib/gate_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_demo:license", "STK-4.3");
		m->declare("effect.lib/gate_gain_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_gain_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_gain_mono:license", "STK-4.3");
		m->declare("effect.lib/gate_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_stereo:license", "STK-4.3");
		m->declare("effect.lib/lag_ud:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/lag_ud:copyright", "Julius O. Smith III");
		m->declare("effect.lib/lag_ud:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/select2stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/select2stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/select2stereo:license", "STK-4.3");
		m->declare("filename", "gate_compressor.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "gate_compressor");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 270
		fConst3KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 283
		fConst4KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 294
		fConst5KI = (2.0f / fConst0KI); // step: 532
		fConst6KI = tanf((50265.484f / fConst0KI)); // step: 667
		fConst7KI = (1.0f / fConst6KI); // step: 669
		fConst8KI = (1.0f / (((fConst7KI + 3.1897273f /* Sum */) / fConst6KI) + 4.0767817f /* Sum */)); // step: 673
		fConst9KI = (((fConst7KI + -3.1897273f /* Sum */) / fConst6KI) + 4.0767817f /* Sum */); // step: 677
		fConst10KI = powf(fConst6KI,2.0f); // step: 680
		fConst11KI = (1.0f / fConst10KI); // step: 681
		fConst12KI = (2.0f * (4.0767817f + -fConst11KI /* Sum */)); // step: 684
		fConst13KI = (0.0017661728f / fConst10KI); // step: 696
		fConst14KI = (fConst13KI + 0.0004076782f /* Sum */); // step: 697
		fConst15KI = (2.0f * (0.0004076782f + -fConst13KI /* Sum */)); // step: 702
		fConst16KI = (1.0f / (((fConst7KI + 0.74313045f /* Sum */) / fConst6KI) + 1.4500711f /* Sum */)); // step: 713
		fConst17KI = (((fConst7KI + -0.74313045f /* Sum */) / fConst6KI) + 1.4500711f /* Sum */); // step: 717
		fConst18KI = (2.0f * (1.4500711f + -fConst11KI /* Sum */)); // step: 721
		fConst19KI = (11.0520525f / fConst10KI); // step: 732
		fConst20KI = (fConst19KI + 1.4500711f /* Sum */); // step: 733
		fConst21KI = (2.0f * (1.4500711f + -fConst19KI /* Sum */)); // step: 738
		fConst22KI = (1.0f / (((fConst7KI + 0.15748216f /* Sum */) / fConst6KI) + 0.9351402f /* Sum */)); // step: 749
		fConst23KI = (((fConst7KI + -0.15748216f /* Sum */) / fConst6KI) + 0.9351402f /* Sum */); // step: 753
		fConst24KI = (2.0f * (0.9351402f + -fConst11KI /* Sum */)); // step: 757
		fConst25KI = (1.0f / (((fConst7KI + 0.78241307f /* Sum */) / fConst6KI) + 0.2452915f /* Sum */)); // step: 772
		fConst26KI = (((fConst7KI + -0.78241307f /* Sum */) / fConst6KI) + 0.2452915f /* Sum */); // step: 776
		fConst27KI = (2.0f * (0.2452915f + -fConst11KI /* Sum */)); // step: 780
		fConst28KI = (0.0001f / fConst10KI); // step: 792
		fConst29KI = (fConst28KI + 0.0004332272f /* Sum */); // step: 793
		fConst30KI = (2.0f * (0.0004332272f + -fConst28KI /* Sum */)); // step: 798
		fConst31KI = (1.0f / (((fConst7KI + 0.51247865f /* Sum */) / fConst6KI) + 0.6896214f /* Sum */)); // step: 809
		fConst32KI = (((fConst7KI + -0.51247865f /* Sum */) / fConst6KI) + 0.6896214f /* Sum */); // step: 813
		fConst33KI = (2.0f * (0.6896214f + -fConst11KI /* Sum */)); // step: 817
		fConst34KI = (fConst11KI + 7.6217313f /* Sum */); // step: 828
		fConst35KI = (2.0f * (7.6217313f + -fConst11KI /* Sum */)); // step: 832
		fConst36KI = (1.0f / (((fConst7KI + 0.16840488f /* Sum */) / fConst6KI) + 1.0693583f /* Sum */)); // step: 843
		fConst37KI = (((fConst7KI + -0.16840488f /* Sum */) / fConst6KI) + 1.0693583f /* Sum */); // step: 847
		fConst38KI = (2.0f * (1.0693583f + -fConst11KI /* Sum */)); // step: 851
		fConst39KI = (fConst11KI + 53.53615f /* Sum */); // step: 862
		fConst40KI = (2.0f * (53.53615f + -fConst11KI /* Sum */)); // step: 866
		fConst41KI = tanf((31665.27f / fConst0KI)); // step: 874
		fConst42KI = (1.0f / fConst41KI); // step: 875
		fConst43KI = (1.0f / (((fConst42KI + 3.1897273f /* Sum */) / fConst41KI) + 4.0767817f /* Sum */)); // step: 879
		fConst44KI = (((fConst42KI + -3.1897273f /* Sum */) / fConst41KI) + 4.0767817f /* Sum */); // step: 882
		fConst45KI = powf(fConst41KI,2.0f); // step: 885
		fConst46KI = (1.0f / fConst45KI); // step: 886
		fConst47KI = (2.0f * (4.0767817f + -fConst46KI /* Sum */)); // step: 889
		fConst48KI = (0.0017661728f / fConst45KI); // step: 899
		fConst49KI = (fConst48KI + 0.0004076782f /* Sum */); // step: 900
		fConst50KI = (2.0f * (0.0004076782f + -fConst48KI /* Sum */)); // step: 905
		fConst51KI = (1.0f / (((fConst42KI + 0.74313045f /* Sum */) / fConst41KI) + 1.4500711f /* Sum */)); // step: 914
		fConst52KI = (((fConst42KI + -0.74313045f /* Sum */) / fConst41KI) + 1.4500711f /* Sum */); // step: 917
		fConst53KI = (2.0f * (1.4500711f + -fConst46KI /* Sum */)); // step: 921
		fConst54KI = (11.0520525f / fConst45KI); // step: 931
		fConst55KI = (fConst54KI + 1.4500711f /* Sum */); // step: 932
		fConst56KI = (2.0f * (1.4500711f + -fConst54KI /* Sum */)); // step: 937
		fConst57KI = (1.0f / (((fConst42KI + 0.15748216f /* Sum */) / fConst41KI) + 0.9351402f /* Sum */)); // step: 946
		fConst58KI = (((fConst42KI + -0.15748216f /* Sum */) / fConst41KI) + 0.9351402f /* Sum */); // step: 949
		fConst59KI = (2.0f * (0.9351402f + -fConst46KI /* Sum */)); // step: 953
		fConst60KI = (1.0f / (((fConst42KI + 0.78241307f /* Sum */) / fConst41KI) + 0.2452915f /* Sum */)); // step: 966
		fConst61KI = (((fConst42KI + -0.78241307f /* Sum */) / fConst41KI) + 0.2452915f /* Sum */); // step: 969
		fConst62KI = (2.0f * (0.2452915f + -fConst46KI /* Sum */)); // step: 973
		fConst63KI = (0.0001f / fConst45KI); // step: 983
		fConst64KI = (fConst63KI + 0.0004332272f /* Sum */); // step: 984
		fConst65KI = (2.0f * (0.0004332272f + -fConst63KI /* Sum */)); // step: 989
		fConst66KI = (1.0f / (((fConst42KI + 0.51247865f /* Sum */) / fConst41KI) + 0.6896214f /* Sum */)); // step: 998
		fConst67KI = (((fConst42KI + -0.51247865f /* Sum */) / fConst41KI) + 0.6896214f /* Sum */); // step: 1001
		fConst68KI = (2.0f * (0.6896214f + -fConst46KI /* Sum */)); // step: 1005
		fConst69KI = (fConst46KI + 7.6217313f /* Sum */); // step: 1015
		fConst70KI = (2.0f * (7.6217313f + -fConst46KI /* Sum */)); // step: 1019
		fConst71KI = (1.0f / (((fConst42KI + 0.16840488f /* Sum */) / fConst41KI) + 1.0693583f /* Sum */)); // step: 1028
		fConst72KI = (((fConst42KI + -0.16840488f /* Sum */) / fConst41KI) + 1.0693583f /* Sum */); // step: 1031
		fConst73KI = (2.0f * (1.0693583f + -fConst46KI /* Sum */)); // step: 1035
		fConst74KI = (fConst46KI + 53.53615f /* Sum */); // step: 1045
		fConst75KI = (2.0f * (53.53615f + -fConst46KI /* Sum */)); // step: 1049
		fConst76KI = tanf((19947.87f / fConst0KI)); // step: 1057
		fConst77KI = (1.0f / fConst76KI); // step: 1058
		fConst78KI = (1.0f / (((fConst77KI + 3.1897273f /* Sum */) / fConst76KI) + 4.0767817f /* Sum */)); // step: 1062
		fConst79KI = (((fConst77KI + -3.1897273f /* Sum */) / fConst76KI) + 4.0767817f /* Sum */); // step: 1065
		fConst80KI = powf(fConst76KI,2.0f); // step: 1068
		fConst81KI = (1.0f / fConst80KI); // step: 1069
		fConst82KI = (2.0f * (4.0767817f + -fConst81KI /* Sum */)); // step: 1072
		fConst83KI = (0.0017661728f / fConst80KI); // step: 1082
		fConst84KI = (fConst83KI + 0.0004076782f /* Sum */); // step: 1083
		fConst85KI = (2.0f * (0.0004076782f + -fConst83KI /* Sum */)); // step: 1088
		fConst86KI = (1.0f / (((fConst77KI + 0.74313045f /* Sum */) / fConst76KI) + 1.4500711f /* Sum */)); // step: 1097
		fConst87KI = (((fConst77KI + -0.74313045f /* Sum */) / fConst76KI) + 1.4500711f /* Sum */); // step: 1100
		fConst88KI = (2.0f * (1.4500711f + -fConst81KI /* Sum */)); // step: 1104
		fConst89KI = (11.0520525f / fConst80KI); // step: 1114
		fConst90KI = (fConst89KI + 1.4500711f /* Sum */); // step: 1115
		fConst91KI = (2.0f * (1.4500711f + -fConst89KI /* Sum */)); // step: 1120
		fConst92KI = (1.0f / (((fConst77KI + 0.15748216f /* Sum */) / fConst76KI) + 0.9351402f /* Sum */)); // step: 1129
		fConst93KI = (((fConst77KI + -0.15748216f /* Sum */) / fConst76KI) + 0.9351402f /* Sum */); // step: 1132
		fConst94KI = (2.0f * (0.9351402f + -fConst81KI /* Sum */)); // step: 1136
		fConst95KI = (1.0f / (((fConst77KI + 0.78241307f /* Sum */) / fConst76KI) + 0.2452915f /* Sum */)); // step: 1149
		fConst96KI = (((fConst77KI + -0.78241307f /* Sum */) / fConst76KI) + 0.2452915f /* Sum */); // step: 1152
		fConst97KI = (2.0f * (0.2452915f + -fConst81KI /* Sum */)); // step: 1156
		fConst98KI = (0.0001f / fConst80KI); // step: 1166
		fConst99KI = (fConst98KI + 0.0004332272f /* Sum */); // step: 1167
		fConst100KI = (2.0f * (0.0004332272f + -fConst98KI /* Sum */)); // step: 1172
		fConst101KI = (1.0f / (((fConst77KI + 0.51247865f /* Sum */) / fConst76KI) + 0.6896214f /* Sum */)); // step: 1181
		fConst102KI = (((fConst77KI + -0.51247865f /* Sum */) / fConst76KI) + 0.6896214f /* Sum */); // step: 1184
		fConst103KI = (2.0f * (0.6896214f + -fConst81KI /* Sum */)); // step: 1188
		fConst104KI = (fConst81KI + 7.6217313f /* Sum */); // step: 1198
		fConst105KI = (2.0f * (7.6217313f + -fConst81KI /* Sum */)); // step: 1202
		fConst106KI = (1.0f / (((fConst77KI + 0.16840488f /* Sum */) / fConst76KI) + 1.0693583f /* Sum */)); // step: 1211
		fConst107KI = (((fConst77KI + -0.16840488f /* Sum */) / fConst76KI) + 1.0693583f /* Sum */); // step: 1214
		fConst108KI = (2.0f * (1.0693583f + -fConst81KI /* Sum */)); // step: 1218
		fConst109KI = (fConst81KI + 53.53615f /* Sum */); // step: 1228
		fConst110KI = (2.0f * (53.53615f + -fConst81KI /* Sum */)); // step: 1232
		fConst111KI = tanf((12566.371f / fConst0KI)); // step: 1240
		fConst112KI = (1.0f / fConst111KI); // step: 1241
		fConst113KI = (1.0f / (((fConst112KI + 3.1897273f /* Sum */) / fConst111KI) + 4.0767817f /* Sum */)); // step: 1245
		fConst114KI = (((fConst112KI + -3.1897273f /* Sum */) / fConst111KI) + 4.0767817f /* Sum */); // step: 1248
		fConst115KI = powf(fConst111KI,2.0f); // step: 1251
		fConst116KI = (1.0f / fConst115KI); // step: 1252
		fConst117KI = (2.0f * (4.0767817f + -fConst116KI /* Sum */)); // step: 1255
		fConst118KI = (0.0017661728f / fConst115KI); // step: 1265
		fConst119KI = (fConst118KI + 0.0004076782f /* Sum */); // step: 1266
		fConst120KI = (2.0f * (0.0004076782f + -fConst118KI /* Sum */)); // step: 1271
		fConst121KI = (1.0f / (((fConst112KI + 0.74313045f /* Sum */) / fConst111KI) + 1.4500711f /* Sum */)); // step: 1280
		fConst122KI = (((fConst112KI + -0.74313045f /* Sum */) / fConst111KI) + 1.4500711f /* Sum */); // step: 1283
		fConst123KI = (2.0f * (1.4500711f + -fConst116KI /* Sum */)); // step: 1287
		fConst124KI = (11.0520525f / fConst115KI); // step: 1297
		fConst125KI = (fConst124KI + 1.4500711f /* Sum */); // step: 1298
		fConst126KI = (2.0f * (1.4500711f + -fConst124KI /* Sum */)); // step: 1303
		fConst127KI = (1.0f / (((fConst112KI + 0.15748216f /* Sum */) / fConst111KI) + 0.9351402f /* Sum */)); // step: 1312
		fConst128KI = (((fConst112KI + -0.15748216f /* Sum */) / fConst111KI) + 0.9351402f /* Sum */); // step: 1315
		fConst129KI = (2.0f * (0.9351402f + -fConst116KI /* Sum */)); // step: 1319
		fConst130KI = (1.0f / (((fConst112KI + 0.78241307f /* Sum */) / fConst111KI) + 0.2452915f /* Sum */)); // step: 1332
		fConst131KI = (((fConst112KI + -0.78241307f /* Sum */) / fConst111KI) + 0.2452915f /* Sum */); // step: 1335
		fConst132KI = (2.0f * (0.2452915f + -fConst116KI /* Sum */)); // step: 1339
		fConst133KI = (0.0001f / fConst115KI); // step: 1349
		fConst134KI = (fConst133KI + 0.0004332272f /* Sum */); // step: 1350
		fConst135KI = (2.0f * (0.0004332272f + -fConst133KI /* Sum */)); // step: 1355
		fConst136KI = (1.0f / (((fConst112KI + 0.51247865f /* Sum */) / fConst111KI) + 0.6896214f /* Sum */)); // step: 1364
		fConst137KI = (((fConst112KI + -0.51247865f /* Sum */) / fConst111KI) + 0.6896214f /* Sum */); // step: 1367
		fConst138KI = (2.0f * (0.6896214f + -fConst116KI /* Sum */)); // step: 1371
		fConst139KI = (fConst116KI + 7.6217313f /* Sum */); // step: 1381
		fConst140KI = (2.0f * (7.6217313f + -fConst116KI /* Sum */)); // step: 1385
		fConst141KI = (1.0f / (((fConst112KI + 0.16840488f /* Sum */) / fConst111KI) + 1.0693583f /* Sum */)); // step: 1394
		fConst142KI = (((fConst112KI + -0.16840488f /* Sum */) / fConst111KI) + 1.0693583f /* Sum */); // step: 1397
		fConst143KI = (2.0f * (1.0693583f + -fConst116KI /* Sum */)); // step: 1401
		fConst144KI = (fConst116KI + 53.53615f /* Sum */); // step: 1411
		fConst145KI = (2.0f * (53.53615f + -fConst116KI /* Sum */)); // step: 1415
		fConst146KI = tanf((7916.3174f / fConst0KI)); // step: 1423
		fConst147KI = (1.0f / fConst146KI); // step: 1424
		fConst148KI = (1.0f / (((fConst147KI + 3.1897273f /* Sum */) / fConst146KI) + 4.0767817f /* Sum */)); // step: 1428
		fConst149KI = (((fConst147KI + -3.1897273f /* Sum */) / fConst146KI) + 4.0767817f /* Sum */); // step: 1431
		fConst150KI = powf(fConst146KI,2.0f); // step: 1434
		fConst151KI = (1.0f / fConst150KI); // step: 1435
		fConst152KI = (2.0f * (4.0767817f + -fConst151KI /* Sum */)); // step: 1438
		fConst153KI = (0.0017661728f / fConst150KI); // step: 1448
		fConst154KI = (fConst153KI + 0.0004076782f /* Sum */); // step: 1449
		fConst155KI = (2.0f * (0.0004076782f + -fConst153KI /* Sum */)); // step: 1454
		fConst156KI = (1.0f / (((fConst147KI + 0.74313045f /* Sum */) / fConst146KI) + 1.4500711f /* Sum */)); // step: 1463
		fConst157KI = (((fConst147KI + -0.74313045f /* Sum */) / fConst146KI) + 1.4500711f /* Sum */); // step: 1466
		fConst158KI = (2.0f * (1.4500711f + -fConst151KI /* Sum */)); // step: 1470
		fConst159KI = (11.0520525f / fConst150KI); // step: 1480
		fConst160KI = (fConst159KI + 1.4500711f /* Sum */); // step: 1481
		fConst161KI = (2.0f * (1.4500711f + -fConst159KI /* Sum */)); // step: 1486
		fConst162KI = (1.0f / (((fConst147KI + 0.15748216f /* Sum */) / fConst146KI) + 0.9351402f /* Sum */)); // step: 1495
		fConst163KI = (((fConst147KI + -0.15748216f /* Sum */) / fConst146KI) + 0.9351402f /* Sum */); // step: 1498
		fConst164KI = (2.0f * (0.9351402f + -fConst151KI /* Sum */)); // step: 1502
		fConst165KI = (1.0f / (((fConst147KI + 0.78241307f /* Sum */) / fConst146KI) + 0.2452915f /* Sum */)); // step: 1515
		fConst166KI = (((fConst147KI + -0.78241307f /* Sum */) / fConst146KI) + 0.2452915f /* Sum */); // step: 1518
		fConst167KI = (2.0f * (0.2452915f + -fConst151KI /* Sum */)); // step: 1522
		fConst168KI = (0.0001f / fConst150KI); // step: 1532
		fConst169KI = (fConst168KI + 0.0004332272f /* Sum */); // step: 1533
		fConst170KI = (2.0f * (0.0004332272f + -fConst168KI /* Sum */)); // step: 1538
		fConst171KI = (1.0f / (((fConst147KI + 0.51247865f /* Sum */) / fConst146KI) + 0.6896214f /* Sum */)); // step: 1547
		fConst172KI = (((fConst147KI + -0.51247865f /* Sum */) / fConst146KI) + 0.6896214f /* Sum */); // step: 1550
		fConst173KI = (2.0f * (0.6896214f + -fConst151KI /* Sum */)); // step: 1554
		fConst174KI = (fConst151KI + 7.6217313f /* Sum */); // step: 1564
		fConst175KI = (2.0f * (7.6217313f + -fConst151KI /* Sum */)); // step: 1568
		fConst176KI = (1.0f / (((fConst147KI + 0.16840488f /* Sum */) / fConst146KI) + 1.0693583f /* Sum */)); // step: 1577
		fConst177KI = (((fConst147KI + -0.16840488f /* Sum */) / fConst146KI) + 1.0693583f /* Sum */); // step: 1580
		fConst178KI = (2.0f * (1.0693583f + -fConst151KI /* Sum */)); // step: 1584
		fConst179KI = (fConst151KI + 53.53615f /* Sum */); // step: 1594
		fConst180KI = (2.0f * (53.53615f + -fConst151KI /* Sum */)); // step: 1598
		fConst181KI = tanf((4986.9673f / fConst0KI)); // step: 1606
		fConst182KI = (1.0f / fConst181KI); // step: 1607
		fConst183KI = (1.0f / (((fConst182KI + 3.1897273f /* Sum */) / fConst181KI) + 4.0767817f /* Sum */)); // step: 1611
		fConst184KI = (((fConst182KI + -3.1897273f /* Sum */) / fConst181KI) + 4.0767817f /* Sum */); // step: 1614
		fConst185KI = powf(fConst181KI,2.0f); // step: 1617
		fConst186KI = (1.0f / fConst185KI); // step: 1618
		fConst187KI = (2.0f * (4.0767817f + -fConst186KI /* Sum */)); // step: 1621
		fConst188KI = (0.0017661728f / fConst185KI); // step: 1631
		fConst189KI = (fConst188KI + 0.0004076782f /* Sum */); // step: 1632
		fConst190KI = (2.0f * (0.0004076782f + -fConst188KI /* Sum */)); // step: 1637
		fConst191KI = (1.0f / (((fConst182KI + 0.74313045f /* Sum */) / fConst181KI) + 1.4500711f /* Sum */)); // step: 1646
		fConst192KI = (((fConst182KI + -0.74313045f /* Sum */) / fConst181KI) + 1.4500711f /* Sum */); // step: 1649
		fConst193KI = (2.0f * (1.4500711f + -fConst186KI /* Sum */)); // step: 1653
		fConst194KI = (11.0520525f / fConst185KI); // step: 1663
		fConst195KI = (fConst194KI + 1.4500711f /* Sum */); // step: 1664
		fConst196KI = (2.0f * (1.4500711f + -fConst194KI /* Sum */)); // step: 1669
		fConst197KI = (1.0f / (((fConst182KI + 0.15748216f /* Sum */) / fConst181KI) + 0.9351402f /* Sum */)); // step: 1678
		fConst198KI = (((fConst182KI + -0.15748216f /* Sum */) / fConst181KI) + 0.9351402f /* Sum */); // step: 1681
		fConst199KI = (2.0f * (0.9351402f + -fConst186KI /* Sum */)); // step: 1685
		fConst200KI = (1.0f / (((fConst182KI + 0.78241307f /* Sum */) / fConst181KI) + 0.2452915f /* Sum */)); // step: 1698
		fConst201KI = (((fConst182KI + -0.78241307f /* Sum */) / fConst181KI) + 0.2452915f /* Sum */); // step: 1701
		fConst202KI = (2.0f * (0.2452915f + -fConst186KI /* Sum */)); // step: 1705
		fConst203KI = (0.0001f / fConst185KI); // step: 1715
		fConst204KI = (fConst203KI + 0.0004332272f /* Sum */); // step: 1716
		fConst205KI = (2.0f * (0.0004332272f + -fConst203KI /* Sum */)); // step: 1721
		fConst206KI = (1.0f / (((fConst182KI + 0.51247865f /* Sum */) / fConst181KI) + 0.6896214f /* Sum */)); // step: 1730
		fConst207KI = (((fConst182KI + -0.51247865f /* Sum */) / fConst181KI) + 0.6896214f /* Sum */); // step: 1733
		fConst208KI = (2.0f * (0.6896214f + -fConst186KI /* Sum */)); // step: 1737
		fConst209KI = (fConst186KI + 7.6217313f /* Sum */); // step: 1747
		fConst210KI = (2.0f * (7.6217313f + -fConst186KI /* Sum */)); // step: 1751
		fConst211KI = (1.0f / (((fConst182KI + 0.16840488f /* Sum */) / fConst181KI) + 1.0693583f /* Sum */)); // step: 1760
		fConst212KI = (((fConst182KI + -0.16840488f /* Sum */) / fConst181KI) + 1.0693583f /* Sum */); // step: 1763
		fConst213KI = (2.0f * (1.0693583f + -fConst186KI /* Sum */)); // step: 1767
		fConst214KI = (fConst186KI + 53.53615f /* Sum */); // step: 1777
		fConst215KI = (2.0f * (53.53615f + -fConst186KI /* Sum */)); // step: 1781
		fConst216KI = tanf((3141.5928f / fConst0KI)); // step: 1789
		fConst217KI = (1.0f / fConst216KI); // step: 1790
		fConst218KI = (1.0f / (((fConst217KI + 3.1897273f /* Sum */) / fConst216KI) + 4.0767817f /* Sum */)); // step: 1794
		fConst219KI = (((fConst217KI + -3.1897273f /* Sum */) / fConst216KI) + 4.0767817f /* Sum */); // step: 1797
		fConst220KI = powf(fConst216KI,2.0f); // step: 1800
		fConst221KI = (1.0f / fConst220KI); // step: 1801
		fConst222KI = (2.0f * (4.0767817f + -fConst221KI /* Sum */)); // step: 1804
		fConst223KI = (0.0017661728f / fConst220KI); // step: 1814
		fConst224KI = (fConst223KI + 0.0004076782f /* Sum */); // step: 1815
		fConst225KI = (2.0f * (0.0004076782f + -fConst223KI /* Sum */)); // step: 1820
		fConst226KI = (1.0f / (((fConst217KI + 0.74313045f /* Sum */) / fConst216KI) + 1.4500711f /* Sum */)); // step: 1829
		fConst227KI = (((fConst217KI + -0.74313045f /* Sum */) / fConst216KI) + 1.4500711f /* Sum */); // step: 1832
		fConst228KI = (2.0f * (1.4500711f + -fConst221KI /* Sum */)); // step: 1836
		fConst229KI = (11.0520525f / fConst220KI); // step: 1846
		fConst230KI = (fConst229KI + 1.4500711f /* Sum */); // step: 1847
		fConst231KI = (2.0f * (1.4500711f + -fConst229KI /* Sum */)); // step: 1852
		fConst232KI = (1.0f / (((fConst217KI + 0.15748216f /* Sum */) / fConst216KI) + 0.9351402f /* Sum */)); // step: 1861
		fConst233KI = (((fConst217KI + -0.15748216f /* Sum */) / fConst216KI) + 0.9351402f /* Sum */); // step: 1864
		fConst234KI = (2.0f * (0.9351402f + -fConst221KI /* Sum */)); // step: 1868
		fConst235KI = (1.0f / (((fConst217KI + 0.78241307f /* Sum */) / fConst216KI) + 0.2452915f /* Sum */)); // step: 1881
		fConst236KI = (((fConst217KI + -0.78241307f /* Sum */) / fConst216KI) + 0.2452915f /* Sum */); // step: 1884
		fConst237KI = (2.0f * (0.2452915f + -fConst221KI /* Sum */)); // step: 1888
		fConst238KI = (0.0001f / fConst220KI); // step: 1898
		fConst239KI = (fConst238KI + 0.0004332272f /* Sum */); // step: 1899
		fConst240KI = (2.0f * (0.0004332272f + -fConst238KI /* Sum */)); // step: 1904
		fConst241KI = (1.0f / (((fConst217KI + 0.51247865f /* Sum */) / fConst216KI) + 0.6896214f /* Sum */)); // step: 1913
		fConst242KI = (((fConst217KI + -0.51247865f /* Sum */) / fConst216KI) + 0.6896214f /* Sum */); // step: 1916
		fConst243KI = (2.0f * (0.6896214f + -fConst221KI /* Sum */)); // step: 1920
		fConst244KI = (fConst221KI + 7.6217313f /* Sum */); // step: 1930
		fConst245KI = (2.0f * (7.6217313f + -fConst221KI /* Sum */)); // step: 1934
		fConst246KI = (1.0f / (((fConst217KI + 0.16840488f /* Sum */) / fConst216KI) + 1.0693583f /* Sum */)); // step: 1943
		fConst247KI = (((fConst217KI + -0.16840488f /* Sum */) / fConst216KI) + 1.0693583f /* Sum */); // step: 1946
		fConst248KI = (2.0f * (1.0693583f + -fConst221KI /* Sum */)); // step: 1950
		fConst249KI = (fConst221KI + 53.53615f /* Sum */); // step: 1960
		fConst250KI = (2.0f * (53.53615f + -fConst221KI /* Sum */)); // step: 1964
		fConst251KI = tanf((1979.0793f / fConst0KI)); // step: 1972
		fConst252KI = (1.0f / fConst251KI); // step: 1973
		fConst253KI = (1.0f / (((fConst252KI + 3.1897273f /* Sum */) / fConst251KI) + 4.0767817f /* Sum */)); // step: 1977
		fConst254KI = (((fConst252KI + -3.1897273f /* Sum */) / fConst251KI) + 4.0767817f /* Sum */); // step: 1980
		fConst255KI = powf(fConst251KI,2.0f); // step: 1983
		fConst256KI = (1.0f / fConst255KI); // step: 1984
		fConst257KI = (2.0f * (4.0767817f + -fConst256KI /* Sum */)); // step: 1987
		fConst258KI = (0.0017661728f / fConst255KI); // step: 1997
		fConst259KI = (fConst258KI + 0.0004076782f /* Sum */); // step: 1998
		fConst260KI = (2.0f * (0.0004076782f + -fConst258KI /* Sum */)); // step: 2003
		fConst261KI = (1.0f / (((fConst252KI + 0.74313045f /* Sum */) / fConst251KI) + 1.4500711f /* Sum */)); // step: 2012
		fConst262KI = (((fConst252KI + -0.74313045f /* Sum */) / fConst251KI) + 1.4500711f /* Sum */); // step: 2015
		fConst263KI = (2.0f * (1.4500711f + -fConst256KI /* Sum */)); // step: 2019
		fConst264KI = (11.0520525f / fConst255KI); // step: 2029
		fConst265KI = (fConst264KI + 1.4500711f /* Sum */); // step: 2030
		fConst266KI = (2.0f * (1.4500711f + -fConst264KI /* Sum */)); // step: 2035
		fConst267KI = (1.0f / (((fConst252KI + 0.15748216f /* Sum */) / fConst251KI) + 0.9351402f /* Sum */)); // step: 2044
		fConst268KI = (((fConst252KI + -0.15748216f /* Sum */) / fConst251KI) + 0.9351402f /* Sum */); // step: 2047
		fConst269KI = (2.0f * (0.9351402f + -fConst256KI /* Sum */)); // step: 2051
		fConst270KI = (1.0f / (((fConst252KI + 0.78241307f /* Sum */) / fConst251KI) + 0.2452915f /* Sum */)); // step: 2064
		fConst271KI = (((fConst252KI + -0.78241307f /* Sum */) / fConst251KI) + 0.2452915f /* Sum */); // step: 2067
		fConst272KI = (2.0f * (0.2452915f + -fConst256KI /* Sum */)); // step: 2071
		fConst273KI = (0.0001f / fConst255KI); // step: 2081
		fConst274KI = (fConst273KI + 0.0004332272f /* Sum */); // step: 2082
		fConst275KI = (2.0f * (0.0004332272f + -fConst273KI /* Sum */)); // step: 2087
		fConst276KI = (1.0f / (((fConst252KI + 0.51247865f /* Sum */) / fConst251KI) + 0.6896214f /* Sum */)); // step: 2096
		fConst277KI = (((fConst252KI + -0.51247865f /* Sum */) / fConst251KI) + 0.6896214f /* Sum */); // step: 2099
		fConst278KI = (2.0f * (0.6896214f + -fConst256KI /* Sum */)); // step: 2103
		fConst279KI = (fConst256KI + 7.6217313f /* Sum */); // step: 2113
		fConst280KI = (2.0f * (7.6217313f + -fConst256KI /* Sum */)); // step: 2117
		fConst281KI = (1.0f / (((fConst252KI + 0.16840488f /* Sum */) / fConst251KI) + 1.0693583f /* Sum */)); // step: 2126
		fConst282KI = (((fConst252KI + -0.16840488f /* Sum */) / fConst251KI) + 1.0693583f /* Sum */); // step: 2129
		fConst283KI = (2.0f * (1.0693583f + -fConst256KI /* Sum */)); // step: 2133
		fConst284KI = (fConst256KI + 53.53615f /* Sum */); // step: 2143
		fConst285KI = (2.0f * (53.53615f + -fConst256KI /* Sum */)); // step: 2147
		fConst286KI = tanf((1246.7418f / fConst0KI)); // step: 2155
		fConst287KI = (1.0f / fConst286KI); // step: 2156
		fConst288KI = (1.0f / (((fConst287KI + 3.1897273f /* Sum */) / fConst286KI) + 4.0767817f /* Sum */)); // step: 2160
		fConst289KI = (((fConst287KI + -3.1897273f /* Sum */) / fConst286KI) + 4.0767817f /* Sum */); // step: 2163
		fConst290KI = powf(fConst286KI,2.0f); // step: 2166
		fConst291KI = (1.0f / fConst290KI); // step: 2167
		fConst292KI = (2.0f * (4.0767817f + -fConst291KI /* Sum */)); // step: 2170
		fConst293KI = (0.0017661728f / fConst290KI); // step: 2180
		fConst294KI = (fConst293KI + 0.0004076782f /* Sum */); // step: 2181
		fConst295KI = (2.0f * (0.0004076782f + -fConst293KI /* Sum */)); // step: 2186
		fConst296KI = (1.0f / (((fConst287KI + 0.74313045f /* Sum */) / fConst286KI) + 1.4500711f /* Sum */)); // step: 2195
		fConst297KI = (((fConst287KI + -0.74313045f /* Sum */) / fConst286KI) + 1.4500711f /* Sum */); // step: 2198
		fConst298KI = (2.0f * (1.4500711f + -fConst291KI /* Sum */)); // step: 2202
		fConst299KI = (11.0520525f / fConst290KI); // step: 2212
		fConst300KI = (fConst299KI + 1.4500711f /* Sum */); // step: 2213
		fConst301KI = (2.0f * (1.4500711f + -fConst299KI /* Sum */)); // step: 2218
		fConst302KI = (1.0f / (((fConst287KI + 0.15748216f /* Sum */) / fConst286KI) + 0.9351402f /* Sum */)); // step: 2227
		fConst303KI = (((fConst287KI + -0.15748216f /* Sum */) / fConst286KI) + 0.9351402f /* Sum */); // step: 2230
		fConst304KI = (2.0f * (0.9351402f + -fConst291KI /* Sum */)); // step: 2234
		fConst305KI = (1.0f / (((fConst287KI + 0.78241307f /* Sum */) / fConst286KI) + 0.2452915f /* Sum */)); // step: 2247
		fConst306KI = (((fConst287KI + -0.78241307f /* Sum */) / fConst286KI) + 0.2452915f /* Sum */); // step: 2250
		fConst307KI = (2.0f * (0.2452915f + -fConst291KI /* Sum */)); // step: 2254
		fConst308KI = (0.0001f / fConst290KI); // step: 2264
		fConst309KI = (fConst308KI + 0.0004332272f /* Sum */); // step: 2265
		fConst310KI = (2.0f * (0.0004332272f + -fConst308KI /* Sum */)); // step: 2270
		fConst311KI = (1.0f / (((fConst287KI + 0.51247865f /* Sum */) / fConst286KI) + 0.6896214f /* Sum */)); // step: 2279
		fConst312KI = (((fConst287KI + -0.51247865f /* Sum */) / fConst286KI) + 0.6896214f /* Sum */); // step: 2282
		fConst313KI = (2.0f * (0.6896214f + -fConst291KI /* Sum */)); // step: 2286
		fConst314KI = (fConst291KI + 7.6217313f /* Sum */); // step: 2296
		fConst315KI = (2.0f * (7.6217313f + -fConst291KI /* Sum */)); // step: 2300
		fConst316KI = (1.0f / (((fConst287KI + 0.16840488f /* Sum */) / fConst286KI) + 1.0693583f /* Sum */)); // step: 2309
		fConst317KI = (((fConst287KI + -0.16840488f /* Sum */) / fConst286KI) + 1.0693583f /* Sum */); // step: 2312
		fConst318KI = (2.0f * (1.0693583f + -fConst291KI /* Sum */)); // step: 2316
		fConst319KI = (fConst291KI + 53.53615f /* Sum */); // step: 2326
		fConst320KI = (2.0f * (53.53615f + -fConst291KI /* Sum */)); // step: 2330
		fConst321KI = tanf((785.3982f / fConst0KI)); // step: 2338
		fConst322KI = (1.0f / fConst321KI); // step: 2339
		fConst323KI = (1.0f / (((fConst322KI + 3.1897273f /* Sum */) / fConst321KI) + 4.0767817f /* Sum */)); // step: 2343
		fConst324KI = (((fConst322KI + -3.1897273f /* Sum */) / fConst321KI) + 4.0767817f /* Sum */); // step: 2346
		fConst325KI = powf(fConst321KI,2.0f); // step: 2349
		fConst326KI = (1.0f / fConst325KI); // step: 2350
		fConst327KI = (2.0f * (4.0767817f + -fConst326KI /* Sum */)); // step: 2353
		fConst328KI = (0.0017661728f / fConst325KI); // step: 2363
		fConst329KI = (fConst328KI + 0.0004076782f /* Sum */); // step: 2364
		fConst330KI = (2.0f * (0.0004076782f + -fConst328KI /* Sum */)); // step: 2369
		fConst331KI = (1.0f / (((fConst322KI + 0.74313045f /* Sum */) / fConst321KI) + 1.4500711f /* Sum */)); // step: 2378
		fConst332KI = (((fConst322KI + -0.74313045f /* Sum */) / fConst321KI) + 1.4500711f /* Sum */); // step: 2381
		fConst333KI = (2.0f * (1.4500711f + -fConst326KI /* Sum */)); // step: 2385
		fConst334KI = (11.0520525f / fConst325KI); // step: 2395
		fConst335KI = (fConst334KI + 1.4500711f /* Sum */); // step: 2396
		fConst336KI = (2.0f * (1.4500711f + -fConst334KI /* Sum */)); // step: 2401
		fConst337KI = (1.0f / (((fConst322KI + 0.15748216f /* Sum */) / fConst321KI) + 0.9351402f /* Sum */)); // step: 2410
		fConst338KI = (((fConst322KI + -0.15748216f /* Sum */) / fConst321KI) + 0.9351402f /* Sum */); // step: 2413
		fConst339KI = (2.0f * (0.9351402f + -fConst326KI /* Sum */)); // step: 2417
		fConst340KI = (1.0f / (((fConst322KI + 0.78241307f /* Sum */) / fConst321KI) + 0.2452915f /* Sum */)); // step: 2430
		fConst341KI = (((fConst322KI + -0.78241307f /* Sum */) / fConst321KI) + 0.2452915f /* Sum */); // step: 2433
		fConst342KI = (2.0f * (0.2452915f + -fConst326KI /* Sum */)); // step: 2437
		fConst343KI = (0.0001f / fConst325KI); // step: 2447
		fConst344KI = (fConst343KI + 0.0004332272f /* Sum */); // step: 2448
		fConst345KI = (2.0f * (0.0004332272f + -fConst343KI /* Sum */)); // step: 2453
		fConst346KI = (1.0f / (((fConst322KI + 0.51247865f /* Sum */) / fConst321KI) + 0.6896214f /* Sum */)); // step: 2462
		fConst347KI = (((fConst322KI + -0.51247865f /* Sum */) / fConst321KI) + 0.6896214f /* Sum */); // step: 2465
		fConst348KI = (2.0f * (0.6896214f + -fConst326KI /* Sum */)); // step: 2469
		fConst349KI = (fConst326KI + 7.6217313f /* Sum */); // step: 2479
		fConst350KI = (2.0f * (7.6217313f + -fConst326KI /* Sum */)); // step: 2483
		fConst351KI = (1.0f / (((fConst322KI + 0.16840488f /* Sum */) / fConst321KI) + 1.0693583f /* Sum */)); // step: 2492
		fConst352KI = (((fConst322KI + -0.16840488f /* Sum */) / fConst321KI) + 1.0693583f /* Sum */); // step: 2495
		fConst353KI = (2.0f * (1.0693583f + -fConst326KI /* Sum */)); // step: 2499
		fConst354KI = (fConst326KI + 53.53615f /* Sum */); // step: 2509
		fConst355KI = (2.0f * (53.53615f + -fConst326KI /* Sum */)); // step: 2513
		fConst356KI = tanf((494.76984f / fConst0KI)); // step: 2521
		fConst357KI = (1.0f / fConst356KI); // step: 2522
		fConst358KI = (1.0f / (((fConst357KI + 3.1897273f /* Sum */) / fConst356KI) + 4.0767817f /* Sum */)); // step: 2526
		fConst359KI = (((fConst357KI + -3.1897273f /* Sum */) / fConst356KI) + 4.0767817f /* Sum */); // step: 2529
		fConst360KI = powf(fConst356KI,2.0f); // step: 2532
		fConst361KI = (1.0f / fConst360KI); // step: 2533
		fConst362KI = (2.0f * (4.0767817f + -fConst361KI /* Sum */)); // step: 2536
		fConst363KI = (0.0017661728f / fConst360KI); // step: 2546
		fConst364KI = (fConst363KI + 0.0004076782f /* Sum */); // step: 2547
		fConst365KI = (2.0f * (0.0004076782f + -fConst363KI /* Sum */)); // step: 2552
		fConst366KI = (1.0f / (((fConst357KI + 0.74313045f /* Sum */) / fConst356KI) + 1.4500711f /* Sum */)); // step: 2561
		fConst367KI = (((fConst357KI + -0.74313045f /* Sum */) / fConst356KI) + 1.4500711f /* Sum */); // step: 2564
		fConst368KI = (2.0f * (1.4500711f + -fConst361KI /* Sum */)); // step: 2568
		fConst369KI = (11.0520525f / fConst360KI); // step: 2578
		fConst370KI = (fConst369KI + 1.4500711f /* Sum */); // step: 2579
		fConst371KI = (2.0f * (1.4500711f + -fConst369KI /* Sum */)); // step: 2584
		fConst372KI = (1.0f / (((fConst357KI + 0.15748216f /* Sum */) / fConst356KI) + 0.9351402f /* Sum */)); // step: 2593
		fConst373KI = (((fConst357KI + -0.15748216f /* Sum */) / fConst356KI) + 0.9351402f /* Sum */); // step: 2596
		fConst374KI = (2.0f * (0.9351402f + -fConst361KI /* Sum */)); // step: 2600
		fConst375KI = (1.0f / (((fConst357KI + 0.78241307f /* Sum */) / fConst356KI) + 0.2452915f /* Sum */)); // step: 2613
		fConst376KI = (((fConst357KI + -0.78241307f /* Sum */) / fConst356KI) + 0.2452915f /* Sum */); // step: 2616
		fConst377KI = (2.0f * (0.2452915f + -fConst361KI /* Sum */)); // step: 2620
		fConst378KI = (0.0001f / fConst360KI); // step: 2630
		fConst379KI = (fConst378KI + 0.0004332272f /* Sum */); // step: 2631
		fConst380KI = (2.0f * (0.0004332272f + -fConst378KI /* Sum */)); // step: 2636
		fConst381KI = (1.0f / (((fConst357KI + 0.51247865f /* Sum */) / fConst356KI) + 0.6896214f /* Sum */)); // step: 2645
		fConst382KI = (((fConst357KI + -0.51247865f /* Sum */) / fConst356KI) + 0.6896214f /* Sum */); // step: 2648
		fConst383KI = (2.0f * (0.6896214f + -fConst361KI /* Sum */)); // step: 2652
		fConst384KI = (fConst361KI + 7.6217313f /* Sum */); // step: 2662
		fConst385KI = (2.0f * (7.6217313f + -fConst361KI /* Sum */)); // step: 2666
		fConst386KI = (1.0f / (((fConst357KI + 0.16840488f /* Sum */) / fConst356KI) + 1.0693583f /* Sum */)); // step: 2675
		fConst387KI = (((fConst357KI + -0.16840488f /* Sum */) / fConst356KI) + 1.0693583f /* Sum */); // step: 2678
		fConst388KI = (2.0f * (1.0693583f + -fConst361KI /* Sum */)); // step: 2682
		fConst389KI = (fConst361KI + 53.53615f /* Sum */); // step: 2692
		fConst390KI = (2.0f * (53.53615f + -fConst361KI /* Sum */)); // step: 2696
		fConst391KI = tanf((311.68546f / fConst0KI)); // step: 2704
		fConst392KI = (1.0f / fConst391KI); // step: 2705
		fConst393KI = (1.0f / (((fConst392KI + 3.1897273f /* Sum */) / fConst391KI) + 4.0767817f /* Sum */)); // step: 2709
		fConst394KI = (((fConst392KI + -3.1897273f /* Sum */) / fConst391KI) + 4.0767817f /* Sum */); // step: 2712
		fConst395KI = powf(fConst391KI,2.0f); // step: 2715
		fConst396KI = (1.0f / fConst395KI); // step: 2716
		fConst397KI = (2.0f * (4.0767817f + -fConst396KI /* Sum */)); // step: 2719
		fConst398KI = (0.0017661728f / fConst395KI); // step: 2729
		fConst399KI = (fConst398KI + 0.0004076782f /* Sum */); // step: 2730
		fConst400KI = (2.0f * (0.0004076782f + -fConst398KI /* Sum */)); // step: 2735
		fConst401KI = (1.0f / (((fConst392KI + 0.74313045f /* Sum */) / fConst391KI) + 1.4500711f /* Sum */)); // step: 2744
		fConst402KI = (((fConst392KI + -0.74313045f /* Sum */) / fConst391KI) + 1.4500711f /* Sum */); // step: 2747
		fConst403KI = (2.0f * (1.4500711f + -fConst396KI /* Sum */)); // step: 2751
		fConst404KI = (11.0520525f / fConst395KI); // step: 2761
		fConst405KI = (fConst404KI + 1.4500711f /* Sum */); // step: 2762
		fConst406KI = (2.0f * (1.4500711f + -fConst404KI /* Sum */)); // step: 2767
		fConst407KI = (1.0f / (((fConst392KI + 0.15748216f /* Sum */) / fConst391KI) + 0.9351402f /* Sum */)); // step: 2776
		fConst408KI = (((fConst392KI + -0.15748216f /* Sum */) / fConst391KI) + 0.9351402f /* Sum */); // step: 2779
		fConst409KI = (2.0f * (0.9351402f + -fConst396KI /* Sum */)); // step: 2783
		fConst410KI = (1.0f / (((fConst392KI + 0.78241307f /* Sum */) / fConst391KI) + 0.2452915f /* Sum */)); // step: 2796
		fConst411KI = (((fConst392KI + -0.78241307f /* Sum */) / fConst391KI) + 0.2452915f /* Sum */); // step: 2799
		fConst412KI = (2.0f * (0.2452915f + -fConst396KI /* Sum */)); // step: 2803
		fConst413KI = (0.0001f / fConst395KI); // step: 2813
		fConst414KI = (fConst413KI + 0.0004332272f /* Sum */); // step: 2814
		fConst415KI = (2.0f * (0.0004332272f + -fConst413KI /* Sum */)); // step: 2819
		fConst416KI = (1.0f / (((fConst392KI + 0.51247865f /* Sum */) / fConst391KI) + 0.6896214f /* Sum */)); // step: 2828
		fConst417KI = (((fConst392KI + -0.51247865f /* Sum */) / fConst391KI) + 0.6896214f /* Sum */); // step: 2831
		fConst418KI = (2.0f * (0.6896214f + -fConst396KI /* Sum */)); // step: 2835
		fConst419KI = (fConst396KI + 7.6217313f /* Sum */); // step: 2845
		fConst420KI = (2.0f * (7.6217313f + -fConst396KI /* Sum */)); // step: 2849
		fConst421KI = (1.0f / (((fConst392KI + 0.16840488f /* Sum */) / fConst391KI) + 1.0693583f /* Sum */)); // step: 2858
		fConst422KI = (((fConst392KI + -0.16840488f /* Sum */) / fConst391KI) + 1.0693583f /* Sum */); // step: 2861
		fConst423KI = (2.0f * (1.0693583f + -fConst396KI /* Sum */)); // step: 2865
		fConst424KI = (fConst396KI + 53.53615f /* Sum */); // step: 2875
		fConst425KI = (2.0f * (53.53615f + -fConst396KI /* Sum */)); // step: 2879
		fConst426KI = tanf((196.34955f / fConst0KI)); // step: 2887
		fConst427KI = (1.0f / fConst426KI); // step: 2888
		fConst428KI = (1.0f / (((fConst427KI + 3.1897273f /* Sum */) / fConst426KI) + 4.0767817f /* Sum */)); // step: 2892
		fConst429KI = (((fConst427KI + -3.1897273f /* Sum */) / fConst426KI) + 4.0767817f /* Sum */); // step: 2895
		fConst430KI = powf(fConst426KI,2.0f); // step: 2898
		fConst431KI = (1.0f / fConst430KI); // step: 2899
		fConst432KI = (2.0f * (4.0767817f + -fConst431KI /* Sum */)); // step: 2902
		fConst433KI = (0.0017661728f / fConst430KI); // step: 2912
		fConst434KI = (fConst433KI + 0.0004076782f /* Sum */); // step: 2913
		fConst435KI = (2.0f * (0.0004076782f + -fConst433KI /* Sum */)); // step: 2918
		fConst436KI = (1.0f / (((fConst427KI + 0.74313045f /* Sum */) / fConst426KI) + 1.4500711f /* Sum */)); // step: 2927
		fConst437KI = (((fConst427KI + -0.74313045f /* Sum */) / fConst426KI) + 1.4500711f /* Sum */); // step: 2930
		fConst438KI = (2.0f * (1.4500711f + -fConst431KI /* Sum */)); // step: 2934
		fConst439KI = (11.0520525f / fConst430KI); // step: 2944
		fConst440KI = (fConst439KI + 1.4500711f /* Sum */); // step: 2945
		fConst441KI = (2.0f * (1.4500711f + -fConst439KI /* Sum */)); // step: 2950
		fConst442KI = (1.0f / (((fConst427KI + 0.15748216f /* Sum */) / fConst426KI) + 0.9351402f /* Sum */)); // step: 2959
		fConst443KI = (((fConst427KI + -0.15748216f /* Sum */) / fConst426KI) + 0.9351402f /* Sum */); // step: 2962
		fConst444KI = (2.0f * (0.9351402f + -fConst431KI /* Sum */)); // step: 2966
		fConst445KI = (1.0f / (((fConst427KI + 0.78241307f /* Sum */) / fConst426KI) + 0.2452915f /* Sum */)); // step: 2979
		fConst446KI = (((fConst427KI + -0.78241307f /* Sum */) / fConst426KI) + 0.2452915f /* Sum */); // step: 2982
		fConst447KI = (2.0f * (0.2452915f + -fConst431KI /* Sum */)); // step: 2986
		fConst448KI = (0.0001f / fConst430KI); // step: 2996
		fConst449KI = (fConst448KI + 0.0004332272f /* Sum */); // step: 2997
		fConst450KI = (2.0f * (0.0004332272f + -fConst448KI /* Sum */)); // step: 3002
		fConst451KI = (1.0f / (((fConst427KI + 0.51247865f /* Sum */) / fConst426KI) + 0.6896214f /* Sum */)); // step: 3011
		fConst452KI = (((fConst427KI + -0.51247865f /* Sum */) / fConst426KI) + 0.6896214f /* Sum */); // step: 3014
		fConst453KI = (2.0f * (0.6896214f + -fConst431KI /* Sum */)); // step: 3018
		fConst454KI = (fConst431KI + 7.6217313f /* Sum */); // step: 3028
		fConst455KI = (2.0f * (7.6217313f + -fConst431KI /* Sum */)); // step: 3032
		fConst456KI = (1.0f / (((fConst427KI + 0.16840488f /* Sum */) / fConst426KI) + 1.0693583f /* Sum */)); // step: 3041
		fConst457KI = (((fConst427KI + -0.16840488f /* Sum */) / fConst426KI) + 1.0693583f /* Sum */); // step: 3044
		fConst458KI = (2.0f * (1.0693583f + -fConst431KI /* Sum */)); // step: 3048
		fConst459KI = (fConst431KI + 53.53615f /* Sum */); // step: 3058
		fConst460KI = (2.0f * (53.53615f + -fConst431KI /* Sum */)); // step: 3062
		fConst461KI = tanf((123.69246f / fConst0KI)); // step: 3070
		fConst462KI = (1.0f / fConst461KI); // step: 3071
		fConst463KI = (1.0f / (((fConst462KI + 3.1897273f /* Sum */) / fConst461KI) + 4.0767817f /* Sum */)); // step: 3075
		fConst464KI = (((fConst462KI + -3.1897273f /* Sum */) / fConst461KI) + 4.0767817f /* Sum */); // step: 3078
		fConst465KI = powf(fConst461KI,2.0f); // step: 3081
		fConst466KI = (1.0f / fConst465KI); // step: 3082
		fConst467KI = (2.0f * (4.0767817f + -fConst466KI /* Sum */)); // step: 3085
		fConst468KI = (0.0017661728f / fConst465KI); // step: 3095
		fConst469KI = (fConst468KI + 0.0004076782f /* Sum */); // step: 3096
		fConst470KI = (2.0f * (0.0004076782f + -fConst468KI /* Sum */)); // step: 3101
		fConst471KI = (1.0f / (((fConst462KI + 0.74313045f /* Sum */) / fConst461KI) + 1.4500711f /* Sum */)); // step: 3110
		fConst472KI = (((fConst462KI + -0.74313045f /* Sum */) / fConst461KI) + 1.4500711f /* Sum */); // step: 3113
		fConst473KI = (2.0f * (1.4500711f + -fConst466KI /* Sum */)); // step: 3117
		fConst474KI = (11.0520525f / fConst465KI); // step: 3127
		fConst475KI = (fConst474KI + 1.4500711f /* Sum */); // step: 3128
		fConst476KI = (2.0f * (1.4500711f + -fConst474KI /* Sum */)); // step: 3133
		fConst477KI = (1.0f / (((fConst462KI + 0.15748216f /* Sum */) / fConst461KI) + 0.9351402f /* Sum */)); // step: 3142
		fConst478KI = (((fConst462KI + -0.15748216f /* Sum */) / fConst461KI) + 0.9351402f /* Sum */); // step: 3145
		fConst479KI = (2.0f * (0.9351402f + -fConst466KI /* Sum */)); // step: 3149
		fConst480KI = (1.0f / (((fConst462KI + 0.78241307f /* Sum */) / fConst461KI) + 0.2452915f /* Sum */)); // step: 3162
		fConst481KI = (((fConst462KI + -0.78241307f /* Sum */) / fConst461KI) + 0.2452915f /* Sum */); // step: 3165
		fConst482KI = (2.0f * (0.2452915f + -fConst466KI /* Sum */)); // step: 3169
		fConst483KI = (0.0001f / fConst465KI); // step: 3179
		fConst484KI = (fConst483KI + 0.0004332272f /* Sum */); // step: 3180
		fConst485KI = (2.0f * (0.0004332272f + -fConst483KI /* Sum */)); // step: 3185
		fConst486KI = (1.0f / (((fConst462KI + 0.51247865f /* Sum */) / fConst461KI) + 0.6896214f /* Sum */)); // step: 3194
		fConst487KI = (((fConst462KI + -0.51247865f /* Sum */) / fConst461KI) + 0.6896214f /* Sum */); // step: 3197
		fConst488KI = (2.0f * (0.6896214f + -fConst466KI /* Sum */)); // step: 3201
		fConst489KI = (fConst466KI + 7.6217313f /* Sum */); // step: 3211
		fConst490KI = (2.0f * (7.6217313f + -fConst466KI /* Sum */)); // step: 3215
		fConst491KI = (1.0f / (((fConst462KI + 0.16840488f /* Sum */) / fConst461KI) + 1.0693583f /* Sum */)); // step: 3224
		fConst492KI = (((fConst462KI + -0.16840488f /* Sum */) / fConst461KI) + 1.0693583f /* Sum */); // step: 3227
		fConst493KI = (2.0f * (1.0693583f + -fConst466KI /* Sum */)); // step: 3231
		fConst494KI = (1e+03f / fConst0KI); // step: 3244
		fConst495KI = (50.06381f / fConst10KI); // step: 3253
		fConst496KI = (fConst495KI + 0.9351402f /* Sum */); // step: 3254
		fConst497KI = (2.0f * (0.9351402f + -fConst495KI /* Sum */)); // step: 3259
		fConst498KI = (50.06381f / fConst45KI); // step: 3282
		fConst499KI = (fConst498KI + 0.9351402f /* Sum */); // step: 3283
		fConst500KI = (2.0f * (0.9351402f + -fConst498KI /* Sum */)); // step: 3288
		fConst501KI = (50.06381f / fConst80KI); // step: 3307
		fConst502KI = (fConst501KI + 0.9351402f /* Sum */); // step: 3308
		fConst503KI = (2.0f * (0.9351402f + -fConst501KI /* Sum */)); // step: 3313
		fConst504KI = (50.06381f / fConst115KI); // step: 3332
		fConst505KI = (fConst504KI + 0.9351402f /* Sum */); // step: 3333
		fConst506KI = (2.0f * (0.9351402f + -fConst504KI /* Sum */)); // step: 3338
		fConst507KI = (50.06381f / fConst150KI); // step: 3357
		fConst508KI = (fConst507KI + 0.9351402f /* Sum */); // step: 3358
		fConst509KI = (2.0f * (0.9351402f + -fConst507KI /* Sum */)); // step: 3363
		fConst510KI = (50.06381f / fConst185KI); // step: 3382
		fConst511KI = (fConst510KI + 0.9351402f /* Sum */); // step: 3383
		fConst512KI = (2.0f * (0.9351402f + -fConst510KI /* Sum */)); // step: 3388
		fConst513KI = (50.06381f / fConst220KI); // step: 3407
		fConst514KI = (fConst513KI + 0.9351402f /* Sum */); // step: 3408
		fConst515KI = (2.0f * (0.9351402f + -fConst513KI /* Sum */)); // step: 3413
		fConst516KI = (50.06381f / fConst255KI); // step: 3432
		fConst517KI = (fConst516KI + 0.9351402f /* Sum */); // step: 3433
		fConst518KI = (2.0f * (0.9351402f + -fConst516KI /* Sum */)); // step: 3438
		fConst519KI = (50.06381f / fConst290KI); // step: 3457
		fConst520KI = (fConst519KI + 0.9351402f /* Sum */); // step: 3458
		fConst521KI = (2.0f * (0.9351402f + -fConst519KI /* Sum */)); // step: 3463
		fConst522KI = (50.06381f / fConst325KI); // step: 3482
		fConst523KI = (fConst522KI + 0.9351402f /* Sum */); // step: 3483
		fConst524KI = (2.0f * (0.9351402f + -fConst522KI /* Sum */)); // step: 3488
		fConst525KI = (50.06381f / fConst360KI); // step: 3507
		fConst526KI = (fConst525KI + 0.9351402f /* Sum */); // step: 3508
		fConst527KI = (2.0f * (0.9351402f + -fConst525KI /* Sum */)); // step: 3513
		fConst528KI = (50.06381f / fConst395KI); // step: 3532
		fConst529KI = (fConst528KI + 0.9351402f /* Sum */); // step: 3533
		fConst530KI = (2.0f * (0.9351402f + -fConst528KI /* Sum */)); // step: 3538
		fConst531KI = (50.06381f / fConst430KI); // step: 3557
		fConst532KI = (fConst531KI + 0.9351402f /* Sum */); // step: 3558
		fConst533KI = (2.0f * (0.9351402f + -fConst531KI /* Sum */)); // step: 3563
		fConst534KI = (50.06381f / fConst465KI); // step: 3582
		fConst535KI = (fConst534KI + 0.9351402f /* Sum */); // step: 3583
		fConst536KI = (2.0f * (0.9351402f + -fConst534KI /* Sum */)); // step: 3588
		fConst537KI = (fConst466KI + 53.53615f /* Sum */); // step: 3607
		fConst538KI = (2.0f * (53.53615f + -fConst466KI /* Sum */)); // step: 3611
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fslider4 = -3e+01f;
		fslider5 = 1e+01f;
		fslider6 = 1e+02f;
		fcheckbox0 = 0.0;
		fslider7 = -2e+01f;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fentry0 = 2.0f;
		fcheckbox3 = 0.0;
		fslider8 = 2e+02f;
		fcheckbox4 = 0.0;
		fslider9 = 4e+01f;
		fslider10 = 5e+01f;
		fslider11 = 5e+02f;
		fslider12 = -3e+01f;
		fslider13 = 5.0f;
		fslider14 = 5e+01f;
		fslider15 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec11SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec16SEState = 0;
		fVec17SEState = 0;
		fVec19SEState = 0;
		fVec20SEState = 0;
		fVec21SEState = 0;
		fVec23SEState = 0;
		fVec25SEState = 0;
		fVec26SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec33SEState = 0;
		fVec34SEState = 0;
		fVec35SEState = 0;
		fVec37SEState = 0;
		fVec39SEState = 0;
		fVec40SEState = 0;
		fVec42SEState = 0;
		fVec44SEState = 0;
		iVec45SIState = 0;
		fVec48SIState = 0;
		for (int j = 0; j < 3; j++) { fVec47SIState[j] = 0; }
		fVec52SEState = 0;
		fVec51SEState = 0;
		iVec70SEState = 0;
		iVec75SEState = 0;
		fVec72SEState = 0;
		fVec73SEState = 0;
		fVec71SEState = 0;
		iVec81SEState = 0;
		iVec88SEState = 0;
		fVec85SEState = 0;
		fVec86SEState = 0;
		fVec93SEState = 0;
		fVec94SEState = 0;
		fVec92SEState = 0;
		fVec99SEState = 0;
		fVec100SEState = 0;
		fVec98SEState = 0;
		fVec105SEState = 0;
		for (int j = 0; j < 2; j++) { fVec104SEState[j] = 0; }
		fVec110SEState = 0;
		for (int j = 0; j < 2; j++) { fVec109SEState[j] = 0; }
		fVec115SEState = 0;
		for (int j = 0; j < 2; j++) { fVec114SEState[j] = 0; }
		fVec118SEState = 0;
		for (int j = 0; j < 2; j++) { fVec117SEState[j] = 0; }
		fVec123SEState = 0;
		for (int j = 0; j < 2; j++) { fVec122SEState[j] = 0; }
		fVec128SEState = 0;
		for (int j = 0; j < 2; j++) { fVec127SEState[j] = 0; }
		fVec133SEState = 0;
		for (int j = 0; j < 2; j++) { fVec132SEState[j] = 0; }
		fVec138SEState = 0;
		for (int j = 0; j < 2; j++) { fVec137SEState[j] = 0; }
		fVec143SEState = 0;
		for (int j = 0; j < 2; j++) { fVec142SEState[j] = 0; }
		fVec146SEState = 0;
		for (int j = 0; j < 2; j++) { fVec145SEState[j] = 0; }
		fVec151SEState = 0;
		for (int j = 0; j < 2; j++) { fVec150SEState[j] = 0; }
		fVec156SEState = 0;
		for (int j = 0; j < 2; j++) { fVec155SEState[j] = 0; }
		fVec161SEState = 0;
		for (int j = 0; j < 2; j++) { fVec160SEState[j] = 0; }
		fVec166SEState = 0;
		for (int j = 0; j < 2; j++) { fVec165SEState[j] = 0; }
		fVec171SEState = 0;
		for (int j = 0; j < 2; j++) { fVec170SEState[j] = 0; }
		fVec174SEState = 0;
		for (int j = 0; j < 2; j++) { fVec173SEState[j] = 0; }
		fVec179SEState = 0;
		for (int j = 0; j < 2; j++) { fVec178SEState[j] = 0; }
		fVec184SEState = 0;
		for (int j = 0; j < 2; j++) { fVec183SEState[j] = 0; }
		fVec189SEState = 0;
		for (int j = 0; j < 2; j++) { fVec188SEState[j] = 0; }
		fVec194SEState = 0;
		for (int j = 0; j < 2; j++) { fVec193SEState[j] = 0; }
		fVec199SEState = 0;
		for (int j = 0; j < 2; j++) { fVec198SEState[j] = 0; }
		fVec202SEState = 0;
		for (int j = 0; j < 2; j++) { fVec201SEState[j] = 0; }
		fVec207SEState = 0;
		for (int j = 0; j < 2; j++) { fVec206SEState[j] = 0; }
		fVec212SEState = 0;
		for (int j = 0; j < 2; j++) { fVec211SEState[j] = 0; }
		fVec217SEState = 0;
		for (int j = 0; j < 2; j++) { fVec216SEState[j] = 0; }
		fVec222SEState = 0;
		for (int j = 0; j < 2; j++) { fVec221SEState[j] = 0; }
		fVec227SEState = 0;
		for (int j = 0; j < 2; j++) { fVec226SEState[j] = 0; }
		fVec230SEState = 0;
		for (int j = 0; j < 2; j++) { fVec229SEState[j] = 0; }
		fVec235SEState = 0;
		for (int j = 0; j < 2; j++) { fVec234SEState[j] = 0; }
		fVec240SEState = 0;
		for (int j = 0; j < 2; j++) { fVec239SEState[j] = 0; }
		fVec245SEState = 0;
		for (int j = 0; j < 2; j++) { fVec244SEState[j] = 0; }
		fVec250SEState = 0;
		for (int j = 0; j < 2; j++) { fVec249SEState[j] = 0; }
		fVec255SEState = 0;
		for (int j = 0; j < 2; j++) { fVec254SEState[j] = 0; }
		fVec258SEState = 0;
		for (int j = 0; j < 2; j++) { fVec257SEState[j] = 0; }
		fVec263SEState = 0;
		for (int j = 0; j < 2; j++) { fVec262SEState[j] = 0; }
		fVec268SEState = 0;
		for (int j = 0; j < 2; j++) { fVec267SEState[j] = 0; }
		fVec273SEState = 0;
		for (int j = 0; j < 2; j++) { fVec272SEState[j] = 0; }
		fVec278SEState = 0;
		for (int j = 0; j < 2; j++) { fVec277SEState[j] = 0; }
		fVec283SEState = 0;
		for (int j = 0; j < 2; j++) { fVec282SEState[j] = 0; }
		fVec286SEState = 0;
		for (int j = 0; j < 2; j++) { fVec285SEState[j] = 0; }
		fVec291SEState = 0;
		for (int j = 0; j < 2; j++) { fVec290SEState[j] = 0; }
		fVec296SEState = 0;
		for (int j = 0; j < 2; j++) { fVec295SEState[j] = 0; }
		fVec301SEState = 0;
		for (int j = 0; j < 2; j++) { fVec300SEState[j] = 0; }
		fVec306SEState = 0;
		for (int j = 0; j < 2; j++) { fVec305SEState[j] = 0; }
		fVec311SEState = 0;
		for (int j = 0; j < 2; j++) { fVec310SEState[j] = 0; }
		fVec314SEState = 0;
		for (int j = 0; j < 2; j++) { fVec313SEState[j] = 0; }
		fVec319SEState = 0;
		for (int j = 0; j < 2; j++) { fVec318SEState[j] = 0; }
		fVec324SEState = 0;
		for (int j = 0; j < 2; j++) { fVec323SEState[j] = 0; }
		fVec329SEState = 0;
		for (int j = 0; j < 2; j++) { fVec328SEState[j] = 0; }
		fVec334SEState = 0;
		for (int j = 0; j < 2; j++) { fVec333SEState[j] = 0; }
		fVec339SEState = 0;
		for (int j = 0; j < 2; j++) { fVec338SEState[j] = 0; }
		fVec342SEState = 0;
		for (int j = 0; j < 2; j++) { fVec341SEState[j] = 0; }
		fVec347SEState = 0;
		for (int j = 0; j < 2; j++) { fVec346SEState[j] = 0; }
		fVec352SEState = 0;
		for (int j = 0; j < 2; j++) { fVec351SEState[j] = 0; }
		fVec357SEState = 0;
		for (int j = 0; j < 2; j++) { fVec356SEState[j] = 0; }
		fVec362SEState = 0;
		for (int j = 0; j < 2; j++) { fVec361SEState[j] = 0; }
		fVec367SEState = 0;
		for (int j = 0; j < 2; j++) { fVec366SEState[j] = 0; }
		fVec370SEState = 0;
		for (int j = 0; j < 2; j++) { fVec369SEState[j] = 0; }
		fVec375SEState = 0;
		for (int j = 0; j < 2; j++) { fVec374SEState[j] = 0; }
		fVec380SEState = 0;
		for (int j = 0; j < 2; j++) { fVec379SEState[j] = 0; }
		fVec385SEState = 0;
		for (int j = 0; j < 2; j++) { fVec384SEState[j] = 0; }
		fVec390SEState = 0;
		for (int j = 0; j < 2; j++) { fVec389SEState[j] = 0; }
		fVec395SEState = 0;
		for (int j = 0; j < 2; j++) { fVec394SEState[j] = 0; }
		fVec398SEState = 0;
		for (int j = 0; j < 2; j++) { fVec397SEState[j] = 0; }
		fVec403SEState = 0;
		for (int j = 0; j < 2; j++) { fVec402SEState[j] = 0; }
		fVec408SEState = 0;
		for (int j = 0; j < 2; j++) { fVec407SEState[j] = 0; }
		fVec413SEState = 0;
		for (int j = 0; j < 2; j++) { fVec412SEState[j] = 0; }
		fVec418SEState = 0;
		for (int j = 0; j < 2; j++) { fVec417SEState[j] = 0; }
		fVec423SEState = 0;
		for (int j = 0; j < 2; j++) { fVec422SEState[j] = 0; }
		fVec426SEState = 0;
		for (int j = 0; j < 2; j++) { fVec425SEState[j] = 0; }
		fVec431SEState = 0;
		for (int j = 0; j < 2; j++) { fVec430SEState[j] = 0; }
		fVec436SEState = 0;
		for (int j = 0; j < 2; j++) { fVec435SEState[j] = 0; }
		fVec441SEState = 0;
		for (int j = 0; j < 2; j++) { fVec440SEState[j] = 0; }
		fVec446SEState = 0;
		for (int j = 0; j < 2; j++) { fVec445SEState[j] = 0; }
		fVec451SEState = 0;
		for (int j = 0; j < 2; j++) { fVec450SEState[j] = 0; }
		fVec454SEState = 0;
		for (int j = 0; j < 2; j++) { fVec453SEState[j] = 0; }
		fVec459SEState = 0;
		for (int j = 0; j < 2; j++) { fVec458SEState[j] = 0; }
		fVec464SEState = 0;
		for (int j = 0; j < 2; j++) { fVec463SEState[j] = 0; }
		fVec469SEState = 0;
		for (int j = 0; j < 2; j++) { fVec468SEState[j] = 0; }
		fVec474SEState = 0;
		for (int j = 0; j < 2; j++) { fVec473SEState[j] = 0; }
		fVec479SEState = 0;
		for (int j = 0; j < 2; j++) { fVec478SEState[j] = 0; }
		fVec482SEState = 0;
		for (int j = 0; j < 2; j++) { fVec481SEState[j] = 0; }
		fVec487SEState = 0;
		for (int j = 0; j < 2; j++) { fVec486SEState[j] = 0; }
		fVec492SEState = 0;
		for (int j = 0; j < 2; j++) { fVec491SEState[j] = 0; }
		fVec494SEState = 0;
		fVec498SEState = 0;
		fVec502SEState = 0;
		fVec506SEState = 0;
		fVec510SEState = 0;
		fVec514SEState = 0;
		fVec518SEState = 0;
		fVec522SEState = 0;
		fVec526SEState = 0;
		fVec530SEState = 0;
		fVec534SEState = 0;
		fVec538SEState = 0;
		fVec542SEState = 0;
		fVec546SEState = 0;
		fVec550SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("gate_compressor");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("sawtooth");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider7, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider7, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox2, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "1", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox3);
		ui_interface->declare(&fcheckbox1, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox1);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("gate");
		ui_interface->declare(0, "tooltip", "Reference: http://en.wikipedia.org/wiki/Noise_gate");
		ui_interface->openVerticalBox("GATE");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the gate has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fbargraph0, "1", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Current gain of the gate in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addHorizontalBargraph("Gate Gain", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "When the signal level falls below the Threshold (expressed in dB), the signal is muted");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fslider4, -3e+01f, -1.2e+02f, 0.0f, 0.1f);
		ui_interface->declare(&fslider5, "2", "");
		ui_interface->declare(&fslider5, "scale", "log");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Time constant in MICROseconds (1/e smoothing time) for the gate gain to go (exponentially) from 0 (muted) to 1 (unmuted)");
		ui_interface->declare(&fslider5, "unit", "us");
		ui_interface->addHorizontalSlider("Attack", &fslider5, 1e+01f, 1e+01f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider8, "3", "");
		ui_interface->declare(&fslider8, "scale", "log");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Time in ms to keep the gate open (no muting) after the signal level falls below the Threshold");
		ui_interface->declare(&fslider8, "unit", "ms");
		ui_interface->addHorizontalSlider("Hold", &fslider8, 2e+02f, 1.0f, 1e+03f, 1.0f);
		ui_interface->declare(&fslider6, "4", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Time constant in ms (1/e smoothing time) for the gain to go (exponentially) from 1 (unmuted) to 0 (muted)");
		ui_interface->declare(&fslider6, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fslider6, 1e+02f, 1.0f, 1e+03f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("compressor");
		ui_interface->declare(0, "tooltip", "Reference: http://en.wikipedia.org/wiki/Dynamic_range_compression");
		ui_interface->openVerticalBox("COMPRESSOR");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox4, "0", "");
		ui_interface->declare(&fcheckbox4, "tooltip", "When this is checked, the compressor has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox4);
		ui_interface->declare(&fbargraph1, "1", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Current gain of the compressor in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addHorizontalBargraph("Compressor Gain", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("Compression Control");
		ui_interface->declare(&fslider13, "0", "");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->declare(&fslider13, "tooltip", "A compression Ratio of N means that for each N dB increase in input signal level above Threshold, the output level goes up 1 dB");
		ui_interface->addHorizontalSlider("Ratio", &fslider13, 5.0f, 1.0f, 2e+01f, 0.1f);
		ui_interface->declare(&fslider12, "1", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "tooltip", "When the signal level exceeds the Threshold (in dB), its level is compressed according to the Ratio");
		ui_interface->declare(&fslider12, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fslider12, -3e+01f, -1e+02f, 1e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openHorizontalBox("Compression Response");
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "scale", "log");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new lower target level (the compression `kicking in')");
		ui_interface->declare(&fslider10, "unit", "ms");
		ui_interface->addHorizontalSlider("Attack", &fslider10, 5e+01f, 1.0f, 1e+03f, 0.1f);
		ui_interface->declare(&fslider11, "2", "");
		ui_interface->declare(&fslider11, "scale", "log");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new higher target level (the compression 'releasing')");
		ui_interface->declare(&fslider11, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fslider11, 5e+02f, 1.0f, 1e+03f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(&fslider9, "5", "");
		ui_interface->declare(&fslider9, "tooltip", "The compressed-signal output level is increased by this amount (in dB) to make up for the level lost due to compression");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addHorizontalSlider("Makeup Gain", &fslider9, 4e+01f, -96.0f, 96.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("spectral");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph16, "0", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph16, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph15, "1", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph15, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph14, "2", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "3", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "4", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "5", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "6", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "7", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "8", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "9", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "10", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "11", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "12", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "13", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "14", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider15, "0", "");
		ui_interface->declare(&fslider15, "scale", "log");
		ui_interface->declare(&fslider15, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider15, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider15, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider14, "1", "");
		ui_interface->declare(&fslider14, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider14, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider14, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fTemp10SE; // step: 69
		float 	fVec9SE[2];
		float 	fTemp11SE; // step: 74
		float 	fVec11SE[2];
		float 	fTemp12SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp13SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp14SE; // step: 87
		float 	fVec16SE[2];
		float 	fTemp15SE; // step: 90
		float 	fSlow2BE = ((0.01f * float(fslider2)) + 1.0f /* Sum */); // Zone 2, step: 95
		float 	fTemp16SE; // step: 98
		float 	fTemp17SE; // step: 99
		float 	fVec17SE[2];
		float 	fTemp18SE; // step: 105
		float 	fTemp19SE; // step: 106
		float 	fTemp20SE; // step: 107
		float 	fTemp21SE; // step: 108
		float 	fVec19SE[2];
		float 	fTemp22SE; // step: 110
		float 	fTemp23SE; // step: 111
		float 	fVec20SE[2];
		float 	fVec21SE[2];
		float 	fTemp24SE; // step: 120
		float 	fVec23SE[2];
		float 	fTemp25SE; // step: 125
		float 	fVec25SE[2];
		float 	fTemp26SE; // step: 128
		float 	fVec26SE[2];
		float 	fTemp27SE; // step: 133
		float 	fVec28SE[2];
		float 	fTemp28SE; // step: 138
		float 	fVec30SE[2];
		float 	fTemp29SE; // step: 141
		float 	fSlow3BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 144
		float 	fTemp30SE; // step: 147
		float 	fTemp31SE; // step: 148
		float 	fVec31SE[2];
		float 	fTemp32SE; // step: 154
		float 	fTemp33SE; // step: 155
		float 	fTemp34SE; // step: 156
		float 	fTemp35SE; // step: 157
		float 	fVec33SE[2];
		float 	fTemp36SE; // step: 159
		float 	fTemp37SE; // step: 160
		float 	fVec34SE[2];
		float 	fVec35SE[2];
		float 	fTemp38SE; // step: 169
		float 	fVec37SE[2];
		float 	fTemp39SE; // step: 174
		float 	fVec39SE[2];
		float 	fTemp40SE; // step: 177
		float 	fVec40SE[2];
		float 	fTemp41SE; // step: 182
		float 	fVec42SE[2];
		float 	fTemp42SE; // step: 187
		float 	fVec44SE[2];
		int 	iVec45SI[2];
		float 	fTemp43SI; // step: 199
		float 	fTemp44SI; // step: 202
		float 	fTemp45SI; // step: 210
		float 	fVec48SI[2];
		float 	fTemp46SI; // step: 214
		float 	fVec47SI[4];
		float 	fSlow4BE = powf(1e+01f,(0.05f * float(fslider4))); // Zone 2, step: 221
		float 	fSlow5BE = std::max(fConst1KI, (1e-06f * float(fslider5))); // Zone 2, step: 226
		float 	fSlow6BE = std::max(fConst1KI, (0.001f * float(fslider6))); // Zone 2, step: 231
		float 	fSlow7BE = expf(-(fConst1KI / std::min(fSlow5BE, fSlow6BE))); // Zone 2, step: 235
		float 	fSlow8BE = (1.0f + -fSlow7BE /* Sum */); // Zone 2, step: 240
		int 	iSlow9BE = int(float(fcheckbox0)); // Zone 2, step: 242
		float 	fSlow10BE = (0.001f * powf(1e+01f,(0.05f * float(fslider7)))); // Zone 2, step: 248
		float 	fVec52SE[2];
		float 	fTemp47SE; // step: 255
		float 	fTemp48SE; // step: 257
		int 	iSlow11BE = int(float(fcheckbox1)); // Zone 2, step: 259
		int 	iSlow12BE = int(float(fcheckbox2)); // Zone 2, step: 261
		int 	iSlow13BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 266
		int 	iSlow14BE = (iSlow13BE >= 2); // Zone 2, step: 267
		int 	iSlow15BE = (iSlow13BE >= 1); // Zone 2, step: 268
		float 	fTemp49SC; // step: 272
		float 	fTemp50SE; // step: 279
		int 	iSlow16BE = (iSlow13BE >= 3); // Zone 2, step: 280
		float 	fTemp51SC; // step: 285
		float 	fTemp52SE; // step: 291
		float 	fTemp53SC; // step: 296
		float 	fTemp54SE; // step: 311
		float 	fTemp55SE; // step: 317
		float 	fTemp56SE; // step: 332
		float 	fTemp57SE; // step: 338
		int 	iSlow17BE = int(float(fcheckbox3)); // Zone 2, step: 351
		float 	fTemp58SI; // step: 354
		float 	fTemp59SI; // step: 356
		float 	fTemp60SI; // step: 358
		float 	fTemp61SE; // step: 368
		float 	fTemp62SE; // step: 369
		float 	fTemp63SE; // step: 370
		float 	fVec51SE[2];
		int 	iTemp64SE; // step: 379
		int 	iVec70SE[2];
		float 	fSlow18BE = (fConst1KI / fSlow5BE); // Zone 2, step: 387
		float 	fSlow19BE = ((1) ? expf(-fSlow18BE) : 0.0f); // Zone 2, step: 390
		float 	fSlow20BE = (fConst1KI / fSlow6BE); // Zone 2, step: 391
		float 	fSlow21BE = ((1) ? expf(-fSlow20BE) : 0.0f); // Zone 2, step: 394
		int 	iSlow22BE = int((fConst0KI * std::max(fConst1KI, (0.001f * float(fslider8))))); // Zone 2, step: 403
		int 	iVec75SE[2];
		float 	fTemp65SE; // step: 416
		int 	iTemp66SE; // step: 417
		float 	fSlow23BE = expf(-fSlow18BE); // Zone 2, step: 421
		float 	fSlow24BE = expf(-fSlow20BE); // Zone 2, step: 423
		float 	fVec72SE[2];
		float 	fVec73SE[2];
		float 	fSlow25SE;
		float 	fVec71SE[2];
		int 	iTemp67SE; // step: 447
		int 	iVec81SE[2];
		int 	iSlow26BE = int(float(fcheckbox4)); // Zone 2, step: 450
		float 	fTemp68SE; // step: 486
		float 	fTemp69SE; // step: 487
		int 	iVec88SE[2];
		float 	fTemp70SE; // step: 506
		int 	iTemp71SE; // step: 507
		float 	fVec85SE[2];
		float 	fVec86SE[2];
		float 	fTemp72SE; // step: 518
		float 	fTemp73SE; // step: 520
		float 	fSlow27BE = powf(1e+01f,(0.05f * float(fslider9))); // Zone 2, step: 526
		float 	fTemp74SE; // step: 527
		float 	fSlow28BE = std::max(fConst1KI, (0.001f * float(fslider10))); // Zone 2, step: 531
		float 	fSlow29BE = (fConst5KI / fSlow28BE); // Zone 2, step: 533
		float 	fSlow30BE = expf(-fSlow29BE); // Zone 2, step: 535
		float 	fSlow31BE = (fConst1KI / fSlow28BE); // Zone 2, step: 541
		float 	fSlow32BE = ((1) ? expf(-fSlow31BE) : 0.0f); // Zone 2, step: 544
		float 	fSlow33BE = (fConst1KI / std::max(fConst1KI, (0.001f * float(fslider11)))); // Zone 2, step: 549
		float 	fSlow34BE = ((1) ? expf(-fSlow33BE) : 0.0f); // Zone 2, step: 552
		float 	fTemp75SE; // step: 554
		float 	fTemp76SE; // step: 557
		float 	fTemp77SE; // step: 558
		float 	fTemp78SE; // step: 561
		float 	fSlow35BE = expf(-fSlow31BE); // Zone 2, step: 566
		float 	fSlow36BE = expf(-fSlow33BE); // Zone 2, step: 568
		float 	fTemp79SE; // step: 571
		float 	fTemp80SE; // step: 575
		float 	fVec93SE[2];
		float 	fVec94SE[2];
		float 	fSlow37BE = float(fslider12); // Zone 2, step: 592
		float 	fSlow38BE = ((1.0f / float(fslider13)) + -1.0f /* Sum */); // Zone 2, step: 599
		float 	fSlow39BE = (1.0f + -fSlow30BE /* Sum */); // Zone 2, step: 601
		float 	fSlow40BE = (fSlow38BE * fSlow39BE); // Zone 2, step: 602
		float 	fVec92SE[2];
		float 	fTemp81SE; // step: 608
		float 	fTemp82SE; // step: 609
		float 	fTemp83SE; // step: 611
		float 	fTemp84SE; // step: 612
		float 	fSlow41BE = ((1) ? expf(-fSlow29BE) : 0.0f); // Zone 2, step: 615
		float 	fTemp85SE; // step: 622
		float 	fTemp86SE; // step: 626
		float 	fVec99SE[2];
		float 	fVec100SE[2];
		float 	fVec98SE[2];
		float 	fSlow42SE;
		float 	fTemp87SE; // step: 663
		float 	fTemp88SE; // step: 678
		float 	fVec105SE[2];
		float 	fTemp89SE; // step: 693
		float 	fVec104SE[3];
		float 	fTemp90SE; // step: 718
		float 	fVec110SE[2];
		float 	fTemp91SE; // step: 730
		float 	fVec109SE[3];
		float 	fTemp92SE; // step: 754
		float 	fVec115SE[2];
		float 	fTemp93SE; // step: 766
		float 	fVec114SE[3];
		float 	fTemp94SE; // step: 777
		float 	fVec118SE[2];
		float 	fTemp95SE; // step: 789
		float 	fVec117SE[3];
		float 	fTemp96SE; // step: 814
		float 	fVec123SE[2];
		float 	fTemp97SE; // step: 826
		float 	fVec122SE[3];
		float 	fTemp98SE; // step: 848
		float 	fVec128SE[2];
		float 	fTemp99SE; // step: 860
		float 	fVec127SE[3];
		float 	fTemp100SE; // step: 871
		float 	fTemp101SE; // step: 883
		float 	fVec133SE[2];
		float 	fTemp102SE; // step: 898
		float 	fVec132SE[3];
		float 	fTemp103SE; // step: 918
		float 	fVec138SE[2];
		float 	fTemp104SE; // step: 930
		float 	fVec137SE[3];
		float 	fTemp105SE; // step: 950
		float 	fVec143SE[2];
		float 	fTemp106SE; // step: 962
		float 	fVec142SE[3];
		float 	fTemp107SE; // step: 970
		float 	fVec146SE[2];
		float 	fTemp108SE; // step: 982
		float 	fVec145SE[3];
		float 	fTemp109SE; // step: 1002
		float 	fVec151SE[2];
		float 	fTemp110SE; // step: 1014
		float 	fVec150SE[3];
		float 	fTemp111SE; // step: 1032
		float 	fVec156SE[2];
		float 	fTemp112SE; // step: 1044
		float 	fVec155SE[3];
		float 	fTemp113SE; // step: 1054
		float 	fTemp114SE; // step: 1066
		float 	fVec161SE[2];
		float 	fTemp115SE; // step: 1081
		float 	fVec160SE[3];
		float 	fTemp116SE; // step: 1101
		float 	fVec166SE[2];
		float 	fTemp117SE; // step: 1113
		float 	fVec165SE[3];
		float 	fTemp118SE; // step: 1133
		float 	fVec171SE[2];
		float 	fTemp119SE; // step: 1145
		float 	fVec170SE[3];
		float 	fTemp120SE; // step: 1153
		float 	fVec174SE[2];
		float 	fTemp121SE; // step: 1165
		float 	fVec173SE[3];
		float 	fTemp122SE; // step: 1185
		float 	fVec179SE[2];
		float 	fTemp123SE; // step: 1197
		float 	fVec178SE[3];
		float 	fTemp124SE; // step: 1215
		float 	fVec184SE[2];
		float 	fTemp125SE; // step: 1227
		float 	fVec183SE[3];
		float 	fTemp126SE; // step: 1237
		float 	fTemp127SE; // step: 1249
		float 	fVec189SE[2];
		float 	fTemp128SE; // step: 1264
		float 	fVec188SE[3];
		float 	fTemp129SE; // step: 1284
		float 	fVec194SE[2];
		float 	fTemp130SE; // step: 1296
		float 	fVec193SE[3];
		float 	fTemp131SE; // step: 1316
		float 	fVec199SE[2];
		float 	fTemp132SE; // step: 1328
		float 	fVec198SE[3];
		float 	fTemp133SE; // step: 1336
		float 	fVec202SE[2];
		float 	fTemp134SE; // step: 1348
		float 	fVec201SE[3];
		float 	fTemp135SE; // step: 1368
		float 	fVec207SE[2];
		float 	fTemp136SE; // step: 1380
		float 	fVec206SE[3];
		float 	fTemp137SE; // step: 1398
		float 	fVec212SE[2];
		float 	fTemp138SE; // step: 1410
		float 	fVec211SE[3];
		float 	fTemp139SE; // step: 1420
		float 	fTemp140SE; // step: 1432
		float 	fVec217SE[2];
		float 	fTemp141SE; // step: 1447
		float 	fVec216SE[3];
		float 	fTemp142SE; // step: 1467
		float 	fVec222SE[2];
		float 	fTemp143SE; // step: 1479
		float 	fVec221SE[3];
		float 	fTemp144SE; // step: 1499
		float 	fVec227SE[2];
		float 	fTemp145SE; // step: 1511
		float 	fVec226SE[3];
		float 	fTemp146SE; // step: 1519
		float 	fVec230SE[2];
		float 	fTemp147SE; // step: 1531
		float 	fVec229SE[3];
		float 	fTemp148SE; // step: 1551
		float 	fVec235SE[2];
		float 	fTemp149SE; // step: 1563
		float 	fVec234SE[3];
		float 	fTemp150SE; // step: 1581
		float 	fVec240SE[2];
		float 	fTemp151SE; // step: 1593
		float 	fVec239SE[3];
		float 	fTemp152SE; // step: 1603
		float 	fTemp153SE; // step: 1615
		float 	fVec245SE[2];
		float 	fTemp154SE; // step: 1630
		float 	fVec244SE[3];
		float 	fTemp155SE; // step: 1650
		float 	fVec250SE[2];
		float 	fTemp156SE; // step: 1662
		float 	fVec249SE[3];
		float 	fTemp157SE; // step: 1682
		float 	fVec255SE[2];
		float 	fTemp158SE; // step: 1694
		float 	fVec254SE[3];
		float 	fTemp159SE; // step: 1702
		float 	fVec258SE[2];
		float 	fTemp160SE; // step: 1714
		float 	fVec257SE[3];
		float 	fTemp161SE; // step: 1734
		float 	fVec263SE[2];
		float 	fTemp162SE; // step: 1746
		float 	fVec262SE[3];
		float 	fTemp163SE; // step: 1764
		float 	fVec268SE[2];
		float 	fTemp164SE; // step: 1776
		float 	fVec267SE[3];
		float 	fTemp165SE; // step: 1786
		float 	fTemp166SE; // step: 1798
		float 	fVec273SE[2];
		float 	fTemp167SE; // step: 1813
		float 	fVec272SE[3];
		float 	fTemp168SE; // step: 1833
		float 	fVec278SE[2];
		float 	fTemp169SE; // step: 1845
		float 	fVec277SE[3];
		float 	fTemp170SE; // step: 1865
		float 	fVec283SE[2];
		float 	fTemp171SE; // step: 1877
		float 	fVec282SE[3];
		float 	fTemp172SE; // step: 1885
		float 	fVec286SE[2];
		float 	fTemp173SE; // step: 1897
		float 	fVec285SE[3];
		float 	fTemp174SE; // step: 1917
		float 	fVec291SE[2];
		float 	fTemp175SE; // step: 1929
		float 	fVec290SE[3];
		float 	fTemp176SE; // step: 1947
		float 	fVec296SE[2];
		float 	fTemp177SE; // step: 1959
		float 	fVec295SE[3];
		float 	fTemp178SE; // step: 1969
		float 	fTemp179SE; // step: 1981
		float 	fVec301SE[2];
		float 	fTemp180SE; // step: 1996
		float 	fVec300SE[3];
		float 	fTemp181SE; // step: 2016
		float 	fVec306SE[2];
		float 	fTemp182SE; // step: 2028
		float 	fVec305SE[3];
		float 	fTemp183SE; // step: 2048
		float 	fVec311SE[2];
		float 	fTemp184SE; // step: 2060
		float 	fVec310SE[3];
		float 	fTemp185SE; // step: 2068
		float 	fVec314SE[2];
		float 	fTemp186SE; // step: 2080
		float 	fVec313SE[3];
		float 	fTemp187SE; // step: 2100
		float 	fVec319SE[2];
		float 	fTemp188SE; // step: 2112
		float 	fVec318SE[3];
		float 	fTemp189SE; // step: 2130
		float 	fVec324SE[2];
		float 	fTemp190SE; // step: 2142
		float 	fVec323SE[3];
		float 	fTemp191SE; // step: 2152
		float 	fTemp192SE; // step: 2164
		float 	fVec329SE[2];
		float 	fTemp193SE; // step: 2179
		float 	fVec328SE[3];
		float 	fTemp194SE; // step: 2199
		float 	fVec334SE[2];
		float 	fTemp195SE; // step: 2211
		float 	fVec333SE[3];
		float 	fTemp196SE; // step: 2231
		float 	fVec339SE[2];
		float 	fTemp197SE; // step: 2243
		float 	fVec338SE[3];
		float 	fTemp198SE; // step: 2251
		float 	fVec342SE[2];
		float 	fTemp199SE; // step: 2263
		float 	fVec341SE[3];
		float 	fTemp200SE; // step: 2283
		float 	fVec347SE[2];
		float 	fTemp201SE; // step: 2295
		float 	fVec346SE[3];
		float 	fTemp202SE; // step: 2313
		float 	fVec352SE[2];
		float 	fTemp203SE; // step: 2325
		float 	fVec351SE[3];
		float 	fTemp204SE; // step: 2335
		float 	fTemp205SE; // step: 2347
		float 	fVec357SE[2];
		float 	fTemp206SE; // step: 2362
		float 	fVec356SE[3];
		float 	fTemp207SE; // step: 2382
		float 	fVec362SE[2];
		float 	fTemp208SE; // step: 2394
		float 	fVec361SE[3];
		float 	fTemp209SE; // step: 2414
		float 	fVec367SE[2];
		float 	fTemp210SE; // step: 2426
		float 	fVec366SE[3];
		float 	fTemp211SE; // step: 2434
		float 	fVec370SE[2];
		float 	fTemp212SE; // step: 2446
		float 	fVec369SE[3];
		float 	fTemp213SE; // step: 2466
		float 	fVec375SE[2];
		float 	fTemp214SE; // step: 2478
		float 	fVec374SE[3];
		float 	fTemp215SE; // step: 2496
		float 	fVec380SE[2];
		float 	fTemp216SE; // step: 2508
		float 	fVec379SE[3];
		float 	fTemp217SE; // step: 2518
		float 	fTemp218SE; // step: 2530
		float 	fVec385SE[2];
		float 	fTemp219SE; // step: 2545
		float 	fVec384SE[3];
		float 	fTemp220SE; // step: 2565
		float 	fVec390SE[2];
		float 	fTemp221SE; // step: 2577
		float 	fVec389SE[3];
		float 	fTemp222SE; // step: 2597
		float 	fVec395SE[2];
		float 	fTemp223SE; // step: 2609
		float 	fVec394SE[3];
		float 	fTemp224SE; // step: 2617
		float 	fVec398SE[2];
		float 	fTemp225SE; // step: 2629
		float 	fVec397SE[3];
		float 	fTemp226SE; // step: 2649
		float 	fVec403SE[2];
		float 	fTemp227SE; // step: 2661
		float 	fVec402SE[3];
		float 	fTemp228SE; // step: 2679
		float 	fVec408SE[2];
		float 	fTemp229SE; // step: 2691
		float 	fVec407SE[3];
		float 	fTemp230SE; // step: 2701
		float 	fTemp231SE; // step: 2713
		float 	fVec413SE[2];
		float 	fTemp232SE; // step: 2728
		float 	fVec412SE[3];
		float 	fTemp233SE; // step: 2748
		float 	fVec418SE[2];
		float 	fTemp234SE; // step: 2760
		float 	fVec417SE[3];
		float 	fTemp235SE; // step: 2780
		float 	fVec423SE[2];
		float 	fTemp236SE; // step: 2792
		float 	fVec422SE[3];
		float 	fTemp237SE; // step: 2800
		float 	fVec426SE[2];
		float 	fTemp238SE; // step: 2812
		float 	fVec425SE[3];
		float 	fTemp239SE; // step: 2832
		float 	fVec431SE[2];
		float 	fTemp240SE; // step: 2844
		float 	fVec430SE[3];
		float 	fTemp241SE; // step: 2862
		float 	fVec436SE[2];
		float 	fTemp242SE; // step: 2874
		float 	fVec435SE[3];
		float 	fTemp243SE; // step: 2884
		float 	fTemp244SE; // step: 2896
		float 	fVec441SE[2];
		float 	fTemp245SE; // step: 2911
		float 	fVec440SE[3];
		float 	fTemp246SE; // step: 2931
		float 	fVec446SE[2];
		float 	fTemp247SE; // step: 2943
		float 	fVec445SE[3];
		float 	fTemp248SE; // step: 2963
		float 	fVec451SE[2];
		float 	fTemp249SE; // step: 2975
		float 	fVec450SE[3];
		float 	fTemp250SE; // step: 2983
		float 	fVec454SE[2];
		float 	fTemp251SE; // step: 2995
		float 	fVec453SE[3];
		float 	fTemp252SE; // step: 3015
		float 	fVec459SE[2];
		float 	fTemp253SE; // step: 3027
		float 	fVec458SE[3];
		float 	fTemp254SE; // step: 3045
		float 	fVec464SE[2];
		float 	fTemp255SE; // step: 3057
		float 	fVec463SE[3];
		float 	fTemp256SE; // step: 3067
		float 	fTemp257SE; // step: 3079
		float 	fVec469SE[2];
		float 	fTemp258SE; // step: 3094
		float 	fVec468SE[3];
		float 	fTemp259SE; // step: 3114
		float 	fVec474SE[2];
		float 	fTemp260SE; // step: 3126
		float 	fVec473SE[3];
		float 	fTemp261SE; // step: 3146
		float 	fVec479SE[2];
		float 	fTemp262SE; // step: 3158
		float 	fVec478SE[3];
		float 	fTemp263SE; // step: 3166
		float 	fVec482SE[2];
		float 	fTemp264SE; // step: 3178
		float 	fVec481SE[3];
		float 	fTemp265SE; // step: 3198
		float 	fVec487SE[2];
		float 	fTemp266SE; // step: 3210
		float 	fVec486SE[3];
		float 	fTemp267SE; // step: 3228
		float 	fVec492SE[2];
		float 	fTemp268SE; // step: 3240
		float 	fVec491SE[3];
		float 	fSlow43BE = float(fslider14); // Zone 2, step: 3242
		float 	fSlow44BE = (fConst494KI / float(fslider15)); // Zone 2, step: 3245
		float 	fSlow45BE = ((1) ? expf(-fSlow44BE) : 0.0f); // Zone 2, step: 3248
		float 	fSlow46BE = (1.0f + -(expf(-fSlow44BE)) /* Sum */); // Zone 2, step: 3269
		float 	fVec494SE[2];
		float 	fSlow47SE;
		float 	fVec498SE[2];
		float 	fSlow48SE;
		float 	fVec502SE[2];
		float 	fSlow49SE;
		float 	fVec506SE[2];
		float 	fSlow50SE;
		float 	fVec510SE[2];
		float 	fSlow51SE;
		float 	fVec514SE[2];
		float 	fSlow52SE;
		float 	fVec518SE[2];
		float 	fSlow53SE;
		float 	fVec522SE[2];
		float 	fSlow54SE;
		float 	fVec526SE[2];
		float 	fSlow55SE;
		float 	fVec530SE[2];
		float 	fSlow56SE;
		float 	fVec534SE[2];
		float 	fSlow57SE;
		float 	fVec538SE[2];
		float 	fSlow58SE;
		float 	fVec542SE[2];
		float 	fSlow59SE;
		float 	fVec546SE[2];
		float 	fSlow60SE;
		float 	fVec550SE[2];
		float 	fSlow61SE;
		float 	fTemp269SE; // step: 3628
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec11SE[1] = fVec11SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec16SE[1] = fVec16SEState;
		fVec17SE[1] = fVec17SEState;
		fVec19SE[1] = fVec19SEState;
		fVec20SE[1] = fVec20SEState;
		fVec21SE[1] = fVec21SEState;
		fVec23SE[1] = fVec23SEState;
		fVec25SE[1] = fVec25SEState;
		fVec26SE[1] = fVec26SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec33SE[1] = fVec33SEState;
		fVec34SE[1] = fVec34SEState;
		fVec35SE[1] = fVec35SEState;
		fVec37SE[1] = fVec37SEState;
		fVec39SE[1] = fVec39SEState;
		fVec40SE[1] = fVec40SEState;
		fVec42SE[1] = fVec42SEState;
		fVec44SE[1] = fVec44SEState;
		iVec45SI[1] = iVec45SIState;
		fVec48SI[1] = fVec48SIState;
		fVec47SI[1] = fVec47SIState[0];
		fVec47SI[2] = fVec47SIState[1];
		fVec47SI[3] = fVec47SIState[2];
		fVec52SE[1] = fVec52SEState;
		fVec51SE[1] = fVec51SEState;
		iVec70SE[1] = iVec70SEState;
		iVec75SE[1] = iVec75SEState;
		fVec72SE[1] = fVec72SEState;
		fVec73SE[1] = fVec73SEState;
		fVec71SE[1] = fVec71SEState;
		iVec81SE[1] = iVec81SEState;
		iVec88SE[1] = iVec88SEState;
		fVec85SE[1] = fVec85SEState;
		fVec86SE[1] = fVec86SEState;
		fVec93SE[1] = fVec93SEState;
		fVec94SE[1] = fVec94SEState;
		fVec92SE[1] = fVec92SEState;
		fVec99SE[1] = fVec99SEState;
		fVec100SE[1] = fVec100SEState;
		fVec98SE[1] = fVec98SEState;
		fVec105SE[1] = fVec105SEState;
		fVec104SE[1] = fVec104SEState[0];
		fVec104SE[2] = fVec104SEState[1];
		fVec110SE[1] = fVec110SEState;
		fVec109SE[1] = fVec109SEState[0];
		fVec109SE[2] = fVec109SEState[1];
		fVec115SE[1] = fVec115SEState;
		fVec114SE[1] = fVec114SEState[0];
		fVec114SE[2] = fVec114SEState[1];
		fVec118SE[1] = fVec118SEState;
		fVec117SE[1] = fVec117SEState[0];
		fVec117SE[2] = fVec117SEState[1];
		fVec123SE[1] = fVec123SEState;
		fVec122SE[1] = fVec122SEState[0];
		fVec122SE[2] = fVec122SEState[1];
		fVec128SE[1] = fVec128SEState;
		fVec127SE[1] = fVec127SEState[0];
		fVec127SE[2] = fVec127SEState[1];
		fVec133SE[1] = fVec133SEState;
		fVec132SE[1] = fVec132SEState[0];
		fVec132SE[2] = fVec132SEState[1];
		fVec138SE[1] = fVec138SEState;
		fVec137SE[1] = fVec137SEState[0];
		fVec137SE[2] = fVec137SEState[1];
		fVec143SE[1] = fVec143SEState;
		fVec142SE[1] = fVec142SEState[0];
		fVec142SE[2] = fVec142SEState[1];
		fVec146SE[1] = fVec146SEState;
		fVec145SE[1] = fVec145SEState[0];
		fVec145SE[2] = fVec145SEState[1];
		fVec151SE[1] = fVec151SEState;
		fVec150SE[1] = fVec150SEState[0];
		fVec150SE[2] = fVec150SEState[1];
		fVec156SE[1] = fVec156SEState;
		fVec155SE[1] = fVec155SEState[0];
		fVec155SE[2] = fVec155SEState[1];
		fVec161SE[1] = fVec161SEState;
		fVec160SE[1] = fVec160SEState[0];
		fVec160SE[2] = fVec160SEState[1];
		fVec166SE[1] = fVec166SEState;
		fVec165SE[1] = fVec165SEState[0];
		fVec165SE[2] = fVec165SEState[1];
		fVec171SE[1] = fVec171SEState;
		fVec170SE[1] = fVec170SEState[0];
		fVec170SE[2] = fVec170SEState[1];
		fVec174SE[1] = fVec174SEState;
		fVec173SE[1] = fVec173SEState[0];
		fVec173SE[2] = fVec173SEState[1];
		fVec179SE[1] = fVec179SEState;
		fVec178SE[1] = fVec178SEState[0];
		fVec178SE[2] = fVec178SEState[1];
		fVec184SE[1] = fVec184SEState;
		fVec183SE[1] = fVec183SEState[0];
		fVec183SE[2] = fVec183SEState[1];
		fVec189SE[1] = fVec189SEState;
		fVec188SE[1] = fVec188SEState[0];
		fVec188SE[2] = fVec188SEState[1];
		fVec194SE[1] = fVec194SEState;
		fVec193SE[1] = fVec193SEState[0];
		fVec193SE[2] = fVec193SEState[1];
		fVec199SE[1] = fVec199SEState;
		fVec198SE[1] = fVec198SEState[0];
		fVec198SE[2] = fVec198SEState[1];
		fVec202SE[1] = fVec202SEState;
		fVec201SE[1] = fVec201SEState[0];
		fVec201SE[2] = fVec201SEState[1];
		fVec207SE[1] = fVec207SEState;
		fVec206SE[1] = fVec206SEState[0];
		fVec206SE[2] = fVec206SEState[1];
		fVec212SE[1] = fVec212SEState;
		fVec211SE[1] = fVec211SEState[0];
		fVec211SE[2] = fVec211SEState[1];
		fVec217SE[1] = fVec217SEState;
		fVec216SE[1] = fVec216SEState[0];
		fVec216SE[2] = fVec216SEState[1];
		fVec222SE[1] = fVec222SEState;
		fVec221SE[1] = fVec221SEState[0];
		fVec221SE[2] = fVec221SEState[1];
		fVec227SE[1] = fVec227SEState;
		fVec226SE[1] = fVec226SEState[0];
		fVec226SE[2] = fVec226SEState[1];
		fVec230SE[1] = fVec230SEState;
		fVec229SE[1] = fVec229SEState[0];
		fVec229SE[2] = fVec229SEState[1];
		fVec235SE[1] = fVec235SEState;
		fVec234SE[1] = fVec234SEState[0];
		fVec234SE[2] = fVec234SEState[1];
		fVec240SE[1] = fVec240SEState;
		fVec239SE[1] = fVec239SEState[0];
		fVec239SE[2] = fVec239SEState[1];
		fVec245SE[1] = fVec245SEState;
		fVec244SE[1] = fVec244SEState[0];
		fVec244SE[2] = fVec244SEState[1];
		fVec250SE[1] = fVec250SEState;
		fVec249SE[1] = fVec249SEState[0];
		fVec249SE[2] = fVec249SEState[1];
		fVec255SE[1] = fVec255SEState;
		fVec254SE[1] = fVec254SEState[0];
		fVec254SE[2] = fVec254SEState[1];
		fVec258SE[1] = fVec258SEState;
		fVec257SE[1] = fVec257SEState[0];
		fVec257SE[2] = fVec257SEState[1];
		fVec263SE[1] = fVec263SEState;
		fVec262SE[1] = fVec262SEState[0];
		fVec262SE[2] = fVec262SEState[1];
		fVec268SE[1] = fVec268SEState;
		fVec267SE[1] = fVec267SEState[0];
		fVec267SE[2] = fVec267SEState[1];
		fVec273SE[1] = fVec273SEState;
		fVec272SE[1] = fVec272SEState[0];
		fVec272SE[2] = fVec272SEState[1];
		fVec278SE[1] = fVec278SEState;
		fVec277SE[1] = fVec277SEState[0];
		fVec277SE[2] = fVec277SEState[1];
		fVec283SE[1] = fVec283SEState;
		fVec282SE[1] = fVec282SEState[0];
		fVec282SE[2] = fVec282SEState[1];
		fVec286SE[1] = fVec286SEState;
		fVec285SE[1] = fVec285SEState[0];
		fVec285SE[2] = fVec285SEState[1];
		fVec291SE[1] = fVec291SEState;
		fVec290SE[1] = fVec290SEState[0];
		fVec290SE[2] = fVec290SEState[1];
		fVec296SE[1] = fVec296SEState;
		fVec295SE[1] = fVec295SEState[0];
		fVec295SE[2] = fVec295SEState[1];
		fVec301SE[1] = fVec301SEState;
		fVec300SE[1] = fVec300SEState[0];
		fVec300SE[2] = fVec300SEState[1];
		fVec306SE[1] = fVec306SEState;
		fVec305SE[1] = fVec305SEState[0];
		fVec305SE[2] = fVec305SEState[1];
		fVec311SE[1] = fVec311SEState;
		fVec310SE[1] = fVec310SEState[0];
		fVec310SE[2] = fVec310SEState[1];
		fVec314SE[1] = fVec314SEState;
		fVec313SE[1] = fVec313SEState[0];
		fVec313SE[2] = fVec313SEState[1];
		fVec319SE[1] = fVec319SEState;
		fVec318SE[1] = fVec318SEState[0];
		fVec318SE[2] = fVec318SEState[1];
		fVec324SE[1] = fVec324SEState;
		fVec323SE[1] = fVec323SEState[0];
		fVec323SE[2] = fVec323SEState[1];
		fVec329SE[1] = fVec329SEState;
		fVec328SE[1] = fVec328SEState[0];
		fVec328SE[2] = fVec328SEState[1];
		fVec334SE[1] = fVec334SEState;
		fVec333SE[1] = fVec333SEState[0];
		fVec333SE[2] = fVec333SEState[1];
		fVec339SE[1] = fVec339SEState;
		fVec338SE[1] = fVec338SEState[0];
		fVec338SE[2] = fVec338SEState[1];
		fVec342SE[1] = fVec342SEState;
		fVec341SE[1] = fVec341SEState[0];
		fVec341SE[2] = fVec341SEState[1];
		fVec347SE[1] = fVec347SEState;
		fVec346SE[1] = fVec346SEState[0];
		fVec346SE[2] = fVec346SEState[1];
		fVec352SE[1] = fVec352SEState;
		fVec351SE[1] = fVec351SEState[0];
		fVec351SE[2] = fVec351SEState[1];
		fVec357SE[1] = fVec357SEState;
		fVec356SE[1] = fVec356SEState[0];
		fVec356SE[2] = fVec356SEState[1];
		fVec362SE[1] = fVec362SEState;
		fVec361SE[1] = fVec361SEState[0];
		fVec361SE[2] = fVec361SEState[1];
		fVec367SE[1] = fVec367SEState;
		fVec366SE[1] = fVec366SEState[0];
		fVec366SE[2] = fVec366SEState[1];
		fVec370SE[1] = fVec370SEState;
		fVec369SE[1] = fVec369SEState[0];
		fVec369SE[2] = fVec369SEState[1];
		fVec375SE[1] = fVec375SEState;
		fVec374SE[1] = fVec374SEState[0];
		fVec374SE[2] = fVec374SEState[1];
		fVec380SE[1] = fVec380SEState;
		fVec379SE[1] = fVec379SEState[0];
		fVec379SE[2] = fVec379SEState[1];
		fVec385SE[1] = fVec385SEState;
		fVec384SE[1] = fVec384SEState[0];
		fVec384SE[2] = fVec384SEState[1];
		fVec390SE[1] = fVec390SEState;
		fVec389SE[1] = fVec389SEState[0];
		fVec389SE[2] = fVec389SEState[1];
		fVec395SE[1] = fVec395SEState;
		fVec394SE[1] = fVec394SEState[0];
		fVec394SE[2] = fVec394SEState[1];
		fVec398SE[1] = fVec398SEState;
		fVec397SE[1] = fVec397SEState[0];
		fVec397SE[2] = fVec397SEState[1];
		fVec403SE[1] = fVec403SEState;
		fVec402SE[1] = fVec402SEState[0];
		fVec402SE[2] = fVec402SEState[1];
		fVec408SE[1] = fVec408SEState;
		fVec407SE[1] = fVec407SEState[0];
		fVec407SE[2] = fVec407SEState[1];
		fVec413SE[1] = fVec413SEState;
		fVec412SE[1] = fVec412SEState[0];
		fVec412SE[2] = fVec412SEState[1];
		fVec418SE[1] = fVec418SEState;
		fVec417SE[1] = fVec417SEState[0];
		fVec417SE[2] = fVec417SEState[1];
		fVec423SE[1] = fVec423SEState;
		fVec422SE[1] = fVec422SEState[0];
		fVec422SE[2] = fVec422SEState[1];
		fVec426SE[1] = fVec426SEState;
		fVec425SE[1] = fVec425SEState[0];
		fVec425SE[2] = fVec425SEState[1];
		fVec431SE[1] = fVec431SEState;
		fVec430SE[1] = fVec430SEState[0];
		fVec430SE[2] = fVec430SEState[1];
		fVec436SE[1] = fVec436SEState;
		fVec435SE[1] = fVec435SEState[0];
		fVec435SE[2] = fVec435SEState[1];
		fVec441SE[1] = fVec441SEState;
		fVec440SE[1] = fVec440SEState[0];
		fVec440SE[2] = fVec440SEState[1];
		fVec446SE[1] = fVec446SEState;
		fVec445SE[1] = fVec445SEState[0];
		fVec445SE[2] = fVec445SEState[1];
		fVec451SE[1] = fVec451SEState;
		fVec450SE[1] = fVec450SEState[0];
		fVec450SE[2] = fVec450SEState[1];
		fVec454SE[1] = fVec454SEState;
		fVec453SE[1] = fVec453SEState[0];
		fVec453SE[2] = fVec453SEState[1];
		fVec459SE[1] = fVec459SEState;
		fVec458SE[1] = fVec458SEState[0];
		fVec458SE[2] = fVec458SEState[1];
		fVec464SE[1] = fVec464SEState;
		fVec463SE[1] = fVec463SEState[0];
		fVec463SE[2] = fVec463SEState[1];
		fVec469SE[1] = fVec469SEState;
		fVec468SE[1] = fVec468SEState[0];
		fVec468SE[2] = fVec468SEState[1];
		fVec474SE[1] = fVec474SEState;
		fVec473SE[1] = fVec473SEState[0];
		fVec473SE[2] = fVec473SEState[1];
		fVec479SE[1] = fVec479SEState;
		fVec478SE[1] = fVec478SEState[0];
		fVec478SE[2] = fVec478SEState[1];
		fVec482SE[1] = fVec482SEState;
		fVec481SE[1] = fVec481SEState[0];
		fVec481SE[2] = fVec481SEState[1];
		fVec487SE[1] = fVec487SEState;
		fVec486SE[1] = fVec486SEState[0];
		fVec486SE[2] = fVec486SEState[1];
		fVec492SE[1] = fVec492SEState;
		fVec491SE[1] = fVec491SEState[0];
		fVec491SE[2] = fVec491SEState[1];
		fVec494SE[1] = fVec494SEState;
		fVec498SE[1] = fVec498SEState;
		fVec502SE[1] = fVec502SEState;
		fVec506SE[1] = fVec506SEState;
		fVec510SE[1] = fVec510SEState;
		fVec514SE[1] = fVec514SEState;
		fVec518SE[1] = fVec518SEState;
		fVec522SE[1] = fVec522SEState;
		fVec526SE[1] = fVec526SEState;
		fVec530SE[1] = fVec530SEState;
		fVec534SE[1] = fVec534SEState;
		fVec538SE[1] = fVec538SEState;
		fVec542SE[1] = fVec542SEState;
		fVec546SE[1] = fVec546SEState;
		fVec550SE[1] = fVec550SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fTemp10SE = ((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE); // step: 69
			fVec9SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE); // step: 74
			fVec11SE[0] = fTemp11SE;
			fTemp12SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 77
			fVec12SE[0] = fTemp12SE;
			fTemp13SE = ((fTemp12SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp13SE;
			fTemp14SE = ((fTemp13SE + -fVec14SE[1] /* Sum */) / fTemp2SE); // step: 87
			fVec16SE[0] = fTemp14SE;
			fTemp15SE = fVec17SE[1]; // step: 90
			fTemp16SE = std::max(2e+01f, fabsf((fSlow2BE * fTemp1SE))); // step: 98
			fTemp17SE = (fConst1KI * fTemp16SE); // step: 99
			fVec17SE[0] = (fTemp15SE + fTemp17SE + -floorf((fTemp15SE + fTemp17SE /* Sum */)) /* Sum */);
			fTemp18SE = fVec17SE[0]; // step: 105
			fTemp19SE = (2.0f * fTemp18SE); // step: 106
			fTemp20SE = (fTemp19SE + -1.0f /* Sum */); // step: 107
			fTemp21SE = powf(fTemp20SE,2.0f); // step: 108
			fVec19SE[0] = fTemp21SE;
			fTemp22SE = powf(fTemp20SE,3.0f); // step: 110
			fTemp23SE = (-2.0f * fTemp18SE); // step: 111
			fVec20SE[0] = (fTemp22SE + 1.0f + fTemp23SE /* Sum */);
			fVec21SE[0] = (fTemp22SE + 1.0f + -fTemp19SE /* Sum */);
			fTemp24SE = ((fTemp22SE + 1.0f + fTemp23SE + -fVec21SE[1] /* Sum */) / fTemp16SE); // step: 120
			fVec23SE[0] = fTemp24SE;
			fTemp25SE = ((fTemp22SE + 1.0f + -fTemp19SE + -fVec20SE[1] /* Sum */) / fTemp16SE); // step: 125
			fVec25SE[0] = fTemp25SE;
			fTemp26SE = (fTemp21SE * (fTemp21SE + -2.0f /* Sum */)); // step: 128
			fVec26SE[0] = fTemp26SE;
			fTemp27SE = ((fTemp26SE + -fVec26SE[1] /* Sum */) / fTemp16SE); // step: 133
			fVec28SE[0] = fTemp27SE;
			fTemp28SE = ((fTemp27SE + -fVec28SE[1] /* Sum */) / fTemp16SE); // step: 138
			fVec30SE[0] = fTemp28SE;
			fTemp29SE = fVec31SE[1]; // step: 141
			fTemp30SE = std::max(2e+01f, fabsf((fSlow3BE * fTemp1SE))); // step: 147
			fTemp31SE = (fConst1KI * fTemp30SE); // step: 148
			fVec31SE[0] = (fTemp29SE + fTemp31SE + -floorf((fTemp29SE + fTemp31SE /* Sum */)) /* Sum */);
			fTemp32SE = fVec31SE[0]; // step: 154
			fTemp33SE = (2.0f * fTemp32SE); // step: 155
			fTemp34SE = (fTemp33SE + -1.0f /* Sum */); // step: 156
			fTemp35SE = powf(fTemp34SE,2.0f); // step: 157
			fVec33SE[0] = fTemp35SE;
			fTemp36SE = powf(fTemp34SE,3.0f); // step: 159
			fTemp37SE = (-2.0f * fTemp32SE); // step: 160
			fVec34SE[0] = (fTemp36SE + 1.0f + fTemp37SE /* Sum */);
			fVec35SE[0] = (fTemp36SE + 1.0f + -fTemp33SE /* Sum */);
			fTemp38SE = ((fTemp36SE + 1.0f + fTemp37SE + -fVec35SE[1] /* Sum */) / fTemp30SE); // step: 169
			fVec37SE[0] = fTemp38SE;
			fTemp39SE = ((fTemp36SE + 1.0f + -fTemp33SE + -fVec34SE[1] /* Sum */) / fTemp30SE); // step: 174
			fVec39SE[0] = fTemp39SE;
			fTemp40SE = (fTemp35SE * (fTemp35SE + -2.0f /* Sum */)); // step: 177
			fVec40SE[0] = fTemp40SE;
			fTemp41SE = ((fTemp40SE + -fVec40SE[1] /* Sum */) / fTemp30SE); // step: 182
			fVec42SE[0] = fTemp41SE;
			fTemp42SE = ((fTemp41SE + -fVec42SE[1] /* Sum */) / fTemp30SE); // step: 187
			fVec44SE[0] = fTemp42SE;
			iVec45SI[0] = ((1103515245 * iVec45SI[1]) + 12345 /* Sum */);
			fTemp43SI = (4.656613e-10f * float(iVec45SI[0])); // step: 199
			fTemp44SI = fVec47SI[3]; // step: 202
			fTemp45SI = fVec47SI[2]; // step: 210
			fVec48SI[0] = ((0.5221894f * fTemp44SI) + fTemp43SI + (2.494956f * fVec48SI[1]) + (-2.0172658f * fTemp45SI) /* Sum */);
			fTemp46SI = fVec48SI[0]; // step: 214
			fVec47SI[0] = fTemp46SI;
			fVec52SE[0] = (fSlow10BE + (0.999f * fVec52SE[1]) /* Sum */);
			fTemp47SE = fVec52SE[0]; // step: 255
			fTemp48SE = (float)input0[i]; // step: 257
			fTemp49SC = float(iVec0KC[1]); // step: 272
			fTemp50SE = ((iSlow15BE) ? (fConst2KI * ((fTemp49SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE); // step: 279
			fTemp51SC = float(iVec0KC[3]); // step: 285
			fTemp52SE = (fConst3KI * ((fTemp51SC * (fTemp14SE + -fVec16SE[1] /* Sum */)) / fTemp2SE)); // step: 291
			fTemp53SC = float(iVec0KC[2]); // step: 296
			fTemp54SE = ((iSlow15BE) ? (fConst2KI * ((fTemp49SC * (fTemp21SE + -fVec19SE[1] /* Sum */)) / fTemp16SE)) : fTemp20SE); // step: 311
			fTemp55SE = (fConst3KI * ((fTemp51SC * (fTemp28SE + -fVec30SE[1] /* Sum */)) / fTemp16SE)); // step: 317
			fTemp56SE = ((iSlow15BE) ? (fConst2KI * ((fTemp49SC * (fTemp35SE + -fVec33SE[1] /* Sum */)) / fTemp30SE)) : fTemp34SE); // step: 332
			fTemp57SE = (fConst3KI * ((fTemp51SC * (fTemp42SE + -fVec44SE[1] /* Sum */)) / fTemp30SE)); // step: 338
			fTemp58SI = (0.049922034f * fVec48SI[0]); // step: 354
			fTemp59SI = (0.0506127f * fTemp45SI); // step: 356
			fTemp60SI = fVec47SI[1]; // step: 358
			fTemp61SE = (fTemp47SE * ((iSlow11BE) ? fTemp48SE : ((iSlow12BE) ? ((iSlow17BE) ? (fTemp58SI + fTemp59SI + -(0.095993534f * fTemp60SI) + -(0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow14BE) ? ((iSlow16BE) ? fTemp52SE : (fConst4KI * ((fTemp53SC * (fTemp11SE + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : fTemp50SE) + ((iSlow14BE) ? ((iSlow16BE) ? fTemp55SE : (fConst4KI * ((fTemp53SC * (fTemp25SE + -fVec23SE[1] /* Sum */)) / fTemp16SE))) : fTemp54SE) + ((iSlow14BE) ? ((iSlow16BE) ? fTemp57SE : (fConst4KI * ((fTemp53SC * (fTemp39SE + -fVec37SE[1] /* Sum */)) / fTemp30SE))) : fTemp56SE) /* Sum */)))))); // step: 368
			fTemp62SE = ((iSlow9BE) ? 0.0f : fTemp61SE); // step: 369
			fTemp63SE = fabsf(fTemp62SE); // step: 370
			fVec51SE[0] = ((fSlow7BE * fVec51SE[1]) + (fSlow8BE * fabsf((2.0f * fTemp63SE))) /* Sum */);
			float 	fRec8SE = fVec51SE[0]; // Zero delay
			iTemp64SE = (fRec8SE > fSlow4BE); // step: 379
			iVec70SE[0] = iTemp64SE;
			iVec75SE[0] = std::max(int((iSlow22BE * (iTemp64SE < iVec70SE[1]))), int((iVec75SE[1] + -1 /* Sum */)));
			fTemp65SE = fabsf(std::max(float(iTemp64SE), float((iVec75SE[0] > 0)))); // step: 416
			iTemp66SE = (fVec73SE[1] > fTemp65SE); // step: 417
			fVec72SE[0] = ((fVec72SE[1] * ((iTemp66SE) ? fSlow21BE : fSlow19BE)) + (fTemp65SE * (1.0f + -((iTemp66SE) ? fSlow24BE : fSlow23BE) /* Sum */)) /* Sum */);
			fVec73SE[0] = fVec72SE[0];
			fSlow25SE = (2e+01f * log10f(fVec73SE[0]));
			fVec71SE[0] = ((fSlow7BE * fVec71SE[1]) + (fSlow8BE * fabsf((fTemp63SE + fabsf(fTemp62SE) /* Sum */))) /* Sum */);
			float 	fRec13SE = fVec71SE[0]; // Zero delay
			iTemp67SE = (fRec13SE > fSlow4BE); // step: 447
			iVec81SE[0] = iTemp67SE;
			fTemp68SE = (fTemp47SE * ((iSlow11BE) ? fTemp48SE : ((iSlow12BE) ? ((iSlow17BE) ? (fTemp58SI + fTemp59SI + (-0.095993534f * fTemp60SI) + (-0.004408786f * fTemp44SI) /* Sum */) : fTemp43SI) : (0.33333334f * (fTemp47SE * (((iSlow14BE) ? ((iSlow16BE) ? fTemp52SE : (fConst4KI * ((fTemp53SC * (fTemp10SE + -fVec11SE[1] /* Sum */)) / fTemp2SE))) : fTemp50SE) + ((iSlow14BE) ? ((iSlow16BE) ? fTemp55SE : (fConst4KI * ((fTemp53SC * (fTemp24SE + -fVec25SE[1] /* Sum */)) / fTemp16SE))) : fTemp54SE) + ((iSlow14BE) ? ((iSlow16BE) ? fTemp57SE : (fConst4KI * ((fTemp53SC * (fTemp38SE + -fVec39SE[1] /* Sum */)) / fTemp30SE))) : fTemp56SE) /* Sum */)))))); // step: 486
			fTemp69SE = ((iSlow9BE) ? 0.0f : fTemp68SE); // step: 487
			iVec88SE[0] = std::max(int((iSlow22BE * (iTemp67SE < iVec81SE[1]))), int((iVec88SE[1] + -1 /* Sum */)));
			fTemp70SE = fabsf(std::max(float(iTemp67SE), float((iVec88SE[0] > 0)))); // step: 506
			iTemp71SE = (fVec86SE[1] > fTemp70SE); // step: 507
			fVec85SE[0] = ((fVec85SE[1] * ((iTemp71SE) ? fSlow21BE : fSlow19BE)) + (fTemp70SE * (1.0f + -((iTemp71SE) ? fSlow24BE : fSlow23BE) /* Sum */)) /* Sum */);
			fVec86SE[0] = fVec85SE[0];
			fTemp72SE = fVec86SE[0]; // step: 518
			fTemp73SE = ((iSlow9BE) ? fTemp68SE : (fTemp72SE * fTemp69SE)); // step: 520
			fTemp74SE = ((iSlow26BE) ? 0.0f : fTemp73SE); // step: 527
			fTemp75SE = fVec94SE[1]; // step: 554
			fTemp76SE = ((iSlow9BE) ? fTemp68SE : (fTemp72SE * fTemp69SE)); // step: 557
			fTemp77SE = ((iSlow26BE) ? 0.0f : fTemp76SE); // step: 558
			fTemp78SE = fabsf((fabsf(fTemp74SE) + fabsf(fTemp77SE) /* Sum */)); // step: 561
			fTemp79SE = ((iSlow26BE) ? 0.0f : ((iSlow9BE) ? fTemp61SE : (fTemp62SE * fTemp72SE))); // step: 571
			fTemp80SE = ((iSlow26BE) ? 0.0f : ((iSlow9BE) ? fTemp61SE : (fTemp62SE * fTemp72SE))); // step: 575
			fVec93SE[0] = ((fVec93SE[1] * (((fTemp75SE > fTemp78SE)) ? fSlow34BE : fSlow32BE)) + (fTemp78SE * (1.0f + -(((fTemp75SE > fabsf((fabsf(fTemp79SE) + fabsf(fTemp80SE) /* Sum */)))) ? fSlow36BE : fSlow35BE) /* Sum */)) /* Sum */);
			fVec94SE[0] = fVec93SE[0];
			fVec92SE[0] = ((fSlow30BE * fVec92SE[1]) + (fSlow40BE * std::max(((2e+01f * log10f(fVec94SE[0])) + -fSlow37BE /* Sum */), 0.0f)) /* Sum */);
			fTemp81SE = powf(1e+01f,(0.05f * fVec92SE[0])); // step: 608
			fTemp82SE = (fTemp74SE * fTemp81SE); // step: 609
			fTemp83SE = ((iSlow26BE) ? fTemp73SE : (fSlow27BE * fTemp82SE)); // step: 611
			fTemp84SE = (fTemp77SE * fTemp81SE); // step: 612
			fTemp85SE = fVec100SE[1]; // step: 622
			fTemp86SE = fabsf((fabsf(fTemp82SE) + fabsf(fTemp84SE) /* Sum */)); // step: 626
			fVec99SE[0] = ((fVec99SE[1] * (((fTemp85SE > fTemp86SE)) ? fSlow34BE : fSlow32BE)) + (fTemp86SE * (1.0f + -(((fTemp85SE > fabsf((fabsf((fTemp79SE * fTemp81SE)) + fabsf((fTemp80SE * fTemp81SE)) /* Sum */)))) ? fSlow36BE : fSlow35BE) /* Sum */)) /* Sum */);
			fVec100SE[0] = fVec99SE[0];
			fVec98SE[0] = ((fSlow41BE * fVec98SE[1]) + (fSlow38BE * (std::max(((2e+01f * log10f(fVec100SE[0])) + -fSlow37BE /* Sum */), 0.0f) * fSlow39BE)) /* Sum */);
			fSlow42SE = (2e+01f * log10f(powf(1e+01f,(0.05f * fVec98SE[0]))));
			fTemp87SE = ((iSlow26BE) ? fTemp76SE : (fSlow27BE * fTemp84SE)); // step: 663
			fTemp88SE = fVec104SE[2]; // step: 678
			fVec105SE[0] = (fTemp83SE + fTemp87SE + -(fConst8KI * ((fConst9KI * fTemp88SE) + (fConst12KI * fVec105SE[1]) /* Sum */)) /* Sum */);
			fTemp89SE = fVec105SE[0]; // step: 693
			fVec104SE[0] = fTemp89SE;
			fTemp90SE = fVec109SE[2]; // step: 718
			fVec110SE[0] = ((fConst8KI * ((fConst14KI * fVec105SE[0]) + (fConst15KI * fVec104SE[1]) + (fConst14KI * fTemp88SE) /* Sum */)) + -(fConst16KI * ((fConst17KI * fTemp90SE) + (fConst18KI * fVec110SE[1]) /* Sum */)) /* Sum */);
			fTemp91SE = fVec110SE[0]; // step: 730
			fVec109SE[0] = fTemp91SE;
			fTemp92SE = fVec114SE[2]; // step: 754
			fVec115SE[0] = ((fConst16KI * ((fConst20KI * fVec110SE[0]) + (fConst21KI * fVec109SE[1]) + (fConst20KI * fTemp90SE) /* Sum */)) + -(fConst22KI * ((fConst23KI * fTemp92SE) + (fConst24KI * fVec115SE[1]) /* Sum */)) /* Sum */);
			fTemp93SE = fVec115SE[0]; // step: 766
			fVec114SE[0] = fTemp93SE;
			fTemp94SE = fVec117SE[2]; // step: 777
			fVec118SE[0] = (fTemp83SE + fTemp87SE + -(fConst25KI * ((fConst26KI * fTemp94SE) + (fConst27KI * fVec118SE[1]) /* Sum */)) /* Sum */);
			fTemp95SE = fVec118SE[0]; // step: 789
			fVec117SE[0] = fTemp95SE;
			fTemp96SE = fVec122SE[2]; // step: 814
			fVec123SE[0] = ((fConst25KI * ((fConst29KI * fVec118SE[0]) + (fConst30KI * fVec117SE[1]) + (fConst29KI * fTemp94SE) /* Sum */)) + -(fConst31KI * ((fConst32KI * fTemp96SE) + (fConst33KI * fVec123SE[1]) /* Sum */)) /* Sum */);
			fTemp97SE = fVec123SE[0]; // step: 826
			fVec122SE[0] = fTemp97SE;
			fTemp98SE = fVec127SE[2]; // step: 848
			fVec128SE[0] = ((fConst31KI * ((fConst34KI * fVec123SE[0]) + (fConst35KI * fVec122SE[1]) + (fConst34KI * fTemp96SE) /* Sum */)) + -(fConst36KI * ((fConst37KI * fTemp98SE) + (fConst38KI * fVec128SE[1]) /* Sum */)) /* Sum */);
			fTemp99SE = fVec128SE[0]; // step: 860
			fVec127SE[0] = fTemp99SE;
			fTemp100SE = (fConst36KI * ((fConst39KI * fVec128SE[0]) + (fConst40KI * fVec127SE[1]) + (fConst39KI * fTemp98SE) /* Sum */)); // step: 871
			fTemp101SE = fVec132SE[2]; // step: 883
			fVec133SE[0] = (fTemp100SE + -(fConst43KI * ((fConst44KI * fTemp101SE) + (fConst47KI * fVec133SE[1]) /* Sum */)) /* Sum */);
			fTemp102SE = fVec133SE[0]; // step: 898
			fVec132SE[0] = fTemp102SE;
			fTemp103SE = fVec137SE[2]; // step: 918
			fVec138SE[0] = ((fConst43KI * ((fConst49KI * fVec133SE[0]) + (fConst50KI * fVec132SE[1]) + (fConst49KI * fTemp101SE) /* Sum */)) + -(fConst51KI * ((fConst52KI * fTemp103SE) + (fConst53KI * fVec138SE[1]) /* Sum */)) /* Sum */);
			fTemp104SE = fVec138SE[0]; // step: 930
			fVec137SE[0] = fTemp104SE;
			fTemp105SE = fVec142SE[2]; // step: 950
			fVec143SE[0] = ((fConst51KI * ((fConst55KI * fVec138SE[0]) + (fConst56KI * fVec137SE[1]) + (fConst55KI * fTemp103SE) /* Sum */)) + -(fConst57KI * ((fConst58KI * fTemp105SE) + (fConst59KI * fVec143SE[1]) /* Sum */)) /* Sum */);
			fTemp106SE = fVec143SE[0]; // step: 962
			fVec142SE[0] = fTemp106SE;
			fTemp107SE = fVec145SE[2]; // step: 970
			fVec146SE[0] = (fTemp100SE + -(fConst60KI * ((fConst61KI * fTemp107SE) + (fConst62KI * fVec146SE[1]) /* Sum */)) /* Sum */);
			fTemp108SE = fVec146SE[0]; // step: 982
			fVec145SE[0] = fTemp108SE;
			fTemp109SE = fVec150SE[2]; // step: 1002
			fVec151SE[0] = ((fConst60KI * ((fConst64KI * fVec146SE[0]) + (fConst65KI * fVec145SE[1]) + (fConst64KI * fTemp107SE) /* Sum */)) + -(fConst66KI * ((fConst67KI * fTemp109SE) + (fConst68KI * fVec151SE[1]) /* Sum */)) /* Sum */);
			fTemp110SE = fVec151SE[0]; // step: 1014
			fVec150SE[0] = fTemp110SE;
			fTemp111SE = fVec155SE[2]; // step: 1032
			fVec156SE[0] = ((fConst66KI * ((fConst69KI * fVec151SE[0]) + (fConst70KI * fVec150SE[1]) + (fConst69KI * fTemp109SE) /* Sum */)) + -(fConst71KI * ((fConst72KI * fTemp111SE) + (fConst73KI * fVec156SE[1]) /* Sum */)) /* Sum */);
			fTemp112SE = fVec156SE[0]; // step: 1044
			fVec155SE[0] = fTemp112SE;
			fTemp113SE = (fConst71KI * ((fConst74KI * fVec156SE[0]) + (fConst75KI * fVec155SE[1]) + (fConst74KI * fTemp111SE) /* Sum */)); // step: 1054
			fTemp114SE = fVec160SE[2]; // step: 1066
			fVec161SE[0] = (fTemp113SE + -(fConst78KI * ((fConst79KI * fTemp114SE) + (fConst82KI * fVec161SE[1]) /* Sum */)) /* Sum */);
			fTemp115SE = fVec161SE[0]; // step: 1081
			fVec160SE[0] = fTemp115SE;
			fTemp116SE = fVec165SE[2]; // step: 1101
			fVec166SE[0] = ((fConst78KI * ((fConst84KI * fVec161SE[0]) + (fConst85KI * fVec160SE[1]) + (fConst84KI * fTemp114SE) /* Sum */)) + -(fConst86KI * ((fConst87KI * fTemp116SE) + (fConst88KI * fVec166SE[1]) /* Sum */)) /* Sum */);
			fTemp117SE = fVec166SE[0]; // step: 1113
			fVec165SE[0] = fTemp117SE;
			fTemp118SE = fVec170SE[2]; // step: 1133
			fVec171SE[0] = ((fConst86KI * ((fConst90KI * fVec166SE[0]) + (fConst91KI * fVec165SE[1]) + (fConst90KI * fTemp116SE) /* Sum */)) + -(fConst92KI * ((fConst93KI * fTemp118SE) + (fConst94KI * fVec171SE[1]) /* Sum */)) /* Sum */);
			fTemp119SE = fVec171SE[0]; // step: 1145
			fVec170SE[0] = fTemp119SE;
			fTemp120SE = fVec173SE[2]; // step: 1153
			fVec174SE[0] = (fTemp113SE + -(fConst95KI * ((fConst96KI * fTemp120SE) + (fConst97KI * fVec174SE[1]) /* Sum */)) /* Sum */);
			fTemp121SE = fVec174SE[0]; // step: 1165
			fVec173SE[0] = fTemp121SE;
			fTemp122SE = fVec178SE[2]; // step: 1185
			fVec179SE[0] = ((fConst95KI * ((fConst99KI * fVec174SE[0]) + (fConst100KI * fVec173SE[1]) + (fConst99KI * fTemp120SE) /* Sum */)) + -(fConst101KI * ((fConst102KI * fTemp122SE) + (fConst103KI * fVec179SE[1]) /* Sum */)) /* Sum */);
			fTemp123SE = fVec179SE[0]; // step: 1197
			fVec178SE[0] = fTemp123SE;
			fTemp124SE = fVec183SE[2]; // step: 1215
			fVec184SE[0] = ((fConst101KI * ((fConst104KI * fVec179SE[0]) + (fConst105KI * fVec178SE[1]) + (fConst104KI * fTemp122SE) /* Sum */)) + -(fConst106KI * ((fConst107KI * fTemp124SE) + (fConst108KI * fVec184SE[1]) /* Sum */)) /* Sum */);
			fTemp125SE = fVec184SE[0]; // step: 1227
			fVec183SE[0] = fTemp125SE;
			fTemp126SE = (fConst106KI * ((fConst109KI * fVec184SE[0]) + (fConst110KI * fVec183SE[1]) + (fConst109KI * fTemp124SE) /* Sum */)); // step: 1237
			fTemp127SE = fVec188SE[2]; // step: 1249
			fVec189SE[0] = (fTemp126SE + -(fConst113KI * ((fConst114KI * fTemp127SE) + (fConst117KI * fVec189SE[1]) /* Sum */)) /* Sum */);
			fTemp128SE = fVec189SE[0]; // step: 1264
			fVec188SE[0] = fTemp128SE;
			fTemp129SE = fVec193SE[2]; // step: 1284
			fVec194SE[0] = ((fConst113KI * ((fConst119KI * fVec189SE[0]) + (fConst120KI * fVec188SE[1]) + (fConst119KI * fTemp127SE) /* Sum */)) + -(fConst121KI * ((fConst122KI * fTemp129SE) + (fConst123KI * fVec194SE[1]) /* Sum */)) /* Sum */);
			fTemp130SE = fVec194SE[0]; // step: 1296
			fVec193SE[0] = fTemp130SE;
			fTemp131SE = fVec198SE[2]; // step: 1316
			fVec199SE[0] = ((fConst121KI * ((fConst125KI * fVec194SE[0]) + (fConst126KI * fVec193SE[1]) + (fConst125KI * fTemp129SE) /* Sum */)) + -(fConst127KI * ((fConst128KI * fTemp131SE) + (fConst129KI * fVec199SE[1]) /* Sum */)) /* Sum */);
			fTemp132SE = fVec199SE[0]; // step: 1328
			fVec198SE[0] = fTemp132SE;
			fTemp133SE = fVec201SE[2]; // step: 1336
			fVec202SE[0] = (fTemp126SE + -(fConst130KI * ((fConst131KI * fTemp133SE) + (fConst132KI * fVec202SE[1]) /* Sum */)) /* Sum */);
			fTemp134SE = fVec202SE[0]; // step: 1348
			fVec201SE[0] = fTemp134SE;
			fTemp135SE = fVec206SE[2]; // step: 1368
			fVec207SE[0] = ((fConst130KI * ((fConst134KI * fVec202SE[0]) + (fConst135KI * fVec201SE[1]) + (fConst134KI * fTemp133SE) /* Sum */)) + -(fConst136KI * ((fConst137KI * fTemp135SE) + (fConst138KI * fVec207SE[1]) /* Sum */)) /* Sum */);
			fTemp136SE = fVec207SE[0]; // step: 1380
			fVec206SE[0] = fTemp136SE;
			fTemp137SE = fVec211SE[2]; // step: 1398
			fVec212SE[0] = ((fConst136KI * ((fConst139KI * fVec207SE[0]) + (fConst140KI * fVec206SE[1]) + (fConst139KI * fTemp135SE) /* Sum */)) + -(fConst141KI * ((fConst142KI * fTemp137SE) + (fConst143KI * fVec212SE[1]) /* Sum */)) /* Sum */);
			fTemp138SE = fVec212SE[0]; // step: 1410
			fVec211SE[0] = fTemp138SE;
			fTemp139SE = (fConst141KI * ((fConst144KI * fVec212SE[0]) + (fConst145KI * fVec211SE[1]) + (fConst144KI * fTemp137SE) /* Sum */)); // step: 1420
			fTemp140SE = fVec216SE[2]; // step: 1432
			fVec217SE[0] = (fTemp139SE + -(fConst148KI * ((fConst149KI * fTemp140SE) + (fConst152KI * fVec217SE[1]) /* Sum */)) /* Sum */);
			fTemp141SE = fVec217SE[0]; // step: 1447
			fVec216SE[0] = fTemp141SE;
			fTemp142SE = fVec221SE[2]; // step: 1467
			fVec222SE[0] = ((fConst148KI * ((fConst154KI * fVec217SE[0]) + (fConst155KI * fVec216SE[1]) + (fConst154KI * fTemp140SE) /* Sum */)) + -(fConst156KI * ((fConst157KI * fTemp142SE) + (fConst158KI * fVec222SE[1]) /* Sum */)) /* Sum */);
			fTemp143SE = fVec222SE[0]; // step: 1479
			fVec221SE[0] = fTemp143SE;
			fTemp144SE = fVec226SE[2]; // step: 1499
			fVec227SE[0] = ((fConst156KI * ((fConst160KI * fVec222SE[0]) + (fConst161KI * fVec221SE[1]) + (fConst160KI * fTemp142SE) /* Sum */)) + -(fConst162KI * ((fConst163KI * fTemp144SE) + (fConst164KI * fVec227SE[1]) /* Sum */)) /* Sum */);
			fTemp145SE = fVec227SE[0]; // step: 1511
			fVec226SE[0] = fTemp145SE;
			fTemp146SE = fVec229SE[2]; // step: 1519
			fVec230SE[0] = (fTemp139SE + -(fConst165KI * ((fConst166KI * fTemp146SE) + (fConst167KI * fVec230SE[1]) /* Sum */)) /* Sum */);
			fTemp147SE = fVec230SE[0]; // step: 1531
			fVec229SE[0] = fTemp147SE;
			fTemp148SE = fVec234SE[2]; // step: 1551
			fVec235SE[0] = ((fConst165KI * ((fConst169KI * fVec230SE[0]) + (fConst170KI * fVec229SE[1]) + (fConst169KI * fTemp146SE) /* Sum */)) + -(fConst171KI * ((fConst172KI * fTemp148SE) + (fConst173KI * fVec235SE[1]) /* Sum */)) /* Sum */);
			fTemp149SE = fVec235SE[0]; // step: 1563
			fVec234SE[0] = fTemp149SE;
			fTemp150SE = fVec239SE[2]; // step: 1581
			fVec240SE[0] = ((fConst171KI * ((fConst174KI * fVec235SE[0]) + (fConst175KI * fVec234SE[1]) + (fConst174KI * fTemp148SE) /* Sum */)) + -(fConst176KI * ((fConst177KI * fTemp150SE) + (fConst178KI * fVec240SE[1]) /* Sum */)) /* Sum */);
			fTemp151SE = fVec240SE[0]; // step: 1593
			fVec239SE[0] = fTemp151SE;
			fTemp152SE = (fConst176KI * ((fConst179KI * fVec240SE[0]) + (fConst180KI * fVec239SE[1]) + (fConst179KI * fTemp150SE) /* Sum */)); // step: 1603
			fTemp153SE = fVec244SE[2]; // step: 1615
			fVec245SE[0] = (fTemp152SE + -(fConst183KI * ((fConst184KI * fTemp153SE) + (fConst187KI * fVec245SE[1]) /* Sum */)) /* Sum */);
			fTemp154SE = fVec245SE[0]; // step: 1630
			fVec244SE[0] = fTemp154SE;
			fTemp155SE = fVec249SE[2]; // step: 1650
			fVec250SE[0] = ((fConst183KI * ((fConst189KI * fVec245SE[0]) + (fConst190KI * fVec244SE[1]) + (fConst189KI * fTemp153SE) /* Sum */)) + -(fConst191KI * ((fConst192KI * fTemp155SE) + (fConst193KI * fVec250SE[1]) /* Sum */)) /* Sum */);
			fTemp156SE = fVec250SE[0]; // step: 1662
			fVec249SE[0] = fTemp156SE;
			fTemp157SE = fVec254SE[2]; // step: 1682
			fVec255SE[0] = ((fConst191KI * ((fConst195KI * fVec250SE[0]) + (fConst196KI * fVec249SE[1]) + (fConst195KI * fTemp155SE) /* Sum */)) + -(fConst197KI * ((fConst198KI * fTemp157SE) + (fConst199KI * fVec255SE[1]) /* Sum */)) /* Sum */);
			fTemp158SE = fVec255SE[0]; // step: 1694
			fVec254SE[0] = fTemp158SE;
			fTemp159SE = fVec257SE[2]; // step: 1702
			fVec258SE[0] = (fTemp152SE + -(fConst200KI * ((fConst201KI * fTemp159SE) + (fConst202KI * fVec258SE[1]) /* Sum */)) /* Sum */);
			fTemp160SE = fVec258SE[0]; // step: 1714
			fVec257SE[0] = fTemp160SE;
			fTemp161SE = fVec262SE[2]; // step: 1734
			fVec263SE[0] = ((fConst200KI * ((fConst204KI * fVec258SE[0]) + (fConst205KI * fVec257SE[1]) + (fConst204KI * fTemp159SE) /* Sum */)) + -(fConst206KI * ((fConst207KI * fTemp161SE) + (fConst208KI * fVec263SE[1]) /* Sum */)) /* Sum */);
			fTemp162SE = fVec263SE[0]; // step: 1746
			fVec262SE[0] = fTemp162SE;
			fTemp163SE = fVec267SE[2]; // step: 1764
			fVec268SE[0] = ((fConst206KI * ((fConst209KI * fVec263SE[0]) + (fConst210KI * fVec262SE[1]) + (fConst209KI * fTemp161SE) /* Sum */)) + -(fConst211KI * ((fConst212KI * fTemp163SE) + (fConst213KI * fVec268SE[1]) /* Sum */)) /* Sum */);
			fTemp164SE = fVec268SE[0]; // step: 1776
			fVec267SE[0] = fTemp164SE;
			fTemp165SE = (fConst211KI * ((fConst214KI * fVec268SE[0]) + (fConst215KI * fVec267SE[1]) + (fConst214KI * fTemp163SE) /* Sum */)); // step: 1786
			fTemp166SE = fVec272SE[2]; // step: 1798
			fVec273SE[0] = (fTemp165SE + -(fConst218KI * ((fConst219KI * fTemp166SE) + (fConst222KI * fVec273SE[1]) /* Sum */)) /* Sum */);
			fTemp167SE = fVec273SE[0]; // step: 1813
			fVec272SE[0] = fTemp167SE;
			fTemp168SE = fVec277SE[2]; // step: 1833
			fVec278SE[0] = ((fConst218KI * ((fConst224KI * fVec273SE[0]) + (fConst225KI * fVec272SE[1]) + (fConst224KI * fTemp166SE) /* Sum */)) + -(fConst226KI * ((fConst227KI * fTemp168SE) + (fConst228KI * fVec278SE[1]) /* Sum */)) /* Sum */);
			fTemp169SE = fVec278SE[0]; // step: 1845
			fVec277SE[0] = fTemp169SE;
			fTemp170SE = fVec282SE[2]; // step: 1865
			fVec283SE[0] = ((fConst226KI * ((fConst230KI * fVec278SE[0]) + (fConst231KI * fVec277SE[1]) + (fConst230KI * fTemp168SE) /* Sum */)) + -(fConst232KI * ((fConst233KI * fTemp170SE) + (fConst234KI * fVec283SE[1]) /* Sum */)) /* Sum */);
			fTemp171SE = fVec283SE[0]; // step: 1877
			fVec282SE[0] = fTemp171SE;
			fTemp172SE = fVec285SE[2]; // step: 1885
			fVec286SE[0] = (fTemp165SE + -(fConst235KI * ((fConst236KI * fTemp172SE) + (fConst237KI * fVec286SE[1]) /* Sum */)) /* Sum */);
			fTemp173SE = fVec286SE[0]; // step: 1897
			fVec285SE[0] = fTemp173SE;
			fTemp174SE = fVec290SE[2]; // step: 1917
			fVec291SE[0] = ((fConst235KI * ((fConst239KI * fVec286SE[0]) + (fConst240KI * fVec285SE[1]) + (fConst239KI * fTemp172SE) /* Sum */)) + -(fConst241KI * ((fConst242KI * fTemp174SE) + (fConst243KI * fVec291SE[1]) /* Sum */)) /* Sum */);
			fTemp175SE = fVec291SE[0]; // step: 1929
			fVec290SE[0] = fTemp175SE;
			fTemp176SE = fVec295SE[2]; // step: 1947
			fVec296SE[0] = ((fConst241KI * ((fConst244KI * fVec291SE[0]) + (fConst245KI * fVec290SE[1]) + (fConst244KI * fTemp174SE) /* Sum */)) + -(fConst246KI * ((fConst247KI * fTemp176SE) + (fConst248KI * fVec296SE[1]) /* Sum */)) /* Sum */);
			fTemp177SE = fVec296SE[0]; // step: 1959
			fVec295SE[0] = fTemp177SE;
			fTemp178SE = (fConst246KI * ((fConst249KI * fVec296SE[0]) + (fConst250KI * fVec295SE[1]) + (fConst249KI * fTemp176SE) /* Sum */)); // step: 1969
			fTemp179SE = fVec300SE[2]; // step: 1981
			fVec301SE[0] = (fTemp178SE + -(fConst253KI * ((fConst254KI * fTemp179SE) + (fConst257KI * fVec301SE[1]) /* Sum */)) /* Sum */);
			fTemp180SE = fVec301SE[0]; // step: 1996
			fVec300SE[0] = fTemp180SE;
			fTemp181SE = fVec305SE[2]; // step: 2016
			fVec306SE[0] = ((fConst253KI * ((fConst259KI * fVec301SE[0]) + (fConst260KI * fVec300SE[1]) + (fConst259KI * fTemp179SE) /* Sum */)) + -(fConst261KI * ((fConst262KI * fTemp181SE) + (fConst263KI * fVec306SE[1]) /* Sum */)) /* Sum */);
			fTemp182SE = fVec306SE[0]; // step: 2028
			fVec305SE[0] = fTemp182SE;
			fTemp183SE = fVec310SE[2]; // step: 2048
			fVec311SE[0] = ((fConst261KI * ((fConst265KI * fVec306SE[0]) + (fConst266KI * fVec305SE[1]) + (fConst265KI * fTemp181SE) /* Sum */)) + -(fConst267KI * ((fConst268KI * fTemp183SE) + (fConst269KI * fVec311SE[1]) /* Sum */)) /* Sum */);
			fTemp184SE = fVec311SE[0]; // step: 2060
			fVec310SE[0] = fTemp184SE;
			fTemp185SE = fVec313SE[2]; // step: 2068
			fVec314SE[0] = (fTemp178SE + -(fConst270KI * ((fConst271KI * fTemp185SE) + (fConst272KI * fVec314SE[1]) /* Sum */)) /* Sum */);
			fTemp186SE = fVec314SE[0]; // step: 2080
			fVec313SE[0] = fTemp186SE;
			fTemp187SE = fVec318SE[2]; // step: 2100
			fVec319SE[0] = ((fConst270KI * ((fConst274KI * fVec314SE[0]) + (fConst275KI * fVec313SE[1]) + (fConst274KI * fTemp185SE) /* Sum */)) + -(fConst276KI * ((fConst277KI * fTemp187SE) + (fConst278KI * fVec319SE[1]) /* Sum */)) /* Sum */);
			fTemp188SE = fVec319SE[0]; // step: 2112
			fVec318SE[0] = fTemp188SE;
			fTemp189SE = fVec323SE[2]; // step: 2130
			fVec324SE[0] = ((fConst276KI * ((fConst279KI * fVec319SE[0]) + (fConst280KI * fVec318SE[1]) + (fConst279KI * fTemp187SE) /* Sum */)) + -(fConst281KI * ((fConst282KI * fTemp189SE) + (fConst283KI * fVec324SE[1]) /* Sum */)) /* Sum */);
			fTemp190SE = fVec324SE[0]; // step: 2142
			fVec323SE[0] = fTemp190SE;
			fTemp191SE = (fConst281KI * ((fConst284KI * fVec324SE[0]) + (fConst285KI * fVec323SE[1]) + (fConst284KI * fTemp189SE) /* Sum */)); // step: 2152
			fTemp192SE = fVec328SE[2]; // step: 2164
			fVec329SE[0] = (fTemp191SE + -(fConst288KI * ((fConst289KI * fTemp192SE) + (fConst292KI * fVec329SE[1]) /* Sum */)) /* Sum */);
			fTemp193SE = fVec329SE[0]; // step: 2179
			fVec328SE[0] = fTemp193SE;
			fTemp194SE = fVec333SE[2]; // step: 2199
			fVec334SE[0] = ((fConst288KI * ((fConst294KI * fVec329SE[0]) + (fConst295KI * fVec328SE[1]) + (fConst294KI * fTemp192SE) /* Sum */)) + -(fConst296KI * ((fConst297KI * fTemp194SE) + (fConst298KI * fVec334SE[1]) /* Sum */)) /* Sum */);
			fTemp195SE = fVec334SE[0]; // step: 2211
			fVec333SE[0] = fTemp195SE;
			fTemp196SE = fVec338SE[2]; // step: 2231
			fVec339SE[0] = ((fConst296KI * ((fConst300KI * fVec334SE[0]) + (fConst301KI * fVec333SE[1]) + (fConst300KI * fTemp194SE) /* Sum */)) + -(fConst302KI * ((fConst303KI * fTemp196SE) + (fConst304KI * fVec339SE[1]) /* Sum */)) /* Sum */);
			fTemp197SE = fVec339SE[0]; // step: 2243
			fVec338SE[0] = fTemp197SE;
			fTemp198SE = fVec341SE[2]; // step: 2251
			fVec342SE[0] = (fTemp191SE + -(fConst305KI * ((fConst306KI * fTemp198SE) + (fConst307KI * fVec342SE[1]) /* Sum */)) /* Sum */);
			fTemp199SE = fVec342SE[0]; // step: 2263
			fVec341SE[0] = fTemp199SE;
			fTemp200SE = fVec346SE[2]; // step: 2283
			fVec347SE[0] = ((fConst305KI * ((fConst309KI * fVec342SE[0]) + (fConst310KI * fVec341SE[1]) + (fConst309KI * fTemp198SE) /* Sum */)) + -(fConst311KI * ((fConst312KI * fTemp200SE) + (fConst313KI * fVec347SE[1]) /* Sum */)) /* Sum */);
			fTemp201SE = fVec347SE[0]; // step: 2295
			fVec346SE[0] = fTemp201SE;
			fTemp202SE = fVec351SE[2]; // step: 2313
			fVec352SE[0] = ((fConst311KI * ((fConst314KI * fVec347SE[0]) + (fConst315KI * fVec346SE[1]) + (fConst314KI * fTemp200SE) /* Sum */)) + -(fConst316KI * ((fConst317KI * fTemp202SE) + (fConst318KI * fVec352SE[1]) /* Sum */)) /* Sum */);
			fTemp203SE = fVec352SE[0]; // step: 2325
			fVec351SE[0] = fTemp203SE;
			fTemp204SE = (fConst316KI * ((fConst319KI * fVec352SE[0]) + (fConst320KI * fVec351SE[1]) + (fConst319KI * fTemp202SE) /* Sum */)); // step: 2335
			fTemp205SE = fVec356SE[2]; // step: 2347
			fVec357SE[0] = (fTemp204SE + -(fConst323KI * ((fConst324KI * fTemp205SE) + (fConst327KI * fVec357SE[1]) /* Sum */)) /* Sum */);
			fTemp206SE = fVec357SE[0]; // step: 2362
			fVec356SE[0] = fTemp206SE;
			fTemp207SE = fVec361SE[2]; // step: 2382
			fVec362SE[0] = ((fConst323KI * ((fConst329KI * fVec357SE[0]) + (fConst330KI * fVec356SE[1]) + (fConst329KI * fTemp205SE) /* Sum */)) + -(fConst331KI * ((fConst332KI * fTemp207SE) + (fConst333KI * fVec362SE[1]) /* Sum */)) /* Sum */);
			fTemp208SE = fVec362SE[0]; // step: 2394
			fVec361SE[0] = fTemp208SE;
			fTemp209SE = fVec366SE[2]; // step: 2414
			fVec367SE[0] = ((fConst331KI * ((fConst335KI * fVec362SE[0]) + (fConst336KI * fVec361SE[1]) + (fConst335KI * fTemp207SE) /* Sum */)) + -(fConst337KI * ((fConst338KI * fTemp209SE) + (fConst339KI * fVec367SE[1]) /* Sum */)) /* Sum */);
			fTemp210SE = fVec367SE[0]; // step: 2426
			fVec366SE[0] = fTemp210SE;
			fTemp211SE = fVec369SE[2]; // step: 2434
			fVec370SE[0] = (fTemp204SE + -(fConst340KI * ((fConst341KI * fTemp211SE) + (fConst342KI * fVec370SE[1]) /* Sum */)) /* Sum */);
			fTemp212SE = fVec370SE[0]; // step: 2446
			fVec369SE[0] = fTemp212SE;
			fTemp213SE = fVec374SE[2]; // step: 2466
			fVec375SE[0] = ((fConst340KI * ((fConst344KI * fVec370SE[0]) + (fConst345KI * fVec369SE[1]) + (fConst344KI * fTemp211SE) /* Sum */)) + -(fConst346KI * ((fConst347KI * fTemp213SE) + (fConst348KI * fVec375SE[1]) /* Sum */)) /* Sum */);
			fTemp214SE = fVec375SE[0]; // step: 2478
			fVec374SE[0] = fTemp214SE;
			fTemp215SE = fVec379SE[2]; // step: 2496
			fVec380SE[0] = ((fConst346KI * ((fConst349KI * fVec375SE[0]) + (fConst350KI * fVec374SE[1]) + (fConst349KI * fTemp213SE) /* Sum */)) + -(fConst351KI * ((fConst352KI * fTemp215SE) + (fConst353KI * fVec380SE[1]) /* Sum */)) /* Sum */);
			fTemp216SE = fVec380SE[0]; // step: 2508
			fVec379SE[0] = fTemp216SE;
			fTemp217SE = (fConst351KI * ((fConst354KI * fVec380SE[0]) + (fConst355KI * fVec379SE[1]) + (fConst354KI * fTemp215SE) /* Sum */)); // step: 2518
			fTemp218SE = fVec384SE[2]; // step: 2530
			fVec385SE[0] = (fTemp217SE + -(fConst358KI * ((fConst359KI * fTemp218SE) + (fConst362KI * fVec385SE[1]) /* Sum */)) /* Sum */);
			fTemp219SE = fVec385SE[0]; // step: 2545
			fVec384SE[0] = fTemp219SE;
			fTemp220SE = fVec389SE[2]; // step: 2565
			fVec390SE[0] = ((fConst358KI * ((fConst364KI * fVec385SE[0]) + (fConst365KI * fVec384SE[1]) + (fConst364KI * fTemp218SE) /* Sum */)) + -(fConst366KI * ((fConst367KI * fTemp220SE) + (fConst368KI * fVec390SE[1]) /* Sum */)) /* Sum */);
			fTemp221SE = fVec390SE[0]; // step: 2577
			fVec389SE[0] = fTemp221SE;
			fTemp222SE = fVec394SE[2]; // step: 2597
			fVec395SE[0] = ((fConst366KI * ((fConst370KI * fVec390SE[0]) + (fConst371KI * fVec389SE[1]) + (fConst370KI * fTemp220SE) /* Sum */)) + -(fConst372KI * ((fConst373KI * fTemp222SE) + (fConst374KI * fVec395SE[1]) /* Sum */)) /* Sum */);
			fTemp223SE = fVec395SE[0]; // step: 2609
			fVec394SE[0] = fTemp223SE;
			fTemp224SE = fVec397SE[2]; // step: 2617
			fVec398SE[0] = (fTemp217SE + -(fConst375KI * ((fConst376KI * fTemp224SE) + (fConst377KI * fVec398SE[1]) /* Sum */)) /* Sum */);
			fTemp225SE = fVec398SE[0]; // step: 2629
			fVec397SE[0] = fTemp225SE;
			fTemp226SE = fVec402SE[2]; // step: 2649
			fVec403SE[0] = ((fConst375KI * ((fConst379KI * fVec398SE[0]) + (fConst380KI * fVec397SE[1]) + (fConst379KI * fTemp224SE) /* Sum */)) + -(fConst381KI * ((fConst382KI * fTemp226SE) + (fConst383KI * fVec403SE[1]) /* Sum */)) /* Sum */);
			fTemp227SE = fVec403SE[0]; // step: 2661
			fVec402SE[0] = fTemp227SE;
			fTemp228SE = fVec407SE[2]; // step: 2679
			fVec408SE[0] = ((fConst381KI * ((fConst384KI * fVec403SE[0]) + (fConst385KI * fVec402SE[1]) + (fConst384KI * fTemp226SE) /* Sum */)) + -(fConst386KI * ((fConst387KI * fTemp228SE) + (fConst388KI * fVec408SE[1]) /* Sum */)) /* Sum */);
			fTemp229SE = fVec408SE[0]; // step: 2691
			fVec407SE[0] = fTemp229SE;
			fTemp230SE = (fConst386KI * ((fConst389KI * fVec408SE[0]) + (fConst390KI * fVec407SE[1]) + (fConst389KI * fTemp228SE) /* Sum */)); // step: 2701
			fTemp231SE = fVec412SE[2]; // step: 2713
			fVec413SE[0] = (fTemp230SE + -(fConst393KI * ((fConst394KI * fTemp231SE) + (fConst397KI * fVec413SE[1]) /* Sum */)) /* Sum */);
			fTemp232SE = fVec413SE[0]; // step: 2728
			fVec412SE[0] = fTemp232SE;
			fTemp233SE = fVec417SE[2]; // step: 2748
			fVec418SE[0] = ((fConst393KI * ((fConst399KI * fVec413SE[0]) + (fConst400KI * fVec412SE[1]) + (fConst399KI * fTemp231SE) /* Sum */)) + -(fConst401KI * ((fConst402KI * fTemp233SE) + (fConst403KI * fVec418SE[1]) /* Sum */)) /* Sum */);
			fTemp234SE = fVec418SE[0]; // step: 2760
			fVec417SE[0] = fTemp234SE;
			fTemp235SE = fVec422SE[2]; // step: 2780
			fVec423SE[0] = ((fConst401KI * ((fConst405KI * fVec418SE[0]) + (fConst406KI * fVec417SE[1]) + (fConst405KI * fTemp233SE) /* Sum */)) + -(fConst407KI * ((fConst408KI * fTemp235SE) + (fConst409KI * fVec423SE[1]) /* Sum */)) /* Sum */);
			fTemp236SE = fVec423SE[0]; // step: 2792
			fVec422SE[0] = fTemp236SE;
			fTemp237SE = fVec425SE[2]; // step: 2800
			fVec426SE[0] = (fTemp230SE + -(fConst410KI * ((fConst411KI * fTemp237SE) + (fConst412KI * fVec426SE[1]) /* Sum */)) /* Sum */);
			fTemp238SE = fVec426SE[0]; // step: 2812
			fVec425SE[0] = fTemp238SE;
			fTemp239SE = fVec430SE[2]; // step: 2832
			fVec431SE[0] = ((fConst410KI * ((fConst414KI * fVec426SE[0]) + (fConst415KI * fVec425SE[1]) + (fConst414KI * fTemp237SE) /* Sum */)) + -(fConst416KI * ((fConst417KI * fTemp239SE) + (fConst418KI * fVec431SE[1]) /* Sum */)) /* Sum */);
			fTemp240SE = fVec431SE[0]; // step: 2844
			fVec430SE[0] = fTemp240SE;
			fTemp241SE = fVec435SE[2]; // step: 2862
			fVec436SE[0] = ((fConst416KI * ((fConst419KI * fVec431SE[0]) + (fConst420KI * fVec430SE[1]) + (fConst419KI * fTemp239SE) /* Sum */)) + -(fConst421KI * ((fConst422KI * fTemp241SE) + (fConst423KI * fVec436SE[1]) /* Sum */)) /* Sum */);
			fTemp242SE = fVec436SE[0]; // step: 2874
			fVec435SE[0] = fTemp242SE;
			fTemp243SE = (fConst421KI * ((fConst424KI * fVec436SE[0]) + (fConst425KI * fVec435SE[1]) + (fConst424KI * fTemp241SE) /* Sum */)); // step: 2884
			fTemp244SE = fVec440SE[2]; // step: 2896
			fVec441SE[0] = (fTemp243SE + -(fConst428KI * ((fConst429KI * fTemp244SE) + (fConst432KI * fVec441SE[1]) /* Sum */)) /* Sum */);
			fTemp245SE = fVec441SE[0]; // step: 2911
			fVec440SE[0] = fTemp245SE;
			fTemp246SE = fVec445SE[2]; // step: 2931
			fVec446SE[0] = ((fConst428KI * ((fConst434KI * fVec441SE[0]) + (fConst435KI * fVec440SE[1]) + (fConst434KI * fTemp244SE) /* Sum */)) + -(fConst436KI * ((fConst437KI * fTemp246SE) + (fConst438KI * fVec446SE[1]) /* Sum */)) /* Sum */);
			fTemp247SE = fVec446SE[0]; // step: 2943
			fVec445SE[0] = fTemp247SE;
			fTemp248SE = fVec450SE[2]; // step: 2963
			fVec451SE[0] = ((fConst436KI * ((fConst440KI * fVec446SE[0]) + (fConst441KI * fVec445SE[1]) + (fConst440KI * fTemp246SE) /* Sum */)) + -(fConst442KI * ((fConst443KI * fTemp248SE) + (fConst444KI * fVec451SE[1]) /* Sum */)) /* Sum */);
			fTemp249SE = fVec451SE[0]; // step: 2975
			fVec450SE[0] = fTemp249SE;
			fTemp250SE = fVec453SE[2]; // step: 2983
			fVec454SE[0] = (fTemp243SE + -(fConst445KI * ((fConst446KI * fTemp250SE) + (fConst447KI * fVec454SE[1]) /* Sum */)) /* Sum */);
			fTemp251SE = fVec454SE[0]; // step: 2995
			fVec453SE[0] = fTemp251SE;
			fTemp252SE = fVec458SE[2]; // step: 3015
			fVec459SE[0] = ((fConst445KI * ((fConst449KI * fVec454SE[0]) + (fConst450KI * fVec453SE[1]) + (fConst449KI * fTemp250SE) /* Sum */)) + -(fConst451KI * ((fConst452KI * fTemp252SE) + (fConst453KI * fVec459SE[1]) /* Sum */)) /* Sum */);
			fTemp253SE = fVec459SE[0]; // step: 3027
			fVec458SE[0] = fTemp253SE;
			fTemp254SE = fVec463SE[2]; // step: 3045
			fVec464SE[0] = ((fConst451KI * ((fConst454KI * fVec459SE[0]) + (fConst455KI * fVec458SE[1]) + (fConst454KI * fTemp252SE) /* Sum */)) + -(fConst456KI * ((fConst457KI * fTemp254SE) + (fConst458KI * fVec464SE[1]) /* Sum */)) /* Sum */);
			fTemp255SE = fVec464SE[0]; // step: 3057
			fVec463SE[0] = fTemp255SE;
			fTemp256SE = (fConst456KI * ((fConst459KI * fVec464SE[0]) + (fConst460KI * fVec463SE[1]) + (fConst459KI * fTemp254SE) /* Sum */)); // step: 3067
			fTemp257SE = fVec468SE[2]; // step: 3079
			fVec469SE[0] = (fTemp256SE + -(fConst463KI * ((fConst464KI * fTemp257SE) + (fConst467KI * fVec469SE[1]) /* Sum */)) /* Sum */);
			fTemp258SE = fVec469SE[0]; // step: 3094
			fVec468SE[0] = fTemp258SE;
			fTemp259SE = fVec473SE[2]; // step: 3114
			fVec474SE[0] = ((fConst463KI * ((fConst469KI * fVec469SE[0]) + (fConst470KI * fVec468SE[1]) + (fConst469KI * fTemp257SE) /* Sum */)) + -(fConst471KI * ((fConst472KI * fTemp259SE) + (fConst473KI * fVec474SE[1]) /* Sum */)) /* Sum */);
			fTemp260SE = fVec474SE[0]; // step: 3126
			fVec473SE[0] = fTemp260SE;
			fTemp261SE = fVec478SE[2]; // step: 3146
			fVec479SE[0] = ((fConst471KI * ((fConst475KI * fVec474SE[0]) + (fConst476KI * fVec473SE[1]) + (fConst475KI * fTemp259SE) /* Sum */)) + -(fConst477KI * ((fConst478KI * fTemp261SE) + (fConst479KI * fVec479SE[1]) /* Sum */)) /* Sum */);
			fTemp262SE = fVec479SE[0]; // step: 3158
			fVec478SE[0] = fTemp262SE;
			fTemp263SE = fVec481SE[2]; // step: 3166
			fVec482SE[0] = (fTemp256SE + -(fConst480KI * ((fConst481KI * fTemp263SE) + (fConst482KI * fVec482SE[1]) /* Sum */)) /* Sum */);
			fTemp264SE = fVec482SE[0]; // step: 3178
			fVec481SE[0] = fTemp264SE;
			fTemp265SE = fVec486SE[2]; // step: 3198
			fVec487SE[0] = ((fConst480KI * ((fConst484KI * fVec482SE[0]) + (fConst485KI * fVec481SE[1]) + (fConst484KI * fTemp263SE) /* Sum */)) + -(fConst486KI * ((fConst487KI * fTemp265SE) + (fConst488KI * fVec487SE[1]) /* Sum */)) /* Sum */);
			fTemp266SE = fVec487SE[0]; // step: 3210
			fVec486SE[0] = fTemp266SE;
			fTemp267SE = fVec491SE[2]; // step: 3228
			fVec492SE[0] = ((fConst486KI * ((fConst489KI * fVec487SE[0]) + (fConst490KI * fVec486SE[1]) + (fConst489KI * fTemp265SE) /* Sum */)) + -(fConst491KI * ((fConst492KI * fTemp267SE) + (fConst493KI * fVec492SE[1]) /* Sum */)) /* Sum */);
			fTemp268SE = fVec492SE[0]; // step: 3240
			fVec491SE[0] = fTemp268SE;
			fVec494SE[0] = ((fVec494SE[1] * fSlow45BE) + (fabsf((fConst22KI * ((fConst496KI * fVec115SE[0]) + (fConst497KI * fVec114SE[1]) + (fConst496KI * fTemp92SE) /* Sum */))) * fSlow46BE) /* Sum */);
			fSlow47SE = (fSlow43BE + (2e+01f * log10f(fVec494SE[0])) /* Sum */);
			fVec498SE[0] = ((fSlow45BE * fVec498SE[1]) + (fSlow46BE * fabsf((fConst57KI * ((fConst499KI * fVec143SE[0]) + (fConst500KI * fVec142SE[1]) + (fConst499KI * fTemp105SE) /* Sum */)))) /* Sum */);
			fSlow48SE = (fSlow43BE + (2e+01f * log10f(fVec498SE[0])) /* Sum */);
			fVec502SE[0] = ((fSlow45BE * fVec502SE[1]) + (fSlow46BE * fabsf((fConst92KI * ((fConst502KI * fVec171SE[0]) + (fConst503KI * fVec170SE[1]) + (fConst502KI * fTemp118SE) /* Sum */)))) /* Sum */);
			fSlow49SE = (fSlow43BE + (2e+01f * log10f(fVec502SE[0])) /* Sum */);
			fVec506SE[0] = ((fSlow45BE * fVec506SE[1]) + (fSlow46BE * fabsf((fConst127KI * ((fConst505KI * fVec199SE[0]) + (fConst506KI * fVec198SE[1]) + (fConst505KI * fTemp131SE) /* Sum */)))) /* Sum */);
			fSlow50SE = (fSlow43BE + (2e+01f * log10f(fVec506SE[0])) /* Sum */);
			fVec510SE[0] = ((fSlow45BE * fVec510SE[1]) + (fSlow46BE * fabsf((fConst162KI * ((fConst508KI * fVec227SE[0]) + (fConst509KI * fVec226SE[1]) + (fConst508KI * fTemp144SE) /* Sum */)))) /* Sum */);
			fSlow51SE = (fSlow43BE + (2e+01f * log10f(fVec510SE[0])) /* Sum */);
			fVec514SE[0] = ((fSlow45BE * fVec514SE[1]) + (fSlow46BE * fabsf((fConst197KI * ((fConst511KI * fVec255SE[0]) + (fConst512KI * fVec254SE[1]) + (fConst511KI * fTemp157SE) /* Sum */)))) /* Sum */);
			fSlow52SE = (fSlow43BE + (2e+01f * log10f(fVec514SE[0])) /* Sum */);
			fVec518SE[0] = ((fSlow45BE * fVec518SE[1]) + (fSlow46BE * fabsf((fConst232KI * ((fConst514KI * fVec283SE[0]) + (fConst515KI * fVec282SE[1]) + (fConst514KI * fTemp170SE) /* Sum */)))) /* Sum */);
			fSlow53SE = (fSlow43BE + (2e+01f * log10f(fVec518SE[0])) /* Sum */);
			fVec522SE[0] = ((fSlow45BE * fVec522SE[1]) + (fSlow46BE * fabsf((fConst267KI * ((fConst517KI * fVec311SE[0]) + (fConst518KI * fVec310SE[1]) + (fConst517KI * fTemp183SE) /* Sum */)))) /* Sum */);
			fSlow54SE = (fSlow43BE + (2e+01f * log10f(fVec522SE[0])) /* Sum */);
			fVec526SE[0] = ((fSlow45BE * fVec526SE[1]) + (fSlow46BE * fabsf((fConst302KI * ((fConst520KI * fVec339SE[0]) + (fConst521KI * fVec338SE[1]) + (fConst520KI * fTemp196SE) /* Sum */)))) /* Sum */);
			fSlow55SE = (fSlow43BE + (2e+01f * log10f(fVec526SE[0])) /* Sum */);
			fVec530SE[0] = ((fSlow45BE * fVec530SE[1]) + (fSlow46BE * fabsf((fConst337KI * ((fConst523KI * fVec367SE[0]) + (fConst524KI * fVec366SE[1]) + (fConst523KI * fTemp209SE) /* Sum */)))) /* Sum */);
			fSlow56SE = (fSlow43BE + (2e+01f * log10f(fVec530SE[0])) /* Sum */);
			fVec534SE[0] = ((fSlow45BE * fVec534SE[1]) + (fSlow46BE * fabsf((fConst372KI * ((fConst526KI * fVec395SE[0]) + (fConst527KI * fVec394SE[1]) + (fConst526KI * fTemp222SE) /* Sum */)))) /* Sum */);
			fSlow57SE = (fSlow43BE + (2e+01f * log10f(fVec534SE[0])) /* Sum */);
			fVec538SE[0] = ((fSlow45BE * fVec538SE[1]) + (fSlow46BE * fabsf((fConst407KI * ((fConst529KI * fVec423SE[0]) + (fConst530KI * fVec422SE[1]) + (fConst529KI * fTemp235SE) /* Sum */)))) /* Sum */);
			fSlow58SE = (fSlow43BE + (2e+01f * log10f(fVec538SE[0])) /* Sum */);
			fVec542SE[0] = ((fSlow45BE * fVec542SE[1]) + (fSlow46BE * fabsf((fConst442KI * ((fConst532KI * fVec451SE[0]) + (fConst533KI * fVec450SE[1]) + (fConst532KI * fTemp248SE) /* Sum */)))) /* Sum */);
			fSlow59SE = (fSlow43BE + (2e+01f * log10f(fVec542SE[0])) /* Sum */);
			fVec546SE[0] = ((fSlow45BE * fVec546SE[1]) + (fSlow46BE * fabsf((fConst477KI * ((fConst535KI * fVec479SE[0]) + (fConst536KI * fVec478SE[1]) + (fConst535KI * fTemp261SE) /* Sum */)))) /* Sum */);
			fSlow60SE = (fSlow43BE + (2e+01f * log10f(fVec546SE[0])) /* Sum */);
			fVec550SE[0] = ((fSlow45BE * fVec550SE[1]) + (fSlow46BE * fabsf((fConst491KI * ((fConst537KI * fVec492SE[0]) + (fConst538KI * fVec491SE[1]) + (fConst537KI * fTemp267SE) /* Sum */)))) /* Sum */);
			fSlow61SE = (fSlow43BE + (2e+01f * log10f(fVec550SE[0])) /* Sum */);
			fTemp269SE = (fTemp83SE + fTemp87SE /* Sum */); // step: 3628
			output0[i] = (FAUSTFLOAT)(fTemp269SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp269SE);  // Zone Exec Code
			// post processing
			fVec550SE[1] = fVec550SE[0];
			fVec546SE[1] = fVec546SE[0];
			fVec542SE[1] = fVec542SE[0];
			fVec538SE[1] = fVec538SE[0];
			fVec534SE[1] = fVec534SE[0];
			fVec530SE[1] = fVec530SE[0];
			fVec526SE[1] = fVec526SE[0];
			fVec522SE[1] = fVec522SE[0];
			fVec518SE[1] = fVec518SE[0];
			fVec514SE[1] = fVec514SE[0];
			fVec510SE[1] = fVec510SE[0];
			fVec506SE[1] = fVec506SE[0];
			fVec502SE[1] = fVec502SE[0];
			fVec498SE[1] = fVec498SE[0];
			fVec494SE[1] = fVec494SE[0];
			fVec491SE[2] = fVec491SE[1];
			fVec491SE[1] = fVec491SE[0];
			fVec492SE[1] = fVec492SE[0];
			fVec486SE[2] = fVec486SE[1];
			fVec486SE[1] = fVec486SE[0];
			fVec487SE[1] = fVec487SE[0];
			fVec481SE[2] = fVec481SE[1];
			fVec481SE[1] = fVec481SE[0];
			fVec482SE[1] = fVec482SE[0];
			fVec478SE[2] = fVec478SE[1];
			fVec478SE[1] = fVec478SE[0];
			fVec479SE[1] = fVec479SE[0];
			fVec473SE[2] = fVec473SE[1];
			fVec473SE[1] = fVec473SE[0];
			fVec474SE[1] = fVec474SE[0];
			fVec468SE[2] = fVec468SE[1];
			fVec468SE[1] = fVec468SE[0];
			fVec469SE[1] = fVec469SE[0];
			fVec463SE[2] = fVec463SE[1];
			fVec463SE[1] = fVec463SE[0];
			fVec464SE[1] = fVec464SE[0];
			fVec458SE[2] = fVec458SE[1];
			fVec458SE[1] = fVec458SE[0];
			fVec459SE[1] = fVec459SE[0];
			fVec453SE[2] = fVec453SE[1];
			fVec453SE[1] = fVec453SE[0];
			fVec454SE[1] = fVec454SE[0];
			fVec450SE[2] = fVec450SE[1];
			fVec450SE[1] = fVec450SE[0];
			fVec451SE[1] = fVec451SE[0];
			fVec445SE[2] = fVec445SE[1];
			fVec445SE[1] = fVec445SE[0];
			fVec446SE[1] = fVec446SE[0];
			fVec440SE[2] = fVec440SE[1];
			fVec440SE[1] = fVec440SE[0];
			fVec441SE[1] = fVec441SE[0];
			fVec435SE[2] = fVec435SE[1];
			fVec435SE[1] = fVec435SE[0];
			fVec436SE[1] = fVec436SE[0];
			fVec430SE[2] = fVec430SE[1];
			fVec430SE[1] = fVec430SE[0];
			fVec431SE[1] = fVec431SE[0];
			fVec425SE[2] = fVec425SE[1];
			fVec425SE[1] = fVec425SE[0];
			fVec426SE[1] = fVec426SE[0];
			fVec422SE[2] = fVec422SE[1];
			fVec422SE[1] = fVec422SE[0];
			fVec423SE[1] = fVec423SE[0];
			fVec417SE[2] = fVec417SE[1];
			fVec417SE[1] = fVec417SE[0];
			fVec418SE[1] = fVec418SE[0];
			fVec412SE[2] = fVec412SE[1];
			fVec412SE[1] = fVec412SE[0];
			fVec413SE[1] = fVec413SE[0];
			fVec407SE[2] = fVec407SE[1];
			fVec407SE[1] = fVec407SE[0];
			fVec408SE[1] = fVec408SE[0];
			fVec402SE[2] = fVec402SE[1];
			fVec402SE[1] = fVec402SE[0];
			fVec403SE[1] = fVec403SE[0];
			fVec397SE[2] = fVec397SE[1];
			fVec397SE[1] = fVec397SE[0];
			fVec398SE[1] = fVec398SE[0];
			fVec394SE[2] = fVec394SE[1];
			fVec394SE[1] = fVec394SE[0];
			fVec395SE[1] = fVec395SE[0];
			fVec389SE[2] = fVec389SE[1];
			fVec389SE[1] = fVec389SE[0];
			fVec390SE[1] = fVec390SE[0];
			fVec384SE[2] = fVec384SE[1];
			fVec384SE[1] = fVec384SE[0];
			fVec385SE[1] = fVec385SE[0];
			fVec379SE[2] = fVec379SE[1];
			fVec379SE[1] = fVec379SE[0];
			fVec380SE[1] = fVec380SE[0];
			fVec374SE[2] = fVec374SE[1];
			fVec374SE[1] = fVec374SE[0];
			fVec375SE[1] = fVec375SE[0];
			fVec369SE[2] = fVec369SE[1];
			fVec369SE[1] = fVec369SE[0];
			fVec370SE[1] = fVec370SE[0];
			fVec366SE[2] = fVec366SE[1];
			fVec366SE[1] = fVec366SE[0];
			fVec367SE[1] = fVec367SE[0];
			fVec361SE[2] = fVec361SE[1];
			fVec361SE[1] = fVec361SE[0];
			fVec362SE[1] = fVec362SE[0];
			fVec356SE[2] = fVec356SE[1];
			fVec356SE[1] = fVec356SE[0];
			fVec357SE[1] = fVec357SE[0];
			fVec351SE[2] = fVec351SE[1];
			fVec351SE[1] = fVec351SE[0];
			fVec352SE[1] = fVec352SE[0];
			fVec346SE[2] = fVec346SE[1];
			fVec346SE[1] = fVec346SE[0];
			fVec347SE[1] = fVec347SE[0];
			fVec341SE[2] = fVec341SE[1];
			fVec341SE[1] = fVec341SE[0];
			fVec342SE[1] = fVec342SE[0];
			fVec338SE[2] = fVec338SE[1];
			fVec338SE[1] = fVec338SE[0];
			fVec339SE[1] = fVec339SE[0];
			fVec333SE[2] = fVec333SE[1];
			fVec333SE[1] = fVec333SE[0];
			fVec334SE[1] = fVec334SE[0];
			fVec328SE[2] = fVec328SE[1];
			fVec328SE[1] = fVec328SE[0];
			fVec329SE[1] = fVec329SE[0];
			fVec323SE[2] = fVec323SE[1];
			fVec323SE[1] = fVec323SE[0];
			fVec324SE[1] = fVec324SE[0];
			fVec318SE[2] = fVec318SE[1];
			fVec318SE[1] = fVec318SE[0];
			fVec319SE[1] = fVec319SE[0];
			fVec313SE[2] = fVec313SE[1];
			fVec313SE[1] = fVec313SE[0];
			fVec314SE[1] = fVec314SE[0];
			fVec310SE[2] = fVec310SE[1];
			fVec310SE[1] = fVec310SE[0];
			fVec311SE[1] = fVec311SE[0];
			fVec305SE[2] = fVec305SE[1];
			fVec305SE[1] = fVec305SE[0];
			fVec306SE[1] = fVec306SE[0];
			fVec300SE[2] = fVec300SE[1];
			fVec300SE[1] = fVec300SE[0];
			fVec301SE[1] = fVec301SE[0];
			fVec295SE[2] = fVec295SE[1];
			fVec295SE[1] = fVec295SE[0];
			fVec296SE[1] = fVec296SE[0];
			fVec290SE[2] = fVec290SE[1];
			fVec290SE[1] = fVec290SE[0];
			fVec291SE[1] = fVec291SE[0];
			fVec285SE[2] = fVec285SE[1];
			fVec285SE[1] = fVec285SE[0];
			fVec286SE[1] = fVec286SE[0];
			fVec282SE[2] = fVec282SE[1];
			fVec282SE[1] = fVec282SE[0];
			fVec283SE[1] = fVec283SE[0];
			fVec277SE[2] = fVec277SE[1];
			fVec277SE[1] = fVec277SE[0];
			fVec278SE[1] = fVec278SE[0];
			fVec272SE[2] = fVec272SE[1];
			fVec272SE[1] = fVec272SE[0];
			fVec273SE[1] = fVec273SE[0];
			fVec267SE[2] = fVec267SE[1];
			fVec267SE[1] = fVec267SE[0];
			fVec268SE[1] = fVec268SE[0];
			fVec262SE[2] = fVec262SE[1];
			fVec262SE[1] = fVec262SE[0];
			fVec263SE[1] = fVec263SE[0];
			fVec257SE[2] = fVec257SE[1];
			fVec257SE[1] = fVec257SE[0];
			fVec258SE[1] = fVec258SE[0];
			fVec254SE[2] = fVec254SE[1];
			fVec254SE[1] = fVec254SE[0];
			fVec255SE[1] = fVec255SE[0];
			fVec249SE[2] = fVec249SE[1];
			fVec249SE[1] = fVec249SE[0];
			fVec250SE[1] = fVec250SE[0];
			fVec244SE[2] = fVec244SE[1];
			fVec244SE[1] = fVec244SE[0];
			fVec245SE[1] = fVec245SE[0];
			fVec239SE[2] = fVec239SE[1];
			fVec239SE[1] = fVec239SE[0];
			fVec240SE[1] = fVec240SE[0];
			fVec234SE[2] = fVec234SE[1];
			fVec234SE[1] = fVec234SE[0];
			fVec235SE[1] = fVec235SE[0];
			fVec229SE[2] = fVec229SE[1];
			fVec229SE[1] = fVec229SE[0];
			fVec230SE[1] = fVec230SE[0];
			fVec226SE[2] = fVec226SE[1];
			fVec226SE[1] = fVec226SE[0];
			fVec227SE[1] = fVec227SE[0];
			fVec221SE[2] = fVec221SE[1];
			fVec221SE[1] = fVec221SE[0];
			fVec222SE[1] = fVec222SE[0];
			fVec216SE[2] = fVec216SE[1];
			fVec216SE[1] = fVec216SE[0];
			fVec217SE[1] = fVec217SE[0];
			fVec211SE[2] = fVec211SE[1];
			fVec211SE[1] = fVec211SE[0];
			fVec212SE[1] = fVec212SE[0];
			fVec206SE[2] = fVec206SE[1];
			fVec206SE[1] = fVec206SE[0];
			fVec207SE[1] = fVec207SE[0];
			fVec201SE[2] = fVec201SE[1];
			fVec201SE[1] = fVec201SE[0];
			fVec202SE[1] = fVec202SE[0];
			fVec198SE[2] = fVec198SE[1];
			fVec198SE[1] = fVec198SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec193SE[2] = fVec193SE[1];
			fVec193SE[1] = fVec193SE[0];
			fVec194SE[1] = fVec194SE[0];
			fVec188SE[2] = fVec188SE[1];
			fVec188SE[1] = fVec188SE[0];
			fVec189SE[1] = fVec189SE[0];
			fVec183SE[2] = fVec183SE[1];
			fVec183SE[1] = fVec183SE[0];
			fVec184SE[1] = fVec184SE[0];
			fVec178SE[2] = fVec178SE[1];
			fVec178SE[1] = fVec178SE[0];
			fVec179SE[1] = fVec179SE[0];
			fVec173SE[2] = fVec173SE[1];
			fVec173SE[1] = fVec173SE[0];
			fVec174SE[1] = fVec174SE[0];
			fVec170SE[2] = fVec170SE[1];
			fVec170SE[1] = fVec170SE[0];
			fVec171SE[1] = fVec171SE[0];
			fVec165SE[2] = fVec165SE[1];
			fVec165SE[1] = fVec165SE[0];
			fVec166SE[1] = fVec166SE[0];
			fVec160SE[2] = fVec160SE[1];
			fVec160SE[1] = fVec160SE[0];
			fVec161SE[1] = fVec161SE[0];
			fVec155SE[2] = fVec155SE[1];
			fVec155SE[1] = fVec155SE[0];
			fVec156SE[1] = fVec156SE[0];
			fVec150SE[2] = fVec150SE[1];
			fVec150SE[1] = fVec150SE[0];
			fVec151SE[1] = fVec151SE[0];
			fVec145SE[2] = fVec145SE[1];
			fVec145SE[1] = fVec145SE[0];
			fVec146SE[1] = fVec146SE[0];
			fVec142SE[2] = fVec142SE[1];
			fVec142SE[1] = fVec142SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec137SE[2] = fVec137SE[1];
			fVec137SE[1] = fVec137SE[0];
			fVec138SE[1] = fVec138SE[0];
			fVec132SE[2] = fVec132SE[1];
			fVec132SE[1] = fVec132SE[0];
			fVec133SE[1] = fVec133SE[0];
			fVec127SE[2] = fVec127SE[1];
			fVec127SE[1] = fVec127SE[0];
			fVec128SE[1] = fVec128SE[0];
			fVec122SE[2] = fVec122SE[1];
			fVec122SE[1] = fVec122SE[0];
			fVec123SE[1] = fVec123SE[0];
			fVec117SE[2] = fVec117SE[1];
			fVec117SE[1] = fVec117SE[0];
			fVec118SE[1] = fVec118SE[0];
			fVec114SE[2] = fVec114SE[1];
			fVec114SE[1] = fVec114SE[0];
			fVec115SE[1] = fVec115SE[0];
			fVec109SE[2] = fVec109SE[1];
			fVec109SE[1] = fVec109SE[0];
			fVec110SE[1] = fVec110SE[0];
			fVec104SE[2] = fVec104SE[1];
			fVec104SE[1] = fVec104SE[0];
			fVec105SE[1] = fVec105SE[0];
			fVec98SE[1] = fVec98SE[0];
			fVec100SE[1] = fVec100SE[0];
			fVec99SE[1] = fVec99SE[0];
			fVec92SE[1] = fVec92SE[0];
			fVec94SE[1] = fVec94SE[0];
			fVec93SE[1] = fVec93SE[0];
			fVec86SE[1] = fVec86SE[0];
			fVec85SE[1] = fVec85SE[0];
			iVec88SE[1] = iVec88SE[0];
			iVec81SE[1] = iVec81SE[0];
			fVec71SE[1] = fVec71SE[0];
			fVec73SE[1] = fVec73SE[0];
			fVec72SE[1] = fVec72SE[0];
			iVec75SE[1] = iVec75SE[0];
			iVec70SE[1] = iVec70SE[0];
			fVec51SE[1] = fVec51SE[0];
			fVec52SE[1] = fVec52SE[0];
			fVec47SI[3] = fVec47SI[2];
			fVec47SI[2] = fVec47SI[1];
			fVec47SI[1] = fVec47SI[0];
			fVec48SI[1] = fVec48SI[0];
			iVec45SI[1] = iVec45SI[0];
			fVec44SE[1] = fVec44SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec37SE[1] = fVec37SE[0];
			fVec35SE[1] = fVec35SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec25SE[1] = fVec25SE[0];
			fVec23SE[1] = fVec23SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec11SE[1] = fVec11SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec11SEState = fVec11SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec16SEState = fVec16SE[1];
		fVec17SEState = fVec17SE[1];
		fVec19SEState = fVec19SE[1];
		fVec20SEState = fVec20SE[1];
		fVec21SEState = fVec21SE[1];
		fVec23SEState = fVec23SE[1];
		fVec25SEState = fVec25SE[1];
		fVec26SEState = fVec26SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec33SEState = fVec33SE[1];
		fVec34SEState = fVec34SE[1];
		fVec35SEState = fVec35SE[1];
		fVec37SEState = fVec37SE[1];
		fVec39SEState = fVec39SE[1];
		fVec40SEState = fVec40SE[1];
		fVec42SEState = fVec42SE[1];
		fVec44SEState = fVec44SE[1];
		iVec45SIState = iVec45SI[1];
		fVec48SIState = fVec48SI[1];
		fVec47SIState[0] = fVec47SI[1];
		fVec47SIState[1] = fVec47SI[2];
		fVec47SIState[2] = fVec47SI[3];
		fVec52SEState = fVec52SE[1];
		fVec51SEState = fVec51SE[1];
		iVec70SEState = iVec70SE[1];
		iVec75SEState = iVec75SE[1];
		fVec72SEState = fVec72SE[1];
		fVec73SEState = fVec73SE[1];
		fVec71SEState = fVec71SE[1];
		iVec81SEState = iVec81SE[1];
		iVec88SEState = iVec88SE[1];
		fVec85SEState = fVec85SE[1];
		fVec86SEState = fVec86SE[1];
		fVec93SEState = fVec93SE[1];
		fVec94SEState = fVec94SE[1];
		fVec92SEState = fVec92SE[1];
		fVec99SEState = fVec99SE[1];
		fVec100SEState = fVec100SE[1];
		fVec98SEState = fVec98SE[1];
		fVec105SEState = fVec105SE[1];
		fVec104SEState[0] = fVec104SE[1];
		fVec104SEState[1] = fVec104SE[2];
		fVec110SEState = fVec110SE[1];
		fVec109SEState[0] = fVec109SE[1];
		fVec109SEState[1] = fVec109SE[2];
		fVec115SEState = fVec115SE[1];
		fVec114SEState[0] = fVec114SE[1];
		fVec114SEState[1] = fVec114SE[2];
		fVec118SEState = fVec118SE[1];
		fVec117SEState[0] = fVec117SE[1];
		fVec117SEState[1] = fVec117SE[2];
		fVec123SEState = fVec123SE[1];
		fVec122SEState[0] = fVec122SE[1];
		fVec122SEState[1] = fVec122SE[2];
		fVec128SEState = fVec128SE[1];
		fVec127SEState[0] = fVec127SE[1];
		fVec127SEState[1] = fVec127SE[2];
		fVec133SEState = fVec133SE[1];
		fVec132SEState[0] = fVec132SE[1];
		fVec132SEState[1] = fVec132SE[2];
		fVec138SEState = fVec138SE[1];
		fVec137SEState[0] = fVec137SE[1];
		fVec137SEState[1] = fVec137SE[2];
		fVec143SEState = fVec143SE[1];
		fVec142SEState[0] = fVec142SE[1];
		fVec142SEState[1] = fVec142SE[2];
		fVec146SEState = fVec146SE[1];
		fVec145SEState[0] = fVec145SE[1];
		fVec145SEState[1] = fVec145SE[2];
		fVec151SEState = fVec151SE[1];
		fVec150SEState[0] = fVec150SE[1];
		fVec150SEState[1] = fVec150SE[2];
		fVec156SEState = fVec156SE[1];
		fVec155SEState[0] = fVec155SE[1];
		fVec155SEState[1] = fVec155SE[2];
		fVec161SEState = fVec161SE[1];
		fVec160SEState[0] = fVec160SE[1];
		fVec160SEState[1] = fVec160SE[2];
		fVec166SEState = fVec166SE[1];
		fVec165SEState[0] = fVec165SE[1];
		fVec165SEState[1] = fVec165SE[2];
		fVec171SEState = fVec171SE[1];
		fVec170SEState[0] = fVec170SE[1];
		fVec170SEState[1] = fVec170SE[2];
		fVec174SEState = fVec174SE[1];
		fVec173SEState[0] = fVec173SE[1];
		fVec173SEState[1] = fVec173SE[2];
		fVec179SEState = fVec179SE[1];
		fVec178SEState[0] = fVec178SE[1];
		fVec178SEState[1] = fVec178SE[2];
		fVec184SEState = fVec184SE[1];
		fVec183SEState[0] = fVec183SE[1];
		fVec183SEState[1] = fVec183SE[2];
		fVec189SEState = fVec189SE[1];
		fVec188SEState[0] = fVec188SE[1];
		fVec188SEState[1] = fVec188SE[2];
		fVec194SEState = fVec194SE[1];
		fVec193SEState[0] = fVec193SE[1];
		fVec193SEState[1] = fVec193SE[2];
		fVec199SEState = fVec199SE[1];
		fVec198SEState[0] = fVec198SE[1];
		fVec198SEState[1] = fVec198SE[2];
		fVec202SEState = fVec202SE[1];
		fVec201SEState[0] = fVec201SE[1];
		fVec201SEState[1] = fVec201SE[2];
		fVec207SEState = fVec207SE[1];
		fVec206SEState[0] = fVec206SE[1];
		fVec206SEState[1] = fVec206SE[2];
		fVec212SEState = fVec212SE[1];
		fVec211SEState[0] = fVec211SE[1];
		fVec211SEState[1] = fVec211SE[2];
		fVec217SEState = fVec217SE[1];
		fVec216SEState[0] = fVec216SE[1];
		fVec216SEState[1] = fVec216SE[2];
		fVec222SEState = fVec222SE[1];
		fVec221SEState[0] = fVec221SE[1];
		fVec221SEState[1] = fVec221SE[2];
		fVec227SEState = fVec227SE[1];
		fVec226SEState[0] = fVec226SE[1];
		fVec226SEState[1] = fVec226SE[2];
		fVec230SEState = fVec230SE[1];
		fVec229SEState[0] = fVec229SE[1];
		fVec229SEState[1] = fVec229SE[2];
		fVec235SEState = fVec235SE[1];
		fVec234SEState[0] = fVec234SE[1];
		fVec234SEState[1] = fVec234SE[2];
		fVec240SEState = fVec240SE[1];
		fVec239SEState[0] = fVec239SE[1];
		fVec239SEState[1] = fVec239SE[2];
		fVec245SEState = fVec245SE[1];
		fVec244SEState[0] = fVec244SE[1];
		fVec244SEState[1] = fVec244SE[2];
		fVec250SEState = fVec250SE[1];
		fVec249SEState[0] = fVec249SE[1];
		fVec249SEState[1] = fVec249SE[2];
		fVec255SEState = fVec255SE[1];
		fVec254SEState[0] = fVec254SE[1];
		fVec254SEState[1] = fVec254SE[2];
		fVec258SEState = fVec258SE[1];
		fVec257SEState[0] = fVec257SE[1];
		fVec257SEState[1] = fVec257SE[2];
		fVec263SEState = fVec263SE[1];
		fVec262SEState[0] = fVec262SE[1];
		fVec262SEState[1] = fVec262SE[2];
		fVec268SEState = fVec268SE[1];
		fVec267SEState[0] = fVec267SE[1];
		fVec267SEState[1] = fVec267SE[2];
		fVec273SEState = fVec273SE[1];
		fVec272SEState[0] = fVec272SE[1];
		fVec272SEState[1] = fVec272SE[2];
		fVec278SEState = fVec278SE[1];
		fVec277SEState[0] = fVec277SE[1];
		fVec277SEState[1] = fVec277SE[2];
		fVec283SEState = fVec283SE[1];
		fVec282SEState[0] = fVec282SE[1];
		fVec282SEState[1] = fVec282SE[2];
		fVec286SEState = fVec286SE[1];
		fVec285SEState[0] = fVec285SE[1];
		fVec285SEState[1] = fVec285SE[2];
		fVec291SEState = fVec291SE[1];
		fVec290SEState[0] = fVec290SE[1];
		fVec290SEState[1] = fVec290SE[2];
		fVec296SEState = fVec296SE[1];
		fVec295SEState[0] = fVec295SE[1];
		fVec295SEState[1] = fVec295SE[2];
		fVec301SEState = fVec301SE[1];
		fVec300SEState[0] = fVec300SE[1];
		fVec300SEState[1] = fVec300SE[2];
		fVec306SEState = fVec306SE[1];
		fVec305SEState[0] = fVec305SE[1];
		fVec305SEState[1] = fVec305SE[2];
		fVec311SEState = fVec311SE[1];
		fVec310SEState[0] = fVec310SE[1];
		fVec310SEState[1] = fVec310SE[2];
		fVec314SEState = fVec314SE[1];
		fVec313SEState[0] = fVec313SE[1];
		fVec313SEState[1] = fVec313SE[2];
		fVec319SEState = fVec319SE[1];
		fVec318SEState[0] = fVec318SE[1];
		fVec318SEState[1] = fVec318SE[2];
		fVec324SEState = fVec324SE[1];
		fVec323SEState[0] = fVec323SE[1];
		fVec323SEState[1] = fVec323SE[2];
		fVec329SEState = fVec329SE[1];
		fVec328SEState[0] = fVec328SE[1];
		fVec328SEState[1] = fVec328SE[2];
		fVec334SEState = fVec334SE[1];
		fVec333SEState[0] = fVec333SE[1];
		fVec333SEState[1] = fVec333SE[2];
		fVec339SEState = fVec339SE[1];
		fVec338SEState[0] = fVec338SE[1];
		fVec338SEState[1] = fVec338SE[2];
		fVec342SEState = fVec342SE[1];
		fVec341SEState[0] = fVec341SE[1];
		fVec341SEState[1] = fVec341SE[2];
		fVec347SEState = fVec347SE[1];
		fVec346SEState[0] = fVec346SE[1];
		fVec346SEState[1] = fVec346SE[2];
		fVec352SEState = fVec352SE[1];
		fVec351SEState[0] = fVec351SE[1];
		fVec351SEState[1] = fVec351SE[2];
		fVec357SEState = fVec357SE[1];
		fVec356SEState[0] = fVec356SE[1];
		fVec356SEState[1] = fVec356SE[2];
		fVec362SEState = fVec362SE[1];
		fVec361SEState[0] = fVec361SE[1];
		fVec361SEState[1] = fVec361SE[2];
		fVec367SEState = fVec367SE[1];
		fVec366SEState[0] = fVec366SE[1];
		fVec366SEState[1] = fVec366SE[2];
		fVec370SEState = fVec370SE[1];
		fVec369SEState[0] = fVec369SE[1];
		fVec369SEState[1] = fVec369SE[2];
		fVec375SEState = fVec375SE[1];
		fVec374SEState[0] = fVec374SE[1];
		fVec374SEState[1] = fVec374SE[2];
		fVec380SEState = fVec380SE[1];
		fVec379SEState[0] = fVec379SE[1];
		fVec379SEState[1] = fVec379SE[2];
		fVec385SEState = fVec385SE[1];
		fVec384SEState[0] = fVec384SE[1];
		fVec384SEState[1] = fVec384SE[2];
		fVec390SEState = fVec390SE[1];
		fVec389SEState[0] = fVec389SE[1];
		fVec389SEState[1] = fVec389SE[2];
		fVec395SEState = fVec395SE[1];
		fVec394SEState[0] = fVec394SE[1];
		fVec394SEState[1] = fVec394SE[2];
		fVec398SEState = fVec398SE[1];
		fVec397SEState[0] = fVec397SE[1];
		fVec397SEState[1] = fVec397SE[2];
		fVec403SEState = fVec403SE[1];
		fVec402SEState[0] = fVec402SE[1];
		fVec402SEState[1] = fVec402SE[2];
		fVec408SEState = fVec408SE[1];
		fVec407SEState[0] = fVec407SE[1];
		fVec407SEState[1] = fVec407SE[2];
		fVec413SEState = fVec413SE[1];
		fVec412SEState[0] = fVec412SE[1];
		fVec412SEState[1] = fVec412SE[2];
		fVec418SEState = fVec418SE[1];
		fVec417SEState[0] = fVec417SE[1];
		fVec417SEState[1] = fVec417SE[2];
		fVec423SEState = fVec423SE[1];
		fVec422SEState[0] = fVec422SE[1];
		fVec422SEState[1] = fVec422SE[2];
		fVec426SEState = fVec426SE[1];
		fVec425SEState[0] = fVec425SE[1];
		fVec425SEState[1] = fVec425SE[2];
		fVec431SEState = fVec431SE[1];
		fVec430SEState[0] = fVec430SE[1];
		fVec430SEState[1] = fVec430SE[2];
		fVec436SEState = fVec436SE[1];
		fVec435SEState[0] = fVec435SE[1];
		fVec435SEState[1] = fVec435SE[2];
		fVec441SEState = fVec441SE[1];
		fVec440SEState[0] = fVec440SE[1];
		fVec440SEState[1] = fVec440SE[2];
		fVec446SEState = fVec446SE[1];
		fVec445SEState[0] = fVec445SE[1];
		fVec445SEState[1] = fVec445SE[2];
		fVec451SEState = fVec451SE[1];
		fVec450SEState[0] = fVec450SE[1];
		fVec450SEState[1] = fVec450SE[2];
		fVec454SEState = fVec454SE[1];
		fVec453SEState[0] = fVec453SE[1];
		fVec453SEState[1] = fVec453SE[2];
		fVec459SEState = fVec459SE[1];
		fVec458SEState[0] = fVec458SE[1];
		fVec458SEState[1] = fVec458SE[2];
		fVec464SEState = fVec464SE[1];
		fVec463SEState[0] = fVec463SE[1];
		fVec463SEState[1] = fVec463SE[2];
		fVec469SEState = fVec469SE[1];
		fVec468SEState[0] = fVec468SE[1];
		fVec468SEState[1] = fVec468SE[2];
		fVec474SEState = fVec474SE[1];
		fVec473SEState[0] = fVec473SE[1];
		fVec473SEState[1] = fVec473SE[2];
		fVec479SEState = fVec479SE[1];
		fVec478SEState[0] = fVec478SE[1];
		fVec478SEState[1] = fVec478SE[2];
		fVec482SEState = fVec482SE[1];
		fVec481SEState[0] = fVec481SE[1];
		fVec481SEState[1] = fVec481SE[2];
		fVec487SEState = fVec487SE[1];
		fVec486SEState[0] = fVec486SE[1];
		fVec486SEState[1] = fVec486SE[2];
		fVec492SEState = fVec492SE[1];
		fVec491SEState[0] = fVec491SE[1];
		fVec491SEState[1] = fVec491SE[2];
		fVec494SEState = fVec494SE[1];
		fVec498SEState = fVec498SE[1];
		fVec502SEState = fVec502SE[1];
		fVec506SEState = fVec506SE[1];
		fVec510SEState = fVec510SE[1];
		fVec514SEState = fVec514SE[1];
		fVec518SEState = fVec518SE[1];
		fVec522SEState = fVec522SE[1];
		fVec526SEState = fVec526SE[1];
		fVec530SEState = fVec530SE[1];
		fVec534SEState = fVec534SE[1];
		fVec538SEState = fVec538SE[1];
		fVec542SEState = fVec542SE[1];
		fVec546SEState = fVec546SE[1];
		fVec550SEState = fVec550SE[1];
		fbargraph0 = fSlow25SE;
		fbargraph1 = fSlow42SE;
		fbargraph2 = fSlow47SE;
		fbargraph3 = fSlow48SE;
		fbargraph4 = fSlow49SE;
		fbargraph5 = fSlow50SE;
		fbargraph6 = fSlow51SE;
		fbargraph7 = fSlow52SE;
		fbargraph8 = fSlow53SE;
		fbargraph9 = fSlow54SE;
		fbargraph10 = fSlow55SE;
		fbargraph11 = fSlow56SE;
		fbargraph12 = fSlow57SE;
		fbargraph13 = fSlow58SE;
		fbargraph14 = fSlow59SE;
		fbargraph15 = fSlow60SE;
		fbargraph16 = fSlow61SE;
	}
};


