/* ------------------------------------------------------------
name: "gate_compressor"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}
static float mydsp_faustpower3_f(float value) {
	return value * value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	int iVec0[4];
	FAUSTFLOAT fHslider1;
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	float fConst5;
	float fConst6;
	float fConst7;
	float fConst8;
	float fConst9;
	float fConst10;
	float fConst11;
	float fConst12;
	float fConst13;
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT fHslider2;
	FAUSTFLOAT fCheckbox1;
	float fConst14;
	FAUSTFLOAT fHslider3;
	FAUSTFLOAT fHslider4;
	FAUSTFLOAT fVslider0;
	float fRec8[2];
	FAUSTFLOAT fCheckbox2;
	FAUSTFLOAT fCheckbox3;
	FAUSTFLOAT fEntry0;
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fVslider2;
	float fRec10[2];
	float fRec9[2];
	float fConst15;
	float fVec1[2];
	float fConst16;
	float fVec2[2];
	float fVec3[2];
	float fConst17;
	float fVec4[2];
	float fVec5[2];
	float fVec6[2];
	FAUSTFLOAT fVslider3;
	float fRec11[2];
	float fVec7[2];
	float fVec8[2];
	float fVec9[2];
	float fVec10[2];
	float fVec11[2];
	float fVec12[2];
	FAUSTFLOAT fVslider4;
	float fRec12[2];
	float fVec13[2];
	float fVec14[2];
	float fVec15[2];
	float fVec16[2];
	float fVec17[2];
	float fVec18[2];
	FAUSTFLOAT fCheckbox4;
	int iRec13[2];
	float fRec14[4];
	float fRec18[2];
	FAUSTFLOAT fHslider5;
	int iVec19[2];
	FAUSTFLOAT fHslider6;
	int iRec19[2];
	float fRec16[2];
	float fRec15[2];
	FAUSTFLOAT fHbargraph0;
	float fRec7[2];
	int iVec20[2];
	int iRec20[2];
	float fRec5[2];
	float fRec4[2];
	FAUSTFLOAT fHslider7;
	float fConst18;
	FAUSTFLOAT fHslider8;
	FAUSTFLOAT fHslider9;
	float fRec23[2];
	float fRec22[2];
	FAUSTFLOAT fHslider10;
	float fRec21[2];
	float fRec26[2];
	float fRec25[2];
	float fRec24[2];
	FAUSTFLOAT fHbargraph1;
	float fConst19;
	float fConst20;
	float fConst21;
	float fRec3[3];
	float fConst22;
	float fConst23;
	float fConst24;
	float fRec2[3];
	float fConst25;
	float fConst26;
	float fConst27;
	float fRec1[3];
	float fConst28;
	float fRec0[2];
	FAUSTFLOAT fVbargraph0;
	float fConst29;
	float fConst30;
	float fConst31;
	float fConst32;
	float fConst33;
	float fConst34;
	float fConst35;
	float fConst36;
	float fConst37;
	float fConst38;
	float fConst39;
	float fConst40;
	float fConst41;
	float fConst42;
	float fConst43;
	float fConst44;
	float fConst45;
	float fConst46;
	float fConst47;
	float fConst48;
	float fConst49;
	float fRec33[3];
	float fConst50;
	float fConst51;
	float fConst52;
	float fRec32[3];
	float fConst53;
	float fConst54;
	float fConst55;
	float fRec31[3];
	float fConst56;
	float fConst57;
	float fConst58;
	float fConst59;
	float fRec30[3];
	float fConst60;
	float fConst61;
	float fConst62;
	float fRec29[3];
	float fConst63;
	float fConst64;
	float fConst65;
	float fRec28[3];
	float fConst66;
	float fRec27[2];
	FAUSTFLOAT fVbargraph1;
	float fConst67;
	float fConst68;
	float fConst69;
	float fConst70;
	float fConst71;
	float fConst72;
	float fConst73;
	float fConst74;
	float fConst75;
	float fConst76;
	float fConst77;
	float fConst78;
	float fConst79;
	float fConst80;
	float fConst81;
	float fConst82;
	float fConst83;
	float fConst84;
	float fConst85;
	float fConst86;
	float fConst87;
	float fRec40[3];
	float fConst88;
	float fConst89;
	float fConst90;
	float fRec39[3];
	float fConst91;
	float fConst92;
	float fConst93;
	float fRec38[3];
	float fConst94;
	float fConst95;
	float fConst96;
	float fConst97;
	float fRec37[3];
	float fConst98;
	float fConst99;
	float fConst100;
	float fRec36[3];
	float fConst101;
	float fConst102;
	float fConst103;
	float fRec35[3];
	float fConst104;
	float fRec34[2];
	FAUSTFLOAT fVbargraph2;
	float fConst105;
	float fConst106;
	float fConst107;
	float fConst108;
	float fConst109;
	float fConst110;
	float fConst111;
	float fConst112;
	float fConst113;
	float fConst114;
	float fConst115;
	float fConst116;
	float fConst117;
	float fConst118;
	float fConst119;
	float fConst120;
	float fConst121;
	float fConst122;
	float fConst123;
	float fConst124;
	float fConst125;
	float fRec47[3];
	float fConst126;
	float fConst127;
	float fConst128;
	float fRec46[3];
	float fConst129;
	float fConst130;
	float fConst131;
	float fRec45[3];
	float fConst132;
	float fConst133;
	float fConst134;
	float fConst135;
	float fRec44[3];
	float fConst136;
	float fConst137;
	float fConst138;
	float fRec43[3];
	float fConst139;
	float fConst140;
	float fConst141;
	float fRec42[3];
	float fConst142;
	float fRec41[2];
	FAUSTFLOAT fVbargraph3;
	float fConst143;
	float fConst144;
	float fConst145;
	float fConst146;
	float fConst147;
	float fConst148;
	float fConst149;
	float fConst150;
	float fConst151;
	float fConst152;
	float fConst153;
	float fConst154;
	float fConst155;
	float fConst156;
	float fConst157;
	float fConst158;
	float fConst159;
	float fConst160;
	float fConst161;
	float fConst162;
	float fConst163;
	float fRec54[3];
	float fConst164;
	float fConst165;
	float fConst166;
	float fRec53[3];
	float fConst167;
	float fConst168;
	float fConst169;
	float fRec52[3];
	float fConst170;
	float fConst171;
	float fConst172;
	float fConst173;
	float fRec51[3];
	float fConst174;
	float fConst175;
	float fConst176;
	float fRec50[3];
	float fConst177;
	float fConst178;
	float fConst179;
	float fRec49[3];
	float fConst180;
	float fRec48[2];
	FAUSTFLOAT fVbargraph4;
	float fConst181;
	float fConst182;
	float fConst183;
	float fConst184;
	float fConst185;
	float fConst186;
	float fConst187;
	float fConst188;
	float fConst189;
	float fConst190;
	float fConst191;
	float fConst192;
	float fConst193;
	float fConst194;
	float fConst195;
	float fConst196;
	float fConst197;
	float fConst198;
	float fConst199;
	float fConst200;
	float fConst201;
	float fRec61[3];
	float fConst202;
	float fConst203;
	float fConst204;
	float fRec60[3];
	float fConst205;
	float fConst206;
	float fConst207;
	float fRec59[3];
	float fConst208;
	float fConst209;
	float fConst210;
	float fConst211;
	float fRec58[3];
	float fConst212;
	float fConst213;
	float fConst214;
	float fRec57[3];
	float fConst215;
	float fConst216;
	float fConst217;
	float fRec56[3];
	float fConst218;
	float fRec55[2];
	FAUSTFLOAT fVbargraph5;
	float fConst219;
	float fConst220;
	float fConst221;
	float fConst222;
	float fConst223;
	float fConst224;
	float fConst225;
	float fConst226;
	float fConst227;
	float fConst228;
	float fConst229;
	float fConst230;
	float fConst231;
	float fConst232;
	float fConst233;
	float fConst234;
	float fConst235;
	float fConst236;
	float fConst237;
	float fConst238;
	float fConst239;
	float fRec68[3];
	float fConst240;
	float fConst241;
	float fConst242;
	float fRec67[3];
	float fConst243;
	float fConst244;
	float fConst245;
	float fRec66[3];
	float fConst246;
	float fConst247;
	float fConst248;
	float fConst249;
	float fRec65[3];
	float fConst250;
	float fConst251;
	float fConst252;
	float fRec64[3];
	float fConst253;
	float fConst254;
	float fConst255;
	float fRec63[3];
	float fConst256;
	float fRec62[2];
	FAUSTFLOAT fVbargraph6;
	float fConst257;
	float fConst258;
	float fConst259;
	float fConst260;
	float fConst261;
	float fConst262;
	float fConst263;
	float fConst264;
	float fConst265;
	float fConst266;
	float fConst267;
	float fConst268;
	float fConst269;
	float fConst270;
	float fConst271;
	float fConst272;
	float fConst273;
	float fConst274;
	float fConst275;
	float fConst276;
	float fConst277;
	float fRec75[3];
	float fConst278;
	float fConst279;
	float fConst280;
	float fRec74[3];
	float fConst281;
	float fConst282;
	float fConst283;
	float fRec73[3];
	float fConst284;
	float fConst285;
	float fConst286;
	float fConst287;
	float fRec72[3];
	float fConst288;
	float fConst289;
	float fConst290;
	float fRec71[3];
	float fConst291;
	float fConst292;
	float fConst293;
	float fRec70[3];
	float fConst294;
	float fRec69[2];
	FAUSTFLOAT fVbargraph7;
	float fConst295;
	float fConst296;
	float fConst297;
	float fConst298;
	float fConst299;
	float fConst300;
	float fConst301;
	float fConst302;
	float fConst303;
	float fConst304;
	float fConst305;
	float fConst306;
	float fConst307;
	float fConst308;
	float fConst309;
	float fConst310;
	float fConst311;
	float fConst312;
	float fConst313;
	float fConst314;
	float fConst315;
	float fRec82[3];
	float fConst316;
	float fConst317;
	float fConst318;
	float fRec81[3];
	float fConst319;
	float fConst320;
	float fConst321;
	float fRec80[3];
	float fConst322;
	float fConst323;
	float fConst324;
	float fConst325;
	float fRec79[3];
	float fConst326;
	float fConst327;
	float fConst328;
	float fRec78[3];
	float fConst329;
	float fConst330;
	float fConst331;
	float fRec77[3];
	float fConst332;
	float fRec76[2];
	FAUSTFLOAT fVbargraph8;
	float fConst333;
	float fConst334;
	float fConst335;
	float fConst336;
	float fConst337;
	float fConst338;
	float fConst339;
	float fConst340;
	float fConst341;
	float fConst342;
	float fConst343;
	float fConst344;
	float fConst345;
	float fConst346;
	float fConst347;
	float fConst348;
	float fConst349;
	float fConst350;
	float fConst351;
	float fConst352;
	float fConst353;
	float fRec89[3];
	float fConst354;
	float fConst355;
	float fConst356;
	float fRec88[3];
	float fConst357;
	float fConst358;
	float fConst359;
	float fRec87[3];
	float fConst360;
	float fConst361;
	float fConst362;
	float fConst363;
	float fRec86[3];
	float fConst364;
	float fConst365;
	float fConst366;
	float fRec85[3];
	float fConst367;
	float fConst368;
	float fConst369;
	float fRec84[3];
	float fConst370;
	float fRec83[2];
	FAUSTFLOAT fVbargraph9;
	float fConst371;
	float fConst372;
	float fConst373;
	float fConst374;
	float fConst375;
	float fConst376;
	float fConst377;
	float fConst378;
	float fConst379;
	float fConst380;
	float fConst381;
	float fConst382;
	float fConst383;
	float fConst384;
	float fConst385;
	float fConst386;
	float fConst387;
	float fConst388;
	float fConst389;
	float fConst390;
	float fConst391;
	float fRec96[3];
	float fConst392;
	float fConst393;
	float fConst394;
	float fRec95[3];
	float fConst395;
	float fConst396;
	float fConst397;
	float fRec94[3];
	float fConst398;
	float fConst399;
	float fConst400;
	float fConst401;
	float fRec93[3];
	float fConst402;
	float fConst403;
	float fConst404;
	float fRec92[3];
	float fConst405;
	float fConst406;
	float fConst407;
	float fRec91[3];
	float fConst408;
	float fRec90[2];
	FAUSTFLOAT fVbargraph10;
	float fConst409;
	float fConst410;
	float fConst411;
	float fConst412;
	float fConst413;
	float fConst414;
	float fConst415;
	float fConst416;
	float fConst417;
	float fConst418;
	float fConst419;
	float fConst420;
	float fConst421;
	float fConst422;
	float fConst423;
	float fConst424;
	float fConst425;
	float fConst426;
	float fConst427;
	float fConst428;
	float fConst429;
	float fRec103[3];
	float fConst430;
	float fConst431;
	float fConst432;
	float fRec102[3];
	float fConst433;
	float fConst434;
	float fConst435;
	float fRec101[3];
	float fConst436;
	float fConst437;
	float fConst438;
	float fConst439;
	float fRec100[3];
	float fConst440;
	float fConst441;
	float fConst442;
	float fRec99[3];
	float fConst443;
	float fConst444;
	float fConst445;
	float fRec98[3];
	float fConst446;
	float fRec97[2];
	FAUSTFLOAT fVbargraph11;
	float fConst447;
	float fConst448;
	float fConst449;
	float fConst450;
	float fConst451;
	float fConst452;
	float fConst453;
	float fConst454;
	float fConst455;
	float fConst456;
	float fConst457;
	float fConst458;
	float fConst459;
	float fConst460;
	float fConst461;
	float fConst462;
	float fConst463;
	float fConst464;
	float fConst465;
	float fConst466;
	float fConst467;
	float fRec110[3];
	float fConst468;
	float fConst469;
	float fConst470;
	float fRec109[3];
	float fConst471;
	float fConst472;
	float fConst473;
	float fRec108[3];
	float fConst474;
	float fConst475;
	float fConst476;
	float fConst477;
	float fRec107[3];
	float fConst478;
	float fConst479;
	float fConst480;
	float fRec106[3];
	float fConst481;
	float fConst482;
	float fConst483;
	float fRec105[3];
	float fConst484;
	float fRec104[2];
	FAUSTFLOAT fVbargraph12;
	float fConst485;
	float fConst486;
	float fConst487;
	float fConst488;
	float fConst489;
	float fConst490;
	float fConst491;
	float fConst492;
	float fConst493;
	float fConst494;
	float fConst495;
	float fConst496;
	float fConst497;
	float fConst498;
	float fConst499;
	float fConst500;
	float fConst501;
	float fConst502;
	float fConst503;
	float fConst504;
	float fConst505;
	float fRec117[3];
	float fConst506;
	float fConst507;
	float fConst508;
	float fRec116[3];
	float fConst509;
	float fConst510;
	float fConst511;
	float fRec115[3];
	float fConst512;
	float fConst513;
	float fConst514;
	float fConst515;
	float fRec114[3];
	float fConst516;
	float fConst517;
	float fConst518;
	float fRec113[3];
	float fConst519;
	float fConst520;
	float fConst521;
	float fRec112[3];
	float fConst522;
	float fRec111[2];
	FAUSTFLOAT fVbargraph13;
	float fConst523;
	float fConst524;
	float fConst525;
	float fConst526;
	float fConst527;
	float fConst528;
	float fConst529;
	float fConst530;
	float fConst531;
	float fRec121[3];
	float fConst532;
	float fConst533;
	float fConst534;
	float fRec120[3];
	float fConst535;
	float fConst536;
	float fConst537;
	float fRec119[3];
	float fConst538;
	float fRec118[2];
	FAUSTFLOAT fVbargraph14;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("effect.lib/amp_follower_ar:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/amp_follower_ar:copyright", "Julius O. Smith III");
		m->declare("effect.lib/amp_follower_ar:license", "STK-4.3");
		m->declare("effect.lib/bypass2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass2:license", "STK-4.3");
		m->declare("effect.lib/compression_gain_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compression_gain_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compression_gain_mono:license", "STK-4.3");
		m->declare("effect.lib/compressor_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compressor_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compressor_demo:license", "STK-4.3");
		m->declare("effect.lib/compressor_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/compressor_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/compressor_stereo:license", "STK-4.3");
		m->declare("effect.lib/cross2:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cross2:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cross2:license", "STK-4.3");
		m->declare("effect.lib/gate_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_demo:license", "STK-4.3");
		m->declare("effect.lib/gate_gain_mono:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_gain_mono:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_gain_mono:license", "STK-4.3");
		m->declare("effect.lib/gate_stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/gate_stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/gate_stereo:license", "STK-4.3");
		m->declare("effect.lib/lag_ud:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/lag_ud:copyright", "Julius O. Smith III");
		m->declare("effect.lib/lag_ud:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/select2stereo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/select2stereo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/select2stereo:license", "STK-4.3");
		m->declare("filename", "gate_compressor.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "gate_compressor");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 1e+03f / fConst0;
		fConst2 = std::tan(50265.484f / fConst0);
		fConst3 = 1.0f / fConst2;
		fConst4 = 1.0f / ((fConst3 + 0.15748216f) / fConst2 + 0.9351402f);
		fConst5 = mydsp_faustpower2_f(fConst2);
		fConst6 = 50.06381f / fConst5;
		fConst7 = fConst6 + 0.9351402f;
		fConst8 = 1.0f / ((fConst3 + 0.74313045f) / fConst2 + 1.4500711f);
		fConst9 = 11.0520525f / fConst5;
		fConst10 = fConst9 + 1.4500711f;
		fConst11 = 1.0f / ((fConst3 + 3.1897273f) / fConst2 + 4.0767817f);
		fConst12 = 0.0017661728f / fConst5;
		fConst13 = fConst12 + 0.0004076782f;
		fConst14 = 1.0f / fConst0;
		fConst15 = 0.25f * fConst0;
		fConst16 = 0.041666668f * mydsp_faustpower2_f(fConst0);
		fConst17 = 0.0052083335f * mydsp_faustpower3_f(fConst0);
		fConst18 = 2.0f / fConst0;
		fConst19 = (fConst3 + -3.1897273f) / fConst2 + 4.0767817f;
		fConst20 = 1.0f / fConst5;
		fConst21 = 2.0f * (4.0767817f - fConst20);
		fConst22 = 2.0f * (0.0004076782f - fConst12);
		fConst23 = (fConst3 + -0.74313045f) / fConst2 + 1.4500711f;
		fConst24 = 2.0f * (1.4500711f - fConst20);
		fConst25 = 2.0f * (1.4500711f - fConst9);
		fConst26 = (fConst3 + -0.15748216f) / fConst2 + 0.9351402f;
		fConst27 = 2.0f * (0.9351402f - fConst20);
		fConst28 = 2.0f * (0.9351402f - fConst6);
		fConst29 = std::tan(31665.27f / fConst0);
		fConst30 = 1.0f / fConst29;
		fConst31 = 1.0f / ((fConst30 + 0.15748216f) / fConst29 + 0.9351402f);
		fConst32 = mydsp_faustpower2_f(fConst29);
		fConst33 = 50.06381f / fConst32;
		fConst34 = fConst33 + 0.9351402f;
		fConst35 = 1.0f / ((fConst30 + 0.74313045f) / fConst29 + 1.4500711f);
		fConst36 = 11.0520525f / fConst32;
		fConst37 = fConst36 + 1.4500711f;
		fConst38 = 1.0f / ((fConst30 + 3.1897273f) / fConst29 + 4.0767817f);
		fConst39 = 0.0017661728f / fConst32;
		fConst40 = fConst39 + 0.0004076782f;
		fConst41 = 1.0f / ((fConst3 + 0.16840488f) / fConst2 + 1.0693583f);
		fConst42 = fConst20 + 53.53615f;
		fConst43 = 1.0f / ((fConst3 + 0.51247865f) / fConst2 + 0.6896214f);
		fConst44 = fConst20 + 7.6217313f;
		fConst45 = 1.0f / ((fConst3 + 0.78241307f) / fConst2 + 0.2452915f);
		fConst46 = 0.0001f / fConst5;
		fConst47 = fConst46 + 0.0004332272f;
		fConst48 = (fConst3 + -0.78241307f) / fConst2 + 0.2452915f;
		fConst49 = 2.0f * (0.2452915f - fConst20);
		fConst50 = 2.0f * (0.0004332272f - fConst46);
		fConst51 = (fConst3 + -0.51247865f) / fConst2 + 0.6896214f;
		fConst52 = 2.0f * (0.6896214f - fConst20);
		fConst53 = 2.0f * (7.6217313f - fConst20);
		fConst54 = (fConst3 + -0.16840488f) / fConst2 + 1.0693583f;
		fConst55 = 2.0f * (1.0693583f - fConst20);
		fConst56 = 2.0f * (53.53615f - fConst20);
		fConst57 = (fConst30 + -3.1897273f) / fConst29 + 4.0767817f;
		fConst58 = 1.0f / fConst32;
		fConst59 = 2.0f * (4.0767817f - fConst58);
		fConst60 = 2.0f * (0.0004076782f - fConst39);
		fConst61 = (fConst30 + -0.74313045f) / fConst29 + 1.4500711f;
		fConst62 = 2.0f * (1.4500711f - fConst58);
		fConst63 = 2.0f * (1.4500711f - fConst36);
		fConst64 = (fConst30 + -0.15748216f) / fConst29 + 0.9351402f;
		fConst65 = 2.0f * (0.9351402f - fConst58);
		fConst66 = 2.0f * (0.9351402f - fConst33);
		fConst67 = std::tan(19947.87f / fConst0);
		fConst68 = 1.0f / fConst67;
		fConst69 = 1.0f / ((fConst68 + 0.15748216f) / fConst67 + 0.9351402f);
		fConst70 = mydsp_faustpower2_f(fConst67);
		fConst71 = 50.06381f / fConst70;
		fConst72 = fConst71 + 0.9351402f;
		fConst73 = 1.0f / ((fConst68 + 0.74313045f) / fConst67 + 1.4500711f);
		fConst74 = 11.0520525f / fConst70;
		fConst75 = fConst74 + 1.4500711f;
		fConst76 = 1.0f / ((fConst68 + 3.1897273f) / fConst67 + 4.0767817f);
		fConst77 = 0.0017661728f / fConst70;
		fConst78 = fConst77 + 0.0004076782f;
		fConst79 = 1.0f / ((fConst30 + 0.16840488f) / fConst29 + 1.0693583f);
		fConst80 = fConst58 + 53.53615f;
		fConst81 = 1.0f / ((fConst30 + 0.51247865f) / fConst29 + 0.6896214f);
		fConst82 = fConst58 + 7.6217313f;
		fConst83 = 1.0f / ((fConst30 + 0.78241307f) / fConst29 + 0.2452915f);
		fConst84 = 0.0001f / fConst32;
		fConst85 = fConst84 + 0.0004332272f;
		fConst86 = (fConst30 + -0.78241307f) / fConst29 + 0.2452915f;
		fConst87 = 2.0f * (0.2452915f - fConst58);
		fConst88 = 2.0f * (0.0004332272f - fConst84);
		fConst89 = (fConst30 + -0.51247865f) / fConst29 + 0.6896214f;
		fConst90 = 2.0f * (0.6896214f - fConst58);
		fConst91 = 2.0f * (7.6217313f - fConst58);
		fConst92 = (fConst30 + -0.16840488f) / fConst29 + 1.0693583f;
		fConst93 = 2.0f * (1.0693583f - fConst58);
		fConst94 = 2.0f * (53.53615f - fConst58);
		fConst95 = (fConst68 + -3.1897273f) / fConst67 + 4.0767817f;
		fConst96 = 1.0f / fConst70;
		fConst97 = 2.0f * (4.0767817f - fConst96);
		fConst98 = 2.0f * (0.0004076782f - fConst77);
		fConst99 = (fConst68 + -0.74313045f) / fConst67 + 1.4500711f;
		fConst100 = 2.0f * (1.4500711f - fConst96);
		fConst101 = 2.0f * (1.4500711f - fConst74);
		fConst102 = (fConst68 + -0.15748216f) / fConst67 + 0.9351402f;
		fConst103 = 2.0f * (0.9351402f - fConst96);
		fConst104 = 2.0f * (0.9351402f - fConst71);
		fConst105 = std::tan(12566.371f / fConst0);
		fConst106 = 1.0f / fConst105;
		fConst107 = 1.0f / ((fConst106 + 0.15748216f) / fConst105 + 0.9351402f);
		fConst108 = mydsp_faustpower2_f(fConst105);
		fConst109 = 50.06381f / fConst108;
		fConst110 = fConst109 + 0.9351402f;
		fConst111 = 1.0f / ((fConst106 + 0.74313045f) / fConst105 + 1.4500711f);
		fConst112 = 11.0520525f / fConst108;
		fConst113 = fConst112 + 1.4500711f;
		fConst114 = 1.0f / ((fConst106 + 3.1897273f) / fConst105 + 4.0767817f);
		fConst115 = 0.0017661728f / fConst108;
		fConst116 = fConst115 + 0.0004076782f;
		fConst117 = 1.0f / ((fConst68 + 0.16840488f) / fConst67 + 1.0693583f);
		fConst118 = fConst96 + 53.53615f;
		fConst119 = 1.0f / ((fConst68 + 0.51247865f) / fConst67 + 0.6896214f);
		fConst120 = fConst96 + 7.6217313f;
		fConst121 = 1.0f / ((fConst68 + 0.78241307f) / fConst67 + 0.2452915f);
		fConst122 = 0.0001f / fConst70;
		fConst123 = fConst122 + 0.0004332272f;
		fConst124 = (fConst68 + -0.78241307f) / fConst67 + 0.2452915f;
		fConst125 = 2.0f * (0.2452915f - fConst96);
		fConst126 = 2.0f * (0.0004332272f - fConst122);
		fConst127 = (fConst68 + -0.51247865f) / fConst67 + 0.6896214f;
		fConst128 = 2.0f * (0.6896214f - fConst96);
		fConst129 = 2.0f * (7.6217313f - fConst96);
		fConst130 = (fConst68 + -0.16840488f) / fConst67 + 1.0693583f;
		fConst131 = 2.0f * (1.0693583f - fConst96);
		fConst132 = 2.0f * (53.53615f - fConst96);
		fConst133 = (fConst106 + -3.1897273f) / fConst105 + 4.0767817f;
		fConst134 = 1.0f / fConst108;
		fConst135 = 2.0f * (4.0767817f - fConst134);
		fConst136 = 2.0f * (0.0004076782f - fConst115);
		fConst137 = (fConst106 + -0.74313045f) / fConst105 + 1.4500711f;
		fConst138 = 2.0f * (1.4500711f - fConst134);
		fConst139 = 2.0f * (1.4500711f - fConst112);
		fConst140 = (fConst106 + -0.15748216f) / fConst105 + 0.9351402f;
		fConst141 = 2.0f * (0.9351402f - fConst134);
		fConst142 = 2.0f * (0.9351402f - fConst109);
		fConst143 = std::tan(7916.3174f / fConst0);
		fConst144 = 1.0f / fConst143;
		fConst145 = 1.0f / ((fConst144 + 0.15748216f) / fConst143 + 0.9351402f);
		fConst146 = mydsp_faustpower2_f(fConst143);
		fConst147 = 50.06381f / fConst146;
		fConst148 = fConst147 + 0.9351402f;
		fConst149 = 1.0f / ((fConst144 + 0.74313045f) / fConst143 + 1.4500711f);
		fConst150 = 11.0520525f / fConst146;
		fConst151 = fConst150 + 1.4500711f;
		fConst152 = 1.0f / ((fConst144 + 3.1897273f) / fConst143 + 4.0767817f);
		fConst153 = 0.0017661728f / fConst146;
		fConst154 = fConst153 + 0.0004076782f;
		fConst155 = 1.0f / ((fConst106 + 0.16840488f) / fConst105 + 1.0693583f);
		fConst156 = fConst134 + 53.53615f;
		fConst157 = 1.0f / ((fConst106 + 0.51247865f) / fConst105 + 0.6896214f);
		fConst158 = fConst134 + 7.6217313f;
		fConst159 = 1.0f / ((fConst106 + 0.78241307f) / fConst105 + 0.2452915f);
		fConst160 = 0.0001f / fConst108;
		fConst161 = fConst160 + 0.0004332272f;
		fConst162 = (fConst106 + -0.78241307f) / fConst105 + 0.2452915f;
		fConst163 = 2.0f * (0.2452915f - fConst134);
		fConst164 = 2.0f * (0.0004332272f - fConst160);
		fConst165 = (fConst106 + -0.51247865f) / fConst105 + 0.6896214f;
		fConst166 = 2.0f * (0.6896214f - fConst134);
		fConst167 = 2.0f * (7.6217313f - fConst134);
		fConst168 = (fConst106 + -0.16840488f) / fConst105 + 1.0693583f;
		fConst169 = 2.0f * (1.0693583f - fConst134);
		fConst170 = 2.0f * (53.53615f - fConst134);
		fConst171 = (fConst144 + -3.1897273f) / fConst143 + 4.0767817f;
		fConst172 = 1.0f / fConst146;
		fConst173 = 2.0f * (4.0767817f - fConst172);
		fConst174 = 2.0f * (0.0004076782f - fConst153);
		fConst175 = (fConst144 + -0.74313045f) / fConst143 + 1.4500711f;
		fConst176 = 2.0f * (1.4500711f - fConst172);
		fConst177 = 2.0f * (1.4500711f - fConst150);
		fConst178 = (fConst144 + -0.15748216f) / fConst143 + 0.9351402f;
		fConst179 = 2.0f * (0.9351402f - fConst172);
		fConst180 = 2.0f * (0.9351402f - fConst147);
		fConst181 = std::tan(4986.9673f / fConst0);
		fConst182 = 1.0f / fConst181;
		fConst183 = 1.0f / ((fConst182 + 0.15748216f) / fConst181 + 0.9351402f);
		fConst184 = mydsp_faustpower2_f(fConst181);
		fConst185 = 50.06381f / fConst184;
		fConst186 = fConst185 + 0.9351402f;
		fConst187 = 1.0f / ((fConst182 + 0.74313045f) / fConst181 + 1.4500711f);
		fConst188 = 11.0520525f / fConst184;
		fConst189 = fConst188 + 1.4500711f;
		fConst190 = 1.0f / ((fConst182 + 3.1897273f) / fConst181 + 4.0767817f);
		fConst191 = 0.0017661728f / fConst184;
		fConst192 = fConst191 + 0.0004076782f;
		fConst193 = 1.0f / ((fConst144 + 0.16840488f) / fConst143 + 1.0693583f);
		fConst194 = fConst172 + 53.53615f;
		fConst195 = 1.0f / ((fConst144 + 0.51247865f) / fConst143 + 0.6896214f);
		fConst196 = fConst172 + 7.6217313f;
		fConst197 = 1.0f / ((fConst144 + 0.78241307f) / fConst143 + 0.2452915f);
		fConst198 = 0.0001f / fConst146;
		fConst199 = fConst198 + 0.0004332272f;
		fConst200 = (fConst144 + -0.78241307f) / fConst143 + 0.2452915f;
		fConst201 = 2.0f * (0.2452915f - fConst172);
		fConst202 = 2.0f * (0.0004332272f - fConst198);
		fConst203 = (fConst144 + -0.51247865f) / fConst143 + 0.6896214f;
		fConst204 = 2.0f * (0.6896214f - fConst172);
		fConst205 = 2.0f * (7.6217313f - fConst172);
		fConst206 = (fConst144 + -0.16840488f) / fConst143 + 1.0693583f;
		fConst207 = 2.0f * (1.0693583f - fConst172);
		fConst208 = 2.0f * (53.53615f - fConst172);
		fConst209 = (fConst182 + -3.1897273f) / fConst181 + 4.0767817f;
		fConst210 = 1.0f / fConst184;
		fConst211 = 2.0f * (4.0767817f - fConst210);
		fConst212 = 2.0f * (0.0004076782f - fConst191);
		fConst213 = (fConst182 + -0.74313045f) / fConst181 + 1.4500711f;
		fConst214 = 2.0f * (1.4500711f - fConst210);
		fConst215 = 2.0f * (1.4500711f - fConst188);
		fConst216 = (fConst182 + -0.15748216f) / fConst181 + 0.9351402f;
		fConst217 = 2.0f * (0.9351402f - fConst210);
		fConst218 = 2.0f * (0.9351402f - fConst185);
		fConst219 = std::tan(3141.5928f / fConst0);
		fConst220 = 1.0f / fConst219;
		fConst221 = 1.0f / ((fConst220 + 0.15748216f) / fConst219 + 0.9351402f);
		fConst222 = mydsp_faustpower2_f(fConst219);
		fConst223 = 50.06381f / fConst222;
		fConst224 = fConst223 + 0.9351402f;
		fConst225 = 1.0f / ((fConst220 + 0.74313045f) / fConst219 + 1.4500711f);
		fConst226 = 11.0520525f / fConst222;
		fConst227 = fConst226 + 1.4500711f;
		fConst228 = 1.0f / ((fConst220 + 3.1897273f) / fConst219 + 4.0767817f);
		fConst229 = 0.0017661728f / fConst222;
		fConst230 = fConst229 + 0.0004076782f;
		fConst231 = 1.0f / ((fConst182 + 0.16840488f) / fConst181 + 1.0693583f);
		fConst232 = fConst210 + 53.53615f;
		fConst233 = 1.0f / ((fConst182 + 0.51247865f) / fConst181 + 0.6896214f);
		fConst234 = fConst210 + 7.6217313f;
		fConst235 = 1.0f / ((fConst182 + 0.78241307f) / fConst181 + 0.2452915f);
		fConst236 = 0.0001f / fConst184;
		fConst237 = fConst236 + 0.0004332272f;
		fConst238 = (fConst182 + -0.78241307f) / fConst181 + 0.2452915f;
		fConst239 = 2.0f * (0.2452915f - fConst210);
		fConst240 = 2.0f * (0.0004332272f - fConst236);
		fConst241 = (fConst182 + -0.51247865f) / fConst181 + 0.6896214f;
		fConst242 = 2.0f * (0.6896214f - fConst210);
		fConst243 = 2.0f * (7.6217313f - fConst210);
		fConst244 = (fConst182 + -0.16840488f) / fConst181 + 1.0693583f;
		fConst245 = 2.0f * (1.0693583f - fConst210);
		fConst246 = 2.0f * (53.53615f - fConst210);
		fConst247 = (fConst220 + -3.1897273f) / fConst219 + 4.0767817f;
		fConst248 = 1.0f / fConst222;
		fConst249 = 2.0f * (4.0767817f - fConst248);
		fConst250 = 2.0f * (0.0004076782f - fConst229);
		fConst251 = (fConst220 + -0.74313045f) / fConst219 + 1.4500711f;
		fConst252 = 2.0f * (1.4500711f - fConst248);
		fConst253 = 2.0f * (1.4500711f - fConst226);
		fConst254 = (fConst220 + -0.15748216f) / fConst219 + 0.9351402f;
		fConst255 = 2.0f * (0.9351402f - fConst248);
		fConst256 = 2.0f * (0.9351402f - fConst223);
		fConst257 = std::tan(1979.0793f / fConst0);
		fConst258 = 1.0f / fConst257;
		fConst259 = 1.0f / ((fConst258 + 0.15748216f) / fConst257 + 0.9351402f);
		fConst260 = mydsp_faustpower2_f(fConst257);
		fConst261 = 50.06381f / fConst260;
		fConst262 = fConst261 + 0.9351402f;
		fConst263 = 1.0f / ((fConst258 + 0.74313045f) / fConst257 + 1.4500711f);
		fConst264 = 11.0520525f / fConst260;
		fConst265 = fConst264 + 1.4500711f;
		fConst266 = 1.0f / ((fConst258 + 3.1897273f) / fConst257 + 4.0767817f);
		fConst267 = 0.0017661728f / fConst260;
		fConst268 = fConst267 + 0.0004076782f;
		fConst269 = 1.0f / ((fConst220 + 0.16840488f) / fConst219 + 1.0693583f);
		fConst270 = fConst248 + 53.53615f;
		fConst271 = 1.0f / ((fConst220 + 0.51247865f) / fConst219 + 0.6896214f);
		fConst272 = fConst248 + 7.6217313f;
		fConst273 = 1.0f / ((fConst220 + 0.78241307f) / fConst219 + 0.2452915f);
		fConst274 = 0.0001f / fConst222;
		fConst275 = fConst274 + 0.0004332272f;
		fConst276 = (fConst220 + -0.78241307f) / fConst219 + 0.2452915f;
		fConst277 = 2.0f * (0.2452915f - fConst248);
		fConst278 = 2.0f * (0.0004332272f - fConst274);
		fConst279 = (fConst220 + -0.51247865f) / fConst219 + 0.6896214f;
		fConst280 = 2.0f * (0.6896214f - fConst248);
		fConst281 = 2.0f * (7.6217313f - fConst248);
		fConst282 = (fConst220 + -0.16840488f) / fConst219 + 1.0693583f;
		fConst283 = 2.0f * (1.0693583f - fConst248);
		fConst284 = 2.0f * (53.53615f - fConst248);
		fConst285 = (fConst258 + -3.1897273f) / fConst257 + 4.0767817f;
		fConst286 = 1.0f / fConst260;
		fConst287 = 2.0f * (4.0767817f - fConst286);
		fConst288 = 2.0f * (0.0004076782f - fConst267);
		fConst289 = (fConst258 + -0.74313045f) / fConst257 + 1.4500711f;
		fConst290 = 2.0f * (1.4500711f - fConst286);
		fConst291 = 2.0f * (1.4500711f - fConst264);
		fConst292 = (fConst258 + -0.15748216f) / fConst257 + 0.9351402f;
		fConst293 = 2.0f * (0.9351402f - fConst286);
		fConst294 = 2.0f * (0.9351402f - fConst261);
		fConst295 = std::tan(1246.7418f / fConst0);
		fConst296 = 1.0f / fConst295;
		fConst297 = 1.0f / ((fConst296 + 0.15748216f) / fConst295 + 0.9351402f);
		fConst298 = mydsp_faustpower2_f(fConst295);
		fConst299 = 50.06381f / fConst298;
		fConst300 = fConst299 + 0.9351402f;
		fConst301 = 1.0f / ((fConst296 + 0.74313045f) / fConst295 + 1.4500711f);
		fConst302 = 11.0520525f / fConst298;
		fConst303 = fConst302 + 1.4500711f;
		fConst304 = 1.0f / ((fConst296 + 3.1897273f) / fConst295 + 4.0767817f);
		fConst305 = 0.0017661728f / fConst298;
		fConst306 = fConst305 + 0.0004076782f;
		fConst307 = 1.0f / ((fConst258 + 0.16840488f) / fConst257 + 1.0693583f);
		fConst308 = fConst286 + 53.53615f;
		fConst309 = 1.0f / ((fConst258 + 0.51247865f) / fConst257 + 0.6896214f);
		fConst310 = fConst286 + 7.6217313f;
		fConst311 = 1.0f / ((fConst258 + 0.78241307f) / fConst257 + 0.2452915f);
		fConst312 = 0.0001f / fConst260;
		fConst313 = fConst312 + 0.0004332272f;
		fConst314 = (fConst258 + -0.78241307f) / fConst257 + 0.2452915f;
		fConst315 = 2.0f * (0.2452915f - fConst286);
		fConst316 = 2.0f * (0.0004332272f - fConst312);
		fConst317 = (fConst258 + -0.51247865f) / fConst257 + 0.6896214f;
		fConst318 = 2.0f * (0.6896214f - fConst286);
		fConst319 = 2.0f * (7.6217313f - fConst286);
		fConst320 = (fConst258 + -0.16840488f) / fConst257 + 1.0693583f;
		fConst321 = 2.0f * (1.0693583f - fConst286);
		fConst322 = 2.0f * (53.53615f - fConst286);
		fConst323 = (fConst296 + -3.1897273f) / fConst295 + 4.0767817f;
		fConst324 = 1.0f / fConst298;
		fConst325 = 2.0f * (4.0767817f - fConst324);
		fConst326 = 2.0f * (0.0004076782f - fConst305);
		fConst327 = (fConst296 + -0.74313045f) / fConst295 + 1.4500711f;
		fConst328 = 2.0f * (1.4500711f - fConst324);
		fConst329 = 2.0f * (1.4500711f - fConst302);
		fConst330 = (fConst296 + -0.15748216f) / fConst295 + 0.9351402f;
		fConst331 = 2.0f * (0.9351402f - fConst324);
		fConst332 = 2.0f * (0.9351402f - fConst299);
		fConst333 = std::tan(785.3982f / fConst0);
		fConst334 = 1.0f / fConst333;
		fConst335 = 1.0f / ((fConst334 + 0.15748216f) / fConst333 + 0.9351402f);
		fConst336 = mydsp_faustpower2_f(fConst333);
		fConst337 = 50.06381f / fConst336;
		fConst338 = fConst337 + 0.9351402f;
		fConst339 = 1.0f / ((fConst334 + 0.74313045f) / fConst333 + 1.4500711f);
		fConst340 = 11.0520525f / fConst336;
		fConst341 = fConst340 + 1.4500711f;
		fConst342 = 1.0f / ((fConst334 + 3.1897273f) / fConst333 + 4.0767817f);
		fConst343 = 0.0017661728f / fConst336;
		fConst344 = fConst343 + 0.0004076782f;
		fConst345 = 1.0f / ((fConst296 + 0.16840488f) / fConst295 + 1.0693583f);
		fConst346 = fConst324 + 53.53615f;
		fConst347 = 1.0f / ((fConst296 + 0.51247865f) / fConst295 + 0.6896214f);
		fConst348 = fConst324 + 7.6217313f;
		fConst349 = 1.0f / ((fConst296 + 0.78241307f) / fConst295 + 0.2452915f);
		fConst350 = 0.0001f / fConst298;
		fConst351 = fConst350 + 0.0004332272f;
		fConst352 = (fConst296 + -0.78241307f) / fConst295 + 0.2452915f;
		fConst353 = 2.0f * (0.2452915f - fConst324);
		fConst354 = 2.0f * (0.0004332272f - fConst350);
		fConst355 = (fConst296 + -0.51247865f) / fConst295 + 0.6896214f;
		fConst356 = 2.0f * (0.6896214f - fConst324);
		fConst357 = 2.0f * (7.6217313f - fConst324);
		fConst358 = (fConst296 + -0.16840488f) / fConst295 + 1.0693583f;
		fConst359 = 2.0f * (1.0693583f - fConst324);
		fConst360 = 2.0f * (53.53615f - fConst324);
		fConst361 = (fConst334 + -3.1897273f) / fConst333 + 4.0767817f;
		fConst362 = 1.0f / fConst336;
		fConst363 = 2.0f * (4.0767817f - fConst362);
		fConst364 = 2.0f * (0.0004076782f - fConst343);
		fConst365 = (fConst334 + -0.74313045f) / fConst333 + 1.4500711f;
		fConst366 = 2.0f * (1.4500711f - fConst362);
		fConst367 = 2.0f * (1.4500711f - fConst340);
		fConst368 = (fConst334 + -0.15748216f) / fConst333 + 0.9351402f;
		fConst369 = 2.0f * (0.9351402f - fConst362);
		fConst370 = 2.0f * (0.9351402f - fConst337);
		fConst371 = std::tan(494.76984f / fConst0);
		fConst372 = 1.0f / fConst371;
		fConst373 = 1.0f / ((fConst372 + 0.15748216f) / fConst371 + 0.9351402f);
		fConst374 = mydsp_faustpower2_f(fConst371);
		fConst375 = 50.06381f / fConst374;
		fConst376 = fConst375 + 0.9351402f;
		fConst377 = 1.0f / ((fConst372 + 0.74313045f) / fConst371 + 1.4500711f);
		fConst378 = 11.0520525f / fConst374;
		fConst379 = fConst378 + 1.4500711f;
		fConst380 = 1.0f / ((fConst372 + 3.1897273f) / fConst371 + 4.0767817f);
		fConst381 = 0.0017661728f / fConst374;
		fConst382 = fConst381 + 0.0004076782f;
		fConst383 = 1.0f / ((fConst334 + 0.16840488f) / fConst333 + 1.0693583f);
		fConst384 = fConst362 + 53.53615f;
		fConst385 = 1.0f / ((fConst334 + 0.51247865f) / fConst333 + 0.6896214f);
		fConst386 = fConst362 + 7.6217313f;
		fConst387 = 1.0f / ((fConst334 + 0.78241307f) / fConst333 + 0.2452915f);
		fConst388 = 0.0001f / fConst336;
		fConst389 = fConst388 + 0.0004332272f;
		fConst390 = (fConst334 + -0.78241307f) / fConst333 + 0.2452915f;
		fConst391 = 2.0f * (0.2452915f - fConst362);
		fConst392 = 2.0f * (0.0004332272f - fConst388);
		fConst393 = (fConst334 + -0.51247865f) / fConst333 + 0.6896214f;
		fConst394 = 2.0f * (0.6896214f - fConst362);
		fConst395 = 2.0f * (7.6217313f - fConst362);
		fConst396 = (fConst334 + -0.16840488f) / fConst333 + 1.0693583f;
		fConst397 = 2.0f * (1.0693583f - fConst362);
		fConst398 = 2.0f * (53.53615f - fConst362);
		fConst399 = (fConst372 + -3.1897273f) / fConst371 + 4.0767817f;
		fConst400 = 1.0f / fConst374;
		fConst401 = 2.0f * (4.0767817f - fConst400);
		fConst402 = 2.0f * (0.0004076782f - fConst381);
		fConst403 = (fConst372 + -0.74313045f) / fConst371 + 1.4500711f;
		fConst404 = 2.0f * (1.4500711f - fConst400);
		fConst405 = 2.0f * (1.4500711f - fConst378);
		fConst406 = (fConst372 + -0.15748216f) / fConst371 + 0.9351402f;
		fConst407 = 2.0f * (0.9351402f - fConst400);
		fConst408 = 2.0f * (0.9351402f - fConst375);
		fConst409 = std::tan(311.68546f / fConst0);
		fConst410 = 1.0f / fConst409;
		fConst411 = 1.0f / ((fConst410 + 0.15748216f) / fConst409 + 0.9351402f);
		fConst412 = mydsp_faustpower2_f(fConst409);
		fConst413 = 50.06381f / fConst412;
		fConst414 = fConst413 + 0.9351402f;
		fConst415 = 1.0f / ((fConst410 + 0.74313045f) / fConst409 + 1.4500711f);
		fConst416 = 11.0520525f / fConst412;
		fConst417 = fConst416 + 1.4500711f;
		fConst418 = 1.0f / ((fConst410 + 3.1897273f) / fConst409 + 4.0767817f);
		fConst419 = 0.0017661728f / fConst412;
		fConst420 = fConst419 + 0.0004076782f;
		fConst421 = 1.0f / ((fConst372 + 0.16840488f) / fConst371 + 1.0693583f);
		fConst422 = fConst400 + 53.53615f;
		fConst423 = 1.0f / ((fConst372 + 0.51247865f) / fConst371 + 0.6896214f);
		fConst424 = fConst400 + 7.6217313f;
		fConst425 = 1.0f / ((fConst372 + 0.78241307f) / fConst371 + 0.2452915f);
		fConst426 = 0.0001f / fConst374;
		fConst427 = fConst426 + 0.0004332272f;
		fConst428 = (fConst372 + -0.78241307f) / fConst371 + 0.2452915f;
		fConst429 = 2.0f * (0.2452915f - fConst400);
		fConst430 = 2.0f * (0.0004332272f - fConst426);
		fConst431 = (fConst372 + -0.51247865f) / fConst371 + 0.6896214f;
		fConst432 = 2.0f * (0.6896214f - fConst400);
		fConst433 = 2.0f * (7.6217313f - fConst400);
		fConst434 = (fConst372 + -0.16840488f) / fConst371 + 1.0693583f;
		fConst435 = 2.0f * (1.0693583f - fConst400);
		fConst436 = 2.0f * (53.53615f - fConst400);
		fConst437 = (fConst410 + -3.1897273f) / fConst409 + 4.0767817f;
		fConst438 = 1.0f / fConst412;
		fConst439 = 2.0f * (4.0767817f - fConst438);
		fConst440 = 2.0f * (0.0004076782f - fConst419);
		fConst441 = (fConst410 + -0.74313045f) / fConst409 + 1.4500711f;
		fConst442 = 2.0f * (1.4500711f - fConst438);
		fConst443 = 2.0f * (1.4500711f - fConst416);
		fConst444 = (fConst410 + -0.15748216f) / fConst409 + 0.9351402f;
		fConst445 = 2.0f * (0.9351402f - fConst438);
		fConst446 = 2.0f * (0.9351402f - fConst413);
		fConst447 = std::tan(196.34955f / fConst0);
		fConst448 = 1.0f / fConst447;
		fConst449 = 1.0f / ((fConst448 + 0.15748216f) / fConst447 + 0.9351402f);
		fConst450 = mydsp_faustpower2_f(fConst447);
		fConst451 = 50.06381f / fConst450;
		fConst452 = fConst451 + 0.9351402f;
		fConst453 = 1.0f / ((fConst448 + 0.74313045f) / fConst447 + 1.4500711f);
		fConst454 = 11.0520525f / fConst450;
		fConst455 = fConst454 + 1.4500711f;
		fConst456 = 1.0f / ((fConst448 + 3.1897273f) / fConst447 + 4.0767817f);
		fConst457 = 0.0017661728f / fConst450;
		fConst458 = fConst457 + 0.0004076782f;
		fConst459 = 1.0f / ((fConst410 + 0.16840488f) / fConst409 + 1.0693583f);
		fConst460 = fConst438 + 53.53615f;
		fConst461 = 1.0f / ((fConst410 + 0.51247865f) / fConst409 + 0.6896214f);
		fConst462 = fConst438 + 7.6217313f;
		fConst463 = 1.0f / ((fConst410 + 0.78241307f) / fConst409 + 0.2452915f);
		fConst464 = 0.0001f / fConst412;
		fConst465 = fConst464 + 0.0004332272f;
		fConst466 = (fConst410 + -0.78241307f) / fConst409 + 0.2452915f;
		fConst467 = 2.0f * (0.2452915f - fConst438);
		fConst468 = 2.0f * (0.0004332272f - fConst464);
		fConst469 = (fConst410 + -0.51247865f) / fConst409 + 0.6896214f;
		fConst470 = 2.0f * (0.6896214f - fConst438);
		fConst471 = 2.0f * (7.6217313f - fConst438);
		fConst472 = (fConst410 + -0.16840488f) / fConst409 + 1.0693583f;
		fConst473 = 2.0f * (1.0693583f - fConst438);
		fConst474 = 2.0f * (53.53615f - fConst438);
		fConst475 = (fConst448 + -3.1897273f) / fConst447 + 4.0767817f;
		fConst476 = 1.0f / fConst450;
		fConst477 = 2.0f * (4.0767817f - fConst476);
		fConst478 = 2.0f * (0.0004076782f - fConst457);
		fConst479 = (fConst448 + -0.74313045f) / fConst447 + 1.4500711f;
		fConst480 = 2.0f * (1.4500711f - fConst476);
		fConst481 = 2.0f * (1.4500711f - fConst454);
		fConst482 = (fConst448 + -0.15748216f) / fConst447 + 0.9351402f;
		fConst483 = 2.0f * (0.9351402f - fConst476);
		fConst484 = 2.0f * (0.9351402f - fConst451);
		fConst485 = std::tan(123.69246f / fConst0);
		fConst486 = 1.0f / fConst485;
		fConst487 = 1.0f / ((fConst486 + 0.15748216f) / fConst485 + 0.9351402f);
		fConst488 = mydsp_faustpower2_f(fConst485);
		fConst489 = 50.06381f / fConst488;
		fConst490 = fConst489 + 0.9351402f;
		fConst491 = 1.0f / ((fConst486 + 0.74313045f) / fConst485 + 1.4500711f);
		fConst492 = 11.0520525f / fConst488;
		fConst493 = fConst492 + 1.4500711f;
		fConst494 = 1.0f / ((fConst486 + 3.1897273f) / fConst485 + 4.0767817f);
		fConst495 = 0.0017661728f / fConst488;
		fConst496 = fConst495 + 0.0004076782f;
		fConst497 = 1.0f / ((fConst448 + 0.16840488f) / fConst447 + 1.0693583f);
		fConst498 = fConst476 + 53.53615f;
		fConst499 = 1.0f / ((fConst448 + 0.51247865f) / fConst447 + 0.6896214f);
		fConst500 = fConst476 + 7.6217313f;
		fConst501 = 1.0f / ((fConst448 + 0.78241307f) / fConst447 + 0.2452915f);
		fConst502 = 0.0001f / fConst450;
		fConst503 = fConst502 + 0.0004332272f;
		fConst504 = (fConst448 + -0.78241307f) / fConst447 + 0.2452915f;
		fConst505 = 2.0f * (0.2452915f - fConst476);
		fConst506 = 2.0f * (0.0004332272f - fConst502);
		fConst507 = (fConst448 + -0.51247865f) / fConst447 + 0.6896214f;
		fConst508 = 2.0f * (0.6896214f - fConst476);
		fConst509 = 2.0f * (7.6217313f - fConst476);
		fConst510 = (fConst448 + -0.16840488f) / fConst447 + 1.0693583f;
		fConst511 = 2.0f * (1.0693583f - fConst476);
		fConst512 = 2.0f * (53.53615f - fConst476);
		fConst513 = (fConst486 + -3.1897273f) / fConst485 + 4.0767817f;
		fConst514 = 1.0f / fConst488;
		fConst515 = 2.0f * (4.0767817f - fConst514);
		fConst516 = 2.0f * (0.0004076782f - fConst495);
		fConst517 = (fConst486 + -0.74313045f) / fConst485 + 1.4500711f;
		fConst518 = 2.0f * (1.4500711f - fConst514);
		fConst519 = 2.0f * (1.4500711f - fConst492);
		fConst520 = (fConst486 + -0.15748216f) / fConst485 + 0.9351402f;
		fConst521 = 2.0f * (0.9351402f - fConst514);
		fConst522 = 2.0f * (0.9351402f - fConst489);
		fConst523 = 1.0f / ((fConst486 + 0.16840488f) / fConst485 + 1.0693583f);
		fConst524 = fConst514 + 53.53615f;
		fConst525 = 1.0f / ((fConst486 + 0.51247865f) / fConst485 + 0.6896214f);
		fConst526 = fConst514 + 7.6217313f;
		fConst527 = 1.0f / ((fConst486 + 0.78241307f) / fConst485 + 0.2452915f);
		fConst528 = 0.0001f / fConst488;
		fConst529 = fConst528 + 0.0004332272f;
		fConst530 = (fConst486 + -0.78241307f) / fConst485 + 0.2452915f;
		fConst531 = 2.0f * (0.2452915f - fConst514);
		fConst532 = 2.0f * (0.0004332272f - fConst528);
		fConst533 = (fConst486 + -0.51247865f) / fConst485 + 0.6896214f;
		fConst534 = 2.0f * (0.6896214f - fConst514);
		fConst535 = 2.0f * (7.6217313f - fConst514);
		fConst536 = (fConst486 + -0.16840488f) / fConst485 + 1.0693583f;
		fConst537 = 2.0f * (1.0693583f - fConst514);
		fConst538 = 2.0f * (53.53615f - fConst514);
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(5e+01f);
		fHslider1 = FAUSTFLOAT(1e+02f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fHslider2 = FAUSTFLOAT(4e+01f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
		fHslider3 = FAUSTFLOAT(1e+01f);
		fHslider4 = FAUSTFLOAT(1e+02f);
		fVslider0 = FAUSTFLOAT(-2e+01f);
		fCheckbox2 = FAUSTFLOAT(0.0f);
		fCheckbox3 = FAUSTFLOAT(0.0f);
		fEntry0 = FAUSTFLOAT(2.0f);
		fVslider1 = FAUSTFLOAT(0.1f);
		fVslider2 = FAUSTFLOAT(49.0f);
		fVslider3 = FAUSTFLOAT(-0.1f);
		fVslider4 = FAUSTFLOAT(0.1f);
		fCheckbox4 = FAUSTFLOAT(0.0f);
		fHslider5 = FAUSTFLOAT(-3e+01f);
		fHslider6 = FAUSTFLOAT(2e+02f);
		fHslider7 = FAUSTFLOAT(5e+01f);
		fHslider8 = FAUSTFLOAT(5.0f);
		fHslider9 = FAUSTFLOAT(5e+02f);
		fHslider10 = FAUSTFLOAT(-3e+01f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 4; l0 = l0 + 1) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec8[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec10[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec9[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fVec1[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fVec2[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fVec3[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fVec4[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fVec5[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fVec6[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fRec11[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fVec7[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fVec8[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fVec9[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fVec10[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fVec11[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
			fVec12[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2; l17 = l17 + 1) {
			fRec12[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fVec13[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fVec14[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fVec15[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 2; l21 = l21 + 1) {
			fVec16[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			fVec17[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fVec18[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			iRec13[l24] = 0;
		}
		for (int l25 = 0; l25 < 4; l25 = l25 + 1) {
			fRec14[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			fRec18[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			iVec19[l27] = 0;
		}
		for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
			iRec19[l28] = 0;
		}
		for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
			fRec16[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			fRec15[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
			fRec7[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 2; l32 = l32 + 1) {
			iVec20[l32] = 0;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			iRec20[l33] = 0;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			fRec5[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec4[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
			fRec23[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 2; l37 = l37 + 1) {
			fRec22[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			fRec21[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fRec26[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
			fRec25[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
			fRec24[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 3; l42 = l42 + 1) {
			fRec3[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 3; l43 = l43 + 1) {
			fRec2[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
			fRec1[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 2; l45 = l45 + 1) {
			fRec0[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 3; l46 = l46 + 1) {
			fRec33[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 3; l47 = l47 + 1) {
			fRec32[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 3; l48 = l48 + 1) {
			fRec31[l48] = 0.0f;
		}
		for (int l49 = 0; l49 < 3; l49 = l49 + 1) {
			fRec30[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 3; l50 = l50 + 1) {
			fRec29[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 3; l51 = l51 + 1) {
			fRec28[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 2; l52 = l52 + 1) {
			fRec27[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 3; l53 = l53 + 1) {
			fRec40[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 3; l54 = l54 + 1) {
			fRec39[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 3; l55 = l55 + 1) {
			fRec38[l55] = 0.0f;
		}
		for (int l56 = 0; l56 < 3; l56 = l56 + 1) {
			fRec37[l56] = 0.0f;
		}
		for (int l57 = 0; l57 < 3; l57 = l57 + 1) {
			fRec36[l57] = 0.0f;
		}
		for (int l58 = 0; l58 < 3; l58 = l58 + 1) {
			fRec35[l58] = 0.0f;
		}
		for (int l59 = 0; l59 < 2; l59 = l59 + 1) {
			fRec34[l59] = 0.0f;
		}
		for (int l60 = 0; l60 < 3; l60 = l60 + 1) {
			fRec47[l60] = 0.0f;
		}
		for (int l61 = 0; l61 < 3; l61 = l61 + 1) {
			fRec46[l61] = 0.0f;
		}
		for (int l62 = 0; l62 < 3; l62 = l62 + 1) {
			fRec45[l62] = 0.0f;
		}
		for (int l63 = 0; l63 < 3; l63 = l63 + 1) {
			fRec44[l63] = 0.0f;
		}
		for (int l64 = 0; l64 < 3; l64 = l64 + 1) {
			fRec43[l64] = 0.0f;
		}
		for (int l65 = 0; l65 < 3; l65 = l65 + 1) {
			fRec42[l65] = 0.0f;
		}
		for (int l66 = 0; l66 < 2; l66 = l66 + 1) {
			fRec41[l66] = 0.0f;
		}
		for (int l67 = 0; l67 < 3; l67 = l67 + 1) {
			fRec54[l67] = 0.0f;
		}
		for (int l68 = 0; l68 < 3; l68 = l68 + 1) {
			fRec53[l68] = 0.0f;
		}
		for (int l69 = 0; l69 < 3; l69 = l69 + 1) {
			fRec52[l69] = 0.0f;
		}
		for (int l70 = 0; l70 < 3; l70 = l70 + 1) {
			fRec51[l70] = 0.0f;
		}
		for (int l71 = 0; l71 < 3; l71 = l71 + 1) {
			fRec50[l71] = 0.0f;
		}
		for (int l72 = 0; l72 < 3; l72 = l72 + 1) {
			fRec49[l72] = 0.0f;
		}
		for (int l73 = 0; l73 < 2; l73 = l73 + 1) {
			fRec48[l73] = 0.0f;
		}
		for (int l74 = 0; l74 < 3; l74 = l74 + 1) {
			fRec61[l74] = 0.0f;
		}
		for (int l75 = 0; l75 < 3; l75 = l75 + 1) {
			fRec60[l75] = 0.0f;
		}
		for (int l76 = 0; l76 < 3; l76 = l76 + 1) {
			fRec59[l76] = 0.0f;
		}
		for (int l77 = 0; l77 < 3; l77 = l77 + 1) {
			fRec58[l77] = 0.0f;
		}
		for (int l78 = 0; l78 < 3; l78 = l78 + 1) {
			fRec57[l78] = 0.0f;
		}
		for (int l79 = 0; l79 < 3; l79 = l79 + 1) {
			fRec56[l79] = 0.0f;
		}
		for (int l80 = 0; l80 < 2; l80 = l80 + 1) {
			fRec55[l80] = 0.0f;
		}
		for (int l81 = 0; l81 < 3; l81 = l81 + 1) {
			fRec68[l81] = 0.0f;
		}
		for (int l82 = 0; l82 < 3; l82 = l82 + 1) {
			fRec67[l82] = 0.0f;
		}
		for (int l83 = 0; l83 < 3; l83 = l83 + 1) {
			fRec66[l83] = 0.0f;
		}
		for (int l84 = 0; l84 < 3; l84 = l84 + 1) {
			fRec65[l84] = 0.0f;
		}
		for (int l85 = 0; l85 < 3; l85 = l85 + 1) {
			fRec64[l85] = 0.0f;
		}
		for (int l86 = 0; l86 < 3; l86 = l86 + 1) {
			fRec63[l86] = 0.0f;
		}
		for (int l87 = 0; l87 < 2; l87 = l87 + 1) {
			fRec62[l87] = 0.0f;
		}
		for (int l88 = 0; l88 < 3; l88 = l88 + 1) {
			fRec75[l88] = 0.0f;
		}
		for (int l89 = 0; l89 < 3; l89 = l89 + 1) {
			fRec74[l89] = 0.0f;
		}
		for (int l90 = 0; l90 < 3; l90 = l90 + 1) {
			fRec73[l90] = 0.0f;
		}
		for (int l91 = 0; l91 < 3; l91 = l91 + 1) {
			fRec72[l91] = 0.0f;
		}
		for (int l92 = 0; l92 < 3; l92 = l92 + 1) {
			fRec71[l92] = 0.0f;
		}
		for (int l93 = 0; l93 < 3; l93 = l93 + 1) {
			fRec70[l93] = 0.0f;
		}
		for (int l94 = 0; l94 < 2; l94 = l94 + 1) {
			fRec69[l94] = 0.0f;
		}
		for (int l95 = 0; l95 < 3; l95 = l95 + 1) {
			fRec82[l95] = 0.0f;
		}
		for (int l96 = 0; l96 < 3; l96 = l96 + 1) {
			fRec81[l96] = 0.0f;
		}
		for (int l97 = 0; l97 < 3; l97 = l97 + 1) {
			fRec80[l97] = 0.0f;
		}
		for (int l98 = 0; l98 < 3; l98 = l98 + 1) {
			fRec79[l98] = 0.0f;
		}
		for (int l99 = 0; l99 < 3; l99 = l99 + 1) {
			fRec78[l99] = 0.0f;
		}
		for (int l100 = 0; l100 < 3; l100 = l100 + 1) {
			fRec77[l100] = 0.0f;
		}
		for (int l101 = 0; l101 < 2; l101 = l101 + 1) {
			fRec76[l101] = 0.0f;
		}
		for (int l102 = 0; l102 < 3; l102 = l102 + 1) {
			fRec89[l102] = 0.0f;
		}
		for (int l103 = 0; l103 < 3; l103 = l103 + 1) {
			fRec88[l103] = 0.0f;
		}
		for (int l104 = 0; l104 < 3; l104 = l104 + 1) {
			fRec87[l104] = 0.0f;
		}
		for (int l105 = 0; l105 < 3; l105 = l105 + 1) {
			fRec86[l105] = 0.0f;
		}
		for (int l106 = 0; l106 < 3; l106 = l106 + 1) {
			fRec85[l106] = 0.0f;
		}
		for (int l107 = 0; l107 < 3; l107 = l107 + 1) {
			fRec84[l107] = 0.0f;
		}
		for (int l108 = 0; l108 < 2; l108 = l108 + 1) {
			fRec83[l108] = 0.0f;
		}
		for (int l109 = 0; l109 < 3; l109 = l109 + 1) {
			fRec96[l109] = 0.0f;
		}
		for (int l110 = 0; l110 < 3; l110 = l110 + 1) {
			fRec95[l110] = 0.0f;
		}
		for (int l111 = 0; l111 < 3; l111 = l111 + 1) {
			fRec94[l111] = 0.0f;
		}
		for (int l112 = 0; l112 < 3; l112 = l112 + 1) {
			fRec93[l112] = 0.0f;
		}
		for (int l113 = 0; l113 < 3; l113 = l113 + 1) {
			fRec92[l113] = 0.0f;
		}
		for (int l114 = 0; l114 < 3; l114 = l114 + 1) {
			fRec91[l114] = 0.0f;
		}
		for (int l115 = 0; l115 < 2; l115 = l115 + 1) {
			fRec90[l115] = 0.0f;
		}
		for (int l116 = 0; l116 < 3; l116 = l116 + 1) {
			fRec103[l116] = 0.0f;
		}
		for (int l117 = 0; l117 < 3; l117 = l117 + 1) {
			fRec102[l117] = 0.0f;
		}
		for (int l118 = 0; l118 < 3; l118 = l118 + 1) {
			fRec101[l118] = 0.0f;
		}
		for (int l119 = 0; l119 < 3; l119 = l119 + 1) {
			fRec100[l119] = 0.0f;
		}
		for (int l120 = 0; l120 < 3; l120 = l120 + 1) {
			fRec99[l120] = 0.0f;
		}
		for (int l121 = 0; l121 < 3; l121 = l121 + 1) {
			fRec98[l121] = 0.0f;
		}
		for (int l122 = 0; l122 < 2; l122 = l122 + 1) {
			fRec97[l122] = 0.0f;
		}
		for (int l123 = 0; l123 < 3; l123 = l123 + 1) {
			fRec110[l123] = 0.0f;
		}
		for (int l124 = 0; l124 < 3; l124 = l124 + 1) {
			fRec109[l124] = 0.0f;
		}
		for (int l125 = 0; l125 < 3; l125 = l125 + 1) {
			fRec108[l125] = 0.0f;
		}
		for (int l126 = 0; l126 < 3; l126 = l126 + 1) {
			fRec107[l126] = 0.0f;
		}
		for (int l127 = 0; l127 < 3; l127 = l127 + 1) {
			fRec106[l127] = 0.0f;
		}
		for (int l128 = 0; l128 < 3; l128 = l128 + 1) {
			fRec105[l128] = 0.0f;
		}
		for (int l129 = 0; l129 < 2; l129 = l129 + 1) {
			fRec104[l129] = 0.0f;
		}
		for (int l130 = 0; l130 < 3; l130 = l130 + 1) {
			fRec117[l130] = 0.0f;
		}
		for (int l131 = 0; l131 < 3; l131 = l131 + 1) {
			fRec116[l131] = 0.0f;
		}
		for (int l132 = 0; l132 < 3; l132 = l132 + 1) {
			fRec115[l132] = 0.0f;
		}
		for (int l133 = 0; l133 < 3; l133 = l133 + 1) {
			fRec114[l133] = 0.0f;
		}
		for (int l134 = 0; l134 < 3; l134 = l134 + 1) {
			fRec113[l134] = 0.0f;
		}
		for (int l135 = 0; l135 < 3; l135 = l135 + 1) {
			fRec112[l135] = 0.0f;
		}
		for (int l136 = 0; l136 < 2; l136 = l136 + 1) {
			fRec111[l136] = 0.0f;
		}
		for (int l137 = 0; l137 < 3; l137 = l137 + 1) {
			fRec121[l137] = 0.0f;
		}
		for (int l138 = 0; l138 < 3; l138 = l138 + 1) {
			fRec120[l138] = 0.0f;
		}
		for (int l139 = 0; l139 < 3; l139 = l139 + 1) {
			fRec119[l139] = 0.0f;
		}
		for (int l140 = 0; l140 < 2; l140 = l140 + 1) {
			fRec118[l140] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("gate_compressor");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("sawtooth");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fVslider0, "1", "");
		ui_interface->declare(&fVslider0, "style", "knob");
		ui_interface->declare(&fVslider0, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fVslider0, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fVslider0, FAUSTFLOAT(-2e+01f), FAUSTFLOAT(-1.2e+02f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fVslider2, "2", "");
		ui_interface->declare(&fVslider2, "style", "knob");
		ui_interface->declare(&fVslider2, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fVslider2, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fVslider2, FAUSTFLOAT(49.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider3, "3", "");
		ui_interface->declare(&fVslider3, "style", "knob");
		ui_interface->declare(&fVslider3, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fVslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fVslider3, FAUSTFLOAT(-0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider4, "4", "");
		ui_interface->declare(&fVslider4, "style", "knob");
		ui_interface->declare(&fVslider4, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fVslider4, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fVslider4, FAUSTFLOAT(0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider1, "5", "");
		ui_interface->declare(&fVslider1, "scale", "log");
		ui_interface->declare(&fVslider1, "style", "knob");
		ui_interface->declare(&fVslider1, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fVslider1, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fVslider1, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fEntry0, "6", "");
		ui_interface->declare(&fEntry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fEntry0, FAUSTFLOAT(2.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(4.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fCheckbox3, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fCheckbox3);
		ui_interface->declare(&fCheckbox4, "1", "");
		ui_interface->declare(&fCheckbox4, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fCheckbox4);
		ui_interface->declare(&fCheckbox2, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fCheckbox2);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("gate");
		ui_interface->declare(0, "tooltip", "Reference: http://en.wikipedia.org/wiki/Noise_gate");
		ui_interface->openVerticalBox("GATE");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fCheckbox1, "0", "");
		ui_interface->declare(&fCheckbox1, "tooltip", "When this is checked, the gate has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox1);
		ui_interface->declare(&fHbargraph0, "1", "");
		ui_interface->declare(&fHbargraph0, "tooltip", "Current gain of the gate in dB");
		ui_interface->declare(&fHbargraph0, "unit", "dB");
		ui_interface->addHorizontalBargraph("Gate Gain", &fHbargraph0, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fHslider5, "1", "");
		ui_interface->declare(&fHslider5, "style", "knob");
		ui_interface->declare(&fHslider5, "tooltip", "When the signal level falls below the Threshold (expressed in dB), the signal is muted");
		ui_interface->declare(&fHslider5, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fHslider5, FAUSTFLOAT(-3e+01f), FAUSTFLOAT(-1.2e+02f), FAUSTFLOAT(0.0f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider3, "2", "");
		ui_interface->declare(&fHslider3, "scale", "log");
		ui_interface->declare(&fHslider3, "style", "knob");
		ui_interface->declare(&fHslider3, "tooltip", "Time constant in MICROseconds (1/e smoothing time) for the gate gain to go (exponentially) from 0 (muted) to 1 (unmuted)");
		ui_interface->declare(&fHslider3, "unit", "us");
		ui_interface->addHorizontalSlider("Attack", &fHslider3, FAUSTFLOAT(1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider6, "3", "");
		ui_interface->declare(&fHslider6, "scale", "log");
		ui_interface->declare(&fHslider6, "style", "knob");
		ui_interface->declare(&fHslider6, "tooltip", "Time in ms to keep the gate open (no muting) after the signal level falls below the Threshold");
		ui_interface->declare(&fHslider6, "unit", "ms");
		ui_interface->addHorizontalSlider("Hold", &fHslider6, FAUSTFLOAT(2e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider4, "4", "");
		ui_interface->declare(&fHslider4, "scale", "log");
		ui_interface->declare(&fHslider4, "style", "knob");
		ui_interface->declare(&fHslider4, "tooltip", "Time constant in ms (1/e smoothing time) for the gain to go (exponentially) from 1 (unmuted) to 0 (muted)");
		ui_interface->declare(&fHslider4, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fHslider4, FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("compressor");
		ui_interface->declare(0, "tooltip", "Reference: http://en.wikipedia.org/wiki/Dynamic_range_compression");
		ui_interface->openVerticalBox("COMPRESSOR");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fCheckbox0, "0", "");
		ui_interface->declare(&fCheckbox0, "tooltip", "When this is checked, the compressor has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox0);
		ui_interface->declare(&fHbargraph1, "1", "");
		ui_interface->declare(&fHbargraph1, "tooltip", "Current gain of the compressor in dB");
		ui_interface->declare(&fHbargraph1, "unit", "dB");
		ui_interface->addHorizontalBargraph("Compressor Gain", &fHbargraph1, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("Compression Control");
		ui_interface->declare(&fHslider8, "0", "");
		ui_interface->declare(&fHslider8, "style", "knob");
		ui_interface->declare(&fHslider8, "tooltip", "A compression Ratio of N means that for each N dB increase in input signal level above Threshold, the output level goes up 1 dB");
		ui_interface->addHorizontalSlider("Ratio", &fHslider8, FAUSTFLOAT(5.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider10, "1", "");
		ui_interface->declare(&fHslider10, "style", "knob");
		ui_interface->declare(&fHslider10, "tooltip", "When the signal level exceeds the Threshold (in dB), its level is compressed according to the Ratio");
		ui_interface->declare(&fHslider10, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fHslider10, FAUSTFLOAT(-3e+01f), FAUSTFLOAT(-1e+02f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openHorizontalBox("Compression Response");
		ui_interface->declare(&fHslider7, "1", "");
		ui_interface->declare(&fHslider7, "scale", "log");
		ui_interface->declare(&fHslider7, "style", "knob");
		ui_interface->declare(&fHslider7, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new lower target level (the compression `kicking in')");
		ui_interface->declare(&fHslider7, "unit", "ms");
		ui_interface->addHorizontalSlider("Attack", &fHslider7, FAUSTFLOAT(5e+01f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider9, "2", "");
		ui_interface->declare(&fHslider9, "scale", "log");
		ui_interface->declare(&fHslider9, "style", "knob");
		ui_interface->declare(&fHslider9, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach (exponentially) a new higher target level (the compression 'releasing')");
		ui_interface->declare(&fHslider9, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fHslider9, FAUSTFLOAT(5e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+03f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(&fHslider2, "5", "");
		ui_interface->declare(&fHslider2, "tooltip", "The compressed-signal output level is increased by this amount (in dB) to make up for the level lost due to compression");
		ui_interface->declare(&fHslider2, "unit", "dB");
		ui_interface->addHorizontalSlider("Makeup Gain", &fHslider2, FAUSTFLOAT(4e+01f), FAUSTFLOAT(-96.0f), FAUSTFLOAT(96.0f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("spectral");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fVbargraph14, "0", "");
		ui_interface->declare(&fVbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fVbargraph14, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph13, "1", "");
		ui_interface->declare(&fVbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fVbargraph13, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph12, "2", "");
		ui_interface->declare(&fVbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fVbargraph12, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph11, "3", "");
		ui_interface->declare(&fVbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fVbargraph11, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph10, "4", "");
		ui_interface->declare(&fVbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fVbargraph10, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph9, "5", "");
		ui_interface->declare(&fVbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fVbargraph9, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph8, "6", "");
		ui_interface->declare(&fVbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fVbargraph8, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph7, "7", "");
		ui_interface->declare(&fVbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fVbargraph7, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph6, "8", "");
		ui_interface->declare(&fVbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fVbargraph6, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph5, "9", "");
		ui_interface->declare(&fVbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fVbargraph5, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph4, "10", "");
		ui_interface->declare(&fVbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fVbargraph4, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph3, "11", "");
		ui_interface->declare(&fVbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fVbargraph3, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph2, "12", "");
		ui_interface->declare(&fVbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fVbargraph2, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph1, "13", "");
		ui_interface->declare(&fVbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fVbargraph1, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph0, "14", "");
		ui_interface->declare(&fVbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fVbargraph0, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fHslider1, "0", "");
		ui_interface->declare(&fHslider1, "scale", "log");
		ui_interface->declare(&fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fHslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fHslider1, FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider0, "1", "");
		ui_interface->declare(&fHslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fHslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fHslider0, FAUSTFLOAT(5e+01f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fHslider1);
		float fSlow2 = (((0.001f * fSlow1) > 0.0f) ? std::exp(-(fConst1 / fSlow1)) : 0.0f);
		int iSlow3 = int(float(fCheckbox0));
		float fSlow4 = std::pow(1e+01f, 0.05f * float(fHslider2));
		int iSlow5 = int(float(fCheckbox1));
		float fSlow6 = std::max<float>(fConst14, 1e-06f * float(fHslider3));
		float fSlow7 = std::max<float>(fConst14, 0.001f * float(fHslider4));
		float fSlow8 = std::min<float>(fSlow6, fSlow7);
		float fSlow9 = ((fSlow8 > 0.0f) ? std::exp(-(fConst14 / fSlow8)) : 0.0f);
		float fSlow10 = 1.0f - fSlow9;
		float fSlow11 = 0.001f * std::pow(1e+01f, 0.05f * float(fVslider0));
		int iSlow12 = int(float(fCheckbox2));
		int iSlow13 = int(float(fCheckbox3));
		int iSlow14 = int(float(fEntry0) + -1.0f);
		int iSlow15 = iSlow14 >= 2;
		int iSlow16 = iSlow14 >= 1;
		float fSlow17 = float(fVslider1);
		float fSlow18 = ((fSlow17 > 0.0f) ? std::exp(-(fConst14 / fSlow17)) : 0.0f);
		float fSlow19 = 4.4e+02f * std::pow(2.0f, 0.083333336f * (float(fVslider2) + -49.0f)) * (1.0f - fSlow18);
		int iSlow20 = iSlow14 >= 3;
		float fSlow21 = 0.01f * float(fVslider3) + 1.0f;
		float fSlow22 = 0.01f * float(fVslider4) + 1.0f;
		int iSlow23 = int(float(fCheckbox4));
		float fSlow24 = std::pow(1e+01f, 0.05f * float(fHslider5));
		int iSlow25 = int(fConst0 * std::max<float>(fConst14, 0.001f * float(fHslider6)));
		float fSlow26 = ((fSlow6 > 0.0f) ? std::exp(-(fConst14 / fSlow6)) : 0.0f);
		float fSlow27 = ((fSlow7 > 0.0f) ? std::exp(-(fConst14 / fSlow7)) : 0.0f);
		float fSlow28 = std::max<float>(fConst14, 0.001f * float(fHslider7));
		float fSlow29 = (((0.5f * fSlow28) > 0.0f) ? std::exp(-(fConst18 / fSlow28)) : 0.0f);
		float fSlow30 = 1.0f / float(fHslider8) + -1.0f;
		float fSlow31 = ((fSlow28 > 0.0f) ? std::exp(-(fConst14 / fSlow28)) : 0.0f);
		float fSlow32 = std::max<float>(fConst14, 0.001f * float(fHslider9));
		float fSlow33 = ((fSlow32 > 0.0f) ? std::exp(-(fConst14 / fSlow32)) : 0.0f);
		float fSlow34 = float(fHslider10);
		float fSlow35 = 1.0f - fSlow29;
		float fSlow36 = 1.0f - fSlow2;
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iVec0[0] = 1;
			fRec8[0] = fSlow11 + 0.999f * fRec8[1];
			fRec10[0] = fRec10[1] * fSlow18 + fSlow19;
			float fTemp0 = std::max<float>(2e+01f, std::fabs(fRec10[0]));
			float fTemp1 = fRec9[1] + fConst14 * fTemp0;
			fRec9[0] = fTemp1 - std::floor(fTemp1);
			float fTemp2 = 2.0f * fRec9[0];
			float fTemp3 = fTemp2 + -1.0f;
			float fTemp4 = float(iVec0[1]);
			float fTemp5 = mydsp_faustpower2_f(fTemp3);
			fVec1[0] = fTemp5;
			float fTemp6 = float(iVec0[2]);
			float fTemp7 = mydsp_faustpower3_f(fTemp3);
			fVec2[0] = fTemp7 + (1.0f - fTemp2);
			float fTemp8 = (fTemp7 + (1.0f - (fTemp2 + fVec2[1]))) / fTemp0;
			fVec3[0] = fTemp8;
			float fTemp9 = float(iVec0[3]);
			float fTemp10 = fTemp5 * (fTemp5 + -2.0f);
			fVec4[0] = fTemp10;
			float fTemp11 = (fTemp10 - fVec4[1]) / fTemp0;
			fVec5[0] = fTemp11;
			float fTemp12 = (fTemp11 - fVec5[1]) / fTemp0;
			fVec6[0] = fTemp12;
			float fTemp13 = std::max<float>(2e+01f, std::fabs(fSlow21 * fRec10[0]));
			float fTemp14 = fRec11[1] + fConst14 * fTemp13;
			fRec11[0] = fTemp14 - std::floor(fTemp14);
			float fTemp15 = 2.0f * fRec11[0];
			float fTemp16 = fTemp15 + -1.0f;
			float fTemp17 = mydsp_faustpower2_f(fTemp16);
			fVec7[0] = fTemp17;
			float fTemp18 = mydsp_faustpower3_f(fTemp16);
			fVec8[0] = fTemp18 + (1.0f - fTemp15);
			float fTemp19 = (fTemp18 + (1.0f - (fTemp15 + fVec8[1]))) / fTemp13;
			fVec9[0] = fTemp19;
			float fTemp20 = fTemp17 * (fTemp17 + -2.0f);
			fVec10[0] = fTemp20;
			float fTemp21 = (fTemp20 - fVec10[1]) / fTemp13;
			fVec11[0] = fTemp21;
			float fTemp22 = (fTemp21 - fVec11[1]) / fTemp13;
			fVec12[0] = fTemp22;
			float fTemp23 = std::max<float>(2e+01f, std::fabs(fSlow22 * fRec10[0]));
			float fTemp24 = fRec12[1] + fConst14 * fTemp23;
			fRec12[0] = fTemp24 - std::floor(fTemp24);
			float fTemp25 = 2.0f * fRec12[0];
			float fTemp26 = fTemp25 + -1.0f;
			float fTemp27 = mydsp_faustpower2_f(fTemp26);
			fVec13[0] = fTemp27;
			float fTemp28 = mydsp_faustpower3_f(fTemp26);
			fVec14[0] = fTemp28 + (1.0f - fTemp25);
			float fTemp29 = (fTemp28 + (1.0f - (fTemp25 + fVec14[1]))) / fTemp23;
			fVec15[0] = fTemp29;
			float fTemp30 = fTemp27 * (fTemp27 + -2.0f);
			fVec16[0] = fTemp30;
			float fTemp31 = (fTemp30 - fVec16[1]) / fTemp23;
			fVec17[0] = fTemp31;
			float fTemp32 = (fTemp31 - fVec17[1]) / fTemp23;
			fVec18[0] = fTemp32;
			iRec13[0] = 1103515245 * iRec13[1] + 12345;
			float fTemp33 = 4.656613e-10f * float(iRec13[0]);
			fRec14[0] = 0.5221894f * fRec14[3] + fTemp33 + 2.494956f * fRec14[1] - 2.0172658f * fRec14[2];
			float fTemp34 = fRec8[0] * ((iSlow12) ? float(input0[i0]) : ((iSlow13) ? ((iSlow23) ? 0.049922034f * fRec14[0] + 0.0506127f * fRec14[2] - (0.095993534f * fRec14[1] + 0.004408786f * fRec14[3]) : fTemp33) : 0.33333334f * fRec8[0] * (((iSlow15) ? ((iSlow20) ? fConst17 * (fTemp9 * (fTemp12 - fVec6[1]) / fTemp0) : fConst16 * (fTemp6 * (fTemp8 - fVec3[1]) / fTemp0)) : ((iSlow16) ? fConst15 * (fTemp4 * (fTemp5 - fVec1[1]) / fTemp0) : fTemp3)) + ((iSlow15) ? ((iSlow20) ? fConst17 * (fTemp9 * (fTemp22 - fVec12[1]) / fTemp13) : fConst16 * (fTemp6 * (fTemp19 - fVec9[1]) / fTemp13)) : ((iSlow16) ? fConst15 * (fTemp4 * (fTemp17 - fVec7[1]) / fTemp13) : fTemp16)) + ((iSlow15) ? ((iSlow20) ? fConst17 * (fTemp9 * (fTemp32 - fVec18[1]) / fTemp23) : fConst16 * (fTemp6 * (fTemp29 - fVec15[1]) / fTemp23)) : ((iSlow16) ? fConst15 * (fTemp4 * (fTemp27 - fVec13[1]) / fTemp23) : fTemp26)))));
			float fTemp35 = ((iSlow5) ? 0.0f : fTemp34);
			float fTemp36 = std::fabs(fTemp35);
			fRec18[0] = fRec18[1] * fSlow9 + std::fabs(2.0f * fTemp36) * fSlow10;
			float fRec17 = fRec18[0];
			int iTemp37 = fRec17 > fSlow24;
			iVec19[0] = iTemp37;
			iRec19[0] = std::max<int>(iSlow25 * (iTemp37 < iVec19[1]), iRec19[1] + -1);
			float fTemp38 = std::fabs(std::max<float>(float(iTemp37), float(iRec19[0] > 0)));
			float fTemp39 = ((fRec15[1] > fTemp38) ? fSlow27 : fSlow26);
			fRec16[0] = fRec16[1] * fTemp39 + fTemp38 * (1.0f - fTemp39);
			fRec15[0] = fRec16[0];
			fHbargraph0 = FAUSTFLOAT(2e+01f * std::log10(fRec15[0]));
			float fTemp40 = fTemp35;
			fRec7[0] = fRec7[1] * fSlow9 + fSlow10 * std::fabs(fTemp36 + std::fabs(fTemp40));
			float fRec6 = fRec7[0];
			int iTemp41 = fRec6 > fSlow24;
			iVec20[0] = iTemp41;
			iRec20[0] = std::max<int>(iSlow25 * (iTemp41 < iVec20[1]), iRec20[1] + -1);
			float fTemp42 = std::fabs(std::max<float>(float(iTemp41), float(iRec20[0] > 0)));
			float fTemp43 = ((fRec4[1] > fTemp42) ? fSlow27 : fSlow26);
			fRec5[0] = fRec5[1] * fTemp43 + fTemp42 * (1.0f - fTemp43);
			fRec4[0] = fRec5[0];
			float fTemp44 = ((iSlow5) ? fTemp34 : fRec4[0] * fTemp40);
			float fTemp45 = ((iSlow3) ? 0.0f : fTemp44);
			float fTemp46 = ((iSlow5) ? fTemp34 : fRec4[0] * fTemp35);
			float fTemp47 = ((iSlow3) ? 0.0f : fTemp46);
			float fTemp48 = std::fabs(std::fabs(fTemp45) + std::fabs(fTemp47));
			float fTemp49 = ((fRec22[1] > fTemp48) ? fSlow33 : fSlow31);
			fRec23[0] = fRec23[1] * fTemp49 + fTemp48 * (1.0f - fTemp49);
			fRec22[0] = fRec23[0];
			fRec21[0] = fRec21[1] * fSlow29 + fSlow30 * std::max<float>(2e+01f * std::log10(fRec22[0]) - fSlow34, 0.0f) * fSlow35;
			float fTemp50 = std::pow(1e+01f, 0.05f * fRec21[0]);
			float fTemp51 = fTemp45 * fTemp50;
			float fTemp52 = fTemp47 * fTemp50;
			float fTemp53 = std::fabs(std::fabs(fTemp51) + std::fabs(fTemp52));
			float fTemp54 = ((fRec25[1] > fTemp53) ? fSlow33 : fSlow31);
			fRec26[0] = fRec26[1] * fTemp54 + fTemp53 * (1.0f - fTemp54);
			fRec25[0] = fRec26[0];
			fRec24[0] = fSlow29 * fRec24[1] + fSlow30 * std::max<float>(2e+01f * std::log10(fRec25[0]) - fSlow34, 0.0f) * fSlow35;
			fHbargraph1 = FAUSTFLOAT(2e+01f * std::log10(std::pow(1e+01f, 0.05f * fRec24[0])));
			float fTemp55 = ((iSlow3) ? fTemp44 : fSlow4 * fTemp51) + ((iSlow3) ? fTemp46 : fSlow4 * fTemp52);
			fRec3[0] = fTemp55 - fConst11 * (fConst19 * fRec3[2] + fConst21 * fRec3[1]);
			fRec2[0] = fConst11 * (fConst13 * fRec3[0] + fConst22 * fRec3[1] + fConst13 * fRec3[2]) - fConst8 * (fConst23 * fRec2[2] + fConst24 * fRec2[1]);
			fRec1[0] = fConst8 * (fConst10 * fRec2[0] + fConst25 * fRec2[1] + fConst10 * fRec2[2]) - fConst4 * (fConst26 * fRec1[2] + fConst27 * fRec1[1]);
			fRec0[0] = fRec0[1] * fSlow2 + std::fabs(fConst4 * (fConst7 * fRec1[0] + fConst28 * fRec1[1] + fConst7 * fRec1[2])) * fSlow36;
			fVbargraph0 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec0[0]));
			fRec33[0] = fTemp55 - fConst45 * (fConst48 * fRec33[2] + fConst49 * fRec33[1]);
			fRec32[0] = fConst45 * (fConst47 * fRec33[0] + fConst50 * fRec33[1] + fConst47 * fRec33[2]) - fConst43 * (fConst51 * fRec32[2] + fConst52 * fRec32[1]);
			fRec31[0] = fConst43 * (fConst44 * fRec32[0] + fConst53 * fRec32[1] + fConst44 * fRec32[2]) - fConst41 * (fConst54 * fRec31[2] + fConst55 * fRec31[1]);
			float fTemp56 = fConst41 * (fConst42 * fRec31[0] + fConst56 * fRec31[1] + fConst42 * fRec31[2]);
			fRec30[0] = fTemp56 - fConst38 * (fConst57 * fRec30[2] + fConst59 * fRec30[1]);
			fRec29[0] = fConst38 * (fConst40 * fRec30[0] + fConst60 * fRec30[1] + fConst40 * fRec30[2]) - fConst35 * (fConst61 * fRec29[2] + fConst62 * fRec29[1]);
			fRec28[0] = fConst35 * (fConst37 * fRec29[0] + fConst63 * fRec29[1] + fConst37 * fRec29[2]) - fConst31 * (fConst64 * fRec28[2] + fConst65 * fRec28[1]);
			fRec27[0] = fSlow2 * fRec27[1] + fSlow36 * std::fabs(fConst31 * (fConst34 * fRec28[0] + fConst66 * fRec28[1] + fConst34 * fRec28[2]));
			fVbargraph1 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec27[0]));
			fRec40[0] = fTemp56 - fConst83 * (fConst86 * fRec40[2] + fConst87 * fRec40[1]);
			fRec39[0] = fConst83 * (fConst85 * fRec40[0] + fConst88 * fRec40[1] + fConst85 * fRec40[2]) - fConst81 * (fConst89 * fRec39[2] + fConst90 * fRec39[1]);
			fRec38[0] = fConst81 * (fConst82 * fRec39[0] + fConst91 * fRec39[1] + fConst82 * fRec39[2]) - fConst79 * (fConst92 * fRec38[2] + fConst93 * fRec38[1]);
			float fTemp57 = fConst79 * (fConst80 * fRec38[0] + fConst94 * fRec38[1] + fConst80 * fRec38[2]);
			fRec37[0] = fTemp57 - fConst76 * (fConst95 * fRec37[2] + fConst97 * fRec37[1]);
			fRec36[0] = fConst76 * (fConst78 * fRec37[0] + fConst98 * fRec37[1] + fConst78 * fRec37[2]) - fConst73 * (fConst99 * fRec36[2] + fConst100 * fRec36[1]);
			fRec35[0] = fConst73 * (fConst75 * fRec36[0] + fConst101 * fRec36[1] + fConst75 * fRec36[2]) - fConst69 * (fConst102 * fRec35[2] + fConst103 * fRec35[1]);
			fRec34[0] = fSlow2 * fRec34[1] + fSlow36 * std::fabs(fConst69 * (fConst72 * fRec35[0] + fConst104 * fRec35[1] + fConst72 * fRec35[2]));
			fVbargraph2 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec34[0]));
			fRec47[0] = fTemp57 - fConst121 * (fConst124 * fRec47[2] + fConst125 * fRec47[1]);
			fRec46[0] = fConst121 * (fConst123 * fRec47[0] + fConst126 * fRec47[1] + fConst123 * fRec47[2]) - fConst119 * (fConst127 * fRec46[2] + fConst128 * fRec46[1]);
			fRec45[0] = fConst119 * (fConst120 * fRec46[0] + fConst129 * fRec46[1] + fConst120 * fRec46[2]) - fConst117 * (fConst130 * fRec45[2] + fConst131 * fRec45[1]);
			float fTemp58 = fConst117 * (fConst118 * fRec45[0] + fConst132 * fRec45[1] + fConst118 * fRec45[2]);
			fRec44[0] = fTemp58 - fConst114 * (fConst133 * fRec44[2] + fConst135 * fRec44[1]);
			fRec43[0] = fConst114 * (fConst116 * fRec44[0] + fConst136 * fRec44[1] + fConst116 * fRec44[2]) - fConst111 * (fConst137 * fRec43[2] + fConst138 * fRec43[1]);
			fRec42[0] = fConst111 * (fConst113 * fRec43[0] + fConst139 * fRec43[1] + fConst113 * fRec43[2]) - fConst107 * (fConst140 * fRec42[2] + fConst141 * fRec42[1]);
			fRec41[0] = fSlow2 * fRec41[1] + fSlow36 * std::fabs(fConst107 * (fConst110 * fRec42[0] + fConst142 * fRec42[1] + fConst110 * fRec42[2]));
			fVbargraph3 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec41[0]));
			fRec54[0] = fTemp58 - fConst159 * (fConst162 * fRec54[2] + fConst163 * fRec54[1]);
			fRec53[0] = fConst159 * (fConst161 * fRec54[0] + fConst164 * fRec54[1] + fConst161 * fRec54[2]) - fConst157 * (fConst165 * fRec53[2] + fConst166 * fRec53[1]);
			fRec52[0] = fConst157 * (fConst158 * fRec53[0] + fConst167 * fRec53[1] + fConst158 * fRec53[2]) - fConst155 * (fConst168 * fRec52[2] + fConst169 * fRec52[1]);
			float fTemp59 = fConst155 * (fConst156 * fRec52[0] + fConst170 * fRec52[1] + fConst156 * fRec52[2]);
			fRec51[0] = fTemp59 - fConst152 * (fConst171 * fRec51[2] + fConst173 * fRec51[1]);
			fRec50[0] = fConst152 * (fConst154 * fRec51[0] + fConst174 * fRec51[1] + fConst154 * fRec51[2]) - fConst149 * (fConst175 * fRec50[2] + fConst176 * fRec50[1]);
			fRec49[0] = fConst149 * (fConst151 * fRec50[0] + fConst177 * fRec50[1] + fConst151 * fRec50[2]) - fConst145 * (fConst178 * fRec49[2] + fConst179 * fRec49[1]);
			fRec48[0] = fSlow2 * fRec48[1] + fSlow36 * std::fabs(fConst145 * (fConst148 * fRec49[0] + fConst180 * fRec49[1] + fConst148 * fRec49[2]));
			fVbargraph4 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec48[0]));
			fRec61[0] = fTemp59 - fConst197 * (fConst200 * fRec61[2] + fConst201 * fRec61[1]);
			fRec60[0] = fConst197 * (fConst199 * fRec61[0] + fConst202 * fRec61[1] + fConst199 * fRec61[2]) - fConst195 * (fConst203 * fRec60[2] + fConst204 * fRec60[1]);
			fRec59[0] = fConst195 * (fConst196 * fRec60[0] + fConst205 * fRec60[1] + fConst196 * fRec60[2]) - fConst193 * (fConst206 * fRec59[2] + fConst207 * fRec59[1]);
			float fTemp60 = fConst193 * (fConst194 * fRec59[0] + fConst208 * fRec59[1] + fConst194 * fRec59[2]);
			fRec58[0] = fTemp60 - fConst190 * (fConst209 * fRec58[2] + fConst211 * fRec58[1]);
			fRec57[0] = fConst190 * (fConst192 * fRec58[0] + fConst212 * fRec58[1] + fConst192 * fRec58[2]) - fConst187 * (fConst213 * fRec57[2] + fConst214 * fRec57[1]);
			fRec56[0] = fConst187 * (fConst189 * fRec57[0] + fConst215 * fRec57[1] + fConst189 * fRec57[2]) - fConst183 * (fConst216 * fRec56[2] + fConst217 * fRec56[1]);
			fRec55[0] = fSlow2 * fRec55[1] + fSlow36 * std::fabs(fConst183 * (fConst186 * fRec56[0] + fConst218 * fRec56[1] + fConst186 * fRec56[2]));
			fVbargraph5 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec55[0]));
			fRec68[0] = fTemp60 - fConst235 * (fConst238 * fRec68[2] + fConst239 * fRec68[1]);
			fRec67[0] = fConst235 * (fConst237 * fRec68[0] + fConst240 * fRec68[1] + fConst237 * fRec68[2]) - fConst233 * (fConst241 * fRec67[2] + fConst242 * fRec67[1]);
			fRec66[0] = fConst233 * (fConst234 * fRec67[0] + fConst243 * fRec67[1] + fConst234 * fRec67[2]) - fConst231 * (fConst244 * fRec66[2] + fConst245 * fRec66[1]);
			float fTemp61 = fConst231 * (fConst232 * fRec66[0] + fConst246 * fRec66[1] + fConst232 * fRec66[2]);
			fRec65[0] = fTemp61 - fConst228 * (fConst247 * fRec65[2] + fConst249 * fRec65[1]);
			fRec64[0] = fConst228 * (fConst230 * fRec65[0] + fConst250 * fRec65[1] + fConst230 * fRec65[2]) - fConst225 * (fConst251 * fRec64[2] + fConst252 * fRec64[1]);
			fRec63[0] = fConst225 * (fConst227 * fRec64[0] + fConst253 * fRec64[1] + fConst227 * fRec64[2]) - fConst221 * (fConst254 * fRec63[2] + fConst255 * fRec63[1]);
			fRec62[0] = fSlow2 * fRec62[1] + fSlow36 * std::fabs(fConst221 * (fConst224 * fRec63[0] + fConst256 * fRec63[1] + fConst224 * fRec63[2]));
			fVbargraph6 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec62[0]));
			fRec75[0] = fTemp61 - fConst273 * (fConst276 * fRec75[2] + fConst277 * fRec75[1]);
			fRec74[0] = fConst273 * (fConst275 * fRec75[0] + fConst278 * fRec75[1] + fConst275 * fRec75[2]) - fConst271 * (fConst279 * fRec74[2] + fConst280 * fRec74[1]);
			fRec73[0] = fConst271 * (fConst272 * fRec74[0] + fConst281 * fRec74[1] + fConst272 * fRec74[2]) - fConst269 * (fConst282 * fRec73[2] + fConst283 * fRec73[1]);
			float fTemp62 = fConst269 * (fConst270 * fRec73[0] + fConst284 * fRec73[1] + fConst270 * fRec73[2]);
			fRec72[0] = fTemp62 - fConst266 * (fConst285 * fRec72[2] + fConst287 * fRec72[1]);
			fRec71[0] = fConst266 * (fConst268 * fRec72[0] + fConst288 * fRec72[1] + fConst268 * fRec72[2]) - fConst263 * (fConst289 * fRec71[2] + fConst290 * fRec71[1]);
			fRec70[0] = fConst263 * (fConst265 * fRec71[0] + fConst291 * fRec71[1] + fConst265 * fRec71[2]) - fConst259 * (fConst292 * fRec70[2] + fConst293 * fRec70[1]);
			fRec69[0] = fSlow2 * fRec69[1] + fSlow36 * std::fabs(fConst259 * (fConst262 * fRec70[0] + fConst294 * fRec70[1] + fConst262 * fRec70[2]));
			fVbargraph7 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec69[0]));
			fRec82[0] = fTemp62 - fConst311 * (fConst314 * fRec82[2] + fConst315 * fRec82[1]);
			fRec81[0] = fConst311 * (fConst313 * fRec82[0] + fConst316 * fRec82[1] + fConst313 * fRec82[2]) - fConst309 * (fConst317 * fRec81[2] + fConst318 * fRec81[1]);
			fRec80[0] = fConst309 * (fConst310 * fRec81[0] + fConst319 * fRec81[1] + fConst310 * fRec81[2]) - fConst307 * (fConst320 * fRec80[2] + fConst321 * fRec80[1]);
			float fTemp63 = fConst307 * (fConst308 * fRec80[0] + fConst322 * fRec80[1] + fConst308 * fRec80[2]);
			fRec79[0] = fTemp63 - fConst304 * (fConst323 * fRec79[2] + fConst325 * fRec79[1]);
			fRec78[0] = fConst304 * (fConst306 * fRec79[0] + fConst326 * fRec79[1] + fConst306 * fRec79[2]) - fConst301 * (fConst327 * fRec78[2] + fConst328 * fRec78[1]);
			fRec77[0] = fConst301 * (fConst303 * fRec78[0] + fConst329 * fRec78[1] + fConst303 * fRec78[2]) - fConst297 * (fConst330 * fRec77[2] + fConst331 * fRec77[1]);
			fRec76[0] = fSlow2 * fRec76[1] + fSlow36 * std::fabs(fConst297 * (fConst300 * fRec77[0] + fConst332 * fRec77[1] + fConst300 * fRec77[2]));
			fVbargraph8 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec76[0]));
			fRec89[0] = fTemp63 - fConst349 * (fConst352 * fRec89[2] + fConst353 * fRec89[1]);
			fRec88[0] = fConst349 * (fConst351 * fRec89[0] + fConst354 * fRec89[1] + fConst351 * fRec89[2]) - fConst347 * (fConst355 * fRec88[2] + fConst356 * fRec88[1]);
			fRec87[0] = fConst347 * (fConst348 * fRec88[0] + fConst357 * fRec88[1] + fConst348 * fRec88[2]) - fConst345 * (fConst358 * fRec87[2] + fConst359 * fRec87[1]);
			float fTemp64 = fConst345 * (fConst346 * fRec87[0] + fConst360 * fRec87[1] + fConst346 * fRec87[2]);
			fRec86[0] = fTemp64 - fConst342 * (fConst361 * fRec86[2] + fConst363 * fRec86[1]);
			fRec85[0] = fConst342 * (fConst344 * fRec86[0] + fConst364 * fRec86[1] + fConst344 * fRec86[2]) - fConst339 * (fConst365 * fRec85[2] + fConst366 * fRec85[1]);
			fRec84[0] = fConst339 * (fConst341 * fRec85[0] + fConst367 * fRec85[1] + fConst341 * fRec85[2]) - fConst335 * (fConst368 * fRec84[2] + fConst369 * fRec84[1]);
			fRec83[0] = fSlow2 * fRec83[1] + fSlow36 * std::fabs(fConst335 * (fConst338 * fRec84[0] + fConst370 * fRec84[1] + fConst338 * fRec84[2]));
			fVbargraph9 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec83[0]));
			fRec96[0] = fTemp64 - fConst387 * (fConst390 * fRec96[2] + fConst391 * fRec96[1]);
			fRec95[0] = fConst387 * (fConst389 * fRec96[0] + fConst392 * fRec96[1] + fConst389 * fRec96[2]) - fConst385 * (fConst393 * fRec95[2] + fConst394 * fRec95[1]);
			fRec94[0] = fConst385 * (fConst386 * fRec95[0] + fConst395 * fRec95[1] + fConst386 * fRec95[2]) - fConst383 * (fConst396 * fRec94[2] + fConst397 * fRec94[1]);
			float fTemp65 = fConst383 * (fConst384 * fRec94[0] + fConst398 * fRec94[1] + fConst384 * fRec94[2]);
			fRec93[0] = fTemp65 - fConst380 * (fConst399 * fRec93[2] + fConst401 * fRec93[1]);
			fRec92[0] = fConst380 * (fConst382 * fRec93[0] + fConst402 * fRec93[1] + fConst382 * fRec93[2]) - fConst377 * (fConst403 * fRec92[2] + fConst404 * fRec92[1]);
			fRec91[0] = fConst377 * (fConst379 * fRec92[0] + fConst405 * fRec92[1] + fConst379 * fRec92[2]) - fConst373 * (fConst406 * fRec91[2] + fConst407 * fRec91[1]);
			fRec90[0] = fSlow2 * fRec90[1] + fSlow36 * std::fabs(fConst373 * (fConst376 * fRec91[0] + fConst408 * fRec91[1] + fConst376 * fRec91[2]));
			fVbargraph10 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec90[0]));
			fRec103[0] = fTemp65 - fConst425 * (fConst428 * fRec103[2] + fConst429 * fRec103[1]);
			fRec102[0] = fConst425 * (fConst427 * fRec103[0] + fConst430 * fRec103[1] + fConst427 * fRec103[2]) - fConst423 * (fConst431 * fRec102[2] + fConst432 * fRec102[1]);
			fRec101[0] = fConst423 * (fConst424 * fRec102[0] + fConst433 * fRec102[1] + fConst424 * fRec102[2]) - fConst421 * (fConst434 * fRec101[2] + fConst435 * fRec101[1]);
			float fTemp66 = fConst421 * (fConst422 * fRec101[0] + fConst436 * fRec101[1] + fConst422 * fRec101[2]);
			fRec100[0] = fTemp66 - fConst418 * (fConst437 * fRec100[2] + fConst439 * fRec100[1]);
			fRec99[0] = fConst418 * (fConst420 * fRec100[0] + fConst440 * fRec100[1] + fConst420 * fRec100[2]) - fConst415 * (fConst441 * fRec99[2] + fConst442 * fRec99[1]);
			fRec98[0] = fConst415 * (fConst417 * fRec99[0] + fConst443 * fRec99[1] + fConst417 * fRec99[2]) - fConst411 * (fConst444 * fRec98[2] + fConst445 * fRec98[1]);
			fRec97[0] = fSlow2 * fRec97[1] + fSlow36 * std::fabs(fConst411 * (fConst414 * fRec98[0] + fConst446 * fRec98[1] + fConst414 * fRec98[2]));
			fVbargraph11 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec97[0]));
			fRec110[0] = fTemp66 - fConst463 * (fConst466 * fRec110[2] + fConst467 * fRec110[1]);
			fRec109[0] = fConst463 * (fConst465 * fRec110[0] + fConst468 * fRec110[1] + fConst465 * fRec110[2]) - fConst461 * (fConst469 * fRec109[2] + fConst470 * fRec109[1]);
			fRec108[0] = fConst461 * (fConst462 * fRec109[0] + fConst471 * fRec109[1] + fConst462 * fRec109[2]) - fConst459 * (fConst472 * fRec108[2] + fConst473 * fRec108[1]);
			float fTemp67 = fConst459 * (fConst460 * fRec108[0] + fConst474 * fRec108[1] + fConst460 * fRec108[2]);
			fRec107[0] = fTemp67 - fConst456 * (fConst475 * fRec107[2] + fConst477 * fRec107[1]);
			fRec106[0] = fConst456 * (fConst458 * fRec107[0] + fConst478 * fRec107[1] + fConst458 * fRec107[2]) - fConst453 * (fConst479 * fRec106[2] + fConst480 * fRec106[1]);
			fRec105[0] = fConst453 * (fConst455 * fRec106[0] + fConst481 * fRec106[1] + fConst455 * fRec106[2]) - fConst449 * (fConst482 * fRec105[2] + fConst483 * fRec105[1]);
			fRec104[0] = fSlow2 * fRec104[1] + fSlow36 * std::fabs(fConst449 * (fConst452 * fRec105[0] + fConst484 * fRec105[1] + fConst452 * fRec105[2]));
			fVbargraph12 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec104[0]));
			fRec117[0] = fTemp67 - fConst501 * (fConst504 * fRec117[2] + fConst505 * fRec117[1]);
			fRec116[0] = fConst501 * (fConst503 * fRec117[0] + fConst506 * fRec117[1] + fConst503 * fRec117[2]) - fConst499 * (fConst507 * fRec116[2] + fConst508 * fRec116[1]);
			fRec115[0] = fConst499 * (fConst500 * fRec116[0] + fConst509 * fRec116[1] + fConst500 * fRec116[2]) - fConst497 * (fConst510 * fRec115[2] + fConst511 * fRec115[1]);
			float fTemp68 = fConst497 * (fConst498 * fRec115[0] + fConst512 * fRec115[1] + fConst498 * fRec115[2]);
			fRec114[0] = fTemp68 - fConst494 * (fConst513 * fRec114[2] + fConst515 * fRec114[1]);
			fRec113[0] = fConst494 * (fConst496 * fRec114[0] + fConst516 * fRec114[1] + fConst496 * fRec114[2]) - fConst491 * (fConst517 * fRec113[2] + fConst518 * fRec113[1]);
			fRec112[0] = fConst491 * (fConst493 * fRec113[0] + fConst519 * fRec113[1] + fConst493 * fRec113[2]) - fConst487 * (fConst520 * fRec112[2] + fConst521 * fRec112[1]);
			fRec111[0] = fSlow2 * fRec111[1] + fSlow36 * std::fabs(fConst487 * (fConst490 * fRec112[0] + fConst522 * fRec112[1] + fConst490 * fRec112[2]));
			fVbargraph13 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec111[0]));
			fRec121[0] = fTemp68 - fConst527 * (fConst530 * fRec121[2] + fConst531 * fRec121[1]);
			fRec120[0] = fConst527 * (fConst529 * fRec121[0] + fConst532 * fRec121[1] + fConst529 * fRec121[2]) - fConst525 * (fConst533 * fRec120[2] + fConst534 * fRec120[1]);
			fRec119[0] = fConst525 * (fConst526 * fRec120[0] + fConst535 * fRec120[1] + fConst526 * fRec120[2]) - fConst523 * (fConst536 * fRec119[2] + fConst537 * fRec119[1]);
			fRec118[0] = fSlow2 * fRec118[1] + fSlow36 * std::fabs(fConst523 * (fConst524 * fRec119[0] + fConst538 * fRec119[1] + fConst524 * fRec119[2]));
			fVbargraph14 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec118[0]));
			float fTemp69 = fTemp55;
			output0[i0] = FAUSTFLOAT(fTemp69);
			output1[i0] = FAUSTFLOAT(fTemp69);
			for (int j0 = 3; j0 > 0; j0 = j0 - 1) {
				iVec0[j0] = iVec0[j0 - 1];
			}
			fRec8[1] = fRec8[0];
			fRec10[1] = fRec10[0];
			fRec9[1] = fRec9[0];
			fVec1[1] = fVec1[0];
			fVec2[1] = fVec2[0];
			fVec3[1] = fVec3[0];
			fVec4[1] = fVec4[0];
			fVec5[1] = fVec5[0];
			fVec6[1] = fVec6[0];
			fRec11[1] = fRec11[0];
			fVec7[1] = fVec7[0];
			fVec8[1] = fVec8[0];
			fVec9[1] = fVec9[0];
			fVec10[1] = fVec10[0];
			fVec11[1] = fVec11[0];
			fVec12[1] = fVec12[0];
			fRec12[1] = fRec12[0];
			fVec13[1] = fVec13[0];
			fVec14[1] = fVec14[0];
			fVec15[1] = fVec15[0];
			fVec16[1] = fVec16[0];
			fVec17[1] = fVec17[0];
			fVec18[1] = fVec18[0];
			iRec13[1] = iRec13[0];
			for (int j1 = 3; j1 > 0; j1 = j1 - 1) {
				fRec14[j1] = fRec14[j1 - 1];
			}
			fRec18[1] = fRec18[0];
			iVec19[1] = iVec19[0];
			iRec19[1] = iRec19[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			fRec7[1] = fRec7[0];
			iVec20[1] = iVec20[0];
			iRec20[1] = iRec20[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			fRec23[1] = fRec23[0];
			fRec22[1] = fRec22[0];
			fRec21[1] = fRec21[0];
			fRec26[1] = fRec26[0];
			fRec25[1] = fRec25[0];
			fRec24[1] = fRec24[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[1] = fRec0[0];
			fRec33[2] = fRec33[1];
			fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1];
			fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1];
			fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1];
			fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1];
			fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1];
			fRec28[1] = fRec28[0];
			fRec27[1] = fRec27[0];
			fRec40[2] = fRec40[1];
			fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1];
			fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1];
			fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1];
			fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1];
			fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1];
			fRec35[1] = fRec35[0];
			fRec34[1] = fRec34[0];
			fRec47[2] = fRec47[1];
			fRec47[1] = fRec47[0];
			fRec46[2] = fRec46[1];
			fRec46[1] = fRec46[0];
			fRec45[2] = fRec45[1];
			fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1];
			fRec44[1] = fRec44[0];
			fRec43[2] = fRec43[1];
			fRec43[1] = fRec43[0];
			fRec42[2] = fRec42[1];
			fRec42[1] = fRec42[0];
			fRec41[1] = fRec41[0];
			fRec54[2] = fRec54[1];
			fRec54[1] = fRec54[0];
			fRec53[2] = fRec53[1];
			fRec53[1] = fRec53[0];
			fRec52[2] = fRec52[1];
			fRec52[1] = fRec52[0];
			fRec51[2] = fRec51[1];
			fRec51[1] = fRec51[0];
			fRec50[2] = fRec50[1];
			fRec50[1] = fRec50[0];
			fRec49[2] = fRec49[1];
			fRec49[1] = fRec49[0];
			fRec48[1] = fRec48[0];
			fRec61[2] = fRec61[1];
			fRec61[1] = fRec61[0];
			fRec60[2] = fRec60[1];
			fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1];
			fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1];
			fRec58[1] = fRec58[0];
			fRec57[2] = fRec57[1];
			fRec57[1] = fRec57[0];
			fRec56[2] = fRec56[1];
			fRec56[1] = fRec56[0];
			fRec55[1] = fRec55[0];
			fRec68[2] = fRec68[1];
			fRec68[1] = fRec68[0];
			fRec67[2] = fRec67[1];
			fRec67[1] = fRec67[0];
			fRec66[2] = fRec66[1];
			fRec66[1] = fRec66[0];
			fRec65[2] = fRec65[1];
			fRec65[1] = fRec65[0];
			fRec64[2] = fRec64[1];
			fRec64[1] = fRec64[0];
			fRec63[2] = fRec63[1];
			fRec63[1] = fRec63[0];
			fRec62[1] = fRec62[0];
			fRec75[2] = fRec75[1];
			fRec75[1] = fRec75[0];
			fRec74[2] = fRec74[1];
			fRec74[1] = fRec74[0];
			fRec73[2] = fRec73[1];
			fRec73[1] = fRec73[0];
			fRec72[2] = fRec72[1];
			fRec72[1] = fRec72[0];
			fRec71[2] = fRec71[1];
			fRec71[1] = fRec71[0];
			fRec70[2] = fRec70[1];
			fRec70[1] = fRec70[0];
			fRec69[1] = fRec69[0];
			fRec82[2] = fRec82[1];
			fRec82[1] = fRec82[0];
			fRec81[2] = fRec81[1];
			fRec81[1] = fRec81[0];
			fRec80[2] = fRec80[1];
			fRec80[1] = fRec80[0];
			fRec79[2] = fRec79[1];
			fRec79[1] = fRec79[0];
			fRec78[2] = fRec78[1];
			fRec78[1] = fRec78[0];
			fRec77[2] = fRec77[1];
			fRec77[1] = fRec77[0];
			fRec76[1] = fRec76[0];
			fRec89[2] = fRec89[1];
			fRec89[1] = fRec89[0];
			fRec88[2] = fRec88[1];
			fRec88[1] = fRec88[0];
			fRec87[2] = fRec87[1];
			fRec87[1] = fRec87[0];
			fRec86[2] = fRec86[1];
			fRec86[1] = fRec86[0];
			fRec85[2] = fRec85[1];
			fRec85[1] = fRec85[0];
			fRec84[2] = fRec84[1];
			fRec84[1] = fRec84[0];
			fRec83[1] = fRec83[0];
			fRec96[2] = fRec96[1];
			fRec96[1] = fRec96[0];
			fRec95[2] = fRec95[1];
			fRec95[1] = fRec95[0];
			fRec94[2] = fRec94[1];
			fRec94[1] = fRec94[0];
			fRec93[2] = fRec93[1];
			fRec93[1] = fRec93[0];
			fRec92[2] = fRec92[1];
			fRec92[1] = fRec92[0];
			fRec91[2] = fRec91[1];
			fRec91[1] = fRec91[0];
			fRec90[1] = fRec90[0];
			fRec103[2] = fRec103[1];
			fRec103[1] = fRec103[0];
			fRec102[2] = fRec102[1];
			fRec102[1] = fRec102[0];
			fRec101[2] = fRec101[1];
			fRec101[1] = fRec101[0];
			fRec100[2] = fRec100[1];
			fRec100[1] = fRec100[0];
			fRec99[2] = fRec99[1];
			fRec99[1] = fRec99[0];
			fRec98[2] = fRec98[1];
			fRec98[1] = fRec98[0];
			fRec97[1] = fRec97[0];
			fRec110[2] = fRec110[1];
			fRec110[1] = fRec110[0];
			fRec109[2] = fRec109[1];
			fRec109[1] = fRec109[0];
			fRec108[2] = fRec108[1];
			fRec108[1] = fRec108[0];
			fRec107[2] = fRec107[1];
			fRec107[1] = fRec107[0];
			fRec106[2] = fRec106[1];
			fRec106[1] = fRec106[0];
			fRec105[2] = fRec105[1];
			fRec105[1] = fRec105[0];
			fRec104[1] = fRec104[0];
			fRec117[2] = fRec117[1];
			fRec117[1] = fRec117[0];
			fRec116[2] = fRec116[1];
			fRec116[1] = fRec116[0];
			fRec115[2] = fRec115[1];
			fRec115[1] = fRec115[0];
			fRec114[2] = fRec114[1];
			fRec114[1] = fRec114[0];
			fRec113[2] = fRec113[1];
			fRec113[1] = fRec113[0];
			fRec112[2] = fRec112[1];
			fRec112[1] = fRec112[0];
			fRec111[1] = fRec111[0];
			fRec121[2] = fRec121[1];
			fRec121[1] = fRec121[0];
			fRec120[2] = fRec120[1];
			fRec120[1] = fRec120[0];
			fRec119[2] = fRec119[1];
			fRec119[1] = fRec119[0];
			fRec118[1] = fRec118[0];
		}
	}

};

#endif
