/* ------------------------------------------------------------
author: "Grame"
name: "Harpe"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	FAUSTFLOAT fHslider1;
	int iRec1[2];
	FAUSTFLOAT fHslider2;
	float fRec3[2];
	int iVec0[2];
	float fRec2[2];
	int IOTA0;
	float fVec1[128];
	float fRec0[3];
	int iVec2[2];
	float fRec5[2];
	float fVec3[128];
	float fRec4[3];
	int iVec4[2];
	float fRec7[2];
	float fVec5[128];
	float fRec6[3];
	int iVec6[2];
	float fRec9[2];
	float fVec7[128];
	float fRec8[3];
	int iVec8[2];
	float fRec11[2];
	float fVec9[64];
	float fRec10[3];
	int iVec10[2];
	float fRec13[2];
	float fVec11[64];
	float fRec12[3];
	int iVec12[2];
	float fRec15[2];
	float fVec13[64];
	float fRec14[3];
	int iVec14[2];
	float fRec17[2];
	float fVec15[64];
	float fRec16[3];
	int iVec16[2];
	float fRec19[2];
	float fVec17[64];
	float fRec18[3];
	int iVec18[2];
	float fRec21[2];
	float fVec19[32];
	float fRec20[3];
	int iVec20[2];
	float fRec23[2];
	float fVec21[32];
	float fRec22[3];
	int fSampleRate;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("filename", "harpe.dsp");
		m->declare("name", "Harpe");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.0f);
		fHslider1 = FAUSTFLOAT(0.5f);
		fHslider2 = FAUSTFLOAT(0.43f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			iRec1[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec3[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			iVec0[l2] = 0;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec2[l3] = 0.0f;
		}
		IOTA0 = 0;
		for (int l4 = 0; l4 < 128; l4 = l4 + 1) {
			fVec1[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 3; l5 = l5 + 1) {
			fRec0[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			iVec2[l6] = 0;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec5[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 128; l8 = l8 + 1) {
			fVec3[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 3; l9 = l9 + 1) {
			fRec4[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			iVec4[l10] = 0;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fRec7[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 128; l12 = l12 + 1) {
			fVec5[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 3; l13 = l13 + 1) {
			fRec6[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			iVec6[l14] = 0;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fRec9[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 128; l16 = l16 + 1) {
			fVec7[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 3; l17 = l17 + 1) {
			fRec8[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			iVec8[l18] = 0;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fRec11[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 64; l20 = l20 + 1) {
			fVec9[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 3; l21 = l21 + 1) {
			fRec10[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			iVec10[l22] = 0;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fRec13[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 64; l24 = l24 + 1) {
			fVec11[l24] = 0.0f;
		}
		for (int l25 = 0; l25 < 3; l25 = l25 + 1) {
			fRec12[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			iVec12[l26] = 0;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			fRec15[l27] = 0.0f;
		}
		for (int l28 = 0; l28 < 64; l28 = l28 + 1) {
			fVec13[l28] = 0.0f;
		}
		for (int l29 = 0; l29 < 3; l29 = l29 + 1) {
			fRec14[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			iVec14[l30] = 0;
		}
		for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
			fRec17[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 64; l32 = l32 + 1) {
			fVec15[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 3; l33 = l33 + 1) {
			fRec16[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			iVec16[l34] = 0;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec19[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 64; l36 = l36 + 1) {
			fVec17[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 3; l37 = l37 + 1) {
			fRec18[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			iVec18[l38] = 0;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fRec21[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 32; l40 = l40 + 1) {
			fVec19[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 3; l41 = l41 + 1) {
			fRec20[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 2; l42 = l42 + 1) {
			iVec20[l42] = 0;
		}
		for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
			fRec23[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 32; l44 = l44 + 1) {
			fVec21[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 3; l45 = l45 + 1) {
			fRec22[l45] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Harpe");
		ui_interface->declare(&fHslider0, "osc", "/1/fader3");
		ui_interface->addHorizontalSlider("attenuation", &fHslider0, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(0.01f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fHslider2, "osc", "/accxyz/1 -10 10");
		ui_interface->addHorizontalSlider("hand", &fHslider2, FAUSTFLOAT(0.43f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider1, "osc", "/accxyz/0 -10 10");
		ui_interface->declare(&fHslider1, "unit", "f");
		ui_interface->addHorizontalSlider("level", &fHslider1, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = 0.5f * (1.0f - float(fHslider0));
		float fSlow1 = 4.656613e-10f * mydsp_faustpower2_f(float(fHslider1));
		float fSlow2 = 0.1f * float(fHslider2);
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iRec1[0] = 1103515245 * iRec1[1] + 12345;
			float fTemp0 = float(iRec1[0]);
			fRec3[0] = fSlow2 + 0.9f * fRec3[1];
			float fTemp1 = std::min<float>(fRec3[0], fRec3[1]);
			float fTemp2 = std::max<float>(fRec3[0], fRec3[1]);
			int iTemp3 = (fTemp1 < 0.045454547f) & (0.045454547f < fTemp2);
			iVec0[0] = iTemp3;
			fRec2[0] = fRec2[1] + float(float(iTemp3 - iVec0[1]) > 0.0f) - 0.009977324f * float(fRec2[1] > 0.0f);
			fVec1[IOTA0 & 127] = fSlow0 * (fRec0[1] + fRec0[2]) + fSlow1 * fTemp0 * float(fRec2[0] > 0.0f);
			fRec0[0] = fVec1[(IOTA0 - 99) & 127];
			int iTemp4 = (fTemp1 < 0.13636364f) & (0.13636364f < fTemp2);
			iVec2[0] = iTemp4;
			fRec5[0] = fRec5[1] + float(float(iTemp4 - iVec2[1]) > 0.0f) - 0.011460936f * float(fRec5[1] > 0.0f);
			fVec3[IOTA0 & 127] = fSlow0 * (fRec4[1] + fRec4[2]) + fSlow1 * fTemp0 * float(fRec5[0] > 0.0f);
			fRec4[0] = fVec3[(IOTA0 - 86) & 127];
			int iTemp5 = (fTemp1 < 0.22727273f) & (0.22727273f < fTemp2);
			iVec4[0] = iTemp5;
			fRec7[0] = fRec7[1] + float(float(iTemp5 - iVec4[1]) > 0.0f) - 0.013165158f * float(fRec7[1] > 0.0f);
			fVec5[IOTA0 & 127] = fSlow0 * (fRec6[1] + fRec6[2]) + fSlow1 * fTemp0 * float(fRec7[0] > 0.0f);
			fRec6[0] = fVec5[(IOTA0 - 74) & 127];
			int iTemp6 = (fTemp1 < 0.3181818f) & (0.3181818f < fTemp2);
			iVec6[0] = iTemp6;
			fRec9[0] = fRec9[1] + float(float(iTemp6 - iVec6[1]) > 0.0f) - 0.0151227955f * float(fRec9[1] > 0.0f);
			fVec7[IOTA0 & 127] = fSlow0 * (fRec8[1] + fRec8[2]) + fSlow1 * fTemp0 * float(fRec9[0] > 0.0f);
			fRec8[0] = fVec7[(IOTA0 - 65) & 127];
			int iTemp7 = (fTemp1 < 0.4090909f) & (0.4090909f < fTemp2);
			iVec8[0] = iTemp7;
			fRec11[0] = fRec11[1] + float(float(iTemp7 - iVec8[1]) > 0.0f) - 0.01737153f * float(fRec11[1] > 0.0f);
			fVec9[IOTA0 & 63] = fSlow0 * (fRec10[1] + fRec10[2]) + fSlow1 * fTemp0 * float(fRec11[0] > 0.0f);
			fRec10[0] = fVec9[(IOTA0 - 56) & 63];
			int iTemp8 = (fTemp1 < 0.5f) & (0.5f < fTemp2);
			iVec10[0] = iTemp8;
			fRec13[0] = fRec13[1] + float(float(iTemp8 - iVec10[1]) > 0.0f) - 0.019954648f * float(fRec13[1] > 0.0f);
			fVec11[IOTA0 & 63] = fSlow0 * (fRec12[1] + fRec12[2]) + fSlow1 * fTemp0 * float(fRec13[0] > 0.0f);
			fRec12[0] = fVec11[(IOTA0 - 49) & 63];
			float fTemp9 = 0.70710677f * fRec12[0];
			int iTemp10 = (fTemp1 < 0.59090906f) & (0.59090906f < fTemp2);
			iVec12[0] = iTemp10;
			fRec15[0] = fRec15[1] + float(float(iTemp10 - iVec12[1]) > 0.0f) - 0.022921871f * float(fRec15[1] > 0.0f);
			fVec13[IOTA0 & 63] = fSlow0 * (fRec14[1] + fRec14[2]) + fSlow1 * fTemp0 * float(fRec15[0] > 0.0f);
			fRec14[0] = fVec13[(IOTA0 - 42) & 63];
			int iTemp11 = (fTemp1 < 0.6818182f) & (0.6818182f < fTemp2);
			iVec14[0] = iTemp11;
			fRec17[0] = fRec17[1] + float(float(iTemp11 - iVec14[1]) > 0.0f) - 0.026330316f * float(fRec17[1] > 0.0f);
			fVec15[IOTA0 & 63] = fSlow0 * (fRec16[1] + fRec16[2]) + fSlow1 * fTemp0 * float(fRec17[0] > 0.0f);
			fRec16[0] = fVec15[(IOTA0 - 36) & 63];
			int iTemp12 = (fTemp1 < 0.77272725f) & (0.77272725f < fTemp2);
			iVec16[0] = iTemp12;
			fRec19[0] = fRec19[1] + float(float(iTemp12 - iVec16[1]) > 0.0f) - 0.030245591f * float(fRec19[1] > 0.0f);
			fVec17[IOTA0 & 63] = fSlow0 * (fRec18[1] + fRec18[2]) + fSlow1 * fTemp0 * float(fRec19[0] > 0.0f);
			fRec18[0] = fVec17[(IOTA0 - 32) & 63];
			int iTemp13 = (fTemp1 < 0.8636364f) & (0.8636364f < fTemp2);
			iVec18[0] = iTemp13;
			fRec21[0] = fRec21[1] + float(float(iTemp13 - iVec18[1]) > 0.0f) - 0.03474306f * float(fRec21[1] > 0.0f);
			fVec19[IOTA0 & 31] = fSlow0 * (fRec20[1] + fRec20[2]) + fSlow1 * fTemp0 * float(fRec21[0] > 0.0f);
			fRec20[0] = fVec19[(IOTA0 - 27) & 31];
			int iTemp14 = (fTemp1 < 0.95454544f) & (0.95454544f < fTemp2);
			iVec20[0] = iTemp14;
			fRec23[0] = fRec23[1] + float(float(iTemp14 - iVec20[1]) > 0.0f) - 0.039909296f * float(fRec23[1] > 0.0f);
			fVec21[IOTA0 & 31] = fSlow0 * (fRec22[1] + fRec22[2]) + fSlow1 * fTemp0 * float(fRec23[0] > 0.0f);
			fRec22[0] = fVec21[(IOTA0 - 24) & 31];
			output0[i0] = FAUSTFLOAT(0.9770084f * fRec0[0] + 0.9293204f * fRec4[0] + 0.87904906f * fRec6[0] + 0.8257228f * fRec8[0] + 0.76870614f * fRec10[0] + fTemp9 + 0.6396021f * fRec14[0] + 0.56407607f * fRec16[0] + 0.4767313f * fRec18[0] + 0.36927447f * fRec20[0] + 0.21320072f * fRec22[0]);
			output1[i0] = FAUSTFLOAT(fTemp9 + 0.21320072f * fRec0[0] + 0.36927447f * fRec4[0] + 0.4767313f * fRec6[0] + 0.56407607f * fRec8[0] + 0.6396021f * fRec10[0] + 0.76870614f * fRec14[0] + 0.8257228f * fRec16[0] + 0.87904906f * fRec18[0] + 0.9293204f * fRec20[0] + 0.9770084f * fRec22[0]);
			iRec1[1] = iRec1[0];
			fRec3[1] = fRec3[0];
			iVec0[1] = iVec0[0];
			fRec2[1] = fRec2[0];
			IOTA0 = IOTA0 + 1;
			fRec0[2] = fRec0[1];
			fRec0[1] = fRec0[0];
			iVec2[1] = iVec2[0];
			fRec5[1] = fRec5[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
			iVec4[1] = iVec4[0];
			fRec7[1] = fRec7[0];
			fRec6[2] = fRec6[1];
			fRec6[1] = fRec6[0];
			iVec6[1] = iVec6[0];
			fRec9[1] = fRec9[0];
			fRec8[2] = fRec8[1];
			fRec8[1] = fRec8[0];
			iVec8[1] = iVec8[0];
			fRec11[1] = fRec11[0];
			fRec10[2] = fRec10[1];
			fRec10[1] = fRec10[0];
			iVec10[1] = iVec10[0];
			fRec13[1] = fRec13[0];
			fRec12[2] = fRec12[1];
			fRec12[1] = fRec12[0];
			iVec12[1] = iVec12[0];
			fRec15[1] = fRec15[0];
			fRec14[2] = fRec14[1];
			fRec14[1] = fRec14[0];
			iVec14[1] = iVec14[0];
			fRec17[1] = fRec17[0];
			fRec16[2] = fRec16[1];
			fRec16[1] = fRec16[0];
			iVec16[1] = iVec16[0];
			fRec19[1] = fRec19[0];
			fRec18[2] = fRec18[1];
			fRec18[1] = fRec18[0];
			iVec18[1] = iVec18[0];
			fRec21[1] = fRec21[0];
			fRec20[2] = fRec20[1];
			fRec20[1] = fRec20[0];
			iVec20[1] = iVec20[0];
			fRec23[1] = fRec23[0];
			fRec22[2] = fRec22[1];
			fRec22[1] = fRec22[0];
		}
	}

};

#endif
