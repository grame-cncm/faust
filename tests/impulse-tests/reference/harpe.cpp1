//----------------------------------------------------------
// author: "Grame"
// name: "Harpe"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	IOTA0;
	// Recursion delay fRec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec0SEState; // Single Delay
	float 	fVec1SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider0;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	float 	fVec3SEState; // Single Delay
	int 	iVec6SEState; // Single Delay
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	// Recursion delay iVec9SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec9SIState; // Single Delay
	// Recursion delay fVec11SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec11SEState; // Single Delay
	float 	fVec0SE[128]; // Ring Delay
	// Recursion delay fRec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec4SEState; // Single Delay
	float 	fVec16SEState[2]; // Copy Delay
	int 	iVec17SEState; // Single Delay
	// Recursion delay fVec20SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec20SEState; // Single Delay
	float 	fVec15SE[128]; // Ring Delay
	// Recursion delay fRec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec6SEState; // Single Delay
	float 	fVec25SEState[2]; // Copy Delay
	int 	iVec26SEState; // Single Delay
	// Recursion delay fVec29SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec29SEState; // Single Delay
	float 	fVec24SE[128]; // Ring Delay
	// Recursion delay fRec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec8SEState; // Single Delay
	float 	fVec34SEState[2]; // Copy Delay
	int 	iVec35SEState; // Single Delay
	// Recursion delay fVec38SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec38SEState; // Single Delay
	float 	fVec33SE[128]; // Ring Delay
	// Recursion delay fRec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec10SEState; // Single Delay
	float 	fVec43SEState[2]; // Copy Delay
	int 	iVec44SEState; // Single Delay
	// Recursion delay fVec47SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec47SEState; // Single Delay
	float 	fVec42SE[64]; // Ring Delay
	// Recursion delay fRec12SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec12SEState; // Single Delay
	float 	fVec52SEState[2]; // Copy Delay
	int 	iVec53SEState; // Single Delay
	// Recursion delay fVec56SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec56SEState; // Single Delay
	float 	fVec51SE[64]; // Ring Delay
	// Recursion delay fRec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec14SEState; // Single Delay
	float 	fVec61SEState[2]; // Copy Delay
	int 	iVec62SEState; // Single Delay
	// Recursion delay fVec65SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec65SEState; // Single Delay
	float 	fVec60SE[64]; // Ring Delay
	// Recursion delay fRec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec16SEState; // Single Delay
	float 	fVec70SEState[2]; // Copy Delay
	int 	iVec71SEState; // Single Delay
	// Recursion delay fVec74SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec74SEState; // Single Delay
	float 	fVec69SE[64]; // Ring Delay
	// Recursion delay fRec18SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec18SEState; // Single Delay
	float 	fVec79SEState[2]; // Copy Delay
	int 	iVec80SEState; // Single Delay
	// Recursion delay fVec83SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec83SEState; // Single Delay
	float 	fVec78SE[64]; // Ring Delay
	// Recursion delay fRec20SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec20SEState; // Single Delay
	float 	fVec88SEState[2]; // Copy Delay
	int 	iVec89SEState; // Single Delay
	// Recursion delay fVec92SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec92SEState; // Single Delay
	float 	fVec87SE[32]; // Ring Delay
	// Recursion delay fRec22SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fRec22SEState; // Single Delay
	float 	fVec97SEState[2]; // Copy Delay
	int 	iVec98SEState; // Single Delay
	// Recursion delay fVec101SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec101SEState; // Single Delay
	float 	fVec96SE[32]; // Ring Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "harpe.dsp");
		m->declare("name", "Harpe");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.43f;
		fslider1 = 0.0f;
		fslider2 = 0.5f;
	}
	virtual void instanceClear() {
		fRec0SEState = 0;
		for (int j = 0; j < 2; j++) { fVec1SEState[j] = 0; }
		fVec2SEState = 0;
		fVec3SEState = 0;
		iVec6SEState = 0;
		iVec9SIState = 0;
		fVec11SEState = 0;
		for (int i = 1; i < 128; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
		fRec4SEState = 0;
		for (int j = 0; j < 2; j++) { fVec16SEState[j] = 0; }
		iVec17SEState = 0;
		fVec20SEState = 0;
		for (int i = 1; i < 128; i++) { fVec15SE[i] = 0; }
		fVec15SE[0] = -1;  // detect unintialized
		fRec6SEState = 0;
		for (int j = 0; j < 2; j++) { fVec25SEState[j] = 0; }
		iVec26SEState = 0;
		fVec29SEState = 0;
		for (int i = 1; i < 128; i++) { fVec24SE[i] = 0; }
		fVec24SE[0] = -1;  // detect unintialized
		fRec8SEState = 0;
		for (int j = 0; j < 2; j++) { fVec34SEState[j] = 0; }
		iVec35SEState = 0;
		fVec38SEState = 0;
		for (int i = 1; i < 128; i++) { fVec33SE[i] = 0; }
		fVec33SE[0] = -1;  // detect unintialized
		fRec10SEState = 0;
		for (int j = 0; j < 2; j++) { fVec43SEState[j] = 0; }
		iVec44SEState = 0;
		fVec47SEState = 0;
		for (int i = 1; i < 64; i++) { fVec42SE[i] = 0; }
		fVec42SE[0] = -1;  // detect unintialized
		fRec12SEState = 0;
		for (int j = 0; j < 2; j++) { fVec52SEState[j] = 0; }
		iVec53SEState = 0;
		fVec56SEState = 0;
		for (int i = 1; i < 64; i++) { fVec51SE[i] = 0; }
		fVec51SE[0] = -1;  // detect unintialized
		fRec14SEState = 0;
		for (int j = 0; j < 2; j++) { fVec61SEState[j] = 0; }
		iVec62SEState = 0;
		fVec65SEState = 0;
		for (int i = 1; i < 64; i++) { fVec60SE[i] = 0; }
		fVec60SE[0] = -1;  // detect unintialized
		fRec16SEState = 0;
		for (int j = 0; j < 2; j++) { fVec70SEState[j] = 0; }
		iVec71SEState = 0;
		fVec74SEState = 0;
		for (int i = 1; i < 64; i++) { fVec69SE[i] = 0; }
		fVec69SE[0] = -1;  // detect unintialized
		fRec18SEState = 0;
		for (int j = 0; j < 2; j++) { fVec79SEState[j] = 0; }
		iVec80SEState = 0;
		fVec83SEState = 0;
		for (int i = 1; i < 64; i++) { fVec78SE[i] = 0; }
		fVec78SE[0] = -1;  // detect unintialized
		fRec20SEState = 0;
		for (int j = 0; j < 2; j++) { fVec88SEState[j] = 0; }
		iVec89SEState = 0;
		fVec92SEState = 0;
		for (int i = 1; i < 32; i++) { fVec87SE[i] = 0; }
		fVec87SE[0] = -1;  // detect unintialized
		fRec22SEState = 0;
		for (int j = 0; j < 2; j++) { fVec97SEState[j] = 0; }
		iVec98SEState = 0;
		fVec101SEState = 0;
		for (int i = 1; i < 32; i++) { fVec96SE[i] = 0; }
		fVec96SE[0] = -1;  // detect unintialized
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Harpe");
		ui_interface->declare(&fslider1, "osc", "/1/fader3");
		ui_interface->addHorizontalSlider("attenuation", &fslider1, 0.0f, 0.0f, 0.01f, 0.001f);
		ui_interface->declare(&fslider0, "osc", "/accxyz/1 -10 10");
		ui_interface->addHorizontalSlider("hand", &fslider0, 0.43f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider2, "osc", "/accxyz/0 -10 10");
		ui_interface->declare(&fslider2, "unit", "f");
		ui_interface->addHorizontalSlider("level", &fslider2, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fRec0SE[2];
		float 	fVec1SE[3];
		float 	fSlow0BE = (0.1f * float(fslider0)); // Zone 2, step: 11
		float 	fVec2SE[2];
		float 	fVec3SE[2];
		float 	fTemp0SE; // step: 22
		float 	fTemp1SE; // step: 23
		float 	fTemp2SE; // step: 24
		float 	fTemp3SE; // step: 26
		int 	iTemp4SE; // step: 28
		int 	iVec6SE[2];
		float 	fSlow1BE = (0.5f * (1.0f + -float(fslider1) /* Sum */)); // Zone 2, step: 36
		float 	fSlow2BE = (4.656613e-10f * powf(float(fslider2),2.0f)); // Zone 2, step: 47
		int 	iVec9SI[2];
		float 	fTemp5SI; // step: 56
		float 	fTemp6SE; // step: 58
		float 	fVec11SE[2];
		float 	fRec4SE[2];
		float 	fVec16SE[3];
		int 	iTemp7SE; // step: 85
		int 	iVec17SE[2];
		float 	fTemp8SE; // step: 93
		float 	fVec20SE[2];
		float 	fRec6SE[2];
		float 	fVec25SE[3];
		int 	iTemp9SE; // step: 120
		int 	iVec26SE[2];
		float 	fTemp10SE; // step: 128
		float 	fVec29SE[2];
		float 	fRec8SE[2];
		float 	fVec34SE[3];
		int 	iTemp11SE; // step: 155
		int 	iVec35SE[2];
		float 	fTemp12SE; // step: 163
		float 	fVec38SE[2];
		float 	fRec10SE[2];
		float 	fVec43SE[3];
		int 	iTemp13SE; // step: 190
		int 	iVec44SE[2];
		float 	fTemp14SE; // step: 198
		float 	fVec47SE[2];
		float 	fRec12SE[2];
		float 	fVec52SE[3];
		int 	iTemp15SE; // step: 224
		int 	iVec53SE[2];
		float 	fTemp16SE; // step: 232
		float 	fVec56SE[2];
		float 	fRec14SE[2];
		float 	fVec61SE[3];
		int 	iTemp17SE; // step: 259
		int 	iVec62SE[2];
		float 	fTemp18SE; // step: 267
		float 	fVec65SE[2];
		float 	fRec16SE[2];
		float 	fVec70SE[3];
		int 	iTemp19SE; // step: 294
		int 	iVec71SE[2];
		float 	fTemp20SE; // step: 302
		float 	fVec74SE[2];
		float 	fRec18SE[2];
		float 	fVec79SE[3];
		int 	iTemp21SE; // step: 329
		int 	iVec80SE[2];
		float 	fTemp22SE; // step: 337
		float 	fVec83SE[2];
		float 	fRec20SE[2];
		float 	fVec88SE[3];
		int 	iTemp23SE; // step: 364
		int 	iVec89SE[2];
		float 	fTemp24SE; // step: 372
		float 	fVec92SE[2];
		float 	fRec22SE[2];
		float 	fVec97SE[3];
		int 	iTemp25SE; // step: 399
		int 	iVec98SE[2];
		float 	fTemp26SE; // step: 407
		float 	fVec101SE[2];
		float 	fTemp27SE; // step: 428
		float 	fTemp28SE; // step: 431
		float 	fTemp29SE; // step: 434
		float 	fTemp30SE; // step: 437
		float 	fTemp31SE; // step: 440
		float 	fTemp32SE; // step: 444
		float 	fTemp33SE; // step: 446
		float 	fTemp34SE; // step: 449
		float 	fTemp35SE; // step: 452
		float 	fTemp36SE; // step: 455
		float 	fTemp37SE; // step: 458
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fRec0SE[1] = fRec0SEState;
		fVec1SE[1] = fVec1SEState[0];
		fVec1SE[2] = fVec1SEState[1];
		fVec2SE[1] = fVec2SEState;
		fVec3SE[1] = fVec3SEState;
		iVec6SE[1] = iVec6SEState;
		iVec9SI[1] = iVec9SIState;
		fVec11SE[1] = fVec11SEState;
		fRec4SE[1] = fRec4SEState;
		fVec16SE[1] = fVec16SEState[0];
		fVec16SE[2] = fVec16SEState[1];
		iVec17SE[1] = iVec17SEState;
		fVec20SE[1] = fVec20SEState;
		fRec6SE[1] = fRec6SEState;
		fVec25SE[1] = fVec25SEState[0];
		fVec25SE[2] = fVec25SEState[1];
		iVec26SE[1] = iVec26SEState;
		fVec29SE[1] = fVec29SEState;
		fRec8SE[1] = fRec8SEState;
		fVec34SE[1] = fVec34SEState[0];
		fVec34SE[2] = fVec34SEState[1];
		iVec35SE[1] = iVec35SEState;
		fVec38SE[1] = fVec38SEState;
		fRec10SE[1] = fRec10SEState;
		fVec43SE[1] = fVec43SEState[0];
		fVec43SE[2] = fVec43SEState[1];
		iVec44SE[1] = iVec44SEState;
		fVec47SE[1] = fVec47SEState;
		fRec12SE[1] = fRec12SEState;
		fVec52SE[1] = fVec52SEState[0];
		fVec52SE[2] = fVec52SEState[1];
		iVec53SE[1] = iVec53SEState;
		fVec56SE[1] = fVec56SEState;
		fRec14SE[1] = fRec14SEState;
		fVec61SE[1] = fVec61SEState[0];
		fVec61SE[2] = fVec61SEState[1];
		iVec62SE[1] = iVec62SEState;
		fVec65SE[1] = fVec65SEState;
		fRec16SE[1] = fRec16SEState;
		fVec70SE[1] = fVec70SEState[0];
		fVec70SE[2] = fVec70SEState[1];
		iVec71SE[1] = iVec71SEState;
		fVec74SE[1] = fVec74SEState;
		fRec18SE[1] = fRec18SEState;
		fVec79SE[1] = fVec79SEState[0];
		fVec79SE[2] = fVec79SEState[1];
		iVec80SE[1] = iVec80SEState;
		fVec83SE[1] = fVec83SEState;
		fRec20SE[1] = fRec20SEState;
		fVec88SE[1] = fVec88SEState[0];
		fVec88SE[2] = fVec88SEState[1];
		iVec89SE[1] = iVec89SEState;
		fVec92SE[1] = fVec92SEState;
		fRec22SE[1] = fRec22SEState;
		fVec97SE[1] = fVec97SEState[0];
		fVec97SE[2] = fVec97SEState[1];
		iVec98SE[1] = iVec98SEState;
		fVec101SE[1] = fVec101SEState;
		for (int i=0; i<count; i++) {
			fRec0SE[0] = fVec0SE[(IOTA0-99)&127];
			fVec1SE[0] = fRec0SE[0];
			fVec2SE[0] = (fSlow0BE + (0.9f * fVec2SE[1]) /* Sum */);
			fVec3SE[0] = fVec2SE[0];
			fTemp0SE = fVec2SE[0]; // step: 22
			fTemp1SE = fVec3SE[1]; // step: 23
			fTemp2SE = std::min(fTemp0SE, fTemp1SE); // step: 24
			fTemp3SE = std::max(fTemp0SE, fTemp1SE); // step: 26
			iTemp4SE = ((fTemp2SE < 0.045454547f) & (0.045454547f < fTemp3SE)); // step: 28
			iVec6SE[0] = iTemp4SE;
			iVec9SI[0] = ((1103515245 * iVec9SI[1]) + 12345 /* Sum */);
			fTemp5SI = float(iVec9SI[0]); // step: 56
			fTemp6SE = fVec11SE[1]; // step: 58
			fVec11SE[0] = (fTemp6SE + float((float((iTemp4SE + -iVec6SE[1] /* Sum */)) > 0.0f)) + (-0.009977324f * float((fTemp6SE > 0.0f))) /* Sum */);
			fVec0SE[IOTA0&127] = ((fSlow1BE * (fRec0SE[1] + fVec1SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec11SE[0] > 0.0f)))) /* Sum */);
			fRec4SE[0] = fVec15SE[(IOTA0-86)&127];
			fVec16SE[0] = fRec4SE[0];
			iTemp7SE = ((fTemp2SE < 0.13636364f) & (0.13636364f < fTemp3SE)); // step: 85
			iVec17SE[0] = iTemp7SE;
			fTemp8SE = fVec20SE[1]; // step: 93
			fVec20SE[0] = (fTemp8SE + float((float((iTemp7SE + -iVec17SE[1] /* Sum */)) > 0.0f)) + (-0.011460936f * float((fTemp8SE > 0.0f))) /* Sum */);
			fVec15SE[IOTA0&127] = ((fSlow1BE * (fRec4SE[1] + fVec16SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec20SE[0] > 0.0f)))) /* Sum */);
			fRec6SE[0] = fVec24SE[(IOTA0-74)&127];
			fVec25SE[0] = fRec6SE[0];
			iTemp9SE = ((fTemp2SE < 0.22727273f) & (0.22727273f < fTemp3SE)); // step: 120
			iVec26SE[0] = iTemp9SE;
			fTemp10SE = fVec29SE[1]; // step: 128
			fVec29SE[0] = (fTemp10SE + float((float((iTemp9SE + -iVec26SE[1] /* Sum */)) > 0.0f)) + (-0.013165158f * float((fTemp10SE > 0.0f))) /* Sum */);
			fVec24SE[IOTA0&127] = ((fSlow1BE * (fRec6SE[1] + fVec25SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec29SE[0] > 0.0f)))) /* Sum */);
			fRec8SE[0] = fVec33SE[(IOTA0-65)&127];
			fVec34SE[0] = fRec8SE[0];
			iTemp11SE = ((fTemp2SE < 0.3181818f) & (0.3181818f < fTemp3SE)); // step: 155
			iVec35SE[0] = iTemp11SE;
			fTemp12SE = fVec38SE[1]; // step: 163
			fVec38SE[0] = (fTemp12SE + float((float((iTemp11SE + -iVec35SE[1] /* Sum */)) > 0.0f)) + (-0.0151227955f * float((fTemp12SE > 0.0f))) /* Sum */);
			fVec33SE[IOTA0&127] = ((fSlow1BE * (fRec8SE[1] + fVec34SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec38SE[0] > 0.0f)))) /* Sum */);
			fRec10SE[0] = fVec42SE[(IOTA0-56)&63];
			fVec43SE[0] = fRec10SE[0];
			iTemp13SE = ((fTemp2SE < 0.4090909f) & (0.4090909f < fTemp3SE)); // step: 190
			iVec44SE[0] = iTemp13SE;
			fTemp14SE = fVec47SE[1]; // step: 198
			fVec47SE[0] = (fTemp14SE + float((float((iTemp13SE + -iVec44SE[1] /* Sum */)) > 0.0f)) + (-0.01737153f * float((fTemp14SE > 0.0f))) /* Sum */);
			fVec42SE[IOTA0&63] = ((fSlow1BE * (fRec10SE[1] + fVec43SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec47SE[0] > 0.0f)))) /* Sum */);
			fRec12SE[0] = fVec51SE[(IOTA0-49)&63];
			fVec52SE[0] = fRec12SE[0];
			iTemp15SE = ((fTemp2SE < 0.5f) & (0.5f < fTemp3SE)); // step: 224
			iVec53SE[0] = iTemp15SE;
			fTemp16SE = fVec56SE[1]; // step: 232
			fVec56SE[0] = (fTemp16SE + float((float((iTemp15SE + -iVec53SE[1] /* Sum */)) > 0.0f)) + (-0.019954648f * float((fTemp16SE > 0.0f))) /* Sum */);
			fVec51SE[IOTA0&63] = ((fSlow1BE * (fRec12SE[1] + fVec52SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec56SE[0] > 0.0f)))) /* Sum */);
			fRec14SE[0] = fVec60SE[(IOTA0-42)&63];
			fVec61SE[0] = fRec14SE[0];
			iTemp17SE = ((fTemp2SE < 0.59090906f) & (0.59090906f < fTemp3SE)); // step: 259
			iVec62SE[0] = iTemp17SE;
			fTemp18SE = fVec65SE[1]; // step: 267
			fVec65SE[0] = (fTemp18SE + float((float((iTemp17SE + -iVec62SE[1] /* Sum */)) > 0.0f)) + (-0.022921871f * float((fTemp18SE > 0.0f))) /* Sum */);
			fVec60SE[IOTA0&63] = ((fSlow1BE * (fRec14SE[1] + fVec61SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec65SE[0] > 0.0f)))) /* Sum */);
			fRec16SE[0] = fVec69SE[(IOTA0-36)&63];
			fVec70SE[0] = fRec16SE[0];
			iTemp19SE = ((fTemp2SE < 0.6818182f) & (0.6818182f < fTemp3SE)); // step: 294
			iVec71SE[0] = iTemp19SE;
			fTemp20SE = fVec74SE[1]; // step: 302
			fVec74SE[0] = (fTemp20SE + float((float((iTemp19SE + -iVec71SE[1] /* Sum */)) > 0.0f)) + (-0.026330316f * float((fTemp20SE > 0.0f))) /* Sum */);
			fVec69SE[IOTA0&63] = ((fSlow1BE * (fRec16SE[1] + fVec70SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec74SE[0] > 0.0f)))) /* Sum */);
			fRec18SE[0] = fVec78SE[(IOTA0-32)&63];
			fVec79SE[0] = fRec18SE[0];
			iTemp21SE = ((fTemp2SE < 0.77272725f) & (0.77272725f < fTemp3SE)); // step: 329
			iVec80SE[0] = iTemp21SE;
			fTemp22SE = fVec83SE[1]; // step: 337
			fVec83SE[0] = (fTemp22SE + float((float((iTemp21SE + -iVec80SE[1] /* Sum */)) > 0.0f)) + (-0.030245591f * float((fTemp22SE > 0.0f))) /* Sum */);
			fVec78SE[IOTA0&63] = ((fSlow1BE * (fRec18SE[1] + fVec79SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec83SE[0] > 0.0f)))) /* Sum */);
			fRec20SE[0] = fVec87SE[(IOTA0-27)&31];
			fVec88SE[0] = fRec20SE[0];
			iTemp23SE = ((fTemp2SE < 0.8636364f) & (0.8636364f < fTemp3SE)); // step: 364
			iVec89SE[0] = iTemp23SE;
			fTemp24SE = fVec92SE[1]; // step: 372
			fVec92SE[0] = (fTemp24SE + float((float((iTemp23SE + -iVec89SE[1] /* Sum */)) > 0.0f)) + (-0.03474306f * float((fTemp24SE > 0.0f))) /* Sum */);
			fVec87SE[IOTA0&31] = ((fSlow1BE * (fRec20SE[1] + fVec88SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec92SE[0] > 0.0f)))) /* Sum */);
			fRec22SE[0] = fVec96SE[(IOTA0-24)&31];
			fVec97SE[0] = fRec22SE[0];
			iTemp25SE = ((fTemp2SE < 0.95454544f) & (0.95454544f < fTemp3SE)); // step: 399
			iVec98SE[0] = iTemp25SE;
			fTemp26SE = fVec101SE[1]; // step: 407
			fVec101SE[0] = (fTemp26SE + float((float((iTemp25SE + -iVec98SE[1] /* Sum */)) > 0.0f)) + (-0.039909296f * float((fTemp26SE > 0.0f))) /* Sum */);
			fVec96SE[IOTA0&31] = ((fSlow1BE * (fRec22SE[1] + fVec97SE[2] /* Sum */)) + (fSlow2BE * (fTemp5SI * float((fVec101SE[0] > 0.0f)))) /* Sum */);
			fTemp27SE = fRec0SE[0]; // step: 428
			fTemp28SE = fRec4SE[0]; // step: 431
			fTemp29SE = fRec6SE[0]; // step: 434
			fTemp30SE = fRec8SE[0]; // step: 437
			fTemp31SE = fRec10SE[0]; // step: 440
			fTemp32SE = (0.70710677f * fRec12SE[0]); // step: 444
			fTemp33SE = fRec14SE[0]; // step: 446
			fTemp34SE = fRec16SE[0]; // step: 449
			fTemp35SE = fRec18SE[0]; // step: 452
			fTemp36SE = fRec20SE[0]; // step: 455
			fTemp37SE = fRec22SE[0]; // step: 458
			output0[i] = (FAUSTFLOAT)(((0.9770084f * fTemp27SE) + (0.9293204f * fTemp28SE) + (0.87904906f * fTemp29SE) + (0.8257228f * fTemp30SE) + (0.76870614f * fTemp31SE) + fTemp32SE + (0.6396021f * fTemp33SE) + (0.56407607f * fTemp34SE) + (0.4767313f * fTemp35SE) + (0.36927447f * fTemp36SE) + (0.21320072f * fTemp37SE) /* Sum */));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fTemp32SE + (0.21320072f * fTemp27SE) + (0.36927447f * fTemp28SE) + (0.4767313f * fTemp29SE) + (0.56407607f * fTemp30SE) + (0.6396021f * fTemp31SE) + (0.76870614f * fTemp33SE) + (0.8257228f * fTemp34SE) + (0.87904906f * fTemp35SE) + (0.9293204f * fTemp36SE) + (0.9770084f * fTemp37SE) /* Sum */));  // Zone Exec Code
			// post processing
			fVec101SE[1] = fVec101SE[0];
			iVec98SE[1] = iVec98SE[0];
			fVec97SE[2] = fVec97SE[1];
			fVec97SE[1] = fVec97SE[0];
			fRec22SE[1] = fRec22SE[0];
			fVec92SE[1] = fVec92SE[0];
			iVec89SE[1] = iVec89SE[0];
			fVec88SE[2] = fVec88SE[1];
			fVec88SE[1] = fVec88SE[0];
			fRec20SE[1] = fRec20SE[0];
			fVec83SE[1] = fVec83SE[0];
			iVec80SE[1] = iVec80SE[0];
			fVec79SE[2] = fVec79SE[1];
			fVec79SE[1] = fVec79SE[0];
			fRec18SE[1] = fRec18SE[0];
			fVec74SE[1] = fVec74SE[0];
			iVec71SE[1] = iVec71SE[0];
			fVec70SE[2] = fVec70SE[1];
			fVec70SE[1] = fVec70SE[0];
			fRec16SE[1] = fRec16SE[0];
			fVec65SE[1] = fVec65SE[0];
			iVec62SE[1] = iVec62SE[0];
			fVec61SE[2] = fVec61SE[1];
			fVec61SE[1] = fVec61SE[0];
			fRec14SE[1] = fRec14SE[0];
			fVec56SE[1] = fVec56SE[0];
			iVec53SE[1] = iVec53SE[0];
			fVec52SE[2] = fVec52SE[1];
			fVec52SE[1] = fVec52SE[0];
			fRec12SE[1] = fRec12SE[0];
			fVec47SE[1] = fVec47SE[0];
			iVec44SE[1] = iVec44SE[0];
			fVec43SE[2] = fVec43SE[1];
			fVec43SE[1] = fVec43SE[0];
			fRec10SE[1] = fRec10SE[0];
			fVec38SE[1] = fVec38SE[0];
			iVec35SE[1] = iVec35SE[0];
			fVec34SE[2] = fVec34SE[1];
			fVec34SE[1] = fVec34SE[0];
			fRec8SE[1] = fRec8SE[0];
			fVec29SE[1] = fVec29SE[0];
			iVec26SE[1] = iVec26SE[0];
			fVec25SE[2] = fVec25SE[1];
			fVec25SE[1] = fVec25SE[0];
			fRec6SE[1] = fRec6SE[0];
			fVec20SE[1] = fVec20SE[0];
			iVec17SE[1] = iVec17SE[0];
			fVec16SE[2] = fVec16SE[1];
			fVec16SE[1] = fVec16SE[0];
			fRec4SE[1] = fRec4SE[0];
			fVec11SE[1] = fVec11SE[0];
			iVec9SI[1] = iVec9SI[0];
			iVec6SE[1] = iVec6SE[0];
			fVec3SE[1] = fVec3SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec1SE[2] = fVec1SE[1];
			fVec1SE[1] = fVec1SE[0];
			fRec0SE[1] = fRec0SE[0];
			++IOTA0;
		}
		fRec0SEState = fRec0SE[1];
		fVec1SEState[0] = fVec1SE[1];
		fVec1SEState[1] = fVec1SE[2];
		fVec2SEState = fVec2SE[1];
		fVec3SEState = fVec3SE[1];
		iVec6SEState = iVec6SE[1];
		iVec9SIState = iVec9SI[1];
		fVec11SEState = fVec11SE[1];
		fRec4SEState = fRec4SE[1];
		fVec16SEState[0] = fVec16SE[1];
		fVec16SEState[1] = fVec16SE[2];
		iVec17SEState = iVec17SE[1];
		fVec20SEState = fVec20SE[1];
		fRec6SEState = fRec6SE[1];
		fVec25SEState[0] = fVec25SE[1];
		fVec25SEState[1] = fVec25SE[2];
		iVec26SEState = iVec26SE[1];
		fVec29SEState = fVec29SE[1];
		fRec8SEState = fRec8SE[1];
		fVec34SEState[0] = fVec34SE[1];
		fVec34SEState[1] = fVec34SE[2];
		iVec35SEState = iVec35SE[1];
		fVec38SEState = fVec38SE[1];
		fRec10SEState = fRec10SE[1];
		fVec43SEState[0] = fVec43SE[1];
		fVec43SEState[1] = fVec43SE[2];
		iVec44SEState = iVec44SE[1];
		fVec47SEState = fVec47SE[1];
		fRec12SEState = fRec12SE[1];
		fVec52SEState[0] = fVec52SE[1];
		fVec52SEState[1] = fVec52SE[2];
		iVec53SEState = iVec53SE[1];
		fVec56SEState = fVec56SE[1];
		fRec14SEState = fRec14SE[1];
		fVec61SEState[0] = fVec61SE[1];
		fVec61SEState[1] = fVec61SE[2];
		iVec62SEState = iVec62SE[1];
		fVec65SEState = fVec65SE[1];
		fRec16SEState = fRec16SE[1];
		fVec70SEState[0] = fVec70SE[1];
		fVec70SEState[1] = fVec70SE[2];
		iVec71SEState = iVec71SE[1];
		fVec74SEState = fVec74SE[1];
		fRec18SEState = fRec18SE[1];
		fVec79SEState[0] = fVec79SE[1];
		fVec79SEState[1] = fVec79SE[2];
		iVec80SEState = iVec80SE[1];
		fVec83SEState = fVec83SE[1];
		fRec20SEState = fRec20SE[1];
		fVec88SEState[0] = fVec88SE[1];
		fVec88SEState[1] = fVec88SE[2];
		iVec89SEState = iVec89SE[1];
		fVec92SEState = fVec92SE[1];
		fRec22SEState = fRec22SE[1];
		fVec97SEState[0] = fVec97SE[1];
		fVec97SEState[1] = fVec97SE[2];
		iVec98SEState = iVec98SE[1];
		fVec101SEState = fVec101SE[1];
	}
};


