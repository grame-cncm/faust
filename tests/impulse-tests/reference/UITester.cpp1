//----------------------------------------------------------
// author: "O. Guillerminet"
// copyright: "(c) O. Guillerminet 2012"
// license: "BSD"
// name: "UI Tester"
// version: "1.0"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fbutton0;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fbargraph0;
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fentry2;
	FAUSTFLOAT 	fbargraph1;
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fentry3;
	FAUSTFLOAT 	fbargraph2;
	FAUSTFLOAT 	fbargraph3;
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fbutton1;
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fentry4;
	FAUSTFLOAT 	fbargraph4;
	FAUSTFLOAT 	fbargraph5;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "O. Guillerminet");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c) O. Guillerminet 2012");
		m->declare("filename", "UITester.dsp");
		m->declare("license", "BSD");
		m->declare("name", "UI Tester");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 6; }
	virtual int getNumOutputs() { return 34; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fentry0 = 6e+01f;
		fslider0 = 6e+01f;
		fslider1 = 6e+01f;
		fslider2 = 6e+01f;
		fslider3 = 6e+01f;
		fslider4 = 6e+01f;
		fslider5 = 6e+01f;
		fslider6 = 6e+01f;
		fbutton0 = 0.0;
		fslider7 = 6e+01f;
		fslider8 = 6e+01f;
		fslider9 = 6e+01f;
		fslider10 = 6e+01f;
		fentry1 = 6e+01f;
		fslider11 = 6e+01f;
		fslider12 = 6e+01f;
		fslider13 = 6e+01f;
		fentry2 = 6e+01f;
		fslider14 = 6e+01f;
		fslider15 = 6e+01f;
		fslider16 = 6e+01f;
		fentry3 = 6e+01f;
		fslider17 = 6e+01f;
		fbutton1 = 0.0;
		fslider18 = 6e+01f;
		fentry4 = 6e+01f;
	}
	virtual void instanceClear() {
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openTabBox("grp 1");
		ui_interface->openHorizontalBox("hmisc");
		ui_interface->addButton("button", &fbutton1);
		ui_interface->addHorizontalBargraph("hbar", &fbargraph5, 0.0f, 127.0f);
		ui_interface->addHorizontalSlider("hslider", &fslider18, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fentry4, "unit", "f");
		ui_interface->addNumEntry("num", &fentry4, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalBargraph("vbar", &fbargraph4, 0.0f, 127.0f);
		ui_interface->declare(&fslider17, "unit", "f");
		ui_interface->addVerticalSlider("vslider4", &fslider17, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("knobs");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->addVerticalSlider("knob1", &fslider3, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->addVerticalSlider("knob2", &fslider4, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->addVerticalSlider("knob3", &fslider5, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("sliders");
		ui_interface->addVerticalSlider("vslider1", &fslider0, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalSlider("vslider2", &fslider1, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalSlider("vslider3", &fslider2, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("vbox");
		ui_interface->addCheckButton("check1", &fcheckbox0);
		ui_interface->addCheckButton("check2", &fcheckbox1);
		ui_interface->declare(&fentry0, "style", "knob");
		ui_interface->addNumEntry("knob0", &fentry0, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("vmisc");
		ui_interface->addButton("button", &fbutton0);
		ui_interface->addHorizontalBargraph("hbar", &fbargraph3, 0.0f, 127.0f);
		ui_interface->declare(&fslider7, "unit", "Hz");
		ui_interface->addHorizontalSlider("hslider", &fslider7, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->openHorizontalBox("small box 1");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->addVerticalSlider("knob4", &fslider10, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fentry1, "unit", "f");
		ui_interface->addNumEntry("num1", &fentry1, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalBargraph("vbar1", &fbargraph0, 0.0f, 127.0f);
		ui_interface->declare(&fslider8, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider5", &fslider8, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fslider9, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider6", &fslider9, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("sub box 1");
		ui_interface->openHorizontalBox("small box 2");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->addVerticalSlider("knob5", &fslider13, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fentry2, "unit", "f");
		ui_interface->addNumEntry("num2", &fentry2, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalBargraph("vbar2", &fbargraph1, 0.0f, 127.0f);
		ui_interface->declare(&fslider11, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider7", &fslider11, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fslider12, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider8", &fslider12, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("small box 3");
		ui_interface->declare(&fslider16, "style", "knob");
		ui_interface->addVerticalSlider("knob6", &fslider16, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fentry3, "unit", "f");
		ui_interface->addNumEntry("num3", &fentry3, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->addVerticalBargraph("vbar3", &fbargraph2, 0.0f, 127.0f);
		ui_interface->declare(&fslider15, "unit", "m");
		ui_interface->addVerticalSlider("vslider10", &fslider15, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->declare(&fslider14, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider9", &fslider14, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(&fslider6, "unit", "Hz");
		ui_interface->addVerticalSlider("vslider4", &fslider6, 6e+01f, 0.0f, 127.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = float(fcheckbox0); // Zone 2, step: 1
		float 	fSlow1BE = float(fcheckbox1); // Zone 2, step: 2
		float 	fSlow2BE = float(fentry0); // Zone 2, step: 7
		float 	fSlow3BE = float(fslider0); // Zone 2, step: 8
		float 	fSlow4BE = float(fslider1); // Zone 2, step: 9
		float 	fSlow5BE = float(fslider2); // Zone 2, step: 10
		float 	fSlow6BE = float(fslider3); // Zone 2, step: 11
		float 	fSlow7BE = float(fslider4); // Zone 2, step: 12
		float 	fSlow8BE = float(fslider5); // Zone 2, step: 13
		float 	fSlow9BE = float(fslider6); // Zone 2, step: 14
		float 	fSlow10BE = float(fbutton0); // Zone 2, step: 15
		float 	fSlow11BE = float(fslider7); // Zone 2, step: 16
		float 	fSlow12BE = float(fslider8); // Zone 2, step: 17
		float 	fSlow13BE = float(fslider9); // Zone 2, step: 18
		float 	fSlow14BE = float(fslider10); // Zone 2, step: 19
		float 	fSlow15BE = float(fentry1); // Zone 2, step: 20
		float 	fSlow16SE;
		float 	fSlow17BE = float(fslider11); // Zone 2, step: 24
		float 	fSlow18BE = float(fslider12); // Zone 2, step: 25
		float 	fSlow19BE = float(fslider13); // Zone 2, step: 26
		float 	fSlow20BE = float(fentry2); // Zone 2, step: 27
		float 	fSlow21SE;
		float 	fSlow22BE = float(fslider14); // Zone 2, step: 31
		float 	fSlow23BE = float(fslider15); // Zone 2, step: 32
		float 	fSlow24BE = float(fslider16); // Zone 2, step: 33
		float 	fSlow25BE = float(fentry3); // Zone 2, step: 34
		float 	fSlow26SE;
		float 	fSlow27SE;
		float 	fSlow28BE = float(fslider17); // Zone 2, step: 41
		float 	fSlow29BE = float(fbutton1); // Zone 2, step: 42
		float 	fSlow30BE = float(fslider18); // Zone 2, step: 43
		float 	fSlow31BE = float(fentry4); // Zone 2, step: 44
		float 	fSlow32SE;
		float 	fSlow33SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* input3 = input[3]; // Zone 3
		FAUSTFLOAT* input4 = input[4]; // Zone 3
		FAUSTFLOAT* input5 = input[5]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		FAUSTFLOAT* output8 = output[8]; // Zone 3
		FAUSTFLOAT* output9 = output[9]; // Zone 3
		FAUSTFLOAT* output10 = output[10]; // Zone 3
		FAUSTFLOAT* output11 = output[11]; // Zone 3
		FAUSTFLOAT* output12 = output[12]; // Zone 3
		FAUSTFLOAT* output13 = output[13]; // Zone 3
		FAUSTFLOAT* output14 = output[14]; // Zone 3
		FAUSTFLOAT* output15 = output[15]; // Zone 3
		FAUSTFLOAT* output16 = output[16]; // Zone 3
		FAUSTFLOAT* output17 = output[17]; // Zone 3
		FAUSTFLOAT* output18 = output[18]; // Zone 3
		FAUSTFLOAT* output19 = output[19]; // Zone 3
		FAUSTFLOAT* output20 = output[20]; // Zone 3
		FAUSTFLOAT* output21 = output[21]; // Zone 3
		FAUSTFLOAT* output22 = output[22]; // Zone 3
		FAUSTFLOAT* output23 = output[23]; // Zone 3
		FAUSTFLOAT* output24 = output[24]; // Zone 3
		FAUSTFLOAT* output25 = output[25]; // Zone 3
		FAUSTFLOAT* output26 = output[26]; // Zone 3
		FAUSTFLOAT* output27 = output[27]; // Zone 3
		FAUSTFLOAT* output28 = output[28]; // Zone 3
		FAUSTFLOAT* output29 = output[29]; // Zone 3
		FAUSTFLOAT* output30 = output[30]; // Zone 3
		FAUSTFLOAT* output31 = output[31]; // Zone 3
		FAUSTFLOAT* output32 = output[32]; // Zone 3
		FAUSTFLOAT* output33 = output[33]; // Zone 3
		for (int i=0; i<count; i++) {
			fSlow16SE = (float)input0[i];
			fSlow21SE = (float)input1[i];
			fSlow26SE = (float)input2[i];
			fSlow27SE = (float)input3[i];
			fSlow32SE = (float)input4[i];
			fSlow33SE = (float)input5[i];
			output0[i] = (FAUSTFLOAT)(fSlow0BE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fSlow1BE);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(fSlow2BE);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(fSlow3BE);  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(fSlow4BE);  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)(fSlow5BE);  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)(fSlow6BE);  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)(fSlow7BE);  // Zone Exec Code
			output8[i] = (FAUSTFLOAT)(fSlow8BE);  // Zone Exec Code
			output9[i] = (FAUSTFLOAT)(fSlow9BE);  // Zone Exec Code
			output10[i] = (FAUSTFLOAT)(fSlow10BE);  // Zone Exec Code
			output11[i] = (FAUSTFLOAT)(fSlow11BE);  // Zone Exec Code
			output12[i] = (FAUSTFLOAT)(fSlow12BE);  // Zone Exec Code
			output13[i] = (FAUSTFLOAT)(fSlow13BE);  // Zone Exec Code
			output14[i] = (FAUSTFLOAT)(fSlow14BE);  // Zone Exec Code
			output15[i] = (FAUSTFLOAT)(fSlow15BE);  // Zone Exec Code
			output16[i] = (FAUSTFLOAT)(fSlow16SE);  // Zone Exec Code
			output17[i] = (FAUSTFLOAT)(fSlow17BE);  // Zone Exec Code
			output18[i] = (FAUSTFLOAT)(fSlow18BE);  // Zone Exec Code
			output19[i] = (FAUSTFLOAT)(fSlow19BE);  // Zone Exec Code
			output20[i] = (FAUSTFLOAT)(fSlow20BE);  // Zone Exec Code
			output21[i] = (FAUSTFLOAT)(fSlow21SE);  // Zone Exec Code
			output22[i] = (FAUSTFLOAT)(fSlow22BE);  // Zone Exec Code
			output23[i] = (FAUSTFLOAT)(fSlow23BE);  // Zone Exec Code
			output24[i] = (FAUSTFLOAT)(fSlow24BE);  // Zone Exec Code
			output25[i] = (FAUSTFLOAT)(fSlow25BE);  // Zone Exec Code
			output26[i] = (FAUSTFLOAT)(fSlow26SE);  // Zone Exec Code
			output27[i] = (FAUSTFLOAT)(fSlow27SE);  // Zone Exec Code
			output28[i] = (FAUSTFLOAT)(fSlow28BE);  // Zone Exec Code
			output29[i] = (FAUSTFLOAT)(fSlow29BE);  // Zone Exec Code
			output30[i] = (FAUSTFLOAT)(fSlow30BE);  // Zone Exec Code
			output31[i] = (FAUSTFLOAT)(fSlow31BE);  // Zone Exec Code
			output32[i] = (FAUSTFLOAT)(fSlow32SE);  // Zone Exec Code
			output33[i] = (FAUSTFLOAT)(fSlow33SE);  // Zone Exec Code
		}
		fbargraph0 = fSlow16SE;
		fbargraph1 = fSlow21SE;
		fbargraph2 = fSlow26SE;
		fbargraph3 = fSlow27SE;
		fbargraph4 = fSlow32SE;
		fbargraph5 = fSlow33SE;
	}
};


