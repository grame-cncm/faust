declare version "2.58.3";
declare compile_options "-single -scal ../../build/bin/faust -I dsp -e dsp/grain3.dsp -o reference/grain3.box";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.1";
declare compilation_options "-single -scal -e grain3.dsp -o grain3.dsp";
declare delays_lib_name "Faust Delay Library";
declare delays_lib_version "0.1";
declare filename "grain3.dsp";
declare library_path "/Documents/faust-github-faust2/tests/impulse-tests/dsp/grain3.dsp";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.3";
declare name "grain3";
declare noises_lib_name "Faust Noise Generator Library";
declare noises_lib_version "0.0";
declare oscillators_lib_name "Faust Oscillator Library";
declare oscillators_lib_version "0.1";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.1";
ID_0 = _, 1;
ID_1 = (ID_0 : +);
ID_2 = ID_1 ~ _;
ID_3 = ID_2, 1;
ID_4 = - : float;
ID_5 = (ID_3 : ID_4);
ID_6 = ID_5, 6.2831855f;
ID_7 = (ID_6 : *);
ID_8 = ID_7, 65536.0f;
ID_9 = / : sin;
ID_10 = (ID_8 : ID_9);
ID_11 = fconstant(int fSamplingFreq, <math.h>);
ID_12 = 1.0f, ID_11;
ID_13 = (ID_12 : max);
ID_14 = 1.92e+05f, ID_13;
ID_15 = min : float;
ID_16 = (ID_14 : ID_15);
ID_17 = 0, ID_16;
ID_18 = (+ : \(x4).(x4,(x4 : floor) : -));
ID_19 = ID_18 ~ _;
ID_20 = _, 65536.0f;
ID_21 = * : int;
ID_22 = ID_20 : ID_21;
ID_23 = ID_19 : ID_22;
ID_24 = / : ID_23;
ID_25 = (ID_17 : ID_24);
ID_26 = ID_10, ID_25;
ID_27 = 65536, ID_26;
ID_28 = (ID_27 : rdtable);
ID_29 = hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f);
ID_30 = 1000, ID_29;
ID_31 = (ID_30 : /);
ID_32 = ID_31, ID_16;
ID_33 = (+ : \(x5).(x5,(x5 : floor) : -));
ID_34 = ID_33 ~ _;
ID_35 = _, 1.0f;
ID_36 = _, 0.5f;
ID_37 = _, 2;
ID_38 = _, 3.1415927f;
ID_39 = * : cos;
ID_40 = ID_38 : ID_39;
ID_41 = * : ID_40;
ID_42 = ID_37 : ID_41;
ID_43 = * : ID_42;
ID_44 = ID_36 : ID_43;
ID_45 = * : ID_44;
ID_46 = ID_35 : ID_45;
ID_47 = ID_34 : ID_46;
ID_48 = / : ID_47;
ID_49 = (ID_32 : ID_48);
ID_50 = ID_28, ID_49;
ID_51 = (ID_50 : *);
ID_52 = / : cos;
ID_53 = (ID_8 : ID_52);
ID_54 = ID_53, ID_25;
ID_55 = 65536, ID_54;
ID_56 = (ID_55 : rdtable);
ID_57 = * : sin;
ID_58 = ID_38 : ID_57;
ID_59 = * : ID_58;
ID_60 = ID_37 : ID_59;
ID_61 = * : ID_60;
ID_62 = ID_36 : ID_61;
ID_63 = * : ID_62;
ID_64 = ID_35 : ID_63;
ID_65 = ID_34 : ID_64;
ID_66 = / : ID_65;
ID_67 = (ID_32 : ID_66);
ID_68 = ID_56, ID_67;
ID_69 = (ID_68 : *);
ID_70 = ID_51, ID_69;
ID_71 = (ID_70 : +);
ID_72 = _, ID_71;
ID_73 = (ID_72 : *);
ID_74 = _, 12345;
ID_75 = (ID_74 : +);
ID_76 = _, 1103515245;
ID_77 = (ID_76 : *);
ID_78 = ID_77, -1;
ID_79 = (ID_78 : &);
ID_80 = ID_75 ~ ID_79;
ID_81 = ID_80, 2.1474836e+09f;
ID_82 = ID_36 : *;
ID_83 = + : ID_82;
ID_84 = ID_0 : ID_83;
ID_85 = / : ID_84;
ID_86 = (ID_81 : ID_85);
ID_87 = hslider("rarefaction", 0.2f, 0.0f, 1.0f, 0.01f);
ID_88 = ID_86, ID_87;
ID_89 = (+ : \(x6).(x6,(x6 : floor) : -));
ID_90 = ID_89 ~ _;
ID_91 = ID_35 : *;
ID_92 = ID_90 : ID_91;
ID_93 = / : ID_92;
ID_94 = (ID_32 : ID_93);
ID_95 = ID_94, 0.0001f;
ID_96 = (ID_95 : >);
ID_97 = ID_94, 1;
ID_98 = (ID_97 : @);
ID_99 = ID_98, 0.0001f;
ID_100 = (ID_99 : <=);
ID_101 = ID_96, ID_100;
ID_102 = (ID_101 : *);
ID_103 = _, _;
ID_104 = ID_102, ID_103;
ID_105 = (ID_104 : select2);
ID_106 = ID_105 ~ _;
ID_107 = > : ID_106;
ID_108 = (ID_88 : ID_107);
ID_109 = ID_73, ID_108;
ID_110 = ID_109 : *;
ID_111 = \(x1).(((x1,(524289,(0,((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x2).(x2,(x2 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x2).(x2,(x2 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_ : int) : max) : min) : @),(1,(((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_),((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_ : floor) : -) : -) : *),((x1,(524289,(0,(((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x2).(x2,(x2 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x2).(x2,(x2 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_ : int),1 : +) : max) : min) : @),(((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_),((_,12345 : +)~((_,1103515245 : *),-1 : &),2.1474836e+09f : / : _,1 : + : _,0.5f : * : _,hslider("delaymax", 1e+03f, 1e+01f, 1e+04f, 1.0f) : * : _,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : _,1000 : / : (((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),0.0001f : >),((((1000,hslider("grainsize [unit:msec]", 1e+02f, 1.0f, 1e+03f, 1.0f) : /),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : / : (+ : \(x3).(x3,(x3 : floor) : -))~_ : _,1.0f : *),1 : @),0.0001f : <=) : *),_,_ : select2)~_ : floor) : -) : *) : +) : ID_110;
ID_112 = _ : ID_111;
process = ID_112;
