//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2009"
// license: "BSD"
// name: "osci"
// version: "1.0"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec4SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec4SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec4SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec4SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec4SI[1] = iVec4SIState;
				for (int i=0; i<count; i++) {
					iVec4SI[0] = (iVec4SI[1] + 1);
					output[i] = sinf((9.58738e-05f * float((iVec4SI[0] + -1))));
					// post processing
					iVec4SI[1] = iVec4SI[0];
				}
				iVec4SIState = iVec4SI[1];
				output += 128;
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	FAUSTFLOAT 	fslider1;
	float 	fConst0KI; // step: 32
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	static float 	ftbl0SI[65537];
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2009");
		m->declare("filename", "osci.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "osci");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65537,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (1.0f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 32
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fslider1 = 564.0f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec2SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Oscillator");
		ui_interface->declare(&fslider1, "unit", "Hz");
		ui_interface->addHorizontalSlider("freq", &fslider1, 564.0f, 2e+01f, 2.4e+04f, 1.0f);
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("volume", &fslider0, 0.0f, -96.0f, 0.0f, 0.1f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (0.001f * powf(1e+01f,(0.05f * float(fslider0)))); // Zone 2, step: 11
		float 	fVec0SE[2];
		float 	fSlow1BE = (fConst0KI * float(fslider1)); // Zone 2, step: 33
		float 	fTemp0SE; // step: 35
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		int 	iTemp2SE; // step: 44
		float 	fTemp3SE; // step: 61
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec2SE[1] = fVec2SEState;
		for (int i=0; i<count; i++) {
			fVec0SE[0] = (fSlow0BE + (0.999f * fVec0SE[1]) /* Sum */);
			fTemp0SE = fVec2SE[1]; // step: 35
			fVec2SE[0] = (fSlow1BE + fTemp0SE + -floorf((fSlow1BE + fTemp0SE /* Sum */)) /* Sum */);
			fTemp1SE = (65536.0f * fVec2SE[0]); // step: 43
			iTemp2SE = int(fTemp1SE); // step: 44
			fTemp3SE = ftbl0SI[std::max(0, std::min(iTemp2SE, 65536))]; // step: 61
			output0[i] = (FAUSTFLOAT)((fVec0SE[0] * (fTemp3SE + ((fTemp1SE + -floorf(fTemp1SE) /* Sum */) * (ftbl0SI[std::max(0, std::min((iTemp2SE + 1 /* Sum */), 65536))] + -fTemp3SE /* Sum */)) /* Sum */)));  // Zone Exec Code
			// post processing
			fVec2SE[1] = fVec2SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec2SEState = fVec2SE[1];
	}
};


float 	mydsp::ftbl0SI[65537];
