//----------------------------------------------------------
// author: "Yann Orlarey"
// copyright: "Grame"
// license: "STK-4.3"
// name: "SmoothDelay"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0KI; // step: 22
	float 	fConst1KI; // step: 23
	FAUSTFLOAT 	fslider1;
	float 	fConst2KI; // step: 30
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	int 	IOTA0;
	float 	fVec6SE[524288]; // Ring Delay
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec3SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec3SEState; // Single Delay
	// Recursion delay fVec5SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SEState; // Single Delay
	float 	fVec13SE[524288]; // Ring Delay
	// Recursion delay fVec12SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Yann Orlarey");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "Grame");
		m->declare("filename", "smoothdelay.dsp");
		m->declare("license", "STK-4.3");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "SmoothDelay");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 22
		fConst1KI = (1e+03f / fConst0KI); // step: 23
		fConst2KI = (0.001f * fConst0KI); // step: 30
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 68.0329f;
		fslider1 = 114.5f;
		fslider2 = 87.11f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec1SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec6SE[i] = 0; }
		fVec6SE[0] = -1;  // detect unintialized
		fVec2SEState = 0;
		fVec3SEState = 0;
		fVec5SEState = 0;
		for (int i = 1; i < 524288; i++) { fVec13SE[i] = 0; }
		fVec13SE[0] = -1;  // detect unintialized
		fVec12SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("SmoothDelay");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("delay", &fslider1, 114.5f, 0.0f, 5e+03f, 0.1f);
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->addHorizontalSlider("feedback", &fslider2, 87.11f, 0.0f, 1e+02f, 0.1f);
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "unit", "ms");
		ui_interface->addHorizontalSlider("interpolation", &fslider0, 68.0329f, 1.0f, 1e+02f, 0.1f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 4
		float 	fTemp1SE; // step: 7
		float 	fSlow0BE = (fConst1KI / float(fslider0)); // Zone 2, step: 24
		float 	fSlow1BE = (fConst2KI * float(fslider1)); // Zone 2, step: 31
		float 	fTemp2SE; // step: 33
		float 	fTemp3SE; // step: 40
		float 	fTemp4SE; // step: 45
		float 	fVec0SE[2];
		float 	fVec1SE[2];
		float 	fTemp5SE; // step: 52
		float 	fTemp6SE; // step: 54
		float 	fSlow2BE = (0.01f * float(fslider2)); // Zone 2, step: 60
		float 	fTemp7SE; // step: 65
		float 	fVec2SE[2];
		int 	iTemp8SE; // step: 74
		float 	fVec3SE[2];
		int 	iTemp9SE; // step: 84
		float 	fVec5SE[2];
		float 	fTemp10SE; // step: 96
		float 	fVec12SE[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec1SE[1] = fVec1SEState;
		fVec2SE[1] = fVec2SEState;
		fVec3SE[1] = fVec3SEState;
		fVec5SE[1] = fVec5SEState;
		fVec12SE[1] = fVec12SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[1]; // step: 4
			fTemp1SE = fVec1SE[1]; // step: 7
			fTemp2SE = fVec2SE[1]; // step: 33
			fTemp3SE = fVec3SE[1]; // step: 40
			fTemp4SE = (((fTemp0SE != 0.0f)) ? ((((fTemp1SE > 0.0f) & (fTemp1SE < 1.0f))) ? fTemp0SE : 0.0f) : ((((fTemp1SE == 0.0f) & (fSlow1BE != fTemp2SE))) ? fSlow0BE : ((((fTemp1SE == 1.0f) & (fSlow1BE != fTemp3SE))) ? -fSlow0BE : 0.0f))); // step: 45
			fVec0SE[0] = fTemp4SE;
			fVec1SE[0] = std::max(0.0f, std::min(1.0f, (fTemp1SE + fTemp4SE /* Sum */)));
			fTemp5SE = fVec1SE[0]; // step: 52
			fTemp6SE = (1.0f + -fTemp5SE /* Sum */); // step: 54
			fTemp7SE = ((float)input0[i] + (fSlow2BE * fVec5SE[1]) /* Sum */); // step: 65
			fVec6SE[IOTA0&524287] = fTemp7SE;
			fVec2SE[0] = ((((fTemp1SE >= 1.0f) & (fTemp3SE != fSlow1BE))) ? fSlow1BE : fTemp2SE);
			iTemp8SE = (int(fVec2SE[0]) & 524287); // step: 74
			fVec3SE[0] = ((((fTemp1SE <= 0.0f) & (fTemp2SE != fSlow1BE))) ? fSlow1BE : fTemp3SE);
			iTemp9SE = (int(fVec3SE[0]) & 524287); // step: 84
			fVec5SE[0] = ((fTemp6SE * fVec6SE[(IOTA0-iTemp8SE)&524287]) + (fTemp5SE * fVec6SE[(IOTA0-iTemp9SE)&524287]) /* Sum */);
			fTemp10SE = ((float)input1[i] + (fSlow2BE * fVec12SE[1]) /* Sum */); // step: 96
			fVec13SE[IOTA0&524287] = fTemp10SE;
			fVec12SE[0] = ((fTemp6SE * fVec13SE[(IOTA0-iTemp8SE)&524287]) + (fTemp5SE * fVec13SE[(IOTA0-iTemp9SE)&524287]) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fVec5SE[0]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fVec12SE[0]);  // Zone Exec Code
			// post processing
			fVec12SE[1] = fVec12SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec3SE[1] = fVec3SE[0];
			fVec2SE[1] = fVec2SE[0];
			++IOTA0;
			fVec1SE[1] = fVec1SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec1SEState = fVec1SE[1];
		fVec2SEState = fVec2SE[1];
		fVec3SEState = fVec3SE[1];
		fVec5SEState = fVec5SE[1];
		fVec12SEState = fVec12SE[1];
	}
};


