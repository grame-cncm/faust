//----------------------------------------------------------
// name: "cubic_distortion"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState; // Single Delay
	float 	fConst0KI; // step: 11
	float 	fConst1KI; // step: 12
	FAUSTFLOAT 	fslider0;
	float 	fConst2KI; // step: 19
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	// Recursion delay fVec5SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SEState; // Single Delay
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec11SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec11SEState; // Single Delay
	float 	fVec13SEState; // Single Delay
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	float 	fConst3KI; // step: 130
	float 	fConst4KI; // step: 132
	float 	fConst5KI; // step: 136
	float 	fConst6KI; // step: 140
	float 	fConst7KI; // step: 144
	float 	fConst8KI; // step: 145
	float 	fConst9KI; // step: 148
	// Recursion delay fVec18SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec18SEState; // Single Delay
	float 	fVec17SEState[2]; // Copy Delay
	float 	fConst10KI; // step: 160
	float 	fConst11KI; // step: 161
	float 	fConst12KI; // step: 166
	float 	fConst13KI; // step: 177
	float 	fConst14KI; // step: 181
	float 	fConst15KI; // step: 185
	// Recursion delay fVec23SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec23SEState; // Single Delay
	float 	fVec22SEState[2]; // Copy Delay
	float 	fConst16KI; // step: 196
	float 	fConst17KI; // step: 197
	float 	fConst18KI; // step: 202
	float 	fConst19KI; // step: 213
	float 	fConst20KI; // step: 217
	float 	fConst21KI; // step: 221
	// Recursion delay fVec28SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SEState; // Single Delay
	float 	fVec27SEState[2]; // Copy Delay
	float 	fConst22KI; // step: 236
	float 	fConst23KI; // step: 240
	float 	fConst24KI; // step: 244
	// Recursion delay fVec31SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SEState; // Single Delay
	float 	fVec30SEState[2]; // Copy Delay
	float 	fConst25KI; // step: 256
	float 	fConst26KI; // step: 257
	float 	fConst27KI; // step: 262
	float 	fConst28KI; // step: 273
	float 	fConst29KI; // step: 277
	float 	fConst30KI; // step: 281
	// Recursion delay fVec36SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec36SEState; // Single Delay
	float 	fVec35SEState[2]; // Copy Delay
	float 	fConst31KI; // step: 292
	float 	fConst32KI; // step: 296
	float 	fConst33KI; // step: 307
	float 	fConst34KI; // step: 311
	float 	fConst35KI; // step: 315
	// Recursion delay fVec41SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec41SEState; // Single Delay
	float 	fVec40SEState[2]; // Copy Delay
	float 	fConst36KI; // step: 326
	float 	fConst37KI; // step: 330
	float 	fConst38KI; // step: 338
	float 	fConst39KI; // step: 339
	float 	fConst40KI; // step: 343
	float 	fConst41KI; // step: 346
	float 	fConst42KI; // step: 349
	float 	fConst43KI; // step: 350
	float 	fConst44KI; // step: 353
	// Recursion delay fVec46SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec46SEState; // Single Delay
	float 	fVec45SEState[2]; // Copy Delay
	float 	fConst45KI; // step: 363
	float 	fConst46KI; // step: 364
	float 	fConst47KI; // step: 369
	float 	fConst48KI; // step: 378
	float 	fConst49KI; // step: 381
	float 	fConst50KI; // step: 385
	// Recursion delay fVec51SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec51SEState; // Single Delay
	float 	fVec50SEState[2]; // Copy Delay
	float 	fConst51KI; // step: 395
	float 	fConst52KI; // step: 396
	float 	fConst53KI; // step: 401
	float 	fConst54KI; // step: 410
	float 	fConst55KI; // step: 413
	float 	fConst56KI; // step: 417
	// Recursion delay fVec56SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec56SEState; // Single Delay
	float 	fVec55SEState[2]; // Copy Delay
	float 	fConst57KI; // step: 430
	float 	fConst58KI; // step: 433
	float 	fConst59KI; // step: 437
	// Recursion delay fVec59SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec59SEState; // Single Delay
	float 	fVec58SEState[2]; // Copy Delay
	float 	fConst60KI; // step: 447
	float 	fConst61KI; // step: 448
	float 	fConst62KI; // step: 453
	float 	fConst63KI; // step: 462
	float 	fConst64KI; // step: 465
	float 	fConst65KI; // step: 469
	// Recursion delay fVec64SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec64SEState; // Single Delay
	float 	fVec63SEState[2]; // Copy Delay
	float 	fConst66KI; // step: 479
	float 	fConst67KI; // step: 483
	float 	fConst68KI; // step: 492
	float 	fConst69KI; // step: 495
	float 	fConst70KI; // step: 499
	// Recursion delay fVec69SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec69SEState; // Single Delay
	float 	fVec68SEState[2]; // Copy Delay
	float 	fConst71KI; // step: 509
	float 	fConst72KI; // step: 513
	float 	fConst73KI; // step: 521
	float 	fConst74KI; // step: 522
	float 	fConst75KI; // step: 526
	float 	fConst76KI; // step: 529
	float 	fConst77KI; // step: 532
	float 	fConst78KI; // step: 533
	float 	fConst79KI; // step: 536
	// Recursion delay fVec74SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec74SEState; // Single Delay
	float 	fVec73SEState[2]; // Copy Delay
	float 	fConst80KI; // step: 546
	float 	fConst81KI; // step: 547
	float 	fConst82KI; // step: 552
	float 	fConst83KI; // step: 561
	float 	fConst84KI; // step: 564
	float 	fConst85KI; // step: 568
	// Recursion delay fVec79SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec79SEState; // Single Delay
	float 	fVec78SEState[2]; // Copy Delay
	float 	fConst86KI; // step: 578
	float 	fConst87KI; // step: 579
	float 	fConst88KI; // step: 584
	float 	fConst89KI; // step: 593
	float 	fConst90KI; // step: 596
	float 	fConst91KI; // step: 600
	// Recursion delay fVec84SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec84SEState; // Single Delay
	float 	fVec83SEState[2]; // Copy Delay
	float 	fConst92KI; // step: 613
	float 	fConst93KI; // step: 616
	float 	fConst94KI; // step: 620
	// Recursion delay fVec87SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec87SEState; // Single Delay
	float 	fVec86SEState[2]; // Copy Delay
	float 	fConst95KI; // step: 630
	float 	fConst96KI; // step: 631
	float 	fConst97KI; // step: 636
	float 	fConst98KI; // step: 645
	float 	fConst99KI; // step: 648
	float 	fConst100KI; // step: 652
	// Recursion delay fVec92SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec92SEState; // Single Delay
	float 	fVec91SEState[2]; // Copy Delay
	float 	fConst101KI; // step: 662
	float 	fConst102KI; // step: 666
	float 	fConst103KI; // step: 675
	float 	fConst104KI; // step: 678
	float 	fConst105KI; // step: 682
	// Recursion delay fVec97SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec97SEState; // Single Delay
	float 	fVec96SEState[2]; // Copy Delay
	float 	fConst106KI; // step: 692
	float 	fConst107KI; // step: 696
	float 	fConst108KI; // step: 704
	float 	fConst109KI; // step: 705
	float 	fConst110KI; // step: 709
	float 	fConst111KI; // step: 712
	float 	fConst112KI; // step: 715
	float 	fConst113KI; // step: 716
	float 	fConst114KI; // step: 719
	// Recursion delay fVec102SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec102SEState; // Single Delay
	float 	fVec101SEState[2]; // Copy Delay
	float 	fConst115KI; // step: 729
	float 	fConst116KI; // step: 730
	float 	fConst117KI; // step: 735
	float 	fConst118KI; // step: 744
	float 	fConst119KI; // step: 747
	float 	fConst120KI; // step: 751
	// Recursion delay fVec107SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec107SEState; // Single Delay
	float 	fVec106SEState[2]; // Copy Delay
	float 	fConst121KI; // step: 761
	float 	fConst122KI; // step: 762
	float 	fConst123KI; // step: 767
	float 	fConst124KI; // step: 776
	float 	fConst125KI; // step: 779
	float 	fConst126KI; // step: 783
	// Recursion delay fVec112SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec112SEState; // Single Delay
	float 	fVec111SEState[2]; // Copy Delay
	float 	fConst127KI; // step: 796
	float 	fConst128KI; // step: 799
	float 	fConst129KI; // step: 803
	// Recursion delay fVec115SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec115SEState; // Single Delay
	float 	fVec114SEState[2]; // Copy Delay
	float 	fConst130KI; // step: 813
	float 	fConst131KI; // step: 814
	float 	fConst132KI; // step: 819
	float 	fConst133KI; // step: 828
	float 	fConst134KI; // step: 831
	float 	fConst135KI; // step: 835
	// Recursion delay fVec120SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec120SEState; // Single Delay
	float 	fVec119SEState[2]; // Copy Delay
	float 	fConst136KI; // step: 845
	float 	fConst137KI; // step: 849
	float 	fConst138KI; // step: 858
	float 	fConst139KI; // step: 861
	float 	fConst140KI; // step: 865
	// Recursion delay fVec125SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec125SEState; // Single Delay
	float 	fVec124SEState[2]; // Copy Delay
	float 	fConst141KI; // step: 875
	float 	fConst142KI; // step: 879
	float 	fConst143KI; // step: 887
	float 	fConst144KI; // step: 888
	float 	fConst145KI; // step: 892
	float 	fConst146KI; // step: 895
	float 	fConst147KI; // step: 898
	float 	fConst148KI; // step: 899
	float 	fConst149KI; // step: 902
	// Recursion delay fVec130SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec130SEState; // Single Delay
	float 	fVec129SEState[2]; // Copy Delay
	float 	fConst150KI; // step: 912
	float 	fConst151KI; // step: 913
	float 	fConst152KI; // step: 918
	float 	fConst153KI; // step: 927
	float 	fConst154KI; // step: 930
	float 	fConst155KI; // step: 934
	// Recursion delay fVec135SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec135SEState; // Single Delay
	float 	fVec134SEState[2]; // Copy Delay
	float 	fConst156KI; // step: 944
	float 	fConst157KI; // step: 945
	float 	fConst158KI; // step: 950
	float 	fConst159KI; // step: 959
	float 	fConst160KI; // step: 962
	float 	fConst161KI; // step: 966
	// Recursion delay fVec140SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec140SEState; // Single Delay
	float 	fVec139SEState[2]; // Copy Delay
	float 	fConst162KI; // step: 979
	float 	fConst163KI; // step: 982
	float 	fConst164KI; // step: 986
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec142SEState[2]; // Copy Delay
	float 	fConst165KI; // step: 996
	float 	fConst166KI; // step: 997
	float 	fConst167KI; // step: 1002
	float 	fConst168KI; // step: 1011
	float 	fConst169KI; // step: 1014
	float 	fConst170KI; // step: 1018
	// Recursion delay fVec148SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec148SEState; // Single Delay
	float 	fVec147SEState[2]; // Copy Delay
	float 	fConst171KI; // step: 1028
	float 	fConst172KI; // step: 1032
	float 	fConst173KI; // step: 1041
	float 	fConst174KI; // step: 1044
	float 	fConst175KI; // step: 1048
	// Recursion delay fVec153SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec153SEState; // Single Delay
	float 	fVec152SEState[2]; // Copy Delay
	float 	fConst176KI; // step: 1058
	float 	fConst177KI; // step: 1062
	float 	fConst178KI; // step: 1070
	float 	fConst179KI; // step: 1071
	float 	fConst180KI; // step: 1075
	float 	fConst181KI; // step: 1078
	float 	fConst182KI; // step: 1081
	float 	fConst183KI; // step: 1082
	float 	fConst184KI; // step: 1085
	// Recursion delay fVec158SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec158SEState; // Single Delay
	float 	fVec157SEState[2]; // Copy Delay
	float 	fConst185KI; // step: 1095
	float 	fConst186KI; // step: 1096
	float 	fConst187KI; // step: 1101
	float 	fConst188KI; // step: 1110
	float 	fConst189KI; // step: 1113
	float 	fConst190KI; // step: 1117
	// Recursion delay fVec163SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec163SEState; // Single Delay
	float 	fVec162SEState[2]; // Copy Delay
	float 	fConst191KI; // step: 1127
	float 	fConst192KI; // step: 1128
	float 	fConst193KI; // step: 1133
	float 	fConst194KI; // step: 1142
	float 	fConst195KI; // step: 1145
	float 	fConst196KI; // step: 1149
	// Recursion delay fVec168SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec168SEState; // Single Delay
	float 	fVec167SEState[2]; // Copy Delay
	float 	fConst197KI; // step: 1162
	float 	fConst198KI; // step: 1165
	float 	fConst199KI; // step: 1169
	// Recursion delay fVec171SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec171SEState; // Single Delay
	float 	fVec170SEState[2]; // Copy Delay
	float 	fConst200KI; // step: 1179
	float 	fConst201KI; // step: 1180
	float 	fConst202KI; // step: 1185
	float 	fConst203KI; // step: 1194
	float 	fConst204KI; // step: 1197
	float 	fConst205KI; // step: 1201
	// Recursion delay fVec176SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec176SEState; // Single Delay
	float 	fVec175SEState[2]; // Copy Delay
	float 	fConst206KI; // step: 1211
	float 	fConst207KI; // step: 1215
	float 	fConst208KI; // step: 1224
	float 	fConst209KI; // step: 1227
	float 	fConst210KI; // step: 1231
	// Recursion delay fVec181SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec181SEState; // Single Delay
	float 	fVec180SEState[2]; // Copy Delay
	float 	fConst211KI; // step: 1241
	float 	fConst212KI; // step: 1245
	float 	fConst213KI; // step: 1253
	float 	fConst214KI; // step: 1254
	float 	fConst215KI; // step: 1258
	float 	fConst216KI; // step: 1261
	float 	fConst217KI; // step: 1264
	float 	fConst218KI; // step: 1265
	float 	fConst219KI; // step: 1268
	// Recursion delay fVec186SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec186SEState; // Single Delay
	float 	fVec185SEState[2]; // Copy Delay
	float 	fConst220KI; // step: 1278
	float 	fConst221KI; // step: 1279
	float 	fConst222KI; // step: 1284
	float 	fConst223KI; // step: 1293
	float 	fConst224KI; // step: 1296
	float 	fConst225KI; // step: 1300
	// Recursion delay fVec191SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec191SEState; // Single Delay
	float 	fVec190SEState[2]; // Copy Delay
	float 	fConst226KI; // step: 1310
	float 	fConst227KI; // step: 1311
	float 	fConst228KI; // step: 1316
	float 	fConst229KI; // step: 1325
	float 	fConst230KI; // step: 1328
	float 	fConst231KI; // step: 1332
	// Recursion delay fVec196SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec196SEState; // Single Delay
	float 	fVec195SEState[2]; // Copy Delay
	float 	fConst232KI; // step: 1345
	float 	fConst233KI; // step: 1348
	float 	fConst234KI; // step: 1352
	// Recursion delay fVec199SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec199SEState; // Single Delay
	float 	fVec198SEState[2]; // Copy Delay
	float 	fConst235KI; // step: 1362
	float 	fConst236KI; // step: 1363
	float 	fConst237KI; // step: 1368
	float 	fConst238KI; // step: 1377
	float 	fConst239KI; // step: 1380
	float 	fConst240KI; // step: 1384
	// Recursion delay fVec204SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec204SEState; // Single Delay
	float 	fVec203SEState[2]; // Copy Delay
	float 	fConst241KI; // step: 1394
	float 	fConst242KI; // step: 1398
	float 	fConst243KI; // step: 1407
	float 	fConst244KI; // step: 1410
	float 	fConst245KI; // step: 1414
	// Recursion delay fVec209SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec209SEState; // Single Delay
	float 	fVec208SEState[2]; // Copy Delay
	float 	fConst246KI; // step: 1424
	float 	fConst247KI; // step: 1428
	float 	fConst248KI; // step: 1436
	float 	fConst249KI; // step: 1437
	float 	fConst250KI; // step: 1441
	float 	fConst251KI; // step: 1444
	float 	fConst252KI; // step: 1447
	float 	fConst253KI; // step: 1448
	float 	fConst254KI; // step: 1451
	// Recursion delay fVec214SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec214SEState; // Single Delay
	float 	fVec213SEState[2]; // Copy Delay
	float 	fConst255KI; // step: 1461
	float 	fConst256KI; // step: 1462
	float 	fConst257KI; // step: 1467
	float 	fConst258KI; // step: 1476
	float 	fConst259KI; // step: 1479
	float 	fConst260KI; // step: 1483
	// Recursion delay fVec219SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec219SEState; // Single Delay
	float 	fVec218SEState[2]; // Copy Delay
	float 	fConst261KI; // step: 1493
	float 	fConst262KI; // step: 1494
	float 	fConst263KI; // step: 1499
	float 	fConst264KI; // step: 1508
	float 	fConst265KI; // step: 1511
	float 	fConst266KI; // step: 1515
	// Recursion delay fVec224SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec224SEState; // Single Delay
	float 	fVec223SEState[2]; // Copy Delay
	float 	fConst267KI; // step: 1528
	float 	fConst268KI; // step: 1531
	float 	fConst269KI; // step: 1535
	// Recursion delay fVec227SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec227SEState; // Single Delay
	float 	fVec226SEState[2]; // Copy Delay
	float 	fConst270KI; // step: 1545
	float 	fConst271KI; // step: 1546
	float 	fConst272KI; // step: 1551
	float 	fConst273KI; // step: 1560
	float 	fConst274KI; // step: 1563
	float 	fConst275KI; // step: 1567
	// Recursion delay fVec232SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec232SEState; // Single Delay
	float 	fVec231SEState[2]; // Copy Delay
	float 	fConst276KI; // step: 1577
	float 	fConst277KI; // step: 1581
	float 	fConst278KI; // step: 1590
	float 	fConst279KI; // step: 1593
	float 	fConst280KI; // step: 1597
	// Recursion delay fVec237SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec237SEState; // Single Delay
	float 	fVec236SEState[2]; // Copy Delay
	float 	fConst281KI; // step: 1607
	float 	fConst282KI; // step: 1611
	float 	fConst283KI; // step: 1619
	float 	fConst284KI; // step: 1620
	float 	fConst285KI; // step: 1624
	float 	fConst286KI; // step: 1627
	float 	fConst287KI; // step: 1630
	float 	fConst288KI; // step: 1631
	float 	fConst289KI; // step: 1634
	// Recursion delay fVec242SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec242SEState; // Single Delay
	float 	fVec241SEState[2]; // Copy Delay
	float 	fConst290KI; // step: 1644
	float 	fConst291KI; // step: 1645
	float 	fConst292KI; // step: 1650
	float 	fConst293KI; // step: 1659
	float 	fConst294KI; // step: 1662
	float 	fConst295KI; // step: 1666
	// Recursion delay fVec247SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec247SEState; // Single Delay
	float 	fVec246SEState[2]; // Copy Delay
	float 	fConst296KI; // step: 1676
	float 	fConst297KI; // step: 1677
	float 	fConst298KI; // step: 1682
	float 	fConst299KI; // step: 1691
	float 	fConst300KI; // step: 1694
	float 	fConst301KI; // step: 1698
	// Recursion delay fVec252SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec252SEState; // Single Delay
	float 	fVec251SEState[2]; // Copy Delay
	float 	fConst302KI; // step: 1711
	float 	fConst303KI; // step: 1714
	float 	fConst304KI; // step: 1718
	// Recursion delay fVec255SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec255SEState; // Single Delay
	float 	fVec254SEState[2]; // Copy Delay
	float 	fConst305KI; // step: 1728
	float 	fConst306KI; // step: 1729
	float 	fConst307KI; // step: 1734
	float 	fConst308KI; // step: 1743
	float 	fConst309KI; // step: 1746
	float 	fConst310KI; // step: 1750
	// Recursion delay fVec260SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec260SEState; // Single Delay
	float 	fVec259SEState[2]; // Copy Delay
	float 	fConst311KI; // step: 1760
	float 	fConst312KI; // step: 1764
	float 	fConst313KI; // step: 1773
	float 	fConst314KI; // step: 1776
	float 	fConst315KI; // step: 1780
	// Recursion delay fVec265SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec265SEState; // Single Delay
	float 	fVec264SEState[2]; // Copy Delay
	float 	fConst316KI; // step: 1790
	float 	fConst317KI; // step: 1794
	float 	fConst318KI; // step: 1802
	float 	fConst319KI; // step: 1803
	float 	fConst320KI; // step: 1807
	float 	fConst321KI; // step: 1810
	float 	fConst322KI; // step: 1813
	float 	fConst323KI; // step: 1814
	float 	fConst324KI; // step: 1817
	// Recursion delay fVec270SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec270SEState; // Single Delay
	float 	fVec269SEState[2]; // Copy Delay
	float 	fConst325KI; // step: 1827
	float 	fConst326KI; // step: 1828
	float 	fConst327KI; // step: 1833
	float 	fConst328KI; // step: 1842
	float 	fConst329KI; // step: 1845
	float 	fConst330KI; // step: 1849
	// Recursion delay fVec275SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec275SEState; // Single Delay
	float 	fVec274SEState[2]; // Copy Delay
	float 	fConst331KI; // step: 1859
	float 	fConst332KI; // step: 1860
	float 	fConst333KI; // step: 1865
	float 	fConst334KI; // step: 1874
	float 	fConst335KI; // step: 1877
	float 	fConst336KI; // step: 1881
	// Recursion delay fVec280SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec280SEState; // Single Delay
	float 	fVec279SEState[2]; // Copy Delay
	float 	fConst337KI; // step: 1894
	float 	fConst338KI; // step: 1897
	float 	fConst339KI; // step: 1901
	// Recursion delay fVec283SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec283SEState; // Single Delay
	float 	fVec282SEState[2]; // Copy Delay
	float 	fConst340KI; // step: 1911
	float 	fConst341KI; // step: 1912
	float 	fConst342KI; // step: 1917
	float 	fConst343KI; // step: 1926
	float 	fConst344KI; // step: 1929
	float 	fConst345KI; // step: 1933
	// Recursion delay fVec288SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec288SEState; // Single Delay
	float 	fVec287SEState[2]; // Copy Delay
	float 	fConst346KI; // step: 1943
	float 	fConst347KI; // step: 1947
	float 	fConst348KI; // step: 1956
	float 	fConst349KI; // step: 1959
	float 	fConst350KI; // step: 1963
	// Recursion delay fVec293SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec293SEState; // Single Delay
	float 	fVec292SEState[2]; // Copy Delay
	float 	fConst351KI; // step: 1973
	float 	fConst352KI; // step: 1977
	float 	fConst353KI; // step: 1985
	float 	fConst354KI; // step: 1986
	float 	fConst355KI; // step: 1990
	float 	fConst356KI; // step: 1993
	float 	fConst357KI; // step: 1996
	float 	fConst358KI; // step: 1997
	float 	fConst359KI; // step: 2000
	// Recursion delay fVec298SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec298SEState; // Single Delay
	float 	fVec297SEState[2]; // Copy Delay
	float 	fConst360KI; // step: 2010
	float 	fConst361KI; // step: 2011
	float 	fConst362KI; // step: 2016
	float 	fConst363KI; // step: 2025
	float 	fConst364KI; // step: 2028
	float 	fConst365KI; // step: 2032
	// Recursion delay fVec303SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec303SEState; // Single Delay
	float 	fVec302SEState[2]; // Copy Delay
	float 	fConst366KI; // step: 2042
	float 	fConst367KI; // step: 2043
	float 	fConst368KI; // step: 2048
	float 	fConst369KI; // step: 2057
	float 	fConst370KI; // step: 2060
	float 	fConst371KI; // step: 2064
	// Recursion delay fVec308SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec308SEState; // Single Delay
	float 	fVec307SEState[2]; // Copy Delay
	float 	fConst372KI; // step: 2077
	float 	fConst373KI; // step: 2080
	float 	fConst374KI; // step: 2084
	// Recursion delay fVec311SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec311SEState; // Single Delay
	float 	fVec310SEState[2]; // Copy Delay
	float 	fConst375KI; // step: 2094
	float 	fConst376KI; // step: 2095
	float 	fConst377KI; // step: 2100
	float 	fConst378KI; // step: 2109
	float 	fConst379KI; // step: 2112
	float 	fConst380KI; // step: 2116
	// Recursion delay fVec316SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec316SEState; // Single Delay
	float 	fVec315SEState[2]; // Copy Delay
	float 	fConst381KI; // step: 2126
	float 	fConst382KI; // step: 2130
	float 	fConst383KI; // step: 2139
	float 	fConst384KI; // step: 2142
	float 	fConst385KI; // step: 2146
	// Recursion delay fVec321SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec321SEState; // Single Delay
	float 	fVec320SEState[2]; // Copy Delay
	float 	fConst386KI; // step: 2156
	float 	fConst387KI; // step: 2160
	float 	fConst388KI; // step: 2168
	float 	fConst389KI; // step: 2169
	float 	fConst390KI; // step: 2173
	float 	fConst391KI; // step: 2176
	float 	fConst392KI; // step: 2179
	float 	fConst393KI; // step: 2180
	float 	fConst394KI; // step: 2183
	// Recursion delay fVec326SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec326SEState; // Single Delay
	float 	fVec325SEState[2]; // Copy Delay
	float 	fConst395KI; // step: 2193
	float 	fConst396KI; // step: 2194
	float 	fConst397KI; // step: 2199
	float 	fConst398KI; // step: 2208
	float 	fConst399KI; // step: 2211
	float 	fConst400KI; // step: 2215
	// Recursion delay fVec331SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec331SEState; // Single Delay
	float 	fVec330SEState[2]; // Copy Delay
	float 	fConst401KI; // step: 2225
	float 	fConst402KI; // step: 2226
	float 	fConst403KI; // step: 2231
	float 	fConst404KI; // step: 2240
	float 	fConst405KI; // step: 2243
	float 	fConst406KI; // step: 2247
	// Recursion delay fVec336SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec336SEState; // Single Delay
	float 	fVec335SEState[2]; // Copy Delay
	float 	fConst407KI; // step: 2260
	float 	fConst408KI; // step: 2263
	float 	fConst409KI; // step: 2267
	// Recursion delay fVec339SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec339SEState; // Single Delay
	float 	fVec338SEState[2]; // Copy Delay
	float 	fConst410KI; // step: 2277
	float 	fConst411KI; // step: 2278
	float 	fConst412KI; // step: 2283
	float 	fConst413KI; // step: 2292
	float 	fConst414KI; // step: 2295
	float 	fConst415KI; // step: 2299
	// Recursion delay fVec344SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec344SEState; // Single Delay
	float 	fVec343SEState[2]; // Copy Delay
	float 	fConst416KI; // step: 2309
	float 	fConst417KI; // step: 2313
	float 	fConst418KI; // step: 2322
	float 	fConst419KI; // step: 2325
	float 	fConst420KI; // step: 2329
	// Recursion delay fVec349SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec349SEState; // Single Delay
	float 	fVec348SEState[2]; // Copy Delay
	float 	fConst421KI; // step: 2339
	float 	fConst422KI; // step: 2343
	float 	fConst423KI; // step: 2351
	float 	fConst424KI; // step: 2352
	float 	fConst425KI; // step: 2356
	float 	fConst426KI; // step: 2359
	float 	fConst427KI; // step: 2362
	float 	fConst428KI; // step: 2363
	float 	fConst429KI; // step: 2366
	// Recursion delay fVec354SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec354SEState; // Single Delay
	float 	fVec353SEState[2]; // Copy Delay
	float 	fConst430KI; // step: 2376
	float 	fConst431KI; // step: 2377
	float 	fConst432KI; // step: 2382
	float 	fConst433KI; // step: 2391
	float 	fConst434KI; // step: 2394
	float 	fConst435KI; // step: 2398
	// Recursion delay fVec359SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec359SEState; // Single Delay
	float 	fVec358SEState[2]; // Copy Delay
	float 	fConst436KI; // step: 2408
	float 	fConst437KI; // step: 2409
	float 	fConst438KI; // step: 2414
	float 	fConst439KI; // step: 2423
	float 	fConst440KI; // step: 2426
	float 	fConst441KI; // step: 2430
	// Recursion delay fVec364SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec364SEState; // Single Delay
	float 	fVec363SEState[2]; // Copy Delay
	float 	fConst442KI; // step: 2443
	float 	fConst443KI; // step: 2446
	float 	fConst444KI; // step: 2450
	// Recursion delay fVec367SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec367SEState; // Single Delay
	float 	fVec366SEState[2]; // Copy Delay
	float 	fConst445KI; // step: 2460
	float 	fConst446KI; // step: 2461
	float 	fConst447KI; // step: 2466
	float 	fConst448KI; // step: 2475
	float 	fConst449KI; // step: 2478
	float 	fConst450KI; // step: 2482
	// Recursion delay fVec372SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec372SEState; // Single Delay
	float 	fVec371SEState[2]; // Copy Delay
	float 	fConst451KI; // step: 2492
	float 	fConst452KI; // step: 2496
	float 	fConst453KI; // step: 2505
	float 	fConst454KI; // step: 2508
	float 	fConst455KI; // step: 2512
	// Recursion delay fVec377SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec377SEState; // Single Delay
	float 	fVec376SEState[2]; // Copy Delay
	float 	fConst456KI; // step: 2522
	float 	fConst457KI; // step: 2526
	float 	fConst458KI; // step: 2534
	float 	fConst459KI; // step: 2535
	float 	fConst460KI; // step: 2539
	float 	fConst461KI; // step: 2542
	float 	fConst462KI; // step: 2545
	float 	fConst463KI; // step: 2546
	float 	fConst464KI; // step: 2549
	// Recursion delay fVec382SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec382SEState; // Single Delay
	float 	fVec381SEState[2]; // Copy Delay
	float 	fConst465KI; // step: 2559
	float 	fConst466KI; // step: 2560
	float 	fConst467KI; // step: 2565
	float 	fConst468KI; // step: 2574
	float 	fConst469KI; // step: 2577
	float 	fConst470KI; // step: 2581
	// Recursion delay fVec387SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec387SEState; // Single Delay
	float 	fVec386SEState[2]; // Copy Delay
	float 	fConst471KI; // step: 2591
	float 	fConst472KI; // step: 2592
	float 	fConst473KI; // step: 2597
	float 	fConst474KI; // step: 2606
	float 	fConst475KI; // step: 2609
	float 	fConst476KI; // step: 2613
	// Recursion delay fVec392SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec392SEState; // Single Delay
	float 	fVec391SEState[2]; // Copy Delay
	float 	fConst477KI; // step: 2626
	float 	fConst478KI; // step: 2629
	float 	fConst479KI; // step: 2633
	// Recursion delay fVec395SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec395SEState; // Single Delay
	float 	fVec394SEState[2]; // Copy Delay
	float 	fConst480KI; // step: 2643
	float 	fConst481KI; // step: 2644
	float 	fConst482KI; // step: 2649
	float 	fConst483KI; // step: 2658
	float 	fConst484KI; // step: 2661
	float 	fConst485KI; // step: 2665
	// Recursion delay fVec400SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec400SEState; // Single Delay
	float 	fVec399SEState[2]; // Copy Delay
	float 	fConst486KI; // step: 2675
	float 	fConst487KI; // step: 2679
	float 	fConst488KI; // step: 2688
	float 	fConst489KI; // step: 2691
	float 	fConst490KI; // step: 2695
	// Recursion delay fVec405SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec405SEState; // Single Delay
	float 	fVec404SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fConst491KI; // step: 2713
	float 	fConst492KI; // step: 2722
	float 	fConst493KI; // step: 2723
	float 	fConst494KI; // step: 2728
	// Recursion delay fVec407SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec407SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst495KI; // step: 2751
	float 	fConst496KI; // step: 2752
	float 	fConst497KI; // step: 2757
	// Recursion delay fVec411SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec411SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst498KI; // step: 2776
	float 	fConst499KI; // step: 2777
	float 	fConst500KI; // step: 2782
	// Recursion delay fVec415SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec415SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst501KI; // step: 2801
	float 	fConst502KI; // step: 2802
	float 	fConst503KI; // step: 2807
	// Recursion delay fVec419SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec419SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst504KI; // step: 2826
	float 	fConst505KI; // step: 2827
	float 	fConst506KI; // step: 2832
	// Recursion delay fVec423SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec423SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst507KI; // step: 2851
	float 	fConst508KI; // step: 2852
	float 	fConst509KI; // step: 2857
	// Recursion delay fVec427SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec427SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst510KI; // step: 2876
	float 	fConst511KI; // step: 2877
	float 	fConst512KI; // step: 2882
	// Recursion delay fVec431SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec431SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst513KI; // step: 2901
	float 	fConst514KI; // step: 2902
	float 	fConst515KI; // step: 2907
	// Recursion delay fVec435SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec435SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst516KI; // step: 2926
	float 	fConst517KI; // step: 2927
	float 	fConst518KI; // step: 2932
	// Recursion delay fVec439SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec439SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst519KI; // step: 2951
	float 	fConst520KI; // step: 2952
	float 	fConst521KI; // step: 2957
	// Recursion delay fVec443SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec443SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst522KI; // step: 2976
	float 	fConst523KI; // step: 2977
	float 	fConst524KI; // step: 2982
	// Recursion delay fVec447SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec447SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst525KI; // step: 3001
	float 	fConst526KI; // step: 3002
	float 	fConst527KI; // step: 3007
	// Recursion delay fVec451SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec451SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst528KI; // step: 3026
	float 	fConst529KI; // step: 3027
	float 	fConst530KI; // step: 3032
	// Recursion delay fVec455SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec455SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst531KI; // step: 3051
	float 	fConst532KI; // step: 3052
	float 	fConst533KI; // step: 3057
	// Recursion delay fVec459SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec459SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst534KI; // step: 3076
	float 	fConst535KI; // step: 3080
	// Recursion delay fVec463SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec463SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/cubicnl:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cubicnl:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cubicnl:license", "STK-4.3");
		m->declare("effect.lib/cubicnl_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cubicnl_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cubicnl_demo:license", "STK-4.3");
		m->declare("effect.lib/cubicnl_nodc:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/cubicnl_nodc:copyright", "Julius O. Smith III");
		m->declare("effect.lib/cubicnl_nodc:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("filename", "cubic_distortion.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "cubic_distortion");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 11
		fConst1KI = (6.2831855f / fConst0KI); // step: 12
		fConst2KI = (1.0f / fConst0KI); // step: 19
		fConst3KI = tanf((50265.484f / fConst0KI)); // step: 130
		fConst4KI = (1.0f / fConst3KI); // step: 132
		fConst5KI = (1.0f / (((fConst4KI + 3.1897273f /* Sum */) / fConst3KI) + 4.0767817f /* Sum */)); // step: 136
		fConst6KI = (((fConst4KI + -3.1897273f /* Sum */) / fConst3KI) + 4.0767817f /* Sum */); // step: 140
		fConst7KI = powf(fConst3KI,2.0f); // step: 144
		fConst8KI = (1.0f / fConst7KI); // step: 145
		fConst9KI = (2.0f * (4.0767817f + -fConst8KI /* Sum */)); // step: 148
		fConst10KI = (0.0017661728f / fConst7KI); // step: 160
		fConst11KI = (fConst10KI + 0.0004076782f /* Sum */); // step: 161
		fConst12KI = (2.0f * (0.0004076782f + -fConst10KI /* Sum */)); // step: 166
		fConst13KI = (1.0f / (((fConst4KI + 0.74313045f /* Sum */) / fConst3KI) + 1.4500711f /* Sum */)); // step: 177
		fConst14KI = (((fConst4KI + -0.74313045f /* Sum */) / fConst3KI) + 1.4500711f /* Sum */); // step: 181
		fConst15KI = (2.0f * (1.4500711f + -fConst8KI /* Sum */)); // step: 185
		fConst16KI = (11.0520525f / fConst7KI); // step: 196
		fConst17KI = (fConst16KI + 1.4500711f /* Sum */); // step: 197
		fConst18KI = (2.0f * (1.4500711f + -fConst16KI /* Sum */)); // step: 202
		fConst19KI = (1.0f / (((fConst4KI + 0.15748216f /* Sum */) / fConst3KI) + 0.9351402f /* Sum */)); // step: 213
		fConst20KI = (((fConst4KI + -0.15748216f /* Sum */) / fConst3KI) + 0.9351402f /* Sum */); // step: 217
		fConst21KI = (2.0f * (0.9351402f + -fConst8KI /* Sum */)); // step: 221
		fConst22KI = (1.0f / (((fConst4KI + 0.78241307f /* Sum */) / fConst3KI) + 0.2452915f /* Sum */)); // step: 236
		fConst23KI = (((fConst4KI + -0.78241307f /* Sum */) / fConst3KI) + 0.2452915f /* Sum */); // step: 240
		fConst24KI = (2.0f * (0.2452915f + -fConst8KI /* Sum */)); // step: 244
		fConst25KI = (0.0001f / fConst7KI); // step: 256
		fConst26KI = (fConst25KI + 0.0004332272f /* Sum */); // step: 257
		fConst27KI = (2.0f * (0.0004332272f + -fConst25KI /* Sum */)); // step: 262
		fConst28KI = (1.0f / (((fConst4KI + 0.51247865f /* Sum */) / fConst3KI) + 0.6896214f /* Sum */)); // step: 273
		fConst29KI = (((fConst4KI + -0.51247865f /* Sum */) / fConst3KI) + 0.6896214f /* Sum */); // step: 277
		fConst30KI = (2.0f * (0.6896214f + -fConst8KI /* Sum */)); // step: 281
		fConst31KI = (fConst8KI + 7.6217313f /* Sum */); // step: 292
		fConst32KI = (2.0f * (7.6217313f + -fConst8KI /* Sum */)); // step: 296
		fConst33KI = (1.0f / (((fConst4KI + 0.16840488f /* Sum */) / fConst3KI) + 1.0693583f /* Sum */)); // step: 307
		fConst34KI = (((fConst4KI + -0.16840488f /* Sum */) / fConst3KI) + 1.0693583f /* Sum */); // step: 311
		fConst35KI = (2.0f * (1.0693583f + -fConst8KI /* Sum */)); // step: 315
		fConst36KI = (fConst8KI + 53.53615f /* Sum */); // step: 326
		fConst37KI = (2.0f * (53.53615f + -fConst8KI /* Sum */)); // step: 330
		fConst38KI = tanf((31665.27f / fConst0KI)); // step: 338
		fConst39KI = (1.0f / fConst38KI); // step: 339
		fConst40KI = (1.0f / (((fConst39KI + 3.1897273f /* Sum */) / fConst38KI) + 4.0767817f /* Sum */)); // step: 343
		fConst41KI = (((fConst39KI + -3.1897273f /* Sum */) / fConst38KI) + 4.0767817f /* Sum */); // step: 346
		fConst42KI = powf(fConst38KI,2.0f); // step: 349
		fConst43KI = (1.0f / fConst42KI); // step: 350
		fConst44KI = (2.0f * (4.0767817f + -fConst43KI /* Sum */)); // step: 353
		fConst45KI = (0.0017661728f / fConst42KI); // step: 363
		fConst46KI = (fConst45KI + 0.0004076782f /* Sum */); // step: 364
		fConst47KI = (2.0f * (0.0004076782f + -fConst45KI /* Sum */)); // step: 369
		fConst48KI = (1.0f / (((fConst39KI + 0.74313045f /* Sum */) / fConst38KI) + 1.4500711f /* Sum */)); // step: 378
		fConst49KI = (((fConst39KI + -0.74313045f /* Sum */) / fConst38KI) + 1.4500711f /* Sum */); // step: 381
		fConst50KI = (2.0f * (1.4500711f + -fConst43KI /* Sum */)); // step: 385
		fConst51KI = (11.0520525f / fConst42KI); // step: 395
		fConst52KI = (fConst51KI + 1.4500711f /* Sum */); // step: 396
		fConst53KI = (2.0f * (1.4500711f + -fConst51KI /* Sum */)); // step: 401
		fConst54KI = (1.0f / (((fConst39KI + 0.15748216f /* Sum */) / fConst38KI) + 0.9351402f /* Sum */)); // step: 410
		fConst55KI = (((fConst39KI + -0.15748216f /* Sum */) / fConst38KI) + 0.9351402f /* Sum */); // step: 413
		fConst56KI = (2.0f * (0.9351402f + -fConst43KI /* Sum */)); // step: 417
		fConst57KI = (1.0f / (((fConst39KI + 0.78241307f /* Sum */) / fConst38KI) + 0.2452915f /* Sum */)); // step: 430
		fConst58KI = (((fConst39KI + -0.78241307f /* Sum */) / fConst38KI) + 0.2452915f /* Sum */); // step: 433
		fConst59KI = (2.0f * (0.2452915f + -fConst43KI /* Sum */)); // step: 437
		fConst60KI = (0.0001f / fConst42KI); // step: 447
		fConst61KI = (fConst60KI + 0.0004332272f /* Sum */); // step: 448
		fConst62KI = (2.0f * (0.0004332272f + -fConst60KI /* Sum */)); // step: 453
		fConst63KI = (1.0f / (((fConst39KI + 0.51247865f /* Sum */) / fConst38KI) + 0.6896214f /* Sum */)); // step: 462
		fConst64KI = (((fConst39KI + -0.51247865f /* Sum */) / fConst38KI) + 0.6896214f /* Sum */); // step: 465
		fConst65KI = (2.0f * (0.6896214f + -fConst43KI /* Sum */)); // step: 469
		fConst66KI = (fConst43KI + 7.6217313f /* Sum */); // step: 479
		fConst67KI = (2.0f * (7.6217313f + -fConst43KI /* Sum */)); // step: 483
		fConst68KI = (1.0f / (((fConst39KI + 0.16840488f /* Sum */) / fConst38KI) + 1.0693583f /* Sum */)); // step: 492
		fConst69KI = (((fConst39KI + -0.16840488f /* Sum */) / fConst38KI) + 1.0693583f /* Sum */); // step: 495
		fConst70KI = (2.0f * (1.0693583f + -fConst43KI /* Sum */)); // step: 499
		fConst71KI = (fConst43KI + 53.53615f /* Sum */); // step: 509
		fConst72KI = (2.0f * (53.53615f + -fConst43KI /* Sum */)); // step: 513
		fConst73KI = tanf((19947.87f / fConst0KI)); // step: 521
		fConst74KI = (1.0f / fConst73KI); // step: 522
		fConst75KI = (1.0f / (((fConst74KI + 3.1897273f /* Sum */) / fConst73KI) + 4.0767817f /* Sum */)); // step: 526
		fConst76KI = (((fConst74KI + -3.1897273f /* Sum */) / fConst73KI) + 4.0767817f /* Sum */); // step: 529
		fConst77KI = powf(fConst73KI,2.0f); // step: 532
		fConst78KI = (1.0f / fConst77KI); // step: 533
		fConst79KI = (2.0f * (4.0767817f + -fConst78KI /* Sum */)); // step: 536
		fConst80KI = (0.0017661728f / fConst77KI); // step: 546
		fConst81KI = (fConst80KI + 0.0004076782f /* Sum */); // step: 547
		fConst82KI = (2.0f * (0.0004076782f + -fConst80KI /* Sum */)); // step: 552
		fConst83KI = (1.0f / (((fConst74KI + 0.74313045f /* Sum */) / fConst73KI) + 1.4500711f /* Sum */)); // step: 561
		fConst84KI = (((fConst74KI + -0.74313045f /* Sum */) / fConst73KI) + 1.4500711f /* Sum */); // step: 564
		fConst85KI = (2.0f * (1.4500711f + -fConst78KI /* Sum */)); // step: 568
		fConst86KI = (11.0520525f / fConst77KI); // step: 578
		fConst87KI = (fConst86KI + 1.4500711f /* Sum */); // step: 579
		fConst88KI = (2.0f * (1.4500711f + -fConst86KI /* Sum */)); // step: 584
		fConst89KI = (1.0f / (((fConst74KI + 0.15748216f /* Sum */) / fConst73KI) + 0.9351402f /* Sum */)); // step: 593
		fConst90KI = (((fConst74KI + -0.15748216f /* Sum */) / fConst73KI) + 0.9351402f /* Sum */); // step: 596
		fConst91KI = (2.0f * (0.9351402f + -fConst78KI /* Sum */)); // step: 600
		fConst92KI = (1.0f / (((fConst74KI + 0.78241307f /* Sum */) / fConst73KI) + 0.2452915f /* Sum */)); // step: 613
		fConst93KI = (((fConst74KI + -0.78241307f /* Sum */) / fConst73KI) + 0.2452915f /* Sum */); // step: 616
		fConst94KI = (2.0f * (0.2452915f + -fConst78KI /* Sum */)); // step: 620
		fConst95KI = (0.0001f / fConst77KI); // step: 630
		fConst96KI = (fConst95KI + 0.0004332272f /* Sum */); // step: 631
		fConst97KI = (2.0f * (0.0004332272f + -fConst95KI /* Sum */)); // step: 636
		fConst98KI = (1.0f / (((fConst74KI + 0.51247865f /* Sum */) / fConst73KI) + 0.6896214f /* Sum */)); // step: 645
		fConst99KI = (((fConst74KI + -0.51247865f /* Sum */) / fConst73KI) + 0.6896214f /* Sum */); // step: 648
		fConst100KI = (2.0f * (0.6896214f + -fConst78KI /* Sum */)); // step: 652
		fConst101KI = (fConst78KI + 7.6217313f /* Sum */); // step: 662
		fConst102KI = (2.0f * (7.6217313f + -fConst78KI /* Sum */)); // step: 666
		fConst103KI = (1.0f / (((fConst74KI + 0.16840488f /* Sum */) / fConst73KI) + 1.0693583f /* Sum */)); // step: 675
		fConst104KI = (((fConst74KI + -0.16840488f /* Sum */) / fConst73KI) + 1.0693583f /* Sum */); // step: 678
		fConst105KI = (2.0f * (1.0693583f + -fConst78KI /* Sum */)); // step: 682
		fConst106KI = (fConst78KI + 53.53615f /* Sum */); // step: 692
		fConst107KI = (2.0f * (53.53615f + -fConst78KI /* Sum */)); // step: 696
		fConst108KI = tanf((12566.371f / fConst0KI)); // step: 704
		fConst109KI = (1.0f / fConst108KI); // step: 705
		fConst110KI = (1.0f / (((fConst109KI + 3.1897273f /* Sum */) / fConst108KI) + 4.0767817f /* Sum */)); // step: 709
		fConst111KI = (((fConst109KI + -3.1897273f /* Sum */) / fConst108KI) + 4.0767817f /* Sum */); // step: 712
		fConst112KI = powf(fConst108KI,2.0f); // step: 715
		fConst113KI = (1.0f / fConst112KI); // step: 716
		fConst114KI = (2.0f * (4.0767817f + -fConst113KI /* Sum */)); // step: 719
		fConst115KI = (0.0017661728f / fConst112KI); // step: 729
		fConst116KI = (fConst115KI + 0.0004076782f /* Sum */); // step: 730
		fConst117KI = (2.0f * (0.0004076782f + -fConst115KI /* Sum */)); // step: 735
		fConst118KI = (1.0f / (((fConst109KI + 0.74313045f /* Sum */) / fConst108KI) + 1.4500711f /* Sum */)); // step: 744
		fConst119KI = (((fConst109KI + -0.74313045f /* Sum */) / fConst108KI) + 1.4500711f /* Sum */); // step: 747
		fConst120KI = (2.0f * (1.4500711f + -fConst113KI /* Sum */)); // step: 751
		fConst121KI = (11.0520525f / fConst112KI); // step: 761
		fConst122KI = (fConst121KI + 1.4500711f /* Sum */); // step: 762
		fConst123KI = (2.0f * (1.4500711f + -fConst121KI /* Sum */)); // step: 767
		fConst124KI = (1.0f / (((fConst109KI + 0.15748216f /* Sum */) / fConst108KI) + 0.9351402f /* Sum */)); // step: 776
		fConst125KI = (((fConst109KI + -0.15748216f /* Sum */) / fConst108KI) + 0.9351402f /* Sum */); // step: 779
		fConst126KI = (2.0f * (0.9351402f + -fConst113KI /* Sum */)); // step: 783
		fConst127KI = (1.0f / (((fConst109KI + 0.78241307f /* Sum */) / fConst108KI) + 0.2452915f /* Sum */)); // step: 796
		fConst128KI = (((fConst109KI + -0.78241307f /* Sum */) / fConst108KI) + 0.2452915f /* Sum */); // step: 799
		fConst129KI = (2.0f * (0.2452915f + -fConst113KI /* Sum */)); // step: 803
		fConst130KI = (0.0001f / fConst112KI); // step: 813
		fConst131KI = (fConst130KI + 0.0004332272f /* Sum */); // step: 814
		fConst132KI = (2.0f * (0.0004332272f + -fConst130KI /* Sum */)); // step: 819
		fConst133KI = (1.0f / (((fConst109KI + 0.51247865f /* Sum */) / fConst108KI) + 0.6896214f /* Sum */)); // step: 828
		fConst134KI = (((fConst109KI + -0.51247865f /* Sum */) / fConst108KI) + 0.6896214f /* Sum */); // step: 831
		fConst135KI = (2.0f * (0.6896214f + -fConst113KI /* Sum */)); // step: 835
		fConst136KI = (fConst113KI + 7.6217313f /* Sum */); // step: 845
		fConst137KI = (2.0f * (7.6217313f + -fConst113KI /* Sum */)); // step: 849
		fConst138KI = (1.0f / (((fConst109KI + 0.16840488f /* Sum */) / fConst108KI) + 1.0693583f /* Sum */)); // step: 858
		fConst139KI = (((fConst109KI + -0.16840488f /* Sum */) / fConst108KI) + 1.0693583f /* Sum */); // step: 861
		fConst140KI = (2.0f * (1.0693583f + -fConst113KI /* Sum */)); // step: 865
		fConst141KI = (fConst113KI + 53.53615f /* Sum */); // step: 875
		fConst142KI = (2.0f * (53.53615f + -fConst113KI /* Sum */)); // step: 879
		fConst143KI = tanf((7916.3174f / fConst0KI)); // step: 887
		fConst144KI = (1.0f / fConst143KI); // step: 888
		fConst145KI = (1.0f / (((fConst144KI + 3.1897273f /* Sum */) / fConst143KI) + 4.0767817f /* Sum */)); // step: 892
		fConst146KI = (((fConst144KI + -3.1897273f /* Sum */) / fConst143KI) + 4.0767817f /* Sum */); // step: 895
		fConst147KI = powf(fConst143KI,2.0f); // step: 898
		fConst148KI = (1.0f / fConst147KI); // step: 899
		fConst149KI = (2.0f * (4.0767817f + -fConst148KI /* Sum */)); // step: 902
		fConst150KI = (0.0017661728f / fConst147KI); // step: 912
		fConst151KI = (fConst150KI + 0.0004076782f /* Sum */); // step: 913
		fConst152KI = (2.0f * (0.0004076782f + -fConst150KI /* Sum */)); // step: 918
		fConst153KI = (1.0f / (((fConst144KI + 0.74313045f /* Sum */) / fConst143KI) + 1.4500711f /* Sum */)); // step: 927
		fConst154KI = (((fConst144KI + -0.74313045f /* Sum */) / fConst143KI) + 1.4500711f /* Sum */); // step: 930
		fConst155KI = (2.0f * (1.4500711f + -fConst148KI /* Sum */)); // step: 934
		fConst156KI = (11.0520525f / fConst147KI); // step: 944
		fConst157KI = (fConst156KI + 1.4500711f /* Sum */); // step: 945
		fConst158KI = (2.0f * (1.4500711f + -fConst156KI /* Sum */)); // step: 950
		fConst159KI = (1.0f / (((fConst144KI + 0.15748216f /* Sum */) / fConst143KI) + 0.9351402f /* Sum */)); // step: 959
		fConst160KI = (((fConst144KI + -0.15748216f /* Sum */) / fConst143KI) + 0.9351402f /* Sum */); // step: 962
		fConst161KI = (2.0f * (0.9351402f + -fConst148KI /* Sum */)); // step: 966
		fConst162KI = (1.0f / (((fConst144KI + 0.78241307f /* Sum */) / fConst143KI) + 0.2452915f /* Sum */)); // step: 979
		fConst163KI = (((fConst144KI + -0.78241307f /* Sum */) / fConst143KI) + 0.2452915f /* Sum */); // step: 982
		fConst164KI = (2.0f * (0.2452915f + -fConst148KI /* Sum */)); // step: 986
		fConst165KI = (0.0001f / fConst147KI); // step: 996
		fConst166KI = (fConst165KI + 0.0004332272f /* Sum */); // step: 997
		fConst167KI = (2.0f * (0.0004332272f + -fConst165KI /* Sum */)); // step: 1002
		fConst168KI = (1.0f / (((fConst144KI + 0.51247865f /* Sum */) / fConst143KI) + 0.6896214f /* Sum */)); // step: 1011
		fConst169KI = (((fConst144KI + -0.51247865f /* Sum */) / fConst143KI) + 0.6896214f /* Sum */); // step: 1014
		fConst170KI = (2.0f * (0.6896214f + -fConst148KI /* Sum */)); // step: 1018
		fConst171KI = (fConst148KI + 7.6217313f /* Sum */); // step: 1028
		fConst172KI = (2.0f * (7.6217313f + -fConst148KI /* Sum */)); // step: 1032
		fConst173KI = (1.0f / (((fConst144KI + 0.16840488f /* Sum */) / fConst143KI) + 1.0693583f /* Sum */)); // step: 1041
		fConst174KI = (((fConst144KI + -0.16840488f /* Sum */) / fConst143KI) + 1.0693583f /* Sum */); // step: 1044
		fConst175KI = (2.0f * (1.0693583f + -fConst148KI /* Sum */)); // step: 1048
		fConst176KI = (fConst148KI + 53.53615f /* Sum */); // step: 1058
		fConst177KI = (2.0f * (53.53615f + -fConst148KI /* Sum */)); // step: 1062
		fConst178KI = tanf((4986.9673f / fConst0KI)); // step: 1070
		fConst179KI = (1.0f / fConst178KI); // step: 1071
		fConst180KI = (1.0f / (((fConst179KI + 3.1897273f /* Sum */) / fConst178KI) + 4.0767817f /* Sum */)); // step: 1075
		fConst181KI = (((fConst179KI + -3.1897273f /* Sum */) / fConst178KI) + 4.0767817f /* Sum */); // step: 1078
		fConst182KI = powf(fConst178KI,2.0f); // step: 1081
		fConst183KI = (1.0f / fConst182KI); // step: 1082
		fConst184KI = (2.0f * (4.0767817f + -fConst183KI /* Sum */)); // step: 1085
		fConst185KI = (0.0017661728f / fConst182KI); // step: 1095
		fConst186KI = (fConst185KI + 0.0004076782f /* Sum */); // step: 1096
		fConst187KI = (2.0f * (0.0004076782f + -fConst185KI /* Sum */)); // step: 1101
		fConst188KI = (1.0f / (((fConst179KI + 0.74313045f /* Sum */) / fConst178KI) + 1.4500711f /* Sum */)); // step: 1110
		fConst189KI = (((fConst179KI + -0.74313045f /* Sum */) / fConst178KI) + 1.4500711f /* Sum */); // step: 1113
		fConst190KI = (2.0f * (1.4500711f + -fConst183KI /* Sum */)); // step: 1117
		fConst191KI = (11.0520525f / fConst182KI); // step: 1127
		fConst192KI = (fConst191KI + 1.4500711f /* Sum */); // step: 1128
		fConst193KI = (2.0f * (1.4500711f + -fConst191KI /* Sum */)); // step: 1133
		fConst194KI = (1.0f / (((fConst179KI + 0.15748216f /* Sum */) / fConst178KI) + 0.9351402f /* Sum */)); // step: 1142
		fConst195KI = (((fConst179KI + -0.15748216f /* Sum */) / fConst178KI) + 0.9351402f /* Sum */); // step: 1145
		fConst196KI = (2.0f * (0.9351402f + -fConst183KI /* Sum */)); // step: 1149
		fConst197KI = (1.0f / (((fConst179KI + 0.78241307f /* Sum */) / fConst178KI) + 0.2452915f /* Sum */)); // step: 1162
		fConst198KI = (((fConst179KI + -0.78241307f /* Sum */) / fConst178KI) + 0.2452915f /* Sum */); // step: 1165
		fConst199KI = (2.0f * (0.2452915f + -fConst183KI /* Sum */)); // step: 1169
		fConst200KI = (0.0001f / fConst182KI); // step: 1179
		fConst201KI = (fConst200KI + 0.0004332272f /* Sum */); // step: 1180
		fConst202KI = (2.0f * (0.0004332272f + -fConst200KI /* Sum */)); // step: 1185
		fConst203KI = (1.0f / (((fConst179KI + 0.51247865f /* Sum */) / fConst178KI) + 0.6896214f /* Sum */)); // step: 1194
		fConst204KI = (((fConst179KI + -0.51247865f /* Sum */) / fConst178KI) + 0.6896214f /* Sum */); // step: 1197
		fConst205KI = (2.0f * (0.6896214f + -fConst183KI /* Sum */)); // step: 1201
		fConst206KI = (fConst183KI + 7.6217313f /* Sum */); // step: 1211
		fConst207KI = (2.0f * (7.6217313f + -fConst183KI /* Sum */)); // step: 1215
		fConst208KI = (1.0f / (((fConst179KI + 0.16840488f /* Sum */) / fConst178KI) + 1.0693583f /* Sum */)); // step: 1224
		fConst209KI = (((fConst179KI + -0.16840488f /* Sum */) / fConst178KI) + 1.0693583f /* Sum */); // step: 1227
		fConst210KI = (2.0f * (1.0693583f + -fConst183KI /* Sum */)); // step: 1231
		fConst211KI = (fConst183KI + 53.53615f /* Sum */); // step: 1241
		fConst212KI = (2.0f * (53.53615f + -fConst183KI /* Sum */)); // step: 1245
		fConst213KI = tanf((3141.5928f / fConst0KI)); // step: 1253
		fConst214KI = (1.0f / fConst213KI); // step: 1254
		fConst215KI = (1.0f / (((fConst214KI + 3.1897273f /* Sum */) / fConst213KI) + 4.0767817f /* Sum */)); // step: 1258
		fConst216KI = (((fConst214KI + -3.1897273f /* Sum */) / fConst213KI) + 4.0767817f /* Sum */); // step: 1261
		fConst217KI = powf(fConst213KI,2.0f); // step: 1264
		fConst218KI = (1.0f / fConst217KI); // step: 1265
		fConst219KI = (2.0f * (4.0767817f + -fConst218KI /* Sum */)); // step: 1268
		fConst220KI = (0.0017661728f / fConst217KI); // step: 1278
		fConst221KI = (fConst220KI + 0.0004076782f /* Sum */); // step: 1279
		fConst222KI = (2.0f * (0.0004076782f + -fConst220KI /* Sum */)); // step: 1284
		fConst223KI = (1.0f / (((fConst214KI + 0.74313045f /* Sum */) / fConst213KI) + 1.4500711f /* Sum */)); // step: 1293
		fConst224KI = (((fConst214KI + -0.74313045f /* Sum */) / fConst213KI) + 1.4500711f /* Sum */); // step: 1296
		fConst225KI = (2.0f * (1.4500711f + -fConst218KI /* Sum */)); // step: 1300
		fConst226KI = (11.0520525f / fConst217KI); // step: 1310
		fConst227KI = (fConst226KI + 1.4500711f /* Sum */); // step: 1311
		fConst228KI = (2.0f * (1.4500711f + -fConst226KI /* Sum */)); // step: 1316
		fConst229KI = (1.0f / (((fConst214KI + 0.15748216f /* Sum */) / fConst213KI) + 0.9351402f /* Sum */)); // step: 1325
		fConst230KI = (((fConst214KI + -0.15748216f /* Sum */) / fConst213KI) + 0.9351402f /* Sum */); // step: 1328
		fConst231KI = (2.0f * (0.9351402f + -fConst218KI /* Sum */)); // step: 1332
		fConst232KI = (1.0f / (((fConst214KI + 0.78241307f /* Sum */) / fConst213KI) + 0.2452915f /* Sum */)); // step: 1345
		fConst233KI = (((fConst214KI + -0.78241307f /* Sum */) / fConst213KI) + 0.2452915f /* Sum */); // step: 1348
		fConst234KI = (2.0f * (0.2452915f + -fConst218KI /* Sum */)); // step: 1352
		fConst235KI = (0.0001f / fConst217KI); // step: 1362
		fConst236KI = (fConst235KI + 0.0004332272f /* Sum */); // step: 1363
		fConst237KI = (2.0f * (0.0004332272f + -fConst235KI /* Sum */)); // step: 1368
		fConst238KI = (1.0f / (((fConst214KI + 0.51247865f /* Sum */) / fConst213KI) + 0.6896214f /* Sum */)); // step: 1377
		fConst239KI = (((fConst214KI + -0.51247865f /* Sum */) / fConst213KI) + 0.6896214f /* Sum */); // step: 1380
		fConst240KI = (2.0f * (0.6896214f + -fConst218KI /* Sum */)); // step: 1384
		fConst241KI = (fConst218KI + 7.6217313f /* Sum */); // step: 1394
		fConst242KI = (2.0f * (7.6217313f + -fConst218KI /* Sum */)); // step: 1398
		fConst243KI = (1.0f / (((fConst214KI + 0.16840488f /* Sum */) / fConst213KI) + 1.0693583f /* Sum */)); // step: 1407
		fConst244KI = (((fConst214KI + -0.16840488f /* Sum */) / fConst213KI) + 1.0693583f /* Sum */); // step: 1410
		fConst245KI = (2.0f * (1.0693583f + -fConst218KI /* Sum */)); // step: 1414
		fConst246KI = (fConst218KI + 53.53615f /* Sum */); // step: 1424
		fConst247KI = (2.0f * (53.53615f + -fConst218KI /* Sum */)); // step: 1428
		fConst248KI = tanf((1979.0793f / fConst0KI)); // step: 1436
		fConst249KI = (1.0f / fConst248KI); // step: 1437
		fConst250KI = (1.0f / (((fConst249KI + 3.1897273f /* Sum */) / fConst248KI) + 4.0767817f /* Sum */)); // step: 1441
		fConst251KI = (((fConst249KI + -3.1897273f /* Sum */) / fConst248KI) + 4.0767817f /* Sum */); // step: 1444
		fConst252KI = powf(fConst248KI,2.0f); // step: 1447
		fConst253KI = (1.0f / fConst252KI); // step: 1448
		fConst254KI = (2.0f * (4.0767817f + -fConst253KI /* Sum */)); // step: 1451
		fConst255KI = (0.0017661728f / fConst252KI); // step: 1461
		fConst256KI = (fConst255KI + 0.0004076782f /* Sum */); // step: 1462
		fConst257KI = (2.0f * (0.0004076782f + -fConst255KI /* Sum */)); // step: 1467
		fConst258KI = (1.0f / (((fConst249KI + 0.74313045f /* Sum */) / fConst248KI) + 1.4500711f /* Sum */)); // step: 1476
		fConst259KI = (((fConst249KI + -0.74313045f /* Sum */) / fConst248KI) + 1.4500711f /* Sum */); // step: 1479
		fConst260KI = (2.0f * (1.4500711f + -fConst253KI /* Sum */)); // step: 1483
		fConst261KI = (11.0520525f / fConst252KI); // step: 1493
		fConst262KI = (fConst261KI + 1.4500711f /* Sum */); // step: 1494
		fConst263KI = (2.0f * (1.4500711f + -fConst261KI /* Sum */)); // step: 1499
		fConst264KI = (1.0f / (((fConst249KI + 0.15748216f /* Sum */) / fConst248KI) + 0.9351402f /* Sum */)); // step: 1508
		fConst265KI = (((fConst249KI + -0.15748216f /* Sum */) / fConst248KI) + 0.9351402f /* Sum */); // step: 1511
		fConst266KI = (2.0f * (0.9351402f + -fConst253KI /* Sum */)); // step: 1515
		fConst267KI = (1.0f / (((fConst249KI + 0.78241307f /* Sum */) / fConst248KI) + 0.2452915f /* Sum */)); // step: 1528
		fConst268KI = (((fConst249KI + -0.78241307f /* Sum */) / fConst248KI) + 0.2452915f /* Sum */); // step: 1531
		fConst269KI = (2.0f * (0.2452915f + -fConst253KI /* Sum */)); // step: 1535
		fConst270KI = (0.0001f / fConst252KI); // step: 1545
		fConst271KI = (fConst270KI + 0.0004332272f /* Sum */); // step: 1546
		fConst272KI = (2.0f * (0.0004332272f + -fConst270KI /* Sum */)); // step: 1551
		fConst273KI = (1.0f / (((fConst249KI + 0.51247865f /* Sum */) / fConst248KI) + 0.6896214f /* Sum */)); // step: 1560
		fConst274KI = (((fConst249KI + -0.51247865f /* Sum */) / fConst248KI) + 0.6896214f /* Sum */); // step: 1563
		fConst275KI = (2.0f * (0.6896214f + -fConst253KI /* Sum */)); // step: 1567
		fConst276KI = (fConst253KI + 7.6217313f /* Sum */); // step: 1577
		fConst277KI = (2.0f * (7.6217313f + -fConst253KI /* Sum */)); // step: 1581
		fConst278KI = (1.0f / (((fConst249KI + 0.16840488f /* Sum */) / fConst248KI) + 1.0693583f /* Sum */)); // step: 1590
		fConst279KI = (((fConst249KI + -0.16840488f /* Sum */) / fConst248KI) + 1.0693583f /* Sum */); // step: 1593
		fConst280KI = (2.0f * (1.0693583f + -fConst253KI /* Sum */)); // step: 1597
		fConst281KI = (fConst253KI + 53.53615f /* Sum */); // step: 1607
		fConst282KI = (2.0f * (53.53615f + -fConst253KI /* Sum */)); // step: 1611
		fConst283KI = tanf((1246.7418f / fConst0KI)); // step: 1619
		fConst284KI = (1.0f / fConst283KI); // step: 1620
		fConst285KI = (1.0f / (((fConst284KI + 3.1897273f /* Sum */) / fConst283KI) + 4.0767817f /* Sum */)); // step: 1624
		fConst286KI = (((fConst284KI + -3.1897273f /* Sum */) / fConst283KI) + 4.0767817f /* Sum */); // step: 1627
		fConst287KI = powf(fConst283KI,2.0f); // step: 1630
		fConst288KI = (1.0f / fConst287KI); // step: 1631
		fConst289KI = (2.0f * (4.0767817f + -fConst288KI /* Sum */)); // step: 1634
		fConst290KI = (0.0017661728f / fConst287KI); // step: 1644
		fConst291KI = (fConst290KI + 0.0004076782f /* Sum */); // step: 1645
		fConst292KI = (2.0f * (0.0004076782f + -fConst290KI /* Sum */)); // step: 1650
		fConst293KI = (1.0f / (((fConst284KI + 0.74313045f /* Sum */) / fConst283KI) + 1.4500711f /* Sum */)); // step: 1659
		fConst294KI = (((fConst284KI + -0.74313045f /* Sum */) / fConst283KI) + 1.4500711f /* Sum */); // step: 1662
		fConst295KI = (2.0f * (1.4500711f + -fConst288KI /* Sum */)); // step: 1666
		fConst296KI = (11.0520525f / fConst287KI); // step: 1676
		fConst297KI = (fConst296KI + 1.4500711f /* Sum */); // step: 1677
		fConst298KI = (2.0f * (1.4500711f + -fConst296KI /* Sum */)); // step: 1682
		fConst299KI = (1.0f / (((fConst284KI + 0.15748216f /* Sum */) / fConst283KI) + 0.9351402f /* Sum */)); // step: 1691
		fConst300KI = (((fConst284KI + -0.15748216f /* Sum */) / fConst283KI) + 0.9351402f /* Sum */); // step: 1694
		fConst301KI = (2.0f * (0.9351402f + -fConst288KI /* Sum */)); // step: 1698
		fConst302KI = (1.0f / (((fConst284KI + 0.78241307f /* Sum */) / fConst283KI) + 0.2452915f /* Sum */)); // step: 1711
		fConst303KI = (((fConst284KI + -0.78241307f /* Sum */) / fConst283KI) + 0.2452915f /* Sum */); // step: 1714
		fConst304KI = (2.0f * (0.2452915f + -fConst288KI /* Sum */)); // step: 1718
		fConst305KI = (0.0001f / fConst287KI); // step: 1728
		fConst306KI = (fConst305KI + 0.0004332272f /* Sum */); // step: 1729
		fConst307KI = (2.0f * (0.0004332272f + -fConst305KI /* Sum */)); // step: 1734
		fConst308KI = (1.0f / (((fConst284KI + 0.51247865f /* Sum */) / fConst283KI) + 0.6896214f /* Sum */)); // step: 1743
		fConst309KI = (((fConst284KI + -0.51247865f /* Sum */) / fConst283KI) + 0.6896214f /* Sum */); // step: 1746
		fConst310KI = (2.0f * (0.6896214f + -fConst288KI /* Sum */)); // step: 1750
		fConst311KI = (fConst288KI + 7.6217313f /* Sum */); // step: 1760
		fConst312KI = (2.0f * (7.6217313f + -fConst288KI /* Sum */)); // step: 1764
		fConst313KI = (1.0f / (((fConst284KI + 0.16840488f /* Sum */) / fConst283KI) + 1.0693583f /* Sum */)); // step: 1773
		fConst314KI = (((fConst284KI + -0.16840488f /* Sum */) / fConst283KI) + 1.0693583f /* Sum */); // step: 1776
		fConst315KI = (2.0f * (1.0693583f + -fConst288KI /* Sum */)); // step: 1780
		fConst316KI = (fConst288KI + 53.53615f /* Sum */); // step: 1790
		fConst317KI = (2.0f * (53.53615f + -fConst288KI /* Sum */)); // step: 1794
		fConst318KI = tanf((785.3982f / fConst0KI)); // step: 1802
		fConst319KI = (1.0f / fConst318KI); // step: 1803
		fConst320KI = (1.0f / (((fConst319KI + 3.1897273f /* Sum */) / fConst318KI) + 4.0767817f /* Sum */)); // step: 1807
		fConst321KI = (((fConst319KI + -3.1897273f /* Sum */) / fConst318KI) + 4.0767817f /* Sum */); // step: 1810
		fConst322KI = powf(fConst318KI,2.0f); // step: 1813
		fConst323KI = (1.0f / fConst322KI); // step: 1814
		fConst324KI = (2.0f * (4.0767817f + -fConst323KI /* Sum */)); // step: 1817
		fConst325KI = (0.0017661728f / fConst322KI); // step: 1827
		fConst326KI = (fConst325KI + 0.0004076782f /* Sum */); // step: 1828
		fConst327KI = (2.0f * (0.0004076782f + -fConst325KI /* Sum */)); // step: 1833
		fConst328KI = (1.0f / (((fConst319KI + 0.74313045f /* Sum */) / fConst318KI) + 1.4500711f /* Sum */)); // step: 1842
		fConst329KI = (((fConst319KI + -0.74313045f /* Sum */) / fConst318KI) + 1.4500711f /* Sum */); // step: 1845
		fConst330KI = (2.0f * (1.4500711f + -fConst323KI /* Sum */)); // step: 1849
		fConst331KI = (11.0520525f / fConst322KI); // step: 1859
		fConst332KI = (fConst331KI + 1.4500711f /* Sum */); // step: 1860
		fConst333KI = (2.0f * (1.4500711f + -fConst331KI /* Sum */)); // step: 1865
		fConst334KI = (1.0f / (((fConst319KI + 0.15748216f /* Sum */) / fConst318KI) + 0.9351402f /* Sum */)); // step: 1874
		fConst335KI = (((fConst319KI + -0.15748216f /* Sum */) / fConst318KI) + 0.9351402f /* Sum */); // step: 1877
		fConst336KI = (2.0f * (0.9351402f + -fConst323KI /* Sum */)); // step: 1881
		fConst337KI = (1.0f / (((fConst319KI + 0.78241307f /* Sum */) / fConst318KI) + 0.2452915f /* Sum */)); // step: 1894
		fConst338KI = (((fConst319KI + -0.78241307f /* Sum */) / fConst318KI) + 0.2452915f /* Sum */); // step: 1897
		fConst339KI = (2.0f * (0.2452915f + -fConst323KI /* Sum */)); // step: 1901
		fConst340KI = (0.0001f / fConst322KI); // step: 1911
		fConst341KI = (fConst340KI + 0.0004332272f /* Sum */); // step: 1912
		fConst342KI = (2.0f * (0.0004332272f + -fConst340KI /* Sum */)); // step: 1917
		fConst343KI = (1.0f / (((fConst319KI + 0.51247865f /* Sum */) / fConst318KI) + 0.6896214f /* Sum */)); // step: 1926
		fConst344KI = (((fConst319KI + -0.51247865f /* Sum */) / fConst318KI) + 0.6896214f /* Sum */); // step: 1929
		fConst345KI = (2.0f * (0.6896214f + -fConst323KI /* Sum */)); // step: 1933
		fConst346KI = (fConst323KI + 7.6217313f /* Sum */); // step: 1943
		fConst347KI = (2.0f * (7.6217313f + -fConst323KI /* Sum */)); // step: 1947
		fConst348KI = (1.0f / (((fConst319KI + 0.16840488f /* Sum */) / fConst318KI) + 1.0693583f /* Sum */)); // step: 1956
		fConst349KI = (((fConst319KI + -0.16840488f /* Sum */) / fConst318KI) + 1.0693583f /* Sum */); // step: 1959
		fConst350KI = (2.0f * (1.0693583f + -fConst323KI /* Sum */)); // step: 1963
		fConst351KI = (fConst323KI + 53.53615f /* Sum */); // step: 1973
		fConst352KI = (2.0f * (53.53615f + -fConst323KI /* Sum */)); // step: 1977
		fConst353KI = tanf((494.76984f / fConst0KI)); // step: 1985
		fConst354KI = (1.0f / fConst353KI); // step: 1986
		fConst355KI = (1.0f / (((fConst354KI + 3.1897273f /* Sum */) / fConst353KI) + 4.0767817f /* Sum */)); // step: 1990
		fConst356KI = (((fConst354KI + -3.1897273f /* Sum */) / fConst353KI) + 4.0767817f /* Sum */); // step: 1993
		fConst357KI = powf(fConst353KI,2.0f); // step: 1996
		fConst358KI = (1.0f / fConst357KI); // step: 1997
		fConst359KI = (2.0f * (4.0767817f + -fConst358KI /* Sum */)); // step: 2000
		fConst360KI = (0.0017661728f / fConst357KI); // step: 2010
		fConst361KI = (fConst360KI + 0.0004076782f /* Sum */); // step: 2011
		fConst362KI = (2.0f * (0.0004076782f + -fConst360KI /* Sum */)); // step: 2016
		fConst363KI = (1.0f / (((fConst354KI + 0.74313045f /* Sum */) / fConst353KI) + 1.4500711f /* Sum */)); // step: 2025
		fConst364KI = (((fConst354KI + -0.74313045f /* Sum */) / fConst353KI) + 1.4500711f /* Sum */); // step: 2028
		fConst365KI = (2.0f * (1.4500711f + -fConst358KI /* Sum */)); // step: 2032
		fConst366KI = (11.0520525f / fConst357KI); // step: 2042
		fConst367KI = (fConst366KI + 1.4500711f /* Sum */); // step: 2043
		fConst368KI = (2.0f * (1.4500711f + -fConst366KI /* Sum */)); // step: 2048
		fConst369KI = (1.0f / (((fConst354KI + 0.15748216f /* Sum */) / fConst353KI) + 0.9351402f /* Sum */)); // step: 2057
		fConst370KI = (((fConst354KI + -0.15748216f /* Sum */) / fConst353KI) + 0.9351402f /* Sum */); // step: 2060
		fConst371KI = (2.0f * (0.9351402f + -fConst358KI /* Sum */)); // step: 2064
		fConst372KI = (1.0f / (((fConst354KI + 0.78241307f /* Sum */) / fConst353KI) + 0.2452915f /* Sum */)); // step: 2077
		fConst373KI = (((fConst354KI + -0.78241307f /* Sum */) / fConst353KI) + 0.2452915f /* Sum */); // step: 2080
		fConst374KI = (2.0f * (0.2452915f + -fConst358KI /* Sum */)); // step: 2084
		fConst375KI = (0.0001f / fConst357KI); // step: 2094
		fConst376KI = (fConst375KI + 0.0004332272f /* Sum */); // step: 2095
		fConst377KI = (2.0f * (0.0004332272f + -fConst375KI /* Sum */)); // step: 2100
		fConst378KI = (1.0f / (((fConst354KI + 0.51247865f /* Sum */) / fConst353KI) + 0.6896214f /* Sum */)); // step: 2109
		fConst379KI = (((fConst354KI + -0.51247865f /* Sum */) / fConst353KI) + 0.6896214f /* Sum */); // step: 2112
		fConst380KI = (2.0f * (0.6896214f + -fConst358KI /* Sum */)); // step: 2116
		fConst381KI = (fConst358KI + 7.6217313f /* Sum */); // step: 2126
		fConst382KI = (2.0f * (7.6217313f + -fConst358KI /* Sum */)); // step: 2130
		fConst383KI = (1.0f / (((fConst354KI + 0.16840488f /* Sum */) / fConst353KI) + 1.0693583f /* Sum */)); // step: 2139
		fConst384KI = (((fConst354KI + -0.16840488f /* Sum */) / fConst353KI) + 1.0693583f /* Sum */); // step: 2142
		fConst385KI = (2.0f * (1.0693583f + -fConst358KI /* Sum */)); // step: 2146
		fConst386KI = (fConst358KI + 53.53615f /* Sum */); // step: 2156
		fConst387KI = (2.0f * (53.53615f + -fConst358KI /* Sum */)); // step: 2160
		fConst388KI = tanf((311.68546f / fConst0KI)); // step: 2168
		fConst389KI = (1.0f / fConst388KI); // step: 2169
		fConst390KI = (1.0f / (((fConst389KI + 3.1897273f /* Sum */) / fConst388KI) + 4.0767817f /* Sum */)); // step: 2173
		fConst391KI = (((fConst389KI + -3.1897273f /* Sum */) / fConst388KI) + 4.0767817f /* Sum */); // step: 2176
		fConst392KI = powf(fConst388KI,2.0f); // step: 2179
		fConst393KI = (1.0f / fConst392KI); // step: 2180
		fConst394KI = (2.0f * (4.0767817f + -fConst393KI /* Sum */)); // step: 2183
		fConst395KI = (0.0017661728f / fConst392KI); // step: 2193
		fConst396KI = (fConst395KI + 0.0004076782f /* Sum */); // step: 2194
		fConst397KI = (2.0f * (0.0004076782f + -fConst395KI /* Sum */)); // step: 2199
		fConst398KI = (1.0f / (((fConst389KI + 0.74313045f /* Sum */) / fConst388KI) + 1.4500711f /* Sum */)); // step: 2208
		fConst399KI = (((fConst389KI + -0.74313045f /* Sum */) / fConst388KI) + 1.4500711f /* Sum */); // step: 2211
		fConst400KI = (2.0f * (1.4500711f + -fConst393KI /* Sum */)); // step: 2215
		fConst401KI = (11.0520525f / fConst392KI); // step: 2225
		fConst402KI = (fConst401KI + 1.4500711f /* Sum */); // step: 2226
		fConst403KI = (2.0f * (1.4500711f + -fConst401KI /* Sum */)); // step: 2231
		fConst404KI = (1.0f / (((fConst389KI + 0.15748216f /* Sum */) / fConst388KI) + 0.9351402f /* Sum */)); // step: 2240
		fConst405KI = (((fConst389KI + -0.15748216f /* Sum */) / fConst388KI) + 0.9351402f /* Sum */); // step: 2243
		fConst406KI = (2.0f * (0.9351402f + -fConst393KI /* Sum */)); // step: 2247
		fConst407KI = (1.0f / (((fConst389KI + 0.78241307f /* Sum */) / fConst388KI) + 0.2452915f /* Sum */)); // step: 2260
		fConst408KI = (((fConst389KI + -0.78241307f /* Sum */) / fConst388KI) + 0.2452915f /* Sum */); // step: 2263
		fConst409KI = (2.0f * (0.2452915f + -fConst393KI /* Sum */)); // step: 2267
		fConst410KI = (0.0001f / fConst392KI); // step: 2277
		fConst411KI = (fConst410KI + 0.0004332272f /* Sum */); // step: 2278
		fConst412KI = (2.0f * (0.0004332272f + -fConst410KI /* Sum */)); // step: 2283
		fConst413KI = (1.0f / (((fConst389KI + 0.51247865f /* Sum */) / fConst388KI) + 0.6896214f /* Sum */)); // step: 2292
		fConst414KI = (((fConst389KI + -0.51247865f /* Sum */) / fConst388KI) + 0.6896214f /* Sum */); // step: 2295
		fConst415KI = (2.0f * (0.6896214f + -fConst393KI /* Sum */)); // step: 2299
		fConst416KI = (fConst393KI + 7.6217313f /* Sum */); // step: 2309
		fConst417KI = (2.0f * (7.6217313f + -fConst393KI /* Sum */)); // step: 2313
		fConst418KI = (1.0f / (((fConst389KI + 0.16840488f /* Sum */) / fConst388KI) + 1.0693583f /* Sum */)); // step: 2322
		fConst419KI = (((fConst389KI + -0.16840488f /* Sum */) / fConst388KI) + 1.0693583f /* Sum */); // step: 2325
		fConst420KI = (2.0f * (1.0693583f + -fConst393KI /* Sum */)); // step: 2329
		fConst421KI = (fConst393KI + 53.53615f /* Sum */); // step: 2339
		fConst422KI = (2.0f * (53.53615f + -fConst393KI /* Sum */)); // step: 2343
		fConst423KI = tanf((196.34955f / fConst0KI)); // step: 2351
		fConst424KI = (1.0f / fConst423KI); // step: 2352
		fConst425KI = (1.0f / (((fConst424KI + 3.1897273f /* Sum */) / fConst423KI) + 4.0767817f /* Sum */)); // step: 2356
		fConst426KI = (((fConst424KI + -3.1897273f /* Sum */) / fConst423KI) + 4.0767817f /* Sum */); // step: 2359
		fConst427KI = powf(fConst423KI,2.0f); // step: 2362
		fConst428KI = (1.0f / fConst427KI); // step: 2363
		fConst429KI = (2.0f * (4.0767817f + -fConst428KI /* Sum */)); // step: 2366
		fConst430KI = (0.0017661728f / fConst427KI); // step: 2376
		fConst431KI = (fConst430KI + 0.0004076782f /* Sum */); // step: 2377
		fConst432KI = (2.0f * (0.0004076782f + -fConst430KI /* Sum */)); // step: 2382
		fConst433KI = (1.0f / (((fConst424KI + 0.74313045f /* Sum */) / fConst423KI) + 1.4500711f /* Sum */)); // step: 2391
		fConst434KI = (((fConst424KI + -0.74313045f /* Sum */) / fConst423KI) + 1.4500711f /* Sum */); // step: 2394
		fConst435KI = (2.0f * (1.4500711f + -fConst428KI /* Sum */)); // step: 2398
		fConst436KI = (11.0520525f / fConst427KI); // step: 2408
		fConst437KI = (fConst436KI + 1.4500711f /* Sum */); // step: 2409
		fConst438KI = (2.0f * (1.4500711f + -fConst436KI /* Sum */)); // step: 2414
		fConst439KI = (1.0f / (((fConst424KI + 0.15748216f /* Sum */) / fConst423KI) + 0.9351402f /* Sum */)); // step: 2423
		fConst440KI = (((fConst424KI + -0.15748216f /* Sum */) / fConst423KI) + 0.9351402f /* Sum */); // step: 2426
		fConst441KI = (2.0f * (0.9351402f + -fConst428KI /* Sum */)); // step: 2430
		fConst442KI = (1.0f / (((fConst424KI + 0.78241307f /* Sum */) / fConst423KI) + 0.2452915f /* Sum */)); // step: 2443
		fConst443KI = (((fConst424KI + -0.78241307f /* Sum */) / fConst423KI) + 0.2452915f /* Sum */); // step: 2446
		fConst444KI = (2.0f * (0.2452915f + -fConst428KI /* Sum */)); // step: 2450
		fConst445KI = (0.0001f / fConst427KI); // step: 2460
		fConst446KI = (fConst445KI + 0.0004332272f /* Sum */); // step: 2461
		fConst447KI = (2.0f * (0.0004332272f + -fConst445KI /* Sum */)); // step: 2466
		fConst448KI = (1.0f / (((fConst424KI + 0.51247865f /* Sum */) / fConst423KI) + 0.6896214f /* Sum */)); // step: 2475
		fConst449KI = (((fConst424KI + -0.51247865f /* Sum */) / fConst423KI) + 0.6896214f /* Sum */); // step: 2478
		fConst450KI = (2.0f * (0.6896214f + -fConst428KI /* Sum */)); // step: 2482
		fConst451KI = (fConst428KI + 7.6217313f /* Sum */); // step: 2492
		fConst452KI = (2.0f * (7.6217313f + -fConst428KI /* Sum */)); // step: 2496
		fConst453KI = (1.0f / (((fConst424KI + 0.16840488f /* Sum */) / fConst423KI) + 1.0693583f /* Sum */)); // step: 2505
		fConst454KI = (((fConst424KI + -0.16840488f /* Sum */) / fConst423KI) + 1.0693583f /* Sum */); // step: 2508
		fConst455KI = (2.0f * (1.0693583f + -fConst428KI /* Sum */)); // step: 2512
		fConst456KI = (fConst428KI + 53.53615f /* Sum */); // step: 2522
		fConst457KI = (2.0f * (53.53615f + -fConst428KI /* Sum */)); // step: 2526
		fConst458KI = tanf((123.69246f / fConst0KI)); // step: 2534
		fConst459KI = (1.0f / fConst458KI); // step: 2535
		fConst460KI = (1.0f / (((fConst459KI + 3.1897273f /* Sum */) / fConst458KI) + 4.0767817f /* Sum */)); // step: 2539
		fConst461KI = (((fConst459KI + -3.1897273f /* Sum */) / fConst458KI) + 4.0767817f /* Sum */); // step: 2542
		fConst462KI = powf(fConst458KI,2.0f); // step: 2545
		fConst463KI = (1.0f / fConst462KI); // step: 2546
		fConst464KI = (2.0f * (4.0767817f + -fConst463KI /* Sum */)); // step: 2549
		fConst465KI = (0.0017661728f / fConst462KI); // step: 2559
		fConst466KI = (fConst465KI + 0.0004076782f /* Sum */); // step: 2560
		fConst467KI = (2.0f * (0.0004076782f + -fConst465KI /* Sum */)); // step: 2565
		fConst468KI = (1.0f / (((fConst459KI + 0.74313045f /* Sum */) / fConst458KI) + 1.4500711f /* Sum */)); // step: 2574
		fConst469KI = (((fConst459KI + -0.74313045f /* Sum */) / fConst458KI) + 1.4500711f /* Sum */); // step: 2577
		fConst470KI = (2.0f * (1.4500711f + -fConst463KI /* Sum */)); // step: 2581
		fConst471KI = (11.0520525f / fConst462KI); // step: 2591
		fConst472KI = (fConst471KI + 1.4500711f /* Sum */); // step: 2592
		fConst473KI = (2.0f * (1.4500711f + -fConst471KI /* Sum */)); // step: 2597
		fConst474KI = (1.0f / (((fConst459KI + 0.15748216f /* Sum */) / fConst458KI) + 0.9351402f /* Sum */)); // step: 2606
		fConst475KI = (((fConst459KI + -0.15748216f /* Sum */) / fConst458KI) + 0.9351402f /* Sum */); // step: 2609
		fConst476KI = (2.0f * (0.9351402f + -fConst463KI /* Sum */)); // step: 2613
		fConst477KI = (1.0f / (((fConst459KI + 0.78241307f /* Sum */) / fConst458KI) + 0.2452915f /* Sum */)); // step: 2626
		fConst478KI = (((fConst459KI + -0.78241307f /* Sum */) / fConst458KI) + 0.2452915f /* Sum */); // step: 2629
		fConst479KI = (2.0f * (0.2452915f + -fConst463KI /* Sum */)); // step: 2633
		fConst480KI = (0.0001f / fConst462KI); // step: 2643
		fConst481KI = (fConst480KI + 0.0004332272f /* Sum */); // step: 2644
		fConst482KI = (2.0f * (0.0004332272f + -fConst480KI /* Sum */)); // step: 2649
		fConst483KI = (1.0f / (((fConst459KI + 0.51247865f /* Sum */) / fConst458KI) + 0.6896214f /* Sum */)); // step: 2658
		fConst484KI = (((fConst459KI + -0.51247865f /* Sum */) / fConst458KI) + 0.6896214f /* Sum */); // step: 2661
		fConst485KI = (2.0f * (0.6896214f + -fConst463KI /* Sum */)); // step: 2665
		fConst486KI = (fConst463KI + 7.6217313f /* Sum */); // step: 2675
		fConst487KI = (2.0f * (7.6217313f + -fConst463KI /* Sum */)); // step: 2679
		fConst488KI = (1.0f / (((fConst459KI + 0.16840488f /* Sum */) / fConst458KI) + 1.0693583f /* Sum */)); // step: 2688
		fConst489KI = (((fConst459KI + -0.16840488f /* Sum */) / fConst458KI) + 1.0693583f /* Sum */); // step: 2691
		fConst490KI = (2.0f * (1.0693583f + -fConst463KI /* Sum */)); // step: 2695
		fConst491KI = (1e+03f / fConst0KI); // step: 2713
		fConst492KI = (50.06381f / fConst7KI); // step: 2722
		fConst493KI = (fConst492KI + 0.9351402f /* Sum */); // step: 2723
		fConst494KI = (2.0f * (0.9351402f + -fConst492KI /* Sum */)); // step: 2728
		fConst495KI = (50.06381f / fConst42KI); // step: 2751
		fConst496KI = (fConst495KI + 0.9351402f /* Sum */); // step: 2752
		fConst497KI = (2.0f * (0.9351402f + -fConst495KI /* Sum */)); // step: 2757
		fConst498KI = (50.06381f / fConst77KI); // step: 2776
		fConst499KI = (fConst498KI + 0.9351402f /* Sum */); // step: 2777
		fConst500KI = (2.0f * (0.9351402f + -fConst498KI /* Sum */)); // step: 2782
		fConst501KI = (50.06381f / fConst112KI); // step: 2801
		fConst502KI = (fConst501KI + 0.9351402f /* Sum */); // step: 2802
		fConst503KI = (2.0f * (0.9351402f + -fConst501KI /* Sum */)); // step: 2807
		fConst504KI = (50.06381f / fConst147KI); // step: 2826
		fConst505KI = (fConst504KI + 0.9351402f /* Sum */); // step: 2827
		fConst506KI = (2.0f * (0.9351402f + -fConst504KI /* Sum */)); // step: 2832
		fConst507KI = (50.06381f / fConst182KI); // step: 2851
		fConst508KI = (fConst507KI + 0.9351402f /* Sum */); // step: 2852
		fConst509KI = (2.0f * (0.9351402f + -fConst507KI /* Sum */)); // step: 2857
		fConst510KI = (50.06381f / fConst217KI); // step: 2876
		fConst511KI = (fConst510KI + 0.9351402f /* Sum */); // step: 2877
		fConst512KI = (2.0f * (0.9351402f + -fConst510KI /* Sum */)); // step: 2882
		fConst513KI = (50.06381f / fConst252KI); // step: 2901
		fConst514KI = (fConst513KI + 0.9351402f /* Sum */); // step: 2902
		fConst515KI = (2.0f * (0.9351402f + -fConst513KI /* Sum */)); // step: 2907
		fConst516KI = (50.06381f / fConst287KI); // step: 2926
		fConst517KI = (fConst516KI + 0.9351402f /* Sum */); // step: 2927
		fConst518KI = (2.0f * (0.9351402f + -fConst516KI /* Sum */)); // step: 2932
		fConst519KI = (50.06381f / fConst322KI); // step: 2951
		fConst520KI = (fConst519KI + 0.9351402f /* Sum */); // step: 2952
		fConst521KI = (2.0f * (0.9351402f + -fConst519KI /* Sum */)); // step: 2957
		fConst522KI = (50.06381f / fConst357KI); // step: 2976
		fConst523KI = (fConst522KI + 0.9351402f /* Sum */); // step: 2977
		fConst524KI = (2.0f * (0.9351402f + -fConst522KI /* Sum */)); // step: 2982
		fConst525KI = (50.06381f / fConst392KI); // step: 3001
		fConst526KI = (fConst525KI + 0.9351402f /* Sum */); // step: 3002
		fConst527KI = (2.0f * (0.9351402f + -fConst525KI /* Sum */)); // step: 3007
		fConst528KI = (50.06381f / fConst427KI); // step: 3026
		fConst529KI = (fConst528KI + 0.9351402f /* Sum */); // step: 3027
		fConst530KI = (2.0f * (0.9351402f + -fConst528KI /* Sum */)); // step: 3032
		fConst531KI = (50.06381f / fConst462KI); // step: 3051
		fConst532KI = (fConst531KI + 0.9351402f /* Sum */); // step: 3052
		fConst533KI = (2.0f * (0.9351402f + -fConst531KI /* Sum */)); // step: 3057
		fConst534KI = (fConst463KI + 53.53615f /* Sum */); // step: 3076
		fConst535KI = (2.0f * (53.53615f + -fConst463KI /* Sum */)); // step: 3080
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = 0.0f;
		fcheckbox0 = 0.0;
		fslider3 = -2e+01f;
		fslider4 = 0.0f;
		fslider5 = 5e+01f;
		fslider6 = 1e+02f;
	}
	virtual void instanceClear() {
		iVec0KCState = 0;
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec6SEState = 0;
		fVec8SEState = 0;
		fVec5SEState = 0;
		fVec11SEState = 0;
		fVec13SEState = 0;
		fVec14SEState = 0;
		fVec18SEState = 0;
		for (int j = 0; j < 2; j++) { fVec17SEState[j] = 0; }
		fVec23SEState = 0;
		for (int j = 0; j < 2; j++) { fVec22SEState[j] = 0; }
		fVec28SEState = 0;
		for (int j = 0; j < 2; j++) { fVec27SEState[j] = 0; }
		fVec31SEState = 0;
		for (int j = 0; j < 2; j++) { fVec30SEState[j] = 0; }
		fVec36SEState = 0;
		for (int j = 0; j < 2; j++) { fVec35SEState[j] = 0; }
		fVec41SEState = 0;
		for (int j = 0; j < 2; j++) { fVec40SEState[j] = 0; }
		fVec46SEState = 0;
		for (int j = 0; j < 2; j++) { fVec45SEState[j] = 0; }
		fVec51SEState = 0;
		for (int j = 0; j < 2; j++) { fVec50SEState[j] = 0; }
		fVec56SEState = 0;
		for (int j = 0; j < 2; j++) { fVec55SEState[j] = 0; }
		fVec59SEState = 0;
		for (int j = 0; j < 2; j++) { fVec58SEState[j] = 0; }
		fVec64SEState = 0;
		for (int j = 0; j < 2; j++) { fVec63SEState[j] = 0; }
		fVec69SEState = 0;
		for (int j = 0; j < 2; j++) { fVec68SEState[j] = 0; }
		fVec74SEState = 0;
		for (int j = 0; j < 2; j++) { fVec73SEState[j] = 0; }
		fVec79SEState = 0;
		for (int j = 0; j < 2; j++) { fVec78SEState[j] = 0; }
		fVec84SEState = 0;
		for (int j = 0; j < 2; j++) { fVec83SEState[j] = 0; }
		fVec87SEState = 0;
		for (int j = 0; j < 2; j++) { fVec86SEState[j] = 0; }
		fVec92SEState = 0;
		for (int j = 0; j < 2; j++) { fVec91SEState[j] = 0; }
		fVec97SEState = 0;
		for (int j = 0; j < 2; j++) { fVec96SEState[j] = 0; }
		fVec102SEState = 0;
		for (int j = 0; j < 2; j++) { fVec101SEState[j] = 0; }
		fVec107SEState = 0;
		for (int j = 0; j < 2; j++) { fVec106SEState[j] = 0; }
		fVec112SEState = 0;
		for (int j = 0; j < 2; j++) { fVec111SEState[j] = 0; }
		fVec115SEState = 0;
		for (int j = 0; j < 2; j++) { fVec114SEState[j] = 0; }
		fVec120SEState = 0;
		for (int j = 0; j < 2; j++) { fVec119SEState[j] = 0; }
		fVec125SEState = 0;
		for (int j = 0; j < 2; j++) { fVec124SEState[j] = 0; }
		fVec130SEState = 0;
		for (int j = 0; j < 2; j++) { fVec129SEState[j] = 0; }
		fVec135SEState = 0;
		for (int j = 0; j < 2; j++) { fVec134SEState[j] = 0; }
		fVec140SEState = 0;
		for (int j = 0; j < 2; j++) { fVec139SEState[j] = 0; }
		fVec143SEState = 0;
		for (int j = 0; j < 2; j++) { fVec142SEState[j] = 0; }
		fVec148SEState = 0;
		for (int j = 0; j < 2; j++) { fVec147SEState[j] = 0; }
		fVec153SEState = 0;
		for (int j = 0; j < 2; j++) { fVec152SEState[j] = 0; }
		fVec158SEState = 0;
		for (int j = 0; j < 2; j++) { fVec157SEState[j] = 0; }
		fVec163SEState = 0;
		for (int j = 0; j < 2; j++) { fVec162SEState[j] = 0; }
		fVec168SEState = 0;
		for (int j = 0; j < 2; j++) { fVec167SEState[j] = 0; }
		fVec171SEState = 0;
		for (int j = 0; j < 2; j++) { fVec170SEState[j] = 0; }
		fVec176SEState = 0;
		for (int j = 0; j < 2; j++) { fVec175SEState[j] = 0; }
		fVec181SEState = 0;
		for (int j = 0; j < 2; j++) { fVec180SEState[j] = 0; }
		fVec186SEState = 0;
		for (int j = 0; j < 2; j++) { fVec185SEState[j] = 0; }
		fVec191SEState = 0;
		for (int j = 0; j < 2; j++) { fVec190SEState[j] = 0; }
		fVec196SEState = 0;
		for (int j = 0; j < 2; j++) { fVec195SEState[j] = 0; }
		fVec199SEState = 0;
		for (int j = 0; j < 2; j++) { fVec198SEState[j] = 0; }
		fVec204SEState = 0;
		for (int j = 0; j < 2; j++) { fVec203SEState[j] = 0; }
		fVec209SEState = 0;
		for (int j = 0; j < 2; j++) { fVec208SEState[j] = 0; }
		fVec214SEState = 0;
		for (int j = 0; j < 2; j++) { fVec213SEState[j] = 0; }
		fVec219SEState = 0;
		for (int j = 0; j < 2; j++) { fVec218SEState[j] = 0; }
		fVec224SEState = 0;
		for (int j = 0; j < 2; j++) { fVec223SEState[j] = 0; }
		fVec227SEState = 0;
		for (int j = 0; j < 2; j++) { fVec226SEState[j] = 0; }
		fVec232SEState = 0;
		for (int j = 0; j < 2; j++) { fVec231SEState[j] = 0; }
		fVec237SEState = 0;
		for (int j = 0; j < 2; j++) { fVec236SEState[j] = 0; }
		fVec242SEState = 0;
		for (int j = 0; j < 2; j++) { fVec241SEState[j] = 0; }
		fVec247SEState = 0;
		for (int j = 0; j < 2; j++) { fVec246SEState[j] = 0; }
		fVec252SEState = 0;
		for (int j = 0; j < 2; j++) { fVec251SEState[j] = 0; }
		fVec255SEState = 0;
		for (int j = 0; j < 2; j++) { fVec254SEState[j] = 0; }
		fVec260SEState = 0;
		for (int j = 0; j < 2; j++) { fVec259SEState[j] = 0; }
		fVec265SEState = 0;
		for (int j = 0; j < 2; j++) { fVec264SEState[j] = 0; }
		fVec270SEState = 0;
		for (int j = 0; j < 2; j++) { fVec269SEState[j] = 0; }
		fVec275SEState = 0;
		for (int j = 0; j < 2; j++) { fVec274SEState[j] = 0; }
		fVec280SEState = 0;
		for (int j = 0; j < 2; j++) { fVec279SEState[j] = 0; }
		fVec283SEState = 0;
		for (int j = 0; j < 2; j++) { fVec282SEState[j] = 0; }
		fVec288SEState = 0;
		for (int j = 0; j < 2; j++) { fVec287SEState[j] = 0; }
		fVec293SEState = 0;
		for (int j = 0; j < 2; j++) { fVec292SEState[j] = 0; }
		fVec298SEState = 0;
		for (int j = 0; j < 2; j++) { fVec297SEState[j] = 0; }
		fVec303SEState = 0;
		for (int j = 0; j < 2; j++) { fVec302SEState[j] = 0; }
		fVec308SEState = 0;
		for (int j = 0; j < 2; j++) { fVec307SEState[j] = 0; }
		fVec311SEState = 0;
		for (int j = 0; j < 2; j++) { fVec310SEState[j] = 0; }
		fVec316SEState = 0;
		for (int j = 0; j < 2; j++) { fVec315SEState[j] = 0; }
		fVec321SEState = 0;
		for (int j = 0; j < 2; j++) { fVec320SEState[j] = 0; }
		fVec326SEState = 0;
		for (int j = 0; j < 2; j++) { fVec325SEState[j] = 0; }
		fVec331SEState = 0;
		for (int j = 0; j < 2; j++) { fVec330SEState[j] = 0; }
		fVec336SEState = 0;
		for (int j = 0; j < 2; j++) { fVec335SEState[j] = 0; }
		fVec339SEState = 0;
		for (int j = 0; j < 2; j++) { fVec338SEState[j] = 0; }
		fVec344SEState = 0;
		for (int j = 0; j < 2; j++) { fVec343SEState[j] = 0; }
		fVec349SEState = 0;
		for (int j = 0; j < 2; j++) { fVec348SEState[j] = 0; }
		fVec354SEState = 0;
		for (int j = 0; j < 2; j++) { fVec353SEState[j] = 0; }
		fVec359SEState = 0;
		for (int j = 0; j < 2; j++) { fVec358SEState[j] = 0; }
		fVec364SEState = 0;
		for (int j = 0; j < 2; j++) { fVec363SEState[j] = 0; }
		fVec367SEState = 0;
		for (int j = 0; j < 2; j++) { fVec366SEState[j] = 0; }
		fVec372SEState = 0;
		for (int j = 0; j < 2; j++) { fVec371SEState[j] = 0; }
		fVec377SEState = 0;
		for (int j = 0; j < 2; j++) { fVec376SEState[j] = 0; }
		fVec382SEState = 0;
		for (int j = 0; j < 2; j++) { fVec381SEState[j] = 0; }
		fVec387SEState = 0;
		for (int j = 0; j < 2; j++) { fVec386SEState[j] = 0; }
		fVec392SEState = 0;
		for (int j = 0; j < 2; j++) { fVec391SEState[j] = 0; }
		fVec395SEState = 0;
		for (int j = 0; j < 2; j++) { fVec394SEState[j] = 0; }
		fVec400SEState = 0;
		for (int j = 0; j < 2; j++) { fVec399SEState[j] = 0; }
		fVec405SEState = 0;
		for (int j = 0; j < 2; j++) { fVec404SEState[j] = 0; }
		fVec407SEState = 0;
		fVec411SEState = 0;
		fVec415SEState = 0;
		fVec419SEState = 0;
		fVec423SEState = 0;
		fVec427SEState = 0;
		fVec431SEState = 0;
		fVec435SEState = 0;
		fVec439SEState = 0;
		fVec443SEState = 0;
		fVec447SEState = 0;
		fVec451SEState = 0;
		fVec455SEState = 0;
		fVec459SEState = 0;
		fVec463SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("cubic_distortion");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "Sine oscillator based on 2D vector rotation");
		ui_interface->openVerticalBox("SINE WAVE OSCILLATOR oscrs");
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider3, "unit", "dB");
		ui_interface->addHorizontalSlider("Amplitude", &fslider3, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "tooltip", "Sine wave frequency as a Piano Key (PK) number (A440 = 49 PK)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addHorizontalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider0, "3", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addHorizontalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference:          https://ccrma.stanford.edu/~jos/pasp/Cubic_Soft_Clipper.html");
		ui_interface->openVerticalBox("CUBIC NONLINEARITY cubicnl");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the nonlinearity has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "tooltip", "Amount of distortion");
		ui_interface->addHorizontalSlider("Drive", &fslider4, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider2, "2", "");
		ui_interface->declare(&fslider2, "tooltip", "Brings in even harmonics");
		ui_interface->addHorizontalSlider("Offset", &fslider2, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider6, "0", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider6, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider6, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider5, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider5, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[2];
		float 	fTemp0SE; // step: 4
		float 	fSlow0BE = expf(-(fConst2KI / float(fslider0))); // Zone 2, step: 22
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 44
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 51
		float 	fTemp4SE; // step: 53
		float 	fVec1SE[2];
		float 	fSlow2BE = (0.001f * float(fslider2)); // Zone 2, step: 62
		float 	fVec6SE[2];
		int 	iSlow3BE = int(float(fcheckbox0)); // Zone 2, step: 71
		float 	fSlow4BE = (0.001f * powf(1e+01f,(0.05f * float(fslider3)))); // Zone 2, step: 78
		float 	fVec8SE[2];
		float 	fVec5SE[2];
		float 	fTemp5SE; // step: 90
		float 	fSlow5BE = (0.001f * float(fslider4)); // Zone 2, step: 93
		float 	fVec11SE[2];
		float 	fTemp6SE; // step: 105
		float 	fTemp7SE; // step: 107
		float 	fVec13SE[2];
		float 	fVec14SE[2];
		float 	fTemp8SE; // step: 126
		float 	fTemp9SE; // step: 142
		float 	fVec18SE[2];
		float 	fTemp10SE; // step: 157
		float 	fVec17SE[3];
		float 	fTemp11SE; // step: 182
		float 	fVec23SE[2];
		float 	fTemp12SE; // step: 194
		float 	fVec22SE[3];
		float 	fTemp13SE; // step: 218
		float 	fVec28SE[2];
		float 	fTemp14SE; // step: 230
		float 	fVec27SE[3];
		float 	fTemp15SE; // step: 241
		float 	fVec31SE[2];
		float 	fTemp16SE; // step: 253
		float 	fVec30SE[3];
		float 	fTemp17SE; // step: 278
		float 	fVec36SE[2];
		float 	fTemp18SE; // step: 290
		float 	fVec35SE[3];
		float 	fTemp19SE; // step: 312
		float 	fVec41SE[2];
		float 	fTemp20SE; // step: 324
		float 	fVec40SE[3];
		float 	fTemp21SE; // step: 335
		float 	fTemp22SE; // step: 347
		float 	fVec46SE[2];
		float 	fTemp23SE; // step: 362
		float 	fVec45SE[3];
		float 	fTemp24SE; // step: 382
		float 	fVec51SE[2];
		float 	fTemp25SE; // step: 394
		float 	fVec50SE[3];
		float 	fTemp26SE; // step: 414
		float 	fVec56SE[2];
		float 	fTemp27SE; // step: 426
		float 	fVec55SE[3];
		float 	fTemp28SE; // step: 434
		float 	fVec59SE[2];
		float 	fTemp29SE; // step: 446
		float 	fVec58SE[3];
		float 	fTemp30SE; // step: 466
		float 	fVec64SE[2];
		float 	fTemp31SE; // step: 478
		float 	fVec63SE[3];
		float 	fTemp32SE; // step: 496
		float 	fVec69SE[2];
		float 	fTemp33SE; // step: 508
		float 	fVec68SE[3];
		float 	fTemp34SE; // step: 518
		float 	fTemp35SE; // step: 530
		float 	fVec74SE[2];
		float 	fTemp36SE; // step: 545
		float 	fVec73SE[3];
		float 	fTemp37SE; // step: 565
		float 	fVec79SE[2];
		float 	fTemp38SE; // step: 577
		float 	fVec78SE[3];
		float 	fTemp39SE; // step: 597
		float 	fVec84SE[2];
		float 	fTemp40SE; // step: 609
		float 	fVec83SE[3];
		float 	fTemp41SE; // step: 617
		float 	fVec87SE[2];
		float 	fTemp42SE; // step: 629
		float 	fVec86SE[3];
		float 	fTemp43SE; // step: 649
		float 	fVec92SE[2];
		float 	fTemp44SE; // step: 661
		float 	fVec91SE[3];
		float 	fTemp45SE; // step: 679
		float 	fVec97SE[2];
		float 	fTemp46SE; // step: 691
		float 	fVec96SE[3];
		float 	fTemp47SE; // step: 701
		float 	fTemp48SE; // step: 713
		float 	fVec102SE[2];
		float 	fTemp49SE; // step: 728
		float 	fVec101SE[3];
		float 	fTemp50SE; // step: 748
		float 	fVec107SE[2];
		float 	fTemp51SE; // step: 760
		float 	fVec106SE[3];
		float 	fTemp52SE; // step: 780
		float 	fVec112SE[2];
		float 	fTemp53SE; // step: 792
		float 	fVec111SE[3];
		float 	fTemp54SE; // step: 800
		float 	fVec115SE[2];
		float 	fTemp55SE; // step: 812
		float 	fVec114SE[3];
		float 	fTemp56SE; // step: 832
		float 	fVec120SE[2];
		float 	fTemp57SE; // step: 844
		float 	fVec119SE[3];
		float 	fTemp58SE; // step: 862
		float 	fVec125SE[2];
		float 	fTemp59SE; // step: 874
		float 	fVec124SE[3];
		float 	fTemp60SE; // step: 884
		float 	fTemp61SE; // step: 896
		float 	fVec130SE[2];
		float 	fTemp62SE; // step: 911
		float 	fVec129SE[3];
		float 	fTemp63SE; // step: 931
		float 	fVec135SE[2];
		float 	fTemp64SE; // step: 943
		float 	fVec134SE[3];
		float 	fTemp65SE; // step: 963
		float 	fVec140SE[2];
		float 	fTemp66SE; // step: 975
		float 	fVec139SE[3];
		float 	fTemp67SE; // step: 983
		float 	fVec143SE[2];
		float 	fTemp68SE; // step: 995
		float 	fVec142SE[3];
		float 	fTemp69SE; // step: 1015
		float 	fVec148SE[2];
		float 	fTemp70SE; // step: 1027
		float 	fVec147SE[3];
		float 	fTemp71SE; // step: 1045
		float 	fVec153SE[2];
		float 	fTemp72SE; // step: 1057
		float 	fVec152SE[3];
		float 	fTemp73SE; // step: 1067
		float 	fTemp74SE; // step: 1079
		float 	fVec158SE[2];
		float 	fTemp75SE; // step: 1094
		float 	fVec157SE[3];
		float 	fTemp76SE; // step: 1114
		float 	fVec163SE[2];
		float 	fTemp77SE; // step: 1126
		float 	fVec162SE[3];
		float 	fTemp78SE; // step: 1146
		float 	fVec168SE[2];
		float 	fTemp79SE; // step: 1158
		float 	fVec167SE[3];
		float 	fTemp80SE; // step: 1166
		float 	fVec171SE[2];
		float 	fTemp81SE; // step: 1178
		float 	fVec170SE[3];
		float 	fTemp82SE; // step: 1198
		float 	fVec176SE[2];
		float 	fTemp83SE; // step: 1210
		float 	fVec175SE[3];
		float 	fTemp84SE; // step: 1228
		float 	fVec181SE[2];
		float 	fTemp85SE; // step: 1240
		float 	fVec180SE[3];
		float 	fTemp86SE; // step: 1250
		float 	fTemp87SE; // step: 1262
		float 	fVec186SE[2];
		float 	fTemp88SE; // step: 1277
		float 	fVec185SE[3];
		float 	fTemp89SE; // step: 1297
		float 	fVec191SE[2];
		float 	fTemp90SE; // step: 1309
		float 	fVec190SE[3];
		float 	fTemp91SE; // step: 1329
		float 	fVec196SE[2];
		float 	fTemp92SE; // step: 1341
		float 	fVec195SE[3];
		float 	fTemp93SE; // step: 1349
		float 	fVec199SE[2];
		float 	fTemp94SE; // step: 1361
		float 	fVec198SE[3];
		float 	fTemp95SE; // step: 1381
		float 	fVec204SE[2];
		float 	fTemp96SE; // step: 1393
		float 	fVec203SE[3];
		float 	fTemp97SE; // step: 1411
		float 	fVec209SE[2];
		float 	fTemp98SE; // step: 1423
		float 	fVec208SE[3];
		float 	fTemp99SE; // step: 1433
		float 	fTemp100SE; // step: 1445
		float 	fVec214SE[2];
		float 	fTemp101SE; // step: 1460
		float 	fVec213SE[3];
		float 	fTemp102SE; // step: 1480
		float 	fVec219SE[2];
		float 	fTemp103SE; // step: 1492
		float 	fVec218SE[3];
		float 	fTemp104SE; // step: 1512
		float 	fVec224SE[2];
		float 	fTemp105SE; // step: 1524
		float 	fVec223SE[3];
		float 	fTemp106SE; // step: 1532
		float 	fVec227SE[2];
		float 	fTemp107SE; // step: 1544
		float 	fVec226SE[3];
		float 	fTemp108SE; // step: 1564
		float 	fVec232SE[2];
		float 	fTemp109SE; // step: 1576
		float 	fVec231SE[3];
		float 	fTemp110SE; // step: 1594
		float 	fVec237SE[2];
		float 	fTemp111SE; // step: 1606
		float 	fVec236SE[3];
		float 	fTemp112SE; // step: 1616
		float 	fTemp113SE; // step: 1628
		float 	fVec242SE[2];
		float 	fTemp114SE; // step: 1643
		float 	fVec241SE[3];
		float 	fTemp115SE; // step: 1663
		float 	fVec247SE[2];
		float 	fTemp116SE; // step: 1675
		float 	fVec246SE[3];
		float 	fTemp117SE; // step: 1695
		float 	fVec252SE[2];
		float 	fTemp118SE; // step: 1707
		float 	fVec251SE[3];
		float 	fTemp119SE; // step: 1715
		float 	fVec255SE[2];
		float 	fTemp120SE; // step: 1727
		float 	fVec254SE[3];
		float 	fTemp121SE; // step: 1747
		float 	fVec260SE[2];
		float 	fTemp122SE; // step: 1759
		float 	fVec259SE[3];
		float 	fTemp123SE; // step: 1777
		float 	fVec265SE[2];
		float 	fTemp124SE; // step: 1789
		float 	fVec264SE[3];
		float 	fTemp125SE; // step: 1799
		float 	fTemp126SE; // step: 1811
		float 	fVec270SE[2];
		float 	fTemp127SE; // step: 1826
		float 	fVec269SE[3];
		float 	fTemp128SE; // step: 1846
		float 	fVec275SE[2];
		float 	fTemp129SE; // step: 1858
		float 	fVec274SE[3];
		float 	fTemp130SE; // step: 1878
		float 	fVec280SE[2];
		float 	fTemp131SE; // step: 1890
		float 	fVec279SE[3];
		float 	fTemp132SE; // step: 1898
		float 	fVec283SE[2];
		float 	fTemp133SE; // step: 1910
		float 	fVec282SE[3];
		float 	fTemp134SE; // step: 1930
		float 	fVec288SE[2];
		float 	fTemp135SE; // step: 1942
		float 	fVec287SE[3];
		float 	fTemp136SE; // step: 1960
		float 	fVec293SE[2];
		float 	fTemp137SE; // step: 1972
		float 	fVec292SE[3];
		float 	fTemp138SE; // step: 1982
		float 	fTemp139SE; // step: 1994
		float 	fVec298SE[2];
		float 	fTemp140SE; // step: 2009
		float 	fVec297SE[3];
		float 	fTemp141SE; // step: 2029
		float 	fVec303SE[2];
		float 	fTemp142SE; // step: 2041
		float 	fVec302SE[3];
		float 	fTemp143SE; // step: 2061
		float 	fVec308SE[2];
		float 	fTemp144SE; // step: 2073
		float 	fVec307SE[3];
		float 	fTemp145SE; // step: 2081
		float 	fVec311SE[2];
		float 	fTemp146SE; // step: 2093
		float 	fVec310SE[3];
		float 	fTemp147SE; // step: 2113
		float 	fVec316SE[2];
		float 	fTemp148SE; // step: 2125
		float 	fVec315SE[3];
		float 	fTemp149SE; // step: 2143
		float 	fVec321SE[2];
		float 	fTemp150SE; // step: 2155
		float 	fVec320SE[3];
		float 	fTemp151SE; // step: 2165
		float 	fTemp152SE; // step: 2177
		float 	fVec326SE[2];
		float 	fTemp153SE; // step: 2192
		float 	fVec325SE[3];
		float 	fTemp154SE; // step: 2212
		float 	fVec331SE[2];
		float 	fTemp155SE; // step: 2224
		float 	fVec330SE[3];
		float 	fTemp156SE; // step: 2244
		float 	fVec336SE[2];
		float 	fTemp157SE; // step: 2256
		float 	fVec335SE[3];
		float 	fTemp158SE; // step: 2264
		float 	fVec339SE[2];
		float 	fTemp159SE; // step: 2276
		float 	fVec338SE[3];
		float 	fTemp160SE; // step: 2296
		float 	fVec344SE[2];
		float 	fTemp161SE; // step: 2308
		float 	fVec343SE[3];
		float 	fTemp162SE; // step: 2326
		float 	fVec349SE[2];
		float 	fTemp163SE; // step: 2338
		float 	fVec348SE[3];
		float 	fTemp164SE; // step: 2348
		float 	fTemp165SE; // step: 2360
		float 	fVec354SE[2];
		float 	fTemp166SE; // step: 2375
		float 	fVec353SE[3];
		float 	fTemp167SE; // step: 2395
		float 	fVec359SE[2];
		float 	fTemp168SE; // step: 2407
		float 	fVec358SE[3];
		float 	fTemp169SE; // step: 2427
		float 	fVec364SE[2];
		float 	fTemp170SE; // step: 2439
		float 	fVec363SE[3];
		float 	fTemp171SE; // step: 2447
		float 	fVec367SE[2];
		float 	fTemp172SE; // step: 2459
		float 	fVec366SE[3];
		float 	fTemp173SE; // step: 2479
		float 	fVec372SE[2];
		float 	fTemp174SE; // step: 2491
		float 	fVec371SE[3];
		float 	fTemp175SE; // step: 2509
		float 	fVec377SE[2];
		float 	fTemp176SE; // step: 2521
		float 	fVec376SE[3];
		float 	fTemp177SE; // step: 2531
		float 	fTemp178SE; // step: 2543
		float 	fVec382SE[2];
		float 	fTemp179SE; // step: 2558
		float 	fVec381SE[3];
		float 	fTemp180SE; // step: 2578
		float 	fVec387SE[2];
		float 	fTemp181SE; // step: 2590
		float 	fVec386SE[3];
		float 	fTemp182SE; // step: 2610
		float 	fVec392SE[2];
		float 	fTemp183SE; // step: 2622
		float 	fVec391SE[3];
		float 	fTemp184SE; // step: 2630
		float 	fVec395SE[2];
		float 	fTemp185SE; // step: 2642
		float 	fVec394SE[3];
		float 	fTemp186SE; // step: 2662
		float 	fVec400SE[2];
		float 	fTemp187SE; // step: 2674
		float 	fVec399SE[3];
		float 	fTemp188SE; // step: 2692
		float 	fVec405SE[2];
		float 	fTemp189SE; // step: 2704
		float 	fVec404SE[3];
		float 	fSlow6BE = float(fslider5); // Zone 2, step: 2708
		float 	fSlow7BE = (fConst491KI / float(fslider6)); // Zone 2, step: 2714
		float 	fSlow8BE = ((1) ? expf(-fSlow7BE) : 0.0f); // Zone 2, step: 2717
		float 	fSlow9BE = (1.0f + -(expf(-fSlow7BE)) /* Sum */); // Zone 2, step: 2738
		float 	fVec407SE[2];
		float 	fSlow10SE;
		float 	fVec411SE[2];
		float 	fSlow11SE;
		float 	fVec415SE[2];
		float 	fSlow12SE;
		float 	fVec419SE[2];
		float 	fSlow13SE;
		float 	fVec423SE[2];
		float 	fSlow14SE;
		float 	fVec427SE[2];
		float 	fSlow15SE;
		float 	fVec431SE[2];
		float 	fSlow16SE;
		float 	fVec435SE[2];
		float 	fSlow17SE;
		float 	fVec439SE[2];
		float 	fSlow18SE;
		float 	fVec443SE[2];
		float 	fSlow19SE;
		float 	fVec447SE[2];
		float 	fSlow20SE;
		float 	fVec451SE[2];
		float 	fSlow21SE;
		float 	fVec455SE[2];
		float 	fSlow22SE;
		float 	fVec459SE[2];
		float 	fSlow23SE;
		float 	fVec463SE[2];
		float 	fSlow24SE;
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState;
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec6SE[1] = fVec6SEState;
		fVec8SE[1] = fVec8SEState;
		fVec5SE[1] = fVec5SEState;
		fVec11SE[1] = fVec11SEState;
		fVec13SE[1] = fVec13SEState;
		fVec14SE[1] = fVec14SEState;
		fVec18SE[1] = fVec18SEState;
		fVec17SE[1] = fVec17SEState[0];
		fVec17SE[2] = fVec17SEState[1];
		fVec23SE[1] = fVec23SEState;
		fVec22SE[1] = fVec22SEState[0];
		fVec22SE[2] = fVec22SEState[1];
		fVec28SE[1] = fVec28SEState;
		fVec27SE[1] = fVec27SEState[0];
		fVec27SE[2] = fVec27SEState[1];
		fVec31SE[1] = fVec31SEState;
		fVec30SE[1] = fVec30SEState[0];
		fVec30SE[2] = fVec30SEState[1];
		fVec36SE[1] = fVec36SEState;
		fVec35SE[1] = fVec35SEState[0];
		fVec35SE[2] = fVec35SEState[1];
		fVec41SE[1] = fVec41SEState;
		fVec40SE[1] = fVec40SEState[0];
		fVec40SE[2] = fVec40SEState[1];
		fVec46SE[1] = fVec46SEState;
		fVec45SE[1] = fVec45SEState[0];
		fVec45SE[2] = fVec45SEState[1];
		fVec51SE[1] = fVec51SEState;
		fVec50SE[1] = fVec50SEState[0];
		fVec50SE[2] = fVec50SEState[1];
		fVec56SE[1] = fVec56SEState;
		fVec55SE[1] = fVec55SEState[0];
		fVec55SE[2] = fVec55SEState[1];
		fVec59SE[1] = fVec59SEState;
		fVec58SE[1] = fVec58SEState[0];
		fVec58SE[2] = fVec58SEState[1];
		fVec64SE[1] = fVec64SEState;
		fVec63SE[1] = fVec63SEState[0];
		fVec63SE[2] = fVec63SEState[1];
		fVec69SE[1] = fVec69SEState;
		fVec68SE[1] = fVec68SEState[0];
		fVec68SE[2] = fVec68SEState[1];
		fVec74SE[1] = fVec74SEState;
		fVec73SE[1] = fVec73SEState[0];
		fVec73SE[2] = fVec73SEState[1];
		fVec79SE[1] = fVec79SEState;
		fVec78SE[1] = fVec78SEState[0];
		fVec78SE[2] = fVec78SEState[1];
		fVec84SE[1] = fVec84SEState;
		fVec83SE[1] = fVec83SEState[0];
		fVec83SE[2] = fVec83SEState[1];
		fVec87SE[1] = fVec87SEState;
		fVec86SE[1] = fVec86SEState[0];
		fVec86SE[2] = fVec86SEState[1];
		fVec92SE[1] = fVec92SEState;
		fVec91SE[1] = fVec91SEState[0];
		fVec91SE[2] = fVec91SEState[1];
		fVec97SE[1] = fVec97SEState;
		fVec96SE[1] = fVec96SEState[0];
		fVec96SE[2] = fVec96SEState[1];
		fVec102SE[1] = fVec102SEState;
		fVec101SE[1] = fVec101SEState[0];
		fVec101SE[2] = fVec101SEState[1];
		fVec107SE[1] = fVec107SEState;
		fVec106SE[1] = fVec106SEState[0];
		fVec106SE[2] = fVec106SEState[1];
		fVec112SE[1] = fVec112SEState;
		fVec111SE[1] = fVec111SEState[0];
		fVec111SE[2] = fVec111SEState[1];
		fVec115SE[1] = fVec115SEState;
		fVec114SE[1] = fVec114SEState[0];
		fVec114SE[2] = fVec114SEState[1];
		fVec120SE[1] = fVec120SEState;
		fVec119SE[1] = fVec119SEState[0];
		fVec119SE[2] = fVec119SEState[1];
		fVec125SE[1] = fVec125SEState;
		fVec124SE[1] = fVec124SEState[0];
		fVec124SE[2] = fVec124SEState[1];
		fVec130SE[1] = fVec130SEState;
		fVec129SE[1] = fVec129SEState[0];
		fVec129SE[2] = fVec129SEState[1];
		fVec135SE[1] = fVec135SEState;
		fVec134SE[1] = fVec134SEState[0];
		fVec134SE[2] = fVec134SEState[1];
		fVec140SE[1] = fVec140SEState;
		fVec139SE[1] = fVec139SEState[0];
		fVec139SE[2] = fVec139SEState[1];
		fVec143SE[1] = fVec143SEState;
		fVec142SE[1] = fVec142SEState[0];
		fVec142SE[2] = fVec142SEState[1];
		fVec148SE[1] = fVec148SEState;
		fVec147SE[1] = fVec147SEState[0];
		fVec147SE[2] = fVec147SEState[1];
		fVec153SE[1] = fVec153SEState;
		fVec152SE[1] = fVec152SEState[0];
		fVec152SE[2] = fVec152SEState[1];
		fVec158SE[1] = fVec158SEState;
		fVec157SE[1] = fVec157SEState[0];
		fVec157SE[2] = fVec157SEState[1];
		fVec163SE[1] = fVec163SEState;
		fVec162SE[1] = fVec162SEState[0];
		fVec162SE[2] = fVec162SEState[1];
		fVec168SE[1] = fVec168SEState;
		fVec167SE[1] = fVec167SEState[0];
		fVec167SE[2] = fVec167SEState[1];
		fVec171SE[1] = fVec171SEState;
		fVec170SE[1] = fVec170SEState[0];
		fVec170SE[2] = fVec170SEState[1];
		fVec176SE[1] = fVec176SEState;
		fVec175SE[1] = fVec175SEState[0];
		fVec175SE[2] = fVec175SEState[1];
		fVec181SE[1] = fVec181SEState;
		fVec180SE[1] = fVec180SEState[0];
		fVec180SE[2] = fVec180SEState[1];
		fVec186SE[1] = fVec186SEState;
		fVec185SE[1] = fVec185SEState[0];
		fVec185SE[2] = fVec185SEState[1];
		fVec191SE[1] = fVec191SEState;
		fVec190SE[1] = fVec190SEState[0];
		fVec190SE[2] = fVec190SEState[1];
		fVec196SE[1] = fVec196SEState;
		fVec195SE[1] = fVec195SEState[0];
		fVec195SE[2] = fVec195SEState[1];
		fVec199SE[1] = fVec199SEState;
		fVec198SE[1] = fVec198SEState[0];
		fVec198SE[2] = fVec198SEState[1];
		fVec204SE[1] = fVec204SEState;
		fVec203SE[1] = fVec203SEState[0];
		fVec203SE[2] = fVec203SEState[1];
		fVec209SE[1] = fVec209SEState;
		fVec208SE[1] = fVec208SEState[0];
		fVec208SE[2] = fVec208SEState[1];
		fVec214SE[1] = fVec214SEState;
		fVec213SE[1] = fVec213SEState[0];
		fVec213SE[2] = fVec213SEState[1];
		fVec219SE[1] = fVec219SEState;
		fVec218SE[1] = fVec218SEState[0];
		fVec218SE[2] = fVec218SEState[1];
		fVec224SE[1] = fVec224SEState;
		fVec223SE[1] = fVec223SEState[0];
		fVec223SE[2] = fVec223SEState[1];
		fVec227SE[1] = fVec227SEState;
		fVec226SE[1] = fVec226SEState[0];
		fVec226SE[2] = fVec226SEState[1];
		fVec232SE[1] = fVec232SEState;
		fVec231SE[1] = fVec231SEState[0];
		fVec231SE[2] = fVec231SEState[1];
		fVec237SE[1] = fVec237SEState;
		fVec236SE[1] = fVec236SEState[0];
		fVec236SE[2] = fVec236SEState[1];
		fVec242SE[1] = fVec242SEState;
		fVec241SE[1] = fVec241SEState[0];
		fVec241SE[2] = fVec241SEState[1];
		fVec247SE[1] = fVec247SEState;
		fVec246SE[1] = fVec246SEState[0];
		fVec246SE[2] = fVec246SEState[1];
		fVec252SE[1] = fVec252SEState;
		fVec251SE[1] = fVec251SEState[0];
		fVec251SE[2] = fVec251SEState[1];
		fVec255SE[1] = fVec255SEState;
		fVec254SE[1] = fVec254SEState[0];
		fVec254SE[2] = fVec254SEState[1];
		fVec260SE[1] = fVec260SEState;
		fVec259SE[1] = fVec259SEState[0];
		fVec259SE[2] = fVec259SEState[1];
		fVec265SE[1] = fVec265SEState;
		fVec264SE[1] = fVec264SEState[0];
		fVec264SE[2] = fVec264SEState[1];
		fVec270SE[1] = fVec270SEState;
		fVec269SE[1] = fVec269SEState[0];
		fVec269SE[2] = fVec269SEState[1];
		fVec275SE[1] = fVec275SEState;
		fVec274SE[1] = fVec274SEState[0];
		fVec274SE[2] = fVec274SEState[1];
		fVec280SE[1] = fVec280SEState;
		fVec279SE[1] = fVec279SEState[0];
		fVec279SE[2] = fVec279SEState[1];
		fVec283SE[1] = fVec283SEState;
		fVec282SE[1] = fVec282SEState[0];
		fVec282SE[2] = fVec282SEState[1];
		fVec288SE[1] = fVec288SEState;
		fVec287SE[1] = fVec287SEState[0];
		fVec287SE[2] = fVec287SEState[1];
		fVec293SE[1] = fVec293SEState;
		fVec292SE[1] = fVec292SEState[0];
		fVec292SE[2] = fVec292SEState[1];
		fVec298SE[1] = fVec298SEState;
		fVec297SE[1] = fVec297SEState[0];
		fVec297SE[2] = fVec297SEState[1];
		fVec303SE[1] = fVec303SEState;
		fVec302SE[1] = fVec302SEState[0];
		fVec302SE[2] = fVec302SEState[1];
		fVec308SE[1] = fVec308SEState;
		fVec307SE[1] = fVec307SEState[0];
		fVec307SE[2] = fVec307SEState[1];
		fVec311SE[1] = fVec311SEState;
		fVec310SE[1] = fVec310SEState[0];
		fVec310SE[2] = fVec310SEState[1];
		fVec316SE[1] = fVec316SEState;
		fVec315SE[1] = fVec315SEState[0];
		fVec315SE[2] = fVec315SEState[1];
		fVec321SE[1] = fVec321SEState;
		fVec320SE[1] = fVec320SEState[0];
		fVec320SE[2] = fVec320SEState[1];
		fVec326SE[1] = fVec326SEState;
		fVec325SE[1] = fVec325SEState[0];
		fVec325SE[2] = fVec325SEState[1];
		fVec331SE[1] = fVec331SEState;
		fVec330SE[1] = fVec330SEState[0];
		fVec330SE[2] = fVec330SEState[1];
		fVec336SE[1] = fVec336SEState;
		fVec335SE[1] = fVec335SEState[0];
		fVec335SE[2] = fVec335SEState[1];
		fVec339SE[1] = fVec339SEState;
		fVec338SE[1] = fVec338SEState[0];
		fVec338SE[2] = fVec338SEState[1];
		fVec344SE[1] = fVec344SEState;
		fVec343SE[1] = fVec343SEState[0];
		fVec343SE[2] = fVec343SEState[1];
		fVec349SE[1] = fVec349SEState;
		fVec348SE[1] = fVec348SEState[0];
		fVec348SE[2] = fVec348SEState[1];
		fVec354SE[1] = fVec354SEState;
		fVec353SE[1] = fVec353SEState[0];
		fVec353SE[2] = fVec353SEState[1];
		fVec359SE[1] = fVec359SEState;
		fVec358SE[1] = fVec358SEState[0];
		fVec358SE[2] = fVec358SEState[1];
		fVec364SE[1] = fVec364SEState;
		fVec363SE[1] = fVec363SEState[0];
		fVec363SE[2] = fVec363SEState[1];
		fVec367SE[1] = fVec367SEState;
		fVec366SE[1] = fVec366SEState[0];
		fVec366SE[2] = fVec366SEState[1];
		fVec372SE[1] = fVec372SEState;
		fVec371SE[1] = fVec371SEState[0];
		fVec371SE[2] = fVec371SEState[1];
		fVec377SE[1] = fVec377SEState;
		fVec376SE[1] = fVec376SEState[0];
		fVec376SE[2] = fVec376SEState[1];
		fVec382SE[1] = fVec382SEState;
		fVec381SE[1] = fVec381SEState[0];
		fVec381SE[2] = fVec381SEState[1];
		fVec387SE[1] = fVec387SEState;
		fVec386SE[1] = fVec386SEState[0];
		fVec386SE[2] = fVec386SEState[1];
		fVec392SE[1] = fVec392SEState;
		fVec391SE[1] = fVec391SEState[0];
		fVec391SE[2] = fVec391SEState[1];
		fVec395SE[1] = fVec395SEState;
		fVec394SE[1] = fVec394SEState[0];
		fVec394SE[2] = fVec394SEState[1];
		fVec400SE[1] = fVec400SEState;
		fVec399SE[1] = fVec399SEState[0];
		fVec399SE[2] = fVec399SEState[1];
		fVec405SE[1] = fVec405SEState;
		fVec404SE[1] = fVec404SEState[0];
		fVec404SE[2] = fVec404SEState[1];
		fVec407SE[1] = fVec407SEState;
		fVec411SE[1] = fVec411SEState;
		fVec415SE[1] = fVec415SEState;
		fVec419SE[1] = fVec419SEState;
		fVec423SE[1] = fVec423SEState;
		fVec427SE[1] = fVec427SEState;
		fVec431SE[1] = fVec431SEState;
		fVec435SE[1] = fVec435SEState;
		fVec439SE[1] = fVec439SEState;
		fVec443SE[1] = fVec443SEState;
		fVec447SE[1] = fVec447SEState;
		fVec451SE[1] = fVec451SEState;
		fVec455SE[1] = fVec455SEState;
		fVec459SE[1] = fVec459SEState;
		fVec463SE[1] = fVec463SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 4
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = (fConst1KI * fVec2SE[0]); // step: 44
			fTemp2SE = cosf(fTemp1SE); // step: 45
			fTemp3SE = sinf(fTemp1SE); // step: 51
			fTemp4SE = fVec5SE[1]; // step: 53
			fVec1SE[0] = ((fTemp0SE * fTemp2SE) + float((1 + -iVec0KC[1] /* Sum */)) + -(fTemp3SE * fTemp4SE) /* Sum */);
			fVec6SE[0] = (fSlow2BE + (0.999f * fVec6SE[1]) /* Sum */);
			fVec8SE[0] = (fSlow4BE + (0.999f * fVec8SE[1]) /* Sum */);
			fVec5SE[0] = ((fTemp0SE * fTemp3SE) + (fTemp4SE * fTemp2SE) /* Sum */);
			fTemp5SE = (fVec8SE[0] * fVec5SE[0]); // step: 90
			fVec11SE[0] = (fSlow5BE + (0.999f * fVec11SE[1]) /* Sum */);
			fTemp6SE = std::max(-1.0f, std::min(1.0f, (fVec6SE[0] + (((iSlow3BE) ? 0.0f : fTemp5SE) * powf(1e+01f,(2.0f * fVec11SE[0]))) /* Sum */))); // step: 105
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 107
			fVec13SE[0] = (fTemp6SE * (1.0f + -(0.33333334f * fTemp7SE) /* Sum */));
			fVec14SE[0] = ((0.995f * fVec14SE[1]) + (fTemp6SE * (1.0f + (-0.33333334f * fTemp7SE) /* Sum */)) + -fVec13SE[1] /* Sum */);
			fTemp8SE = ((iSlow3BE) ? fTemp5SE : fVec14SE[0]); // step: 126
			fTemp9SE = fVec17SE[2]; // step: 142
			fVec18SE[0] = (fTemp8SE + -(fConst5KI * ((fConst6KI * fTemp9SE) + (fConst9KI * fVec18SE[1]) /* Sum */)) /* Sum */);
			fTemp10SE = fVec18SE[0]; // step: 157
			fVec17SE[0] = fTemp10SE;
			fTemp11SE = fVec22SE[2]; // step: 182
			fVec23SE[0] = ((fConst5KI * ((fConst11KI * fVec18SE[0]) + (fConst12KI * fVec17SE[1]) + (fConst11KI * fTemp9SE) /* Sum */)) + -(fConst13KI * ((fConst14KI * fTemp11SE) + (fConst15KI * fVec23SE[1]) /* Sum */)) /* Sum */);
			fTemp12SE = fVec23SE[0]; // step: 194
			fVec22SE[0] = fTemp12SE;
			fTemp13SE = fVec27SE[2]; // step: 218
			fVec28SE[0] = ((fConst13KI * ((fConst17KI * fVec23SE[0]) + (fConst18KI * fVec22SE[1]) + (fConst17KI * fTemp11SE) /* Sum */)) + -(fConst19KI * ((fConst20KI * fTemp13SE) + (fConst21KI * fVec28SE[1]) /* Sum */)) /* Sum */);
			fTemp14SE = fVec28SE[0]; // step: 230
			fVec27SE[0] = fTemp14SE;
			fTemp15SE = fVec30SE[2]; // step: 241
			fVec31SE[0] = (fTemp8SE + -(fConst22KI * ((fConst23KI * fTemp15SE) + (fConst24KI * fVec31SE[1]) /* Sum */)) /* Sum */);
			fTemp16SE = fVec31SE[0]; // step: 253
			fVec30SE[0] = fTemp16SE;
			fTemp17SE = fVec35SE[2]; // step: 278
			fVec36SE[0] = ((fConst22KI * ((fConst26KI * fVec31SE[0]) + (fConst27KI * fVec30SE[1]) + (fConst26KI * fTemp15SE) /* Sum */)) + -(fConst28KI * ((fConst29KI * fTemp17SE) + (fConst30KI * fVec36SE[1]) /* Sum */)) /* Sum */);
			fTemp18SE = fVec36SE[0]; // step: 290
			fVec35SE[0] = fTemp18SE;
			fTemp19SE = fVec40SE[2]; // step: 312
			fVec41SE[0] = ((fConst28KI * ((fConst31KI * fVec36SE[0]) + (fConst32KI * fVec35SE[1]) + (fConst31KI * fTemp17SE) /* Sum */)) + -(fConst33KI * ((fConst34KI * fTemp19SE) + (fConst35KI * fVec41SE[1]) /* Sum */)) /* Sum */);
			fTemp20SE = fVec41SE[0]; // step: 324
			fVec40SE[0] = fTemp20SE;
			fTemp21SE = (fConst33KI * ((fConst36KI * fVec41SE[0]) + (fConst37KI * fVec40SE[1]) + (fConst36KI * fTemp19SE) /* Sum */)); // step: 335
			fTemp22SE = fVec45SE[2]; // step: 347
			fVec46SE[0] = (fTemp21SE + -(fConst40KI * ((fConst41KI * fTemp22SE) + (fConst44KI * fVec46SE[1]) /* Sum */)) /* Sum */);
			fTemp23SE = fVec46SE[0]; // step: 362
			fVec45SE[0] = fTemp23SE;
			fTemp24SE = fVec50SE[2]; // step: 382
			fVec51SE[0] = ((fConst40KI * ((fConst46KI * fVec46SE[0]) + (fConst47KI * fVec45SE[1]) + (fConst46KI * fTemp22SE) /* Sum */)) + -(fConst48KI * ((fConst49KI * fTemp24SE) + (fConst50KI * fVec51SE[1]) /* Sum */)) /* Sum */);
			fTemp25SE = fVec51SE[0]; // step: 394
			fVec50SE[0] = fTemp25SE;
			fTemp26SE = fVec55SE[2]; // step: 414
			fVec56SE[0] = ((fConst48KI * ((fConst52KI * fVec51SE[0]) + (fConst53KI * fVec50SE[1]) + (fConst52KI * fTemp24SE) /* Sum */)) + -(fConst54KI * ((fConst55KI * fTemp26SE) + (fConst56KI * fVec56SE[1]) /* Sum */)) /* Sum */);
			fTemp27SE = fVec56SE[0]; // step: 426
			fVec55SE[0] = fTemp27SE;
			fTemp28SE = fVec58SE[2]; // step: 434
			fVec59SE[0] = (fTemp21SE + -(fConst57KI * ((fConst58KI * fTemp28SE) + (fConst59KI * fVec59SE[1]) /* Sum */)) /* Sum */);
			fTemp29SE = fVec59SE[0]; // step: 446
			fVec58SE[0] = fTemp29SE;
			fTemp30SE = fVec63SE[2]; // step: 466
			fVec64SE[0] = ((fConst57KI * ((fConst61KI * fVec59SE[0]) + (fConst62KI * fVec58SE[1]) + (fConst61KI * fTemp28SE) /* Sum */)) + -(fConst63KI * ((fConst64KI * fTemp30SE) + (fConst65KI * fVec64SE[1]) /* Sum */)) /* Sum */);
			fTemp31SE = fVec64SE[0]; // step: 478
			fVec63SE[0] = fTemp31SE;
			fTemp32SE = fVec68SE[2]; // step: 496
			fVec69SE[0] = ((fConst63KI * ((fConst66KI * fVec64SE[0]) + (fConst67KI * fVec63SE[1]) + (fConst66KI * fTemp30SE) /* Sum */)) + -(fConst68KI * ((fConst69KI * fTemp32SE) + (fConst70KI * fVec69SE[1]) /* Sum */)) /* Sum */);
			fTemp33SE = fVec69SE[0]; // step: 508
			fVec68SE[0] = fTemp33SE;
			fTemp34SE = (fConst68KI * ((fConst71KI * fVec69SE[0]) + (fConst72KI * fVec68SE[1]) + (fConst71KI * fTemp32SE) /* Sum */)); // step: 518
			fTemp35SE = fVec73SE[2]; // step: 530
			fVec74SE[0] = (fTemp34SE + -(fConst75KI * ((fConst76KI * fTemp35SE) + (fConst79KI * fVec74SE[1]) /* Sum */)) /* Sum */);
			fTemp36SE = fVec74SE[0]; // step: 545
			fVec73SE[0] = fTemp36SE;
			fTemp37SE = fVec78SE[2]; // step: 565
			fVec79SE[0] = ((fConst75KI * ((fConst81KI * fVec74SE[0]) + (fConst82KI * fVec73SE[1]) + (fConst81KI * fTemp35SE) /* Sum */)) + -(fConst83KI * ((fConst84KI * fTemp37SE) + (fConst85KI * fVec79SE[1]) /* Sum */)) /* Sum */);
			fTemp38SE = fVec79SE[0]; // step: 577
			fVec78SE[0] = fTemp38SE;
			fTemp39SE = fVec83SE[2]; // step: 597
			fVec84SE[0] = ((fConst83KI * ((fConst87KI * fVec79SE[0]) + (fConst88KI * fVec78SE[1]) + (fConst87KI * fTemp37SE) /* Sum */)) + -(fConst89KI * ((fConst90KI * fTemp39SE) + (fConst91KI * fVec84SE[1]) /* Sum */)) /* Sum */);
			fTemp40SE = fVec84SE[0]; // step: 609
			fVec83SE[0] = fTemp40SE;
			fTemp41SE = fVec86SE[2]; // step: 617
			fVec87SE[0] = (fTemp34SE + -(fConst92KI * ((fConst93KI * fTemp41SE) + (fConst94KI * fVec87SE[1]) /* Sum */)) /* Sum */);
			fTemp42SE = fVec87SE[0]; // step: 629
			fVec86SE[0] = fTemp42SE;
			fTemp43SE = fVec91SE[2]; // step: 649
			fVec92SE[0] = ((fConst92KI * ((fConst96KI * fVec87SE[0]) + (fConst97KI * fVec86SE[1]) + (fConst96KI * fTemp41SE) /* Sum */)) + -(fConst98KI * ((fConst99KI * fTemp43SE) + (fConst100KI * fVec92SE[1]) /* Sum */)) /* Sum */);
			fTemp44SE = fVec92SE[0]; // step: 661
			fVec91SE[0] = fTemp44SE;
			fTemp45SE = fVec96SE[2]; // step: 679
			fVec97SE[0] = ((fConst98KI * ((fConst101KI * fVec92SE[0]) + (fConst102KI * fVec91SE[1]) + (fConst101KI * fTemp43SE) /* Sum */)) + -(fConst103KI * ((fConst104KI * fTemp45SE) + (fConst105KI * fVec97SE[1]) /* Sum */)) /* Sum */);
			fTemp46SE = fVec97SE[0]; // step: 691
			fVec96SE[0] = fTemp46SE;
			fTemp47SE = (fConst103KI * ((fConst106KI * fVec97SE[0]) + (fConst107KI * fVec96SE[1]) + (fConst106KI * fTemp45SE) /* Sum */)); // step: 701
			fTemp48SE = fVec101SE[2]; // step: 713
			fVec102SE[0] = (fTemp47SE + -(fConst110KI * ((fConst111KI * fTemp48SE) + (fConst114KI * fVec102SE[1]) /* Sum */)) /* Sum */);
			fTemp49SE = fVec102SE[0]; // step: 728
			fVec101SE[0] = fTemp49SE;
			fTemp50SE = fVec106SE[2]; // step: 748
			fVec107SE[0] = ((fConst110KI * ((fConst116KI * fVec102SE[0]) + (fConst117KI * fVec101SE[1]) + (fConst116KI * fTemp48SE) /* Sum */)) + -(fConst118KI * ((fConst119KI * fTemp50SE) + (fConst120KI * fVec107SE[1]) /* Sum */)) /* Sum */);
			fTemp51SE = fVec107SE[0]; // step: 760
			fVec106SE[0] = fTemp51SE;
			fTemp52SE = fVec111SE[2]; // step: 780
			fVec112SE[0] = ((fConst118KI * ((fConst122KI * fVec107SE[0]) + (fConst123KI * fVec106SE[1]) + (fConst122KI * fTemp50SE) /* Sum */)) + -(fConst124KI * ((fConst125KI * fTemp52SE) + (fConst126KI * fVec112SE[1]) /* Sum */)) /* Sum */);
			fTemp53SE = fVec112SE[0]; // step: 792
			fVec111SE[0] = fTemp53SE;
			fTemp54SE = fVec114SE[2]; // step: 800
			fVec115SE[0] = (fTemp47SE + -(fConst127KI * ((fConst128KI * fTemp54SE) + (fConst129KI * fVec115SE[1]) /* Sum */)) /* Sum */);
			fTemp55SE = fVec115SE[0]; // step: 812
			fVec114SE[0] = fTemp55SE;
			fTemp56SE = fVec119SE[2]; // step: 832
			fVec120SE[0] = ((fConst127KI * ((fConst131KI * fVec115SE[0]) + (fConst132KI * fVec114SE[1]) + (fConst131KI * fTemp54SE) /* Sum */)) + -(fConst133KI * ((fConst134KI * fTemp56SE) + (fConst135KI * fVec120SE[1]) /* Sum */)) /* Sum */);
			fTemp57SE = fVec120SE[0]; // step: 844
			fVec119SE[0] = fTemp57SE;
			fTemp58SE = fVec124SE[2]; // step: 862
			fVec125SE[0] = ((fConst133KI * ((fConst136KI * fVec120SE[0]) + (fConst137KI * fVec119SE[1]) + (fConst136KI * fTemp56SE) /* Sum */)) + -(fConst138KI * ((fConst139KI * fTemp58SE) + (fConst140KI * fVec125SE[1]) /* Sum */)) /* Sum */);
			fTemp59SE = fVec125SE[0]; // step: 874
			fVec124SE[0] = fTemp59SE;
			fTemp60SE = (fConst138KI * ((fConst141KI * fVec125SE[0]) + (fConst142KI * fVec124SE[1]) + (fConst141KI * fTemp58SE) /* Sum */)); // step: 884
			fTemp61SE = fVec129SE[2]; // step: 896
			fVec130SE[0] = (fTemp60SE + -(fConst145KI * ((fConst146KI * fTemp61SE) + (fConst149KI * fVec130SE[1]) /* Sum */)) /* Sum */);
			fTemp62SE = fVec130SE[0]; // step: 911
			fVec129SE[0] = fTemp62SE;
			fTemp63SE = fVec134SE[2]; // step: 931
			fVec135SE[0] = ((fConst145KI * ((fConst151KI * fVec130SE[0]) + (fConst152KI * fVec129SE[1]) + (fConst151KI * fTemp61SE) /* Sum */)) + -(fConst153KI * ((fConst154KI * fTemp63SE) + (fConst155KI * fVec135SE[1]) /* Sum */)) /* Sum */);
			fTemp64SE = fVec135SE[0]; // step: 943
			fVec134SE[0] = fTemp64SE;
			fTemp65SE = fVec139SE[2]; // step: 963
			fVec140SE[0] = ((fConst153KI * ((fConst157KI * fVec135SE[0]) + (fConst158KI * fVec134SE[1]) + (fConst157KI * fTemp63SE) /* Sum */)) + -(fConst159KI * ((fConst160KI * fTemp65SE) + (fConst161KI * fVec140SE[1]) /* Sum */)) /* Sum */);
			fTemp66SE = fVec140SE[0]; // step: 975
			fVec139SE[0] = fTemp66SE;
			fTemp67SE = fVec142SE[2]; // step: 983
			fVec143SE[0] = (fTemp60SE + -(fConst162KI * ((fConst163KI * fTemp67SE) + (fConst164KI * fVec143SE[1]) /* Sum */)) /* Sum */);
			fTemp68SE = fVec143SE[0]; // step: 995
			fVec142SE[0] = fTemp68SE;
			fTemp69SE = fVec147SE[2]; // step: 1015
			fVec148SE[0] = ((fConst162KI * ((fConst166KI * fVec143SE[0]) + (fConst167KI * fVec142SE[1]) + (fConst166KI * fTemp67SE) /* Sum */)) + -(fConst168KI * ((fConst169KI * fTemp69SE) + (fConst170KI * fVec148SE[1]) /* Sum */)) /* Sum */);
			fTemp70SE = fVec148SE[0]; // step: 1027
			fVec147SE[0] = fTemp70SE;
			fTemp71SE = fVec152SE[2]; // step: 1045
			fVec153SE[0] = ((fConst168KI * ((fConst171KI * fVec148SE[0]) + (fConst172KI * fVec147SE[1]) + (fConst171KI * fTemp69SE) /* Sum */)) + -(fConst173KI * ((fConst174KI * fTemp71SE) + (fConst175KI * fVec153SE[1]) /* Sum */)) /* Sum */);
			fTemp72SE = fVec153SE[0]; // step: 1057
			fVec152SE[0] = fTemp72SE;
			fTemp73SE = (fConst173KI * ((fConst176KI * fVec153SE[0]) + (fConst177KI * fVec152SE[1]) + (fConst176KI * fTemp71SE) /* Sum */)); // step: 1067
			fTemp74SE = fVec157SE[2]; // step: 1079
			fVec158SE[0] = (fTemp73SE + -(fConst180KI * ((fConst181KI * fTemp74SE) + (fConst184KI * fVec158SE[1]) /* Sum */)) /* Sum */);
			fTemp75SE = fVec158SE[0]; // step: 1094
			fVec157SE[0] = fTemp75SE;
			fTemp76SE = fVec162SE[2]; // step: 1114
			fVec163SE[0] = ((fConst180KI * ((fConst186KI * fVec158SE[0]) + (fConst187KI * fVec157SE[1]) + (fConst186KI * fTemp74SE) /* Sum */)) + -(fConst188KI * ((fConst189KI * fTemp76SE) + (fConst190KI * fVec163SE[1]) /* Sum */)) /* Sum */);
			fTemp77SE = fVec163SE[0]; // step: 1126
			fVec162SE[0] = fTemp77SE;
			fTemp78SE = fVec167SE[2]; // step: 1146
			fVec168SE[0] = ((fConst188KI * ((fConst192KI * fVec163SE[0]) + (fConst193KI * fVec162SE[1]) + (fConst192KI * fTemp76SE) /* Sum */)) + -(fConst194KI * ((fConst195KI * fTemp78SE) + (fConst196KI * fVec168SE[1]) /* Sum */)) /* Sum */);
			fTemp79SE = fVec168SE[0]; // step: 1158
			fVec167SE[0] = fTemp79SE;
			fTemp80SE = fVec170SE[2]; // step: 1166
			fVec171SE[0] = (fTemp73SE + -(fConst197KI * ((fConst198KI * fTemp80SE) + (fConst199KI * fVec171SE[1]) /* Sum */)) /* Sum */);
			fTemp81SE = fVec171SE[0]; // step: 1178
			fVec170SE[0] = fTemp81SE;
			fTemp82SE = fVec175SE[2]; // step: 1198
			fVec176SE[0] = ((fConst197KI * ((fConst201KI * fVec171SE[0]) + (fConst202KI * fVec170SE[1]) + (fConst201KI * fTemp80SE) /* Sum */)) + -(fConst203KI * ((fConst204KI * fTemp82SE) + (fConst205KI * fVec176SE[1]) /* Sum */)) /* Sum */);
			fTemp83SE = fVec176SE[0]; // step: 1210
			fVec175SE[0] = fTemp83SE;
			fTemp84SE = fVec180SE[2]; // step: 1228
			fVec181SE[0] = ((fConst203KI * ((fConst206KI * fVec176SE[0]) + (fConst207KI * fVec175SE[1]) + (fConst206KI * fTemp82SE) /* Sum */)) + -(fConst208KI * ((fConst209KI * fTemp84SE) + (fConst210KI * fVec181SE[1]) /* Sum */)) /* Sum */);
			fTemp85SE = fVec181SE[0]; // step: 1240
			fVec180SE[0] = fTemp85SE;
			fTemp86SE = (fConst208KI * ((fConst211KI * fVec181SE[0]) + (fConst212KI * fVec180SE[1]) + (fConst211KI * fTemp84SE) /* Sum */)); // step: 1250
			fTemp87SE = fVec185SE[2]; // step: 1262
			fVec186SE[0] = (fTemp86SE + -(fConst215KI * ((fConst216KI * fTemp87SE) + (fConst219KI * fVec186SE[1]) /* Sum */)) /* Sum */);
			fTemp88SE = fVec186SE[0]; // step: 1277
			fVec185SE[0] = fTemp88SE;
			fTemp89SE = fVec190SE[2]; // step: 1297
			fVec191SE[0] = ((fConst215KI * ((fConst221KI * fVec186SE[0]) + (fConst222KI * fVec185SE[1]) + (fConst221KI * fTemp87SE) /* Sum */)) + -(fConst223KI * ((fConst224KI * fTemp89SE) + (fConst225KI * fVec191SE[1]) /* Sum */)) /* Sum */);
			fTemp90SE = fVec191SE[0]; // step: 1309
			fVec190SE[0] = fTemp90SE;
			fTemp91SE = fVec195SE[2]; // step: 1329
			fVec196SE[0] = ((fConst223KI * ((fConst227KI * fVec191SE[0]) + (fConst228KI * fVec190SE[1]) + (fConst227KI * fTemp89SE) /* Sum */)) + -(fConst229KI * ((fConst230KI * fTemp91SE) + (fConst231KI * fVec196SE[1]) /* Sum */)) /* Sum */);
			fTemp92SE = fVec196SE[0]; // step: 1341
			fVec195SE[0] = fTemp92SE;
			fTemp93SE = fVec198SE[2]; // step: 1349
			fVec199SE[0] = (fTemp86SE + -(fConst232KI * ((fConst233KI * fTemp93SE) + (fConst234KI * fVec199SE[1]) /* Sum */)) /* Sum */);
			fTemp94SE = fVec199SE[0]; // step: 1361
			fVec198SE[0] = fTemp94SE;
			fTemp95SE = fVec203SE[2]; // step: 1381
			fVec204SE[0] = ((fConst232KI * ((fConst236KI * fVec199SE[0]) + (fConst237KI * fVec198SE[1]) + (fConst236KI * fTemp93SE) /* Sum */)) + -(fConst238KI * ((fConst239KI * fTemp95SE) + (fConst240KI * fVec204SE[1]) /* Sum */)) /* Sum */);
			fTemp96SE = fVec204SE[0]; // step: 1393
			fVec203SE[0] = fTemp96SE;
			fTemp97SE = fVec208SE[2]; // step: 1411
			fVec209SE[0] = ((fConst238KI * ((fConst241KI * fVec204SE[0]) + (fConst242KI * fVec203SE[1]) + (fConst241KI * fTemp95SE) /* Sum */)) + -(fConst243KI * ((fConst244KI * fTemp97SE) + (fConst245KI * fVec209SE[1]) /* Sum */)) /* Sum */);
			fTemp98SE = fVec209SE[0]; // step: 1423
			fVec208SE[0] = fTemp98SE;
			fTemp99SE = (fConst243KI * ((fConst246KI * fVec209SE[0]) + (fConst247KI * fVec208SE[1]) + (fConst246KI * fTemp97SE) /* Sum */)); // step: 1433
			fTemp100SE = fVec213SE[2]; // step: 1445
			fVec214SE[0] = (fTemp99SE + -(fConst250KI * ((fConst251KI * fTemp100SE) + (fConst254KI * fVec214SE[1]) /* Sum */)) /* Sum */);
			fTemp101SE = fVec214SE[0]; // step: 1460
			fVec213SE[0] = fTemp101SE;
			fTemp102SE = fVec218SE[2]; // step: 1480
			fVec219SE[0] = ((fConst250KI * ((fConst256KI * fVec214SE[0]) + (fConst257KI * fVec213SE[1]) + (fConst256KI * fTemp100SE) /* Sum */)) + -(fConst258KI * ((fConst259KI * fTemp102SE) + (fConst260KI * fVec219SE[1]) /* Sum */)) /* Sum */);
			fTemp103SE = fVec219SE[0]; // step: 1492
			fVec218SE[0] = fTemp103SE;
			fTemp104SE = fVec223SE[2]; // step: 1512
			fVec224SE[0] = ((fConst258KI * ((fConst262KI * fVec219SE[0]) + (fConst263KI * fVec218SE[1]) + (fConst262KI * fTemp102SE) /* Sum */)) + -(fConst264KI * ((fConst265KI * fTemp104SE) + (fConst266KI * fVec224SE[1]) /* Sum */)) /* Sum */);
			fTemp105SE = fVec224SE[0]; // step: 1524
			fVec223SE[0] = fTemp105SE;
			fTemp106SE = fVec226SE[2]; // step: 1532
			fVec227SE[0] = (fTemp99SE + -(fConst267KI * ((fConst268KI * fTemp106SE) + (fConst269KI * fVec227SE[1]) /* Sum */)) /* Sum */);
			fTemp107SE = fVec227SE[0]; // step: 1544
			fVec226SE[0] = fTemp107SE;
			fTemp108SE = fVec231SE[2]; // step: 1564
			fVec232SE[0] = ((fConst267KI * ((fConst271KI * fVec227SE[0]) + (fConst272KI * fVec226SE[1]) + (fConst271KI * fTemp106SE) /* Sum */)) + -(fConst273KI * ((fConst274KI * fTemp108SE) + (fConst275KI * fVec232SE[1]) /* Sum */)) /* Sum */);
			fTemp109SE = fVec232SE[0]; // step: 1576
			fVec231SE[0] = fTemp109SE;
			fTemp110SE = fVec236SE[2]; // step: 1594
			fVec237SE[0] = ((fConst273KI * ((fConst276KI * fVec232SE[0]) + (fConst277KI * fVec231SE[1]) + (fConst276KI * fTemp108SE) /* Sum */)) + -(fConst278KI * ((fConst279KI * fTemp110SE) + (fConst280KI * fVec237SE[1]) /* Sum */)) /* Sum */);
			fTemp111SE = fVec237SE[0]; // step: 1606
			fVec236SE[0] = fTemp111SE;
			fTemp112SE = (fConst278KI * ((fConst281KI * fVec237SE[0]) + (fConst282KI * fVec236SE[1]) + (fConst281KI * fTemp110SE) /* Sum */)); // step: 1616
			fTemp113SE = fVec241SE[2]; // step: 1628
			fVec242SE[0] = (fTemp112SE + -(fConst285KI * ((fConst286KI * fTemp113SE) + (fConst289KI * fVec242SE[1]) /* Sum */)) /* Sum */);
			fTemp114SE = fVec242SE[0]; // step: 1643
			fVec241SE[0] = fTemp114SE;
			fTemp115SE = fVec246SE[2]; // step: 1663
			fVec247SE[0] = ((fConst285KI * ((fConst291KI * fVec242SE[0]) + (fConst292KI * fVec241SE[1]) + (fConst291KI * fTemp113SE) /* Sum */)) + -(fConst293KI * ((fConst294KI * fTemp115SE) + (fConst295KI * fVec247SE[1]) /* Sum */)) /* Sum */);
			fTemp116SE = fVec247SE[0]; // step: 1675
			fVec246SE[0] = fTemp116SE;
			fTemp117SE = fVec251SE[2]; // step: 1695
			fVec252SE[0] = ((fConst293KI * ((fConst297KI * fVec247SE[0]) + (fConst298KI * fVec246SE[1]) + (fConst297KI * fTemp115SE) /* Sum */)) + -(fConst299KI * ((fConst300KI * fTemp117SE) + (fConst301KI * fVec252SE[1]) /* Sum */)) /* Sum */);
			fTemp118SE = fVec252SE[0]; // step: 1707
			fVec251SE[0] = fTemp118SE;
			fTemp119SE = fVec254SE[2]; // step: 1715
			fVec255SE[0] = (fTemp112SE + -(fConst302KI * ((fConst303KI * fTemp119SE) + (fConst304KI * fVec255SE[1]) /* Sum */)) /* Sum */);
			fTemp120SE = fVec255SE[0]; // step: 1727
			fVec254SE[0] = fTemp120SE;
			fTemp121SE = fVec259SE[2]; // step: 1747
			fVec260SE[0] = ((fConst302KI * ((fConst306KI * fVec255SE[0]) + (fConst307KI * fVec254SE[1]) + (fConst306KI * fTemp119SE) /* Sum */)) + -(fConst308KI * ((fConst309KI * fTemp121SE) + (fConst310KI * fVec260SE[1]) /* Sum */)) /* Sum */);
			fTemp122SE = fVec260SE[0]; // step: 1759
			fVec259SE[0] = fTemp122SE;
			fTemp123SE = fVec264SE[2]; // step: 1777
			fVec265SE[0] = ((fConst308KI * ((fConst311KI * fVec260SE[0]) + (fConst312KI * fVec259SE[1]) + (fConst311KI * fTemp121SE) /* Sum */)) + -(fConst313KI * ((fConst314KI * fTemp123SE) + (fConst315KI * fVec265SE[1]) /* Sum */)) /* Sum */);
			fTemp124SE = fVec265SE[0]; // step: 1789
			fVec264SE[0] = fTemp124SE;
			fTemp125SE = (fConst313KI * ((fConst316KI * fVec265SE[0]) + (fConst317KI * fVec264SE[1]) + (fConst316KI * fTemp123SE) /* Sum */)); // step: 1799
			fTemp126SE = fVec269SE[2]; // step: 1811
			fVec270SE[0] = (fTemp125SE + -(fConst320KI * ((fConst321KI * fTemp126SE) + (fConst324KI * fVec270SE[1]) /* Sum */)) /* Sum */);
			fTemp127SE = fVec270SE[0]; // step: 1826
			fVec269SE[0] = fTemp127SE;
			fTemp128SE = fVec274SE[2]; // step: 1846
			fVec275SE[0] = ((fConst320KI * ((fConst326KI * fVec270SE[0]) + (fConst327KI * fVec269SE[1]) + (fConst326KI * fTemp126SE) /* Sum */)) + -(fConst328KI * ((fConst329KI * fTemp128SE) + (fConst330KI * fVec275SE[1]) /* Sum */)) /* Sum */);
			fTemp129SE = fVec275SE[0]; // step: 1858
			fVec274SE[0] = fTemp129SE;
			fTemp130SE = fVec279SE[2]; // step: 1878
			fVec280SE[0] = ((fConst328KI * ((fConst332KI * fVec275SE[0]) + (fConst333KI * fVec274SE[1]) + (fConst332KI * fTemp128SE) /* Sum */)) + -(fConst334KI * ((fConst335KI * fTemp130SE) + (fConst336KI * fVec280SE[1]) /* Sum */)) /* Sum */);
			fTemp131SE = fVec280SE[0]; // step: 1890
			fVec279SE[0] = fTemp131SE;
			fTemp132SE = fVec282SE[2]; // step: 1898
			fVec283SE[0] = (fTemp125SE + -(fConst337KI * ((fConst338KI * fTemp132SE) + (fConst339KI * fVec283SE[1]) /* Sum */)) /* Sum */);
			fTemp133SE = fVec283SE[0]; // step: 1910
			fVec282SE[0] = fTemp133SE;
			fTemp134SE = fVec287SE[2]; // step: 1930
			fVec288SE[0] = ((fConst337KI * ((fConst341KI * fVec283SE[0]) + (fConst342KI * fVec282SE[1]) + (fConst341KI * fTemp132SE) /* Sum */)) + -(fConst343KI * ((fConst344KI * fTemp134SE) + (fConst345KI * fVec288SE[1]) /* Sum */)) /* Sum */);
			fTemp135SE = fVec288SE[0]; // step: 1942
			fVec287SE[0] = fTemp135SE;
			fTemp136SE = fVec292SE[2]; // step: 1960
			fVec293SE[0] = ((fConst343KI * ((fConst346KI * fVec288SE[0]) + (fConst347KI * fVec287SE[1]) + (fConst346KI * fTemp134SE) /* Sum */)) + -(fConst348KI * ((fConst349KI * fTemp136SE) + (fConst350KI * fVec293SE[1]) /* Sum */)) /* Sum */);
			fTemp137SE = fVec293SE[0]; // step: 1972
			fVec292SE[0] = fTemp137SE;
			fTemp138SE = (fConst348KI * ((fConst351KI * fVec293SE[0]) + (fConst352KI * fVec292SE[1]) + (fConst351KI * fTemp136SE) /* Sum */)); // step: 1982
			fTemp139SE = fVec297SE[2]; // step: 1994
			fVec298SE[0] = (fTemp138SE + -(fConst355KI * ((fConst356KI * fTemp139SE) + (fConst359KI * fVec298SE[1]) /* Sum */)) /* Sum */);
			fTemp140SE = fVec298SE[0]; // step: 2009
			fVec297SE[0] = fTemp140SE;
			fTemp141SE = fVec302SE[2]; // step: 2029
			fVec303SE[0] = ((fConst355KI * ((fConst361KI * fVec298SE[0]) + (fConst362KI * fVec297SE[1]) + (fConst361KI * fTemp139SE) /* Sum */)) + -(fConst363KI * ((fConst364KI * fTemp141SE) + (fConst365KI * fVec303SE[1]) /* Sum */)) /* Sum */);
			fTemp142SE = fVec303SE[0]; // step: 2041
			fVec302SE[0] = fTemp142SE;
			fTemp143SE = fVec307SE[2]; // step: 2061
			fVec308SE[0] = ((fConst363KI * ((fConst367KI * fVec303SE[0]) + (fConst368KI * fVec302SE[1]) + (fConst367KI * fTemp141SE) /* Sum */)) + -(fConst369KI * ((fConst370KI * fTemp143SE) + (fConst371KI * fVec308SE[1]) /* Sum */)) /* Sum */);
			fTemp144SE = fVec308SE[0]; // step: 2073
			fVec307SE[0] = fTemp144SE;
			fTemp145SE = fVec310SE[2]; // step: 2081
			fVec311SE[0] = (fTemp138SE + -(fConst372KI * ((fConst373KI * fTemp145SE) + (fConst374KI * fVec311SE[1]) /* Sum */)) /* Sum */);
			fTemp146SE = fVec311SE[0]; // step: 2093
			fVec310SE[0] = fTemp146SE;
			fTemp147SE = fVec315SE[2]; // step: 2113
			fVec316SE[0] = ((fConst372KI * ((fConst376KI * fVec311SE[0]) + (fConst377KI * fVec310SE[1]) + (fConst376KI * fTemp145SE) /* Sum */)) + -(fConst378KI * ((fConst379KI * fTemp147SE) + (fConst380KI * fVec316SE[1]) /* Sum */)) /* Sum */);
			fTemp148SE = fVec316SE[0]; // step: 2125
			fVec315SE[0] = fTemp148SE;
			fTemp149SE = fVec320SE[2]; // step: 2143
			fVec321SE[0] = ((fConst378KI * ((fConst381KI * fVec316SE[0]) + (fConst382KI * fVec315SE[1]) + (fConst381KI * fTemp147SE) /* Sum */)) + -(fConst383KI * ((fConst384KI * fTemp149SE) + (fConst385KI * fVec321SE[1]) /* Sum */)) /* Sum */);
			fTemp150SE = fVec321SE[0]; // step: 2155
			fVec320SE[0] = fTemp150SE;
			fTemp151SE = (fConst383KI * ((fConst386KI * fVec321SE[0]) + (fConst387KI * fVec320SE[1]) + (fConst386KI * fTemp149SE) /* Sum */)); // step: 2165
			fTemp152SE = fVec325SE[2]; // step: 2177
			fVec326SE[0] = (fTemp151SE + -(fConst390KI * ((fConst391KI * fTemp152SE) + (fConst394KI * fVec326SE[1]) /* Sum */)) /* Sum */);
			fTemp153SE = fVec326SE[0]; // step: 2192
			fVec325SE[0] = fTemp153SE;
			fTemp154SE = fVec330SE[2]; // step: 2212
			fVec331SE[0] = ((fConst390KI * ((fConst396KI * fVec326SE[0]) + (fConst397KI * fVec325SE[1]) + (fConst396KI * fTemp152SE) /* Sum */)) + -(fConst398KI * ((fConst399KI * fTemp154SE) + (fConst400KI * fVec331SE[1]) /* Sum */)) /* Sum */);
			fTemp155SE = fVec331SE[0]; // step: 2224
			fVec330SE[0] = fTemp155SE;
			fTemp156SE = fVec335SE[2]; // step: 2244
			fVec336SE[0] = ((fConst398KI * ((fConst402KI * fVec331SE[0]) + (fConst403KI * fVec330SE[1]) + (fConst402KI * fTemp154SE) /* Sum */)) + -(fConst404KI * ((fConst405KI * fTemp156SE) + (fConst406KI * fVec336SE[1]) /* Sum */)) /* Sum */);
			fTemp157SE = fVec336SE[0]; // step: 2256
			fVec335SE[0] = fTemp157SE;
			fTemp158SE = fVec338SE[2]; // step: 2264
			fVec339SE[0] = (fTemp151SE + -(fConst407KI * ((fConst408KI * fTemp158SE) + (fConst409KI * fVec339SE[1]) /* Sum */)) /* Sum */);
			fTemp159SE = fVec339SE[0]; // step: 2276
			fVec338SE[0] = fTemp159SE;
			fTemp160SE = fVec343SE[2]; // step: 2296
			fVec344SE[0] = ((fConst407KI * ((fConst411KI * fVec339SE[0]) + (fConst412KI * fVec338SE[1]) + (fConst411KI * fTemp158SE) /* Sum */)) + -(fConst413KI * ((fConst414KI * fTemp160SE) + (fConst415KI * fVec344SE[1]) /* Sum */)) /* Sum */);
			fTemp161SE = fVec344SE[0]; // step: 2308
			fVec343SE[0] = fTemp161SE;
			fTemp162SE = fVec348SE[2]; // step: 2326
			fVec349SE[0] = ((fConst413KI * ((fConst416KI * fVec344SE[0]) + (fConst417KI * fVec343SE[1]) + (fConst416KI * fTemp160SE) /* Sum */)) + -(fConst418KI * ((fConst419KI * fTemp162SE) + (fConst420KI * fVec349SE[1]) /* Sum */)) /* Sum */);
			fTemp163SE = fVec349SE[0]; // step: 2338
			fVec348SE[0] = fTemp163SE;
			fTemp164SE = (fConst418KI * ((fConst421KI * fVec349SE[0]) + (fConst422KI * fVec348SE[1]) + (fConst421KI * fTemp162SE) /* Sum */)); // step: 2348
			fTemp165SE = fVec353SE[2]; // step: 2360
			fVec354SE[0] = (fTemp164SE + -(fConst425KI * ((fConst426KI * fTemp165SE) + (fConst429KI * fVec354SE[1]) /* Sum */)) /* Sum */);
			fTemp166SE = fVec354SE[0]; // step: 2375
			fVec353SE[0] = fTemp166SE;
			fTemp167SE = fVec358SE[2]; // step: 2395
			fVec359SE[0] = ((fConst425KI * ((fConst431KI * fVec354SE[0]) + (fConst432KI * fVec353SE[1]) + (fConst431KI * fTemp165SE) /* Sum */)) + -(fConst433KI * ((fConst434KI * fTemp167SE) + (fConst435KI * fVec359SE[1]) /* Sum */)) /* Sum */);
			fTemp168SE = fVec359SE[0]; // step: 2407
			fVec358SE[0] = fTemp168SE;
			fTemp169SE = fVec363SE[2]; // step: 2427
			fVec364SE[0] = ((fConst433KI * ((fConst437KI * fVec359SE[0]) + (fConst438KI * fVec358SE[1]) + (fConst437KI * fTemp167SE) /* Sum */)) + -(fConst439KI * ((fConst440KI * fTemp169SE) + (fConst441KI * fVec364SE[1]) /* Sum */)) /* Sum */);
			fTemp170SE = fVec364SE[0]; // step: 2439
			fVec363SE[0] = fTemp170SE;
			fTemp171SE = fVec366SE[2]; // step: 2447
			fVec367SE[0] = (fTemp164SE + -(fConst442KI * ((fConst443KI * fTemp171SE) + (fConst444KI * fVec367SE[1]) /* Sum */)) /* Sum */);
			fTemp172SE = fVec367SE[0]; // step: 2459
			fVec366SE[0] = fTemp172SE;
			fTemp173SE = fVec371SE[2]; // step: 2479
			fVec372SE[0] = ((fConst442KI * ((fConst446KI * fVec367SE[0]) + (fConst447KI * fVec366SE[1]) + (fConst446KI * fTemp171SE) /* Sum */)) + -(fConst448KI * ((fConst449KI * fTemp173SE) + (fConst450KI * fVec372SE[1]) /* Sum */)) /* Sum */);
			fTemp174SE = fVec372SE[0]; // step: 2491
			fVec371SE[0] = fTemp174SE;
			fTemp175SE = fVec376SE[2]; // step: 2509
			fVec377SE[0] = ((fConst448KI * ((fConst451KI * fVec372SE[0]) + (fConst452KI * fVec371SE[1]) + (fConst451KI * fTemp173SE) /* Sum */)) + -(fConst453KI * ((fConst454KI * fTemp175SE) + (fConst455KI * fVec377SE[1]) /* Sum */)) /* Sum */);
			fTemp176SE = fVec377SE[0]; // step: 2521
			fVec376SE[0] = fTemp176SE;
			fTemp177SE = (fConst453KI * ((fConst456KI * fVec377SE[0]) + (fConst457KI * fVec376SE[1]) + (fConst456KI * fTemp175SE) /* Sum */)); // step: 2531
			fTemp178SE = fVec381SE[2]; // step: 2543
			fVec382SE[0] = (fTemp177SE + -(fConst460KI * ((fConst461KI * fTemp178SE) + (fConst464KI * fVec382SE[1]) /* Sum */)) /* Sum */);
			fTemp179SE = fVec382SE[0]; // step: 2558
			fVec381SE[0] = fTemp179SE;
			fTemp180SE = fVec386SE[2]; // step: 2578
			fVec387SE[0] = ((fConst460KI * ((fConst466KI * fVec382SE[0]) + (fConst467KI * fVec381SE[1]) + (fConst466KI * fTemp178SE) /* Sum */)) + -(fConst468KI * ((fConst469KI * fTemp180SE) + (fConst470KI * fVec387SE[1]) /* Sum */)) /* Sum */);
			fTemp181SE = fVec387SE[0]; // step: 2590
			fVec386SE[0] = fTemp181SE;
			fTemp182SE = fVec391SE[2]; // step: 2610
			fVec392SE[0] = ((fConst468KI * ((fConst472KI * fVec387SE[0]) + (fConst473KI * fVec386SE[1]) + (fConst472KI * fTemp180SE) /* Sum */)) + -(fConst474KI * ((fConst475KI * fTemp182SE) + (fConst476KI * fVec392SE[1]) /* Sum */)) /* Sum */);
			fTemp183SE = fVec392SE[0]; // step: 2622
			fVec391SE[0] = fTemp183SE;
			fTemp184SE = fVec394SE[2]; // step: 2630
			fVec395SE[0] = (fTemp177SE + -(fConst477KI * ((fConst478KI * fTemp184SE) + (fConst479KI * fVec395SE[1]) /* Sum */)) /* Sum */);
			fTemp185SE = fVec395SE[0]; // step: 2642
			fVec394SE[0] = fTemp185SE;
			fTemp186SE = fVec399SE[2]; // step: 2662
			fVec400SE[0] = ((fConst477KI * ((fConst481KI * fVec395SE[0]) + (fConst482KI * fVec394SE[1]) + (fConst481KI * fTemp184SE) /* Sum */)) + -(fConst483KI * ((fConst484KI * fTemp186SE) + (fConst485KI * fVec400SE[1]) /* Sum */)) /* Sum */);
			fTemp187SE = fVec400SE[0]; // step: 2674
			fVec399SE[0] = fTemp187SE;
			fTemp188SE = fVec404SE[2]; // step: 2692
			fVec405SE[0] = ((fConst483KI * ((fConst486KI * fVec400SE[0]) + (fConst487KI * fVec399SE[1]) + (fConst486KI * fTemp186SE) /* Sum */)) + -(fConst488KI * ((fConst489KI * fTemp188SE) + (fConst490KI * fVec405SE[1]) /* Sum */)) /* Sum */);
			fTemp189SE = fVec405SE[0]; // step: 2704
			fVec404SE[0] = fTemp189SE;
			fVec407SE[0] = ((fVec407SE[1] * fSlow8BE) + (fabsf((fConst19KI * ((fConst493KI * fVec28SE[0]) + (fConst494KI * fVec27SE[1]) + (fConst493KI * fTemp13SE) /* Sum */))) * fSlow9BE) /* Sum */);
			fSlow10SE = (fSlow6BE + (2e+01f * log10f(fVec407SE[0])) /* Sum */);
			fVec411SE[0] = ((fSlow8BE * fVec411SE[1]) + (fSlow9BE * fabsf((fConst54KI * ((fConst496KI * fVec56SE[0]) + (fConst497KI * fVec55SE[1]) + (fConst496KI * fTemp26SE) /* Sum */)))) /* Sum */);
			fSlow11SE = (fSlow6BE + (2e+01f * log10f(fVec411SE[0])) /* Sum */);
			fVec415SE[0] = ((fSlow8BE * fVec415SE[1]) + (fSlow9BE * fabsf((fConst89KI * ((fConst499KI * fVec84SE[0]) + (fConst500KI * fVec83SE[1]) + (fConst499KI * fTemp39SE) /* Sum */)))) /* Sum */);
			fSlow12SE = (fSlow6BE + (2e+01f * log10f(fVec415SE[0])) /* Sum */);
			fVec419SE[0] = ((fSlow8BE * fVec419SE[1]) + (fSlow9BE * fabsf((fConst124KI * ((fConst502KI * fVec112SE[0]) + (fConst503KI * fVec111SE[1]) + (fConst502KI * fTemp52SE) /* Sum */)))) /* Sum */);
			fSlow13SE = (fSlow6BE + (2e+01f * log10f(fVec419SE[0])) /* Sum */);
			fVec423SE[0] = ((fSlow8BE * fVec423SE[1]) + (fSlow9BE * fabsf((fConst159KI * ((fConst505KI * fVec140SE[0]) + (fConst506KI * fVec139SE[1]) + (fConst505KI * fTemp65SE) /* Sum */)))) /* Sum */);
			fSlow14SE = (fSlow6BE + (2e+01f * log10f(fVec423SE[0])) /* Sum */);
			fVec427SE[0] = ((fSlow8BE * fVec427SE[1]) + (fSlow9BE * fabsf((fConst194KI * ((fConst508KI * fVec168SE[0]) + (fConst509KI * fVec167SE[1]) + (fConst508KI * fTemp78SE) /* Sum */)))) /* Sum */);
			fSlow15SE = (fSlow6BE + (2e+01f * log10f(fVec427SE[0])) /* Sum */);
			fVec431SE[0] = ((fSlow8BE * fVec431SE[1]) + (fSlow9BE * fabsf((fConst229KI * ((fConst511KI * fVec196SE[0]) + (fConst512KI * fVec195SE[1]) + (fConst511KI * fTemp91SE) /* Sum */)))) /* Sum */);
			fSlow16SE = (fSlow6BE + (2e+01f * log10f(fVec431SE[0])) /* Sum */);
			fVec435SE[0] = ((fSlow8BE * fVec435SE[1]) + (fSlow9BE * fabsf((fConst264KI * ((fConst514KI * fVec224SE[0]) + (fConst515KI * fVec223SE[1]) + (fConst514KI * fTemp104SE) /* Sum */)))) /* Sum */);
			fSlow17SE = (fSlow6BE + (2e+01f * log10f(fVec435SE[0])) /* Sum */);
			fVec439SE[0] = ((fSlow8BE * fVec439SE[1]) + (fSlow9BE * fabsf((fConst299KI * ((fConst517KI * fVec252SE[0]) + (fConst518KI * fVec251SE[1]) + (fConst517KI * fTemp117SE) /* Sum */)))) /* Sum */);
			fSlow18SE = (fSlow6BE + (2e+01f * log10f(fVec439SE[0])) /* Sum */);
			fVec443SE[0] = ((fSlow8BE * fVec443SE[1]) + (fSlow9BE * fabsf((fConst334KI * ((fConst520KI * fVec280SE[0]) + (fConst521KI * fVec279SE[1]) + (fConst520KI * fTemp130SE) /* Sum */)))) /* Sum */);
			fSlow19SE = (fSlow6BE + (2e+01f * log10f(fVec443SE[0])) /* Sum */);
			fVec447SE[0] = ((fSlow8BE * fVec447SE[1]) + (fSlow9BE * fabsf((fConst369KI * ((fConst523KI * fVec308SE[0]) + (fConst524KI * fVec307SE[1]) + (fConst523KI * fTemp143SE) /* Sum */)))) /* Sum */);
			fSlow20SE = (fSlow6BE + (2e+01f * log10f(fVec447SE[0])) /* Sum */);
			fVec451SE[0] = ((fSlow8BE * fVec451SE[1]) + (fSlow9BE * fabsf((fConst404KI * ((fConst526KI * fVec336SE[0]) + (fConst527KI * fVec335SE[1]) + (fConst526KI * fTemp156SE) /* Sum */)))) /* Sum */);
			fSlow21SE = (fSlow6BE + (2e+01f * log10f(fVec451SE[0])) /* Sum */);
			fVec455SE[0] = ((fSlow8BE * fVec455SE[1]) + (fSlow9BE * fabsf((fConst439KI * ((fConst529KI * fVec364SE[0]) + (fConst530KI * fVec363SE[1]) + (fConst529KI * fTemp169SE) /* Sum */)))) /* Sum */);
			fSlow22SE = (fSlow6BE + (2e+01f * log10f(fVec455SE[0])) /* Sum */);
			fVec459SE[0] = ((fSlow8BE * fVec459SE[1]) + (fSlow9BE * fabsf((fConst474KI * ((fConst532KI * fVec392SE[0]) + (fConst533KI * fVec391SE[1]) + (fConst532KI * fTemp182SE) /* Sum */)))) /* Sum */);
			fSlow23SE = (fSlow6BE + (2e+01f * log10f(fVec459SE[0])) /* Sum */);
			fVec463SE[0] = ((fSlow8BE * fVec463SE[1]) + (fSlow9BE * fabsf((fConst488KI * ((fConst534KI * fVec405SE[0]) + (fConst535KI * fVec404SE[1]) + (fConst534KI * fTemp188SE) /* Sum */)))) /* Sum */);
			fSlow24SE = (fSlow6BE + (2e+01f * log10f(fVec463SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp8SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp8SE);  // Zone Exec Code
			// post processing
			fVec463SE[1] = fVec463SE[0];
			fVec459SE[1] = fVec459SE[0];
			fVec455SE[1] = fVec455SE[0];
			fVec451SE[1] = fVec451SE[0];
			fVec447SE[1] = fVec447SE[0];
			fVec443SE[1] = fVec443SE[0];
			fVec439SE[1] = fVec439SE[0];
			fVec435SE[1] = fVec435SE[0];
			fVec431SE[1] = fVec431SE[0];
			fVec427SE[1] = fVec427SE[0];
			fVec423SE[1] = fVec423SE[0];
			fVec419SE[1] = fVec419SE[0];
			fVec415SE[1] = fVec415SE[0];
			fVec411SE[1] = fVec411SE[0];
			fVec407SE[1] = fVec407SE[0];
			fVec404SE[2] = fVec404SE[1];
			fVec404SE[1] = fVec404SE[0];
			fVec405SE[1] = fVec405SE[0];
			fVec399SE[2] = fVec399SE[1];
			fVec399SE[1] = fVec399SE[0];
			fVec400SE[1] = fVec400SE[0];
			fVec394SE[2] = fVec394SE[1];
			fVec394SE[1] = fVec394SE[0];
			fVec395SE[1] = fVec395SE[0];
			fVec391SE[2] = fVec391SE[1];
			fVec391SE[1] = fVec391SE[0];
			fVec392SE[1] = fVec392SE[0];
			fVec386SE[2] = fVec386SE[1];
			fVec386SE[1] = fVec386SE[0];
			fVec387SE[1] = fVec387SE[0];
			fVec381SE[2] = fVec381SE[1];
			fVec381SE[1] = fVec381SE[0];
			fVec382SE[1] = fVec382SE[0];
			fVec376SE[2] = fVec376SE[1];
			fVec376SE[1] = fVec376SE[0];
			fVec377SE[1] = fVec377SE[0];
			fVec371SE[2] = fVec371SE[1];
			fVec371SE[1] = fVec371SE[0];
			fVec372SE[1] = fVec372SE[0];
			fVec366SE[2] = fVec366SE[1];
			fVec366SE[1] = fVec366SE[0];
			fVec367SE[1] = fVec367SE[0];
			fVec363SE[2] = fVec363SE[1];
			fVec363SE[1] = fVec363SE[0];
			fVec364SE[1] = fVec364SE[0];
			fVec358SE[2] = fVec358SE[1];
			fVec358SE[1] = fVec358SE[0];
			fVec359SE[1] = fVec359SE[0];
			fVec353SE[2] = fVec353SE[1];
			fVec353SE[1] = fVec353SE[0];
			fVec354SE[1] = fVec354SE[0];
			fVec348SE[2] = fVec348SE[1];
			fVec348SE[1] = fVec348SE[0];
			fVec349SE[1] = fVec349SE[0];
			fVec343SE[2] = fVec343SE[1];
			fVec343SE[1] = fVec343SE[0];
			fVec344SE[1] = fVec344SE[0];
			fVec338SE[2] = fVec338SE[1];
			fVec338SE[1] = fVec338SE[0];
			fVec339SE[1] = fVec339SE[0];
			fVec335SE[2] = fVec335SE[1];
			fVec335SE[1] = fVec335SE[0];
			fVec336SE[1] = fVec336SE[0];
			fVec330SE[2] = fVec330SE[1];
			fVec330SE[1] = fVec330SE[0];
			fVec331SE[1] = fVec331SE[0];
			fVec325SE[2] = fVec325SE[1];
			fVec325SE[1] = fVec325SE[0];
			fVec326SE[1] = fVec326SE[0];
			fVec320SE[2] = fVec320SE[1];
			fVec320SE[1] = fVec320SE[0];
			fVec321SE[1] = fVec321SE[0];
			fVec315SE[2] = fVec315SE[1];
			fVec315SE[1] = fVec315SE[0];
			fVec316SE[1] = fVec316SE[0];
			fVec310SE[2] = fVec310SE[1];
			fVec310SE[1] = fVec310SE[0];
			fVec311SE[1] = fVec311SE[0];
			fVec307SE[2] = fVec307SE[1];
			fVec307SE[1] = fVec307SE[0];
			fVec308SE[1] = fVec308SE[0];
			fVec302SE[2] = fVec302SE[1];
			fVec302SE[1] = fVec302SE[0];
			fVec303SE[1] = fVec303SE[0];
			fVec297SE[2] = fVec297SE[1];
			fVec297SE[1] = fVec297SE[0];
			fVec298SE[1] = fVec298SE[0];
			fVec292SE[2] = fVec292SE[1];
			fVec292SE[1] = fVec292SE[0];
			fVec293SE[1] = fVec293SE[0];
			fVec287SE[2] = fVec287SE[1];
			fVec287SE[1] = fVec287SE[0];
			fVec288SE[1] = fVec288SE[0];
			fVec282SE[2] = fVec282SE[1];
			fVec282SE[1] = fVec282SE[0];
			fVec283SE[1] = fVec283SE[0];
			fVec279SE[2] = fVec279SE[1];
			fVec279SE[1] = fVec279SE[0];
			fVec280SE[1] = fVec280SE[0];
			fVec274SE[2] = fVec274SE[1];
			fVec274SE[1] = fVec274SE[0];
			fVec275SE[1] = fVec275SE[0];
			fVec269SE[2] = fVec269SE[1];
			fVec269SE[1] = fVec269SE[0];
			fVec270SE[1] = fVec270SE[0];
			fVec264SE[2] = fVec264SE[1];
			fVec264SE[1] = fVec264SE[0];
			fVec265SE[1] = fVec265SE[0];
			fVec259SE[2] = fVec259SE[1];
			fVec259SE[1] = fVec259SE[0];
			fVec260SE[1] = fVec260SE[0];
			fVec254SE[2] = fVec254SE[1];
			fVec254SE[1] = fVec254SE[0];
			fVec255SE[1] = fVec255SE[0];
			fVec251SE[2] = fVec251SE[1];
			fVec251SE[1] = fVec251SE[0];
			fVec252SE[1] = fVec252SE[0];
			fVec246SE[2] = fVec246SE[1];
			fVec246SE[1] = fVec246SE[0];
			fVec247SE[1] = fVec247SE[0];
			fVec241SE[2] = fVec241SE[1];
			fVec241SE[1] = fVec241SE[0];
			fVec242SE[1] = fVec242SE[0];
			fVec236SE[2] = fVec236SE[1];
			fVec236SE[1] = fVec236SE[0];
			fVec237SE[1] = fVec237SE[0];
			fVec231SE[2] = fVec231SE[1];
			fVec231SE[1] = fVec231SE[0];
			fVec232SE[1] = fVec232SE[0];
			fVec226SE[2] = fVec226SE[1];
			fVec226SE[1] = fVec226SE[0];
			fVec227SE[1] = fVec227SE[0];
			fVec223SE[2] = fVec223SE[1];
			fVec223SE[1] = fVec223SE[0];
			fVec224SE[1] = fVec224SE[0];
			fVec218SE[2] = fVec218SE[1];
			fVec218SE[1] = fVec218SE[0];
			fVec219SE[1] = fVec219SE[0];
			fVec213SE[2] = fVec213SE[1];
			fVec213SE[1] = fVec213SE[0];
			fVec214SE[1] = fVec214SE[0];
			fVec208SE[2] = fVec208SE[1];
			fVec208SE[1] = fVec208SE[0];
			fVec209SE[1] = fVec209SE[0];
			fVec203SE[2] = fVec203SE[1];
			fVec203SE[1] = fVec203SE[0];
			fVec204SE[1] = fVec204SE[0];
			fVec198SE[2] = fVec198SE[1];
			fVec198SE[1] = fVec198SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec195SE[2] = fVec195SE[1];
			fVec195SE[1] = fVec195SE[0];
			fVec196SE[1] = fVec196SE[0];
			fVec190SE[2] = fVec190SE[1];
			fVec190SE[1] = fVec190SE[0];
			fVec191SE[1] = fVec191SE[0];
			fVec185SE[2] = fVec185SE[1];
			fVec185SE[1] = fVec185SE[0];
			fVec186SE[1] = fVec186SE[0];
			fVec180SE[2] = fVec180SE[1];
			fVec180SE[1] = fVec180SE[0];
			fVec181SE[1] = fVec181SE[0];
			fVec175SE[2] = fVec175SE[1];
			fVec175SE[1] = fVec175SE[0];
			fVec176SE[1] = fVec176SE[0];
			fVec170SE[2] = fVec170SE[1];
			fVec170SE[1] = fVec170SE[0];
			fVec171SE[1] = fVec171SE[0];
			fVec167SE[2] = fVec167SE[1];
			fVec167SE[1] = fVec167SE[0];
			fVec168SE[1] = fVec168SE[0];
			fVec162SE[2] = fVec162SE[1];
			fVec162SE[1] = fVec162SE[0];
			fVec163SE[1] = fVec163SE[0];
			fVec157SE[2] = fVec157SE[1];
			fVec157SE[1] = fVec157SE[0];
			fVec158SE[1] = fVec158SE[0];
			fVec152SE[2] = fVec152SE[1];
			fVec152SE[1] = fVec152SE[0];
			fVec153SE[1] = fVec153SE[0];
			fVec147SE[2] = fVec147SE[1];
			fVec147SE[1] = fVec147SE[0];
			fVec148SE[1] = fVec148SE[0];
			fVec142SE[2] = fVec142SE[1];
			fVec142SE[1] = fVec142SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec139SE[2] = fVec139SE[1];
			fVec139SE[1] = fVec139SE[0];
			fVec140SE[1] = fVec140SE[0];
			fVec134SE[2] = fVec134SE[1];
			fVec134SE[1] = fVec134SE[0];
			fVec135SE[1] = fVec135SE[0];
			fVec129SE[2] = fVec129SE[1];
			fVec129SE[1] = fVec129SE[0];
			fVec130SE[1] = fVec130SE[0];
			fVec124SE[2] = fVec124SE[1];
			fVec124SE[1] = fVec124SE[0];
			fVec125SE[1] = fVec125SE[0];
			fVec119SE[2] = fVec119SE[1];
			fVec119SE[1] = fVec119SE[0];
			fVec120SE[1] = fVec120SE[0];
			fVec114SE[2] = fVec114SE[1];
			fVec114SE[1] = fVec114SE[0];
			fVec115SE[1] = fVec115SE[0];
			fVec111SE[2] = fVec111SE[1];
			fVec111SE[1] = fVec111SE[0];
			fVec112SE[1] = fVec112SE[0];
			fVec106SE[2] = fVec106SE[1];
			fVec106SE[1] = fVec106SE[0];
			fVec107SE[1] = fVec107SE[0];
			fVec101SE[2] = fVec101SE[1];
			fVec101SE[1] = fVec101SE[0];
			fVec102SE[1] = fVec102SE[0];
			fVec96SE[2] = fVec96SE[1];
			fVec96SE[1] = fVec96SE[0];
			fVec97SE[1] = fVec97SE[0];
			fVec91SE[2] = fVec91SE[1];
			fVec91SE[1] = fVec91SE[0];
			fVec92SE[1] = fVec92SE[0];
			fVec86SE[2] = fVec86SE[1];
			fVec86SE[1] = fVec86SE[0];
			fVec87SE[1] = fVec87SE[0];
			fVec83SE[2] = fVec83SE[1];
			fVec83SE[1] = fVec83SE[0];
			fVec84SE[1] = fVec84SE[0];
			fVec78SE[2] = fVec78SE[1];
			fVec78SE[1] = fVec78SE[0];
			fVec79SE[1] = fVec79SE[0];
			fVec73SE[2] = fVec73SE[1];
			fVec73SE[1] = fVec73SE[0];
			fVec74SE[1] = fVec74SE[0];
			fVec68SE[2] = fVec68SE[1];
			fVec68SE[1] = fVec68SE[0];
			fVec69SE[1] = fVec69SE[0];
			fVec63SE[2] = fVec63SE[1];
			fVec63SE[1] = fVec63SE[0];
			fVec64SE[1] = fVec64SE[0];
			fVec58SE[2] = fVec58SE[1];
			fVec58SE[1] = fVec58SE[0];
			fVec59SE[1] = fVec59SE[0];
			fVec55SE[2] = fVec55SE[1];
			fVec55SE[1] = fVec55SE[0];
			fVec56SE[1] = fVec56SE[0];
			fVec50SE[2] = fVec50SE[1];
			fVec50SE[1] = fVec50SE[0];
			fVec51SE[1] = fVec51SE[0];
			fVec45SE[2] = fVec45SE[1];
			fVec45SE[1] = fVec45SE[0];
			fVec46SE[1] = fVec46SE[0];
			fVec40SE[2] = fVec40SE[1];
			fVec40SE[1] = fVec40SE[0];
			fVec41SE[1] = fVec41SE[0];
			fVec35SE[2] = fVec35SE[1];
			fVec35SE[1] = fVec35SE[0];
			fVec36SE[1] = fVec36SE[0];
			fVec30SE[2] = fVec30SE[1];
			fVec30SE[1] = fVec30SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec27SE[2] = fVec27SE[1];
			fVec27SE[1] = fVec27SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec22SE[2] = fVec22SE[1];
			fVec22SE[1] = fVec22SE[0];
			fVec23SE[1] = fVec23SE[0];
			fVec17SE[2] = fVec17SE[1];
			fVec17SE[1] = fVec17SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec13SE[1] = fVec13SE[0];
			fVec11SE[1] = fVec11SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState = iVec0KC[1];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec6SEState = fVec6SE[1];
		fVec8SEState = fVec8SE[1];
		fVec5SEState = fVec5SE[1];
		fVec11SEState = fVec11SE[1];
		fVec13SEState = fVec13SE[1];
		fVec14SEState = fVec14SE[1];
		fVec18SEState = fVec18SE[1];
		fVec17SEState[0] = fVec17SE[1];
		fVec17SEState[1] = fVec17SE[2];
		fVec23SEState = fVec23SE[1];
		fVec22SEState[0] = fVec22SE[1];
		fVec22SEState[1] = fVec22SE[2];
		fVec28SEState = fVec28SE[1];
		fVec27SEState[0] = fVec27SE[1];
		fVec27SEState[1] = fVec27SE[2];
		fVec31SEState = fVec31SE[1];
		fVec30SEState[0] = fVec30SE[1];
		fVec30SEState[1] = fVec30SE[2];
		fVec36SEState = fVec36SE[1];
		fVec35SEState[0] = fVec35SE[1];
		fVec35SEState[1] = fVec35SE[2];
		fVec41SEState = fVec41SE[1];
		fVec40SEState[0] = fVec40SE[1];
		fVec40SEState[1] = fVec40SE[2];
		fVec46SEState = fVec46SE[1];
		fVec45SEState[0] = fVec45SE[1];
		fVec45SEState[1] = fVec45SE[2];
		fVec51SEState = fVec51SE[1];
		fVec50SEState[0] = fVec50SE[1];
		fVec50SEState[1] = fVec50SE[2];
		fVec56SEState = fVec56SE[1];
		fVec55SEState[0] = fVec55SE[1];
		fVec55SEState[1] = fVec55SE[2];
		fVec59SEState = fVec59SE[1];
		fVec58SEState[0] = fVec58SE[1];
		fVec58SEState[1] = fVec58SE[2];
		fVec64SEState = fVec64SE[1];
		fVec63SEState[0] = fVec63SE[1];
		fVec63SEState[1] = fVec63SE[2];
		fVec69SEState = fVec69SE[1];
		fVec68SEState[0] = fVec68SE[1];
		fVec68SEState[1] = fVec68SE[2];
		fVec74SEState = fVec74SE[1];
		fVec73SEState[0] = fVec73SE[1];
		fVec73SEState[1] = fVec73SE[2];
		fVec79SEState = fVec79SE[1];
		fVec78SEState[0] = fVec78SE[1];
		fVec78SEState[1] = fVec78SE[2];
		fVec84SEState = fVec84SE[1];
		fVec83SEState[0] = fVec83SE[1];
		fVec83SEState[1] = fVec83SE[2];
		fVec87SEState = fVec87SE[1];
		fVec86SEState[0] = fVec86SE[1];
		fVec86SEState[1] = fVec86SE[2];
		fVec92SEState = fVec92SE[1];
		fVec91SEState[0] = fVec91SE[1];
		fVec91SEState[1] = fVec91SE[2];
		fVec97SEState = fVec97SE[1];
		fVec96SEState[0] = fVec96SE[1];
		fVec96SEState[1] = fVec96SE[2];
		fVec102SEState = fVec102SE[1];
		fVec101SEState[0] = fVec101SE[1];
		fVec101SEState[1] = fVec101SE[2];
		fVec107SEState = fVec107SE[1];
		fVec106SEState[0] = fVec106SE[1];
		fVec106SEState[1] = fVec106SE[2];
		fVec112SEState = fVec112SE[1];
		fVec111SEState[0] = fVec111SE[1];
		fVec111SEState[1] = fVec111SE[2];
		fVec115SEState = fVec115SE[1];
		fVec114SEState[0] = fVec114SE[1];
		fVec114SEState[1] = fVec114SE[2];
		fVec120SEState = fVec120SE[1];
		fVec119SEState[0] = fVec119SE[1];
		fVec119SEState[1] = fVec119SE[2];
		fVec125SEState = fVec125SE[1];
		fVec124SEState[0] = fVec124SE[1];
		fVec124SEState[1] = fVec124SE[2];
		fVec130SEState = fVec130SE[1];
		fVec129SEState[0] = fVec129SE[1];
		fVec129SEState[1] = fVec129SE[2];
		fVec135SEState = fVec135SE[1];
		fVec134SEState[0] = fVec134SE[1];
		fVec134SEState[1] = fVec134SE[2];
		fVec140SEState = fVec140SE[1];
		fVec139SEState[0] = fVec139SE[1];
		fVec139SEState[1] = fVec139SE[2];
		fVec143SEState = fVec143SE[1];
		fVec142SEState[0] = fVec142SE[1];
		fVec142SEState[1] = fVec142SE[2];
		fVec148SEState = fVec148SE[1];
		fVec147SEState[0] = fVec147SE[1];
		fVec147SEState[1] = fVec147SE[2];
		fVec153SEState = fVec153SE[1];
		fVec152SEState[0] = fVec152SE[1];
		fVec152SEState[1] = fVec152SE[2];
		fVec158SEState = fVec158SE[1];
		fVec157SEState[0] = fVec157SE[1];
		fVec157SEState[1] = fVec157SE[2];
		fVec163SEState = fVec163SE[1];
		fVec162SEState[0] = fVec162SE[1];
		fVec162SEState[1] = fVec162SE[2];
		fVec168SEState = fVec168SE[1];
		fVec167SEState[0] = fVec167SE[1];
		fVec167SEState[1] = fVec167SE[2];
		fVec171SEState = fVec171SE[1];
		fVec170SEState[0] = fVec170SE[1];
		fVec170SEState[1] = fVec170SE[2];
		fVec176SEState = fVec176SE[1];
		fVec175SEState[0] = fVec175SE[1];
		fVec175SEState[1] = fVec175SE[2];
		fVec181SEState = fVec181SE[1];
		fVec180SEState[0] = fVec180SE[1];
		fVec180SEState[1] = fVec180SE[2];
		fVec186SEState = fVec186SE[1];
		fVec185SEState[0] = fVec185SE[1];
		fVec185SEState[1] = fVec185SE[2];
		fVec191SEState = fVec191SE[1];
		fVec190SEState[0] = fVec190SE[1];
		fVec190SEState[1] = fVec190SE[2];
		fVec196SEState = fVec196SE[1];
		fVec195SEState[0] = fVec195SE[1];
		fVec195SEState[1] = fVec195SE[2];
		fVec199SEState = fVec199SE[1];
		fVec198SEState[0] = fVec198SE[1];
		fVec198SEState[1] = fVec198SE[2];
		fVec204SEState = fVec204SE[1];
		fVec203SEState[0] = fVec203SE[1];
		fVec203SEState[1] = fVec203SE[2];
		fVec209SEState = fVec209SE[1];
		fVec208SEState[0] = fVec208SE[1];
		fVec208SEState[1] = fVec208SE[2];
		fVec214SEState = fVec214SE[1];
		fVec213SEState[0] = fVec213SE[1];
		fVec213SEState[1] = fVec213SE[2];
		fVec219SEState = fVec219SE[1];
		fVec218SEState[0] = fVec218SE[1];
		fVec218SEState[1] = fVec218SE[2];
		fVec224SEState = fVec224SE[1];
		fVec223SEState[0] = fVec223SE[1];
		fVec223SEState[1] = fVec223SE[2];
		fVec227SEState = fVec227SE[1];
		fVec226SEState[0] = fVec226SE[1];
		fVec226SEState[1] = fVec226SE[2];
		fVec232SEState = fVec232SE[1];
		fVec231SEState[0] = fVec231SE[1];
		fVec231SEState[1] = fVec231SE[2];
		fVec237SEState = fVec237SE[1];
		fVec236SEState[0] = fVec236SE[1];
		fVec236SEState[1] = fVec236SE[2];
		fVec242SEState = fVec242SE[1];
		fVec241SEState[0] = fVec241SE[1];
		fVec241SEState[1] = fVec241SE[2];
		fVec247SEState = fVec247SE[1];
		fVec246SEState[0] = fVec246SE[1];
		fVec246SEState[1] = fVec246SE[2];
		fVec252SEState = fVec252SE[1];
		fVec251SEState[0] = fVec251SE[1];
		fVec251SEState[1] = fVec251SE[2];
		fVec255SEState = fVec255SE[1];
		fVec254SEState[0] = fVec254SE[1];
		fVec254SEState[1] = fVec254SE[2];
		fVec260SEState = fVec260SE[1];
		fVec259SEState[0] = fVec259SE[1];
		fVec259SEState[1] = fVec259SE[2];
		fVec265SEState = fVec265SE[1];
		fVec264SEState[0] = fVec264SE[1];
		fVec264SEState[1] = fVec264SE[2];
		fVec270SEState = fVec270SE[1];
		fVec269SEState[0] = fVec269SE[1];
		fVec269SEState[1] = fVec269SE[2];
		fVec275SEState = fVec275SE[1];
		fVec274SEState[0] = fVec274SE[1];
		fVec274SEState[1] = fVec274SE[2];
		fVec280SEState = fVec280SE[1];
		fVec279SEState[0] = fVec279SE[1];
		fVec279SEState[1] = fVec279SE[2];
		fVec283SEState = fVec283SE[1];
		fVec282SEState[0] = fVec282SE[1];
		fVec282SEState[1] = fVec282SE[2];
		fVec288SEState = fVec288SE[1];
		fVec287SEState[0] = fVec287SE[1];
		fVec287SEState[1] = fVec287SE[2];
		fVec293SEState = fVec293SE[1];
		fVec292SEState[0] = fVec292SE[1];
		fVec292SEState[1] = fVec292SE[2];
		fVec298SEState = fVec298SE[1];
		fVec297SEState[0] = fVec297SE[1];
		fVec297SEState[1] = fVec297SE[2];
		fVec303SEState = fVec303SE[1];
		fVec302SEState[0] = fVec302SE[1];
		fVec302SEState[1] = fVec302SE[2];
		fVec308SEState = fVec308SE[1];
		fVec307SEState[0] = fVec307SE[1];
		fVec307SEState[1] = fVec307SE[2];
		fVec311SEState = fVec311SE[1];
		fVec310SEState[0] = fVec310SE[1];
		fVec310SEState[1] = fVec310SE[2];
		fVec316SEState = fVec316SE[1];
		fVec315SEState[0] = fVec315SE[1];
		fVec315SEState[1] = fVec315SE[2];
		fVec321SEState = fVec321SE[1];
		fVec320SEState[0] = fVec320SE[1];
		fVec320SEState[1] = fVec320SE[2];
		fVec326SEState = fVec326SE[1];
		fVec325SEState[0] = fVec325SE[1];
		fVec325SEState[1] = fVec325SE[2];
		fVec331SEState = fVec331SE[1];
		fVec330SEState[0] = fVec330SE[1];
		fVec330SEState[1] = fVec330SE[2];
		fVec336SEState = fVec336SE[1];
		fVec335SEState[0] = fVec335SE[1];
		fVec335SEState[1] = fVec335SE[2];
		fVec339SEState = fVec339SE[1];
		fVec338SEState[0] = fVec338SE[1];
		fVec338SEState[1] = fVec338SE[2];
		fVec344SEState = fVec344SE[1];
		fVec343SEState[0] = fVec343SE[1];
		fVec343SEState[1] = fVec343SE[2];
		fVec349SEState = fVec349SE[1];
		fVec348SEState[0] = fVec348SE[1];
		fVec348SEState[1] = fVec348SE[2];
		fVec354SEState = fVec354SE[1];
		fVec353SEState[0] = fVec353SE[1];
		fVec353SEState[1] = fVec353SE[2];
		fVec359SEState = fVec359SE[1];
		fVec358SEState[0] = fVec358SE[1];
		fVec358SEState[1] = fVec358SE[2];
		fVec364SEState = fVec364SE[1];
		fVec363SEState[0] = fVec363SE[1];
		fVec363SEState[1] = fVec363SE[2];
		fVec367SEState = fVec367SE[1];
		fVec366SEState[0] = fVec366SE[1];
		fVec366SEState[1] = fVec366SE[2];
		fVec372SEState = fVec372SE[1];
		fVec371SEState[0] = fVec371SE[1];
		fVec371SEState[1] = fVec371SE[2];
		fVec377SEState = fVec377SE[1];
		fVec376SEState[0] = fVec376SE[1];
		fVec376SEState[1] = fVec376SE[2];
		fVec382SEState = fVec382SE[1];
		fVec381SEState[0] = fVec381SE[1];
		fVec381SEState[1] = fVec381SE[2];
		fVec387SEState = fVec387SE[1];
		fVec386SEState[0] = fVec386SE[1];
		fVec386SEState[1] = fVec386SE[2];
		fVec392SEState = fVec392SE[1];
		fVec391SEState[0] = fVec391SE[1];
		fVec391SEState[1] = fVec391SE[2];
		fVec395SEState = fVec395SE[1];
		fVec394SEState[0] = fVec394SE[1];
		fVec394SEState[1] = fVec394SE[2];
		fVec400SEState = fVec400SE[1];
		fVec399SEState[0] = fVec399SE[1];
		fVec399SEState[1] = fVec399SE[2];
		fVec405SEState = fVec405SE[1];
		fVec404SEState[0] = fVec404SE[1];
		fVec404SEState[1] = fVec404SE[2];
		fVec407SEState = fVec407SE[1];
		fVec411SEState = fVec411SE[1];
		fVec415SEState = fVec415SE[1];
		fVec419SEState = fVec419SE[1];
		fVec423SEState = fVec423SE[1];
		fVec427SEState = fVec427SE[1];
		fVec431SEState = fVec431SE[1];
		fVec435SEState = fVec435SE[1];
		fVec439SEState = fVec439SE[1];
		fVec443SEState = fVec443SE[1];
		fVec447SEState = fVec447SE[1];
		fVec451SEState = fVec451SE[1];
		fVec455SEState = fVec455SE[1];
		fVec459SEState = fVec459SE[1];
		fVec463SEState = fVec463SE[1];
		fbargraph0 = fSlow10SE;
		fbargraph1 = fSlow11SE;
		fbargraph2 = fSlow12SE;
		fbargraph3 = fSlow13SE;
		fbargraph4 = fSlow14SE;
		fbargraph5 = fSlow15SE;
		fbargraph6 = fSlow16SE;
		fbargraph7 = fSlow17SE;
		fbargraph8 = fSlow18SE;
		fbargraph9 = fSlow19SE;
		fbargraph10 = fSlow20SE;
		fbargraph11 = fSlow21SE;
		fbargraph12 = fSlow22SE;
		fbargraph13 = fSlow23SE;
		fbargraph14 = fSlow24SE;
	}
};


