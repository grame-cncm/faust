//----------------------------------------------------------
// name: "phasor"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	static float 	fWave0SC[4];
	int 	idxfWave0SC;
	static float 	fWave1SC[11];
	int 	idxfWave1SC;
	int 	iVec0SCState; // Single Delay
	int 	pfPerm0;
	float 	fConst0KI; // step: 22
	// Recursion delay fVec1SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SIState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "phasor.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "phasor");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 3; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		idxfWave0SC = 0;
		idxfWave1SC = 0;
		pfPerm0 = 1;
		fConst0KI = (7e+02f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 22
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		iVec0SCState = 0;
		fVec1SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("phasor");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SC; // step: 7
		float 	fTemp1SC; // step: 12
		int 	iVec0SC[2];
		float 	fTemp2SI; // step: 26
		float 	fVec1SI[2];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		iVec0SC[1] = iVec0SCState;
		fVec1SI[1] = fVec1SIState;
		for (int i=0; i<count; i++) {
			fTemp0SC = fWave0SC[idxfWave0SC]; // step: 7
			fTemp1SC = fWave1SC[idxfWave1SC]; // step: 12
			iVec0SC[0] = (fTemp1SC > 0.0f);
			int 	pfTemp0 = pfPerm0;
			pfPerm0 = iVec0SC[0];
			fTemp2SI = ((pfTemp0) ? fTemp0SC : (fConst0KI + fVec1SI[1] /* Sum */)); // step: 26
			fVec1SI[0] = (fTemp2SI + -floorf(fTemp2SI) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fVec1SI[0]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp1SC);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(fTemp0SC);  // Zone Exec Code
			// post processing
			fVec1SI[1] = fVec1SI[0];
			iVec0SC[1] = iVec0SC[0];
			idxfWave1SC = (idxfWave1SC + 1) % 11;
			idxfWave0SC = (idxfWave0SC + 1) % 4;
		}
		iVec0SCState = iVec0SC[1];
		fVec1SIState = fVec1SI[1];
	}
};


float 	mydsp::fWave0SC[4] = {0.1f,0.8f,0.9f,0.2f};
float 	mydsp::fWave1SC[11] = {0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,0.0f,0.0f,0.0f,0.0f,0};
