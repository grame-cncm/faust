//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "matrix"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	FAUSTFLOAT 	fslider21;
	FAUSTFLOAT 	fslider22;
	FAUSTFLOAT 	fslider23;
	FAUSTFLOAT 	fslider24;
	FAUSTFLOAT 	fslider25;
	FAUSTFLOAT 	fslider26;
	FAUSTFLOAT 	fslider27;
	FAUSTFLOAT 	fslider28;
	FAUSTFLOAT 	fslider29;
	FAUSTFLOAT 	fslider30;
	FAUSTFLOAT 	fslider31;
	FAUSTFLOAT 	fslider32;
	FAUSTFLOAT 	fslider33;
	FAUSTFLOAT 	fslider34;
	FAUSTFLOAT 	fslider35;
	FAUSTFLOAT 	fslider36;
	FAUSTFLOAT 	fslider37;
	FAUSTFLOAT 	fslider38;
	FAUSTFLOAT 	fslider39;
	FAUSTFLOAT 	fslider40;
	FAUSTFLOAT 	fslider41;
	FAUSTFLOAT 	fslider42;
	FAUSTFLOAT 	fslider43;
	FAUSTFLOAT 	fslider44;
	FAUSTFLOAT 	fslider45;
	FAUSTFLOAT 	fslider46;
	FAUSTFLOAT 	fslider47;
	FAUSTFLOAT 	fslider48;
	FAUSTFLOAT 	fslider49;
	FAUSTFLOAT 	fslider50;
	FAUSTFLOAT 	fslider51;
	FAUSTFLOAT 	fslider52;
	FAUSTFLOAT 	fslider53;
	FAUSTFLOAT 	fslider54;
	FAUSTFLOAT 	fslider55;
	FAUSTFLOAT 	fslider56;
	FAUSTFLOAT 	fslider57;
	FAUSTFLOAT 	fslider58;
	FAUSTFLOAT 	fslider59;
	FAUSTFLOAT 	fslider60;
	FAUSTFLOAT 	fslider61;
	FAUSTFLOAT 	fslider62;
	FAUSTFLOAT 	fslider63;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "matrix.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "matrix");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 8; }
	virtual int getNumOutputs() { return 8; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = -1e+01f;
		fslider1 = -1e+01f;
		fslider2 = -1e+01f;
		fslider3 = -1e+01f;
		fslider4 = -1e+01f;
		fslider5 = -1e+01f;
		fslider6 = -1e+01f;
		fslider7 = -1e+01f;
		fslider8 = -1e+01f;
		fslider9 = -1e+01f;
		fslider10 = -1e+01f;
		fslider11 = -1e+01f;
		fslider12 = -1e+01f;
		fslider13 = -1e+01f;
		fslider14 = -1e+01f;
		fslider15 = -1e+01f;
		fslider16 = -1e+01f;
		fslider17 = -1e+01f;
		fslider18 = -1e+01f;
		fslider19 = -1e+01f;
		fslider20 = -1e+01f;
		fslider21 = -1e+01f;
		fslider22 = -1e+01f;
		fslider23 = -1e+01f;
		fslider24 = -1e+01f;
		fslider25 = -1e+01f;
		fslider26 = -1e+01f;
		fslider27 = -1e+01f;
		fslider28 = -1e+01f;
		fslider29 = -1e+01f;
		fslider30 = -1e+01f;
		fslider31 = -1e+01f;
		fslider32 = -1e+01f;
		fslider33 = -1e+01f;
		fslider34 = -1e+01f;
		fslider35 = -1e+01f;
		fslider36 = -1e+01f;
		fslider37 = -1e+01f;
		fslider38 = -1e+01f;
		fslider39 = -1e+01f;
		fslider40 = -1e+01f;
		fslider41 = -1e+01f;
		fslider42 = -1e+01f;
		fslider43 = -1e+01f;
		fslider44 = -1e+01f;
		fslider45 = -1e+01f;
		fslider46 = -1e+01f;
		fslider47 = -1e+01f;
		fslider48 = -1e+01f;
		fslider49 = -1e+01f;
		fslider50 = -1e+01f;
		fslider51 = -1e+01f;
		fslider52 = -1e+01f;
		fslider53 = -1e+01f;
		fslider54 = -1e+01f;
		fslider55 = -1e+01f;
		fslider56 = -1e+01f;
		fslider57 = -1e+01f;
		fslider58 = -1e+01f;
		fslider59 = -1e+01f;
		fslider60 = -1e+01f;
		fslider61 = -1e+01f;
		fslider62 = -1e+01f;
		fslider63 = -1e+01f;
	}
	virtual void instanceClear() {
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openTabBox("Matrix 8 x 8");
		ui_interface->openHorizontalBox("Output 0");
		ui_interface->addVerticalSlider("Input 0", &fslider0, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider1, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider2, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider3, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider4, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider5, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider6, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider7, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 1");
		ui_interface->addVerticalSlider("Input 0", &fslider8, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider9, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider10, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider11, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider12, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider13, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider14, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider15, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 2");
		ui_interface->addVerticalSlider("Input 0", &fslider16, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider17, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider18, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider19, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider20, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider21, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider22, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider23, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 3");
		ui_interface->addVerticalSlider("Input 0", &fslider24, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider25, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider26, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider27, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider28, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider29, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider30, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider31, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 4");
		ui_interface->addVerticalSlider("Input 0", &fslider32, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider33, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider34, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider35, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider36, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider37, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider38, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider39, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 5");
		ui_interface->addVerticalSlider("Input 0", &fslider40, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider41, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider42, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider43, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider44, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider45, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider46, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider47, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 6");
		ui_interface->addVerticalSlider("Input 0", &fslider48, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider49, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider50, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider51, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider52, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider53, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider54, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider55, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("Output 7");
		ui_interface->addVerticalSlider("Input 0", &fslider56, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 1", &fslider57, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 2", &fslider58, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 3", &fslider59, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 4", &fslider60, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 5", &fslider61, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 6", &fslider62, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->addVerticalSlider("Input 7", &fslider63, -1e+01f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fSlow0BE = powf(1e+01f,(0.05f * float(fslider0))); // Zone 2, step: 11
		float 	fTemp1SE; // step: 14
		float 	fSlow1BE = powf(1e+01f,(0.05f * float(fslider1))); // Zone 2, step: 17
		float 	fTemp2SE; // step: 20
		float 	fSlow2BE = powf(1e+01f,(0.05f * float(fslider2))); // Zone 2, step: 23
		float 	fTemp3SE; // step: 26
		float 	fSlow3BE = powf(1e+01f,(0.05f * float(fslider3))); // Zone 2, step: 29
		float 	fTemp4SE; // step: 32
		float 	fSlow4BE = powf(1e+01f,(0.05f * float(fslider4))); // Zone 2, step: 35
		float 	fTemp5SE; // step: 38
		float 	fSlow5BE = powf(1e+01f,(0.05f * float(fslider5))); // Zone 2, step: 41
		float 	fTemp6SE; // step: 44
		float 	fSlow6BE = powf(1e+01f,(0.05f * float(fslider6))); // Zone 2, step: 47
		float 	fTemp7SE; // step: 50
		float 	fSlow7BE = powf(1e+01f,(0.05f * float(fslider7))); // Zone 2, step: 53
		float 	fSlow8BE = powf(1e+01f,(0.05f * float(fslider8))); // Zone 2, step: 58
		float 	fSlow9BE = powf(1e+01f,(0.05f * float(fslider9))); // Zone 2, step: 62
		float 	fSlow10BE = powf(1e+01f,(0.05f * float(fslider10))); // Zone 2, step: 66
		float 	fSlow11BE = powf(1e+01f,(0.05f * float(fslider11))); // Zone 2, step: 70
		float 	fSlow12BE = powf(1e+01f,(0.05f * float(fslider12))); // Zone 2, step: 74
		float 	fSlow13BE = powf(1e+01f,(0.05f * float(fslider13))); // Zone 2, step: 78
		float 	fSlow14BE = powf(1e+01f,(0.05f * float(fslider14))); // Zone 2, step: 82
		float 	fSlow15BE = powf(1e+01f,(0.05f * float(fslider15))); // Zone 2, step: 86
		float 	fSlow16BE = powf(1e+01f,(0.05f * float(fslider16))); // Zone 2, step: 91
		float 	fSlow17BE = powf(1e+01f,(0.05f * float(fslider17))); // Zone 2, step: 95
		float 	fSlow18BE = powf(1e+01f,(0.05f * float(fslider18))); // Zone 2, step: 99
		float 	fSlow19BE = powf(1e+01f,(0.05f * float(fslider19))); // Zone 2, step: 103
		float 	fSlow20BE = powf(1e+01f,(0.05f * float(fslider20))); // Zone 2, step: 107
		float 	fSlow21BE = powf(1e+01f,(0.05f * float(fslider21))); // Zone 2, step: 111
		float 	fSlow22BE = powf(1e+01f,(0.05f * float(fslider22))); // Zone 2, step: 115
		float 	fSlow23BE = powf(1e+01f,(0.05f * float(fslider23))); // Zone 2, step: 119
		float 	fSlow24BE = powf(1e+01f,(0.05f * float(fslider24))); // Zone 2, step: 124
		float 	fSlow25BE = powf(1e+01f,(0.05f * float(fslider25))); // Zone 2, step: 128
		float 	fSlow26BE = powf(1e+01f,(0.05f * float(fslider26))); // Zone 2, step: 132
		float 	fSlow27BE = powf(1e+01f,(0.05f * float(fslider27))); // Zone 2, step: 136
		float 	fSlow28BE = powf(1e+01f,(0.05f * float(fslider28))); // Zone 2, step: 140
		float 	fSlow29BE = powf(1e+01f,(0.05f * float(fslider29))); // Zone 2, step: 144
		float 	fSlow30BE = powf(1e+01f,(0.05f * float(fslider30))); // Zone 2, step: 148
		float 	fSlow31BE = powf(1e+01f,(0.05f * float(fslider31))); // Zone 2, step: 152
		float 	fSlow32BE = powf(1e+01f,(0.05f * float(fslider32))); // Zone 2, step: 157
		float 	fSlow33BE = powf(1e+01f,(0.05f * float(fslider33))); // Zone 2, step: 161
		float 	fSlow34BE = powf(1e+01f,(0.05f * float(fslider34))); // Zone 2, step: 165
		float 	fSlow35BE = powf(1e+01f,(0.05f * float(fslider35))); // Zone 2, step: 169
		float 	fSlow36BE = powf(1e+01f,(0.05f * float(fslider36))); // Zone 2, step: 173
		float 	fSlow37BE = powf(1e+01f,(0.05f * float(fslider37))); // Zone 2, step: 177
		float 	fSlow38BE = powf(1e+01f,(0.05f * float(fslider38))); // Zone 2, step: 181
		float 	fSlow39BE = powf(1e+01f,(0.05f * float(fslider39))); // Zone 2, step: 185
		float 	fSlow40BE = powf(1e+01f,(0.05f * float(fslider40))); // Zone 2, step: 190
		float 	fSlow41BE = powf(1e+01f,(0.05f * float(fslider41))); // Zone 2, step: 194
		float 	fSlow42BE = powf(1e+01f,(0.05f * float(fslider42))); // Zone 2, step: 198
		float 	fSlow43BE = powf(1e+01f,(0.05f * float(fslider43))); // Zone 2, step: 202
		float 	fSlow44BE = powf(1e+01f,(0.05f * float(fslider44))); // Zone 2, step: 206
		float 	fSlow45BE = powf(1e+01f,(0.05f * float(fslider45))); // Zone 2, step: 210
		float 	fSlow46BE = powf(1e+01f,(0.05f * float(fslider46))); // Zone 2, step: 214
		float 	fSlow47BE = powf(1e+01f,(0.05f * float(fslider47))); // Zone 2, step: 218
		float 	fSlow48BE = powf(1e+01f,(0.05f * float(fslider48))); // Zone 2, step: 223
		float 	fSlow49BE = powf(1e+01f,(0.05f * float(fslider49))); // Zone 2, step: 227
		float 	fSlow50BE = powf(1e+01f,(0.05f * float(fslider50))); // Zone 2, step: 231
		float 	fSlow51BE = powf(1e+01f,(0.05f * float(fslider51))); // Zone 2, step: 235
		float 	fSlow52BE = powf(1e+01f,(0.05f * float(fslider52))); // Zone 2, step: 239
		float 	fSlow53BE = powf(1e+01f,(0.05f * float(fslider53))); // Zone 2, step: 243
		float 	fSlow54BE = powf(1e+01f,(0.05f * float(fslider54))); // Zone 2, step: 247
		float 	fSlow55BE = powf(1e+01f,(0.05f * float(fslider55))); // Zone 2, step: 251
		float 	fSlow56BE = powf(1e+01f,(0.05f * float(fslider56))); // Zone 2, step: 256
		float 	fSlow57BE = powf(1e+01f,(0.05f * float(fslider57))); // Zone 2, step: 260
		float 	fSlow58BE = powf(1e+01f,(0.05f * float(fslider58))); // Zone 2, step: 264
		float 	fSlow59BE = powf(1e+01f,(0.05f * float(fslider59))); // Zone 2, step: 268
		float 	fSlow60BE = powf(1e+01f,(0.05f * float(fslider60))); // Zone 2, step: 272
		float 	fSlow61BE = powf(1e+01f,(0.05f * float(fslider61))); // Zone 2, step: 276
		float 	fSlow62BE = powf(1e+01f,(0.05f * float(fslider62))); // Zone 2, step: 280
		float 	fSlow63BE = powf(1e+01f,(0.05f * float(fslider63))); // Zone 2, step: 284
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* input3 = input[3]; // Zone 3
		FAUSTFLOAT* input4 = input[4]; // Zone 3
		FAUSTFLOAT* input5 = input[5]; // Zone 3
		FAUSTFLOAT* input6 = input[6]; // Zone 3
		FAUSTFLOAT* input7 = input[7]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fTemp1SE = (float)input1[i]; // step: 14
			fTemp2SE = (float)input2[i]; // step: 20
			fTemp3SE = (float)input3[i]; // step: 26
			fTemp4SE = (float)input4[i]; // step: 32
			fTemp5SE = (float)input5[i]; // step: 38
			fTemp6SE = (float)input6[i]; // step: 44
			fTemp7SE = (float)input7[i]; // step: 50
			output0[i] = (FAUSTFLOAT)(((fSlow0BE * fTemp0SE) + (fSlow1BE * fTemp1SE) + (fSlow2BE * fTemp2SE) + (fSlow3BE * fTemp3SE) + (fSlow4BE * fTemp4SE) + (fSlow5BE * fTemp5SE) + (fSlow6BE * fTemp6SE) + (fSlow7BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(((fSlow8BE * fTemp0SE) + (fSlow9BE * fTemp1SE) + (fSlow10BE * fTemp2SE) + (fSlow11BE * fTemp3SE) + (fSlow12BE * fTemp4SE) + (fSlow13BE * fTemp5SE) + (fSlow14BE * fTemp6SE) + (fSlow15BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(((fSlow16BE * fTemp0SE) + (fSlow17BE * fTemp1SE) + (fSlow18BE * fTemp2SE) + (fSlow19BE * fTemp3SE) + (fSlow20BE * fTemp4SE) + (fSlow21BE * fTemp5SE) + (fSlow22BE * fTemp6SE) + (fSlow23BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(((fSlow24BE * fTemp0SE) + (fSlow25BE * fTemp1SE) + (fSlow26BE * fTemp2SE) + (fSlow27BE * fTemp3SE) + (fSlow28BE * fTemp4SE) + (fSlow29BE * fTemp5SE) + (fSlow30BE * fTemp6SE) + (fSlow31BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(((fSlow32BE * fTemp0SE) + (fSlow33BE * fTemp1SE) + (fSlow34BE * fTemp2SE) + (fSlow35BE * fTemp3SE) + (fSlow36BE * fTemp4SE) + (fSlow37BE * fTemp5SE) + (fSlow38BE * fTemp6SE) + (fSlow39BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)(((fSlow40BE * fTemp0SE) + (fSlow41BE * fTemp1SE) + (fSlow42BE * fTemp2SE) + (fSlow43BE * fTemp3SE) + (fSlow44BE * fTemp4SE) + (fSlow45BE * fTemp5SE) + (fSlow46BE * fTemp6SE) + (fSlow47BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)(((fSlow48BE * fTemp0SE) + (fSlow49BE * fTemp1SE) + (fSlow50BE * fTemp2SE) + (fSlow51BE * fTemp3SE) + (fSlow52BE * fTemp4SE) + (fSlow53BE * fTemp5SE) + (fSlow54BE * fTemp6SE) + (fSlow55BE * fTemp7SE) /* Sum */));  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)(((fSlow56BE * fTemp0SE) + (fSlow57BE * fTemp1SE) + (fSlow58BE * fTemp2SE) + (fSlow59BE * fTemp3SE) + (fSlow60BE * fTemp4SE) + (fSlow61BE * fTemp5SE) + (fSlow62BE * fTemp6SE) + (fSlow63BE * fTemp7SE) /* Sum */));  // Zone Exec Code
		}
	}
};


