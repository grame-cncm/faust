declare version "2.50.2";
declare compile_options "-single -scal ../../build/bin/faust -I dsp -e dsp/smoothdelay.dsp -o reference/smoothdelay.box";
declare library_path0 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/music.lib";
declare library_path1 "/Users/letz/Developpements/faust/tests/impulse-tests/dsp/math.lib";
declare author "Yann Orlarey";
declare copyright "Grame";
declare filename "smoothdelay.dsp";
declare license "STK-4.3";
declare math_lib_author "GRAME";
declare math_lib_copyright "GRAME";
declare math_lib_deprecated "This library is deprecated and is not maintained anymore. It will be removed in August 2017.";
declare math_lib_license "LGPL with exception";
declare math_lib_name "Math Library";
declare math_lib_version "1.0";
declare music_lib_author "GRAME";
declare music_lib_copyright "GRAME";
declare music_lib_license "LGPL with exception";
declare music_lib_name "Music Library";
declare music_lib_version "1.0";
declare name "SmoothDelay";
declare version "1.0";
ID_0 = _, _;
ID_1 = _, ID_0;
ID_2 = (_, ID_1);
ID_3 = \(x1).(\(x2).(\(x3).(\(x4).(((x1,0.0f : !=),(((x2,0.0f : ==),(((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /),x3 : !=) : &),(((x2,1.0f : ==),(((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /),x4 : !=) : &),0,(-1.0f,((hslider("interpolation[unit:ms][style:knob]", 68.0329f, 1.0f, 1e+02f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : /) : select2),(1.0f,((hslider("interpolation[unit:ms][style:knob]", 68.0329f, 1.0f, 1e+02f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : /) : select2),(((x2,0.0f : >),(x2,1.0f : <) : &),0,x1 : select2) : select2),(x2,((x1,0.0f : !=),(((x2,0.0f : ==),(((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /),x3 : !=) : &),(((x2,1.0f : ==),(((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /),x4 : !=) : &),0,(-1.0f,((hslider("interpolation[unit:ms][style:knob]", 68.0329f, 1.0f, 1e+02f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : /) : select2),(1.0f,((hslider("interpolation[unit:ms][style:knob]", 68.0329f, 1.0f, 1e+02f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : /) : select2),(((x2,0.0f : >),(x2,1.0f : <) : &),0,x1 : select2) : select2) : + : 1.0f,_ : min : 0.0f,_ : max),(((x2,1.0f : >=),(x4,((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : !=) : &),x3,((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : select2),(((x2,0.0f : <=),(x3,((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : !=) : &),x4,((hslider("delay[unit:ms][style:knob]", 114.5f, 0.0f, 5e+03f, 0.1f),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : *),1e+03f : /) : select2))))) ~ ID_2;
ID_4 = !, ID_1;
ID_5 = (ID_3 : ID_4);
ID_6 = ID_5, _;
ID_7 = ID_6 : \(x5).(\(x6).(\(x7).(_<:\(x8).(x8,((x6 : int),524287 : &) : @),\(x9).(x9,((x7 : int),524287 : &) : @) : (_,(1.0f,x5 : -) : *),(_,x5 : *) : +)));
ID_8 = (+ : ID_7);
ID_9 = hslider("feedback[style:knob]", 87.11f, 0.0f, 1e+02f, 0.1f);
ID_10 = ID_9, 1e+02f;
ID_11 = (ID_10 : /);
ID_12 = _, ID_11;
ID_13 = (ID_12 : *);
ID_14 = ID_8 ~ ID_13;
ID_15 = ID_14, ID_14;
process = ID_15;
