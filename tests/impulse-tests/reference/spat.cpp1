//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "spat"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SEState; // Single Delay
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	// Recursion delay fVec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec10SEState; // Single Delay
	// Recursion delay fVec12SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SEState; // Single Delay
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "spat.dsp");
		m->declare("license", "BSD");
		m->declare("name", "spat");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 8; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 0.0f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec2SEState = 0;
		fVec4SEState = 0;
		fVec6SEState = 0;
		fVec8SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Spatializer 1x8");
		ui_interface->addHorizontalSlider("angle", &fslider1, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->addHorizontalSlider("distance", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fSlow0BE = float(fslider0); // Zone 2, step: 10
		float 	fSlow1BE = float(fslider1); // Zone 2, step: 12
		float 	fSlow2BE = (fSlow0BE + 1.0f /* Sum */); // Zone 2, step: 23
		float 	fSlow3BE = (5e-05f * (sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 1.5f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))) * fSlow2BE)); // Zone 2, step: 25
		float 	fVec0SE[2];
		float 	fSlow4BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 1.375f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 46
		float 	fVec2SE[2];
		float 	fSlow5BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 1.25f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 65
		float 	fVec4SE[2];
		float 	fSlow6BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 1.125f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 84
		float 	fVec6SE[2];
		float 	fSlow7BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 1.0f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 102
		float 	fVec8SE[2];
		float 	fSlow8BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 0.875f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 121
		float 	fVec10SE[2];
		float 	fSlow9BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 0.75f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 140
		float 	fVec12SE[2];
		float 	fSlow10BE = (5e-05f * (fSlow2BE * sqrtf(std::max(0.0f, (1.0f + (-8.0f * (fSlow0BE * fabsf((fmodf((fSlow1BE + 0.625f /* Sum */),1.0f) + -0.5f /* Sum */)))) /* Sum */))))); // Zone 2, step: 159
		float 	fVec14SE[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec2SE[1] = fVec2SEState;
		fVec4SE[1] = fVec4SEState;
		fVec6SE[1] = fVec6SEState;
		fVec8SE[1] = fVec8SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fVec0SE[0] = (fSlow3BE + (0.9999f * fVec0SE[1]) /* Sum */);
			fVec2SE[0] = (fSlow4BE + (0.9999f * fVec2SE[1]) /* Sum */);
			fVec4SE[0] = (fSlow5BE + (0.9999f * fVec4SE[1]) /* Sum */);
			fVec6SE[0] = (fSlow6BE + (0.9999f * fVec6SE[1]) /* Sum */);
			fVec8SE[0] = (fSlow7BE + (0.9999f * fVec8SE[1]) /* Sum */);
			fVec10SE[0] = (fSlow8BE + (0.9999f * fVec10SE[1]) /* Sum */);
			fVec12SE[0] = (fSlow9BE + (0.9999f * fVec12SE[1]) /* Sum */);
			fVec14SE[0] = (fSlow10BE + (0.9999f * fVec14SE[1]) /* Sum */);
			output0[i] = (FAUSTFLOAT)((fTemp0SE * fVec0SE[0]));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fTemp0SE * fVec2SE[0]));  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)((fTemp0SE * fVec4SE[0]));  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)((fTemp0SE * fVec6SE[0]));  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)((fTemp0SE * fVec8SE[0]));  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)((fTemp0SE * fVec10SE[0]));  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)((fTemp0SE * fVec12SE[0]));  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)((fTemp0SE * fVec14SE[0]));  // Zone Exec Code
			// post processing
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec4SE[1] = fVec4SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec2SEState = fVec2SE[1];
		fVec4SEState = fVec4SE[1];
		fVec6SEState = fVec6SE[1];
		fVec8SEState = fVec8SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
	}
};


