/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "spat"
version: "1.0"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif


class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	FAUSTFLOAT fHslider1;
	float fRec0[2];
	float fRec1[2];
	float fRec2[2];
	float fRec3[2];
	float fRec4[2];
	float fRec5[2];
	float fRec6[2];
	float fRec7[2];
	int fSampleRate;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "spat.dsp");
		m->declare("license", "BSD");
		m->declare("name", "spat");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 8;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.5f);
		fHslider1 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			fRec0[l0] = 0.0f;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec1[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec2[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec3[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec4[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fRec5[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fRec6[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec7[l7] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Spatializer 1x8");
		ui_interface->addHorizontalSlider("angle", &fHslider1, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->addHorizontalSlider("distance", &fHslider0, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		FAUSTFLOAT* output2 = outputs[2];
		FAUSTFLOAT* output3 = outputs[3];
		FAUSTFLOAT* output4 = outputs[4];
		FAUSTFLOAT* output5 = outputs[5];
		FAUSTFLOAT* output6 = outputs[6];
		FAUSTFLOAT* output7 = outputs[7];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fHslider1);
		float fSlow2 = fSlow0 + 1.0f;
		float fSlow3 = 5e-05f * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 1.5f, 1.0f) + -0.5f))) * fSlow2;
		float fSlow4 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 1.375f, 1.0f) + -0.5f)));
		float fSlow5 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 1.25f, 1.0f) + -0.5f)));
		float fSlow6 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 1.125f, 1.0f) + -0.5f)));
		float fSlow7 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 1.0f, 1.0f) + -0.5f)));
		float fSlow8 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 0.875f, 1.0f) + -0.5f)));
		float fSlow9 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 0.75f, 1.0f) + -0.5f)));
		float fSlow10 = 5e-05f * fSlow2 * std::sqrt(std::max<float>(0.0f, 1.0f - 8.0f * fSlow0 * std::fabs(std::fmod(fSlow1 + 0.625f, 1.0f) + -0.5f)));
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			float fTemp0 = float(input0[i0]);
			fRec0[0] = fSlow3 + 0.9999f * fRec0[1];
			output0[i0] = FAUSTFLOAT(fTemp0 * fRec0[0]);
			fRec1[0] = fSlow4 + 0.9999f * fRec1[1];
			output1[i0] = FAUSTFLOAT(fTemp0 * fRec1[0]);
			fRec2[0] = fSlow5 + 0.9999f * fRec2[1];
			output2[i0] = FAUSTFLOAT(fTemp0 * fRec2[0]);
			fRec3[0] = fSlow6 + 0.9999f * fRec3[1];
			output3[i0] = FAUSTFLOAT(fTemp0 * fRec3[0]);
			fRec4[0] = fSlow7 + 0.9999f * fRec4[1];
			output4[i0] = FAUSTFLOAT(fTemp0 * fRec4[0]);
			fRec5[0] = fSlow8 + 0.9999f * fRec5[1];
			output5[i0] = FAUSTFLOAT(fTemp0 * fRec5[0]);
			fRec6[0] = fSlow9 + 0.9999f * fRec6[1];
			output6[i0] = FAUSTFLOAT(fTemp0 * fRec6[0]);
			fRec7[0] = fSlow10 + 0.9999f * fRec7[1];
			output7[i0] = FAUSTFLOAT(fTemp0 * fRec7[0]);
			fRec0[1] = fRec0[0];
			fRec1[1] = fRec1[0];
			fRec2[1] = fRec2[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec7[1] = fRec7[0];
		}
	}

};

#endif
