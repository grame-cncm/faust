//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "mixer"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	float 	fConst0KI; // step: 59
	// Recursion delay fVec4SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	FAUSTFLOAT 	fentry1;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec6SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SEState; // Single Delay
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	FAUSTFLOAT 	fentry2;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec10SEState; // Single Delay
	// Recursion delay fVec12SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	FAUSTFLOAT 	fentry3;
	FAUSTFLOAT 	fcheckbox3;
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec14SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SEState; // Single Delay
	// Recursion delay fVec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec16SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	FAUSTFLOAT 	fentry4;
	FAUSTFLOAT 	fcheckbox4;
	FAUSTFLOAT 	fslider5;
	// Recursion delay fVec18SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec18SEState; // Single Delay
	// Recursion delay fVec20SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec20SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	FAUSTFLOAT 	fentry5;
	FAUSTFLOAT 	fcheckbox5;
	FAUSTFLOAT 	fslider6;
	// Recursion delay fVec22SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec22SEState; // Single Delay
	// Recursion delay fVec24SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec24SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	FAUSTFLOAT 	fentry6;
	FAUSTFLOAT 	fcheckbox6;
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVec26SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec26SEState; // Single Delay
	// Recursion delay fVec28SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	FAUSTFLOAT 	fentry7;
	FAUSTFLOAT 	fcheckbox7;
	FAUSTFLOAT 	fslider8;
	// Recursion delay fVec30SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec30SEState; // Single Delay
	// Recursion delay fVec32SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec32SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	// Recursion delay fVec34SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec34SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	// Recursion delay fVec36SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec36SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "mixer.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "mixer");
		m->declare("panpot.dsp/author", "Grame");
		m->declare("panpot.dsp/copyright", "(c)GRAME 2006");
		m->declare("panpot.dsp/license", "BSD");
		m->declare("panpot.dsp/name", "panpot");
		m->declare("panpot.dsp/version", "1.0");
		m->declare("version", "1.0");
		m->declare("volume.dsp/author", "Grame");
		m->declare("volume.dsp/copyright", "(c)GRAME 2006");
		m->declare("volume.dsp/license", "BSD");
		m->declare("volume.dsp/name", "volume");
		m->declare("volume.dsp/version", "1.0");
		m->declare("vumeter.dsp/author", "Grame");
		m->declare("vumeter.dsp/copyright", "(c)GRAME 2006");
		m->declare("vumeter.dsp/license", "BSD");
		m->declare("vumeter.dsp/name", "vumeter");
		m->declare("vumeter.dsp/version", "1.0");
	}

	virtual int getNumInputs() { return 8; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (1.0f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 59
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fentry0 = 0.0f;
		fcheckbox0 = 0.0;
		fslider1 = 0.0f;
		fentry1 = 0.0f;
		fcheckbox1 = 0.0;
		fslider2 = 0.0f;
		fentry2 = 0.0f;
		fcheckbox2 = 0.0;
		fslider3 = 0.0f;
		fentry3 = 0.0f;
		fcheckbox3 = 0.0;
		fslider4 = 0.0f;
		fentry4 = 0.0f;
		fcheckbox4 = 0.0;
		fslider5 = 0.0f;
		fentry5 = 0.0f;
		fcheckbox5 = 0.0;
		fslider6 = 0.0f;
		fentry6 = 0.0f;
		fcheckbox6 = 0.0;
		fslider7 = 0.0f;
		fentry7 = 0.0f;
		fcheckbox7 = 0.0;
		fslider8 = 0.0f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec2SEState = 0;
		fVec4SEState = 0;
		fVec6SEState = 0;
		fVec8SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec16SEState = 0;
		fVec18SEState = 0;
		fVec20SEState = 0;
		fVec22SEState = 0;
		fVec24SEState = 0;
		fVec26SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec32SEState = 0;
		fVec34SEState = 0;
		fVec36SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openHorizontalBox("mixer");
		ui_interface->openVerticalBox("Ch 0");
		ui_interface->declare(&fentry0, "1", "");
		ui_interface->declare(&fentry0, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry0, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider1, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider1, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph0, "2", "");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph0, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 1");
		ui_interface->declare(&fentry1, "1", "");
		ui_interface->declare(&fentry1, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry1, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider2, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider2, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph1, "2", "");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph1, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox1);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 2");
		ui_interface->declare(&fentry2, "1", "");
		ui_interface->declare(&fentry2, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry2, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider3, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph2, "2", "");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph2, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox2);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 3");
		ui_interface->declare(&fentry3, "1", "");
		ui_interface->declare(&fentry3, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry3, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider4, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph3, "2", "");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph3, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox3);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 4");
		ui_interface->declare(&fentry4, "1", "");
		ui_interface->declare(&fentry4, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry4, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider5, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph4, "2", "");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph4, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox4);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 5");
		ui_interface->declare(&fentry5, "1", "");
		ui_interface->declare(&fentry5, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry5, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider6, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider6, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph5, "2", "");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph5, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox5);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 6");
		ui_interface->declare(&fentry6, "1", "");
		ui_interface->declare(&fentry6, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry6, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider7, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider7, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph6, "2", "");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph6, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox6);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Ch 7");
		ui_interface->declare(&fentry7, "1", "");
		ui_interface->declare(&fentry7, "style", "knob");
		ui_interface->addNumEntry("pan", &fentry7, 0.0f, -9e+01f, 9e+01f, 1.0f);
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider8, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider8, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->declare(&fbargraph7, "2", "");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph7, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->addCheckButton("mute", &fcheckbox7);
		ui_interface->closeBox();
		ui_interface->openHorizontalBox("stereo out");
		ui_interface->openVerticalBox("L");
		ui_interface->declare(&fbargraph8, "2", "");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph8, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("R");
		ui_interface->declare(&fbargraph9, "2", "");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph9, -7e+01f, 5.0f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->addVerticalSlider("0x00", &fslider0, 0.0f, -7e+01f, 4.0f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (0.001f * powf(1e+01f,(0.05f * float(fslider0)))); // Zone 2, step: 12
		float 	fVec0SE[2];
		float 	fTemp0SE; // step: 20
		float 	fSlow1BE = (0.0055555557f * (float(fentry0) + -9e+01f /* Sum */)); // Zone 2, step: 28
		float 	fSlow2BE = sqrtf(-fSlow1BE); // Zone 2, step: 30
		float 	fSlow3BE = (1.0f + -float(fcheckbox0) /* Sum */); // Zone 2, step: 34
		float 	fSlow4BE = (0.001f * powf(1e+01f,(0.05f * float(fslider1)))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 48
		float 	fVec4SE[2];
		float 	fSlow5SE;
		float 	fSlow6BE = (0.0055555557f * (float(fentry1) + -9e+01f /* Sum */)); // Zone 2, step: 75
		float 	fSlow7BE = sqrtf(-fSlow6BE); // Zone 2, step: 77
		float 	fSlow8BE = (1.0f + -float(fcheckbox1) /* Sum */); // Zone 2, step: 80
		float 	fSlow9BE = (0.001f * powf(1e+01f,(0.05f * float(fslider2)))); // Zone 2, step: 86
		float 	fVec6SE[2];
		float 	fTemp2SE; // step: 94
		float 	fVec8SE[2];
		float 	fSlow10SE;
		float 	fSlow11BE = (0.0055555557f * (float(fentry2) + -9e+01f /* Sum */)); // Zone 2, step: 111
		float 	fSlow12BE = sqrtf(-fSlow11BE); // Zone 2, step: 113
		float 	fSlow13BE = (1.0f + -float(fcheckbox2) /* Sum */); // Zone 2, step: 116
		float 	fSlow14BE = (0.001f * powf(1e+01f,(0.05f * float(fslider3)))); // Zone 2, step: 122
		float 	fVec10SE[2];
		float 	fTemp3SE; // step: 130
		float 	fVec12SE[2];
		float 	fSlow15SE;
		float 	fSlow16BE = (0.0055555557f * (float(fentry3) + -9e+01f /* Sum */)); // Zone 2, step: 147
		float 	fSlow17BE = sqrtf(-fSlow16BE); // Zone 2, step: 149
		float 	fSlow18BE = (1.0f + -float(fcheckbox3) /* Sum */); // Zone 2, step: 152
		float 	fSlow19BE = (0.001f * powf(1e+01f,(0.05f * float(fslider4)))); // Zone 2, step: 158
		float 	fVec14SE[2];
		float 	fTemp4SE; // step: 166
		float 	fVec16SE[2];
		float 	fSlow20SE;
		float 	fSlow21BE = (0.0055555557f * (float(fentry4) + -9e+01f /* Sum */)); // Zone 2, step: 183
		float 	fSlow22BE = sqrtf(-fSlow21BE); // Zone 2, step: 185
		float 	fSlow23BE = (1.0f + -float(fcheckbox4) /* Sum */); // Zone 2, step: 188
		float 	fSlow24BE = (0.001f * powf(1e+01f,(0.05f * float(fslider5)))); // Zone 2, step: 194
		float 	fVec18SE[2];
		float 	fTemp5SE; // step: 202
		float 	fVec20SE[2];
		float 	fSlow25SE;
		float 	fSlow26BE = (0.0055555557f * (float(fentry5) + -9e+01f /* Sum */)); // Zone 2, step: 219
		float 	fSlow27BE = sqrtf(-fSlow26BE); // Zone 2, step: 221
		float 	fSlow28BE = (1.0f + -float(fcheckbox5) /* Sum */); // Zone 2, step: 224
		float 	fSlow29BE = (0.001f * powf(1e+01f,(0.05f * float(fslider6)))); // Zone 2, step: 230
		float 	fVec22SE[2];
		float 	fTemp6SE; // step: 238
		float 	fVec24SE[2];
		float 	fSlow30SE;
		float 	fSlow31BE = (0.0055555557f * (float(fentry6) + -9e+01f /* Sum */)); // Zone 2, step: 255
		float 	fSlow32BE = sqrtf(-fSlow31BE); // Zone 2, step: 257
		float 	fSlow33BE = (1.0f + -float(fcheckbox6) /* Sum */); // Zone 2, step: 260
		float 	fSlow34BE = (0.001f * powf(1e+01f,(0.05f * float(fslider7)))); // Zone 2, step: 266
		float 	fVec26SE[2];
		float 	fTemp7SE; // step: 274
		float 	fVec28SE[2];
		float 	fSlow35SE;
		float 	fSlow36BE = (0.0055555557f * (float(fentry7) + -9e+01f /* Sum */)); // Zone 2, step: 291
		float 	fSlow37BE = sqrtf(-fSlow36BE); // Zone 2, step: 293
		float 	fSlow38BE = (1.0f + -float(fcheckbox7) /* Sum */); // Zone 2, step: 296
		float 	fSlow39BE = (0.001f * powf(1e+01f,(0.05f * float(fslider8)))); // Zone 2, step: 302
		float 	fVec30SE[2];
		float 	fTemp8SE; // step: 310
		float 	fVec32SE[2];
		float 	fSlow40SE;
		float 	fTemp9SE; // step: 326
		float 	fVec34SE[2];
		float 	fSlow41SE;
		float 	fSlow42BE = sqrtf((fSlow1BE + 1.0f /* Sum */)); // Zone 2, step: 341
		float 	fSlow43BE = sqrtf((fSlow6BE + 1.0f /* Sum */)); // Zone 2, step: 344
		float 	fSlow44BE = sqrtf((fSlow11BE + 1.0f /* Sum */)); // Zone 2, step: 347
		float 	fSlow45BE = sqrtf((fSlow16BE + 1.0f /* Sum */)); // Zone 2, step: 350
		float 	fSlow46BE = sqrtf((fSlow21BE + 1.0f /* Sum */)); // Zone 2, step: 353
		float 	fSlow47BE = sqrtf((fSlow26BE + 1.0f /* Sum */)); // Zone 2, step: 356
		float 	fSlow48BE = sqrtf((fSlow31BE + 1.0f /* Sum */)); // Zone 2, step: 359
		float 	fSlow49BE = sqrtf((fSlow36BE + 1.0f /* Sum */)); // Zone 2, step: 362
		float 	fTemp10SE; // step: 365
		float 	fVec36SE[2];
		float 	fSlow50SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* input3 = input[3]; // Zone 3
		FAUSTFLOAT* input4 = input[4]; // Zone 3
		FAUSTFLOAT* input5 = input[5]; // Zone 3
		FAUSTFLOAT* input6 = input[6]; // Zone 3
		FAUSTFLOAT* input7 = input[7]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec2SE[1] = fVec2SEState;
		fVec4SE[1] = fVec4SEState;
		fVec6SE[1] = fVec6SEState;
		fVec8SE[1] = fVec8SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec16SE[1] = fVec16SEState;
		fVec18SE[1] = fVec18SEState;
		fVec20SE[1] = fVec20SEState;
		fVec22SE[1] = fVec22SEState;
		fVec24SE[1] = fVec24SEState;
		fVec26SE[1] = fVec26SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec32SE[1] = fVec32SEState;
		fVec34SE[1] = fVec34SEState;
		fVec36SE[1] = fVec36SEState;
		for (int i=0; i<count; i++) {
			fVec0SE[0] = (fSlow0BE + (0.999f * fVec0SE[1]) /* Sum */);
			fTemp0SE = fVec0SE[0]; // step: 20
			fVec2SE[0] = (fSlow4BE + (0.999f * fVec2SE[1]) /* Sum */);
			fTemp1SE = (fSlow3BE * ((float)input0[i] * fVec2SE[0])); // step: 48
			fVec4SE[0] = std::max((fVec4SE[1] + -fConst0KI /* Sum */), fabsf(fTemp1SE));
			fSlow5SE = (2e+01f * log10f(std::max(0.00031622776f, fVec4SE[0])));
			fVec6SE[0] = (fSlow9BE + (0.999f * fVec6SE[1]) /* Sum */);
			fTemp2SE = (fSlow8BE * ((float)input1[i] * fVec6SE[0])); // step: 94
			fVec8SE[0] = std::max((fVec8SE[1] + -fConst0KI /* Sum */), fabsf(fTemp2SE));
			fSlow10SE = (2e+01f * log10f(std::max(0.00031622776f, fVec8SE[0])));
			fVec10SE[0] = (fSlow14BE + (0.999f * fVec10SE[1]) /* Sum */);
			fTemp3SE = (fSlow13BE * ((float)input2[i] * fVec10SE[0])); // step: 130
			fVec12SE[0] = std::max((fVec12SE[1] + -fConst0KI /* Sum */), fabsf(fTemp3SE));
			fSlow15SE = (2e+01f * log10f(std::max(0.00031622776f, fVec12SE[0])));
			fVec14SE[0] = (fSlow19BE + (0.999f * fVec14SE[1]) /* Sum */);
			fTemp4SE = (fSlow18BE * ((float)input3[i] * fVec14SE[0])); // step: 166
			fVec16SE[0] = std::max((fVec16SE[1] + -fConst0KI /* Sum */), fabsf(fTemp4SE));
			fSlow20SE = (2e+01f * log10f(std::max(0.00031622776f, fVec16SE[0])));
			fVec18SE[0] = (fSlow24BE + (0.999f * fVec18SE[1]) /* Sum */);
			fTemp5SE = (fSlow23BE * ((float)input4[i] * fVec18SE[0])); // step: 202
			fVec20SE[0] = std::max((fVec20SE[1] + -fConst0KI /* Sum */), fabsf(fTemp5SE));
			fSlow25SE = (2e+01f * log10f(std::max(0.00031622776f, fVec20SE[0])));
			fVec22SE[0] = (fSlow29BE + (0.999f * fVec22SE[1]) /* Sum */);
			fTemp6SE = (fSlow28BE * ((float)input5[i] * fVec22SE[0])); // step: 238
			fVec24SE[0] = std::max((fVec24SE[1] + -fConst0KI /* Sum */), fabsf(fTemp6SE));
			fSlow30SE = (2e+01f * log10f(std::max(0.00031622776f, fVec24SE[0])));
			fVec26SE[0] = (fSlow34BE + (0.999f * fVec26SE[1]) /* Sum */);
			fTemp7SE = (fSlow33BE * ((float)input6[i] * fVec26SE[0])); // step: 274
			fVec28SE[0] = std::max((fVec28SE[1] + -fConst0KI /* Sum */), fabsf(fTemp7SE));
			fSlow35SE = (2e+01f * log10f(std::max(0.00031622776f, fVec28SE[0])));
			fVec30SE[0] = (fSlow39BE + (0.999f * fVec30SE[1]) /* Sum */);
			fTemp8SE = (fSlow38BE * ((float)input7[i] * fVec30SE[0])); // step: 310
			fVec32SE[0] = std::max((fVec32SE[1] + -fConst0KI /* Sum */), fabsf(fTemp8SE));
			fSlow40SE = (2e+01f * log10f(std::max(0.00031622776f, fVec32SE[0])));
			fTemp9SE = (fTemp0SE * ((fSlow2BE * fTemp1SE) + (fSlow7BE * fTemp2SE) + (fSlow12BE * fTemp3SE) + (fSlow17BE * fTemp4SE) + (fSlow22BE * fTemp5SE) + (fSlow27BE * fTemp6SE) + (fSlow32BE * fTemp7SE) + (fSlow37BE * fTemp8SE) /* Sum */)); // step: 326
			fVec34SE[0] = std::max((fVec34SE[1] + -fConst0KI /* Sum */), fabsf(fTemp9SE));
			fSlow41SE = (2e+01f * log10f(std::max(0.00031622776f, fVec34SE[0])));
			fTemp10SE = (fTemp0SE * ((fSlow42BE * fTemp1SE) + (fSlow43BE * fTemp2SE) + (fSlow44BE * fTemp3SE) + (fSlow45BE * fTemp4SE) + (fSlow46BE * fTemp5SE) + (fSlow47BE * fTemp6SE) + (fSlow48BE * fTemp7SE) + (fSlow49BE * fTemp8SE) /* Sum */)); // step: 365
			fVec36SE[0] = std::max((fVec36SE[1] + -fConst0KI /* Sum */), fabsf(fTemp10SE));
			fSlow50SE = (2e+01f * log10f(std::max(0.00031622776f, fVec36SE[0])));
			output0[i] = (FAUSTFLOAT)(fTemp9SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp10SE);  // Zone Exec Code
			// post processing
			fVec36SE[1] = fVec36SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec32SE[1] = fVec32SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec22SE[1] = fVec22SE[0];
			fVec20SE[1] = fVec20SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec16SE[1] = fVec16SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec4SE[1] = fVec4SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec2SEState = fVec2SE[1];
		fVec4SEState = fVec4SE[1];
		fVec6SEState = fVec6SE[1];
		fVec8SEState = fVec8SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec16SEState = fVec16SE[1];
		fVec18SEState = fVec18SE[1];
		fVec20SEState = fVec20SE[1];
		fVec22SEState = fVec22SE[1];
		fVec24SEState = fVec24SE[1];
		fVec26SEState = fVec26SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec32SEState = fVec32SE[1];
		fVec34SEState = fVec34SE[1];
		fVec36SEState = fVec36SE[1];
		fbargraph0 = fSlow5SE;
		fbargraph1 = fSlow10SE;
		fbargraph2 = fSlow15SE;
		fbargraph3 = fSlow20SE;
		fbargraph4 = fSlow25SE;
		fbargraph5 = fSlow30SE;
		fbargraph6 = fSlow35SE;
		fbargraph7 = fSlow40SE;
		fbargraph8 = fSlow41SE;
		fbargraph9 = fSlow50SE;
	}
};


