/* ------------------------------------------------------------
name: "vcf_wah_pedals"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}
static float mydsp_faustpower3_f(float value) {
	return value * value * value;
}
static float mydsp_faustpower4_f(float value) {
	return value * value * value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	int iVec0[4];
	FAUSTFLOAT fHslider1;
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	float fConst5;
	float fConst6;
	float fConst7;
	float fConst8;
	float fConst9;
	float fConst10;
	float fConst11;
	float fConst12;
	float fConst13;
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT fHslider2;
	float fRec4[2];
	FAUSTFLOAT fCheckbox1;
	float fConst14;
	FAUSTFLOAT fHslider3;
	float fRec10[2];
	FAUSTFLOAT fCheckbox2;
	FAUSTFLOAT fHslider4;
	float fRec16[2];
	FAUSTFLOAT fCheckbox3;
	FAUSTFLOAT fHslider5;
	float fRec18[2];
	FAUSTFLOAT fVslider0;
	float fRec19[2];
	FAUSTFLOAT fCheckbox4;
	FAUSTFLOAT fCheckbox5;
	FAUSTFLOAT fEntry0;
	float fConst15;
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fVslider2;
	float fRec21[2];
	float fRec20[2];
	float fConst16;
	float fVec1[2];
	float fConst17;
	float fVec2[2];
	float fVec3[2];
	float fConst18;
	float fVec4[2];
	float fVec5[2];
	float fVec6[2];
	FAUSTFLOAT fVslider3;
	float fRec22[2];
	float fVec7[2];
	float fVec8[2];
	float fVec9[2];
	float fVec10[2];
	float fVec11[2];
	float fVec12[2];
	FAUSTFLOAT fVslider4;
	float fRec23[2];
	float fVec13[2];
	float fVec14[2];
	float fVec15[2];
	float fVec16[2];
	float fVec17[2];
	float fVec18[2];
	FAUSTFLOAT fCheckbox6;
	int iRec24[2];
	float fRec25[4];
	float fConst19;
	float fConst20;
	float fRec26[2];
	float fRec27[2];
	float fRec17[3];
	float fRec15[2];
	float fRec14[2];
	float fRec13[2];
	float fRec12[2];
	float fRec11[2];
	FAUSTFLOAT fHslider6;
	float fRec9[2];
	float fRec8[2];
	float fRec7[2];
	float fRec6[2];
	float fRec5[2];
	FAUSTFLOAT fCheckbox7;
	float fConst21;
	float fRec29[3];
	float fRec28[3];
	float fRec32[2];
	float fRec30[2];
	float fRec35[2];
	float fRec33[2];
	float fConst22;
	float fConst23;
	float fConst24;
	float fRec3[3];
	float fConst25;
	float fConst26;
	float fConst27;
	float fRec2[3];
	float fConst28;
	float fConst29;
	float fConst30;
	float fRec1[3];
	float fConst31;
	float fRec0[2];
	FAUSTFLOAT fVbargraph0;
	float fConst32;
	float fConst33;
	float fConst34;
	float fConst35;
	float fConst36;
	float fConst37;
	float fConst38;
	float fConst39;
	float fConst40;
	float fConst41;
	float fConst42;
	float fConst43;
	float fConst44;
	float fConst45;
	float fConst46;
	float fConst47;
	float fConst48;
	float fConst49;
	float fConst50;
	float fConst51;
	float fConst52;
	float fRec42[3];
	float fConst53;
	float fConst54;
	float fConst55;
	float fRec41[3];
	float fConst56;
	float fConst57;
	float fConst58;
	float fRec40[3];
	float fConst59;
	float fConst60;
	float fConst61;
	float fConst62;
	float fRec39[3];
	float fConst63;
	float fConst64;
	float fConst65;
	float fRec38[3];
	float fConst66;
	float fConst67;
	float fConst68;
	float fRec37[3];
	float fConst69;
	float fRec36[2];
	FAUSTFLOAT fVbargraph1;
	float fConst70;
	float fConst71;
	float fConst72;
	float fConst73;
	float fConst74;
	float fConst75;
	float fConst76;
	float fConst77;
	float fConst78;
	float fConst79;
	float fConst80;
	float fConst81;
	float fConst82;
	float fConst83;
	float fConst84;
	float fConst85;
	float fConst86;
	float fConst87;
	float fConst88;
	float fConst89;
	float fConst90;
	float fRec49[3];
	float fConst91;
	float fConst92;
	float fConst93;
	float fRec48[3];
	float fConst94;
	float fConst95;
	float fConst96;
	float fRec47[3];
	float fConst97;
	float fConst98;
	float fConst99;
	float fConst100;
	float fRec46[3];
	float fConst101;
	float fConst102;
	float fConst103;
	float fRec45[3];
	float fConst104;
	float fConst105;
	float fConst106;
	float fRec44[3];
	float fConst107;
	float fRec43[2];
	FAUSTFLOAT fVbargraph2;
	float fConst108;
	float fConst109;
	float fConst110;
	float fConst111;
	float fConst112;
	float fConst113;
	float fConst114;
	float fConst115;
	float fConst116;
	float fConst117;
	float fConst118;
	float fConst119;
	float fConst120;
	float fConst121;
	float fConst122;
	float fConst123;
	float fConst124;
	float fConst125;
	float fConst126;
	float fConst127;
	float fConst128;
	float fRec56[3];
	float fConst129;
	float fConst130;
	float fConst131;
	float fRec55[3];
	float fConst132;
	float fConst133;
	float fConst134;
	float fRec54[3];
	float fConst135;
	float fConst136;
	float fConst137;
	float fConst138;
	float fRec53[3];
	float fConst139;
	float fConst140;
	float fConst141;
	float fRec52[3];
	float fConst142;
	float fConst143;
	float fConst144;
	float fRec51[3];
	float fConst145;
	float fRec50[2];
	FAUSTFLOAT fVbargraph3;
	float fConst146;
	float fConst147;
	float fConst148;
	float fConst149;
	float fConst150;
	float fConst151;
	float fConst152;
	float fConst153;
	float fConst154;
	float fConst155;
	float fConst156;
	float fConst157;
	float fConst158;
	float fConst159;
	float fConst160;
	float fConst161;
	float fConst162;
	float fConst163;
	float fConst164;
	float fConst165;
	float fConst166;
	float fRec63[3];
	float fConst167;
	float fConst168;
	float fConst169;
	float fRec62[3];
	float fConst170;
	float fConst171;
	float fConst172;
	float fRec61[3];
	float fConst173;
	float fConst174;
	float fConst175;
	float fConst176;
	float fRec60[3];
	float fConst177;
	float fConst178;
	float fConst179;
	float fRec59[3];
	float fConst180;
	float fConst181;
	float fConst182;
	float fRec58[3];
	float fConst183;
	float fRec57[2];
	FAUSTFLOAT fVbargraph4;
	float fConst184;
	float fConst185;
	float fConst186;
	float fConst187;
	float fConst188;
	float fConst189;
	float fConst190;
	float fConst191;
	float fConst192;
	float fConst193;
	float fConst194;
	float fConst195;
	float fConst196;
	float fConst197;
	float fConst198;
	float fConst199;
	float fConst200;
	float fConst201;
	float fConst202;
	float fConst203;
	float fConst204;
	float fRec70[3];
	float fConst205;
	float fConst206;
	float fConst207;
	float fRec69[3];
	float fConst208;
	float fConst209;
	float fConst210;
	float fRec68[3];
	float fConst211;
	float fConst212;
	float fConst213;
	float fConst214;
	float fRec67[3];
	float fConst215;
	float fConst216;
	float fConst217;
	float fRec66[3];
	float fConst218;
	float fConst219;
	float fConst220;
	float fRec65[3];
	float fConst221;
	float fRec64[2];
	FAUSTFLOAT fVbargraph5;
	float fConst222;
	float fConst223;
	float fConst224;
	float fConst225;
	float fConst226;
	float fConst227;
	float fConst228;
	float fConst229;
	float fConst230;
	float fConst231;
	float fConst232;
	float fConst233;
	float fConst234;
	float fConst235;
	float fConst236;
	float fConst237;
	float fConst238;
	float fConst239;
	float fConst240;
	float fConst241;
	float fConst242;
	float fRec77[3];
	float fConst243;
	float fConst244;
	float fConst245;
	float fRec76[3];
	float fConst246;
	float fConst247;
	float fConst248;
	float fRec75[3];
	float fConst249;
	float fConst250;
	float fConst251;
	float fConst252;
	float fRec74[3];
	float fConst253;
	float fConst254;
	float fConst255;
	float fRec73[3];
	float fConst256;
	float fConst257;
	float fConst258;
	float fRec72[3];
	float fConst259;
	float fRec71[2];
	FAUSTFLOAT fVbargraph6;
	float fConst260;
	float fConst261;
	float fConst262;
	float fConst263;
	float fConst264;
	float fConst265;
	float fConst266;
	float fConst267;
	float fConst268;
	float fConst269;
	float fConst270;
	float fConst271;
	float fConst272;
	float fConst273;
	float fConst274;
	float fConst275;
	float fConst276;
	float fConst277;
	float fConst278;
	float fConst279;
	float fConst280;
	float fRec84[3];
	float fConst281;
	float fConst282;
	float fConst283;
	float fRec83[3];
	float fConst284;
	float fConst285;
	float fConst286;
	float fRec82[3];
	float fConst287;
	float fConst288;
	float fConst289;
	float fConst290;
	float fRec81[3];
	float fConst291;
	float fConst292;
	float fConst293;
	float fRec80[3];
	float fConst294;
	float fConst295;
	float fConst296;
	float fRec79[3];
	float fConst297;
	float fRec78[2];
	FAUSTFLOAT fVbargraph7;
	float fConst298;
	float fConst299;
	float fConst300;
	float fConst301;
	float fConst302;
	float fConst303;
	float fConst304;
	float fConst305;
	float fConst306;
	float fConst307;
	float fConst308;
	float fConst309;
	float fConst310;
	float fConst311;
	float fConst312;
	float fConst313;
	float fConst314;
	float fConst315;
	float fConst316;
	float fConst317;
	float fConst318;
	float fRec91[3];
	float fConst319;
	float fConst320;
	float fConst321;
	float fRec90[3];
	float fConst322;
	float fConst323;
	float fConst324;
	float fRec89[3];
	float fConst325;
	float fConst326;
	float fConst327;
	float fConst328;
	float fRec88[3];
	float fConst329;
	float fConst330;
	float fConst331;
	float fRec87[3];
	float fConst332;
	float fConst333;
	float fConst334;
	float fRec86[3];
	float fConst335;
	float fRec85[2];
	FAUSTFLOAT fVbargraph8;
	float fConst336;
	float fConst337;
	float fConst338;
	float fConst339;
	float fConst340;
	float fConst341;
	float fConst342;
	float fConst343;
	float fConst344;
	float fConst345;
	float fConst346;
	float fConst347;
	float fConst348;
	float fConst349;
	float fConst350;
	float fConst351;
	float fConst352;
	float fConst353;
	float fConst354;
	float fConst355;
	float fConst356;
	float fRec98[3];
	float fConst357;
	float fConst358;
	float fConst359;
	float fRec97[3];
	float fConst360;
	float fConst361;
	float fConst362;
	float fRec96[3];
	float fConst363;
	float fConst364;
	float fConst365;
	float fConst366;
	float fRec95[3];
	float fConst367;
	float fConst368;
	float fConst369;
	float fRec94[3];
	float fConst370;
	float fConst371;
	float fConst372;
	float fRec93[3];
	float fConst373;
	float fRec92[2];
	FAUSTFLOAT fVbargraph9;
	float fConst374;
	float fConst375;
	float fConst376;
	float fConst377;
	float fConst378;
	float fConst379;
	float fConst380;
	float fConst381;
	float fConst382;
	float fConst383;
	float fConst384;
	float fConst385;
	float fConst386;
	float fConst387;
	float fConst388;
	float fConst389;
	float fConst390;
	float fConst391;
	float fConst392;
	float fConst393;
	float fConst394;
	float fRec105[3];
	float fConst395;
	float fConst396;
	float fConst397;
	float fRec104[3];
	float fConst398;
	float fConst399;
	float fConst400;
	float fRec103[3];
	float fConst401;
	float fConst402;
	float fConst403;
	float fConst404;
	float fRec102[3];
	float fConst405;
	float fConst406;
	float fConst407;
	float fRec101[3];
	float fConst408;
	float fConst409;
	float fConst410;
	float fRec100[3];
	float fConst411;
	float fRec99[2];
	FAUSTFLOAT fVbargraph10;
	float fConst412;
	float fConst413;
	float fConst414;
	float fConst415;
	float fConst416;
	float fConst417;
	float fConst418;
	float fConst419;
	float fConst420;
	float fConst421;
	float fConst422;
	float fConst423;
	float fConst424;
	float fConst425;
	float fConst426;
	float fConst427;
	float fConst428;
	float fConst429;
	float fConst430;
	float fConst431;
	float fConst432;
	float fRec112[3];
	float fConst433;
	float fConst434;
	float fConst435;
	float fRec111[3];
	float fConst436;
	float fConst437;
	float fConst438;
	float fRec110[3];
	float fConst439;
	float fConst440;
	float fConst441;
	float fConst442;
	float fRec109[3];
	float fConst443;
	float fConst444;
	float fConst445;
	float fRec108[3];
	float fConst446;
	float fConst447;
	float fConst448;
	float fRec107[3];
	float fConst449;
	float fRec106[2];
	FAUSTFLOAT fVbargraph11;
	float fConst450;
	float fConst451;
	float fConst452;
	float fConst453;
	float fConst454;
	float fConst455;
	float fConst456;
	float fConst457;
	float fConst458;
	float fConst459;
	float fConst460;
	float fConst461;
	float fConst462;
	float fConst463;
	float fConst464;
	float fConst465;
	float fConst466;
	float fConst467;
	float fConst468;
	float fConst469;
	float fConst470;
	float fRec119[3];
	float fConst471;
	float fConst472;
	float fConst473;
	float fRec118[3];
	float fConst474;
	float fConst475;
	float fConst476;
	float fRec117[3];
	float fConst477;
	float fConst478;
	float fConst479;
	float fConst480;
	float fRec116[3];
	float fConst481;
	float fConst482;
	float fConst483;
	float fRec115[3];
	float fConst484;
	float fConst485;
	float fConst486;
	float fRec114[3];
	float fConst487;
	float fRec113[2];
	FAUSTFLOAT fVbargraph12;
	float fConst488;
	float fConst489;
	float fConst490;
	float fConst491;
	float fConst492;
	float fConst493;
	float fConst494;
	float fConst495;
	float fConst496;
	float fConst497;
	float fConst498;
	float fConst499;
	float fConst500;
	float fConst501;
	float fConst502;
	float fConst503;
	float fConst504;
	float fConst505;
	float fConst506;
	float fConst507;
	float fConst508;
	float fRec126[3];
	float fConst509;
	float fConst510;
	float fConst511;
	float fRec125[3];
	float fConst512;
	float fConst513;
	float fConst514;
	float fRec124[3];
	float fConst515;
	float fConst516;
	float fConst517;
	float fConst518;
	float fRec123[3];
	float fConst519;
	float fConst520;
	float fConst521;
	float fRec122[3];
	float fConst522;
	float fConst523;
	float fConst524;
	float fRec121[3];
	float fConst525;
	float fRec120[2];
	FAUSTFLOAT fVbargraph13;
	float fConst526;
	float fConst527;
	float fConst528;
	float fConst529;
	float fConst530;
	float fConst531;
	float fConst532;
	float fConst533;
	float fConst534;
	float fRec130[3];
	float fConst535;
	float fConst536;
	float fConst537;
	float fRec129[3];
	float fConst538;
	float fConst539;
	float fConst540;
	float fRec128[3];
	float fConst541;
	float fRec127[2];
	FAUSTFLOAT fVbargraph14;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/crybaby:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/crybaby:copyright", "Julius O. Smith III");
		m->declare("effect.lib/crybaby:license", "STK-4.3");
		m->declare("effect.lib/crybaby_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/crybaby_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/crybaby_demo:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2b:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2b:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2b:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2bn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2bn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2bn:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_demo:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/pianokey2hz:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/pianokey2hz:copyright", "Julius O. Smith III");
		m->declare("effect.lib/pianokey2hz:license", "STK-4.3");
		m->declare("effect.lib/wah4:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/wah4:copyright", "Julius O. Smith III");
		m->declare("effect.lib/wah4:license", "STK-4.3");
		m->declare("effect.lib/wah4_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/wah4_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/wah4_demo:license", "STK-4.3");
		m->declare("filename", "vcf_wah_pedals.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "vcf_wah_pedals");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 1e+03f / fConst0;
		fConst2 = std::tan(50265.484f / fConst0);
		fConst3 = 1.0f / fConst2;
		fConst4 = 1.0f / ((fConst3 + 0.15748216f) / fConst2 + 0.9351402f);
		fConst5 = mydsp_faustpower2_f(fConst2);
		fConst6 = 50.06381f / fConst5;
		fConst7 = fConst6 + 0.9351402f;
		fConst8 = 1.0f / ((fConst3 + 0.74313045f) / fConst2 + 1.4500711f);
		fConst9 = 11.0520525f / fConst5;
		fConst10 = fConst9 + 1.4500711f;
		fConst11 = 1.0f / ((fConst3 + 3.1897273f) / fConst2 + 4.0767817f);
		fConst12 = 0.0017661728f / fConst5;
		fConst13 = fConst12 + 0.0004076782f;
		fConst14 = 6.2831855f / fConst0;
		fConst15 = 1.0f / fConst0;
		fConst16 = 0.25f * fConst0;
		fConst17 = 0.041666668f * mydsp_faustpower2_f(fConst0);
		fConst18 = 0.0052083335f * mydsp_faustpower3_f(fConst0);
		fConst19 = 1413.7167f / fConst0;
		fConst20 = 2827.4333f / fConst0;
		fConst21 = 3.1415927f / fConst0;
		fConst22 = (fConst3 + -3.1897273f) / fConst2 + 4.0767817f;
		fConst23 = 1.0f / fConst5;
		fConst24 = 2.0f * (4.0767817f - fConst23);
		fConst25 = 2.0f * (0.0004076782f - fConst12);
		fConst26 = (fConst3 + -0.74313045f) / fConst2 + 1.4500711f;
		fConst27 = 2.0f * (1.4500711f - fConst23);
		fConst28 = 2.0f * (1.4500711f - fConst9);
		fConst29 = (fConst3 + -0.15748216f) / fConst2 + 0.9351402f;
		fConst30 = 2.0f * (0.9351402f - fConst23);
		fConst31 = 2.0f * (0.9351402f - fConst6);
		fConst32 = std::tan(31665.27f / fConst0);
		fConst33 = 1.0f / fConst32;
		fConst34 = 1.0f / ((fConst33 + 0.15748216f) / fConst32 + 0.9351402f);
		fConst35 = mydsp_faustpower2_f(fConst32);
		fConst36 = 50.06381f / fConst35;
		fConst37 = fConst36 + 0.9351402f;
		fConst38 = 1.0f / ((fConst33 + 0.74313045f) / fConst32 + 1.4500711f);
		fConst39 = 11.0520525f / fConst35;
		fConst40 = fConst39 + 1.4500711f;
		fConst41 = 1.0f / ((fConst33 + 3.1897273f) / fConst32 + 4.0767817f);
		fConst42 = 0.0017661728f / fConst35;
		fConst43 = fConst42 + 0.0004076782f;
		fConst44 = 1.0f / ((fConst3 + 0.16840488f) / fConst2 + 1.0693583f);
		fConst45 = fConst23 + 53.53615f;
		fConst46 = 1.0f / ((fConst3 + 0.51247865f) / fConst2 + 0.6896214f);
		fConst47 = fConst23 + 7.6217313f;
		fConst48 = 1.0f / ((fConst3 + 0.78241307f) / fConst2 + 0.2452915f);
		fConst49 = 0.0001f / fConst5;
		fConst50 = fConst49 + 0.0004332272f;
		fConst51 = (fConst3 + -0.78241307f) / fConst2 + 0.2452915f;
		fConst52 = 2.0f * (0.2452915f - fConst23);
		fConst53 = 2.0f * (0.0004332272f - fConst49);
		fConst54 = (fConst3 + -0.51247865f) / fConst2 + 0.6896214f;
		fConst55 = 2.0f * (0.6896214f - fConst23);
		fConst56 = 2.0f * (7.6217313f - fConst23);
		fConst57 = (fConst3 + -0.16840488f) / fConst2 + 1.0693583f;
		fConst58 = 2.0f * (1.0693583f - fConst23);
		fConst59 = 2.0f * (53.53615f - fConst23);
		fConst60 = (fConst33 + -3.1897273f) / fConst32 + 4.0767817f;
		fConst61 = 1.0f / fConst35;
		fConst62 = 2.0f * (4.0767817f - fConst61);
		fConst63 = 2.0f * (0.0004076782f - fConst42);
		fConst64 = (fConst33 + -0.74313045f) / fConst32 + 1.4500711f;
		fConst65 = 2.0f * (1.4500711f - fConst61);
		fConst66 = 2.0f * (1.4500711f - fConst39);
		fConst67 = (fConst33 + -0.15748216f) / fConst32 + 0.9351402f;
		fConst68 = 2.0f * (0.9351402f - fConst61);
		fConst69 = 2.0f * (0.9351402f - fConst36);
		fConst70 = std::tan(19947.87f / fConst0);
		fConst71 = 1.0f / fConst70;
		fConst72 = 1.0f / ((fConst71 + 0.15748216f) / fConst70 + 0.9351402f);
		fConst73 = mydsp_faustpower2_f(fConst70);
		fConst74 = 50.06381f / fConst73;
		fConst75 = fConst74 + 0.9351402f;
		fConst76 = 1.0f / ((fConst71 + 0.74313045f) / fConst70 + 1.4500711f);
		fConst77 = 11.0520525f / fConst73;
		fConst78 = fConst77 + 1.4500711f;
		fConst79 = 1.0f / ((fConst71 + 3.1897273f) / fConst70 + 4.0767817f);
		fConst80 = 0.0017661728f / fConst73;
		fConst81 = fConst80 + 0.0004076782f;
		fConst82 = 1.0f / ((fConst33 + 0.16840488f) / fConst32 + 1.0693583f);
		fConst83 = fConst61 + 53.53615f;
		fConst84 = 1.0f / ((fConst33 + 0.51247865f) / fConst32 + 0.6896214f);
		fConst85 = fConst61 + 7.6217313f;
		fConst86 = 1.0f / ((fConst33 + 0.78241307f) / fConst32 + 0.2452915f);
		fConst87 = 0.0001f / fConst35;
		fConst88 = fConst87 + 0.0004332272f;
		fConst89 = (fConst33 + -0.78241307f) / fConst32 + 0.2452915f;
		fConst90 = 2.0f * (0.2452915f - fConst61);
		fConst91 = 2.0f * (0.0004332272f - fConst87);
		fConst92 = (fConst33 + -0.51247865f) / fConst32 + 0.6896214f;
		fConst93 = 2.0f * (0.6896214f - fConst61);
		fConst94 = 2.0f * (7.6217313f - fConst61);
		fConst95 = (fConst33 + -0.16840488f) / fConst32 + 1.0693583f;
		fConst96 = 2.0f * (1.0693583f - fConst61);
		fConst97 = 2.0f * (53.53615f - fConst61);
		fConst98 = (fConst71 + -3.1897273f) / fConst70 + 4.0767817f;
		fConst99 = 1.0f / fConst73;
		fConst100 = 2.0f * (4.0767817f - fConst99);
		fConst101 = 2.0f * (0.0004076782f - fConst80);
		fConst102 = (fConst71 + -0.74313045f) / fConst70 + 1.4500711f;
		fConst103 = 2.0f * (1.4500711f - fConst99);
		fConst104 = 2.0f * (1.4500711f - fConst77);
		fConst105 = (fConst71 + -0.15748216f) / fConst70 + 0.9351402f;
		fConst106 = 2.0f * (0.9351402f - fConst99);
		fConst107 = 2.0f * (0.9351402f - fConst74);
		fConst108 = std::tan(12566.371f / fConst0);
		fConst109 = 1.0f / fConst108;
		fConst110 = 1.0f / ((fConst109 + 0.15748216f) / fConst108 + 0.9351402f);
		fConst111 = mydsp_faustpower2_f(fConst108);
		fConst112 = 50.06381f / fConst111;
		fConst113 = fConst112 + 0.9351402f;
		fConst114 = 1.0f / ((fConst109 + 0.74313045f) / fConst108 + 1.4500711f);
		fConst115 = 11.0520525f / fConst111;
		fConst116 = fConst115 + 1.4500711f;
		fConst117 = 1.0f / ((fConst109 + 3.1897273f) / fConst108 + 4.0767817f);
		fConst118 = 0.0017661728f / fConst111;
		fConst119 = fConst118 + 0.0004076782f;
		fConst120 = 1.0f / ((fConst71 + 0.16840488f) / fConst70 + 1.0693583f);
		fConst121 = fConst99 + 53.53615f;
		fConst122 = 1.0f / ((fConst71 + 0.51247865f) / fConst70 + 0.6896214f);
		fConst123 = fConst99 + 7.6217313f;
		fConst124 = 1.0f / ((fConst71 + 0.78241307f) / fConst70 + 0.2452915f);
		fConst125 = 0.0001f / fConst73;
		fConst126 = fConst125 + 0.0004332272f;
		fConst127 = (fConst71 + -0.78241307f) / fConst70 + 0.2452915f;
		fConst128 = 2.0f * (0.2452915f - fConst99);
		fConst129 = 2.0f * (0.0004332272f - fConst125);
		fConst130 = (fConst71 + -0.51247865f) / fConst70 + 0.6896214f;
		fConst131 = 2.0f * (0.6896214f - fConst99);
		fConst132 = 2.0f * (7.6217313f - fConst99);
		fConst133 = (fConst71 + -0.16840488f) / fConst70 + 1.0693583f;
		fConst134 = 2.0f * (1.0693583f - fConst99);
		fConst135 = 2.0f * (53.53615f - fConst99);
		fConst136 = (fConst109 + -3.1897273f) / fConst108 + 4.0767817f;
		fConst137 = 1.0f / fConst111;
		fConst138 = 2.0f * (4.0767817f - fConst137);
		fConst139 = 2.0f * (0.0004076782f - fConst118);
		fConst140 = (fConst109 + -0.74313045f) / fConst108 + 1.4500711f;
		fConst141 = 2.0f * (1.4500711f - fConst137);
		fConst142 = 2.0f * (1.4500711f - fConst115);
		fConst143 = (fConst109 + -0.15748216f) / fConst108 + 0.9351402f;
		fConst144 = 2.0f * (0.9351402f - fConst137);
		fConst145 = 2.0f * (0.9351402f - fConst112);
		fConst146 = std::tan(7916.3174f / fConst0);
		fConst147 = 1.0f / fConst146;
		fConst148 = 1.0f / ((fConst147 + 0.15748216f) / fConst146 + 0.9351402f);
		fConst149 = mydsp_faustpower2_f(fConst146);
		fConst150 = 50.06381f / fConst149;
		fConst151 = fConst150 + 0.9351402f;
		fConst152 = 1.0f / ((fConst147 + 0.74313045f) / fConst146 + 1.4500711f);
		fConst153 = 11.0520525f / fConst149;
		fConst154 = fConst153 + 1.4500711f;
		fConst155 = 1.0f / ((fConst147 + 3.1897273f) / fConst146 + 4.0767817f);
		fConst156 = 0.0017661728f / fConst149;
		fConst157 = fConst156 + 0.0004076782f;
		fConst158 = 1.0f / ((fConst109 + 0.16840488f) / fConst108 + 1.0693583f);
		fConst159 = fConst137 + 53.53615f;
		fConst160 = 1.0f / ((fConst109 + 0.51247865f) / fConst108 + 0.6896214f);
		fConst161 = fConst137 + 7.6217313f;
		fConst162 = 1.0f / ((fConst109 + 0.78241307f) / fConst108 + 0.2452915f);
		fConst163 = 0.0001f / fConst111;
		fConst164 = fConst163 + 0.0004332272f;
		fConst165 = (fConst109 + -0.78241307f) / fConst108 + 0.2452915f;
		fConst166 = 2.0f * (0.2452915f - fConst137);
		fConst167 = 2.0f * (0.0004332272f - fConst163);
		fConst168 = (fConst109 + -0.51247865f) / fConst108 + 0.6896214f;
		fConst169 = 2.0f * (0.6896214f - fConst137);
		fConst170 = 2.0f * (7.6217313f - fConst137);
		fConst171 = (fConst109 + -0.16840488f) / fConst108 + 1.0693583f;
		fConst172 = 2.0f * (1.0693583f - fConst137);
		fConst173 = 2.0f * (53.53615f - fConst137);
		fConst174 = (fConst147 + -3.1897273f) / fConst146 + 4.0767817f;
		fConst175 = 1.0f / fConst149;
		fConst176 = 2.0f * (4.0767817f - fConst175);
		fConst177 = 2.0f * (0.0004076782f - fConst156);
		fConst178 = (fConst147 + -0.74313045f) / fConst146 + 1.4500711f;
		fConst179 = 2.0f * (1.4500711f - fConst175);
		fConst180 = 2.0f * (1.4500711f - fConst153);
		fConst181 = (fConst147 + -0.15748216f) / fConst146 + 0.9351402f;
		fConst182 = 2.0f * (0.9351402f - fConst175);
		fConst183 = 2.0f * (0.9351402f - fConst150);
		fConst184 = std::tan(4986.9673f / fConst0);
		fConst185 = 1.0f / fConst184;
		fConst186 = 1.0f / ((fConst185 + 0.15748216f) / fConst184 + 0.9351402f);
		fConst187 = mydsp_faustpower2_f(fConst184);
		fConst188 = 50.06381f / fConst187;
		fConst189 = fConst188 + 0.9351402f;
		fConst190 = 1.0f / ((fConst185 + 0.74313045f) / fConst184 + 1.4500711f);
		fConst191 = 11.0520525f / fConst187;
		fConst192 = fConst191 + 1.4500711f;
		fConst193 = 1.0f / ((fConst185 + 3.1897273f) / fConst184 + 4.0767817f);
		fConst194 = 0.0017661728f / fConst187;
		fConst195 = fConst194 + 0.0004076782f;
		fConst196 = 1.0f / ((fConst147 + 0.16840488f) / fConst146 + 1.0693583f);
		fConst197 = fConst175 + 53.53615f;
		fConst198 = 1.0f / ((fConst147 + 0.51247865f) / fConst146 + 0.6896214f);
		fConst199 = fConst175 + 7.6217313f;
		fConst200 = 1.0f / ((fConst147 + 0.78241307f) / fConst146 + 0.2452915f);
		fConst201 = 0.0001f / fConst149;
		fConst202 = fConst201 + 0.0004332272f;
		fConst203 = (fConst147 + -0.78241307f) / fConst146 + 0.2452915f;
		fConst204 = 2.0f * (0.2452915f - fConst175);
		fConst205 = 2.0f * (0.0004332272f - fConst201);
		fConst206 = (fConst147 + -0.51247865f) / fConst146 + 0.6896214f;
		fConst207 = 2.0f * (0.6896214f - fConst175);
		fConst208 = 2.0f * (7.6217313f - fConst175);
		fConst209 = (fConst147 + -0.16840488f) / fConst146 + 1.0693583f;
		fConst210 = 2.0f * (1.0693583f - fConst175);
		fConst211 = 2.0f * (53.53615f - fConst175);
		fConst212 = (fConst185 + -3.1897273f) / fConst184 + 4.0767817f;
		fConst213 = 1.0f / fConst187;
		fConst214 = 2.0f * (4.0767817f - fConst213);
		fConst215 = 2.0f * (0.0004076782f - fConst194);
		fConst216 = (fConst185 + -0.74313045f) / fConst184 + 1.4500711f;
		fConst217 = 2.0f * (1.4500711f - fConst213);
		fConst218 = 2.0f * (1.4500711f - fConst191);
		fConst219 = (fConst185 + -0.15748216f) / fConst184 + 0.9351402f;
		fConst220 = 2.0f * (0.9351402f - fConst213);
		fConst221 = 2.0f * (0.9351402f - fConst188);
		fConst222 = std::tan(3141.5928f / fConst0);
		fConst223 = 1.0f / fConst222;
		fConst224 = 1.0f / ((fConst223 + 0.15748216f) / fConst222 + 0.9351402f);
		fConst225 = mydsp_faustpower2_f(fConst222);
		fConst226 = 50.06381f / fConst225;
		fConst227 = fConst226 + 0.9351402f;
		fConst228 = 1.0f / ((fConst223 + 0.74313045f) / fConst222 + 1.4500711f);
		fConst229 = 11.0520525f / fConst225;
		fConst230 = fConst229 + 1.4500711f;
		fConst231 = 1.0f / ((fConst223 + 3.1897273f) / fConst222 + 4.0767817f);
		fConst232 = 0.0017661728f / fConst225;
		fConst233 = fConst232 + 0.0004076782f;
		fConst234 = 1.0f / ((fConst185 + 0.16840488f) / fConst184 + 1.0693583f);
		fConst235 = fConst213 + 53.53615f;
		fConst236 = 1.0f / ((fConst185 + 0.51247865f) / fConst184 + 0.6896214f);
		fConst237 = fConst213 + 7.6217313f;
		fConst238 = 1.0f / ((fConst185 + 0.78241307f) / fConst184 + 0.2452915f);
		fConst239 = 0.0001f / fConst187;
		fConst240 = fConst239 + 0.0004332272f;
		fConst241 = (fConst185 + -0.78241307f) / fConst184 + 0.2452915f;
		fConst242 = 2.0f * (0.2452915f - fConst213);
		fConst243 = 2.0f * (0.0004332272f - fConst239);
		fConst244 = (fConst185 + -0.51247865f) / fConst184 + 0.6896214f;
		fConst245 = 2.0f * (0.6896214f - fConst213);
		fConst246 = 2.0f * (7.6217313f - fConst213);
		fConst247 = (fConst185 + -0.16840488f) / fConst184 + 1.0693583f;
		fConst248 = 2.0f * (1.0693583f - fConst213);
		fConst249 = 2.0f * (53.53615f - fConst213);
		fConst250 = (fConst223 + -3.1897273f) / fConst222 + 4.0767817f;
		fConst251 = 1.0f / fConst225;
		fConst252 = 2.0f * (4.0767817f - fConst251);
		fConst253 = 2.0f * (0.0004076782f - fConst232);
		fConst254 = (fConst223 + -0.74313045f) / fConst222 + 1.4500711f;
		fConst255 = 2.0f * (1.4500711f - fConst251);
		fConst256 = 2.0f * (1.4500711f - fConst229);
		fConst257 = (fConst223 + -0.15748216f) / fConst222 + 0.9351402f;
		fConst258 = 2.0f * (0.9351402f - fConst251);
		fConst259 = 2.0f * (0.9351402f - fConst226);
		fConst260 = std::tan(1979.0793f / fConst0);
		fConst261 = 1.0f / fConst260;
		fConst262 = 1.0f / ((fConst261 + 0.15748216f) / fConst260 + 0.9351402f);
		fConst263 = mydsp_faustpower2_f(fConst260);
		fConst264 = 50.06381f / fConst263;
		fConst265 = fConst264 + 0.9351402f;
		fConst266 = 1.0f / ((fConst261 + 0.74313045f) / fConst260 + 1.4500711f);
		fConst267 = 11.0520525f / fConst263;
		fConst268 = fConst267 + 1.4500711f;
		fConst269 = 1.0f / ((fConst261 + 3.1897273f) / fConst260 + 4.0767817f);
		fConst270 = 0.0017661728f / fConst263;
		fConst271 = fConst270 + 0.0004076782f;
		fConst272 = 1.0f / ((fConst223 + 0.16840488f) / fConst222 + 1.0693583f);
		fConst273 = fConst251 + 53.53615f;
		fConst274 = 1.0f / ((fConst223 + 0.51247865f) / fConst222 + 0.6896214f);
		fConst275 = fConst251 + 7.6217313f;
		fConst276 = 1.0f / ((fConst223 + 0.78241307f) / fConst222 + 0.2452915f);
		fConst277 = 0.0001f / fConst225;
		fConst278 = fConst277 + 0.0004332272f;
		fConst279 = (fConst223 + -0.78241307f) / fConst222 + 0.2452915f;
		fConst280 = 2.0f * (0.2452915f - fConst251);
		fConst281 = 2.0f * (0.0004332272f - fConst277);
		fConst282 = (fConst223 + -0.51247865f) / fConst222 + 0.6896214f;
		fConst283 = 2.0f * (0.6896214f - fConst251);
		fConst284 = 2.0f * (7.6217313f - fConst251);
		fConst285 = (fConst223 + -0.16840488f) / fConst222 + 1.0693583f;
		fConst286 = 2.0f * (1.0693583f - fConst251);
		fConst287 = 2.0f * (53.53615f - fConst251);
		fConst288 = (fConst261 + -3.1897273f) / fConst260 + 4.0767817f;
		fConst289 = 1.0f / fConst263;
		fConst290 = 2.0f * (4.0767817f - fConst289);
		fConst291 = 2.0f * (0.0004076782f - fConst270);
		fConst292 = (fConst261 + -0.74313045f) / fConst260 + 1.4500711f;
		fConst293 = 2.0f * (1.4500711f - fConst289);
		fConst294 = 2.0f * (1.4500711f - fConst267);
		fConst295 = (fConst261 + -0.15748216f) / fConst260 + 0.9351402f;
		fConst296 = 2.0f * (0.9351402f - fConst289);
		fConst297 = 2.0f * (0.9351402f - fConst264);
		fConst298 = std::tan(1246.7418f / fConst0);
		fConst299 = 1.0f / fConst298;
		fConst300 = 1.0f / ((fConst299 + 0.15748216f) / fConst298 + 0.9351402f);
		fConst301 = mydsp_faustpower2_f(fConst298);
		fConst302 = 50.06381f / fConst301;
		fConst303 = fConst302 + 0.9351402f;
		fConst304 = 1.0f / ((fConst299 + 0.74313045f) / fConst298 + 1.4500711f);
		fConst305 = 11.0520525f / fConst301;
		fConst306 = fConst305 + 1.4500711f;
		fConst307 = 1.0f / ((fConst299 + 3.1897273f) / fConst298 + 4.0767817f);
		fConst308 = 0.0017661728f / fConst301;
		fConst309 = fConst308 + 0.0004076782f;
		fConst310 = 1.0f / ((fConst261 + 0.16840488f) / fConst260 + 1.0693583f);
		fConst311 = fConst289 + 53.53615f;
		fConst312 = 1.0f / ((fConst261 + 0.51247865f) / fConst260 + 0.6896214f);
		fConst313 = fConst289 + 7.6217313f;
		fConst314 = 1.0f / ((fConst261 + 0.78241307f) / fConst260 + 0.2452915f);
		fConst315 = 0.0001f / fConst263;
		fConst316 = fConst315 + 0.0004332272f;
		fConst317 = (fConst261 + -0.78241307f) / fConst260 + 0.2452915f;
		fConst318 = 2.0f * (0.2452915f - fConst289);
		fConst319 = 2.0f * (0.0004332272f - fConst315);
		fConst320 = (fConst261 + -0.51247865f) / fConst260 + 0.6896214f;
		fConst321 = 2.0f * (0.6896214f - fConst289);
		fConst322 = 2.0f * (7.6217313f - fConst289);
		fConst323 = (fConst261 + -0.16840488f) / fConst260 + 1.0693583f;
		fConst324 = 2.0f * (1.0693583f - fConst289);
		fConst325 = 2.0f * (53.53615f - fConst289);
		fConst326 = (fConst299 + -3.1897273f) / fConst298 + 4.0767817f;
		fConst327 = 1.0f / fConst301;
		fConst328 = 2.0f * (4.0767817f - fConst327);
		fConst329 = 2.0f * (0.0004076782f - fConst308);
		fConst330 = (fConst299 + -0.74313045f) / fConst298 + 1.4500711f;
		fConst331 = 2.0f * (1.4500711f - fConst327);
		fConst332 = 2.0f * (1.4500711f - fConst305);
		fConst333 = (fConst299 + -0.15748216f) / fConst298 + 0.9351402f;
		fConst334 = 2.0f * (0.9351402f - fConst327);
		fConst335 = 2.0f * (0.9351402f - fConst302);
		fConst336 = std::tan(785.3982f / fConst0);
		fConst337 = 1.0f / fConst336;
		fConst338 = 1.0f / ((fConst337 + 0.15748216f) / fConst336 + 0.9351402f);
		fConst339 = mydsp_faustpower2_f(fConst336);
		fConst340 = 50.06381f / fConst339;
		fConst341 = fConst340 + 0.9351402f;
		fConst342 = 1.0f / ((fConst337 + 0.74313045f) / fConst336 + 1.4500711f);
		fConst343 = 11.0520525f / fConst339;
		fConst344 = fConst343 + 1.4500711f;
		fConst345 = 1.0f / ((fConst337 + 3.1897273f) / fConst336 + 4.0767817f);
		fConst346 = 0.0017661728f / fConst339;
		fConst347 = fConst346 + 0.0004076782f;
		fConst348 = 1.0f / ((fConst299 + 0.16840488f) / fConst298 + 1.0693583f);
		fConst349 = fConst327 + 53.53615f;
		fConst350 = 1.0f / ((fConst299 + 0.51247865f) / fConst298 + 0.6896214f);
		fConst351 = fConst327 + 7.6217313f;
		fConst352 = 1.0f / ((fConst299 + 0.78241307f) / fConst298 + 0.2452915f);
		fConst353 = 0.0001f / fConst301;
		fConst354 = fConst353 + 0.0004332272f;
		fConst355 = (fConst299 + -0.78241307f) / fConst298 + 0.2452915f;
		fConst356 = 2.0f * (0.2452915f - fConst327);
		fConst357 = 2.0f * (0.0004332272f - fConst353);
		fConst358 = (fConst299 + -0.51247865f) / fConst298 + 0.6896214f;
		fConst359 = 2.0f * (0.6896214f - fConst327);
		fConst360 = 2.0f * (7.6217313f - fConst327);
		fConst361 = (fConst299 + -0.16840488f) / fConst298 + 1.0693583f;
		fConst362 = 2.0f * (1.0693583f - fConst327);
		fConst363 = 2.0f * (53.53615f - fConst327);
		fConst364 = (fConst337 + -3.1897273f) / fConst336 + 4.0767817f;
		fConst365 = 1.0f / fConst339;
		fConst366 = 2.0f * (4.0767817f - fConst365);
		fConst367 = 2.0f * (0.0004076782f - fConst346);
		fConst368 = (fConst337 + -0.74313045f) / fConst336 + 1.4500711f;
		fConst369 = 2.0f * (1.4500711f - fConst365);
		fConst370 = 2.0f * (1.4500711f - fConst343);
		fConst371 = (fConst337 + -0.15748216f) / fConst336 + 0.9351402f;
		fConst372 = 2.0f * (0.9351402f - fConst365);
		fConst373 = 2.0f * (0.9351402f - fConst340);
		fConst374 = std::tan(494.76984f / fConst0);
		fConst375 = 1.0f / fConst374;
		fConst376 = 1.0f / ((fConst375 + 0.15748216f) / fConst374 + 0.9351402f);
		fConst377 = mydsp_faustpower2_f(fConst374);
		fConst378 = 50.06381f / fConst377;
		fConst379 = fConst378 + 0.9351402f;
		fConst380 = 1.0f / ((fConst375 + 0.74313045f) / fConst374 + 1.4500711f);
		fConst381 = 11.0520525f / fConst377;
		fConst382 = fConst381 + 1.4500711f;
		fConst383 = 1.0f / ((fConst375 + 3.1897273f) / fConst374 + 4.0767817f);
		fConst384 = 0.0017661728f / fConst377;
		fConst385 = fConst384 + 0.0004076782f;
		fConst386 = 1.0f / ((fConst337 + 0.16840488f) / fConst336 + 1.0693583f);
		fConst387 = fConst365 + 53.53615f;
		fConst388 = 1.0f / ((fConst337 + 0.51247865f) / fConst336 + 0.6896214f);
		fConst389 = fConst365 + 7.6217313f;
		fConst390 = 1.0f / ((fConst337 + 0.78241307f) / fConst336 + 0.2452915f);
		fConst391 = 0.0001f / fConst339;
		fConst392 = fConst391 + 0.0004332272f;
		fConst393 = (fConst337 + -0.78241307f) / fConst336 + 0.2452915f;
		fConst394 = 2.0f * (0.2452915f - fConst365);
		fConst395 = 2.0f * (0.0004332272f - fConst391);
		fConst396 = (fConst337 + -0.51247865f) / fConst336 + 0.6896214f;
		fConst397 = 2.0f * (0.6896214f - fConst365);
		fConst398 = 2.0f * (7.6217313f - fConst365);
		fConst399 = (fConst337 + -0.16840488f) / fConst336 + 1.0693583f;
		fConst400 = 2.0f * (1.0693583f - fConst365);
		fConst401 = 2.0f * (53.53615f - fConst365);
		fConst402 = (fConst375 + -3.1897273f) / fConst374 + 4.0767817f;
		fConst403 = 1.0f / fConst377;
		fConst404 = 2.0f * (4.0767817f - fConst403);
		fConst405 = 2.0f * (0.0004076782f - fConst384);
		fConst406 = (fConst375 + -0.74313045f) / fConst374 + 1.4500711f;
		fConst407 = 2.0f * (1.4500711f - fConst403);
		fConst408 = 2.0f * (1.4500711f - fConst381);
		fConst409 = (fConst375 + -0.15748216f) / fConst374 + 0.9351402f;
		fConst410 = 2.0f * (0.9351402f - fConst403);
		fConst411 = 2.0f * (0.9351402f - fConst378);
		fConst412 = std::tan(311.68546f / fConst0);
		fConst413 = 1.0f / fConst412;
		fConst414 = 1.0f / ((fConst413 + 0.15748216f) / fConst412 + 0.9351402f);
		fConst415 = mydsp_faustpower2_f(fConst412);
		fConst416 = 50.06381f / fConst415;
		fConst417 = fConst416 + 0.9351402f;
		fConst418 = 1.0f / ((fConst413 + 0.74313045f) / fConst412 + 1.4500711f);
		fConst419 = 11.0520525f / fConst415;
		fConst420 = fConst419 + 1.4500711f;
		fConst421 = 1.0f / ((fConst413 + 3.1897273f) / fConst412 + 4.0767817f);
		fConst422 = 0.0017661728f / fConst415;
		fConst423 = fConst422 + 0.0004076782f;
		fConst424 = 1.0f / ((fConst375 + 0.16840488f) / fConst374 + 1.0693583f);
		fConst425 = fConst403 + 53.53615f;
		fConst426 = 1.0f / ((fConst375 + 0.51247865f) / fConst374 + 0.6896214f);
		fConst427 = fConst403 + 7.6217313f;
		fConst428 = 1.0f / ((fConst375 + 0.78241307f) / fConst374 + 0.2452915f);
		fConst429 = 0.0001f / fConst377;
		fConst430 = fConst429 + 0.0004332272f;
		fConst431 = (fConst375 + -0.78241307f) / fConst374 + 0.2452915f;
		fConst432 = 2.0f * (0.2452915f - fConst403);
		fConst433 = 2.0f * (0.0004332272f - fConst429);
		fConst434 = (fConst375 + -0.51247865f) / fConst374 + 0.6896214f;
		fConst435 = 2.0f * (0.6896214f - fConst403);
		fConst436 = 2.0f * (7.6217313f - fConst403);
		fConst437 = (fConst375 + -0.16840488f) / fConst374 + 1.0693583f;
		fConst438 = 2.0f * (1.0693583f - fConst403);
		fConst439 = 2.0f * (53.53615f - fConst403);
		fConst440 = (fConst413 + -3.1897273f) / fConst412 + 4.0767817f;
		fConst441 = 1.0f / fConst415;
		fConst442 = 2.0f * (4.0767817f - fConst441);
		fConst443 = 2.0f * (0.0004076782f - fConst422);
		fConst444 = (fConst413 + -0.74313045f) / fConst412 + 1.4500711f;
		fConst445 = 2.0f * (1.4500711f - fConst441);
		fConst446 = 2.0f * (1.4500711f - fConst419);
		fConst447 = (fConst413 + -0.15748216f) / fConst412 + 0.9351402f;
		fConst448 = 2.0f * (0.9351402f - fConst441);
		fConst449 = 2.0f * (0.9351402f - fConst416);
		fConst450 = std::tan(196.34955f / fConst0);
		fConst451 = 1.0f / fConst450;
		fConst452 = 1.0f / ((fConst451 + 0.15748216f) / fConst450 + 0.9351402f);
		fConst453 = mydsp_faustpower2_f(fConst450);
		fConst454 = 50.06381f / fConst453;
		fConst455 = fConst454 + 0.9351402f;
		fConst456 = 1.0f / ((fConst451 + 0.74313045f) / fConst450 + 1.4500711f);
		fConst457 = 11.0520525f / fConst453;
		fConst458 = fConst457 + 1.4500711f;
		fConst459 = 1.0f / ((fConst451 + 3.1897273f) / fConst450 + 4.0767817f);
		fConst460 = 0.0017661728f / fConst453;
		fConst461 = fConst460 + 0.0004076782f;
		fConst462 = 1.0f / ((fConst413 + 0.16840488f) / fConst412 + 1.0693583f);
		fConst463 = fConst441 + 53.53615f;
		fConst464 = 1.0f / ((fConst413 + 0.51247865f) / fConst412 + 0.6896214f);
		fConst465 = fConst441 + 7.6217313f;
		fConst466 = 1.0f / ((fConst413 + 0.78241307f) / fConst412 + 0.2452915f);
		fConst467 = 0.0001f / fConst415;
		fConst468 = fConst467 + 0.0004332272f;
		fConst469 = (fConst413 + -0.78241307f) / fConst412 + 0.2452915f;
		fConst470 = 2.0f * (0.2452915f - fConst441);
		fConst471 = 2.0f * (0.0004332272f - fConst467);
		fConst472 = (fConst413 + -0.51247865f) / fConst412 + 0.6896214f;
		fConst473 = 2.0f * (0.6896214f - fConst441);
		fConst474 = 2.0f * (7.6217313f - fConst441);
		fConst475 = (fConst413 + -0.16840488f) / fConst412 + 1.0693583f;
		fConst476 = 2.0f * (1.0693583f - fConst441);
		fConst477 = 2.0f * (53.53615f - fConst441);
		fConst478 = (fConst451 + -3.1897273f) / fConst450 + 4.0767817f;
		fConst479 = 1.0f / fConst453;
		fConst480 = 2.0f * (4.0767817f - fConst479);
		fConst481 = 2.0f * (0.0004076782f - fConst460);
		fConst482 = (fConst451 + -0.74313045f) / fConst450 + 1.4500711f;
		fConst483 = 2.0f * (1.4500711f - fConst479);
		fConst484 = 2.0f * (1.4500711f - fConst457);
		fConst485 = (fConst451 + -0.15748216f) / fConst450 + 0.9351402f;
		fConst486 = 2.0f * (0.9351402f - fConst479);
		fConst487 = 2.0f * (0.9351402f - fConst454);
		fConst488 = std::tan(123.69246f / fConst0);
		fConst489 = 1.0f / fConst488;
		fConst490 = 1.0f / ((fConst489 + 0.15748216f) / fConst488 + 0.9351402f);
		fConst491 = mydsp_faustpower2_f(fConst488);
		fConst492 = 50.06381f / fConst491;
		fConst493 = fConst492 + 0.9351402f;
		fConst494 = 1.0f / ((fConst489 + 0.74313045f) / fConst488 + 1.4500711f);
		fConst495 = 11.0520525f / fConst491;
		fConst496 = fConst495 + 1.4500711f;
		fConst497 = 1.0f / ((fConst489 + 3.1897273f) / fConst488 + 4.0767817f);
		fConst498 = 0.0017661728f / fConst491;
		fConst499 = fConst498 + 0.0004076782f;
		fConst500 = 1.0f / ((fConst451 + 0.16840488f) / fConst450 + 1.0693583f);
		fConst501 = fConst479 + 53.53615f;
		fConst502 = 1.0f / ((fConst451 + 0.51247865f) / fConst450 + 0.6896214f);
		fConst503 = fConst479 + 7.6217313f;
		fConst504 = 1.0f / ((fConst451 + 0.78241307f) / fConst450 + 0.2452915f);
		fConst505 = 0.0001f / fConst453;
		fConst506 = fConst505 + 0.0004332272f;
		fConst507 = (fConst451 + -0.78241307f) / fConst450 + 0.2452915f;
		fConst508 = 2.0f * (0.2452915f - fConst479);
		fConst509 = 2.0f * (0.0004332272f - fConst505);
		fConst510 = (fConst451 + -0.51247865f) / fConst450 + 0.6896214f;
		fConst511 = 2.0f * (0.6896214f - fConst479);
		fConst512 = 2.0f * (7.6217313f - fConst479);
		fConst513 = (fConst451 + -0.16840488f) / fConst450 + 1.0693583f;
		fConst514 = 2.0f * (1.0693583f - fConst479);
		fConst515 = 2.0f * (53.53615f - fConst479);
		fConst516 = (fConst489 + -3.1897273f) / fConst488 + 4.0767817f;
		fConst517 = 1.0f / fConst491;
		fConst518 = 2.0f * (4.0767817f - fConst517);
		fConst519 = 2.0f * (0.0004076782f - fConst498);
		fConst520 = (fConst489 + -0.74313045f) / fConst488 + 1.4500711f;
		fConst521 = 2.0f * (1.4500711f - fConst517);
		fConst522 = 2.0f * (1.4500711f - fConst495);
		fConst523 = (fConst489 + -0.15748216f) / fConst488 + 0.9351402f;
		fConst524 = 2.0f * (0.9351402f - fConst517);
		fConst525 = 2.0f * (0.9351402f - fConst492);
		fConst526 = 1.0f / ((fConst489 + 0.16840488f) / fConst488 + 1.0693583f);
		fConst527 = fConst517 + 53.53615f;
		fConst528 = 1.0f / ((fConst489 + 0.51247865f) / fConst488 + 0.6896214f);
		fConst529 = fConst517 + 7.6217313f;
		fConst530 = 1.0f / ((fConst489 + 0.78241307f) / fConst488 + 0.2452915f);
		fConst531 = 0.0001f / fConst491;
		fConst532 = fConst531 + 0.0004332272f;
		fConst533 = (fConst489 + -0.78241307f) / fConst488 + 0.2452915f;
		fConst534 = 2.0f * (0.2452915f - fConst517);
		fConst535 = 2.0f * (0.0004332272f - fConst531);
		fConst536 = (fConst489 + -0.51247865f) / fConst488 + 0.6896214f;
		fConst537 = 2.0f * (0.6896214f - fConst517);
		fConst538 = 2.0f * (7.6217313f - fConst517);
		fConst539 = (fConst489 + -0.16840488f) / fConst488 + 1.0693583f;
		fConst540 = 2.0f * (1.0693583f - fConst517);
		fConst541 = 2.0f * (53.53615f - fConst517);
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(5e+01f);
		fHslider1 = FAUSTFLOAT(1e+02f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fHslider2 = FAUSTFLOAT(5.0f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
		fHslider3 = FAUSTFLOAT(25.0f);
		fCheckbox2 = FAUSTFLOAT(0.0f);
		fHslider4 = FAUSTFLOAT(2e+02f);
		fCheckbox3 = FAUSTFLOAT(0.0f);
		fHslider5 = FAUSTFLOAT(0.8f);
		fVslider0 = FAUSTFLOAT(-2e+01f);
		fCheckbox4 = FAUSTFLOAT(0.0f);
		fCheckbox5 = FAUSTFLOAT(0.0f);
		fEntry0 = FAUSTFLOAT(2.0f);
		fVslider1 = FAUSTFLOAT(0.1f);
		fVslider2 = FAUSTFLOAT(49.0f);
		fVslider3 = FAUSTFLOAT(-0.1f);
		fVslider4 = FAUSTFLOAT(0.1f);
		fCheckbox6 = FAUSTFLOAT(0.0f);
		fHslider6 = FAUSTFLOAT(0.9f);
		fCheckbox7 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 4; l0 = l0 + 1) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec4[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec10[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec16[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec18[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fRec19[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fRec21[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec20[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fVec1[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fVec2[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fVec3[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fVec4[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fVec5[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fVec6[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fRec22[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fVec7[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
			fVec8[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2; l17 = l17 + 1) {
			fVec9[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fVec10[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fVec11[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fVec12[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 2; l21 = l21 + 1) {
			fRec23[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			fVec13[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fVec14[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			fVec15[l24] = 0.0f;
		}
		for (int l25 = 0; l25 < 2; l25 = l25 + 1) {
			fVec16[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			fVec17[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			fVec18[l27] = 0.0f;
		}
		for (int l28 = 0; l28 < 2; l28 = l28 + 1) {
			iRec24[l28] = 0;
		}
		for (int l29 = 0; l29 < 4; l29 = l29 + 1) {
			fRec25[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			fRec26[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 2; l31 = l31 + 1) {
			fRec27[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 3; l32 = l32 + 1) {
			fRec17[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			fRec15[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 2; l34 = l34 + 1) {
			fRec14[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec13[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
			fRec12[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 2; l37 = l37 + 1) {
			fRec11[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			fRec9[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fRec8[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 2; l40 = l40 + 1) {
			fRec7[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
			fRec6[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 2; l42 = l42 + 1) {
			fRec5[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 3; l43 = l43 + 1) {
			fRec29[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 3; l44 = l44 + 1) {
			fRec28[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 2; l45 = l45 + 1) {
			fRec32[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 2; l46 = l46 + 1) {
			fRec30[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 2; l47 = l47 + 1) {
			fRec35[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 2; l48 = l48 + 1) {
			fRec33[l48] = 0.0f;
		}
		for (int l49 = 0; l49 < 3; l49 = l49 + 1) {
			fRec3[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 3; l50 = l50 + 1) {
			fRec2[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 3; l51 = l51 + 1) {
			fRec1[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 2; l52 = l52 + 1) {
			fRec0[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 3; l53 = l53 + 1) {
			fRec42[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 3; l54 = l54 + 1) {
			fRec41[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 3; l55 = l55 + 1) {
			fRec40[l55] = 0.0f;
		}
		for (int l56 = 0; l56 < 3; l56 = l56 + 1) {
			fRec39[l56] = 0.0f;
		}
		for (int l57 = 0; l57 < 3; l57 = l57 + 1) {
			fRec38[l57] = 0.0f;
		}
		for (int l58 = 0; l58 < 3; l58 = l58 + 1) {
			fRec37[l58] = 0.0f;
		}
		for (int l59 = 0; l59 < 2; l59 = l59 + 1) {
			fRec36[l59] = 0.0f;
		}
		for (int l60 = 0; l60 < 3; l60 = l60 + 1) {
			fRec49[l60] = 0.0f;
		}
		for (int l61 = 0; l61 < 3; l61 = l61 + 1) {
			fRec48[l61] = 0.0f;
		}
		for (int l62 = 0; l62 < 3; l62 = l62 + 1) {
			fRec47[l62] = 0.0f;
		}
		for (int l63 = 0; l63 < 3; l63 = l63 + 1) {
			fRec46[l63] = 0.0f;
		}
		for (int l64 = 0; l64 < 3; l64 = l64 + 1) {
			fRec45[l64] = 0.0f;
		}
		for (int l65 = 0; l65 < 3; l65 = l65 + 1) {
			fRec44[l65] = 0.0f;
		}
		for (int l66 = 0; l66 < 2; l66 = l66 + 1) {
			fRec43[l66] = 0.0f;
		}
		for (int l67 = 0; l67 < 3; l67 = l67 + 1) {
			fRec56[l67] = 0.0f;
		}
		for (int l68 = 0; l68 < 3; l68 = l68 + 1) {
			fRec55[l68] = 0.0f;
		}
		for (int l69 = 0; l69 < 3; l69 = l69 + 1) {
			fRec54[l69] = 0.0f;
		}
		for (int l70 = 0; l70 < 3; l70 = l70 + 1) {
			fRec53[l70] = 0.0f;
		}
		for (int l71 = 0; l71 < 3; l71 = l71 + 1) {
			fRec52[l71] = 0.0f;
		}
		for (int l72 = 0; l72 < 3; l72 = l72 + 1) {
			fRec51[l72] = 0.0f;
		}
		for (int l73 = 0; l73 < 2; l73 = l73 + 1) {
			fRec50[l73] = 0.0f;
		}
		for (int l74 = 0; l74 < 3; l74 = l74 + 1) {
			fRec63[l74] = 0.0f;
		}
		for (int l75 = 0; l75 < 3; l75 = l75 + 1) {
			fRec62[l75] = 0.0f;
		}
		for (int l76 = 0; l76 < 3; l76 = l76 + 1) {
			fRec61[l76] = 0.0f;
		}
		for (int l77 = 0; l77 < 3; l77 = l77 + 1) {
			fRec60[l77] = 0.0f;
		}
		for (int l78 = 0; l78 < 3; l78 = l78 + 1) {
			fRec59[l78] = 0.0f;
		}
		for (int l79 = 0; l79 < 3; l79 = l79 + 1) {
			fRec58[l79] = 0.0f;
		}
		for (int l80 = 0; l80 < 2; l80 = l80 + 1) {
			fRec57[l80] = 0.0f;
		}
		for (int l81 = 0; l81 < 3; l81 = l81 + 1) {
			fRec70[l81] = 0.0f;
		}
		for (int l82 = 0; l82 < 3; l82 = l82 + 1) {
			fRec69[l82] = 0.0f;
		}
		for (int l83 = 0; l83 < 3; l83 = l83 + 1) {
			fRec68[l83] = 0.0f;
		}
		for (int l84 = 0; l84 < 3; l84 = l84 + 1) {
			fRec67[l84] = 0.0f;
		}
		for (int l85 = 0; l85 < 3; l85 = l85 + 1) {
			fRec66[l85] = 0.0f;
		}
		for (int l86 = 0; l86 < 3; l86 = l86 + 1) {
			fRec65[l86] = 0.0f;
		}
		for (int l87 = 0; l87 < 2; l87 = l87 + 1) {
			fRec64[l87] = 0.0f;
		}
		for (int l88 = 0; l88 < 3; l88 = l88 + 1) {
			fRec77[l88] = 0.0f;
		}
		for (int l89 = 0; l89 < 3; l89 = l89 + 1) {
			fRec76[l89] = 0.0f;
		}
		for (int l90 = 0; l90 < 3; l90 = l90 + 1) {
			fRec75[l90] = 0.0f;
		}
		for (int l91 = 0; l91 < 3; l91 = l91 + 1) {
			fRec74[l91] = 0.0f;
		}
		for (int l92 = 0; l92 < 3; l92 = l92 + 1) {
			fRec73[l92] = 0.0f;
		}
		for (int l93 = 0; l93 < 3; l93 = l93 + 1) {
			fRec72[l93] = 0.0f;
		}
		for (int l94 = 0; l94 < 2; l94 = l94 + 1) {
			fRec71[l94] = 0.0f;
		}
		for (int l95 = 0; l95 < 3; l95 = l95 + 1) {
			fRec84[l95] = 0.0f;
		}
		for (int l96 = 0; l96 < 3; l96 = l96 + 1) {
			fRec83[l96] = 0.0f;
		}
		for (int l97 = 0; l97 < 3; l97 = l97 + 1) {
			fRec82[l97] = 0.0f;
		}
		for (int l98 = 0; l98 < 3; l98 = l98 + 1) {
			fRec81[l98] = 0.0f;
		}
		for (int l99 = 0; l99 < 3; l99 = l99 + 1) {
			fRec80[l99] = 0.0f;
		}
		for (int l100 = 0; l100 < 3; l100 = l100 + 1) {
			fRec79[l100] = 0.0f;
		}
		for (int l101 = 0; l101 < 2; l101 = l101 + 1) {
			fRec78[l101] = 0.0f;
		}
		for (int l102 = 0; l102 < 3; l102 = l102 + 1) {
			fRec91[l102] = 0.0f;
		}
		for (int l103 = 0; l103 < 3; l103 = l103 + 1) {
			fRec90[l103] = 0.0f;
		}
		for (int l104 = 0; l104 < 3; l104 = l104 + 1) {
			fRec89[l104] = 0.0f;
		}
		for (int l105 = 0; l105 < 3; l105 = l105 + 1) {
			fRec88[l105] = 0.0f;
		}
		for (int l106 = 0; l106 < 3; l106 = l106 + 1) {
			fRec87[l106] = 0.0f;
		}
		for (int l107 = 0; l107 < 3; l107 = l107 + 1) {
			fRec86[l107] = 0.0f;
		}
		for (int l108 = 0; l108 < 2; l108 = l108 + 1) {
			fRec85[l108] = 0.0f;
		}
		for (int l109 = 0; l109 < 3; l109 = l109 + 1) {
			fRec98[l109] = 0.0f;
		}
		for (int l110 = 0; l110 < 3; l110 = l110 + 1) {
			fRec97[l110] = 0.0f;
		}
		for (int l111 = 0; l111 < 3; l111 = l111 + 1) {
			fRec96[l111] = 0.0f;
		}
		for (int l112 = 0; l112 < 3; l112 = l112 + 1) {
			fRec95[l112] = 0.0f;
		}
		for (int l113 = 0; l113 < 3; l113 = l113 + 1) {
			fRec94[l113] = 0.0f;
		}
		for (int l114 = 0; l114 < 3; l114 = l114 + 1) {
			fRec93[l114] = 0.0f;
		}
		for (int l115 = 0; l115 < 2; l115 = l115 + 1) {
			fRec92[l115] = 0.0f;
		}
		for (int l116 = 0; l116 < 3; l116 = l116 + 1) {
			fRec105[l116] = 0.0f;
		}
		for (int l117 = 0; l117 < 3; l117 = l117 + 1) {
			fRec104[l117] = 0.0f;
		}
		for (int l118 = 0; l118 < 3; l118 = l118 + 1) {
			fRec103[l118] = 0.0f;
		}
		for (int l119 = 0; l119 < 3; l119 = l119 + 1) {
			fRec102[l119] = 0.0f;
		}
		for (int l120 = 0; l120 < 3; l120 = l120 + 1) {
			fRec101[l120] = 0.0f;
		}
		for (int l121 = 0; l121 < 3; l121 = l121 + 1) {
			fRec100[l121] = 0.0f;
		}
		for (int l122 = 0; l122 < 2; l122 = l122 + 1) {
			fRec99[l122] = 0.0f;
		}
		for (int l123 = 0; l123 < 3; l123 = l123 + 1) {
			fRec112[l123] = 0.0f;
		}
		for (int l124 = 0; l124 < 3; l124 = l124 + 1) {
			fRec111[l124] = 0.0f;
		}
		for (int l125 = 0; l125 < 3; l125 = l125 + 1) {
			fRec110[l125] = 0.0f;
		}
		for (int l126 = 0; l126 < 3; l126 = l126 + 1) {
			fRec109[l126] = 0.0f;
		}
		for (int l127 = 0; l127 < 3; l127 = l127 + 1) {
			fRec108[l127] = 0.0f;
		}
		for (int l128 = 0; l128 < 3; l128 = l128 + 1) {
			fRec107[l128] = 0.0f;
		}
		for (int l129 = 0; l129 < 2; l129 = l129 + 1) {
			fRec106[l129] = 0.0f;
		}
		for (int l130 = 0; l130 < 3; l130 = l130 + 1) {
			fRec119[l130] = 0.0f;
		}
		for (int l131 = 0; l131 < 3; l131 = l131 + 1) {
			fRec118[l131] = 0.0f;
		}
		for (int l132 = 0; l132 < 3; l132 = l132 + 1) {
			fRec117[l132] = 0.0f;
		}
		for (int l133 = 0; l133 < 3; l133 = l133 + 1) {
			fRec116[l133] = 0.0f;
		}
		for (int l134 = 0; l134 < 3; l134 = l134 + 1) {
			fRec115[l134] = 0.0f;
		}
		for (int l135 = 0; l135 < 3; l135 = l135 + 1) {
			fRec114[l135] = 0.0f;
		}
		for (int l136 = 0; l136 < 2; l136 = l136 + 1) {
			fRec113[l136] = 0.0f;
		}
		for (int l137 = 0; l137 < 3; l137 = l137 + 1) {
			fRec126[l137] = 0.0f;
		}
		for (int l138 = 0; l138 < 3; l138 = l138 + 1) {
			fRec125[l138] = 0.0f;
		}
		for (int l139 = 0; l139 < 3; l139 = l139 + 1) {
			fRec124[l139] = 0.0f;
		}
		for (int l140 = 0; l140 < 3; l140 = l140 + 1) {
			fRec123[l140] = 0.0f;
		}
		for (int l141 = 0; l141 < 3; l141 = l141 + 1) {
			fRec122[l141] = 0.0f;
		}
		for (int l142 = 0; l142 < 3; l142 = l142 + 1) {
			fRec121[l142] = 0.0f;
		}
		for (int l143 = 0; l143 < 2; l143 = l143 + 1) {
			fRec120[l143] = 0.0f;
		}
		for (int l144 = 0; l144 < 3; l144 = l144 + 1) {
			fRec130[l144] = 0.0f;
		}
		for (int l145 = 0; l145 < 3; l145 = l145 + 1) {
			fRec129[l145] = 0.0f;
		}
		for (int l146 = 0; l146 < 3; l146 = l146 + 1) {
			fRec128[l146] = 0.0f;
		}
		for (int l147 = 0; l147 < 2; l147 = l147 + 1) {
			fRec127[l147] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vcf_wah_pedals");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fVslider0, "1", "");
		ui_interface->declare(&fVslider0, "style", "knob");
		ui_interface->declare(&fVslider0, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fVslider0, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fVslider0, FAUSTFLOAT(-2e+01f), FAUSTFLOAT(-1.2e+02f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fVslider2, "2", "");
		ui_interface->declare(&fVslider2, "style", "knob");
		ui_interface->declare(&fVslider2, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fVslider2, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fVslider2, FAUSTFLOAT(49.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider3, "3", "");
		ui_interface->declare(&fVslider3, "style", "knob");
		ui_interface->declare(&fVslider3, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fVslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fVslider3, FAUSTFLOAT(-0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider4, "4", "");
		ui_interface->declare(&fVslider4, "style", "knob");
		ui_interface->declare(&fVslider4, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fVslider4, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fVslider4, FAUSTFLOAT(0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider1, "5", "");
		ui_interface->declare(&fVslider1, "scale", "log");
		ui_interface->declare(&fVslider1, "style", "knob");
		ui_interface->declare(&fVslider1, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fVslider1, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fVslider1, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fEntry0, "6", "");
		ui_interface->declare(&fEntry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fEntry0, FAUSTFLOAT(2.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(4.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fCheckbox5, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fCheckbox5);
		ui_interface->declare(&fCheckbox6, "1", "");
		ui_interface->declare(&fCheckbox6, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fCheckbox6);
		ui_interface->declare(&fCheckbox4, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fCheckbox4);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/vegf.html");
		ui_interface->openHorizontalBox("CRYBABY");
		ui_interface->declare(&fCheckbox3, "0", "");
		ui_interface->declare(&fCheckbox3, "tooltip", "When this is checked, the wah pedal has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox3);
		ui_interface->declare(&fHslider5, "1", "");
		ui_interface->declare(&fHslider5, "tooltip", "wah pedal angle between 0 (rocked back) and 1 (rocked forward)");
		ui_interface->addHorizontalSlider("Wah parameter", &fHslider5, FAUSTFLOAT(0.8f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Fourth-order wah effect made using moog_vcf");
		ui_interface->openHorizontalBox("WAH4");
		ui_interface->declare(&fCheckbox2, "0", "");
		ui_interface->declare(&fCheckbox2, "tooltip", "When this is checked, the wah pedal has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox2);
		ui_interface->declare(&fHslider4, "1", "");
		ui_interface->declare(&fHslider4, "scale", "log");
		ui_interface->declare(&fHslider4, "tooltip", "wah resonance frequency in Hz");
		ui_interface->addHorizontalSlider("Resonance Frequency", &fHslider4, FAUSTFLOAT(2e+02f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(2e+03f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's effect.lib for info and references");
		ui_interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fCheckbox0, "0", "");
		ui_interface->declare(&fCheckbox0, "tooltip", "When this is checked, the Moog VCF has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox0);
		ui_interface->declare(&fCheckbox1, "1", "");
		ui_interface->declare(&fCheckbox1, "tooltip", "Select moog_vcf_2b (two-biquad) implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface->addCheckButton("Use Biquads", &fCheckbox1);
		ui_interface->declare(&fCheckbox7, "2", "");
		ui_interface->declare(&fCheckbox7, "tooltip", "If using biquads, make them normalized ladders (moog_vcf_2bn)");
		ui_interface->addCheckButton("Normalized Ladders", &fCheckbox7);
		ui_interface->closeBox();
		ui_interface->declare(&fHslider3, "1", "");
		ui_interface->declare(&fHslider3, "tooltip", "The VCF resonates at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).  The VCF response is flat below the corner frequency, and rolls off -24 dB per octave above.");
		ui_interface->declare(&fHslider3, "unit", "PK");
		ui_interface->addHorizontalSlider("Corner Frequency", &fHslider3, FAUSTFLOAT(25.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider6, "2", "");
		ui_interface->declare(&fHslider6, "style", "knob");
		ui_interface->declare(&fHslider6, "tooltip", "Amount of resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface->addHorizontalSlider("Corner Resonance", &fHslider6, FAUSTFLOAT(0.9f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider2, "3", "");
		ui_interface->declare(&fHslider2, "style", "knob");
		ui_interface->declare(&fHslider2, "tooltip", "output level in decibels");
		ui_interface->declare(&fHslider2, "unit", "dB");
		ui_interface->addHorizontalSlider("VCF Output Level", &fHslider2, FAUSTFLOAT(5.0f), FAUSTFLOAT(-6e+01f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "5", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fVbargraph14, "0", "");
		ui_interface->declare(&fVbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fVbargraph14, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph13, "1", "");
		ui_interface->declare(&fVbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fVbargraph13, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph12, "2", "");
		ui_interface->declare(&fVbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fVbargraph12, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph11, "3", "");
		ui_interface->declare(&fVbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fVbargraph11, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph10, "4", "");
		ui_interface->declare(&fVbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fVbargraph10, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph9, "5", "");
		ui_interface->declare(&fVbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fVbargraph9, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph8, "6", "");
		ui_interface->declare(&fVbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fVbargraph8, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph7, "7", "");
		ui_interface->declare(&fVbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fVbargraph7, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph6, "8", "");
		ui_interface->declare(&fVbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fVbargraph6, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph5, "9", "");
		ui_interface->declare(&fVbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fVbargraph5, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph4, "10", "");
		ui_interface->declare(&fVbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fVbargraph4, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph3, "11", "");
		ui_interface->declare(&fVbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fVbargraph3, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph2, "12", "");
		ui_interface->declare(&fVbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fVbargraph2, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph1, "13", "");
		ui_interface->declare(&fVbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fVbargraph1, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph0, "14", "");
		ui_interface->declare(&fVbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fVbargraph0, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fHslider1, "0", "");
		ui_interface->declare(&fHslider1, "scale", "log");
		ui_interface->declare(&fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fHslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fHslider1, FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider0, "1", "");
		ui_interface->declare(&fHslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fHslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fHslider0, FAUSTFLOAT(5e+01f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fHslider1);
		float fSlow2 = (((0.001f * fSlow1) > 0.0f) ? std::exp(-(fConst1 / fSlow1)) : 0.0f);
		int iSlow3 = int(float(fCheckbox0));
		float fSlow4 = 0.001f * std::pow(1e+01f, 0.05f * float(fHslider2));
		int iSlow5 = int(float(fCheckbox1));
		float fSlow6 = 0.44f * std::pow(2.0f, 0.083333336f * (float(fHslider3) + -49.0f));
		int iSlow7 = int(float(fCheckbox2));
		float fSlow8 = 0.001f * float(fHslider4);
		int iSlow9 = int(float(fCheckbox3));
		float fSlow10 = float(fHslider5);
		float fSlow11 = 0.0001f * std::pow(4.0f, fSlow10);
		float fSlow12 = 0.001f * std::pow(1e+01f, 0.05f * float(fVslider0));
		int iSlow13 = int(float(fCheckbox4));
		int iSlow14 = int(float(fCheckbox5));
		int iSlow15 = int(float(fEntry0) + -1.0f);
		int iSlow16 = iSlow15 >= 2;
		int iSlow17 = iSlow15 >= 1;
		float fSlow18 = float(fVslider1);
		float fSlow19 = ((fSlow18 > 0.0f) ? std::exp(-(fConst15 / fSlow18)) : 0.0f);
		float fSlow20 = 4.4e+02f * std::pow(2.0f, 0.083333336f * (float(fVslider2) + -49.0f)) * (1.0f - fSlow19);
		int iSlow21 = iSlow15 >= 3;
		float fSlow22 = 0.01f * float(fVslider3) + 1.0f;
		float fSlow23 = 0.01f * float(fVslider4) + 1.0f;
		int iSlow24 = int(float(fCheckbox6));
		float fSlow25 = std::pow(2.0f, 2.3f * fSlow10);
		float fSlow26 = 1.0f - fConst19 * (fSlow25 / std::pow(2.0f, 2.0f * (1.0f - fSlow10) + 1.0f));
		float fSlow27 = 0.002f * fSlow26 * std::cos(fConst20 * fSlow25);
		float fSlow28 = 0.001f * mydsp_faustpower2_f(fSlow26);
		float fSlow29 = float(fHslider6);
		float fSlow30 = 4.0f * std::max<float>(0.0f, std::min<float>(mydsp_faustpower4_f(fSlow29), 0.999999f));
		int iSlow31 = int(float(fCheckbox7));
		float fSlow32 = std::min<float>(1.4127994f, 1.4142135f * fSlow29);
		float fSlow33 = 1.4142135f * fSlow32;
		float fSlow34 = mydsp_faustpower2_f(fSlow32);
		float fSlow35 = fSlow33 + fSlow34;
		float fSlow36 = fSlow33 + 2.0f;
		float fSlow37 = 2.0f - fSlow33;
		float fSlow38 = mydsp_faustpower2_f(1.4127994f * fSlow29);
		float fSlow39 = 1.998f * fSlow29;
		float fSlow40 = fSlow38 + fSlow39;
		float fSlow41 = fSlow39 + 2.0f;
		float fSlow42 = 2.0f - fSlow39;
		float fSlow43 = 1.0f - fSlow2;
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iVec0[0] = 1;
			fRec4[0] = fSlow4 + 0.999f * fRec4[1];
			fRec10[0] = fSlow6 + 0.999f * fRec10[1];
			float fTemp0 = fConst14 * fRec10[0];
			float fTemp1 = 1.0f - fTemp0;
			fRec16[0] = fSlow8 + 0.999f * fRec16[1];
			float fTemp2 = fConst14 * fRec16[0];
			float fTemp3 = 1.0f - fTemp2;
			fRec18[0] = fSlow11 + 0.999f * fRec18[1];
			fRec19[0] = fSlow12 + 0.999f * fRec19[1];
			fRec21[0] = fRec21[1] * fSlow19 + fSlow20;
			float fTemp4 = std::max<float>(2e+01f, std::fabs(fRec21[0]));
			float fTemp5 = fRec20[1] + fConst15 * fTemp4;
			fRec20[0] = fTemp5 - std::floor(fTemp5);
			float fTemp6 = 2.0f * fRec20[0];
			float fTemp7 = fTemp6 + -1.0f;
			float fTemp8 = float(iVec0[1]);
			float fTemp9 = mydsp_faustpower2_f(fTemp7);
			fVec1[0] = fTemp9;
			float fTemp10 = float(iVec0[2]);
			float fTemp11 = mydsp_faustpower3_f(fTemp7);
			fVec2[0] = fTemp11 + (1.0f - fTemp6);
			float fTemp12 = (fTemp11 + (1.0f - (fTemp6 + fVec2[1]))) / fTemp4;
			fVec3[0] = fTemp12;
			float fTemp13 = float(iVec0[3]);
			float fTemp14 = fTemp9 * (fTemp9 + -2.0f);
			fVec4[0] = fTemp14;
			float fTemp15 = (fTemp14 - fVec4[1]) / fTemp4;
			fVec5[0] = fTemp15;
			float fTemp16 = (fTemp15 - fVec5[1]) / fTemp4;
			fVec6[0] = fTemp16;
			float fTemp17 = std::max<float>(2e+01f, std::fabs(fSlow22 * fRec21[0]));
			float fTemp18 = fRec22[1] + fConst15 * fTemp17;
			fRec22[0] = fTemp18 - std::floor(fTemp18);
			float fTemp19 = 2.0f * fRec22[0];
			float fTemp20 = fTemp19 + -1.0f;
			float fTemp21 = mydsp_faustpower2_f(fTemp20);
			fVec7[0] = fTemp21;
			float fTemp22 = mydsp_faustpower3_f(fTemp20);
			fVec8[0] = fTemp22 + (1.0f - fTemp19);
			float fTemp23 = (fTemp22 + (1.0f - (fTemp19 + fVec8[1]))) / fTemp17;
			fVec9[0] = fTemp23;
			float fTemp24 = fTemp21 * (fTemp21 + -2.0f);
			fVec10[0] = fTemp24;
			float fTemp25 = (fTemp24 - fVec10[1]) / fTemp17;
			fVec11[0] = fTemp25;
			float fTemp26 = (fTemp25 - fVec11[1]) / fTemp17;
			fVec12[0] = fTemp26;
			float fTemp27 = std::max<float>(2e+01f, std::fabs(fSlow23 * fRec21[0]));
			float fTemp28 = fRec23[1] + fConst15 * fTemp27;
			fRec23[0] = fTemp28 - std::floor(fTemp28);
			float fTemp29 = 2.0f * fRec23[0];
			float fTemp30 = fTemp29 + -1.0f;
			float fTemp31 = mydsp_faustpower2_f(fTemp30);
			fVec13[0] = fTemp31;
			float fTemp32 = mydsp_faustpower3_f(fTemp30);
			fVec14[0] = fTemp32 + (1.0f - fTemp29);
			float fTemp33 = (fTemp32 + (1.0f - (fTemp29 + fVec14[1]))) / fTemp27;
			fVec15[0] = fTemp33;
			float fTemp34 = fTemp31 * (fTemp31 + -2.0f);
			fVec16[0] = fTemp34;
			float fTemp35 = (fTemp34 - fVec16[1]) / fTemp27;
			fVec17[0] = fTemp35;
			float fTemp36 = (fTemp35 - fVec17[1]) / fTemp27;
			fVec18[0] = fTemp36;
			iRec24[0] = 1103515245 * iRec24[1] + 12345;
			float fTemp37 = 4.656613e-10f * float(iRec24[0]);
			fRec25[0] = 0.5221894f * fRec25[3] + fTemp37 + 2.494956f * fRec25[1] - 2.0172658f * fRec25[2];
			float fTemp38 = fRec19[0] * ((iSlow13) ? float(input0[i0]) : ((iSlow14) ? ((iSlow24) ? 0.049922034f * fRec25[0] + 0.0506127f * fRec25[2] - (0.095993534f * fRec25[1] + 0.004408786f * fRec25[3]) : fTemp37) : 0.33333334f * fRec19[0] * (((iSlow16) ? ((iSlow21) ? fConst18 * (fTemp13 * (fTemp16 - fVec6[1]) / fTemp4) : fConst17 * (fTemp10 * (fTemp12 - fVec3[1]) / fTemp4)) : ((iSlow17) ? fConst16 * (fTemp8 * (fTemp9 - fVec1[1]) / fTemp4) : fTemp7)) + ((iSlow16) ? ((iSlow21) ? fConst18 * (fTemp13 * (fTemp26 - fVec12[1]) / fTemp17) : fConst17 * (fTemp10 * (fTemp23 - fVec9[1]) / fTemp17)) : ((iSlow17) ? fConst16 * (fTemp8 * (fTemp21 - fVec7[1]) / fTemp17) : fTemp20)) + ((iSlow16) ? ((iSlow21) ? fConst18 * (fTemp13 * (fTemp36 - fVec18[1]) / fTemp27) : fConst17 * (fTemp10 * (fTemp33 - fVec15[1]) / fTemp27)) : ((iSlow17) ? fConst16 * (fTemp8 * (fTemp31 - fVec13[1]) / fTemp27) : fTemp30)))));
			fRec26[0] = 0.999f * fRec26[1] - fSlow27;
			fRec27[0] = fSlow28 + 0.999f * fRec27[1];
			fRec17[0] = fRec18[0] * ((iSlow9) ? 0.0f : fTemp38) - (fRec26[0] * fRec17[1] + fRec27[0] * fRec17[2]);
			float fTemp39 = ((iSlow9) ? fTemp38 : fRec17[0] - fRec17[1]);
			fRec15[0] = fTemp3 * fRec15[1] + ((iSlow7) ? 0.0f : fTemp39) - 3.2f * fRec11[1];
			fRec14[0] = fRec15[0] + fTemp3 * fRec14[1];
			fRec13[0] = fRec14[0] + fTemp3 * fRec13[1];
			fRec12[0] = fRec13[0] + fRec12[1] * fTemp3;
			fRec11[0] = fRec12[0] * mydsp_faustpower4_f(fTemp2);
			float fTemp40 = ((iSlow7) ? fTemp39 : 4.0f * fRec11[0]);
			float fTemp41 = ((iSlow3) ? 0.0f : fTemp40);
			fRec9[0] = fTemp1 * fRec9[1] + fTemp41 - fSlow30 * fRec5[1];
			fRec8[0] = fRec9[0] + fTemp1 * fRec8[1];
			fRec7[0] = fRec8[0] + fTemp1 * fRec7[1];
			fRec6[0] = fRec7[0] + fRec6[1] * fTemp1;
			fRec5[0] = fRec6[0] * mydsp_faustpower4_f(fTemp0);
			float fTemp42 = std::tan(fConst21 * std::max<float>(2e+01f, std::min<float>(1e+04f, fRec10[0])));
			float fTemp43 = 1.0f / fTemp42;
			float fTemp44 = 1.0f - 1.0f / mydsp_faustpower2_f(fTemp42);
			float fTemp45 = fSlow35 + (fSlow36 + fTemp43) / fTemp42 + 1.0f;
			fRec29[0] = fTemp41 - (fRec29[2] * (fSlow35 + (fTemp43 - fSlow36) / fTemp42 + 1.0f) + 2.0f * fRec29[1] * (fSlow35 + fTemp44)) / fTemp45;
			float fTemp46 = fSlow34 + ((fSlow37 + fTemp43) / fTemp42 + 1.0f - fSlow33);
			fRec28[0] = (fRec29[2] + fRec29[0] + 2.0f * fRec29[1]) / fTemp45 - (fRec28[2] * (fSlow34 + ((fTemp43 - fSlow37) / fTemp42 + 1.0f - fSlow33)) + 2.0f * fRec28[1] * (fSlow34 + (fTemp44 - fSlow33))) / fTemp46;
			float fTemp47 = fRec28[2] + fRec28[0] + 2.0f * fRec28[1];
			float fTemp48 = std::tan(fConst21 * std::max<float>(fRec10[0], 2e+01f));
			float fTemp49 = 1.0f / fTemp48;
			float fTemp50 = fSlow40 + (fSlow41 + fTemp49) / fTemp48 + 1.0f;
			float fTemp51 = (fSlow40 + (1.0f - (fSlow41 - fTemp49) / fTemp48)) / fTemp50;
			float fTemp52 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp51));
			float fTemp53 = 1.0f - mydsp_faustpower2_f(fTemp52);
			float fTemp54 = std::sqrt(std::max<float>(0.0f, fTemp53));
			float fTemp55 = fTemp41 * fTemp54 - fTemp52 * fRec30[1];
			float fTemp56 = 1.0f - 1.0f / mydsp_faustpower2_f(fTemp48);
			float fTemp57 = fSlow40 + fTemp56;
			float fTemp58 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp57 / (fTemp50 * (fTemp51 + 1.0f)))));
			float fTemp59 = 1.0f - mydsp_faustpower2_f(fTemp58);
			float fTemp60 = std::sqrt(std::max<float>(0.0f, fTemp59));
			fRec32[0] = fTemp55 * fTemp60 - fTemp58 * fRec32[1];
			fRec30[0] = fTemp55 * fTemp58 + fRec32[1] * fTemp60;
			float fRec31 = fRec32[0];
			float fTemp61 = 1.0f - fTemp57 / fTemp50;
			float fTemp62 = std::sqrt(fTemp53);
			float fTemp63 = fTemp41 * fTemp52 + fRec30[1] * fTemp54 + 2.0f * (fRec30[0] * fTemp61 / fTemp62) + fRec31 * (1.0f - fTemp51 - 2.0f * fTemp58 * fTemp61) / (fTemp62 * std::sqrt(fTemp59));
			float fTemp64 = fSlow38 + ((fSlow42 + fTemp49) / fTemp48 + 1.0f - fSlow39);
			float fTemp65 = (fSlow38 + ((fTemp49 - fSlow42) / fTemp48 + 1.0f - fSlow39)) / fTemp64;
			float fTemp66 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp65));
			float fTemp67 = 1.0f - mydsp_faustpower2_f(fTemp66);
			float fTemp68 = std::sqrt(std::max<float>(0.0f, fTemp67));
			float fTemp69 = fTemp63 * fTemp68 / fTemp50 - fTemp66 * fRec33[1];
			float fTemp70 = fSlow38 + (fTemp56 - fSlow39);
			float fTemp71 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp70 / (fTemp64 * (fTemp65 + 1.0f)))));
			float fTemp72 = 1.0f - mydsp_faustpower2_f(fTemp71);
			float fTemp73 = std::sqrt(std::max<float>(0.0f, fTemp72));
			fRec35[0] = fTemp69 * fTemp73 - fTemp71 * fRec35[1];
			fRec33[0] = fTemp69 * fTemp71 + fRec35[1] * fTemp73;
			float fRec34 = fRec35[0];
			float fTemp74 = 1.0f - fTemp70 / fTemp64;
			float fTemp75 = std::sqrt(fTemp67);
			float fTemp76 = ((iSlow3) ? fTemp40 : fRec4[0] * ((iSlow5) ? ((iSlow31) ? (fTemp63 * fTemp66 / fTemp50 + fRec33[1] * fTemp68 + 2.0f * (fRec33[0] * fTemp74 / fTemp75) + fRec34 * (1.0f - fTemp65 - 2.0f * fTemp71 * fTemp74) / (fTemp75 * std::sqrt(fTemp72))) / fTemp64 : fTemp47 / fTemp46) : fRec5[0]));
			fRec3[0] = fTemp76 - fConst11 * (fConst22 * fRec3[2] + fConst24 * fRec3[1]);
			fRec2[0] = fConst11 * (fConst13 * fRec3[0] + fConst25 * fRec3[1] + fConst13 * fRec3[2]) - fConst8 * (fConst26 * fRec2[2] + fConst27 * fRec2[1]);
			fRec1[0] = fConst8 * (fConst10 * fRec2[0] + fConst28 * fRec2[1] + fConst10 * fRec2[2]) - fConst4 * (fConst29 * fRec1[2] + fConst30 * fRec1[1]);
			fRec0[0] = fRec0[1] * fSlow2 + std::fabs(fConst4 * (fConst7 * fRec1[0] + fConst31 * fRec1[1] + fConst7 * fRec1[2])) * fSlow43;
			fVbargraph0 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec0[0]));
			fRec42[0] = fTemp76 - fConst48 * (fConst51 * fRec42[2] + fConst52 * fRec42[1]);
			fRec41[0] = fConst48 * (fConst50 * fRec42[0] + fConst53 * fRec42[1] + fConst50 * fRec42[2]) - fConst46 * (fConst54 * fRec41[2] + fConst55 * fRec41[1]);
			fRec40[0] = fConst46 * (fConst47 * fRec41[0] + fConst56 * fRec41[1] + fConst47 * fRec41[2]) - fConst44 * (fConst57 * fRec40[2] + fConst58 * fRec40[1]);
			float fTemp77 = fConst44 * (fConst45 * fRec40[0] + fConst59 * fRec40[1] + fConst45 * fRec40[2]);
			fRec39[0] = fTemp77 - fConst41 * (fConst60 * fRec39[2] + fConst62 * fRec39[1]);
			fRec38[0] = fConst41 * (fConst43 * fRec39[0] + fConst63 * fRec39[1] + fConst43 * fRec39[2]) - fConst38 * (fConst64 * fRec38[2] + fConst65 * fRec38[1]);
			fRec37[0] = fConst38 * (fConst40 * fRec38[0] + fConst66 * fRec38[1] + fConst40 * fRec38[2]) - fConst34 * (fConst67 * fRec37[2] + fConst68 * fRec37[1]);
			fRec36[0] = fSlow2 * fRec36[1] + fSlow43 * std::fabs(fConst34 * (fConst37 * fRec37[0] + fConst69 * fRec37[1] + fConst37 * fRec37[2]));
			fVbargraph1 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec36[0]));
			fRec49[0] = fTemp77 - fConst86 * (fConst89 * fRec49[2] + fConst90 * fRec49[1]);
			fRec48[0] = fConst86 * (fConst88 * fRec49[0] + fConst91 * fRec49[1] + fConst88 * fRec49[2]) - fConst84 * (fConst92 * fRec48[2] + fConst93 * fRec48[1]);
			fRec47[0] = fConst84 * (fConst85 * fRec48[0] + fConst94 * fRec48[1] + fConst85 * fRec48[2]) - fConst82 * (fConst95 * fRec47[2] + fConst96 * fRec47[1]);
			float fTemp78 = fConst82 * (fConst83 * fRec47[0] + fConst97 * fRec47[1] + fConst83 * fRec47[2]);
			fRec46[0] = fTemp78 - fConst79 * (fConst98 * fRec46[2] + fConst100 * fRec46[1]);
			fRec45[0] = fConst79 * (fConst81 * fRec46[0] + fConst101 * fRec46[1] + fConst81 * fRec46[2]) - fConst76 * (fConst102 * fRec45[2] + fConst103 * fRec45[1]);
			fRec44[0] = fConst76 * (fConst78 * fRec45[0] + fConst104 * fRec45[1] + fConst78 * fRec45[2]) - fConst72 * (fConst105 * fRec44[2] + fConst106 * fRec44[1]);
			fRec43[0] = fSlow2 * fRec43[1] + fSlow43 * std::fabs(fConst72 * (fConst75 * fRec44[0] + fConst107 * fRec44[1] + fConst75 * fRec44[2]));
			fVbargraph2 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec43[0]));
			fRec56[0] = fTemp78 - fConst124 * (fConst127 * fRec56[2] + fConst128 * fRec56[1]);
			fRec55[0] = fConst124 * (fConst126 * fRec56[0] + fConst129 * fRec56[1] + fConst126 * fRec56[2]) - fConst122 * (fConst130 * fRec55[2] + fConst131 * fRec55[1]);
			fRec54[0] = fConst122 * (fConst123 * fRec55[0] + fConst132 * fRec55[1] + fConst123 * fRec55[2]) - fConst120 * (fConst133 * fRec54[2] + fConst134 * fRec54[1]);
			float fTemp79 = fConst120 * (fConst121 * fRec54[0] + fConst135 * fRec54[1] + fConst121 * fRec54[2]);
			fRec53[0] = fTemp79 - fConst117 * (fConst136 * fRec53[2] + fConst138 * fRec53[1]);
			fRec52[0] = fConst117 * (fConst119 * fRec53[0] + fConst139 * fRec53[1] + fConst119 * fRec53[2]) - fConst114 * (fConst140 * fRec52[2] + fConst141 * fRec52[1]);
			fRec51[0] = fConst114 * (fConst116 * fRec52[0] + fConst142 * fRec52[1] + fConst116 * fRec52[2]) - fConst110 * (fConst143 * fRec51[2] + fConst144 * fRec51[1]);
			fRec50[0] = fSlow2 * fRec50[1] + fSlow43 * std::fabs(fConst110 * (fConst113 * fRec51[0] + fConst145 * fRec51[1] + fConst113 * fRec51[2]));
			fVbargraph3 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec50[0]));
			fRec63[0] = fTemp79 - fConst162 * (fConst165 * fRec63[2] + fConst166 * fRec63[1]);
			fRec62[0] = fConst162 * (fConst164 * fRec63[0] + fConst167 * fRec63[1] + fConst164 * fRec63[2]) - fConst160 * (fConst168 * fRec62[2] + fConst169 * fRec62[1]);
			fRec61[0] = fConst160 * (fConst161 * fRec62[0] + fConst170 * fRec62[1] + fConst161 * fRec62[2]) - fConst158 * (fConst171 * fRec61[2] + fConst172 * fRec61[1]);
			float fTemp80 = fConst158 * (fConst159 * fRec61[0] + fConst173 * fRec61[1] + fConst159 * fRec61[2]);
			fRec60[0] = fTemp80 - fConst155 * (fConst174 * fRec60[2] + fConst176 * fRec60[1]);
			fRec59[0] = fConst155 * (fConst157 * fRec60[0] + fConst177 * fRec60[1] + fConst157 * fRec60[2]) - fConst152 * (fConst178 * fRec59[2] + fConst179 * fRec59[1]);
			fRec58[0] = fConst152 * (fConst154 * fRec59[0] + fConst180 * fRec59[1] + fConst154 * fRec59[2]) - fConst148 * (fConst181 * fRec58[2] + fConst182 * fRec58[1]);
			fRec57[0] = fSlow2 * fRec57[1] + fSlow43 * std::fabs(fConst148 * (fConst151 * fRec58[0] + fConst183 * fRec58[1] + fConst151 * fRec58[2]));
			fVbargraph4 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec57[0]));
			fRec70[0] = fTemp80 - fConst200 * (fConst203 * fRec70[2] + fConst204 * fRec70[1]);
			fRec69[0] = fConst200 * (fConst202 * fRec70[0] + fConst205 * fRec70[1] + fConst202 * fRec70[2]) - fConst198 * (fConst206 * fRec69[2] + fConst207 * fRec69[1]);
			fRec68[0] = fConst198 * (fConst199 * fRec69[0] + fConst208 * fRec69[1] + fConst199 * fRec69[2]) - fConst196 * (fConst209 * fRec68[2] + fConst210 * fRec68[1]);
			float fTemp81 = fConst196 * (fConst197 * fRec68[0] + fConst211 * fRec68[1] + fConst197 * fRec68[2]);
			fRec67[0] = fTemp81 - fConst193 * (fConst212 * fRec67[2] + fConst214 * fRec67[1]);
			fRec66[0] = fConst193 * (fConst195 * fRec67[0] + fConst215 * fRec67[1] + fConst195 * fRec67[2]) - fConst190 * (fConst216 * fRec66[2] + fConst217 * fRec66[1]);
			fRec65[0] = fConst190 * (fConst192 * fRec66[0] + fConst218 * fRec66[1] + fConst192 * fRec66[2]) - fConst186 * (fConst219 * fRec65[2] + fConst220 * fRec65[1]);
			fRec64[0] = fSlow2 * fRec64[1] + fSlow43 * std::fabs(fConst186 * (fConst189 * fRec65[0] + fConst221 * fRec65[1] + fConst189 * fRec65[2]));
			fVbargraph5 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec64[0]));
			fRec77[0] = fTemp81 - fConst238 * (fConst241 * fRec77[2] + fConst242 * fRec77[1]);
			fRec76[0] = fConst238 * (fConst240 * fRec77[0] + fConst243 * fRec77[1] + fConst240 * fRec77[2]) - fConst236 * (fConst244 * fRec76[2] + fConst245 * fRec76[1]);
			fRec75[0] = fConst236 * (fConst237 * fRec76[0] + fConst246 * fRec76[1] + fConst237 * fRec76[2]) - fConst234 * (fConst247 * fRec75[2] + fConst248 * fRec75[1]);
			float fTemp82 = fConst234 * (fConst235 * fRec75[0] + fConst249 * fRec75[1] + fConst235 * fRec75[2]);
			fRec74[0] = fTemp82 - fConst231 * (fConst250 * fRec74[2] + fConst252 * fRec74[1]);
			fRec73[0] = fConst231 * (fConst233 * fRec74[0] + fConst253 * fRec74[1] + fConst233 * fRec74[2]) - fConst228 * (fConst254 * fRec73[2] + fConst255 * fRec73[1]);
			fRec72[0] = fConst228 * (fConst230 * fRec73[0] + fConst256 * fRec73[1] + fConst230 * fRec73[2]) - fConst224 * (fConst257 * fRec72[2] + fConst258 * fRec72[1]);
			fRec71[0] = fSlow2 * fRec71[1] + fSlow43 * std::fabs(fConst224 * (fConst227 * fRec72[0] + fConst259 * fRec72[1] + fConst227 * fRec72[2]));
			fVbargraph6 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec71[0]));
			fRec84[0] = fTemp82 - fConst276 * (fConst279 * fRec84[2] + fConst280 * fRec84[1]);
			fRec83[0] = fConst276 * (fConst278 * fRec84[0] + fConst281 * fRec84[1] + fConst278 * fRec84[2]) - fConst274 * (fConst282 * fRec83[2] + fConst283 * fRec83[1]);
			fRec82[0] = fConst274 * (fConst275 * fRec83[0] + fConst284 * fRec83[1] + fConst275 * fRec83[2]) - fConst272 * (fConst285 * fRec82[2] + fConst286 * fRec82[1]);
			float fTemp83 = fConst272 * (fConst273 * fRec82[0] + fConst287 * fRec82[1] + fConst273 * fRec82[2]);
			fRec81[0] = fTemp83 - fConst269 * (fConst288 * fRec81[2] + fConst290 * fRec81[1]);
			fRec80[0] = fConst269 * (fConst271 * fRec81[0] + fConst291 * fRec81[1] + fConst271 * fRec81[2]) - fConst266 * (fConst292 * fRec80[2] + fConst293 * fRec80[1]);
			fRec79[0] = fConst266 * (fConst268 * fRec80[0] + fConst294 * fRec80[1] + fConst268 * fRec80[2]) - fConst262 * (fConst295 * fRec79[2] + fConst296 * fRec79[1]);
			fRec78[0] = fSlow2 * fRec78[1] + fSlow43 * std::fabs(fConst262 * (fConst265 * fRec79[0] + fConst297 * fRec79[1] + fConst265 * fRec79[2]));
			fVbargraph7 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec78[0]));
			fRec91[0] = fTemp83 - fConst314 * (fConst317 * fRec91[2] + fConst318 * fRec91[1]);
			fRec90[0] = fConst314 * (fConst316 * fRec91[0] + fConst319 * fRec91[1] + fConst316 * fRec91[2]) - fConst312 * (fConst320 * fRec90[2] + fConst321 * fRec90[1]);
			fRec89[0] = fConst312 * (fConst313 * fRec90[0] + fConst322 * fRec90[1] + fConst313 * fRec90[2]) - fConst310 * (fConst323 * fRec89[2] + fConst324 * fRec89[1]);
			float fTemp84 = fConst310 * (fConst311 * fRec89[0] + fConst325 * fRec89[1] + fConst311 * fRec89[2]);
			fRec88[0] = fTemp84 - fConst307 * (fConst326 * fRec88[2] + fConst328 * fRec88[1]);
			fRec87[0] = fConst307 * (fConst309 * fRec88[0] + fConst329 * fRec88[1] + fConst309 * fRec88[2]) - fConst304 * (fConst330 * fRec87[2] + fConst331 * fRec87[1]);
			fRec86[0] = fConst304 * (fConst306 * fRec87[0] + fConst332 * fRec87[1] + fConst306 * fRec87[2]) - fConst300 * (fConst333 * fRec86[2] + fConst334 * fRec86[1]);
			fRec85[0] = fSlow2 * fRec85[1] + fSlow43 * std::fabs(fConst300 * (fConst303 * fRec86[0] + fConst335 * fRec86[1] + fConst303 * fRec86[2]));
			fVbargraph8 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec85[0]));
			fRec98[0] = fTemp84 - fConst352 * (fConst355 * fRec98[2] + fConst356 * fRec98[1]);
			fRec97[0] = fConst352 * (fConst354 * fRec98[0] + fConst357 * fRec98[1] + fConst354 * fRec98[2]) - fConst350 * (fConst358 * fRec97[2] + fConst359 * fRec97[1]);
			fRec96[0] = fConst350 * (fConst351 * fRec97[0] + fConst360 * fRec97[1] + fConst351 * fRec97[2]) - fConst348 * (fConst361 * fRec96[2] + fConst362 * fRec96[1]);
			float fTemp85 = fConst348 * (fConst349 * fRec96[0] + fConst363 * fRec96[1] + fConst349 * fRec96[2]);
			fRec95[0] = fTemp85 - fConst345 * (fConst364 * fRec95[2] + fConst366 * fRec95[1]);
			fRec94[0] = fConst345 * (fConst347 * fRec95[0] + fConst367 * fRec95[1] + fConst347 * fRec95[2]) - fConst342 * (fConst368 * fRec94[2] + fConst369 * fRec94[1]);
			fRec93[0] = fConst342 * (fConst344 * fRec94[0] + fConst370 * fRec94[1] + fConst344 * fRec94[2]) - fConst338 * (fConst371 * fRec93[2] + fConst372 * fRec93[1]);
			fRec92[0] = fSlow2 * fRec92[1] + fSlow43 * std::fabs(fConst338 * (fConst341 * fRec93[0] + fConst373 * fRec93[1] + fConst341 * fRec93[2]));
			fVbargraph9 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec92[0]));
			fRec105[0] = fTemp85 - fConst390 * (fConst393 * fRec105[2] + fConst394 * fRec105[1]);
			fRec104[0] = fConst390 * (fConst392 * fRec105[0] + fConst395 * fRec105[1] + fConst392 * fRec105[2]) - fConst388 * (fConst396 * fRec104[2] + fConst397 * fRec104[1]);
			fRec103[0] = fConst388 * (fConst389 * fRec104[0] + fConst398 * fRec104[1] + fConst389 * fRec104[2]) - fConst386 * (fConst399 * fRec103[2] + fConst400 * fRec103[1]);
			float fTemp86 = fConst386 * (fConst387 * fRec103[0] + fConst401 * fRec103[1] + fConst387 * fRec103[2]);
			fRec102[0] = fTemp86 - fConst383 * (fConst402 * fRec102[2] + fConst404 * fRec102[1]);
			fRec101[0] = fConst383 * (fConst385 * fRec102[0] + fConst405 * fRec102[1] + fConst385 * fRec102[2]) - fConst380 * (fConst406 * fRec101[2] + fConst407 * fRec101[1]);
			fRec100[0] = fConst380 * (fConst382 * fRec101[0] + fConst408 * fRec101[1] + fConst382 * fRec101[2]) - fConst376 * (fConst409 * fRec100[2] + fConst410 * fRec100[1]);
			fRec99[0] = fSlow2 * fRec99[1] + fSlow43 * std::fabs(fConst376 * (fConst379 * fRec100[0] + fConst411 * fRec100[1] + fConst379 * fRec100[2]));
			fVbargraph10 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec99[0]));
			fRec112[0] = fTemp86 - fConst428 * (fConst431 * fRec112[2] + fConst432 * fRec112[1]);
			fRec111[0] = fConst428 * (fConst430 * fRec112[0] + fConst433 * fRec112[1] + fConst430 * fRec112[2]) - fConst426 * (fConst434 * fRec111[2] + fConst435 * fRec111[1]);
			fRec110[0] = fConst426 * (fConst427 * fRec111[0] + fConst436 * fRec111[1] + fConst427 * fRec111[2]) - fConst424 * (fConst437 * fRec110[2] + fConst438 * fRec110[1]);
			float fTemp87 = fConst424 * (fConst425 * fRec110[0] + fConst439 * fRec110[1] + fConst425 * fRec110[2]);
			fRec109[0] = fTemp87 - fConst421 * (fConst440 * fRec109[2] + fConst442 * fRec109[1]);
			fRec108[0] = fConst421 * (fConst423 * fRec109[0] + fConst443 * fRec109[1] + fConst423 * fRec109[2]) - fConst418 * (fConst444 * fRec108[2] + fConst445 * fRec108[1]);
			fRec107[0] = fConst418 * (fConst420 * fRec108[0] + fConst446 * fRec108[1] + fConst420 * fRec108[2]) - fConst414 * (fConst447 * fRec107[2] + fConst448 * fRec107[1]);
			fRec106[0] = fSlow2 * fRec106[1] + fSlow43 * std::fabs(fConst414 * (fConst417 * fRec107[0] + fConst449 * fRec107[1] + fConst417 * fRec107[2]));
			fVbargraph11 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec106[0]));
			fRec119[0] = fTemp87 - fConst466 * (fConst469 * fRec119[2] + fConst470 * fRec119[1]);
			fRec118[0] = fConst466 * (fConst468 * fRec119[0] + fConst471 * fRec119[1] + fConst468 * fRec119[2]) - fConst464 * (fConst472 * fRec118[2] + fConst473 * fRec118[1]);
			fRec117[0] = fConst464 * (fConst465 * fRec118[0] + fConst474 * fRec118[1] + fConst465 * fRec118[2]) - fConst462 * (fConst475 * fRec117[2] + fConst476 * fRec117[1]);
			float fTemp88 = fConst462 * (fConst463 * fRec117[0] + fConst477 * fRec117[1] + fConst463 * fRec117[2]);
			fRec116[0] = fTemp88 - fConst459 * (fConst478 * fRec116[2] + fConst480 * fRec116[1]);
			fRec115[0] = fConst459 * (fConst461 * fRec116[0] + fConst481 * fRec116[1] + fConst461 * fRec116[2]) - fConst456 * (fConst482 * fRec115[2] + fConst483 * fRec115[1]);
			fRec114[0] = fConst456 * (fConst458 * fRec115[0] + fConst484 * fRec115[1] + fConst458 * fRec115[2]) - fConst452 * (fConst485 * fRec114[2] + fConst486 * fRec114[1]);
			fRec113[0] = fSlow2 * fRec113[1] + fSlow43 * std::fabs(fConst452 * (fConst455 * fRec114[0] + fConst487 * fRec114[1] + fConst455 * fRec114[2]));
			fVbargraph12 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec113[0]));
			fRec126[0] = fTemp88 - fConst504 * (fConst507 * fRec126[2] + fConst508 * fRec126[1]);
			fRec125[0] = fConst504 * (fConst506 * fRec126[0] + fConst509 * fRec126[1] + fConst506 * fRec126[2]) - fConst502 * (fConst510 * fRec125[2] + fConst511 * fRec125[1]);
			fRec124[0] = fConst502 * (fConst503 * fRec125[0] + fConst512 * fRec125[1] + fConst503 * fRec125[2]) - fConst500 * (fConst513 * fRec124[2] + fConst514 * fRec124[1]);
			float fTemp89 = fConst500 * (fConst501 * fRec124[0] + fConst515 * fRec124[1] + fConst501 * fRec124[2]);
			fRec123[0] = fTemp89 - fConst497 * (fConst516 * fRec123[2] + fConst518 * fRec123[1]);
			fRec122[0] = fConst497 * (fConst499 * fRec123[0] + fConst519 * fRec123[1] + fConst499 * fRec123[2]) - fConst494 * (fConst520 * fRec122[2] + fConst521 * fRec122[1]);
			fRec121[0] = fConst494 * (fConst496 * fRec122[0] + fConst522 * fRec122[1] + fConst496 * fRec122[2]) - fConst490 * (fConst523 * fRec121[2] + fConst524 * fRec121[1]);
			fRec120[0] = fSlow2 * fRec120[1] + fSlow43 * std::fabs(fConst490 * (fConst493 * fRec121[0] + fConst525 * fRec121[1] + fConst493 * fRec121[2]));
			fVbargraph13 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec120[0]));
			fRec130[0] = fTemp89 - fConst530 * (fConst533 * fRec130[2] + fConst534 * fRec130[1]);
			fRec129[0] = fConst530 * (fConst532 * fRec130[0] + fConst535 * fRec130[1] + fConst532 * fRec130[2]) - fConst528 * (fConst536 * fRec129[2] + fConst537 * fRec129[1]);
			fRec128[0] = fConst528 * (fConst529 * fRec129[0] + fConst538 * fRec129[1] + fConst529 * fRec129[2]) - fConst526 * (fConst539 * fRec128[2] + fConst540 * fRec128[1]);
			fRec127[0] = fSlow2 * fRec127[1] + fSlow43 * std::fabs(fConst526 * (fConst527 * fRec128[0] + fConst541 * fRec128[1] + fConst527 * fRec128[2]));
			fVbargraph14 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec127[0]));
			float fTemp90 = fTemp49 + 2.0f;
			float fTemp91 = fSlow40 + (fSlow39 + fTemp90) / fTemp48 + 1.0f;
			float fTemp92 = (fSlow40 + (1.0f - (fSlow39 + (2.0f - fTemp49)) / fTemp48)) / fTemp91;
			float fTemp93 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp92));
			float fTemp94 = 1.0f - mydsp_faustpower2_f(fTemp93);
			float fTemp95 = 1.0f - fTemp57 / fTemp91;
			float fTemp96 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp57 / (fTemp91 * (fTemp92 + 1.0f)))));
			float fTemp97 = fSlow38 + ((fTemp90 - fSlow39) / fTemp48 + 1.0f - fSlow39);
			float fTemp98 = (fSlow38 + ((fSlow39 + fTemp49 + -2.0f) / fTemp48 + 1.0f - fSlow39)) / fTemp97;
			float fTemp99 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp98));
			float fTemp100 = 1.0f - mydsp_faustpower2_f(fTemp99);
			float fTemp101 = 1.0f - fTemp70 / fTemp97;
			float fTemp102 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp70 / (fTemp97 * (fTemp98 + 1.0f)))));
			float fTemp103 = ((iSlow3) ? fTemp40 : fRec4[0] * ((iSlow5) ? ((iSlow31) ? ((fTemp41 * fTemp93 + fRec30[1] * std::sqrt(std::max<float>(0.0f, fTemp94)) + (fRec31 * (1.0f - (fTemp92 + 2.0f * fTemp95 * fTemp96)) / std::sqrt(1.0f - mydsp_faustpower2_f(fTemp96)) + 2.0f * fRec30[0] * fTemp95) / std::sqrt(fTemp94)) * fTemp99 / fTemp91 + fRec33[1] * std::sqrt(std::max<float>(0.0f, fTemp100)) + (fRec34 * (1.0f - (fTemp98 + 2.0f * fTemp101 * fTemp102)) / std::sqrt(1.0f - mydsp_faustpower2_f(fTemp102)) + 2.0f * fRec33[0] * fTemp101) / std::sqrt(fTemp100)) / fTemp97 : fTemp47 / (fSlow34 + ((fTemp43 + 2.0f - fSlow33) / fTemp42 + 1.0f - fSlow33))) : fRec5[0]));
			output0[i0] = FAUSTFLOAT(fTemp103);
			output1[i0] = FAUSTFLOAT(fTemp103);
			for (int j0 = 3; j0 > 0; j0 = j0 - 1) {
				iVec0[j0] = iVec0[j0 - 1];
			}
			fRec4[1] = fRec4[0];
			fRec10[1] = fRec10[0];
			fRec16[1] = fRec16[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec21[1] = fRec21[0];
			fRec20[1] = fRec20[0];
			fVec1[1] = fVec1[0];
			fVec2[1] = fVec2[0];
			fVec3[1] = fVec3[0];
			fVec4[1] = fVec4[0];
			fVec5[1] = fVec5[0];
			fVec6[1] = fVec6[0];
			fRec22[1] = fRec22[0];
			fVec7[1] = fVec7[0];
			fVec8[1] = fVec8[0];
			fVec9[1] = fVec9[0];
			fVec10[1] = fVec10[0];
			fVec11[1] = fVec11[0];
			fVec12[1] = fVec12[0];
			fRec23[1] = fRec23[0];
			fVec13[1] = fVec13[0];
			fVec14[1] = fVec14[0];
			fVec15[1] = fVec15[0];
			fVec16[1] = fVec16[0];
			fVec17[1] = fVec17[0];
			fVec18[1] = fVec18[0];
			iRec24[1] = iRec24[0];
			for (int j1 = 3; j1 > 0; j1 = j1 - 1) {
				fRec25[j1] = fRec25[j1 - 1];
			}
			fRec26[1] = fRec26[0];
			fRec27[1] = fRec27[0];
			fRec17[2] = fRec17[1];
			fRec17[1] = fRec17[0];
			fRec15[1] = fRec15[0];
			fRec14[1] = fRec14[0];
			fRec13[1] = fRec13[0];
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			fRec29[2] = fRec29[1];
			fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1];
			fRec28[1] = fRec28[0];
			fRec32[1] = fRec32[0];
			fRec30[1] = fRec30[0];
			fRec35[1] = fRec35[0];
			fRec33[1] = fRec33[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[1] = fRec0[0];
			fRec42[2] = fRec42[1];
			fRec42[1] = fRec42[0];
			fRec41[2] = fRec41[1];
			fRec41[1] = fRec41[0];
			fRec40[2] = fRec40[1];
			fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1];
			fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1];
			fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1];
			fRec37[1] = fRec37[0];
			fRec36[1] = fRec36[0];
			fRec49[2] = fRec49[1];
			fRec49[1] = fRec49[0];
			fRec48[2] = fRec48[1];
			fRec48[1] = fRec48[0];
			fRec47[2] = fRec47[1];
			fRec47[1] = fRec47[0];
			fRec46[2] = fRec46[1];
			fRec46[1] = fRec46[0];
			fRec45[2] = fRec45[1];
			fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1];
			fRec44[1] = fRec44[0];
			fRec43[1] = fRec43[0];
			fRec56[2] = fRec56[1];
			fRec56[1] = fRec56[0];
			fRec55[2] = fRec55[1];
			fRec55[1] = fRec55[0];
			fRec54[2] = fRec54[1];
			fRec54[1] = fRec54[0];
			fRec53[2] = fRec53[1];
			fRec53[1] = fRec53[0];
			fRec52[2] = fRec52[1];
			fRec52[1] = fRec52[0];
			fRec51[2] = fRec51[1];
			fRec51[1] = fRec51[0];
			fRec50[1] = fRec50[0];
			fRec63[2] = fRec63[1];
			fRec63[1] = fRec63[0];
			fRec62[2] = fRec62[1];
			fRec62[1] = fRec62[0];
			fRec61[2] = fRec61[1];
			fRec61[1] = fRec61[0];
			fRec60[2] = fRec60[1];
			fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1];
			fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1];
			fRec58[1] = fRec58[0];
			fRec57[1] = fRec57[0];
			fRec70[2] = fRec70[1];
			fRec70[1] = fRec70[0];
			fRec69[2] = fRec69[1];
			fRec69[1] = fRec69[0];
			fRec68[2] = fRec68[1];
			fRec68[1] = fRec68[0];
			fRec67[2] = fRec67[1];
			fRec67[1] = fRec67[0];
			fRec66[2] = fRec66[1];
			fRec66[1] = fRec66[0];
			fRec65[2] = fRec65[1];
			fRec65[1] = fRec65[0];
			fRec64[1] = fRec64[0];
			fRec77[2] = fRec77[1];
			fRec77[1] = fRec77[0];
			fRec76[2] = fRec76[1];
			fRec76[1] = fRec76[0];
			fRec75[2] = fRec75[1];
			fRec75[1] = fRec75[0];
			fRec74[2] = fRec74[1];
			fRec74[1] = fRec74[0];
			fRec73[2] = fRec73[1];
			fRec73[1] = fRec73[0];
			fRec72[2] = fRec72[1];
			fRec72[1] = fRec72[0];
			fRec71[1] = fRec71[0];
			fRec84[2] = fRec84[1];
			fRec84[1] = fRec84[0];
			fRec83[2] = fRec83[1];
			fRec83[1] = fRec83[0];
			fRec82[2] = fRec82[1];
			fRec82[1] = fRec82[0];
			fRec81[2] = fRec81[1];
			fRec81[1] = fRec81[0];
			fRec80[2] = fRec80[1];
			fRec80[1] = fRec80[0];
			fRec79[2] = fRec79[1];
			fRec79[1] = fRec79[0];
			fRec78[1] = fRec78[0];
			fRec91[2] = fRec91[1];
			fRec91[1] = fRec91[0];
			fRec90[2] = fRec90[1];
			fRec90[1] = fRec90[0];
			fRec89[2] = fRec89[1];
			fRec89[1] = fRec89[0];
			fRec88[2] = fRec88[1];
			fRec88[1] = fRec88[0];
			fRec87[2] = fRec87[1];
			fRec87[1] = fRec87[0];
			fRec86[2] = fRec86[1];
			fRec86[1] = fRec86[0];
			fRec85[1] = fRec85[0];
			fRec98[2] = fRec98[1];
			fRec98[1] = fRec98[0];
			fRec97[2] = fRec97[1];
			fRec97[1] = fRec97[0];
			fRec96[2] = fRec96[1];
			fRec96[1] = fRec96[0];
			fRec95[2] = fRec95[1];
			fRec95[1] = fRec95[0];
			fRec94[2] = fRec94[1];
			fRec94[1] = fRec94[0];
			fRec93[2] = fRec93[1];
			fRec93[1] = fRec93[0];
			fRec92[1] = fRec92[0];
			fRec105[2] = fRec105[1];
			fRec105[1] = fRec105[0];
			fRec104[2] = fRec104[1];
			fRec104[1] = fRec104[0];
			fRec103[2] = fRec103[1];
			fRec103[1] = fRec103[0];
			fRec102[2] = fRec102[1];
			fRec102[1] = fRec102[0];
			fRec101[2] = fRec101[1];
			fRec101[1] = fRec101[0];
			fRec100[2] = fRec100[1];
			fRec100[1] = fRec100[0];
			fRec99[1] = fRec99[0];
			fRec112[2] = fRec112[1];
			fRec112[1] = fRec112[0];
			fRec111[2] = fRec111[1];
			fRec111[1] = fRec111[0];
			fRec110[2] = fRec110[1];
			fRec110[1] = fRec110[0];
			fRec109[2] = fRec109[1];
			fRec109[1] = fRec109[0];
			fRec108[2] = fRec108[1];
			fRec108[1] = fRec108[0];
			fRec107[2] = fRec107[1];
			fRec107[1] = fRec107[0];
			fRec106[1] = fRec106[0];
			fRec119[2] = fRec119[1];
			fRec119[1] = fRec119[0];
			fRec118[2] = fRec118[1];
			fRec118[1] = fRec118[0];
			fRec117[2] = fRec117[1];
			fRec117[1] = fRec117[0];
			fRec116[2] = fRec116[1];
			fRec116[1] = fRec116[0];
			fRec115[2] = fRec115[1];
			fRec115[1] = fRec115[0];
			fRec114[2] = fRec114[1];
			fRec114[1] = fRec114[0];
			fRec113[1] = fRec113[0];
			fRec126[2] = fRec126[1];
			fRec126[1] = fRec126[0];
			fRec125[2] = fRec125[1];
			fRec125[1] = fRec125[0];
			fRec124[2] = fRec124[1];
			fRec124[1] = fRec124[0];
			fRec123[2] = fRec123[1];
			fRec123[1] = fRec123[0];
			fRec122[2] = fRec122[1];
			fRec122[1] = fRec122[0];
			fRec121[2] = fRec121[1];
			fRec121[1] = fRec121[0];
			fRec120[1] = fRec120[0];
			fRec130[2] = fRec130[1];
			fRec130[1] = fRec130[0];
			fRec129[2] = fRec129[1];
			fRec129[1] = fRec129[0];
			fRec128[2] = fRec128[1];
			fRec128[1] = fRec128[0];
			fRec127[1] = fRec127[0];
		}
	}

};

#endif
