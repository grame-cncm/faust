//----------------------------------------------------------
// name: "vcf_wah_pedals"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec10SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec15SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec15SEState; // Single Delay
	float 	fVec17SEState; // Single Delay
	float 	fVec18SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec22SEState; // Single Delay
	float 	fVec24SEState; // Single Delay
	float 	fVec26SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec27SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec27SEState; // Single Delay
	float 	fVec29SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	float 	fVec31SEState; // Single Delay
	float 	fVec33SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec36SEState; // Single Delay
	float 	fVec38SEState; // Single Delay
	// Recursion delay iVec39SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec39SIState; // Single Delay
	// Recursion delay fVec42SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec42SIState; // Single Delay
	float 	fVec41SIState[3]; // Copy Delay
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec45SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec45SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider5;
	// Recursion delay fVec47SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec47SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 243
	float 	fConst3KI; // step: 256
	float 	fConst4KI; // step: 271
	FAUSTFLOAT 	fcheckbox3;
	float 	fConst5KI; // step: 362
	float 	fConst6KI; // step: 366
	// Recursion delay fVec66SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec66SEState; // Single Delay
	// Recursion delay fVec69SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec69SEState; // Single Delay
	// Recursion delay fVec68SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec68SEState; // Single Delay
	float 	fVec71SEState[2]; // Copy Delay
	FAUSTFLOAT 	fcheckbox4;
	FAUSTFLOAT 	fcheckbox5;
	float 	fConst7KI; // step: 410
	FAUSTFLOAT 	fslider6;
	// Recursion delay fVec75SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec75SEState; // Single Delay
	// Recursion delay fVec77SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec77SEState; // Single Delay
	// Recursion delay fVec80SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec80SEState; // Single Delay
	// Recursion delay fVec82SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec82SEState; // Single Delay
	// Recursion delay fVec84SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec84SEState; // Single Delay
	// Recursion delay fVec78SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec78SEState; // Single Delay
	FAUSTFLOAT 	fslider7;
	float 	fConst8KI; // step: 470
	FAUSTFLOAT 	fslider8;
	// Recursion delay fVec87SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec87SEState; // Single Delay
	// Recursion delay fVec89SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec89SEState; // Single Delay
	float 	fVec90SEState[2]; // Copy Delay
	// Recursion delay fVec95SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec95SEState; // Single Delay
	float 	fVec94SEState[2]; // Copy Delay
	// Recursion delay fVec98SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec98SEState; // Single Delay
	float 	fVec99SEState; // Single Delay
	// Recursion delay fVec97SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec97SEState; // Single Delay
	float 	fVec101SEState; // Single Delay
	// Recursion delay fRec22SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	// Recursion delay fVec107SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec107SEState; // Single Delay
	float 	fVec108SEState; // Single Delay
	// Recursion delay fVec106SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec106SEState; // Single Delay
	float 	fVec110SEState; // Single Delay
	FAUSTFLOAT 	fslider9;
	// Recursion delay fVec111SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec111SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox6;
	// Recursion delay fVec113SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec113SEState; // Single Delay
	// Recursion delay fVec116SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec116SEState; // Single Delay
	// Recursion delay fVec118SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec118SEState; // Single Delay
	// Recursion delay fVec120SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec120SEState; // Single Delay
	// Recursion delay fVec114SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec114SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox7;
	// Recursion delay fRec31SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst9KI; // step: 786
	float 	fConst10KI; // step: 788
	float 	fConst11KI; // step: 792
	float 	fConst12KI; // step: 796
	float 	fConst13KI; // step: 799
	float 	fConst14KI; // step: 800
	float 	fConst15KI; // step: 803
	// Recursion delay fVec130SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec130SEState; // Single Delay
	float 	fVec129SEState[2]; // Copy Delay
	float 	fConst16KI; // step: 815
	float 	fConst17KI; // step: 816
	float 	fConst18KI; // step: 821
	float 	fConst19KI; // step: 832
	float 	fConst20KI; // step: 836
	float 	fConst21KI; // step: 840
	// Recursion delay fVec135SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec135SEState; // Single Delay
	float 	fVec134SEState[2]; // Copy Delay
	float 	fConst22KI; // step: 851
	float 	fConst23KI; // step: 852
	float 	fConst24KI; // step: 857
	float 	fConst25KI; // step: 868
	float 	fConst26KI; // step: 872
	float 	fConst27KI; // step: 876
	// Recursion delay fVec140SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec140SEState; // Single Delay
	float 	fVec139SEState[2]; // Copy Delay
	float 	fConst28KI; // step: 891
	float 	fConst29KI; // step: 895
	float 	fConst30KI; // step: 899
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec142SEState[2]; // Copy Delay
	float 	fConst31KI; // step: 911
	float 	fConst32KI; // step: 912
	float 	fConst33KI; // step: 917
	float 	fConst34KI; // step: 928
	float 	fConst35KI; // step: 932
	float 	fConst36KI; // step: 936
	// Recursion delay fVec148SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec148SEState; // Single Delay
	float 	fVec147SEState[2]; // Copy Delay
	float 	fConst37KI; // step: 947
	float 	fConst38KI; // step: 951
	float 	fConst39KI; // step: 962
	float 	fConst40KI; // step: 966
	float 	fConst41KI; // step: 970
	// Recursion delay fVec153SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec153SEState; // Single Delay
	float 	fVec152SEState[2]; // Copy Delay
	float 	fConst42KI; // step: 981
	float 	fConst43KI; // step: 985
	float 	fConst44KI; // step: 993
	float 	fConst45KI; // step: 994
	float 	fConst46KI; // step: 998
	float 	fConst47KI; // step: 1001
	float 	fConst48KI; // step: 1004
	float 	fConst49KI; // step: 1005
	float 	fConst50KI; // step: 1008
	// Recursion delay fVec158SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec158SEState; // Single Delay
	float 	fVec157SEState[2]; // Copy Delay
	float 	fConst51KI; // step: 1018
	float 	fConst52KI; // step: 1019
	float 	fConst53KI; // step: 1024
	float 	fConst54KI; // step: 1033
	float 	fConst55KI; // step: 1036
	float 	fConst56KI; // step: 1040
	// Recursion delay fVec163SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec163SEState; // Single Delay
	float 	fVec162SEState[2]; // Copy Delay
	float 	fConst57KI; // step: 1050
	float 	fConst58KI; // step: 1051
	float 	fConst59KI; // step: 1056
	float 	fConst60KI; // step: 1065
	float 	fConst61KI; // step: 1068
	float 	fConst62KI; // step: 1072
	// Recursion delay fVec168SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec168SEState; // Single Delay
	float 	fVec167SEState[2]; // Copy Delay
	float 	fConst63KI; // step: 1085
	float 	fConst64KI; // step: 1088
	float 	fConst65KI; // step: 1092
	// Recursion delay fVec171SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec171SEState; // Single Delay
	float 	fVec170SEState[2]; // Copy Delay
	float 	fConst66KI; // step: 1102
	float 	fConst67KI; // step: 1103
	float 	fConst68KI; // step: 1108
	float 	fConst69KI; // step: 1117
	float 	fConst70KI; // step: 1120
	float 	fConst71KI; // step: 1124
	// Recursion delay fVec176SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec176SEState; // Single Delay
	float 	fVec175SEState[2]; // Copy Delay
	float 	fConst72KI; // step: 1134
	float 	fConst73KI; // step: 1138
	float 	fConst74KI; // step: 1147
	float 	fConst75KI; // step: 1150
	float 	fConst76KI; // step: 1154
	// Recursion delay fVec181SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec181SEState; // Single Delay
	float 	fVec180SEState[2]; // Copy Delay
	float 	fConst77KI; // step: 1164
	float 	fConst78KI; // step: 1168
	float 	fConst79KI; // step: 1176
	float 	fConst80KI; // step: 1177
	float 	fConst81KI; // step: 1181
	float 	fConst82KI; // step: 1184
	float 	fConst83KI; // step: 1187
	float 	fConst84KI; // step: 1188
	float 	fConst85KI; // step: 1191
	// Recursion delay fVec186SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec186SEState; // Single Delay
	float 	fVec185SEState[2]; // Copy Delay
	float 	fConst86KI; // step: 1201
	float 	fConst87KI; // step: 1202
	float 	fConst88KI; // step: 1207
	float 	fConst89KI; // step: 1216
	float 	fConst90KI; // step: 1219
	float 	fConst91KI; // step: 1223
	// Recursion delay fVec191SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec191SEState; // Single Delay
	float 	fVec190SEState[2]; // Copy Delay
	float 	fConst92KI; // step: 1233
	float 	fConst93KI; // step: 1234
	float 	fConst94KI; // step: 1239
	float 	fConst95KI; // step: 1248
	float 	fConst96KI; // step: 1251
	float 	fConst97KI; // step: 1255
	// Recursion delay fVec196SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec196SEState; // Single Delay
	float 	fVec195SEState[2]; // Copy Delay
	float 	fConst98KI; // step: 1268
	float 	fConst99KI; // step: 1271
	float 	fConst100KI; // step: 1275
	// Recursion delay fVec199SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec199SEState; // Single Delay
	float 	fVec198SEState[2]; // Copy Delay
	float 	fConst101KI; // step: 1285
	float 	fConst102KI; // step: 1286
	float 	fConst103KI; // step: 1291
	float 	fConst104KI; // step: 1300
	float 	fConst105KI; // step: 1303
	float 	fConst106KI; // step: 1307
	// Recursion delay fVec204SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec204SEState; // Single Delay
	float 	fVec203SEState[2]; // Copy Delay
	float 	fConst107KI; // step: 1317
	float 	fConst108KI; // step: 1321
	float 	fConst109KI; // step: 1330
	float 	fConst110KI; // step: 1333
	float 	fConst111KI; // step: 1337
	// Recursion delay fVec209SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec209SEState; // Single Delay
	float 	fVec208SEState[2]; // Copy Delay
	float 	fConst112KI; // step: 1347
	float 	fConst113KI; // step: 1351
	float 	fConst114KI; // step: 1359
	float 	fConst115KI; // step: 1360
	float 	fConst116KI; // step: 1364
	float 	fConst117KI; // step: 1367
	float 	fConst118KI; // step: 1370
	float 	fConst119KI; // step: 1371
	float 	fConst120KI; // step: 1374
	// Recursion delay fVec214SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec214SEState; // Single Delay
	float 	fVec213SEState[2]; // Copy Delay
	float 	fConst121KI; // step: 1384
	float 	fConst122KI; // step: 1385
	float 	fConst123KI; // step: 1390
	float 	fConst124KI; // step: 1399
	float 	fConst125KI; // step: 1402
	float 	fConst126KI; // step: 1406
	// Recursion delay fVec219SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec219SEState; // Single Delay
	float 	fVec218SEState[2]; // Copy Delay
	float 	fConst127KI; // step: 1416
	float 	fConst128KI; // step: 1417
	float 	fConst129KI; // step: 1422
	float 	fConst130KI; // step: 1431
	float 	fConst131KI; // step: 1434
	float 	fConst132KI; // step: 1438
	// Recursion delay fVec224SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec224SEState; // Single Delay
	float 	fVec223SEState[2]; // Copy Delay
	float 	fConst133KI; // step: 1451
	float 	fConst134KI; // step: 1454
	float 	fConst135KI; // step: 1458
	// Recursion delay fVec227SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec227SEState; // Single Delay
	float 	fVec226SEState[2]; // Copy Delay
	float 	fConst136KI; // step: 1468
	float 	fConst137KI; // step: 1469
	float 	fConst138KI; // step: 1474
	float 	fConst139KI; // step: 1483
	float 	fConst140KI; // step: 1486
	float 	fConst141KI; // step: 1490
	// Recursion delay fVec232SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec232SEState; // Single Delay
	float 	fVec231SEState[2]; // Copy Delay
	float 	fConst142KI; // step: 1500
	float 	fConst143KI; // step: 1504
	float 	fConst144KI; // step: 1513
	float 	fConst145KI; // step: 1516
	float 	fConst146KI; // step: 1520
	// Recursion delay fVec237SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec237SEState; // Single Delay
	float 	fVec236SEState[2]; // Copy Delay
	float 	fConst147KI; // step: 1530
	float 	fConst148KI; // step: 1534
	float 	fConst149KI; // step: 1542
	float 	fConst150KI; // step: 1543
	float 	fConst151KI; // step: 1547
	float 	fConst152KI; // step: 1550
	float 	fConst153KI; // step: 1553
	float 	fConst154KI; // step: 1554
	float 	fConst155KI; // step: 1557
	// Recursion delay fVec242SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec242SEState; // Single Delay
	float 	fVec241SEState[2]; // Copy Delay
	float 	fConst156KI; // step: 1567
	float 	fConst157KI; // step: 1568
	float 	fConst158KI; // step: 1573
	float 	fConst159KI; // step: 1582
	float 	fConst160KI; // step: 1585
	float 	fConst161KI; // step: 1589
	// Recursion delay fVec247SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec247SEState; // Single Delay
	float 	fVec246SEState[2]; // Copy Delay
	float 	fConst162KI; // step: 1599
	float 	fConst163KI; // step: 1600
	float 	fConst164KI; // step: 1605
	float 	fConst165KI; // step: 1614
	float 	fConst166KI; // step: 1617
	float 	fConst167KI; // step: 1621
	// Recursion delay fVec252SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec252SEState; // Single Delay
	float 	fVec251SEState[2]; // Copy Delay
	float 	fConst168KI; // step: 1634
	float 	fConst169KI; // step: 1637
	float 	fConst170KI; // step: 1641
	// Recursion delay fVec255SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec255SEState; // Single Delay
	float 	fVec254SEState[2]; // Copy Delay
	float 	fConst171KI; // step: 1651
	float 	fConst172KI; // step: 1652
	float 	fConst173KI; // step: 1657
	float 	fConst174KI; // step: 1666
	float 	fConst175KI; // step: 1669
	float 	fConst176KI; // step: 1673
	// Recursion delay fVec260SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec260SEState; // Single Delay
	float 	fVec259SEState[2]; // Copy Delay
	float 	fConst177KI; // step: 1683
	float 	fConst178KI; // step: 1687
	float 	fConst179KI; // step: 1696
	float 	fConst180KI; // step: 1699
	float 	fConst181KI; // step: 1703
	// Recursion delay fVec265SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec265SEState; // Single Delay
	float 	fVec264SEState[2]; // Copy Delay
	float 	fConst182KI; // step: 1713
	float 	fConst183KI; // step: 1717
	float 	fConst184KI; // step: 1725
	float 	fConst185KI; // step: 1726
	float 	fConst186KI; // step: 1730
	float 	fConst187KI; // step: 1733
	float 	fConst188KI; // step: 1736
	float 	fConst189KI; // step: 1737
	float 	fConst190KI; // step: 1740
	// Recursion delay fVec270SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec270SEState; // Single Delay
	float 	fVec269SEState[2]; // Copy Delay
	float 	fConst191KI; // step: 1750
	float 	fConst192KI; // step: 1751
	float 	fConst193KI; // step: 1756
	float 	fConst194KI; // step: 1765
	float 	fConst195KI; // step: 1768
	float 	fConst196KI; // step: 1772
	// Recursion delay fVec275SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec275SEState; // Single Delay
	float 	fVec274SEState[2]; // Copy Delay
	float 	fConst197KI; // step: 1782
	float 	fConst198KI; // step: 1783
	float 	fConst199KI; // step: 1788
	float 	fConst200KI; // step: 1797
	float 	fConst201KI; // step: 1800
	float 	fConst202KI; // step: 1804
	// Recursion delay fVec280SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec280SEState; // Single Delay
	float 	fVec279SEState[2]; // Copy Delay
	float 	fConst203KI; // step: 1817
	float 	fConst204KI; // step: 1820
	float 	fConst205KI; // step: 1824
	// Recursion delay fVec283SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec283SEState; // Single Delay
	float 	fVec282SEState[2]; // Copy Delay
	float 	fConst206KI; // step: 1834
	float 	fConst207KI; // step: 1835
	float 	fConst208KI; // step: 1840
	float 	fConst209KI; // step: 1849
	float 	fConst210KI; // step: 1852
	float 	fConst211KI; // step: 1856
	// Recursion delay fVec288SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec288SEState; // Single Delay
	float 	fVec287SEState[2]; // Copy Delay
	float 	fConst212KI; // step: 1866
	float 	fConst213KI; // step: 1870
	float 	fConst214KI; // step: 1879
	float 	fConst215KI; // step: 1882
	float 	fConst216KI; // step: 1886
	// Recursion delay fVec293SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec293SEState; // Single Delay
	float 	fVec292SEState[2]; // Copy Delay
	float 	fConst217KI; // step: 1896
	float 	fConst218KI; // step: 1900
	float 	fConst219KI; // step: 1908
	float 	fConst220KI; // step: 1909
	float 	fConst221KI; // step: 1913
	float 	fConst222KI; // step: 1916
	float 	fConst223KI; // step: 1919
	float 	fConst224KI; // step: 1920
	float 	fConst225KI; // step: 1923
	// Recursion delay fVec298SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec298SEState; // Single Delay
	float 	fVec297SEState[2]; // Copy Delay
	float 	fConst226KI; // step: 1933
	float 	fConst227KI; // step: 1934
	float 	fConst228KI; // step: 1939
	float 	fConst229KI; // step: 1948
	float 	fConst230KI; // step: 1951
	float 	fConst231KI; // step: 1955
	// Recursion delay fVec303SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec303SEState; // Single Delay
	float 	fVec302SEState[2]; // Copy Delay
	float 	fConst232KI; // step: 1965
	float 	fConst233KI; // step: 1966
	float 	fConst234KI; // step: 1971
	float 	fConst235KI; // step: 1980
	float 	fConst236KI; // step: 1983
	float 	fConst237KI; // step: 1987
	// Recursion delay fVec308SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec308SEState; // Single Delay
	float 	fVec307SEState[2]; // Copy Delay
	float 	fConst238KI; // step: 2000
	float 	fConst239KI; // step: 2003
	float 	fConst240KI; // step: 2007
	// Recursion delay fVec311SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec311SEState; // Single Delay
	float 	fVec310SEState[2]; // Copy Delay
	float 	fConst241KI; // step: 2017
	float 	fConst242KI; // step: 2018
	float 	fConst243KI; // step: 2023
	float 	fConst244KI; // step: 2032
	float 	fConst245KI; // step: 2035
	float 	fConst246KI; // step: 2039
	// Recursion delay fVec316SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec316SEState; // Single Delay
	float 	fVec315SEState[2]; // Copy Delay
	float 	fConst247KI; // step: 2049
	float 	fConst248KI; // step: 2053
	float 	fConst249KI; // step: 2062
	float 	fConst250KI; // step: 2065
	float 	fConst251KI; // step: 2069
	// Recursion delay fVec321SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec321SEState; // Single Delay
	float 	fVec320SEState[2]; // Copy Delay
	float 	fConst252KI; // step: 2079
	float 	fConst253KI; // step: 2083
	float 	fConst254KI; // step: 2091
	float 	fConst255KI; // step: 2092
	float 	fConst256KI; // step: 2096
	float 	fConst257KI; // step: 2099
	float 	fConst258KI; // step: 2102
	float 	fConst259KI; // step: 2103
	float 	fConst260KI; // step: 2106
	// Recursion delay fVec326SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec326SEState; // Single Delay
	float 	fVec325SEState[2]; // Copy Delay
	float 	fConst261KI; // step: 2116
	float 	fConst262KI; // step: 2117
	float 	fConst263KI; // step: 2122
	float 	fConst264KI; // step: 2131
	float 	fConst265KI; // step: 2134
	float 	fConst266KI; // step: 2138
	// Recursion delay fVec331SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec331SEState; // Single Delay
	float 	fVec330SEState[2]; // Copy Delay
	float 	fConst267KI; // step: 2148
	float 	fConst268KI; // step: 2149
	float 	fConst269KI; // step: 2154
	float 	fConst270KI; // step: 2163
	float 	fConst271KI; // step: 2166
	float 	fConst272KI; // step: 2170
	// Recursion delay fVec336SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec336SEState; // Single Delay
	float 	fVec335SEState[2]; // Copy Delay
	float 	fConst273KI; // step: 2183
	float 	fConst274KI; // step: 2186
	float 	fConst275KI; // step: 2190
	// Recursion delay fVec339SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec339SEState; // Single Delay
	float 	fVec338SEState[2]; // Copy Delay
	float 	fConst276KI; // step: 2200
	float 	fConst277KI; // step: 2201
	float 	fConst278KI; // step: 2206
	float 	fConst279KI; // step: 2215
	float 	fConst280KI; // step: 2218
	float 	fConst281KI; // step: 2222
	// Recursion delay fVec344SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec344SEState; // Single Delay
	float 	fVec343SEState[2]; // Copy Delay
	float 	fConst282KI; // step: 2232
	float 	fConst283KI; // step: 2236
	float 	fConst284KI; // step: 2245
	float 	fConst285KI; // step: 2248
	float 	fConst286KI; // step: 2252
	// Recursion delay fVec349SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec349SEState; // Single Delay
	float 	fVec348SEState[2]; // Copy Delay
	float 	fConst287KI; // step: 2262
	float 	fConst288KI; // step: 2266
	float 	fConst289KI; // step: 2274
	float 	fConst290KI; // step: 2275
	float 	fConst291KI; // step: 2279
	float 	fConst292KI; // step: 2282
	float 	fConst293KI; // step: 2285
	float 	fConst294KI; // step: 2286
	float 	fConst295KI; // step: 2289
	// Recursion delay fVec354SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec354SEState; // Single Delay
	float 	fVec353SEState[2]; // Copy Delay
	float 	fConst296KI; // step: 2299
	float 	fConst297KI; // step: 2300
	float 	fConst298KI; // step: 2305
	float 	fConst299KI; // step: 2314
	float 	fConst300KI; // step: 2317
	float 	fConst301KI; // step: 2321
	// Recursion delay fVec359SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec359SEState; // Single Delay
	float 	fVec358SEState[2]; // Copy Delay
	float 	fConst302KI; // step: 2331
	float 	fConst303KI; // step: 2332
	float 	fConst304KI; // step: 2337
	float 	fConst305KI; // step: 2346
	float 	fConst306KI; // step: 2349
	float 	fConst307KI; // step: 2353
	// Recursion delay fVec364SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec364SEState; // Single Delay
	float 	fVec363SEState[2]; // Copy Delay
	float 	fConst308KI; // step: 2366
	float 	fConst309KI; // step: 2369
	float 	fConst310KI; // step: 2373
	// Recursion delay fVec367SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec367SEState; // Single Delay
	float 	fVec366SEState[2]; // Copy Delay
	float 	fConst311KI; // step: 2383
	float 	fConst312KI; // step: 2384
	float 	fConst313KI; // step: 2389
	float 	fConst314KI; // step: 2398
	float 	fConst315KI; // step: 2401
	float 	fConst316KI; // step: 2405
	// Recursion delay fVec372SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec372SEState; // Single Delay
	float 	fVec371SEState[2]; // Copy Delay
	float 	fConst317KI; // step: 2415
	float 	fConst318KI; // step: 2419
	float 	fConst319KI; // step: 2428
	float 	fConst320KI; // step: 2431
	float 	fConst321KI; // step: 2435
	// Recursion delay fVec377SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec377SEState; // Single Delay
	float 	fVec376SEState[2]; // Copy Delay
	float 	fConst322KI; // step: 2445
	float 	fConst323KI; // step: 2449
	float 	fConst324KI; // step: 2457
	float 	fConst325KI; // step: 2458
	float 	fConst326KI; // step: 2462
	float 	fConst327KI; // step: 2465
	float 	fConst328KI; // step: 2468
	float 	fConst329KI; // step: 2469
	float 	fConst330KI; // step: 2472
	// Recursion delay fVec382SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec382SEState; // Single Delay
	float 	fVec381SEState[2]; // Copy Delay
	float 	fConst331KI; // step: 2482
	float 	fConst332KI; // step: 2483
	float 	fConst333KI; // step: 2488
	float 	fConst334KI; // step: 2497
	float 	fConst335KI; // step: 2500
	float 	fConst336KI; // step: 2504
	// Recursion delay fVec387SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec387SEState; // Single Delay
	float 	fVec386SEState[2]; // Copy Delay
	float 	fConst337KI; // step: 2514
	float 	fConst338KI; // step: 2515
	float 	fConst339KI; // step: 2520
	float 	fConst340KI; // step: 2529
	float 	fConst341KI; // step: 2532
	float 	fConst342KI; // step: 2536
	// Recursion delay fVec392SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec392SEState; // Single Delay
	float 	fVec391SEState[2]; // Copy Delay
	float 	fConst343KI; // step: 2549
	float 	fConst344KI; // step: 2552
	float 	fConst345KI; // step: 2556
	// Recursion delay fVec395SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec395SEState; // Single Delay
	float 	fVec394SEState[2]; // Copy Delay
	float 	fConst346KI; // step: 2566
	float 	fConst347KI; // step: 2567
	float 	fConst348KI; // step: 2572
	float 	fConst349KI; // step: 2581
	float 	fConst350KI; // step: 2584
	float 	fConst351KI; // step: 2588
	// Recursion delay fVec400SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec400SEState; // Single Delay
	float 	fVec399SEState[2]; // Copy Delay
	float 	fConst352KI; // step: 2598
	float 	fConst353KI; // step: 2602
	float 	fConst354KI; // step: 2611
	float 	fConst355KI; // step: 2614
	float 	fConst356KI; // step: 2618
	// Recursion delay fVec405SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec405SEState; // Single Delay
	float 	fVec404SEState[2]; // Copy Delay
	float 	fConst357KI; // step: 2628
	float 	fConst358KI; // step: 2632
	float 	fConst359KI; // step: 2640
	float 	fConst360KI; // step: 2641
	float 	fConst361KI; // step: 2645
	float 	fConst362KI; // step: 2648
	float 	fConst363KI; // step: 2651
	float 	fConst364KI; // step: 2652
	float 	fConst365KI; // step: 2655
	// Recursion delay fVec410SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec410SEState; // Single Delay
	float 	fVec409SEState[2]; // Copy Delay
	float 	fConst366KI; // step: 2665
	float 	fConst367KI; // step: 2666
	float 	fConst368KI; // step: 2671
	float 	fConst369KI; // step: 2680
	float 	fConst370KI; // step: 2683
	float 	fConst371KI; // step: 2687
	// Recursion delay fVec415SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec415SEState; // Single Delay
	float 	fVec414SEState[2]; // Copy Delay
	float 	fConst372KI; // step: 2697
	float 	fConst373KI; // step: 2698
	float 	fConst374KI; // step: 2703
	float 	fConst375KI; // step: 2712
	float 	fConst376KI; // step: 2715
	float 	fConst377KI; // step: 2719
	// Recursion delay fVec420SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec420SEState; // Single Delay
	float 	fVec419SEState[2]; // Copy Delay
	float 	fConst378KI; // step: 2732
	float 	fConst379KI; // step: 2735
	float 	fConst380KI; // step: 2739
	// Recursion delay fVec423SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec423SEState; // Single Delay
	float 	fVec422SEState[2]; // Copy Delay
	float 	fConst381KI; // step: 2749
	float 	fConst382KI; // step: 2750
	float 	fConst383KI; // step: 2755
	float 	fConst384KI; // step: 2764
	float 	fConst385KI; // step: 2767
	float 	fConst386KI; // step: 2771
	// Recursion delay fVec428SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec428SEState; // Single Delay
	float 	fVec427SEState[2]; // Copy Delay
	float 	fConst387KI; // step: 2781
	float 	fConst388KI; // step: 2785
	float 	fConst389KI; // step: 2794
	float 	fConst390KI; // step: 2797
	float 	fConst391KI; // step: 2801
	// Recursion delay fVec433SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec433SEState; // Single Delay
	float 	fVec432SEState[2]; // Copy Delay
	float 	fConst392KI; // step: 2811
	float 	fConst393KI; // step: 2815
	float 	fConst394KI; // step: 2823
	float 	fConst395KI; // step: 2824
	float 	fConst396KI; // step: 2828
	float 	fConst397KI; // step: 2831
	float 	fConst398KI; // step: 2834
	float 	fConst399KI; // step: 2835
	float 	fConst400KI; // step: 2838
	// Recursion delay fVec438SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec438SEState; // Single Delay
	float 	fVec437SEState[2]; // Copy Delay
	float 	fConst401KI; // step: 2848
	float 	fConst402KI; // step: 2849
	float 	fConst403KI; // step: 2854
	float 	fConst404KI; // step: 2863
	float 	fConst405KI; // step: 2866
	float 	fConst406KI; // step: 2870
	// Recursion delay fVec443SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec443SEState; // Single Delay
	float 	fVec442SEState[2]; // Copy Delay
	float 	fConst407KI; // step: 2880
	float 	fConst408KI; // step: 2881
	float 	fConst409KI; // step: 2886
	float 	fConst410KI; // step: 2895
	float 	fConst411KI; // step: 2898
	float 	fConst412KI; // step: 2902
	// Recursion delay fVec448SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec448SEState; // Single Delay
	float 	fVec447SEState[2]; // Copy Delay
	float 	fConst413KI; // step: 2915
	float 	fConst414KI; // step: 2918
	float 	fConst415KI; // step: 2922
	// Recursion delay fVec451SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec451SEState; // Single Delay
	float 	fVec450SEState[2]; // Copy Delay
	float 	fConst416KI; // step: 2932
	float 	fConst417KI; // step: 2933
	float 	fConst418KI; // step: 2938
	float 	fConst419KI; // step: 2947
	float 	fConst420KI; // step: 2950
	float 	fConst421KI; // step: 2954
	// Recursion delay fVec456SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec456SEState; // Single Delay
	float 	fVec455SEState[2]; // Copy Delay
	float 	fConst422KI; // step: 2964
	float 	fConst423KI; // step: 2968
	float 	fConst424KI; // step: 2977
	float 	fConst425KI; // step: 2980
	float 	fConst426KI; // step: 2984
	// Recursion delay fVec461SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec461SEState; // Single Delay
	float 	fVec460SEState[2]; // Copy Delay
	float 	fConst427KI; // step: 2994
	float 	fConst428KI; // step: 2998
	float 	fConst429KI; // step: 3006
	float 	fConst430KI; // step: 3007
	float 	fConst431KI; // step: 3011
	float 	fConst432KI; // step: 3014
	float 	fConst433KI; // step: 3017
	float 	fConst434KI; // step: 3018
	float 	fConst435KI; // step: 3021
	// Recursion delay fVec466SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec466SEState; // Single Delay
	float 	fVec465SEState[2]; // Copy Delay
	float 	fConst436KI; // step: 3031
	float 	fConst437KI; // step: 3032
	float 	fConst438KI; // step: 3037
	float 	fConst439KI; // step: 3046
	float 	fConst440KI; // step: 3049
	float 	fConst441KI; // step: 3053
	// Recursion delay fVec471SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec471SEState; // Single Delay
	float 	fVec470SEState[2]; // Copy Delay
	float 	fConst442KI; // step: 3063
	float 	fConst443KI; // step: 3064
	float 	fConst444KI; // step: 3069
	float 	fConst445KI; // step: 3078
	float 	fConst446KI; // step: 3081
	float 	fConst447KI; // step: 3085
	// Recursion delay fVec476SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec476SEState; // Single Delay
	float 	fVec475SEState[2]; // Copy Delay
	float 	fConst448KI; // step: 3098
	float 	fConst449KI; // step: 3101
	float 	fConst450KI; // step: 3105
	// Recursion delay fVec479SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec479SEState; // Single Delay
	float 	fVec478SEState[2]; // Copy Delay
	float 	fConst451KI; // step: 3115
	float 	fConst452KI; // step: 3116
	float 	fConst453KI; // step: 3121
	float 	fConst454KI; // step: 3130
	float 	fConst455KI; // step: 3133
	float 	fConst456KI; // step: 3137
	// Recursion delay fVec484SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec484SEState; // Single Delay
	float 	fVec483SEState[2]; // Copy Delay
	float 	fConst457KI; // step: 3147
	float 	fConst458KI; // step: 3151
	float 	fConst459KI; // step: 3160
	float 	fConst460KI; // step: 3163
	float 	fConst461KI; // step: 3167
	// Recursion delay fVec489SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec489SEState; // Single Delay
	float 	fVec488SEState[2]; // Copy Delay
	float 	fConst462KI; // step: 3177
	float 	fConst463KI; // step: 3181
	float 	fConst464KI; // step: 3189
	float 	fConst465KI; // step: 3190
	float 	fConst466KI; // step: 3194
	float 	fConst467KI; // step: 3197
	float 	fConst468KI; // step: 3200
	float 	fConst469KI; // step: 3201
	float 	fConst470KI; // step: 3204
	// Recursion delay fVec494SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec494SEState; // Single Delay
	float 	fVec493SEState[2]; // Copy Delay
	float 	fConst471KI; // step: 3214
	float 	fConst472KI; // step: 3215
	float 	fConst473KI; // step: 3220
	float 	fConst474KI; // step: 3229
	float 	fConst475KI; // step: 3232
	float 	fConst476KI; // step: 3236
	// Recursion delay fVec499SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec499SEState; // Single Delay
	float 	fVec498SEState[2]; // Copy Delay
	float 	fConst477KI; // step: 3246
	float 	fConst478KI; // step: 3247
	float 	fConst479KI; // step: 3252
	float 	fConst480KI; // step: 3261
	float 	fConst481KI; // step: 3264
	float 	fConst482KI; // step: 3268
	// Recursion delay fVec504SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec504SEState; // Single Delay
	float 	fVec503SEState[2]; // Copy Delay
	float 	fConst483KI; // step: 3281
	float 	fConst484KI; // step: 3284
	float 	fConst485KI; // step: 3288
	// Recursion delay fVec507SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec507SEState; // Single Delay
	float 	fVec506SEState[2]; // Copy Delay
	float 	fConst486KI; // step: 3298
	float 	fConst487KI; // step: 3299
	float 	fConst488KI; // step: 3304
	float 	fConst489KI; // step: 3313
	float 	fConst490KI; // step: 3316
	float 	fConst491KI; // step: 3320
	// Recursion delay fVec512SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec512SEState; // Single Delay
	float 	fVec511SEState[2]; // Copy Delay
	float 	fConst492KI; // step: 3330
	float 	fConst493KI; // step: 3334
	float 	fConst494KI; // step: 3343
	float 	fConst495KI; // step: 3346
	float 	fConst496KI; // step: 3350
	// Recursion delay fVec517SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec517SEState; // Single Delay
	float 	fVec516SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fConst497KI; // step: 3365
	float 	fConst498KI; // step: 3374
	float 	fConst499KI; // step: 3375
	float 	fConst500KI; // step: 3380
	// Recursion delay fVec519SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec519SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst501KI; // step: 3403
	float 	fConst502KI; // step: 3404
	float 	fConst503KI; // step: 3409
	// Recursion delay fVec523SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec523SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst504KI; // step: 3428
	float 	fConst505KI; // step: 3429
	float 	fConst506KI; // step: 3434
	// Recursion delay fVec527SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec527SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst507KI; // step: 3453
	float 	fConst508KI; // step: 3454
	float 	fConst509KI; // step: 3459
	// Recursion delay fVec531SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec531SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst510KI; // step: 3478
	float 	fConst511KI; // step: 3479
	float 	fConst512KI; // step: 3484
	// Recursion delay fVec535SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec535SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst513KI; // step: 3503
	float 	fConst514KI; // step: 3504
	float 	fConst515KI; // step: 3509
	// Recursion delay fVec539SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec539SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst516KI; // step: 3528
	float 	fConst517KI; // step: 3529
	float 	fConst518KI; // step: 3534
	// Recursion delay fVec543SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec543SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst519KI; // step: 3553
	float 	fConst520KI; // step: 3554
	float 	fConst521KI; // step: 3559
	// Recursion delay fVec547SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec547SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst522KI; // step: 3578
	float 	fConst523KI; // step: 3579
	float 	fConst524KI; // step: 3584
	// Recursion delay fVec551SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec551SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst525KI; // step: 3603
	float 	fConst526KI; // step: 3604
	float 	fConst527KI; // step: 3609
	// Recursion delay fVec555SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec555SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst528KI; // step: 3628
	float 	fConst529KI; // step: 3629
	float 	fConst530KI; // step: 3634
	// Recursion delay fVec559SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec559SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst531KI; // step: 3653
	float 	fConst532KI; // step: 3654
	float 	fConst533KI; // step: 3659
	// Recursion delay fVec563SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec563SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst534KI; // step: 3678
	float 	fConst535KI; // step: 3679
	float 	fConst536KI; // step: 3684
	// Recursion delay fVec567SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec567SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst537KI; // step: 3703
	float 	fConst538KI; // step: 3704
	float 	fConst539KI; // step: 3709
	// Recursion delay fVec571SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec571SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst540KI; // step: 3728
	float 	fConst541KI; // step: 3732
	// Recursion delay fVec575SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec575SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/crybaby:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/crybaby:copyright", "Julius O. Smith III");
		m->declare("effect.lib/crybaby:license", "STK-4.3");
		m->declare("effect.lib/crybaby_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/crybaby_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/crybaby_demo:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2b:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2b:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2b:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2bn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2bn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2bn:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_demo:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/pianokey2hz:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/pianokey2hz:copyright", "Julius O. Smith III");
		m->declare("effect.lib/pianokey2hz:license", "STK-4.3");
		m->declare("effect.lib/wah4:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/wah4:copyright", "Julius O. Smith III");
		m->declare("effect.lib/wah4:license", "STK-4.3");
		m->declare("effect.lib/wah4_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/wah4_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/wah4_demo:license", "STK-4.3");
		m->declare("filename", "vcf_wah_pedals.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "vcf_wah_pedals");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 243
		fConst3KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 256
		fConst4KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 271
		fConst5KI = (2827.4333f / fConst0KI); // step: 362
		fConst6KI = (1413.7167f / fConst0KI); // step: 366
		fConst7KI = (6.2831855f / fConst0KI); // step: 410
		fConst8KI = (3.1415927f / fConst0KI); // step: 470
		fConst9KI = tanf((50265.484f / fConst0KI)); // step: 786
		fConst10KI = (1.0f / fConst9KI); // step: 788
		fConst11KI = (1.0f / (((fConst10KI + 3.1897273f /* Sum */) / fConst9KI) + 4.0767817f /* Sum */)); // step: 792
		fConst12KI = (((fConst10KI + -3.1897273f /* Sum */) / fConst9KI) + 4.0767817f /* Sum */); // step: 796
		fConst13KI = powf(fConst9KI,2.0f); // step: 799
		fConst14KI = (1.0f / fConst13KI); // step: 800
		fConst15KI = (2.0f * (4.0767817f + -fConst14KI /* Sum */)); // step: 803
		fConst16KI = (0.0017661728f / fConst13KI); // step: 815
		fConst17KI = (fConst16KI + 0.0004076782f /* Sum */); // step: 816
		fConst18KI = (2.0f * (0.0004076782f + -fConst16KI /* Sum */)); // step: 821
		fConst19KI = (1.0f / (((fConst10KI + 0.74313045f /* Sum */) / fConst9KI) + 1.4500711f /* Sum */)); // step: 832
		fConst20KI = (((fConst10KI + -0.74313045f /* Sum */) / fConst9KI) + 1.4500711f /* Sum */); // step: 836
		fConst21KI = (2.0f * (1.4500711f + -fConst14KI /* Sum */)); // step: 840
		fConst22KI = (11.0520525f / fConst13KI); // step: 851
		fConst23KI = (fConst22KI + 1.4500711f /* Sum */); // step: 852
		fConst24KI = (2.0f * (1.4500711f + -fConst22KI /* Sum */)); // step: 857
		fConst25KI = (1.0f / (((fConst10KI + 0.15748216f /* Sum */) / fConst9KI) + 0.9351402f /* Sum */)); // step: 868
		fConst26KI = (((fConst10KI + -0.15748216f /* Sum */) / fConst9KI) + 0.9351402f /* Sum */); // step: 872
		fConst27KI = (2.0f * (0.9351402f + -fConst14KI /* Sum */)); // step: 876
		fConst28KI = (1.0f / (((fConst10KI + 0.78241307f /* Sum */) / fConst9KI) + 0.2452915f /* Sum */)); // step: 891
		fConst29KI = (((fConst10KI + -0.78241307f /* Sum */) / fConst9KI) + 0.2452915f /* Sum */); // step: 895
		fConst30KI = (2.0f * (0.2452915f + -fConst14KI /* Sum */)); // step: 899
		fConst31KI = (0.0001f / fConst13KI); // step: 911
		fConst32KI = (fConst31KI + 0.0004332272f /* Sum */); // step: 912
		fConst33KI = (2.0f * (0.0004332272f + -fConst31KI /* Sum */)); // step: 917
		fConst34KI = (1.0f / (((fConst10KI + 0.51247865f /* Sum */) / fConst9KI) + 0.6896214f /* Sum */)); // step: 928
		fConst35KI = (((fConst10KI + -0.51247865f /* Sum */) / fConst9KI) + 0.6896214f /* Sum */); // step: 932
		fConst36KI = (2.0f * (0.6896214f + -fConst14KI /* Sum */)); // step: 936
		fConst37KI = (fConst14KI + 7.6217313f /* Sum */); // step: 947
		fConst38KI = (2.0f * (7.6217313f + -fConst14KI /* Sum */)); // step: 951
		fConst39KI = (1.0f / (((fConst10KI + 0.16840488f /* Sum */) / fConst9KI) + 1.0693583f /* Sum */)); // step: 962
		fConst40KI = (((fConst10KI + -0.16840488f /* Sum */) / fConst9KI) + 1.0693583f /* Sum */); // step: 966
		fConst41KI = (2.0f * (1.0693583f + -fConst14KI /* Sum */)); // step: 970
		fConst42KI = (fConst14KI + 53.53615f /* Sum */); // step: 981
		fConst43KI = (2.0f * (53.53615f + -fConst14KI /* Sum */)); // step: 985
		fConst44KI = tanf((31665.27f / fConst0KI)); // step: 993
		fConst45KI = (1.0f / fConst44KI); // step: 994
		fConst46KI = (1.0f / (((fConst45KI + 3.1897273f /* Sum */) / fConst44KI) + 4.0767817f /* Sum */)); // step: 998
		fConst47KI = (((fConst45KI + -3.1897273f /* Sum */) / fConst44KI) + 4.0767817f /* Sum */); // step: 1001
		fConst48KI = powf(fConst44KI,2.0f); // step: 1004
		fConst49KI = (1.0f / fConst48KI); // step: 1005
		fConst50KI = (2.0f * (4.0767817f + -fConst49KI /* Sum */)); // step: 1008
		fConst51KI = (0.0017661728f / fConst48KI); // step: 1018
		fConst52KI = (fConst51KI + 0.0004076782f /* Sum */); // step: 1019
		fConst53KI = (2.0f * (0.0004076782f + -fConst51KI /* Sum */)); // step: 1024
		fConst54KI = (1.0f / (((fConst45KI + 0.74313045f /* Sum */) / fConst44KI) + 1.4500711f /* Sum */)); // step: 1033
		fConst55KI = (((fConst45KI + -0.74313045f /* Sum */) / fConst44KI) + 1.4500711f /* Sum */); // step: 1036
		fConst56KI = (2.0f * (1.4500711f + -fConst49KI /* Sum */)); // step: 1040
		fConst57KI = (11.0520525f / fConst48KI); // step: 1050
		fConst58KI = (fConst57KI + 1.4500711f /* Sum */); // step: 1051
		fConst59KI = (2.0f * (1.4500711f + -fConst57KI /* Sum */)); // step: 1056
		fConst60KI = (1.0f / (((fConst45KI + 0.15748216f /* Sum */) / fConst44KI) + 0.9351402f /* Sum */)); // step: 1065
		fConst61KI = (((fConst45KI + -0.15748216f /* Sum */) / fConst44KI) + 0.9351402f /* Sum */); // step: 1068
		fConst62KI = (2.0f * (0.9351402f + -fConst49KI /* Sum */)); // step: 1072
		fConst63KI = (1.0f / (((fConst45KI + 0.78241307f /* Sum */) / fConst44KI) + 0.2452915f /* Sum */)); // step: 1085
		fConst64KI = (((fConst45KI + -0.78241307f /* Sum */) / fConst44KI) + 0.2452915f /* Sum */); // step: 1088
		fConst65KI = (2.0f * (0.2452915f + -fConst49KI /* Sum */)); // step: 1092
		fConst66KI = (0.0001f / fConst48KI); // step: 1102
		fConst67KI = (fConst66KI + 0.0004332272f /* Sum */); // step: 1103
		fConst68KI = (2.0f * (0.0004332272f + -fConst66KI /* Sum */)); // step: 1108
		fConst69KI = (1.0f / (((fConst45KI + 0.51247865f /* Sum */) / fConst44KI) + 0.6896214f /* Sum */)); // step: 1117
		fConst70KI = (((fConst45KI + -0.51247865f /* Sum */) / fConst44KI) + 0.6896214f /* Sum */); // step: 1120
		fConst71KI = (2.0f * (0.6896214f + -fConst49KI /* Sum */)); // step: 1124
		fConst72KI = (fConst49KI + 7.6217313f /* Sum */); // step: 1134
		fConst73KI = (2.0f * (7.6217313f + -fConst49KI /* Sum */)); // step: 1138
		fConst74KI = (1.0f / (((fConst45KI + 0.16840488f /* Sum */) / fConst44KI) + 1.0693583f /* Sum */)); // step: 1147
		fConst75KI = (((fConst45KI + -0.16840488f /* Sum */) / fConst44KI) + 1.0693583f /* Sum */); // step: 1150
		fConst76KI = (2.0f * (1.0693583f + -fConst49KI /* Sum */)); // step: 1154
		fConst77KI = (fConst49KI + 53.53615f /* Sum */); // step: 1164
		fConst78KI = (2.0f * (53.53615f + -fConst49KI /* Sum */)); // step: 1168
		fConst79KI = tanf((19947.87f / fConst0KI)); // step: 1176
		fConst80KI = (1.0f / fConst79KI); // step: 1177
		fConst81KI = (1.0f / (((fConst80KI + 3.1897273f /* Sum */) / fConst79KI) + 4.0767817f /* Sum */)); // step: 1181
		fConst82KI = (((fConst80KI + -3.1897273f /* Sum */) / fConst79KI) + 4.0767817f /* Sum */); // step: 1184
		fConst83KI = powf(fConst79KI,2.0f); // step: 1187
		fConst84KI = (1.0f / fConst83KI); // step: 1188
		fConst85KI = (2.0f * (4.0767817f + -fConst84KI /* Sum */)); // step: 1191
		fConst86KI = (0.0017661728f / fConst83KI); // step: 1201
		fConst87KI = (fConst86KI + 0.0004076782f /* Sum */); // step: 1202
		fConst88KI = (2.0f * (0.0004076782f + -fConst86KI /* Sum */)); // step: 1207
		fConst89KI = (1.0f / (((fConst80KI + 0.74313045f /* Sum */) / fConst79KI) + 1.4500711f /* Sum */)); // step: 1216
		fConst90KI = (((fConst80KI + -0.74313045f /* Sum */) / fConst79KI) + 1.4500711f /* Sum */); // step: 1219
		fConst91KI = (2.0f * (1.4500711f + -fConst84KI /* Sum */)); // step: 1223
		fConst92KI = (11.0520525f / fConst83KI); // step: 1233
		fConst93KI = (fConst92KI + 1.4500711f /* Sum */); // step: 1234
		fConst94KI = (2.0f * (1.4500711f + -fConst92KI /* Sum */)); // step: 1239
		fConst95KI = (1.0f / (((fConst80KI + 0.15748216f /* Sum */) / fConst79KI) + 0.9351402f /* Sum */)); // step: 1248
		fConst96KI = (((fConst80KI + -0.15748216f /* Sum */) / fConst79KI) + 0.9351402f /* Sum */); // step: 1251
		fConst97KI = (2.0f * (0.9351402f + -fConst84KI /* Sum */)); // step: 1255
		fConst98KI = (1.0f / (((fConst80KI + 0.78241307f /* Sum */) / fConst79KI) + 0.2452915f /* Sum */)); // step: 1268
		fConst99KI = (((fConst80KI + -0.78241307f /* Sum */) / fConst79KI) + 0.2452915f /* Sum */); // step: 1271
		fConst100KI = (2.0f * (0.2452915f + -fConst84KI /* Sum */)); // step: 1275
		fConst101KI = (0.0001f / fConst83KI); // step: 1285
		fConst102KI = (fConst101KI + 0.0004332272f /* Sum */); // step: 1286
		fConst103KI = (2.0f * (0.0004332272f + -fConst101KI /* Sum */)); // step: 1291
		fConst104KI = (1.0f / (((fConst80KI + 0.51247865f /* Sum */) / fConst79KI) + 0.6896214f /* Sum */)); // step: 1300
		fConst105KI = (((fConst80KI + -0.51247865f /* Sum */) / fConst79KI) + 0.6896214f /* Sum */); // step: 1303
		fConst106KI = (2.0f * (0.6896214f + -fConst84KI /* Sum */)); // step: 1307
		fConst107KI = (fConst84KI + 7.6217313f /* Sum */); // step: 1317
		fConst108KI = (2.0f * (7.6217313f + -fConst84KI /* Sum */)); // step: 1321
		fConst109KI = (1.0f / (((fConst80KI + 0.16840488f /* Sum */) / fConst79KI) + 1.0693583f /* Sum */)); // step: 1330
		fConst110KI = (((fConst80KI + -0.16840488f /* Sum */) / fConst79KI) + 1.0693583f /* Sum */); // step: 1333
		fConst111KI = (2.0f * (1.0693583f + -fConst84KI /* Sum */)); // step: 1337
		fConst112KI = (fConst84KI + 53.53615f /* Sum */); // step: 1347
		fConst113KI = (2.0f * (53.53615f + -fConst84KI /* Sum */)); // step: 1351
		fConst114KI = tanf((12566.371f / fConst0KI)); // step: 1359
		fConst115KI = (1.0f / fConst114KI); // step: 1360
		fConst116KI = (1.0f / (((fConst115KI + 3.1897273f /* Sum */) / fConst114KI) + 4.0767817f /* Sum */)); // step: 1364
		fConst117KI = (((fConst115KI + -3.1897273f /* Sum */) / fConst114KI) + 4.0767817f /* Sum */); // step: 1367
		fConst118KI = powf(fConst114KI,2.0f); // step: 1370
		fConst119KI = (1.0f / fConst118KI); // step: 1371
		fConst120KI = (2.0f * (4.0767817f + -fConst119KI /* Sum */)); // step: 1374
		fConst121KI = (0.0017661728f / fConst118KI); // step: 1384
		fConst122KI = (fConst121KI + 0.0004076782f /* Sum */); // step: 1385
		fConst123KI = (2.0f * (0.0004076782f + -fConst121KI /* Sum */)); // step: 1390
		fConst124KI = (1.0f / (((fConst115KI + 0.74313045f /* Sum */) / fConst114KI) + 1.4500711f /* Sum */)); // step: 1399
		fConst125KI = (((fConst115KI + -0.74313045f /* Sum */) / fConst114KI) + 1.4500711f /* Sum */); // step: 1402
		fConst126KI = (2.0f * (1.4500711f + -fConst119KI /* Sum */)); // step: 1406
		fConst127KI = (11.0520525f / fConst118KI); // step: 1416
		fConst128KI = (fConst127KI + 1.4500711f /* Sum */); // step: 1417
		fConst129KI = (2.0f * (1.4500711f + -fConst127KI /* Sum */)); // step: 1422
		fConst130KI = (1.0f / (((fConst115KI + 0.15748216f /* Sum */) / fConst114KI) + 0.9351402f /* Sum */)); // step: 1431
		fConst131KI = (((fConst115KI + -0.15748216f /* Sum */) / fConst114KI) + 0.9351402f /* Sum */); // step: 1434
		fConst132KI = (2.0f * (0.9351402f + -fConst119KI /* Sum */)); // step: 1438
		fConst133KI = (1.0f / (((fConst115KI + 0.78241307f /* Sum */) / fConst114KI) + 0.2452915f /* Sum */)); // step: 1451
		fConst134KI = (((fConst115KI + -0.78241307f /* Sum */) / fConst114KI) + 0.2452915f /* Sum */); // step: 1454
		fConst135KI = (2.0f * (0.2452915f + -fConst119KI /* Sum */)); // step: 1458
		fConst136KI = (0.0001f / fConst118KI); // step: 1468
		fConst137KI = (fConst136KI + 0.0004332272f /* Sum */); // step: 1469
		fConst138KI = (2.0f * (0.0004332272f + -fConst136KI /* Sum */)); // step: 1474
		fConst139KI = (1.0f / (((fConst115KI + 0.51247865f /* Sum */) / fConst114KI) + 0.6896214f /* Sum */)); // step: 1483
		fConst140KI = (((fConst115KI + -0.51247865f /* Sum */) / fConst114KI) + 0.6896214f /* Sum */); // step: 1486
		fConst141KI = (2.0f * (0.6896214f + -fConst119KI /* Sum */)); // step: 1490
		fConst142KI = (fConst119KI + 7.6217313f /* Sum */); // step: 1500
		fConst143KI = (2.0f * (7.6217313f + -fConst119KI /* Sum */)); // step: 1504
		fConst144KI = (1.0f / (((fConst115KI + 0.16840488f /* Sum */) / fConst114KI) + 1.0693583f /* Sum */)); // step: 1513
		fConst145KI = (((fConst115KI + -0.16840488f /* Sum */) / fConst114KI) + 1.0693583f /* Sum */); // step: 1516
		fConst146KI = (2.0f * (1.0693583f + -fConst119KI /* Sum */)); // step: 1520
		fConst147KI = (fConst119KI + 53.53615f /* Sum */); // step: 1530
		fConst148KI = (2.0f * (53.53615f + -fConst119KI /* Sum */)); // step: 1534
		fConst149KI = tanf((7916.3174f / fConst0KI)); // step: 1542
		fConst150KI = (1.0f / fConst149KI); // step: 1543
		fConst151KI = (1.0f / (((fConst150KI + 3.1897273f /* Sum */) / fConst149KI) + 4.0767817f /* Sum */)); // step: 1547
		fConst152KI = (((fConst150KI + -3.1897273f /* Sum */) / fConst149KI) + 4.0767817f /* Sum */); // step: 1550
		fConst153KI = powf(fConst149KI,2.0f); // step: 1553
		fConst154KI = (1.0f / fConst153KI); // step: 1554
		fConst155KI = (2.0f * (4.0767817f + -fConst154KI /* Sum */)); // step: 1557
		fConst156KI = (0.0017661728f / fConst153KI); // step: 1567
		fConst157KI = (fConst156KI + 0.0004076782f /* Sum */); // step: 1568
		fConst158KI = (2.0f * (0.0004076782f + -fConst156KI /* Sum */)); // step: 1573
		fConst159KI = (1.0f / (((fConst150KI + 0.74313045f /* Sum */) / fConst149KI) + 1.4500711f /* Sum */)); // step: 1582
		fConst160KI = (((fConst150KI + -0.74313045f /* Sum */) / fConst149KI) + 1.4500711f /* Sum */); // step: 1585
		fConst161KI = (2.0f * (1.4500711f + -fConst154KI /* Sum */)); // step: 1589
		fConst162KI = (11.0520525f / fConst153KI); // step: 1599
		fConst163KI = (fConst162KI + 1.4500711f /* Sum */); // step: 1600
		fConst164KI = (2.0f * (1.4500711f + -fConst162KI /* Sum */)); // step: 1605
		fConst165KI = (1.0f / (((fConst150KI + 0.15748216f /* Sum */) / fConst149KI) + 0.9351402f /* Sum */)); // step: 1614
		fConst166KI = (((fConst150KI + -0.15748216f /* Sum */) / fConst149KI) + 0.9351402f /* Sum */); // step: 1617
		fConst167KI = (2.0f * (0.9351402f + -fConst154KI /* Sum */)); // step: 1621
		fConst168KI = (1.0f / (((fConst150KI + 0.78241307f /* Sum */) / fConst149KI) + 0.2452915f /* Sum */)); // step: 1634
		fConst169KI = (((fConst150KI + -0.78241307f /* Sum */) / fConst149KI) + 0.2452915f /* Sum */); // step: 1637
		fConst170KI = (2.0f * (0.2452915f + -fConst154KI /* Sum */)); // step: 1641
		fConst171KI = (0.0001f / fConst153KI); // step: 1651
		fConst172KI = (fConst171KI + 0.0004332272f /* Sum */); // step: 1652
		fConst173KI = (2.0f * (0.0004332272f + -fConst171KI /* Sum */)); // step: 1657
		fConst174KI = (1.0f / (((fConst150KI + 0.51247865f /* Sum */) / fConst149KI) + 0.6896214f /* Sum */)); // step: 1666
		fConst175KI = (((fConst150KI + -0.51247865f /* Sum */) / fConst149KI) + 0.6896214f /* Sum */); // step: 1669
		fConst176KI = (2.0f * (0.6896214f + -fConst154KI /* Sum */)); // step: 1673
		fConst177KI = (fConst154KI + 7.6217313f /* Sum */); // step: 1683
		fConst178KI = (2.0f * (7.6217313f + -fConst154KI /* Sum */)); // step: 1687
		fConst179KI = (1.0f / (((fConst150KI + 0.16840488f /* Sum */) / fConst149KI) + 1.0693583f /* Sum */)); // step: 1696
		fConst180KI = (((fConst150KI + -0.16840488f /* Sum */) / fConst149KI) + 1.0693583f /* Sum */); // step: 1699
		fConst181KI = (2.0f * (1.0693583f + -fConst154KI /* Sum */)); // step: 1703
		fConst182KI = (fConst154KI + 53.53615f /* Sum */); // step: 1713
		fConst183KI = (2.0f * (53.53615f + -fConst154KI /* Sum */)); // step: 1717
		fConst184KI = tanf((4986.9673f / fConst0KI)); // step: 1725
		fConst185KI = (1.0f / fConst184KI); // step: 1726
		fConst186KI = (1.0f / (((fConst185KI + 3.1897273f /* Sum */) / fConst184KI) + 4.0767817f /* Sum */)); // step: 1730
		fConst187KI = (((fConst185KI + -3.1897273f /* Sum */) / fConst184KI) + 4.0767817f /* Sum */); // step: 1733
		fConst188KI = powf(fConst184KI,2.0f); // step: 1736
		fConst189KI = (1.0f / fConst188KI); // step: 1737
		fConst190KI = (2.0f * (4.0767817f + -fConst189KI /* Sum */)); // step: 1740
		fConst191KI = (0.0017661728f / fConst188KI); // step: 1750
		fConst192KI = (fConst191KI + 0.0004076782f /* Sum */); // step: 1751
		fConst193KI = (2.0f * (0.0004076782f + -fConst191KI /* Sum */)); // step: 1756
		fConst194KI = (1.0f / (((fConst185KI + 0.74313045f /* Sum */) / fConst184KI) + 1.4500711f /* Sum */)); // step: 1765
		fConst195KI = (((fConst185KI + -0.74313045f /* Sum */) / fConst184KI) + 1.4500711f /* Sum */); // step: 1768
		fConst196KI = (2.0f * (1.4500711f + -fConst189KI /* Sum */)); // step: 1772
		fConst197KI = (11.0520525f / fConst188KI); // step: 1782
		fConst198KI = (fConst197KI + 1.4500711f /* Sum */); // step: 1783
		fConst199KI = (2.0f * (1.4500711f + -fConst197KI /* Sum */)); // step: 1788
		fConst200KI = (1.0f / (((fConst185KI + 0.15748216f /* Sum */) / fConst184KI) + 0.9351402f /* Sum */)); // step: 1797
		fConst201KI = (((fConst185KI + -0.15748216f /* Sum */) / fConst184KI) + 0.9351402f /* Sum */); // step: 1800
		fConst202KI = (2.0f * (0.9351402f + -fConst189KI /* Sum */)); // step: 1804
		fConst203KI = (1.0f / (((fConst185KI + 0.78241307f /* Sum */) / fConst184KI) + 0.2452915f /* Sum */)); // step: 1817
		fConst204KI = (((fConst185KI + -0.78241307f /* Sum */) / fConst184KI) + 0.2452915f /* Sum */); // step: 1820
		fConst205KI = (2.0f * (0.2452915f + -fConst189KI /* Sum */)); // step: 1824
		fConst206KI = (0.0001f / fConst188KI); // step: 1834
		fConst207KI = (fConst206KI + 0.0004332272f /* Sum */); // step: 1835
		fConst208KI = (2.0f * (0.0004332272f + -fConst206KI /* Sum */)); // step: 1840
		fConst209KI = (1.0f / (((fConst185KI + 0.51247865f /* Sum */) / fConst184KI) + 0.6896214f /* Sum */)); // step: 1849
		fConst210KI = (((fConst185KI + -0.51247865f /* Sum */) / fConst184KI) + 0.6896214f /* Sum */); // step: 1852
		fConst211KI = (2.0f * (0.6896214f + -fConst189KI /* Sum */)); // step: 1856
		fConst212KI = (fConst189KI + 7.6217313f /* Sum */); // step: 1866
		fConst213KI = (2.0f * (7.6217313f + -fConst189KI /* Sum */)); // step: 1870
		fConst214KI = (1.0f / (((fConst185KI + 0.16840488f /* Sum */) / fConst184KI) + 1.0693583f /* Sum */)); // step: 1879
		fConst215KI = (((fConst185KI + -0.16840488f /* Sum */) / fConst184KI) + 1.0693583f /* Sum */); // step: 1882
		fConst216KI = (2.0f * (1.0693583f + -fConst189KI /* Sum */)); // step: 1886
		fConst217KI = (fConst189KI + 53.53615f /* Sum */); // step: 1896
		fConst218KI = (2.0f * (53.53615f + -fConst189KI /* Sum */)); // step: 1900
		fConst219KI = tanf((3141.5928f / fConst0KI)); // step: 1908
		fConst220KI = (1.0f / fConst219KI); // step: 1909
		fConst221KI = (1.0f / (((fConst220KI + 3.1897273f /* Sum */) / fConst219KI) + 4.0767817f /* Sum */)); // step: 1913
		fConst222KI = (((fConst220KI + -3.1897273f /* Sum */) / fConst219KI) + 4.0767817f /* Sum */); // step: 1916
		fConst223KI = powf(fConst219KI,2.0f); // step: 1919
		fConst224KI = (1.0f / fConst223KI); // step: 1920
		fConst225KI = (2.0f * (4.0767817f + -fConst224KI /* Sum */)); // step: 1923
		fConst226KI = (0.0017661728f / fConst223KI); // step: 1933
		fConst227KI = (fConst226KI + 0.0004076782f /* Sum */); // step: 1934
		fConst228KI = (2.0f * (0.0004076782f + -fConst226KI /* Sum */)); // step: 1939
		fConst229KI = (1.0f / (((fConst220KI + 0.74313045f /* Sum */) / fConst219KI) + 1.4500711f /* Sum */)); // step: 1948
		fConst230KI = (((fConst220KI + -0.74313045f /* Sum */) / fConst219KI) + 1.4500711f /* Sum */); // step: 1951
		fConst231KI = (2.0f * (1.4500711f + -fConst224KI /* Sum */)); // step: 1955
		fConst232KI = (11.0520525f / fConst223KI); // step: 1965
		fConst233KI = (fConst232KI + 1.4500711f /* Sum */); // step: 1966
		fConst234KI = (2.0f * (1.4500711f + -fConst232KI /* Sum */)); // step: 1971
		fConst235KI = (1.0f / (((fConst220KI + 0.15748216f /* Sum */) / fConst219KI) + 0.9351402f /* Sum */)); // step: 1980
		fConst236KI = (((fConst220KI + -0.15748216f /* Sum */) / fConst219KI) + 0.9351402f /* Sum */); // step: 1983
		fConst237KI = (2.0f * (0.9351402f + -fConst224KI /* Sum */)); // step: 1987
		fConst238KI = (1.0f / (((fConst220KI + 0.78241307f /* Sum */) / fConst219KI) + 0.2452915f /* Sum */)); // step: 2000
		fConst239KI = (((fConst220KI + -0.78241307f /* Sum */) / fConst219KI) + 0.2452915f /* Sum */); // step: 2003
		fConst240KI = (2.0f * (0.2452915f + -fConst224KI /* Sum */)); // step: 2007
		fConst241KI = (0.0001f / fConst223KI); // step: 2017
		fConst242KI = (fConst241KI + 0.0004332272f /* Sum */); // step: 2018
		fConst243KI = (2.0f * (0.0004332272f + -fConst241KI /* Sum */)); // step: 2023
		fConst244KI = (1.0f / (((fConst220KI + 0.51247865f /* Sum */) / fConst219KI) + 0.6896214f /* Sum */)); // step: 2032
		fConst245KI = (((fConst220KI + -0.51247865f /* Sum */) / fConst219KI) + 0.6896214f /* Sum */); // step: 2035
		fConst246KI = (2.0f * (0.6896214f + -fConst224KI /* Sum */)); // step: 2039
		fConst247KI = (fConst224KI + 7.6217313f /* Sum */); // step: 2049
		fConst248KI = (2.0f * (7.6217313f + -fConst224KI /* Sum */)); // step: 2053
		fConst249KI = (1.0f / (((fConst220KI + 0.16840488f /* Sum */) / fConst219KI) + 1.0693583f /* Sum */)); // step: 2062
		fConst250KI = (((fConst220KI + -0.16840488f /* Sum */) / fConst219KI) + 1.0693583f /* Sum */); // step: 2065
		fConst251KI = (2.0f * (1.0693583f + -fConst224KI /* Sum */)); // step: 2069
		fConst252KI = (fConst224KI + 53.53615f /* Sum */); // step: 2079
		fConst253KI = (2.0f * (53.53615f + -fConst224KI /* Sum */)); // step: 2083
		fConst254KI = tanf((1979.0793f / fConst0KI)); // step: 2091
		fConst255KI = (1.0f / fConst254KI); // step: 2092
		fConst256KI = (1.0f / (((fConst255KI + 3.1897273f /* Sum */) / fConst254KI) + 4.0767817f /* Sum */)); // step: 2096
		fConst257KI = (((fConst255KI + -3.1897273f /* Sum */) / fConst254KI) + 4.0767817f /* Sum */); // step: 2099
		fConst258KI = powf(fConst254KI,2.0f); // step: 2102
		fConst259KI = (1.0f / fConst258KI); // step: 2103
		fConst260KI = (2.0f * (4.0767817f + -fConst259KI /* Sum */)); // step: 2106
		fConst261KI = (0.0017661728f / fConst258KI); // step: 2116
		fConst262KI = (fConst261KI + 0.0004076782f /* Sum */); // step: 2117
		fConst263KI = (2.0f * (0.0004076782f + -fConst261KI /* Sum */)); // step: 2122
		fConst264KI = (1.0f / (((fConst255KI + 0.74313045f /* Sum */) / fConst254KI) + 1.4500711f /* Sum */)); // step: 2131
		fConst265KI = (((fConst255KI + -0.74313045f /* Sum */) / fConst254KI) + 1.4500711f /* Sum */); // step: 2134
		fConst266KI = (2.0f * (1.4500711f + -fConst259KI /* Sum */)); // step: 2138
		fConst267KI = (11.0520525f / fConst258KI); // step: 2148
		fConst268KI = (fConst267KI + 1.4500711f /* Sum */); // step: 2149
		fConst269KI = (2.0f * (1.4500711f + -fConst267KI /* Sum */)); // step: 2154
		fConst270KI = (1.0f / (((fConst255KI + 0.15748216f /* Sum */) / fConst254KI) + 0.9351402f /* Sum */)); // step: 2163
		fConst271KI = (((fConst255KI + -0.15748216f /* Sum */) / fConst254KI) + 0.9351402f /* Sum */); // step: 2166
		fConst272KI = (2.0f * (0.9351402f + -fConst259KI /* Sum */)); // step: 2170
		fConst273KI = (1.0f / (((fConst255KI + 0.78241307f /* Sum */) / fConst254KI) + 0.2452915f /* Sum */)); // step: 2183
		fConst274KI = (((fConst255KI + -0.78241307f /* Sum */) / fConst254KI) + 0.2452915f /* Sum */); // step: 2186
		fConst275KI = (2.0f * (0.2452915f + -fConst259KI /* Sum */)); // step: 2190
		fConst276KI = (0.0001f / fConst258KI); // step: 2200
		fConst277KI = (fConst276KI + 0.0004332272f /* Sum */); // step: 2201
		fConst278KI = (2.0f * (0.0004332272f + -fConst276KI /* Sum */)); // step: 2206
		fConst279KI = (1.0f / (((fConst255KI + 0.51247865f /* Sum */) / fConst254KI) + 0.6896214f /* Sum */)); // step: 2215
		fConst280KI = (((fConst255KI + -0.51247865f /* Sum */) / fConst254KI) + 0.6896214f /* Sum */); // step: 2218
		fConst281KI = (2.0f * (0.6896214f + -fConst259KI /* Sum */)); // step: 2222
		fConst282KI = (fConst259KI + 7.6217313f /* Sum */); // step: 2232
		fConst283KI = (2.0f * (7.6217313f + -fConst259KI /* Sum */)); // step: 2236
		fConst284KI = (1.0f / (((fConst255KI + 0.16840488f /* Sum */) / fConst254KI) + 1.0693583f /* Sum */)); // step: 2245
		fConst285KI = (((fConst255KI + -0.16840488f /* Sum */) / fConst254KI) + 1.0693583f /* Sum */); // step: 2248
		fConst286KI = (2.0f * (1.0693583f + -fConst259KI /* Sum */)); // step: 2252
		fConst287KI = (fConst259KI + 53.53615f /* Sum */); // step: 2262
		fConst288KI = (2.0f * (53.53615f + -fConst259KI /* Sum */)); // step: 2266
		fConst289KI = tanf((1246.7418f / fConst0KI)); // step: 2274
		fConst290KI = (1.0f / fConst289KI); // step: 2275
		fConst291KI = (1.0f / (((fConst290KI + 3.1897273f /* Sum */) / fConst289KI) + 4.0767817f /* Sum */)); // step: 2279
		fConst292KI = (((fConst290KI + -3.1897273f /* Sum */) / fConst289KI) + 4.0767817f /* Sum */); // step: 2282
		fConst293KI = powf(fConst289KI,2.0f); // step: 2285
		fConst294KI = (1.0f / fConst293KI); // step: 2286
		fConst295KI = (2.0f * (4.0767817f + -fConst294KI /* Sum */)); // step: 2289
		fConst296KI = (0.0017661728f / fConst293KI); // step: 2299
		fConst297KI = (fConst296KI + 0.0004076782f /* Sum */); // step: 2300
		fConst298KI = (2.0f * (0.0004076782f + -fConst296KI /* Sum */)); // step: 2305
		fConst299KI = (1.0f / (((fConst290KI + 0.74313045f /* Sum */) / fConst289KI) + 1.4500711f /* Sum */)); // step: 2314
		fConst300KI = (((fConst290KI + -0.74313045f /* Sum */) / fConst289KI) + 1.4500711f /* Sum */); // step: 2317
		fConst301KI = (2.0f * (1.4500711f + -fConst294KI /* Sum */)); // step: 2321
		fConst302KI = (11.0520525f / fConst293KI); // step: 2331
		fConst303KI = (fConst302KI + 1.4500711f /* Sum */); // step: 2332
		fConst304KI = (2.0f * (1.4500711f + -fConst302KI /* Sum */)); // step: 2337
		fConst305KI = (1.0f / (((fConst290KI + 0.15748216f /* Sum */) / fConst289KI) + 0.9351402f /* Sum */)); // step: 2346
		fConst306KI = (((fConst290KI + -0.15748216f /* Sum */) / fConst289KI) + 0.9351402f /* Sum */); // step: 2349
		fConst307KI = (2.0f * (0.9351402f + -fConst294KI /* Sum */)); // step: 2353
		fConst308KI = (1.0f / (((fConst290KI + 0.78241307f /* Sum */) / fConst289KI) + 0.2452915f /* Sum */)); // step: 2366
		fConst309KI = (((fConst290KI + -0.78241307f /* Sum */) / fConst289KI) + 0.2452915f /* Sum */); // step: 2369
		fConst310KI = (2.0f * (0.2452915f + -fConst294KI /* Sum */)); // step: 2373
		fConst311KI = (0.0001f / fConst293KI); // step: 2383
		fConst312KI = (fConst311KI + 0.0004332272f /* Sum */); // step: 2384
		fConst313KI = (2.0f * (0.0004332272f + -fConst311KI /* Sum */)); // step: 2389
		fConst314KI = (1.0f / (((fConst290KI + 0.51247865f /* Sum */) / fConst289KI) + 0.6896214f /* Sum */)); // step: 2398
		fConst315KI = (((fConst290KI + -0.51247865f /* Sum */) / fConst289KI) + 0.6896214f /* Sum */); // step: 2401
		fConst316KI = (2.0f * (0.6896214f + -fConst294KI /* Sum */)); // step: 2405
		fConst317KI = (fConst294KI + 7.6217313f /* Sum */); // step: 2415
		fConst318KI = (2.0f * (7.6217313f + -fConst294KI /* Sum */)); // step: 2419
		fConst319KI = (1.0f / (((fConst290KI + 0.16840488f /* Sum */) / fConst289KI) + 1.0693583f /* Sum */)); // step: 2428
		fConst320KI = (((fConst290KI + -0.16840488f /* Sum */) / fConst289KI) + 1.0693583f /* Sum */); // step: 2431
		fConst321KI = (2.0f * (1.0693583f + -fConst294KI /* Sum */)); // step: 2435
		fConst322KI = (fConst294KI + 53.53615f /* Sum */); // step: 2445
		fConst323KI = (2.0f * (53.53615f + -fConst294KI /* Sum */)); // step: 2449
		fConst324KI = tanf((785.3982f / fConst0KI)); // step: 2457
		fConst325KI = (1.0f / fConst324KI); // step: 2458
		fConst326KI = (1.0f / (((fConst325KI + 3.1897273f /* Sum */) / fConst324KI) + 4.0767817f /* Sum */)); // step: 2462
		fConst327KI = (((fConst325KI + -3.1897273f /* Sum */) / fConst324KI) + 4.0767817f /* Sum */); // step: 2465
		fConst328KI = powf(fConst324KI,2.0f); // step: 2468
		fConst329KI = (1.0f / fConst328KI); // step: 2469
		fConst330KI = (2.0f * (4.0767817f + -fConst329KI /* Sum */)); // step: 2472
		fConst331KI = (0.0017661728f / fConst328KI); // step: 2482
		fConst332KI = (fConst331KI + 0.0004076782f /* Sum */); // step: 2483
		fConst333KI = (2.0f * (0.0004076782f + -fConst331KI /* Sum */)); // step: 2488
		fConst334KI = (1.0f / (((fConst325KI + 0.74313045f /* Sum */) / fConst324KI) + 1.4500711f /* Sum */)); // step: 2497
		fConst335KI = (((fConst325KI + -0.74313045f /* Sum */) / fConst324KI) + 1.4500711f /* Sum */); // step: 2500
		fConst336KI = (2.0f * (1.4500711f + -fConst329KI /* Sum */)); // step: 2504
		fConst337KI = (11.0520525f / fConst328KI); // step: 2514
		fConst338KI = (fConst337KI + 1.4500711f /* Sum */); // step: 2515
		fConst339KI = (2.0f * (1.4500711f + -fConst337KI /* Sum */)); // step: 2520
		fConst340KI = (1.0f / (((fConst325KI + 0.15748216f /* Sum */) / fConst324KI) + 0.9351402f /* Sum */)); // step: 2529
		fConst341KI = (((fConst325KI + -0.15748216f /* Sum */) / fConst324KI) + 0.9351402f /* Sum */); // step: 2532
		fConst342KI = (2.0f * (0.9351402f + -fConst329KI /* Sum */)); // step: 2536
		fConst343KI = (1.0f / (((fConst325KI + 0.78241307f /* Sum */) / fConst324KI) + 0.2452915f /* Sum */)); // step: 2549
		fConst344KI = (((fConst325KI + -0.78241307f /* Sum */) / fConst324KI) + 0.2452915f /* Sum */); // step: 2552
		fConst345KI = (2.0f * (0.2452915f + -fConst329KI /* Sum */)); // step: 2556
		fConst346KI = (0.0001f / fConst328KI); // step: 2566
		fConst347KI = (fConst346KI + 0.0004332272f /* Sum */); // step: 2567
		fConst348KI = (2.0f * (0.0004332272f + -fConst346KI /* Sum */)); // step: 2572
		fConst349KI = (1.0f / (((fConst325KI + 0.51247865f /* Sum */) / fConst324KI) + 0.6896214f /* Sum */)); // step: 2581
		fConst350KI = (((fConst325KI + -0.51247865f /* Sum */) / fConst324KI) + 0.6896214f /* Sum */); // step: 2584
		fConst351KI = (2.0f * (0.6896214f + -fConst329KI /* Sum */)); // step: 2588
		fConst352KI = (fConst329KI + 7.6217313f /* Sum */); // step: 2598
		fConst353KI = (2.0f * (7.6217313f + -fConst329KI /* Sum */)); // step: 2602
		fConst354KI = (1.0f / (((fConst325KI + 0.16840488f /* Sum */) / fConst324KI) + 1.0693583f /* Sum */)); // step: 2611
		fConst355KI = (((fConst325KI + -0.16840488f /* Sum */) / fConst324KI) + 1.0693583f /* Sum */); // step: 2614
		fConst356KI = (2.0f * (1.0693583f + -fConst329KI /* Sum */)); // step: 2618
		fConst357KI = (fConst329KI + 53.53615f /* Sum */); // step: 2628
		fConst358KI = (2.0f * (53.53615f + -fConst329KI /* Sum */)); // step: 2632
		fConst359KI = tanf((494.76984f / fConst0KI)); // step: 2640
		fConst360KI = (1.0f / fConst359KI); // step: 2641
		fConst361KI = (1.0f / (((fConst360KI + 3.1897273f /* Sum */) / fConst359KI) + 4.0767817f /* Sum */)); // step: 2645
		fConst362KI = (((fConst360KI + -3.1897273f /* Sum */) / fConst359KI) + 4.0767817f /* Sum */); // step: 2648
		fConst363KI = powf(fConst359KI,2.0f); // step: 2651
		fConst364KI = (1.0f / fConst363KI); // step: 2652
		fConst365KI = (2.0f * (4.0767817f + -fConst364KI /* Sum */)); // step: 2655
		fConst366KI = (0.0017661728f / fConst363KI); // step: 2665
		fConst367KI = (fConst366KI + 0.0004076782f /* Sum */); // step: 2666
		fConst368KI = (2.0f * (0.0004076782f + -fConst366KI /* Sum */)); // step: 2671
		fConst369KI = (1.0f / (((fConst360KI + 0.74313045f /* Sum */) / fConst359KI) + 1.4500711f /* Sum */)); // step: 2680
		fConst370KI = (((fConst360KI + -0.74313045f /* Sum */) / fConst359KI) + 1.4500711f /* Sum */); // step: 2683
		fConst371KI = (2.0f * (1.4500711f + -fConst364KI /* Sum */)); // step: 2687
		fConst372KI = (11.0520525f / fConst363KI); // step: 2697
		fConst373KI = (fConst372KI + 1.4500711f /* Sum */); // step: 2698
		fConst374KI = (2.0f * (1.4500711f + -fConst372KI /* Sum */)); // step: 2703
		fConst375KI = (1.0f / (((fConst360KI + 0.15748216f /* Sum */) / fConst359KI) + 0.9351402f /* Sum */)); // step: 2712
		fConst376KI = (((fConst360KI + -0.15748216f /* Sum */) / fConst359KI) + 0.9351402f /* Sum */); // step: 2715
		fConst377KI = (2.0f * (0.9351402f + -fConst364KI /* Sum */)); // step: 2719
		fConst378KI = (1.0f / (((fConst360KI + 0.78241307f /* Sum */) / fConst359KI) + 0.2452915f /* Sum */)); // step: 2732
		fConst379KI = (((fConst360KI + -0.78241307f /* Sum */) / fConst359KI) + 0.2452915f /* Sum */); // step: 2735
		fConst380KI = (2.0f * (0.2452915f + -fConst364KI /* Sum */)); // step: 2739
		fConst381KI = (0.0001f / fConst363KI); // step: 2749
		fConst382KI = (fConst381KI + 0.0004332272f /* Sum */); // step: 2750
		fConst383KI = (2.0f * (0.0004332272f + -fConst381KI /* Sum */)); // step: 2755
		fConst384KI = (1.0f / (((fConst360KI + 0.51247865f /* Sum */) / fConst359KI) + 0.6896214f /* Sum */)); // step: 2764
		fConst385KI = (((fConst360KI + -0.51247865f /* Sum */) / fConst359KI) + 0.6896214f /* Sum */); // step: 2767
		fConst386KI = (2.0f * (0.6896214f + -fConst364KI /* Sum */)); // step: 2771
		fConst387KI = (fConst364KI + 7.6217313f /* Sum */); // step: 2781
		fConst388KI = (2.0f * (7.6217313f + -fConst364KI /* Sum */)); // step: 2785
		fConst389KI = (1.0f / (((fConst360KI + 0.16840488f /* Sum */) / fConst359KI) + 1.0693583f /* Sum */)); // step: 2794
		fConst390KI = (((fConst360KI + -0.16840488f /* Sum */) / fConst359KI) + 1.0693583f /* Sum */); // step: 2797
		fConst391KI = (2.0f * (1.0693583f + -fConst364KI /* Sum */)); // step: 2801
		fConst392KI = (fConst364KI + 53.53615f /* Sum */); // step: 2811
		fConst393KI = (2.0f * (53.53615f + -fConst364KI /* Sum */)); // step: 2815
		fConst394KI = tanf((311.68546f / fConst0KI)); // step: 2823
		fConst395KI = (1.0f / fConst394KI); // step: 2824
		fConst396KI = (1.0f / (((fConst395KI + 3.1897273f /* Sum */) / fConst394KI) + 4.0767817f /* Sum */)); // step: 2828
		fConst397KI = (((fConst395KI + -3.1897273f /* Sum */) / fConst394KI) + 4.0767817f /* Sum */); // step: 2831
		fConst398KI = powf(fConst394KI,2.0f); // step: 2834
		fConst399KI = (1.0f / fConst398KI); // step: 2835
		fConst400KI = (2.0f * (4.0767817f + -fConst399KI /* Sum */)); // step: 2838
		fConst401KI = (0.0017661728f / fConst398KI); // step: 2848
		fConst402KI = (fConst401KI + 0.0004076782f /* Sum */); // step: 2849
		fConst403KI = (2.0f * (0.0004076782f + -fConst401KI /* Sum */)); // step: 2854
		fConst404KI = (1.0f / (((fConst395KI + 0.74313045f /* Sum */) / fConst394KI) + 1.4500711f /* Sum */)); // step: 2863
		fConst405KI = (((fConst395KI + -0.74313045f /* Sum */) / fConst394KI) + 1.4500711f /* Sum */); // step: 2866
		fConst406KI = (2.0f * (1.4500711f + -fConst399KI /* Sum */)); // step: 2870
		fConst407KI = (11.0520525f / fConst398KI); // step: 2880
		fConst408KI = (fConst407KI + 1.4500711f /* Sum */); // step: 2881
		fConst409KI = (2.0f * (1.4500711f + -fConst407KI /* Sum */)); // step: 2886
		fConst410KI = (1.0f / (((fConst395KI + 0.15748216f /* Sum */) / fConst394KI) + 0.9351402f /* Sum */)); // step: 2895
		fConst411KI = (((fConst395KI + -0.15748216f /* Sum */) / fConst394KI) + 0.9351402f /* Sum */); // step: 2898
		fConst412KI = (2.0f * (0.9351402f + -fConst399KI /* Sum */)); // step: 2902
		fConst413KI = (1.0f / (((fConst395KI + 0.78241307f /* Sum */) / fConst394KI) + 0.2452915f /* Sum */)); // step: 2915
		fConst414KI = (((fConst395KI + -0.78241307f /* Sum */) / fConst394KI) + 0.2452915f /* Sum */); // step: 2918
		fConst415KI = (2.0f * (0.2452915f + -fConst399KI /* Sum */)); // step: 2922
		fConst416KI = (0.0001f / fConst398KI); // step: 2932
		fConst417KI = (fConst416KI + 0.0004332272f /* Sum */); // step: 2933
		fConst418KI = (2.0f * (0.0004332272f + -fConst416KI /* Sum */)); // step: 2938
		fConst419KI = (1.0f / (((fConst395KI + 0.51247865f /* Sum */) / fConst394KI) + 0.6896214f /* Sum */)); // step: 2947
		fConst420KI = (((fConst395KI + -0.51247865f /* Sum */) / fConst394KI) + 0.6896214f /* Sum */); // step: 2950
		fConst421KI = (2.0f * (0.6896214f + -fConst399KI /* Sum */)); // step: 2954
		fConst422KI = (fConst399KI + 7.6217313f /* Sum */); // step: 2964
		fConst423KI = (2.0f * (7.6217313f + -fConst399KI /* Sum */)); // step: 2968
		fConst424KI = (1.0f / (((fConst395KI + 0.16840488f /* Sum */) / fConst394KI) + 1.0693583f /* Sum */)); // step: 2977
		fConst425KI = (((fConst395KI + -0.16840488f /* Sum */) / fConst394KI) + 1.0693583f /* Sum */); // step: 2980
		fConst426KI = (2.0f * (1.0693583f + -fConst399KI /* Sum */)); // step: 2984
		fConst427KI = (fConst399KI + 53.53615f /* Sum */); // step: 2994
		fConst428KI = (2.0f * (53.53615f + -fConst399KI /* Sum */)); // step: 2998
		fConst429KI = tanf((196.34955f / fConst0KI)); // step: 3006
		fConst430KI = (1.0f / fConst429KI); // step: 3007
		fConst431KI = (1.0f / (((fConst430KI + 3.1897273f /* Sum */) / fConst429KI) + 4.0767817f /* Sum */)); // step: 3011
		fConst432KI = (((fConst430KI + -3.1897273f /* Sum */) / fConst429KI) + 4.0767817f /* Sum */); // step: 3014
		fConst433KI = powf(fConst429KI,2.0f); // step: 3017
		fConst434KI = (1.0f / fConst433KI); // step: 3018
		fConst435KI = (2.0f * (4.0767817f + -fConst434KI /* Sum */)); // step: 3021
		fConst436KI = (0.0017661728f / fConst433KI); // step: 3031
		fConst437KI = (fConst436KI + 0.0004076782f /* Sum */); // step: 3032
		fConst438KI = (2.0f * (0.0004076782f + -fConst436KI /* Sum */)); // step: 3037
		fConst439KI = (1.0f / (((fConst430KI + 0.74313045f /* Sum */) / fConst429KI) + 1.4500711f /* Sum */)); // step: 3046
		fConst440KI = (((fConst430KI + -0.74313045f /* Sum */) / fConst429KI) + 1.4500711f /* Sum */); // step: 3049
		fConst441KI = (2.0f * (1.4500711f + -fConst434KI /* Sum */)); // step: 3053
		fConst442KI = (11.0520525f / fConst433KI); // step: 3063
		fConst443KI = (fConst442KI + 1.4500711f /* Sum */); // step: 3064
		fConst444KI = (2.0f * (1.4500711f + -fConst442KI /* Sum */)); // step: 3069
		fConst445KI = (1.0f / (((fConst430KI + 0.15748216f /* Sum */) / fConst429KI) + 0.9351402f /* Sum */)); // step: 3078
		fConst446KI = (((fConst430KI + -0.15748216f /* Sum */) / fConst429KI) + 0.9351402f /* Sum */); // step: 3081
		fConst447KI = (2.0f * (0.9351402f + -fConst434KI /* Sum */)); // step: 3085
		fConst448KI = (1.0f / (((fConst430KI + 0.78241307f /* Sum */) / fConst429KI) + 0.2452915f /* Sum */)); // step: 3098
		fConst449KI = (((fConst430KI + -0.78241307f /* Sum */) / fConst429KI) + 0.2452915f /* Sum */); // step: 3101
		fConst450KI = (2.0f * (0.2452915f + -fConst434KI /* Sum */)); // step: 3105
		fConst451KI = (0.0001f / fConst433KI); // step: 3115
		fConst452KI = (fConst451KI + 0.0004332272f /* Sum */); // step: 3116
		fConst453KI = (2.0f * (0.0004332272f + -fConst451KI /* Sum */)); // step: 3121
		fConst454KI = (1.0f / (((fConst430KI + 0.51247865f /* Sum */) / fConst429KI) + 0.6896214f /* Sum */)); // step: 3130
		fConst455KI = (((fConst430KI + -0.51247865f /* Sum */) / fConst429KI) + 0.6896214f /* Sum */); // step: 3133
		fConst456KI = (2.0f * (0.6896214f + -fConst434KI /* Sum */)); // step: 3137
		fConst457KI = (fConst434KI + 7.6217313f /* Sum */); // step: 3147
		fConst458KI = (2.0f * (7.6217313f + -fConst434KI /* Sum */)); // step: 3151
		fConst459KI = (1.0f / (((fConst430KI + 0.16840488f /* Sum */) / fConst429KI) + 1.0693583f /* Sum */)); // step: 3160
		fConst460KI = (((fConst430KI + -0.16840488f /* Sum */) / fConst429KI) + 1.0693583f /* Sum */); // step: 3163
		fConst461KI = (2.0f * (1.0693583f + -fConst434KI /* Sum */)); // step: 3167
		fConst462KI = (fConst434KI + 53.53615f /* Sum */); // step: 3177
		fConst463KI = (2.0f * (53.53615f + -fConst434KI /* Sum */)); // step: 3181
		fConst464KI = tanf((123.69246f / fConst0KI)); // step: 3189
		fConst465KI = (1.0f / fConst464KI); // step: 3190
		fConst466KI = (1.0f / (((fConst465KI + 3.1897273f /* Sum */) / fConst464KI) + 4.0767817f /* Sum */)); // step: 3194
		fConst467KI = (((fConst465KI + -3.1897273f /* Sum */) / fConst464KI) + 4.0767817f /* Sum */); // step: 3197
		fConst468KI = powf(fConst464KI,2.0f); // step: 3200
		fConst469KI = (1.0f / fConst468KI); // step: 3201
		fConst470KI = (2.0f * (4.0767817f + -fConst469KI /* Sum */)); // step: 3204
		fConst471KI = (0.0017661728f / fConst468KI); // step: 3214
		fConst472KI = (fConst471KI + 0.0004076782f /* Sum */); // step: 3215
		fConst473KI = (2.0f * (0.0004076782f + -fConst471KI /* Sum */)); // step: 3220
		fConst474KI = (1.0f / (((fConst465KI + 0.74313045f /* Sum */) / fConst464KI) + 1.4500711f /* Sum */)); // step: 3229
		fConst475KI = (((fConst465KI + -0.74313045f /* Sum */) / fConst464KI) + 1.4500711f /* Sum */); // step: 3232
		fConst476KI = (2.0f * (1.4500711f + -fConst469KI /* Sum */)); // step: 3236
		fConst477KI = (11.0520525f / fConst468KI); // step: 3246
		fConst478KI = (fConst477KI + 1.4500711f /* Sum */); // step: 3247
		fConst479KI = (2.0f * (1.4500711f + -fConst477KI /* Sum */)); // step: 3252
		fConst480KI = (1.0f / (((fConst465KI + 0.15748216f /* Sum */) / fConst464KI) + 0.9351402f /* Sum */)); // step: 3261
		fConst481KI = (((fConst465KI + -0.15748216f /* Sum */) / fConst464KI) + 0.9351402f /* Sum */); // step: 3264
		fConst482KI = (2.0f * (0.9351402f + -fConst469KI /* Sum */)); // step: 3268
		fConst483KI = (1.0f / (((fConst465KI + 0.78241307f /* Sum */) / fConst464KI) + 0.2452915f /* Sum */)); // step: 3281
		fConst484KI = (((fConst465KI + -0.78241307f /* Sum */) / fConst464KI) + 0.2452915f /* Sum */); // step: 3284
		fConst485KI = (2.0f * (0.2452915f + -fConst469KI /* Sum */)); // step: 3288
		fConst486KI = (0.0001f / fConst468KI); // step: 3298
		fConst487KI = (fConst486KI + 0.0004332272f /* Sum */); // step: 3299
		fConst488KI = (2.0f * (0.0004332272f + -fConst486KI /* Sum */)); // step: 3304
		fConst489KI = (1.0f / (((fConst465KI + 0.51247865f /* Sum */) / fConst464KI) + 0.6896214f /* Sum */)); // step: 3313
		fConst490KI = (((fConst465KI + -0.51247865f /* Sum */) / fConst464KI) + 0.6896214f /* Sum */); // step: 3316
		fConst491KI = (2.0f * (0.6896214f + -fConst469KI /* Sum */)); // step: 3320
		fConst492KI = (fConst469KI + 7.6217313f /* Sum */); // step: 3330
		fConst493KI = (2.0f * (7.6217313f + -fConst469KI /* Sum */)); // step: 3334
		fConst494KI = (1.0f / (((fConst465KI + 0.16840488f /* Sum */) / fConst464KI) + 1.0693583f /* Sum */)); // step: 3343
		fConst495KI = (((fConst465KI + -0.16840488f /* Sum */) / fConst464KI) + 1.0693583f /* Sum */); // step: 3346
		fConst496KI = (2.0f * (1.0693583f + -fConst469KI /* Sum */)); // step: 3350
		fConst497KI = (1e+03f / fConst0KI); // step: 3365
		fConst498KI = (50.06381f / fConst13KI); // step: 3374
		fConst499KI = (fConst498KI + 0.9351402f /* Sum */); // step: 3375
		fConst500KI = (2.0f * (0.9351402f + -fConst498KI /* Sum */)); // step: 3380
		fConst501KI = (50.06381f / fConst48KI); // step: 3403
		fConst502KI = (fConst501KI + 0.9351402f /* Sum */); // step: 3404
		fConst503KI = (2.0f * (0.9351402f + -fConst501KI /* Sum */)); // step: 3409
		fConst504KI = (50.06381f / fConst83KI); // step: 3428
		fConst505KI = (fConst504KI + 0.9351402f /* Sum */); // step: 3429
		fConst506KI = (2.0f * (0.9351402f + -fConst504KI /* Sum */)); // step: 3434
		fConst507KI = (50.06381f / fConst118KI); // step: 3453
		fConst508KI = (fConst507KI + 0.9351402f /* Sum */); // step: 3454
		fConst509KI = (2.0f * (0.9351402f + -fConst507KI /* Sum */)); // step: 3459
		fConst510KI = (50.06381f / fConst153KI); // step: 3478
		fConst511KI = (fConst510KI + 0.9351402f /* Sum */); // step: 3479
		fConst512KI = (2.0f * (0.9351402f + -fConst510KI /* Sum */)); // step: 3484
		fConst513KI = (50.06381f / fConst188KI); // step: 3503
		fConst514KI = (fConst513KI + 0.9351402f /* Sum */); // step: 3504
		fConst515KI = (2.0f * (0.9351402f + -fConst513KI /* Sum */)); // step: 3509
		fConst516KI = (50.06381f / fConst223KI); // step: 3528
		fConst517KI = (fConst516KI + 0.9351402f /* Sum */); // step: 3529
		fConst518KI = (2.0f * (0.9351402f + -fConst516KI /* Sum */)); // step: 3534
		fConst519KI = (50.06381f / fConst258KI); // step: 3553
		fConst520KI = (fConst519KI + 0.9351402f /* Sum */); // step: 3554
		fConst521KI = (2.0f * (0.9351402f + -fConst519KI /* Sum */)); // step: 3559
		fConst522KI = (50.06381f / fConst293KI); // step: 3578
		fConst523KI = (fConst522KI + 0.9351402f /* Sum */); // step: 3579
		fConst524KI = (2.0f * (0.9351402f + -fConst522KI /* Sum */)); // step: 3584
		fConst525KI = (50.06381f / fConst328KI); // step: 3603
		fConst526KI = (fConst525KI + 0.9351402f /* Sum */); // step: 3604
		fConst527KI = (2.0f * (0.9351402f + -fConst525KI /* Sum */)); // step: 3609
		fConst528KI = (50.06381f / fConst363KI); // step: 3628
		fConst529KI = (fConst528KI + 0.9351402f /* Sum */); // step: 3629
		fConst530KI = (2.0f * (0.9351402f + -fConst528KI /* Sum */)); // step: 3634
		fConst531KI = (50.06381f / fConst398KI); // step: 3653
		fConst532KI = (fConst531KI + 0.9351402f /* Sum */); // step: 3654
		fConst533KI = (2.0f * (0.9351402f + -fConst531KI /* Sum */)); // step: 3659
		fConst534KI = (50.06381f / fConst433KI); // step: 3678
		fConst535KI = (fConst534KI + 0.9351402f /* Sum */); // step: 3679
		fConst536KI = (2.0f * (0.9351402f + -fConst534KI /* Sum */)); // step: 3684
		fConst537KI = (50.06381f / fConst468KI); // step: 3703
		fConst538KI = (fConst537KI + 0.9351402f /* Sum */); // step: 3704
		fConst539KI = (2.0f * (0.9351402f + -fConst537KI /* Sum */)); // step: 3709
		fConst540KI = (fConst469KI + 53.53615f /* Sum */); // step: 3728
		fConst541KI = (2.0f * (53.53615f + -fConst469KI /* Sum */)); // step: 3732
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fslider4 = 0.8f;
		fcheckbox0 = 0.0;
		fslider5 = -2e+01f;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fentry0 = 2.0f;
		fcheckbox3 = 0.0;
		fcheckbox4 = 0.0;
		fcheckbox5 = 0.0;
		fslider6 = 2e+02f;
		fslider7 = 0.9f;
		fslider8 = 25.0f;
		fslider9 = 5.0f;
		fcheckbox6 = 0.0;
		fcheckbox7 = 0.0;
		fslider10 = 5e+01f;
		fslider11 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec15SEState = 0;
		fVec17SEState = 0;
		fVec18SEState = 0;
		fVec19SEState = 0;
		fVec21SEState = 0;
		fVec22SEState = 0;
		fVec24SEState = 0;
		fVec26SEState = 0;
		fVec27SEState = 0;
		fVec29SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec33SEState = 0;
		fVec34SEState = 0;
		fVec36SEState = 0;
		fVec38SEState = 0;
		iVec39SIState = 0;
		fVec42SIState = 0;
		for (int j = 0; j < 3; j++) { fVec41SIState[j] = 0; }
		fVec45SEState = 0;
		fVec47SEState = 0;
		fVec66SEState = 0;
		fVec69SEState = 0;
		fVec68SEState = 0;
		for (int j = 0; j < 2; j++) { fVec71SEState[j] = 0; }
		fVec75SEState = 0;
		fVec77SEState = 0;
		fVec80SEState = 0;
		fVec82SEState = 0;
		fVec84SEState = 0;
		fVec78SEState = 0;
		fVec87SEState = 0;
		fVec89SEState = 0;
		for (int j = 0; j < 2; j++) { fVec90SEState[j] = 0; }
		fVec95SEState = 0;
		for (int j = 0; j < 2; j++) { fVec94SEState[j] = 0; }
		fVec98SEState = 0;
		fVec99SEState = 0;
		fVec97SEState = 0;
		fVec101SEState = 0;
		fVec107SEState = 0;
		fVec108SEState = 0;
		fVec106SEState = 0;
		fVec110SEState = 0;
		fVec111SEState = 0;
		fVec113SEState = 0;
		fVec116SEState = 0;
		fVec118SEState = 0;
		fVec120SEState = 0;
		fVec114SEState = 0;
		fVec130SEState = 0;
		for (int j = 0; j < 2; j++) { fVec129SEState[j] = 0; }
		fVec135SEState = 0;
		for (int j = 0; j < 2; j++) { fVec134SEState[j] = 0; }
		fVec140SEState = 0;
		for (int j = 0; j < 2; j++) { fVec139SEState[j] = 0; }
		fVec143SEState = 0;
		for (int j = 0; j < 2; j++) { fVec142SEState[j] = 0; }
		fVec148SEState = 0;
		for (int j = 0; j < 2; j++) { fVec147SEState[j] = 0; }
		fVec153SEState = 0;
		for (int j = 0; j < 2; j++) { fVec152SEState[j] = 0; }
		fVec158SEState = 0;
		for (int j = 0; j < 2; j++) { fVec157SEState[j] = 0; }
		fVec163SEState = 0;
		for (int j = 0; j < 2; j++) { fVec162SEState[j] = 0; }
		fVec168SEState = 0;
		for (int j = 0; j < 2; j++) { fVec167SEState[j] = 0; }
		fVec171SEState = 0;
		for (int j = 0; j < 2; j++) { fVec170SEState[j] = 0; }
		fVec176SEState = 0;
		for (int j = 0; j < 2; j++) { fVec175SEState[j] = 0; }
		fVec181SEState = 0;
		for (int j = 0; j < 2; j++) { fVec180SEState[j] = 0; }
		fVec186SEState = 0;
		for (int j = 0; j < 2; j++) { fVec185SEState[j] = 0; }
		fVec191SEState = 0;
		for (int j = 0; j < 2; j++) { fVec190SEState[j] = 0; }
		fVec196SEState = 0;
		for (int j = 0; j < 2; j++) { fVec195SEState[j] = 0; }
		fVec199SEState = 0;
		for (int j = 0; j < 2; j++) { fVec198SEState[j] = 0; }
		fVec204SEState = 0;
		for (int j = 0; j < 2; j++) { fVec203SEState[j] = 0; }
		fVec209SEState = 0;
		for (int j = 0; j < 2; j++) { fVec208SEState[j] = 0; }
		fVec214SEState = 0;
		for (int j = 0; j < 2; j++) { fVec213SEState[j] = 0; }
		fVec219SEState = 0;
		for (int j = 0; j < 2; j++) { fVec218SEState[j] = 0; }
		fVec224SEState = 0;
		for (int j = 0; j < 2; j++) { fVec223SEState[j] = 0; }
		fVec227SEState = 0;
		for (int j = 0; j < 2; j++) { fVec226SEState[j] = 0; }
		fVec232SEState = 0;
		for (int j = 0; j < 2; j++) { fVec231SEState[j] = 0; }
		fVec237SEState = 0;
		for (int j = 0; j < 2; j++) { fVec236SEState[j] = 0; }
		fVec242SEState = 0;
		for (int j = 0; j < 2; j++) { fVec241SEState[j] = 0; }
		fVec247SEState = 0;
		for (int j = 0; j < 2; j++) { fVec246SEState[j] = 0; }
		fVec252SEState = 0;
		for (int j = 0; j < 2; j++) { fVec251SEState[j] = 0; }
		fVec255SEState = 0;
		for (int j = 0; j < 2; j++) { fVec254SEState[j] = 0; }
		fVec260SEState = 0;
		for (int j = 0; j < 2; j++) { fVec259SEState[j] = 0; }
		fVec265SEState = 0;
		for (int j = 0; j < 2; j++) { fVec264SEState[j] = 0; }
		fVec270SEState = 0;
		for (int j = 0; j < 2; j++) { fVec269SEState[j] = 0; }
		fVec275SEState = 0;
		for (int j = 0; j < 2; j++) { fVec274SEState[j] = 0; }
		fVec280SEState = 0;
		for (int j = 0; j < 2; j++) { fVec279SEState[j] = 0; }
		fVec283SEState = 0;
		for (int j = 0; j < 2; j++) { fVec282SEState[j] = 0; }
		fVec288SEState = 0;
		for (int j = 0; j < 2; j++) { fVec287SEState[j] = 0; }
		fVec293SEState = 0;
		for (int j = 0; j < 2; j++) { fVec292SEState[j] = 0; }
		fVec298SEState = 0;
		for (int j = 0; j < 2; j++) { fVec297SEState[j] = 0; }
		fVec303SEState = 0;
		for (int j = 0; j < 2; j++) { fVec302SEState[j] = 0; }
		fVec308SEState = 0;
		for (int j = 0; j < 2; j++) { fVec307SEState[j] = 0; }
		fVec311SEState = 0;
		for (int j = 0; j < 2; j++) { fVec310SEState[j] = 0; }
		fVec316SEState = 0;
		for (int j = 0; j < 2; j++) { fVec315SEState[j] = 0; }
		fVec321SEState = 0;
		for (int j = 0; j < 2; j++) { fVec320SEState[j] = 0; }
		fVec326SEState = 0;
		for (int j = 0; j < 2; j++) { fVec325SEState[j] = 0; }
		fVec331SEState = 0;
		for (int j = 0; j < 2; j++) { fVec330SEState[j] = 0; }
		fVec336SEState = 0;
		for (int j = 0; j < 2; j++) { fVec335SEState[j] = 0; }
		fVec339SEState = 0;
		for (int j = 0; j < 2; j++) { fVec338SEState[j] = 0; }
		fVec344SEState = 0;
		for (int j = 0; j < 2; j++) { fVec343SEState[j] = 0; }
		fVec349SEState = 0;
		for (int j = 0; j < 2; j++) { fVec348SEState[j] = 0; }
		fVec354SEState = 0;
		for (int j = 0; j < 2; j++) { fVec353SEState[j] = 0; }
		fVec359SEState = 0;
		for (int j = 0; j < 2; j++) { fVec358SEState[j] = 0; }
		fVec364SEState = 0;
		for (int j = 0; j < 2; j++) { fVec363SEState[j] = 0; }
		fVec367SEState = 0;
		for (int j = 0; j < 2; j++) { fVec366SEState[j] = 0; }
		fVec372SEState = 0;
		for (int j = 0; j < 2; j++) { fVec371SEState[j] = 0; }
		fVec377SEState = 0;
		for (int j = 0; j < 2; j++) { fVec376SEState[j] = 0; }
		fVec382SEState = 0;
		for (int j = 0; j < 2; j++) { fVec381SEState[j] = 0; }
		fVec387SEState = 0;
		for (int j = 0; j < 2; j++) { fVec386SEState[j] = 0; }
		fVec392SEState = 0;
		for (int j = 0; j < 2; j++) { fVec391SEState[j] = 0; }
		fVec395SEState = 0;
		for (int j = 0; j < 2; j++) { fVec394SEState[j] = 0; }
		fVec400SEState = 0;
		for (int j = 0; j < 2; j++) { fVec399SEState[j] = 0; }
		fVec405SEState = 0;
		for (int j = 0; j < 2; j++) { fVec404SEState[j] = 0; }
		fVec410SEState = 0;
		for (int j = 0; j < 2; j++) { fVec409SEState[j] = 0; }
		fVec415SEState = 0;
		for (int j = 0; j < 2; j++) { fVec414SEState[j] = 0; }
		fVec420SEState = 0;
		for (int j = 0; j < 2; j++) { fVec419SEState[j] = 0; }
		fVec423SEState = 0;
		for (int j = 0; j < 2; j++) { fVec422SEState[j] = 0; }
		fVec428SEState = 0;
		for (int j = 0; j < 2; j++) { fVec427SEState[j] = 0; }
		fVec433SEState = 0;
		for (int j = 0; j < 2; j++) { fVec432SEState[j] = 0; }
		fVec438SEState = 0;
		for (int j = 0; j < 2; j++) { fVec437SEState[j] = 0; }
		fVec443SEState = 0;
		for (int j = 0; j < 2; j++) { fVec442SEState[j] = 0; }
		fVec448SEState = 0;
		for (int j = 0; j < 2; j++) { fVec447SEState[j] = 0; }
		fVec451SEState = 0;
		for (int j = 0; j < 2; j++) { fVec450SEState[j] = 0; }
		fVec456SEState = 0;
		for (int j = 0; j < 2; j++) { fVec455SEState[j] = 0; }
		fVec461SEState = 0;
		for (int j = 0; j < 2; j++) { fVec460SEState[j] = 0; }
		fVec466SEState = 0;
		for (int j = 0; j < 2; j++) { fVec465SEState[j] = 0; }
		fVec471SEState = 0;
		for (int j = 0; j < 2; j++) { fVec470SEState[j] = 0; }
		fVec476SEState = 0;
		for (int j = 0; j < 2; j++) { fVec475SEState[j] = 0; }
		fVec479SEState = 0;
		for (int j = 0; j < 2; j++) { fVec478SEState[j] = 0; }
		fVec484SEState = 0;
		for (int j = 0; j < 2; j++) { fVec483SEState[j] = 0; }
		fVec489SEState = 0;
		for (int j = 0; j < 2; j++) { fVec488SEState[j] = 0; }
		fVec494SEState = 0;
		for (int j = 0; j < 2; j++) { fVec493SEState[j] = 0; }
		fVec499SEState = 0;
		for (int j = 0; j < 2; j++) { fVec498SEState[j] = 0; }
		fVec504SEState = 0;
		for (int j = 0; j < 2; j++) { fVec503SEState[j] = 0; }
		fVec507SEState = 0;
		for (int j = 0; j < 2; j++) { fVec506SEState[j] = 0; }
		fVec512SEState = 0;
		for (int j = 0; j < 2; j++) { fVec511SEState[j] = 0; }
		fVec517SEState = 0;
		for (int j = 0; j < 2; j++) { fVec516SEState[j] = 0; }
		fVec519SEState = 0;
		fVec523SEState = 0;
		fVec527SEState = 0;
		fVec531SEState = 0;
		fVec535SEState = 0;
		fVec539SEState = 0;
		fVec543SEState = 0;
		fVec547SEState = 0;
		fVec551SEState = 0;
		fVec555SEState = 0;
		fVec559SEState = 0;
		fVec563SEState = 0;
		fVec567SEState = 0;
		fVec571SEState = 0;
		fVec575SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vcf_wah_pedals");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider5, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider5, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox2, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "1", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox3);
		ui_interface->declare(&fcheckbox1, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox1);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/vegf.html");
		ui_interface->openHorizontalBox("CRYBABY");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the wah pedal has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "tooltip", "wah pedal angle between 0 (rocked back) and 1 (rocked forward)");
		ui_interface->addHorizontalSlider("Wah parameter", &fslider4, 0.8f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Fourth-order wah effect made using moog_vcf");
		ui_interface->openHorizontalBox("WAH4");
		ui_interface->declare(&fcheckbox5, "0", "");
		ui_interface->declare(&fcheckbox5, "tooltip", "When this is checked, the wah pedal has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox5);
		ui_interface->declare(&fslider6, "1", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "tooltip", "wah resonance frequency in Hz");
		ui_interface->addHorizontalSlider("Resonance Frequency", &fslider6, 2e+02f, 1e+02f, 2e+03f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's effect.lib for info and references");
		ui_interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox4, "0", "");
		ui_interface->declare(&fcheckbox4, "tooltip", "When this is checked, the Moog VCF has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox4);
		ui_interface->declare(&fcheckbox6, "1", "");
		ui_interface->declare(&fcheckbox6, "tooltip", "Select moog_vcf_2b (two-biquad) implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface->addCheckButton("Use Biquads", &fcheckbox6);
		ui_interface->declare(&fcheckbox7, "2", "");
		ui_interface->declare(&fcheckbox7, "tooltip", "If using biquads, make them normalized ladders (moog_vcf_2bn)");
		ui_interface->addCheckButton("Normalized Ladders", &fcheckbox7);
		ui_interface->closeBox();
		ui_interface->declare(&fslider8, "1", "");
		ui_interface->declare(&fslider8, "tooltip", "The VCF resonates at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).  The VCF response is flat below the corner frequency, and rolls off -24 dB per octave above.");
		ui_interface->declare(&fslider8, "unit", "PK");
		ui_interface->addHorizontalSlider("Corner Frequency", &fslider8, 25.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider7, "2", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Amount of resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface->addHorizontalSlider("Corner Resonance", &fslider7, 0.9f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider9, "3", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "output level in decibels");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addHorizontalSlider("VCF Output Level", &fslider9, 5.0f, -6e+01f, 2e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "5", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider11, "0", "");
		ui_interface->declare(&fslider11, "scale", "log");
		ui_interface->declare(&fslider11, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider11, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider11, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider10, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider10, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fVec9SE[2];
		float 	fTemp10SE; // step: 72
		float 	fVec10SE[2];
		float 	fTemp11SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp12SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp13SE; // step: 85
		float 	fSlow2BE = ((0.01f * float(fslider2)) + 1.0f /* Sum */); // Zone 2, step: 90
		float 	fTemp14SE; // step: 93
		float 	fTemp15SE; // step: 94
		float 	fVec15SE[2];
		float 	fTemp16SE; // step: 100
		float 	fTemp17SE; // step: 101
		float 	fTemp18SE; // step: 102
		float 	fTemp19SE; // step: 103
		float 	fVec17SE[2];
		float 	fTemp20SE; // step: 105
		float 	fTemp21SE; // step: 106
		float 	fVec18SE[2];
		float 	fVec19SE[2];
		float 	fVec21SE[2];
		float 	fTemp22SE; // step: 118
		float 	fVec22SE[2];
		float 	fTemp23SE; // step: 123
		float 	fVec24SE[2];
		float 	fTemp24SE; // step: 128
		float 	fVec26SE[2];
		float 	fTemp25SE; // step: 131
		float 	fSlow3BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 134
		float 	fTemp26SE; // step: 137
		float 	fTemp27SE; // step: 138
		float 	fVec27SE[2];
		float 	fTemp28SE; // step: 144
		float 	fTemp29SE; // step: 145
		float 	fTemp30SE; // step: 146
		float 	fTemp31SE; // step: 147
		float 	fVec29SE[2];
		float 	fTemp32SE; // step: 149
		float 	fTemp33SE; // step: 150
		float 	fVec30SE[2];
		float 	fVec31SE[2];
		float 	fVec33SE[2];
		float 	fTemp34SE; // step: 162
		float 	fVec34SE[2];
		float 	fTemp35SE; // step: 167
		float 	fVec36SE[2];
		float 	fTemp36SE; // step: 172
		float 	fVec38SE[2];
		int 	iVec39SI[2];
		float 	fTemp37SI; // step: 184
		float 	fTemp38SI; // step: 187
		float 	fTemp39SI; // step: 195
		float 	fVec42SI[2];
		float 	fTemp40SI; // step: 199
		float 	fVec41SI[4];
		float 	fSlow4BE = float(fslider4); // Zone 2, step: 203
		float 	fSlow5BE = (0.0001f * powf(4.0f,fSlow4BE)); // Zone 2, step: 206
		float 	fVec45SE[2];
		int 	iSlow6BE = int(float(fcheckbox0)); // Zone 2, step: 215
		float 	fSlow7BE = (0.001f * powf(1e+01f,(0.05f * float(fslider5)))); // Zone 2, step: 223
		float 	fVec47SE[2];
		float 	fTemp41SE; // step: 229
		int 	iSlow8BE = int(float(fcheckbox1)); // Zone 2, step: 233
		int 	iSlow9BE = int(float(fcheckbox2)); // Zone 2, step: 235
		int 	iSlow10BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 239
		int 	iSlow11BE = (iSlow10BE >= 2); // Zone 2, step: 240
		int 	iSlow12BE = (iSlow10BE >= 1); // Zone 2, step: 241
		float 	fTemp42SC; // step: 245
		int 	iSlow13BE = (iSlow10BE >= 3); // Zone 2, step: 253
		float 	fTemp43SC; // step: 258
		float 	fTemp44SC; // step: 273
		int 	iSlow14BE = int(float(fcheckbox3)); // Zone 2, step: 336
		float 	fTemp45SE; // step: 351
		float 	fSlow15BE = powf(2.0f,(2.3f * fSlow4BE)); // Zone 2, step: 360
		float 	fSlow16BE = (1.0f + -(fConst6KI * (fSlow15BE / powf(2.0f,((2.0f * (1.0f + -fSlow4BE /* Sum */)) + 1.0f /* Sum */)))) /* Sum */); // Zone 2, step: 375
		float 	fVec66SE[2];
		float 	fSlow17BE = (0.001f * powf(fSlow16BE,2.0f)); // Zone 2, step: 387
		float 	fVec69SE[2];
		float 	fVec68SE[2];
		float 	fTemp46SE; // step: 399
		float 	fVec71SE[3];
		int 	iSlow18BE = int(float(fcheckbox4)); // Zone 2, step: 401
		int 	iSlow19BE = int(float(fcheckbox5)); // Zone 2, step: 403
		float 	fTemp47SE; // step: 408
		float 	fSlow20BE = (0.001f * float(fslider6)); // Zone 2, step: 415
		float 	fVec75SE[2];
		float 	fTemp48SE; // step: 422
		float 	fTemp49SE; // step: 424
		float 	fVec77SE[2];
		float 	fVec80SE[2];
		float 	fVec82SE[2];
		float 	fVec84SE[2];
		float 	fVec78SE[2];
		float 	fTemp50SE; // step: 459
		float 	fTemp51SE; // step: 460
		float 	fSlow21BE = float(fslider7); // Zone 2, step: 464
		float 	fSlow22BE = std::min(1.4127994f, (1.4142135f * fSlow21BE)); // Zone 2, step: 466
		float 	fSlow23BE = (1.4142135f * fSlow22BE); // Zone 2, step: 467
		float 	fSlow24BE = powf(fSlow22BE,2.0f); // Zone 2, step: 468
		float 	fSlow25BE = (0.44f * powf(2.0f,(0.083333336f * (float(fslider8) + -49.0f /* Sum */)))); // Zone 2, step: 478
		float 	fVec87SE[2];
		float 	fTemp52SE; // step: 484
		float 	fTemp53SE; // step: 488
		float 	fTemp54SE; // step: 489
		float 	fTemp55SE; // step: 492
		float 	fTemp56SE; // step: 496
		float 	fTemp57SE; // step: 501
		float 	fVec89SE[2];
		float 	fTemp58SE; // step: 512
		float 	fVec90SE[3];
		float 	fTemp59SE; // step: 518
		float 	fVec95SE[2];
		float 	fTemp60SE; // step: 536
		float 	fVec94SE[3];
		float 	fSlow26BE = powf((1.4127994f * fSlow21BE),2.0f); // Zone 2, step: 540
		float 	fSlow27BE = (1.998f * fSlow21BE); // Zone 2, step: 542
		float 	fTemp61SE; // step: 545
		float 	fTemp62SE; // step: 546
		float 	fTemp63SE; // step: 554
		float 	fTemp64SE; // step: 555
		float 	fTemp65SE; // step: 557
		float 	fTemp66SE; // step: 560
		float 	fTemp67SE; // step: 562
		float 	fTemp68SE; // step: 568
		float 	fTemp69SE; // step: 570
		float 	fTemp70SE; // step: 572
		float 	fTemp71SE; // step: 578
		float 	fTemp72SE; // step: 581
		float 	fTemp73SE; // step: 583
		float 	fVec98SE[2];
		float 	fVec99SE[2];
		float 	fVec97SE[2];
		float 	fVec101SE[2];
		float 	fTemp74SE; // step: 604
		float 	fTemp75SE; // step: 606
		float 	fTemp76SE; // step: 620
		float 	fTemp77SE; // step: 623
		float 	fTemp78SE; // step: 627
		float 	fTemp79SE; // step: 628
		float 	fTemp80SE; // step: 630
		float 	fTemp81SE; // step: 633
		float 	fTemp82SE; // step: 635
		float 	fTemp83SE; // step: 642
		float 	fTemp84SE; // step: 643
		float 	fTemp85SE; // step: 649
		float 	fTemp86SE; // step: 652
		float 	fTemp87SE; // step: 654
		float 	fVec107SE[2];
		float 	fVec108SE[2];
		float 	fSlow28BE = (-1.998f * fSlow21BE); // Zone 2, step: 664
		float 	fTemp88SE; // step: 665
		float 	fTemp89SE; // step: 668
		float 	fTemp90SE; // step: 670
		float 	fVec106SE[2];
		float 	fVec110SE[2];
		float 	fSlow29BE = (0.001f * powf(1e+01f,(0.05f * float(fslider9)))); // Zone 2, step: 688
		float 	fVec111SE[2];
		int 	iSlow30BE = int(float(fcheckbox6)); // Zone 2, step: 696
		float 	fTemp91SE; // step: 697
		float 	fTemp92SE; // step: 699
		float 	fSlow31BE = (4.0f * std::max(0.0f, std::min(powf(fSlow21BE,4.0f), 0.999999f))); // Zone 2, step: 707
		float 	fVec113SE[2];
		float 	fVec116SE[2];
		float 	fVec118SE[2];
		float 	fVec120SE[2];
		float 	fVec114SE[2];
		int 	iSlow32BE = int(float(fcheckbox7)); // Zone 2, step: 738
		float 	fSlow33BE = (-1.4142135f * fSlow22BE); // Zone 2, step: 740
		float 	fTemp93SE; // step: 760
		float 	fTemp94SE; // step: 782
		float 	fTemp95SE; // step: 797
		float 	fVec130SE[2];
		float 	fTemp96SE; // step: 812
		float 	fVec129SE[3];
		float 	fTemp97SE; // step: 837
		float 	fVec135SE[2];
		float 	fTemp98SE; // step: 849
		float 	fVec134SE[3];
		float 	fTemp99SE; // step: 873
		float 	fVec140SE[2];
		float 	fTemp100SE; // step: 885
		float 	fVec139SE[3];
		float 	fTemp101SE; // step: 896
		float 	fVec143SE[2];
		float 	fTemp102SE; // step: 908
		float 	fVec142SE[3];
		float 	fTemp103SE; // step: 933
		float 	fVec148SE[2];
		float 	fTemp104SE; // step: 945
		float 	fVec147SE[3];
		float 	fTemp105SE; // step: 967
		float 	fVec153SE[2];
		float 	fTemp106SE; // step: 979
		float 	fVec152SE[3];
		float 	fTemp107SE; // step: 990
		float 	fTemp108SE; // step: 1002
		float 	fVec158SE[2];
		float 	fTemp109SE; // step: 1017
		float 	fVec157SE[3];
		float 	fTemp110SE; // step: 1037
		float 	fVec163SE[2];
		float 	fTemp111SE; // step: 1049
		float 	fVec162SE[3];
		float 	fTemp112SE; // step: 1069
		float 	fVec168SE[2];
		float 	fTemp113SE; // step: 1081
		float 	fVec167SE[3];
		float 	fTemp114SE; // step: 1089
		float 	fVec171SE[2];
		float 	fTemp115SE; // step: 1101
		float 	fVec170SE[3];
		float 	fTemp116SE; // step: 1121
		float 	fVec176SE[2];
		float 	fTemp117SE; // step: 1133
		float 	fVec175SE[3];
		float 	fTemp118SE; // step: 1151
		float 	fVec181SE[2];
		float 	fTemp119SE; // step: 1163
		float 	fVec180SE[3];
		float 	fTemp120SE; // step: 1173
		float 	fTemp121SE; // step: 1185
		float 	fVec186SE[2];
		float 	fTemp122SE; // step: 1200
		float 	fVec185SE[3];
		float 	fTemp123SE; // step: 1220
		float 	fVec191SE[2];
		float 	fTemp124SE; // step: 1232
		float 	fVec190SE[3];
		float 	fTemp125SE; // step: 1252
		float 	fVec196SE[2];
		float 	fTemp126SE; // step: 1264
		float 	fVec195SE[3];
		float 	fTemp127SE; // step: 1272
		float 	fVec199SE[2];
		float 	fTemp128SE; // step: 1284
		float 	fVec198SE[3];
		float 	fTemp129SE; // step: 1304
		float 	fVec204SE[2];
		float 	fTemp130SE; // step: 1316
		float 	fVec203SE[3];
		float 	fTemp131SE; // step: 1334
		float 	fVec209SE[2];
		float 	fTemp132SE; // step: 1346
		float 	fVec208SE[3];
		float 	fTemp133SE; // step: 1356
		float 	fTemp134SE; // step: 1368
		float 	fVec214SE[2];
		float 	fTemp135SE; // step: 1383
		float 	fVec213SE[3];
		float 	fTemp136SE; // step: 1403
		float 	fVec219SE[2];
		float 	fTemp137SE; // step: 1415
		float 	fVec218SE[3];
		float 	fTemp138SE; // step: 1435
		float 	fVec224SE[2];
		float 	fTemp139SE; // step: 1447
		float 	fVec223SE[3];
		float 	fTemp140SE; // step: 1455
		float 	fVec227SE[2];
		float 	fTemp141SE; // step: 1467
		float 	fVec226SE[3];
		float 	fTemp142SE; // step: 1487
		float 	fVec232SE[2];
		float 	fTemp143SE; // step: 1499
		float 	fVec231SE[3];
		float 	fTemp144SE; // step: 1517
		float 	fVec237SE[2];
		float 	fTemp145SE; // step: 1529
		float 	fVec236SE[3];
		float 	fTemp146SE; // step: 1539
		float 	fTemp147SE; // step: 1551
		float 	fVec242SE[2];
		float 	fTemp148SE; // step: 1566
		float 	fVec241SE[3];
		float 	fTemp149SE; // step: 1586
		float 	fVec247SE[2];
		float 	fTemp150SE; // step: 1598
		float 	fVec246SE[3];
		float 	fTemp151SE; // step: 1618
		float 	fVec252SE[2];
		float 	fTemp152SE; // step: 1630
		float 	fVec251SE[3];
		float 	fTemp153SE; // step: 1638
		float 	fVec255SE[2];
		float 	fTemp154SE; // step: 1650
		float 	fVec254SE[3];
		float 	fTemp155SE; // step: 1670
		float 	fVec260SE[2];
		float 	fTemp156SE; // step: 1682
		float 	fVec259SE[3];
		float 	fTemp157SE; // step: 1700
		float 	fVec265SE[2];
		float 	fTemp158SE; // step: 1712
		float 	fVec264SE[3];
		float 	fTemp159SE; // step: 1722
		float 	fTemp160SE; // step: 1734
		float 	fVec270SE[2];
		float 	fTemp161SE; // step: 1749
		float 	fVec269SE[3];
		float 	fTemp162SE; // step: 1769
		float 	fVec275SE[2];
		float 	fTemp163SE; // step: 1781
		float 	fVec274SE[3];
		float 	fTemp164SE; // step: 1801
		float 	fVec280SE[2];
		float 	fTemp165SE; // step: 1813
		float 	fVec279SE[3];
		float 	fTemp166SE; // step: 1821
		float 	fVec283SE[2];
		float 	fTemp167SE; // step: 1833
		float 	fVec282SE[3];
		float 	fTemp168SE; // step: 1853
		float 	fVec288SE[2];
		float 	fTemp169SE; // step: 1865
		float 	fVec287SE[3];
		float 	fTemp170SE; // step: 1883
		float 	fVec293SE[2];
		float 	fTemp171SE; // step: 1895
		float 	fVec292SE[3];
		float 	fTemp172SE; // step: 1905
		float 	fTemp173SE; // step: 1917
		float 	fVec298SE[2];
		float 	fTemp174SE; // step: 1932
		float 	fVec297SE[3];
		float 	fTemp175SE; // step: 1952
		float 	fVec303SE[2];
		float 	fTemp176SE; // step: 1964
		float 	fVec302SE[3];
		float 	fTemp177SE; // step: 1984
		float 	fVec308SE[2];
		float 	fTemp178SE; // step: 1996
		float 	fVec307SE[3];
		float 	fTemp179SE; // step: 2004
		float 	fVec311SE[2];
		float 	fTemp180SE; // step: 2016
		float 	fVec310SE[3];
		float 	fTemp181SE; // step: 2036
		float 	fVec316SE[2];
		float 	fTemp182SE; // step: 2048
		float 	fVec315SE[3];
		float 	fTemp183SE; // step: 2066
		float 	fVec321SE[2];
		float 	fTemp184SE; // step: 2078
		float 	fVec320SE[3];
		float 	fTemp185SE; // step: 2088
		float 	fTemp186SE; // step: 2100
		float 	fVec326SE[2];
		float 	fTemp187SE; // step: 2115
		float 	fVec325SE[3];
		float 	fTemp188SE; // step: 2135
		float 	fVec331SE[2];
		float 	fTemp189SE; // step: 2147
		float 	fVec330SE[3];
		float 	fTemp190SE; // step: 2167
		float 	fVec336SE[2];
		float 	fTemp191SE; // step: 2179
		float 	fVec335SE[3];
		float 	fTemp192SE; // step: 2187
		float 	fVec339SE[2];
		float 	fTemp193SE; // step: 2199
		float 	fVec338SE[3];
		float 	fTemp194SE; // step: 2219
		float 	fVec344SE[2];
		float 	fTemp195SE; // step: 2231
		float 	fVec343SE[3];
		float 	fTemp196SE; // step: 2249
		float 	fVec349SE[2];
		float 	fTemp197SE; // step: 2261
		float 	fVec348SE[3];
		float 	fTemp198SE; // step: 2271
		float 	fTemp199SE; // step: 2283
		float 	fVec354SE[2];
		float 	fTemp200SE; // step: 2298
		float 	fVec353SE[3];
		float 	fTemp201SE; // step: 2318
		float 	fVec359SE[2];
		float 	fTemp202SE; // step: 2330
		float 	fVec358SE[3];
		float 	fTemp203SE; // step: 2350
		float 	fVec364SE[2];
		float 	fTemp204SE; // step: 2362
		float 	fVec363SE[3];
		float 	fTemp205SE; // step: 2370
		float 	fVec367SE[2];
		float 	fTemp206SE; // step: 2382
		float 	fVec366SE[3];
		float 	fTemp207SE; // step: 2402
		float 	fVec372SE[2];
		float 	fTemp208SE; // step: 2414
		float 	fVec371SE[3];
		float 	fTemp209SE; // step: 2432
		float 	fVec377SE[2];
		float 	fTemp210SE; // step: 2444
		float 	fVec376SE[3];
		float 	fTemp211SE; // step: 2454
		float 	fTemp212SE; // step: 2466
		float 	fVec382SE[2];
		float 	fTemp213SE; // step: 2481
		float 	fVec381SE[3];
		float 	fTemp214SE; // step: 2501
		float 	fVec387SE[2];
		float 	fTemp215SE; // step: 2513
		float 	fVec386SE[3];
		float 	fTemp216SE; // step: 2533
		float 	fVec392SE[2];
		float 	fTemp217SE; // step: 2545
		float 	fVec391SE[3];
		float 	fTemp218SE; // step: 2553
		float 	fVec395SE[2];
		float 	fTemp219SE; // step: 2565
		float 	fVec394SE[3];
		float 	fTemp220SE; // step: 2585
		float 	fVec400SE[2];
		float 	fTemp221SE; // step: 2597
		float 	fVec399SE[3];
		float 	fTemp222SE; // step: 2615
		float 	fVec405SE[2];
		float 	fTemp223SE; // step: 2627
		float 	fVec404SE[3];
		float 	fTemp224SE; // step: 2637
		float 	fTemp225SE; // step: 2649
		float 	fVec410SE[2];
		float 	fTemp226SE; // step: 2664
		float 	fVec409SE[3];
		float 	fTemp227SE; // step: 2684
		float 	fVec415SE[2];
		float 	fTemp228SE; // step: 2696
		float 	fVec414SE[3];
		float 	fTemp229SE; // step: 2716
		float 	fVec420SE[2];
		float 	fTemp230SE; // step: 2728
		float 	fVec419SE[3];
		float 	fTemp231SE; // step: 2736
		float 	fVec423SE[2];
		float 	fTemp232SE; // step: 2748
		float 	fVec422SE[3];
		float 	fTemp233SE; // step: 2768
		float 	fVec428SE[2];
		float 	fTemp234SE; // step: 2780
		float 	fVec427SE[3];
		float 	fTemp235SE; // step: 2798
		float 	fVec433SE[2];
		float 	fTemp236SE; // step: 2810
		float 	fVec432SE[3];
		float 	fTemp237SE; // step: 2820
		float 	fTemp238SE; // step: 2832
		float 	fVec438SE[2];
		float 	fTemp239SE; // step: 2847
		float 	fVec437SE[3];
		float 	fTemp240SE; // step: 2867
		float 	fVec443SE[2];
		float 	fTemp241SE; // step: 2879
		float 	fVec442SE[3];
		float 	fTemp242SE; // step: 2899
		float 	fVec448SE[2];
		float 	fTemp243SE; // step: 2911
		float 	fVec447SE[3];
		float 	fTemp244SE; // step: 2919
		float 	fVec451SE[2];
		float 	fTemp245SE; // step: 2931
		float 	fVec450SE[3];
		float 	fTemp246SE; // step: 2951
		float 	fVec456SE[2];
		float 	fTemp247SE; // step: 2963
		float 	fVec455SE[3];
		float 	fTemp248SE; // step: 2981
		float 	fVec461SE[2];
		float 	fTemp249SE; // step: 2993
		float 	fVec460SE[3];
		float 	fTemp250SE; // step: 3003
		float 	fTemp251SE; // step: 3015
		float 	fVec466SE[2];
		float 	fTemp252SE; // step: 3030
		float 	fVec465SE[3];
		float 	fTemp253SE; // step: 3050
		float 	fVec471SE[2];
		float 	fTemp254SE; // step: 3062
		float 	fVec470SE[3];
		float 	fTemp255SE; // step: 3082
		float 	fVec476SE[2];
		float 	fTemp256SE; // step: 3094
		float 	fVec475SE[3];
		float 	fTemp257SE; // step: 3102
		float 	fVec479SE[2];
		float 	fTemp258SE; // step: 3114
		float 	fVec478SE[3];
		float 	fTemp259SE; // step: 3134
		float 	fVec484SE[2];
		float 	fTemp260SE; // step: 3146
		float 	fVec483SE[3];
		float 	fTemp261SE; // step: 3164
		float 	fVec489SE[2];
		float 	fTemp262SE; // step: 3176
		float 	fVec488SE[3];
		float 	fTemp263SE; // step: 3186
		float 	fTemp264SE; // step: 3198
		float 	fVec494SE[2];
		float 	fTemp265SE; // step: 3213
		float 	fVec493SE[3];
		float 	fTemp266SE; // step: 3233
		float 	fVec499SE[2];
		float 	fTemp267SE; // step: 3245
		float 	fVec498SE[3];
		float 	fTemp268SE; // step: 3265
		float 	fVec504SE[2];
		float 	fTemp269SE; // step: 3277
		float 	fVec503SE[3];
		float 	fTemp270SE; // step: 3285
		float 	fVec507SE[2];
		float 	fTemp271SE; // step: 3297
		float 	fVec506SE[3];
		float 	fTemp272SE; // step: 3317
		float 	fVec512SE[2];
		float 	fTemp273SE; // step: 3329
		float 	fVec511SE[3];
		float 	fTemp274SE; // step: 3347
		float 	fVec517SE[2];
		float 	fTemp275SE; // step: 3359
		float 	fVec516SE[3];
		float 	fSlow34BE = float(fslider10); // Zone 2, step: 3362
		float 	fSlow35BE = (fConst497KI / float(fslider11)); // Zone 2, step: 3366
		float 	fSlow36BE = ((1) ? expf(-fSlow35BE) : 0.0f); // Zone 2, step: 3369
		float 	fSlow37BE = (1.0f + -(expf(-fSlow35BE)) /* Sum */); // Zone 2, step: 3390
		float 	fVec519SE[2];
		float 	fSlow38SE;
		float 	fVec523SE[2];
		float 	fSlow39SE;
		float 	fVec527SE[2];
		float 	fSlow40SE;
		float 	fVec531SE[2];
		float 	fSlow41SE;
		float 	fVec535SE[2];
		float 	fSlow42SE;
		float 	fVec539SE[2];
		float 	fSlow43SE;
		float 	fVec543SE[2];
		float 	fSlow44SE;
		float 	fVec547SE[2];
		float 	fSlow45SE;
		float 	fVec551SE[2];
		float 	fSlow46SE;
		float 	fVec555SE[2];
		float 	fSlow47SE;
		float 	fVec559SE[2];
		float 	fSlow48SE;
		float 	fVec563SE[2];
		float 	fSlow49SE;
		float 	fVec567SE[2];
		float 	fSlow50SE;
		float 	fVec571SE[2];
		float 	fSlow51SE;
		float 	fVec575SE[2];
		float 	fSlow52SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec15SE[1] = fVec15SEState;
		fVec17SE[1] = fVec17SEState;
		fVec18SE[1] = fVec18SEState;
		fVec19SE[1] = fVec19SEState;
		fVec21SE[1] = fVec21SEState;
		fVec22SE[1] = fVec22SEState;
		fVec24SE[1] = fVec24SEState;
		fVec26SE[1] = fVec26SEState;
		fVec27SE[1] = fVec27SEState;
		fVec29SE[1] = fVec29SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec33SE[1] = fVec33SEState;
		fVec34SE[1] = fVec34SEState;
		fVec36SE[1] = fVec36SEState;
		fVec38SE[1] = fVec38SEState;
		iVec39SI[1] = iVec39SIState;
		fVec42SI[1] = fVec42SIState;
		fVec41SI[1] = fVec41SIState[0];
		fVec41SI[2] = fVec41SIState[1];
		fVec41SI[3] = fVec41SIState[2];
		fVec45SE[1] = fVec45SEState;
		fVec47SE[1] = fVec47SEState;
		fVec66SE[1] = fVec66SEState;
		fVec69SE[1] = fVec69SEState;
		fVec68SE[1] = fVec68SEState;
		fVec71SE[1] = fVec71SEState[0];
		fVec71SE[2] = fVec71SEState[1];
		fVec75SE[1] = fVec75SEState;
		fVec77SE[1] = fVec77SEState;
		fVec80SE[1] = fVec80SEState;
		fVec82SE[1] = fVec82SEState;
		fVec84SE[1] = fVec84SEState;
		fVec78SE[1] = fVec78SEState;
		fVec87SE[1] = fVec87SEState;
		fVec89SE[1] = fVec89SEState;
		fVec90SE[1] = fVec90SEState[0];
		fVec90SE[2] = fVec90SEState[1];
		fVec95SE[1] = fVec95SEState;
		fVec94SE[1] = fVec94SEState[0];
		fVec94SE[2] = fVec94SEState[1];
		fVec98SE[1] = fVec98SEState;
		fVec99SE[1] = fVec99SEState;
		fVec97SE[1] = fVec97SEState;
		fVec101SE[1] = fVec101SEState;
		fVec107SE[1] = fVec107SEState;
		fVec108SE[1] = fVec108SEState;
		fVec106SE[1] = fVec106SEState;
		fVec110SE[1] = fVec110SEState;
		fVec111SE[1] = fVec111SEState;
		fVec113SE[1] = fVec113SEState;
		fVec116SE[1] = fVec116SEState;
		fVec118SE[1] = fVec118SEState;
		fVec120SE[1] = fVec120SEState;
		fVec114SE[1] = fVec114SEState;
		fVec130SE[1] = fVec130SEState;
		fVec129SE[1] = fVec129SEState[0];
		fVec129SE[2] = fVec129SEState[1];
		fVec135SE[1] = fVec135SEState;
		fVec134SE[1] = fVec134SEState[0];
		fVec134SE[2] = fVec134SEState[1];
		fVec140SE[1] = fVec140SEState;
		fVec139SE[1] = fVec139SEState[0];
		fVec139SE[2] = fVec139SEState[1];
		fVec143SE[1] = fVec143SEState;
		fVec142SE[1] = fVec142SEState[0];
		fVec142SE[2] = fVec142SEState[1];
		fVec148SE[1] = fVec148SEState;
		fVec147SE[1] = fVec147SEState[0];
		fVec147SE[2] = fVec147SEState[1];
		fVec153SE[1] = fVec153SEState;
		fVec152SE[1] = fVec152SEState[0];
		fVec152SE[2] = fVec152SEState[1];
		fVec158SE[1] = fVec158SEState;
		fVec157SE[1] = fVec157SEState[0];
		fVec157SE[2] = fVec157SEState[1];
		fVec163SE[1] = fVec163SEState;
		fVec162SE[1] = fVec162SEState[0];
		fVec162SE[2] = fVec162SEState[1];
		fVec168SE[1] = fVec168SEState;
		fVec167SE[1] = fVec167SEState[0];
		fVec167SE[2] = fVec167SEState[1];
		fVec171SE[1] = fVec171SEState;
		fVec170SE[1] = fVec170SEState[0];
		fVec170SE[2] = fVec170SEState[1];
		fVec176SE[1] = fVec176SEState;
		fVec175SE[1] = fVec175SEState[0];
		fVec175SE[2] = fVec175SEState[1];
		fVec181SE[1] = fVec181SEState;
		fVec180SE[1] = fVec180SEState[0];
		fVec180SE[2] = fVec180SEState[1];
		fVec186SE[1] = fVec186SEState;
		fVec185SE[1] = fVec185SEState[0];
		fVec185SE[2] = fVec185SEState[1];
		fVec191SE[1] = fVec191SEState;
		fVec190SE[1] = fVec190SEState[0];
		fVec190SE[2] = fVec190SEState[1];
		fVec196SE[1] = fVec196SEState;
		fVec195SE[1] = fVec195SEState[0];
		fVec195SE[2] = fVec195SEState[1];
		fVec199SE[1] = fVec199SEState;
		fVec198SE[1] = fVec198SEState[0];
		fVec198SE[2] = fVec198SEState[1];
		fVec204SE[1] = fVec204SEState;
		fVec203SE[1] = fVec203SEState[0];
		fVec203SE[2] = fVec203SEState[1];
		fVec209SE[1] = fVec209SEState;
		fVec208SE[1] = fVec208SEState[0];
		fVec208SE[2] = fVec208SEState[1];
		fVec214SE[1] = fVec214SEState;
		fVec213SE[1] = fVec213SEState[0];
		fVec213SE[2] = fVec213SEState[1];
		fVec219SE[1] = fVec219SEState;
		fVec218SE[1] = fVec218SEState[0];
		fVec218SE[2] = fVec218SEState[1];
		fVec224SE[1] = fVec224SEState;
		fVec223SE[1] = fVec223SEState[0];
		fVec223SE[2] = fVec223SEState[1];
		fVec227SE[1] = fVec227SEState;
		fVec226SE[1] = fVec226SEState[0];
		fVec226SE[2] = fVec226SEState[1];
		fVec232SE[1] = fVec232SEState;
		fVec231SE[1] = fVec231SEState[0];
		fVec231SE[2] = fVec231SEState[1];
		fVec237SE[1] = fVec237SEState;
		fVec236SE[1] = fVec236SEState[0];
		fVec236SE[2] = fVec236SEState[1];
		fVec242SE[1] = fVec242SEState;
		fVec241SE[1] = fVec241SEState[0];
		fVec241SE[2] = fVec241SEState[1];
		fVec247SE[1] = fVec247SEState;
		fVec246SE[1] = fVec246SEState[0];
		fVec246SE[2] = fVec246SEState[1];
		fVec252SE[1] = fVec252SEState;
		fVec251SE[1] = fVec251SEState[0];
		fVec251SE[2] = fVec251SEState[1];
		fVec255SE[1] = fVec255SEState;
		fVec254SE[1] = fVec254SEState[0];
		fVec254SE[2] = fVec254SEState[1];
		fVec260SE[1] = fVec260SEState;
		fVec259SE[1] = fVec259SEState[0];
		fVec259SE[2] = fVec259SEState[1];
		fVec265SE[1] = fVec265SEState;
		fVec264SE[1] = fVec264SEState[0];
		fVec264SE[2] = fVec264SEState[1];
		fVec270SE[1] = fVec270SEState;
		fVec269SE[1] = fVec269SEState[0];
		fVec269SE[2] = fVec269SEState[1];
		fVec275SE[1] = fVec275SEState;
		fVec274SE[1] = fVec274SEState[0];
		fVec274SE[2] = fVec274SEState[1];
		fVec280SE[1] = fVec280SEState;
		fVec279SE[1] = fVec279SEState[0];
		fVec279SE[2] = fVec279SEState[1];
		fVec283SE[1] = fVec283SEState;
		fVec282SE[1] = fVec282SEState[0];
		fVec282SE[2] = fVec282SEState[1];
		fVec288SE[1] = fVec288SEState;
		fVec287SE[1] = fVec287SEState[0];
		fVec287SE[2] = fVec287SEState[1];
		fVec293SE[1] = fVec293SEState;
		fVec292SE[1] = fVec292SEState[0];
		fVec292SE[2] = fVec292SEState[1];
		fVec298SE[1] = fVec298SEState;
		fVec297SE[1] = fVec297SEState[0];
		fVec297SE[2] = fVec297SEState[1];
		fVec303SE[1] = fVec303SEState;
		fVec302SE[1] = fVec302SEState[0];
		fVec302SE[2] = fVec302SEState[1];
		fVec308SE[1] = fVec308SEState;
		fVec307SE[1] = fVec307SEState[0];
		fVec307SE[2] = fVec307SEState[1];
		fVec311SE[1] = fVec311SEState;
		fVec310SE[1] = fVec310SEState[0];
		fVec310SE[2] = fVec310SEState[1];
		fVec316SE[1] = fVec316SEState;
		fVec315SE[1] = fVec315SEState[0];
		fVec315SE[2] = fVec315SEState[1];
		fVec321SE[1] = fVec321SEState;
		fVec320SE[1] = fVec320SEState[0];
		fVec320SE[2] = fVec320SEState[1];
		fVec326SE[1] = fVec326SEState;
		fVec325SE[1] = fVec325SEState[0];
		fVec325SE[2] = fVec325SEState[1];
		fVec331SE[1] = fVec331SEState;
		fVec330SE[1] = fVec330SEState[0];
		fVec330SE[2] = fVec330SEState[1];
		fVec336SE[1] = fVec336SEState;
		fVec335SE[1] = fVec335SEState[0];
		fVec335SE[2] = fVec335SEState[1];
		fVec339SE[1] = fVec339SEState;
		fVec338SE[1] = fVec338SEState[0];
		fVec338SE[2] = fVec338SEState[1];
		fVec344SE[1] = fVec344SEState;
		fVec343SE[1] = fVec343SEState[0];
		fVec343SE[2] = fVec343SEState[1];
		fVec349SE[1] = fVec349SEState;
		fVec348SE[1] = fVec348SEState[0];
		fVec348SE[2] = fVec348SEState[1];
		fVec354SE[1] = fVec354SEState;
		fVec353SE[1] = fVec353SEState[0];
		fVec353SE[2] = fVec353SEState[1];
		fVec359SE[1] = fVec359SEState;
		fVec358SE[1] = fVec358SEState[0];
		fVec358SE[2] = fVec358SEState[1];
		fVec364SE[1] = fVec364SEState;
		fVec363SE[1] = fVec363SEState[0];
		fVec363SE[2] = fVec363SEState[1];
		fVec367SE[1] = fVec367SEState;
		fVec366SE[1] = fVec366SEState[0];
		fVec366SE[2] = fVec366SEState[1];
		fVec372SE[1] = fVec372SEState;
		fVec371SE[1] = fVec371SEState[0];
		fVec371SE[2] = fVec371SEState[1];
		fVec377SE[1] = fVec377SEState;
		fVec376SE[1] = fVec376SEState[0];
		fVec376SE[2] = fVec376SEState[1];
		fVec382SE[1] = fVec382SEState;
		fVec381SE[1] = fVec381SEState[0];
		fVec381SE[2] = fVec381SEState[1];
		fVec387SE[1] = fVec387SEState;
		fVec386SE[1] = fVec386SEState[0];
		fVec386SE[2] = fVec386SEState[1];
		fVec392SE[1] = fVec392SEState;
		fVec391SE[1] = fVec391SEState[0];
		fVec391SE[2] = fVec391SEState[1];
		fVec395SE[1] = fVec395SEState;
		fVec394SE[1] = fVec394SEState[0];
		fVec394SE[2] = fVec394SEState[1];
		fVec400SE[1] = fVec400SEState;
		fVec399SE[1] = fVec399SEState[0];
		fVec399SE[2] = fVec399SEState[1];
		fVec405SE[1] = fVec405SEState;
		fVec404SE[1] = fVec404SEState[0];
		fVec404SE[2] = fVec404SEState[1];
		fVec410SE[1] = fVec410SEState;
		fVec409SE[1] = fVec409SEState[0];
		fVec409SE[2] = fVec409SEState[1];
		fVec415SE[1] = fVec415SEState;
		fVec414SE[1] = fVec414SEState[0];
		fVec414SE[2] = fVec414SEState[1];
		fVec420SE[1] = fVec420SEState;
		fVec419SE[1] = fVec419SEState[0];
		fVec419SE[2] = fVec419SEState[1];
		fVec423SE[1] = fVec423SEState;
		fVec422SE[1] = fVec422SEState[0];
		fVec422SE[2] = fVec422SEState[1];
		fVec428SE[1] = fVec428SEState;
		fVec427SE[1] = fVec427SEState[0];
		fVec427SE[2] = fVec427SEState[1];
		fVec433SE[1] = fVec433SEState;
		fVec432SE[1] = fVec432SEState[0];
		fVec432SE[2] = fVec432SEState[1];
		fVec438SE[1] = fVec438SEState;
		fVec437SE[1] = fVec437SEState[0];
		fVec437SE[2] = fVec437SEState[1];
		fVec443SE[1] = fVec443SEState;
		fVec442SE[1] = fVec442SEState[0];
		fVec442SE[2] = fVec442SEState[1];
		fVec448SE[1] = fVec448SEState;
		fVec447SE[1] = fVec447SEState[0];
		fVec447SE[2] = fVec447SEState[1];
		fVec451SE[1] = fVec451SEState;
		fVec450SE[1] = fVec450SEState[0];
		fVec450SE[2] = fVec450SEState[1];
		fVec456SE[1] = fVec456SEState;
		fVec455SE[1] = fVec455SEState[0];
		fVec455SE[2] = fVec455SEState[1];
		fVec461SE[1] = fVec461SEState;
		fVec460SE[1] = fVec460SEState[0];
		fVec460SE[2] = fVec460SEState[1];
		fVec466SE[1] = fVec466SEState;
		fVec465SE[1] = fVec465SEState[0];
		fVec465SE[2] = fVec465SEState[1];
		fVec471SE[1] = fVec471SEState;
		fVec470SE[1] = fVec470SEState[0];
		fVec470SE[2] = fVec470SEState[1];
		fVec476SE[1] = fVec476SEState;
		fVec475SE[1] = fVec475SEState[0];
		fVec475SE[2] = fVec475SEState[1];
		fVec479SE[1] = fVec479SEState;
		fVec478SE[1] = fVec478SEState[0];
		fVec478SE[2] = fVec478SEState[1];
		fVec484SE[1] = fVec484SEState;
		fVec483SE[1] = fVec483SEState[0];
		fVec483SE[2] = fVec483SEState[1];
		fVec489SE[1] = fVec489SEState;
		fVec488SE[1] = fVec488SEState[0];
		fVec488SE[2] = fVec488SEState[1];
		fVec494SE[1] = fVec494SEState;
		fVec493SE[1] = fVec493SEState[0];
		fVec493SE[2] = fVec493SEState[1];
		fVec499SE[1] = fVec499SEState;
		fVec498SE[1] = fVec498SEState[0];
		fVec498SE[2] = fVec498SEState[1];
		fVec504SE[1] = fVec504SEState;
		fVec503SE[1] = fVec503SEState[0];
		fVec503SE[2] = fVec503SEState[1];
		fVec507SE[1] = fVec507SEState;
		fVec506SE[1] = fVec506SEState[0];
		fVec506SE[2] = fVec506SEState[1];
		fVec512SE[1] = fVec512SEState;
		fVec511SE[1] = fVec511SEState[0];
		fVec511SE[2] = fVec511SEState[1];
		fVec517SE[1] = fVec517SEState;
		fVec516SE[1] = fVec516SEState[0];
		fVec516SE[2] = fVec516SEState[1];
		fVec519SE[1] = fVec519SEState;
		fVec523SE[1] = fVec523SEState;
		fVec527SE[1] = fVec527SEState;
		fVec531SE[1] = fVec531SEState;
		fVec535SE[1] = fVec535SEState;
		fVec539SE[1] = fVec539SEState;
		fVec543SE[1] = fVec543SEState;
		fVec547SE[1] = fVec547SEState;
		fVec551SE[1] = fVec551SEState;
		fVec555SE[1] = fVec555SEState;
		fVec559SE[1] = fVec559SEState;
		fVec563SE[1] = fVec563SEState;
		fVec567SE[1] = fVec567SEState;
		fVec571SE[1] = fVec571SEState;
		fVec575SE[1] = fVec575SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fVec9SE[0] = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE);
			fTemp10SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 72
			fVec10SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp10SE + -fVec10SE[1] /* Sum */) / fTemp2SE); // step: 77
			fVec12SE[0] = fTemp11SE;
			fTemp12SE = ((fTemp11SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp12SE;
			fTemp13SE = fVec15SE[1]; // step: 85
			fTemp14SE = std::max(2e+01f, fabsf((fSlow2BE * fTemp1SE))); // step: 93
			fTemp15SE = (fConst1KI * fTemp14SE); // step: 94
			fVec15SE[0] = (fTemp13SE + fTemp15SE + -floorf((fTemp13SE + fTemp15SE /* Sum */)) /* Sum */);
			fTemp16SE = fVec15SE[0]; // step: 100
			fTemp17SE = (2.0f * fTemp16SE); // step: 101
			fTemp18SE = (fTemp17SE + -1.0f /* Sum */); // step: 102
			fTemp19SE = powf(fTemp18SE,2.0f); // step: 103
			fVec17SE[0] = fTemp19SE;
			fTemp20SE = powf(fTemp18SE,3.0f); // step: 105
			fTemp21SE = (-2.0f * fTemp16SE); // step: 106
			fVec18SE[0] = (fTemp20SE + 1.0f + fTemp21SE /* Sum */);
			fVec19SE[0] = (fTemp20SE + 1.0f + -fTemp17SE /* Sum */);
			fVec21SE[0] = ((fTemp20SE + 1.0f + -fTemp17SE + -fVec18SE[1] /* Sum */) / fTemp14SE);
			fTemp22SE = (fTemp19SE * (fTemp19SE + -2.0f /* Sum */)); // step: 118
			fVec22SE[0] = fTemp22SE;
			fTemp23SE = ((fTemp22SE + -fVec22SE[1] /* Sum */) / fTemp14SE); // step: 123
			fVec24SE[0] = fTemp23SE;
			fTemp24SE = ((fTemp23SE + -fVec24SE[1] /* Sum */) / fTemp14SE); // step: 128
			fVec26SE[0] = fTemp24SE;
			fTemp25SE = fVec27SE[1]; // step: 131
			fTemp26SE = std::max(2e+01f, fabsf((fSlow3BE * fTemp1SE))); // step: 137
			fTemp27SE = (fConst1KI * fTemp26SE); // step: 138
			fVec27SE[0] = (fTemp25SE + fTemp27SE + -floorf((fTemp25SE + fTemp27SE /* Sum */)) /* Sum */);
			fTemp28SE = fVec27SE[0]; // step: 144
			fTemp29SE = (2.0f * fTemp28SE); // step: 145
			fTemp30SE = (fTemp29SE + -1.0f /* Sum */); // step: 146
			fTemp31SE = powf(fTemp30SE,2.0f); // step: 147
			fVec29SE[0] = fTemp31SE;
			fTemp32SE = powf(fTemp30SE,3.0f); // step: 149
			fTemp33SE = (-2.0f * fTemp28SE); // step: 150
			fVec30SE[0] = (fTemp32SE + 1.0f + fTemp33SE /* Sum */);
			fVec31SE[0] = (fTemp32SE + 1.0f + -fTemp29SE /* Sum */);
			fVec33SE[0] = ((fTemp32SE + 1.0f + -fTemp29SE + -fVec30SE[1] /* Sum */) / fTemp26SE);
			fTemp34SE = (fTemp31SE * (fTemp31SE + -2.0f /* Sum */)); // step: 162
			fVec34SE[0] = fTemp34SE;
			fTemp35SE = ((fTemp34SE + -fVec34SE[1] /* Sum */) / fTemp26SE); // step: 167
			fVec36SE[0] = fTemp35SE;
			fTemp36SE = ((fTemp35SE + -fVec36SE[1] /* Sum */) / fTemp26SE); // step: 172
			fVec38SE[0] = fTemp36SE;
			iVec39SI[0] = ((1103515245 * iVec39SI[1]) + 12345 /* Sum */);
			fTemp37SI = (4.656613e-10f * float(iVec39SI[0])); // step: 184
			fTemp38SI = fVec41SI[3]; // step: 187
			fTemp39SI = fVec41SI[2]; // step: 195
			fVec42SI[0] = ((0.5221894f * fTemp38SI) + fTemp37SI + (2.494956f * fVec42SI[1]) + (-2.0172658f * fTemp39SI) /* Sum */);
			fTemp40SI = fVec42SI[0]; // step: 199
			fVec41SI[0] = fTemp40SI;
			fVec45SE[0] = (fSlow5BE + (0.999f * fVec45SE[1]) /* Sum */);
			fVec47SE[0] = (fSlow7BE + (0.999f * fVec47SE[1]) /* Sum */);
			fTemp41SE = fVec47SE[0]; // step: 229
			fTemp42SC = float(iVec0KC[1]); // step: 245
			fTemp43SC = float(iVec0KC[2]); // step: 258
			fTemp44SC = float(iVec0KC[3]); // step: 273
			fTemp45SE = (fTemp41SE * ((iSlow8BE) ? (float)input0[i] : ((iSlow9BE) ? ((iSlow14BE) ? ((0.049922034f * fVec42SI[0]) + (0.0506127f * fTemp39SI) + (-0.095993534f * fVec41SI[1]) + (-0.004408786f * fTemp38SI) /* Sum */) : fTemp37SI) : (0.33333334f * (fTemp41SE * (((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp44SC * (fTemp12SE + -fVec14SE[1] /* Sum */)) / fTemp2SE)) : (fConst3KI * ((fTemp43SC * (((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE) + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp42SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE)) + ((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp44SC * (fTemp24SE + -fVec26SE[1] /* Sum */)) / fTemp14SE)) : (fConst3KI * ((fTemp43SC * (((fTemp20SE + 1.0f + fTemp21SE + -fVec19SE[1] /* Sum */) / fTemp14SE) + -fVec21SE[1] /* Sum */)) / fTemp14SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp42SC * (fTemp19SE + -fVec17SE[1] /* Sum */)) / fTemp14SE)) : fTemp18SE)) + ((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp44SC * (fTemp36SE + -fVec38SE[1] /* Sum */)) / fTemp26SE)) : (fConst3KI * ((fTemp43SC * (((fTemp32SE + 1.0f + fTemp33SE + -fVec31SE[1] /* Sum */) / fTemp26SE) + -fVec33SE[1] /* Sum */)) / fTemp26SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp42SC * (fTemp31SE + -fVec29SE[1] /* Sum */)) / fTemp26SE)) : fTemp30SE)) /* Sum */)))))); // step: 351
			fVec66SE[0] = ((0.999f * fVec66SE[1]) + -(0.002f * (cosf((fConst5KI * fSlow15BE)) * fSlow16BE)) /* Sum */);
			fVec69SE[0] = (fSlow17BE + (0.999f * fVec69SE[1]) /* Sum */);
			fVec68SE[0] = ((fVec45SE[0] * ((iSlow6BE) ? 0.0f : fTemp45SE)) + -(fVec66SE[0] * fVec68SE[1]) + -(fVec69SE[0] * fVec71SE[2]) /* Sum */);
			fTemp46SE = fVec68SE[0]; // step: 399
			fVec71SE[0] = fTemp46SE;
			fTemp47SE = ((iSlow6BE) ? fTemp45SE : (fVec68SE[0] + -fVec71SE[1] /* Sum */)); // step: 408
			fVec75SE[0] = (fSlow20BE + (0.999f * fVec75SE[1]) /* Sum */);
			fTemp48SE = (fConst7KI * fVec75SE[0]); // step: 422
			fTemp49SE = (1.0f + -fTemp48SE /* Sum */); // step: 424
			fVec77SE[0] = ((fTemp49SE * fVec77SE[1]) + ((iSlow19BE) ? 0.0f : fTemp47SE) + (-3.2f * fVec78SE[1]) /* Sum */);
			fVec80SE[0] = (fVec77SE[0] + (fTemp49SE * fVec80SE[1]) /* Sum */);
			fVec82SE[0] = (fVec80SE[0] + (fTemp49SE * fVec82SE[1]) /* Sum */);
			fVec84SE[0] = (fVec82SE[0] + (fVec84SE[1] * fTemp49SE) /* Sum */);
			fVec78SE[0] = (fVec84SE[0] * powf(fTemp48SE,4.0f));
			fTemp50SE = ((iSlow19BE) ? fTemp47SE : (4.0f * fVec78SE[0])); // step: 459
			fTemp51SE = ((iSlow18BE) ? 0.0f : fTemp50SE); // step: 460
			fVec87SE[0] = (fSlow25BE + (0.999f * fVec87SE[1]) /* Sum */);
			fTemp52SE = fVec87SE[0]; // step: 484
			fTemp53SE = tanf((fConst8KI * std::max(2e+01f, std::min(1e+04f, fTemp52SE)))); // step: 488
			fTemp54SE = (1.0f / fTemp53SE); // step: 489
			fTemp55SE = (fSlow23BE + fSlow24BE + ((fSlow23BE + 2.0f + fTemp54SE /* Sum */) / fTemp53SE) + 1.0f /* Sum */); // step: 492
			fTemp56SE = (1.0f / powf(fTemp53SE,2.0f)); // step: 496
			fTemp57SE = fVec90SE[2]; // step: 501
			fVec89SE[0] = (fTemp51SE + -(((fTemp57SE * (fSlow23BE + fSlow24BE + ((fTemp54SE + -fSlow23BE + -2.0f /* Sum */) / fTemp53SE) + 1.0f /* Sum */)) + (2.0f * (fVec89SE[1] * (fSlow23BE + fSlow24BE + 1.0f + -fTemp56SE /* Sum */))) /* Sum */) / fTemp55SE) /* Sum */);
			fTemp58SE = fVec89SE[0]; // step: 512
			fVec90SE[0] = fTemp58SE;
			fTemp59SE = fVec94SE[2]; // step: 518
			fVec95SE[0] = (((fTemp57SE + fVec89SE[0] + (2.0f * fVec90SE[1]) /* Sum */) / fTemp55SE) + -(((fTemp59SE * (fSlow24BE + ((fTemp54SE + -2.0f + fSlow23BE /* Sum */) / fTemp53SE) + 1.0f + -fSlow23BE /* Sum */)) + (2.0f * (fVec95SE[1] * (fSlow24BE + 1.0f + -fTemp56SE + -fSlow23BE /* Sum */))) /* Sum */) / (fSlow24BE + ((2.0f + -fSlow23BE + fTemp54SE /* Sum */) / fTemp53SE) + 1.0f + -fSlow23BE /* Sum */)) /* Sum */);
			fTemp60SE = fVec95SE[0]; // step: 536
			fVec94SE[0] = fTemp60SE;
			fTemp61SE = tanf((fConst8KI * std::max(fTemp52SE, 2e+01f))); // step: 545
			fTemp62SE = (1.0f / fTemp61SE); // step: 546
			fTemp63SE = (fSlow26BE + fSlow27BE + ((fSlow27BE + 2.0f + fTemp62SE /* Sum */) / fTemp61SE) + 1.0f /* Sum */); // step: 554
			fTemp64SE = ((fSlow26BE + fSlow27BE + 1.0f + -((fSlow27BE + 2.0f + -fTemp62SE /* Sum */) / fTemp61SE) /* Sum */) / fTemp63SE); // step: 555
			fTemp65SE = std::max(-0.9999f, std::min(0.9999f, fTemp64SE)); // step: 557
			fTemp66SE = (1.0f + -(powf(fTemp65SE,2.0f)) /* Sum */); // step: 560
			fTemp67SE = sqrtf(std::max(0.0f, fTemp66SE)); // step: 562
			fTemp68SE = ((fTemp51SE * fTemp67SE) + -(fTemp65SE * fVec97SE[1]) /* Sum */); // step: 568
			fTemp69SE = (1.0f / powf(fTemp61SE,2.0f)); // step: 570
			fTemp70SE = (fSlow26BE + fSlow27BE + 1.0f + -fTemp69SE /* Sum */); // step: 572
			fTemp71SE = std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp70SE / (fTemp63SE * (fTemp64SE + 1.0f /* Sum */)))))); // step: 578
			fTemp72SE = (1.0f + -(powf(fTemp71SE,2.0f)) /* Sum */); // step: 581
			fTemp73SE = sqrtf(std::max(0.0f, fTemp72SE)); // step: 583
			fVec98SE[0] = ((fTemp68SE * fTemp73SE) + -(fTemp71SE * fVec98SE[1]) /* Sum */);
			fVec99SE[0] = fVec98SE[0];
			fVec97SE[0] = ((fTemp68SE * fTemp71SE) + (fTemp73SE * fVec99SE[1]) /* Sum */);
			fVec101SE[0] = fVec97SE[0];
			fTemp74SE = (1.0f + -(fTemp70SE / fTemp63SE) /* Sum */); // step: 604
			fTemp75SE = sqrtf(fTemp66SE); // step: 606
			float 	fRec22SE = fVec98SE[0]; // Zero delay
			fTemp76SE = ((fTemp51SE * fTemp65SE) + (fTemp67SE * fVec101SE[1]) + (2.0f * ((fVec97SE[0] * fTemp74SE) / fTemp75SE)) + ((fRec22SE * (1.0f + -fTemp64SE + (-2.0f * (fTemp71SE * fTemp74SE)) /* Sum */)) / (fTemp75SE * sqrtf(fTemp72SE))) /* Sum */); // step: 620
			fTemp77SE = ((fTemp62SE + -2.0f + fSlow27BE /* Sum */) / fTemp61SE); // step: 623
			fTemp78SE = (fSlow26BE + ((2.0f + -fSlow27BE + fTemp62SE /* Sum */) / fTemp61SE) + 1.0f + -fSlow27BE /* Sum */); // step: 627
			fTemp79SE = ((fSlow26BE + fTemp77SE + 1.0f + -fSlow27BE /* Sum */) / fTemp78SE); // step: 628
			fTemp80SE = std::max(-0.9999f, std::min(0.9999f, fTemp79SE)); // step: 630
			fTemp81SE = (1.0f + -(powf(fTemp80SE,2.0f)) /* Sum */); // step: 633
			fTemp82SE = sqrtf(std::max(0.0f, fTemp81SE)); // step: 635
			fTemp83SE = (((fTemp76SE * fTemp82SE) / fTemp63SE) + -(fTemp80SE * fVec106SE[1]) /* Sum */); // step: 642
			fTemp84SE = (fSlow26BE + 1.0f + -fTemp69SE + -fSlow27BE /* Sum */); // step: 643
			fTemp85SE = std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp84SE / (fTemp78SE * (fTemp79SE + 1.0f /* Sum */)))))); // step: 649
			fTemp86SE = (1.0f + -(powf(fTemp85SE,2.0f)) /* Sum */); // step: 652
			fTemp87SE = sqrtf(std::max(0.0f, fTemp86SE)); // step: 654
			fVec107SE[0] = ((fTemp83SE * fTemp87SE) + -(fTemp85SE * fVec107SE[1]) /* Sum */);
			fVec108SE[0] = fVec107SE[0];
			fTemp88SE = (fSlow26BE + 1.0f + -fTemp69SE + fSlow28BE /* Sum */); // step: 665
			fTemp89SE = (fSlow26BE + ((2.0f + fSlow28BE + fTemp62SE /* Sum */) / fTemp61SE) + 1.0f + fSlow28BE /* Sum */); // step: 668
			fTemp90SE = ((fSlow26BE + fTemp77SE + 1.0f + fSlow28BE /* Sum */) / fTemp89SE); // step: 670
			fVec106SE[0] = ((fTemp83SE * std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp88SE / (fTemp89SE * (fTemp90SE + 1.0f /* Sum */))))))) + (fTemp87SE * fVec108SE[1]) /* Sum */);
			fVec110SE[0] = fVec106SE[0];
			fVec111SE[0] = (fSlow29BE + (0.999f * fVec111SE[1]) /* Sum */);
			fTemp91SE = (fConst7KI * fTemp52SE); // step: 697
			fTemp92SE = (1.0f + -fTemp91SE /* Sum */); // step: 699
			fVec113SE[0] = ((fTemp92SE * fVec113SE[1]) + fTemp51SE + -(fSlow31BE * fVec114SE[1]) /* Sum */);
			fVec116SE[0] = (fVec113SE[0] + (fTemp92SE * fVec116SE[1]) /* Sum */);
			fVec118SE[0] = (fVec116SE[0] + (fTemp92SE * fVec118SE[1]) /* Sum */);
			fVec120SE[0] = (fVec118SE[0] + (fVec120SE[1] * fTemp92SE) /* Sum */);
			fVec114SE[0] = (fVec120SE[0] * powf(fTemp91SE,4.0f));
			fTemp93SE = sqrtf(fTemp81SE); // step: 760
			float 	fRec31SE = fVec107SE[0]; // Zero delay
			fTemp94SE = ((iSlow18BE) ? fTemp50SE : (fVec111SE[0] * ((iSlow30BE) ? ((iSlow32BE) ? ((((fTemp76SE * std::max(-0.9999f, std::min(0.9999f, fTemp90SE))) / fTemp63SE) + (fTemp82SE * fVec110SE[1]) + (2.0f * ((fVec106SE[0] * (1.0f + -(fTemp84SE / fTemp78SE) /* Sum */)) / fTemp93SE)) + ((fRec31SE * (1.0f + -fTemp79SE + (-2.0f * (fTemp85SE * (1.0f + -(fTemp88SE / fTemp89SE) /* Sum */))) /* Sum */)) / (fTemp93SE * sqrtf(fTemp86SE))) /* Sum */) / fTemp89SE) : ((fTemp59SE + fVec95SE[0] + (2.0f * fVec94SE[1]) /* Sum */) / (fSlow24BE + ((2.0f + fSlow33BE + fTemp54SE /* Sum */) / fTemp53SE) + 1.0f + fSlow33BE /* Sum */))) : fVec114SE[0]))); // step: 782
			fTemp95SE = fVec129SE[2]; // step: 797
			fVec130SE[0] = (fTemp94SE + -(fConst11KI * ((fConst12KI * fTemp95SE) + (fConst15KI * fVec130SE[1]) /* Sum */)) /* Sum */);
			fTemp96SE = fVec130SE[0]; // step: 812
			fVec129SE[0] = fTemp96SE;
			fTemp97SE = fVec134SE[2]; // step: 837
			fVec135SE[0] = ((fConst11KI * ((fConst17KI * fVec130SE[0]) + (fConst18KI * fVec129SE[1]) + (fConst17KI * fTemp95SE) /* Sum */)) + -(fConst19KI * ((fConst20KI * fTemp97SE) + (fConst21KI * fVec135SE[1]) /* Sum */)) /* Sum */);
			fTemp98SE = fVec135SE[0]; // step: 849
			fVec134SE[0] = fTemp98SE;
			fTemp99SE = fVec139SE[2]; // step: 873
			fVec140SE[0] = ((fConst19KI * ((fConst23KI * fVec135SE[0]) + (fConst24KI * fVec134SE[1]) + (fConst23KI * fTemp97SE) /* Sum */)) + -(fConst25KI * ((fConst26KI * fTemp99SE) + (fConst27KI * fVec140SE[1]) /* Sum */)) /* Sum */);
			fTemp100SE = fVec140SE[0]; // step: 885
			fVec139SE[0] = fTemp100SE;
			fTemp101SE = fVec142SE[2]; // step: 896
			fVec143SE[0] = (fTemp94SE + -(fConst28KI * ((fConst29KI * fTemp101SE) + (fConst30KI * fVec143SE[1]) /* Sum */)) /* Sum */);
			fTemp102SE = fVec143SE[0]; // step: 908
			fVec142SE[0] = fTemp102SE;
			fTemp103SE = fVec147SE[2]; // step: 933
			fVec148SE[0] = ((fConst28KI * ((fConst32KI * fVec143SE[0]) + (fConst33KI * fVec142SE[1]) + (fConst32KI * fTemp101SE) /* Sum */)) + -(fConst34KI * ((fConst35KI * fTemp103SE) + (fConst36KI * fVec148SE[1]) /* Sum */)) /* Sum */);
			fTemp104SE = fVec148SE[0]; // step: 945
			fVec147SE[0] = fTemp104SE;
			fTemp105SE = fVec152SE[2]; // step: 967
			fVec153SE[0] = ((fConst34KI * ((fConst37KI * fVec148SE[0]) + (fConst38KI * fVec147SE[1]) + (fConst37KI * fTemp103SE) /* Sum */)) + -(fConst39KI * ((fConst40KI * fTemp105SE) + (fConst41KI * fVec153SE[1]) /* Sum */)) /* Sum */);
			fTemp106SE = fVec153SE[0]; // step: 979
			fVec152SE[0] = fTemp106SE;
			fTemp107SE = (fConst39KI * ((fConst42KI * fVec153SE[0]) + (fConst43KI * fVec152SE[1]) + (fConst42KI * fTemp105SE) /* Sum */)); // step: 990
			fTemp108SE = fVec157SE[2]; // step: 1002
			fVec158SE[0] = (fTemp107SE + -(fConst46KI * ((fConst47KI * fTemp108SE) + (fConst50KI * fVec158SE[1]) /* Sum */)) /* Sum */);
			fTemp109SE = fVec158SE[0]; // step: 1017
			fVec157SE[0] = fTemp109SE;
			fTemp110SE = fVec162SE[2]; // step: 1037
			fVec163SE[0] = ((fConst46KI * ((fConst52KI * fVec158SE[0]) + (fConst53KI * fVec157SE[1]) + (fConst52KI * fTemp108SE) /* Sum */)) + -(fConst54KI * ((fConst55KI * fTemp110SE) + (fConst56KI * fVec163SE[1]) /* Sum */)) /* Sum */);
			fTemp111SE = fVec163SE[0]; // step: 1049
			fVec162SE[0] = fTemp111SE;
			fTemp112SE = fVec167SE[2]; // step: 1069
			fVec168SE[0] = ((fConst54KI * ((fConst58KI * fVec163SE[0]) + (fConst59KI * fVec162SE[1]) + (fConst58KI * fTemp110SE) /* Sum */)) + -(fConst60KI * ((fConst61KI * fTemp112SE) + (fConst62KI * fVec168SE[1]) /* Sum */)) /* Sum */);
			fTemp113SE = fVec168SE[0]; // step: 1081
			fVec167SE[0] = fTemp113SE;
			fTemp114SE = fVec170SE[2]; // step: 1089
			fVec171SE[0] = (fTemp107SE + -(fConst63KI * ((fConst64KI * fTemp114SE) + (fConst65KI * fVec171SE[1]) /* Sum */)) /* Sum */);
			fTemp115SE = fVec171SE[0]; // step: 1101
			fVec170SE[0] = fTemp115SE;
			fTemp116SE = fVec175SE[2]; // step: 1121
			fVec176SE[0] = ((fConst63KI * ((fConst67KI * fVec171SE[0]) + (fConst68KI * fVec170SE[1]) + (fConst67KI * fTemp114SE) /* Sum */)) + -(fConst69KI * ((fConst70KI * fTemp116SE) + (fConst71KI * fVec176SE[1]) /* Sum */)) /* Sum */);
			fTemp117SE = fVec176SE[0]; // step: 1133
			fVec175SE[0] = fTemp117SE;
			fTemp118SE = fVec180SE[2]; // step: 1151
			fVec181SE[0] = ((fConst69KI * ((fConst72KI * fVec176SE[0]) + (fConst73KI * fVec175SE[1]) + (fConst72KI * fTemp116SE) /* Sum */)) + -(fConst74KI * ((fConst75KI * fTemp118SE) + (fConst76KI * fVec181SE[1]) /* Sum */)) /* Sum */);
			fTemp119SE = fVec181SE[0]; // step: 1163
			fVec180SE[0] = fTemp119SE;
			fTemp120SE = (fConst74KI * ((fConst77KI * fVec181SE[0]) + (fConst78KI * fVec180SE[1]) + (fConst77KI * fTemp118SE) /* Sum */)); // step: 1173
			fTemp121SE = fVec185SE[2]; // step: 1185
			fVec186SE[0] = (fTemp120SE + -(fConst81KI * ((fConst82KI * fTemp121SE) + (fConst85KI * fVec186SE[1]) /* Sum */)) /* Sum */);
			fTemp122SE = fVec186SE[0]; // step: 1200
			fVec185SE[0] = fTemp122SE;
			fTemp123SE = fVec190SE[2]; // step: 1220
			fVec191SE[0] = ((fConst81KI * ((fConst87KI * fVec186SE[0]) + (fConst88KI * fVec185SE[1]) + (fConst87KI * fTemp121SE) /* Sum */)) + -(fConst89KI * ((fConst90KI * fTemp123SE) + (fConst91KI * fVec191SE[1]) /* Sum */)) /* Sum */);
			fTemp124SE = fVec191SE[0]; // step: 1232
			fVec190SE[0] = fTemp124SE;
			fTemp125SE = fVec195SE[2]; // step: 1252
			fVec196SE[0] = ((fConst89KI * ((fConst93KI * fVec191SE[0]) + (fConst94KI * fVec190SE[1]) + (fConst93KI * fTemp123SE) /* Sum */)) + -(fConst95KI * ((fConst96KI * fTemp125SE) + (fConst97KI * fVec196SE[1]) /* Sum */)) /* Sum */);
			fTemp126SE = fVec196SE[0]; // step: 1264
			fVec195SE[0] = fTemp126SE;
			fTemp127SE = fVec198SE[2]; // step: 1272
			fVec199SE[0] = (fTemp120SE + -(fConst98KI * ((fConst99KI * fTemp127SE) + (fConst100KI * fVec199SE[1]) /* Sum */)) /* Sum */);
			fTemp128SE = fVec199SE[0]; // step: 1284
			fVec198SE[0] = fTemp128SE;
			fTemp129SE = fVec203SE[2]; // step: 1304
			fVec204SE[0] = ((fConst98KI * ((fConst102KI * fVec199SE[0]) + (fConst103KI * fVec198SE[1]) + (fConst102KI * fTemp127SE) /* Sum */)) + -(fConst104KI * ((fConst105KI * fTemp129SE) + (fConst106KI * fVec204SE[1]) /* Sum */)) /* Sum */);
			fTemp130SE = fVec204SE[0]; // step: 1316
			fVec203SE[0] = fTemp130SE;
			fTemp131SE = fVec208SE[2]; // step: 1334
			fVec209SE[0] = ((fConst104KI * ((fConst107KI * fVec204SE[0]) + (fConst108KI * fVec203SE[1]) + (fConst107KI * fTemp129SE) /* Sum */)) + -(fConst109KI * ((fConst110KI * fTemp131SE) + (fConst111KI * fVec209SE[1]) /* Sum */)) /* Sum */);
			fTemp132SE = fVec209SE[0]; // step: 1346
			fVec208SE[0] = fTemp132SE;
			fTemp133SE = (fConst109KI * ((fConst112KI * fVec209SE[0]) + (fConst113KI * fVec208SE[1]) + (fConst112KI * fTemp131SE) /* Sum */)); // step: 1356
			fTemp134SE = fVec213SE[2]; // step: 1368
			fVec214SE[0] = (fTemp133SE + -(fConst116KI * ((fConst117KI * fTemp134SE) + (fConst120KI * fVec214SE[1]) /* Sum */)) /* Sum */);
			fTemp135SE = fVec214SE[0]; // step: 1383
			fVec213SE[0] = fTemp135SE;
			fTemp136SE = fVec218SE[2]; // step: 1403
			fVec219SE[0] = ((fConst116KI * ((fConst122KI * fVec214SE[0]) + (fConst123KI * fVec213SE[1]) + (fConst122KI * fTemp134SE) /* Sum */)) + -(fConst124KI * ((fConst125KI * fTemp136SE) + (fConst126KI * fVec219SE[1]) /* Sum */)) /* Sum */);
			fTemp137SE = fVec219SE[0]; // step: 1415
			fVec218SE[0] = fTemp137SE;
			fTemp138SE = fVec223SE[2]; // step: 1435
			fVec224SE[0] = ((fConst124KI * ((fConst128KI * fVec219SE[0]) + (fConst129KI * fVec218SE[1]) + (fConst128KI * fTemp136SE) /* Sum */)) + -(fConst130KI * ((fConst131KI * fTemp138SE) + (fConst132KI * fVec224SE[1]) /* Sum */)) /* Sum */);
			fTemp139SE = fVec224SE[0]; // step: 1447
			fVec223SE[0] = fTemp139SE;
			fTemp140SE = fVec226SE[2]; // step: 1455
			fVec227SE[0] = (fTemp133SE + -(fConst133KI * ((fConst134KI * fTemp140SE) + (fConst135KI * fVec227SE[1]) /* Sum */)) /* Sum */);
			fTemp141SE = fVec227SE[0]; // step: 1467
			fVec226SE[0] = fTemp141SE;
			fTemp142SE = fVec231SE[2]; // step: 1487
			fVec232SE[0] = ((fConst133KI * ((fConst137KI * fVec227SE[0]) + (fConst138KI * fVec226SE[1]) + (fConst137KI * fTemp140SE) /* Sum */)) + -(fConst139KI * ((fConst140KI * fTemp142SE) + (fConst141KI * fVec232SE[1]) /* Sum */)) /* Sum */);
			fTemp143SE = fVec232SE[0]; // step: 1499
			fVec231SE[0] = fTemp143SE;
			fTemp144SE = fVec236SE[2]; // step: 1517
			fVec237SE[0] = ((fConst139KI * ((fConst142KI * fVec232SE[0]) + (fConst143KI * fVec231SE[1]) + (fConst142KI * fTemp142SE) /* Sum */)) + -(fConst144KI * ((fConst145KI * fTemp144SE) + (fConst146KI * fVec237SE[1]) /* Sum */)) /* Sum */);
			fTemp145SE = fVec237SE[0]; // step: 1529
			fVec236SE[0] = fTemp145SE;
			fTemp146SE = (fConst144KI * ((fConst147KI * fVec237SE[0]) + (fConst148KI * fVec236SE[1]) + (fConst147KI * fTemp144SE) /* Sum */)); // step: 1539
			fTemp147SE = fVec241SE[2]; // step: 1551
			fVec242SE[0] = (fTemp146SE + -(fConst151KI * ((fConst152KI * fTemp147SE) + (fConst155KI * fVec242SE[1]) /* Sum */)) /* Sum */);
			fTemp148SE = fVec242SE[0]; // step: 1566
			fVec241SE[0] = fTemp148SE;
			fTemp149SE = fVec246SE[2]; // step: 1586
			fVec247SE[0] = ((fConst151KI * ((fConst157KI * fVec242SE[0]) + (fConst158KI * fVec241SE[1]) + (fConst157KI * fTemp147SE) /* Sum */)) + -(fConst159KI * ((fConst160KI * fTemp149SE) + (fConst161KI * fVec247SE[1]) /* Sum */)) /* Sum */);
			fTemp150SE = fVec247SE[0]; // step: 1598
			fVec246SE[0] = fTemp150SE;
			fTemp151SE = fVec251SE[2]; // step: 1618
			fVec252SE[0] = ((fConst159KI * ((fConst163KI * fVec247SE[0]) + (fConst164KI * fVec246SE[1]) + (fConst163KI * fTemp149SE) /* Sum */)) + -(fConst165KI * ((fConst166KI * fTemp151SE) + (fConst167KI * fVec252SE[1]) /* Sum */)) /* Sum */);
			fTemp152SE = fVec252SE[0]; // step: 1630
			fVec251SE[0] = fTemp152SE;
			fTemp153SE = fVec254SE[2]; // step: 1638
			fVec255SE[0] = (fTemp146SE + -(fConst168KI * ((fConst169KI * fTemp153SE) + (fConst170KI * fVec255SE[1]) /* Sum */)) /* Sum */);
			fTemp154SE = fVec255SE[0]; // step: 1650
			fVec254SE[0] = fTemp154SE;
			fTemp155SE = fVec259SE[2]; // step: 1670
			fVec260SE[0] = ((fConst168KI * ((fConst172KI * fVec255SE[0]) + (fConst173KI * fVec254SE[1]) + (fConst172KI * fTemp153SE) /* Sum */)) + -(fConst174KI * ((fConst175KI * fTemp155SE) + (fConst176KI * fVec260SE[1]) /* Sum */)) /* Sum */);
			fTemp156SE = fVec260SE[0]; // step: 1682
			fVec259SE[0] = fTemp156SE;
			fTemp157SE = fVec264SE[2]; // step: 1700
			fVec265SE[0] = ((fConst174KI * ((fConst177KI * fVec260SE[0]) + (fConst178KI * fVec259SE[1]) + (fConst177KI * fTemp155SE) /* Sum */)) + -(fConst179KI * ((fConst180KI * fTemp157SE) + (fConst181KI * fVec265SE[1]) /* Sum */)) /* Sum */);
			fTemp158SE = fVec265SE[0]; // step: 1712
			fVec264SE[0] = fTemp158SE;
			fTemp159SE = (fConst179KI * ((fConst182KI * fVec265SE[0]) + (fConst183KI * fVec264SE[1]) + (fConst182KI * fTemp157SE) /* Sum */)); // step: 1722
			fTemp160SE = fVec269SE[2]; // step: 1734
			fVec270SE[0] = (fTemp159SE + -(fConst186KI * ((fConst187KI * fTemp160SE) + (fConst190KI * fVec270SE[1]) /* Sum */)) /* Sum */);
			fTemp161SE = fVec270SE[0]; // step: 1749
			fVec269SE[0] = fTemp161SE;
			fTemp162SE = fVec274SE[2]; // step: 1769
			fVec275SE[0] = ((fConst186KI * ((fConst192KI * fVec270SE[0]) + (fConst193KI * fVec269SE[1]) + (fConst192KI * fTemp160SE) /* Sum */)) + -(fConst194KI * ((fConst195KI * fTemp162SE) + (fConst196KI * fVec275SE[1]) /* Sum */)) /* Sum */);
			fTemp163SE = fVec275SE[0]; // step: 1781
			fVec274SE[0] = fTemp163SE;
			fTemp164SE = fVec279SE[2]; // step: 1801
			fVec280SE[0] = ((fConst194KI * ((fConst198KI * fVec275SE[0]) + (fConst199KI * fVec274SE[1]) + (fConst198KI * fTemp162SE) /* Sum */)) + -(fConst200KI * ((fConst201KI * fTemp164SE) + (fConst202KI * fVec280SE[1]) /* Sum */)) /* Sum */);
			fTemp165SE = fVec280SE[0]; // step: 1813
			fVec279SE[0] = fTemp165SE;
			fTemp166SE = fVec282SE[2]; // step: 1821
			fVec283SE[0] = (fTemp159SE + -(fConst203KI * ((fConst204KI * fTemp166SE) + (fConst205KI * fVec283SE[1]) /* Sum */)) /* Sum */);
			fTemp167SE = fVec283SE[0]; // step: 1833
			fVec282SE[0] = fTemp167SE;
			fTemp168SE = fVec287SE[2]; // step: 1853
			fVec288SE[0] = ((fConst203KI * ((fConst207KI * fVec283SE[0]) + (fConst208KI * fVec282SE[1]) + (fConst207KI * fTemp166SE) /* Sum */)) + -(fConst209KI * ((fConst210KI * fTemp168SE) + (fConst211KI * fVec288SE[1]) /* Sum */)) /* Sum */);
			fTemp169SE = fVec288SE[0]; // step: 1865
			fVec287SE[0] = fTemp169SE;
			fTemp170SE = fVec292SE[2]; // step: 1883
			fVec293SE[0] = ((fConst209KI * ((fConst212KI * fVec288SE[0]) + (fConst213KI * fVec287SE[1]) + (fConst212KI * fTemp168SE) /* Sum */)) + -(fConst214KI * ((fConst215KI * fTemp170SE) + (fConst216KI * fVec293SE[1]) /* Sum */)) /* Sum */);
			fTemp171SE = fVec293SE[0]; // step: 1895
			fVec292SE[0] = fTemp171SE;
			fTemp172SE = (fConst214KI * ((fConst217KI * fVec293SE[0]) + (fConst218KI * fVec292SE[1]) + (fConst217KI * fTemp170SE) /* Sum */)); // step: 1905
			fTemp173SE = fVec297SE[2]; // step: 1917
			fVec298SE[0] = (fTemp172SE + -(fConst221KI * ((fConst222KI * fTemp173SE) + (fConst225KI * fVec298SE[1]) /* Sum */)) /* Sum */);
			fTemp174SE = fVec298SE[0]; // step: 1932
			fVec297SE[0] = fTemp174SE;
			fTemp175SE = fVec302SE[2]; // step: 1952
			fVec303SE[0] = ((fConst221KI * ((fConst227KI * fVec298SE[0]) + (fConst228KI * fVec297SE[1]) + (fConst227KI * fTemp173SE) /* Sum */)) + -(fConst229KI * ((fConst230KI * fTemp175SE) + (fConst231KI * fVec303SE[1]) /* Sum */)) /* Sum */);
			fTemp176SE = fVec303SE[0]; // step: 1964
			fVec302SE[0] = fTemp176SE;
			fTemp177SE = fVec307SE[2]; // step: 1984
			fVec308SE[0] = ((fConst229KI * ((fConst233KI * fVec303SE[0]) + (fConst234KI * fVec302SE[1]) + (fConst233KI * fTemp175SE) /* Sum */)) + -(fConst235KI * ((fConst236KI * fTemp177SE) + (fConst237KI * fVec308SE[1]) /* Sum */)) /* Sum */);
			fTemp178SE = fVec308SE[0]; // step: 1996
			fVec307SE[0] = fTemp178SE;
			fTemp179SE = fVec310SE[2]; // step: 2004
			fVec311SE[0] = (fTemp172SE + -(fConst238KI * ((fConst239KI * fTemp179SE) + (fConst240KI * fVec311SE[1]) /* Sum */)) /* Sum */);
			fTemp180SE = fVec311SE[0]; // step: 2016
			fVec310SE[0] = fTemp180SE;
			fTemp181SE = fVec315SE[2]; // step: 2036
			fVec316SE[0] = ((fConst238KI * ((fConst242KI * fVec311SE[0]) + (fConst243KI * fVec310SE[1]) + (fConst242KI * fTemp179SE) /* Sum */)) + -(fConst244KI * ((fConst245KI * fTemp181SE) + (fConst246KI * fVec316SE[1]) /* Sum */)) /* Sum */);
			fTemp182SE = fVec316SE[0]; // step: 2048
			fVec315SE[0] = fTemp182SE;
			fTemp183SE = fVec320SE[2]; // step: 2066
			fVec321SE[0] = ((fConst244KI * ((fConst247KI * fVec316SE[0]) + (fConst248KI * fVec315SE[1]) + (fConst247KI * fTemp181SE) /* Sum */)) + -(fConst249KI * ((fConst250KI * fTemp183SE) + (fConst251KI * fVec321SE[1]) /* Sum */)) /* Sum */);
			fTemp184SE = fVec321SE[0]; // step: 2078
			fVec320SE[0] = fTemp184SE;
			fTemp185SE = (fConst249KI * ((fConst252KI * fVec321SE[0]) + (fConst253KI * fVec320SE[1]) + (fConst252KI * fTemp183SE) /* Sum */)); // step: 2088
			fTemp186SE = fVec325SE[2]; // step: 2100
			fVec326SE[0] = (fTemp185SE + -(fConst256KI * ((fConst257KI * fTemp186SE) + (fConst260KI * fVec326SE[1]) /* Sum */)) /* Sum */);
			fTemp187SE = fVec326SE[0]; // step: 2115
			fVec325SE[0] = fTemp187SE;
			fTemp188SE = fVec330SE[2]; // step: 2135
			fVec331SE[0] = ((fConst256KI * ((fConst262KI * fVec326SE[0]) + (fConst263KI * fVec325SE[1]) + (fConst262KI * fTemp186SE) /* Sum */)) + -(fConst264KI * ((fConst265KI * fTemp188SE) + (fConst266KI * fVec331SE[1]) /* Sum */)) /* Sum */);
			fTemp189SE = fVec331SE[0]; // step: 2147
			fVec330SE[0] = fTemp189SE;
			fTemp190SE = fVec335SE[2]; // step: 2167
			fVec336SE[0] = ((fConst264KI * ((fConst268KI * fVec331SE[0]) + (fConst269KI * fVec330SE[1]) + (fConst268KI * fTemp188SE) /* Sum */)) + -(fConst270KI * ((fConst271KI * fTemp190SE) + (fConst272KI * fVec336SE[1]) /* Sum */)) /* Sum */);
			fTemp191SE = fVec336SE[0]; // step: 2179
			fVec335SE[0] = fTemp191SE;
			fTemp192SE = fVec338SE[2]; // step: 2187
			fVec339SE[0] = (fTemp185SE + -(fConst273KI * ((fConst274KI * fTemp192SE) + (fConst275KI * fVec339SE[1]) /* Sum */)) /* Sum */);
			fTemp193SE = fVec339SE[0]; // step: 2199
			fVec338SE[0] = fTemp193SE;
			fTemp194SE = fVec343SE[2]; // step: 2219
			fVec344SE[0] = ((fConst273KI * ((fConst277KI * fVec339SE[0]) + (fConst278KI * fVec338SE[1]) + (fConst277KI * fTemp192SE) /* Sum */)) + -(fConst279KI * ((fConst280KI * fTemp194SE) + (fConst281KI * fVec344SE[1]) /* Sum */)) /* Sum */);
			fTemp195SE = fVec344SE[0]; // step: 2231
			fVec343SE[0] = fTemp195SE;
			fTemp196SE = fVec348SE[2]; // step: 2249
			fVec349SE[0] = ((fConst279KI * ((fConst282KI * fVec344SE[0]) + (fConst283KI * fVec343SE[1]) + (fConst282KI * fTemp194SE) /* Sum */)) + -(fConst284KI * ((fConst285KI * fTemp196SE) + (fConst286KI * fVec349SE[1]) /* Sum */)) /* Sum */);
			fTemp197SE = fVec349SE[0]; // step: 2261
			fVec348SE[0] = fTemp197SE;
			fTemp198SE = (fConst284KI * ((fConst287KI * fVec349SE[0]) + (fConst288KI * fVec348SE[1]) + (fConst287KI * fTemp196SE) /* Sum */)); // step: 2271
			fTemp199SE = fVec353SE[2]; // step: 2283
			fVec354SE[0] = (fTemp198SE + -(fConst291KI * ((fConst292KI * fTemp199SE) + (fConst295KI * fVec354SE[1]) /* Sum */)) /* Sum */);
			fTemp200SE = fVec354SE[0]; // step: 2298
			fVec353SE[0] = fTemp200SE;
			fTemp201SE = fVec358SE[2]; // step: 2318
			fVec359SE[0] = ((fConst291KI * ((fConst297KI * fVec354SE[0]) + (fConst298KI * fVec353SE[1]) + (fConst297KI * fTemp199SE) /* Sum */)) + -(fConst299KI * ((fConst300KI * fTemp201SE) + (fConst301KI * fVec359SE[1]) /* Sum */)) /* Sum */);
			fTemp202SE = fVec359SE[0]; // step: 2330
			fVec358SE[0] = fTemp202SE;
			fTemp203SE = fVec363SE[2]; // step: 2350
			fVec364SE[0] = ((fConst299KI * ((fConst303KI * fVec359SE[0]) + (fConst304KI * fVec358SE[1]) + (fConst303KI * fTemp201SE) /* Sum */)) + -(fConst305KI * ((fConst306KI * fTemp203SE) + (fConst307KI * fVec364SE[1]) /* Sum */)) /* Sum */);
			fTemp204SE = fVec364SE[0]; // step: 2362
			fVec363SE[0] = fTemp204SE;
			fTemp205SE = fVec366SE[2]; // step: 2370
			fVec367SE[0] = (fTemp198SE + -(fConst308KI * ((fConst309KI * fTemp205SE) + (fConst310KI * fVec367SE[1]) /* Sum */)) /* Sum */);
			fTemp206SE = fVec367SE[0]; // step: 2382
			fVec366SE[0] = fTemp206SE;
			fTemp207SE = fVec371SE[2]; // step: 2402
			fVec372SE[0] = ((fConst308KI * ((fConst312KI * fVec367SE[0]) + (fConst313KI * fVec366SE[1]) + (fConst312KI * fTemp205SE) /* Sum */)) + -(fConst314KI * ((fConst315KI * fTemp207SE) + (fConst316KI * fVec372SE[1]) /* Sum */)) /* Sum */);
			fTemp208SE = fVec372SE[0]; // step: 2414
			fVec371SE[0] = fTemp208SE;
			fTemp209SE = fVec376SE[2]; // step: 2432
			fVec377SE[0] = ((fConst314KI * ((fConst317KI * fVec372SE[0]) + (fConst318KI * fVec371SE[1]) + (fConst317KI * fTemp207SE) /* Sum */)) + -(fConst319KI * ((fConst320KI * fTemp209SE) + (fConst321KI * fVec377SE[1]) /* Sum */)) /* Sum */);
			fTemp210SE = fVec377SE[0]; // step: 2444
			fVec376SE[0] = fTemp210SE;
			fTemp211SE = (fConst319KI * ((fConst322KI * fVec377SE[0]) + (fConst323KI * fVec376SE[1]) + (fConst322KI * fTemp209SE) /* Sum */)); // step: 2454
			fTemp212SE = fVec381SE[2]; // step: 2466
			fVec382SE[0] = (fTemp211SE + -(fConst326KI * ((fConst327KI * fTemp212SE) + (fConst330KI * fVec382SE[1]) /* Sum */)) /* Sum */);
			fTemp213SE = fVec382SE[0]; // step: 2481
			fVec381SE[0] = fTemp213SE;
			fTemp214SE = fVec386SE[2]; // step: 2501
			fVec387SE[0] = ((fConst326KI * ((fConst332KI * fVec382SE[0]) + (fConst333KI * fVec381SE[1]) + (fConst332KI * fTemp212SE) /* Sum */)) + -(fConst334KI * ((fConst335KI * fTemp214SE) + (fConst336KI * fVec387SE[1]) /* Sum */)) /* Sum */);
			fTemp215SE = fVec387SE[0]; // step: 2513
			fVec386SE[0] = fTemp215SE;
			fTemp216SE = fVec391SE[2]; // step: 2533
			fVec392SE[0] = ((fConst334KI * ((fConst338KI * fVec387SE[0]) + (fConst339KI * fVec386SE[1]) + (fConst338KI * fTemp214SE) /* Sum */)) + -(fConst340KI * ((fConst341KI * fTemp216SE) + (fConst342KI * fVec392SE[1]) /* Sum */)) /* Sum */);
			fTemp217SE = fVec392SE[0]; // step: 2545
			fVec391SE[0] = fTemp217SE;
			fTemp218SE = fVec394SE[2]; // step: 2553
			fVec395SE[0] = (fTemp211SE + -(fConst343KI * ((fConst344KI * fTemp218SE) + (fConst345KI * fVec395SE[1]) /* Sum */)) /* Sum */);
			fTemp219SE = fVec395SE[0]; // step: 2565
			fVec394SE[0] = fTemp219SE;
			fTemp220SE = fVec399SE[2]; // step: 2585
			fVec400SE[0] = ((fConst343KI * ((fConst347KI * fVec395SE[0]) + (fConst348KI * fVec394SE[1]) + (fConst347KI * fTemp218SE) /* Sum */)) + -(fConst349KI * ((fConst350KI * fTemp220SE) + (fConst351KI * fVec400SE[1]) /* Sum */)) /* Sum */);
			fTemp221SE = fVec400SE[0]; // step: 2597
			fVec399SE[0] = fTemp221SE;
			fTemp222SE = fVec404SE[2]; // step: 2615
			fVec405SE[0] = ((fConst349KI * ((fConst352KI * fVec400SE[0]) + (fConst353KI * fVec399SE[1]) + (fConst352KI * fTemp220SE) /* Sum */)) + -(fConst354KI * ((fConst355KI * fTemp222SE) + (fConst356KI * fVec405SE[1]) /* Sum */)) /* Sum */);
			fTemp223SE = fVec405SE[0]; // step: 2627
			fVec404SE[0] = fTemp223SE;
			fTemp224SE = (fConst354KI * ((fConst357KI * fVec405SE[0]) + (fConst358KI * fVec404SE[1]) + (fConst357KI * fTemp222SE) /* Sum */)); // step: 2637
			fTemp225SE = fVec409SE[2]; // step: 2649
			fVec410SE[0] = (fTemp224SE + -(fConst361KI * ((fConst362KI * fTemp225SE) + (fConst365KI * fVec410SE[1]) /* Sum */)) /* Sum */);
			fTemp226SE = fVec410SE[0]; // step: 2664
			fVec409SE[0] = fTemp226SE;
			fTemp227SE = fVec414SE[2]; // step: 2684
			fVec415SE[0] = ((fConst361KI * ((fConst367KI * fVec410SE[0]) + (fConst368KI * fVec409SE[1]) + (fConst367KI * fTemp225SE) /* Sum */)) + -(fConst369KI * ((fConst370KI * fTemp227SE) + (fConst371KI * fVec415SE[1]) /* Sum */)) /* Sum */);
			fTemp228SE = fVec415SE[0]; // step: 2696
			fVec414SE[0] = fTemp228SE;
			fTemp229SE = fVec419SE[2]; // step: 2716
			fVec420SE[0] = ((fConst369KI * ((fConst373KI * fVec415SE[0]) + (fConst374KI * fVec414SE[1]) + (fConst373KI * fTemp227SE) /* Sum */)) + -(fConst375KI * ((fConst376KI * fTemp229SE) + (fConst377KI * fVec420SE[1]) /* Sum */)) /* Sum */);
			fTemp230SE = fVec420SE[0]; // step: 2728
			fVec419SE[0] = fTemp230SE;
			fTemp231SE = fVec422SE[2]; // step: 2736
			fVec423SE[0] = (fTemp224SE + -(fConst378KI * ((fConst379KI * fTemp231SE) + (fConst380KI * fVec423SE[1]) /* Sum */)) /* Sum */);
			fTemp232SE = fVec423SE[0]; // step: 2748
			fVec422SE[0] = fTemp232SE;
			fTemp233SE = fVec427SE[2]; // step: 2768
			fVec428SE[0] = ((fConst378KI * ((fConst382KI * fVec423SE[0]) + (fConst383KI * fVec422SE[1]) + (fConst382KI * fTemp231SE) /* Sum */)) + -(fConst384KI * ((fConst385KI * fTemp233SE) + (fConst386KI * fVec428SE[1]) /* Sum */)) /* Sum */);
			fTemp234SE = fVec428SE[0]; // step: 2780
			fVec427SE[0] = fTemp234SE;
			fTemp235SE = fVec432SE[2]; // step: 2798
			fVec433SE[0] = ((fConst384KI * ((fConst387KI * fVec428SE[0]) + (fConst388KI * fVec427SE[1]) + (fConst387KI * fTemp233SE) /* Sum */)) + -(fConst389KI * ((fConst390KI * fTemp235SE) + (fConst391KI * fVec433SE[1]) /* Sum */)) /* Sum */);
			fTemp236SE = fVec433SE[0]; // step: 2810
			fVec432SE[0] = fTemp236SE;
			fTemp237SE = (fConst389KI * ((fConst392KI * fVec433SE[0]) + (fConst393KI * fVec432SE[1]) + (fConst392KI * fTemp235SE) /* Sum */)); // step: 2820
			fTemp238SE = fVec437SE[2]; // step: 2832
			fVec438SE[0] = (fTemp237SE + -(fConst396KI * ((fConst397KI * fTemp238SE) + (fConst400KI * fVec438SE[1]) /* Sum */)) /* Sum */);
			fTemp239SE = fVec438SE[0]; // step: 2847
			fVec437SE[0] = fTemp239SE;
			fTemp240SE = fVec442SE[2]; // step: 2867
			fVec443SE[0] = ((fConst396KI * ((fConst402KI * fVec438SE[0]) + (fConst403KI * fVec437SE[1]) + (fConst402KI * fTemp238SE) /* Sum */)) + -(fConst404KI * ((fConst405KI * fTemp240SE) + (fConst406KI * fVec443SE[1]) /* Sum */)) /* Sum */);
			fTemp241SE = fVec443SE[0]; // step: 2879
			fVec442SE[0] = fTemp241SE;
			fTemp242SE = fVec447SE[2]; // step: 2899
			fVec448SE[0] = ((fConst404KI * ((fConst408KI * fVec443SE[0]) + (fConst409KI * fVec442SE[1]) + (fConst408KI * fTemp240SE) /* Sum */)) + -(fConst410KI * ((fConst411KI * fTemp242SE) + (fConst412KI * fVec448SE[1]) /* Sum */)) /* Sum */);
			fTemp243SE = fVec448SE[0]; // step: 2911
			fVec447SE[0] = fTemp243SE;
			fTemp244SE = fVec450SE[2]; // step: 2919
			fVec451SE[0] = (fTemp237SE + -(fConst413KI * ((fConst414KI * fTemp244SE) + (fConst415KI * fVec451SE[1]) /* Sum */)) /* Sum */);
			fTemp245SE = fVec451SE[0]; // step: 2931
			fVec450SE[0] = fTemp245SE;
			fTemp246SE = fVec455SE[2]; // step: 2951
			fVec456SE[0] = ((fConst413KI * ((fConst417KI * fVec451SE[0]) + (fConst418KI * fVec450SE[1]) + (fConst417KI * fTemp244SE) /* Sum */)) + -(fConst419KI * ((fConst420KI * fTemp246SE) + (fConst421KI * fVec456SE[1]) /* Sum */)) /* Sum */);
			fTemp247SE = fVec456SE[0]; // step: 2963
			fVec455SE[0] = fTemp247SE;
			fTemp248SE = fVec460SE[2]; // step: 2981
			fVec461SE[0] = ((fConst419KI * ((fConst422KI * fVec456SE[0]) + (fConst423KI * fVec455SE[1]) + (fConst422KI * fTemp246SE) /* Sum */)) + -(fConst424KI * ((fConst425KI * fTemp248SE) + (fConst426KI * fVec461SE[1]) /* Sum */)) /* Sum */);
			fTemp249SE = fVec461SE[0]; // step: 2993
			fVec460SE[0] = fTemp249SE;
			fTemp250SE = (fConst424KI * ((fConst427KI * fVec461SE[0]) + (fConst428KI * fVec460SE[1]) + (fConst427KI * fTemp248SE) /* Sum */)); // step: 3003
			fTemp251SE = fVec465SE[2]; // step: 3015
			fVec466SE[0] = (fTemp250SE + -(fConst431KI * ((fConst432KI * fTemp251SE) + (fConst435KI * fVec466SE[1]) /* Sum */)) /* Sum */);
			fTemp252SE = fVec466SE[0]; // step: 3030
			fVec465SE[0] = fTemp252SE;
			fTemp253SE = fVec470SE[2]; // step: 3050
			fVec471SE[0] = ((fConst431KI * ((fConst437KI * fVec466SE[0]) + (fConst438KI * fVec465SE[1]) + (fConst437KI * fTemp251SE) /* Sum */)) + -(fConst439KI * ((fConst440KI * fTemp253SE) + (fConst441KI * fVec471SE[1]) /* Sum */)) /* Sum */);
			fTemp254SE = fVec471SE[0]; // step: 3062
			fVec470SE[0] = fTemp254SE;
			fTemp255SE = fVec475SE[2]; // step: 3082
			fVec476SE[0] = ((fConst439KI * ((fConst443KI * fVec471SE[0]) + (fConst444KI * fVec470SE[1]) + (fConst443KI * fTemp253SE) /* Sum */)) + -(fConst445KI * ((fConst446KI * fTemp255SE) + (fConst447KI * fVec476SE[1]) /* Sum */)) /* Sum */);
			fTemp256SE = fVec476SE[0]; // step: 3094
			fVec475SE[0] = fTemp256SE;
			fTemp257SE = fVec478SE[2]; // step: 3102
			fVec479SE[0] = (fTemp250SE + -(fConst448KI * ((fConst449KI * fTemp257SE) + (fConst450KI * fVec479SE[1]) /* Sum */)) /* Sum */);
			fTemp258SE = fVec479SE[0]; // step: 3114
			fVec478SE[0] = fTemp258SE;
			fTemp259SE = fVec483SE[2]; // step: 3134
			fVec484SE[0] = ((fConst448KI * ((fConst452KI * fVec479SE[0]) + (fConst453KI * fVec478SE[1]) + (fConst452KI * fTemp257SE) /* Sum */)) + -(fConst454KI * ((fConst455KI * fTemp259SE) + (fConst456KI * fVec484SE[1]) /* Sum */)) /* Sum */);
			fTemp260SE = fVec484SE[0]; // step: 3146
			fVec483SE[0] = fTemp260SE;
			fTemp261SE = fVec488SE[2]; // step: 3164
			fVec489SE[0] = ((fConst454KI * ((fConst457KI * fVec484SE[0]) + (fConst458KI * fVec483SE[1]) + (fConst457KI * fTemp259SE) /* Sum */)) + -(fConst459KI * ((fConst460KI * fTemp261SE) + (fConst461KI * fVec489SE[1]) /* Sum */)) /* Sum */);
			fTemp262SE = fVec489SE[0]; // step: 3176
			fVec488SE[0] = fTemp262SE;
			fTemp263SE = (fConst459KI * ((fConst462KI * fVec489SE[0]) + (fConst463KI * fVec488SE[1]) + (fConst462KI * fTemp261SE) /* Sum */)); // step: 3186
			fTemp264SE = fVec493SE[2]; // step: 3198
			fVec494SE[0] = (fTemp263SE + -(fConst466KI * ((fConst467KI * fTemp264SE) + (fConst470KI * fVec494SE[1]) /* Sum */)) /* Sum */);
			fTemp265SE = fVec494SE[0]; // step: 3213
			fVec493SE[0] = fTemp265SE;
			fTemp266SE = fVec498SE[2]; // step: 3233
			fVec499SE[0] = ((fConst466KI * ((fConst472KI * fVec494SE[0]) + (fConst473KI * fVec493SE[1]) + (fConst472KI * fTemp264SE) /* Sum */)) + -(fConst474KI * ((fConst475KI * fTemp266SE) + (fConst476KI * fVec499SE[1]) /* Sum */)) /* Sum */);
			fTemp267SE = fVec499SE[0]; // step: 3245
			fVec498SE[0] = fTemp267SE;
			fTemp268SE = fVec503SE[2]; // step: 3265
			fVec504SE[0] = ((fConst474KI * ((fConst478KI * fVec499SE[0]) + (fConst479KI * fVec498SE[1]) + (fConst478KI * fTemp266SE) /* Sum */)) + -(fConst480KI * ((fConst481KI * fTemp268SE) + (fConst482KI * fVec504SE[1]) /* Sum */)) /* Sum */);
			fTemp269SE = fVec504SE[0]; // step: 3277
			fVec503SE[0] = fTemp269SE;
			fTemp270SE = fVec506SE[2]; // step: 3285
			fVec507SE[0] = (fTemp263SE + -(fConst483KI * ((fConst484KI * fTemp270SE) + (fConst485KI * fVec507SE[1]) /* Sum */)) /* Sum */);
			fTemp271SE = fVec507SE[0]; // step: 3297
			fVec506SE[0] = fTemp271SE;
			fTemp272SE = fVec511SE[2]; // step: 3317
			fVec512SE[0] = ((fConst483KI * ((fConst487KI * fVec507SE[0]) + (fConst488KI * fVec506SE[1]) + (fConst487KI * fTemp270SE) /* Sum */)) + -(fConst489KI * ((fConst490KI * fTemp272SE) + (fConst491KI * fVec512SE[1]) /* Sum */)) /* Sum */);
			fTemp273SE = fVec512SE[0]; // step: 3329
			fVec511SE[0] = fTemp273SE;
			fTemp274SE = fVec516SE[2]; // step: 3347
			fVec517SE[0] = ((fConst489KI * ((fConst492KI * fVec512SE[0]) + (fConst493KI * fVec511SE[1]) + (fConst492KI * fTemp272SE) /* Sum */)) + -(fConst494KI * ((fConst495KI * fTemp274SE) + (fConst496KI * fVec517SE[1]) /* Sum */)) /* Sum */);
			fTemp275SE = fVec517SE[0]; // step: 3359
			fVec516SE[0] = fTemp275SE;
			fVec519SE[0] = ((fVec519SE[1] * fSlow36BE) + (fabsf((fConst25KI * ((fConst499KI * fVec140SE[0]) + (fConst500KI * fVec139SE[1]) + (fConst499KI * fTemp99SE) /* Sum */))) * fSlow37BE) /* Sum */);
			fSlow38SE = (fSlow34BE + (2e+01f * log10f(fVec519SE[0])) /* Sum */);
			fVec523SE[0] = ((fSlow36BE * fVec523SE[1]) + (fSlow37BE * fabsf((fConst60KI * ((fConst502KI * fVec168SE[0]) + (fConst503KI * fVec167SE[1]) + (fConst502KI * fTemp112SE) /* Sum */)))) /* Sum */);
			fSlow39SE = (fSlow34BE + (2e+01f * log10f(fVec523SE[0])) /* Sum */);
			fVec527SE[0] = ((fSlow36BE * fVec527SE[1]) + (fSlow37BE * fabsf((fConst95KI * ((fConst505KI * fVec196SE[0]) + (fConst506KI * fVec195SE[1]) + (fConst505KI * fTemp125SE) /* Sum */)))) /* Sum */);
			fSlow40SE = (fSlow34BE + (2e+01f * log10f(fVec527SE[0])) /* Sum */);
			fVec531SE[0] = ((fSlow36BE * fVec531SE[1]) + (fSlow37BE * fabsf((fConst130KI * ((fConst508KI * fVec224SE[0]) + (fConst509KI * fVec223SE[1]) + (fConst508KI * fTemp138SE) /* Sum */)))) /* Sum */);
			fSlow41SE = (fSlow34BE + (2e+01f * log10f(fVec531SE[0])) /* Sum */);
			fVec535SE[0] = ((fSlow36BE * fVec535SE[1]) + (fSlow37BE * fabsf((fConst165KI * ((fConst511KI * fVec252SE[0]) + (fConst512KI * fVec251SE[1]) + (fConst511KI * fTemp151SE) /* Sum */)))) /* Sum */);
			fSlow42SE = (fSlow34BE + (2e+01f * log10f(fVec535SE[0])) /* Sum */);
			fVec539SE[0] = ((fSlow36BE * fVec539SE[1]) + (fSlow37BE * fabsf((fConst200KI * ((fConst514KI * fVec280SE[0]) + (fConst515KI * fVec279SE[1]) + (fConst514KI * fTemp164SE) /* Sum */)))) /* Sum */);
			fSlow43SE = (fSlow34BE + (2e+01f * log10f(fVec539SE[0])) /* Sum */);
			fVec543SE[0] = ((fSlow36BE * fVec543SE[1]) + (fSlow37BE * fabsf((fConst235KI * ((fConst517KI * fVec308SE[0]) + (fConst518KI * fVec307SE[1]) + (fConst517KI * fTemp177SE) /* Sum */)))) /* Sum */);
			fSlow44SE = (fSlow34BE + (2e+01f * log10f(fVec543SE[0])) /* Sum */);
			fVec547SE[0] = ((fSlow36BE * fVec547SE[1]) + (fSlow37BE * fabsf((fConst270KI * ((fConst520KI * fVec336SE[0]) + (fConst521KI * fVec335SE[1]) + (fConst520KI * fTemp190SE) /* Sum */)))) /* Sum */);
			fSlow45SE = (fSlow34BE + (2e+01f * log10f(fVec547SE[0])) /* Sum */);
			fVec551SE[0] = ((fSlow36BE * fVec551SE[1]) + (fSlow37BE * fabsf((fConst305KI * ((fConst523KI * fVec364SE[0]) + (fConst524KI * fVec363SE[1]) + (fConst523KI * fTemp203SE) /* Sum */)))) /* Sum */);
			fSlow46SE = (fSlow34BE + (2e+01f * log10f(fVec551SE[0])) /* Sum */);
			fVec555SE[0] = ((fSlow36BE * fVec555SE[1]) + (fSlow37BE * fabsf((fConst340KI * ((fConst526KI * fVec392SE[0]) + (fConst527KI * fVec391SE[1]) + (fConst526KI * fTemp216SE) /* Sum */)))) /* Sum */);
			fSlow47SE = (fSlow34BE + (2e+01f * log10f(fVec555SE[0])) /* Sum */);
			fVec559SE[0] = ((fSlow36BE * fVec559SE[1]) + (fSlow37BE * fabsf((fConst375KI * ((fConst529KI * fVec420SE[0]) + (fConst530KI * fVec419SE[1]) + (fConst529KI * fTemp229SE) /* Sum */)))) /* Sum */);
			fSlow48SE = (fSlow34BE + (2e+01f * log10f(fVec559SE[0])) /* Sum */);
			fVec563SE[0] = ((fSlow36BE * fVec563SE[1]) + (fSlow37BE * fabsf((fConst410KI * ((fConst532KI * fVec448SE[0]) + (fConst533KI * fVec447SE[1]) + (fConst532KI * fTemp242SE) /* Sum */)))) /* Sum */);
			fSlow49SE = (fSlow34BE + (2e+01f * log10f(fVec563SE[0])) /* Sum */);
			fVec567SE[0] = ((fSlow36BE * fVec567SE[1]) + (fSlow37BE * fabsf((fConst445KI * ((fConst535KI * fVec476SE[0]) + (fConst536KI * fVec475SE[1]) + (fConst535KI * fTemp255SE) /* Sum */)))) /* Sum */);
			fSlow50SE = (fSlow34BE + (2e+01f * log10f(fVec567SE[0])) /* Sum */);
			fVec571SE[0] = ((fSlow36BE * fVec571SE[1]) + (fSlow37BE * fabsf((fConst480KI * ((fConst538KI * fVec504SE[0]) + (fConst539KI * fVec503SE[1]) + (fConst538KI * fTemp268SE) /* Sum */)))) /* Sum */);
			fSlow51SE = (fSlow34BE + (2e+01f * log10f(fVec571SE[0])) /* Sum */);
			fVec575SE[0] = ((fSlow36BE * fVec575SE[1]) + (fSlow37BE * fabsf((fConst494KI * ((fConst540KI * fVec517SE[0]) + (fConst541KI * fVec516SE[1]) + (fConst540KI * fTemp274SE) /* Sum */)))) /* Sum */);
			fSlow52SE = (fSlow34BE + (2e+01f * log10f(fVec575SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp94SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp94SE);  // Zone Exec Code
			// post processing
			fVec575SE[1] = fVec575SE[0];
			fVec571SE[1] = fVec571SE[0];
			fVec567SE[1] = fVec567SE[0];
			fVec563SE[1] = fVec563SE[0];
			fVec559SE[1] = fVec559SE[0];
			fVec555SE[1] = fVec555SE[0];
			fVec551SE[1] = fVec551SE[0];
			fVec547SE[1] = fVec547SE[0];
			fVec543SE[1] = fVec543SE[0];
			fVec539SE[1] = fVec539SE[0];
			fVec535SE[1] = fVec535SE[0];
			fVec531SE[1] = fVec531SE[0];
			fVec527SE[1] = fVec527SE[0];
			fVec523SE[1] = fVec523SE[0];
			fVec519SE[1] = fVec519SE[0];
			fVec516SE[2] = fVec516SE[1];
			fVec516SE[1] = fVec516SE[0];
			fVec517SE[1] = fVec517SE[0];
			fVec511SE[2] = fVec511SE[1];
			fVec511SE[1] = fVec511SE[0];
			fVec512SE[1] = fVec512SE[0];
			fVec506SE[2] = fVec506SE[1];
			fVec506SE[1] = fVec506SE[0];
			fVec507SE[1] = fVec507SE[0];
			fVec503SE[2] = fVec503SE[1];
			fVec503SE[1] = fVec503SE[0];
			fVec504SE[1] = fVec504SE[0];
			fVec498SE[2] = fVec498SE[1];
			fVec498SE[1] = fVec498SE[0];
			fVec499SE[1] = fVec499SE[0];
			fVec493SE[2] = fVec493SE[1];
			fVec493SE[1] = fVec493SE[0];
			fVec494SE[1] = fVec494SE[0];
			fVec488SE[2] = fVec488SE[1];
			fVec488SE[1] = fVec488SE[0];
			fVec489SE[1] = fVec489SE[0];
			fVec483SE[2] = fVec483SE[1];
			fVec483SE[1] = fVec483SE[0];
			fVec484SE[1] = fVec484SE[0];
			fVec478SE[2] = fVec478SE[1];
			fVec478SE[1] = fVec478SE[0];
			fVec479SE[1] = fVec479SE[0];
			fVec475SE[2] = fVec475SE[1];
			fVec475SE[1] = fVec475SE[0];
			fVec476SE[1] = fVec476SE[0];
			fVec470SE[2] = fVec470SE[1];
			fVec470SE[1] = fVec470SE[0];
			fVec471SE[1] = fVec471SE[0];
			fVec465SE[2] = fVec465SE[1];
			fVec465SE[1] = fVec465SE[0];
			fVec466SE[1] = fVec466SE[0];
			fVec460SE[2] = fVec460SE[1];
			fVec460SE[1] = fVec460SE[0];
			fVec461SE[1] = fVec461SE[0];
			fVec455SE[2] = fVec455SE[1];
			fVec455SE[1] = fVec455SE[0];
			fVec456SE[1] = fVec456SE[0];
			fVec450SE[2] = fVec450SE[1];
			fVec450SE[1] = fVec450SE[0];
			fVec451SE[1] = fVec451SE[0];
			fVec447SE[2] = fVec447SE[1];
			fVec447SE[1] = fVec447SE[0];
			fVec448SE[1] = fVec448SE[0];
			fVec442SE[2] = fVec442SE[1];
			fVec442SE[1] = fVec442SE[0];
			fVec443SE[1] = fVec443SE[0];
			fVec437SE[2] = fVec437SE[1];
			fVec437SE[1] = fVec437SE[0];
			fVec438SE[1] = fVec438SE[0];
			fVec432SE[2] = fVec432SE[1];
			fVec432SE[1] = fVec432SE[0];
			fVec433SE[1] = fVec433SE[0];
			fVec427SE[2] = fVec427SE[1];
			fVec427SE[1] = fVec427SE[0];
			fVec428SE[1] = fVec428SE[0];
			fVec422SE[2] = fVec422SE[1];
			fVec422SE[1] = fVec422SE[0];
			fVec423SE[1] = fVec423SE[0];
			fVec419SE[2] = fVec419SE[1];
			fVec419SE[1] = fVec419SE[0];
			fVec420SE[1] = fVec420SE[0];
			fVec414SE[2] = fVec414SE[1];
			fVec414SE[1] = fVec414SE[0];
			fVec415SE[1] = fVec415SE[0];
			fVec409SE[2] = fVec409SE[1];
			fVec409SE[1] = fVec409SE[0];
			fVec410SE[1] = fVec410SE[0];
			fVec404SE[2] = fVec404SE[1];
			fVec404SE[1] = fVec404SE[0];
			fVec405SE[1] = fVec405SE[0];
			fVec399SE[2] = fVec399SE[1];
			fVec399SE[1] = fVec399SE[0];
			fVec400SE[1] = fVec400SE[0];
			fVec394SE[2] = fVec394SE[1];
			fVec394SE[1] = fVec394SE[0];
			fVec395SE[1] = fVec395SE[0];
			fVec391SE[2] = fVec391SE[1];
			fVec391SE[1] = fVec391SE[0];
			fVec392SE[1] = fVec392SE[0];
			fVec386SE[2] = fVec386SE[1];
			fVec386SE[1] = fVec386SE[0];
			fVec387SE[1] = fVec387SE[0];
			fVec381SE[2] = fVec381SE[1];
			fVec381SE[1] = fVec381SE[0];
			fVec382SE[1] = fVec382SE[0];
			fVec376SE[2] = fVec376SE[1];
			fVec376SE[1] = fVec376SE[0];
			fVec377SE[1] = fVec377SE[0];
			fVec371SE[2] = fVec371SE[1];
			fVec371SE[1] = fVec371SE[0];
			fVec372SE[1] = fVec372SE[0];
			fVec366SE[2] = fVec366SE[1];
			fVec366SE[1] = fVec366SE[0];
			fVec367SE[1] = fVec367SE[0];
			fVec363SE[2] = fVec363SE[1];
			fVec363SE[1] = fVec363SE[0];
			fVec364SE[1] = fVec364SE[0];
			fVec358SE[2] = fVec358SE[1];
			fVec358SE[1] = fVec358SE[0];
			fVec359SE[1] = fVec359SE[0];
			fVec353SE[2] = fVec353SE[1];
			fVec353SE[1] = fVec353SE[0];
			fVec354SE[1] = fVec354SE[0];
			fVec348SE[2] = fVec348SE[1];
			fVec348SE[1] = fVec348SE[0];
			fVec349SE[1] = fVec349SE[0];
			fVec343SE[2] = fVec343SE[1];
			fVec343SE[1] = fVec343SE[0];
			fVec344SE[1] = fVec344SE[0];
			fVec338SE[2] = fVec338SE[1];
			fVec338SE[1] = fVec338SE[0];
			fVec339SE[1] = fVec339SE[0];
			fVec335SE[2] = fVec335SE[1];
			fVec335SE[1] = fVec335SE[0];
			fVec336SE[1] = fVec336SE[0];
			fVec330SE[2] = fVec330SE[1];
			fVec330SE[1] = fVec330SE[0];
			fVec331SE[1] = fVec331SE[0];
			fVec325SE[2] = fVec325SE[1];
			fVec325SE[1] = fVec325SE[0];
			fVec326SE[1] = fVec326SE[0];
			fVec320SE[2] = fVec320SE[1];
			fVec320SE[1] = fVec320SE[0];
			fVec321SE[1] = fVec321SE[0];
			fVec315SE[2] = fVec315SE[1];
			fVec315SE[1] = fVec315SE[0];
			fVec316SE[1] = fVec316SE[0];
			fVec310SE[2] = fVec310SE[1];
			fVec310SE[1] = fVec310SE[0];
			fVec311SE[1] = fVec311SE[0];
			fVec307SE[2] = fVec307SE[1];
			fVec307SE[1] = fVec307SE[0];
			fVec308SE[1] = fVec308SE[0];
			fVec302SE[2] = fVec302SE[1];
			fVec302SE[1] = fVec302SE[0];
			fVec303SE[1] = fVec303SE[0];
			fVec297SE[2] = fVec297SE[1];
			fVec297SE[1] = fVec297SE[0];
			fVec298SE[1] = fVec298SE[0];
			fVec292SE[2] = fVec292SE[1];
			fVec292SE[1] = fVec292SE[0];
			fVec293SE[1] = fVec293SE[0];
			fVec287SE[2] = fVec287SE[1];
			fVec287SE[1] = fVec287SE[0];
			fVec288SE[1] = fVec288SE[0];
			fVec282SE[2] = fVec282SE[1];
			fVec282SE[1] = fVec282SE[0];
			fVec283SE[1] = fVec283SE[0];
			fVec279SE[2] = fVec279SE[1];
			fVec279SE[1] = fVec279SE[0];
			fVec280SE[1] = fVec280SE[0];
			fVec274SE[2] = fVec274SE[1];
			fVec274SE[1] = fVec274SE[0];
			fVec275SE[1] = fVec275SE[0];
			fVec269SE[2] = fVec269SE[1];
			fVec269SE[1] = fVec269SE[0];
			fVec270SE[1] = fVec270SE[0];
			fVec264SE[2] = fVec264SE[1];
			fVec264SE[1] = fVec264SE[0];
			fVec265SE[1] = fVec265SE[0];
			fVec259SE[2] = fVec259SE[1];
			fVec259SE[1] = fVec259SE[0];
			fVec260SE[1] = fVec260SE[0];
			fVec254SE[2] = fVec254SE[1];
			fVec254SE[1] = fVec254SE[0];
			fVec255SE[1] = fVec255SE[0];
			fVec251SE[2] = fVec251SE[1];
			fVec251SE[1] = fVec251SE[0];
			fVec252SE[1] = fVec252SE[0];
			fVec246SE[2] = fVec246SE[1];
			fVec246SE[1] = fVec246SE[0];
			fVec247SE[1] = fVec247SE[0];
			fVec241SE[2] = fVec241SE[1];
			fVec241SE[1] = fVec241SE[0];
			fVec242SE[1] = fVec242SE[0];
			fVec236SE[2] = fVec236SE[1];
			fVec236SE[1] = fVec236SE[0];
			fVec237SE[1] = fVec237SE[0];
			fVec231SE[2] = fVec231SE[1];
			fVec231SE[1] = fVec231SE[0];
			fVec232SE[1] = fVec232SE[0];
			fVec226SE[2] = fVec226SE[1];
			fVec226SE[1] = fVec226SE[0];
			fVec227SE[1] = fVec227SE[0];
			fVec223SE[2] = fVec223SE[1];
			fVec223SE[1] = fVec223SE[0];
			fVec224SE[1] = fVec224SE[0];
			fVec218SE[2] = fVec218SE[1];
			fVec218SE[1] = fVec218SE[0];
			fVec219SE[1] = fVec219SE[0];
			fVec213SE[2] = fVec213SE[1];
			fVec213SE[1] = fVec213SE[0];
			fVec214SE[1] = fVec214SE[0];
			fVec208SE[2] = fVec208SE[1];
			fVec208SE[1] = fVec208SE[0];
			fVec209SE[1] = fVec209SE[0];
			fVec203SE[2] = fVec203SE[1];
			fVec203SE[1] = fVec203SE[0];
			fVec204SE[1] = fVec204SE[0];
			fVec198SE[2] = fVec198SE[1];
			fVec198SE[1] = fVec198SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec195SE[2] = fVec195SE[1];
			fVec195SE[1] = fVec195SE[0];
			fVec196SE[1] = fVec196SE[0];
			fVec190SE[2] = fVec190SE[1];
			fVec190SE[1] = fVec190SE[0];
			fVec191SE[1] = fVec191SE[0];
			fVec185SE[2] = fVec185SE[1];
			fVec185SE[1] = fVec185SE[0];
			fVec186SE[1] = fVec186SE[0];
			fVec180SE[2] = fVec180SE[1];
			fVec180SE[1] = fVec180SE[0];
			fVec181SE[1] = fVec181SE[0];
			fVec175SE[2] = fVec175SE[1];
			fVec175SE[1] = fVec175SE[0];
			fVec176SE[1] = fVec176SE[0];
			fVec170SE[2] = fVec170SE[1];
			fVec170SE[1] = fVec170SE[0];
			fVec171SE[1] = fVec171SE[0];
			fVec167SE[2] = fVec167SE[1];
			fVec167SE[1] = fVec167SE[0];
			fVec168SE[1] = fVec168SE[0];
			fVec162SE[2] = fVec162SE[1];
			fVec162SE[1] = fVec162SE[0];
			fVec163SE[1] = fVec163SE[0];
			fVec157SE[2] = fVec157SE[1];
			fVec157SE[1] = fVec157SE[0];
			fVec158SE[1] = fVec158SE[0];
			fVec152SE[2] = fVec152SE[1];
			fVec152SE[1] = fVec152SE[0];
			fVec153SE[1] = fVec153SE[0];
			fVec147SE[2] = fVec147SE[1];
			fVec147SE[1] = fVec147SE[0];
			fVec148SE[1] = fVec148SE[0];
			fVec142SE[2] = fVec142SE[1];
			fVec142SE[1] = fVec142SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec139SE[2] = fVec139SE[1];
			fVec139SE[1] = fVec139SE[0];
			fVec140SE[1] = fVec140SE[0];
			fVec134SE[2] = fVec134SE[1];
			fVec134SE[1] = fVec134SE[0];
			fVec135SE[1] = fVec135SE[0];
			fVec129SE[2] = fVec129SE[1];
			fVec129SE[1] = fVec129SE[0];
			fVec130SE[1] = fVec130SE[0];
			fVec114SE[1] = fVec114SE[0];
			fVec120SE[1] = fVec120SE[0];
			fVec118SE[1] = fVec118SE[0];
			fVec116SE[1] = fVec116SE[0];
			fVec113SE[1] = fVec113SE[0];
			fVec111SE[1] = fVec111SE[0];
			fVec110SE[1] = fVec110SE[0];
			fVec106SE[1] = fVec106SE[0];
			fVec108SE[1] = fVec108SE[0];
			fVec107SE[1] = fVec107SE[0];
			fVec101SE[1] = fVec101SE[0];
			fVec97SE[1] = fVec97SE[0];
			fVec99SE[1] = fVec99SE[0];
			fVec98SE[1] = fVec98SE[0];
			fVec94SE[2] = fVec94SE[1];
			fVec94SE[1] = fVec94SE[0];
			fVec95SE[1] = fVec95SE[0];
			fVec90SE[2] = fVec90SE[1];
			fVec90SE[1] = fVec90SE[0];
			fVec89SE[1] = fVec89SE[0];
			fVec87SE[1] = fVec87SE[0];
			fVec78SE[1] = fVec78SE[0];
			fVec84SE[1] = fVec84SE[0];
			fVec82SE[1] = fVec82SE[0];
			fVec80SE[1] = fVec80SE[0];
			fVec77SE[1] = fVec77SE[0];
			fVec75SE[1] = fVec75SE[0];
			fVec71SE[2] = fVec71SE[1];
			fVec71SE[1] = fVec71SE[0];
			fVec68SE[1] = fVec68SE[0];
			fVec69SE[1] = fVec69SE[0];
			fVec66SE[1] = fVec66SE[0];
			fVec47SE[1] = fVec47SE[0];
			fVec45SE[1] = fVec45SE[0];
			fVec41SI[3] = fVec41SI[2];
			fVec41SI[2] = fVec41SI[1];
			fVec41SI[1] = fVec41SI[0];
			fVec42SI[1] = fVec42SI[0];
			iVec39SI[1] = iVec39SI[0];
			fVec38SE[1] = fVec38SE[0];
			fVec36SE[1] = fVec36SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec29SE[1] = fVec29SE[0];
			fVec27SE[1] = fVec27SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec22SE[1] = fVec22SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec15SE[1] = fVec15SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec15SEState = fVec15SE[1];
		fVec17SEState = fVec17SE[1];
		fVec18SEState = fVec18SE[1];
		fVec19SEState = fVec19SE[1];
		fVec21SEState = fVec21SE[1];
		fVec22SEState = fVec22SE[1];
		fVec24SEState = fVec24SE[1];
		fVec26SEState = fVec26SE[1];
		fVec27SEState = fVec27SE[1];
		fVec29SEState = fVec29SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec33SEState = fVec33SE[1];
		fVec34SEState = fVec34SE[1];
		fVec36SEState = fVec36SE[1];
		fVec38SEState = fVec38SE[1];
		iVec39SIState = iVec39SI[1];
		fVec42SIState = fVec42SI[1];
		fVec41SIState[0] = fVec41SI[1];
		fVec41SIState[1] = fVec41SI[2];
		fVec41SIState[2] = fVec41SI[3];
		fVec45SEState = fVec45SE[1];
		fVec47SEState = fVec47SE[1];
		fVec66SEState = fVec66SE[1];
		fVec69SEState = fVec69SE[1];
		fVec68SEState = fVec68SE[1];
		fVec71SEState[0] = fVec71SE[1];
		fVec71SEState[1] = fVec71SE[2];
		fVec75SEState = fVec75SE[1];
		fVec77SEState = fVec77SE[1];
		fVec80SEState = fVec80SE[1];
		fVec82SEState = fVec82SE[1];
		fVec84SEState = fVec84SE[1];
		fVec78SEState = fVec78SE[1];
		fVec87SEState = fVec87SE[1];
		fVec89SEState = fVec89SE[1];
		fVec90SEState[0] = fVec90SE[1];
		fVec90SEState[1] = fVec90SE[2];
		fVec95SEState = fVec95SE[1];
		fVec94SEState[0] = fVec94SE[1];
		fVec94SEState[1] = fVec94SE[2];
		fVec98SEState = fVec98SE[1];
		fVec99SEState = fVec99SE[1];
		fVec97SEState = fVec97SE[1];
		fVec101SEState = fVec101SE[1];
		fVec107SEState = fVec107SE[1];
		fVec108SEState = fVec108SE[1];
		fVec106SEState = fVec106SE[1];
		fVec110SEState = fVec110SE[1];
		fVec111SEState = fVec111SE[1];
		fVec113SEState = fVec113SE[1];
		fVec116SEState = fVec116SE[1];
		fVec118SEState = fVec118SE[1];
		fVec120SEState = fVec120SE[1];
		fVec114SEState = fVec114SE[1];
		fVec130SEState = fVec130SE[1];
		fVec129SEState[0] = fVec129SE[1];
		fVec129SEState[1] = fVec129SE[2];
		fVec135SEState = fVec135SE[1];
		fVec134SEState[0] = fVec134SE[1];
		fVec134SEState[1] = fVec134SE[2];
		fVec140SEState = fVec140SE[1];
		fVec139SEState[0] = fVec139SE[1];
		fVec139SEState[1] = fVec139SE[2];
		fVec143SEState = fVec143SE[1];
		fVec142SEState[0] = fVec142SE[1];
		fVec142SEState[1] = fVec142SE[2];
		fVec148SEState = fVec148SE[1];
		fVec147SEState[0] = fVec147SE[1];
		fVec147SEState[1] = fVec147SE[2];
		fVec153SEState = fVec153SE[1];
		fVec152SEState[0] = fVec152SE[1];
		fVec152SEState[1] = fVec152SE[2];
		fVec158SEState = fVec158SE[1];
		fVec157SEState[0] = fVec157SE[1];
		fVec157SEState[1] = fVec157SE[2];
		fVec163SEState = fVec163SE[1];
		fVec162SEState[0] = fVec162SE[1];
		fVec162SEState[1] = fVec162SE[2];
		fVec168SEState = fVec168SE[1];
		fVec167SEState[0] = fVec167SE[1];
		fVec167SEState[1] = fVec167SE[2];
		fVec171SEState = fVec171SE[1];
		fVec170SEState[0] = fVec170SE[1];
		fVec170SEState[1] = fVec170SE[2];
		fVec176SEState = fVec176SE[1];
		fVec175SEState[0] = fVec175SE[1];
		fVec175SEState[1] = fVec175SE[2];
		fVec181SEState = fVec181SE[1];
		fVec180SEState[0] = fVec180SE[1];
		fVec180SEState[1] = fVec180SE[2];
		fVec186SEState = fVec186SE[1];
		fVec185SEState[0] = fVec185SE[1];
		fVec185SEState[1] = fVec185SE[2];
		fVec191SEState = fVec191SE[1];
		fVec190SEState[0] = fVec190SE[1];
		fVec190SEState[1] = fVec190SE[2];
		fVec196SEState = fVec196SE[1];
		fVec195SEState[0] = fVec195SE[1];
		fVec195SEState[1] = fVec195SE[2];
		fVec199SEState = fVec199SE[1];
		fVec198SEState[0] = fVec198SE[1];
		fVec198SEState[1] = fVec198SE[2];
		fVec204SEState = fVec204SE[1];
		fVec203SEState[0] = fVec203SE[1];
		fVec203SEState[1] = fVec203SE[2];
		fVec209SEState = fVec209SE[1];
		fVec208SEState[0] = fVec208SE[1];
		fVec208SEState[1] = fVec208SE[2];
		fVec214SEState = fVec214SE[1];
		fVec213SEState[0] = fVec213SE[1];
		fVec213SEState[1] = fVec213SE[2];
		fVec219SEState = fVec219SE[1];
		fVec218SEState[0] = fVec218SE[1];
		fVec218SEState[1] = fVec218SE[2];
		fVec224SEState = fVec224SE[1];
		fVec223SEState[0] = fVec223SE[1];
		fVec223SEState[1] = fVec223SE[2];
		fVec227SEState = fVec227SE[1];
		fVec226SEState[0] = fVec226SE[1];
		fVec226SEState[1] = fVec226SE[2];
		fVec232SEState = fVec232SE[1];
		fVec231SEState[0] = fVec231SE[1];
		fVec231SEState[1] = fVec231SE[2];
		fVec237SEState = fVec237SE[1];
		fVec236SEState[0] = fVec236SE[1];
		fVec236SEState[1] = fVec236SE[2];
		fVec242SEState = fVec242SE[1];
		fVec241SEState[0] = fVec241SE[1];
		fVec241SEState[1] = fVec241SE[2];
		fVec247SEState = fVec247SE[1];
		fVec246SEState[0] = fVec246SE[1];
		fVec246SEState[1] = fVec246SE[2];
		fVec252SEState = fVec252SE[1];
		fVec251SEState[0] = fVec251SE[1];
		fVec251SEState[1] = fVec251SE[2];
		fVec255SEState = fVec255SE[1];
		fVec254SEState[0] = fVec254SE[1];
		fVec254SEState[1] = fVec254SE[2];
		fVec260SEState = fVec260SE[1];
		fVec259SEState[0] = fVec259SE[1];
		fVec259SEState[1] = fVec259SE[2];
		fVec265SEState = fVec265SE[1];
		fVec264SEState[0] = fVec264SE[1];
		fVec264SEState[1] = fVec264SE[2];
		fVec270SEState = fVec270SE[1];
		fVec269SEState[0] = fVec269SE[1];
		fVec269SEState[1] = fVec269SE[2];
		fVec275SEState = fVec275SE[1];
		fVec274SEState[0] = fVec274SE[1];
		fVec274SEState[1] = fVec274SE[2];
		fVec280SEState = fVec280SE[1];
		fVec279SEState[0] = fVec279SE[1];
		fVec279SEState[1] = fVec279SE[2];
		fVec283SEState = fVec283SE[1];
		fVec282SEState[0] = fVec282SE[1];
		fVec282SEState[1] = fVec282SE[2];
		fVec288SEState = fVec288SE[1];
		fVec287SEState[0] = fVec287SE[1];
		fVec287SEState[1] = fVec287SE[2];
		fVec293SEState = fVec293SE[1];
		fVec292SEState[0] = fVec292SE[1];
		fVec292SEState[1] = fVec292SE[2];
		fVec298SEState = fVec298SE[1];
		fVec297SEState[0] = fVec297SE[1];
		fVec297SEState[1] = fVec297SE[2];
		fVec303SEState = fVec303SE[1];
		fVec302SEState[0] = fVec302SE[1];
		fVec302SEState[1] = fVec302SE[2];
		fVec308SEState = fVec308SE[1];
		fVec307SEState[0] = fVec307SE[1];
		fVec307SEState[1] = fVec307SE[2];
		fVec311SEState = fVec311SE[1];
		fVec310SEState[0] = fVec310SE[1];
		fVec310SEState[1] = fVec310SE[2];
		fVec316SEState = fVec316SE[1];
		fVec315SEState[0] = fVec315SE[1];
		fVec315SEState[1] = fVec315SE[2];
		fVec321SEState = fVec321SE[1];
		fVec320SEState[0] = fVec320SE[1];
		fVec320SEState[1] = fVec320SE[2];
		fVec326SEState = fVec326SE[1];
		fVec325SEState[0] = fVec325SE[1];
		fVec325SEState[1] = fVec325SE[2];
		fVec331SEState = fVec331SE[1];
		fVec330SEState[0] = fVec330SE[1];
		fVec330SEState[1] = fVec330SE[2];
		fVec336SEState = fVec336SE[1];
		fVec335SEState[0] = fVec335SE[1];
		fVec335SEState[1] = fVec335SE[2];
		fVec339SEState = fVec339SE[1];
		fVec338SEState[0] = fVec338SE[1];
		fVec338SEState[1] = fVec338SE[2];
		fVec344SEState = fVec344SE[1];
		fVec343SEState[0] = fVec343SE[1];
		fVec343SEState[1] = fVec343SE[2];
		fVec349SEState = fVec349SE[1];
		fVec348SEState[0] = fVec348SE[1];
		fVec348SEState[1] = fVec348SE[2];
		fVec354SEState = fVec354SE[1];
		fVec353SEState[0] = fVec353SE[1];
		fVec353SEState[1] = fVec353SE[2];
		fVec359SEState = fVec359SE[1];
		fVec358SEState[0] = fVec358SE[1];
		fVec358SEState[1] = fVec358SE[2];
		fVec364SEState = fVec364SE[1];
		fVec363SEState[0] = fVec363SE[1];
		fVec363SEState[1] = fVec363SE[2];
		fVec367SEState = fVec367SE[1];
		fVec366SEState[0] = fVec366SE[1];
		fVec366SEState[1] = fVec366SE[2];
		fVec372SEState = fVec372SE[1];
		fVec371SEState[0] = fVec371SE[1];
		fVec371SEState[1] = fVec371SE[2];
		fVec377SEState = fVec377SE[1];
		fVec376SEState[0] = fVec376SE[1];
		fVec376SEState[1] = fVec376SE[2];
		fVec382SEState = fVec382SE[1];
		fVec381SEState[0] = fVec381SE[1];
		fVec381SEState[1] = fVec381SE[2];
		fVec387SEState = fVec387SE[1];
		fVec386SEState[0] = fVec386SE[1];
		fVec386SEState[1] = fVec386SE[2];
		fVec392SEState = fVec392SE[1];
		fVec391SEState[0] = fVec391SE[1];
		fVec391SEState[1] = fVec391SE[2];
		fVec395SEState = fVec395SE[1];
		fVec394SEState[0] = fVec394SE[1];
		fVec394SEState[1] = fVec394SE[2];
		fVec400SEState = fVec400SE[1];
		fVec399SEState[0] = fVec399SE[1];
		fVec399SEState[1] = fVec399SE[2];
		fVec405SEState = fVec405SE[1];
		fVec404SEState[0] = fVec404SE[1];
		fVec404SEState[1] = fVec404SE[2];
		fVec410SEState = fVec410SE[1];
		fVec409SEState[0] = fVec409SE[1];
		fVec409SEState[1] = fVec409SE[2];
		fVec415SEState = fVec415SE[1];
		fVec414SEState[0] = fVec414SE[1];
		fVec414SEState[1] = fVec414SE[2];
		fVec420SEState = fVec420SE[1];
		fVec419SEState[0] = fVec419SE[1];
		fVec419SEState[1] = fVec419SE[2];
		fVec423SEState = fVec423SE[1];
		fVec422SEState[0] = fVec422SE[1];
		fVec422SEState[1] = fVec422SE[2];
		fVec428SEState = fVec428SE[1];
		fVec427SEState[0] = fVec427SE[1];
		fVec427SEState[1] = fVec427SE[2];
		fVec433SEState = fVec433SE[1];
		fVec432SEState[0] = fVec432SE[1];
		fVec432SEState[1] = fVec432SE[2];
		fVec438SEState = fVec438SE[1];
		fVec437SEState[0] = fVec437SE[1];
		fVec437SEState[1] = fVec437SE[2];
		fVec443SEState = fVec443SE[1];
		fVec442SEState[0] = fVec442SE[1];
		fVec442SEState[1] = fVec442SE[2];
		fVec448SEState = fVec448SE[1];
		fVec447SEState[0] = fVec447SE[1];
		fVec447SEState[1] = fVec447SE[2];
		fVec451SEState = fVec451SE[1];
		fVec450SEState[0] = fVec450SE[1];
		fVec450SEState[1] = fVec450SE[2];
		fVec456SEState = fVec456SE[1];
		fVec455SEState[0] = fVec455SE[1];
		fVec455SEState[1] = fVec455SE[2];
		fVec461SEState = fVec461SE[1];
		fVec460SEState[0] = fVec460SE[1];
		fVec460SEState[1] = fVec460SE[2];
		fVec466SEState = fVec466SE[1];
		fVec465SEState[0] = fVec465SE[1];
		fVec465SEState[1] = fVec465SE[2];
		fVec471SEState = fVec471SE[1];
		fVec470SEState[0] = fVec470SE[1];
		fVec470SEState[1] = fVec470SE[2];
		fVec476SEState = fVec476SE[1];
		fVec475SEState[0] = fVec475SE[1];
		fVec475SEState[1] = fVec475SE[2];
		fVec479SEState = fVec479SE[1];
		fVec478SEState[0] = fVec478SE[1];
		fVec478SEState[1] = fVec478SE[2];
		fVec484SEState = fVec484SE[1];
		fVec483SEState[0] = fVec483SE[1];
		fVec483SEState[1] = fVec483SE[2];
		fVec489SEState = fVec489SE[1];
		fVec488SEState[0] = fVec488SE[1];
		fVec488SEState[1] = fVec488SE[2];
		fVec494SEState = fVec494SE[1];
		fVec493SEState[0] = fVec493SE[1];
		fVec493SEState[1] = fVec493SE[2];
		fVec499SEState = fVec499SE[1];
		fVec498SEState[0] = fVec498SE[1];
		fVec498SEState[1] = fVec498SE[2];
		fVec504SEState = fVec504SE[1];
		fVec503SEState[0] = fVec503SE[1];
		fVec503SEState[1] = fVec503SE[2];
		fVec507SEState = fVec507SE[1];
		fVec506SEState[0] = fVec506SE[1];
		fVec506SEState[1] = fVec506SE[2];
		fVec512SEState = fVec512SE[1];
		fVec511SEState[0] = fVec511SE[1];
		fVec511SEState[1] = fVec511SE[2];
		fVec517SEState = fVec517SE[1];
		fVec516SEState[0] = fVec516SE[1];
		fVec516SEState[1] = fVec516SE[2];
		fVec519SEState = fVec519SE[1];
		fVec523SEState = fVec523SE[1];
		fVec527SEState = fVec527SE[1];
		fVec531SEState = fVec531SE[1];
		fVec535SEState = fVec535SE[1];
		fVec539SEState = fVec539SE[1];
		fVec543SEState = fVec543SE[1];
		fVec547SEState = fVec547SE[1];
		fVec551SEState = fVec551SE[1];
		fVec555SEState = fVec555SE[1];
		fVec559SEState = fVec559SE[1];
		fVec563SEState = fVec563SE[1];
		fVec567SEState = fVec567SE[1];
		fVec571SEState = fVec571SE[1];
		fVec575SEState = fVec575SE[1];
		fbargraph0 = fSlow38SE;
		fbargraph1 = fSlow39SE;
		fbargraph2 = fSlow40SE;
		fbargraph3 = fSlow41SE;
		fbargraph4 = fSlow42SE;
		fbargraph5 = fSlow43SE;
		fbargraph6 = fSlow44SE;
		fbargraph7 = fSlow45SE;
		fbargraph8 = fSlow46SE;
		fbargraph9 = fSlow47SE;
		fbargraph10 = fSlow48SE;
		fbargraph11 = fSlow49SE;
		fbargraph12 = fSlow50SE;
		fbargraph13 = fSlow51SE;
		fbargraph14 = fSlow52SE;
	}
};


