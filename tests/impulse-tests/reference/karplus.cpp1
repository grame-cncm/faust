//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "karplus"
// version: "1.0"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fbutton0;
	float 	fVec0BEState; // Single Delay
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay iVec3SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec3SIState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec5SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SEState; // Single Delay
	int 	IOTA0;
	float 	fVec8SE[512]; // Ring Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec2SEState[2]; // Copy Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "karplus.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "karplus");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fbutton0 = 0.0;
		fslider0 = 0.0f;
		fslider1 = 0.5f;
		fslider2 = 327.023f;
		fslider3 = 271.994f;
	}
	virtual void instanceClear() {
		fVec0BEState = 0;
		iVec3SIState = 0;
		fVec5SEState = 0;
		for (int i = 1; i < 512; i++) { fVec8SE[i] = 0; }
		fVec8SE[0] = -1;  // detect unintialized
		fVec1SEState = 0;
		for (int j = 0; j < 2; j++) { fVec2SEState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("karplus");
		ui_interface->openVerticalBox("excitator");
		ui_interface->declare(&fslider2, "unit", "f");
		ui_interface->addHorizontalSlider("excitation", &fslider2, 327.023f, 2.0f, 512.0f, 1.0f);
		ui_interface->addButton("play", &fbutton0);
		ui_interface->closeBox();
		ui_interface->addHorizontalSlider("level", &fslider1, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->openVerticalBox("resonator");
		ui_interface->addHorizontalSlider("attenuation", &fslider0, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider3, "unit", "f");
		ui_interface->addHorizontalSlider("duration", &fslider3, 271.994f, 2.0f, 512.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = float(fbutton0); // Zone 2, step: 1
		float 	fVec0BE[2];
		float 	fSlow1BE = (0.5f * (1.0f + -float(fslider0) /* Sum */)); // Zone 2, step: 11
		float 	fSlow2BE = (4.656613e-10f * float(fslider1)); // Zone 2, step: 21
		int 	iVec3SI[2];
		float 	fTemp0SE; // step: 33
		float 	fSlow3BE = (1.0f / float(fslider2)); // Zone 2, step: 43
		float 	fVec5SE[2];
		int 	iSlow4BE = (int((float(fslider3) + -1.5f /* Sum */)) & 4095); // Zone 2, step: 63
		float 	fVec1SE[2];
		float 	fVec2SE[3];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0BE[1] = fVec0BEState;
		iVec3SI[1] = iVec3SIState;
		fVec5SE[1] = fVec5SEState;
		fVec1SE[1] = fVec1SEState;
		fVec2SE[1] = fVec2SEState[0];
		fVec2SE[2] = fVec2SEState[1];
		for (int i=0; i<count; i++) {
			fVec0BE[0] = fSlow0BE;
			iVec3SI[0] = ((1103515245 * iVec3SI[1]) + 12345 /* Sum */);
			fTemp0SE = fVec5SE[1]; // step: 33
			fVec5SE[0] = (fTemp0SE + float(((fSlow0BE + -fVec0BE[1] /* Sum */) > 0.0f)) + -(fSlow3BE * float((fTemp0SE > 0.0f))) /* Sum */);
			fVec8SE[IOTA0&511] = ((fSlow1BE * (fVec1SE[1] + fVec2SE[2] /* Sum */)) + (fSlow2BE * (float(iVec3SI[0]) * float((fVec5SE[0] > 0.0f)))) /* Sum */);
			fVec1SE[0] = fVec8SE[(IOTA0-iSlow4BE)&511];
			fVec2SE[0] = fVec1SE[0];
			output0[i] = (FAUSTFLOAT)(fVec1SE[0]);  // Zone Exec Code
			// post processing
			fVec2SE[2] = fVec2SE[1];
			fVec2SE[1] = fVec2SE[0];
			fVec1SE[1] = fVec1SE[0];
			++IOTA0;
			fVec5SE[1] = fVec5SE[0];
			iVec3SI[1] = iVec3SI[0];
			fVec0BE[1] = fVec0BE[0];
		}
		fVec0BEState = fVec0BE[1];
		iVec3SIState = iVec3SI[1];
		fVec5SEState = fVec5SE[1];
		fVec1SEState = fVec1SE[1];
		fVec2SEState[0] = fVec2SE[1];
		fVec2SEState[1] = fVec2SE[2];
	}
};


