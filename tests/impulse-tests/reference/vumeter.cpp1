//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "vumeter"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	float 	fConst0KI; // step: 19
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "vumeter.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "vumeter");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (1.0f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 19
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		fVec2SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vumeter");
		ui_interface->declare(&fbargraph0, "2", "");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addHorizontalBargraph("hbargraph0", &fbargraph0, -7e+01f, 5.0f);
		ui_interface->declare(&fbargraph1, "2", "");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addHorizontalBargraph("hbargraph1", &fbargraph1, -7e+01f, 5.0f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fVec0SE[2];
		float 	fSlow0SE;
		float 	fTemp1SE; // step: 32
		float 	fVec2SE[2];
		float 	fSlow1SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec2SE[1] = fVec2SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fVec0SE[0] = std::max((fVec0SE[1] + -fConst0KI /* Sum */), fabsf(fTemp0SE));
			fSlow0SE = (2e+01f * log10f(std::max(0.00031622776f, fVec0SE[0])));
			fTemp1SE = (float)input1[i]; // step: 32
			fVec2SE[0] = std::max((fVec2SE[1] + -fConst0KI /* Sum */), fabsf(fTemp1SE));
			fSlow1SE = (2e+01f * log10f(std::max(0.00031622776f, fVec2SE[0])));
			output0[i] = (FAUSTFLOAT)(fTemp0SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp1SE);  // Zone Exec Code
			// post processing
			fVec2SE[1] = fVec2SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec2SEState = fVec2SE[1];
		fbargraph0 = fSlow0SE;
		fbargraph1 = fSlow1SE;
	}
};


