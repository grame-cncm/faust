//----------------------------------------------------------
// name: "delays"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	IOTA0;
	float 	fVec0SE[4096]; // Ring Delay
	float 	fVec1SE[1024]; // Ring Delay
	FAUSTFLOAT 	fentry0;
	// Recursion delay fVec3SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec3SEState; // Single Delay
	float 	fVec5SE[2048]; // Ring Delay
	FAUSTFLOAT 	fentry1;
	// Recursion delay fVec7SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec7SEState; // Single Delay
	FAUSTFLOAT 	fentry2;
	// Recursion delay fVec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec10SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "delays.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "delays");
	}

	virtual int getNumInputs() { return 3; }
	virtual int getNumOutputs() { return 3; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fentry0 = 2e+02f;
		fentry1 = 2e+02f;
		fentry2 = 4e+02f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 4096; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 1024; i++) { fVec1SE[i] = 0; }
		fVec1SE[0] = -1;  // detect unintialized
		fVec3SEState = 0;
		for (int i = 1; i < 2048; i++) { fVec5SE[i] = 0; }
		fVec5SE[0] = -1;  // detect unintialized
		fVec7SEState = 0;
		fVec10SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("delays");
		ui_interface->addNumEntry("d1", &fentry0, 2e+02f, 0.0f, 1e+03f, 1.0f);
		ui_interface->addNumEntry("d2", &fentry1, 2e+02f, 0.0f, 2e+03f, 1.0f);
		ui_interface->addNumEntry("d3", &fentry2, 4e+02f, 2e+02f, 3e+03f, 1.0f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iSlow0BE = int(float(fentry0)); // Zone 2, step: 12
		float 	fVec3SE[2];
		int 	iSlow1BE = int(float(fentry1)); // Zone 2, step: 27
		float 	fVec7SE[2];
		int 	iSlow2BE = int(float(fentry2)); // Zone 2, step: 39
		float 	fVec10SE[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* input2 = input[2]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		fVec3SE[1] = fVec3SEState;
		fVec7SE[1] = fVec7SEState;
		fVec10SE[1] = fVec10SEState;
		for (int i=0; i<count; i++) {
			fVec0SE[IOTA0&4095] = (float)input2[i];
			fVec1SE[IOTA0&1023] = (float)input0[i];
			fVec3SE[0] = ((0.999f * fVec3SE[1]) + (0.001f * fVec1SE[(IOTA0-iSlow0BE)&1023]) /* Sum */);
			fVec5SE[IOTA0&2047] = (float)input1[i];
			fVec7SE[0] = ((0.999f * fVec7SE[1]) + (0.001f * fVec5SE[(IOTA0-iSlow1BE)&2047]) /* Sum */);
			fVec10SE[0] = ((0.999f * fVec10SE[1]) + (0.001f * fVec0SE[(IOTA0-iSlow2BE)&4095]) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fVec3SE[0]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fVec7SE[0]);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(fVec10SE[0]);  // Zone Exec Code
			// post processing
			fVec10SE[1] = fVec10SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec3SE[1] = fVec3SE[0];
			++IOTA0;
		}
		fVec3SEState = fVec3SE[1];
		fVec7SEState = fVec7SE[1];
		fVec10SEState = fVec10SE[1];
	}
};


