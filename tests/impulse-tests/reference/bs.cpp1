//----------------------------------------------------------
// name: "bs"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "bs.dsp");
		m->declare("name", "bs");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("bs");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (1e+01f / float(count)); // Zone 2, step: 5
		float 	fTemp0SE; // step: 8
		float 	fTemp1SE; // step: 9
		float 	fTemp2SE; // step: 13
		float 	fVec0SE[2];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[1]; // step: 8
			fTemp1SE = (fSlow0BE + fTemp0SE /* Sum */); // step: 9
			fTemp2SE = (fTemp0SE + -fSlow0BE /* Sum */); // step: 13
			fVec0SE[0] = (((fTemp1SE < 1e+01f)) ? fTemp1SE : (((fTemp2SE > 1e+01f)) ? fTemp2SE : 1e+01f));
			output0[i] = (FAUSTFLOAT)(fVec0SE[0]);  // Zone Exec Code
			// post processing
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
	}
};


