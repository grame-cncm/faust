//----------------------------------------------------------
// name: "table2"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec2SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec2SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec2SIState = 0;
		}
		void fill(int count, int output[]) {
			int 	iVec2SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec2SI[1] = iVec2SIState;
				for (int i=0; i<count; i++) {
					iVec2SI[0] = (iVec2SI[1] + 1);
					output[i] = iVec2SI[0];
					// post processing
					iVec2SI[1] = iVec2SI[0];
				}
				iVec2SIState = iVec2SI[1];
				output += 128;
			}
		}
	};


	class SIG1 {
	  private:
		int fSampleRate;
		// Recursion delay fVec6SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		float 	fVec6SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			fVec6SIState = 0;
		}
		void fill(int count, float output[]) {
			float 	fVec6SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				fVec6SI[1] = fVec6SIState;
				for (int i=0; i<count; i++) {
					fVec6SI[0] = (fVec6SI[1] + 0.1f);
					output[i] = fVec6SI[0];
					// post processing
					fVec6SI[1] = fVec6SI[0];
				}
				fVec6SIState = fVec6SI[1];
				output += 128;
			}
		}
	};


	class SIG2 {
	  private:
		int fSampleRate;
		static int 	iWave1SC[7];
		int 	idxiWave1SC;
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			idxiWave1SC = 0;
		}
		void fill(int count, int output[]) {
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				for (int i=0; i<count; i++) {
					output[i] = iWave1SC[idxiWave1SC];
					// post processing
					idxiWave1SC = (idxiWave1SC + 1) % 7;
				}
				output += 128;
			}
		}
	};


	class SIG3 {
	  private:
		int fSampleRate;
		static float 	fWave3SC[7];
		int 	idxfWave3SC;
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			idxfWave3SC = 0;
		}
		void fill(int count, float output[]) {
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				for (int i=0; i<count; i++) {
					output[i] = fWave3SC[idxfWave3SC];
					// post processing
					idxfWave3SC = (idxfWave3SC + 1) % 7;
				}
				output += 128;
			}
		}
	};


	// Recursion delay iVec0SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec0SIState; // Single Delay
	int 	itbl0SI[10];
	// Recursion delay fVec4SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SIState; // Single Delay
	float 	ftbl1SI[7];
	static int 	iWave0SC[7];
	int 	idxiWave0SC;
	int 	itbl2SC[10];
	static float 	fWave2SC[7];
	int 	idxfWave2SC;
	float 	ftbl3SC[7];
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "table2.dsp");
		m->declare("name", "table2");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 4; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(10,itbl0SI);
		SIG1 sig1;
		sig1.init(sample_rate);
		sig1.fill(7,ftbl1SI);
		idxiWave0SC = 0;
		SIG2 sig2;
		sig2.init(sample_rate);
		sig2.fill(10,itbl2SC);
		idxfWave2SC = 0;
		SIG3 sig3;
		sig3.init(sample_rate);
		sig3.fill(7,ftbl3SC);
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		iVec0SIState = 0;
		fVec4SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("table2");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0SI[2];
		int 	iTemp0SI; // step: 8
		float 	fVec4SI[2];
		float 	fTemp1SI; // step: 33
		int 	iTemp2SC; // step: 60
		float 	fTemp3SC; // step: 88
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		iVec0SI[1] = iVec0SIState;
		fVec4SI[1] = fVec4SIState;
		for (int i=0; i<count; i++) {
			iVec0SI[0] = (iVec0SI[1] + 1 /* Sum */);
			iTemp0SI = iVec0SI[0]; // step: 8
			itbl0SI[((iTemp0SI + 1 /* Sum */) % 10)] = (2 * iTemp0SI);
			fVec4SI[0] = (fVec4SI[1] + 0.1f /* Sum */);
			fTemp1SI = fVec4SI[0]; // step: 33
			ftbl1SI[int(fmodf((fTemp1SI + 1.0f /* Sum */),7.0f))] = (1.24f * fTemp1SI);
			iTemp2SC = iWave0SC[idxiWave0SC]; // step: 60
			itbl2SC[((iTemp2SC + 1 /* Sum */) % 10)] = int((1.24f * float(iTemp2SC)));
			fTemp3SC = fWave2SC[idxfWave2SC]; // step: 88
			ftbl3SC[int(fmodf((fTemp3SC + 1.0f /* Sum */),7.0f))] = (1.24f * fTemp3SC);
			output0[i] = (FAUSTFLOAT)(itbl0SI[((iTemp0SI + 2 /* Sum */) % 10)]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(ftbl1SI[int(fmodf((fTemp1SI + 2.0f /* Sum */),7.0f))]);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(itbl2SC[((iTemp2SC + 2 /* Sum */) % 10)]);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(ftbl3SC[int(fmodf((fTemp3SC + 2.0f /* Sum */),7.0f))]);  // Zone Exec Code
			// post processing
			idxfWave2SC = (idxfWave2SC + 1) % 7;
			idxiWave0SC = (idxiWave0SC + 1) % 7;
			fVec4SI[1] = fVec4SI[0];
			iVec0SI[1] = iVec0SI[0];
		}
		iVec0SIState = iVec0SI[1];
		fVec4SIState = fVec4SI[1];
	}
};


int 	mydsp::iWave0SC[7] = {1,2,3,7,4,8,1};
int 	mydsp::SIG2::iWave1SC[7] = {1,2,3,7,4,8,1};
float 	mydsp::fWave2SC[7] = {1.4f,2.1f,3.8f,7.12f,4.9f,8.9f,1.2f};
float 	mydsp::SIG3::fWave3SC[7] = {1.4f,2.1f,3.8f,7.12f,4.9f,8.9f,1.2f};
