/* ------------------------------------------------------------
name: "virtual_analog_oscillators"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

static float mydsp_faustpower2_f(float value) {
	return value * value;
}
static float mydsp_faustpower3_f(float value) {
	return value * value * value;
}
static float mydsp_faustpower4_f(float value) {
	return value * value * value * value;
}

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	int iVec0[4];
	FAUSTFLOAT fHslider1;
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	float fConst4;
	float fConst5;
	float fConst6;
	float fConst7;
	float fConst8;
	float fConst9;
	float fConst10;
	float fConst11;
	float fConst12;
	float fConst13;
	FAUSTFLOAT fCheckbox0;
	FAUSTFLOAT fHslider2;
	float fRec4[2];
	FAUSTFLOAT fCheckbox1;
	float fConst14;
	FAUSTFLOAT fHslider3;
	float fRec10[2];
	FAUSTFLOAT fVslider0;
	FAUSTFLOAT fHslider4;
	float fRec11[2];
	FAUSTFLOAT fVslider1;
	FAUSTFLOAT fEntry0;
	float fConst15;
	FAUSTFLOAT fVslider2;
	FAUSTFLOAT fHslider5;
	float fRec13[2];
	float fRec12[2];
	float fConst16;
	float fVec1[2];
	float fConst17;
	float fVec2[2];
	float fVec3[2];
	float fConst18;
	float fVec4[2];
	float fVec5[2];
	float fVec6[2];
	FAUSTFLOAT fVslider3;
	float fRec14[2];
	float fVec7[2];
	float fVec8[2];
	float fVec9[2];
	float fVec10[2];
	float fVec11[2];
	float fVec12[2];
	FAUSTFLOAT fVslider4;
	float fRec15[2];
	float fVec13[2];
	float fVec14[2];
	float fVec15[2];
	float fVec16[2];
	float fVec17[2];
	float fVec18[2];
	float fConst19;
	FAUSTFLOAT fVslider5;
	float fRec16[2];
	float fVec19[2];
	int IOTA0;
	float fVec20[4096];
	float fConst20;
	float fRec17[2];
	float fVec21[2];
	float fVec22[4096];
	float fRec18[2];
	float fVec23[2];
	float fVec24[4096];
	float fConst21;
	FAUSTFLOAT fVslider6;
	float fRec19[2];
	float fRec20[2];
	float fRec21[2];
	FAUSTFLOAT fVslider7;
	float fConst22;
	FAUSTFLOAT fCheckbox2;
	float fVec25[2];
	float fVec26[2];
	float fVec27[4096];
	FAUSTFLOAT fVslider8;
	float fRec22[2];
	float fVec28[2];
	float fVec29[2];
	float fVec30[4096];
	float fVec31[2];
	float fVec32[2];
	float fVec33[4096];
	FAUSTFLOAT fVslider9;
	int iRec24[2];
	float fRec23[4];
	FAUSTFLOAT fHslider6;
	float fRec9[2];
	float fRec8[2];
	float fRec7[2];
	float fRec6[2];
	float fRec5[2];
	FAUSTFLOAT fCheckbox3;
	float fConst23;
	float fRec26[3];
	float fRec25[3];
	float fRec29[2];
	float fRec27[2];
	float fRec32[2];
	float fRec30[2];
	float fConst24;
	float fConst25;
	float fConst26;
	float fRec3[3];
	float fConst27;
	float fConst28;
	float fConst29;
	float fRec2[3];
	float fConst30;
	float fConst31;
	float fConst32;
	float fRec1[3];
	float fConst33;
	float fRec0[2];
	FAUSTFLOAT fVbargraph0;
	float fConst34;
	float fConst35;
	float fConst36;
	float fConst37;
	float fConst38;
	float fConst39;
	float fConst40;
	float fConst41;
	float fConst42;
	float fConst43;
	float fConst44;
	float fConst45;
	float fConst46;
	float fConst47;
	float fConst48;
	float fConst49;
	float fConst50;
	float fConst51;
	float fConst52;
	float fConst53;
	float fConst54;
	float fRec39[3];
	float fConst55;
	float fConst56;
	float fConst57;
	float fRec38[3];
	float fConst58;
	float fConst59;
	float fConst60;
	float fRec37[3];
	float fConst61;
	float fConst62;
	float fConst63;
	float fConst64;
	float fRec36[3];
	float fConst65;
	float fConst66;
	float fConst67;
	float fRec35[3];
	float fConst68;
	float fConst69;
	float fConst70;
	float fRec34[3];
	float fConst71;
	float fRec33[2];
	FAUSTFLOAT fVbargraph1;
	float fConst72;
	float fConst73;
	float fConst74;
	float fConst75;
	float fConst76;
	float fConst77;
	float fConst78;
	float fConst79;
	float fConst80;
	float fConst81;
	float fConst82;
	float fConst83;
	float fConst84;
	float fConst85;
	float fConst86;
	float fConst87;
	float fConst88;
	float fConst89;
	float fConst90;
	float fConst91;
	float fConst92;
	float fRec46[3];
	float fConst93;
	float fConst94;
	float fConst95;
	float fRec45[3];
	float fConst96;
	float fConst97;
	float fConst98;
	float fRec44[3];
	float fConst99;
	float fConst100;
	float fConst101;
	float fConst102;
	float fRec43[3];
	float fConst103;
	float fConst104;
	float fConst105;
	float fRec42[3];
	float fConst106;
	float fConst107;
	float fConst108;
	float fRec41[3];
	float fConst109;
	float fRec40[2];
	FAUSTFLOAT fVbargraph2;
	float fConst110;
	float fConst111;
	float fConst112;
	float fConst113;
	float fConst114;
	float fConst115;
	float fConst116;
	float fConst117;
	float fConst118;
	float fConst119;
	float fConst120;
	float fConst121;
	float fConst122;
	float fConst123;
	float fConst124;
	float fConst125;
	float fConst126;
	float fConst127;
	float fConst128;
	float fConst129;
	float fConst130;
	float fRec53[3];
	float fConst131;
	float fConst132;
	float fConst133;
	float fRec52[3];
	float fConst134;
	float fConst135;
	float fConst136;
	float fRec51[3];
	float fConst137;
	float fConst138;
	float fConst139;
	float fConst140;
	float fRec50[3];
	float fConst141;
	float fConst142;
	float fConst143;
	float fRec49[3];
	float fConst144;
	float fConst145;
	float fConst146;
	float fRec48[3];
	float fConst147;
	float fRec47[2];
	FAUSTFLOAT fVbargraph3;
	float fConst148;
	float fConst149;
	float fConst150;
	float fConst151;
	float fConst152;
	float fConst153;
	float fConst154;
	float fConst155;
	float fConst156;
	float fConst157;
	float fConst158;
	float fConst159;
	float fConst160;
	float fConst161;
	float fConst162;
	float fConst163;
	float fConst164;
	float fConst165;
	float fConst166;
	float fConst167;
	float fConst168;
	float fRec60[3];
	float fConst169;
	float fConst170;
	float fConst171;
	float fRec59[3];
	float fConst172;
	float fConst173;
	float fConst174;
	float fRec58[3];
	float fConst175;
	float fConst176;
	float fConst177;
	float fConst178;
	float fRec57[3];
	float fConst179;
	float fConst180;
	float fConst181;
	float fRec56[3];
	float fConst182;
	float fConst183;
	float fConst184;
	float fRec55[3];
	float fConst185;
	float fRec54[2];
	FAUSTFLOAT fVbargraph4;
	float fConst186;
	float fConst187;
	float fConst188;
	float fConst189;
	float fConst190;
	float fConst191;
	float fConst192;
	float fConst193;
	float fConst194;
	float fConst195;
	float fConst196;
	float fConst197;
	float fConst198;
	float fConst199;
	float fConst200;
	float fConst201;
	float fConst202;
	float fConst203;
	float fConst204;
	float fConst205;
	float fConst206;
	float fRec67[3];
	float fConst207;
	float fConst208;
	float fConst209;
	float fRec66[3];
	float fConst210;
	float fConst211;
	float fConst212;
	float fRec65[3];
	float fConst213;
	float fConst214;
	float fConst215;
	float fConst216;
	float fRec64[3];
	float fConst217;
	float fConst218;
	float fConst219;
	float fRec63[3];
	float fConst220;
	float fConst221;
	float fConst222;
	float fRec62[3];
	float fConst223;
	float fRec61[2];
	FAUSTFLOAT fVbargraph5;
	float fConst224;
	float fConst225;
	float fConst226;
	float fConst227;
	float fConst228;
	float fConst229;
	float fConst230;
	float fConst231;
	float fConst232;
	float fConst233;
	float fConst234;
	float fConst235;
	float fConst236;
	float fConst237;
	float fConst238;
	float fConst239;
	float fConst240;
	float fConst241;
	float fConst242;
	float fConst243;
	float fConst244;
	float fRec74[3];
	float fConst245;
	float fConst246;
	float fConst247;
	float fRec73[3];
	float fConst248;
	float fConst249;
	float fConst250;
	float fRec72[3];
	float fConst251;
	float fConst252;
	float fConst253;
	float fConst254;
	float fRec71[3];
	float fConst255;
	float fConst256;
	float fConst257;
	float fRec70[3];
	float fConst258;
	float fConst259;
	float fConst260;
	float fRec69[3];
	float fConst261;
	float fRec68[2];
	FAUSTFLOAT fVbargraph6;
	float fConst262;
	float fConst263;
	float fConst264;
	float fConst265;
	float fConst266;
	float fConst267;
	float fConst268;
	float fConst269;
	float fConst270;
	float fConst271;
	float fConst272;
	float fConst273;
	float fConst274;
	float fConst275;
	float fConst276;
	float fConst277;
	float fConst278;
	float fConst279;
	float fConst280;
	float fConst281;
	float fConst282;
	float fRec81[3];
	float fConst283;
	float fConst284;
	float fConst285;
	float fRec80[3];
	float fConst286;
	float fConst287;
	float fConst288;
	float fRec79[3];
	float fConst289;
	float fConst290;
	float fConst291;
	float fConst292;
	float fRec78[3];
	float fConst293;
	float fConst294;
	float fConst295;
	float fRec77[3];
	float fConst296;
	float fConst297;
	float fConst298;
	float fRec76[3];
	float fConst299;
	float fRec75[2];
	FAUSTFLOAT fVbargraph7;
	float fConst300;
	float fConst301;
	float fConst302;
	float fConst303;
	float fConst304;
	float fConst305;
	float fConst306;
	float fConst307;
	float fConst308;
	float fConst309;
	float fConst310;
	float fConst311;
	float fConst312;
	float fConst313;
	float fConst314;
	float fConst315;
	float fConst316;
	float fConst317;
	float fConst318;
	float fConst319;
	float fConst320;
	float fRec88[3];
	float fConst321;
	float fConst322;
	float fConst323;
	float fRec87[3];
	float fConst324;
	float fConst325;
	float fConst326;
	float fRec86[3];
	float fConst327;
	float fConst328;
	float fConst329;
	float fConst330;
	float fRec85[3];
	float fConst331;
	float fConst332;
	float fConst333;
	float fRec84[3];
	float fConst334;
	float fConst335;
	float fConst336;
	float fRec83[3];
	float fConst337;
	float fRec82[2];
	FAUSTFLOAT fVbargraph8;
	float fConst338;
	float fConst339;
	float fConst340;
	float fConst341;
	float fConst342;
	float fConst343;
	float fConst344;
	float fConst345;
	float fConst346;
	float fConst347;
	float fConst348;
	float fConst349;
	float fConst350;
	float fConst351;
	float fConst352;
	float fConst353;
	float fConst354;
	float fConst355;
	float fConst356;
	float fConst357;
	float fConst358;
	float fRec95[3];
	float fConst359;
	float fConst360;
	float fConst361;
	float fRec94[3];
	float fConst362;
	float fConst363;
	float fConst364;
	float fRec93[3];
	float fConst365;
	float fConst366;
	float fConst367;
	float fConst368;
	float fRec92[3];
	float fConst369;
	float fConst370;
	float fConst371;
	float fRec91[3];
	float fConst372;
	float fConst373;
	float fConst374;
	float fRec90[3];
	float fConst375;
	float fRec89[2];
	FAUSTFLOAT fVbargraph9;
	float fConst376;
	float fConst377;
	float fConst378;
	float fConst379;
	float fConst380;
	float fConst381;
	float fConst382;
	float fConst383;
	float fConst384;
	float fConst385;
	float fConst386;
	float fConst387;
	float fConst388;
	float fConst389;
	float fConst390;
	float fConst391;
	float fConst392;
	float fConst393;
	float fConst394;
	float fConst395;
	float fConst396;
	float fRec102[3];
	float fConst397;
	float fConst398;
	float fConst399;
	float fRec101[3];
	float fConst400;
	float fConst401;
	float fConst402;
	float fRec100[3];
	float fConst403;
	float fConst404;
	float fConst405;
	float fConst406;
	float fRec99[3];
	float fConst407;
	float fConst408;
	float fConst409;
	float fRec98[3];
	float fConst410;
	float fConst411;
	float fConst412;
	float fRec97[3];
	float fConst413;
	float fRec96[2];
	FAUSTFLOAT fVbargraph10;
	float fConst414;
	float fConst415;
	float fConst416;
	float fConst417;
	float fConst418;
	float fConst419;
	float fConst420;
	float fConst421;
	float fConst422;
	float fConst423;
	float fConst424;
	float fConst425;
	float fConst426;
	float fConst427;
	float fConst428;
	float fConst429;
	float fConst430;
	float fConst431;
	float fConst432;
	float fConst433;
	float fConst434;
	float fRec109[3];
	float fConst435;
	float fConst436;
	float fConst437;
	float fRec108[3];
	float fConst438;
	float fConst439;
	float fConst440;
	float fRec107[3];
	float fConst441;
	float fConst442;
	float fConst443;
	float fConst444;
	float fRec106[3];
	float fConst445;
	float fConst446;
	float fConst447;
	float fRec105[3];
	float fConst448;
	float fConst449;
	float fConst450;
	float fRec104[3];
	float fConst451;
	float fRec103[2];
	FAUSTFLOAT fVbargraph11;
	float fConst452;
	float fConst453;
	float fConst454;
	float fConst455;
	float fConst456;
	float fConst457;
	float fConst458;
	float fConst459;
	float fConst460;
	float fConst461;
	float fConst462;
	float fConst463;
	float fConst464;
	float fConst465;
	float fConst466;
	float fConst467;
	float fConst468;
	float fConst469;
	float fConst470;
	float fConst471;
	float fConst472;
	float fRec116[3];
	float fConst473;
	float fConst474;
	float fConst475;
	float fRec115[3];
	float fConst476;
	float fConst477;
	float fConst478;
	float fRec114[3];
	float fConst479;
	float fConst480;
	float fConst481;
	float fConst482;
	float fRec113[3];
	float fConst483;
	float fConst484;
	float fConst485;
	float fRec112[3];
	float fConst486;
	float fConst487;
	float fConst488;
	float fRec111[3];
	float fConst489;
	float fRec110[2];
	FAUSTFLOAT fVbargraph12;
	float fConst490;
	float fConst491;
	float fConst492;
	float fConst493;
	float fConst494;
	float fConst495;
	float fConst496;
	float fConst497;
	float fConst498;
	float fConst499;
	float fConst500;
	float fConst501;
	float fConst502;
	float fConst503;
	float fConst504;
	float fConst505;
	float fConst506;
	float fConst507;
	float fConst508;
	float fConst509;
	float fConst510;
	float fRec123[3];
	float fConst511;
	float fConst512;
	float fConst513;
	float fRec122[3];
	float fConst514;
	float fConst515;
	float fConst516;
	float fRec121[3];
	float fConst517;
	float fConst518;
	float fConst519;
	float fConst520;
	float fRec120[3];
	float fConst521;
	float fConst522;
	float fConst523;
	float fRec119[3];
	float fConst524;
	float fConst525;
	float fConst526;
	float fRec118[3];
	float fConst527;
	float fRec117[2];
	FAUSTFLOAT fVbargraph13;
	float fConst528;
	float fConst529;
	float fConst530;
	float fConst531;
	float fConst532;
	float fConst533;
	float fConst534;
	float fConst535;
	float fConst536;
	float fRec127[3];
	float fConst537;
	float fConst538;
	float fConst539;
	float fRec126[3];
	float fConst540;
	float fConst541;
	float fConst542;
	float fRec125[3];
	float fConst543;
	float fRec124[2];
	FAUSTFLOAT fVbargraph14;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2b:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2b:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2b:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2bn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2bn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2bn:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_demo:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/pianokey2hz:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/pianokey2hz:copyright", "Julius O. Smith III");
		m->declare("effect.lib/pianokey2hz:license", "STK-4.3");
		m->declare("filename", "virtual_analog_oscillators.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "virtual_analog_oscillators");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() {
		return 1;
	}
	virtual int getNumOutputs() {
		return 2;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = 1e+03f / fConst0;
		fConst2 = std::tan(50265.484f / fConst0);
		fConst3 = 1.0f / fConst2;
		fConst4 = 1.0f / ((fConst3 + 0.15748216f) / fConst2 + 0.9351402f);
		fConst5 = mydsp_faustpower2_f(fConst2);
		fConst6 = 50.06381f / fConst5;
		fConst7 = fConst6 + 0.9351402f;
		fConst8 = 1.0f / ((fConst3 + 0.74313045f) / fConst2 + 1.4500711f);
		fConst9 = 11.0520525f / fConst5;
		fConst10 = fConst9 + 1.4500711f;
		fConst11 = 1.0f / ((fConst3 + 3.1897273f) / fConst2 + 4.0767817f);
		fConst12 = 0.0017661728f / fConst5;
		fConst13 = fConst12 + 0.0004076782f;
		fConst14 = 6.2831855f / fConst0;
		fConst15 = 1.0f / fConst0;
		fConst16 = 0.25f * fConst0;
		fConst17 = 0.041666668f * mydsp_faustpower2_f(fConst0);
		fConst18 = 0.0052083335f * mydsp_faustpower3_f(fConst0);
		fConst19 = 0.083333336f * fConst0;
		fConst20 = 0.5f * fConst0;
		fConst21 = 1.3333334f / fConst0;
		fConst22 = 0.013888889f * fConst0;
		fConst23 = 3.1415927f / fConst0;
		fConst24 = (fConst3 + -3.1897273f) / fConst2 + 4.0767817f;
		fConst25 = 1.0f / fConst5;
		fConst26 = 2.0f * (4.0767817f - fConst25);
		fConst27 = 2.0f * (0.0004076782f - fConst12);
		fConst28 = (fConst3 + -0.74313045f) / fConst2 + 1.4500711f;
		fConst29 = 2.0f * (1.4500711f - fConst25);
		fConst30 = 2.0f * (1.4500711f - fConst9);
		fConst31 = (fConst3 + -0.15748216f) / fConst2 + 0.9351402f;
		fConst32 = 2.0f * (0.9351402f - fConst25);
		fConst33 = 2.0f * (0.9351402f - fConst6);
		fConst34 = std::tan(31665.27f / fConst0);
		fConst35 = 1.0f / fConst34;
		fConst36 = 1.0f / ((fConst35 + 0.15748216f) / fConst34 + 0.9351402f);
		fConst37 = mydsp_faustpower2_f(fConst34);
		fConst38 = 50.06381f / fConst37;
		fConst39 = fConst38 + 0.9351402f;
		fConst40 = 1.0f / ((fConst35 + 0.74313045f) / fConst34 + 1.4500711f);
		fConst41 = 11.0520525f / fConst37;
		fConst42 = fConst41 + 1.4500711f;
		fConst43 = 1.0f / ((fConst35 + 3.1897273f) / fConst34 + 4.0767817f);
		fConst44 = 0.0017661728f / fConst37;
		fConst45 = fConst44 + 0.0004076782f;
		fConst46 = 1.0f / ((fConst3 + 0.16840488f) / fConst2 + 1.0693583f);
		fConst47 = fConst25 + 53.53615f;
		fConst48 = 1.0f / ((fConst3 + 0.51247865f) / fConst2 + 0.6896214f);
		fConst49 = fConst25 + 7.6217313f;
		fConst50 = 1.0f / ((fConst3 + 0.78241307f) / fConst2 + 0.2452915f);
		fConst51 = 0.0001f / fConst5;
		fConst52 = fConst51 + 0.0004332272f;
		fConst53 = (fConst3 + -0.78241307f) / fConst2 + 0.2452915f;
		fConst54 = 2.0f * (0.2452915f - fConst25);
		fConst55 = 2.0f * (0.0004332272f - fConst51);
		fConst56 = (fConst3 + -0.51247865f) / fConst2 + 0.6896214f;
		fConst57 = 2.0f * (0.6896214f - fConst25);
		fConst58 = 2.0f * (7.6217313f - fConst25);
		fConst59 = (fConst3 + -0.16840488f) / fConst2 + 1.0693583f;
		fConst60 = 2.0f * (1.0693583f - fConst25);
		fConst61 = 2.0f * (53.53615f - fConst25);
		fConst62 = (fConst35 + -3.1897273f) / fConst34 + 4.0767817f;
		fConst63 = 1.0f / fConst37;
		fConst64 = 2.0f * (4.0767817f - fConst63);
		fConst65 = 2.0f * (0.0004076782f - fConst44);
		fConst66 = (fConst35 + -0.74313045f) / fConst34 + 1.4500711f;
		fConst67 = 2.0f * (1.4500711f - fConst63);
		fConst68 = 2.0f * (1.4500711f - fConst41);
		fConst69 = (fConst35 + -0.15748216f) / fConst34 + 0.9351402f;
		fConst70 = 2.0f * (0.9351402f - fConst63);
		fConst71 = 2.0f * (0.9351402f - fConst38);
		fConst72 = std::tan(19947.87f / fConst0);
		fConst73 = 1.0f / fConst72;
		fConst74 = 1.0f / ((fConst73 + 0.15748216f) / fConst72 + 0.9351402f);
		fConst75 = mydsp_faustpower2_f(fConst72);
		fConst76 = 50.06381f / fConst75;
		fConst77 = fConst76 + 0.9351402f;
		fConst78 = 1.0f / ((fConst73 + 0.74313045f) / fConst72 + 1.4500711f);
		fConst79 = 11.0520525f / fConst75;
		fConst80 = fConst79 + 1.4500711f;
		fConst81 = 1.0f / ((fConst73 + 3.1897273f) / fConst72 + 4.0767817f);
		fConst82 = 0.0017661728f / fConst75;
		fConst83 = fConst82 + 0.0004076782f;
		fConst84 = 1.0f / ((fConst35 + 0.16840488f) / fConst34 + 1.0693583f);
		fConst85 = fConst63 + 53.53615f;
		fConst86 = 1.0f / ((fConst35 + 0.51247865f) / fConst34 + 0.6896214f);
		fConst87 = fConst63 + 7.6217313f;
		fConst88 = 1.0f / ((fConst35 + 0.78241307f) / fConst34 + 0.2452915f);
		fConst89 = 0.0001f / fConst37;
		fConst90 = fConst89 + 0.0004332272f;
		fConst91 = (fConst35 + -0.78241307f) / fConst34 + 0.2452915f;
		fConst92 = 2.0f * (0.2452915f - fConst63);
		fConst93 = 2.0f * (0.0004332272f - fConst89);
		fConst94 = (fConst35 + -0.51247865f) / fConst34 + 0.6896214f;
		fConst95 = 2.0f * (0.6896214f - fConst63);
		fConst96 = 2.0f * (7.6217313f - fConst63);
		fConst97 = (fConst35 + -0.16840488f) / fConst34 + 1.0693583f;
		fConst98 = 2.0f * (1.0693583f - fConst63);
		fConst99 = 2.0f * (53.53615f - fConst63);
		fConst100 = (fConst73 + -3.1897273f) / fConst72 + 4.0767817f;
		fConst101 = 1.0f / fConst75;
		fConst102 = 2.0f * (4.0767817f - fConst101);
		fConst103 = 2.0f * (0.0004076782f - fConst82);
		fConst104 = (fConst73 + -0.74313045f) / fConst72 + 1.4500711f;
		fConst105 = 2.0f * (1.4500711f - fConst101);
		fConst106 = 2.0f * (1.4500711f - fConst79);
		fConst107 = (fConst73 + -0.15748216f) / fConst72 + 0.9351402f;
		fConst108 = 2.0f * (0.9351402f - fConst101);
		fConst109 = 2.0f * (0.9351402f - fConst76);
		fConst110 = std::tan(12566.371f / fConst0);
		fConst111 = 1.0f / fConst110;
		fConst112 = 1.0f / ((fConst111 + 0.15748216f) / fConst110 + 0.9351402f);
		fConst113 = mydsp_faustpower2_f(fConst110);
		fConst114 = 50.06381f / fConst113;
		fConst115 = fConst114 + 0.9351402f;
		fConst116 = 1.0f / ((fConst111 + 0.74313045f) / fConst110 + 1.4500711f);
		fConst117 = 11.0520525f / fConst113;
		fConst118 = fConst117 + 1.4500711f;
		fConst119 = 1.0f / ((fConst111 + 3.1897273f) / fConst110 + 4.0767817f);
		fConst120 = 0.0017661728f / fConst113;
		fConst121 = fConst120 + 0.0004076782f;
		fConst122 = 1.0f / ((fConst73 + 0.16840488f) / fConst72 + 1.0693583f);
		fConst123 = fConst101 + 53.53615f;
		fConst124 = 1.0f / ((fConst73 + 0.51247865f) / fConst72 + 0.6896214f);
		fConst125 = fConst101 + 7.6217313f;
		fConst126 = 1.0f / ((fConst73 + 0.78241307f) / fConst72 + 0.2452915f);
		fConst127 = 0.0001f / fConst75;
		fConst128 = fConst127 + 0.0004332272f;
		fConst129 = (fConst73 + -0.78241307f) / fConst72 + 0.2452915f;
		fConst130 = 2.0f * (0.2452915f - fConst101);
		fConst131 = 2.0f * (0.0004332272f - fConst127);
		fConst132 = (fConst73 + -0.51247865f) / fConst72 + 0.6896214f;
		fConst133 = 2.0f * (0.6896214f - fConst101);
		fConst134 = 2.0f * (7.6217313f - fConst101);
		fConst135 = (fConst73 + -0.16840488f) / fConst72 + 1.0693583f;
		fConst136 = 2.0f * (1.0693583f - fConst101);
		fConst137 = 2.0f * (53.53615f - fConst101);
		fConst138 = (fConst111 + -3.1897273f) / fConst110 + 4.0767817f;
		fConst139 = 1.0f / fConst113;
		fConst140 = 2.0f * (4.0767817f - fConst139);
		fConst141 = 2.0f * (0.0004076782f - fConst120);
		fConst142 = (fConst111 + -0.74313045f) / fConst110 + 1.4500711f;
		fConst143 = 2.0f * (1.4500711f - fConst139);
		fConst144 = 2.0f * (1.4500711f - fConst117);
		fConst145 = (fConst111 + -0.15748216f) / fConst110 + 0.9351402f;
		fConst146 = 2.0f * (0.9351402f - fConst139);
		fConst147 = 2.0f * (0.9351402f - fConst114);
		fConst148 = std::tan(7916.3174f / fConst0);
		fConst149 = 1.0f / fConst148;
		fConst150 = 1.0f / ((fConst149 + 0.15748216f) / fConst148 + 0.9351402f);
		fConst151 = mydsp_faustpower2_f(fConst148);
		fConst152 = 50.06381f / fConst151;
		fConst153 = fConst152 + 0.9351402f;
		fConst154 = 1.0f / ((fConst149 + 0.74313045f) / fConst148 + 1.4500711f);
		fConst155 = 11.0520525f / fConst151;
		fConst156 = fConst155 + 1.4500711f;
		fConst157 = 1.0f / ((fConst149 + 3.1897273f) / fConst148 + 4.0767817f);
		fConst158 = 0.0017661728f / fConst151;
		fConst159 = fConst158 + 0.0004076782f;
		fConst160 = 1.0f / ((fConst111 + 0.16840488f) / fConst110 + 1.0693583f);
		fConst161 = fConst139 + 53.53615f;
		fConst162 = 1.0f / ((fConst111 + 0.51247865f) / fConst110 + 0.6896214f);
		fConst163 = fConst139 + 7.6217313f;
		fConst164 = 1.0f / ((fConst111 + 0.78241307f) / fConst110 + 0.2452915f);
		fConst165 = 0.0001f / fConst113;
		fConst166 = fConst165 + 0.0004332272f;
		fConst167 = (fConst111 + -0.78241307f) / fConst110 + 0.2452915f;
		fConst168 = 2.0f * (0.2452915f - fConst139);
		fConst169 = 2.0f * (0.0004332272f - fConst165);
		fConst170 = (fConst111 + -0.51247865f) / fConst110 + 0.6896214f;
		fConst171 = 2.0f * (0.6896214f - fConst139);
		fConst172 = 2.0f * (7.6217313f - fConst139);
		fConst173 = (fConst111 + -0.16840488f) / fConst110 + 1.0693583f;
		fConst174 = 2.0f * (1.0693583f - fConst139);
		fConst175 = 2.0f * (53.53615f - fConst139);
		fConst176 = (fConst149 + -3.1897273f) / fConst148 + 4.0767817f;
		fConst177 = 1.0f / fConst151;
		fConst178 = 2.0f * (4.0767817f - fConst177);
		fConst179 = 2.0f * (0.0004076782f - fConst158);
		fConst180 = (fConst149 + -0.74313045f) / fConst148 + 1.4500711f;
		fConst181 = 2.0f * (1.4500711f - fConst177);
		fConst182 = 2.0f * (1.4500711f - fConst155);
		fConst183 = (fConst149 + -0.15748216f) / fConst148 + 0.9351402f;
		fConst184 = 2.0f * (0.9351402f - fConst177);
		fConst185 = 2.0f * (0.9351402f - fConst152);
		fConst186 = std::tan(4986.9673f / fConst0);
		fConst187 = 1.0f / fConst186;
		fConst188 = 1.0f / ((fConst187 + 0.15748216f) / fConst186 + 0.9351402f);
		fConst189 = mydsp_faustpower2_f(fConst186);
		fConst190 = 50.06381f / fConst189;
		fConst191 = fConst190 + 0.9351402f;
		fConst192 = 1.0f / ((fConst187 + 0.74313045f) / fConst186 + 1.4500711f);
		fConst193 = 11.0520525f / fConst189;
		fConst194 = fConst193 + 1.4500711f;
		fConst195 = 1.0f / ((fConst187 + 3.1897273f) / fConst186 + 4.0767817f);
		fConst196 = 0.0017661728f / fConst189;
		fConst197 = fConst196 + 0.0004076782f;
		fConst198 = 1.0f / ((fConst149 + 0.16840488f) / fConst148 + 1.0693583f);
		fConst199 = fConst177 + 53.53615f;
		fConst200 = 1.0f / ((fConst149 + 0.51247865f) / fConst148 + 0.6896214f);
		fConst201 = fConst177 + 7.6217313f;
		fConst202 = 1.0f / ((fConst149 + 0.78241307f) / fConst148 + 0.2452915f);
		fConst203 = 0.0001f / fConst151;
		fConst204 = fConst203 + 0.0004332272f;
		fConst205 = (fConst149 + -0.78241307f) / fConst148 + 0.2452915f;
		fConst206 = 2.0f * (0.2452915f - fConst177);
		fConst207 = 2.0f * (0.0004332272f - fConst203);
		fConst208 = (fConst149 + -0.51247865f) / fConst148 + 0.6896214f;
		fConst209 = 2.0f * (0.6896214f - fConst177);
		fConst210 = 2.0f * (7.6217313f - fConst177);
		fConst211 = (fConst149 + -0.16840488f) / fConst148 + 1.0693583f;
		fConst212 = 2.0f * (1.0693583f - fConst177);
		fConst213 = 2.0f * (53.53615f - fConst177);
		fConst214 = (fConst187 + -3.1897273f) / fConst186 + 4.0767817f;
		fConst215 = 1.0f / fConst189;
		fConst216 = 2.0f * (4.0767817f - fConst215);
		fConst217 = 2.0f * (0.0004076782f - fConst196);
		fConst218 = (fConst187 + -0.74313045f) / fConst186 + 1.4500711f;
		fConst219 = 2.0f * (1.4500711f - fConst215);
		fConst220 = 2.0f * (1.4500711f - fConst193);
		fConst221 = (fConst187 + -0.15748216f) / fConst186 + 0.9351402f;
		fConst222 = 2.0f * (0.9351402f - fConst215);
		fConst223 = 2.0f * (0.9351402f - fConst190);
		fConst224 = std::tan(3141.5928f / fConst0);
		fConst225 = 1.0f / fConst224;
		fConst226 = 1.0f / ((fConst225 + 0.15748216f) / fConst224 + 0.9351402f);
		fConst227 = mydsp_faustpower2_f(fConst224);
		fConst228 = 50.06381f / fConst227;
		fConst229 = fConst228 + 0.9351402f;
		fConst230 = 1.0f / ((fConst225 + 0.74313045f) / fConst224 + 1.4500711f);
		fConst231 = 11.0520525f / fConst227;
		fConst232 = fConst231 + 1.4500711f;
		fConst233 = 1.0f / ((fConst225 + 3.1897273f) / fConst224 + 4.0767817f);
		fConst234 = 0.0017661728f / fConst227;
		fConst235 = fConst234 + 0.0004076782f;
		fConst236 = 1.0f / ((fConst187 + 0.16840488f) / fConst186 + 1.0693583f);
		fConst237 = fConst215 + 53.53615f;
		fConst238 = 1.0f / ((fConst187 + 0.51247865f) / fConst186 + 0.6896214f);
		fConst239 = fConst215 + 7.6217313f;
		fConst240 = 1.0f / ((fConst187 + 0.78241307f) / fConst186 + 0.2452915f);
		fConst241 = 0.0001f / fConst189;
		fConst242 = fConst241 + 0.0004332272f;
		fConst243 = (fConst187 + -0.78241307f) / fConst186 + 0.2452915f;
		fConst244 = 2.0f * (0.2452915f - fConst215);
		fConst245 = 2.0f * (0.0004332272f - fConst241);
		fConst246 = (fConst187 + -0.51247865f) / fConst186 + 0.6896214f;
		fConst247 = 2.0f * (0.6896214f - fConst215);
		fConst248 = 2.0f * (7.6217313f - fConst215);
		fConst249 = (fConst187 + -0.16840488f) / fConst186 + 1.0693583f;
		fConst250 = 2.0f * (1.0693583f - fConst215);
		fConst251 = 2.0f * (53.53615f - fConst215);
		fConst252 = (fConst225 + -3.1897273f) / fConst224 + 4.0767817f;
		fConst253 = 1.0f / fConst227;
		fConst254 = 2.0f * (4.0767817f - fConst253);
		fConst255 = 2.0f * (0.0004076782f - fConst234);
		fConst256 = (fConst225 + -0.74313045f) / fConst224 + 1.4500711f;
		fConst257 = 2.0f * (1.4500711f - fConst253);
		fConst258 = 2.0f * (1.4500711f - fConst231);
		fConst259 = (fConst225 + -0.15748216f) / fConst224 + 0.9351402f;
		fConst260 = 2.0f * (0.9351402f - fConst253);
		fConst261 = 2.0f * (0.9351402f - fConst228);
		fConst262 = std::tan(1979.0793f / fConst0);
		fConst263 = 1.0f / fConst262;
		fConst264 = 1.0f / ((fConst263 + 0.15748216f) / fConst262 + 0.9351402f);
		fConst265 = mydsp_faustpower2_f(fConst262);
		fConst266 = 50.06381f / fConst265;
		fConst267 = fConst266 + 0.9351402f;
		fConst268 = 1.0f / ((fConst263 + 0.74313045f) / fConst262 + 1.4500711f);
		fConst269 = 11.0520525f / fConst265;
		fConst270 = fConst269 + 1.4500711f;
		fConst271 = 1.0f / ((fConst263 + 3.1897273f) / fConst262 + 4.0767817f);
		fConst272 = 0.0017661728f / fConst265;
		fConst273 = fConst272 + 0.0004076782f;
		fConst274 = 1.0f / ((fConst225 + 0.16840488f) / fConst224 + 1.0693583f);
		fConst275 = fConst253 + 53.53615f;
		fConst276 = 1.0f / ((fConst225 + 0.51247865f) / fConst224 + 0.6896214f);
		fConst277 = fConst253 + 7.6217313f;
		fConst278 = 1.0f / ((fConst225 + 0.78241307f) / fConst224 + 0.2452915f);
		fConst279 = 0.0001f / fConst227;
		fConst280 = fConst279 + 0.0004332272f;
		fConst281 = (fConst225 + -0.78241307f) / fConst224 + 0.2452915f;
		fConst282 = 2.0f * (0.2452915f - fConst253);
		fConst283 = 2.0f * (0.0004332272f - fConst279);
		fConst284 = (fConst225 + -0.51247865f) / fConst224 + 0.6896214f;
		fConst285 = 2.0f * (0.6896214f - fConst253);
		fConst286 = 2.0f * (7.6217313f - fConst253);
		fConst287 = (fConst225 + -0.16840488f) / fConst224 + 1.0693583f;
		fConst288 = 2.0f * (1.0693583f - fConst253);
		fConst289 = 2.0f * (53.53615f - fConst253);
		fConst290 = (fConst263 + -3.1897273f) / fConst262 + 4.0767817f;
		fConst291 = 1.0f / fConst265;
		fConst292 = 2.0f * (4.0767817f - fConst291);
		fConst293 = 2.0f * (0.0004076782f - fConst272);
		fConst294 = (fConst263 + -0.74313045f) / fConst262 + 1.4500711f;
		fConst295 = 2.0f * (1.4500711f - fConst291);
		fConst296 = 2.0f * (1.4500711f - fConst269);
		fConst297 = (fConst263 + -0.15748216f) / fConst262 + 0.9351402f;
		fConst298 = 2.0f * (0.9351402f - fConst291);
		fConst299 = 2.0f * (0.9351402f - fConst266);
		fConst300 = std::tan(1246.7418f / fConst0);
		fConst301 = 1.0f / fConst300;
		fConst302 = 1.0f / ((fConst301 + 0.15748216f) / fConst300 + 0.9351402f);
		fConst303 = mydsp_faustpower2_f(fConst300);
		fConst304 = 50.06381f / fConst303;
		fConst305 = fConst304 + 0.9351402f;
		fConst306 = 1.0f / ((fConst301 + 0.74313045f) / fConst300 + 1.4500711f);
		fConst307 = 11.0520525f / fConst303;
		fConst308 = fConst307 + 1.4500711f;
		fConst309 = 1.0f / ((fConst301 + 3.1897273f) / fConst300 + 4.0767817f);
		fConst310 = 0.0017661728f / fConst303;
		fConst311 = fConst310 + 0.0004076782f;
		fConst312 = 1.0f / ((fConst263 + 0.16840488f) / fConst262 + 1.0693583f);
		fConst313 = fConst291 + 53.53615f;
		fConst314 = 1.0f / ((fConst263 + 0.51247865f) / fConst262 + 0.6896214f);
		fConst315 = fConst291 + 7.6217313f;
		fConst316 = 1.0f / ((fConst263 + 0.78241307f) / fConst262 + 0.2452915f);
		fConst317 = 0.0001f / fConst265;
		fConst318 = fConst317 + 0.0004332272f;
		fConst319 = (fConst263 + -0.78241307f) / fConst262 + 0.2452915f;
		fConst320 = 2.0f * (0.2452915f - fConst291);
		fConst321 = 2.0f * (0.0004332272f - fConst317);
		fConst322 = (fConst263 + -0.51247865f) / fConst262 + 0.6896214f;
		fConst323 = 2.0f * (0.6896214f - fConst291);
		fConst324 = 2.0f * (7.6217313f - fConst291);
		fConst325 = (fConst263 + -0.16840488f) / fConst262 + 1.0693583f;
		fConst326 = 2.0f * (1.0693583f - fConst291);
		fConst327 = 2.0f * (53.53615f - fConst291);
		fConst328 = (fConst301 + -3.1897273f) / fConst300 + 4.0767817f;
		fConst329 = 1.0f / fConst303;
		fConst330 = 2.0f * (4.0767817f - fConst329);
		fConst331 = 2.0f * (0.0004076782f - fConst310);
		fConst332 = (fConst301 + -0.74313045f) / fConst300 + 1.4500711f;
		fConst333 = 2.0f * (1.4500711f - fConst329);
		fConst334 = 2.0f * (1.4500711f - fConst307);
		fConst335 = (fConst301 + -0.15748216f) / fConst300 + 0.9351402f;
		fConst336 = 2.0f * (0.9351402f - fConst329);
		fConst337 = 2.0f * (0.9351402f - fConst304);
		fConst338 = std::tan(785.3982f / fConst0);
		fConst339 = 1.0f / fConst338;
		fConst340 = 1.0f / ((fConst339 + 0.15748216f) / fConst338 + 0.9351402f);
		fConst341 = mydsp_faustpower2_f(fConst338);
		fConst342 = 50.06381f / fConst341;
		fConst343 = fConst342 + 0.9351402f;
		fConst344 = 1.0f / ((fConst339 + 0.74313045f) / fConst338 + 1.4500711f);
		fConst345 = 11.0520525f / fConst341;
		fConst346 = fConst345 + 1.4500711f;
		fConst347 = 1.0f / ((fConst339 + 3.1897273f) / fConst338 + 4.0767817f);
		fConst348 = 0.0017661728f / fConst341;
		fConst349 = fConst348 + 0.0004076782f;
		fConst350 = 1.0f / ((fConst301 + 0.16840488f) / fConst300 + 1.0693583f);
		fConst351 = fConst329 + 53.53615f;
		fConst352 = 1.0f / ((fConst301 + 0.51247865f) / fConst300 + 0.6896214f);
		fConst353 = fConst329 + 7.6217313f;
		fConst354 = 1.0f / ((fConst301 + 0.78241307f) / fConst300 + 0.2452915f);
		fConst355 = 0.0001f / fConst303;
		fConst356 = fConst355 + 0.0004332272f;
		fConst357 = (fConst301 + -0.78241307f) / fConst300 + 0.2452915f;
		fConst358 = 2.0f * (0.2452915f - fConst329);
		fConst359 = 2.0f * (0.0004332272f - fConst355);
		fConst360 = (fConst301 + -0.51247865f) / fConst300 + 0.6896214f;
		fConst361 = 2.0f * (0.6896214f - fConst329);
		fConst362 = 2.0f * (7.6217313f - fConst329);
		fConst363 = (fConst301 + -0.16840488f) / fConst300 + 1.0693583f;
		fConst364 = 2.0f * (1.0693583f - fConst329);
		fConst365 = 2.0f * (53.53615f - fConst329);
		fConst366 = (fConst339 + -3.1897273f) / fConst338 + 4.0767817f;
		fConst367 = 1.0f / fConst341;
		fConst368 = 2.0f * (4.0767817f - fConst367);
		fConst369 = 2.0f * (0.0004076782f - fConst348);
		fConst370 = (fConst339 + -0.74313045f) / fConst338 + 1.4500711f;
		fConst371 = 2.0f * (1.4500711f - fConst367);
		fConst372 = 2.0f * (1.4500711f - fConst345);
		fConst373 = (fConst339 + -0.15748216f) / fConst338 + 0.9351402f;
		fConst374 = 2.0f * (0.9351402f - fConst367);
		fConst375 = 2.0f * (0.9351402f - fConst342);
		fConst376 = std::tan(494.76984f / fConst0);
		fConst377 = 1.0f / fConst376;
		fConst378 = 1.0f / ((fConst377 + 0.15748216f) / fConst376 + 0.9351402f);
		fConst379 = mydsp_faustpower2_f(fConst376);
		fConst380 = 50.06381f / fConst379;
		fConst381 = fConst380 + 0.9351402f;
		fConst382 = 1.0f / ((fConst377 + 0.74313045f) / fConst376 + 1.4500711f);
		fConst383 = 11.0520525f / fConst379;
		fConst384 = fConst383 + 1.4500711f;
		fConst385 = 1.0f / ((fConst377 + 3.1897273f) / fConst376 + 4.0767817f);
		fConst386 = 0.0017661728f / fConst379;
		fConst387 = fConst386 + 0.0004076782f;
		fConst388 = 1.0f / ((fConst339 + 0.16840488f) / fConst338 + 1.0693583f);
		fConst389 = fConst367 + 53.53615f;
		fConst390 = 1.0f / ((fConst339 + 0.51247865f) / fConst338 + 0.6896214f);
		fConst391 = fConst367 + 7.6217313f;
		fConst392 = 1.0f / ((fConst339 + 0.78241307f) / fConst338 + 0.2452915f);
		fConst393 = 0.0001f / fConst341;
		fConst394 = fConst393 + 0.0004332272f;
		fConst395 = (fConst339 + -0.78241307f) / fConst338 + 0.2452915f;
		fConst396 = 2.0f * (0.2452915f - fConst367);
		fConst397 = 2.0f * (0.0004332272f - fConst393);
		fConst398 = (fConst339 + -0.51247865f) / fConst338 + 0.6896214f;
		fConst399 = 2.0f * (0.6896214f - fConst367);
		fConst400 = 2.0f * (7.6217313f - fConst367);
		fConst401 = (fConst339 + -0.16840488f) / fConst338 + 1.0693583f;
		fConst402 = 2.0f * (1.0693583f - fConst367);
		fConst403 = 2.0f * (53.53615f - fConst367);
		fConst404 = (fConst377 + -3.1897273f) / fConst376 + 4.0767817f;
		fConst405 = 1.0f / fConst379;
		fConst406 = 2.0f * (4.0767817f - fConst405);
		fConst407 = 2.0f * (0.0004076782f - fConst386);
		fConst408 = (fConst377 + -0.74313045f) / fConst376 + 1.4500711f;
		fConst409 = 2.0f * (1.4500711f - fConst405);
		fConst410 = 2.0f * (1.4500711f - fConst383);
		fConst411 = (fConst377 + -0.15748216f) / fConst376 + 0.9351402f;
		fConst412 = 2.0f * (0.9351402f - fConst405);
		fConst413 = 2.0f * (0.9351402f - fConst380);
		fConst414 = std::tan(311.68546f / fConst0);
		fConst415 = 1.0f / fConst414;
		fConst416 = 1.0f / ((fConst415 + 0.15748216f) / fConst414 + 0.9351402f);
		fConst417 = mydsp_faustpower2_f(fConst414);
		fConst418 = 50.06381f / fConst417;
		fConst419 = fConst418 + 0.9351402f;
		fConst420 = 1.0f / ((fConst415 + 0.74313045f) / fConst414 + 1.4500711f);
		fConst421 = 11.0520525f / fConst417;
		fConst422 = fConst421 + 1.4500711f;
		fConst423 = 1.0f / ((fConst415 + 3.1897273f) / fConst414 + 4.0767817f);
		fConst424 = 0.0017661728f / fConst417;
		fConst425 = fConst424 + 0.0004076782f;
		fConst426 = 1.0f / ((fConst377 + 0.16840488f) / fConst376 + 1.0693583f);
		fConst427 = fConst405 + 53.53615f;
		fConst428 = 1.0f / ((fConst377 + 0.51247865f) / fConst376 + 0.6896214f);
		fConst429 = fConst405 + 7.6217313f;
		fConst430 = 1.0f / ((fConst377 + 0.78241307f) / fConst376 + 0.2452915f);
		fConst431 = 0.0001f / fConst379;
		fConst432 = fConst431 + 0.0004332272f;
		fConst433 = (fConst377 + -0.78241307f) / fConst376 + 0.2452915f;
		fConst434 = 2.0f * (0.2452915f - fConst405);
		fConst435 = 2.0f * (0.0004332272f - fConst431);
		fConst436 = (fConst377 + -0.51247865f) / fConst376 + 0.6896214f;
		fConst437 = 2.0f * (0.6896214f - fConst405);
		fConst438 = 2.0f * (7.6217313f - fConst405);
		fConst439 = (fConst377 + -0.16840488f) / fConst376 + 1.0693583f;
		fConst440 = 2.0f * (1.0693583f - fConst405);
		fConst441 = 2.0f * (53.53615f - fConst405);
		fConst442 = (fConst415 + -3.1897273f) / fConst414 + 4.0767817f;
		fConst443 = 1.0f / fConst417;
		fConst444 = 2.0f * (4.0767817f - fConst443);
		fConst445 = 2.0f * (0.0004076782f - fConst424);
		fConst446 = (fConst415 + -0.74313045f) / fConst414 + 1.4500711f;
		fConst447 = 2.0f * (1.4500711f - fConst443);
		fConst448 = 2.0f * (1.4500711f - fConst421);
		fConst449 = (fConst415 + -0.15748216f) / fConst414 + 0.9351402f;
		fConst450 = 2.0f * (0.9351402f - fConst443);
		fConst451 = 2.0f * (0.9351402f - fConst418);
		fConst452 = std::tan(196.34955f / fConst0);
		fConst453 = 1.0f / fConst452;
		fConst454 = 1.0f / ((fConst453 + 0.15748216f) / fConst452 + 0.9351402f);
		fConst455 = mydsp_faustpower2_f(fConst452);
		fConst456 = 50.06381f / fConst455;
		fConst457 = fConst456 + 0.9351402f;
		fConst458 = 1.0f / ((fConst453 + 0.74313045f) / fConst452 + 1.4500711f);
		fConst459 = 11.0520525f / fConst455;
		fConst460 = fConst459 + 1.4500711f;
		fConst461 = 1.0f / ((fConst453 + 3.1897273f) / fConst452 + 4.0767817f);
		fConst462 = 0.0017661728f / fConst455;
		fConst463 = fConst462 + 0.0004076782f;
		fConst464 = 1.0f / ((fConst415 + 0.16840488f) / fConst414 + 1.0693583f);
		fConst465 = fConst443 + 53.53615f;
		fConst466 = 1.0f / ((fConst415 + 0.51247865f) / fConst414 + 0.6896214f);
		fConst467 = fConst443 + 7.6217313f;
		fConst468 = 1.0f / ((fConst415 + 0.78241307f) / fConst414 + 0.2452915f);
		fConst469 = 0.0001f / fConst417;
		fConst470 = fConst469 + 0.0004332272f;
		fConst471 = (fConst415 + -0.78241307f) / fConst414 + 0.2452915f;
		fConst472 = 2.0f * (0.2452915f - fConst443);
		fConst473 = 2.0f * (0.0004332272f - fConst469);
		fConst474 = (fConst415 + -0.51247865f) / fConst414 + 0.6896214f;
		fConst475 = 2.0f * (0.6896214f - fConst443);
		fConst476 = 2.0f * (7.6217313f - fConst443);
		fConst477 = (fConst415 + -0.16840488f) / fConst414 + 1.0693583f;
		fConst478 = 2.0f * (1.0693583f - fConst443);
		fConst479 = 2.0f * (53.53615f - fConst443);
		fConst480 = (fConst453 + -3.1897273f) / fConst452 + 4.0767817f;
		fConst481 = 1.0f / fConst455;
		fConst482 = 2.0f * (4.0767817f - fConst481);
		fConst483 = 2.0f * (0.0004076782f - fConst462);
		fConst484 = (fConst453 + -0.74313045f) / fConst452 + 1.4500711f;
		fConst485 = 2.0f * (1.4500711f - fConst481);
		fConst486 = 2.0f * (1.4500711f - fConst459);
		fConst487 = (fConst453 + -0.15748216f) / fConst452 + 0.9351402f;
		fConst488 = 2.0f * (0.9351402f - fConst481);
		fConst489 = 2.0f * (0.9351402f - fConst456);
		fConst490 = std::tan(123.69246f / fConst0);
		fConst491 = 1.0f / fConst490;
		fConst492 = 1.0f / ((fConst491 + 0.15748216f) / fConst490 + 0.9351402f);
		fConst493 = mydsp_faustpower2_f(fConst490);
		fConst494 = 50.06381f / fConst493;
		fConst495 = fConst494 + 0.9351402f;
		fConst496 = 1.0f / ((fConst491 + 0.74313045f) / fConst490 + 1.4500711f);
		fConst497 = 11.0520525f / fConst493;
		fConst498 = fConst497 + 1.4500711f;
		fConst499 = 1.0f / ((fConst491 + 3.1897273f) / fConst490 + 4.0767817f);
		fConst500 = 0.0017661728f / fConst493;
		fConst501 = fConst500 + 0.0004076782f;
		fConst502 = 1.0f / ((fConst453 + 0.16840488f) / fConst452 + 1.0693583f);
		fConst503 = fConst481 + 53.53615f;
		fConst504 = 1.0f / ((fConst453 + 0.51247865f) / fConst452 + 0.6896214f);
		fConst505 = fConst481 + 7.6217313f;
		fConst506 = 1.0f / ((fConst453 + 0.78241307f) / fConst452 + 0.2452915f);
		fConst507 = 0.0001f / fConst455;
		fConst508 = fConst507 + 0.0004332272f;
		fConst509 = (fConst453 + -0.78241307f) / fConst452 + 0.2452915f;
		fConst510 = 2.0f * (0.2452915f - fConst481);
		fConst511 = 2.0f * (0.0004332272f - fConst507);
		fConst512 = (fConst453 + -0.51247865f) / fConst452 + 0.6896214f;
		fConst513 = 2.0f * (0.6896214f - fConst481);
		fConst514 = 2.0f * (7.6217313f - fConst481);
		fConst515 = (fConst453 + -0.16840488f) / fConst452 + 1.0693583f;
		fConst516 = 2.0f * (1.0693583f - fConst481);
		fConst517 = 2.0f * (53.53615f - fConst481);
		fConst518 = (fConst491 + -3.1897273f) / fConst490 + 4.0767817f;
		fConst519 = 1.0f / fConst493;
		fConst520 = 2.0f * (4.0767817f - fConst519);
		fConst521 = 2.0f * (0.0004076782f - fConst500);
		fConst522 = (fConst491 + -0.74313045f) / fConst490 + 1.4500711f;
		fConst523 = 2.0f * (1.4500711f - fConst519);
		fConst524 = 2.0f * (1.4500711f - fConst497);
		fConst525 = (fConst491 + -0.15748216f) / fConst490 + 0.9351402f;
		fConst526 = 2.0f * (0.9351402f - fConst519);
		fConst527 = 2.0f * (0.9351402f - fConst494);
		fConst528 = 1.0f / ((fConst491 + 0.16840488f) / fConst490 + 1.0693583f);
		fConst529 = fConst519 + 53.53615f;
		fConst530 = 1.0f / ((fConst491 + 0.51247865f) / fConst490 + 0.6896214f);
		fConst531 = fConst519 + 7.6217313f;
		fConst532 = 1.0f / ((fConst491 + 0.78241307f) / fConst490 + 0.2452915f);
		fConst533 = 0.0001f / fConst493;
		fConst534 = fConst533 + 0.0004332272f;
		fConst535 = (fConst491 + -0.78241307f) / fConst490 + 0.2452915f;
		fConst536 = 2.0f * (0.2452915f - fConst519);
		fConst537 = 2.0f * (0.0004332272f - fConst533);
		fConst538 = (fConst491 + -0.51247865f) / fConst490 + 0.6896214f;
		fConst539 = 2.0f * (0.6896214f - fConst519);
		fConst540 = 2.0f * (7.6217313f - fConst519);
		fConst541 = (fConst491 + -0.16840488f) / fConst490 + 1.0693583f;
		fConst542 = 2.0f * (1.0693583f - fConst519);
		fConst543 = 2.0f * (53.53615f - fConst519);
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(5e+01f);
		fHslider1 = FAUSTFLOAT(1e+02f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fHslider2 = FAUSTFLOAT(5.0f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
		fHslider3 = FAUSTFLOAT(25.0f);
		fVslider0 = FAUSTFLOAT(0.0f);
		fHslider4 = FAUSTFLOAT(-2e+01f);
		fVslider1 = FAUSTFLOAT(1.0f);
		fEntry0 = FAUSTFLOAT(2.0f);
		fVslider2 = FAUSTFLOAT(0.1f);
		fHslider5 = FAUSTFLOAT(49.0f);
		fVslider3 = FAUSTFLOAT(-0.1f);
		fVslider4 = FAUSTFLOAT(0.1f);
		fVslider5 = FAUSTFLOAT(0.0f);
		fVslider6 = FAUSTFLOAT(0.0f);
		fVslider7 = FAUSTFLOAT(0.0f);
		fCheckbox2 = FAUSTFLOAT(0.0f);
		fVslider8 = FAUSTFLOAT(0.5f);
		fVslider9 = FAUSTFLOAT(0.0f);
		fHslider6 = FAUSTFLOAT(0.9f);
		fCheckbox3 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 4; l0 = l0 + 1) {
			iVec0[l0] = 0;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec4[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec10[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec11[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec13[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fRec12[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fVec1[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fVec2[l7] = 0.0f;
		}
		for (int l8 = 0; l8 < 2; l8 = l8 + 1) {
			fVec3[l8] = 0.0f;
		}
		for (int l9 = 0; l9 < 2; l9 = l9 + 1) {
			fVec4[l9] = 0.0f;
		}
		for (int l10 = 0; l10 < 2; l10 = l10 + 1) {
			fVec5[l10] = 0.0f;
		}
		for (int l11 = 0; l11 < 2; l11 = l11 + 1) {
			fVec6[l11] = 0.0f;
		}
		for (int l12 = 0; l12 < 2; l12 = l12 + 1) {
			fRec14[l12] = 0.0f;
		}
		for (int l13 = 0; l13 < 2; l13 = l13 + 1) {
			fVec7[l13] = 0.0f;
		}
		for (int l14 = 0; l14 < 2; l14 = l14 + 1) {
			fVec8[l14] = 0.0f;
		}
		for (int l15 = 0; l15 < 2; l15 = l15 + 1) {
			fVec9[l15] = 0.0f;
		}
		for (int l16 = 0; l16 < 2; l16 = l16 + 1) {
			fVec10[l16] = 0.0f;
		}
		for (int l17 = 0; l17 < 2; l17 = l17 + 1) {
			fVec11[l17] = 0.0f;
		}
		for (int l18 = 0; l18 < 2; l18 = l18 + 1) {
			fVec12[l18] = 0.0f;
		}
		for (int l19 = 0; l19 < 2; l19 = l19 + 1) {
			fRec15[l19] = 0.0f;
		}
		for (int l20 = 0; l20 < 2; l20 = l20 + 1) {
			fVec13[l20] = 0.0f;
		}
		for (int l21 = 0; l21 < 2; l21 = l21 + 1) {
			fVec14[l21] = 0.0f;
		}
		for (int l22 = 0; l22 < 2; l22 = l22 + 1) {
			fVec15[l22] = 0.0f;
		}
		for (int l23 = 0; l23 < 2; l23 = l23 + 1) {
			fVec16[l23] = 0.0f;
		}
		for (int l24 = 0; l24 < 2; l24 = l24 + 1) {
			fVec17[l24] = 0.0f;
		}
		for (int l25 = 0; l25 < 2; l25 = l25 + 1) {
			fVec18[l25] = 0.0f;
		}
		for (int l26 = 0; l26 < 2; l26 = l26 + 1) {
			fRec16[l26] = 0.0f;
		}
		for (int l27 = 0; l27 < 2; l27 = l27 + 1) {
			fVec19[l27] = 0.0f;
		}
		IOTA0 = 0;
		for (int l28 = 0; l28 < 4096; l28 = l28 + 1) {
			fVec20[l28] = 0.0f;
		}
		for (int l29 = 0; l29 < 2; l29 = l29 + 1) {
			fRec17[l29] = 0.0f;
		}
		for (int l30 = 0; l30 < 2; l30 = l30 + 1) {
			fVec21[l30] = 0.0f;
		}
		for (int l31 = 0; l31 < 4096; l31 = l31 + 1) {
			fVec22[l31] = 0.0f;
		}
		for (int l32 = 0; l32 < 2; l32 = l32 + 1) {
			fRec18[l32] = 0.0f;
		}
		for (int l33 = 0; l33 < 2; l33 = l33 + 1) {
			fVec23[l33] = 0.0f;
		}
		for (int l34 = 0; l34 < 4096; l34 = l34 + 1) {
			fVec24[l34] = 0.0f;
		}
		for (int l35 = 0; l35 < 2; l35 = l35 + 1) {
			fRec19[l35] = 0.0f;
		}
		for (int l36 = 0; l36 < 2; l36 = l36 + 1) {
			fRec20[l36] = 0.0f;
		}
		for (int l37 = 0; l37 < 2; l37 = l37 + 1) {
			fRec21[l37] = 0.0f;
		}
		for (int l38 = 0; l38 < 2; l38 = l38 + 1) {
			fVec25[l38] = 0.0f;
		}
		for (int l39 = 0; l39 < 2; l39 = l39 + 1) {
			fVec26[l39] = 0.0f;
		}
		for (int l40 = 0; l40 < 4096; l40 = l40 + 1) {
			fVec27[l40] = 0.0f;
		}
		for (int l41 = 0; l41 < 2; l41 = l41 + 1) {
			fRec22[l41] = 0.0f;
		}
		for (int l42 = 0; l42 < 2; l42 = l42 + 1) {
			fVec28[l42] = 0.0f;
		}
		for (int l43 = 0; l43 < 2; l43 = l43 + 1) {
			fVec29[l43] = 0.0f;
		}
		for (int l44 = 0; l44 < 4096; l44 = l44 + 1) {
			fVec30[l44] = 0.0f;
		}
		for (int l45 = 0; l45 < 2; l45 = l45 + 1) {
			fVec31[l45] = 0.0f;
		}
		for (int l46 = 0; l46 < 2; l46 = l46 + 1) {
			fVec32[l46] = 0.0f;
		}
		for (int l47 = 0; l47 < 4096; l47 = l47 + 1) {
			fVec33[l47] = 0.0f;
		}
		for (int l48 = 0; l48 < 2; l48 = l48 + 1) {
			iRec24[l48] = 0;
		}
		for (int l49 = 0; l49 < 4; l49 = l49 + 1) {
			fRec23[l49] = 0.0f;
		}
		for (int l50 = 0; l50 < 2; l50 = l50 + 1) {
			fRec9[l50] = 0.0f;
		}
		for (int l51 = 0; l51 < 2; l51 = l51 + 1) {
			fRec8[l51] = 0.0f;
		}
		for (int l52 = 0; l52 < 2; l52 = l52 + 1) {
			fRec7[l52] = 0.0f;
		}
		for (int l53 = 0; l53 < 2; l53 = l53 + 1) {
			fRec6[l53] = 0.0f;
		}
		for (int l54 = 0; l54 < 2; l54 = l54 + 1) {
			fRec5[l54] = 0.0f;
		}
		for (int l55 = 0; l55 < 3; l55 = l55 + 1) {
			fRec26[l55] = 0.0f;
		}
		for (int l56 = 0; l56 < 3; l56 = l56 + 1) {
			fRec25[l56] = 0.0f;
		}
		for (int l57 = 0; l57 < 2; l57 = l57 + 1) {
			fRec29[l57] = 0.0f;
		}
		for (int l58 = 0; l58 < 2; l58 = l58 + 1) {
			fRec27[l58] = 0.0f;
		}
		for (int l59 = 0; l59 < 2; l59 = l59 + 1) {
			fRec32[l59] = 0.0f;
		}
		for (int l60 = 0; l60 < 2; l60 = l60 + 1) {
			fRec30[l60] = 0.0f;
		}
		for (int l61 = 0; l61 < 3; l61 = l61 + 1) {
			fRec3[l61] = 0.0f;
		}
		for (int l62 = 0; l62 < 3; l62 = l62 + 1) {
			fRec2[l62] = 0.0f;
		}
		for (int l63 = 0; l63 < 3; l63 = l63 + 1) {
			fRec1[l63] = 0.0f;
		}
		for (int l64 = 0; l64 < 2; l64 = l64 + 1) {
			fRec0[l64] = 0.0f;
		}
		for (int l65 = 0; l65 < 3; l65 = l65 + 1) {
			fRec39[l65] = 0.0f;
		}
		for (int l66 = 0; l66 < 3; l66 = l66 + 1) {
			fRec38[l66] = 0.0f;
		}
		for (int l67 = 0; l67 < 3; l67 = l67 + 1) {
			fRec37[l67] = 0.0f;
		}
		for (int l68 = 0; l68 < 3; l68 = l68 + 1) {
			fRec36[l68] = 0.0f;
		}
		for (int l69 = 0; l69 < 3; l69 = l69 + 1) {
			fRec35[l69] = 0.0f;
		}
		for (int l70 = 0; l70 < 3; l70 = l70 + 1) {
			fRec34[l70] = 0.0f;
		}
		for (int l71 = 0; l71 < 2; l71 = l71 + 1) {
			fRec33[l71] = 0.0f;
		}
		for (int l72 = 0; l72 < 3; l72 = l72 + 1) {
			fRec46[l72] = 0.0f;
		}
		for (int l73 = 0; l73 < 3; l73 = l73 + 1) {
			fRec45[l73] = 0.0f;
		}
		for (int l74 = 0; l74 < 3; l74 = l74 + 1) {
			fRec44[l74] = 0.0f;
		}
		for (int l75 = 0; l75 < 3; l75 = l75 + 1) {
			fRec43[l75] = 0.0f;
		}
		for (int l76 = 0; l76 < 3; l76 = l76 + 1) {
			fRec42[l76] = 0.0f;
		}
		for (int l77 = 0; l77 < 3; l77 = l77 + 1) {
			fRec41[l77] = 0.0f;
		}
		for (int l78 = 0; l78 < 2; l78 = l78 + 1) {
			fRec40[l78] = 0.0f;
		}
		for (int l79 = 0; l79 < 3; l79 = l79 + 1) {
			fRec53[l79] = 0.0f;
		}
		for (int l80 = 0; l80 < 3; l80 = l80 + 1) {
			fRec52[l80] = 0.0f;
		}
		for (int l81 = 0; l81 < 3; l81 = l81 + 1) {
			fRec51[l81] = 0.0f;
		}
		for (int l82 = 0; l82 < 3; l82 = l82 + 1) {
			fRec50[l82] = 0.0f;
		}
		for (int l83 = 0; l83 < 3; l83 = l83 + 1) {
			fRec49[l83] = 0.0f;
		}
		for (int l84 = 0; l84 < 3; l84 = l84 + 1) {
			fRec48[l84] = 0.0f;
		}
		for (int l85 = 0; l85 < 2; l85 = l85 + 1) {
			fRec47[l85] = 0.0f;
		}
		for (int l86 = 0; l86 < 3; l86 = l86 + 1) {
			fRec60[l86] = 0.0f;
		}
		for (int l87 = 0; l87 < 3; l87 = l87 + 1) {
			fRec59[l87] = 0.0f;
		}
		for (int l88 = 0; l88 < 3; l88 = l88 + 1) {
			fRec58[l88] = 0.0f;
		}
		for (int l89 = 0; l89 < 3; l89 = l89 + 1) {
			fRec57[l89] = 0.0f;
		}
		for (int l90 = 0; l90 < 3; l90 = l90 + 1) {
			fRec56[l90] = 0.0f;
		}
		for (int l91 = 0; l91 < 3; l91 = l91 + 1) {
			fRec55[l91] = 0.0f;
		}
		for (int l92 = 0; l92 < 2; l92 = l92 + 1) {
			fRec54[l92] = 0.0f;
		}
		for (int l93 = 0; l93 < 3; l93 = l93 + 1) {
			fRec67[l93] = 0.0f;
		}
		for (int l94 = 0; l94 < 3; l94 = l94 + 1) {
			fRec66[l94] = 0.0f;
		}
		for (int l95 = 0; l95 < 3; l95 = l95 + 1) {
			fRec65[l95] = 0.0f;
		}
		for (int l96 = 0; l96 < 3; l96 = l96 + 1) {
			fRec64[l96] = 0.0f;
		}
		for (int l97 = 0; l97 < 3; l97 = l97 + 1) {
			fRec63[l97] = 0.0f;
		}
		for (int l98 = 0; l98 < 3; l98 = l98 + 1) {
			fRec62[l98] = 0.0f;
		}
		for (int l99 = 0; l99 < 2; l99 = l99 + 1) {
			fRec61[l99] = 0.0f;
		}
		for (int l100 = 0; l100 < 3; l100 = l100 + 1) {
			fRec74[l100] = 0.0f;
		}
		for (int l101 = 0; l101 < 3; l101 = l101 + 1) {
			fRec73[l101] = 0.0f;
		}
		for (int l102 = 0; l102 < 3; l102 = l102 + 1) {
			fRec72[l102] = 0.0f;
		}
		for (int l103 = 0; l103 < 3; l103 = l103 + 1) {
			fRec71[l103] = 0.0f;
		}
		for (int l104 = 0; l104 < 3; l104 = l104 + 1) {
			fRec70[l104] = 0.0f;
		}
		for (int l105 = 0; l105 < 3; l105 = l105 + 1) {
			fRec69[l105] = 0.0f;
		}
		for (int l106 = 0; l106 < 2; l106 = l106 + 1) {
			fRec68[l106] = 0.0f;
		}
		for (int l107 = 0; l107 < 3; l107 = l107 + 1) {
			fRec81[l107] = 0.0f;
		}
		for (int l108 = 0; l108 < 3; l108 = l108 + 1) {
			fRec80[l108] = 0.0f;
		}
		for (int l109 = 0; l109 < 3; l109 = l109 + 1) {
			fRec79[l109] = 0.0f;
		}
		for (int l110 = 0; l110 < 3; l110 = l110 + 1) {
			fRec78[l110] = 0.0f;
		}
		for (int l111 = 0; l111 < 3; l111 = l111 + 1) {
			fRec77[l111] = 0.0f;
		}
		for (int l112 = 0; l112 < 3; l112 = l112 + 1) {
			fRec76[l112] = 0.0f;
		}
		for (int l113 = 0; l113 < 2; l113 = l113 + 1) {
			fRec75[l113] = 0.0f;
		}
		for (int l114 = 0; l114 < 3; l114 = l114 + 1) {
			fRec88[l114] = 0.0f;
		}
		for (int l115 = 0; l115 < 3; l115 = l115 + 1) {
			fRec87[l115] = 0.0f;
		}
		for (int l116 = 0; l116 < 3; l116 = l116 + 1) {
			fRec86[l116] = 0.0f;
		}
		for (int l117 = 0; l117 < 3; l117 = l117 + 1) {
			fRec85[l117] = 0.0f;
		}
		for (int l118 = 0; l118 < 3; l118 = l118 + 1) {
			fRec84[l118] = 0.0f;
		}
		for (int l119 = 0; l119 < 3; l119 = l119 + 1) {
			fRec83[l119] = 0.0f;
		}
		for (int l120 = 0; l120 < 2; l120 = l120 + 1) {
			fRec82[l120] = 0.0f;
		}
		for (int l121 = 0; l121 < 3; l121 = l121 + 1) {
			fRec95[l121] = 0.0f;
		}
		for (int l122 = 0; l122 < 3; l122 = l122 + 1) {
			fRec94[l122] = 0.0f;
		}
		for (int l123 = 0; l123 < 3; l123 = l123 + 1) {
			fRec93[l123] = 0.0f;
		}
		for (int l124 = 0; l124 < 3; l124 = l124 + 1) {
			fRec92[l124] = 0.0f;
		}
		for (int l125 = 0; l125 < 3; l125 = l125 + 1) {
			fRec91[l125] = 0.0f;
		}
		for (int l126 = 0; l126 < 3; l126 = l126 + 1) {
			fRec90[l126] = 0.0f;
		}
		for (int l127 = 0; l127 < 2; l127 = l127 + 1) {
			fRec89[l127] = 0.0f;
		}
		for (int l128 = 0; l128 < 3; l128 = l128 + 1) {
			fRec102[l128] = 0.0f;
		}
		for (int l129 = 0; l129 < 3; l129 = l129 + 1) {
			fRec101[l129] = 0.0f;
		}
		for (int l130 = 0; l130 < 3; l130 = l130 + 1) {
			fRec100[l130] = 0.0f;
		}
		for (int l131 = 0; l131 < 3; l131 = l131 + 1) {
			fRec99[l131] = 0.0f;
		}
		for (int l132 = 0; l132 < 3; l132 = l132 + 1) {
			fRec98[l132] = 0.0f;
		}
		for (int l133 = 0; l133 < 3; l133 = l133 + 1) {
			fRec97[l133] = 0.0f;
		}
		for (int l134 = 0; l134 < 2; l134 = l134 + 1) {
			fRec96[l134] = 0.0f;
		}
		for (int l135 = 0; l135 < 3; l135 = l135 + 1) {
			fRec109[l135] = 0.0f;
		}
		for (int l136 = 0; l136 < 3; l136 = l136 + 1) {
			fRec108[l136] = 0.0f;
		}
		for (int l137 = 0; l137 < 3; l137 = l137 + 1) {
			fRec107[l137] = 0.0f;
		}
		for (int l138 = 0; l138 < 3; l138 = l138 + 1) {
			fRec106[l138] = 0.0f;
		}
		for (int l139 = 0; l139 < 3; l139 = l139 + 1) {
			fRec105[l139] = 0.0f;
		}
		for (int l140 = 0; l140 < 3; l140 = l140 + 1) {
			fRec104[l140] = 0.0f;
		}
		for (int l141 = 0; l141 < 2; l141 = l141 + 1) {
			fRec103[l141] = 0.0f;
		}
		for (int l142 = 0; l142 < 3; l142 = l142 + 1) {
			fRec116[l142] = 0.0f;
		}
		for (int l143 = 0; l143 < 3; l143 = l143 + 1) {
			fRec115[l143] = 0.0f;
		}
		for (int l144 = 0; l144 < 3; l144 = l144 + 1) {
			fRec114[l144] = 0.0f;
		}
		for (int l145 = 0; l145 < 3; l145 = l145 + 1) {
			fRec113[l145] = 0.0f;
		}
		for (int l146 = 0; l146 < 3; l146 = l146 + 1) {
			fRec112[l146] = 0.0f;
		}
		for (int l147 = 0; l147 < 3; l147 = l147 + 1) {
			fRec111[l147] = 0.0f;
		}
		for (int l148 = 0; l148 < 2; l148 = l148 + 1) {
			fRec110[l148] = 0.0f;
		}
		for (int l149 = 0; l149 < 3; l149 = l149 + 1) {
			fRec123[l149] = 0.0f;
		}
		for (int l150 = 0; l150 < 3; l150 = l150 + 1) {
			fRec122[l150] = 0.0f;
		}
		for (int l151 = 0; l151 < 3; l151 = l151 + 1) {
			fRec121[l151] = 0.0f;
		}
		for (int l152 = 0; l152 < 3; l152 = l152 + 1) {
			fRec120[l152] = 0.0f;
		}
		for (int l153 = 0; l153 < 3; l153 = l153 + 1) {
			fRec119[l153] = 0.0f;
		}
		for (int l154 = 0; l154 < 3; l154 = l154 + 1) {
			fRec118[l154] = 0.0f;
		}
		for (int l155 = 0; l155 < 2; l155 = l155 + 1) {
			fRec117[l155] = 0.0f;
		}
		for (int l156 = 0; l156 < 3; l156 = l156 + 1) {
			fRec127[l156] = 0.0f;
		}
		for (int l157 = 0; l157 < 3; l157 = l157 + 1) {
			fRec126[l157] = 0.0f;
		}
		for (int l158 = 0; l158 < 3; l158 = l158 + 1) {
			fRec125[l158] = 0.0f;
		}
		for (int l159 = 0; l159 < 2; l159 = l159 + 1) {
			fRec124[l159] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("virtual_analog_oscillators");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("VIRTUAL ANALOG OSCILLATORS");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("Signal Levels");
		ui_interface->declare(&fVslider1, "0", "");
		ui_interface->declare(&fVslider1, "style", "vslider");
		ui_interface->addVerticalSlider("Sawtooth", &fVslider1, FAUSTFLOAT(1.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Pulse Train");
		ui_interface->declare(&fCheckbox2, "0", "");
		ui_interface->declare(&fCheckbox2, "tooltip", "When checked, use 3rd-order aliasing suppression (up from 2)      See if you can hear a difference with the freq high and swept");
		ui_interface->addCheckButton("Order 3", &fCheckbox2);
		ui_interface->declare(&fVslider7, "1", "");
		ui_interface->declare(&fVslider7, "style", "vslider");
		ui_interface->addVerticalSlider("0x00", &fVslider7, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider8, "2", "");
		ui_interface->declare(&fVslider8, "style", "knob");
		ui_interface->addVerticalSlider("Duty Cycle", &fVslider8, FAUSTFLOAT(0.5f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
		ui_interface->declare(&fVslider5, "2", "");
		ui_interface->declare(&fVslider5, "style", "vslider");
		ui_interface->addVerticalSlider("Square", &fVslider5, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider6, "3", "");
		ui_interface->declare(&fVslider6, "style", "vslider");
		ui_interface->addVerticalSlider("Triangle", &fVslider6, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider9, "4", "");
		ui_interface->declare(&fVslider9, "style", "vslider");
		ui_interface->declare(&fVslider9, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave (uses only amplitude controls)");
		ui_interface->addVerticalSlider("Pink Noise", &fVslider9, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider0, "5", "");
		ui_interface->declare(&fVslider0, "style", "vslider");
		ui_interface->addVerticalSlider("Ext Input", &fVslider0, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("Signal Parameters");
		ui_interface->declare(0, "0", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(&fHslider4, "1", "");
		ui_interface->declare(&fHslider4, "style", "hslider");
		ui_interface->declare(&fHslider4, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fHslider4, "unit", "dB");
		ui_interface->addHorizontalSlider("Mix Amplitude", &fHslider4, FAUSTFLOAT(-2e+01f), FAUSTFLOAT(-1.2e+02f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.1f));
		ui_interface->declare(&fHslider5, "2", "");
		ui_interface->declare(&fHslider5, "style", "hslider");
		ui_interface->declare(&fHslider5, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fHslider5, "unit", "PK");
		ui_interface->addHorizontalSlider("Frequency", &fHslider5, FAUSTFLOAT(49.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->closeBox();
		ui_interface->declare(&fVslider3, "3", "");
		ui_interface->declare(&fVslider3, "style", "knob");
		ui_interface->declare(&fVslider3, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fVslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fVslider3, FAUSTFLOAT(-0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider4, "4", "");
		ui_interface->declare(&fVslider4, "style", "knob");
		ui_interface->declare(&fVslider4, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fVslider4, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fVslider4, FAUSTFLOAT(0.1f), FAUSTFLOAT(-1e+01f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fVslider2, "5", "");
		ui_interface->declare(&fVslider2, "scale", "log");
		ui_interface->declare(&fVslider2, "style", "knob");
		ui_interface->declare(&fVslider2, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fVslider2, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fVslider2, FAUSTFLOAT(0.1f), FAUSTFLOAT(0.001f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(0.001f));
		ui_interface->declare(&fEntry0, "6", "");
		ui_interface->declare(&fEntry0, "tooltip", "Order of sawtooth aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fEntry0, FAUSTFLOAT(2.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(4.0f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's effect.lib for info and references");
		ui_interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fCheckbox0, "0", "");
		ui_interface->declare(&fCheckbox0, "tooltip", "When this is checked, the Moog VCF has no effect");
		ui_interface->addCheckButton("Bypass", &fCheckbox0);
		ui_interface->declare(&fCheckbox1, "1", "");
		ui_interface->declare(&fCheckbox1, "tooltip", "Select moog_vcf_2b (two-biquad) implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface->addCheckButton("Use Biquads", &fCheckbox1);
		ui_interface->declare(&fCheckbox3, "2", "");
		ui_interface->declare(&fCheckbox3, "tooltip", "If using biquads, make them normalized ladders (moog_vcf_2bn)");
		ui_interface->addCheckButton("Normalized Ladders", &fCheckbox3);
		ui_interface->closeBox();
		ui_interface->declare(&fHslider3, "1", "");
		ui_interface->declare(&fHslider3, "tooltip", "The VCF resonates at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).  The VCF response is flat below the corner frequency, and rolls off -24 dB per octave above.");
		ui_interface->declare(&fHslider3, "unit", "PK");
		ui_interface->addHorizontalSlider("Corner Frequency", &fHslider3, FAUSTFLOAT(25.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(88.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider6, "2", "");
		ui_interface->declare(&fHslider6, "style", "knob");
		ui_interface->declare(&fHslider6, "tooltip", "Amount of resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface->addHorizontalSlider("Corner Resonance", &fHslider6, FAUSTFLOAT(0.9f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f), FAUSTFLOAT(0.01f));
		ui_interface->declare(&fHslider2, "3", "");
		ui_interface->declare(&fHslider2, "style", "knob");
		ui_interface->declare(&fHslider2, "tooltip", "output level in decibels");
		ui_interface->declare(&fHslider2, "unit", "dB");
		ui_interface->addHorizontalSlider("VCF Output Level", &fHslider2, FAUSTFLOAT(5.0f), FAUSTFLOAT(-6e+01f), FAUSTFLOAT(2e+01f), FAUSTFLOAT(0.1f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fVbargraph14, "0", "");
		ui_interface->declare(&fVbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fVbargraph14, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph13, "1", "");
		ui_interface->declare(&fVbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fVbargraph13, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph12, "2", "");
		ui_interface->declare(&fVbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fVbargraph12, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph11, "3", "");
		ui_interface->declare(&fVbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fVbargraph11, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph10, "4", "");
		ui_interface->declare(&fVbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fVbargraph10, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph9, "5", "");
		ui_interface->declare(&fVbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fVbargraph9, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph8, "6", "");
		ui_interface->declare(&fVbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fVbargraph8, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph7, "7", "");
		ui_interface->declare(&fVbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fVbargraph7, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph6, "8", "");
		ui_interface->declare(&fVbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fVbargraph6, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph5, "9", "");
		ui_interface->declare(&fVbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fVbargraph5, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph4, "10", "");
		ui_interface->declare(&fVbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fVbargraph4, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph3, "11", "");
		ui_interface->declare(&fVbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fVbargraph3, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph2, "12", "");
		ui_interface->declare(&fVbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fVbargraph2, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph1, "13", "");
		ui_interface->declare(&fVbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fVbargraph1, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->declare(&fVbargraph0, "14", "");
		ui_interface->declare(&fVbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fVbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fVbargraph0, FAUSTFLOAT(-5e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fHslider1, "0", "");
		ui_interface->declare(&fHslider1, "scale", "log");
		ui_interface->declare(&fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fHslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fHslider1, FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f), FAUSTFLOAT(1e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider0, "1", "");
		ui_interface->declare(&fHslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fHslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fHslider0, FAUSTFLOAT(5e+01f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1e+02f), FAUSTFLOAT(1.0f));
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fHslider1);
		float fSlow2 = (((0.001f * fSlow1) > 0.0f) ? std::exp(-(fConst1 / fSlow1)) : 0.0f);
		int iSlow3 = int(float(fCheckbox0));
		float fSlow4 = 0.001f * std::pow(1e+01f, 0.05f * float(fHslider2));
		int iSlow5 = int(float(fCheckbox1));
		float fSlow6 = 0.44f * std::pow(2.0f, 0.083333336f * (float(fHslider3) + -49.0f));
		float fSlow7 = float(fVslider0);
		float fSlow8 = 0.001f * std::pow(1e+01f, 0.05f * float(fHslider4));
		float fSlow9 = 0.33333334f * float(fVslider1);
		int iSlow10 = int(float(fEntry0) + -1.0f);
		int iSlow11 = iSlow10 >= 2;
		int iSlow12 = iSlow10 >= 1;
		float fSlow13 = float(fVslider2);
		float fSlow14 = ((fSlow13 > 0.0f) ? std::exp(-(fConst15 / fSlow13)) : 0.0f);
		float fSlow15 = 4.4e+02f * std::pow(2.0f, 0.083333336f * (float(fHslider5) + -49.0f)) * (1.0f - fSlow14);
		int iSlow16 = iSlow10 >= 3;
		float fSlow17 = 1.0f - 0.01f * float(fVslider3);
		float fSlow18 = 0.01f * float(fVslider4) + 1.0f;
		float fSlow19 = float(fVslider5);
		float fSlow20 = fConst19 * fSlow19;
		float fSlow21 = fConst21 * float(fVslider6);
		float fSlow22 = float(fVslider7);
		float fSlow23 = fConst0 * fSlow22;
		float fSlow24 = float(fCheckbox2);
		float fSlow25 = fConst22 * fSlow24;
		float fSlow26 = 0.01f * float(fVslider8);
		float fSlow27 = 0.083333336f * (1.0f - fSlow24);
		float fSlow28 = float(fVslider9);
		float fSlow29 = float(fHslider6);
		float fSlow30 = 4.0f * std::max<float>(0.0f, std::min<float>(mydsp_faustpower4_f(fSlow29), 0.999999f));
		int iSlow31 = int(float(fCheckbox3));
		float fSlow32 = std::min<float>(1.4127994f, 1.4142135f * fSlow29);
		float fSlow33 = 1.4142135f * fSlow32;
		float fSlow34 = mydsp_faustpower2_f(fSlow32);
		float fSlow35 = fSlow33 + fSlow34;
		float fSlow36 = fSlow33 + 2.0f;
		float fSlow37 = 2.0f - fSlow33;
		float fSlow38 = mydsp_faustpower2_f(1.4127994f * fSlow29);
		float fSlow39 = 1.998f * fSlow29;
		float fSlow40 = fSlow38 + fSlow39;
		float fSlow41 = fSlow39 + 2.0f;
		float fSlow42 = 2.0f - fSlow39;
		float fSlow43 = 1.0f - fSlow2;
		float fSlow44 = 0.083333336f * fSlow19;
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			iVec0[0] = 1;
			fRec4[0] = fSlow4 + 0.999f * fRec4[1];
			fRec10[0] = fSlow6 + 0.999f * fRec10[1];
			float fTemp0 = fConst14 * fRec10[0];
			float fTemp1 = 1.0f - fTemp0;
			float fTemp2 = fSlow7 * float(input0[i0]);
			fRec11[0] = fSlow8 + 0.999f * fRec11[1];
			fRec13[0] = fRec13[1] * fSlow14 + fSlow15;
			float fTemp3 = std::max<float>(2e+01f, std::fabs(fRec13[0]));
			float fTemp4 = fRec12[1] + fConst15 * fTemp3;
			fRec12[0] = fTemp4 - std::floor(fTemp4);
			float fTemp5 = 2.0f * fRec12[0];
			float fTemp6 = fTemp5 + -1.0f;
			float fTemp7 = float(iVec0[1]);
			float fTemp8 = mydsp_faustpower2_f(fTemp6);
			fVec1[0] = fTemp8;
			float fTemp9 = float(iVec0[2]);
			float fTemp10 = mydsp_faustpower3_f(fTemp6);
			fVec2[0] = fTemp10 + (1.0f - fTemp5);
			float fTemp11 = (fTemp10 + (1.0f - (fTemp5 + fVec2[1]))) / fTemp3;
			fVec3[0] = fTemp11;
			float fTemp12 = float(iVec0[3]);
			float fTemp13 = fTemp8 * (fTemp8 + -2.0f);
			fVec4[0] = fTemp13;
			float fTemp14 = (fTemp13 - fVec4[1]) / fTemp3;
			fVec5[0] = fTemp14;
			float fTemp15 = (fTemp14 - fVec5[1]) / fTemp3;
			fVec6[0] = fTemp15;
			float fTemp16 = fSlow17 * fRec13[0];
			float fTemp17 = std::max<float>(2e+01f, std::fabs(fTemp16));
			float fTemp18 = fRec14[1] + fConst15 * fTemp17;
			fRec14[0] = fTemp18 - std::floor(fTemp18);
			float fTemp19 = 2.0f * fRec14[0];
			float fTemp20 = fTemp19 + -1.0f;
			float fTemp21 = mydsp_faustpower2_f(fTemp20);
			fVec7[0] = fTemp21;
			float fTemp22 = mydsp_faustpower3_f(fTemp20);
			fVec8[0] = fTemp22 + (1.0f - fTemp19);
			float fTemp23 = (fTemp22 + (1.0f - (fTemp19 + fVec8[1]))) / fTemp17;
			fVec9[0] = fTemp23;
			float fTemp24 = fTemp21 * (fTemp21 + -2.0f);
			fVec10[0] = fTemp24;
			float fTemp25 = (fTemp24 - fVec10[1]) / fTemp17;
			fVec11[0] = fTemp25;
			float fTemp26 = (fTemp25 - fVec11[1]) / fTemp17;
			fVec12[0] = fTemp26;
			float fTemp27 = fSlow18 * fRec13[0];
			float fTemp28 = std::max<float>(2e+01f, std::fabs(fTemp27));
			float fTemp29 = fRec15[1] + fConst15 * fTemp28;
			fRec15[0] = fTemp29 - std::floor(fTemp29);
			float fTemp30 = 2.0f * fRec15[0];
			float fTemp31 = fTemp30 + -1.0f;
			float fTemp32 = mydsp_faustpower2_f(fTemp31);
			fVec13[0] = fTemp32;
			float fTemp33 = mydsp_faustpower3_f(fTemp31);
			fVec14[0] = fTemp33 + (1.0f - fTemp30);
			float fTemp34 = (fTemp33 + (1.0f - (fTemp30 + fVec14[1]))) / fTemp28;
			fVec15[0] = fTemp34;
			float fTemp35 = fTemp32 * (fTemp32 + -2.0f);
			fVec16[0] = fTemp35;
			float fTemp36 = (fTemp35 - fVec16[1]) / fTemp28;
			fVec17[0] = fTemp36;
			float fTemp37 = (fTemp36 - fVec17[1]) / fTemp28;
			fVec18[0] = fTemp37;
			float fTemp38 = fSlow9 * (((iSlow11) ? ((iSlow16) ? fConst18 * (fTemp12 * (fTemp15 - fVec6[1]) / fTemp3) : fConst17 * (fTemp9 * (fTemp11 - fVec3[1]) / fTemp3)) : ((iSlow12) ? fConst16 * (fTemp7 * (fTemp8 - fVec1[1]) / fTemp3) : fTemp6)) + ((iSlow11) ? ((iSlow16) ? fConst18 * (fTemp12 * (fTemp26 - fVec12[1]) / fTemp17) : fConst17 * (fTemp9 * (fTemp23 - fVec9[1]) / fTemp17)) : ((iSlow12) ? fConst16 * (fTemp7 * (fTemp21 - fVec7[1]) / fTemp17) : fTemp20)) + ((iSlow11) ? ((iSlow16) ? fConst18 * (fTemp12 * (fTemp37 - fVec18[1]) / fTemp28) : fConst17 * (fTemp9 * (fTemp34 - fVec15[1]) / fTemp28)) : ((iSlow12) ? fConst16 * (fTemp7 * (fTemp32 - fVec13[1]) / fTemp28) : fTemp31)));
			float fTemp39 = std::max<float>(fRec13[0], 23.44895f);
			float fTemp40 = std::max<float>(2e+01f, std::fabs(fTemp39));
			float fTemp41 = fRec16[1] + fConst15 * fTemp40;
			fRec16[0] = fTemp41 - std::floor(fTemp41);
			float fTemp42 = 2.0f * fRec16[0];
			float fTemp43 = fTemp42 + -1.0f;
			float fTemp44 = mydsp_faustpower2_f(fTemp43);
			fVec19[0] = fTemp44;
			float fTemp45 = fTemp44 - fVec19[1];
			float fTemp46 = fTemp7 * fTemp45 / fTemp40;
			fVec20[IOTA0 & 4095] = fTemp46;
			float fTemp47 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst20 / fTemp39));
			int iTemp48 = int(fTemp47);
			float fTemp49 = float(iTemp48);
			float fTemp50 = fVec20[(IOTA0 - iTemp48) & 4095] * (fTemp49 + (1.0f - fTemp47));
			float fTemp51 = (fTemp47 - fTemp49) * fVec20[(IOTA0 - (iTemp48 + 1)) & 4095];
			float fTemp52 = fTemp46 - fTemp50 - fTemp51;
			float fTemp53 = std::max<float>(fTemp16, 23.44895f);
			float fTemp54 = std::max<float>(2e+01f, std::fabs(fTemp53));
			float fTemp55 = fRec17[1] + fConst15 * fTemp54;
			fRec17[0] = fTemp55 - std::floor(fTemp55);
			float fTemp56 = 2.0f * fRec17[0];
			float fTemp57 = fTemp56 + -1.0f;
			float fTemp58 = mydsp_faustpower2_f(fTemp57);
			fVec21[0] = fTemp58;
			float fTemp59 = fTemp58 - fVec21[1];
			float fTemp60 = fTemp7 * fTemp59 / fTemp54;
			fVec22[IOTA0 & 4095] = fTemp60;
			float fTemp61 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst20 / fTemp53));
			int iTemp62 = int(fTemp61);
			float fTemp63 = float(iTemp62);
			float fTemp64 = fVec22[(IOTA0 - iTemp62) & 4095] * (fTemp63 + (1.0f - fTemp61));
			float fTemp65 = (fTemp61 - fTemp63) * fVec22[(IOTA0 - (iTemp62 + 1)) & 4095];
			float fTemp66 = fTemp60 - fTemp64 - fTemp65;
			float fTemp67 = std::max<float>(fTemp27, 23.44895f);
			float fTemp68 = std::max<float>(2e+01f, std::fabs(fTemp67));
			float fTemp69 = fRec18[1] + fConst15 * fTemp68;
			fRec18[0] = fTemp69 - std::floor(fTemp69);
			float fTemp70 = 2.0f * fRec18[0];
			float fTemp71 = fTemp70 + -1.0f;
			float fTemp72 = mydsp_faustpower2_f(fTemp71);
			fVec23[0] = fTemp72;
			float fTemp73 = fTemp72 - fVec23[1];
			float fTemp74 = fTemp7 * fTemp73 / fTemp68;
			fVec24[IOTA0 & 4095] = fTemp74;
			float fTemp75 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst20 / fTemp67));
			int iTemp76 = int(fTemp75);
			float fTemp77 = float(iTemp76);
			float fTemp78 = fVec24[(IOTA0 - iTemp76) & 4095] * (fTemp77 + (1.0f - fTemp75));
			float fTemp79 = (fTemp75 - fTemp77) * fVec24[(IOTA0 - (iTemp76 + 1)) & 4095];
			float fTemp80 = fTemp74 - fTemp78 - fTemp79;
			fRec19[0] = fConst16 * fTemp52 + 0.999f * fRec19[1];
			fRec20[0] = fConst16 * fTemp66 + 0.999f * fRec20[1];
			fRec21[0] = fConst16 * fTemp80 + 0.999f * fRec21[1];
			float fTemp81 = fSlow21 * fRec13[0] * (fRec19[0] + fSlow17 * fRec20[0] + fSlow18 * fRec21[0]);
			float fTemp82 = mydsp_faustpower3_f(fTemp43);
			fVec25[0] = fTemp82 + (1.0f - fTemp42);
			float fTemp83 = (fTemp82 + (1.0f - (fTemp42 + fVec25[1]))) / fTemp40;
			fVec26[0] = fTemp83;
			float fTemp84 = fTemp83 - fVec26[1];
			float fTemp85 = fTemp9 * fTemp84 / fTemp40;
			fVec27[IOTA0 & 4095] = fTemp85;
			fRec22[0] = fSlow26 + 0.99f * fRec22[1];
			float fTemp86 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst0 * (fRec22[0] / fTemp39)));
			int iTemp87 = int(fTemp86);
			float fTemp88 = float(iTemp87);
			float fTemp89 = fTemp88 + (1.0f - fTemp86);
			float fTemp90 = fVec27[(IOTA0 - iTemp87) & 4095] * fTemp89;
			float fTemp91 = fTemp86 - fTemp88;
			int iTemp92 = iTemp87 + 1;
			float fTemp93 = fTemp91 * fVec27[(IOTA0 - iTemp92) & 4095];
			float fTemp94 = mydsp_faustpower3_f(fTemp57);
			fVec28[0] = fTemp94 + (1.0f - fTemp56);
			float fTemp95 = (fTemp94 + (1.0f - (fTemp56 + fVec28[1]))) / fTemp54;
			fVec29[0] = fTemp95;
			float fTemp96 = fTemp95 - fVec29[1];
			float fTemp97 = fTemp9 * fTemp96 / fTemp54;
			fVec30[IOTA0 & 4095] = fTemp97;
			float fTemp98 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst0 * (fRec22[0] / fTemp53)));
			int iTemp99 = int(fTemp98);
			float fTemp100 = float(iTemp99);
			float fTemp101 = fTemp100 + (1.0f - fTemp98);
			float fTemp102 = fVec30[(IOTA0 - iTemp99) & 4095] * fTemp101;
			float fTemp103 = fTemp98 - fTemp100;
			int iTemp104 = iTemp99 + 1;
			float fTemp105 = fTemp103 * fVec30[(IOTA0 - iTemp104) & 4095];
			float fTemp106 = mydsp_faustpower3_f(fTemp71);
			fVec31[0] = fTemp106 + (1.0f - fTemp70);
			float fTemp107 = (fTemp106 + (1.0f - (fTemp70 + fVec31[1]))) / fTemp68;
			fVec32[0] = fTemp107;
			float fTemp108 = fTemp107 - fVec32[1];
			float fTemp109 = fTemp9 * fTemp108 / fTemp68;
			fVec33[IOTA0 & 4095] = fTemp109;
			float fTemp110 = std::max<float>(0.0f, std::min<float>(2047.0f, fConst0 * (fRec22[0] / fTemp67)));
			int iTemp111 = int(fTemp110);
			float fTemp112 = float(iTemp111);
			float fTemp113 = fTemp112 + (1.0f - fTemp110);
			float fTemp114 = fVec33[(IOTA0 - iTemp111) & 4095] * fTemp113;
			float fTemp115 = fTemp110 - fTemp112;
			int iTemp116 = iTemp111 + 1;
			float fTemp117 = fTemp115 * fVec33[(IOTA0 - iTemp116) & 4095];
			float fTemp118 = fTemp89 * fVec20[(IOTA0 - iTemp87) & 4095];
			float fTemp119 = fTemp91 * fVec20[(IOTA0 - iTemp92) & 4095];
			float fTemp120 = fTemp101 * fVec22[(IOTA0 - iTemp99) & 4095];
			float fTemp121 = fTemp103 * fVec22[(IOTA0 - iTemp104) & 4095];
			float fTemp122 = fTemp113 * fVec24[(IOTA0 - iTemp111) & 4095];
			float fTemp123 = fTemp115 * fVec24[(IOTA0 - iTemp116) & 4095];
			iRec24[0] = 1103515245 * iRec24[1] + 12345;
			fRec23[0] = 0.5221894f * fRec23[3] + 4.656613e-10f * float(iRec24[0]) + 2.494956f * fRec23[1] - 2.0172658f * fRec23[2];
			float fTemp124 = fSlow28 * (0.049922034f * fRec23[0] + 0.0506127f * fRec23[2] - (0.095993534f * fRec23[1] + 0.004408786f * fRec23[3]));
			float fTemp125 = fTemp2 + fRec11[0] * (fTemp38 + fSlow20 * (fTemp52 + fTemp66 + fTemp80) + fTemp81 + fSlow23 * (fSlow25 * (fTemp85 - fTemp90 - fTemp93 + (fTemp97 - fTemp102 - fTemp105) + (fTemp109 - fTemp114 - fTemp117)) + fSlow27 * (fTemp46 - fTemp118 - fTemp119 + (fTemp60 - fTemp120 - fTemp121) + (fTemp74 - fTemp122 - fTemp123))) + fTemp124);
			float fTemp126 = ((iSlow3) ? 0.0f : fTemp125);
			fRec9[0] = fTemp1 * fRec9[1] + fTemp126 - fSlow30 * fRec5[1];
			fRec8[0] = fRec9[0] + fTemp1 * fRec8[1];
			fRec7[0] = fRec8[0] + fTemp1 * fRec7[1];
			fRec6[0] = fRec7[0] + fRec6[1] * fTemp1;
			fRec5[0] = fRec6[0] * mydsp_faustpower4_f(fTemp0);
			float fTemp127 = std::tan(fConst23 * std::max<float>(2e+01f, std::min<float>(1e+04f, fRec10[0])));
			float fTemp128 = 1.0f / fTemp127;
			float fTemp129 = 1.0f - 1.0f / mydsp_faustpower2_f(fTemp127);
			float fTemp130 = fSlow35 + (fSlow36 + fTemp128) / fTemp127 + 1.0f;
			fRec26[0] = fTemp126 - (fRec26[2] * (fSlow35 + (fTemp128 - fSlow36) / fTemp127 + 1.0f) + 2.0f * fRec26[1] * (fSlow35 + fTemp129)) / fTemp130;
			float fTemp131 = fSlow34 + ((fSlow37 + fTemp128) / fTemp127 + 1.0f - fSlow33);
			fRec25[0] = (fRec26[2] + fRec26[0] + 2.0f * fRec26[1]) / fTemp130 - (fRec25[2] * (fSlow34 + ((fTemp128 - fSlow37) / fTemp127 + 1.0f - fSlow33)) + 2.0f * fRec25[1] * (fSlow34 + (fTemp129 - fSlow33))) / fTemp131;
			float fTemp132 = fRec25[2] + fRec25[0] + 2.0f * fRec25[1];
			float fTemp133 = std::tan(fConst23 * std::max<float>(fRec10[0], 2e+01f));
			float fTemp134 = 1.0f / fTemp133;
			float fTemp135 = fSlow40 + (fSlow41 + fTemp134) / fTemp133 + 1.0f;
			float fTemp136 = (fSlow40 + (1.0f - (fSlow41 - fTemp134) / fTemp133)) / fTemp135;
			float fTemp137 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp136));
			float fTemp138 = 1.0f - mydsp_faustpower2_f(fTemp137);
			float fTemp139 = std::sqrt(std::max<float>(0.0f, fTemp138));
			float fTemp140 = fTemp126 * fTemp139 - fTemp137 * fRec27[1];
			float fTemp141 = 1.0f - 1.0f / mydsp_faustpower2_f(fTemp133);
			float fTemp142 = fSlow40 + fTemp141;
			float fTemp143 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp142 / (fTemp135 * (fTemp136 + 1.0f)))));
			float fTemp144 = 1.0f - mydsp_faustpower2_f(fTemp143);
			float fTemp145 = std::sqrt(std::max<float>(0.0f, fTemp144));
			fRec29[0] = fTemp140 * fTemp145 - fTemp143 * fRec29[1];
			fRec27[0] = fTemp140 * fTemp143 + fRec29[1] * fTemp145;
			float fRec28 = fRec29[0];
			float fTemp146 = 1.0f - fTemp142 / fTemp135;
			float fTemp147 = std::sqrt(fTemp138);
			float fTemp148 = fTemp126 * fTemp137 + fRec27[1] * fTemp139 + 2.0f * (fRec27[0] * fTemp146 / fTemp147) + fRec28 * (1.0f - fTemp136 - 2.0f * fTemp143 * fTemp146) / (fTemp147 * std::sqrt(fTemp144));
			float fTemp149 = fSlow38 + ((fSlow42 + fTemp134) / fTemp133 + 1.0f - fSlow39);
			float fTemp150 = (fSlow38 + ((fTemp134 - fSlow42) / fTemp133 + 1.0f - fSlow39)) / fTemp149;
			float fTemp151 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp150));
			float fTemp152 = 1.0f - mydsp_faustpower2_f(fTemp151);
			float fTemp153 = std::sqrt(std::max<float>(0.0f, fTemp152));
			float fTemp154 = fTemp148 * fTemp153 / fTemp135 - fTemp151 * fRec30[1];
			float fTemp155 = fSlow38 + (fTemp141 - fSlow39);
			float fTemp156 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp155 / (fTemp149 * (fTemp150 + 1.0f)))));
			float fTemp157 = 1.0f - mydsp_faustpower2_f(fTemp156);
			float fTemp158 = std::sqrt(std::max<float>(0.0f, fTemp157));
			fRec32[0] = fTemp154 * fTemp158 - fTemp156 * fRec32[1];
			fRec30[0] = fTemp154 * fTemp156 + fRec32[1] * fTemp158;
			float fRec31 = fRec32[0];
			float fTemp159 = 1.0f - fTemp155 / fTemp149;
			float fTemp160 = std::sqrt(fTemp152);
			float fTemp161 = ((iSlow3) ? fTemp125 : fRec4[0] * ((iSlow5) ? ((iSlow31) ? (fTemp148 * fTemp151 / fTemp135 + fRec30[1] * fTemp153 + 2.0f * (fRec30[0] * fTemp159 / fTemp160) + fRec31 * (1.0f - fTemp150 - 2.0f * fTemp156 * fTemp159) / (fTemp160 * std::sqrt(fTemp157))) / fTemp149 : fTemp132 / fTemp131) : fRec5[0]));
			fRec3[0] = fTemp161 - fConst11 * (fConst24 * fRec3[2] + fConst26 * fRec3[1]);
			fRec2[0] = fConst11 * (fConst13 * fRec3[0] + fConst27 * fRec3[1] + fConst13 * fRec3[2]) - fConst8 * (fConst28 * fRec2[2] + fConst29 * fRec2[1]);
			fRec1[0] = fConst8 * (fConst10 * fRec2[0] + fConst30 * fRec2[1] + fConst10 * fRec2[2]) - fConst4 * (fConst31 * fRec1[2] + fConst32 * fRec1[1]);
			fRec0[0] = fRec0[1] * fSlow2 + std::fabs(fConst4 * (fConst7 * fRec1[0] + fConst33 * fRec1[1] + fConst7 * fRec1[2])) * fSlow43;
			fVbargraph0 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec0[0]));
			fRec39[0] = fTemp161 - fConst50 * (fConst53 * fRec39[2] + fConst54 * fRec39[1]);
			fRec38[0] = fConst50 * (fConst52 * fRec39[0] + fConst55 * fRec39[1] + fConst52 * fRec39[2]) - fConst48 * (fConst56 * fRec38[2] + fConst57 * fRec38[1]);
			fRec37[0] = fConst48 * (fConst49 * fRec38[0] + fConst58 * fRec38[1] + fConst49 * fRec38[2]) - fConst46 * (fConst59 * fRec37[2] + fConst60 * fRec37[1]);
			float fTemp162 = fConst46 * (fConst47 * fRec37[0] + fConst61 * fRec37[1] + fConst47 * fRec37[2]);
			fRec36[0] = fTemp162 - fConst43 * (fConst62 * fRec36[2] + fConst64 * fRec36[1]);
			fRec35[0] = fConst43 * (fConst45 * fRec36[0] + fConst65 * fRec36[1] + fConst45 * fRec36[2]) - fConst40 * (fConst66 * fRec35[2] + fConst67 * fRec35[1]);
			fRec34[0] = fConst40 * (fConst42 * fRec35[0] + fConst68 * fRec35[1] + fConst42 * fRec35[2]) - fConst36 * (fConst69 * fRec34[2] + fConst70 * fRec34[1]);
			fRec33[0] = fSlow2 * fRec33[1] + fSlow43 * std::fabs(fConst36 * (fConst39 * fRec34[0] + fConst71 * fRec34[1] + fConst39 * fRec34[2]));
			fVbargraph1 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec33[0]));
			fRec46[0] = fTemp162 - fConst88 * (fConst91 * fRec46[2] + fConst92 * fRec46[1]);
			fRec45[0] = fConst88 * (fConst90 * fRec46[0] + fConst93 * fRec46[1] + fConst90 * fRec46[2]) - fConst86 * (fConst94 * fRec45[2] + fConst95 * fRec45[1]);
			fRec44[0] = fConst86 * (fConst87 * fRec45[0] + fConst96 * fRec45[1] + fConst87 * fRec45[2]) - fConst84 * (fConst97 * fRec44[2] + fConst98 * fRec44[1]);
			float fTemp163 = fConst84 * (fConst85 * fRec44[0] + fConst99 * fRec44[1] + fConst85 * fRec44[2]);
			fRec43[0] = fTemp163 - fConst81 * (fConst100 * fRec43[2] + fConst102 * fRec43[1]);
			fRec42[0] = fConst81 * (fConst83 * fRec43[0] + fConst103 * fRec43[1] + fConst83 * fRec43[2]) - fConst78 * (fConst104 * fRec42[2] + fConst105 * fRec42[1]);
			fRec41[0] = fConst78 * (fConst80 * fRec42[0] + fConst106 * fRec42[1] + fConst80 * fRec42[2]) - fConst74 * (fConst107 * fRec41[2] + fConst108 * fRec41[1]);
			fRec40[0] = fSlow2 * fRec40[1] + fSlow43 * std::fabs(fConst74 * (fConst77 * fRec41[0] + fConst109 * fRec41[1] + fConst77 * fRec41[2]));
			fVbargraph2 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec40[0]));
			fRec53[0] = fTemp163 - fConst126 * (fConst129 * fRec53[2] + fConst130 * fRec53[1]);
			fRec52[0] = fConst126 * (fConst128 * fRec53[0] + fConst131 * fRec53[1] + fConst128 * fRec53[2]) - fConst124 * (fConst132 * fRec52[2] + fConst133 * fRec52[1]);
			fRec51[0] = fConst124 * (fConst125 * fRec52[0] + fConst134 * fRec52[1] + fConst125 * fRec52[2]) - fConst122 * (fConst135 * fRec51[2] + fConst136 * fRec51[1]);
			float fTemp164 = fConst122 * (fConst123 * fRec51[0] + fConst137 * fRec51[1] + fConst123 * fRec51[2]);
			fRec50[0] = fTemp164 - fConst119 * (fConst138 * fRec50[2] + fConst140 * fRec50[1]);
			fRec49[0] = fConst119 * (fConst121 * fRec50[0] + fConst141 * fRec50[1] + fConst121 * fRec50[2]) - fConst116 * (fConst142 * fRec49[2] + fConst143 * fRec49[1]);
			fRec48[0] = fConst116 * (fConst118 * fRec49[0] + fConst144 * fRec49[1] + fConst118 * fRec49[2]) - fConst112 * (fConst145 * fRec48[2] + fConst146 * fRec48[1]);
			fRec47[0] = fSlow2 * fRec47[1] + fSlow43 * std::fabs(fConst112 * (fConst115 * fRec48[0] + fConst147 * fRec48[1] + fConst115 * fRec48[2]));
			fVbargraph3 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec47[0]));
			fRec60[0] = fTemp164 - fConst164 * (fConst167 * fRec60[2] + fConst168 * fRec60[1]);
			fRec59[0] = fConst164 * (fConst166 * fRec60[0] + fConst169 * fRec60[1] + fConst166 * fRec60[2]) - fConst162 * (fConst170 * fRec59[2] + fConst171 * fRec59[1]);
			fRec58[0] = fConst162 * (fConst163 * fRec59[0] + fConst172 * fRec59[1] + fConst163 * fRec59[2]) - fConst160 * (fConst173 * fRec58[2] + fConst174 * fRec58[1]);
			float fTemp165 = fConst160 * (fConst161 * fRec58[0] + fConst175 * fRec58[1] + fConst161 * fRec58[2]);
			fRec57[0] = fTemp165 - fConst157 * (fConst176 * fRec57[2] + fConst178 * fRec57[1]);
			fRec56[0] = fConst157 * (fConst159 * fRec57[0] + fConst179 * fRec57[1] + fConst159 * fRec57[2]) - fConst154 * (fConst180 * fRec56[2] + fConst181 * fRec56[1]);
			fRec55[0] = fConst154 * (fConst156 * fRec56[0] + fConst182 * fRec56[1] + fConst156 * fRec56[2]) - fConst150 * (fConst183 * fRec55[2] + fConst184 * fRec55[1]);
			fRec54[0] = fSlow2 * fRec54[1] + fSlow43 * std::fabs(fConst150 * (fConst153 * fRec55[0] + fConst185 * fRec55[1] + fConst153 * fRec55[2]));
			fVbargraph4 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec54[0]));
			fRec67[0] = fTemp165 - fConst202 * (fConst205 * fRec67[2] + fConst206 * fRec67[1]);
			fRec66[0] = fConst202 * (fConst204 * fRec67[0] + fConst207 * fRec67[1] + fConst204 * fRec67[2]) - fConst200 * (fConst208 * fRec66[2] + fConst209 * fRec66[1]);
			fRec65[0] = fConst200 * (fConst201 * fRec66[0] + fConst210 * fRec66[1] + fConst201 * fRec66[2]) - fConst198 * (fConst211 * fRec65[2] + fConst212 * fRec65[1]);
			float fTemp166 = fConst198 * (fConst199 * fRec65[0] + fConst213 * fRec65[1] + fConst199 * fRec65[2]);
			fRec64[0] = fTemp166 - fConst195 * (fConst214 * fRec64[2] + fConst216 * fRec64[1]);
			fRec63[0] = fConst195 * (fConst197 * fRec64[0] + fConst217 * fRec64[1] + fConst197 * fRec64[2]) - fConst192 * (fConst218 * fRec63[2] + fConst219 * fRec63[1]);
			fRec62[0] = fConst192 * (fConst194 * fRec63[0] + fConst220 * fRec63[1] + fConst194 * fRec63[2]) - fConst188 * (fConst221 * fRec62[2] + fConst222 * fRec62[1]);
			fRec61[0] = fSlow2 * fRec61[1] + fSlow43 * std::fabs(fConst188 * (fConst191 * fRec62[0] + fConst223 * fRec62[1] + fConst191 * fRec62[2]));
			fVbargraph5 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec61[0]));
			fRec74[0] = fTemp166 - fConst240 * (fConst243 * fRec74[2] + fConst244 * fRec74[1]);
			fRec73[0] = fConst240 * (fConst242 * fRec74[0] + fConst245 * fRec74[1] + fConst242 * fRec74[2]) - fConst238 * (fConst246 * fRec73[2] + fConst247 * fRec73[1]);
			fRec72[0] = fConst238 * (fConst239 * fRec73[0] + fConst248 * fRec73[1] + fConst239 * fRec73[2]) - fConst236 * (fConst249 * fRec72[2] + fConst250 * fRec72[1]);
			float fTemp167 = fConst236 * (fConst237 * fRec72[0] + fConst251 * fRec72[1] + fConst237 * fRec72[2]);
			fRec71[0] = fTemp167 - fConst233 * (fConst252 * fRec71[2] + fConst254 * fRec71[1]);
			fRec70[0] = fConst233 * (fConst235 * fRec71[0] + fConst255 * fRec71[1] + fConst235 * fRec71[2]) - fConst230 * (fConst256 * fRec70[2] + fConst257 * fRec70[1]);
			fRec69[0] = fConst230 * (fConst232 * fRec70[0] + fConst258 * fRec70[1] + fConst232 * fRec70[2]) - fConst226 * (fConst259 * fRec69[2] + fConst260 * fRec69[1]);
			fRec68[0] = fSlow2 * fRec68[1] + fSlow43 * std::fabs(fConst226 * (fConst229 * fRec69[0] + fConst261 * fRec69[1] + fConst229 * fRec69[2]));
			fVbargraph6 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec68[0]));
			fRec81[0] = fTemp167 - fConst278 * (fConst281 * fRec81[2] + fConst282 * fRec81[1]);
			fRec80[0] = fConst278 * (fConst280 * fRec81[0] + fConst283 * fRec81[1] + fConst280 * fRec81[2]) - fConst276 * (fConst284 * fRec80[2] + fConst285 * fRec80[1]);
			fRec79[0] = fConst276 * (fConst277 * fRec80[0] + fConst286 * fRec80[1] + fConst277 * fRec80[2]) - fConst274 * (fConst287 * fRec79[2] + fConst288 * fRec79[1]);
			float fTemp168 = fConst274 * (fConst275 * fRec79[0] + fConst289 * fRec79[1] + fConst275 * fRec79[2]);
			fRec78[0] = fTemp168 - fConst271 * (fConst290 * fRec78[2] + fConst292 * fRec78[1]);
			fRec77[0] = fConst271 * (fConst273 * fRec78[0] + fConst293 * fRec78[1] + fConst273 * fRec78[2]) - fConst268 * (fConst294 * fRec77[2] + fConst295 * fRec77[1]);
			fRec76[0] = fConst268 * (fConst270 * fRec77[0] + fConst296 * fRec77[1] + fConst270 * fRec77[2]) - fConst264 * (fConst297 * fRec76[2] + fConst298 * fRec76[1]);
			fRec75[0] = fSlow2 * fRec75[1] + fSlow43 * std::fabs(fConst264 * (fConst267 * fRec76[0] + fConst299 * fRec76[1] + fConst267 * fRec76[2]));
			fVbargraph7 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec75[0]));
			fRec88[0] = fTemp168 - fConst316 * (fConst319 * fRec88[2] + fConst320 * fRec88[1]);
			fRec87[0] = fConst316 * (fConst318 * fRec88[0] + fConst321 * fRec88[1] + fConst318 * fRec88[2]) - fConst314 * (fConst322 * fRec87[2] + fConst323 * fRec87[1]);
			fRec86[0] = fConst314 * (fConst315 * fRec87[0] + fConst324 * fRec87[1] + fConst315 * fRec87[2]) - fConst312 * (fConst325 * fRec86[2] + fConst326 * fRec86[1]);
			float fTemp169 = fConst312 * (fConst313 * fRec86[0] + fConst327 * fRec86[1] + fConst313 * fRec86[2]);
			fRec85[0] = fTemp169 - fConst309 * (fConst328 * fRec85[2] + fConst330 * fRec85[1]);
			fRec84[0] = fConst309 * (fConst311 * fRec85[0] + fConst331 * fRec85[1] + fConst311 * fRec85[2]) - fConst306 * (fConst332 * fRec84[2] + fConst333 * fRec84[1]);
			fRec83[0] = fConst306 * (fConst308 * fRec84[0] + fConst334 * fRec84[1] + fConst308 * fRec84[2]) - fConst302 * (fConst335 * fRec83[2] + fConst336 * fRec83[1]);
			fRec82[0] = fSlow2 * fRec82[1] + fSlow43 * std::fabs(fConst302 * (fConst305 * fRec83[0] + fConst337 * fRec83[1] + fConst305 * fRec83[2]));
			fVbargraph8 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec82[0]));
			fRec95[0] = fTemp169 - fConst354 * (fConst357 * fRec95[2] + fConst358 * fRec95[1]);
			fRec94[0] = fConst354 * (fConst356 * fRec95[0] + fConst359 * fRec95[1] + fConst356 * fRec95[2]) - fConst352 * (fConst360 * fRec94[2] + fConst361 * fRec94[1]);
			fRec93[0] = fConst352 * (fConst353 * fRec94[0] + fConst362 * fRec94[1] + fConst353 * fRec94[2]) - fConst350 * (fConst363 * fRec93[2] + fConst364 * fRec93[1]);
			float fTemp170 = fConst350 * (fConst351 * fRec93[0] + fConst365 * fRec93[1] + fConst351 * fRec93[2]);
			fRec92[0] = fTemp170 - fConst347 * (fConst366 * fRec92[2] + fConst368 * fRec92[1]);
			fRec91[0] = fConst347 * (fConst349 * fRec92[0] + fConst369 * fRec92[1] + fConst349 * fRec92[2]) - fConst344 * (fConst370 * fRec91[2] + fConst371 * fRec91[1]);
			fRec90[0] = fConst344 * (fConst346 * fRec91[0] + fConst372 * fRec91[1] + fConst346 * fRec91[2]) - fConst340 * (fConst373 * fRec90[2] + fConst374 * fRec90[1]);
			fRec89[0] = fSlow2 * fRec89[1] + fSlow43 * std::fabs(fConst340 * (fConst343 * fRec90[0] + fConst375 * fRec90[1] + fConst343 * fRec90[2]));
			fVbargraph9 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec89[0]));
			fRec102[0] = fTemp170 - fConst392 * (fConst395 * fRec102[2] + fConst396 * fRec102[1]);
			fRec101[0] = fConst392 * (fConst394 * fRec102[0] + fConst397 * fRec102[1] + fConst394 * fRec102[2]) - fConst390 * (fConst398 * fRec101[2] + fConst399 * fRec101[1]);
			fRec100[0] = fConst390 * (fConst391 * fRec101[0] + fConst400 * fRec101[1] + fConst391 * fRec101[2]) - fConst388 * (fConst401 * fRec100[2] + fConst402 * fRec100[1]);
			float fTemp171 = fConst388 * (fConst389 * fRec100[0] + fConst403 * fRec100[1] + fConst389 * fRec100[2]);
			fRec99[0] = fTemp171 - fConst385 * (fConst404 * fRec99[2] + fConst406 * fRec99[1]);
			fRec98[0] = fConst385 * (fConst387 * fRec99[0] + fConst407 * fRec99[1] + fConst387 * fRec99[2]) - fConst382 * (fConst408 * fRec98[2] + fConst409 * fRec98[1]);
			fRec97[0] = fConst382 * (fConst384 * fRec98[0] + fConst410 * fRec98[1] + fConst384 * fRec98[2]) - fConst378 * (fConst411 * fRec97[2] + fConst412 * fRec97[1]);
			fRec96[0] = fSlow2 * fRec96[1] + fSlow43 * std::fabs(fConst378 * (fConst381 * fRec97[0] + fConst413 * fRec97[1] + fConst381 * fRec97[2]));
			fVbargraph10 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec96[0]));
			fRec109[0] = fTemp171 - fConst430 * (fConst433 * fRec109[2] + fConst434 * fRec109[1]);
			fRec108[0] = fConst430 * (fConst432 * fRec109[0] + fConst435 * fRec109[1] + fConst432 * fRec109[2]) - fConst428 * (fConst436 * fRec108[2] + fConst437 * fRec108[1]);
			fRec107[0] = fConst428 * (fConst429 * fRec108[0] + fConst438 * fRec108[1] + fConst429 * fRec108[2]) - fConst426 * (fConst439 * fRec107[2] + fConst440 * fRec107[1]);
			float fTemp172 = fConst426 * (fConst427 * fRec107[0] + fConst441 * fRec107[1] + fConst427 * fRec107[2]);
			fRec106[0] = fTemp172 - fConst423 * (fConst442 * fRec106[2] + fConst444 * fRec106[1]);
			fRec105[0] = fConst423 * (fConst425 * fRec106[0] + fConst445 * fRec106[1] + fConst425 * fRec106[2]) - fConst420 * (fConst446 * fRec105[2] + fConst447 * fRec105[1]);
			fRec104[0] = fConst420 * (fConst422 * fRec105[0] + fConst448 * fRec105[1] + fConst422 * fRec105[2]) - fConst416 * (fConst449 * fRec104[2] + fConst450 * fRec104[1]);
			fRec103[0] = fSlow2 * fRec103[1] + fSlow43 * std::fabs(fConst416 * (fConst419 * fRec104[0] + fConst451 * fRec104[1] + fConst419 * fRec104[2]));
			fVbargraph11 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec103[0]));
			fRec116[0] = fTemp172 - fConst468 * (fConst471 * fRec116[2] + fConst472 * fRec116[1]);
			fRec115[0] = fConst468 * (fConst470 * fRec116[0] + fConst473 * fRec116[1] + fConst470 * fRec116[2]) - fConst466 * (fConst474 * fRec115[2] + fConst475 * fRec115[1]);
			fRec114[0] = fConst466 * (fConst467 * fRec115[0] + fConst476 * fRec115[1] + fConst467 * fRec115[2]) - fConst464 * (fConst477 * fRec114[2] + fConst478 * fRec114[1]);
			float fTemp173 = fConst464 * (fConst465 * fRec114[0] + fConst479 * fRec114[1] + fConst465 * fRec114[2]);
			fRec113[0] = fTemp173 - fConst461 * (fConst480 * fRec113[2] + fConst482 * fRec113[1]);
			fRec112[0] = fConst461 * (fConst463 * fRec113[0] + fConst483 * fRec113[1] + fConst463 * fRec113[2]) - fConst458 * (fConst484 * fRec112[2] + fConst485 * fRec112[1]);
			fRec111[0] = fConst458 * (fConst460 * fRec112[0] + fConst486 * fRec112[1] + fConst460 * fRec112[2]) - fConst454 * (fConst487 * fRec111[2] + fConst488 * fRec111[1]);
			fRec110[0] = fSlow2 * fRec110[1] + fSlow43 * std::fabs(fConst454 * (fConst457 * fRec111[0] + fConst489 * fRec111[1] + fConst457 * fRec111[2]));
			fVbargraph12 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec110[0]));
			fRec123[0] = fTemp173 - fConst506 * (fConst509 * fRec123[2] + fConst510 * fRec123[1]);
			fRec122[0] = fConst506 * (fConst508 * fRec123[0] + fConst511 * fRec123[1] + fConst508 * fRec123[2]) - fConst504 * (fConst512 * fRec122[2] + fConst513 * fRec122[1]);
			fRec121[0] = fConst504 * (fConst505 * fRec122[0] + fConst514 * fRec122[1] + fConst505 * fRec122[2]) - fConst502 * (fConst515 * fRec121[2] + fConst516 * fRec121[1]);
			float fTemp174 = fConst502 * (fConst503 * fRec121[0] + fConst517 * fRec121[1] + fConst503 * fRec121[2]);
			fRec120[0] = fTemp174 - fConst499 * (fConst518 * fRec120[2] + fConst520 * fRec120[1]);
			fRec119[0] = fConst499 * (fConst501 * fRec120[0] + fConst521 * fRec120[1] + fConst501 * fRec120[2]) - fConst496 * (fConst522 * fRec119[2] + fConst523 * fRec119[1]);
			fRec118[0] = fConst496 * (fConst498 * fRec119[0] + fConst524 * fRec119[1] + fConst498 * fRec119[2]) - fConst492 * (fConst525 * fRec118[2] + fConst526 * fRec118[1]);
			fRec117[0] = fSlow2 * fRec117[1] + fSlow43 * std::fabs(fConst492 * (fConst495 * fRec118[0] + fConst527 * fRec118[1] + fConst495 * fRec118[2]));
			fVbargraph13 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec117[0]));
			fRec127[0] = fTemp174 - fConst532 * (fConst535 * fRec127[2] + fConst536 * fRec127[1]);
			fRec126[0] = fConst532 * (fConst534 * fRec127[0] + fConst537 * fRec127[1] + fConst534 * fRec127[2]) - fConst530 * (fConst538 * fRec126[2] + fConst539 * fRec126[1]);
			fRec125[0] = fConst530 * (fConst531 * fRec126[0] + fConst540 * fRec126[1] + fConst531 * fRec126[2]) - fConst528 * (fConst541 * fRec125[2] + fConst542 * fRec125[1]);
			fRec124[0] = fSlow2 * fRec124[1] + fSlow43 * std::fabs(fConst528 * (fConst529 * fRec125[0] + fConst543 * fRec125[1] + fConst529 * fRec125[2]));
			fVbargraph14 = FAUSTFLOAT(fSlow0 + 2e+01f * std::log10(fRec124[0]));
			float fTemp175 = fTemp7 * (fTemp73 / fTemp68 + fTemp45 / fTemp40 + fTemp59 / fTemp54);
			float fTemp176 = fTemp2 + fRec11[0] * (fConst0 * (fSlow22 * (fSlow25 * (fTemp9 * (fTemp108 / fTemp68 + fTemp84 / fTemp40 + fTemp96 / fTemp54) - (fTemp117 + fTemp114 + fTemp105 + fTemp102 + fTemp90 + fTemp93)) + fSlow27 * (fTemp175 - (fTemp123 + fTemp122 + fTemp121 + fTemp120 + fTemp118 + fTemp119))) + fSlow44 * (fTemp175 - (fTemp79 + fTemp78 + fTemp65 + fTemp64 + fTemp50 + fTemp51))) + fTemp124 + fTemp38 + fTemp81);
			float fTemp177 = fTemp134 + 2.0f;
			float fTemp178 = fSlow40 + (fSlow39 + fTemp177) / fTemp133 + 1.0f;
			float fTemp179 = (fSlow40 + (1.0f - (fSlow39 + (2.0f - fTemp134)) / fTemp133)) / fTemp178;
			float fTemp180 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp179));
			float fTemp181 = 1.0f - mydsp_faustpower2_f(fTemp180);
			float fTemp182 = 1.0f - fTemp142 / fTemp178;
			float fTemp183 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp142 / (fTemp178 * (fTemp179 + 1.0f)))));
			float fTemp184 = fSlow38 + ((fTemp177 - fSlow39) / fTemp133 + 1.0f - fSlow39);
			float fTemp185 = (fSlow38 + ((fSlow39 + fTemp134 + -2.0f) / fTemp133 + 1.0f - fSlow39)) / fTemp184;
			float fTemp186 = std::max<float>(-0.9999f, std::min<float>(0.9999f, fTemp185));
			float fTemp187 = 1.0f - mydsp_faustpower2_f(fTemp186);
			float fTemp188 = 1.0f - fTemp155 / fTemp184;
			float fTemp189 = std::max<float>(-0.9999f, std::min<float>(0.9999f, 2.0f * (fTemp155 / (fTemp184 * (fTemp185 + 1.0f)))));
			float fTemp190 = ((iSlow3) ? fTemp176 : fRec4[0] * ((iSlow5) ? ((iSlow31) ? ((((iSlow3) ? 0.0f : fTemp176) * fTemp180 + fRec27[1] * std::sqrt(std::max<float>(0.0f, fTemp181)) + (fRec28 * (1.0f - (fTemp179 + 2.0f * fTemp182 * fTemp183)) / std::sqrt(1.0f - mydsp_faustpower2_f(fTemp183)) + 2.0f * fRec27[0] * fTemp182) / std::sqrt(fTemp181)) * fTemp186 / fTemp178 + fRec30[1] * std::sqrt(std::max<float>(0.0f, fTemp187)) + (fRec31 * (1.0f - (fTemp185 + 2.0f * fTemp188 * fTemp189)) / std::sqrt(1.0f - mydsp_faustpower2_f(fTemp189)) + 2.0f * fRec30[0] * fTemp188) / std::sqrt(fTemp187)) / fTemp184 : fTemp132 / (fSlow34 + ((fTemp128 + 2.0f - fSlow33) / fTemp127 + 1.0f - fSlow33))) : fRec5[0]));
			output0[i0] = FAUSTFLOAT(fTemp190);
			output1[i0] = FAUSTFLOAT(fTemp190);
			for (int j0 = 3; j0 > 0; j0 = j0 - 1) {
				iVec0[j0] = iVec0[j0 - 1];
			}
			fRec4[1] = fRec4[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			fRec13[1] = fRec13[0];
			fRec12[1] = fRec12[0];
			fVec1[1] = fVec1[0];
			fVec2[1] = fVec2[0];
			fVec3[1] = fVec3[0];
			fVec4[1] = fVec4[0];
			fVec5[1] = fVec5[0];
			fVec6[1] = fVec6[0];
			fRec14[1] = fRec14[0];
			fVec7[1] = fVec7[0];
			fVec8[1] = fVec8[0];
			fVec9[1] = fVec9[0];
			fVec10[1] = fVec10[0];
			fVec11[1] = fVec11[0];
			fVec12[1] = fVec12[0];
			fRec15[1] = fRec15[0];
			fVec13[1] = fVec13[0];
			fVec14[1] = fVec14[0];
			fVec15[1] = fVec15[0];
			fVec16[1] = fVec16[0];
			fVec17[1] = fVec17[0];
			fVec18[1] = fVec18[0];
			fRec16[1] = fRec16[0];
			fVec19[1] = fVec19[0];
			IOTA0 = IOTA0 + 1;
			fRec17[1] = fRec17[0];
			fVec21[1] = fVec21[0];
			fRec18[1] = fRec18[0];
			fVec23[1] = fVec23[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fVec25[1] = fVec25[0];
			fVec26[1] = fVec26[0];
			fRec22[1] = fRec22[0];
			fVec28[1] = fVec28[0];
			fVec29[1] = fVec29[0];
			fVec31[1] = fVec31[0];
			fVec32[1] = fVec32[0];
			iRec24[1] = iRec24[0];
			for (int j1 = 3; j1 > 0; j1 = j1 - 1) {
				fRec23[j1] = fRec23[j1 - 1];
			}
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			fRec26[2] = fRec26[1];
			fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1];
			fRec25[1] = fRec25[0];
			fRec29[1] = fRec29[0];
			fRec27[1] = fRec27[0];
			fRec32[1] = fRec32[0];
			fRec30[1] = fRec30[0];
			fRec3[2] = fRec3[1];
			fRec3[1] = fRec3[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
			fRec1[2] = fRec1[1];
			fRec1[1] = fRec1[0];
			fRec0[1] = fRec0[0];
			fRec39[2] = fRec39[1];
			fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1];
			fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1];
			fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1];
			fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1];
			fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1];
			fRec34[1] = fRec34[0];
			fRec33[1] = fRec33[0];
			fRec46[2] = fRec46[1];
			fRec46[1] = fRec46[0];
			fRec45[2] = fRec45[1];
			fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1];
			fRec44[1] = fRec44[0];
			fRec43[2] = fRec43[1];
			fRec43[1] = fRec43[0];
			fRec42[2] = fRec42[1];
			fRec42[1] = fRec42[0];
			fRec41[2] = fRec41[1];
			fRec41[1] = fRec41[0];
			fRec40[1] = fRec40[0];
			fRec53[2] = fRec53[1];
			fRec53[1] = fRec53[0];
			fRec52[2] = fRec52[1];
			fRec52[1] = fRec52[0];
			fRec51[2] = fRec51[1];
			fRec51[1] = fRec51[0];
			fRec50[2] = fRec50[1];
			fRec50[1] = fRec50[0];
			fRec49[2] = fRec49[1];
			fRec49[1] = fRec49[0];
			fRec48[2] = fRec48[1];
			fRec48[1] = fRec48[0];
			fRec47[1] = fRec47[0];
			fRec60[2] = fRec60[1];
			fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1];
			fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1];
			fRec58[1] = fRec58[0];
			fRec57[2] = fRec57[1];
			fRec57[1] = fRec57[0];
			fRec56[2] = fRec56[1];
			fRec56[1] = fRec56[0];
			fRec55[2] = fRec55[1];
			fRec55[1] = fRec55[0];
			fRec54[1] = fRec54[0];
			fRec67[2] = fRec67[1];
			fRec67[1] = fRec67[0];
			fRec66[2] = fRec66[1];
			fRec66[1] = fRec66[0];
			fRec65[2] = fRec65[1];
			fRec65[1] = fRec65[0];
			fRec64[2] = fRec64[1];
			fRec64[1] = fRec64[0];
			fRec63[2] = fRec63[1];
			fRec63[1] = fRec63[0];
			fRec62[2] = fRec62[1];
			fRec62[1] = fRec62[0];
			fRec61[1] = fRec61[0];
			fRec74[2] = fRec74[1];
			fRec74[1] = fRec74[0];
			fRec73[2] = fRec73[1];
			fRec73[1] = fRec73[0];
			fRec72[2] = fRec72[1];
			fRec72[1] = fRec72[0];
			fRec71[2] = fRec71[1];
			fRec71[1] = fRec71[0];
			fRec70[2] = fRec70[1];
			fRec70[1] = fRec70[0];
			fRec69[2] = fRec69[1];
			fRec69[1] = fRec69[0];
			fRec68[1] = fRec68[0];
			fRec81[2] = fRec81[1];
			fRec81[1] = fRec81[0];
			fRec80[2] = fRec80[1];
			fRec80[1] = fRec80[0];
			fRec79[2] = fRec79[1];
			fRec79[1] = fRec79[0];
			fRec78[2] = fRec78[1];
			fRec78[1] = fRec78[0];
			fRec77[2] = fRec77[1];
			fRec77[1] = fRec77[0];
			fRec76[2] = fRec76[1];
			fRec76[1] = fRec76[0];
			fRec75[1] = fRec75[0];
			fRec88[2] = fRec88[1];
			fRec88[1] = fRec88[0];
			fRec87[2] = fRec87[1];
			fRec87[1] = fRec87[0];
			fRec86[2] = fRec86[1];
			fRec86[1] = fRec86[0];
			fRec85[2] = fRec85[1];
			fRec85[1] = fRec85[0];
			fRec84[2] = fRec84[1];
			fRec84[1] = fRec84[0];
			fRec83[2] = fRec83[1];
			fRec83[1] = fRec83[0];
			fRec82[1] = fRec82[0];
			fRec95[2] = fRec95[1];
			fRec95[1] = fRec95[0];
			fRec94[2] = fRec94[1];
			fRec94[1] = fRec94[0];
			fRec93[2] = fRec93[1];
			fRec93[1] = fRec93[0];
			fRec92[2] = fRec92[1];
			fRec92[1] = fRec92[0];
			fRec91[2] = fRec91[1];
			fRec91[1] = fRec91[0];
			fRec90[2] = fRec90[1];
			fRec90[1] = fRec90[0];
			fRec89[1] = fRec89[0];
			fRec102[2] = fRec102[1];
			fRec102[1] = fRec102[0];
			fRec101[2] = fRec101[1];
			fRec101[1] = fRec101[0];
			fRec100[2] = fRec100[1];
			fRec100[1] = fRec100[0];
			fRec99[2] = fRec99[1];
			fRec99[1] = fRec99[0];
			fRec98[2] = fRec98[1];
			fRec98[1] = fRec98[0];
			fRec97[2] = fRec97[1];
			fRec97[1] = fRec97[0];
			fRec96[1] = fRec96[0];
			fRec109[2] = fRec109[1];
			fRec109[1] = fRec109[0];
			fRec108[2] = fRec108[1];
			fRec108[1] = fRec108[0];
			fRec107[2] = fRec107[1];
			fRec107[1] = fRec107[0];
			fRec106[2] = fRec106[1];
			fRec106[1] = fRec106[0];
			fRec105[2] = fRec105[1];
			fRec105[1] = fRec105[0];
			fRec104[2] = fRec104[1];
			fRec104[1] = fRec104[0];
			fRec103[1] = fRec103[0];
			fRec116[2] = fRec116[1];
			fRec116[1] = fRec116[0];
			fRec115[2] = fRec115[1];
			fRec115[1] = fRec115[0];
			fRec114[2] = fRec114[1];
			fRec114[1] = fRec114[0];
			fRec113[2] = fRec113[1];
			fRec113[1] = fRec113[0];
			fRec112[2] = fRec112[1];
			fRec112[1] = fRec112[0];
			fRec111[2] = fRec111[1];
			fRec111[1] = fRec111[0];
			fRec110[1] = fRec110[0];
			fRec123[2] = fRec123[1];
			fRec123[1] = fRec123[0];
			fRec122[2] = fRec122[1];
			fRec122[1] = fRec122[0];
			fRec121[2] = fRec121[1];
			fRec121[1] = fRec121[0];
			fRec120[2] = fRec120[1];
			fRec120[1] = fRec120[0];
			fRec119[2] = fRec119[1];
			fRec119[1] = fRec119[0];
			fRec118[2] = fRec118[1];
			fRec118[1] = fRec118[0];
			fRec117[1] = fRec117[0];
			fRec127[2] = fRec127[1];
			fRec127[1] = fRec127[0];
			fRec126[2] = fRec126[1];
			fRec126[1] = fRec126[0];
			fRec125[2] = fRec125[1];
			fRec125[1] = fRec125[0];
			fRec124[1] = fRec124[0];
		}
	}

};

#endif
