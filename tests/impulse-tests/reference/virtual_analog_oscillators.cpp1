//----------------------------------------------------------
// name: "virtual_analog_oscillators"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec10SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec15SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec15SEState; // Single Delay
	float 	fVec17SEState; // Single Delay
	float 	fVec18SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec22SEState; // Single Delay
	float 	fVec24SEState; // Single Delay
	float 	fVec25SEState; // Single Delay
	float 	fVec27SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec28SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	float 	fVec31SEState; // Single Delay
	float 	fVec32SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec35SEState; // Single Delay
	float 	fVec37SEState; // Single Delay
	float 	fVec39SEState; // Single Delay
	// Recursion delay fVec40SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec40SEState; // Single Delay
	float 	fVec42SEState; // Single Delay
	// Recursion delay fVec43SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec43SEState; // Single Delay
	float 	fVec45SEState; // Single Delay
	// Recursion delay fVec46SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec46SEState; // Single Delay
	float 	fVec48SEState; // Single Delay
	float 	fVec49SEState; // Single Delay
	float 	fVec50SEState; // Single Delay
	float 	fVec52SEState; // Single Delay
	float 	fVec54SEState; // Single Delay
	float 	fVec55SEState; // Single Delay
	float 	fVec56SEState; // Single Delay
	float 	fVec58SEState; // Single Delay
	float 	fVec60SEState; // Single Delay
	float 	fVec61SEState; // Single Delay
	float 	fVec62SEState; // Single Delay
	float 	fVec64SEState; // Single Delay
	float 	fVec66SEState; // Single Delay
	// Recursion delay iVec68SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec68SIState; // Single Delay
	// Recursion delay fVec70SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec70SIState; // Single Delay
	float 	fVec67SIState[3]; // Copy Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	// Recursion delay fVec73SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec73SEState; // Single Delay
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 346
	float 	fConst3KI; // step: 359
	float 	fConst4KI; // step: 374
	FAUSTFLOAT 	fslider7;
	float 	fConst5KI; // step: 442
	int 	IOTA0;
	float 	fVec92SE[4096]; // Ring Delay
	float 	fConst6KI; // step: 452
	float 	fVec96SE[4096]; // Ring Delay
	float 	fVec100SE[4096]; // Ring Delay
	FAUSTFLOAT 	fslider8;
	float 	fConst7KI; // step: 523
	// Recursion delay fVec103SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec103SEState; // Single Delay
	// Recursion delay fVec105SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec105SEState; // Single Delay
	// Recursion delay fVec107SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec107SEState; // Single Delay
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fcheckbox1;
	float 	fConst8KI; // step: 558
	FAUSTFLOAT 	fslider10;
	// Recursion delay fVec110SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec110SEState; // Single Delay
	float 	fVec113SE[4096]; // Ring Delay
	float 	fVec118SE[4096]; // Ring Delay
	float 	fVec123SE[4096]; // Ring Delay
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fConst9KI; // step: 713
	FAUSTFLOAT 	fslider13;
	// Recursion delay fVec134SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec134SEState; // Single Delay
	// Recursion delay fVec136SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec136SEState; // Single Delay
	float 	fVec137SEState[2]; // Copy Delay
	// Recursion delay fVec142SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec142SEState; // Single Delay
	float 	fVec141SEState[2]; // Copy Delay
	// Recursion delay fVec145SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec145SEState; // Single Delay
	float 	fVec146SEState; // Single Delay
	// Recursion delay fVec144SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec144SEState; // Single Delay
	float 	fVec148SEState; // Single Delay
	// Recursion delay fRec19SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	// Recursion delay fVec154SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec154SEState; // Single Delay
	float 	fVec155SEState; // Single Delay
	// Recursion delay fVec153SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec153SEState; // Single Delay
	float 	fVec157SEState; // Single Delay
	FAUSTFLOAT 	fslider14;
	// Recursion delay fVec158SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec158SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox2;
	float 	fConst10KI; // step: 941
	// Recursion delay fVec160SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec160SEState; // Single Delay
	// Recursion delay fVec163SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec163SEState; // Single Delay
	// Recursion delay fVec165SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec165SEState; // Single Delay
	// Recursion delay fVec167SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec167SEState; // Single Delay
	// Recursion delay fVec161SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec161SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox3;
	// Recursion delay fRec28SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fConst11KI; // step: 1031
	float 	fConst12KI; // step: 1033
	float 	fConst13KI; // step: 1037
	float 	fConst14KI; // step: 1041
	float 	fConst15KI; // step: 1044
	float 	fConst16KI; // step: 1045
	float 	fConst17KI; // step: 1048
	// Recursion delay fVec177SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec177SEState; // Single Delay
	float 	fVec176SEState[2]; // Copy Delay
	float 	fConst18KI; // step: 1060
	float 	fConst19KI; // step: 1061
	float 	fConst20KI; // step: 1066
	float 	fConst21KI; // step: 1077
	float 	fConst22KI; // step: 1081
	float 	fConst23KI; // step: 1085
	// Recursion delay fVec182SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec182SEState; // Single Delay
	float 	fVec181SEState[2]; // Copy Delay
	float 	fConst24KI; // step: 1096
	float 	fConst25KI; // step: 1097
	float 	fConst26KI; // step: 1102
	float 	fConst27KI; // step: 1113
	float 	fConst28KI; // step: 1117
	float 	fConst29KI; // step: 1121
	// Recursion delay fVec187SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec187SEState; // Single Delay
	float 	fVec186SEState[2]; // Copy Delay
	float 	fConst30KI; // step: 1136
	float 	fConst31KI; // step: 1140
	float 	fConst32KI; // step: 1144
	// Recursion delay fVec190SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec190SEState; // Single Delay
	float 	fVec189SEState[2]; // Copy Delay
	float 	fConst33KI; // step: 1156
	float 	fConst34KI; // step: 1157
	float 	fConst35KI; // step: 1162
	float 	fConst36KI; // step: 1173
	float 	fConst37KI; // step: 1177
	float 	fConst38KI; // step: 1181
	// Recursion delay fVec195SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec195SEState; // Single Delay
	float 	fVec194SEState[2]; // Copy Delay
	float 	fConst39KI; // step: 1192
	float 	fConst40KI; // step: 1196
	float 	fConst41KI; // step: 1207
	float 	fConst42KI; // step: 1211
	float 	fConst43KI; // step: 1215
	// Recursion delay fVec200SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec200SEState; // Single Delay
	float 	fVec199SEState[2]; // Copy Delay
	float 	fConst44KI; // step: 1226
	float 	fConst45KI; // step: 1230
	float 	fConst46KI; // step: 1238
	float 	fConst47KI; // step: 1239
	float 	fConst48KI; // step: 1243
	float 	fConst49KI; // step: 1246
	float 	fConst50KI; // step: 1249
	float 	fConst51KI; // step: 1250
	float 	fConst52KI; // step: 1253
	// Recursion delay fVec205SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec205SEState; // Single Delay
	float 	fVec204SEState[2]; // Copy Delay
	float 	fConst53KI; // step: 1263
	float 	fConst54KI; // step: 1264
	float 	fConst55KI; // step: 1269
	float 	fConst56KI; // step: 1278
	float 	fConst57KI; // step: 1281
	float 	fConst58KI; // step: 1285
	// Recursion delay fVec210SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec210SEState; // Single Delay
	float 	fVec209SEState[2]; // Copy Delay
	float 	fConst59KI; // step: 1295
	float 	fConst60KI; // step: 1296
	float 	fConst61KI; // step: 1301
	float 	fConst62KI; // step: 1310
	float 	fConst63KI; // step: 1313
	float 	fConst64KI; // step: 1317
	// Recursion delay fVec215SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec215SEState; // Single Delay
	float 	fVec214SEState[2]; // Copy Delay
	float 	fConst65KI; // step: 1330
	float 	fConst66KI; // step: 1333
	float 	fConst67KI; // step: 1337
	// Recursion delay fVec218SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec218SEState; // Single Delay
	float 	fVec217SEState[2]; // Copy Delay
	float 	fConst68KI; // step: 1347
	float 	fConst69KI; // step: 1348
	float 	fConst70KI; // step: 1353
	float 	fConst71KI; // step: 1362
	float 	fConst72KI; // step: 1365
	float 	fConst73KI; // step: 1369
	// Recursion delay fVec223SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec223SEState; // Single Delay
	float 	fVec222SEState[2]; // Copy Delay
	float 	fConst74KI; // step: 1379
	float 	fConst75KI; // step: 1383
	float 	fConst76KI; // step: 1392
	float 	fConst77KI; // step: 1395
	float 	fConst78KI; // step: 1399
	// Recursion delay fVec228SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec228SEState; // Single Delay
	float 	fVec227SEState[2]; // Copy Delay
	float 	fConst79KI; // step: 1409
	float 	fConst80KI; // step: 1413
	float 	fConst81KI; // step: 1421
	float 	fConst82KI; // step: 1422
	float 	fConst83KI; // step: 1426
	float 	fConst84KI; // step: 1429
	float 	fConst85KI; // step: 1432
	float 	fConst86KI; // step: 1433
	float 	fConst87KI; // step: 1436
	// Recursion delay fVec233SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec233SEState; // Single Delay
	float 	fVec232SEState[2]; // Copy Delay
	float 	fConst88KI; // step: 1446
	float 	fConst89KI; // step: 1447
	float 	fConst90KI; // step: 1452
	float 	fConst91KI; // step: 1461
	float 	fConst92KI; // step: 1464
	float 	fConst93KI; // step: 1468
	// Recursion delay fVec238SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec238SEState; // Single Delay
	float 	fVec237SEState[2]; // Copy Delay
	float 	fConst94KI; // step: 1478
	float 	fConst95KI; // step: 1479
	float 	fConst96KI; // step: 1484
	float 	fConst97KI; // step: 1493
	float 	fConst98KI; // step: 1496
	float 	fConst99KI; // step: 1500
	// Recursion delay fVec243SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec243SEState; // Single Delay
	float 	fVec242SEState[2]; // Copy Delay
	float 	fConst100KI; // step: 1513
	float 	fConst101KI; // step: 1516
	float 	fConst102KI; // step: 1520
	// Recursion delay fVec246SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec246SEState; // Single Delay
	float 	fVec245SEState[2]; // Copy Delay
	float 	fConst103KI; // step: 1530
	float 	fConst104KI; // step: 1531
	float 	fConst105KI; // step: 1536
	float 	fConst106KI; // step: 1545
	float 	fConst107KI; // step: 1548
	float 	fConst108KI; // step: 1552
	// Recursion delay fVec251SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec251SEState; // Single Delay
	float 	fVec250SEState[2]; // Copy Delay
	float 	fConst109KI; // step: 1562
	float 	fConst110KI; // step: 1566
	float 	fConst111KI; // step: 1575
	float 	fConst112KI; // step: 1578
	float 	fConst113KI; // step: 1582
	// Recursion delay fVec256SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec256SEState; // Single Delay
	float 	fVec255SEState[2]; // Copy Delay
	float 	fConst114KI; // step: 1592
	float 	fConst115KI; // step: 1596
	float 	fConst116KI; // step: 1604
	float 	fConst117KI; // step: 1605
	float 	fConst118KI; // step: 1609
	float 	fConst119KI; // step: 1612
	float 	fConst120KI; // step: 1615
	float 	fConst121KI; // step: 1616
	float 	fConst122KI; // step: 1619
	// Recursion delay fVec261SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec261SEState; // Single Delay
	float 	fVec260SEState[2]; // Copy Delay
	float 	fConst123KI; // step: 1629
	float 	fConst124KI; // step: 1630
	float 	fConst125KI; // step: 1635
	float 	fConst126KI; // step: 1644
	float 	fConst127KI; // step: 1647
	float 	fConst128KI; // step: 1651
	// Recursion delay fVec266SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec266SEState; // Single Delay
	float 	fVec265SEState[2]; // Copy Delay
	float 	fConst129KI; // step: 1661
	float 	fConst130KI; // step: 1662
	float 	fConst131KI; // step: 1667
	float 	fConst132KI; // step: 1676
	float 	fConst133KI; // step: 1679
	float 	fConst134KI; // step: 1683
	// Recursion delay fVec271SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec271SEState; // Single Delay
	float 	fVec270SEState[2]; // Copy Delay
	float 	fConst135KI; // step: 1696
	float 	fConst136KI; // step: 1699
	float 	fConst137KI; // step: 1703
	// Recursion delay fVec274SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec274SEState; // Single Delay
	float 	fVec273SEState[2]; // Copy Delay
	float 	fConst138KI; // step: 1713
	float 	fConst139KI; // step: 1714
	float 	fConst140KI; // step: 1719
	float 	fConst141KI; // step: 1728
	float 	fConst142KI; // step: 1731
	float 	fConst143KI; // step: 1735
	// Recursion delay fVec279SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec279SEState; // Single Delay
	float 	fVec278SEState[2]; // Copy Delay
	float 	fConst144KI; // step: 1745
	float 	fConst145KI; // step: 1749
	float 	fConst146KI; // step: 1758
	float 	fConst147KI; // step: 1761
	float 	fConst148KI; // step: 1765
	// Recursion delay fVec284SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec284SEState; // Single Delay
	float 	fVec283SEState[2]; // Copy Delay
	float 	fConst149KI; // step: 1775
	float 	fConst150KI; // step: 1779
	float 	fConst151KI; // step: 1787
	float 	fConst152KI; // step: 1788
	float 	fConst153KI; // step: 1792
	float 	fConst154KI; // step: 1795
	float 	fConst155KI; // step: 1798
	float 	fConst156KI; // step: 1799
	float 	fConst157KI; // step: 1802
	// Recursion delay fVec289SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec289SEState; // Single Delay
	float 	fVec288SEState[2]; // Copy Delay
	float 	fConst158KI; // step: 1812
	float 	fConst159KI; // step: 1813
	float 	fConst160KI; // step: 1818
	float 	fConst161KI; // step: 1827
	float 	fConst162KI; // step: 1830
	float 	fConst163KI; // step: 1834
	// Recursion delay fVec294SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec294SEState; // Single Delay
	float 	fVec293SEState[2]; // Copy Delay
	float 	fConst164KI; // step: 1844
	float 	fConst165KI; // step: 1845
	float 	fConst166KI; // step: 1850
	float 	fConst167KI; // step: 1859
	float 	fConst168KI; // step: 1862
	float 	fConst169KI; // step: 1866
	// Recursion delay fVec299SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec299SEState; // Single Delay
	float 	fVec298SEState[2]; // Copy Delay
	float 	fConst170KI; // step: 1879
	float 	fConst171KI; // step: 1882
	float 	fConst172KI; // step: 1886
	// Recursion delay fVec302SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec302SEState; // Single Delay
	float 	fVec301SEState[2]; // Copy Delay
	float 	fConst173KI; // step: 1896
	float 	fConst174KI; // step: 1897
	float 	fConst175KI; // step: 1902
	float 	fConst176KI; // step: 1911
	float 	fConst177KI; // step: 1914
	float 	fConst178KI; // step: 1918
	// Recursion delay fVec307SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec307SEState; // Single Delay
	float 	fVec306SEState[2]; // Copy Delay
	float 	fConst179KI; // step: 1928
	float 	fConst180KI; // step: 1932
	float 	fConst181KI; // step: 1941
	float 	fConst182KI; // step: 1944
	float 	fConst183KI; // step: 1948
	// Recursion delay fVec312SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec312SEState; // Single Delay
	float 	fVec311SEState[2]; // Copy Delay
	float 	fConst184KI; // step: 1958
	float 	fConst185KI; // step: 1962
	float 	fConst186KI; // step: 1970
	float 	fConst187KI; // step: 1971
	float 	fConst188KI; // step: 1975
	float 	fConst189KI; // step: 1978
	float 	fConst190KI; // step: 1981
	float 	fConst191KI; // step: 1982
	float 	fConst192KI; // step: 1985
	// Recursion delay fVec317SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec317SEState; // Single Delay
	float 	fVec316SEState[2]; // Copy Delay
	float 	fConst193KI; // step: 1995
	float 	fConst194KI; // step: 1996
	float 	fConst195KI; // step: 2001
	float 	fConst196KI; // step: 2010
	float 	fConst197KI; // step: 2013
	float 	fConst198KI; // step: 2017
	// Recursion delay fVec322SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec322SEState; // Single Delay
	float 	fVec321SEState[2]; // Copy Delay
	float 	fConst199KI; // step: 2027
	float 	fConst200KI; // step: 2028
	float 	fConst201KI; // step: 2033
	float 	fConst202KI; // step: 2042
	float 	fConst203KI; // step: 2045
	float 	fConst204KI; // step: 2049
	// Recursion delay fVec327SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec327SEState; // Single Delay
	float 	fVec326SEState[2]; // Copy Delay
	float 	fConst205KI; // step: 2062
	float 	fConst206KI; // step: 2065
	float 	fConst207KI; // step: 2069
	// Recursion delay fVec330SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec330SEState; // Single Delay
	float 	fVec329SEState[2]; // Copy Delay
	float 	fConst208KI; // step: 2079
	float 	fConst209KI; // step: 2080
	float 	fConst210KI; // step: 2085
	float 	fConst211KI; // step: 2094
	float 	fConst212KI; // step: 2097
	float 	fConst213KI; // step: 2101
	// Recursion delay fVec335SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec335SEState; // Single Delay
	float 	fVec334SEState[2]; // Copy Delay
	float 	fConst214KI; // step: 2111
	float 	fConst215KI; // step: 2115
	float 	fConst216KI; // step: 2124
	float 	fConst217KI; // step: 2127
	float 	fConst218KI; // step: 2131
	// Recursion delay fVec340SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec340SEState; // Single Delay
	float 	fVec339SEState[2]; // Copy Delay
	float 	fConst219KI; // step: 2141
	float 	fConst220KI; // step: 2145
	float 	fConst221KI; // step: 2153
	float 	fConst222KI; // step: 2154
	float 	fConst223KI; // step: 2158
	float 	fConst224KI; // step: 2161
	float 	fConst225KI; // step: 2164
	float 	fConst226KI; // step: 2165
	float 	fConst227KI; // step: 2168
	// Recursion delay fVec345SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec345SEState; // Single Delay
	float 	fVec344SEState[2]; // Copy Delay
	float 	fConst228KI; // step: 2178
	float 	fConst229KI; // step: 2179
	float 	fConst230KI; // step: 2184
	float 	fConst231KI; // step: 2193
	float 	fConst232KI; // step: 2196
	float 	fConst233KI; // step: 2200
	// Recursion delay fVec350SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec350SEState; // Single Delay
	float 	fVec349SEState[2]; // Copy Delay
	float 	fConst234KI; // step: 2210
	float 	fConst235KI; // step: 2211
	float 	fConst236KI; // step: 2216
	float 	fConst237KI; // step: 2225
	float 	fConst238KI; // step: 2228
	float 	fConst239KI; // step: 2232
	// Recursion delay fVec355SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec355SEState; // Single Delay
	float 	fVec354SEState[2]; // Copy Delay
	float 	fConst240KI; // step: 2245
	float 	fConst241KI; // step: 2248
	float 	fConst242KI; // step: 2252
	// Recursion delay fVec358SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec358SEState; // Single Delay
	float 	fVec357SEState[2]; // Copy Delay
	float 	fConst243KI; // step: 2262
	float 	fConst244KI; // step: 2263
	float 	fConst245KI; // step: 2268
	float 	fConst246KI; // step: 2277
	float 	fConst247KI; // step: 2280
	float 	fConst248KI; // step: 2284
	// Recursion delay fVec363SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec363SEState; // Single Delay
	float 	fVec362SEState[2]; // Copy Delay
	float 	fConst249KI; // step: 2294
	float 	fConst250KI; // step: 2298
	float 	fConst251KI; // step: 2307
	float 	fConst252KI; // step: 2310
	float 	fConst253KI; // step: 2314
	// Recursion delay fVec368SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec368SEState; // Single Delay
	float 	fVec367SEState[2]; // Copy Delay
	float 	fConst254KI; // step: 2324
	float 	fConst255KI; // step: 2328
	float 	fConst256KI; // step: 2336
	float 	fConst257KI; // step: 2337
	float 	fConst258KI; // step: 2341
	float 	fConst259KI; // step: 2344
	float 	fConst260KI; // step: 2347
	float 	fConst261KI; // step: 2348
	float 	fConst262KI; // step: 2351
	// Recursion delay fVec373SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec373SEState; // Single Delay
	float 	fVec372SEState[2]; // Copy Delay
	float 	fConst263KI; // step: 2361
	float 	fConst264KI; // step: 2362
	float 	fConst265KI; // step: 2367
	float 	fConst266KI; // step: 2376
	float 	fConst267KI; // step: 2379
	float 	fConst268KI; // step: 2383
	// Recursion delay fVec378SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec378SEState; // Single Delay
	float 	fVec377SEState[2]; // Copy Delay
	float 	fConst269KI; // step: 2393
	float 	fConst270KI; // step: 2394
	float 	fConst271KI; // step: 2399
	float 	fConst272KI; // step: 2408
	float 	fConst273KI; // step: 2411
	float 	fConst274KI; // step: 2415
	// Recursion delay fVec383SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec383SEState; // Single Delay
	float 	fVec382SEState[2]; // Copy Delay
	float 	fConst275KI; // step: 2428
	float 	fConst276KI; // step: 2431
	float 	fConst277KI; // step: 2435
	// Recursion delay fVec386SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec386SEState; // Single Delay
	float 	fVec385SEState[2]; // Copy Delay
	float 	fConst278KI; // step: 2445
	float 	fConst279KI; // step: 2446
	float 	fConst280KI; // step: 2451
	float 	fConst281KI; // step: 2460
	float 	fConst282KI; // step: 2463
	float 	fConst283KI; // step: 2467
	// Recursion delay fVec391SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec391SEState; // Single Delay
	float 	fVec390SEState[2]; // Copy Delay
	float 	fConst284KI; // step: 2477
	float 	fConst285KI; // step: 2481
	float 	fConst286KI; // step: 2490
	float 	fConst287KI; // step: 2493
	float 	fConst288KI; // step: 2497
	// Recursion delay fVec396SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec396SEState; // Single Delay
	float 	fVec395SEState[2]; // Copy Delay
	float 	fConst289KI; // step: 2507
	float 	fConst290KI; // step: 2511
	float 	fConst291KI; // step: 2519
	float 	fConst292KI; // step: 2520
	float 	fConst293KI; // step: 2524
	float 	fConst294KI; // step: 2527
	float 	fConst295KI; // step: 2530
	float 	fConst296KI; // step: 2531
	float 	fConst297KI; // step: 2534
	// Recursion delay fVec401SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec401SEState; // Single Delay
	float 	fVec400SEState[2]; // Copy Delay
	float 	fConst298KI; // step: 2544
	float 	fConst299KI; // step: 2545
	float 	fConst300KI; // step: 2550
	float 	fConst301KI; // step: 2559
	float 	fConst302KI; // step: 2562
	float 	fConst303KI; // step: 2566
	// Recursion delay fVec406SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec406SEState; // Single Delay
	float 	fVec405SEState[2]; // Copy Delay
	float 	fConst304KI; // step: 2576
	float 	fConst305KI; // step: 2577
	float 	fConst306KI; // step: 2582
	float 	fConst307KI; // step: 2591
	float 	fConst308KI; // step: 2594
	float 	fConst309KI; // step: 2598
	// Recursion delay fVec411SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec411SEState; // Single Delay
	float 	fVec410SEState[2]; // Copy Delay
	float 	fConst310KI; // step: 2611
	float 	fConst311KI; // step: 2614
	float 	fConst312KI; // step: 2618
	// Recursion delay fVec414SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec414SEState; // Single Delay
	float 	fVec413SEState[2]; // Copy Delay
	float 	fConst313KI; // step: 2628
	float 	fConst314KI; // step: 2629
	float 	fConst315KI; // step: 2634
	float 	fConst316KI; // step: 2643
	float 	fConst317KI; // step: 2646
	float 	fConst318KI; // step: 2650
	// Recursion delay fVec419SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec419SEState; // Single Delay
	float 	fVec418SEState[2]; // Copy Delay
	float 	fConst319KI; // step: 2660
	float 	fConst320KI; // step: 2664
	float 	fConst321KI; // step: 2673
	float 	fConst322KI; // step: 2676
	float 	fConst323KI; // step: 2680
	// Recursion delay fVec424SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec424SEState; // Single Delay
	float 	fVec423SEState[2]; // Copy Delay
	float 	fConst324KI; // step: 2690
	float 	fConst325KI; // step: 2694
	float 	fConst326KI; // step: 2702
	float 	fConst327KI; // step: 2703
	float 	fConst328KI; // step: 2707
	float 	fConst329KI; // step: 2710
	float 	fConst330KI; // step: 2713
	float 	fConst331KI; // step: 2714
	float 	fConst332KI; // step: 2717
	// Recursion delay fVec429SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec429SEState; // Single Delay
	float 	fVec428SEState[2]; // Copy Delay
	float 	fConst333KI; // step: 2727
	float 	fConst334KI; // step: 2728
	float 	fConst335KI; // step: 2733
	float 	fConst336KI; // step: 2742
	float 	fConst337KI; // step: 2745
	float 	fConst338KI; // step: 2749
	// Recursion delay fVec434SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec434SEState; // Single Delay
	float 	fVec433SEState[2]; // Copy Delay
	float 	fConst339KI; // step: 2759
	float 	fConst340KI; // step: 2760
	float 	fConst341KI; // step: 2765
	float 	fConst342KI; // step: 2774
	float 	fConst343KI; // step: 2777
	float 	fConst344KI; // step: 2781
	// Recursion delay fVec439SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec439SEState; // Single Delay
	float 	fVec438SEState[2]; // Copy Delay
	float 	fConst345KI; // step: 2794
	float 	fConst346KI; // step: 2797
	float 	fConst347KI; // step: 2801
	// Recursion delay fVec442SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec442SEState; // Single Delay
	float 	fVec441SEState[2]; // Copy Delay
	float 	fConst348KI; // step: 2811
	float 	fConst349KI; // step: 2812
	float 	fConst350KI; // step: 2817
	float 	fConst351KI; // step: 2826
	float 	fConst352KI; // step: 2829
	float 	fConst353KI; // step: 2833
	// Recursion delay fVec447SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec447SEState; // Single Delay
	float 	fVec446SEState[2]; // Copy Delay
	float 	fConst354KI; // step: 2843
	float 	fConst355KI; // step: 2847
	float 	fConst356KI; // step: 2856
	float 	fConst357KI; // step: 2859
	float 	fConst358KI; // step: 2863
	// Recursion delay fVec452SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec452SEState; // Single Delay
	float 	fVec451SEState[2]; // Copy Delay
	float 	fConst359KI; // step: 2873
	float 	fConst360KI; // step: 2877
	float 	fConst361KI; // step: 2885
	float 	fConst362KI; // step: 2886
	float 	fConst363KI; // step: 2890
	float 	fConst364KI; // step: 2893
	float 	fConst365KI; // step: 2896
	float 	fConst366KI; // step: 2897
	float 	fConst367KI; // step: 2900
	// Recursion delay fVec457SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec457SEState; // Single Delay
	float 	fVec456SEState[2]; // Copy Delay
	float 	fConst368KI; // step: 2910
	float 	fConst369KI; // step: 2911
	float 	fConst370KI; // step: 2916
	float 	fConst371KI; // step: 2925
	float 	fConst372KI; // step: 2928
	float 	fConst373KI; // step: 2932
	// Recursion delay fVec462SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec462SEState; // Single Delay
	float 	fVec461SEState[2]; // Copy Delay
	float 	fConst374KI; // step: 2942
	float 	fConst375KI; // step: 2943
	float 	fConst376KI; // step: 2948
	float 	fConst377KI; // step: 2957
	float 	fConst378KI; // step: 2960
	float 	fConst379KI; // step: 2964
	// Recursion delay fVec467SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec467SEState; // Single Delay
	float 	fVec466SEState[2]; // Copy Delay
	float 	fConst380KI; // step: 2977
	float 	fConst381KI; // step: 2980
	float 	fConst382KI; // step: 2984
	// Recursion delay fVec470SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec470SEState; // Single Delay
	float 	fVec469SEState[2]; // Copy Delay
	float 	fConst383KI; // step: 2994
	float 	fConst384KI; // step: 2995
	float 	fConst385KI; // step: 3000
	float 	fConst386KI; // step: 3009
	float 	fConst387KI; // step: 3012
	float 	fConst388KI; // step: 3016
	// Recursion delay fVec475SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec475SEState; // Single Delay
	float 	fVec474SEState[2]; // Copy Delay
	float 	fConst389KI; // step: 3026
	float 	fConst390KI; // step: 3030
	float 	fConst391KI; // step: 3039
	float 	fConst392KI; // step: 3042
	float 	fConst393KI; // step: 3046
	// Recursion delay fVec480SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec480SEState; // Single Delay
	float 	fVec479SEState[2]; // Copy Delay
	float 	fConst394KI; // step: 3056
	float 	fConst395KI; // step: 3060
	float 	fConst396KI; // step: 3068
	float 	fConst397KI; // step: 3069
	float 	fConst398KI; // step: 3073
	float 	fConst399KI; // step: 3076
	float 	fConst400KI; // step: 3079
	float 	fConst401KI; // step: 3080
	float 	fConst402KI; // step: 3083
	// Recursion delay fVec485SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec485SEState; // Single Delay
	float 	fVec484SEState[2]; // Copy Delay
	float 	fConst403KI; // step: 3093
	float 	fConst404KI; // step: 3094
	float 	fConst405KI; // step: 3099
	float 	fConst406KI; // step: 3108
	float 	fConst407KI; // step: 3111
	float 	fConst408KI; // step: 3115
	// Recursion delay fVec490SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec490SEState; // Single Delay
	float 	fVec489SEState[2]; // Copy Delay
	float 	fConst409KI; // step: 3125
	float 	fConst410KI; // step: 3126
	float 	fConst411KI; // step: 3131
	float 	fConst412KI; // step: 3140
	float 	fConst413KI; // step: 3143
	float 	fConst414KI; // step: 3147
	// Recursion delay fVec495SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec495SEState; // Single Delay
	float 	fVec494SEState[2]; // Copy Delay
	float 	fConst415KI; // step: 3160
	float 	fConst416KI; // step: 3163
	float 	fConst417KI; // step: 3167
	// Recursion delay fVec498SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec498SEState; // Single Delay
	float 	fVec497SEState[2]; // Copy Delay
	float 	fConst418KI; // step: 3177
	float 	fConst419KI; // step: 3178
	float 	fConst420KI; // step: 3183
	float 	fConst421KI; // step: 3192
	float 	fConst422KI; // step: 3195
	float 	fConst423KI; // step: 3199
	// Recursion delay fVec503SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec503SEState; // Single Delay
	float 	fVec502SEState[2]; // Copy Delay
	float 	fConst424KI; // step: 3209
	float 	fConst425KI; // step: 3213
	float 	fConst426KI; // step: 3222
	float 	fConst427KI; // step: 3225
	float 	fConst428KI; // step: 3229
	// Recursion delay fVec508SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec508SEState; // Single Delay
	float 	fVec507SEState[2]; // Copy Delay
	float 	fConst429KI; // step: 3239
	float 	fConst430KI; // step: 3243
	float 	fConst431KI; // step: 3251
	float 	fConst432KI; // step: 3252
	float 	fConst433KI; // step: 3256
	float 	fConst434KI; // step: 3259
	float 	fConst435KI; // step: 3262
	float 	fConst436KI; // step: 3263
	float 	fConst437KI; // step: 3266
	// Recursion delay fVec513SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec513SEState; // Single Delay
	float 	fVec512SEState[2]; // Copy Delay
	float 	fConst438KI; // step: 3276
	float 	fConst439KI; // step: 3277
	float 	fConst440KI; // step: 3282
	float 	fConst441KI; // step: 3291
	float 	fConst442KI; // step: 3294
	float 	fConst443KI; // step: 3298
	// Recursion delay fVec518SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec518SEState; // Single Delay
	float 	fVec517SEState[2]; // Copy Delay
	float 	fConst444KI; // step: 3308
	float 	fConst445KI; // step: 3309
	float 	fConst446KI; // step: 3314
	float 	fConst447KI; // step: 3323
	float 	fConst448KI; // step: 3326
	float 	fConst449KI; // step: 3330
	// Recursion delay fVec523SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec523SEState; // Single Delay
	float 	fVec522SEState[2]; // Copy Delay
	float 	fConst450KI; // step: 3343
	float 	fConst451KI; // step: 3346
	float 	fConst452KI; // step: 3350
	// Recursion delay fVec526SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec526SEState; // Single Delay
	float 	fVec525SEState[2]; // Copy Delay
	float 	fConst453KI; // step: 3360
	float 	fConst454KI; // step: 3361
	float 	fConst455KI; // step: 3366
	float 	fConst456KI; // step: 3375
	float 	fConst457KI; // step: 3378
	float 	fConst458KI; // step: 3382
	// Recursion delay fVec531SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec531SEState; // Single Delay
	float 	fVec530SEState[2]; // Copy Delay
	float 	fConst459KI; // step: 3392
	float 	fConst460KI; // step: 3396
	float 	fConst461KI; // step: 3405
	float 	fConst462KI; // step: 3408
	float 	fConst463KI; // step: 3412
	// Recursion delay fVec536SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec536SEState; // Single Delay
	float 	fVec535SEState[2]; // Copy Delay
	float 	fConst464KI; // step: 3422
	float 	fConst465KI; // step: 3426
	float 	fConst466KI; // step: 3434
	float 	fConst467KI; // step: 3435
	float 	fConst468KI; // step: 3439
	float 	fConst469KI; // step: 3442
	float 	fConst470KI; // step: 3445
	float 	fConst471KI; // step: 3446
	float 	fConst472KI; // step: 3449
	// Recursion delay fVec541SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec541SEState; // Single Delay
	float 	fVec540SEState[2]; // Copy Delay
	float 	fConst473KI; // step: 3459
	float 	fConst474KI; // step: 3460
	float 	fConst475KI; // step: 3465
	float 	fConst476KI; // step: 3474
	float 	fConst477KI; // step: 3477
	float 	fConst478KI; // step: 3481
	// Recursion delay fVec546SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec546SEState; // Single Delay
	float 	fVec545SEState[2]; // Copy Delay
	float 	fConst479KI; // step: 3491
	float 	fConst480KI; // step: 3492
	float 	fConst481KI; // step: 3497
	float 	fConst482KI; // step: 3506
	float 	fConst483KI; // step: 3509
	float 	fConst484KI; // step: 3513
	// Recursion delay fVec551SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec551SEState; // Single Delay
	float 	fVec550SEState[2]; // Copy Delay
	float 	fConst485KI; // step: 3526
	float 	fConst486KI; // step: 3529
	float 	fConst487KI; // step: 3533
	// Recursion delay fVec554SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec554SEState; // Single Delay
	float 	fVec553SEState[2]; // Copy Delay
	float 	fConst488KI; // step: 3543
	float 	fConst489KI; // step: 3544
	float 	fConst490KI; // step: 3549
	float 	fConst491KI; // step: 3558
	float 	fConst492KI; // step: 3561
	float 	fConst493KI; // step: 3565
	// Recursion delay fVec559SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec559SEState; // Single Delay
	float 	fVec558SEState[2]; // Copy Delay
	float 	fConst494KI; // step: 3575
	float 	fConst495KI; // step: 3579
	float 	fConst496KI; // step: 3588
	float 	fConst497KI; // step: 3591
	float 	fConst498KI; // step: 3595
	// Recursion delay fVec564SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec564SEState; // Single Delay
	float 	fVec563SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	float 	fConst499KI; // step: 3611
	float 	fConst500KI; // step: 3620
	float 	fConst501KI; // step: 3621
	float 	fConst502KI; // step: 3626
	// Recursion delay fVec566SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec566SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst503KI; // step: 3649
	float 	fConst504KI; // step: 3650
	float 	fConst505KI; // step: 3655
	// Recursion delay fVec570SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec570SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst506KI; // step: 3674
	float 	fConst507KI; // step: 3675
	float 	fConst508KI; // step: 3680
	// Recursion delay fVec574SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec574SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst509KI; // step: 3699
	float 	fConst510KI; // step: 3700
	float 	fConst511KI; // step: 3705
	// Recursion delay fVec578SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec578SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst512KI; // step: 3724
	float 	fConst513KI; // step: 3725
	float 	fConst514KI; // step: 3730
	// Recursion delay fVec582SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec582SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst515KI; // step: 3749
	float 	fConst516KI; // step: 3750
	float 	fConst517KI; // step: 3755
	// Recursion delay fVec586SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec586SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst518KI; // step: 3774
	float 	fConst519KI; // step: 3775
	float 	fConst520KI; // step: 3780
	// Recursion delay fVec590SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec590SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst521KI; // step: 3799
	float 	fConst522KI; // step: 3800
	float 	fConst523KI; // step: 3805
	// Recursion delay fVec594SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec594SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst524KI; // step: 3824
	float 	fConst525KI; // step: 3825
	float 	fConst526KI; // step: 3830
	// Recursion delay fVec598SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec598SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst527KI; // step: 3849
	float 	fConst528KI; // step: 3850
	float 	fConst529KI; // step: 3855
	// Recursion delay fVec602SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec602SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst530KI; // step: 3874
	float 	fConst531KI; // step: 3875
	float 	fConst532KI; // step: 3880
	// Recursion delay fVec606SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec606SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst533KI; // step: 3899
	float 	fConst534KI; // step: 3900
	float 	fConst535KI; // step: 3905
	// Recursion delay fVec610SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec610SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst536KI; // step: 3924
	float 	fConst537KI; // step: 3925
	float 	fConst538KI; // step: 3930
	// Recursion delay fVec614SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec614SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst539KI; // step: 3949
	float 	fConst540KI; // step: 3950
	float 	fConst541KI; // step: 3955
	// Recursion delay fVec618SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec618SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst542KI; // step: 3974
	float 	fConst543KI; // step: 3978
	// Recursion delay fVec622SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec622SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2b:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2b:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2b:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_2bn:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_2bn:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_2bn:license", "STK-4.3");
		m->declare("effect.lib/moog_vcf_demo:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/moog_vcf_demo:copyright", "Julius O. Smith III");
		m->declare("effect.lib/moog_vcf_demo:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("effect.lib/pianokey2hz:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/pianokey2hz:copyright", "Julius O. Smith III");
		m->declare("effect.lib/pianokey2hz:license", "STK-4.3");
		m->declare("filename", "virtual_analog_oscillators.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "virtual_analog_oscillators");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 346
		fConst3KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 359
		fConst4KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 374
		fConst5KI = (0.083333336f * fConst0KI); // step: 442
		IOTA0 = 0;
		fConst6KI = (0.5f * fConst0KI); // step: 452
		fConst7KI = (1.3333334f / fConst0KI); // step: 523
		fConst8KI = (0.013888889f * fConst0KI); // step: 558
		fConst9KI = (3.1415927f / fConst0KI); // step: 713
		fConst10KI = (6.2831855f / fConst0KI); // step: 941
		fConst11KI = tanf((50265.484f / fConst0KI)); // step: 1031
		fConst12KI = (1.0f / fConst11KI); // step: 1033
		fConst13KI = (1.0f / (((fConst12KI + 3.1897273f /* Sum */) / fConst11KI) + 4.0767817f /* Sum */)); // step: 1037
		fConst14KI = (((fConst12KI + -3.1897273f /* Sum */) / fConst11KI) + 4.0767817f /* Sum */); // step: 1041
		fConst15KI = powf(fConst11KI,2.0f); // step: 1044
		fConst16KI = (1.0f / fConst15KI); // step: 1045
		fConst17KI = (2.0f * (4.0767817f + -fConst16KI /* Sum */)); // step: 1048
		fConst18KI = (0.0017661728f / fConst15KI); // step: 1060
		fConst19KI = (fConst18KI + 0.0004076782f /* Sum */); // step: 1061
		fConst20KI = (2.0f * (0.0004076782f + -fConst18KI /* Sum */)); // step: 1066
		fConst21KI = (1.0f / (((fConst12KI + 0.74313045f /* Sum */) / fConst11KI) + 1.4500711f /* Sum */)); // step: 1077
		fConst22KI = (((fConst12KI + -0.74313045f /* Sum */) / fConst11KI) + 1.4500711f /* Sum */); // step: 1081
		fConst23KI = (2.0f * (1.4500711f + -fConst16KI /* Sum */)); // step: 1085
		fConst24KI = (11.0520525f / fConst15KI); // step: 1096
		fConst25KI = (fConst24KI + 1.4500711f /* Sum */); // step: 1097
		fConst26KI = (2.0f * (1.4500711f + -fConst24KI /* Sum */)); // step: 1102
		fConst27KI = (1.0f / (((fConst12KI + 0.15748216f /* Sum */) / fConst11KI) + 0.9351402f /* Sum */)); // step: 1113
		fConst28KI = (((fConst12KI + -0.15748216f /* Sum */) / fConst11KI) + 0.9351402f /* Sum */); // step: 1117
		fConst29KI = (2.0f * (0.9351402f + -fConst16KI /* Sum */)); // step: 1121
		fConst30KI = (1.0f / (((fConst12KI + 0.78241307f /* Sum */) / fConst11KI) + 0.2452915f /* Sum */)); // step: 1136
		fConst31KI = (((fConst12KI + -0.78241307f /* Sum */) / fConst11KI) + 0.2452915f /* Sum */); // step: 1140
		fConst32KI = (2.0f * (0.2452915f + -fConst16KI /* Sum */)); // step: 1144
		fConst33KI = (0.0001f / fConst15KI); // step: 1156
		fConst34KI = (fConst33KI + 0.0004332272f /* Sum */); // step: 1157
		fConst35KI = (2.0f * (0.0004332272f + -fConst33KI /* Sum */)); // step: 1162
		fConst36KI = (1.0f / (((fConst12KI + 0.51247865f /* Sum */) / fConst11KI) + 0.6896214f /* Sum */)); // step: 1173
		fConst37KI = (((fConst12KI + -0.51247865f /* Sum */) / fConst11KI) + 0.6896214f /* Sum */); // step: 1177
		fConst38KI = (2.0f * (0.6896214f + -fConst16KI /* Sum */)); // step: 1181
		fConst39KI = (fConst16KI + 7.6217313f /* Sum */); // step: 1192
		fConst40KI = (2.0f * (7.6217313f + -fConst16KI /* Sum */)); // step: 1196
		fConst41KI = (1.0f / (((fConst12KI + 0.16840488f /* Sum */) / fConst11KI) + 1.0693583f /* Sum */)); // step: 1207
		fConst42KI = (((fConst12KI + -0.16840488f /* Sum */) / fConst11KI) + 1.0693583f /* Sum */); // step: 1211
		fConst43KI = (2.0f * (1.0693583f + -fConst16KI /* Sum */)); // step: 1215
		fConst44KI = (fConst16KI + 53.53615f /* Sum */); // step: 1226
		fConst45KI = (2.0f * (53.53615f + -fConst16KI /* Sum */)); // step: 1230
		fConst46KI = tanf((31665.27f / fConst0KI)); // step: 1238
		fConst47KI = (1.0f / fConst46KI); // step: 1239
		fConst48KI = (1.0f / (((fConst47KI + 3.1897273f /* Sum */) / fConst46KI) + 4.0767817f /* Sum */)); // step: 1243
		fConst49KI = (((fConst47KI + -3.1897273f /* Sum */) / fConst46KI) + 4.0767817f /* Sum */); // step: 1246
		fConst50KI = powf(fConst46KI,2.0f); // step: 1249
		fConst51KI = (1.0f / fConst50KI); // step: 1250
		fConst52KI = (2.0f * (4.0767817f + -fConst51KI /* Sum */)); // step: 1253
		fConst53KI = (0.0017661728f / fConst50KI); // step: 1263
		fConst54KI = (fConst53KI + 0.0004076782f /* Sum */); // step: 1264
		fConst55KI = (2.0f * (0.0004076782f + -fConst53KI /* Sum */)); // step: 1269
		fConst56KI = (1.0f / (((fConst47KI + 0.74313045f /* Sum */) / fConst46KI) + 1.4500711f /* Sum */)); // step: 1278
		fConst57KI = (((fConst47KI + -0.74313045f /* Sum */) / fConst46KI) + 1.4500711f /* Sum */); // step: 1281
		fConst58KI = (2.0f * (1.4500711f + -fConst51KI /* Sum */)); // step: 1285
		fConst59KI = (11.0520525f / fConst50KI); // step: 1295
		fConst60KI = (fConst59KI + 1.4500711f /* Sum */); // step: 1296
		fConst61KI = (2.0f * (1.4500711f + -fConst59KI /* Sum */)); // step: 1301
		fConst62KI = (1.0f / (((fConst47KI + 0.15748216f /* Sum */) / fConst46KI) + 0.9351402f /* Sum */)); // step: 1310
		fConst63KI = (((fConst47KI + -0.15748216f /* Sum */) / fConst46KI) + 0.9351402f /* Sum */); // step: 1313
		fConst64KI = (2.0f * (0.9351402f + -fConst51KI /* Sum */)); // step: 1317
		fConst65KI = (1.0f / (((fConst47KI + 0.78241307f /* Sum */) / fConst46KI) + 0.2452915f /* Sum */)); // step: 1330
		fConst66KI = (((fConst47KI + -0.78241307f /* Sum */) / fConst46KI) + 0.2452915f /* Sum */); // step: 1333
		fConst67KI = (2.0f * (0.2452915f + -fConst51KI /* Sum */)); // step: 1337
		fConst68KI = (0.0001f / fConst50KI); // step: 1347
		fConst69KI = (fConst68KI + 0.0004332272f /* Sum */); // step: 1348
		fConst70KI = (2.0f * (0.0004332272f + -fConst68KI /* Sum */)); // step: 1353
		fConst71KI = (1.0f / (((fConst47KI + 0.51247865f /* Sum */) / fConst46KI) + 0.6896214f /* Sum */)); // step: 1362
		fConst72KI = (((fConst47KI + -0.51247865f /* Sum */) / fConst46KI) + 0.6896214f /* Sum */); // step: 1365
		fConst73KI = (2.0f * (0.6896214f + -fConst51KI /* Sum */)); // step: 1369
		fConst74KI = (fConst51KI + 7.6217313f /* Sum */); // step: 1379
		fConst75KI = (2.0f * (7.6217313f + -fConst51KI /* Sum */)); // step: 1383
		fConst76KI = (1.0f / (((fConst47KI + 0.16840488f /* Sum */) / fConst46KI) + 1.0693583f /* Sum */)); // step: 1392
		fConst77KI = (((fConst47KI + -0.16840488f /* Sum */) / fConst46KI) + 1.0693583f /* Sum */); // step: 1395
		fConst78KI = (2.0f * (1.0693583f + -fConst51KI /* Sum */)); // step: 1399
		fConst79KI = (fConst51KI + 53.53615f /* Sum */); // step: 1409
		fConst80KI = (2.0f * (53.53615f + -fConst51KI /* Sum */)); // step: 1413
		fConst81KI = tanf((19947.87f / fConst0KI)); // step: 1421
		fConst82KI = (1.0f / fConst81KI); // step: 1422
		fConst83KI = (1.0f / (((fConst82KI + 3.1897273f /* Sum */) / fConst81KI) + 4.0767817f /* Sum */)); // step: 1426
		fConst84KI = (((fConst82KI + -3.1897273f /* Sum */) / fConst81KI) + 4.0767817f /* Sum */); // step: 1429
		fConst85KI = powf(fConst81KI,2.0f); // step: 1432
		fConst86KI = (1.0f / fConst85KI); // step: 1433
		fConst87KI = (2.0f * (4.0767817f + -fConst86KI /* Sum */)); // step: 1436
		fConst88KI = (0.0017661728f / fConst85KI); // step: 1446
		fConst89KI = (fConst88KI + 0.0004076782f /* Sum */); // step: 1447
		fConst90KI = (2.0f * (0.0004076782f + -fConst88KI /* Sum */)); // step: 1452
		fConst91KI = (1.0f / (((fConst82KI + 0.74313045f /* Sum */) / fConst81KI) + 1.4500711f /* Sum */)); // step: 1461
		fConst92KI = (((fConst82KI + -0.74313045f /* Sum */) / fConst81KI) + 1.4500711f /* Sum */); // step: 1464
		fConst93KI = (2.0f * (1.4500711f + -fConst86KI /* Sum */)); // step: 1468
		fConst94KI = (11.0520525f / fConst85KI); // step: 1478
		fConst95KI = (fConst94KI + 1.4500711f /* Sum */); // step: 1479
		fConst96KI = (2.0f * (1.4500711f + -fConst94KI /* Sum */)); // step: 1484
		fConst97KI = (1.0f / (((fConst82KI + 0.15748216f /* Sum */) / fConst81KI) + 0.9351402f /* Sum */)); // step: 1493
		fConst98KI = (((fConst82KI + -0.15748216f /* Sum */) / fConst81KI) + 0.9351402f /* Sum */); // step: 1496
		fConst99KI = (2.0f * (0.9351402f + -fConst86KI /* Sum */)); // step: 1500
		fConst100KI = (1.0f / (((fConst82KI + 0.78241307f /* Sum */) / fConst81KI) + 0.2452915f /* Sum */)); // step: 1513
		fConst101KI = (((fConst82KI + -0.78241307f /* Sum */) / fConst81KI) + 0.2452915f /* Sum */); // step: 1516
		fConst102KI = (2.0f * (0.2452915f + -fConst86KI /* Sum */)); // step: 1520
		fConst103KI = (0.0001f / fConst85KI); // step: 1530
		fConst104KI = (fConst103KI + 0.0004332272f /* Sum */); // step: 1531
		fConst105KI = (2.0f * (0.0004332272f + -fConst103KI /* Sum */)); // step: 1536
		fConst106KI = (1.0f / (((fConst82KI + 0.51247865f /* Sum */) / fConst81KI) + 0.6896214f /* Sum */)); // step: 1545
		fConst107KI = (((fConst82KI + -0.51247865f /* Sum */) / fConst81KI) + 0.6896214f /* Sum */); // step: 1548
		fConst108KI = (2.0f * (0.6896214f + -fConst86KI /* Sum */)); // step: 1552
		fConst109KI = (fConst86KI + 7.6217313f /* Sum */); // step: 1562
		fConst110KI = (2.0f * (7.6217313f + -fConst86KI /* Sum */)); // step: 1566
		fConst111KI = (1.0f / (((fConst82KI + 0.16840488f /* Sum */) / fConst81KI) + 1.0693583f /* Sum */)); // step: 1575
		fConst112KI = (((fConst82KI + -0.16840488f /* Sum */) / fConst81KI) + 1.0693583f /* Sum */); // step: 1578
		fConst113KI = (2.0f * (1.0693583f + -fConst86KI /* Sum */)); // step: 1582
		fConst114KI = (fConst86KI + 53.53615f /* Sum */); // step: 1592
		fConst115KI = (2.0f * (53.53615f + -fConst86KI /* Sum */)); // step: 1596
		fConst116KI = tanf((12566.371f / fConst0KI)); // step: 1604
		fConst117KI = (1.0f / fConst116KI); // step: 1605
		fConst118KI = (1.0f / (((fConst117KI + 3.1897273f /* Sum */) / fConst116KI) + 4.0767817f /* Sum */)); // step: 1609
		fConst119KI = (((fConst117KI + -3.1897273f /* Sum */) / fConst116KI) + 4.0767817f /* Sum */); // step: 1612
		fConst120KI = powf(fConst116KI,2.0f); // step: 1615
		fConst121KI = (1.0f / fConst120KI); // step: 1616
		fConst122KI = (2.0f * (4.0767817f + -fConst121KI /* Sum */)); // step: 1619
		fConst123KI = (0.0017661728f / fConst120KI); // step: 1629
		fConst124KI = (fConst123KI + 0.0004076782f /* Sum */); // step: 1630
		fConst125KI = (2.0f * (0.0004076782f + -fConst123KI /* Sum */)); // step: 1635
		fConst126KI = (1.0f / (((fConst117KI + 0.74313045f /* Sum */) / fConst116KI) + 1.4500711f /* Sum */)); // step: 1644
		fConst127KI = (((fConst117KI + -0.74313045f /* Sum */) / fConst116KI) + 1.4500711f /* Sum */); // step: 1647
		fConst128KI = (2.0f * (1.4500711f + -fConst121KI /* Sum */)); // step: 1651
		fConst129KI = (11.0520525f / fConst120KI); // step: 1661
		fConst130KI = (fConst129KI + 1.4500711f /* Sum */); // step: 1662
		fConst131KI = (2.0f * (1.4500711f + -fConst129KI /* Sum */)); // step: 1667
		fConst132KI = (1.0f / (((fConst117KI + 0.15748216f /* Sum */) / fConst116KI) + 0.9351402f /* Sum */)); // step: 1676
		fConst133KI = (((fConst117KI + -0.15748216f /* Sum */) / fConst116KI) + 0.9351402f /* Sum */); // step: 1679
		fConst134KI = (2.0f * (0.9351402f + -fConst121KI /* Sum */)); // step: 1683
		fConst135KI = (1.0f / (((fConst117KI + 0.78241307f /* Sum */) / fConst116KI) + 0.2452915f /* Sum */)); // step: 1696
		fConst136KI = (((fConst117KI + -0.78241307f /* Sum */) / fConst116KI) + 0.2452915f /* Sum */); // step: 1699
		fConst137KI = (2.0f * (0.2452915f + -fConst121KI /* Sum */)); // step: 1703
		fConst138KI = (0.0001f / fConst120KI); // step: 1713
		fConst139KI = (fConst138KI + 0.0004332272f /* Sum */); // step: 1714
		fConst140KI = (2.0f * (0.0004332272f + -fConst138KI /* Sum */)); // step: 1719
		fConst141KI = (1.0f / (((fConst117KI + 0.51247865f /* Sum */) / fConst116KI) + 0.6896214f /* Sum */)); // step: 1728
		fConst142KI = (((fConst117KI + -0.51247865f /* Sum */) / fConst116KI) + 0.6896214f /* Sum */); // step: 1731
		fConst143KI = (2.0f * (0.6896214f + -fConst121KI /* Sum */)); // step: 1735
		fConst144KI = (fConst121KI + 7.6217313f /* Sum */); // step: 1745
		fConst145KI = (2.0f * (7.6217313f + -fConst121KI /* Sum */)); // step: 1749
		fConst146KI = (1.0f / (((fConst117KI + 0.16840488f /* Sum */) / fConst116KI) + 1.0693583f /* Sum */)); // step: 1758
		fConst147KI = (((fConst117KI + -0.16840488f /* Sum */) / fConst116KI) + 1.0693583f /* Sum */); // step: 1761
		fConst148KI = (2.0f * (1.0693583f + -fConst121KI /* Sum */)); // step: 1765
		fConst149KI = (fConst121KI + 53.53615f /* Sum */); // step: 1775
		fConst150KI = (2.0f * (53.53615f + -fConst121KI /* Sum */)); // step: 1779
		fConst151KI = tanf((7916.3174f / fConst0KI)); // step: 1787
		fConst152KI = (1.0f / fConst151KI); // step: 1788
		fConst153KI = (1.0f / (((fConst152KI + 3.1897273f /* Sum */) / fConst151KI) + 4.0767817f /* Sum */)); // step: 1792
		fConst154KI = (((fConst152KI + -3.1897273f /* Sum */) / fConst151KI) + 4.0767817f /* Sum */); // step: 1795
		fConst155KI = powf(fConst151KI,2.0f); // step: 1798
		fConst156KI = (1.0f / fConst155KI); // step: 1799
		fConst157KI = (2.0f * (4.0767817f + -fConst156KI /* Sum */)); // step: 1802
		fConst158KI = (0.0017661728f / fConst155KI); // step: 1812
		fConst159KI = (fConst158KI + 0.0004076782f /* Sum */); // step: 1813
		fConst160KI = (2.0f * (0.0004076782f + -fConst158KI /* Sum */)); // step: 1818
		fConst161KI = (1.0f / (((fConst152KI + 0.74313045f /* Sum */) / fConst151KI) + 1.4500711f /* Sum */)); // step: 1827
		fConst162KI = (((fConst152KI + -0.74313045f /* Sum */) / fConst151KI) + 1.4500711f /* Sum */); // step: 1830
		fConst163KI = (2.0f * (1.4500711f + -fConst156KI /* Sum */)); // step: 1834
		fConst164KI = (11.0520525f / fConst155KI); // step: 1844
		fConst165KI = (fConst164KI + 1.4500711f /* Sum */); // step: 1845
		fConst166KI = (2.0f * (1.4500711f + -fConst164KI /* Sum */)); // step: 1850
		fConst167KI = (1.0f / (((fConst152KI + 0.15748216f /* Sum */) / fConst151KI) + 0.9351402f /* Sum */)); // step: 1859
		fConst168KI = (((fConst152KI + -0.15748216f /* Sum */) / fConst151KI) + 0.9351402f /* Sum */); // step: 1862
		fConst169KI = (2.0f * (0.9351402f + -fConst156KI /* Sum */)); // step: 1866
		fConst170KI = (1.0f / (((fConst152KI + 0.78241307f /* Sum */) / fConst151KI) + 0.2452915f /* Sum */)); // step: 1879
		fConst171KI = (((fConst152KI + -0.78241307f /* Sum */) / fConst151KI) + 0.2452915f /* Sum */); // step: 1882
		fConst172KI = (2.0f * (0.2452915f + -fConst156KI /* Sum */)); // step: 1886
		fConst173KI = (0.0001f / fConst155KI); // step: 1896
		fConst174KI = (fConst173KI + 0.0004332272f /* Sum */); // step: 1897
		fConst175KI = (2.0f * (0.0004332272f + -fConst173KI /* Sum */)); // step: 1902
		fConst176KI = (1.0f / (((fConst152KI + 0.51247865f /* Sum */) / fConst151KI) + 0.6896214f /* Sum */)); // step: 1911
		fConst177KI = (((fConst152KI + -0.51247865f /* Sum */) / fConst151KI) + 0.6896214f /* Sum */); // step: 1914
		fConst178KI = (2.0f * (0.6896214f + -fConst156KI /* Sum */)); // step: 1918
		fConst179KI = (fConst156KI + 7.6217313f /* Sum */); // step: 1928
		fConst180KI = (2.0f * (7.6217313f + -fConst156KI /* Sum */)); // step: 1932
		fConst181KI = (1.0f / (((fConst152KI + 0.16840488f /* Sum */) / fConst151KI) + 1.0693583f /* Sum */)); // step: 1941
		fConst182KI = (((fConst152KI + -0.16840488f /* Sum */) / fConst151KI) + 1.0693583f /* Sum */); // step: 1944
		fConst183KI = (2.0f * (1.0693583f + -fConst156KI /* Sum */)); // step: 1948
		fConst184KI = (fConst156KI + 53.53615f /* Sum */); // step: 1958
		fConst185KI = (2.0f * (53.53615f + -fConst156KI /* Sum */)); // step: 1962
		fConst186KI = tanf((4986.9673f / fConst0KI)); // step: 1970
		fConst187KI = (1.0f / fConst186KI); // step: 1971
		fConst188KI = (1.0f / (((fConst187KI + 3.1897273f /* Sum */) / fConst186KI) + 4.0767817f /* Sum */)); // step: 1975
		fConst189KI = (((fConst187KI + -3.1897273f /* Sum */) / fConst186KI) + 4.0767817f /* Sum */); // step: 1978
		fConst190KI = powf(fConst186KI,2.0f); // step: 1981
		fConst191KI = (1.0f / fConst190KI); // step: 1982
		fConst192KI = (2.0f * (4.0767817f + -fConst191KI /* Sum */)); // step: 1985
		fConst193KI = (0.0017661728f / fConst190KI); // step: 1995
		fConst194KI = (fConst193KI + 0.0004076782f /* Sum */); // step: 1996
		fConst195KI = (2.0f * (0.0004076782f + -fConst193KI /* Sum */)); // step: 2001
		fConst196KI = (1.0f / (((fConst187KI + 0.74313045f /* Sum */) / fConst186KI) + 1.4500711f /* Sum */)); // step: 2010
		fConst197KI = (((fConst187KI + -0.74313045f /* Sum */) / fConst186KI) + 1.4500711f /* Sum */); // step: 2013
		fConst198KI = (2.0f * (1.4500711f + -fConst191KI /* Sum */)); // step: 2017
		fConst199KI = (11.0520525f / fConst190KI); // step: 2027
		fConst200KI = (fConst199KI + 1.4500711f /* Sum */); // step: 2028
		fConst201KI = (2.0f * (1.4500711f + -fConst199KI /* Sum */)); // step: 2033
		fConst202KI = (1.0f / (((fConst187KI + 0.15748216f /* Sum */) / fConst186KI) + 0.9351402f /* Sum */)); // step: 2042
		fConst203KI = (((fConst187KI + -0.15748216f /* Sum */) / fConst186KI) + 0.9351402f /* Sum */); // step: 2045
		fConst204KI = (2.0f * (0.9351402f + -fConst191KI /* Sum */)); // step: 2049
		fConst205KI = (1.0f / (((fConst187KI + 0.78241307f /* Sum */) / fConst186KI) + 0.2452915f /* Sum */)); // step: 2062
		fConst206KI = (((fConst187KI + -0.78241307f /* Sum */) / fConst186KI) + 0.2452915f /* Sum */); // step: 2065
		fConst207KI = (2.0f * (0.2452915f + -fConst191KI /* Sum */)); // step: 2069
		fConst208KI = (0.0001f / fConst190KI); // step: 2079
		fConst209KI = (fConst208KI + 0.0004332272f /* Sum */); // step: 2080
		fConst210KI = (2.0f * (0.0004332272f + -fConst208KI /* Sum */)); // step: 2085
		fConst211KI = (1.0f / (((fConst187KI + 0.51247865f /* Sum */) / fConst186KI) + 0.6896214f /* Sum */)); // step: 2094
		fConst212KI = (((fConst187KI + -0.51247865f /* Sum */) / fConst186KI) + 0.6896214f /* Sum */); // step: 2097
		fConst213KI = (2.0f * (0.6896214f + -fConst191KI /* Sum */)); // step: 2101
		fConst214KI = (fConst191KI + 7.6217313f /* Sum */); // step: 2111
		fConst215KI = (2.0f * (7.6217313f + -fConst191KI /* Sum */)); // step: 2115
		fConst216KI = (1.0f / (((fConst187KI + 0.16840488f /* Sum */) / fConst186KI) + 1.0693583f /* Sum */)); // step: 2124
		fConst217KI = (((fConst187KI + -0.16840488f /* Sum */) / fConst186KI) + 1.0693583f /* Sum */); // step: 2127
		fConst218KI = (2.0f * (1.0693583f + -fConst191KI /* Sum */)); // step: 2131
		fConst219KI = (fConst191KI + 53.53615f /* Sum */); // step: 2141
		fConst220KI = (2.0f * (53.53615f + -fConst191KI /* Sum */)); // step: 2145
		fConst221KI = tanf((3141.5928f / fConst0KI)); // step: 2153
		fConst222KI = (1.0f / fConst221KI); // step: 2154
		fConst223KI = (1.0f / (((fConst222KI + 3.1897273f /* Sum */) / fConst221KI) + 4.0767817f /* Sum */)); // step: 2158
		fConst224KI = (((fConst222KI + -3.1897273f /* Sum */) / fConst221KI) + 4.0767817f /* Sum */); // step: 2161
		fConst225KI = powf(fConst221KI,2.0f); // step: 2164
		fConst226KI = (1.0f / fConst225KI); // step: 2165
		fConst227KI = (2.0f * (4.0767817f + -fConst226KI /* Sum */)); // step: 2168
		fConst228KI = (0.0017661728f / fConst225KI); // step: 2178
		fConst229KI = (fConst228KI + 0.0004076782f /* Sum */); // step: 2179
		fConst230KI = (2.0f * (0.0004076782f + -fConst228KI /* Sum */)); // step: 2184
		fConst231KI = (1.0f / (((fConst222KI + 0.74313045f /* Sum */) / fConst221KI) + 1.4500711f /* Sum */)); // step: 2193
		fConst232KI = (((fConst222KI + -0.74313045f /* Sum */) / fConst221KI) + 1.4500711f /* Sum */); // step: 2196
		fConst233KI = (2.0f * (1.4500711f + -fConst226KI /* Sum */)); // step: 2200
		fConst234KI = (11.0520525f / fConst225KI); // step: 2210
		fConst235KI = (fConst234KI + 1.4500711f /* Sum */); // step: 2211
		fConst236KI = (2.0f * (1.4500711f + -fConst234KI /* Sum */)); // step: 2216
		fConst237KI = (1.0f / (((fConst222KI + 0.15748216f /* Sum */) / fConst221KI) + 0.9351402f /* Sum */)); // step: 2225
		fConst238KI = (((fConst222KI + -0.15748216f /* Sum */) / fConst221KI) + 0.9351402f /* Sum */); // step: 2228
		fConst239KI = (2.0f * (0.9351402f + -fConst226KI /* Sum */)); // step: 2232
		fConst240KI = (1.0f / (((fConst222KI + 0.78241307f /* Sum */) / fConst221KI) + 0.2452915f /* Sum */)); // step: 2245
		fConst241KI = (((fConst222KI + -0.78241307f /* Sum */) / fConst221KI) + 0.2452915f /* Sum */); // step: 2248
		fConst242KI = (2.0f * (0.2452915f + -fConst226KI /* Sum */)); // step: 2252
		fConst243KI = (0.0001f / fConst225KI); // step: 2262
		fConst244KI = (fConst243KI + 0.0004332272f /* Sum */); // step: 2263
		fConst245KI = (2.0f * (0.0004332272f + -fConst243KI /* Sum */)); // step: 2268
		fConst246KI = (1.0f / (((fConst222KI + 0.51247865f /* Sum */) / fConst221KI) + 0.6896214f /* Sum */)); // step: 2277
		fConst247KI = (((fConst222KI + -0.51247865f /* Sum */) / fConst221KI) + 0.6896214f /* Sum */); // step: 2280
		fConst248KI = (2.0f * (0.6896214f + -fConst226KI /* Sum */)); // step: 2284
		fConst249KI = (fConst226KI + 7.6217313f /* Sum */); // step: 2294
		fConst250KI = (2.0f * (7.6217313f + -fConst226KI /* Sum */)); // step: 2298
		fConst251KI = (1.0f / (((fConst222KI + 0.16840488f /* Sum */) / fConst221KI) + 1.0693583f /* Sum */)); // step: 2307
		fConst252KI = (((fConst222KI + -0.16840488f /* Sum */) / fConst221KI) + 1.0693583f /* Sum */); // step: 2310
		fConst253KI = (2.0f * (1.0693583f + -fConst226KI /* Sum */)); // step: 2314
		fConst254KI = (fConst226KI + 53.53615f /* Sum */); // step: 2324
		fConst255KI = (2.0f * (53.53615f + -fConst226KI /* Sum */)); // step: 2328
		fConst256KI = tanf((1979.0793f / fConst0KI)); // step: 2336
		fConst257KI = (1.0f / fConst256KI); // step: 2337
		fConst258KI = (1.0f / (((fConst257KI + 3.1897273f /* Sum */) / fConst256KI) + 4.0767817f /* Sum */)); // step: 2341
		fConst259KI = (((fConst257KI + -3.1897273f /* Sum */) / fConst256KI) + 4.0767817f /* Sum */); // step: 2344
		fConst260KI = powf(fConst256KI,2.0f); // step: 2347
		fConst261KI = (1.0f / fConst260KI); // step: 2348
		fConst262KI = (2.0f * (4.0767817f + -fConst261KI /* Sum */)); // step: 2351
		fConst263KI = (0.0017661728f / fConst260KI); // step: 2361
		fConst264KI = (fConst263KI + 0.0004076782f /* Sum */); // step: 2362
		fConst265KI = (2.0f * (0.0004076782f + -fConst263KI /* Sum */)); // step: 2367
		fConst266KI = (1.0f / (((fConst257KI + 0.74313045f /* Sum */) / fConst256KI) + 1.4500711f /* Sum */)); // step: 2376
		fConst267KI = (((fConst257KI + -0.74313045f /* Sum */) / fConst256KI) + 1.4500711f /* Sum */); // step: 2379
		fConst268KI = (2.0f * (1.4500711f + -fConst261KI /* Sum */)); // step: 2383
		fConst269KI = (11.0520525f / fConst260KI); // step: 2393
		fConst270KI = (fConst269KI + 1.4500711f /* Sum */); // step: 2394
		fConst271KI = (2.0f * (1.4500711f + -fConst269KI /* Sum */)); // step: 2399
		fConst272KI = (1.0f / (((fConst257KI + 0.15748216f /* Sum */) / fConst256KI) + 0.9351402f /* Sum */)); // step: 2408
		fConst273KI = (((fConst257KI + -0.15748216f /* Sum */) / fConst256KI) + 0.9351402f /* Sum */); // step: 2411
		fConst274KI = (2.0f * (0.9351402f + -fConst261KI /* Sum */)); // step: 2415
		fConst275KI = (1.0f / (((fConst257KI + 0.78241307f /* Sum */) / fConst256KI) + 0.2452915f /* Sum */)); // step: 2428
		fConst276KI = (((fConst257KI + -0.78241307f /* Sum */) / fConst256KI) + 0.2452915f /* Sum */); // step: 2431
		fConst277KI = (2.0f * (0.2452915f + -fConst261KI /* Sum */)); // step: 2435
		fConst278KI = (0.0001f / fConst260KI); // step: 2445
		fConst279KI = (fConst278KI + 0.0004332272f /* Sum */); // step: 2446
		fConst280KI = (2.0f * (0.0004332272f + -fConst278KI /* Sum */)); // step: 2451
		fConst281KI = (1.0f / (((fConst257KI + 0.51247865f /* Sum */) / fConst256KI) + 0.6896214f /* Sum */)); // step: 2460
		fConst282KI = (((fConst257KI + -0.51247865f /* Sum */) / fConst256KI) + 0.6896214f /* Sum */); // step: 2463
		fConst283KI = (2.0f * (0.6896214f + -fConst261KI /* Sum */)); // step: 2467
		fConst284KI = (fConst261KI + 7.6217313f /* Sum */); // step: 2477
		fConst285KI = (2.0f * (7.6217313f + -fConst261KI /* Sum */)); // step: 2481
		fConst286KI = (1.0f / (((fConst257KI + 0.16840488f /* Sum */) / fConst256KI) + 1.0693583f /* Sum */)); // step: 2490
		fConst287KI = (((fConst257KI + -0.16840488f /* Sum */) / fConst256KI) + 1.0693583f /* Sum */); // step: 2493
		fConst288KI = (2.0f * (1.0693583f + -fConst261KI /* Sum */)); // step: 2497
		fConst289KI = (fConst261KI + 53.53615f /* Sum */); // step: 2507
		fConst290KI = (2.0f * (53.53615f + -fConst261KI /* Sum */)); // step: 2511
		fConst291KI = tanf((1246.7418f / fConst0KI)); // step: 2519
		fConst292KI = (1.0f / fConst291KI); // step: 2520
		fConst293KI = (1.0f / (((fConst292KI + 3.1897273f /* Sum */) / fConst291KI) + 4.0767817f /* Sum */)); // step: 2524
		fConst294KI = (((fConst292KI + -3.1897273f /* Sum */) / fConst291KI) + 4.0767817f /* Sum */); // step: 2527
		fConst295KI = powf(fConst291KI,2.0f); // step: 2530
		fConst296KI = (1.0f / fConst295KI); // step: 2531
		fConst297KI = (2.0f * (4.0767817f + -fConst296KI /* Sum */)); // step: 2534
		fConst298KI = (0.0017661728f / fConst295KI); // step: 2544
		fConst299KI = (fConst298KI + 0.0004076782f /* Sum */); // step: 2545
		fConst300KI = (2.0f * (0.0004076782f + -fConst298KI /* Sum */)); // step: 2550
		fConst301KI = (1.0f / (((fConst292KI + 0.74313045f /* Sum */) / fConst291KI) + 1.4500711f /* Sum */)); // step: 2559
		fConst302KI = (((fConst292KI + -0.74313045f /* Sum */) / fConst291KI) + 1.4500711f /* Sum */); // step: 2562
		fConst303KI = (2.0f * (1.4500711f + -fConst296KI /* Sum */)); // step: 2566
		fConst304KI = (11.0520525f / fConst295KI); // step: 2576
		fConst305KI = (fConst304KI + 1.4500711f /* Sum */); // step: 2577
		fConst306KI = (2.0f * (1.4500711f + -fConst304KI /* Sum */)); // step: 2582
		fConst307KI = (1.0f / (((fConst292KI + 0.15748216f /* Sum */) / fConst291KI) + 0.9351402f /* Sum */)); // step: 2591
		fConst308KI = (((fConst292KI + -0.15748216f /* Sum */) / fConst291KI) + 0.9351402f /* Sum */); // step: 2594
		fConst309KI = (2.0f * (0.9351402f + -fConst296KI /* Sum */)); // step: 2598
		fConst310KI = (1.0f / (((fConst292KI + 0.78241307f /* Sum */) / fConst291KI) + 0.2452915f /* Sum */)); // step: 2611
		fConst311KI = (((fConst292KI + -0.78241307f /* Sum */) / fConst291KI) + 0.2452915f /* Sum */); // step: 2614
		fConst312KI = (2.0f * (0.2452915f + -fConst296KI /* Sum */)); // step: 2618
		fConst313KI = (0.0001f / fConst295KI); // step: 2628
		fConst314KI = (fConst313KI + 0.0004332272f /* Sum */); // step: 2629
		fConst315KI = (2.0f * (0.0004332272f + -fConst313KI /* Sum */)); // step: 2634
		fConst316KI = (1.0f / (((fConst292KI + 0.51247865f /* Sum */) / fConst291KI) + 0.6896214f /* Sum */)); // step: 2643
		fConst317KI = (((fConst292KI + -0.51247865f /* Sum */) / fConst291KI) + 0.6896214f /* Sum */); // step: 2646
		fConst318KI = (2.0f * (0.6896214f + -fConst296KI /* Sum */)); // step: 2650
		fConst319KI = (fConst296KI + 7.6217313f /* Sum */); // step: 2660
		fConst320KI = (2.0f * (7.6217313f + -fConst296KI /* Sum */)); // step: 2664
		fConst321KI = (1.0f / (((fConst292KI + 0.16840488f /* Sum */) / fConst291KI) + 1.0693583f /* Sum */)); // step: 2673
		fConst322KI = (((fConst292KI + -0.16840488f /* Sum */) / fConst291KI) + 1.0693583f /* Sum */); // step: 2676
		fConst323KI = (2.0f * (1.0693583f + -fConst296KI /* Sum */)); // step: 2680
		fConst324KI = (fConst296KI + 53.53615f /* Sum */); // step: 2690
		fConst325KI = (2.0f * (53.53615f + -fConst296KI /* Sum */)); // step: 2694
		fConst326KI = tanf((785.3982f / fConst0KI)); // step: 2702
		fConst327KI = (1.0f / fConst326KI); // step: 2703
		fConst328KI = (1.0f / (((fConst327KI + 3.1897273f /* Sum */) / fConst326KI) + 4.0767817f /* Sum */)); // step: 2707
		fConst329KI = (((fConst327KI + -3.1897273f /* Sum */) / fConst326KI) + 4.0767817f /* Sum */); // step: 2710
		fConst330KI = powf(fConst326KI,2.0f); // step: 2713
		fConst331KI = (1.0f / fConst330KI); // step: 2714
		fConst332KI = (2.0f * (4.0767817f + -fConst331KI /* Sum */)); // step: 2717
		fConst333KI = (0.0017661728f / fConst330KI); // step: 2727
		fConst334KI = (fConst333KI + 0.0004076782f /* Sum */); // step: 2728
		fConst335KI = (2.0f * (0.0004076782f + -fConst333KI /* Sum */)); // step: 2733
		fConst336KI = (1.0f / (((fConst327KI + 0.74313045f /* Sum */) / fConst326KI) + 1.4500711f /* Sum */)); // step: 2742
		fConst337KI = (((fConst327KI + -0.74313045f /* Sum */) / fConst326KI) + 1.4500711f /* Sum */); // step: 2745
		fConst338KI = (2.0f * (1.4500711f + -fConst331KI /* Sum */)); // step: 2749
		fConst339KI = (11.0520525f / fConst330KI); // step: 2759
		fConst340KI = (fConst339KI + 1.4500711f /* Sum */); // step: 2760
		fConst341KI = (2.0f * (1.4500711f + -fConst339KI /* Sum */)); // step: 2765
		fConst342KI = (1.0f / (((fConst327KI + 0.15748216f /* Sum */) / fConst326KI) + 0.9351402f /* Sum */)); // step: 2774
		fConst343KI = (((fConst327KI + -0.15748216f /* Sum */) / fConst326KI) + 0.9351402f /* Sum */); // step: 2777
		fConst344KI = (2.0f * (0.9351402f + -fConst331KI /* Sum */)); // step: 2781
		fConst345KI = (1.0f / (((fConst327KI + 0.78241307f /* Sum */) / fConst326KI) + 0.2452915f /* Sum */)); // step: 2794
		fConst346KI = (((fConst327KI + -0.78241307f /* Sum */) / fConst326KI) + 0.2452915f /* Sum */); // step: 2797
		fConst347KI = (2.0f * (0.2452915f + -fConst331KI /* Sum */)); // step: 2801
		fConst348KI = (0.0001f / fConst330KI); // step: 2811
		fConst349KI = (fConst348KI + 0.0004332272f /* Sum */); // step: 2812
		fConst350KI = (2.0f * (0.0004332272f + -fConst348KI /* Sum */)); // step: 2817
		fConst351KI = (1.0f / (((fConst327KI + 0.51247865f /* Sum */) / fConst326KI) + 0.6896214f /* Sum */)); // step: 2826
		fConst352KI = (((fConst327KI + -0.51247865f /* Sum */) / fConst326KI) + 0.6896214f /* Sum */); // step: 2829
		fConst353KI = (2.0f * (0.6896214f + -fConst331KI /* Sum */)); // step: 2833
		fConst354KI = (fConst331KI + 7.6217313f /* Sum */); // step: 2843
		fConst355KI = (2.0f * (7.6217313f + -fConst331KI /* Sum */)); // step: 2847
		fConst356KI = (1.0f / (((fConst327KI + 0.16840488f /* Sum */) / fConst326KI) + 1.0693583f /* Sum */)); // step: 2856
		fConst357KI = (((fConst327KI + -0.16840488f /* Sum */) / fConst326KI) + 1.0693583f /* Sum */); // step: 2859
		fConst358KI = (2.0f * (1.0693583f + -fConst331KI /* Sum */)); // step: 2863
		fConst359KI = (fConst331KI + 53.53615f /* Sum */); // step: 2873
		fConst360KI = (2.0f * (53.53615f + -fConst331KI /* Sum */)); // step: 2877
		fConst361KI = tanf((494.76984f / fConst0KI)); // step: 2885
		fConst362KI = (1.0f / fConst361KI); // step: 2886
		fConst363KI = (1.0f / (((fConst362KI + 3.1897273f /* Sum */) / fConst361KI) + 4.0767817f /* Sum */)); // step: 2890
		fConst364KI = (((fConst362KI + -3.1897273f /* Sum */) / fConst361KI) + 4.0767817f /* Sum */); // step: 2893
		fConst365KI = powf(fConst361KI,2.0f); // step: 2896
		fConst366KI = (1.0f / fConst365KI); // step: 2897
		fConst367KI = (2.0f * (4.0767817f + -fConst366KI /* Sum */)); // step: 2900
		fConst368KI = (0.0017661728f / fConst365KI); // step: 2910
		fConst369KI = (fConst368KI + 0.0004076782f /* Sum */); // step: 2911
		fConst370KI = (2.0f * (0.0004076782f + -fConst368KI /* Sum */)); // step: 2916
		fConst371KI = (1.0f / (((fConst362KI + 0.74313045f /* Sum */) / fConst361KI) + 1.4500711f /* Sum */)); // step: 2925
		fConst372KI = (((fConst362KI + -0.74313045f /* Sum */) / fConst361KI) + 1.4500711f /* Sum */); // step: 2928
		fConst373KI = (2.0f * (1.4500711f + -fConst366KI /* Sum */)); // step: 2932
		fConst374KI = (11.0520525f / fConst365KI); // step: 2942
		fConst375KI = (fConst374KI + 1.4500711f /* Sum */); // step: 2943
		fConst376KI = (2.0f * (1.4500711f + -fConst374KI /* Sum */)); // step: 2948
		fConst377KI = (1.0f / (((fConst362KI + 0.15748216f /* Sum */) / fConst361KI) + 0.9351402f /* Sum */)); // step: 2957
		fConst378KI = (((fConst362KI + -0.15748216f /* Sum */) / fConst361KI) + 0.9351402f /* Sum */); // step: 2960
		fConst379KI = (2.0f * (0.9351402f + -fConst366KI /* Sum */)); // step: 2964
		fConst380KI = (1.0f / (((fConst362KI + 0.78241307f /* Sum */) / fConst361KI) + 0.2452915f /* Sum */)); // step: 2977
		fConst381KI = (((fConst362KI + -0.78241307f /* Sum */) / fConst361KI) + 0.2452915f /* Sum */); // step: 2980
		fConst382KI = (2.0f * (0.2452915f + -fConst366KI /* Sum */)); // step: 2984
		fConst383KI = (0.0001f / fConst365KI); // step: 2994
		fConst384KI = (fConst383KI + 0.0004332272f /* Sum */); // step: 2995
		fConst385KI = (2.0f * (0.0004332272f + -fConst383KI /* Sum */)); // step: 3000
		fConst386KI = (1.0f / (((fConst362KI + 0.51247865f /* Sum */) / fConst361KI) + 0.6896214f /* Sum */)); // step: 3009
		fConst387KI = (((fConst362KI + -0.51247865f /* Sum */) / fConst361KI) + 0.6896214f /* Sum */); // step: 3012
		fConst388KI = (2.0f * (0.6896214f + -fConst366KI /* Sum */)); // step: 3016
		fConst389KI = (fConst366KI + 7.6217313f /* Sum */); // step: 3026
		fConst390KI = (2.0f * (7.6217313f + -fConst366KI /* Sum */)); // step: 3030
		fConst391KI = (1.0f / (((fConst362KI + 0.16840488f /* Sum */) / fConst361KI) + 1.0693583f /* Sum */)); // step: 3039
		fConst392KI = (((fConst362KI + -0.16840488f /* Sum */) / fConst361KI) + 1.0693583f /* Sum */); // step: 3042
		fConst393KI = (2.0f * (1.0693583f + -fConst366KI /* Sum */)); // step: 3046
		fConst394KI = (fConst366KI + 53.53615f /* Sum */); // step: 3056
		fConst395KI = (2.0f * (53.53615f + -fConst366KI /* Sum */)); // step: 3060
		fConst396KI = tanf((311.68546f / fConst0KI)); // step: 3068
		fConst397KI = (1.0f / fConst396KI); // step: 3069
		fConst398KI = (1.0f / (((fConst397KI + 3.1897273f /* Sum */) / fConst396KI) + 4.0767817f /* Sum */)); // step: 3073
		fConst399KI = (((fConst397KI + -3.1897273f /* Sum */) / fConst396KI) + 4.0767817f /* Sum */); // step: 3076
		fConst400KI = powf(fConst396KI,2.0f); // step: 3079
		fConst401KI = (1.0f / fConst400KI); // step: 3080
		fConst402KI = (2.0f * (4.0767817f + -fConst401KI /* Sum */)); // step: 3083
		fConst403KI = (0.0017661728f / fConst400KI); // step: 3093
		fConst404KI = (fConst403KI + 0.0004076782f /* Sum */); // step: 3094
		fConst405KI = (2.0f * (0.0004076782f + -fConst403KI /* Sum */)); // step: 3099
		fConst406KI = (1.0f / (((fConst397KI + 0.74313045f /* Sum */) / fConst396KI) + 1.4500711f /* Sum */)); // step: 3108
		fConst407KI = (((fConst397KI + -0.74313045f /* Sum */) / fConst396KI) + 1.4500711f /* Sum */); // step: 3111
		fConst408KI = (2.0f * (1.4500711f + -fConst401KI /* Sum */)); // step: 3115
		fConst409KI = (11.0520525f / fConst400KI); // step: 3125
		fConst410KI = (fConst409KI + 1.4500711f /* Sum */); // step: 3126
		fConst411KI = (2.0f * (1.4500711f + -fConst409KI /* Sum */)); // step: 3131
		fConst412KI = (1.0f / (((fConst397KI + 0.15748216f /* Sum */) / fConst396KI) + 0.9351402f /* Sum */)); // step: 3140
		fConst413KI = (((fConst397KI + -0.15748216f /* Sum */) / fConst396KI) + 0.9351402f /* Sum */); // step: 3143
		fConst414KI = (2.0f * (0.9351402f + -fConst401KI /* Sum */)); // step: 3147
		fConst415KI = (1.0f / (((fConst397KI + 0.78241307f /* Sum */) / fConst396KI) + 0.2452915f /* Sum */)); // step: 3160
		fConst416KI = (((fConst397KI + -0.78241307f /* Sum */) / fConst396KI) + 0.2452915f /* Sum */); // step: 3163
		fConst417KI = (2.0f * (0.2452915f + -fConst401KI /* Sum */)); // step: 3167
		fConst418KI = (0.0001f / fConst400KI); // step: 3177
		fConst419KI = (fConst418KI + 0.0004332272f /* Sum */); // step: 3178
		fConst420KI = (2.0f * (0.0004332272f + -fConst418KI /* Sum */)); // step: 3183
		fConst421KI = (1.0f / (((fConst397KI + 0.51247865f /* Sum */) / fConst396KI) + 0.6896214f /* Sum */)); // step: 3192
		fConst422KI = (((fConst397KI + -0.51247865f /* Sum */) / fConst396KI) + 0.6896214f /* Sum */); // step: 3195
		fConst423KI = (2.0f * (0.6896214f + -fConst401KI /* Sum */)); // step: 3199
		fConst424KI = (fConst401KI + 7.6217313f /* Sum */); // step: 3209
		fConst425KI = (2.0f * (7.6217313f + -fConst401KI /* Sum */)); // step: 3213
		fConst426KI = (1.0f / (((fConst397KI + 0.16840488f /* Sum */) / fConst396KI) + 1.0693583f /* Sum */)); // step: 3222
		fConst427KI = (((fConst397KI + -0.16840488f /* Sum */) / fConst396KI) + 1.0693583f /* Sum */); // step: 3225
		fConst428KI = (2.0f * (1.0693583f + -fConst401KI /* Sum */)); // step: 3229
		fConst429KI = (fConst401KI + 53.53615f /* Sum */); // step: 3239
		fConst430KI = (2.0f * (53.53615f + -fConst401KI /* Sum */)); // step: 3243
		fConst431KI = tanf((196.34955f / fConst0KI)); // step: 3251
		fConst432KI = (1.0f / fConst431KI); // step: 3252
		fConst433KI = (1.0f / (((fConst432KI + 3.1897273f /* Sum */) / fConst431KI) + 4.0767817f /* Sum */)); // step: 3256
		fConst434KI = (((fConst432KI + -3.1897273f /* Sum */) / fConst431KI) + 4.0767817f /* Sum */); // step: 3259
		fConst435KI = powf(fConst431KI,2.0f); // step: 3262
		fConst436KI = (1.0f / fConst435KI); // step: 3263
		fConst437KI = (2.0f * (4.0767817f + -fConst436KI /* Sum */)); // step: 3266
		fConst438KI = (0.0017661728f / fConst435KI); // step: 3276
		fConst439KI = (fConst438KI + 0.0004076782f /* Sum */); // step: 3277
		fConst440KI = (2.0f * (0.0004076782f + -fConst438KI /* Sum */)); // step: 3282
		fConst441KI = (1.0f / (((fConst432KI + 0.74313045f /* Sum */) / fConst431KI) + 1.4500711f /* Sum */)); // step: 3291
		fConst442KI = (((fConst432KI + -0.74313045f /* Sum */) / fConst431KI) + 1.4500711f /* Sum */); // step: 3294
		fConst443KI = (2.0f * (1.4500711f + -fConst436KI /* Sum */)); // step: 3298
		fConst444KI = (11.0520525f / fConst435KI); // step: 3308
		fConst445KI = (fConst444KI + 1.4500711f /* Sum */); // step: 3309
		fConst446KI = (2.0f * (1.4500711f + -fConst444KI /* Sum */)); // step: 3314
		fConst447KI = (1.0f / (((fConst432KI + 0.15748216f /* Sum */) / fConst431KI) + 0.9351402f /* Sum */)); // step: 3323
		fConst448KI = (((fConst432KI + -0.15748216f /* Sum */) / fConst431KI) + 0.9351402f /* Sum */); // step: 3326
		fConst449KI = (2.0f * (0.9351402f + -fConst436KI /* Sum */)); // step: 3330
		fConst450KI = (1.0f / (((fConst432KI + 0.78241307f /* Sum */) / fConst431KI) + 0.2452915f /* Sum */)); // step: 3343
		fConst451KI = (((fConst432KI + -0.78241307f /* Sum */) / fConst431KI) + 0.2452915f /* Sum */); // step: 3346
		fConst452KI = (2.0f * (0.2452915f + -fConst436KI /* Sum */)); // step: 3350
		fConst453KI = (0.0001f / fConst435KI); // step: 3360
		fConst454KI = (fConst453KI + 0.0004332272f /* Sum */); // step: 3361
		fConst455KI = (2.0f * (0.0004332272f + -fConst453KI /* Sum */)); // step: 3366
		fConst456KI = (1.0f / (((fConst432KI + 0.51247865f /* Sum */) / fConst431KI) + 0.6896214f /* Sum */)); // step: 3375
		fConst457KI = (((fConst432KI + -0.51247865f /* Sum */) / fConst431KI) + 0.6896214f /* Sum */); // step: 3378
		fConst458KI = (2.0f * (0.6896214f + -fConst436KI /* Sum */)); // step: 3382
		fConst459KI = (fConst436KI + 7.6217313f /* Sum */); // step: 3392
		fConst460KI = (2.0f * (7.6217313f + -fConst436KI /* Sum */)); // step: 3396
		fConst461KI = (1.0f / (((fConst432KI + 0.16840488f /* Sum */) / fConst431KI) + 1.0693583f /* Sum */)); // step: 3405
		fConst462KI = (((fConst432KI + -0.16840488f /* Sum */) / fConst431KI) + 1.0693583f /* Sum */); // step: 3408
		fConst463KI = (2.0f * (1.0693583f + -fConst436KI /* Sum */)); // step: 3412
		fConst464KI = (fConst436KI + 53.53615f /* Sum */); // step: 3422
		fConst465KI = (2.0f * (53.53615f + -fConst436KI /* Sum */)); // step: 3426
		fConst466KI = tanf((123.69246f / fConst0KI)); // step: 3434
		fConst467KI = (1.0f / fConst466KI); // step: 3435
		fConst468KI = (1.0f / (((fConst467KI + 3.1897273f /* Sum */) / fConst466KI) + 4.0767817f /* Sum */)); // step: 3439
		fConst469KI = (((fConst467KI + -3.1897273f /* Sum */) / fConst466KI) + 4.0767817f /* Sum */); // step: 3442
		fConst470KI = powf(fConst466KI,2.0f); // step: 3445
		fConst471KI = (1.0f / fConst470KI); // step: 3446
		fConst472KI = (2.0f * (4.0767817f + -fConst471KI /* Sum */)); // step: 3449
		fConst473KI = (0.0017661728f / fConst470KI); // step: 3459
		fConst474KI = (fConst473KI + 0.0004076782f /* Sum */); // step: 3460
		fConst475KI = (2.0f * (0.0004076782f + -fConst473KI /* Sum */)); // step: 3465
		fConst476KI = (1.0f / (((fConst467KI + 0.74313045f /* Sum */) / fConst466KI) + 1.4500711f /* Sum */)); // step: 3474
		fConst477KI = (((fConst467KI + -0.74313045f /* Sum */) / fConst466KI) + 1.4500711f /* Sum */); // step: 3477
		fConst478KI = (2.0f * (1.4500711f + -fConst471KI /* Sum */)); // step: 3481
		fConst479KI = (11.0520525f / fConst470KI); // step: 3491
		fConst480KI = (fConst479KI + 1.4500711f /* Sum */); // step: 3492
		fConst481KI = (2.0f * (1.4500711f + -fConst479KI /* Sum */)); // step: 3497
		fConst482KI = (1.0f / (((fConst467KI + 0.15748216f /* Sum */) / fConst466KI) + 0.9351402f /* Sum */)); // step: 3506
		fConst483KI = (((fConst467KI + -0.15748216f /* Sum */) / fConst466KI) + 0.9351402f /* Sum */); // step: 3509
		fConst484KI = (2.0f * (0.9351402f + -fConst471KI /* Sum */)); // step: 3513
		fConst485KI = (1.0f / (((fConst467KI + 0.78241307f /* Sum */) / fConst466KI) + 0.2452915f /* Sum */)); // step: 3526
		fConst486KI = (((fConst467KI + -0.78241307f /* Sum */) / fConst466KI) + 0.2452915f /* Sum */); // step: 3529
		fConst487KI = (2.0f * (0.2452915f + -fConst471KI /* Sum */)); // step: 3533
		fConst488KI = (0.0001f / fConst470KI); // step: 3543
		fConst489KI = (fConst488KI + 0.0004332272f /* Sum */); // step: 3544
		fConst490KI = (2.0f * (0.0004332272f + -fConst488KI /* Sum */)); // step: 3549
		fConst491KI = (1.0f / (((fConst467KI + 0.51247865f /* Sum */) / fConst466KI) + 0.6896214f /* Sum */)); // step: 3558
		fConst492KI = (((fConst467KI + -0.51247865f /* Sum */) / fConst466KI) + 0.6896214f /* Sum */); // step: 3561
		fConst493KI = (2.0f * (0.6896214f + -fConst471KI /* Sum */)); // step: 3565
		fConst494KI = (fConst471KI + 7.6217313f /* Sum */); // step: 3575
		fConst495KI = (2.0f * (7.6217313f + -fConst471KI /* Sum */)); // step: 3579
		fConst496KI = (1.0f / (((fConst467KI + 0.16840488f /* Sum */) / fConst466KI) + 1.0693583f /* Sum */)); // step: 3588
		fConst497KI = (((fConst467KI + -0.16840488f /* Sum */) / fConst466KI) + 1.0693583f /* Sum */); // step: 3591
		fConst498KI = (2.0f * (1.0693583f + -fConst471KI /* Sum */)); // step: 3595
		fConst499KI = (1e+03f / fConst0KI); // step: 3611
		fConst500KI = (50.06381f / fConst15KI); // step: 3620
		fConst501KI = (fConst500KI + 0.9351402f /* Sum */); // step: 3621
		fConst502KI = (2.0f * (0.9351402f + -fConst500KI /* Sum */)); // step: 3626
		fConst503KI = (50.06381f / fConst50KI); // step: 3649
		fConst504KI = (fConst503KI + 0.9351402f /* Sum */); // step: 3650
		fConst505KI = (2.0f * (0.9351402f + -fConst503KI /* Sum */)); // step: 3655
		fConst506KI = (50.06381f / fConst85KI); // step: 3674
		fConst507KI = (fConst506KI + 0.9351402f /* Sum */); // step: 3675
		fConst508KI = (2.0f * (0.9351402f + -fConst506KI /* Sum */)); // step: 3680
		fConst509KI = (50.06381f / fConst120KI); // step: 3699
		fConst510KI = (fConst509KI + 0.9351402f /* Sum */); // step: 3700
		fConst511KI = (2.0f * (0.9351402f + -fConst509KI /* Sum */)); // step: 3705
		fConst512KI = (50.06381f / fConst155KI); // step: 3724
		fConst513KI = (fConst512KI + 0.9351402f /* Sum */); // step: 3725
		fConst514KI = (2.0f * (0.9351402f + -fConst512KI /* Sum */)); // step: 3730
		fConst515KI = (50.06381f / fConst190KI); // step: 3749
		fConst516KI = (fConst515KI + 0.9351402f /* Sum */); // step: 3750
		fConst517KI = (2.0f * (0.9351402f + -fConst515KI /* Sum */)); // step: 3755
		fConst518KI = (50.06381f / fConst225KI); // step: 3774
		fConst519KI = (fConst518KI + 0.9351402f /* Sum */); // step: 3775
		fConst520KI = (2.0f * (0.9351402f + -fConst518KI /* Sum */)); // step: 3780
		fConst521KI = (50.06381f / fConst260KI); // step: 3799
		fConst522KI = (fConst521KI + 0.9351402f /* Sum */); // step: 3800
		fConst523KI = (2.0f * (0.9351402f + -fConst521KI /* Sum */)); // step: 3805
		fConst524KI = (50.06381f / fConst295KI); // step: 3824
		fConst525KI = (fConst524KI + 0.9351402f /* Sum */); // step: 3825
		fConst526KI = (2.0f * (0.9351402f + -fConst524KI /* Sum */)); // step: 3830
		fConst527KI = (50.06381f / fConst330KI); // step: 3849
		fConst528KI = (fConst527KI + 0.9351402f /* Sum */); // step: 3850
		fConst529KI = (2.0f * (0.9351402f + -fConst527KI /* Sum */)); // step: 3855
		fConst530KI = (50.06381f / fConst365KI); // step: 3874
		fConst531KI = (fConst530KI + 0.9351402f /* Sum */); // step: 3875
		fConst532KI = (2.0f * (0.9351402f + -fConst530KI /* Sum */)); // step: 3880
		fConst533KI = (50.06381f / fConst400KI); // step: 3899
		fConst534KI = (fConst533KI + 0.9351402f /* Sum */); // step: 3900
		fConst535KI = (2.0f * (0.9351402f + -fConst533KI /* Sum */)); // step: 3905
		fConst536KI = (50.06381f / fConst435KI); // step: 3924
		fConst537KI = (fConst536KI + 0.9351402f /* Sum */); // step: 3925
		fConst538KI = (2.0f * (0.9351402f + -fConst536KI /* Sum */)); // step: 3930
		fConst539KI = (50.06381f / fConst470KI); // step: 3949
		fConst540KI = (fConst539KI + 0.9351402f /* Sum */); // step: 3950
		fConst541KI = (2.0f * (0.9351402f + -fConst539KI /* Sum */)); // step: 3955
		fConst542KI = (fConst471KI + 53.53615f /* Sum */); // step: 3974
		fConst543KI = (2.0f * (53.53615f + -fConst471KI /* Sum */)); // step: 3978
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fcheckbox0 = 0.0;
		fslider4 = 0.0f;
		fslider5 = -2e+01f;
		fslider6 = 1.0f;
		fentry0 = 2.0f;
		fslider7 = 0.0f;
		fslider8 = 0.0f;
		fslider9 = 0.0f;
		fcheckbox1 = 0.0;
		fslider10 = 0.5f;
		fslider11 = 0.0f;
		fslider12 = 0.9f;
		fslider13 = 25.0f;
		fslider14 = 5.0f;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fslider15 = 5e+01f;
		fslider16 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec15SEState = 0;
		fVec17SEState = 0;
		fVec18SEState = 0;
		fVec19SEState = 0;
		fVec21SEState = 0;
		fVec22SEState = 0;
		fVec24SEState = 0;
		fVec25SEState = 0;
		fVec27SEState = 0;
		fVec28SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec32SEState = 0;
		fVec34SEState = 0;
		fVec35SEState = 0;
		fVec37SEState = 0;
		fVec39SEState = 0;
		fVec40SEState = 0;
		fVec42SEState = 0;
		fVec43SEState = 0;
		fVec45SEState = 0;
		fVec46SEState = 0;
		fVec48SEState = 0;
		fVec49SEState = 0;
		fVec50SEState = 0;
		fVec52SEState = 0;
		fVec54SEState = 0;
		fVec55SEState = 0;
		fVec56SEState = 0;
		fVec58SEState = 0;
		fVec60SEState = 0;
		fVec61SEState = 0;
		fVec62SEState = 0;
		fVec64SEState = 0;
		fVec66SEState = 0;
		iVec68SIState = 0;
		fVec70SIState = 0;
		for (int j = 0; j < 3; j++) { fVec67SIState[j] = 0; }
		fVec73SEState = 0;
		for (int i = 1; i < 4096; i++) { fVec92SE[i] = 0; }
		fVec92SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 4096; i++) { fVec96SE[i] = 0; }
		fVec96SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 4096; i++) { fVec100SE[i] = 0; }
		fVec100SE[0] = -1;  // detect unintialized
		fVec103SEState = 0;
		fVec105SEState = 0;
		fVec107SEState = 0;
		fVec110SEState = 0;
		for (int i = 1; i < 4096; i++) { fVec113SE[i] = 0; }
		fVec113SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 4096; i++) { fVec118SE[i] = 0; }
		fVec118SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 4096; i++) { fVec123SE[i] = 0; }
		fVec123SE[0] = -1;  // detect unintialized
		fVec134SEState = 0;
		fVec136SEState = 0;
		for (int j = 0; j < 2; j++) { fVec137SEState[j] = 0; }
		fVec142SEState = 0;
		for (int j = 0; j < 2; j++) { fVec141SEState[j] = 0; }
		fVec145SEState = 0;
		fVec146SEState = 0;
		fVec144SEState = 0;
		fVec148SEState = 0;
		fVec154SEState = 0;
		fVec155SEState = 0;
		fVec153SEState = 0;
		fVec157SEState = 0;
		fVec158SEState = 0;
		fVec160SEState = 0;
		fVec163SEState = 0;
		fVec165SEState = 0;
		fVec167SEState = 0;
		fVec161SEState = 0;
		fVec177SEState = 0;
		for (int j = 0; j < 2; j++) { fVec176SEState[j] = 0; }
		fVec182SEState = 0;
		for (int j = 0; j < 2; j++) { fVec181SEState[j] = 0; }
		fVec187SEState = 0;
		for (int j = 0; j < 2; j++) { fVec186SEState[j] = 0; }
		fVec190SEState = 0;
		for (int j = 0; j < 2; j++) { fVec189SEState[j] = 0; }
		fVec195SEState = 0;
		for (int j = 0; j < 2; j++) { fVec194SEState[j] = 0; }
		fVec200SEState = 0;
		for (int j = 0; j < 2; j++) { fVec199SEState[j] = 0; }
		fVec205SEState = 0;
		for (int j = 0; j < 2; j++) { fVec204SEState[j] = 0; }
		fVec210SEState = 0;
		for (int j = 0; j < 2; j++) { fVec209SEState[j] = 0; }
		fVec215SEState = 0;
		for (int j = 0; j < 2; j++) { fVec214SEState[j] = 0; }
		fVec218SEState = 0;
		for (int j = 0; j < 2; j++) { fVec217SEState[j] = 0; }
		fVec223SEState = 0;
		for (int j = 0; j < 2; j++) { fVec222SEState[j] = 0; }
		fVec228SEState = 0;
		for (int j = 0; j < 2; j++) { fVec227SEState[j] = 0; }
		fVec233SEState = 0;
		for (int j = 0; j < 2; j++) { fVec232SEState[j] = 0; }
		fVec238SEState = 0;
		for (int j = 0; j < 2; j++) { fVec237SEState[j] = 0; }
		fVec243SEState = 0;
		for (int j = 0; j < 2; j++) { fVec242SEState[j] = 0; }
		fVec246SEState = 0;
		for (int j = 0; j < 2; j++) { fVec245SEState[j] = 0; }
		fVec251SEState = 0;
		for (int j = 0; j < 2; j++) { fVec250SEState[j] = 0; }
		fVec256SEState = 0;
		for (int j = 0; j < 2; j++) { fVec255SEState[j] = 0; }
		fVec261SEState = 0;
		for (int j = 0; j < 2; j++) { fVec260SEState[j] = 0; }
		fVec266SEState = 0;
		for (int j = 0; j < 2; j++) { fVec265SEState[j] = 0; }
		fVec271SEState = 0;
		for (int j = 0; j < 2; j++) { fVec270SEState[j] = 0; }
		fVec274SEState = 0;
		for (int j = 0; j < 2; j++) { fVec273SEState[j] = 0; }
		fVec279SEState = 0;
		for (int j = 0; j < 2; j++) { fVec278SEState[j] = 0; }
		fVec284SEState = 0;
		for (int j = 0; j < 2; j++) { fVec283SEState[j] = 0; }
		fVec289SEState = 0;
		for (int j = 0; j < 2; j++) { fVec288SEState[j] = 0; }
		fVec294SEState = 0;
		for (int j = 0; j < 2; j++) { fVec293SEState[j] = 0; }
		fVec299SEState = 0;
		for (int j = 0; j < 2; j++) { fVec298SEState[j] = 0; }
		fVec302SEState = 0;
		for (int j = 0; j < 2; j++) { fVec301SEState[j] = 0; }
		fVec307SEState = 0;
		for (int j = 0; j < 2; j++) { fVec306SEState[j] = 0; }
		fVec312SEState = 0;
		for (int j = 0; j < 2; j++) { fVec311SEState[j] = 0; }
		fVec317SEState = 0;
		for (int j = 0; j < 2; j++) { fVec316SEState[j] = 0; }
		fVec322SEState = 0;
		for (int j = 0; j < 2; j++) { fVec321SEState[j] = 0; }
		fVec327SEState = 0;
		for (int j = 0; j < 2; j++) { fVec326SEState[j] = 0; }
		fVec330SEState = 0;
		for (int j = 0; j < 2; j++) { fVec329SEState[j] = 0; }
		fVec335SEState = 0;
		for (int j = 0; j < 2; j++) { fVec334SEState[j] = 0; }
		fVec340SEState = 0;
		for (int j = 0; j < 2; j++) { fVec339SEState[j] = 0; }
		fVec345SEState = 0;
		for (int j = 0; j < 2; j++) { fVec344SEState[j] = 0; }
		fVec350SEState = 0;
		for (int j = 0; j < 2; j++) { fVec349SEState[j] = 0; }
		fVec355SEState = 0;
		for (int j = 0; j < 2; j++) { fVec354SEState[j] = 0; }
		fVec358SEState = 0;
		for (int j = 0; j < 2; j++) { fVec357SEState[j] = 0; }
		fVec363SEState = 0;
		for (int j = 0; j < 2; j++) { fVec362SEState[j] = 0; }
		fVec368SEState = 0;
		for (int j = 0; j < 2; j++) { fVec367SEState[j] = 0; }
		fVec373SEState = 0;
		for (int j = 0; j < 2; j++) { fVec372SEState[j] = 0; }
		fVec378SEState = 0;
		for (int j = 0; j < 2; j++) { fVec377SEState[j] = 0; }
		fVec383SEState = 0;
		for (int j = 0; j < 2; j++) { fVec382SEState[j] = 0; }
		fVec386SEState = 0;
		for (int j = 0; j < 2; j++) { fVec385SEState[j] = 0; }
		fVec391SEState = 0;
		for (int j = 0; j < 2; j++) { fVec390SEState[j] = 0; }
		fVec396SEState = 0;
		for (int j = 0; j < 2; j++) { fVec395SEState[j] = 0; }
		fVec401SEState = 0;
		for (int j = 0; j < 2; j++) { fVec400SEState[j] = 0; }
		fVec406SEState = 0;
		for (int j = 0; j < 2; j++) { fVec405SEState[j] = 0; }
		fVec411SEState = 0;
		for (int j = 0; j < 2; j++) { fVec410SEState[j] = 0; }
		fVec414SEState = 0;
		for (int j = 0; j < 2; j++) { fVec413SEState[j] = 0; }
		fVec419SEState = 0;
		for (int j = 0; j < 2; j++) { fVec418SEState[j] = 0; }
		fVec424SEState = 0;
		for (int j = 0; j < 2; j++) { fVec423SEState[j] = 0; }
		fVec429SEState = 0;
		for (int j = 0; j < 2; j++) { fVec428SEState[j] = 0; }
		fVec434SEState = 0;
		for (int j = 0; j < 2; j++) { fVec433SEState[j] = 0; }
		fVec439SEState = 0;
		for (int j = 0; j < 2; j++) { fVec438SEState[j] = 0; }
		fVec442SEState = 0;
		for (int j = 0; j < 2; j++) { fVec441SEState[j] = 0; }
		fVec447SEState = 0;
		for (int j = 0; j < 2; j++) { fVec446SEState[j] = 0; }
		fVec452SEState = 0;
		for (int j = 0; j < 2; j++) { fVec451SEState[j] = 0; }
		fVec457SEState = 0;
		for (int j = 0; j < 2; j++) { fVec456SEState[j] = 0; }
		fVec462SEState = 0;
		for (int j = 0; j < 2; j++) { fVec461SEState[j] = 0; }
		fVec467SEState = 0;
		for (int j = 0; j < 2; j++) { fVec466SEState[j] = 0; }
		fVec470SEState = 0;
		for (int j = 0; j < 2; j++) { fVec469SEState[j] = 0; }
		fVec475SEState = 0;
		for (int j = 0; j < 2; j++) { fVec474SEState[j] = 0; }
		fVec480SEState = 0;
		for (int j = 0; j < 2; j++) { fVec479SEState[j] = 0; }
		fVec485SEState = 0;
		for (int j = 0; j < 2; j++) { fVec484SEState[j] = 0; }
		fVec490SEState = 0;
		for (int j = 0; j < 2; j++) { fVec489SEState[j] = 0; }
		fVec495SEState = 0;
		for (int j = 0; j < 2; j++) { fVec494SEState[j] = 0; }
		fVec498SEState = 0;
		for (int j = 0; j < 2; j++) { fVec497SEState[j] = 0; }
		fVec503SEState = 0;
		for (int j = 0; j < 2; j++) { fVec502SEState[j] = 0; }
		fVec508SEState = 0;
		for (int j = 0; j < 2; j++) { fVec507SEState[j] = 0; }
		fVec513SEState = 0;
		for (int j = 0; j < 2; j++) { fVec512SEState[j] = 0; }
		fVec518SEState = 0;
		for (int j = 0; j < 2; j++) { fVec517SEState[j] = 0; }
		fVec523SEState = 0;
		for (int j = 0; j < 2; j++) { fVec522SEState[j] = 0; }
		fVec526SEState = 0;
		for (int j = 0; j < 2; j++) { fVec525SEState[j] = 0; }
		fVec531SEState = 0;
		for (int j = 0; j < 2; j++) { fVec530SEState[j] = 0; }
		fVec536SEState = 0;
		for (int j = 0; j < 2; j++) { fVec535SEState[j] = 0; }
		fVec541SEState = 0;
		for (int j = 0; j < 2; j++) { fVec540SEState[j] = 0; }
		fVec546SEState = 0;
		for (int j = 0; j < 2; j++) { fVec545SEState[j] = 0; }
		fVec551SEState = 0;
		for (int j = 0; j < 2; j++) { fVec550SEState[j] = 0; }
		fVec554SEState = 0;
		for (int j = 0; j < 2; j++) { fVec553SEState[j] = 0; }
		fVec559SEState = 0;
		for (int j = 0; j < 2; j++) { fVec558SEState[j] = 0; }
		fVec564SEState = 0;
		for (int j = 0; j < 2; j++) { fVec563SEState[j] = 0; }
		fVec566SEState = 0;
		fVec570SEState = 0;
		fVec574SEState = 0;
		fVec578SEState = 0;
		fVec582SEState = 0;
		fVec586SEState = 0;
		fVec590SEState = 0;
		fVec594SEState = 0;
		fVec598SEState = 0;
		fVec602SEState = 0;
		fVec606SEState = 0;
		fVec610SEState = 0;
		fVec614SEState = 0;
		fVec618SEState = 0;
		fVec622SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("virtual_analog_oscillators");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("VIRTUAL ANALOG OSCILLATORS");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("Signal Levels");
		ui_interface->declare(&fslider6, "0", "");
		ui_interface->declare(&fslider6, "style", "vslider");
		ui_interface->addVerticalSlider("Sawtooth", &fslider6, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Pulse Train");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->declare(&fcheckbox1, "tooltip", "When checked, use 3rd-order aliasing suppression (up from 2)      See if you can hear a difference with the freq high and swept");
		ui_interface->addCheckButton("Order 3", &fcheckbox1);
		ui_interface->declare(&fslider9, "1", "");
		ui_interface->declare(&fslider9, "style", "vslider");
		ui_interface->addVerticalSlider("0x00", &fslider9, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider10, "2", "");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->addVerticalSlider("Duty Cycle", &fslider10, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider7, "2", "");
		ui_interface->declare(&fslider7, "style", "vslider");
		ui_interface->addVerticalSlider("Square", &fslider7, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider8, "3", "");
		ui_interface->declare(&fslider8, "style", "vslider");
		ui_interface->addVerticalSlider("Triangle", &fslider8, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider11, "4", "");
		ui_interface->declare(&fslider11, "style", "vslider");
		ui_interface->declare(&fslider11, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave (uses only amplitude controls)");
		ui_interface->addVerticalSlider("Pink Noise", &fslider11, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider4, "5", "");
		ui_interface->declare(&fslider4, "style", "vslider");
		ui_interface->addVerticalSlider("Ext Input", &fslider4, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("Signal Parameters");
		ui_interface->declare(0, "0", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "style", "hslider");
		ui_interface->declare(&fslider5, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider5, "unit", "dB");
		ui_interface->addHorizontalSlider("Mix Amplitude", &fslider5, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "hslider");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addHorizontalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtooth aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's effect.lib for info and references");
		ui_interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the Moog VCF has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fcheckbox2, "1", "");
		ui_interface->declare(&fcheckbox2, "tooltip", "Select moog_vcf_2b (two-biquad) implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface->addCheckButton("Use Biquads", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "2", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "If using biquads, make them normalized ladders (moog_vcf_2bn)");
		ui_interface->addCheckButton("Normalized Ladders", &fcheckbox3);
		ui_interface->closeBox();
		ui_interface->declare(&fslider13, "1", "");
		ui_interface->declare(&fslider13, "tooltip", "The VCF resonates at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).  The VCF response is flat below the corner frequency, and rolls off -24 dB per octave above.");
		ui_interface->declare(&fslider13, "unit", "PK");
		ui_interface->addHorizontalSlider("Corner Frequency", &fslider13, 25.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider12, "2", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "tooltip", "Amount of resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface->addHorizontalSlider("Corner Resonance", &fslider12, 0.9f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider14, "3", "");
		ui_interface->declare(&fslider14, "style", "knob");
		ui_interface->declare(&fslider14, "tooltip", "output level in decibels");
		ui_interface->declare(&fslider14, "unit", "dB");
		ui_interface->addHorizontalSlider("VCF Output Level", &fslider14, 5.0f, -6e+01f, 2e+01f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider16, "0", "");
		ui_interface->declare(&fslider16, "scale", "log");
		ui_interface->declare(&fslider16, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider16, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider16, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider15, "1", "");
		ui_interface->declare(&fslider15, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider15, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider15, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fVec9SE[2];
		float 	fTemp10SE; // step: 72
		float 	fVec10SE[2];
		float 	fTemp11SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp12SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp13SE; // step: 85
		float 	fSlow2BE = float(fslider2); // Zone 2, step: 89
		float 	fSlow3BE = (1.0f + (-0.01f * fSlow2BE) /* Sum */); // Zone 2, step: 91
		float 	fTemp14SE; // step: 92
		float 	fTemp15SE; // step: 94
		float 	fSlow4BE = (1.0f + -(0.01f * fSlow2BE) /* Sum */); // Zone 2, step: 98
		float 	fTemp16SE; // step: 99
		float 	fTemp17SE; // step: 101
		float 	fVec15SE[2];
		float 	fTemp18SE; // step: 108
		float 	fTemp19SE; // step: 109
		float 	fTemp20SE; // step: 110
		float 	fTemp21SE; // step: 111
		float 	fVec17SE[2];
		float 	fTemp22SE; // step: 113
		float 	fTemp23SE; // step: 114
		float 	fVec18SE[2];
		float 	fVec19SE[2];
		float 	fVec21SE[2];
		float 	fTemp24SE; // step: 126
		float 	fVec22SE[2];
		float 	fTemp25SE; // step: 130
		float 	fTemp26SE; // step: 131
		float 	fVec24SE[2];
		float 	fTemp27SE; // step: 133
		float 	fVec25SE[2];
		float 	fVec27SE[2];
		float 	fTemp28SE; // step: 141
		float 	fSlow5BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 144
		float 	fTemp29SE; // step: 145
		float 	fTemp30SE; // step: 147
		float 	fTemp31SE; // step: 148
		float 	fVec28SE[2];
		float 	fTemp32SE; // step: 154
		float 	fTemp33SE; // step: 155
		float 	fTemp34SE; // step: 156
		float 	fTemp35SE; // step: 157
		float 	fVec30SE[2];
		float 	fTemp36SE; // step: 159
		float 	fTemp37SE; // step: 160
		float 	fVec31SE[2];
		float 	fVec32SE[2];
		float 	fVec34SE[2];
		float 	fTemp38SE; // step: 172
		float 	fVec35SE[2];
		float 	fTemp39SE; // step: 177
		float 	fVec37SE[2];
		float 	fTemp40SE; // step: 182
		float 	fVec39SE[2];
		float 	fTemp41SE; // step: 185
		float 	fTemp42SE; // step: 187
		float 	fTemp43SE; // step: 189
		float 	fTemp44SE; // step: 190
		float 	fVec40SE[2];
		float 	fTemp45SE; // step: 196
		float 	fTemp46SE; // step: 197
		float 	fTemp47SE; // step: 198
		float 	fTemp48SE; // step: 199
		float 	fVec42SE[2];
		float 	fTemp49SE; // step: 202
		float 	fTemp50SE; // step: 203
		float 	fTemp51SE; // step: 205
		float 	fTemp52SE; // step: 207
		float 	fTemp53SE; // step: 209
		float 	fVec43SE[2];
		float 	fTemp54SE; // step: 216
		float 	fTemp55SE; // step: 217
		float 	fTemp56SE; // step: 218
		float 	fTemp57SE; // step: 219
		float 	fVec45SE[2];
		float 	fTemp58SE; // step: 222
		float 	fTemp59SE; // step: 223
		float 	fTemp60SE; // step: 225
		float 	fTemp61SE; // step: 226
		float 	fVec46SE[2];
		float 	fTemp62SE; // step: 232
		float 	fTemp63SE; // step: 233
		float 	fTemp64SE; // step: 234
		float 	fTemp65SE; // step: 235
		float 	fVec48SE[2];
		float 	fTemp66SE; // step: 237
		float 	fTemp67SE; // step: 238
		float 	fVec49SE[2];
		float 	fVec50SE[2];
		float 	fTemp68SE; // step: 247
		float 	fVec52SE[2];
		float 	fTemp69SE; // step: 252
		float 	fVec54SE[2];
		float 	fTemp70SE; // step: 254
		float 	fTemp71SE; // step: 255
		float 	fVec55SE[2];
		float 	fVec56SE[2];
		float 	fTemp72SE; // step: 264
		float 	fVec58SE[2];
		float 	fTemp73SE; // step: 269
		float 	fVec60SE[2];
		float 	fTemp74SE; // step: 271
		float 	fTemp75SE; // step: 272
		float 	fVec61SE[2];
		float 	fVec62SE[2];
		float 	fTemp76SE; // step: 281
		float 	fVec64SE[2];
		float 	fTemp77SE; // step: 286
		float 	fVec66SE[2];
		float 	fTemp78SI; // step: 290
		int 	iVec68SI[2];
		float 	fTemp79SI; // step: 309
		float 	fVec70SI[2];
		float 	fTemp80SI; // step: 313
		float 	fVec67SI[4];
		int 	iSlow6BE = int(float(fcheckbox0)); // Zone 2, step: 316
		float 	fSlow7BE = float(fslider4); // Zone 2, step: 319
		float 	fSlow8BE = (0.001f * powf(1e+01f,(0.05f * float(fslider5)))); // Zone 2, step: 328
		float 	fVec73SE[2];
		float 	fSlow9BE = (0.33333334f * float(fslider6)); // Zone 2, step: 338
		int 	iSlow10BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 342
		int 	iSlow11BE = (iSlow10BE >= 2); // Zone 2, step: 343
		int 	iSlow12BE = (iSlow10BE >= 1); // Zone 2, step: 344
		float 	fTemp81SC; // step: 348
		int 	iSlow13BE = (iSlow10BE >= 3); // Zone 2, step: 356
		float 	fTemp82SC; // step: 361
		float 	fTemp83SC; // step: 376
		float 	fSlow14BE = (fConst5KI * float(fslider7)); // Zone 2, step: 443
		float 	fTemp84SE; // step: 448
		float 	fTemp85SE; // step: 455
		int 	iTemp86SE; // step: 456
		float 	fTemp87SE; // step: 458
		float 	fTemp88SE; // step: 461
		float 	fTemp89SE; // step: 467
		float 	fTemp90SE; // step: 472
		float 	fTemp91SE; // step: 473
		float 	fTemp92SE; // step: 475
		float 	fTemp93SE; // step: 478
		int 	iTemp94SE; // step: 479
		float 	fTemp95SE; // step: 483
		float 	fTemp96SE; // step: 487
		float 	fTemp97SE; // step: 495
		float 	fTemp98SE; // step: 501
		float 	fTemp99SE; // step: 505
		int 	iTemp100SE; // step: 506
		float 	fTemp101SE; // step: 508
		float 	fTemp102SE; // step: 511
		float 	fTemp103SE; // step: 517
		float 	fSlow15BE = (fConst7KI * float(fslider8)); // Zone 2, step: 524
		float 	fVec103SE[2];
		float 	fVec105SE[2];
		float 	fVec107SE[2];
		float 	fSlow16BE = (fConst0KI * float(fslider9)); // Zone 2, step: 555
		float 	fSlow17BE = float(fcheckbox1); // Zone 2, step: 556
		float 	fSlow18BE = (fConst8KI * fSlow17BE); // Zone 2, step: 559
		float 	fSlow19BE = (0.01f * float(fslider10)); // Zone 2, step: 567
		float 	fVec110SE[2];
		float 	fTemp104SE; // step: 574
		float 	fTemp105SE; // step: 578
		int 	iTemp106SE; // step: 579
		float 	fTemp107SE; // step: 580
		float 	fTemp108SE; // step: 582
		float 	fTemp109SE; // step: 588
		float 	fTemp110SE; // step: 593
		int 	iTemp111SE; // step: 594
		float 	fTemp112SE; // step: 608
		float 	fTemp113SE; // step: 612
		int 	iTemp114SE; // step: 613
		float 	fTemp115SE; // step: 618
		float 	fTemp116SE; // step: 621
		float 	fTemp117SE; // step: 627
		int 	iTemp118SE; // step: 628
		float 	fTemp119SE; // step: 640
		int 	iTemp120SE; // step: 641
		float 	fTemp121SE; // step: 642
		float 	fTemp122SE; // step: 644
		float 	fTemp123SE; // step: 650
		float 	fTemp124SE; // step: 655
		int 	iTemp125SE; // step: 656
		float 	fSlow20BE = (0.083333336f * (1.0f + -fSlow17BE /* Sum */)); // Zone 2, step: 664
		float 	fSlow21BE = float(fslider11); // Zone 2, step: 687
		float 	fTemp126SE; // step: 702
		float 	fTemp127SE; // step: 703
		float 	fSlow22BE = float(fslider12); // Zone 2, step: 707
		float 	fSlow23BE = std::min(1.4127994f, (1.4142135f * fSlow22BE)); // Zone 2, step: 709
		float 	fSlow24BE = (1.4142135f * fSlow23BE); // Zone 2, step: 710
		float 	fSlow25BE = powf(fSlow23BE,2.0f); // Zone 2, step: 711
		float 	fSlow26BE = (0.44f * powf(2.0f,(0.083333336f * (float(fslider13) + -49.0f /* Sum */)))); // Zone 2, step: 721
		float 	fVec134SE[2];
		float 	fTemp128SE; // step: 727
		float 	fTemp129SE; // step: 731
		float 	fTemp130SE; // step: 732
		float 	fTemp131SE; // step: 735
		float 	fTemp132SE; // step: 739
		float 	fTemp133SE; // step: 744
		float 	fVec136SE[2];
		float 	fTemp134SE; // step: 755
		float 	fVec137SE[3];
		float 	fTemp135SE; // step: 761
		float 	fVec142SE[2];
		float 	fTemp136SE; // step: 779
		float 	fVec141SE[3];
		float 	fSlow27BE = powf((1.4127994f * fSlow22BE),2.0f); // Zone 2, step: 783
		float 	fSlow28BE = (1.998f * fSlow22BE); // Zone 2, step: 785
		float 	fTemp137SE; // step: 788
		float 	fTemp138SE; // step: 789
		float 	fTemp139SE; // step: 797
		float 	fTemp140SE; // step: 798
		float 	fTemp141SE; // step: 800
		float 	fTemp142SE; // step: 803
		float 	fTemp143SE; // step: 805
		float 	fTemp144SE; // step: 811
		float 	fTemp145SE; // step: 813
		float 	fTemp146SE; // step: 815
		float 	fTemp147SE; // step: 821
		float 	fTemp148SE; // step: 824
		float 	fTemp149SE; // step: 826
		float 	fVec145SE[2];
		float 	fVec146SE[2];
		float 	fVec144SE[2];
		float 	fVec148SE[2];
		float 	fTemp150SE; // step: 847
		float 	fTemp151SE; // step: 849
		float 	fTemp152SE; // step: 863
		float 	fTemp153SE; // step: 866
		float 	fTemp154SE; // step: 870
		float 	fTemp155SE; // step: 871
		float 	fTemp156SE; // step: 873
		float 	fTemp157SE; // step: 876
		float 	fTemp158SE; // step: 878
		float 	fTemp159SE; // step: 885
		float 	fTemp160SE; // step: 886
		float 	fTemp161SE; // step: 892
		float 	fTemp162SE; // step: 895
		float 	fTemp163SE; // step: 897
		float 	fVec154SE[2];
		float 	fVec155SE[2];
		float 	fSlow29BE = (-1.998f * fSlow22BE); // Zone 2, step: 907
		float 	fTemp164SE; // step: 908
		float 	fTemp165SE; // step: 911
		float 	fTemp166SE; // step: 913
		float 	fVec153SE[2];
		float 	fVec157SE[2];
		float 	fSlow30BE = (0.001f * powf(1e+01f,(0.05f * float(fslider14)))); // Zone 2, step: 931
		float 	fVec158SE[2];
		int 	iSlow31BE = int(float(fcheckbox2)); // Zone 2, step: 939
		float 	fTemp167SE; // step: 942
		float 	fTemp168SE; // step: 944
		float 	fSlow32BE = (4.0f * std::max(0.0f, std::min(powf(fSlow22BE,4.0f), 0.999999f))); // Zone 2, step: 952
		float 	fVec160SE[2];
		float 	fVec163SE[2];
		float 	fVec165SE[2];
		float 	fVec167SE[2];
		float 	fVec161SE[2];
		int 	iSlow33BE = int(float(fcheckbox3)); // Zone 2, step: 983
		float 	fSlow34BE = (-1.4142135f * fSlow23BE); // Zone 2, step: 985
		float 	fTemp169SE; // step: 1005
		float 	fTemp170SE; // step: 1027
		float 	fTemp171SE; // step: 1042
		float 	fVec177SE[2];
		float 	fTemp172SE; // step: 1057
		float 	fVec176SE[3];
		float 	fTemp173SE; // step: 1082
		float 	fVec182SE[2];
		float 	fTemp174SE; // step: 1094
		float 	fVec181SE[3];
		float 	fTemp175SE; // step: 1118
		float 	fVec187SE[2];
		float 	fTemp176SE; // step: 1130
		float 	fVec186SE[3];
		float 	fTemp177SE; // step: 1141
		float 	fVec190SE[2];
		float 	fTemp178SE; // step: 1153
		float 	fVec189SE[3];
		float 	fTemp179SE; // step: 1178
		float 	fVec195SE[2];
		float 	fTemp180SE; // step: 1190
		float 	fVec194SE[3];
		float 	fTemp181SE; // step: 1212
		float 	fVec200SE[2];
		float 	fTemp182SE; // step: 1224
		float 	fVec199SE[3];
		float 	fTemp183SE; // step: 1235
		float 	fTemp184SE; // step: 1247
		float 	fVec205SE[2];
		float 	fTemp185SE; // step: 1262
		float 	fVec204SE[3];
		float 	fTemp186SE; // step: 1282
		float 	fVec210SE[2];
		float 	fTemp187SE; // step: 1294
		float 	fVec209SE[3];
		float 	fTemp188SE; // step: 1314
		float 	fVec215SE[2];
		float 	fTemp189SE; // step: 1326
		float 	fVec214SE[3];
		float 	fTemp190SE; // step: 1334
		float 	fVec218SE[2];
		float 	fTemp191SE; // step: 1346
		float 	fVec217SE[3];
		float 	fTemp192SE; // step: 1366
		float 	fVec223SE[2];
		float 	fTemp193SE; // step: 1378
		float 	fVec222SE[3];
		float 	fTemp194SE; // step: 1396
		float 	fVec228SE[2];
		float 	fTemp195SE; // step: 1408
		float 	fVec227SE[3];
		float 	fTemp196SE; // step: 1418
		float 	fTemp197SE; // step: 1430
		float 	fVec233SE[2];
		float 	fTemp198SE; // step: 1445
		float 	fVec232SE[3];
		float 	fTemp199SE; // step: 1465
		float 	fVec238SE[2];
		float 	fTemp200SE; // step: 1477
		float 	fVec237SE[3];
		float 	fTemp201SE; // step: 1497
		float 	fVec243SE[2];
		float 	fTemp202SE; // step: 1509
		float 	fVec242SE[3];
		float 	fTemp203SE; // step: 1517
		float 	fVec246SE[2];
		float 	fTemp204SE; // step: 1529
		float 	fVec245SE[3];
		float 	fTemp205SE; // step: 1549
		float 	fVec251SE[2];
		float 	fTemp206SE; // step: 1561
		float 	fVec250SE[3];
		float 	fTemp207SE; // step: 1579
		float 	fVec256SE[2];
		float 	fTemp208SE; // step: 1591
		float 	fVec255SE[3];
		float 	fTemp209SE; // step: 1601
		float 	fTemp210SE; // step: 1613
		float 	fVec261SE[2];
		float 	fTemp211SE; // step: 1628
		float 	fVec260SE[3];
		float 	fTemp212SE; // step: 1648
		float 	fVec266SE[2];
		float 	fTemp213SE; // step: 1660
		float 	fVec265SE[3];
		float 	fTemp214SE; // step: 1680
		float 	fVec271SE[2];
		float 	fTemp215SE; // step: 1692
		float 	fVec270SE[3];
		float 	fTemp216SE; // step: 1700
		float 	fVec274SE[2];
		float 	fTemp217SE; // step: 1712
		float 	fVec273SE[3];
		float 	fTemp218SE; // step: 1732
		float 	fVec279SE[2];
		float 	fTemp219SE; // step: 1744
		float 	fVec278SE[3];
		float 	fTemp220SE; // step: 1762
		float 	fVec284SE[2];
		float 	fTemp221SE; // step: 1774
		float 	fVec283SE[3];
		float 	fTemp222SE; // step: 1784
		float 	fTemp223SE; // step: 1796
		float 	fVec289SE[2];
		float 	fTemp224SE; // step: 1811
		float 	fVec288SE[3];
		float 	fTemp225SE; // step: 1831
		float 	fVec294SE[2];
		float 	fTemp226SE; // step: 1843
		float 	fVec293SE[3];
		float 	fTemp227SE; // step: 1863
		float 	fVec299SE[2];
		float 	fTemp228SE; // step: 1875
		float 	fVec298SE[3];
		float 	fTemp229SE; // step: 1883
		float 	fVec302SE[2];
		float 	fTemp230SE; // step: 1895
		float 	fVec301SE[3];
		float 	fTemp231SE; // step: 1915
		float 	fVec307SE[2];
		float 	fTemp232SE; // step: 1927
		float 	fVec306SE[3];
		float 	fTemp233SE; // step: 1945
		float 	fVec312SE[2];
		float 	fTemp234SE; // step: 1957
		float 	fVec311SE[3];
		float 	fTemp235SE; // step: 1967
		float 	fTemp236SE; // step: 1979
		float 	fVec317SE[2];
		float 	fTemp237SE; // step: 1994
		float 	fVec316SE[3];
		float 	fTemp238SE; // step: 2014
		float 	fVec322SE[2];
		float 	fTemp239SE; // step: 2026
		float 	fVec321SE[3];
		float 	fTemp240SE; // step: 2046
		float 	fVec327SE[2];
		float 	fTemp241SE; // step: 2058
		float 	fVec326SE[3];
		float 	fTemp242SE; // step: 2066
		float 	fVec330SE[2];
		float 	fTemp243SE; // step: 2078
		float 	fVec329SE[3];
		float 	fTemp244SE; // step: 2098
		float 	fVec335SE[2];
		float 	fTemp245SE; // step: 2110
		float 	fVec334SE[3];
		float 	fTemp246SE; // step: 2128
		float 	fVec340SE[2];
		float 	fTemp247SE; // step: 2140
		float 	fVec339SE[3];
		float 	fTemp248SE; // step: 2150
		float 	fTemp249SE; // step: 2162
		float 	fVec345SE[2];
		float 	fTemp250SE; // step: 2177
		float 	fVec344SE[3];
		float 	fTemp251SE; // step: 2197
		float 	fVec350SE[2];
		float 	fTemp252SE; // step: 2209
		float 	fVec349SE[3];
		float 	fTemp253SE; // step: 2229
		float 	fVec355SE[2];
		float 	fTemp254SE; // step: 2241
		float 	fVec354SE[3];
		float 	fTemp255SE; // step: 2249
		float 	fVec358SE[2];
		float 	fTemp256SE; // step: 2261
		float 	fVec357SE[3];
		float 	fTemp257SE; // step: 2281
		float 	fVec363SE[2];
		float 	fTemp258SE; // step: 2293
		float 	fVec362SE[3];
		float 	fTemp259SE; // step: 2311
		float 	fVec368SE[2];
		float 	fTemp260SE; // step: 2323
		float 	fVec367SE[3];
		float 	fTemp261SE; // step: 2333
		float 	fTemp262SE; // step: 2345
		float 	fVec373SE[2];
		float 	fTemp263SE; // step: 2360
		float 	fVec372SE[3];
		float 	fTemp264SE; // step: 2380
		float 	fVec378SE[2];
		float 	fTemp265SE; // step: 2392
		float 	fVec377SE[3];
		float 	fTemp266SE; // step: 2412
		float 	fVec383SE[2];
		float 	fTemp267SE; // step: 2424
		float 	fVec382SE[3];
		float 	fTemp268SE; // step: 2432
		float 	fVec386SE[2];
		float 	fTemp269SE; // step: 2444
		float 	fVec385SE[3];
		float 	fTemp270SE; // step: 2464
		float 	fVec391SE[2];
		float 	fTemp271SE; // step: 2476
		float 	fVec390SE[3];
		float 	fTemp272SE; // step: 2494
		float 	fVec396SE[2];
		float 	fTemp273SE; // step: 2506
		float 	fVec395SE[3];
		float 	fTemp274SE; // step: 2516
		float 	fTemp275SE; // step: 2528
		float 	fVec401SE[2];
		float 	fTemp276SE; // step: 2543
		float 	fVec400SE[3];
		float 	fTemp277SE; // step: 2563
		float 	fVec406SE[2];
		float 	fTemp278SE; // step: 2575
		float 	fVec405SE[3];
		float 	fTemp279SE; // step: 2595
		float 	fVec411SE[2];
		float 	fTemp280SE; // step: 2607
		float 	fVec410SE[3];
		float 	fTemp281SE; // step: 2615
		float 	fVec414SE[2];
		float 	fTemp282SE; // step: 2627
		float 	fVec413SE[3];
		float 	fTemp283SE; // step: 2647
		float 	fVec419SE[2];
		float 	fTemp284SE; // step: 2659
		float 	fVec418SE[3];
		float 	fTemp285SE; // step: 2677
		float 	fVec424SE[2];
		float 	fTemp286SE; // step: 2689
		float 	fVec423SE[3];
		float 	fTemp287SE; // step: 2699
		float 	fTemp288SE; // step: 2711
		float 	fVec429SE[2];
		float 	fTemp289SE; // step: 2726
		float 	fVec428SE[3];
		float 	fTemp290SE; // step: 2746
		float 	fVec434SE[2];
		float 	fTemp291SE; // step: 2758
		float 	fVec433SE[3];
		float 	fTemp292SE; // step: 2778
		float 	fVec439SE[2];
		float 	fTemp293SE; // step: 2790
		float 	fVec438SE[3];
		float 	fTemp294SE; // step: 2798
		float 	fVec442SE[2];
		float 	fTemp295SE; // step: 2810
		float 	fVec441SE[3];
		float 	fTemp296SE; // step: 2830
		float 	fVec447SE[2];
		float 	fTemp297SE; // step: 2842
		float 	fVec446SE[3];
		float 	fTemp298SE; // step: 2860
		float 	fVec452SE[2];
		float 	fTemp299SE; // step: 2872
		float 	fVec451SE[3];
		float 	fTemp300SE; // step: 2882
		float 	fTemp301SE; // step: 2894
		float 	fVec457SE[2];
		float 	fTemp302SE; // step: 2909
		float 	fVec456SE[3];
		float 	fTemp303SE; // step: 2929
		float 	fVec462SE[2];
		float 	fTemp304SE; // step: 2941
		float 	fVec461SE[3];
		float 	fTemp305SE; // step: 2961
		float 	fVec467SE[2];
		float 	fTemp306SE; // step: 2973
		float 	fVec466SE[3];
		float 	fTemp307SE; // step: 2981
		float 	fVec470SE[2];
		float 	fTemp308SE; // step: 2993
		float 	fVec469SE[3];
		float 	fTemp309SE; // step: 3013
		float 	fVec475SE[2];
		float 	fTemp310SE; // step: 3025
		float 	fVec474SE[3];
		float 	fTemp311SE; // step: 3043
		float 	fVec480SE[2];
		float 	fTemp312SE; // step: 3055
		float 	fVec479SE[3];
		float 	fTemp313SE; // step: 3065
		float 	fTemp314SE; // step: 3077
		float 	fVec485SE[2];
		float 	fTemp315SE; // step: 3092
		float 	fVec484SE[3];
		float 	fTemp316SE; // step: 3112
		float 	fVec490SE[2];
		float 	fTemp317SE; // step: 3124
		float 	fVec489SE[3];
		float 	fTemp318SE; // step: 3144
		float 	fVec495SE[2];
		float 	fTemp319SE; // step: 3156
		float 	fVec494SE[3];
		float 	fTemp320SE; // step: 3164
		float 	fVec498SE[2];
		float 	fTemp321SE; // step: 3176
		float 	fVec497SE[3];
		float 	fTemp322SE; // step: 3196
		float 	fVec503SE[2];
		float 	fTemp323SE; // step: 3208
		float 	fVec502SE[3];
		float 	fTemp324SE; // step: 3226
		float 	fVec508SE[2];
		float 	fTemp325SE; // step: 3238
		float 	fVec507SE[3];
		float 	fTemp326SE; // step: 3248
		float 	fTemp327SE; // step: 3260
		float 	fVec513SE[2];
		float 	fTemp328SE; // step: 3275
		float 	fVec512SE[3];
		float 	fTemp329SE; // step: 3295
		float 	fVec518SE[2];
		float 	fTemp330SE; // step: 3307
		float 	fVec517SE[3];
		float 	fTemp331SE; // step: 3327
		float 	fVec523SE[2];
		float 	fTemp332SE; // step: 3339
		float 	fVec522SE[3];
		float 	fTemp333SE; // step: 3347
		float 	fVec526SE[2];
		float 	fTemp334SE; // step: 3359
		float 	fVec525SE[3];
		float 	fTemp335SE; // step: 3379
		float 	fVec531SE[2];
		float 	fTemp336SE; // step: 3391
		float 	fVec530SE[3];
		float 	fTemp337SE; // step: 3409
		float 	fVec536SE[2];
		float 	fTemp338SE; // step: 3421
		float 	fVec535SE[3];
		float 	fTemp339SE; // step: 3431
		float 	fTemp340SE; // step: 3443
		float 	fVec541SE[2];
		float 	fTemp341SE; // step: 3458
		float 	fVec540SE[3];
		float 	fTemp342SE; // step: 3478
		float 	fVec546SE[2];
		float 	fTemp343SE; // step: 3490
		float 	fVec545SE[3];
		float 	fTemp344SE; // step: 3510
		float 	fVec551SE[2];
		float 	fTemp345SE; // step: 3522
		float 	fVec550SE[3];
		float 	fTemp346SE; // step: 3530
		float 	fVec554SE[2];
		float 	fTemp347SE; // step: 3542
		float 	fVec553SE[3];
		float 	fTemp348SE; // step: 3562
		float 	fVec559SE[2];
		float 	fTemp349SE; // step: 3574
		float 	fVec558SE[3];
		float 	fTemp350SE; // step: 3592
		float 	fVec564SE[2];
		float 	fTemp351SE; // step: 3604
		float 	fVec563SE[3];
		float 	fSlow35BE = float(fslider15); // Zone 2, step: 3608
		float 	fSlow36BE = (fConst499KI / float(fslider16)); // Zone 2, step: 3612
		float 	fSlow37BE = ((1) ? expf(-fSlow36BE) : 0.0f); // Zone 2, step: 3615
		float 	fSlow38BE = (1.0f + -(expf(-fSlow36BE)) /* Sum */); // Zone 2, step: 3636
		float 	fVec566SE[2];
		float 	fSlow39SE;
		float 	fVec570SE[2];
		float 	fSlow40SE;
		float 	fVec574SE[2];
		float 	fSlow41SE;
		float 	fVec578SE[2];
		float 	fSlow42SE;
		float 	fVec582SE[2];
		float 	fSlow43SE;
		float 	fVec586SE[2];
		float 	fSlow44SE;
		float 	fVec590SE[2];
		float 	fSlow45SE;
		float 	fVec594SE[2];
		float 	fSlow46SE;
		float 	fVec598SE[2];
		float 	fSlow47SE;
		float 	fVec602SE[2];
		float 	fSlow48SE;
		float 	fVec606SE[2];
		float 	fSlow49SE;
		float 	fVec610SE[2];
		float 	fSlow50SE;
		float 	fVec614SE[2];
		float 	fSlow51SE;
		float 	fVec618SE[2];
		float 	fSlow52SE;
		float 	fVec622SE[2];
		float 	fSlow53SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec15SE[1] = fVec15SEState;
		fVec17SE[1] = fVec17SEState;
		fVec18SE[1] = fVec18SEState;
		fVec19SE[1] = fVec19SEState;
		fVec21SE[1] = fVec21SEState;
		fVec22SE[1] = fVec22SEState;
		fVec24SE[1] = fVec24SEState;
		fVec25SE[1] = fVec25SEState;
		fVec27SE[1] = fVec27SEState;
		fVec28SE[1] = fVec28SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec32SE[1] = fVec32SEState;
		fVec34SE[1] = fVec34SEState;
		fVec35SE[1] = fVec35SEState;
		fVec37SE[1] = fVec37SEState;
		fVec39SE[1] = fVec39SEState;
		fVec40SE[1] = fVec40SEState;
		fVec42SE[1] = fVec42SEState;
		fVec43SE[1] = fVec43SEState;
		fVec45SE[1] = fVec45SEState;
		fVec46SE[1] = fVec46SEState;
		fVec48SE[1] = fVec48SEState;
		fVec49SE[1] = fVec49SEState;
		fVec50SE[1] = fVec50SEState;
		fVec52SE[1] = fVec52SEState;
		fVec54SE[1] = fVec54SEState;
		fVec55SE[1] = fVec55SEState;
		fVec56SE[1] = fVec56SEState;
		fVec58SE[1] = fVec58SEState;
		fVec60SE[1] = fVec60SEState;
		fVec61SE[1] = fVec61SEState;
		fVec62SE[1] = fVec62SEState;
		fVec64SE[1] = fVec64SEState;
		fVec66SE[1] = fVec66SEState;
		iVec68SI[1] = iVec68SIState;
		fVec70SI[1] = fVec70SIState;
		fVec67SI[1] = fVec67SIState[0];
		fVec67SI[2] = fVec67SIState[1];
		fVec67SI[3] = fVec67SIState[2];
		fVec73SE[1] = fVec73SEState;
		fVec103SE[1] = fVec103SEState;
		fVec105SE[1] = fVec105SEState;
		fVec107SE[1] = fVec107SEState;
		fVec110SE[1] = fVec110SEState;
		fVec134SE[1] = fVec134SEState;
		fVec136SE[1] = fVec136SEState;
		fVec137SE[1] = fVec137SEState[0];
		fVec137SE[2] = fVec137SEState[1];
		fVec142SE[1] = fVec142SEState;
		fVec141SE[1] = fVec141SEState[0];
		fVec141SE[2] = fVec141SEState[1];
		fVec145SE[1] = fVec145SEState;
		fVec146SE[1] = fVec146SEState;
		fVec144SE[1] = fVec144SEState;
		fVec148SE[1] = fVec148SEState;
		fVec154SE[1] = fVec154SEState;
		fVec155SE[1] = fVec155SEState;
		fVec153SE[1] = fVec153SEState;
		fVec157SE[1] = fVec157SEState;
		fVec158SE[1] = fVec158SEState;
		fVec160SE[1] = fVec160SEState;
		fVec163SE[1] = fVec163SEState;
		fVec165SE[1] = fVec165SEState;
		fVec167SE[1] = fVec167SEState;
		fVec161SE[1] = fVec161SEState;
		fVec177SE[1] = fVec177SEState;
		fVec176SE[1] = fVec176SEState[0];
		fVec176SE[2] = fVec176SEState[1];
		fVec182SE[1] = fVec182SEState;
		fVec181SE[1] = fVec181SEState[0];
		fVec181SE[2] = fVec181SEState[1];
		fVec187SE[1] = fVec187SEState;
		fVec186SE[1] = fVec186SEState[0];
		fVec186SE[2] = fVec186SEState[1];
		fVec190SE[1] = fVec190SEState;
		fVec189SE[1] = fVec189SEState[0];
		fVec189SE[2] = fVec189SEState[1];
		fVec195SE[1] = fVec195SEState;
		fVec194SE[1] = fVec194SEState[0];
		fVec194SE[2] = fVec194SEState[1];
		fVec200SE[1] = fVec200SEState;
		fVec199SE[1] = fVec199SEState[0];
		fVec199SE[2] = fVec199SEState[1];
		fVec205SE[1] = fVec205SEState;
		fVec204SE[1] = fVec204SEState[0];
		fVec204SE[2] = fVec204SEState[1];
		fVec210SE[1] = fVec210SEState;
		fVec209SE[1] = fVec209SEState[0];
		fVec209SE[2] = fVec209SEState[1];
		fVec215SE[1] = fVec215SEState;
		fVec214SE[1] = fVec214SEState[0];
		fVec214SE[2] = fVec214SEState[1];
		fVec218SE[1] = fVec218SEState;
		fVec217SE[1] = fVec217SEState[0];
		fVec217SE[2] = fVec217SEState[1];
		fVec223SE[1] = fVec223SEState;
		fVec222SE[1] = fVec222SEState[0];
		fVec222SE[2] = fVec222SEState[1];
		fVec228SE[1] = fVec228SEState;
		fVec227SE[1] = fVec227SEState[0];
		fVec227SE[2] = fVec227SEState[1];
		fVec233SE[1] = fVec233SEState;
		fVec232SE[1] = fVec232SEState[0];
		fVec232SE[2] = fVec232SEState[1];
		fVec238SE[1] = fVec238SEState;
		fVec237SE[1] = fVec237SEState[0];
		fVec237SE[2] = fVec237SEState[1];
		fVec243SE[1] = fVec243SEState;
		fVec242SE[1] = fVec242SEState[0];
		fVec242SE[2] = fVec242SEState[1];
		fVec246SE[1] = fVec246SEState;
		fVec245SE[1] = fVec245SEState[0];
		fVec245SE[2] = fVec245SEState[1];
		fVec251SE[1] = fVec251SEState;
		fVec250SE[1] = fVec250SEState[0];
		fVec250SE[2] = fVec250SEState[1];
		fVec256SE[1] = fVec256SEState;
		fVec255SE[1] = fVec255SEState[0];
		fVec255SE[2] = fVec255SEState[1];
		fVec261SE[1] = fVec261SEState;
		fVec260SE[1] = fVec260SEState[0];
		fVec260SE[2] = fVec260SEState[1];
		fVec266SE[1] = fVec266SEState;
		fVec265SE[1] = fVec265SEState[0];
		fVec265SE[2] = fVec265SEState[1];
		fVec271SE[1] = fVec271SEState;
		fVec270SE[1] = fVec270SEState[0];
		fVec270SE[2] = fVec270SEState[1];
		fVec274SE[1] = fVec274SEState;
		fVec273SE[1] = fVec273SEState[0];
		fVec273SE[2] = fVec273SEState[1];
		fVec279SE[1] = fVec279SEState;
		fVec278SE[1] = fVec278SEState[0];
		fVec278SE[2] = fVec278SEState[1];
		fVec284SE[1] = fVec284SEState;
		fVec283SE[1] = fVec283SEState[0];
		fVec283SE[2] = fVec283SEState[1];
		fVec289SE[1] = fVec289SEState;
		fVec288SE[1] = fVec288SEState[0];
		fVec288SE[2] = fVec288SEState[1];
		fVec294SE[1] = fVec294SEState;
		fVec293SE[1] = fVec293SEState[0];
		fVec293SE[2] = fVec293SEState[1];
		fVec299SE[1] = fVec299SEState;
		fVec298SE[1] = fVec298SEState[0];
		fVec298SE[2] = fVec298SEState[1];
		fVec302SE[1] = fVec302SEState;
		fVec301SE[1] = fVec301SEState[0];
		fVec301SE[2] = fVec301SEState[1];
		fVec307SE[1] = fVec307SEState;
		fVec306SE[1] = fVec306SEState[0];
		fVec306SE[2] = fVec306SEState[1];
		fVec312SE[1] = fVec312SEState;
		fVec311SE[1] = fVec311SEState[0];
		fVec311SE[2] = fVec311SEState[1];
		fVec317SE[1] = fVec317SEState;
		fVec316SE[1] = fVec316SEState[0];
		fVec316SE[2] = fVec316SEState[1];
		fVec322SE[1] = fVec322SEState;
		fVec321SE[1] = fVec321SEState[0];
		fVec321SE[2] = fVec321SEState[1];
		fVec327SE[1] = fVec327SEState;
		fVec326SE[1] = fVec326SEState[0];
		fVec326SE[2] = fVec326SEState[1];
		fVec330SE[1] = fVec330SEState;
		fVec329SE[1] = fVec329SEState[0];
		fVec329SE[2] = fVec329SEState[1];
		fVec335SE[1] = fVec335SEState;
		fVec334SE[1] = fVec334SEState[0];
		fVec334SE[2] = fVec334SEState[1];
		fVec340SE[1] = fVec340SEState;
		fVec339SE[1] = fVec339SEState[0];
		fVec339SE[2] = fVec339SEState[1];
		fVec345SE[1] = fVec345SEState;
		fVec344SE[1] = fVec344SEState[0];
		fVec344SE[2] = fVec344SEState[1];
		fVec350SE[1] = fVec350SEState;
		fVec349SE[1] = fVec349SEState[0];
		fVec349SE[2] = fVec349SEState[1];
		fVec355SE[1] = fVec355SEState;
		fVec354SE[1] = fVec354SEState[0];
		fVec354SE[2] = fVec354SEState[1];
		fVec358SE[1] = fVec358SEState;
		fVec357SE[1] = fVec357SEState[0];
		fVec357SE[2] = fVec357SEState[1];
		fVec363SE[1] = fVec363SEState;
		fVec362SE[1] = fVec362SEState[0];
		fVec362SE[2] = fVec362SEState[1];
		fVec368SE[1] = fVec368SEState;
		fVec367SE[1] = fVec367SEState[0];
		fVec367SE[2] = fVec367SEState[1];
		fVec373SE[1] = fVec373SEState;
		fVec372SE[1] = fVec372SEState[0];
		fVec372SE[2] = fVec372SEState[1];
		fVec378SE[1] = fVec378SEState;
		fVec377SE[1] = fVec377SEState[0];
		fVec377SE[2] = fVec377SEState[1];
		fVec383SE[1] = fVec383SEState;
		fVec382SE[1] = fVec382SEState[0];
		fVec382SE[2] = fVec382SEState[1];
		fVec386SE[1] = fVec386SEState;
		fVec385SE[1] = fVec385SEState[0];
		fVec385SE[2] = fVec385SEState[1];
		fVec391SE[1] = fVec391SEState;
		fVec390SE[1] = fVec390SEState[0];
		fVec390SE[2] = fVec390SEState[1];
		fVec396SE[1] = fVec396SEState;
		fVec395SE[1] = fVec395SEState[0];
		fVec395SE[2] = fVec395SEState[1];
		fVec401SE[1] = fVec401SEState;
		fVec400SE[1] = fVec400SEState[0];
		fVec400SE[2] = fVec400SEState[1];
		fVec406SE[1] = fVec406SEState;
		fVec405SE[1] = fVec405SEState[0];
		fVec405SE[2] = fVec405SEState[1];
		fVec411SE[1] = fVec411SEState;
		fVec410SE[1] = fVec410SEState[0];
		fVec410SE[2] = fVec410SEState[1];
		fVec414SE[1] = fVec414SEState;
		fVec413SE[1] = fVec413SEState[0];
		fVec413SE[2] = fVec413SEState[1];
		fVec419SE[1] = fVec419SEState;
		fVec418SE[1] = fVec418SEState[0];
		fVec418SE[2] = fVec418SEState[1];
		fVec424SE[1] = fVec424SEState;
		fVec423SE[1] = fVec423SEState[0];
		fVec423SE[2] = fVec423SEState[1];
		fVec429SE[1] = fVec429SEState;
		fVec428SE[1] = fVec428SEState[0];
		fVec428SE[2] = fVec428SEState[1];
		fVec434SE[1] = fVec434SEState;
		fVec433SE[1] = fVec433SEState[0];
		fVec433SE[2] = fVec433SEState[1];
		fVec439SE[1] = fVec439SEState;
		fVec438SE[1] = fVec438SEState[0];
		fVec438SE[2] = fVec438SEState[1];
		fVec442SE[1] = fVec442SEState;
		fVec441SE[1] = fVec441SEState[0];
		fVec441SE[2] = fVec441SEState[1];
		fVec447SE[1] = fVec447SEState;
		fVec446SE[1] = fVec446SEState[0];
		fVec446SE[2] = fVec446SEState[1];
		fVec452SE[1] = fVec452SEState;
		fVec451SE[1] = fVec451SEState[0];
		fVec451SE[2] = fVec451SEState[1];
		fVec457SE[1] = fVec457SEState;
		fVec456SE[1] = fVec456SEState[0];
		fVec456SE[2] = fVec456SEState[1];
		fVec462SE[1] = fVec462SEState;
		fVec461SE[1] = fVec461SEState[0];
		fVec461SE[2] = fVec461SEState[1];
		fVec467SE[1] = fVec467SEState;
		fVec466SE[1] = fVec466SEState[0];
		fVec466SE[2] = fVec466SEState[1];
		fVec470SE[1] = fVec470SEState;
		fVec469SE[1] = fVec469SEState[0];
		fVec469SE[2] = fVec469SEState[1];
		fVec475SE[1] = fVec475SEState;
		fVec474SE[1] = fVec474SEState[0];
		fVec474SE[2] = fVec474SEState[1];
		fVec480SE[1] = fVec480SEState;
		fVec479SE[1] = fVec479SEState[0];
		fVec479SE[2] = fVec479SEState[1];
		fVec485SE[1] = fVec485SEState;
		fVec484SE[1] = fVec484SEState[0];
		fVec484SE[2] = fVec484SEState[1];
		fVec490SE[1] = fVec490SEState;
		fVec489SE[1] = fVec489SEState[0];
		fVec489SE[2] = fVec489SEState[1];
		fVec495SE[1] = fVec495SEState;
		fVec494SE[1] = fVec494SEState[0];
		fVec494SE[2] = fVec494SEState[1];
		fVec498SE[1] = fVec498SEState;
		fVec497SE[1] = fVec497SEState[0];
		fVec497SE[2] = fVec497SEState[1];
		fVec503SE[1] = fVec503SEState;
		fVec502SE[1] = fVec502SEState[0];
		fVec502SE[2] = fVec502SEState[1];
		fVec508SE[1] = fVec508SEState;
		fVec507SE[1] = fVec507SEState[0];
		fVec507SE[2] = fVec507SEState[1];
		fVec513SE[1] = fVec513SEState;
		fVec512SE[1] = fVec512SEState[0];
		fVec512SE[2] = fVec512SEState[1];
		fVec518SE[1] = fVec518SEState;
		fVec517SE[1] = fVec517SEState[0];
		fVec517SE[2] = fVec517SEState[1];
		fVec523SE[1] = fVec523SEState;
		fVec522SE[1] = fVec522SEState[0];
		fVec522SE[2] = fVec522SEState[1];
		fVec526SE[1] = fVec526SEState;
		fVec525SE[1] = fVec525SEState[0];
		fVec525SE[2] = fVec525SEState[1];
		fVec531SE[1] = fVec531SEState;
		fVec530SE[1] = fVec530SEState[0];
		fVec530SE[2] = fVec530SEState[1];
		fVec536SE[1] = fVec536SEState;
		fVec535SE[1] = fVec535SEState[0];
		fVec535SE[2] = fVec535SEState[1];
		fVec541SE[1] = fVec541SEState;
		fVec540SE[1] = fVec540SEState[0];
		fVec540SE[2] = fVec540SEState[1];
		fVec546SE[1] = fVec546SEState;
		fVec545SE[1] = fVec545SEState[0];
		fVec545SE[2] = fVec545SEState[1];
		fVec551SE[1] = fVec551SEState;
		fVec550SE[1] = fVec550SEState[0];
		fVec550SE[2] = fVec550SEState[1];
		fVec554SE[1] = fVec554SEState;
		fVec553SE[1] = fVec553SEState[0];
		fVec553SE[2] = fVec553SEState[1];
		fVec559SE[1] = fVec559SEState;
		fVec558SE[1] = fVec558SEState[0];
		fVec558SE[2] = fVec558SEState[1];
		fVec564SE[1] = fVec564SEState;
		fVec563SE[1] = fVec563SEState[0];
		fVec563SE[2] = fVec563SEState[1];
		fVec566SE[1] = fVec566SEState;
		fVec570SE[1] = fVec570SEState;
		fVec574SE[1] = fVec574SEState;
		fVec578SE[1] = fVec578SEState;
		fVec582SE[1] = fVec582SEState;
		fVec586SE[1] = fVec586SEState;
		fVec590SE[1] = fVec590SEState;
		fVec594SE[1] = fVec594SEState;
		fVec598SE[1] = fVec598SEState;
		fVec602SE[1] = fVec602SEState;
		fVec606SE[1] = fVec606SEState;
		fVec610SE[1] = fVec610SEState;
		fVec614SE[1] = fVec614SEState;
		fVec618SE[1] = fVec618SEState;
		fVec622SE[1] = fVec622SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fVec9SE[0] = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE);
			fTemp10SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 72
			fVec10SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp10SE + -fVec10SE[1] /* Sum */) / fTemp2SE); // step: 77
			fVec12SE[0] = fTemp11SE;
			fTemp12SE = ((fTemp11SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp12SE;
			fTemp13SE = fVec15SE[1]; // step: 85
			fTemp14SE = (fSlow3BE * fTemp1SE); // step: 92
			fTemp15SE = std::max(2e+01f, fabsf(fTemp14SE)); // step: 94
			fTemp16SE = (fSlow4BE * fTemp1SE); // step: 99
			fTemp17SE = std::max(2e+01f, fabsf(fTemp16SE)); // step: 101
			fVec15SE[0] = (fTemp13SE + (fConst1KI * fTemp15SE) + -floorf((fTemp13SE + (fConst1KI * fTemp17SE) /* Sum */)) /* Sum */);
			fTemp18SE = fVec15SE[0]; // step: 108
			fTemp19SE = (2.0f * fTemp18SE); // step: 109
			fTemp20SE = (fTemp19SE + -1.0f /* Sum */); // step: 110
			fTemp21SE = powf(fTemp20SE,2.0f); // step: 111
			fVec17SE[0] = fTemp21SE;
			fTemp22SE = powf(fTemp20SE,3.0f); // step: 113
			fTemp23SE = (-2.0f * fTemp18SE); // step: 114
			fVec18SE[0] = (fTemp22SE + 1.0f + fTemp23SE /* Sum */);
			fVec19SE[0] = (fTemp22SE + 1.0f + -fTemp19SE /* Sum */);
			fVec21SE[0] = ((fTemp22SE + 1.0f + -fTemp19SE + -fVec18SE[1] /* Sum */) / fTemp17SE);
			fTemp24SE = (fTemp21SE * (fTemp21SE + -2.0f /* Sum */)); // step: 126
			fVec22SE[0] = fTemp24SE;
			fTemp25SE = (fTemp24SE + -fVec22SE[1] /* Sum */); // step: 130
			fTemp26SE = (fTemp25SE / fTemp15SE); // step: 131
			fVec24SE[0] = fTemp26SE;
			fTemp27SE = (fTemp25SE / fTemp17SE); // step: 133
			fVec25SE[0] = fTemp27SE;
			fVec27SE[0] = ((fTemp27SE + -fVec24SE[1] /* Sum */) / fTemp17SE);
			fTemp28SE = fVec28SE[1]; // step: 141
			fTemp29SE = (fSlow5BE * fTemp1SE); // step: 145
			fTemp30SE = std::max(2e+01f, fabsf(fTemp29SE)); // step: 147
			fTemp31SE = (fConst1KI * fTemp30SE); // step: 148
			fVec28SE[0] = (fTemp28SE + fTemp31SE + -floorf((fTemp28SE + fTemp31SE /* Sum */)) /* Sum */);
			fTemp32SE = fVec28SE[0]; // step: 154
			fTemp33SE = (2.0f * fTemp32SE); // step: 155
			fTemp34SE = (fTemp33SE + -1.0f /* Sum */); // step: 156
			fTemp35SE = powf(fTemp34SE,2.0f); // step: 157
			fVec30SE[0] = fTemp35SE;
			fTemp36SE = powf(fTemp34SE,3.0f); // step: 159
			fTemp37SE = (-2.0f * fTemp32SE); // step: 160
			fVec31SE[0] = (fTemp36SE + 1.0f + fTemp37SE /* Sum */);
			fVec32SE[0] = (fTemp36SE + 1.0f + -fTemp33SE /* Sum */);
			fVec34SE[0] = ((fTemp36SE + 1.0f + -fTemp33SE + -fVec31SE[1] /* Sum */) / fTemp30SE);
			fTemp38SE = (fTemp35SE * (fTemp35SE + -2.0f /* Sum */)); // step: 172
			fVec35SE[0] = fTemp38SE;
			fTemp39SE = ((fTemp38SE + -fVec35SE[1] /* Sum */) / fTemp30SE); // step: 177
			fVec37SE[0] = fTemp39SE;
			fTemp40SE = ((fTemp39SE + -fVec37SE[1] /* Sum */) / fTemp30SE); // step: 182
			fVec39SE[0] = fTemp40SE;
			fTemp41SE = fVec40SE[1]; // step: 185
			fTemp42SE = std::max(fTemp1SE, 23.44895f); // step: 187
			fTemp43SE = std::max(2e+01f, fabsf(fTemp42SE)); // step: 189
			fTemp44SE = (fConst1KI * fTemp43SE); // step: 190
			fVec40SE[0] = (fTemp41SE + fTemp44SE + -floorf((fTemp41SE + fTemp44SE /* Sum */)) /* Sum */);
			fTemp45SE = fVec40SE[0]; // step: 196
			fTemp46SE = (2.0f * fTemp45SE); // step: 197
			fTemp47SE = (fTemp46SE + -1.0f /* Sum */); // step: 198
			fTemp48SE = powf(fTemp47SE,2.0f); // step: 199
			fVec42SE[0] = fTemp48SE;
			fTemp49SE = fVec43SE[1]; // step: 202
			fTemp50SE = std::max(fTemp14SE, 23.44895f); // step: 203
			fTemp51SE = std::max(2e+01f, fabsf(fTemp50SE)); // step: 205
			fTemp52SE = std::max(fTemp16SE, 23.44895f); // step: 207
			fTemp53SE = std::max(2e+01f, fabsf(fTemp52SE)); // step: 209
			fVec43SE[0] = (fTemp49SE + (fConst1KI * fTemp51SE) + -floorf((fTemp49SE + (fConst1KI * fTemp53SE) /* Sum */)) /* Sum */);
			fTemp54SE = fVec43SE[0]; // step: 216
			fTemp55SE = (2.0f * fTemp54SE); // step: 217
			fTemp56SE = (fTemp55SE + -1.0f /* Sum */); // step: 218
			fTemp57SE = powf(fTemp56SE,2.0f); // step: 219
			fVec45SE[0] = fTemp57SE;
			fTemp58SE = fVec46SE[1]; // step: 222
			fTemp59SE = std::max(fTemp29SE, 23.44895f); // step: 223
			fTemp60SE = std::max(2e+01f, fabsf(fTemp59SE)); // step: 225
			fTemp61SE = (fConst1KI * fTemp60SE); // step: 226
			fVec46SE[0] = (fTemp58SE + fTemp61SE + -floorf((fTemp58SE + fTemp61SE /* Sum */)) /* Sum */);
			fTemp62SE = fVec46SE[0]; // step: 232
			fTemp63SE = (2.0f * fTemp62SE); // step: 233
			fTemp64SE = (fTemp63SE + -1.0f /* Sum */); // step: 234
			fTemp65SE = powf(fTemp64SE,2.0f); // step: 235
			fVec48SE[0] = fTemp65SE;
			fTemp66SE = powf(fTemp47SE,3.0f); // step: 237
			fTemp67SE = (-2.0f * fTemp45SE); // step: 238
			fVec49SE[0] = (fTemp66SE + 1.0f + fTemp67SE /* Sum */);
			fVec50SE[0] = (fTemp66SE + 1.0f + -fTemp46SE /* Sum */);
			fTemp68SE = ((fTemp66SE + 1.0f + fTemp67SE + -fVec50SE[1] /* Sum */) / fTemp43SE); // step: 247
			fVec52SE[0] = fTemp68SE;
			fTemp69SE = ((fTemp66SE + 1.0f + -fTemp46SE + -fVec49SE[1] /* Sum */) / fTemp43SE); // step: 252
			fVec54SE[0] = fTemp69SE;
			fTemp70SE = powf(fTemp56SE,3.0f); // step: 254
			fTemp71SE = (-2.0f * fTemp54SE); // step: 255
			fVec55SE[0] = (fTemp70SE + 1.0f + fTemp71SE /* Sum */);
			fVec56SE[0] = (fTemp70SE + 1.0f + -fTemp55SE /* Sum */);
			fTemp72SE = ((fTemp70SE + 1.0f + fTemp71SE + -fVec56SE[1] /* Sum */) / fTemp51SE); // step: 264
			fVec58SE[0] = fTemp72SE;
			fTemp73SE = ((fTemp70SE + 1.0f + -fTemp55SE + -fVec55SE[1] /* Sum */) / fTemp53SE); // step: 269
			fVec60SE[0] = fTemp73SE;
			fTemp74SE = powf(fTemp64SE,3.0f); // step: 271
			fTemp75SE = (-2.0f * fTemp62SE); // step: 272
			fVec61SE[0] = (fTemp74SE + 1.0f + fTemp75SE /* Sum */);
			fVec62SE[0] = (fTemp74SE + 1.0f + -fTemp63SE /* Sum */);
			fTemp76SE = ((fTemp74SE + 1.0f + fTemp75SE + -fVec62SE[1] /* Sum */) / fTemp60SE); // step: 281
			fVec64SE[0] = fTemp76SE;
			fTemp77SE = ((fTemp74SE + 1.0f + -fTemp63SE + -fVec61SE[1] /* Sum */) / fTemp60SE); // step: 286
			fVec66SE[0] = fTemp77SE;
			fTemp78SI = fVec67SI[3]; // step: 290
			iVec68SI[0] = ((1103515245 * iVec68SI[1]) + 12345 /* Sum */);
			fTemp79SI = fVec67SI[2]; // step: 309
			fVec70SI[0] = ((0.5221894f * fTemp78SI) + (4.656613e-10f * float(iVec68SI[0])) + (2.494956f * fVec70SI[1]) + (-2.0172658f * fTemp79SI) /* Sum */);
			fTemp80SI = fVec70SI[0]; // step: 313
			fVec67SI[0] = fTemp80SI;
			fVec73SE[0] = (fSlow8BE + (0.999f * fVec73SE[1]) /* Sum */);
			fTemp81SC = float(iVec0KC[1]); // step: 348
			fTemp82SC = float(iVec0KC[2]); // step: 361
			fTemp83SC = float(iVec0KC[3]); // step: 376
			fTemp84SE = ((fTemp81SC * (fTemp48SE + -fVec42SE[1] /* Sum */)) / fTemp43SE); // step: 448
			fVec92SE[IOTA0&4095] = fTemp84SE;
			fTemp85SE = std::max(0.0f, std::min(2047.0f, (fConst6KI / fTemp42SE))); // step: 455
			iTemp86SE = int(fTemp85SE); // step: 456
			fTemp87SE = float(iTemp86SE); // step: 458
			fTemp88SE = (fVec92SE[(IOTA0-iTemp86SE)&4095] * (fTemp87SE + 1.0f + -fTemp85SE /* Sum */)); // step: 461
			fTemp89SE = ((fTemp85SE + -fTemp87SE /* Sum */) * fVec92SE[(IOTA0-(iTemp86SE + 1 /* Sum */))&4095]); // step: 467
			fTemp90SE = (fTemp81SC * (fTemp57SE + -fVec45SE[1] /* Sum */)); // step: 472
			fTemp91SE = (fTemp90SE / fTemp51SE); // step: 473
			fTemp92SE = (fTemp90SE / fTemp53SE); // step: 475
			fVec96SE[IOTA0&4095] = fTemp92SE;
			fTemp93SE = std::max(0.0f, std::min(2047.0f, (fConst6KI / fTemp52SE))); // step: 478
			iTemp94SE = int(fTemp93SE); // step: 479
			fTemp95SE = std::max(0.0f, std::min(2047.0f, (fConst6KI / fTemp50SE))); // step: 483
			fTemp96SE = (fVec96SE[(IOTA0-iTemp94SE)&4095] * (float(iTemp94SE) + 1.0f + -fTemp95SE /* Sum */)); // step: 487
			fTemp97SE = ((fTemp93SE + -float(int(fTemp95SE)) /* Sum */) * fVec96SE[(IOTA0-(iTemp94SE + 1 /* Sum */))&4095]); // step: 495
			fTemp98SE = ((fTemp81SC * (fTemp65SE + -fVec48SE[1] /* Sum */)) / fTemp60SE); // step: 501
			fVec100SE[IOTA0&4095] = fTemp98SE;
			fTemp99SE = std::max(0.0f, std::min(2047.0f, (fConst6KI / fTemp59SE))); // step: 505
			iTemp100SE = int(fTemp99SE); // step: 506
			fTemp101SE = float(iTemp100SE); // step: 508
			fTemp102SE = (fVec100SE[(IOTA0-iTemp100SE)&4095] * (fTemp101SE + 1.0f + -fTemp99SE /* Sum */)); // step: 511
			fTemp103SE = ((fTemp99SE + -fTemp101SE /* Sum */) * fVec100SE[(IOTA0-(iTemp100SE + 1 /* Sum */))&4095]); // step: 517
			fVec103SE[0] = ((fConst2KI * (fTemp84SE + -fTemp88SE + -fTemp89SE /* Sum */)) + (0.999f * fVec103SE[1]) /* Sum */);
			fVec105SE[0] = ((fConst2KI * (fTemp91SE + -fTemp96SE + -fTemp97SE /* Sum */)) + (0.999f * fVec105SE[1]) /* Sum */);
			fVec107SE[0] = ((fConst2KI * (fTemp98SE + -fTemp102SE + -fTemp103SE /* Sum */)) + (0.999f * fVec107SE[1]) /* Sum */);
			fVec110SE[0] = (fSlow19BE + (0.99f * fVec110SE[1]) /* Sum */);
			fTemp104SE = fVec110SE[0]; // step: 574
			fTemp105SE = std::max(0.0f, std::min(2047.0f, (fConst0KI * (fTemp104SE / fTemp42SE)))); // step: 578
			iTemp106SE = int(fTemp105SE); // step: 579
			fTemp107SE = float(iTemp106SE); // step: 580
			fTemp108SE = (fTemp107SE + 1.0f + -fTemp105SE /* Sum */); // step: 582
			fTemp109SE = ((fTemp82SC * (fTemp69SE + -fVec52SE[1] /* Sum */)) / fTemp43SE); // step: 588
			fVec113SE[IOTA0&4095] = fTemp109SE;
			fTemp110SE = (fTemp105SE + -fTemp107SE /* Sum */); // step: 593
			iTemp111SE = (iTemp106SE + 1 /* Sum */); // step: 594
			fTemp112SE = ((fTemp82SC * (fTemp73SE + -fVec58SE[1] /* Sum */)) / fTemp53SE); // step: 608
			fVec118SE[IOTA0&4095] = fTemp112SE;
			fTemp113SE = std::max(0.0f, std::min(2047.0f, (fConst0KI * (fTemp104SE / fTemp52SE)))); // step: 612
			iTemp114SE = int(fTemp113SE); // step: 613
			fTemp115SE = std::max(0.0f, std::min(2047.0f, (fConst0KI * (fTemp104SE / fTemp50SE)))); // step: 618
			fTemp116SE = (float(iTemp114SE) + 1.0f + -fTemp115SE /* Sum */); // step: 621
			fTemp117SE = (fTemp113SE + -float(int(fTemp115SE)) /* Sum */); // step: 627
			iTemp118SE = (iTemp114SE + 1 /* Sum */); // step: 628
			fTemp119SE = std::max(0.0f, std::min(2047.0f, (fConst0KI * (fTemp104SE / fTemp59SE)))); // step: 640
			iTemp120SE = int(fTemp119SE); // step: 641
			fTemp121SE = float(iTemp120SE); // step: 642
			fTemp122SE = (fTemp121SE + 1.0f + -fTemp119SE /* Sum */); // step: 644
			fTemp123SE = ((fTemp82SC * (fTemp77SE + -fVec64SE[1] /* Sum */)) / fTemp60SE); // step: 650
			fVec123SE[IOTA0&4095] = fTemp123SE;
			fTemp124SE = (fTemp119SE + -fTemp121SE /* Sum */); // step: 655
			iTemp125SE = (iTemp120SE + 1 /* Sum */); // step: 656
			fTemp126SE = ((fSlow7BE * (float)input0[i]) + (fVec73SE[0] * ((fSlow9BE * (((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp83SC * (fTemp12SE + -fVec14SE[1] /* Sum */)) / fTemp2SE)) : (fConst3KI * ((fTemp82SC * (((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE) + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp81SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE)) + ((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp83SC * (((fTemp26SE + -fVec25SE[1] /* Sum */) / fTemp15SE) + -fVec27SE[1] /* Sum */)) / fTemp15SE)) : (fConst3KI * ((fTemp82SC * (((fTemp22SE + 1.0f + fTemp23SE + -fVec19SE[1] /* Sum */) / fTemp15SE) + -fVec21SE[1] /* Sum */)) / fTemp15SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp81SC * (fTemp21SE + -fVec17SE[1] /* Sum */)) / fTemp15SE)) : fTemp20SE)) + ((iSlow11BE) ? ((iSlow13BE) ? (fConst4KI * ((fTemp83SC * (fTemp40SE + -fVec39SE[1] /* Sum */)) / fTemp30SE)) : (fConst3KI * ((fTemp82SC * (((fTemp36SE + 1.0f + fTemp37SE + -fVec32SE[1] /* Sum */) / fTemp30SE) + -fVec34SE[1] /* Sum */)) / fTemp30SE))) : ((iSlow12BE) ? (fConst2KI * ((fTemp81SC * (fTemp35SE + -fVec30SE[1] /* Sum */)) / fTemp30SE)) : fTemp34SE)) /* Sum */)) + (fSlow14BE * (fTemp84SE + -fTemp88SE + -fTemp89SE + fTemp91SE + -fTemp96SE + -fTemp97SE + fTemp98SE + -fTemp102SE + -fTemp103SE /* Sum */)) + (fSlow15BE * (fTemp1SE * (fVec103SE[0] + (fSlow3BE * fVec105SE[0]) + (fSlow5BE * fVec107SE[0]) /* Sum */))) + (fSlow16BE * ((fSlow18BE * (((fTemp82SC * (fTemp68SE + -fVec54SE[1] /* Sum */)) / fTemp43SE) + -(fTemp108SE * fVec113SE[(IOTA0-iTemp106SE)&4095]) + -(fTemp110SE * fVec113SE[(IOTA0-iTemp111SE)&4095]) + ((fTemp82SC * (fTemp72SE + -fVec60SE[1] /* Sum */)) / fTemp51SE) + -(fVec118SE[(IOTA0-iTemp114SE)&4095] * fTemp116SE) + -(fTemp117SE * fVec118SE[(IOTA0-iTemp118SE)&4095]) + ((fTemp82SC * (fTemp76SE + -fVec66SE[1] /* Sum */)) / fTemp60SE) + -(fTemp122SE * fVec123SE[(IOTA0-iTemp120SE)&4095]) + -(fTemp124SE * fVec123SE[(IOTA0-iTemp125SE)&4095]) /* Sum */)) + (fSlow20BE * (fTemp84SE + -(fTemp108SE * fVec92SE[(IOTA0-iTemp106SE)&4095]) + -(fTemp110SE * fVec92SE[(IOTA0-iTemp111SE)&4095]) + fTemp91SE + -(fTemp116SE * fVec96SE[(IOTA0-iTemp114SE)&4095]) + -(fTemp117SE * fVec96SE[(IOTA0-iTemp118SE)&4095]) + fTemp98SE + -(fTemp122SE * fVec100SE[(IOTA0-iTemp120SE)&4095]) + -(fTemp124SE * fVec100SE[(IOTA0-iTemp125SE)&4095]) /* Sum */)) /* Sum */)) + (fSlow21BE * ((0.049922034f * fVec70SI[0]) + (0.0506127f * fTemp79SI) + (-0.095993534f * fVec67SI[1]) + (-0.004408786f * fTemp78SI) /* Sum */)) /* Sum */)) /* Sum */); // step: 702
			fTemp127SE = ((iSlow6BE) ? 0.0f : fTemp126SE); // step: 703
			fVec134SE[0] = (fSlow26BE + (0.999f * fVec134SE[1]) /* Sum */);
			fTemp128SE = fVec134SE[0]; // step: 727
			fTemp129SE = tanf((fConst9KI * std::max(2e+01f, std::min(1e+04f, fTemp128SE)))); // step: 731
			fTemp130SE = (1.0f / fTemp129SE); // step: 732
			fTemp131SE = (fSlow24BE + fSlow25BE + ((fSlow24BE + 2.0f + fTemp130SE /* Sum */) / fTemp129SE) + 1.0f /* Sum */); // step: 735
			fTemp132SE = (1.0f / powf(fTemp129SE,2.0f)); // step: 739
			fTemp133SE = fVec137SE[2]; // step: 744
			fVec136SE[0] = (fTemp127SE + -(((fTemp133SE * (fSlow24BE + fSlow25BE + ((fTemp130SE + -fSlow24BE + -2.0f /* Sum */) / fTemp129SE) + 1.0f /* Sum */)) + (2.0f * (fVec136SE[1] * (fSlow24BE + fSlow25BE + 1.0f + -fTemp132SE /* Sum */))) /* Sum */) / fTemp131SE) /* Sum */);
			fTemp134SE = fVec136SE[0]; // step: 755
			fVec137SE[0] = fTemp134SE;
			fTemp135SE = fVec141SE[2]; // step: 761
			fVec142SE[0] = (((fTemp133SE + fVec136SE[0] + (2.0f * fVec137SE[1]) /* Sum */) / fTemp131SE) + -(((fTemp135SE * (fSlow25BE + ((fTemp130SE + -2.0f + fSlow24BE /* Sum */) / fTemp129SE) + 1.0f + -fSlow24BE /* Sum */)) + (2.0f * (fVec142SE[1] * (fSlow25BE + 1.0f + -fTemp132SE + -fSlow24BE /* Sum */))) /* Sum */) / (fSlow25BE + ((2.0f + -fSlow24BE + fTemp130SE /* Sum */) / fTemp129SE) + 1.0f + -fSlow24BE /* Sum */)) /* Sum */);
			fTemp136SE = fVec142SE[0]; // step: 779
			fVec141SE[0] = fTemp136SE;
			fTemp137SE = tanf((fConst9KI * std::max(fTemp128SE, 2e+01f))); // step: 788
			fTemp138SE = (1.0f / fTemp137SE); // step: 789
			fTemp139SE = (fSlow27BE + fSlow28BE + ((fSlow28BE + 2.0f + fTemp138SE /* Sum */) / fTemp137SE) + 1.0f /* Sum */); // step: 797
			fTemp140SE = ((fSlow27BE + fSlow28BE + 1.0f + -((fSlow28BE + 2.0f + -fTemp138SE /* Sum */) / fTemp137SE) /* Sum */) / fTemp139SE); // step: 798
			fTemp141SE = std::max(-0.9999f, std::min(0.9999f, fTemp140SE)); // step: 800
			fTemp142SE = (1.0f + -(powf(fTemp141SE,2.0f)) /* Sum */); // step: 803
			fTemp143SE = sqrtf(std::max(0.0f, fTemp142SE)); // step: 805
			fTemp144SE = ((fTemp127SE * fTemp143SE) + -(fTemp141SE * fVec144SE[1]) /* Sum */); // step: 811
			fTemp145SE = (1.0f / powf(fTemp137SE,2.0f)); // step: 813
			fTemp146SE = (fSlow27BE + fSlow28BE + 1.0f + -fTemp145SE /* Sum */); // step: 815
			fTemp147SE = std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp146SE / (fTemp139SE * (fTemp140SE + 1.0f /* Sum */)))))); // step: 821
			fTemp148SE = (1.0f + -(powf(fTemp147SE,2.0f)) /* Sum */); // step: 824
			fTemp149SE = sqrtf(std::max(0.0f, fTemp148SE)); // step: 826
			fVec145SE[0] = ((fTemp144SE * fTemp149SE) + -(fTemp147SE * fVec145SE[1]) /* Sum */);
			fVec146SE[0] = fVec145SE[0];
			fVec144SE[0] = ((fTemp144SE * fTemp147SE) + (fTemp149SE * fVec146SE[1]) /* Sum */);
			fVec148SE[0] = fVec144SE[0];
			fTemp150SE = (1.0f + -(fTemp146SE / fTemp139SE) /* Sum */); // step: 847
			fTemp151SE = sqrtf(fTemp142SE); // step: 849
			float 	fRec19SE = fVec145SE[0]; // Zero delay
			fTemp152SE = ((fTemp127SE * fTemp141SE) + (fTemp143SE * fVec148SE[1]) + (2.0f * ((fVec144SE[0] * fTemp150SE) / fTemp151SE)) + ((fRec19SE * (1.0f + -fTemp140SE + (-2.0f * (fTemp147SE * fTemp150SE)) /* Sum */)) / (fTemp151SE * sqrtf(fTemp148SE))) /* Sum */); // step: 863
			fTemp153SE = ((fTemp138SE + -2.0f + fSlow28BE /* Sum */) / fTemp137SE); // step: 866
			fTemp154SE = (fSlow27BE + ((2.0f + -fSlow28BE + fTemp138SE /* Sum */) / fTemp137SE) + 1.0f + -fSlow28BE /* Sum */); // step: 870
			fTemp155SE = ((fSlow27BE + fTemp153SE + 1.0f + -fSlow28BE /* Sum */) / fTemp154SE); // step: 871
			fTemp156SE = std::max(-0.9999f, std::min(0.9999f, fTemp155SE)); // step: 873
			fTemp157SE = (1.0f + -(powf(fTemp156SE,2.0f)) /* Sum */); // step: 876
			fTemp158SE = sqrtf(std::max(0.0f, fTemp157SE)); // step: 878
			fTemp159SE = (((fTemp152SE * fTemp158SE) / fTemp139SE) + -(fTemp156SE * fVec153SE[1]) /* Sum */); // step: 885
			fTemp160SE = (fSlow27BE + 1.0f + -fTemp145SE + -fSlow28BE /* Sum */); // step: 886
			fTemp161SE = std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp160SE / (fTemp154SE * (fTemp155SE + 1.0f /* Sum */)))))); // step: 892
			fTemp162SE = (1.0f + -(powf(fTemp161SE,2.0f)) /* Sum */); // step: 895
			fTemp163SE = sqrtf(std::max(0.0f, fTemp162SE)); // step: 897
			fVec154SE[0] = ((fTemp159SE * fTemp163SE) + -(fTemp161SE * fVec154SE[1]) /* Sum */);
			fVec155SE[0] = fVec154SE[0];
			fTemp164SE = (fSlow27BE + 1.0f + -fTemp145SE + fSlow29BE /* Sum */); // step: 908
			fTemp165SE = (fSlow27BE + ((2.0f + fSlow29BE + fTemp138SE /* Sum */) / fTemp137SE) + 1.0f + fSlow29BE /* Sum */); // step: 911
			fTemp166SE = ((fSlow27BE + fTemp153SE + 1.0f + fSlow29BE /* Sum */) / fTemp165SE); // step: 913
			fVec153SE[0] = ((fTemp159SE * std::max(-0.9999f, std::min(0.9999f, (2.0f * (fTemp164SE / (fTemp165SE * (fTemp166SE + 1.0f /* Sum */))))))) + (fTemp163SE * fVec155SE[1]) /* Sum */);
			fVec157SE[0] = fVec153SE[0];
			fVec158SE[0] = (fSlow30BE + (0.999f * fVec158SE[1]) /* Sum */);
			fTemp167SE = (fConst10KI * fTemp128SE); // step: 942
			fTemp168SE = (1.0f + -fTemp167SE /* Sum */); // step: 944
			fVec160SE[0] = ((fTemp168SE * fVec160SE[1]) + fTemp127SE + -(fSlow32BE * fVec161SE[1]) /* Sum */);
			fVec163SE[0] = (fVec160SE[0] + (fTemp168SE * fVec163SE[1]) /* Sum */);
			fVec165SE[0] = (fVec163SE[0] + (fTemp168SE * fVec165SE[1]) /* Sum */);
			fVec167SE[0] = (fVec165SE[0] + (fVec167SE[1] * fTemp168SE) /* Sum */);
			fVec161SE[0] = (fVec167SE[0] * powf(fTemp167SE,4.0f));
			fTemp169SE = sqrtf(fTemp157SE); // step: 1005
			float 	fRec28SE = fVec154SE[0]; // Zero delay
			fTemp170SE = ((iSlow6BE) ? fTemp126SE : (fVec158SE[0] * ((iSlow31BE) ? ((iSlow33BE) ? ((((fTemp152SE * std::max(-0.9999f, std::min(0.9999f, fTemp166SE))) / fTemp139SE) + (fTemp158SE * fVec157SE[1]) + (2.0f * ((fVec153SE[0] * (1.0f + -(fTemp160SE / fTemp154SE) /* Sum */)) / fTemp169SE)) + ((fRec28SE * (1.0f + -fTemp155SE + (-2.0f * (fTemp161SE * (1.0f + -(fTemp164SE / fTemp165SE) /* Sum */))) /* Sum */)) / (fTemp169SE * sqrtf(fTemp162SE))) /* Sum */) / fTemp165SE) : ((fTemp135SE + fVec142SE[0] + (2.0f * fVec141SE[1]) /* Sum */) / (fSlow25BE + ((2.0f + fSlow34BE + fTemp130SE /* Sum */) / fTemp129SE) + 1.0f + fSlow34BE /* Sum */))) : fVec161SE[0]))); // step: 1027
			fTemp171SE = fVec176SE[2]; // step: 1042
			fVec177SE[0] = (fTemp170SE + -(fConst13KI * ((fConst14KI * fTemp171SE) + (fConst17KI * fVec177SE[1]) /* Sum */)) /* Sum */);
			fTemp172SE = fVec177SE[0]; // step: 1057
			fVec176SE[0] = fTemp172SE;
			fTemp173SE = fVec181SE[2]; // step: 1082
			fVec182SE[0] = ((fConst13KI * ((fConst19KI * fVec177SE[0]) + (fConst20KI * fVec176SE[1]) + (fConst19KI * fTemp171SE) /* Sum */)) + -(fConst21KI * ((fConst22KI * fTemp173SE) + (fConst23KI * fVec182SE[1]) /* Sum */)) /* Sum */);
			fTemp174SE = fVec182SE[0]; // step: 1094
			fVec181SE[0] = fTemp174SE;
			fTemp175SE = fVec186SE[2]; // step: 1118
			fVec187SE[0] = ((fConst21KI * ((fConst25KI * fVec182SE[0]) + (fConst26KI * fVec181SE[1]) + (fConst25KI * fTemp173SE) /* Sum */)) + -(fConst27KI * ((fConst28KI * fTemp175SE) + (fConst29KI * fVec187SE[1]) /* Sum */)) /* Sum */);
			fTemp176SE = fVec187SE[0]; // step: 1130
			fVec186SE[0] = fTemp176SE;
			fTemp177SE = fVec189SE[2]; // step: 1141
			fVec190SE[0] = (fTemp170SE + -(fConst30KI * ((fConst31KI * fTemp177SE) + (fConst32KI * fVec190SE[1]) /* Sum */)) /* Sum */);
			fTemp178SE = fVec190SE[0]; // step: 1153
			fVec189SE[0] = fTemp178SE;
			fTemp179SE = fVec194SE[2]; // step: 1178
			fVec195SE[0] = ((fConst30KI * ((fConst34KI * fVec190SE[0]) + (fConst35KI * fVec189SE[1]) + (fConst34KI * fTemp177SE) /* Sum */)) + -(fConst36KI * ((fConst37KI * fTemp179SE) + (fConst38KI * fVec195SE[1]) /* Sum */)) /* Sum */);
			fTemp180SE = fVec195SE[0]; // step: 1190
			fVec194SE[0] = fTemp180SE;
			fTemp181SE = fVec199SE[2]; // step: 1212
			fVec200SE[0] = ((fConst36KI * ((fConst39KI * fVec195SE[0]) + (fConst40KI * fVec194SE[1]) + (fConst39KI * fTemp179SE) /* Sum */)) + -(fConst41KI * ((fConst42KI * fTemp181SE) + (fConst43KI * fVec200SE[1]) /* Sum */)) /* Sum */);
			fTemp182SE = fVec200SE[0]; // step: 1224
			fVec199SE[0] = fTemp182SE;
			fTemp183SE = (fConst41KI * ((fConst44KI * fVec200SE[0]) + (fConst45KI * fVec199SE[1]) + (fConst44KI * fTemp181SE) /* Sum */)); // step: 1235
			fTemp184SE = fVec204SE[2]; // step: 1247
			fVec205SE[0] = (fTemp183SE + -(fConst48KI * ((fConst49KI * fTemp184SE) + (fConst52KI * fVec205SE[1]) /* Sum */)) /* Sum */);
			fTemp185SE = fVec205SE[0]; // step: 1262
			fVec204SE[0] = fTemp185SE;
			fTemp186SE = fVec209SE[2]; // step: 1282
			fVec210SE[0] = ((fConst48KI * ((fConst54KI * fVec205SE[0]) + (fConst55KI * fVec204SE[1]) + (fConst54KI * fTemp184SE) /* Sum */)) + -(fConst56KI * ((fConst57KI * fTemp186SE) + (fConst58KI * fVec210SE[1]) /* Sum */)) /* Sum */);
			fTemp187SE = fVec210SE[0]; // step: 1294
			fVec209SE[0] = fTemp187SE;
			fTemp188SE = fVec214SE[2]; // step: 1314
			fVec215SE[0] = ((fConst56KI * ((fConst60KI * fVec210SE[0]) + (fConst61KI * fVec209SE[1]) + (fConst60KI * fTemp186SE) /* Sum */)) + -(fConst62KI * ((fConst63KI * fTemp188SE) + (fConst64KI * fVec215SE[1]) /* Sum */)) /* Sum */);
			fTemp189SE = fVec215SE[0]; // step: 1326
			fVec214SE[0] = fTemp189SE;
			fTemp190SE = fVec217SE[2]; // step: 1334
			fVec218SE[0] = (fTemp183SE + -(fConst65KI * ((fConst66KI * fTemp190SE) + (fConst67KI * fVec218SE[1]) /* Sum */)) /* Sum */);
			fTemp191SE = fVec218SE[0]; // step: 1346
			fVec217SE[0] = fTemp191SE;
			fTemp192SE = fVec222SE[2]; // step: 1366
			fVec223SE[0] = ((fConst65KI * ((fConst69KI * fVec218SE[0]) + (fConst70KI * fVec217SE[1]) + (fConst69KI * fTemp190SE) /* Sum */)) + -(fConst71KI * ((fConst72KI * fTemp192SE) + (fConst73KI * fVec223SE[1]) /* Sum */)) /* Sum */);
			fTemp193SE = fVec223SE[0]; // step: 1378
			fVec222SE[0] = fTemp193SE;
			fTemp194SE = fVec227SE[2]; // step: 1396
			fVec228SE[0] = ((fConst71KI * ((fConst74KI * fVec223SE[0]) + (fConst75KI * fVec222SE[1]) + (fConst74KI * fTemp192SE) /* Sum */)) + -(fConst76KI * ((fConst77KI * fTemp194SE) + (fConst78KI * fVec228SE[1]) /* Sum */)) /* Sum */);
			fTemp195SE = fVec228SE[0]; // step: 1408
			fVec227SE[0] = fTemp195SE;
			fTemp196SE = (fConst76KI * ((fConst79KI * fVec228SE[0]) + (fConst80KI * fVec227SE[1]) + (fConst79KI * fTemp194SE) /* Sum */)); // step: 1418
			fTemp197SE = fVec232SE[2]; // step: 1430
			fVec233SE[0] = (fTemp196SE + -(fConst83KI * ((fConst84KI * fTemp197SE) + (fConst87KI * fVec233SE[1]) /* Sum */)) /* Sum */);
			fTemp198SE = fVec233SE[0]; // step: 1445
			fVec232SE[0] = fTemp198SE;
			fTemp199SE = fVec237SE[2]; // step: 1465
			fVec238SE[0] = ((fConst83KI * ((fConst89KI * fVec233SE[0]) + (fConst90KI * fVec232SE[1]) + (fConst89KI * fTemp197SE) /* Sum */)) + -(fConst91KI * ((fConst92KI * fTemp199SE) + (fConst93KI * fVec238SE[1]) /* Sum */)) /* Sum */);
			fTemp200SE = fVec238SE[0]; // step: 1477
			fVec237SE[0] = fTemp200SE;
			fTemp201SE = fVec242SE[2]; // step: 1497
			fVec243SE[0] = ((fConst91KI * ((fConst95KI * fVec238SE[0]) + (fConst96KI * fVec237SE[1]) + (fConst95KI * fTemp199SE) /* Sum */)) + -(fConst97KI * ((fConst98KI * fTemp201SE) + (fConst99KI * fVec243SE[1]) /* Sum */)) /* Sum */);
			fTemp202SE = fVec243SE[0]; // step: 1509
			fVec242SE[0] = fTemp202SE;
			fTemp203SE = fVec245SE[2]; // step: 1517
			fVec246SE[0] = (fTemp196SE + -(fConst100KI * ((fConst101KI * fTemp203SE) + (fConst102KI * fVec246SE[1]) /* Sum */)) /* Sum */);
			fTemp204SE = fVec246SE[0]; // step: 1529
			fVec245SE[0] = fTemp204SE;
			fTemp205SE = fVec250SE[2]; // step: 1549
			fVec251SE[0] = ((fConst100KI * ((fConst104KI * fVec246SE[0]) + (fConst105KI * fVec245SE[1]) + (fConst104KI * fTemp203SE) /* Sum */)) + -(fConst106KI * ((fConst107KI * fTemp205SE) + (fConst108KI * fVec251SE[1]) /* Sum */)) /* Sum */);
			fTemp206SE = fVec251SE[0]; // step: 1561
			fVec250SE[0] = fTemp206SE;
			fTemp207SE = fVec255SE[2]; // step: 1579
			fVec256SE[0] = ((fConst106KI * ((fConst109KI * fVec251SE[0]) + (fConst110KI * fVec250SE[1]) + (fConst109KI * fTemp205SE) /* Sum */)) + -(fConst111KI * ((fConst112KI * fTemp207SE) + (fConst113KI * fVec256SE[1]) /* Sum */)) /* Sum */);
			fTemp208SE = fVec256SE[0]; // step: 1591
			fVec255SE[0] = fTemp208SE;
			fTemp209SE = (fConst111KI * ((fConst114KI * fVec256SE[0]) + (fConst115KI * fVec255SE[1]) + (fConst114KI * fTemp207SE) /* Sum */)); // step: 1601
			fTemp210SE = fVec260SE[2]; // step: 1613
			fVec261SE[0] = (fTemp209SE + -(fConst118KI * ((fConst119KI * fTemp210SE) + (fConst122KI * fVec261SE[1]) /* Sum */)) /* Sum */);
			fTemp211SE = fVec261SE[0]; // step: 1628
			fVec260SE[0] = fTemp211SE;
			fTemp212SE = fVec265SE[2]; // step: 1648
			fVec266SE[0] = ((fConst118KI * ((fConst124KI * fVec261SE[0]) + (fConst125KI * fVec260SE[1]) + (fConst124KI * fTemp210SE) /* Sum */)) + -(fConst126KI * ((fConst127KI * fTemp212SE) + (fConst128KI * fVec266SE[1]) /* Sum */)) /* Sum */);
			fTemp213SE = fVec266SE[0]; // step: 1660
			fVec265SE[0] = fTemp213SE;
			fTemp214SE = fVec270SE[2]; // step: 1680
			fVec271SE[0] = ((fConst126KI * ((fConst130KI * fVec266SE[0]) + (fConst131KI * fVec265SE[1]) + (fConst130KI * fTemp212SE) /* Sum */)) + -(fConst132KI * ((fConst133KI * fTemp214SE) + (fConst134KI * fVec271SE[1]) /* Sum */)) /* Sum */);
			fTemp215SE = fVec271SE[0]; // step: 1692
			fVec270SE[0] = fTemp215SE;
			fTemp216SE = fVec273SE[2]; // step: 1700
			fVec274SE[0] = (fTemp209SE + -(fConst135KI * ((fConst136KI * fTemp216SE) + (fConst137KI * fVec274SE[1]) /* Sum */)) /* Sum */);
			fTemp217SE = fVec274SE[0]; // step: 1712
			fVec273SE[0] = fTemp217SE;
			fTemp218SE = fVec278SE[2]; // step: 1732
			fVec279SE[0] = ((fConst135KI * ((fConst139KI * fVec274SE[0]) + (fConst140KI * fVec273SE[1]) + (fConst139KI * fTemp216SE) /* Sum */)) + -(fConst141KI * ((fConst142KI * fTemp218SE) + (fConst143KI * fVec279SE[1]) /* Sum */)) /* Sum */);
			fTemp219SE = fVec279SE[0]; // step: 1744
			fVec278SE[0] = fTemp219SE;
			fTemp220SE = fVec283SE[2]; // step: 1762
			fVec284SE[0] = ((fConst141KI * ((fConst144KI * fVec279SE[0]) + (fConst145KI * fVec278SE[1]) + (fConst144KI * fTemp218SE) /* Sum */)) + -(fConst146KI * ((fConst147KI * fTemp220SE) + (fConst148KI * fVec284SE[1]) /* Sum */)) /* Sum */);
			fTemp221SE = fVec284SE[0]; // step: 1774
			fVec283SE[0] = fTemp221SE;
			fTemp222SE = (fConst146KI * ((fConst149KI * fVec284SE[0]) + (fConst150KI * fVec283SE[1]) + (fConst149KI * fTemp220SE) /* Sum */)); // step: 1784
			fTemp223SE = fVec288SE[2]; // step: 1796
			fVec289SE[0] = (fTemp222SE + -(fConst153KI * ((fConst154KI * fTemp223SE) + (fConst157KI * fVec289SE[1]) /* Sum */)) /* Sum */);
			fTemp224SE = fVec289SE[0]; // step: 1811
			fVec288SE[0] = fTemp224SE;
			fTemp225SE = fVec293SE[2]; // step: 1831
			fVec294SE[0] = ((fConst153KI * ((fConst159KI * fVec289SE[0]) + (fConst160KI * fVec288SE[1]) + (fConst159KI * fTemp223SE) /* Sum */)) + -(fConst161KI * ((fConst162KI * fTemp225SE) + (fConst163KI * fVec294SE[1]) /* Sum */)) /* Sum */);
			fTemp226SE = fVec294SE[0]; // step: 1843
			fVec293SE[0] = fTemp226SE;
			fTemp227SE = fVec298SE[2]; // step: 1863
			fVec299SE[0] = ((fConst161KI * ((fConst165KI * fVec294SE[0]) + (fConst166KI * fVec293SE[1]) + (fConst165KI * fTemp225SE) /* Sum */)) + -(fConst167KI * ((fConst168KI * fTemp227SE) + (fConst169KI * fVec299SE[1]) /* Sum */)) /* Sum */);
			fTemp228SE = fVec299SE[0]; // step: 1875
			fVec298SE[0] = fTemp228SE;
			fTemp229SE = fVec301SE[2]; // step: 1883
			fVec302SE[0] = (fTemp222SE + -(fConst170KI * ((fConst171KI * fTemp229SE) + (fConst172KI * fVec302SE[1]) /* Sum */)) /* Sum */);
			fTemp230SE = fVec302SE[0]; // step: 1895
			fVec301SE[0] = fTemp230SE;
			fTemp231SE = fVec306SE[2]; // step: 1915
			fVec307SE[0] = ((fConst170KI * ((fConst174KI * fVec302SE[0]) + (fConst175KI * fVec301SE[1]) + (fConst174KI * fTemp229SE) /* Sum */)) + -(fConst176KI * ((fConst177KI * fTemp231SE) + (fConst178KI * fVec307SE[1]) /* Sum */)) /* Sum */);
			fTemp232SE = fVec307SE[0]; // step: 1927
			fVec306SE[0] = fTemp232SE;
			fTemp233SE = fVec311SE[2]; // step: 1945
			fVec312SE[0] = ((fConst176KI * ((fConst179KI * fVec307SE[0]) + (fConst180KI * fVec306SE[1]) + (fConst179KI * fTemp231SE) /* Sum */)) + -(fConst181KI * ((fConst182KI * fTemp233SE) + (fConst183KI * fVec312SE[1]) /* Sum */)) /* Sum */);
			fTemp234SE = fVec312SE[0]; // step: 1957
			fVec311SE[0] = fTemp234SE;
			fTemp235SE = (fConst181KI * ((fConst184KI * fVec312SE[0]) + (fConst185KI * fVec311SE[1]) + (fConst184KI * fTemp233SE) /* Sum */)); // step: 1967
			fTemp236SE = fVec316SE[2]; // step: 1979
			fVec317SE[0] = (fTemp235SE + -(fConst188KI * ((fConst189KI * fTemp236SE) + (fConst192KI * fVec317SE[1]) /* Sum */)) /* Sum */);
			fTemp237SE = fVec317SE[0]; // step: 1994
			fVec316SE[0] = fTemp237SE;
			fTemp238SE = fVec321SE[2]; // step: 2014
			fVec322SE[0] = ((fConst188KI * ((fConst194KI * fVec317SE[0]) + (fConst195KI * fVec316SE[1]) + (fConst194KI * fTemp236SE) /* Sum */)) + -(fConst196KI * ((fConst197KI * fTemp238SE) + (fConst198KI * fVec322SE[1]) /* Sum */)) /* Sum */);
			fTemp239SE = fVec322SE[0]; // step: 2026
			fVec321SE[0] = fTemp239SE;
			fTemp240SE = fVec326SE[2]; // step: 2046
			fVec327SE[0] = ((fConst196KI * ((fConst200KI * fVec322SE[0]) + (fConst201KI * fVec321SE[1]) + (fConst200KI * fTemp238SE) /* Sum */)) + -(fConst202KI * ((fConst203KI * fTemp240SE) + (fConst204KI * fVec327SE[1]) /* Sum */)) /* Sum */);
			fTemp241SE = fVec327SE[0]; // step: 2058
			fVec326SE[0] = fTemp241SE;
			fTemp242SE = fVec329SE[2]; // step: 2066
			fVec330SE[0] = (fTemp235SE + -(fConst205KI * ((fConst206KI * fTemp242SE) + (fConst207KI * fVec330SE[1]) /* Sum */)) /* Sum */);
			fTemp243SE = fVec330SE[0]; // step: 2078
			fVec329SE[0] = fTemp243SE;
			fTemp244SE = fVec334SE[2]; // step: 2098
			fVec335SE[0] = ((fConst205KI * ((fConst209KI * fVec330SE[0]) + (fConst210KI * fVec329SE[1]) + (fConst209KI * fTemp242SE) /* Sum */)) + -(fConst211KI * ((fConst212KI * fTemp244SE) + (fConst213KI * fVec335SE[1]) /* Sum */)) /* Sum */);
			fTemp245SE = fVec335SE[0]; // step: 2110
			fVec334SE[0] = fTemp245SE;
			fTemp246SE = fVec339SE[2]; // step: 2128
			fVec340SE[0] = ((fConst211KI * ((fConst214KI * fVec335SE[0]) + (fConst215KI * fVec334SE[1]) + (fConst214KI * fTemp244SE) /* Sum */)) + -(fConst216KI * ((fConst217KI * fTemp246SE) + (fConst218KI * fVec340SE[1]) /* Sum */)) /* Sum */);
			fTemp247SE = fVec340SE[0]; // step: 2140
			fVec339SE[0] = fTemp247SE;
			fTemp248SE = (fConst216KI * ((fConst219KI * fVec340SE[0]) + (fConst220KI * fVec339SE[1]) + (fConst219KI * fTemp246SE) /* Sum */)); // step: 2150
			fTemp249SE = fVec344SE[2]; // step: 2162
			fVec345SE[0] = (fTemp248SE + -(fConst223KI * ((fConst224KI * fTemp249SE) + (fConst227KI * fVec345SE[1]) /* Sum */)) /* Sum */);
			fTemp250SE = fVec345SE[0]; // step: 2177
			fVec344SE[0] = fTemp250SE;
			fTemp251SE = fVec349SE[2]; // step: 2197
			fVec350SE[0] = ((fConst223KI * ((fConst229KI * fVec345SE[0]) + (fConst230KI * fVec344SE[1]) + (fConst229KI * fTemp249SE) /* Sum */)) + -(fConst231KI * ((fConst232KI * fTemp251SE) + (fConst233KI * fVec350SE[1]) /* Sum */)) /* Sum */);
			fTemp252SE = fVec350SE[0]; // step: 2209
			fVec349SE[0] = fTemp252SE;
			fTemp253SE = fVec354SE[2]; // step: 2229
			fVec355SE[0] = ((fConst231KI * ((fConst235KI * fVec350SE[0]) + (fConst236KI * fVec349SE[1]) + (fConst235KI * fTemp251SE) /* Sum */)) + -(fConst237KI * ((fConst238KI * fTemp253SE) + (fConst239KI * fVec355SE[1]) /* Sum */)) /* Sum */);
			fTemp254SE = fVec355SE[0]; // step: 2241
			fVec354SE[0] = fTemp254SE;
			fTemp255SE = fVec357SE[2]; // step: 2249
			fVec358SE[0] = (fTemp248SE + -(fConst240KI * ((fConst241KI * fTemp255SE) + (fConst242KI * fVec358SE[1]) /* Sum */)) /* Sum */);
			fTemp256SE = fVec358SE[0]; // step: 2261
			fVec357SE[0] = fTemp256SE;
			fTemp257SE = fVec362SE[2]; // step: 2281
			fVec363SE[0] = ((fConst240KI * ((fConst244KI * fVec358SE[0]) + (fConst245KI * fVec357SE[1]) + (fConst244KI * fTemp255SE) /* Sum */)) + -(fConst246KI * ((fConst247KI * fTemp257SE) + (fConst248KI * fVec363SE[1]) /* Sum */)) /* Sum */);
			fTemp258SE = fVec363SE[0]; // step: 2293
			fVec362SE[0] = fTemp258SE;
			fTemp259SE = fVec367SE[2]; // step: 2311
			fVec368SE[0] = ((fConst246KI * ((fConst249KI * fVec363SE[0]) + (fConst250KI * fVec362SE[1]) + (fConst249KI * fTemp257SE) /* Sum */)) + -(fConst251KI * ((fConst252KI * fTemp259SE) + (fConst253KI * fVec368SE[1]) /* Sum */)) /* Sum */);
			fTemp260SE = fVec368SE[0]; // step: 2323
			fVec367SE[0] = fTemp260SE;
			fTemp261SE = (fConst251KI * ((fConst254KI * fVec368SE[0]) + (fConst255KI * fVec367SE[1]) + (fConst254KI * fTemp259SE) /* Sum */)); // step: 2333
			fTemp262SE = fVec372SE[2]; // step: 2345
			fVec373SE[0] = (fTemp261SE + -(fConst258KI * ((fConst259KI * fTemp262SE) + (fConst262KI * fVec373SE[1]) /* Sum */)) /* Sum */);
			fTemp263SE = fVec373SE[0]; // step: 2360
			fVec372SE[0] = fTemp263SE;
			fTemp264SE = fVec377SE[2]; // step: 2380
			fVec378SE[0] = ((fConst258KI * ((fConst264KI * fVec373SE[0]) + (fConst265KI * fVec372SE[1]) + (fConst264KI * fTemp262SE) /* Sum */)) + -(fConst266KI * ((fConst267KI * fTemp264SE) + (fConst268KI * fVec378SE[1]) /* Sum */)) /* Sum */);
			fTemp265SE = fVec378SE[0]; // step: 2392
			fVec377SE[0] = fTemp265SE;
			fTemp266SE = fVec382SE[2]; // step: 2412
			fVec383SE[0] = ((fConst266KI * ((fConst270KI * fVec378SE[0]) + (fConst271KI * fVec377SE[1]) + (fConst270KI * fTemp264SE) /* Sum */)) + -(fConst272KI * ((fConst273KI * fTemp266SE) + (fConst274KI * fVec383SE[1]) /* Sum */)) /* Sum */);
			fTemp267SE = fVec383SE[0]; // step: 2424
			fVec382SE[0] = fTemp267SE;
			fTemp268SE = fVec385SE[2]; // step: 2432
			fVec386SE[0] = (fTemp261SE + -(fConst275KI * ((fConst276KI * fTemp268SE) + (fConst277KI * fVec386SE[1]) /* Sum */)) /* Sum */);
			fTemp269SE = fVec386SE[0]; // step: 2444
			fVec385SE[0] = fTemp269SE;
			fTemp270SE = fVec390SE[2]; // step: 2464
			fVec391SE[0] = ((fConst275KI * ((fConst279KI * fVec386SE[0]) + (fConst280KI * fVec385SE[1]) + (fConst279KI * fTemp268SE) /* Sum */)) + -(fConst281KI * ((fConst282KI * fTemp270SE) + (fConst283KI * fVec391SE[1]) /* Sum */)) /* Sum */);
			fTemp271SE = fVec391SE[0]; // step: 2476
			fVec390SE[0] = fTemp271SE;
			fTemp272SE = fVec395SE[2]; // step: 2494
			fVec396SE[0] = ((fConst281KI * ((fConst284KI * fVec391SE[0]) + (fConst285KI * fVec390SE[1]) + (fConst284KI * fTemp270SE) /* Sum */)) + -(fConst286KI * ((fConst287KI * fTemp272SE) + (fConst288KI * fVec396SE[1]) /* Sum */)) /* Sum */);
			fTemp273SE = fVec396SE[0]; // step: 2506
			fVec395SE[0] = fTemp273SE;
			fTemp274SE = (fConst286KI * ((fConst289KI * fVec396SE[0]) + (fConst290KI * fVec395SE[1]) + (fConst289KI * fTemp272SE) /* Sum */)); // step: 2516
			fTemp275SE = fVec400SE[2]; // step: 2528
			fVec401SE[0] = (fTemp274SE + -(fConst293KI * ((fConst294KI * fTemp275SE) + (fConst297KI * fVec401SE[1]) /* Sum */)) /* Sum */);
			fTemp276SE = fVec401SE[0]; // step: 2543
			fVec400SE[0] = fTemp276SE;
			fTemp277SE = fVec405SE[2]; // step: 2563
			fVec406SE[0] = ((fConst293KI * ((fConst299KI * fVec401SE[0]) + (fConst300KI * fVec400SE[1]) + (fConst299KI * fTemp275SE) /* Sum */)) + -(fConst301KI * ((fConst302KI * fTemp277SE) + (fConst303KI * fVec406SE[1]) /* Sum */)) /* Sum */);
			fTemp278SE = fVec406SE[0]; // step: 2575
			fVec405SE[0] = fTemp278SE;
			fTemp279SE = fVec410SE[2]; // step: 2595
			fVec411SE[0] = ((fConst301KI * ((fConst305KI * fVec406SE[0]) + (fConst306KI * fVec405SE[1]) + (fConst305KI * fTemp277SE) /* Sum */)) + -(fConst307KI * ((fConst308KI * fTemp279SE) + (fConst309KI * fVec411SE[1]) /* Sum */)) /* Sum */);
			fTemp280SE = fVec411SE[0]; // step: 2607
			fVec410SE[0] = fTemp280SE;
			fTemp281SE = fVec413SE[2]; // step: 2615
			fVec414SE[0] = (fTemp274SE + -(fConst310KI * ((fConst311KI * fTemp281SE) + (fConst312KI * fVec414SE[1]) /* Sum */)) /* Sum */);
			fTemp282SE = fVec414SE[0]; // step: 2627
			fVec413SE[0] = fTemp282SE;
			fTemp283SE = fVec418SE[2]; // step: 2647
			fVec419SE[0] = ((fConst310KI * ((fConst314KI * fVec414SE[0]) + (fConst315KI * fVec413SE[1]) + (fConst314KI * fTemp281SE) /* Sum */)) + -(fConst316KI * ((fConst317KI * fTemp283SE) + (fConst318KI * fVec419SE[1]) /* Sum */)) /* Sum */);
			fTemp284SE = fVec419SE[0]; // step: 2659
			fVec418SE[0] = fTemp284SE;
			fTemp285SE = fVec423SE[2]; // step: 2677
			fVec424SE[0] = ((fConst316KI * ((fConst319KI * fVec419SE[0]) + (fConst320KI * fVec418SE[1]) + (fConst319KI * fTemp283SE) /* Sum */)) + -(fConst321KI * ((fConst322KI * fTemp285SE) + (fConst323KI * fVec424SE[1]) /* Sum */)) /* Sum */);
			fTemp286SE = fVec424SE[0]; // step: 2689
			fVec423SE[0] = fTemp286SE;
			fTemp287SE = (fConst321KI * ((fConst324KI * fVec424SE[0]) + (fConst325KI * fVec423SE[1]) + (fConst324KI * fTemp285SE) /* Sum */)); // step: 2699
			fTemp288SE = fVec428SE[2]; // step: 2711
			fVec429SE[0] = (fTemp287SE + -(fConst328KI * ((fConst329KI * fTemp288SE) + (fConst332KI * fVec429SE[1]) /* Sum */)) /* Sum */);
			fTemp289SE = fVec429SE[0]; // step: 2726
			fVec428SE[0] = fTemp289SE;
			fTemp290SE = fVec433SE[2]; // step: 2746
			fVec434SE[0] = ((fConst328KI * ((fConst334KI * fVec429SE[0]) + (fConst335KI * fVec428SE[1]) + (fConst334KI * fTemp288SE) /* Sum */)) + -(fConst336KI * ((fConst337KI * fTemp290SE) + (fConst338KI * fVec434SE[1]) /* Sum */)) /* Sum */);
			fTemp291SE = fVec434SE[0]; // step: 2758
			fVec433SE[0] = fTemp291SE;
			fTemp292SE = fVec438SE[2]; // step: 2778
			fVec439SE[0] = ((fConst336KI * ((fConst340KI * fVec434SE[0]) + (fConst341KI * fVec433SE[1]) + (fConst340KI * fTemp290SE) /* Sum */)) + -(fConst342KI * ((fConst343KI * fTemp292SE) + (fConst344KI * fVec439SE[1]) /* Sum */)) /* Sum */);
			fTemp293SE = fVec439SE[0]; // step: 2790
			fVec438SE[0] = fTemp293SE;
			fTemp294SE = fVec441SE[2]; // step: 2798
			fVec442SE[0] = (fTemp287SE + -(fConst345KI * ((fConst346KI * fTemp294SE) + (fConst347KI * fVec442SE[1]) /* Sum */)) /* Sum */);
			fTemp295SE = fVec442SE[0]; // step: 2810
			fVec441SE[0] = fTemp295SE;
			fTemp296SE = fVec446SE[2]; // step: 2830
			fVec447SE[0] = ((fConst345KI * ((fConst349KI * fVec442SE[0]) + (fConst350KI * fVec441SE[1]) + (fConst349KI * fTemp294SE) /* Sum */)) + -(fConst351KI * ((fConst352KI * fTemp296SE) + (fConst353KI * fVec447SE[1]) /* Sum */)) /* Sum */);
			fTemp297SE = fVec447SE[0]; // step: 2842
			fVec446SE[0] = fTemp297SE;
			fTemp298SE = fVec451SE[2]; // step: 2860
			fVec452SE[0] = ((fConst351KI * ((fConst354KI * fVec447SE[0]) + (fConst355KI * fVec446SE[1]) + (fConst354KI * fTemp296SE) /* Sum */)) + -(fConst356KI * ((fConst357KI * fTemp298SE) + (fConst358KI * fVec452SE[1]) /* Sum */)) /* Sum */);
			fTemp299SE = fVec452SE[0]; // step: 2872
			fVec451SE[0] = fTemp299SE;
			fTemp300SE = (fConst356KI * ((fConst359KI * fVec452SE[0]) + (fConst360KI * fVec451SE[1]) + (fConst359KI * fTemp298SE) /* Sum */)); // step: 2882
			fTemp301SE = fVec456SE[2]; // step: 2894
			fVec457SE[0] = (fTemp300SE + -(fConst363KI * ((fConst364KI * fTemp301SE) + (fConst367KI * fVec457SE[1]) /* Sum */)) /* Sum */);
			fTemp302SE = fVec457SE[0]; // step: 2909
			fVec456SE[0] = fTemp302SE;
			fTemp303SE = fVec461SE[2]; // step: 2929
			fVec462SE[0] = ((fConst363KI * ((fConst369KI * fVec457SE[0]) + (fConst370KI * fVec456SE[1]) + (fConst369KI * fTemp301SE) /* Sum */)) + -(fConst371KI * ((fConst372KI * fTemp303SE) + (fConst373KI * fVec462SE[1]) /* Sum */)) /* Sum */);
			fTemp304SE = fVec462SE[0]; // step: 2941
			fVec461SE[0] = fTemp304SE;
			fTemp305SE = fVec466SE[2]; // step: 2961
			fVec467SE[0] = ((fConst371KI * ((fConst375KI * fVec462SE[0]) + (fConst376KI * fVec461SE[1]) + (fConst375KI * fTemp303SE) /* Sum */)) + -(fConst377KI * ((fConst378KI * fTemp305SE) + (fConst379KI * fVec467SE[1]) /* Sum */)) /* Sum */);
			fTemp306SE = fVec467SE[0]; // step: 2973
			fVec466SE[0] = fTemp306SE;
			fTemp307SE = fVec469SE[2]; // step: 2981
			fVec470SE[0] = (fTemp300SE + -(fConst380KI * ((fConst381KI * fTemp307SE) + (fConst382KI * fVec470SE[1]) /* Sum */)) /* Sum */);
			fTemp308SE = fVec470SE[0]; // step: 2993
			fVec469SE[0] = fTemp308SE;
			fTemp309SE = fVec474SE[2]; // step: 3013
			fVec475SE[0] = ((fConst380KI * ((fConst384KI * fVec470SE[0]) + (fConst385KI * fVec469SE[1]) + (fConst384KI * fTemp307SE) /* Sum */)) + -(fConst386KI * ((fConst387KI * fTemp309SE) + (fConst388KI * fVec475SE[1]) /* Sum */)) /* Sum */);
			fTemp310SE = fVec475SE[0]; // step: 3025
			fVec474SE[0] = fTemp310SE;
			fTemp311SE = fVec479SE[2]; // step: 3043
			fVec480SE[0] = ((fConst386KI * ((fConst389KI * fVec475SE[0]) + (fConst390KI * fVec474SE[1]) + (fConst389KI * fTemp309SE) /* Sum */)) + -(fConst391KI * ((fConst392KI * fTemp311SE) + (fConst393KI * fVec480SE[1]) /* Sum */)) /* Sum */);
			fTemp312SE = fVec480SE[0]; // step: 3055
			fVec479SE[0] = fTemp312SE;
			fTemp313SE = (fConst391KI * ((fConst394KI * fVec480SE[0]) + (fConst395KI * fVec479SE[1]) + (fConst394KI * fTemp311SE) /* Sum */)); // step: 3065
			fTemp314SE = fVec484SE[2]; // step: 3077
			fVec485SE[0] = (fTemp313SE + -(fConst398KI * ((fConst399KI * fTemp314SE) + (fConst402KI * fVec485SE[1]) /* Sum */)) /* Sum */);
			fTemp315SE = fVec485SE[0]; // step: 3092
			fVec484SE[0] = fTemp315SE;
			fTemp316SE = fVec489SE[2]; // step: 3112
			fVec490SE[0] = ((fConst398KI * ((fConst404KI * fVec485SE[0]) + (fConst405KI * fVec484SE[1]) + (fConst404KI * fTemp314SE) /* Sum */)) + -(fConst406KI * ((fConst407KI * fTemp316SE) + (fConst408KI * fVec490SE[1]) /* Sum */)) /* Sum */);
			fTemp317SE = fVec490SE[0]; // step: 3124
			fVec489SE[0] = fTemp317SE;
			fTemp318SE = fVec494SE[2]; // step: 3144
			fVec495SE[0] = ((fConst406KI * ((fConst410KI * fVec490SE[0]) + (fConst411KI * fVec489SE[1]) + (fConst410KI * fTemp316SE) /* Sum */)) + -(fConst412KI * ((fConst413KI * fTemp318SE) + (fConst414KI * fVec495SE[1]) /* Sum */)) /* Sum */);
			fTemp319SE = fVec495SE[0]; // step: 3156
			fVec494SE[0] = fTemp319SE;
			fTemp320SE = fVec497SE[2]; // step: 3164
			fVec498SE[0] = (fTemp313SE + -(fConst415KI * ((fConst416KI * fTemp320SE) + (fConst417KI * fVec498SE[1]) /* Sum */)) /* Sum */);
			fTemp321SE = fVec498SE[0]; // step: 3176
			fVec497SE[0] = fTemp321SE;
			fTemp322SE = fVec502SE[2]; // step: 3196
			fVec503SE[0] = ((fConst415KI * ((fConst419KI * fVec498SE[0]) + (fConst420KI * fVec497SE[1]) + (fConst419KI * fTemp320SE) /* Sum */)) + -(fConst421KI * ((fConst422KI * fTemp322SE) + (fConst423KI * fVec503SE[1]) /* Sum */)) /* Sum */);
			fTemp323SE = fVec503SE[0]; // step: 3208
			fVec502SE[0] = fTemp323SE;
			fTemp324SE = fVec507SE[2]; // step: 3226
			fVec508SE[0] = ((fConst421KI * ((fConst424KI * fVec503SE[0]) + (fConst425KI * fVec502SE[1]) + (fConst424KI * fTemp322SE) /* Sum */)) + -(fConst426KI * ((fConst427KI * fTemp324SE) + (fConst428KI * fVec508SE[1]) /* Sum */)) /* Sum */);
			fTemp325SE = fVec508SE[0]; // step: 3238
			fVec507SE[0] = fTemp325SE;
			fTemp326SE = (fConst426KI * ((fConst429KI * fVec508SE[0]) + (fConst430KI * fVec507SE[1]) + (fConst429KI * fTemp324SE) /* Sum */)); // step: 3248
			fTemp327SE = fVec512SE[2]; // step: 3260
			fVec513SE[0] = (fTemp326SE + -(fConst433KI * ((fConst434KI * fTemp327SE) + (fConst437KI * fVec513SE[1]) /* Sum */)) /* Sum */);
			fTemp328SE = fVec513SE[0]; // step: 3275
			fVec512SE[0] = fTemp328SE;
			fTemp329SE = fVec517SE[2]; // step: 3295
			fVec518SE[0] = ((fConst433KI * ((fConst439KI * fVec513SE[0]) + (fConst440KI * fVec512SE[1]) + (fConst439KI * fTemp327SE) /* Sum */)) + -(fConst441KI * ((fConst442KI * fTemp329SE) + (fConst443KI * fVec518SE[1]) /* Sum */)) /* Sum */);
			fTemp330SE = fVec518SE[0]; // step: 3307
			fVec517SE[0] = fTemp330SE;
			fTemp331SE = fVec522SE[2]; // step: 3327
			fVec523SE[0] = ((fConst441KI * ((fConst445KI * fVec518SE[0]) + (fConst446KI * fVec517SE[1]) + (fConst445KI * fTemp329SE) /* Sum */)) + -(fConst447KI * ((fConst448KI * fTemp331SE) + (fConst449KI * fVec523SE[1]) /* Sum */)) /* Sum */);
			fTemp332SE = fVec523SE[0]; // step: 3339
			fVec522SE[0] = fTemp332SE;
			fTemp333SE = fVec525SE[2]; // step: 3347
			fVec526SE[0] = (fTemp326SE + -(fConst450KI * ((fConst451KI * fTemp333SE) + (fConst452KI * fVec526SE[1]) /* Sum */)) /* Sum */);
			fTemp334SE = fVec526SE[0]; // step: 3359
			fVec525SE[0] = fTemp334SE;
			fTemp335SE = fVec530SE[2]; // step: 3379
			fVec531SE[0] = ((fConst450KI * ((fConst454KI * fVec526SE[0]) + (fConst455KI * fVec525SE[1]) + (fConst454KI * fTemp333SE) /* Sum */)) + -(fConst456KI * ((fConst457KI * fTemp335SE) + (fConst458KI * fVec531SE[1]) /* Sum */)) /* Sum */);
			fTemp336SE = fVec531SE[0]; // step: 3391
			fVec530SE[0] = fTemp336SE;
			fTemp337SE = fVec535SE[2]; // step: 3409
			fVec536SE[0] = ((fConst456KI * ((fConst459KI * fVec531SE[0]) + (fConst460KI * fVec530SE[1]) + (fConst459KI * fTemp335SE) /* Sum */)) + -(fConst461KI * ((fConst462KI * fTemp337SE) + (fConst463KI * fVec536SE[1]) /* Sum */)) /* Sum */);
			fTemp338SE = fVec536SE[0]; // step: 3421
			fVec535SE[0] = fTemp338SE;
			fTemp339SE = (fConst461KI * ((fConst464KI * fVec536SE[0]) + (fConst465KI * fVec535SE[1]) + (fConst464KI * fTemp337SE) /* Sum */)); // step: 3431
			fTemp340SE = fVec540SE[2]; // step: 3443
			fVec541SE[0] = (fTemp339SE + -(fConst468KI * ((fConst469KI * fTemp340SE) + (fConst472KI * fVec541SE[1]) /* Sum */)) /* Sum */);
			fTemp341SE = fVec541SE[0]; // step: 3458
			fVec540SE[0] = fTemp341SE;
			fTemp342SE = fVec545SE[2]; // step: 3478
			fVec546SE[0] = ((fConst468KI * ((fConst474KI * fVec541SE[0]) + (fConst475KI * fVec540SE[1]) + (fConst474KI * fTemp340SE) /* Sum */)) + -(fConst476KI * ((fConst477KI * fTemp342SE) + (fConst478KI * fVec546SE[1]) /* Sum */)) /* Sum */);
			fTemp343SE = fVec546SE[0]; // step: 3490
			fVec545SE[0] = fTemp343SE;
			fTemp344SE = fVec550SE[2]; // step: 3510
			fVec551SE[0] = ((fConst476KI * ((fConst480KI * fVec546SE[0]) + (fConst481KI * fVec545SE[1]) + (fConst480KI * fTemp342SE) /* Sum */)) + -(fConst482KI * ((fConst483KI * fTemp344SE) + (fConst484KI * fVec551SE[1]) /* Sum */)) /* Sum */);
			fTemp345SE = fVec551SE[0]; // step: 3522
			fVec550SE[0] = fTemp345SE;
			fTemp346SE = fVec553SE[2]; // step: 3530
			fVec554SE[0] = (fTemp339SE + -(fConst485KI * ((fConst486KI * fTemp346SE) + (fConst487KI * fVec554SE[1]) /* Sum */)) /* Sum */);
			fTemp347SE = fVec554SE[0]; // step: 3542
			fVec553SE[0] = fTemp347SE;
			fTemp348SE = fVec558SE[2]; // step: 3562
			fVec559SE[0] = ((fConst485KI * ((fConst489KI * fVec554SE[0]) + (fConst490KI * fVec553SE[1]) + (fConst489KI * fTemp346SE) /* Sum */)) + -(fConst491KI * ((fConst492KI * fTemp348SE) + (fConst493KI * fVec559SE[1]) /* Sum */)) /* Sum */);
			fTemp349SE = fVec559SE[0]; // step: 3574
			fVec558SE[0] = fTemp349SE;
			fTemp350SE = fVec563SE[2]; // step: 3592
			fVec564SE[0] = ((fConst491KI * ((fConst494KI * fVec559SE[0]) + (fConst495KI * fVec558SE[1]) + (fConst494KI * fTemp348SE) /* Sum */)) + -(fConst496KI * ((fConst497KI * fTemp350SE) + (fConst498KI * fVec564SE[1]) /* Sum */)) /* Sum */);
			fTemp351SE = fVec564SE[0]; // step: 3604
			fVec563SE[0] = fTemp351SE;
			fVec566SE[0] = ((fVec566SE[1] * fSlow37BE) + (fabsf((fConst27KI * ((fConst501KI * fVec187SE[0]) + (fConst502KI * fVec186SE[1]) + (fConst501KI * fTemp175SE) /* Sum */))) * fSlow38BE) /* Sum */);
			fSlow39SE = (fSlow35BE + (2e+01f * log10f(fVec566SE[0])) /* Sum */);
			fVec570SE[0] = ((fSlow37BE * fVec570SE[1]) + (fSlow38BE * fabsf((fConst62KI * ((fConst504KI * fVec215SE[0]) + (fConst505KI * fVec214SE[1]) + (fConst504KI * fTemp188SE) /* Sum */)))) /* Sum */);
			fSlow40SE = (fSlow35BE + (2e+01f * log10f(fVec570SE[0])) /* Sum */);
			fVec574SE[0] = ((fSlow37BE * fVec574SE[1]) + (fSlow38BE * fabsf((fConst97KI * ((fConst507KI * fVec243SE[0]) + (fConst508KI * fVec242SE[1]) + (fConst507KI * fTemp201SE) /* Sum */)))) /* Sum */);
			fSlow41SE = (fSlow35BE + (2e+01f * log10f(fVec574SE[0])) /* Sum */);
			fVec578SE[0] = ((fSlow37BE * fVec578SE[1]) + (fSlow38BE * fabsf((fConst132KI * ((fConst510KI * fVec271SE[0]) + (fConst511KI * fVec270SE[1]) + (fConst510KI * fTemp214SE) /* Sum */)))) /* Sum */);
			fSlow42SE = (fSlow35BE + (2e+01f * log10f(fVec578SE[0])) /* Sum */);
			fVec582SE[0] = ((fSlow37BE * fVec582SE[1]) + (fSlow38BE * fabsf((fConst167KI * ((fConst513KI * fVec299SE[0]) + (fConst514KI * fVec298SE[1]) + (fConst513KI * fTemp227SE) /* Sum */)))) /* Sum */);
			fSlow43SE = (fSlow35BE + (2e+01f * log10f(fVec582SE[0])) /* Sum */);
			fVec586SE[0] = ((fSlow37BE * fVec586SE[1]) + (fSlow38BE * fabsf((fConst202KI * ((fConst516KI * fVec327SE[0]) + (fConst517KI * fVec326SE[1]) + (fConst516KI * fTemp240SE) /* Sum */)))) /* Sum */);
			fSlow44SE = (fSlow35BE + (2e+01f * log10f(fVec586SE[0])) /* Sum */);
			fVec590SE[0] = ((fSlow37BE * fVec590SE[1]) + (fSlow38BE * fabsf((fConst237KI * ((fConst519KI * fVec355SE[0]) + (fConst520KI * fVec354SE[1]) + (fConst519KI * fTemp253SE) /* Sum */)))) /* Sum */);
			fSlow45SE = (fSlow35BE + (2e+01f * log10f(fVec590SE[0])) /* Sum */);
			fVec594SE[0] = ((fSlow37BE * fVec594SE[1]) + (fSlow38BE * fabsf((fConst272KI * ((fConst522KI * fVec383SE[0]) + (fConst523KI * fVec382SE[1]) + (fConst522KI * fTemp266SE) /* Sum */)))) /* Sum */);
			fSlow46SE = (fSlow35BE + (2e+01f * log10f(fVec594SE[0])) /* Sum */);
			fVec598SE[0] = ((fSlow37BE * fVec598SE[1]) + (fSlow38BE * fabsf((fConst307KI * ((fConst525KI * fVec411SE[0]) + (fConst526KI * fVec410SE[1]) + (fConst525KI * fTemp279SE) /* Sum */)))) /* Sum */);
			fSlow47SE = (fSlow35BE + (2e+01f * log10f(fVec598SE[0])) /* Sum */);
			fVec602SE[0] = ((fSlow37BE * fVec602SE[1]) + (fSlow38BE * fabsf((fConst342KI * ((fConst528KI * fVec439SE[0]) + (fConst529KI * fVec438SE[1]) + (fConst528KI * fTemp292SE) /* Sum */)))) /* Sum */);
			fSlow48SE = (fSlow35BE + (2e+01f * log10f(fVec602SE[0])) /* Sum */);
			fVec606SE[0] = ((fSlow37BE * fVec606SE[1]) + (fSlow38BE * fabsf((fConst377KI * ((fConst531KI * fVec467SE[0]) + (fConst532KI * fVec466SE[1]) + (fConst531KI * fTemp305SE) /* Sum */)))) /* Sum */);
			fSlow49SE = (fSlow35BE + (2e+01f * log10f(fVec606SE[0])) /* Sum */);
			fVec610SE[0] = ((fSlow37BE * fVec610SE[1]) + (fSlow38BE * fabsf((fConst412KI * ((fConst534KI * fVec495SE[0]) + (fConst535KI * fVec494SE[1]) + (fConst534KI * fTemp318SE) /* Sum */)))) /* Sum */);
			fSlow50SE = (fSlow35BE + (2e+01f * log10f(fVec610SE[0])) /* Sum */);
			fVec614SE[0] = ((fSlow37BE * fVec614SE[1]) + (fSlow38BE * fabsf((fConst447KI * ((fConst537KI * fVec523SE[0]) + (fConst538KI * fVec522SE[1]) + (fConst537KI * fTemp331SE) /* Sum */)))) /* Sum */);
			fSlow51SE = (fSlow35BE + (2e+01f * log10f(fVec614SE[0])) /* Sum */);
			fVec618SE[0] = ((fSlow37BE * fVec618SE[1]) + (fSlow38BE * fabsf((fConst482KI * ((fConst540KI * fVec551SE[0]) + (fConst541KI * fVec550SE[1]) + (fConst540KI * fTemp344SE) /* Sum */)))) /* Sum */);
			fSlow52SE = (fSlow35BE + (2e+01f * log10f(fVec618SE[0])) /* Sum */);
			fVec622SE[0] = ((fSlow37BE * fVec622SE[1]) + (fSlow38BE * fabsf((fConst496KI * ((fConst542KI * fVec564SE[0]) + (fConst543KI * fVec563SE[1]) + (fConst542KI * fTemp350SE) /* Sum */)))) /* Sum */);
			fSlow53SE = (fSlow35BE + (2e+01f * log10f(fVec622SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp170SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp170SE);  // Zone Exec Code
			// post processing
			fVec622SE[1] = fVec622SE[0];
			fVec618SE[1] = fVec618SE[0];
			fVec614SE[1] = fVec614SE[0];
			fVec610SE[1] = fVec610SE[0];
			fVec606SE[1] = fVec606SE[0];
			fVec602SE[1] = fVec602SE[0];
			fVec598SE[1] = fVec598SE[0];
			fVec594SE[1] = fVec594SE[0];
			fVec590SE[1] = fVec590SE[0];
			fVec586SE[1] = fVec586SE[0];
			fVec582SE[1] = fVec582SE[0];
			fVec578SE[1] = fVec578SE[0];
			fVec574SE[1] = fVec574SE[0];
			fVec570SE[1] = fVec570SE[0];
			fVec566SE[1] = fVec566SE[0];
			fVec563SE[2] = fVec563SE[1];
			fVec563SE[1] = fVec563SE[0];
			fVec564SE[1] = fVec564SE[0];
			fVec558SE[2] = fVec558SE[1];
			fVec558SE[1] = fVec558SE[0];
			fVec559SE[1] = fVec559SE[0];
			fVec553SE[2] = fVec553SE[1];
			fVec553SE[1] = fVec553SE[0];
			fVec554SE[1] = fVec554SE[0];
			fVec550SE[2] = fVec550SE[1];
			fVec550SE[1] = fVec550SE[0];
			fVec551SE[1] = fVec551SE[0];
			fVec545SE[2] = fVec545SE[1];
			fVec545SE[1] = fVec545SE[0];
			fVec546SE[1] = fVec546SE[0];
			fVec540SE[2] = fVec540SE[1];
			fVec540SE[1] = fVec540SE[0];
			fVec541SE[1] = fVec541SE[0];
			fVec535SE[2] = fVec535SE[1];
			fVec535SE[1] = fVec535SE[0];
			fVec536SE[1] = fVec536SE[0];
			fVec530SE[2] = fVec530SE[1];
			fVec530SE[1] = fVec530SE[0];
			fVec531SE[1] = fVec531SE[0];
			fVec525SE[2] = fVec525SE[1];
			fVec525SE[1] = fVec525SE[0];
			fVec526SE[1] = fVec526SE[0];
			fVec522SE[2] = fVec522SE[1];
			fVec522SE[1] = fVec522SE[0];
			fVec523SE[1] = fVec523SE[0];
			fVec517SE[2] = fVec517SE[1];
			fVec517SE[1] = fVec517SE[0];
			fVec518SE[1] = fVec518SE[0];
			fVec512SE[2] = fVec512SE[1];
			fVec512SE[1] = fVec512SE[0];
			fVec513SE[1] = fVec513SE[0];
			fVec507SE[2] = fVec507SE[1];
			fVec507SE[1] = fVec507SE[0];
			fVec508SE[1] = fVec508SE[0];
			fVec502SE[2] = fVec502SE[1];
			fVec502SE[1] = fVec502SE[0];
			fVec503SE[1] = fVec503SE[0];
			fVec497SE[2] = fVec497SE[1];
			fVec497SE[1] = fVec497SE[0];
			fVec498SE[1] = fVec498SE[0];
			fVec494SE[2] = fVec494SE[1];
			fVec494SE[1] = fVec494SE[0];
			fVec495SE[1] = fVec495SE[0];
			fVec489SE[2] = fVec489SE[1];
			fVec489SE[1] = fVec489SE[0];
			fVec490SE[1] = fVec490SE[0];
			fVec484SE[2] = fVec484SE[1];
			fVec484SE[1] = fVec484SE[0];
			fVec485SE[1] = fVec485SE[0];
			fVec479SE[2] = fVec479SE[1];
			fVec479SE[1] = fVec479SE[0];
			fVec480SE[1] = fVec480SE[0];
			fVec474SE[2] = fVec474SE[1];
			fVec474SE[1] = fVec474SE[0];
			fVec475SE[1] = fVec475SE[0];
			fVec469SE[2] = fVec469SE[1];
			fVec469SE[1] = fVec469SE[0];
			fVec470SE[1] = fVec470SE[0];
			fVec466SE[2] = fVec466SE[1];
			fVec466SE[1] = fVec466SE[0];
			fVec467SE[1] = fVec467SE[0];
			fVec461SE[2] = fVec461SE[1];
			fVec461SE[1] = fVec461SE[0];
			fVec462SE[1] = fVec462SE[0];
			fVec456SE[2] = fVec456SE[1];
			fVec456SE[1] = fVec456SE[0];
			fVec457SE[1] = fVec457SE[0];
			fVec451SE[2] = fVec451SE[1];
			fVec451SE[1] = fVec451SE[0];
			fVec452SE[1] = fVec452SE[0];
			fVec446SE[2] = fVec446SE[1];
			fVec446SE[1] = fVec446SE[0];
			fVec447SE[1] = fVec447SE[0];
			fVec441SE[2] = fVec441SE[1];
			fVec441SE[1] = fVec441SE[0];
			fVec442SE[1] = fVec442SE[0];
			fVec438SE[2] = fVec438SE[1];
			fVec438SE[1] = fVec438SE[0];
			fVec439SE[1] = fVec439SE[0];
			fVec433SE[2] = fVec433SE[1];
			fVec433SE[1] = fVec433SE[0];
			fVec434SE[1] = fVec434SE[0];
			fVec428SE[2] = fVec428SE[1];
			fVec428SE[1] = fVec428SE[0];
			fVec429SE[1] = fVec429SE[0];
			fVec423SE[2] = fVec423SE[1];
			fVec423SE[1] = fVec423SE[0];
			fVec424SE[1] = fVec424SE[0];
			fVec418SE[2] = fVec418SE[1];
			fVec418SE[1] = fVec418SE[0];
			fVec419SE[1] = fVec419SE[0];
			fVec413SE[2] = fVec413SE[1];
			fVec413SE[1] = fVec413SE[0];
			fVec414SE[1] = fVec414SE[0];
			fVec410SE[2] = fVec410SE[1];
			fVec410SE[1] = fVec410SE[0];
			fVec411SE[1] = fVec411SE[0];
			fVec405SE[2] = fVec405SE[1];
			fVec405SE[1] = fVec405SE[0];
			fVec406SE[1] = fVec406SE[0];
			fVec400SE[2] = fVec400SE[1];
			fVec400SE[1] = fVec400SE[0];
			fVec401SE[1] = fVec401SE[0];
			fVec395SE[2] = fVec395SE[1];
			fVec395SE[1] = fVec395SE[0];
			fVec396SE[1] = fVec396SE[0];
			fVec390SE[2] = fVec390SE[1];
			fVec390SE[1] = fVec390SE[0];
			fVec391SE[1] = fVec391SE[0];
			fVec385SE[2] = fVec385SE[1];
			fVec385SE[1] = fVec385SE[0];
			fVec386SE[1] = fVec386SE[0];
			fVec382SE[2] = fVec382SE[1];
			fVec382SE[1] = fVec382SE[0];
			fVec383SE[1] = fVec383SE[0];
			fVec377SE[2] = fVec377SE[1];
			fVec377SE[1] = fVec377SE[0];
			fVec378SE[1] = fVec378SE[0];
			fVec372SE[2] = fVec372SE[1];
			fVec372SE[1] = fVec372SE[0];
			fVec373SE[1] = fVec373SE[0];
			fVec367SE[2] = fVec367SE[1];
			fVec367SE[1] = fVec367SE[0];
			fVec368SE[1] = fVec368SE[0];
			fVec362SE[2] = fVec362SE[1];
			fVec362SE[1] = fVec362SE[0];
			fVec363SE[1] = fVec363SE[0];
			fVec357SE[2] = fVec357SE[1];
			fVec357SE[1] = fVec357SE[0];
			fVec358SE[1] = fVec358SE[0];
			fVec354SE[2] = fVec354SE[1];
			fVec354SE[1] = fVec354SE[0];
			fVec355SE[1] = fVec355SE[0];
			fVec349SE[2] = fVec349SE[1];
			fVec349SE[1] = fVec349SE[0];
			fVec350SE[1] = fVec350SE[0];
			fVec344SE[2] = fVec344SE[1];
			fVec344SE[1] = fVec344SE[0];
			fVec345SE[1] = fVec345SE[0];
			fVec339SE[2] = fVec339SE[1];
			fVec339SE[1] = fVec339SE[0];
			fVec340SE[1] = fVec340SE[0];
			fVec334SE[2] = fVec334SE[1];
			fVec334SE[1] = fVec334SE[0];
			fVec335SE[1] = fVec335SE[0];
			fVec329SE[2] = fVec329SE[1];
			fVec329SE[1] = fVec329SE[0];
			fVec330SE[1] = fVec330SE[0];
			fVec326SE[2] = fVec326SE[1];
			fVec326SE[1] = fVec326SE[0];
			fVec327SE[1] = fVec327SE[0];
			fVec321SE[2] = fVec321SE[1];
			fVec321SE[1] = fVec321SE[0];
			fVec322SE[1] = fVec322SE[0];
			fVec316SE[2] = fVec316SE[1];
			fVec316SE[1] = fVec316SE[0];
			fVec317SE[1] = fVec317SE[0];
			fVec311SE[2] = fVec311SE[1];
			fVec311SE[1] = fVec311SE[0];
			fVec312SE[1] = fVec312SE[0];
			fVec306SE[2] = fVec306SE[1];
			fVec306SE[1] = fVec306SE[0];
			fVec307SE[1] = fVec307SE[0];
			fVec301SE[2] = fVec301SE[1];
			fVec301SE[1] = fVec301SE[0];
			fVec302SE[1] = fVec302SE[0];
			fVec298SE[2] = fVec298SE[1];
			fVec298SE[1] = fVec298SE[0];
			fVec299SE[1] = fVec299SE[0];
			fVec293SE[2] = fVec293SE[1];
			fVec293SE[1] = fVec293SE[0];
			fVec294SE[1] = fVec294SE[0];
			fVec288SE[2] = fVec288SE[1];
			fVec288SE[1] = fVec288SE[0];
			fVec289SE[1] = fVec289SE[0];
			fVec283SE[2] = fVec283SE[1];
			fVec283SE[1] = fVec283SE[0];
			fVec284SE[1] = fVec284SE[0];
			fVec278SE[2] = fVec278SE[1];
			fVec278SE[1] = fVec278SE[0];
			fVec279SE[1] = fVec279SE[0];
			fVec273SE[2] = fVec273SE[1];
			fVec273SE[1] = fVec273SE[0];
			fVec274SE[1] = fVec274SE[0];
			fVec270SE[2] = fVec270SE[1];
			fVec270SE[1] = fVec270SE[0];
			fVec271SE[1] = fVec271SE[0];
			fVec265SE[2] = fVec265SE[1];
			fVec265SE[1] = fVec265SE[0];
			fVec266SE[1] = fVec266SE[0];
			fVec260SE[2] = fVec260SE[1];
			fVec260SE[1] = fVec260SE[0];
			fVec261SE[1] = fVec261SE[0];
			fVec255SE[2] = fVec255SE[1];
			fVec255SE[1] = fVec255SE[0];
			fVec256SE[1] = fVec256SE[0];
			fVec250SE[2] = fVec250SE[1];
			fVec250SE[1] = fVec250SE[0];
			fVec251SE[1] = fVec251SE[0];
			fVec245SE[2] = fVec245SE[1];
			fVec245SE[1] = fVec245SE[0];
			fVec246SE[1] = fVec246SE[0];
			fVec242SE[2] = fVec242SE[1];
			fVec242SE[1] = fVec242SE[0];
			fVec243SE[1] = fVec243SE[0];
			fVec237SE[2] = fVec237SE[1];
			fVec237SE[1] = fVec237SE[0];
			fVec238SE[1] = fVec238SE[0];
			fVec232SE[2] = fVec232SE[1];
			fVec232SE[1] = fVec232SE[0];
			fVec233SE[1] = fVec233SE[0];
			fVec227SE[2] = fVec227SE[1];
			fVec227SE[1] = fVec227SE[0];
			fVec228SE[1] = fVec228SE[0];
			fVec222SE[2] = fVec222SE[1];
			fVec222SE[1] = fVec222SE[0];
			fVec223SE[1] = fVec223SE[0];
			fVec217SE[2] = fVec217SE[1];
			fVec217SE[1] = fVec217SE[0];
			fVec218SE[1] = fVec218SE[0];
			fVec214SE[2] = fVec214SE[1];
			fVec214SE[1] = fVec214SE[0];
			fVec215SE[1] = fVec215SE[0];
			fVec209SE[2] = fVec209SE[1];
			fVec209SE[1] = fVec209SE[0];
			fVec210SE[1] = fVec210SE[0];
			fVec204SE[2] = fVec204SE[1];
			fVec204SE[1] = fVec204SE[0];
			fVec205SE[1] = fVec205SE[0];
			fVec199SE[2] = fVec199SE[1];
			fVec199SE[1] = fVec199SE[0];
			fVec200SE[1] = fVec200SE[0];
			fVec194SE[2] = fVec194SE[1];
			fVec194SE[1] = fVec194SE[0];
			fVec195SE[1] = fVec195SE[0];
			fVec189SE[2] = fVec189SE[1];
			fVec189SE[1] = fVec189SE[0];
			fVec190SE[1] = fVec190SE[0];
			fVec186SE[2] = fVec186SE[1];
			fVec186SE[1] = fVec186SE[0];
			fVec187SE[1] = fVec187SE[0];
			fVec181SE[2] = fVec181SE[1];
			fVec181SE[1] = fVec181SE[0];
			fVec182SE[1] = fVec182SE[0];
			fVec176SE[2] = fVec176SE[1];
			fVec176SE[1] = fVec176SE[0];
			fVec177SE[1] = fVec177SE[0];
			fVec161SE[1] = fVec161SE[0];
			fVec167SE[1] = fVec167SE[0];
			fVec165SE[1] = fVec165SE[0];
			fVec163SE[1] = fVec163SE[0];
			fVec160SE[1] = fVec160SE[0];
			fVec158SE[1] = fVec158SE[0];
			fVec157SE[1] = fVec157SE[0];
			fVec153SE[1] = fVec153SE[0];
			fVec155SE[1] = fVec155SE[0];
			fVec154SE[1] = fVec154SE[0];
			fVec148SE[1] = fVec148SE[0];
			fVec144SE[1] = fVec144SE[0];
			fVec146SE[1] = fVec146SE[0];
			fVec145SE[1] = fVec145SE[0];
			fVec141SE[2] = fVec141SE[1];
			fVec141SE[1] = fVec141SE[0];
			fVec142SE[1] = fVec142SE[0];
			fVec137SE[2] = fVec137SE[1];
			fVec137SE[1] = fVec137SE[0];
			fVec136SE[1] = fVec136SE[0];
			fVec134SE[1] = fVec134SE[0];
			fVec110SE[1] = fVec110SE[0];
			fVec107SE[1] = fVec107SE[0];
			fVec105SE[1] = fVec105SE[0];
			fVec103SE[1] = fVec103SE[0];
			++IOTA0;
			fVec73SE[1] = fVec73SE[0];
			fVec67SI[3] = fVec67SI[2];
			fVec67SI[2] = fVec67SI[1];
			fVec67SI[1] = fVec67SI[0];
			fVec70SI[1] = fVec70SI[0];
			iVec68SI[1] = iVec68SI[0];
			fVec66SE[1] = fVec66SE[0];
			fVec64SE[1] = fVec64SE[0];
			fVec62SE[1] = fVec62SE[0];
			fVec61SE[1] = fVec61SE[0];
			fVec60SE[1] = fVec60SE[0];
			fVec58SE[1] = fVec58SE[0];
			fVec56SE[1] = fVec56SE[0];
			fVec55SE[1] = fVec55SE[0];
			fVec54SE[1] = fVec54SE[0];
			fVec52SE[1] = fVec52SE[0];
			fVec50SE[1] = fVec50SE[0];
			fVec49SE[1] = fVec49SE[0];
			fVec48SE[1] = fVec48SE[0];
			fVec46SE[1] = fVec46SE[0];
			fVec45SE[1] = fVec45SE[0];
			fVec43SE[1] = fVec43SE[0];
			fVec42SE[1] = fVec42SE[0];
			fVec40SE[1] = fVec40SE[0];
			fVec39SE[1] = fVec39SE[0];
			fVec37SE[1] = fVec37SE[0];
			fVec35SE[1] = fVec35SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec32SE[1] = fVec32SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec28SE[1] = fVec28SE[0];
			fVec27SE[1] = fVec27SE[0];
			fVec25SE[1] = fVec25SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec22SE[1] = fVec22SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec15SE[1] = fVec15SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec15SEState = fVec15SE[1];
		fVec17SEState = fVec17SE[1];
		fVec18SEState = fVec18SE[1];
		fVec19SEState = fVec19SE[1];
		fVec21SEState = fVec21SE[1];
		fVec22SEState = fVec22SE[1];
		fVec24SEState = fVec24SE[1];
		fVec25SEState = fVec25SE[1];
		fVec27SEState = fVec27SE[1];
		fVec28SEState = fVec28SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec32SEState = fVec32SE[1];
		fVec34SEState = fVec34SE[1];
		fVec35SEState = fVec35SE[1];
		fVec37SEState = fVec37SE[1];
		fVec39SEState = fVec39SE[1];
		fVec40SEState = fVec40SE[1];
		fVec42SEState = fVec42SE[1];
		fVec43SEState = fVec43SE[1];
		fVec45SEState = fVec45SE[1];
		fVec46SEState = fVec46SE[1];
		fVec48SEState = fVec48SE[1];
		fVec49SEState = fVec49SE[1];
		fVec50SEState = fVec50SE[1];
		fVec52SEState = fVec52SE[1];
		fVec54SEState = fVec54SE[1];
		fVec55SEState = fVec55SE[1];
		fVec56SEState = fVec56SE[1];
		fVec58SEState = fVec58SE[1];
		fVec60SEState = fVec60SE[1];
		fVec61SEState = fVec61SE[1];
		fVec62SEState = fVec62SE[1];
		fVec64SEState = fVec64SE[1];
		fVec66SEState = fVec66SE[1];
		iVec68SIState = iVec68SI[1];
		fVec70SIState = fVec70SI[1];
		fVec67SIState[0] = fVec67SI[1];
		fVec67SIState[1] = fVec67SI[2];
		fVec67SIState[2] = fVec67SI[3];
		fVec73SEState = fVec73SE[1];
		fVec103SEState = fVec103SE[1];
		fVec105SEState = fVec105SE[1];
		fVec107SEState = fVec107SE[1];
		fVec110SEState = fVec110SE[1];
		fVec134SEState = fVec134SE[1];
		fVec136SEState = fVec136SE[1];
		fVec137SEState[0] = fVec137SE[1];
		fVec137SEState[1] = fVec137SE[2];
		fVec142SEState = fVec142SE[1];
		fVec141SEState[0] = fVec141SE[1];
		fVec141SEState[1] = fVec141SE[2];
		fVec145SEState = fVec145SE[1];
		fVec146SEState = fVec146SE[1];
		fVec144SEState = fVec144SE[1];
		fVec148SEState = fVec148SE[1];
		fVec154SEState = fVec154SE[1];
		fVec155SEState = fVec155SE[1];
		fVec153SEState = fVec153SE[1];
		fVec157SEState = fVec157SE[1];
		fVec158SEState = fVec158SE[1];
		fVec160SEState = fVec160SE[1];
		fVec163SEState = fVec163SE[1];
		fVec165SEState = fVec165SE[1];
		fVec167SEState = fVec167SE[1];
		fVec161SEState = fVec161SE[1];
		fVec177SEState = fVec177SE[1];
		fVec176SEState[0] = fVec176SE[1];
		fVec176SEState[1] = fVec176SE[2];
		fVec182SEState = fVec182SE[1];
		fVec181SEState[0] = fVec181SE[1];
		fVec181SEState[1] = fVec181SE[2];
		fVec187SEState = fVec187SE[1];
		fVec186SEState[0] = fVec186SE[1];
		fVec186SEState[1] = fVec186SE[2];
		fVec190SEState = fVec190SE[1];
		fVec189SEState[0] = fVec189SE[1];
		fVec189SEState[1] = fVec189SE[2];
		fVec195SEState = fVec195SE[1];
		fVec194SEState[0] = fVec194SE[1];
		fVec194SEState[1] = fVec194SE[2];
		fVec200SEState = fVec200SE[1];
		fVec199SEState[0] = fVec199SE[1];
		fVec199SEState[1] = fVec199SE[2];
		fVec205SEState = fVec205SE[1];
		fVec204SEState[0] = fVec204SE[1];
		fVec204SEState[1] = fVec204SE[2];
		fVec210SEState = fVec210SE[1];
		fVec209SEState[0] = fVec209SE[1];
		fVec209SEState[1] = fVec209SE[2];
		fVec215SEState = fVec215SE[1];
		fVec214SEState[0] = fVec214SE[1];
		fVec214SEState[1] = fVec214SE[2];
		fVec218SEState = fVec218SE[1];
		fVec217SEState[0] = fVec217SE[1];
		fVec217SEState[1] = fVec217SE[2];
		fVec223SEState = fVec223SE[1];
		fVec222SEState[0] = fVec222SE[1];
		fVec222SEState[1] = fVec222SE[2];
		fVec228SEState = fVec228SE[1];
		fVec227SEState[0] = fVec227SE[1];
		fVec227SEState[1] = fVec227SE[2];
		fVec233SEState = fVec233SE[1];
		fVec232SEState[0] = fVec232SE[1];
		fVec232SEState[1] = fVec232SE[2];
		fVec238SEState = fVec238SE[1];
		fVec237SEState[0] = fVec237SE[1];
		fVec237SEState[1] = fVec237SE[2];
		fVec243SEState = fVec243SE[1];
		fVec242SEState[0] = fVec242SE[1];
		fVec242SEState[1] = fVec242SE[2];
		fVec246SEState = fVec246SE[1];
		fVec245SEState[0] = fVec245SE[1];
		fVec245SEState[1] = fVec245SE[2];
		fVec251SEState = fVec251SE[1];
		fVec250SEState[0] = fVec250SE[1];
		fVec250SEState[1] = fVec250SE[2];
		fVec256SEState = fVec256SE[1];
		fVec255SEState[0] = fVec255SE[1];
		fVec255SEState[1] = fVec255SE[2];
		fVec261SEState = fVec261SE[1];
		fVec260SEState[0] = fVec260SE[1];
		fVec260SEState[1] = fVec260SE[2];
		fVec266SEState = fVec266SE[1];
		fVec265SEState[0] = fVec265SE[1];
		fVec265SEState[1] = fVec265SE[2];
		fVec271SEState = fVec271SE[1];
		fVec270SEState[0] = fVec270SE[1];
		fVec270SEState[1] = fVec270SE[2];
		fVec274SEState = fVec274SE[1];
		fVec273SEState[0] = fVec273SE[1];
		fVec273SEState[1] = fVec273SE[2];
		fVec279SEState = fVec279SE[1];
		fVec278SEState[0] = fVec278SE[1];
		fVec278SEState[1] = fVec278SE[2];
		fVec284SEState = fVec284SE[1];
		fVec283SEState[0] = fVec283SE[1];
		fVec283SEState[1] = fVec283SE[2];
		fVec289SEState = fVec289SE[1];
		fVec288SEState[0] = fVec288SE[1];
		fVec288SEState[1] = fVec288SE[2];
		fVec294SEState = fVec294SE[1];
		fVec293SEState[0] = fVec293SE[1];
		fVec293SEState[1] = fVec293SE[2];
		fVec299SEState = fVec299SE[1];
		fVec298SEState[0] = fVec298SE[1];
		fVec298SEState[1] = fVec298SE[2];
		fVec302SEState = fVec302SE[1];
		fVec301SEState[0] = fVec301SE[1];
		fVec301SEState[1] = fVec301SE[2];
		fVec307SEState = fVec307SE[1];
		fVec306SEState[0] = fVec306SE[1];
		fVec306SEState[1] = fVec306SE[2];
		fVec312SEState = fVec312SE[1];
		fVec311SEState[0] = fVec311SE[1];
		fVec311SEState[1] = fVec311SE[2];
		fVec317SEState = fVec317SE[1];
		fVec316SEState[0] = fVec316SE[1];
		fVec316SEState[1] = fVec316SE[2];
		fVec322SEState = fVec322SE[1];
		fVec321SEState[0] = fVec321SE[1];
		fVec321SEState[1] = fVec321SE[2];
		fVec327SEState = fVec327SE[1];
		fVec326SEState[0] = fVec326SE[1];
		fVec326SEState[1] = fVec326SE[2];
		fVec330SEState = fVec330SE[1];
		fVec329SEState[0] = fVec329SE[1];
		fVec329SEState[1] = fVec329SE[2];
		fVec335SEState = fVec335SE[1];
		fVec334SEState[0] = fVec334SE[1];
		fVec334SEState[1] = fVec334SE[2];
		fVec340SEState = fVec340SE[1];
		fVec339SEState[0] = fVec339SE[1];
		fVec339SEState[1] = fVec339SE[2];
		fVec345SEState = fVec345SE[1];
		fVec344SEState[0] = fVec344SE[1];
		fVec344SEState[1] = fVec344SE[2];
		fVec350SEState = fVec350SE[1];
		fVec349SEState[0] = fVec349SE[1];
		fVec349SEState[1] = fVec349SE[2];
		fVec355SEState = fVec355SE[1];
		fVec354SEState[0] = fVec354SE[1];
		fVec354SEState[1] = fVec354SE[2];
		fVec358SEState = fVec358SE[1];
		fVec357SEState[0] = fVec357SE[1];
		fVec357SEState[1] = fVec357SE[2];
		fVec363SEState = fVec363SE[1];
		fVec362SEState[0] = fVec362SE[1];
		fVec362SEState[1] = fVec362SE[2];
		fVec368SEState = fVec368SE[1];
		fVec367SEState[0] = fVec367SE[1];
		fVec367SEState[1] = fVec367SE[2];
		fVec373SEState = fVec373SE[1];
		fVec372SEState[0] = fVec372SE[1];
		fVec372SEState[1] = fVec372SE[2];
		fVec378SEState = fVec378SE[1];
		fVec377SEState[0] = fVec377SE[1];
		fVec377SEState[1] = fVec377SE[2];
		fVec383SEState = fVec383SE[1];
		fVec382SEState[0] = fVec382SE[1];
		fVec382SEState[1] = fVec382SE[2];
		fVec386SEState = fVec386SE[1];
		fVec385SEState[0] = fVec385SE[1];
		fVec385SEState[1] = fVec385SE[2];
		fVec391SEState = fVec391SE[1];
		fVec390SEState[0] = fVec390SE[1];
		fVec390SEState[1] = fVec390SE[2];
		fVec396SEState = fVec396SE[1];
		fVec395SEState[0] = fVec395SE[1];
		fVec395SEState[1] = fVec395SE[2];
		fVec401SEState = fVec401SE[1];
		fVec400SEState[0] = fVec400SE[1];
		fVec400SEState[1] = fVec400SE[2];
		fVec406SEState = fVec406SE[1];
		fVec405SEState[0] = fVec405SE[1];
		fVec405SEState[1] = fVec405SE[2];
		fVec411SEState = fVec411SE[1];
		fVec410SEState[0] = fVec410SE[1];
		fVec410SEState[1] = fVec410SE[2];
		fVec414SEState = fVec414SE[1];
		fVec413SEState[0] = fVec413SE[1];
		fVec413SEState[1] = fVec413SE[2];
		fVec419SEState = fVec419SE[1];
		fVec418SEState[0] = fVec418SE[1];
		fVec418SEState[1] = fVec418SE[2];
		fVec424SEState = fVec424SE[1];
		fVec423SEState[0] = fVec423SE[1];
		fVec423SEState[1] = fVec423SE[2];
		fVec429SEState = fVec429SE[1];
		fVec428SEState[0] = fVec428SE[1];
		fVec428SEState[1] = fVec428SE[2];
		fVec434SEState = fVec434SE[1];
		fVec433SEState[0] = fVec433SE[1];
		fVec433SEState[1] = fVec433SE[2];
		fVec439SEState = fVec439SE[1];
		fVec438SEState[0] = fVec438SE[1];
		fVec438SEState[1] = fVec438SE[2];
		fVec442SEState = fVec442SE[1];
		fVec441SEState[0] = fVec441SE[1];
		fVec441SEState[1] = fVec441SE[2];
		fVec447SEState = fVec447SE[1];
		fVec446SEState[0] = fVec446SE[1];
		fVec446SEState[1] = fVec446SE[2];
		fVec452SEState = fVec452SE[1];
		fVec451SEState[0] = fVec451SE[1];
		fVec451SEState[1] = fVec451SE[2];
		fVec457SEState = fVec457SE[1];
		fVec456SEState[0] = fVec456SE[1];
		fVec456SEState[1] = fVec456SE[2];
		fVec462SEState = fVec462SE[1];
		fVec461SEState[0] = fVec461SE[1];
		fVec461SEState[1] = fVec461SE[2];
		fVec467SEState = fVec467SE[1];
		fVec466SEState[0] = fVec466SE[1];
		fVec466SEState[1] = fVec466SE[2];
		fVec470SEState = fVec470SE[1];
		fVec469SEState[0] = fVec469SE[1];
		fVec469SEState[1] = fVec469SE[2];
		fVec475SEState = fVec475SE[1];
		fVec474SEState[0] = fVec474SE[1];
		fVec474SEState[1] = fVec474SE[2];
		fVec480SEState = fVec480SE[1];
		fVec479SEState[0] = fVec479SE[1];
		fVec479SEState[1] = fVec479SE[2];
		fVec485SEState = fVec485SE[1];
		fVec484SEState[0] = fVec484SE[1];
		fVec484SEState[1] = fVec484SE[2];
		fVec490SEState = fVec490SE[1];
		fVec489SEState[0] = fVec489SE[1];
		fVec489SEState[1] = fVec489SE[2];
		fVec495SEState = fVec495SE[1];
		fVec494SEState[0] = fVec494SE[1];
		fVec494SEState[1] = fVec494SE[2];
		fVec498SEState = fVec498SE[1];
		fVec497SEState[0] = fVec497SE[1];
		fVec497SEState[1] = fVec497SE[2];
		fVec503SEState = fVec503SE[1];
		fVec502SEState[0] = fVec502SE[1];
		fVec502SEState[1] = fVec502SE[2];
		fVec508SEState = fVec508SE[1];
		fVec507SEState[0] = fVec507SE[1];
		fVec507SEState[1] = fVec507SE[2];
		fVec513SEState = fVec513SE[1];
		fVec512SEState[0] = fVec512SE[1];
		fVec512SEState[1] = fVec512SE[2];
		fVec518SEState = fVec518SE[1];
		fVec517SEState[0] = fVec517SE[1];
		fVec517SEState[1] = fVec517SE[2];
		fVec523SEState = fVec523SE[1];
		fVec522SEState[0] = fVec522SE[1];
		fVec522SEState[1] = fVec522SE[2];
		fVec526SEState = fVec526SE[1];
		fVec525SEState[0] = fVec525SE[1];
		fVec525SEState[1] = fVec525SE[2];
		fVec531SEState = fVec531SE[1];
		fVec530SEState[0] = fVec530SE[1];
		fVec530SEState[1] = fVec530SE[2];
		fVec536SEState = fVec536SE[1];
		fVec535SEState[0] = fVec535SE[1];
		fVec535SEState[1] = fVec535SE[2];
		fVec541SEState = fVec541SE[1];
		fVec540SEState[0] = fVec540SE[1];
		fVec540SEState[1] = fVec540SE[2];
		fVec546SEState = fVec546SE[1];
		fVec545SEState[0] = fVec545SE[1];
		fVec545SEState[1] = fVec545SE[2];
		fVec551SEState = fVec551SE[1];
		fVec550SEState[0] = fVec550SE[1];
		fVec550SEState[1] = fVec550SE[2];
		fVec554SEState = fVec554SE[1];
		fVec553SEState[0] = fVec553SE[1];
		fVec553SEState[1] = fVec553SE[2];
		fVec559SEState = fVec559SE[1];
		fVec558SEState[0] = fVec558SE[1];
		fVec558SEState[1] = fVec558SE[2];
		fVec564SEState = fVec564SE[1];
		fVec563SEState[0] = fVec563SE[1];
		fVec563SEState[1] = fVec563SE[2];
		fVec566SEState = fVec566SE[1];
		fVec570SEState = fVec570SE[1];
		fVec574SEState = fVec574SE[1];
		fVec578SEState = fVec578SE[1];
		fVec582SEState = fVec582SE[1];
		fVec586SEState = fVec586SE[1];
		fVec590SEState = fVec590SE[1];
		fVec594SEState = fVec594SE[1];
		fVec598SEState = fVec598SE[1];
		fVec602SEState = fVec602SE[1];
		fVec606SEState = fVec606SE[1];
		fVec610SEState = fVec610SE[1];
		fVec614SEState = fVec614SE[1];
		fVec618SEState = fVec618SE[1];
		fVec622SEState = fVec622SE[1];
		fbargraph0 = fSlow39SE;
		fbargraph1 = fSlow40SE;
		fbargraph2 = fSlow41SE;
		fbargraph3 = fSlow42SE;
		fbargraph4 = fSlow43SE;
		fbargraph5 = fSlow44SE;
		fbargraph6 = fSlow45SE;
		fbargraph7 = fSlow46SE;
		fbargraph8 = fSlow47SE;
		fbargraph9 = fSlow48SE;
		fbargraph10 = fSlow49SE;
		fbargraph11 = fSlow50SE;
		fbargraph12 = fSlow51SE;
		fbargraph13 = fSlow52SE;
		fbargraph14 = fSlow53SE;
	}
};


