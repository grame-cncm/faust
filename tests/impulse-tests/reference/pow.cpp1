//----------------------------------------------------------
// name: "pow"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	static float 	fWave0SC[4];
	int 	idxfWave0SC;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "pow.dsp");
		m->declare("name", "pow");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 14; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		idxfWave0SC = 0;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("pow");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SC; // step: 7
		float 	fTemp1SC; // step: 10
		float 	fTemp2SC; // step: 14
		float 	fTemp3SC; // step: 21
		int 	iTemp4SC; // step: 25
		float 	fTemp5SC; // step: 31
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		FAUSTFLOAT* output8 = output[8]; // Zone 3
		FAUSTFLOAT* output9 = output[9]; // Zone 3
		FAUSTFLOAT* output10 = output[10]; // Zone 3
		FAUSTFLOAT* output11 = output[11]; // Zone 3
		FAUSTFLOAT* output12 = output[12]; // Zone 3
		FAUSTFLOAT* output13 = output[13]; // Zone 3
		for (int i=0; i<count; i++) {
			fTemp0SC = fWave0SC[idxfWave0SC]; // step: 7
			fTemp1SC = sqrtf((3.0f * fTemp0SC)); // step: 10
			fTemp2SC = (4.0f * fTemp0SC); // step: 14
			fTemp3SC = powf((5.0f * fTemp0SC),2.0f); // step: 21
			iTemp4SC = int((6.0f * fTemp0SC)); // step: 25
			fTemp5SC = (7.0f * fTemp0SC); // step: 31
			output0[i] = (FAUSTFLOAT)(fTemp1SC);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(sqrtf(fTemp1SC));  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(powf(fTemp2SC,0.125f));  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(powf(fTemp2SC,0.0625f));  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(fTemp3SC);  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)(fTemp3SC);  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)(faustpower<2>(iTemp4SC));  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)(powf(float(iTemp4SC),2.0f));  // Zone Exec Code
			output8[i] = (FAUSTFLOAT)(powf(fTemp5SC,2.0001f));  // Zone Exec Code
			output9[i] = (FAUSTFLOAT)(powf(fTemp5SC,2.0f));  // Zone Exec Code
			output10[i] = (FAUSTFLOAT)(1.0f);  // Zone Exec Code
			output11[i] = (FAUSTFLOAT)((8.0f * fTemp0SC));  // Zone Exec Code
			output12[i] = (FAUSTFLOAT)(1.0f);  // Zone Exec Code
			output13[i] = (FAUSTFLOAT)((9.0f * fTemp0SC));  // Zone Exec Code
			// post processing
			idxfWave0SC = (idxfWave0SC + 1) % 4;
		}
	}
};


float 	mydsp::fWave0SC[4] = {0.1f,0.56f,1.3f,8.9f};
