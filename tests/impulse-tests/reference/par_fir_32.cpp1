//----------------------------------------------------------
// name: "par_fir_32"
// version: "2.76.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	float 	fVec0SEState[31]; // Dense Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-single -scal -e par_fir_32.dsp -o par_fir_32_exp.dsp");
		m->declare("filename", "par_fir_32.dsp");
		m->declare("filters_lib_fir_author", "Julius O. Smith III");
		m->declare("filters_lib_fir_copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters_lib_fir_license", "MIT-style STK-4.3 license");
		m->declare("filters_lib_lowpass0_highpass1", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters_lib_name", "Faust Filters Library");
		m->declare("filters_lib_version", "1.5.0");
		m->declare("library_path0", "/usr/local/share/faust/stdfaust.lib");
		m->declare("library_path1", "/usr/local/share/faust/filters.lib");
		m->declare("name", "par_fir_32");
		m->declare("version", "2.76.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		for (int j = 0; j < 31; j++) { fVec0SEState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("par_fir_32");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fVec0SECache[128+31];
		int fullcount = count;
		for (int index = 0; index < fullcount; index += 128) {
			int count = std::min(128, fullcount-index);
			FAUSTFLOAT* input0 = input[0]; // Zone 3
			FAUSTFLOAT* output0 = output[0]; // Zone 3
			float* 	fVec0SE = fVec0SECache + 128 - 1;
			for (int j = 0; j < 31; j++) { fVec0SE[j+1] = fVec0SEState[j]; }
			for (int i=0; i<count; i++) {
				fTemp0SE = (float)input0[i]; // step: 2
				fVec0SE[0] = fTemp0SE;
				output0[i] = (FAUSTFLOAT)((fVec0SE[0] + (0.5f * fVec0SE[1]) + (0.33333334f * fVec0SE[2]) + (0.25f * fVec0SE[3]) + (0.2f * fVec0SE[4]) + (0.16666667f * fVec0SE[5]) + (0.14285715f * fVec0SE[6]) + (0.125f * fVec0SE[7]) + (0.11111111f * fVec0SE[8]) + (0.1f * fVec0SE[9]) + (0.09090909f * fVec0SE[10]) + (0.083333336f * fVec0SE[11]) + (0.07692308f * fVec0SE[12]) + (0.071428575f * fVec0SE[13]) + (0.06666667f * fVec0SE[14]) + (0.0625f * fVec0SE[15]) + (0.05882353f * fVec0SE[16]) + (0.055555556f * fVec0SE[17]) + (0.05263158f * fVec0SE[18]) + (0.05f * fVec0SE[19]) + (0.04761905f * fVec0SE[20]) + (0.045454547f * fVec0SE[21]) + (0.04347826f * fVec0SE[22]) + (0.041666668f * fVec0SE[23]) + (0.04f * fVec0SE[24]) + (0.03846154f * fVec0SE[25]) + (0.037037037f * fVec0SE[26]) + (0.035714287f * fVec0SE[27]) + (0.03448276f * fVec0SE[28]) + (0.033333335f * fVec0SE[29]) + (0.032258064f * fVec0SE[30]) + (0.03125f * fVec0SE[31]) /* Sum */));  // Zone Exec Code
				// post processing
				--fVec0SE;
			}
			for (int j = 0; j < 31; j++) { fVec0SEState[j] = fVec0SE[j+1]; }
		}
	}
};


