//----------------------------------------------------------
// name: "lowShelf"
//
// Code generated with Faust 2.77.2 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	float 	fConst0; // step: 20
	// Recursion delay fVeeec0 is of type kCopyDelay
	// While its definition is of type kZeroDelay
	float 	fVeeec0State[2]; // Copy Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("filename", "lowShelf.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("maxmsp.lib/author", "GRAME");
		m->declare("maxmsp.lib/copyright", "GRAME");
		m->declare("maxmsp.lib/license", "LGPL");
		m->declare("maxmsp.lib/name", "MaxMSP compatibility Library");
		m->declare("maxmsp.lib/version", "1.1");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "lowShelf");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = (6.2831855f / min(1.92e+05f, max(1.0f, float(fSampleRate)))); // step: 20
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fslider1 = 1.0f;
		fslider2 = 1e+03f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 2; j++) { fVeeec0State[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("lowShelf");
		ui_interface->addHorizontalSlider("Freq", &fslider2, 1e+03f, 1e+02f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Gain", &fslider0, 0.0f, -1e+01f, 1e+01f, 0.1f);
		ui_interface->addHorizontalSlider("Q", &fslider1, 1.0f, 0.01f, 1e+02f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0 = powf(1e+01f,(0.025f * float(fslider0))); // step: 5
		float 	fSlow1 = (fConst0 * max(0.0f, float(fslider2))); // step: 21
		float 	fSlow2 = ((sqrtf(fSlow0) * sinf(fSlow1)) / max(0.001f, float(fslider1))); // step: 24
		float 	fSlow3 = cosf(fSlow1); // step: 27
		float 	fSlow4 = ((fSlow0 + -1.0f) * fSlow3); // step: 28
		float 	fSlow5 = (fSlow0 + fSlow4); // step: 29
		float 	fSlow6 = ((fSlow2 + fSlow5) + 1.0f); // step: 31
		float 	fSlow7 = (fSlow0 / fSlow6); // step: 32
		float 	fSlow8 = (1.0f / fSlow6); // step: 35
		float 	fSlow9 = (fSlow5 + (1.0f - fSlow2)); // step: 37
		float 	fSlow10 = ((fSlow0 + 1.0f) * fSlow3); // step: 43
		float 	fSlow11 = (2.0f * ((fSlow0 + fSlow10) + -1.0f)); // step: 46
		float 	fVeeec0[3];
		float 	fSlow12 = ((fSlow0 + fSlow2) + (1.0f - fSlow4)); // step: 57
		float 	fSlow13 = (2.0f * (fSlow0 + (-1.0f - fSlow10))); // step: 61
		float 	fSlow14 = (fSlow0 + (1.0f - (fSlow4 + fSlow2))); // step: 66
		int fullcount = count;
		for (int index = 0; index < fullcount; index += 32) {
			int count = min(32, fullcount-index);
			FAUSTFLOAT* input0 = &input[0][index]; // Zone 3
			FAUSTFLOAT* output0 = &output[0][index]; // Zone 3
			fVeeec0[1] = fVeeec0State[0];
			fVeeec0[2] = fVeeec0State[1];
			for (int i=0; i<count; i++) {
				float 	fTemp0 = fVeeec0[2]; // step: 39
				float 	fTemp1 = fVeeec0[1]; // step: 48
				fVeeec0[0] = ((float)input0[i] - (fSlow8 * ((fSlow9 * fTemp0) - (fSlow11 * fTemp1))));
				output0[i] = (FAUSTFLOAT)((fSlow7 * (((fSlow12 * fVeeec0[0]) + (fSlow13 * fTemp1)) + (fSlow14 * fTemp0))));  // Zone Exec Code
				// post processing
				fVeeec0[2] = fVeeec0[1];
				fVeeec0[1] = fVeeec0[0];
			}
			fVeeec0State[0] = fVeeec0[1];
			fVeeec0State[1] = fVeeec0[2];
		}
	}
};


