/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "dbmeter"
version: "1.0"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif


class mydsp : public dsp {
	
 private:
	
	int fSampleRate;
	float fConst0;
	float fRec0[2];
	FAUSTFLOAT fVbargraph0;
	int iConst1;
	float fRec1[2];
	FAUSTFLOAT fVbargraph1;
	int iConst2;
	float fRec2[2];
	FAUSTFLOAT fVbargraph2;
	int iConst3;
	float fRec3[2];
	FAUSTFLOAT fVbargraph3;
	int iConst4;
	float fRec4[2];
	FAUSTFLOAT fVbargraph4;
	int iConst5;
	float fRec5[2];
	FAUSTFLOAT fVbargraph5;
	int iConst6;
	float fRec6[2];
	FAUSTFLOAT fVbargraph6;
	int iConst7;
	float fRec7[2];
	FAUSTFLOAT fVbargraph7;
	int iConst8;
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "dbmeter.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "dbmeter");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() {
		return 8;
	}
	virtual int getNumOutputs() {
		return 8;
	}
	
	static void classInit(int sample_rate) {
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = 8e+01f / std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
		iConst1 = 0;
		iConst2 = 0;
		iConst3 = 0;
		iConst4 = 0;
		iConst5 = 0;
		iConst6 = 0;
		iConst7 = 0;
		iConst8 = 0;
	}
	
	virtual void instanceResetUserInterface() {
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			fRec0[l0] = 0.0f;
		}
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			fRec1[l1] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec2[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			fRec3[l3] = 0.0f;
		}
		for (int l4 = 0; l4 < 2; l4 = l4 + 1) {
			fRec4[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 2; l5 = l5 + 1) {
			fRec5[l5] = 0.0f;
		}
		for (int l6 = 0; l6 < 2; l6 = l6 + 1) {
			fRec6[l6] = 0.0f;
		}
		for (int l7 = 0; l7 < 2; l7 = l7 + 1) {
			fRec7[l7] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openHorizontalBox("8 channels dB meter");
		ui_interface->openVerticalBox("0");
		ui_interface->declare(&fVbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fVbargraph0, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("1");
		ui_interface->declare(&fVbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fVbargraph1, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("2");
		ui_interface->declare(&fVbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fVbargraph2, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("3");
		ui_interface->declare(&fVbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fVbargraph3, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("4");
		ui_interface->declare(&fVbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fVbargraph4, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("5");
		ui_interface->declare(&fVbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fVbargraph5, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("6");
		ui_interface->declare(&fVbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fVbargraph6, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->openVerticalBox("7");
		ui_interface->declare(&fVbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fVbargraph7, FAUSTFLOAT(-7e+01f), FAUSTFLOAT(1e+01f));
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* input0 = inputs[0];
		FAUSTFLOAT* input1 = inputs[1];
		FAUSTFLOAT* input2 = inputs[2];
		FAUSTFLOAT* input3 = inputs[3];
		FAUSTFLOAT* input4 = inputs[4];
		FAUSTFLOAT* input5 = inputs[5];
		FAUSTFLOAT* input6 = inputs[6];
		FAUSTFLOAT* input7 = inputs[7];
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		FAUSTFLOAT* output2 = outputs[2];
		FAUSTFLOAT* output3 = outputs[3];
		FAUSTFLOAT* output4 = outputs[4];
		FAUSTFLOAT* output5 = outputs[5];
		FAUSTFLOAT* output6 = outputs[6];
		FAUSTFLOAT* output7 = outputs[7];
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			float fTemp0 = float(input0[i0]);
			fRec0[0] = std::max<float>(fRec0[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp0)))));
			fVbargraph0 = FAUSTFLOAT(fRec0[0]);
			output0[i0] = FAUSTFLOAT(iConst1);
			float fTemp1 = float(input1[i0]);
			fRec1[0] = std::max<float>(fRec1[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp1)))));
			fVbargraph1 = FAUSTFLOAT(fRec1[0]);
			output1[i0] = FAUSTFLOAT(iConst2);
			float fTemp2 = float(input2[i0]);
			fRec2[0] = std::max<float>(fRec2[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp2)))));
			fVbargraph2 = FAUSTFLOAT(fRec2[0]);
			output2[i0] = FAUSTFLOAT(iConst3);
			float fTemp3 = float(input3[i0]);
			fRec3[0] = std::max<float>(fRec3[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp3)))));
			fVbargraph3 = FAUSTFLOAT(fRec3[0]);
			output3[i0] = FAUSTFLOAT(iConst4);
			float fTemp4 = float(input4[i0]);
			fRec4[0] = std::max<float>(fRec4[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp4)))));
			fVbargraph4 = FAUSTFLOAT(fRec4[0]);
			output4[i0] = FAUSTFLOAT(iConst5);
			float fTemp5 = float(input5[i0]);
			fRec5[0] = std::max<float>(fRec5[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp5)))));
			fVbargraph5 = FAUSTFLOAT(fRec5[0]);
			output5[i0] = FAUSTFLOAT(iConst6);
			float fTemp6 = float(input6[i0]);
			fRec6[0] = std::max<float>(fRec6[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp6)))));
			fVbargraph6 = FAUSTFLOAT(fRec6[0]);
			output6[i0] = FAUSTFLOAT(iConst7);
			float fTemp7 = float(input7[i0]);
			fRec7[0] = std::max<float>(fRec7[1] - fConst0, std::min<float>(1e+01f, 2e+01f * std::log10(std::max<float>(0.00031622776f, std::fabs(fTemp7)))));
			fVbargraph7 = FAUSTFLOAT(fRec7[0]);
			output7[i0] = FAUSTFLOAT(iConst8);
			fRec0[1] = fRec0[0];
			fRec1[1] = fRec1[0];
			fRec2[1] = fRec2[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
			fRec5[1] = fRec5[0];
			fRec6[1] = fRec6[0];
			fRec7[1] = fRec7[0];
		}
	}

};

#endif
