//----------------------------------------------------------
// author: "Oli Larkin (contact@olilarkin.co.uk)"
// copyright: "Oliver Larkin"
// name: "Thru Zero Flanger"
// version: "0.1"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec9SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec9SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec9SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec9SI[2];
			float 	fTemp14SI; // step: 91
			float 	fTemp15SI; // step: 92
			float 	fTemp16SI; // step: 100
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec9SI[1] = iVec9SIState;
				for (int i=0; i<count; i++) {
					iVec9SI[0] = (iVec9SI[1] + 1);
					fTemp14SI = float((iVec9SI[0] + -1)); // step: 91
					fTemp15SI = (0.001953125f * fTemp14SI); // step: 92
					fTemp16SI = (0.00390625f * fTemp14SI); // step: 100
					output[i] = (2.0f * ((float(((0.0f <= fTemp15SI) & (fTemp15SI <= 0.5f))) * (fTemp16SI + -0.5f)) + (float(((0.5f < fTemp15SI) & (fTemp15SI <= 1.0f))) * (1.5f - fTemp16SI))));
					// post processing
					iVec9SI[1] = iVec9SI[0];
				}
				iVec9SIState = iVec9SI[1];
				output += 128;
			}
		}
	};


	int 	IOTA0;
	float 	fVec0SE[4096]; // Ring Delay
	float 	fConst0KI; // step: 10
	float 	fConst1KI; // step: 11
	FAUSTFLOAT 	fslider0;
	float 	fConst2KI; // step: 22
	float 	fConst3KI; // step: 24
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider1;
	float 	fConst4KI; // step: 50
	// Recursion delay fVec5SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec5SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	float 	fConst5KI; // step: 63
	// Recursion delay fVec7SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec7SEState; // Single Delay
	static float 	ftbl0SI[513];
	float 	fVec13SE[4096]; // Ring Delay
	FAUSTFLOAT 	fslider3;
	float 	fConst6KI; // step: 153
	// Recursion delay fVec16SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec16SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Oli Larkin (contact@olilarkin.co.uk)");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "Oliver Larkin");
		m->declare("description", "Stereo Thru Zero Flanger - warning can ZERO the sound!");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("filename", "thru_zero_flanger.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("licence", "GPL");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "Thru Zero Flanger");
		m->declare("version", "0.1");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(513,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 10
		fConst1KI = (0.001f * fConst0KI); // step: 11
		fConst2KI = expf(-(2e+02f / fConst0KI)); // step: 22
		fConst3KI = (1.0f + -fConst2KI /* Sum */); // step: 24
		fConst4KI = (0.01f * fConst3KI); // step: 50
		fConst5KI = (1.0f / fConst0KI); // step: 63
		fConst6KI = (0.5f * fConst3KI); // step: 153
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1e+01f;
		fslider1 = 2e+01f;
		fslider2 = 0.1f;
		fslider3 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 4096; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec7SEState = 0;
		for (int i = 1; i < 4096; i++) { fVec13SE[i] = 0; }
		fVec13SE[0] = -1;  // detect unintialized
		fVec16SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Thru Zero Flanger");
		ui_interface->declare(&fslider0, "OWL", "PARAMETER_B");
		ui_interface->declare(&fslider0, "unit", "ms");
		ui_interface->addHorizontalSlider("Delay", &fslider0, 1e+01f, 0.5f, 2e+01f, 0.01f);
		ui_interface->declare(&fslider1, "OWL", "PARAMETER_D");
		ui_interface->declare(&fslider1, "unit", "%");
		ui_interface->addHorizontalSlider("Depth", &fslider1, 2e+01f, 3.0f, 1e+02f, 1.0f);
		ui_interface->declare(&fslider3, "OWL", "PARAMETER_C");
		ui_interface->addHorizontalSlider("L-R Offset", &fslider3, 0.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->declare(&fslider2, "OWL", "PARAMETER_A");
		ui_interface->declare(&fslider2, "unit", "hz");
		ui_interface->addHorizontalSlider("Rate", &fslider2, 0.1f, 0.0f, 1.0f, 0.001f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fSlow0BE = (fConst3KI * float(fslider0)); // Zone 2, step: 25
		float 	fVec1SE[2];
		float 	fTemp1SE; // step: 32
		float 	fTemp2SE; // step: 33
		int 	iTemp3SE; // step: 34
		int 	iTemp4SE; // step: 35
		float 	fTemp5SE; // step: 37
		float 	fTemp6SE; // step: 39
		float 	fTemp7SE; // step: 42
		int 	iTemp8SE; // step: 44
		float 	fSlow1BE = (fConst4KI * float(fslider1)); // Zone 2, step: 51
		float 	fVec5SE[2];
		float 	fTemp9SE; // step: 57
		float 	fSlow2BE = (fConst5KI * float(fslider2)); // Zone 2, step: 64
		float 	fTemp10SE; // step: 66
		float 	fVec7SE[2];
		float 	fTemp11SE; // step: 72
		float 	fTemp12SE; // step: 74
		int 	iTemp13SE; // step: 75
		float 	fTemp17SE; // step: 113
		float 	fTemp18SE; // step: 129
		int 	iTemp19SE; // step: 130
		float 	fTemp20SE; // step: 133
		float 	fTemp21SE; // step: 147
		float 	fSlow3BE = (fConst6KI * float(fslider3)); // Zone 2, step: 154
		float 	fVec16SE[2];
		float 	fTemp22SE; // step: 163
		int 	iTemp23SE; // step: 164
		float 	fTemp24SE; // step: 168
		float 	fTemp25SE; // step: 184
		int 	iTemp26SE; // step: 185
		float 	fTemp27SE; // step: 188
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec7SE[1] = fVec7SEState;
		fVec16SE[1] = fVec16SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fVec0SE[IOTA0&4095] = fTemp0SE;
			fVec1SE[0] = (fSlow0BE + (fConst2KI * fVec1SE[1]) /* Sum */);
			fTemp1SE = fVec1SE[0]; // step: 32
			fTemp2SE = (fConst1KI * fTemp1SE); // step: 33
			iTemp3SE = int(fTemp2SE); // step: 34
			iTemp4SE = (iTemp3SE & 4095); // step: 35
			fTemp5SE = float(iTemp3SE); // step: 37
			fTemp6SE = (fTemp5SE + 1.0f + -fTemp2SE /* Sum */); // step: 39
			fTemp7SE = (fTemp2SE + -fTemp5SE /* Sum */); // step: 42
			iTemp8SE = ((iTemp3SE + 1 /* Sum */) & 4095); // step: 44
			fVec5SE[0] = (fSlow1BE + (fConst2KI * fVec5SE[1]) /* Sum */);
			fTemp9SE = fVec5SE[0]; // step: 57
			fTemp10SE = fVec7SE[1]; // step: 66
			fVec7SE[0] = (fSlow2BE + fTemp10SE + -floorf((fSlow2BE + fTemp10SE /* Sum */)) /* Sum */);
			fTemp11SE = fVec7SE[0]; // step: 72
			fTemp12SE = (512.0f * fmodf(fTemp11SE,1.0f)); // step: 74
			iTemp13SE = int(fTemp12SE); // step: 75
			fTemp17SE = ftbl0SI[std::max(0, std::min(iTemp13SE, 512))]; // step: 113
			fTemp18SE = (fConst1KI * (fTemp1SE * ((fTemp9SE * (fTemp17SE + ((fTemp12SE + -floorf(fTemp12SE) /* Sum */) * (ftbl0SI[std::max(0, std::min((iTemp13SE + 1 /* Sum */), 512))] + -fTemp17SE /* Sum */)) /* Sum */)) + 1.0f /* Sum */))); // step: 129
			iTemp19SE = int(fTemp18SE); // step: 130
			fTemp20SE = float(iTemp19SE); // step: 133
			fTemp21SE = (float)input1[i]; // step: 147
			fVec13SE[IOTA0&4095] = fTemp21SE;
			fVec16SE[0] = (fSlow3BE + (fConst2KI * fVec16SE[1]) /* Sum */);
			fTemp22SE = (512.0f * fmodf((fTemp11SE + fVec16SE[0] /* Sum */),1.0f)); // step: 163
			iTemp23SE = int(fTemp22SE); // step: 164
			fTemp24SE = ftbl0SI[std::max(0, std::min(iTemp23SE, 512))]; // step: 168
			fTemp25SE = (fConst1KI * (fTemp1SE * ((fTemp9SE * (fTemp24SE + ((fTemp22SE + -floorf(fTemp22SE) /* Sum */) * (ftbl0SI[std::max(0, std::min((iTemp23SE + 1 /* Sum */), 512))] + -fTemp24SE /* Sum */)) /* Sum */)) + 1.0f /* Sum */))); // step: 184
			iTemp26SE = int(fTemp25SE); // step: 185
			fTemp27SE = float(iTemp26SE); // step: 188
			output0[i] = (FAUSTFLOAT)(((fVec0SE[(IOTA0-iTemp4SE)&4095] * fTemp6SE) + (fTemp7SE * fVec0SE[(IOTA0-iTemp8SE)&4095]) + -(fVec0SE[(IOTA0-(iTemp19SE & 4095))&4095] * (fTemp20SE + 1.0f + -fTemp18SE /* Sum */)) + -((fTemp18SE + -fTemp20SE /* Sum */) * fVec0SE[(IOTA0-((iTemp19SE + 1 /* Sum */) & 4095))&4095]) /* Sum */));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(((fTemp6SE * fVec13SE[(IOTA0-iTemp4SE)&4095]) + (fTemp7SE * fVec13SE[(IOTA0-iTemp8SE)&4095]) + -(fVec13SE[(IOTA0-(iTemp26SE & 4095))&4095] * (fTemp27SE + 1.0f + -fTemp25SE /* Sum */)) + -((fTemp25SE + -fTemp27SE /* Sum */) * fVec13SE[(IOTA0-((iTemp26SE + 1 /* Sum */) & 4095))&4095]) /* Sum */));  // Zone Exec Code
			// post processing
			fVec16SE[1] = fVec16SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			++IOTA0;
		}
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec7SEState = fVec7SE[1];
		fVec16SEState = fVec16SE[1];
	}
};


float 	mydsp::ftbl0SI[513];
