//----------------------------------------------------------
// name: "osc_enable"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec2SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec2SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec2SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec2SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec2SI[1] = iVec2SIState;
				for (int i=0; i<count; i++) {
					iVec2SI[0] = (iVec2SI[1] + 1);
					output[i] = sinf((9.58738e-05f * float((iVec2SI[0] + -1))));
					// post processing
					iVec2SI[1] = iVec2SI[0];
				}
				iVec2SIState = iVec2SI[1];
				output += 128;
			}
		}
	};


	static float 	fWave0SC[13];
	int 	idxfWave0SC;
	float 	fTempPerm0SC;
	float 	fConst0KI; // step: 23
	float 	fTempPerm1SI;
	// Recursion delay fVec0SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SIState; // Single Delay
	static float 	ftbl0SI[65536];
	float 	fTempPerm2SI;
	float 	fTempPerm3SI;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "osc_enable.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "osc_enable");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 5; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65536,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		idxfWave0SC = 0;
		fTempPerm0SC = 0;
		fConst0KI = (4e+02f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 23
		fTempPerm1SI = 0;
		fTempPerm2SI = 0;
		fTempPerm3SI = 0;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("osc_enable");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SC; // step: 7
		int 	iTemp1SC; // step: 9
		float 	fTemp2SC = fTempPerm0SC;
		float 	fTemp3SI = fTempPerm1SI;
		float 	fVec0SI[2];
		float 	fTemp4SI = fTempPerm2SI;
		float 	fTemp5SI = fTempPerm3SI;
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		fVec0SI[1] = fVec0SIState;
		for (int i=0; i<count; i++) {
			fTemp0SC = fWave0SC[idxfWave0SC]; // step: 7
			iTemp1SC = (fTemp0SC != 0.0f); // step: 9
			if (iTemp1SC) {
				fTemp2SC = powf(fTemp0SC,2.0f);
				fTemp3SI = fVec0SI[1];
				fVec0SI[0] = (fConst0KI + fTemp3SI + -floorf((fConst0KI + fTemp3SI /* Sum */)) /* Sum */);
				fTemp4SI = ftbl0SI[std::max(0, std::min(int((65536.0f * fVec0SI[0])), 65535))];
				fTemp5SI = (fTemp0SC * fTemp4SI);
			}
			output0[i] = (FAUSTFLOAT)(fTemp0SC);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fTemp4SI);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(fTemp5SI);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(fTemp0SC);  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(fTemp2SC);  // Zone Exec Code
			// post processing
			fVec0SI[1] = fVec0SI[0];
			idxfWave0SC = (idxfWave0SC + 1) % 13;
		}
		fVec0SIState = fVec0SI[1];
		fTempPerm0SC = fTemp2SC;
		fTempPerm1SI = fTemp3SI;
		fTempPerm2SI = fTemp4SI;
		fTempPerm3SI = fTemp5SI;
	}
};


float 	mydsp::fWave0SC[13] = {1,0.5f,0,0,0,0,-0.5f,-1,-0.5f,0,0,0,0};
float 	mydsp::ftbl0SI[65536];
