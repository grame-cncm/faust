//----------------------------------------------------------
// name: "prefix"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	float 	fVec0KCState; // Single Delay
	float 	pfPerm0;
	float 	fVec1SEState; // Single Delay
	float 	pfPerm1;
	float 	fVec2SEState; // Single Delay
	float 	pfPerm2;
	float 	fVec3SEState; // Single Delay
	float 	pfPerm3;
	float 	fVec4KCState; // Single Delay
	float 	pfPerm4;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "prefix.dsp");
		m->declare("name", "prefix");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 5; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		pfPerm0 = 0.5f;
		pfPerm1 = 0.31f;
		pfPerm2 = 0.32f;
		pfPerm3 = 0.7f;
		pfPerm4 = 0.35f;
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		fVec0KCState = 0;
		fVec1SEState = 0;
		fVec2SEState = 0;
		fVec3SEState = 0;
		fVec4KCState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("prefix");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fVec0KC[2];
		float 	fVec1SE[2];
		float 	fVec2SE[2];
		float 	fVec3SE[2];
		float 	fVec4KC[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		fVec0KC[1] = fVec0KCState;
		fVec1SE[1] = fVec1SEState;
		fVec2SE[1] = fVec2SEState;
		fVec3SE[1] = fVec3SEState;
		fVec4KC[1] = fVec4KCState;
		for (int i=0; i<count; i++) {
			fVec0KC[0] = 0.8f;
			float 	pfTemp0 = pfPerm0;
			pfPerm0 = 0.8f;
			fVec1SE[0] = (float)input0[i];
			float 	pfTemp1 = pfPerm1;
			pfPerm1 = fVec1SE[0];
			fVec2SE[0] = (float)input1[i];
			float 	pfTemp2 = pfPerm2;
			pfPerm2 = fVec2SE[0];
			fVec3SE[0] = pfTemp2;
			float 	pfTemp3 = pfPerm3;
			pfPerm3 = fVec3SE[0];
			fVec4KC[0] = 0.9f;
			float 	pfTemp4 = pfPerm4;
			pfPerm4 = 0.9f;
			output0[i] = (FAUSTFLOAT)(pfTemp0);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(pfTemp1);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(pfTemp3);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(pfTemp4);  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)(pfTemp4);  // Zone Exec Code
			// post processing
			fVec4KC[1] = fVec4KC[0];
			fVec3SE[1] = fVec3SE[0];
			fVec2SE[1] = fVec2SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec0KC[1] = fVec0KC[0];
		}
		fVec0KCState = fVec0KC[1];
		fVec1SEState = fVec1SE[1];
		fVec2SEState = fVec2SE[1];
		fVec3SEState = fVec3SE[1];
		fVec4KCState = fVec4KC[1];
	}
};


