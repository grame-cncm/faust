/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "tester"
version: "1.0"
Code generated with Faust 2.75.3 (https://faust.grame.fr)
Compilation options: -lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0
------------------------------------------------------------ */

#ifndef  __mydsp_H__
#define  __mydsp_H__

#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <cstdint>
#include <math.h>

#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

#if defined(_WIN32)
#define RESTRICT __restrict
#else
#define RESTRICT __restrict__
#endif

class mydspSIG0 {
	
  private:
	
	int iRec1[2];
	
  public:
	
	int getNumInputsmydspSIG0() {
		return 0;
	}
	int getNumOutputsmydspSIG0() {
		return 1;
	}
	
	void instanceInitmydspSIG0(int sample_rate) {
		for (int l1 = 0; l1 < 2; l1 = l1 + 1) {
			iRec1[l1] = 0;
		}
	}
	
	void fillmydspSIG0(int count, float* table) {
		for (int i1 = 0; i1 < count; i1 = i1 + 1) {
			iRec1[0] = iRec1[1] + 1;
			table[i1] = std::sin(9.58738e-05f * float(iRec1[0] + -1));
			iRec1[1] = iRec1[0];
		}
	}

};

static mydspSIG0* newmydspSIG0() { return (mydspSIG0*)new mydspSIG0(); }
static void deletemydspSIG0(mydspSIG0* dsp) { delete dsp; }

static float ftbl0mydspSIG0[65537];

class mydsp : public dsp {
	
 private:
	
	FAUSTFLOAT fHslider0;
	FAUSTFLOAT fHslider1;
	float fRec0[2];
	int fSampleRate;
	float fConst0;
	FAUSTFLOAT fHslider2;
	float fRec2[2];
	FAUSTFLOAT fCheckbox0;
	int iRec3[2];
	float fVec0[3];
	FAUSTFLOAT fCheckbox1;
	float fRec4[3];
	
 public:
	mydsp() {
	}
	
	void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang cpp -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "tester.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "tester");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 8;
	}
	
	static void classInit(int sample_rate) {
		mydspSIG0* sig0 = newmydspSIG0();
		sig0->instanceInitmydspSIG0(sample_rate);
		sig0->fillmydspSIG0(65537, ftbl0mydspSIG0);
		deletemydspSIG0(sig0);
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = 1.0f / std::min<float>(1.92e+05f, std::max<float>(1.0f, float(fSampleRate)));
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.0f);
		fHslider1 = FAUSTFLOAT(-24.9984f);
		fHslider2 = FAUSTFLOAT(1e+03f);
		fCheckbox0 = FAUSTFLOAT(0.0f);
		fCheckbox1 = FAUSTFLOAT(0.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; l0 < 2; l0 = l0 + 1) {
			fRec0[l0] = 0.0f;
		}
		for (int l2 = 0; l2 < 2; l2 = l2 + 1) {
			fRec2[l2] = 0.0f;
		}
		for (int l3 = 0; l3 < 2; l3 = l3 + 1) {
			iRec3[l3] = 0;
		}
		for (int l4 = 0; l4 < 3; l4 = l4 + 1) {
			fVec0[l4] = 0.0f;
		}
		for (int l5 = 0; l5 < 3; l5 = l5 + 1) {
			fRec4[l5] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual mydsp* clone() {
		return new mydsp();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Audio Tester");
		ui_interface->declare(&fHslider2, "1", "");
		ui_interface->declare(&fHslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("freq", &fHslider2, FAUSTFLOAT(1e+03f), FAUSTFLOAT(1e+01f), FAUSTFLOAT(2e+04f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider1, "2", "");
		ui_interface->declare(&fHslider1, "unit", "dB");
		ui_interface->addHorizontalSlider("volume", &fHslider1, FAUSTFLOAT(-24.9984f), FAUSTFLOAT(-96.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(1.0f));
		ui_interface->declare(&fHslider0, "3", "");
		ui_interface->addHorizontalSlider("destination", &fHslider0, FAUSTFLOAT(0.0f), FAUSTFLOAT(0.0f), FAUSTFLOAT(8.0f), FAUSTFLOAT(1.0f));
		ui_interface->addCheckButton("pink noise", &fCheckbox1);
		ui_interface->addCheckButton("white noise", &fCheckbox0);
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** RESTRICT inputs, FAUSTFLOAT** RESTRICT outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		FAUSTFLOAT* output1 = outputs[1];
		FAUSTFLOAT* output2 = outputs[2];
		FAUSTFLOAT* output3 = outputs[3];
		FAUSTFLOAT* output4 = outputs[4];
		FAUSTFLOAT* output5 = outputs[5];
		FAUSTFLOAT* output6 = outputs[6];
		FAUSTFLOAT* output7 = outputs[7];
		float fSlow0 = float(fHslider0);
		float fSlow1 = float(fSlow0 == 0.0f);
		float fSlow2 = 0.001f * std::pow(1e+01f, 0.05f * float(fHslider1));
		float fSlow3 = fConst0 * float(fHslider2);
		float fSlow4 = 4.656613e-10f * float(fCheckbox0);
		float fSlow5 = 1e+01f * float(fCheckbox1);
		float fSlow6 = float(fSlow0 == 1.0f);
		float fSlow7 = float(fSlow0 == 2.0f);
		float fSlow8 = float(fSlow0 == 3.0f);
		float fSlow9 = float(fSlow0 == 4.0f);
		float fSlow10 = float(fSlow0 == 5.0f);
		float fSlow11 = float(fSlow0 == 6.0f);
		float fSlow12 = float(fSlow0 == 7.0f);
		for (int i0 = 0; i0 < count; i0 = i0 + 1) {
			fRec0[0] = fSlow2 + 0.999f * fRec0[1];
			fRec2[0] = fSlow3 + (fRec2[1] - std::floor(fSlow3 + fRec2[1]));
			float fTemp0 = 65536.0f * fRec2[0];
			int iTemp1 = int(fTemp0);
			float fTemp2 = ftbl0mydspSIG0[std::max<int>(0, std::min<int>(iTemp1, 65536))];
			iRec3[0] = 1103515245 * iRec3[1] + 12345;
			float fTemp3 = float(iRec3[0]);
			fVec0[0] = fTemp3;
			fRec4[0] = 6.906783e-12f * fVec0[2] + 1.8011608f * fRec4[1] + 2.308528e-11f * fTemp3 - (0.8025774f * fRec4[2] + 2.936265e-11f * fVec0[1]);
			float fTemp4 = fRec0[0] * (fTemp2 + (fTemp0 - std::floor(fTemp0)) * (ftbl0mydspSIG0[std::max<int>(0, std::min<int>(iTemp1 + 1, 65536))] - fTemp2) + fSlow4 * fTemp3 + fSlow5 * fRec4[0]);
			output0[i0] = FAUSTFLOAT(fSlow1 * fTemp4);
			output1[i0] = FAUSTFLOAT(fSlow6 * fTemp4);
			output2[i0] = FAUSTFLOAT(fSlow7 * fTemp4);
			output3[i0] = FAUSTFLOAT(fSlow8 * fTemp4);
			output4[i0] = FAUSTFLOAT(fSlow9 * fTemp4);
			output5[i0] = FAUSTFLOAT(fSlow10 * fTemp4);
			output6[i0] = FAUSTFLOAT(fSlow11 * fTemp4);
			output7[i0] = FAUSTFLOAT(fSlow12 * fTemp4);
			fRec0[1] = fRec0[0];
			fRec2[1] = fRec2[0];
			iRec3[1] = iRec3[0];
			fVec0[2] = fVec0[1];
			fVec0[1] = fVec0[0];
			fRec4[2] = fRec4[1];
			fRec4[1] = fRec4[0];
		}
	}

};

#endif
