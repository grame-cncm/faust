//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "tester"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		// Recursion delay iVec12SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec12SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec12SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec12SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec12SI[1] = iVec12SIState;
				for (int i=0; i<count; i++) {
					iVec12SI[0] = (iVec12SI[1] + 1);
					output[i] = sinf((9.58738e-05f * float((iVec12SI[0] + -1))));
					// post processing
					iVec12SI[1] = iVec12SI[0];
				}
				iVec12SIState = iVec12SI[1];
				output += 128;
			}
		}
	};


	// Recursion delay iVec0SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec0SIState; // Single Delay
	float 	fVec2SIState[2]; // Copy Delay
	// Recursion delay fVec4SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec4SIState; // Single Delay
	float 	fVec5SIState[2]; // Copy Delay
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	float 	fConst0KI; // step: 64
	// Recursion delay fVec10SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec10SEState; // Single Delay
	static float 	ftbl0SI[65537];
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "tester.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "tester");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 8; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65537,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (1.0f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 64
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fslider1 = -24.9984f;
		fslider2 = 1e+03f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
	}
	virtual void instanceClear() {
		iVec0SIState = 0;
		for (int j = 0; j < 2; j++) { fVec2SIState[j] = 0; }
		fVec4SIState = 0;
		for (int j = 0; j < 2; j++) { fVec5SIState[j] = 0; }
		fVec8SEState = 0;
		fVec10SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Audio Tester");
		ui_interface->declare(&fslider2, "1", "");
		ui_interface->declare(&fslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("freq", &fslider2, 1e+03f, 1e+01f, 2e+04f, 1.0f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "unit", "dB");
		ui_interface->addHorizontalSlider("volume", &fslider1, -24.9984f, -96.0f, 0.0f, 1.0f);
		ui_interface->declare(&fslider0, "3", "");
		ui_interface->addHorizontalSlider("destination", &fslider0, 0.0f, 0.0f, 8.0f, 1.0f);
		ui_interface->addCheckButton("pink noise", &fcheckbox1);
		ui_interface->addCheckButton("white noise", &fcheckbox0);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0SI[2];
		float 	fTemp0SI; // step: 11
		float 	fVec2SI[3];
		float 	fVec4SI[2];
		float 	fVec5SI[3];
		float 	fSlow0BE = float(fslider0); // Zone 2, step: 35
		float 	fSlow1BE = float((fSlow0BE == 0.0f)); // Zone 2, step: 37
		float 	fSlow2BE = (0.001f * powf(1e+01f,(0.05f * float(fslider1)))); // Zone 2, step: 46
		float 	fVec8SE[2];
		float 	fSlow3BE = (fConst0KI * float(fslider2)); // Zone 2, step: 65
		float 	fTemp1SE; // step: 67
		float 	fVec10SE[2];
		float 	fTemp2SE; // step: 75
		int 	iTemp3SE; // step: 76
		float 	fTemp4SE; // step: 92
		float 	fSlow4BE = (4.656613e-10f * float(fcheckbox0)); // Zone 2, step: 106
		float 	fSlow5BE = (1e+01f * float(fcheckbox1)); // Zone 2, step: 109
		float 	fTemp5SE; // step: 113
		float 	fSlow6BE = float((fSlow0BE == 1.0f)); // Zone 2, step: 116
		float 	fSlow7BE = float((fSlow0BE == 2.0f)); // Zone 2, step: 120
		float 	fSlow8BE = float((fSlow0BE == 3.0f)); // Zone 2, step: 124
		float 	fSlow9BE = float((fSlow0BE == 4.0f)); // Zone 2, step: 128
		float 	fSlow10BE = float((fSlow0BE == 5.0f)); // Zone 2, step: 132
		float 	fSlow11BE = float((fSlow0BE == 6.0f)); // Zone 2, step: 136
		float 	fSlow12BE = float((fSlow0BE == 7.0f)); // Zone 2, step: 140
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		FAUSTFLOAT* output4 = output[4]; // Zone 3
		FAUSTFLOAT* output5 = output[5]; // Zone 3
		FAUSTFLOAT* output6 = output[6]; // Zone 3
		FAUSTFLOAT* output7 = output[7]; // Zone 3
		iVec0SI[1] = iVec0SIState;
		fVec2SI[1] = fVec2SIState[0];
		fVec2SI[2] = fVec2SIState[1];
		fVec4SI[1] = fVec4SIState;
		fVec5SI[1] = fVec5SIState[0];
		fVec5SI[2] = fVec5SIState[1];
		fVec8SE[1] = fVec8SEState;
		fVec10SE[1] = fVec10SEState;
		for (int i=0; i<count; i++) {
			iVec0SI[0] = ((1103515245 * iVec0SI[1]) + 12345 /* Sum */);
			fTemp0SI = float(iVec0SI[0]); // step: 11
			fVec2SI[0] = fTemp0SI;
			fVec4SI[0] = ((6.906783e-12f * fVec2SI[2]) + (1.8011608f * fVec4SI[1]) + (2.308528e-11f * fTemp0SI) + (-0.8025774f * fVec5SI[2]) + (-2.936265e-11f * fVec2SI[1]) /* Sum */);
			fVec5SI[0] = fVec4SI[0];
			fVec8SE[0] = (fSlow2BE + (0.999f * fVec8SE[1]) /* Sum */);
			fTemp1SE = fVec10SE[1]; // step: 67
			fVec10SE[0] = (fSlow3BE + fTemp1SE + -floorf((fSlow3BE + fTemp1SE /* Sum */)) /* Sum */);
			fTemp2SE = (65536.0f * fVec10SE[0]); // step: 75
			iTemp3SE = int(fTemp2SE); // step: 76
			fTemp4SE = ftbl0SI[std::max(0, std::min(iTemp3SE, 65536))]; // step: 92
			fTemp5SE = (fVec8SE[0] * (fTemp4SE + ((fTemp2SE + -floorf(fTemp2SE) /* Sum */) * (ftbl0SI[std::max(0, std::min((iTemp3SE + 1 /* Sum */), 65536))] + -fTemp4SE /* Sum */)) + (fSlow4BE * fTemp0SI) + (fSlow5BE * fVec4SI[0]) /* Sum */)); // step: 113
			output0[i] = (FAUSTFLOAT)((fSlow1BE * fTemp5SE));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fSlow6BE * fTemp5SE));  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)((fSlow7BE * fTemp5SE));  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)((fSlow8BE * fTemp5SE));  // Zone Exec Code
			output4[i] = (FAUSTFLOAT)((fSlow9BE * fTemp5SE));  // Zone Exec Code
			output5[i] = (FAUSTFLOAT)((fSlow10BE * fTemp5SE));  // Zone Exec Code
			output6[i] = (FAUSTFLOAT)((fSlow11BE * fTemp5SE));  // Zone Exec Code
			output7[i] = (FAUSTFLOAT)((fSlow12BE * fTemp5SE));  // Zone Exec Code
			// post processing
			fVec10SE[1] = fVec10SE[0];
			fVec8SE[1] = fVec8SE[0];
			fVec5SI[2] = fVec5SI[1];
			fVec5SI[1] = fVec5SI[0];
			fVec4SI[1] = fVec4SI[0];
			fVec2SI[2] = fVec2SI[1];
			fVec2SI[1] = fVec2SI[0];
			iVec0SI[1] = iVec0SI[0];
		}
		iVec0SIState = iVec0SI[1];
		fVec2SIState[0] = fVec2SI[1];
		fVec2SIState[1] = fVec2SI[2];
		fVec4SIState = fVec4SI[1];
		fVec5SIState[0] = fVec5SI[1];
		fVec5SIState[1] = fVec5SI[2];
		fVec8SEState = fVec8SE[1];
		fVec10SEState = fVec10SE[1];
	}
};


float 	mydsp::ftbl0SI[65537];
