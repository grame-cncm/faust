//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "lowboost"
// version: "1.0"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0KI; // step: 16
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec0SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider1;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "lowboost.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "lowboost");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (3.1415927f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 16
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1e+03f;
		fslider1 = 0.0f;
	}
	virtual void instanceClear() {
		fVec1SEState = 0;
		for (int j = 0; j < 2; j++) { fVec0SEState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("low-freq shelving boost");
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "unit", "Hz");
		ui_interface->addHorizontalSlider("freq", &fslider0, 1e+03f, 2e+01f, 2e+04f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "unit", "dB");
		ui_interface->addHorizontalSlider("gain", &fslider1, 0.0f, -2e+01f, 2e+01f, 0.1f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = tanf((fConst0KI * float(fslider0))); // Zone 2, step: 18
		float 	fSlow1BE = (1.0f / ((fSlow0BE * (fSlow0BE + 1.4142135f /* Sum */)) + 1.0f /* Sum */)); // Zone 2, step: 23
		float 	fSlow2BE = ((fSlow0BE * (fSlow0BE + -1.4142135f /* Sum */)) + 1.0f /* Sum */); // Zone 2, step: 27
		float 	fTemp0SE; // step: 29
		float 	fSlow3BE = powf(fSlow0BE,2.0f); // Zone 2, step: 33
		float 	fSlow4BE = (2.0f * (fSlow3BE + -1.0f /* Sum */)); // Zone 2, step: 35
		float 	fVec1SE[2];
		float 	fTemp1SE; // step: 45
		float 	fVec0SE[3];
		float 	fSlow5BE = powf(1e+01f,(0.05f * float(fslider1))); // Zone 2, step: 52
		float 	fSlow6BE = sqrtf((2.0f * fSlow5BE)); // Zone 2, step: 54
		float 	fSlow7BE = (fSlow5BE * fSlow0BE); // Zone 2, step: 55
		float 	fSlow8BE = ((fSlow0BE * (fSlow6BE + fSlow7BE /* Sum */)) + 1.0f /* Sum */); // Zone 2, step: 58
		float 	fSlow9BE = (2.0f * ((fSlow5BE * fSlow3BE) + -1.0f /* Sum */)); // Zone 2, step: 64
		float 	fSlow10BE = (1.0f + -(fSlow0BE * (fSlow6BE + -fSlow7BE /* Sum */)) /* Sum */); // Zone 2, step: 71
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec1SE[1] = fVec1SEState;
		fVec0SE[1] = fVec0SEState[0];
		fVec0SE[2] = fVec0SEState[1];
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec0SE[2]; // step: 29
			fVec1SE[0] = ((float)input0[i] + -(fSlow1BE * ((fSlow2BE * fTemp0SE) + (fSlow4BE * fVec1SE[1]) /* Sum */)) /* Sum */);
			fTemp1SE = fVec1SE[0]; // step: 45
			fVec0SE[0] = fTemp1SE;
			output0[i] = (FAUSTFLOAT)((fSlow1BE * ((fSlow8BE * fVec1SE[0]) + (fSlow9BE * fVec0SE[1]) + (fSlow10BE * fTemp0SE) /* Sum */)));  // Zone Exec Code
			// post processing
			fVec0SE[2] = fVec0SE[1];
			fVec0SE[1] = fVec0SE[0];
			fVec1SE[1] = fVec1SE[0];
		}
		fVec1SEState = fVec1SE[1];
		fVec0SEState[0] = fVec0SE[1];
		fVec0SEState[1] = fVec0SE[2];
	}
};


