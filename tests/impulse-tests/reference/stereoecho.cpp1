//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2007"
// license: "BSD"
// name: "stereoecho"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fConst0KI; // step: 23
	int 	IOTA0;
	// Recursion delay fRec0SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SE[131072]; // Ring Delay
	// Recursion delay fRec1SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	float 	fVec3SE[131072]; // Ring Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2007");
		m->declare("filename", "stereoecho.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "stereoecho");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (0.001f * std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 23
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 90.9f;
		fslider1 = 16.3f;
	}
	virtual void instanceClear() {
		for (int i = 1; i < 131072; i++) { fVec0SE[i] = 0; }
		fVec0SE[0] = -1;  // detect unintialized
		for (int i = 1; i < 131072; i++) { fVec3SE[i] = 0; }
		fVec3SE[0] = -1;  // detect unintialized
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("stereo echo");
		ui_interface->openVerticalBox("echo 1000");
		ui_interface->addHorizontalSlider("feedback", &fslider0, 90.9f, 0.0f, 1e+02f, 0.1f);
		ui_interface->addHorizontalSlider("millisecond", &fslider1, 16.3f, 0.0f, 1e+03f, 0.1f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (0.01f * float(fslider0)); // Zone 2, step: 9
		int 	iSlow1BE = (((int((fConst0KI * float(fslider1))) + -1 /* Sum */) & 65535) + 1 /* Sum */); // Zone 2, step: 28
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		for (int i=0; i<count; i++) {
			float 	fRec0SE = ((float)input0[i] + (fSlow0BE * fVec0SE[(IOTA0-iSlow1BE)&131071]) /* Sum */); // Zero delay
			fVec0SE[IOTA0&131071] = fRec0SE;
			float 	fRec1SE = ((float)input1[i] + (fSlow0BE * fVec3SE[(IOTA0-iSlow1BE)&131071]) /* Sum */); // Zero delay
			fVec3SE[IOTA0&131071] = fRec1SE;
			output0[i] = (FAUSTFLOAT)(fRec0SE);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(fRec1SE);  // Zone Exec Code
			// post processing
			++IOTA0;
		}
	}
};


