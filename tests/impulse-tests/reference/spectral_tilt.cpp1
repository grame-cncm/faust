//----------------------------------------------------------
// name: "spectral_tilt"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState[3]; // Copy Delay
	float 	fConst0KI; // step: 13
	float 	fConst1KI; // step: 14
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	// Recursion delay fVec2SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec2SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	float 	fVec5SEState; // Single Delay
	float 	fVec6SEState; // Single Delay
	float 	fVec7SEState; // Single Delay
	float 	fVec9SEState; // Single Delay
	float 	fVec10SEState; // Single Delay
	float 	fVec12SEState; // Single Delay
	float 	fVec14SEState; // Single Delay
	FAUSTFLOAT 	fslider2;
	// Recursion delay fVec15SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec15SEState; // Single Delay
	float 	fVec17SEState; // Single Delay
	float 	fVec18SEState; // Single Delay
	float 	fVec19SEState; // Single Delay
	float 	fVec21SEState; // Single Delay
	float 	fVec22SEState; // Single Delay
	float 	fVec24SEState; // Single Delay
	float 	fVec26SEState; // Single Delay
	FAUSTFLOAT 	fslider3;
	// Recursion delay fVec27SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec27SEState; // Single Delay
	float 	fVec29SEState; // Single Delay
	float 	fVec30SEState; // Single Delay
	float 	fVec31SEState; // Single Delay
	float 	fVec33SEState; // Single Delay
	float 	fVec34SEState; // Single Delay
	float 	fVec36SEState; // Single Delay
	float 	fVec38SEState; // Single Delay
	// Recursion delay iVec39SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec39SIState; // Single Delay
	// Recursion delay fVec42SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec42SIState; // Single Delay
	float 	fVec41SIState[3]; // Copy Delay
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider4;
	// Recursion delay fVec45SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec45SEState; // Single Delay
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fentry0;
	float 	fConst2KI; // step: 232
	float 	fConst3KI; // step: 245
	float 	fConst4KI; // step: 260
	FAUSTFLOAT 	fcheckbox3;
	float 	fVec64SEState; // Single Delay
	FAUSTFLOAT 	fslider5;
	float 	fConst5KI; // step: 351
	float 	fConst6KI; // step: 360
	FAUSTFLOAT 	fslider6;
	FAUSTFLOAT 	fslider7;
	// Recursion delay fVec65SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec65SEState; // Single Delay
	float 	fVec68SEState; // Single Delay
	// Recursion delay fVec69SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec69SEState; // Single Delay
	float 	fVec72SEState; // Single Delay
	// Recursion delay fVec73SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec73SEState; // Single Delay
	float 	fVec76SEState; // Single Delay
	// Recursion delay fVec77SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec77SEState; // Single Delay
	float 	fVec80SEState; // Single Delay
	// Recursion delay fVec81SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec81SEState; // Single Delay
	float 	fVec84SEState; // Single Delay
	// Recursion delay fVec85SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec85SEState; // Single Delay
	float 	fVec88SEState; // Single Delay
	// Recursion delay fVec89SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec89SEState; // Single Delay
	float 	fVec92SEState; // Single Delay
	// Recursion delay fVec93SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec93SEState; // Single Delay
	float 	fVec96SEState; // Single Delay
	// Recursion delay fVec97SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec97SEState; // Single Delay
	float 	fVec100SEState; // Single Delay
	// Recursion delay fVec101SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec101SEState; // Single Delay
	float 	fConst7KI; // step: 743
	float 	fConst8KI; // step: 745
	float 	fConst9KI; // step: 749
	float 	fConst10KI; // step: 753
	float 	fConst11KI; // step: 756
	float 	fConst12KI; // step: 757
	float 	fConst13KI; // step: 760
	// Recursion delay fVec105SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec105SEState; // Single Delay
	float 	fVec104SEState[2]; // Copy Delay
	float 	fConst14KI; // step: 772
	float 	fConst15KI; // step: 773
	float 	fConst16KI; // step: 778
	float 	fConst17KI; // step: 789
	float 	fConst18KI; // step: 793
	float 	fConst19KI; // step: 797
	// Recursion delay fVec110SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec110SEState; // Single Delay
	float 	fVec109SEState[2]; // Copy Delay
	float 	fConst20KI; // step: 808
	float 	fConst21KI; // step: 809
	float 	fConst22KI; // step: 814
	float 	fConst23KI; // step: 825
	float 	fConst24KI; // step: 829
	float 	fConst25KI; // step: 833
	// Recursion delay fVec115SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec115SEState; // Single Delay
	float 	fVec114SEState[2]; // Copy Delay
	float 	fConst26KI; // step: 848
	float 	fConst27KI; // step: 852
	float 	fConst28KI; // step: 856
	// Recursion delay fVec118SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec118SEState; // Single Delay
	float 	fVec117SEState[2]; // Copy Delay
	float 	fConst29KI; // step: 868
	float 	fConst30KI; // step: 869
	float 	fConst31KI; // step: 874
	float 	fConst32KI; // step: 885
	float 	fConst33KI; // step: 889
	float 	fConst34KI; // step: 893
	// Recursion delay fVec123SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec123SEState; // Single Delay
	float 	fVec122SEState[2]; // Copy Delay
	float 	fConst35KI; // step: 904
	float 	fConst36KI; // step: 908
	float 	fConst37KI; // step: 919
	float 	fConst38KI; // step: 923
	float 	fConst39KI; // step: 927
	// Recursion delay fVec128SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec128SEState; // Single Delay
	float 	fVec127SEState[2]; // Copy Delay
	float 	fConst40KI; // step: 938
	float 	fConst41KI; // step: 942
	float 	fConst42KI; // step: 950
	float 	fConst43KI; // step: 951
	float 	fConst44KI; // step: 955
	float 	fConst45KI; // step: 958
	float 	fConst46KI; // step: 961
	float 	fConst47KI; // step: 962
	float 	fConst48KI; // step: 965
	// Recursion delay fVec133SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec133SEState; // Single Delay
	float 	fVec132SEState[2]; // Copy Delay
	float 	fConst49KI; // step: 975
	float 	fConst50KI; // step: 976
	float 	fConst51KI; // step: 981
	float 	fConst52KI; // step: 990
	float 	fConst53KI; // step: 993
	float 	fConst54KI; // step: 997
	// Recursion delay fVec138SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec138SEState; // Single Delay
	float 	fVec137SEState[2]; // Copy Delay
	float 	fConst55KI; // step: 1007
	float 	fConst56KI; // step: 1008
	float 	fConst57KI; // step: 1013
	float 	fConst58KI; // step: 1022
	float 	fConst59KI; // step: 1025
	float 	fConst60KI; // step: 1029
	// Recursion delay fVec143SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec143SEState; // Single Delay
	float 	fVec142SEState[2]; // Copy Delay
	float 	fConst61KI; // step: 1042
	float 	fConst62KI; // step: 1045
	float 	fConst63KI; // step: 1049
	// Recursion delay fVec146SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec146SEState; // Single Delay
	float 	fVec145SEState[2]; // Copy Delay
	float 	fConst64KI; // step: 1059
	float 	fConst65KI; // step: 1060
	float 	fConst66KI; // step: 1065
	float 	fConst67KI; // step: 1074
	float 	fConst68KI; // step: 1077
	float 	fConst69KI; // step: 1081
	// Recursion delay fVec151SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec151SEState; // Single Delay
	float 	fVec150SEState[2]; // Copy Delay
	float 	fConst70KI; // step: 1091
	float 	fConst71KI; // step: 1095
	float 	fConst72KI; // step: 1104
	float 	fConst73KI; // step: 1107
	float 	fConst74KI; // step: 1111
	// Recursion delay fVec156SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec156SEState; // Single Delay
	float 	fVec155SEState[2]; // Copy Delay
	float 	fConst75KI; // step: 1121
	float 	fConst76KI; // step: 1125
	float 	fConst77KI; // step: 1133
	float 	fConst78KI; // step: 1134
	float 	fConst79KI; // step: 1138
	float 	fConst80KI; // step: 1141
	float 	fConst81KI; // step: 1144
	float 	fConst82KI; // step: 1145
	float 	fConst83KI; // step: 1148
	// Recursion delay fVec161SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec161SEState; // Single Delay
	float 	fVec160SEState[2]; // Copy Delay
	float 	fConst84KI; // step: 1158
	float 	fConst85KI; // step: 1159
	float 	fConst86KI; // step: 1164
	float 	fConst87KI; // step: 1173
	float 	fConst88KI; // step: 1176
	float 	fConst89KI; // step: 1180
	// Recursion delay fVec166SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec166SEState; // Single Delay
	float 	fVec165SEState[2]; // Copy Delay
	float 	fConst90KI; // step: 1190
	float 	fConst91KI; // step: 1191
	float 	fConst92KI; // step: 1196
	float 	fConst93KI; // step: 1205
	float 	fConst94KI; // step: 1208
	float 	fConst95KI; // step: 1212
	// Recursion delay fVec171SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec171SEState; // Single Delay
	float 	fVec170SEState[2]; // Copy Delay
	float 	fConst96KI; // step: 1225
	float 	fConst97KI; // step: 1228
	float 	fConst98KI; // step: 1232
	// Recursion delay fVec174SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec174SEState; // Single Delay
	float 	fVec173SEState[2]; // Copy Delay
	float 	fConst99KI; // step: 1242
	float 	fConst100KI; // step: 1243
	float 	fConst101KI; // step: 1248
	float 	fConst102KI; // step: 1257
	float 	fConst103KI; // step: 1260
	float 	fConst104KI; // step: 1264
	// Recursion delay fVec179SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec179SEState; // Single Delay
	float 	fVec178SEState[2]; // Copy Delay
	float 	fConst105KI; // step: 1274
	float 	fConst106KI; // step: 1278
	float 	fConst107KI; // step: 1287
	float 	fConst108KI; // step: 1290
	float 	fConst109KI; // step: 1294
	// Recursion delay fVec184SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec184SEState; // Single Delay
	float 	fVec183SEState[2]; // Copy Delay
	float 	fConst110KI; // step: 1304
	float 	fConst111KI; // step: 1308
	float 	fConst112KI; // step: 1316
	float 	fConst113KI; // step: 1317
	float 	fConst114KI; // step: 1321
	float 	fConst115KI; // step: 1324
	float 	fConst116KI; // step: 1327
	float 	fConst117KI; // step: 1328
	float 	fConst118KI; // step: 1331
	// Recursion delay fVec189SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec189SEState; // Single Delay
	float 	fVec188SEState[2]; // Copy Delay
	float 	fConst119KI; // step: 1341
	float 	fConst120KI; // step: 1342
	float 	fConst121KI; // step: 1347
	float 	fConst122KI; // step: 1356
	float 	fConst123KI; // step: 1359
	float 	fConst124KI; // step: 1363
	// Recursion delay fVec194SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec194SEState; // Single Delay
	float 	fVec193SEState[2]; // Copy Delay
	float 	fConst125KI; // step: 1373
	float 	fConst126KI; // step: 1374
	float 	fConst127KI; // step: 1379
	float 	fConst128KI; // step: 1388
	float 	fConst129KI; // step: 1391
	float 	fConst130KI; // step: 1395
	// Recursion delay fVec199SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec199SEState; // Single Delay
	float 	fVec198SEState[2]; // Copy Delay
	float 	fConst131KI; // step: 1408
	float 	fConst132KI; // step: 1411
	float 	fConst133KI; // step: 1415
	// Recursion delay fVec202SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec202SEState; // Single Delay
	float 	fVec201SEState[2]; // Copy Delay
	float 	fConst134KI; // step: 1425
	float 	fConst135KI; // step: 1426
	float 	fConst136KI; // step: 1431
	float 	fConst137KI; // step: 1440
	float 	fConst138KI; // step: 1443
	float 	fConst139KI; // step: 1447
	// Recursion delay fVec207SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec207SEState; // Single Delay
	float 	fVec206SEState[2]; // Copy Delay
	float 	fConst140KI; // step: 1457
	float 	fConst141KI; // step: 1461
	float 	fConst142KI; // step: 1470
	float 	fConst143KI; // step: 1473
	float 	fConst144KI; // step: 1477
	// Recursion delay fVec212SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec212SEState; // Single Delay
	float 	fVec211SEState[2]; // Copy Delay
	float 	fConst145KI; // step: 1487
	float 	fConst146KI; // step: 1491
	float 	fConst147KI; // step: 1499
	float 	fConst148KI; // step: 1500
	float 	fConst149KI; // step: 1504
	float 	fConst150KI; // step: 1507
	float 	fConst151KI; // step: 1510
	float 	fConst152KI; // step: 1511
	float 	fConst153KI; // step: 1514
	// Recursion delay fVec217SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec217SEState; // Single Delay
	float 	fVec216SEState[2]; // Copy Delay
	float 	fConst154KI; // step: 1524
	float 	fConst155KI; // step: 1525
	float 	fConst156KI; // step: 1530
	float 	fConst157KI; // step: 1539
	float 	fConst158KI; // step: 1542
	float 	fConst159KI; // step: 1546
	// Recursion delay fVec222SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec222SEState; // Single Delay
	float 	fVec221SEState[2]; // Copy Delay
	float 	fConst160KI; // step: 1556
	float 	fConst161KI; // step: 1557
	float 	fConst162KI; // step: 1562
	float 	fConst163KI; // step: 1571
	float 	fConst164KI; // step: 1574
	float 	fConst165KI; // step: 1578
	// Recursion delay fVec227SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec227SEState; // Single Delay
	float 	fVec226SEState[2]; // Copy Delay
	float 	fConst166KI; // step: 1591
	float 	fConst167KI; // step: 1594
	float 	fConst168KI; // step: 1598
	// Recursion delay fVec230SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec230SEState; // Single Delay
	float 	fVec229SEState[2]; // Copy Delay
	float 	fConst169KI; // step: 1608
	float 	fConst170KI; // step: 1609
	float 	fConst171KI; // step: 1614
	float 	fConst172KI; // step: 1623
	float 	fConst173KI; // step: 1626
	float 	fConst174KI; // step: 1630
	// Recursion delay fVec235SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec235SEState; // Single Delay
	float 	fVec234SEState[2]; // Copy Delay
	float 	fConst175KI; // step: 1640
	float 	fConst176KI; // step: 1644
	float 	fConst177KI; // step: 1653
	float 	fConst178KI; // step: 1656
	float 	fConst179KI; // step: 1660
	// Recursion delay fVec240SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec240SEState; // Single Delay
	float 	fVec239SEState[2]; // Copy Delay
	float 	fConst180KI; // step: 1670
	float 	fConst181KI; // step: 1674
	float 	fConst182KI; // step: 1682
	float 	fConst183KI; // step: 1683
	float 	fConst184KI; // step: 1687
	float 	fConst185KI; // step: 1690
	float 	fConst186KI; // step: 1693
	float 	fConst187KI; // step: 1694
	float 	fConst188KI; // step: 1697
	// Recursion delay fVec245SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec245SEState; // Single Delay
	float 	fVec244SEState[2]; // Copy Delay
	float 	fConst189KI; // step: 1707
	float 	fConst190KI; // step: 1708
	float 	fConst191KI; // step: 1713
	float 	fConst192KI; // step: 1722
	float 	fConst193KI; // step: 1725
	float 	fConst194KI; // step: 1729
	// Recursion delay fVec250SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec250SEState; // Single Delay
	float 	fVec249SEState[2]; // Copy Delay
	float 	fConst195KI; // step: 1739
	float 	fConst196KI; // step: 1740
	float 	fConst197KI; // step: 1745
	float 	fConst198KI; // step: 1754
	float 	fConst199KI; // step: 1757
	float 	fConst200KI; // step: 1761
	// Recursion delay fVec255SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec255SEState; // Single Delay
	float 	fVec254SEState[2]; // Copy Delay
	float 	fConst201KI; // step: 1774
	float 	fConst202KI; // step: 1777
	float 	fConst203KI; // step: 1781
	// Recursion delay fVec258SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec258SEState; // Single Delay
	float 	fVec257SEState[2]; // Copy Delay
	float 	fConst204KI; // step: 1791
	float 	fConst205KI; // step: 1792
	float 	fConst206KI; // step: 1797
	float 	fConst207KI; // step: 1806
	float 	fConst208KI; // step: 1809
	float 	fConst209KI; // step: 1813
	// Recursion delay fVec263SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec263SEState; // Single Delay
	float 	fVec262SEState[2]; // Copy Delay
	float 	fConst210KI; // step: 1823
	float 	fConst211KI; // step: 1827
	float 	fConst212KI; // step: 1836
	float 	fConst213KI; // step: 1839
	float 	fConst214KI; // step: 1843
	// Recursion delay fVec268SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec268SEState; // Single Delay
	float 	fVec267SEState[2]; // Copy Delay
	float 	fConst215KI; // step: 1853
	float 	fConst216KI; // step: 1857
	float 	fConst217KI; // step: 1865
	float 	fConst218KI; // step: 1866
	float 	fConst219KI; // step: 1870
	float 	fConst220KI; // step: 1873
	float 	fConst221KI; // step: 1876
	float 	fConst222KI; // step: 1877
	float 	fConst223KI; // step: 1880
	// Recursion delay fVec273SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec273SEState; // Single Delay
	float 	fVec272SEState[2]; // Copy Delay
	float 	fConst224KI; // step: 1890
	float 	fConst225KI; // step: 1891
	float 	fConst226KI; // step: 1896
	float 	fConst227KI; // step: 1905
	float 	fConst228KI; // step: 1908
	float 	fConst229KI; // step: 1912
	// Recursion delay fVec278SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec278SEState; // Single Delay
	float 	fVec277SEState[2]; // Copy Delay
	float 	fConst230KI; // step: 1922
	float 	fConst231KI; // step: 1923
	float 	fConst232KI; // step: 1928
	float 	fConst233KI; // step: 1937
	float 	fConst234KI; // step: 1940
	float 	fConst235KI; // step: 1944
	// Recursion delay fVec283SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec283SEState; // Single Delay
	float 	fVec282SEState[2]; // Copy Delay
	float 	fConst236KI; // step: 1957
	float 	fConst237KI; // step: 1960
	float 	fConst238KI; // step: 1964
	// Recursion delay fVec286SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec286SEState; // Single Delay
	float 	fVec285SEState[2]; // Copy Delay
	float 	fConst239KI; // step: 1974
	float 	fConst240KI; // step: 1975
	float 	fConst241KI; // step: 1980
	float 	fConst242KI; // step: 1989
	float 	fConst243KI; // step: 1992
	float 	fConst244KI; // step: 1996
	// Recursion delay fVec291SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec291SEState; // Single Delay
	float 	fVec290SEState[2]; // Copy Delay
	float 	fConst245KI; // step: 2006
	float 	fConst246KI; // step: 2010
	float 	fConst247KI; // step: 2019
	float 	fConst248KI; // step: 2022
	float 	fConst249KI; // step: 2026
	// Recursion delay fVec296SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec296SEState; // Single Delay
	float 	fVec295SEState[2]; // Copy Delay
	float 	fConst250KI; // step: 2036
	float 	fConst251KI; // step: 2040
	float 	fConst252KI; // step: 2048
	float 	fConst253KI; // step: 2049
	float 	fConst254KI; // step: 2053
	float 	fConst255KI; // step: 2056
	float 	fConst256KI; // step: 2059
	float 	fConst257KI; // step: 2060
	float 	fConst258KI; // step: 2063
	// Recursion delay fVec301SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec301SEState; // Single Delay
	float 	fVec300SEState[2]; // Copy Delay
	float 	fConst259KI; // step: 2073
	float 	fConst260KI; // step: 2074
	float 	fConst261KI; // step: 2079
	float 	fConst262KI; // step: 2088
	float 	fConst263KI; // step: 2091
	float 	fConst264KI; // step: 2095
	// Recursion delay fVec306SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec306SEState; // Single Delay
	float 	fVec305SEState[2]; // Copy Delay
	float 	fConst265KI; // step: 2105
	float 	fConst266KI; // step: 2106
	float 	fConst267KI; // step: 2111
	float 	fConst268KI; // step: 2120
	float 	fConst269KI; // step: 2123
	float 	fConst270KI; // step: 2127
	// Recursion delay fVec311SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec311SEState; // Single Delay
	float 	fVec310SEState[2]; // Copy Delay
	float 	fConst271KI; // step: 2140
	float 	fConst272KI; // step: 2143
	float 	fConst273KI; // step: 2147
	// Recursion delay fVec314SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec314SEState; // Single Delay
	float 	fVec313SEState[2]; // Copy Delay
	float 	fConst274KI; // step: 2157
	float 	fConst275KI; // step: 2158
	float 	fConst276KI; // step: 2163
	float 	fConst277KI; // step: 2172
	float 	fConst278KI; // step: 2175
	float 	fConst279KI; // step: 2179
	// Recursion delay fVec319SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec319SEState; // Single Delay
	float 	fVec318SEState[2]; // Copy Delay
	float 	fConst280KI; // step: 2189
	float 	fConst281KI; // step: 2193
	float 	fConst282KI; // step: 2202
	float 	fConst283KI; // step: 2205
	float 	fConst284KI; // step: 2209
	// Recursion delay fVec324SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec324SEState; // Single Delay
	float 	fVec323SEState[2]; // Copy Delay
	float 	fConst285KI; // step: 2219
	float 	fConst286KI; // step: 2223
	float 	fConst287KI; // step: 2231
	float 	fConst288KI; // step: 2232
	float 	fConst289KI; // step: 2236
	float 	fConst290KI; // step: 2239
	float 	fConst291KI; // step: 2242
	float 	fConst292KI; // step: 2243
	float 	fConst293KI; // step: 2246
	// Recursion delay fVec329SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec329SEState; // Single Delay
	float 	fVec328SEState[2]; // Copy Delay
	float 	fConst294KI; // step: 2256
	float 	fConst295KI; // step: 2257
	float 	fConst296KI; // step: 2262
	float 	fConst297KI; // step: 2271
	float 	fConst298KI; // step: 2274
	float 	fConst299KI; // step: 2278
	// Recursion delay fVec334SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec334SEState; // Single Delay
	float 	fVec333SEState[2]; // Copy Delay
	float 	fConst300KI; // step: 2288
	float 	fConst301KI; // step: 2289
	float 	fConst302KI; // step: 2294
	float 	fConst303KI; // step: 2303
	float 	fConst304KI; // step: 2306
	float 	fConst305KI; // step: 2310
	// Recursion delay fVec339SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec339SEState; // Single Delay
	float 	fVec338SEState[2]; // Copy Delay
	float 	fConst306KI; // step: 2323
	float 	fConst307KI; // step: 2326
	float 	fConst308KI; // step: 2330
	// Recursion delay fVec342SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec342SEState; // Single Delay
	float 	fVec341SEState[2]; // Copy Delay
	float 	fConst309KI; // step: 2340
	float 	fConst310KI; // step: 2341
	float 	fConst311KI; // step: 2346
	float 	fConst312KI; // step: 2355
	float 	fConst313KI; // step: 2358
	float 	fConst314KI; // step: 2362
	// Recursion delay fVec347SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec347SEState; // Single Delay
	float 	fVec346SEState[2]; // Copy Delay
	float 	fConst315KI; // step: 2372
	float 	fConst316KI; // step: 2376
	float 	fConst317KI; // step: 2385
	float 	fConst318KI; // step: 2388
	float 	fConst319KI; // step: 2392
	// Recursion delay fVec352SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec352SEState; // Single Delay
	float 	fVec351SEState[2]; // Copy Delay
	float 	fConst320KI; // step: 2402
	float 	fConst321KI; // step: 2406
	float 	fConst322KI; // step: 2414
	float 	fConst323KI; // step: 2415
	float 	fConst324KI; // step: 2419
	float 	fConst325KI; // step: 2422
	float 	fConst326KI; // step: 2425
	float 	fConst327KI; // step: 2426
	float 	fConst328KI; // step: 2429
	// Recursion delay fVec357SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec357SEState; // Single Delay
	float 	fVec356SEState[2]; // Copy Delay
	float 	fConst329KI; // step: 2439
	float 	fConst330KI; // step: 2440
	float 	fConst331KI; // step: 2445
	float 	fConst332KI; // step: 2454
	float 	fConst333KI; // step: 2457
	float 	fConst334KI; // step: 2461
	// Recursion delay fVec362SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec362SEState; // Single Delay
	float 	fVec361SEState[2]; // Copy Delay
	float 	fConst335KI; // step: 2471
	float 	fConst336KI; // step: 2472
	float 	fConst337KI; // step: 2477
	float 	fConst338KI; // step: 2486
	float 	fConst339KI; // step: 2489
	float 	fConst340KI; // step: 2493
	// Recursion delay fVec367SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec367SEState; // Single Delay
	float 	fVec366SEState[2]; // Copy Delay
	float 	fConst341KI; // step: 2506
	float 	fConst342KI; // step: 2509
	float 	fConst343KI; // step: 2513
	// Recursion delay fVec370SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec370SEState; // Single Delay
	float 	fVec369SEState[2]; // Copy Delay
	float 	fConst344KI; // step: 2523
	float 	fConst345KI; // step: 2524
	float 	fConst346KI; // step: 2529
	float 	fConst347KI; // step: 2538
	float 	fConst348KI; // step: 2541
	float 	fConst349KI; // step: 2545
	// Recursion delay fVec375SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec375SEState; // Single Delay
	float 	fVec374SEState[2]; // Copy Delay
	float 	fConst350KI; // step: 2555
	float 	fConst351KI; // step: 2559
	float 	fConst352KI; // step: 2568
	float 	fConst353KI; // step: 2571
	float 	fConst354KI; // step: 2575
	// Recursion delay fVec380SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec380SEState; // Single Delay
	float 	fVec379SEState[2]; // Copy Delay
	float 	fConst355KI; // step: 2585
	float 	fConst356KI; // step: 2589
	float 	fConst357KI; // step: 2597
	float 	fConst358KI; // step: 2598
	float 	fConst359KI; // step: 2602
	float 	fConst360KI; // step: 2605
	float 	fConst361KI; // step: 2608
	float 	fConst362KI; // step: 2609
	float 	fConst363KI; // step: 2612
	// Recursion delay fVec385SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec385SEState; // Single Delay
	float 	fVec384SEState[2]; // Copy Delay
	float 	fConst364KI; // step: 2622
	float 	fConst365KI; // step: 2623
	float 	fConst366KI; // step: 2628
	float 	fConst367KI; // step: 2637
	float 	fConst368KI; // step: 2640
	float 	fConst369KI; // step: 2644
	// Recursion delay fVec390SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec390SEState; // Single Delay
	float 	fVec389SEState[2]; // Copy Delay
	float 	fConst370KI; // step: 2654
	float 	fConst371KI; // step: 2655
	float 	fConst372KI; // step: 2660
	float 	fConst373KI; // step: 2669
	float 	fConst374KI; // step: 2672
	float 	fConst375KI; // step: 2676
	// Recursion delay fVec395SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec395SEState; // Single Delay
	float 	fVec394SEState[2]; // Copy Delay
	float 	fConst376KI; // step: 2689
	float 	fConst377KI; // step: 2692
	float 	fConst378KI; // step: 2696
	// Recursion delay fVec398SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec398SEState; // Single Delay
	float 	fVec397SEState[2]; // Copy Delay
	float 	fConst379KI; // step: 2706
	float 	fConst380KI; // step: 2707
	float 	fConst381KI; // step: 2712
	float 	fConst382KI; // step: 2721
	float 	fConst383KI; // step: 2724
	float 	fConst384KI; // step: 2728
	// Recursion delay fVec403SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec403SEState; // Single Delay
	float 	fVec402SEState[2]; // Copy Delay
	float 	fConst385KI; // step: 2738
	float 	fConst386KI; // step: 2742
	float 	fConst387KI; // step: 2751
	float 	fConst388KI; // step: 2754
	float 	fConst389KI; // step: 2758
	// Recursion delay fVec408SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec408SEState; // Single Delay
	float 	fVec407SEState[2]; // Copy Delay
	float 	fConst390KI; // step: 2768
	float 	fConst391KI; // step: 2772
	float 	fConst392KI; // step: 2780
	float 	fConst393KI; // step: 2781
	float 	fConst394KI; // step: 2785
	float 	fConst395KI; // step: 2788
	float 	fConst396KI; // step: 2791
	float 	fConst397KI; // step: 2792
	float 	fConst398KI; // step: 2795
	// Recursion delay fVec413SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec413SEState; // Single Delay
	float 	fVec412SEState[2]; // Copy Delay
	float 	fConst399KI; // step: 2805
	float 	fConst400KI; // step: 2806
	float 	fConst401KI; // step: 2811
	float 	fConst402KI; // step: 2820
	float 	fConst403KI; // step: 2823
	float 	fConst404KI; // step: 2827
	// Recursion delay fVec418SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec418SEState; // Single Delay
	float 	fVec417SEState[2]; // Copy Delay
	float 	fConst405KI; // step: 2837
	float 	fConst406KI; // step: 2838
	float 	fConst407KI; // step: 2843
	float 	fConst408KI; // step: 2852
	float 	fConst409KI; // step: 2855
	float 	fConst410KI; // step: 2859
	// Recursion delay fVec423SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec423SEState; // Single Delay
	float 	fVec422SEState[2]; // Copy Delay
	float 	fConst411KI; // step: 2872
	float 	fConst412KI; // step: 2875
	float 	fConst413KI; // step: 2879
	// Recursion delay fVec426SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec426SEState; // Single Delay
	float 	fVec425SEState[2]; // Copy Delay
	float 	fConst414KI; // step: 2889
	float 	fConst415KI; // step: 2890
	float 	fConst416KI; // step: 2895
	float 	fConst417KI; // step: 2904
	float 	fConst418KI; // step: 2907
	float 	fConst419KI; // step: 2911
	// Recursion delay fVec431SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec431SEState; // Single Delay
	float 	fVec430SEState[2]; // Copy Delay
	float 	fConst420KI; // step: 2921
	float 	fConst421KI; // step: 2925
	float 	fConst422KI; // step: 2934
	float 	fConst423KI; // step: 2937
	float 	fConst424KI; // step: 2941
	// Recursion delay fVec436SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec436SEState; // Single Delay
	float 	fVec435SEState[2]; // Copy Delay
	float 	fConst425KI; // step: 2951
	float 	fConst426KI; // step: 2955
	float 	fConst427KI; // step: 2963
	float 	fConst428KI; // step: 2964
	float 	fConst429KI; // step: 2968
	float 	fConst430KI; // step: 2971
	float 	fConst431KI; // step: 2974
	float 	fConst432KI; // step: 2975
	float 	fConst433KI; // step: 2978
	// Recursion delay fVec441SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec441SEState; // Single Delay
	float 	fVec440SEState[2]; // Copy Delay
	float 	fConst434KI; // step: 2988
	float 	fConst435KI; // step: 2989
	float 	fConst436KI; // step: 2994
	float 	fConst437KI; // step: 3003
	float 	fConst438KI; // step: 3006
	float 	fConst439KI; // step: 3010
	// Recursion delay fVec446SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec446SEState; // Single Delay
	float 	fVec445SEState[2]; // Copy Delay
	float 	fConst440KI; // step: 3020
	float 	fConst441KI; // step: 3021
	float 	fConst442KI; // step: 3026
	float 	fConst443KI; // step: 3035
	float 	fConst444KI; // step: 3038
	float 	fConst445KI; // step: 3042
	// Recursion delay fVec451SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec451SEState; // Single Delay
	float 	fVec450SEState[2]; // Copy Delay
	float 	fConst446KI; // step: 3055
	float 	fConst447KI; // step: 3058
	float 	fConst448KI; // step: 3062
	// Recursion delay fVec454SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec454SEState; // Single Delay
	float 	fVec453SEState[2]; // Copy Delay
	float 	fConst449KI; // step: 3072
	float 	fConst450KI; // step: 3073
	float 	fConst451KI; // step: 3078
	float 	fConst452KI; // step: 3087
	float 	fConst453KI; // step: 3090
	float 	fConst454KI; // step: 3094
	// Recursion delay fVec459SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec459SEState; // Single Delay
	float 	fVec458SEState[2]; // Copy Delay
	float 	fConst455KI; // step: 3104
	float 	fConst456KI; // step: 3108
	float 	fConst457KI; // step: 3117
	float 	fConst458KI; // step: 3120
	float 	fConst459KI; // step: 3124
	// Recursion delay fVec464SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec464SEState; // Single Delay
	float 	fVec463SEState[2]; // Copy Delay
	float 	fConst460KI; // step: 3134
	float 	fConst461KI; // step: 3138
	float 	fConst462KI; // step: 3146
	float 	fConst463KI; // step: 3147
	float 	fConst464KI; // step: 3151
	float 	fConst465KI; // step: 3154
	float 	fConst466KI; // step: 3157
	float 	fConst467KI; // step: 3158
	float 	fConst468KI; // step: 3161
	// Recursion delay fVec469SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec469SEState; // Single Delay
	float 	fVec468SEState[2]; // Copy Delay
	float 	fConst469KI; // step: 3171
	float 	fConst470KI; // step: 3172
	float 	fConst471KI; // step: 3177
	float 	fConst472KI; // step: 3186
	float 	fConst473KI; // step: 3189
	float 	fConst474KI; // step: 3193
	// Recursion delay fVec474SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec474SEState; // Single Delay
	float 	fVec473SEState[2]; // Copy Delay
	float 	fConst475KI; // step: 3203
	float 	fConst476KI; // step: 3204
	float 	fConst477KI; // step: 3209
	float 	fConst478KI; // step: 3218
	float 	fConst479KI; // step: 3221
	float 	fConst480KI; // step: 3225
	// Recursion delay fVec479SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec479SEState; // Single Delay
	float 	fVec478SEState[2]; // Copy Delay
	float 	fConst481KI; // step: 3238
	float 	fConst482KI; // step: 3241
	float 	fConst483KI; // step: 3245
	// Recursion delay fVec482SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec482SEState; // Single Delay
	float 	fVec481SEState[2]; // Copy Delay
	float 	fConst484KI; // step: 3255
	float 	fConst485KI; // step: 3256
	float 	fConst486KI; // step: 3261
	float 	fConst487KI; // step: 3270
	float 	fConst488KI; // step: 3273
	float 	fConst489KI; // step: 3277
	// Recursion delay fVec487SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec487SEState; // Single Delay
	float 	fVec486SEState[2]; // Copy Delay
	float 	fConst490KI; // step: 3287
	float 	fConst491KI; // step: 3291
	float 	fConst492KI; // step: 3300
	float 	fConst493KI; // step: 3303
	float 	fConst494KI; // step: 3307
	// Recursion delay fVec492SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec492SEState; // Single Delay
	float 	fVec491SEState[2]; // Copy Delay
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	float 	fConst495KI; // step: 3322
	float 	fConst496KI; // step: 3331
	float 	fConst497KI; // step: 3332
	float 	fConst498KI; // step: 3337
	// Recursion delay fVec494SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec494SEState; // Single Delay
	FAUSTFLOAT 	fbargraph0;
	float 	fConst499KI; // step: 3360
	float 	fConst500KI; // step: 3361
	float 	fConst501KI; // step: 3366
	// Recursion delay fVec498SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec498SEState; // Single Delay
	FAUSTFLOAT 	fbargraph1;
	float 	fConst502KI; // step: 3385
	float 	fConst503KI; // step: 3386
	float 	fConst504KI; // step: 3391
	// Recursion delay fVec502SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec502SEState; // Single Delay
	FAUSTFLOAT 	fbargraph2;
	float 	fConst505KI; // step: 3410
	float 	fConst506KI; // step: 3411
	float 	fConst507KI; // step: 3416
	// Recursion delay fVec506SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec506SEState; // Single Delay
	FAUSTFLOAT 	fbargraph3;
	float 	fConst508KI; // step: 3435
	float 	fConst509KI; // step: 3436
	float 	fConst510KI; // step: 3441
	// Recursion delay fVec510SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec510SEState; // Single Delay
	FAUSTFLOAT 	fbargraph4;
	float 	fConst511KI; // step: 3460
	float 	fConst512KI; // step: 3461
	float 	fConst513KI; // step: 3466
	// Recursion delay fVec514SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec514SEState; // Single Delay
	FAUSTFLOAT 	fbargraph5;
	float 	fConst514KI; // step: 3485
	float 	fConst515KI; // step: 3486
	float 	fConst516KI; // step: 3491
	// Recursion delay fVec518SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec518SEState; // Single Delay
	FAUSTFLOAT 	fbargraph6;
	float 	fConst517KI; // step: 3510
	float 	fConst518KI; // step: 3511
	float 	fConst519KI; // step: 3516
	// Recursion delay fVec522SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec522SEState; // Single Delay
	FAUSTFLOAT 	fbargraph7;
	float 	fConst520KI; // step: 3535
	float 	fConst521KI; // step: 3536
	float 	fConst522KI; // step: 3541
	// Recursion delay fVec526SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec526SEState; // Single Delay
	FAUSTFLOAT 	fbargraph8;
	float 	fConst523KI; // step: 3560
	float 	fConst524KI; // step: 3561
	float 	fConst525KI; // step: 3566
	// Recursion delay fVec530SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec530SEState; // Single Delay
	FAUSTFLOAT 	fbargraph9;
	float 	fConst526KI; // step: 3585
	float 	fConst527KI; // step: 3586
	float 	fConst528KI; // step: 3591
	// Recursion delay fVec534SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec534SEState; // Single Delay
	FAUSTFLOAT 	fbargraph10;
	float 	fConst529KI; // step: 3610
	float 	fConst530KI; // step: 3611
	float 	fConst531KI; // step: 3616
	// Recursion delay fVec538SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec538SEState; // Single Delay
	FAUSTFLOAT 	fbargraph11;
	float 	fConst532KI; // step: 3635
	float 	fConst533KI; // step: 3636
	float 	fConst534KI; // step: 3641
	// Recursion delay fVec542SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec542SEState; // Single Delay
	FAUSTFLOAT 	fbargraph12;
	float 	fConst535KI; // step: 3660
	float 	fConst536KI; // step: 3661
	float 	fConst537KI; // step: 3666
	// Recursion delay fVec546SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec546SEState; // Single Delay
	FAUSTFLOAT 	fbargraph13;
	float 	fConst538KI; // step: 3685
	float 	fConst539KI; // step: 3689
	// Recursion delay fVec550SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec550SEState; // Single Delay
	FAUSTFLOAT 	fbargraph14;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/bypass1:author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("effect.lib/bypass1:copyright", "Julius O. Smith III");
		m->declare("effect.lib/bypass1:license", "STK-4.3");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("filename", "spectral_tilt.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "spectral_tilt");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 13
		fConst1KI = (1.0f / fConst0KI); // step: 14
		fConst2KI = (0.25f * fConst0KI); // step: 232
		fConst3KI = (0.041666668f * powf(fConst0KI,2.0f)); // step: 245
		fConst4KI = (0.0052083335f * powf(fConst0KI,3.0f)); // step: 260
		fConst5KI = (1.0f / tanf((0.5f / fConst0KI))); // step: 351
		fConst6KI = (3.1415927f / fConst0KI); // step: 360
		fConst7KI = tanf((50265.484f / fConst0KI)); // step: 743
		fConst8KI = (1.0f / fConst7KI); // step: 745
		fConst9KI = (1.0f / (((fConst8KI + 3.1897273f /* Sum */) / fConst7KI) + 4.0767817f /* Sum */)); // step: 749
		fConst10KI = (((fConst8KI + -3.1897273f /* Sum */) / fConst7KI) + 4.0767817f /* Sum */); // step: 753
		fConst11KI = powf(fConst7KI,2.0f); // step: 756
		fConst12KI = (1.0f / fConst11KI); // step: 757
		fConst13KI = (2.0f * (4.0767817f + -fConst12KI /* Sum */)); // step: 760
		fConst14KI = (0.0017661728f / fConst11KI); // step: 772
		fConst15KI = (fConst14KI + 0.0004076782f /* Sum */); // step: 773
		fConst16KI = (2.0f * (0.0004076782f + -fConst14KI /* Sum */)); // step: 778
		fConst17KI = (1.0f / (((fConst8KI + 0.74313045f /* Sum */) / fConst7KI) + 1.4500711f /* Sum */)); // step: 789
		fConst18KI = (((fConst8KI + -0.74313045f /* Sum */) / fConst7KI) + 1.4500711f /* Sum */); // step: 793
		fConst19KI = (2.0f * (1.4500711f + -fConst12KI /* Sum */)); // step: 797
		fConst20KI = (11.0520525f / fConst11KI); // step: 808
		fConst21KI = (fConst20KI + 1.4500711f /* Sum */); // step: 809
		fConst22KI = (2.0f * (1.4500711f + -fConst20KI /* Sum */)); // step: 814
		fConst23KI = (1.0f / (((fConst8KI + 0.15748216f /* Sum */) / fConst7KI) + 0.9351402f /* Sum */)); // step: 825
		fConst24KI = (((fConst8KI + -0.15748216f /* Sum */) / fConst7KI) + 0.9351402f /* Sum */); // step: 829
		fConst25KI = (2.0f * (0.9351402f + -fConst12KI /* Sum */)); // step: 833
		fConst26KI = (1.0f / (((fConst8KI + 0.78241307f /* Sum */) / fConst7KI) + 0.2452915f /* Sum */)); // step: 848
		fConst27KI = (((fConst8KI + -0.78241307f /* Sum */) / fConst7KI) + 0.2452915f /* Sum */); // step: 852
		fConst28KI = (2.0f * (0.2452915f + -fConst12KI /* Sum */)); // step: 856
		fConst29KI = (0.0001f / fConst11KI); // step: 868
		fConst30KI = (fConst29KI + 0.0004332272f /* Sum */); // step: 869
		fConst31KI = (2.0f * (0.0004332272f + -fConst29KI /* Sum */)); // step: 874
		fConst32KI = (1.0f / (((fConst8KI + 0.51247865f /* Sum */) / fConst7KI) + 0.6896214f /* Sum */)); // step: 885
		fConst33KI = (((fConst8KI + -0.51247865f /* Sum */) / fConst7KI) + 0.6896214f /* Sum */); // step: 889
		fConst34KI = (2.0f * (0.6896214f + -fConst12KI /* Sum */)); // step: 893
		fConst35KI = (fConst12KI + 7.6217313f /* Sum */); // step: 904
		fConst36KI = (2.0f * (7.6217313f + -fConst12KI /* Sum */)); // step: 908
		fConst37KI = (1.0f / (((fConst8KI + 0.16840488f /* Sum */) / fConst7KI) + 1.0693583f /* Sum */)); // step: 919
		fConst38KI = (((fConst8KI + -0.16840488f /* Sum */) / fConst7KI) + 1.0693583f /* Sum */); // step: 923
		fConst39KI = (2.0f * (1.0693583f + -fConst12KI /* Sum */)); // step: 927
		fConst40KI = (fConst12KI + 53.53615f /* Sum */); // step: 938
		fConst41KI = (2.0f * (53.53615f + -fConst12KI /* Sum */)); // step: 942
		fConst42KI = tanf((31665.27f / fConst0KI)); // step: 950
		fConst43KI = (1.0f / fConst42KI); // step: 951
		fConst44KI = (1.0f / (((fConst43KI + 3.1897273f /* Sum */) / fConst42KI) + 4.0767817f /* Sum */)); // step: 955
		fConst45KI = (((fConst43KI + -3.1897273f /* Sum */) / fConst42KI) + 4.0767817f /* Sum */); // step: 958
		fConst46KI = powf(fConst42KI,2.0f); // step: 961
		fConst47KI = (1.0f / fConst46KI); // step: 962
		fConst48KI = (2.0f * (4.0767817f + -fConst47KI /* Sum */)); // step: 965
		fConst49KI = (0.0017661728f / fConst46KI); // step: 975
		fConst50KI = (fConst49KI + 0.0004076782f /* Sum */); // step: 976
		fConst51KI = (2.0f * (0.0004076782f + -fConst49KI /* Sum */)); // step: 981
		fConst52KI = (1.0f / (((fConst43KI + 0.74313045f /* Sum */) / fConst42KI) + 1.4500711f /* Sum */)); // step: 990
		fConst53KI = (((fConst43KI + -0.74313045f /* Sum */) / fConst42KI) + 1.4500711f /* Sum */); // step: 993
		fConst54KI = (2.0f * (1.4500711f + -fConst47KI /* Sum */)); // step: 997
		fConst55KI = (11.0520525f / fConst46KI); // step: 1007
		fConst56KI = (fConst55KI + 1.4500711f /* Sum */); // step: 1008
		fConst57KI = (2.0f * (1.4500711f + -fConst55KI /* Sum */)); // step: 1013
		fConst58KI = (1.0f / (((fConst43KI + 0.15748216f /* Sum */) / fConst42KI) + 0.9351402f /* Sum */)); // step: 1022
		fConst59KI = (((fConst43KI + -0.15748216f /* Sum */) / fConst42KI) + 0.9351402f /* Sum */); // step: 1025
		fConst60KI = (2.0f * (0.9351402f + -fConst47KI /* Sum */)); // step: 1029
		fConst61KI = (1.0f / (((fConst43KI + 0.78241307f /* Sum */) / fConst42KI) + 0.2452915f /* Sum */)); // step: 1042
		fConst62KI = (((fConst43KI + -0.78241307f /* Sum */) / fConst42KI) + 0.2452915f /* Sum */); // step: 1045
		fConst63KI = (2.0f * (0.2452915f + -fConst47KI /* Sum */)); // step: 1049
		fConst64KI = (0.0001f / fConst46KI); // step: 1059
		fConst65KI = (fConst64KI + 0.0004332272f /* Sum */); // step: 1060
		fConst66KI = (2.0f * (0.0004332272f + -fConst64KI /* Sum */)); // step: 1065
		fConst67KI = (1.0f / (((fConst43KI + 0.51247865f /* Sum */) / fConst42KI) + 0.6896214f /* Sum */)); // step: 1074
		fConst68KI = (((fConst43KI + -0.51247865f /* Sum */) / fConst42KI) + 0.6896214f /* Sum */); // step: 1077
		fConst69KI = (2.0f * (0.6896214f + -fConst47KI /* Sum */)); // step: 1081
		fConst70KI = (fConst47KI + 7.6217313f /* Sum */); // step: 1091
		fConst71KI = (2.0f * (7.6217313f + -fConst47KI /* Sum */)); // step: 1095
		fConst72KI = (1.0f / (((fConst43KI + 0.16840488f /* Sum */) / fConst42KI) + 1.0693583f /* Sum */)); // step: 1104
		fConst73KI = (((fConst43KI + -0.16840488f /* Sum */) / fConst42KI) + 1.0693583f /* Sum */); // step: 1107
		fConst74KI = (2.0f * (1.0693583f + -fConst47KI /* Sum */)); // step: 1111
		fConst75KI = (fConst47KI + 53.53615f /* Sum */); // step: 1121
		fConst76KI = (2.0f * (53.53615f + -fConst47KI /* Sum */)); // step: 1125
		fConst77KI = tanf((19947.87f / fConst0KI)); // step: 1133
		fConst78KI = (1.0f / fConst77KI); // step: 1134
		fConst79KI = (1.0f / (((fConst78KI + 3.1897273f /* Sum */) / fConst77KI) + 4.0767817f /* Sum */)); // step: 1138
		fConst80KI = (((fConst78KI + -3.1897273f /* Sum */) / fConst77KI) + 4.0767817f /* Sum */); // step: 1141
		fConst81KI = powf(fConst77KI,2.0f); // step: 1144
		fConst82KI = (1.0f / fConst81KI); // step: 1145
		fConst83KI = (2.0f * (4.0767817f + -fConst82KI /* Sum */)); // step: 1148
		fConst84KI = (0.0017661728f / fConst81KI); // step: 1158
		fConst85KI = (fConst84KI + 0.0004076782f /* Sum */); // step: 1159
		fConst86KI = (2.0f * (0.0004076782f + -fConst84KI /* Sum */)); // step: 1164
		fConst87KI = (1.0f / (((fConst78KI + 0.74313045f /* Sum */) / fConst77KI) + 1.4500711f /* Sum */)); // step: 1173
		fConst88KI = (((fConst78KI + -0.74313045f /* Sum */) / fConst77KI) + 1.4500711f /* Sum */); // step: 1176
		fConst89KI = (2.0f * (1.4500711f + -fConst82KI /* Sum */)); // step: 1180
		fConst90KI = (11.0520525f / fConst81KI); // step: 1190
		fConst91KI = (fConst90KI + 1.4500711f /* Sum */); // step: 1191
		fConst92KI = (2.0f * (1.4500711f + -fConst90KI /* Sum */)); // step: 1196
		fConst93KI = (1.0f / (((fConst78KI + 0.15748216f /* Sum */) / fConst77KI) + 0.9351402f /* Sum */)); // step: 1205
		fConst94KI = (((fConst78KI + -0.15748216f /* Sum */) / fConst77KI) + 0.9351402f /* Sum */); // step: 1208
		fConst95KI = (2.0f * (0.9351402f + -fConst82KI /* Sum */)); // step: 1212
		fConst96KI = (1.0f / (((fConst78KI + 0.78241307f /* Sum */) / fConst77KI) + 0.2452915f /* Sum */)); // step: 1225
		fConst97KI = (((fConst78KI + -0.78241307f /* Sum */) / fConst77KI) + 0.2452915f /* Sum */); // step: 1228
		fConst98KI = (2.0f * (0.2452915f + -fConst82KI /* Sum */)); // step: 1232
		fConst99KI = (0.0001f / fConst81KI); // step: 1242
		fConst100KI = (fConst99KI + 0.0004332272f /* Sum */); // step: 1243
		fConst101KI = (2.0f * (0.0004332272f + -fConst99KI /* Sum */)); // step: 1248
		fConst102KI = (1.0f / (((fConst78KI + 0.51247865f /* Sum */) / fConst77KI) + 0.6896214f /* Sum */)); // step: 1257
		fConst103KI = (((fConst78KI + -0.51247865f /* Sum */) / fConst77KI) + 0.6896214f /* Sum */); // step: 1260
		fConst104KI = (2.0f * (0.6896214f + -fConst82KI /* Sum */)); // step: 1264
		fConst105KI = (fConst82KI + 7.6217313f /* Sum */); // step: 1274
		fConst106KI = (2.0f * (7.6217313f + -fConst82KI /* Sum */)); // step: 1278
		fConst107KI = (1.0f / (((fConst78KI + 0.16840488f /* Sum */) / fConst77KI) + 1.0693583f /* Sum */)); // step: 1287
		fConst108KI = (((fConst78KI + -0.16840488f /* Sum */) / fConst77KI) + 1.0693583f /* Sum */); // step: 1290
		fConst109KI = (2.0f * (1.0693583f + -fConst82KI /* Sum */)); // step: 1294
		fConst110KI = (fConst82KI + 53.53615f /* Sum */); // step: 1304
		fConst111KI = (2.0f * (53.53615f + -fConst82KI /* Sum */)); // step: 1308
		fConst112KI = tanf((12566.371f / fConst0KI)); // step: 1316
		fConst113KI = (1.0f / fConst112KI); // step: 1317
		fConst114KI = (1.0f / (((fConst113KI + 3.1897273f /* Sum */) / fConst112KI) + 4.0767817f /* Sum */)); // step: 1321
		fConst115KI = (((fConst113KI + -3.1897273f /* Sum */) / fConst112KI) + 4.0767817f /* Sum */); // step: 1324
		fConst116KI = powf(fConst112KI,2.0f); // step: 1327
		fConst117KI = (1.0f / fConst116KI); // step: 1328
		fConst118KI = (2.0f * (4.0767817f + -fConst117KI /* Sum */)); // step: 1331
		fConst119KI = (0.0017661728f / fConst116KI); // step: 1341
		fConst120KI = (fConst119KI + 0.0004076782f /* Sum */); // step: 1342
		fConst121KI = (2.0f * (0.0004076782f + -fConst119KI /* Sum */)); // step: 1347
		fConst122KI = (1.0f / (((fConst113KI + 0.74313045f /* Sum */) / fConst112KI) + 1.4500711f /* Sum */)); // step: 1356
		fConst123KI = (((fConst113KI + -0.74313045f /* Sum */) / fConst112KI) + 1.4500711f /* Sum */); // step: 1359
		fConst124KI = (2.0f * (1.4500711f + -fConst117KI /* Sum */)); // step: 1363
		fConst125KI = (11.0520525f / fConst116KI); // step: 1373
		fConst126KI = (fConst125KI + 1.4500711f /* Sum */); // step: 1374
		fConst127KI = (2.0f * (1.4500711f + -fConst125KI /* Sum */)); // step: 1379
		fConst128KI = (1.0f / (((fConst113KI + 0.15748216f /* Sum */) / fConst112KI) + 0.9351402f /* Sum */)); // step: 1388
		fConst129KI = (((fConst113KI + -0.15748216f /* Sum */) / fConst112KI) + 0.9351402f /* Sum */); // step: 1391
		fConst130KI = (2.0f * (0.9351402f + -fConst117KI /* Sum */)); // step: 1395
		fConst131KI = (1.0f / (((fConst113KI + 0.78241307f /* Sum */) / fConst112KI) + 0.2452915f /* Sum */)); // step: 1408
		fConst132KI = (((fConst113KI + -0.78241307f /* Sum */) / fConst112KI) + 0.2452915f /* Sum */); // step: 1411
		fConst133KI = (2.0f * (0.2452915f + -fConst117KI /* Sum */)); // step: 1415
		fConst134KI = (0.0001f / fConst116KI); // step: 1425
		fConst135KI = (fConst134KI + 0.0004332272f /* Sum */); // step: 1426
		fConst136KI = (2.0f * (0.0004332272f + -fConst134KI /* Sum */)); // step: 1431
		fConst137KI = (1.0f / (((fConst113KI + 0.51247865f /* Sum */) / fConst112KI) + 0.6896214f /* Sum */)); // step: 1440
		fConst138KI = (((fConst113KI + -0.51247865f /* Sum */) / fConst112KI) + 0.6896214f /* Sum */); // step: 1443
		fConst139KI = (2.0f * (0.6896214f + -fConst117KI /* Sum */)); // step: 1447
		fConst140KI = (fConst117KI + 7.6217313f /* Sum */); // step: 1457
		fConst141KI = (2.0f * (7.6217313f + -fConst117KI /* Sum */)); // step: 1461
		fConst142KI = (1.0f / (((fConst113KI + 0.16840488f /* Sum */) / fConst112KI) + 1.0693583f /* Sum */)); // step: 1470
		fConst143KI = (((fConst113KI + -0.16840488f /* Sum */) / fConst112KI) + 1.0693583f /* Sum */); // step: 1473
		fConst144KI = (2.0f * (1.0693583f + -fConst117KI /* Sum */)); // step: 1477
		fConst145KI = (fConst117KI + 53.53615f /* Sum */); // step: 1487
		fConst146KI = (2.0f * (53.53615f + -fConst117KI /* Sum */)); // step: 1491
		fConst147KI = tanf((7916.3174f / fConst0KI)); // step: 1499
		fConst148KI = (1.0f / fConst147KI); // step: 1500
		fConst149KI = (1.0f / (((fConst148KI + 3.1897273f /* Sum */) / fConst147KI) + 4.0767817f /* Sum */)); // step: 1504
		fConst150KI = (((fConst148KI + -3.1897273f /* Sum */) / fConst147KI) + 4.0767817f /* Sum */); // step: 1507
		fConst151KI = powf(fConst147KI,2.0f); // step: 1510
		fConst152KI = (1.0f / fConst151KI); // step: 1511
		fConst153KI = (2.0f * (4.0767817f + -fConst152KI /* Sum */)); // step: 1514
		fConst154KI = (0.0017661728f / fConst151KI); // step: 1524
		fConst155KI = (fConst154KI + 0.0004076782f /* Sum */); // step: 1525
		fConst156KI = (2.0f * (0.0004076782f + -fConst154KI /* Sum */)); // step: 1530
		fConst157KI = (1.0f / (((fConst148KI + 0.74313045f /* Sum */) / fConst147KI) + 1.4500711f /* Sum */)); // step: 1539
		fConst158KI = (((fConst148KI + -0.74313045f /* Sum */) / fConst147KI) + 1.4500711f /* Sum */); // step: 1542
		fConst159KI = (2.0f * (1.4500711f + -fConst152KI /* Sum */)); // step: 1546
		fConst160KI = (11.0520525f / fConst151KI); // step: 1556
		fConst161KI = (fConst160KI + 1.4500711f /* Sum */); // step: 1557
		fConst162KI = (2.0f * (1.4500711f + -fConst160KI /* Sum */)); // step: 1562
		fConst163KI = (1.0f / (((fConst148KI + 0.15748216f /* Sum */) / fConst147KI) + 0.9351402f /* Sum */)); // step: 1571
		fConst164KI = (((fConst148KI + -0.15748216f /* Sum */) / fConst147KI) + 0.9351402f /* Sum */); // step: 1574
		fConst165KI = (2.0f * (0.9351402f + -fConst152KI /* Sum */)); // step: 1578
		fConst166KI = (1.0f / (((fConst148KI + 0.78241307f /* Sum */) / fConst147KI) + 0.2452915f /* Sum */)); // step: 1591
		fConst167KI = (((fConst148KI + -0.78241307f /* Sum */) / fConst147KI) + 0.2452915f /* Sum */); // step: 1594
		fConst168KI = (2.0f * (0.2452915f + -fConst152KI /* Sum */)); // step: 1598
		fConst169KI = (0.0001f / fConst151KI); // step: 1608
		fConst170KI = (fConst169KI + 0.0004332272f /* Sum */); // step: 1609
		fConst171KI = (2.0f * (0.0004332272f + -fConst169KI /* Sum */)); // step: 1614
		fConst172KI = (1.0f / (((fConst148KI + 0.51247865f /* Sum */) / fConst147KI) + 0.6896214f /* Sum */)); // step: 1623
		fConst173KI = (((fConst148KI + -0.51247865f /* Sum */) / fConst147KI) + 0.6896214f /* Sum */); // step: 1626
		fConst174KI = (2.0f * (0.6896214f + -fConst152KI /* Sum */)); // step: 1630
		fConst175KI = (fConst152KI + 7.6217313f /* Sum */); // step: 1640
		fConst176KI = (2.0f * (7.6217313f + -fConst152KI /* Sum */)); // step: 1644
		fConst177KI = (1.0f / (((fConst148KI + 0.16840488f /* Sum */) / fConst147KI) + 1.0693583f /* Sum */)); // step: 1653
		fConst178KI = (((fConst148KI + -0.16840488f /* Sum */) / fConst147KI) + 1.0693583f /* Sum */); // step: 1656
		fConst179KI = (2.0f * (1.0693583f + -fConst152KI /* Sum */)); // step: 1660
		fConst180KI = (fConst152KI + 53.53615f /* Sum */); // step: 1670
		fConst181KI = (2.0f * (53.53615f + -fConst152KI /* Sum */)); // step: 1674
		fConst182KI = tanf((4986.9673f / fConst0KI)); // step: 1682
		fConst183KI = (1.0f / fConst182KI); // step: 1683
		fConst184KI = (1.0f / (((fConst183KI + 3.1897273f /* Sum */) / fConst182KI) + 4.0767817f /* Sum */)); // step: 1687
		fConst185KI = (((fConst183KI + -3.1897273f /* Sum */) / fConst182KI) + 4.0767817f /* Sum */); // step: 1690
		fConst186KI = powf(fConst182KI,2.0f); // step: 1693
		fConst187KI = (1.0f / fConst186KI); // step: 1694
		fConst188KI = (2.0f * (4.0767817f + -fConst187KI /* Sum */)); // step: 1697
		fConst189KI = (0.0017661728f / fConst186KI); // step: 1707
		fConst190KI = (fConst189KI + 0.0004076782f /* Sum */); // step: 1708
		fConst191KI = (2.0f * (0.0004076782f + -fConst189KI /* Sum */)); // step: 1713
		fConst192KI = (1.0f / (((fConst183KI + 0.74313045f /* Sum */) / fConst182KI) + 1.4500711f /* Sum */)); // step: 1722
		fConst193KI = (((fConst183KI + -0.74313045f /* Sum */) / fConst182KI) + 1.4500711f /* Sum */); // step: 1725
		fConst194KI = (2.0f * (1.4500711f + -fConst187KI /* Sum */)); // step: 1729
		fConst195KI = (11.0520525f / fConst186KI); // step: 1739
		fConst196KI = (fConst195KI + 1.4500711f /* Sum */); // step: 1740
		fConst197KI = (2.0f * (1.4500711f + -fConst195KI /* Sum */)); // step: 1745
		fConst198KI = (1.0f / (((fConst183KI + 0.15748216f /* Sum */) / fConst182KI) + 0.9351402f /* Sum */)); // step: 1754
		fConst199KI = (((fConst183KI + -0.15748216f /* Sum */) / fConst182KI) + 0.9351402f /* Sum */); // step: 1757
		fConst200KI = (2.0f * (0.9351402f + -fConst187KI /* Sum */)); // step: 1761
		fConst201KI = (1.0f / (((fConst183KI + 0.78241307f /* Sum */) / fConst182KI) + 0.2452915f /* Sum */)); // step: 1774
		fConst202KI = (((fConst183KI + -0.78241307f /* Sum */) / fConst182KI) + 0.2452915f /* Sum */); // step: 1777
		fConst203KI = (2.0f * (0.2452915f + -fConst187KI /* Sum */)); // step: 1781
		fConst204KI = (0.0001f / fConst186KI); // step: 1791
		fConst205KI = (fConst204KI + 0.0004332272f /* Sum */); // step: 1792
		fConst206KI = (2.0f * (0.0004332272f + -fConst204KI /* Sum */)); // step: 1797
		fConst207KI = (1.0f / (((fConst183KI + 0.51247865f /* Sum */) / fConst182KI) + 0.6896214f /* Sum */)); // step: 1806
		fConst208KI = (((fConst183KI + -0.51247865f /* Sum */) / fConst182KI) + 0.6896214f /* Sum */); // step: 1809
		fConst209KI = (2.0f * (0.6896214f + -fConst187KI /* Sum */)); // step: 1813
		fConst210KI = (fConst187KI + 7.6217313f /* Sum */); // step: 1823
		fConst211KI = (2.0f * (7.6217313f + -fConst187KI /* Sum */)); // step: 1827
		fConst212KI = (1.0f / (((fConst183KI + 0.16840488f /* Sum */) / fConst182KI) + 1.0693583f /* Sum */)); // step: 1836
		fConst213KI = (((fConst183KI + -0.16840488f /* Sum */) / fConst182KI) + 1.0693583f /* Sum */); // step: 1839
		fConst214KI = (2.0f * (1.0693583f + -fConst187KI /* Sum */)); // step: 1843
		fConst215KI = (fConst187KI + 53.53615f /* Sum */); // step: 1853
		fConst216KI = (2.0f * (53.53615f + -fConst187KI /* Sum */)); // step: 1857
		fConst217KI = tanf((3141.5928f / fConst0KI)); // step: 1865
		fConst218KI = (1.0f / fConst217KI); // step: 1866
		fConst219KI = (1.0f / (((fConst218KI + 3.1897273f /* Sum */) / fConst217KI) + 4.0767817f /* Sum */)); // step: 1870
		fConst220KI = (((fConst218KI + -3.1897273f /* Sum */) / fConst217KI) + 4.0767817f /* Sum */); // step: 1873
		fConst221KI = powf(fConst217KI,2.0f); // step: 1876
		fConst222KI = (1.0f / fConst221KI); // step: 1877
		fConst223KI = (2.0f * (4.0767817f + -fConst222KI /* Sum */)); // step: 1880
		fConst224KI = (0.0017661728f / fConst221KI); // step: 1890
		fConst225KI = (fConst224KI + 0.0004076782f /* Sum */); // step: 1891
		fConst226KI = (2.0f * (0.0004076782f + -fConst224KI /* Sum */)); // step: 1896
		fConst227KI = (1.0f / (((fConst218KI + 0.74313045f /* Sum */) / fConst217KI) + 1.4500711f /* Sum */)); // step: 1905
		fConst228KI = (((fConst218KI + -0.74313045f /* Sum */) / fConst217KI) + 1.4500711f /* Sum */); // step: 1908
		fConst229KI = (2.0f * (1.4500711f + -fConst222KI /* Sum */)); // step: 1912
		fConst230KI = (11.0520525f / fConst221KI); // step: 1922
		fConst231KI = (fConst230KI + 1.4500711f /* Sum */); // step: 1923
		fConst232KI = (2.0f * (1.4500711f + -fConst230KI /* Sum */)); // step: 1928
		fConst233KI = (1.0f / (((fConst218KI + 0.15748216f /* Sum */) / fConst217KI) + 0.9351402f /* Sum */)); // step: 1937
		fConst234KI = (((fConst218KI + -0.15748216f /* Sum */) / fConst217KI) + 0.9351402f /* Sum */); // step: 1940
		fConst235KI = (2.0f * (0.9351402f + -fConst222KI /* Sum */)); // step: 1944
		fConst236KI = (1.0f / (((fConst218KI + 0.78241307f /* Sum */) / fConst217KI) + 0.2452915f /* Sum */)); // step: 1957
		fConst237KI = (((fConst218KI + -0.78241307f /* Sum */) / fConst217KI) + 0.2452915f /* Sum */); // step: 1960
		fConst238KI = (2.0f * (0.2452915f + -fConst222KI /* Sum */)); // step: 1964
		fConst239KI = (0.0001f / fConst221KI); // step: 1974
		fConst240KI = (fConst239KI + 0.0004332272f /* Sum */); // step: 1975
		fConst241KI = (2.0f * (0.0004332272f + -fConst239KI /* Sum */)); // step: 1980
		fConst242KI = (1.0f / (((fConst218KI + 0.51247865f /* Sum */) / fConst217KI) + 0.6896214f /* Sum */)); // step: 1989
		fConst243KI = (((fConst218KI + -0.51247865f /* Sum */) / fConst217KI) + 0.6896214f /* Sum */); // step: 1992
		fConst244KI = (2.0f * (0.6896214f + -fConst222KI /* Sum */)); // step: 1996
		fConst245KI = (fConst222KI + 7.6217313f /* Sum */); // step: 2006
		fConst246KI = (2.0f * (7.6217313f + -fConst222KI /* Sum */)); // step: 2010
		fConst247KI = (1.0f / (((fConst218KI + 0.16840488f /* Sum */) / fConst217KI) + 1.0693583f /* Sum */)); // step: 2019
		fConst248KI = (((fConst218KI + -0.16840488f /* Sum */) / fConst217KI) + 1.0693583f /* Sum */); // step: 2022
		fConst249KI = (2.0f * (1.0693583f + -fConst222KI /* Sum */)); // step: 2026
		fConst250KI = (fConst222KI + 53.53615f /* Sum */); // step: 2036
		fConst251KI = (2.0f * (53.53615f + -fConst222KI /* Sum */)); // step: 2040
		fConst252KI = tanf((1979.0793f / fConst0KI)); // step: 2048
		fConst253KI = (1.0f / fConst252KI); // step: 2049
		fConst254KI = (1.0f / (((fConst253KI + 3.1897273f /* Sum */) / fConst252KI) + 4.0767817f /* Sum */)); // step: 2053
		fConst255KI = (((fConst253KI + -3.1897273f /* Sum */) / fConst252KI) + 4.0767817f /* Sum */); // step: 2056
		fConst256KI = powf(fConst252KI,2.0f); // step: 2059
		fConst257KI = (1.0f / fConst256KI); // step: 2060
		fConst258KI = (2.0f * (4.0767817f + -fConst257KI /* Sum */)); // step: 2063
		fConst259KI = (0.0017661728f / fConst256KI); // step: 2073
		fConst260KI = (fConst259KI + 0.0004076782f /* Sum */); // step: 2074
		fConst261KI = (2.0f * (0.0004076782f + -fConst259KI /* Sum */)); // step: 2079
		fConst262KI = (1.0f / (((fConst253KI + 0.74313045f /* Sum */) / fConst252KI) + 1.4500711f /* Sum */)); // step: 2088
		fConst263KI = (((fConst253KI + -0.74313045f /* Sum */) / fConst252KI) + 1.4500711f /* Sum */); // step: 2091
		fConst264KI = (2.0f * (1.4500711f + -fConst257KI /* Sum */)); // step: 2095
		fConst265KI = (11.0520525f / fConst256KI); // step: 2105
		fConst266KI = (fConst265KI + 1.4500711f /* Sum */); // step: 2106
		fConst267KI = (2.0f * (1.4500711f + -fConst265KI /* Sum */)); // step: 2111
		fConst268KI = (1.0f / (((fConst253KI + 0.15748216f /* Sum */) / fConst252KI) + 0.9351402f /* Sum */)); // step: 2120
		fConst269KI = (((fConst253KI + -0.15748216f /* Sum */) / fConst252KI) + 0.9351402f /* Sum */); // step: 2123
		fConst270KI = (2.0f * (0.9351402f + -fConst257KI /* Sum */)); // step: 2127
		fConst271KI = (1.0f / (((fConst253KI + 0.78241307f /* Sum */) / fConst252KI) + 0.2452915f /* Sum */)); // step: 2140
		fConst272KI = (((fConst253KI + -0.78241307f /* Sum */) / fConst252KI) + 0.2452915f /* Sum */); // step: 2143
		fConst273KI = (2.0f * (0.2452915f + -fConst257KI /* Sum */)); // step: 2147
		fConst274KI = (0.0001f / fConst256KI); // step: 2157
		fConst275KI = (fConst274KI + 0.0004332272f /* Sum */); // step: 2158
		fConst276KI = (2.0f * (0.0004332272f + -fConst274KI /* Sum */)); // step: 2163
		fConst277KI = (1.0f / (((fConst253KI + 0.51247865f /* Sum */) / fConst252KI) + 0.6896214f /* Sum */)); // step: 2172
		fConst278KI = (((fConst253KI + -0.51247865f /* Sum */) / fConst252KI) + 0.6896214f /* Sum */); // step: 2175
		fConst279KI = (2.0f * (0.6896214f + -fConst257KI /* Sum */)); // step: 2179
		fConst280KI = (fConst257KI + 7.6217313f /* Sum */); // step: 2189
		fConst281KI = (2.0f * (7.6217313f + -fConst257KI /* Sum */)); // step: 2193
		fConst282KI = (1.0f / (((fConst253KI + 0.16840488f /* Sum */) / fConst252KI) + 1.0693583f /* Sum */)); // step: 2202
		fConst283KI = (((fConst253KI + -0.16840488f /* Sum */) / fConst252KI) + 1.0693583f /* Sum */); // step: 2205
		fConst284KI = (2.0f * (1.0693583f + -fConst257KI /* Sum */)); // step: 2209
		fConst285KI = (fConst257KI + 53.53615f /* Sum */); // step: 2219
		fConst286KI = (2.0f * (53.53615f + -fConst257KI /* Sum */)); // step: 2223
		fConst287KI = tanf((1246.7418f / fConst0KI)); // step: 2231
		fConst288KI = (1.0f / fConst287KI); // step: 2232
		fConst289KI = (1.0f / (((fConst288KI + 3.1897273f /* Sum */) / fConst287KI) + 4.0767817f /* Sum */)); // step: 2236
		fConst290KI = (((fConst288KI + -3.1897273f /* Sum */) / fConst287KI) + 4.0767817f /* Sum */); // step: 2239
		fConst291KI = powf(fConst287KI,2.0f); // step: 2242
		fConst292KI = (1.0f / fConst291KI); // step: 2243
		fConst293KI = (2.0f * (4.0767817f + -fConst292KI /* Sum */)); // step: 2246
		fConst294KI = (0.0017661728f / fConst291KI); // step: 2256
		fConst295KI = (fConst294KI + 0.0004076782f /* Sum */); // step: 2257
		fConst296KI = (2.0f * (0.0004076782f + -fConst294KI /* Sum */)); // step: 2262
		fConst297KI = (1.0f / (((fConst288KI + 0.74313045f /* Sum */) / fConst287KI) + 1.4500711f /* Sum */)); // step: 2271
		fConst298KI = (((fConst288KI + -0.74313045f /* Sum */) / fConst287KI) + 1.4500711f /* Sum */); // step: 2274
		fConst299KI = (2.0f * (1.4500711f + -fConst292KI /* Sum */)); // step: 2278
		fConst300KI = (11.0520525f / fConst291KI); // step: 2288
		fConst301KI = (fConst300KI + 1.4500711f /* Sum */); // step: 2289
		fConst302KI = (2.0f * (1.4500711f + -fConst300KI /* Sum */)); // step: 2294
		fConst303KI = (1.0f / (((fConst288KI + 0.15748216f /* Sum */) / fConst287KI) + 0.9351402f /* Sum */)); // step: 2303
		fConst304KI = (((fConst288KI + -0.15748216f /* Sum */) / fConst287KI) + 0.9351402f /* Sum */); // step: 2306
		fConst305KI = (2.0f * (0.9351402f + -fConst292KI /* Sum */)); // step: 2310
		fConst306KI = (1.0f / (((fConst288KI + 0.78241307f /* Sum */) / fConst287KI) + 0.2452915f /* Sum */)); // step: 2323
		fConst307KI = (((fConst288KI + -0.78241307f /* Sum */) / fConst287KI) + 0.2452915f /* Sum */); // step: 2326
		fConst308KI = (2.0f * (0.2452915f + -fConst292KI /* Sum */)); // step: 2330
		fConst309KI = (0.0001f / fConst291KI); // step: 2340
		fConst310KI = (fConst309KI + 0.0004332272f /* Sum */); // step: 2341
		fConst311KI = (2.0f * (0.0004332272f + -fConst309KI /* Sum */)); // step: 2346
		fConst312KI = (1.0f / (((fConst288KI + 0.51247865f /* Sum */) / fConst287KI) + 0.6896214f /* Sum */)); // step: 2355
		fConst313KI = (((fConst288KI + -0.51247865f /* Sum */) / fConst287KI) + 0.6896214f /* Sum */); // step: 2358
		fConst314KI = (2.0f * (0.6896214f + -fConst292KI /* Sum */)); // step: 2362
		fConst315KI = (fConst292KI + 7.6217313f /* Sum */); // step: 2372
		fConst316KI = (2.0f * (7.6217313f + -fConst292KI /* Sum */)); // step: 2376
		fConst317KI = (1.0f / (((fConst288KI + 0.16840488f /* Sum */) / fConst287KI) + 1.0693583f /* Sum */)); // step: 2385
		fConst318KI = (((fConst288KI + -0.16840488f /* Sum */) / fConst287KI) + 1.0693583f /* Sum */); // step: 2388
		fConst319KI = (2.0f * (1.0693583f + -fConst292KI /* Sum */)); // step: 2392
		fConst320KI = (fConst292KI + 53.53615f /* Sum */); // step: 2402
		fConst321KI = (2.0f * (53.53615f + -fConst292KI /* Sum */)); // step: 2406
		fConst322KI = tanf((785.3982f / fConst0KI)); // step: 2414
		fConst323KI = (1.0f / fConst322KI); // step: 2415
		fConst324KI = (1.0f / (((fConst323KI + 3.1897273f /* Sum */) / fConst322KI) + 4.0767817f /* Sum */)); // step: 2419
		fConst325KI = (((fConst323KI + -3.1897273f /* Sum */) / fConst322KI) + 4.0767817f /* Sum */); // step: 2422
		fConst326KI = powf(fConst322KI,2.0f); // step: 2425
		fConst327KI = (1.0f / fConst326KI); // step: 2426
		fConst328KI = (2.0f * (4.0767817f + -fConst327KI /* Sum */)); // step: 2429
		fConst329KI = (0.0017661728f / fConst326KI); // step: 2439
		fConst330KI = (fConst329KI + 0.0004076782f /* Sum */); // step: 2440
		fConst331KI = (2.0f * (0.0004076782f + -fConst329KI /* Sum */)); // step: 2445
		fConst332KI = (1.0f / (((fConst323KI + 0.74313045f /* Sum */) / fConst322KI) + 1.4500711f /* Sum */)); // step: 2454
		fConst333KI = (((fConst323KI + -0.74313045f /* Sum */) / fConst322KI) + 1.4500711f /* Sum */); // step: 2457
		fConst334KI = (2.0f * (1.4500711f + -fConst327KI /* Sum */)); // step: 2461
		fConst335KI = (11.0520525f / fConst326KI); // step: 2471
		fConst336KI = (fConst335KI + 1.4500711f /* Sum */); // step: 2472
		fConst337KI = (2.0f * (1.4500711f + -fConst335KI /* Sum */)); // step: 2477
		fConst338KI = (1.0f / (((fConst323KI + 0.15748216f /* Sum */) / fConst322KI) + 0.9351402f /* Sum */)); // step: 2486
		fConst339KI = (((fConst323KI + -0.15748216f /* Sum */) / fConst322KI) + 0.9351402f /* Sum */); // step: 2489
		fConst340KI = (2.0f * (0.9351402f + -fConst327KI /* Sum */)); // step: 2493
		fConst341KI = (1.0f / (((fConst323KI + 0.78241307f /* Sum */) / fConst322KI) + 0.2452915f /* Sum */)); // step: 2506
		fConst342KI = (((fConst323KI + -0.78241307f /* Sum */) / fConst322KI) + 0.2452915f /* Sum */); // step: 2509
		fConst343KI = (2.0f * (0.2452915f + -fConst327KI /* Sum */)); // step: 2513
		fConst344KI = (0.0001f / fConst326KI); // step: 2523
		fConst345KI = (fConst344KI + 0.0004332272f /* Sum */); // step: 2524
		fConst346KI = (2.0f * (0.0004332272f + -fConst344KI /* Sum */)); // step: 2529
		fConst347KI = (1.0f / (((fConst323KI + 0.51247865f /* Sum */) / fConst322KI) + 0.6896214f /* Sum */)); // step: 2538
		fConst348KI = (((fConst323KI + -0.51247865f /* Sum */) / fConst322KI) + 0.6896214f /* Sum */); // step: 2541
		fConst349KI = (2.0f * (0.6896214f + -fConst327KI /* Sum */)); // step: 2545
		fConst350KI = (fConst327KI + 7.6217313f /* Sum */); // step: 2555
		fConst351KI = (2.0f * (7.6217313f + -fConst327KI /* Sum */)); // step: 2559
		fConst352KI = (1.0f / (((fConst323KI + 0.16840488f /* Sum */) / fConst322KI) + 1.0693583f /* Sum */)); // step: 2568
		fConst353KI = (((fConst323KI + -0.16840488f /* Sum */) / fConst322KI) + 1.0693583f /* Sum */); // step: 2571
		fConst354KI = (2.0f * (1.0693583f + -fConst327KI /* Sum */)); // step: 2575
		fConst355KI = (fConst327KI + 53.53615f /* Sum */); // step: 2585
		fConst356KI = (2.0f * (53.53615f + -fConst327KI /* Sum */)); // step: 2589
		fConst357KI = tanf((494.76984f / fConst0KI)); // step: 2597
		fConst358KI = (1.0f / fConst357KI); // step: 2598
		fConst359KI = (1.0f / (((fConst358KI + 3.1897273f /* Sum */) / fConst357KI) + 4.0767817f /* Sum */)); // step: 2602
		fConst360KI = (((fConst358KI + -3.1897273f /* Sum */) / fConst357KI) + 4.0767817f /* Sum */); // step: 2605
		fConst361KI = powf(fConst357KI,2.0f); // step: 2608
		fConst362KI = (1.0f / fConst361KI); // step: 2609
		fConst363KI = (2.0f * (4.0767817f + -fConst362KI /* Sum */)); // step: 2612
		fConst364KI = (0.0017661728f / fConst361KI); // step: 2622
		fConst365KI = (fConst364KI + 0.0004076782f /* Sum */); // step: 2623
		fConst366KI = (2.0f * (0.0004076782f + -fConst364KI /* Sum */)); // step: 2628
		fConst367KI = (1.0f / (((fConst358KI + 0.74313045f /* Sum */) / fConst357KI) + 1.4500711f /* Sum */)); // step: 2637
		fConst368KI = (((fConst358KI + -0.74313045f /* Sum */) / fConst357KI) + 1.4500711f /* Sum */); // step: 2640
		fConst369KI = (2.0f * (1.4500711f + -fConst362KI /* Sum */)); // step: 2644
		fConst370KI = (11.0520525f / fConst361KI); // step: 2654
		fConst371KI = (fConst370KI + 1.4500711f /* Sum */); // step: 2655
		fConst372KI = (2.0f * (1.4500711f + -fConst370KI /* Sum */)); // step: 2660
		fConst373KI = (1.0f / (((fConst358KI + 0.15748216f /* Sum */) / fConst357KI) + 0.9351402f /* Sum */)); // step: 2669
		fConst374KI = (((fConst358KI + -0.15748216f /* Sum */) / fConst357KI) + 0.9351402f /* Sum */); // step: 2672
		fConst375KI = (2.0f * (0.9351402f + -fConst362KI /* Sum */)); // step: 2676
		fConst376KI = (1.0f / (((fConst358KI + 0.78241307f /* Sum */) / fConst357KI) + 0.2452915f /* Sum */)); // step: 2689
		fConst377KI = (((fConst358KI + -0.78241307f /* Sum */) / fConst357KI) + 0.2452915f /* Sum */); // step: 2692
		fConst378KI = (2.0f * (0.2452915f + -fConst362KI /* Sum */)); // step: 2696
		fConst379KI = (0.0001f / fConst361KI); // step: 2706
		fConst380KI = (fConst379KI + 0.0004332272f /* Sum */); // step: 2707
		fConst381KI = (2.0f * (0.0004332272f + -fConst379KI /* Sum */)); // step: 2712
		fConst382KI = (1.0f / (((fConst358KI + 0.51247865f /* Sum */) / fConst357KI) + 0.6896214f /* Sum */)); // step: 2721
		fConst383KI = (((fConst358KI + -0.51247865f /* Sum */) / fConst357KI) + 0.6896214f /* Sum */); // step: 2724
		fConst384KI = (2.0f * (0.6896214f + -fConst362KI /* Sum */)); // step: 2728
		fConst385KI = (fConst362KI + 7.6217313f /* Sum */); // step: 2738
		fConst386KI = (2.0f * (7.6217313f + -fConst362KI /* Sum */)); // step: 2742
		fConst387KI = (1.0f / (((fConst358KI + 0.16840488f /* Sum */) / fConst357KI) + 1.0693583f /* Sum */)); // step: 2751
		fConst388KI = (((fConst358KI + -0.16840488f /* Sum */) / fConst357KI) + 1.0693583f /* Sum */); // step: 2754
		fConst389KI = (2.0f * (1.0693583f + -fConst362KI /* Sum */)); // step: 2758
		fConst390KI = (fConst362KI + 53.53615f /* Sum */); // step: 2768
		fConst391KI = (2.0f * (53.53615f + -fConst362KI /* Sum */)); // step: 2772
		fConst392KI = tanf((311.68546f / fConst0KI)); // step: 2780
		fConst393KI = (1.0f / fConst392KI); // step: 2781
		fConst394KI = (1.0f / (((fConst393KI + 3.1897273f /* Sum */) / fConst392KI) + 4.0767817f /* Sum */)); // step: 2785
		fConst395KI = (((fConst393KI + -3.1897273f /* Sum */) / fConst392KI) + 4.0767817f /* Sum */); // step: 2788
		fConst396KI = powf(fConst392KI,2.0f); // step: 2791
		fConst397KI = (1.0f / fConst396KI); // step: 2792
		fConst398KI = (2.0f * (4.0767817f + -fConst397KI /* Sum */)); // step: 2795
		fConst399KI = (0.0017661728f / fConst396KI); // step: 2805
		fConst400KI = (fConst399KI + 0.0004076782f /* Sum */); // step: 2806
		fConst401KI = (2.0f * (0.0004076782f + -fConst399KI /* Sum */)); // step: 2811
		fConst402KI = (1.0f / (((fConst393KI + 0.74313045f /* Sum */) / fConst392KI) + 1.4500711f /* Sum */)); // step: 2820
		fConst403KI = (((fConst393KI + -0.74313045f /* Sum */) / fConst392KI) + 1.4500711f /* Sum */); // step: 2823
		fConst404KI = (2.0f * (1.4500711f + -fConst397KI /* Sum */)); // step: 2827
		fConst405KI = (11.0520525f / fConst396KI); // step: 2837
		fConst406KI = (fConst405KI + 1.4500711f /* Sum */); // step: 2838
		fConst407KI = (2.0f * (1.4500711f + -fConst405KI /* Sum */)); // step: 2843
		fConst408KI = (1.0f / (((fConst393KI + 0.15748216f /* Sum */) / fConst392KI) + 0.9351402f /* Sum */)); // step: 2852
		fConst409KI = (((fConst393KI + -0.15748216f /* Sum */) / fConst392KI) + 0.9351402f /* Sum */); // step: 2855
		fConst410KI = (2.0f * (0.9351402f + -fConst397KI /* Sum */)); // step: 2859
		fConst411KI = (1.0f / (((fConst393KI + 0.78241307f /* Sum */) / fConst392KI) + 0.2452915f /* Sum */)); // step: 2872
		fConst412KI = (((fConst393KI + -0.78241307f /* Sum */) / fConst392KI) + 0.2452915f /* Sum */); // step: 2875
		fConst413KI = (2.0f * (0.2452915f + -fConst397KI /* Sum */)); // step: 2879
		fConst414KI = (0.0001f / fConst396KI); // step: 2889
		fConst415KI = (fConst414KI + 0.0004332272f /* Sum */); // step: 2890
		fConst416KI = (2.0f * (0.0004332272f + -fConst414KI /* Sum */)); // step: 2895
		fConst417KI = (1.0f / (((fConst393KI + 0.51247865f /* Sum */) / fConst392KI) + 0.6896214f /* Sum */)); // step: 2904
		fConst418KI = (((fConst393KI + -0.51247865f /* Sum */) / fConst392KI) + 0.6896214f /* Sum */); // step: 2907
		fConst419KI = (2.0f * (0.6896214f + -fConst397KI /* Sum */)); // step: 2911
		fConst420KI = (fConst397KI + 7.6217313f /* Sum */); // step: 2921
		fConst421KI = (2.0f * (7.6217313f + -fConst397KI /* Sum */)); // step: 2925
		fConst422KI = (1.0f / (((fConst393KI + 0.16840488f /* Sum */) / fConst392KI) + 1.0693583f /* Sum */)); // step: 2934
		fConst423KI = (((fConst393KI + -0.16840488f /* Sum */) / fConst392KI) + 1.0693583f /* Sum */); // step: 2937
		fConst424KI = (2.0f * (1.0693583f + -fConst397KI /* Sum */)); // step: 2941
		fConst425KI = (fConst397KI + 53.53615f /* Sum */); // step: 2951
		fConst426KI = (2.0f * (53.53615f + -fConst397KI /* Sum */)); // step: 2955
		fConst427KI = tanf((196.34955f / fConst0KI)); // step: 2963
		fConst428KI = (1.0f / fConst427KI); // step: 2964
		fConst429KI = (1.0f / (((fConst428KI + 3.1897273f /* Sum */) / fConst427KI) + 4.0767817f /* Sum */)); // step: 2968
		fConst430KI = (((fConst428KI + -3.1897273f /* Sum */) / fConst427KI) + 4.0767817f /* Sum */); // step: 2971
		fConst431KI = powf(fConst427KI,2.0f); // step: 2974
		fConst432KI = (1.0f / fConst431KI); // step: 2975
		fConst433KI = (2.0f * (4.0767817f + -fConst432KI /* Sum */)); // step: 2978
		fConst434KI = (0.0017661728f / fConst431KI); // step: 2988
		fConst435KI = (fConst434KI + 0.0004076782f /* Sum */); // step: 2989
		fConst436KI = (2.0f * (0.0004076782f + -fConst434KI /* Sum */)); // step: 2994
		fConst437KI = (1.0f / (((fConst428KI + 0.74313045f /* Sum */) / fConst427KI) + 1.4500711f /* Sum */)); // step: 3003
		fConst438KI = (((fConst428KI + -0.74313045f /* Sum */) / fConst427KI) + 1.4500711f /* Sum */); // step: 3006
		fConst439KI = (2.0f * (1.4500711f + -fConst432KI /* Sum */)); // step: 3010
		fConst440KI = (11.0520525f / fConst431KI); // step: 3020
		fConst441KI = (fConst440KI + 1.4500711f /* Sum */); // step: 3021
		fConst442KI = (2.0f * (1.4500711f + -fConst440KI /* Sum */)); // step: 3026
		fConst443KI = (1.0f / (((fConst428KI + 0.15748216f /* Sum */) / fConst427KI) + 0.9351402f /* Sum */)); // step: 3035
		fConst444KI = (((fConst428KI + -0.15748216f /* Sum */) / fConst427KI) + 0.9351402f /* Sum */); // step: 3038
		fConst445KI = (2.0f * (0.9351402f + -fConst432KI /* Sum */)); // step: 3042
		fConst446KI = (1.0f / (((fConst428KI + 0.78241307f /* Sum */) / fConst427KI) + 0.2452915f /* Sum */)); // step: 3055
		fConst447KI = (((fConst428KI + -0.78241307f /* Sum */) / fConst427KI) + 0.2452915f /* Sum */); // step: 3058
		fConst448KI = (2.0f * (0.2452915f + -fConst432KI /* Sum */)); // step: 3062
		fConst449KI = (0.0001f / fConst431KI); // step: 3072
		fConst450KI = (fConst449KI + 0.0004332272f /* Sum */); // step: 3073
		fConst451KI = (2.0f * (0.0004332272f + -fConst449KI /* Sum */)); // step: 3078
		fConst452KI = (1.0f / (((fConst428KI + 0.51247865f /* Sum */) / fConst427KI) + 0.6896214f /* Sum */)); // step: 3087
		fConst453KI = (((fConst428KI + -0.51247865f /* Sum */) / fConst427KI) + 0.6896214f /* Sum */); // step: 3090
		fConst454KI = (2.0f * (0.6896214f + -fConst432KI /* Sum */)); // step: 3094
		fConst455KI = (fConst432KI + 7.6217313f /* Sum */); // step: 3104
		fConst456KI = (2.0f * (7.6217313f + -fConst432KI /* Sum */)); // step: 3108
		fConst457KI = (1.0f / (((fConst428KI + 0.16840488f /* Sum */) / fConst427KI) + 1.0693583f /* Sum */)); // step: 3117
		fConst458KI = (((fConst428KI + -0.16840488f /* Sum */) / fConst427KI) + 1.0693583f /* Sum */); // step: 3120
		fConst459KI = (2.0f * (1.0693583f + -fConst432KI /* Sum */)); // step: 3124
		fConst460KI = (fConst432KI + 53.53615f /* Sum */); // step: 3134
		fConst461KI = (2.0f * (53.53615f + -fConst432KI /* Sum */)); // step: 3138
		fConst462KI = tanf((123.69246f / fConst0KI)); // step: 3146
		fConst463KI = (1.0f / fConst462KI); // step: 3147
		fConst464KI = (1.0f / (((fConst463KI + 3.1897273f /* Sum */) / fConst462KI) + 4.0767817f /* Sum */)); // step: 3151
		fConst465KI = (((fConst463KI + -3.1897273f /* Sum */) / fConst462KI) + 4.0767817f /* Sum */); // step: 3154
		fConst466KI = powf(fConst462KI,2.0f); // step: 3157
		fConst467KI = (1.0f / fConst466KI); // step: 3158
		fConst468KI = (2.0f * (4.0767817f + -fConst467KI /* Sum */)); // step: 3161
		fConst469KI = (0.0017661728f / fConst466KI); // step: 3171
		fConst470KI = (fConst469KI + 0.0004076782f /* Sum */); // step: 3172
		fConst471KI = (2.0f * (0.0004076782f + -fConst469KI /* Sum */)); // step: 3177
		fConst472KI = (1.0f / (((fConst463KI + 0.74313045f /* Sum */) / fConst462KI) + 1.4500711f /* Sum */)); // step: 3186
		fConst473KI = (((fConst463KI + -0.74313045f /* Sum */) / fConst462KI) + 1.4500711f /* Sum */); // step: 3189
		fConst474KI = (2.0f * (1.4500711f + -fConst467KI /* Sum */)); // step: 3193
		fConst475KI = (11.0520525f / fConst466KI); // step: 3203
		fConst476KI = (fConst475KI + 1.4500711f /* Sum */); // step: 3204
		fConst477KI = (2.0f * (1.4500711f + -fConst475KI /* Sum */)); // step: 3209
		fConst478KI = (1.0f / (((fConst463KI + 0.15748216f /* Sum */) / fConst462KI) + 0.9351402f /* Sum */)); // step: 3218
		fConst479KI = (((fConst463KI + -0.15748216f /* Sum */) / fConst462KI) + 0.9351402f /* Sum */); // step: 3221
		fConst480KI = (2.0f * (0.9351402f + -fConst467KI /* Sum */)); // step: 3225
		fConst481KI = (1.0f / (((fConst463KI + 0.78241307f /* Sum */) / fConst462KI) + 0.2452915f /* Sum */)); // step: 3238
		fConst482KI = (((fConst463KI + -0.78241307f /* Sum */) / fConst462KI) + 0.2452915f /* Sum */); // step: 3241
		fConst483KI = (2.0f * (0.2452915f + -fConst467KI /* Sum */)); // step: 3245
		fConst484KI = (0.0001f / fConst466KI); // step: 3255
		fConst485KI = (fConst484KI + 0.0004332272f /* Sum */); // step: 3256
		fConst486KI = (2.0f * (0.0004332272f + -fConst484KI /* Sum */)); // step: 3261
		fConst487KI = (1.0f / (((fConst463KI + 0.51247865f /* Sum */) / fConst462KI) + 0.6896214f /* Sum */)); // step: 3270
		fConst488KI = (((fConst463KI + -0.51247865f /* Sum */) / fConst462KI) + 0.6896214f /* Sum */); // step: 3273
		fConst489KI = (2.0f * (0.6896214f + -fConst467KI /* Sum */)); // step: 3277
		fConst490KI = (fConst467KI + 7.6217313f /* Sum */); // step: 3287
		fConst491KI = (2.0f * (7.6217313f + -fConst467KI /* Sum */)); // step: 3291
		fConst492KI = (1.0f / (((fConst463KI + 0.16840488f /* Sum */) / fConst462KI) + 1.0693583f /* Sum */)); // step: 3300
		fConst493KI = (((fConst463KI + -0.16840488f /* Sum */) / fConst462KI) + 1.0693583f /* Sum */); // step: 3303
		fConst494KI = (2.0f * (1.0693583f + -fConst467KI /* Sum */)); // step: 3307
		fConst495KI = (1e+03f / fConst0KI); // step: 3322
		fConst496KI = (50.06381f / fConst11KI); // step: 3331
		fConst497KI = (fConst496KI + 0.9351402f /* Sum */); // step: 3332
		fConst498KI = (2.0f * (0.9351402f + -fConst496KI /* Sum */)); // step: 3337
		fConst499KI = (50.06381f / fConst46KI); // step: 3360
		fConst500KI = (fConst499KI + 0.9351402f /* Sum */); // step: 3361
		fConst501KI = (2.0f * (0.9351402f + -fConst499KI /* Sum */)); // step: 3366
		fConst502KI = (50.06381f / fConst81KI); // step: 3385
		fConst503KI = (fConst502KI + 0.9351402f /* Sum */); // step: 3386
		fConst504KI = (2.0f * (0.9351402f + -fConst502KI /* Sum */)); // step: 3391
		fConst505KI = (50.06381f / fConst116KI); // step: 3410
		fConst506KI = (fConst505KI + 0.9351402f /* Sum */); // step: 3411
		fConst507KI = (2.0f * (0.9351402f + -fConst505KI /* Sum */)); // step: 3416
		fConst508KI = (50.06381f / fConst151KI); // step: 3435
		fConst509KI = (fConst508KI + 0.9351402f /* Sum */); // step: 3436
		fConst510KI = (2.0f * (0.9351402f + -fConst508KI /* Sum */)); // step: 3441
		fConst511KI = (50.06381f / fConst186KI); // step: 3460
		fConst512KI = (fConst511KI + 0.9351402f /* Sum */); // step: 3461
		fConst513KI = (2.0f * (0.9351402f + -fConst511KI /* Sum */)); // step: 3466
		fConst514KI = (50.06381f / fConst221KI); // step: 3485
		fConst515KI = (fConst514KI + 0.9351402f /* Sum */); // step: 3486
		fConst516KI = (2.0f * (0.9351402f + -fConst514KI /* Sum */)); // step: 3491
		fConst517KI = (50.06381f / fConst256KI); // step: 3510
		fConst518KI = (fConst517KI + 0.9351402f /* Sum */); // step: 3511
		fConst519KI = (2.0f * (0.9351402f + -fConst517KI /* Sum */)); // step: 3516
		fConst520KI = (50.06381f / fConst291KI); // step: 3535
		fConst521KI = (fConst520KI + 0.9351402f /* Sum */); // step: 3536
		fConst522KI = (2.0f * (0.9351402f + -fConst520KI /* Sum */)); // step: 3541
		fConst523KI = (50.06381f / fConst326KI); // step: 3560
		fConst524KI = (fConst523KI + 0.9351402f /* Sum */); // step: 3561
		fConst525KI = (2.0f * (0.9351402f + -fConst523KI /* Sum */)); // step: 3566
		fConst526KI = (50.06381f / fConst361KI); // step: 3585
		fConst527KI = (fConst526KI + 0.9351402f /* Sum */); // step: 3586
		fConst528KI = (2.0f * (0.9351402f + -fConst526KI /* Sum */)); // step: 3591
		fConst529KI = (50.06381f / fConst396KI); // step: 3610
		fConst530KI = (fConst529KI + 0.9351402f /* Sum */); // step: 3611
		fConst531KI = (2.0f * (0.9351402f + -fConst529KI /* Sum */)); // step: 3616
		fConst532KI = (50.06381f / fConst431KI); // step: 3635
		fConst533KI = (fConst532KI + 0.9351402f /* Sum */); // step: 3636
		fConst534KI = (2.0f * (0.9351402f + -fConst532KI /* Sum */)); // step: 3641
		fConst535KI = (50.06381f / fConst466KI); // step: 3660
		fConst536KI = (fConst535KI + 0.9351402f /* Sum */); // step: 3661
		fConst537KI = (2.0f * (0.9351402f + -fConst535KI /* Sum */)); // step: 3666
		fConst538KI = (fConst467KI + 53.53615f /* Sum */); // step: 3685
		fConst539KI = (2.0f * (53.53615f + -fConst467KI /* Sum */)); // step: 3689
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.1f;
		fslider1 = 49.0f;
		fslider2 = -0.1f;
		fslider3 = 0.1f;
		fcheckbox0 = 0.0;
		fslider4 = -2e+01f;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fentry0 = 2.0f;
		fcheckbox3 = 0.0;
		fslider5 = 1e+02f;
		fslider6 = -0.5f;
		fslider7 = 5e+03f;
		fslider8 = 5e+01f;
		fslider9 = 1e+02f;
	}
	virtual void instanceClear() {
		for (int j = 0; j < 3; j++) { iVec0KCState[j] = 0; }
		fVec2SEState = 0;
		fVec1SEState = 0;
		fVec5SEState = 0;
		fVec6SEState = 0;
		fVec7SEState = 0;
		fVec9SEState = 0;
		fVec10SEState = 0;
		fVec12SEState = 0;
		fVec14SEState = 0;
		fVec15SEState = 0;
		fVec17SEState = 0;
		fVec18SEState = 0;
		fVec19SEState = 0;
		fVec21SEState = 0;
		fVec22SEState = 0;
		fVec24SEState = 0;
		fVec26SEState = 0;
		fVec27SEState = 0;
		fVec29SEState = 0;
		fVec30SEState = 0;
		fVec31SEState = 0;
		fVec33SEState = 0;
		fVec34SEState = 0;
		fVec36SEState = 0;
		fVec38SEState = 0;
		iVec39SIState = 0;
		fVec42SIState = 0;
		for (int j = 0; j < 3; j++) { fVec41SIState[j] = 0; }
		fVec45SEState = 0;
		fVec64SEState = 0;
		fVec65SEState = 0;
		fVec68SEState = 0;
		fVec69SEState = 0;
		fVec72SEState = 0;
		fVec73SEState = 0;
		fVec76SEState = 0;
		fVec77SEState = 0;
		fVec80SEState = 0;
		fVec81SEState = 0;
		fVec84SEState = 0;
		fVec85SEState = 0;
		fVec88SEState = 0;
		fVec89SEState = 0;
		fVec92SEState = 0;
		fVec93SEState = 0;
		fVec96SEState = 0;
		fVec97SEState = 0;
		fVec100SEState = 0;
		fVec101SEState = 0;
		fVec105SEState = 0;
		for (int j = 0; j < 2; j++) { fVec104SEState[j] = 0; }
		fVec110SEState = 0;
		for (int j = 0; j < 2; j++) { fVec109SEState[j] = 0; }
		fVec115SEState = 0;
		for (int j = 0; j < 2; j++) { fVec114SEState[j] = 0; }
		fVec118SEState = 0;
		for (int j = 0; j < 2; j++) { fVec117SEState[j] = 0; }
		fVec123SEState = 0;
		for (int j = 0; j < 2; j++) { fVec122SEState[j] = 0; }
		fVec128SEState = 0;
		for (int j = 0; j < 2; j++) { fVec127SEState[j] = 0; }
		fVec133SEState = 0;
		for (int j = 0; j < 2; j++) { fVec132SEState[j] = 0; }
		fVec138SEState = 0;
		for (int j = 0; j < 2; j++) { fVec137SEState[j] = 0; }
		fVec143SEState = 0;
		for (int j = 0; j < 2; j++) { fVec142SEState[j] = 0; }
		fVec146SEState = 0;
		for (int j = 0; j < 2; j++) { fVec145SEState[j] = 0; }
		fVec151SEState = 0;
		for (int j = 0; j < 2; j++) { fVec150SEState[j] = 0; }
		fVec156SEState = 0;
		for (int j = 0; j < 2; j++) { fVec155SEState[j] = 0; }
		fVec161SEState = 0;
		for (int j = 0; j < 2; j++) { fVec160SEState[j] = 0; }
		fVec166SEState = 0;
		for (int j = 0; j < 2; j++) { fVec165SEState[j] = 0; }
		fVec171SEState = 0;
		for (int j = 0; j < 2; j++) { fVec170SEState[j] = 0; }
		fVec174SEState = 0;
		for (int j = 0; j < 2; j++) { fVec173SEState[j] = 0; }
		fVec179SEState = 0;
		for (int j = 0; j < 2; j++) { fVec178SEState[j] = 0; }
		fVec184SEState = 0;
		for (int j = 0; j < 2; j++) { fVec183SEState[j] = 0; }
		fVec189SEState = 0;
		for (int j = 0; j < 2; j++) { fVec188SEState[j] = 0; }
		fVec194SEState = 0;
		for (int j = 0; j < 2; j++) { fVec193SEState[j] = 0; }
		fVec199SEState = 0;
		for (int j = 0; j < 2; j++) { fVec198SEState[j] = 0; }
		fVec202SEState = 0;
		for (int j = 0; j < 2; j++) { fVec201SEState[j] = 0; }
		fVec207SEState = 0;
		for (int j = 0; j < 2; j++) { fVec206SEState[j] = 0; }
		fVec212SEState = 0;
		for (int j = 0; j < 2; j++) { fVec211SEState[j] = 0; }
		fVec217SEState = 0;
		for (int j = 0; j < 2; j++) { fVec216SEState[j] = 0; }
		fVec222SEState = 0;
		for (int j = 0; j < 2; j++) { fVec221SEState[j] = 0; }
		fVec227SEState = 0;
		for (int j = 0; j < 2; j++) { fVec226SEState[j] = 0; }
		fVec230SEState = 0;
		for (int j = 0; j < 2; j++) { fVec229SEState[j] = 0; }
		fVec235SEState = 0;
		for (int j = 0; j < 2; j++) { fVec234SEState[j] = 0; }
		fVec240SEState = 0;
		for (int j = 0; j < 2; j++) { fVec239SEState[j] = 0; }
		fVec245SEState = 0;
		for (int j = 0; j < 2; j++) { fVec244SEState[j] = 0; }
		fVec250SEState = 0;
		for (int j = 0; j < 2; j++) { fVec249SEState[j] = 0; }
		fVec255SEState = 0;
		for (int j = 0; j < 2; j++) { fVec254SEState[j] = 0; }
		fVec258SEState = 0;
		for (int j = 0; j < 2; j++) { fVec257SEState[j] = 0; }
		fVec263SEState = 0;
		for (int j = 0; j < 2; j++) { fVec262SEState[j] = 0; }
		fVec268SEState = 0;
		for (int j = 0; j < 2; j++) { fVec267SEState[j] = 0; }
		fVec273SEState = 0;
		for (int j = 0; j < 2; j++) { fVec272SEState[j] = 0; }
		fVec278SEState = 0;
		for (int j = 0; j < 2; j++) { fVec277SEState[j] = 0; }
		fVec283SEState = 0;
		for (int j = 0; j < 2; j++) { fVec282SEState[j] = 0; }
		fVec286SEState = 0;
		for (int j = 0; j < 2; j++) { fVec285SEState[j] = 0; }
		fVec291SEState = 0;
		for (int j = 0; j < 2; j++) { fVec290SEState[j] = 0; }
		fVec296SEState = 0;
		for (int j = 0; j < 2; j++) { fVec295SEState[j] = 0; }
		fVec301SEState = 0;
		for (int j = 0; j < 2; j++) { fVec300SEState[j] = 0; }
		fVec306SEState = 0;
		for (int j = 0; j < 2; j++) { fVec305SEState[j] = 0; }
		fVec311SEState = 0;
		for (int j = 0; j < 2; j++) { fVec310SEState[j] = 0; }
		fVec314SEState = 0;
		for (int j = 0; j < 2; j++) { fVec313SEState[j] = 0; }
		fVec319SEState = 0;
		for (int j = 0; j < 2; j++) { fVec318SEState[j] = 0; }
		fVec324SEState = 0;
		for (int j = 0; j < 2; j++) { fVec323SEState[j] = 0; }
		fVec329SEState = 0;
		for (int j = 0; j < 2; j++) { fVec328SEState[j] = 0; }
		fVec334SEState = 0;
		for (int j = 0; j < 2; j++) { fVec333SEState[j] = 0; }
		fVec339SEState = 0;
		for (int j = 0; j < 2; j++) { fVec338SEState[j] = 0; }
		fVec342SEState = 0;
		for (int j = 0; j < 2; j++) { fVec341SEState[j] = 0; }
		fVec347SEState = 0;
		for (int j = 0; j < 2; j++) { fVec346SEState[j] = 0; }
		fVec352SEState = 0;
		for (int j = 0; j < 2; j++) { fVec351SEState[j] = 0; }
		fVec357SEState = 0;
		for (int j = 0; j < 2; j++) { fVec356SEState[j] = 0; }
		fVec362SEState = 0;
		for (int j = 0; j < 2; j++) { fVec361SEState[j] = 0; }
		fVec367SEState = 0;
		for (int j = 0; j < 2; j++) { fVec366SEState[j] = 0; }
		fVec370SEState = 0;
		for (int j = 0; j < 2; j++) { fVec369SEState[j] = 0; }
		fVec375SEState = 0;
		for (int j = 0; j < 2; j++) { fVec374SEState[j] = 0; }
		fVec380SEState = 0;
		for (int j = 0; j < 2; j++) { fVec379SEState[j] = 0; }
		fVec385SEState = 0;
		for (int j = 0; j < 2; j++) { fVec384SEState[j] = 0; }
		fVec390SEState = 0;
		for (int j = 0; j < 2; j++) { fVec389SEState[j] = 0; }
		fVec395SEState = 0;
		for (int j = 0; j < 2; j++) { fVec394SEState[j] = 0; }
		fVec398SEState = 0;
		for (int j = 0; j < 2; j++) { fVec397SEState[j] = 0; }
		fVec403SEState = 0;
		for (int j = 0; j < 2; j++) { fVec402SEState[j] = 0; }
		fVec408SEState = 0;
		for (int j = 0; j < 2; j++) { fVec407SEState[j] = 0; }
		fVec413SEState = 0;
		for (int j = 0; j < 2; j++) { fVec412SEState[j] = 0; }
		fVec418SEState = 0;
		for (int j = 0; j < 2; j++) { fVec417SEState[j] = 0; }
		fVec423SEState = 0;
		for (int j = 0; j < 2; j++) { fVec422SEState[j] = 0; }
		fVec426SEState = 0;
		for (int j = 0; j < 2; j++) { fVec425SEState[j] = 0; }
		fVec431SEState = 0;
		for (int j = 0; j < 2; j++) { fVec430SEState[j] = 0; }
		fVec436SEState = 0;
		for (int j = 0; j < 2; j++) { fVec435SEState[j] = 0; }
		fVec441SEState = 0;
		for (int j = 0; j < 2; j++) { fVec440SEState[j] = 0; }
		fVec446SEState = 0;
		for (int j = 0; j < 2; j++) { fVec445SEState[j] = 0; }
		fVec451SEState = 0;
		for (int j = 0; j < 2; j++) { fVec450SEState[j] = 0; }
		fVec454SEState = 0;
		for (int j = 0; j < 2; j++) { fVec453SEState[j] = 0; }
		fVec459SEState = 0;
		for (int j = 0; j < 2; j++) { fVec458SEState[j] = 0; }
		fVec464SEState = 0;
		for (int j = 0; j < 2; j++) { fVec463SEState[j] = 0; }
		fVec469SEState = 0;
		for (int j = 0; j < 2; j++) { fVec468SEState[j] = 0; }
		fVec474SEState = 0;
		for (int j = 0; j < 2; j++) { fVec473SEState[j] = 0; }
		fVec479SEState = 0;
		for (int j = 0; j < 2; j++) { fVec478SEState[j] = 0; }
		fVec482SEState = 0;
		for (int j = 0; j < 2; j++) { fVec481SEState[j] = 0; }
		fVec487SEState = 0;
		for (int j = 0; j < 2; j++) { fVec486SEState[j] = 0; }
		fVec492SEState = 0;
		for (int j = 0; j < 2; j++) { fVec491SEState[j] = 0; }
		fVec494SEState = 0;
		fVec498SEState = 0;
		fVec502SEState = 0;
		fVec506SEState = 0;
		fVec510SEState = 0;
		fVec514SEState = 0;
		fVec518SEState = 0;
		fVec522SEState = 0;
		fVec526SEState = 0;
		fVec530SEState = 0;
		fVec534SEState = 0;
		fVec538SEState = 0;
		fVec542SEState = 0;
		fVec546SEState = 0;
		fVec550SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("spectral_tilt");
		ui_interface->declare(0, "1", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for spectral_tilt_demo");
		ui_interface->openVerticalBox("Spectral Tilt Filter");
		ui_interface->declare(&fslider6, "1", "");
		ui_interface->addHorizontalSlider("Slope of Spectral Tilt across Band", &fslider6, -0.5f, -1.0f, 1.0f, 0.001f);
		ui_interface->declare(0, "1", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for spectral_tilt_demo");
		ui_interface->openVerticalBox("Spectral Tilt Filter");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->addCheckButton("Bypass Spectral Tilt", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->declare(&fslider5, "2", "");
		ui_interface->declare(&fslider5, "unit", "Hz");
		ui_interface->addHorizontalSlider("Band Start Frequency", &fslider5, 1e+02f, 2e+01f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider7, "3", "");
		ui_interface->declare(&fslider7, "unit", "Hz");
		ui_interface->addHorizontalSlider("Band Width", &fslider7, 5e+03f, 1e+02f, 1e+04f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for sawtooth_demo");
		ui_interface->openVerticalBox("Test Signal");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillator.lib for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider4, -2e+01f, -1.2e+02f, 1e+01f, 0.1f);
		ui_interface->declare(&fslider1, "2", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->declare(&fslider1, "tooltip", "Sawtooth frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider1, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider1, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider2, "3", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Percentage frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider2, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider2, -0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider3, "4", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Percentage frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider3, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider3, 0.1f, -1e+01f, 1e+01f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "scale", "log");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider0, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider0, 0.1f, 0.001f, 1e+01f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox2, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on the left)", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "1", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox3);
		ui_interface->declare(&fcheckbox1, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise selection above)", &fcheckbox1);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for spectral_level_demo");
		ui_interface->openVerticalBox("Spectrum Analyzer");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filter.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph0", &fbargraph14, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph1", &fbargraph13, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph2", &fbargraph12, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph3", &fbargraph11, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph4", &fbargraph10, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph5", &fbargraph9, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph6", &fbargraph8, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph7", &fbargraph7, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph8", &fbargraph6, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph9", &fbargraph5, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph10", &fbargraph4, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph11", &fbargraph3, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph12", &fbargraph2, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph13", &fbargraph1, -5e+01f, 1e+01f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("vbargraph14", &fbargraph0, -5e+01f, 1e+01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider9, "0", "");
		ui_interface->declare(&fslider9, "scale", "log");
		ui_interface->declare(&fslider9, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider9, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider9, 1e+02f, 1.0f, 1e+04f, 1.0f);
		ui_interface->declare(&fslider8, "1", "");
		ui_interface->declare(&fslider8, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider8, 5e+01f, 0.0f, 1e+02f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[4];
		float 	fTemp0SE; // step: 7
		float 	fSlow0BE = expf(-(fConst1KI / float(fslider0))); // Zone 2, step: 23
		float 	fSlow1BE = (4.4e+02f * (powf(2.0f,(0.083333336f * (float(fslider1) + -49.0f /* Sum */))) * (1.0f + -fSlow0BE /* Sum */))); // Zone 2, step: 40
		float 	fVec2SE[2];
		float 	fTemp1SE; // step: 43
		float 	fTemp2SE; // step: 45
		float 	fTemp3SE; // step: 46
		float 	fVec1SE[2];
		float 	fTemp4SE; // step: 52
		float 	fTemp5SE; // step: 53
		float 	fTemp6SE; // step: 54
		float 	fTemp7SE; // step: 55
		float 	fVec5SE[2];
		float 	fTemp8SE; // step: 58
		float 	fTemp9SE; // step: 60
		float 	fVec6SE[2];
		float 	fVec7SE[2];
		float 	fVec9SE[2];
		float 	fTemp10SE; // step: 72
		float 	fVec10SE[2];
		float 	fTemp11SE; // step: 77
		float 	fVec12SE[2];
		float 	fTemp12SE; // step: 82
		float 	fVec14SE[2];
		float 	fTemp13SE; // step: 85
		float 	fSlow2BE = ((0.01f * float(fslider2)) + 1.0f /* Sum */); // Zone 2, step: 90
		float 	fTemp14SE; // step: 93
		float 	fTemp15SE; // step: 94
		float 	fVec15SE[2];
		float 	fTemp16SE; // step: 100
		float 	fTemp17SE; // step: 101
		float 	fTemp18SE; // step: 102
		float 	fTemp19SE; // step: 103
		float 	fVec17SE[2];
		float 	fTemp20SE; // step: 105
		float 	fTemp21SE; // step: 106
		float 	fVec18SE[2];
		float 	fVec19SE[2];
		float 	fVec21SE[2];
		float 	fTemp22SE; // step: 118
		float 	fVec22SE[2];
		float 	fTemp23SE; // step: 123
		float 	fVec24SE[2];
		float 	fTemp24SE; // step: 128
		float 	fVec26SE[2];
		float 	fTemp25SE; // step: 131
		float 	fSlow3BE = ((0.01f * float(fslider3)) + 1.0f /* Sum */); // Zone 2, step: 134
		float 	fTemp26SE; // step: 137
		float 	fTemp27SE; // step: 138
		float 	fVec27SE[2];
		float 	fTemp28SE; // step: 144
		float 	fTemp29SE; // step: 145
		float 	fTemp30SE; // step: 146
		float 	fTemp31SE; // step: 147
		float 	fVec29SE[2];
		float 	fTemp32SE; // step: 149
		float 	fTemp33SE; // step: 150
		float 	fVec30SE[2];
		float 	fVec31SE[2];
		float 	fVec33SE[2];
		float 	fTemp34SE; // step: 162
		float 	fVec34SE[2];
		float 	fTemp35SE; // step: 167
		float 	fVec36SE[2];
		float 	fTemp36SE; // step: 172
		float 	fVec38SE[2];
		int 	iVec39SI[2];
		float 	fTemp37SI; // step: 184
		float 	fTemp38SI; // step: 187
		float 	fTemp39SI; // step: 195
		float 	fVec42SI[2];
		float 	fTemp40SI; // step: 199
		float 	fVec41SI[4];
		int 	iSlow4BE = int(float(fcheckbox0)); // Zone 2, step: 202
		float 	fSlow5BE = (0.001f * powf(1e+01f,(0.05f * float(fslider4)))); // Zone 2, step: 210
		float 	fVec45SE[2];
		float 	fTemp41SE; // step: 217
		int 	iSlow6BE = int(float(fcheckbox1)); // Zone 2, step: 221
		int 	iSlow7BE = int(float(fcheckbox2)); // Zone 2, step: 223
		int 	iSlow8BE = int((float(fentry0) + -1.0f /* Sum */)); // Zone 2, step: 228
		int 	iSlow9BE = (iSlow8BE >= 2); // Zone 2, step: 229
		int 	iSlow10BE = (iSlow8BE >= 1); // Zone 2, step: 230
		float 	fTemp42SC; // step: 234
		int 	iSlow11BE = (iSlow8BE >= 3); // Zone 2, step: 242
		float 	fTemp43SC; // step: 247
		float 	fTemp44SC; // step: 262
		int 	iSlow12BE = int(float(fcheckbox3)); // Zone 2, step: 325
		float 	fTemp45SE; // step: 340
		float 	fTemp46SE; // step: 341
		float 	fVec64SE[2];
		float 	fSlow13BE = float(fslider5); // Zone 2, step: 346
		float 	fSlow14BE = (6.2831855f * fSlow13BE); // Zone 2, step: 347
		float 	fSlow15BE = (1.0f / (fConst5KI + fSlow14BE /* Sum */)); // Zone 2, step: 353
		float 	fSlow16BE = (fSlow14BE + -fConst5KI /* Sum */); // Zone 2, step: 355
		float 	fSlow17BE = tanf((fConst6KI * fSlow13BE)); // Zone 2, step: 362
		float 	fSlow18BE = float(fslider6); // Zone 2, step: 364
		float 	fSlow19BE = powf(((fSlow13BE + float(fslider7) /* Sum */) / fSlow13BE),0.11111111f); // Zone 2, step: 371
		float 	fSlow20BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,-fSlow18BE)))); // Zone 2, step: 375
		float 	fSlow21BE = (6.2831855f * ((fSlow13BE * fSlow20BE) / fSlow17BE)); // Zone 2, step: 378
		float 	fSlow22BE = (fConst5KI + fSlow21BE /* Sum */); // Zone 2, step: 379
		float 	fSlow23BE = (fSlow21BE + -fConst5KI /* Sum */); // Zone 2, step: 383
		float 	fVec65SE[2];
		float 	fTemp47SE; // step: 390
		float 	fSlow24BE = (fSlow17BE / fSlow20BE); // Zone 2, step: 391
		float 	fVec68SE[2];
		float 	fSlow25BE = tanf((fConst6KI * (fSlow13BE * fSlow19BE))); // Zone 2, step: 396
		float 	fSlow26BE = (6.2831855f * ((fSlow13BE * fSlow25BE) / fSlow17BE)); // Zone 2, step: 399
		float 	fSlow27BE = (1.0f / (fConst5KI + fSlow26BE /* Sum */)); // Zone 2, step: 401
		float 	fSlow28BE = (fSlow26BE + -fConst5KI /* Sum */); // Zone 2, step: 402
		float 	fSlow29BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(1.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 410
		float 	fSlow30BE = (6.2831855f * ((fSlow13BE * fSlow29BE) / fSlow17BE)); // Zone 2, step: 413
		float 	fSlow31BE = ((fSlow17BE * (fConst5KI + fSlow30BE /* Sum */)) / fSlow20BE); // Zone 2, step: 416
		float 	fSlow32BE = (fSlow30BE + -fConst5KI /* Sum */); // Zone 2, step: 419
		float 	fVec69SE[2];
		float 	fTemp48SE; // step: 427
		float 	fSlow33BE = (fSlow25BE / fSlow29BE); // Zone 2, step: 428
		float 	fVec72SE[2];
		float 	fSlow34BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,2.0f)))); // Zone 2, step: 434
		float 	fSlow35BE = (6.2831855f * ((fSlow13BE * fSlow34BE) / fSlow17BE)); // Zone 2, step: 437
		float 	fSlow36BE = (1.0f / (fConst5KI + fSlow35BE /* Sum */)); // Zone 2, step: 439
		float 	fSlow37BE = (fSlow35BE + -fConst5KI /* Sum */); // Zone 2, step: 440
		float 	fSlow38BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(2.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 448
		float 	fSlow39BE = (6.2831855f * ((fSlow13BE * fSlow38BE) / fSlow17BE)); // Zone 2, step: 451
		float 	fSlow40BE = ((fSlow25BE * (fConst5KI + fSlow39BE /* Sum */)) / fSlow29BE); // Zone 2, step: 454
		float 	fSlow41BE = (fSlow39BE + -fConst5KI /* Sum */); // Zone 2, step: 457
		float 	fVec73SE[2];
		float 	fTemp49SE; // step: 465
		float 	fSlow42BE = (fSlow34BE / fSlow38BE); // Zone 2, step: 466
		float 	fVec76SE[2];
		float 	fSlow43BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,3.0f)))); // Zone 2, step: 472
		float 	fSlow44BE = (6.2831855f * ((fSlow13BE * fSlow43BE) / fSlow17BE)); // Zone 2, step: 475
		float 	fSlow45BE = (1.0f / (fConst5KI + fSlow44BE /* Sum */)); // Zone 2, step: 477
		float 	fSlow46BE = (fSlow44BE + -fConst5KI /* Sum */); // Zone 2, step: 478
		float 	fSlow47BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(3.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 486
		float 	fSlow48BE = (6.2831855f * ((fSlow13BE * fSlow47BE) / fSlow17BE)); // Zone 2, step: 489
		float 	fSlow49BE = ((fSlow34BE * (fConst5KI + fSlow48BE /* Sum */)) / fSlow38BE); // Zone 2, step: 492
		float 	fSlow50BE = (fSlow48BE + -fConst5KI /* Sum */); // Zone 2, step: 495
		float 	fVec77SE[2];
		float 	fTemp50SE; // step: 503
		float 	fSlow51BE = (fSlow43BE / fSlow47BE); // Zone 2, step: 504
		float 	fVec80SE[2];
		float 	fSlow52BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,4.0f)))); // Zone 2, step: 510
		float 	fSlow53BE = (6.2831855f * ((fSlow13BE * fSlow52BE) / fSlow17BE)); // Zone 2, step: 513
		float 	fSlow54BE = (1.0f / (fConst5KI + fSlow53BE /* Sum */)); // Zone 2, step: 515
		float 	fSlow55BE = (fSlow53BE + -fConst5KI /* Sum */); // Zone 2, step: 516
		float 	fSlow56BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(4.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 524
		float 	fSlow57BE = (6.2831855f * ((fSlow13BE * fSlow56BE) / fSlow17BE)); // Zone 2, step: 527
		float 	fSlow58BE = ((fSlow43BE * (fConst5KI + fSlow57BE /* Sum */)) / fSlow47BE); // Zone 2, step: 530
		float 	fSlow59BE = (fSlow57BE + -fConst5KI /* Sum */); // Zone 2, step: 533
		float 	fVec81SE[2];
		float 	fTemp51SE; // step: 541
		float 	fSlow60BE = (fSlow52BE / fSlow56BE); // Zone 2, step: 542
		float 	fVec84SE[2];
		float 	fSlow61BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,5.0f)))); // Zone 2, step: 549
		float 	fSlow62BE = (6.2831855f * ((fSlow13BE * fSlow61BE) / fSlow17BE)); // Zone 2, step: 552
		float 	fSlow63BE = (1.0f / (fConst5KI + fSlow62BE /* Sum */)); // Zone 2, step: 554
		float 	fSlow64BE = (fSlow62BE + -fConst5KI /* Sum */); // Zone 2, step: 555
		float 	fSlow65BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(5.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 563
		float 	fSlow66BE = (6.2831855f * ((fSlow13BE * fSlow65BE) / fSlow17BE)); // Zone 2, step: 566
		float 	fSlow67BE = ((fSlow52BE * (fConst5KI + fSlow66BE /* Sum */)) / fSlow56BE); // Zone 2, step: 569
		float 	fSlow68BE = (fSlow66BE + -fConst5KI /* Sum */); // Zone 2, step: 572
		float 	fVec85SE[2];
		float 	fTemp52SE; // step: 580
		float 	fSlow69BE = (fSlow61BE / fSlow65BE); // Zone 2, step: 581
		float 	fVec88SE[2];
		float 	fSlow70BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,6.0f)))); // Zone 2, step: 588
		float 	fSlow71BE = (6.2831855f * ((fSlow13BE * fSlow70BE) / fSlow17BE)); // Zone 2, step: 591
		float 	fSlow72BE = (1.0f / (fConst5KI + fSlow71BE /* Sum */)); // Zone 2, step: 593
		float 	fSlow73BE = (fSlow71BE + -fConst5KI /* Sum */); // Zone 2, step: 594
		float 	fSlow74BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(6.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 602
		float 	fSlow75BE = (6.2831855f * ((fSlow13BE * fSlow74BE) / fSlow17BE)); // Zone 2, step: 605
		float 	fSlow76BE = ((fSlow61BE * (fConst5KI + fSlow75BE /* Sum */)) / fSlow65BE); // Zone 2, step: 608
		float 	fSlow77BE = (fSlow75BE + -fConst5KI /* Sum */); // Zone 2, step: 611
		float 	fVec89SE[2];
		float 	fTemp53SE; // step: 619
		float 	fSlow78BE = (fSlow70BE / fSlow74BE); // Zone 2, step: 620
		float 	fVec92SE[2];
		float 	fSlow79BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,7.0f)))); // Zone 2, step: 627
		float 	fSlow80BE = (6.2831855f * ((fSlow13BE * fSlow79BE) / fSlow17BE)); // Zone 2, step: 630
		float 	fSlow81BE = (1.0f / (fConst5KI + fSlow80BE /* Sum */)); // Zone 2, step: 632
		float 	fSlow82BE = (fSlow80BE + -fConst5KI /* Sum */); // Zone 2, step: 633
		float 	fSlow83BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(7.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 641
		float 	fSlow84BE = (6.2831855f * ((fSlow13BE * fSlow83BE) / fSlow17BE)); // Zone 2, step: 644
		float 	fSlow85BE = ((fSlow70BE * (fConst5KI + fSlow84BE /* Sum */)) / fSlow74BE); // Zone 2, step: 647
		float 	fSlow86BE = (fSlow84BE + -fConst5KI /* Sum */); // Zone 2, step: 650
		float 	fVec93SE[2];
		float 	fTemp54SE; // step: 658
		float 	fSlow87BE = (fSlow79BE / fSlow83BE); // Zone 2, step: 659
		float 	fVec96SE[2];
		float 	fSlow88BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,8.0f)))); // Zone 2, step: 666
		float 	fSlow89BE = (6.2831855f * ((fSlow13BE * fSlow88BE) / fSlow17BE)); // Zone 2, step: 669
		float 	fSlow90BE = (1.0f / (fConst5KI + fSlow89BE /* Sum */)); // Zone 2, step: 671
		float 	fSlow91BE = (fSlow89BE + -fConst5KI /* Sum */); // Zone 2, step: 672
		float 	fSlow92BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(8.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 680
		float 	fSlow93BE = (6.2831855f * ((fSlow13BE * fSlow92BE) / fSlow17BE)); // Zone 2, step: 683
		float 	fSlow94BE = ((fSlow79BE * (fConst5KI + fSlow93BE /* Sum */)) / fSlow83BE); // Zone 2, step: 686
		float 	fSlow95BE = (fSlow93BE + -fConst5KI /* Sum */); // Zone 2, step: 689
		float 	fVec97SE[2];
		float 	fTemp55SE; // step: 697
		float 	fSlow96BE = (fSlow88BE / fSlow92BE); // Zone 2, step: 698
		float 	fVec100SE[2];
		float 	fSlow97BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,9.0f)))); // Zone 2, step: 705
		float 	fSlow98BE = tanf((fConst6KI * (fSlow13BE * powf(fSlow19BE,(9.0f + -fSlow18BE /* Sum */))))); // Zone 2, step: 710
		float 	fSlow99BE = (fSlow97BE / fSlow98BE); // Zone 2, step: 711
		float 	fSlow100BE = (6.2831855f * ((fSlow13BE * fSlow97BE) / fSlow17BE)); // Zone 2, step: 714
		float 	fSlow101BE = (1.0f / (fConst5KI + fSlow100BE /* Sum */)); // Zone 2, step: 716
		float 	fSlow102BE = (fSlow100BE + -fConst5KI /* Sum */); // Zone 2, step: 717
		float 	fSlow103BE = (6.2831855f * ((fSlow13BE * fSlow98BE) / fSlow17BE)); // Zone 2, step: 723
		float 	fSlow104BE = ((fSlow88BE * (fConst5KI + fSlow103BE /* Sum */)) / fSlow92BE); // Zone 2, step: 726
		float 	fSlow105BE = (fSlow103BE + -fConst5KI /* Sum */); // Zone 2, step: 729
		float 	fVec101SE[2];
		float 	fTemp56SE; // step: 739
		float 	fTemp57SE; // step: 754
		float 	fVec105SE[2];
		float 	fTemp58SE; // step: 769
		float 	fVec104SE[3];
		float 	fTemp59SE; // step: 794
		float 	fVec110SE[2];
		float 	fTemp60SE; // step: 806
		float 	fVec109SE[3];
		float 	fTemp61SE; // step: 830
		float 	fVec115SE[2];
		float 	fTemp62SE; // step: 842
		float 	fVec114SE[3];
		float 	fTemp63SE; // step: 853
		float 	fVec118SE[2];
		float 	fTemp64SE; // step: 865
		float 	fVec117SE[3];
		float 	fTemp65SE; // step: 890
		float 	fVec123SE[2];
		float 	fTemp66SE; // step: 902
		float 	fVec122SE[3];
		float 	fTemp67SE; // step: 924
		float 	fVec128SE[2];
		float 	fTemp68SE; // step: 936
		float 	fVec127SE[3];
		float 	fTemp69SE; // step: 947
		float 	fTemp70SE; // step: 959
		float 	fVec133SE[2];
		float 	fTemp71SE; // step: 974
		float 	fVec132SE[3];
		float 	fTemp72SE; // step: 994
		float 	fVec138SE[2];
		float 	fTemp73SE; // step: 1006
		float 	fVec137SE[3];
		float 	fTemp74SE; // step: 1026
		float 	fVec143SE[2];
		float 	fTemp75SE; // step: 1038
		float 	fVec142SE[3];
		float 	fTemp76SE; // step: 1046
		float 	fVec146SE[2];
		float 	fTemp77SE; // step: 1058
		float 	fVec145SE[3];
		float 	fTemp78SE; // step: 1078
		float 	fVec151SE[2];
		float 	fTemp79SE; // step: 1090
		float 	fVec150SE[3];
		float 	fTemp80SE; // step: 1108
		float 	fVec156SE[2];
		float 	fTemp81SE; // step: 1120
		float 	fVec155SE[3];
		float 	fTemp82SE; // step: 1130
		float 	fTemp83SE; // step: 1142
		float 	fVec161SE[2];
		float 	fTemp84SE; // step: 1157
		float 	fVec160SE[3];
		float 	fTemp85SE; // step: 1177
		float 	fVec166SE[2];
		float 	fTemp86SE; // step: 1189
		float 	fVec165SE[3];
		float 	fTemp87SE; // step: 1209
		float 	fVec171SE[2];
		float 	fTemp88SE; // step: 1221
		float 	fVec170SE[3];
		float 	fTemp89SE; // step: 1229
		float 	fVec174SE[2];
		float 	fTemp90SE; // step: 1241
		float 	fVec173SE[3];
		float 	fTemp91SE; // step: 1261
		float 	fVec179SE[2];
		float 	fTemp92SE; // step: 1273
		float 	fVec178SE[3];
		float 	fTemp93SE; // step: 1291
		float 	fVec184SE[2];
		float 	fTemp94SE; // step: 1303
		float 	fVec183SE[3];
		float 	fTemp95SE; // step: 1313
		float 	fTemp96SE; // step: 1325
		float 	fVec189SE[2];
		float 	fTemp97SE; // step: 1340
		float 	fVec188SE[3];
		float 	fTemp98SE; // step: 1360
		float 	fVec194SE[2];
		float 	fTemp99SE; // step: 1372
		float 	fVec193SE[3];
		float 	fTemp100SE; // step: 1392
		float 	fVec199SE[2];
		float 	fTemp101SE; // step: 1404
		float 	fVec198SE[3];
		float 	fTemp102SE; // step: 1412
		float 	fVec202SE[2];
		float 	fTemp103SE; // step: 1424
		float 	fVec201SE[3];
		float 	fTemp104SE; // step: 1444
		float 	fVec207SE[2];
		float 	fTemp105SE; // step: 1456
		float 	fVec206SE[3];
		float 	fTemp106SE; // step: 1474
		float 	fVec212SE[2];
		float 	fTemp107SE; // step: 1486
		float 	fVec211SE[3];
		float 	fTemp108SE; // step: 1496
		float 	fTemp109SE; // step: 1508
		float 	fVec217SE[2];
		float 	fTemp110SE; // step: 1523
		float 	fVec216SE[3];
		float 	fTemp111SE; // step: 1543
		float 	fVec222SE[2];
		float 	fTemp112SE; // step: 1555
		float 	fVec221SE[3];
		float 	fTemp113SE; // step: 1575
		float 	fVec227SE[2];
		float 	fTemp114SE; // step: 1587
		float 	fVec226SE[3];
		float 	fTemp115SE; // step: 1595
		float 	fVec230SE[2];
		float 	fTemp116SE; // step: 1607
		float 	fVec229SE[3];
		float 	fTemp117SE; // step: 1627
		float 	fVec235SE[2];
		float 	fTemp118SE; // step: 1639
		float 	fVec234SE[3];
		float 	fTemp119SE; // step: 1657
		float 	fVec240SE[2];
		float 	fTemp120SE; // step: 1669
		float 	fVec239SE[3];
		float 	fTemp121SE; // step: 1679
		float 	fTemp122SE; // step: 1691
		float 	fVec245SE[2];
		float 	fTemp123SE; // step: 1706
		float 	fVec244SE[3];
		float 	fTemp124SE; // step: 1726
		float 	fVec250SE[2];
		float 	fTemp125SE; // step: 1738
		float 	fVec249SE[3];
		float 	fTemp126SE; // step: 1758
		float 	fVec255SE[2];
		float 	fTemp127SE; // step: 1770
		float 	fVec254SE[3];
		float 	fTemp128SE; // step: 1778
		float 	fVec258SE[2];
		float 	fTemp129SE; // step: 1790
		float 	fVec257SE[3];
		float 	fTemp130SE; // step: 1810
		float 	fVec263SE[2];
		float 	fTemp131SE; // step: 1822
		float 	fVec262SE[3];
		float 	fTemp132SE; // step: 1840
		float 	fVec268SE[2];
		float 	fTemp133SE; // step: 1852
		float 	fVec267SE[3];
		float 	fTemp134SE; // step: 1862
		float 	fTemp135SE; // step: 1874
		float 	fVec273SE[2];
		float 	fTemp136SE; // step: 1889
		float 	fVec272SE[3];
		float 	fTemp137SE; // step: 1909
		float 	fVec278SE[2];
		float 	fTemp138SE; // step: 1921
		float 	fVec277SE[3];
		float 	fTemp139SE; // step: 1941
		float 	fVec283SE[2];
		float 	fTemp140SE; // step: 1953
		float 	fVec282SE[3];
		float 	fTemp141SE; // step: 1961
		float 	fVec286SE[2];
		float 	fTemp142SE; // step: 1973
		float 	fVec285SE[3];
		float 	fTemp143SE; // step: 1993
		float 	fVec291SE[2];
		float 	fTemp144SE; // step: 2005
		float 	fVec290SE[3];
		float 	fTemp145SE; // step: 2023
		float 	fVec296SE[2];
		float 	fTemp146SE; // step: 2035
		float 	fVec295SE[3];
		float 	fTemp147SE; // step: 2045
		float 	fTemp148SE; // step: 2057
		float 	fVec301SE[2];
		float 	fTemp149SE; // step: 2072
		float 	fVec300SE[3];
		float 	fTemp150SE; // step: 2092
		float 	fVec306SE[2];
		float 	fTemp151SE; // step: 2104
		float 	fVec305SE[3];
		float 	fTemp152SE; // step: 2124
		float 	fVec311SE[2];
		float 	fTemp153SE; // step: 2136
		float 	fVec310SE[3];
		float 	fTemp154SE; // step: 2144
		float 	fVec314SE[2];
		float 	fTemp155SE; // step: 2156
		float 	fVec313SE[3];
		float 	fTemp156SE; // step: 2176
		float 	fVec319SE[2];
		float 	fTemp157SE; // step: 2188
		float 	fVec318SE[3];
		float 	fTemp158SE; // step: 2206
		float 	fVec324SE[2];
		float 	fTemp159SE; // step: 2218
		float 	fVec323SE[3];
		float 	fTemp160SE; // step: 2228
		float 	fTemp161SE; // step: 2240
		float 	fVec329SE[2];
		float 	fTemp162SE; // step: 2255
		float 	fVec328SE[3];
		float 	fTemp163SE; // step: 2275
		float 	fVec334SE[2];
		float 	fTemp164SE; // step: 2287
		float 	fVec333SE[3];
		float 	fTemp165SE; // step: 2307
		float 	fVec339SE[2];
		float 	fTemp166SE; // step: 2319
		float 	fVec338SE[3];
		float 	fTemp167SE; // step: 2327
		float 	fVec342SE[2];
		float 	fTemp168SE; // step: 2339
		float 	fVec341SE[3];
		float 	fTemp169SE; // step: 2359
		float 	fVec347SE[2];
		float 	fTemp170SE; // step: 2371
		float 	fVec346SE[3];
		float 	fTemp171SE; // step: 2389
		float 	fVec352SE[2];
		float 	fTemp172SE; // step: 2401
		float 	fVec351SE[3];
		float 	fTemp173SE; // step: 2411
		float 	fTemp174SE; // step: 2423
		float 	fVec357SE[2];
		float 	fTemp175SE; // step: 2438
		float 	fVec356SE[3];
		float 	fTemp176SE; // step: 2458
		float 	fVec362SE[2];
		float 	fTemp177SE; // step: 2470
		float 	fVec361SE[3];
		float 	fTemp178SE; // step: 2490
		float 	fVec367SE[2];
		float 	fTemp179SE; // step: 2502
		float 	fVec366SE[3];
		float 	fTemp180SE; // step: 2510
		float 	fVec370SE[2];
		float 	fTemp181SE; // step: 2522
		float 	fVec369SE[3];
		float 	fTemp182SE; // step: 2542
		float 	fVec375SE[2];
		float 	fTemp183SE; // step: 2554
		float 	fVec374SE[3];
		float 	fTemp184SE; // step: 2572
		float 	fVec380SE[2];
		float 	fTemp185SE; // step: 2584
		float 	fVec379SE[3];
		float 	fTemp186SE; // step: 2594
		float 	fTemp187SE; // step: 2606
		float 	fVec385SE[2];
		float 	fTemp188SE; // step: 2621
		float 	fVec384SE[3];
		float 	fTemp189SE; // step: 2641
		float 	fVec390SE[2];
		float 	fTemp190SE; // step: 2653
		float 	fVec389SE[3];
		float 	fTemp191SE; // step: 2673
		float 	fVec395SE[2];
		float 	fTemp192SE; // step: 2685
		float 	fVec394SE[3];
		float 	fTemp193SE; // step: 2693
		float 	fVec398SE[2];
		float 	fTemp194SE; // step: 2705
		float 	fVec397SE[3];
		float 	fTemp195SE; // step: 2725
		float 	fVec403SE[2];
		float 	fTemp196SE; // step: 2737
		float 	fVec402SE[3];
		float 	fTemp197SE; // step: 2755
		float 	fVec408SE[2];
		float 	fTemp198SE; // step: 2767
		float 	fVec407SE[3];
		float 	fTemp199SE; // step: 2777
		float 	fTemp200SE; // step: 2789
		float 	fVec413SE[2];
		float 	fTemp201SE; // step: 2804
		float 	fVec412SE[3];
		float 	fTemp202SE; // step: 2824
		float 	fVec418SE[2];
		float 	fTemp203SE; // step: 2836
		float 	fVec417SE[3];
		float 	fTemp204SE; // step: 2856
		float 	fVec423SE[2];
		float 	fTemp205SE; // step: 2868
		float 	fVec422SE[3];
		float 	fTemp206SE; // step: 2876
		float 	fVec426SE[2];
		float 	fTemp207SE; // step: 2888
		float 	fVec425SE[3];
		float 	fTemp208SE; // step: 2908
		float 	fVec431SE[2];
		float 	fTemp209SE; // step: 2920
		float 	fVec430SE[3];
		float 	fTemp210SE; // step: 2938
		float 	fVec436SE[2];
		float 	fTemp211SE; // step: 2950
		float 	fVec435SE[3];
		float 	fTemp212SE; // step: 2960
		float 	fTemp213SE; // step: 2972
		float 	fVec441SE[2];
		float 	fTemp214SE; // step: 2987
		float 	fVec440SE[3];
		float 	fTemp215SE; // step: 3007
		float 	fVec446SE[2];
		float 	fTemp216SE; // step: 3019
		float 	fVec445SE[3];
		float 	fTemp217SE; // step: 3039
		float 	fVec451SE[2];
		float 	fTemp218SE; // step: 3051
		float 	fVec450SE[3];
		float 	fTemp219SE; // step: 3059
		float 	fVec454SE[2];
		float 	fTemp220SE; // step: 3071
		float 	fVec453SE[3];
		float 	fTemp221SE; // step: 3091
		float 	fVec459SE[2];
		float 	fTemp222SE; // step: 3103
		float 	fVec458SE[3];
		float 	fTemp223SE; // step: 3121
		float 	fVec464SE[2];
		float 	fTemp224SE; // step: 3133
		float 	fVec463SE[3];
		float 	fTemp225SE; // step: 3143
		float 	fTemp226SE; // step: 3155
		float 	fVec469SE[2];
		float 	fTemp227SE; // step: 3170
		float 	fVec468SE[3];
		float 	fTemp228SE; // step: 3190
		float 	fVec474SE[2];
		float 	fTemp229SE; // step: 3202
		float 	fVec473SE[3];
		float 	fTemp230SE; // step: 3222
		float 	fVec479SE[2];
		float 	fTemp231SE; // step: 3234
		float 	fVec478SE[3];
		float 	fTemp232SE; // step: 3242
		float 	fVec482SE[2];
		float 	fTemp233SE; // step: 3254
		float 	fVec481SE[3];
		float 	fTemp234SE; // step: 3274
		float 	fVec487SE[2];
		float 	fTemp235SE; // step: 3286
		float 	fVec486SE[3];
		float 	fTemp236SE; // step: 3304
		float 	fVec492SE[2];
		float 	fTemp237SE; // step: 3316
		float 	fVec491SE[3];
		float 	fSlow106BE = float(fslider8); // Zone 2, step: 3319
		float 	fSlow107BE = (fConst495KI / float(fslider9)); // Zone 2, step: 3323
		float 	fSlow108BE = ((1) ? expf(-fSlow107BE) : 0.0f); // Zone 2, step: 3326
		float 	fSlow109BE = (1.0f + -(expf(-fSlow107BE)) /* Sum */); // Zone 2, step: 3347
		float 	fVec494SE[2];
		float 	fSlow110SE;
		float 	fVec498SE[2];
		float 	fSlow111SE;
		float 	fVec502SE[2];
		float 	fSlow112SE;
		float 	fVec506SE[2];
		float 	fSlow113SE;
		float 	fVec510SE[2];
		float 	fSlow114SE;
		float 	fVec514SE[2];
		float 	fSlow115SE;
		float 	fVec518SE[2];
		float 	fSlow116SE;
		float 	fVec522SE[2];
		float 	fSlow117SE;
		float 	fVec526SE[2];
		float 	fSlow118SE;
		float 	fVec530SE[2];
		float 	fSlow119SE;
		float 	fVec534SE[2];
		float 	fSlow120SE;
		float 	fVec538SE[2];
		float 	fSlow121SE;
		float 	fVec542SE[2];
		float 	fSlow122SE;
		float 	fVec546SE[2];
		float 	fSlow123SE;
		float 	fVec550SE[2];
		float 	fSlow124SE;
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		iVec0KC[1] = iVec0KCState[0];
		iVec0KC[2] = iVec0KCState[1];
		iVec0KC[3] = iVec0KCState[2];
		fVec2SE[1] = fVec2SEState;
		fVec1SE[1] = fVec1SEState;
		fVec5SE[1] = fVec5SEState;
		fVec6SE[1] = fVec6SEState;
		fVec7SE[1] = fVec7SEState;
		fVec9SE[1] = fVec9SEState;
		fVec10SE[1] = fVec10SEState;
		fVec12SE[1] = fVec12SEState;
		fVec14SE[1] = fVec14SEState;
		fVec15SE[1] = fVec15SEState;
		fVec17SE[1] = fVec17SEState;
		fVec18SE[1] = fVec18SEState;
		fVec19SE[1] = fVec19SEState;
		fVec21SE[1] = fVec21SEState;
		fVec22SE[1] = fVec22SEState;
		fVec24SE[1] = fVec24SEState;
		fVec26SE[1] = fVec26SEState;
		fVec27SE[1] = fVec27SEState;
		fVec29SE[1] = fVec29SEState;
		fVec30SE[1] = fVec30SEState;
		fVec31SE[1] = fVec31SEState;
		fVec33SE[1] = fVec33SEState;
		fVec34SE[1] = fVec34SEState;
		fVec36SE[1] = fVec36SEState;
		fVec38SE[1] = fVec38SEState;
		iVec39SI[1] = iVec39SIState;
		fVec42SI[1] = fVec42SIState;
		fVec41SI[1] = fVec41SIState[0];
		fVec41SI[2] = fVec41SIState[1];
		fVec41SI[3] = fVec41SIState[2];
		fVec45SE[1] = fVec45SEState;
		fVec64SE[1] = fVec64SEState;
		fVec65SE[1] = fVec65SEState;
		fVec68SE[1] = fVec68SEState;
		fVec69SE[1] = fVec69SEState;
		fVec72SE[1] = fVec72SEState;
		fVec73SE[1] = fVec73SEState;
		fVec76SE[1] = fVec76SEState;
		fVec77SE[1] = fVec77SEState;
		fVec80SE[1] = fVec80SEState;
		fVec81SE[1] = fVec81SEState;
		fVec84SE[1] = fVec84SEState;
		fVec85SE[1] = fVec85SEState;
		fVec88SE[1] = fVec88SEState;
		fVec89SE[1] = fVec89SEState;
		fVec92SE[1] = fVec92SEState;
		fVec93SE[1] = fVec93SEState;
		fVec96SE[1] = fVec96SEState;
		fVec97SE[1] = fVec97SEState;
		fVec100SE[1] = fVec100SEState;
		fVec101SE[1] = fVec101SEState;
		fVec105SE[1] = fVec105SEState;
		fVec104SE[1] = fVec104SEState[0];
		fVec104SE[2] = fVec104SEState[1];
		fVec110SE[1] = fVec110SEState;
		fVec109SE[1] = fVec109SEState[0];
		fVec109SE[2] = fVec109SEState[1];
		fVec115SE[1] = fVec115SEState;
		fVec114SE[1] = fVec114SEState[0];
		fVec114SE[2] = fVec114SEState[1];
		fVec118SE[1] = fVec118SEState;
		fVec117SE[1] = fVec117SEState[0];
		fVec117SE[2] = fVec117SEState[1];
		fVec123SE[1] = fVec123SEState;
		fVec122SE[1] = fVec122SEState[0];
		fVec122SE[2] = fVec122SEState[1];
		fVec128SE[1] = fVec128SEState;
		fVec127SE[1] = fVec127SEState[0];
		fVec127SE[2] = fVec127SEState[1];
		fVec133SE[1] = fVec133SEState;
		fVec132SE[1] = fVec132SEState[0];
		fVec132SE[2] = fVec132SEState[1];
		fVec138SE[1] = fVec138SEState;
		fVec137SE[1] = fVec137SEState[0];
		fVec137SE[2] = fVec137SEState[1];
		fVec143SE[1] = fVec143SEState;
		fVec142SE[1] = fVec142SEState[0];
		fVec142SE[2] = fVec142SEState[1];
		fVec146SE[1] = fVec146SEState;
		fVec145SE[1] = fVec145SEState[0];
		fVec145SE[2] = fVec145SEState[1];
		fVec151SE[1] = fVec151SEState;
		fVec150SE[1] = fVec150SEState[0];
		fVec150SE[2] = fVec150SEState[1];
		fVec156SE[1] = fVec156SEState;
		fVec155SE[1] = fVec155SEState[0];
		fVec155SE[2] = fVec155SEState[1];
		fVec161SE[1] = fVec161SEState;
		fVec160SE[1] = fVec160SEState[0];
		fVec160SE[2] = fVec160SEState[1];
		fVec166SE[1] = fVec166SEState;
		fVec165SE[1] = fVec165SEState[0];
		fVec165SE[2] = fVec165SEState[1];
		fVec171SE[1] = fVec171SEState;
		fVec170SE[1] = fVec170SEState[0];
		fVec170SE[2] = fVec170SEState[1];
		fVec174SE[1] = fVec174SEState;
		fVec173SE[1] = fVec173SEState[0];
		fVec173SE[2] = fVec173SEState[1];
		fVec179SE[1] = fVec179SEState;
		fVec178SE[1] = fVec178SEState[0];
		fVec178SE[2] = fVec178SEState[1];
		fVec184SE[1] = fVec184SEState;
		fVec183SE[1] = fVec183SEState[0];
		fVec183SE[2] = fVec183SEState[1];
		fVec189SE[1] = fVec189SEState;
		fVec188SE[1] = fVec188SEState[0];
		fVec188SE[2] = fVec188SEState[1];
		fVec194SE[1] = fVec194SEState;
		fVec193SE[1] = fVec193SEState[0];
		fVec193SE[2] = fVec193SEState[1];
		fVec199SE[1] = fVec199SEState;
		fVec198SE[1] = fVec198SEState[0];
		fVec198SE[2] = fVec198SEState[1];
		fVec202SE[1] = fVec202SEState;
		fVec201SE[1] = fVec201SEState[0];
		fVec201SE[2] = fVec201SEState[1];
		fVec207SE[1] = fVec207SEState;
		fVec206SE[1] = fVec206SEState[0];
		fVec206SE[2] = fVec206SEState[1];
		fVec212SE[1] = fVec212SEState;
		fVec211SE[1] = fVec211SEState[0];
		fVec211SE[2] = fVec211SEState[1];
		fVec217SE[1] = fVec217SEState;
		fVec216SE[1] = fVec216SEState[0];
		fVec216SE[2] = fVec216SEState[1];
		fVec222SE[1] = fVec222SEState;
		fVec221SE[1] = fVec221SEState[0];
		fVec221SE[2] = fVec221SEState[1];
		fVec227SE[1] = fVec227SEState;
		fVec226SE[1] = fVec226SEState[0];
		fVec226SE[2] = fVec226SEState[1];
		fVec230SE[1] = fVec230SEState;
		fVec229SE[1] = fVec229SEState[0];
		fVec229SE[2] = fVec229SEState[1];
		fVec235SE[1] = fVec235SEState;
		fVec234SE[1] = fVec234SEState[0];
		fVec234SE[2] = fVec234SEState[1];
		fVec240SE[1] = fVec240SEState;
		fVec239SE[1] = fVec239SEState[0];
		fVec239SE[2] = fVec239SEState[1];
		fVec245SE[1] = fVec245SEState;
		fVec244SE[1] = fVec244SEState[0];
		fVec244SE[2] = fVec244SEState[1];
		fVec250SE[1] = fVec250SEState;
		fVec249SE[1] = fVec249SEState[0];
		fVec249SE[2] = fVec249SEState[1];
		fVec255SE[1] = fVec255SEState;
		fVec254SE[1] = fVec254SEState[0];
		fVec254SE[2] = fVec254SEState[1];
		fVec258SE[1] = fVec258SEState;
		fVec257SE[1] = fVec257SEState[0];
		fVec257SE[2] = fVec257SEState[1];
		fVec263SE[1] = fVec263SEState;
		fVec262SE[1] = fVec262SEState[0];
		fVec262SE[2] = fVec262SEState[1];
		fVec268SE[1] = fVec268SEState;
		fVec267SE[1] = fVec267SEState[0];
		fVec267SE[2] = fVec267SEState[1];
		fVec273SE[1] = fVec273SEState;
		fVec272SE[1] = fVec272SEState[0];
		fVec272SE[2] = fVec272SEState[1];
		fVec278SE[1] = fVec278SEState;
		fVec277SE[1] = fVec277SEState[0];
		fVec277SE[2] = fVec277SEState[1];
		fVec283SE[1] = fVec283SEState;
		fVec282SE[1] = fVec282SEState[0];
		fVec282SE[2] = fVec282SEState[1];
		fVec286SE[1] = fVec286SEState;
		fVec285SE[1] = fVec285SEState[0];
		fVec285SE[2] = fVec285SEState[1];
		fVec291SE[1] = fVec291SEState;
		fVec290SE[1] = fVec290SEState[0];
		fVec290SE[2] = fVec290SEState[1];
		fVec296SE[1] = fVec296SEState;
		fVec295SE[1] = fVec295SEState[0];
		fVec295SE[2] = fVec295SEState[1];
		fVec301SE[1] = fVec301SEState;
		fVec300SE[1] = fVec300SEState[0];
		fVec300SE[2] = fVec300SEState[1];
		fVec306SE[1] = fVec306SEState;
		fVec305SE[1] = fVec305SEState[0];
		fVec305SE[2] = fVec305SEState[1];
		fVec311SE[1] = fVec311SEState;
		fVec310SE[1] = fVec310SEState[0];
		fVec310SE[2] = fVec310SEState[1];
		fVec314SE[1] = fVec314SEState;
		fVec313SE[1] = fVec313SEState[0];
		fVec313SE[2] = fVec313SEState[1];
		fVec319SE[1] = fVec319SEState;
		fVec318SE[1] = fVec318SEState[0];
		fVec318SE[2] = fVec318SEState[1];
		fVec324SE[1] = fVec324SEState;
		fVec323SE[1] = fVec323SEState[0];
		fVec323SE[2] = fVec323SEState[1];
		fVec329SE[1] = fVec329SEState;
		fVec328SE[1] = fVec328SEState[0];
		fVec328SE[2] = fVec328SEState[1];
		fVec334SE[1] = fVec334SEState;
		fVec333SE[1] = fVec333SEState[0];
		fVec333SE[2] = fVec333SEState[1];
		fVec339SE[1] = fVec339SEState;
		fVec338SE[1] = fVec338SEState[0];
		fVec338SE[2] = fVec338SEState[1];
		fVec342SE[1] = fVec342SEState;
		fVec341SE[1] = fVec341SEState[0];
		fVec341SE[2] = fVec341SEState[1];
		fVec347SE[1] = fVec347SEState;
		fVec346SE[1] = fVec346SEState[0];
		fVec346SE[2] = fVec346SEState[1];
		fVec352SE[1] = fVec352SEState;
		fVec351SE[1] = fVec351SEState[0];
		fVec351SE[2] = fVec351SEState[1];
		fVec357SE[1] = fVec357SEState;
		fVec356SE[1] = fVec356SEState[0];
		fVec356SE[2] = fVec356SEState[1];
		fVec362SE[1] = fVec362SEState;
		fVec361SE[1] = fVec361SEState[0];
		fVec361SE[2] = fVec361SEState[1];
		fVec367SE[1] = fVec367SEState;
		fVec366SE[1] = fVec366SEState[0];
		fVec366SE[2] = fVec366SEState[1];
		fVec370SE[1] = fVec370SEState;
		fVec369SE[1] = fVec369SEState[0];
		fVec369SE[2] = fVec369SEState[1];
		fVec375SE[1] = fVec375SEState;
		fVec374SE[1] = fVec374SEState[0];
		fVec374SE[2] = fVec374SEState[1];
		fVec380SE[1] = fVec380SEState;
		fVec379SE[1] = fVec379SEState[0];
		fVec379SE[2] = fVec379SEState[1];
		fVec385SE[1] = fVec385SEState;
		fVec384SE[1] = fVec384SEState[0];
		fVec384SE[2] = fVec384SEState[1];
		fVec390SE[1] = fVec390SEState;
		fVec389SE[1] = fVec389SEState[0];
		fVec389SE[2] = fVec389SEState[1];
		fVec395SE[1] = fVec395SEState;
		fVec394SE[1] = fVec394SEState[0];
		fVec394SE[2] = fVec394SEState[1];
		fVec398SE[1] = fVec398SEState;
		fVec397SE[1] = fVec397SEState[0];
		fVec397SE[2] = fVec397SEState[1];
		fVec403SE[1] = fVec403SEState;
		fVec402SE[1] = fVec402SEState[0];
		fVec402SE[2] = fVec402SEState[1];
		fVec408SE[1] = fVec408SEState;
		fVec407SE[1] = fVec407SEState[0];
		fVec407SE[2] = fVec407SEState[1];
		fVec413SE[1] = fVec413SEState;
		fVec412SE[1] = fVec412SEState[0];
		fVec412SE[2] = fVec412SEState[1];
		fVec418SE[1] = fVec418SEState;
		fVec417SE[1] = fVec417SEState[0];
		fVec417SE[2] = fVec417SEState[1];
		fVec423SE[1] = fVec423SEState;
		fVec422SE[1] = fVec422SEState[0];
		fVec422SE[2] = fVec422SEState[1];
		fVec426SE[1] = fVec426SEState;
		fVec425SE[1] = fVec425SEState[0];
		fVec425SE[2] = fVec425SEState[1];
		fVec431SE[1] = fVec431SEState;
		fVec430SE[1] = fVec430SEState[0];
		fVec430SE[2] = fVec430SEState[1];
		fVec436SE[1] = fVec436SEState;
		fVec435SE[1] = fVec435SEState[0];
		fVec435SE[2] = fVec435SEState[1];
		fVec441SE[1] = fVec441SEState;
		fVec440SE[1] = fVec440SEState[0];
		fVec440SE[2] = fVec440SEState[1];
		fVec446SE[1] = fVec446SEState;
		fVec445SE[1] = fVec445SEState[0];
		fVec445SE[2] = fVec445SEState[1];
		fVec451SE[1] = fVec451SEState;
		fVec450SE[1] = fVec450SEState[0];
		fVec450SE[2] = fVec450SEState[1];
		fVec454SE[1] = fVec454SEState;
		fVec453SE[1] = fVec453SEState[0];
		fVec453SE[2] = fVec453SEState[1];
		fVec459SE[1] = fVec459SEState;
		fVec458SE[1] = fVec458SEState[0];
		fVec458SE[2] = fVec458SEState[1];
		fVec464SE[1] = fVec464SEState;
		fVec463SE[1] = fVec463SEState[0];
		fVec463SE[2] = fVec463SEState[1];
		fVec469SE[1] = fVec469SEState;
		fVec468SE[1] = fVec468SEState[0];
		fVec468SE[2] = fVec468SEState[1];
		fVec474SE[1] = fVec474SEState;
		fVec473SE[1] = fVec473SEState[0];
		fVec473SE[2] = fVec473SEState[1];
		fVec479SE[1] = fVec479SEState;
		fVec478SE[1] = fVec478SEState[0];
		fVec478SE[2] = fVec478SEState[1];
		fVec482SE[1] = fVec482SEState;
		fVec481SE[1] = fVec481SEState[0];
		fVec481SE[2] = fVec481SEState[1];
		fVec487SE[1] = fVec487SEState;
		fVec486SE[1] = fVec486SEState[0];
		fVec486SE[2] = fVec486SEState[1];
		fVec492SE[1] = fVec492SEState;
		fVec491SE[1] = fVec491SEState[0];
		fVec491SE[2] = fVec491SEState[1];
		fVec494SE[1] = fVec494SEState;
		fVec498SE[1] = fVec498SEState;
		fVec502SE[1] = fVec502SEState;
		fVec506SE[1] = fVec506SEState;
		fVec510SE[1] = fVec510SEState;
		fVec514SE[1] = fVec514SEState;
		fVec518SE[1] = fVec518SEState;
		fVec522SE[1] = fVec522SEState;
		fVec526SE[1] = fVec526SEState;
		fVec530SE[1] = fVec530SEState;
		fVec534SE[1] = fVec534SEState;
		fVec538SE[1] = fVec538SEState;
		fVec542SE[1] = fVec542SEState;
		fVec546SE[1] = fVec546SEState;
		fVec550SE[1] = fVec550SEState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SE = fVec1SE[1]; // step: 7
			fVec2SE[0] = ((fSlow0BE * fVec2SE[1]) + fSlow1BE /* Sum */);
			fTemp1SE = fVec2SE[0]; // step: 43
			fTemp2SE = std::max(2e+01f, fabsf(fTemp1SE)); // step: 45
			fTemp3SE = (fConst1KI * fTemp2SE); // step: 46
			fVec1SE[0] = (fTemp0SE + fTemp3SE + -floorf((fTemp0SE + fTemp3SE /* Sum */)) /* Sum */);
			fTemp4SE = fVec1SE[0]; // step: 52
			fTemp5SE = (2.0f * fTemp4SE); // step: 53
			fTemp6SE = (fTemp5SE + -1.0f /* Sum */); // step: 54
			fTemp7SE = powf(fTemp6SE,2.0f); // step: 55
			fVec5SE[0] = fTemp7SE;
			fTemp8SE = powf(fTemp6SE,3.0f); // step: 58
			fTemp9SE = (-2.0f * fTemp4SE); // step: 60
			fVec6SE[0] = (fTemp8SE + 1.0f + fTemp9SE /* Sum */);
			fVec7SE[0] = (fTemp8SE + 1.0f + -fTemp5SE /* Sum */);
			fVec9SE[0] = ((fTemp8SE + 1.0f + -fTemp5SE + -fVec6SE[1] /* Sum */) / fTemp2SE);
			fTemp10SE = (fTemp7SE * (fTemp7SE + -2.0f /* Sum */)); // step: 72
			fVec10SE[0] = fTemp10SE;
			fTemp11SE = ((fTemp10SE + -fVec10SE[1] /* Sum */) / fTemp2SE); // step: 77
			fVec12SE[0] = fTemp11SE;
			fTemp12SE = ((fTemp11SE + -fVec12SE[1] /* Sum */) / fTemp2SE); // step: 82
			fVec14SE[0] = fTemp12SE;
			fTemp13SE = fVec15SE[1]; // step: 85
			fTemp14SE = std::max(2e+01f, fabsf((fSlow2BE * fTemp1SE))); // step: 93
			fTemp15SE = (fConst1KI * fTemp14SE); // step: 94
			fVec15SE[0] = (fTemp13SE + fTemp15SE + -floorf((fTemp13SE + fTemp15SE /* Sum */)) /* Sum */);
			fTemp16SE = fVec15SE[0]; // step: 100
			fTemp17SE = (2.0f * fTemp16SE); // step: 101
			fTemp18SE = (fTemp17SE + -1.0f /* Sum */); // step: 102
			fTemp19SE = powf(fTemp18SE,2.0f); // step: 103
			fVec17SE[0] = fTemp19SE;
			fTemp20SE = powf(fTemp18SE,3.0f); // step: 105
			fTemp21SE = (-2.0f * fTemp16SE); // step: 106
			fVec18SE[0] = (fTemp20SE + 1.0f + fTemp21SE /* Sum */);
			fVec19SE[0] = (fTemp20SE + 1.0f + -fTemp17SE /* Sum */);
			fVec21SE[0] = ((fTemp20SE + 1.0f + -fTemp17SE + -fVec18SE[1] /* Sum */) / fTemp14SE);
			fTemp22SE = (fTemp19SE * (fTemp19SE + -2.0f /* Sum */)); // step: 118
			fVec22SE[0] = fTemp22SE;
			fTemp23SE = ((fTemp22SE + -fVec22SE[1] /* Sum */) / fTemp14SE); // step: 123
			fVec24SE[0] = fTemp23SE;
			fTemp24SE = ((fTemp23SE + -fVec24SE[1] /* Sum */) / fTemp14SE); // step: 128
			fVec26SE[0] = fTemp24SE;
			fTemp25SE = fVec27SE[1]; // step: 131
			fTemp26SE = std::max(2e+01f, fabsf((fSlow3BE * fTemp1SE))); // step: 137
			fTemp27SE = (fConst1KI * fTemp26SE); // step: 138
			fVec27SE[0] = (fTemp25SE + fTemp27SE + -floorf((fTemp25SE + fTemp27SE /* Sum */)) /* Sum */);
			fTemp28SE = fVec27SE[0]; // step: 144
			fTemp29SE = (2.0f * fTemp28SE); // step: 145
			fTemp30SE = (fTemp29SE + -1.0f /* Sum */); // step: 146
			fTemp31SE = powf(fTemp30SE,2.0f); // step: 147
			fVec29SE[0] = fTemp31SE;
			fTemp32SE = powf(fTemp30SE,3.0f); // step: 149
			fTemp33SE = (-2.0f * fTemp28SE); // step: 150
			fVec30SE[0] = (fTemp32SE + 1.0f + fTemp33SE /* Sum */);
			fVec31SE[0] = (fTemp32SE + 1.0f + -fTemp29SE /* Sum */);
			fVec33SE[0] = ((fTemp32SE + 1.0f + -fTemp29SE + -fVec30SE[1] /* Sum */) / fTemp26SE);
			fTemp34SE = (fTemp31SE * (fTemp31SE + -2.0f /* Sum */)); // step: 162
			fVec34SE[0] = fTemp34SE;
			fTemp35SE = ((fTemp34SE + -fVec34SE[1] /* Sum */) / fTemp26SE); // step: 167
			fVec36SE[0] = fTemp35SE;
			fTemp36SE = ((fTemp35SE + -fVec36SE[1] /* Sum */) / fTemp26SE); // step: 172
			fVec38SE[0] = fTemp36SE;
			iVec39SI[0] = ((1103515245 * iVec39SI[1]) + 12345 /* Sum */);
			fTemp37SI = (4.656613e-10f * float(iVec39SI[0])); // step: 184
			fTemp38SI = fVec41SI[3]; // step: 187
			fTemp39SI = fVec41SI[2]; // step: 195
			fVec42SI[0] = ((0.5221894f * fTemp38SI) + fTemp37SI + (2.494956f * fVec42SI[1]) + (-2.0172658f * fTemp39SI) /* Sum */);
			fTemp40SI = fVec42SI[0]; // step: 199
			fVec41SI[0] = fTemp40SI;
			fVec45SE[0] = (fSlow5BE + (0.999f * fVec45SE[1]) /* Sum */);
			fTemp41SE = fVec45SE[0]; // step: 217
			fTemp42SC = float(iVec0KC[1]); // step: 234
			fTemp43SC = float(iVec0KC[2]); // step: 247
			fTemp44SC = float(iVec0KC[3]); // step: 262
			fTemp45SE = (fTemp41SE * ((iSlow6BE) ? (float)input0[i] : ((iSlow7BE) ? ((iSlow12BE) ? ((0.049922034f * fVec42SI[0]) + (0.0506127f * fTemp39SI) + (-0.095993534f * fVec41SI[1]) + (-0.004408786f * fTemp38SI) /* Sum */) : fTemp37SI) : (0.33333334f * (fTemp41SE * (((iSlow9BE) ? ((iSlow11BE) ? (fConst4KI * ((fTemp44SC * (fTemp12SE + -fVec14SE[1] /* Sum */)) / fTemp2SE)) : (fConst3KI * ((fTemp43SC * (((fTemp8SE + 1.0f + fTemp9SE + -fVec7SE[1] /* Sum */) / fTemp2SE) + -fVec9SE[1] /* Sum */)) / fTemp2SE))) : ((iSlow10BE) ? (fConst2KI * ((fTemp42SC * (fTemp7SE + -fVec5SE[1] /* Sum */)) / fTemp2SE)) : fTemp6SE)) + ((iSlow9BE) ? ((iSlow11BE) ? (fConst4KI * ((fTemp44SC * (fTemp24SE + -fVec26SE[1] /* Sum */)) / fTemp14SE)) : (fConst3KI * ((fTemp43SC * (((fTemp20SE + 1.0f + fTemp21SE + -fVec19SE[1] /* Sum */) / fTemp14SE) + -fVec21SE[1] /* Sum */)) / fTemp14SE))) : ((iSlow10BE) ? (fConst2KI * ((fTemp42SC * (fTemp19SE + -fVec17SE[1] /* Sum */)) / fTemp14SE)) : fTemp18SE)) + ((iSlow9BE) ? ((iSlow11BE) ? (fConst4KI * ((fTemp44SC * (fTemp36SE + -fVec38SE[1] /* Sum */)) / fTemp26SE)) : (fConst3KI * ((fTemp43SC * (((fTemp32SE + 1.0f + fTemp33SE + -fVec31SE[1] /* Sum */) / fTemp26SE) + -fVec33SE[1] /* Sum */)) / fTemp26SE))) : ((iSlow10BE) ? (fConst2KI * ((fTemp42SC * (fTemp31SE + -fVec29SE[1] /* Sum */)) / fTemp26SE)) : fTemp30SE)) /* Sum */)))))); // step: 340
			fTemp46SE = ((iSlow4BE) ? 0.0f : fTemp45SE); // step: 341
			fVec64SE[0] = fTemp46SE;
			fVec65SE[0] = -(fSlow15BE * ((fSlow16BE * fVec65SE[1]) + -(fSlow22BE * fTemp46SE) + -(fSlow23BE * fVec64SE[1]) /* Sum */));
			fTemp47SE = fVec65SE[0]; // step: 390
			fVec68SE[0] = (fSlow24BE * fTemp47SE);
			fVec69SE[0] = -(fSlow27BE * ((fSlow28BE * fVec69SE[1]) + -(fSlow31BE * fTemp47SE) + -(fSlow32BE * fVec68SE[1]) /* Sum */));
			fTemp48SE = fVec69SE[0]; // step: 427
			fVec72SE[0] = (fSlow33BE * fTemp48SE);
			fVec73SE[0] = -(fSlow36BE * ((fSlow37BE * fVec73SE[1]) + -(fSlow40BE * fTemp48SE) + -(fSlow41BE * fVec72SE[1]) /* Sum */));
			fTemp49SE = fVec73SE[0]; // step: 465
			fVec76SE[0] = (fSlow42BE * fTemp49SE);
			fVec77SE[0] = -(fSlow45BE * ((fSlow46BE * fVec77SE[1]) + -(fSlow49BE * fTemp49SE) + -(fSlow50BE * fVec76SE[1]) /* Sum */));
			fTemp50SE = fVec77SE[0]; // step: 503
			fVec80SE[0] = (fSlow51BE * fTemp50SE);
			fVec81SE[0] = -(fSlow54BE * ((fSlow55BE * fVec81SE[1]) + -(fSlow58BE * fTemp50SE) + -(fSlow59BE * fVec80SE[1]) /* Sum */));
			fTemp51SE = fVec81SE[0]; // step: 541
			fVec84SE[0] = (fSlow60BE * fTemp51SE);
			fVec85SE[0] = -(fSlow63BE * ((fSlow64BE * fVec85SE[1]) + -(fSlow67BE * fTemp51SE) + -(fSlow68BE * fVec84SE[1]) /* Sum */));
			fTemp52SE = fVec85SE[0]; // step: 580
			fVec88SE[0] = (fSlow69BE * fTemp52SE);
			fVec89SE[0] = -(fSlow72BE * ((fSlow73BE * fVec89SE[1]) + -(fSlow76BE * fTemp52SE) + -(fSlow77BE * fVec88SE[1]) /* Sum */));
			fTemp53SE = fVec89SE[0]; // step: 619
			fVec92SE[0] = (fSlow78BE * fTemp53SE);
			fVec93SE[0] = -(fSlow81BE * ((fSlow82BE * fVec93SE[1]) + -(fSlow85BE * fTemp53SE) + -(fSlow86BE * fVec92SE[1]) /* Sum */));
			fTemp54SE = fVec93SE[0]; // step: 658
			fVec96SE[0] = (fSlow87BE * fTemp54SE);
			fVec97SE[0] = -(fSlow90BE * ((fSlow91BE * fVec97SE[1]) + -(fSlow94BE * fTemp54SE) + -(fSlow95BE * fVec96SE[1]) /* Sum */));
			fTemp55SE = fVec97SE[0]; // step: 697
			fVec100SE[0] = (fSlow96BE * fTemp55SE);
			fVec101SE[0] = -(fSlow101BE * ((fSlow102BE * fVec101SE[1]) + -(fSlow104BE * fTemp55SE) + -(fSlow105BE * fVec100SE[1]) /* Sum */));
			fTemp56SE = ((iSlow4BE) ? fTemp45SE : (fSlow99BE * fVec101SE[0])); // step: 739
			fTemp57SE = fVec104SE[2]; // step: 754
			fVec105SE[0] = (fTemp56SE + -(fConst9KI * ((fConst10KI * fTemp57SE) + (fConst13KI * fVec105SE[1]) /* Sum */)) /* Sum */);
			fTemp58SE = fVec105SE[0]; // step: 769
			fVec104SE[0] = fTemp58SE;
			fTemp59SE = fVec109SE[2]; // step: 794
			fVec110SE[0] = ((fConst9KI * ((fConst15KI * fVec105SE[0]) + (fConst16KI * fVec104SE[1]) + (fConst15KI * fTemp57SE) /* Sum */)) + -(fConst17KI * ((fConst18KI * fTemp59SE) + (fConst19KI * fVec110SE[1]) /* Sum */)) /* Sum */);
			fTemp60SE = fVec110SE[0]; // step: 806
			fVec109SE[0] = fTemp60SE;
			fTemp61SE = fVec114SE[2]; // step: 830
			fVec115SE[0] = ((fConst17KI * ((fConst21KI * fVec110SE[0]) + (fConst22KI * fVec109SE[1]) + (fConst21KI * fTemp59SE) /* Sum */)) + -(fConst23KI * ((fConst24KI * fTemp61SE) + (fConst25KI * fVec115SE[1]) /* Sum */)) /* Sum */);
			fTemp62SE = fVec115SE[0]; // step: 842
			fVec114SE[0] = fTemp62SE;
			fTemp63SE = fVec117SE[2]; // step: 853
			fVec118SE[0] = (fTemp56SE + -(fConst26KI * ((fConst27KI * fTemp63SE) + (fConst28KI * fVec118SE[1]) /* Sum */)) /* Sum */);
			fTemp64SE = fVec118SE[0]; // step: 865
			fVec117SE[0] = fTemp64SE;
			fTemp65SE = fVec122SE[2]; // step: 890
			fVec123SE[0] = ((fConst26KI * ((fConst30KI * fVec118SE[0]) + (fConst31KI * fVec117SE[1]) + (fConst30KI * fTemp63SE) /* Sum */)) + -(fConst32KI * ((fConst33KI * fTemp65SE) + (fConst34KI * fVec123SE[1]) /* Sum */)) /* Sum */);
			fTemp66SE = fVec123SE[0]; // step: 902
			fVec122SE[0] = fTemp66SE;
			fTemp67SE = fVec127SE[2]; // step: 924
			fVec128SE[0] = ((fConst32KI * ((fConst35KI * fVec123SE[0]) + (fConst36KI * fVec122SE[1]) + (fConst35KI * fTemp65SE) /* Sum */)) + -(fConst37KI * ((fConst38KI * fTemp67SE) + (fConst39KI * fVec128SE[1]) /* Sum */)) /* Sum */);
			fTemp68SE = fVec128SE[0]; // step: 936
			fVec127SE[0] = fTemp68SE;
			fTemp69SE = (fConst37KI * ((fConst40KI * fVec128SE[0]) + (fConst41KI * fVec127SE[1]) + (fConst40KI * fTemp67SE) /* Sum */)); // step: 947
			fTemp70SE = fVec132SE[2]; // step: 959
			fVec133SE[0] = (fTemp69SE + -(fConst44KI * ((fConst45KI * fTemp70SE) + (fConst48KI * fVec133SE[1]) /* Sum */)) /* Sum */);
			fTemp71SE = fVec133SE[0]; // step: 974
			fVec132SE[0] = fTemp71SE;
			fTemp72SE = fVec137SE[2]; // step: 994
			fVec138SE[0] = ((fConst44KI * ((fConst50KI * fVec133SE[0]) + (fConst51KI * fVec132SE[1]) + (fConst50KI * fTemp70SE) /* Sum */)) + -(fConst52KI * ((fConst53KI * fTemp72SE) + (fConst54KI * fVec138SE[1]) /* Sum */)) /* Sum */);
			fTemp73SE = fVec138SE[0]; // step: 1006
			fVec137SE[0] = fTemp73SE;
			fTemp74SE = fVec142SE[2]; // step: 1026
			fVec143SE[0] = ((fConst52KI * ((fConst56KI * fVec138SE[0]) + (fConst57KI * fVec137SE[1]) + (fConst56KI * fTemp72SE) /* Sum */)) + -(fConst58KI * ((fConst59KI * fTemp74SE) + (fConst60KI * fVec143SE[1]) /* Sum */)) /* Sum */);
			fTemp75SE = fVec143SE[0]; // step: 1038
			fVec142SE[0] = fTemp75SE;
			fTemp76SE = fVec145SE[2]; // step: 1046
			fVec146SE[0] = (fTemp69SE + -(fConst61KI * ((fConst62KI * fTemp76SE) + (fConst63KI * fVec146SE[1]) /* Sum */)) /* Sum */);
			fTemp77SE = fVec146SE[0]; // step: 1058
			fVec145SE[0] = fTemp77SE;
			fTemp78SE = fVec150SE[2]; // step: 1078
			fVec151SE[0] = ((fConst61KI * ((fConst65KI * fVec146SE[0]) + (fConst66KI * fVec145SE[1]) + (fConst65KI * fTemp76SE) /* Sum */)) + -(fConst67KI * ((fConst68KI * fTemp78SE) + (fConst69KI * fVec151SE[1]) /* Sum */)) /* Sum */);
			fTemp79SE = fVec151SE[0]; // step: 1090
			fVec150SE[0] = fTemp79SE;
			fTemp80SE = fVec155SE[2]; // step: 1108
			fVec156SE[0] = ((fConst67KI * ((fConst70KI * fVec151SE[0]) + (fConst71KI * fVec150SE[1]) + (fConst70KI * fTemp78SE) /* Sum */)) + -(fConst72KI * ((fConst73KI * fTemp80SE) + (fConst74KI * fVec156SE[1]) /* Sum */)) /* Sum */);
			fTemp81SE = fVec156SE[0]; // step: 1120
			fVec155SE[0] = fTemp81SE;
			fTemp82SE = (fConst72KI * ((fConst75KI * fVec156SE[0]) + (fConst76KI * fVec155SE[1]) + (fConst75KI * fTemp80SE) /* Sum */)); // step: 1130
			fTemp83SE = fVec160SE[2]; // step: 1142
			fVec161SE[0] = (fTemp82SE + -(fConst79KI * ((fConst80KI * fTemp83SE) + (fConst83KI * fVec161SE[1]) /* Sum */)) /* Sum */);
			fTemp84SE = fVec161SE[0]; // step: 1157
			fVec160SE[0] = fTemp84SE;
			fTemp85SE = fVec165SE[2]; // step: 1177
			fVec166SE[0] = ((fConst79KI * ((fConst85KI * fVec161SE[0]) + (fConst86KI * fVec160SE[1]) + (fConst85KI * fTemp83SE) /* Sum */)) + -(fConst87KI * ((fConst88KI * fTemp85SE) + (fConst89KI * fVec166SE[1]) /* Sum */)) /* Sum */);
			fTemp86SE = fVec166SE[0]; // step: 1189
			fVec165SE[0] = fTemp86SE;
			fTemp87SE = fVec170SE[2]; // step: 1209
			fVec171SE[0] = ((fConst87KI * ((fConst91KI * fVec166SE[0]) + (fConst92KI * fVec165SE[1]) + (fConst91KI * fTemp85SE) /* Sum */)) + -(fConst93KI * ((fConst94KI * fTemp87SE) + (fConst95KI * fVec171SE[1]) /* Sum */)) /* Sum */);
			fTemp88SE = fVec171SE[0]; // step: 1221
			fVec170SE[0] = fTemp88SE;
			fTemp89SE = fVec173SE[2]; // step: 1229
			fVec174SE[0] = (fTemp82SE + -(fConst96KI * ((fConst97KI * fTemp89SE) + (fConst98KI * fVec174SE[1]) /* Sum */)) /* Sum */);
			fTemp90SE = fVec174SE[0]; // step: 1241
			fVec173SE[0] = fTemp90SE;
			fTemp91SE = fVec178SE[2]; // step: 1261
			fVec179SE[0] = ((fConst96KI * ((fConst100KI * fVec174SE[0]) + (fConst101KI * fVec173SE[1]) + (fConst100KI * fTemp89SE) /* Sum */)) + -(fConst102KI * ((fConst103KI * fTemp91SE) + (fConst104KI * fVec179SE[1]) /* Sum */)) /* Sum */);
			fTemp92SE = fVec179SE[0]; // step: 1273
			fVec178SE[0] = fTemp92SE;
			fTemp93SE = fVec183SE[2]; // step: 1291
			fVec184SE[0] = ((fConst102KI * ((fConst105KI * fVec179SE[0]) + (fConst106KI * fVec178SE[1]) + (fConst105KI * fTemp91SE) /* Sum */)) + -(fConst107KI * ((fConst108KI * fTemp93SE) + (fConst109KI * fVec184SE[1]) /* Sum */)) /* Sum */);
			fTemp94SE = fVec184SE[0]; // step: 1303
			fVec183SE[0] = fTemp94SE;
			fTemp95SE = (fConst107KI * ((fConst110KI * fVec184SE[0]) + (fConst111KI * fVec183SE[1]) + (fConst110KI * fTemp93SE) /* Sum */)); // step: 1313
			fTemp96SE = fVec188SE[2]; // step: 1325
			fVec189SE[0] = (fTemp95SE + -(fConst114KI * ((fConst115KI * fTemp96SE) + (fConst118KI * fVec189SE[1]) /* Sum */)) /* Sum */);
			fTemp97SE = fVec189SE[0]; // step: 1340
			fVec188SE[0] = fTemp97SE;
			fTemp98SE = fVec193SE[2]; // step: 1360
			fVec194SE[0] = ((fConst114KI * ((fConst120KI * fVec189SE[0]) + (fConst121KI * fVec188SE[1]) + (fConst120KI * fTemp96SE) /* Sum */)) + -(fConst122KI * ((fConst123KI * fTemp98SE) + (fConst124KI * fVec194SE[1]) /* Sum */)) /* Sum */);
			fTemp99SE = fVec194SE[0]; // step: 1372
			fVec193SE[0] = fTemp99SE;
			fTemp100SE = fVec198SE[2]; // step: 1392
			fVec199SE[0] = ((fConst122KI * ((fConst126KI * fVec194SE[0]) + (fConst127KI * fVec193SE[1]) + (fConst126KI * fTemp98SE) /* Sum */)) + -(fConst128KI * ((fConst129KI * fTemp100SE) + (fConst130KI * fVec199SE[1]) /* Sum */)) /* Sum */);
			fTemp101SE = fVec199SE[0]; // step: 1404
			fVec198SE[0] = fTemp101SE;
			fTemp102SE = fVec201SE[2]; // step: 1412
			fVec202SE[0] = (fTemp95SE + -(fConst131KI * ((fConst132KI * fTemp102SE) + (fConst133KI * fVec202SE[1]) /* Sum */)) /* Sum */);
			fTemp103SE = fVec202SE[0]; // step: 1424
			fVec201SE[0] = fTemp103SE;
			fTemp104SE = fVec206SE[2]; // step: 1444
			fVec207SE[0] = ((fConst131KI * ((fConst135KI * fVec202SE[0]) + (fConst136KI * fVec201SE[1]) + (fConst135KI * fTemp102SE) /* Sum */)) + -(fConst137KI * ((fConst138KI * fTemp104SE) + (fConst139KI * fVec207SE[1]) /* Sum */)) /* Sum */);
			fTemp105SE = fVec207SE[0]; // step: 1456
			fVec206SE[0] = fTemp105SE;
			fTemp106SE = fVec211SE[2]; // step: 1474
			fVec212SE[0] = ((fConst137KI * ((fConst140KI * fVec207SE[0]) + (fConst141KI * fVec206SE[1]) + (fConst140KI * fTemp104SE) /* Sum */)) + -(fConst142KI * ((fConst143KI * fTemp106SE) + (fConst144KI * fVec212SE[1]) /* Sum */)) /* Sum */);
			fTemp107SE = fVec212SE[0]; // step: 1486
			fVec211SE[0] = fTemp107SE;
			fTemp108SE = (fConst142KI * ((fConst145KI * fVec212SE[0]) + (fConst146KI * fVec211SE[1]) + (fConst145KI * fTemp106SE) /* Sum */)); // step: 1496
			fTemp109SE = fVec216SE[2]; // step: 1508
			fVec217SE[0] = (fTemp108SE + -(fConst149KI * ((fConst150KI * fTemp109SE) + (fConst153KI * fVec217SE[1]) /* Sum */)) /* Sum */);
			fTemp110SE = fVec217SE[0]; // step: 1523
			fVec216SE[0] = fTemp110SE;
			fTemp111SE = fVec221SE[2]; // step: 1543
			fVec222SE[0] = ((fConst149KI * ((fConst155KI * fVec217SE[0]) + (fConst156KI * fVec216SE[1]) + (fConst155KI * fTemp109SE) /* Sum */)) + -(fConst157KI * ((fConst158KI * fTemp111SE) + (fConst159KI * fVec222SE[1]) /* Sum */)) /* Sum */);
			fTemp112SE = fVec222SE[0]; // step: 1555
			fVec221SE[0] = fTemp112SE;
			fTemp113SE = fVec226SE[2]; // step: 1575
			fVec227SE[0] = ((fConst157KI * ((fConst161KI * fVec222SE[0]) + (fConst162KI * fVec221SE[1]) + (fConst161KI * fTemp111SE) /* Sum */)) + -(fConst163KI * ((fConst164KI * fTemp113SE) + (fConst165KI * fVec227SE[1]) /* Sum */)) /* Sum */);
			fTemp114SE = fVec227SE[0]; // step: 1587
			fVec226SE[0] = fTemp114SE;
			fTemp115SE = fVec229SE[2]; // step: 1595
			fVec230SE[0] = (fTemp108SE + -(fConst166KI * ((fConst167KI * fTemp115SE) + (fConst168KI * fVec230SE[1]) /* Sum */)) /* Sum */);
			fTemp116SE = fVec230SE[0]; // step: 1607
			fVec229SE[0] = fTemp116SE;
			fTemp117SE = fVec234SE[2]; // step: 1627
			fVec235SE[0] = ((fConst166KI * ((fConst170KI * fVec230SE[0]) + (fConst171KI * fVec229SE[1]) + (fConst170KI * fTemp115SE) /* Sum */)) + -(fConst172KI * ((fConst173KI * fTemp117SE) + (fConst174KI * fVec235SE[1]) /* Sum */)) /* Sum */);
			fTemp118SE = fVec235SE[0]; // step: 1639
			fVec234SE[0] = fTemp118SE;
			fTemp119SE = fVec239SE[2]; // step: 1657
			fVec240SE[0] = ((fConst172KI * ((fConst175KI * fVec235SE[0]) + (fConst176KI * fVec234SE[1]) + (fConst175KI * fTemp117SE) /* Sum */)) + -(fConst177KI * ((fConst178KI * fTemp119SE) + (fConst179KI * fVec240SE[1]) /* Sum */)) /* Sum */);
			fTemp120SE = fVec240SE[0]; // step: 1669
			fVec239SE[0] = fTemp120SE;
			fTemp121SE = (fConst177KI * ((fConst180KI * fVec240SE[0]) + (fConst181KI * fVec239SE[1]) + (fConst180KI * fTemp119SE) /* Sum */)); // step: 1679
			fTemp122SE = fVec244SE[2]; // step: 1691
			fVec245SE[0] = (fTemp121SE + -(fConst184KI * ((fConst185KI * fTemp122SE) + (fConst188KI * fVec245SE[1]) /* Sum */)) /* Sum */);
			fTemp123SE = fVec245SE[0]; // step: 1706
			fVec244SE[0] = fTemp123SE;
			fTemp124SE = fVec249SE[2]; // step: 1726
			fVec250SE[0] = ((fConst184KI * ((fConst190KI * fVec245SE[0]) + (fConst191KI * fVec244SE[1]) + (fConst190KI * fTemp122SE) /* Sum */)) + -(fConst192KI * ((fConst193KI * fTemp124SE) + (fConst194KI * fVec250SE[1]) /* Sum */)) /* Sum */);
			fTemp125SE = fVec250SE[0]; // step: 1738
			fVec249SE[0] = fTemp125SE;
			fTemp126SE = fVec254SE[2]; // step: 1758
			fVec255SE[0] = ((fConst192KI * ((fConst196KI * fVec250SE[0]) + (fConst197KI * fVec249SE[1]) + (fConst196KI * fTemp124SE) /* Sum */)) + -(fConst198KI * ((fConst199KI * fTemp126SE) + (fConst200KI * fVec255SE[1]) /* Sum */)) /* Sum */);
			fTemp127SE = fVec255SE[0]; // step: 1770
			fVec254SE[0] = fTemp127SE;
			fTemp128SE = fVec257SE[2]; // step: 1778
			fVec258SE[0] = (fTemp121SE + -(fConst201KI * ((fConst202KI * fTemp128SE) + (fConst203KI * fVec258SE[1]) /* Sum */)) /* Sum */);
			fTemp129SE = fVec258SE[0]; // step: 1790
			fVec257SE[0] = fTemp129SE;
			fTemp130SE = fVec262SE[2]; // step: 1810
			fVec263SE[0] = ((fConst201KI * ((fConst205KI * fVec258SE[0]) + (fConst206KI * fVec257SE[1]) + (fConst205KI * fTemp128SE) /* Sum */)) + -(fConst207KI * ((fConst208KI * fTemp130SE) + (fConst209KI * fVec263SE[1]) /* Sum */)) /* Sum */);
			fTemp131SE = fVec263SE[0]; // step: 1822
			fVec262SE[0] = fTemp131SE;
			fTemp132SE = fVec267SE[2]; // step: 1840
			fVec268SE[0] = ((fConst207KI * ((fConst210KI * fVec263SE[0]) + (fConst211KI * fVec262SE[1]) + (fConst210KI * fTemp130SE) /* Sum */)) + -(fConst212KI * ((fConst213KI * fTemp132SE) + (fConst214KI * fVec268SE[1]) /* Sum */)) /* Sum */);
			fTemp133SE = fVec268SE[0]; // step: 1852
			fVec267SE[0] = fTemp133SE;
			fTemp134SE = (fConst212KI * ((fConst215KI * fVec268SE[0]) + (fConst216KI * fVec267SE[1]) + (fConst215KI * fTemp132SE) /* Sum */)); // step: 1862
			fTemp135SE = fVec272SE[2]; // step: 1874
			fVec273SE[0] = (fTemp134SE + -(fConst219KI * ((fConst220KI * fTemp135SE) + (fConst223KI * fVec273SE[1]) /* Sum */)) /* Sum */);
			fTemp136SE = fVec273SE[0]; // step: 1889
			fVec272SE[0] = fTemp136SE;
			fTemp137SE = fVec277SE[2]; // step: 1909
			fVec278SE[0] = ((fConst219KI * ((fConst225KI * fVec273SE[0]) + (fConst226KI * fVec272SE[1]) + (fConst225KI * fTemp135SE) /* Sum */)) + -(fConst227KI * ((fConst228KI * fTemp137SE) + (fConst229KI * fVec278SE[1]) /* Sum */)) /* Sum */);
			fTemp138SE = fVec278SE[0]; // step: 1921
			fVec277SE[0] = fTemp138SE;
			fTemp139SE = fVec282SE[2]; // step: 1941
			fVec283SE[0] = ((fConst227KI * ((fConst231KI * fVec278SE[0]) + (fConst232KI * fVec277SE[1]) + (fConst231KI * fTemp137SE) /* Sum */)) + -(fConst233KI * ((fConst234KI * fTemp139SE) + (fConst235KI * fVec283SE[1]) /* Sum */)) /* Sum */);
			fTemp140SE = fVec283SE[0]; // step: 1953
			fVec282SE[0] = fTemp140SE;
			fTemp141SE = fVec285SE[2]; // step: 1961
			fVec286SE[0] = (fTemp134SE + -(fConst236KI * ((fConst237KI * fTemp141SE) + (fConst238KI * fVec286SE[1]) /* Sum */)) /* Sum */);
			fTemp142SE = fVec286SE[0]; // step: 1973
			fVec285SE[0] = fTemp142SE;
			fTemp143SE = fVec290SE[2]; // step: 1993
			fVec291SE[0] = ((fConst236KI * ((fConst240KI * fVec286SE[0]) + (fConst241KI * fVec285SE[1]) + (fConst240KI * fTemp141SE) /* Sum */)) + -(fConst242KI * ((fConst243KI * fTemp143SE) + (fConst244KI * fVec291SE[1]) /* Sum */)) /* Sum */);
			fTemp144SE = fVec291SE[0]; // step: 2005
			fVec290SE[0] = fTemp144SE;
			fTemp145SE = fVec295SE[2]; // step: 2023
			fVec296SE[0] = ((fConst242KI * ((fConst245KI * fVec291SE[0]) + (fConst246KI * fVec290SE[1]) + (fConst245KI * fTemp143SE) /* Sum */)) + -(fConst247KI * ((fConst248KI * fTemp145SE) + (fConst249KI * fVec296SE[1]) /* Sum */)) /* Sum */);
			fTemp146SE = fVec296SE[0]; // step: 2035
			fVec295SE[0] = fTemp146SE;
			fTemp147SE = (fConst247KI * ((fConst250KI * fVec296SE[0]) + (fConst251KI * fVec295SE[1]) + (fConst250KI * fTemp145SE) /* Sum */)); // step: 2045
			fTemp148SE = fVec300SE[2]; // step: 2057
			fVec301SE[0] = (fTemp147SE + -(fConst254KI * ((fConst255KI * fTemp148SE) + (fConst258KI * fVec301SE[1]) /* Sum */)) /* Sum */);
			fTemp149SE = fVec301SE[0]; // step: 2072
			fVec300SE[0] = fTemp149SE;
			fTemp150SE = fVec305SE[2]; // step: 2092
			fVec306SE[0] = ((fConst254KI * ((fConst260KI * fVec301SE[0]) + (fConst261KI * fVec300SE[1]) + (fConst260KI * fTemp148SE) /* Sum */)) + -(fConst262KI * ((fConst263KI * fTemp150SE) + (fConst264KI * fVec306SE[1]) /* Sum */)) /* Sum */);
			fTemp151SE = fVec306SE[0]; // step: 2104
			fVec305SE[0] = fTemp151SE;
			fTemp152SE = fVec310SE[2]; // step: 2124
			fVec311SE[0] = ((fConst262KI * ((fConst266KI * fVec306SE[0]) + (fConst267KI * fVec305SE[1]) + (fConst266KI * fTemp150SE) /* Sum */)) + -(fConst268KI * ((fConst269KI * fTemp152SE) + (fConst270KI * fVec311SE[1]) /* Sum */)) /* Sum */);
			fTemp153SE = fVec311SE[0]; // step: 2136
			fVec310SE[0] = fTemp153SE;
			fTemp154SE = fVec313SE[2]; // step: 2144
			fVec314SE[0] = (fTemp147SE + -(fConst271KI * ((fConst272KI * fTemp154SE) + (fConst273KI * fVec314SE[1]) /* Sum */)) /* Sum */);
			fTemp155SE = fVec314SE[0]; // step: 2156
			fVec313SE[0] = fTemp155SE;
			fTemp156SE = fVec318SE[2]; // step: 2176
			fVec319SE[0] = ((fConst271KI * ((fConst275KI * fVec314SE[0]) + (fConst276KI * fVec313SE[1]) + (fConst275KI * fTemp154SE) /* Sum */)) + -(fConst277KI * ((fConst278KI * fTemp156SE) + (fConst279KI * fVec319SE[1]) /* Sum */)) /* Sum */);
			fTemp157SE = fVec319SE[0]; // step: 2188
			fVec318SE[0] = fTemp157SE;
			fTemp158SE = fVec323SE[2]; // step: 2206
			fVec324SE[0] = ((fConst277KI * ((fConst280KI * fVec319SE[0]) + (fConst281KI * fVec318SE[1]) + (fConst280KI * fTemp156SE) /* Sum */)) + -(fConst282KI * ((fConst283KI * fTemp158SE) + (fConst284KI * fVec324SE[1]) /* Sum */)) /* Sum */);
			fTemp159SE = fVec324SE[0]; // step: 2218
			fVec323SE[0] = fTemp159SE;
			fTemp160SE = (fConst282KI * ((fConst285KI * fVec324SE[0]) + (fConst286KI * fVec323SE[1]) + (fConst285KI * fTemp158SE) /* Sum */)); // step: 2228
			fTemp161SE = fVec328SE[2]; // step: 2240
			fVec329SE[0] = (fTemp160SE + -(fConst289KI * ((fConst290KI * fTemp161SE) + (fConst293KI * fVec329SE[1]) /* Sum */)) /* Sum */);
			fTemp162SE = fVec329SE[0]; // step: 2255
			fVec328SE[0] = fTemp162SE;
			fTemp163SE = fVec333SE[2]; // step: 2275
			fVec334SE[0] = ((fConst289KI * ((fConst295KI * fVec329SE[0]) + (fConst296KI * fVec328SE[1]) + (fConst295KI * fTemp161SE) /* Sum */)) + -(fConst297KI * ((fConst298KI * fTemp163SE) + (fConst299KI * fVec334SE[1]) /* Sum */)) /* Sum */);
			fTemp164SE = fVec334SE[0]; // step: 2287
			fVec333SE[0] = fTemp164SE;
			fTemp165SE = fVec338SE[2]; // step: 2307
			fVec339SE[0] = ((fConst297KI * ((fConst301KI * fVec334SE[0]) + (fConst302KI * fVec333SE[1]) + (fConst301KI * fTemp163SE) /* Sum */)) + -(fConst303KI * ((fConst304KI * fTemp165SE) + (fConst305KI * fVec339SE[1]) /* Sum */)) /* Sum */);
			fTemp166SE = fVec339SE[0]; // step: 2319
			fVec338SE[0] = fTemp166SE;
			fTemp167SE = fVec341SE[2]; // step: 2327
			fVec342SE[0] = (fTemp160SE + -(fConst306KI * ((fConst307KI * fTemp167SE) + (fConst308KI * fVec342SE[1]) /* Sum */)) /* Sum */);
			fTemp168SE = fVec342SE[0]; // step: 2339
			fVec341SE[0] = fTemp168SE;
			fTemp169SE = fVec346SE[2]; // step: 2359
			fVec347SE[0] = ((fConst306KI * ((fConst310KI * fVec342SE[0]) + (fConst311KI * fVec341SE[1]) + (fConst310KI * fTemp167SE) /* Sum */)) + -(fConst312KI * ((fConst313KI * fTemp169SE) + (fConst314KI * fVec347SE[1]) /* Sum */)) /* Sum */);
			fTemp170SE = fVec347SE[0]; // step: 2371
			fVec346SE[0] = fTemp170SE;
			fTemp171SE = fVec351SE[2]; // step: 2389
			fVec352SE[0] = ((fConst312KI * ((fConst315KI * fVec347SE[0]) + (fConst316KI * fVec346SE[1]) + (fConst315KI * fTemp169SE) /* Sum */)) + -(fConst317KI * ((fConst318KI * fTemp171SE) + (fConst319KI * fVec352SE[1]) /* Sum */)) /* Sum */);
			fTemp172SE = fVec352SE[0]; // step: 2401
			fVec351SE[0] = fTemp172SE;
			fTemp173SE = (fConst317KI * ((fConst320KI * fVec352SE[0]) + (fConst321KI * fVec351SE[1]) + (fConst320KI * fTemp171SE) /* Sum */)); // step: 2411
			fTemp174SE = fVec356SE[2]; // step: 2423
			fVec357SE[0] = (fTemp173SE + -(fConst324KI * ((fConst325KI * fTemp174SE) + (fConst328KI * fVec357SE[1]) /* Sum */)) /* Sum */);
			fTemp175SE = fVec357SE[0]; // step: 2438
			fVec356SE[0] = fTemp175SE;
			fTemp176SE = fVec361SE[2]; // step: 2458
			fVec362SE[0] = ((fConst324KI * ((fConst330KI * fVec357SE[0]) + (fConst331KI * fVec356SE[1]) + (fConst330KI * fTemp174SE) /* Sum */)) + -(fConst332KI * ((fConst333KI * fTemp176SE) + (fConst334KI * fVec362SE[1]) /* Sum */)) /* Sum */);
			fTemp177SE = fVec362SE[0]; // step: 2470
			fVec361SE[0] = fTemp177SE;
			fTemp178SE = fVec366SE[2]; // step: 2490
			fVec367SE[0] = ((fConst332KI * ((fConst336KI * fVec362SE[0]) + (fConst337KI * fVec361SE[1]) + (fConst336KI * fTemp176SE) /* Sum */)) + -(fConst338KI * ((fConst339KI * fTemp178SE) + (fConst340KI * fVec367SE[1]) /* Sum */)) /* Sum */);
			fTemp179SE = fVec367SE[0]; // step: 2502
			fVec366SE[0] = fTemp179SE;
			fTemp180SE = fVec369SE[2]; // step: 2510
			fVec370SE[0] = (fTemp173SE + -(fConst341KI * ((fConst342KI * fTemp180SE) + (fConst343KI * fVec370SE[1]) /* Sum */)) /* Sum */);
			fTemp181SE = fVec370SE[0]; // step: 2522
			fVec369SE[0] = fTemp181SE;
			fTemp182SE = fVec374SE[2]; // step: 2542
			fVec375SE[0] = ((fConst341KI * ((fConst345KI * fVec370SE[0]) + (fConst346KI * fVec369SE[1]) + (fConst345KI * fTemp180SE) /* Sum */)) + -(fConst347KI * ((fConst348KI * fTemp182SE) + (fConst349KI * fVec375SE[1]) /* Sum */)) /* Sum */);
			fTemp183SE = fVec375SE[0]; // step: 2554
			fVec374SE[0] = fTemp183SE;
			fTemp184SE = fVec379SE[2]; // step: 2572
			fVec380SE[0] = ((fConst347KI * ((fConst350KI * fVec375SE[0]) + (fConst351KI * fVec374SE[1]) + (fConst350KI * fTemp182SE) /* Sum */)) + -(fConst352KI * ((fConst353KI * fTemp184SE) + (fConst354KI * fVec380SE[1]) /* Sum */)) /* Sum */);
			fTemp185SE = fVec380SE[0]; // step: 2584
			fVec379SE[0] = fTemp185SE;
			fTemp186SE = (fConst352KI * ((fConst355KI * fVec380SE[0]) + (fConst356KI * fVec379SE[1]) + (fConst355KI * fTemp184SE) /* Sum */)); // step: 2594
			fTemp187SE = fVec384SE[2]; // step: 2606
			fVec385SE[0] = (fTemp186SE + -(fConst359KI * ((fConst360KI * fTemp187SE) + (fConst363KI * fVec385SE[1]) /* Sum */)) /* Sum */);
			fTemp188SE = fVec385SE[0]; // step: 2621
			fVec384SE[0] = fTemp188SE;
			fTemp189SE = fVec389SE[2]; // step: 2641
			fVec390SE[0] = ((fConst359KI * ((fConst365KI * fVec385SE[0]) + (fConst366KI * fVec384SE[1]) + (fConst365KI * fTemp187SE) /* Sum */)) + -(fConst367KI * ((fConst368KI * fTemp189SE) + (fConst369KI * fVec390SE[1]) /* Sum */)) /* Sum */);
			fTemp190SE = fVec390SE[0]; // step: 2653
			fVec389SE[0] = fTemp190SE;
			fTemp191SE = fVec394SE[2]; // step: 2673
			fVec395SE[0] = ((fConst367KI * ((fConst371KI * fVec390SE[0]) + (fConst372KI * fVec389SE[1]) + (fConst371KI * fTemp189SE) /* Sum */)) + -(fConst373KI * ((fConst374KI * fTemp191SE) + (fConst375KI * fVec395SE[1]) /* Sum */)) /* Sum */);
			fTemp192SE = fVec395SE[0]; // step: 2685
			fVec394SE[0] = fTemp192SE;
			fTemp193SE = fVec397SE[2]; // step: 2693
			fVec398SE[0] = (fTemp186SE + -(fConst376KI * ((fConst377KI * fTemp193SE) + (fConst378KI * fVec398SE[1]) /* Sum */)) /* Sum */);
			fTemp194SE = fVec398SE[0]; // step: 2705
			fVec397SE[0] = fTemp194SE;
			fTemp195SE = fVec402SE[2]; // step: 2725
			fVec403SE[0] = ((fConst376KI * ((fConst380KI * fVec398SE[0]) + (fConst381KI * fVec397SE[1]) + (fConst380KI * fTemp193SE) /* Sum */)) + -(fConst382KI * ((fConst383KI * fTemp195SE) + (fConst384KI * fVec403SE[1]) /* Sum */)) /* Sum */);
			fTemp196SE = fVec403SE[0]; // step: 2737
			fVec402SE[0] = fTemp196SE;
			fTemp197SE = fVec407SE[2]; // step: 2755
			fVec408SE[0] = ((fConst382KI * ((fConst385KI * fVec403SE[0]) + (fConst386KI * fVec402SE[1]) + (fConst385KI * fTemp195SE) /* Sum */)) + -(fConst387KI * ((fConst388KI * fTemp197SE) + (fConst389KI * fVec408SE[1]) /* Sum */)) /* Sum */);
			fTemp198SE = fVec408SE[0]; // step: 2767
			fVec407SE[0] = fTemp198SE;
			fTemp199SE = (fConst387KI * ((fConst390KI * fVec408SE[0]) + (fConst391KI * fVec407SE[1]) + (fConst390KI * fTemp197SE) /* Sum */)); // step: 2777
			fTemp200SE = fVec412SE[2]; // step: 2789
			fVec413SE[0] = (fTemp199SE + -(fConst394KI * ((fConst395KI * fTemp200SE) + (fConst398KI * fVec413SE[1]) /* Sum */)) /* Sum */);
			fTemp201SE = fVec413SE[0]; // step: 2804
			fVec412SE[0] = fTemp201SE;
			fTemp202SE = fVec417SE[2]; // step: 2824
			fVec418SE[0] = ((fConst394KI * ((fConst400KI * fVec413SE[0]) + (fConst401KI * fVec412SE[1]) + (fConst400KI * fTemp200SE) /* Sum */)) + -(fConst402KI * ((fConst403KI * fTemp202SE) + (fConst404KI * fVec418SE[1]) /* Sum */)) /* Sum */);
			fTemp203SE = fVec418SE[0]; // step: 2836
			fVec417SE[0] = fTemp203SE;
			fTemp204SE = fVec422SE[2]; // step: 2856
			fVec423SE[0] = ((fConst402KI * ((fConst406KI * fVec418SE[0]) + (fConst407KI * fVec417SE[1]) + (fConst406KI * fTemp202SE) /* Sum */)) + -(fConst408KI * ((fConst409KI * fTemp204SE) + (fConst410KI * fVec423SE[1]) /* Sum */)) /* Sum */);
			fTemp205SE = fVec423SE[0]; // step: 2868
			fVec422SE[0] = fTemp205SE;
			fTemp206SE = fVec425SE[2]; // step: 2876
			fVec426SE[0] = (fTemp199SE + -(fConst411KI * ((fConst412KI * fTemp206SE) + (fConst413KI * fVec426SE[1]) /* Sum */)) /* Sum */);
			fTemp207SE = fVec426SE[0]; // step: 2888
			fVec425SE[0] = fTemp207SE;
			fTemp208SE = fVec430SE[2]; // step: 2908
			fVec431SE[0] = ((fConst411KI * ((fConst415KI * fVec426SE[0]) + (fConst416KI * fVec425SE[1]) + (fConst415KI * fTemp206SE) /* Sum */)) + -(fConst417KI * ((fConst418KI * fTemp208SE) + (fConst419KI * fVec431SE[1]) /* Sum */)) /* Sum */);
			fTemp209SE = fVec431SE[0]; // step: 2920
			fVec430SE[0] = fTemp209SE;
			fTemp210SE = fVec435SE[2]; // step: 2938
			fVec436SE[0] = ((fConst417KI * ((fConst420KI * fVec431SE[0]) + (fConst421KI * fVec430SE[1]) + (fConst420KI * fTemp208SE) /* Sum */)) + -(fConst422KI * ((fConst423KI * fTemp210SE) + (fConst424KI * fVec436SE[1]) /* Sum */)) /* Sum */);
			fTemp211SE = fVec436SE[0]; // step: 2950
			fVec435SE[0] = fTemp211SE;
			fTemp212SE = (fConst422KI * ((fConst425KI * fVec436SE[0]) + (fConst426KI * fVec435SE[1]) + (fConst425KI * fTemp210SE) /* Sum */)); // step: 2960
			fTemp213SE = fVec440SE[2]; // step: 2972
			fVec441SE[0] = (fTemp212SE + -(fConst429KI * ((fConst430KI * fTemp213SE) + (fConst433KI * fVec441SE[1]) /* Sum */)) /* Sum */);
			fTemp214SE = fVec441SE[0]; // step: 2987
			fVec440SE[0] = fTemp214SE;
			fTemp215SE = fVec445SE[2]; // step: 3007
			fVec446SE[0] = ((fConst429KI * ((fConst435KI * fVec441SE[0]) + (fConst436KI * fVec440SE[1]) + (fConst435KI * fTemp213SE) /* Sum */)) + -(fConst437KI * ((fConst438KI * fTemp215SE) + (fConst439KI * fVec446SE[1]) /* Sum */)) /* Sum */);
			fTemp216SE = fVec446SE[0]; // step: 3019
			fVec445SE[0] = fTemp216SE;
			fTemp217SE = fVec450SE[2]; // step: 3039
			fVec451SE[0] = ((fConst437KI * ((fConst441KI * fVec446SE[0]) + (fConst442KI * fVec445SE[1]) + (fConst441KI * fTemp215SE) /* Sum */)) + -(fConst443KI * ((fConst444KI * fTemp217SE) + (fConst445KI * fVec451SE[1]) /* Sum */)) /* Sum */);
			fTemp218SE = fVec451SE[0]; // step: 3051
			fVec450SE[0] = fTemp218SE;
			fTemp219SE = fVec453SE[2]; // step: 3059
			fVec454SE[0] = (fTemp212SE + -(fConst446KI * ((fConst447KI * fTemp219SE) + (fConst448KI * fVec454SE[1]) /* Sum */)) /* Sum */);
			fTemp220SE = fVec454SE[0]; // step: 3071
			fVec453SE[0] = fTemp220SE;
			fTemp221SE = fVec458SE[2]; // step: 3091
			fVec459SE[0] = ((fConst446KI * ((fConst450KI * fVec454SE[0]) + (fConst451KI * fVec453SE[1]) + (fConst450KI * fTemp219SE) /* Sum */)) + -(fConst452KI * ((fConst453KI * fTemp221SE) + (fConst454KI * fVec459SE[1]) /* Sum */)) /* Sum */);
			fTemp222SE = fVec459SE[0]; // step: 3103
			fVec458SE[0] = fTemp222SE;
			fTemp223SE = fVec463SE[2]; // step: 3121
			fVec464SE[0] = ((fConst452KI * ((fConst455KI * fVec459SE[0]) + (fConst456KI * fVec458SE[1]) + (fConst455KI * fTemp221SE) /* Sum */)) + -(fConst457KI * ((fConst458KI * fTemp223SE) + (fConst459KI * fVec464SE[1]) /* Sum */)) /* Sum */);
			fTemp224SE = fVec464SE[0]; // step: 3133
			fVec463SE[0] = fTemp224SE;
			fTemp225SE = (fConst457KI * ((fConst460KI * fVec464SE[0]) + (fConst461KI * fVec463SE[1]) + (fConst460KI * fTemp223SE) /* Sum */)); // step: 3143
			fTemp226SE = fVec468SE[2]; // step: 3155
			fVec469SE[0] = (fTemp225SE + -(fConst464KI * ((fConst465KI * fTemp226SE) + (fConst468KI * fVec469SE[1]) /* Sum */)) /* Sum */);
			fTemp227SE = fVec469SE[0]; // step: 3170
			fVec468SE[0] = fTemp227SE;
			fTemp228SE = fVec473SE[2]; // step: 3190
			fVec474SE[0] = ((fConst464KI * ((fConst470KI * fVec469SE[0]) + (fConst471KI * fVec468SE[1]) + (fConst470KI * fTemp226SE) /* Sum */)) + -(fConst472KI * ((fConst473KI * fTemp228SE) + (fConst474KI * fVec474SE[1]) /* Sum */)) /* Sum */);
			fTemp229SE = fVec474SE[0]; // step: 3202
			fVec473SE[0] = fTemp229SE;
			fTemp230SE = fVec478SE[2]; // step: 3222
			fVec479SE[0] = ((fConst472KI * ((fConst476KI * fVec474SE[0]) + (fConst477KI * fVec473SE[1]) + (fConst476KI * fTemp228SE) /* Sum */)) + -(fConst478KI * ((fConst479KI * fTemp230SE) + (fConst480KI * fVec479SE[1]) /* Sum */)) /* Sum */);
			fTemp231SE = fVec479SE[0]; // step: 3234
			fVec478SE[0] = fTemp231SE;
			fTemp232SE = fVec481SE[2]; // step: 3242
			fVec482SE[0] = (fTemp225SE + -(fConst481KI * ((fConst482KI * fTemp232SE) + (fConst483KI * fVec482SE[1]) /* Sum */)) /* Sum */);
			fTemp233SE = fVec482SE[0]; // step: 3254
			fVec481SE[0] = fTemp233SE;
			fTemp234SE = fVec486SE[2]; // step: 3274
			fVec487SE[0] = ((fConst481KI * ((fConst485KI * fVec482SE[0]) + (fConst486KI * fVec481SE[1]) + (fConst485KI * fTemp232SE) /* Sum */)) + -(fConst487KI * ((fConst488KI * fTemp234SE) + (fConst489KI * fVec487SE[1]) /* Sum */)) /* Sum */);
			fTemp235SE = fVec487SE[0]; // step: 3286
			fVec486SE[0] = fTemp235SE;
			fTemp236SE = fVec491SE[2]; // step: 3304
			fVec492SE[0] = ((fConst487KI * ((fConst490KI * fVec487SE[0]) + (fConst491KI * fVec486SE[1]) + (fConst490KI * fTemp234SE) /* Sum */)) + -(fConst492KI * ((fConst493KI * fTemp236SE) + (fConst494KI * fVec492SE[1]) /* Sum */)) /* Sum */);
			fTemp237SE = fVec492SE[0]; // step: 3316
			fVec491SE[0] = fTemp237SE;
			fVec494SE[0] = ((fVec494SE[1] * fSlow108BE) + (fabsf((fConst23KI * ((fConst497KI * fVec115SE[0]) + (fConst498KI * fVec114SE[1]) + (fConst497KI * fTemp61SE) /* Sum */))) * fSlow109BE) /* Sum */);
			fSlow110SE = (fSlow106BE + (2e+01f * log10f(fVec494SE[0])) /* Sum */);
			fVec498SE[0] = ((fSlow108BE * fVec498SE[1]) + (fSlow109BE * fabsf((fConst58KI * ((fConst500KI * fVec143SE[0]) + (fConst501KI * fVec142SE[1]) + (fConst500KI * fTemp74SE) /* Sum */)))) /* Sum */);
			fSlow111SE = (fSlow106BE + (2e+01f * log10f(fVec498SE[0])) /* Sum */);
			fVec502SE[0] = ((fSlow108BE * fVec502SE[1]) + (fSlow109BE * fabsf((fConst93KI * ((fConst503KI * fVec171SE[0]) + (fConst504KI * fVec170SE[1]) + (fConst503KI * fTemp87SE) /* Sum */)))) /* Sum */);
			fSlow112SE = (fSlow106BE + (2e+01f * log10f(fVec502SE[0])) /* Sum */);
			fVec506SE[0] = ((fSlow108BE * fVec506SE[1]) + (fSlow109BE * fabsf((fConst128KI * ((fConst506KI * fVec199SE[0]) + (fConst507KI * fVec198SE[1]) + (fConst506KI * fTemp100SE) /* Sum */)))) /* Sum */);
			fSlow113SE = (fSlow106BE + (2e+01f * log10f(fVec506SE[0])) /* Sum */);
			fVec510SE[0] = ((fSlow108BE * fVec510SE[1]) + (fSlow109BE * fabsf((fConst163KI * ((fConst509KI * fVec227SE[0]) + (fConst510KI * fVec226SE[1]) + (fConst509KI * fTemp113SE) /* Sum */)))) /* Sum */);
			fSlow114SE = (fSlow106BE + (2e+01f * log10f(fVec510SE[0])) /* Sum */);
			fVec514SE[0] = ((fSlow108BE * fVec514SE[1]) + (fSlow109BE * fabsf((fConst198KI * ((fConst512KI * fVec255SE[0]) + (fConst513KI * fVec254SE[1]) + (fConst512KI * fTemp126SE) /* Sum */)))) /* Sum */);
			fSlow115SE = (fSlow106BE + (2e+01f * log10f(fVec514SE[0])) /* Sum */);
			fVec518SE[0] = ((fSlow108BE * fVec518SE[1]) + (fSlow109BE * fabsf((fConst233KI * ((fConst515KI * fVec283SE[0]) + (fConst516KI * fVec282SE[1]) + (fConst515KI * fTemp139SE) /* Sum */)))) /* Sum */);
			fSlow116SE = (fSlow106BE + (2e+01f * log10f(fVec518SE[0])) /* Sum */);
			fVec522SE[0] = ((fSlow108BE * fVec522SE[1]) + (fSlow109BE * fabsf((fConst268KI * ((fConst518KI * fVec311SE[0]) + (fConst519KI * fVec310SE[1]) + (fConst518KI * fTemp152SE) /* Sum */)))) /* Sum */);
			fSlow117SE = (fSlow106BE + (2e+01f * log10f(fVec522SE[0])) /* Sum */);
			fVec526SE[0] = ((fSlow108BE * fVec526SE[1]) + (fSlow109BE * fabsf((fConst303KI * ((fConst521KI * fVec339SE[0]) + (fConst522KI * fVec338SE[1]) + (fConst521KI * fTemp165SE) /* Sum */)))) /* Sum */);
			fSlow118SE = (fSlow106BE + (2e+01f * log10f(fVec526SE[0])) /* Sum */);
			fVec530SE[0] = ((fSlow108BE * fVec530SE[1]) + (fSlow109BE * fabsf((fConst338KI * ((fConst524KI * fVec367SE[0]) + (fConst525KI * fVec366SE[1]) + (fConst524KI * fTemp178SE) /* Sum */)))) /* Sum */);
			fSlow119SE = (fSlow106BE + (2e+01f * log10f(fVec530SE[0])) /* Sum */);
			fVec534SE[0] = ((fSlow108BE * fVec534SE[1]) + (fSlow109BE * fabsf((fConst373KI * ((fConst527KI * fVec395SE[0]) + (fConst528KI * fVec394SE[1]) + (fConst527KI * fTemp191SE) /* Sum */)))) /* Sum */);
			fSlow120SE = (fSlow106BE + (2e+01f * log10f(fVec534SE[0])) /* Sum */);
			fVec538SE[0] = ((fSlow108BE * fVec538SE[1]) + (fSlow109BE * fabsf((fConst408KI * ((fConst530KI * fVec423SE[0]) + (fConst531KI * fVec422SE[1]) + (fConst530KI * fTemp204SE) /* Sum */)))) /* Sum */);
			fSlow121SE = (fSlow106BE + (2e+01f * log10f(fVec538SE[0])) /* Sum */);
			fVec542SE[0] = ((fSlow108BE * fVec542SE[1]) + (fSlow109BE * fabsf((fConst443KI * ((fConst533KI * fVec451SE[0]) + (fConst534KI * fVec450SE[1]) + (fConst533KI * fTemp217SE) /* Sum */)))) /* Sum */);
			fSlow122SE = (fSlow106BE + (2e+01f * log10f(fVec542SE[0])) /* Sum */);
			fVec546SE[0] = ((fSlow108BE * fVec546SE[1]) + (fSlow109BE * fabsf((fConst478KI * ((fConst536KI * fVec479SE[0]) + (fConst537KI * fVec478SE[1]) + (fConst536KI * fTemp230SE) /* Sum */)))) /* Sum */);
			fSlow123SE = (fSlow106BE + (2e+01f * log10f(fVec546SE[0])) /* Sum */);
			fVec550SE[0] = ((fSlow108BE * fVec550SE[1]) + (fSlow109BE * fabsf((fConst492KI * ((fConst538KI * fVec492SE[0]) + (fConst539KI * fVec491SE[1]) + (fConst538KI * fTemp236SE) /* Sum */)))) /* Sum */);
			fSlow124SE = (fSlow106BE + (2e+01f * log10f(fVec550SE[0])) /* Sum */);
			output0[i] = (FAUSTFLOAT)(fTemp56SE);  // Zone Exec Code
			// post processing
			fVec550SE[1] = fVec550SE[0];
			fVec546SE[1] = fVec546SE[0];
			fVec542SE[1] = fVec542SE[0];
			fVec538SE[1] = fVec538SE[0];
			fVec534SE[1] = fVec534SE[0];
			fVec530SE[1] = fVec530SE[0];
			fVec526SE[1] = fVec526SE[0];
			fVec522SE[1] = fVec522SE[0];
			fVec518SE[1] = fVec518SE[0];
			fVec514SE[1] = fVec514SE[0];
			fVec510SE[1] = fVec510SE[0];
			fVec506SE[1] = fVec506SE[0];
			fVec502SE[1] = fVec502SE[0];
			fVec498SE[1] = fVec498SE[0];
			fVec494SE[1] = fVec494SE[0];
			fVec491SE[2] = fVec491SE[1];
			fVec491SE[1] = fVec491SE[0];
			fVec492SE[1] = fVec492SE[0];
			fVec486SE[2] = fVec486SE[1];
			fVec486SE[1] = fVec486SE[0];
			fVec487SE[1] = fVec487SE[0];
			fVec481SE[2] = fVec481SE[1];
			fVec481SE[1] = fVec481SE[0];
			fVec482SE[1] = fVec482SE[0];
			fVec478SE[2] = fVec478SE[1];
			fVec478SE[1] = fVec478SE[0];
			fVec479SE[1] = fVec479SE[0];
			fVec473SE[2] = fVec473SE[1];
			fVec473SE[1] = fVec473SE[0];
			fVec474SE[1] = fVec474SE[0];
			fVec468SE[2] = fVec468SE[1];
			fVec468SE[1] = fVec468SE[0];
			fVec469SE[1] = fVec469SE[0];
			fVec463SE[2] = fVec463SE[1];
			fVec463SE[1] = fVec463SE[0];
			fVec464SE[1] = fVec464SE[0];
			fVec458SE[2] = fVec458SE[1];
			fVec458SE[1] = fVec458SE[0];
			fVec459SE[1] = fVec459SE[0];
			fVec453SE[2] = fVec453SE[1];
			fVec453SE[1] = fVec453SE[0];
			fVec454SE[1] = fVec454SE[0];
			fVec450SE[2] = fVec450SE[1];
			fVec450SE[1] = fVec450SE[0];
			fVec451SE[1] = fVec451SE[0];
			fVec445SE[2] = fVec445SE[1];
			fVec445SE[1] = fVec445SE[0];
			fVec446SE[1] = fVec446SE[0];
			fVec440SE[2] = fVec440SE[1];
			fVec440SE[1] = fVec440SE[0];
			fVec441SE[1] = fVec441SE[0];
			fVec435SE[2] = fVec435SE[1];
			fVec435SE[1] = fVec435SE[0];
			fVec436SE[1] = fVec436SE[0];
			fVec430SE[2] = fVec430SE[1];
			fVec430SE[1] = fVec430SE[0];
			fVec431SE[1] = fVec431SE[0];
			fVec425SE[2] = fVec425SE[1];
			fVec425SE[1] = fVec425SE[0];
			fVec426SE[1] = fVec426SE[0];
			fVec422SE[2] = fVec422SE[1];
			fVec422SE[1] = fVec422SE[0];
			fVec423SE[1] = fVec423SE[0];
			fVec417SE[2] = fVec417SE[1];
			fVec417SE[1] = fVec417SE[0];
			fVec418SE[1] = fVec418SE[0];
			fVec412SE[2] = fVec412SE[1];
			fVec412SE[1] = fVec412SE[0];
			fVec413SE[1] = fVec413SE[0];
			fVec407SE[2] = fVec407SE[1];
			fVec407SE[1] = fVec407SE[0];
			fVec408SE[1] = fVec408SE[0];
			fVec402SE[2] = fVec402SE[1];
			fVec402SE[1] = fVec402SE[0];
			fVec403SE[1] = fVec403SE[0];
			fVec397SE[2] = fVec397SE[1];
			fVec397SE[1] = fVec397SE[0];
			fVec398SE[1] = fVec398SE[0];
			fVec394SE[2] = fVec394SE[1];
			fVec394SE[1] = fVec394SE[0];
			fVec395SE[1] = fVec395SE[0];
			fVec389SE[2] = fVec389SE[1];
			fVec389SE[1] = fVec389SE[0];
			fVec390SE[1] = fVec390SE[0];
			fVec384SE[2] = fVec384SE[1];
			fVec384SE[1] = fVec384SE[0];
			fVec385SE[1] = fVec385SE[0];
			fVec379SE[2] = fVec379SE[1];
			fVec379SE[1] = fVec379SE[0];
			fVec380SE[1] = fVec380SE[0];
			fVec374SE[2] = fVec374SE[1];
			fVec374SE[1] = fVec374SE[0];
			fVec375SE[1] = fVec375SE[0];
			fVec369SE[2] = fVec369SE[1];
			fVec369SE[1] = fVec369SE[0];
			fVec370SE[1] = fVec370SE[0];
			fVec366SE[2] = fVec366SE[1];
			fVec366SE[1] = fVec366SE[0];
			fVec367SE[1] = fVec367SE[0];
			fVec361SE[2] = fVec361SE[1];
			fVec361SE[1] = fVec361SE[0];
			fVec362SE[1] = fVec362SE[0];
			fVec356SE[2] = fVec356SE[1];
			fVec356SE[1] = fVec356SE[0];
			fVec357SE[1] = fVec357SE[0];
			fVec351SE[2] = fVec351SE[1];
			fVec351SE[1] = fVec351SE[0];
			fVec352SE[1] = fVec352SE[0];
			fVec346SE[2] = fVec346SE[1];
			fVec346SE[1] = fVec346SE[0];
			fVec347SE[1] = fVec347SE[0];
			fVec341SE[2] = fVec341SE[1];
			fVec341SE[1] = fVec341SE[0];
			fVec342SE[1] = fVec342SE[0];
			fVec338SE[2] = fVec338SE[1];
			fVec338SE[1] = fVec338SE[0];
			fVec339SE[1] = fVec339SE[0];
			fVec333SE[2] = fVec333SE[1];
			fVec333SE[1] = fVec333SE[0];
			fVec334SE[1] = fVec334SE[0];
			fVec328SE[2] = fVec328SE[1];
			fVec328SE[1] = fVec328SE[0];
			fVec329SE[1] = fVec329SE[0];
			fVec323SE[2] = fVec323SE[1];
			fVec323SE[1] = fVec323SE[0];
			fVec324SE[1] = fVec324SE[0];
			fVec318SE[2] = fVec318SE[1];
			fVec318SE[1] = fVec318SE[0];
			fVec319SE[1] = fVec319SE[0];
			fVec313SE[2] = fVec313SE[1];
			fVec313SE[1] = fVec313SE[0];
			fVec314SE[1] = fVec314SE[0];
			fVec310SE[2] = fVec310SE[1];
			fVec310SE[1] = fVec310SE[0];
			fVec311SE[1] = fVec311SE[0];
			fVec305SE[2] = fVec305SE[1];
			fVec305SE[1] = fVec305SE[0];
			fVec306SE[1] = fVec306SE[0];
			fVec300SE[2] = fVec300SE[1];
			fVec300SE[1] = fVec300SE[0];
			fVec301SE[1] = fVec301SE[0];
			fVec295SE[2] = fVec295SE[1];
			fVec295SE[1] = fVec295SE[0];
			fVec296SE[1] = fVec296SE[0];
			fVec290SE[2] = fVec290SE[1];
			fVec290SE[1] = fVec290SE[0];
			fVec291SE[1] = fVec291SE[0];
			fVec285SE[2] = fVec285SE[1];
			fVec285SE[1] = fVec285SE[0];
			fVec286SE[1] = fVec286SE[0];
			fVec282SE[2] = fVec282SE[1];
			fVec282SE[1] = fVec282SE[0];
			fVec283SE[1] = fVec283SE[0];
			fVec277SE[2] = fVec277SE[1];
			fVec277SE[1] = fVec277SE[0];
			fVec278SE[1] = fVec278SE[0];
			fVec272SE[2] = fVec272SE[1];
			fVec272SE[1] = fVec272SE[0];
			fVec273SE[1] = fVec273SE[0];
			fVec267SE[2] = fVec267SE[1];
			fVec267SE[1] = fVec267SE[0];
			fVec268SE[1] = fVec268SE[0];
			fVec262SE[2] = fVec262SE[1];
			fVec262SE[1] = fVec262SE[0];
			fVec263SE[1] = fVec263SE[0];
			fVec257SE[2] = fVec257SE[1];
			fVec257SE[1] = fVec257SE[0];
			fVec258SE[1] = fVec258SE[0];
			fVec254SE[2] = fVec254SE[1];
			fVec254SE[1] = fVec254SE[0];
			fVec255SE[1] = fVec255SE[0];
			fVec249SE[2] = fVec249SE[1];
			fVec249SE[1] = fVec249SE[0];
			fVec250SE[1] = fVec250SE[0];
			fVec244SE[2] = fVec244SE[1];
			fVec244SE[1] = fVec244SE[0];
			fVec245SE[1] = fVec245SE[0];
			fVec239SE[2] = fVec239SE[1];
			fVec239SE[1] = fVec239SE[0];
			fVec240SE[1] = fVec240SE[0];
			fVec234SE[2] = fVec234SE[1];
			fVec234SE[1] = fVec234SE[0];
			fVec235SE[1] = fVec235SE[0];
			fVec229SE[2] = fVec229SE[1];
			fVec229SE[1] = fVec229SE[0];
			fVec230SE[1] = fVec230SE[0];
			fVec226SE[2] = fVec226SE[1];
			fVec226SE[1] = fVec226SE[0];
			fVec227SE[1] = fVec227SE[0];
			fVec221SE[2] = fVec221SE[1];
			fVec221SE[1] = fVec221SE[0];
			fVec222SE[1] = fVec222SE[0];
			fVec216SE[2] = fVec216SE[1];
			fVec216SE[1] = fVec216SE[0];
			fVec217SE[1] = fVec217SE[0];
			fVec211SE[2] = fVec211SE[1];
			fVec211SE[1] = fVec211SE[0];
			fVec212SE[1] = fVec212SE[0];
			fVec206SE[2] = fVec206SE[1];
			fVec206SE[1] = fVec206SE[0];
			fVec207SE[1] = fVec207SE[0];
			fVec201SE[2] = fVec201SE[1];
			fVec201SE[1] = fVec201SE[0];
			fVec202SE[1] = fVec202SE[0];
			fVec198SE[2] = fVec198SE[1];
			fVec198SE[1] = fVec198SE[0];
			fVec199SE[1] = fVec199SE[0];
			fVec193SE[2] = fVec193SE[1];
			fVec193SE[1] = fVec193SE[0];
			fVec194SE[1] = fVec194SE[0];
			fVec188SE[2] = fVec188SE[1];
			fVec188SE[1] = fVec188SE[0];
			fVec189SE[1] = fVec189SE[0];
			fVec183SE[2] = fVec183SE[1];
			fVec183SE[1] = fVec183SE[0];
			fVec184SE[1] = fVec184SE[0];
			fVec178SE[2] = fVec178SE[1];
			fVec178SE[1] = fVec178SE[0];
			fVec179SE[1] = fVec179SE[0];
			fVec173SE[2] = fVec173SE[1];
			fVec173SE[1] = fVec173SE[0];
			fVec174SE[1] = fVec174SE[0];
			fVec170SE[2] = fVec170SE[1];
			fVec170SE[1] = fVec170SE[0];
			fVec171SE[1] = fVec171SE[0];
			fVec165SE[2] = fVec165SE[1];
			fVec165SE[1] = fVec165SE[0];
			fVec166SE[1] = fVec166SE[0];
			fVec160SE[2] = fVec160SE[1];
			fVec160SE[1] = fVec160SE[0];
			fVec161SE[1] = fVec161SE[0];
			fVec155SE[2] = fVec155SE[1];
			fVec155SE[1] = fVec155SE[0];
			fVec156SE[1] = fVec156SE[0];
			fVec150SE[2] = fVec150SE[1];
			fVec150SE[1] = fVec150SE[0];
			fVec151SE[1] = fVec151SE[0];
			fVec145SE[2] = fVec145SE[1];
			fVec145SE[1] = fVec145SE[0];
			fVec146SE[1] = fVec146SE[0];
			fVec142SE[2] = fVec142SE[1];
			fVec142SE[1] = fVec142SE[0];
			fVec143SE[1] = fVec143SE[0];
			fVec137SE[2] = fVec137SE[1];
			fVec137SE[1] = fVec137SE[0];
			fVec138SE[1] = fVec138SE[0];
			fVec132SE[2] = fVec132SE[1];
			fVec132SE[1] = fVec132SE[0];
			fVec133SE[1] = fVec133SE[0];
			fVec127SE[2] = fVec127SE[1];
			fVec127SE[1] = fVec127SE[0];
			fVec128SE[1] = fVec128SE[0];
			fVec122SE[2] = fVec122SE[1];
			fVec122SE[1] = fVec122SE[0];
			fVec123SE[1] = fVec123SE[0];
			fVec117SE[2] = fVec117SE[1];
			fVec117SE[1] = fVec117SE[0];
			fVec118SE[1] = fVec118SE[0];
			fVec114SE[2] = fVec114SE[1];
			fVec114SE[1] = fVec114SE[0];
			fVec115SE[1] = fVec115SE[0];
			fVec109SE[2] = fVec109SE[1];
			fVec109SE[1] = fVec109SE[0];
			fVec110SE[1] = fVec110SE[0];
			fVec104SE[2] = fVec104SE[1];
			fVec104SE[1] = fVec104SE[0];
			fVec105SE[1] = fVec105SE[0];
			fVec101SE[1] = fVec101SE[0];
			fVec100SE[1] = fVec100SE[0];
			fVec97SE[1] = fVec97SE[0];
			fVec96SE[1] = fVec96SE[0];
			fVec93SE[1] = fVec93SE[0];
			fVec92SE[1] = fVec92SE[0];
			fVec89SE[1] = fVec89SE[0];
			fVec88SE[1] = fVec88SE[0];
			fVec85SE[1] = fVec85SE[0];
			fVec84SE[1] = fVec84SE[0];
			fVec81SE[1] = fVec81SE[0];
			fVec80SE[1] = fVec80SE[0];
			fVec77SE[1] = fVec77SE[0];
			fVec76SE[1] = fVec76SE[0];
			fVec73SE[1] = fVec73SE[0];
			fVec72SE[1] = fVec72SE[0];
			fVec69SE[1] = fVec69SE[0];
			fVec68SE[1] = fVec68SE[0];
			fVec65SE[1] = fVec65SE[0];
			fVec64SE[1] = fVec64SE[0];
			fVec45SE[1] = fVec45SE[0];
			fVec41SI[3] = fVec41SI[2];
			fVec41SI[2] = fVec41SI[1];
			fVec41SI[1] = fVec41SI[0];
			fVec42SI[1] = fVec42SI[0];
			iVec39SI[1] = iVec39SI[0];
			fVec38SE[1] = fVec38SE[0];
			fVec36SE[1] = fVec36SE[0];
			fVec34SE[1] = fVec34SE[0];
			fVec33SE[1] = fVec33SE[0];
			fVec31SE[1] = fVec31SE[0];
			fVec30SE[1] = fVec30SE[0];
			fVec29SE[1] = fVec29SE[0];
			fVec27SE[1] = fVec27SE[0];
			fVec26SE[1] = fVec26SE[0];
			fVec24SE[1] = fVec24SE[0];
			fVec22SE[1] = fVec22SE[0];
			fVec21SE[1] = fVec21SE[0];
			fVec19SE[1] = fVec19SE[0];
			fVec18SE[1] = fVec18SE[0];
			fVec17SE[1] = fVec17SE[0];
			fVec15SE[1] = fVec15SE[0];
			fVec14SE[1] = fVec14SE[0];
			fVec12SE[1] = fVec12SE[0];
			fVec10SE[1] = fVec10SE[0];
			fVec9SE[1] = fVec9SE[0];
			fVec7SE[1] = fVec7SE[0];
			fVec6SE[1] = fVec6SE[0];
			fVec5SE[1] = fVec5SE[0];
			fVec1SE[1] = fVec1SE[0];
			fVec2SE[1] = fVec2SE[0];
			iVec0KC[3] = iVec0KC[2];
			iVec0KC[2] = iVec0KC[1];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState[0] = iVec0KC[1];
		iVec0KCState[1] = iVec0KC[2];
		iVec0KCState[2] = iVec0KC[3];
		fVec2SEState = fVec2SE[1];
		fVec1SEState = fVec1SE[1];
		fVec5SEState = fVec5SE[1];
		fVec6SEState = fVec6SE[1];
		fVec7SEState = fVec7SE[1];
		fVec9SEState = fVec9SE[1];
		fVec10SEState = fVec10SE[1];
		fVec12SEState = fVec12SE[1];
		fVec14SEState = fVec14SE[1];
		fVec15SEState = fVec15SE[1];
		fVec17SEState = fVec17SE[1];
		fVec18SEState = fVec18SE[1];
		fVec19SEState = fVec19SE[1];
		fVec21SEState = fVec21SE[1];
		fVec22SEState = fVec22SE[1];
		fVec24SEState = fVec24SE[1];
		fVec26SEState = fVec26SE[1];
		fVec27SEState = fVec27SE[1];
		fVec29SEState = fVec29SE[1];
		fVec30SEState = fVec30SE[1];
		fVec31SEState = fVec31SE[1];
		fVec33SEState = fVec33SE[1];
		fVec34SEState = fVec34SE[1];
		fVec36SEState = fVec36SE[1];
		fVec38SEState = fVec38SE[1];
		iVec39SIState = iVec39SI[1];
		fVec42SIState = fVec42SI[1];
		fVec41SIState[0] = fVec41SI[1];
		fVec41SIState[1] = fVec41SI[2];
		fVec41SIState[2] = fVec41SI[3];
		fVec45SEState = fVec45SE[1];
		fVec64SEState = fVec64SE[1];
		fVec65SEState = fVec65SE[1];
		fVec68SEState = fVec68SE[1];
		fVec69SEState = fVec69SE[1];
		fVec72SEState = fVec72SE[1];
		fVec73SEState = fVec73SE[1];
		fVec76SEState = fVec76SE[1];
		fVec77SEState = fVec77SE[1];
		fVec80SEState = fVec80SE[1];
		fVec81SEState = fVec81SE[1];
		fVec84SEState = fVec84SE[1];
		fVec85SEState = fVec85SE[1];
		fVec88SEState = fVec88SE[1];
		fVec89SEState = fVec89SE[1];
		fVec92SEState = fVec92SE[1];
		fVec93SEState = fVec93SE[1];
		fVec96SEState = fVec96SE[1];
		fVec97SEState = fVec97SE[1];
		fVec100SEState = fVec100SE[1];
		fVec101SEState = fVec101SE[1];
		fVec105SEState = fVec105SE[1];
		fVec104SEState[0] = fVec104SE[1];
		fVec104SEState[1] = fVec104SE[2];
		fVec110SEState = fVec110SE[1];
		fVec109SEState[0] = fVec109SE[1];
		fVec109SEState[1] = fVec109SE[2];
		fVec115SEState = fVec115SE[1];
		fVec114SEState[0] = fVec114SE[1];
		fVec114SEState[1] = fVec114SE[2];
		fVec118SEState = fVec118SE[1];
		fVec117SEState[0] = fVec117SE[1];
		fVec117SEState[1] = fVec117SE[2];
		fVec123SEState = fVec123SE[1];
		fVec122SEState[0] = fVec122SE[1];
		fVec122SEState[1] = fVec122SE[2];
		fVec128SEState = fVec128SE[1];
		fVec127SEState[0] = fVec127SE[1];
		fVec127SEState[1] = fVec127SE[2];
		fVec133SEState = fVec133SE[1];
		fVec132SEState[0] = fVec132SE[1];
		fVec132SEState[1] = fVec132SE[2];
		fVec138SEState = fVec138SE[1];
		fVec137SEState[0] = fVec137SE[1];
		fVec137SEState[1] = fVec137SE[2];
		fVec143SEState = fVec143SE[1];
		fVec142SEState[0] = fVec142SE[1];
		fVec142SEState[1] = fVec142SE[2];
		fVec146SEState = fVec146SE[1];
		fVec145SEState[0] = fVec145SE[1];
		fVec145SEState[1] = fVec145SE[2];
		fVec151SEState = fVec151SE[1];
		fVec150SEState[0] = fVec150SE[1];
		fVec150SEState[1] = fVec150SE[2];
		fVec156SEState = fVec156SE[1];
		fVec155SEState[0] = fVec155SE[1];
		fVec155SEState[1] = fVec155SE[2];
		fVec161SEState = fVec161SE[1];
		fVec160SEState[0] = fVec160SE[1];
		fVec160SEState[1] = fVec160SE[2];
		fVec166SEState = fVec166SE[1];
		fVec165SEState[0] = fVec165SE[1];
		fVec165SEState[1] = fVec165SE[2];
		fVec171SEState = fVec171SE[1];
		fVec170SEState[0] = fVec170SE[1];
		fVec170SEState[1] = fVec170SE[2];
		fVec174SEState = fVec174SE[1];
		fVec173SEState[0] = fVec173SE[1];
		fVec173SEState[1] = fVec173SE[2];
		fVec179SEState = fVec179SE[1];
		fVec178SEState[0] = fVec178SE[1];
		fVec178SEState[1] = fVec178SE[2];
		fVec184SEState = fVec184SE[1];
		fVec183SEState[0] = fVec183SE[1];
		fVec183SEState[1] = fVec183SE[2];
		fVec189SEState = fVec189SE[1];
		fVec188SEState[0] = fVec188SE[1];
		fVec188SEState[1] = fVec188SE[2];
		fVec194SEState = fVec194SE[1];
		fVec193SEState[0] = fVec193SE[1];
		fVec193SEState[1] = fVec193SE[2];
		fVec199SEState = fVec199SE[1];
		fVec198SEState[0] = fVec198SE[1];
		fVec198SEState[1] = fVec198SE[2];
		fVec202SEState = fVec202SE[1];
		fVec201SEState[0] = fVec201SE[1];
		fVec201SEState[1] = fVec201SE[2];
		fVec207SEState = fVec207SE[1];
		fVec206SEState[0] = fVec206SE[1];
		fVec206SEState[1] = fVec206SE[2];
		fVec212SEState = fVec212SE[1];
		fVec211SEState[0] = fVec211SE[1];
		fVec211SEState[1] = fVec211SE[2];
		fVec217SEState = fVec217SE[1];
		fVec216SEState[0] = fVec216SE[1];
		fVec216SEState[1] = fVec216SE[2];
		fVec222SEState = fVec222SE[1];
		fVec221SEState[0] = fVec221SE[1];
		fVec221SEState[1] = fVec221SE[2];
		fVec227SEState = fVec227SE[1];
		fVec226SEState[0] = fVec226SE[1];
		fVec226SEState[1] = fVec226SE[2];
		fVec230SEState = fVec230SE[1];
		fVec229SEState[0] = fVec229SE[1];
		fVec229SEState[1] = fVec229SE[2];
		fVec235SEState = fVec235SE[1];
		fVec234SEState[0] = fVec234SE[1];
		fVec234SEState[1] = fVec234SE[2];
		fVec240SEState = fVec240SE[1];
		fVec239SEState[0] = fVec239SE[1];
		fVec239SEState[1] = fVec239SE[2];
		fVec245SEState = fVec245SE[1];
		fVec244SEState[0] = fVec244SE[1];
		fVec244SEState[1] = fVec244SE[2];
		fVec250SEState = fVec250SE[1];
		fVec249SEState[0] = fVec249SE[1];
		fVec249SEState[1] = fVec249SE[2];
		fVec255SEState = fVec255SE[1];
		fVec254SEState[0] = fVec254SE[1];
		fVec254SEState[1] = fVec254SE[2];
		fVec258SEState = fVec258SE[1];
		fVec257SEState[0] = fVec257SE[1];
		fVec257SEState[1] = fVec257SE[2];
		fVec263SEState = fVec263SE[1];
		fVec262SEState[0] = fVec262SE[1];
		fVec262SEState[1] = fVec262SE[2];
		fVec268SEState = fVec268SE[1];
		fVec267SEState[0] = fVec267SE[1];
		fVec267SEState[1] = fVec267SE[2];
		fVec273SEState = fVec273SE[1];
		fVec272SEState[0] = fVec272SE[1];
		fVec272SEState[1] = fVec272SE[2];
		fVec278SEState = fVec278SE[1];
		fVec277SEState[0] = fVec277SE[1];
		fVec277SEState[1] = fVec277SE[2];
		fVec283SEState = fVec283SE[1];
		fVec282SEState[0] = fVec282SE[1];
		fVec282SEState[1] = fVec282SE[2];
		fVec286SEState = fVec286SE[1];
		fVec285SEState[0] = fVec285SE[1];
		fVec285SEState[1] = fVec285SE[2];
		fVec291SEState = fVec291SE[1];
		fVec290SEState[0] = fVec290SE[1];
		fVec290SEState[1] = fVec290SE[2];
		fVec296SEState = fVec296SE[1];
		fVec295SEState[0] = fVec295SE[1];
		fVec295SEState[1] = fVec295SE[2];
		fVec301SEState = fVec301SE[1];
		fVec300SEState[0] = fVec300SE[1];
		fVec300SEState[1] = fVec300SE[2];
		fVec306SEState = fVec306SE[1];
		fVec305SEState[0] = fVec305SE[1];
		fVec305SEState[1] = fVec305SE[2];
		fVec311SEState = fVec311SE[1];
		fVec310SEState[0] = fVec310SE[1];
		fVec310SEState[1] = fVec310SE[2];
		fVec314SEState = fVec314SE[1];
		fVec313SEState[0] = fVec313SE[1];
		fVec313SEState[1] = fVec313SE[2];
		fVec319SEState = fVec319SE[1];
		fVec318SEState[0] = fVec318SE[1];
		fVec318SEState[1] = fVec318SE[2];
		fVec324SEState = fVec324SE[1];
		fVec323SEState[0] = fVec323SE[1];
		fVec323SEState[1] = fVec323SE[2];
		fVec329SEState = fVec329SE[1];
		fVec328SEState[0] = fVec328SE[1];
		fVec328SEState[1] = fVec328SE[2];
		fVec334SEState = fVec334SE[1];
		fVec333SEState[0] = fVec333SE[1];
		fVec333SEState[1] = fVec333SE[2];
		fVec339SEState = fVec339SE[1];
		fVec338SEState[0] = fVec338SE[1];
		fVec338SEState[1] = fVec338SE[2];
		fVec342SEState = fVec342SE[1];
		fVec341SEState[0] = fVec341SE[1];
		fVec341SEState[1] = fVec341SE[2];
		fVec347SEState = fVec347SE[1];
		fVec346SEState[0] = fVec346SE[1];
		fVec346SEState[1] = fVec346SE[2];
		fVec352SEState = fVec352SE[1];
		fVec351SEState[0] = fVec351SE[1];
		fVec351SEState[1] = fVec351SE[2];
		fVec357SEState = fVec357SE[1];
		fVec356SEState[0] = fVec356SE[1];
		fVec356SEState[1] = fVec356SE[2];
		fVec362SEState = fVec362SE[1];
		fVec361SEState[0] = fVec361SE[1];
		fVec361SEState[1] = fVec361SE[2];
		fVec367SEState = fVec367SE[1];
		fVec366SEState[0] = fVec366SE[1];
		fVec366SEState[1] = fVec366SE[2];
		fVec370SEState = fVec370SE[1];
		fVec369SEState[0] = fVec369SE[1];
		fVec369SEState[1] = fVec369SE[2];
		fVec375SEState = fVec375SE[1];
		fVec374SEState[0] = fVec374SE[1];
		fVec374SEState[1] = fVec374SE[2];
		fVec380SEState = fVec380SE[1];
		fVec379SEState[0] = fVec379SE[1];
		fVec379SEState[1] = fVec379SE[2];
		fVec385SEState = fVec385SE[1];
		fVec384SEState[0] = fVec384SE[1];
		fVec384SEState[1] = fVec384SE[2];
		fVec390SEState = fVec390SE[1];
		fVec389SEState[0] = fVec389SE[1];
		fVec389SEState[1] = fVec389SE[2];
		fVec395SEState = fVec395SE[1];
		fVec394SEState[0] = fVec394SE[1];
		fVec394SEState[1] = fVec394SE[2];
		fVec398SEState = fVec398SE[1];
		fVec397SEState[0] = fVec397SE[1];
		fVec397SEState[1] = fVec397SE[2];
		fVec403SEState = fVec403SE[1];
		fVec402SEState[0] = fVec402SE[1];
		fVec402SEState[1] = fVec402SE[2];
		fVec408SEState = fVec408SE[1];
		fVec407SEState[0] = fVec407SE[1];
		fVec407SEState[1] = fVec407SE[2];
		fVec413SEState = fVec413SE[1];
		fVec412SEState[0] = fVec412SE[1];
		fVec412SEState[1] = fVec412SE[2];
		fVec418SEState = fVec418SE[1];
		fVec417SEState[0] = fVec417SE[1];
		fVec417SEState[1] = fVec417SE[2];
		fVec423SEState = fVec423SE[1];
		fVec422SEState[0] = fVec422SE[1];
		fVec422SEState[1] = fVec422SE[2];
		fVec426SEState = fVec426SE[1];
		fVec425SEState[0] = fVec425SE[1];
		fVec425SEState[1] = fVec425SE[2];
		fVec431SEState = fVec431SE[1];
		fVec430SEState[0] = fVec430SE[1];
		fVec430SEState[1] = fVec430SE[2];
		fVec436SEState = fVec436SE[1];
		fVec435SEState[0] = fVec435SE[1];
		fVec435SEState[1] = fVec435SE[2];
		fVec441SEState = fVec441SE[1];
		fVec440SEState[0] = fVec440SE[1];
		fVec440SEState[1] = fVec440SE[2];
		fVec446SEState = fVec446SE[1];
		fVec445SEState[0] = fVec445SE[1];
		fVec445SEState[1] = fVec445SE[2];
		fVec451SEState = fVec451SE[1];
		fVec450SEState[0] = fVec450SE[1];
		fVec450SEState[1] = fVec450SE[2];
		fVec454SEState = fVec454SE[1];
		fVec453SEState[0] = fVec453SE[1];
		fVec453SEState[1] = fVec453SE[2];
		fVec459SEState = fVec459SE[1];
		fVec458SEState[0] = fVec458SE[1];
		fVec458SEState[1] = fVec458SE[2];
		fVec464SEState = fVec464SE[1];
		fVec463SEState[0] = fVec463SE[1];
		fVec463SEState[1] = fVec463SE[2];
		fVec469SEState = fVec469SE[1];
		fVec468SEState[0] = fVec468SE[1];
		fVec468SEState[1] = fVec468SE[2];
		fVec474SEState = fVec474SE[1];
		fVec473SEState[0] = fVec473SE[1];
		fVec473SEState[1] = fVec473SE[2];
		fVec479SEState = fVec479SE[1];
		fVec478SEState[0] = fVec478SE[1];
		fVec478SEState[1] = fVec478SE[2];
		fVec482SEState = fVec482SE[1];
		fVec481SEState[0] = fVec481SE[1];
		fVec481SEState[1] = fVec481SE[2];
		fVec487SEState = fVec487SE[1];
		fVec486SEState[0] = fVec486SE[1];
		fVec486SEState[1] = fVec486SE[2];
		fVec492SEState = fVec492SE[1];
		fVec491SEState[0] = fVec491SE[1];
		fVec491SEState[1] = fVec491SE[2];
		fVec494SEState = fVec494SE[1];
		fVec498SEState = fVec498SE[1];
		fVec502SEState = fVec502SE[1];
		fVec506SEState = fVec506SE[1];
		fVec510SEState = fVec510SE[1];
		fVec514SEState = fVec514SE[1];
		fVec518SEState = fVec518SE[1];
		fVec522SEState = fVec522SE[1];
		fVec526SEState = fVec526SE[1];
		fVec530SEState = fVec530SE[1];
		fVec534SEState = fVec534SE[1];
		fVec538SEState = fVec538SE[1];
		fVec542SEState = fVec542SE[1];
		fVec546SEState = fVec546SE[1];
		fVec550SEState = fVec550SE[1];
		fbargraph0 = fSlow110SE;
		fbargraph1 = fSlow111SE;
		fbargraph2 = fSlow112SE;
		fbargraph3 = fSlow113SE;
		fbargraph4 = fSlow114SE;
		fbargraph5 = fSlow115SE;
		fbargraph6 = fSlow116SE;
		fbargraph7 = fSlow117SE;
		fbargraph8 = fSlow118SE;
		fbargraph9 = fSlow119SE;
		fbargraph10 = fSlow120SE;
		fbargraph11 = fSlow121SE;
		fbargraph12 = fSlow122SE;
		fbargraph13 = fSlow123SE;
		fbargraph14 = fSlow124SE;
	}
};


