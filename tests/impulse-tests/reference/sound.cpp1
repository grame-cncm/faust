//----------------------------------------------------------
// name: "sound"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	Soundfile* 	fSoundfile0;
	// Recursion delay iVec0SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec0SIState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "sound.dsp");
		m->declare("name", "sound");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 4; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
		if (uintptr_t(fSoundfile0) == 0) fSoundfile0 = defaultsound;
	}
	virtual void instanceClear() {
		iVec0SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("sound");
		ui_interface->addSoundfile("son", "{'sound1';'sound2'}", &fSoundfile0);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		Soundfile* fSoundfile0cache = fSoundfile0;
		int 	iVec0SI[2];
		int 	iSlow0BI = (fSoundfile0cache->fLength[0] + -1 /* Sum */); // Zone 2, step: 11
		int 	iTemp0SI; // step: 13
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		FAUSTFLOAT* output2 = output[2]; // Zone 3
		FAUSTFLOAT* output3 = output[3]; // Zone 3
		iVec0SI[1] = iVec0SIState;
		for (int i=0; i<count; i++) {
			iVec0SI[0] = (iVec0SI[1] + 1 /* Sum */);
			iTemp0SI = std::max(0, std::min(iVec0SI[0], iSlow0BI)); // step: 13
			output0[i] = (FAUSTFLOAT)(((float**)fSoundfile0cache->fBuffers)[0][fSoundfile0cache->fOffset[0]+iTemp0SI]);  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)(((float**)fSoundfile0cache->fBuffers)[1][fSoundfile0cache->fOffset[0]+iTemp0SI]);  // Zone Exec Code
			output2[i] = (FAUSTFLOAT)(((float**)fSoundfile0cache->fBuffers)[2][fSoundfile0cache->fOffset[0]+iTemp0SI]);  // Zone Exec Code
			output3[i] = (FAUSTFLOAT)(((float**)fSoundfile0cache->fBuffers)[3][fSoundfile0cache->fOffset[0]+iTemp0SI]);  // Zone Exec Code
			// post processing
			iVec0SI[1] = iVec0SI[0];
		}
		iVec0SIState = iVec0SI[1];
		fSoundfile0 = fSoundfile0cache;
	}
};


