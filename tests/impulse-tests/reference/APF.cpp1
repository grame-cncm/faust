//----------------------------------------------------------
// name: "APF"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fConst0KI; // step: 22
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	float 	fVec1SEState[2]; // Copy Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "APF.dsp");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("maxmsp.lib/author", "GRAME");
		m->declare("maxmsp.lib/copyright", "GRAME");
		m->declare("maxmsp.lib/license", "LGPL");
		m->declare("maxmsp.lib/name", "MaxMSP compatibility Library");
		m->declare("maxmsp.lib/version", "1.1");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "APF");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = (6.2831855f / std::min(1.92e+05f, std::max(1.0f, float(fSampleRate)))); // step: 22
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 1.0f;
		fslider1 = 1e+03f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		for (int j = 0; j < 2; j++) { fVec1SEState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("APF");
		ui_interface->addHorizontalSlider("Freq", &fslider1, 1e+03f, 1e+02f, 1e+04f, 1.0f);
		ui_interface->addHorizontalSlider("Q", &fslider0, 1.0f, 0.01f, 1e+02f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = (fConst0KI * std::max(0.0f, float(fslider1))); // Zone 2, step: 23
		float 	fSlow1BE = (sinf(fSlow0BE) / std::max(0.001f, float(fslider0))); // Zone 2, step: 25
		float 	fSlow2BE = (0.5f * fSlow1BE); // Zone 2, step: 26
		float 	fSlow3BE = (1.0f / (fSlow2BE + 1.0f /* Sum */)); // Zone 2, step: 28
		float 	fSlow4BE = (2.0f * cosf(fSlow0BE)); // Zone 2, step: 31
		float 	fTemp0SE; // step: 38
		float 	fSlow5BE = (1.0f + -fSlow2BE /* Sum */); // Zone 2, step: 40
		float 	fVec0SE[2];
		float 	fTemp1SE; // step: 47
		float 	fVec1SE[3];
		float 	fSlow6BE = (1.0f + (-0.5f * fSlow1BE) /* Sum */); // Zone 2, step: 50
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		fVec1SE[1] = fVec1SEState[0];
		fVec1SE[2] = fVec1SEState[1];
		for (int i=0; i<count; i++) {
			fTemp0SE = fVec1SE[2]; // step: 38
			fVec0SE[0] = ((float)input0[i] + -(fSlow3BE * ((fSlow5BE * fTemp0SE) + -(fSlow4BE * fVec0SE[1]) /* Sum */)) /* Sum */);
			fTemp1SE = fVec0SE[0]; // step: 47
			fVec1SE[0] = fTemp1SE;
			output0[i] = (FAUSTFLOAT)((fTemp0SE + (fSlow3BE * ((fSlow6BE * fVec0SE[0]) + -(fSlow4BE * fVec1SE[1]) /* Sum */)) /* Sum */));  // Zone Exec Code
			// post processing
			fVec1SE[2] = fVec1SE[1];
			fVec1SE[1] = fVec1SE[0];
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
		fVec1SEState[0] = fVec1SE[1];
		fVec1SEState[1] = fVec1SE[2];
	}
};


