//----------------------------------------------------------
// name: "tf_exp"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iVec0KCState; // Single Delay
	float 	fVec2SCState; // Single Delay
	float 	fConst0KI; // step: 17
	float 	fConst1KI; // step: 19
	float 	fConst2KI; // step: 20
	float 	fConst3KI; // step: 22
	float 	fConst4KI; // step: 24
	// Recursion delay fVec3SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec3SIState; // Single Delay
	float 	fConst5KI; // step: 41
	float 	fConst6KI; // step: 42
	float 	fConst7KI; // step: 46
	float 	fConst8KI; // step: 51
	float 	fConst9KI; // step: 55
	// Recursion delay fVec7SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec7SIState; // Single Delay
	float 	fVec6SIState[2]; // Copy Delay
	float 	fConst10KI; // step: 66
	float 	fConst11KI; // step: 75
	float 	fConst12KI; // step: 76
	float 	fConst13KI; // step: 77
	float 	fConst14KI; // step: 80
	float 	fConst15KI; // step: 82
	float 	fConst16KI; // step: 85
	float 	fConst17KI; // step: 89
	float 	fConst18KI; // step: 92
	// Recursion delay fVec12SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SIState; // Single Delay
	float 	fVec11SIState[2]; // Copy Delay
	// Recursion delay fVec14SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec14SIState; // Single Delay
	// Recursion delay fVec17SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec17SIState; // Single Delay
	float 	fVec16SIState[2]; // Copy Delay
	float 	fVec21SIState; // Single Delay
	float 	fConst19KI; // step: 127
	// Recursion delay fVec22SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec22SIState; // Single Delay
	float 	fConst20KI; // step: 143
	float 	fConst21KI; // step: 146
	// Recursion delay fVec26SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec26SIState; // Single Delay
	float 	fVec25SIState[2]; // Copy Delay
	float 	fConst22KI; // step: 162
	// Recursion delay fVec28SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec28SIState; // Single Delay
	// Recursion delay fVec31SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec31SIState; // Single Delay
	float 	fVec30SIState[2]; // Copy Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("filename", "tf_exp.dsp");
		m->declare("name", "tf_exp");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 17
		fConst1KI = tanf((3553.1414f / fConst0KI)); // step: 19
		fConst2KI = (1.0f / fConst1KI); // step: 20
		fConst3KI = (1.0f / (fConst2KI + 1.0f /* Sum */)); // step: 22
		fConst4KI = (1.0f + -fConst2KI /* Sum */); // step: 24
		fConst5KI = (((fConst2KI + 1.0f /* Sum */) / fConst1KI) + 1.0f /* Sum */); // step: 41
		fConst6KI = (1.0f / fConst5KI); // step: 42
		fConst7KI = (((fConst2KI + -1.0f /* Sum */) / fConst1KI) + 1.0f /* Sum */); // step: 46
		fConst8KI = powf(fConst1KI,2.0f); // step: 51
		fConst9KI = (2.0f * (1.0f + -(1.0f / fConst8KI) /* Sum */)); // step: 55
		fConst10KI = (1.0f / (fConst8KI * fConst5KI)); // step: 66
		fConst11KI = tanf((1776.5707f / fConst0KI)); // step: 75
		fConst12KI = (1.0f / fConst11KI); // step: 76
		fConst13KI = (fConst12KI + 1.0f /* Sum */); // step: 77
		fConst14KI = (1.0f / ((fConst13KI / fConst11KI) + 1.0f /* Sum */)); // step: 80
		fConst15KI = (1.0f + -fConst12KI /* Sum */); // step: 82
		fConst16KI = (1.0f + -(fConst15KI / fConst11KI) /* Sum */); // step: 85
		fConst17KI = (1.0f / powf(fConst11KI,2.0f)); // step: 89
		fConst18KI = (2.0f * (1.0f + -fConst17KI /* Sum */)); // step: 92
		fConst19KI = (1.0f / fConst13KI); // step: 127
		fConst20KI = (1.0f / (((fConst12KI + 1.0f /* Sum */) / fConst11KI) + 1.0f /* Sum */)); // step: 143
		fConst21KI = (((fConst12KI + -1.0f /* Sum */) / fConst11KI) + 1.0f /* Sum */); // step: 146
		fConst22KI = (1.0f / (fConst11KI * fConst5KI)); // step: 162
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		iVec0KCState = 0;
		fVec2SCState = 0;
		fVec3SIState = 0;
		fVec7SIState = 0;
		for (int j = 0; j < 2; j++) { fVec6SIState[j] = 0; }
		fVec12SIState = 0;
		for (int j = 0; j < 2; j++) { fVec11SIState[j] = 0; }
		fVec14SIState = 0;
		fVec17SIState = 0;
		for (int j = 0; j < 2; j++) { fVec16SIState[j] = 0; }
		fVec21SIState = 0;
		fVec22SIState = 0;
		fVec26SIState = 0;
		for (int j = 0; j < 2; j++) { fVec25SIState[j] = 0; }
		fVec28SIState = 0;
		fVec31SIState = 0;
		for (int j = 0; j < 2; j++) { fVec30SIState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("tf_exp");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[2];
		float 	fTemp0SC; // step: 7
		float 	fVec2SC[2];
		float 	fTemp1SC; // step: 28
		float 	fVec3SI[2];
		float 	fTemp2SI; // step: 48
		float 	fVec7SI[2];
		float 	fTemp3SI; // step: 64
		float 	fVec6SI[3];
		float 	fTemp4SI; // step: 86
		float 	fVec12SI[2];
		float 	fTemp5SI; // step: 101
		float 	fVec11SI[3];
		float 	fVec14SI[2];
		float 	fTemp6SI; // step: 111
		float 	fVec17SI[2];
		float 	fTemp7SI; // step: 121
		float 	fVec16SI[3];
		float 	fTemp8SI; // step: 122
		float 	fTemp9SI; // step: 124
		float 	fVec21SI[2];
		float 	fTemp10SI; // step: 131
		float 	fVec22SI[2];
		float 	fTemp11SI; // step: 147
		float 	fVec26SI[2];
		float 	fTemp12SI; // step: 157
		float 	fVec25SI[3];
		float 	fVec28SI[2];
		float 	fTemp13SI; // step: 172
		float 	fVec31SI[2];
		float 	fTemp14SI; // step: 182
		float 	fVec30SI[3];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		iVec0KC[1] = iVec0KCState;
		fVec2SC[1] = fVec2SCState;
		fVec3SI[1] = fVec3SIState;
		fVec7SI[1] = fVec7SIState;
		fVec6SI[1] = fVec6SIState[0];
		fVec6SI[2] = fVec6SIState[1];
		fVec12SI[1] = fVec12SIState;
		fVec11SI[1] = fVec11SIState[0];
		fVec11SI[2] = fVec11SIState[1];
		fVec14SI[1] = fVec14SIState;
		fVec17SI[1] = fVec17SIState;
		fVec16SI[1] = fVec16SIState[0];
		fVec16SI[2] = fVec16SIState[1];
		fVec21SI[1] = fVec21SIState;
		fVec22SI[1] = fVec22SIState;
		fVec26SI[1] = fVec26SIState;
		fVec25SI[1] = fVec25SIState[0];
		fVec25SI[2] = fVec25SIState[1];
		fVec28SI[1] = fVec28SIState;
		fVec31SI[1] = fVec31SIState;
		fVec30SI[1] = fVec30SIState[0];
		fVec30SI[2] = fVec30SIState[1];
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			fTemp0SC = float((1 + -iVec0KC[1] /* Sum */)); // step: 7
			fVec2SC[0] = fTemp0SC;
			fTemp1SC = fVec2SC[1]; // step: 28
			fVec3SI[0] = -(fConst3KI * ((fConst4KI * fVec3SI[1]) + -(fConst2KI * (fTemp0SC + -fTemp1SC /* Sum */)) /* Sum */));
			fTemp2SI = fVec6SI[2]; // step: 48
			fVec7SI[0] = (fVec3SI[0] + -(fConst6KI * ((fConst7KI * fTemp2SI) + (fConst9KI * fVec7SI[1]) /* Sum */)) /* Sum */);
			fTemp3SI = fVec7SI[0]; // step: 64
			fVec6SI[0] = fTemp3SI;
			fTemp4SI = fVec11SI[2]; // step: 86
			fVec12SI[0] = ((fConst10KI * (fTemp2SI + fVec7SI[0] + (-2.0f * fVec6SI[1]) /* Sum */)) + -(fConst14KI * ((fConst16KI * fTemp4SI) + (fConst18KI * fVec12SI[1]) /* Sum */)) /* Sum */);
			fTemp5SI = fVec12SI[0]; // step: 101
			fVec11SI[0] = fTemp5SI;
			fVec14SI[0] = -(fConst3KI * ((fConst4KI * fVec14SI[1]) + -fTemp0SC + -fTemp1SC /* Sum */));
			fTemp6SI = fVec16SI[2]; // step: 111
			fVec17SI[0] = (fVec14SI[0] + -(fConst6KI * ((fConst7KI * fTemp6SI) + (fConst9KI * fVec17SI[1]) /* Sum */)) /* Sum */);
			fTemp7SI = fVec17SI[0]; // step: 121
			fVec16SI[0] = fTemp7SI;
			fTemp8SI = fVec17SI[0]; // step: 122
			fTemp9SI = (2.0f * fVec16SI[1]); // step: 124
			fVec21SI[0] = (fTemp6SI + fTemp8SI + fTemp9SI /* Sum */);
			fTemp10SI = fVec21SI[1]; // step: 131
			fVec22SI[0] = -(fConst19KI * ((fConst15KI * fVec22SI[1]) + -(fConst6KI * (fTemp6SI + fTemp8SI + fTemp9SI + fTemp10SI /* Sum */)) /* Sum */));
			fTemp11SI = fVec25SI[2]; // step: 147
			fVec26SI[0] = (fVec22SI[0] + -(fConst20KI * ((fConst21KI * fTemp11SI) + (fConst18KI * fVec26SI[1]) /* Sum */)) /* Sum */);
			fTemp12SI = fVec26SI[0]; // step: 157
			fVec25SI[0] = fTemp12SI;
			fVec28SI[0] = -(fConst19KI * ((fConst15KI * fVec28SI[1]) + -(fConst22KI * (fTemp6SI + fTemp8SI + fTemp9SI + -fTemp10SI /* Sum */)) /* Sum */));
			fTemp13SI = fVec30SI[2]; // step: 172
			fVec31SI[0] = (fVec28SI[0] + -(fConst20KI * ((fConst21KI * fTemp13SI) + (fConst18KI * fVec31SI[1]) /* Sum */)) /* Sum */);
			fTemp14SI = fVec31SI[0]; // step: 182
			fVec30SI[0] = fTemp14SI;
			output0[i] = (FAUSTFLOAT)((fTemp4SI + (fConst14KI * ((fConst16KI * fVec12SI[0]) + (fConst18KI * fVec11SI[1]) /* Sum */)) + (fConst20KI * (fTemp11SI + fVec26SI[0] + (2.0f * fVec25SI[1]) + (fConst17KI * (fTemp13SI + fVec31SI[0] + (-2.0f * fVec30SI[1]) /* Sum */)) /* Sum */)) /* Sum */));  // Zone Exec Code
			// post processing
			fVec30SI[2] = fVec30SI[1];
			fVec30SI[1] = fVec30SI[0];
			fVec31SI[1] = fVec31SI[0];
			fVec28SI[1] = fVec28SI[0];
			fVec25SI[2] = fVec25SI[1];
			fVec25SI[1] = fVec25SI[0];
			fVec26SI[1] = fVec26SI[0];
			fVec22SI[1] = fVec22SI[0];
			fVec21SI[1] = fVec21SI[0];
			fVec16SI[2] = fVec16SI[1];
			fVec16SI[1] = fVec16SI[0];
			fVec17SI[1] = fVec17SI[0];
			fVec14SI[1] = fVec14SI[0];
			fVec11SI[2] = fVec11SI[1];
			fVec11SI[1] = fVec11SI[0];
			fVec12SI[1] = fVec12SI[0];
			fVec6SI[2] = fVec6SI[1];
			fVec6SI[1] = fVec6SI[0];
			fVec7SI[1] = fVec7SI[0];
			fVec3SI[1] = fVec3SI[0];
			fVec2SC[1] = fVec2SC[0];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState = iVec0KC[1];
		fVec2SCState = fVec2SC[1];
		fVec3SIState = fVec3SI[1];
		fVec7SIState = fVec7SI[1];
		fVec6SIState[0] = fVec6SI[1];
		fVec6SIState[1] = fVec6SI[2];
		fVec12SIState = fVec12SI[1];
		fVec11SIState[0] = fVec11SI[1];
		fVec11SIState[1] = fVec11SI[2];
		fVec14SIState = fVec14SI[1];
		fVec17SIState = fVec17SI[1];
		fVec16SIState[0] = fVec16SI[1];
		fVec16SIState[1] = fVec16SI[2];
		fVec21SIState = fVec21SI[1];
		fVec22SIState = fVec22SI[1];
		fVec26SIState = fVec26SI[1];
		fVec25SIState[0] = fVec25SI[1];
		fVec25SIState[1] = fVec25SI[2];
		fVec28SIState = fVec28SI[1];
		fVec31SIState = fVec31SI[1];
		fVec30SIState[0] = fVec30SI[1];
		fVec30SIState[1] = fVec30SI[2];
	}
};


