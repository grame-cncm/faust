//----------------------------------------------------------
// name: "echo_bug"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	// Recursion delay fVec0SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec0SEState; // Single Delay
	int 	IOTA0;
	float 	fVec1SE[2048]; // Ring Delay
	FAUSTFLOAT 	fslider0;
	// Recursion delay fRec2SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	// Recursion delay fRec3SE is of type kZeroDelay
	// While its definition is of type kZeroDelay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers_lib_name", "Faust Analyzer Library");
		m->declare("analyzers_lib_version", "0.0");
		m->declare("basics_lib_name", "Faust Basic Element Library");
		m->declare("basics_lib_version", "0.0");
		m->declare("compilation_options", "-single -scal -e echo_bug.dsp -o echo_bug.dsp");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("compressors_lib_name", "Faust Compressor Effect Library");
		m->declare("compressors_lib_version", "0.0");
		m->declare("delays_lib_name", "Faust Delay Library");
		m->declare("delays_lib_version", "0.1");
		m->declare("envelopes_lib_author", "GRAME");
		m->declare("envelopes_lib_copyright", "GRAME");
		m->declare("envelopes_lib_license", "LGPL with exception");
		m->declare("envelopes_lib_name", "Faust Envelope Library");
		m->declare("envelopes_lib_version", "0.0");
		m->declare("filename", "echo_bug.dsp");
		m->declare("filters_lib_name", "Faust Filters Library");
		m->declare("filters_lib_version", "0.0");
		m->declare("hoa_lib_author", "Pierre Guillot");
		m->declare("hoa_lib_copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
		m->declare("hoa_lib_name", "High Order Ambisonics library");
		m->declare("library_path", "/usr/local/share/faust/sf.lib");
		m->declare("maths_lib_author", "GRAME");
		m->declare("maths_lib_copyright", "GRAME");
		m->declare("maths_lib_license", "LGPL with exception");
		m->declare("maths_lib_name", "Faust Math Library");
		m->declare("maths_lib_version", "2.1");
		m->declare("misceffects_lib_name", "Faust Math Library");
		m->declare("misceffects_lib_version", "2.0");
		m->declare("name", "echo_bug");
		m->declare("noises_lib_name", "Faust Noise Generator Library");
		m->declare("noises_lib_version", "0.0");
		m->declare("oscillators_lib_name", "Faust Oscillator Library");
		m->declare("oscillators_lib_version", "0.0");
		m->declare("phaflangers_lib_name", "Faust Phaser and Flanger Library");
		m->declare("phaflangers_lib_version", "0.0");
		m->declare("reverbs_lib_name", "Faust Reverb Library");
		m->declare("reverbs_lib_version", "0.0");
		m->declare("routes_lib_name", "Faust Signal Routing Library");
		m->declare("routes_lib_version", "0.1");
		m->declare("signals_lib_name", "Faust Signal Routing Library");
		m->declare("signals_lib_version", "0.0");
		m->declare("soundfiles_lib_name", "Faust Soundfile Library");
		m->declare("soundfiles_lib_version", "0.4");
		m->declare("spats_lib_name", "Faust Spatialization Library");
		m->declare("spats_lib_version", "0.0");
		m->declare("synths_lib_name", "Faust Synthesizer Library");
		m->declare("synths_lib_version", "0.0");
		m->declare("vaeffects_lib_name", "Faust Virtual Analog Filter Effect Library");
		m->declare("vaeffects_lib_version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
	}
	virtual void instanceClear() {
		fVec0SEState = 0;
		for (int i = 1; i < 2048; i++) { fVec1SE[i] = 0; }
		fVec1SE[0] = -1;  // detect unintialized
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("echo_bug");
		ui_interface->declare(&fslider0, "0", "");
		ui_interface->addHorizontalSlider("EchoWarp", &fslider0, 0.0f, -1.0f, 1.0f, 0.001f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fTemp0SE; // step: 2
		float 	fVec0SE[2];
		float 	fTemp1SE; // step: 13
		float 	fRec1BE = float(fslider0); // FR step: 21
		int 	iTemp2SE; // step: 27
		float 	fTemp3SE; // step: 31
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		fVec0SE[1] = fVec0SEState;
		for (int i=0; i<count; i++) {
			fTemp0SE = (float)input0[i]; // step: 2
			fVec0SE[0] = ((0.995f * fVec0SE[1]) + (0.005f * fTemp0SE) /* Sum */);
			fTemp1SE = fVec0SE[0]; // step: 13
			fVec1SE[IOTA0&2047] = fTemp1SE;
			float 	fRec2SE = (1e+02f * (fRec1BE + 1.0f /* Sum */)); // Zero delay
			iTemp2SE = int(fRec2SE); // step: 27
			fTemp3SE = floorf(fRec2SE); // step: 31
			float 	fRec3SE = ((fVec1SE[(IOTA0-std::min(1025, std::max(0, iTemp2SE)))&2047] * (fTemp3SE + 1.0f + -fRec2SE /* Sum */)) + ((fRec2SE + -fTemp3SE /* Sum */) * fVec1SE[(IOTA0-std::min(1025, std::max(0, (iTemp2SE + 1 /* Sum */))))&2047]) /* Sum */); // Zero delay
			output0[i] = (FAUSTFLOAT)((fTemp0SE + fRec3SE /* Sum */));  // Zone Exec Code
			// post processing
			++IOTA0;
			fVec0SE[1] = fVec0SE[0];
		}
		fVec0SEState = fVec0SE[1];
	}
};


