//----------------------------------------------------------
// author: "Grame"
// copyright: "(c)GRAME 2006"
// license: "BSD"
// name: "capture"
// version: "1.0"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fbutton0;
	int 	iVec0BEState; // Single Delay
	int 	IOTA0;
	float 	fVec2SE[524288]; // Ring Delay
	// Recursion delay iVec3SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec3SEState; // Single Delay
	// Recursion delay fVec1SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec1SEState; // Single Delay
	FAUSTFLOAT 	fslider0;
	// Recursion delay fVec8SE is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec8SEState; // Single Delay
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("author", "Grame");
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("copyright", "(c)GRAME 2006");
		m->declare("filename", "capture.dsp");
		m->declare("license", "BSD");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "capture");
		m->declare("version", "1.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		IOTA0 = 0;
	}
	virtual void instanceResetUserInterface() {
		fbutton0 = 0.0;
		fslider0 = 0.0f;
	}
	virtual void instanceClear() {
		iVec0BEState = 0;
		for (int i = 1; i < 524288; i++) { fVec2SE[i] = 0; }
		fVec2SE[0] = -1;  // detect unintialized
		iVec3SEState = 0;
		fVec1SEState = 0;
		fVec8SEState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("Audio Capture");
		ui_interface->addButton("Capture", &fbutton0);
		ui_interface->addHorizontalSlider("level (db)", &fslider0, 0.0f, -96.0f, 4.0f, 0.1f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = float(fbutton0); // Zone 2, step: 1
		int 	iSlow1BE = int(fSlow0BE); // Zone 2, step: 2
		int 	iVec0BE[2];
		float 	fSlow2BE = (1.0f + -fSlow0BE /* Sum */); // Zone 2, step: 11
		int 	iVec3SE[2];
		float 	fVec1SE[2];
		float 	fSlow3BE = (0.001f * powf(1e+01f,(0.05f * float(fslider0)))); // Zone 2, step: 44
		float 	fVec8SE[2];
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		iVec0BE[1] = iVec0BEState;
		iVec3SE[1] = iVec3SEState;
		fVec1SE[1] = fVec1SEState;
		fVec8SE[1] = fVec8SEState;
		for (int i=0; i<count; i++) {
			iVec0BE[0] = iSlow1BE;
			fVec2SE[IOTA0&524287] = ((fSlow2BE * fVec1SE[1]) + (fSlow0BE * (float)input0[i]) /* Sum */);
			iVec3SE[0] = ((iSlow1BE + iVec3SE[1] /* Sum */) * ((iSlow1BE + -iVec0BE[1] /* Sum */) <= 0));
			fVec1SE[0] = fVec2SE[(IOTA0-((iVec3SE[0] + -1 /* Sum */) & 524287))&524287];
			fVec8SE[0] = (fSlow3BE + (0.999f * fVec8SE[1]) /* Sum */);
			output0[i] = (FAUSTFLOAT)((fVec1SE[0] * fVec8SE[0]));  // Zone Exec Code
			// post processing
			fVec8SE[1] = fVec8SE[0];
			fVec1SE[1] = fVec1SE[0];
			iVec3SE[1] = iVec3SE[0];
			++IOTA0;
			iVec0BE[1] = iVec0BE[0];
		}
		iVec0BEState = iVec0BE[1];
		iVec3SEState = iVec3SE[1];
		fVec1SEState = fVec1SE[1];
		fVec8SEState = fVec8SE[1];
	}
};


