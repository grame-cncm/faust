//----------------------------------------------------------
// name: "priority"
// version: "2.44.4"
//
// Code generated with Faust 2.79.0 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#include <math.h>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSampleRate;
		int 	iVec20KCState; // Single Delay
		// Recursion delay iVec22SI is of type kSingleDelay
		// While its definition is of type kZeroDelay
		int 	iVec22SIState; // Single Delay
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int sample_rate) {
			fSampleRate = sample_rate;
			iVec20KCState = 0;
			iVec22SIState = 0;
		}
		void fill(int count, float output[]) {
			int 	iVec20KC[2];
			int 	iVec22SI[2];
			int fullcount = count;
			for (int index = 0; index < fullcount; index += 128) {
				int count = std::min(128, fullcount-index);
				iVec20KC[1] = iVec20KCState;
				iVec22SI[1] = iVec22SIState;
				for (int i=0; i<count; i++) {
					iVec20KC[0] = 1;
					iVec22SI[0] = ((iVec20KC[1] + iVec22SI[1]) % 65536);
					output[i] = sinf((9.58738e-05f * float(iVec22SI[0])));
					// post processing
					iVec22SI[1] = iVec22SI[0];
					iVec20KC[1] = iVec20KC[0];
				}
				iVec20KCState = iVec20KC[1];
				iVec22SIState = iVec22SI[1];
				output += 128;
			}
		}
	};


	int 	iVec0KCState; // Single Delay
	float 	fConst0KI; // step: 9
	int 	iConst1KI; // step: 11
	// Recursion delay iVec2SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec2SIState; // Single Delay
	int 	iVec3SIState; // Single Delay
	int 	iVec6SIState; // Single Delay
	int 	iConst2KI; // step: 24
	// Recursion delay iVec7SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec7SIState; // Single Delay
	int 	iVec8SIState; // Single Delay
	int 	iVec11SIState; // Single Delay
	float 	fConst3KI; // step: 39
	// Recursion delay iVec13SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec13SIState; // Single Delay
	// Recursion delay iVec16SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec16SIState; // Single Delay
	// Recursion delay fVec12SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec12SIState; // Single Delay
	static float 	ftbl0SI[65536];
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics_lib_counter_author", "Stephane Letz");
		m->declare("basics_lib_name", "Faust Basic Element Library");
		m->declare("basics_lib_version", "0.8");
		m->declare("compile_options", "-single -scal -e dsp/priority.dsp -o priority_exp.dsp");
		m->declare("filename", "priority.dsp");
		m->declare("library_path0", "/usr/local/share/faust/stdfaust.lib");
		m->declare("library_path1", "/usr/local/share/faust/basics.lib");
		m->declare("library_path2", "/usr/local/share/faust/maths.lib");
		m->declare("library_path3", "/usr/local/share/faust/platform.lib");
		m->declare("library_path4", "/usr/local/share/faust/oscillators.lib");
		m->declare("maths_lib_author", "GRAME");
		m->declare("maths_lib_copyright", "GRAME");
		m->declare("maths_lib_license", "LGPL with exception");
		m->declare("maths_lib_name", "Faust Math Library");
		m->declare("maths_lib_version", "2.5");
		m->declare("name", "priority");
		m->declare("oscillators_lib_name", "Faust Oscillator Library");
		m->declare("oscillators_lib_version", "0.3");
		m->declare("platform_lib_name", "Generic Platform Library");
		m->declare("platform_lib_version", "0.2");
		m->declare("version", "2.44.4");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int sample_rate) {
		SIG0 sig0;
		sig0.init(sample_rate);
		sig0.fill(65536,ftbl0SI);
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0KI = std::min(1.92e+05f, std::max(1.0f, float(fSampleRate))); // step: 9
		iConst1KI = int((0.5f * fConst0KI)); // step: 11
		iConst2KI = int(fConst0KI); // step: 24
		fConst3KI = (1.0f / fConst0KI); // step: 39
	}
	virtual void instanceResetUserInterface() {
	}
	virtual void instanceClear() {
		iVec0KCState = 0;
		iVec2SIState = 0;
		iVec3SIState = 0;
		iVec6SIState = 0;
		iVec7SIState = 0;
		iVec8SIState = 0;
		iVec11SIState = 0;
		iVec13SIState = 0;
		iVec16SIState = 0;
		fVec12SIState = 0;
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("priority");
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		int 	iVec0KC[2];
		int 	iTemp0SC; // step: 12
		int 	iVec2SI[2];
		int 	iVec3SI[2];
		int 	iTemp1SI; // step: 22
		int 	iVec6SI[2];
		int 	iVec7SI[2];
		int 	iVec8SI[2];
		int 	iTemp2SI; // step: 33
		int 	iVec11SI[2];
		float 	fTemp3SI; // step: 38
		int 	iVec13SI[2];
		int 	iVec16SI[2];
		float 	fTemp4SI; // step: 62
		float 	fVec12SI[2];
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		iVec0KC[1] = iVec0KCState;
		iVec2SI[1] = iVec2SIState;
		iVec3SI[1] = iVec3SIState;
		iVec6SI[1] = iVec6SIState;
		iVec7SI[1] = iVec7SIState;
		iVec8SI[1] = iVec8SIState;
		iVec11SI[1] = iVec11SIState;
		iVec13SI[1] = iVec13SIState;
		iVec16SI[1] = iVec16SIState;
		fVec12SI[1] = fVec12SIState;
		for (int i=0; i<count; i++) {
			iVec0KC[0] = 1;
			iTemp0SC = iVec0KC[1]; // step: 12
			iVec2SI[0] = ((iTemp0SC + iVec2SI[1] /* Sum */) % iConst1KI);
			iVec3SI[0] = iVec2SI[0];
			iTemp1SI = (iVec2SI[0] <= iVec3SI[1]); // step: 22
			iVec6SI[0] = iTemp1SI;
			iVec7SI[0] = ((iTemp0SC + iVec7SI[1] /* Sum */) % iConst2KI);
			iVec8SI[0] = iVec7SI[0];
			iTemp2SI = (iVec7SI[0] <= iVec8SI[1]); // step: 33
			iVec11SI[0] = iTemp2SI;
			fTemp3SI = fVec12SI[1]; // step: 38
			iVec13SI[0] = (iVec13SI[1] + (iTemp1SI > iVec6SI[1]) /* Sum */);
			iVec16SI[0] = (iVec16SI[1] + (iTemp2SI > iVec11SI[1]) /* Sum */);
			fTemp4SI = (fConst3KI * float((200 * ((iVec13SI[0] % 2) + (2 * (iVec16SI[0] % 2)) + 1 /* Sum */)))); // step: 62
			fVec12SI[0] = (fTemp3SI + fTemp4SI + -floorf((fTemp3SI + fTemp4SI /* Sum */)) /* Sum */);
			output0[i] = (FAUSTFLOAT)(ftbl0SI[std::max(0, int(std::min(int(int((65536.0f * fVec12SI[0]))), 65535)))]);  // Zone Exec Code
			// post processing
			fVec12SI[1] = fVec12SI[0];
			iVec16SI[1] = iVec16SI[0];
			iVec13SI[1] = iVec13SI[0];
			iVec11SI[1] = iVec11SI[0];
			iVec8SI[1] = iVec8SI[0];
			iVec7SI[1] = iVec7SI[0];
			iVec6SI[1] = iVec6SI[0];
			iVec3SI[1] = iVec3SI[0];
			iVec2SI[1] = iVec2SI[0];
			iVec0KC[1] = iVec0KC[0];
		}
		iVec0KCState = iVec0KC[1];
		iVec2SIState = iVec2SI[1];
		iVec3SIState = iVec3SI[1];
		iVec6SIState = iVec6SI[1];
		iVec7SIState = iVec7SI[1];
		iVec8SIState = iVec8SI[1];
		iVec11SIState = iVec11SI[1];
		iVec13SIState = iVec13SI[1];
		iVec16SIState = iVec16SI[1];
		fVec12SIState = fVec12SI[1];
	}
};


float 	mydsp::ftbl0SI[65536];
