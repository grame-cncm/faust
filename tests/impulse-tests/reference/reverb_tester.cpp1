//----------------------------------------------------------
// name: "reverb_tester"
//
// Code generated with Faust 2.78.4 (https://faust.grame.fr)
// Compiler options: -lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0 
//----------------------------------------------------------

/* link with  */
#include <algorithm>
#include <cmath>
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fbutton0;
	float 	fVec0BEState; // Single Delay
	FAUSTFLOAT 	fbutton1;
	float 	fVec1BEState; // Single Delay
	FAUSTFLOAT 	fbutton2;
	float 	fVec2BEState; // Single Delay
	// Recursion delay iVec4SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	int 	iVec4SIState; // Single Delay
	// Recursion delay fVec6SI is of type kSingleDelay
	// While its definition is of type kZeroDelay
	float 	fVec6SIState; // Single Delay
	float 	fVec3SIState[3]; // Copy Delay
	FAUSTFLOAT 	fcheckbox0;
	int fSampleRate;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("compile_options", "-lang ocpp -ct 1 -es 0 -mcl 4 -mcd 9 -mfs 1024 -huf 0 -irt 4 -fls 4 -udd 1 -mdd 1024 -mdy 90 -mca 8 -ss 0 -single -ftz 0");
		m->declare("effect.lib/name", "Faust Audio Effect Library");
		m->declare("filename", "reverb_tester.dsp");
		m->declare("filter.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("filter.lib/copyright", "Julius O. Smith III");
		m->declare("filter.lib/license", "STK-4.3");
		m->declare("filter.lib/name", "Faust Filter Library");
		m->declare("filter.lib/reference", "https://ccrma.stanford.edu/~jos/filters/");
		m->declare("filter.lib/version", "1.29");
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "reverb_tester");
		m->declare("oscillator.lib/author", "Julius O. Smith (jos at ccrma.stanford.edu)");
		m->declare("oscillator.lib/copyright", "Julius O. Smith III");
		m->declare("oscillator.lib/license", "STK-4.3");
		m->declare("oscillator.lib/name", "Faust Oscillator Library");
		m->declare("oscillator.lib/version", "1.11");
	}

	virtual int getNumInputs() { return 2; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int sample_rate) {
	}
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
	}
	virtual void instanceResetUserInterface() {
		fbutton0 = 0.0;
		fbutton1 = 0.0;
		fbutton2 = 0.0;
		fcheckbox0 = 0.0;
	}
	virtual void instanceClear() {
		fVec0BEState = 0;
		fVec1BEState = 0;
		fVec2BEState = 0;
		iVec4SIState = 0;
		fVec6SIState = 0;
		for (int j = 0; j < 3; j++) { fVec3SIState[j] = 0; }
	}
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSampleRate;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openHorizontalBox("Stereo Reverb Tester");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Input Config");
		ui_interface->declare(&fcheckbox0, "2", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting the EQ sections)");
		ui_interface->addCheckButton("Pink Noise", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("Impulse Selection");
		ui_interface->declare(&fbutton0, "1", "");
		ui_interface->declare(&fbutton0, "tooltip", "Send impulse into LEFT channel");
		ui_interface->addButton("Left", &fbutton0);
		ui_interface->declare(&fbutton1, "2", "");
		ui_interface->declare(&fbutton1, "tooltip", "Send impulse into LEFT and RIGHT channels");
		ui_interface->addButton("Center", &fbutton1);
		ui_interface->declare(&fbutton2, "3", "");
		ui_interface->declare(&fbutton2, "tooltip", "Send impulse into RIGHT channel");
		ui_interface->addButton("Right", &fbutton2);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		float 	fSlow0BE = float(fbutton0); // Zone 2, step: 1
		float 	fVec0BE[2];
		float 	fSlow1BE = float(fbutton1); // Zone 2, step: 3
		float 	fVec1BE[2];
		float 	fSlow2BE = float(fbutton2); // Zone 2, step: 5
		float 	fVec2BE[2];
		float 	fTemp0SI; // step: 9
		int 	iVec4SI[2];
		float 	fTemp1SI; // step: 30
		float 	fVec6SI[2];
		float 	fTemp2SI; // step: 34
		float 	fVec3SI[4];
		int 	iTemp3SE; // step: 44
		float 	fSlow3BE = (0.1f * float(fcheckbox0)); // Zone 2, step: 49
		float 	fTemp4SE; // step: 61
		FAUSTFLOAT* input0 = input[0]; // Zone 3
		FAUSTFLOAT* input1 = input[1]; // Zone 3
		FAUSTFLOAT* output0 = output[0]; // Zone 3
		FAUSTFLOAT* output1 = output[1]; // Zone 3
		fVec0BE[1] = fVec0BEState;
		fVec1BE[1] = fVec1BEState;
		fVec2BE[1] = fVec2BEState;
		iVec4SI[1] = iVec4SIState;
		fVec6SI[1] = fVec6SIState;
		fVec3SI[1] = fVec3SIState[0];
		fVec3SI[2] = fVec3SIState[1];
		fVec3SI[3] = fVec3SIState[2];
		for (int i=0; i<count; i++) {
			fVec0BE[0] = fSlow0BE;
			fVec1BE[0] = fSlow1BE;
			fVec2BE[0] = fSlow2BE;
			fTemp0SI = fVec3SI[3]; // step: 9
			iVec4SI[0] = ((1103515245 * iVec4SI[1]) + 12345 /* Sum */);
			fTemp1SI = fVec3SI[2]; // step: 30
			fVec6SI[0] = ((0.5221894f * fTemp0SI) + (4.656613e-10f * float(iVec4SI[0])) + (2.494956f * fVec6SI[1]) + (-2.0172658f * fTemp1SI) /* Sum */);
			fTemp2SI = fVec6SI[0]; // step: 34
			fVec3SI[0] = fTemp2SI;
			iTemp3SE = ((fSlow1BE + -fVec1BE[1] /* Sum */) > 0.0f); // step: 44
			fTemp4SE = (fSlow3BE * ((0.049922034f * fVec6SI[0]) + (0.0506127f * fTemp1SI) + (-0.095993534f * fVec3SI[1]) + (-0.004408786f * fTemp0SI) /* Sum */)); // step: 61
			output0[i] = (FAUSTFLOAT)((float((((fSlow0BE + -fVec0BE[1] /* Sum */) > 0.0f) + iTemp3SE /* Sum */)) + fTemp4SE /* Sum */));  // Zone Exec Code
			output1[i] = (FAUSTFLOAT)((fTemp4SE + float((iTemp3SE + ((fSlow2BE + -fVec2BE[1] /* Sum */) > 0.0f) /* Sum */)) /* Sum */));  // Zone Exec Code
			// post processing
			fVec3SI[3] = fVec3SI[2];
			fVec3SI[2] = fVec3SI[1];
			fVec3SI[1] = fVec3SI[0];
			fVec6SI[1] = fVec6SI[0];
			iVec4SI[1] = iVec4SI[0];
			fVec2BE[1] = fVec2BE[0];
			fVec1BE[1] = fVec1BE[0];
			fVec0BE[1] = fVec0BE[0];
		}
		fVec0BEState = fVec0BE[1];
		fVec1BEState = fVec1BE[1];
		fVec2BEState = fVec2BE[1];
		iVec4SIState = iVec4SI[1];
		fVec6SIState = fVec6SI[1];
		fVec3SIState[0] = fVec3SI[1];
		fVec3SIState[1] = fVec3SI[2];
		fVec3SIState[2] = fVec3SI[3];
	}
};


