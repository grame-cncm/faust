#!/bin/sh

PATH=../../build/bin:$PATH
faust --version || exit $?
echo location $(command -v faust)

# detect the current system
system=$(uname -s)
# normalizes MINGW versions
system=$(echo $system | grep MINGW > /dev/null && echo MINGW || echo $system)

## exclusion list for faust errors
XLIST1="faust2md"

OSX="faust2android faust2au faust2caqt faust2csound faust2faustvst faust2jack faust2jaqt faust2max6 faust2msp faust2puredata faust2supercollider faust2unity faust2vst faust2vsti faust2ios faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXMIDI="faust2caqt faust2jack faust2jaqt faust2max6 faust2msp faust2ios faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXPOLY="faust2caqt faust2jack faust2jaqt faust2max6 faust2msp faust2ios faust2juce faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXPOLYMIDI="faust2caqt faust2jack faust2jaqt faust2max6 faust2msp faust2ios faust2juce faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXPOLY2MIDI="faust2caqt faust2ios faust2max6 faust2msp faust2juce faust2netjackconsole faust2netjackqt"
OSXSOUND="faust2caqt faust2jaqt faust2jack faust2ios faust2max6 faust2msp"
OSXHTTPD="faust2caqt faust2jack faust2jaqt faust2jackconsole faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXOSC="faust2ios faust2caqt faust2jack faust2jaqt faust2jackconsole faust2netjackconsole faust2netjackqt faust2jackconsole"
OSXOSCHTTPD="faust2caqt faust2jack faust2jaqt faust2jackconsole faust2netjackconsole faust2netjackqt faust2jackconsole"

LINUX="faust2alqt faust2alsa faust2alsaconsole faust2android faust2asmjs faust2bela faust2csound faust2dssi faust2eps faust2faustvst faust2firefox faust2graph faust2graphviewer faust2jack faust2jackinternal faust2jackserver faust2jaqt faust2ladspa faust2lv2 faust2mathdoc  faust2md  faust2netjackconsole faust2netjackqt faust2octave faust2owl faust2paqt faust2pdf faust2plot faust2png faust2puredata faust2raqt faust2ros faust2rosgtk faust2rpialsaconsole faust2rpinetjackconsole faust2sig faust2sigviewer faust2supercollider faust2svg faust2w32max6 faust2w32msp faust2w32puredata faust2w32vst faust2w64vst faust2netjackconsole faust2netjackqt faust2jackconsole"
LINUXMIDI="faust2jaqt faust2netjackconsole faust2netjackqt faust2jackconsole"
LINUXPOLY="faust2jaqt faust2juce faust2netjackconsole faust2netjackqt faust2jackconsole"
LINUXPOLYMIDI="faust2jaqt faust2juce faust2netjackconsole faust2netjackqt faust2jackconsole"
LINUXOSCHTTPD="faust2jaqt faust2netjackconsole faust2netjackqt faust2jackconsole"

## test exclusion : notinlist "toto" "a b c d e"
notinlist() {
    for word in $2; do
        if [ $word = $1 ]; then
            return 1
        fi
    done
    return 0
}

runtest() {
    # usage: runtest <logfile> <cmd> <arg1> ...
    local logfile=$1
    shift
    ("$@" >"${logfile}" 2>&1) && echo "OK: '$@' succeeded!" || echo "ERROR: '$@' failed"
    rm -rf good
}
runtestfail() {
    # usage: runtestfail <logfile> <cmd> <arg1> ...
    local logfile=$1
    shift
    ("$@" >"${logfile}" 2>&1) && echo "ERROR: '$@' shouldn't have succeeded!" || echo "OK: '$@' correctly failed"
    rm -rf good
}
runtestref() {
    # usage: runtestref <logfile> <name> <refbasename> <cmd> <arg1>...
    local logfile=$1
    local name=$2
    local referencefile="${3}_ref.txt"
    local resultfile="${3}.txt"
    shift 3

    if ("$@" >"${logfile}" 2>&1); then
        "./${name}" > "${resultfile}"
        diff "${resultfile}" "${referencefile}" && echo "OK: '$@' succeeded!" || echo "ERROR: '$@' failed (mismatched output)"
    else
        echo "ERROR: '$@' failed"
    fi
    rm -f "${resultfile}"
    rm -rf "${name}"
}


echo "------------------------"
echo Run tests for $system with renamed class and superclass
echo "------------------------"

if [ "$system" = "Darwin" ]; then
    echo "Test $OSX"
    echo "Test -midi $OSXMIDI"
    echo "Test -nvoices 8 $OSXPOLY"
    echo "Test -nvoices 8 -midi $OSXPOLYMIDI"
    echo "Test -nvoices 8 -effect <foo.dsp> -midi $OSXPOLY2MIDI"
    echo "Test -soundfile $OSXSOUND"
    echo "Test -httpd $OSXHTTPD"
    echo "Test -osc $OSXOSC"
    echo "Test -osc -httpd $OSXOSCHTTPD"

    for scriptname in $OSX; do
        for RENAME in "" "-cn Bidule" "-cn Bidule -scn Machin"; do
            runtest LOG "${scriptname}" ${RENAME} good.dsp
        done
    done

    for scriptname in $OSXMIDI; do
        for RENAME in "" "-cn Bidule" "-cn Bidule -scn Machin"; do
            runtest LOG "${scriptname}" ${RENAME} -midi good.dsp
        done
    done

    for scriptname in $OSXPOLY; do
        for RENAME in "" "-cn Bidule" "-cn Bidule -scn Machin"; do
            runtest LOG "${scriptname}" ${RENAME} -nvoices 8 good.dsp
        done
    done

    for scriptname in $OSXPOLYMIDI; do
        for RENAME in "" "-cn Bidule" "-cn Bidule -scn Machin"; do
            runtest LOG "${scriptname}" ${RENAME} -nvoices 8 -midi good.dsp
        done
    done

    for RENAME in "" "-cn Bidule" "-cn Bidule -scn Machin"; do
        for scriptname in $OSXPOLY2MIDI; do
            runtest LOG "${scriptname}" ${RENAME} -nvoices 8 -effect good.dsp -midi good.dsp
        done

        for scriptname in $OSXSOUND; do
            runtest LOG "${scriptname}" ${RENAME} -soundfile -lang ocpp sound.dsp
        done

        for scriptname in $OSXSOUND; do
            runtest "${scriptname}" ${RENAME} -soundfile sound.dsp
        done

        runtest LOG faust2juce ${RENAME} -soundfile -standalone sound.dsp

        for scriptname in $OSXHTTPD; do
            runtest LOG "${scriptname}" ${RENAME} -httpd good.dsp
        done

        for scriptname in $OSXOSC; do
            runtest "${scriptname}" ${RENAME} -osc good.dsp
        done

        for scriptname in $OSXOSCHTTPD; do
            runtest "${scriptname}" ${RENAME} -osc -httpd good.dsp
        done

        runtest LOG faust2api ${RENAME} -ios good.dsp
        runtest LOG faust2api ${RENAME} -ios -midi good.dsp
        runtest LOG faust2api ${RENAME} -ios -midi -nvoices 8 good.dsp
        runtest LOG faust2api ${RENAME} -ios -nvoices 8 -effect effect.dsp -midi good.dsp
        runtest LOG faust2api ${RENAME} -ios -soundfile -lang ocpp sound.dsp

        runtest LOG faust2nodejs ${RENAME} -coreaudio good.dsp
        runtest LOG faust2nodejs ${RENAME} -coreaudio -midi good.dsp
        runtest LOG faust2nodejs ${RENAME} -coreaudio -midi -nvoices 8 good.dsp

        #runtest LOG faust2nodejs -coreaudio -nvoices 8 -effect effect.dsp -midi good.dsp

        runtest LOG faust2smartkeyb ${RENAME} -ios good.dsp
        runtest LOG faust2smartkeyb ${RENAME} -ios -osc good.dsp
        runtest LOG faust2smartkeyb ${RENAME} -ios -osc -midi good.dsp
        runtest LOG faust2smartkeyb ${RENAME} -ios -osc -midi -nvoices 8 good.dsp
        runtest LOG faust2smartkeyb ${RENAME} -ios -effect effect.dsp -nvoices 8 good.dsp

        # Test of -exp10
        runtest LOG faust2jack ${RENAME} -exp10 exp10.dsp
        runtestfail LOG faust2android ${RENAME} -exp10 exp10.dsp
    done
elif [ "$system" = "Linux" ]; then
    echo "Test $LINUX"
    echo "Test -midi $LINUXMIDI"
    echo "Test -nvoices 8 $LINUXPOLY"
    echo "Test -nvoices 8 -midi $LINUXPOLYMIDI"
    echo "Test -osc -httpd $LINUXOSCHTTPD"

    runtestref LOG good good faust2dummy good.dsp
    runtestref LOG good good faust2dummy -midi good.dsp
    runtestref LOG organ organ_2voices faust2dummy -midi -nvoices 2 organ.dsp
    runtestref LOG organ organ_8voices faust2dummy -midi organ.dsp
    runtestref LOG waveform4 waveform4 faust2dummymem waveform4.dsp

    for scriptname in $LINUX; do
        runtest LOG "${scriptname}" good.dsp
    done

    for scriptname in $LINUXMIDI; do
        runtest LOG "${scriptname}" -midi good.dsp
    done

    for scriptname in $LINUXPOLY; do
        runtest LOG "${scriptname}" -nvoices 8 good.dsp
    done

    for scriptname in $LINUXPOLYMIDI; do
        runtest LOG "${scriptname}" -nvoices 8 -midi good.dsp
    done

    for scriptname in $LINUXOSCHTTPD; do
        runtest LOG "${scriptname}" -osc -httpd good.dsp
    done

    runtest LOG faust2api -android good.dsp
    runtest LOG faust2api -android -midi good.dsp
    runtest LOG faust2api -android -midi -nvoices 8 good.dsp
    runtest LOG faust2api -android -nvoices 8 -effect effect.dsp -midi good.dsp

elif [ "$system" = "MINGW" ]; then
    echo "not yet implemented"

else
    echo
    echo "Test all Faust2xxx to work"
    echo
    for scriptname in $(listexclude $(for S in ../../tools/faust2appls/faust2*; do echo $(basename "$S" .in); done) $XLIST1 $XLIST); do
        runtest LOG "${scriptname}" good.dsp
    done
fi
