
(module
	(import $expf "env" "_expf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"harp\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"8276\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Lowest Key':'40',  'Keyboard 1 - Lowest Key':'45',  'Keyboard 2 - Lowest Key':'50',  'Keyboard 3 - Lowest Key':'55',  'Keyboard 4 - Lowest Key':'60',  'Keyboard 5 - Lowest Key':'65',  'Keyboard 6 - Lowest Key':'70',  'Keyboard 7 - Lowest Key':'75',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"harp\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"harp\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/harp/freq\",\"index\":\"16\",\"init\":\"400\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/harp/gate\",\"index\":\"36\"},{\"type\":\"hslider\",\"label\":\"res\",\"address\":\"/harp/res\",\"index\":\"24\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"2\",\"min\":\"0.1\",\"max\":\"4\",\"step\":\"0.01\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.div (f32.const 1000.) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.mul (f32.const 0.00200000009) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 400.))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.const 2.))
		(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l1) (i32.const 2)))) (i32.const 0))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 64)) (i32.const 0))
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2048)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8268) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $iSlow6 i32)
		(local $iSlow7 i32)
		(local $fSlow8 f32)
		(local $iSlow9 i32)
		(local $i i32)
		(local $iTemp0 i32)
		(local $fTemp1 f32)
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $iSlow6 (i32.const 0))
		(set_local $iSlow7 (i32.const 0))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $iSlow9 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $iTemp0 (i32.const 0))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 4))) (f32.load (i32.add (get_local $dsp) (i32.const 16)))))
		(set_local $fSlow1 (f32.add (get_local $fSlow0) (f32.const -1.)))
		(set_local $fSlow2 (f32.floor (get_local $fSlow1)))
		(set_local $fSlow3 (f32.add (get_local $fSlow2) (f32.sub (f32.const 2.) (get_local $fSlow0))))
		(set_local $fSlow4 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 20))) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))))
		(set_local $fSlow5 (f32.load (i32.add (get_local $dsp) (i32.const 36))))
		(set_local $iSlow6 (i32.trunc_s/f32 (get_local $fSlow1)))
		(set_local $iSlow7 (call $min_i (i32.const 1025) (call $max_i (i32.const 0) (get_local $iSlow6))))
		(set_local $fSlow8 (f32.add (get_local $fSlow0) (f32.sub (f32.const -1.) (get_local $fSlow2))))
		(set_local $iSlow9 (call $min_i (i32.const 1025) (call $max_i (i32.const 0) (i32.add (get_local $iSlow6) (i32.const 1)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.load (i32.add (get_local $dsp) (i32.const 4))))
				(i32.store (i32.add (get_local $dsp) (i32.const 28)) (i32.add (i32.mul (i32.const 1103515245) (i32.load (i32.add (get_local $dsp) (i32.const 32)))) (i32.const 12345)))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (get_local $fSlow5))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (select (f32.const 0.) (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 48))) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 56))) (f32.mul (f32.const 0.00200000009) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 4))) (f32.load (i32.add (get_local $dsp) (i32.const 12)))))) (f32.const 1.))) (i32.gt_s (f32.gt (f32.sub (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 44)))) (f32.const 0.)) (i32.const 0))))
				(set_local $iTemp0 (f32.lt (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.load (i32.add (get_local $dsp) (i32.const 60)))))
				(set_local $fTemp1 (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 8264)))) (f32.mul (f32.const 4.65661287e-10) (f32.mul (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 28)))) (select (select (f32.const 0.) (select (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 20))) (f32.load (i32.add (get_local $dsp) (i32.const 52)))) (f32.const 1.) (get_local $iTemp0)) (f32.lt (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.const 0.))) (select (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 20))) (f32.sub (f32.const 0.) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.load (i32.add (get_local $dsp) (i32.const 60)))))) (f32.const 1.)) (f32.const 0.) (f32.lt (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.load (i32.add (get_local $dsp) (i32.const 48))))) (get_local $iTemp0))))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 64))) (i32.const 2047)) (i32.const 2)))) (get_local $fTemp1))
				(f32.store (i32.add (get_local $dsp) (i32.const 8260)) (f32.add (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (get_local $iSlow7)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (get_local $fSlow8) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (get_local $iSlow9)) (i32.const 2047)) (i32.const 2))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8268)) (get_local $fTemp1))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.load (i32.add (get_local $dsp) (i32.const 8272))))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.load (i32.add (get_local $dsp) (i32.const 8))))
				(i32.store (i32.add (get_local $dsp) (i32.const 32)) (i32.load (i32.add (get_local $dsp) (i32.const 28))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(i32.store (i32.add (get_local $dsp) (i32.const 64)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 64))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8264)) (f32.load (i32.add (get_local $dsp) (i32.const 8260))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8272)) (f32.load (i32.add (get_local $dsp) (i32.const 8268))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
