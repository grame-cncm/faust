
(module
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"trumpet\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"108\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'1',  'Mono Mode':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'77',  'Keyboard 1 - Lowest Key':'72',  'Keyboard 2 - Lowest Key':'67',  'Keyboard 3 - Lowest Key':'62',  'Keyboard 4 - Lowest Key':'57',  'Rounding Mode':'2',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1',  'Keyboard 4 - Send Y':'1', }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"trumpet\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"trumpet\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/trumpet/bend\",\"index\":\"60\",\"meta\":[{\"midi\":\"pitchwheel\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/trumpet/freq\",\"index\":\"56\",\"init\":\"300\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/trumpet/gain\",\"index\":\"40\",\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/trumpet/gate\",\"index\":\"24\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/trumpet/sustain\",\"index\":\"28\",\"meta\":[{\"midi\":\"ctrl 64\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/trumpet/y\",\"index\":\"12\",\"meta\":[{\"midi\":\"ctrl 1\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 300.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 1.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 32) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 44) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 88) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 3)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $iSlow5 i32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $iTemp3 i32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $iTemp7 i32)
		(local $fRec5 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $iSlow5 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $iTemp3 (i32.const 0))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $iTemp7 (i32.const 0))
		(set_local $fRec5 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 12)))))
		(set_local $fSlow1 (f32.min (f32.const 1.) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (f32.load (i32.add (get_local $dsp) (i32.const 28))))))
		(set_local $fSlow2 (f32.mul (f32.const 0.00100000005) (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 40))))))
		(set_local $fSlow3 (f32.load (i32.add (get_local $dsp) (i32.const 56))))
		(set_local $fSlow4 (f32.load (i32.add (get_local $dsp) (i32.const 60))))
		(set_local $iSlow5 (f32.eq (get_local $fSlow1) (f32.const 0.)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 20))))))
				(set_local $fTemp0 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.add (f32.mul (f32.const 4000.) (f32.load (i32.add (get_local $dsp) (i32.const 16)))) (f32.const 50.)))))
				(set_local $fTemp1 (f32.div (f32.const 1.) (get_local $fTemp0)))
				(set_local $fTemp2 (f32.add (get_local $fTemp1) (f32.const 1.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (get_local $fSlow1))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.add (get_local $fSlow2) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 48))))))
				(set_local $iTemp3 (i32.or (f32.eq (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 36)))) (get_local $iSlow5)))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (f32.mul (get_local $fSlow4) (f32.sub (f32.const 1.) (f32.mul (f32.const 0.999000013) (f32.convert_s/i32 (get_local $iTemp3))))) (f32.mul (f32.const 0.999000013) (f32.mul (f32.convert_s/i32 (get_local $iTemp3)) (f32.load (i32.add (get_local $dsp) (i32.const 68)))))))
				(set_local $fTemp4 (f32.max (f32.const 1.00000001e-07) (f32.abs (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 64)))))))
				(set_local $fTemp5 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 76))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (get_local $fTemp4))))
				(set_local $fTemp6 (f32.add (get_local $fTemp5) (f32.const -1.)))
				(set_local $iTemp7 (f32.lt (get_local $fTemp6) (f32.const 0.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (select (get_local $fTemp5) (get_local $fTemp6) (get_local $iTemp7)))
				(set_local $fRec5 (select (get_local $fTemp5) (f32.add (get_local $fTemp5) (f32.mul (f32.sub (f32.const 1.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 4))) (get_local $fTemp4))) (get_local $fTemp6))) (get_local $iTemp7)))
				(set_local $fTemp8 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 44))) (f32.add (f32.mul (f32.const 2.) (get_local $fRec5)) (f32.const -1.))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (get_local $fTemp8))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 92))) (f32.sub (f32.const 0.) (f32.div (f32.sub (f32.const 1.) (get_local $fTemp1)) (get_local $fTemp2)))) (f32.div (f32.add (get_local $fTemp8) (f32.load (i32.add (get_local $dsp) (i32.const 84)))) (get_local $fTemp2))))
				(set_local $fTemp9 (f32.add (f32.div (f32.add (get_local $fTemp1) (f32.const 1.)) (get_local $fTemp0)) (f32.const 1.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 88))) (f32.div (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 104))) (f32.add (f32.div (f32.add (get_local $fTemp1) (f32.const -1.)) (get_local $fTemp0)) (f32.const 1.))) (f32.mul (f32.const 2.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 100))) (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fTemp0) (f32.const 2.))))))) (get_local $fTemp9))))
				(set_local $fTemp10 (f32.div (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 104))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 100)))))) (get_local $fTemp9)))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp10))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp10))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.load (i32.add (get_local $dsp) (i32.const 16))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.load (i32.add (get_local $dsp) (i32.const 32))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.load (i32.add (get_local $dsp) (i32.const 44))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.load (i32.add (get_local $dsp) (i32.const 88))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.load (i32.add (get_local $dsp) (i32.const 100))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
