
(module
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"multiSynth\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"16576\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'4',  'Rounding Mode':'2',  'Inter-Keyboard Slide':'0',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'60',  'Keyboard 1 - Lowest Key':'60',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'60',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"multiSynth\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"multiSynth\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/multiSynth/bend\",\"index\":\"76\",\"meta\":[{\"midi\":\"pitchwheel\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/multiSynth/freq\",\"index\":\"72\",\"init\":\"300\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/multiSynth/gain\",\"index\":\"24\",\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/multiSynth/gate\",\"index\":\"8\"},{\"type\":\"hslider\",\"label\":\"keyboard\",\"address\":\"/multiSynth/keyboard\",\"index\":\"60\",\"init\":\"0\",\"min\":\"0\",\"max\":\"3\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/multiSynth/sustain\",\"index\":\"12\",\"meta\":[{\"midi\":\"ctrl 64\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/multiSynth/y\",\"index\":\"48\",\"meta\":[{\"midi\":\"ctrl 1\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 36)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 36)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.mul (f32.const 0.25) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16500)) (f32.mul (f32.const 0.5) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16504)) (f32.div (f32.const 4.) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16516)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16536)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.const 300.))
		(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.const 1.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 88) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 112)) (i32.const 0))
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 4096)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16508) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 2)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16520) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16528) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16540) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16548) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16556) (i32.shl (get_local $l14) (i32.const 2)))) (f32.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 2)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16564) (i32.shl (get_local $l15) (i32.const 2)))) (f32.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 3)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 36))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $iSlow3 i32)
		(local $iSlow4 i32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $iSlow7 i32)
		(local $iSlow8 i32)
		(local $fSlow9 f32)
		(local $iSlow10 i32)
		(local $fSlow11 f32)
		(local $iSlow12 i32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $iTemp3 i32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $iTemp11 i32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $fTemp16 f32)
		(local $fTemp17 f32)
		(local $fTemp18 f32)
		(local $fTemp19 f32)
		(local $iTemp20 i32)
		(local $fRec10 f32)
		(local $fTemp21 f32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $iSlow3 (i32.const 0))
		(set_local $iSlow4 (i32.const 0))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $iSlow7 (i32.const 0))
		(set_local $iSlow8 (i32.const 0))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $iSlow10 (i32.const 0))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $iSlow12 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $iTemp3 (i32.const 0))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $iTemp11 (i32.const 0))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $fTemp16 (f32.const 0.))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $fTemp18 (f32.const 0.))
		(set_local $fTemp19 (f32.const 0.))
		(set_local $iTemp20 (i32.const 0))
		(set_local $fRec10 (f32.const 0.))
		(set_local $fTemp21 (f32.const 0.))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.min (f32.const 1.) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.load (i32.add (get_local $dsp) (i32.const 12))))))
		(set_local $fSlow1 (f32.mul (f32.const 0.00100000005) (f32.mul (get_local $fSlow0) (f32.load (i32.add (get_local $dsp) (i32.const 24))))))
		(set_local $fSlow2 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 48)))))
		(set_local $iSlow3 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 60)))))
		(set_local $iSlow4 (i32.eq (get_local $iSlow3) (i32.const 2)))
		(set_local $fSlow5 (f32.load (i32.add (get_local $dsp) (i32.const 72))))
		(set_local $fSlow6 (f32.load (i32.add (get_local $dsp) (i32.const 76))))
		(set_local $iSlow7 (f32.eq (get_local $fSlow0) (f32.const 0.)))
		(set_local $iSlow8 (i32.eq (get_local $iSlow3) (i32.const 1)))
		(set_local $fSlow9 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16504))) (get_local $fSlow5)))
		(set_local $iSlow10 (i32.eq (get_local $iSlow3) (i32.const 3)))
		(set_local $fSlow11 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16516))) (get_local $fSlow5)))
		(set_local $iSlow12 (i32.eq (get_local $iSlow3) (i32.const 0)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 0)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (get_local $fSlow0))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.add (get_local $fSlow1) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 32))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.add (get_local $fSlow2) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 56))))))
				(set_local $fTemp0 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 44))) (f32.add (f32.mul (f32.const 4000.) (f32.load (i32.add (get_local $dsp) (i32.const 52)))) (f32.const 50.)))))
				(set_local $fTemp1 (f32.div (f32.const 1.) (get_local $fTemp0)))
				(set_local $fTemp2 (f32.add (get_local $fTemp1) (f32.const 1.)))
				(set_local $iTemp3 (i32.or (f32.eq (get_local $fSlow0) (f32.load (i32.add (get_local $dsp) (i32.const 20)))) (get_local $iSlow7)))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.add (f32.mul (get_local $fSlow6) (f32.sub (f32.const 1.) (f32.mul (f32.const 0.999000013) (f32.convert_s/i32 (get_local $iTemp3))))) (f32.mul (f32.const 0.999000013) (f32.mul (f32.convert_s/i32 (get_local $iTemp3)) (f32.load (i32.add (get_local $dsp) (i32.const 84)))))))
				(set_local $fTemp4 (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 80)))))
				(set_local $fTemp5 (f32.max (get_local $fTemp4) (f32.const 23.4489498)))
				(set_local $fTemp6 (f32.max (f32.const 20.) (f32.abs (get_local $fTemp5))))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (get_local $fTemp6))
				(set_local $fTemp7 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 100))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 68))) (f32.load (i32.add (get_local $dsp) (i32.const 92))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.sub (get_local $fTemp7) (f32.floor (get_local $fTemp7))))
				(set_local $fTemp8 (call $powf (f32.add (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 96)))) (f32.const -1.)) (f32.const 2.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (get_local $fTemp8))
				(set_local $fTemp9 (f32.div (f32.mul (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.sub (get_local $fTemp8) (f32.load (i32.add (get_local $dsp) (i32.const 108))))) (get_local $fTemp6)))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 112))) (i32.const 4095)) (i32.const 2)))) (get_local $fTemp9))
				(set_local $fTemp10 (f32.max (f32.const 0.) (f32.min (f32.const 2047.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 16500))) (get_local $fTemp5)))))
				(set_local $iTemp11 (i32.trunc_s/f32 (get_local $fTemp10)))
				(set_local $fTemp12 (f32.floor (get_local $fTemp10)))
				(set_local $fTemp13 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 64))) (f32.sub (f32.sub (get_local $fTemp9) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 112))) (get_local $iTemp11)) (i32.const 4095)) (i32.const 2))))) (f32.add (get_local $fTemp12) (f32.sub (f32.const 1.) (get_local $fTemp10))))) (f32.mul (f32.sub (get_local $fTemp10) (get_local $fTemp12)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 112))) (i32.add (get_local $iTemp11) (i32.const 1))) (i32.const 4095)) (i32.const 2)))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16508)) (f32.add (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 16512)))) (get_local $fTemp13)))
				(set_local $fTemp14 (f32.mul (get_local $fSlow11) (f32.load (i32.add (get_local $dsp) (i32.const 80)))))
				(set_local $fTemp15 (call $sinf (get_local $fTemp14)))
				(set_local $fTemp16 (call $cosf (get_local $fTemp14)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16520)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16532))) (get_local $fTemp15)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16524))) (get_local $fTemp16))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16528)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16532))) (get_local $fTemp16)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16524))) (f32.sub (f32.const 0.) (get_local $fTemp15)))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 4)))))))
				(set_local $fTemp17 (f32.max (f32.const 1.00000001e-07) (f32.abs (get_local $fTemp4))))
				(set_local $fTemp18 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16544))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16536))) (get_local $fTemp17))))
				(set_local $fTemp19 (f32.add (get_local $fTemp18) (f32.const -1.)))
				(set_local $iTemp20 (f32.lt (get_local $fTemp19) (f32.const 0.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16540)) (select (get_local $fTemp18) (get_local $fTemp19) (get_local $iTemp20)))
				(set_local $fRec10 (select (get_local $fTemp18) (f32.add (get_local $fTemp18) (f32.mul (f32.sub (f32.const 1.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 40))) (get_local $fTemp17))) (get_local $fTemp19))) (get_local $iTemp20)))
				(set_local $fTemp21 (f32.add (select (get_local $fTemp13) (f32.const 0.) (get_local $iSlow4)) (f32.add (select (f32.mul (get_local $fSlow9) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 80))) (f32.load (i32.add (get_local $dsp) (i32.const 16508))))) (f32.const 0.) (get_local $iSlow8)) (f32.add (select (f32.load (i32.add (get_local $dsp) (i32.const 16520))) (f32.const 0.) (get_local $iSlow10)) (select (f32.add (f32.mul (f32.const 2.) (get_local $fRec10)) (f32.const -1.)) (f32.const 0.) (get_local $iSlow12))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16548)) (get_local $fTemp21))
				(f32.store (i32.add (get_local $dsp) (i32.const 16556)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16560))) (f32.sub (f32.const 0.) (f32.div (f32.sub (f32.const 1.) (get_local $fTemp1)) (get_local $fTemp2)))) (f32.div (f32.add (get_local $fTemp21) (f32.load (i32.add (get_local $dsp) (i32.const 16552)))) (get_local $fTemp2))))
				(set_local $fTemp22 (f32.add (f32.div (f32.add (get_local $fTemp1) (f32.const 1.)) (get_local $fTemp0)) (f32.const 1.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16564)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 16556))) (f32.div (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16572))) (f32.add (f32.div (f32.add (get_local $fTemp1) (f32.const -1.)) (get_local $fTemp0)) (f32.const 1.))) (f32.mul (f32.const 2.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16568))) (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fTemp0) (f32.const 2.))))))) (get_local $fTemp22))))
				(set_local $fTemp23 (f32.div (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16572))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16564))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 16568))))))) (get_local $fTemp22)))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp23))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp23))
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.load (i32.add (get_local $dsp) (i32.const 0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.load (i32.add (get_local $dsp) (i32.const 16))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.load (i32.add (get_local $dsp) (i32.const 88))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(i32.store (i32.add (get_local $dsp) (i32.const 112)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 112))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16512)) (f32.load (i32.add (get_local $dsp) (i32.const 16508))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16524)) (f32.load (i32.add (get_local $dsp) (i32.const 16520))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16532)) (f32.load (i32.add (get_local $dsp) (i32.const 16528))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16544)) (f32.load (i32.add (get_local $dsp) (i32.const 16540))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16552)) (f32.load (i32.add (get_local $dsp) (i32.const 16548))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16560)) (f32.load (i32.add (get_local $dsp) (i32.const 16556))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16572)) (f32.load (i32.add (get_local $dsp) (i32.const 16568))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16568)) (f32.load (i32.add (get_local $dsp) (i32.const 16564))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
