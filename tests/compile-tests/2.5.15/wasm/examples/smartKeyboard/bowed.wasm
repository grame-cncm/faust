
(module
	(import $expf "env" "_expf" (param f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"bowed\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"296\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 0 - Send Y':'0',  'Keyboard 1 - Send Y':'0',  'Keyboard 2 - Send Y':'0',  'Keyboard 3 - Send Y':'0',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 4 - Key 0 - Label':'Bow' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"bowed\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"bowed\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/bowed/bend\",\"index\":\"64\",\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/bowed/freq\",\"index\":\"60\",\"init\":\"400\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"keyboard\",\"address\":\"/bowed/keyboard\",\"index\":\"56\",\"init\":\"0\",\"min\":\"0\",\"max\":\"5\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"x\",\"address\":\"/bowed/x\",\"index\":\"8\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/bowed/y\",\"index\":\"84\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 20)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 20)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (call $expf (f32.sub (f32.const 0.) (f32.div (f32.const 10.) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 32)) (call $expf (f32.sub (f32.const 0.) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 400.))
		(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(local $l16 i32)
		(local $l17 i32)
		(local $l18 i32)
		(local $l19 i32)
		(local $l20 i32)
		(local $l21 i32)
		(local $l22 i32)
		(local $l23 i32)
		(local $l24 i32)
		(local $l25 i32)
		(local $l26 i32)
		(local $l27 i32)
		(local $l28 i32)
		(local $l29 i32)
		(local $l30 i32)
		(local $l31 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l16 (i32.const 0))
		(set_local $l17 (i32.const 0))
		(set_local $l18 (i32.const 0))
		(set_local $l19 (i32.const 0))
		(set_local $l20 (i32.const 0))
		(set_local $l21 (i32.const 0))
		(set_local $l22 (i32.const 0))
		(set_local $l23 (i32.const 0))
		(set_local $l24 (i32.const 0))
		(set_local $l25 (i32.const 0))
		(set_local $l26 (i32.const 0))
		(set_local $l27 (i32.const 0))
		(set_local $l28 (i32.const 0))
		(set_local $l29 (i32.const 0))
		(set_local $l30 (i32.const 0))
		(set_local $l31 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 12) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 36) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 44) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 76) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 88) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 112) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 2)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 120) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 128) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 136) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 144) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l14) (i32.const 2)))) (f32.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 2)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 160) (i32.shl (get_local $l15) (i32.const 2)))) (f32.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 2)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		(set_local $l16 (i32.const 0))
		(loop $for-in-l16 
			(block $for-out-l16 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (get_local $l16) (i32.const 2)))) (f32.const 0.))
				(set_local $l16 (i32.add (get_local $l16) (i32.const 1)))
				(if (i32.lt_s (get_local $l16) (i32.const 2)) (br $for-in-l16) (br $for-out-l16))
				
			)
		)
		(set_local $l17 (i32.const 0))
		(loop $for-in-l17 
			(block $for-out-l17 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 176) (i32.shl (get_local $l17) (i32.const 2)))) (f32.const 0.))
				(set_local $l17 (i32.add (get_local $l17) (i32.const 1)))
				(if (i32.lt_s (get_local $l17) (i32.const 2)) (br $for-in-l17) (br $for-out-l17))
				
			)
		)
		(set_local $l18 (i32.const 0))
		(loop $for-in-l18 
			(block $for-out-l18 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (get_local $l18) (i32.const 2)))) (f32.const 0.))
				(set_local $l18 (i32.add (get_local $l18) (i32.const 1)))
				(if (i32.lt_s (get_local $l18) (i32.const 2)) (br $for-in-l18) (br $for-out-l18))
				
			)
		)
		(set_local $l19 (i32.const 0))
		(loop $for-in-l19 
			(block $for-out-l19 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 192) (i32.shl (get_local $l19) (i32.const 2)))) (f32.const 0.))
				(set_local $l19 (i32.add (get_local $l19) (i32.const 1)))
				(if (i32.lt_s (get_local $l19) (i32.const 2)) (br $for-in-l19) (br $for-out-l19))
				
			)
		)
		(set_local $l20 (i32.const 0))
		(loop $for-in-l20 
			(block $for-out-l20 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 200) (i32.shl (get_local $l20) (i32.const 2)))) (f32.const 0.))
				(set_local $l20 (i32.add (get_local $l20) (i32.const 1)))
				(if (i32.lt_s (get_local $l20) (i32.const 2)) (br $for-in-l20) (br $for-out-l20))
				
			)
		)
		(set_local $l21 (i32.const 0))
		(loop $for-in-l21 
			(block $for-out-l21 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 208) (i32.shl (get_local $l21) (i32.const 2)))) (f32.const 0.))
				(set_local $l21 (i32.add (get_local $l21) (i32.const 1)))
				(if (i32.lt_s (get_local $l21) (i32.const 2)) (br $for-in-l21) (br $for-out-l21))
				
			)
		)
		(set_local $l22 (i32.const 0))
		(loop $for-in-l22 
			(block $for-out-l22 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 216) (i32.shl (get_local $l22) (i32.const 2)))) (f32.const 0.))
				(set_local $l22 (i32.add (get_local $l22) (i32.const 1)))
				(if (i32.lt_s (get_local $l22) (i32.const 2)) (br $for-in-l22) (br $for-out-l22))
				
			)
		)
		(set_local $l23 (i32.const 0))
		(loop $for-in-l23 
			(block $for-out-l23 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 224) (i32.shl (get_local $l23) (i32.const 2)))) (f32.const 0.))
				(set_local $l23 (i32.add (get_local $l23) (i32.const 1)))
				(if (i32.lt_s (get_local $l23) (i32.const 2)) (br $for-in-l23) (br $for-out-l23))
				
			)
		)
		(set_local $l24 (i32.const 0))
		(loop $for-in-l24 
			(block $for-out-l24 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 232) (i32.shl (get_local $l24) (i32.const 2)))) (f32.const 0.))
				(set_local $l24 (i32.add (get_local $l24) (i32.const 1)))
				(if (i32.lt_s (get_local $l24) (i32.const 2)) (br $for-in-l24) (br $for-out-l24))
				
			)
		)
		(set_local $l25 (i32.const 0))
		(loop $for-in-l25 
			(block $for-out-l25 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 240) (i32.shl (get_local $l25) (i32.const 2)))) (f32.const 0.))
				(set_local $l25 (i32.add (get_local $l25) (i32.const 1)))
				(if (i32.lt_s (get_local $l25) (i32.const 2)) (br $for-in-l25) (br $for-out-l25))
				
			)
		)
		(set_local $l26 (i32.const 0))
		(loop $for-in-l26 
			(block $for-out-l26 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 248) (i32.shl (get_local $l26) (i32.const 2)))) (f32.const 0.))
				(set_local $l26 (i32.add (get_local $l26) (i32.const 1)))
				(if (i32.lt_s (get_local $l26) (i32.const 2)) (br $for-in-l26) (br $for-out-l26))
				
			)
		)
		(set_local $l27 (i32.const 0))
		(loop $for-in-l27 
			(block $for-out-l27 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 256) (i32.shl (get_local $l27) (i32.const 2)))) (f32.const 0.))
				(set_local $l27 (i32.add (get_local $l27) (i32.const 1)))
				(if (i32.lt_s (get_local $l27) (i32.const 2)) (br $for-in-l27) (br $for-out-l27))
				
			)
		)
		(set_local $l28 (i32.const 0))
		(loop $for-in-l28 
			(block $for-out-l28 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 264) (i32.shl (get_local $l28) (i32.const 2)))) (f32.const 0.))
				(set_local $l28 (i32.add (get_local $l28) (i32.const 1)))
				(if (i32.lt_s (get_local $l28) (i32.const 2)) (br $for-in-l28) (br $for-out-l28))
				
			)
		)
		(set_local $l29 (i32.const 0))
		(loop $for-in-l29 
			(block $for-out-l29 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 272) (i32.shl (get_local $l29) (i32.const 2)))) (f32.const 0.))
				(set_local $l29 (i32.add (get_local $l29) (i32.const 1)))
				(if (i32.lt_s (get_local $l29) (i32.const 2)) (br $for-in-l29) (br $for-out-l29))
				
			)
		)
		(set_local $l30 (i32.const 0))
		(loop $for-in-l30 
			(block $for-out-l30 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 280) (i32.shl (get_local $l30) (i32.const 2)))) (f32.const 0.))
				(set_local $l30 (i32.add (get_local $l30) (i32.const 1)))
				(if (i32.lt_s (get_local $l30) (i32.const 2)) (br $for-in-l30) (br $for-out-l30))
				
			)
		)
		(set_local $l31 (i32.const 0))
		(loop $for-in-l31 
			(block $for-out-l31 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 288) (i32.shl (get_local $l31) (i32.const 2)))) (f32.const 0.))
				(set_local $l31 (i32.add (get_local $l31) (i32.const 1)))
				(if (i32.lt_s (get_local $l31) (i32.const 2)) (br $for-in-l31) (br $for-out-l31))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 20))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $iSlow1 i32)
		(local $iSlow2 i32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $iSlow5 i32)
		(local $iSlow6 i32)
		(local $iSlow7 i32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $iTemp6 i32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $fTemp16 f32)
		(local $fTemp17 f32)
		(local $fTemp18 f32)
		(local $fTemp19 f32)
		(local $fTemp20 f32)
		(local $fTemp21 f32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(local $fTemp24 f32)
		(local $fTemp25 f32)
		(local $fTemp26 f32)
		(local $fTemp27 f32)
		(local $fTemp28 f32)
		(local $fTemp29 f32)
		(local $fTemp30 f32)
		(local $fTemp31 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $iSlow1 (i32.const 0))
		(set_local $iSlow2 (i32.const 0))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $iSlow5 (i32.const 0))
		(set_local $iSlow6 (i32.const 0))
		(set_local $iSlow7 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $iTemp6 (i32.const 0))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $fTemp16 (f32.const 0.))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $fTemp18 (f32.const 0.))
		(set_local $fTemp19 (f32.const 0.))
		(set_local $fTemp20 (f32.const 0.))
		(set_local $fTemp21 (f32.const 0.))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $fTemp24 (f32.const 0.))
		(set_local $fTemp25 (f32.const 0.))
		(set_local $fTemp26 (f32.const 0.))
		(set_local $fTemp27 (f32.const 0.))
		(set_local $fTemp28 (f32.const 0.))
		(set_local $fTemp29 (f32.const 0.))
		(set_local $fTemp30 (f32.const 0.))
		(set_local $fTemp31 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))
		(set_local $iSlow1 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 56)))))
		(set_local $iSlow2 (i32.eq (get_local $iSlow1) (i32.const 3)))
		(set_local $fSlow3 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 60))) (f32.load (i32.add (get_local $dsp) (i32.const 64)))))
		(set_local $fSlow4 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 84)))))
		(set_local $iSlow5 (i32.eq (get_local $iSlow1) (i32.const 2)))
		(set_local $iSlow6 (i32.eq (get_local $iSlow1) (i32.const 0)))
		(set_local $iSlow7 (i32.eq (get_local $iSlow1) (i32.const 1)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 0)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 16))))))
				(set_local $fTemp0 (f32.abs (f32.abs (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.load (i32.add (get_local $dsp) (i32.const 16)))))))
				(set_local $fTemp1 (select (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.gt (f32.load (i32.add (get_local $dsp) (i32.const 48))) (get_local $fTemp0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 40))) (get_local $fTemp1)) (f32.mul (get_local $fTemp0) (f32.sub (f32.const 1.) (get_local $fTemp1)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 36))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (select (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 72))) (get_local $iSlow2)))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.add (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 80)))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.add (get_local $fSlow4) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 92))))))
				(set_local $fTemp2 (f32.add (f32.mul (f32.const 0.300000012) (f32.load (i32.add (get_local $dsp) (i32.const 88)))) (f32.const 1.)))
				(set_local $fTemp3 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 76))) (get_local $fTemp2))))
				(set_local $fTemp4 (call $sinf (get_local $fTemp3)))
				(set_local $fTemp5 (call $cosf (get_local $fTemp3)))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (get_local $fTemp4)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 100))) (get_local $fTemp5))))
				(set_local $iTemp6 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 4)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (get_local $fTemp5)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 100))) (f32.sub (f32.const 0.) (get_local $fTemp4)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 116))))))
				(set_local $fTemp7 (f32.abs (f32.abs (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.load (i32.add (get_local $dsp) (i32.const 116)))))))
				(set_local $fTemp8 (select (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.gt (f32.load (i32.add (get_local $dsp) (i32.const 132))) (get_local $fTemp7))))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 124))) (get_local $fTemp8)) (f32.mul (get_local $fTemp7) (f32.sub (f32.const 1.) (get_local $fTemp8)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(set_local $fTemp9 (f32.min (f32.const 1.) (f32.mul (f32.const 8000.) (f32.load (i32.add (get_local $dsp) (i32.const 128))))))
				(set_local $fTemp10 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 76))) (f32.mul (f32.const 1000.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (get_local $fTemp9))))))
				(set_local $fTemp11 (call $sinf (get_local $fTemp10)))
				(set_local $fTemp12 (call $cosf (get_local $fTemp10)))
				(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 148))) (get_local $fTemp11)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 140))) (get_local $fTemp12))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 148))) (get_local $fTemp12)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 140))) (f32.sub (f32.const 0.) (get_local $fTemp11)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (select (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 156))) (get_local $iSlow5)))
				(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.add (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 164)))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 152))))))
				(set_local $fTemp13 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 160))) (get_local $fTemp2))))
				(set_local $fTemp14 (call $sinf (get_local $fTemp13)))
				(set_local $fTemp15 (call $cosf (get_local $fTemp13)))
				(f32.store (i32.add (get_local $dsp) (i32.const 168)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $fTemp14)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 172))) (get_local $fTemp15))))
				(f32.store (i32.add (get_local $dsp) (i32.const 176)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $fTemp15)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 172))) (f32.sub (f32.const 0.) (get_local $fTemp14)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(set_local $fTemp16 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 160))) (f32.mul (f32.const 1000.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 168))) (get_local $fTemp9))))))
				(set_local $fTemp17 (call $sinf (get_local $fTemp16)))
				(set_local $fTemp18 (call $cosf (get_local $fTemp16)))
				(f32.store (i32.add (get_local $dsp) (i32.const 184)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 196))) (get_local $fTemp17)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 188))) (get_local $fTemp18))))
				(f32.store (i32.add (get_local $dsp) (i32.const 192)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 196))) (get_local $fTemp18)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 188))) (f32.sub (f32.const 0.) (get_local $fTemp17)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 200)) (select (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 204))) (get_local $iSlow6)))
				(f32.store (i32.add (get_local $dsp) (i32.const 208)) (f32.add (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 212)))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 200))))))
				(set_local $fTemp19 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 208))) (get_local $fTemp2))))
				(set_local $fTemp20 (call $sinf (get_local $fTemp19)))
				(set_local $fTemp21 (call $cosf (get_local $fTemp19)))
				(f32.store (i32.add (get_local $dsp) (i32.const 216)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 228))) (get_local $fTemp20)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 220))) (get_local $fTemp21))))
				(f32.store (i32.add (get_local $dsp) (i32.const 224)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 228))) (get_local $fTemp21)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 220))) (f32.sub (f32.const 0.) (get_local $fTemp20)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(set_local $fTemp22 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 208))) (f32.mul (f32.const 1000.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 216))) (get_local $fTemp9))))))
				(set_local $fTemp23 (call $sinf (get_local $fTemp22)))
				(set_local $fTemp24 (call $cosf (get_local $fTemp22)))
				(f32.store (i32.add (get_local $dsp) (i32.const 232)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 244))) (get_local $fTemp23)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 236))) (get_local $fTemp24))))
				(f32.store (i32.add (get_local $dsp) (i32.const 240)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 244))) (get_local $fTemp24)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 236))) (f32.sub (f32.const 0.) (get_local $fTemp23)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 248)) (select (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 252))) (get_local $iSlow7)))
				(f32.store (i32.add (get_local $dsp) (i32.const 256)) (f32.add (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 260)))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 248))))))
				(set_local $fTemp25 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 256))) (get_local $fTemp2))))
				(set_local $fTemp26 (call $sinf (get_local $fTemp25)))
				(set_local $fTemp27 (call $cosf (get_local $fTemp25)))
				(f32.store (i32.add (get_local $dsp) (i32.const 264)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 276))) (get_local $fTemp26)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 268))) (get_local $fTemp27))))
				(f32.store (i32.add (get_local $dsp) (i32.const 272)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 276))) (get_local $fTemp27)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 268))) (f32.sub (f32.const 0.) (get_local $fTemp26)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(set_local $fTemp28 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 256))) (f32.mul (f32.const 1000.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 264))) (get_local $fTemp9))))))
				(set_local $fTemp29 (call $sinf (get_local $fTemp28)))
				(set_local $fTemp30 (call $cosf (get_local $fTemp28)))
				(f32.store (i32.add (get_local $dsp) (i32.const 280)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 292))) (get_local $fTemp29)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 284))) (get_local $fTemp30))))
				(f32.store (i32.add (get_local $dsp) (i32.const 288)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 292))) (get_local $fTemp30)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 284))) (f32.sub (f32.const 0.) (get_local $fTemp29)))) (f32.convert_s/i32 (get_local $iTemp6))))
				(set_local $fTemp31 (f32.mul (f32.min (f32.const 1.) (f32.mul (f32.const 8000.) (f32.load (i32.add (get_local $dsp) (i32.const 44))))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 136))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 184))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 232))) (f32.load (i32.add (get_local $dsp) (i32.const 280))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp31))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp31))
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.load (i32.add (get_local $dsp) (i32.const 0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.load (i32.add (get_local $dsp) (i32.const 12))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.load (i32.add (get_local $dsp) (i32.const 36))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.load (i32.add (get_local $dsp) (i32.const 44))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.load (i32.add (get_local $dsp) (i32.const 68))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.load (i32.add (get_local $dsp) (i32.const 76))))
				(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.load (i32.add (get_local $dsp) (i32.const 88))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.load (i32.add (get_local $dsp) (i32.const 112))))
				(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.load (i32.add (get_local $dsp) (i32.const 136))))
				(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(f32.store (i32.add (get_local $dsp) (i32.const 164)) (f32.load (i32.add (get_local $dsp) (i32.const 160))))
				(f32.store (i32.add (get_local $dsp) (i32.const 172)) (f32.load (i32.add (get_local $dsp) (i32.const 168))))
				(f32.store (i32.add (get_local $dsp) (i32.const 180)) (f32.load (i32.add (get_local $dsp) (i32.const 176))))
				(f32.store (i32.add (get_local $dsp) (i32.const 188)) (f32.load (i32.add (get_local $dsp) (i32.const 184))))
				(f32.store (i32.add (get_local $dsp) (i32.const 196)) (f32.load (i32.add (get_local $dsp) (i32.const 192))))
				(f32.store (i32.add (get_local $dsp) (i32.const 204)) (f32.load (i32.add (get_local $dsp) (i32.const 200))))
				(f32.store (i32.add (get_local $dsp) (i32.const 212)) (f32.load (i32.add (get_local $dsp) (i32.const 208))))
				(f32.store (i32.add (get_local $dsp) (i32.const 220)) (f32.load (i32.add (get_local $dsp) (i32.const 216))))
				(f32.store (i32.add (get_local $dsp) (i32.const 228)) (f32.load (i32.add (get_local $dsp) (i32.const 224))))
				(f32.store (i32.add (get_local $dsp) (i32.const 236)) (f32.load (i32.add (get_local $dsp) (i32.const 232))))
				(f32.store (i32.add (get_local $dsp) (i32.const 244)) (f32.load (i32.add (get_local $dsp) (i32.const 240))))
				(f32.store (i32.add (get_local $dsp) (i32.const 252)) (f32.load (i32.add (get_local $dsp) (i32.const 248))))
				(f32.store (i32.add (get_local $dsp) (i32.const 260)) (f32.load (i32.add (get_local $dsp) (i32.const 256))))
				(f32.store (i32.add (get_local $dsp) (i32.const 268)) (f32.load (i32.add (get_local $dsp) (i32.const 264))))
				(f32.store (i32.add (get_local $dsp) (i32.const 276)) (f32.load (i32.add (get_local $dsp) (i32.const 272))))
				(f32.store (i32.add (get_local $dsp) (i32.const 284)) (f32.load (i32.add (get_local $dsp) (i32.const 280))))
				(f32.store (i32.add (get_local $dsp) (i32.const 292)) (f32.load (i32.add (get_local $dsp) (i32.const 288))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
