
(module
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"Brass\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"16600\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple brass instrument physical model with physical parameters.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Brass\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"brass\",\"items\":[{\"type\":\"vgroup\",\"label\":\"blower\",\"items\":[{\"type\":\"hslider\",\"label\":\"pressure\",\"address\":\"/brass/blower/pressure\",\"index\":\"80\",\"meta\":[{\"0\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"breathGain\",\"address\":\"/brass/blower/breathGain\",\"index\":\"92\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"breathCutoff\",\"address\":\"/brass/blower/breathCutoff\",\"index\":\"100\",\"meta\":[{\"2\":\"\"}],\"init\":\"2000\",\"min\":\"20\",\"max\":\"20000\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"vibratoFreq\",\"address\":\"/brass/blower/vibratoFreq\",\"index\":\"60\",\"meta\":[{\"3\":\"\"}],\"init\":\"5\",\"min\":\"0.1\",\"max\":\"10\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"vibratoGain\",\"address\":\"/brass/blower/vibratoGain\",\"index\":\"44\",\"meta\":[{\"4\":\"\"}],\"init\":\"0.25\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"vgroup\",\"label\":\"brassModel\",\"items\":[{\"type\":\"hslider\",\"label\":\"tubeLength\",\"address\":\"/brass/brassModel/tubeLength\",\"index\":\"140\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.5\",\"min\":\"0.01\",\"max\":\"2.5\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"lipsTension\",\"address\":\"/brass/brassModel/lipsTension\",\"index\":\"128\",\"meta\":[{\"2\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"mute\",\"address\":\"/brass/brassModel/mute\",\"index\":\"8\",\"meta\":[{\"3\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 48)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 48)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.div (f32.const 2136.28296) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8376)) (f32.mul (f32.const 0.00882352982) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8380)) (f32.mul (f32.const 0.00147058826) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.const 0.25))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 5.))
		(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.const 0.100000001))
		(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.const 2000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.const 0.5))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(local $l16 i32)
		(local $l17 i32)
		(local $l18 i32)
		(local $l19 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l16 (i32.const 0))
		(set_local $l17 (i32.const 0))
		(set_local $l18 (i32.const 0))
		(set_local $l19 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 12) (i32.shl (get_local $l1) (i32.const 2)))) (i32.const 0))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 20) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 36) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 84) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l8) (i32.const 2)))) (i32.const 0))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 112) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 3)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 132) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 144) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 3)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 164) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 172) (i32.shl (get_local $l14) (i32.const 2)))) (f32.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 2)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 180)) (i32.const 0))
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (get_local $l15) (i32.const 2)))) (f32.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 2048)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		(set_local $l16 (i32.const 0))
		(loop $for-in-l16 
			(block $for-out-l16 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8384) (i32.shl (get_local $l16) (i32.const 2)))) (f32.const 0.))
				(set_local $l16 (i32.add (get_local $l16) (i32.const 1)))
				(if (i32.lt_s (get_local $l16) (i32.const 2)) (br $for-in-l16) (br $for-out-l16))
				
			)
		)
		(set_local $l17 (i32.const 0))
		(loop $for-in-l17 
			(block $for-out-l17 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8392) (i32.shl (get_local $l17) (i32.const 2)))) (f32.const 0.))
				(set_local $l17 (i32.add (get_local $l17) (i32.const 1)))
				(if (i32.lt_s (get_local $l17) (i32.const 2)) (br $for-in-l17) (br $for-out-l17))
				
			)
		)
		(set_local $l18 (i32.const 0))
		(loop $for-in-l18 
			(block $for-out-l18 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (get_local $l18) (i32.const 2)))) (f32.const 0.))
				(set_local $l18 (i32.add (get_local $l18) (i32.const 1)))
				(if (i32.lt_s (get_local $l18) (i32.const 2048)) (br $for-in-l18) (br $for-out-l18))
				
			)
		)
		(set_local $l19 (i32.const 0))
		(loop $for-in-l19 
			(block $for-out-l19 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16592) (i32.shl (get_local $l19) (i32.const 2)))) (f32.const 0.))
				(set_local $l19 (i32.add (get_local $l19) (i32.const 1)))
				(if (i32.lt_s (get_local $l19) (i32.const 2)) (br $for-in-l19) (br $for-out-l19))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 48))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $i i32)
		(local $fRec10 f32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $iRec17 i32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $iTemp6 i32)
		(local $iTemp7 i32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $fTemp16 f32)
		(local $fTemp17 f32)
		(local $tmp_in0 i32)
		(local $iTemp18 i32)
		(local $fTemp19 f32)
		(local $fTemp20 f32)
		(local $tmp_in1 i32)
		(local $iTemp21 i32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(local $fTemp24 f32)
		(local $fTemp25 f32)
		(local $tmp_in2 i32)
		(local $iTemp26 i32)
		(local $fTemp27 f32)
		(local $fTemp28 f32)
		(local $tmp_in3 i32)
		(local $iTemp29 i32)
		(local $iRec12 i32)
		(local $fRec7 f32)
		(local $fRec8 f32)
		(local $fRec9 f32)
		(local $fRec3 f32)
		(local $fRec4 f32)
		(local $fRec5 f32)
		(local $fRec1 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fRec10 (f32.const 0.))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $iRec17 (i32.const 0))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $iTemp6 (i32.const 0))
		(set_local $iTemp7 (i32.const 0))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $fTemp16 (f32.const 0.))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $iTemp18 (i32.const 0))
		(set_local $fTemp19 (f32.const 0.))
		(set_local $fTemp20 (f32.const 0.))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $iTemp21 (i32.const 0))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $fTemp24 (f32.const 0.))
		(set_local $fTemp25 (f32.const 0.))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $iTemp26 (i32.const 0))
		(set_local $fTemp27 (f32.const 0.))
		(set_local $fTemp28 (f32.const 0.))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $iTemp29 (i32.const 0))
		(set_local $iRec12 (i32.const 0))
		(set_local $fRec7 (f32.const 0.))
		(set_local $fRec8 (f32.const 0.))
		(set_local $fRec9 (f32.const 0.))
		(set_local $fRec3 (f32.const 0.))
		(set_local $fRec4 (f32.const 0.))
		(set_local $fRec5 (f32.const 0.))
		(set_local $fRec1 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))
		(set_local $fSlow1 (f32.mul (f32.const 0.0299999993) (f32.load (i32.add (get_local $dsp) (i32.const 44)))))
		(set_local $fSlow2 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 56))) (f32.load (i32.add (get_local $dsp) (i32.const 60)))))
		(set_local $fSlow3 (call $sinf (get_local $fSlow2)))
		(set_local $fSlow4 (call $cosf (get_local $fSlow2)))
		(set_local $fSlow5 (f32.sub (f32.const 0.) (get_local $fSlow3)))
		(set_local $fSlow6 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 80)))))
		(set_local $fSlow7 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.load (i32.add (get_local $dsp) (i32.const 100))))))
		(set_local $fSlow8 (f32.div (f32.const 1.) (get_local $fSlow7)))
		(set_local $fSlow9 (f32.add (f32.div (f32.add (get_local $fSlow8) (f32.const 1.41421354)) (get_local $fSlow7)) (f32.const 1.)))
		(set_local $fSlow10 (f32.mul (f32.const 0.0500000007) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 92))) (get_local $fSlow9))))
		(set_local $fSlow11 (f32.div (f32.const 1.) (get_local $fSlow9)))
		(set_local $fSlow12 (f32.add (f32.div (f32.add (get_local $fSlow8) (f32.const -1.41421354)) (get_local $fSlow7)) (f32.const 1.)))
		(set_local $fSlow13 (f32.mul (f32.const 2.) (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fSlow7) (f32.const 2.))))))
		(set_local $fSlow14 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 128)))))
		(set_local $fSlow15 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 140)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 0)) (i32.const 0))
				(i32.store (i32.add (get_local $dsp) (i32.const 12)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 24))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 20))) (f32.load (i32.add (get_local $dsp) (i32.const 32)))) (f32.mul (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 20)))) (f32.load (i32.add (get_local $dsp) (i32.const 8396))))))
				(set_local $fRec10 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 4))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.load (i32.add (get_local $dsp) (i32.const 16596))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 76)))) (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.add (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 76)))) (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 68))))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 16)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.add (get_local $fSlow6) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 88))))))
				(i32.store (i32.add (get_local $dsp) (i32.const 104)) (i32.add (i32.mul (i32.const 1103515245) (i32.load (i32.add (get_local $dsp) (i32.const 108)))) (i32.const 12345)))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.sub (f32.mul (f32.const 4.65661287e-10) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 104))))) (f32.mul (get_local $fSlow11) (f32.add (f32.mul (get_local $fSlow12) (f32.load (i32.add (get_local $dsp) (i32.const 120)))) (f32.mul (get_local $fSlow13) (f32.load (i32.add (get_local $dsp) (i32.const 116))))))))
				(set_local $fTemp0 (f32.add (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 64)))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 84))) (f32.add (f32.mul (get_local $fSlow10) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 120))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 116))))))) (f32.const 1.)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.add (get_local $fSlow14) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 136))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.add (get_local $fSlow15) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 148))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.sub (f32.mul (f32.const 0.0299999993) (f32.sub (f32.mul (f32.const 0.300000012) (get_local $fTemp0)) (f32.mul (f32.const 0.850000024) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 156))) (f32.sub (f32.const 0.) (f32.mul (f32.const 1.99399996) (call $cosf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 124))) (f32.div (call $powf (f32.const 4.) (f32.add (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 132)))) (f32.const -1.))) (f32.load (i32.add (get_local $dsp) (i32.const 144))))))))) (f32.mul (f32.const 0.994009018) (f32.load (i32.add (get_local $dsp) (i32.const 160)))))))
				(set_local $fTemp1 (f32.max (f32.const -1.) (f32.min (f32.const 1.) (call $powf (f32.load (i32.add (get_local $dsp) (i32.const 152))) (f32.const 2.)))))
				(set_local $fTemp2 (f32.mul (f32.const 0.850000024) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 40))) (f32.sub (f32.const 1.) (get_local $fTemp1)))))
				(set_local $fTemp3 (f32.mul (f32.const 0.300000012) (f32.mul (get_local $fTemp0) (get_local $fTemp1))))
				(f32.store (i32.add (get_local $dsp) (i32.const 164)) (f32.add (get_local $fTemp3) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $dsp) (i32.const 172)) (f32.sub (f32.add (get_local $fTemp2) (f32.add (f32.mul (f32.const 0.995000005) (f32.load (i32.add (get_local $dsp) (i32.const 176)))) (get_local $fTemp3))) (f32.load (i32.add (get_local $dsp) (i32.const 168)))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 180))) (i32.const 2047)) (i32.const 2)))) (f32.load (i32.add (get_local $dsp) (i32.const 172))))
				(set_local $iRec17 (i32.const 0))
				(set_local $fTemp4 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8380))) (f32.load (i32.add (get_local $dsp) (i32.const 144)))))
				(set_local $fTemp5 (f32.add (get_local $fTemp4) (f32.const -1.49999499)))
				(set_local $iTemp6 (i32.trunc_s/f32 (get_local $fTemp5)))
				(set_local $iTemp7 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.convert_s/i32 (select (get_local $iTemp6) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp6)))))) (i32.const 1)))
				(set_local $fTemp8 (f32.floor (get_local $fTemp5)))
				(set_local $fTemp9 (f32.add (get_local $fTemp4) (f32.sub (f32.const -1.) (get_local $fTemp8))))
				(set_local $fTemp10 (f32.sub (f32.const 0.) (get_local $fTemp9)))
				(set_local $fTemp11 (f32.add (get_local $fTemp4) (f32.sub (f32.const -2.) (get_local $fTemp8))))
				(set_local $fTemp12 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp11))))
				(set_local $fTemp13 (f32.add (get_local $fTemp4) (f32.sub (f32.const -3.) (get_local $fTemp8))))
				(set_local $fTemp14 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp13))))
				(set_local $fTemp15 (f32.add (get_local $fTemp4) (f32.sub (f32.const -4.) (get_local $fTemp8))))
				(set_local $fTemp16 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.25) (get_local $fTemp15))))
				(set_local $fTemp17 (f32.sub (get_local $fTemp4) (get_local $fTemp8)))
				(set_local $tmp_in0 (i32.add (get_local $iTemp6) (i32.const 2)))
				(set_local $iTemp18 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.convert_s/i32 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0)))))) (i32.const 1)))
				(set_local $fTemp19 (f32.sub (f32.const 0.) (get_local $fTemp13)))
				(set_local $fTemp20 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp15))))
				(set_local $tmp_in1 (i32.add (get_local $iTemp6) (i32.const 1)))
				(set_local $iTemp21 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.convert_s/i32 (select (get_local $tmp_in1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in1)))))) (i32.const 1)))
				(set_local $fTemp22 (f32.sub (f32.const 0.) (get_local $fTemp11)))
				(set_local $fTemp23 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp13))))
				(set_local $fTemp24 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp15))))
				(set_local $fTemp25 (f32.mul (get_local $fTemp9) (get_local $fTemp11)))
				(set_local $tmp_in2 (i32.add (get_local $iTemp6) (i32.const 3)))
				(set_local $iTemp26 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.convert_s/i32 (select (get_local $tmp_in2) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in2)))))) (i32.const 1)))
				(set_local $fTemp27 (f32.sub (f32.const 0.) (get_local $fTemp15)))
				(set_local $fTemp28 (f32.mul (get_local $fTemp25) (get_local $fTemp13)))
				(set_local $tmp_in3 (i32.add (get_local $iTemp6) (i32.const 4)))
				(set_local $iTemp29 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.convert_s/i32 (select (get_local $tmp_in3) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in3)))))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8384)) (f32.add (f32.mul (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp7)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp10)) (get_local $fTemp12)) (get_local $fTemp14)) (get_local $fTemp16)) (f32.mul (get_local $fTemp17) (f32.add (f32.add (f32.add (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp9) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp18)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp19)) (get_local $fTemp20))) (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp21)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp22)) (get_local $fTemp23)) (get_local $fTemp24))) (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp25) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp26)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp27)))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp28) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 184) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp29)) (i32.const 2047)) (i32.const 2)))))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8392)) (f32.load (i32.add (get_local $dsp) (i32.const 8388))))
				(set_local $iRec12 (get_local $iRec17))
				(set_local $fRec7 (get_local $fRec10))
				(set_local $fRec8 (f32.load (i32.add (get_local $dsp) (i32.const 8392))))
				(set_local $fRec9 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 8392))) (f32.convert_s/i32 (get_local $iRec12))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 180))) (i32.const 2047)) (i32.const 2)))) (get_local $fRec7))
				(set_local $fRec3 (f32.add (f32.mul (f32.mul (f32.mul (f32.mul (get_local $fTemp10) (get_local $fTemp12)) (get_local $fTemp14)) (get_local $fTemp16)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp7)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (get_local $fTemp17) (f32.add (f32.add (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp25) (get_local $fTemp27)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp26)) (i32.const 2047)) (i32.const 2))))))) (f32.add (f32.mul (f32.mul (f32.mul (get_local $fTemp22) (get_local $fTemp23)) (get_local $fTemp24)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp21)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp9) (get_local $fTemp19)) (get_local $fTemp20)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp18)) (i32.const 2047)) (i32.const 2))))))))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp28) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 180))) (get_local $iTemp29)) (i32.const 2047)) (i32.const 2)))))))))))
				(set_local $fRec4 (get_local $fRec8))
				(set_local $fRec5 (get_local $fRec9))
				(f32.store (i32.add (get_local $dsp) (i32.const 16592)) (get_local $fRec3))
				(set_local $fRec1 (get_local $fRec5))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fRec1))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fRec1))
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.load (i32.add (get_local $dsp) (i32.const 0))))
				(i32.store (i32.add (get_local $dsp) (i32.const 16)) (i32.load (i32.add (get_local $dsp) (i32.const 12))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.load (i32.add (get_local $dsp) (i32.const 20))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.load (i32.add (get_local $dsp) (i32.const 36))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.load (i32.add (get_local $dsp) (i32.const 84))))
				(i32.store (i32.add (get_local $dsp) (i32.const 108)) (i32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.load (i32.add (get_local $dsp) (i32.const 116))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.load (i32.add (get_local $dsp) (i32.const 112))))
				(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.load (i32.add (get_local $dsp) (i32.const 132))))
				(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.load (i32.add (get_local $dsp) (i32.const 156))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(f32.store (i32.add (get_local $dsp) (i32.const 168)) (f32.load (i32.add (get_local $dsp) (i32.const 164))))
				(f32.store (i32.add (get_local $dsp) (i32.const 176)) (f32.load (i32.add (get_local $dsp) (i32.const 172))))
				(i32.store (i32.add (get_local $dsp) (i32.const 180)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 180))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8388)) (f32.load (i32.add (get_local $dsp) (i32.const 8384))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8396)) (f32.load (i32.add (get_local $dsp) (i32.const 8392))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16596)) (f32.load (i32.add (get_local $dsp) (i32.const 16592))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
