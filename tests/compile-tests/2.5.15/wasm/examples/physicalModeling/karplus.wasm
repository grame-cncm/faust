
(module
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"KarplusStrong\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"16484\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple call of the Karplus-Strong model for the Faust physical modeling library\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"KarplusStrong\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"karplus\",\"items\":[{\"type\":\"hgroup\",\"label\":\"params\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/karplus/params/freq\",\"index\":\"8224\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"}],\"init\":\"440\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/karplus/params/bend\",\"index\":\"8228\",\"meta\":[{\"1\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"pitchwheel\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"damping\",\"address\":\"/karplus/params/damping\",\"index\":\"0\",\"meta\":[{\"1\":\"\"},{\"midi\":\"ctrl 1\"},{\"style\":\"knob\"}],\"init\":\"0.01\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/karplus/params/gain\",\"index\":\"8256\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.8\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/karplus/params/sustain\",\"index\":\"8236\",\"meta\":[{\"3\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"ctrl 64\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"}]},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/karplus/gate\",\"index\":\"8232\",\"meta\":[{\"1\":\"\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 8208)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 8212)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 8208)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8216)) (f32.mul (f32.const 0.00882352982) (f32.load (i32.add (get_local $dsp) (i32.const 8212)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8220)) (f32.mul (f32.const 0.00147058826) (f32.load (i32.add (get_local $dsp) (i32.const 8212)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.00999999978))
		(f32.store (i32.add (get_local $dsp) (i32.const 8224)) (f32.const 440.))
		(f32.store (i32.add (get_local $dsp) (i32.const 8228)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 8232)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 8236)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 8256)) (f32.const 0.800000012))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 12)) (i32.const 0))
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2048)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8240) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8248) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2048)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16452) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16460) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 3)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16472) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 3)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 8208))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $iSlow4 i32)
		(local $fSlow5 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $iTemp1 i32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $iTemp4 i32)
		(local $iTemp5 i32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $tmp_in0 i32)
		(local $iTemp16 i32)
		(local $fTemp17 f32)
		(local $fTemp18 f32)
		(local $tmp_in1 i32)
		(local $iTemp19 i32)
		(local $fTemp20 f32)
		(local $fTemp21 f32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(local $tmp_in2 i32)
		(local $iTemp24 i32)
		(local $fTemp25 f32)
		(local $fTemp26 f32)
		(local $tmp_in3 i32)
		(local $iTemp27 i32)
		(local $fRec8 f32)
		(local $fTemp28 f32)
		(local $fTemp29 f32)
		(local $fTemp30 f32)
		(local $fTemp31 f32)
		(local $fRec9 f32)
		(local $fRec10 f32)
		(local $fRec4 f32)
		(local $fRec5 f32)
		(local $fRec6 f32)
		(local $fRec2 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $iSlow4 (i32.const 0))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $iTemp1 (i32.const 0))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $iTemp4 (i32.const 0))
		(set_local $iTemp5 (i32.const 0))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $iTemp16 (i32.const 0))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $fTemp18 (f32.const 0.))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $iTemp19 (i32.const 0))
		(set_local $fTemp20 (f32.const 0.))
		(set_local $fTemp21 (f32.const 0.))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $iTemp24 (i32.const 0))
		(set_local $fTemp25 (f32.const 0.))
		(set_local $fTemp26 (f32.const 0.))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $iTemp27 (i32.const 0))
		(set_local $fRec8 (f32.const 0.))
		(set_local $fTemp28 (f32.const 0.))
		(set_local $fTemp29 (f32.const 0.))
		(set_local $fTemp30 (f32.const 0.))
		(set_local $fTemp31 (f32.const 0.))
		(set_local $fRec9 (f32.const 0.))
		(set_local $fRec10 (f32.const 0.))
		(set_local $fRec4 (f32.const 0.))
		(set_local $fRec5 (f32.const 0.))
		(set_local $fRec6 (f32.const 0.))
		(set_local $fRec2 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 0)))))
		(set_local $fSlow1 (f32.div (f32.const 340.) (f32.load (i32.add (get_local $dsp) (i32.const 8224)))))
		(set_local $fSlow2 (f32.load (i32.add (get_local $dsp) (i32.const 8228))))
		(set_local $fSlow3 (f32.min (f32.const 1.) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 8232))) (f32.load (i32.add (get_local $dsp) (i32.const 8236))))))
		(set_local $iSlow4 (f32.eq (get_local $fSlow3) (f32.const 0.)))
		(set_local $fSlow5 (f32.load (i32.add (get_local $dsp) (i32.const 8256))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 8))))))
				(set_local $fTemp0 (f32.mul (f32.const 0.5) (f32.mul (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16476))) (f32.load (i32.add (get_local $dsp) (i32.const 16480)))) (f32.add (f32.mul (f32.const 0.200000003) (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 4))))) (f32.const 0.800000012)))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 12))) (i32.const 2047)) (i32.const 2)))) (get_local $fTemp0))
				(f32.store (i32.add (get_local $dsp) (i32.const 8240)) (get_local $fSlow3))
				(set_local $iTemp1 (i32.or (f32.eq (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 8244)))) (get_local $iSlow4)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8248)) (f32.add (f32.mul (get_local $fSlow2) (f32.sub (f32.const 1.) (f32.mul (f32.const 0.999000013) (f32.convert_s/i32 (get_local $iTemp1))))) (f32.mul (f32.const 0.999000013) (f32.mul (f32.convert_s/i32 (get_local $iTemp1)) (f32.load (i32.add (get_local $dsp) (i32.const 8252)))))))
				(set_local $fTemp2 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8220))) (f32.add (f32.div (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 8248)))) (f32.const -0.0500000007))))
				(set_local $fTemp3 (f32.add (get_local $fTemp2) (f32.const -1.49999499)))
				(set_local $iTemp4 (i32.trunc_s/f32 (get_local $fTemp3)))
				(set_local $iTemp5 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8216))) (f32.convert_s/i32 (select (get_local $iTemp4) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp4)))))) (i32.const 1)))
				(set_local $fTemp6 (f32.floor (get_local $fTemp3)))
				(set_local $fTemp7 (f32.add (get_local $fTemp2) (f32.sub (f32.const -1.) (get_local $fTemp6))))
				(set_local $fTemp8 (f32.sub (f32.const 0.) (get_local $fTemp7)))
				(set_local $fTemp9 (f32.add (get_local $fTemp2) (f32.sub (f32.const -2.) (get_local $fTemp6))))
				(set_local $fTemp10 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp9))))
				(set_local $fTemp11 (f32.add (get_local $fTemp2) (f32.sub (f32.const -3.) (get_local $fTemp6))))
				(set_local $fTemp12 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp11))))
				(set_local $fTemp13 (f32.add (get_local $fTemp2) (f32.sub (f32.const -4.) (get_local $fTemp6))))
				(set_local $fTemp14 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.25) (get_local $fTemp13))))
				(set_local $fTemp15 (f32.sub (get_local $fTemp2) (get_local $fTemp6)))
				(set_local $tmp_in0 (i32.add (get_local $iTemp4) (i32.const 2)))
				(set_local $iTemp16 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8216))) (f32.convert_s/i32 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0)))))) (i32.const 1)))
				(set_local $fTemp17 (f32.sub (f32.const 0.) (get_local $fTemp11)))
				(set_local $fTemp18 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp13))))
				(set_local $tmp_in1 (i32.add (get_local $iTemp4) (i32.const 1)))
				(set_local $iTemp19 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8216))) (f32.convert_s/i32 (select (get_local $tmp_in1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in1)))))) (i32.const 1)))
				(set_local $fTemp20 (f32.sub (f32.const 0.) (get_local $fTemp9)))
				(set_local $fTemp21 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp11))))
				(set_local $fTemp22 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp13))))
				(set_local $fTemp23 (f32.mul (get_local $fTemp7) (get_local $fTemp9)))
				(set_local $tmp_in2 (i32.add (get_local $iTemp4) (i32.const 3)))
				(set_local $iTemp24 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8216))) (f32.convert_s/i32 (select (get_local $tmp_in2) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in2)))))) (i32.const 1)))
				(set_local $fTemp25 (f32.sub (f32.const 0.) (get_local $fTemp13)))
				(set_local $fTemp26 (f32.mul (get_local $fTemp23) (get_local $fTemp11)))
				(set_local $tmp_in3 (i32.add (get_local $iTemp4) (i32.const 4)))
				(set_local $iTemp27 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8216))) (f32.convert_s/i32 (select (get_local $tmp_in3) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in3)))))) (i32.const 1)))
				(set_local $fRec8 (f32.add (f32.mul (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp5)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp8)) (get_local $fTemp10)) (get_local $fTemp12)) (get_local $fTemp14)) (f32.mul (get_local $fTemp15) (f32.add (f32.add (f32.add (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp7) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp16)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp17)) (get_local $fTemp18))) (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp19)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp20)) (get_local $fTemp21)) (get_local $fTemp22))) (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp23) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp24)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp25)))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp26) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp27)) (i32.const 2047)) (i32.const 2)))))))))))
				(set_local $fTemp28 (f32.mul (get_local $fSlow5) (f32.convert_s/i32 (f32.gt (f32.sub (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 8244)))) (f32.const 0.)))))
				(set_local $fTemp29 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16468))) (get_local $fTemp28)))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 12))) (i32.const 2047)) (i32.const 2)))) (get_local $fTemp29))
				(set_local $fTemp30 (f32.mul (f32.mul (f32.mul (f32.mul (get_local $fTemp8) (get_local $fTemp10)) (get_local $fTemp12)) (get_local $fTemp14)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp5)) (i32.const 2047)) (i32.const 2)))))))
				(set_local $fTemp31 (f32.mul (get_local $fTemp15) (f32.add (f32.add (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp23) (get_local $fTemp25)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp24)) (i32.const 2047)) (i32.const 2))))))) (f32.add (f32.mul (f32.mul (f32.mul (get_local $fTemp20) (get_local $fTemp21)) (get_local $fTemp22)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp19)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp7) (get_local $fTemp17)) (get_local $fTemp18)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp16)) (i32.const 2047)) (i32.const 2))))))))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp26) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8260) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $iTemp27)) (i32.const 2047)) (i32.const 2))))))))))
				(set_local $fRec9 (f32.add (get_local $fTemp30) (get_local $fTemp31)))
				(set_local $fRec10 (f32.add (f32.add (get_local $fTemp0) (get_local $fTemp30)) (get_local $fTemp31)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16452)) (get_local $fRec8))
				(set_local $fRec4 (f32.add (get_local $fTemp28) (f32.load (i32.add (get_local $dsp) (i32.const 16456)))))
				(set_local $fRec5 (get_local $fRec9))
				(set_local $fRec6 (get_local $fRec10))
				(f32.store (i32.add (get_local $dsp) (i32.const 16460)) (get_local $fRec4))
				(f32.store (i32.add (get_local $dsp) (i32.const 16472)) (get_local $fRec5))
				(set_local $fRec2 (get_local $fRec6))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fRec2))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fRec2))
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.load (i32.add (get_local $dsp) (i32.const 4))))
				(i32.store (i32.add (get_local $dsp) (i32.const 12)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 12))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8244)) (f32.load (i32.add (get_local $dsp) (i32.const 8240))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8252)) (f32.load (i32.add (get_local $dsp) (i32.const 8248))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16456)) (f32.load (i32.add (get_local $dsp) (i32.const 16452))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16468)) (f32.load (i32.add (get_local $dsp) (i32.const 16464))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16464)) (f32.load (i32.add (get_local $dsp) (i32.const 16460))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16480)) (f32.load (i32.add (get_local $dsp) (i32.const 16476))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16476)) (f32.load (i32.add (get_local $dsp) (i32.const 16472))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
