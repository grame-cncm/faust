
(module
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(import $expf "env" "_expf" (param f32) (result f32))
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"ClarinetMIDI\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"16600\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple MIDI-controllable clarinet physical model with physical parameters.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"ClarinetMIDI\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"clarinet\",\"items\":[{\"type\":\"hgroup\",\"label\":\"midi\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/clarinet/midi/freq\",\"index\":\"8368\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"}],\"init\":\"440\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/clarinet/midi/bend\",\"index\":\"8372\",\"meta\":[{\"1\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"pitchwheel\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/clarinet/midi/gain\",\"index\":\"84\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.6\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"envAttack\",\"address\":\"/clarinet/midi/envAttack\",\"index\":\"92\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"30\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/clarinet/midi/sustain\",\"index\":\"72\",\"meta\":[{\"4\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"ctrl 64\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"}]},{\"type\":\"hgroup\",\"label\":\"otherParams\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"reedStiffness\",\"address\":\"/clarinet/otherParams/reedStiffness\",\"index\":\"160\",\"meta\":[{\"0\":\"\"},{\"midi\":\"ctrl 1\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"bellOpening\",\"address\":\"/clarinet/otherParams/bellOpening\",\"index\":\"12\",\"meta\":[{\"1\":\"\"},{\"midi\":\"ctrl 3\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoFreq\",\"address\":\"/clarinet/otherParams/vibratoFreq\",\"index\":\"48\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"5\",\"min\":\"1\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoGain\",\"address\":\"/clarinet/otherParams/vibratoGain\",\"index\":\"32\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.25\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"outGain\",\"address\":\"/clarinet/otherParams/outGain\",\"index\":\"0\",\"meta\":[{\"4\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/clarinet/gate\",\"index\":\"68\",\"meta\":[{\"2\":\"\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 36)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 36)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.div (f32.const 1000.) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 104)) (call $tanf (f32.div (f32.const 6283.18555) (f32.load (i32.add (get_local $dsp) (i32.const 40))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 104)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.add (f32.div (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.const 1.41421354)) (f32.load (i32.add (get_local $dsp) (i32.const 104)))) (f32.const 1.)))
		(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.div (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 112)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 112)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.mul (f32.const 2.) (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (f32.load (i32.add (get_local $dsp) (i32.const 104))) (f32.const 2.))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.add (f32.div (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.const -1.41421354)) (f32.load (i32.add (get_local $dsp) (i32.const 104)))) (f32.const 1.)))
		(f32.store (i32.add (get_local $dsp) (i32.const 8360)) (f32.mul (f32.const 0.00882352982) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8364)) (f32.mul (f32.const 0.00147058826) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.const 0.25))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.const 5.))
		(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.const 0.600000024))
		(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 8368)) (f32.const 440.))
		(f32.store (i32.add (get_local $dsp) (i32.const 8372)) (f32.const 1.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l1) (i32.const 2)))) (i32.const 0))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 24) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 60) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 76) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 120) (i32.shl (get_local $l7) (i32.const 2)))) (i32.const 0))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 140) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 3)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 2)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 164)) (i32.const 0))
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2048)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8376) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8384) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8392) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (get_local $l14) (i32.const 2)))) (f32.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 2048)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16592) (i32.shl (get_local $l15) (i32.const 2)))) (f32.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 2)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 36))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $iSlow14 i32)
		(local $i i32)
		(local $fRec10 f32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $iRec16 i32)
		(local $iTemp3 i32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $iTemp6 i32)
		(local $iTemp7 i32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $fTemp16 f32)
		(local $fTemp17 f32)
		(local $tmp_in0 i32)
		(local $iTemp18 i32)
		(local $fTemp19 f32)
		(local $fTemp20 f32)
		(local $tmp_in1 i32)
		(local $iTemp21 i32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(local $fTemp24 f32)
		(local $fTemp25 f32)
		(local $tmp_in2 i32)
		(local $iTemp26 i32)
		(local $fTemp27 f32)
		(local $fTemp28 f32)
		(local $tmp_in3 i32)
		(local $iTemp29 i32)
		(local $iRec12 i32)
		(local $fRec7 f32)
		(local $fRec8 f32)
		(local $fRec9 f32)
		(local $fRec3 f32)
		(local $fRec4 f32)
		(local $fRec5 f32)
		(local $fRec1 f32)
		(local $fTemp30 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $iSlow14 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fRec10 (f32.const 0.))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $iRec16 (i32.const 0))
		(set_local $iTemp3 (i32.const 0))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $iTemp6 (i32.const 0))
		(set_local $iTemp7 (i32.const 0))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $fTemp16 (f32.const 0.))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $iTemp18 (i32.const 0))
		(set_local $fTemp19 (f32.const 0.))
		(set_local $fTemp20 (f32.const 0.))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $iTemp21 (i32.const 0))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $fTemp24 (f32.const 0.))
		(set_local $fTemp25 (f32.const 0.))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $iTemp26 (i32.const 0))
		(set_local $fTemp27 (f32.const 0.))
		(set_local $fTemp28 (f32.const 0.))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $iTemp29 (i32.const 0))
		(set_local $iRec12 (i32.const 0))
		(set_local $fRec7 (f32.const 0.))
		(set_local $fRec8 (f32.const 0.))
		(set_local $fRec9 (f32.const 0.))
		(set_local $fRec3 (f32.const 0.))
		(set_local $fRec4 (f32.const 0.))
		(set_local $fRec5 (f32.const 0.))
		(set_local $fRec1 (f32.const 0.))
		(set_local $fTemp30 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 0))))
		(set_local $fSlow1 (f32.load (i32.add (get_local $dsp) (i32.const 12))))
		(set_local $fSlow2 (f32.sub (f32.const 1.) (get_local $fSlow1)))
		(set_local $fSlow3 (f32.mul (f32.const 0.00999999978) (f32.load (i32.add (get_local $dsp) (i32.const 32)))))
		(set_local $fSlow4 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 44))) (f32.load (i32.add (get_local $dsp) (i32.const 48)))))
		(set_local $fSlow5 (call $sinf (get_local $fSlow4)))
		(set_local $fSlow6 (call $cosf (get_local $fSlow4)))
		(set_local $fSlow7 (f32.sub (f32.const 0.) (get_local $fSlow5)))
		(set_local $fSlow8 (f32.min (f32.const 1.) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 68))) (f32.load (i32.add (get_local $dsp) (i32.const 72))))))
		(set_local $fSlow9 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 88))) (f32.load (i32.add (get_local $dsp) (i32.const 92)))))))
		(set_local $fSlow10 (f32.mul (f32.mul (get_local $fSlow8) (f32.load (i32.add (get_local $dsp) (i32.const 84)))) (f32.sub (f32.const 1.) (get_local $fSlow9))))
		(set_local $fSlow11 (f32.add (f32.mul (f32.const 0.25999999) (f32.load (i32.add (get_local $dsp) (i32.const 160)))) (f32.const -0.439999998)))
		(set_local $fSlow12 (f32.div (f32.const 170.) (f32.load (i32.add (get_local $dsp) (i32.const 8368)))))
		(set_local $fSlow13 (f32.load (i32.add (get_local $dsp) (i32.const 8372))))
		(set_local $iSlow14 (f32.eq (get_local $fSlow8) (f32.const 0.)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.const 0))
				(i32.store (i32.add (get_local $dsp) (i32.const 16)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.add (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 28)))) (f32.mul (get_local $fSlow2) (f32.load (i32.add (get_local $dsp) (i32.const 8396))))))
				(set_local $fRec10 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 8))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.add (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 64)))) (f32.mul (get_local $fSlow6) (f32.load (i32.add (get_local $dsp) (i32.const 56))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.add (f32.add (f32.mul (get_local $fSlow6) (f32.load (i32.add (get_local $dsp) (i32.const 64)))) (f32.mul (get_local $fSlow7) (f32.load (i32.add (get_local $dsp) (i32.const 56))))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 20)))))))
				(set_local $fTemp0 (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (get_local $fSlow8))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.add (get_local $fSlow10) (f32.mul (get_local $fSlow9) (f32.load (i32.add (get_local $dsp) (i32.const 100))))))
				(i32.store (i32.add (get_local $dsp) (i32.const 120)) (i32.add (i32.mul (i32.const 1103515245) (i32.load (i32.add (get_local $dsp) (i32.const 124)))) (i32.const 12345)))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.sub (f32.mul (f32.const 4.65661287e-10) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 120))))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 128))) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 132))) (f32.load (i32.add (get_local $dsp) (i32.const 144)))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 136))) (f32.load (i32.add (get_local $dsp) (i32.const 148))))))))
				(set_local $fTemp1 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 116))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 148))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 140))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 144))))))) (f32.const 1.))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16596))) (get_local $fTemp0)) (get_local $fTemp1)))
				(set_local $fTemp2 (f32.sub (f32.const 0.) (f32.load (i32.add (get_local $dsp) (i32.const 156)))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 164))) (i32.const 2047)) (i32.const 2)))) (f32.add (f32.add (get_local $fTemp0) (get_local $fTemp1)) (f32.mul (get_local $fTemp2) (f32.max (f32.const -1.) (f32.min (f32.const 1.) (f32.add (f32.mul (get_local $fSlow11) (get_local $fTemp2)) (f32.const 0.699999988)))))))
				(set_local $iRec16 (i32.const 0))
				(set_local $iTemp3 (i32.or (f32.eq (get_local $fSlow8) (f32.load (i32.add (get_local $dsp) (i32.const 80)))) (get_local $iSlow14)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8376)) (f32.add (f32.mul (get_local $fSlow13) (f32.sub (f32.const 1.) (f32.mul (f32.const 0.999000013) (f32.convert_s/i32 (get_local $iTemp3))))) (f32.mul (f32.const 0.999000013) (f32.mul (f32.convert_s/i32 (get_local $iTemp3)) (f32.load (i32.add (get_local $dsp) (i32.const 8380)))))))
				(set_local $fTemp4 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8364))) (f32.add (f32.div (get_local $fSlow12) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8376))) (f32.add (f32.mul (get_local $fSlow3) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.load (i32.add (get_local $dsp) (i32.const 52))))) (f32.const 1.)))) (f32.const -0.0500000007))))
				(set_local $fTemp5 (f32.add (get_local $fTemp4) (f32.const -1.49999499)))
				(set_local $iTemp6 (i32.trunc_s/f32 (get_local $fTemp5)))
				(set_local $iTemp7 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8360))) (f32.convert_s/i32 (select (get_local $iTemp6) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp6)))))) (i32.const 1)))
				(set_local $fTemp8 (f32.floor (get_local $fTemp5)))
				(set_local $fTemp9 (f32.add (get_local $fTemp4) (f32.sub (f32.const -1.) (get_local $fTemp8))))
				(set_local $fTemp10 (f32.sub (f32.const 0.) (get_local $fTemp9)))
				(set_local $fTemp11 (f32.add (get_local $fTemp4) (f32.sub (f32.const -2.) (get_local $fTemp8))))
				(set_local $fTemp12 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp11))))
				(set_local $fTemp13 (f32.add (get_local $fTemp4) (f32.sub (f32.const -3.) (get_local $fTemp8))))
				(set_local $fTemp14 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp13))))
				(set_local $fTemp15 (f32.add (get_local $fTemp4) (f32.sub (f32.const -4.) (get_local $fTemp8))))
				(set_local $fTemp16 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.25) (get_local $fTemp15))))
				(set_local $fTemp17 (f32.sub (get_local $fTemp4) (get_local $fTemp8)))
				(set_local $tmp_in0 (i32.add (get_local $iTemp6) (i32.const 2)))
				(set_local $iTemp18 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8360))) (f32.convert_s/i32 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0)))))) (i32.const 1)))
				(set_local $fTemp19 (f32.sub (f32.const 0.) (get_local $fTemp13)))
				(set_local $fTemp20 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp15))))
				(set_local $tmp_in1 (i32.add (get_local $iTemp6) (i32.const 1)))
				(set_local $iTemp21 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8360))) (f32.convert_s/i32 (select (get_local $tmp_in1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in1)))))) (i32.const 1)))
				(set_local $fTemp22 (f32.sub (f32.const 0.) (get_local $fTemp11)))
				(set_local $fTemp23 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.5) (get_local $fTemp13))))
				(set_local $fTemp24 (f32.sub (f32.const 0.) (f32.mul (f32.const 0.333333343) (get_local $fTemp15))))
				(set_local $fTemp25 (f32.mul (get_local $fTemp9) (get_local $fTemp11)))
				(set_local $tmp_in2 (i32.add (get_local $iTemp6) (i32.const 3)))
				(set_local $iTemp26 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8360))) (f32.convert_s/i32 (select (get_local $tmp_in2) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in2)))))) (i32.const 1)))
				(set_local $fTemp27 (f32.sub (f32.const 0.) (get_local $fTemp15)))
				(set_local $fTemp28 (f32.mul (get_local $fTemp25) (get_local $fTemp13)))
				(set_local $tmp_in3 (i32.add (get_local $iTemp6) (i32.const 4)))
				(set_local $iTemp29 (i32.add (i32.trunc_s/f32 (f32.min (f32.load (i32.add (get_local $dsp) (i32.const 8360))) (f32.convert_s/i32 (select (get_local $tmp_in3) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in3)))))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8384)) (f32.add (f32.mul (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp7)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp10)) (get_local $fTemp12)) (get_local $fTemp14)) (get_local $fTemp16)) (f32.mul (get_local $fTemp17) (f32.add (f32.add (f32.add (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp9) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp18)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp19)) (get_local $fTemp20))) (f32.mul (f32.mul (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp21)) (i32.const 2047)) (i32.const 2))))) (get_local $fTemp22)) (get_local $fTemp23)) (get_local $fTemp24))) (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp25) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp26)) (i32.const 2047)) (i32.const 2)))))) (get_local $fTemp27)))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp28) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp29)) (i32.const 2047)) (i32.const 2)))))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8392)) (f32.load (i32.add (get_local $dsp) (i32.const 8388))))
				(set_local $iRec12 (get_local $iRec16))
				(set_local $fRec7 (get_local $fRec10))
				(set_local $fRec8 (f32.load (i32.add (get_local $dsp) (i32.const 8392))))
				(set_local $fRec9 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 8392))) (f32.convert_s/i32 (get_local $iRec12))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 164))) (i32.const 2047)) (i32.const 2)))) (get_local $fRec7))
				(set_local $fRec3 (f32.add (f32.mul (f32.mul (f32.mul (f32.mul (get_local $fTemp10) (get_local $fTemp12)) (get_local $fTemp14)) (get_local $fTemp16)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp7)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (get_local $fTemp17) (f32.add (f32.add (f32.mul (f32.const 0.166666672) (f32.mul (f32.mul (get_local $fTemp25) (get_local $fTemp27)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp26)) (i32.const 2047)) (i32.const 2))))))) (f32.add (f32.mul (f32.mul (f32.mul (get_local $fTemp22) (get_local $fTemp23)) (get_local $fTemp24)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp21)) (i32.const 2047)) (i32.const 2)))))) (f32.mul (f32.const 0.5) (f32.mul (f32.mul (f32.mul (get_local $fTemp9) (get_local $fTemp19)) (get_local $fTemp20)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp18)) (i32.const 2047)) (i32.const 2))))))))) (f32.mul (f32.const 0.0416666679) (f32.mul (get_local $fTemp28) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8400) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 164))) (get_local $iTemp29)) (i32.const 2047)) (i32.const 2)))))))))))
				(set_local $fRec4 (get_local $fRec8))
				(set_local $fRec5 (get_local $fRec9))
				(f32.store (i32.add (get_local $dsp) (i32.const 16592)) (get_local $fRec3))
				(set_local $fRec1 (get_local $fRec5))
				(set_local $fTemp30 (f32.mul (get_local $fSlow0) (get_local $fRec1)))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp30))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp30))
				(i32.store (i32.add (get_local $dsp) (i32.const 8)) (i32.load (i32.add (get_local $dsp) (i32.const 4))))
				(i32.store (i32.add (get_local $dsp) (i32.const 20)) (i32.load (i32.add (get_local $dsp) (i32.const 16))))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.load (i32.add (get_local $dsp) (i32.const 24))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.load (i32.add (get_local $dsp) (i32.const 76))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(i32.store (i32.add (get_local $dsp) (i32.const 124)) (i32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.load (i32.add (get_local $dsp) (i32.const 140))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(i32.store (i32.add (get_local $dsp) (i32.const 164)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 164))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 8380)) (f32.load (i32.add (get_local $dsp) (i32.const 8376))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8388)) (f32.load (i32.add (get_local $dsp) (i32.const 8384))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8396)) (f32.load (i32.add (get_local $dsp) (i32.const 8392))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16596)) (f32.load (i32.add (get_local $dsp) (i32.const 16592))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
