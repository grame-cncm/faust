
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"flanger\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"32860\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Flanger effect application.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"flanger\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"phaflangers.lib/name\":\"Faust Phaser and Flanger Library\"},{\"phaflangers.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"FLANGER\",\"meta\":[{\"tooltip\":\"Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/FLANGER/0x00/Bypass\",\"index\":\"0\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the flanger   has no effect\"}]},{\"type\":\"checkbox\",\"label\":\"Invert Flange Sum\",\"address\":\"/FLANGER/0x00/Invert_Flange_Sum\",\"index\":\"52\",\"meta\":[{\"1\":\"\"}]},{\"type\":\"hbargraph\",\"label\":\"Flange LFO\",\"address\":\"/FLANGER/0x00/Flange_LFO\",\"index\":\"48\",\"meta\":[{\"2\":\"\"},{\"style\":\"led\"},{\"tooltip\":\"Display sum of flange delays\"}],\"min\":\"-1.5\",\"max\":\"1.5\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Speed\",\"address\":\"/FLANGER/0x00/Speed\",\"index\":\"20\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Depth\",\"address\":\"/FLANGER/0x00/Depth\",\"index\":\"56\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Feedback\",\"address\":\"/FLANGER/0x00/Feedback\",\"index\":\"60\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-0.999\",\"max\":\"0.999\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"Delay Controls\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Flange Delay\",\"address\":\"/FLANGER/Delay_Controls/Flange_Delay\",\"index\":\"16456\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"10\",\"min\":\"0\",\"max\":\"20\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Delay Offset\",\"address\":\"/FLANGER/Delay_Controls/Delay_Offset\",\"index\":\"16452\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"20\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Flanger Output Level\",\"address\":\"/FLANGER/0x00/Flanger_Output_Level\",\"index\":\"4\",\"meta\":[{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-60\",\"max\":\"10\",\"step\":\"0.1\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 8)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 8)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 12)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16452)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16456)) (f32.const 10.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 24) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 32) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(i32.store (i32.add (get_local $dsp) (i32.const 64)) (i32.const 0))
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 4096)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16460) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16468) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 4096)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 32852) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 8))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $iSlow0 i32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $iTemp4 i32)
		(local $fTemp5 f32)
		(local $tmp_in0 i32)
		(local $tmp_in2 i32)
		(local $tmp_in3 i32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $iTemp10 i32)
		(local $fTemp11 f32)
		(local $tmp_in1 i32)
		(local $tmp_in4 i32)
		(local $tmp_in5 i32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $iSlow0 (i32.const 0))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $iTemp4 (i32.const 0))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $iTemp10 (i32.const 0))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $tmp_in4 (i32.const 0))
		(set_local $tmp_in5 (i32.const 0))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $iSlow0 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 0)))))
		(set_local $fSlow1 (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 4))))))
		(set_local $fSlow2 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 16))) (f32.load (i32.add (get_local $dsp) (i32.const 20)))))
		(set_local $fSlow3 (call $sinf (get_local $fSlow2)))
		(set_local $fSlow4 (call $cosf (get_local $fSlow2)))
		(set_local $fSlow5 (f32.sub (f32.const 0.) (get_local $fSlow3)))
		(set_local $fSlow6 (f32.load (i32.add (get_local $dsp) (i32.const 56))))
		(set_local $fSlow7 (select (f32.sub (f32.const 0.) (get_local $fSlow6)) (get_local $fSlow6) (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 52))))))
		(set_local $fSlow8 (f32.load (i32.add (get_local $dsp) (i32.const 60))))
		(set_local $fSlow9 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 16452)))))
		(set_local $fSlow10 (f32.mul (f32.const 0.000500000024) (f32.load (i32.add (get_local $dsp) (i32.const 16456)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 24)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.add (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 44)))) (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.add (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 44)))) (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 36))))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 28)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 40))) (f32.load (i32.add (get_local $dsp) (i32.const 32)))))
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(set_local $fTemp1 (f32.mul (get_local $fSlow1) (select (f32.const 0.) (get_local $fTemp0) (get_local $iSlow0))))
				(set_local $fTemp2 (f32.sub (f32.mul (get_local $fSlow8) (f32.load (i32.add (get_local $dsp) (i32.const 16464)))) (get_local $fTemp1)))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 64))) (i32.const 4095)) (i32.const 2)))) (get_local $fTemp2))
				(set_local $fTemp3 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.add (get_local $fSlow9) (f32.mul (get_local $fSlow10) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.const 1.))))))
				(set_local $iTemp4 (i32.trunc_s/f32 (get_local $fTemp3)))
				(set_local $fTemp5 (f32.floor (get_local $fTemp3)))
				(set_local $tmp_in0 (i32.add (get_local $iTemp4) (i32.const 1)))
				(set_local $tmp_in2 (select (get_local $iTemp4) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp4))))
				(set_local $tmp_in3 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16460)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (select (i32.const 2049) (get_local $tmp_in2) (i32.lt_s (i32.const 2049) (get_local $tmp_in2)))) (i32.const 4095)) (i32.const 2))))) (f32.add (get_local $fTemp5) (f32.sub (f32.const 1.) (get_local $fTemp3)))) (f32.mul (f32.sub (get_local $fTemp3) (get_local $fTemp5)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (select (i32.const 2049) (get_local $tmp_in3) (i32.lt_s (i32.const 2049) (get_local $tmp_in3)))) (i32.const 4095)) (i32.const 2))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (select (get_local $fTemp0) (f32.mul (f32.const 0.5) (f32.add (get_local $fTemp1) (f32.mul (get_local $fSlow7) (f32.load (i32.add (get_local $dsp) (i32.const 16460)))))) (get_local $iSlow0)))
				(set_local $fTemp6 (f32.load (i32.add (get_local $input1) (get_local $i))))
				(set_local $fTemp7 (f32.mul (get_local $fSlow1) (select (f32.const 0.) (get_local $fTemp6) (get_local $iSlow0))))
				(set_local $fTemp8 (f32.sub (f32.mul (get_local $fSlow8) (f32.load (i32.add (get_local $dsp) (i32.const 32856)))) (get_local $fTemp7)))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16468) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 64))) (i32.const 4095)) (i32.const 2)))) (get_local $fTemp8))
				(set_local $fTemp9 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.add (get_local $fSlow9) (f32.mul (get_local $fSlow10) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 40))) (f32.const 1.))))))
				(set_local $iTemp10 (i32.trunc_s/f32 (get_local $fTemp9)))
				(set_local $fTemp11 (f32.floor (get_local $fTemp9)))
				(set_local $tmp_in1 (i32.add (get_local $iTemp10) (i32.const 1)))
				(set_local $tmp_in4 (select (get_local $iTemp10) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp10))))
				(set_local $tmp_in5 (select (get_local $tmp_in1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in1))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32852)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16468) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (select (i32.const 2049) (get_local $tmp_in4) (i32.lt_s (i32.const 2049) (get_local $tmp_in4)))) (i32.const 4095)) (i32.const 2))))) (f32.add (get_local $fTemp11) (f32.sub (f32.const 1.) (get_local $fTemp9)))) (f32.mul (f32.sub (get_local $fTemp9) (get_local $fTemp11)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 16468) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 64))) (select (i32.const 2049) (get_local $tmp_in5) (i32.lt_s (i32.const 2049) (get_local $tmp_in5)))) (i32.const 4095)) (i32.const 2))))))))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (select (get_local $fTemp6) (f32.mul (f32.const 0.5) (f32.add (get_local $fTemp7) (f32.mul (get_local $fSlow7) (f32.load (i32.add (get_local $dsp) (i32.const 32852)))))) (get_local $iSlow0)))
				(i32.store (i32.add (get_local $dsp) (i32.const 28)) (i32.load (i32.add (get_local $dsp) (i32.const 24))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.load (i32.add (get_local $dsp) (i32.const 32))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(i32.store (i32.add (get_local $dsp) (i32.const 64)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 64))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 16464)) (f32.load (i32.add (get_local $dsp) (i32.const 16460))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32856)) (f32.load (i32.add (get_local $dsp) (i32.const 32852))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
