
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $expf "env" "_expf" (param f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"phaser\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"196\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Phaser demo application.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"phaser\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"phaflangers.lib/name\":\"Faust Phaser and Flanger Library\"},{\"phaflangers.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"PHASER2\",\"meta\":[{\"tooltip\":\"Reference:   https://ccrma.stanford.edu/~jos/pasp/Flanging.html\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/PHASER2/0x00/Bypass\",\"index\":\"0\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the phaser   has no effect\"}]},{\"type\":\"checkbox\",\"label\":\"Invert Internal Phaser Sum\",\"address\":\"/PHASER2/0x00/Invert_Internal_Phaser_Sum\",\"index\":\"136\",\"meta\":[{\"1\":\"\"}]},{\"type\":\"checkbox\",\"label\":\"Vibrato Mode\",\"address\":\"/PHASER2/0x00/Vibrato_Mode\",\"index\":\"16\",\"meta\":[{\"2\":\"\"}]}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Speed\",\"address\":\"/PHASER2/0x00/Speed\",\"index\":\"60\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Notch Depth (Intensity)\",\"address\":\"/PHASER2/0x00/Notch_Depth_(Intensity)\",\"index\":\"20\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Feedback Gain\",\"address\":\"/PHASER2/0x00/Feedback_Gain\",\"index\":\"40\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-0.999\",\"max\":\"0.999\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Notch width\",\"address\":\"/PHASER2/0x00/Notch_width\",\"index\":\"36\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"1000\",\"min\":\"10\",\"max\":\"5000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Min Notch1 Freq\",\"address\":\"/PHASER2/0x00/Min_Notch1_Freq\",\"index\":\"52\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"100\",\"min\":\"20\",\"max\":\"5000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Max Notch1 Freq\",\"address\":\"/PHASER2/0x00/Max_Notch1_Freq\",\"index\":\"56\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"800\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n)\",\"address\":\"/PHASER2/0x00/Notch_Freq_Ratio:_NotchFreq(n+1)/NotchFreq(n)\",\"index\":\"44\",\"meta\":[{\"4\":\"\"},{\"style\":\"knob\"}],\"init\":\"1.5\",\"min\":\"1.1\",\"max\":\"4\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Phaser Output Level\",\"address\":\"/PHASER2/0x00/Phaser_Output_Level\",\"index\":\"4\",\"meta\":[{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-60\",\"max\":\"10\",\"step\":\"0.1\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 24)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 24)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const 1.))
		(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.const 1000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.const 1.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.const 100.))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 800.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 3)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 92) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 3)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 3)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 3)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 128) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 140) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 3)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 3)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 164) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 3)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 176) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 3)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 188) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 24))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $iSlow0 i32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $fSlow16 f32)
		(local $fSlow17 f32)
		(local $fSlow18 f32)
		(local $fSlow19 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $iSlow0 (i32.const 0))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $fSlow16 (f32.const 0.))
		(set_local $fSlow17 (f32.const 0.))
		(set_local $fSlow18 (f32.const 0.))
		(set_local $fSlow19 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $iSlow0 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 0)))))
		(set_local $fSlow1 (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 4))))))
		(set_local $fSlow2 (f32.mul (f32.const 0.5) (select (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 20))) (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 16)))))))
		(set_local $fSlow3 (f32.sub (f32.const 1.) (get_local $fSlow2)))
		(set_local $fSlow4 (call $expf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.sub (f32.const 0.) (f32.mul (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))))
		(set_local $fSlow5 (call $powf (get_local $fSlow4) (f32.const 2.)))
		(set_local $fSlow6 (f32.load (i32.add (get_local $dsp) (i32.const 40))))
		(set_local $fSlow7 (f32.sub (f32.const 0.) (f32.mul (f32.const 2.) (get_local $fSlow4))))
		(set_local $fSlow8 (f32.load (i32.add (get_local $dsp) (i32.const 44))))
		(set_local $fSlow9 (f32.load (i32.add (get_local $dsp) (i32.const 52))))
		(set_local $fSlow10 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 48))) (get_local $fSlow9)))
		(set_local $fSlow11 (f32.mul (f32.const 0.5) (f32.sub (f32.const 0.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 48))) (f32.sub (get_local $fSlow9) (f32.max (get_local $fSlow9) (f32.load (i32.add (get_local $dsp) (i32.const 56)))))))))
		(set_local $fSlow12 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 48))) (f32.load (i32.add (get_local $dsp) (i32.const 60)))))
		(set_local $fSlow13 (call $sinf (get_local $fSlow12)))
		(set_local $fSlow14 (call $cosf (get_local $fSlow12)))
		(set_local $fSlow15 (f32.sub (f32.const 0.) (get_local $fSlow13)))
		(set_local $fSlow16 (call $powf (get_local $fSlow8) (f32.const 2.)))
		(set_local $fSlow17 (call $powf (get_local $fSlow8) (f32.const 3.)))
		(set_local $fSlow18 (call $powf (get_local $fSlow8) (f32.const 4.)))
		(set_local $fSlow19 (select (f32.sub (f32.const 0.) (get_local $fSlow2)) (get_local $fSlow2) (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 136))))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(set_local $fTemp1 (select (f32.const 0.) (get_local $fTemp0) (get_local $iSlow0)))
				(i32.store (i32.add (get_local $dsp) (i32.const 8)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (f32.mul (get_local $fSlow13) (f32.load (i32.add (get_local $dsp) (i32.const 76)))) (f32.mul (get_local $fSlow14) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.add (f32.add (f32.mul (get_local $fSlow14) (f32.load (i32.add (get_local $dsp) (i32.const 76)))) (f32.mul (get_local $fSlow15) (f32.load (i32.add (get_local $dsp) (i32.const 68))))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 12)))))))
				(set_local $fTemp2 (f32.add (get_local $fSlow10) (f32.mul (get_local $fSlow11) (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 64)))))))
				(set_local $fTemp3 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 84))) (call $cosf (f32.mul (get_local $fSlow8) (get_local $fTemp2)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.sub (f32.add (f32.mul (get_local $fSlow1) (get_local $fTemp1)) (f32.mul (get_local $fSlow6) (f32.load (i32.add (get_local $dsp) (i32.const 132))))) (f32.add (f32.mul (get_local $fSlow7) (get_local $fTemp3)) (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 88)))))))
				(set_local $fTemp4 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (call $cosf (f32.mul (get_local $fSlow16) (get_local $fTemp2)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 88))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp3) (get_local $fTemp4)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 80))) (f32.load (i32.add (get_local $dsp) (i32.const 100)))))))
				(set_local $fTemp5 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (call $cosf (f32.mul (get_local $fSlow17) (get_local $fTemp2)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 100))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp4) (get_local $fTemp5)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 92))) (f32.load (i32.add (get_local $dsp) (i32.const 112)))))))
				(set_local $fTemp6 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 120))) (call $cosf (f32.mul (get_local $fSlow18) (get_local $fTemp2)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp5) (get_local $fTemp6)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 104))) (f32.load (i32.add (get_local $dsp) (i32.const 124)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.add (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 116)))) (f32.add (f32.mul (get_local $fSlow7) (get_local $fTemp6)) (f32.load (i32.add (get_local $dsp) (i32.const 124))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (select (get_local $fTemp0) (f32.add (f32.mul (get_local $fSlow1) (f32.mul (get_local $fTemp1) (get_local $fSlow3))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 128))) (get_local $fSlow19))) (get_local $iSlow0)))
				(set_local $fTemp7 (f32.load (i32.add (get_local $input1) (get_local $i))))
				(set_local $fTemp8 (select (f32.const 0.) (get_local $fTemp7) (get_local $iSlow0)))
				(set_local $fTemp9 (f32.add (get_local $fSlow10) (f32.mul (get_local $fSlow11) (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 72)))))))
				(set_local $fTemp10 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 144))) (call $cosf (f32.mul (get_local $fSlow8) (get_local $fTemp9)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.sub (f32.add (f32.mul (get_local $fSlow1) (get_local $fTemp8)) (f32.mul (get_local $fSlow6) (f32.load (i32.add (get_local $dsp) (i32.const 192))))) (f32.add (f32.mul (get_local $fSlow7) (get_local $fTemp10)) (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 148)))))))
				(set_local $fTemp11 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 156))) (call $cosf (f32.mul (get_local $fSlow16) (get_local $fTemp9)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 148))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp10) (get_local $fTemp11)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 140))) (f32.load (i32.add (get_local $dsp) (i32.const 160)))))))
				(set_local $fTemp12 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 168))) (call $cosf (f32.mul (get_local $fSlow17) (get_local $fTemp9)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 164)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 160))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp11) (get_local $fTemp12)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 152))) (f32.load (i32.add (get_local $dsp) (i32.const 172)))))))
				(set_local $fTemp13 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 180))) (call $cosf (f32.mul (get_local $fSlow18) (get_local $fTemp9)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 176)) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 172))) (f32.mul (get_local $fSlow7) (f32.sub (get_local $fTemp12) (get_local $fTemp13)))) (f32.mul (get_local $fSlow5) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 164))) (f32.load (i32.add (get_local $dsp) (i32.const 184)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 188)) (f32.add (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 176)))) (f32.add (f32.mul (get_local $fSlow7) (get_local $fTemp13)) (f32.load (i32.add (get_local $dsp) (i32.const 184))))))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (select (get_local $fTemp7) (f32.add (f32.mul (get_local $fSlow1) (f32.mul (get_local $fTemp8) (get_local $fSlow3))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 188))) (get_local $fSlow19))) (get_local $iSlow0)))
				(i32.store (i32.add (get_local $dsp) (i32.const 12)) (i32.load (i32.add (get_local $dsp) (i32.const 8))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.load (i32.add (get_local $dsp) (i32.const 84))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.load (i32.add (get_local $dsp) (i32.const 92))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.load (i32.add (get_local $dsp) (i32.const 108))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.load (i32.add (get_local $dsp) (i32.const 116))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.load (i32.add (get_local $dsp) (i32.const 140))))
				(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.load (i32.add (get_local $dsp) (i32.const 156))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(f32.store (i32.add (get_local $dsp) (i32.const 172)) (f32.load (i32.add (get_local $dsp) (i32.const 168))))
				(f32.store (i32.add (get_local $dsp) (i32.const 168)) (f32.load (i32.add (get_local $dsp) (i32.const 164))))
				(f32.store (i32.add (get_local $dsp) (i32.const 184)) (f32.load (i32.add (get_local $dsp) (i32.const 180))))
				(f32.store (i32.add (get_local $dsp) (i32.const 180)) (f32.load (i32.add (get_local $dsp) (i32.const 176))))
				(f32.store (i32.add (get_local $dsp) (i32.const 192)) (f32.load (i32.add (get_local $dsp) (i32.const 188))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
