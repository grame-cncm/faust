
(module
	(import $expf "env" "_expf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $log10f "env" "_log10f" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"noiseGate\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"120\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Gate demo application.\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"misceffects.lib/name\":\"Faust Math Library\"},{\"misceffects.lib/version\":\"2.0\"},{\"name\":\"noiseGate\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"GATE\",\"meta\":[{\"tooltip\":\"Reference:   http://en.wikipedia.org/wiki/Noise_gate\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/GATE/0x00/Bypass\",\"index\":\"0\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked,   the gate has no effect\"}]},{\"type\":\"hbargraph\",\"label\":\"Gate Gain\",\"address\":\"/GATE/0x00/Gate_Gain\",\"index\":\"76\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Current gain of the  gate in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Threshold\",\"address\":\"/GATE/0x00/Threshold\",\"index\":\"36\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"When   the signal level falls below the Threshold (expressed in dB), the signal is   muted\"},{\"unit\":\"dB\"}],\"init\":\"-30\",\"min\":\"-120\",\"max\":\"0\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Attack\",\"address\":\"/GATE/0x00/Attack\",\"index\":\"20\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in MICROseconds (1/e smoothing time) for the gate  gain to go (exponentially) from 0 (muted) to 1 (unmuted)\"},{\"unit\":\"us\"}],\"init\":\"10\",\"min\":\"10\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Hold\",\"address\":\"/GATE/0x00/Hold\",\"index\":\"48\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time in ms to keep the gate open (no muting) after the signal  level falls below the Threshold\"},{\"unit\":\"ms\"}],\"init\":\"200\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Release\",\"address\":\"/GATE/0x00/Release\",\"index\":\"24\",\"meta\":[{\"4\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in ms (1/e smoothing time) for the gain to go  (exponentially) from 1 (unmuted) to 0 (muted)\"},{\"unit\":\"ms\"}],\"init\":\"100\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"1\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 4)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 4)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const 10.))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.const 100.))
		(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.const -30.))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.const 200.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l1) (i32.const 2)))) (i32.const 0))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l2) (i32.const 2)))) (i32.const 0))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 60) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 68) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 88) (i32.shl (get_local $l6) (i32.const 2)))) (i32.const 0))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l7) (i32.const 2)))) (i32.const 0))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 112) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 2)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 4))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $iSlow0 i32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $iSlow6 i32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fRec2 f32)
		(local $iTemp5 i32)
		(local $tmp_in0 i32)
		(local $tmp_in1 i32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fRec7 f32)
		(local $iTemp8 i32)
		(local $tmp_in2 i32)
		(local $tmp_in3 i32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $iSlow0 (i32.const 0))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $iSlow6 (i32.const 0))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fRec2 (f32.const 0.))
		(set_local $iTemp5 (i32.const 0))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fRec7 (f32.const 0.))
		(set_local $iTemp8 (i32.const 0))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $iSlow0 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 0)))))
		(set_local $fSlow1 (f32.max (f32.load (i32.add (get_local $dsp) (i32.const 16))) (f32.mul (f32.const 9.99999997e-07) (f32.load (i32.add (get_local $dsp) (i32.const 20))))))
		(set_local $fSlow2 (f32.max (f32.load (i32.add (get_local $dsp) (i32.const 16))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 24))))))
		(set_local $fSlow3 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.min (get_local $fSlow1) (get_local $fSlow2))))))
		(set_local $fSlow4 (f32.sub (f32.const 1.) (get_local $fSlow3)))
		(set_local $fSlow5 (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))
		(set_local $iSlow6 (i32.trunc_s/f32 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.max (f32.load (i32.add (get_local $dsp) (i32.const 16))) (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 48))))))))
		(set_local $fSlow7 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $fSlow1)))))
		(set_local $fSlow8 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 12))) (get_local $fSlow2)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(set_local $fTemp1 (select (f32.const 0.) (get_local $fTemp0) (get_local $iSlow0)))
				(set_local $fTemp2 (f32.load (i32.add (get_local $input1) (get_local $i))))
				(set_local $fTemp3 (select (f32.const 0.) (get_local $fTemp2) (get_local $iSlow0)))
				(set_local $fTemp4 (f32.abs (get_local $fTemp3)))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.add (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 32)))) (f32.mul (get_local $fSlow4) (f32.abs (f32.add (f32.abs (get_local $fTemp1)) (get_local $fTemp4))))))
				(set_local $fRec2 (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(set_local $iTemp5 (f32.gt (get_local $fRec2) (get_local $fSlow5)))
				(i32.store (i32.add (get_local $dsp) (i32.const 40)) (get_local $iTemp5))
				(set_local $tmp_in0 (i32.mul (get_local $iSlow6) (i32.lt_s (get_local $iTemp5) (i32.load (i32.add (get_local $dsp) (i32.const 44))))))
				(set_local $tmp_in1 (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 56))) (i32.const -1)))
				(i32.store (i32.add (get_local $dsp) (i32.const 52)) (select (get_local $tmp_in1) (get_local $tmp_in0) (i32.lt_s (get_local $tmp_in0) (get_local $tmp_in1))))
				(set_local $fTemp6 (f32.abs (f32.max (f32.convert_s/i32 (get_local $iTemp5)) (f32.convert_s/i32 (i32.gt_s (i32.load (i32.add (get_local $dsp) (i32.const 52))) (i32.const 0))))))
				(set_local $fTemp7 (select (get_local $fSlow8) (get_local $fSlow7) (f32.gt (f32.load (i32.add (get_local $dsp) (i32.const 72))) (get_local $fTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 64))) (get_local $fTemp7)) (f32.mul (get_local $fTemp6) (f32.sub (f32.const 1.) (get_local $fTemp7)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.mul (f32.const 20.) (call $log10f (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.add (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 84)))) (f32.mul (get_local $fSlow4) (f32.abs (f32.add (get_local $fTemp4) (f32.abs (get_local $fTemp1)))))))
				(set_local $fRec7 (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(set_local $iTemp8 (f32.gt (get_local $fRec7) (get_local $fSlow5)))
				(i32.store (i32.add (get_local $dsp) (i32.const 88)) (get_local $iTemp8))
				(set_local $tmp_in2 (i32.mul (get_local $iSlow6) (i32.lt_s (get_local $iTemp8) (i32.load (i32.add (get_local $dsp) (i32.const 92))))))
				(set_local $tmp_in3 (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 100))) (i32.const -1)))
				(i32.store (i32.add (get_local $dsp) (i32.const 96)) (select (get_local $tmp_in3) (get_local $tmp_in2) (i32.lt_s (get_local $tmp_in2) (get_local $tmp_in3))))
				(set_local $fTemp9 (f32.abs (f32.max (f32.convert_s/i32 (get_local $iTemp8)) (f32.convert_s/i32 (i32.gt_s (i32.load (i32.add (get_local $dsp) (i32.const 96))) (i32.const 0))))))
				(set_local $fTemp10 (select (get_local $fSlow8) (get_local $fSlow7) (f32.gt (f32.load (i32.add (get_local $dsp) (i32.const 116))) (get_local $fTemp9))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (get_local $fTemp10)) (f32.mul (get_local $fTemp9) (f32.sub (f32.const 1.) (get_local $fTemp10)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (select (get_local $fTemp0) (f32.mul (get_local $fTemp1) (f32.load (i32.add (get_local $dsp) (i32.const 112)))) (get_local $iSlow0)))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (select (get_local $fTemp2) (f32.mul (get_local $fTemp3) (f32.load (i32.add (get_local $dsp) (i32.const 112)))) (get_local $iSlow0)))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(i32.store (i32.add (get_local $dsp) (i32.const 44)) (i32.load (i32.add (get_local $dsp) (i32.const 40))))
				(i32.store (i32.add (get_local $dsp) (i32.const 56)) (i32.load (i32.add (get_local $dsp) (i32.const 52))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.load (i32.add (get_local $dsp) (i32.const 68))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(i32.store (i32.add (get_local $dsp) (i32.const 92)) (i32.load (i32.add (get_local $dsp) (i32.const 88))))
				(i32.store (i32.add (get_local $dsp) (i32.const 100)) (i32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.load (i32.add (get_local $dsp) (i32.const 112))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
