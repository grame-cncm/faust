
(module
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"parametricEqualizer\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"172\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Exercise and compare Parametric Equalizer sections on test signals\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"parametricEqualizer\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"PARAMETRIC EQ SECTIONS\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"See Faust's filters.lib   for info and pointers\"}],\"items\":[{\"type\":\"vgroup\",\"label\":\"Low Shelf\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Low Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Low_Boost|Cut\",\"index\":\"48\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of low-frequency boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Transition Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Transition_Frequency\",\"index\":\"16\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Transition-frequency from boost (cut) to unity gain\"},{\"unit\":\"Hz\"}],\"init\":\"200\",\"min\":\"1\",\"max\":\"5000\",\"step\":\"1\"}]},{\"type\":\"vgroup\",\"label\":\"Peaking Equalizer\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Parametric Equalizer   sections from filters.lib\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Peak Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Boost|Cut\",\"index\":\"88\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of   local boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Peak Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Frequency\",\"index\":\"76\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Peak   Frequency in Piano Key (PK) units (A440 = 49PK)\"},{\"unit\":\"PK\"}],\"init\":\"49\",\"min\":\"1\",\"max\":\"100\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Peak Q\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Q\",\"index\":\"100\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Quality factor   (Q) of the peak = center-frequency/bandwidth\"}],\"init\":\"40\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"0.1\"}]},{\"type\":\"vgroup\",\"label\":\"High Shelf\",\"meta\":[{\"3\":\"\"},{\"tooltip\":\"A high shelf provides a boost   or cut above some frequency\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"High Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/High_Shelf/High_Boost|Cut\",\"index\":\"148\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of   high-frequency boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Transition Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/High_Shelf/Transition_Frequency\",\"index\":\"12\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Transition-frequency from boost (cut) to unity gain\"},{\"unit\":\"Hz\"}],\"init\":\"8000\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.div (f32.const 1382.30078) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.mul (f32.const 1382.30078) (f32.load (i32.add (get_local $dsp) (i32.const 92)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.mul (f32.const 2764.60156) (f32.load (i32.add (get_local $dsp) (i32.const 92)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 8000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 200.))
		(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.const 49.))
		(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.const 40.))
		(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 20) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 36) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 3)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 60) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 3)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 108) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 3)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 120) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 128) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 136) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 3)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 160) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 3)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $fSlow16 f32)
		(local $fSlow17 f32)
		(local $fSlow18 f32)
		(local $fSlow19 f32)
		(local $iSlow20 i32)
		(local $fSlow21 f32)
		(local $fSlow22 f32)
		(local $fSlow23 f32)
		(local $fSlow24 f32)
		(local $fSlow25 f32)
		(local $fSlow26 f32)
		(local $fSlow27 f32)
		(local $fSlow28 f32)
		(local $fSlow29 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $fSlow16 (f32.const 0.))
		(set_local $fSlow17 (f32.const 0.))
		(set_local $fSlow18 (f32.const 0.))
		(set_local $fSlow19 (f32.const 0.))
		(set_local $iSlow20 (i32.const 0))
		(set_local $fSlow21 (f32.const 0.))
		(set_local $fSlow22 (f32.const 0.))
		(set_local $fSlow23 (f32.const 0.))
		(set_local $fSlow24 (f32.const 0.))
		(set_local $fSlow25 (f32.const 0.))
		(set_local $fSlow26 (f32.const 0.))
		(set_local $fSlow27 (f32.const 0.))
		(set_local $fSlow28 (f32.const 0.))
		(set_local $fSlow29 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.load (i32.add (get_local $dsp) (i32.const 12))))))
		(set_local $fSlow1 (f32.div (f32.const 1.) (get_local $fSlow0)))
		(set_local $fSlow2 (f32.div (f32.const 1.) (f32.add (f32.div (f32.add (get_local $fSlow1) (f32.const 1.)) (get_local $fSlow0)) (f32.const 1.))))
		(set_local $fSlow3 (f32.add (get_local $fSlow1) (f32.const 1.)))
		(set_local $fSlow4 (f32.sub (f32.const 0.) (f32.div (f32.sub (f32.const 1.) (get_local $fSlow1)) (get_local $fSlow3))))
		(set_local $fSlow5 (f32.div (f32.const 1.) (get_local $fSlow3)))
		(set_local $fSlow6 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.load (i32.add (get_local $dsp) (i32.const 16))))))
		(set_local $fSlow7 (f32.div (f32.const 1.) (get_local $fSlow6)))
		(set_local $fSlow8 (f32.div (f32.const 1.) (f32.add (f32.div (f32.add (get_local $fSlow7) (f32.const 1.)) (get_local $fSlow6)) (f32.const 1.))))
		(set_local $fSlow9 (f32.div (f32.const 1.) (call $powf (get_local $fSlow6) (f32.const 2.))))
		(set_local $fSlow10 (f32.add (get_local $fSlow7) (f32.const 1.)))
		(set_local $fSlow11 (f32.sub (f32.const 0.) (f32.div (f32.sub (f32.const 1.) (get_local $fSlow7)) (get_local $fSlow10))))
		(set_local $fSlow12 (f32.div (f32.const 1.) (get_local $fSlow10)))
		(set_local $fSlow13 (f32.sub (f32.const 0.) (get_local $fSlow7)))
		(set_local $fSlow14 (f32.mul (f32.const 2.) (f32.sub (f32.const 1.) (get_local $fSlow9))))
		(set_local $fSlow15 (f32.add (f32.div (f32.add (get_local $fSlow7) (f32.const -1.)) (get_local $fSlow6)) (f32.const 1.)))
		(set_local $fSlow16 (f32.mul (f32.const 2.) (f32.sub (f32.const 0.) (get_local $fSlow9))))
		(set_local $fSlow17 (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 48))))))
		(set_local $fSlow18 (f32.mul (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 76)))))
		(set_local $fSlow19 (f32.load (i32.add (get_local $dsp) (i32.const 88))))
		(set_local $iSlow20 (f32.gt (get_local $fSlow19) (f32.const 0.)))
		(set_local $fSlow21 (f32.load (i32.add (get_local $dsp) (i32.const 100))))
		(set_local $fSlow22 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.div (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.abs (get_local $fSlow19)))) (get_local $fSlow21))))
		(set_local $fSlow23 (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 96))) (get_local $fSlow21)))
		(set_local $fSlow24 (f32.div (f32.const 1.) (call $powf (get_local $fSlow0) (f32.const 2.))))
		(set_local $fSlow25 (f32.mul (f32.const 2.) (f32.sub (f32.const 1.) (get_local $fSlow24))))
		(set_local $fSlow26 (f32.add (f32.div (f32.add (get_local $fSlow1) (f32.const -1.)) (get_local $fSlow0)) (f32.const 1.)))
		(set_local $fSlow27 (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 148))))))
		(set_local $fSlow28 (f32.sub (f32.const 0.) (get_local $fSlow1)))
		(set_local $fSlow29 (f32.mul (f32.const 2.) (f32.sub (f32.const 0.) (get_local $fSlow24))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (get_local $fTemp0))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.add (f32.mul (get_local $fSlow11) (f32.load (i32.add (get_local $dsp) (i32.const 32)))) (f32.mul (get_local $fSlow12) (f32.add (f32.mul (get_local $fSlow7) (get_local $fTemp0)) (f32.mul (get_local $fSlow13) (f32.load (i32.add (get_local $dsp) (i32.const 24))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.mul (get_local $fSlow8) (f32.add (f32.mul (get_local $fSlow14) (f32.load (i32.add (get_local $dsp) (i32.const 40)))) (f32.mul (get_local $fSlow15) (f32.load (i32.add (get_local $dsp) (i32.const 44))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.add (f32.mul (get_local $fSlow11) (f32.load (i32.add (get_local $dsp) (i32.const 56)))) (f32.mul (get_local $fSlow12) (f32.add (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.mul (get_local $fSlow8) (f32.add (f32.mul (get_local $fSlow14) (f32.load (i32.add (get_local $dsp) (i32.const 64)))) (f32.mul (get_local $fSlow15) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.add (get_local $fSlow18) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 84))))))
				(set_local $fTemp1 (call $powf (f32.const 2.) (f32.mul (f32.const 0.0833333358) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 80))) (f32.const -49.)))))
				(set_local $fTemp2 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 72))) (get_local $fTemp1))))
				(set_local $fTemp3 (f32.div (f32.const 1.) (get_local $fTemp2)))
				(set_local $fTemp4 (f32.div (get_local $fTemp1) (call $sinf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 104))) (get_local $fTemp1)))))
				(set_local $fTemp5 (f32.mul (get_local $fSlow22) (get_local $fTemp4)))
				(set_local $fTemp6 (f32.mul (get_local $fSlow23) (get_local $fTemp4)))
				(set_local $fTemp7 (select (get_local $fTemp6) (get_local $fTemp5) (get_local $iSlow20)))
				(set_local $fTemp8 (f32.mul (f32.const 2.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fTemp2) (f32.const 2.)))))))
				(set_local $fTemp9 (f32.add (f32.div (f32.add (get_local $fTemp3) (get_local $fTemp7)) (get_local $fTemp2)) (f32.const 1.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.sub (f32.mul (get_local $fSlow8) (f32.add (f32.add (f32.add (f32.mul (get_local $fSlow9) (f32.load (i32.add (get_local $dsp) (i32.const 36)))) (f32.mul (get_local $fSlow16) (f32.load (i32.add (get_local $dsp) (i32.const 40))))) (f32.mul (get_local $fSlow9) (f32.load (i32.add (get_local $dsp) (i32.const 44))))) (f32.mul (get_local $fSlow17) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 68))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 60))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 64))))))))) (f32.div (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 116))) (f32.add (f32.div (f32.sub (get_local $fTemp3) (get_local $fTemp7)) (get_local $fTemp2)) (f32.const 1.))) (get_local $fTemp8)) (get_local $fTemp9))))
				(set_local $fTemp10 (select (get_local $fTemp5) (get_local $fTemp6) (get_local $iSlow20)))
				(set_local $fTemp11 (f32.div (f32.add (f32.add (get_local $fTemp8) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.add (f32.div (f32.add (get_local $fTemp3) (get_local $fTemp10)) (get_local $fTemp2)) (f32.const 1.)))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 116))) (f32.add (f32.div (f32.sub (get_local $fTemp3) (get_local $fTemp10)) (get_local $fTemp2)) (f32.const 1.)))) (get_local $fTemp9)))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (get_local $fTemp11))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 132)))) (f32.mul (get_local $fSlow5) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 124))) (get_local $fTemp11)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 128))) (f32.mul (get_local $fSlow2) (f32.add (f32.mul (get_local $fSlow25) (f32.load (i32.add (get_local $dsp) (i32.const 140)))) (f32.mul (get_local $fSlow26) (f32.load (i32.add (get_local $dsp) (i32.const 144))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 156)))) (f32.mul (get_local $fSlow5) (f32.add (f32.mul (get_local $fSlow28) (f32.load (i32.add (get_local $dsp) (i32.const 124)))) (f32.mul (get_local $fSlow1) (get_local $fTemp11))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 152))) (f32.mul (get_local $fSlow2) (f32.add (f32.mul (get_local $fSlow25) (f32.load (i32.add (get_local $dsp) (i32.const 164)))) (f32.mul (get_local $fSlow26) (f32.load (i32.add (get_local $dsp) (i32.const 168))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (get_local $fSlow2) (f32.add (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 144))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 136))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 140)))))) (f32.mul (get_local $fSlow27) (f32.add (f32.add (f32.mul (get_local $fSlow24) (f32.load (i32.add (get_local $dsp) (i32.const 160)))) (f32.mul (get_local $fSlow29) (f32.load (i32.add (get_local $dsp) (i32.const 164))))) (f32.mul (get_local $fSlow24) (f32.load (i32.add (get_local $dsp) (i32.const 168)))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.load (i32.add (get_local $dsp) (i32.const 20))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.load (i32.add (get_local $dsp) (i32.const 36))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.load (i32.add (get_local $dsp) (i32.const 112))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.load (i32.add (get_local $dsp) (i32.const 108))))
				(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.load (i32.add (get_local $dsp) (i32.const 140))))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.load (i32.add (get_local $dsp) (i32.const 136))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(f32.store (i32.add (get_local $dsp) (i32.const 168)) (f32.load (i32.add (get_local $dsp) (i32.const 164))))
				(f32.store (i32.add (get_local $dsp) (i32.const 164)) (f32.load (i32.add (get_local $dsp) (i32.const 160))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
