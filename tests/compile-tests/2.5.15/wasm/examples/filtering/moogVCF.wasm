
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"moogVCF\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"160\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Exercise and compare three Moog VCF implementations\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"moogVCF\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"vaeffects.lib/name\":\"Faust Virtual Analog Filter Effect Library\"},{\"vaeffects.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"MOOG VCF (Voltage Controlled Filter)\",\"meta\":[{\"tooltip\":\"See Faust's   vaeffects.lib for info and references\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/0x00/Bypass\",\"index\":\"0\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the Moog VCF   has no effect\"}]},{\"type\":\"checkbox\",\"label\":\"Use Biquads\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/0x00/Use_Biquads\",\"index\":\"16\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Select moog_vcf_2b (two-biquad)   implementation, instead of the default moog_vcf (analog style) implementation\"}]},{\"type\":\"checkbox\",\"label\":\"Normalized Ladders\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/0x00/Normalized_Ladders\",\"index\":\"88\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"If using biquads, make   them normalized ladders (moog_vcf_2bn)\"}]}]},{\"type\":\"hslider\",\"label\":\"Corner Frequency\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/Corner_Frequency\",\"index\":\"36\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"The VCF resonates   at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).   The VCF response is flat below the corner frequency, and rolls off -24 dB per   octave above.\"},{\"unit\":\"PK\"}],\"init\":\"25\",\"min\":\"1\",\"max\":\"88\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Corner Resonance\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/Corner_Resonance\",\"index\":\"20\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of   resonance near VCF corner frequency (specified between 0 and 1)\"}],\"init\":\"0.9\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"VCF Output Level\",\"address\":\"/MOOG_VCF_(Voltage_Controlled_Filter)/VCF_Output_Level\",\"index\":\"4\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"output level in decibels\"},{\"unit\":\"dB\"}],\"init\":\"5\",\"min\":\"-60\",\"max\":\"20\",\"step\":\"0.1\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 24)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 24)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.const 5.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const 0.899999976))
		(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.const 25.))
		(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 48) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 56) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 80) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 3)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 116) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 3)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 128) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 136) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 144) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 152) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 24))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $iSlow0 i32)
		(local $fSlow1 f32)
		(local $iSlow2 i32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $iSlow6 i32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $fSlow16 f32)
		(local $fSlow17 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(local $fTemp10 f32)
		(local $fTemp11 f32)
		(local $fTemp12 f32)
		(local $fTemp13 f32)
		(local $fTemp14 f32)
		(local $fTemp15 f32)
		(local $fTemp16 f32)
		(local $fTemp17 f32)
		(local $fTemp18 f32)
		(local $fTemp19 f32)
		(local $fTemp20 f32)
		(local $fTemp21 f32)
		(local $fRec11 f32)
		(local $fTemp22 f32)
		(local $fTemp23 f32)
		(local $fTemp24 f32)
		(local $fTemp25 f32)
		(local $fTemp26 f32)
		(local $fTemp27 f32)
		(local $fTemp28 f32)
		(local $fTemp29 f32)
		(local $fTemp30 f32)
		(local $fTemp31 f32)
		(local $fTemp32 f32)
		(local $fTemp33 f32)
		(local $fTemp34 f32)
		(local $fRec14 f32)
		(local $fTemp35 f32)
		(local $fTemp36 f32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $iSlow0 (i32.const 0))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $iSlow2 (i32.const 0))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $iSlow6 (i32.const 0))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $fSlow16 (f32.const 0.))
		(set_local $fSlow17 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $fTemp10 (f32.const 0.))
		(set_local $fTemp11 (f32.const 0.))
		(set_local $fTemp12 (f32.const 0.))
		(set_local $fTemp13 (f32.const 0.))
		(set_local $fTemp14 (f32.const 0.))
		(set_local $fTemp15 (f32.const 0.))
		(set_local $fTemp16 (f32.const 0.))
		(set_local $fTemp17 (f32.const 0.))
		(set_local $fTemp18 (f32.const 0.))
		(set_local $fTemp19 (f32.const 0.))
		(set_local $fTemp20 (f32.const 0.))
		(set_local $fTemp21 (f32.const 0.))
		(set_local $fRec11 (f32.const 0.))
		(set_local $fTemp22 (f32.const 0.))
		(set_local $fTemp23 (f32.const 0.))
		(set_local $fTemp24 (f32.const 0.))
		(set_local $fTemp25 (f32.const 0.))
		(set_local $fTemp26 (f32.const 0.))
		(set_local $fTemp27 (f32.const 0.))
		(set_local $fTemp28 (f32.const 0.))
		(set_local $fTemp29 (f32.const 0.))
		(set_local $fTemp30 (f32.const 0.))
		(set_local $fTemp31 (f32.const 0.))
		(set_local $fTemp32 (f32.const 0.))
		(set_local $fTemp33 (f32.const 0.))
		(set_local $fTemp34 (f32.const 0.))
		(set_local $fRec14 (f32.const 0.))
		(set_local $fTemp35 (f32.const 0.))
		(set_local $fTemp36 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $iSlow0 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 0)))))
		(set_local $fSlow1 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))))
		(set_local $iSlow2 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 16)))))
		(set_local $fSlow3 (f32.load (i32.add (get_local $dsp) (i32.const 20))))
		(set_local $fSlow4 (f32.sub (f32.const 0.) (f32.mul (f32.const 4.) (f32.max (f32.const 0.) (f32.min (call $powf (get_local $fSlow3) (f32.const 4.)) (f32.const 0.999998987))))))
		(set_local $fSlow5 (f32.mul (f32.const 0.439999998) (call $powf (f32.const 2.) (f32.mul (f32.const 0.0833333358) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 36))) (f32.const -49.))))))
		(set_local $iSlow6 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 88)))))
		(set_local $fSlow7 (f32.min (f32.const 1.41419947) (f32.mul (f32.const 1.41421354) (get_local $fSlow3))))
		(set_local $fSlow8 (f32.mul (get_local $fSlow7) (f32.add (get_local $fSlow7) (f32.const 1.41421354))))
		(set_local $fSlow9 (f32.mul (f32.const 1.41421354) (get_local $fSlow7)))
		(set_local $fSlow10 (f32.add (get_local $fSlow9) (f32.const 2.)))
		(set_local $fSlow11 (f32.mul (get_local $fSlow7) (f32.add (get_local $fSlow7) (f32.const -1.41421354))))
		(set_local $fSlow12 (f32.sub (f32.const 2.) (get_local $fSlow9)))
		(set_local $fSlow13 (f32.mul (f32.const 1.99997997) (get_local $fSlow3)))
		(set_local $fSlow14 (call $powf (f32.mul (f32.const 1.41419947) (get_local $fSlow3)) (f32.const 2.)))
		(set_local $fSlow15 (f32.add (get_local $fSlow13) (get_local $fSlow14)))
		(set_local $fSlow16 (f32.add (get_local $fSlow13) (f32.const 2.)))
		(set_local $fSlow17 (f32.sub (f32.const 2.) (get_local $fSlow13)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.add (get_local $fSlow1) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 12))))))
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(set_local $fTemp1 (select (f32.const 0.) (get_local $fTemp0) (get_local $iSlow0)))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.add (get_local $fSlow5) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 44))))))
				(set_local $fTemp2 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
				(set_local $fTemp3 (f32.sub (f32.const 1.) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.add (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 84)))) (f32.add (get_local $fTemp1) (f32.mul (get_local $fTemp3) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 48))) (f32.mul (get_local $fTemp3) (f32.load (i32.add (get_local $dsp) (i32.const 60))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 56))) (f32.mul (get_local $fTemp3) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 64))) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 76))) (get_local $fTemp3))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 72))) (call $powf (get_local $fTemp2) (f32.const 4.))))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.add (get_local $fSlow5) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 100))))))
				(set_local $fTemp4 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 92))) (f32.max (f32.const 20.) (f32.min (f32.const 10000.) (f32.load (i32.add (get_local $dsp) (i32.const 96))))))))
				(set_local $fTemp5 (f32.div (f32.const 1.) (get_local $fTemp4)))
				(set_local $fTemp6 (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fTemp4) (f32.const 2.)))))
				(set_local $fTemp7 (f32.add (get_local $fSlow8) (f32.add (f32.div (f32.add (get_local $fSlow10) (get_local $fTemp5)) (get_local $fTemp4)) (f32.const 1.))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.sub (get_local $fTemp1) (f32.div (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.add (get_local $fSlow8) (f32.add (f32.div (f32.sub (get_local $fTemp5) (get_local $fSlow10)) (get_local $fTemp4)) (f32.const 1.)))) (f32.mul (f32.const 2.) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.add (get_local $fSlow8) (get_local $fTemp6))))) (get_local $fTemp7))))
				(set_local $fTemp8 (f32.add (get_local $fSlow11) (f32.add (f32.div (f32.add (get_local $fSlow12) (get_local $fTemp5)) (get_local $fTemp4)) (f32.const 1.))))
				(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.sub (f32.div (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 112))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 104))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 108)))))) (get_local $fTemp7)) (f32.div (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 124))) (f32.add (get_local $fSlow11) (f32.add (f32.div (f32.sub (get_local $fTemp5) (get_local $fSlow12)) (get_local $fTemp4)) (f32.const 1.)))) (f32.mul (f32.const 2.) (f32.mul (f32.add (get_local $fSlow11) (get_local $fTemp6)) (f32.load (i32.add (get_local $dsp) (i32.const 120)))))) (get_local $fTemp8))))
				(set_local $fTemp9 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 92))) (f32.max (f32.load (i32.add (get_local $dsp) (i32.const 96))) (f32.const 20.)))))
				(set_local $fTemp10 (f32.div (f32.const 1.) (get_local $fTemp9)))
				(set_local $fTemp11 (f32.add (get_local $fSlow15) (f32.add (f32.div (f32.add (get_local $fSlow16) (get_local $fTemp10)) (get_local $fTemp9)) (f32.const 1.))))
				(set_local $fTemp12 (f32.div (f32.add (get_local $fSlow15) (f32.sub (f32.const 1.) (f32.div (f32.sub (get_local $fSlow16) (get_local $fTemp10)) (get_local $fTemp9)))) (get_local $fTemp11)))
				(set_local $fTemp13 (f32.max (f32.const -0.999899983) (f32.min (f32.const 0.999899983) (get_local $fTemp12))))
				(set_local $fTemp14 (f32.sub (f32.const 1.) (call $powf (get_local $fTemp13) (f32.const 2.))))
				(set_local $fTemp15 (f32.sqrt (f32.max (f32.const 0.) (get_local $fTemp14))))
				(set_local $fTemp16 (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 140))) (f32.sub (f32.const 0.) (get_local $fTemp13))) (f32.mul (get_local $fTemp1) (get_local $fTemp15))))
				(set_local $fTemp17 (f32.sub (f32.const 1.) (f32.div (f32.const 1.) (call $powf (get_local $fTemp9) (f32.const 2.)))))
				(set_local $fTemp18 (f32.add (get_local $fSlow15) (get_local $fTemp17)))
				(set_local $fTemp19 (f32.max (f32.const -0.999899983) (f32.min (f32.const 0.999899983) (f32.mul (f32.const 2.) (f32.div (get_local $fTemp18) (f32.mul (get_local $fTemp11) (f32.add (get_local $fTemp12) (f32.const 1.))))))))
				(set_local $fTemp20 (f32.sub (f32.const 1.) (call $powf (get_local $fTemp19) (f32.const 2.))))
				(set_local $fTemp21 (f32.sqrt (f32.max (f32.const 0.) (get_local $fTemp20))))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 132))) (f32.sub (f32.const 0.) (get_local $fTemp19))) (f32.mul (get_local $fTemp16) (get_local $fTemp21))))
				(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.add (f32.mul (get_local $fTemp16) (get_local $fTemp19)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 132))) (get_local $fTemp21))))
				(set_local $fRec11 (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(set_local $fTemp22 (f32.sub (f32.const 1.) (f32.div (get_local $fTemp18) (get_local $fTemp11))))
				(set_local $fTemp23 (f32.sqrt (get_local $fTemp14)))
				(set_local $fTemp24 (f32.add (f32.add (f32.add (f32.mul (get_local $fTemp1) (get_local $fTemp13)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 140))) (get_local $fTemp15))) (f32.mul (f32.const 2.) (f32.div (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 136))) (get_local $fTemp22)) (get_local $fTemp23)))) (f32.div (f32.mul (get_local $fRec11) (f32.sub (f32.sub (f32.const 1.) (get_local $fTemp12)) (f32.mul (f32.const 2.) (f32.mul (get_local $fTemp19) (get_local $fTemp22))))) (f32.mul (get_local $fTemp23) (f32.sqrt (get_local $fTemp20))))))
				(set_local $fTemp25 (f32.add (get_local $fSlow14) (f32.sub (f32.add (f32.div (f32.add (get_local $fSlow17) (get_local $fTemp10)) (get_local $fTemp9)) (f32.const 1.)) (get_local $fSlow13))))
				(set_local $fTemp26 (f32.div (f32.add (get_local $fSlow14) (f32.sub (f32.add (f32.div (f32.sub (get_local $fTemp10) (get_local $fSlow17)) (get_local $fTemp9)) (f32.const 1.)) (get_local $fSlow13))) (get_local $fTemp25)))
				(set_local $fTemp27 (f32.max (f32.const -0.999899983) (f32.min (f32.const 0.999899983) (get_local $fTemp26))))
				(set_local $fTemp28 (f32.sub (f32.const 1.) (call $powf (get_local $fTemp27) (f32.const 2.))))
				(set_local $fTemp29 (f32.sqrt (f32.max (f32.const 0.) (get_local $fTemp28))))
				(set_local $fTemp30 (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 156))) (f32.sub (f32.const 0.) (get_local $fTemp27))) (f32.div (f32.mul (get_local $fTemp24) (get_local $fTemp29)) (get_local $fTemp11))))
				(set_local $fTemp31 (f32.add (get_local $fSlow14) (f32.sub (get_local $fTemp17) (get_local $fSlow13))))
				(set_local $fTemp32 (f32.max (f32.const -0.999899983) (f32.min (f32.const 0.999899983) (f32.mul (f32.const 2.) (f32.div (get_local $fTemp31) (f32.mul (get_local $fTemp25) (f32.add (get_local $fTemp26) (f32.const 1.))))))))
				(set_local $fTemp33 (f32.sub (f32.const 1.) (call $powf (get_local $fTemp32) (f32.const 2.))))
				(set_local $fTemp34 (f32.sqrt (f32.max (f32.const 0.) (get_local $fTemp33))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 148))) (f32.sub (f32.const 0.) (get_local $fTemp32))) (f32.mul (get_local $fTemp30) (get_local $fTemp34))))
				(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.add (f32.mul (get_local $fTemp30) (get_local $fTemp32)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 148))) (get_local $fTemp34))))
				(set_local $fRec14 (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(set_local $fTemp35 (f32.sub (f32.const 1.) (f32.div (get_local $fTemp31) (get_local $fTemp25))))
				(set_local $fTemp36 (f32.sqrt (get_local $fTemp28)))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (select (get_local $fTemp0) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (select (select (f32.div (f32.add (f32.add (f32.add (f32.div (f32.mul (get_local $fTemp24) (get_local $fTemp27)) (get_local $fTemp11)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 156))) (get_local $fTemp29))) (f32.mul (f32.const 2.) (f32.div (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 152))) (get_local $fTemp35)) (get_local $fTemp36)))) (f32.div (f32.mul (get_local $fRec14) (f32.sub (f32.sub (f32.const 1.) (get_local $fTemp26)) (f32.mul (f32.const 2.) (f32.mul (get_local $fTemp32) (get_local $fTemp35))))) (f32.mul (get_local $fTemp36) (f32.sqrt (get_local $fTemp33))))) (get_local $fTemp25)) (f32.div (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 124))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 116))) (f32.mul (f32.const 2.) (f32.load (i32.add (get_local $dsp) (i32.const 120)))))) (get_local $fTemp8)) (get_local $iSlow6)) (f32.load (i32.add (get_local $dsp) (i32.const 80))) (get_local $iSlow2))) (get_local $iSlow0)))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.load (i32.add (get_local $dsp) (i32.const 8))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.load (i32.add (get_local $dsp) (i32.const 48))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.load (i32.add (get_local $dsp) (i32.const 56))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.load (i32.add (get_local $dsp) (i32.const 80))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.load (i32.add (get_local $dsp) (i32.const 108))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.load (i32.add (get_local $dsp) (i32.const 116))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.load (i32.add (get_local $dsp) (i32.const 136))))
				(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.load (i32.add (get_local $dsp) (i32.const 144))))
				(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.load (i32.add (get_local $dsp) (i32.const 152))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
