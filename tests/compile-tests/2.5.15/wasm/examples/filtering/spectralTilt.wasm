
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $tanf "env" "_tanf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"spectralTilt\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"60\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"description\":\"Demonstrate the Spectral Tilt effect on test signals\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"spectralTilt\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"spectralTilt\",\"items\":[{\"type\":\"hslider\",\"label\":\"Slope of Spectral Tilt across Band\",\"address\":\"/spectralTilt/Slope_of_Spectral_Tilt_across_Band\",\"index\":\"20\",\"meta\":[{\"1\":\"\"}],\"init\":\"-0.5\",\"min\":\"-1\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Band Start Frequency\",\"address\":\"/spectralTilt/Band_Start_Frequency\",\"index\":\"12\",\"meta\":[{\"2\":\"\"},{\"unit\":\"Hz\"}],\"init\":\"100\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Band Width\",\"address\":\"/spectralTilt/Band_Width\",\"index\":\"16\",\"meta\":[{\"3\":\"\"},{\"unit\":\"Hz\"}],\"init\":\"5000\",\"min\":\"100\",\"max\":\"10000\",\"step\":\"1\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.div (f32.const 3.14159274) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.div (f32.const 1.) (call $tanf (f32.div (f32.const 0.5) (f32.load (i32.add (get_local $dsp) (i32.const 4)))))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 100.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 5000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const -0.5))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 28) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 36) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 44) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $fSlow16 f32)
		(local $fSlow17 f32)
		(local $fSlow18 f32)
		(local $fSlow19 f32)
		(local $fSlow20 f32)
		(local $fSlow21 f32)
		(local $fSlow22 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $fSlow16 (f32.const 0.))
		(set_local $fSlow17 (f32.const 0.))
		(set_local $fSlow18 (f32.const 0.))
		(set_local $fSlow19 (f32.const 0.))
		(set_local $fSlow20 (f32.const 0.))
		(set_local $fSlow21 (f32.const 0.))
		(set_local $fSlow22 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 12))))
		(set_local $fSlow1 (call $powf (f32.div (f32.add (get_local $fSlow0) (f32.load (i32.add (get_local $dsp) (i32.const 16)))) (get_local $fSlow0)) (f32.const 1.)))
		(set_local $fSlow2 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.mul (get_local $fSlow0) (get_local $fSlow1)))))
		(set_local $fSlow3 (f32.load (i32.add (get_local $dsp) (i32.const 20))))
		(set_local $fSlow4 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.mul (get_local $fSlow0) (call $powf (get_local $fSlow1) (f32.sub (f32.const 1.) (get_local $fSlow3)))))))
		(set_local $fSlow5 (f32.div (get_local $fSlow2) (get_local $fSlow4)))
		(set_local $fSlow6 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (get_local $fSlow0))))
		(set_local $fSlow7 (f32.mul (f32.const 6.28318548) (f32.div (f32.mul (get_local $fSlow0) (get_local $fSlow2)) (get_local $fSlow6))))
		(set_local $fSlow8 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (get_local $fSlow7)))
		(set_local $fSlow9 (f32.sub (f32.const 0.) (f32.div (f32.sub (get_local $fSlow7) (f32.load (i32.add (get_local $dsp) (i32.const 24)))) (get_local $fSlow8))))
		(set_local $fSlow10 (f32.div (f32.const 1.) (get_local $fSlow8)))
		(set_local $fSlow11 (f32.mul (f32.const 6.28318548) (f32.div (f32.mul (get_local $fSlow0) (get_local $fSlow4)) (get_local $fSlow6))))
		(set_local $fSlow12 (f32.sub (get_local $fSlow11) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		(set_local $fSlow13 (call $tanf (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 8))) (f32.mul (get_local $fSlow0) (call $powf (get_local $fSlow1) (f32.sub (f32.const 0.) (get_local $fSlow3)))))))
		(set_local $fSlow14 (f32.div (get_local $fSlow6) (get_local $fSlow13)))
		(set_local $fSlow15 (f32.mul (f32.const 6.28318548) (get_local $fSlow0)))
		(set_local $fSlow16 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (get_local $fSlow15)))
		(set_local $fSlow17 (f32.sub (f32.const 0.) (f32.div (f32.sub (get_local $fSlow15) (f32.load (i32.add (get_local $dsp) (i32.const 24)))) (get_local $fSlow16))))
		(set_local $fSlow18 (f32.div (f32.const 1.) (get_local $fSlow16)))
		(set_local $fSlow19 (f32.mul (f32.const 6.28318548) (f32.div (f32.mul (get_local $fSlow0) (get_local $fSlow13)) (get_local $fSlow6))))
		(set_local $fSlow20 (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (get_local $fSlow19)))
		(set_local $fSlow21 (f32.sub (get_local $fSlow19) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		(set_local $fSlow22 (f32.div (f32.mul (get_local $fSlow6) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (get_local $fSlow11))) (get_local $fSlow13)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (get_local $fTemp0))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.add (f32.mul (get_local $fSlow17) (f32.load (i32.add (get_local $dsp) (i32.const 40)))) (f32.mul (get_local $fSlow18) (f32.add (f32.mul (get_local $fSlow20) (get_local $fTemp0)) (f32.mul (get_local $fSlow21) (f32.load (i32.add (get_local $dsp) (i32.const 32))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.mul (get_local $fSlow14) (f32.load (i32.add (get_local $dsp) (i32.const 36)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.add (f32.mul (get_local $fSlow9) (f32.load (i32.add (get_local $dsp) (i32.const 56)))) (f32.mul (get_local $fSlow10) (f32.add (f32.mul (get_local $fSlow12) (f32.load (i32.add (get_local $dsp) (i32.const 48)))) (f32.mul (get_local $fSlow22) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (get_local $fSlow5) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 28))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.load (i32.add (get_local $dsp) (i32.const 36))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.load (i32.add (get_local $dsp) (i32.const 44))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
