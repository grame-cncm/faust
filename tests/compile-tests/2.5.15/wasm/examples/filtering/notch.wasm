
(module
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"notch\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"28\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"maxmsp.lib/author\":\"GRAME\"},{\"maxmsp.lib/copyright\":\"GRAME\"},{\"maxmsp.lib/license\":\"LGPL\"},{\"maxmsp.lib/name\":\"MaxMSP compatibility Library\"},{\"maxmsp.lib/version\":\"1.1\"},{\"name\":\"notch\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"notch\",\"items\":[{\"type\":\"hslider\",\"label\":\"Freq\",\"address\":\"/notch/Freq\",\"index\":\"8\",\"init\":\"1000\",\"min\":\"100\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Q\",\"address\":\"/notch/Q\",\"index\":\"12\",\"init\":\"1\",\"min\":\"0.01\",\"max\":\"100\",\"step\":\"0.01\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.div (f32.const 6.28318548) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0))))))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.const 1000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 1.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 3)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 4))) (f32.max (f32.const 0.) (f32.load (i32.add (get_local $dsp) (i32.const 8))))))
		(set_local $fSlow1 (f32.mul (f32.const 0.5) (f32.div (call $sinf (get_local $fSlow0)) (f32.max (f32.const 0.00100000005) (f32.load (i32.add (get_local $dsp) (i32.const 12)))))))
		(set_local $fSlow2 (f32.div (f32.const 1.) (f32.add (get_local $fSlow1) (f32.const 1.))))
		(set_local $fSlow3 (f32.sub (f32.const 0.) (f32.mul (f32.const 2.) (call $cosf (get_local $fSlow0)))))
		(set_local $fSlow4 (f32.sub (f32.const 1.) (get_local $fSlow1)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.mul (get_local $fSlow3) (f32.load (i32.add (get_local $dsp) (i32.const 20)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.sub (f32.load (i32.add (get_local $input0) (get_local $i))) (f32.mul (get_local $fSlow2) (f32.add (get_local $fTemp0) (f32.mul (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 24))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (get_local $fSlow2) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 24))) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 16))) (get_local $fTemp0)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.load (i32.add (get_local $dsp) (i32.const 20))))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.load (i32.add (get_local $dsp) (i32.const 16))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
