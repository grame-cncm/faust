
(module
	(import $log10f "env" "_log10f" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"dbmeter\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"136\",\"inputs\":\"8\",\"outputs\":\"8\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"dbmeter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"8 channels dB meter\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd145708fd0\",\"address\":\"/8_channels_dB_meter/0/0x7fd145708fd0\",\"index\":\"16\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"1\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd14570d6b0\",\"address\":\"/8_channels_dB_meter/1/0x7fd14570d6b0\",\"index\":\"32\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"2\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd145711d90\",\"address\":\"/8_channels_dB_meter/2/0x7fd145711d90\",\"index\":\"48\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"3\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd145716520\",\"address\":\"/8_channels_dB_meter/3/0x7fd145716520\",\"index\":\"64\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"4\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd14571ad60\",\"address\":\"/8_channels_dB_meter/4/0x7fd14571ad60\",\"index\":\"80\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"5\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd14571f650\",\"address\":\"/8_channels_dB_meter/5/0x7fd14571f650\",\"index\":\"96\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"6\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd145723ff0\",\"address\":\"/8_channels_dB_meter/6/0x7fd145723ff0\",\"index\":\"112\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"7\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fd145728a40\",\"address\":\"/8_channels_dB_meter/7/0x7fd145728a40\",\"index\":\"128\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.div (f32.const 80.) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0))))))))
		(i32.store (i32.add (get_local $dsp) (i32.const 20)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 36)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 52)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 68)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 84)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 100)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 116)) (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 132)) (i32.const 0))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 24) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 56) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 88) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 120) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $input2 i32)
		(local $input3 i32)
		(local $input4 i32)
		(local $input5 i32)
		(local $input6 i32)
		(local $input7 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $output2 i32)
		(local $output3 i32)
		(local $output4 i32)
		(local $output5 i32)
		(local $output6 i32)
		(local $output7 i32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $input2 (i32.const 0))
		(set_local $input3 (i32.const 0))
		(set_local $input4 (i32.const 0))
		(set_local $input5 (i32.const 0))
		(set_local $input6 (i32.const 0))
		(set_local $input7 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $output2 (i32.const 0))
		(set_local $output3 (i32.const 0))
		(set_local $output4 (i32.const 0))
		(set_local $output5 (i32.const 0))
		(set_local $output6 (i32.const 0))
		(set_local $output7 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $input2 (i32.load (i32.add (get_local $inputs) (i32.const 8))))
		(set_local $input3 (i32.load (i32.add (get_local $inputs) (i32.const 12))))
		(set_local $input4 (i32.load (i32.add (get_local $inputs) (i32.const 16))))
		(set_local $input5 (i32.load (i32.add (get_local $inputs) (i32.const 20))))
		(set_local $input6 (i32.load (i32.add (get_local $inputs) (i32.const 24))))
		(set_local $input7 (i32.load (i32.add (get_local $inputs) (i32.const 28))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $output2 (i32.load (i32.add (get_local $outputs) (i32.const 8))))
		(set_local $output3 (i32.load (i32.add (get_local $outputs) (i32.const 12))))
		(set_local $output4 (i32.load (i32.add (get_local $outputs) (i32.const 16))))
		(set_local $output5 (i32.load (i32.add (get_local $outputs) (i32.const 20))))
		(set_local $output6 (i32.load (i32.add (get_local $outputs) (i32.const 24))))
		(set_local $output7 (i32.load (i32.add (get_local $outputs) (i32.const 28))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp0))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.load (i32.add (get_local $dsp) (i32.const 8))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 20)))))
				(set_local $fTemp1 (f32.load (i32.add (get_local $input1) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp1))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.load (i32.add (get_local $dsp) (i32.const 24))))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 36)))))
				(set_local $fTemp2 (f32.load (i32.add (get_local $input2) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 44))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp2))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $output2) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 52)))))
				(set_local $fTemp3 (f32.load (i32.add (get_local $input3) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 60))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp3))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 56))))
				(f32.store (i32.add (get_local $output3) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 68)))))
				(set_local $fTemp4 (f32.load (i32.add (get_local $input4) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 76))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp4))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $output4) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 84)))))
				(set_local $fTemp5 (f32.load (i32.add (get_local $input5) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 92))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp5))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.load (i32.add (get_local $dsp) (i32.const 88))))
				(f32.store (i32.add (get_local $output5) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 100)))))
				(set_local $fTemp6 (f32.load (i32.add (get_local $input6) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp6))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $output6) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 116)))))
				(set_local $fTemp7 (f32.load (i32.add (get_local $input7) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 124))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.min (f32.const 10.) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.abs (get_local $fTemp7))))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(f32.store (i32.add (get_local $output7) (get_local $i)) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 132)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.load (i32.add (get_local $dsp) (i32.const 8))))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.load (i32.add (get_local $dsp) (i32.const 24))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.load (i32.add (get_local $dsp) (i32.const 56))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.load (i32.add (get_local $dsp) (i32.const 88))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.load (i32.add (get_local $dsp) (i32.const 120))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
