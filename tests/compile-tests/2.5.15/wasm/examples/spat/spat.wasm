
(module
	(import $fmodf "env" "_fmodf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"spat\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"76\",\"inputs\":\"1\",\"outputs\":\"8\",\"meta\":[{\"author\":\"Grame\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"name\":\"spat\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"spats.lib/name\":\"Faust Spatialization Library\"},{\"spats.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Spatializer 1x8\",\"items\":[{\"type\":\"hslider\",\"label\":\"angle\",\"address\":\"/Spatializer_1x8/angle\",\"index\":\"4\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"distance\",\"address\":\"/Spatializer_1x8/distance\",\"index\":\"0\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 72)) (get_local $samplingFreq))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.5))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 16) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 24) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 32) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 48) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 56) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 72))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $output2 i32)
		(local $output3 i32)
		(local $output4 i32)
		(local $output5 i32)
		(local $output6 i32)
		(local $output7 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $output2 (i32.const 0))
		(set_local $output3 (i32.const 0))
		(set_local $output4 (i32.const 0))
		(set_local $output5 (i32.const 0))
		(set_local $output6 (i32.const 0))
		(set_local $output7 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $output2 (i32.load (i32.add (get_local $outputs) (i32.const 8))))
		(set_local $output3 (i32.load (i32.add (get_local $outputs) (i32.const 12))))
		(set_local $output4 (i32.load (i32.add (get_local $outputs) (i32.const 16))))
		(set_local $output5 (i32.load (i32.add (get_local $outputs) (i32.const 20))))
		(set_local $output6 (i32.load (i32.add (get_local $outputs) (i32.const 24))))
		(set_local $output7 (i32.load (i32.add (get_local $outputs) (i32.const 28))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 0))))
		(set_local $fSlow1 (f32.add (get_local $fSlow0) (f32.const 1.)))
		(set_local $fSlow2 (f32.load (i32.add (get_local $dsp) (i32.const 4))))
		(set_local $fSlow3 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 1.5)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow4 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 1.375)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow5 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 1.25)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow6 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 1.125)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow7 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 1.)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow8 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 0.875)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow9 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 0.75)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $fSlow10 (f32.mul (f32.const 4.99999987e-05) (f32.mul (get_local $fSlow1) (f32.sqrt (f32.max (f32.const 0.) (f32.sub (f32.const 1.) (f32.mul (f32.const 8.) (f32.mul (get_local $fSlow0) (f32.abs (f32.add (call $fmodf (f32.add (get_local $fSlow2) (f32.const 0.625)) (f32.const 1.)) (f32.const -0.5)))))))))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.add (get_local $fSlow3) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 12))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.add (get_local $fSlow4) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 20))))))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 16)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.add (get_local $fSlow5) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 28))))))
				(f32.store (i32.add (get_local $output2) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.add (get_local $fSlow6) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))
				(f32.store (i32.add (get_local $output3) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 32)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.add (get_local $fSlow7) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 44))))))
				(f32.store (i32.add (get_local $output4) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.add (get_local $fSlow8) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 52))))))
				(f32.store (i32.add (get_local $output5) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 48)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.add (get_local $fSlow9) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 60))))))
				(f32.store (i32.add (get_local $output6) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 56)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (get_local $fSlow10) (f32.mul (f32.const 0.999899983) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(f32.store (i32.add (get_local $output7) (get_local $i)) (f32.mul (get_local $fTemp0) (f32.load (i32.add (get_local $dsp) (i32.const 64)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.load (i32.add (get_local $dsp) (i32.const 8))))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.load (i32.add (get_local $dsp) (i32.const 16))))
				(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.load (i32.add (get_local $dsp) (i32.const 24))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.load (i32.add (get_local $dsp) (i32.const 32))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.load (i32.add (get_local $dsp) (i32.const 48))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.load (i32.add (get_local $dsp) (i32.const 56))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
