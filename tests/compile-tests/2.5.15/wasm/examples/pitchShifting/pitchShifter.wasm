
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $fmodf "env" "_fmodf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"pitchShifter\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"524316\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"author\":\"Grame\"},{\"copyright\":\"(c)GRAME 2006\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"misceffects.lib/name\":\"Faust Math Library\"},{\"misceffects.lib/version\":\"2.0\"},{\"name\":\"pitchShifter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Pitch Shifter\",\"items\":[{\"type\":\"hslider\",\"label\":\"shift (semitones)\",\"address\":\"/Pitch_Shifter/shift_(semitones)\",\"index\":\"524296\",\"init\":\"0\",\"min\":\"-12\",\"max\":\"12\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"window (samples)\",\"address\":\"/Pitch_Shifter/window_(samples)\",\"index\":\"524292\",\"init\":\"1000\",\"min\":\"50\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"xfade (samples)\",\"address\":\"/Pitch_Shifter/xfade_(samples)\",\"index\":\"524308\",\"init\":\"10\",\"min\":\"1\",\"max\":\"10000\",\"step\":\"1\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 524312)) (get_local $samplingFreq))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 524292)) (f32.const 1000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 524296)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 524308)) (f32.const 10.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 131072)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 524300) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 524312))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $iTemp1 i32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $iTemp6 i32)
		(local $fTemp7 f32)
		(local $tmp_in0 i32)
		(local $tmp_in1 i32)
		(local $tmp_in2 i32)
		(local $tmp_in3 i32)
		(local $tmp_in4 i32)
		(local $tmp_in5 i32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $iTemp1 (i32.const 0))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $iTemp6 (i32.const 0))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $tmp_in2 (i32.const 0))
		(set_local $tmp_in3 (i32.const 0))
		(set_local $tmp_in4 (i32.const 0))
		(set_local $tmp_in5 (i32.const 0))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 524292))))
		(set_local $fSlow1 (call $powf (f32.const 2.) (f32.mul (f32.const 0.0833333358) (f32.load (i32.add (get_local $dsp) (i32.const 524296))))))
		(set_local $fSlow2 (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 524308)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(set_local $fTemp0 (f32.load (i32.add (get_local $input0) (get_local $i))))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 0))) (i32.const 131071)) (i32.const 2)))) (get_local $fTemp0))
				(f32.store (i32.add (get_local $dsp) (i32.const 524300)) (call $fmodf (f32.add (get_local $fSlow0) (f32.sub (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 524304))) (f32.const 1.)) (get_local $fSlow1))) (get_local $fSlow0)))
				(set_local $iTemp1 (i32.trunc_s/f32 (f32.load (i32.add (get_local $dsp) (i32.const 524300)))))
				(set_local $fTemp2 (f32.floor (f32.load (i32.add (get_local $dsp) (i32.const 524300)))))
				(set_local $fTemp3 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 524300)))))
				(set_local $fTemp4 (f32.min (f32.mul (get_local $fSlow2) (f32.load (i32.add (get_local $dsp) (i32.const 524300)))) (f32.const 1.)))
				(set_local $fTemp5 (f32.add (get_local $fSlow0) (f32.load (i32.add (get_local $dsp) (i32.const 524300)))))
				(set_local $iTemp6 (i32.trunc_s/f32 (get_local $fTemp5)))
				(set_local $fTemp7 (f32.floor (get_local $fTemp5)))
				(set_local $tmp_in0 (i32.add (get_local $iTemp1) (i32.const 1)))
				(set_local $tmp_in1 (i32.add (get_local $iTemp6) (i32.const 1)))
				(set_local $tmp_in2 (select (get_local $iTemp1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp1))))
				(set_local $tmp_in3 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0))))
				(set_local $tmp_in4 (select (get_local $iTemp6) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $iTemp6))))
				(set_local $tmp_in5 (select (get_local $tmp_in1) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in1))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.add (f32.mul (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 0))) (select (i32.const 65537) (get_local $tmp_in2) (i32.lt_s (i32.const 65537) (get_local $tmp_in2)))) (i32.const 131071)) (i32.const 2))))) (f32.add (get_local $fTemp2) (get_local $fTemp3))) (f32.mul (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 524300))) (get_local $fTemp2)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 0))) (select (i32.const 65537) (get_local $tmp_in3) (i32.lt_s (i32.const 65537) (get_local $tmp_in3)))) (i32.const 131071)) (i32.const 2))))))) (get_local $fTemp4)) (f32.mul (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 0))) (select (i32.const 65537) (get_local $tmp_in4) (i32.lt_s (i32.const 65537) (get_local $tmp_in4)))) (i32.const 131071)) (i32.const 2))))) (f32.sub (f32.add (get_local $fTemp7) (get_local $fTemp3)) (get_local $fSlow0))) (f32.mul (f32.add (get_local $fSlow0) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 524300))) (get_local $fTemp7))) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 0))) (select (i32.const 65537) (get_local $tmp_in5) (i32.lt_s (i32.const 65537) (get_local $tmp_in5)))) (i32.const 131071)) (i32.const 2))))))) (f32.sub (f32.const 1.) (get_local $fTemp4)))))
				(i32.store (i32.add (get_local $dsp) (i32.const 0)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 0))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 524304)) (f32.load (i32.add (get_local $dsp) (i32.const 524300))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
