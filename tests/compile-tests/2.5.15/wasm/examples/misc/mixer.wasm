
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $log10f "env" "_log10f" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"mixer\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"300\",\"inputs\":\"8\",\"outputs\":\"2\",\"meta\":[{\"../analysis/vumeter.dsp/author\":\"Grame\"},{\"../analysis/vumeter.dsp/copyright\":\"(c)GRAME 2006\"},{\"../analysis/vumeter.dsp/license\":\"BSD\"},{\"../analysis/vumeter.dsp/name\":\"vumeter\"},{\"../analysis/vumeter.dsp/version\":\"1.0\"},{\"../dynamic/volume.dsp/author\":\"Grame\"},{\"../dynamic/volume.dsp/copyright\":\"(c)GRAME 2006\"},{\"../dynamic/volume.dsp/license\":\"BSD\"},{\"../dynamic/volume.dsp/name\":\"volume\"},{\"../dynamic/volume.dsp/version\":\"1.0\"},{\"../spat/panpot.dsp/author\":\"Grame\"},{\"../spat/panpot.dsp/copyright\":\"(c)GRAME 2006\"},{\"../spat/panpot.dsp/license\":\"BSD\"},{\"../spat/panpot.dsp/name\":\"panpot\"},{\"../spat/panpot.dsp/version\":\"1.0\"},{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"mixer\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"mixer\",\"items\":[{\"type\":\"vgroup\",\"label\":\"Ch 0\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_0/pan\",\"index\":\"20\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_0/0x00/0x00\",\"index\":\"28\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bed0c80\",\"address\":\"/mixer/Ch_0/0x00/0x7fa98bed0c80\",\"index\":\"48\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_0/mute\",\"index\":\"24\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 1\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_1/pan\",\"index\":\"52\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_1/0x00/0x00\",\"index\":\"60\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bedad50\",\"address\":\"/mixer/Ch_1/0x00/0x7fa98bedad50\",\"index\":\"80\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_1/mute\",\"index\":\"56\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 2\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_2/pan\",\"index\":\"84\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_2/0x00/0x00\",\"index\":\"92\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bee5260\",\"address\":\"/mixer/Ch_2/0x00/0x7fa98bee5260\",\"index\":\"112\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_2/mute\",\"index\":\"88\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 3\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_3/pan\",\"index\":\"116\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_3/0x00/0x00\",\"index\":\"124\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98beefa30\",\"address\":\"/mixer/Ch_3/0x00/0x7fa98beefa30\",\"index\":\"144\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_3/mute\",\"index\":\"120\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 4\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_4/pan\",\"index\":\"148\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_4/0x00/0x00\",\"index\":\"156\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98befa4c0\",\"address\":\"/mixer/Ch_4/0x00/0x7fa98befa4c0\",\"index\":\"176\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_4/mute\",\"index\":\"152\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 5\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_5/pan\",\"index\":\"180\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_5/0x00/0x00\",\"index\":\"188\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bf09190\",\"address\":\"/mixer/Ch_5/0x00/0x7fa98bf09190\",\"index\":\"208\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_5/mute\",\"index\":\"184\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 6\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_6/pan\",\"index\":\"212\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_6/0x00/0x00\",\"index\":\"220\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bf141a0\",\"address\":\"/mixer/Ch_6/0x00/0x7fa98bf141a0\",\"index\":\"240\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_6/mute\",\"index\":\"216\"}]},{\"type\":\"vgroup\",\"label\":\"Ch 7\",\"items\":[{\"type\":\"nentry\",\"label\":\"pan\",\"address\":\"/mixer/Ch_7/pan\",\"index\":\"244\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-90\",\"max\":\"90\",\"step\":\"1\"},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/Ch_7/0x00/0x00\",\"index\":\"252\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"},{\"type\":\"vbargraph\",\"label\":\"0x7fa98bf1f470\",\"address\":\"/mixer/Ch_7/0x00/0x7fa98bf1f470\",\"index\":\"272\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"checkbox\",\"label\":\"mute\",\"address\":\"/mixer/Ch_7/mute\",\"index\":\"248\"}]},{\"type\":\"hgroup\",\"label\":\"stereo out\",\"items\":[{\"type\":\"vgroup\",\"label\":\"L\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fa98bf23360\",\"address\":\"/mixer/stereo_out/L/0x7fa98bf23360\",\"index\":\"284\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"vgroup\",\"label\":\"R\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fa98bf2c900\",\"address\":\"/mixer/stereo_out/R/0x7fa98bf2c900\",\"index\":\"296\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]},{\"type\":\"vslider\",\"label\":\"0x00\",\"address\":\"/mixer/stereo_out/0x00\",\"index\":\"8\",\"meta\":[{\"1\":\"\"}],\"init\":\"0\",\"min\":\"-70\",\"max\":\"4\",\"step\":\"0.1\"}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 0)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 4)) (f32.div (f32.const 1.) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 0))))))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 20)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 84)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 88)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 92)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 116)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 120)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 124)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 148)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 152)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 156)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 180)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 184)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 188)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 212)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 216)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 220)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 244)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 248)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 252)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(local $l5 i32)
		(local $l6 i32)
		(local $l7 i32)
		(local $l8 i32)
		(local $l9 i32)
		(local $l10 i32)
		(local $l11 i32)
		(local $l12 i32)
		(local $l13 i32)
		(local $l14 i32)
		(local $l15 i32)
		(local $l16 i32)
		(local $l17 i32)
		(local $l18 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l5 (i32.const 0))
		(set_local $l6 (i32.const 0))
		(set_local $l7 (i32.const 0))
		(set_local $l8 (i32.const 0))
		(set_local $l9 (i32.const 0))
		(set_local $l10 (i32.const 0))
		(set_local $l11 (i32.const 0))
		(set_local $l12 (i32.const 0))
		(set_local $l13 (i32.const 0))
		(set_local $l14 (i32.const 0))
		(set_local $l15 (i32.const 0))
		(set_local $l16 (i32.const 0))
		(set_local $l17 (i32.const 0))
		(set_local $l18 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 12) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 32) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 64) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 72) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		(set_local $l5 (i32.const 0))
		(loop $for-in-l5 
			(block $for-out-l5 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 96) (i32.shl (get_local $l5) (i32.const 2)))) (f32.const 0.))
				(set_local $l5 (i32.add (get_local $l5) (i32.const 1)))
				(if (i32.lt_s (get_local $l5) (i32.const 2)) (br $for-in-l5) (br $for-out-l5))
				
			)
		)
		(set_local $l6 (i32.const 0))
		(loop $for-in-l6 
			(block $for-out-l6 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 104) (i32.shl (get_local $l6) (i32.const 2)))) (f32.const 0.))
				(set_local $l6 (i32.add (get_local $l6) (i32.const 1)))
				(if (i32.lt_s (get_local $l6) (i32.const 2)) (br $for-in-l6) (br $for-out-l6))
				
			)
		)
		(set_local $l7 (i32.const 0))
		(loop $for-in-l7 
			(block $for-out-l7 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 128) (i32.shl (get_local $l7) (i32.const 2)))) (f32.const 0.))
				(set_local $l7 (i32.add (get_local $l7) (i32.const 1)))
				(if (i32.lt_s (get_local $l7) (i32.const 2)) (br $for-in-l7) (br $for-out-l7))
				
			)
		)
		(set_local $l8 (i32.const 0))
		(loop $for-in-l8 
			(block $for-out-l8 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 136) (i32.shl (get_local $l8) (i32.const 2)))) (f32.const 0.))
				(set_local $l8 (i32.add (get_local $l8) (i32.const 1)))
				(if (i32.lt_s (get_local $l8) (i32.const 2)) (br $for-in-l8) (br $for-out-l8))
				
			)
		)
		(set_local $l9 (i32.const 0))
		(loop $for-in-l9 
			(block $for-out-l9 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 160) (i32.shl (get_local $l9) (i32.const 2)))) (f32.const 0.))
				(set_local $l9 (i32.add (get_local $l9) (i32.const 1)))
				(if (i32.lt_s (get_local $l9) (i32.const 2)) (br $for-in-l9) (br $for-out-l9))
				
			)
		)
		(set_local $l10 (i32.const 0))
		(loop $for-in-l10 
			(block $for-out-l10 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 168) (i32.shl (get_local $l10) (i32.const 2)))) (f32.const 0.))
				(set_local $l10 (i32.add (get_local $l10) (i32.const 1)))
				(if (i32.lt_s (get_local $l10) (i32.const 2)) (br $for-in-l10) (br $for-out-l10))
				
			)
		)
		(set_local $l11 (i32.const 0))
		(loop $for-in-l11 
			(block $for-out-l11 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 192) (i32.shl (get_local $l11) (i32.const 2)))) (f32.const 0.))
				(set_local $l11 (i32.add (get_local $l11) (i32.const 1)))
				(if (i32.lt_s (get_local $l11) (i32.const 2)) (br $for-in-l11) (br $for-out-l11))
				
			)
		)
		(set_local $l12 (i32.const 0))
		(loop $for-in-l12 
			(block $for-out-l12 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 200) (i32.shl (get_local $l12) (i32.const 2)))) (f32.const 0.))
				(set_local $l12 (i32.add (get_local $l12) (i32.const 1)))
				(if (i32.lt_s (get_local $l12) (i32.const 2)) (br $for-in-l12) (br $for-out-l12))
				
			)
		)
		(set_local $l13 (i32.const 0))
		(loop $for-in-l13 
			(block $for-out-l13 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 224) (i32.shl (get_local $l13) (i32.const 2)))) (f32.const 0.))
				(set_local $l13 (i32.add (get_local $l13) (i32.const 1)))
				(if (i32.lt_s (get_local $l13) (i32.const 2)) (br $for-in-l13) (br $for-out-l13))
				
			)
		)
		(set_local $l14 (i32.const 0))
		(loop $for-in-l14 
			(block $for-out-l14 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 232) (i32.shl (get_local $l14) (i32.const 2)))) (f32.const 0.))
				(set_local $l14 (i32.add (get_local $l14) (i32.const 1)))
				(if (i32.lt_s (get_local $l14) (i32.const 2)) (br $for-in-l14) (br $for-out-l14))
				
			)
		)
		(set_local $l15 (i32.const 0))
		(loop $for-in-l15 
			(block $for-out-l15 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 256) (i32.shl (get_local $l15) (i32.const 2)))) (f32.const 0.))
				(set_local $l15 (i32.add (get_local $l15) (i32.const 1)))
				(if (i32.lt_s (get_local $l15) (i32.const 2)) (br $for-in-l15) (br $for-out-l15))
				
			)
		)
		(set_local $l16 (i32.const 0))
		(loop $for-in-l16 
			(block $for-out-l16 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 264) (i32.shl (get_local $l16) (i32.const 2)))) (f32.const 0.))
				(set_local $l16 (i32.add (get_local $l16) (i32.const 1)))
				(if (i32.lt_s (get_local $l16) (i32.const 2)) (br $for-in-l16) (br $for-out-l16))
				
			)
		)
		(set_local $l17 (i32.const 0))
		(loop $for-in-l17 
			(block $for-out-l17 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 276) (i32.shl (get_local $l17) (i32.const 2)))) (f32.const 0.))
				(set_local $l17 (i32.add (get_local $l17) (i32.const 1)))
				(if (i32.lt_s (get_local $l17) (i32.const 2)) (br $for-in-l17) (br $for-out-l17))
				
			)
		)
		(set_local $l18 (i32.const 0))
		(loop $for-in-l18 
			(block $for-out-l18 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 288) (i32.shl (get_local $l18) (i32.const 2)))) (f32.const 0.))
				(set_local $l18 (i32.add (get_local $l18) (i32.const 1)))
				(if (i32.lt_s (get_local $l18) (i32.const 2)) (br $for-in-l18) (br $for-out-l18))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 0))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $input2 i32)
		(local $input3 i32)
		(local $input4 i32)
		(local $input5 i32)
		(local $input6 i32)
		(local $input7 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $fSlow7 f32)
		(local $fSlow8 f32)
		(local $fSlow9 f32)
		(local $fSlow10 f32)
		(local $fSlow11 f32)
		(local $fSlow12 f32)
		(local $fSlow13 f32)
		(local $fSlow14 f32)
		(local $fSlow15 f32)
		(local $fSlow16 f32)
		(local $fSlow17 f32)
		(local $fSlow18 f32)
		(local $fSlow19 f32)
		(local $fSlow20 f32)
		(local $fSlow21 f32)
		(local $fSlow22 f32)
		(local $fSlow23 f32)
		(local $fSlow24 f32)
		(local $fSlow25 f32)
		(local $fSlow26 f32)
		(local $fSlow27 f32)
		(local $fSlow28 f32)
		(local $fSlow29 f32)
		(local $fSlow30 f32)
		(local $fSlow31 f32)
		(local $fSlow32 f32)
		(local $fSlow33 f32)
		(local $fSlow34 f32)
		(local $fSlow35 f32)
		(local $fSlow36 f32)
		(local $fSlow37 f32)
		(local $fSlow38 f32)
		(local $fSlow39 f32)
		(local $fSlow40 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(local $fTemp3 f32)
		(local $fTemp4 f32)
		(local $fTemp5 f32)
		(local $fTemp6 f32)
		(local $fTemp7 f32)
		(local $fTemp8 f32)
		(local $fTemp9 f32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $input2 (i32.const 0))
		(set_local $input3 (i32.const 0))
		(set_local $input4 (i32.const 0))
		(set_local $input5 (i32.const 0))
		(set_local $input6 (i32.const 0))
		(set_local $input7 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $fSlow7 (f32.const 0.))
		(set_local $fSlow8 (f32.const 0.))
		(set_local $fSlow9 (f32.const 0.))
		(set_local $fSlow10 (f32.const 0.))
		(set_local $fSlow11 (f32.const 0.))
		(set_local $fSlow12 (f32.const 0.))
		(set_local $fSlow13 (f32.const 0.))
		(set_local $fSlow14 (f32.const 0.))
		(set_local $fSlow15 (f32.const 0.))
		(set_local $fSlow16 (f32.const 0.))
		(set_local $fSlow17 (f32.const 0.))
		(set_local $fSlow18 (f32.const 0.))
		(set_local $fSlow19 (f32.const 0.))
		(set_local $fSlow20 (f32.const 0.))
		(set_local $fSlow21 (f32.const 0.))
		(set_local $fSlow22 (f32.const 0.))
		(set_local $fSlow23 (f32.const 0.))
		(set_local $fSlow24 (f32.const 0.))
		(set_local $fSlow25 (f32.const 0.))
		(set_local $fSlow26 (f32.const 0.))
		(set_local $fSlow27 (f32.const 0.))
		(set_local $fSlow28 (f32.const 0.))
		(set_local $fSlow29 (f32.const 0.))
		(set_local $fSlow30 (f32.const 0.))
		(set_local $fSlow31 (f32.const 0.))
		(set_local $fSlow32 (f32.const 0.))
		(set_local $fSlow33 (f32.const 0.))
		(set_local $fSlow34 (f32.const 0.))
		(set_local $fSlow35 (f32.const 0.))
		(set_local $fSlow36 (f32.const 0.))
		(set_local $fSlow37 (f32.const 0.))
		(set_local $fSlow38 (f32.const 0.))
		(set_local $fSlow39 (f32.const 0.))
		(set_local $fSlow40 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $fTemp3 (f32.const 0.))
		(set_local $fTemp4 (f32.const 0.))
		(set_local $fTemp5 (f32.const 0.))
		(set_local $fTemp6 (f32.const 0.))
		(set_local $fTemp7 (f32.const 0.))
		(set_local $fTemp8 (f32.const 0.))
		(set_local $fTemp9 (f32.const 0.))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $input2 (i32.load (i32.add (get_local $inputs) (i32.const 8))))
		(set_local $input3 (i32.load (i32.add (get_local $inputs) (i32.const 12))))
		(set_local $input4 (i32.load (i32.add (get_local $inputs) (i32.const 16))))
		(set_local $input5 (i32.load (i32.add (get_local $inputs) (i32.const 20))))
		(set_local $input6 (i32.load (i32.add (get_local $inputs) (i32.const 24))))
		(set_local $input7 (i32.load (i32.add (get_local $inputs) (i32.const 28))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 8)))))))
		(set_local $fSlow1 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 20))) (f32.const -90.))))
		(set_local $fSlow2 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow1))))
		(set_local $fSlow3 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		(set_local $fSlow4 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))))
		(set_local $fSlow5 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 52))) (f32.const -90.))))
		(set_local $fSlow6 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow5))))
		(set_local $fSlow7 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 56)))))
		(set_local $fSlow8 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 60)))))))
		(set_local $fSlow9 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 84))) (f32.const -90.))))
		(set_local $fSlow10 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow9))))
		(set_local $fSlow11 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 88)))))
		(set_local $fSlow12 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 92)))))))
		(set_local $fSlow13 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 116))) (f32.const -90.))))
		(set_local $fSlow14 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow13))))
		(set_local $fSlow15 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 120)))))
		(set_local $fSlow16 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 124)))))))
		(set_local $fSlow17 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 148))) (f32.const -90.))))
		(set_local $fSlow18 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow17))))
		(set_local $fSlow19 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 152)))))
		(set_local $fSlow20 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 156)))))))
		(set_local $fSlow21 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 180))) (f32.const -90.))))
		(set_local $fSlow22 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow21))))
		(set_local $fSlow23 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 184)))))
		(set_local $fSlow24 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 188)))))))
		(set_local $fSlow25 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 212))) (f32.const -90.))))
		(set_local $fSlow26 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow25))))
		(set_local $fSlow27 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 216)))))
		(set_local $fSlow28 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 220)))))))
		(set_local $fSlow29 (f32.mul (f32.const 0.00555555569) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 244))) (f32.const -90.))))
		(set_local $fSlow30 (f32.sqrt (f32.sub (f32.const 0.) (get_local $fSlow29))))
		(set_local $fSlow31 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 248)))))
		(set_local $fSlow32 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 252)))))))
		(set_local $fSlow33 (f32.sqrt (f32.add (get_local $fSlow1) (f32.const 1.))))
		(set_local $fSlow34 (f32.sqrt (f32.add (get_local $fSlow5) (f32.const 1.))))
		(set_local $fSlow35 (f32.sqrt (f32.add (get_local $fSlow9) (f32.const 1.))))
		(set_local $fSlow36 (f32.sqrt (f32.add (get_local $fSlow13) (f32.const 1.))))
		(set_local $fSlow37 (f32.sqrt (f32.add (get_local $fSlow17) (f32.const 1.))))
		(set_local $fSlow38 (f32.sqrt (f32.add (get_local $fSlow21) (f32.const 1.))))
		(set_local $fSlow39 (f32.sqrt (f32.add (get_local $fSlow25) (f32.const 1.))))
		(set_local $fSlow40 (f32.sqrt (f32.add (get_local $fSlow29) (f32.const 1.))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 16))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.add (get_local $fSlow4) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 36))))))
				(set_local $fTemp0 (f32.mul (get_local $fSlow3) (f32.mul (f32.load (i32.add (get_local $input0) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 32))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 44))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.add (get_local $fSlow8) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 68))))))
				(set_local $fTemp1 (f32.mul (get_local $fSlow7) (f32.mul (f32.load (i32.add (get_local $input1) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 64))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 72)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 76))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp1))))
				(f32.store (i32.add (get_local $dsp) (i32.const 80)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 72)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 96)) (f32.add (get_local $fSlow12) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 100))))))
				(set_local $fTemp2 (f32.mul (get_local $fSlow11) (f32.mul (f32.load (i32.add (get_local $input2) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 96))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 104)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 108))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp2))))
				(f32.store (i32.add (get_local $dsp) (i32.const 112)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 104)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 128)) (f32.add (get_local $fSlow16) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 132))))))
				(set_local $fTemp3 (f32.mul (get_local $fSlow15) (f32.mul (f32.load (i32.add (get_local $input3) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 128))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 136)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 140))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp3))))
				(f32.store (i32.add (get_local $dsp) (i32.const 144)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 136)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 160)) (f32.add (get_local $fSlow20) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 164))))))
				(set_local $fTemp4 (f32.mul (get_local $fSlow19) (f32.mul (f32.load (i32.add (get_local $input4) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 160))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 168)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 172))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp4))))
				(f32.store (i32.add (get_local $dsp) (i32.const 176)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 168)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 192)) (f32.add (get_local $fSlow24) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 196))))))
				(set_local $fTemp5 (f32.mul (get_local $fSlow23) (f32.mul (f32.load (i32.add (get_local $input5) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 192))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 200)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 204))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp5))))
				(f32.store (i32.add (get_local $dsp) (i32.const 208)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 200)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 224)) (f32.add (get_local $fSlow28) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 228))))))
				(set_local $fTemp6 (f32.mul (get_local $fSlow27) (f32.mul (f32.load (i32.add (get_local $input6) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 224))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 232)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 236))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp6))))
				(f32.store (i32.add (get_local $dsp) (i32.const 240)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 232)))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 256)) (f32.add (get_local $fSlow32) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 260))))))
				(set_local $fTemp7 (f32.mul (get_local $fSlow31) (f32.mul (f32.load (i32.add (get_local $input7) (get_local $i))) (f32.load (i32.add (get_local $dsp) (i32.const 256))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 264)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 268))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp7))))
				(f32.store (i32.add (get_local $dsp) (i32.const 272)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 264)))))))
				(set_local $fTemp8 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.add (f32.add (f32.add (f32.add (f32.add (f32.add (f32.add (f32.mul (get_local $fSlow2) (get_local $fTemp0)) (f32.mul (get_local $fSlow6) (get_local $fTemp1))) (f32.mul (get_local $fSlow10) (get_local $fTemp2))) (f32.mul (get_local $fSlow14) (get_local $fTemp3))) (f32.mul (get_local $fSlow18) (get_local $fTemp4))) (f32.mul (get_local $fSlow22) (get_local $fTemp5))) (f32.mul (get_local $fSlow26) (get_local $fTemp6))) (f32.mul (get_local $fSlow30) (get_local $fTemp7)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 276)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 280))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp8))))
				(f32.store (i32.add (get_local $dsp) (i32.const 284)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 276)))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (get_local $fTemp8))
				(set_local $fTemp9 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.add (f32.add (f32.add (f32.add (f32.add (f32.add (f32.add (f32.mul (get_local $fSlow33) (get_local $fTemp0)) (f32.mul (get_local $fSlow34) (get_local $fTemp1))) (f32.mul (get_local $fSlow35) (get_local $fTemp2))) (f32.mul (get_local $fSlow36) (get_local $fTemp3))) (f32.mul (get_local $fSlow37) (get_local $fTemp4))) (f32.mul (get_local $fSlow38) (get_local $fTemp5))) (f32.mul (get_local $fSlow39) (get_local $fTemp6))) (f32.mul (get_local $fSlow40) (get_local $fTemp7)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 288)) (f32.max (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 292))) (f32.load (i32.add (get_local $dsp) (i32.const 4)))) (f32.abs (get_local $fTemp9))))
				(f32.store (i32.add (get_local $dsp) (i32.const 296)) (f32.mul (f32.const 20.) (call $log10f (f32.max (f32.const 0.000316227757) (f32.load (i32.add (get_local $dsp) (i32.const 288)))))))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (get_local $fTemp9))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.load (i32.add (get_local $dsp) (i32.const 12))))
				(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.load (i32.add (get_local $dsp) (i32.const 32))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.load (i32.add (get_local $dsp) (i32.const 40))))
				(f32.store (i32.add (get_local $dsp) (i32.const 68)) (f32.load (i32.add (get_local $dsp) (i32.const 64))))
				(f32.store (i32.add (get_local $dsp) (i32.const 76)) (f32.load (i32.add (get_local $dsp) (i32.const 72))))
				(f32.store (i32.add (get_local $dsp) (i32.const 100)) (f32.load (i32.add (get_local $dsp) (i32.const 96))))
				(f32.store (i32.add (get_local $dsp) (i32.const 108)) (f32.load (i32.add (get_local $dsp) (i32.const 104))))
				(f32.store (i32.add (get_local $dsp) (i32.const 132)) (f32.load (i32.add (get_local $dsp) (i32.const 128))))
				(f32.store (i32.add (get_local $dsp) (i32.const 140)) (f32.load (i32.add (get_local $dsp) (i32.const 136))))
				(f32.store (i32.add (get_local $dsp) (i32.const 164)) (f32.load (i32.add (get_local $dsp) (i32.const 160))))
				(f32.store (i32.add (get_local $dsp) (i32.const 172)) (f32.load (i32.add (get_local $dsp) (i32.const 168))))
				(f32.store (i32.add (get_local $dsp) (i32.const 196)) (f32.load (i32.add (get_local $dsp) (i32.const 192))))
				(f32.store (i32.add (get_local $dsp) (i32.const 204)) (f32.load (i32.add (get_local $dsp) (i32.const 200))))
				(f32.store (i32.add (get_local $dsp) (i32.const 228)) (f32.load (i32.add (get_local $dsp) (i32.const 224))))
				(f32.store (i32.add (get_local $dsp) (i32.const 236)) (f32.load (i32.add (get_local $dsp) (i32.const 232))))
				(f32.store (i32.add (get_local $dsp) (i32.const 260)) (f32.load (i32.add (get_local $dsp) (i32.const 256))))
				(f32.store (i32.add (get_local $dsp) (i32.const 268)) (f32.load (i32.add (get_local $dsp) (i32.const 264))))
				(f32.store (i32.add (get_local $dsp) (i32.const 280)) (f32.load (i32.add (get_local $dsp) (i32.const 276))))
				(f32.store (i32.add (get_local $dsp) (i32.const 292)) (f32.load (i32.add (get_local $dsp) (i32.const 288))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
