
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"tester\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"262228\",\"inputs\":\"0\",\"outputs\":\"8\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"tester\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Audio Tester\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/Audio_Tester/freq\",\"index\":\"262176\",\"meta\":[{\"1\":\"\"},{\"unit\":\"Hz\"}],\"init\":\"1000\",\"min\":\"10\",\"max\":\"20000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"volume\",\"address\":\"/Audio_Tester/volume\",\"index\":\"262152\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"init\":\"-96\",\"min\":\"-96\",\"max\":\"0\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"destination\",\"address\":\"/Audio_Tester/destination\",\"index\":\"262148\",\"meta\":[{\"3\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"8\",\"step\":\"1\"},{\"type\":\"checkbox\",\"label\":\"pink noise\",\"address\":\"/Audio_Tester/pink_noise\",\"index\":\"262204\"},{\"type\":\"checkbox\",\"label\":\"sine wave\",\"address\":\"/Audio_Tester/sine_wave\",\"index\":\"262164\"},{\"type\":\"checkbox\",\"label\":\"white noise\",\"address\":\"/Audio_Tester/white_noise\",\"index\":\"262188\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 8))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		(local $re_i0 i32)
		(local $re_i2 i32)
		(set_local $re_i2 (i32.const 0))
		(set_local $re_i0 (i32.const 0))
		(set_local $re_i0 (i32.const 0))
		(loop $for-in-re_i0 
			(block $for-out-re_i0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 262220) (i32.shl (get_local $re_i0) (i32.const 2)))) (i32.const 0))
				(set_local $re_i0 (i32.add (get_local $re_i0) (i32.const 1)))
				(if (i32.lt_s (get_local $re_i0) (i32.const 2)) (br $for-in-re_i0) (br $for-out-re_i0))
				
			)
		)
		
		(set_local $re_i2 (i32.const 0))
		(loop $for-in-re_i2 
			(block $for-out-re_i2 
				(i32.store (i32.add (get_local $dsp) (i32.const 262220)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 262224))) (i32.const 1)))
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $re_i2) (i32.const 2)))) (call $sinf (f32.mul (f32.const 9.58738019e-05) (f32.convert_s/i32 (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 262220))) (i32.const -1))))))
				(i32.store (i32.add (get_local $dsp) (i32.const 262224)) (i32.load (i32.add (get_local $dsp) (i32.const 262220))))
				(set_local $re_i2 (i32.add (get_local $re_i2) (i32.const 1)))
				(if (i32.lt_s (get_local $re_i2) (i32.const 65537)) (br $for-in-re_i2) (br $for-out-re_i2))
				
			)
		)
		
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 262168)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 262172)) (f32.div (f32.const 1.) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 262168))))))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 262148)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 262152)) (f32.const -96.))
		(f32.store (i32.add (get_local $dsp) (i32.const 262164)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 262176)) (f32.const 1000.))
		(f32.store (i32.add (get_local $dsp) (i32.const 262188)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 262204)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 262156) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 262180) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 262192) (i32.shl (get_local $l3) (i32.const 2)))) (i32.const 0))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 3)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 262208) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 3)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 262168))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $output2 i32)
		(local $output3 i32)
		(local $output4 i32)
		(local $output5 i32)
		(local $output6 i32)
		(local $output7 i32)
		(local $fSlow0 f32)
		(local $iSlow1 i32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $fSlow5 f32)
		(local $fSlow6 f32)
		(local $iSlow7 i32)
		(local $iSlow8 i32)
		(local $iSlow9 i32)
		(local $iSlow10 i32)
		(local $iSlow11 i32)
		(local $iSlow12 i32)
		(local $iSlow13 i32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $iTemp1 i32)
		(local $fTemp2 f32)
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $output2 (i32.const 0))
		(set_local $output3 (i32.const 0))
		(set_local $output4 (i32.const 0))
		(set_local $output5 (i32.const 0))
		(set_local $output6 (i32.const 0))
		(set_local $output7 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $iSlow1 (i32.const 0))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $fSlow5 (f32.const 0.))
		(set_local $fSlow6 (f32.const 0.))
		(set_local $iSlow7 (i32.const 0))
		(set_local $iSlow8 (i32.const 0))
		(set_local $iSlow9 (i32.const 0))
		(set_local $iSlow10 (i32.const 0))
		(set_local $iSlow11 (i32.const 0))
		(set_local $iSlow12 (i32.const 0))
		(set_local $iSlow13 (i32.const 0))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $iTemp1 (i32.const 0))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $output2 (i32.load (i32.add (get_local $outputs) (i32.const 8))))
		(set_local $output3 (i32.load (i32.add (get_local $outputs) (i32.const 12))))
		(set_local $output4 (i32.load (i32.add (get_local $outputs) (i32.const 16))))
		(set_local $output5 (i32.load (i32.add (get_local $outputs) (i32.const 20))))
		(set_local $output6 (i32.load (i32.add (get_local $outputs) (i32.const 24))))
		(set_local $output7 (i32.load (i32.add (get_local $outputs) (i32.const 28))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 262148))))
		(set_local $iSlow1 (f32.eq (get_local $fSlow0) (f32.const 0.)))
		(set_local $fSlow2 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 262152)))))))
		(set_local $fSlow3 (f32.load (i32.add (get_local $dsp) (i32.const 262164))))
		(set_local $fSlow4 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 262172))) (f32.load (i32.add (get_local $dsp) (i32.const 262176)))))
		(set_local $fSlow5 (f32.mul (f32.const 4.65661287e-10) (f32.load (i32.add (get_local $dsp) (i32.const 262188)))))
		(set_local $fSlow6 (f32.mul (f32.const 10.) (f32.load (i32.add (get_local $dsp) (i32.const 262204)))))
		(set_local $iSlow7 (f32.eq (get_local $fSlow0) (f32.const 1.)))
		(set_local $iSlow8 (f32.eq (get_local $fSlow0) (f32.const 2.)))
		(set_local $iSlow9 (f32.eq (get_local $fSlow0) (f32.const 3.)))
		(set_local $iSlow10 (f32.eq (get_local $fSlow0) (f32.const 4.)))
		(set_local $iSlow11 (f32.eq (get_local $fSlow0) (f32.const 5.)))
		(set_local $iSlow12 (f32.eq (get_local $fSlow0) (f32.const 6.)))
		(set_local $iSlow13 (f32.eq (get_local $fSlow0) (f32.const 7.)))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 262156)) (f32.add (get_local $fSlow2) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 262160))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 262180)) (f32.add (get_local $fSlow4) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.const 262184))) (f32.floor (f32.add (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 262184))))))))
				(set_local $fTemp0 (f32.mul (f32.const 65536.) (f32.load (i32.add (get_local $dsp) (i32.const 262180)))))
				(set_local $iTemp1 (i32.trunc_s/f32 (get_local $fTemp0)))
				(i32.store (i32.add (get_local $dsp) (i32.const 262192)) (i32.add (i32.mul (i32.const 1103515245) (i32.load (i32.add (get_local $dsp) (i32.const 262196)))) (i32.const 12345)))
				(f32.store (i32.add (get_local $dsp) (i32.const 262208)) (f32.sub (f32.add (f32.mul (f32.const 6.90678287e-12) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 262200))))) (f32.add (f32.mul (f32.const 1.80116081) (f32.load (i32.add (get_local $dsp) (i32.const 262212)))) (f32.mul (f32.const 2.30852802e-11) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 262192))))))) (f32.add (f32.mul (f32.const 0.802577376) (f32.load (i32.add (get_local $dsp) (i32.const 262216)))) (f32.mul (f32.const 2.93626512e-11) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 262196))))))))
				(set_local $fTemp2 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 262156))) (f32.add (f32.add (f32.mul (get_local $fSlow3) (f32.add (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $iTemp1) (i32.const 2))))) (f32.mul (f32.sub (get_local $fTemp0) (f32.floor (get_local $fTemp0))) (f32.sub (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (i32.add (get_local $iTemp1) (i32.const 1)) (i32.const 2))))) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 0) (i32.shl (get_local $iTemp1) (i32.const 2))))))))) (f32.mul (get_local $fSlow5) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 262192)))))) (f32.mul (get_local $fSlow6) (f32.load (i32.add (get_local $dsp) (i32.const 262208)))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow1)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow7)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output2) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow8)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output3) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow9)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output4) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow10)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output5) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow11)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output6) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow12)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $output7) (get_local $i)) (f32.mul (f32.convert_s/i32 (get_local $iSlow13)) (get_local $fTemp2)))
				(f32.store (i32.add (get_local $dsp) (i32.const 262160)) (f32.load (i32.add (get_local $dsp) (i32.const 262156))))
				(f32.store (i32.add (get_local $dsp) (i32.const 262184)) (f32.load (i32.add (get_local $dsp) (i32.const 262180))))
				(i32.store (i32.add (get_local $dsp) (i32.const 262200)) (i32.load (i32.add (get_local $dsp) (i32.const 262196))))
				(i32.store (i32.add (get_local $dsp) (i32.const 262196)) (i32.load (i32.add (get_local $dsp) (i32.const 262192))))
				(f32.store (i32.add (get_local $dsp) (i32.const 262216)) (f32.load (i32.add (get_local $dsp) (i32.const 262212))))
				(f32.store (i32.add (get_local $dsp) (i32.const 262212)) (f32.load (i32.add (get_local $dsp) (i32.const 262208))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
