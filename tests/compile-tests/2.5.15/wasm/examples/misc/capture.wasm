
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"capture\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"4194352\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"license\":\"BSD\"},{\"name\":\"capture\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Audio Capture\",\"items\":[{\"type\":\"button\",\"label\":\"Capture\",\"address\":\"/Audio_Capture/Capture\",\"index\":\"0\"},{\"type\":\"hslider\",\"label\":\"level (db)\",\"address\":\"/Audio_Capture/level_(db)\",\"index\":\"4194336\",\"init\":\"0\",\"min\":\"-96\",\"max\":\"4\",\"step\":\"0.1\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 4194348)) (get_local $samplingFreq))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 4194336)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 1048576)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 4194312) (i32.shl (get_local $l1) (i32.const 2)))) (i32.const 0))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 4194320) (i32.shl (get_local $l2) (i32.const 2)))) (i32.const 0))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4194328) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4194340) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 4194348))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $iSlow2 i32)
		(local $fSlow3 f32)
		(local $i i32)
		(local $tmp_in0 i32)
		(local $tmp_in1 i32)
		(set_local $input0 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $iSlow2 (i32.const 0))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $tmp_in0 (i32.const 0))
		(set_local $tmp_in1 (i32.const 0))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 0))))
		(set_local $fSlow1 (f32.sub (f32.const 1.) (get_local $fSlow0)))
		(set_local $iSlow2 (i32.trunc_s/f32 (get_local $fSlow0)))
		(set_local $fSlow3 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 4194336)))))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (i32.and (i32.load (i32.add (get_local $dsp) (i32.const 4))) (i32.const 1048575)) (i32.const 2)))) (f32.add (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 4194332)))) (f32.mul (get_local $fSlow0) (f32.load (i32.add (get_local $input0) (get_local $i))))))
				(i32.store (i32.add (get_local $dsp) (i32.const 4194312)) (get_local $iSlow2))
				(i32.store (i32.add (get_local $dsp) (i32.const 4194320)) (i32.mul (i32.add (get_local $iSlow2) (i32.load (i32.add (get_local $dsp) (i32.const 4194324)))) (i32.le_s (i32.sub (get_local $iSlow2) (i32.load (i32.add (get_local $dsp) (i32.const 4194316)))) (i32.const 0))))
				(set_local $tmp_in0 (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 4194320))) (i32.const -1)))
				(set_local $tmp_in1 (select (get_local $tmp_in0) (i32.const 0) (i32.lt_s (i32.const 0) (get_local $tmp_in0))))
				(f32.store (i32.add (get_local $dsp) (i32.const 4194328)) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 8) (i32.shl (i32.and (i32.sub (i32.load (i32.add (get_local $dsp) (i32.const 4))) (select (i32.const 524288) (get_local $tmp_in1) (i32.lt_s (i32.const 524288) (get_local $tmp_in1)))) (i32.const 1048575)) (i32.const 2))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 4194340)) (f32.add (get_local $fSlow3) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 4194344))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 4194328))) (f32.load (i32.add (get_local $dsp) (i32.const 4194340)))))
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.add (i32.load (i32.add (get_local $dsp) (i32.const 4))) (i32.const 1)))
				(i32.store (i32.add (get_local $dsp) (i32.const 4194316)) (i32.load (i32.add (get_local $dsp) (i32.const 4194312))))
				(i32.store (i32.add (get_local $dsp) (i32.const 4194324)) (i32.load (i32.add (get_local $dsp) (i32.const 4194320))))
				(f32.store (i32.add (get_local $dsp) (i32.const 4194332)) (f32.load (i32.add (get_local $dsp) (i32.const 4194328))))
				(f32.store (i32.add (get_local $dsp) (i32.const 4194344)) (f32.load (i32.add (get_local $dsp) (i32.const 4194340))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
