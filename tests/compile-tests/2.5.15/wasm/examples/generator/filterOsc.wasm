
(module
	(import $powf "env" "_powf" (param f32 f32) (result f32))
	(import $expf "env" "_expf" (param f32) (result f32))
	(import $sinf "env" "_sinf" (param f32) (result f32))
	(import $cosf "env" "_cosf" (param f32) (result f32))
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"filterOSC\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"68\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Simple application demoing filter based oscillators.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"filterOSC\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"SINE WAVE OSCILLATOR oscrs\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"Sine oscillator based   on 2D vector rotation\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Amplitude\",\"address\":\"/SINE_WAVE_OSCILLATOR_oscrs/Amplitude\",\"index\":\"0\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Sawtooth waveform   amplitude\"},{\"unit\":\"dB\"}],\"init\":\"-20\",\"min\":\"-120\",\"max\":\"10\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Frequency\",\"address\":\"/SINE_WAVE_OSCILLATOR_oscrs/Frequency\",\"index\":\"32\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Sine wave frequency as a Piano Key (PK) number (A440 = 49 PK)\"},{\"unit\":\"PK\"}],\"init\":\"49\",\"min\":\"1\",\"max\":\"88\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Portamento\",\"address\":\"/SINE_WAVE_OSCILLATOR_oscrs/Portamento\",\"index\":\"40\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"tooltip\":\"Portamento (frequency-glide) time-constant in seconds\"},{\"unit\":\"sec\"}],\"init\":\"0.1\",\"min\":\"0.001\",\"max\":\"10\",\"step\":\"0.001\"}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 0))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 1))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 20)) (get_local $samplingFreq))
		(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.min (f32.const 192000.) (f32.max (f32.const 1.) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 20)))))))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.div (f32.const 6.28318548) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		(f32.store (i32.add (get_local $dsp) (i32.const 36)) (f32.div (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 24)))))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const -20.))
		(f32.store (i32.add (get_local $dsp) (i32.const 32)) (f32.const 49.))
		(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.const 0.100000001))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (get_local $l0) (i32.const 2)))) (i32.const 0))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 12) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 44) (i32.shl (get_local $l2) (i32.const 2)))) (f32.const 0.))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 52) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 2)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 60) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 20))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $output0 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $i i32)
		(local $fTemp0 f32)
		(local $fTemp1 f32)
		(local $fTemp2 f32)
		(set_local $output0 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $fTemp0 (f32.const 0.))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $fTemp2 (f32.const 0.))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $fSlow0 (f32.mul (f32.const 0.00100000005) (call $powf (f32.const 10.) (f32.mul (f32.const 0.0500000007) (f32.load (i32.add (get_local $dsp) (i32.const 0)))))))
		(set_local $fSlow1 (call $expf (f32.sub (f32.const 0.) (f32.div (f32.load (i32.add (get_local $dsp) (i32.const 36))) (f32.load (i32.add (get_local $dsp) (i32.const 40)))))))
		(set_local $fSlow2 (f32.mul (f32.const 440.) (f32.mul (call $powf (f32.const 2.) (f32.mul (f32.const 0.0833333358) (f32.add (f32.load (i32.add (get_local $dsp) (i32.const 32))) (f32.const -49.)))) (f32.sub (f32.const 1.) (get_local $fSlow1)))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(i32.store (i32.add (get_local $dsp) (i32.const 4)) (i32.const 1))
				(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.add (get_local $fSlow0) (f32.mul (f32.const 0.999000013) (f32.load (i32.add (get_local $dsp) (i32.const 16))))))
				(f32.store (i32.add (get_local $dsp) (i32.const 44)) (f32.add (get_local $fSlow2) (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $dsp) (i32.const 48))))))
				(set_local $fTemp0 (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 28))) (f32.load (i32.add (get_local $dsp) (i32.const 44)))))
				(set_local $fTemp1 (call $sinf (get_local $fTemp0)))
				(set_local $fTemp2 (call $cosf (get_local $fTemp0)))
				(f32.store (i32.add (get_local $dsp) (i32.const 52)) (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 64))) (get_local $fTemp1)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 56))) (get_local $fTemp2))))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (f32.add (f32.add (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 64))) (get_local $fTemp2)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 56))) (f32.sub (f32.const 0.) (get_local $fTemp1)))) (f32.convert_s/i32 (i32.sub (i32.const 1) (i32.load (i32.add (get_local $dsp) (i32.const 8)))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.mul (f32.load (i32.add (get_local $dsp) (i32.const 12))) (f32.load (i32.add (get_local $dsp) (i32.const 52)))))
				(i32.store (i32.add (get_local $dsp) (i32.const 8)) (i32.load (i32.add (get_local $dsp) (i32.const 4))))
				(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.load (i32.add (get_local $dsp) (i32.const 12))))
				(f32.store (i32.add (get_local $dsp) (i32.const 48)) (f32.load (i32.add (get_local $dsp) (i32.const 44))))
				(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.load (i32.add (get_local $dsp) (i32.const 52))))
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
