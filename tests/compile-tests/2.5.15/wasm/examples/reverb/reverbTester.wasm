
(module
	(export "getNumInputs" (func $getNumInputs))
	(export "getNumOutputs" (func $getNumOutputs))
	(export "getSampleRate" (func $getSampleRate))
	(export "init" (func $init))
	(export "instanceInit" (func $instanceInit))
	(export "instanceConstants" (func $instanceConstants))
	(export "instanceResetUserInterface" (func $instanceResetUserInterface))
	(export "instanceClear" (func $instanceClear))
	(export "setParamValue" (func $setParamValue))
	(export "getParamValue" (func $getParamValue))
	(export "compute" (func $compute))
	(import "env" "memoryBase" (global $memoryBase i32))
	(import "env" "tableBase" (global $tableBase i32))
	(import "env" "memory" (memory $0 1))
	(data (i32.const 0) "{\"name\":\"reverbTester\",\"version\":\"2.5.15\",\"options\":\"wast/wasm, -scal -ftz 0\",\"size\":\"72\",\"inputs\":\"5\",\"outputs\":\"2\",\"meta\":[{\"author\":\"RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Handy test inputs for reverberator demos below.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"reverbTester\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"reverbTester\",\"items\":[{\"type\":\"vgroup\",\"label\":\"Input Config\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Mute Ext Inputs\",\"address\":\"/reverbTester/Input_Config/Mute_Ext_Inputs\",\"index\":\"12\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"When this is checked, the stereo external audio inputs are   disabled (good for hearing the impulse response or pink-noise response alone)\"}]},{\"type\":\"checkbox\",\"label\":\"Pink Noise\",\"address\":\"/reverbTester/Input_Config/Pink_Noise\",\"index\":\"28\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting   the EQ sections)\"}]}]},{\"type\":\"hgroup\",\"label\":\"Impulse Selection\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"button\",\"label\":\"Left\",\"address\":\"/reverbTester/Impulse_Selection/Left\",\"index\":\"16\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Send impulse into LEFT channel\"}]},{\"type\":\"button\",\"label\":\"Center\",\"address\":\"/reverbTester/Impulse_Selection/Center\",\"index\":\"0\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Send impulse into LEFT and RIGHT channels\"}]},{\"type\":\"button\",\"label\":\"Right\",\"address\":\"/reverbTester/Impulse_Selection/Right\",\"index\":\"56\",\"meta\":[{\"3\":\"\"},{\"tooltip\":\"Send impulse into RIGHT channel\"}]}]}]}]}")
	
	(func $min_i (param $v10 i32) (param $v20 i32) (result i32)
		(return (select (get_local $v10) (get_local $v20) (i32.lt_s (get_local $v10) (get_local $v20))))
	)
	(func $max_i (param $v11 i32) (param $v21 i32) (result i32)
		(return (select (get_local $v21) (get_local $v11) (i32.lt_s (get_local $v11) (get_local $v21))))
	)
	(func $getNumInputs (param $dsp i32) (result i32)
		(return (i32.const 5))
	)
	(func $getNumOutputs (param $dsp i32) (result i32)
		(return (i32.const 2))
	)
	(func $classInit (param $dsp i32) (param $samplingFreq i32)
		
	)
	(func $instanceConstants (param $dsp i32) (param $samplingFreq i32)
		(i32.store (i32.add (get_local $dsp) (i32.const 68)) (get_local $samplingFreq))
		
	)
	(func $instanceResetUserInterface (param $dsp i32)
		(f32.store (i32.add (get_local $dsp) (i32.const 0)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 12)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 16)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 28)) (f32.const 0.))
		(f32.store (i32.add (get_local $dsp) (i32.const 56)) (f32.const 0.))
		
	)
	(func $instanceClear (param $dsp i32)
		(local $l0 i32)
		(local $l1 i32)
		(local $l2 i32)
		(local $l3 i32)
		(local $l4 i32)
		(set_local $l0 (i32.const 0))
		(set_local $l1 (i32.const 0))
		(set_local $l2 (i32.const 0))
		(set_local $l3 (i32.const 0))
		(set_local $l4 (i32.const 0))
		(set_local $l0 (i32.const 0))
		(loop $for-in-l0 
			(block $for-out-l0 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 4) (i32.shl (get_local $l0) (i32.const 2)))) (f32.const 0.))
				(set_local $l0 (i32.add (get_local $l0) (i32.const 1)))
				(if (i32.lt_s (get_local $l0) (i32.const 2)) (br $for-in-l0) (br $for-out-l0))
				
			)
		)
		(set_local $l1 (i32.const 0))
		(loop $for-in-l1 
			(block $for-out-l1 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 20) (i32.shl (get_local $l1) (i32.const 2)))) (f32.const 0.))
				(set_local $l1 (i32.add (get_local $l1) (i32.const 1)))
				(if (i32.lt_s (get_local $l1) (i32.const 2)) (br $for-in-l1) (br $for-out-l1))
				
			)
		)
		(set_local $l2 (i32.const 0))
		(loop $for-in-l2 
			(block $for-out-l2 
				(i32.store (i32.add (get_local $dsp) (i32.add (i32.const 32) (i32.shl (get_local $l2) (i32.const 2)))) (i32.const 0))
				(set_local $l2 (i32.add (get_local $l2) (i32.const 1)))
				(if (i32.lt_s (get_local $l2) (i32.const 2)) (br $for-in-l2) (br $for-out-l2))
				
			)
		)
		(set_local $l3 (i32.const 0))
		(loop $for-in-l3 
			(block $for-out-l3 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $l3) (i32.const 2)))) (f32.const 0.))
				(set_local $l3 (i32.add (get_local $l3) (i32.const 1)))
				(if (i32.lt_s (get_local $l3) (i32.const 4)) (br $for-in-l3) (br $for-out-l3))
				
			)
		)
		(set_local $l4 (i32.const 0))
		(loop $for-in-l4 
			(block $for-out-l4 
				(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 60) (i32.shl (get_local $l4) (i32.const 2)))) (f32.const 0.))
				(set_local $l4 (i32.add (get_local $l4) (i32.const 1)))
				(if (i32.lt_s (get_local $l4) (i32.const 2)) (br $for-in-l4) (br $for-out-l4))
				
			)
		)
		
	)
	(func $init (param $dsp i32) (param $samplingFreq i32)
		(call $classInit (get_local $dsp) (get_local $samplingFreq))
		(call $instanceInit (get_local $dsp) (get_local $samplingFreq))
		
	)
	(func $instanceInit (param $dsp i32) (param $samplingFreq i32)
		(call $instanceConstants (get_local $dsp) (get_local $samplingFreq))
		(call $instanceResetUserInterface (get_local $dsp))
		(call $instanceClear (get_local $dsp))
		
	)
	(func $getSampleRate (param $dsp i32) (result i32)
		(return (i32.load (i32.add (get_local $dsp) (i32.const 68))))
	)
	(func $setParamValue (param $dsp i32) (param $index i32) (param $value f32)
		(f32.store 
			(i32.add (get_local $dsp) (get_local $index))
			(get_local $value)
		)
	)
	(func $getParamValue (param $dsp i32) (param $index i32) (result f32)
		(return (f32.load (i32.add (get_local $dsp) (get_local $index))))
	)
	(func $compute (param $dsp i32) (param $count i32) (param $inputs i32) (param $outputs i32)
		(local $input0 i32)
		(local $input1 i32)
		(local $input2 i32)
		(local $input3 i32)
		(local $input4 i32)
		(local $output0 i32)
		(local $output1 i32)
		(local $fSlow0 f32)
		(local $fSlow1 f32)
		(local $fSlow2 f32)
		(local $fSlow3 f32)
		(local $fSlow4 f32)
		(local $i i32)
		(local $iTemp0 i32)
		(local $fTemp1 f32)
		(local $j0 i32)
		(set_local $input0 (i32.const 0))
		(set_local $input1 (i32.const 0))
		(set_local $input2 (i32.const 0))
		(set_local $input3 (i32.const 0))
		(set_local $input4 (i32.const 0))
		(set_local $output0 (i32.const 0))
		(set_local $output1 (i32.const 0))
		(set_local $fSlow0 (f32.const 0.))
		(set_local $fSlow1 (f32.const 0.))
		(set_local $fSlow2 (f32.const 0.))
		(set_local $fSlow3 (f32.const 0.))
		(set_local $fSlow4 (f32.const 0.))
		(set_local $i (i32.const 0))
		(set_local $iTemp0 (i32.const 0))
		(set_local $fTemp1 (f32.const 0.))
		(set_local $j0 (i32.const 3))
		(set_local $input0 (i32.load (i32.add (get_local $inputs) (i32.const 0))))
		(set_local $input1 (i32.load (i32.add (get_local $inputs) (i32.const 4))))
		(set_local $input2 (i32.load (i32.add (get_local $inputs) (i32.const 8))))
		(set_local $input3 (i32.load (i32.add (get_local $inputs) (i32.const 12))))
		(set_local $input4 (i32.load (i32.add (get_local $inputs) (i32.const 16))))
		(set_local $output0 (i32.load (i32.add (get_local $outputs) (i32.const 0))))
		(set_local $output1 (i32.load (i32.add (get_local $outputs) (i32.const 4))))
		(set_local $fSlow0 (f32.load (i32.add (get_local $dsp) (i32.const 0))))
		(set_local $fSlow1 (f32.sub (f32.const 1.) (f32.load (i32.add (get_local $dsp) (i32.const 12)))))
		(set_local $fSlow2 (f32.load (i32.add (get_local $dsp) (i32.const 16))))
		(set_local $fSlow3 (f32.mul (f32.const 0.100000001) (f32.load (i32.add (get_local $dsp) (i32.const 28)))))
		(set_local $fSlow4 (f32.load (i32.add (get_local $dsp) (i32.const 56))))
		(set_local $i (i32.const 0))
		(loop $for-in-i 
			(block $for-out-i 
				(f32.store (i32.add (get_local $dsp) (i32.const 4)) (get_local $fSlow0))
				(set_local $iTemp0 (f32.gt (f32.sub (get_local $fSlow0) (f32.load (i32.add (get_local $dsp) (i32.const 8)))) (f32.const 0.)))
				(f32.store (i32.add (get_local $dsp) (i32.const 20)) (get_local $fSlow2))
				(i32.store (i32.add (get_local $dsp) (i32.const 32)) (i32.add (i32.mul (i32.const 1103515245) (i32.load (i32.add (get_local $dsp) (i32.const 36)))) (i32.const 12345)))
				(f32.store (i32.add (get_local $dsp) (i32.const 40)) (f32.sub (f32.add (f32.mul (f32.const 0.522189379) (f32.load (i32.add (get_local $dsp) (i32.const 52)))) (f32.add (f32.mul (f32.const 4.65661287e-10) (f32.convert_s/i32 (i32.load (i32.add (get_local $dsp) (i32.const 32))))) (f32.mul (f32.const 2.49495602) (f32.load (i32.add (get_local $dsp) (i32.const 44)))))) (f32.mul (f32.const 2.0172658) (f32.load (i32.add (get_local $dsp) (i32.const 48))))))
				(set_local $fTemp1 (f32.mul (get_local $fSlow3) (f32.sub (f32.add (f32.mul (f32.const 0.0499220341) (f32.load (i32.add (get_local $dsp) (i32.const 40)))) (f32.mul (f32.const 0.0506126992) (f32.load (i32.add (get_local $dsp) (i32.const 48))))) (f32.add (f32.mul (f32.const 0.0959935337) (f32.load (i32.add (get_local $dsp) (i32.const 44)))) (f32.mul (f32.const 0.00440878607) (f32.load (i32.add (get_local $dsp) (i32.const 52))))))))
				(f32.store (i32.add (get_local $output0) (get_local $i)) (f32.add (f32.add (f32.convert_s/i32 (get_local $iTemp0)) (f32.add (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $input3) (get_local $i)))) (f32.convert_s/i32 (f32.gt (f32.sub (get_local $fSlow2) (f32.load (i32.add (get_local $dsp) (i32.const 24)))) (f32.const 0.))))) (get_local $fTemp1)))
				(f32.store (i32.add (get_local $dsp) (i32.const 60)) (get_local $fSlow4))
				(f32.store (i32.add (get_local $output1) (get_local $i)) (f32.add (f32.convert_s/i32 (f32.gt (f32.sub (get_local $fSlow4) (f32.load (i32.add (get_local $dsp) (i32.const 64)))) (f32.const 0.))) (f32.add (f32.mul (get_local $fSlow1) (f32.load (i32.add (get_local $input4) (get_local $i)))) (f32.add (f32.convert_s/i32 (get_local $iTemp0)) (get_local $fTemp1)))))
				(f32.store (i32.add (get_local $dsp) (i32.const 8)) (f32.load (i32.add (get_local $dsp) (i32.const 4))))
				(f32.store (i32.add (get_local $dsp) (i32.const 24)) (f32.load (i32.add (get_local $dsp) (i32.const 20))))
				(i32.store (i32.add (get_local $dsp) (i32.const 36)) (i32.load (i32.add (get_local $dsp) (i32.const 32))))
				(set_local $j0 (i32.const 3))
				(loop $for-in-j0 
					(block $for-out-j0 
						(f32.store (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (get_local $j0) (i32.const 2)))) (f32.load (i32.add (get_local $dsp) (i32.add (i32.const 40) (i32.shl (i32.sub (get_local $j0) (i32.const 1)) (i32.const 2))))))
						(set_local $j0 (i32.sub (get_local $j0) (i32.const 1)))
						(if (i32.gt_s (get_local $j0) (i32.const 0)) (br $for-in-j0) (br $for-out-j0))
						
					)
				)
				(f32.store (i32.add (get_local $dsp) (i32.const 64)) (f32.load (i32.add (get_local $dsp) (i32.const 60))))
				(set_local $i (i32.add (get_local $i) (i32.const 4)))
				(if (i32.lt_s (get_local $i) (i32.mul (i32.const 4) (get_local $count))) (br $for-in-i) (br $for-out-i))
				
			)
		)
		
	)
	
)
