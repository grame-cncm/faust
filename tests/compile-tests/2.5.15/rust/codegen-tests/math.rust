
pub fn rintf(dummy0: f32) -> f32;


pub struct mydsp {
	
	fDummy: f32,
	iRec0: [i32;2],
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iRec0: [0;2],
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("math.lib/author", "GRAME");
		m.declare("math.lib/copyright", "GRAME");
		m.declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("math.lib/license", "LGPL with exception");
		m.declare("math.lib/name", "Math Library");
		m.declare("math.lib/version", "1.0");
		m.declare("music.lib/author", "GRAME");
		m.declare("music.lib/copyright", "GRAME");
		m.declare("music.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("music.lib/license", "LGPL with exception");
		m.declare("music.lib/name", "Music Library");
		m.declare("music.lib/version", "1.0");
		m.declare("name", "math");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		6
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("math");
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			self.iRec0[0] = (self.iRec0[1] + 1);
			let mut iTemp0: i32 = (self.iRec0[0] + -1);
			outputs[0][i as usize] = ((f32::sqrt((iTemp0 as f32)) + (f32::tan((iTemp0 as f32)) + (rintf((iTemp0 as f32)) + (f32::sin((iTemp0 as f32)) + (manual((iTemp0 as f32), (inputs[5][i as usize] as f32)) + (f32::powf((inputs[4][i as usize] as f32), (iTemp0 as f32)) + (f32::min((iTemp0 as f32), (inputs[3][i as usize] as f32)) + (f32::log((iTemp0 as f32)) + (f32::log10((iTemp0 as f32)) + ((((((((((i32::abs(iTemp0) as f32) + f32::asin((iTemp0 as f32))) + f32::atan2((iTemp0 as f32), (inputs[0][i as usize] as f32))) + f32::atan((iTemp0 as f32))) + f32::ceil((iTemp0 as f32))) + f32::cos((iTemp0 as f32))) + f32::exp((iTemp0 as f32))) + f32::floor((iTemp0 as f32))) + f32::fmod((iTemp0 as f32), (inputs[1][i as usize] as f32))) + f32::max((iTemp0 as f32), (inputs[2][i as usize] as f32)))))))))))) as f32);
			self.iRec0[1] = self.iRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

