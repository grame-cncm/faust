


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("name", "path2d");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openTabBox("toto");
		ui_interface.openVerticalBox("foo");
		ui_interface.addHorizontalSlider("slid2", &mut self.fHslider0, 0.0, 0.0, 1.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut i: i32 = 0;
		loop {
			outputs[0][i as usize] = (fSlow0 as f32);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

