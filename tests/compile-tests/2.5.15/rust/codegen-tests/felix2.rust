


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	IOTA: i32,
	fVec0: [f32;512],
	fVec1: [f32;512],
	fVec2: [f32;512],
	fVec3: [f32;512],
	fVec4: [f32;512],
	fVec5: [f32;512],
	fRec0: [f32;2],
	fVbargraph0: f32,
	fRec1: [f32;2],
	fVbargraph1: f32,
	fRec2: [f32;2],
	fVbargraph2: f32,
	fRec3: [f32;2],
	fVbargraph3: f32,
	fRec4: [f32;2],
	fVbargraph4: f32,
	fRec5: [f32;2],
	fVbargraph5: f32,
	fRec6: [f32;2],
	fVbargraph6: f32,
	fRec7: [f32;2],
	fVbargraph7: f32,
	fRec8: [f32;2],
	fVbargraph8: f32,
	fRec9: [f32;2],
	fVbargraph9: f32,
	fRec10: [f32;2],
	fVbargraph10: f32,
	fRec11: [f32;2],
	fVbargraph11: f32,
	fRec12: [f32;2],
	fVbargraph12: f32,
	fRec13: [f32;2],
	fVbargraph13: f32,
	fRec14: [f32;2],
	fVbargraph14: f32,
	fRec15: [f32;2],
	fVbargraph15: f32,
	fRec16: [f32;2],
	fVbargraph16: f32,
	fRec17: [f32;2],
	fVbargraph17: f32,
	fRec18: [f32;2],
	fVbargraph18: f32,
	fRec19: [f32;2],
	fVbargraph19: f32,
	fRec20: [f32;2],
	fVbargraph20: f32,
	fRec21: [f32;2],
	fVbargraph21: f32,
	fRec22: [f32;2],
	fVbargraph22: f32,
	fRec23: [f32;2],
	fVbargraph23: f32,
	fRec24: [f32;2],
	fVbargraph24: f32,
	fRec25: [f32;2],
	fVbargraph25: f32,
	fRec26: [f32;2],
	fVbargraph26: f32,
	fRec27: [f32;2],
	fVbargraph27: f32,
	fRec28: [f32;2],
	fVbargraph28: f32,
	fRec29: [f32;2],
	fVbargraph29: f32,
	fRec30: [f32;2],
	fVbargraph30: f32,
	fRec31: [f32;2],
	fVbargraph31: f32,
	fRec32: [f32;2],
	fVbargraph32: f32,
	fRec33: [f32;2],
	fVbargraph33: f32,
	fRec34: [f32;2],
	fVbargraph34: f32,
	fRec35: [f32;2],
	fVbargraph35: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			IOTA: 0,
			fVec0: [0.0;512],
			fVec1: [0.0;512],
			fVec2: [0.0;512],
			fVec3: [0.0;512],
			fVec4: [0.0;512],
			fVec5: [0.0;512],
			fRec0: [0.0;2],
			fVbargraph0: 0.0,
			fRec1: [0.0;2],
			fVbargraph1: 0.0,
			fRec2: [0.0;2],
			fVbargraph2: 0.0,
			fRec3: [0.0;2],
			fVbargraph3: 0.0,
			fRec4: [0.0;2],
			fVbargraph4: 0.0,
			fRec5: [0.0;2],
			fVbargraph5: 0.0,
			fRec6: [0.0;2],
			fVbargraph6: 0.0,
			fRec7: [0.0;2],
			fVbargraph7: 0.0,
			fRec8: [0.0;2],
			fVbargraph8: 0.0,
			fRec9: [0.0;2],
			fVbargraph9: 0.0,
			fRec10: [0.0;2],
			fVbargraph10: 0.0,
			fRec11: [0.0;2],
			fVbargraph11: 0.0,
			fRec12: [0.0;2],
			fVbargraph12: 0.0,
			fRec13: [0.0;2],
			fVbargraph13: 0.0,
			fRec14: [0.0;2],
			fVbargraph14: 0.0,
			fRec15: [0.0;2],
			fVbargraph15: 0.0,
			fRec16: [0.0;2],
			fVbargraph16: 0.0,
			fRec17: [0.0;2],
			fVbargraph17: 0.0,
			fRec18: [0.0;2],
			fVbargraph18: 0.0,
			fRec19: [0.0;2],
			fVbargraph19: 0.0,
			fRec20: [0.0;2],
			fVbargraph20: 0.0,
			fRec21: [0.0;2],
			fVbargraph21: 0.0,
			fRec22: [0.0;2],
			fVbargraph22: 0.0,
			fRec23: [0.0;2],
			fVbargraph23: 0.0,
			fRec24: [0.0;2],
			fVbargraph24: 0.0,
			fRec25: [0.0;2],
			fVbargraph25: 0.0,
			fRec26: [0.0;2],
			fVbargraph26: 0.0,
			fRec27: [0.0;2],
			fVbargraph27: 0.0,
			fRec28: [0.0;2],
			fVbargraph28: 0.0,
			fRec29: [0.0;2],
			fVbargraph29: 0.0,
			fRec30: [0.0;2],
			fVbargraph30: 0.0,
			fRec31: [0.0;2],
			fVbargraph31: 0.0,
			fRec32: [0.0;2],
			fVbargraph32: 0.0,
			fRec33: [0.0;2],
			fVbargraph33: 0.0,
			fRec34: [0.0;2],
			fVbargraph34: 0.0,
			fRec35: [0.0;2],
			fVbargraph35: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("math.lib/author", "GRAME");
		m.declare("math.lib/copyright", "GRAME");
		m.declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("math.lib/license", "LGPL with exception");
		m.declare("math.lib/name", "Math Library");
		m.declare("math.lib/version", "1.0");
		m.declare("music.lib/author", "GRAME");
		m.declare("music.lib/copyright", "GRAME");
		m.declare("music.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("music.lib/license", "LGPL with exception");
		m.declare("music.lib/name", "Music Library");
		m.declare("music.lib/version", "1.0");
		m.declare("name", "felix2");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		6
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		36
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			8 => {
				rate = 1;
				
			},
			9 => {
				rate = 1;
				
			},
			10 => {
				rate = 1;
				
			},
			11 => {
				rate = 1;
				
			},
			12 => {
				rate = 1;
				
			},
			13 => {
				rate = 1;
				
			},
			14 => {
				rate = 1;
				
			},
			15 => {
				rate = 1;
				
			},
			16 => {
				rate = 1;
				
			},
			17 => {
				rate = 1;
				
			},
			18 => {
				rate = 1;
				
			},
			19 => {
				rate = 1;
				
			},
			20 => {
				rate = 1;
				
			},
			21 => {
				rate = 1;
				
			},
			22 => {
				rate = 1;
				
			},
			23 => {
				rate = 1;
				
			},
			24 => {
				rate = 1;
				
			},
			25 => {
				rate = 1;
				
			},
			26 => {
				rate = 1;
				
			},
			27 => {
				rate = 1;
				
			},
			28 => {
				rate = 1;
				
			},
			29 => {
				rate = 1;
				
			},
			30 => {
				rate = 1;
				
			},
			31 => {
				rate = 1;
				
			},
			32 => {
				rate = 1;
				
			},
			33 => {
				rate = 1;
				
			},
			34 => {
				rate = 1;
				
			},
			35 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		self.IOTA = 0;
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 512) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fVec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 512) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 512) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec3[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 512) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 512) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec5[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 512) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec1[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec2[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec3[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec4[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec5[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec6[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec7[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec8[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec9[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec10[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec11[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec12[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec13[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec14[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec15[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec16[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec17[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec18[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec19[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec20[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec21[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec22[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec23[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec24[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec25[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec26[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec27[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec28[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec29[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec30[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec31[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec32[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec33[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 2) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec34[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec35[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (96.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("felix2");
		ui_interface.openHorizontalBox("ctrl   0");
		ui_interface.addVerticalBargraph("ctrl  0", &mut self.fVbargraph0, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl  1", &mut self.fVbargraph1, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl  2", &mut self.fVbargraph2, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl  3", &mut self.fVbargraph3, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl  4", &mut self.fVbargraph4, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl  5", &mut self.fVbargraph5, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("ctrl   1");
		ui_interface.addVerticalBargraph("ctrl 10", &mut self.fVbargraph6, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 11", &mut self.fVbargraph7, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 12", &mut self.fVbargraph8, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 13", &mut self.fVbargraph9, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 14", &mut self.fVbargraph10, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 15", &mut self.fVbargraph11, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("ctrl   2");
		ui_interface.addVerticalBargraph("ctrl 20", &mut self.fVbargraph12, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 21", &mut self.fVbargraph13, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 22", &mut self.fVbargraph14, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 23", &mut self.fVbargraph15, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 24", &mut self.fVbargraph16, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 25", &mut self.fVbargraph17, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("ctrl   3");
		ui_interface.addVerticalBargraph("ctrl 30", &mut self.fVbargraph18, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 31", &mut self.fVbargraph19, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 32", &mut self.fVbargraph20, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 33", &mut self.fVbargraph21, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 34", &mut self.fVbargraph22, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 35", &mut self.fVbargraph23, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("ctrl   4");
		ui_interface.addVerticalBargraph("ctrl 40", &mut self.fVbargraph24, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 41", &mut self.fVbargraph25, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 42", &mut self.fVbargraph26, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 43", &mut self.fVbargraph27, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 44", &mut self.fVbargraph28, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 45", &mut self.fVbargraph29, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("ctrl   5");
		ui_interface.addVerticalBargraph("ctrl 50", &mut self.fVbargraph30, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 51", &mut self.fVbargraph31, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 52", &mut self.fVbargraph32, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 53", &mut self.fVbargraph33, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 54", &mut self.fVbargraph34, 0.0, 1.0);
		ui_interface.addVerticalBargraph("ctrl 55", &mut self.fVbargraph35, 0.0, 1.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			self.fVec0[(self.IOTA & 511) as usize] = (inputs[0][i as usize] as f32);
			let mut fTemp0: f32 = (inputs[1][i as usize] as f32);
			self.fVec1[(self.IOTA & 511) as usize] = fTemp0;
			let mut fTemp1: f32 = (inputs[2][i as usize] as f32);
			self.fVec2[(self.IOTA & 511) as usize] = fTemp1;
			let mut fTemp2: f32 = (inputs[3][i as usize] as f32);
			self.fVec3[(self.IOTA & 511) as usize] = fTemp2;
			let mut fTemp3: f32 = (inputs[4][i as usize] as f32);
			self.fVec4[(self.IOTA & 511) as usize] = fTemp3;
			let mut fTemp4: f32 = (inputs[5][i as usize] as f32);
			self.fVec5[(self.IOTA & 511) as usize] = fTemp4;
			self.fRec0[0] = f32::max((self.fRec0[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 244) & 511) as usize]) + self.fVec2[((self.IOTA - 233) & 511) as usize]) + self.fVec3[((self.IOTA - 221) & 511) as usize]) + self.fVec4[((self.IOTA - 209) & 511) as usize]) + self.fVec5[((self.IOTA - 197) & 511) as usize])));
			self.fVbargraph0 = (self.fRec0[0] as f32);
			outputs[0][i as usize] = (self.fVbargraph0 as f32);
			let mut fTemp5: f32 = (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 246) & 511) as usize]);
			self.fRec1[0] = f32::max((self.fRec1[1] - self.fConst0), f32::abs(((((fTemp5 + self.fVec2[((self.IOTA - 236) & 511) as usize]) + self.fVec3[((self.IOTA - 225) & 511) as usize]) + self.fVec4[((self.IOTA - 215) & 511) as usize]) + self.fVec5[((self.IOTA - 204) & 511) as usize])));
			self.fVbargraph1 = (self.fRec1[0] as f32);
			outputs[1][i as usize] = (self.fVbargraph1 as f32);
			self.fRec2[0] = f32::max((self.fRec2[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 247) & 511) as usize]) + self.fVec2[((self.IOTA - 239) & 511) as usize]) + self.fVec3[((self.IOTA - 230) & 511) as usize]) + self.fVec4[((self.IOTA - 220) & 511) as usize]) + self.fVec5[((self.IOTA - 211) & 511) as usize])));
			self.fVbargraph2 = (self.fRec2[0] as f32);
			outputs[2][i as usize] = (self.fVbargraph2 as f32);
			let mut fTemp6: f32 = (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 249) & 511) as usize]);
			let mut fTemp7: f32 = (fTemp6 + self.fVec2[((self.IOTA - 241) & 511) as usize]);
			self.fRec3[0] = f32::max((self.fRec3[1] - self.fConst0), f32::abs((((fTemp7 + self.fVec3[((self.IOTA - 233) & 511) as usize]) + self.fVec4[((self.IOTA - 225) & 511) as usize]) + self.fVec5[((self.IOTA - 217) & 511) as usize])));
			self.fVbargraph3 = (self.fRec3[0] as f32);
			outputs[3][i as usize] = (self.fVbargraph3 as f32);
			let mut fTemp8: f32 = (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 250) & 511) as usize]);
			self.fRec4[0] = f32::max((self.fRec4[1] - self.fConst0), f32::abs(((((fTemp8 + self.fVec2[((self.IOTA - 243) & 511) as usize]) + self.fVec3[((self.IOTA - 236) & 511) as usize]) + self.fVec4[((self.IOTA - 229) & 511) as usize]) + self.fVec5[((self.IOTA - 222) & 511) as usize])));
			self.fVbargraph4 = (self.fRec4[0] as f32);
			outputs[4][i as usize] = (self.fVbargraph4 as f32);
			self.fRec5[0] = f32::max((self.fRec5[1] - self.fConst0), f32::abs(((((fTemp8 + self.fVec2[((self.IOTA - 245) & 511) as usize]) + self.fVec3[((self.IOTA - 239) & 511) as usize]) + self.fVec4[((self.IOTA - 232) & 511) as usize]) + self.fVec5[((self.IOTA - 225) & 511) as usize])));
			self.fVbargraph5 = (self.fRec5[0] as f32);
			outputs[5][i as usize] = (self.fVbargraph5 as f32);
			self.fRec6[0] = f32::max((self.fRec6[1] - self.fConst0), f32::abs(((((fTemp5 + self.fVec2[((self.IOTA - 235) & 511) as usize]) + self.fVec3[((self.IOTA - 224) & 511) as usize]) + self.fVec4[((self.IOTA - 213) & 511) as usize]) + self.fVec5[((self.IOTA - 201) & 511) as usize])));
			self.fVbargraph6 = (self.fRec6[0] as f32);
			outputs[6][i as usize] = (self.fVbargraph6 as f32);
			self.fRec7[0] = f32::max((self.fRec7[1] - self.fConst0), f32::abs((self.fVec4[((self.IOTA - 221) & 511) as usize] + (self.fVec1[((self.IOTA - 248) & 511) as usize] + (self.fVec5[((self.IOTA - 211) & 511) as usize] + (self.fVec3[((self.IOTA - 230) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec2[((self.IOTA - 239) & 511) as usize])))))));
			self.fVbargraph7 = (self.fRec7[0] as f32);
			outputs[7][i as usize] = (self.fVbargraph7 as f32);
			self.fRec8[0] = f32::max((self.fRec8[1] - self.fConst0), f32::abs(((((fTemp6 + self.fVec2[((self.IOTA - 243) & 511) as usize]) + self.fVec3[((self.IOTA - 235) & 511) as usize]) + self.fVec4[((self.IOTA - 227) & 511) as usize]) + self.fVec5[((self.IOTA - 219) & 511) as usize])));
			self.fVbargraph8 = (self.fRec8[0] as f32);
			outputs[8][i as usize] = (self.fVbargraph8 as f32);
			self.fRec9[0] = f32::max((self.fRec9[1] - self.fConst0), f32::abs((self.fVec1[((self.IOTA - 251) & 511) as usize] + (self.fVec5[((self.IOTA - 225) & 511) as usize] + (self.fVec4[((self.IOTA - 232) & 511) as usize] + (self.fVec3[((self.IOTA - 239) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec2[((self.IOTA - 245) & 511) as usize])))))));
			self.fVbargraph9 = (self.fRec9[0] as f32);
			outputs[9][i as usize] = (self.fVbargraph9 as f32);
			self.fRec10[0] = f32::max((self.fRec10[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 251) & 511) as usize]) + self.fVec2[((self.IOTA - 247) & 511) as usize]) + self.fVec3[((self.IOTA - 241) & 511) as usize]) + self.fVec4[((self.IOTA - 236) & 511) as usize]) + self.fVec5[((self.IOTA - 230) & 511) as usize])));
			self.fVbargraph10 = (self.fRec10[0] as f32);
			outputs[10][i as usize] = (self.fVbargraph10 as f32);
			let mut fTemp9: f32 = ((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 252) & 511) as usize]) + self.fVec2[((self.IOTA - 248) & 511) as usize]);
			self.fRec11[0] = f32::max((self.fRec11[1] - self.fConst0), f32::abs((((fTemp9 + self.fVec3[((self.IOTA - 243) & 511) as usize]) + self.fVec4[((self.IOTA - 238) & 511) as usize]) + self.fVec5[((self.IOTA - 233) & 511) as usize])));
			self.fVbargraph11 = (self.fRec11[0] as f32);
			outputs[11][i as usize] = (self.fVbargraph11 as f32);
			self.fRec12[0] = f32::max((self.fRec12[1] - self.fConst0), f32::abs((((fTemp7 + self.fVec3[((self.IOTA - 232) & 511) as usize]) + self.fVec4[((self.IOTA - 223) & 511) as usize]) + self.fVec5[((self.IOTA - 212) & 511) as usize])));
			self.fVbargraph12 = (self.fRec12[0] as f32);
			outputs[12][i as usize] = (self.fVbargraph12 as f32);
			self.fRec13[0] = f32::max((self.fRec13[1] - self.fConst0), f32::abs((self.fVec5[((self.IOTA - 224) & 511) as usize] + (self.fVec3[((self.IOTA - 240) & 511) as usize] + (self.fVec2[((self.IOTA - 246) & 511) as usize] + (self.fVec1[((self.IOTA - 251) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec4[((self.IOTA - 232) & 511) as usize])))))));
			self.fVbargraph13 = (self.fRec13[0] as f32);
			outputs[13][i as usize] = (self.fVbargraph13 as f32);
			self.fRec14[0] = f32::max((self.fRec14[1] - self.fConst0), f32::abs((self.fVec5[((self.IOTA - 231) & 511) as usize] + (self.fVec3[((self.IOTA - 244) & 511) as usize] + (fTemp9 + self.fVec4[((self.IOTA - 238) & 511) as usize])))));
			self.fVbargraph14 = (self.fRec14[0] as f32);
			outputs[14][i as usize] = (self.fVbargraph14 as f32);
			self.fRec15[0] = f32::max((self.fRec15[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 253) & 511) as usize]) + self.fVec2[((self.IOTA - 250) & 511) as usize]) + self.fVec3[((self.IOTA - 246) & 511) as usize]) + self.fVec4[((self.IOTA - 241) & 511) as usize]) + self.fVec5[((self.IOTA - 236) & 511) as usize])));
			self.fVbargraph15 = (self.fRec15[0] as f32);
			outputs[15][i as usize] = (self.fVbargraph15 as f32);
			let mut fTemp10: f32 = (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 254) & 511) as usize]);
			self.fRec16[0] = f32::max((self.fRec16[1] - self.fConst0), f32::abs(((((fTemp10 + self.fVec2[((self.IOTA - 251) & 511) as usize]) + self.fVec3[((self.IOTA - 248) & 511) as usize]) + self.fVec4[((self.IOTA - 244) & 511) as usize]) + self.fVec5[((self.IOTA - 239) & 511) as usize])));
			self.fVbargraph16 = (self.fRec16[0] as f32);
			outputs[16][i as usize] = (self.fVbargraph16 as f32);
			self.fRec17[0] = f32::max((self.fRec17[1] - self.fConst0), f32::abs(((((fTemp10 + self.fVec2[((self.IOTA - 252) & 511) as usize]) + self.fVec3[((self.IOTA - 249) & 511) as usize]) + self.fVec4[((self.IOTA - 245) & 511) as usize]) + self.fVec5[((self.IOTA - 242) & 511) as usize])));
			self.fVbargraph17 = (self.fRec17[0] as f32);
			outputs[17][i as usize] = (self.fVbargraph17 as f32);
			self.fRec18[0] = f32::max((self.fRec18[1] - self.fConst0), f32::abs((self.fVec4[((self.IOTA - 246) & 511) as usize] + (self.fVec3[((self.IOTA - 252) & 511) as usize] + (self.fVec2[((self.IOTA - 256) & 511) as usize] + (self.fVec1[((self.IOTA - 257) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec5[((self.IOTA - 239) & 511) as usize])))))));
			self.fVbargraph18 = (self.fRec18[0] as f32);
			outputs[18][i as usize] = (self.fVbargraph18 as f32);
			let mut fTemp11: f32 = (self.fVec1[((self.IOTA - 256) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec2[((self.IOTA - 256) & 511) as usize]));
			self.fRec19[0] = f32::max((self.fRec19[1] - self.fConst0), f32::abs((self.fVec5[((self.IOTA - 245) & 511) as usize] + (self.fVec4[((self.IOTA - 250) & 511) as usize] + (self.fVec3[((self.IOTA - 253) & 511) as usize] + fTemp11)))));
			self.fVbargraph19 = (self.fRec19[0] as f32);
			outputs[19][i as usize] = (self.fVbargraph19 as f32);
			let mut fTemp12: f32 = (fTemp11 + self.fVec3[((self.IOTA - 254) & 511) as usize]);
			self.fRec20[0] = f32::max((self.fRec20[1] - self.fConst0), f32::abs(((fTemp12 + self.fVec4[((self.IOTA - 251) & 511) as usize]) + self.fVec5[((self.IOTA - 247) & 511) as usize])));
			self.fVbargraph20 = (self.fRec20[0] as f32);
			outputs[20][i as usize] = (self.fVbargraph20 as f32);
			self.fRec21[0] = f32::max((self.fRec21[1] - self.fConst0), f32::abs(((fTemp12 + self.fVec4[((self.IOTA - 252) & 511) as usize]) + self.fVec5[((self.IOTA - 249) & 511) as usize])));
			self.fVbargraph21 = (self.fRec21[0] as f32);
			outputs[21][i as usize] = (self.fVbargraph21 as f32);
			self.fRec22[0] = f32::max((self.fRec22[1] - self.fConst0), f32::abs(((fTemp12 + self.fVec4[((self.IOTA - 253) & 511) as usize]) + self.fVec5[((self.IOTA - 250) & 511) as usize])));
			self.fVbargraph22 = (self.fRec22[0] as f32);
			outputs[22][i as usize] = (self.fVbargraph22 as f32);
			self.fRec23[0] = f32::max((self.fRec23[1] - self.fConst0), f32::abs((self.fVec5[((self.IOTA - 251) & 511) as usize] + (self.fVec3[((self.IOTA - 255) & 511) as usize] + (fTemp11 + self.fVec4[((self.IOTA - 253) & 511) as usize])))));
			self.fVbargraph23 = (self.fRec23[0] as f32);
			outputs[23][i as usize] = (self.fVbargraph23 as f32);
			self.fRec24[0] = f32::max((self.fRec24[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 263) & 511) as usize]) + self.fVec2[((self.IOTA - 270) & 511) as usize]) + self.fVec3[((self.IOTA - 274) & 511) as usize]) + self.fVec4[((self.IOTA - 276) & 511) as usize]) + self.fVec5[((self.IOTA - 276) & 511) as usize])));
			self.fVbargraph24 = (self.fRec24[0] as f32);
			outputs[24][i as usize] = (self.fVbargraph24 as f32);
			self.fRec25[0] = f32::max((self.fRec25[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 261) & 511) as usize]) + self.fVec2[((self.IOTA - 265) & 511) as usize]) + self.fVec3[((self.IOTA - 268) & 511) as usize]) + self.fVec4[((self.IOTA - 269) & 511) as usize]) + self.fVec5[((self.IOTA - 269) & 511) as usize])));
			self.fVbargraph25 = (self.fRec25[0] as f32);
			outputs[25][i as usize] = (self.fVbargraph25 as f32);
			let mut fTemp13: f32 = ((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 260) & 511) as usize]) + self.fVec2[((self.IOTA - 263) & 511) as usize]);
			self.fRec26[0] = f32::max((self.fRec26[1] - self.fConst0), f32::abs((((fTemp13 + self.fVec3[((self.IOTA - 265) & 511) as usize]) + self.fVec4[((self.IOTA - 265) & 511) as usize]) + self.fVec5[((self.IOTA - 265) & 511) as usize])));
			self.fVbargraph26 = (self.fRec26[0] as f32);
			outputs[26][i as usize] = (self.fVbargraph26 as f32);
			self.fRec27[0] = f32::max((self.fRec27[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 259) & 511) as usize]) + self.fVec2[((self.IOTA - 261) & 511) as usize]) + self.fVec3[((self.IOTA - 263) & 511) as usize]) + self.fVec4[((self.IOTA - 263) & 511) as usize]) + self.fVec5[((self.IOTA - 263) & 511) as usize])));
			self.fVbargraph27 = (self.fRec27[0] as f32);
			outputs[27][i as usize] = (self.fVbargraph27 as f32);
			let mut fTemp14: f32 = (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 258) & 511) as usize]);
			self.fRec28[0] = f32::max((self.fRec28[1] - self.fConst0), f32::abs(((((fTemp14 + self.fVec2[((self.IOTA - 260) & 511) as usize]) + self.fVec3[((self.IOTA - 261) & 511) as usize]) + self.fVec4[((self.IOTA - 262) & 511) as usize]) + self.fVec5[((self.IOTA - 262) & 511) as usize])));
			self.fVbargraph28 = (self.fRec28[0] as f32);
			outputs[28][i as usize] = (self.fVbargraph28 as f32);
			self.fRec29[0] = f32::max((self.fRec29[1] - self.fConst0), f32::abs(((((fTemp14 + self.fVec2[((self.IOTA - 259) & 511) as usize]) + self.fVec3[((self.IOTA - 260) & 511) as usize]) + self.fVec4[((self.IOTA - 261) & 511) as usize]) + self.fVec5[((self.IOTA - 261) & 511) as usize])));
			self.fVbargraph29 = (self.fRec29[0] as f32);
			outputs[29][i as usize] = (self.fVbargraph29 as f32);
			self.fRec30[0] = f32::max((self.fRec30[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 266) & 511) as usize]) + self.fVec2[((self.IOTA - 276) & 511) as usize]) + self.fVec3[((self.IOTA - 285) & 511) as usize]) + self.fVec4[((self.IOTA - 293) & 511) as usize]) + self.fVec5[((self.IOTA - 300) & 511) as usize])));
			self.fVbargraph30 = (self.fRec30[0] as f32);
			outputs[30][i as usize] = (self.fVbargraph30 as f32);
			self.fRec31[0] = f32::max((self.fRec31[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 264) & 511) as usize]) + self.fVec2[((self.IOTA - 272) & 511) as usize]) + self.fVec3[((self.IOTA - 278) & 511) as usize]) + self.fVec4[((self.IOTA - 284) & 511) as usize]) + self.fVec5[((self.IOTA - 289) & 511) as usize])));
			self.fVbargraph31 = (self.fRec31[0] as f32);
			outputs[31][i as usize] = (self.fVbargraph31 as f32);
			self.fRec32[0] = f32::max((self.fRec32[1] - self.fConst0), f32::abs((((((self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec1[((self.IOTA - 262) & 511) as usize]) + self.fVec2[((self.IOTA - 268) & 511) as usize]) + self.fVec3[((self.IOTA - 273) & 511) as usize]) + self.fVec4[((self.IOTA - 278) & 511) as usize]) + self.fVec5[((self.IOTA - 281) & 511) as usize])));
			self.fVbargraph32 = (self.fRec32[0] as f32);
			outputs[32][i as usize] = (self.fVbargraph32 as f32);
			self.fRec33[0] = f32::max((self.fRec33[1] - self.fConst0), f32::abs((self.fVec4[((self.IOTA - 274) & 511) as usize] + (self.fVec3[((self.IOTA - 270) & 511) as usize] + (self.fVec2[((self.IOTA - 266) & 511) as usize] + (self.fVec1[((self.IOTA - 261) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec5[((self.IOTA - 276) & 511) as usize])))))));
			self.fVbargraph33 = (self.fRec33[0] as f32);
			outputs[33][i as usize] = (self.fVbargraph33 as f32);
			self.fRec34[0] = f32::max((self.fRec34[1] - self.fConst0), f32::abs((((self.fVec2[((self.IOTA - 264) & 511) as usize] + (self.fVec1[((self.IOTA - 260) & 511) as usize] + (self.fVec0[((self.IOTA - 256) & 511) as usize] + self.fVec3[((self.IOTA - 268) & 511) as usize]))) + self.fVec4[((self.IOTA - 271) & 511) as usize]) + self.fVec5[((self.IOTA - 273) & 511) as usize])));
			self.fVbargraph34 = (self.fRec34[0] as f32);
			outputs[34][i as usize] = (self.fVbargraph34 as f32);
			self.fRec35[0] = f32::max((self.fRec35[1] - self.fConst0), f32::abs((((fTemp13 + self.fVec3[((self.IOTA - 266) & 511) as usize]) + self.fVec4[((self.IOTA - 268) & 511) as usize]) + self.fVec5[((self.IOTA - 270) & 511) as usize])));
			self.fVbargraph35 = (self.fRec35[0] as f32);
			outputs[35][i as usize] = (self.fVbargraph35 as f32);
			self.IOTA = (self.IOTA + 1);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec31[1] = self.fRec31[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec33[1] = self.fRec33[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec35[1] = self.fRec35[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

