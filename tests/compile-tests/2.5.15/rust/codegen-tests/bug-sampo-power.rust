
pub fn mydspSIG0_faustpower2_i(value: i32) -> i32 {
	(value * value)
}


pub struct mydspSIG0 {
	
	iRec0: [i32;2],
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		let mut l0: i32 = 0;
		loop {
			self.iRec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[i32]) {
		let mut i: i32 = 0;
		loop {
			self.iRec0[0] = (self.iRec0[1] + 1);
			output[i as usize] = mydspSIG0_faustpower2_i(self.iRec0[0]);
			self.iRec0[1] = self.iRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		iRec0: [0;2],
	}
}
static itbl0mydspSIG0: [i32;128][0;128],;
pub fn mydsp_faustpower2_i(value: i32) -> i32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("name", "bug-sampo-power");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(128, &mut itbl0mydspSIG0);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("bug-sampo-power");
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			outputs[0][i as usize] = (mydsp_faustpower2_i(itbl0mydspSIG0[((127.0 * f32::abs((inputs[0][i as usize] as f32))) as i32) as usize]) as f32);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

