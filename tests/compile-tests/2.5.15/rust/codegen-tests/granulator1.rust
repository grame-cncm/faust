
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	iConst1: i32,
	iRec3: [i32;2],
	fHslider1: f32,
	fHslider2: f32,
	iRec4: [i32;2],
	iRec2: [i32;2],
	iVec0: [i32;2],
	fConst2: f32,
	fConst3: f32,
	fRec5: [f32;2],
	fRec1: [f32;2],
	fRec0: [f32;2],
	iVec1: [i32;2],
	fRec8: [f32;2],
	fRec7: [f32;2],
	fRec6: [f32;2],
	IOTA: i32,
	fVec2: [f32;524288],
	iConst4: i32,
	iVec3: [i32;2],
	fRec11: [f32;2],
	fRec10: [f32;2],
	fRec9: [f32;2],
	iConst5: i32,
	iVec4: [i32;2],
	fRec14: [f32;2],
	fRec13: [f32;2],
	fRec12: [f32;2],
	iConst6: i32,
	iVec5: [i32;2],
	fRec17: [f32;2],
	fRec16: [f32;2],
	fRec15: [f32;2],
	iConst7: i32,
	iVec6: [i32;2],
	fRec20: [f32;2],
	fRec19: [f32;2],
	fRec18: [f32;2],
	iConst8: i32,
	iVec7: [i32;2],
	fRec23: [f32;2],
	fRec22: [f32;2],
	fRec21: [f32;2],
	iConst9: i32,
	iVec8: [i32;2],
	fRec26: [f32;2],
	fRec25: [f32;2],
	fRec24: [f32;2],
	iConst10: i32,
	iVec9: [i32;2],
	fRec29: [f32;2],
	fRec28: [f32;2],
	fRec27: [f32;2],
	iConst11: i32,
	iVec10: [i32;2],
	fRec32: [f32;2],
	fRec31: [f32;2],
	fRec30: [f32;2],
	iConst12: i32,
	iVec11: [i32;2],
	fRec35: [f32;2],
	fRec34: [f32;2],
	fRec33: [f32;2],
	iConst13: i32,
	iVec12: [i32;2],
	fRec38: [f32;2],
	fRec37: [f32;2],
	fRec36: [f32;2],
	iConst14: i32,
	iVec13: [i32;2],
	fRec41: [f32;2],
	fRec40: [f32;2],
	fRec39: [f32;2],
	iConst15: i32,
	iVec14: [i32;2],
	fRec44: [f32;2],
	fRec43: [f32;2],
	fRec42: [f32;2],
	iConst16: i32,
	iVec15: [i32;2],
	fRec47: [f32;2],
	fRec46: [f32;2],
	fRec45: [f32;2],
	iConst17: i32,
	iVec16: [i32;2],
	fRec50: [f32;2],
	fRec49: [f32;2],
	fRec48: [f32;2],
	iConst18: i32,
	iVec17: [i32;2],
	fRec53: [f32;2],
	fRec52: [f32;2],
	fRec51: [f32;2],
	iConst19: i32,
	iVec18: [i32;2],
	fRec56: [f32;2],
	fRec55: [f32;2],
	fRec54: [f32;2],
	iConst20: i32,
	iVec19: [i32;2],
	fRec59: [f32;2],
	fRec58: [f32;2],
	fRec57: [f32;2],
	iConst21: i32,
	iVec20: [i32;2],
	fRec62: [f32;2],
	fRec61: [f32;2],
	fRec60: [f32;2],
	iConst22: i32,
	iVec21: [i32;2],
	fRec65: [f32;2],
	fRec64: [f32;2],
	fRec63: [f32;2],
	iConst23: i32,
	iVec22: [i32;2],
	fRec68: [f32;2],
	fRec67: [f32;2],
	fRec66: [f32;2],
	iConst24: i32,
	iVec23: [i32;2],
	fRec71: [f32;2],
	fRec70: [f32;2],
	fRec69: [f32;2],
	iConst25: i32,
	iVec24: [i32;2],
	fRec74: [f32;2],
	fRec73: [f32;2],
	fRec72: [f32;2],
	iConst26: i32,
	iVec25: [i32;2],
	fRec77: [f32;2],
	fRec76: [f32;2],
	fRec75: [f32;2],
	iConst27: i32,
	iVec26: [i32;2],
	fRec80: [f32;2],
	fRec79: [f32;2],
	fRec78: [f32;2],
	iConst28: i32,
	iVec27: [i32;2],
	fRec83: [f32;2],
	fRec82: [f32;2],
	fRec81: [f32;2],
	iConst29: i32,
	iVec28: [i32;2],
	fRec86: [f32;2],
	fRec85: [f32;2],
	fRec84: [f32;2],
	iConst30: i32,
	iVec29: [i32;2],
	fRec89: [f32;2],
	fRec88: [f32;2],
	fRec87: [f32;2],
	iConst31: i32,
	iVec30: [i32;2],
	fRec92: [f32;2],
	fRec91: [f32;2],
	fRec90: [f32;2],
	iConst32: i32,
	iVec31: [i32;2],
	fRec95: [f32;2],
	fRec94: [f32;2],
	fRec93: [f32;2],
	iConst33: i32,
	iVec32: [i32;2],
	fRec98: [f32;2],
	fRec97: [f32;2],
	fRec96: [f32;2],
	iConst34: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			iConst1: 0,
			iRec3: [0;2],
			fHslider1: 0.0,
			fHslider2: 0.0,
			iRec4: [0;2],
			iRec2: [0;2],
			iVec0: [0;2],
			fConst2: 0.0,
			fConst3: 0.0,
			fRec5: [0.0;2],
			fRec1: [0.0;2],
			fRec0: [0.0;2],
			iVec1: [0;2],
			fRec8: [0.0;2],
			fRec7: [0.0;2],
			fRec6: [0.0;2],
			IOTA: 0,
			fVec2: [0.0;524288],
			iConst4: 0,
			iVec3: [0;2],
			fRec11: [0.0;2],
			fRec10: [0.0;2],
			fRec9: [0.0;2],
			iConst5: 0,
			iVec4: [0;2],
			fRec14: [0.0;2],
			fRec13: [0.0;2],
			fRec12: [0.0;2],
			iConst6: 0,
			iVec5: [0;2],
			fRec17: [0.0;2],
			fRec16: [0.0;2],
			fRec15: [0.0;2],
			iConst7: 0,
			iVec6: [0;2],
			fRec20: [0.0;2],
			fRec19: [0.0;2],
			fRec18: [0.0;2],
			iConst8: 0,
			iVec7: [0;2],
			fRec23: [0.0;2],
			fRec22: [0.0;2],
			fRec21: [0.0;2],
			iConst9: 0,
			iVec8: [0;2],
			fRec26: [0.0;2],
			fRec25: [0.0;2],
			fRec24: [0.0;2],
			iConst10: 0,
			iVec9: [0;2],
			fRec29: [0.0;2],
			fRec28: [0.0;2],
			fRec27: [0.0;2],
			iConst11: 0,
			iVec10: [0;2],
			fRec32: [0.0;2],
			fRec31: [0.0;2],
			fRec30: [0.0;2],
			iConst12: 0,
			iVec11: [0;2],
			fRec35: [0.0;2],
			fRec34: [0.0;2],
			fRec33: [0.0;2],
			iConst13: 0,
			iVec12: [0;2],
			fRec38: [0.0;2],
			fRec37: [0.0;2],
			fRec36: [0.0;2],
			iConst14: 0,
			iVec13: [0;2],
			fRec41: [0.0;2],
			fRec40: [0.0;2],
			fRec39: [0.0;2],
			iConst15: 0,
			iVec14: [0;2],
			fRec44: [0.0;2],
			fRec43: [0.0;2],
			fRec42: [0.0;2],
			iConst16: 0,
			iVec15: [0;2],
			fRec47: [0.0;2],
			fRec46: [0.0;2],
			fRec45: [0.0;2],
			iConst17: 0,
			iVec16: [0;2],
			fRec50: [0.0;2],
			fRec49: [0.0;2],
			fRec48: [0.0;2],
			iConst18: 0,
			iVec17: [0;2],
			fRec53: [0.0;2],
			fRec52: [0.0;2],
			fRec51: [0.0;2],
			iConst19: 0,
			iVec18: [0;2],
			fRec56: [0.0;2],
			fRec55: [0.0;2],
			fRec54: [0.0;2],
			iConst20: 0,
			iVec19: [0;2],
			fRec59: [0.0;2],
			fRec58: [0.0;2],
			fRec57: [0.0;2],
			iConst21: 0,
			iVec20: [0;2],
			fRec62: [0.0;2],
			fRec61: [0.0;2],
			fRec60: [0.0;2],
			iConst22: 0,
			iVec21: [0;2],
			fRec65: [0.0;2],
			fRec64: [0.0;2],
			fRec63: [0.0;2],
			iConst23: 0,
			iVec22: [0;2],
			fRec68: [0.0;2],
			fRec67: [0.0;2],
			fRec66: [0.0;2],
			iConst24: 0,
			iVec23: [0;2],
			fRec71: [0.0;2],
			fRec70: [0.0;2],
			fRec69: [0.0;2],
			iConst25: 0,
			iVec24: [0;2],
			fRec74: [0.0;2],
			fRec73: [0.0;2],
			fRec72: [0.0;2],
			iConst26: 0,
			iVec25: [0;2],
			fRec77: [0.0;2],
			fRec76: [0.0;2],
			fRec75: [0.0;2],
			iConst27: 0,
			iVec26: [0;2],
			fRec80: [0.0;2],
			fRec79: [0.0;2],
			fRec78: [0.0;2],
			iConst28: 0,
			iVec27: [0;2],
			fRec83: [0.0;2],
			fRec82: [0.0;2],
			fRec81: [0.0;2],
			iConst29: 0,
			iVec28: [0;2],
			fRec86: [0.0;2],
			fRec85: [0.0;2],
			fRec84: [0.0;2],
			iConst30: 0,
			iVec29: [0;2],
			fRec89: [0.0;2],
			fRec88: [0.0;2],
			fRec87: [0.0;2],
			iConst31: 0,
			iVec30: [0;2],
			fRec92: [0.0;2],
			fRec91: [0.0;2],
			fRec90: [0.0;2],
			iConst32: 0,
			iVec31: [0;2],
			fRec95: [0.0;2],
			fRec94: [0.0;2],
			fRec93: [0.0;2],
			iConst33: 0,
			iVec32: [0;2],
			fRec98: [0.0;2],
			fRec97: [0.0;2],
			fRec96: [0.0;2],
			iConst34: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("math.lib/author", "GRAME");
		m.declare("math.lib/copyright", "GRAME");
		m.declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("math.lib/license", "LGPL with exception");
		m.declare("math.lib/name", "Math Library");
		m.declare("math.lib/version", "1.0");
		m.declare("music.lib/author", "GRAME");
		m.declare("music.lib/copyright", "GRAME");
		m.declare("music.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m.declare("music.lib/license", "LGPL with exception");
		m.declare("music.lib/name", "Music Library");
		m.declare("music.lib/version", "1.0");
		m.declare("name", "granulator1");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.0;
		self.fHslider1 = 0.0;
		self.fHslider2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec3[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iRec4[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.iRec2[l2 as usize] = 0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.iVec0[l3 as usize] = 0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec5[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec1[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.iVec1[l7 as usize] = 0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec6[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l11: i32 = 0;
		loop {
			self.fVec2[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 524288) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.iVec3[l12 as usize] = 0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec10[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec9[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.iVec4[l16 as usize] = 0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec14[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec13[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec12[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.iVec5[l20 as usize] = 0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec17[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec16[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec15[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.iVec6[l24 as usize] = 0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec20[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec19[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec18[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.iVec7[l28 as usize] = 0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec23[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec22[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec21[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.iVec8[l32 as usize] = 0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec26[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec25[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec24[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.iVec9[l36 as usize] = 0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec29[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec28[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec27[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 2) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.iVec10[l40 as usize] = 0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec32[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec31[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec30[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.iVec11[l44 as usize] = 0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec35[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec34[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec33[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.iVec12[l48 as usize] = 0;
			l48 = (l48 + 1);
			if (l48 < 2) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec38[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec37[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec36[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 2) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.iVec13[l52 as usize] = 0;
			l52 = (l52 + 1);
			if (l52 < 2) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec41[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec40[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 2) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec39[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.iVec14[l56 as usize] = 0;
			l56 = (l56 + 1);
			if (l56 < 2) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec44[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 2) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec43[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec42[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.iVec15[l60 as usize] = 0;
			l60 = (l60 + 1);
			if (l60 < 2) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec47[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec46[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec45[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 2) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.iVec16[l64 as usize] = 0;
			l64 = (l64 + 1);
			if (l64 < 2) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec50[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 2) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fRec49[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec48[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 2) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.iVec17[l68 as usize] = 0;
			l68 = (l68 + 1);
			if (l68 < 2) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec53[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 2) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fRec52[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 2) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec51[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 2) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.iVec18[l72 as usize] = 0;
			l72 = (l72 + 1);
			if (l72 < 2) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.fRec56[l73 as usize] = 0.0;
			l73 = (l73 + 1);
			if (l73 < 2) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fRec55[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 2) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec54[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 2) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.iVec19[l76 as usize] = 0;
			l76 = (l76 + 1);
			if (l76 < 2) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fRec59[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 2) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec58[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 2) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec57[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 2) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.iVec20[l80 as usize] = 0;
			l80 = (l80 + 1);
			if (l80 < 2) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fRec62[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 2) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec61[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 2) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.fRec60[l83 as usize] = 0.0;
			l83 = (l83 + 1);
			if (l83 < 2) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.iVec21[l84 as usize] = 0;
			l84 = (l84 + 1);
			if (l84 < 2) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec65[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 2) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.fRec64[l86 as usize] = 0.0;
			l86 = (l86 + 1);
			if (l86 < 2) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec63[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 2) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.iVec22[l88 as usize] = 0;
			l88 = (l88 + 1);
			if (l88 < 2) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec68[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 2) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.fRec67[l90 as usize] = 0.0;
			l90 = (l90 + 1);
			if (l90 < 2) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fRec66[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 2) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.iVec23[l92 as usize] = 0;
			l92 = (l92 + 1);
			if (l92 < 2) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fRec71[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 2) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fRec70[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 2) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec69[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 2) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.iVec24[l96 as usize] = 0;
			l96 = (l96 + 1);
			if (l96 < 2) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec74[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 2) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec73[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 2) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fRec72[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 2) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.iVec25[l100 as usize] = 0;
			l100 = (l100 + 1);
			if (l100 < 2) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec77[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 2) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec76[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 2) { continue; } else { break; }
		}
		let mut l103: i32 = 0;
		loop {
			self.fRec75[l103 as usize] = 0.0;
			l103 = (l103 + 1);
			if (l103 < 2) { continue; } else { break; }
		}
		let mut l104: i32 = 0;
		loop {
			self.iVec26[l104 as usize] = 0;
			l104 = (l104 + 1);
			if (l104 < 2) { continue; } else { break; }
		}
		let mut l105: i32 = 0;
		loop {
			self.fRec80[l105 as usize] = 0.0;
			l105 = (l105 + 1);
			if (l105 < 2) { continue; } else { break; }
		}
		let mut l106: i32 = 0;
		loop {
			self.fRec79[l106 as usize] = 0.0;
			l106 = (l106 + 1);
			if (l106 < 2) { continue; } else { break; }
		}
		let mut l107: i32 = 0;
		loop {
			self.fRec78[l107 as usize] = 0.0;
			l107 = (l107 + 1);
			if (l107 < 2) { continue; } else { break; }
		}
		let mut l108: i32 = 0;
		loop {
			self.iVec27[l108 as usize] = 0;
			l108 = (l108 + 1);
			if (l108 < 2) { continue; } else { break; }
		}
		let mut l109: i32 = 0;
		loop {
			self.fRec83[l109 as usize] = 0.0;
			l109 = (l109 + 1);
			if (l109 < 2) { continue; } else { break; }
		}
		let mut l110: i32 = 0;
		loop {
			self.fRec82[l110 as usize] = 0.0;
			l110 = (l110 + 1);
			if (l110 < 2) { continue; } else { break; }
		}
		let mut l111: i32 = 0;
		loop {
			self.fRec81[l111 as usize] = 0.0;
			l111 = (l111 + 1);
			if (l111 < 2) { continue; } else { break; }
		}
		let mut l112: i32 = 0;
		loop {
			self.iVec28[l112 as usize] = 0;
			l112 = (l112 + 1);
			if (l112 < 2) { continue; } else { break; }
		}
		let mut l113: i32 = 0;
		loop {
			self.fRec86[l113 as usize] = 0.0;
			l113 = (l113 + 1);
			if (l113 < 2) { continue; } else { break; }
		}
		let mut l114: i32 = 0;
		loop {
			self.fRec85[l114 as usize] = 0.0;
			l114 = (l114 + 1);
			if (l114 < 2) { continue; } else { break; }
		}
		let mut l115: i32 = 0;
		loop {
			self.fRec84[l115 as usize] = 0.0;
			l115 = (l115 + 1);
			if (l115 < 2) { continue; } else { break; }
		}
		let mut l116: i32 = 0;
		loop {
			self.iVec29[l116 as usize] = 0;
			l116 = (l116 + 1);
			if (l116 < 2) { continue; } else { break; }
		}
		let mut l117: i32 = 0;
		loop {
			self.fRec89[l117 as usize] = 0.0;
			l117 = (l117 + 1);
			if (l117 < 2) { continue; } else { break; }
		}
		let mut l118: i32 = 0;
		loop {
			self.fRec88[l118 as usize] = 0.0;
			l118 = (l118 + 1);
			if (l118 < 2) { continue; } else { break; }
		}
		let mut l119: i32 = 0;
		loop {
			self.fRec87[l119 as usize] = 0.0;
			l119 = (l119 + 1);
			if (l119 < 2) { continue; } else { break; }
		}
		let mut l120: i32 = 0;
		loop {
			self.iVec30[l120 as usize] = 0;
			l120 = (l120 + 1);
			if (l120 < 2) { continue; } else { break; }
		}
		let mut l121: i32 = 0;
		loop {
			self.fRec92[l121 as usize] = 0.0;
			l121 = (l121 + 1);
			if (l121 < 2) { continue; } else { break; }
		}
		let mut l122: i32 = 0;
		loop {
			self.fRec91[l122 as usize] = 0.0;
			l122 = (l122 + 1);
			if (l122 < 2) { continue; } else { break; }
		}
		let mut l123: i32 = 0;
		loop {
			self.fRec90[l123 as usize] = 0.0;
			l123 = (l123 + 1);
			if (l123 < 2) { continue; } else { break; }
		}
		let mut l124: i32 = 0;
		loop {
			self.iVec31[l124 as usize] = 0;
			l124 = (l124 + 1);
			if (l124 < 2) { continue; } else { break; }
		}
		let mut l125: i32 = 0;
		loop {
			self.fRec95[l125 as usize] = 0.0;
			l125 = (l125 + 1);
			if (l125 < 2) { continue; } else { break; }
		}
		let mut l126: i32 = 0;
		loop {
			self.fRec94[l126 as usize] = 0.0;
			l126 = (l126 + 1);
			if (l126 < 2) { continue; } else { break; }
		}
		let mut l127: i32 = 0;
		loop {
			self.fRec93[l127 as usize] = 0.0;
			l127 = (l127 + 1);
			if (l127 < 2) { continue; } else { break; }
		}
		let mut l128: i32 = 0;
		loop {
			self.iVec32[l128 as usize] = 0;
			l128 = (l128 + 1);
			if (l128 < 2) { continue; } else { break; }
		}
		let mut l129: i32 = 0;
		loop {
			self.fRec98[l129 as usize] = 0.0;
			l129 = (l129 + 1);
			if (l129 < 2) { continue; } else { break; }
		}
		let mut l130: i32 = 0;
		loop {
			self.fRec97[l130 as usize] = 0.0;
			l130 = (l130 + 1);
			if (l130 < 2) { continue; } else { break; }
		}
		let mut l131: i32 = 0;
		loop {
			self.fRec96[l131 as usize] = 0.0;
			l131 = (l131 + 1);
			if (l131 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.iConst1 = ((0.00729927002 * self.fConst0) as i32);
		self.fConst2 = (4.0 * ((20.0 - (400.0 / self.fConst0)) / self.fConst0));
		self.fConst3 = (3200.0 / mydsp_faustpower2_f(self.fConst0));
		self.iConst4 = (((0.3125 * self.fConst0) as i32) & 524287);
		self.iConst5 = (((0.625 * self.fConst0) as i32) & 524287);
		self.iConst6 = (((0.9375 * self.fConst0) as i32) & 524287);
		self.iConst7 = (((1.25 * self.fConst0) as i32) & 524287);
		self.iConst8 = (((1.5625 * self.fConst0) as i32) & 524287);
		self.iConst9 = (((1.875 * self.fConst0) as i32) & 524287);
		self.iConst10 = (((2.1875 * self.fConst0) as i32) & 524287);
		self.iConst11 = (((2.5 * self.fConst0) as i32) & 524287);
		self.iConst12 = (((2.8125 * self.fConst0) as i32) & 524287);
		self.iConst13 = (((3.125 * self.fConst0) as i32) & 524287);
		self.iConst14 = (((3.4375 * self.fConst0) as i32) & 524287);
		self.iConst15 = (((3.75 * self.fConst0) as i32) & 524287);
		self.iConst16 = (((4.0625 * self.fConst0) as i32) & 524287);
		self.iConst17 = (((4.375 * self.fConst0) as i32) & 524287);
		self.iConst18 = (((4.6875 * self.fConst0) as i32) & 524287);
		self.iConst19 = (((0.15625 * self.fConst0) as i32) & 524287);
		self.iConst20 = (((0.46875 * self.fConst0) as i32) & 524287);
		self.iConst21 = (((0.78125 * self.fConst0) as i32) & 524287);
		self.iConst22 = (((1.09375 * self.fConst0) as i32) & 524287);
		self.iConst23 = (((1.40625 * self.fConst0) as i32) & 524287);
		self.iConst24 = (((1.71875 * self.fConst0) as i32) & 524287);
		self.iConst25 = (((2.03125 * self.fConst0) as i32) & 524287);
		self.iConst26 = (((2.34375 * self.fConst0) as i32) & 524287);
		self.iConst27 = (((2.65625 * self.fConst0) as i32) & 524287);
		self.iConst28 = (((2.96875 * self.fConst0) as i32) & 524287);
		self.iConst29 = (((3.28125 * self.fConst0) as i32) & 524287);
		self.iConst30 = (((3.59375 * self.fConst0) as i32) & 524287);
		self.iConst31 = (((3.90625 * self.fConst0) as i32) & 524287);
		self.iConst32 = (((4.21875 * self.fConst0) as i32) & 524287);
		self.iConst33 = (((4.53125 * self.fConst0) as i32) & 524287);
		self.iConst34 = (((4.84375 * self.fConst0) as i32) & 524287);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("granulator1");
		ui_interface.addHorizontalSlider("lim1", &mut self.fHslider1, 0.0, 0.0, 10000.0, 1.0);
		ui_interface.addHorizontalSlider("lim2", &mut self.fHslider2, 0.0, 0.0, 10000.0, 1.0);
		ui_interface.addHorizontalSlider("vol", &mut self.fHslider0, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut fSlow2: f32 = (self.fHslider2 as f32);
		let mut fSlow3: f32 = (0.5 * (fSlow1 + fSlow2));
		let mut fSlow4: f32 = (2.32830644e-10 * (fSlow2 - fSlow1));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.iRec3[0] = ((self.iRec3[1] + 1) % self.iConst1);
			let mut iTemp1: i32 = ((self.iRec3[0] == 0) as i32);
			self.iRec4[0] = ((1103515245 * self.iRec4[1]) + 12345);
			self.iRec2[0] = (((1 - iTemp1) * self.iRec2[1]) + (iTemp1 * ((fSlow3 + (fSlow4 * (self.iRec4[0] as f32))) as i32)));
			let mut iTemp2: i32 = ((self.iRec2[0] == 0) as i32);
			self.iVec0[0] = iTemp2;
			let mut iTemp3: i32 = ((((self.fRec0[1] > 0.0) as i32) | iTemp2) | self.iVec0[1]);
			self.fRec5[0] = ((self.fRec5[1] - self.fConst3) * (iTemp3 as f32));
			self.fRec1[0] = ((iTemp3 as f32) * (self.fConst2 + (self.fRec1[1] + self.fRec5[1])));
			self.fRec0[0] = f32::max(0.0, self.fRec1[1]);
			let mut iTemp4: i32 = ((self.iRec2[0] == 2) as i32);
			self.iVec1[0] = iTemp4;
			let mut iTemp5: i32 = ((((self.fRec6[1] > 0.0) as i32) | iTemp4) | self.iVec1[1]);
			self.fRec8[0] = ((self.fRec8[1] - self.fConst3) * (iTemp5 as f32));
			self.fRec7[0] = ((iTemp5 as f32) * (self.fConst2 + (self.fRec7[1] + self.fRec8[1])));
			self.fRec6[0] = f32::max(0.0, self.fRec7[1]);
			let mut fTemp6: f32 = (fSlow0 * fTemp0);
			self.fVec2[(self.IOTA & 524287) as usize] = fTemp6;
			let mut iTemp7: i32 = ((self.iRec2[0] == 4) as i32);
			self.iVec3[0] = iTemp7;
			let mut iTemp8: i32 = ((((self.fRec9[1] > 0.0) as i32) | iTemp7) | self.iVec3[1]);
			self.fRec11[0] = ((self.fRec11[1] - self.fConst3) * (iTemp8 as f32));
			self.fRec10[0] = ((iTemp8 as f32) * (self.fConst2 + (self.fRec10[1] + self.fRec11[1])));
			self.fRec9[0] = f32::max(0.0, self.fRec10[1]);
			let mut iTemp9: i32 = ((self.iRec2[0] == 6) as i32);
			self.iVec4[0] = iTemp9;
			let mut iTemp10: i32 = ((((self.fRec12[1] > 0.0) as i32) | iTemp9) | self.iVec4[1]);
			self.fRec14[0] = ((self.fRec14[1] - self.fConst3) * (iTemp10 as f32));
			self.fRec13[0] = ((iTemp10 as f32) * (self.fConst2 + (self.fRec13[1] + self.fRec14[1])));
			self.fRec12[0] = f32::max(0.0, self.fRec13[1]);
			let mut iTemp11: i32 = ((self.iRec2[0] == 8) as i32);
			self.iVec5[0] = iTemp11;
			let mut iTemp12: i32 = ((((self.fRec15[1] > 0.0) as i32) | iTemp11) | self.iVec5[1]);
			self.fRec17[0] = ((self.fRec17[1] - self.fConst3) * (iTemp12 as f32));
			self.fRec16[0] = ((iTemp12 as f32) * (self.fConst2 + (self.fRec16[1] + self.fRec17[1])));
			self.fRec15[0] = f32::max(0.0, self.fRec16[1]);
			let mut iTemp13: i32 = ((self.iRec2[0] == 10) as i32);
			self.iVec6[0] = iTemp13;
			let mut iTemp14: i32 = ((((self.fRec18[1] > 0.0) as i32) | iTemp13) | self.iVec6[1]);
			self.fRec20[0] = ((self.fRec20[1] - self.fConst3) * (iTemp14 as f32));
			self.fRec19[0] = ((iTemp14 as f32) * (self.fConst2 + (self.fRec19[1] + self.fRec20[1])));
			self.fRec18[0] = f32::max(0.0, self.fRec19[1]);
			let mut iTemp15: i32 = ((self.iRec2[0] == 12) as i32);
			self.iVec7[0] = iTemp15;
			let mut iTemp16: i32 = ((((self.fRec21[1] > 0.0) as i32) | iTemp15) | self.iVec7[1]);
			self.fRec23[0] = ((self.fRec23[1] - self.fConst3) * (iTemp16 as f32));
			self.fRec22[0] = ((iTemp16 as f32) * (self.fConst2 + (self.fRec22[1] + self.fRec23[1])));
			self.fRec21[0] = f32::max(0.0, self.fRec22[1]);
			let mut iTemp17: i32 = ((self.iRec2[0] == 14) as i32);
			self.iVec8[0] = iTemp17;
			let mut iTemp18: i32 = ((((self.fRec24[1] > 0.0) as i32) | iTemp17) | self.iVec8[1]);
			self.fRec26[0] = ((self.fRec26[1] - self.fConst3) * (iTemp18 as f32));
			self.fRec25[0] = ((iTemp18 as f32) * (self.fConst2 + (self.fRec25[1] + self.fRec26[1])));
			self.fRec24[0] = f32::max(0.0, self.fRec25[1]);
			let mut iTemp19: i32 = ((self.iRec2[0] == 16) as i32);
			self.iVec9[0] = iTemp19;
			let mut iTemp20: i32 = ((((self.fRec27[1] > 0.0) as i32) | iTemp19) | self.iVec9[1]);
			self.fRec29[0] = ((self.fRec29[1] - self.fConst3) * (iTemp20 as f32));
			self.fRec28[0] = ((iTemp20 as f32) * (self.fConst2 + (self.fRec28[1] + self.fRec29[1])));
			self.fRec27[0] = f32::max(0.0, self.fRec28[1]);
			let mut iTemp21: i32 = ((self.iRec2[0] == 18) as i32);
			self.iVec10[0] = iTemp21;
			let mut iTemp22: i32 = ((((self.fRec30[1] > 0.0) as i32) | iTemp21) | self.iVec10[1]);
			self.fRec32[0] = ((self.fRec32[1] - self.fConst3) * (iTemp22 as f32));
			self.fRec31[0] = ((iTemp22 as f32) * (self.fConst2 + (self.fRec31[1] + self.fRec32[1])));
			self.fRec30[0] = f32::max(0.0, self.fRec31[1]);
			let mut iTemp23: i32 = ((self.iRec2[0] == 20) as i32);
			self.iVec11[0] = iTemp23;
			let mut iTemp24: i32 = ((((self.fRec33[1] > 0.0) as i32) | iTemp23) | self.iVec11[1]);
			self.fRec35[0] = ((self.fRec35[1] - self.fConst3) * (iTemp24 as f32));
			self.fRec34[0] = ((iTemp24 as f32) * (self.fConst2 + (self.fRec34[1] + self.fRec35[1])));
			self.fRec33[0] = f32::max(0.0, self.fRec34[1]);
			let mut iTemp25: i32 = ((self.iRec2[0] == 22) as i32);
			self.iVec12[0] = iTemp25;
			let mut iTemp26: i32 = ((((self.fRec36[1] > 0.0) as i32) | iTemp25) | self.iVec12[1]);
			self.fRec38[0] = ((self.fRec38[1] - self.fConst3) * (iTemp26 as f32));
			self.fRec37[0] = ((iTemp26 as f32) * (self.fConst2 + (self.fRec37[1] + self.fRec38[1])));
			self.fRec36[0] = f32::max(0.0, self.fRec37[1]);
			let mut iTemp27: i32 = ((self.iRec2[0] == 24) as i32);
			self.iVec13[0] = iTemp27;
			let mut iTemp28: i32 = ((((self.fRec39[1] > 0.0) as i32) | iTemp27) | self.iVec13[1]);
			self.fRec41[0] = ((self.fRec41[1] - self.fConst3) * (iTemp28 as f32));
			self.fRec40[0] = ((iTemp28 as f32) * (self.fConst2 + (self.fRec40[1] + self.fRec41[1])));
			self.fRec39[0] = f32::max(0.0, self.fRec40[1]);
			let mut iTemp29: i32 = ((self.iRec2[0] == 26) as i32);
			self.iVec14[0] = iTemp29;
			let mut iTemp30: i32 = ((((self.fRec42[1] > 0.0) as i32) | iTemp29) | self.iVec14[1]);
			self.fRec44[0] = ((self.fRec44[1] - self.fConst3) * (iTemp30 as f32));
			self.fRec43[0] = ((iTemp30 as f32) * (self.fConst2 + (self.fRec43[1] + self.fRec44[1])));
			self.fRec42[0] = f32::max(0.0, self.fRec43[1]);
			let mut iTemp31: i32 = ((self.iRec2[0] == 28) as i32);
			self.iVec15[0] = iTemp31;
			let mut iTemp32: i32 = ((((self.fRec45[1] > 0.0) as i32) | iTemp31) | self.iVec15[1]);
			self.fRec47[0] = ((self.fRec47[1] - self.fConst3) * (iTemp32 as f32));
			self.fRec46[0] = ((iTemp32 as f32) * (self.fConst2 + (self.fRec46[1] + self.fRec47[1])));
			self.fRec45[0] = f32::max(0.0, self.fRec46[1]);
			let mut iTemp33: i32 = ((self.iRec2[0] == 30) as i32);
			self.iVec16[0] = iTemp33;
			let mut iTemp34: i32 = ((((self.fRec48[1] > 0.0) as i32) | iTemp33) | self.iVec16[1]);
			self.fRec50[0] = ((self.fRec50[1] - self.fConst3) * (iTemp34 as f32));
			self.fRec49[0] = ((iTemp34 as f32) * (self.fConst2 + (self.fRec49[1] + self.fRec50[1])));
			self.fRec48[0] = f32::max(0.0, self.fRec49[1]);
			outputs[0][i as usize] = (((((((((((((((((fSlow0 * (fTemp0 * self.fRec0[0])) + (self.fRec6[0] * self.fVec2[((self.IOTA - self.iConst4) & 524287) as usize])) + (self.fRec9[0] * self.fVec2[((self.IOTA - self.iConst5) & 524287) as usize])) + (self.fRec12[0] * self.fVec2[((self.IOTA - self.iConst6) & 524287) as usize])) + (self.fRec15[0] * self.fVec2[((self.IOTA - self.iConst7) & 524287) as usize])) + (self.fRec18[0] * self.fVec2[((self.IOTA - self.iConst8) & 524287) as usize])) + (self.fRec21[0] * self.fVec2[((self.IOTA - self.iConst9) & 524287) as usize])) + (self.fRec24[0] * self.fVec2[((self.IOTA - self.iConst10) & 524287) as usize])) + (self.fRec27[0] * self.fVec2[((self.IOTA - self.iConst11) & 524287) as usize])) + (self.fRec30[0] * self.fVec2[((self.IOTA - self.iConst12) & 524287) as usize])) + (self.fRec33[0] * self.fVec2[((self.IOTA - self.iConst13) & 524287) as usize])) + (self.fRec36[0] * self.fVec2[((self.IOTA - self.iConst14) & 524287) as usize])) + (self.fRec39[0] * self.fVec2[((self.IOTA - self.iConst15) & 524287) as usize])) + (self.fRec42[0] * self.fVec2[((self.IOTA - self.iConst16) & 524287) as usize])) + (self.fRec45[0] * self.fVec2[((self.IOTA - self.iConst17) & 524287) as usize])) + (self.fRec48[0] * self.fVec2[((self.IOTA - self.iConst18) & 524287) as usize])) as f32);
			let mut iTemp35: i32 = ((self.iRec2[0] == 1) as i32);
			self.iVec17[0] = iTemp35;
			let mut iTemp36: i32 = ((((self.fRec51[1] > 0.0) as i32) | iTemp35) | self.iVec17[1]);
			self.fRec53[0] = ((self.fRec53[1] - self.fConst3) * (iTemp36 as f32));
			self.fRec52[0] = ((iTemp36 as f32) * (self.fConst2 + (self.fRec52[1] + self.fRec53[1])));
			self.fRec51[0] = f32::max(0.0, self.fRec52[1]);
			let mut iTemp37: i32 = ((self.iRec2[0] == 3) as i32);
			self.iVec18[0] = iTemp37;
			let mut iTemp38: i32 = ((((self.fRec54[1] > 0.0) as i32) | iTemp37) | self.iVec18[1]);
			self.fRec56[0] = ((self.fRec56[1] - self.fConst3) * (iTemp38 as f32));
			self.fRec55[0] = ((iTemp38 as f32) * (self.fConst2 + (self.fRec55[1] + self.fRec56[1])));
			self.fRec54[0] = f32::max(0.0, self.fRec55[1]);
			let mut iTemp39: i32 = ((self.iRec2[0] == 5) as i32);
			self.iVec19[0] = iTemp39;
			let mut iTemp40: i32 = ((((self.fRec57[1] > 0.0) as i32) | iTemp39) | self.iVec19[1]);
			self.fRec59[0] = ((self.fRec59[1] - self.fConst3) * (iTemp40 as f32));
			self.fRec58[0] = ((iTemp40 as f32) * (self.fConst2 + (self.fRec58[1] + self.fRec59[1])));
			self.fRec57[0] = f32::max(0.0, self.fRec58[1]);
			let mut iTemp41: i32 = ((self.iRec2[0] == 7) as i32);
			self.iVec20[0] = iTemp41;
			let mut iTemp42: i32 = ((((self.fRec60[1] > 0.0) as i32) | iTemp41) | self.iVec20[1]);
			self.fRec62[0] = ((self.fRec62[1] - self.fConst3) * (iTemp42 as f32));
			self.fRec61[0] = ((iTemp42 as f32) * (self.fConst2 + (self.fRec61[1] + self.fRec62[1])));
			self.fRec60[0] = f32::max(0.0, self.fRec61[1]);
			let mut iTemp43: i32 = ((self.iRec2[0] == 9) as i32);
			self.iVec21[0] = iTemp43;
			let mut iTemp44: i32 = ((((self.fRec63[1] > 0.0) as i32) | iTemp43) | self.iVec21[1]);
			self.fRec65[0] = ((self.fRec65[1] - self.fConst3) * (iTemp44 as f32));
			self.fRec64[0] = ((iTemp44 as f32) * (self.fConst2 + (self.fRec64[1] + self.fRec65[1])));
			self.fRec63[0] = f32::max(0.0, self.fRec64[1]);
			let mut iTemp45: i32 = ((self.iRec2[0] == 11) as i32);
			self.iVec22[0] = iTemp45;
			let mut iTemp46: i32 = ((((self.fRec66[1] > 0.0) as i32) | iTemp45) | self.iVec22[1]);
			self.fRec68[0] = ((self.fRec68[1] - self.fConst3) * (iTemp46 as f32));
			self.fRec67[0] = ((iTemp46 as f32) * (self.fConst2 + (self.fRec67[1] + self.fRec68[1])));
			self.fRec66[0] = f32::max(0.0, self.fRec67[1]);
			let mut iTemp47: i32 = ((self.iRec2[0] == 13) as i32);
			self.iVec23[0] = iTemp47;
			let mut iTemp48: i32 = ((((self.fRec69[1] > 0.0) as i32) | iTemp47) | self.iVec23[1]);
			self.fRec71[0] = ((self.fRec71[1] - self.fConst3) * (iTemp48 as f32));
			self.fRec70[0] = ((iTemp48 as f32) * (self.fConst2 + (self.fRec70[1] + self.fRec71[1])));
			self.fRec69[0] = f32::max(0.0, self.fRec70[1]);
			let mut iTemp49: i32 = ((self.iRec2[0] == 15) as i32);
			self.iVec24[0] = iTemp49;
			let mut iTemp50: i32 = ((((self.fRec72[1] > 0.0) as i32) | iTemp49) | self.iVec24[1]);
			self.fRec74[0] = ((self.fRec74[1] - self.fConst3) * (iTemp50 as f32));
			self.fRec73[0] = ((iTemp50 as f32) * (self.fConst2 + (self.fRec73[1] + self.fRec74[1])));
			self.fRec72[0] = f32::max(0.0, self.fRec73[1]);
			let mut iTemp51: i32 = ((self.iRec2[0] == 17) as i32);
			self.iVec25[0] = iTemp51;
			let mut iTemp52: i32 = ((((self.fRec75[1] > 0.0) as i32) | iTemp51) | self.iVec25[1]);
			self.fRec77[0] = ((self.fRec77[1] - self.fConst3) * (iTemp52 as f32));
			self.fRec76[0] = ((iTemp52 as f32) * (self.fConst2 + (self.fRec76[1] + self.fRec77[1])));
			self.fRec75[0] = f32::max(0.0, self.fRec76[1]);
			let mut iTemp53: i32 = ((self.iRec2[0] == 19) as i32);
			self.iVec26[0] = iTemp53;
			let mut iTemp54: i32 = ((((self.fRec78[1] > 0.0) as i32) | iTemp53) | self.iVec26[1]);
			self.fRec80[0] = ((self.fRec80[1] - self.fConst3) * (iTemp54 as f32));
			self.fRec79[0] = ((iTemp54 as f32) * (self.fConst2 + (self.fRec79[1] + self.fRec80[1])));
			self.fRec78[0] = f32::max(0.0, self.fRec79[1]);
			let mut iTemp55: i32 = ((self.iRec2[0] == 21) as i32);
			self.iVec27[0] = iTemp55;
			let mut iTemp56: i32 = ((((self.fRec81[1] > 0.0) as i32) | iTemp55) | self.iVec27[1]);
			self.fRec83[0] = ((self.fRec83[1] - self.fConst3) * (iTemp56 as f32));
			self.fRec82[0] = ((iTemp56 as f32) * (self.fConst2 + (self.fRec82[1] + self.fRec83[1])));
			self.fRec81[0] = f32::max(0.0, self.fRec82[1]);
			let mut iTemp57: i32 = ((self.iRec2[0] == 23) as i32);
			self.iVec28[0] = iTemp57;
			let mut iTemp58: i32 = ((((self.fRec84[1] > 0.0) as i32) | iTemp57) | self.iVec28[1]);
			self.fRec86[0] = ((self.fRec86[1] - self.fConst3) * (iTemp58 as f32));
			self.fRec85[0] = ((iTemp58 as f32) * (self.fConst2 + (self.fRec85[1] + self.fRec86[1])));
			self.fRec84[0] = f32::max(0.0, self.fRec85[1]);
			let mut iTemp59: i32 = ((self.iRec2[0] == 25) as i32);
			self.iVec29[0] = iTemp59;
			let mut iTemp60: i32 = ((((self.fRec87[1] > 0.0) as i32) | iTemp59) | self.iVec29[1]);
			self.fRec89[0] = ((self.fRec89[1] - self.fConst3) * (iTemp60 as f32));
			self.fRec88[0] = ((iTemp60 as f32) * (self.fConst2 + (self.fRec88[1] + self.fRec89[1])));
			self.fRec87[0] = f32::max(0.0, self.fRec88[1]);
			let mut iTemp61: i32 = ((self.iRec2[0] == 27) as i32);
			self.iVec30[0] = iTemp61;
			let mut iTemp62: i32 = ((((self.fRec90[1] > 0.0) as i32) | iTemp61) | self.iVec30[1]);
			self.fRec92[0] = ((self.fRec92[1] - self.fConst3) * (iTemp62 as f32));
			self.fRec91[0] = ((iTemp62 as f32) * (self.fConst2 + (self.fRec91[1] + self.fRec92[1])));
			self.fRec90[0] = f32::max(0.0, self.fRec91[1]);
			let mut iTemp63: i32 = ((self.iRec2[0] == 29) as i32);
			self.iVec31[0] = iTemp63;
			let mut iTemp64: i32 = ((((self.fRec93[1] > 0.0) as i32) | iTemp63) | self.iVec31[1]);
			self.fRec95[0] = ((self.fRec95[1] - self.fConst3) * (iTemp64 as f32));
			self.fRec94[0] = ((iTemp64 as f32) * (self.fConst2 + (self.fRec94[1] + self.fRec95[1])));
			self.fRec93[0] = f32::max(0.0, self.fRec94[1]);
			let mut iTemp65: i32 = ((self.iRec2[0] == 31) as i32);
			self.iVec32[0] = iTemp65;
			let mut iTemp66: i32 = ((((self.fRec96[1] > 0.0) as i32) | iTemp65) | self.iVec32[1]);
			self.fRec98[0] = ((self.fRec98[1] - self.fConst3) * (iTemp66 as f32));
			self.fRec97[0] = ((iTemp66 as f32) * (self.fConst2 + (self.fRec97[1] + self.fRec98[1])));
			self.fRec96[0] = f32::max(0.0, self.fRec97[1]);
			outputs[1][i as usize] = (((((((((((((((((self.fRec51[0] * self.fVec2[((self.IOTA - self.iConst19) & 524287) as usize]) + (self.fRec54[0] * self.fVec2[((self.IOTA - self.iConst20) & 524287) as usize])) + (self.fRec57[0] * self.fVec2[((self.IOTA - self.iConst21) & 524287) as usize])) + (self.fRec60[0] * self.fVec2[((self.IOTA - self.iConst22) & 524287) as usize])) + (self.fRec63[0] * self.fVec2[((self.IOTA - self.iConst23) & 524287) as usize])) + (self.fRec66[0] * self.fVec2[((self.IOTA - self.iConst24) & 524287) as usize])) + (self.fRec69[0] * self.fVec2[((self.IOTA - self.iConst25) & 524287) as usize])) + (self.fRec72[0] * self.fVec2[((self.IOTA - self.iConst26) & 524287) as usize])) + (self.fRec75[0] * self.fVec2[((self.IOTA - self.iConst27) & 524287) as usize])) + (self.fRec78[0] * self.fVec2[((self.IOTA - self.iConst28) & 524287) as usize])) + (self.fRec81[0] * self.fVec2[((self.IOTA - self.iConst29) & 524287) as usize])) + (self.fRec84[0] * self.fVec2[((self.IOTA - self.iConst30) & 524287) as usize])) + (self.fRec87[0] * self.fVec2[((self.IOTA - self.iConst31) & 524287) as usize])) + (self.fRec90[0] * self.fVec2[((self.IOTA - self.iConst32) & 524287) as usize])) + (self.fRec93[0] * self.fVec2[((self.IOTA - self.iConst33) & 524287) as usize])) + (self.fRec96[0] * self.fVec2[((self.IOTA - self.iConst34) & 524287) as usize])) as f32);
			self.iRec3[1] = self.iRec3[0];
			self.iRec4[1] = self.iRec4[0];
			self.iRec2[1] = self.iRec2[0];
			self.iVec0[1] = self.iVec0[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.iVec1[1] = self.iVec1[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec6[1] = self.fRec6[0];
			self.IOTA = (self.IOTA + 1);
			self.iVec3[1] = self.iVec3[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec9[1] = self.fRec9[0];
			self.iVec4[1] = self.iVec4[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec12[1] = self.fRec12[0];
			self.iVec5[1] = self.iVec5[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec15[1] = self.fRec15[0];
			self.iVec6[1] = self.iVec6[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec18[1] = self.fRec18[0];
			self.iVec7[1] = self.iVec7[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec21[1] = self.fRec21[0];
			self.iVec8[1] = self.iVec8[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec24[1] = self.fRec24[0];
			self.iVec9[1] = self.iVec9[0];
			self.fRec29[1] = self.fRec29[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[1] = self.fRec27[0];
			self.iVec10[1] = self.iVec10[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec31[1] = self.fRec31[0];
			self.fRec30[1] = self.fRec30[0];
			self.iVec11[1] = self.iVec11[0];
			self.fRec35[1] = self.fRec35[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec33[1] = self.fRec33[0];
			self.iVec12[1] = self.iVec12[0];
			self.fRec38[1] = self.fRec38[0];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[1] = self.fRec36[0];
			self.iVec13[1] = self.iVec13[0];
			self.fRec41[1] = self.fRec41[0];
			self.fRec40[1] = self.fRec40[0];
			self.fRec39[1] = self.fRec39[0];
			self.iVec14[1] = self.iVec14[0];
			self.fRec44[1] = self.fRec44[0];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[1] = self.fRec42[0];
			self.iVec15[1] = self.iVec15[0];
			self.fRec47[1] = self.fRec47[0];
			self.fRec46[1] = self.fRec46[0];
			self.fRec45[1] = self.fRec45[0];
			self.iVec16[1] = self.iVec16[0];
			self.fRec50[1] = self.fRec50[0];
			self.fRec49[1] = self.fRec49[0];
			self.fRec48[1] = self.fRec48[0];
			self.iVec17[1] = self.iVec17[0];
			self.fRec53[1] = self.fRec53[0];
			self.fRec52[1] = self.fRec52[0];
			self.fRec51[1] = self.fRec51[0];
			self.iVec18[1] = self.iVec18[0];
			self.fRec56[1] = self.fRec56[0];
			self.fRec55[1] = self.fRec55[0];
			self.fRec54[1] = self.fRec54[0];
			self.iVec19[1] = self.iVec19[0];
			self.fRec59[1] = self.fRec59[0];
			self.fRec58[1] = self.fRec58[0];
			self.fRec57[1] = self.fRec57[0];
			self.iVec20[1] = self.iVec20[0];
			self.fRec62[1] = self.fRec62[0];
			self.fRec61[1] = self.fRec61[0];
			self.fRec60[1] = self.fRec60[0];
			self.iVec21[1] = self.iVec21[0];
			self.fRec65[1] = self.fRec65[0];
			self.fRec64[1] = self.fRec64[0];
			self.fRec63[1] = self.fRec63[0];
			self.iVec22[1] = self.iVec22[0];
			self.fRec68[1] = self.fRec68[0];
			self.fRec67[1] = self.fRec67[0];
			self.fRec66[1] = self.fRec66[0];
			self.iVec23[1] = self.iVec23[0];
			self.fRec71[1] = self.fRec71[0];
			self.fRec70[1] = self.fRec70[0];
			self.fRec69[1] = self.fRec69[0];
			self.iVec24[1] = self.iVec24[0];
			self.fRec74[1] = self.fRec74[0];
			self.fRec73[1] = self.fRec73[0];
			self.fRec72[1] = self.fRec72[0];
			self.iVec25[1] = self.iVec25[0];
			self.fRec77[1] = self.fRec77[0];
			self.fRec76[1] = self.fRec76[0];
			self.fRec75[1] = self.fRec75[0];
			self.iVec26[1] = self.iVec26[0];
			self.fRec80[1] = self.fRec80[0];
			self.fRec79[1] = self.fRec79[0];
			self.fRec78[1] = self.fRec78[0];
			self.iVec27[1] = self.iVec27[0];
			self.fRec83[1] = self.fRec83[0];
			self.fRec82[1] = self.fRec82[0];
			self.fRec81[1] = self.fRec81[0];
			self.iVec28[1] = self.iVec28[0];
			self.fRec86[1] = self.fRec86[0];
			self.fRec85[1] = self.fRec85[0];
			self.fRec84[1] = self.fRec84[0];
			self.iVec29[1] = self.iVec29[0];
			self.fRec89[1] = self.fRec89[0];
			self.fRec88[1] = self.fRec88[0];
			self.fRec87[1] = self.fRec87[0];
			self.iVec30[1] = self.iVec30[0];
			self.fRec92[1] = self.fRec92[0];
			self.fRec91[1] = self.fRec91[0];
			self.fRec90[1] = self.fRec90[0];
			self.iVec31[1] = self.iVec31[0];
			self.fRec95[1] = self.fRec95[0];
			self.fRec94[1] = self.fRec94[0];
			self.fRec93[1] = self.fRec93[0];
			self.iVec32[1] = self.iVec32[0];
			self.fRec98[1] = self.fRec98[0];
			self.fRec97[1] = self.fRec97[0];
			self.fRec96[1] = self.fRec96[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

