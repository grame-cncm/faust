
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}
pub fn mydsp_faustpower3_f(value: f32) -> f32 {
	((value * value) * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	fCheckbox0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider2: f32,
	fHslider3: f32,
	fConst3: f32,
	fHslider4: f32,
	fRec3: [f32;3],
	fHslider5: f32,
	fRec6: [f32;2],
	fRec5: [f32;2],
	fHslider6: f32,
	fRec4: [f32;2],
	fRec2: [f32;2],
	fRec1: [f32;2],
	fRec0: [f32;2],
	fHbargraph0: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fCheckbox0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fConst3: 0.0,
			fHslider4: 0.0,
			fRec3: [0.0;3],
			fHslider5: 0.0,
			fRec6: [0.0;2],
			fRec5: [0.0;2],
			fHslider6: 0.0,
			fRec4: [0.0;2],
			fRec2: [0.0;2],
			fRec1: [0.0;2],
			fRec0: [0.0;2],
			fHbargraph0: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("compressors.lib/name", "Faust Compressor Effect Library");
		m.declare("compressors.lib/version", "0.0");
		m.declare("description", "Psychoacoustic harmonic exciter, with GUI");
		m.declare("exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu), revised by RM");
		m.declare("exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
		m.declare("exciter_license", "MIT License (MIT)");
		m.declare("exciter_name", "harmonicExciter");
		m.declare("exciter_version", "1.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "harmonicExciter");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 20.0;
		self.fCheckbox0 = 0.0;
		self.fHslider2 = 50.0;
		self.fHslider3 = 5.0;
		self.fHslider4 = 5000.0;
		self.fHslider5 = 500.0;
		self.fHslider6 = -30.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec3[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 3) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec6[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec5[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec4[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec1[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (2.0 / self.fConst0);
		self.fConst2 = (1.0 / self.fConst0);
		self.fConst3 = (3.14159274 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("harmonicExciter");
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference:    http://en.wikipedia.org/wiki/Dynamic_range_compression");
		ui_interface.openVerticalBox("COMPRESSOR");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked,   the compressor has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fHbargraph0, "1", "");
		ui_interface.declare(&mut self.fHbargraph0, "tooltip", "Current gain   of the compressor in dB");
		ui_interface.declare(&mut self.fHbargraph0, "unit", "dB");
		ui_interface.addHorizontalBargraph("Compressor Gain", &mut self.fHbargraph0, -50.0, 10.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openHorizontalBox("Compression Control");
		ui_interface.declare(&mut self.fHslider3, "0", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "A compression Ratio  of N means that for each N dB increase in input signal level above Threshold, the  output level goes up 1 dB");
		ui_interface.addHorizontalSlider("Ratio", &mut self.fHslider3, 5.0, 1.0, 20.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider6, "1", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.declare(&mut self.fHslider6, "tooltip", "When the signal level exceeds the Threshold (in dB), its level is compressed  according to the Ratio");
		ui_interface.declare(&mut self.fHslider6, "unit", "dB");
		ui_interface.addHorizontalSlider("Threshold", &mut self.fHslider6, -30.0, -100.0, 10.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "4", "");
		ui_interface.openHorizontalBox("Compression Response");
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach  (exponentially) a new lower target level (the compression `kicking in')");
		ui_interface.declare(&mut self.fHslider2, "unit", "ms");
		ui_interface.addHorizontalSlider("Attack", &mut self.fHslider2, 50.0, 0.0, 500.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider5, "2", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.declare(&mut self.fHslider5, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain to approach  (exponentially) a new higher target level (the compression 'releasing')");
		ui_interface.declare(&mut self.fHslider5, "unit", "ms");
		ui_interface.addHorizontalSlider("Release", &mut self.fHslider5, 500.0, 0.0, 1000.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference: Patent US4150253 A");
		ui_interface.openHorizontalBox("EXCITER");
		ui_interface.declare(&mut self.fHslider4, "0", "");
		ui_interface.declare(&mut self.fHslider4, "scale", "log");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.declare(&mut self.fHslider4, "tooltip", "Cutoff frequency for highpassed components to be excited");
		ui_interface.declare(&mut self.fHslider4, "unit", "Hz");
		ui_interface.addHorizontalSlider("Cutoff Frequency", &mut self.fHslider4, 5000.0, 1000.0, 10000.0, 100.0);
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "Percentage of harmonics generated");
		ui_interface.declare(&mut self.fHslider1, "unit", "percent");
		ui_interface.addHorizontalSlider("Harmonics", &mut self.fHslider1, 20.0, 0.0, 200.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Dry/Wet mix of original signal   to excited signal");
		ui_interface.addHorizontalSlider("Mix", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut fSlow2: f32 = (100.0 * (fSlow0 / fSlow1));
		let mut fSlow3: f32 = (0.00999999978 * fSlow1);
		let mut iSlow4: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow5: f32 = f32::max(self.fConst2, (0.00100000005 * (self.fHslider2 as f32)));
		let mut fSlow6: f32 = f32::exp((0.0 - (self.fConst1 / fSlow5)));
		let mut fSlow7: f32 = (((1.0 / (self.fHslider3 as f32)) + -1.0) * (1.0 - fSlow6));
		let mut fSlow8: f32 = f32::tan((self.fConst3 * (self.fHslider4 as f32)));
		let mut fSlow9: f32 = (1.0 / fSlow8);
		let mut fSlow10: f32 = (1.0 / (((fSlow9 + 1.41421354) / fSlow8) + 1.0));
		let mut fSlow11: f32 = (1.0 / mydsp_faustpower2_f(fSlow8));
		let mut fSlow12: f32 = (2.0 * (0.0 - fSlow11));
		let mut fSlow13: f32 = (((fSlow9 + -1.41421354) / fSlow8) + 1.0);
		let mut fSlow14: f32 = (2.0 * (1.0 - fSlow11));
		let mut fSlow15: f32 = f32::exp((0.0 - (self.fConst2 / fSlow5)));
		let mut fSlow16: f32 = f32::exp((0.0 - (self.fConst2 / f32::max(self.fConst2, (0.00100000005 * (self.fHslider5 as f32))))));
		let mut fSlow17: f32 = (self.fHslider6 as f32);
		let mut fSlow18: f32 = (1.0 - fSlow0);
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fRec3[0] = (fTemp0 - (fSlow10 * ((fSlow13 * self.fRec3[2]) + (fSlow14 * self.fRec3[1]))));
			let mut fTemp1: f32 = (fSlow10 * (((fSlow12 * self.fRec3[1]) + (fSlow11 * self.fRec3[0])) + (fSlow11 * self.fRec3[2])));
			let mut fTemp2: f32 = if (iSlow4 as i32 == 1) { 0.0 } else { fTemp1 };
			let mut fTemp3: f32 = f32::abs(fTemp2);
			let mut fTemp4: f32 = if (((self.fRec5[1] > fTemp3) as i32) as i32 == 1) { fSlow16 } else { fSlow15 };
			self.fRec6[0] = ((self.fRec6[1] * fTemp4) + (fTemp3 * (1.0 - fTemp4)));
			self.fRec5[0] = self.fRec6[0];
			self.fRec4[0] = ((fSlow6 * self.fRec4[1]) + (fSlow7 * f32::max(((20.0 * f32::log10(self.fRec5[0])) - fSlow17), 0.0)));
			let mut fTemp5: f32 = (fTemp2 * f32::powf(10.0, (0.0500000007 * self.fRec4[0])));
			let mut fTemp6: f32 = f32::abs(f32::abs(fTemp5));
			let mut fTemp7: f32 = if (((self.fRec1[1] > fTemp6) as i32) as i32 == 1) { fSlow16 } else { fSlow15 };
			self.fRec2[0] = ((self.fRec2[1] * fTemp7) + (fTemp6 * (1.0 - fTemp7)));
			self.fRec1[0] = self.fRec2[0];
			self.fRec0[0] = ((fSlow6 * self.fRec0[1]) + (fSlow7 * f32::max(((20.0 * f32::log10(self.fRec1[0])) - fSlow17), 0.0)));
			self.fHbargraph0 = ((20.0 * f32::log10(f32::powf(10.0, (0.0500000007 * self.fRec0[0])))) as f32);
			let mut fTemp8: f32 = if (iSlow4 as i32 == 1) { fTemp1 } else { fTemp5 };
			let mut fTemp9: f32 = (fSlow3 * fTemp8);
			outputs[0][i as usize] = (((fSlow2 * (((fSlow3 * (fTemp8 * (((fTemp9 < 0.0) as i32) as f32))) + (((((fTemp9 >= 0.0) as i32) * ((fTemp9 <= 1.0) as i32)) as f32) * (fTemp9 - (0.333333343 * mydsp_faustpower3_f(fTemp9))))) + (0.666666687 * (((fTemp9 > 1.0) as i32) as f32)))) + (fSlow18 * fTemp0)) as f32);
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

