
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fHslider0: f32,
	fRec1: [f32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fRec2: [f32;2],
	fRec3: [f32;2],
	fRec0: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fHslider0: 0.0,
			fRec1: [0.0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fRec2: [0.0;2],
			fRec3: [0.0;2],
			fRec0: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Application demonstrating the CryBaby wah pedal emulation");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "cryBaby");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m.declare("vaeffects.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 0.800000012;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec1[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec3[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1413.71667 / self.fConst0);
		self.fConst2 = (2827.43335 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference:   https://ccrma.stanford.edu/~jos/pasp/vegf.html");
		ui_interface.openHorizontalBox("CRYBABY");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the wah   pedal has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fHslider0, "1", "");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "wah pedal angle between   0 (rocked back) and 1 (rocked forward)");
		ui_interface.addHorizontalSlider("Wah parameter", &mut self.fHslider0, 0.80000000000000004, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = (self.fHslider0 as f32);
		let mut fSlow2: f32 = (9.99999975e-05 * f32::powf(4.0, fSlow1));
		let mut fSlow3: f32 = f32::powf(2.0, (2.29999995 * fSlow1));
		let mut fSlow4: f32 = (1.0 - (self.fConst1 * (fSlow3 / f32::powf(2.0, ((2.0 * (1.0 - fSlow1)) + 1.0)))));
		let mut fSlow5: f32 = (0.00100000005 * (0.0 - (2.0 * (fSlow4 * f32::cos((self.fConst2 * fSlow3))))));
		let mut fSlow6: f32 = (0.00100000005 * mydsp_faustpower2_f(fSlow4));
		let mut i: i32 = 0;
		loop {
			self.fRec1[0] = (fSlow2 + (0.999000013 * self.fRec1[1]));
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fRec2[0] = (fSlow5 + (0.999000013 * self.fRec2[1]));
			self.fRec3[0] = (fSlow6 + (0.999000013 * self.fRec3[1]));
			self.fRec0[0] = ((self.fRec1[0] * if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 }) - ((self.fRec2[0] * self.fRec0[1]) + (self.fRec3[0] * self.fRec0[2])));
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { (self.fRec0[0] - self.fRec0[1]) } as f32);
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

