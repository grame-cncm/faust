


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec0: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec0: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("maxmsp.lib/author", "GRAME");
		m.declare("maxmsp.lib/copyright", "GRAME");
		m.declare("maxmsp.lib/license", "LGPL");
		m.declare("maxmsp.lib/name", "MaxMSP compatibility Library");
		m.declare("maxmsp.lib/version", "1.1");
		m.declare("name", "LPF");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 1000.0;
		self.fHslider1 = 1.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (6.28318548 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("LPF");
		ui_interface.addHorizontalSlider("Freq", &mut self.fHslider0, 1000.0, 100.0, 10000.0, 1.0);
		ui_interface.addHorizontalSlider("Q", &mut self.fHslider1, 1.0, 0.01, 100.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fConst0 * f32::max(0.0, (self.fHslider0 as f32)));
		let mut fSlow1: f32 = f32::cos(fSlow0);
		let mut fSlow2: f32 = (0.5 * (f32::sin(fSlow0) / f32::max(0.00100000005, (self.fHslider1 as f32))));
		let mut fSlow3: f32 = (fSlow2 + 1.0);
		let mut fSlow4: f32 = ((1.0 - fSlow1) / fSlow3);
		let mut fSlow5: f32 = (1.0 / fSlow3);
		let mut fSlow6: f32 = (0.0 - (2.0 * fSlow1));
		let mut fSlow7: f32 = (1.0 - fSlow2);
		let mut i: i32 = 0;
		loop {
			self.fRec0[0] = ((inputs[0][i as usize] as f32) - (fSlow5 * ((fSlow6 * self.fRec0[1]) + (fSlow7 * self.fRec0[2]))));
			outputs[0][i as usize] = ((fSlow4 * ((self.fRec0[1] + (0.5 * self.fRec0[0])) + (0.5 * self.fRec0[2]))) as f32);
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

