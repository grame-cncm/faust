
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fConst6: f32,
	fConst7: f32,
	fConst8: f32,
	fConst9: f32,
	fConst10: f32,
	fVec0: [f32;2],
	fConst11: f32,
	fRec10: [f32;2],
	fConst12: f32,
	fConst13: f32,
	fRec9: [f32;3],
	fConst14: f32,
	fRec8: [f32;3],
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fConst18: f32,
	fConst19: f32,
	fConst20: f32,
	fRec7: [f32;3],
	fConst21: f32,
	fConst22: f32,
	fConst23: f32,
	fConst24: f32,
	fConst25: f32,
	fConst26: f32,
	fRec6: [f32;3],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fConst30: f32,
	fConst31: f32,
	fConst32: f32,
	fRec5: [f32;3],
	fConst33: f32,
	fConst34: f32,
	fConst35: f32,
	fConst36: f32,
	fConst37: f32,
	fConst38: f32,
	fRec4: [f32;3],
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fConst42: f32,
	fConst43: f32,
	fConst44: f32,
	fRec3: [f32;3],
	fConst45: f32,
	fConst46: f32,
	fConst47: f32,
	fConst48: f32,
	fConst49: f32,
	fConst50: f32,
	fRec2: [f32;3],
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fConst54: f32,
	fConst55: f32,
	fConst56: f32,
	fRec1: [f32;3],
	fConst57: f32,
	fConst58: f32,
	fConst59: f32,
	fConst60: f32,
	fConst61: f32,
	fConst62: f32,
	fRec0: [f32;3],
	fVslider0: f32,
	fRec11: [f32;2],
	fConst63: f32,
	fConst64: f32,
	fConst65: f32,
	fConst66: f32,
	fConst67: f32,
	fConst68: f32,
	fConst69: f32,
	fRec24: [f32;2],
	fRec23: [f32;3],
	fRec22: [f32;3],
	fVec1: [f32;2],
	fConst70: f32,
	fRec21: [f32;2],
	fConst71: f32,
	fRec20: [f32;3],
	fConst72: f32,
	fRec19: [f32;3],
	fRec18: [f32;3],
	fRec17: [f32;3],
	fRec16: [f32;3],
	fRec15: [f32;3],
	fRec14: [f32;3],
	fRec13: [f32;3],
	fRec12: [f32;3],
	fVslider1: f32,
	fRec25: [f32;2],
	fConst73: f32,
	fConst74: f32,
	fConst75: f32,
	fConst76: f32,
	fConst77: f32,
	fConst78: f32,
	fConst79: f32,
	fRec37: [f32;2],
	fRec36: [f32;3],
	fRec35: [f32;3],
	fVec2: [f32;2],
	fConst80: f32,
	fRec34: [f32;2],
	fConst81: f32,
	fRec33: [f32;3],
	fConst82: f32,
	fRec32: [f32;3],
	fRec31: [f32;3],
	fRec30: [f32;3],
	fRec29: [f32;3],
	fRec28: [f32;3],
	fRec27: [f32;3],
	fRec26: [f32;3],
	fVslider2: f32,
	fRec38: [f32;2],
	fConst83: f32,
	fConst84: f32,
	fConst85: f32,
	fConst86: f32,
	fConst87: f32,
	fConst88: f32,
	fConst89: f32,
	fRec49: [f32;2],
	fRec48: [f32;3],
	fRec47: [f32;3],
	fVec3: [f32;2],
	fConst90: f32,
	fRec46: [f32;2],
	fConst91: f32,
	fRec45: [f32;3],
	fConst92: f32,
	fRec44: [f32;3],
	fRec43: [f32;3],
	fRec42: [f32;3],
	fRec41: [f32;3],
	fRec40: [f32;3],
	fRec39: [f32;3],
	fVslider3: f32,
	fRec50: [f32;2],
	fConst93: f32,
	fConst94: f32,
	fConst95: f32,
	fConst96: f32,
	fConst97: f32,
	fConst98: f32,
	fConst99: f32,
	fRec60: [f32;2],
	fRec59: [f32;3],
	fRec58: [f32;3],
	fVec4: [f32;2],
	fConst100: f32,
	fRec57: [f32;2],
	fConst101: f32,
	fRec56: [f32;3],
	fConst102: f32,
	fRec55: [f32;3],
	fRec54: [f32;3],
	fRec53: [f32;3],
	fRec52: [f32;3],
	fRec51: [f32;3],
	fVslider4: f32,
	fRec61: [f32;2],
	fConst103: f32,
	fConst104: f32,
	fConst105: f32,
	fConst106: f32,
	fConst107: f32,
	fConst108: f32,
	fConst109: f32,
	fRec70: [f32;2],
	fRec69: [f32;3],
	fRec68: [f32;3],
	fVec5: [f32;2],
	fConst110: f32,
	fRec67: [f32;2],
	fConst111: f32,
	fRec66: [f32;3],
	fConst112: f32,
	fRec65: [f32;3],
	fRec64: [f32;3],
	fRec63: [f32;3],
	fRec62: [f32;3],
	fVslider5: f32,
	fRec71: [f32;2],
	fConst113: f32,
	fConst114: f32,
	fConst115: f32,
	fConst116: f32,
	fConst117: f32,
	fConst118: f32,
	fConst119: f32,
	fRec79: [f32;2],
	fRec78: [f32;3],
	fRec77: [f32;3],
	fVec6: [f32;2],
	fConst120: f32,
	fRec76: [f32;2],
	fConst121: f32,
	fRec75: [f32;3],
	fConst122: f32,
	fRec74: [f32;3],
	fRec73: [f32;3],
	fRec72: [f32;3],
	fVslider6: f32,
	fRec80: [f32;2],
	fConst123: f32,
	fConst124: f32,
	fConst125: f32,
	fConst126: f32,
	fConst127: f32,
	fConst128: f32,
	fConst129: f32,
	fRec87: [f32;2],
	fRec86: [f32;3],
	fRec85: [f32;3],
	fVec7: [f32;2],
	fConst130: f32,
	fRec84: [f32;2],
	fConst131: f32,
	fRec83: [f32;3],
	fConst132: f32,
	fRec82: [f32;3],
	fRec81: [f32;3],
	fVslider7: f32,
	fRec88: [f32;2],
	fConst133: f32,
	fConst134: f32,
	fConst135: f32,
	fConst136: f32,
	fConst137: f32,
	fConst138: f32,
	fRec94: [f32;2],
	fRec93: [f32;3],
	fRec92: [f32;3],
	fVec8: [f32;2],
	fConst139: f32,
	fRec91: [f32;2],
	fConst140: f32,
	fRec90: [f32;3],
	fConst141: f32,
	fRec89: [f32;3],
	fVslider8: f32,
	fRec95: [f32;2],
	fRec98: [f32;2],
	fRec97: [f32;3],
	fRec96: [f32;3],
	fVslider9: f32,
	fRec99: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			fConst7: 0.0,
			fConst8: 0.0,
			fConst9: 0.0,
			fConst10: 0.0,
			fVec0: [0.0;2],
			fConst11: 0.0,
			fRec10: [0.0;2],
			fConst12: 0.0,
			fConst13: 0.0,
			fRec9: [0.0;3],
			fConst14: 0.0,
			fRec8: [0.0;3],
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fConst18: 0.0,
			fConst19: 0.0,
			fConst20: 0.0,
			fRec7: [0.0;3],
			fConst21: 0.0,
			fConst22: 0.0,
			fConst23: 0.0,
			fConst24: 0.0,
			fConst25: 0.0,
			fConst26: 0.0,
			fRec6: [0.0;3],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fConst30: 0.0,
			fConst31: 0.0,
			fConst32: 0.0,
			fRec5: [0.0;3],
			fConst33: 0.0,
			fConst34: 0.0,
			fConst35: 0.0,
			fConst36: 0.0,
			fConst37: 0.0,
			fConst38: 0.0,
			fRec4: [0.0;3],
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fConst42: 0.0,
			fConst43: 0.0,
			fConst44: 0.0,
			fRec3: [0.0;3],
			fConst45: 0.0,
			fConst46: 0.0,
			fConst47: 0.0,
			fConst48: 0.0,
			fConst49: 0.0,
			fConst50: 0.0,
			fRec2: [0.0;3],
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fConst54: 0.0,
			fConst55: 0.0,
			fConst56: 0.0,
			fRec1: [0.0;3],
			fConst57: 0.0,
			fConst58: 0.0,
			fConst59: 0.0,
			fConst60: 0.0,
			fConst61: 0.0,
			fConst62: 0.0,
			fRec0: [0.0;3],
			fVslider0: 0.0,
			fRec11: [0.0;2],
			fConst63: 0.0,
			fConst64: 0.0,
			fConst65: 0.0,
			fConst66: 0.0,
			fConst67: 0.0,
			fConst68: 0.0,
			fConst69: 0.0,
			fRec24: [0.0;2],
			fRec23: [0.0;3],
			fRec22: [0.0;3],
			fVec1: [0.0;2],
			fConst70: 0.0,
			fRec21: [0.0;2],
			fConst71: 0.0,
			fRec20: [0.0;3],
			fConst72: 0.0,
			fRec19: [0.0;3],
			fRec18: [0.0;3],
			fRec17: [0.0;3],
			fRec16: [0.0;3],
			fRec15: [0.0;3],
			fRec14: [0.0;3],
			fRec13: [0.0;3],
			fRec12: [0.0;3],
			fVslider1: 0.0,
			fRec25: [0.0;2],
			fConst73: 0.0,
			fConst74: 0.0,
			fConst75: 0.0,
			fConst76: 0.0,
			fConst77: 0.0,
			fConst78: 0.0,
			fConst79: 0.0,
			fRec37: [0.0;2],
			fRec36: [0.0;3],
			fRec35: [0.0;3],
			fVec2: [0.0;2],
			fConst80: 0.0,
			fRec34: [0.0;2],
			fConst81: 0.0,
			fRec33: [0.0;3],
			fConst82: 0.0,
			fRec32: [0.0;3],
			fRec31: [0.0;3],
			fRec30: [0.0;3],
			fRec29: [0.0;3],
			fRec28: [0.0;3],
			fRec27: [0.0;3],
			fRec26: [0.0;3],
			fVslider2: 0.0,
			fRec38: [0.0;2],
			fConst83: 0.0,
			fConst84: 0.0,
			fConst85: 0.0,
			fConst86: 0.0,
			fConst87: 0.0,
			fConst88: 0.0,
			fConst89: 0.0,
			fRec49: [0.0;2],
			fRec48: [0.0;3],
			fRec47: [0.0;3],
			fVec3: [0.0;2],
			fConst90: 0.0,
			fRec46: [0.0;2],
			fConst91: 0.0,
			fRec45: [0.0;3],
			fConst92: 0.0,
			fRec44: [0.0;3],
			fRec43: [0.0;3],
			fRec42: [0.0;3],
			fRec41: [0.0;3],
			fRec40: [0.0;3],
			fRec39: [0.0;3],
			fVslider3: 0.0,
			fRec50: [0.0;2],
			fConst93: 0.0,
			fConst94: 0.0,
			fConst95: 0.0,
			fConst96: 0.0,
			fConst97: 0.0,
			fConst98: 0.0,
			fConst99: 0.0,
			fRec60: [0.0;2],
			fRec59: [0.0;3],
			fRec58: [0.0;3],
			fVec4: [0.0;2],
			fConst100: 0.0,
			fRec57: [0.0;2],
			fConst101: 0.0,
			fRec56: [0.0;3],
			fConst102: 0.0,
			fRec55: [0.0;3],
			fRec54: [0.0;3],
			fRec53: [0.0;3],
			fRec52: [0.0;3],
			fRec51: [0.0;3],
			fVslider4: 0.0,
			fRec61: [0.0;2],
			fConst103: 0.0,
			fConst104: 0.0,
			fConst105: 0.0,
			fConst106: 0.0,
			fConst107: 0.0,
			fConst108: 0.0,
			fConst109: 0.0,
			fRec70: [0.0;2],
			fRec69: [0.0;3],
			fRec68: [0.0;3],
			fVec5: [0.0;2],
			fConst110: 0.0,
			fRec67: [0.0;2],
			fConst111: 0.0,
			fRec66: [0.0;3],
			fConst112: 0.0,
			fRec65: [0.0;3],
			fRec64: [0.0;3],
			fRec63: [0.0;3],
			fRec62: [0.0;3],
			fVslider5: 0.0,
			fRec71: [0.0;2],
			fConst113: 0.0,
			fConst114: 0.0,
			fConst115: 0.0,
			fConst116: 0.0,
			fConst117: 0.0,
			fConst118: 0.0,
			fConst119: 0.0,
			fRec79: [0.0;2],
			fRec78: [0.0;3],
			fRec77: [0.0;3],
			fVec6: [0.0;2],
			fConst120: 0.0,
			fRec76: [0.0;2],
			fConst121: 0.0,
			fRec75: [0.0;3],
			fConst122: 0.0,
			fRec74: [0.0;3],
			fRec73: [0.0;3],
			fRec72: [0.0;3],
			fVslider6: 0.0,
			fRec80: [0.0;2],
			fConst123: 0.0,
			fConst124: 0.0,
			fConst125: 0.0,
			fConst126: 0.0,
			fConst127: 0.0,
			fConst128: 0.0,
			fConst129: 0.0,
			fRec87: [0.0;2],
			fRec86: [0.0;3],
			fRec85: [0.0;3],
			fVec7: [0.0;2],
			fConst130: 0.0,
			fRec84: [0.0;2],
			fConst131: 0.0,
			fRec83: [0.0;3],
			fConst132: 0.0,
			fRec82: [0.0;3],
			fRec81: [0.0;3],
			fVslider7: 0.0,
			fRec88: [0.0;2],
			fConst133: 0.0,
			fConst134: 0.0,
			fConst135: 0.0,
			fConst136: 0.0,
			fConst137: 0.0,
			fConst138: 0.0,
			fRec94: [0.0;2],
			fRec93: [0.0;3],
			fRec92: [0.0;3],
			fVec8: [0.0;2],
			fConst139: 0.0,
			fRec91: [0.0;2],
			fConst140: 0.0,
			fRec90: [0.0;3],
			fConst141: 0.0,
			fRec89: [0.0;3],
			fVslider8: 0.0,
			fRec95: [0.0;2],
			fRec98: [0.0;2],
			fRec97: [0.0;3],
			fRec96: [0.0;3],
			fVslider9: 0.0,
			fRec99: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Graphic Equalizer consisting of a filter-bank driving a bank of faders");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "filterBank");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fVslider0 = -10.0;
		self.fVslider1 = -10.0;
		self.fVslider2 = -10.0;
		self.fVslider3 = -10.0;
		self.fVslider4 = -10.0;
		self.fVslider5 = -10.0;
		self.fVslider6 = -10.0;
		self.fVslider7 = -10.0;
		self.fVslider8 = -10.0;
		self.fVslider9 = -10.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec10[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec9[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec8[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec7[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec6[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 3) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec5[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec4[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec3[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec2[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec1[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec0[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec11[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec24[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec23[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec22[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fVec1[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec21[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec20[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec19[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec18[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec17[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec16[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 3) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec15[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec14[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec13[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec12[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec25[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec37[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec36[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 3) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec35[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 3) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fVec2[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec34[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec33[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 3) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec32[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 3) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec31[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec30[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 3) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec29[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 3) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec28[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 3) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec27[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec26[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec38[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec49[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec48[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 3) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec47[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fVec3[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec46[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec45[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec44[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec43[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 3) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec42[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 3) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec41[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec40[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 3) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec39[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 3) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec50[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 2) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec60[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec59[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 3) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec58[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 3) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fVec4[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec57[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fRec56[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 3) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec55[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 3) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec54[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 3) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec53[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 3) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec52[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 3) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec51[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 3) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fRec61[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec70[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 2) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fRec69[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 3) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec68[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 3) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fVec5[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 2) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec67[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 2) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.fRec66[l72 as usize] = 0.0;
			l72 = (l72 + 1);
			if (l72 < 3) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.fRec65[l73 as usize] = 0.0;
			l73 = (l73 + 1);
			if (l73 < 3) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fRec64[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 3) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec63[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 3) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.fRec62[l76 as usize] = 0.0;
			l76 = (l76 + 1);
			if (l76 < 3) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fRec71[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 2) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec79[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 2) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec78[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 3) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.fRec77[l80 as usize] = 0.0;
			l80 = (l80 + 1);
			if (l80 < 3) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fVec6[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 2) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec76[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 2) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.fRec75[l83 as usize] = 0.0;
			l83 = (l83 + 1);
			if (l83 < 3) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.fRec74[l84 as usize] = 0.0;
			l84 = (l84 + 1);
			if (l84 < 3) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec73[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 3) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.fRec72[l86 as usize] = 0.0;
			l86 = (l86 + 1);
			if (l86 < 3) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec80[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 2) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.fRec87[l88 as usize] = 0.0;
			l88 = (l88 + 1);
			if (l88 < 2) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec86[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 3) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.fRec85[l90 as usize] = 0.0;
			l90 = (l90 + 1);
			if (l90 < 3) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fVec7[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 2) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.fRec84[l92 as usize] = 0.0;
			l92 = (l92 + 1);
			if (l92 < 2) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fRec83[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 3) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fRec82[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 3) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec81[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 3) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.fRec88[l96 as usize] = 0.0;
			l96 = (l96 + 1);
			if (l96 < 2) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec94[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 2) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec93[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 3) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fRec92[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 3) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.fVec8[l100 as usize] = 0.0;
			l100 = (l100 + 1);
			if (l100 < 2) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec91[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 2) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec90[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 3) { continue; } else { break; }
		}
		let mut l103: i32 = 0;
		loop {
			self.fRec89[l103 as usize] = 0.0;
			l103 = (l103 + 1);
			if (l103 < 3) { continue; } else { break; }
		}
		let mut l104: i32 = 0;
		loop {
			self.fRec95[l104 as usize] = 0.0;
			l104 = (l104 + 1);
			if (l104 < 2) { continue; } else { break; }
		}
		let mut l105: i32 = 0;
		loop {
			self.fRec98[l105 as usize] = 0.0;
			l105 = (l105 + 1);
			if (l105 < 2) { continue; } else { break; }
		}
		let mut l106: i32 = 0;
		loop {
			self.fRec97[l106 as usize] = 0.0;
			l106 = (l106 + 1);
			if (l106 < 3) { continue; } else { break; }
		}
		let mut l107: i32 = 0;
		loop {
			self.fRec96[l107 as usize] = 0.0;
			l107 = (l107 + 1);
			if (l107 < 3) { continue; } else { break; }
		}
		let mut l108: i32 = 0;
		loop {
			self.fRec99[l108 as usize] = 0.0;
			l108 = (l108 + 1);
			if (l108 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((31415.9258 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (((self.fConst2 + 0.618034005) / self.fConst1) + 1.0);
		self.fConst4 = (1.0 / self.fConst3);
		self.fConst5 = (1.0 / mydsp_faustpower2_f(self.fConst1));
		self.fConst6 = (2.0 * (0.0 - self.fConst5));
		self.fConst7 = (1.0 / (((self.fConst2 + 1.61803401) / self.fConst1) + 1.0));
		self.fConst8 = (self.fConst2 + 1.0);
		self.fConst9 = (0.0 - ((1.0 - self.fConst2) / self.fConst8));
		self.fConst10 = (1.0 / self.fConst8);
		self.fConst11 = (0.0 - self.fConst2);
		self.fConst12 = (2.0 * (1.0 - self.fConst5));
		self.fConst13 = (((self.fConst2 + -1.61803401) / self.fConst1) + 1.0);
		self.fConst14 = (((self.fConst2 + -0.618034005) / self.fConst1) + 1.0);
		self.fConst15 = f32::tan((122.71846 / self.fConst0));
		self.fConst16 = (1.0 / self.fConst15);
		self.fConst17 = (1.0 / (((self.fConst16 + 1.61803401) / self.fConst15) + 1.0));
		self.fConst18 = (((self.fConst16 + -1.61803401) / self.fConst15) + 1.0);
		self.fConst19 = (1.0 / mydsp_faustpower2_f(self.fConst15));
		self.fConst20 = (2.0 * (1.0 - self.fConst19));
		self.fConst21 = f32::tan((245.43692 / self.fConst0));
		self.fConst22 = (1.0 / self.fConst21);
		self.fConst23 = (1.0 / (((self.fConst22 + 1.61803401) / self.fConst21) + 1.0));
		self.fConst24 = (((self.fConst22 + -1.61803401) / self.fConst21) + 1.0);
		self.fConst25 = (1.0 / mydsp_faustpower2_f(self.fConst21));
		self.fConst26 = (2.0 * (1.0 - self.fConst25));
		self.fConst27 = f32::tan((490.87384 / self.fConst0));
		self.fConst28 = (1.0 / self.fConst27);
		self.fConst29 = (1.0 / (((self.fConst28 + 1.61803401) / self.fConst27) + 1.0));
		self.fConst30 = (((self.fConst28 + -1.61803401) / self.fConst27) + 1.0);
		self.fConst31 = (1.0 / mydsp_faustpower2_f(self.fConst27));
		self.fConst32 = (2.0 * (1.0 - self.fConst31));
		self.fConst33 = f32::tan((981.747681 / self.fConst0));
		self.fConst34 = (1.0 / self.fConst33);
		self.fConst35 = (1.0 / (((self.fConst34 + 1.61803401) / self.fConst33) + 1.0));
		self.fConst36 = (((self.fConst34 + -1.61803401) / self.fConst33) + 1.0);
		self.fConst37 = (1.0 / mydsp_faustpower2_f(self.fConst33));
		self.fConst38 = (2.0 * (1.0 - self.fConst37));
		self.fConst39 = f32::tan((1963.49536 / self.fConst0));
		self.fConst40 = (1.0 / self.fConst39);
		self.fConst41 = (1.0 / (((self.fConst40 + 1.61803401) / self.fConst39) + 1.0));
		self.fConst42 = (((self.fConst40 + -1.61803401) / self.fConst39) + 1.0);
		self.fConst43 = (1.0 / mydsp_faustpower2_f(self.fConst39));
		self.fConst44 = (2.0 * (1.0 - self.fConst43));
		self.fConst45 = f32::tan((3926.99072 / self.fConst0));
		self.fConst46 = (1.0 / self.fConst45);
		self.fConst47 = (1.0 / (((self.fConst46 + 1.61803401) / self.fConst45) + 1.0));
		self.fConst48 = (((self.fConst46 + -1.61803401) / self.fConst45) + 1.0);
		self.fConst49 = (1.0 / mydsp_faustpower2_f(self.fConst45));
		self.fConst50 = (2.0 * (1.0 - self.fConst49));
		self.fConst51 = f32::tan((7853.98145 / self.fConst0));
		self.fConst52 = (1.0 / self.fConst51);
		self.fConst53 = (1.0 / (((self.fConst52 + 1.61803401) / self.fConst51) + 1.0));
		self.fConst54 = (((self.fConst52 + -1.61803401) / self.fConst51) + 1.0);
		self.fConst55 = (1.0 / mydsp_faustpower2_f(self.fConst51));
		self.fConst56 = (2.0 * (1.0 - self.fConst55));
		self.fConst57 = f32::tan((15707.9629 / self.fConst0));
		self.fConst58 = (1.0 / self.fConst57);
		self.fConst59 = (1.0 / (((self.fConst58 + 1.61803401) / self.fConst57) + 1.0));
		self.fConst60 = (((self.fConst58 + -1.61803401) / self.fConst57) + 1.0);
		self.fConst61 = (1.0 / mydsp_faustpower2_f(self.fConst57));
		self.fConst62 = (2.0 * (1.0 - self.fConst61));
		self.fConst63 = (((self.fConst58 + 0.618034005) / self.fConst57) + 1.0);
		self.fConst64 = (1.0 / self.fConst63);
		self.fConst65 = (2.0 * (0.0 - self.fConst61));
		self.fConst66 = (1.0 / (((self.fConst58 + 1.61803401) / self.fConst57) + 1.0));
		self.fConst67 = (self.fConst58 + 1.0);
		self.fConst68 = (0.0 - ((1.0 - self.fConst58) / self.fConst67));
		self.fConst69 = (1.0 / (self.fConst3 * self.fConst67));
		self.fConst70 = (0.0 - self.fConst58);
		self.fConst71 = (((self.fConst58 + -1.61803401) / self.fConst57) + 1.0);
		self.fConst72 = (((self.fConst58 + -0.618034005) / self.fConst57) + 1.0);
		self.fConst73 = (((self.fConst52 + 0.618034005) / self.fConst51) + 1.0);
		self.fConst74 = (1.0 / self.fConst73);
		self.fConst75 = (2.0 * (0.0 - self.fConst55));
		self.fConst76 = (1.0 / (((self.fConst52 + 1.61803401) / self.fConst51) + 1.0));
		self.fConst77 = (self.fConst52 + 1.0);
		self.fConst78 = (0.0 - ((1.0 - self.fConst52) / self.fConst77));
		self.fConst79 = (1.0 / (self.fConst63 * self.fConst77));
		self.fConst80 = (0.0 - self.fConst52);
		self.fConst81 = (((self.fConst52 + -1.61803401) / self.fConst51) + 1.0);
		self.fConst82 = (((self.fConst52 + -0.618034005) / self.fConst51) + 1.0);
		self.fConst83 = (((self.fConst46 + 0.618034005) / self.fConst45) + 1.0);
		self.fConst84 = (1.0 / self.fConst83);
		self.fConst85 = (2.0 * (0.0 - self.fConst49));
		self.fConst86 = (1.0 / (((self.fConst46 + 1.61803401) / self.fConst45) + 1.0));
		self.fConst87 = (self.fConst46 + 1.0);
		self.fConst88 = (0.0 - ((1.0 - self.fConst46) / self.fConst87));
		self.fConst89 = (1.0 / (self.fConst73 * self.fConst87));
		self.fConst90 = (0.0 - self.fConst46);
		self.fConst91 = (((self.fConst46 + -1.61803401) / self.fConst45) + 1.0);
		self.fConst92 = (((self.fConst46 + -0.618034005) / self.fConst45) + 1.0);
		self.fConst93 = (((self.fConst40 + 0.618034005) / self.fConst39) + 1.0);
		self.fConst94 = (1.0 / self.fConst93);
		self.fConst95 = (2.0 * (0.0 - self.fConst43));
		self.fConst96 = (1.0 / (((self.fConst40 + 1.61803401) / self.fConst39) + 1.0));
		self.fConst97 = (self.fConst40 + 1.0);
		self.fConst98 = (0.0 - ((1.0 - self.fConst40) / self.fConst97));
		self.fConst99 = (1.0 / (self.fConst83 * self.fConst97));
		self.fConst100 = (0.0 - self.fConst40);
		self.fConst101 = (((self.fConst40 + -1.61803401) / self.fConst39) + 1.0);
		self.fConst102 = (((self.fConst40 + -0.618034005) / self.fConst39) + 1.0);
		self.fConst103 = (((self.fConst34 + 0.618034005) / self.fConst33) + 1.0);
		self.fConst104 = (1.0 / self.fConst103);
		self.fConst105 = (2.0 * (0.0 - self.fConst37));
		self.fConst106 = (1.0 / (((self.fConst34 + 1.61803401) / self.fConst33) + 1.0));
		self.fConst107 = (self.fConst34 + 1.0);
		self.fConst108 = (0.0 - ((1.0 - self.fConst34) / self.fConst107));
		self.fConst109 = (1.0 / (self.fConst93 * self.fConst107));
		self.fConst110 = (0.0 - self.fConst34);
		self.fConst111 = (((self.fConst34 + -1.61803401) / self.fConst33) + 1.0);
		self.fConst112 = (((self.fConst34 + -0.618034005) / self.fConst33) + 1.0);
		self.fConst113 = (((self.fConst28 + 0.618034005) / self.fConst27) + 1.0);
		self.fConst114 = (1.0 / self.fConst113);
		self.fConst115 = (2.0 * (0.0 - self.fConst31));
		self.fConst116 = (1.0 / (((self.fConst28 + 1.61803401) / self.fConst27) + 1.0));
		self.fConst117 = (self.fConst28 + 1.0);
		self.fConst118 = (0.0 - ((1.0 - self.fConst28) / self.fConst117));
		self.fConst119 = (1.0 / (self.fConst103 * self.fConst117));
		self.fConst120 = (0.0 - self.fConst28);
		self.fConst121 = (((self.fConst28 + -1.61803401) / self.fConst27) + 1.0);
		self.fConst122 = (((self.fConst28 + -0.618034005) / self.fConst27) + 1.0);
		self.fConst123 = (((self.fConst22 + 0.618034005) / self.fConst21) + 1.0);
		self.fConst124 = (1.0 / self.fConst123);
		self.fConst125 = (2.0 * (0.0 - self.fConst25));
		self.fConst126 = (1.0 / (((self.fConst22 + 1.61803401) / self.fConst21) + 1.0));
		self.fConst127 = (self.fConst22 + 1.0);
		self.fConst128 = (0.0 - ((1.0 - self.fConst22) / self.fConst127));
		self.fConst129 = (1.0 / (self.fConst113 * self.fConst127));
		self.fConst130 = (0.0 - self.fConst22);
		self.fConst131 = (((self.fConst22 + -1.61803401) / self.fConst21) + 1.0);
		self.fConst132 = (((self.fConst22 + -0.618034005) / self.fConst21) + 1.0);
		self.fConst133 = (1.0 / (((self.fConst16 + 0.618034005) / self.fConst15) + 1.0));
		self.fConst134 = (2.0 * (0.0 - self.fConst19));
		self.fConst135 = (1.0 / (((self.fConst16 + 1.61803401) / self.fConst15) + 1.0));
		self.fConst136 = (self.fConst16 + 1.0);
		self.fConst137 = (0.0 - ((1.0 - self.fConst16) / self.fConst136));
		self.fConst138 = (1.0 / (self.fConst123 * self.fConst136));
		self.fConst139 = (0.0 - self.fConst16);
		self.fConst140 = (((self.fConst16 + -1.61803401) / self.fConst15) + 1.0);
		self.fConst141 = (((self.fConst16 + -0.618034005) / self.fConst15) + 1.0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface.openVerticalBox("CONSTANT-Q FILTER BANK (Butterworth dyadic tree)");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the filter-bank has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider9, "1", "");
		ui_interface.declare(&mut self.fVslider9, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider9, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider9, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider8, "2", "");
		ui_interface.declare(&mut self.fVslider8, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider8, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider8, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider7, "3", "");
		ui_interface.declare(&mut self.fVslider7, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider7, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider7, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider6, "4", "");
		ui_interface.declare(&mut self.fVslider6, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider6, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider6, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider5, "5", "");
		ui_interface.declare(&mut self.fVslider5, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider5, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider5, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider4, "6", "");
		ui_interface.declare(&mut self.fVslider4, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider4, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider4, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider3, "7", "");
		ui_interface.declare(&mut self.fVslider3, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider3, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider3, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider2, "8", "");
		ui_interface.declare(&mut self.fVslider2, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider2, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider2, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider1, "9", "");
		ui_interface.declare(&mut self.fVslider1, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider1, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider1, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider0, "10", "");
		ui_interface.declare(&mut self.fVslider0, "tooltip", "Bandpass filter   gain in dB");
		ui_interface.declare(&mut self.fVslider0, "unit", "dB");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider0, -10.0, -70.0, 10.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = (0.00100000005 * (self.fVslider0 as f32));
		let mut fSlow2: f32 = (0.00100000005 * (self.fVslider1 as f32));
		let mut fSlow3: f32 = (0.00100000005 * (self.fVslider2 as f32));
		let mut fSlow4: f32 = (0.00100000005 * (self.fVslider3 as f32));
		let mut fSlow5: f32 = (0.00100000005 * (self.fVslider4 as f32));
		let mut fSlow6: f32 = (0.00100000005 * (self.fVslider5 as f32));
		let mut fSlow7: f32 = (0.00100000005 * (self.fVslider6 as f32));
		let mut fSlow8: f32 = (0.00100000005 * (self.fVslider7 as f32));
		let mut fSlow9: f32 = (0.00100000005 * (self.fVslider8 as f32));
		let mut fSlow10: f32 = (0.00100000005 * (self.fVslider9 as f32));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 };
			self.fVec0[0] = fTemp1;
			self.fRec10[0] = ((self.fConst9 * self.fRec10[1]) + (self.fConst10 * ((self.fConst2 * fTemp1) + (self.fConst11 * self.fVec0[1]))));
			self.fRec9[0] = (self.fRec10[0] - (self.fConst7 * ((self.fConst12 * self.fRec9[1]) + (self.fConst13 * self.fRec9[2]))));
			self.fRec8[0] = ((self.fConst7 * (((self.fConst5 * self.fRec9[0]) + (self.fConst6 * self.fRec9[1])) + (self.fConst5 * self.fRec9[2]))) - (self.fConst4 * ((self.fConst12 * self.fRec8[1]) + (self.fConst14 * self.fRec8[2]))));
			let mut fTemp2: f32 = (self.fConst20 * self.fRec7[1]);
			self.fRec7[0] = ((self.fConst4 * (((self.fConst6 * self.fRec8[1]) + (self.fConst5 * self.fRec8[0])) + (self.fConst5 * self.fRec8[2]))) - (self.fConst17 * ((self.fConst18 * self.fRec7[2]) + fTemp2)));
			let mut fTemp3: f32 = (self.fConst26 * self.fRec6[1]);
			self.fRec6[0] = ((self.fRec7[2] + (self.fConst17 * (fTemp2 + (self.fConst18 * self.fRec7[0])))) - (self.fConst23 * ((self.fConst24 * self.fRec6[2]) + fTemp3)));
			let mut fTemp4: f32 = (self.fConst32 * self.fRec5[1]);
			self.fRec5[0] = ((self.fRec6[2] + (self.fConst23 * (fTemp3 + (self.fConst24 * self.fRec6[0])))) - (self.fConst29 * ((self.fConst30 * self.fRec5[2]) + fTemp4)));
			let mut fTemp5: f32 = (self.fConst38 * self.fRec4[1]);
			self.fRec4[0] = ((self.fRec5[2] + (self.fConst29 * (fTemp4 + (self.fConst30 * self.fRec5[0])))) - (self.fConst35 * ((self.fConst36 * self.fRec4[2]) + fTemp5)));
			let mut fTemp6: f32 = (self.fConst44 * self.fRec3[1]);
			self.fRec3[0] = ((self.fRec4[2] + (self.fConst35 * (fTemp5 + (self.fConst36 * self.fRec4[0])))) - (self.fConst41 * ((self.fConst42 * self.fRec3[2]) + fTemp6)));
			let mut fTemp7: f32 = (self.fConst50 * self.fRec2[1]);
			self.fRec2[0] = ((self.fRec3[2] + (self.fConst41 * (fTemp6 + (self.fConst42 * self.fRec3[0])))) - (self.fConst47 * ((self.fConst48 * self.fRec2[2]) + fTemp7)));
			let mut fTemp8: f32 = (self.fConst56 * self.fRec1[1]);
			self.fRec1[0] = ((self.fRec2[2] + (self.fConst47 * (fTemp7 + (self.fConst48 * self.fRec2[0])))) - (self.fConst53 * ((self.fConst54 * self.fRec1[2]) + fTemp8)));
			let mut fTemp9: f32 = (self.fConst62 * self.fRec0[1]);
			self.fRec0[0] = ((self.fRec1[2] + (self.fConst53 * (fTemp8 + (self.fConst54 * self.fRec1[0])))) - (self.fConst59 * ((self.fConst60 * self.fRec0[2]) + fTemp9)));
			self.fRec11[0] = (fSlow1 + (0.999000013 * self.fRec11[1]));
			self.fRec24[0] = ((self.fConst9 * self.fRec24[1]) + (self.fConst10 * (fTemp1 + self.fVec0[1])));
			self.fRec23[0] = (self.fRec24[0] - (self.fConst7 * ((self.fConst12 * self.fRec23[1]) + (self.fConst13 * self.fRec23[2]))));
			self.fRec22[0] = ((self.fConst7 * (self.fRec23[2] + (self.fRec23[0] + (2.0 * self.fRec23[1])))) - (self.fConst4 * ((self.fConst12 * self.fRec22[1]) + (self.fConst14 * self.fRec22[2]))));
			let mut fTemp10: f32 = (self.fRec22[2] + (self.fRec22[0] + (2.0 * self.fRec22[1])));
			self.fVec1[0] = fTemp10;
			self.fRec21[0] = ((self.fConst68 * self.fRec21[1]) + (self.fConst69 * ((self.fConst58 * fTemp10) + (self.fConst70 * self.fVec1[1]))));
			self.fRec20[0] = (self.fRec21[0] - (self.fConst66 * ((self.fConst62 * self.fRec20[1]) + (self.fConst71 * self.fRec20[2]))));
			self.fRec19[0] = ((self.fConst66 * (((self.fConst61 * self.fRec20[0]) + (self.fConst65 * self.fRec20[1])) + (self.fConst61 * self.fRec20[2]))) - (self.fConst64 * ((self.fConst62 * self.fRec19[1]) + (self.fConst72 * self.fRec19[2]))));
			let mut fTemp11: f32 = (self.fConst20 * self.fRec18[1]);
			self.fRec18[0] = ((self.fConst64 * (((self.fConst65 * self.fRec19[1]) + (self.fConst61 * self.fRec19[0])) + (self.fConst61 * self.fRec19[2]))) - (self.fConst17 * (fTemp11 + (self.fConst18 * self.fRec18[2]))));
			let mut fTemp12: f32 = (self.fConst26 * self.fRec17[1]);
			self.fRec17[0] = ((self.fRec18[2] + (self.fConst17 * (fTemp11 + (self.fConst18 * self.fRec18[0])))) - (self.fConst23 * (fTemp12 + (self.fConst24 * self.fRec17[2]))));
			let mut fTemp13: f32 = (self.fConst32 * self.fRec16[1]);
			self.fRec16[0] = ((self.fRec17[2] + (self.fConst23 * (fTemp12 + (self.fConst24 * self.fRec17[0])))) - (self.fConst29 * (fTemp13 + (self.fConst30 * self.fRec16[2]))));
			let mut fTemp14: f32 = (self.fConst38 * self.fRec15[1]);
			self.fRec15[0] = ((self.fRec16[2] + (self.fConst29 * (fTemp13 + (self.fConst30 * self.fRec16[0])))) - (self.fConst35 * (fTemp14 + (self.fConst36 * self.fRec15[2]))));
			let mut fTemp15: f32 = (self.fConst44 * self.fRec14[1]);
			self.fRec14[0] = ((self.fRec15[2] + (self.fConst35 * (fTemp14 + (self.fConst36 * self.fRec15[0])))) - (self.fConst41 * (fTemp15 + (self.fConst42 * self.fRec14[2]))));
			let mut fTemp16: f32 = (self.fConst50 * self.fRec13[1]);
			self.fRec13[0] = ((self.fRec14[2] + (self.fConst41 * (fTemp15 + (self.fConst42 * self.fRec14[0])))) - (self.fConst47 * (fTemp16 + (self.fConst48 * self.fRec13[2]))));
			let mut fTemp17: f32 = (self.fConst56 * self.fRec12[1]);
			self.fRec12[0] = ((self.fRec13[2] + (self.fConst47 * (fTemp16 + (self.fConst48 * self.fRec13[0])))) - (self.fConst53 * (fTemp17 + (self.fConst54 * self.fRec12[2]))));
			self.fRec25[0] = (fSlow2 + (0.999000013 * self.fRec25[1]));
			self.fRec37[0] = ((self.fConst68 * self.fRec37[1]) + (self.fConst69 * (fTemp10 + self.fVec1[1])));
			self.fRec36[0] = (self.fRec37[0] - (self.fConst66 * ((self.fConst62 * self.fRec36[1]) + (self.fConst71 * self.fRec36[2]))));
			self.fRec35[0] = ((self.fConst66 * (self.fRec36[2] + (self.fRec36[0] + (2.0 * self.fRec36[1])))) - (self.fConst64 * ((self.fConst62 * self.fRec35[1]) + (self.fConst72 * self.fRec35[2]))));
			let mut fTemp18: f32 = (self.fRec35[2] + (self.fRec35[0] + (2.0 * self.fRec35[1])));
			self.fVec2[0] = fTemp18;
			self.fRec34[0] = ((self.fConst78 * self.fRec34[1]) + (self.fConst79 * ((self.fConst52 * fTemp18) + (self.fConst80 * self.fVec2[1]))));
			self.fRec33[0] = (self.fRec34[0] - (self.fConst76 * ((self.fConst56 * self.fRec33[1]) + (self.fConst81 * self.fRec33[2]))));
			self.fRec32[0] = ((self.fConst76 * (((self.fConst55 * self.fRec33[0]) + (self.fConst75 * self.fRec33[1])) + (self.fConst55 * self.fRec33[2]))) - (self.fConst74 * ((self.fConst56 * self.fRec32[1]) + (self.fConst82 * self.fRec32[2]))));
			let mut fTemp19: f32 = (self.fConst20 * self.fRec31[1]);
			self.fRec31[0] = ((self.fConst74 * (((self.fConst75 * self.fRec32[1]) + (self.fConst55 * self.fRec32[0])) + (self.fConst55 * self.fRec32[2]))) - (self.fConst17 * (fTemp19 + (self.fConst18 * self.fRec31[2]))));
			let mut fTemp20: f32 = (self.fConst26 * self.fRec30[1]);
			self.fRec30[0] = ((self.fRec31[2] + (self.fConst17 * (fTemp19 + (self.fConst18 * self.fRec31[0])))) - (self.fConst23 * (fTemp20 + (self.fConst24 * self.fRec30[2]))));
			let mut fTemp21: f32 = (self.fConst32 * self.fRec29[1]);
			self.fRec29[0] = ((self.fRec30[2] + (self.fConst23 * (fTemp20 + (self.fConst24 * self.fRec30[0])))) - (self.fConst29 * (fTemp21 + (self.fConst30 * self.fRec29[2]))));
			let mut fTemp22: f32 = (self.fConst38 * self.fRec28[1]);
			self.fRec28[0] = ((self.fRec29[2] + (self.fConst29 * (fTemp21 + (self.fConst30 * self.fRec29[0])))) - (self.fConst35 * (fTemp22 + (self.fConst36 * self.fRec28[2]))));
			let mut fTemp23: f32 = (self.fConst44 * self.fRec27[1]);
			self.fRec27[0] = ((self.fRec28[2] + (self.fConst35 * (fTemp22 + (self.fConst36 * self.fRec28[0])))) - (self.fConst41 * (fTemp23 + (self.fConst42 * self.fRec27[2]))));
			let mut fTemp24: f32 = (self.fConst50 * self.fRec26[1]);
			self.fRec26[0] = ((self.fRec27[2] + (self.fConst41 * (fTemp23 + (self.fConst42 * self.fRec27[0])))) - (self.fConst47 * (fTemp24 + (self.fConst48 * self.fRec26[2]))));
			self.fRec38[0] = (fSlow3 + (0.999000013 * self.fRec38[1]));
			self.fRec49[0] = ((self.fConst78 * self.fRec49[1]) + (self.fConst79 * (fTemp18 + self.fVec2[1])));
			self.fRec48[0] = (self.fRec49[0] - (self.fConst76 * ((self.fConst56 * self.fRec48[1]) + (self.fConst81 * self.fRec48[2]))));
			self.fRec47[0] = ((self.fConst76 * (self.fRec48[2] + (self.fRec48[0] + (2.0 * self.fRec48[1])))) - (self.fConst74 * ((self.fConst56 * self.fRec47[1]) + (self.fConst82 * self.fRec47[2]))));
			let mut fTemp25: f32 = (self.fRec47[2] + (self.fRec47[0] + (2.0 * self.fRec47[1])));
			self.fVec3[0] = fTemp25;
			self.fRec46[0] = ((self.fConst88 * self.fRec46[1]) + (self.fConst89 * ((self.fConst46 * fTemp25) + (self.fConst90 * self.fVec3[1]))));
			self.fRec45[0] = (self.fRec46[0] - (self.fConst86 * ((self.fConst50 * self.fRec45[1]) + (self.fConst91 * self.fRec45[2]))));
			self.fRec44[0] = ((self.fConst86 * (((self.fConst49 * self.fRec45[0]) + (self.fConst85 * self.fRec45[1])) + (self.fConst49 * self.fRec45[2]))) - (self.fConst84 * ((self.fConst50 * self.fRec44[1]) + (self.fConst92 * self.fRec44[2]))));
			let mut fTemp26: f32 = (self.fConst20 * self.fRec43[1]);
			self.fRec43[0] = ((self.fConst84 * (((self.fConst85 * self.fRec44[1]) + (self.fConst49 * self.fRec44[0])) + (self.fConst49 * self.fRec44[2]))) - (self.fConst17 * (fTemp26 + (self.fConst18 * self.fRec43[2]))));
			let mut fTemp27: f32 = (self.fConst26 * self.fRec42[1]);
			self.fRec42[0] = ((self.fRec43[2] + (self.fConst17 * (fTemp26 + (self.fConst18 * self.fRec43[0])))) - (self.fConst23 * (fTemp27 + (self.fConst24 * self.fRec42[2]))));
			let mut fTemp28: f32 = (self.fConst32 * self.fRec41[1]);
			self.fRec41[0] = ((self.fRec42[2] + (self.fConst23 * (fTemp27 + (self.fConst24 * self.fRec42[0])))) - (self.fConst29 * (fTemp28 + (self.fConst30 * self.fRec41[2]))));
			let mut fTemp29: f32 = (self.fConst38 * self.fRec40[1]);
			self.fRec40[0] = ((self.fRec41[2] + (self.fConst29 * (fTemp28 + (self.fConst30 * self.fRec41[0])))) - (self.fConst35 * (fTemp29 + (self.fConst36 * self.fRec40[2]))));
			let mut fTemp30: f32 = (self.fConst44 * self.fRec39[1]);
			self.fRec39[0] = ((self.fRec40[2] + (self.fConst35 * (fTemp29 + (self.fConst36 * self.fRec40[0])))) - (self.fConst41 * (fTemp30 + (self.fConst42 * self.fRec39[2]))));
			self.fRec50[0] = (fSlow4 + (0.999000013 * self.fRec50[1]));
			self.fRec60[0] = ((self.fConst88 * self.fRec60[1]) + (self.fConst89 * (fTemp25 + self.fVec3[1])));
			self.fRec59[0] = (self.fRec60[0] - (self.fConst86 * ((self.fConst50 * self.fRec59[1]) + (self.fConst91 * self.fRec59[2]))));
			self.fRec58[0] = ((self.fConst86 * (self.fRec59[2] + (self.fRec59[0] + (2.0 * self.fRec59[1])))) - (self.fConst84 * ((self.fConst50 * self.fRec58[1]) + (self.fConst92 * self.fRec58[2]))));
			let mut fTemp31: f32 = (self.fRec58[2] + (self.fRec58[0] + (2.0 * self.fRec58[1])));
			self.fVec4[0] = fTemp31;
			self.fRec57[0] = ((self.fConst98 * self.fRec57[1]) + (self.fConst99 * ((self.fConst40 * fTemp31) + (self.fConst100 * self.fVec4[1]))));
			self.fRec56[0] = (self.fRec57[0] - (self.fConst96 * ((self.fConst44 * self.fRec56[1]) + (self.fConst101 * self.fRec56[2]))));
			self.fRec55[0] = ((self.fConst96 * (((self.fConst43 * self.fRec56[0]) + (self.fConst95 * self.fRec56[1])) + (self.fConst43 * self.fRec56[2]))) - (self.fConst94 * ((self.fConst44 * self.fRec55[1]) + (self.fConst102 * self.fRec55[2]))));
			let mut fTemp32: f32 = (self.fConst20 * self.fRec54[1]);
			self.fRec54[0] = ((self.fConst94 * (((self.fConst95 * self.fRec55[1]) + (self.fConst43 * self.fRec55[0])) + (self.fConst43 * self.fRec55[2]))) - (self.fConst17 * (fTemp32 + (self.fConst18 * self.fRec54[2]))));
			let mut fTemp33: f32 = (self.fConst26 * self.fRec53[1]);
			self.fRec53[0] = ((self.fRec54[2] + (self.fConst17 * (fTemp32 + (self.fConst18 * self.fRec54[0])))) - (self.fConst23 * (fTemp33 + (self.fConst24 * self.fRec53[2]))));
			let mut fTemp34: f32 = (self.fConst32 * self.fRec52[1]);
			self.fRec52[0] = ((self.fRec53[2] + (self.fConst23 * (fTemp33 + (self.fConst24 * self.fRec53[0])))) - (self.fConst29 * (fTemp34 + (self.fConst30 * self.fRec52[2]))));
			let mut fTemp35: f32 = (self.fConst38 * self.fRec51[1]);
			self.fRec51[0] = ((self.fRec52[2] + (self.fConst29 * (fTemp34 + (self.fConst30 * self.fRec52[0])))) - (self.fConst35 * (fTemp35 + (self.fConst36 * self.fRec51[2]))));
			self.fRec61[0] = (fSlow5 + (0.999000013 * self.fRec61[1]));
			self.fRec70[0] = ((self.fConst98 * self.fRec70[1]) + (self.fConst99 * (fTemp31 + self.fVec4[1])));
			self.fRec69[0] = (self.fRec70[0] - (self.fConst96 * ((self.fConst44 * self.fRec69[1]) + (self.fConst101 * self.fRec69[2]))));
			self.fRec68[0] = ((self.fConst96 * (self.fRec69[2] + (self.fRec69[0] + (2.0 * self.fRec69[1])))) - (self.fConst94 * ((self.fConst44 * self.fRec68[1]) + (self.fConst102 * self.fRec68[2]))));
			let mut fTemp36: f32 = (self.fRec68[2] + (self.fRec68[0] + (2.0 * self.fRec68[1])));
			self.fVec5[0] = fTemp36;
			self.fRec67[0] = ((self.fConst108 * self.fRec67[1]) + (self.fConst109 * ((self.fConst34 * fTemp36) + (self.fConst110 * self.fVec5[1]))));
			self.fRec66[0] = (self.fRec67[0] - (self.fConst106 * ((self.fConst38 * self.fRec66[1]) + (self.fConst111 * self.fRec66[2]))));
			self.fRec65[0] = ((self.fConst106 * (((self.fConst37 * self.fRec66[0]) + (self.fConst105 * self.fRec66[1])) + (self.fConst37 * self.fRec66[2]))) - (self.fConst104 * ((self.fConst38 * self.fRec65[1]) + (self.fConst112 * self.fRec65[2]))));
			let mut fTemp37: f32 = (self.fConst20 * self.fRec64[1]);
			self.fRec64[0] = ((self.fConst104 * (((self.fConst105 * self.fRec65[1]) + (self.fConst37 * self.fRec65[0])) + (self.fConst37 * self.fRec65[2]))) - (self.fConst17 * (fTemp37 + (self.fConst18 * self.fRec64[2]))));
			let mut fTemp38: f32 = (self.fConst26 * self.fRec63[1]);
			self.fRec63[0] = ((self.fRec64[2] + (self.fConst17 * (fTemp37 + (self.fConst18 * self.fRec64[0])))) - (self.fConst23 * (fTemp38 + (self.fConst24 * self.fRec63[2]))));
			let mut fTemp39: f32 = (self.fConst32 * self.fRec62[1]);
			self.fRec62[0] = ((self.fRec63[2] + (self.fConst23 * (fTemp38 + (self.fConst24 * self.fRec63[0])))) - (self.fConst29 * (fTemp39 + (self.fConst30 * self.fRec62[2]))));
			self.fRec71[0] = (fSlow6 + (0.999000013 * self.fRec71[1]));
			self.fRec79[0] = ((self.fConst108 * self.fRec79[1]) + (self.fConst109 * (fTemp36 + self.fVec5[1])));
			self.fRec78[0] = (self.fRec79[0] - (self.fConst106 * ((self.fConst38 * self.fRec78[1]) + (self.fConst111 * self.fRec78[2]))));
			self.fRec77[0] = ((self.fConst106 * (self.fRec78[2] + (self.fRec78[0] + (2.0 * self.fRec78[1])))) - (self.fConst104 * ((self.fConst38 * self.fRec77[1]) + (self.fConst112 * self.fRec77[2]))));
			let mut fTemp40: f32 = (self.fRec77[2] + (self.fRec77[0] + (2.0 * self.fRec77[1])));
			self.fVec6[0] = fTemp40;
			self.fRec76[0] = ((self.fConst118 * self.fRec76[1]) + (self.fConst119 * ((self.fConst28 * fTemp40) + (self.fConst120 * self.fVec6[1]))));
			self.fRec75[0] = (self.fRec76[0] - (self.fConst116 * ((self.fConst32 * self.fRec75[1]) + (self.fConst121 * self.fRec75[2]))));
			self.fRec74[0] = ((self.fConst116 * (((self.fConst31 * self.fRec75[0]) + (self.fConst115 * self.fRec75[1])) + (self.fConst31 * self.fRec75[2]))) - (self.fConst114 * ((self.fConst32 * self.fRec74[1]) + (self.fConst122 * self.fRec74[2]))));
			let mut fTemp41: f32 = (self.fConst20 * self.fRec73[1]);
			self.fRec73[0] = ((self.fConst114 * (((self.fConst115 * self.fRec74[1]) + (self.fConst31 * self.fRec74[0])) + (self.fConst31 * self.fRec74[2]))) - (self.fConst17 * (fTemp41 + (self.fConst18 * self.fRec73[2]))));
			let mut fTemp42: f32 = (self.fConst26 * self.fRec72[1]);
			self.fRec72[0] = ((self.fRec73[2] + (self.fConst17 * (fTemp41 + (self.fConst18 * self.fRec73[0])))) - (self.fConst23 * (fTemp42 + (self.fConst24 * self.fRec72[2]))));
			self.fRec80[0] = (fSlow7 + (0.999000013 * self.fRec80[1]));
			self.fRec87[0] = ((self.fConst118 * self.fRec87[1]) + (self.fConst119 * (fTemp40 + self.fVec6[1])));
			self.fRec86[0] = (self.fRec87[0] - (self.fConst116 * ((self.fConst32 * self.fRec86[1]) + (self.fConst121 * self.fRec86[2]))));
			self.fRec85[0] = ((self.fConst116 * (self.fRec86[2] + (self.fRec86[0] + (2.0 * self.fRec86[1])))) - (self.fConst114 * ((self.fConst32 * self.fRec85[1]) + (self.fConst122 * self.fRec85[2]))));
			let mut fTemp43: f32 = (self.fRec85[2] + (self.fRec85[0] + (2.0 * self.fRec85[1])));
			self.fVec7[0] = fTemp43;
			self.fRec84[0] = ((self.fConst128 * self.fRec84[1]) + (self.fConst129 * ((self.fConst22 * fTemp43) + (self.fConst130 * self.fVec7[1]))));
			self.fRec83[0] = (self.fRec84[0] - (self.fConst126 * ((self.fConst26 * self.fRec83[1]) + (self.fConst131 * self.fRec83[2]))));
			self.fRec82[0] = ((self.fConst126 * (((self.fConst25 * self.fRec83[0]) + (self.fConst125 * self.fRec83[1])) + (self.fConst25 * self.fRec83[2]))) - (self.fConst124 * ((self.fConst26 * self.fRec82[1]) + (self.fConst132 * self.fRec82[2]))));
			let mut fTemp44: f32 = (self.fConst20 * self.fRec81[1]);
			self.fRec81[0] = ((self.fConst124 * (((self.fConst125 * self.fRec82[1]) + (self.fConst25 * self.fRec82[0])) + (self.fConst25 * self.fRec82[2]))) - (self.fConst17 * (fTemp44 + (self.fConst18 * self.fRec81[2]))));
			self.fRec88[0] = (fSlow8 + (0.999000013 * self.fRec88[1]));
			self.fRec94[0] = ((self.fConst128 * self.fRec94[1]) + (self.fConst129 * (fTemp43 + self.fVec7[1])));
			self.fRec93[0] = (self.fRec94[0] - (self.fConst126 * ((self.fConst26 * self.fRec93[1]) + (self.fConst131 * self.fRec93[2]))));
			self.fRec92[0] = ((self.fConst126 * (self.fRec93[2] + (self.fRec93[0] + (2.0 * self.fRec93[1])))) - (self.fConst124 * ((self.fConst26 * self.fRec92[1]) + (self.fConst132 * self.fRec92[2]))));
			let mut fTemp45: f32 = (self.fRec92[2] + (self.fRec92[0] + (2.0 * self.fRec92[1])));
			self.fVec8[0] = fTemp45;
			self.fRec91[0] = ((self.fConst137 * self.fRec91[1]) + (self.fConst138 * ((self.fConst16 * fTemp45) + (self.fConst139 * self.fVec8[1]))));
			self.fRec90[0] = (self.fRec91[0] - (self.fConst135 * ((self.fConst20 * self.fRec90[1]) + (self.fConst140 * self.fRec90[2]))));
			self.fRec89[0] = ((self.fConst135 * (((self.fConst19 * self.fRec90[0]) + (self.fConst134 * self.fRec90[1])) + (self.fConst19 * self.fRec90[2]))) - (self.fConst133 * ((self.fConst20 * self.fRec89[1]) + (self.fConst141 * self.fRec89[2]))));
			self.fRec95[0] = (fSlow9 + (0.999000013 * self.fRec95[1]));
			self.fRec98[0] = ((self.fConst137 * self.fRec98[1]) + (self.fConst138 * (fTemp45 + self.fVec8[1])));
			self.fRec97[0] = (self.fRec98[0] - (self.fConst135 * ((self.fConst20 * self.fRec97[1]) + (self.fConst140 * self.fRec97[2]))));
			self.fRec96[0] = ((self.fConst135 * (self.fRec97[2] + (self.fRec97[0] + (2.0 * self.fRec97[1])))) - (self.fConst133 * ((self.fConst20 * self.fRec96[1]) + (self.fConst141 * self.fRec96[2]))));
			self.fRec99[0] = (fSlow10 + (0.999000013 * self.fRec99[1]));
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { ((((((((((self.fRec0[2] + (self.fConst59 * (fTemp9 + (self.fConst60 * self.fRec0[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec11[0]))) + ((self.fRec12[2] + (self.fConst53 * (fTemp17 + (self.fConst54 * self.fRec12[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec25[0])))) + ((self.fRec26[2] + (self.fConst47 * (fTemp24 + (self.fConst48 * self.fRec26[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec38[0])))) + ((self.fRec39[2] + (self.fConst41 * (fTemp30 + (self.fConst42 * self.fRec39[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec50[0])))) + ((self.fRec51[2] + (self.fConst35 * (fTemp35 + (self.fConst36 * self.fRec51[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec61[0])))) + ((self.fRec62[2] + (self.fConst29 * (fTemp39 + (self.fConst30 * self.fRec62[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec71[0])))) + ((self.fRec72[2] + (self.fConst23 * (fTemp42 + (self.fConst24 * self.fRec72[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec80[0])))) + ((self.fRec81[2] + (self.fConst17 * (fTemp44 + (self.fConst18 * self.fRec81[0])))) * f32::powf(10.0, (0.0500000007 * self.fRec88[0])))) + (self.fConst133 * (((((self.fConst134 * self.fRec89[1]) + (self.fConst19 * self.fRec89[0])) + (self.fConst19 * self.fRec89[2])) * f32::powf(10.0, (0.0500000007 * self.fRec95[0]))) + ((self.fRec96[2] + (self.fRec96[0] + (2.0 * self.fRec96[1]))) * f32::powf(10.0, (0.0500000007 * self.fRec99[0])))))) } as f32);
			self.fVec0[1] = self.fVec0[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec23[2] = self.fRec23[1];
			self.fRec23[1] = self.fRec23[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec16[2] = self.fRec16[1];
			self.fRec16[1] = self.fRec16[0];
			self.fRec15[2] = self.fRec15[1];
			self.fRec15[1] = self.fRec15[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec32[2] = self.fRec32[1];
			self.fRec32[1] = self.fRec32[0];
			self.fRec31[2] = self.fRec31[1];
			self.fRec31[1] = self.fRec31[0];
			self.fRec30[2] = self.fRec30[1];
			self.fRec30[1] = self.fRec30[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec28[2] = self.fRec28[1];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[2] = self.fRec27[1];
			self.fRec27[1] = self.fRec27[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec38[1] = self.fRec38[0];
			self.fRec49[1] = self.fRec49[0];
			self.fRec48[2] = self.fRec48[1];
			self.fRec48[1] = self.fRec48[0];
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.fVec3[1] = self.fVec3[0];
			self.fRec46[1] = self.fRec46[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec39[2] = self.fRec39[1];
			self.fRec39[1] = self.fRec39[0];
			self.fRec50[1] = self.fRec50[0];
			self.fRec60[1] = self.fRec60[0];
			self.fRec59[2] = self.fRec59[1];
			self.fRec59[1] = self.fRec59[0];
			self.fRec58[2] = self.fRec58[1];
			self.fRec58[1] = self.fRec58[0];
			self.fVec4[1] = self.fVec4[0];
			self.fRec57[1] = self.fRec57[0];
			self.fRec56[2] = self.fRec56[1];
			self.fRec56[1] = self.fRec56[0];
			self.fRec55[2] = self.fRec55[1];
			self.fRec55[1] = self.fRec55[0];
			self.fRec54[2] = self.fRec54[1];
			self.fRec54[1] = self.fRec54[0];
			self.fRec53[2] = self.fRec53[1];
			self.fRec53[1] = self.fRec53[0];
			self.fRec52[2] = self.fRec52[1];
			self.fRec52[1] = self.fRec52[0];
			self.fRec51[2] = self.fRec51[1];
			self.fRec51[1] = self.fRec51[0];
			self.fRec61[1] = self.fRec61[0];
			self.fRec70[1] = self.fRec70[0];
			self.fRec69[2] = self.fRec69[1];
			self.fRec69[1] = self.fRec69[0];
			self.fRec68[2] = self.fRec68[1];
			self.fRec68[1] = self.fRec68[0];
			self.fVec5[1] = self.fVec5[0];
			self.fRec67[1] = self.fRec67[0];
			self.fRec66[2] = self.fRec66[1];
			self.fRec66[1] = self.fRec66[0];
			self.fRec65[2] = self.fRec65[1];
			self.fRec65[1] = self.fRec65[0];
			self.fRec64[2] = self.fRec64[1];
			self.fRec64[1] = self.fRec64[0];
			self.fRec63[2] = self.fRec63[1];
			self.fRec63[1] = self.fRec63[0];
			self.fRec62[2] = self.fRec62[1];
			self.fRec62[1] = self.fRec62[0];
			self.fRec71[1] = self.fRec71[0];
			self.fRec79[1] = self.fRec79[0];
			self.fRec78[2] = self.fRec78[1];
			self.fRec78[1] = self.fRec78[0];
			self.fRec77[2] = self.fRec77[1];
			self.fRec77[1] = self.fRec77[0];
			self.fVec6[1] = self.fVec6[0];
			self.fRec76[1] = self.fRec76[0];
			self.fRec75[2] = self.fRec75[1];
			self.fRec75[1] = self.fRec75[0];
			self.fRec74[2] = self.fRec74[1];
			self.fRec74[1] = self.fRec74[0];
			self.fRec73[2] = self.fRec73[1];
			self.fRec73[1] = self.fRec73[0];
			self.fRec72[2] = self.fRec72[1];
			self.fRec72[1] = self.fRec72[0];
			self.fRec80[1] = self.fRec80[0];
			self.fRec87[1] = self.fRec87[0];
			self.fRec86[2] = self.fRec86[1];
			self.fRec86[1] = self.fRec86[0];
			self.fRec85[2] = self.fRec85[1];
			self.fRec85[1] = self.fRec85[0];
			self.fVec7[1] = self.fVec7[0];
			self.fRec84[1] = self.fRec84[0];
			self.fRec83[2] = self.fRec83[1];
			self.fRec83[1] = self.fRec83[0];
			self.fRec82[2] = self.fRec82[1];
			self.fRec82[1] = self.fRec82[0];
			self.fRec81[2] = self.fRec81[1];
			self.fRec81[1] = self.fRec81[0];
			self.fRec88[1] = self.fRec88[0];
			self.fRec94[1] = self.fRec94[0];
			self.fRec93[2] = self.fRec93[1];
			self.fRec93[1] = self.fRec93[0];
			self.fRec92[2] = self.fRec92[1];
			self.fRec92[1] = self.fRec92[0];
			self.fVec8[1] = self.fVec8[0];
			self.fRec91[1] = self.fRec91[0];
			self.fRec90[2] = self.fRec90[1];
			self.fRec90[1] = self.fRec90[0];
			self.fRec89[2] = self.fRec89[1];
			self.fRec89[1] = self.fRec89[0];
			self.fRec95[1] = self.fRec95[0];
			self.fRec98[1] = self.fRec98[0];
			self.fRec97[2] = self.fRec97[1];
			self.fRec97[1] = self.fRec97[0];
			self.fRec96[2] = self.fRec96[1];
			self.fRec96[1] = self.fRec96[0];
			self.fRec99[1] = self.fRec99[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

