
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fEntry0: f32,
	fVslider0: f32,
	fEntry1: f32,
	fRec0: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fEntry0: 0.0,
			fVslider0: 0.0,
			fEntry1: 0.0,
			fRec0: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "bandFilter");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fEntry0 = 1000.0;
		self.fVslider0 = 0.0;
		self.fEntry1 = 50.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (3.14159274 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("Bandfilter");
		ui_interface.declare(&mut self.fEntry1, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry1, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry0, "style", "knob");
		ui_interface.declare(&mut self.fEntry0, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry0, 1000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider0, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider0, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = f32::tan((self.fConst0 * (self.fEntry0 as f32)));
		let mut fSlow1: f32 = (self.fEntry1 as f32);
		let mut fSlow2: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider0 as f32)))) / fSlow1);
		let mut fSlow3: f32 = (1.0 / ((fSlow0 * (fSlow0 + fSlow2)) + 1.0));
		let mut fSlow4: f32 = (2.0 * (mydsp_faustpower2_f(fSlow0) + -1.0));
		let mut fSlow5: f32 = ((fSlow0 * (fSlow0 - fSlow2)) + 1.0);
		let mut fSlow6: f32 = (1.0 / fSlow1);
		let mut fSlow7: f32 = ((fSlow0 * (fSlow0 + fSlow6)) + 1.0);
		let mut fSlow8: f32 = (1.0 - (fSlow0 * (fSlow6 - fSlow0)));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (fSlow4 * self.fRec0[1]);
			self.fRec0[0] = ((inputs[0][i as usize] as f32) - (fSlow3 * ((fSlow5 * self.fRec0[2]) + fTemp0)));
			outputs[0][i as usize] = ((fSlow3 * ((fTemp0 + (fSlow7 * self.fRec0[0])) + (fSlow8 * self.fRec0[2]))) as f32);
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

