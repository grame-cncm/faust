
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider0: f32,
	fHslider1: f32,
	fVec0: [f32;2],
	fRec4: [f32;2],
	fRec3: [f32;3],
	fHslider2: f32,
	fRec6: [f32;2],
	fRec5: [f32;3],
	fConst2: f32,
	fHslider3: f32,
	fRec7: [f32;2],
	fHslider4: f32,
	fConst3: f32,
	fConst4: f32,
	fHslider5: f32,
	fConst5: f32,
	fRec2: [f32;3],
	fVec1: [f32;2],
	fRec1: [f32;2],
	fRec0: [f32;3],
	fHslider6: f32,
	fRec9: [f32;2],
	fRec8: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fVec0: [0.0;2],
			fRec4: [0.0;2],
			fRec3: [0.0;3],
			fHslider2: 0.0,
			fRec6: [0.0;2],
			fRec5: [0.0;3],
			fConst2: 0.0,
			fHslider3: 0.0,
			fRec7: [0.0;2],
			fHslider4: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fHslider5: 0.0,
			fConst5: 0.0,
			fRec2: [0.0;3],
			fVec1: [0.0;2],
			fRec1: [0.0;2],
			fRec0: [0.0;3],
			fHslider6: 0.0,
			fRec9: [0.0;2],
			fRec8: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Exercise and compare Parametric Equalizer sections on test signals");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "parametricEqualizer");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 8000.0;
		self.fHslider1 = 200.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 49.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 40.0;
		self.fHslider6 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec4[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec3[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec6[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec5[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec7[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec1[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec1[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec0[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec9[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec8[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (3.14159274 / self.fConst0);
		self.fConst2 = (1382.30078 / self.fConst0);
		self.fConst3 = (1.0 / self.fConst0);
		self.fConst4 = (1382.30078 * self.fConst3);
		self.fConst5 = (2764.60156 * self.fConst3);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's filters.lib   for info and pointers");
		ui_interface.openHorizontalBox("PARAMETRIC EQ SECTIONS");
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("Low Shelf");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "Amount of low-frequency boost or cut in decibels");
		ui_interface.declare(&mut self.fHslider2, "unit", "dB");
		ui_interface.addHorizontalSlider("Low Boost|Cut", &mut self.fHslider2, 0.0, -40.0, 40.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface.declare(&mut self.fHslider1, "unit", "Hz");
		ui_interface.addHorizontalSlider("Transition Frequency", &mut self.fHslider1, 200.0, 1.0, 5000.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "Parametric Equalizer   sections from filters.lib");
		ui_interface.openVerticalBox("Peaking Equalizer");
		ui_interface.declare(&mut self.fHslider4, "0", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.declare(&mut self.fHslider4, "tooltip", "Amount of   local boost or cut in decibels");
		ui_interface.declare(&mut self.fHslider4, "unit", "dB");
		ui_interface.addHorizontalSlider("Peak Boost|Cut", &mut self.fHslider4, 0.0, -40.0, 40.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Peak   Frequency in Piano Key (PK) units (A440 = 49PK)");
		ui_interface.declare(&mut self.fHslider3, "unit", "PK");
		ui_interface.addHorizontalSlider("Peak Frequency", &mut self.fHslider3, 49.0, 1.0, 100.0, 1.0);
		ui_interface.declare(&mut self.fHslider5, "2", "");
		ui_interface.declare(&mut self.fHslider5, "scale", "log");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.declare(&mut self.fHslider5, "tooltip", "Quality factor   (Q) of the peak = center-frequency/bandwidth");
		ui_interface.addHorizontalSlider("Peak Q", &mut self.fHslider5, 40.0, 1.0, 1000.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "A high shelf provides a boost   or cut above some frequency");
		ui_interface.openVerticalBox("High Shelf");
		ui_interface.declare(&mut self.fHslider6, "0", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.declare(&mut self.fHslider6, "tooltip", "Amount of   high-frequency boost or cut in decibels");
		ui_interface.declare(&mut self.fHslider6, "unit", "dB");
		ui_interface.addHorizontalSlider("High Boost|Cut", &mut self.fHslider6, 0.0, -40.0, 40.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider0, "1", "");
		ui_interface.declare(&mut self.fHslider0, "scale", "log");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface.declare(&mut self.fHslider0, "unit", "Hz");
		ui_interface.addHorizontalSlider("Transition Frequency", &mut self.fHslider0, 8000.0, 20.0, 10000.0, 1.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = f32::tan((self.fConst1 * (self.fHslider0 as f32)));
		let mut fSlow1: f32 = (1.0 / fSlow0);
		let mut fSlow2: f32 = (1.0 / (((fSlow1 + 1.0) / fSlow0) + 1.0));
		let mut fSlow3: f32 = (fSlow1 + 1.0);
		let mut fSlow4: f32 = (0.0 - ((1.0 - fSlow1) / fSlow3));
		let mut fSlow5: f32 = (1.0 / fSlow3);
		let mut fSlow6: f32 = f32::tan((self.fConst1 * (self.fHslider1 as f32)));
		let mut fSlow7: f32 = (1.0 / fSlow6);
		let mut fSlow8: f32 = (1.0 / (((fSlow7 + 1.0) / fSlow6) + 1.0));
		let mut fSlow9: f32 = (1.0 / mydsp_faustpower2_f(fSlow6));
		let mut fSlow10: f32 = (2.0 * (0.0 - fSlow9));
		let mut fSlow11: f32 = (fSlow7 + 1.0);
		let mut fSlow12: f32 = (0.0 - ((1.0 - fSlow7) / fSlow11));
		let mut fSlow13: f32 = (1.0 / fSlow11);
		let mut fSlow14: f32 = (0.0 - fSlow7);
		let mut fSlow15: f32 = (2.0 * (1.0 - fSlow9));
		let mut fSlow16: f32 = (((fSlow7 + -1.0) / fSlow6) + 1.0);
		let mut fSlow17: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider2 as f32)));
		let mut fSlow18: f32 = (0.00100000005 * (self.fHslider3 as f32));
		let mut fSlow19: f32 = (self.fHslider4 as f32);
		let mut iSlow20: i32 = ((fSlow19 > 0.0) as i32);
		let mut fSlow21: f32 = (self.fHslider5 as f32);
		let mut fSlow22: f32 = (self.fConst4 * (f32::powf(10.0, (0.0500000007 * f32::abs(fSlow19))) / fSlow21));
		let mut fSlow23: f32 = (self.fConst4 / fSlow21);
		let mut fSlow24: f32 = (1.0 / mydsp_faustpower2_f(fSlow0));
		let mut fSlow25: f32 = (2.0 * (1.0 - fSlow24));
		let mut fSlow26: f32 = (((fSlow1 + -1.0) / fSlow0) + 1.0);
		let mut fSlow27: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider6 as f32)));
		let mut fSlow28: f32 = (0.0 - fSlow1);
		let mut fSlow29: f32 = (2.0 * (0.0 - fSlow24));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fVec0[0] = fTemp0;
			self.fRec4[0] = ((fSlow12 * self.fRec4[1]) + (fSlow13 * ((fSlow7 * fTemp0) + (fSlow14 * self.fVec0[1]))));
			self.fRec3[0] = (self.fRec4[0] - (fSlow8 * ((fSlow15 * self.fRec3[1]) + (fSlow16 * self.fRec3[2]))));
			self.fRec6[0] = ((fSlow12 * self.fRec6[1]) + (fSlow13 * (fTemp0 + self.fVec0[1])));
			self.fRec5[0] = (self.fRec6[0] - (fSlow8 * ((fSlow15 * self.fRec5[1]) + (fSlow16 * self.fRec5[2]))));
			self.fRec7[0] = (fSlow18 + (0.999000013 * self.fRec7[1]));
			let mut fTemp1: f32 = f32::powf(2.0, (0.0833333358 * (self.fRec7[0] + -49.0)));
			let mut fTemp2: f32 = f32::tan((self.fConst2 * fTemp1));
			let mut fTemp3: f32 = (1.0 / fTemp2);
			let mut fTemp4: f32 = (fTemp1 / f32::sin((self.fConst5 * fTemp1)));
			let mut fTemp5: f32 = (fSlow22 * fTemp4);
			let mut fTemp6: f32 = (fSlow23 * fTemp4);
			let mut fTemp7: f32 = if (iSlow20 as i32 == 1) { fTemp6 } else { fTemp5 };
			let mut fTemp8: f32 = (2.0 * (self.fRec2[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp2)))));
			let mut fTemp9: f32 = (((fTemp3 + fTemp7) / fTemp2) + 1.0);
			self.fRec2[0] = ((fSlow8 * ((((fSlow10 * self.fRec3[1]) + (fSlow9 * self.fRec3[0])) + (fSlow9 * self.fRec3[2])) + (fSlow17 * (self.fRec5[2] + (self.fRec5[0] + (2.0 * self.fRec5[1])))))) - (((self.fRec2[2] * (((fTemp3 - fTemp7) / fTemp2) + 1.0)) + fTemp8) / fTemp9));
			let mut fTemp10: f32 = if (iSlow20 as i32 == 1) { fTemp5 } else { fTemp6 };
			let mut fTemp11: f32 = (((fTemp8 + (self.fRec2[0] * (((fTemp3 + fTemp10) / fTemp2) + 1.0))) + (self.fRec2[2] * (((fTemp3 - fTemp10) / fTemp2) + 1.0))) / fTemp9);
			self.fVec1[0] = fTemp11;
			self.fRec1[0] = ((fSlow4 * self.fRec1[1]) + (fSlow5 * (self.fVec1[1] + fTemp11)));
			self.fRec0[0] = (self.fRec1[0] - (fSlow2 * ((fSlow25 * self.fRec0[1]) + (fSlow26 * self.fRec0[2]))));
			self.fRec9[0] = ((fSlow4 * self.fRec9[1]) + (fSlow5 * ((fSlow28 * self.fVec1[1]) + (fSlow1 * fTemp11))));
			self.fRec8[0] = (self.fRec9[0] - (fSlow2 * ((fSlow25 * self.fRec8[1]) + (fSlow26 * self.fRec8[2]))));
			outputs[0][i as usize] = ((fSlow2 * ((self.fRec0[2] + (self.fRec0[0] + (2.0 * self.fRec0[1]))) + (fSlow27 * (((fSlow24 * self.fRec8[0]) + (fSlow29 * self.fRec8[1])) + (fSlow24 * self.fRec8[2]))))) as f32);
			self.fVec0[1] = self.fVec0[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

