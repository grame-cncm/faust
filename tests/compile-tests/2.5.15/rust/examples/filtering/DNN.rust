


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "JOS");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("license", "STK-4.3");
		m.declare("name", "DNN");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		8
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		8
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("DNN");
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[7][i as usize] as f32);
			let mut fTemp1: f32 = (inputs[6][i as usize] as f32);
			let mut fTemp2: f32 = (inputs[5][i as usize] as f32);
			let mut fTemp3: f32 = (inputs[4][i as usize] as f32);
			let mut fTemp4: f32 = (inputs[2][i as usize] as f32);
			let mut fTemp5: f32 = (inputs[1][i as usize] as f32);
			let mut fTemp6: f32 = (inputs[3][i as usize] as f32);
			let mut fTemp7: f32 = ((30.0 * fTemp0) + ((60.0 * fTemp1) + ((10.0 * fTemp2) + ((40.0 * fTemp3) + (((20.0 * fTemp4) + (50.0 * fTemp5)) + (70.0 * fTemp6))))));
			let mut fTemp8: f32 = ((((fTemp7 > 0.0) as i32) as f32) * fTemp7);
			let mut fTemp9: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp10: f32 = ((43.0 * fTemp0) + (((23.0 * fTemp2) + ((53.0 * fTemp3) + ((3.0 * fTemp6) + ((33.0 * fTemp4) + ((13.0 * fTemp9) + (63.0 * fTemp5)))))) + (73.0 * fTemp1)));
			let mut fTemp11: f32 = ((((fTemp10 > 0.0) as i32) as f32) * fTemp10);
			let mut fTemp12: f32 = ((61.0 * fTemp0) + ((11.0 * fTemp1) + ((41.0 * fTemp2) + (((21.0 * fTemp6) + ((fTemp5 + (31.0 * fTemp9)) + (51.0 * fTemp4))) + (71.0 * fTemp3)))));
			let mut fTemp13: f32 = ((((fTemp12 > 0.0) as i32) as f32) * fTemp12);
			let mut fTemp14: f32 = (((24.0 * fTemp1) + ((54.0 * fTemp2) + ((4.0 * fTemp3) + ((34.0 * fTemp6) + (((14.0 * fTemp5) + (44.0 * fTemp9)) + (64.0 * fTemp4)))))) + (74.0 * fTemp0));
			let mut fTemp15: f32 = (fTemp14 * (((fTemp14 > 0.0) as i32) as f32));
			let mut fTemp16: f32 = ((12.0 * fTemp0) + ((42.0 * fTemp1) + (((22.0 * fTemp3) + ((52.0 * fTemp6) + ((2.0 * fTemp4) + ((32.0 * fTemp5) + (62.0 * fTemp9))))) + (72.0 * fTemp2))));
			let mut fTemp17: f32 = ((((fTemp16 > 0.0) as i32) as f32) * fTemp16);
			let mut fTemp18: f32 = (((((100.0 * fTemp8) + (110.0 * fTemp11)) + (120.0 * fTemp13)) + (130.0 * fTemp15)) + (140.0 * fTemp17));
			outputs[0][i as usize] = ((fTemp18 * (((fTemp18 > 0.0) as i32) as f32)) as f32);
			let mut fTemp19: f32 = ((121.0 * fTemp17) + ((111.0 * fTemp15) + ((101.0 * fTemp13) + ((131.0 * fTemp8) + (141.0 * fTemp11)))));
			outputs[1][i as usize] = (((((fTemp19 > 0.0) as i32) as f32) * fTemp19) as f32);
			let mut fTemp20: f32 = ((102.0 * fTemp17) + ((((112.0 * fTemp8) + (122.0 * fTemp11)) + (132.0 * fTemp13)) + (142.0 * fTemp15)));
			outputs[2][i as usize] = (((((fTemp20 > 0.0) as i32) as f32) * fTemp20) as f32);
			let mut fTemp21: f32 = ((133.0 * fTemp17) + ((123.0 * fTemp15) + ((113.0 * fTemp13) + ((103.0 * fTemp11) + (143.0 * fTemp8)))));
			outputs[3][i as usize] = (((((fTemp21 > 0.0) as i32) as f32) * fTemp21) as f32);
			let mut fTemp22: f32 = ((114.0 * fTemp17) + ((104.0 * fTemp15) + (((124.0 * fTemp8) + (134.0 * fTemp11)) + (144.0 * fTemp13))));
			outputs[4][i as usize] = (((((fTemp22 > 0.0) as i32) as f32) * fTemp22) as f32);
			let mut fTemp23: f32 = (((((105.0 * fTemp8) + (115.0 * fTemp11)) + (125.0 * fTemp13)) + (135.0 * fTemp15)) + (145.0 * fTemp17));
			outputs[5][i as usize] = ((fTemp23 * (((fTemp23 > 0.0) as i32) as f32)) as f32);
			let mut fTemp24: f32 = ((126.0 * fTemp17) + ((116.0 * fTemp15) + ((106.0 * fTemp13) + ((136.0 * fTemp8) + (146.0 * fTemp11)))));
			outputs[6][i as usize] = (((((fTemp24 > 0.0) as i32) as f32) * fTemp24) as f32);
			let mut fTemp25: f32 = ((107.0 * fTemp17) + ((((117.0 * fTemp8) + (127.0 * fTemp11)) + (137.0 * fTemp13)) + (147.0 * fTemp15)));
			outputs[7][i as usize] = (((((fTemp25 > 0.0) as i32) as f32) * fTemp25) as f32);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

