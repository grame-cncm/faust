
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider0: f32,
	fVslider0: f32,
	fRec1: [f32;2],
	fConst3: f32,
	fHslider1: f32,
	fVec0: [f32;2],
	fRec2: [f32;2],
	fConst4: f32,
	fRec0: [f32;3],
	fRec5: [f32;3],
	fConst5: f32,
	fConst6: f32,
	fHslider2: f32,
	fHslider3: f32,
	fRec4: [f32;2],
	fRec3: [f32;2],
	fConst7: f32,
	fConst8: f32,
	fConst9: f32,
	fRec6: [f32;3],
	fRec9: [f32;3],
	fConst10: f32,
	fRec8: [f32;2],
	fRec7: [f32;2],
	fConst11: f32,
	fConst12: f32,
	fConst13: f32,
	fRec10: [f32;3],
	fRec13: [f32;3],
	fConst14: f32,
	fRec12: [f32;2],
	fRec11: [f32;2],
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fRec14: [f32;3],
	fRec17: [f32;3],
	fConst18: f32,
	fRec16: [f32;2],
	fRec15: [f32;2],
	fConst19: f32,
	fConst20: f32,
	fConst21: f32,
	fRec18: [f32;3],
	fRec21: [f32;3],
	fConst22: f32,
	fRec20: [f32;2],
	fRec19: [f32;2],
	fConst23: f32,
	fConst24: f32,
	fConst25: f32,
	fRec22: [f32;3],
	fRec25: [f32;3],
	fConst26: f32,
	fRec24: [f32;2],
	fRec23: [f32;2],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fRec26: [f32;3],
	fRec29: [f32;3],
	fConst30: f32,
	fRec28: [f32;2],
	fRec27: [f32;2],
	fConst31: f32,
	fConst32: f32,
	fConst33: f32,
	fRec30: [f32;3],
	fRec33: [f32;3],
	fConst34: f32,
	fRec32: [f32;2],
	fRec31: [f32;2],
	fConst35: f32,
	fConst36: f32,
	fConst37: f32,
	fRec34: [f32;3],
	fRec37: [f32;3],
	fConst38: f32,
	fRec36: [f32;2],
	fRec35: [f32;2],
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fRec38: [f32;3],
	fRec41: [f32;3],
	fConst42: f32,
	fRec40: [f32;2],
	fRec39: [f32;2],
	fConst43: f32,
	fConst44: f32,
	fConst45: f32,
	fRec42: [f32;3],
	fRec45: [f32;3],
	fConst46: f32,
	fRec44: [f32;2],
	fRec43: [f32;2],
	fConst47: f32,
	fConst48: f32,
	fConst49: f32,
	fRec46: [f32;3],
	fRec49: [f32;3],
	fConst50: f32,
	fRec48: [f32;2],
	fRec47: [f32;2],
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fRec50: [f32;3],
	fRec53: [f32;3],
	fConst54: f32,
	fRec52: [f32;2],
	fRec51: [f32;2],
	fConst55: f32,
	fConst56: f32,
	fConst57: f32,
	fRec54: [f32;3],
	fRec57: [f32;3],
	fConst58: f32,
	fRec56: [f32;2],
	fRec55: [f32;2],
	fConst59: f32,
	fConst60: f32,
	fConst61: f32,
	fRec58: [f32;3],
	fRec61: [f32;3],
	fConst62: f32,
	fRec60: [f32;2],
	fRec59: [f32;2],
	fConst63: f32,
	fConst64: f32,
	fConst65: f32,
	fRec62: [f32;3],
	fRec65: [f32;3],
	fConst66: f32,
	fRec64: [f32;2],
	fRec63: [f32;2],
	fConst67: f32,
	fConst68: f32,
	fConst69: f32,
	fRec66: [f32;3],
	fRec69: [f32;3],
	fConst70: f32,
	fRec68: [f32;2],
	fRec67: [f32;2],
	fConst71: f32,
	fConst72: f32,
	fConst73: f32,
	fRec70: [f32;3],
	fRec73: [f32;3],
	fConst74: f32,
	fRec72: [f32;2],
	fRec71: [f32;2],
	fConst75: f32,
	fConst76: f32,
	fConst77: f32,
	fRec74: [f32;3],
	fRec77: [f32;3],
	fConst78: f32,
	fRec76: [f32;2],
	fRec75: [f32;2],
	fConst79: f32,
	fConst80: f32,
	fConst81: f32,
	fRec78: [f32;3],
	fRec81: [f32;3],
	fConst82: f32,
	fRec80: [f32;2],
	fRec79: [f32;2],
	fConst83: f32,
	fConst84: f32,
	fConst85: f32,
	fRec82: [f32;3],
	fRec85: [f32;3],
	fConst86: f32,
	fRec84: [f32;2],
	fRec83: [f32;2],
	fConst87: f32,
	fConst88: f32,
	fConst89: f32,
	fRec86: [f32;3],
	fRec89: [f32;3],
	fConst90: f32,
	fRec88: [f32;2],
	fRec87: [f32;2],
	fConst91: f32,
	fConst92: f32,
	fConst93: f32,
	fRec90: [f32;3],
	fRec93: [f32;3],
	fConst94: f32,
	fRec92: [f32;2],
	fRec91: [f32;2],
	fConst95: f32,
	fConst96: f32,
	fConst97: f32,
	fRec94: [f32;3],
	fRec97: [f32;3],
	fConst98: f32,
	fRec96: [f32;2],
	fRec95: [f32;2],
	fConst99: f32,
	fConst100: f32,
	fConst101: f32,
	fRec98: [f32;3],
	fRec101: [f32;3],
	fConst102: f32,
	fRec100: [f32;2],
	fRec99: [f32;2],
	fConst103: f32,
	fConst104: f32,
	fConst105: f32,
	fRec102: [f32;3],
	fRec105: [f32;3],
	fConst106: f32,
	fRec104: [f32;2],
	fRec103: [f32;2],
	fConst107: f32,
	fConst108: f32,
	fConst109: f32,
	fRec106: [f32;3],
	fRec109: [f32;3],
	fConst110: f32,
	fRec108: [f32;2],
	fRec107: [f32;2],
	fConst111: f32,
	fConst112: f32,
	fConst113: f32,
	fRec110: [f32;3],
	fRec113: [f32;3],
	fConst114: f32,
	fRec112: [f32;2],
	fRec111: [f32;2],
	fConst115: f32,
	fConst116: f32,
	fConst117: f32,
	fRec114: [f32;3],
	fRec117: [f32;3],
	fConst118: f32,
	fRec116: [f32;2],
	fRec115: [f32;2],
	fConst119: f32,
	fConst120: f32,
	fConst121: f32,
	fRec118: [f32;3],
	fRec121: [f32;3],
	fConst122: f32,
	fRec120: [f32;2],
	fRec119: [f32;2],
	fConst123: f32,
	fConst124: f32,
	fConst125: f32,
	fRec122: [f32;3],
	fRec125: [f32;3],
	fConst126: f32,
	fRec124: [f32;2],
	fRec123: [f32;2],
	fConst127: f32,
	fConst128: f32,
	fConst129: f32,
	fRec126: [f32;3],
	fRec129: [f32;3],
	fConst130: f32,
	fRec128: [f32;2],
	fRec127: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider0: 0.0,
			fVslider0: 0.0,
			fRec1: [0.0;2],
			fConst3: 0.0,
			fHslider1: 0.0,
			fVec0: [0.0;2],
			fRec2: [0.0;2],
			fConst4: 0.0,
			fRec0: [0.0;3],
			fRec5: [0.0;3],
			fConst5: 0.0,
			fConst6: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fRec4: [0.0;2],
			fRec3: [0.0;2],
			fConst7: 0.0,
			fConst8: 0.0,
			fConst9: 0.0,
			fRec6: [0.0;3],
			fRec9: [0.0;3],
			fConst10: 0.0,
			fRec8: [0.0;2],
			fRec7: [0.0;2],
			fConst11: 0.0,
			fConst12: 0.0,
			fConst13: 0.0,
			fRec10: [0.0;3],
			fRec13: [0.0;3],
			fConst14: 0.0,
			fRec12: [0.0;2],
			fRec11: [0.0;2],
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fRec14: [0.0;3],
			fRec17: [0.0;3],
			fConst18: 0.0,
			fRec16: [0.0;2],
			fRec15: [0.0;2],
			fConst19: 0.0,
			fConst20: 0.0,
			fConst21: 0.0,
			fRec18: [0.0;3],
			fRec21: [0.0;3],
			fConst22: 0.0,
			fRec20: [0.0;2],
			fRec19: [0.0;2],
			fConst23: 0.0,
			fConst24: 0.0,
			fConst25: 0.0,
			fRec22: [0.0;3],
			fRec25: [0.0;3],
			fConst26: 0.0,
			fRec24: [0.0;2],
			fRec23: [0.0;2],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fRec26: [0.0;3],
			fRec29: [0.0;3],
			fConst30: 0.0,
			fRec28: [0.0;2],
			fRec27: [0.0;2],
			fConst31: 0.0,
			fConst32: 0.0,
			fConst33: 0.0,
			fRec30: [0.0;3],
			fRec33: [0.0;3],
			fConst34: 0.0,
			fRec32: [0.0;2],
			fRec31: [0.0;2],
			fConst35: 0.0,
			fConst36: 0.0,
			fConst37: 0.0,
			fRec34: [0.0;3],
			fRec37: [0.0;3],
			fConst38: 0.0,
			fRec36: [0.0;2],
			fRec35: [0.0;2],
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fRec38: [0.0;3],
			fRec41: [0.0;3],
			fConst42: 0.0,
			fRec40: [0.0;2],
			fRec39: [0.0;2],
			fConst43: 0.0,
			fConst44: 0.0,
			fConst45: 0.0,
			fRec42: [0.0;3],
			fRec45: [0.0;3],
			fConst46: 0.0,
			fRec44: [0.0;2],
			fRec43: [0.0;2],
			fConst47: 0.0,
			fConst48: 0.0,
			fConst49: 0.0,
			fRec46: [0.0;3],
			fRec49: [0.0;3],
			fConst50: 0.0,
			fRec48: [0.0;2],
			fRec47: [0.0;2],
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fRec50: [0.0;3],
			fRec53: [0.0;3],
			fConst54: 0.0,
			fRec52: [0.0;2],
			fRec51: [0.0;2],
			fConst55: 0.0,
			fConst56: 0.0,
			fConst57: 0.0,
			fRec54: [0.0;3],
			fRec57: [0.0;3],
			fConst58: 0.0,
			fRec56: [0.0;2],
			fRec55: [0.0;2],
			fConst59: 0.0,
			fConst60: 0.0,
			fConst61: 0.0,
			fRec58: [0.0;3],
			fRec61: [0.0;3],
			fConst62: 0.0,
			fRec60: [0.0;2],
			fRec59: [0.0;2],
			fConst63: 0.0,
			fConst64: 0.0,
			fConst65: 0.0,
			fRec62: [0.0;3],
			fRec65: [0.0;3],
			fConst66: 0.0,
			fRec64: [0.0;2],
			fRec63: [0.0;2],
			fConst67: 0.0,
			fConst68: 0.0,
			fConst69: 0.0,
			fRec66: [0.0;3],
			fRec69: [0.0;3],
			fConst70: 0.0,
			fRec68: [0.0;2],
			fRec67: [0.0;2],
			fConst71: 0.0,
			fConst72: 0.0,
			fConst73: 0.0,
			fRec70: [0.0;3],
			fRec73: [0.0;3],
			fConst74: 0.0,
			fRec72: [0.0;2],
			fRec71: [0.0;2],
			fConst75: 0.0,
			fConst76: 0.0,
			fConst77: 0.0,
			fRec74: [0.0;3],
			fRec77: [0.0;3],
			fConst78: 0.0,
			fRec76: [0.0;2],
			fRec75: [0.0;2],
			fConst79: 0.0,
			fConst80: 0.0,
			fConst81: 0.0,
			fRec78: [0.0;3],
			fRec81: [0.0;3],
			fConst82: 0.0,
			fRec80: [0.0;2],
			fRec79: [0.0;2],
			fConst83: 0.0,
			fConst84: 0.0,
			fConst85: 0.0,
			fRec82: [0.0;3],
			fRec85: [0.0;3],
			fConst86: 0.0,
			fRec84: [0.0;2],
			fRec83: [0.0;2],
			fConst87: 0.0,
			fConst88: 0.0,
			fConst89: 0.0,
			fRec86: [0.0;3],
			fRec89: [0.0;3],
			fConst90: 0.0,
			fRec88: [0.0;2],
			fRec87: [0.0;2],
			fConst91: 0.0,
			fConst92: 0.0,
			fConst93: 0.0,
			fRec90: [0.0;3],
			fRec93: [0.0;3],
			fConst94: 0.0,
			fRec92: [0.0;2],
			fRec91: [0.0;2],
			fConst95: 0.0,
			fConst96: 0.0,
			fConst97: 0.0,
			fRec94: [0.0;3],
			fRec97: [0.0;3],
			fConst98: 0.0,
			fRec96: [0.0;2],
			fRec95: [0.0;2],
			fConst99: 0.0,
			fConst100: 0.0,
			fConst101: 0.0,
			fRec98: [0.0;3],
			fRec101: [0.0;3],
			fConst102: 0.0,
			fRec100: [0.0;2],
			fRec99: [0.0;2],
			fConst103: 0.0,
			fConst104: 0.0,
			fConst105: 0.0,
			fRec102: [0.0;3],
			fRec105: [0.0;3],
			fConst106: 0.0,
			fRec104: [0.0;2],
			fRec103: [0.0;2],
			fConst107: 0.0,
			fConst108: 0.0,
			fConst109: 0.0,
			fRec106: [0.0;3],
			fRec109: [0.0;3],
			fConst110: 0.0,
			fRec108: [0.0;2],
			fRec107: [0.0;2],
			fConst111: 0.0,
			fConst112: 0.0,
			fConst113: 0.0,
			fRec110: [0.0;3],
			fRec113: [0.0;3],
			fConst114: 0.0,
			fRec112: [0.0;2],
			fRec111: [0.0;2],
			fConst115: 0.0,
			fConst116: 0.0,
			fConst117: 0.0,
			fRec114: [0.0;3],
			fRec117: [0.0;3],
			fConst118: 0.0,
			fRec116: [0.0;2],
			fRec115: [0.0;2],
			fConst119: 0.0,
			fConst120: 0.0,
			fConst121: 0.0,
			fRec118: [0.0;3],
			fRec121: [0.0;3],
			fConst122: 0.0,
			fRec120: [0.0;2],
			fRec119: [0.0;2],
			fConst123: 0.0,
			fConst124: 0.0,
			fConst125: 0.0,
			fRec122: [0.0;3],
			fRec125: [0.0;3],
			fConst126: 0.0,
			fRec124: [0.0;2],
			fRec123: [0.0;2],
			fConst127: 0.0,
			fConst128: 0.0,
			fConst129: 0.0,
			fRec126: [0.0;3],
			fRec129: [0.0;3],
			fConst130: 0.0,
			fRec128: [0.0;2],
			fRec127: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("author", "RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Use example of the vocoder function where an impulse train is used as excitation.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "Vocoder");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m.declare("vaeffects.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fVslider0 = 0.5;
		self.fHslider1 = 330.0;
		self.fHslider2 = 5.0;
		self.fHslider3 = 5.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec1[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fVec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec5[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec4[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec3[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec6[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec9[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec8[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec7[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec10[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec13[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec12[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec11[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec14[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec17[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec16[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec15[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec18[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec21[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec20[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec19[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec22[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec25[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec24[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec23[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec26[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec29[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 3) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec28[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec27[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec30[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec33[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 3) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec32[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec31[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec34[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec37[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 3) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec36[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec35[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec38[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec41[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec40[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec39[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec42[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 3) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec45[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec44[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec43[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec46[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec49[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec48[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec47[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec50[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec53[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 3) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec52[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec51[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 2) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec54[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec57[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 3) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec56[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 2) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec55[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec58[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 3) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fRec61[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 3) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec60[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec59[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec62[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 3) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec65[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 3) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec64[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 2) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fRec63[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec66[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 3) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fRec69[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 3) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec68[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 2) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fRec67[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 2) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec70[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 3) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.fRec73[l72 as usize] = 0.0;
			l72 = (l72 + 1);
			if (l72 < 3) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.fRec72[l73 as usize] = 0.0;
			l73 = (l73 + 1);
			if (l73 < 2) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fRec71[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 2) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec74[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 3) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.fRec77[l76 as usize] = 0.0;
			l76 = (l76 + 1);
			if (l76 < 3) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fRec76[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 2) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec75[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 2) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec78[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 3) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.fRec81[l80 as usize] = 0.0;
			l80 = (l80 + 1);
			if (l80 < 3) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fRec80[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 2) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec79[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 2) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.fRec82[l83 as usize] = 0.0;
			l83 = (l83 + 1);
			if (l83 < 3) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.fRec85[l84 as usize] = 0.0;
			l84 = (l84 + 1);
			if (l84 < 3) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec84[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 2) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.fRec83[l86 as usize] = 0.0;
			l86 = (l86 + 1);
			if (l86 < 2) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec86[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 3) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.fRec89[l88 as usize] = 0.0;
			l88 = (l88 + 1);
			if (l88 < 3) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec88[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 2) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.fRec87[l90 as usize] = 0.0;
			l90 = (l90 + 1);
			if (l90 < 2) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fRec90[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 3) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.fRec93[l92 as usize] = 0.0;
			l92 = (l92 + 1);
			if (l92 < 3) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fRec92[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 2) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fRec91[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 2) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec94[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 3) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.fRec97[l96 as usize] = 0.0;
			l96 = (l96 + 1);
			if (l96 < 3) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec96[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 2) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec95[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 2) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fRec98[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 3) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.fRec101[l100 as usize] = 0.0;
			l100 = (l100 + 1);
			if (l100 < 3) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec100[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 2) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec99[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 2) { continue; } else { break; }
		}
		let mut l103: i32 = 0;
		loop {
			self.fRec102[l103 as usize] = 0.0;
			l103 = (l103 + 1);
			if (l103 < 3) { continue; } else { break; }
		}
		let mut l104: i32 = 0;
		loop {
			self.fRec105[l104 as usize] = 0.0;
			l104 = (l104 + 1);
			if (l104 < 3) { continue; } else { break; }
		}
		let mut l105: i32 = 0;
		loop {
			self.fRec104[l105 as usize] = 0.0;
			l105 = (l105 + 1);
			if (l105 < 2) { continue; } else { break; }
		}
		let mut l106: i32 = 0;
		loop {
			self.fRec103[l106 as usize] = 0.0;
			l106 = (l106 + 1);
			if (l106 < 2) { continue; } else { break; }
		}
		let mut l107: i32 = 0;
		loop {
			self.fRec106[l107 as usize] = 0.0;
			l107 = (l107 + 1);
			if (l107 < 3) { continue; } else { break; }
		}
		let mut l108: i32 = 0;
		loop {
			self.fRec109[l108 as usize] = 0.0;
			l108 = (l108 + 1);
			if (l108 < 3) { continue; } else { break; }
		}
		let mut l109: i32 = 0;
		loop {
			self.fRec108[l109 as usize] = 0.0;
			l109 = (l109 + 1);
			if (l109 < 2) { continue; } else { break; }
		}
		let mut l110: i32 = 0;
		loop {
			self.fRec107[l110 as usize] = 0.0;
			l110 = (l110 + 1);
			if (l110 < 2) { continue; } else { break; }
		}
		let mut l111: i32 = 0;
		loop {
			self.fRec110[l111 as usize] = 0.0;
			l111 = (l111 + 1);
			if (l111 < 3) { continue; } else { break; }
		}
		let mut l112: i32 = 0;
		loop {
			self.fRec113[l112 as usize] = 0.0;
			l112 = (l112 + 1);
			if (l112 < 3) { continue; } else { break; }
		}
		let mut l113: i32 = 0;
		loop {
			self.fRec112[l113 as usize] = 0.0;
			l113 = (l113 + 1);
			if (l113 < 2) { continue; } else { break; }
		}
		let mut l114: i32 = 0;
		loop {
			self.fRec111[l114 as usize] = 0.0;
			l114 = (l114 + 1);
			if (l114 < 2) { continue; } else { break; }
		}
		let mut l115: i32 = 0;
		loop {
			self.fRec114[l115 as usize] = 0.0;
			l115 = (l115 + 1);
			if (l115 < 3) { continue; } else { break; }
		}
		let mut l116: i32 = 0;
		loop {
			self.fRec117[l116 as usize] = 0.0;
			l116 = (l116 + 1);
			if (l116 < 3) { continue; } else { break; }
		}
		let mut l117: i32 = 0;
		loop {
			self.fRec116[l117 as usize] = 0.0;
			l117 = (l117 + 1);
			if (l117 < 2) { continue; } else { break; }
		}
		let mut l118: i32 = 0;
		loop {
			self.fRec115[l118 as usize] = 0.0;
			l118 = (l118 + 1);
			if (l118 < 2) { continue; } else { break; }
		}
		let mut l119: i32 = 0;
		loop {
			self.fRec118[l119 as usize] = 0.0;
			l119 = (l119 + 1);
			if (l119 < 3) { continue; } else { break; }
		}
		let mut l120: i32 = 0;
		loop {
			self.fRec121[l120 as usize] = 0.0;
			l120 = (l120 + 1);
			if (l120 < 3) { continue; } else { break; }
		}
		let mut l121: i32 = 0;
		loop {
			self.fRec120[l121 as usize] = 0.0;
			l121 = (l121 + 1);
			if (l121 < 2) { continue; } else { break; }
		}
		let mut l122: i32 = 0;
		loop {
			self.fRec119[l122 as usize] = 0.0;
			l122 = (l122 + 1);
			if (l122 < 2) { continue; } else { break; }
		}
		let mut l123: i32 = 0;
		loop {
			self.fRec122[l123 as usize] = 0.0;
			l123 = (l123 + 1);
			if (l123 < 3) { continue; } else { break; }
		}
		let mut l124: i32 = 0;
		loop {
			self.fRec125[l124 as usize] = 0.0;
			l124 = (l124 + 1);
			if (l124 < 3) { continue; } else { break; }
		}
		let mut l125: i32 = 0;
		loop {
			self.fRec124[l125 as usize] = 0.0;
			l125 = (l125 + 1);
			if (l125 < 2) { continue; } else { break; }
		}
		let mut l126: i32 = 0;
		loop {
			self.fRec123[l126 as usize] = 0.0;
			l126 = (l126 + 1);
			if (l126 < 2) { continue; } else { break; }
		}
		let mut l127: i32 = 0;
		loop {
			self.fRec126[l127 as usize] = 0.0;
			l127 = (l127 + 1);
			if (l127 < 3) { continue; } else { break; }
		}
		let mut l128: i32 = 0;
		loop {
			self.fRec129[l128 as usize] = 0.0;
			l128 = (l128 + 1);
			if (l128 < 3) { continue; } else { break; }
		}
		let mut l129: i32 = 0;
		loop {
			self.fRec128[l129 as usize] = 0.0;
			l129 = (l129 + 1);
			if (l129 < 2) { continue; } else { break; }
		}
		let mut l130: i32 = 0;
		loop {
			self.fRec127[l130 as usize] = 0.0;
			l130 = (l130 + 1);
			if (l130 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((22406.0742 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (1.0 / self.fConst0);
		self.fConst4 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst1))));
		self.fConst5 = (0.0 - self.fConst2);
		self.fConst6 = (1000.0 / self.fConst0);
		self.fConst7 = f32::tan((18437.4609 / self.fConst0));
		self.fConst8 = (1.0 / self.fConst7);
		self.fConst9 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst7))));
		self.fConst10 = (0.0 - self.fConst8);
		self.fConst11 = f32::tan((15171.7754 / self.fConst0));
		self.fConst12 = (1.0 / self.fConst11);
		self.fConst13 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst11))));
		self.fConst14 = (0.0 - self.fConst12);
		self.fConst15 = f32::tan((12484.5166 / self.fConst0));
		self.fConst16 = (1.0 / self.fConst15);
		self.fConst17 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst15))));
		self.fConst18 = (0.0 - self.fConst16);
		self.fConst19 = f32::tan((10273.2305 / self.fConst0));
		self.fConst20 = (1.0 / self.fConst19);
		self.fConst21 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst19))));
		self.fConst22 = (0.0 - self.fConst20);
		self.fConst23 = f32::tan((8453.61328 / self.fConst0));
		self.fConst24 = (1.0 / self.fConst23);
		self.fConst25 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst23))));
		self.fConst26 = (0.0 - self.fConst24);
		self.fConst27 = f32::tan((6956.28955 / self.fConst0));
		self.fConst28 = (1.0 / self.fConst27);
		self.fConst29 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst27))));
		self.fConst30 = (0.0 - self.fConst28);
		self.fConst31 = f32::tan((5724.17578 / self.fConst0));
		self.fConst32 = (1.0 / self.fConst31);
		self.fConst33 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst31))));
		self.fConst34 = (0.0 - self.fConst32);
		self.fConst35 = f32::tan((4710.29688 / self.fConst0));
		self.fConst36 = (1.0 / self.fConst35);
		self.fConst37 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst35))));
		self.fConst38 = (0.0 - self.fConst36);
		self.fConst39 = f32::tan((3875.99854 / self.fConst0));
		self.fConst40 = (1.0 / self.fConst39);
		self.fConst41 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst39))));
		self.fConst42 = (0.0 - self.fConst40);
		self.fConst43 = f32::tan((3189.4729 / self.fConst0));
		self.fConst44 = (1.0 / self.fConst43);
		self.fConst45 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst43))));
		self.fConst46 = (0.0 - self.fConst44);
		self.fConst47 = f32::tan((2624.54639 / self.fConst0));
		self.fConst48 = (1.0 / self.fConst47);
		self.fConst49 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst47))));
		self.fConst50 = (0.0 - self.fConst48);
		self.fConst51 = f32::tan((2159.68066 / self.fConst0));
		self.fConst52 = (1.0 / self.fConst51);
		self.fConst53 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst51))));
		self.fConst54 = (0.0 - self.fConst52);
		self.fConst55 = f32::tan((1777.1532 / self.fConst0));
		self.fConst56 = (1.0 / self.fConst55);
		self.fConst57 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst55))));
		self.fConst58 = (0.0 - self.fConst56);
		self.fConst59 = f32::tan((1462.37976 / self.fConst0));
		self.fConst60 = (1.0 / self.fConst59);
		self.fConst61 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst59))));
		self.fConst62 = (0.0 - self.fConst60);
		self.fConst63 = f32::tan((1203.35974 / self.fConst0));
		self.fConst64 = (1.0 / self.fConst63);
		self.fConst65 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst63))));
		self.fConst66 = (0.0 - self.fConst64);
		self.fConst67 = f32::tan((990.217957 / self.fConst0));
		self.fConst68 = (1.0 / self.fConst67);
		self.fConst69 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst67))));
		self.fConst70 = (0.0 - self.fConst68);
		self.fConst71 = f32::tan((814.828308 / self.fConst0));
		self.fConst72 = (1.0 / self.fConst71);
		self.fConst73 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst71))));
		self.fConst74 = (0.0 - self.fConst72);
		self.fConst75 = f32::tan((670.504089 / self.fConst0));
		self.fConst76 = (1.0 / self.fConst75);
		self.fConst77 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst75))));
		self.fConst78 = (0.0 - self.fConst76);
		self.fConst79 = f32::tan((551.742859 / self.fConst0));
		self.fConst80 = (1.0 / self.fConst79);
		self.fConst81 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst79))));
		self.fConst82 = (0.0 - self.fConst80);
		self.fConst83 = f32::tan((454.016937 / self.fConst0));
		self.fConst84 = (1.0 / self.fConst83);
		self.fConst85 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst83))));
		self.fConst86 = (0.0 - self.fConst84);
		self.fConst87 = f32::tan((373.600433 / self.fConst0));
		self.fConst88 = (1.0 / self.fConst87);
		self.fConst89 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst87))));
		self.fConst90 = (0.0 - self.fConst88);
		self.fConst91 = f32::tan((307.42749 / self.fConst0));
		self.fConst92 = (1.0 / self.fConst91);
		self.fConst93 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst91))));
		self.fConst94 = (0.0 - self.fConst92);
		self.fConst95 = f32::tan((252.975235 / self.fConst0));
		self.fConst96 = (1.0 / self.fConst95);
		self.fConst97 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst95))));
		self.fConst98 = (0.0 - self.fConst96);
		self.fConst99 = f32::tan((208.167679 / self.fConst0));
		self.fConst100 = (1.0 / self.fConst99);
		self.fConst101 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst99))));
		self.fConst102 = (0.0 - self.fConst100);
		self.fConst103 = f32::tan((171.296555 / self.fConst0));
		self.fConst104 = (1.0 / self.fConst103);
		self.fConst105 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst103))));
		self.fConst106 = (0.0 - self.fConst104);
		self.fConst107 = f32::tan((140.956116 / self.fConst0));
		self.fConst108 = (1.0 / self.fConst107);
		self.fConst109 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst107))));
		self.fConst110 = (0.0 - self.fConst108);
		self.fConst111 = f32::tan((115.989655 / self.fConst0));
		self.fConst112 = (1.0 / self.fConst111);
		self.fConst113 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst111))));
		self.fConst114 = (0.0 - self.fConst112);
		self.fConst115 = f32::tan((95.4453049 / self.fConst0));
		self.fConst116 = (1.0 / self.fConst115);
		self.fConst117 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst115))));
		self.fConst118 = (0.0 - self.fConst116);
		self.fConst119 = f32::tan((27228.9238 / self.fConst0));
		self.fConst120 = (1.0 / self.fConst119);
		self.fConst121 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst119))));
		self.fConst122 = (0.0 - self.fConst120);
		self.fConst123 = f32::tan((33089.8789 / self.fConst0));
		self.fConst124 = (1.0 / self.fConst123);
		self.fConst125 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst123))));
		self.fConst126 = (0.0 - self.fConst124);
		self.fConst127 = f32::tan((40212.3867 / self.fConst0));
		self.fConst128 = (1.0 / self.fConst127);
		self.fConst129 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst127))));
		self.fConst130 = (0.0 - self.fConst128);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openHorizontalBox("My Vocoder");
		ui_interface.openVerticalBox("Excitation");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("Freq", &mut self.fHslider1, 330.0, 50.0, 2000.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider0, "1", "");
		ui_interface.addVerticalSlider("Gain", &mut self.fVslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Vocoder");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "Attack time in seconds");
		ui_interface.addHorizontalSlider("Attack", &mut self.fHslider2, 5.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Release time in seconds");
		ui_interface.addHorizontalSlider("Release", &mut self.fHslider3, 5.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Coefficient to adjust the   bandwidth of each band");
		ui_interface.addHorizontalSlider("BW", &mut self.fHslider0, 0.5, 0.10000000000000001, 2.0, 0.001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.177122265 * fSlow0);
		let mut fSlow2: f32 = (1.0 / ((self.fConst2 * (self.fConst2 + fSlow1)) + 1.0));
		let mut fSlow3: f32 = (0.00100000005 * (self.fVslider0 as f32));
		let mut fSlow4: f32 = (self.fHslider1 as f32);
		let mut fSlow5: f32 = ((self.fConst2 * (self.fConst2 - fSlow1)) + 1.0);
		let mut fSlow6: f32 = f32::exp((0.0 - (self.fConst6 / (self.fHslider2 as f32))));
		let mut fSlow7: f32 = f32::exp((0.0 - (self.fConst6 / (self.fHslider3 as f32))));
		let mut fSlow8: f32 = (0.177122265 * fSlow0);
		let mut fSlow9: f32 = (1.0 / ((self.fConst8 * (self.fConst8 + fSlow8)) + 1.0));
		let mut fSlow10: f32 = ((self.fConst8 * (self.fConst8 - fSlow8)) + 1.0);
		let mut fSlow11: f32 = (0.177122265 * fSlow0);
		let mut fSlow12: f32 = (1.0 / ((self.fConst12 * (self.fConst12 + fSlow11)) + 1.0));
		let mut fSlow13: f32 = ((self.fConst12 * (self.fConst12 - fSlow11)) + 1.0);
		let mut fSlow14: f32 = (1.0 / ((self.fConst16 * (self.fConst16 + fSlow1)) + 1.0));
		let mut fSlow15: f32 = ((self.fConst16 * (self.fConst16 - fSlow1)) + 1.0);
		let mut fSlow16: f32 = (0.177122265 * fSlow0);
		let mut fSlow17: f32 = (1.0 / ((self.fConst20 * (self.fConst20 + fSlow16)) + 1.0));
		let mut fSlow18: f32 = ((self.fConst20 * (self.fConst20 - fSlow16)) + 1.0);
		let mut fSlow19: f32 = (0.177122265 * fSlow0);
		let mut fSlow20: f32 = (1.0 / ((self.fConst24 * (self.fConst24 + fSlow19)) + 1.0));
		let mut fSlow21: f32 = ((self.fConst24 * (self.fConst24 - fSlow19)) + 1.0);
		let mut fSlow22: f32 = (0.177122265 * fSlow0);
		let mut fSlow23: f32 = (1.0 / ((self.fConst28 * (self.fConst28 + fSlow22)) + 1.0));
		let mut fSlow24: f32 = ((self.fConst28 * (self.fConst28 - fSlow22)) + 1.0);
		let mut fSlow25: f32 = (0.177122265 * fSlow0);
		let mut fSlow26: f32 = (1.0 / ((self.fConst32 * (self.fConst32 + fSlow25)) + 1.0));
		let mut fSlow27: f32 = ((self.fConst32 * (self.fConst32 - fSlow25)) + 1.0);
		let mut fSlow28: f32 = (1.0 / ((self.fConst36 * (self.fConst36 + fSlow22)) + 1.0));
		let mut fSlow29: f32 = ((self.fConst36 * (self.fConst36 - fSlow22)) + 1.0);
		let mut fSlow30: f32 = (1.0 / ((self.fConst40 * (self.fConst40 + fSlow25)) + 1.0));
		let mut fSlow31: f32 = ((self.fConst40 * (self.fConst40 - fSlow25)) + 1.0);
		let mut fSlow32: f32 = (0.177122265 * fSlow0);
		let mut fSlow33: f32 = (1.0 / ((self.fConst44 * (self.fConst44 + fSlow32)) + 1.0));
		let mut fSlow34: f32 = ((self.fConst44 * (self.fConst44 - fSlow32)) + 1.0);
		let mut fSlow35: f32 = (0.177122265 * fSlow0);
		let mut fSlow36: f32 = (1.0 / ((self.fConst48 * (self.fConst48 + fSlow35)) + 1.0));
		let mut fSlow37: f32 = ((self.fConst48 * (self.fConst48 - fSlow35)) + 1.0);
		let mut fSlow38: f32 = (0.177122265 * fSlow0);
		let mut fSlow39: f32 = (1.0 / ((self.fConst52 * (self.fConst52 + fSlow38)) + 1.0));
		let mut fSlow40: f32 = ((self.fConst52 * (self.fConst52 - fSlow38)) + 1.0);
		let mut fSlow41: f32 = (1.0 / ((self.fConst56 * (self.fConst56 + fSlow16)) + 1.0));
		let mut fSlow42: f32 = ((self.fConst56 * (self.fConst56 - fSlow16)) + 1.0);
		let mut fSlow43: f32 = (1.0 / ((self.fConst60 * (self.fConst60 + fSlow16)) + 1.0));
		let mut fSlow44: f32 = ((self.fConst60 * (self.fConst60 - fSlow16)) + 1.0);
		let mut fSlow45: f32 = (1.0 / ((self.fConst64 * (self.fConst64 + fSlow25)) + 1.0));
		let mut fSlow46: f32 = ((self.fConst64 * (self.fConst64 - fSlow25)) + 1.0);
		let mut fSlow47: f32 = (1.0 / ((self.fConst68 * (self.fConst68 + fSlow11)) + 1.0));
		let mut fSlow48: f32 = ((self.fConst68 * (self.fConst68 - fSlow11)) + 1.0);
		let mut fSlow49: f32 = (0.177122265 * fSlow0);
		let mut fSlow50: f32 = (1.0 / ((self.fConst72 * (self.fConst72 + fSlow49)) + 1.0));
		let mut fSlow51: f32 = ((self.fConst72 * (self.fConst72 - fSlow49)) + 1.0);
		let mut fSlow52: f32 = (1.0 / ((self.fConst76 * (self.fConst76 + fSlow11)) + 1.0));
		let mut fSlow53: f32 = ((self.fConst76 * (self.fConst76 - fSlow11)) + 1.0);
		let mut fSlow54: f32 = (1.0 / ((self.fConst80 * (self.fConst80 + fSlow38)) + 1.0));
		let mut fSlow55: f32 = ((self.fConst80 * (self.fConst80 - fSlow38)) + 1.0);
		let mut fSlow56: f32 = (1.0 / ((self.fConst84 * (self.fConst84 + fSlow32)) + 1.0));
		let mut fSlow57: f32 = ((self.fConst84 * (self.fConst84 - fSlow32)) + 1.0);
		let mut fSlow58: f32 = (1.0 / ((self.fConst88 * (self.fConst88 + fSlow1)) + 1.0));
		let mut fSlow59: f32 = ((self.fConst88 * (self.fConst88 - fSlow1)) + 1.0);
		let mut fSlow60: f32 = (1.0 / ((self.fConst92 * (self.fConst92 + fSlow22)) + 1.0));
		let mut fSlow61: f32 = ((self.fConst92 * (self.fConst92 - fSlow22)) + 1.0);
		let mut fSlow62: f32 = (0.177122265 * fSlow0);
		let mut fSlow63: f32 = (1.0 / ((self.fConst96 * (self.fConst96 + fSlow62)) + 1.0));
		let mut fSlow64: f32 = ((self.fConst96 * (self.fConst96 - fSlow62)) + 1.0);
		let mut fSlow65: f32 = (1.0 / ((self.fConst100 * (self.fConst100 + fSlow32)) + 1.0));
		let mut fSlow66: f32 = ((self.fConst100 * (self.fConst100 - fSlow32)) + 1.0);
		let mut fSlow67: f32 = (1.0 / ((self.fConst104 * (self.fConst104 + fSlow16)) + 1.0));
		let mut fSlow68: f32 = ((self.fConst104 * (self.fConst104 - fSlow16)) + 1.0);
		let mut fSlow69: f32 = (1.0 / ((self.fConst108 * (self.fConst108 + fSlow1)) + 1.0));
		let mut fSlow70: f32 = ((self.fConst108 * (self.fConst108 - fSlow1)) + 1.0);
		let mut fSlow71: f32 = (1.0 / ((self.fConst112 * (self.fConst112 + fSlow38)) + 1.0));
		let mut fSlow72: f32 = ((self.fConst112 * (self.fConst112 - fSlow38)) + 1.0);
		let mut fSlow73: f32 = (1.0 / ((self.fConst116 * (self.fConst116 + fSlow1)) + 1.0));
		let mut fSlow74: f32 = ((self.fConst116 * (self.fConst116 - fSlow1)) + 1.0);
		let mut fSlow75: f32 = (1.0 / ((self.fConst120 * (self.fConst120 + fSlow25)) + 1.0));
		let mut fSlow76: f32 = ((self.fConst120 * (self.fConst120 - fSlow25)) + 1.0);
		let mut fSlow77: f32 = (0.177122265 * fSlow0);
		let mut fSlow78: f32 = (1.0 / ((self.fConst124 * (self.fConst124 + fSlow77)) + 1.0));
		let mut fSlow79: f32 = ((self.fConst124 * (self.fConst124 - fSlow77)) + 1.0);
		let mut fSlow80: f32 = (1.0 / ((self.fConst128 * (self.fConst128 + fSlow19)) + 1.0));
		let mut fSlow81: f32 = ((self.fConst128 * (self.fConst128 - fSlow19)) + 1.0);
		let mut i: i32 = 0;
		loop {
			self.fRec1[0] = (fSlow3 + (0.999000013 * self.fRec1[1]));
			self.fVec0[0] = fSlow4;
			let mut fTemp0: f32 = (self.fRec2[1] + (self.fConst3 * self.fVec0[1]));
			self.fRec2[0] = (fTemp0 - f32::floor(fTemp0));
			let mut fTemp1: f32 = (self.fRec1[0] * ((((self.fRec2[0] - self.fRec2[1]) < 0.0) as i32) as f32));
			self.fRec0[0] = (fTemp1 - (fSlow2 * ((fSlow5 * self.fRec0[2]) + (self.fConst4 * self.fRec0[1]))));
			let mut fTemp2: f32 = (inputs[0][i as usize] as f32);
			self.fRec5[0] = (fTemp2 - (fSlow2 * ((self.fConst4 * self.fRec5[1]) + (fSlow5 * self.fRec5[2]))));
			let mut fTemp3: f32 = f32::abs((fSlow2 * ((self.fConst2 * self.fRec5[0]) + (self.fConst5 * self.fRec5[2]))));
			let mut fTemp4: f32 = if (((self.fRec3[1] > fTemp3) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec4[0] = ((self.fRec4[1] * fTemp4) + (fTemp3 * (1.0 - fTemp4)));
			self.fRec3[0] = self.fRec4[0];
			self.fRec6[0] = (fTemp1 - (fSlow9 * ((fSlow10 * self.fRec6[2]) + (self.fConst9 * self.fRec6[1]))));
			self.fRec9[0] = (fTemp2 - (fSlow9 * ((self.fConst9 * self.fRec9[1]) + (fSlow10 * self.fRec9[2]))));
			let mut fTemp5: f32 = f32::abs((fSlow9 * ((self.fConst8 * self.fRec9[0]) + (self.fConst10 * self.fRec9[2]))));
			let mut fTemp6: f32 = if (((self.fRec7[1] > fTemp5) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec8[0] = ((self.fRec8[1] * fTemp6) + (fTemp5 * (1.0 - fTemp6)));
			self.fRec7[0] = self.fRec8[0];
			self.fRec10[0] = (fTemp1 - (fSlow12 * ((fSlow13 * self.fRec10[2]) + (self.fConst13 * self.fRec10[1]))));
			self.fRec13[0] = (fTemp2 - (fSlow12 * ((self.fConst13 * self.fRec13[1]) + (fSlow13 * self.fRec13[2]))));
			let mut fTemp7: f32 = f32::abs((fSlow12 * ((self.fConst12 * self.fRec13[0]) + (self.fConst14 * self.fRec13[2]))));
			let mut fTemp8: f32 = if (((self.fRec11[1] > fTemp7) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec12[0] = ((self.fRec12[1] * fTemp8) + (fTemp7 * (1.0 - fTemp8)));
			self.fRec11[0] = self.fRec12[0];
			self.fRec14[0] = (fTemp1 - (fSlow14 * ((fSlow15 * self.fRec14[2]) + (self.fConst17 * self.fRec14[1]))));
			self.fRec17[0] = (fTemp2 - (fSlow14 * ((self.fConst17 * self.fRec17[1]) + (fSlow15 * self.fRec17[2]))));
			let mut fTemp9: f32 = f32::abs((fSlow14 * ((self.fConst16 * self.fRec17[0]) + (self.fConst18 * self.fRec17[2]))));
			let mut fTemp10: f32 = if (((self.fRec15[1] > fTemp9) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec16[0] = ((self.fRec16[1] * fTemp10) + (fTemp9 * (1.0 - fTemp10)));
			self.fRec15[0] = self.fRec16[0];
			self.fRec18[0] = (fTemp1 - (fSlow17 * ((fSlow18 * self.fRec18[2]) + (self.fConst21 * self.fRec18[1]))));
			self.fRec21[0] = (fTemp2 - (fSlow17 * ((self.fConst21 * self.fRec21[1]) + (fSlow18 * self.fRec21[2]))));
			let mut fTemp11: f32 = f32::abs((fSlow17 * ((self.fConst20 * self.fRec21[0]) + (self.fConst22 * self.fRec21[2]))));
			let mut fTemp12: f32 = if (((self.fRec19[1] > fTemp11) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec20[0] = ((self.fRec20[1] * fTemp12) + (fTemp11 * (1.0 - fTemp12)));
			self.fRec19[0] = self.fRec20[0];
			self.fRec22[0] = (fTemp1 - (fSlow20 * ((fSlow21 * self.fRec22[2]) + (self.fConst25 * self.fRec22[1]))));
			self.fRec25[0] = (fTemp2 - (fSlow20 * ((self.fConst25 * self.fRec25[1]) + (fSlow21 * self.fRec25[2]))));
			let mut fTemp13: f32 = f32::abs((fSlow20 * ((self.fConst24 * self.fRec25[0]) + (self.fConst26 * self.fRec25[2]))));
			let mut fTemp14: f32 = if (((self.fRec23[1] > fTemp13) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec24[0] = ((self.fRec24[1] * fTemp14) + (fTemp13 * (1.0 - fTemp14)));
			self.fRec23[0] = self.fRec24[0];
			self.fRec26[0] = (fTemp1 - (fSlow23 * ((fSlow24 * self.fRec26[2]) + (self.fConst29 * self.fRec26[1]))));
			self.fRec29[0] = (fTemp2 - (fSlow23 * ((self.fConst29 * self.fRec29[1]) + (fSlow24 * self.fRec29[2]))));
			let mut fTemp15: f32 = f32::abs((fSlow23 * ((self.fConst28 * self.fRec29[0]) + (self.fConst30 * self.fRec29[2]))));
			let mut fTemp16: f32 = if (((self.fRec27[1] > fTemp15) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec28[0] = ((self.fRec28[1] * fTemp16) + (fTemp15 * (1.0 - fTemp16)));
			self.fRec27[0] = self.fRec28[0];
			self.fRec30[0] = (fTemp1 - (fSlow26 * ((fSlow27 * self.fRec30[2]) + (self.fConst33 * self.fRec30[1]))));
			self.fRec33[0] = (fTemp2 - (fSlow26 * ((self.fConst33 * self.fRec33[1]) + (fSlow27 * self.fRec33[2]))));
			let mut fTemp17: f32 = f32::abs((fSlow26 * ((self.fConst32 * self.fRec33[0]) + (self.fConst34 * self.fRec33[2]))));
			let mut fTemp18: f32 = if (((self.fRec31[1] > fTemp17) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec32[0] = ((self.fRec32[1] * fTemp18) + (fTemp17 * (1.0 - fTemp18)));
			self.fRec31[0] = self.fRec32[0];
			self.fRec34[0] = (fTemp1 - (fSlow28 * ((fSlow29 * self.fRec34[2]) + (self.fConst37 * self.fRec34[1]))));
			self.fRec37[0] = (fTemp2 - (fSlow28 * ((self.fConst37 * self.fRec37[1]) + (fSlow29 * self.fRec37[2]))));
			let mut fTemp19: f32 = f32::abs((fSlow28 * ((self.fConst36 * self.fRec37[0]) + (self.fConst38 * self.fRec37[2]))));
			let mut fTemp20: f32 = if (((self.fRec35[1] > fTemp19) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec36[0] = ((self.fRec36[1] * fTemp20) + (fTemp19 * (1.0 - fTemp20)));
			self.fRec35[0] = self.fRec36[0];
			self.fRec38[0] = (fTemp1 - (fSlow30 * ((fSlow31 * self.fRec38[2]) + (self.fConst41 * self.fRec38[1]))));
			self.fRec41[0] = (fTemp2 - (fSlow30 * ((self.fConst41 * self.fRec41[1]) + (fSlow31 * self.fRec41[2]))));
			let mut fTemp21: f32 = f32::abs((fSlow30 * ((self.fConst40 * self.fRec41[0]) + (self.fConst42 * self.fRec41[2]))));
			let mut fTemp22: f32 = if (((self.fRec39[1] > fTemp21) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec40[0] = ((self.fRec40[1] * fTemp22) + (fTemp21 * (1.0 - fTemp22)));
			self.fRec39[0] = self.fRec40[0];
			self.fRec42[0] = (fTemp1 - (fSlow33 * ((fSlow34 * self.fRec42[2]) + (self.fConst45 * self.fRec42[1]))));
			self.fRec45[0] = (fTemp2 - (fSlow33 * ((self.fConst45 * self.fRec45[1]) + (fSlow34 * self.fRec45[2]))));
			let mut fTemp23: f32 = f32::abs((fSlow33 * ((self.fConst44 * self.fRec45[0]) + (self.fConst46 * self.fRec45[2]))));
			let mut fTemp24: f32 = if (((self.fRec43[1] > fTemp23) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec44[0] = ((self.fRec44[1] * fTemp24) + (fTemp23 * (1.0 - fTemp24)));
			self.fRec43[0] = self.fRec44[0];
			self.fRec46[0] = (fTemp1 - (fSlow36 * ((fSlow37 * self.fRec46[2]) + (self.fConst49 * self.fRec46[1]))));
			self.fRec49[0] = (fTemp2 - (fSlow36 * ((self.fConst49 * self.fRec49[1]) + (fSlow37 * self.fRec49[2]))));
			let mut fTemp25: f32 = f32::abs((fSlow36 * ((self.fConst48 * self.fRec49[0]) + (self.fConst50 * self.fRec49[2]))));
			let mut fTemp26: f32 = if (((self.fRec47[1] > fTemp25) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec48[0] = ((self.fRec48[1] * fTemp26) + (fTemp25 * (1.0 - fTemp26)));
			self.fRec47[0] = self.fRec48[0];
			self.fRec50[0] = (fTemp1 - (fSlow39 * ((fSlow40 * self.fRec50[2]) + (self.fConst53 * self.fRec50[1]))));
			self.fRec53[0] = (fTemp2 - (fSlow39 * ((self.fConst53 * self.fRec53[1]) + (fSlow40 * self.fRec53[2]))));
			let mut fTemp27: f32 = f32::abs((fSlow39 * ((self.fConst52 * self.fRec53[0]) + (self.fConst54 * self.fRec53[2]))));
			let mut fTemp28: f32 = if (((self.fRec51[1] > fTemp27) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec52[0] = ((self.fRec52[1] * fTemp28) + (fTemp27 * (1.0 - fTemp28)));
			self.fRec51[0] = self.fRec52[0];
			self.fRec54[0] = (fTemp1 - (fSlow41 * ((fSlow42 * self.fRec54[2]) + (self.fConst57 * self.fRec54[1]))));
			self.fRec57[0] = (fTemp2 - (fSlow41 * ((self.fConst57 * self.fRec57[1]) + (fSlow42 * self.fRec57[2]))));
			let mut fTemp29: f32 = f32::abs((fSlow41 * ((self.fConst56 * self.fRec57[0]) + (self.fConst58 * self.fRec57[2]))));
			let mut fTemp30: f32 = if (((self.fRec55[1] > fTemp29) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec56[0] = ((self.fRec56[1] * fTemp30) + (fTemp29 * (1.0 - fTemp30)));
			self.fRec55[0] = self.fRec56[0];
			self.fRec58[0] = (fTemp1 - (fSlow43 * ((fSlow44 * self.fRec58[2]) + (self.fConst61 * self.fRec58[1]))));
			self.fRec61[0] = (fTemp2 - (fSlow43 * ((self.fConst61 * self.fRec61[1]) + (fSlow44 * self.fRec61[2]))));
			let mut fTemp31: f32 = f32::abs((fSlow43 * ((self.fConst60 * self.fRec61[0]) + (self.fConst62 * self.fRec61[2]))));
			let mut fTemp32: f32 = if (((self.fRec59[1] > fTemp31) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec60[0] = ((self.fRec60[1] * fTemp32) + (fTemp31 * (1.0 - fTemp32)));
			self.fRec59[0] = self.fRec60[0];
			self.fRec62[0] = (fTemp1 - (fSlow45 * ((fSlow46 * self.fRec62[2]) + (self.fConst65 * self.fRec62[1]))));
			self.fRec65[0] = (fTemp2 - (fSlow45 * ((self.fConst65 * self.fRec65[1]) + (fSlow46 * self.fRec65[2]))));
			let mut fTemp33: f32 = f32::abs((fSlow45 * ((self.fConst64 * self.fRec65[0]) + (self.fConst66 * self.fRec65[2]))));
			let mut fTemp34: f32 = if (((self.fRec63[1] > fTemp33) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec64[0] = ((self.fRec64[1] * fTemp34) + (fTemp33 * (1.0 - fTemp34)));
			self.fRec63[0] = self.fRec64[0];
			self.fRec66[0] = (fTemp1 - (fSlow47 * ((fSlow48 * self.fRec66[2]) + (self.fConst69 * self.fRec66[1]))));
			self.fRec69[0] = (fTemp2 - (fSlow47 * ((self.fConst69 * self.fRec69[1]) + (fSlow48 * self.fRec69[2]))));
			let mut fTemp35: f32 = f32::abs((fSlow47 * ((self.fConst68 * self.fRec69[0]) + (self.fConst70 * self.fRec69[2]))));
			let mut fTemp36: f32 = if (((self.fRec67[1] > fTemp35) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec68[0] = ((self.fRec68[1] * fTemp36) + (fTemp35 * (1.0 - fTemp36)));
			self.fRec67[0] = self.fRec68[0];
			self.fRec70[0] = (fTemp1 - (fSlow50 * ((fSlow51 * self.fRec70[2]) + (self.fConst73 * self.fRec70[1]))));
			self.fRec73[0] = (fTemp2 - (fSlow50 * ((self.fConst73 * self.fRec73[1]) + (fSlow51 * self.fRec73[2]))));
			let mut fTemp37: f32 = f32::abs((fSlow50 * ((self.fConst72 * self.fRec73[0]) + (self.fConst74 * self.fRec73[2]))));
			let mut fTemp38: f32 = if (((self.fRec71[1] > fTemp37) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec72[0] = ((self.fRec72[1] * fTemp38) + (fTemp37 * (1.0 - fTemp38)));
			self.fRec71[0] = self.fRec72[0];
			self.fRec74[0] = (fTemp1 - (fSlow52 * ((fSlow53 * self.fRec74[2]) + (self.fConst77 * self.fRec74[1]))));
			self.fRec77[0] = (fTemp2 - (fSlow52 * ((self.fConst77 * self.fRec77[1]) + (fSlow53 * self.fRec77[2]))));
			let mut fTemp39: f32 = f32::abs((fSlow52 * ((self.fConst76 * self.fRec77[0]) + (self.fConst78 * self.fRec77[2]))));
			let mut fTemp40: f32 = if (((self.fRec75[1] > fTemp39) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec76[0] = ((self.fRec76[1] * fTemp40) + (fTemp39 * (1.0 - fTemp40)));
			self.fRec75[0] = self.fRec76[0];
			self.fRec78[0] = (fTemp1 - (fSlow54 * ((fSlow55 * self.fRec78[2]) + (self.fConst81 * self.fRec78[1]))));
			self.fRec81[0] = (fTemp2 - (fSlow54 * ((self.fConst81 * self.fRec81[1]) + (fSlow55 * self.fRec81[2]))));
			let mut fTemp41: f32 = f32::abs((fSlow54 * ((self.fConst80 * self.fRec81[0]) + (self.fConst82 * self.fRec81[2]))));
			let mut fTemp42: f32 = if (((self.fRec79[1] > fTemp41) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec80[0] = ((self.fRec80[1] * fTemp42) + (fTemp41 * (1.0 - fTemp42)));
			self.fRec79[0] = self.fRec80[0];
			self.fRec82[0] = (fTemp1 - (fSlow56 * ((fSlow57 * self.fRec82[2]) + (self.fConst85 * self.fRec82[1]))));
			self.fRec85[0] = (fTemp2 - (fSlow56 * ((self.fConst85 * self.fRec85[1]) + (fSlow57 * self.fRec85[2]))));
			let mut fTemp43: f32 = f32::abs((fSlow56 * ((self.fConst84 * self.fRec85[0]) + (self.fConst86 * self.fRec85[2]))));
			let mut fTemp44: f32 = if (((self.fRec83[1] > fTemp43) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec84[0] = ((self.fRec84[1] * fTemp44) + (fTemp43 * (1.0 - fTemp44)));
			self.fRec83[0] = self.fRec84[0];
			self.fRec86[0] = (fTemp1 - (fSlow58 * ((fSlow59 * self.fRec86[2]) + (self.fConst89 * self.fRec86[1]))));
			self.fRec89[0] = (fTemp2 - (fSlow58 * ((self.fConst89 * self.fRec89[1]) + (fSlow59 * self.fRec89[2]))));
			let mut fTemp45: f32 = f32::abs((fSlow58 * ((self.fConst88 * self.fRec89[0]) + (self.fConst90 * self.fRec89[2]))));
			let mut fTemp46: f32 = if (((self.fRec87[1] > fTemp45) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec88[0] = ((self.fRec88[1] * fTemp46) + (fTemp45 * (1.0 - fTemp46)));
			self.fRec87[0] = self.fRec88[0];
			self.fRec90[0] = (fTemp1 - (fSlow60 * ((fSlow61 * self.fRec90[2]) + (self.fConst93 * self.fRec90[1]))));
			self.fRec93[0] = (fTemp2 - (fSlow60 * ((self.fConst93 * self.fRec93[1]) + (fSlow61 * self.fRec93[2]))));
			let mut fTemp47: f32 = f32::abs((fSlow60 * ((self.fConst92 * self.fRec93[0]) + (self.fConst94 * self.fRec93[2]))));
			let mut fTemp48: f32 = if (((self.fRec91[1] > fTemp47) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec92[0] = ((self.fRec92[1] * fTemp48) + (fTemp47 * (1.0 - fTemp48)));
			self.fRec91[0] = self.fRec92[0];
			self.fRec94[0] = (fTemp1 - (fSlow63 * ((fSlow64 * self.fRec94[2]) + (self.fConst97 * self.fRec94[1]))));
			self.fRec97[0] = (fTemp2 - (fSlow63 * ((self.fConst97 * self.fRec97[1]) + (fSlow64 * self.fRec97[2]))));
			let mut fTemp49: f32 = f32::abs((fSlow63 * ((self.fConst96 * self.fRec97[0]) + (self.fConst98 * self.fRec97[2]))));
			let mut fTemp50: f32 = if (((self.fRec95[1] > fTemp49) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec96[0] = ((self.fRec96[1] * fTemp50) + (fTemp49 * (1.0 - fTemp50)));
			self.fRec95[0] = self.fRec96[0];
			self.fRec98[0] = (fTemp1 - (fSlow65 * ((fSlow66 * self.fRec98[2]) + (self.fConst101 * self.fRec98[1]))));
			self.fRec101[0] = (fTemp2 - (fSlow65 * ((self.fConst101 * self.fRec101[1]) + (fSlow66 * self.fRec101[2]))));
			let mut fTemp51: f32 = f32::abs((fSlow65 * ((self.fConst100 * self.fRec101[0]) + (self.fConst102 * self.fRec101[2]))));
			let mut fTemp52: f32 = if (((self.fRec99[1] > fTemp51) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec100[0] = ((self.fRec100[1] * fTemp52) + (fTemp51 * (1.0 - fTemp52)));
			self.fRec99[0] = self.fRec100[0];
			self.fRec102[0] = (fTemp1 - (fSlow67 * ((fSlow68 * self.fRec102[2]) + (self.fConst105 * self.fRec102[1]))));
			self.fRec105[0] = (fTemp2 - (fSlow67 * ((self.fConst105 * self.fRec105[1]) + (fSlow68 * self.fRec105[2]))));
			let mut fTemp53: f32 = f32::abs((fSlow67 * ((self.fConst104 * self.fRec105[0]) + (self.fConst106 * self.fRec105[2]))));
			let mut fTemp54: f32 = if (((self.fRec103[1] > fTemp53) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec104[0] = ((self.fRec104[1] * fTemp54) + (fTemp53 * (1.0 - fTemp54)));
			self.fRec103[0] = self.fRec104[0];
			self.fRec106[0] = (fTemp1 - (fSlow69 * ((fSlow70 * self.fRec106[2]) + (self.fConst109 * self.fRec106[1]))));
			self.fRec109[0] = (fTemp2 - (fSlow69 * ((self.fConst109 * self.fRec109[1]) + (fSlow70 * self.fRec109[2]))));
			let mut fTemp55: f32 = f32::abs((fSlow69 * ((self.fConst108 * self.fRec109[0]) + (self.fConst110 * self.fRec109[2]))));
			let mut fTemp56: f32 = if (((self.fRec107[1] > fTemp55) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec108[0] = ((self.fRec108[1] * fTemp56) + (fTemp55 * (1.0 - fTemp56)));
			self.fRec107[0] = self.fRec108[0];
			self.fRec110[0] = (fTemp1 - (fSlow71 * ((fSlow72 * self.fRec110[2]) + (self.fConst113 * self.fRec110[1]))));
			self.fRec113[0] = (fTemp2 - (fSlow71 * ((self.fConst113 * self.fRec113[1]) + (fSlow72 * self.fRec113[2]))));
			let mut fTemp57: f32 = f32::abs((fSlow71 * ((self.fConst112 * self.fRec113[0]) + (self.fConst114 * self.fRec113[2]))));
			let mut fTemp58: f32 = if (((self.fRec111[1] > fTemp57) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec112[0] = ((self.fRec112[1] * fTemp58) + (fTemp57 * (1.0 - fTemp58)));
			self.fRec111[0] = self.fRec112[0];
			self.fRec114[0] = (fTemp1 - (fSlow73 * ((fSlow74 * self.fRec114[2]) + (self.fConst117 * self.fRec114[1]))));
			self.fRec117[0] = (fTemp2 - (fSlow73 * ((self.fConst117 * self.fRec117[1]) + (fSlow74 * self.fRec117[2]))));
			let mut fTemp59: f32 = f32::abs((fSlow73 * ((self.fConst116 * self.fRec117[0]) + (self.fConst118 * self.fRec117[2]))));
			let mut fTemp60: f32 = if (((self.fRec115[1] > fTemp59) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec116[0] = ((self.fRec116[1] * fTemp60) + (fTemp59 * (1.0 - fTemp60)));
			self.fRec115[0] = self.fRec116[0];
			self.fRec118[0] = (fTemp1 - (fSlow75 * ((fSlow76 * self.fRec118[2]) + (self.fConst121 * self.fRec118[1]))));
			self.fRec121[0] = (fTemp2 - (fSlow75 * ((self.fConst121 * self.fRec121[1]) + (fSlow76 * self.fRec121[2]))));
			let mut fTemp61: f32 = f32::abs((fSlow75 * ((self.fConst120 * self.fRec121[0]) + (self.fConst122 * self.fRec121[2]))));
			let mut fTemp62: f32 = if (((self.fRec119[1] > fTemp61) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec120[0] = ((self.fRec120[1] * fTemp62) + (fTemp61 * (1.0 - fTemp62)));
			self.fRec119[0] = self.fRec120[0];
			self.fRec122[0] = (fTemp1 - (fSlow78 * ((fSlow79 * self.fRec122[2]) + (self.fConst125 * self.fRec122[1]))));
			self.fRec125[0] = (fTemp2 - (fSlow78 * ((self.fConst125 * self.fRec125[1]) + (fSlow79 * self.fRec125[2]))));
			let mut fTemp63: f32 = f32::abs((fSlow78 * ((self.fConst124 * self.fRec125[0]) + (self.fConst126 * self.fRec125[2]))));
			let mut fTemp64: f32 = if (((self.fRec123[1] > fTemp63) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec124[0] = ((self.fRec124[1] * fTemp64) + (fTemp63 * (1.0 - fTemp64)));
			self.fRec123[0] = self.fRec124[0];
			self.fRec126[0] = (fTemp1 - (fSlow80 * ((fSlow81 * self.fRec126[2]) + (self.fConst129 * self.fRec126[1]))));
			self.fRec129[0] = (fTemp2 - (fSlow80 * ((self.fConst129 * self.fRec129[1]) + (fSlow81 * self.fRec129[2]))));
			let mut fTemp65: f32 = f32::abs((fSlow80 * ((self.fConst128 * self.fRec129[0]) + (self.fConst130 * self.fRec129[2]))));
			let mut fTemp66: f32 = if (((self.fRec127[1] > fTemp65) as i32) as i32 == 1) { fSlow7 } else { fSlow6 };
			self.fRec128[0] = ((self.fRec128[1] * fTemp66) + (fTemp65 * (1.0 - fTemp66)));
			self.fRec127[0] = self.fRec128[0];
			let mut fTemp67: f32 = ((fSlow2 * ((self.fRec0[2] * (0.0 - (self.fConst2 * self.fRec3[0]))) + (self.fConst2 * (self.fRec0[0] * self.fRec3[0])))) + ((fSlow9 * ((self.fRec6[2] * (0.0 - (self.fConst8 * self.fRec7[0]))) + (self.fConst8 * (self.fRec6[0] * self.fRec7[0])))) + ((fSlow12 * ((self.fRec10[2] * (0.0 - (self.fConst12 * self.fRec11[0]))) + (self.fConst12 * (self.fRec10[0] * self.fRec11[0])))) + ((fSlow14 * ((self.fRec14[2] * (0.0 - (self.fConst16 * self.fRec15[0]))) + (self.fConst16 * (self.fRec14[0] * self.fRec15[0])))) + ((fSlow17 * ((self.fRec18[2] * (0.0 - (self.fConst20 * self.fRec19[0]))) + (self.fConst20 * (self.fRec18[0] * self.fRec19[0])))) + ((fSlow20 * ((self.fRec22[2] * (0.0 - (self.fConst24 * self.fRec23[0]))) + (self.fConst24 * (self.fRec22[0] * self.fRec23[0])))) + ((fSlow23 * ((self.fRec26[2] * (0.0 - (self.fConst28 * self.fRec27[0]))) + (self.fConst28 * (self.fRec26[0] * self.fRec27[0])))) + ((fSlow26 * ((self.fRec30[2] * (0.0 - (self.fConst32 * self.fRec31[0]))) + (self.fConst32 * (self.fRec30[0] * self.fRec31[0])))) + ((fSlow28 * ((self.fRec34[2] * (0.0 - (self.fConst36 * self.fRec35[0]))) + (self.fConst36 * (self.fRec34[0] * self.fRec35[0])))) + ((fSlow30 * ((self.fRec38[2] * (0.0 - (self.fConst40 * self.fRec39[0]))) + (self.fConst40 * (self.fRec38[0] * self.fRec39[0])))) + ((fSlow33 * ((self.fRec42[2] * (0.0 - (self.fConst44 * self.fRec43[0]))) + (self.fConst44 * (self.fRec42[0] * self.fRec43[0])))) + ((fSlow36 * ((self.fRec46[2] * (0.0 - (self.fConst48 * self.fRec47[0]))) + (self.fConst48 * (self.fRec46[0] * self.fRec47[0])))) + ((fSlow39 * ((self.fRec50[2] * (0.0 - (self.fConst52 * self.fRec51[0]))) + (self.fConst52 * (self.fRec50[0] * self.fRec51[0])))) + ((fSlow41 * ((self.fRec54[2] * (0.0 - (self.fConst56 * self.fRec55[0]))) + (self.fConst56 * (self.fRec54[0] * self.fRec55[0])))) + ((fSlow43 * ((self.fRec58[2] * (0.0 - (self.fConst60 * self.fRec59[0]))) + (self.fConst60 * (self.fRec58[0] * self.fRec59[0])))) + ((fSlow45 * ((self.fRec62[2] * (0.0 - (self.fConst64 * self.fRec63[0]))) + (self.fConst64 * (self.fRec62[0] * self.fRec63[0])))) + ((fSlow47 * ((self.fRec66[2] * (0.0 - (self.fConst68 * self.fRec67[0]))) + (self.fConst68 * (self.fRec66[0] * self.fRec67[0])))) + ((fSlow50 * ((self.fRec70[2] * (0.0 - (self.fConst72 * self.fRec71[0]))) + (self.fConst72 * (self.fRec70[0] * self.fRec71[0])))) + ((fSlow52 * ((self.fRec74[2] * (0.0 - (self.fConst76 * self.fRec75[0]))) + (self.fConst76 * (self.fRec74[0] * self.fRec75[0])))) + ((fSlow54 * ((self.fRec78[2] * (0.0 - (self.fConst80 * self.fRec79[0]))) + (self.fConst80 * (self.fRec78[0] * self.fRec79[0])))) + ((fSlow56 * ((self.fRec82[2] * (0.0 - (self.fConst84 * self.fRec83[0]))) + (self.fConst84 * (self.fRec82[0] * self.fRec83[0])))) + ((fSlow58 * ((self.fRec86[2] * (0.0 - (self.fConst88 * self.fRec87[0]))) + (self.fConst88 * (self.fRec86[0] * self.fRec87[0])))) + ((fSlow60 * ((self.fRec90[2] * (0.0 - (self.fConst92 * self.fRec91[0]))) + (self.fConst92 * (self.fRec90[0] * self.fRec91[0])))) + ((fSlow63 * ((self.fRec94[2] * (0.0 - (self.fConst96 * self.fRec95[0]))) + (self.fConst96 * (self.fRec94[0] * self.fRec95[0])))) + ((fSlow65 * ((self.fRec98[2] * (0.0 - (self.fConst100 * self.fRec99[0]))) + (self.fConst100 * (self.fRec98[0] * self.fRec99[0])))) + ((fSlow67 * ((self.fRec102[2] * (0.0 - (self.fConst104 * self.fRec103[0]))) + (self.fConst104 * (self.fRec102[0] * self.fRec103[0])))) + ((fSlow69 * ((self.fRec106[2] * (0.0 - (self.fConst108 * self.fRec107[0]))) + (self.fConst108 * (self.fRec106[0] * self.fRec107[0])))) + ((fSlow71 * ((self.fRec110[2] * (0.0 - (self.fConst112 * self.fRec111[0]))) + (self.fConst112 * (self.fRec110[0] * self.fRec111[0])))) + ((fSlow73 * ((self.fRec114[2] * (0.0 - (self.fConst116 * self.fRec115[0]))) + (self.fConst116 * (self.fRec114[0] * self.fRec115[0])))) + (((fSlow75 * ((self.fRec118[2] * (0.0 - (self.fConst120 * self.fRec119[0]))) + (self.fConst120 * (self.fRec118[0] * self.fRec119[0])))) + (fSlow78 * ((self.fRec122[2] * (0.0 - (self.fConst124 * self.fRec123[0]))) + (self.fConst124 * (self.fRec122[0] * self.fRec123[0]))))) + (fSlow80 * ((self.fRec126[2] * (0.0 - (self.fConst128 * self.fRec127[0]))) + (self.fConst128 * (self.fRec126[0] * self.fRec127[0]))))))))))))))))))))))))))))))))));
			outputs[0][i as usize] = (fTemp67 as f32);
			outputs[1][i as usize] = (fTemp67 as f32);
			self.fRec1[1] = self.fRec1[0];
			self.fVec0[1] = self.fVec0[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec30[2] = self.fRec30[1];
			self.fRec30[1] = self.fRec30[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec31[1] = self.fRec31[0];
			self.fRec34[2] = self.fRec34[1];
			self.fRec34[1] = self.fRec34[0];
			self.fRec37[2] = self.fRec37[1];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[1] = self.fRec36[0];
			self.fRec35[1] = self.fRec35[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec40[1] = self.fRec40[0];
			self.fRec39[1] = self.fRec39[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec44[1] = self.fRec44[0];
			self.fRec43[1] = self.fRec43[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.fRec49[2] = self.fRec49[1];
			self.fRec49[1] = self.fRec49[0];
			self.fRec48[1] = self.fRec48[0];
			self.fRec47[1] = self.fRec47[0];
			self.fRec50[2] = self.fRec50[1];
			self.fRec50[1] = self.fRec50[0];
			self.fRec53[2] = self.fRec53[1];
			self.fRec53[1] = self.fRec53[0];
			self.fRec52[1] = self.fRec52[0];
			self.fRec51[1] = self.fRec51[0];
			self.fRec54[2] = self.fRec54[1];
			self.fRec54[1] = self.fRec54[0];
			self.fRec57[2] = self.fRec57[1];
			self.fRec57[1] = self.fRec57[0];
			self.fRec56[1] = self.fRec56[0];
			self.fRec55[1] = self.fRec55[0];
			self.fRec58[2] = self.fRec58[1];
			self.fRec58[1] = self.fRec58[0];
			self.fRec61[2] = self.fRec61[1];
			self.fRec61[1] = self.fRec61[0];
			self.fRec60[1] = self.fRec60[0];
			self.fRec59[1] = self.fRec59[0];
			self.fRec62[2] = self.fRec62[1];
			self.fRec62[1] = self.fRec62[0];
			self.fRec65[2] = self.fRec65[1];
			self.fRec65[1] = self.fRec65[0];
			self.fRec64[1] = self.fRec64[0];
			self.fRec63[1] = self.fRec63[0];
			self.fRec66[2] = self.fRec66[1];
			self.fRec66[1] = self.fRec66[0];
			self.fRec69[2] = self.fRec69[1];
			self.fRec69[1] = self.fRec69[0];
			self.fRec68[1] = self.fRec68[0];
			self.fRec67[1] = self.fRec67[0];
			self.fRec70[2] = self.fRec70[1];
			self.fRec70[1] = self.fRec70[0];
			self.fRec73[2] = self.fRec73[1];
			self.fRec73[1] = self.fRec73[0];
			self.fRec72[1] = self.fRec72[0];
			self.fRec71[1] = self.fRec71[0];
			self.fRec74[2] = self.fRec74[1];
			self.fRec74[1] = self.fRec74[0];
			self.fRec77[2] = self.fRec77[1];
			self.fRec77[1] = self.fRec77[0];
			self.fRec76[1] = self.fRec76[0];
			self.fRec75[1] = self.fRec75[0];
			self.fRec78[2] = self.fRec78[1];
			self.fRec78[1] = self.fRec78[0];
			self.fRec81[2] = self.fRec81[1];
			self.fRec81[1] = self.fRec81[0];
			self.fRec80[1] = self.fRec80[0];
			self.fRec79[1] = self.fRec79[0];
			self.fRec82[2] = self.fRec82[1];
			self.fRec82[1] = self.fRec82[0];
			self.fRec85[2] = self.fRec85[1];
			self.fRec85[1] = self.fRec85[0];
			self.fRec84[1] = self.fRec84[0];
			self.fRec83[1] = self.fRec83[0];
			self.fRec86[2] = self.fRec86[1];
			self.fRec86[1] = self.fRec86[0];
			self.fRec89[2] = self.fRec89[1];
			self.fRec89[1] = self.fRec89[0];
			self.fRec88[1] = self.fRec88[0];
			self.fRec87[1] = self.fRec87[0];
			self.fRec90[2] = self.fRec90[1];
			self.fRec90[1] = self.fRec90[0];
			self.fRec93[2] = self.fRec93[1];
			self.fRec93[1] = self.fRec93[0];
			self.fRec92[1] = self.fRec92[0];
			self.fRec91[1] = self.fRec91[0];
			self.fRec94[2] = self.fRec94[1];
			self.fRec94[1] = self.fRec94[0];
			self.fRec97[2] = self.fRec97[1];
			self.fRec97[1] = self.fRec97[0];
			self.fRec96[1] = self.fRec96[0];
			self.fRec95[1] = self.fRec95[0];
			self.fRec98[2] = self.fRec98[1];
			self.fRec98[1] = self.fRec98[0];
			self.fRec101[2] = self.fRec101[1];
			self.fRec101[1] = self.fRec101[0];
			self.fRec100[1] = self.fRec100[0];
			self.fRec99[1] = self.fRec99[0];
			self.fRec102[2] = self.fRec102[1];
			self.fRec102[1] = self.fRec102[0];
			self.fRec105[2] = self.fRec105[1];
			self.fRec105[1] = self.fRec105[0];
			self.fRec104[1] = self.fRec104[0];
			self.fRec103[1] = self.fRec103[0];
			self.fRec106[2] = self.fRec106[1];
			self.fRec106[1] = self.fRec106[0];
			self.fRec109[2] = self.fRec109[1];
			self.fRec109[1] = self.fRec109[0];
			self.fRec108[1] = self.fRec108[0];
			self.fRec107[1] = self.fRec107[0];
			self.fRec110[2] = self.fRec110[1];
			self.fRec110[1] = self.fRec110[0];
			self.fRec113[2] = self.fRec113[1];
			self.fRec113[1] = self.fRec113[0];
			self.fRec112[1] = self.fRec112[0];
			self.fRec111[1] = self.fRec111[0];
			self.fRec114[2] = self.fRec114[1];
			self.fRec114[1] = self.fRec114[0];
			self.fRec117[2] = self.fRec117[1];
			self.fRec117[1] = self.fRec117[0];
			self.fRec116[1] = self.fRec116[0];
			self.fRec115[1] = self.fRec115[0];
			self.fRec118[2] = self.fRec118[1];
			self.fRec118[1] = self.fRec118[0];
			self.fRec121[2] = self.fRec121[1];
			self.fRec121[1] = self.fRec121[0];
			self.fRec120[1] = self.fRec120[0];
			self.fRec119[1] = self.fRec119[0];
			self.fRec122[2] = self.fRec122[1];
			self.fRec122[1] = self.fRec122[0];
			self.fRec125[2] = self.fRec125[1];
			self.fRec125[1] = self.fRec125[0];
			self.fRec124[1] = self.fRec124[0];
			self.fRec123[1] = self.fRec123[0];
			self.fRec126[2] = self.fRec126[1];
			self.fRec126[1] = self.fRec126[0];
			self.fRec129[2] = self.fRec129[1];
			self.fRec129[1] = self.fRec129[0];
			self.fRec128[1] = self.fRec128[0];
			self.fRec127[1] = self.fRec127[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

