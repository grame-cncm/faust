


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider0: f32,
	fHslider1: f32,
	fHslider2: f32,
	fConst2: f32,
	fVec0: [f32;2],
	fRec1: [f32;2],
	fVec1: [f32;2],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fConst2: 0.0,
			fVec0: [0.0;2],
			fRec1: [0.0;2],
			fVec1: [0.0;2],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("description", "Demonstrate the Spectral Tilt effect on test signals");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "spectralTilt");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 100.0;
		self.fHslider1 = 5000.0;
		self.fHslider2 = -0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (3.14159274 / self.fConst0);
		self.fConst2 = (1.0 / f32::tan((0.5 / self.fConst0)));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("spectralTilt");
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.addHorizontalSlider("Slope of Spectral Tilt across Band", &mut self.fHslider2, -0.5, -1.0, 1.0, 0.001);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band Start Frequency", &mut self.fHslider0, 100.0, 20.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider1, "3", "");
		ui_interface.declare(&mut self.fHslider1, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band Width", &mut self.fHslider1, 5000.0, 100.0, 10000.0, 1.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = f32::powf(((fSlow0 + (self.fHslider1 as f32)) / fSlow0), 1.0);
		let mut fSlow2: f32 = f32::tan((self.fConst1 * (fSlow0 * fSlow1)));
		let mut fSlow3: f32 = (self.fHslider2 as f32);
		let mut fSlow4: f32 = f32::tan((self.fConst1 * (fSlow0 * f32::powf(fSlow1, (1.0 - fSlow3)))));
		let mut fSlow5: f32 = (fSlow2 / fSlow4);
		let mut fSlow6: f32 = f32::tan((self.fConst1 * fSlow0));
		let mut fSlow7: f32 = (6.28318548 * ((fSlow0 * fSlow2) / fSlow6));
		let mut fSlow8: f32 = (self.fConst2 + fSlow7);
		let mut fSlow9: f32 = (0.0 - ((fSlow7 - self.fConst2) / fSlow8));
		let mut fSlow10: f32 = (1.0 / fSlow8);
		let mut fSlow11: f32 = (6.28318548 * ((fSlow0 * fSlow4) / fSlow6));
		let mut fSlow12: f32 = (fSlow11 - self.fConst2);
		let mut fSlow13: f32 = f32::tan((self.fConst1 * (fSlow0 * f32::powf(fSlow1, (0.0 - fSlow3)))));
		let mut fSlow14: f32 = (fSlow6 / fSlow13);
		let mut fSlow15: f32 = (6.28318548 * fSlow0);
		let mut fSlow16: f32 = (self.fConst2 + fSlow15);
		let mut fSlow17: f32 = (0.0 - ((fSlow15 - self.fConst2) / fSlow16));
		let mut fSlow18: f32 = (1.0 / fSlow16);
		let mut fSlow19: f32 = (6.28318548 * ((fSlow0 * fSlow13) / fSlow6));
		let mut fSlow20: f32 = (self.fConst2 + fSlow19);
		let mut fSlow21: f32 = (fSlow19 - self.fConst2);
		let mut fSlow22: f32 = ((fSlow6 * (self.fConst2 + fSlow11)) / fSlow13);
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fVec0[0] = fTemp0;
			self.fRec1[0] = ((fSlow17 * self.fRec1[1]) + (fSlow18 * ((fSlow20 * fTemp0) + (fSlow21 * self.fVec0[1]))));
			self.fVec1[0] = (fSlow14 * self.fRec1[0]);
			self.fRec0[0] = ((fSlow9 * self.fRec0[1]) + (fSlow10 * ((fSlow12 * self.fVec1[1]) + (fSlow22 * self.fRec1[0]))));
			outputs[0][i as usize] = ((fSlow5 * self.fRec0[0]) as f32);
			self.fVec0[1] = self.fVec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

