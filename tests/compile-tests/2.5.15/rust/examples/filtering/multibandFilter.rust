
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fEntry0: f32,
	fVslider0: f32,
	fEntry1: f32,
	fEntry2: f32,
	fVslider1: f32,
	fEntry3: f32,
	fEntry4: f32,
	fVslider2: f32,
	fEntry5: f32,
	fEntry6: f32,
	fVslider3: f32,
	fEntry7: f32,
	fEntry8: f32,
	fVslider4: f32,
	fEntry9: f32,
	fEntry10: f32,
	fVslider5: f32,
	fEntry11: f32,
	fEntry12: f32,
	fVslider6: f32,
	fEntry13: f32,
	fEntry14: f32,
	fVslider7: f32,
	fEntry15: f32,
	fEntry16: f32,
	fVslider8: f32,
	fEntry17: f32,
	fEntry18: f32,
	fVslider9: f32,
	fEntry19: f32,
	fRec9: [f32;3],
	fRec8: [f32;3],
	fRec7: [f32;3],
	fRec6: [f32;3],
	fRec5: [f32;3],
	fRec4: [f32;3],
	fRec3: [f32;3],
	fRec2: [f32;3],
	fRec1: [f32;3],
	fRec0: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fEntry0: 0.0,
			fVslider0: 0.0,
			fEntry1: 0.0,
			fEntry2: 0.0,
			fVslider1: 0.0,
			fEntry3: 0.0,
			fEntry4: 0.0,
			fVslider2: 0.0,
			fEntry5: 0.0,
			fEntry6: 0.0,
			fVslider3: 0.0,
			fEntry7: 0.0,
			fEntry8: 0.0,
			fVslider4: 0.0,
			fEntry9: 0.0,
			fEntry10: 0.0,
			fVslider5: 0.0,
			fEntry11: 0.0,
			fEntry12: 0.0,
			fVslider6: 0.0,
			fEntry13: 0.0,
			fEntry14: 0.0,
			fVslider7: 0.0,
			fEntry15: 0.0,
			fEntry16: 0.0,
			fVslider8: 0.0,
			fEntry17: 0.0,
			fEntry18: 0.0,
			fVslider9: 0.0,
			fEntry19: 0.0,
			fRec9: [0.0;3],
			fRec8: [0.0;3],
			fRec7: [0.0;3],
			fRec6: [0.0;3],
			fRec5: [0.0;3],
			fRec4: [0.0;3],
			fRec3: [0.0;3],
			fRec2: [0.0;3],
			fRec1: [0.0;3],
			fRec0: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("bandfilter.dsp/author", "Grame");
		m.declare("bandfilter.dsp/copyright", "(c)GRAME 2006");
		m.declare("bandfilter.dsp/license", "BSD");
		m.declare("bandfilter.dsp/name", "bandFilter");
		m.declare("bandfilter.dsp/version", "1.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "multibandFilter");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fEntry0 = 10000.0;
		self.fVslider0 = 0.0;
		self.fEntry1 = 50.0;
		self.fEntry2 = 9000.0;
		self.fVslider1 = 0.0;
		self.fEntry3 = 50.0;
		self.fEntry4 = 8000.0;
		self.fVslider2 = 0.0;
		self.fEntry5 = 50.0;
		self.fEntry6 = 7000.0;
		self.fVslider3 = 0.0;
		self.fEntry7 = 50.0;
		self.fEntry8 = 6000.0;
		self.fVslider4 = 0.0;
		self.fEntry9 = 50.0;
		self.fEntry10 = 5000.0;
		self.fVslider5 = 0.0;
		self.fEntry11 = 50.0;
		self.fEntry12 = 4000.0;
		self.fVslider6 = 0.0;
		self.fEntry13 = 50.0;
		self.fEntry14 = 3000.0;
		self.fVslider7 = 0.0;
		self.fEntry15 = 50.0;
		self.fEntry16 = 2000.0;
		self.fVslider8 = 0.0;
		self.fEntry17 = 50.0;
		self.fEntry18 = 1000.0;
		self.fVslider9 = 0.0;
		self.fEntry19 = 50.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec9[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 3) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec8[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 3) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec7[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec6[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec5[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec4[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 3) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec3[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec2[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec1[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec0[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (3.14159274 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openHorizontalBox("Multi Band Filter");
		ui_interface.openVerticalBox("peak 0");
		ui_interface.declare(&mut self.fEntry19, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry19, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry18, "style", "knob");
		ui_interface.declare(&mut self.fEntry18, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry18, 1000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider9, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider9, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 1");
		ui_interface.declare(&mut self.fEntry17, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry17, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry16, "style", "knob");
		ui_interface.declare(&mut self.fEntry16, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry16, 2000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider8, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider8, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 2");
		ui_interface.declare(&mut self.fEntry15, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry15, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry14, "style", "knob");
		ui_interface.declare(&mut self.fEntry14, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry14, 3000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider7, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider7, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 3");
		ui_interface.declare(&mut self.fEntry13, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry13, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry12, "style", "knob");
		ui_interface.declare(&mut self.fEntry12, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry12, 4000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider6, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider6, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 4");
		ui_interface.declare(&mut self.fEntry11, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry11, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry10, "style", "knob");
		ui_interface.declare(&mut self.fEntry10, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry10, 5000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider5, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider5, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 5");
		ui_interface.declare(&mut self.fEntry9, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry9, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry8, "style", "knob");
		ui_interface.declare(&mut self.fEntry8, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry8, 6000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider4, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider4, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 6");
		ui_interface.declare(&mut self.fEntry7, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry7, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry6, "style", "knob");
		ui_interface.declare(&mut self.fEntry6, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry6, 7000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider3, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider3, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 7");
		ui_interface.declare(&mut self.fEntry5, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry5, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry4, "style", "knob");
		ui_interface.declare(&mut self.fEntry4, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry4, 8000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider2, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider2, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 8");
		ui_interface.declare(&mut self.fEntry3, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry3, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry2, "style", "knob");
		ui_interface.declare(&mut self.fEntry2, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry2, 9000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider1, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider1, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("peak 9");
		ui_interface.declare(&mut self.fEntry1, "style", "knob");
		ui_interface.addNumEntry("Q factor", &mut self.fEntry1, 50.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry0, "style", "knob");
		ui_interface.declare(&mut self.fEntry0, "unit", "Hz");
		ui_interface.addNumEntry("freq", &mut self.fEntry0, 10000.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fVslider0, "unit", "dB");
		ui_interface.addVerticalSlider("gain", &mut self.fVslider0, 0.0, -50.0, 50.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = f32::tan((self.fConst0 * (self.fEntry0 as f32)));
		let mut fSlow1: f32 = (self.fEntry1 as f32);
		let mut fSlow2: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider0 as f32)))) / fSlow1);
		let mut fSlow3: f32 = (1.0 / ((fSlow0 * (fSlow0 + fSlow2)) + 1.0));
		let mut fSlow4: f32 = (2.0 * (mydsp_faustpower2_f(fSlow0) + -1.0));
		let mut fSlow5: f32 = f32::tan((self.fConst0 * (self.fEntry2 as f32)));
		let mut fSlow6: f32 = (self.fEntry3 as f32);
		let mut fSlow7: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider1 as f32)))) / fSlow6);
		let mut fSlow8: f32 = (1.0 / ((fSlow5 * (fSlow5 + fSlow7)) + 1.0));
		let mut fSlow9: f32 = (2.0 * (mydsp_faustpower2_f(fSlow5) + -1.0));
		let mut fSlow10: f32 = f32::tan((self.fConst0 * (self.fEntry4 as f32)));
		let mut fSlow11: f32 = (self.fEntry5 as f32);
		let mut fSlow12: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider2 as f32)))) / fSlow11);
		let mut fSlow13: f32 = (1.0 / ((fSlow10 * (fSlow10 + fSlow12)) + 1.0));
		let mut fSlow14: f32 = (2.0 * (mydsp_faustpower2_f(fSlow10) + -1.0));
		let mut fSlow15: f32 = f32::tan((self.fConst0 * (self.fEntry6 as f32)));
		let mut fSlow16: f32 = (self.fEntry7 as f32);
		let mut fSlow17: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider3 as f32)))) / fSlow16);
		let mut fSlow18: f32 = (1.0 / ((fSlow15 * (fSlow15 + fSlow17)) + 1.0));
		let mut fSlow19: f32 = (2.0 * (mydsp_faustpower2_f(fSlow15) + -1.0));
		let mut fSlow20: f32 = f32::tan((self.fConst0 * (self.fEntry8 as f32)));
		let mut fSlow21: f32 = (self.fEntry9 as f32);
		let mut fSlow22: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider4 as f32)))) / fSlow21);
		let mut fSlow23: f32 = (1.0 / ((fSlow20 * (fSlow20 + fSlow22)) + 1.0));
		let mut fSlow24: f32 = (2.0 * (mydsp_faustpower2_f(fSlow20) + -1.0));
		let mut fSlow25: f32 = f32::tan((self.fConst0 * (self.fEntry10 as f32)));
		let mut fSlow26: f32 = (self.fEntry11 as f32);
		let mut fSlow27: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider5 as f32)))) / fSlow26);
		let mut fSlow28: f32 = (1.0 / ((fSlow25 * (fSlow25 + fSlow27)) + 1.0));
		let mut fSlow29: f32 = (2.0 * (mydsp_faustpower2_f(fSlow25) + -1.0));
		let mut fSlow30: f32 = f32::tan((self.fConst0 * (self.fEntry12 as f32)));
		let mut fSlow31: f32 = (self.fEntry13 as f32);
		let mut fSlow32: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider6 as f32)))) / fSlow31);
		let mut fSlow33: f32 = (1.0 / ((fSlow30 * (fSlow30 + fSlow32)) + 1.0));
		let mut fSlow34: f32 = (2.0 * (mydsp_faustpower2_f(fSlow30) + -1.0));
		let mut fSlow35: f32 = f32::tan((self.fConst0 * (self.fEntry14 as f32)));
		let mut fSlow36: f32 = (self.fEntry15 as f32);
		let mut fSlow37: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider7 as f32)))) / fSlow36);
		let mut fSlow38: f32 = (1.0 / ((fSlow35 * (fSlow35 + fSlow37)) + 1.0));
		let mut fSlow39: f32 = (2.0 * (mydsp_faustpower2_f(fSlow35) + -1.0));
		let mut fSlow40: f32 = f32::tan((self.fConst0 * (self.fEntry16 as f32)));
		let mut fSlow41: f32 = (self.fEntry17 as f32);
		let mut fSlow42: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider8 as f32)))) / fSlow41);
		let mut fSlow43: f32 = (1.0 / ((fSlow40 * (fSlow40 + fSlow42)) + 1.0));
		let mut fSlow44: f32 = (2.0 * (mydsp_faustpower2_f(fSlow40) + -1.0));
		let mut fSlow45: f32 = f32::tan((self.fConst0 * (self.fEntry18 as f32)));
		let mut fSlow46: f32 = (self.fEntry19 as f32);
		let mut fSlow47: f32 = (f32::powf(10.0, (0.0500000007 * (0.0 - (self.fVslider9 as f32)))) / fSlow46);
		let mut fSlow48: f32 = (1.0 / ((fSlow45 * (fSlow45 + fSlow47)) + 1.0));
		let mut fSlow49: f32 = (2.0 * (mydsp_faustpower2_f(fSlow45) + -1.0));
		let mut fSlow50: f32 = ((fSlow45 * (fSlow45 - fSlow47)) + 1.0);
		let mut fSlow51: f32 = (1.0 / fSlow46);
		let mut fSlow52: f32 = ((fSlow45 * (fSlow45 + fSlow51)) + 1.0);
		let mut fSlow53: f32 = (1.0 - (fSlow45 * (fSlow51 - fSlow45)));
		let mut fSlow54: f32 = ((fSlow40 * (fSlow40 - fSlow42)) + 1.0);
		let mut fSlow55: f32 = (1.0 / fSlow41);
		let mut fSlow56: f32 = ((fSlow40 * (fSlow40 + fSlow55)) + 1.0);
		let mut fSlow57: f32 = (1.0 - (fSlow40 * (fSlow55 - fSlow40)));
		let mut fSlow58: f32 = ((fSlow35 * (fSlow35 - fSlow37)) + 1.0);
		let mut fSlow59: f32 = (1.0 / fSlow36);
		let mut fSlow60: f32 = ((fSlow35 * (fSlow35 + fSlow59)) + 1.0);
		let mut fSlow61: f32 = (1.0 - (fSlow35 * (fSlow59 - fSlow35)));
		let mut fSlow62: f32 = ((fSlow30 * (fSlow30 - fSlow32)) + 1.0);
		let mut fSlow63: f32 = (1.0 / fSlow31);
		let mut fSlow64: f32 = ((fSlow30 * (fSlow30 + fSlow63)) + 1.0);
		let mut fSlow65: f32 = (1.0 - (fSlow30 * (fSlow63 - fSlow30)));
		let mut fSlow66: f32 = ((fSlow25 * (fSlow25 - fSlow27)) + 1.0);
		let mut fSlow67: f32 = (1.0 / fSlow26);
		let mut fSlow68: f32 = ((fSlow25 * (fSlow25 + fSlow67)) + 1.0);
		let mut fSlow69: f32 = (1.0 - (fSlow25 * (fSlow67 - fSlow25)));
		let mut fSlow70: f32 = ((fSlow20 * (fSlow20 - fSlow22)) + 1.0);
		let mut fSlow71: f32 = (1.0 / fSlow21);
		let mut fSlow72: f32 = ((fSlow20 * (fSlow20 + fSlow71)) + 1.0);
		let mut fSlow73: f32 = (1.0 - (fSlow20 * (fSlow71 - fSlow20)));
		let mut fSlow74: f32 = ((fSlow15 * (fSlow15 - fSlow17)) + 1.0);
		let mut fSlow75: f32 = (1.0 / fSlow16);
		let mut fSlow76: f32 = ((fSlow15 * (fSlow15 + fSlow75)) + 1.0);
		let mut fSlow77: f32 = (1.0 - (fSlow15 * (fSlow75 - fSlow15)));
		let mut fSlow78: f32 = ((fSlow10 * (fSlow10 - fSlow12)) + 1.0);
		let mut fSlow79: f32 = (1.0 / fSlow11);
		let mut fSlow80: f32 = ((fSlow10 * (fSlow10 + fSlow79)) + 1.0);
		let mut fSlow81: f32 = (1.0 - (fSlow10 * (fSlow79 - fSlow10)));
		let mut fSlow82: f32 = ((fSlow5 * (fSlow5 - fSlow7)) + 1.0);
		let mut fSlow83: f32 = (1.0 / fSlow6);
		let mut fSlow84: f32 = ((fSlow5 * (fSlow5 + fSlow83)) + 1.0);
		let mut fSlow85: f32 = (1.0 - (fSlow5 * (fSlow83 - fSlow5)));
		let mut fSlow86: f32 = ((fSlow0 * (fSlow0 - fSlow2)) + 1.0);
		let mut fSlow87: f32 = (1.0 / fSlow1);
		let mut fSlow88: f32 = ((fSlow0 * (fSlow0 + fSlow87)) + 1.0);
		let mut fSlow89: f32 = (1.0 - (fSlow0 * (fSlow87 - fSlow0)));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (fSlow49 * self.fRec9[1]);
			self.fRec9[0] = ((inputs[0][i as usize] as f32) - (fSlow48 * ((fSlow50 * self.fRec9[2]) + fTemp0)));
			let mut fTemp1: f32 = (fSlow44 * self.fRec8[1]);
			self.fRec8[0] = ((fSlow48 * ((fTemp0 + (fSlow52 * self.fRec9[0])) + (fSlow53 * self.fRec9[2]))) - (fSlow43 * ((fSlow54 * self.fRec8[2]) + fTemp1)));
			let mut fTemp2: f32 = (fSlow39 * self.fRec7[1]);
			self.fRec7[0] = ((fSlow43 * ((fTemp1 + (fSlow56 * self.fRec8[0])) + (fSlow57 * self.fRec8[2]))) - (fSlow38 * ((fSlow58 * self.fRec7[2]) + fTemp2)));
			let mut fTemp3: f32 = (fSlow34 * self.fRec6[1]);
			self.fRec6[0] = ((fSlow38 * ((fTemp2 + (fSlow60 * self.fRec7[0])) + (fSlow61 * self.fRec7[2]))) - (fSlow33 * ((fSlow62 * self.fRec6[2]) + fTemp3)));
			let mut fTemp4: f32 = (fSlow29 * self.fRec5[1]);
			self.fRec5[0] = ((fSlow33 * ((fTemp3 + (fSlow64 * self.fRec6[0])) + (fSlow65 * self.fRec6[2]))) - (fSlow28 * ((fSlow66 * self.fRec5[2]) + fTemp4)));
			let mut fTemp5: f32 = (fSlow24 * self.fRec4[1]);
			self.fRec4[0] = ((fSlow28 * ((fTemp4 + (fSlow68 * self.fRec5[0])) + (fSlow69 * self.fRec5[2]))) - (fSlow23 * ((fSlow70 * self.fRec4[2]) + fTemp5)));
			let mut fTemp6: f32 = (fSlow19 * self.fRec3[1]);
			self.fRec3[0] = ((fSlow23 * ((fTemp5 + (fSlow72 * self.fRec4[0])) + (fSlow73 * self.fRec4[2]))) - (fSlow18 * ((fSlow74 * self.fRec3[2]) + fTemp6)));
			let mut fTemp7: f32 = (fSlow14 * self.fRec2[1]);
			self.fRec2[0] = ((fSlow18 * ((fTemp6 + (fSlow76 * self.fRec3[0])) + (fSlow77 * self.fRec3[2]))) - (fSlow13 * ((fSlow78 * self.fRec2[2]) + fTemp7)));
			let mut fTemp8: f32 = (fSlow9 * self.fRec1[1]);
			self.fRec1[0] = ((fSlow13 * ((fTemp7 + (fSlow80 * self.fRec2[0])) + (fSlow81 * self.fRec2[2]))) - (fSlow8 * ((fSlow82 * self.fRec1[2]) + fTemp8)));
			let mut fTemp9: f32 = (fSlow4 * self.fRec0[1]);
			self.fRec0[0] = ((fSlow8 * ((fTemp8 + (fSlow84 * self.fRec1[0])) + (fSlow85 * self.fRec1[2]))) - (fSlow3 * ((fSlow86 * self.fRec0[2]) + fTemp9)));
			outputs[0][i as usize] = ((fSlow3 * ((fTemp9 + (fSlow88 * self.fRec0[0])) + (fSlow89 * self.fRec0[2]))) as f32);
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

