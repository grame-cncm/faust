
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fHslider0: f32,
	fRec0: [f32;2],
	fCheckbox1: f32,
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider2: f32,
	fRec6: [f32;2],
	fRec5: [f32;2],
	fRec4: [f32;2],
	fRec3: [f32;2],
	fRec2: [f32;2],
	fRec1: [f32;2],
	fCheckbox2: f32,
	fConst2: f32,
	fRec9: [f32;2],
	fRec8: [f32;3],
	fRec7: [f32;3],
	fRec12: [f32;2],
	fRec10: [f32;2],
	fRec15: [f32;2],
	fRec13: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fHslider0: 0.0,
			fRec0: [0.0;2],
			fCheckbox1: 0.0,
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider2: 0.0,
			fRec6: [0.0;2],
			fRec5: [0.0;2],
			fRec4: [0.0;2],
			fRec3: [0.0;2],
			fRec2: [0.0;2],
			fRec1: [0.0;2],
			fCheckbox2: 0.0,
			fConst2: 0.0,
			fRec9: [0.0;2],
			fRec8: [0.0;3],
			fRec7: [0.0;3],
			fRec12: [0.0;2],
			fRec10: [0.0;2],
			fRec15: [0.0;2],
			fRec13: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Exercise and compare three Moog VCF implementations");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "moogVCF");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m.declare("vaeffects.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 5.0;
		self.fCheckbox1 = 0.0;
		self.fHslider1 = 0.899999976;
		self.fHslider2 = 25.0;
		self.fCheckbox2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec6[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec5[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec4[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec3[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec2[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec1[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec9[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec12[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec10[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec15[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec13[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		self.fConst2 = (3.14159274 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's   vaeffects.lib for info and references");
		ui_interface.openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the Moog VCF   has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fCheckbox1, "1", "");
		ui_interface.declare(&mut self.fCheckbox1, "tooltip", "Select moog_vcf_2b (two-biquad)   implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface.addCheckButton("Use Biquads", &mut self.fCheckbox1);
		ui_interface.declare(&mut self.fCheckbox2, "2", "");
		ui_interface.declare(&mut self.fCheckbox2, "tooltip", "If using biquads, make   them normalized ladders (moog_vcf_2bn)");
		ui_interface.addCheckButton("Normalized Ladders", &mut self.fCheckbox2);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "The VCF resonates   at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).   The VCF response is flat below the corner frequency, and rolls off -24 dB per   octave above.");
		ui_interface.declare(&mut self.fHslider2, "unit", "PK");
		ui_interface.addHorizontalSlider("Corner Frequency", &mut self.fHslider2, 25.0, 1.0, 88.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "Amount of   resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface.addHorizontalSlider("Corner Resonance", &mut self.fHslider1, 0.90000000000000002, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "3", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "output level in decibels");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("VCF Output Level", &mut self.fHslider0, 5.0, -60.0, 20.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32))));
		let mut iSlow2: i32 = ((self.fCheckbox1 as f32) as i32);
		let mut fSlow3: f32 = (self.fHslider1 as f32);
		let mut fSlow4: f32 = (0.0 - (4.0 * f32::max(0.0, f32::min(mydsp_faustpower4_f(fSlow3), 0.999998987))));
		let mut fSlow5: f32 = (0.439999998 * f32::powf(2.0, (0.0833333358 * ((self.fHslider2 as f32) + -49.0))));
		let mut iSlow6: i32 = ((self.fCheckbox2 as f32) as i32);
		let mut fSlow7: f32 = f32::min(1.41419947, (1.41421354 * fSlow3));
		let mut fSlow8: f32 = (fSlow7 * (fSlow7 + 1.41421354));
		let mut fSlow9: f32 = (1.41421354 * fSlow7);
		let mut fSlow10: f32 = (fSlow9 + 2.0);
		let mut fSlow11: f32 = (fSlow7 * (fSlow7 + -1.41421354));
		let mut fSlow12: f32 = (2.0 - fSlow9);
		let mut fSlow13: f32 = (1.99997997 * fSlow3);
		let mut fSlow14: f32 = mydsp_faustpower2_f((1.41419947 * fSlow3));
		let mut fSlow15: f32 = (fSlow13 + fSlow14);
		let mut fSlow16: f32 = (fSlow13 + 2.0);
		let mut fSlow17: f32 = (2.0 - fSlow13);
		let mut i: i32 = 0;
		loop {
			self.fRec0[0] = (fSlow1 + (0.999000013 * self.fRec0[1]));
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 };
			self.fRec6[0] = (fSlow5 + (0.999000013 * self.fRec6[1]));
			let mut fTemp2: f32 = (self.fConst1 * self.fRec6[0]);
			let mut fTemp3: f32 = (1.0 - fTemp2);
			self.fRec5[0] = ((fSlow4 * self.fRec1[1]) + (fTemp1 + (fTemp3 * self.fRec5[1])));
			self.fRec4[0] = (self.fRec5[0] + (fTemp3 * self.fRec4[1]));
			self.fRec3[0] = (self.fRec4[0] + (fTemp3 * self.fRec3[1]));
			self.fRec2[0] = (self.fRec3[0] + (self.fRec2[1] * fTemp3));
			self.fRec1[0] = (self.fRec2[0] * f32::powf(fTemp2, 4.0));
			self.fRec9[0] = (fSlow5 + (0.999000013 * self.fRec9[1]));
			let mut fTemp4: f32 = f32::tan((self.fConst2 * f32::max(20.0, f32::min(10000.0, self.fRec9[0]))));
			let mut fTemp5: f32 = (1.0 / fTemp4);
			let mut fTemp6: f32 = (1.0 - (1.0 / mydsp_faustpower2_f(fTemp4)));
			let mut fTemp7: f32 = (fSlow8 + (((fSlow10 + fTemp5) / fTemp4) + 1.0));
			self.fRec8[0] = (fTemp1 - (((self.fRec8[2] * (fSlow8 + (((fTemp5 - fSlow10) / fTemp4) + 1.0))) + (2.0 * (self.fRec8[1] * (fSlow8 + fTemp6)))) / fTemp7));
			let mut fTemp8: f32 = (fSlow11 + (((fSlow12 + fTemp5) / fTemp4) + 1.0));
			self.fRec7[0] = (((self.fRec8[2] + (self.fRec8[0] + (2.0 * self.fRec8[1]))) / fTemp7) - (((self.fRec7[2] * (fSlow11 + (((fTemp5 - fSlow12) / fTemp4) + 1.0))) + (2.0 * ((fSlow11 + fTemp6) * self.fRec7[1]))) / fTemp8));
			let mut fTemp9: f32 = f32::tan((self.fConst2 * f32::max(self.fRec9[0], 20.0)));
			let mut fTemp10: f32 = (1.0 / fTemp9);
			let mut fTemp11: f32 = (fSlow15 + (((fSlow16 + fTemp10) / fTemp9) + 1.0));
			let mut fTemp12: f32 = ((fSlow15 + (1.0 - ((fSlow16 - fTemp10) / fTemp9))) / fTemp11);
			let mut fTemp13: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp12));
			let mut fTemp14: f32 = (1.0 - mydsp_faustpower2_f(fTemp13));
			let mut fTemp15: f32 = f32::sqrt(f32::max(0.0, fTemp14));
			let mut fTemp16: f32 = ((self.fRec10[1] * (0.0 - fTemp13)) + (fTemp1 * fTemp15));
			let mut fTemp17: f32 = (1.0 - (1.0 / mydsp_faustpower2_f(fTemp9)));
			let mut fTemp18: f32 = (fSlow15 + fTemp17);
			let mut fTemp19: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp18 / (fTemp11 * (fTemp12 + 1.0))))));
			let mut fTemp20: f32 = (1.0 - mydsp_faustpower2_f(fTemp19));
			let mut fTemp21: f32 = f32::sqrt(f32::max(0.0, fTemp20));
			self.fRec12[0] = ((self.fRec12[1] * (0.0 - fTemp19)) + (fTemp16 * fTemp21));
			self.fRec10[0] = ((fTemp16 * fTemp19) + (self.fRec12[1] * fTemp21));
			let mut fRec11: f32 = self.fRec12[0];
			let mut fTemp22: f32 = (1.0 - (fTemp18 / fTemp11));
			let mut fTemp23: f32 = f32::sqrt(fTemp14);
			let mut fTemp24: f32 = ((((fTemp1 * fTemp13) + (self.fRec10[1] * fTemp15)) + (2.0 * ((self.fRec10[0] * fTemp22) / fTemp23))) + ((fRec11 * ((1.0 - fTemp12) - (2.0 * (fTemp19 * fTemp22)))) / (fTemp23 * f32::sqrt(fTemp20))));
			let mut fTemp25: f32 = (fSlow14 + ((((fSlow17 + fTemp10) / fTemp9) + 1.0) - fSlow13));
			let mut fTemp26: f32 = ((fSlow14 + ((((fTemp10 - fSlow17) / fTemp9) + 1.0) - fSlow13)) / fTemp25);
			let mut fTemp27: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp26));
			let mut fTemp28: f32 = (1.0 - mydsp_faustpower2_f(fTemp27));
			let mut fTemp29: f32 = f32::sqrt(f32::max(0.0, fTemp28));
			let mut fTemp30: f32 = ((self.fRec13[1] * (0.0 - fTemp27)) + ((fTemp24 * fTemp29) / fTemp11));
			let mut fTemp31: f32 = (fSlow14 + (fTemp17 - fSlow13));
			let mut fTemp32: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp31 / (fTemp25 * (fTemp26 + 1.0))))));
			let mut fTemp33: f32 = (1.0 - mydsp_faustpower2_f(fTemp32));
			let mut fTemp34: f32 = f32::sqrt(f32::max(0.0, fTemp33));
			self.fRec15[0] = ((self.fRec15[1] * (0.0 - fTemp32)) + (fTemp30 * fTemp34));
			self.fRec13[0] = ((fTemp30 * fTemp32) + (self.fRec15[1] * fTemp34));
			let mut fRec14: f32 = self.fRec15[0];
			let mut fTemp35: f32 = (1.0 - (fTemp31 / fTemp25));
			let mut fTemp36: f32 = f32::sqrt(fTemp28);
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { (self.fRec0[0] * if (iSlow2 as i32 == 1) { if (iSlow6 as i32 == 1) { ((((((fTemp24 * fTemp27) / fTemp11) + (self.fRec13[1] * fTemp29)) + (2.0 * ((self.fRec13[0] * fTemp35) / fTemp36))) + ((fRec14 * ((1.0 - fTemp26) - (2.0 * (fTemp32 * fTemp35)))) / (fTemp36 * f32::sqrt(fTemp33)))) / fTemp25) } else { ((self.fRec7[2] + (self.fRec7[0] + (2.0 * self.fRec7[1]))) / fTemp8) } } else { self.fRec1[0] }) } as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec13[1] = self.fRec13[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

