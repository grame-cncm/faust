


pub struct mydspSIG0 {
	
	iRec1: [i32;2],
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		let mut l1: i32 = 0;
		loop {
			self.iRec1[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			self.iRec1[0] = (self.iRec1[1] + 1);
			output[i as usize] = f32::sin((9.58738019e-05 * ((self.iRec1[0] + -1) as f32)));
			self.iRec1[1] = self.iRec1[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		iRec1: [0;2],
	}
}
static ftbl0mydspSIG0: [f32;65537][0.0;65537],;


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec0: [f32;2],
	fCheckbox0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fHslider2: f32,
	fRec2: [f32;2],
	fCheckbox1: f32,
	iRec3: [i32;3],
	fCheckbox2: f32,
	fRec4: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec0: [0.0;2],
			fCheckbox0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fHslider2: 0.0,
			fRec2: [0.0;2],
			fCheckbox1: 0.0,
			iRec3: [0;3],
			fCheckbox2: 0.0,
			fRec4: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "tester");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		8
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(65537, &mut ftbl0mydspSIG0);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.0;
		self.fHslider1 = -96.0;
		self.fCheckbox0 = 0.0;
		self.fHslider2 = 1000.0;
		self.fCheckbox1 = 0.0;
		self.fCheckbox2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.iRec3[l3 as usize] = 0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (1.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("Audio Tester");
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "unit", "Hz");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider2, 1000.0, 10.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.declare(&mut self.fHslider1, "unit", "dB");
		ui_interface.addHorizontalSlider("volume", &mut self.fHslider1, -96.0, -96.0, 0.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "3", "");
		ui_interface.addHorizontalSlider("destination", &mut self.fHslider0, 0.0, 0.0, 8.0, 1.0);
		ui_interface.addCheckButton("pink noise", &mut self.fCheckbox2);
		ui_interface.addCheckButton("sine wave", &mut self.fCheckbox0);
		ui_interface.addCheckButton("white noise", &mut self.fCheckbox1);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut iSlow1: i32 = ((fSlow0 == 0.0) as i32);
		let mut fSlow2: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fHslider1 as f32))));
		let mut fSlow3: f32 = (self.fCheckbox0 as f32);
		let mut fSlow4: f32 = (self.fConst0 * (self.fHslider2 as f32));
		let mut fSlow5: f32 = (4.65661287e-10 * (self.fCheckbox1 as f32));
		let mut fSlow6: f32 = (10.0 * (self.fCheckbox2 as f32));
		let mut iSlow7: i32 = ((fSlow0 == 1.0) as i32);
		let mut iSlow8: i32 = ((fSlow0 == 2.0) as i32);
		let mut iSlow9: i32 = ((fSlow0 == 3.0) as i32);
		let mut iSlow10: i32 = ((fSlow0 == 4.0) as i32);
		let mut iSlow11: i32 = ((fSlow0 == 5.0) as i32);
		let mut iSlow12: i32 = ((fSlow0 == 6.0) as i32);
		let mut iSlow13: i32 = ((fSlow0 == 7.0) as i32);
		let mut i: i32 = 0;
		loop {
			self.fRec0[0] = (fSlow2 + (0.999000013 * self.fRec0[1]));
			self.fRec2[0] = (fSlow4 + (self.fRec2[1] - f32::floor((fSlow4 + self.fRec2[1]))));
			let mut fTemp0: f32 = (65536.0 * self.fRec2[0]);
			let mut iTemp1: i32 = (fTemp0 as i32);
			self.iRec3[0] = ((1103515245 * self.iRec3[1]) + 12345);
			self.fRec4[0] = (((6.90678287e-12 * (self.iRec3[2] as f32)) + ((1.80116081 * self.fRec4[1]) + (2.30852802e-11 * (self.iRec3[0] as f32)))) - ((0.802577376 * self.fRec4[2]) + (2.93626512e-11 * (self.iRec3[1] as f32))));
			let mut fTemp2: f32 = (self.fRec0[0] * (((fSlow3 * (ftbl0mydspSIG0[iTemp1 as usize] + ((fTemp0 - f32::floor(fTemp0)) * (ftbl0mydspSIG0[(iTemp1 + 1) as usize] - ftbl0mydspSIG0[iTemp1 as usize])))) + (fSlow5 * (self.iRec3[0] as f32))) + (fSlow6 * self.fRec4[0])));
			outputs[0][i as usize] = (((iSlow1 as f32) * fTemp2) as f32);
			outputs[1][i as usize] = (((iSlow7 as f32) * fTemp2) as f32);
			outputs[2][i as usize] = (((iSlow8 as f32) * fTemp2) as f32);
			outputs[3][i as usize] = (((iSlow9 as f32) * fTemp2) as f32);
			outputs[4][i as usize] = (((iSlow10 as f32) * fTemp2) as f32);
			outputs[5][i as usize] = (((iSlow11 as f32) * fTemp2) as f32);
			outputs[6][i as usize] = (((iSlow12 as f32) * fTemp2) as f32);
			outputs[7][i as usize] = (((iSlow13 as f32) * fTemp2) as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec2[1] = self.fRec2[0];
			self.iRec3[2] = self.iRec3[1];
			self.iRec3[1] = self.iRec3[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

