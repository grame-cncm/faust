


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fCheckbox1: f32,
	fEntry0: f32,
	fVslider0: f32,
	fVslider1: f32,
	fVslider2: f32,
	fVslider3: f32,
	fVslider4: f32,
	fVslider5: f32,
	fVslider6: f32,
	fButton0: f32,
	fHslider0: f32,
	fVslider7: f32,
	fVslider8: f32,
	fVslider9: f32,
	fEntry1: f32,
	fVbargraph0: f32,
	fVslider10: f32,
	fVslider11: f32,
	fVslider12: f32,
	fEntry2: f32,
	fVbargraph1: f32,
	fVslider13: f32,
	fVslider14: f32,
	fVslider15: f32,
	fEntry3: f32,
	fVbargraph2: f32,
	fHbargraph0: f32,
	fVslider16: f32,
	fButton1: f32,
	fHslider1: f32,
	fEntry4: f32,
	fVbargraph3: f32,
	fHbargraph1: f32,
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fCheckbox1: 0.0,
			fEntry0: 0.0,
			fVslider0: 0.0,
			fVslider1: 0.0,
			fVslider2: 0.0,
			fVslider3: 0.0,
			fVslider4: 0.0,
			fVslider5: 0.0,
			fVslider6: 0.0,
			fButton0: 0.0,
			fHslider0: 0.0,
			fVslider7: 0.0,
			fVslider8: 0.0,
			fVslider9: 0.0,
			fEntry1: 0.0,
			fVbargraph0: 0.0,
			fVslider10: 0.0,
			fVslider11: 0.0,
			fVslider12: 0.0,
			fEntry2: 0.0,
			fVbargraph1: 0.0,
			fVslider13: 0.0,
			fVslider14: 0.0,
			fVslider15: 0.0,
			fEntry3: 0.0,
			fVbargraph2: 0.0,
			fHbargraph0: 0.0,
			fVslider16: 0.0,
			fButton1: 0.0,
			fHslider1: 0.0,
			fEntry4: 0.0,
			fVbargraph3: 0.0,
			fHbargraph1: 0.0,
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "O. Guillerminet");
		m.declare("copyright", "(c) O. Guillerminet 2012");
		m.declare("license", "BSD");
		m.declare("name", "UITester");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		6
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		34
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			8 => {
				rate = 1;
				
			},
			9 => {
				rate = 1;
				
			},
			10 => {
				rate = 1;
				
			},
			11 => {
				rate = 1;
				
			},
			12 => {
				rate = 1;
				
			},
			13 => {
				rate = 1;
				
			},
			14 => {
				rate = 1;
				
			},
			15 => {
				rate = 1;
				
			},
			16 => {
				rate = 1;
				
			},
			17 => {
				rate = 1;
				
			},
			18 => {
				rate = 1;
				
			},
			19 => {
				rate = 1;
				
			},
			20 => {
				rate = 1;
				
			},
			21 => {
				rate = 1;
				
			},
			22 => {
				rate = 1;
				
			},
			23 => {
				rate = 1;
				
			},
			24 => {
				rate = 1;
				
			},
			25 => {
				rate = 1;
				
			},
			26 => {
				rate = 1;
				
			},
			27 => {
				rate = 1;
				
			},
			28 => {
				rate = 1;
				
			},
			29 => {
				rate = 1;
				
			},
			30 => {
				rate = 1;
				
			},
			31 => {
				rate = 1;
				
			},
			32 => {
				rate = 1;
				
			},
			33 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fCheckbox1 = 0.0;
		self.fEntry0 = 60.0;
		self.fVslider0 = 60.0;
		self.fVslider1 = 60.0;
		self.fVslider2 = 60.0;
		self.fVslider3 = 60.0;
		self.fVslider4 = 60.0;
		self.fVslider5 = 60.0;
		self.fVslider6 = 60.0;
		self.fButton0 = 0.0;
		self.fHslider0 = 60.0;
		self.fVslider7 = 60.0;
		self.fVslider8 = 60.0;
		self.fVslider9 = 60.0;
		self.fEntry1 = 60.0;
		self.fVslider10 = 60.0;
		self.fVslider11 = 60.0;
		self.fVslider12 = 60.0;
		self.fEntry2 = 60.0;
		self.fVslider13 = 60.0;
		self.fVslider14 = 60.0;
		self.fVslider15 = 60.0;
		self.fEntry3 = 60.0;
		self.fVslider16 = 60.0;
		self.fButton1 = 0.0;
		self.fHslider1 = 60.0;
		self.fEntry4 = 60.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openTabBox("grp 1");
		ui_interface.openHorizontalBox("hmisc");
		ui_interface.addButton("button", &mut self.fButton1);
		ui_interface.addHorizontalBargraph("hbar", &mut self.fHbargraph1, 0.0, 127.0);
		ui_interface.addHorizontalSlider("hslider", &mut self.fHslider1, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry4, "unit", "f");
		ui_interface.addNumEntry("num", &mut self.fEntry4, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalBargraph("vbar", &mut self.fVbargraph3, 0.0, 127.0);
		ui_interface.declare(&mut self.fVslider16, "unit", "f");
		ui_interface.addVerticalSlider("vslider4", &mut self.fVslider16, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("knobs");
		ui_interface.declare(&mut self.fVslider3, "style", "knob");
		ui_interface.addVerticalSlider("knob1", &mut self.fVslider3, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider4, "style", "knob");
		ui_interface.addVerticalSlider("knob2", &mut self.fVslider4, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider5, "style", "knob");
		ui_interface.addVerticalSlider("knob3", &mut self.fVslider5, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("sliders");
		ui_interface.addVerticalSlider("vslider1", &mut self.fVslider0, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalSlider("vslider2", &mut self.fVslider1, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalSlider("vslider3", &mut self.fVslider2, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("vbox");
		ui_interface.addCheckButton("check1", &mut self.fCheckbox0);
		ui_interface.addCheckButton("check2", &mut self.fCheckbox1);
		ui_interface.declare(&mut self.fEntry0, "style", "knob");
		ui_interface.addNumEntry("knob0", &mut self.fEntry0, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("vmisc");
		ui_interface.addButton("button", &mut self.fButton0);
		ui_interface.addHorizontalBargraph("hbar", &mut self.fHbargraph0, 0.0, 127.0);
		ui_interface.declare(&mut self.fHslider0, "unit", "Hz");
		ui_interface.addHorizontalSlider("hslider", &mut self.fHslider0, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.openHorizontalBox("small box 1");
		ui_interface.declare(&mut self.fVslider9, "style", "knob");
		ui_interface.addVerticalSlider("knob4", &mut self.fVslider9, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry1, "unit", "f");
		ui_interface.addNumEntry("num1", &mut self.fEntry1, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalBargraph("vbar1", &mut self.fVbargraph0, 0.0, 127.0);
		ui_interface.declare(&mut self.fVslider7, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider5", &mut self.fVslider7, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider8, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider6", &mut self.fVslider8, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("sub box 1");
		ui_interface.openHorizontalBox("small box 2");
		ui_interface.declare(&mut self.fVslider12, "style", "knob");
		ui_interface.addVerticalSlider("knob5", &mut self.fVslider12, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry2, "unit", "f");
		ui_interface.addNumEntry("num2", &mut self.fEntry2, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalBargraph("vbar2", &mut self.fVbargraph1, 0.0, 127.0);
		ui_interface.declare(&mut self.fVslider10, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider7", &mut self.fVslider10, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider11, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider8", &mut self.fVslider11, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("small box 3");
		ui_interface.declare(&mut self.fVslider15, "style", "knob");
		ui_interface.addVerticalSlider("knob6", &mut self.fVslider15, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fEntry3, "unit", "f");
		ui_interface.addNumEntry("num3", &mut self.fEntry3, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.addVerticalBargraph("vbar3", &mut self.fVbargraph2, 0.0, 127.0);
		ui_interface.declare(&mut self.fVslider14, "unit", "m");
		ui_interface.addVerticalSlider("vslider10", &mut self.fVslider14, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider13, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider9", &mut self.fVslider13, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fVslider6, "unit", "Hz");
		ui_interface.addVerticalSlider("vslider4", &mut self.fVslider6, 60.0, 0.0, 127.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fCheckbox0 as f32);
		let mut fSlow1: f32 = (self.fCheckbox1 as f32);
		let mut fSlow2: f32 = (self.fEntry0 as f32);
		let mut fSlow3: f32 = (self.fVslider0 as f32);
		let mut fSlow4: f32 = (self.fVslider1 as f32);
		let mut fSlow5: f32 = (self.fVslider2 as f32);
		let mut fSlow6: f32 = (self.fVslider3 as f32);
		let mut fSlow7: f32 = (self.fVslider4 as f32);
		let mut fSlow8: f32 = (self.fVslider5 as f32);
		let mut fSlow9: f32 = (self.fVslider6 as f32);
		let mut fSlow10: f32 = (self.fButton0 as f32);
		let mut fSlow11: f32 = (self.fHslider0 as f32);
		let mut fSlow12: f32 = (self.fVslider7 as f32);
		let mut fSlow13: f32 = (self.fVslider8 as f32);
		let mut fSlow14: f32 = (self.fVslider9 as f32);
		let mut fSlow15: f32 = (self.fEntry1 as f32);
		let mut fSlow16: f32 = (self.fVslider10 as f32);
		let mut fSlow17: f32 = (self.fVslider11 as f32);
		let mut fSlow18: f32 = (self.fVslider12 as f32);
		let mut fSlow19: f32 = (self.fEntry2 as f32);
		let mut fSlow20: f32 = (self.fVslider13 as f32);
		let mut fSlow21: f32 = (self.fVslider14 as f32);
		let mut fSlow22: f32 = (self.fVslider15 as f32);
		let mut fSlow23: f32 = (self.fEntry3 as f32);
		let mut fSlow24: f32 = (self.fVslider16 as f32);
		let mut fSlow25: f32 = (self.fButton1 as f32);
		let mut fSlow26: f32 = (self.fHslider1 as f32);
		let mut fSlow27: f32 = (self.fEntry4 as f32);
		let mut i: i32 = 0;
		loop {
			outputs[0][i as usize] = (fSlow0 as f32);
			outputs[1][i as usize] = (fSlow1 as f32);
			outputs[2][i as usize] = (fSlow2 as f32);
			outputs[3][i as usize] = (fSlow3 as f32);
			outputs[4][i as usize] = (fSlow4 as f32);
			outputs[5][i as usize] = (fSlow5 as f32);
			outputs[6][i as usize] = (fSlow6 as f32);
			outputs[7][i as usize] = (fSlow7 as f32);
			outputs[8][i as usize] = (fSlow8 as f32);
			outputs[9][i as usize] = (fSlow9 as f32);
			outputs[10][i as usize] = (fSlow10 as f32);
			outputs[11][i as usize] = (fSlow11 as f32);
			outputs[12][i as usize] = (fSlow12 as f32);
			outputs[13][i as usize] = (fSlow13 as f32);
			outputs[14][i as usize] = (fSlow14 as f32);
			outputs[15][i as usize] = (fSlow15 as f32);
			self.fVbargraph0 = ((inputs[0][i as usize] as f32) as f32);
			outputs[16][i as usize] = (self.fVbargraph0 as f32);
			outputs[17][i as usize] = (fSlow16 as f32);
			outputs[18][i as usize] = (fSlow17 as f32);
			outputs[19][i as usize] = (fSlow18 as f32);
			outputs[20][i as usize] = (fSlow19 as f32);
			self.fVbargraph1 = ((inputs[1][i as usize] as f32) as f32);
			outputs[21][i as usize] = (self.fVbargraph1 as f32);
			outputs[22][i as usize] = (fSlow20 as f32);
			outputs[23][i as usize] = (fSlow21 as f32);
			outputs[24][i as usize] = (fSlow22 as f32);
			outputs[25][i as usize] = (fSlow23 as f32);
			self.fVbargraph2 = ((inputs[2][i as usize] as f32) as f32);
			outputs[26][i as usize] = (self.fVbargraph2 as f32);
			self.fHbargraph0 = ((inputs[3][i as usize] as f32) as f32);
			outputs[27][i as usize] = (self.fHbargraph0 as f32);
			outputs[28][i as usize] = (fSlow24 as f32);
			outputs[29][i as usize] = (fSlow25 as f32);
			outputs[30][i as usize] = (fSlow26 as f32);
			outputs[31][i as usize] = (fSlow27 as f32);
			self.fVbargraph3 = ((inputs[4][i as usize] as f32) as f32);
			outputs[32][i as usize] = (self.fVbargraph3 as f32);
			self.fHbargraph1 = ((inputs[5][i as usize] as f32) as f32);
			outputs[33][i as usize] = (self.fHbargraph1 as f32);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

