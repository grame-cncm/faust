


pub struct mydsp {
	
	fDummy: f32,
	fButton0: f32,
	IOTA: i32,
	fVec0: [f32;1048576],
	iVec1: [i32;2],
	iRec1: [i32;2],
	fRec0: [f32;2],
	fHslider0: f32,
	fRec2: [f32;2],
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fButton0: 0.0,
			IOTA: 0,
			fVec0: [0.0;1048576],
			iVec1: [0;2],
			iRec1: [0;2],
			fRec0: [0.0;2],
			fHslider0: 0.0,
			fRec2: [0.0;2],
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("license", "BSD");
		m.declare("name", "capture");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fButton0 = 0.0;
		self.fHslider0 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		self.IOTA = 0;
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 1048576) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iVec1[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.iRec1[l2 as usize] = 0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("Audio Capture");
		ui_interface.addButton("Capture", &mut self.fButton0);
		ui_interface.addHorizontalSlider("level (db)", &mut self.fHslider0, 0.0, -96.0, 4.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fButton0 as f32);
		let mut fSlow1: f32 = (1.0 - fSlow0);
		let mut iSlow2: i32 = (fSlow0 as i32);
		let mut fSlow3: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32))));
		let mut i: i32 = 0;
		loop {
			self.fVec0[(self.IOTA & 1048575) as usize] = ((fSlow1 * self.fRec0[1]) + (fSlow0 * (inputs[0][i as usize] as f32)));
			self.iVec1[0] = iSlow2;
			self.iRec1[0] = ((iSlow2 + self.iRec1[1]) * (((iSlow2 - self.iVec1[1]) <= 0) as i32));
			self.fRec0[0] = self.fVec0[((self.IOTA - std::cmp::min(524288, (std::cmp::max(0, ((self.iRec1[0] + -1) as i32)) as i32))) & 1048575) as usize];
			self.fRec2[0] = (fSlow3 + (0.999000013 * self.fRec2[1]));
			outputs[0][i as usize] = ((self.fRec0[0] * self.fRec2[0]) as f32);
			self.IOTA = (self.IOTA + 1);
			self.iVec1[1] = self.iVec1[0];
			self.iRec1[1] = self.iRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec2[1] = self.fRec2[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

