


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fVslider0: f32,
	fRec1: [f32;2],
	fEntry0: f32,
	fCheckbox0: f32,
	fVslider1: f32,
	fRec3: [f32;2],
	fRec2: [f32;2],
	fVbargraph0: f32,
	fEntry1: f32,
	fCheckbox1: f32,
	fVslider2: f32,
	fRec5: [f32;2],
	fRec4: [f32;2],
	fVbargraph1: f32,
	fEntry2: f32,
	fCheckbox2: f32,
	fVslider3: f32,
	fRec7: [f32;2],
	fRec6: [f32;2],
	fVbargraph2: f32,
	fEntry3: f32,
	fCheckbox3: f32,
	fVslider4: f32,
	fRec9: [f32;2],
	fRec8: [f32;2],
	fVbargraph3: f32,
	fEntry4: f32,
	fCheckbox4: f32,
	fVslider5: f32,
	fRec11: [f32;2],
	fRec10: [f32;2],
	fVbargraph4: f32,
	fEntry5: f32,
	fCheckbox5: f32,
	fVslider6: f32,
	fRec13: [f32;2],
	fRec12: [f32;2],
	fVbargraph5: f32,
	fEntry6: f32,
	fCheckbox6: f32,
	fVslider7: f32,
	fRec15: [f32;2],
	fRec14: [f32;2],
	fVbargraph6: f32,
	fEntry7: f32,
	fCheckbox7: f32,
	fVslider8: f32,
	fRec17: [f32;2],
	fRec16: [f32;2],
	fVbargraph7: f32,
	fRec0: [f32;2],
	fVbargraph8: f32,
	fRec18: [f32;2],
	fVbargraph9: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fVslider0: 0.0,
			fRec1: [0.0;2],
			fEntry0: 0.0,
			fCheckbox0: 0.0,
			fVslider1: 0.0,
			fRec3: [0.0;2],
			fRec2: [0.0;2],
			fVbargraph0: 0.0,
			fEntry1: 0.0,
			fCheckbox1: 0.0,
			fVslider2: 0.0,
			fRec5: [0.0;2],
			fRec4: [0.0;2],
			fVbargraph1: 0.0,
			fEntry2: 0.0,
			fCheckbox2: 0.0,
			fVslider3: 0.0,
			fRec7: [0.0;2],
			fRec6: [0.0;2],
			fVbargraph2: 0.0,
			fEntry3: 0.0,
			fCheckbox3: 0.0,
			fVslider4: 0.0,
			fRec9: [0.0;2],
			fRec8: [0.0;2],
			fVbargraph3: 0.0,
			fEntry4: 0.0,
			fCheckbox4: 0.0,
			fVslider5: 0.0,
			fRec11: [0.0;2],
			fRec10: [0.0;2],
			fVbargraph4: 0.0,
			fEntry5: 0.0,
			fCheckbox5: 0.0,
			fVslider6: 0.0,
			fRec13: [0.0;2],
			fRec12: [0.0;2],
			fVbargraph5: 0.0,
			fEntry6: 0.0,
			fCheckbox6: 0.0,
			fVslider7: 0.0,
			fRec15: [0.0;2],
			fRec14: [0.0;2],
			fVbargraph6: 0.0,
			fEntry7: 0.0,
			fCheckbox7: 0.0,
			fVslider8: 0.0,
			fRec17: [0.0;2],
			fRec16: [0.0;2],
			fVbargraph7: 0.0,
			fRec0: [0.0;2],
			fVbargraph8: 0.0,
			fRec18: [0.0;2],
			fVbargraph9: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("../analysis/vumeter.dsp/author", "Grame");
		m.declare("../analysis/vumeter.dsp/copyright", "(c)GRAME 2006");
		m.declare("../analysis/vumeter.dsp/license", "BSD");
		m.declare("../analysis/vumeter.dsp/name", "vumeter");
		m.declare("../analysis/vumeter.dsp/version", "1.0");
		m.declare("../dynamic/volume.dsp/author", "Grame");
		m.declare("../dynamic/volume.dsp/copyright", "(c)GRAME 2006");
		m.declare("../dynamic/volume.dsp/license", "BSD");
		m.declare("../dynamic/volume.dsp/name", "volume");
		m.declare("../dynamic/volume.dsp/version", "1.0");
		m.declare("../spat/panpot.dsp/author", "Grame");
		m.declare("../spat/panpot.dsp/copyright", "(c)GRAME 2006");
		m.declare("../spat/panpot.dsp/license", "BSD");
		m.declare("../spat/panpot.dsp/name", "panpot");
		m.declare("../spat/panpot.dsp/version", "1.0");
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "mixer");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		8
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fVslider0 = 0.0;
		self.fEntry0 = 0.0;
		self.fCheckbox0 = 0.0;
		self.fVslider1 = 0.0;
		self.fEntry1 = 0.0;
		self.fCheckbox1 = 0.0;
		self.fVslider2 = 0.0;
		self.fEntry2 = 0.0;
		self.fCheckbox2 = 0.0;
		self.fVslider3 = 0.0;
		self.fEntry3 = 0.0;
		self.fCheckbox3 = 0.0;
		self.fVslider4 = 0.0;
		self.fEntry4 = 0.0;
		self.fCheckbox4 = 0.0;
		self.fVslider5 = 0.0;
		self.fEntry5 = 0.0;
		self.fCheckbox5 = 0.0;
		self.fVslider6 = 0.0;
		self.fEntry6 = 0.0;
		self.fCheckbox6 = 0.0;
		self.fVslider7 = 0.0;
		self.fEntry7 = 0.0;
		self.fCheckbox7 = 0.0;
		self.fVslider8 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec1[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec3[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec5[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec7[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec6[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec9[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec11[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec10[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec13[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec12[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec15[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec14[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec17[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec16[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec0[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec18[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (1.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openHorizontalBox("mixer");
		ui_interface.openVerticalBox("Ch 0");
		ui_interface.declare(&mut self.fEntry0, "1", "");
		ui_interface.declare(&mut self.fEntry0, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry0, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider1, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider1, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph0, "2", "");
		ui_interface.declare(&mut self.fVbargraph0, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff146e1810", &mut self.fVbargraph0, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 1");
		ui_interface.declare(&mut self.fEntry1, "1", "");
		ui_interface.declare(&mut self.fEntry1, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry1, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider2, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider2, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph1, "2", "");
		ui_interface.declare(&mut self.fVbargraph1, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff146eb8e0", &mut self.fVbargraph1, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox1);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 2");
		ui_interface.declare(&mut self.fEntry2, "1", "");
		ui_interface.declare(&mut self.fEntry2, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry2, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider3, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider3, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph2, "2", "");
		ui_interface.declare(&mut self.fVbargraph2, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff146f5df0", &mut self.fVbargraph2, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox2);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 3");
		ui_interface.declare(&mut self.fEntry3, "1", "");
		ui_interface.declare(&mut self.fEntry3, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry3, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider4, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider4, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph3, "2", "");
		ui_interface.declare(&mut self.fVbargraph3, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff14704540", &mut self.fVbargraph3, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox3);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 4");
		ui_interface.declare(&mut self.fEntry4, "1", "");
		ui_interface.declare(&mut self.fEntry4, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry4, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider5, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider5, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph4, "2", "");
		ui_interface.declare(&mut self.fVbargraph4, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff1470efd0", &mut self.fVbargraph4, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox4);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 5");
		ui_interface.declare(&mut self.fEntry5, "1", "");
		ui_interface.declare(&mut self.fEntry5, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry5, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider6, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider6, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph5, "2", "");
		ui_interface.declare(&mut self.fVbargraph5, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff14719d20", &mut self.fVbargraph5, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox5);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 6");
		ui_interface.declare(&mut self.fEntry6, "1", "");
		ui_interface.declare(&mut self.fEntry6, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry6, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider7, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider7, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph6, "2", "");
		ui_interface.declare(&mut self.fVbargraph6, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff14724d30", &mut self.fVbargraph6, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox6);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("Ch 7");
		ui_interface.declare(&mut self.fEntry7, "1", "");
		ui_interface.declare(&mut self.fEntry7, "style", "knob");
		ui_interface.addNumEntry("pan", &mut self.fEntry7, 0.0, -90.0, 90.0, 1.0);
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fVslider8, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider8, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVbargraph7, "2", "");
		ui_interface.declare(&mut self.fVbargraph7, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff14730000", &mut self.fVbargraph7, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.addCheckButton("mute", &mut self.fCheckbox7);
		ui_interface.closeBox();
		ui_interface.openHorizontalBox("stereo out");
		ui_interface.openVerticalBox("L");
		ui_interface.declare(&mut self.fVbargraph8, "2", "");
		ui_interface.declare(&mut self.fVbargraph8, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff14733ef0", &mut self.fVbargraph8, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("R");
		ui_interface.declare(&mut self.fVbargraph9, "2", "");
		ui_interface.declare(&mut self.fVbargraph9, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fff1473d490", &mut self.fVbargraph9, -70.0, 5.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fVslider0, "1", "");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider0, 0.0, -70.0, 4.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider0 as f32))));
		let mut fSlow1: f32 = (0.00555555569 * ((self.fEntry0 as f32) + -90.0));
		let mut fSlow2: f32 = f32::sqrt((0.0 - fSlow1));
		let mut fSlow3: f32 = (1.0 - (self.fCheckbox0 as f32));
		let mut fSlow4: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider1 as f32))));
		let mut fSlow5: f32 = (0.00555555569 * ((self.fEntry1 as f32) + -90.0));
		let mut fSlow6: f32 = f32::sqrt((0.0 - fSlow5));
		let mut fSlow7: f32 = (1.0 - (self.fCheckbox1 as f32));
		let mut fSlow8: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider2 as f32))));
		let mut fSlow9: f32 = (0.00555555569 * ((self.fEntry2 as f32) + -90.0));
		let mut fSlow10: f32 = f32::sqrt((0.0 - fSlow9));
		let mut fSlow11: f32 = (1.0 - (self.fCheckbox2 as f32));
		let mut fSlow12: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider3 as f32))));
		let mut fSlow13: f32 = (0.00555555569 * ((self.fEntry3 as f32) + -90.0));
		let mut fSlow14: f32 = f32::sqrt((0.0 - fSlow13));
		let mut fSlow15: f32 = (1.0 - (self.fCheckbox3 as f32));
		let mut fSlow16: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider4 as f32))));
		let mut fSlow17: f32 = (0.00555555569 * ((self.fEntry4 as f32) + -90.0));
		let mut fSlow18: f32 = f32::sqrt((0.0 - fSlow17));
		let mut fSlow19: f32 = (1.0 - (self.fCheckbox4 as f32));
		let mut fSlow20: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider5 as f32))));
		let mut fSlow21: f32 = (0.00555555569 * ((self.fEntry5 as f32) + -90.0));
		let mut fSlow22: f32 = f32::sqrt((0.0 - fSlow21));
		let mut fSlow23: f32 = (1.0 - (self.fCheckbox5 as f32));
		let mut fSlow24: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider6 as f32))));
		let mut fSlow25: f32 = (0.00555555569 * ((self.fEntry6 as f32) + -90.0));
		let mut fSlow26: f32 = f32::sqrt((0.0 - fSlow25));
		let mut fSlow27: f32 = (1.0 - (self.fCheckbox6 as f32));
		let mut fSlow28: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider7 as f32))));
		let mut fSlow29: f32 = (0.00555555569 * ((self.fEntry7 as f32) + -90.0));
		let mut fSlow30: f32 = f32::sqrt((0.0 - fSlow29));
		let mut fSlow31: f32 = (1.0 - (self.fCheckbox7 as f32));
		let mut fSlow32: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider8 as f32))));
		let mut fSlow33: f32 = f32::sqrt((fSlow1 + 1.0));
		let mut fSlow34: f32 = f32::sqrt((fSlow5 + 1.0));
		let mut fSlow35: f32 = f32::sqrt((fSlow9 + 1.0));
		let mut fSlow36: f32 = f32::sqrt((fSlow13 + 1.0));
		let mut fSlow37: f32 = f32::sqrt((fSlow17 + 1.0));
		let mut fSlow38: f32 = f32::sqrt((fSlow21 + 1.0));
		let mut fSlow39: f32 = f32::sqrt((fSlow25 + 1.0));
		let mut fSlow40: f32 = f32::sqrt((fSlow29 + 1.0));
		let mut i: i32 = 0;
		loop {
			self.fRec1[0] = (fSlow0 + (0.999000013 * self.fRec1[1]));
			self.fRec3[0] = (fSlow4 + (0.999000013 * self.fRec3[1]));
			let mut fTemp0: f32 = (fSlow3 * ((inputs[0][i as usize] as f32) * self.fRec3[0]));
			self.fRec2[0] = f32::max((self.fRec2[1] - self.fConst0), f32::abs(fTemp0));
			self.fVbargraph0 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec2[0]))) as f32);
			self.fRec5[0] = (fSlow8 + (0.999000013 * self.fRec5[1]));
			let mut fTemp1: f32 = (fSlow7 * ((inputs[1][i as usize] as f32) * self.fRec5[0]));
			self.fRec4[0] = f32::max((self.fRec4[1] - self.fConst0), f32::abs(fTemp1));
			self.fVbargraph1 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec4[0]))) as f32);
			self.fRec7[0] = (fSlow12 + (0.999000013 * self.fRec7[1]));
			let mut fTemp2: f32 = (fSlow11 * ((inputs[2][i as usize] as f32) * self.fRec7[0]));
			self.fRec6[0] = f32::max((self.fRec6[1] - self.fConst0), f32::abs(fTemp2));
			self.fVbargraph2 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec6[0]))) as f32);
			self.fRec9[0] = (fSlow16 + (0.999000013 * self.fRec9[1]));
			let mut fTemp3: f32 = (fSlow15 * ((inputs[3][i as usize] as f32) * self.fRec9[0]));
			self.fRec8[0] = f32::max((self.fRec8[1] - self.fConst0), f32::abs(fTemp3));
			self.fVbargraph3 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec8[0]))) as f32);
			self.fRec11[0] = (fSlow20 + (0.999000013 * self.fRec11[1]));
			let mut fTemp4: f32 = (fSlow19 * ((inputs[4][i as usize] as f32) * self.fRec11[0]));
			self.fRec10[0] = f32::max((self.fRec10[1] - self.fConst0), f32::abs(fTemp4));
			self.fVbargraph4 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec10[0]))) as f32);
			self.fRec13[0] = (fSlow24 + (0.999000013 * self.fRec13[1]));
			let mut fTemp5: f32 = (fSlow23 * ((inputs[5][i as usize] as f32) * self.fRec13[0]));
			self.fRec12[0] = f32::max((self.fRec12[1] - self.fConst0), f32::abs(fTemp5));
			self.fVbargraph5 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec12[0]))) as f32);
			self.fRec15[0] = (fSlow28 + (0.999000013 * self.fRec15[1]));
			let mut fTemp6: f32 = (fSlow27 * ((inputs[6][i as usize] as f32) * self.fRec15[0]));
			self.fRec14[0] = f32::max((self.fRec14[1] - self.fConst0), f32::abs(fTemp6));
			self.fVbargraph6 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec14[0]))) as f32);
			self.fRec17[0] = (fSlow32 + (0.999000013 * self.fRec17[1]));
			let mut fTemp7: f32 = (fSlow31 * ((inputs[7][i as usize] as f32) * self.fRec17[0]));
			self.fRec16[0] = f32::max((self.fRec16[1] - self.fConst0), f32::abs(fTemp7));
			self.fVbargraph7 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec16[0]))) as f32);
			let mut fTemp8: f32 = (self.fRec1[0] * ((((((((fSlow2 * fTemp0) + (fSlow6 * fTemp1)) + (fSlow10 * fTemp2)) + (fSlow14 * fTemp3)) + (fSlow18 * fTemp4)) + (fSlow22 * fTemp5)) + (fSlow26 * fTemp6)) + (fSlow30 * fTemp7)));
			self.fRec0[0] = f32::max((self.fRec0[1] - self.fConst0), f32::abs(fTemp8));
			self.fVbargraph8 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec0[0]))) as f32);
			outputs[0][i as usize] = (fTemp8 as f32);
			let mut fTemp9: f32 = (self.fRec1[0] * ((((((((fSlow33 * fTemp0) + (fSlow34 * fTemp1)) + (fSlow35 * fTemp2)) + (fSlow36 * fTemp3)) + (fSlow37 * fTemp4)) + (fSlow38 * fTemp5)) + (fSlow39 * fTemp6)) + (fSlow40 * fTemp7)));
			self.fRec18[0] = f32::max((self.fRec18[1] - self.fConst0), f32::abs(fTemp9));
			self.fVbargraph9 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec18[0]))) as f32);
			outputs[1][i as usize] = (fTemp9 as f32);
			self.fRec1[1] = self.fRec1[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec18[1] = self.fRec18[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

