


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec0: [f32;2],
	fRec1: [f32;2],
	fRec2: [f32;2],
	fRec3: [f32;2],
	fRec4: [f32;2],
	fRec5: [f32;2],
	fRec6: [f32;2],
	fRec7: [f32;2],
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec0: [0.0;2],
			fRec1: [0.0;2],
			fRec2: [0.0;2],
			fRec3: [0.0;2],
			fRec4: [0.0;2],
			fRec5: [0.0;2],
			fRec6: [0.0;2],
			fRec7: [0.0;2],
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("license", "BSD");
		m.declare("name", "spat");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("spats.lib/name", "Faust Spatialization Library");
		m.declare("spats.lib/version", "0.0");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		8
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec3[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec5[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec6[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec7[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("Spatializer 1x8");
		ui_interface.addHorizontalSlider("angle", &mut self.fHslider1, 0.0, 0.0, 1.0, 0.01);
		ui_interface.addHorizontalSlider("distance", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (fSlow0 + 1.0);
		let mut fSlow2: f32 = (self.fHslider1 as f32);
		let mut fSlow3: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 1.5), 1.0) + -0.5)))))))));
		let mut fSlow4: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 1.375), 1.0) + -0.5)))))))));
		let mut fSlow5: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 1.25), 1.0) + -0.5)))))))));
		let mut fSlow6: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 1.125), 1.0) + -0.5)))))))));
		let mut fSlow7: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 1.0), 1.0) + -0.5)))))))));
		let mut fSlow8: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 0.875), 1.0) + -0.5)))))))));
		let mut fSlow9: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 0.75), 1.0) + -0.5)))))))));
		let mut fSlow10: f32 = (4.99999987e-05 * (fSlow1 * f32::sqrt(f32::max(0.0, (1.0 - (8.0 * (fSlow0 * f32::abs((f32::fmod((fSlow2 + 0.625), 1.0) + -0.5)))))))));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fRec0[0] = (fSlow3 + (0.999899983 * self.fRec0[1]));
			outputs[0][i as usize] = ((fTemp0 * self.fRec0[0]) as f32);
			self.fRec1[0] = (fSlow4 + (0.999899983 * self.fRec1[1]));
			outputs[1][i as usize] = ((fTemp0 * self.fRec1[0]) as f32);
			self.fRec2[0] = (fSlow5 + (0.999899983 * self.fRec2[1]));
			outputs[2][i as usize] = ((fTemp0 * self.fRec2[0]) as f32);
			self.fRec3[0] = (fSlow6 + (0.999899983 * self.fRec3[1]));
			outputs[3][i as usize] = ((fTemp0 * self.fRec3[0]) as f32);
			self.fRec4[0] = (fSlow7 + (0.999899983 * self.fRec4[1]));
			outputs[4][i as usize] = ((fTemp0 * self.fRec4[0]) as f32);
			self.fRec5[0] = (fSlow8 + (0.999899983 * self.fRec5[1]));
			outputs[5][i as usize] = ((fTemp0 * self.fRec5[0]) as f32);
			self.fRec6[0] = (fSlow9 + (0.999899983 * self.fRec6[1]));
			outputs[6][i as usize] = ((fTemp0 * self.fRec6[0]) as f32);
			self.fRec7[0] = (fSlow10 + (0.999899983 * self.fRec7[1]));
			outputs[7][i as usize] = ((fTemp0 * self.fRec7[0]) as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

