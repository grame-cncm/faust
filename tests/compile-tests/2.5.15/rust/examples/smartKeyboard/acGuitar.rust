


pub struct mydsp {
	
	fDummy: f32,
	iRec10: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider0: f32,
	fRec29: [f32;2],
	fHslider1: f32,
	fHslider2: f32,
	fRec30: [f32;2],
	fRec25: [f32;2],
	fRec31: [f32;2],
	fRec33: [f32;4],
	IOTA: i32,
	fRec34: [f32;2048],
	fVec0: [f32;2],
	fHslider3: f32,
	iVec1: [i32;2],
	fVec2: [f32;2],
	fRec32: [f32;2048],
	fRec21: [f32;2],
	fRec17: [f32;2048],
	fRec19: [f32;2],
	fRec15: [f32;4],
	iRec6: [i32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	iRec46: [i32;2],
	fHslider4: f32,
	fHslider5: f32,
	fRec65: [f32;2],
	fRec61: [f32;2],
	fRec66: [f32;2],
	fHslider6: f32,
	iVec3: [i32;2],
	fRec68: [f32;4],
	fRec69: [f32;2048],
	fVec4: [f32;2],
	fVec5: [f32;2],
	fRec67: [f32;2048],
	fRec57: [f32;2],
	fRec53: [f32;2048],
	fRec55: [f32;2],
	fRec51: [f32;4],
	iRec42: [i32;2],
	fRec38: [f32;2048],
	fRec36: [f32;2],
	iRec81: [i32;2],
	fHslider7: f32,
	fHslider8: f32,
	fRec100: [f32;2],
	fRec96: [f32;2],
	fRec101: [f32;2],
	fHslider9: f32,
	iVec6: [i32;2],
	fRec103: [f32;4],
	fRec104: [f32;2048],
	fVec7: [f32;2],
	fVec8: [f32;2],
	fRec102: [f32;2048],
	fRec92: [f32;2],
	fRec88: [f32;2048],
	fRec90: [f32;2],
	fRec86: [f32;4],
	iRec77: [i32;2],
	fRec73: [f32;2048],
	fRec71: [f32;2],
	iRec116: [i32;2],
	fHslider10: f32,
	fHslider11: f32,
	fRec135: [f32;2],
	fRec131: [f32;2],
	fRec136: [f32;2],
	fHslider12: f32,
	iVec9: [i32;2],
	fRec138: [f32;4],
	fRec139: [f32;2048],
	fVec10: [f32;2],
	fVec11: [f32;2],
	fRec137: [f32;2048],
	fRec127: [f32;2],
	fRec123: [f32;2048],
	fRec125: [f32;2],
	fRec121: [f32;4],
	iRec112: [i32;2],
	fRec108: [f32;2048],
	fRec106: [f32;2],
	iRec151: [i32;2],
	fHslider13: f32,
	fHslider14: f32,
	fRec170: [f32;2],
	fRec166: [f32;2],
	fRec171: [f32;2],
	fHslider15: f32,
	iVec12: [i32;2],
	fRec173: [f32;4],
	fRec174: [f32;2048],
	fVec13: [f32;2],
	fVec14: [f32;2],
	fRec172: [f32;2048],
	fRec162: [f32;2],
	fRec158: [f32;2048],
	fRec160: [f32;2],
	fRec156: [f32;4],
	iRec147: [i32;2],
	fRec143: [f32;2048],
	fRec141: [f32;2],
	iRec186: [i32;2],
	fHslider16: f32,
	fHslider17: f32,
	fRec205: [f32;2],
	fRec201: [f32;2],
	fRec206: [f32;2],
	fHslider18: f32,
	iVec15: [i32;2],
	fRec208: [f32;4],
	fRec209: [f32;2048],
	fVec16: [f32;2],
	fVec17: [f32;2],
	fRec207: [f32;2048],
	fRec197: [f32;2],
	fRec193: [f32;2048],
	fRec195: [f32;2],
	fRec191: [f32;4],
	iRec182: [i32;2],
	fRec178: [f32;2048],
	fRec176: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iRec10: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider0: 0.0,
			fRec29: [0.0;2],
			fHslider1: 0.0,
			fHslider2: 0.0,
			fRec30: [0.0;2],
			fRec25: [0.0;2],
			fRec31: [0.0;2],
			fRec33: [0.0;4],
			IOTA: 0,
			fRec34: [0.0;2048],
			fVec0: [0.0;2],
			fHslider3: 0.0,
			iVec1: [0;2],
			fVec2: [0.0;2],
			fRec32: [0.0;2048],
			fRec21: [0.0;2],
			fRec17: [0.0;2048],
			fRec19: [0.0;2],
			fRec15: [0.0;4],
			iRec6: [0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
			iRec46: [0;2],
			fHslider4: 0.0,
			fHslider5: 0.0,
			fRec65: [0.0;2],
			fRec61: [0.0;2],
			fRec66: [0.0;2],
			fHslider6: 0.0,
			iVec3: [0;2],
			fRec68: [0.0;4],
			fRec69: [0.0;2048],
			fVec4: [0.0;2],
			fVec5: [0.0;2],
			fRec67: [0.0;2048],
			fRec57: [0.0;2],
			fRec53: [0.0;2048],
			fRec55: [0.0;2],
			fRec51: [0.0;4],
			iRec42: [0;2],
			fRec38: [0.0;2048],
			fRec36: [0.0;2],
			iRec81: [0;2],
			fHslider7: 0.0,
			fHslider8: 0.0,
			fRec100: [0.0;2],
			fRec96: [0.0;2],
			fRec101: [0.0;2],
			fHslider9: 0.0,
			iVec6: [0;2],
			fRec103: [0.0;4],
			fRec104: [0.0;2048],
			fVec7: [0.0;2],
			fVec8: [0.0;2],
			fRec102: [0.0;2048],
			fRec92: [0.0;2],
			fRec88: [0.0;2048],
			fRec90: [0.0;2],
			fRec86: [0.0;4],
			iRec77: [0;2],
			fRec73: [0.0;2048],
			fRec71: [0.0;2],
			iRec116: [0;2],
			fHslider10: 0.0,
			fHslider11: 0.0,
			fRec135: [0.0;2],
			fRec131: [0.0;2],
			fRec136: [0.0;2],
			fHslider12: 0.0,
			iVec9: [0;2],
			fRec138: [0.0;4],
			fRec139: [0.0;2048],
			fVec10: [0.0;2],
			fVec11: [0.0;2],
			fRec137: [0.0;2048],
			fRec127: [0.0;2],
			fRec123: [0.0;2048],
			fRec125: [0.0;2],
			fRec121: [0.0;4],
			iRec112: [0;2],
			fRec108: [0.0;2048],
			fRec106: [0.0;2],
			iRec151: [0;2],
			fHslider13: 0.0,
			fHslider14: 0.0,
			fRec170: [0.0;2],
			fRec166: [0.0;2],
			fRec171: [0.0;2],
			fHslider15: 0.0,
			iVec12: [0;2],
			fRec173: [0.0;4],
			fRec174: [0.0;2048],
			fVec13: [0.0;2],
			fVec14: [0.0;2],
			fRec172: [0.0;2048],
			fRec162: [0.0;2],
			fRec158: [0.0;2048],
			fRec160: [0.0;2],
			fRec156: [0.0;4],
			iRec147: [0;2],
			fRec143: [0.0;2048],
			fRec141: [0.0;2],
			iRec186: [0;2],
			fHslider16: 0.0,
			fHslider17: 0.0,
			fRec205: [0.0;2],
			fRec201: [0.0;2],
			fRec206: [0.0;2],
			fHslider18: 0.0,
			iVec15: [0;2],
			fRec208: [0.0;4],
			fRec209: [0.0;2048],
			fVec16: [0.0;2],
			fVec17: [0.0;2],
			fRec207: [0.0;2048],
			fRec197: [0.0;2],
			fRec193: [0.0;2048],
			fRec195: [0.0;2],
			fRec191: [0.0;4],
			iRec182: [0;2],
			fRec178: [0.0;2048],
			fRec176: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'7',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Keyboard 0 - Number of Keys':'14',   'Keyboard 1 - Number of Keys':'14',  'Keyboard 2 - Number of Keys':'14',  'Keyboard 3 - Number of Keys':'14',  'Keyboard 4 - Number of Keys':'14',  'Keyboard 5 - Number of Keys':'14',  'Keyboard 6 - Number of Keys':'6',  'Keyboard 0 - Lowest Key':'52',  'Keyboard 1 - Lowest Key':'57',  'Keyboard 2 - Lowest Key':'62',  'Keyboard 3 - Lowest Key':'67',  'Keyboard 4 - Lowest Key':'71',  'Keyboard 5 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 4 - Send Keyboard Freq':'1',  'Keyboard 5 - Send Keyboard Freq':'1',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 6 - Send Key Status':'1',  'Keyboard 6 - Key 0 - Label':'S0',  'Keyboard 6 - Key 1 - Label':'S1',  'Keyboard 6 - Key 2 - Label':'S2',  'Keyboard 6 - Key 3 - Label':'S3',  'Keyboard 6 - Key 4 - Label':'S4',  'Keyboard 6 - Key 5 - Label':'S5' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "acGuitar");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 164.800003;
		self.fHslider2 = 1.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 220.0;
		self.fHslider5 = 1.0;
		self.fHslider6 = 0.0;
		self.fHslider7 = 293.700012;
		self.fHslider8 = 1.0;
		self.fHslider9 = 0.0;
		self.fHslider10 = 392.0;
		self.fHslider11 = 1.0;
		self.fHslider12 = 0.0;
		self.fHslider13 = 493.899994;
		self.fHslider14 = 1.0;
		self.fHslider15 = 0.0;
		self.fHslider16 = 659.200012;
		self.fHslider17 = 1.0;
		self.fHslider18 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec10[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec29[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec30[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec25[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec31[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec33[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec34[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec0[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.iVec1[l8 as usize] = 0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec2[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec32[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2048) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec21[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec17[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2048) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec19[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec15[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 4) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.iRec6[l15 as usize] = 0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec2[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2048) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec0[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.iRec46[l18 as usize] = 0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec65[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec61[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec66[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.iVec3[l22 as usize] = 0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec68[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 4) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec69[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2048) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fVec4[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fVec5[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec67[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2048) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec57[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec53[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2048) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec55[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec51[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 4) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.iRec42[l32 as usize] = 0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec38[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2048) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec36[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.iRec81[l35 as usize] = 0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec100[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec96[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec101[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.iVec6[l39 as usize] = 0;
			l39 = (l39 + 1);
			if (l39 < 2) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec103[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 4) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec104[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2048) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fVec7[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fVec8[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec102[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 2048) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec92[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec88[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2048) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec90[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec86[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 4) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.iRec77[l49 as usize] = 0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec73[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2048) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec71[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 2) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.iRec116[l52 as usize] = 0;
			l52 = (l52 + 1);
			if (l52 < 2) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec135[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec131[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 2) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec136[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.iVec9[l56 as usize] = 0;
			l56 = (l56 + 1);
			if (l56 < 2) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec138[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 4) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec139[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2048) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fVec10[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fVec11[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 2) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec137[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2048) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec127[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec123[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 2048) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec125[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 2) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec121[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 4) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.iRec112[l66 as usize] = 0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec108[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 2048) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fRec106[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 2) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.iRec151[l69 as usize] = 0;
			l69 = (l69 + 1);
			if (l69 < 2) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fRec170[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 2) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec166[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 2) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.fRec171[l72 as usize] = 0.0;
			l72 = (l72 + 1);
			if (l72 < 2) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.iVec12[l73 as usize] = 0;
			l73 = (l73 + 1);
			if (l73 < 2) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fRec173[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 4) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec174[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 2048) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.fVec13[l76 as usize] = 0.0;
			l76 = (l76 + 1);
			if (l76 < 2) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fVec14[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 2) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec172[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 2048) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec162[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 2) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.fRec158[l80 as usize] = 0.0;
			l80 = (l80 + 1);
			if (l80 < 2048) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fRec160[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 2) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec156[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 4) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.iRec147[l83 as usize] = 0;
			l83 = (l83 + 1);
			if (l83 < 2) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.fRec143[l84 as usize] = 0.0;
			l84 = (l84 + 1);
			if (l84 < 2048) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec141[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 2) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.iRec186[l86 as usize] = 0;
			l86 = (l86 + 1);
			if (l86 < 2) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec205[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 2) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.fRec201[l88 as usize] = 0.0;
			l88 = (l88 + 1);
			if (l88 < 2) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec206[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 2) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.iVec15[l90 as usize] = 0;
			l90 = (l90 + 1);
			if (l90 < 2) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fRec208[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 4) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.fRec209[l92 as usize] = 0.0;
			l92 = (l92 + 1);
			if (l92 < 2048) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fVec16[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 2) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fVec17[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 2) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec207[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 2048) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.fRec197[l96 as usize] = 0.0;
			l96 = (l96 + 1);
			if (l96 < 2) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec193[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 2048) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec195[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 2) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fRec191[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 4) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.iRec182[l100 as usize] = 0;
			l100 = (l100 + 1);
			if (l100 < 2) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec178[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 2048) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec176[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00882352982 * self.fConst0);
		self.fConst2 = (0.00147058826 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("acGuitar");
		ui_interface.addHorizontalSlider("kb0bend", &mut self.fHslider2, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb0freq", &mut self.fHslider1, 164.80000000000001, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb1bend", &mut self.fHslider5, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb1freq", &mut self.fHslider4, 220.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb2bend", &mut self.fHslider8, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb2freq", &mut self.fHslider7, 293.69999999999999, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb3bend", &mut self.fHslider11, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb3freq", &mut self.fHslider10, 392.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb4bend", &mut self.fHslider14, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb4freq", &mut self.fHslider13, 493.89999999999998, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb5bend", &mut self.fHslider17, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb5freq", &mut self.fHslider16, 659.20000000000005, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb6k0status", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb6k1status", &mut self.fHslider6, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb6k2status", &mut self.fHslider9, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb6k3status", &mut self.fHslider12, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb6k4status", &mut self.fHslider15, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb6k5status", &mut self.fHslider18, 0.0, 0.0, 1.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "acc", "1 0 -10 0 10");
		ui_interface.addHorizontalSlider("pluckPosition", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * (self.fHslider0 as f32));
		let mut fSlow1: f32 = (0.340000004 / ((self.fHslider1 as f32) * (self.fHslider2 as f32)));
		let mut fSlow2: f32 = (self.fHslider3 as f32);
		let mut iSlow3: i32 = (((fSlow2 == 1.0) as i32) | ((fSlow2 == 4.0) as i32));
		let mut fSlow4: f32 = (0.340000004 / ((self.fHslider4 as f32) * (self.fHslider5 as f32)));
		let mut fSlow5: f32 = (self.fHslider6 as f32);
		let mut iSlow6: i32 = (((fSlow5 == 1.0) as i32) | ((fSlow5 == 4.0) as i32));
		let mut fSlow7: f32 = (0.340000004 / ((self.fHslider7 as f32) * (self.fHslider8 as f32)));
		let mut fSlow8: f32 = (self.fHslider9 as f32);
		let mut iSlow9: i32 = (((fSlow8 == 1.0) as i32) | ((fSlow8 == 4.0) as i32));
		let mut fSlow10: f32 = (0.340000004 / ((self.fHslider10 as f32) * (self.fHslider11 as f32)));
		let mut fSlow11: f32 = (self.fHslider12 as f32);
		let mut iSlow12: i32 = (((fSlow11 == 1.0) as i32) | ((fSlow11 == 4.0) as i32));
		let mut fSlow13: f32 = (0.340000004 / ((self.fHslider13 as f32) * (self.fHslider14 as f32)));
		let mut fSlow14: f32 = (self.fHslider15 as f32);
		let mut iSlow15: i32 = (((fSlow14 == 1.0) as i32) | ((fSlow14 == 4.0) as i32));
		let mut fSlow16: f32 = (0.340000004 / ((self.fHslider16 as f32) * (self.fHslider17 as f32)));
		let mut fSlow17: f32 = (self.fHslider18 as f32);
		let mut iSlow18: i32 = (((fSlow17 == 1.0) as i32) | ((fSlow17 == 4.0) as i32));
		let mut i: i32 = 0;
		loop {
			self.iRec10[0] = 0;
			let mut iRec11: i32 = self.iRec10[1];
			let mut fRec14: f32 = ((self.iRec6[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec15[2]) + (0.150000006 * (self.fRec15[1] + self.fRec15[3])))));
			self.fRec29[0] = (fSlow0 + (0.999000013 * self.fRec29[1]));
			let mut fTemp0: f32 = (1.0 - self.fRec29[0]);
			self.fRec30[0] = (fSlow1 + (0.999000013 * self.fRec30[1]));
			let mut fTemp1: f32 = (self.fRec30[0] + -0.109999999);
			let mut fTemp2: f32 = (self.fConst2 * (fTemp0 * fTemp1));
			let mut fTemp3: f32 = (fTemp2 + -1.49999499);
			let mut iTemp4: i32 = (fTemp3 as i32);
			let mut iTemp5: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp4) as f32)) as i32);
			let mut fTemp6: f32 = f32::floor(fTemp3);
			let mut fTemp7: f32 = (fTemp2 + (-1.0 - fTemp6));
			let mut fTemp8: f32 = (0.0 - fTemp7);
			let mut fTemp9: f32 = (fTemp2 + (-2.0 - fTemp6));
			let mut fTemp10: f32 = (0.0 - (0.5 * fTemp9));
			let mut fTemp11: f32 = (fTemp2 + (-3.0 - fTemp6));
			let mut fTemp12: f32 = (0.0 - (0.333333343 * fTemp11));
			let mut fTemp13: f32 = (fTemp2 + (-4.0 - fTemp6));
			let mut fTemp14: f32 = (0.0 - (0.25 * fTemp13));
			let mut fTemp15: f32 = (fTemp2 - fTemp6);
			let mut iTemp16: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 + 2)) as f32)) as i32);
			let mut fTemp17: f32 = (0.0 - fTemp11);
			let mut fTemp18: f32 = (0.0 - (0.5 * fTemp13));
			let mut iTemp19: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 + 1)) as f32)) as i32);
			let mut fTemp20: f32 = (0.0 - fTemp9);
			let mut fTemp21: f32 = (0.0 - (0.5 * fTemp11));
			let mut fTemp22: f32 = (0.0 - (0.333333343 * fTemp13));
			let mut fTemp23: f32 = (fTemp7 * fTemp9);
			let mut iTemp24: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 + 3)) as f32)) as i32);
			let mut fTemp25: f32 = (0.0 - fTemp13);
			let mut fTemp26: f32 = (fTemp23 * fTemp11);
			let mut iTemp27: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 + 4)) as f32)) as i32);
			self.fRec25[0] = (((((self.fRec2[((self.IOTA - (iTemp5 + 1)) & 2047) as usize] * fTemp8) * fTemp10) * fTemp12) * fTemp14) + (fTemp15 * ((((0.5 * (((fTemp7 * self.fRec2[((self.IOTA - (iTemp16 + 1)) & 2047) as usize]) * fTemp17) * fTemp18)) + (((self.fRec2[((self.IOTA - (iTemp19 + 1)) & 2047) as usize] * fTemp20) * fTemp21) * fTemp22)) + (0.166666672 * ((fTemp23 * self.fRec2[((self.IOTA - (iTemp24 + 1)) & 2047) as usize]) * fTemp25))) + (0.0416666679 * (fTemp26 * self.fRec2[((self.IOTA - (iTemp27 + 1)) & 2047) as usize])))));
			self.fRec31[0] = ((0.400000006 * self.fRec31[1]) + (0.600000024 * self.fRec25[1]));
			let mut fRec26: f32 = self.fRec31[0];
			self.fRec33[0] = self.fRec0[1];
			self.fRec34[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec33[2]) + (0.150000006 * (self.fRec33[1] + self.fRec33[3])))));
			let mut iRec35: i32 = 0;
			let mut fTemp28: f32 = (self.fConst2 * (self.fRec29[0] * fTemp1));
			let mut fTemp29: f32 = (fTemp28 + -1.49999499);
			let mut iTemp30: i32 = (fTemp29 as i32);
			let mut iTemp31: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp30) as f32)) as i32);
			let mut fTemp32: f32 = f32::floor(fTemp29);
			let mut fTemp33: f32 = (fTemp28 + (-1.0 - fTemp32));
			let mut fTemp34: f32 = (0.0 - fTemp33);
			let mut fTemp35: f32 = (fTemp28 + (-2.0 - fTemp32));
			let mut fTemp36: f32 = (0.0 - (0.5 * fTemp35));
			let mut fTemp37: f32 = (fTemp28 + (-3.0 - fTemp32));
			let mut fTemp38: f32 = (0.0 - (0.333333343 * fTemp37));
			let mut fTemp39: f32 = (fTemp28 + (-4.0 - fTemp32));
			let mut fTemp40: f32 = (0.0 - (0.25 * fTemp39));
			let mut fTemp41: f32 = (fTemp28 - fTemp32);
			let mut iTemp42: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp30 + 2)) as f32)) as i32);
			let mut fTemp43: f32 = (0.0 - fTemp37);
			let mut fTemp44: f32 = (0.0 - (0.5 * fTemp39));
			let mut iTemp45: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp30 + 1)) as f32)) as i32);
			let mut fTemp46: f32 = (0.0 - fTemp35);
			let mut fTemp47: f32 = (0.0 - (0.5 * fTemp37));
			let mut fTemp48: f32 = (0.0 - (0.333333343 * fTemp39));
			let mut fTemp49: f32 = (fTemp33 * fTemp35);
			let mut iTemp50: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp30 + 3)) as f32)) as i32);
			let mut fTemp51: f32 = (0.0 - fTemp39);
			let mut fTemp52: f32 = (fTemp49 * fTemp37);
			let mut iTemp53: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp30 + 4)) as f32)) as i32);
			self.fVec0[0] = (((((self.fRec34[((self.IOTA - (iTemp31 + 2)) & 2047) as usize] * fTemp34) * fTemp36) * fTemp38) * fTemp40) + (fTemp41 * ((((0.5 * (((fTemp33 * self.fRec34[((self.IOTA - (iTemp42 + 2)) & 2047) as usize]) * fTemp43) * fTemp44)) + (((self.fRec34[((self.IOTA - (iTemp45 + 2)) & 2047) as usize] * fTemp46) * fTemp47) * fTemp48)) + (0.166666672 * ((fTemp49 * self.fRec34[((self.IOTA - (iTemp50 + 2)) & 2047) as usize]) * fTemp51))) + (0.0416666679 * (fTemp52 * self.fRec34[((self.IOTA - (iTemp53 + 2)) & 2047) as usize])))));
			self.iVec1[0] = iSlow3;
			let mut iTemp54: i32 = (((iSlow3 - self.iVec1[1]) > 0) as i32);
			self.fVec2[0] = (self.fVec0[1] + (iTemp54 as f32));
			self.fRec32[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec32[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec2[1]));
			let mut fRec27: f32 = (((((fTemp8 * fTemp10) * fTemp12) * fTemp14) * self.fRec32[((self.IOTA - iTemp5) & 2047) as usize]) + (fTemp15 * ((0.0416666679 * (fTemp26 * self.fRec32[((self.IOTA - iTemp27) & 2047) as usize])) + (((((fTemp20 * fTemp21) * fTemp22) * self.fRec32[((self.IOTA - iTemp19) & 2047) as usize]) + (0.5 * (((fTemp7 * fTemp17) * fTemp18) * self.fRec32[((self.IOTA - iTemp16) & 2047) as usize]))) + (0.166666672 * ((fTemp23 * fTemp25) * self.fRec32[((self.IOTA - iTemp24) & 2047) as usize]))))));
			let mut iRec28: i32 = iRec35;
			self.fRec21[0] = fRec26;
			let mut fRec22: f32 = ((iTemp54 as f32) + self.fRec21[1]);
			let mut fRec23: f32 = fRec27;
			let mut iRec24: i32 = iRec28;
			self.fRec17[(self.IOTA & 2047) as usize] = fRec22;
			let mut fRec18: f32 = (((((fTemp34 * fTemp36) * fTemp38) * fTemp40) * self.fRec17[((self.IOTA - (iTemp31 + 1)) & 2047) as usize]) + (fTemp41 * (((0.166666672 * ((fTemp49 * fTemp51) * self.fRec17[((self.IOTA - (iTemp50 + 1)) & 2047) as usize])) + ((((fTemp46 * fTemp47) * fTemp48) * self.fRec17[((self.IOTA - (iTemp45 + 1)) & 2047) as usize]) + (0.5 * (((fTemp33 * fTemp43) * fTemp44) * self.fRec17[((self.IOTA - (iTemp42 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp52 * self.fRec17[((self.IOTA - (iTemp53 + 1)) & 2047) as usize])))));
			self.fRec19[0] = fRec23;
			let mut iRec20: i32 = iRec24;
			self.fRec15[0] = self.fRec19[1];
			let mut iRec16: i32 = iRec20;
			let mut fRec12: f32 = self.fRec15[1];
			let mut fRec13: f32 = ((iRec16 as f32) + self.fRec15[1]);
			self.iRec6[0] = iRec11;
			let mut fRec7: f32 = fRec14;
			let mut fRec8: f32 = fRec12;
			let mut fRec9: f32 = fRec13;
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = fRec18;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			self.iRec46[0] = 0;
			let mut iRec47: i32 = self.iRec46[1];
			let mut fRec50: f32 = ((self.iRec42[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec51[2]) + (0.150000006 * (self.fRec51[1] + self.fRec51[3])))));
			self.fRec65[0] = (fSlow4 + (0.999000013 * self.fRec65[1]));
			let mut fTemp55: f32 = (self.fRec65[0] + -0.109999999);
			let mut fTemp56: f32 = (self.fConst2 * (fTemp0 * fTemp55));
			let mut fTemp57: f32 = (fTemp56 + -1.49999499);
			let mut iTemp58: i32 = (fTemp57 as i32);
			let mut iTemp59: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp58) as f32)) as i32);
			let mut fTemp60: f32 = f32::floor(fTemp57);
			let mut fTemp61: f32 = (fTemp56 + (-1.0 - fTemp60));
			let mut fTemp62: f32 = (0.0 - fTemp61);
			let mut fTemp63: f32 = (fTemp56 + (-2.0 - fTemp60));
			let mut fTemp64: f32 = (0.0 - (0.5 * fTemp63));
			let mut fTemp65: f32 = (fTemp56 + (-3.0 - fTemp60));
			let mut fTemp66: f32 = (0.0 - (0.333333343 * fTemp65));
			let mut fTemp67: f32 = (fTemp56 + (-4.0 - fTemp60));
			let mut fTemp68: f32 = (0.0 - (0.25 * fTemp67));
			let mut fTemp69: f32 = (fTemp56 - fTemp60);
			let mut iTemp70: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp58 + 2)) as f32)) as i32);
			let mut fTemp71: f32 = (0.0 - fTemp65);
			let mut fTemp72: f32 = (0.0 - (0.5 * fTemp67));
			let mut iTemp73: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp58 + 1)) as f32)) as i32);
			let mut fTemp74: f32 = (0.0 - fTemp63);
			let mut fTemp75: f32 = (0.0 - (0.5 * fTemp65));
			let mut fTemp76: f32 = (0.0 - (0.333333343 * fTemp67));
			let mut fTemp77: f32 = (fTemp61 * fTemp63);
			let mut iTemp78: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp58 + 3)) as f32)) as i32);
			let mut fTemp79: f32 = (0.0 - fTemp67);
			let mut fTemp80: f32 = (fTemp77 * fTemp65);
			let mut iTemp81: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp58 + 4)) as f32)) as i32);
			self.fRec61[0] = (((((self.fRec38[((self.IOTA - (iTemp59 + 1)) & 2047) as usize] * fTemp62) * fTemp64) * fTemp66) * fTemp68) + (fTemp69 * ((((0.5 * (((fTemp61 * self.fRec38[((self.IOTA - (iTemp70 + 1)) & 2047) as usize]) * fTemp71) * fTemp72)) + (((self.fRec38[((self.IOTA - (iTemp73 + 1)) & 2047) as usize] * fTemp74) * fTemp75) * fTemp76)) + (0.166666672 * ((fTemp77 * self.fRec38[((self.IOTA - (iTemp78 + 1)) & 2047) as usize]) * fTemp79))) + (0.0416666679 * (fTemp80 * self.fRec38[((self.IOTA - (iTemp81 + 1)) & 2047) as usize])))));
			self.fRec66[0] = ((0.600000024 * self.fRec61[1]) + (0.400000006 * self.fRec66[1]));
			let mut fRec62: f32 = self.fRec66[0];
			self.iVec3[0] = iSlow6;
			let mut iTemp82: i32 = (((iSlow6 - self.iVec3[1]) > 0) as i32);
			self.fRec68[0] = self.fRec36[1];
			self.fRec69[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec68[2]) + (0.150000006 * (self.fRec68[1] + self.fRec68[3])))));
			let mut iRec70: i32 = 0;
			let mut fTemp83: f32 = (self.fConst2 * (self.fRec29[0] * fTemp55));
			let mut fTemp84: f32 = (fTemp83 + -1.49999499);
			let mut iTemp85: i32 = (fTemp84 as i32);
			let mut iTemp86: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp85) as f32)) as i32);
			let mut fTemp87: f32 = f32::floor(fTemp84);
			let mut fTemp88: f32 = (fTemp83 + (-1.0 - fTemp87));
			let mut fTemp89: f32 = (0.0 - fTemp88);
			let mut fTemp90: f32 = (fTemp83 + (-2.0 - fTemp87));
			let mut fTemp91: f32 = (0.0 - (0.5 * fTemp90));
			let mut fTemp92: f32 = (fTemp83 + (-3.0 - fTemp87));
			let mut fTemp93: f32 = (0.0 - (0.333333343 * fTemp92));
			let mut fTemp94: f32 = (fTemp83 + (-4.0 - fTemp87));
			let mut fTemp95: f32 = (0.0 - (0.25 * fTemp94));
			let mut fTemp96: f32 = (fTemp83 - fTemp87);
			let mut iTemp97: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp85 + 2)) as f32)) as i32);
			let mut fTemp98: f32 = (0.0 - fTemp92);
			let mut fTemp99: f32 = (0.0 - (0.5 * fTemp94));
			let mut iTemp100: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp85 + 1)) as f32)) as i32);
			let mut fTemp101: f32 = (0.0 - fTemp90);
			let mut fTemp102: f32 = (0.0 - (0.5 * fTemp92));
			let mut fTemp103: f32 = (0.0 - (0.333333343 * fTemp94));
			let mut fTemp104: f32 = (fTemp88 * fTemp90);
			let mut iTemp105: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp85 + 3)) as f32)) as i32);
			let mut fTemp106: f32 = (0.0 - fTemp94);
			let mut fTemp107: f32 = (fTemp104 * fTemp92);
			let mut iTemp108: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp85 + 4)) as f32)) as i32);
			self.fVec4[0] = (((((self.fRec69[((self.IOTA - (iTemp86 + 2)) & 2047) as usize] * fTemp89) * fTemp91) * fTemp93) * fTemp95) + (fTemp96 * ((((0.5 * (((fTemp88 * self.fRec69[((self.IOTA - (iTemp97 + 2)) & 2047) as usize]) * fTemp98) * fTemp99)) + (((self.fRec69[((self.IOTA - (iTemp100 + 2)) & 2047) as usize] * fTemp101) * fTemp102) * fTemp103)) + (0.166666672 * ((fTemp104 * self.fRec69[((self.IOTA - (iTemp105 + 2)) & 2047) as usize]) * fTemp106))) + (0.0416666679 * (fTemp107 * self.fRec69[((self.IOTA - (iTemp108 + 2)) & 2047) as usize])))));
			self.fVec5[0] = ((iTemp82 as f32) + self.fVec4[1]);
			self.fRec67[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec67[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec5[1]));
			let mut fRec63: f32 = (((((fTemp62 * fTemp64) * fTemp66) * fTemp68) * self.fRec67[((self.IOTA - iTemp59) & 2047) as usize]) + (fTemp69 * ((0.0416666679 * (fTemp80 * self.fRec67[((self.IOTA - iTemp81) & 2047) as usize])) + (((((fTemp74 * fTemp75) * fTemp76) * self.fRec67[((self.IOTA - iTemp73) & 2047) as usize]) + (0.5 * (((fTemp61 * fTemp71) * fTemp72) * self.fRec67[((self.IOTA - iTemp70) & 2047) as usize]))) + (0.166666672 * ((fTemp77 * fTemp79) * self.fRec67[((self.IOTA - iTemp78) & 2047) as usize]))))));
			let mut iRec64: i32 = iRec70;
			self.fRec57[0] = fRec62;
			let mut fRec58: f32 = ((iTemp82 as f32) + self.fRec57[1]);
			let mut fRec59: f32 = fRec63;
			let mut iRec60: i32 = iRec64;
			self.fRec53[(self.IOTA & 2047) as usize] = fRec58;
			let mut fRec54: f32 = (((((fTemp89 * fTemp91) * fTemp93) * fTemp95) * self.fRec53[((self.IOTA - (iTemp86 + 1)) & 2047) as usize]) + (fTemp96 * (((0.166666672 * ((fTemp104 * fTemp106) * self.fRec53[((self.IOTA - (iTemp105 + 1)) & 2047) as usize])) + ((((fTemp101 * fTemp102) * fTemp103) * self.fRec53[((self.IOTA - (iTemp100 + 1)) & 2047) as usize]) + (0.5 * (((fTemp88 * fTemp98) * fTemp99) * self.fRec53[((self.IOTA - (iTemp97 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp107 * self.fRec53[((self.IOTA - (iTemp108 + 1)) & 2047) as usize])))));
			self.fRec55[0] = fRec59;
			let mut iRec56: i32 = iRec60;
			self.fRec51[0] = self.fRec55[1];
			let mut iRec52: i32 = iRec56;
			let mut fRec48: f32 = self.fRec51[1];
			let mut fRec49: f32 = ((iRec52 as f32) + self.fRec51[1]);
			self.iRec42[0] = iRec47;
			let mut fRec43: f32 = fRec50;
			let mut fRec44: f32 = fRec48;
			let mut fRec45: f32 = fRec49;
			self.fRec38[(self.IOTA & 2047) as usize] = fRec43;
			let mut fRec39: f32 = fRec54;
			let mut fRec40: f32 = fRec44;
			let mut fRec41: f32 = fRec45;
			self.fRec36[0] = fRec39;
			let mut fRec37: f32 = fRec41;
			self.iRec81[0] = 0;
			let mut iRec82: i32 = self.iRec81[1];
			let mut fRec85: f32 = ((self.iRec77[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec86[2]) + (0.150000006 * (self.fRec86[1] + self.fRec86[3])))));
			self.fRec100[0] = (fSlow7 + (0.999000013 * self.fRec100[1]));
			let mut fTemp109: f32 = (self.fRec100[0] + -0.109999999);
			let mut fTemp110: f32 = (self.fConst2 * (fTemp0 * fTemp109));
			let mut fTemp111: f32 = (fTemp110 + -1.49999499);
			let mut iTemp112: i32 = (fTemp111 as i32);
			let mut iTemp113: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp112) as f32)) as i32);
			let mut fTemp114: f32 = f32::floor(fTemp111);
			let mut fTemp115: f32 = (fTemp110 + (-1.0 - fTemp114));
			let mut fTemp116: f32 = (0.0 - fTemp115);
			let mut fTemp117: f32 = (fTemp110 + (-2.0 - fTemp114));
			let mut fTemp118: f32 = (0.0 - (0.5 * fTemp117));
			let mut fTemp119: f32 = (fTemp110 + (-3.0 - fTemp114));
			let mut fTemp120: f32 = (0.0 - (0.333333343 * fTemp119));
			let mut fTemp121: f32 = (fTemp110 + (-4.0 - fTemp114));
			let mut fTemp122: f32 = (0.0 - (0.25 * fTemp121));
			let mut fTemp123: f32 = (fTemp110 - fTemp114);
			let mut iTemp124: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp112 + 2)) as f32)) as i32);
			let mut fTemp125: f32 = (0.0 - fTemp119);
			let mut fTemp126: f32 = (0.0 - (0.5 * fTemp121));
			let mut iTemp127: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp112 + 1)) as f32)) as i32);
			let mut fTemp128: f32 = (0.0 - fTemp117);
			let mut fTemp129: f32 = (0.0 - (0.5 * fTemp119));
			let mut fTemp130: f32 = (0.0 - (0.333333343 * fTemp121));
			let mut fTemp131: f32 = (fTemp115 * fTemp117);
			let mut iTemp132: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp112 + 3)) as f32)) as i32);
			let mut fTemp133: f32 = (0.0 - fTemp121);
			let mut iTemp134: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp112 + 4)) as f32)) as i32);
			self.fRec96[0] = (((((self.fRec73[((self.IOTA - (iTemp113 + 1)) & 2047) as usize] * fTemp116) * fTemp118) * fTemp120) * fTemp122) + (fTemp123 * ((((0.5 * (((fTemp115 * self.fRec73[((self.IOTA - (iTemp124 + 1)) & 2047) as usize]) * fTemp125) * fTemp126)) + (((self.fRec73[((self.IOTA - (iTemp127 + 1)) & 2047) as usize] * fTemp128) * fTemp129) * fTemp130)) + (0.166666672 * ((fTemp131 * self.fRec73[((self.IOTA - (iTemp132 + 1)) & 2047) as usize]) * fTemp133))) + (0.0416666679 * ((fTemp131 * fTemp119) * self.fRec73[((self.IOTA - (iTemp134 + 1)) & 2047) as usize])))));
			self.fRec101[0] = ((0.600000024 * self.fRec96[1]) + (0.400000006 * self.fRec101[1]));
			let mut fRec97: f32 = self.fRec101[0];
			self.iVec6[0] = iSlow9;
			let mut iTemp135: i32 = (((iSlow9 - self.iVec6[1]) > 0) as i32);
			self.fRec103[0] = self.fRec71[1];
			self.fRec104[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec103[2]) + (0.150000006 * (self.fRec103[1] + self.fRec103[3])))));
			let mut iRec105: i32 = 0;
			let mut fTemp136: f32 = (self.fConst2 * (self.fRec29[0] * fTemp109));
			let mut fTemp137: f32 = (fTemp136 + -1.49999499);
			let mut iTemp138: i32 = (fTemp137 as i32);
			let mut iTemp139: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp138 + 3)) as f32)) as i32);
			let mut fTemp140: f32 = f32::floor(fTemp137);
			let mut fTemp141: f32 = (fTemp136 + (-4.0 - fTemp140));
			let mut fTemp142: f32 = (0.0 - fTemp141);
			let mut fTemp143: f32 = (fTemp136 + (-1.0 - fTemp140));
			let mut fTemp144: f32 = (fTemp136 + (-2.0 - fTemp140));
			let mut iTemp145: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp138 + 2)) as f32)) as i32);
			let mut fTemp146: f32 = (fTemp136 + (-3.0 - fTemp140));
			let mut fTemp147: f32 = (0.0 - fTemp146);
			let mut fTemp148: f32 = (0.0 - (0.5 * fTemp141));
			let mut iTemp149: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp138 + 1)) as f32)) as i32);
			let mut fTemp150: f32 = (0.0 - fTemp144);
			let mut fTemp151: f32 = (0.0 - (0.5 * fTemp146));
			let mut fTemp152: f32 = (0.0 - (0.333333343 * fTemp141));
			let mut iTemp153: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp138 + 4)) as f32)) as i32);
			let mut fTemp154: f32 = (fTemp136 - fTemp140);
			let mut iTemp155: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp138) as f32)) as i32);
			let mut fTemp156: f32 = (0.0 - fTemp143);
			let mut fTemp157: f32 = (0.0 - (0.5 * fTemp144));
			let mut fTemp158: f32 = (0.0 - (0.333333343 * fTemp146));
			let mut fTemp159: f32 = (0.0 - (0.25 * fTemp141));
			self.fVec7[0] = (((((0.166666672 * (((self.fRec104[((self.IOTA - (iTemp139 + 2)) & 2047) as usize] * fTemp142) * fTemp143) * fTemp144)) + ((0.5 * (((self.fRec104[((self.IOTA - (iTemp145 + 2)) & 2047) as usize] * fTemp147) * fTemp148) * fTemp143)) + (((self.fRec104[((self.IOTA - (iTemp149 + 2)) & 2047) as usize] * fTemp150) * fTemp151) * fTemp152))) + (0.0416666679 * (((self.fRec104[((self.IOTA - (iTemp153 + 2)) & 2047) as usize] * fTemp143) * fTemp144) * fTemp146))) * fTemp154) + ((((self.fRec104[((self.IOTA - (iTemp155 + 2)) & 2047) as usize] * fTemp156) * fTemp157) * fTemp158) * fTemp159));
			self.fVec8[0] = ((iTemp135 as f32) + self.fVec7[1]);
			self.fRec102[(self.IOTA & 2047) as usize] = ((0.600000024 * self.fVec8[1]) + (0.400000006 * self.fRec102[((self.IOTA - 1) & 2047) as usize]));
			let mut fRec98: f32 = (((((self.fRec102[((self.IOTA - iTemp113) & 2047) as usize] * fTemp116) * fTemp118) * fTemp120) * fTemp122) + (((((((self.fRec102[((self.IOTA - iTemp127) & 2047) as usize] * fTemp128) * fTemp129) * fTemp130) + (0.5 * (((self.fRec102[((self.IOTA - iTemp124) & 2047) as usize] * fTemp115) * fTemp125) * fTemp126))) + (0.166666672 * (((self.fRec102[((self.IOTA - iTemp132) & 2047) as usize] * fTemp115) * fTemp117) * fTemp133))) + (0.0416666679 * (((self.fRec102[((self.IOTA - iTemp134) & 2047) as usize] * fTemp115) * fTemp117) * fTemp119))) * fTemp123));
			let mut iRec99: i32 = iRec105;
			self.fRec92[0] = fRec97;
			let mut fRec93: f32 = ((iTemp135 as f32) + self.fRec92[1]);
			let mut fRec94: f32 = fRec98;
			let mut iRec95: i32 = iRec99;
			self.fRec88[(self.IOTA & 2047) as usize] = fRec93;
			let mut fRec89: f32 = (((((self.fRec88[((self.IOTA - (iTemp155 + 1)) & 2047) as usize] * fTemp156) * fTemp157) * fTemp158) * fTemp159) + (((((((self.fRec88[((self.IOTA - (iTemp149 + 1)) & 2047) as usize] * fTemp150) * fTemp151) * fTemp152) + (0.5 * (((self.fRec88[((self.IOTA - (iTemp145 + 1)) & 2047) as usize] * fTemp147) * fTemp148) * fTemp143))) + (0.166666672 * (((self.fRec88[((self.IOTA - (iTemp139 + 1)) & 2047) as usize] * fTemp142) * fTemp143) * fTemp144))) + (0.0416666679 * (((self.fRec88[((self.IOTA - (iTemp153 + 1)) & 2047) as usize] * fTemp143) * fTemp144) * fTemp146))) * fTemp154));
			self.fRec90[0] = fRec94;
			let mut iRec91: i32 = iRec95;
			self.fRec86[0] = self.fRec90[1];
			let mut iRec87: i32 = iRec91;
			let mut fRec83: f32 = self.fRec86[1];
			let mut fRec84: f32 = ((iRec87 as f32) + self.fRec86[1]);
			self.iRec77[0] = iRec82;
			let mut fRec78: f32 = fRec85;
			let mut fRec79: f32 = fRec83;
			let mut fRec80: f32 = fRec84;
			self.fRec73[(self.IOTA & 2047) as usize] = fRec78;
			let mut fRec74: f32 = fRec89;
			let mut fRec75: f32 = fRec79;
			let mut fRec76: f32 = fRec80;
			self.fRec71[0] = fRec74;
			let mut fRec72: f32 = fRec76;
			self.iRec116[0] = 0;
			let mut iRec117: i32 = self.iRec116[1];
			let mut fRec120: f32 = ((self.iRec112[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec121[2]) + (0.150000006 * (self.fRec121[1] + self.fRec121[3])))));
			self.fRec135[0] = (fSlow10 + (0.999000013 * self.fRec135[1]));
			let mut fTemp160: f32 = (self.fRec135[0] + -0.109999999);
			let mut fTemp161: f32 = (self.fConst2 * (fTemp160 * fTemp0));
			let mut fTemp162: f32 = (fTemp161 + -1.49999499);
			let mut iTemp163: i32 = (fTemp162 as i32);
			let mut iTemp164: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp163) as f32)) as i32);
			let mut fTemp165: f32 = f32::floor(fTemp162);
			let mut fTemp166: f32 = (fTemp161 + (-1.0 - fTemp165));
			let mut fTemp167: f32 = (0.0 - fTemp166);
			let mut fTemp168: f32 = (fTemp161 + (-2.0 - fTemp165));
			let mut fTemp169: f32 = (0.0 - (0.5 * fTemp168));
			let mut fTemp170: f32 = (fTemp161 + (-3.0 - fTemp165));
			let mut fTemp171: f32 = (0.0 - (0.333333343 * fTemp170));
			let mut fTemp172: f32 = (fTemp161 + (-4.0 - fTemp165));
			let mut fTemp173: f32 = (0.0 - (0.25 * fTemp172));
			let mut fTemp174: f32 = (fTemp161 - fTemp165);
			let mut iTemp175: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp163 + 2)) as f32)) as i32);
			let mut fTemp176: f32 = (0.0 - fTemp170);
			let mut fTemp177: f32 = (0.0 - (0.5 * fTemp172));
			let mut iTemp178: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp163 + 1)) as f32)) as i32);
			let mut fTemp179: f32 = (0.0 - fTemp168);
			let mut fTemp180: f32 = (0.0 - (0.5 * fTemp170));
			let mut fTemp181: f32 = (0.0 - (0.333333343 * fTemp172));
			let mut fTemp182: f32 = (fTemp166 * fTemp168);
			let mut iTemp183: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp163 + 3)) as f32)) as i32);
			let mut fTemp184: f32 = (0.0 - fTemp172);
			let mut fTemp185: f32 = (fTemp182 * fTemp170);
			let mut iTemp186: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp163 + 4)) as f32)) as i32);
			self.fRec131[0] = (((((self.fRec108[((self.IOTA - (iTemp164 + 1)) & 2047) as usize] * fTemp167) * fTemp169) * fTemp171) * fTemp173) + (fTemp174 * ((((0.5 * (((fTemp166 * self.fRec108[((self.IOTA - (iTemp175 + 1)) & 2047) as usize]) * fTemp176) * fTemp177)) + (((self.fRec108[((self.IOTA - (iTemp178 + 1)) & 2047) as usize] * fTemp179) * fTemp180) * fTemp181)) + (0.166666672 * ((fTemp182 * self.fRec108[((self.IOTA - (iTemp183 + 1)) & 2047) as usize]) * fTemp184))) + (0.0416666679 * (fTemp185 * self.fRec108[((self.IOTA - (iTemp186 + 1)) & 2047) as usize])))));
			self.fRec136[0] = ((0.600000024 * self.fRec131[1]) + (0.400000006 * self.fRec136[1]));
			let mut fRec132: f32 = self.fRec136[0];
			self.iVec9[0] = iSlow12;
			let mut iTemp187: i32 = (((iSlow12 - self.iVec9[1]) > 0) as i32);
			self.fRec138[0] = self.fRec106[1];
			self.fRec139[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec138[2]) + (0.150000006 * (self.fRec138[1] + self.fRec138[3])))));
			let mut iRec140: i32 = 0;
			let mut fTemp188: f32 = (self.fConst2 * (fTemp160 * self.fRec29[0]));
			let mut fTemp189: f32 = (fTemp188 + -1.49999499);
			let mut iTemp190: i32 = (fTemp189 as i32);
			let mut iTemp191: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp190) as f32)) as i32);
			let mut fTemp192: f32 = f32::floor(fTemp189);
			let mut fTemp193: f32 = (fTemp188 + (-1.0 - fTemp192));
			let mut fTemp194: f32 = (0.0 - fTemp193);
			let mut fTemp195: f32 = (fTemp188 + (-2.0 - fTemp192));
			let mut fTemp196: f32 = (0.0 - (0.5 * fTemp195));
			let mut fTemp197: f32 = (fTemp188 + (-3.0 - fTemp192));
			let mut fTemp198: f32 = (0.0 - (0.333333343 * fTemp197));
			let mut fTemp199: f32 = (fTemp188 + (-4.0 - fTemp192));
			let mut fTemp200: f32 = (0.0 - (0.25 * fTemp199));
			let mut fTemp201: f32 = (fTemp188 - fTemp192);
			let mut iTemp202: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp190 + 2)) as f32)) as i32);
			let mut fTemp203: f32 = (0.0 - fTemp197);
			let mut fTemp204: f32 = (0.0 - (0.5 * fTemp199));
			let mut iTemp205: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp190 + 1)) as f32)) as i32);
			let mut fTemp206: f32 = (0.0 - fTemp195);
			let mut fTemp207: f32 = (0.0 - (0.5 * fTemp197));
			let mut fTemp208: f32 = (0.0 - (0.333333343 * fTemp199));
			let mut fTemp209: f32 = (fTemp193 * fTemp195);
			let mut iTemp210: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp190 + 3)) as f32)) as i32);
			let mut fTemp211: f32 = (0.0 - fTemp199);
			let mut fTemp212: f32 = (fTemp209 * fTemp197);
			let mut iTemp213: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp190 + 4)) as f32)) as i32);
			self.fVec10[0] = (((((self.fRec139[((self.IOTA - (iTemp191 + 2)) & 2047) as usize] * fTemp194) * fTemp196) * fTemp198) * fTemp200) + (fTemp201 * ((((0.5 * (((fTemp193 * self.fRec139[((self.IOTA - (iTemp202 + 2)) & 2047) as usize]) * fTemp203) * fTemp204)) + (((self.fRec139[((self.IOTA - (iTemp205 + 2)) & 2047) as usize] * fTemp206) * fTemp207) * fTemp208)) + (0.166666672 * ((fTemp209 * self.fRec139[((self.IOTA - (iTemp210 + 2)) & 2047) as usize]) * fTemp211))) + (0.0416666679 * (fTemp212 * self.fRec139[((self.IOTA - (iTemp213 + 2)) & 2047) as usize])))));
			self.fVec11[0] = ((iTemp187 as f32) + self.fVec10[1]);
			self.fRec137[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec137[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec11[1]));
			let mut fRec133: f32 = (((((fTemp167 * fTemp169) * fTemp171) * fTemp173) * self.fRec137[((self.IOTA - iTemp164) & 2047) as usize]) + (fTemp174 * ((0.0416666679 * (fTemp185 * self.fRec137[((self.IOTA - iTemp186) & 2047) as usize])) + (((((fTemp179 * fTemp180) * fTemp181) * self.fRec137[((self.IOTA - iTemp178) & 2047) as usize]) + (0.5 * (((fTemp166 * fTemp176) * fTemp177) * self.fRec137[((self.IOTA - iTemp175) & 2047) as usize]))) + (0.166666672 * ((fTemp182 * fTemp184) * self.fRec137[((self.IOTA - iTemp183) & 2047) as usize]))))));
			let mut iRec134: i32 = iRec140;
			self.fRec127[0] = fRec132;
			let mut fRec128: f32 = ((iTemp187 as f32) + self.fRec127[1]);
			let mut fRec129: f32 = fRec133;
			let mut iRec130: i32 = iRec134;
			self.fRec123[(self.IOTA & 2047) as usize] = fRec128;
			let mut fRec124: f32 = (((((fTemp194 * fTemp196) * fTemp198) * fTemp200) * self.fRec123[((self.IOTA - (iTemp191 + 1)) & 2047) as usize]) + (fTemp201 * (((0.166666672 * ((fTemp209 * fTemp211) * self.fRec123[((self.IOTA - (iTemp210 + 1)) & 2047) as usize])) + ((((fTemp206 * fTemp207) * fTemp208) * self.fRec123[((self.IOTA - (iTemp205 + 1)) & 2047) as usize]) + (0.5 * (((fTemp193 * fTemp203) * fTemp204) * self.fRec123[((self.IOTA - (iTemp202 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp212 * self.fRec123[((self.IOTA - (iTemp213 + 1)) & 2047) as usize])))));
			self.fRec125[0] = fRec129;
			let mut iRec126: i32 = iRec130;
			self.fRec121[0] = self.fRec125[1];
			let mut iRec122: i32 = iRec126;
			let mut fRec118: f32 = self.fRec121[1];
			let mut fRec119: f32 = (self.fRec121[1] + (iRec122 as f32));
			self.iRec112[0] = iRec117;
			let mut fRec113: f32 = fRec120;
			let mut fRec114: f32 = fRec118;
			let mut fRec115: f32 = fRec119;
			self.fRec108[(self.IOTA & 2047) as usize] = fRec113;
			let mut fRec109: f32 = fRec124;
			let mut fRec110: f32 = fRec114;
			let mut fRec111: f32 = fRec115;
			self.fRec106[0] = fRec109;
			let mut fRec107: f32 = fRec111;
			self.iRec151[0] = 0;
			let mut iRec152: i32 = self.iRec151[1];
			let mut fRec155: f32 = ((self.iRec147[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec156[2]) + (0.150000006 * (self.fRec156[1] + self.fRec156[3])))));
			self.fRec170[0] = (fSlow13 + (0.999000013 * self.fRec170[1]));
			let mut fTemp214: f32 = (self.fRec170[0] + -0.109999999);
			let mut fTemp215: f32 = (self.fConst2 * (fTemp214 * fTemp0));
			let mut fTemp216: f32 = (fTemp215 + -1.49999499);
			let mut iTemp217: i32 = (fTemp216 as i32);
			let mut iTemp218: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp217) as f32)) as i32);
			let mut fTemp219: f32 = f32::floor(fTemp216);
			let mut fTemp220: f32 = (fTemp215 + (-1.0 - fTemp219));
			let mut fTemp221: f32 = (0.0 - fTemp220);
			let mut fTemp222: f32 = (fTemp215 + (-2.0 - fTemp219));
			let mut fTemp223: f32 = (0.0 - (0.5 * fTemp222));
			let mut fTemp224: f32 = (fTemp215 + (-3.0 - fTemp219));
			let mut fTemp225: f32 = (0.0 - (0.333333343 * fTemp224));
			let mut fTemp226: f32 = (fTemp215 + (-4.0 - fTemp219));
			let mut fTemp227: f32 = (0.0 - (0.25 * fTemp226));
			let mut fTemp228: f32 = (fTemp215 - fTemp219);
			let mut iTemp229: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp217 + 2)) as f32)) as i32);
			let mut fTemp230: f32 = (0.0 - fTemp224);
			let mut fTemp231: f32 = (0.0 - (0.5 * fTemp226));
			let mut iTemp232: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp217 + 1)) as f32)) as i32);
			let mut fTemp233: f32 = (0.0 - fTemp222);
			let mut fTemp234: f32 = (0.0 - (0.5 * fTemp224));
			let mut fTemp235: f32 = (0.0 - (0.333333343 * fTemp226));
			let mut fTemp236: f32 = (fTemp220 * fTemp222);
			let mut iTemp237: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp217 + 3)) as f32)) as i32);
			let mut fTemp238: f32 = (0.0 - fTemp226);
			let mut fTemp239: f32 = (fTemp236 * fTemp224);
			let mut iTemp240: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp217 + 4)) as f32)) as i32);
			self.fRec166[0] = (((((self.fRec143[((self.IOTA - (iTemp218 + 1)) & 2047) as usize] * fTemp221) * fTemp223) * fTemp225) * fTemp227) + (fTemp228 * ((((0.5 * (((fTemp220 * self.fRec143[((self.IOTA - (iTemp229 + 1)) & 2047) as usize]) * fTemp230) * fTemp231)) + (((self.fRec143[((self.IOTA - (iTemp232 + 1)) & 2047) as usize] * fTemp233) * fTemp234) * fTemp235)) + (0.166666672 * ((fTemp236 * self.fRec143[((self.IOTA - (iTemp237 + 1)) & 2047) as usize]) * fTemp238))) + (0.0416666679 * (fTemp239 * self.fRec143[((self.IOTA - (iTemp240 + 1)) & 2047) as usize])))));
			self.fRec171[0] = ((0.600000024 * self.fRec166[1]) + (0.400000006 * self.fRec171[1]));
			let mut fRec167: f32 = self.fRec171[0];
			self.iVec12[0] = iSlow15;
			let mut iTemp241: i32 = (((iSlow15 - self.iVec12[1]) > 0) as i32);
			self.fRec173[0] = self.fRec141[1];
			self.fRec174[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec173[2]) + (0.150000006 * (self.fRec173[1] + self.fRec173[3])))));
			let mut iRec175: i32 = 0;
			let mut fTemp242: f32 = (self.fConst2 * (fTemp214 * self.fRec29[0]));
			let mut fTemp243: f32 = (fTemp242 + -1.49999499);
			let mut iTemp244: i32 = (fTemp243 as i32);
			let mut iTemp245: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp244) as f32)) as i32);
			let mut fTemp246: f32 = f32::floor(fTemp243);
			let mut fTemp247: f32 = (fTemp242 + (-1.0 - fTemp246));
			let mut fTemp248: f32 = (0.0 - fTemp247);
			let mut fTemp249: f32 = (fTemp242 + (-2.0 - fTemp246));
			let mut fTemp250: f32 = (0.0 - (0.5 * fTemp249));
			let mut fTemp251: f32 = (fTemp242 + (-3.0 - fTemp246));
			let mut fTemp252: f32 = (0.0 - (0.333333343 * fTemp251));
			let mut fTemp253: f32 = (fTemp242 + (-4.0 - fTemp246));
			let mut fTemp254: f32 = (0.0 - (0.25 * fTemp253));
			let mut fTemp255: f32 = (fTemp242 - fTemp246);
			let mut iTemp256: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp244 + 2)) as f32)) as i32);
			let mut fTemp257: f32 = (0.0 - fTemp251);
			let mut fTemp258: f32 = (0.0 - (0.5 * fTemp253));
			let mut iTemp259: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp244 + 1)) as f32)) as i32);
			let mut fTemp260: f32 = (0.0 - fTemp249);
			let mut fTemp261: f32 = (0.0 - (0.5 * fTemp251));
			let mut fTemp262: f32 = (0.0 - (0.333333343 * fTemp253));
			let mut fTemp263: f32 = (fTemp247 * fTemp249);
			let mut iTemp264: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp244 + 3)) as f32)) as i32);
			let mut fTemp265: f32 = (0.0 - fTemp253);
			let mut fTemp266: f32 = (fTemp263 * fTemp251);
			let mut iTemp267: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp244 + 4)) as f32)) as i32);
			self.fVec13[0] = (((((self.fRec174[((self.IOTA - (iTemp245 + 2)) & 2047) as usize] * fTemp248) * fTemp250) * fTemp252) * fTemp254) + (fTemp255 * ((((0.5 * (((fTemp247 * self.fRec174[((self.IOTA - (iTemp256 + 2)) & 2047) as usize]) * fTemp257) * fTemp258)) + (((self.fRec174[((self.IOTA - (iTemp259 + 2)) & 2047) as usize] * fTemp260) * fTemp261) * fTemp262)) + (0.166666672 * ((fTemp263 * self.fRec174[((self.IOTA - (iTemp264 + 2)) & 2047) as usize]) * fTemp265))) + (0.0416666679 * (fTemp266 * self.fRec174[((self.IOTA - (iTemp267 + 2)) & 2047) as usize])))));
			self.fVec14[0] = ((iTemp241 as f32) + self.fVec13[1]);
			self.fRec172[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec172[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec14[1]));
			let mut fRec168: f32 = (((((fTemp221 * fTemp223) * fTemp225) * fTemp227) * self.fRec172[((self.IOTA - iTemp218) & 2047) as usize]) + (fTemp228 * ((0.0416666679 * (fTemp239 * self.fRec172[((self.IOTA - iTemp240) & 2047) as usize])) + (((((fTemp233 * fTemp234) * fTemp235) * self.fRec172[((self.IOTA - iTemp232) & 2047) as usize]) + (0.5 * (((fTemp220 * fTemp230) * fTemp231) * self.fRec172[((self.IOTA - iTemp229) & 2047) as usize]))) + (0.166666672 * ((fTemp236 * fTemp238) * self.fRec172[((self.IOTA - iTemp237) & 2047) as usize]))))));
			let mut iRec169: i32 = iRec175;
			self.fRec162[0] = fRec167;
			let mut fRec163: f32 = ((iTemp241 as f32) + self.fRec162[1]);
			let mut fRec164: f32 = fRec168;
			let mut iRec165: i32 = iRec169;
			self.fRec158[(self.IOTA & 2047) as usize] = fRec163;
			let mut fRec159: f32 = (((((fTemp248 * fTemp250) * fTemp252) * fTemp254) * self.fRec158[((self.IOTA - (iTemp245 + 1)) & 2047) as usize]) + (fTemp255 * (((0.166666672 * ((fTemp263 * fTemp265) * self.fRec158[((self.IOTA - (iTemp264 + 1)) & 2047) as usize])) + ((((fTemp260 * fTemp261) * fTemp262) * self.fRec158[((self.IOTA - (iTemp259 + 1)) & 2047) as usize]) + (0.5 * (((fTemp247 * fTemp257) * fTemp258) * self.fRec158[((self.IOTA - (iTemp256 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp266 * self.fRec158[((self.IOTA - (iTemp267 + 1)) & 2047) as usize])))));
			self.fRec160[0] = fRec164;
			let mut iRec161: i32 = iRec165;
			self.fRec156[0] = self.fRec160[1];
			let mut iRec157: i32 = iRec161;
			let mut fRec153: f32 = self.fRec156[1];
			let mut fRec154: f32 = (self.fRec156[1] + (iRec157 as f32));
			self.iRec147[0] = iRec152;
			let mut fRec148: f32 = fRec155;
			let mut fRec149: f32 = fRec153;
			let mut fRec150: f32 = fRec154;
			self.fRec143[(self.IOTA & 2047) as usize] = fRec148;
			let mut fRec144: f32 = fRec159;
			let mut fRec145: f32 = fRec149;
			let mut fRec146: f32 = fRec150;
			self.fRec141[0] = fRec144;
			let mut fRec142: f32 = fRec146;
			self.iRec186[0] = 0;
			let mut iRec187: i32 = self.iRec186[1];
			let mut fRec190: f32 = ((self.iRec182[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec191[2]) + (0.150000006 * (self.fRec191[1] + self.fRec191[3])))));
			self.fRec205[0] = (fSlow16 + (0.999000013 * self.fRec205[1]));
			let mut fTemp268: f32 = (self.fRec205[0] + -0.109999999);
			let mut fTemp269: f32 = (self.fConst2 * (fTemp268 * fTemp0));
			let mut fTemp270: f32 = (fTemp269 + -1.49999499);
			let mut iTemp271: i32 = (fTemp270 as i32);
			let mut iTemp272: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp271) as f32)) as i32);
			let mut fTemp273: f32 = f32::floor(fTemp270);
			let mut fTemp274: f32 = (fTemp269 + (-1.0 - fTemp273));
			let mut fTemp275: f32 = (0.0 - fTemp274);
			let mut fTemp276: f32 = (fTemp269 + (-2.0 - fTemp273));
			let mut fTemp277: f32 = (0.0 - (0.5 * fTemp276));
			let mut fTemp278: f32 = (fTemp269 + (-3.0 - fTemp273));
			let mut fTemp279: f32 = (0.0 - (0.333333343 * fTemp278));
			let mut fTemp280: f32 = (fTemp269 + (-4.0 - fTemp273));
			let mut fTemp281: f32 = (0.0 - (0.25 * fTemp280));
			let mut fTemp282: f32 = (fTemp269 - fTemp273);
			let mut iTemp283: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp271 + 2)) as f32)) as i32);
			let mut fTemp284: f32 = (0.0 - fTemp278);
			let mut fTemp285: f32 = (0.0 - (0.5 * fTemp280));
			let mut iTemp286: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp271 + 1)) as f32)) as i32);
			let mut fTemp287: f32 = (0.0 - fTemp276);
			let mut fTemp288: f32 = (0.0 - (0.5 * fTemp278));
			let mut fTemp289: f32 = (0.0 - (0.333333343 * fTemp280));
			let mut fTemp290: f32 = (fTemp274 * fTemp276);
			let mut iTemp291: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp271 + 3)) as f32)) as i32);
			let mut fTemp292: f32 = (0.0 - fTemp280);
			let mut fTemp293: f32 = (fTemp290 * fTemp278);
			let mut iTemp294: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp271 + 4)) as f32)) as i32);
			self.fRec201[0] = (((((self.fRec178[((self.IOTA - (iTemp272 + 1)) & 2047) as usize] * fTemp275) * fTemp277) * fTemp279) * fTemp281) + (fTemp282 * ((((0.5 * (((fTemp274 * self.fRec178[((self.IOTA - (iTemp283 + 1)) & 2047) as usize]) * fTemp284) * fTemp285)) + (((self.fRec178[((self.IOTA - (iTemp286 + 1)) & 2047) as usize] * fTemp287) * fTemp288) * fTemp289)) + (0.166666672 * ((fTemp290 * self.fRec178[((self.IOTA - (iTemp291 + 1)) & 2047) as usize]) * fTemp292))) + (0.0416666679 * (fTemp293 * self.fRec178[((self.IOTA - (iTemp294 + 1)) & 2047) as usize])))));
			self.fRec206[0] = ((0.600000024 * self.fRec201[1]) + (0.400000006 * self.fRec206[1]));
			let mut fRec202: f32 = self.fRec206[0];
			self.iVec15[0] = iSlow18;
			let mut iTemp295: i32 = (((iSlow18 - self.iVec15[1]) > 0) as i32);
			self.fRec208[0] = self.fRec176[1];
			self.fRec209[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec208[2]) + (0.150000006 * (self.fRec208[1] + self.fRec208[3])))));
			let mut iRec210: i32 = 0;
			let mut fTemp296: f32 = (self.fConst2 * (fTemp268 * self.fRec29[0]));
			let mut fTemp297: f32 = (fTemp296 + -1.49999499);
			let mut iTemp298: i32 = (fTemp297 as i32);
			let mut iTemp299: i32 = (f32::min(self.fConst1, (std::cmp::max(0, iTemp298) as f32)) as i32);
			let mut fTemp300: f32 = f32::floor(fTemp297);
			let mut fTemp301: f32 = (fTemp296 + (-1.0 - fTemp300));
			let mut fTemp302: f32 = (0.0 - fTemp301);
			let mut fTemp303: f32 = (fTemp296 + (-2.0 - fTemp300));
			let mut fTemp304: f32 = (0.0 - (0.5 * fTemp303));
			let mut fTemp305: f32 = (fTemp296 + (-3.0 - fTemp300));
			let mut fTemp306: f32 = (0.0 - (0.333333343 * fTemp305));
			let mut fTemp307: f32 = (fTemp296 + (-4.0 - fTemp300));
			let mut fTemp308: f32 = (0.0 - (0.25 * fTemp307));
			let mut fTemp309: f32 = (fTemp296 - fTemp300);
			let mut iTemp310: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp298 + 2)) as f32)) as i32);
			let mut fTemp311: f32 = (0.0 - fTemp305);
			let mut fTemp312: f32 = (0.0 - (0.5 * fTemp307));
			let mut iTemp313: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp298 + 1)) as f32)) as i32);
			let mut fTemp314: f32 = (0.0 - fTemp303);
			let mut fTemp315: f32 = (0.0 - (0.5 * fTemp305));
			let mut fTemp316: f32 = (0.0 - (0.333333343 * fTemp307));
			let mut fTemp317: f32 = (fTemp301 * fTemp303);
			let mut iTemp318: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp298 + 3)) as f32)) as i32);
			let mut fTemp319: f32 = (0.0 - fTemp307);
			let mut fTemp320: f32 = (fTemp317 * fTemp305);
			let mut iTemp321: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp298 + 4)) as f32)) as i32);
			self.fVec16[0] = (((((self.fRec209[((self.IOTA - (iTemp299 + 2)) & 2047) as usize] * fTemp302) * fTemp304) * fTemp306) * fTemp308) + (fTemp309 * ((((0.5 * (((fTemp301 * self.fRec209[((self.IOTA - (iTemp310 + 2)) & 2047) as usize]) * fTemp311) * fTemp312)) + (((self.fRec209[((self.IOTA - (iTemp313 + 2)) & 2047) as usize] * fTemp314) * fTemp315) * fTemp316)) + (0.166666672 * ((fTemp317 * self.fRec209[((self.IOTA - (iTemp318 + 2)) & 2047) as usize]) * fTemp319))) + (0.0416666679 * (fTemp320 * self.fRec209[((self.IOTA - (iTemp321 + 2)) & 2047) as usize])))));
			self.fVec17[0] = ((iTemp295 as f32) + self.fVec16[1]);
			self.fRec207[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec207[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec17[1]));
			let mut fRec203: f32 = (((((fTemp275 * fTemp277) * fTemp279) * fTemp281) * self.fRec207[((self.IOTA - iTemp272) & 2047) as usize]) + (fTemp282 * ((0.0416666679 * (fTemp293 * self.fRec207[((self.IOTA - iTemp294) & 2047) as usize])) + (((((fTemp287 * fTemp288) * fTemp289) * self.fRec207[((self.IOTA - iTemp286) & 2047) as usize]) + (0.5 * (((fTemp274 * fTemp284) * fTemp285) * self.fRec207[((self.IOTA - iTemp283) & 2047) as usize]))) + (0.166666672 * ((fTemp290 * fTemp292) * self.fRec207[((self.IOTA - iTemp291) & 2047) as usize]))))));
			let mut iRec204: i32 = iRec210;
			self.fRec197[0] = fRec202;
			let mut fRec198: f32 = ((iTemp295 as f32) + self.fRec197[1]);
			let mut fRec199: f32 = fRec203;
			let mut iRec200: i32 = iRec204;
			self.fRec193[(self.IOTA & 2047) as usize] = fRec198;
			let mut fRec194: f32 = (((((fTemp302 * fTemp304) * fTemp306) * fTemp308) * self.fRec193[((self.IOTA - (iTemp299 + 1)) & 2047) as usize]) + (fTemp309 * (((0.166666672 * ((fTemp317 * fTemp319) * self.fRec193[((self.IOTA - (iTemp318 + 1)) & 2047) as usize])) + ((((fTemp314 * fTemp315) * fTemp316) * self.fRec193[((self.IOTA - (iTemp313 + 1)) & 2047) as usize]) + (0.5 * (((fTemp301 * fTemp311) * fTemp312) * self.fRec193[((self.IOTA - (iTemp310 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp320 * self.fRec193[((self.IOTA - (iTemp321 + 1)) & 2047) as usize])))));
			self.fRec195[0] = fRec199;
			let mut iRec196: i32 = iRec200;
			self.fRec191[0] = self.fRec195[1];
			let mut iRec192: i32 = iRec196;
			let mut fRec188: f32 = self.fRec191[1];
			let mut fRec189: f32 = (self.fRec191[1] + (iRec192 as f32));
			self.iRec182[0] = iRec187;
			let mut fRec183: f32 = fRec190;
			let mut fRec184: f32 = fRec188;
			let mut fRec185: f32 = fRec189;
			self.fRec178[(self.IOTA & 2047) as usize] = fRec183;
			let mut fRec179: f32 = fRec194;
			let mut fRec180: f32 = fRec184;
			let mut fRec181: f32 = fRec185;
			self.fRec176[0] = fRec179;
			let mut fRec177: f32 = fRec181;
			let mut fTemp322: f32 = (((((fRec1 + fRec37) + fRec72) + fRec107) + fRec142) + fRec177);
			outputs[0][i as usize] = (fTemp322 as f32);
			outputs[1][i as usize] = (fTemp322 as f32);
			self.iRec10[1] = self.iRec10[0];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec31[1] = self.fRec31[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec33[j0 as usize] = self.fRec33[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec0[1] = self.fVec0[0];
			self.iVec1[1] = self.iVec1[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec19[1] = self.fRec19[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec15[j1 as usize] = self.fRec15[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.iRec6[1] = self.iRec6[0];
			self.fRec0[1] = self.fRec0[0];
			self.iRec46[1] = self.iRec46[0];
			self.fRec65[1] = self.fRec65[0];
			self.fRec61[1] = self.fRec61[0];
			self.fRec66[1] = self.fRec66[0];
			self.iVec3[1] = self.iVec3[0];
			let mut j2: i32 = 3;
			loop {
				self.fRec68[j2 as usize] = self.fRec68[(j2 - 1) as usize];
				j2 = (j2 - 1);
				if (j2 > 0) { continue; } else { break; }
			}
			self.fVec4[1] = self.fVec4[0];
			self.fVec5[1] = self.fVec5[0];
			self.fRec57[1] = self.fRec57[0];
			self.fRec55[1] = self.fRec55[0];
			let mut j3: i32 = 3;
			loop {
				self.fRec51[j3 as usize] = self.fRec51[(j3 - 1) as usize];
				j3 = (j3 - 1);
				if (j3 > 0) { continue; } else { break; }
			}
			self.iRec42[1] = self.iRec42[0];
			self.fRec36[1] = self.fRec36[0];
			self.iRec81[1] = self.iRec81[0];
			self.fRec100[1] = self.fRec100[0];
			self.fRec96[1] = self.fRec96[0];
			self.fRec101[1] = self.fRec101[0];
			self.iVec6[1] = self.iVec6[0];
			let mut j4: i32 = 3;
			loop {
				self.fRec103[j4 as usize] = self.fRec103[(j4 - 1) as usize];
				j4 = (j4 - 1);
				if (j4 > 0) { continue; } else { break; }
			}
			self.fVec7[1] = self.fVec7[0];
			self.fVec8[1] = self.fVec8[0];
			self.fRec92[1] = self.fRec92[0];
			self.fRec90[1] = self.fRec90[0];
			let mut j5: i32 = 3;
			loop {
				self.fRec86[j5 as usize] = self.fRec86[(j5 - 1) as usize];
				j5 = (j5 - 1);
				if (j5 > 0) { continue; } else { break; }
			}
			self.iRec77[1] = self.iRec77[0];
			self.fRec71[1] = self.fRec71[0];
			self.iRec116[1] = self.iRec116[0];
			self.fRec135[1] = self.fRec135[0];
			self.fRec131[1] = self.fRec131[0];
			self.fRec136[1] = self.fRec136[0];
			self.iVec9[1] = self.iVec9[0];
			let mut j6: i32 = 3;
			loop {
				self.fRec138[j6 as usize] = self.fRec138[(j6 - 1) as usize];
				j6 = (j6 - 1);
				if (j6 > 0) { continue; } else { break; }
			}
			self.fVec10[1] = self.fVec10[0];
			self.fVec11[1] = self.fVec11[0];
			self.fRec127[1] = self.fRec127[0];
			self.fRec125[1] = self.fRec125[0];
			let mut j7: i32 = 3;
			loop {
				self.fRec121[j7 as usize] = self.fRec121[(j7 - 1) as usize];
				j7 = (j7 - 1);
				if (j7 > 0) { continue; } else { break; }
			}
			self.iRec112[1] = self.iRec112[0];
			self.fRec106[1] = self.fRec106[0];
			self.iRec151[1] = self.iRec151[0];
			self.fRec170[1] = self.fRec170[0];
			self.fRec166[1] = self.fRec166[0];
			self.fRec171[1] = self.fRec171[0];
			self.iVec12[1] = self.iVec12[0];
			let mut j8: i32 = 3;
			loop {
				self.fRec173[j8 as usize] = self.fRec173[(j8 - 1) as usize];
				j8 = (j8 - 1);
				if (j8 > 0) { continue; } else { break; }
			}
			self.fVec13[1] = self.fVec13[0];
			self.fVec14[1] = self.fVec14[0];
			self.fRec162[1] = self.fRec162[0];
			self.fRec160[1] = self.fRec160[0];
			let mut j9: i32 = 3;
			loop {
				self.fRec156[j9 as usize] = self.fRec156[(j9 - 1) as usize];
				j9 = (j9 - 1);
				if (j9 > 0) { continue; } else { break; }
			}
			self.iRec147[1] = self.iRec147[0];
			self.fRec141[1] = self.fRec141[0];
			self.iRec186[1] = self.iRec186[0];
			self.fRec205[1] = self.fRec205[0];
			self.fRec201[1] = self.fRec201[0];
			self.fRec206[1] = self.fRec206[0];
			self.iVec15[1] = self.iVec15[0];
			let mut j10: i32 = 3;
			loop {
				self.fRec208[j10 as usize] = self.fRec208[(j10 - 1) as usize];
				j10 = (j10 - 1);
				if (j10 > 0) { continue; } else { break; }
			}
			self.fVec16[1] = self.fVec16[0];
			self.fVec17[1] = self.fVec17[0];
			self.fRec197[1] = self.fRec197[0];
			self.fRec195[1] = self.fRec195[0];
			let mut j11: i32 = 3;
			loop {
				self.fRec191[j11 as usize] = self.fRec191[(j11 - 1) as usize];
				j11 = (j11 - 1);
				if (j11 > 0) { continue; } else { break; }
			}
			self.iRec182[1] = self.iRec182[0];
			self.fRec176[1] = self.fRec176[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

