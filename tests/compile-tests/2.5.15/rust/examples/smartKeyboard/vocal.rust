
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iVec0: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider1: f32,
	fRec3: [f32;2],
	fHslider2: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fRec4: [f32;2],
	fConst5: f32,
	fRec5: [f32;2],
	fRec1: [f32;2],
	fConst6: f32,
	fHslider3: f32,
	fRec6: [f32;2],
	fRec0: [f32;3],
	fRec7: [f32;2],
	fRec8: [f32;2],
	fRec9: [f32;2],
	fRec10: [f32;3],
	fRec11: [f32;3],
	fRec12: [f32;3],
	fRec13: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iVec0: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			fRec3: [0.0;2],
			fHslider2: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fRec4: [0.0;2],
			fConst5: 0.0,
			fRec5: [0.0;2],
			fRec1: [0.0;2],
			fConst6: 0.0,
			fHslider3: 0.0,
			fRec6: [0.0;2],
			fRec0: [0.0;3],
			fRec7: [0.0;2],
			fRec8: [0.0;2],
			fRec9: [0.0;2],
			fRec10: [0.0;3],
			fRec11: [0.0;3],
			fRec12: [0.0;3],
			fRec13: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'1',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'1',  'Keyboard 0 - Send Freq':'0',  'Keyboard 0 - Static Mode':'1',  'Keyboard 0 - Send X':'1',  'Keyboard 0 - Piano Keyboard':'0' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "vocal");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.25;
		self.fHslider1 = 0.5;
		self.fHslider2 = 0.0500000007;
		self.fHslider3 = 2.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec3[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec4[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec5[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec6[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec7[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec9[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec10[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec11[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec12[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec13[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1.0 / self.fConst0);
		self.fConst2 = (37.6991119 / self.fConst0);
		self.fConst3 = f32::sin(self.fConst2);
		self.fConst4 = f32::cos(self.fConst2);
		self.fConst5 = (0.0 - self.fConst3);
		self.fConst6 = (3.14159274 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("vocal");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider0, 0.25, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "acc", "1 0 -10 0 10");
		ui_interface.addHorizontalSlider("vibrato", &mut self.fHslider2, 0.050000000000000003, 0.0, 0.10000000000000001, 0.01);
		ui_interface.declare(&mut self.fHslider3, "acc", "0 0 -10 0 10");
		ui_interface.addHorizontalSlider("vowel", &mut self.fHslider3, 2.0, 0.0, 4.0, 0.01);
		ui_interface.addHorizontalSlider("x", &mut self.fHslider1, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.00100000005 * (self.fHslider1 as f32));
		let mut fSlow2: f32 = (self.fHslider2 as f32);
		let mut fSlow3: f32 = (0.00100000005 * (self.fHslider3 as f32));
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec3[0] = (fSlow1 + (0.999000013 * self.fRec3[1]));
			self.fRec4[0] = ((self.fConst3 * self.fRec5[1]) + (self.fConst4 * self.fRec4[1]));
			let mut iTemp0: i32 = (1 - self.iVec0[1]);
			self.fRec5[0] = (((self.fConst4 * self.fRec5[1]) + (self.fConst5 * self.fRec4[1])) + (iTemp0 as f32));
			let mut fTemp1: f32 = f32::max(1.00000001e-07, f32::abs((((200.0 * self.fRec3[0]) + 50.0) * ((fSlow2 * self.fRec4[0]) + 1.0))));
			let mut fTemp2: f32 = (self.fRec1[1] + (self.fConst1 * fTemp1));
			let mut fTemp3: f32 = (fTemp2 + -1.0);
			let mut iTemp4: i32 = ((fTemp3 < 0.0) as i32);
			self.fRec1[0] = if (iTemp4 as i32 == 1) { fTemp2 } else { fTemp3 };
			let mut fRec2: f32 = if (iTemp4 as i32 == 1) { fTemp2 } else { (fTemp2 + (fTemp3 * (1.0 - (self.fConst0 / fTemp1)))) };
			let mut fTemp5: f32 = (fSlow0 * ((2.0 * fRec2) + -1.0));
			self.fRec6[0] = (fSlow3 + (0.999000013 * self.fRec6[1]));
			let mut fTemp6: f32 = (self.fRec6[0] + 5.0);
			let mut iTemp7: i32 = ((fTemp6 < 23.0) as i32);
			let mut iTemp8: i32 = ((fTemp6 < 24.0) as i32);
			let mut fTemp9: f32 = (self.fRec6[0] + -18.0);
			let mut iTemp10: i32 = ((fTemp6 < 22.0) as i32);
			let mut fTemp11: f32 = (self.fRec6[0] + -17.0);
			let mut iTemp12: i32 = ((fTemp6 < 21.0) as i32);
			let mut fTemp13: f32 = (self.fRec6[0] + -16.0);
			let mut iTemp14: i32 = ((fTemp6 < 20.0) as i32);
			let mut fTemp15: f32 = (self.fRec6[0] + -15.0);
			let mut iTemp16: i32 = ((fTemp6 < 19.0) as i32);
			let mut fTemp17: f32 = (self.fRec6[0] + -14.0);
			let mut iTemp18: i32 = ((fTemp6 < 18.0) as i32);
			let mut iTemp19: i32 = ((fTemp6 < 17.0) as i32);
			let mut iTemp20: i32 = ((fTemp6 < 16.0) as i32);
			let mut iTemp21: i32 = ((fTemp6 < 15.0) as i32);
			let mut iTemp22: i32 = ((fTemp6 < 14.0) as i32);
			let mut fTemp23: f32 = (self.fRec6[0] + -9.0);
			let mut iTemp24: i32 = ((fTemp6 < 13.0) as i32);
			let mut fTemp25: f32 = (self.fRec6[0] + -8.0);
			let mut iTemp26: i32 = ((fTemp6 < 12.0) as i32);
			let mut fTemp27: f32 = (self.fRec6[0] + -7.0);
			let mut iTemp28: i32 = ((fTemp6 < 11.0) as i32);
			let mut fTemp29: f32 = (self.fRec6[0] + -6.0);
			let mut iTemp30: i32 = ((fTemp6 < 10.0) as i32);
			let mut fTemp31: f32 = (self.fRec6[0] + -5.0);
			let mut fTemp32: f32 = (50.0 * fTemp31);
			let mut iTemp33: i32 = ((fTemp6 < 9.0) as i32);
			let mut fTemp34: f32 = (self.fRec6[0] + -4.0);
			let mut iTemp35: i32 = ((fTemp6 < 8.0) as i32);
			let mut fTemp36: f32 = (self.fRec6[0] + -3.0);
			let mut fTemp37: f32 = (50.0 * fTemp36);
			let mut iTemp38: i32 = ((fTemp6 < 7.0) as i32);
			let mut fTemp39: f32 = (self.fRec6[0] + -2.0);
			let mut iTemp40: i32 = ((fTemp6 < 6.0) as i32);
			let mut fTemp41: f32 = (self.fRec6[0] + -1.0);
			let mut iTemp42: i32 = ((fTemp6 < 5.0) as i32);
			let mut fTemp43: f32 = (350.0 * self.fRec6[0]);
			let mut iTemp44: i32 = ((fTemp6 < 4.0) as i32);
			let mut fTemp45: f32 = (self.fRec6[0] + 1.0);
			let mut fTemp46: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { 4950.0 } else { if (iTemp42 as i32 == 1) { (4950.0 - (2200.0 * fTemp45)) } else { 2750.0 } } } else { if (iTemp40 as i32 == 1) { (fTemp43 + 2750.0) } else { 3100.0 } } } else { if (iTemp38 as i32 == 1) { ((240.0 * fTemp41) + 3100.0) } else { 3340.0 } } } else { if (iTemp35 as i32 == 1) { (3340.0 - (440.0 * fTemp39)) } else { 2900.0 } } } else { if (iTemp33 as i32 == 1) { (fTemp37 + 2900.0) } else { 2950.0 } } } else { if (iTemp30 as i32 == 1) { ((400.0 * fTemp34) + 2950.0) } else { 3350.0 } } } else { if (iTemp28 as i32 == 1) { (3350.0 - fTemp32) } else { 3300.0 } } } else { if (iTemp26 as i32 == 1) { ((290.0 * fTemp29) + 3300.0) } else { 3590.0 } } } else { if (iTemp24 as i32 == 1) { (3590.0 - (290.0 * fTemp27)) } else { 3300.0 } } } else { if (iTemp22 as i32 == 1) { ((100.0 * fTemp25) + 3300.0) } else { 3400.0 } } } else { if (iTemp21 as i32 == 1) { ((1550.0 * fTemp23) + 3400.0) } else { 4950.0 } } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { if (iTemp14 as i32 == 1) { (4950.0 - (1700.0 * fTemp17)) } else { 3250.0 } } } else { if (iTemp12 as i32 == 1) { ((330.0 * fTemp15) + 3250.0) } else { 3580.0 } } } else { if (iTemp10 as i32 == 1) { (3580.0 - (40.0 * fTemp13)) } else { 3540.0 } } } else { if (iTemp7 as i32 == 1) { (3540.0 - (540.0 * fTemp11)) } else { 3000.0 } } } else { if (iTemp8 as i32 == 1) { ((300.0 * fTemp9) + 3000.0) } else { 3300.0 } };
			let mut fTemp47: f32 = f32::tan((self.fConst6 * fTemp46));
			let mut fTemp48: f32 = (1.0 / fTemp47);
			let mut fTemp49: f32 = (20.0 * fTemp15);
			let mut fTemp50: f32 = (self.fRec6[0] + -13.0);
			let mut fTemp51: f32 = (self.fRec6[0] + -11.0);
			let mut fTemp52: f32 = (80.0 * fTemp51);
			let mut fTemp53: f32 = (self.fRec6[0] + -10.0);
			let mut fTemp54: f32 = (20.0 * fTemp23);
			let mut fTemp55: f32 = (20.0 * fTemp31);
			let mut fTemp56: f32 = (20.0 * fTemp34);
			let mut fTemp57: f32 = (10.0 * self.fRec6[0]);
			let mut iTemp58: i32 = ((fTemp6 < 3.0) as i32);
			let mut fTemp59: f32 = (self.fRec6[0] + 2.0);
			let mut iTemp60: i32 = ((fTemp6 < 2.0) as i32);
			let mut fTemp61: f32 = (self.fRec6[0] + 3.0);
			let mut iTemp62: i32 = ((fTemp6 < 1.0) as i32);
			let mut iTemp63: i32 = ((fTemp6 < 0.0) as i32);
			let mut fTemp64: f32 = (if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 140.0 } else { if (iTemp62 as i32 == 1) { ((60.0 * fTemp6) + 140.0) } else { 200.0 } } } else { 200.0 } } else { if (iTemp58 as i32 == 1) { (200.0 - (65.0 * fTemp61)) } else { 135.0 } } } else { if (iTemp44 as i32 == 1) { ((65.0 * fTemp59) + 135.0) } else { 200.0 } } } else { if (iTemp42 as i32 == 1) { (200.0 - (70.0 * fTemp45)) } else { 130.0 } } } else { if (iTemp40 as i32 == 1) { (130.0 - fTemp57) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp30 as i32 == 1) { (fTemp56 + 120.0) } else { 140.0 } } } else { if (iTemp28 as i32 == 1) { (140.0 - fTemp55) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp21 as i32 == 1) { (fTemp54 + 120.0) } else { 140.0 } } } else { if (iTemp20 as i32 == 1) { ((60.0 * fTemp53) + 140.0) } else { 200.0 } } } else { if (iTemp19 as i32 == 1) { (200.0 - fTemp52) } else { 120.0 } } } else { 120.0 } } else { if (iTemp16 as i32 == 1) { ((80.0 * fTemp50) + 120.0) } else { 200.0 } } } else { if (iTemp14 as i32 == 1) { (200.0 - (60.0 * fTemp17)) } else { 140.0 } } } else { if (iTemp12 as i32 == 1) { (140.0 - fTemp49) } else { 120.0 } } } else { 120.0 } } else { if (iTemp7 as i32 == 1) { ((15.0 * fTemp11) + 120.0) } else { 135.0 } } } else { if (iTemp8 as i32 == 1) { (135.0 - (15.0 * fTemp9)) } else { 120.0 } } / fTemp46);
			let mut fTemp65: f32 = (((fTemp48 + fTemp64) / fTemp47) + 1.0);
			self.fRec0[0] = (fTemp5 - (((self.fRec0[2] * (((fTemp48 - fTemp64) / fTemp47) + 1.0)) + (2.0 * ((1.0 - (1.0 / mydsp_faustpower2_f(fTemp47))) * self.fRec0[1]))) / fTemp65));
			let mut fTemp66: f32 = (self.fRec6[0] + -12.0);
			let mut fTemp67: f32 = if (iTemp26 as i32 == 1) { (0.100000001 - (0.0841509998 * fTemp29)) } else { 0.0158489998 };
			let mut fTemp68: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { 0.00100000005 } else { if (iTemp58 as i32 == 1) { ((0.000777999987 * fTemp61) + 0.00100000005) } else { 0.00177800003 } } } else { if (iTemp44 as i32 == 1) { (0.00177800003 - (0.001147 * fTemp59)) } else { 0.000630999974 } } } else { if (iTemp42 as i32 == 1) { ((0.0993689969 * fTemp45) + 0.000630999974) } else { 0.100000001 } } } else { if (iTemp40 as i32 == 1) { ((0.0258930009 * self.fRec6[0]) + 0.100000001) } else { 0.125892997 } } } else { if (iTemp38 as i32 == 1) { (0.125892997 - (0.0860819966 * fTemp41)) } else { 0.0398110002 } } } else { if (iTemp35 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp39)) } else { 0.00999999978 } } } else { if (iTemp33 as i32 == 1) { ((0.00584900007 * fTemp36) + 0.00999999978) } else { 0.0158489998 } } } else { if (iTemp30 as i32 == 1) { (0.0158489998 - (0.00325999991 * fTemp34)) } else { 0.0125890002 } } } else { if (iTemp28 as i32 == 1) { ((0.0874110013 * fTemp31) + 0.0125890002) } else { 0.100000001 } } } else { fTemp67 } } else { if (iTemp24 as i32 == 1) { ((0.00410400005 * fTemp27) + 0.0158489998) } else { 0.0199529994 } } } else { 0.0199529994 } } else { if (iTemp21 as i32 == 1) { (0.0199529994 - (0.0167909991 * fTemp23)) } else { 0.0031620001 } } } else { if (iTemp20 as i32 == 1) { (0.0031620001 - (0.00157700002 * fTemp53)) } else { 0.00158499996 } } } else { if (iTemp19 as i32 == 1) { ((0.00472499989 * fTemp51) + 0.00158499996) } else { 0.00631000008 } } } else { if (iTemp18 as i32 == 1) { (0.00631000008 - (0.00314799999 * fTemp66)) } else { 0.0031620001 } } } else { if (iTemp16 as i32 == 1) { (0.0031620001 - (0.00216199993 * fTemp50)) } else { 0.00100000005 } } } else { if (iTemp14 as i32 == 1) { ((0.0784329996 * fTemp17) + 0.00100000005) } else { 0.0794330016 } } } else { if (iTemp12 as i32 == 1) { ((0.0205669999 * fTemp15) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp10 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp13)) } else { 0.0316229984 } } } else { if (iTemp7 as i32 == 1) { ((0.0184959993 * fTemp11) + 0.0316229984) } else { 0.0501190014 } } } else { 0.0501190014 };
			self.fRec7[0] = (fSlow1 + (0.999000013 * self.fRec7[1]));
			self.fRec8[0] = ((self.fConst3 * self.fRec9[1]) + (self.fConst4 * self.fRec8[1]));
			self.fRec9[0] = (((self.fConst4 * self.fRec9[1]) + (self.fConst5 * self.fRec8[1])) + (iTemp0 as f32));
			let mut fTemp69: f32 = (((200.0 * self.fRec7[0]) + 50.0) * ((fSlow2 * self.fRec8[0]) + 1.0));
			let mut fTemp70: f32 = ((0.00366666657 * (400.0 - fTemp69)) + 3.0);
			let mut fTemp71: f32 = (self.fRec6[0] + 4.0);
			let mut fTemp72: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 800.0 } else { if (iTemp62 as i32 == 1) { (800.0 - (400.0 * fTemp6)) } else { 400.0 } } } else { if (iTemp60 as i32 == 1) { (400.0 - (50.0 * fTemp71)) } else { 350.0 } } } else { if (iTemp58 as i32 == 1) { ((100.0 * fTemp61) + 350.0) } else { 450.0 } } } else { if (iTemp44 as i32 == 1) { (450.0 - (125.0 * fTemp59)) } else { 325.0 } } } else { if (iTemp42 as i32 == 1) { ((275.0 * fTemp45) + 325.0) } else { 600.0 } } } else { if (iTemp40 as i32 == 1) { (600.0 - (200.0 * self.fRec6[0])) } else { 400.0 } } } else { if (iTemp38 as i32 == 1) { (400.0 - (150.0 * fTemp41)) } else { 250.0 } } } else { if (iTemp35 as i32 == 1) { ((150.0 * fTemp39) + 250.0) } else { 400.0 } } } else { if (iTemp33 as i32 == 1) { (400.0 - fTemp37) } else { 350.0 } } } else { if (iTemp30 as i32 == 1) { ((310.0 * fTemp34) + 350.0) } else { 660.0 } } } else { if (iTemp28 as i32 == 1) { (660.0 - (220.0 * fTemp31)) } else { 440.0 } } } else { if (iTemp26 as i32 == 1) { (440.0 - (170.0 * fTemp29)) } else { 270.0 } } } else { if (iTemp24 as i32 == 1) { ((160.0 * fTemp27) + 270.0) } else { 430.0 } } } else { if (iTemp22 as i32 == 1) { (430.0 - (60.0 * fTemp25)) } else { 370.0 } } } else { if (iTemp21 as i32 == 1) { ((430.0 * fTemp23) + 370.0) } else { 800.0 } } } else { if (iTemp20 as i32 == 1) { (800.0 - (450.0 * fTemp53)) } else { 350.0 } } } else { if (iTemp19 as i32 == 1) { (350.0 - fTemp52) } else { 270.0 } } } else { if (iTemp18 as i32 == 1) { ((180.0 * fTemp66) + 270.0) } else { 450.0 } } } else { if (iTemp16 as i32 == 1) { (450.0 - (125.0 * fTemp50)) } else { 325.0 } } } else { if (iTemp14 as i32 == 1) { (325.0 * (fTemp17 + 1.0)) } else { 650.0 } } } else { if (iTemp12 as i32 == 1) { (650.0 - (250.0 * fTemp15)) } else { 400.0 } } } else { if (iTemp10 as i32 == 1) { (400.0 - (110.0 * fTemp13)) } else { 290.0 } } } else { if (iTemp7 as i32 == 1) { ((110.0 * fTemp11) + 290.0) } else { 400.0 } } } else { if (iTemp8 as i32 == 1) { (400.0 - (50.0 * fTemp9)) } else { 350.0 } };
			let mut fTemp73: f32 = if (((fTemp72 <= fTemp69) as i32) as i32 == 1) { fTemp69 } else { fTemp72 };
			let mut fTemp74: f32 = f32::tan((self.fConst6 * fTemp73));
			let mut fTemp75: f32 = (1.0 / fTemp74);
			let mut fTemp76: f32 = (20.0 * fTemp53);
			let mut fTemp77: f32 = (10.0 * fTemp31);
			let mut fTemp78: f32 = (10.0 * fTemp45);
			let mut fTemp79: f32 = (20.0 * fTemp59);
			let mut fTemp80: f32 = (20.0 * fTemp61);
			let mut fTemp81: f32 = (20.0 * fTemp6);
			let mut fTemp82: f32 = (if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 80.0 } else { if (iTemp62 as i32 == 1) { (80.0 - fTemp81) } else { 60.0 } } } else { if (iTemp60 as i32 == 1) { (60.0 - (10.0 * fTemp71)) } else { 50.0 } } } else { if (iTemp58 as i32 == 1) { (fTemp80 + 50.0) } else { 70.0 } } } else { if (iTemp44 as i32 == 1) { (70.0 - fTemp79) } else { 50.0 } } } else { if (iTemp42 as i32 == 1) { (fTemp78 + 50.0) } else { 60.0 } } } else { if (iTemp40 as i32 == 1) { (60.0 - (20.0 * self.fRec6[0])) } else { 40.0 } } } else { if (iTemp38 as i32 == 1) { ((20.0 * fTemp41) + 40.0) } else { 60.0 } } } else { if (iTemp35 as i32 == 1) { (60.0 - (20.0 * fTemp39)) } else { 40.0 } } } else { 40.0 } } else { if (iTemp30 as i32 == 1) { (40.0 * (fTemp34 + 1.0)) } else { 80.0 } } } else { if (iTemp28 as i32 == 1) { (80.0 - fTemp77) } else { 70.0 } } } else { if (iTemp26 as i32 == 1) { (70.0 - (30.0 * fTemp29)) } else { 40.0 } } } else { 40.0 } } else { 40.0 } } else { if (iTemp21 as i32 == 1) { (40.0 * (fTemp23 + 1.0)) } else { 80.0 } } } else { if (iTemp20 as i32 == 1) { (80.0 - fTemp76) } else { 60.0 } } } else { 60.0 } } else { if (iTemp18 as i32 == 1) { (60.0 - (20.0 * fTemp66)) } else { 40.0 } } } else { if (iTemp16 as i32 == 1) { ((10.0 * fTemp50) + 40.0) } else { 50.0 } } } else { 50.0 } } else { if (iTemp12 as i32 == 1) { (fTemp49 + 50.0) } else { 70.0 } } } else { if (iTemp10 as i32 == 1) { (70.0 - (30.0 * fTemp13)) } else { 40.0 } } } else { if (iTemp7 as i32 == 1) { ((30.0 * fTemp11) + 40.0) } else { 70.0 } } } else { if (iTemp8 as i32 == 1) { (70.0 - (30.0 * fTemp9)) } else { 40.0 } } / fTemp73);
			let mut fTemp83: f32 = (((fTemp75 + fTemp82) / fTemp74) + 1.0);
			self.fRec10[0] = (fTemp5 - (((self.fRec10[2] * (((fTemp75 - fTemp82) / fTemp74) + 1.0)) + (2.0 * (self.fRec10[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp74)))))) / fTemp83));
			let mut fTemp84: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 1150.0 } else { if (iTemp62 as i32 == 1) { ((450.0 * fTemp6) + 1150.0) } else { 1600.0 } } } else { if (iTemp60 as i32 == 1) { ((100.0 * fTemp71) + 1600.0) } else { 1700.0 } } } else { if (iTemp58 as i32 == 1) { (1700.0 - (900.0 * fTemp61)) } else { 800.0 } } } else { if (iTemp44 as i32 == 1) { (800.0 - (100.0 * fTemp59)) } else { 700.0 } } } else { if (iTemp42 as i32 == 1) { ((340.0 * fTemp45) + 700.0) } else { 1040.0 } } } else { if (iTemp40 as i32 == 1) { ((580.0 * self.fRec6[0]) + 1040.0) } else { 1620.0 } } } else { if (iTemp38 as i32 == 1) { ((130.0 * fTemp41) + 1620.0) } else { 1750.0 } } } else { if (iTemp35 as i32 == 1) { (1750.0 - (1000.0 * fTemp39)) } else { 750.0 } } } else { if (iTemp33 as i32 == 1) { (750.0 - (150.0 * fTemp36)) } else { 600.0 } } } else { if (iTemp30 as i32 == 1) { ((520.0 * fTemp34) + 600.0) } else { 1120.0 } } } else { if (iTemp28 as i32 == 1) { ((680.0 * fTemp31) + 1120.0) } else { 1800.0 } } } else { if (iTemp26 as i32 == 1) { ((50.0 * fTemp29) + 1800.0) } else { 1850.0 } } } else { if (iTemp24 as i32 == 1) { (1850.0 - (1030.0 * fTemp27)) } else { 820.0 } } } else { if (iTemp22 as i32 == 1) { (820.0 - (190.0 * fTemp25)) } else { 630.0 } } } else { if (iTemp21 as i32 == 1) { ((520.0 * fTemp23) + 630.0) } else { 1150.0 } } } else { if (iTemp20 as i32 == 1) { ((850.0 * fTemp53) + 1150.0) } else { 2000.0 } } } else { if (iTemp19 as i32 == 1) { ((140.0 * fTemp51) + 2000.0) } else { 2140.0 } } } else { if (iTemp18 as i32 == 1) { (2140.0 - (1340.0 * fTemp66)) } else { 800.0 } } } else { if (iTemp16 as i32 == 1) { (800.0 - (100.0 * fTemp50)) } else { 700.0 } } } else { if (iTemp14 as i32 == 1) { ((380.0 * fTemp17) + 700.0) } else { 1080.0 } } } else { if (iTemp12 as i32 == 1) { ((620.0 * fTemp15) + 1080.0) } else { 1700.0 } } } else { if (iTemp10 as i32 == 1) { ((170.0 * fTemp13) + 1700.0) } else { 1870.0 } } } else { if (iTemp7 as i32 == 1) { (1870.0 - (1070.0 * fTemp11)) } else { 800.0 } } } else { if (iTemp8 as i32 == 1) { (800.0 - (200.0 * fTemp9)) } else { 600.0 } };
			let mut fTemp85: f32 = ((2.0 * fTemp69) + 30.0);
			let mut fTemp86: f32 = if ((((fTemp84 >= 1300.0) as i32) & ((fTemp69 >= 200.0) as i32)) as i32 == 1) { (fTemp84 - (0.000952380942 * ((fTemp69 + -200.0) * (fTemp84 + -1300.0)))) } else { if (((fTemp84 <= fTemp85) as i32) as i32 == 1) { fTemp85 } else { fTemp84 } };
			let mut fTemp87: f32 = f32::tan((self.fConst6 * fTemp86));
			let mut fTemp88: f32 = (1.0 / fTemp87);
			let mut fTemp89: f32 = (10.0 * fTemp11);
			let mut fTemp90: f32 = (10.0 * fTemp15);
			let mut fTemp91: f32 = (10.0 * fTemp34);
			let mut fTemp92: f32 = (if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 90.0 } else { if (iTemp62 as i32 == 1) { (90.0 - (10.0 * fTemp6)) } else { 80.0 } } } else { if (iTemp60 as i32 == 1) { ((20.0 * fTemp71) + 80.0) } else { 100.0 } } } else { if (iTemp58 as i32 == 1) { (100.0 - fTemp80) } else { 80.0 } } } else { if (iTemp44 as i32 == 1) { (80.0 - fTemp79) } else { 60.0 } } } else { if (iTemp42 as i32 == 1) { (fTemp78 + 60.0) } else { 70.0 } } } else { if (iTemp40 as i32 == 1) { (fTemp57 + 70.0) } else { 80.0 } } } else { if (iTemp38 as i32 == 1) { ((10.0 * fTemp41) + 80.0) } else { 90.0 } } } else { if (iTemp35 as i32 == 1) { (90.0 - (10.0 * fTemp39)) } else { 80.0 } } } else { 80.0 } } else { if (iTemp30 as i32 == 1) { (fTemp91 + 80.0) } else { 90.0 } } } else { if (iTemp28 as i32 == 1) { (90.0 - fTemp77) } else { 80.0 } } } else { if (iTemp26 as i32 == 1) { ((10.0 * fTemp29) + 80.0) } else { 90.0 } } } else { if (iTemp24 as i32 == 1) { (90.0 - (10.0 * fTemp27)) } else { 80.0 } } } else { if (iTemp22 as i32 == 1) { (80.0 - (20.0 * fTemp25)) } else { 60.0 } } } else { if (iTemp21 as i32 == 1) { ((30.0 * fTemp23) + 60.0) } else { 90.0 } } } else { if (iTemp20 as i32 == 1) { ((10.0 * fTemp53) + 90.0) } else { 100.0 } } } else { if (iTemp19 as i32 == 1) { (100.0 - (10.0 * fTemp51)) } else { 90.0 } } } else { if (iTemp18 as i32 == 1) { (90.0 - (10.0 * fTemp66)) } else { 80.0 } } } else { if (iTemp16 as i32 == 1) { (80.0 - (20.0 * fTemp50)) } else { 60.0 } } } else { if (iTemp14 as i32 == 1) { ((30.0 * fTemp17) + 60.0) } else { 90.0 } } } else { if (iTemp12 as i32 == 1) { (90.0 - fTemp90) } else { 80.0 } } } else { if (iTemp10 as i32 == 1) { ((10.0 * fTemp13) + 80.0) } else { 90.0 } } } else { if (iTemp7 as i32 == 1) { (90.0 - fTemp89) } else { 80.0 } } } else { if (iTemp8 as i32 == 1) { (80.0 - (20.0 * fTemp9)) } else { 60.0 } } / fTemp86);
			let mut fTemp93: f32 = (((fTemp88 + fTemp92) / fTemp87) + 1.0);
			self.fRec11[0] = (fTemp5 - (((self.fRec11[2] * (((fTemp88 - fTemp92) / fTemp87) + 1.0)) + (2.0 * (self.fRec11[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp87)))))) / fTemp93));
			let mut fTemp94: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 0.630957007 } else { if (iTemp62 as i32 == 1) { (0.630957007 - (0.567861021 * fTemp6)) } else { 0.0630960017 } } } else { if (iTemp60 as i32 == 1) { ((0.0369039997 * fTemp71) + 0.0630960017) } else { 0.100000001 } } } else { if (iTemp58 as i32 == 1) { ((0.254812986 * fTemp61) + 0.100000001) } else { 0.35481301 } } } else { if (iTemp44 as i32 == 1) { (0.35481301 - (0.103624001 * fTemp59)) } else { 0.251188993 } } } else { if (iTemp42 as i32 == 1) { ((0.195494995 * fTemp45) + 0.251188993) } else { 0.446684003 } } } else { if (iTemp40 as i32 == 1) { (0.446684003 - (0.195494995 * self.fRec6[0])) } else { 0.251188993 } } } else { if (iTemp38 as i32 == 1) { (0.251188993 - (0.219566002 * fTemp41)) } else { 0.0316229984 } } } else { if (iTemp35 as i32 == 1) { ((0.250214994 * fTemp39) + 0.0316229984) } else { 0.281838 } } } else { if (iTemp33 as i32 == 1) { (0.281838 - (0.181838006 * fTemp36)) } else { 0.100000001 } } } else { if (iTemp30 as i32 == 1) { ((0.401187003 * fTemp34) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp28 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp31)) } else { 0.199525997 } } } else { if (iTemp26 as i32 == 1) { (0.199525997 - (0.136429995 * fTemp29)) } else { 0.0630960017 } } } else { if (iTemp24 as i32 == 1) { ((0.253131986 * fTemp27) + 0.0630960017) } else { 0.316228002 } } } else { if (iTemp22 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp25)) } else { 0.100000001 } } } else { if (iTemp21 as i32 == 1) { ((0.401187003 * fTemp23) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp20 as i32 == 1) { (0.501187027 - (0.401187003 * fTemp53)) } else { 0.100000001 } } } else { if (iTemp19 as i32 == 1) { ((0.151188999 * fTemp51) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp18 as i32 == 1) { ((0.0306490008 * fTemp66) + 0.251188993) } else { 0.281838 } } } else { if (iTemp16 as i32 == 1) { (0.281838 - (0.123349003 * fTemp50)) } else { 0.158489004 } } } else { if (iTemp14 as i32 == 1) { ((0.342698008 * fTemp17) + 0.158489004) } else { 0.501187027 } } } else { if (iTemp12 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp15)) } else { 0.199525997 } } } else { if (iTemp10 as i32 == 1) { (0.199525997 - (0.0216979999 * fTemp13)) } else { 0.177827999 } } } else { if (iTemp7 as i32 == 1) { ((0.138400003 * fTemp11) + 0.177827999) } else { 0.316228002 } } } else { if (iTemp8 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp9)) } else { 0.100000001 } };
			let mut fTemp95: f32 = (100.0 * fTemp9);
			let mut fTemp96: f32 = (50.0 * fTemp17);
			let mut fTemp97: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 2800.0 } else { if (iTemp62 as i32 == 1) { (2800.0 - (100.0 * fTemp6)) } else { 2700.0 } } } else { 2700.0 } } else { if (iTemp58 as i32 == 1) { ((130.0 * fTemp61) + 2700.0) } else { 2830.0 } } } else { if (iTemp44 as i32 == 1) { (2830.0 - (300.0 * fTemp59)) } else { 2530.0 } } } else { if (iTemp42 as i32 == 1) { (2530.0 - (280.0 * fTemp45)) } else { 2250.0 } } } else { if (iTemp40 as i32 == 1) { ((150.0 * self.fRec6[0]) + 2250.0) } else { 2400.0 } } } else { if (iTemp38 as i32 == 1) { ((200.0 * fTemp41) + 2400.0) } else { 2600.0 } } } else { if (iTemp35 as i32 == 1) { (2600.0 - (200.0 * fTemp39)) } else { 2400.0 } } } else { 2400.0 } } else { if (iTemp30 as i32 == 1) { ((350.0 * fTemp34) + 2400.0) } else { 2750.0 } } } else { if (iTemp28 as i32 == 1) { (2750.0 - fTemp32) } else { 2700.0 } } } else { if (iTemp26 as i32 == 1) { ((200.0 * fTemp29) + 2700.0) } else { 2900.0 } } } else { if (iTemp24 as i32 == 1) { (2900.0 - (200.0 * fTemp27)) } else { 2700.0 } } } else { if (iTemp22 as i32 == 1) { ((50.0 * fTemp25) + 2700.0) } else { 2750.0 } } } else { if (iTemp21 as i32 == 1) { ((150.0 * fTemp23) + 2750.0) } else { 2900.0 } } } else { if (iTemp20 as i32 == 1) { (2900.0 - (100.0 * fTemp53)) } else { 2800.0 } } } else { if (iTemp19 as i32 == 1) { ((150.0 * fTemp51) + 2800.0) } else { 2950.0 } } } else { if (iTemp18 as i32 == 1) { (2950.0 - (120.0 * fTemp66)) } else { 2830.0 } } } else { if (iTemp16 as i32 == 1) { (2830.0 - (130.0 * fTemp50)) } else { 2700.0 } } } else { if (iTemp14 as i32 == 1) { (2700.0 - fTemp96) } else { 2650.0 } } } else { if (iTemp12 as i32 == 1) { (2650.0 - (50.0 * fTemp15)) } else { 2600.0 } } } else { if (iTemp10 as i32 == 1) { ((200.0 * fTemp13) + 2600.0) } else { 2800.0 } } } else { if (iTemp7 as i32 == 1) { (2800.0 - (200.0 * fTemp11)) } else { 2600.0 } } } else { if (iTemp8 as i32 == 1) { (fTemp95 + 2600.0) } else { 2700.0 } };
			let mut fTemp98: f32 = f32::tan((self.fConst6 * fTemp97));
			let mut fTemp99: f32 = (1.0 / fTemp98);
			let mut fTemp100: f32 = (60.0 * fTemp45);
			let mut fTemp101: f32 = (if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { 120.0 } else { if (iTemp58 as i32 == 1) { (120.0 - fTemp80) } else { 100.0 } } } else { if (iTemp44 as i32 == 1) { ((70.0 * fTemp59) + 100.0) } else { 170.0 } } } else { if (iTemp42 as i32 == 1) { (170.0 - fTemp100) } else { 110.0 } } } else { if (iTemp40 as i32 == 1) { (110.0 - fTemp57) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp30 as i32 == 1) { (fTemp56 + 100.0) } else { 120.0 } } } else { if (iTemp28 as i32 == 1) { (120.0 - fTemp55) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp21 as i32 == 1) { (fTemp54 + 100.0) } else { 120.0 } } } else { 120.0 } } else { if (iTemp19 as i32 == 1) { (120.0 - (20.0 * fTemp51)) } else { 100.0 } } } else { 100.0 } } else { if (iTemp16 as i32 == 1) { ((70.0 * fTemp50) + 100.0) } else { 170.0 } } } else { if (iTemp14 as i32 == 1) { (170.0 - fTemp96) } else { 120.0 } } } else { if (iTemp12 as i32 == 1) { (120.0 - fTemp49) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } / fTemp97);
			let mut fTemp102: f32 = (((fTemp99 + fTemp101) / fTemp98) + 1.0);
			self.fRec12[0] = (fTemp5 - (((self.fRec12[2] * (((fTemp99 - fTemp101) / fTemp98) + 1.0)) + (2.0 * (self.fRec12[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp98)))))) / fTemp102));
			let mut fTemp103: f32 = if (iTemp18 as i32 == 1) { ((0.0293140002 * fTemp66) + 0.0501190014) } else { 0.0794330016 };
			let mut fTemp104: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 0.100000001 } else { if (iTemp62 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp6)) } else { 0.0316229984 } } } else { 0.0316229984 } } else { if (iTemp58 as i32 == 1) { ((0.126865998 * fTemp61) + 0.0316229984) } else { 0.158489004 } } } else { if (iTemp44 as i32 == 1) { (0.158489004 - (0.126865998 * fTemp59)) } else { 0.0316229984 } } } else { if (iTemp42 as i32 == 1) { ((0.323190004 * fTemp45) + 0.0316229984) } else { 0.35481301 } } } else { 0.35481301 } } else { if (iTemp38 as i32 == 1) { (0.35481301 - (0.196324006 * fTemp41)) } else { 0.158489004 } } } else { if (iTemp35 as i32 == 1) { (0.158489004 - (0.0693639964 * fTemp39)) } else { 0.0891249999 } } } else { if (iTemp33 as i32 == 1) { (0.0891249999 - (0.0640060008 * fTemp36)) } else { 0.0251189992 } } } else { if (iTemp30 as i32 == 1) { ((0.0456760004 * fTemp34) + 0.0251189992) } else { 0.0707949996 } } } else { if (iTemp28 as i32 == 1) { ((0.0550980009 * fTemp31) + 0.0707949996) } else { 0.125892997 } } } else { if (iTemp26 as i32 == 1) { (0.125892997 - (0.0627970025 * fTemp29)) } else { 0.0630960017 } } } else { if (iTemp24 as i32 == 1) { (0.0630960017 - (0.0129770003 * fTemp27)) } else { 0.0501190014 } } } else { if (iTemp22 as i32 == 1) { ((0.020676 * fTemp25) + 0.0501190014) } else { 0.0707949996 } } } else { if (iTemp21 as i32 == 1) { (0.0707949996 - (0.0456760004 * fTemp23)) } else { 0.0251189992 } } } else { if (iTemp20 as i32 == 1) { ((0.152709007 * fTemp53) + 0.0251189992) } else { 0.177827999 } } } else { if (iTemp19 as i32 == 1) { (0.177827999 - (0.127709001 * fTemp51)) } else { 0.0501190014 } } } else { fTemp103 } } else { if (iTemp16 as i32 == 1) { (0.0794330016 - (0.0616500005 * fTemp50)) } else { 0.0177829992 } } } else { if (iTemp14 as i32 == 1) { ((0.428900987 * fTemp17) + 0.0177829992) } else { 0.446684003 } } } else { if (iTemp12 as i32 == 1) { (0.446684003 - (0.195494995 * fTemp15)) } else { 0.251188993 } } } else { if (iTemp10 as i32 == 1) { (0.251188993 - (0.125295997 * fTemp13)) } else { 0.125892997 } } } else { if (iTemp7 as i32 == 1) { ((0.125295997 * fTemp11) + 0.125892997) } else { 0.251188993 } } } else { if (iTemp8 as i32 == 1) { (0.251188993 - (0.109935001 * fTemp9)) } else { 0.141253993 } };
			let mut fTemp105: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 3500.0 } else { if (iTemp62 as i32 == 1) { (3500.0 - (200.0 * fTemp6)) } else { 3300.0 } } } else { if (iTemp60 as i32 == 1) { ((400.0 * fTemp71) + 3300.0) } else { 3700.0 } } } else { if (iTemp58 as i32 == 1) { (3700.0 - (200.0 * fTemp61)) } else { 3500.0 } } } else { 3500.0 } } else { if (iTemp42 as i32 == 1) { (3500.0 - (1050.0 * fTemp45)) } else { 2450.0 } } } else { if (iTemp40 as i32 == 1) { (fTemp43 + 2450.0) } else { 2800.0 } } } else { if (iTemp38 as i32 == 1) { ((250.0 * fTemp41) + 2800.0) } else { 3050.0 } } } else { if (iTemp35 as i32 == 1) { (3050.0 - (450.0 * fTemp39)) } else { 2600.0 } } } else { if (iTemp33 as i32 == 1) { ((75.0 * fTemp36) + 2600.0) } else { 2675.0 } } } else { if (iTemp30 as i32 == 1) { ((325.0 * fTemp34) + 2675.0) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp26 as i32 == 1) { ((350.0 * fTemp29) + 3000.0) } else { 3350.0 } } } else { if (iTemp24 as i32 == 1) { (3350.0 - (350.0 * fTemp27)) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp21 as i32 == 1) { ((900.0 * fTemp23) + 3000.0) } else { 3900.0 } } } else { if (iTemp20 as i32 == 1) { (3900.0 - (300.0 * fTemp53)) } else { 3600.0 } } } else { if (iTemp19 as i32 == 1) { ((300.0 * fTemp51) + 3600.0) } else { 3900.0 } } } else { if (iTemp18 as i32 == 1) { (3900.0 - (100.0 * fTemp66)) } else { 3800.0 } } } else { 3800.0 } } else { if (iTemp14 as i32 == 1) { (3800.0 - (900.0 * fTemp17)) } else { 2900.0 } } } else { if (iTemp12 as i32 == 1) { ((300.0 * fTemp15) + 2900.0) } else { 3200.0 } } } else { if (iTemp10 as i32 == 1) { ((50.0 * fTemp13) + 3200.0) } else { 3250.0 } } } else { if (iTemp7 as i32 == 1) { (3250.0 - (450.0 * fTemp11)) } else { 2800.0 } } } else { if (iTemp8 as i32 == 1) { (fTemp95 + 2800.0) } else { 2900.0 } };
			let mut fTemp106: f32 = f32::tan((self.fConst6 * fTemp105));
			let mut fTemp107: f32 = (1.0 / fTemp106);
			let mut fTemp108: f32 = (if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 130.0 } else { if (iTemp62 as i32 == 1) { (fTemp81 + 130.0) } else { 150.0 } } } else { 150.0 } } else { if (iTemp58 as i32 == 1) { (150.0 - fTemp80) } else { 130.0 } } } else { if (iTemp44 as i32 == 1) { ((50.0 * fTemp59) + 130.0) } else { 180.0 } } } else { if (iTemp42 as i32 == 1) { (180.0 - fTemp100) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp30 as i32 == 1) { (fTemp91 + 120.0) } else { 130.0 } } } else { if (iTemp28 as i32 == 1) { (130.0 - fTemp77) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp21 as i32 == 1) { ((10.0 * fTemp23) + 120.0) } else { 130.0 } } } else { if (iTemp20 as i32 == 1) { (fTemp76 + 130.0) } else { 150.0 } } } else { if (iTemp19 as i32 == 1) { (150.0 - (30.0 * fTemp51)) } else { 120.0 } } } else { 120.0 } } else { if (iTemp16 as i32 == 1) { ((60.0 * fTemp50) + 120.0) } else { 180.0 } } } else { if (iTemp14 as i32 == 1) { (180.0 - fTemp96) } else { 130.0 } } } else { if (iTemp12 as i32 == 1) { (130.0 - fTemp90) } else { 120.0 } } } else { 120.0 } } else { if (iTemp7 as i32 == 1) { (fTemp89 + 120.0) } else { 130.0 } } } else { if (iTemp8 as i32 == 1) { (130.0 - (10.0 * fTemp9)) } else { 120.0 } } / fTemp105);
			let mut fTemp109: f32 = (((fTemp107 + fTemp108) / fTemp106) + 1.0);
			self.fRec13[0] = (fTemp5 - (((self.fRec13[2] * (((fTemp107 - fTemp108) / fTemp106) + 1.0)) + (2.0 * (self.fRec13[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp106)))))) / fTemp109));
			let mut fTemp110: f32 = if (iTemp7 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp22 as i32 == 1) { if (iTemp24 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp33 as i32 == 1) { if (iTemp35 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp44 as i32 == 1) { if (iTemp58 as i32 == 1) { if (iTemp60 as i32 == 1) { if (iTemp62 as i32 == 1) { if (iTemp63 as i32 == 1) { 0.0158489998 } else { if (iTemp62 as i32 == 1) { ((0.00193400006 * fTemp6) + 0.0158489998) } else { 0.0177829992 } } } else { if (iTemp60 as i32 == 1) { (0.0177829992 - (0.00193400006 * fTemp71)) } else { 0.0158489998 } } } else { if (iTemp58 as i32 == 1) { ((0.0239620004 * fTemp61) + 0.0158489998) } else { 0.0398110002 } } } else { if (iTemp44 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp59)) } else { 0.00999999978 } } } else { if (iTemp42 as i32 == 1) { ((0.344812989 * fTemp45) + 0.00999999978) } else { 0.35481301 } } } else { if (iTemp40 as i32 == 1) { (0.35481301 - (0.103624001 * self.fRec6[0])) } else { 0.251188993 } } } else { if (iTemp38 as i32 == 1) { (0.251188993 - (0.171755999 * fTemp41)) } else { 0.0794330016 } } } else { if (iTemp35 as i32 == 1) { ((0.0205669999 * fTemp39) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp33 as i32 == 1) { (0.100000001 - (0.0601890013 * fTemp36)) } else { 0.0398110002 } } } else { if (iTemp30 as i32 == 1) { ((0.0232849997 * fTemp34) + 0.0398110002) } else { 0.0630960017 } } } else { if (iTemp28 as i32 == 1) { ((0.0369039997 * fTemp31) + 0.0630960017) } else { 0.100000001 } } } else { fTemp67 } } else { if (iTemp24 as i32 == 1) { ((0.0635839999 * fTemp27) + 0.0158489998) } else { 0.0794330016 } } } else { if (iTemp22 as i32 == 1) { (0.0794330016 - (0.0478099994 * fTemp25)) } else { 0.0316229984 } } } else { if (iTemp21 as i32 == 1) { ((0.0683770031 * fTemp23) + 0.0316229984) } else { 0.100000001 } } } else { if (iTemp20 as i32 == 1) { (0.100000001 - (0.0900000036 * fTemp53)) } else { 0.00999999978 } } } else { if (iTemp19 as i32 == 1) { ((0.0401189998 * fTemp51) + 0.00999999978) } else { 0.0501190014 } } } else { fTemp103 } } else { if (iTemp16 as i32 == 1) { (0.0794330016 - (0.0694330037 * fTemp50)) } else { 0.00999999978 } } } else { if (iTemp14 as i32 == 1) { ((0.388107002 * fTemp17) + 0.00999999978) } else { 0.398106992 } } } else { if (iTemp12 as i32 == 1) { (0.398106992 - (0.198580995 * fTemp15)) } else { 0.199525997 } } } else { if (iTemp10 as i32 == 1) { (0.199525997 - (0.099526003 * fTemp13)) } else { 0.100000001 } } } else { if (iTemp7 as i32 == 1) { ((0.151188999 * fTemp11) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp8 as i32 == 1) { (0.251188993 - (0.0516630001 * fTemp9)) } else { 0.199525997 } };
			let mut fTemp111: f32 = (((((((self.fRec0[2] * (0.0 - ((fTemp68 * fTemp70) / fTemp47))) + (((fTemp68 * self.fRec0[0]) * fTemp70) / fTemp47)) / fTemp65) + (((self.fRec10[2] * (0.0 - (fTemp70 / fTemp74))) + ((self.fRec10[0] * fTemp70) / fTemp74)) / fTemp83)) + (((self.fRec11[2] * (0.0 - ((fTemp70 * fTemp94) / fTemp87))) + (((self.fRec11[0] * fTemp70) * fTemp94) / fTemp87)) / fTemp93)) + (((self.fRec12[2] * (0.0 - ((fTemp70 * fTemp104) / fTemp98))) + (((self.fRec12[0] * fTemp70) * fTemp104) / fTemp98)) / fTemp102)) + (((self.fRec13[2] * (0.0 - ((fTemp70 * fTemp110) / fTemp106))) + (((self.fRec13[0] * fTemp70) * fTemp110) / fTemp106)) / fTemp109));
			outputs[0][i as usize] = (fTemp111 as f32);
			outputs[1][i as usize] = (fTemp111 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

