
static fmydspSIG0Wave0: [f32;350] = [0.694274008,0.471697986,0.172389999,0.585446,0.397985995,0.919579029,0.531947017,0.100204997,0.639469028,0.672209024,0.144345,0.416595012,0.124108002,0.380591005,0.256577998,0.646031022,0.852199972,0.0224376004,0.382762015,0.143924996,0.368690997,0.430555999,0.32317999,0.142956004,0.274520993,0.713823974,0.442793995,0.352472991,0.247756004,0.415152013,1.0,0.401868999,0.197981,0.279509991,0.210249007,0.369740009,0.369226992,0.155769005,0.272368014,0.335711986,0.31645,0.714102983,0.285780996,0.220060006,0.827704012,0.206341997,0.180177003,0.311477989,0.197606996,0.575474977,0.473311007,0.587231994,0.502879977,0.33730799,0.304513991,0.429039001,0.351521999,0.341372997,0.175081,0.561748028,0.439172,0.323163986,0.540517986,0.536522985,0.0743864998,0.213416994,0.358011991,0.47449401,0.310274005,0.839412987,0.241372004,0.202343002,0.480634004,0.995684981,0.373739988,0.133998007,0.52067399,0.207514003,1.0,0.101239003,0.279536009,0.185984999,0.436293006,0.624109983,0.334518999,0.283585012,0.179316998,0.353846997,0.449544996,0.574127972,0.135171995,0.538275003,0.476424009,0.832903028,0.164197996,0.188562006,0.135977998,0.390127987,0.131044999,0.312065005,0.142139003,0.0255900994,0.266947001,0.371607006,0.0168434996,0.0249467995,0.508916974,0.354409993,0.283347994,0.628154993,0.292477995,0.358350009,0.342568994,0.441237003,0.886699021,0.0174697991,0.00641842978,0.555320024,0.88012898,0.0306908991,0.290080994,0.248815998,0.981736004,0.324624002,0.213676006,0.432884991,0.0981559008,0.444148988,0.395554006,0.525068998,0.077130802,0.0488803983,0.591320992,0.108043998,0.443801999,0.740318,0.599438012,0.293092996,1.0,0.141662002,0.910031021,0.226126,0.299701989,0.341472,0.0568060987,0.222494006,0.91871798,0.199478,0.216619998,0.107758999,0.692323983,0.556335986,0.281717986,0.430831999,0.341655999,0.60809499,0.342128992,0.31131199,0.229953006,0.695087016,0.0761488974,0.349817991,0.361705989,0.577611029,0.147797003,0.327376008,0.465714991,0.342902005,0.521381021,0.836827993,0.241111994,0.284393996,0.539315999,0.143408,0.517019987,1.0,0.236335993,0.480333,0.676743984,0.807582021,0.468620986,0.236953005,0.411603987,0.579250991,0.425098002,0.375990003,0.461176008,0.276529998,0.462368011,0.613004029,0.666849017,0.954715014,0.161506996,0.170433,0.290461004,0.117302999,0.365132987,0.233794004,0.194567993,0.338874012,0.523380995,0.39835,0.447838992,0.65289098,0.157079995,0.340353996,0.442169994,0.338764012,0.184396997,0.771606982,0.160502002,0.324487001,0.477499008,0.831519008,0.0168763995,0.154264003,0.201865003,0.237785995,0.390065998,0.880164027,0.284233987,0.162836999,0.437557012,0.227845997,0.399340004,1.0,0.158106998,0.396903008,0.513028979,0.676456988,0.204282001,0.0895574987,0.555410028,0.73248601,0.125062004,0.171229005,0.0816460028,0.0541394018,0.396160007,0.454288006,0.466863006,0.928842008,0.155393004,0.262849987,0.113453001,0.133163005,0.302020997,0.612616003,0.228392005,0.195617005,0.287236005,0.198762,0.499884009,0.809139013,0.00929925032,0.084029898,0.286446005,0.182111993,0.186043993,0.754137993,0.279556006,0.266948014,0.494291008,1.0,0.321283996,0.0230981,0.0375537015,0.262531012,0.602204025,0.489924997,0.633077025,0.407409012,0.422255993,0.0910641029,0.357935011,0.550179005,0.106192,0.132366002,0.376231015,0.35115099,0.0420302004,0.0372182988,0.696335018,0.840821028,0.855234981,0.249247998,0.860010982,0.340481013,0.285580009,0.363038987,0.324122012,0.515699029,0.228130996,0.172591999,0.0188723002,0.168243006,0.995105028,0.741759002,0.107092999,0.0703490004,0.136636004,0.0780455023,0.315748006,0.502201021,0.0190421995,0.0339139998,0.225723997,0.160236001,0.184101,0.564203024,0.247317001,0.284224987,0.327152997,0.651443005,0.593470991,0.0163899008,0.0141048003,0.521130025,1.0,0.105108999,0.530936003,0.363723993,0.924808979,0.250409991,0.692879975,0.414121985,0.0793657973,0.34781301,0.441731006,0.476428002,0.0808833987,0.0581637993,0.557238996,0.556514978,0.746083975,0.582228005,0.177230999,0.158425003,0.850902975,0.755271018,0.673614025,0.317059994,0.0515386015,0.201897994,0.0577937998,0.232031003,0.734987974,0.141593993,0.267062008,0.145806998];


pub struct mydspSIG0 {
	
	fmydspSIG0Wave0_idx: i32,
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		self.fmydspSIG0Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG0Wave0[self.fmydspSIG0Wave0_idx as usize];
			self.fmydspSIG0Wave0_idx = ((1 + self.fmydspSIG0Wave0_idx) % 350);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		fmydspSIG0Wave0_idx: 0,
	}
}
static fmydspSIG1Wave0: [f32;350] = [0.972890019,0.542393029,0.495831996,0.897966027,0.552366972,0.557895005,0.61421299,0.353693992,0.436039001,0.441024005,0.674912989,0.566753983,0.755007982,0.699029982,0.164398,0.910040021,0.628373027,0.201718003,0.429517001,0.503714979,0.871173978,0.106885999,0.76117301,0.673601985,0.291936994,0.588590026,0.31527999,0.41308099,0.274464011,0.494062006,0.696120977,0.612010002,0.382757008,0.995113015,0.228806004,0.198449001,0.595847011,0.306263,0.252397001,0.0883567035,0.236085996,1.0,0.245278001,0.379388005,0.198824003,0.548892021,0.492763996,0.42087099,0.794637024,0.605633974,1.0,0.604158998,0.399841011,0.799346983,0.507187009,0.509809971,0.477382988,0.310225993,0.426975995,0.437622994,0.735711992,0.630728006,0.625784993,0.651167989,0.277738005,0.850857973,0.578078985,0.645353973,0.383700013,0.370597988,0.78254199,0.181325004,0.614391029,0.740683973,0.342440993,0.586185992,0.286909014,0.405196995,0.259214997,0.566982985,0.748219013,0.655897975,0.368259996,0.940814018,0.336156994,0.413702011,0.561556995,0.402175993,0.117697999,0.329369009,0.254570991,0.870706022,0.260980994,0.274122,0.206247002,0.645299971,0.400757998,0.36362201,0.636834025,0.584565997,0.975602984,0.616936982,0.295401007,0.650447011,0.464221001,0.465056986,0.312467009,0.238358006,0.383695006,0.399673998,0.753911972,0.662011981,0.504267991,0.599247992,0.378665,0.725363016,0.493214011,1.0,0.332836002,0.265888989,0.674072981,0.320401013,0.440017998,0.769782007,0.316419005,0.529968023,0.380508989,0.578675985,0.249013007,0.591383994,0.761717021,0.687057018,0.324436992,0.818863988,0.505369008,0.672484994,0.461782992,0.426198006,0.0678874999,0.43532899,0.347954988,0.708393991,0.293321997,0.328985989,0.258253992,0.893512011,0.320131004,0.433553994,0.459302008,0.542213023,0.817241013,0.516229987,0.205302,0.467354,0.388682991,0.388215989,0.171261996,0.150865003,0.291720003,0.311414003,0.658876002,0.570647001,0.38361901,0.502454996,0.364113986,0.532312989,0.352988988,1.0,0.261983991,0.219591007,0.544031024,0.337199003,0.279172987,0.668303013,0.208439007,0.399230003,0.418673992,0.648617983,0.234133005,0.504728973,0.645346999,0.572851002,0.232828006,0.614292026,0.48527199,0.666263998,0.316570014,0.320354998,0.191421002,0.340131015,0.342069,0.538371027,0.281130999,0.393115014,0.251394004,0.890725017,0.310644001,0.503700018,0.299089998,0.442478001,0.733128011,0.455217004,0.199322,0.315699011,0.375856012,0.376489997,0.0291450005,0.0200283006,0.279578,0.316799998,0.655956984,0.546842992,0.349665999,0.470248997,0.353765011,0.286794007,0.180185005,1.0,0.210831001,0.280133009,0.535853028,0.376488,0.153669998,0.634745002,0.0510449,0.485574991,0.593110979,0.917883992,0.380477011,0.422924995,0.599372983,0.311421007,0.135654002,0.359954,0.295747995,0.474438995,0.353338987,0.116742998,0.45431301,0.112857997,0.359310001,0.483897001,0.301607996,0.577341974,0.262663007,0.79498601,0.549579978,0.808085978,0.152511001,0.439590991,0.535941005,0.308017999,0.419836998,0.579191029,0.250427991,0.252119988,0.102860004,0.288331985,0.599678993,0.665108025,0.636285007,0.495234013,0.251612991,0.208526999,0.0939071998,0.458415002,0.318951994,0.235349998,0.215188995,0.313412011,0.0472786985,0.0386893004,0.0863358974,0.222345993,0.361510992,0.997036994,0.238508999,0.382140011,1.0,0.203554004,0.472086996,0.509015024,0.206370994,0.441013008,0.794008017,0.971623003,0.796383977,0.55043,0.687780023,0.554297984,0.0436545014,0.0595576987,0.214684993,0.581470013,0.277319998,0.36846599,0.121381998,0.152739003,0.0782243982,0.190496996,0.31626901,0.180455998,0.405196011,0.518715978,0.159364998,0.165808007,0.194371998,0.614763975,0.553415,0.644793987,0.441780001,0.441489995,0.221588001,1.0,0.579370975,0.606338978,0.529166996,0.0214475002,0.41704601,0.663151979,0.894841015,0.475751996,0.168289006,0.468589991,0.304603994,0.666369021,0.308337003,0.295091003,0.768944979,0.350910991,0.490680009,0.516583979,0.40011701,0.820686996,0.545485973,0.709357023,0.509759009,0.472005993,0.152455002,0.981265008,0.459134012,0.698665977,0.247153997,0.623252988,0.255508006,0.830815017,0.0887089968,0.126082003,0.0770623013,0.263327986];


pub struct mydspSIG1 {
	
	fmydspSIG1Wave0_idx: i32,
	
}

impl mydspSIG1 {
	
	pub fn getNumInputsmydspSIG1(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG1(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG1(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG1(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG1(&mut self, samplingFreq: i32) {
		self.fmydspSIG1Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG1(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG1Wave0[self.fmydspSIG1Wave0_idx as usize];
			self.fmydspSIG1Wave0_idx = ((1 + self.fmydspSIG1Wave0_idx) % 350);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG1() -> mydspSIG1 { 
	mydspSIG1 {
		fmydspSIG1Wave0_idx: 0,
	}
}
static fmydspSIG2Wave0: [f32;350] = [0.761411011,0.797802985,0.586057007,0.225039005,0.926353991,0.81387502,0.529870987,0.158914998,0.662515998,0.308409989,0.0454785004,0.55608201,0.78471297,0.213035002,0.956227005,0.795165002,0.313508004,0.158530995,0.301586002,0.16832,0.281266987,0.154237002,0.217234999,0.247238994,0.522687972,0.170303002,0.32061401,0.154856995,0.414941013,0.788363993,0.713298976,0.381592005,0.707010984,1.0,0.0106945997,0.359762996,0.0746155977,0.431124002,0.118052997,0.527289987,0.255302995,0.646854997,0.201144993,0.919907987,0.359389007,0.253493994,0.865695,0.0829263031,0.222589001,0.041573599,0.735773981,0.769677997,0.381415993,0.197542995,0.682389021,0.614766002,0.249524996,0.289882988,0.300318986,0.443690985,0.275272012,0.370218009,0.748790026,0.161247,0.634352982,0.498497993,0.221988007,0.350636989,0.43681699,0.436462998,0.525080025,0.842646003,0.195324004,0.224755004,0.545681,0.353778005,0.269044012,0.327814013,0.448951989,0.852304995,0.380502999,1.0,0.458063006,0.565057993,0.354635,0.659528971,0.449485004,0.802013993,0.283446014,0.521562994,0.374639004,0.652112007,0.181042001,0.468394011,0.430115998,0.157206997,0.414995015,0.292737007,0.487785012,0.477679998,0.481445014,0.556988001,0.561132014,0.378264993,0.291462004,0.323249996,0.482602,0.328247994,0.196792006,0.712253988,0.389806002,0.307751,0.792876005,0.199098006,0.288837999,0.146810994,0.0178443994,0.394017011,0.588212013,0.489226013,0.701485991,0.940303028,0.213191003,0.0778845027,0.474462986,0.609972,0.163379997,0.408376008,0.330864012,0.889989972,0.0798100978,1.0,0.167172,0.208727002,0.227549002,0.825902998,0.531897008,0.580946028,0.215339005,0.247318998,0.268148005,0.504087985,0.160954997,0.170315996,0.230768993,0.151190996,0.0825031027,0.141328007,0.288078994,0.499675989,0.420354992,0.487764001,0.753709972,0.492247999,0.181364,0.205939993,0.524969995,0.325641006,0.236827001,0.931842029,0.472981006,0.312162012,0.901031971,0.27047801,0.167111993,0.0709697977,0.166004002,0.29074499,0.425893009,0.403632998,0.581772029,0.855693996,0.0325586982,0.056835901,0.241923004,0.799310029,0.181961998,0.530282974,0.415609986,1.0,0.0291501004,0.831155002,0.119755,0.102187999,0.132036999,0.766030014,0.442220986,0.174899995,0.142175004,0.0140794003,0.4375,0.851859987,0.196835995,0.0907521993,0.551672995,0.25652799,0.0424376987,0.490363002,0.108177997,0.50327599,0.226584002,0.312757999,0.824078977,0.484120011,0.0347337984,0.0619428009,0.255097002,0.145273,0.190358996,0.995297015,0.503419995,0.217574999,0.793974996,0.357178986,0.0409727991,0.0187931005,0.414458007,0.158439994,0.34623301,0.0771673024,0.175110996,0.380567014,0.497408986,0.316163987,0.488669008,1.0,0.420657009,0.442333013,0.247060001,0.796406984,0.0104146004,0.227079004,0.10684,0.0289872997,0.767570019,0.0643121973,0.0423097983,0.715521991,0.472117007,0.392576993,0.660432994,0.803574979,0.188653007,0.0191652998,0.87321198,0.448718995,0.0147128003,0.618966997,0.307179987,0.345898986,0.131393999,0.193224996,0.715282977,0.405620009,0.0406370014,0.0503336005,0.0544330999,0.0452023,0.152301997,0.894549012,0.443343014,0.172070995,0.647666991,0.328992993,0.0416014008,0.0229487997,0.551070988,0.42354399,0.862362027,0.363525987,0.769928992,0.123452,0.710702002,0.394894987,0.556638002,1.0,0.450924993,0.422849,0.0921870023,0.413892001,0.00995371956,0.321146011,0.160623997,0.0300680995,0.915385008,0.475499988,0.506950974,0.387549013,0.275590986,0.468281001,0.184775993,0.186837003,0.188195005,0.0202785004,0.697135985,0.408861995,0.0116935,0.349822998,0.202300996,0.461378992,0.0559022985,0.0582570992,0.260607988,0.181875005,0.0271738991,0.0249578003,0.685088992,0.470384002,0.283194005,0.331050009,0.138348997,0.338068008,0.481992006,0.178241998,0.0155942002,0.0110435002,0.783770978,0.442707002,0.616478026,0.381541997,0.510891974,0.0459849983,0.303119004,0.0731908977,0.547715008,0.348940998,0.149981007,0.302157998,0.284482002,0.398176998,0.00413049012,0.180739,0.0628390014,0.0133459,0.347088009,0.576370001,0.240764007,0.978480995,0.452755004,0.529742002,0.340470999,0.66228199,0.444305003,0.0429900996,1.0,0.361939996,0.0183371995,0.626892984,0.552850008,0.384936005];


pub struct mydspSIG2 {
	
	fmydspSIG2Wave0_idx: i32,
	
}

impl mydspSIG2 {
	
	pub fn getNumInputsmydspSIG2(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG2(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG2(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG2(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG2(&mut self, samplingFreq: i32) {
		self.fmydspSIG2Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG2(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG2Wave0[self.fmydspSIG2Wave0_idx as usize];
			self.fmydspSIG2Wave0_idx = ((1 + self.fmydspSIG2Wave0_idx) % 350);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG2() -> mydspSIG2 { 
	mydspSIG2 {
		fmydspSIG2Wave0_idx: 0,
	}
}
static fmydspSIG3Wave0: [f32;350] = [0.925507009,0.597519994,0.0965671018,0.45412001,0.989772975,0.593497992,0.512540996,0.124241002,0.705411017,0.292396009,0.673398972,0.302181005,0.0262340009,0.286249012,0.556267023,1.0,0.250425994,0.107711002,0.427298993,0.336295009,0.616257012,0.214420006,0.0845293999,0.231362998,0.522723973,0.559113979,0.348470002,0.854197025,0.835575998,0.735036016,0.288493991,0.117122002,0.409685999,0.363575011,0.484943002,0.170862004,0.420531005,0.164793,0.233847007,0.861231983,0.214037001,0.283461988,0.173152998,0.876121998,0.607809007,0.294744998,0.143142,0.332008988,0.491878003,0.626103997,0.962027013,0.584298015,0.213652998,0.420451999,0.812328994,0.545171976,0.38074401,0.331535995,0.386801004,0.248908997,0.688755989,0.313903987,0.377894014,0.595845997,0.412274003,0.73962599,0.541148007,0.393005013,0.656637013,0.847671986,0.930652976,0.288289011,0.404938012,0.657989025,0.763948977,0.574084997,0.282240987,1.0,0.429131001,0.572049022,0.73486799,0.577476978,0.520789027,0.355592996,0.890066981,0.272390991,0.448222995,0.423969001,0.392237008,0.856091022,0.0583794005,0.784967005,0.359526992,0.576566994,0.201513007,0.642013013,0.419308007,0.340667009,0.423189998,0.860812008,0.694019973,0.42356801,0.37698701,0.568453014,0.502301991,0.280716002,0.464040995,0.395601004,0.199849993,0.0950397998,0.64279002,0.228325993,0.484910995,0.842352986,0.161403999,0.403432012,0.65554899,0.409097999,0.699392021,0.876049995,1.0,0.185606003,0.414254993,0.695204973,0.732612014,0.478298008,0.249469995,0.927739024,0.213135004,0.227382004,0.976351976,0.642745018,0.376311004,0.260674,0.811034024,0.264631003,0.239978999,0.261896998,0.191642001,0.781669974,0.390679002,0.382436991,0.206714004,0.224720001,0.0676331967,0.502610981,0.301454991,0.241028994,0.224505007,0.721193016,0.436347991,0.254061997,0.480495989,0.772370994,0.210681006,0.103414997,0.485338002,0.378333986,0.228484005,0.114877,0.686760008,0.296941996,0.507420003,0.997470021,0.0377103016,0.132211998,0.319546998,0.192031994,0.520573974,0.58584398,0.419362009,0.084731698,0.134544,0.194762006,0.616689026,0.397359997,0.298808992,0.914745986,0.0513371006,0.0543568991,0.989158988,0.602891982,0.145582005,0.102149002,0.129022002,0.116485,0.279987991,0.394270003,0.29013899,1.0,0.708655,0.78055501,0.387526006,0.0395217016,0.00964067038,0.24368,0.0740624964,0.619315028,0.447394997,0.292497009,0.295457989,0.163747996,0.521375,0.864533007,0.0773407966,0.0334230997,0.345120996,0.278860003,0.223875999,0.307756007,0.763105989,0.424706995,0.487201005,0.968962014,0.00911747012,0.0324653015,0.334275007,0.166786999,0.312498003,0.264261991,0.354880005,0.375589997,0.261094004,0.565006018,0.474934995,0.313520014,0.251248986,0.73535198,0.0189072005,0.0153633999,0.786225021,0.503298998,0.369037986,0.250764996,0.673018992,0.387573004,0.742025018,0.749055982,0.261714011,0.75186801,0.771816015,1.0,0.459484011,0.0124402,0.0105394004,0.964109004,0.457051992,0.532316029,0.407128006,0.697241008,0.152199998,0.0895892978,0.406174988,0.651040018,0.0233951006,0.0101070004,0.0722346976,0.0666339993,0.195489004,0.41674,0.654451013,0.382782012,0.305395991,0.631501019,0.00162801996,0.0140906004,0.762915015,0.410245001,0.189436004,0.060446199,0.624940991,0.43978101,0.516273022,0.896677971,0.273297995,0.202868,0.0996022001,0.257656991,0.0174508002,0.0157859009,0.429432988,0.202184007,0.443111002,0.343811005,0.447562009,0.268694013,0.753551006,0.529425979,0.0772973001,0.0976959988,0.446413994,0.26167801,0.169035003,0.0116218999,0.0207398999,1.0,0.488855988,0.413028985,0.25266099,0.148368999,0.0919644013,0.0330634005,0.268763989,0.441848993,0.0139873,0.0108583998,0.657799006,0.488247991,0.375432998,0.958178997,0.761492014,0.409489989,0.151709005,0.314931005,0.00361180003,0.0133069996,1.0,0.605342984,0.550505996,0.363516003,0.255277991,0.137537003,0.448881,0.867614985,0.483247012,0.308622003,0.348444015,0.534834981,0.0157715995,0.0128964996,0.147607997,0.0762611032,0.762224019,0.511584997,0.98586297,0.540226996,0.691690981,0.905296028,0.397520989,0.697939992,0.423289001,0.924612999,0.491558999,0.00567911007,0.0106001999,0.647916019,0.324182004,0.579448998,0.451936007,0.877897024];


pub struct mydspSIG3 {
	
	fmydspSIG3Wave0_idx: i32,
	
}

impl mydspSIG3 {
	
	pub fn getNumInputsmydspSIG3(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG3(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG3(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG3(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG3(&mut self, samplingFreq: i32) {
		self.fmydspSIG3Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG3(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG3Wave0[self.fmydspSIG3Wave0_idx as usize];
			self.fmydspSIG3Wave0_idx = ((1 + self.fmydspSIG3Wave0_idx) % 350);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG3() -> mydspSIG3 { 
	mydspSIG3 {
		fmydspSIG3Wave0_idx: 0,
	}
}
static ftbl0mydspSIG0: [f32;350][0.0;350],;
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}
static ftbl1mydspSIG1: [f32;350][0.0;350],;
static ftbl2mydspSIG2: [f32;350][0.0;350],;
static ftbl3mydspSIG3: [f32;350][0.0;350],;


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fVec0: [f32;2],
	fConst1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fConst6: f32,
	fConst7: f32,
	iRec3: [i32;2],
	fConst8: f32,
	fConst9: f32,
	fRec2: [f32;3],
	fConst10: f32,
	fConst11: f32,
	fConst12: f32,
	fRec1: [f32;3],
	fHslider2: f32,
	iVec1: [i32;2],
	fConst13: f32,
	fRec4: [f32;2],
	fConst14: f32,
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fConst18: f32,
	fRec0: [f32;3],
	fConst19: f32,
	fConst20: f32,
	fConst21: f32,
	fRec5: [f32;3],
	fConst22: f32,
	fConst23: f32,
	fConst24: f32,
	fRec6: [f32;3],
	fConst25: f32,
	fConst26: f32,
	fConst27: f32,
	fRec7: [f32;3],
	fConst28: f32,
	fConst29: f32,
	fConst30: f32,
	fRec8: [f32;3],
	fConst31: f32,
	fConst32: f32,
	fConst33: f32,
	fRec9: [f32;3],
	fConst34: f32,
	fConst35: f32,
	fConst36: f32,
	fRec10: [f32;3],
	fConst37: f32,
	fConst38: f32,
	fConst39: f32,
	fRec11: [f32;3],
	fConst40: f32,
	fConst41: f32,
	fConst42: f32,
	fRec12: [f32;3],
	fConst43: f32,
	fConst44: f32,
	fConst45: f32,
	fRec13: [f32;3],
	fHslider3: f32,
	iVec2: [i32;2],
	fRec15: [f32;2],
	fConst46: f32,
	fConst47: f32,
	fConst48: f32,
	fRec14: [f32;3],
	fConst49: f32,
	fConst50: f32,
	fConst51: f32,
	fRec16: [f32;3],
	fConst52: f32,
	fConst53: f32,
	fConst54: f32,
	fRec17: [f32;3],
	fConst55: f32,
	fConst56: f32,
	fConst57: f32,
	fRec18: [f32;3],
	fConst58: f32,
	fConst59: f32,
	fConst60: f32,
	fRec19: [f32;3],
	fConst61: f32,
	fConst62: f32,
	fConst63: f32,
	fRec20: [f32;3],
	fConst64: f32,
	fConst65: f32,
	fConst66: f32,
	fRec21: [f32;3],
	fConst67: f32,
	fConst68: f32,
	fConst69: f32,
	fRec22: [f32;3],
	fConst70: f32,
	fConst71: f32,
	fConst72: f32,
	fRec23: [f32;3],
	fConst73: f32,
	fConst74: f32,
	fConst75: f32,
	fRec24: [f32;3],
	fHslider4: f32,
	iVec3: [i32;2],
	fRec26: [f32;2],
	fConst76: f32,
	fConst77: f32,
	fConst78: f32,
	fRec25: [f32;3],
	fConst79: f32,
	fConst80: f32,
	fConst81: f32,
	fRec27: [f32;3],
	fConst82: f32,
	fConst83: f32,
	fConst84: f32,
	fRec28: [f32;3],
	fConst85: f32,
	fConst86: f32,
	fConst87: f32,
	fRec29: [f32;3],
	fConst88: f32,
	fConst89: f32,
	fConst90: f32,
	fRec30: [f32;3],
	fConst91: f32,
	fConst92: f32,
	fConst93: f32,
	fRec31: [f32;3],
	fConst94: f32,
	fConst95: f32,
	fConst96: f32,
	fRec32: [f32;3],
	fConst97: f32,
	fConst98: f32,
	fConst99: f32,
	fRec33: [f32;3],
	fConst100: f32,
	fConst101: f32,
	fConst102: f32,
	fRec34: [f32;3],
	fConst103: f32,
	fConst104: f32,
	fConst105: f32,
	fRec35: [f32;3],
	fHslider5: f32,
	iVec4: [i32;2],
	fRec37: [f32;2],
	fConst106: f32,
	fConst107: f32,
	fConst108: f32,
	fRec36: [f32;3],
	fConst109: f32,
	fConst110: f32,
	fConst111: f32,
	fRec38: [f32;3],
	fConst112: f32,
	fConst113: f32,
	fConst114: f32,
	fRec39: [f32;3],
	fConst115: f32,
	fConst116: f32,
	fConst117: f32,
	fRec40: [f32;3],
	fConst118: f32,
	fConst119: f32,
	fConst120: f32,
	fRec41: [f32;3],
	fConst121: f32,
	fConst122: f32,
	fConst123: f32,
	fRec42: [f32;3],
	fConst124: f32,
	fConst125: f32,
	fConst126: f32,
	fRec43: [f32;3],
	fConst127: f32,
	fConst128: f32,
	fConst129: f32,
	fRec44: [f32;3],
	fConst130: f32,
	fConst131: f32,
	fConst132: f32,
	fRec45: [f32;3],
	fConst133: f32,
	fConst134: f32,
	fConst135: f32,
	fRec46: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fVec0: [0.0;2],
			fConst1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			fConst7: 0.0,
			iRec3: [0;2],
			fConst8: 0.0,
			fConst9: 0.0,
			fRec2: [0.0;3],
			fConst10: 0.0,
			fConst11: 0.0,
			fConst12: 0.0,
			fRec1: [0.0;3],
			fHslider2: 0.0,
			iVec1: [0;2],
			fConst13: 0.0,
			fRec4: [0.0;2],
			fConst14: 0.0,
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fConst18: 0.0,
			fRec0: [0.0;3],
			fConst19: 0.0,
			fConst20: 0.0,
			fConst21: 0.0,
			fRec5: [0.0;3],
			fConst22: 0.0,
			fConst23: 0.0,
			fConst24: 0.0,
			fRec6: [0.0;3],
			fConst25: 0.0,
			fConst26: 0.0,
			fConst27: 0.0,
			fRec7: [0.0;3],
			fConst28: 0.0,
			fConst29: 0.0,
			fConst30: 0.0,
			fRec8: [0.0;3],
			fConst31: 0.0,
			fConst32: 0.0,
			fConst33: 0.0,
			fRec9: [0.0;3],
			fConst34: 0.0,
			fConst35: 0.0,
			fConst36: 0.0,
			fRec10: [0.0;3],
			fConst37: 0.0,
			fConst38: 0.0,
			fConst39: 0.0,
			fRec11: [0.0;3],
			fConst40: 0.0,
			fConst41: 0.0,
			fConst42: 0.0,
			fRec12: [0.0;3],
			fConst43: 0.0,
			fConst44: 0.0,
			fConst45: 0.0,
			fRec13: [0.0;3],
			fHslider3: 0.0,
			iVec2: [0;2],
			fRec15: [0.0;2],
			fConst46: 0.0,
			fConst47: 0.0,
			fConst48: 0.0,
			fRec14: [0.0;3],
			fConst49: 0.0,
			fConst50: 0.0,
			fConst51: 0.0,
			fRec16: [0.0;3],
			fConst52: 0.0,
			fConst53: 0.0,
			fConst54: 0.0,
			fRec17: [0.0;3],
			fConst55: 0.0,
			fConst56: 0.0,
			fConst57: 0.0,
			fRec18: [0.0;3],
			fConst58: 0.0,
			fConst59: 0.0,
			fConst60: 0.0,
			fRec19: [0.0;3],
			fConst61: 0.0,
			fConst62: 0.0,
			fConst63: 0.0,
			fRec20: [0.0;3],
			fConst64: 0.0,
			fConst65: 0.0,
			fConst66: 0.0,
			fRec21: [0.0;3],
			fConst67: 0.0,
			fConst68: 0.0,
			fConst69: 0.0,
			fRec22: [0.0;3],
			fConst70: 0.0,
			fConst71: 0.0,
			fConst72: 0.0,
			fRec23: [0.0;3],
			fConst73: 0.0,
			fConst74: 0.0,
			fConst75: 0.0,
			fRec24: [0.0;3],
			fHslider4: 0.0,
			iVec3: [0;2],
			fRec26: [0.0;2],
			fConst76: 0.0,
			fConst77: 0.0,
			fConst78: 0.0,
			fRec25: [0.0;3],
			fConst79: 0.0,
			fConst80: 0.0,
			fConst81: 0.0,
			fRec27: [0.0;3],
			fConst82: 0.0,
			fConst83: 0.0,
			fConst84: 0.0,
			fRec28: [0.0;3],
			fConst85: 0.0,
			fConst86: 0.0,
			fConst87: 0.0,
			fRec29: [0.0;3],
			fConst88: 0.0,
			fConst89: 0.0,
			fConst90: 0.0,
			fRec30: [0.0;3],
			fConst91: 0.0,
			fConst92: 0.0,
			fConst93: 0.0,
			fRec31: [0.0;3],
			fConst94: 0.0,
			fConst95: 0.0,
			fConst96: 0.0,
			fRec32: [0.0;3],
			fConst97: 0.0,
			fConst98: 0.0,
			fConst99: 0.0,
			fRec33: [0.0;3],
			fConst100: 0.0,
			fConst101: 0.0,
			fConst102: 0.0,
			fRec34: [0.0;3],
			fConst103: 0.0,
			fConst104: 0.0,
			fConst105: 0.0,
			fRec35: [0.0;3],
			fHslider5: 0.0,
			iVec4: [0;2],
			fRec37: [0.0;2],
			fConst106: 0.0,
			fConst107: 0.0,
			fConst108: 0.0,
			fRec36: [0.0;3],
			fConst109: 0.0,
			fConst110: 0.0,
			fConst111: 0.0,
			fRec38: [0.0;3],
			fConst112: 0.0,
			fConst113: 0.0,
			fConst114: 0.0,
			fRec39: [0.0;3],
			fConst115: 0.0,
			fConst116: 0.0,
			fConst117: 0.0,
			fRec40: [0.0;3],
			fConst118: 0.0,
			fConst119: 0.0,
			fConst120: 0.0,
			fRec41: [0.0;3],
			fConst121: 0.0,
			fConst122: 0.0,
			fConst123: 0.0,
			fRec42: [0.0;3],
			fConst124: 0.0,
			fConst125: 0.0,
			fConst126: 0.0,
			fRec43: [0.0;3],
			fConst127: 0.0,
			fConst128: 0.0,
			fConst129: 0.0,
			fRec44: [0.0;3],
			fConst130: 0.0,
			fConst131: 0.0,
			fConst132: 0.0,
			fRec45: [0.0;3],
			fConst133: 0.0,
			fConst134: 0.0,
			fConst135: 0.0,
			fRec46: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'2',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'2',   'Keyboard 1 - Number of Keys':'2',  'Keyboard 0 - Send Freq':'0',   'Keyboard 1 - Send Freq':'0',  'Keyboard 0 - Piano Keyboard':'0',   'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 0 - Send Key Status':'1',  'Keyboard 1 - Send Key Status':'1',  'Keyboard 0 - Send X':'1',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send X':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 0 - Key 0 - Label':'English Bell',  'Keyboard 0 - Key 1 - Label':'French Bell',  'Keyboard 1 - Key 0 - Label':'German Bell',  'Keyboard 1 - Key 1 - Label':'Russian Bell' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "bells");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(350, &mut ftbl0mydspSIG0);
		let mut sig1: mydspSIG1 = newmydspSIG1();
		sig1.instanceInitmydspSIG1(samplingFreq);
		sig1.fillmydspSIG1(350, &mut ftbl1mydspSIG1);
		let mut sig2: mydspSIG2 = newmydspSIG2();
		sig2.instanceInitmydspSIG2(samplingFreq);
		sig2.fillmydspSIG2(350, &mut ftbl2mydspSIG2);
		let mut sig3: mydspSIG3 = newmydspSIG3();
		sig3.instanceInitmydspSIG3(samplingFreq);
		sig3.fillmydspSIG3(350, &mut ftbl3mydspSIG3);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 1.0;
		self.fHslider1 = 1.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iRec3[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.iVec1[l4 as usize] = 0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec4[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec6[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec8[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec9[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec10[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec12[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec13[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.iVec2[l16 as usize] = 0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec15[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec14[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec16[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec17[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec18[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec19[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 3) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec20[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec21[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec22[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec23[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec24[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.iVec3[l28 as usize] = 0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec26[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec25[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 3) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec27[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec28[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 3) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec29[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 3) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec30[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 3) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec31[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec32[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 3) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec33[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 3) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec34[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 3) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec35[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.iVec4[l40 as usize] = 0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec37[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec36[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 3) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec38[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 3) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec39[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec40[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 3) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec41[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 3) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec42[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec43[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec44[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 3) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec45[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 3) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec46[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((20420.3516 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (1.0 / (((self.fConst2 + 1.41421354) / self.fConst1) + 1.0));
		self.fConst4 = f32::tan((31.415926 / self.fConst0));
		self.fConst5 = (1.0 / self.fConst4);
		self.fConst6 = (1.0 / (((self.fConst5 + 1.41421354) / self.fConst4) + 1.0));
		self.fConst7 = (1.0 / mydsp_faustpower2_f(self.fConst4));
		self.fConst8 = (((self.fConst5 + -1.41421354) / self.fConst4) + 1.0);
		self.fConst9 = (2.0 * (1.0 - self.fConst7));
		self.fConst10 = (2.0 * (0.0 - self.fConst7));
		self.fConst11 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst1))));
		self.fConst12 = (((self.fConst2 + -1.41421354) / self.fConst1) + 1.0);
		self.fConst13 = (0.00200000009 * self.fConst0);
		self.fConst14 = (0.00100000005 * self.fConst0);
		self.fConst15 = (1000.0 / self.fConst0);
		self.fConst16 = f32::powf(0.00100000005, (1.0 / (20.3469906 * self.fConst0)));
		self.fConst17 = ((0.0 - (2.0 * self.fConst16)) * f32::cos((1630.04053 / self.fConst0)));
		self.fConst18 = mydsp_faustpower2_f(self.fConst16);
		self.fConst19 = f32::powf(0.00100000005, (1.0 / (20.2682228 * self.fConst0)));
		self.fConst20 = ((0.0 - (2.0 * self.fConst19)) * f32::cos((1645.28345 / self.fConst0)));
		self.fConst21 = mydsp_faustpower2_f(self.fConst19);
		self.fConst22 = f32::powf(0.00100000005, (1.0 / (13.6507998 * self.fConst0)));
		self.fConst23 = ((0.0 - (2.0 * self.fConst22)) * f32::cos((3099.69019 / self.fConst0)));
		self.fConst24 = mydsp_faustpower2_f(self.fConst22);
		self.fConst25 = f32::powf(0.00100000005, (1.0 / (13.6223917 * self.fConst0)));
		self.fConst26 = ((0.0 - (2.0 * self.fConst25)) * f32::cos((3106.85913 / self.fConst0)));
		self.fConst27 = mydsp_faustpower2_f(self.fConst25);
		self.fConst28 = f32::powf(0.00100000005, (1.0 / (11.0956459 * self.fConst0)));
		self.fConst29 = ((0.0 - (2.0 * self.fConst28)) * f32::cos((3789.06226 / self.fConst0)));
		self.fConst30 = mydsp_faustpower2_f(self.fConst28);
		self.fConst31 = f32::powf(0.00100000005, (1.0 / (11.0589275 * self.fConst0)));
		self.fConst32 = ((0.0 - (2.0 * self.fConst31)) * f32::cos((3799.70605 / self.fConst0)));
		self.fConst33 = mydsp_faustpower2_f(self.fConst31);
		self.fConst34 = f32::powf(0.00100000005, (1.0 / (8.6621294 * self.fConst0)));
		self.fConst35 = ((0.0 - (2.0 * self.fConst34)) * f32::cos((4552.58252 / self.fConst0)));
		self.fConst36 = mydsp_faustpower2_f(self.fConst34);
		self.fConst37 = f32::powf(0.00100000005, (1.0 / (8.6582489 * self.fConst0)));
		self.fConst38 = ((0.0 - (2.0 * self.fConst37)) * f32::cos((4553.9082 / self.fConst0)));
		self.fConst39 = mydsp_faustpower2_f(self.fConst37);
		self.fConst40 = f32::powf(0.00100000005, (1.0 / (7.56375885 * self.fConst0)));
		self.fConst41 = ((0.0 - (2.0 * self.fConst40)) * f32::cos((4944.77246 / self.fConst0)));
		self.fConst42 = mydsp_faustpower2_f(self.fConst40);
		self.fConst43 = f32::powf(0.00100000005, (1.0 / (5.38026142 * self.fConst0)));
		self.fConst44 = ((0.0 - (2.0 * self.fConst43)) * f32::cos((5855.25635 / self.fConst0)));
		self.fConst45 = mydsp_faustpower2_f(self.fConst43);
		self.fConst46 = f32::powf(0.00100000005, (1.0 / (17.0404034 * self.fConst0)));
		self.fConst47 = ((0.0 - (2.0 * self.fConst46)) * f32::cos((2758.80225 / self.fConst0)));
		self.fConst48 = mydsp_faustpower2_f(self.fConst46);
		self.fConst49 = f32::powf(0.00100000005, (1.0 / (17.0107555 * self.fConst0)));
		self.fConst50 = ((0.0 - (2.0 * self.fConst49)) * f32::cos((2766.51782 / self.fConst0)));
		self.fConst51 = mydsp_faustpower2_f(self.fConst49);
		self.fConst52 = f32::powf(0.00100000005, (1.0 / (13.3085108 * self.fConst0)));
		self.fConst53 = ((0.0 - (2.0 * self.fConst52)) * f32::cos((3810.4502 / self.fConst0)));
		self.fConst54 = mydsp_faustpower2_f(self.fConst52);
		self.fConst55 = f32::powf(0.00100000005, (1.0 / (13.1997375 * self.fConst0)));
		self.fConst56 = ((0.0 - (2.0 * self.fConst55)) * f32::cos((3843.90186 / self.fConst0)));
		self.fConst57 = mydsp_faustpower2_f(self.fConst55);
		self.fConst58 = f32::powf(0.00100000005, (1.0 / (11.3049049 * self.fConst0)));
		self.fConst59 = ((0.0 - (2.0 * self.fConst58)) * f32::cos((4458.65527 / self.fConst0)));
		self.fConst60 = mydsp_faustpower2_f(self.fConst58);
		self.fConst61 = f32::powf(0.00100000005, (1.0 / (11.300128 * self.fConst0)));
		self.fConst62 = ((0.0 - (2.0 * self.fConst61)) * f32::cos((4460.28857 / self.fConst0)));
		self.fConst63 = mydsp_faustpower2_f(self.fConst61);
		self.fConst64 = f32::powf(0.00100000005, (1.0 / (8.80774784 * self.fConst0)));
		self.fConst65 = ((0.0 - (2.0 * self.fConst64)) * f32::cos((5384.47607 / self.fConst0)));
		self.fConst66 = mydsp_faustpower2_f(self.fConst64);
		self.fConst67 = f32::powf(0.00100000005, (1.0 / (8.16906738 * self.fConst0)));
		self.fConst68 = ((0.0 - (2.0 * self.fConst67)) * f32::cos((5648.90381 / self.fConst0)));
		self.fConst69 = mydsp_faustpower2_f(self.fConst67);
		self.fConst70 = f32::powf(0.00100000005, (1.0 / (5.95891714 * self.fConst0)));
		self.fConst71 = ((0.0 - (2.0 * self.fConst70)) * f32::cos((6687.63379 / self.fConst0)));
		self.fConst72 = mydsp_faustpower2_f(self.fConst70);
		self.fConst73 = f32::powf(0.00100000005, (1.0 / (5.95436192 * self.fConst0)));
		self.fConst74 = ((0.0 - (2.0 * self.fConst73)) * f32::cos((6690.02148 / self.fConst0)));
		self.fConst75 = mydsp_faustpower2_f(self.fConst73);
		self.fConst76 = f32::powf(0.00100000005, (1.0 / (21.8895645 * self.fConst0)));
		self.fConst77 = ((0.0 - (2.0 * self.fConst76)) * f32::cos((1501.1095 / self.fConst0)));
		self.fConst78 = mydsp_faustpower2_f(self.fConst76);
		self.fConst79 = f32::powf(0.00100000005, (1.0 / (21.8487759 * self.fConst0)));
		self.fConst80 = ((0.0 - (2.0 * self.fConst79)) * f32::cos((1509.44104 / self.fConst0)));
		self.fConst81 = mydsp_faustpower2_f(self.fConst79);
		self.fConst82 = f32::powf(0.00100000005, (1.0 / (17.0969524 * self.fConst0)));
		self.fConst83 = ((0.0 - (2.0 * self.fConst82)) * f32::cos((2552.54395 / self.fConst0)));
		self.fConst84 = mydsp_faustpower2_f(self.fConst82);
		self.fConst85 = f32::powf(0.00100000005, (1.0 / (17.0448818 * self.fConst0)));
		self.fConst86 = ((0.0 - (2.0 * self.fConst85)) * f32::cos((2564.88428 / self.fConst0)));
		self.fConst87 = mydsp_faustpower2_f(self.fConst85);
		self.fConst88 = f32::powf(0.00100000005, (1.0 / (13.2791166 * self.fConst0)));
		self.fConst89 = ((0.0 - (2.0 * self.fConst88)) * f32::cos((3525.52661 / self.fConst0)));
		self.fConst90 = mydsp_faustpower2_f(self.fConst88);
		self.fConst91 = f32::powf(0.00100000005, (1.0 / (13.2376995 * self.fConst0)));
		self.fConst92 = ((0.0 - (2.0 * self.fConst91)) * f32::cos((3536.94946 / self.fConst0)));
		self.fConst93 = mydsp_faustpower2_f(self.fConst91);
		self.fConst94 = f32::powf(0.00100000005, (1.0 / (9.3884573 * self.fConst0)));
		self.fConst95 = ((0.0 - (2.0 * self.fConst94)) * f32::cos((4710.07666 / self.fConst0)));
		self.fConst96 = mydsp_faustpower2_f(self.fConst94);
		self.fConst97 = f32::powf(0.00100000005, (1.0 / (9.38386536 * self.fConst0)));
		self.fConst98 = ((0.0 - (2.0 * self.fConst97)) * f32::cos((4711.63477 / self.fConst0)));
		self.fConst99 = mydsp_faustpower2_f(self.fConst97);
		self.fConst100 = f32::powf(0.00100000005, (1.0 / (8.81131077 * self.fConst0)));
		self.fConst101 = ((0.0 - (2.0 * self.fConst100)) * f32::cos((4909.61182 / self.fConst0)));
		self.fConst102 = mydsp_faustpower2_f(self.fConst100);
		self.fConst103 = f32::powf(0.00100000005, (1.0 / (8.47139359 * self.fConst0)));
		self.fConst104 = ((0.0 - (2.0 * self.fConst103)) * f32::cos((5030.8208 / self.fConst0)));
		self.fConst105 = mydsp_faustpower2_f(self.fConst103);
		self.fConst106 = f32::powf(0.00100000005, (1.0 / (20.8901539 * self.fConst0)));
		self.fConst107 = ((0.0 - (2.0 * self.fConst106)) * f32::cos((857.598267 / self.fConst0)));
		self.fConst108 = mydsp_faustpower2_f(self.fConst106);
		self.fConst109 = f32::powf(0.00100000005, (1.0 / (20.860672 * self.fConst0)));
		self.fConst110 = ((0.0 - (2.0 * self.fConst109)) * f32::cos((860.746094 / self.fConst0)));
		self.fConst111 = mydsp_faustpower2_f(self.fConst109);
		self.fConst112 = f32::powf(0.00100000005, (1.0 / (14.4779148 * self.fConst0)));
		self.fConst113 = ((0.0 - (2.0 * self.fConst112)) * f32::cos((1627.08105 / self.fConst0)));
		self.fConst114 = mydsp_faustpower2_f(self.fConst112);
		self.fConst115 = f32::powf(0.00100000005, (1.0 / (14.4106588 * self.fConst0)));
		self.fConst116 = ((0.0 - (2.0 * self.fConst115)) * f32::cos((1636.26086 / self.fConst0)));
		self.fConst117 = mydsp_faustpower2_f(self.fConst115);
		self.fConst118 = f32::powf(0.00100000005, (1.0 / (11.9841108 * self.fConst0)));
		self.fConst119 = ((0.0 - (2.0 * self.fConst118)) * f32::cos((1988.55908 / self.fConst0)));
		self.fConst120 = mydsp_faustpower2_f(self.fConst118);
		self.fConst121 = f32::powf(0.00100000005, (1.0 / (11.9061594 * self.fConst0)));
		self.fConst122 = ((0.0 - (2.0 * self.fConst121)) * f32::cos((2000.63538 / self.fConst0)));
		self.fConst123 = mydsp_faustpower2_f(self.fConst121);
		self.fConst124 = f32::powf(0.00100000005, (1.0 / (9.10661697 * self.fConst0)));
		self.fConst125 = ((0.0 - (2.0 * self.fConst124)) * f32::cos((2474.64502 / self.fConst0)));
		self.fConst126 = mydsp_faustpower2_f(self.fConst124);
		self.fConst127 = f32::powf(0.00100000005, (1.0 / (9.10333347 * self.fConst0)));
		self.fConst128 = ((0.0 - (2.0 * self.fConst127)) * f32::cos((2475.25464 / self.fConst0)));
		self.fConst129 = mydsp_faustpower2_f(self.fConst127);
		self.fConst130 = f32::powf(0.00100000005, (1.0 / (7.19911861 * self.fConst0)));
		self.fConst131 = ((0.0 - (2.0 * self.fConst130)) * f32::cos((2856.81982 / self.fConst0)));
		self.fConst132 = mydsp_faustpower2_f(self.fConst130);
		self.fConst133 = f32::powf(0.00100000005, (1.0 / (6.83458185 * self.fConst0)));
		self.fConst134 = ((0.0 - (2.0 * self.fConst133)) * f32::cos((2937.34521 / self.fConst0)));
		self.fConst135 = mydsp_faustpower2_f(self.fConst133);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("bells");
		ui_interface.addHorizontalSlider("kb0k0status", &mut self.fHslider2, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb0k1status", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k0status", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k1status", &mut self.fHslider5, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("x", &mut self.fHslider0, 1.0, 0.0, 1.0, 0.001);
		ui_interface.addHorizontalSlider("y", &mut self.fHslider1, 1.0, 0.0, 1.0, 0.001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = (10 * ((6.0 * f32::min(f32::abs(((2.0 * (self.fHslider0 as f32)) + -1.0)), f32::abs(((2.0 * (self.fHslider1 as f32)) + -1.0)))) as i32));
		let mut iSlow1: i32 = (f32::min(1.0, (self.fHslider2 as f32)) as i32);
		let mut iSlow2: i32 = (iSlow0 + 1);
		let mut iSlow3: i32 = (iSlow0 + 2);
		let mut iSlow4: i32 = (iSlow0 + 3);
		let mut iSlow5: i32 = (iSlow0 + 4);
		let mut iSlow6: i32 = (iSlow0 + 5);
		let mut iSlow7: i32 = (iSlow0 + 6);
		let mut iSlow8: i32 = (iSlow0 + 7);
		let mut iSlow9: i32 = (iSlow0 + 8);
		let mut iSlow10: i32 = (iSlow0 + 9);
		let mut iSlow11: i32 = (f32::min(1.0, (self.fHslider3 as f32)) as i32);
		let mut iSlow12: i32 = (f32::min(1.0, (self.fHslider4 as f32)) as i32);
		let mut iSlow13: i32 = (f32::min(1.0, (self.fHslider5 as f32)) as i32);
		let mut i: i32 = 0;
		loop {
			self.fVec0[0] = self.fConst0;
			self.iRec3[0] = ((1103515245 * self.iRec3[1]) + 12345);
			self.fRec2[0] = ((4.65661287e-10 * (self.iRec3[0] as f32)) - (self.fConst6 * ((self.fConst8 * self.fRec2[2]) + (self.fConst9 * self.fRec2[1]))));
			self.fRec1[0] = ((self.fConst6 * (((self.fConst7 * self.fRec2[0]) + (self.fConst10 * self.fRec2[1])) + (self.fConst7 * self.fRec2[2]))) - (self.fConst3 * ((self.fConst11 * self.fRec1[1]) + (self.fConst12 * self.fRec1[2]))));
			let mut fTemp0: f32 = (self.fRec1[2] + (self.fRec1[0] + (2.0 * self.fRec1[1])));
			self.iVec1[0] = iSlow1;
			let mut fTemp1: f32 = (0.00200000009 * (self.fConst0 - self.fVec0[1]));
			self.fRec4[0] = if ((((((iSlow1 - self.iVec1[1]) > 0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst13, ((self.fRec4[1] + fTemp1) + 1.0)) };
			let mut iTemp2: i32 = ((self.fRec4[0] < self.fConst14) as i32);
			let mut fTemp3: f32 = (self.fConst3 * (fTemp0 * if (iTemp2 as i32 == 1) { if (((self.fRec4[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp2 as i32 == 1) { (self.fConst15 * self.fRec4[0]) } else { 1.0 } } } else { if (((self.fRec4[0] < self.fConst13) as i32) as i32 == 1) { ((self.fConst15 * (0.0 - (self.fRec4[0] - self.fConst14))) + 1.0) } else { 0.0 } }));
			self.fRec0[0] = (fTemp3 - ((self.fConst17 * self.fRec0[1]) + (self.fConst18 * self.fRec0[2])));
			self.fRec5[0] = (fTemp3 - ((self.fConst20 * self.fRec5[1]) + (self.fConst21 * self.fRec5[2])));
			self.fRec6[0] = (fTemp3 - ((self.fConst23 * self.fRec6[1]) + (self.fConst24 * self.fRec6[2])));
			self.fRec7[0] = (fTemp3 - ((self.fConst26 * self.fRec7[1]) + (self.fConst27 * self.fRec7[2])));
			self.fRec8[0] = (fTemp3 - ((self.fConst29 * self.fRec8[1]) + (self.fConst30 * self.fRec8[2])));
			self.fRec9[0] = (fTemp3 - ((self.fConst32 * self.fRec9[1]) + (self.fConst33 * self.fRec9[2])));
			self.fRec10[0] = (fTemp3 - ((self.fConst35 * self.fRec10[1]) + (self.fConst36 * self.fRec10[2])));
			self.fRec11[0] = (fTemp3 - ((self.fConst38 * self.fRec11[1]) + (self.fConst39 * self.fRec11[2])));
			self.fRec12[0] = (fTemp3 - ((self.fConst41 * self.fRec12[1]) + (self.fConst42 * self.fRec12[2])));
			self.fRec13[0] = (fTemp3 - ((self.fConst44 * self.fRec13[1]) + (self.fConst45 * self.fRec13[2])));
			self.iVec2[0] = iSlow11;
			self.fRec15[0] = if ((((((iSlow11 - self.iVec2[1]) > 0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst13, ((fTemp1 + self.fRec15[1]) + 1.0)) };
			let mut iTemp4: i32 = ((self.fRec15[0] < self.fConst14) as i32);
			let mut fTemp5: f32 = (self.fConst3 * (fTemp0 * if (iTemp4 as i32 == 1) { if (((self.fRec15[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp4 as i32 == 1) { (self.fConst15 * self.fRec15[0]) } else { 1.0 } } } else { if (((self.fRec15[0] < self.fConst13) as i32) as i32 == 1) { ((self.fConst15 * (0.0 - (self.fRec15[0] - self.fConst14))) + 1.0) } else { 0.0 } }));
			self.fRec14[0] = (fTemp5 - ((self.fConst47 * self.fRec14[1]) + (self.fConst48 * self.fRec14[2])));
			self.fRec16[0] = (fTemp5 - ((self.fConst50 * self.fRec16[1]) + (self.fConst51 * self.fRec16[2])));
			self.fRec17[0] = (fTemp5 - ((self.fConst53 * self.fRec17[1]) + (self.fConst54 * self.fRec17[2])));
			self.fRec18[0] = (fTemp5 - ((self.fConst56 * self.fRec18[1]) + (self.fConst57 * self.fRec18[2])));
			self.fRec19[0] = (fTemp5 - ((self.fConst59 * self.fRec19[1]) + (self.fConst60 * self.fRec19[2])));
			self.fRec20[0] = (fTemp5 - ((self.fConst62 * self.fRec20[1]) + (self.fConst63 * self.fRec20[2])));
			self.fRec21[0] = (fTemp5 - ((self.fConst65 * self.fRec21[1]) + (self.fConst66 * self.fRec21[2])));
			self.fRec22[0] = (fTemp5 - ((self.fConst68 * self.fRec22[1]) + (self.fConst69 * self.fRec22[2])));
			self.fRec23[0] = (fTemp5 - ((self.fConst71 * self.fRec23[1]) + (self.fConst72 * self.fRec23[2])));
			self.fRec24[0] = (fTemp5 - ((self.fConst74 * self.fRec24[1]) + (self.fConst75 * self.fRec24[2])));
			self.iVec3[0] = iSlow12;
			self.fRec26[0] = if ((((((iSlow12 - self.iVec3[1]) > 0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst13, ((fTemp1 + self.fRec26[1]) + 1.0)) };
			let mut iTemp6: i32 = ((self.fRec26[0] < self.fConst14) as i32);
			let mut fTemp7: f32 = (self.fConst3 * (fTemp0 * if (iTemp6 as i32 == 1) { if (((self.fRec26[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp6 as i32 == 1) { (self.fConst15 * self.fRec26[0]) } else { 1.0 } } } else { if (((self.fRec26[0] < self.fConst13) as i32) as i32 == 1) { ((self.fConst15 * (0.0 - (self.fRec26[0] - self.fConst14))) + 1.0) } else { 0.0 } }));
			self.fRec25[0] = (fTemp7 - ((self.fConst77 * self.fRec25[1]) + (self.fConst78 * self.fRec25[2])));
			self.fRec27[0] = (fTemp7 - ((self.fConst80 * self.fRec27[1]) + (self.fConst81 * self.fRec27[2])));
			self.fRec28[0] = (fTemp7 - ((self.fConst83 * self.fRec28[1]) + (self.fConst84 * self.fRec28[2])));
			self.fRec29[0] = (fTemp7 - ((self.fConst86 * self.fRec29[1]) + (self.fConst87 * self.fRec29[2])));
			self.fRec30[0] = (fTemp7 - ((self.fConst89 * self.fRec30[1]) + (self.fConst90 * self.fRec30[2])));
			self.fRec31[0] = (fTemp7 - ((self.fConst92 * self.fRec31[1]) + (self.fConst93 * self.fRec31[2])));
			self.fRec32[0] = (fTemp7 - ((self.fConst95 * self.fRec32[1]) + (self.fConst96 * self.fRec32[2])));
			self.fRec33[0] = (fTemp7 - ((self.fConst98 * self.fRec33[1]) + (self.fConst99 * self.fRec33[2])));
			self.fRec34[0] = (fTemp7 - ((self.fConst101 * self.fRec34[1]) + (self.fConst102 * self.fRec34[2])));
			self.fRec35[0] = (fTemp7 - ((self.fConst104 * self.fRec35[1]) + (self.fConst105 * self.fRec35[2])));
			self.iVec4[0] = iSlow13;
			self.fRec37[0] = if ((((((iSlow13 - self.iVec4[1]) > 0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst13, ((fTemp1 + self.fRec37[1]) + 1.0)) };
			let mut iTemp8: i32 = ((self.fRec37[0] < self.fConst14) as i32);
			let mut fTemp9: f32 = (self.fConst3 * (fTemp0 * if (iTemp8 as i32 == 1) { if (((self.fRec37[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp8 as i32 == 1) { (self.fConst15 * self.fRec37[0]) } else { 1.0 } } } else { if (((self.fRec37[0] < self.fConst13) as i32) as i32 == 1) { ((self.fConst15 * (0.0 - (self.fRec37[0] - self.fConst14))) + 1.0) } else { 0.0 } }));
			self.fRec36[0] = (fTemp9 - ((self.fConst107 * self.fRec36[1]) + (self.fConst108 * self.fRec36[2])));
			self.fRec38[0] = (fTemp9 - ((self.fConst110 * self.fRec38[1]) + (self.fConst111 * self.fRec38[2])));
			self.fRec39[0] = (fTemp9 - ((self.fConst113 * self.fRec39[1]) + (self.fConst114 * self.fRec39[2])));
			self.fRec40[0] = (fTemp9 - ((self.fConst116 * self.fRec40[1]) + (self.fConst117 * self.fRec40[2])));
			self.fRec41[0] = (fTemp9 - ((self.fConst119 * self.fRec41[1]) + (self.fConst120 * self.fRec41[2])));
			self.fRec42[0] = (fTemp9 - ((self.fConst122 * self.fRec42[1]) + (self.fConst123 * self.fRec42[2])));
			self.fRec43[0] = (fTemp9 - ((self.fConst125 * self.fRec43[1]) + (self.fConst126 * self.fRec43[2])));
			self.fRec44[0] = (fTemp9 - ((self.fConst128 * self.fRec44[1]) + (self.fConst129 * self.fRec44[2])));
			self.fRec45[0] = (fTemp9 - ((self.fConst131 * self.fRec45[1]) + (self.fConst132 * self.fRec45[2])));
			self.fRec46[0] = (fTemp9 - ((self.fConst134 * self.fRec46[1]) + (self.fConst135 * self.fRec46[2])));
			let mut fTemp10: f32 = (0.0199999996 * (((((((((((((ftbl0mydspSIG0[iSlow0 as usize] * (self.fRec0[0] - self.fRec0[2])) + (ftbl0mydspSIG0[iSlow2 as usize] * (self.fRec5[0] - self.fRec5[2]))) + (ftbl0mydspSIG0[iSlow3 as usize] * (self.fRec6[0] - self.fRec6[2]))) + (ftbl0mydspSIG0[iSlow4 as usize] * (self.fRec7[0] - self.fRec7[2]))) + (ftbl0mydspSIG0[iSlow5 as usize] * (self.fRec8[0] - self.fRec8[2]))) + (ftbl0mydspSIG0[iSlow6 as usize] * (self.fRec9[0] - self.fRec9[2]))) + (ftbl0mydspSIG0[iSlow7 as usize] * (self.fRec10[0] - self.fRec10[2]))) + (ftbl0mydspSIG0[iSlow8 as usize] * (self.fRec11[0] - self.fRec11[2]))) + (ftbl0mydspSIG0[iSlow9 as usize] * (self.fRec12[0] - self.fRec12[2]))) + (ftbl0mydspSIG0[iSlow10 as usize] * (self.fRec13[0] - self.fRec13[2]))) + ((((((((((ftbl1mydspSIG1[iSlow0 as usize] * (self.fRec14[0] - self.fRec14[2])) + (ftbl1mydspSIG1[iSlow2 as usize] * (self.fRec16[0] - self.fRec16[2]))) + (ftbl1mydspSIG1[iSlow3 as usize] * (self.fRec17[0] - self.fRec17[2]))) + (ftbl1mydspSIG1[iSlow4 as usize] * (self.fRec18[0] - self.fRec18[2]))) + (ftbl1mydspSIG1[iSlow5 as usize] * (self.fRec19[0] - self.fRec19[2]))) + (ftbl1mydspSIG1[iSlow6 as usize] * (self.fRec20[0] - self.fRec20[2]))) + (ftbl1mydspSIG1[iSlow7 as usize] * (self.fRec21[0] - self.fRec21[2]))) + (ftbl1mydspSIG1[iSlow8 as usize] * (self.fRec22[0] - self.fRec22[2]))) + (ftbl1mydspSIG1[iSlow9 as usize] * (self.fRec23[0] - self.fRec23[2]))) + (ftbl1mydspSIG1[iSlow10 as usize] * (self.fRec24[0] - self.fRec24[2])))) + ((((((((((ftbl2mydspSIG2[iSlow0 as usize] * (self.fRec25[0] - self.fRec25[2])) + (ftbl2mydspSIG2[iSlow2 as usize] * (self.fRec27[0] - self.fRec27[2]))) + (ftbl2mydspSIG2[iSlow3 as usize] * (self.fRec28[0] - self.fRec28[2]))) + (ftbl2mydspSIG2[iSlow4 as usize] * (self.fRec29[0] - self.fRec29[2]))) + (ftbl2mydspSIG2[iSlow5 as usize] * (self.fRec30[0] - self.fRec30[2]))) + (ftbl2mydspSIG2[iSlow6 as usize] * (self.fRec31[0] - self.fRec31[2]))) + (ftbl2mydspSIG2[iSlow7 as usize] * (self.fRec32[0] - self.fRec32[2]))) + (ftbl2mydspSIG2[iSlow8 as usize] * (self.fRec33[0] - self.fRec33[2]))) + (ftbl2mydspSIG2[iSlow9 as usize] * (self.fRec34[0] - self.fRec34[2]))) + (ftbl2mydspSIG2[iSlow10 as usize] * (self.fRec35[0] - self.fRec35[2])))) + ((((((((((ftbl3mydspSIG3[iSlow0 as usize] * (self.fRec36[0] - self.fRec36[2])) + (ftbl3mydspSIG3[iSlow2 as usize] * (self.fRec38[0] - self.fRec38[2]))) + (ftbl3mydspSIG3[iSlow3 as usize] * (self.fRec39[0] - self.fRec39[2]))) + (ftbl3mydspSIG3[iSlow4 as usize] * (self.fRec40[0] - self.fRec40[2]))) + (ftbl3mydspSIG3[iSlow5 as usize] * (self.fRec41[0] - self.fRec41[2]))) + (ftbl3mydspSIG3[iSlow6 as usize] * (self.fRec42[0] - self.fRec42[2]))) + (ftbl3mydspSIG3[iSlow7 as usize] * (self.fRec43[0] - self.fRec43[2]))) + (ftbl3mydspSIG3[iSlow8 as usize] * (self.fRec44[0] - self.fRec44[2]))) + (ftbl3mydspSIG3[iSlow9 as usize] * (self.fRec45[0] - self.fRec45[2]))) + (ftbl3mydspSIG3[iSlow10 as usize] * (self.fRec46[0] - self.fRec46[2])))));
			outputs[0][i as usize] = (fTemp10 as f32);
			outputs[1][i as usize] = (fTemp10 as f32);
			self.fVec0[1] = self.fVec0[0];
			self.iRec3[1] = self.iRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.iVec1[1] = self.iVec1[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.iVec2[1] = self.iVec2[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec16[2] = self.fRec16[1];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[2] = self.fRec23[1];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[2] = self.fRec24[1];
			self.fRec24[1] = self.fRec24[0];
			self.iVec3[1] = self.iVec3[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec27[2] = self.fRec27[1];
			self.fRec27[1] = self.fRec27[0];
			self.fRec28[2] = self.fRec28[1];
			self.fRec28[1] = self.fRec28[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[2] = self.fRec30[1];
			self.fRec30[1] = self.fRec30[0];
			self.fRec31[2] = self.fRec31[1];
			self.fRec31[1] = self.fRec31[0];
			self.fRec32[2] = self.fRec32[1];
			self.fRec32[1] = self.fRec32[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec34[2] = self.fRec34[1];
			self.fRec34[1] = self.fRec34[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.iVec4[1] = self.iVec4[0];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec39[2] = self.fRec39[1];
			self.fRec39[1] = self.fRec39[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

