


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fVec0: [f32;2],
	fHslider0: f32,
	fConst1: f32,
	fHslider1: f32,
	iRec2: [i32;2],
	fButton0: f32,
	fVec1: [f32;2],
	fConst2: f32,
	fRec3: [f32;2],
	fConst3: f32,
	IOTA: i32,
	fVec2: [f32;2048],
	fRec0: [f32;2],
	fRec1: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fVec0: [0.0;2],
			fHslider0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			iRec2: [0;2],
			fButton0: 0.0,
			fVec1: [0.0;2],
			fConst2: 0.0,
			fRec3: [0.0;2],
			fConst3: 0.0,
			IOTA: 0,
			fVec2: [0.0;2048],
			fRec0: [0.0;2],
			fRec1: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Lowest Key':'40',  'Keyboard 1 - Lowest Key':'45',  'Keyboard 2 - Lowest Key':'50',  'Keyboard 3 - Lowest Key':'55',  'Keyboard 4 - Lowest Key':'60',  'Keyboard 5 - Lowest Key':'65',  'Keyboard 6 - Lowest Key':'70',  'Keyboard 7 - Lowest Key':'75',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "harp");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("synths.lib/name", "Faust Synthesizer Library");
		m.declare("synths.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 400.0;
		self.fHslider1 = 2.0;
		self.fButton0 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iRec2[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec3[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l4: i32 = 0;
		loop {
			self.fVec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2048) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec0[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec1[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1000.0 / self.fConst0);
		self.fConst2 = (0.00200000009 * self.fConst0);
		self.fConst3 = (0.00100000005 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("harp");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider0, 400.0, 50.0, 2000.0, 0.01);
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.declare(&mut self.fHslider1, "acc", "0 0 -10 0 10");
		ui_interface.addHorizontalSlider("res", &mut self.fHslider1, 2.0, 0.10000000000000001, 4.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fConst0 / (self.fHslider0 as f32));
		let mut fSlow1: f32 = (fSlow0 + -1.0);
		let mut fSlow2: f32 = f32::floor(fSlow1);
		let mut fSlow3: f32 = (fSlow2 + (2.0 - fSlow0));
		let mut fSlow4: f32 = f32::exp((0.0 - (self.fConst1 / (self.fHslider1 as f32))));
		let mut fSlow5: f32 = (self.fButton0 as f32);
		let mut iSlow6: i32 = (fSlow1 as i32);
		let mut iSlow7: i32 = std::cmp::min(1025, std::cmp::max(0, iSlow6));
		let mut fSlow8: f32 = (fSlow0 + (-1.0 - fSlow2));
		let mut iSlow9: i32 = std::cmp::min(1025, std::cmp::max(0, (iSlow6 + 1)));
		let mut i: i32 = 0;
		loop {
			self.fVec0[0] = self.fConst0;
			self.iRec2[0] = ((1103515245 * self.iRec2[1]) + 12345);
			self.fVec1[0] = fSlow5;
			self.fRec3[0] = if ((((((fSlow5 - self.fVec1[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst2, ((self.fRec3[1] + (0.00200000009 * (self.fConst0 - self.fVec0[1]))) + 1.0)) };
			let mut iTemp0: i32 = ((self.fRec3[0] < self.fConst3) as i32);
			let mut fTemp1: f32 = ((fSlow4 * self.fRec0[1]) + (4.65661287e-10 * ((self.iRec2[0] as f32) * if (iTemp0 as i32 == 1) { if (((self.fRec3[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp0 as i32 == 1) { (self.fConst1 * self.fRec3[0]) } else { 1.0 } } } else { if (((self.fRec3[0] < self.fConst2) as i32) as i32 == 1) { ((self.fConst1 * (0.0 - (self.fRec3[0] - self.fConst3))) + 1.0) } else { 0.0 } })));
			self.fVec2[(self.IOTA & 2047) as usize] = fTemp1;
			self.fRec0[0] = ((fSlow3 * self.fVec2[((self.IOTA - iSlow7) & 2047) as usize]) + (fSlow8 * self.fVec2[((self.IOTA - iSlow9) & 2047) as usize]));
			self.fRec1[0] = fTemp1;
			outputs[0][i as usize] = (self.fRec1[1] as f32);
			self.fVec0[1] = self.fVec0[0];
			self.iRec2[1] = self.iRec2[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec3[1] = self.fRec3[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

