
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fVslider0: f32,
	fRec0: [f32;2],
	fVslider1: f32,
	fRec1: [f32;2],
	IOTA: i32,
	fVec0: [f32;16384],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fVslider2: f32,
	fVslider3: f32,
	fVslider4: f32,
	fVslider5: f32,
	fConst2: f32,
	fConst3: f32,
	fVslider6: f32,
	fConst4: f32,
	fVslider7: f32,
	fVslider8: f32,
	fConst5: f32,
	fVslider9: f32,
	fRec15: [f32;2],
	fRec14: [f32;2],
	fVec1: [f32;32768],
	fConst6: f32,
	iConst7: i32,
	fVec2: [f32;16384],
	fConst8: f32,
	fVslider10: f32,
	fVec3: [f32;2048],
	iConst9: i32,
	fRec12: [f32;2],
	fConst10: f32,
	fConst11: f32,
	fRec19: [f32;2],
	fRec18: [f32;2],
	fVec4: [f32;32768],
	fConst12: f32,
	iConst13: i32,
	fVec5: [f32;4096],
	iConst14: i32,
	fRec16: [f32;2],
	fConst15: f32,
	fConst16: f32,
	fRec23: [f32;2],
	fRec22: [f32;2],
	fVec6: [f32;16384],
	fConst17: f32,
	iConst18: i32,
	fVec7: [f32;4096],
	iConst19: i32,
	fRec20: [f32;2],
	fConst20: f32,
	fConst21: f32,
	fRec27: [f32;2],
	fRec26: [f32;2],
	fVec8: [f32;32768],
	fConst22: f32,
	iConst23: i32,
	fVec9: [f32;4096],
	iConst24: i32,
	fRec24: [f32;2],
	fConst25: f32,
	fConst26: f32,
	fRec31: [f32;2],
	fRec30: [f32;2],
	fVec10: [f32;16384],
	fConst27: f32,
	iConst28: i32,
	fVec11: [f32;2048],
	iConst29: i32,
	fRec28: [f32;2],
	fConst30: f32,
	fConst31: f32,
	fRec35: [f32;2],
	fRec34: [f32;2],
	fVec12: [f32;16384],
	fConst32: f32,
	iConst33: i32,
	fVec13: [f32;4096],
	iConst34: i32,
	fRec32: [f32;2],
	fConst35: f32,
	fConst36: f32,
	fRec39: [f32;2],
	fRec38: [f32;2],
	fVec14: [f32;16384],
	fConst37: f32,
	iConst38: i32,
	fVec15: [f32;4096],
	iConst39: i32,
	fRec36: [f32;2],
	fConst40: f32,
	fConst41: f32,
	fRec43: [f32;2],
	fRec42: [f32;2],
	fVec16: [f32;16384],
	fConst42: f32,
	iConst43: i32,
	fVec17: [f32;2048],
	iConst44: i32,
	fRec40: [f32;2],
	fRec4: [f32;3],
	fRec5: [f32;3],
	fRec6: [f32;3],
	fRec7: [f32;3],
	fRec8: [f32;3],
	fRec9: [f32;3],
	fRec10: [f32;3],
	fRec11: [f32;3],
	fRec3: [f32;3],
	fRec2: [f32;3],
	fRec45: [f32;3],
	fRec44: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fVslider0: 0.0,
			fRec0: [0.0;2],
			fVslider1: 0.0,
			fRec1: [0.0;2],
			IOTA: 0,
			fVec0: [0.0;16384],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fVslider2: 0.0,
			fVslider3: 0.0,
			fVslider4: 0.0,
			fVslider5: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fVslider6: 0.0,
			fConst4: 0.0,
			fVslider7: 0.0,
			fVslider8: 0.0,
			fConst5: 0.0,
			fVslider9: 0.0,
			fRec15: [0.0;2],
			fRec14: [0.0;2],
			fVec1: [0.0;32768],
			fConst6: 0.0,
			iConst7: 0,
			fVec2: [0.0;16384],
			fConst8: 0.0,
			fVslider10: 0.0,
			fVec3: [0.0;2048],
			iConst9: 0,
			fRec12: [0.0;2],
			fConst10: 0.0,
			fConst11: 0.0,
			fRec19: [0.0;2],
			fRec18: [0.0;2],
			fVec4: [0.0;32768],
			fConst12: 0.0,
			iConst13: 0,
			fVec5: [0.0;4096],
			iConst14: 0,
			fRec16: [0.0;2],
			fConst15: 0.0,
			fConst16: 0.0,
			fRec23: [0.0;2],
			fRec22: [0.0;2],
			fVec6: [0.0;16384],
			fConst17: 0.0,
			iConst18: 0,
			fVec7: [0.0;4096],
			iConst19: 0,
			fRec20: [0.0;2],
			fConst20: 0.0,
			fConst21: 0.0,
			fRec27: [0.0;2],
			fRec26: [0.0;2],
			fVec8: [0.0;32768],
			fConst22: 0.0,
			iConst23: 0,
			fVec9: [0.0;4096],
			iConst24: 0,
			fRec24: [0.0;2],
			fConst25: 0.0,
			fConst26: 0.0,
			fRec31: [0.0;2],
			fRec30: [0.0;2],
			fVec10: [0.0;16384],
			fConst27: 0.0,
			iConst28: 0,
			fVec11: [0.0;2048],
			iConst29: 0,
			fRec28: [0.0;2],
			fConst30: 0.0,
			fConst31: 0.0,
			fRec35: [0.0;2],
			fRec34: [0.0;2],
			fVec12: [0.0;16384],
			fConst32: 0.0,
			iConst33: 0,
			fVec13: [0.0;4096],
			iConst34: 0,
			fRec32: [0.0;2],
			fConst35: 0.0,
			fConst36: 0.0,
			fRec39: [0.0;2],
			fRec38: [0.0;2],
			fVec14: [0.0;16384],
			fConst37: 0.0,
			iConst38: 0,
			fVec15: [0.0;4096],
			iConst39: 0,
			fRec36: [0.0;2],
			fConst40: 0.0,
			fConst41: 0.0,
			fRec43: [0.0;2],
			fRec42: [0.0;2],
			fVec16: [0.0;16384],
			fConst42: 0.0,
			iConst43: 0,
			fVec17: [0.0;2048],
			iConst44: 0,
			fRec40: [0.0;2],
			fRec4: [0.0;3],
			fRec5: [0.0;3],
			fRec6: [0.0;3],
			fRec7: [0.0;3],
			fRec8: [0.0;3],
			fRec9: [0.0;3],
			fRec10: [0.0;3],
			fRec11: [0.0;3],
			fRec3: [0.0;3],
			fRec2: [0.0;3],
			fRec45: [0.0;3],
			fRec44: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "reverb");
		m.declare("reverbs.lib/name", "Faust Reverb Library");
		m.declare("reverbs.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fVslider0 = -20.0;
		self.fVslider1 = 0.0;
		self.fVslider2 = 1500.0;
		self.fVslider3 = 0.0;
		self.fVslider4 = 315.0;
		self.fVslider5 = 0.0;
		self.fVslider6 = 2.0;
		self.fVslider7 = 6000.0;
		self.fVslider8 = 3.0;
		self.fVslider9 = 200.0;
		self.fVslider10 = 60.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l2: i32 = 0;
		loop {
			self.fVec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 16384) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec15[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec14[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec1[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 32768) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fVec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 16384) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec3[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2048) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec12[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec19[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec18[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fVec4[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 32768) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec5[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 4096) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec16[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec23[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec22[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fVec6[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 16384) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fVec7[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 4096) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec20[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec27[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec26[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fVec8[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 32768) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fVec9[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 4096) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec24[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec31[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec30[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fVec10[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 16384) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fVec11[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2048) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec28[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec35[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec34[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fVec12[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 16384) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fVec13[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 4096) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec32[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec39[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec38[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec14[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 16384) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fVec15[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 4096) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec36[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec43[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 2) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec42[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fVec16[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 16384) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fVec17[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2048) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec40[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec4[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec5[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 3) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec6[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 3) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec7[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec8[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec9[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 3) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec10[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 3) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec11[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec3[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 3) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec2[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 3) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec45[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 3) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec44[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		self.fConst2 = f32::floor(((0.219990999 * self.fConst0) + 0.5));
		self.fConst3 = ((0.0 - (6.90775537 * self.fConst2)) / self.fConst0);
		self.fConst4 = (6.28318548 / self.fConst0);
		self.fConst5 = (3.14159274 / self.fConst0);
		self.fConst6 = f32::floor(((0.0191229992 * self.fConst0) + 0.5));
		self.iConst7 = (f32::min(16384.0, f32::max(0.0, (self.fConst2 - self.fConst6))) as i32);
		self.fConst8 = (0.00100000005 * self.fConst0);
		self.iConst9 = (f32::min(1024.0, f32::max(0.0, (self.fConst6 + -1.0))) as i32);
		self.fConst10 = f32::floor(((0.256891012 * self.fConst0) + 0.5));
		self.fConst11 = ((0.0 - (6.90775537 * self.fConst10)) / self.fConst0);
		self.fConst12 = f32::floor(((0.0273330007 * self.fConst0) + 0.5));
		self.iConst13 = (f32::min(16384.0, f32::max(0.0, (self.fConst10 - self.fConst12))) as i32);
		self.iConst14 = (f32::min(2048.0, f32::max(0.0, (self.fConst12 + -1.0))) as i32);
		self.fConst15 = f32::floor(((0.192303002 * self.fConst0) + 0.5));
		self.fConst16 = ((0.0 - (6.90775537 * self.fConst15)) / self.fConst0);
		self.fConst17 = f32::floor(((0.0292910002 * self.fConst0) + 0.5));
		self.iConst18 = (f32::min(8192.0, f32::max(0.0, (self.fConst15 - self.fConst17))) as i32);
		self.iConst19 = (f32::min(2048.0, f32::max(0.0, (self.fConst17 + -1.0))) as i32);
		self.fConst20 = f32::floor(((0.210389003 * self.fConst0) + 0.5));
		self.fConst21 = ((0.0 - (6.90775537 * self.fConst20)) / self.fConst0);
		self.fConst22 = f32::floor(((0.0244210009 * self.fConst0) + 0.5));
		self.iConst23 = (f32::min(16384.0, f32::max(0.0, (self.fConst20 - self.fConst22))) as i32);
		self.iConst24 = (f32::min(2048.0, f32::max(0.0, (self.fConst22 + -1.0))) as i32);
		self.fConst25 = f32::floor(((0.125 * self.fConst0) + 0.5));
		self.fConst26 = ((0.0 - (6.90775537 * self.fConst25)) / self.fConst0);
		self.fConst27 = f32::floor(((0.0134579996 * self.fConst0) + 0.5));
		self.iConst28 = (f32::min(8192.0, f32::max(0.0, (self.fConst25 - self.fConst27))) as i32);
		self.iConst29 = (f32::min(1024.0, f32::max(0.0, (self.fConst27 + -1.0))) as i32);
		self.fConst30 = f32::floor(((0.127837002 * self.fConst0) + 0.5));
		self.fConst31 = ((0.0 - (6.90775537 * self.fConst30)) / self.fConst0);
		self.fConst32 = f32::floor(((0.0316039994 * self.fConst0) + 0.5));
		self.iConst33 = (f32::min(8192.0, f32::max(0.0, (self.fConst30 - self.fConst32))) as i32);
		self.iConst34 = (f32::min(2048.0, f32::max(0.0, (self.fConst32 + -1.0))) as i32);
		self.fConst35 = f32::floor(((0.174713001 * self.fConst0) + 0.5));
		self.fConst36 = ((0.0 - (6.90775537 * self.fConst35)) / self.fConst0);
		self.fConst37 = f32::floor(((0.0229039993 * self.fConst0) + 0.5));
		self.iConst38 = (f32::min(8192.0, f32::max(0.0, (self.fConst35 - self.fConst37))) as i32);
		self.iConst39 = (f32::min(2048.0, f32::max(0.0, (self.fConst37 + -1.0))) as i32);
		self.fConst40 = f32::floor(((0.153128996 * self.fConst0) + 0.5));
		self.fConst41 = ((0.0 - (6.90775537 * self.fConst40)) / self.fConst0);
		self.fConst42 = f32::floor(((0.0203460008 * self.fConst0) + 0.5));
		self.iConst43 = (f32::min(8192.0, f32::max(0.0, (self.fConst40 - self.fConst42))) as i32);
		self.iConst44 = (f32::min(1024.0, f32::max(0.0, (self.fConst42 + -1.0))) as i32);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "~ ZITA REV1 FEEDBACK DELAY NETWORK (FDN) & SCHROEDER  ALLPASS-COMB REVERBERATOR (8x8). See Faust's reverbs.lib for documentation and  references");
		ui_interface.openHorizontalBox("Zita_Rev1");
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("Input");
		ui_interface.declare(&mut self.fVslider10, "1", "");
		ui_interface.declare(&mut self.fVslider10, "style", "knob");
		ui_interface.declare(&mut self.fVslider10, "tooltip", "Delay in ms   before reverberation begins");
		ui_interface.declare(&mut self.fVslider10, "unit", "ms");
		ui_interface.addVerticalSlider("In Delay", &mut self.fVslider10, 60.0, 20.0, 100.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("Decay Times in Bands (see tooltips)");
		ui_interface.declare(&mut self.fVslider9, "1", "");
		ui_interface.declare(&mut self.fVslider9, "scale", "log");
		ui_interface.declare(&mut self.fVslider9, "style", "knob");
		ui_interface.declare(&mut self.fVslider9, "tooltip", "Crossover frequency (Hz) separating low and middle frequencies");
		ui_interface.declare(&mut self.fVslider9, "unit", "Hz");
		ui_interface.addVerticalSlider("LF X", &mut self.fVslider9, 200.0, 50.0, 1000.0, 1.0);
		ui_interface.declare(&mut self.fVslider8, "2", "");
		ui_interface.declare(&mut self.fVslider8, "scale", "log");
		ui_interface.declare(&mut self.fVslider8, "style", "knob");
		ui_interface.declare(&mut self.fVslider8, "tooltip", "T60 = time (in seconds) to decay 60dB in low-frequency band");
		ui_interface.declare(&mut self.fVslider8, "unit", "s");
		ui_interface.addVerticalSlider("Low RT60", &mut self.fVslider8, 3.0, 1.0, 8.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider6, "3", "");
		ui_interface.declare(&mut self.fVslider6, "scale", "log");
		ui_interface.declare(&mut self.fVslider6, "style", "knob");
		ui_interface.declare(&mut self.fVslider6, "tooltip", "T60 = time (in seconds) to decay 60dB in middle band");
		ui_interface.declare(&mut self.fVslider6, "unit", "s");
		ui_interface.addVerticalSlider("Mid RT60", &mut self.fVslider6, 2.0, 1.0, 8.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider7, "4", "");
		ui_interface.declare(&mut self.fVslider7, "scale", "log");
		ui_interface.declare(&mut self.fVslider7, "style", "knob");
		ui_interface.declare(&mut self.fVslider7, "tooltip", "Frequency (Hz) at which the high-frequency T60 is half the middle-band's T60");
		ui_interface.declare(&mut self.fVslider7, "unit", "Hz");
		ui_interface.addVerticalSlider("HF Damping", &mut self.fVslider7, 6000.0, 1500.0, 23520.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openHorizontalBox("RM Peaking Equalizer 1");
		ui_interface.declare(&mut self.fVslider4, "1", "");
		ui_interface.declare(&mut self.fVslider4, "scale", "log");
		ui_interface.declare(&mut self.fVslider4, "style", "knob");
		ui_interface.declare(&mut self.fVslider4, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface.declare(&mut self.fVslider4, "unit", "Hz");
		ui_interface.addVerticalSlider("Eq1 Freq", &mut self.fVslider4, 315.0, 40.0, 2500.0, 1.0);
		ui_interface.declare(&mut self.fVslider5, "2", "");
		ui_interface.declare(&mut self.fVslider5, "style", "knob");
		ui_interface.declare(&mut self.fVslider5, "tooltip", "Peak level   in dB of second-order Regalia-Mitra peaking equalizer section 1");
		ui_interface.declare(&mut self.fVslider5, "unit", "dB");
		ui_interface.addVerticalSlider("Eq1 Level", &mut self.fVslider5, 0.0, -15.0, 15.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "4", "");
		ui_interface.openHorizontalBox("RM Peaking Equalizer 2");
		ui_interface.declare(&mut self.fVslider2, "1", "");
		ui_interface.declare(&mut self.fVslider2, "scale", "log");
		ui_interface.declare(&mut self.fVslider2, "style", "knob");
		ui_interface.declare(&mut self.fVslider2, "tooltip", "Center-frequency of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface.declare(&mut self.fVslider2, "unit", "Hz");
		ui_interface.addVerticalSlider("Eq2 Freq", &mut self.fVslider2, 1500.0, 160.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fVslider3, "2", "");
		ui_interface.declare(&mut self.fVslider3, "style", "knob");
		ui_interface.declare(&mut self.fVslider3, "tooltip", "Peak level   in dB of second-order Regalia-Mitra peaking equalizer section 2");
		ui_interface.declare(&mut self.fVslider3, "unit", "dB");
		ui_interface.addVerticalSlider("Eq2 Level", &mut self.fVslider3, 0.0, -15.0, 15.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "5", "");
		ui_interface.openHorizontalBox("Output");
		ui_interface.declare(&mut self.fVslider1, "1", "");
		ui_interface.declare(&mut self.fVslider1, "style", "knob");
		ui_interface.declare(&mut self.fVslider1, "tooltip", "-1 = dry, 1 = wet");
		ui_interface.addVerticalSlider("Dry/Wet Mix", &mut self.fVslider1, 0.0, -1.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fVslider0, "2", "");
		ui_interface.declare(&mut self.fVslider0, "style", "knob");
		ui_interface.declare(&mut self.fVslider0, "tooltip", "Output scale   factor");
		ui_interface.declare(&mut self.fVslider0, "unit", "dB");
		ui_interface.addVerticalSlider("Level", &mut self.fVslider0, -20.0, -70.0, 40.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fVslider0 as f32))));
		let mut fSlow1: f32 = (0.00100000005 * (self.fVslider1 as f32));
		let mut fSlow2: f32 = (self.fVslider2 as f32);
		let mut fSlow3: f32 = f32::powf(10.0, (0.0500000007 * (self.fVslider3 as f32)));
		let mut fSlow4: f32 = (self.fConst1 * (fSlow2 / f32::sqrt(f32::max(0.0, fSlow3))));
		let mut fSlow5: f32 = ((1.0 - fSlow4) / (fSlow4 + 1.0));
		let mut fSlow6: f32 = (self.fVslider4 as f32);
		let mut fSlow7: f32 = f32::powf(10.0, (0.0500000007 * (self.fVslider5 as f32)));
		let mut fSlow8: f32 = (self.fConst1 * (fSlow6 / f32::sqrt(f32::max(0.0, fSlow7))));
		let mut fSlow9: f32 = ((1.0 - fSlow8) / (fSlow8 + 1.0));
		let mut fSlow10: f32 = (self.fVslider6 as f32);
		let mut fSlow11: f32 = f32::exp((self.fConst3 / fSlow10));
		let mut fSlow12: f32 = mydsp_faustpower2_f(fSlow11);
		let mut fSlow13: f32 = f32::cos((self.fConst4 * (self.fVslider7 as f32)));
		let mut fSlow14: f32 = (1.0 - (fSlow12 * fSlow13));
		let mut fSlow15: f32 = (1.0 - fSlow12);
		let mut fSlow16: f32 = (fSlow14 / fSlow15);
		let mut fSlow17: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow14) / mydsp_faustpower2_f(fSlow15)) + -1.0)));
		let mut fSlow18: f32 = (fSlow16 - fSlow17);
		let mut fSlow19: f32 = ((fSlow17 + (1.0 - fSlow16)) * fSlow11);
		let mut fSlow20: f32 = (self.fVslider8 as f32);
		let mut fSlow21: f32 = ((f32::exp((self.fConst3 / fSlow20)) / fSlow11) + -1.0);
		let mut fSlow22: f32 = (1.0 / f32::tan((self.fConst5 * (self.fVslider9 as f32))));
		let mut fSlow23: f32 = (fSlow22 + 1.0);
		let mut fSlow24: f32 = (0.0 - ((1.0 - fSlow22) / fSlow23));
		let mut fSlow25: f32 = (1.0 / fSlow23);
		let mut iSlow26: i32 = (f32::min(8192.0, f32::max(0.0, (self.fConst8 * (self.fVslider10 as f32)))) as i32);
		let mut fSlow27: f32 = f32::exp((self.fConst11 / fSlow10));
		let mut fSlow28: f32 = mydsp_faustpower2_f(fSlow27);
		let mut fSlow29: f32 = (1.0 - (fSlow13 * fSlow28));
		let mut fSlow30: f32 = (1.0 - fSlow28);
		let mut fSlow31: f32 = (fSlow29 / fSlow30);
		let mut fSlow32: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow29) / mydsp_faustpower2_f(fSlow30)) + -1.0)));
		let mut fSlow33: f32 = (fSlow31 - fSlow32);
		let mut fSlow34: f32 = ((fSlow32 + (1.0 - fSlow31)) * fSlow27);
		let mut fSlow35: f32 = ((f32::exp((self.fConst11 / fSlow20)) / fSlow27) + -1.0);
		let mut fSlow36: f32 = f32::exp((self.fConst16 / fSlow10));
		let mut fSlow37: f32 = mydsp_faustpower2_f(fSlow36);
		let mut fSlow38: f32 = (1.0 - (fSlow13 * fSlow37));
		let mut fSlow39: f32 = (1.0 - fSlow37);
		let mut fSlow40: f32 = (fSlow38 / fSlow39);
		let mut fSlow41: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow38) / mydsp_faustpower2_f(fSlow39)) + -1.0)));
		let mut fSlow42: f32 = (fSlow40 - fSlow41);
		let mut fSlow43: f32 = ((fSlow41 + (1.0 - fSlow40)) * fSlow36);
		let mut fSlow44: f32 = ((f32::exp((self.fConst16 / fSlow20)) / fSlow36) + -1.0);
		let mut fSlow45: f32 = f32::exp((self.fConst21 / fSlow10));
		let mut fSlow46: f32 = mydsp_faustpower2_f(fSlow45);
		let mut fSlow47: f32 = (1.0 - (fSlow13 * fSlow46));
		let mut fSlow48: f32 = (1.0 - fSlow46);
		let mut fSlow49: f32 = (fSlow47 / fSlow48);
		let mut fSlow50: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow47) / mydsp_faustpower2_f(fSlow48)) + -1.0)));
		let mut fSlow51: f32 = (fSlow49 - fSlow50);
		let mut fSlow52: f32 = ((fSlow50 + (1.0 - fSlow49)) * fSlow45);
		let mut fSlow53: f32 = ((f32::exp((self.fConst21 / fSlow20)) / fSlow45) + -1.0);
		let mut fSlow54: f32 = f32::exp((self.fConst26 / fSlow10));
		let mut fSlow55: f32 = mydsp_faustpower2_f(fSlow54);
		let mut fSlow56: f32 = (1.0 - (fSlow13 * fSlow55));
		let mut fSlow57: f32 = (1.0 - fSlow55);
		let mut fSlow58: f32 = (fSlow56 / fSlow57);
		let mut fSlow59: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow56) / mydsp_faustpower2_f(fSlow57)) + -1.0)));
		let mut fSlow60: f32 = (fSlow58 - fSlow59);
		let mut fSlow61: f32 = ((fSlow59 + (1.0 - fSlow58)) * fSlow54);
		let mut fSlow62: f32 = ((f32::exp((self.fConst26 / fSlow20)) / fSlow54) + -1.0);
		let mut fSlow63: f32 = f32::exp((self.fConst31 / fSlow10));
		let mut fSlow64: f32 = mydsp_faustpower2_f(fSlow63);
		let mut fSlow65: f32 = (1.0 - (fSlow13 * fSlow64));
		let mut fSlow66: f32 = (1.0 - fSlow64);
		let mut fSlow67: f32 = (fSlow65 / fSlow66);
		let mut fSlow68: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow65) / mydsp_faustpower2_f(fSlow66)) + -1.0)));
		let mut fSlow69: f32 = (fSlow67 - fSlow68);
		let mut fSlow70: f32 = ((fSlow68 + (1.0 - fSlow67)) * fSlow63);
		let mut fSlow71: f32 = ((f32::exp((self.fConst31 / fSlow20)) / fSlow63) + -1.0);
		let mut fSlow72: f32 = f32::exp((self.fConst36 / fSlow10));
		let mut fSlow73: f32 = mydsp_faustpower2_f(fSlow72);
		let mut fSlow74: f32 = (1.0 - (fSlow13 * fSlow73));
		let mut fSlow75: f32 = (1.0 - fSlow73);
		let mut fSlow76: f32 = (fSlow74 / fSlow75);
		let mut fSlow77: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow74) / mydsp_faustpower2_f(fSlow75)) + -1.0)));
		let mut fSlow78: f32 = (fSlow76 - fSlow77);
		let mut fSlow79: f32 = ((fSlow77 + (1.0 - fSlow76)) * fSlow72);
		let mut fSlow80: f32 = ((f32::exp((self.fConst36 / fSlow20)) / fSlow72) + -1.0);
		let mut fSlow81: f32 = f32::exp((self.fConst41 / fSlow10));
		let mut fSlow82: f32 = mydsp_faustpower2_f(fSlow81);
		let mut fSlow83: f32 = (1.0 - (fSlow13 * fSlow82));
		let mut fSlow84: f32 = (1.0 - fSlow82);
		let mut fSlow85: f32 = (fSlow83 / fSlow84);
		let mut fSlow86: f32 = f32::sqrt(f32::max(0.0, ((mydsp_faustpower2_f(fSlow83) / mydsp_faustpower2_f(fSlow84)) + -1.0)));
		let mut fSlow87: f32 = (fSlow85 - fSlow86);
		let mut fSlow88: f32 = ((fSlow86 + (1.0 - fSlow85)) * fSlow81);
		let mut fSlow89: f32 = ((f32::exp((self.fConst41 / fSlow20)) / fSlow81) + -1.0);
		let mut fSlow90: f32 = ((0.0 - f32::cos((self.fConst1 * fSlow6))) * (fSlow9 + 1.0));
		let mut fSlow91: f32 = ((0.0 - f32::cos((self.fConst1 * fSlow2))) * (fSlow5 + 1.0));
		let mut i: i32 = 0;
		loop {
			self.fRec0[0] = (fSlow0 + (0.999000013 * self.fRec0[1]));
			self.fRec1[0] = (fSlow1 + (0.999000013 * self.fRec1[1]));
			let mut fTemp0: f32 = (self.fRec1[0] + 1.0);
			let mut fTemp1: f32 = (inputs[0][i as usize] as f32);
			self.fVec0[(self.IOTA & 16383) as usize] = fTemp1;
			let mut fTemp2: f32 = (1.0 - (0.5 * fTemp0));
			self.fRec15[0] = ((fSlow24 * self.fRec15[1]) + (fSlow25 * (self.fRec11[1] + self.fRec11[2])));
			self.fRec14[0] = ((fSlow18 * self.fRec14[1]) + (fSlow19 * (self.fRec11[1] + (fSlow21 * self.fRec15[0]))));
			self.fVec1[(self.IOTA & 32767) as usize] = ((0.353553385 * self.fRec14[0]) + 9.99999968e-21);
			let mut fTemp3: f32 = (inputs[1][i as usize] as f32);
			self.fVec2[(self.IOTA & 16383) as usize] = fTemp3;
			let mut fTemp4: f32 = (0.300000012 * self.fVec2[((self.IOTA - iSlow26) & 16383) as usize]);
			let mut fTemp5: f32 = (((0.600000024 * self.fRec12[1]) + self.fVec1[((self.IOTA - self.iConst7) & 32767) as usize]) - fTemp4);
			self.fVec3[(self.IOTA & 2047) as usize] = fTemp5;
			self.fRec12[0] = self.fVec3[((self.IOTA - self.iConst9) & 2047) as usize];
			let mut fRec13: f32 = (0.0 - (0.600000024 * fTemp5));
			self.fRec19[0] = ((fSlow24 * self.fRec19[1]) + (fSlow25 * (self.fRec7[1] + self.fRec7[2])));
			self.fRec18[0] = ((fSlow33 * self.fRec18[1]) + (fSlow34 * (self.fRec7[1] + (fSlow35 * self.fRec19[0]))));
			self.fVec4[(self.IOTA & 32767) as usize] = ((0.353553385 * self.fRec18[0]) + 9.99999968e-21);
			let mut fTemp6: f32 = (((0.600000024 * self.fRec16[1]) + self.fVec4[((self.IOTA - self.iConst13) & 32767) as usize]) - fTemp4);
			self.fVec5[(self.IOTA & 4095) as usize] = fTemp6;
			self.fRec16[0] = self.fVec5[((self.IOTA - self.iConst14) & 4095) as usize];
			let mut fRec17: f32 = (0.0 - (0.600000024 * fTemp6));
			self.fRec23[0] = ((fSlow24 * self.fRec23[1]) + (fSlow25 * (self.fRec9[1] + self.fRec9[2])));
			self.fRec22[0] = ((fSlow42 * self.fRec22[1]) + (fSlow43 * (self.fRec9[1] + (fSlow44 * self.fRec23[0]))));
			self.fVec6[(self.IOTA & 16383) as usize] = ((0.353553385 * self.fRec22[0]) + 9.99999968e-21);
			let mut fTemp7: f32 = (self.fVec6[((self.IOTA - self.iConst18) & 16383) as usize] + (fTemp4 + (0.600000024 * self.fRec20[1])));
			self.fVec7[(self.IOTA & 4095) as usize] = fTemp7;
			self.fRec20[0] = self.fVec7[((self.IOTA - self.iConst19) & 4095) as usize];
			let mut fRec21: f32 = (0.0 - (0.600000024 * fTemp7));
			self.fRec27[0] = ((fSlow24 * self.fRec27[1]) + (fSlow25 * (self.fRec5[1] + self.fRec5[2])));
			self.fRec26[0] = ((fSlow51 * self.fRec26[1]) + (fSlow52 * (self.fRec5[1] + (fSlow53 * self.fRec27[0]))));
			self.fVec8[(self.IOTA & 32767) as usize] = ((0.353553385 * self.fRec26[0]) + 9.99999968e-21);
			let mut fTemp8: f32 = (fTemp4 + ((0.600000024 * self.fRec24[1]) + self.fVec8[((self.IOTA - self.iConst23) & 32767) as usize]));
			self.fVec9[(self.IOTA & 4095) as usize] = fTemp8;
			self.fRec24[0] = self.fVec9[((self.IOTA - self.iConst24) & 4095) as usize];
			let mut fRec25: f32 = (0.0 - (0.600000024 * fTemp8));
			self.fRec31[0] = ((fSlow24 * self.fRec31[1]) + (fSlow25 * (self.fRec10[1] + self.fRec10[2])));
			self.fRec30[0] = ((fSlow60 * self.fRec30[1]) + (fSlow61 * (self.fRec10[1] + (fSlow62 * self.fRec31[0]))));
			self.fVec10[(self.IOTA & 16383) as usize] = ((0.353553385 * self.fRec30[0]) + 9.99999968e-21);
			let mut fTemp9: f32 = (0.300000012 * self.fVec0[((self.IOTA - iSlow26) & 16383) as usize]);
			let mut fTemp10: f32 = (self.fVec10[((self.IOTA - self.iConst28) & 16383) as usize] - (fTemp9 + (0.600000024 * self.fRec28[1])));
			self.fVec11[(self.IOTA & 2047) as usize] = fTemp10;
			self.fRec28[0] = self.fVec11[((self.IOTA - self.iConst29) & 2047) as usize];
			let mut fRec29: f32 = (0.600000024 * fTemp10);
			self.fRec35[0] = ((fSlow24 * self.fRec35[1]) + (fSlow25 * (self.fRec6[1] + self.fRec6[2])));
			self.fRec34[0] = ((fSlow69 * self.fRec34[1]) + (fSlow70 * (self.fRec6[1] + (fSlow71 * self.fRec35[0]))));
			self.fVec12[(self.IOTA & 16383) as usize] = ((0.353553385 * self.fRec34[0]) + 9.99999968e-21);
			let mut fTemp11: f32 = (self.fVec12[((self.IOTA - self.iConst33) & 16383) as usize] - (fTemp9 + (0.600000024 * self.fRec32[1])));
			self.fVec13[(self.IOTA & 4095) as usize] = fTemp11;
			self.fRec32[0] = self.fVec13[((self.IOTA - self.iConst34) & 4095) as usize];
			let mut fRec33: f32 = (0.600000024 * fTemp11);
			self.fRec39[0] = ((fSlow24 * self.fRec39[1]) + (fSlow25 * (self.fRec8[1] + self.fRec8[2])));
			self.fRec38[0] = ((fSlow78 * self.fRec38[1]) + (fSlow79 * (self.fRec8[1] + (fSlow80 * self.fRec39[0]))));
			self.fVec14[(self.IOTA & 16383) as usize] = ((0.353553385 * self.fRec38[0]) + 9.99999968e-21);
			let mut fTemp12: f32 = ((fTemp9 + self.fVec14[((self.IOTA - self.iConst38) & 16383) as usize]) - (0.600000024 * self.fRec36[1]));
			self.fVec15[(self.IOTA & 4095) as usize] = fTemp12;
			self.fRec36[0] = self.fVec15[((self.IOTA - self.iConst39) & 4095) as usize];
			let mut fRec37: f32 = (0.600000024 * fTemp12);
			self.fRec43[0] = ((fSlow24 * self.fRec43[1]) + (fSlow25 * (self.fRec4[1] + self.fRec4[2])));
			self.fRec42[0] = ((fSlow87 * self.fRec42[1]) + (fSlow88 * (self.fRec4[1] + (fSlow89 * self.fRec43[0]))));
			self.fVec16[(self.IOTA & 16383) as usize] = ((0.353553385 * self.fRec42[0]) + 9.99999968e-21);
			let mut fTemp13: f32 = ((self.fVec16[((self.IOTA - self.iConst43) & 16383) as usize] + fTemp9) - (0.600000024 * self.fRec40[1]));
			self.fVec17[(self.IOTA & 2047) as usize] = fTemp13;
			self.fRec40[0] = self.fVec17[((self.IOTA - self.iConst44) & 2047) as usize];
			let mut fRec41: f32 = (0.600000024 * fTemp13);
			let mut fTemp14: f32 = (fRec41 + fRec37);
			let mut fTemp15: f32 = (fRec29 + (fRec33 + fTemp14));
			self.fRec4[0] = (self.fRec12[1] + (self.fRec16[1] + (self.fRec20[1] + (self.fRec24[1] + (self.fRec28[1] + (self.fRec32[1] + (self.fRec36[1] + (self.fRec40[1] + (fRec13 + (fRec17 + (fRec21 + (fRec25 + fTemp15))))))))))));
			self.fRec5[0] = ((self.fRec28[1] + (self.fRec32[1] + (self.fRec36[1] + (self.fRec40[1] + fTemp15)))) - (self.fRec12[1] + (self.fRec16[1] + (self.fRec20[1] + (self.fRec24[1] + (fRec13 + (fRec17 + (fRec25 + fRec21))))))));
			let mut fTemp16: f32 = (fRec33 + fRec29);
			self.fRec6[0] = ((self.fRec20[1] + (self.fRec24[1] + (self.fRec36[1] + (self.fRec40[1] + (fRec21 + (fRec25 + fTemp14)))))) - (self.fRec12[1] + (self.fRec16[1] + (self.fRec28[1] + (self.fRec32[1] + (fRec13 + (fRec17 + fTemp16)))))));
			self.fRec7[0] = ((self.fRec12[1] + (self.fRec16[1] + (self.fRec36[1] + (self.fRec40[1] + (fRec13 + (fRec17 + fTemp14)))))) - (self.fRec20[1] + (self.fRec24[1] + (self.fRec28[1] + (self.fRec32[1] + (fRec21 + (fRec25 + fTemp16)))))));
			let mut fTemp17: f32 = (fRec41 + fRec33);
			let mut fTemp18: f32 = (fRec37 + fRec29);
			self.fRec8[0] = ((self.fRec16[1] + (self.fRec24[1] + (self.fRec32[1] + (self.fRec40[1] + (fRec17 + (fRec25 + fTemp17)))))) - (self.fRec12[1] + (self.fRec20[1] + (self.fRec28[1] + (self.fRec36[1] + (fRec13 + (fRec21 + fTemp18)))))));
			self.fRec9[0] = ((self.fRec12[1] + (self.fRec20[1] + (self.fRec32[1] + (self.fRec40[1] + (fRec13 + (fRec21 + fTemp17)))))) - (self.fRec16[1] + (self.fRec24[1] + (self.fRec28[1] + (self.fRec36[1] + (fRec17 + (fRec25 + fTemp18)))))));
			let mut fTemp19: f32 = (fRec41 + fRec29);
			let mut fTemp20: f32 = (fRec37 + fRec33);
			self.fRec10[0] = ((self.fRec12[1] + (self.fRec24[1] + (self.fRec28[1] + (self.fRec40[1] + (fRec13 + (fRec25 + fTemp19)))))) - (self.fRec16[1] + (self.fRec20[1] + (self.fRec32[1] + (self.fRec36[1] + (fRec17 + (fRec21 + fTemp20)))))));
			self.fRec11[0] = ((self.fRec16[1] + (self.fRec20[1] + (self.fRec28[1] + (self.fRec40[1] + (fRec17 + (fRec21 + fTemp19)))))) - (self.fRec12[1] + (self.fRec24[1] + (self.fRec32[1] + (self.fRec36[1] + (fRec13 + (fRec25 + fTemp20)))))));
			let mut fTemp21: f32 = (0.370000005 * (self.fRec5[0] + self.fRec6[0]));
			let mut fTemp22: f32 = (fSlow90 * self.fRec3[1]);
			self.fRec3[0] = (fTemp21 - (fTemp22 + (fSlow9 * self.fRec3[2])));
			let mut fTemp23: f32 = (fSlow9 * self.fRec3[0]);
			let mut fTemp24: f32 = (0.5 * ((fTemp23 + (self.fRec3[2] + (fTemp21 + fTemp22))) + (fSlow7 * ((fTemp23 + (fTemp22 + self.fRec3[2])) - fTemp21))));
			let mut fTemp25: f32 = (fSlow91 * self.fRec2[1]);
			self.fRec2[0] = (fTemp24 - (fTemp25 + (fSlow5 * self.fRec2[2])));
			let mut fTemp26: f32 = (fSlow5 * self.fRec2[0]);
			outputs[0][i as usize] = ((0.5 * (self.fRec0[0] * ((fTemp0 * fTemp1) + (fTemp2 * ((fTemp26 + (self.fRec2[2] + (fTemp24 + fTemp25))) + (fSlow3 * ((fTemp26 + (fTemp25 + self.fRec2[2])) - fTemp24))))))) as f32);
			let mut fTemp27: f32 = (0.370000005 * (self.fRec5[0] - self.fRec6[0]));
			let mut fTemp28: f32 = (fSlow90 * self.fRec45[1]);
			self.fRec45[0] = (fTemp27 - (fTemp28 + (fSlow9 * self.fRec45[2])));
			let mut fTemp29: f32 = (fSlow9 * self.fRec45[0]);
			let mut fTemp30: f32 = (0.5 * ((fTemp29 + (self.fRec45[2] + (fTemp27 + fTemp28))) + (fSlow7 * ((fTemp29 + (fTemp28 + self.fRec45[2])) - fTemp27))));
			let mut fTemp31: f32 = (fSlow91 * self.fRec44[1]);
			self.fRec44[0] = (fTemp30 - (fTemp31 + (fSlow5 * self.fRec44[2])));
			let mut fTemp32: f32 = (fSlow5 * self.fRec44[0]);
			outputs[1][i as usize] = ((0.5 * (self.fRec0[0] * ((fTemp0 * fTemp3) + (fTemp2 * ((fTemp32 + (self.fRec44[2] + (fTemp30 + fTemp31))) + (fSlow3 * ((fTemp32 + (fTemp31 + self.fRec44[2])) - fTemp30))))))) as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec15[1] = self.fRec15[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec31[1] = self.fRec31[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec35[1] = self.fRec35[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec39[1] = self.fRec39[0];
			self.fRec38[1] = self.fRec38[0];
			self.fRec36[1] = self.fRec36[0];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[1] = self.fRec42[0];
			self.fRec40[1] = self.fRec40[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

