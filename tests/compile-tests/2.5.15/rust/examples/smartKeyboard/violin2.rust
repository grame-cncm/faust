
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	iRec10: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec26: [f32;2],
	fRec22: [f32;2],
	fHslider2: f32,
	fHslider3: f32,
	fRec28: [f32;2],
	fRec27: [f32;2],
	fRec29: [f32;4],
	IOTA: i32,
	fRec30: [f32;2048],
	fConst6: f32,
	fVec0: [f32;2],
	fVec1: [f32;2048],
	fRec18: [f32;2048],
	fRec20: [f32;2],
	fRec16: [f32;4],
	fConst7: f32,
	fConst8: f32,
	fRec14: [f32;3],
	fConst9: f32,
	iRec6: [i32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	iRec42: [i32;2],
	fHslider4: f32,
	fHslider5: f32,
	fRec58: [f32;2],
	fRec54: [f32;2],
	fHslider6: f32,
	fRec59: [f32;4],
	fRec60: [f32;2048],
	fVec2: [f32;2],
	fVec3: [f32;2048],
	fRec50: [f32;2048],
	fRec52: [f32;2],
	fRec48: [f32;4],
	fRec46: [f32;3],
	iRec38: [i32;2],
	fRec34: [f32;2048],
	fRec32: [f32;2],
	iRec72: [i32;2],
	fHslider7: f32,
	fHslider8: f32,
	fRec88: [f32;2],
	fRec84: [f32;2],
	fHslider9: f32,
	fRec89: [f32;4],
	fRec90: [f32;2048],
	fVec4: [f32;2],
	fVec5: [f32;2048],
	fRec80: [f32;2048],
	fRec82: [f32;2],
	fRec78: [f32;4],
	fRec76: [f32;3],
	iRec68: [i32;2],
	fRec64: [f32;2048],
	fRec62: [f32;2],
	iRec102: [i32;2],
	fHslider10: f32,
	fHslider11: f32,
	fRec118: [f32;2],
	fRec114: [f32;2],
	fHslider12: f32,
	fRec119: [f32;4],
	fRec120: [f32;2048],
	fVec6: [f32;2],
	fVec7: [f32;2048],
	fRec110: [f32;2048],
	fRec112: [f32;2],
	fRec108: [f32;4],
	fRec106: [f32;3],
	iRec98: [i32;2],
	fRec94: [f32;2048],
	fRec92: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iRec10: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec26: [0.0;2],
			fRec22: [0.0;2],
			fHslider2: 0.0,
			fHslider3: 0.0,
			fRec28: [0.0;2],
			fRec27: [0.0;2],
			fRec29: [0.0;4],
			IOTA: 0,
			fRec30: [0.0;2048],
			fConst6: 0.0,
			fVec0: [0.0;2],
			fVec1: [0.0;2048],
			fRec18: [0.0;2048],
			fRec20: [0.0;2],
			fRec16: [0.0;4],
			fConst7: 0.0,
			fConst8: 0.0,
			fRec14: [0.0;3],
			fConst9: 0.0,
			iRec6: [0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
			iRec42: [0;2],
			fHslider4: 0.0,
			fHslider5: 0.0,
			fRec58: [0.0;2],
			fRec54: [0.0;2],
			fHslider6: 0.0,
			fRec59: [0.0;4],
			fRec60: [0.0;2048],
			fVec2: [0.0;2],
			fVec3: [0.0;2048],
			fRec50: [0.0;2048],
			fRec52: [0.0;2],
			fRec48: [0.0;4],
			fRec46: [0.0;3],
			iRec38: [0;2],
			fRec34: [0.0;2048],
			fRec32: [0.0;2],
			iRec72: [0;2],
			fHslider7: 0.0,
			fHslider8: 0.0,
			fRec88: [0.0;2],
			fRec84: [0.0;2],
			fHslider9: 0.0,
			fRec89: [0.0;4],
			fRec90: [0.0;2048],
			fVec4: [0.0;2],
			fVec5: [0.0;2048],
			fRec80: [0.0;2048],
			fRec82: [0.0;2],
			fRec78: [0.0;4],
			fRec76: [0.0;3],
			iRec68: [0;2],
			fRec64: [0.0;2048],
			fRec62: [0.0;2],
			iRec102: [0;2],
			fHslider10: 0.0,
			fHslider11: 0.0,
			fRec118: [0.0;2],
			fRec114: [0.0;2],
			fHslider12: 0.0,
			fRec119: [0.0;4],
			fRec120: [0.0;2048],
			fVec6: [0.0;2],
			fVec7: [0.0;2048],
			fRec110: [0.0;2048],
			fRec112: [0.0;2],
			fRec108: [0.0;4],
			fRec106: [0.0;3],
			iRec98: [0;2],
			fRec94: [0.0;2048],
			fRec92: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'4',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Send Fingers Count':'1',  'Keyboard 0 - Number of Keys':'12',  'Keyboard 1 - Number of Keys':'12',  'Keyboard 2 - Number of Keys':'12',  'Keyboard 3 - Number of Keys':'12',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "violin2");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 440.0;
		self.fHslider1 = 1.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 330.0;
		self.fHslider5 = 1.0;
		self.fHslider6 = 0.0;
		self.fHslider7 = 550.0;
		self.fHslider8 = 1.0;
		self.fHslider9 = 0.0;
		self.fHslider10 = 220.0;
		self.fHslider11 = 1.0;
		self.fHslider12 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec10[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec26[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec22[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec28[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec27[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec29[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec30[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec0[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fVec1[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2048) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec18[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2048) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec20[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec16[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 4) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec14[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.iRec6[l13 as usize] = 0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec2[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2048) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec0[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.iRec42[l16 as usize] = 0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec58[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec54[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec59[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 4) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec60[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2048) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fVec2[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fVec3[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2048) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec50[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2048) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec52[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec48[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 4) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec46[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.iRec38[l27 as usize] = 0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec34[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2048) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec32[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.iRec72[l30 as usize] = 0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec88[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec84[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec89[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 4) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec90[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2048) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fVec4[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec5[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2048) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec80[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2048) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec82[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec78[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 4) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec76[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.iRec68[l41 as usize] = 0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec64[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2048) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec62[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.iRec102[l44 as usize] = 0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec118[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec114[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec119[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 4) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec120[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 2048) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fVec6[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fVec7[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2048) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec110[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 2048) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec112[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 2) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec108[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 4) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec106[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 3) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.iRec98[l55 as usize] = 0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec94[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 2048) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec92[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((1570.79639 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (1.0 / (((self.fConst2 + 0.5) / self.fConst1) + 1.0));
		self.fConst4 = (0.00882352982 * self.fConst0);
		self.fConst5 = (0.000441176468 * self.fConst0);
		self.fConst6 = (0.0010294118 * self.fConst0);
		self.fConst7 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst1))));
		self.fConst8 = (((self.fConst2 + -0.5) / self.fConst1) + 1.0);
		self.fConst9 = (0.0 - self.fConst2);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("violin2");
		ui_interface.addHorizontalSlider("kb0bend", &mut self.fHslider11, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb0fingers", &mut self.fHslider12, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb0freq", &mut self.fHslider10, 220.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb1bend", &mut self.fHslider5, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb1fingers", &mut self.fHslider6, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb1freq", &mut self.fHslider4, 330.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb2bend", &mut self.fHslider1, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb2fingers", &mut self.fHslider2, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb2freq", &mut self.fHslider0, 440.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb3bend", &mut self.fHslider8, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb3fingers", &mut self.fHslider9, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb3freq", &mut self.fHslider7, 550.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("y", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.340000004 / ((self.fHslider0 as f32) * (self.fHslider1 as f32)));
		let mut iSlow1: i32 = ((((self.fHslider2 as f32) as i32) > 0) as i32);
		let mut fSlow2: f32 = (0.00100000005 * (self.fHslider3 as f32));
		let mut fSlow3: f32 = (0.340000004 / ((self.fHslider4 as f32) * (self.fHslider5 as f32)));
		let mut iSlow4: i32 = ((((self.fHslider6 as f32) as i32) > 0) as i32);
		let mut fSlow5: f32 = (0.340000004 / ((self.fHslider7 as f32) * (self.fHslider8 as f32)));
		let mut iSlow6: i32 = ((((self.fHslider9 as f32) as i32) > 0) as i32);
		let mut fSlow7: f32 = (0.340000004 / ((self.fHslider10 as f32) * (self.fHslider11 as f32)));
		let mut iSlow8: i32 = ((((self.fHslider12 as f32) as i32) > 0) as i32);
		let mut i: i32 = 0;
		loop {
			self.iRec10[0] = 0;
			let mut iRec11: i32 = self.iRec10[1];
			let mut fRec15: f32 = ((self.iRec6[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec16[2]) + (0.200000003 * (self.fRec16[1] + self.fRec16[3])))));
			self.fRec26[0] = (fSlow0 + (0.999000013 * self.fRec26[1]));
			let mut fTemp0: f32 = (self.fRec26[0] + -0.0799999982);
			let mut fTemp1: f32 = (self.fConst5 * fTemp0);
			let mut fTemp2: f32 = (fTemp1 + -1.49999499);
			let mut iTemp3: i32 = (fTemp2 as i32);
			let mut iTemp4: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp3) as f32)) as i32);
			let mut fTemp5: f32 = f32::floor(fTemp2);
			let mut fTemp6: f32 = (fTemp1 + (-1.0 - fTemp5));
			let mut fTemp7: f32 = (0.0 - fTemp6);
			let mut fTemp8: f32 = (fTemp1 + (-2.0 - fTemp5));
			let mut fTemp9: f32 = (0.0 - (0.5 * fTemp8));
			let mut fTemp10: f32 = (fTemp1 + (-3.0 - fTemp5));
			let mut fTemp11: f32 = (0.0 - (0.333333343 * fTemp10));
			let mut fTemp12: f32 = (fTemp1 + (-4.0 - fTemp5));
			let mut fTemp13: f32 = (0.0 - (0.25 * fTemp12));
			let mut fTemp14: f32 = (fTemp1 - fTemp5);
			let mut iTemp15: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 2)) as f32)) as i32);
			let mut fTemp16: f32 = (0.0 - fTemp10);
			let mut fTemp17: f32 = (0.0 - (0.5 * fTemp12));
			let mut iTemp18: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 1)) as f32)) as i32);
			let mut fTemp19: f32 = (0.0 - fTemp8);
			let mut fTemp20: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp21: f32 = (0.0 - (0.333333343 * fTemp12));
			let mut fTemp22: f32 = (fTemp6 * fTemp8);
			let mut iTemp23: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 3)) as f32)) as i32);
			let mut fTemp24: f32 = (0.0 - fTemp12);
			let mut fTemp25: f32 = (fTemp22 * fTemp10);
			let mut iTemp26: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 4)) as f32)) as i32);
			self.fRec22[0] = (((((self.fRec2[((self.IOTA - (iTemp4 + 1)) & 2047) as usize] * fTemp7) * fTemp9) * fTemp11) * fTemp13) + (fTemp14 * ((((0.5 * (((fTemp6 * self.fRec2[((self.IOTA - (iTemp15 + 1)) & 2047) as usize]) * fTemp16) * fTemp17)) + (((self.fRec2[((self.IOTA - (iTemp18 + 1)) & 2047) as usize] * fTemp19) * fTemp20) * fTemp21)) + (0.166666672 * ((fTemp22 * self.fRec2[((self.IOTA - (iTemp23 + 1)) & 2047) as usize]) * fTemp24))) + (0.0416666679 * (fTemp25 * self.fRec2[((self.IOTA - (iTemp26 + 1)) & 2047) as usize])))));
			self.fRec28[0] = (fSlow2 + (0.999000013 * self.fRec28[1]));
			self.fRec27[0] = ((0.999000013 * self.fRec27[1]) + (0.00100000005 * f32::min(1.0, (3000.0 * f32::abs((self.fRec28[0] - self.fRec28[1]))))));
			self.fRec29[0] = self.fRec0[1];
			self.fRec30[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec29[2]) + (0.100000001 * (self.fRec29[1] + self.fRec29[3])))));
			let mut iRec31: i32 = 0;
			let mut fTemp27: f32 = (self.fConst6 * fTemp0);
			let mut fTemp28: f32 = (fTemp27 + -1.49999499);
			let mut iTemp29: i32 = (fTemp28 as i32);
			let mut iTemp30: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp29) as f32)) as i32);
			let mut fTemp31: f32 = f32::floor(fTemp28);
			let mut fTemp32: f32 = (fTemp27 + (-1.0 - fTemp31));
			let mut fTemp33: f32 = (0.0 - fTemp32);
			let mut fTemp34: f32 = (fTemp27 + (-2.0 - fTemp31));
			let mut fTemp35: f32 = (0.0 - (0.5 * fTemp34));
			let mut fTemp36: f32 = (fTemp27 + (-3.0 - fTemp31));
			let mut fTemp37: f32 = (0.0 - (0.333333343 * fTemp36));
			let mut fTemp38: f32 = (fTemp27 + (-4.0 - fTemp31));
			let mut fTemp39: f32 = (0.0 - (0.25 * fTemp38));
			let mut fTemp40: f32 = (fTemp27 - fTemp31);
			let mut iTemp41: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 2)) as f32)) as i32);
			let mut fTemp42: f32 = (0.0 - fTemp36);
			let mut fTemp43: f32 = (0.0 - (0.5 * fTemp38));
			let mut iTemp44: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 1)) as f32)) as i32);
			let mut fTemp45: f32 = (0.0 - fTemp34);
			let mut fTemp46: f32 = (0.0 - (0.5 * fTemp36));
			let mut fTemp47: f32 = (0.0 - (0.333333343 * fTemp38));
			let mut fTemp48: f32 = (fTemp32 * fTemp34);
			let mut iTemp49: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 3)) as f32)) as i32);
			let mut fTemp50: f32 = (0.0 - fTemp38);
			let mut fTemp51: f32 = (fTemp48 * fTemp36);
			let mut iTemp52: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 4)) as f32)) as i32);
			self.fVec0[0] = (((((self.fRec30[((self.IOTA - (iTemp30 + 2)) & 2047) as usize] * fTemp33) * fTemp35) * fTemp37) * fTemp39) + (fTemp40 * ((((0.5 * (((fTemp32 * self.fRec30[((self.IOTA - (iTemp41 + 2)) & 2047) as usize]) * fTemp42) * fTemp43)) + (((self.fRec30[((self.IOTA - (iTemp44 + 2)) & 2047) as usize] * fTemp45) * fTemp46) * fTemp47)) + (0.166666672 * ((fTemp48 * self.fRec30[((self.IOTA - (iTemp49 + 2)) & 2047) as usize]) * fTemp50))) + (0.0416666679 * (fTemp51 * self.fRec30[((self.IOTA - (iTemp52 + 2)) & 2047) as usize])))));
			let mut fTemp53: f32 = (((iSlow1 as f32) * self.fRec27[0]) - (self.fRec22[1] + self.fVec0[1]));
			let mut fTemp54: f32 = (fTemp53 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((3.0 * fTemp53)) + 0.75)))));
			let mut fRec23: f32 = (self.fRec22[1] + fTemp54);
			let mut fTemp55: f32 = (self.fVec0[1] + fTemp54);
			self.fVec1[(self.IOTA & 2047) as usize] = fTemp55;
			let mut fRec24: f32 = (((((fTemp7 * fTemp9) * fTemp11) * fTemp13) * self.fVec1[((self.IOTA - iTemp4) & 2047) as usize]) + (fTemp14 * ((0.0416666679 * (fTemp25 * self.fVec1[((self.IOTA - iTemp26) & 2047) as usize])) + (((((fTemp19 * fTemp20) * fTemp21) * self.fVec1[((self.IOTA - iTemp18) & 2047) as usize]) + (0.5 * (((fTemp6 * fTemp16) * fTemp17) * self.fVec1[((self.IOTA - iTemp15) & 2047) as usize]))) + (0.166666672 * ((fTemp22 * fTemp24) * self.fVec1[((self.IOTA - iTemp23) & 2047) as usize]))))));
			let mut iRec25: i32 = iRec31;
			self.fRec18[(self.IOTA & 2047) as usize] = fRec23;
			let mut fRec19: f32 = (((((fTemp33 * fTemp35) * fTemp37) * fTemp39) * self.fRec18[((self.IOTA - (iTemp30 + 1)) & 2047) as usize]) + (fTemp40 * (((0.166666672 * ((fTemp48 * fTemp50) * self.fRec18[((self.IOTA - (iTemp49 + 1)) & 2047) as usize])) + ((((fTemp45 * fTemp46) * fTemp47) * self.fRec18[((self.IOTA - (iTemp44 + 1)) & 2047) as usize]) + (0.5 * (((fTemp32 * fTemp42) * fTemp43) * self.fRec18[((self.IOTA - (iTemp41 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp51 * self.fRec18[((self.IOTA - (iTemp52 + 1)) & 2047) as usize])))));
			self.fRec20[0] = fRec24;
			let mut iRec21: i32 = iRec25;
			self.fRec16[0] = self.fRec20[1];
			let mut iRec17: i32 = iRec21;
			self.fRec14[0] = (self.fRec16[1] - (self.fConst3 * ((self.fConst7 * self.fRec14[1]) + (self.fConst8 * self.fRec14[2]))));
			let mut fTemp56: f32 = (self.fConst3 * ((self.fConst2 * self.fRec14[0]) + (self.fConst9 * self.fRec14[2])));
			let mut fRec12: f32 = fTemp56;
			let mut fRec13: f32 = ((iRec17 as f32) + fTemp56);
			self.iRec6[0] = iRec11;
			let mut fRec7: f32 = fRec15;
			let mut fRec8: f32 = fRec12;
			let mut fRec9: f32 = fRec13;
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = fRec19;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			self.iRec42[0] = 0;
			let mut iRec43: i32 = self.iRec42[1];
			let mut fRec47: f32 = ((self.iRec38[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec48[2]) + (0.200000003 * (self.fRec48[1] + self.fRec48[3])))));
			self.fRec58[0] = (fSlow3 + (0.999000013 * self.fRec58[1]));
			let mut fTemp57: f32 = (self.fRec58[0] + -0.0799999982);
			let mut fTemp58: f32 = (self.fConst5 * fTemp57);
			let mut fTemp59: f32 = (fTemp58 + -1.49999499);
			let mut iTemp60: i32 = (fTemp59 as i32);
			let mut iTemp61: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp60) as f32)) as i32);
			let mut fTemp62: f32 = f32::floor(fTemp59);
			let mut fTemp63: f32 = (fTemp58 + (-1.0 - fTemp62));
			let mut fTemp64: f32 = (0.0 - fTemp63);
			let mut fTemp65: f32 = (fTemp58 + (-2.0 - fTemp62));
			let mut fTemp66: f32 = (0.0 - (0.5 * fTemp65));
			let mut fTemp67: f32 = (fTemp58 + (-3.0 - fTemp62));
			let mut fTemp68: f32 = (0.0 - (0.333333343 * fTemp67));
			let mut fTemp69: f32 = (fTemp58 + (-4.0 - fTemp62));
			let mut fTemp70: f32 = (0.0 - (0.25 * fTemp69));
			let mut fTemp71: f32 = (fTemp58 - fTemp62);
			let mut iTemp72: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp60 + 2)) as f32)) as i32);
			let mut fTemp73: f32 = (0.0 - fTemp67);
			let mut fTemp74: f32 = (0.0 - (0.5 * fTemp69));
			let mut iTemp75: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp60 + 1)) as f32)) as i32);
			let mut fTemp76: f32 = (0.0 - fTemp65);
			let mut fTemp77: f32 = (0.0 - (0.5 * fTemp67));
			let mut fTemp78: f32 = (0.0 - (0.333333343 * fTemp69));
			let mut fTemp79: f32 = (fTemp63 * fTemp65);
			let mut iTemp80: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp60 + 3)) as f32)) as i32);
			let mut fTemp81: f32 = (0.0 - fTemp69);
			let mut fTemp82: f32 = (fTemp79 * fTemp67);
			let mut iTemp83: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp60 + 4)) as f32)) as i32);
			self.fRec54[0] = (((((self.fRec34[((self.IOTA - (iTemp61 + 1)) & 2047) as usize] * fTemp64) * fTemp66) * fTemp68) * fTemp70) + (fTemp71 * ((((0.5 * (((fTemp63 * self.fRec34[((self.IOTA - (iTemp72 + 1)) & 2047) as usize]) * fTemp73) * fTemp74)) + (((self.fRec34[((self.IOTA - (iTemp75 + 1)) & 2047) as usize] * fTemp76) * fTemp77) * fTemp78)) + (0.166666672 * ((fTemp79 * self.fRec34[((self.IOTA - (iTemp80 + 1)) & 2047) as usize]) * fTemp81))) + (0.0416666679 * (fTemp82 * self.fRec34[((self.IOTA - (iTemp83 + 1)) & 2047) as usize])))));
			self.fRec59[0] = self.fRec32[1];
			self.fRec60[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec59[2]) + (0.100000001 * (self.fRec59[1] + self.fRec59[3])))));
			let mut iRec61: i32 = 0;
			let mut fTemp84: f32 = (self.fConst6 * fTemp57);
			let mut fTemp85: f32 = (fTemp84 + -1.49999499);
			let mut iTemp86: i32 = (fTemp85 as i32);
			let mut iTemp87: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp86) as f32)) as i32);
			let mut fTemp88: f32 = f32::floor(fTemp85);
			let mut fTemp89: f32 = (fTemp84 + (-1.0 - fTemp88));
			let mut fTemp90: f32 = (0.0 - fTemp89);
			let mut fTemp91: f32 = (fTemp84 + (-2.0 - fTemp88));
			let mut fTemp92: f32 = (0.0 - (0.5 * fTemp91));
			let mut fTemp93: f32 = (fTemp84 + (-3.0 - fTemp88));
			let mut fTemp94: f32 = (0.0 - (0.333333343 * fTemp93));
			let mut fTemp95: f32 = (fTemp84 + (-4.0 - fTemp88));
			let mut fTemp96: f32 = (0.0 - (0.25 * fTemp95));
			let mut fTemp97: f32 = (fTemp84 - fTemp88);
			let mut iTemp98: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp86 + 2)) as f32)) as i32);
			let mut fTemp99: f32 = (0.0 - fTemp93);
			let mut fTemp100: f32 = (0.0 - (0.5 * fTemp95));
			let mut iTemp101: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp86 + 1)) as f32)) as i32);
			let mut fTemp102: f32 = (0.0 - fTemp91);
			let mut fTemp103: f32 = (0.0 - (0.5 * fTemp93));
			let mut fTemp104: f32 = (0.0 - (0.333333343 * fTemp95));
			let mut fTemp105: f32 = (fTemp89 * fTemp91);
			let mut iTemp106: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp86 + 3)) as f32)) as i32);
			let mut fTemp107: f32 = (0.0 - fTemp95);
			let mut fTemp108: f32 = (fTemp105 * fTemp93);
			let mut iTemp109: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp86 + 4)) as f32)) as i32);
			self.fVec2[0] = (((((self.fRec60[((self.IOTA - (iTemp87 + 2)) & 2047) as usize] * fTemp90) * fTemp92) * fTemp94) * fTemp96) + (fTemp97 * ((((0.5 * (((fTemp89 * self.fRec60[((self.IOTA - (iTemp98 + 2)) & 2047) as usize]) * fTemp99) * fTemp100)) + (((self.fRec60[((self.IOTA - (iTemp101 + 2)) & 2047) as usize] * fTemp102) * fTemp103) * fTemp104)) + (0.166666672 * ((fTemp105 * self.fRec60[((self.IOTA - (iTemp106 + 2)) & 2047) as usize]) * fTemp107))) + (0.0416666679 * (fTemp108 * self.fRec60[((self.IOTA - (iTemp109 + 2)) & 2047) as usize])))));
			let mut fTemp110: f32 = (((iSlow4 as f32) * self.fRec27[0]) - (self.fRec54[1] + self.fVec2[1]));
			let mut fTemp111: f32 = (fTemp110 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((3.0 * fTemp110)) + 0.75)))));
			let mut fRec55: f32 = (self.fRec54[1] + fTemp111);
			let mut fTemp112: f32 = (self.fVec2[1] + fTemp111);
			self.fVec3[(self.IOTA & 2047) as usize] = fTemp112;
			let mut fRec56: f32 = (((((fTemp64 * fTemp66) * fTemp68) * fTemp70) * self.fVec3[((self.IOTA - iTemp61) & 2047) as usize]) + (fTemp71 * ((0.0416666679 * (fTemp82 * self.fVec3[((self.IOTA - iTemp83) & 2047) as usize])) + (((((fTemp76 * fTemp77) * fTemp78) * self.fVec3[((self.IOTA - iTemp75) & 2047) as usize]) + (0.5 * (((fTemp63 * fTemp73) * fTemp74) * self.fVec3[((self.IOTA - iTemp72) & 2047) as usize]))) + (0.166666672 * ((fTemp79 * fTemp81) * self.fVec3[((self.IOTA - iTemp80) & 2047) as usize]))))));
			let mut iRec57: i32 = iRec61;
			self.fRec50[(self.IOTA & 2047) as usize] = fRec55;
			let mut fRec51: f32 = (((((fTemp90 * fTemp92) * fTemp94) * fTemp96) * self.fRec50[((self.IOTA - (iTemp87 + 1)) & 2047) as usize]) + (fTemp97 * (((0.166666672 * ((fTemp105 * fTemp107) * self.fRec50[((self.IOTA - (iTemp106 + 1)) & 2047) as usize])) + ((((fTemp102 * fTemp103) * fTemp104) * self.fRec50[((self.IOTA - (iTemp101 + 1)) & 2047) as usize]) + (0.5 * (((fTemp89 * fTemp99) * fTemp100) * self.fRec50[((self.IOTA - (iTemp98 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp108 * self.fRec50[((self.IOTA - (iTemp109 + 1)) & 2047) as usize])))));
			self.fRec52[0] = fRec56;
			let mut iRec53: i32 = iRec57;
			self.fRec48[0] = self.fRec52[1];
			let mut iRec49: i32 = iRec53;
			self.fRec46[0] = (self.fRec48[1] - (self.fConst3 * ((self.fConst7 * self.fRec46[1]) + (self.fConst8 * self.fRec46[2]))));
			let mut fTemp113: f32 = (self.fConst3 * ((self.fConst2 * self.fRec46[0]) + (self.fConst9 * self.fRec46[2])));
			let mut fRec44: f32 = fTemp113;
			let mut fRec45: f32 = ((iRec49 as f32) + fTemp113);
			self.iRec38[0] = iRec43;
			let mut fRec39: f32 = fRec47;
			let mut fRec40: f32 = fRec44;
			let mut fRec41: f32 = fRec45;
			self.fRec34[(self.IOTA & 2047) as usize] = fRec39;
			let mut fRec35: f32 = fRec51;
			let mut fRec36: f32 = fRec40;
			let mut fRec37: f32 = fRec41;
			self.fRec32[0] = fRec35;
			let mut fRec33: f32 = fRec37;
			self.iRec72[0] = 0;
			let mut iRec73: i32 = self.iRec72[1];
			let mut fRec77: f32 = ((self.iRec68[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec78[2]) + (0.200000003 * (self.fRec78[1] + self.fRec78[3])))));
			self.fRec88[0] = (fSlow5 + (0.999000013 * self.fRec88[1]));
			let mut fTemp114: f32 = (self.fRec88[0] + -0.0799999982);
			let mut fTemp115: f32 = (self.fConst5 * fTemp114);
			let mut fTemp116: f32 = (fTemp115 + -1.49999499);
			let mut iTemp117: i32 = (fTemp116 as i32);
			let mut iTemp118: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp117) as f32)) as i32);
			let mut fTemp119: f32 = f32::floor(fTemp116);
			let mut fTemp120: f32 = (fTemp115 + (-1.0 - fTemp119));
			let mut fTemp121: f32 = (0.0 - fTemp120);
			let mut fTemp122: f32 = (fTemp115 + (-2.0 - fTemp119));
			let mut fTemp123: f32 = (0.0 - (0.5 * fTemp122));
			let mut fTemp124: f32 = (fTemp115 + (-3.0 - fTemp119));
			let mut fTemp125: f32 = (0.0 - (0.333333343 * fTemp124));
			let mut fTemp126: f32 = (fTemp115 + (-4.0 - fTemp119));
			let mut fTemp127: f32 = (0.0 - (0.25 * fTemp126));
			let mut fTemp128: f32 = (fTemp115 - fTemp119);
			let mut iTemp129: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp117 + 2)) as f32)) as i32);
			let mut fTemp130: f32 = (0.0 - fTemp124);
			let mut fTemp131: f32 = (0.0 - (0.5 * fTemp126));
			let mut iTemp132: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp117 + 1)) as f32)) as i32);
			let mut fTemp133: f32 = (0.0 - fTemp122);
			let mut fTemp134: f32 = (0.0 - (0.5 * fTemp124));
			let mut fTemp135: f32 = (0.0 - (0.333333343 * fTemp126));
			let mut fTemp136: f32 = (fTemp120 * fTemp122);
			let mut iTemp137: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp117 + 3)) as f32)) as i32);
			let mut fTemp138: f32 = (0.0 - fTemp126);
			let mut fTemp139: f32 = (fTemp136 * fTemp124);
			let mut iTemp140: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp117 + 4)) as f32)) as i32);
			self.fRec84[0] = (((((self.fRec64[((self.IOTA - (iTemp118 + 1)) & 2047) as usize] * fTemp121) * fTemp123) * fTemp125) * fTemp127) + (fTemp128 * ((((0.5 * (((fTemp120 * self.fRec64[((self.IOTA - (iTemp129 + 1)) & 2047) as usize]) * fTemp130) * fTemp131)) + (((self.fRec64[((self.IOTA - (iTemp132 + 1)) & 2047) as usize] * fTemp133) * fTemp134) * fTemp135)) + (0.166666672 * ((fTemp136 * self.fRec64[((self.IOTA - (iTemp137 + 1)) & 2047) as usize]) * fTemp138))) + (0.0416666679 * (fTemp139 * self.fRec64[((self.IOTA - (iTemp140 + 1)) & 2047) as usize])))));
			self.fRec89[0] = self.fRec62[1];
			self.fRec90[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec89[2]) + (0.100000001 * (self.fRec89[1] + self.fRec89[3])))));
			let mut iRec91: i32 = 0;
			let mut fTemp141: f32 = (self.fConst6 * fTemp114);
			let mut fTemp142: f32 = (fTemp141 + -1.49999499);
			let mut iTemp143: i32 = (fTemp142 as i32);
			let mut iTemp144: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp143) as f32)) as i32);
			let mut fTemp145: f32 = f32::floor(fTemp142);
			let mut fTemp146: f32 = (fTemp141 + (-1.0 - fTemp145));
			let mut fTemp147: f32 = (0.0 - fTemp146);
			let mut fTemp148: f32 = (fTemp141 + (-2.0 - fTemp145));
			let mut fTemp149: f32 = (0.0 - (0.5 * fTemp148));
			let mut fTemp150: f32 = (fTemp141 + (-3.0 - fTemp145));
			let mut fTemp151: f32 = (0.0 - (0.333333343 * fTemp150));
			let mut fTemp152: f32 = (fTemp141 + (-4.0 - fTemp145));
			let mut fTemp153: f32 = (0.0 - (0.25 * fTemp152));
			let mut fTemp154: f32 = (fTemp141 - fTemp145);
			let mut iTemp155: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp143 + 2)) as f32)) as i32);
			let mut fTemp156: f32 = (0.0 - fTemp150);
			let mut fTemp157: f32 = (0.0 - (0.5 * fTemp152));
			let mut iTemp158: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp143 + 1)) as f32)) as i32);
			let mut fTemp159: f32 = (0.0 - fTemp148);
			let mut fTemp160: f32 = (0.0 - (0.5 * fTemp150));
			let mut fTemp161: f32 = (0.0 - (0.333333343 * fTemp152));
			let mut fTemp162: f32 = (fTemp146 * fTemp148);
			let mut iTemp163: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp143 + 3)) as f32)) as i32);
			let mut fTemp164: f32 = (0.0 - fTemp152);
			let mut fTemp165: f32 = (fTemp162 * fTemp150);
			let mut iTemp166: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp143 + 4)) as f32)) as i32);
			self.fVec4[0] = (((((self.fRec90[((self.IOTA - (iTemp144 + 2)) & 2047) as usize] * fTemp147) * fTemp149) * fTemp151) * fTemp153) + (fTemp154 * ((((0.5 * (((fTemp146 * self.fRec90[((self.IOTA - (iTemp155 + 2)) & 2047) as usize]) * fTemp156) * fTemp157)) + (((self.fRec90[((self.IOTA - (iTemp158 + 2)) & 2047) as usize] * fTemp159) * fTemp160) * fTemp161)) + (0.166666672 * ((fTemp162 * self.fRec90[((self.IOTA - (iTemp163 + 2)) & 2047) as usize]) * fTemp164))) + (0.0416666679 * (fTemp165 * self.fRec90[((self.IOTA - (iTemp166 + 2)) & 2047) as usize])))));
			let mut fTemp167: f32 = (((iSlow6 as f32) * self.fRec27[0]) - (self.fRec84[1] + self.fVec4[1]));
			let mut fTemp168: f32 = (fTemp167 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((3.0 * fTemp167)) + 0.75)))));
			let mut fRec85: f32 = (self.fRec84[1] + fTemp168);
			let mut fTemp169: f32 = (self.fVec4[1] + fTemp168);
			self.fVec5[(self.IOTA & 2047) as usize] = fTemp169;
			let mut fRec86: f32 = (((((fTemp121 * fTemp123) * fTemp125) * fTemp127) * self.fVec5[((self.IOTA - iTemp118) & 2047) as usize]) + (fTemp128 * ((0.0416666679 * (fTemp139 * self.fVec5[((self.IOTA - iTemp140) & 2047) as usize])) + (((((fTemp133 * fTemp134) * fTemp135) * self.fVec5[((self.IOTA - iTemp132) & 2047) as usize]) + (0.5 * (((fTemp120 * fTemp130) * fTemp131) * self.fVec5[((self.IOTA - iTemp129) & 2047) as usize]))) + (0.166666672 * ((fTemp136 * fTemp138) * self.fVec5[((self.IOTA - iTemp137) & 2047) as usize]))))));
			let mut iRec87: i32 = iRec91;
			self.fRec80[(self.IOTA & 2047) as usize] = fRec85;
			let mut fRec81: f32 = (((((fTemp147 * fTemp149) * fTemp151) * fTemp153) * self.fRec80[((self.IOTA - (iTemp144 + 1)) & 2047) as usize]) + (fTemp154 * (((0.166666672 * ((fTemp162 * fTemp164) * self.fRec80[((self.IOTA - (iTemp163 + 1)) & 2047) as usize])) + ((((fTemp159 * fTemp160) * fTemp161) * self.fRec80[((self.IOTA - (iTemp158 + 1)) & 2047) as usize]) + (0.5 * (((fTemp146 * fTemp156) * fTemp157) * self.fRec80[((self.IOTA - (iTemp155 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp165 * self.fRec80[((self.IOTA - (iTemp166 + 1)) & 2047) as usize])))));
			self.fRec82[0] = fRec86;
			let mut iRec83: i32 = iRec87;
			self.fRec78[0] = self.fRec82[1];
			let mut iRec79: i32 = iRec83;
			self.fRec76[0] = (self.fRec78[1] - (self.fConst3 * ((self.fConst7 * self.fRec76[1]) + (self.fConst8 * self.fRec76[2]))));
			let mut fTemp170: f32 = (self.fConst3 * ((self.fConst2 * self.fRec76[0]) + (self.fConst9 * self.fRec76[2])));
			let mut fRec74: f32 = fTemp170;
			let mut fRec75: f32 = ((iRec79 as f32) + fTemp170);
			self.iRec68[0] = iRec73;
			let mut fRec69: f32 = fRec77;
			let mut fRec70: f32 = fRec74;
			let mut fRec71: f32 = fRec75;
			self.fRec64[(self.IOTA & 2047) as usize] = fRec69;
			let mut fRec65: f32 = fRec81;
			let mut fRec66: f32 = fRec70;
			let mut fRec67: f32 = fRec71;
			self.fRec62[0] = fRec65;
			let mut fRec63: f32 = fRec67;
			self.iRec102[0] = 0;
			let mut iRec103: i32 = self.iRec102[1];
			let mut fRec107: f32 = ((self.iRec98[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec108[2]) + (0.200000003 * (self.fRec108[1] + self.fRec108[3])))));
			self.fRec118[0] = (fSlow7 + (0.999000013 * self.fRec118[1]));
			let mut fTemp171: f32 = (self.fRec118[0] + -0.0799999982);
			let mut fTemp172: f32 = (self.fConst5 * fTemp171);
			let mut fTemp173: f32 = (fTemp172 + -1.49999499);
			let mut iTemp174: i32 = (fTemp173 as i32);
			let mut iTemp175: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp174) as f32)) as i32);
			let mut fTemp176: f32 = f32::floor(fTemp173);
			let mut fTemp177: f32 = (fTemp172 + (-1.0 - fTemp176));
			let mut fTemp178: f32 = (0.0 - fTemp177);
			let mut fTemp179: f32 = (fTemp172 + (-2.0 - fTemp176));
			let mut fTemp180: f32 = (0.0 - (0.5 * fTemp179));
			let mut fTemp181: f32 = (fTemp172 + (-3.0 - fTemp176));
			let mut fTemp182: f32 = (0.0 - (0.333333343 * fTemp181));
			let mut fTemp183: f32 = (fTemp172 + (-4.0 - fTemp176));
			let mut fTemp184: f32 = (0.0 - (0.25 * fTemp183));
			let mut fTemp185: f32 = (fTemp172 - fTemp176);
			let mut iTemp186: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp174 + 2)) as f32)) as i32);
			let mut fTemp187: f32 = (0.0 - fTemp181);
			let mut fTemp188: f32 = (0.0 - (0.5 * fTemp183));
			let mut iTemp189: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp174 + 1)) as f32)) as i32);
			let mut fTemp190: f32 = (0.0 - fTemp179);
			let mut fTemp191: f32 = (0.0 - (0.5 * fTemp181));
			let mut fTemp192: f32 = (0.0 - (0.333333343 * fTemp183));
			let mut fTemp193: f32 = (fTemp177 * fTemp179);
			let mut iTemp194: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp174 + 3)) as f32)) as i32);
			let mut fTemp195: f32 = (0.0 - fTemp183);
			let mut fTemp196: f32 = (fTemp193 * fTemp181);
			let mut iTemp197: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp174 + 4)) as f32)) as i32);
			self.fRec114[0] = (((((self.fRec94[((self.IOTA - (iTemp175 + 1)) & 2047) as usize] * fTemp178) * fTemp180) * fTemp182) * fTemp184) + (fTemp185 * ((((0.5 * (((fTemp177 * self.fRec94[((self.IOTA - (iTemp186 + 1)) & 2047) as usize]) * fTemp187) * fTemp188)) + (((self.fRec94[((self.IOTA - (iTemp189 + 1)) & 2047) as usize] * fTemp190) * fTemp191) * fTemp192)) + (0.166666672 * ((fTemp193 * self.fRec94[((self.IOTA - (iTemp194 + 1)) & 2047) as usize]) * fTemp195))) + (0.0416666679 * (fTemp196 * self.fRec94[((self.IOTA - (iTemp197 + 1)) & 2047) as usize])))));
			self.fRec119[0] = self.fRec92[1];
			self.fRec120[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec119[2]) + (0.100000001 * (self.fRec119[1] + self.fRec119[3])))));
			let mut iRec121: i32 = 0;
			let mut fTemp198: f32 = (self.fConst6 * fTemp171);
			let mut fTemp199: f32 = (fTemp198 + -1.49999499);
			let mut iTemp200: i32 = (fTemp199 as i32);
			let mut iTemp201: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp200) as f32)) as i32);
			let mut fTemp202: f32 = f32::floor(fTemp199);
			let mut fTemp203: f32 = (fTemp198 + (-1.0 - fTemp202));
			let mut fTemp204: f32 = (0.0 - fTemp203);
			let mut fTemp205: f32 = (fTemp198 + (-2.0 - fTemp202));
			let mut fTemp206: f32 = (0.0 - (0.5 * fTemp205));
			let mut fTemp207: f32 = (fTemp198 + (-3.0 - fTemp202));
			let mut fTemp208: f32 = (0.0 - (0.333333343 * fTemp207));
			let mut fTemp209: f32 = (fTemp198 + (-4.0 - fTemp202));
			let mut fTemp210: f32 = (0.0 - (0.25 * fTemp209));
			let mut fTemp211: f32 = (fTemp198 - fTemp202);
			let mut iTemp212: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp200 + 2)) as f32)) as i32);
			let mut fTemp213: f32 = (0.0 - fTemp207);
			let mut fTemp214: f32 = (0.0 - (0.5 * fTemp209));
			let mut iTemp215: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp200 + 1)) as f32)) as i32);
			let mut fTemp216: f32 = (0.0 - fTemp205);
			let mut fTemp217: f32 = (0.0 - (0.5 * fTemp207));
			let mut fTemp218: f32 = (0.0 - (0.333333343 * fTemp209));
			let mut fTemp219: f32 = (fTemp203 * fTemp205);
			let mut iTemp220: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp200 + 3)) as f32)) as i32);
			let mut fTemp221: f32 = (0.0 - fTemp209);
			let mut fTemp222: f32 = (fTemp219 * fTemp207);
			let mut iTemp223: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp200 + 4)) as f32)) as i32);
			self.fVec6[0] = (((((self.fRec120[((self.IOTA - (iTemp201 + 2)) & 2047) as usize] * fTemp204) * fTemp206) * fTemp208) * fTemp210) + (fTemp211 * ((((0.5 * (((fTemp203 * self.fRec120[((self.IOTA - (iTemp212 + 2)) & 2047) as usize]) * fTemp213) * fTemp214)) + (((self.fRec120[((self.IOTA - (iTemp215 + 2)) & 2047) as usize] * fTemp216) * fTemp217) * fTemp218)) + (0.166666672 * ((fTemp219 * self.fRec120[((self.IOTA - (iTemp220 + 2)) & 2047) as usize]) * fTemp221))) + (0.0416666679 * (fTemp222 * self.fRec120[((self.IOTA - (iTemp223 + 2)) & 2047) as usize])))));
			let mut fTemp224: f32 = (((iSlow8 as f32) * self.fRec27[0]) - (self.fRec114[1] + self.fVec6[1]));
			let mut fTemp225: f32 = (fTemp224 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((3.0 * fTemp224)) + 0.75)))));
			let mut fRec115: f32 = (self.fRec114[1] + fTemp225);
			let mut fTemp226: f32 = (self.fVec6[1] + fTemp225);
			self.fVec7[(self.IOTA & 2047) as usize] = fTemp226;
			let mut fRec116: f32 = (((((fTemp178 * fTemp180) * fTemp182) * fTemp184) * self.fVec7[((self.IOTA - iTemp175) & 2047) as usize]) + (fTemp185 * ((((((fTemp190 * fTemp191) * fTemp192) * self.fVec7[((self.IOTA - iTemp189) & 2047) as usize]) + (0.5 * (((fTemp177 * fTemp187) * fTemp188) * self.fVec7[((self.IOTA - iTemp186) & 2047) as usize]))) + (0.166666672 * ((fTemp193 * fTemp195) * self.fVec7[((self.IOTA - iTemp194) & 2047) as usize]))) + (0.0416666679 * (fTemp196 * self.fVec7[((self.IOTA - iTemp197) & 2047) as usize])))));
			let mut iRec117: i32 = iRec121;
			self.fRec110[(self.IOTA & 2047) as usize] = fRec115;
			let mut fRec111: f32 = (((((fTemp204 * fTemp206) * fTemp208) * fTemp210) * self.fRec110[((self.IOTA - (iTemp201 + 1)) & 2047) as usize]) + (fTemp211 * (((0.166666672 * ((fTemp219 * fTemp221) * self.fRec110[((self.IOTA - (iTemp220 + 1)) & 2047) as usize])) + ((((fTemp216 * fTemp217) * fTemp218) * self.fRec110[((self.IOTA - (iTemp215 + 1)) & 2047) as usize]) + (0.5 * (((fTemp203 * fTemp213) * fTemp214) * self.fRec110[((self.IOTA - (iTemp212 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp222 * self.fRec110[((self.IOTA - (iTemp223 + 1)) & 2047) as usize])))));
			self.fRec112[0] = fRec116;
			let mut iRec113: i32 = iRec117;
			self.fRec108[0] = self.fRec112[1];
			let mut iRec109: i32 = iRec113;
			self.fRec106[0] = (self.fRec108[1] - (self.fConst3 * ((self.fConst8 * self.fRec106[2]) + (self.fConst7 * self.fRec106[1]))));
			let mut fTemp227: f32 = (self.fConst3 * ((self.fConst2 * self.fRec106[0]) + (self.fConst9 * self.fRec106[2])));
			let mut fRec104: f32 = fTemp227;
			let mut fRec105: f32 = ((iRec109 as f32) + fTemp227);
			self.iRec98[0] = iRec103;
			let mut fRec99: f32 = fRec107;
			let mut fRec100: f32 = fRec104;
			let mut fRec101: f32 = fRec105;
			self.fRec94[(self.IOTA & 2047) as usize] = fRec99;
			let mut fRec95: f32 = fRec111;
			let mut fRec96: f32 = fRec100;
			let mut fRec97: f32 = fRec101;
			self.fRec92[0] = fRec95;
			let mut fRec93: f32 = fRec97;
			let mut fTemp228: f32 = (fRec1 + (fRec33 + (fRec63 + fRec93)));
			outputs[0][i as usize] = (fTemp228 as f32);
			outputs[1][i as usize] = (fTemp228 as f32);
			self.iRec10[1] = self.iRec10[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[1] = self.fRec27[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec29[j0 as usize] = self.fRec29[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec0[1] = self.fVec0[0];
			self.fRec20[1] = self.fRec20[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec16[j1 as usize] = self.fRec16[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.iRec6[1] = self.iRec6[0];
			self.fRec0[1] = self.fRec0[0];
			self.iRec42[1] = self.iRec42[0];
			self.fRec58[1] = self.fRec58[0];
			self.fRec54[1] = self.fRec54[0];
			let mut j2: i32 = 3;
			loop {
				self.fRec59[j2 as usize] = self.fRec59[(j2 - 1) as usize];
				j2 = (j2 - 1);
				if (j2 > 0) { continue; } else { break; }
			}
			self.fVec2[1] = self.fVec2[0];
			self.fRec52[1] = self.fRec52[0];
			let mut j3: i32 = 3;
			loop {
				self.fRec48[j3 as usize] = self.fRec48[(j3 - 1) as usize];
				j3 = (j3 - 1);
				if (j3 > 0) { continue; } else { break; }
			}
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.iRec38[1] = self.iRec38[0];
			self.fRec32[1] = self.fRec32[0];
			self.iRec72[1] = self.iRec72[0];
			self.fRec88[1] = self.fRec88[0];
			self.fRec84[1] = self.fRec84[0];
			let mut j4: i32 = 3;
			loop {
				self.fRec89[j4 as usize] = self.fRec89[(j4 - 1) as usize];
				j4 = (j4 - 1);
				if (j4 > 0) { continue; } else { break; }
			}
			self.fVec4[1] = self.fVec4[0];
			self.fRec82[1] = self.fRec82[0];
			let mut j5: i32 = 3;
			loop {
				self.fRec78[j5 as usize] = self.fRec78[(j5 - 1) as usize];
				j5 = (j5 - 1);
				if (j5 > 0) { continue; } else { break; }
			}
			self.fRec76[2] = self.fRec76[1];
			self.fRec76[1] = self.fRec76[0];
			self.iRec68[1] = self.iRec68[0];
			self.fRec62[1] = self.fRec62[0];
			self.iRec102[1] = self.iRec102[0];
			self.fRec118[1] = self.fRec118[0];
			self.fRec114[1] = self.fRec114[0];
			let mut j6: i32 = 3;
			loop {
				self.fRec119[j6 as usize] = self.fRec119[(j6 - 1) as usize];
				j6 = (j6 - 1);
				if (j6 > 0) { continue; } else { break; }
			}
			self.fVec6[1] = self.fVec6[0];
			self.fRec112[1] = self.fRec112[0];
			let mut j7: i32 = 3;
			loop {
				self.fRec108[j7 as usize] = self.fRec108[(j7 - 1) as usize];
				j7 = (j7 - 1);
				if (j7 > 0) { continue; } else { break; }
			}
			self.fRec106[2] = self.fRec106[1];
			self.fRec106[1] = self.fRec106[0];
			self.iRec98[1] = self.iRec98[0];
			self.fRec92[1] = self.fRec92[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

