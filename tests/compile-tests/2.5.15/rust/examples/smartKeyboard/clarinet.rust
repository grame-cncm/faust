


pub struct mydsp {
	
	fDummy: f32,
	iRec6: [i32;2],
	fRec13: [f32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fRec18: [f32;2],
	fRec17: [f32;2],
	fRec14: [f32;2],
	fHslider0: f32,
	fRec19: [f32;2],
	IOTA: i32,
	fRec15: [f32;2048],
	fConst3: f32,
	fConst4: f32,
	fHslider1: f32,
	fHslider2: f32,
	fHslider3: f32,
	fHslider4: f32,
	fHslider5: f32,
	fHslider6: f32,
	fHslider7: f32,
	fHslider8: f32,
	iVec0: [i32;2],
	iRec21: [i32;2],
	fHslider9: f32,
	iVec1: [i32;2],
	iRec22: [i32;2],
	fRec20: [f32;2],
	fVec2: [f32;2],
	fRec11: [f32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iRec6: [0;2],
			fRec13: [0.0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fRec18: [0.0;2],
			fRec17: [0.0;2],
			fRec14: [0.0;2],
			fHslider0: 0.0,
			fRec19: [0.0;2],
			IOTA: 0,
			fRec15: [0.0;2048],
			fConst3: 0.0,
			fConst4: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fHslider4: 0.0,
			fHslider5: 0.0,
			fHslider6: 0.0,
			fHslider7: 0.0,
			fHslider8: 0.0,
			iVec0: [0;2],
			iRec21: [0;2],
			fHslider9: 0.0,
			iVec1: [0;2],
			iRec22: [0;2],
			fRec20: [0.0;2],
			fVec2: [0.0;2],
			fRec11: [0.0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'2',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'4',   'Keyboard 1 - Number of Keys':'5',  'Keyboard 0 - Send Freq':'0',   'Keyboard 1 - Send Freq':'0',  'Keyboard 0 - Piano Keyboard':'0',   'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 0 - Send Key Status':'1',  'Keyboard 1 - Send Key Status':'1',  'Keyboard 0 - Key 3 - Label':'O+',  'Keyboard 1 - Key 4 - Label':'O-' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "clarinet");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.0;
		self.fHslider1 = 0.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 0.0;
		self.fHslider6 = 0.0;
		self.fHslider7 = 0.0;
		self.fHslider8 = 0.0;
		self.fHslider9 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec6[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec13[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec18[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec17[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec14[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec19[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec15[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.iVec0[l7 as usize] = 0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.iRec21[l8 as usize] = 0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.iVec1[l9 as usize] = 0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.iRec22[l10 as usize] = 0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec20[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec2[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec2[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2048) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec0[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::exp((0.0 - (50.0 / self.fConst0)));
		self.fConst2 = (1.0 - self.fConst1);
		self.fConst3 = (0.00882352982 * self.fConst0);
		self.fConst4 = (0.00147058826 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("clarinet");
		ui_interface.addHorizontalSlider("kb0k0status", &mut self.fHslider1, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb0k1status", &mut self.fHslider2, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb0k2status", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb0k3status", &mut self.fHslider8, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k0status", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k1status", &mut self.fHslider5, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k2status", &mut self.fHslider6, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k3status", &mut self.fHslider7, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb1k4status", &mut self.fHslider9, 0.0, 0.0, 1.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "acc", "1 1 -10 0 10");
		ui_interface.addHorizontalSlider("reedStiffness", &mut self.fHslider0, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * (self.fHslider0 as f32));
		let mut iSlow1: i32 = (f32::min(1.0, (self.fHslider1 as f32)) as i32);
		let mut iSlow2: i32 = ((iSlow1 == 1) as i32);
		let mut iSlow3: i32 = (f32::min(1.0, (self.fHslider2 as f32)) as i32);
		let mut iSlow4: i32 = ((iSlow3 == 1) as i32);
		let mut iSlow5: i32 = (iSlow2 & iSlow4);
		let mut iSlow6: i32 = (f32::min(1.0, (self.fHslider3 as f32)) as i32);
		let mut iSlow7: i32 = ((iSlow6 == 0) as i32);
		let mut iSlow8: i32 = (iSlow5 & iSlow7);
		let mut iSlow9: i32 = (f32::min(1.0, (self.fHslider4 as f32)) as i32);
		let mut iSlow10: i32 = ((iSlow9 == 0) as i32);
		let mut iSlow11: i32 = (f32::min(1.0, (self.fHslider5 as f32)) as i32);
		let mut iSlow12: i32 = ((iSlow11 == 0) as i32);
		let mut iSlow13: i32 = (f32::min(1.0, (self.fHslider6 as f32)) as i32);
		let mut iSlow14: i32 = ((iSlow13 == 0) as i32);
		let mut iSlow15: i32 = (f32::min(1.0, (self.fHslider7 as f32)) as i32);
		let mut iSlow16: i32 = ((iSlow15 == 0) as i32);
		let mut fSlow17: f32 = (4.0 * (1.0 - (((((iSlow8 & iSlow10) & iSlow12) & iSlow14) & iSlow16) as f32)));
		let mut iSlow18: i32 = ((iSlow6 == 1) as i32);
		let mut iSlow19: i32 = (iSlow5 & iSlow18);
		let mut iSlow20: i32 = ((iSlow9 == 1) as i32);
		let mut iSlow21: i32 = (iSlow19 & iSlow20);
		let mut iSlow22: i32 = ((iSlow11 == 1) as i32);
		let mut iSlow23: i32 = (iSlow21 & iSlow22);
		let mut iSlow24: i32 = (iSlow23 & ((iSlow13 == 1) as i32));
		let mut iSlow25: i32 = ((iSlow15 == 1) as i32);
		let mut iSlow26: i32 = (iSlow23 & iSlow14);
		let mut iSlow27: i32 = (iSlow19 & iSlow10);
		let mut iSlow28: i32 = ((iSlow1 == 0) as i32);
		let mut iSlow29: i32 = ((iSlow3 == 0) as i32);
		let mut iSlow30: i32 = (iSlow2 & iSlow29);
		let mut iSlow31: i32 = ((13 * (iSlow24 & iSlow25)) + ((11 * (iSlow24 & iSlow16)) + ((10 * (iSlow26 & iSlow25)) + ((9 * (iSlow26 & iSlow16)) + ((8 * (((iSlow21 & iSlow12) & iSlow14) & iSlow16)) + ((7 * (((iSlow27 & iSlow22) & iSlow14) & iSlow16)) + ((6 * (((iSlow27 & iSlow12) & iSlow14) & iSlow16)) + (((((((((iSlow28 & iSlow4) & iSlow7) & iSlow10) & iSlow12) & iSlow14) & iSlow16) + (2 * (((((iSlow30 & iSlow7) & iSlow10) & iSlow12) & iSlow14) & iSlow16))) + (3 * (((((iSlow30 & iSlow18) & iSlow10) & iSlow12) & iSlow14) & iSlow16))) + (5 * ((((iSlow8 & iSlow20) & iSlow12) & iSlow14) & iSlow16))))))))));
		let mut iSlow32: i32 = ((((((iSlow28 & iSlow29) & iSlow7) & iSlow10) & iSlow12) & iSlow14) & iSlow25);
		let mut iSlow33: i32 = (f32::min(1.0, (self.fHslider8 as f32)) as i32);
		let mut iSlow34: i32 = (f32::min(1.0, (self.fHslider9 as f32)) as i32);
		let mut i: i32 = 0;
		loop {
			self.iRec6[0] = 0;
			self.fRec13[0] = (0.5 * (self.fRec13[1] + self.fRec11[1]));
			let mut fRec10: f32 = (self.fRec13[0] + (self.iRec6[1] as f32));
			let mut fTemp0: f32 = f32::abs((inputs[0][i as usize] as f32));
			self.fRec18[0] = f32::max(fTemp0, ((self.fConst1 * self.fRec18[1]) + (self.fConst2 * fTemp0)));
			self.fRec17[0] = ((self.fConst1 * self.fRec17[1]) + (self.fConst2 * self.fRec18[0]));
			let mut fTemp1: f32 = (0.699999988 * self.fRec17[0]);
			self.fRec14[0] = (self.fRec0[1] + fTemp1);
			let mut fTemp2: f32 = (0.0 - self.fRec14[1]);
			self.fRec19[0] = (fSlow0 + (0.999000013 * self.fRec19[1]));
			self.fRec15[(self.IOTA & 2047) as usize] = (fTemp1 + (fTemp2 * f32::max(-1.0, f32::min(1.0, ((fTemp2 * ((0.25999999 * self.fRec19[0]) + -0.439999998)) + 0.699999988)))));
			let mut iRec16: i32 = 0;
			self.iVec0[0] = iSlow33;
			self.iRec21[0] = ((((iSlow33 - self.iVec0[1]) > 0) as i32) + self.iRec21[1]);
			self.iVec1[0] = iSlow34;
			self.iRec22[0] = ((((iSlow34 - self.iVec1[1]) > 0) as i32) + self.iRec22[1]);
			self.fRec20[0] = ((0.999000013 * self.fRec20[1]) + (0.000772727246 / f32::powf(2.0, (0.0833333358 * (fSlow17 - ((iSlow31 + (12 * (iSlow32 - (self.iRec21[0] - self.iRec22[0])))) as f32))))));
			let mut fTemp3: f32 = (self.fConst4 * ((0.5 * self.fRec20[0]) + -0.0500000007));
			let mut fTemp4: f32 = (fTemp3 + -1.49999499);
			let mut iTemp5: i32 = (fTemp4 as i32);
			let mut iTemp6: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, (iTemp5 as i32)) as f32)) as i32) + 1);
			let mut fTemp7: f32 = f32::floor(fTemp4);
			let mut fTemp8: f32 = (fTemp3 + (-1.0 - fTemp7));
			let mut fTemp9: f32 = (0.0 - fTemp8);
			let mut fTemp10: f32 = (fTemp3 + (-2.0 - fTemp7));
			let mut fTemp11: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp12: f32 = (fTemp3 + (-3.0 - fTemp7));
			let mut fTemp13: f32 = (0.0 - (0.333333343 * fTemp12));
			let mut fTemp14: f32 = (fTemp3 + (-4.0 - fTemp7));
			let mut fTemp15: f32 = (0.0 - (0.25 * fTemp14));
			let mut fTemp16: f32 = (fTemp3 - fTemp7);
			let mut iTemp17: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp5 + 2) as i32)) as f32)) as i32) + 1);
			let mut fTemp18: f32 = (0.0 - fTemp12);
			let mut fTemp19: f32 = (0.0 - (0.5 * fTemp14));
			let mut iTemp20: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp5 + 1) as i32)) as f32)) as i32) + 1);
			let mut fTemp21: f32 = (0.0 - fTemp10);
			let mut fTemp22: f32 = (0.0 - (0.5 * fTemp12));
			let mut fTemp23: f32 = (0.0 - (0.333333343 * fTemp14));
			let mut fTemp24: f32 = (fTemp8 * fTemp10);
			let mut iTemp25: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp5 + 3) as i32)) as f32)) as i32) + 1);
			let mut fTemp26: f32 = (0.0 - fTemp14);
			let mut fTemp27: f32 = (fTemp24 * fTemp12);
			let mut iTemp28: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp5 + 4) as i32)) as f32)) as i32) + 1);
			self.fVec2[0] = (((((self.fRec15[((self.IOTA - iTemp6) & 2047) as usize] * fTemp9) * fTemp11) * fTemp13) * fTemp15) + (fTemp16 * ((((0.5 * (((fTemp8 * self.fRec15[((self.IOTA - iTemp17) & 2047) as usize]) * fTemp18) * fTemp19)) + (((self.fRec15[((self.IOTA - iTemp20) & 2047) as usize] * fTemp21) * fTemp22) * fTemp23)) + (0.166666672 * ((fTemp24 * self.fRec15[((self.IOTA - iTemp25) & 2047) as usize]) * fTemp26))) + (0.0416666679 * (fTemp27 * self.fRec15[((self.IOTA - iTemp28) & 2047) as usize])))));
			self.fRec11[0] = self.fVec2[1];
			let mut iRec12: i32 = iRec16;
			let mut fRec7: f32 = fRec10;
			let mut fRec8: f32 = self.fRec11[0];
			let mut fRec9: f32 = (self.fRec11[0] + (iRec12 as f32));
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = (((((fTemp9 * fTemp11) * fTemp13) * fTemp15) * self.fRec2[((self.IOTA - iTemp6) & 2047) as usize]) + (fTemp16 * (((0.166666672 * ((fTemp24 * fTemp26) * self.fRec2[((self.IOTA - iTemp25) & 2047) as usize])) + ((((fTemp21 * fTemp22) * fTemp23) * self.fRec2[((self.IOTA - iTemp20) & 2047) as usize]) + (0.5 * (((fTemp8 * fTemp18) * fTemp19) * self.fRec2[((self.IOTA - iTemp17) & 2047) as usize])))) + (0.0416666679 * (fTemp27 * self.fRec2[((self.IOTA - iTemp28) & 2047) as usize])))));
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			outputs[0][i as usize] = (fRec1 as f32);
			outputs[1][i as usize] = (fRec1 as f32);
			self.iRec6[1] = self.iRec6[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec19[1] = self.fRec19[0];
			self.IOTA = (self.IOTA + 1);
			self.iVec0[1] = self.iVec0[0];
			self.iRec21[1] = self.iRec21[0];
			self.iVec1[1] = self.iVec1[0];
			self.iRec22[1] = self.iRec22[0];
			self.fRec20[1] = self.fRec20[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

