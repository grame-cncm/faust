


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider0: f32,
	fHslider1: f32,
	iVec0: [i32;2],
	fRec0: [f32;2],
	fRec1: [f32;2],
	fButton0: f32,
	fVec1: [f32;2],
	fHslider2: f32,
	fRec3: [f32;2],
	fVec2: [f32;2],
	fRec2: [f32;2],
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fRec4: [f32;2],
	fRec5: [f32;2],
	fVec3: [f32;2],
	fRec6: [f32;2],
	fRec7: [f32;2],
	fRec8: [f32;2],
	fVec4: [f32;2],
	fRec9: [f32;2],
	fRec10: [f32;2],
	fRec11: [f32;2],
	fVec5: [f32;2],
	fRec12: [f32;2],
	fRec13: [f32;2],
	fRec14: [f32;2],
	fVec6: [f32;2],
	fRec15: [f32;2],
	fRec16: [f32;2],
	fRec17: [f32;2],
	fVec7: [f32;2],
	fRec18: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			iVec0: [0;2],
			fRec0: [0.0;2],
			fRec1: [0.0;2],
			fButton0: 0.0,
			fVec1: [0.0;2],
			fHslider2: 0.0,
			fRec3: [0.0;2],
			fVec2: [0.0;2],
			fRec2: [0.0;2],
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fRec4: [0.0;2],
			fRec5: [0.0;2],
			fVec3: [0.0;2],
			fRec6: [0.0;2],
			fRec7: [0.0;2],
			fRec8: [0.0;2],
			fVec4: [0.0;2],
			fRec9: [0.0;2],
			fRec10: [0.0;2],
			fRec11: [0.0;2],
			fVec5: [0.0;2],
			fRec12: [0.0;2],
			fRec13: [0.0;2],
			fRec14: [0.0;2],
			fVec6: [0.0;2],
			fRec15: [0.0;2],
			fRec16: [0.0;2],
			fRec17: [0.0;2],
			fVec7: [0.0;2],
			fRec18: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'10',  'Keyboard 0 - Number of Keys':'18',  'Keyboard 1 - Number of Keys':'18',  'Keyboard 2 - Number of Keys':'18',  'Keyboard 3 - Number of Keys':'18',  'Keyboard 4 - Number of Keys':'18',  'Keyboard 5 - Number of Keys':'18',  'Keyboard 6 - Number of Keys':'18',  'Keyboard 7 - Number of Keys':'18',  'Keyboard 8 - Number of Keys':'18',  'Keyboard 9 - Number of Keys':'18',  'Keyboard 0 - Lowest Key':'50',  'Keyboard 1 - Lowest Key':'55',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'65',  'Keyboard 4 - Lowest Key':'70',  'Keyboard 5 - Lowest Key':'75',  'Keyboard 6 - Lowest Key':'80',  'Keyboard 7 - Lowest Key':'85',  'Keyboard 8 - Lowest Key':'90',  'Keyboard 9 - Lowest Key':'95',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0',  'Keyboard 8 - Piano Keyboard':'0',  'Keyboard 9 - Piano Keyboard':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 4 - Send X':'0',  'Keyboard 5 - Send X':'0',  'Keyboard 6 - Send X':'0',  'Keyboard 7 - Send X':'0',  'Keyboard 8 - Send X':'0',  'Keyboard 9 - Send X':'0' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "turenas");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("synths.lib/name", "Faust Synthesizer Library");
		m.declare("synths.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 400.0;
		self.fHslider1 = 0.0;
		self.fButton0 = 0.0;
		self.fHslider2 = 2.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec3[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec2[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec4[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec5[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec3[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec6[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec7[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec8[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fVec4[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec9[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec10[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec11[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fVec5[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec12[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec13[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec14[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fVec6[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec15[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec16[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec17[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fVec7[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec18[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		self.fConst2 = (0.00100000005 * self.fConst0);
		self.fConst3 = (1.0 / self.fConst0);
		self.fConst4 = (1000.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("turenas");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider0, 400.0, 50.0, 2000.0, 0.01);
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.declare(&mut self.fHslider2, "acc", "0 0 -10 0 10");
		ui_interface.addHorizontalSlider("res", &mut self.fHslider2, 2.5, 0.01, 5.0, 0.01);
		ui_interface.addHorizontalSlider("y", &mut self.fHslider1, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut fSlow2: f32 = (self.fConst1 * (fSlow0 * ((0.833333313 * fSlow1) + 1.0)));
		let mut fSlow3: f32 = f32::sin(fSlow2);
		let mut fSlow4: f32 = f32::cos(fSlow2);
		let mut fSlow5: f32 = (0.0 - fSlow3);
		let mut fSlow6: f32 = (self.fButton0 as f32);
		let mut fSlow7: f32 = (0.00100000005 * (self.fHslider2 as f32));
		let mut fSlow8: f32 = (self.fConst1 * (fSlow0 * ((1.66666663 * fSlow1) + 1.0)));
		let mut fSlow9: f32 = f32::sin(fSlow8);
		let mut fSlow10: f32 = f32::cos(fSlow8);
		let mut fSlow11: f32 = (0.0 - fSlow9);
		let mut fSlow12: f32 = (self.fConst1 * (fSlow0 * ((2.5 * fSlow1) + 1.0)));
		let mut fSlow13: f32 = f32::sin(fSlow12);
		let mut fSlow14: f32 = f32::cos(fSlow12);
		let mut fSlow15: f32 = (0.0 - fSlow13);
		let mut fSlow16: f32 = (self.fConst1 * (fSlow0 * ((3.33333325 * fSlow1) + 1.0)));
		let mut fSlow17: f32 = f32::sin(fSlow16);
		let mut fSlow18: f32 = f32::cos(fSlow16);
		let mut fSlow19: f32 = (0.0 - fSlow17);
		let mut fSlow20: f32 = (self.fConst1 * (fSlow0 * ((4.16666651 * fSlow1) + 1.0)));
		let mut fSlow21: f32 = f32::sin(fSlow20);
		let mut fSlow22: f32 = f32::cos(fSlow20);
		let mut fSlow23: f32 = (0.0 - fSlow21);
		let mut fSlow24: f32 = (self.fConst1 * (fSlow0 * ((5.0 * fSlow1) + 1.0)));
		let mut fSlow25: f32 = f32::sin(fSlow24);
		let mut fSlow26: f32 = f32::cos(fSlow24);
		let mut fSlow27: f32 = (0.0 - fSlow25);
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec0[0] = ((fSlow3 * self.fRec1[1]) + (fSlow4 * self.fRec0[1]));
			let mut iTemp0: i32 = (1 - self.iVec0[1]);
			self.fRec1[0] = (((fSlow4 * self.fRec1[1]) + (fSlow5 * self.fRec0[1])) + (iTemp0 as f32));
			self.fVec1[0] = fSlow6;
			let mut iTemp1: i32 = (((((fSlow6 - self.fVec1[1]) > 0.0) as i32) > 0) as i32);
			self.fRec3[0] = (fSlow7 + (0.999000013 * self.fRec3[1]));
			let mut fTemp2: f32 = (self.fRec3[0] + 0.00100000005);
			self.fVec2[0] = fTemp2;
			let mut fTemp3: f32 = (self.fConst0 * fTemp2);
			self.fRec2[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp3, (self.fRec2[1] + (1.0 - (self.fConst0 * (self.fVec2[1] - fTemp2))))) };
			let mut iTemp4: i32 = ((self.fRec2[0] < self.fConst2) as i32);
			self.fRec4[0] = ((fSlow9 * self.fRec5[1]) + (fSlow10 * self.fRec4[1]));
			self.fRec5[0] = (((fSlow10 * self.fRec5[1]) + (fSlow11 * self.fRec4[1])) + (iTemp0 as f32));
			let mut fTemp5: f32 = ((0.866666675 * self.fRec3[0]) + 0.00100000005);
			self.fVec3[0] = fTemp5;
			let mut fTemp6: f32 = (self.fConst0 * fTemp5);
			self.fRec6[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp6, (self.fRec6[1] + (1.0 - (self.fConst0 * (self.fVec3[1] - fTemp5))))) };
			let mut iTemp7: i32 = ((self.fRec6[0] < self.fConst2) as i32);
			self.fRec7[0] = ((fSlow13 * self.fRec8[1]) + (fSlow14 * self.fRec7[1]));
			self.fRec8[0] = (((fSlow14 * self.fRec8[1]) + (fSlow15 * self.fRec7[1])) + (iTemp0 as f32));
			let mut fTemp8: f32 = ((0.733333349 * self.fRec3[0]) + 0.00100000005);
			self.fVec4[0] = fTemp8;
			let mut fTemp9: f32 = (self.fConst0 * fTemp8);
			self.fRec9[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp9, (self.fRec9[1] + (1.0 - (self.fConst0 * (self.fVec4[1] - fTemp8))))) };
			let mut iTemp10: i32 = ((self.fRec9[0] < self.fConst2) as i32);
			self.fRec10[0] = ((fSlow17 * self.fRec11[1]) + (fSlow18 * self.fRec10[1]));
			self.fRec11[0] = (((fSlow18 * self.fRec11[1]) + (fSlow19 * self.fRec10[1])) + (iTemp0 as f32));
			let mut fTemp11: f32 = ((0.600000024 * self.fRec3[0]) + 0.00100000005);
			self.fVec5[0] = fTemp11;
			let mut fTemp12: f32 = (self.fConst0 * fTemp11);
			self.fRec12[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp12, (self.fRec12[1] + (1.0 - (self.fConst0 * (self.fVec5[1] - fTemp11))))) };
			let mut iTemp13: i32 = ((self.fRec12[0] < self.fConst2) as i32);
			self.fRec13[0] = ((fSlow21 * self.fRec14[1]) + (fSlow22 * self.fRec13[1]));
			self.fRec14[0] = (((fSlow22 * self.fRec14[1]) + (fSlow23 * self.fRec13[1])) + (iTemp0 as f32));
			let mut fTemp14: f32 = ((0.466666669 * self.fRec3[0]) + 0.00100000005);
			self.fVec6[0] = fTemp14;
			let mut fTemp15: f32 = (self.fConst0 * fTemp14);
			self.fRec15[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp15, (self.fRec15[1] + (1.0 - (self.fConst0 * (self.fVec6[1] - fTemp14))))) };
			let mut iTemp16: i32 = ((self.fRec15[0] < self.fConst2) as i32);
			self.fRec16[0] = ((fSlow25 * self.fRec17[1]) + (fSlow26 * self.fRec16[1]));
			self.fRec17[0] = (((fSlow26 * self.fRec17[1]) + (fSlow27 * self.fRec16[1])) + (iTemp0 as f32));
			let mut fTemp17: f32 = ((0.333333343 * self.fRec3[0]) + 0.00100000005);
			self.fVec7[0] = fTemp17;
			let mut fTemp18: f32 = (self.fConst0 * fTemp17);
			self.fRec18[0] = if (iTemp1 as i32 == 1) { 0.0 } else { f32::min(fTemp18, (self.fRec18[1] + (1.0 - (self.fConst0 * (self.fVec7[1] - fTemp17))))) };
			let mut iTemp19: i32 = ((self.fRec18[0] < self.fConst2) as i32);
			outputs[0][i as usize] = ((0.0500000007 * ((((((0.444444448 * (self.fRec0[0] * if (iTemp4 as i32 == 1) { if (((self.fRec2[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp4 as i32 == 1) { (self.fConst4 * self.fRec2[0]) } else { 1.0 } } } else { if (((self.fRec2[0] < fTemp3) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec2[0] - self.fConst2)) / (fTemp2 + -0.00100000005))) + 1.0) } else { 0.0 } })) + (self.fRec4[0] * (0.0 - (0.111111112 * if (iTemp7 as i32 == 1) { if (((self.fRec6[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp7 as i32 == 1) { (self.fConst4 * self.fRec6[0]) } else { 1.0 } } } else { if (((self.fRec6[0] < fTemp6) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec6[0] - self.fConst2)) / (fTemp5 + -0.00100000005))) + 1.0) } else { 0.0 } })))) + (self.fRec7[0] * (0.0 - (0.666666687 * if (iTemp10 as i32 == 1) { if (((self.fRec9[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp10 as i32 == 1) { (self.fConst4 * self.fRec9[0]) } else { 1.0 } } } else { if (((self.fRec9[0] < fTemp9) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec9[0] - self.fConst2)) / (fTemp8 + -0.00100000005))) + 1.0) } else { 0.0 } })))) + (self.fRec10[0] * (0.0 - (1.22222221 * if (iTemp13 as i32 == 1) { if (((self.fRec12[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp13 as i32 == 1) { (self.fConst4 * self.fRec12[0]) } else { 1.0 } } } else { if (((self.fRec12[0] < fTemp12) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec12[0] - self.fConst2)) / (fTemp11 + -0.00100000005))) + 1.0) } else { 0.0 } })))) + (self.fRec13[0] * (0.0 - (1.77777779 * if (iTemp16 as i32 == 1) { if (((self.fRec15[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp16 as i32 == 1) { (self.fConst4 * self.fRec15[0]) } else { 1.0 } } } else { if (((self.fRec15[0] < fTemp15) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec15[0] - self.fConst2)) / (fTemp14 + -0.00100000005))) + 1.0) } else { 0.0 } })))) + (self.fRec16[0] * (0.0 - (2.33333325 * if (iTemp19 as i32 == 1) { if (((self.fRec18[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp19 as i32 == 1) { (self.fConst4 * self.fRec18[0]) } else { 1.0 } } } else { if (((self.fRec18[0] < fTemp18) as i32) as i32 == 1) { ((self.fConst3 * ((0.0 - (self.fRec18[0] - self.fConst2)) / (fTemp17 + -0.00100000005))) + 1.0) } else { 0.0 } }))))) as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec3[1] = self.fRec3[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fVec3[1] = self.fVec3[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fVec4[1] = self.fVec4[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[1] = self.fRec11[0];
			self.fVec5[1] = self.fVec5[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[1] = self.fRec14[0];
			self.fVec6[1] = self.fVec6[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[1] = self.fRec17[0];
			self.fVec7[1] = self.fVec7[0];
			self.fRec18[1] = self.fRec18[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

