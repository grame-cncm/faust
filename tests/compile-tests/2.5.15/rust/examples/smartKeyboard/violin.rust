
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	iRec10: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec26: [f32;2],
	fRec22: [f32;2],
	fHslider2: f32,
	fHslider3: f32,
	fRec28: [f32;2],
	fRec27: [f32;2],
	fRec29: [f32;4],
	IOTA: i32,
	fRec30: [f32;2048],
	fConst6: f32,
	fVec0: [f32;2],
	fHslider4: f32,
	fRec32: [f32;2],
	fVec1: [f32;2048],
	fRec18: [f32;2048],
	fRec20: [f32;2],
	fRec16: [f32;4],
	fConst7: f32,
	fConst8: f32,
	fRec14: [f32;3],
	fConst9: f32,
	iRec6: [i32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	iRec43: [i32;2],
	fHslider5: f32,
	fHslider6: f32,
	fRec59: [f32;2],
	fRec55: [f32;2],
	fHslider7: f32,
	fRec60: [f32;4],
	fRec61: [f32;2048],
	fVec2: [f32;2],
	fVec3: [f32;2048],
	fRec51: [f32;2048],
	fRec53: [f32;2],
	fRec49: [f32;4],
	fRec47: [f32;3],
	iRec39: [i32;2],
	fRec35: [f32;2048],
	fRec33: [f32;2],
	iRec73: [i32;2],
	fHslider8: f32,
	fHslider9: f32,
	fRec89: [f32;2],
	fRec85: [f32;2],
	fHslider10: f32,
	fRec90: [f32;4],
	fRec91: [f32;2048],
	fVec4: [f32;2],
	fVec5: [f32;2048],
	fRec81: [f32;2048],
	fRec83: [f32;2],
	fRec79: [f32;4],
	fRec77: [f32;3],
	iRec69: [i32;2],
	fRec65: [f32;2048],
	fRec63: [f32;2],
	iRec103: [i32;2],
	fHslider11: f32,
	fHslider12: f32,
	fRec119: [f32;2],
	fRec115: [f32;2],
	fHslider13: f32,
	fRec120: [f32;4],
	fRec121: [f32;2048],
	fVec6: [f32;2],
	fVec7: [f32;2048],
	fRec111: [f32;2048],
	fRec113: [f32;2],
	fRec109: [f32;4],
	fRec107: [f32;3],
	iRec99: [i32;2],
	fRec95: [f32;2048],
	fRec93: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iRec10: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec26: [0.0;2],
			fRec22: [0.0;2],
			fHslider2: 0.0,
			fHslider3: 0.0,
			fRec28: [0.0;2],
			fRec27: [0.0;2],
			fRec29: [0.0;4],
			IOTA: 0,
			fRec30: [0.0;2048],
			fConst6: 0.0,
			fVec0: [0.0;2],
			fHslider4: 0.0,
			fRec32: [0.0;2],
			fVec1: [0.0;2048],
			fRec18: [0.0;2048],
			fRec20: [0.0;2],
			fRec16: [0.0;4],
			fConst7: 0.0,
			fConst8: 0.0,
			fRec14: [0.0;3],
			fConst9: 0.0,
			iRec6: [0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
			iRec43: [0;2],
			fHslider5: 0.0,
			fHslider6: 0.0,
			fRec59: [0.0;2],
			fRec55: [0.0;2],
			fHslider7: 0.0,
			fRec60: [0.0;4],
			fRec61: [0.0;2048],
			fVec2: [0.0;2],
			fVec3: [0.0;2048],
			fRec51: [0.0;2048],
			fRec53: [0.0;2],
			fRec49: [0.0;4],
			fRec47: [0.0;3],
			iRec39: [0;2],
			fRec35: [0.0;2048],
			fRec33: [0.0;2],
			iRec73: [0;2],
			fHslider8: 0.0,
			fHslider9: 0.0,
			fRec89: [0.0;2],
			fRec85: [0.0;2],
			fHslider10: 0.0,
			fRec90: [0.0;4],
			fRec91: [0.0;2048],
			fVec4: [0.0;2],
			fVec5: [0.0;2048],
			fRec81: [0.0;2048],
			fRec83: [0.0;2],
			fRec79: [0.0;4],
			fRec77: [0.0;3],
			iRec69: [0;2],
			fRec65: [0.0;2048],
			fRec63: [0.0;2],
			iRec103: [0;2],
			fHslider11: 0.0,
			fHslider12: 0.0,
			fRec119: [0.0;2],
			fRec115: [0.0;2],
			fHslider13: 0.0,
			fRec120: [0.0;4],
			fRec121: [0.0;2048],
			fVec6: [0.0;2],
			fVec7: [0.0;2048],
			fRec111: [0.0;2048],
			fRec113: [0.0;2],
			fRec109: [0.0;4],
			fRec107: [0.0;3],
			iRec99: [0;2],
			fRec95: [0.0;2048],
			fRec93: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Send Fingers Count':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 4 - Send Key X':'1',  'Keyboard 4 - Send Key Y':'1',  'Keyboard 4 - Key 0 - Label':'Bow',  'Keyboard 4 - Static Mode':'1' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "violin");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 220.0;
		self.fHslider1 = 1.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 550.0;
		self.fHslider6 = 1.0;
		self.fHslider7 = 0.0;
		self.fHslider8 = 330.0;
		self.fHslider9 = 1.0;
		self.fHslider10 = 0.0;
		self.fHslider11 = 440.0;
		self.fHslider12 = 1.0;
		self.fHslider13 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec10[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec26[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec22[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec28[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec27[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec29[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec30[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec0[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec32[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec1[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2048) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec18[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2048) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec20[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec16[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 4) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec14[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.iRec6[l14 as usize] = 0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec2[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2048) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec0[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.iRec43[l17 as usize] = 0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec59[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec55[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec60[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 4) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec61[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2048) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fVec2[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fVec3[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2048) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec51[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2048) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec53[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec49[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 4) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec47[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.iRec39[l28 as usize] = 0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec35[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2048) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec33[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.iRec73[l31 as usize] = 0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec89[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec85[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec90[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 4) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec91[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2048) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec4[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fVec5[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2048) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec81[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2048) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec83[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 2) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec79[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 4) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec77[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 3) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.iRec69[l42 as usize] = 0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec65[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2048) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec63[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.iRec103[l45 as usize] = 0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec119[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec115[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec120[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 4) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec121[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2048) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fVec6[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fVec7[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 2048) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec111[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 2048) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec113[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec109[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 4) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec107[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.iRec99[l56 as usize] = 0;
			l56 = (l56 + 1);
			if (l56 < 2) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec95[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 2048) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec93[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((1570.79639 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (1.0 / (((self.fConst2 + 0.5) / self.fConst1) + 1.0));
		self.fConst4 = (0.00882352982 * self.fConst0);
		self.fConst5 = (0.000441176468 * self.fConst0);
		self.fConst6 = (0.0010294118 * self.fConst0);
		self.fConst7 = (((self.fConst2 + -0.5) / self.fConst1) + 1.0);
		self.fConst8 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst1))));
		self.fConst9 = (0.0 - self.fConst2);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("violin");
		ui_interface.addHorizontalSlider("kb0bend", &mut self.fHslider1, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb0fingers", &mut self.fHslider2, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb0freq", &mut self.fHslider0, 220.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb1bend", &mut self.fHslider9, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb1fingers", &mut self.fHslider10, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb1freq", &mut self.fHslider8, 330.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb2bend", &mut self.fHslider12, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb2fingers", &mut self.fHslider13, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb2freq", &mut self.fHslider11, 440.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb3bend", &mut self.fHslider6, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("kb3fingers", &mut self.fHslider7, 0.0, 0.0, 10.0, 1.0);
		ui_interface.addHorizontalSlider("kb3freq", &mut self.fHslider5, 550.0, 20.0, 10000.0, 0.01);
		ui_interface.addHorizontalSlider("kb4k0x", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.addHorizontalSlider("kb4k0y", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.340000004 / ((self.fHslider0 as f32) * (self.fHslider1 as f32)));
		let mut iSlow1: i32 = ((((self.fHslider2 as f32) as i32) > 0) as i32);
		let mut fSlow2: f32 = (0.00100000005 * (self.fHslider3 as f32));
		let mut fSlow3: f32 = (0.00100000005 * (self.fHslider4 as f32));
		let mut fSlow4: f32 = (0.340000004 / ((self.fHslider5 as f32) * (self.fHslider6 as f32)));
		let mut iSlow5: i32 = ((((self.fHslider7 as f32) as i32) > 0) as i32);
		let mut fSlow6: f32 = (0.340000004 / ((self.fHslider8 as f32) * (self.fHslider9 as f32)));
		let mut iSlow7: i32 = ((((self.fHslider10 as f32) as i32) > 0) as i32);
		let mut fSlow8: f32 = (0.340000004 / ((self.fHslider11 as f32) * (self.fHslider12 as f32)));
		let mut iSlow9: i32 = ((((self.fHslider13 as f32) as i32) > 0) as i32);
		let mut i: i32 = 0;
		loop {
			self.iRec10[0] = 0;
			let mut iRec11: i32 = self.iRec10[1];
			let mut fRec15: f32 = ((self.iRec6[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec16[2]) + (0.200000003 * (self.fRec16[1] + self.fRec16[3])))));
			self.fRec26[0] = (fSlow0 + (0.999000013 * self.fRec26[1]));
			let mut fTemp0: f32 = (self.fRec26[0] + -0.0799999982);
			let mut fTemp1: f32 = (self.fConst5 * fTemp0);
			let mut fTemp2: f32 = (fTemp1 + -1.49999499);
			let mut iTemp3: i32 = (fTemp2 as i32);
			let mut iTemp4: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp3) as f32)) as i32);
			let mut fTemp5: f32 = f32::floor(fTemp2);
			let mut fTemp6: f32 = (fTemp1 + (-1.0 - fTemp5));
			let mut fTemp7: f32 = (0.0 - fTemp6);
			let mut fTemp8: f32 = (fTemp1 + (-2.0 - fTemp5));
			let mut fTemp9: f32 = (0.0 - (0.5 * fTemp8));
			let mut fTemp10: f32 = (fTemp1 + (-3.0 - fTemp5));
			let mut fTemp11: f32 = (0.0 - (0.333333343 * fTemp10));
			let mut fTemp12: f32 = (fTemp1 + (-4.0 - fTemp5));
			let mut fTemp13: f32 = (0.0 - (0.25 * fTemp12));
			let mut fTemp14: f32 = (fTemp1 - fTemp5);
			let mut iTemp15: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 2)) as f32)) as i32);
			let mut fTemp16: f32 = (0.0 - fTemp10);
			let mut fTemp17: f32 = (0.0 - (0.5 * fTemp12));
			let mut iTemp18: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 1)) as f32)) as i32);
			let mut fTemp19: f32 = (0.0 - fTemp8);
			let mut fTemp20: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp21: f32 = (0.0 - (0.333333343 * fTemp12));
			let mut fTemp22: f32 = (fTemp6 * fTemp8);
			let mut iTemp23: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 3)) as f32)) as i32);
			let mut fTemp24: f32 = (0.0 - fTemp12);
			let mut fTemp25: f32 = (fTemp22 * fTemp10);
			let mut iTemp26: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 4)) as f32)) as i32);
			self.fRec22[0] = (((((self.fRec2[((self.IOTA - (iTemp4 + 1)) & 2047) as usize] * fTemp7) * fTemp9) * fTemp11) * fTemp13) + (fTemp14 * ((((0.5 * (((fTemp6 * self.fRec2[((self.IOTA - (iTemp15 + 1)) & 2047) as usize]) * fTemp16) * fTemp17)) + (((self.fRec2[((self.IOTA - (iTemp18 + 1)) & 2047) as usize] * fTemp19) * fTemp20) * fTemp21)) + (0.166666672 * ((fTemp22 * self.fRec2[((self.IOTA - (iTemp23 + 1)) & 2047) as usize]) * fTemp24))) + (0.0416666679 * (fTemp25 * self.fRec2[((self.IOTA - (iTemp26 + 1)) & 2047) as usize])))));
			self.fRec28[0] = (fSlow2 + (0.999000013 * self.fRec28[1]));
			self.fRec27[0] = ((0.999000013 * self.fRec27[1]) + (0.00100000005 * f32::min(1.0, (8000.0 * f32::abs((self.fRec28[0] - self.fRec28[1]))))));
			self.fRec29[0] = self.fRec0[1];
			self.fRec30[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec29[2]) + (0.100000001 * (self.fRec29[1] + self.fRec29[3])))));
			let mut iRec31: i32 = 0;
			let mut fTemp27: f32 = (self.fConst6 * fTemp0);
			let mut fTemp28: f32 = (fTemp27 + -1.49999499);
			let mut iTemp29: i32 = (fTemp28 as i32);
			let mut iTemp30: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp29) as f32)) as i32);
			let mut fTemp31: f32 = f32::floor(fTemp28);
			let mut fTemp32: f32 = (fTemp27 + (-1.0 - fTemp31));
			let mut fTemp33: f32 = (0.0 - fTemp32);
			let mut fTemp34: f32 = (fTemp27 + (-2.0 - fTemp31));
			let mut fTemp35: f32 = (0.0 - (0.5 * fTemp34));
			let mut fTemp36: f32 = (fTemp27 + (-3.0 - fTemp31));
			let mut fTemp37: f32 = (0.0 - (0.333333343 * fTemp36));
			let mut fTemp38: f32 = (fTemp27 + (-4.0 - fTemp31));
			let mut fTemp39: f32 = (0.0 - (0.25 * fTemp38));
			let mut fTemp40: f32 = (fTemp27 - fTemp31);
			let mut iTemp41: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 2)) as f32)) as i32);
			let mut fTemp42: f32 = (0.0 - fTemp36);
			let mut fTemp43: f32 = (0.0 - (0.5 * fTemp38));
			let mut iTemp44: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 1)) as f32)) as i32);
			let mut fTemp45: f32 = (0.0 - fTemp34);
			let mut fTemp46: f32 = (0.0 - (0.5 * fTemp36));
			let mut fTemp47: f32 = (0.0 - (0.333333343 * fTemp38));
			let mut fTemp48: f32 = (fTemp32 * fTemp34);
			let mut iTemp49: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 3)) as f32)) as i32);
			let mut fTemp50: f32 = (0.0 - fTemp38);
			let mut fTemp51: f32 = (fTemp48 * fTemp36);
			let mut iTemp52: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 4)) as f32)) as i32);
			self.fVec0[0] = (((((self.fRec30[((self.IOTA - (iTemp30 + 2)) & 2047) as usize] * fTemp33) * fTemp35) * fTemp37) * fTemp39) + (fTemp40 * ((((0.5 * (((fTemp32 * self.fRec30[((self.IOTA - (iTemp41 + 2)) & 2047) as usize]) * fTemp42) * fTemp43)) + (((self.fRec30[((self.IOTA - (iTemp44 + 2)) & 2047) as usize] * fTemp45) * fTemp46) * fTemp47)) + (0.166666672 * ((fTemp48 * self.fRec30[((self.IOTA - (iTemp49 + 2)) & 2047) as usize]) * fTemp50))) + (0.0416666679 * (fTemp51 * self.fRec30[((self.IOTA - (iTemp52 + 2)) & 2047) as usize])))));
			let mut fTemp53: f32 = (((iSlow1 as f32) * self.fRec27[0]) - (self.fRec22[1] + self.fVec0[1]));
			self.fRec32[0] = (fSlow3 + (0.999000013 * self.fRec32[1]));
			let mut fTemp54: f32 = (5.0 - (4.0 * self.fRec32[0]));
			let mut fTemp55: f32 = (fTemp53 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((fTemp53 * fTemp54)) + 0.75)))));
			let mut fRec23: f32 = (self.fRec22[1] + fTemp55);
			let mut fTemp56: f32 = (self.fVec0[1] + fTemp55);
			self.fVec1[(self.IOTA & 2047) as usize] = fTemp56;
			let mut fRec24: f32 = (((((fTemp7 * fTemp9) * fTemp11) * fTemp13) * self.fVec1[((self.IOTA - iTemp4) & 2047) as usize]) + (fTemp14 * ((0.0416666679 * (fTemp25 * self.fVec1[((self.IOTA - iTemp26) & 2047) as usize])) + (((((fTemp19 * fTemp20) * fTemp21) * self.fVec1[((self.IOTA - iTemp18) & 2047) as usize]) + (0.5 * (((fTemp6 * fTemp16) * fTemp17) * self.fVec1[((self.IOTA - iTemp15) & 2047) as usize]))) + (0.166666672 * ((fTemp22 * fTemp24) * self.fVec1[((self.IOTA - iTemp23) & 2047) as usize]))))));
			let mut iRec25: i32 = iRec31;
			self.fRec18[(self.IOTA & 2047) as usize] = fRec23;
			let mut fRec19: f32 = (((((fTemp33 * fTemp35) * fTemp37) * fTemp39) * self.fRec18[((self.IOTA - (iTemp30 + 1)) & 2047) as usize]) + (fTemp40 * (((0.166666672 * ((fTemp48 * fTemp50) * self.fRec18[((self.IOTA - (iTemp49 + 1)) & 2047) as usize])) + ((((fTemp45 * fTemp46) * fTemp47) * self.fRec18[((self.IOTA - (iTemp44 + 1)) & 2047) as usize]) + (0.5 * (((fTemp32 * fTemp42) * fTemp43) * self.fRec18[((self.IOTA - (iTemp41 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp51 * self.fRec18[((self.IOTA - (iTemp52 + 1)) & 2047) as usize])))));
			self.fRec20[0] = fRec24;
			let mut iRec21: i32 = iRec25;
			self.fRec16[0] = self.fRec20[1];
			let mut iRec17: i32 = iRec21;
			self.fRec14[0] = (self.fRec16[1] - (self.fConst3 * ((self.fConst7 * self.fRec14[2]) + (self.fConst8 * self.fRec14[1]))));
			let mut fTemp57: f32 = (self.fConst3 * ((self.fConst2 * self.fRec14[0]) + (self.fConst9 * self.fRec14[2])));
			let mut fRec12: f32 = fTemp57;
			let mut fRec13: f32 = (fTemp57 + (iRec17 as f32));
			self.iRec6[0] = iRec11;
			let mut fRec7: f32 = fRec15;
			let mut fRec8: f32 = fRec12;
			let mut fRec9: f32 = fRec13;
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = fRec19;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			self.iRec43[0] = 0;
			let mut iRec44: i32 = self.iRec43[1];
			let mut fRec48: f32 = ((self.iRec39[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec49[2]) + (0.200000003 * (self.fRec49[1] + self.fRec49[3])))));
			self.fRec59[0] = (fSlow4 + (0.999000013 * self.fRec59[1]));
			let mut fTemp58: f32 = (self.fRec59[0] + -0.0799999982);
			let mut fTemp59: f32 = (self.fConst5 * fTemp58);
			let mut fTemp60: f32 = (fTemp59 + -1.49999499);
			let mut iTemp61: i32 = (fTemp60 as i32);
			let mut iTemp62: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp61) as f32)) as i32);
			let mut fTemp63: f32 = f32::floor(fTemp60);
			let mut fTemp64: f32 = (fTemp59 + (-1.0 - fTemp63));
			let mut fTemp65: f32 = (0.0 - fTemp64);
			let mut fTemp66: f32 = (fTemp59 + (-2.0 - fTemp63));
			let mut fTemp67: f32 = (0.0 - (0.5 * fTemp66));
			let mut fTemp68: f32 = (fTemp59 + (-3.0 - fTemp63));
			let mut fTemp69: f32 = (0.0 - (0.333333343 * fTemp68));
			let mut fTemp70: f32 = (fTemp59 + (-4.0 - fTemp63));
			let mut fTemp71: f32 = (0.0 - (0.25 * fTemp70));
			let mut fTemp72: f32 = (fTemp59 - fTemp63);
			let mut iTemp73: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp61 + 2)) as f32)) as i32);
			let mut fTemp74: f32 = (0.0 - fTemp68);
			let mut fTemp75: f32 = (0.0 - (0.5 * fTemp70));
			let mut iTemp76: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp61 + 1)) as f32)) as i32);
			let mut fTemp77: f32 = (0.0 - fTemp66);
			let mut fTemp78: f32 = (0.0 - (0.5 * fTemp68));
			let mut fTemp79: f32 = (0.0 - (0.333333343 * fTemp70));
			let mut fTemp80: f32 = (fTemp64 * fTemp66);
			let mut iTemp81: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp61 + 3)) as f32)) as i32);
			let mut fTemp82: f32 = (0.0 - fTemp70);
			let mut fTemp83: f32 = (fTemp80 * fTemp68);
			let mut iTemp84: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp61 + 4)) as f32)) as i32);
			self.fRec55[0] = (((((self.fRec35[((self.IOTA - (iTemp62 + 1)) & 2047) as usize] * fTemp65) * fTemp67) * fTemp69) * fTemp71) + (fTemp72 * ((((0.5 * (((fTemp64 * self.fRec35[((self.IOTA - (iTemp73 + 1)) & 2047) as usize]) * fTemp74) * fTemp75)) + (((self.fRec35[((self.IOTA - (iTemp76 + 1)) & 2047) as usize] * fTemp77) * fTemp78) * fTemp79)) + (0.166666672 * ((fTemp80 * self.fRec35[((self.IOTA - (iTemp81 + 1)) & 2047) as usize]) * fTemp82))) + (0.0416666679 * (fTemp83 * self.fRec35[((self.IOTA - (iTemp84 + 1)) & 2047) as usize])))));
			self.fRec60[0] = self.fRec33[1];
			self.fRec61[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec60[2]) + (0.100000001 * (self.fRec60[1] + self.fRec60[3])))));
			let mut iRec62: i32 = 0;
			let mut fTemp85: f32 = (self.fConst6 * fTemp58);
			let mut fTemp86: f32 = (fTemp85 + -1.49999499);
			let mut iTemp87: i32 = (fTemp86 as i32);
			let mut iTemp88: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp87) as f32)) as i32);
			let mut fTemp89: f32 = f32::floor(fTemp86);
			let mut fTemp90: f32 = (fTemp85 + (-1.0 - fTemp89));
			let mut fTemp91: f32 = (0.0 - fTemp90);
			let mut fTemp92: f32 = (fTemp85 + (-2.0 - fTemp89));
			let mut fTemp93: f32 = (0.0 - (0.5 * fTemp92));
			let mut fTemp94: f32 = (fTemp85 + (-3.0 - fTemp89));
			let mut fTemp95: f32 = (0.0 - (0.333333343 * fTemp94));
			let mut fTemp96: f32 = (fTemp85 + (-4.0 - fTemp89));
			let mut fTemp97: f32 = (0.0 - (0.25 * fTemp96));
			let mut fTemp98: f32 = (fTemp85 - fTemp89);
			let mut iTemp99: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp87 + 2)) as f32)) as i32);
			let mut fTemp100: f32 = (0.0 - fTemp94);
			let mut fTemp101: f32 = (0.0 - (0.5 * fTemp96));
			let mut iTemp102: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp87 + 1)) as f32)) as i32);
			let mut fTemp103: f32 = (0.0 - fTemp92);
			let mut fTemp104: f32 = (0.0 - (0.5 * fTemp94));
			let mut fTemp105: f32 = (0.0 - (0.333333343 * fTemp96));
			let mut fTemp106: f32 = (fTemp90 * fTemp92);
			let mut iTemp107: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp87 + 3)) as f32)) as i32);
			let mut fTemp108: f32 = (0.0 - fTemp96);
			let mut fTemp109: f32 = (fTemp106 * fTemp94);
			let mut iTemp110: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp87 + 4)) as f32)) as i32);
			self.fVec2[0] = (((((self.fRec61[((self.IOTA - (iTemp88 + 2)) & 2047) as usize] * fTemp91) * fTemp93) * fTemp95) * fTemp97) + (fTemp98 * ((((0.5 * (((fTemp90 * self.fRec61[((self.IOTA - (iTemp99 + 2)) & 2047) as usize]) * fTemp100) * fTemp101)) + (((self.fRec61[((self.IOTA - (iTemp102 + 2)) & 2047) as usize] * fTemp103) * fTemp104) * fTemp105)) + (0.166666672 * ((fTemp106 * self.fRec61[((self.IOTA - (iTemp107 + 2)) & 2047) as usize]) * fTemp108))) + (0.0416666679 * (fTemp109 * self.fRec61[((self.IOTA - (iTemp110 + 2)) & 2047) as usize])))));
			let mut fTemp111: f32 = (((iSlow5 as f32) * self.fRec27[0]) - (self.fRec55[1] + self.fVec2[1]));
			let mut fTemp112: f32 = (fTemp111 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((fTemp54 * fTemp111)) + 0.75)))));
			let mut fRec56: f32 = (self.fRec55[1] + fTemp112);
			let mut fTemp113: f32 = (self.fVec2[1] + fTemp112);
			self.fVec3[(self.IOTA & 2047) as usize] = fTemp113;
			let mut fRec57: f32 = (((((fTemp65 * fTemp67) * fTemp69) * fTemp71) * self.fVec3[((self.IOTA - iTemp62) & 2047) as usize]) + (fTemp72 * ((0.0416666679 * (fTemp83 * self.fVec3[((self.IOTA - iTemp84) & 2047) as usize])) + (((((fTemp77 * fTemp78) * fTemp79) * self.fVec3[((self.IOTA - iTemp76) & 2047) as usize]) + (0.5 * (((fTemp64 * fTemp74) * fTemp75) * self.fVec3[((self.IOTA - iTemp73) & 2047) as usize]))) + (0.166666672 * ((fTemp80 * fTemp82) * self.fVec3[((self.IOTA - iTemp81) & 2047) as usize]))))));
			let mut iRec58: i32 = iRec62;
			self.fRec51[(self.IOTA & 2047) as usize] = fRec56;
			let mut fRec52: f32 = (((((fTemp91 * fTemp93) * fTemp95) * fTemp97) * self.fRec51[((self.IOTA - (iTemp88 + 1)) & 2047) as usize]) + (fTemp98 * (((0.166666672 * ((fTemp106 * fTemp108) * self.fRec51[((self.IOTA - (iTemp107 + 1)) & 2047) as usize])) + ((((fTemp103 * fTemp104) * fTemp105) * self.fRec51[((self.IOTA - (iTemp102 + 1)) & 2047) as usize]) + (0.5 * (((fTemp90 * fTemp100) * fTemp101) * self.fRec51[((self.IOTA - (iTemp99 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp109 * self.fRec51[((self.IOTA - (iTemp110 + 1)) & 2047) as usize])))));
			self.fRec53[0] = fRec57;
			let mut iRec54: i32 = iRec58;
			self.fRec49[0] = self.fRec53[1];
			let mut iRec50: i32 = iRec54;
			self.fRec47[0] = (self.fRec49[1] - (self.fConst3 * ((self.fConst8 * self.fRec47[1]) + (self.fConst7 * self.fRec47[2]))));
			let mut fTemp114: f32 = (self.fConst3 * ((self.fConst2 * self.fRec47[0]) + (self.fConst9 * self.fRec47[2])));
			let mut fRec45: f32 = fTemp114;
			let mut fRec46: f32 = ((iRec50 as f32) + fTemp114);
			self.iRec39[0] = iRec44;
			let mut fRec40: f32 = fRec48;
			let mut fRec41: f32 = fRec45;
			let mut fRec42: f32 = fRec46;
			self.fRec35[(self.IOTA & 2047) as usize] = fRec40;
			let mut fRec36: f32 = fRec52;
			let mut fRec37: f32 = fRec41;
			let mut fRec38: f32 = fRec42;
			self.fRec33[0] = fRec36;
			let mut fRec34: f32 = fRec38;
			self.iRec73[0] = 0;
			let mut iRec74: i32 = self.iRec73[1];
			let mut fRec78: f32 = ((self.iRec69[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec79[2]) + (0.200000003 * (self.fRec79[1] + self.fRec79[3])))));
			self.fRec89[0] = (fSlow6 + (0.999000013 * self.fRec89[1]));
			let mut fTemp115: f32 = (self.fRec89[0] + -0.0799999982);
			let mut fTemp116: f32 = (self.fConst5 * fTemp115);
			let mut fTemp117: f32 = (fTemp116 + -1.49999499);
			let mut iTemp118: i32 = (fTemp117 as i32);
			let mut iTemp119: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp118) as f32)) as i32);
			let mut fTemp120: f32 = f32::floor(fTemp117);
			let mut fTemp121: f32 = (fTemp116 + (-1.0 - fTemp120));
			let mut fTemp122: f32 = (0.0 - fTemp121);
			let mut fTemp123: f32 = (fTemp116 + (-2.0 - fTemp120));
			let mut fTemp124: f32 = (0.0 - (0.5 * fTemp123));
			let mut fTemp125: f32 = (fTemp116 + (-3.0 - fTemp120));
			let mut fTemp126: f32 = (0.0 - (0.333333343 * fTemp125));
			let mut fTemp127: f32 = (fTemp116 + (-4.0 - fTemp120));
			let mut fTemp128: f32 = (0.0 - (0.25 * fTemp127));
			let mut fTemp129: f32 = (fTemp116 - fTemp120);
			let mut iTemp130: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp118 + 2)) as f32)) as i32);
			let mut fTemp131: f32 = (0.0 - fTemp125);
			let mut fTemp132: f32 = (0.0 - (0.5 * fTemp127));
			let mut iTemp133: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp118 + 1)) as f32)) as i32);
			let mut fTemp134: f32 = (0.0 - fTemp123);
			let mut fTemp135: f32 = (0.0 - (0.5 * fTemp125));
			let mut fTemp136: f32 = (0.0 - (0.333333343 * fTemp127));
			let mut fTemp137: f32 = (fTemp121 * fTemp123);
			let mut iTemp138: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp118 + 3)) as f32)) as i32);
			let mut fTemp139: f32 = (0.0 - fTemp127);
			let mut fTemp140: f32 = (fTemp137 * fTemp125);
			let mut iTemp141: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp118 + 4)) as f32)) as i32);
			self.fRec85[0] = (((((self.fRec65[((self.IOTA - (iTemp119 + 1)) & 2047) as usize] * fTemp122) * fTemp124) * fTemp126) * fTemp128) + (fTemp129 * ((((0.5 * (((fTemp121 * self.fRec65[((self.IOTA - (iTemp130 + 1)) & 2047) as usize]) * fTemp131) * fTemp132)) + (((self.fRec65[((self.IOTA - (iTemp133 + 1)) & 2047) as usize] * fTemp134) * fTemp135) * fTemp136)) + (0.166666672 * ((fTemp137 * self.fRec65[((self.IOTA - (iTemp138 + 1)) & 2047) as usize]) * fTemp139))) + (0.0416666679 * (fTemp140 * self.fRec65[((self.IOTA - (iTemp141 + 1)) & 2047) as usize])))));
			self.fRec90[0] = self.fRec63[1];
			self.fRec91[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec90[2]) + (0.100000001 * (self.fRec90[1] + self.fRec90[3])))));
			let mut iRec92: i32 = 0;
			let mut fTemp142: f32 = (self.fConst6 * fTemp115);
			let mut fTemp143: f32 = (fTemp142 + -1.49999499);
			let mut iTemp144: i32 = (fTemp143 as i32);
			let mut iTemp145: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp144) as f32)) as i32);
			let mut fTemp146: f32 = f32::floor(fTemp143);
			let mut fTemp147: f32 = (fTemp142 + (-1.0 - fTemp146));
			let mut fTemp148: f32 = (0.0 - fTemp147);
			let mut fTemp149: f32 = (fTemp142 + (-2.0 - fTemp146));
			let mut fTemp150: f32 = (0.0 - (0.5 * fTemp149));
			let mut fTemp151: f32 = (fTemp142 + (-3.0 - fTemp146));
			let mut fTemp152: f32 = (0.0 - (0.333333343 * fTemp151));
			let mut fTemp153: f32 = (fTemp142 + (-4.0 - fTemp146));
			let mut fTemp154: f32 = (0.0 - (0.25 * fTemp153));
			let mut fTemp155: f32 = (fTemp142 - fTemp146);
			let mut iTemp156: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp144 + 2)) as f32)) as i32);
			let mut fTemp157: f32 = (0.0 - fTemp151);
			let mut fTemp158: f32 = (0.0 - (0.5 * fTemp153));
			let mut iTemp159: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp144 + 1)) as f32)) as i32);
			let mut fTemp160: f32 = (0.0 - fTemp149);
			let mut fTemp161: f32 = (0.0 - (0.5 * fTemp151));
			let mut fTemp162: f32 = (0.0 - (0.333333343 * fTemp153));
			let mut fTemp163: f32 = (fTemp147 * fTemp149);
			let mut iTemp164: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp144 + 3)) as f32)) as i32);
			let mut fTemp165: f32 = (0.0 - fTemp153);
			let mut fTemp166: f32 = (fTemp163 * fTemp151);
			let mut iTemp167: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp144 + 4)) as f32)) as i32);
			self.fVec4[0] = (((((self.fRec91[((self.IOTA - (iTemp145 + 2)) & 2047) as usize] * fTemp148) * fTemp150) * fTemp152) * fTemp154) + (fTemp155 * ((((0.5 * (((fTemp147 * self.fRec91[((self.IOTA - (iTemp156 + 2)) & 2047) as usize]) * fTemp157) * fTemp158)) + (((self.fRec91[((self.IOTA - (iTemp159 + 2)) & 2047) as usize] * fTemp160) * fTemp161) * fTemp162)) + (0.166666672 * ((fTemp163 * self.fRec91[((self.IOTA - (iTemp164 + 2)) & 2047) as usize]) * fTemp165))) + (0.0416666679 * (fTemp166 * self.fRec91[((self.IOTA - (iTemp167 + 2)) & 2047) as usize])))));
			let mut fTemp168: f32 = (((iSlow7 as f32) * self.fRec27[0]) - (self.fRec85[1] + self.fVec4[1]));
			let mut fTemp169: f32 = (fTemp168 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((fTemp168 * fTemp54)) + 0.75)))));
			let mut fRec86: f32 = (self.fRec85[1] + fTemp169);
			let mut fTemp170: f32 = (self.fVec4[1] + fTemp169);
			self.fVec5[(self.IOTA & 2047) as usize] = fTemp170;
			let mut fRec87: f32 = (((((fTemp122 * fTemp124) * fTemp126) * fTemp128) * self.fVec5[((self.IOTA - iTemp119) & 2047) as usize]) + (fTemp129 * ((0.0416666679 * (fTemp140 * self.fVec5[((self.IOTA - iTemp141) & 2047) as usize])) + (((((fTemp134 * fTemp135) * fTemp136) * self.fVec5[((self.IOTA - iTemp133) & 2047) as usize]) + (0.5 * (((fTemp121 * fTemp131) * fTemp132) * self.fVec5[((self.IOTA - iTemp130) & 2047) as usize]))) + (0.166666672 * ((fTemp137 * fTemp139) * self.fVec5[((self.IOTA - iTemp138) & 2047) as usize]))))));
			let mut iRec88: i32 = iRec92;
			self.fRec81[(self.IOTA & 2047) as usize] = fRec86;
			let mut fRec82: f32 = (((((fTemp148 * fTemp150) * fTemp152) * fTemp154) * self.fRec81[((self.IOTA - (iTemp145 + 1)) & 2047) as usize]) + (fTemp155 * (((0.166666672 * ((fTemp163 * fTemp165) * self.fRec81[((self.IOTA - (iTemp164 + 1)) & 2047) as usize])) + ((((fTemp160 * fTemp161) * fTemp162) * self.fRec81[((self.IOTA - (iTemp159 + 1)) & 2047) as usize]) + (0.5 * (((fTemp147 * fTemp157) * fTemp158) * self.fRec81[((self.IOTA - (iTemp156 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp166 * self.fRec81[((self.IOTA - (iTemp167 + 1)) & 2047) as usize])))));
			self.fRec83[0] = fRec87;
			let mut iRec84: i32 = iRec88;
			self.fRec79[0] = self.fRec83[1];
			let mut iRec80: i32 = iRec84;
			self.fRec77[0] = (self.fRec79[1] - (self.fConst3 * ((self.fConst8 * self.fRec77[1]) + (self.fConst7 * self.fRec77[2]))));
			let mut fTemp171: f32 = (self.fConst3 * ((self.fConst2 * self.fRec77[0]) + (self.fConst9 * self.fRec77[2])));
			let mut fRec75: f32 = fTemp171;
			let mut fRec76: f32 = ((iRec80 as f32) + fTemp171);
			self.iRec69[0] = iRec74;
			let mut fRec70: f32 = fRec78;
			let mut fRec71: f32 = fRec75;
			let mut fRec72: f32 = fRec76;
			self.fRec65[(self.IOTA & 2047) as usize] = fRec70;
			let mut fRec66: f32 = fRec82;
			let mut fRec67: f32 = fRec71;
			let mut fRec68: f32 = fRec72;
			self.fRec63[0] = fRec66;
			let mut fRec64: f32 = fRec68;
			self.iRec103[0] = 0;
			let mut iRec104: i32 = self.iRec103[1];
			let mut fRec108: f32 = ((self.iRec99[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec109[2]) + (0.200000003 * (self.fRec109[1] + self.fRec109[3])))));
			self.fRec119[0] = (fSlow8 + (0.999000013 * self.fRec119[1]));
			let mut fTemp172: f32 = (self.fRec119[0] + -0.0799999982);
			let mut fTemp173: f32 = (self.fConst5 * fTemp172);
			let mut fTemp174: f32 = (fTemp173 + -1.49999499);
			let mut iTemp175: i32 = (fTemp174 as i32);
			let mut iTemp176: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp175) as f32)) as i32);
			let mut fTemp177: f32 = f32::floor(fTemp174);
			let mut fTemp178: f32 = (fTemp173 + (-1.0 - fTemp177));
			let mut fTemp179: f32 = (0.0 - fTemp178);
			let mut fTemp180: f32 = (fTemp173 + (-2.0 - fTemp177));
			let mut fTemp181: f32 = (0.0 - (0.5 * fTemp180));
			let mut fTemp182: f32 = (fTemp173 + (-3.0 - fTemp177));
			let mut fTemp183: f32 = (0.0 - (0.333333343 * fTemp182));
			let mut fTemp184: f32 = (fTemp173 + (-4.0 - fTemp177));
			let mut fTemp185: f32 = (0.0 - (0.25 * fTemp184));
			let mut fTemp186: f32 = (fTemp173 - fTemp177);
			let mut iTemp187: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp175 + 2)) as f32)) as i32);
			let mut fTemp188: f32 = (0.0 - fTemp182);
			let mut fTemp189: f32 = (0.0 - (0.5 * fTemp184));
			let mut iTemp190: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp175 + 1)) as f32)) as i32);
			let mut fTemp191: f32 = (0.0 - fTemp180);
			let mut fTemp192: f32 = (0.0 - (0.5 * fTemp182));
			let mut fTemp193: f32 = (0.0 - (0.333333343 * fTemp184));
			let mut fTemp194: f32 = (fTemp178 * fTemp180);
			let mut iTemp195: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp175 + 3)) as f32)) as i32);
			let mut fTemp196: f32 = (0.0 - fTemp184);
			let mut fTemp197: f32 = (fTemp194 * fTemp182);
			let mut iTemp198: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp175 + 4)) as f32)) as i32);
			self.fRec115[0] = (((((self.fRec95[((self.IOTA - (iTemp176 + 1)) & 2047) as usize] * fTemp179) * fTemp181) * fTemp183) * fTemp185) + (fTemp186 * ((((0.5 * (((fTemp178 * self.fRec95[((self.IOTA - (iTemp187 + 1)) & 2047) as usize]) * fTemp188) * fTemp189)) + (((self.fRec95[((self.IOTA - (iTemp190 + 1)) & 2047) as usize] * fTemp191) * fTemp192) * fTemp193)) + (0.166666672 * ((fTemp194 * self.fRec95[((self.IOTA - (iTemp195 + 1)) & 2047) as usize]) * fTemp196))) + (0.0416666679 * (fTemp197 * self.fRec95[((self.IOTA - (iTemp198 + 1)) & 2047) as usize])))));
			self.fRec120[0] = self.fRec93[1];
			self.fRec121[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec120[2]) + (0.100000001 * (self.fRec120[1] + self.fRec120[3])))));
			let mut iRec122: i32 = 0;
			let mut fTemp199: f32 = (self.fConst6 * fTemp172);
			let mut fTemp200: f32 = (fTemp199 + -1.49999499);
			let mut iTemp201: i32 = (fTemp200 as i32);
			let mut iTemp202: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp201) as f32)) as i32);
			let mut fTemp203: f32 = f32::floor(fTemp200);
			let mut fTemp204: f32 = (fTemp199 + (-1.0 - fTemp203));
			let mut fTemp205: f32 = (0.0 - fTemp204);
			let mut fTemp206: f32 = (fTemp199 + (-2.0 - fTemp203));
			let mut fTemp207: f32 = (0.0 - (0.5 * fTemp206));
			let mut fTemp208: f32 = (fTemp199 + (-3.0 - fTemp203));
			let mut fTemp209: f32 = (0.0 - (0.333333343 * fTemp208));
			let mut fTemp210: f32 = (fTemp199 + (-4.0 - fTemp203));
			let mut fTemp211: f32 = (0.0 - (0.25 * fTemp210));
			let mut fTemp212: f32 = (fTemp199 - fTemp203);
			let mut iTemp213: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp201 + 2)) as f32)) as i32);
			let mut fTemp214: f32 = (0.0 - fTemp208);
			let mut fTemp215: f32 = (0.0 - (0.5 * fTemp210));
			let mut iTemp216: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp201 + 1)) as f32)) as i32);
			let mut fTemp217: f32 = (0.0 - fTemp206);
			let mut fTemp218: f32 = (0.0 - (0.5 * fTemp208));
			let mut fTemp219: f32 = (0.0 - (0.333333343 * fTemp210));
			let mut fTemp220: f32 = (fTemp204 * fTemp206);
			let mut iTemp221: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp201 + 3)) as f32)) as i32);
			let mut fTemp222: f32 = (0.0 - fTemp210);
			let mut fTemp223: f32 = (fTemp220 * fTemp208);
			let mut iTemp224: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp201 + 4)) as f32)) as i32);
			self.fVec6[0] = (((((self.fRec121[((self.IOTA - (iTemp202 + 2)) & 2047) as usize] * fTemp205) * fTemp207) * fTemp209) * fTemp211) + (fTemp212 * ((((0.5 * (((fTemp204 * self.fRec121[((self.IOTA - (iTemp213 + 2)) & 2047) as usize]) * fTemp214) * fTemp215)) + (((self.fRec121[((self.IOTA - (iTemp216 + 2)) & 2047) as usize] * fTemp217) * fTemp218) * fTemp219)) + (0.166666672 * ((fTemp220 * self.fRec121[((self.IOTA - (iTemp221 + 2)) & 2047) as usize]) * fTemp222))) + (0.0416666679 * (fTemp223 * self.fRec121[((self.IOTA - (iTemp224 + 2)) & 2047) as usize])))));
			let mut fTemp225: f32 = (((iSlow9 as f32) * self.fRec27[0]) - (self.fRec115[1] + self.fVec6[1]));
			let mut fTemp226: f32 = (fTemp225 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs((fTemp225 * fTemp54)) + 0.75)))));
			let mut fRec116: f32 = (self.fRec115[1] + fTemp226);
			let mut fTemp227: f32 = (self.fVec6[1] + fTemp226);
			self.fVec7[(self.IOTA & 2047) as usize] = fTemp227;
			let mut fRec117: f32 = (((((fTemp179 * fTemp181) * fTemp183) * fTemp185) * self.fVec7[((self.IOTA - iTemp176) & 2047) as usize]) + (fTemp186 * ((0.0416666679 * (fTemp197 * self.fVec7[((self.IOTA - iTemp198) & 2047) as usize])) + (((0.5 * (((fTemp178 * fTemp188) * fTemp189) * self.fVec7[((self.IOTA - iTemp187) & 2047) as usize])) + (((fTemp191 * self.fVec7[((self.IOTA - iTemp190) & 2047) as usize]) * fTemp192) * fTemp193)) + (0.166666672 * ((fTemp194 * fTemp196) * self.fVec7[((self.IOTA - iTemp195) & 2047) as usize]))))));
			let mut iRec118: i32 = iRec122;
			self.fRec111[(self.IOTA & 2047) as usize] = fRec116;
			let mut fRec112: f32 = (((((fTemp205 * fTemp207) * fTemp209) * fTemp211) * self.fRec111[((self.IOTA - (iTemp202 + 1)) & 2047) as usize]) + (fTemp212 * (((0.166666672 * ((fTemp220 * fTemp222) * self.fRec111[((self.IOTA - (iTemp221 + 1)) & 2047) as usize])) + ((((fTemp217 * fTemp218) * fTemp219) * self.fRec111[((self.IOTA - (iTemp216 + 1)) & 2047) as usize]) + (0.5 * (((fTemp204 * fTemp214) * fTemp215) * self.fRec111[((self.IOTA - (iTemp213 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp223 * self.fRec111[((self.IOTA - (iTemp224 + 1)) & 2047) as usize])))));
			self.fRec113[0] = fRec117;
			let mut iRec114: i32 = iRec118;
			self.fRec109[0] = self.fRec113[1];
			let mut iRec110: i32 = iRec114;
			self.fRec107[0] = (self.fRec109[1] - (self.fConst3 * ((self.fConst8 * self.fRec107[1]) + (self.fConst7 * self.fRec107[2]))));
			let mut fTemp228: f32 = (self.fConst3 * ((self.fConst2 * self.fRec107[0]) + (self.fConst9 * self.fRec107[2])));
			let mut fRec105: f32 = fTemp228;
			let mut fRec106: f32 = ((iRec110 as f32) + fTemp228);
			self.iRec99[0] = iRec104;
			let mut fRec100: f32 = fRec108;
			let mut fRec101: f32 = fRec105;
			let mut fRec102: f32 = fRec106;
			self.fRec95[(self.IOTA & 2047) as usize] = fRec100;
			let mut fRec96: f32 = fRec112;
			let mut fRec97: f32 = fRec101;
			let mut fRec98: f32 = fRec102;
			self.fRec93[0] = fRec96;
			let mut fRec94: f32 = fRec98;
			let mut fTemp229: f32 = (fRec1 + (fRec34 + (fRec64 + fRec94)));
			outputs[0][i as usize] = (fTemp229 as f32);
			outputs[1][i as usize] = (fTemp229 as f32);
			self.iRec10[1] = self.iRec10[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[1] = self.fRec27[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec29[j0 as usize] = self.fRec29[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec0[1] = self.fVec0[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec20[1] = self.fRec20[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec16[j1 as usize] = self.fRec16[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.iRec6[1] = self.iRec6[0];
			self.fRec0[1] = self.fRec0[0];
			self.iRec43[1] = self.iRec43[0];
			self.fRec59[1] = self.fRec59[0];
			self.fRec55[1] = self.fRec55[0];
			let mut j2: i32 = 3;
			loop {
				self.fRec60[j2 as usize] = self.fRec60[(j2 - 1) as usize];
				j2 = (j2 - 1);
				if (j2 > 0) { continue; } else { break; }
			}
			self.fVec2[1] = self.fVec2[0];
			self.fRec53[1] = self.fRec53[0];
			let mut j3: i32 = 3;
			loop {
				self.fRec49[j3 as usize] = self.fRec49[(j3 - 1) as usize];
				j3 = (j3 - 1);
				if (j3 > 0) { continue; } else { break; }
			}
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.iRec39[1] = self.iRec39[0];
			self.fRec33[1] = self.fRec33[0];
			self.iRec73[1] = self.iRec73[0];
			self.fRec89[1] = self.fRec89[0];
			self.fRec85[1] = self.fRec85[0];
			let mut j4: i32 = 3;
			loop {
				self.fRec90[j4 as usize] = self.fRec90[(j4 - 1) as usize];
				j4 = (j4 - 1);
				if (j4 > 0) { continue; } else { break; }
			}
			self.fVec4[1] = self.fVec4[0];
			self.fRec83[1] = self.fRec83[0];
			let mut j5: i32 = 3;
			loop {
				self.fRec79[j5 as usize] = self.fRec79[(j5 - 1) as usize];
				j5 = (j5 - 1);
				if (j5 > 0) { continue; } else { break; }
			}
			self.fRec77[2] = self.fRec77[1];
			self.fRec77[1] = self.fRec77[0];
			self.iRec69[1] = self.iRec69[0];
			self.fRec63[1] = self.fRec63[0];
			self.iRec103[1] = self.iRec103[0];
			self.fRec119[1] = self.fRec119[0];
			self.fRec115[1] = self.fRec115[0];
			let mut j6: i32 = 3;
			loop {
				self.fRec120[j6 as usize] = self.fRec120[(j6 - 1) as usize];
				j6 = (j6 - 1);
				if (j6 > 0) { continue; } else { break; }
			}
			self.fVec6[1] = self.fVec6[0];
			self.fRec113[1] = self.fRec113[0];
			let mut j7: i32 = 3;
			loop {
				self.fRec109[j7 as usize] = self.fRec109[(j7 - 1) as usize];
				j7 = (j7 - 1);
				if (j7 > 0) { continue; } else { break; }
			}
			self.fRec107[2] = self.fRec107[1];
			self.fRec107[1] = self.fRec107[0];
			self.iRec99[1] = self.iRec99[0];
			self.fRec93[1] = self.fRec93[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

