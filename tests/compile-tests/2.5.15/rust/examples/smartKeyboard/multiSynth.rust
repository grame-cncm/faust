
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	iVec0: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider0: f32,
	fRec2: [f32;2],
	fHslider1: f32,
	fConst2: f32,
	fConst3: f32,
	fHslider2: f32,
	fHslider3: f32,
	fButton0: f32,
	fHslider4: f32,
	fVec1: [f32;2],
	fRec4: [f32;2],
	fVec2: [f32;2],
	fRec3: [f32;2],
	fVec3: [f32;2],
	IOTA: i32,
	fVec4: [f32;4096],
	fConst4: f32,
	fConst5: f32,
	fRec5: [f32;2],
	fConst6: f32,
	fRec6: [f32;2],
	fRec7: [f32;2],
	fConst7: f32,
	fRec8: [f32;2],
	fVec5: [f32;2],
	fRec1: [f32;2],
	fRec0: [f32;3],
	fHslider5: f32,
	fRec10: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iVec0: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider0: 0.0,
			fRec2: [0.0;2],
			fHslider1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fButton0: 0.0,
			fHslider4: 0.0,
			fVec1: [0.0;2],
			fRec4: [0.0;2],
			fVec2: [0.0;2],
			fRec3: [0.0;2],
			fVec3: [0.0;2],
			IOTA: 0,
			fVec4: [0.0;4096],
			fConst4: 0.0,
			fConst5: 0.0,
			fRec5: [0.0;2],
			fConst6: 0.0,
			fRec6: [0.0;2],
			fRec7: [0.0;2],
			fConst7: 0.0,
			fRec8: [0.0;2],
			fVec5: [0.0;2],
			fRec1: [0.0;2],
			fRec0: [0.0;3],
			fHslider5: 0.0,
			fRec10: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'4',  'Rounding Mode':'2',  'Inter-Keyboard Slide':'0',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'60',  'Keyboard 1 - Lowest Key':'60',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'60',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "multiSynth");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 1.0;
		self.fHslider1 = 0.0;
		self.fHslider2 = 300.0;
		self.fHslider3 = 1.0;
		self.fButton0 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 1.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec4[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec3[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fVec3[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l7: i32 = 0;
		loop {
			self.fVec4[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 4096) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec5[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec6[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec7[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec8[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec5[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec1[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec0[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec10[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (3.14159274 / self.fConst0);
		self.fConst2 = (0.25 * self.fConst0);
		self.fConst3 = (1.0 / self.fConst0);
		self.fConst4 = (0.5 * self.fConst0);
		self.fConst5 = (4.0 / self.fConst0);
		self.fConst6 = (6.28318548 / self.fConst0);
		self.fConst7 = (1.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("multiSynth");
		ui_interface.declare(&mut self.fHslider3, "midi", "pitchwheel");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider3, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider2, 300.0, 50.0, 2000.0, 0.01);
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider5, 1.0, 0.0, 1.0, 0.01);
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.addHorizontalSlider("keyboard", &mut self.fHslider1, 0.0, 0.0, 3.0, 1.0);
		ui_interface.declare(&mut self.fHslider4, "midi", "ctrl 64");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "midi", "ctrl 1");
		ui_interface.addHorizontalSlider("y", &mut self.fHslider0, 1.0, 0.0, 1.0, 0.001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * (self.fHslider0 as f32));
		let mut iSlow1: i32 = ((self.fHslider1 as f32) as i32);
		let mut iSlow2: i32 = ((iSlow1 == 2) as i32);
		let mut fSlow3: f32 = (self.fHslider2 as f32);
		let mut fSlow4: f32 = (self.fHslider3 as f32);
		let mut fSlow5: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider4 as f32)));
		let mut iSlow6: i32 = ((fSlow5 == 0.0) as i32);
		let mut iSlow7: i32 = ((iSlow1 == 1) as i32);
		let mut fSlow8: f32 = (self.fConst5 * fSlow3);
		let mut iSlow9: i32 = ((iSlow1 == 3) as i32);
		let mut fSlow10: f32 = (self.fConst6 * fSlow3);
		let mut iSlow11: i32 = ((iSlow1 == 0) as i32);
		let mut fSlow12: f32 = (0.00100000005 * (fSlow5 * (self.fHslider5 as f32)));
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec2[0] = (fSlow0 + (0.999000013 * self.fRec2[1]));
			let mut fTemp0: f32 = f32::tan((self.fConst1 * ((4000.0 * self.fRec2[0]) + 50.0)));
			let mut fTemp1: f32 = (1.0 / fTemp0);
			let mut fTemp2: f32 = (fTemp1 + 1.0);
			self.fVec1[0] = fSlow5;
			let mut iTemp3: i32 = (((fSlow5 == self.fVec1[1]) as i32) | iSlow6);
			self.fRec4[0] = ((fSlow4 * (1.0 - (0.999000013 * (iTemp3 as f32)))) + (0.999000013 * ((iTemp3 as f32) * self.fRec4[1])));
			let mut fTemp4: f32 = (fSlow3 * self.fRec4[0]);
			let mut fTemp5: f32 = f32::max(fTemp4, 23.4489498);
			let mut fTemp6: f32 = f32::max(20.0, f32::abs(fTemp5));
			self.fVec2[0] = fTemp6;
			let mut fTemp7: f32 = (self.fRec3[1] + (self.fConst3 * self.fVec2[1]));
			self.fRec3[0] = (fTemp7 - f32::floor(fTemp7));
			let mut fTemp8: f32 = mydsp_faustpower2_f(((2.0 * self.fRec3[0]) + -1.0));
			self.fVec3[0] = fTemp8;
			let mut fTemp9: f32 = (((self.iVec0[1] as f32) * (fTemp8 - self.fVec3[1])) / fTemp6);
			self.fVec4[(self.IOTA & 4095) as usize] = fTemp9;
			let mut fTemp10: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst4 / fTemp5)));
			let mut iTemp11: i32 = (fTemp10 as i32);
			let mut fTemp12: f32 = f32::floor(fTemp10);
			let mut fTemp13: f32 = (self.fConst2 * ((fTemp9 - (self.fVec4[((self.IOTA - iTemp11) & 4095) as usize] * (fTemp12 + (1.0 - fTemp10)))) - ((fTemp10 - fTemp12) * self.fVec4[((self.IOTA - (iTemp11 + 1)) & 4095) as usize])));
			self.fRec5[0] = ((0.999000013 * self.fRec5[1]) + fTemp13);
			let mut fTemp14: f32 = (fSlow10 * self.fRec4[0]);
			let mut fTemp15: f32 = f32::sin(fTemp14);
			let mut fTemp16: f32 = f32::cos(fTemp14);
			self.fRec6[0] = ((self.fRec7[1] * fTemp15) + (self.fRec6[1] * fTemp16));
			self.fRec7[0] = (((self.fRec7[1] * fTemp16) + (self.fRec6[1] * (0.0 - fTemp15))) + ((1 - self.iVec0[1]) as f32));
			let mut fTemp17: f32 = f32::max(1.00000001e-07, f32::abs(fTemp4));
			let mut fTemp18: f32 = (self.fRec8[1] + (self.fConst7 * fTemp17));
			let mut fTemp19: f32 = (fTemp18 + -1.0);
			let mut iTemp20: i32 = ((fTemp19 < 0.0) as i32);
			self.fRec8[0] = if (iTemp20 as i32 == 1) { fTemp18 } else { fTemp19 };
			let mut fRec9: f32 = if (iTemp20 as i32 == 1) { fTemp18 } else { (fTemp18 + (fTemp19 * (1.0 - (self.fConst0 / fTemp17)))) };
			let mut fTemp21: f32 = (if (iSlow2 as i32 == 1) { fTemp13 } else { 0.0 } + (if (iSlow7 as i32 == 1) { (fSlow8 * (self.fRec4[0] * self.fRec5[0])) } else { 0.0 } + (if (iSlow9 as i32 == 1) { self.fRec6[0] } else { 0.0 } + if (iSlow11 as i32 == 1) { ((2.0 * fRec9) + -1.0) } else { 0.0 })));
			self.fVec5[0] = fTemp21;
			self.fRec1[0] = (((0.0 - ((1.0 - fTemp1) / fTemp2)) * self.fRec1[1]) + ((fTemp21 + self.fVec5[1]) / fTemp2));
			let mut fTemp22: f32 = (((fTemp1 + 1.0) / fTemp0) + 1.0);
			self.fRec0[0] = (self.fRec1[0] - (((self.fRec0[2] * (((fTemp1 + -1.0) / fTemp0) + 1.0)) + (2.0 * (self.fRec0[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp0)))))) / fTemp22));
			self.fRec10[0] = (fSlow12 + (0.999000013 * self.fRec10[1]));
			let mut fTemp23: f32 = (((self.fRec0[2] + (self.fRec0[0] + (2.0 * self.fRec0[1]))) * self.fRec10[0]) / fTemp22);
			outputs[0][i as usize] = (fTemp23 as f32);
			outputs[1][i as usize] = (fTemp23 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec2[1] = self.fRec2[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec4[1] = self.fRec4[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fVec3[1] = self.fVec3[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fVec5[1] = self.fVec5[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec10[1] = self.fRec10[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

