
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fButton0: f32,
	fHslider0: f32,
	fVec0: [f32;2],
	fRec13: [f32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider1: f32,
	fHslider2: f32,
	fRec30: [f32;2],
	fRec26: [f32;2],
	fRec31: [f32;2],
	fRec33: [f32;4],
	IOTA: i32,
	fRec34: [f32;2048],
	fConst3: f32,
	fVec1: [f32;2],
	fHslider3: f32,
	iRec37: [i32;2],
	fConst4: f32,
	fRec36: [f32;3],
	fConst5: f32,
	fVec2: [f32;2],
	fRec38: [f32;2],
	fConst6: f32,
	fConst7: f32,
	fVec3: [f32;3],
	fRec32: [f32;512],
	fRec22: [f32;2],
	fRec18: [f32;2],
	fRec14: [f32;2048],
	fRec16: [f32;2],
	fRec11: [f32;4],
	fRec6: [f32;2],
	fRec2: [f32;512],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fButton0: 0.0,
			fHslider0: 0.0,
			fVec0: [0.0;2],
			fRec13: [0.0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fRec30: [0.0;2],
			fRec26: [0.0;2],
			fRec31: [0.0;2],
			fRec33: [0.0;4],
			IOTA: 0,
			fRec34: [0.0;2048],
			fConst3: 0.0,
			fVec1: [0.0;2],
			fHslider3: 0.0,
			iRec37: [0;2],
			fConst4: 0.0,
			fRec36: [0.0;3],
			fConst5: 0.0,
			fVec2: [0.0;2],
			fRec38: [0.0;2],
			fConst6: 0.0,
			fConst7: 0.0,
			fVec3: [0.0;3],
			fRec32: [0.0;512],
			fRec22: [0.0;2],
			fRec18: [0.0;2],
			fRec14: [0.0;2048],
			fRec16: [0.0;2],
			fRec11: [0.0;4],
			fRec6: [0.0;2],
			fRec2: [0.0;512],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'6',  'Max Keyboard Polyphony':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 5 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'72',  'Keyboard 1 - Lowest Key':'67',  'Keyboard 2 - Lowest Key':'62',  'Keyboard 3 - Lowest Key':'57',  'Keyboard 4 - Lowest Key':'52',  'Keyboard 5 - Lowest Key':'47',  'Rounding Mode':'2' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "elecGuitar");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fButton0 = 0.0;
		self.fHslider0 = 0.0;
		self.fHslider1 = 300.0;
		self.fHslider2 = 1.0;
		self.fHslider3 = 1.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec13[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec30[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec26[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec31[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec33[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec34[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec1[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.iRec37[l8 as usize] = 0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec36[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fVec2[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec38[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec3[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec32[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 512) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec22[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec18[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec14[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2048) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec16[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec11[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 4) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec6[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec2[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 512) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec0[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00882352982 * self.fConst0);
		self.fConst2 = (0.000294117635 * self.fConst0);
		self.fConst3 = (0.00117647054 * self.fConst0);
		self.fConst4 = (15.707963 / self.fConst0);
		self.fConst5 = (0.00400000019 * self.fConst0);
		self.fConst6 = (0.00200000009 * self.fConst0);
		self.fConst7 = (500.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("elecGuitar");
		ui_interface.declare(&mut self.fHslider2, "midi", "pitchwheel");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider2, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider1, 300.0, 50.0, 2000.0, 0.01);
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider3, 1.0, 0.0, 1.0, 0.01);
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.declare(&mut self.fHslider0, "midi", "ctrl 64");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider0, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider0 as f32)));
		let mut iSlow1: i32 = ((fSlow0 == 0.0) as i32);
		let mut fSlow2: f32 = (self.fHslider1 as f32);
		let mut fSlow3: f32 = (self.fHslider2 as f32);
		let mut fSlow4: f32 = (self.fHslider3 as f32);
		let mut i: i32 = 0;
		loop {
			let mut fRec10: f32 = (0.0 - (0.997305274 * ((0.899999976 * self.fRec11[2]) + (0.0500000007 * (self.fRec11[1] + self.fRec11[3])))));
			self.fVec0[0] = fSlow0;
			let mut iTemp0: i32 = (((fSlow0 == self.fVec0[1]) as i32) | iSlow1);
			let mut fTemp1: f32 = (1.0 - (0.999000013 * (iTemp0 as f32)));
			self.fRec13[0] = ((fSlow0 * fTemp1) + (0.999000013 * ((iTemp0 as f32) * self.fRec13[1])));
			self.fRec30[0] = ((fSlow3 * fTemp1) + (0.999000013 * ((iTemp0 as f32) * self.fRec30[1])));
			let mut fTemp2: f32 = f32::max(60.0, (fSlow2 * self.fRec30[0]));
			let mut fTemp3: f32 = ((340.0 / fTemp2) + -0.109999999);
			let mut fTemp4: f32 = (self.fConst2 * fTemp3);
			let mut fTemp5: f32 = (fTemp4 + -1.49999499);
			let mut iTemp6: i32 = (fTemp5 as i32);
			let mut iTemp7: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp6 as i32)) as f32)) as i32);
			let mut fTemp8: f32 = f32::floor(fTemp5);
			let mut fTemp9: f32 = (fTemp4 + (-1.0 - fTemp8));
			let mut fTemp10: f32 = (0.0 - fTemp9);
			let mut fTemp11: f32 = (fTemp4 + (-2.0 - fTemp8));
			let mut fTemp12: f32 = (0.0 - (0.5 * fTemp11));
			let mut fTemp13: f32 = (fTemp4 + (-3.0 - fTemp8));
			let mut fTemp14: f32 = (0.0 - (0.333333343 * fTemp13));
			let mut fTemp15: f32 = (fTemp4 + (-4.0 - fTemp8));
			let mut fTemp16: f32 = (0.0 - (0.25 * fTemp15));
			let mut fTemp17: f32 = (fTemp4 - fTemp8);
			let mut iTemp18: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp6 + 2) as i32)) as f32)) as i32);
			let mut fTemp19: f32 = (0.0 - fTemp13);
			let mut fTemp20: f32 = (0.0 - (0.5 * fTemp15));
			let mut iTemp21: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp6 + 1) as i32)) as f32)) as i32);
			let mut fTemp22: f32 = (0.0 - fTemp11);
			let mut fTemp23: f32 = (0.0 - (0.5 * fTemp13));
			let mut fTemp24: f32 = (0.0 - (0.333333343 * fTemp15));
			let mut fTemp25: f32 = (fTemp9 * fTemp11);
			let mut iTemp26: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp6 + 3) as i32)) as f32)) as i32);
			let mut fTemp27: f32 = (0.0 - fTemp15);
			let mut fTemp28: f32 = (fTemp25 * fTemp13);
			let mut iTemp29: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp6 + 4) as i32)) as f32)) as i32);
			self.fRec26[0] = (((((self.fRec2[((self.IOTA - (iTemp7 + 1)) & 511) as usize] * fTemp10) * fTemp12) * fTemp14) * fTemp16) + (fTemp17 * ((((0.5 * (((fTemp9 * self.fRec2[((self.IOTA - (iTemp18 + 1)) & 511) as usize]) * fTemp19) * fTemp20)) + (((self.fRec2[((self.IOTA - (iTemp21 + 1)) & 511) as usize] * fTemp22) * fTemp23) * fTemp24)) + (0.166666672 * ((fTemp25 * self.fRec2[((self.IOTA - (iTemp26 + 1)) & 511) as usize]) * fTemp27))) + (0.0416666679 * (fTemp28 * self.fRec2[((self.IOTA - (iTemp29 + 1)) & 511) as usize])))));
			self.fRec31[0] = ((0.0500000007 * self.fRec31[1]) + (0.949999988 * self.fRec26[1]));
			let mut fRec27: f32 = self.fRec31[0];
			self.fRec33[0] = self.fRec0[1];
			self.fRec34[(self.IOTA & 2047) as usize] = (0.0 - (0.997305274 * ((0.899999976 * self.fRec33[2]) + (0.0500000007 * (self.fRec33[1] + self.fRec33[3])))));
			let mut iRec35: i32 = 0;
			let mut fTemp30: f32 = (self.fConst3 * fTemp3);
			let mut fTemp31: f32 = (fTemp30 + -1.49999499);
			let mut iTemp32: i32 = (fTemp31 as i32);
			let mut iTemp33: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp32 as i32)) as f32)) as i32);
			let mut fTemp34: f32 = f32::floor(fTemp31);
			let mut fTemp35: f32 = (fTemp30 + (-1.0 - fTemp34));
			let mut fTemp36: f32 = (0.0 - fTemp35);
			let mut fTemp37: f32 = (fTemp30 + (-2.0 - fTemp34));
			let mut fTemp38: f32 = (0.0 - (0.5 * fTemp37));
			let mut fTemp39: f32 = (fTemp30 + (-3.0 - fTemp34));
			let mut fTemp40: f32 = (0.0 - (0.333333343 * fTemp39));
			let mut fTemp41: f32 = (fTemp30 + (-4.0 - fTemp34));
			let mut fTemp42: f32 = (0.0 - (0.25 * fTemp41));
			let mut fTemp43: f32 = (fTemp30 - fTemp34);
			let mut iTemp44: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp32 + 2) as i32)) as f32)) as i32);
			let mut fTemp45: f32 = (0.0 - fTemp39);
			let mut fTemp46: f32 = (0.0 - (0.5 * fTemp41));
			let mut iTemp47: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp32 + 1) as i32)) as f32)) as i32);
			let mut fTemp48: f32 = (0.0 - fTemp37);
			let mut fTemp49: f32 = (0.0 - (0.5 * fTemp39));
			let mut fTemp50: f32 = (0.0 - (0.333333343 * fTemp41));
			let mut fTemp51: f32 = (fTemp35 * fTemp37);
			let mut iTemp52: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp32 + 3) as i32)) as f32)) as i32);
			let mut fTemp53: f32 = (0.0 - fTemp41);
			let mut fTemp54: f32 = (fTemp51 * fTemp39);
			let mut iTemp55: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp32 + 4) as i32)) as f32)) as i32);
			self.fVec1[0] = (((((self.fRec34[((self.IOTA - (iTemp33 + 2)) & 2047) as usize] * fTemp36) * fTemp38) * fTemp40) * fTemp42) + (fTemp43 * ((((0.5 * (((fTemp35 * self.fRec34[((self.IOTA - (iTemp44 + 2)) & 2047) as usize]) * fTemp45) * fTemp46)) + (((self.fRec34[((self.IOTA - (iTemp47 + 2)) & 2047) as usize] * fTemp48) * fTemp49) * fTemp50)) + (0.166666672 * ((fTemp51 * self.fRec34[((self.IOTA - (iTemp52 + 2)) & 2047) as usize]) * fTemp53))) + (0.0416666679 * (fTemp54 * self.fRec34[((self.IOTA - (iTemp55 + 2)) & 2047) as usize])))));
			self.iRec37[0] = ((1103515245 * self.iRec37[1]) + 12345);
			let mut fTemp56: f32 = f32::tan((self.fConst4 * fTemp2));
			let mut fTemp57: f32 = (1.0 / fTemp56);
			let mut fTemp58: f32 = (((fTemp57 + 1.41421354) / fTemp56) + 1.0);
			self.fRec36[0] = ((4.65661287e-10 * (self.iRec37[0] as f32)) - (((self.fRec36[2] * (((fTemp57 + -1.41421354) / fTemp56) + 1.0)) + (2.0 * (self.fRec36[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp56)))))) / fTemp58));
			let mut fTemp59: f32 = mydsp_faustpower2_f((1.0 - (0.000500000024 * fTemp2)));
			self.fVec2[0] = fTemp59;
			let mut fTemp60: f32 = (self.fConst5 * fTemp59);
			self.fRec38[0] = if ((((((fSlow0 - self.fVec0[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(fTemp60, ((self.fRec38[1] + (self.fConst5 * (fTemp59 - self.fVec2[1]))) + 1.0)) };
			let mut fTemp61: f32 = (self.fConst6 * fTemp59);
			let mut iTemp62: i32 = ((self.fRec38[0] < fTemp61) as i32);
			let mut fTemp63: f32 = (fSlow4 * (((self.fRec36[2] + (self.fRec36[0] + (2.0 * self.fRec36[1]))) * if (iTemp62 as i32 == 1) { if (((self.fRec38[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp62 as i32 == 1) { (self.fConst7 * (self.fRec38[0] / fTemp59)) } else { 1.0 } } } else { if (((self.fRec38[0] < fTemp60) as i32) as i32 == 1) { ((self.fConst7 * ((0.0 - (self.fRec38[0] - fTemp61)) / fTemp59)) + 1.0) } else { 0.0 } }) / fTemp58));
			let mut fTemp64: f32 = (self.fVec1[1] + fTemp63);
			self.fVec3[0] = fTemp64;
			self.fRec32[(self.IOTA & 511) as usize] = ((0.0500000007 * self.fRec32[((self.IOTA - 1) & 511) as usize]) + (0.949999988 * self.fVec3[2]));
			let mut fRec28: f32 = (((((fTemp10 * fTemp12) * fTemp14) * fTemp16) * self.fRec32[((self.IOTA - iTemp7) & 511) as usize]) + (fTemp17 * ((0.0416666679 * (fTemp28 * self.fRec32[((self.IOTA - iTemp29) & 511) as usize])) + (((((fTemp22 * fTemp23) * fTemp24) * self.fRec32[((self.IOTA - iTemp21) & 511) as usize]) + (0.5 * (((fTemp9 * fTemp19) * fTemp20) * self.fRec32[((self.IOTA - iTemp18) & 511) as usize]))) + (0.166666672 * ((fTemp25 * fTemp27) * self.fRec32[((self.IOTA - iTemp26) & 511) as usize]))))));
			let mut fRec29: f32 = (self.fRec22[1] + ((iRec35 as f32) + self.fVec3[1]));
			self.fRec22[0] = fRec27;
			let mut fRec23: f32 = self.fRec22[1];
			let mut fRec24: f32 = fRec28;
			let mut fRec25: f32 = fRec29;
			self.fRec18[0] = fRec23;
			let mut fRec19: f32 = (fTemp63 + self.fRec18[1]);
			let mut fRec20: f32 = fRec24;
			let mut fRec21: f32 = fRec25;
			self.fRec14[(self.IOTA & 2047) as usize] = fRec19;
			let mut fRec15: f32 = (((((fTemp36 * fTemp38) * fTemp40) * fTemp42) * self.fRec14[((self.IOTA - (iTemp33 + 1)) & 2047) as usize]) + (fTemp43 * (((0.166666672 * ((fTemp51 * fTemp53) * self.fRec14[((self.IOTA - (iTemp52 + 1)) & 2047) as usize])) + ((((fTemp48 * fTemp49) * fTemp50) * self.fRec14[((self.IOTA - (iTemp47 + 1)) & 2047) as usize]) + (0.5 * (((fTemp35 * fTemp45) * fTemp46) * self.fRec14[((self.IOTA - (iTemp44 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp54 * self.fRec14[((self.IOTA - (iTemp55 + 1)) & 2047) as usize])))));
			self.fRec16[0] = fRec20;
			let mut fRec17: f32 = fRec21;
			self.fRec11[0] = (self.fRec13[0] * self.fRec16[1]);
			let mut fRec12: f32 = fRec17;
			self.fRec6[0] = fRec10;
			let mut fRec7: f32 = (self.fRec13[0] * self.fRec6[1]);
			let mut fRec8: f32 = self.fRec11[0];
			let mut fRec9: f32 = fRec12;
			self.fRec2[(self.IOTA & 511) as usize] = fRec7;
			let mut fRec3: f32 = fRec15;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			outputs[0][i as usize] = (fRec1 as f32);
			outputs[1][i as usize] = (fRec1 as f32);
			self.fVec0[1] = self.fVec0[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec31[1] = self.fRec31[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec33[j0 as usize] = self.fRec33[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec1[1] = self.fVec1[0];
			self.iRec37[1] = self.iRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec38[1] = self.fRec38[0];
			self.fVec3[2] = self.fVec3[1];
			self.fVec3[1] = self.fVec3[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec16[1] = self.fRec16[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec11[j1 as usize] = self.fRec11[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.fRec6[1] = self.fRec6[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

