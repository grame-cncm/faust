


pub struct mydsp {
	
	fDummy: f32,
	iVec0: [i32;2],
	fHslider0: f32,
	fRec2: [f32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fRec1: [f32;2],
	fRec0: [f32;2],
	fConst3: f32,
	fHslider1: f32,
	fHslider2: f32,
	fHslider3: f32,
	fRec6: [f32;2],
	fRec5: [f32;2],
	fHslider4: f32,
	fRec9: [f32;2],
	fRec7: [f32;2],
	fRec8: [f32;2],
	fRec12: [f32;2],
	fRec11: [f32;2],
	fRec10: [f32;2],
	fRec3: [f32;2],
	fRec4: [f32;2],
	fRec16: [f32;2],
	fRec15: [f32;2],
	fRec17: [f32;2],
	fRec18: [f32;2],
	fRec13: [f32;2],
	fRec14: [f32;2],
	fRec22: [f32;2],
	fRec21: [f32;2],
	fRec23: [f32;2],
	fRec24: [f32;2],
	fRec19: [f32;2],
	fRec20: [f32;2],
	fRec28: [f32;2],
	fRec27: [f32;2],
	fRec29: [f32;2],
	fRec30: [f32;2],
	fRec25: [f32;2],
	fRec26: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			iVec0: [0;2],
			fHslider0: 0.0,
			fRec2: [0.0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fRec1: [0.0;2],
			fRec0: [0.0;2],
			fConst3: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fRec6: [0.0;2],
			fRec5: [0.0;2],
			fHslider4: 0.0,
			fRec9: [0.0;2],
			fRec7: [0.0;2],
			fRec8: [0.0;2],
			fRec12: [0.0;2],
			fRec11: [0.0;2],
			fRec10: [0.0;2],
			fRec3: [0.0;2],
			fRec4: [0.0;2],
			fRec16: [0.0;2],
			fRec15: [0.0;2],
			fRec17: [0.0;2],
			fRec18: [0.0;2],
			fRec13: [0.0;2],
			fRec14: [0.0;2],
			fRec22: [0.0;2],
			fRec21: [0.0;2],
			fRec23: [0.0;2],
			fRec24: [0.0;2],
			fRec19: [0.0;2],
			fRec20: [0.0;2],
			fRec28: [0.0;2],
			fRec27: [0.0;2],
			fRec29: [0.0;2],
			fRec30: [0.0;2],
			fRec25: [0.0;2],
			fRec26: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 0 - Send Y':'0',  'Keyboard 1 - Send Y':'0',  'Keyboard 2 - Send Y':'0',  'Keyboard 3 - Send Y':'0',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 4 - Key 0 - Label':'Bow' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "bowed");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("synths.lib/name", "Faust Synthesizer Library");
		m.declare("synths.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.0;
		self.fHslider2 = 400.0;
		self.fHslider3 = 1.0;
		self.fHslider4 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec6[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec5[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec9[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec7[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec12[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec11[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec10[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec3[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec4[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec16[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec15[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec17[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec18[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec13[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec14[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec22[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec21[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec23[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec24[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec19[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec20[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec28[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec27[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec29[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec30[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec25[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec26[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::exp((0.0 - (10.0 / self.fConst0)));
		self.fConst2 = f32::exp((0.0 - (1.0 / self.fConst0)));
		self.fConst3 = (6.28318548 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("bowed");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider3, 1.0, 0.0, 10.0, 0.01);
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider2, 400.0, 50.0, 2000.0, 0.01);
		ui_interface.addHorizontalSlider("keyboard", &mut self.fHslider1, 0.0, 0.0, 5.0, 1.0);
		ui_interface.addHorizontalSlider("x", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.addHorizontalSlider("y", &mut self.fHslider4, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * (self.fHslider0 as f32));
		let mut iSlow1: i32 = ((self.fHslider1 as f32) as i32);
		let mut iSlow2: i32 = ((iSlow1 == 3) as i32);
		let mut fSlow3: f32 = ((self.fHslider2 as f32) * (self.fHslider3 as f32));
		let mut fSlow4: f32 = (0.00100000005 * (self.fHslider4 as f32));
		let mut iSlow5: i32 = ((iSlow1 == 2) as i32);
		let mut iSlow6: i32 = ((iSlow1 == 0) as i32);
		let mut iSlow7: i32 = ((iSlow1 == 1) as i32);
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec2[0] = (fSlow0 + (0.999000013 * self.fRec2[1]));
			let mut fTemp0: f32 = f32::abs(f32::abs((self.fRec2[0] - self.fRec2[1])));
			let mut fTemp1: f32 = if (((self.fRec0[1] > fTemp0) as i32) as i32 == 1) { self.fConst2 } else { self.fConst1 };
			self.fRec1[0] = ((self.fRec1[1] * fTemp1) + (fTemp0 * (1.0 - fTemp1)));
			self.fRec0[0] = self.fRec1[0];
			self.fRec6[0] = if (iSlow2 as i32 == 1) { fSlow3 } else { self.fRec6[1] };
			self.fRec5[0] = ((0.999000013 * self.fRec5[1]) + (0.00100000005 * self.fRec6[0]));
			self.fRec9[0] = (fSlow4 + (0.999000013 * self.fRec9[1]));
			let mut fTemp2: f32 = ((0.300000012 * self.fRec9[0]) + 1.0);
			let mut fTemp3: f32 = (self.fConst3 * (self.fRec5[0] * fTemp2));
			let mut fTemp4: f32 = f32::sin(fTemp3);
			let mut fTemp5: f32 = f32::cos(fTemp3);
			self.fRec7[0] = ((self.fRec8[1] * fTemp4) + (self.fRec7[1] * fTemp5));
			let mut iTemp6: i32 = (1 - self.iVec0[1]);
			self.fRec8[0] = (((self.fRec8[1] * fTemp5) + (self.fRec7[1] * (0.0 - fTemp4))) + (iTemp6 as f32));
			self.fRec12[0] = (fSlow0 + (0.999000013 * self.fRec12[1]));
			let mut fTemp7: f32 = f32::abs(f32::abs((self.fRec12[0] - self.fRec12[1])));
			let mut fTemp8: f32 = if (((self.fRec10[1] > fTemp7) as i32) as i32 == 1) { self.fConst2 } else { self.fConst1 };
			self.fRec11[0] = ((self.fRec11[1] * fTemp8) + (fTemp7 * (1.0 - fTemp8)));
			self.fRec10[0] = self.fRec11[0];
			let mut fTemp9: f32 = f32::min(1.0, (8000.0 * self.fRec10[0]));
			let mut fTemp10: f32 = (self.fConst3 * (self.fRec5[0] + (1000.0 * (self.fRec7[0] * fTemp9))));
			let mut fTemp11: f32 = f32::sin(fTemp10);
			let mut fTemp12: f32 = f32::cos(fTemp10);
			self.fRec3[0] = ((self.fRec4[1] * fTemp11) + (self.fRec3[1] * fTemp12));
			self.fRec4[0] = (((self.fRec4[1] * fTemp12) + (self.fRec3[1] * (0.0 - fTemp11))) + (iTemp6 as f32));
			self.fRec16[0] = if (iSlow5 as i32 == 1) { fSlow3 } else { self.fRec16[1] };
			self.fRec15[0] = ((0.999000013 * self.fRec15[1]) + (0.00100000005 * self.fRec16[0]));
			let mut fTemp13: f32 = (self.fConst3 * (self.fRec15[0] * fTemp2));
			let mut fTemp14: f32 = f32::sin(fTemp13);
			let mut fTemp15: f32 = f32::cos(fTemp13);
			self.fRec17[0] = ((self.fRec18[1] * fTemp14) + (self.fRec17[1] * fTemp15));
			self.fRec18[0] = (((self.fRec18[1] * fTemp15) + (self.fRec17[1] * (0.0 - fTemp14))) + (iTemp6 as f32));
			let mut fTemp16: f32 = (self.fConst3 * (self.fRec15[0] + (1000.0 * (self.fRec17[0] * fTemp9))));
			let mut fTemp17: f32 = f32::sin(fTemp16);
			let mut fTemp18: f32 = f32::cos(fTemp16);
			self.fRec13[0] = ((self.fRec14[1] * fTemp17) + (self.fRec13[1] * fTemp18));
			self.fRec14[0] = (((self.fRec14[1] * fTemp18) + (self.fRec13[1] * (0.0 - fTemp17))) + (iTemp6 as f32));
			self.fRec22[0] = if (iSlow6 as i32 == 1) { fSlow3 } else { self.fRec22[1] };
			self.fRec21[0] = ((0.999000013 * self.fRec21[1]) + (0.00100000005 * self.fRec22[0]));
			let mut fTemp19: f32 = (self.fConst3 * (self.fRec21[0] * fTemp2));
			let mut fTemp20: f32 = f32::sin(fTemp19);
			let mut fTemp21: f32 = f32::cos(fTemp19);
			self.fRec23[0] = ((self.fRec24[1] * fTemp20) + (self.fRec23[1] * fTemp21));
			self.fRec24[0] = (((self.fRec24[1] * fTemp21) + (self.fRec23[1] * (0.0 - fTemp20))) + (iTemp6 as f32));
			let mut fTemp22: f32 = (self.fConst3 * (self.fRec21[0] + (1000.0 * (self.fRec23[0] * fTemp9))));
			let mut fTemp23: f32 = f32::sin(fTemp22);
			let mut fTemp24: f32 = f32::cos(fTemp22);
			self.fRec19[0] = ((self.fRec20[1] * fTemp23) + (self.fRec19[1] * fTemp24));
			self.fRec20[0] = (((self.fRec20[1] * fTemp24) + (self.fRec19[1] * (0.0 - fTemp23))) + (iTemp6 as f32));
			self.fRec28[0] = if (iSlow7 as i32 == 1) { fSlow3 } else { self.fRec28[1] };
			self.fRec27[0] = ((0.999000013 * self.fRec27[1]) + (0.00100000005 * self.fRec28[0]));
			let mut fTemp25: f32 = (self.fConst3 * (self.fRec27[0] * fTemp2));
			let mut fTemp26: f32 = f32::sin(fTemp25);
			let mut fTemp27: f32 = f32::cos(fTemp25);
			self.fRec29[0] = ((self.fRec30[1] * fTemp26) + (self.fRec29[1] * fTemp27));
			self.fRec30[0] = (((self.fRec30[1] * fTemp27) + (self.fRec29[1] * (0.0 - fTemp26))) + (iTemp6 as f32));
			let mut fTemp28: f32 = (self.fConst3 * (self.fRec27[0] + (1000.0 * (self.fRec29[0] * fTemp9))));
			let mut fTemp29: f32 = f32::sin(fTemp28);
			let mut fTemp30: f32 = f32::cos(fTemp28);
			self.fRec25[0] = ((self.fRec26[1] * fTemp29) + (self.fRec25[1] * fTemp30));
			self.fRec26[0] = (((self.fRec26[1] * fTemp30) + (self.fRec25[1] * (0.0 - fTemp29))) + (iTemp6 as f32));
			let mut fTemp31: f32 = (f32::min(1.0, (8000.0 * self.fRec0[0])) * (self.fRec3[0] + (self.fRec13[0] + (self.fRec19[0] + self.fRec25[0]))));
			outputs[0][i as usize] = (fTemp31 as f32);
			outputs[1][i as usize] = (fTemp31 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec26[1] = self.fRec26[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

