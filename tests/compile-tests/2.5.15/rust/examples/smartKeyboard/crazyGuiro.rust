
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fRec9: [f32;2],
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fVec0: [f32;2],
	fConst1: f32,
	fHslider2: f32,
	fHslider3: f32,
	iRec11: [i32;2],
	fButton0: f32,
	fVec1: [f32;2],
	fConst2: f32,
	fRec12: [f32;2],
	fConst3: f32,
	fConst4: f32,
	fRec10: [f32;3],
	IOTA: i32,
	fVec2: [f32;8192],
	iConst5: i32,
	fRec8: [f32;2],
	fRec14: [f32;2],
	fVec3: [f32;8192],
	iConst6: i32,
	fRec13: [f32;2],
	fRec16: [f32;2],
	fVec4: [f32;8192],
	iConst7: i32,
	fRec15: [f32;2],
	fRec18: [f32;2],
	fVec5: [f32;8192],
	iConst8: i32,
	fRec17: [f32;2],
	fRec20: [f32;2],
	fVec6: [f32;8192],
	iConst9: i32,
	fRec19: [f32;2],
	fRec22: [f32;2],
	fVec7: [f32;8192],
	iConst10: i32,
	fRec21: [f32;2],
	fRec24: [f32;2],
	fVec8: [f32;8192],
	iConst11: i32,
	fRec23: [f32;2],
	fRec26: [f32;2],
	fVec9: [f32;8192],
	iConst12: i32,
	fRec25: [f32;2],
	fVec10: [f32;2048],
	iConst13: i32,
	fRec6: [f32;2],
	fVec11: [f32;2048],
	iConst14: i32,
	fRec4: [f32;2],
	fVec12: [f32;2048],
	iConst15: i32,
	fRec2: [f32;2],
	fVec13: [f32;1024],
	iConst16: i32,
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fRec9: [0.0;2],
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fVec0: [0.0;2],
			fConst1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			iRec11: [0;2],
			fButton0: 0.0,
			fVec1: [0.0;2],
			fConst2: 0.0,
			fRec12: [0.0;2],
			fConst3: 0.0,
			fConst4: 0.0,
			fRec10: [0.0;3],
			IOTA: 0,
			fVec2: [0.0;8192],
			iConst5: 0,
			fRec8: [0.0;2],
			fRec14: [0.0;2],
			fVec3: [0.0;8192],
			iConst6: 0,
			fRec13: [0.0;2],
			fRec16: [0.0;2],
			fVec4: [0.0;8192],
			iConst7: 0,
			fRec15: [0.0;2],
			fRec18: [0.0;2],
			fVec5: [0.0;8192],
			iConst8: 0,
			fRec17: [0.0;2],
			fRec20: [0.0;2],
			fVec6: [0.0;8192],
			iConst9: 0,
			fRec19: [0.0;2],
			fRec22: [0.0;2],
			fVec7: [0.0;8192],
			iConst10: 0,
			fRec21: [0.0;2],
			fRec24: [0.0;2],
			fVec8: [0.0;8192],
			iConst11: 0,
			fRec23: [0.0;2],
			fRec26: [0.0;2],
			fVec9: [0.0;8192],
			iConst12: 0,
			fRec25: [0.0;2],
			fVec10: [0.0;2048],
			iConst13: 0,
			fRec6: [0.0;2],
			fVec11: [0.0;2048],
			iConst14: 0,
			fRec4: [0.0;2],
			fVec12: [0.0;2048],
			iConst15: 0,
			fRec2: [0.0;2],
			fVec13: [0.0;1024],
			iConst16: 0,
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "crazyGuiro");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("reverbs.lib/name", "Faust Reverb Library");
		m.declare("reverbs.lib/version", "0.0");
		m.declare("synths.lib/name", "Faust Synthesizer Library");
		m.declare("synths.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.0;
		self.fButton0 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec9[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fVec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.iRec11[l2 as usize] = 0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec12[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec10[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 3) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fVec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 8192) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec8[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec14[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec3[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 8192) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec13[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec16[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec4[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 8192) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec15[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec18[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fVec5[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 8192) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec17[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec20[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fVec6[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 8192) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec19[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec22[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fVec7[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 8192) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec21[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec24[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fVec8[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 8192) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec23[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec26[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fVec9[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 8192) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec25[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fVec10[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2048) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec6[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fVec11[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2048) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec4[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fVec12[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2048) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec2[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fVec13[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 1024) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec0[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1382.30078 / self.fConst0);
		self.fConst2 = (0.00200000009 * self.fConst0);
		self.fConst3 = (0.00100000005 * self.fConst0);
		self.fConst4 = (1000.0 / self.fConst0);
		self.iConst5 = ((0.0253061224 * self.fConst0) as i32);
		self.iConst6 = ((0.0269387756 * self.fConst0) as i32);
		self.iConst7 = ((0.0289569162 * self.fConst0) as i32);
		self.iConst8 = ((0.0307482984 * self.fConst0) as i32);
		self.iConst9 = ((0.0322448984 * self.fConst0) as i32);
		self.iConst10 = ((0.033809524 * self.fConst0) as i32);
		self.iConst11 = ((0.0353061222 * self.fConst0) as i32);
		self.iConst12 = ((0.0366666652 * self.fConst0) as i32);
		self.iConst13 = std::cmp::min(1024, std::cmp::max(0, (((0.0126077095 * self.fConst0) as i32) + -1)));
		self.iConst14 = std::cmp::min(1024, std::cmp::max(0, (((0.00999999978 * self.fConst0) as i32) + -1)));
		self.iConst15 = std::cmp::min(1024, std::cmp::max(0, (((0.00773242628 * self.fConst0) as i32) + -1)));
		self.iConst16 = std::cmp::min(1024, std::cmp::max(0, (((0.00510204071 * self.fConst0) as i32) + -1)));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("crazyGuiro");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.addHorizontalSlider("key", &mut self.fHslider2, 0.0, 0.0, 2.0, 1.0);
		ui_interface.addHorizontalSlider("keyboard", &mut self.fHslider3, 0.0, 0.0, 2.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "acc", "1 0 -10 0 10");
		ui_interface.addHorizontalSlider("res", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "acc", "0 0 -10 0 10");
		ui_interface.addHorizontalSlider("wet", &mut self.fHslider1, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut fSlow2: f32 = f32::tan((self.fConst1 * f32::powf(2.0, (0.0833333358 * (((self.fHslider2 as f32) + (8.0 * (self.fHslider3 as f32))) + -19.0)))));
		let mut fSlow3: f32 = (1.0 / fSlow2);
		let mut fSlow4: f32 = (((fSlow3 + 0.125) / fSlow2) + 1.0);
		let mut fSlow5: f32 = (fSlow1 / fSlow4);
		let mut fSlow6: f32 = (self.fButton0 as f32);
		let mut fSlow7: f32 = (1.0 / fSlow4);
		let mut fSlow8: f32 = (((fSlow3 + -0.125) / fSlow2) + 1.0);
		let mut fSlow9: f32 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow2))));
		let mut fSlow10: f32 = (0.0 - fSlow3);
		let mut fSlow11: f32 = ((1.0 - fSlow1) / fSlow4);
		let mut i: i32 = 0;
		loop {
			self.fRec9[0] = (0.5 * (self.fRec9[1] + self.fRec8[1]));
			self.fVec0[0] = self.fConst0;
			self.iRec11[0] = ((1103515245 * self.iRec11[1]) + 12345);
			self.fVec1[0] = fSlow6;
			self.fRec12[0] = if ((((((fSlow6 - self.fVec1[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(self.fConst2, ((self.fRec12[1] + (0.00200000009 * (self.fConst0 - self.fVec0[1]))) + 1.0)) };
			let mut iTemp0: i32 = ((self.fRec12[0] < self.fConst3) as i32);
			self.fRec10[0] = ((4.65661287e-10 * ((self.iRec11[0] as f32) * if (iTemp0 as i32 == 1) { if (((self.fRec12[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp0 as i32 == 1) { (self.fConst4 * self.fRec12[0]) } else { 1.0 } } } else { if (((self.fRec12[0] < self.fConst2) as i32) as i32 == 1) { ((self.fConst4 * (0.0 - (self.fRec12[0] - self.fConst3))) + 1.0) } else { 0.0 } })) - (fSlow7 * ((fSlow8 * self.fRec10[2]) + (fSlow9 * self.fRec10[1]))));
			let mut fTemp1: f32 = ((fSlow3 * self.fRec10[0]) + (fSlow10 * self.fRec10[2]));
			let mut fTemp2: f32 = (fSlow5 * fTemp1);
			self.fVec2[(self.IOTA & 8191) as usize] = ((fSlow0 * self.fRec9[0]) + fTemp2);
			self.fRec8[0] = self.fVec2[((self.IOTA - self.iConst5) & 8191) as usize];
			self.fRec14[0] = (0.5 * (self.fRec14[1] + self.fRec13[1]));
			self.fVec3[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec14[0]));
			self.fRec13[0] = self.fVec3[((self.IOTA - self.iConst6) & 8191) as usize];
			self.fRec16[0] = (0.5 * (self.fRec16[1] + self.fRec15[1]));
			self.fVec4[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec16[0]));
			self.fRec15[0] = self.fVec4[((self.IOTA - self.iConst7) & 8191) as usize];
			self.fRec18[0] = (0.5 * (self.fRec18[1] + self.fRec17[1]));
			self.fVec5[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec18[0]));
			self.fRec17[0] = self.fVec5[((self.IOTA - self.iConst8) & 8191) as usize];
			self.fRec20[0] = (0.5 * (self.fRec20[1] + self.fRec19[1]));
			self.fVec6[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec20[0]));
			self.fRec19[0] = self.fVec6[((self.IOTA - self.iConst9) & 8191) as usize];
			self.fRec22[0] = (0.5 * (self.fRec22[1] + self.fRec21[1]));
			self.fVec7[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec22[0]));
			self.fRec21[0] = self.fVec7[((self.IOTA - self.iConst10) & 8191) as usize];
			self.fRec24[0] = (0.5 * (self.fRec24[1] + self.fRec23[1]));
			self.fVec8[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec24[0]));
			self.fRec23[0] = self.fVec8[((self.IOTA - self.iConst11) & 8191) as usize];
			self.fRec26[0] = (0.5 * (self.fRec26[1] + self.fRec25[1]));
			self.fVec9[(self.IOTA & 8191) as usize] = (fTemp2 + (fSlow0 * self.fRec26[0]));
			self.fRec25[0] = self.fVec9[((self.IOTA - self.iConst12) & 8191) as usize];
			let mut fTemp3: f32 = ((((((((self.fRec8[0] + self.fRec13[0]) + self.fRec15[0]) + self.fRec17[0]) + self.fRec19[0]) + self.fRec21[0]) + self.fRec23[0]) + self.fRec25[0]) + (0.5 * self.fRec6[1]));
			self.fVec10[(self.IOTA & 2047) as usize] = fTemp3;
			self.fRec6[0] = self.fVec10[((self.IOTA - self.iConst13) & 2047) as usize];
			let mut fRec7: f32 = (0.0 - (0.5 * fTemp3));
			let mut fTemp4: f32 = (self.fRec6[1] + (fRec7 + (0.5 * self.fRec4[1])));
			self.fVec11[(self.IOTA & 2047) as usize] = fTemp4;
			self.fRec4[0] = self.fVec11[((self.IOTA - self.iConst14) & 2047) as usize];
			let mut fRec5: f32 = (0.0 - (0.5 * fTemp4));
			let mut fTemp5: f32 = (self.fRec4[1] + (fRec5 + (0.5 * self.fRec2[1])));
			self.fVec12[(self.IOTA & 2047) as usize] = fTemp5;
			self.fRec2[0] = self.fVec12[((self.IOTA - self.iConst15) & 2047) as usize];
			let mut fRec3: f32 = (0.0 - (0.5 * fTemp5));
			let mut fTemp6: f32 = (self.fRec2[1] + (fRec3 + (0.5 * self.fRec0[1])));
			self.fVec13[(self.IOTA & 1023) as usize] = fTemp6;
			self.fRec0[0] = self.fVec13[((self.IOTA - self.iConst16) & 1023) as usize];
			let mut fRec1: f32 = (0.0 - (0.5 * fTemp6));
			let mut fTemp7: f32 = (self.fRec0[1] + (fRec1 + (fSlow11 * fTemp1)));
			outputs[0][i as usize] = (fTemp7 as f32);
			outputs[1][i as usize] = (fTemp7 as f32);
			self.fRec9[1] = self.fRec9[0];
			self.fVec0[1] = self.fVec0[0];
			self.iRec11[1] = self.iRec11[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec8[1] = self.fRec8[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

