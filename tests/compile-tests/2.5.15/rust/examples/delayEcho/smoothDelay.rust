


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider0: f32,
	fConst2: f32,
	fHslider1: f32,
	fRec1: [f32;2],
	fRec2: [f32;2],
	fRec3: [f32;2],
	fRec4: [f32;2],
	fHslider2: f32,
	IOTA: i32,
	fVec0: [f32;1048576],
	fRec0: [f32;2],
	fVec1: [f32;1048576],
	fRec5: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider0: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fRec1: [0.0;2],
			fRec2: [0.0;2],
			fRec3: [0.0;2],
			fRec4: [0.0;2],
			fHslider2: 0.0,
			IOTA: 0,
			fVec0: [0.0;1048576],
			fRec0: [0.0;2],
			fVec1: [0.0;1048576],
			fRec5: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Yann Orlarey");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "Grame");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("license", "STK-4.3");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "smoothDelay");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.0;
		self.fHslider1 = 10.0;
		self.fHslider2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec1[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec3[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec4[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l4: i32 = 0;
		loop {
			self.fVec0[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 1048576) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec0[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fVec1[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 1048576) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00100000005 * self.fConst0);
		self.fConst2 = (1000.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("smoothDelay");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "unit", "ms");
		ui_interface.addHorizontalSlider("delay", &mut self.fHslider0, 0.0, 0.0, 5000.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("feedback", &mut self.fHslider2, 0.0, 0.0, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "unit", "ms");
		ui_interface.addHorizontalSlider("interpolation", &mut self.fHslider1, 10.0, 1.0, 100.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fConst1 * (self.fHslider0 as f32));
		let mut fSlow1: f32 = (self.fConst2 / (self.fHslider1 as f32));
		let mut fSlow2: f32 = (0.0 - fSlow1);
		let mut fSlow3: f32 = (0.00999999978 * (self.fHslider2 as f32));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = if (((self.fRec1[1] != 0.0) as i32) as i32 == 1) { if ((((self.fRec2[1] > 0.0) as i32) & ((self.fRec2[1] < 1.0) as i32)) as i32 == 1) { self.fRec1[1] } else { 0.0 } } else { if ((((self.fRec2[1] == 0.0) as i32) & ((fSlow0 != self.fRec3[1]) as i32)) as i32 == 1) { fSlow1 } else { if ((((self.fRec2[1] == 1.0) as i32) & ((fSlow0 != self.fRec4[1]) as i32)) as i32 == 1) { fSlow2 } else { 0.0 } } };
			self.fRec1[0] = fTemp0;
			self.fRec2[0] = f32::max(0.0, f32::min(1.0, (self.fRec2[1] + fTemp0)));
			self.fRec3[0] = if ((((self.fRec2[1] >= 1.0) as i32) & ((self.fRec4[1] != fSlow0) as i32)) as i32 == 1) { fSlow0 } else { self.fRec3[1] };
			self.fRec4[0] = if ((((self.fRec2[1] <= 0.0) as i32) & ((self.fRec3[1] != fSlow0) as i32)) as i32 == 1) { fSlow0 } else { self.fRec4[1] };
			let mut fTemp1: f32 = (1.0 - self.fRec2[0]);
			let mut fTemp2: f32 = ((inputs[0][i as usize] as f32) + (fSlow3 * self.fRec0[1]));
			self.fVec0[(self.IOTA & 1048575) as usize] = fTemp2;
			let mut iTemp3: i32 = (f32::min(524288.0, f32::max(0.0, self.fRec3[0])) as i32);
			let mut iTemp4: i32 = (f32::min(524288.0, f32::max(0.0, self.fRec4[0])) as i32);
			self.fRec0[0] = ((fTemp1 * self.fVec0[((self.IOTA - iTemp3) & 1048575) as usize]) + (self.fRec2[0] * self.fVec0[((self.IOTA - iTemp4) & 1048575) as usize]));
			outputs[0][i as usize] = (self.fRec0[0] as f32);
			let mut fTemp5: f32 = ((inputs[1][i as usize] as f32) + (fSlow3 * self.fRec5[1]));
			self.fVec1[(self.IOTA & 1048575) as usize] = fTemp5;
			self.fRec5[0] = ((fTemp1 * self.fVec1[((self.IOTA - iTemp3) & 1048575) as usize]) + (self.fRec2[0] * self.fVec1[((self.IOTA - iTemp4) & 1048575) as usize]));
			outputs[1][i as usize] = (self.fRec5[0] as f32);
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[1] = self.fRec5[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

