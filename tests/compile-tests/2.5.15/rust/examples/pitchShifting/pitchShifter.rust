


pub struct mydsp {
	
	fDummy: f32,
	IOTA: i32,
	fVec0: [f32;131072],
	fHslider0: f32,
	fHslider1: f32,
	fRec0: [f32;2],
	fHslider2: f32,
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			IOTA: 0,
			fVec0: [0.0;131072],
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec0: [0.0;2],
			fHslider2: 0.0,
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("misceffects.lib/name", "Faust Math Library");
		m.declare("misceffects.lib/version", "2.0");
		m.declare("name", "pitchShifter");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		1
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 1000.0;
		self.fHslider1 = 0.0;
		self.fHslider2 = 10.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		self.IOTA = 0;
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 131072) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("Pitch Shifter");
		ui_interface.addHorizontalSlider("shift (semitones)", &mut self.fHslider1, 0.0, -12.0, 12.0, 0.10000000000000001);
		ui_interface.addHorizontalSlider("window (samples)", &mut self.fHslider0, 1000.0, 50.0, 10000.0, 1.0);
		ui_interface.addHorizontalSlider("xfade (samples)", &mut self.fHslider2, 10.0, 1.0, 10000.0, 1.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = f32::powf(2.0, (0.0833333358 * (self.fHslider1 as f32)));
		let mut fSlow2: f32 = (1.0 / (self.fHslider2 as f32));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fVec0[(self.IOTA & 131071) as usize] = fTemp0;
			self.fRec0[0] = f32::fmod((fSlow0 + ((self.fRec0[1] + 1.0) - fSlow1)), fSlow0);
			let mut iTemp1: i32 = (self.fRec0[0] as i32);
			let mut fTemp2: f32 = f32::floor(self.fRec0[0]);
			let mut fTemp3: f32 = (1.0 - self.fRec0[0]);
			let mut fTemp4: f32 = f32::min((fSlow2 * self.fRec0[0]), 1.0);
			let mut fTemp5: f32 = (fSlow0 + self.fRec0[0]);
			let mut iTemp6: i32 = (fTemp5 as i32);
			let mut fTemp7: f32 = f32::floor(fTemp5);
			outputs[0][i as usize] = (((((self.fVec0[((self.IOTA - std::cmp::min(65537, std::cmp::max(0, iTemp1))) & 131071) as usize] * (fTemp2 + fTemp3)) + ((self.fRec0[0] - fTemp2) * self.fVec0[((self.IOTA - std::cmp::min(65537, std::cmp::max(0, (iTemp1 + 1)))) & 131071) as usize])) * fTemp4) + (((self.fVec0[((self.IOTA - std::cmp::min(65537, std::cmp::max(0, iTemp6))) & 131071) as usize] * ((fTemp7 + fTemp3) - fSlow0)) + ((fSlow0 + (self.fRec0[0] - fTemp7)) * self.fVec0[((self.IOTA - std::cmp::min(65537, std::cmp::max(0, (iTemp6 + 1)))) & 131071) as usize])) * (1.0 - fTemp4))) as f32);
			self.IOTA = (self.IOTA + 1);
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

