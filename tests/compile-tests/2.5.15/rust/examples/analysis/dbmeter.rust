


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fRec0: [f32;2],
	fVbargraph0: f32,
	iConst1: i32,
	fRec1: [f32;2],
	fVbargraph1: f32,
	iConst2: i32,
	fRec2: [f32;2],
	fVbargraph2: f32,
	iConst3: i32,
	fRec3: [f32;2],
	fVbargraph3: f32,
	iConst4: i32,
	fRec4: [f32;2],
	fVbargraph4: f32,
	iConst5: i32,
	fRec5: [f32;2],
	fVbargraph5: f32,
	iConst6: i32,
	fRec6: [f32;2],
	fVbargraph6: f32,
	iConst7: i32,
	fRec7: [f32;2],
	fVbargraph7: f32,
	iConst8: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fRec0: [0.0;2],
			fVbargraph0: 0.0,
			iConst1: 0,
			fRec1: [0.0;2],
			fVbargraph1: 0.0,
			iConst2: 0,
			fRec2: [0.0;2],
			fVbargraph2: 0.0,
			iConst3: 0,
			fRec3: [0.0;2],
			fVbargraph3: 0.0,
			iConst4: 0,
			fRec4: [0.0;2],
			fVbargraph4: 0.0,
			iConst5: 0,
			fRec5: [0.0;2],
			fVbargraph5: 0.0,
			iConst6: 0,
			fRec6: [0.0;2],
			fVbargraph6: 0.0,
			iConst7: 0,
			fRec7: [0.0;2],
			fVbargraph7: 0.0,
			iConst8: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "dbmeter");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		8
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		8
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			5 => {
				rate = 1;
				
			},
			6 => {
				rate = 1;
				
			},
			7 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec3[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec5[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec6[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec7[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (80.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		self.iConst1 = 0;
		self.iConst2 = 0;
		self.iConst3 = 0;
		self.iConst4 = 0;
		self.iConst5 = 0;
		self.iConst6 = 0;
		self.iConst7 = 0;
		self.iConst8 = 0;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openHorizontalBox("8 channels dB meter");
		ui_interface.openVerticalBox("0");
		ui_interface.declare(&mut self.fVbargraph0, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd63590", &mut self.fVbargraph0, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("1");
		ui_interface.declare(&mut self.fVbargraph1, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd67c70", &mut self.fVbargraph1, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("2");
		ui_interface.declare(&mut self.fVbargraph2, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd6c350", &mut self.fVbargraph2, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("3");
		ui_interface.declare(&mut self.fVbargraph3, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd70ae0", &mut self.fVbargraph3, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("4");
		ui_interface.declare(&mut self.fVbargraph4, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd75320", &mut self.fVbargraph4, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("5");
		ui_interface.declare(&mut self.fVbargraph5, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd79c10", &mut self.fVbargraph5, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("6");
		ui_interface.declare(&mut self.fVbargraph6, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd7e5b0", &mut self.fVbargraph6, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("7");
		ui_interface.declare(&mut self.fVbargraph7, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f83dbd83000", &mut self.fVbargraph7, -70.0, 10.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fRec0[0] = f32::max((self.fRec0[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp0))))));
			self.fVbargraph0 = (self.fRec0[0] as f32);
			outputs[0][i as usize] = (self.iConst1 as f32);
			let mut fTemp1: f32 = (inputs[1][i as usize] as f32);
			self.fRec1[0] = f32::max((self.fRec1[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp1))))));
			self.fVbargraph1 = (self.fRec1[0] as f32);
			outputs[1][i as usize] = (self.iConst2 as f32);
			let mut fTemp2: f32 = (inputs[2][i as usize] as f32);
			self.fRec2[0] = f32::max((self.fRec2[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp2))))));
			self.fVbargraph2 = (self.fRec2[0] as f32);
			outputs[2][i as usize] = (self.iConst3 as f32);
			let mut fTemp3: f32 = (inputs[3][i as usize] as f32);
			self.fRec3[0] = f32::max((self.fRec3[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp3))))));
			self.fVbargraph3 = (self.fRec3[0] as f32);
			outputs[3][i as usize] = (self.iConst4 as f32);
			let mut fTemp4: f32 = (inputs[4][i as usize] as f32);
			self.fRec4[0] = f32::max((self.fRec4[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp4))))));
			self.fVbargraph4 = (self.fRec4[0] as f32);
			outputs[4][i as usize] = (self.iConst5 as f32);
			let mut fTemp5: f32 = (inputs[5][i as usize] as f32);
			self.fRec5[0] = f32::max((self.fRec5[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp5))))));
			self.fVbargraph5 = (self.fRec5[0] as f32);
			outputs[5][i as usize] = (self.iConst6 as f32);
			let mut fTemp6: f32 = (inputs[6][i as usize] as f32);
			self.fRec6[0] = f32::max((self.fRec6[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp6))))));
			self.fVbargraph6 = (self.fRec6[0] as f32);
			outputs[6][i as usize] = (self.iConst7 as f32);
			let mut fTemp7: f32 = (inputs[7][i as usize] as f32);
			self.fRec7[0] = f32::max((self.fRec7[1] - self.fConst0), f32::min(10.0, (20.0 * f32::log10(f32::max(0.000316227757, f32::abs(fTemp7))))));
			self.fVbargraph7 = (self.fRec7[0] as f32);
			outputs[7][i as usize] = (self.iConst8 as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

