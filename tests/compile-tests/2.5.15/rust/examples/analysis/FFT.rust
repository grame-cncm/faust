
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fHslider1: f32,
	fHslider2: f32,
	fHslider3: f32,
	fHbargraph0: f32,
	iVec0: [i32;2],
	fRec1: [f32;2],
	fRec2: [f32;2],
	iRec3: [i32;2],
	IOTA: i32,
	fVec1: [f32;32],
	fRec0: [f32;2],
	fVbargraph0: f32,
	fRec4: [f32;2],
	fVbargraph1: f32,
	fRec5: [f32;2],
	fVbargraph2: f32,
	fRec6: [f32;2],
	fVbargraph3: f32,
	fRec7: [f32;2],
	fVbargraph4: f32,
	fRec8: [f32;2],
	fVbargraph5: f32,
	fRec9: [f32;2],
	fVbargraph6: f32,
	fRec10: [f32;2],
	fVbargraph7: f32,
	fRec11: [f32;2],
	fVbargraph8: f32,
	fRec12: [f32;2],
	fVbargraph9: f32,
	fRec13: [f32;2],
	fVbargraph10: f32,
	fRec14: [f32;2],
	fVbargraph11: f32,
	fRec15: [f32;2],
	fVbargraph12: f32,
	fRec16: [f32;2],
	fVbargraph13: f32,
	fRec17: [f32;2],
	fVbargraph14: f32,
	fRec18: [f32;2],
	fVbargraph15: f32,
	fRec19: [f32;2],
	fVbargraph16: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fHbargraph0: 0.0,
			iVec0: [0;2],
			fRec1: [0.0;2],
			fRec2: [0.0;2],
			iRec3: [0;2],
			IOTA: 0,
			fVec1: [0.0;32],
			fRec0: [0.0;2],
			fVbargraph0: 0.0,
			fRec4: [0.0;2],
			fVbargraph1: 0.0,
			fRec5: [0.0;2],
			fVbargraph2: 0.0,
			fRec6: [0.0;2],
			fVbargraph3: 0.0,
			fRec7: [0.0;2],
			fVbargraph4: 0.0,
			fRec8: [0.0;2],
			fVbargraph5: 0.0,
			fRec9: [0.0;2],
			fVbargraph6: 0.0,
			fRec10: [0.0;2],
			fVbargraph7: 0.0,
			fRec11: [0.0;2],
			fVbargraph8: 0.0,
			fRec12: [0.0;2],
			fVbargraph9: 0.0,
			fRec13: [0.0;2],
			fVbargraph10: 0.0,
			fRec14: [0.0;2],
			fVbargraph11: 0.0,
			fRec15: [0.0;2],
			fVbargraph12: 0.0,
			fRec16: [0.0;2],
			fVbargraph13: 0.0,
			fRec17: [0.0;2],
			fVbargraph14: 0.0,
			fRec18: [0.0;2],
			fVbargraph15: 0.0,
			fRec19: [0.0;2],
			fVbargraph16: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("author", "JOS");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "STK-4.3");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "FFT");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 50.0;
		self.fHslider1 = 100.0;
		self.fHslider2 = 0.100000001;
		self.fHslider3 = 8.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec2[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.iRec3[l3 as usize] = 0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l4: i32 = 0;
		loop {
			self.fVec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 32) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec0[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec4[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec6[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec8[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec9[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec10[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec12[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec13[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec14[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec15[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec16[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec17[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec18[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec19[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (1000.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("FFT");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "fft_spectral_level in Faust's analyzers.lib");
		ui_interface.openHorizontalBox("FFT SPECTRUM ANALYZER, 32 bands");
		ui_interface.declare(&mut self.fVbargraph1, "0", "");
		ui_interface.declare(&mut self.fVbargraph1, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph1, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcb4e10", &mut self.fVbargraph1, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph2, "1", "");
		ui_interface.declare(&mut self.fVbargraph2, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph2, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcc5510", &mut self.fVbargraph2, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph3, "2", "");
		ui_interface.declare(&mut self.fVbargraph3, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph3, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcd0ac0", &mut self.fVbargraph3, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph4, "3", "");
		ui_interface.declare(&mut self.fVbargraph4, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph4, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcdc290", &mut self.fVbargraph4, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph5, "4", "");
		ui_interface.declare(&mut self.fVbargraph5, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph5, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bce4230", &mut self.fVbargraph5, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph6, "5", "");
		ui_interface.declare(&mut self.fVbargraph6, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph6, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcefcd0", &mut self.fVbargraph6, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph7, "6", "");
		ui_interface.declare(&mut self.fVbargraph7, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph7, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcf73c0", &mut self.fVbargraph7, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph8, "7", "");
		ui_interface.declare(&mut self.fVbargraph8, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph8, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb05d70", &mut self.fVbargraph8, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph9, "8", "");
		ui_interface.declare(&mut self.fVbargraph9, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph9, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb0b9f0", &mut self.fVbargraph9, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph10, "9", "");
		ui_interface.declare(&mut self.fVbargraph10, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph10, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb13090", &mut self.fVbargraph10, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph11, "10", "");
		ui_interface.declare(&mut self.fVbargraph11, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph11, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb1aa40", &mut self.fVbargraph11, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph12, "11", "");
		ui_interface.declare(&mut self.fVbargraph12, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph12, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb22b20", &mut self.fVbargraph12, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph13, "12", "");
		ui_interface.declare(&mut self.fVbargraph13, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph13, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb28e30", &mut self.fVbargraph13, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph14, "13", "");
		ui_interface.declare(&mut self.fVbargraph14, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph14, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb30f00", &mut self.fVbargraph14, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph15, "14", "");
		ui_interface.declare(&mut self.fVbargraph15, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph15, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb384b0", &mut self.fVbargraph15, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph16, "15", "");
		ui_interface.declare(&mut self.fVbargraph16, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph16, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5cb40570", &mut self.fVbargraph16, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph0, "16", "");
		ui_interface.declare(&mut self.fVbargraph0, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph0, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7fac5bcb0030", &mut self.fVbargraph0, -50.0, 10.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("FFT SPECTRUM ANALYZER CONTROLS");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface.declare(&mut self.fHslider1, "unit", "ms");
		ui_interface.addHorizontalSlider("Level Averaging Time", &mut self.fHslider1, 100.0, 1.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "1", "");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Level offset in decibels");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Level dB Offset", &mut self.fHslider0, 50.0, -50.0, 100.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fHslider3, "2", "");
		ui_interface.addHorizontalSlider("FFT Bin Number", &mut self.fHslider3, 8.0, 0.0, 16.0, 0.001);
		ui_interface.declare(&mut self.fHbargraph0, "3", "");
		ui_interface.addHorizontalBargraph("Measured FFT Bin Number", &mut self.fHbargraph0, 0.0, 16.0);
		ui_interface.declare(&mut self.fHslider2, "4", "");
		ui_interface.addHorizontalSlider("Amplitude", &mut self.fHslider2, 0.10000000000000001, 0.0, 1.0, 0.001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = f32::exp((0.0 - (self.fConst0 / (self.fHslider1 as f32))));
		let mut fSlow2: f32 = (10.0 * (1.0 - fSlow1));
		let mut fSlow3: f32 = (self.fHslider2 as f32);
		let mut iSlow4: i32 = ((self.fHslider3 as f32) as i32);
		self.fHbargraph0 = (iSlow4 as f32);
		let mut iSlow5: i32 = ((iSlow4 == 0) as i32);
		let mut iSlow6: i32 = ((iSlow4 == 16) as i32);
		let mut fSlow7: f32 = (0.196349546 * (iSlow4 as f32));
		let mut fSlow8: f32 = f32::sin(fSlow7);
		let mut fSlow9: f32 = f32::cos(fSlow7);
		let mut fSlow10: f32 = (0.0 - fSlow8);
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec1[0] = ((fSlow8 * self.fRec2[1]) + (fSlow9 * self.fRec1[1]));
			self.fRec2[0] = (((fSlow9 * self.fRec2[1]) + (fSlow10 * self.fRec1[1])) + ((1 - self.iVec0[1]) as f32));
			self.iRec3[0] = (1 - (self.iVec0[1] + self.iRec3[1]));
			let mut fTemp0: f32 = (fSlow3 * if (iSlow5 as i32 == 1) { 1.0 } else { if (iSlow6 as i32 == 1) { (self.iRec3[0] as f32) } else { (2.0 * self.fRec2[0]) } });
			self.fVec1[(self.IOTA & 31) as usize] = fTemp0;
			let mut fTemp1: f32 = (self.fVec1[((self.IOTA - 28) & 31) as usize] + (self.fVec1[((self.IOTA - 12) & 31) as usize] + (self.fVec1[((self.IOTA - 20) & 31) as usize] + (self.fVec1[((self.IOTA - 4) & 31) as usize] + (self.fVec1[((self.IOTA - 24) & 31) as usize] + ((fTemp0 + self.fVec1[((self.IOTA - 16) & 31) as usize]) + self.fVec1[((self.IOTA - 8) & 31) as usize]))))));
			let mut fTemp2: f32 = (self.fVec1[((self.IOTA - 21) & 31) as usize] + (self.fVec1[((self.IOTA - 5) & 31) as usize] + self.fVec1[((self.IOTA - 29) & 31) as usize]));
			let mut fTemp3: f32 = (self.fVec1[((self.IOTA - 17) & 31) as usize] + (self.fVec1[((self.IOTA - 1) & 31) as usize] + (self.fVec1[((self.IOTA - 13) & 31) as usize] + (self.fVec1[((self.IOTA - 25) & 31) as usize] + (fTemp2 + self.fVec1[((self.IOTA - 9) & 31) as usize])))));
			let mut fTemp4: f32 = (self.fVec1[((self.IOTA - 31) & 31) as usize] + (self.fVec1[((self.IOTA - 15) & 31) as usize] + (self.fVec1[((self.IOTA - 23) & 31) as usize] + (self.fVec1[((self.IOTA - 7) & 31) as usize] + (self.fVec1[((self.IOTA - 27) & 31) as usize] + (self.fVec1[((self.IOTA - 11) & 31) as usize] + (self.fVec1[((self.IOTA - 19) & 31) as usize] + (self.fVec1[((self.IOTA - 3) & 31) as usize] + fTemp3))))))));
			self.fRec0[0] = ((fSlow2 * f32::log10(f32::max(1.00000001e-07, mydsp_faustpower2_f(f32::abs((((((((((self.fVec1[((self.IOTA - 2) & 31) as usize] + fTemp1) + self.fVec1[((self.IOTA - 18) & 31) as usize]) + self.fVec1[((self.IOTA - 10) & 31) as usize]) + self.fVec1[((self.IOTA - 26) & 31) as usize]) + self.fVec1[((self.IOTA - 6) & 31) as usize]) + self.fVec1[((self.IOTA - 22) & 31) as usize]) + self.fVec1[((self.IOTA - 14) & 31) as usize]) + self.fVec1[((self.IOTA - 30) & 31) as usize]) - fTemp4)))))) + (fSlow1 * self.fRec0[1]));
			self.fVbargraph0 = ((fSlow0 + self.fRec0[0]) as f32);
			self.fRec4[0] = ((fSlow2 * f32::log10(f32::max(1.00000001e-07, mydsp_faustpower2_f(f32::abs(((((((((((((((((fTemp4 + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize]) + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize]) + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize]) + self.fVec1[((self.IOTA - 2) & 31) as usize]) + self.fVec1[((self.IOTA - 18) & 31) as usize]) + self.fVec1[((self.IOTA - 10) & 31) as usize]) + self.fVec1[((self.IOTA - 26) & 31) as usize]) + self.fVec1[((self.IOTA - 6) & 31) as usize]) + self.fVec1[((self.IOTA - 22) & 31) as usize]) + self.fVec1[((self.IOTA - 14) & 31) as usize]) + self.fVec1[((self.IOTA - 30) & 31) as usize])))))) + (fSlow1 * self.fRec4[1]));
			self.fVbargraph1 = ((fSlow0 + self.fRec4[0]) as f32);
			let mut fTemp5: f32 = (self.fVec1[((self.IOTA - 15) & 31) as usize] - self.fVec1[((self.IOTA - 31) & 31) as usize]);
			let mut fTemp6: f32 = (0.0 - fTemp5);
			let mut fTemp7: f32 = (self.fVec1[((self.IOTA - 7) & 31) as usize] - self.fVec1[((self.IOTA - 23) & 31) as usize]);
			let mut fTemp8: f32 = (0.707106769 * fTemp7);
			let mut fTemp9: f32 = ((self.fVec1[((self.IOTA - 27) & 31) as usize] + (0.707106769 * fTemp6)) - (self.fVec1[((self.IOTA - 11) & 31) as usize] + fTemp8));
			let mut fTemp10: f32 = (0.923879504 * fTemp9);
			let mut fTemp11: f32 = (self.fVec1[((self.IOTA - 13) & 31) as usize] - self.fVec1[((self.IOTA - 29) & 31) as usize]);
			let mut fTemp12: f32 = (0.0 - fTemp11);
			let mut fTemp13: f32 = (self.fVec1[((self.IOTA - 25) & 31) as usize] + (0.707106769 * fTemp12));
			let mut fTemp14: f32 = (self.fVec1[((self.IOTA - 5) & 31) as usize] - self.fVec1[((self.IOTA - 21) & 31) as usize]);
			let mut fTemp15: f32 = (0.707106769 * fTemp14);
			let mut fTemp16: f32 = (self.fVec1[((self.IOTA - 9) & 31) as usize] + fTemp15);
			let mut fTemp17: f32 = (0.707106769 * fTemp6);
			let mut fTemp18: f32 = (0.707106769 * fTemp7);
			let mut fTemp19: f32 = ((fTemp17 + (self.fVec1[((self.IOTA - 3) & 31) as usize] + fTemp18)) - self.fVec1[((self.IOTA - 19) & 31) as usize]);
			let mut fTemp20: f32 = ((fTemp10 + fTemp13) - (fTemp16 + (0.382683426 * fTemp19)));
			let mut fTemp21: f32 = (self.fVec1[((self.IOTA - 14) & 31) as usize] - self.fVec1[((self.IOTA - 30) & 31) as usize]);
			let mut fTemp22: f32 = (0.0 - fTemp21);
			let mut fTemp23: f32 = (self.fVec1[((self.IOTA - 6) & 31) as usize] - self.fVec1[((self.IOTA - 22) & 31) as usize]);
			let mut fTemp24: f32 = (0.707106769 * fTemp23);
			let mut fTemp25: f32 = (((0.707106769 * fTemp22) + self.fVec1[((self.IOTA - 26) & 31) as usize]) - (fTemp24 + self.fVec1[((self.IOTA - 10) & 31) as usize]));
			let mut fTemp26: f32 = (self.fVec1[((self.IOTA - 4) & 31) as usize] - self.fVec1[((self.IOTA - 20) & 31) as usize]);
			let mut fTemp27: f32 = (0.707106769 * fTemp26);
			let mut fTemp28: f32 = (self.fVec1[((self.IOTA - 12) & 31) as usize] - self.fVec1[((self.IOTA - 28) & 31) as usize]);
			let mut fTemp29: f32 = (0.0 - fTemp28);
			let mut fTemp30: f32 = (0.707106769 * fTemp29);
			let mut fTemp31: f32 = (fTemp27 + fTemp30);
			let mut fTemp32: f32 = (0.707106769 * fTemp23);
			let mut fTemp33: f32 = (0.707106769 * fTemp22);
			let mut fTemp34: f32 = (((fTemp32 + fTemp33) + self.fVec1[((self.IOTA - 2) & 31) as usize]) - self.fVec1[((self.IOTA - 18) & 31) as usize]);
			let mut fTemp35: f32 = (0.923879504 * fTemp34);
			let mut fTemp36: f32 = (0.707106769 * fTemp12);
			let mut fTemp37: f32 = (0.707106769 * fTemp14);
			let mut fTemp38: f32 = (fTemp36 + (self.fVec1[((self.IOTA - 1) & 31) as usize] + fTemp37));
			let mut fTemp39: f32 = (0.923879504 * fTemp19);
			let mut fTemp40: f32 = (((0.382683426 * fTemp9) + (fTemp38 + fTemp39)) - self.fVec1[((self.IOTA - 17) & 31) as usize]);
			let mut fTemp41: f32 = (0.707106769 * fTemp29);
			let mut fTemp42: f32 = (0.923879504 * fTemp25);
			let mut fTemp43: f32 = (0.707106769 * fTemp26);
			self.fRec5[0] = ((fSlow1 * self.fRec5[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.195090324 * fTemp20) + (((0.382683426 * fTemp25) + (fTemp31 + fTemp35)) + (0.980785251 * fTemp40))) + fTemp0) - self.fVec1[((self.IOTA - 16) & 31) as usize]))) + mydsp_faustpower2_f(f32::abs(((((0.980785251 * fTemp20) + (fTemp41 + fTemp42)) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - (((fTemp43 + (0.382683426 * fTemp34)) + (0.195090324 * fTemp40)) + self.fVec1[((self.IOTA - 8) & 31) as usize])))))))));
			self.fVbargraph2 = ((fSlow0 + self.fRec5[0]) as f32);
			let mut fTemp44: f32 = (self.fVec1[((self.IOTA - 29) & 31) as usize] + self.fVec1[((self.IOTA - 13) & 31) as usize]);
			let mut fTemp45: f32 = (self.fVec1[((self.IOTA - 7) & 31) as usize] + self.fVec1[((self.IOTA - 23) & 31) as usize]);
			let mut fTemp46: f32 = (fTemp45 - (self.fVec1[((self.IOTA - 15) & 31) as usize] + self.fVec1[((self.IOTA - 31) & 31) as usize]));
			let mut fTemp47: f32 = (0.0 - fTemp46);
			let mut fTemp48: f32 = (self.fVec1[((self.IOTA - 5) & 31) as usize] + self.fVec1[((self.IOTA - 21) & 31) as usize]);
			let mut fTemp49: f32 = (self.fVec1[((self.IOTA - 3) & 31) as usize] + self.fVec1[((self.IOTA - 19) & 31) as usize]);
			let mut fTemp50: f32 = (fTemp49 - (self.fVec1[((self.IOTA - 11) & 31) as usize] + self.fVec1[((self.IOTA - 27) & 31) as usize]));
			let mut fTemp51: f32 = (0.707106769 * fTemp50);
			let mut fTemp52: f32 = ((fTemp44 + (0.707106769 * fTemp47)) - (fTemp48 + fTemp51));
			let mut fTemp53: f32 = (self.fVec1[((self.IOTA - 2) & 31) as usize] + self.fVec1[((self.IOTA - 18) & 31) as usize]);
			let mut fTemp54: f32 = (fTemp53 - (self.fVec1[((self.IOTA - 10) & 31) as usize] + self.fVec1[((self.IOTA - 26) & 31) as usize]));
			let mut fTemp55: f32 = (0.707106769 * fTemp54);
			let mut fTemp56: f32 = ((self.fVec1[((self.IOTA - 6) & 31) as usize] + self.fVec1[((self.IOTA - 22) & 31) as usize]) - (self.fVec1[((self.IOTA - 14) & 31) as usize] + self.fVec1[((self.IOTA - 30) & 31) as usize]));
			let mut fTemp57: f32 = (0.0 - fTemp56);
			let mut fTemp58: f32 = (0.707106769 * fTemp57);
			let mut fTemp59: f32 = (0.707106769 * fTemp47);
			let mut fTemp60: f32 = (self.fVec1[((self.IOTA - 1) & 31) as usize] + self.fVec1[((self.IOTA - 17) & 31) as usize]);
			let mut fTemp61: f32 = (0.707106769 * fTemp50);
			let mut fTemp62: f32 = (self.fVec1[((self.IOTA - 9) & 31) as usize] + self.fVec1[((self.IOTA - 25) & 31) as usize]);
			let mut fTemp63: f32 = ((fTemp59 + (fTemp60 + fTemp61)) - fTemp62);
			let mut fTemp64: f32 = (0.707106769 * fTemp54);
			self.fRec6[0] = ((fSlow1 * self.fRec6[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs((((((0.382683426 * fTemp52) + ((fTemp55 + fTemp58) + (0.923879504 * fTemp63))) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) - (self.fVec1[((self.IOTA - 8) & 31) as usize] + self.fVec1[((self.IOTA - 24) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((((0.707106769 * fTemp57) + (0.923879504 * fTemp52)) + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize]) - (((fTemp64 + (0.382683426 * fTemp63)) + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize])))))))));
			self.fVbargraph3 = ((fSlow0 + self.fRec6[0]) as f32);
			let mut fTemp65: f32 = (0.707106769 * fTemp5);
			let mut fTemp66: f32 = (self.fVec1[((self.IOTA - 11) & 31) as usize] - (fTemp65 + (self.fVec1[((self.IOTA - 27) & 31) as usize] + fTemp18)));
			let mut fTemp67: f32 = (0.707106769 * fTemp11);
			let mut fTemp68: f32 = (fTemp67 + (self.fVec1[((self.IOTA - 25) & 31) as usize] + fTemp37));
			let mut fTemp69: f32 = ((self.fVec1[((self.IOTA - 3) & 31) as usize] + (0.707106769 * fTemp5)) - (self.fVec1[((self.IOTA - 19) & 31) as usize] + fTemp8));
			let mut fTemp70: f32 = ((self.fVec1[((self.IOTA - 9) & 31) as usize] + (0.382683426 * fTemp66)) - (fTemp68 + (0.923879504 * fTemp69)));
			let mut fTemp71: f32 = (0.707106769 * fTemp21);
			let mut fTemp72: f32 = (self.fVec1[((self.IOTA - 10) & 31) as usize] - ((fTemp32 + fTemp71) + self.fVec1[((self.IOTA - 26) & 31) as usize]));
			let mut fTemp73: f32 = (0.707106769 * fTemp28);
			let mut fTemp74: f32 = (((0.707106769 * fTemp21) + self.fVec1[((self.IOTA - 2) & 31) as usize]) - (fTemp24 + self.fVec1[((self.IOTA - 18) & 31) as usize]));
			let mut fTemp75: f32 = (self.fVec1[((self.IOTA - 1) & 31) as usize] + (0.707106769 * fTemp11));
			let mut fTemp76: f32 = (self.fVec1[((self.IOTA - 17) & 31) as usize] + fTemp15);
			let mut fTemp77: f32 = (((0.923879504 * fTemp66) + (fTemp75 + (0.382683426 * fTemp69))) - fTemp76);
			let mut fTemp78: f32 = (0.707106769 * fTemp28);
			let mut fTemp79: f32 = (fTemp27 + fTemp78);
			self.fRec7[0] = ((fSlow1 * self.fRec7[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.555570245 * fTemp70) + (((0.923879504 * fTemp72) + (fTemp73 + (0.382683426 * fTemp74))) + (0.831469595 * fTemp77))) + fTemp0) - (fTemp43 + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs(((((0.382683426 * fTemp72) + (0.831469595 * fTemp70)) + self.fVec1[((self.IOTA - 8) & 31) as usize]) - (((fTemp79 + (0.923879504 * fTemp74)) + (0.555570245 * fTemp77)) + self.fVec1[((self.IOTA - 24) & 31) as usize])))))))));
			self.fVbargraph4 = ((fSlow0 + self.fRec7[0]) as f32);
			let mut fTemp80: f32 = (((fTemp62 + self.fVec1[((self.IOTA - 1) & 31) as usize]) + self.fVec1[((self.IOTA - 17) & 31) as usize]) - (fTemp2 + self.fVec1[((self.IOTA - 13) & 31) as usize]));
			let mut fTemp81: f32 = (0.707106769 * fTemp80);
			let mut fTemp82: f32 = (self.fVec1[((self.IOTA - 27) & 31) as usize] + (fTemp49 + self.fVec1[((self.IOTA - 11) & 31) as usize]));
			let mut fTemp83: f32 = (fTemp82 - (self.fVec1[((self.IOTA - 31) & 31) as usize] + (fTemp45 + self.fVec1[((self.IOTA - 15) & 31) as usize])));
			let mut fTemp84: f32 = (0.0 - fTemp83);
			let mut fTemp85: f32 = (0.707106769 * fTemp80);
			self.fRec8[0] = ((fSlow1 * self.fRec8[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((((fTemp81 + (0.707106769 * fTemp84)) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - (self.fVec1[((self.IOTA - 28) & 31) as usize] + ((self.fVec1[((self.IOTA - 4) & 31) as usize] + self.fVec1[((self.IOTA - 20) & 31) as usize]) + self.fVec1[((self.IOTA - 12) & 31) as usize]))))) + mydsp_faustpower2_f(f32::abs(((((((0.707106769 * fTemp84) + self.fVec1[((self.IOTA - 6) & 31) as usize]) + self.fVec1[((self.IOTA - 22) & 31) as usize]) + self.fVec1[((self.IOTA - 14) & 31) as usize]) + self.fVec1[((self.IOTA - 30) & 31) as usize]) - ((((fTemp85 + self.fVec1[((self.IOTA - 2) & 31) as usize]) + self.fVec1[((self.IOTA - 18) & 31) as usize]) + self.fVec1[((self.IOTA - 10) & 31) as usize]) + self.fVec1[((self.IOTA - 26) & 31) as usize])))))))));
			self.fVbargraph5 = ((fSlow0 + self.fRec8[0]) as f32);
			let mut fTemp86: f32 = (self.fVec1[((self.IOTA - 25) & 31) as usize] + fTemp15);
			let mut fTemp87: f32 = ((self.fVec1[((self.IOTA - 27) & 31) as usize] + fTemp8) - (self.fVec1[((self.IOTA - 11) & 31) as usize] + (0.707106769 * fTemp6)));
			let mut fTemp88: f32 = (self.fVec1[((self.IOTA - 9) & 31) as usize] + (0.707106769 * fTemp12));
			let mut fTemp89: f32 = (0.707106769 * fTemp7);
			let mut fTemp90: f32 = (self.fVec1[((self.IOTA - 3) & 31) as usize] - (fTemp17 + (self.fVec1[((self.IOTA - 19) & 31) as usize] + fTemp89)));
			let mut fTemp91: f32 = (fTemp86 - ((0.382683426 * fTemp87) + (fTemp88 + (0.923879504 * fTemp90))));
			let mut fTemp92: f32 = ((fTemp24 + self.fVec1[((self.IOTA - 26) & 31) as usize]) - ((0.707106769 * fTemp22) + self.fVec1[((self.IOTA - 10) & 31) as usize]));
			let mut fTemp93: f32 = (0.707106769 * fTemp14);
			let mut fTemp94: f32 = (fTemp36 + (self.fVec1[((self.IOTA - 17) & 31) as usize] + fTemp93));
			let mut fTemp95: f32 = ((self.fVec1[((self.IOTA - 1) & 31) as usize] + (0.923879504 * fTemp87)) - (fTemp94 + (0.382683426 * fTemp90)));
			let mut fTemp96: f32 = (0.707106769 * fTemp26);
			let mut fTemp97: f32 = (fTemp30 + fTemp96);
			let mut fTemp98: f32 = (0.707106769 * fTemp23);
			let mut fTemp99: f32 = (self.fVec1[((self.IOTA - 2) & 31) as usize] - ((fTemp33 + fTemp98) + self.fVec1[((self.IOTA - 18) & 31) as usize]));
			let mut fTemp100: f32 = (0.707106769 * fTemp29);
			self.fRec9[0] = ((fSlow1 * self.fRec9[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.831469595 * fTemp91) + ((0.923879504 * fTemp92) + (0.555570245 * fTemp95))) + fTemp0) - ((fTemp97 + (0.382683426 * fTemp99)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((fTemp43 + (0.555570245 * fTemp91)) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - (((0.831469595 * fTemp95) + ((0.382683426 * fTemp92) + (fTemp100 + (0.923879504 * fTemp99)))) + self.fVec1[((self.IOTA - 8) & 31) as usize])))))))));
			self.fVbargraph6 = ((fSlow0 + self.fRec9[0]) as f32);
			let mut fTemp101: f32 = (0.707106769 * fTemp46);
			let mut fTemp102: f32 = (fTemp48 - (fTemp101 + (fTemp44 + fTemp61)));
			let mut fTemp103: f32 = ((fTemp60 + (0.707106769 * fTemp46)) - (fTemp62 + fTemp51));
			let mut fTemp104: f32 = (0.707106769 * fTemp56);
			self.fRec10[0] = ((fSlow1 * self.fRec10[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs((((((0.923879504 * fTemp102) + ((0.707106769 * fTemp56) + (0.382683426 * fTemp103))) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) - ((fTemp64 + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs(((((0.382683426 * fTemp102) + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize]) - ((((fTemp55 + fTemp104) + (0.923879504 * fTemp103)) + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize])))))))));
			self.fVbargraph7 = ((fSlow0 + self.fRec10[0]) as f32);
			let mut fTemp105: f32 = (fTemp67 + (self.fVec1[((self.IOTA - 9) & 31) as usize] + fTemp93));
			let mut fTemp106: f32 = ((fTemp65 + (self.fVec1[((self.IOTA - 11) & 31) as usize] + fTemp89)) - self.fVec1[((self.IOTA - 27) & 31) as usize]);
			let mut fTemp107: f32 = ((self.fVec1[((self.IOTA - 3) & 31) as usize] + fTemp8) - (self.fVec1[((self.IOTA - 19) & 31) as usize] + (0.707106769 * fTemp5)));
			let mut fTemp108: f32 = (fTemp105 - ((0.923879504 * fTemp106) + (self.fVec1[((self.IOTA - 25) & 31) as usize] + (0.382683426 * fTemp107))));
			let mut fTemp109: f32 = (((fTemp71 + fTemp98) + self.fVec1[((self.IOTA - 10) & 31) as usize]) - self.fVec1[((self.IOTA - 26) & 31) as usize]);
			let mut fTemp110: f32 = (self.fVec1[((self.IOTA - 1) & 31) as usize] + fTemp15);
			let mut fTemp111: f32 = (self.fVec1[((self.IOTA - 17) & 31) as usize] + (0.707106769 * fTemp11));
			let mut fTemp112: f32 = ((fTemp110 + (0.382683426 * fTemp106)) - (fTemp111 + (0.923879504 * fTemp107)));
			let mut fTemp113: f32 = (0.707106769 * fTemp28);
			let mut fTemp114: f32 = ((fTemp24 + self.fVec1[((self.IOTA - 2) & 31) as usize]) - ((0.707106769 * fTemp21) + self.fVec1[((self.IOTA - 18) & 31) as usize]));
			let mut fTemp115: f32 = (fTemp78 + fTemp96);
			self.fRec11[0] = ((fSlow1 * self.fRec11[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.980785251 * fTemp108) + ((fTemp43 + (0.382683426 * fTemp109)) + (0.195090324 * fTemp112))) + fTemp0) - ((fTemp113 + (0.923879504 * fTemp114)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((fTemp115 + (0.195090324 * fTemp108)) + self.fVec1[((self.IOTA - 8) & 31) as usize]) - ((((0.923879504 * fTemp109) + (0.382683426 * fTemp114)) + (0.980785251 * fTemp112)) + self.fVec1[((self.IOTA - 24) & 31) as usize])))))))));
			self.fVbargraph8 = ((fSlow0 + self.fRec11[0]) as f32);
			let mut fTemp116: f32 = (self.fVec1[((self.IOTA - 26) & 31) as usize] + (fTemp53 + self.fVec1[((self.IOTA - 10) & 31) as usize]));
			self.fRec12[0] = ((fSlow1 * self.fRec12[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs((fTemp1 - (self.fVec1[((self.IOTA - 30) & 31) as usize] + (self.fVec1[((self.IOTA - 14) & 31) as usize] + (self.fVec1[((self.IOTA - 22) & 31) as usize] + (self.fVec1[((self.IOTA - 6) & 31) as usize] + fTemp116))))))) + mydsp_faustpower2_f(f32::abs((0.0 - (fTemp3 - (self.fVec1[((self.IOTA - 31) & 31) as usize] + (self.fVec1[((self.IOTA - 15) & 31) as usize] + (self.fVec1[((self.IOTA - 23) & 31) as usize] + (self.fVec1[((self.IOTA - 7) & 31) as usize] + fTemp82)))))))))))));
			self.fVbargraph9 = ((fSlow0 + self.fRec12[0]) as f32);
			let mut fTemp117: f32 = ((fTemp13 + (0.382683426 * fTemp19)) - (fTemp10 + fTemp16));
			let mut fTemp118: f32 = (fTemp38 - ((0.382683426 * fTemp9) + (self.fVec1[((self.IOTA - 17) & 31) as usize] + fTemp39)));
			self.fRec13[0] = ((fSlow1 * self.fRec13[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs((((fTemp31 + (0.980785251 * fTemp117)) + fTemp0) - (((fTemp35 + (0.382683426 * fTemp25)) + (0.195090324 * fTemp118)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((fTemp41 + (0.382683426 * fTemp34)) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - (((0.195090324 * fTemp117) + ((fTemp43 + fTemp42) + (0.980785251 * fTemp118))) + self.fVec1[((self.IOTA - 8) & 31) as usize])))))))));
			self.fVbargraph10 = ((fSlow0 + self.fRec13[0]) as f32);
			let mut fTemp119: f32 = ((fTemp44 + fTemp51) - (fTemp48 + (0.707106769 * fTemp47)));
			let mut fTemp120: f32 = (0.707106769 * fTemp54);
			let mut fTemp121: f32 = (0.707106769 * fTemp50);
			let mut fTemp122: f32 = (fTemp60 - (fTemp59 + (fTemp62 + fTemp121)));
			self.fRec14[0] = ((fSlow1 * self.fRec14[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.923879504 * fTemp119) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) - ((((fTemp58 + fTemp120) + (0.382683426 * fTemp122)) + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((fTemp64 + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize]) - ((((0.382683426 * fTemp119) + ((0.707106769 * fTemp57) + (0.923879504 * fTemp122))) + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize])))))))));
			self.fVbargraph11 = ((fSlow0 + self.fRec14[0]) as f32);
			let mut fTemp123: f32 = ((self.fVec1[((self.IOTA - 9) & 31) as usize] + (0.923879504 * fTemp69)) - (fTemp68 + (0.382683426 * fTemp66)));
			let mut fTemp124: f32 = (fTemp75 - ((0.923879504 * fTemp66) + (fTemp76 + (0.382683426 * fTemp69))));
			self.fRec15[0] = ((fSlow1 * self.fRec15[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs((((fTemp73 + (0.831469595 * fTemp123)) + fTemp0) - ((((0.923879504 * fTemp72) + (fTemp43 + (0.382683426 * fTemp74))) + (0.555570245 * fTemp124)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((((0.923879504 * fTemp74) + self.fVec1[((self.IOTA - 8) & 31) as usize]) - (((0.555570245 * fTemp123) + ((fTemp79 + (0.382683426 * fTemp72)) + (0.831469595 * fTemp124))) + self.fVec1[((self.IOTA - 24) & 31) as usize])))))))));
			self.fVbargraph12 = ((fSlow0 + self.fRec15[0]) as f32);
			self.fRec16[0] = ((fSlow1 * self.fRec16[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((((0.707106769 * fTemp83) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - ((((fTemp85 + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize]) + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs((fTemp116 - (((((fTemp81 + (0.707106769 * fTemp83)) + self.fVec1[((self.IOTA - 6) & 31) as usize]) + self.fVec1[((self.IOTA - 22) & 31) as usize]) + self.fVec1[((self.IOTA - 14) & 31) as usize]) + self.fVec1[((self.IOTA - 30) & 31) as usize])))))))));
			self.fVbargraph13 = ((fSlow0 + self.fRec16[0]) as f32);
			let mut fTemp125: f32 = (((0.382683426 * fTemp87) + (fTemp86 + (0.923879504 * fTemp90))) - fTemp88);
			let mut fTemp126: f32 = ((self.fVec1[((self.IOTA - 1) & 31) as usize] + (0.382683426 * fTemp90)) - (fTemp94 + (0.923879504 * fTemp87)));
			self.fRec17[0] = ((fSlow1 * self.fRec17[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((0.382683426 * fTemp99) + (0.555570245 * fTemp125)) + fTemp0) - (((fTemp97 + (0.923879504 * fTemp92)) + (0.831469595 * fTemp126)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs(((((0.382683426 * fTemp92) + (fTemp43 + (0.923879504 * fTemp99))) + self.fVec1[((self.IOTA - 24) & 31) as usize]) - (((0.831469595 * fTemp125) + (fTemp100 + (0.555570245 * fTemp126))) + self.fVec1[((self.IOTA - 8) & 31) as usize])))))))));
			self.fVbargraph14 = ((fSlow0 + self.fRec17[0]) as f32);
			let mut fTemp127: f32 = ((fTemp101 + (fTemp48 + fTemp121)) - fTemp44);
			let mut fTemp128: f32 = ((fTemp60 + fTemp51) - (fTemp62 + (0.707106769 * fTemp46)));
			self.fRec18[0] = ((fSlow1 * self.fRec18[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((fTemp64 + (0.382683426 * fTemp127)) + fTemp0) + self.fVec1[((self.IOTA - 16) & 31) as usize]) - ((((0.707106769 * fTemp56) + (0.923879504 * fTemp128)) + self.fVec1[((self.IOTA - 8) & 31) as usize]) + self.fVec1[((self.IOTA - 24) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs(((((fTemp104 + fTemp120) + self.fVec1[((self.IOTA - 4) & 31) as usize]) + self.fVec1[((self.IOTA - 20) & 31) as usize]) - ((((0.923879504 * fTemp127) + (0.382683426 * fTemp128)) + self.fVec1[((self.IOTA - 12) & 31) as usize]) + self.fVec1[((self.IOTA - 28) & 31) as usize])))))))));
			self.fVbargraph15 = ((fSlow0 + self.fRec18[0]) as f32);
			let mut fTemp129: f32 = (((0.923879504 * fTemp106) + (fTemp105 + (0.382683426 * fTemp107))) - self.fVec1[((self.IOTA - 25) & 31) as usize]);
			let mut fTemp130: f32 = ((fTemp110 + (0.923879504 * fTemp107)) - (fTemp111 + (0.382683426 * fTemp106)));
			self.fRec19[0] = ((fSlow1 * self.fRec19[1]) + (fSlow2 * f32::log10(f32::max(1.00000001e-07, (mydsp_faustpower2_f(f32::abs(((((fTemp43 + (0.923879504 * fTemp114)) + (0.195090324 * fTemp129)) + fTemp0) - (((fTemp113 + (0.382683426 * fTemp109)) + (0.980785251 * fTemp130)) + self.fVec1[((self.IOTA - 16) & 31) as usize])))) + mydsp_faustpower2_f(f32::abs(((((0.923879504 * fTemp109) + (fTemp115 + (0.382683426 * fTemp114))) + self.fVec1[((self.IOTA - 8) & 31) as usize]) - (((0.980785251 * fTemp129) + (0.195090324 * fTemp130)) + self.fVec1[((self.IOTA - 24) & 31) as usize])))))))));
			self.fVbargraph16 = ((fSlow0 + self.fRec19[0]) as f32);
			outputs[0][i as usize] = (fTemp0 as f32);
			outputs[1][i as usize] = (fTemp0 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.iRec3[1] = self.iRec3[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec0[1] = self.fRec0[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[1] = self.fRec19[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

