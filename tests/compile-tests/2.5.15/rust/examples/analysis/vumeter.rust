


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fRec0: [f32;2],
	fHbargraph0: f32,
	fRec1: [f32;2],
	fHbargraph1: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fRec0: [0.0;2],
			fHbargraph0: 0.0,
			fRec1: [0.0;2],
			fHbargraph1: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "Grame");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)GRAME 2006");
		m.declare("license", "BSD");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "vumeter");
		m.declare("version", "1.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (1.0 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("vumeter");
		ui_interface.declare(&mut self.fHbargraph0, "2", "");
		ui_interface.declare(&mut self.fHbargraph0, "unit", "dB");
		ui_interface.addHorizontalBargraph("0x7fbf9ec509d0", &mut self.fHbargraph0, -70.0, 5.0);
		ui_interface.declare(&mut self.fHbargraph1, "2", "");
		ui_interface.declare(&mut self.fHbargraph1, "unit", "dB");
		ui_interface.addHorizontalBargraph("0x7fbf9ec54160", &mut self.fHbargraph1, -70.0, 5.0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			self.fRec0[0] = f32::max((self.fRec0[1] - self.fConst0), f32::abs(fTemp0));
			self.fHbargraph0 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec0[0]))) as f32);
			outputs[0][i as usize] = (fTemp0 as f32);
			let mut fTemp1: f32 = (inputs[1][i as usize] as f32);
			self.fRec1[0] = f32::max((self.fRec1[1] - self.fConst0), f32::abs(fTemp1));
			self.fHbargraph1 = ((20.0 * f32::log10(f32::max(0.000316227757, self.fRec1[0]))) as f32);
			outputs[1][i as usize] = (fTemp1 as f32);
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

