
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fCheckbox0: f32,
	iRec17: [i32;2],
	fRec16: [f32;4],
	fButton0: f32,
	fVec0: [f32;2],
	fButton1: f32,
	fVec1: [f32;2],
	fCheckbox1: f32,
	fButton2: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider1: f32,
	fHslider2: f32,
	fVslider0: f32,
	fConst3: f32,
	fHslider3: f32,
	fHslider4: f32,
	fRec23: [f32;2],
	fRec22: [f32;3],
	fVec2: [f32;2],
	fRec21: [f32;2],
	fRec20: [f32;3],
	fHslider5: f32,
	fRec19: [f32;3],
	fHslider6: f32,
	fRec18: [f32;3],
	fVslider1: f32,
	fRec28: [f32;2],
	fRec27: [f32;3],
	fVec3: [f32;2],
	fRec26: [f32;2],
	fRec25: [f32;3],
	fRec24: [f32;3],
	fVslider2: f32,
	fRec32: [f32;2],
	fRec31: [f32;3],
	fVec4: [f32;2],
	fRec30: [f32;2],
	fRec29: [f32;3],
	fVslider3: f32,
	fRec34: [f32;2],
	fRec33: [f32;3],
	fVslider4: f32,
	fRec39: [f32;2],
	fRec38: [f32;3],
	fRec37: [f32;3],
	fRec36: [f32;3],
	fRec35: [f32;3],
	fRec44: [f32;2],
	fRec43: [f32;3],
	fRec42: [f32;3],
	fRec41: [f32;3],
	fRec40: [f32;3],
	fRec50: [f32;2],
	fRec49: [f32;3],
	fVec5: [f32;2],
	fRec48: [f32;2],
	fRec47: [f32;3],
	fRec46: [f32;3],
	fRec45: [f32;3],
	fRec55: [f32;2],
	fRec54: [f32;3],
	fVec6: [f32;2],
	fRec53: [f32;2],
	fRec52: [f32;3],
	fRec51: [f32;3],
	fRec59: [f32;2],
	fRec58: [f32;3],
	fVec7: [f32;2],
	fRec57: [f32;2],
	fRec56: [f32;3],
	fRec61: [f32;2],
	fRec60: [f32;3],
	fRec66: [f32;2],
	fRec65: [f32;3],
	fRec64: [f32;3],
	fRec63: [f32;3],
	fRec62: [f32;3],
	fRec72: [f32;2],
	fRec71: [f32;3],
	fVec8: [f32;2],
	fRec70: [f32;2],
	fRec69: [f32;3],
	fRec68: [f32;3],
	fRec67: [f32;3],
	fRec77: [f32;2],
	fRec76: [f32;3],
	fVec9: [f32;2],
	fRec75: [f32;2],
	fRec74: [f32;3],
	fRec73: [f32;3],
	fRec81: [f32;2],
	fRec80: [f32;3],
	fVec10: [f32;2],
	fRec79: [f32;2],
	fRec78: [f32;3],
	fRec83: [f32;2],
	fRec82: [f32;3],
	fRec88: [f32;2],
	fRec87: [f32;3],
	fRec86: [f32;3],
	fRec85: [f32;3],
	fRec84: [f32;3],
	fRec94: [f32;2],
	fRec93: [f32;3],
	fVec11: [f32;2],
	fRec92: [f32;2],
	fRec91: [f32;3],
	fRec90: [f32;3],
	fRec89: [f32;3],
	fRec99: [f32;2],
	fRec98: [f32;3],
	fVec12: [f32;2],
	fRec97: [f32;2],
	fRec96: [f32;3],
	fRec95: [f32;3],
	fRec103: [f32;2],
	fRec102: [f32;3],
	fVec13: [f32;2],
	fRec101: [f32;2],
	fRec100: [f32;3],
	fRec105: [f32;2],
	fRec104: [f32;3],
	fRec110: [f32;2],
	fRec109: [f32;3],
	fRec108: [f32;3],
	fRec107: [f32;3],
	fRec106: [f32;3],
	fRec116: [f32;2],
	fRec115: [f32;3],
	fVec14: [f32;2],
	fRec114: [f32;2],
	fRec113: [f32;3],
	fRec112: [f32;3],
	fRec111: [f32;3],
	fRec121: [f32;2],
	fRec120: [f32;3],
	fVec15: [f32;2],
	fRec119: [f32;2],
	fRec118: [f32;3],
	fRec117: [f32;3],
	fRec125: [f32;2],
	fRec124: [f32;3],
	fVec16: [f32;2],
	fRec123: [f32;2],
	fRec122: [f32;3],
	fRec127: [f32;2],
	fRec126: [f32;3],
	fRec132: [f32;2],
	fRec131: [f32;3],
	fRec130: [f32;3],
	fRec129: [f32;3],
	fRec128: [f32;3],
	fRec138: [f32;2],
	fRec137: [f32;3],
	fVec17: [f32;2],
	fRec136: [f32;2],
	fRec135: [f32;3],
	fRec134: [f32;3],
	fRec133: [f32;3],
	fRec143: [f32;2],
	fRec142: [f32;3],
	fVec18: [f32;2],
	fRec141: [f32;2],
	fRec140: [f32;3],
	fRec139: [f32;3],
	fRec147: [f32;2],
	fRec146: [f32;3],
	fVec19: [f32;2],
	fRec145: [f32;2],
	fRec144: [f32;3],
	fRec149: [f32;2],
	fRec148: [f32;3],
	fRec154: [f32;2],
	fRec153: [f32;3],
	fRec152: [f32;3],
	fRec151: [f32;3],
	fRec150: [f32;3],
	fRec160: [f32;2],
	fRec159: [f32;3],
	fVec20: [f32;2],
	fRec158: [f32;2],
	fRec157: [f32;3],
	fRec156: [f32;3],
	fRec155: [f32;3],
	fRec165: [f32;2],
	fRec164: [f32;3],
	fVec21: [f32;2],
	fRec163: [f32;2],
	fRec162: [f32;3],
	fRec161: [f32;3],
	fRec169: [f32;2],
	fRec168: [f32;3],
	fVec22: [f32;2],
	fRec167: [f32;2],
	fRec166: [f32;3],
	fRec171: [f32;2],
	fRec170: [f32;3],
	fRec176: [f32;2],
	fRec175: [f32;3],
	fRec174: [f32;3],
	fRec173: [f32;3],
	fRec172: [f32;3],
	fRec182: [f32;2],
	fRec181: [f32;3],
	fVec23: [f32;2],
	fRec180: [f32;2],
	fRec179: [f32;3],
	fRec178: [f32;3],
	fRec177: [f32;3],
	fRec187: [f32;2],
	fRec186: [f32;3],
	fVec24: [f32;2],
	fRec185: [f32;2],
	fRec184: [f32;3],
	fRec183: [f32;3],
	fRec191: [f32;2],
	fRec190: [f32;3],
	fVec25: [f32;2],
	fRec189: [f32;2],
	fRec188: [f32;3],
	fRec193: [f32;2],
	fRec192: [f32;3],
	fRec198: [f32;2],
	fRec197: [f32;3],
	fRec196: [f32;3],
	fRec195: [f32;3],
	fRec194: [f32;3],
	fRec204: [f32;2],
	fRec203: [f32;3],
	fVec26: [f32;2],
	fRec202: [f32;2],
	fRec201: [f32;3],
	fRec200: [f32;3],
	fRec199: [f32;3],
	fRec209: [f32;2],
	fRec208: [f32;3],
	fVec27: [f32;2],
	fRec207: [f32;2],
	fRec206: [f32;3],
	fRec205: [f32;3],
	fRec213: [f32;2],
	fRec212: [f32;3],
	fVec28: [f32;2],
	fRec211: [f32;2],
	fRec210: [f32;3],
	fRec215: [f32;2],
	fRec214: [f32;3],
	fRec220: [f32;2],
	fRec219: [f32;3],
	fRec218: [f32;3],
	fRec217: [f32;3],
	fRec216: [f32;3],
	fRec226: [f32;2],
	fRec225: [f32;3],
	fVec29: [f32;2],
	fRec224: [f32;2],
	fRec223: [f32;3],
	fRec222: [f32;3],
	fRec221: [f32;3],
	fRec231: [f32;2],
	fRec230: [f32;3],
	fVec30: [f32;2],
	fRec229: [f32;2],
	fRec228: [f32;3],
	fRec227: [f32;3],
	fRec235: [f32;2],
	fRec234: [f32;3],
	fVec31: [f32;2],
	fRec233: [f32;2],
	fRec232: [f32;3],
	fRec237: [f32;2],
	fRec236: [f32;3],
	fRec242: [f32;2],
	fRec241: [f32;3],
	fRec240: [f32;3],
	fRec239: [f32;3],
	fRec238: [f32;3],
	fRec248: [f32;2],
	fRec247: [f32;3],
	fVec32: [f32;2],
	fRec246: [f32;2],
	fRec245: [f32;3],
	fRec244: [f32;3],
	fRec243: [f32;3],
	fRec253: [f32;2],
	fRec252: [f32;3],
	fVec33: [f32;2],
	fRec251: [f32;2],
	fRec250: [f32;3],
	fRec249: [f32;3],
	fRec257: [f32;2],
	fRec256: [f32;3],
	fVec34: [f32;2],
	fRec255: [f32;2],
	fRec254: [f32;3],
	fRec259: [f32;2],
	fRec258: [f32;3],
	fRec264: [f32;2],
	fRec263: [f32;3],
	fRec262: [f32;3],
	fRec261: [f32;3],
	fRec260: [f32;3],
	fRec270: [f32;2],
	fRec269: [f32;3],
	fVec35: [f32;2],
	fRec268: [f32;2],
	fRec267: [f32;3],
	fRec266: [f32;3],
	fRec265: [f32;3],
	fRec275: [f32;2],
	fRec274: [f32;3],
	fVec36: [f32;2],
	fRec273: [f32;2],
	fRec272: [f32;3],
	fRec271: [f32;3],
	fRec279: [f32;2],
	fRec278: [f32;3],
	fVec37: [f32;2],
	fRec277: [f32;2],
	fRec276: [f32;3],
	fRec281: [f32;2],
	fRec280: [f32;3],
	fRec286: [f32;2],
	fRec285: [f32;3],
	fRec284: [f32;3],
	fRec283: [f32;3],
	fRec282: [f32;3],
	fRec292: [f32;2],
	fRec291: [f32;3],
	fVec38: [f32;2],
	fRec290: [f32;2],
	fRec289: [f32;3],
	fRec288: [f32;3],
	fRec287: [f32;3],
	fRec297: [f32;2],
	fRec296: [f32;3],
	fVec39: [f32;2],
	fRec295: [f32;2],
	fRec294: [f32;3],
	fRec293: [f32;3],
	fRec301: [f32;2],
	fRec300: [f32;3],
	fVec40: [f32;2],
	fRec299: [f32;2],
	fRec298: [f32;3],
	fRec303: [f32;2],
	fRec302: [f32;3],
	fRec308: [f32;2],
	fRec307: [f32;3],
	fRec306: [f32;3],
	fRec305: [f32;3],
	fRec304: [f32;3],
	fRec314: [f32;2],
	fRec313: [f32;3],
	fVec41: [f32;2],
	fRec312: [f32;2],
	fRec311: [f32;3],
	fRec310: [f32;3],
	fRec309: [f32;3],
	fRec319: [f32;2],
	fRec318: [f32;3],
	fVec42: [f32;2],
	fRec317: [f32;2],
	fRec316: [f32;3],
	fRec315: [f32;3],
	fRec323: [f32;2],
	fRec322: [f32;3],
	fVec43: [f32;2],
	fRec321: [f32;2],
	fRec320: [f32;3],
	fRec325: [f32;2],
	fRec324: [f32;3],
	fRec330: [f32;2],
	fRec329: [f32;3],
	fRec328: [f32;3],
	fRec327: [f32;3],
	fRec326: [f32;3],
	fRec336: [f32;2],
	fRec335: [f32;3],
	fVec44: [f32;2],
	fRec334: [f32;2],
	fRec333: [f32;3],
	fRec332: [f32;3],
	fRec331: [f32;3],
	fRec341: [f32;2],
	fRec340: [f32;3],
	fVec45: [f32;2],
	fRec339: [f32;2],
	fRec338: [f32;3],
	fRec337: [f32;3],
	fRec345: [f32;2],
	fRec344: [f32;3],
	fVec46: [f32;2],
	fRec343: [f32;2],
	fRec342: [f32;3],
	fRec347: [f32;2],
	fRec346: [f32;3],
	fRec352: [f32;2],
	fRec351: [f32;3],
	fRec350: [f32;3],
	fRec349: [f32;3],
	fRec348: [f32;3],
	fRec358: [f32;2],
	fRec357: [f32;3],
	fVec47: [f32;2],
	fRec356: [f32;2],
	fRec355: [f32;3],
	fRec354: [f32;3],
	fRec353: [f32;3],
	fRec363: [f32;2],
	fRec362: [f32;3],
	fVec48: [f32;2],
	fRec361: [f32;2],
	fRec360: [f32;3],
	fRec359: [f32;3],
	fRec367: [f32;2],
	fRec366: [f32;3],
	fVec49: [f32;2],
	fRec365: [f32;2],
	fRec364: [f32;3],
	fRec369: [f32;2],
	fRec368: [f32;3],
	IOTA: i32,
	fVec50: [f32;16384],
	fRec0: [f32;3],
	fButton3: f32,
	fVec51: [f32;2],
	fVec52: [f32;16384],
	fRec1: [f32;3],
	fVec53: [f32;16384],
	fRec2: [f32;3],
	fVec54: [f32;16384],
	fRec3: [f32;3],
	fVec55: [f32;16384],
	fRec4: [f32;3],
	fVec56: [f32;16384],
	fRec5: [f32;3],
	fVec57: [f32;16384],
	fRec6: [f32;3],
	fVec58: [f32;16384],
	fRec7: [f32;3],
	fVec59: [f32;16384],
	fRec8: [f32;3],
	fVec60: [f32;16384],
	fRec9: [f32;3],
	fVec61: [f32;16384],
	fRec10: [f32;3],
	fVec62: [f32;16384],
	fRec11: [f32;3],
	fVec63: [f32;16384],
	fRec12: [f32;3],
	fVec64: [f32;16384],
	fRec13: [f32;3],
	fVec65: [f32;16384],
	fRec14: [f32;3],
	fVec66: [f32;16384],
	fRec15: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fCheckbox0: 0.0,
			iRec17: [0;2],
			fRec16: [0.0;4],
			fButton0: 0.0,
			fVec0: [0.0;2],
			fButton1: 0.0,
			fVec1: [0.0;2],
			fCheckbox1: 0.0,
			fButton2: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fVslider0: 0.0,
			fConst3: 0.0,
			fHslider3: 0.0,
			fHslider4: 0.0,
			fRec23: [0.0;2],
			fRec22: [0.0;3],
			fVec2: [0.0;2],
			fRec21: [0.0;2],
			fRec20: [0.0;3],
			fHslider5: 0.0,
			fRec19: [0.0;3],
			fHslider6: 0.0,
			fRec18: [0.0;3],
			fVslider1: 0.0,
			fRec28: [0.0;2],
			fRec27: [0.0;3],
			fVec3: [0.0;2],
			fRec26: [0.0;2],
			fRec25: [0.0;3],
			fRec24: [0.0;3],
			fVslider2: 0.0,
			fRec32: [0.0;2],
			fRec31: [0.0;3],
			fVec4: [0.0;2],
			fRec30: [0.0;2],
			fRec29: [0.0;3],
			fVslider3: 0.0,
			fRec34: [0.0;2],
			fRec33: [0.0;3],
			fVslider4: 0.0,
			fRec39: [0.0;2],
			fRec38: [0.0;3],
			fRec37: [0.0;3],
			fRec36: [0.0;3],
			fRec35: [0.0;3],
			fRec44: [0.0;2],
			fRec43: [0.0;3],
			fRec42: [0.0;3],
			fRec41: [0.0;3],
			fRec40: [0.0;3],
			fRec50: [0.0;2],
			fRec49: [0.0;3],
			fVec5: [0.0;2],
			fRec48: [0.0;2],
			fRec47: [0.0;3],
			fRec46: [0.0;3],
			fRec45: [0.0;3],
			fRec55: [0.0;2],
			fRec54: [0.0;3],
			fVec6: [0.0;2],
			fRec53: [0.0;2],
			fRec52: [0.0;3],
			fRec51: [0.0;3],
			fRec59: [0.0;2],
			fRec58: [0.0;3],
			fVec7: [0.0;2],
			fRec57: [0.0;2],
			fRec56: [0.0;3],
			fRec61: [0.0;2],
			fRec60: [0.0;3],
			fRec66: [0.0;2],
			fRec65: [0.0;3],
			fRec64: [0.0;3],
			fRec63: [0.0;3],
			fRec62: [0.0;3],
			fRec72: [0.0;2],
			fRec71: [0.0;3],
			fVec8: [0.0;2],
			fRec70: [0.0;2],
			fRec69: [0.0;3],
			fRec68: [0.0;3],
			fRec67: [0.0;3],
			fRec77: [0.0;2],
			fRec76: [0.0;3],
			fVec9: [0.0;2],
			fRec75: [0.0;2],
			fRec74: [0.0;3],
			fRec73: [0.0;3],
			fRec81: [0.0;2],
			fRec80: [0.0;3],
			fVec10: [0.0;2],
			fRec79: [0.0;2],
			fRec78: [0.0;3],
			fRec83: [0.0;2],
			fRec82: [0.0;3],
			fRec88: [0.0;2],
			fRec87: [0.0;3],
			fRec86: [0.0;3],
			fRec85: [0.0;3],
			fRec84: [0.0;3],
			fRec94: [0.0;2],
			fRec93: [0.0;3],
			fVec11: [0.0;2],
			fRec92: [0.0;2],
			fRec91: [0.0;3],
			fRec90: [0.0;3],
			fRec89: [0.0;3],
			fRec99: [0.0;2],
			fRec98: [0.0;3],
			fVec12: [0.0;2],
			fRec97: [0.0;2],
			fRec96: [0.0;3],
			fRec95: [0.0;3],
			fRec103: [0.0;2],
			fRec102: [0.0;3],
			fVec13: [0.0;2],
			fRec101: [0.0;2],
			fRec100: [0.0;3],
			fRec105: [0.0;2],
			fRec104: [0.0;3],
			fRec110: [0.0;2],
			fRec109: [0.0;3],
			fRec108: [0.0;3],
			fRec107: [0.0;3],
			fRec106: [0.0;3],
			fRec116: [0.0;2],
			fRec115: [0.0;3],
			fVec14: [0.0;2],
			fRec114: [0.0;2],
			fRec113: [0.0;3],
			fRec112: [0.0;3],
			fRec111: [0.0;3],
			fRec121: [0.0;2],
			fRec120: [0.0;3],
			fVec15: [0.0;2],
			fRec119: [0.0;2],
			fRec118: [0.0;3],
			fRec117: [0.0;3],
			fRec125: [0.0;2],
			fRec124: [0.0;3],
			fVec16: [0.0;2],
			fRec123: [0.0;2],
			fRec122: [0.0;3],
			fRec127: [0.0;2],
			fRec126: [0.0;3],
			fRec132: [0.0;2],
			fRec131: [0.0;3],
			fRec130: [0.0;3],
			fRec129: [0.0;3],
			fRec128: [0.0;3],
			fRec138: [0.0;2],
			fRec137: [0.0;3],
			fVec17: [0.0;2],
			fRec136: [0.0;2],
			fRec135: [0.0;3],
			fRec134: [0.0;3],
			fRec133: [0.0;3],
			fRec143: [0.0;2],
			fRec142: [0.0;3],
			fVec18: [0.0;2],
			fRec141: [0.0;2],
			fRec140: [0.0;3],
			fRec139: [0.0;3],
			fRec147: [0.0;2],
			fRec146: [0.0;3],
			fVec19: [0.0;2],
			fRec145: [0.0;2],
			fRec144: [0.0;3],
			fRec149: [0.0;2],
			fRec148: [0.0;3],
			fRec154: [0.0;2],
			fRec153: [0.0;3],
			fRec152: [0.0;3],
			fRec151: [0.0;3],
			fRec150: [0.0;3],
			fRec160: [0.0;2],
			fRec159: [0.0;3],
			fVec20: [0.0;2],
			fRec158: [0.0;2],
			fRec157: [0.0;3],
			fRec156: [0.0;3],
			fRec155: [0.0;3],
			fRec165: [0.0;2],
			fRec164: [0.0;3],
			fVec21: [0.0;2],
			fRec163: [0.0;2],
			fRec162: [0.0;3],
			fRec161: [0.0;3],
			fRec169: [0.0;2],
			fRec168: [0.0;3],
			fVec22: [0.0;2],
			fRec167: [0.0;2],
			fRec166: [0.0;3],
			fRec171: [0.0;2],
			fRec170: [0.0;3],
			fRec176: [0.0;2],
			fRec175: [0.0;3],
			fRec174: [0.0;3],
			fRec173: [0.0;3],
			fRec172: [0.0;3],
			fRec182: [0.0;2],
			fRec181: [0.0;3],
			fVec23: [0.0;2],
			fRec180: [0.0;2],
			fRec179: [0.0;3],
			fRec178: [0.0;3],
			fRec177: [0.0;3],
			fRec187: [0.0;2],
			fRec186: [0.0;3],
			fVec24: [0.0;2],
			fRec185: [0.0;2],
			fRec184: [0.0;3],
			fRec183: [0.0;3],
			fRec191: [0.0;2],
			fRec190: [0.0;3],
			fVec25: [0.0;2],
			fRec189: [0.0;2],
			fRec188: [0.0;3],
			fRec193: [0.0;2],
			fRec192: [0.0;3],
			fRec198: [0.0;2],
			fRec197: [0.0;3],
			fRec196: [0.0;3],
			fRec195: [0.0;3],
			fRec194: [0.0;3],
			fRec204: [0.0;2],
			fRec203: [0.0;3],
			fVec26: [0.0;2],
			fRec202: [0.0;2],
			fRec201: [0.0;3],
			fRec200: [0.0;3],
			fRec199: [0.0;3],
			fRec209: [0.0;2],
			fRec208: [0.0;3],
			fVec27: [0.0;2],
			fRec207: [0.0;2],
			fRec206: [0.0;3],
			fRec205: [0.0;3],
			fRec213: [0.0;2],
			fRec212: [0.0;3],
			fVec28: [0.0;2],
			fRec211: [0.0;2],
			fRec210: [0.0;3],
			fRec215: [0.0;2],
			fRec214: [0.0;3],
			fRec220: [0.0;2],
			fRec219: [0.0;3],
			fRec218: [0.0;3],
			fRec217: [0.0;3],
			fRec216: [0.0;3],
			fRec226: [0.0;2],
			fRec225: [0.0;3],
			fVec29: [0.0;2],
			fRec224: [0.0;2],
			fRec223: [0.0;3],
			fRec222: [0.0;3],
			fRec221: [0.0;3],
			fRec231: [0.0;2],
			fRec230: [0.0;3],
			fVec30: [0.0;2],
			fRec229: [0.0;2],
			fRec228: [0.0;3],
			fRec227: [0.0;3],
			fRec235: [0.0;2],
			fRec234: [0.0;3],
			fVec31: [0.0;2],
			fRec233: [0.0;2],
			fRec232: [0.0;3],
			fRec237: [0.0;2],
			fRec236: [0.0;3],
			fRec242: [0.0;2],
			fRec241: [0.0;3],
			fRec240: [0.0;3],
			fRec239: [0.0;3],
			fRec238: [0.0;3],
			fRec248: [0.0;2],
			fRec247: [0.0;3],
			fVec32: [0.0;2],
			fRec246: [0.0;2],
			fRec245: [0.0;3],
			fRec244: [0.0;3],
			fRec243: [0.0;3],
			fRec253: [0.0;2],
			fRec252: [0.0;3],
			fVec33: [0.0;2],
			fRec251: [0.0;2],
			fRec250: [0.0;3],
			fRec249: [0.0;3],
			fRec257: [0.0;2],
			fRec256: [0.0;3],
			fVec34: [0.0;2],
			fRec255: [0.0;2],
			fRec254: [0.0;3],
			fRec259: [0.0;2],
			fRec258: [0.0;3],
			fRec264: [0.0;2],
			fRec263: [0.0;3],
			fRec262: [0.0;3],
			fRec261: [0.0;3],
			fRec260: [0.0;3],
			fRec270: [0.0;2],
			fRec269: [0.0;3],
			fVec35: [0.0;2],
			fRec268: [0.0;2],
			fRec267: [0.0;3],
			fRec266: [0.0;3],
			fRec265: [0.0;3],
			fRec275: [0.0;2],
			fRec274: [0.0;3],
			fVec36: [0.0;2],
			fRec273: [0.0;2],
			fRec272: [0.0;3],
			fRec271: [0.0;3],
			fRec279: [0.0;2],
			fRec278: [0.0;3],
			fVec37: [0.0;2],
			fRec277: [0.0;2],
			fRec276: [0.0;3],
			fRec281: [0.0;2],
			fRec280: [0.0;3],
			fRec286: [0.0;2],
			fRec285: [0.0;3],
			fRec284: [0.0;3],
			fRec283: [0.0;3],
			fRec282: [0.0;3],
			fRec292: [0.0;2],
			fRec291: [0.0;3],
			fVec38: [0.0;2],
			fRec290: [0.0;2],
			fRec289: [0.0;3],
			fRec288: [0.0;3],
			fRec287: [0.0;3],
			fRec297: [0.0;2],
			fRec296: [0.0;3],
			fVec39: [0.0;2],
			fRec295: [0.0;2],
			fRec294: [0.0;3],
			fRec293: [0.0;3],
			fRec301: [0.0;2],
			fRec300: [0.0;3],
			fVec40: [0.0;2],
			fRec299: [0.0;2],
			fRec298: [0.0;3],
			fRec303: [0.0;2],
			fRec302: [0.0;3],
			fRec308: [0.0;2],
			fRec307: [0.0;3],
			fRec306: [0.0;3],
			fRec305: [0.0;3],
			fRec304: [0.0;3],
			fRec314: [0.0;2],
			fRec313: [0.0;3],
			fVec41: [0.0;2],
			fRec312: [0.0;2],
			fRec311: [0.0;3],
			fRec310: [0.0;3],
			fRec309: [0.0;3],
			fRec319: [0.0;2],
			fRec318: [0.0;3],
			fVec42: [0.0;2],
			fRec317: [0.0;2],
			fRec316: [0.0;3],
			fRec315: [0.0;3],
			fRec323: [0.0;2],
			fRec322: [0.0;3],
			fVec43: [0.0;2],
			fRec321: [0.0;2],
			fRec320: [0.0;3],
			fRec325: [0.0;2],
			fRec324: [0.0;3],
			fRec330: [0.0;2],
			fRec329: [0.0;3],
			fRec328: [0.0;3],
			fRec327: [0.0;3],
			fRec326: [0.0;3],
			fRec336: [0.0;2],
			fRec335: [0.0;3],
			fVec44: [0.0;2],
			fRec334: [0.0;2],
			fRec333: [0.0;3],
			fRec332: [0.0;3],
			fRec331: [0.0;3],
			fRec341: [0.0;2],
			fRec340: [0.0;3],
			fVec45: [0.0;2],
			fRec339: [0.0;2],
			fRec338: [0.0;3],
			fRec337: [0.0;3],
			fRec345: [0.0;2],
			fRec344: [0.0;3],
			fVec46: [0.0;2],
			fRec343: [0.0;2],
			fRec342: [0.0;3],
			fRec347: [0.0;2],
			fRec346: [0.0;3],
			fRec352: [0.0;2],
			fRec351: [0.0;3],
			fRec350: [0.0;3],
			fRec349: [0.0;3],
			fRec348: [0.0;3],
			fRec358: [0.0;2],
			fRec357: [0.0;3],
			fVec47: [0.0;2],
			fRec356: [0.0;2],
			fRec355: [0.0;3],
			fRec354: [0.0;3],
			fRec353: [0.0;3],
			fRec363: [0.0;2],
			fRec362: [0.0;3],
			fVec48: [0.0;2],
			fRec361: [0.0;2],
			fRec360: [0.0;3],
			fRec359: [0.0;3],
			fRec367: [0.0;2],
			fRec366: [0.0;3],
			fVec49: [0.0;2],
			fRec365: [0.0;2],
			fRec364: [0.0;3],
			fRec369: [0.0;2],
			fRec368: [0.0;3],
			IOTA: 0,
			fVec50: [0.0;16384],
			fRec0: [0.0;3],
			fButton3: 0.0,
			fVec51: [0.0;2],
			fVec52: [0.0;16384],
			fRec1: [0.0;3],
			fVec53: [0.0;16384],
			fRec2: [0.0;3],
			fVec54: [0.0;16384],
			fRec3: [0.0;3],
			fVec55: [0.0;16384],
			fRec4: [0.0;3],
			fVec56: [0.0;16384],
			fRec5: [0.0;3],
			fVec57: [0.0;16384],
			fRec6: [0.0;3],
			fVec58: [0.0;16384],
			fRec7: [0.0;3],
			fVec59: [0.0;16384],
			fRec8: [0.0;3],
			fVec60: [0.0;16384],
			fRec9: [0.0;3],
			fVec61: [0.0;16384],
			fRec10: [0.0;3],
			fVec62: [0.0;16384],
			fRec11: [0.0;3],
			fVec63: [0.0;16384],
			fRec12: [0.0;3],
			fVec64: [0.0;16384],
			fRec13: [0.0;3],
			fVec65: [0.0;16384],
			fRec14: [0.0;3],
			fVec66: [0.0;16384],
			fRec15: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("author", "JOS, Revised by RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "A feedback delay network reverb.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "fdnRev");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("reverbs.lib/name", "Faust Reverb Library");
		m.declare("reverbs.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		4
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			1 => {
				rate = 0;
				
			},
			2 => {
				rate = 1;
				
			},
			3 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = -40.0;
		self.fCheckbox0 = 0.0;
		self.fButton0 = 0.0;
		self.fButton1 = 0.0;
		self.fCheckbox1 = 0.0;
		self.fButton2 = 0.0;
		self.fHslider1 = 46.0;
		self.fHslider2 = 63.0;
		self.fVslider0 = 3.79999995;
		self.fHslider3 = 2000.0;
		self.fHslider4 = 4000.0;
		self.fHslider5 = 1000.0;
		self.fHslider6 = 500.0;
		self.fVslider1 = 5.0;
		self.fVslider2 = 6.5;
		self.fVslider3 = 8.39999962;
		self.fVslider4 = 2.70000005;
		self.fButton3 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec17[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec16[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 4) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec23[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec22[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 3) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fVec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec21[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec20[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec19[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec18[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec28[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec27[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fVec3[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec26[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec25[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec24[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec32[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec31[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fVec4[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec30[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec29[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec34[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec33[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec39[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec38[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec37[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec36[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec35[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 3) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec44[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec43[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 3) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec42[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec41[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 3) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec40[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 3) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec50[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec49[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec5[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec48[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec47[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 3) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec46[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec45[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec55[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec54[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 3) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fVec6[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec53[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec52[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 3) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec51[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 3) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec59[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec58[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fVec7[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec57[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec56[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec61[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 2) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec60[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 3) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec66[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 2) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec65[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec64[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 3) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec63[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 3) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec62[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 3) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec72[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fRec71[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 3) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fVec8[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec70[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec69[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 3) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec68[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 3) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec67[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 3) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fRec77[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec76[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 3) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fVec9[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 2) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec75[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 2) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fRec74[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 3) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec73[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 3) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.fRec81[l72 as usize] = 0.0;
			l72 = (l72 + 1);
			if (l72 < 2) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.fRec80[l73 as usize] = 0.0;
			l73 = (l73 + 1);
			if (l73 < 3) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fVec10[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 2) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec79[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 2) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.fRec78[l76 as usize] = 0.0;
			l76 = (l76 + 1);
			if (l76 < 3) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fRec83[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 2) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec82[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 3) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec88[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 2) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.fRec87[l80 as usize] = 0.0;
			l80 = (l80 + 1);
			if (l80 < 3) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fRec86[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 3) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec85[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 3) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.fRec84[l83 as usize] = 0.0;
			l83 = (l83 + 1);
			if (l83 < 3) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.fRec94[l84 as usize] = 0.0;
			l84 = (l84 + 1);
			if (l84 < 2) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec93[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 3) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.fVec11[l86 as usize] = 0.0;
			l86 = (l86 + 1);
			if (l86 < 2) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec92[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 2) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.fRec91[l88 as usize] = 0.0;
			l88 = (l88 + 1);
			if (l88 < 3) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec90[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 3) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.fRec89[l90 as usize] = 0.0;
			l90 = (l90 + 1);
			if (l90 < 3) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fRec99[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 2) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.fRec98[l92 as usize] = 0.0;
			l92 = (l92 + 1);
			if (l92 < 3) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fVec12[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 2) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fRec97[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 2) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec96[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 3) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.fRec95[l96 as usize] = 0.0;
			l96 = (l96 + 1);
			if (l96 < 3) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec103[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 2) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec102[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 3) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fVec13[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 2) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.fRec101[l100 as usize] = 0.0;
			l100 = (l100 + 1);
			if (l100 < 2) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec100[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 3) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec105[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 2) { continue; } else { break; }
		}
		let mut l103: i32 = 0;
		loop {
			self.fRec104[l103 as usize] = 0.0;
			l103 = (l103 + 1);
			if (l103 < 3) { continue; } else { break; }
		}
		let mut l104: i32 = 0;
		loop {
			self.fRec110[l104 as usize] = 0.0;
			l104 = (l104 + 1);
			if (l104 < 2) { continue; } else { break; }
		}
		let mut l105: i32 = 0;
		loop {
			self.fRec109[l105 as usize] = 0.0;
			l105 = (l105 + 1);
			if (l105 < 3) { continue; } else { break; }
		}
		let mut l106: i32 = 0;
		loop {
			self.fRec108[l106 as usize] = 0.0;
			l106 = (l106 + 1);
			if (l106 < 3) { continue; } else { break; }
		}
		let mut l107: i32 = 0;
		loop {
			self.fRec107[l107 as usize] = 0.0;
			l107 = (l107 + 1);
			if (l107 < 3) { continue; } else { break; }
		}
		let mut l108: i32 = 0;
		loop {
			self.fRec106[l108 as usize] = 0.0;
			l108 = (l108 + 1);
			if (l108 < 3) { continue; } else { break; }
		}
		let mut l109: i32 = 0;
		loop {
			self.fRec116[l109 as usize] = 0.0;
			l109 = (l109 + 1);
			if (l109 < 2) { continue; } else { break; }
		}
		let mut l110: i32 = 0;
		loop {
			self.fRec115[l110 as usize] = 0.0;
			l110 = (l110 + 1);
			if (l110 < 3) { continue; } else { break; }
		}
		let mut l111: i32 = 0;
		loop {
			self.fVec14[l111 as usize] = 0.0;
			l111 = (l111 + 1);
			if (l111 < 2) { continue; } else { break; }
		}
		let mut l112: i32 = 0;
		loop {
			self.fRec114[l112 as usize] = 0.0;
			l112 = (l112 + 1);
			if (l112 < 2) { continue; } else { break; }
		}
		let mut l113: i32 = 0;
		loop {
			self.fRec113[l113 as usize] = 0.0;
			l113 = (l113 + 1);
			if (l113 < 3) { continue; } else { break; }
		}
		let mut l114: i32 = 0;
		loop {
			self.fRec112[l114 as usize] = 0.0;
			l114 = (l114 + 1);
			if (l114 < 3) { continue; } else { break; }
		}
		let mut l115: i32 = 0;
		loop {
			self.fRec111[l115 as usize] = 0.0;
			l115 = (l115 + 1);
			if (l115 < 3) { continue; } else { break; }
		}
		let mut l116: i32 = 0;
		loop {
			self.fRec121[l116 as usize] = 0.0;
			l116 = (l116 + 1);
			if (l116 < 2) { continue; } else { break; }
		}
		let mut l117: i32 = 0;
		loop {
			self.fRec120[l117 as usize] = 0.0;
			l117 = (l117 + 1);
			if (l117 < 3) { continue; } else { break; }
		}
		let mut l118: i32 = 0;
		loop {
			self.fVec15[l118 as usize] = 0.0;
			l118 = (l118 + 1);
			if (l118 < 2) { continue; } else { break; }
		}
		let mut l119: i32 = 0;
		loop {
			self.fRec119[l119 as usize] = 0.0;
			l119 = (l119 + 1);
			if (l119 < 2) { continue; } else { break; }
		}
		let mut l120: i32 = 0;
		loop {
			self.fRec118[l120 as usize] = 0.0;
			l120 = (l120 + 1);
			if (l120 < 3) { continue; } else { break; }
		}
		let mut l121: i32 = 0;
		loop {
			self.fRec117[l121 as usize] = 0.0;
			l121 = (l121 + 1);
			if (l121 < 3) { continue; } else { break; }
		}
		let mut l122: i32 = 0;
		loop {
			self.fRec125[l122 as usize] = 0.0;
			l122 = (l122 + 1);
			if (l122 < 2) { continue; } else { break; }
		}
		let mut l123: i32 = 0;
		loop {
			self.fRec124[l123 as usize] = 0.0;
			l123 = (l123 + 1);
			if (l123 < 3) { continue; } else { break; }
		}
		let mut l124: i32 = 0;
		loop {
			self.fVec16[l124 as usize] = 0.0;
			l124 = (l124 + 1);
			if (l124 < 2) { continue; } else { break; }
		}
		let mut l125: i32 = 0;
		loop {
			self.fRec123[l125 as usize] = 0.0;
			l125 = (l125 + 1);
			if (l125 < 2) { continue; } else { break; }
		}
		let mut l126: i32 = 0;
		loop {
			self.fRec122[l126 as usize] = 0.0;
			l126 = (l126 + 1);
			if (l126 < 3) { continue; } else { break; }
		}
		let mut l127: i32 = 0;
		loop {
			self.fRec127[l127 as usize] = 0.0;
			l127 = (l127 + 1);
			if (l127 < 2) { continue; } else { break; }
		}
		let mut l128: i32 = 0;
		loop {
			self.fRec126[l128 as usize] = 0.0;
			l128 = (l128 + 1);
			if (l128 < 3) { continue; } else { break; }
		}
		let mut l129: i32 = 0;
		loop {
			self.fRec132[l129 as usize] = 0.0;
			l129 = (l129 + 1);
			if (l129 < 2) { continue; } else { break; }
		}
		let mut l130: i32 = 0;
		loop {
			self.fRec131[l130 as usize] = 0.0;
			l130 = (l130 + 1);
			if (l130 < 3) { continue; } else { break; }
		}
		let mut l131: i32 = 0;
		loop {
			self.fRec130[l131 as usize] = 0.0;
			l131 = (l131 + 1);
			if (l131 < 3) { continue; } else { break; }
		}
		let mut l132: i32 = 0;
		loop {
			self.fRec129[l132 as usize] = 0.0;
			l132 = (l132 + 1);
			if (l132 < 3) { continue; } else { break; }
		}
		let mut l133: i32 = 0;
		loop {
			self.fRec128[l133 as usize] = 0.0;
			l133 = (l133 + 1);
			if (l133 < 3) { continue; } else { break; }
		}
		let mut l134: i32 = 0;
		loop {
			self.fRec138[l134 as usize] = 0.0;
			l134 = (l134 + 1);
			if (l134 < 2) { continue; } else { break; }
		}
		let mut l135: i32 = 0;
		loop {
			self.fRec137[l135 as usize] = 0.0;
			l135 = (l135 + 1);
			if (l135 < 3) { continue; } else { break; }
		}
		let mut l136: i32 = 0;
		loop {
			self.fVec17[l136 as usize] = 0.0;
			l136 = (l136 + 1);
			if (l136 < 2) { continue; } else { break; }
		}
		let mut l137: i32 = 0;
		loop {
			self.fRec136[l137 as usize] = 0.0;
			l137 = (l137 + 1);
			if (l137 < 2) { continue; } else { break; }
		}
		let mut l138: i32 = 0;
		loop {
			self.fRec135[l138 as usize] = 0.0;
			l138 = (l138 + 1);
			if (l138 < 3) { continue; } else { break; }
		}
		let mut l139: i32 = 0;
		loop {
			self.fRec134[l139 as usize] = 0.0;
			l139 = (l139 + 1);
			if (l139 < 3) { continue; } else { break; }
		}
		let mut l140: i32 = 0;
		loop {
			self.fRec133[l140 as usize] = 0.0;
			l140 = (l140 + 1);
			if (l140 < 3) { continue; } else { break; }
		}
		let mut l141: i32 = 0;
		loop {
			self.fRec143[l141 as usize] = 0.0;
			l141 = (l141 + 1);
			if (l141 < 2) { continue; } else { break; }
		}
		let mut l142: i32 = 0;
		loop {
			self.fRec142[l142 as usize] = 0.0;
			l142 = (l142 + 1);
			if (l142 < 3) { continue; } else { break; }
		}
		let mut l143: i32 = 0;
		loop {
			self.fVec18[l143 as usize] = 0.0;
			l143 = (l143 + 1);
			if (l143 < 2) { continue; } else { break; }
		}
		let mut l144: i32 = 0;
		loop {
			self.fRec141[l144 as usize] = 0.0;
			l144 = (l144 + 1);
			if (l144 < 2) { continue; } else { break; }
		}
		let mut l145: i32 = 0;
		loop {
			self.fRec140[l145 as usize] = 0.0;
			l145 = (l145 + 1);
			if (l145 < 3) { continue; } else { break; }
		}
		let mut l146: i32 = 0;
		loop {
			self.fRec139[l146 as usize] = 0.0;
			l146 = (l146 + 1);
			if (l146 < 3) { continue; } else { break; }
		}
		let mut l147: i32 = 0;
		loop {
			self.fRec147[l147 as usize] = 0.0;
			l147 = (l147 + 1);
			if (l147 < 2) { continue; } else { break; }
		}
		let mut l148: i32 = 0;
		loop {
			self.fRec146[l148 as usize] = 0.0;
			l148 = (l148 + 1);
			if (l148 < 3) { continue; } else { break; }
		}
		let mut l149: i32 = 0;
		loop {
			self.fVec19[l149 as usize] = 0.0;
			l149 = (l149 + 1);
			if (l149 < 2) { continue; } else { break; }
		}
		let mut l150: i32 = 0;
		loop {
			self.fRec145[l150 as usize] = 0.0;
			l150 = (l150 + 1);
			if (l150 < 2) { continue; } else { break; }
		}
		let mut l151: i32 = 0;
		loop {
			self.fRec144[l151 as usize] = 0.0;
			l151 = (l151 + 1);
			if (l151 < 3) { continue; } else { break; }
		}
		let mut l152: i32 = 0;
		loop {
			self.fRec149[l152 as usize] = 0.0;
			l152 = (l152 + 1);
			if (l152 < 2) { continue; } else { break; }
		}
		let mut l153: i32 = 0;
		loop {
			self.fRec148[l153 as usize] = 0.0;
			l153 = (l153 + 1);
			if (l153 < 3) { continue; } else { break; }
		}
		let mut l154: i32 = 0;
		loop {
			self.fRec154[l154 as usize] = 0.0;
			l154 = (l154 + 1);
			if (l154 < 2) { continue; } else { break; }
		}
		let mut l155: i32 = 0;
		loop {
			self.fRec153[l155 as usize] = 0.0;
			l155 = (l155 + 1);
			if (l155 < 3) { continue; } else { break; }
		}
		let mut l156: i32 = 0;
		loop {
			self.fRec152[l156 as usize] = 0.0;
			l156 = (l156 + 1);
			if (l156 < 3) { continue; } else { break; }
		}
		let mut l157: i32 = 0;
		loop {
			self.fRec151[l157 as usize] = 0.0;
			l157 = (l157 + 1);
			if (l157 < 3) { continue; } else { break; }
		}
		let mut l158: i32 = 0;
		loop {
			self.fRec150[l158 as usize] = 0.0;
			l158 = (l158 + 1);
			if (l158 < 3) { continue; } else { break; }
		}
		let mut l159: i32 = 0;
		loop {
			self.fRec160[l159 as usize] = 0.0;
			l159 = (l159 + 1);
			if (l159 < 2) { continue; } else { break; }
		}
		let mut l160: i32 = 0;
		loop {
			self.fRec159[l160 as usize] = 0.0;
			l160 = (l160 + 1);
			if (l160 < 3) { continue; } else { break; }
		}
		let mut l161: i32 = 0;
		loop {
			self.fVec20[l161 as usize] = 0.0;
			l161 = (l161 + 1);
			if (l161 < 2) { continue; } else { break; }
		}
		let mut l162: i32 = 0;
		loop {
			self.fRec158[l162 as usize] = 0.0;
			l162 = (l162 + 1);
			if (l162 < 2) { continue; } else { break; }
		}
		let mut l163: i32 = 0;
		loop {
			self.fRec157[l163 as usize] = 0.0;
			l163 = (l163 + 1);
			if (l163 < 3) { continue; } else { break; }
		}
		let mut l164: i32 = 0;
		loop {
			self.fRec156[l164 as usize] = 0.0;
			l164 = (l164 + 1);
			if (l164 < 3) { continue; } else { break; }
		}
		let mut l165: i32 = 0;
		loop {
			self.fRec155[l165 as usize] = 0.0;
			l165 = (l165 + 1);
			if (l165 < 3) { continue; } else { break; }
		}
		let mut l166: i32 = 0;
		loop {
			self.fRec165[l166 as usize] = 0.0;
			l166 = (l166 + 1);
			if (l166 < 2) { continue; } else { break; }
		}
		let mut l167: i32 = 0;
		loop {
			self.fRec164[l167 as usize] = 0.0;
			l167 = (l167 + 1);
			if (l167 < 3) { continue; } else { break; }
		}
		let mut l168: i32 = 0;
		loop {
			self.fVec21[l168 as usize] = 0.0;
			l168 = (l168 + 1);
			if (l168 < 2) { continue; } else { break; }
		}
		let mut l169: i32 = 0;
		loop {
			self.fRec163[l169 as usize] = 0.0;
			l169 = (l169 + 1);
			if (l169 < 2) { continue; } else { break; }
		}
		let mut l170: i32 = 0;
		loop {
			self.fRec162[l170 as usize] = 0.0;
			l170 = (l170 + 1);
			if (l170 < 3) { continue; } else { break; }
		}
		let mut l171: i32 = 0;
		loop {
			self.fRec161[l171 as usize] = 0.0;
			l171 = (l171 + 1);
			if (l171 < 3) { continue; } else { break; }
		}
		let mut l172: i32 = 0;
		loop {
			self.fRec169[l172 as usize] = 0.0;
			l172 = (l172 + 1);
			if (l172 < 2) { continue; } else { break; }
		}
		let mut l173: i32 = 0;
		loop {
			self.fRec168[l173 as usize] = 0.0;
			l173 = (l173 + 1);
			if (l173 < 3) { continue; } else { break; }
		}
		let mut l174: i32 = 0;
		loop {
			self.fVec22[l174 as usize] = 0.0;
			l174 = (l174 + 1);
			if (l174 < 2) { continue; } else { break; }
		}
		let mut l175: i32 = 0;
		loop {
			self.fRec167[l175 as usize] = 0.0;
			l175 = (l175 + 1);
			if (l175 < 2) { continue; } else { break; }
		}
		let mut l176: i32 = 0;
		loop {
			self.fRec166[l176 as usize] = 0.0;
			l176 = (l176 + 1);
			if (l176 < 3) { continue; } else { break; }
		}
		let mut l177: i32 = 0;
		loop {
			self.fRec171[l177 as usize] = 0.0;
			l177 = (l177 + 1);
			if (l177 < 2) { continue; } else { break; }
		}
		let mut l178: i32 = 0;
		loop {
			self.fRec170[l178 as usize] = 0.0;
			l178 = (l178 + 1);
			if (l178 < 3) { continue; } else { break; }
		}
		let mut l179: i32 = 0;
		loop {
			self.fRec176[l179 as usize] = 0.0;
			l179 = (l179 + 1);
			if (l179 < 2) { continue; } else { break; }
		}
		let mut l180: i32 = 0;
		loop {
			self.fRec175[l180 as usize] = 0.0;
			l180 = (l180 + 1);
			if (l180 < 3) { continue; } else { break; }
		}
		let mut l181: i32 = 0;
		loop {
			self.fRec174[l181 as usize] = 0.0;
			l181 = (l181 + 1);
			if (l181 < 3) { continue; } else { break; }
		}
		let mut l182: i32 = 0;
		loop {
			self.fRec173[l182 as usize] = 0.0;
			l182 = (l182 + 1);
			if (l182 < 3) { continue; } else { break; }
		}
		let mut l183: i32 = 0;
		loop {
			self.fRec172[l183 as usize] = 0.0;
			l183 = (l183 + 1);
			if (l183 < 3) { continue; } else { break; }
		}
		let mut l184: i32 = 0;
		loop {
			self.fRec182[l184 as usize] = 0.0;
			l184 = (l184 + 1);
			if (l184 < 2) { continue; } else { break; }
		}
		let mut l185: i32 = 0;
		loop {
			self.fRec181[l185 as usize] = 0.0;
			l185 = (l185 + 1);
			if (l185 < 3) { continue; } else { break; }
		}
		let mut l186: i32 = 0;
		loop {
			self.fVec23[l186 as usize] = 0.0;
			l186 = (l186 + 1);
			if (l186 < 2) { continue; } else { break; }
		}
		let mut l187: i32 = 0;
		loop {
			self.fRec180[l187 as usize] = 0.0;
			l187 = (l187 + 1);
			if (l187 < 2) { continue; } else { break; }
		}
		let mut l188: i32 = 0;
		loop {
			self.fRec179[l188 as usize] = 0.0;
			l188 = (l188 + 1);
			if (l188 < 3) { continue; } else { break; }
		}
		let mut l189: i32 = 0;
		loop {
			self.fRec178[l189 as usize] = 0.0;
			l189 = (l189 + 1);
			if (l189 < 3) { continue; } else { break; }
		}
		let mut l190: i32 = 0;
		loop {
			self.fRec177[l190 as usize] = 0.0;
			l190 = (l190 + 1);
			if (l190 < 3) { continue; } else { break; }
		}
		let mut l191: i32 = 0;
		loop {
			self.fRec187[l191 as usize] = 0.0;
			l191 = (l191 + 1);
			if (l191 < 2) { continue; } else { break; }
		}
		let mut l192: i32 = 0;
		loop {
			self.fRec186[l192 as usize] = 0.0;
			l192 = (l192 + 1);
			if (l192 < 3) { continue; } else { break; }
		}
		let mut l193: i32 = 0;
		loop {
			self.fVec24[l193 as usize] = 0.0;
			l193 = (l193 + 1);
			if (l193 < 2) { continue; } else { break; }
		}
		let mut l194: i32 = 0;
		loop {
			self.fRec185[l194 as usize] = 0.0;
			l194 = (l194 + 1);
			if (l194 < 2) { continue; } else { break; }
		}
		let mut l195: i32 = 0;
		loop {
			self.fRec184[l195 as usize] = 0.0;
			l195 = (l195 + 1);
			if (l195 < 3) { continue; } else { break; }
		}
		let mut l196: i32 = 0;
		loop {
			self.fRec183[l196 as usize] = 0.0;
			l196 = (l196 + 1);
			if (l196 < 3) { continue; } else { break; }
		}
		let mut l197: i32 = 0;
		loop {
			self.fRec191[l197 as usize] = 0.0;
			l197 = (l197 + 1);
			if (l197 < 2) { continue; } else { break; }
		}
		let mut l198: i32 = 0;
		loop {
			self.fRec190[l198 as usize] = 0.0;
			l198 = (l198 + 1);
			if (l198 < 3) { continue; } else { break; }
		}
		let mut l199: i32 = 0;
		loop {
			self.fVec25[l199 as usize] = 0.0;
			l199 = (l199 + 1);
			if (l199 < 2) { continue; } else { break; }
		}
		let mut l200: i32 = 0;
		loop {
			self.fRec189[l200 as usize] = 0.0;
			l200 = (l200 + 1);
			if (l200 < 2) { continue; } else { break; }
		}
		let mut l201: i32 = 0;
		loop {
			self.fRec188[l201 as usize] = 0.0;
			l201 = (l201 + 1);
			if (l201 < 3) { continue; } else { break; }
		}
		let mut l202: i32 = 0;
		loop {
			self.fRec193[l202 as usize] = 0.0;
			l202 = (l202 + 1);
			if (l202 < 2) { continue; } else { break; }
		}
		let mut l203: i32 = 0;
		loop {
			self.fRec192[l203 as usize] = 0.0;
			l203 = (l203 + 1);
			if (l203 < 3) { continue; } else { break; }
		}
		let mut l204: i32 = 0;
		loop {
			self.fRec198[l204 as usize] = 0.0;
			l204 = (l204 + 1);
			if (l204 < 2) { continue; } else { break; }
		}
		let mut l205: i32 = 0;
		loop {
			self.fRec197[l205 as usize] = 0.0;
			l205 = (l205 + 1);
			if (l205 < 3) { continue; } else { break; }
		}
		let mut l206: i32 = 0;
		loop {
			self.fRec196[l206 as usize] = 0.0;
			l206 = (l206 + 1);
			if (l206 < 3) { continue; } else { break; }
		}
		let mut l207: i32 = 0;
		loop {
			self.fRec195[l207 as usize] = 0.0;
			l207 = (l207 + 1);
			if (l207 < 3) { continue; } else { break; }
		}
		let mut l208: i32 = 0;
		loop {
			self.fRec194[l208 as usize] = 0.0;
			l208 = (l208 + 1);
			if (l208 < 3) { continue; } else { break; }
		}
		let mut l209: i32 = 0;
		loop {
			self.fRec204[l209 as usize] = 0.0;
			l209 = (l209 + 1);
			if (l209 < 2) { continue; } else { break; }
		}
		let mut l210: i32 = 0;
		loop {
			self.fRec203[l210 as usize] = 0.0;
			l210 = (l210 + 1);
			if (l210 < 3) { continue; } else { break; }
		}
		let mut l211: i32 = 0;
		loop {
			self.fVec26[l211 as usize] = 0.0;
			l211 = (l211 + 1);
			if (l211 < 2) { continue; } else { break; }
		}
		let mut l212: i32 = 0;
		loop {
			self.fRec202[l212 as usize] = 0.0;
			l212 = (l212 + 1);
			if (l212 < 2) { continue; } else { break; }
		}
		let mut l213: i32 = 0;
		loop {
			self.fRec201[l213 as usize] = 0.0;
			l213 = (l213 + 1);
			if (l213 < 3) { continue; } else { break; }
		}
		let mut l214: i32 = 0;
		loop {
			self.fRec200[l214 as usize] = 0.0;
			l214 = (l214 + 1);
			if (l214 < 3) { continue; } else { break; }
		}
		let mut l215: i32 = 0;
		loop {
			self.fRec199[l215 as usize] = 0.0;
			l215 = (l215 + 1);
			if (l215 < 3) { continue; } else { break; }
		}
		let mut l216: i32 = 0;
		loop {
			self.fRec209[l216 as usize] = 0.0;
			l216 = (l216 + 1);
			if (l216 < 2) { continue; } else { break; }
		}
		let mut l217: i32 = 0;
		loop {
			self.fRec208[l217 as usize] = 0.0;
			l217 = (l217 + 1);
			if (l217 < 3) { continue; } else { break; }
		}
		let mut l218: i32 = 0;
		loop {
			self.fVec27[l218 as usize] = 0.0;
			l218 = (l218 + 1);
			if (l218 < 2) { continue; } else { break; }
		}
		let mut l219: i32 = 0;
		loop {
			self.fRec207[l219 as usize] = 0.0;
			l219 = (l219 + 1);
			if (l219 < 2) { continue; } else { break; }
		}
		let mut l220: i32 = 0;
		loop {
			self.fRec206[l220 as usize] = 0.0;
			l220 = (l220 + 1);
			if (l220 < 3) { continue; } else { break; }
		}
		let mut l221: i32 = 0;
		loop {
			self.fRec205[l221 as usize] = 0.0;
			l221 = (l221 + 1);
			if (l221 < 3) { continue; } else { break; }
		}
		let mut l222: i32 = 0;
		loop {
			self.fRec213[l222 as usize] = 0.0;
			l222 = (l222 + 1);
			if (l222 < 2) { continue; } else { break; }
		}
		let mut l223: i32 = 0;
		loop {
			self.fRec212[l223 as usize] = 0.0;
			l223 = (l223 + 1);
			if (l223 < 3) { continue; } else { break; }
		}
		let mut l224: i32 = 0;
		loop {
			self.fVec28[l224 as usize] = 0.0;
			l224 = (l224 + 1);
			if (l224 < 2) { continue; } else { break; }
		}
		let mut l225: i32 = 0;
		loop {
			self.fRec211[l225 as usize] = 0.0;
			l225 = (l225 + 1);
			if (l225 < 2) { continue; } else { break; }
		}
		let mut l226: i32 = 0;
		loop {
			self.fRec210[l226 as usize] = 0.0;
			l226 = (l226 + 1);
			if (l226 < 3) { continue; } else { break; }
		}
		let mut l227: i32 = 0;
		loop {
			self.fRec215[l227 as usize] = 0.0;
			l227 = (l227 + 1);
			if (l227 < 2) { continue; } else { break; }
		}
		let mut l228: i32 = 0;
		loop {
			self.fRec214[l228 as usize] = 0.0;
			l228 = (l228 + 1);
			if (l228 < 3) { continue; } else { break; }
		}
		let mut l229: i32 = 0;
		loop {
			self.fRec220[l229 as usize] = 0.0;
			l229 = (l229 + 1);
			if (l229 < 2) { continue; } else { break; }
		}
		let mut l230: i32 = 0;
		loop {
			self.fRec219[l230 as usize] = 0.0;
			l230 = (l230 + 1);
			if (l230 < 3) { continue; } else { break; }
		}
		let mut l231: i32 = 0;
		loop {
			self.fRec218[l231 as usize] = 0.0;
			l231 = (l231 + 1);
			if (l231 < 3) { continue; } else { break; }
		}
		let mut l232: i32 = 0;
		loop {
			self.fRec217[l232 as usize] = 0.0;
			l232 = (l232 + 1);
			if (l232 < 3) { continue; } else { break; }
		}
		let mut l233: i32 = 0;
		loop {
			self.fRec216[l233 as usize] = 0.0;
			l233 = (l233 + 1);
			if (l233 < 3) { continue; } else { break; }
		}
		let mut l234: i32 = 0;
		loop {
			self.fRec226[l234 as usize] = 0.0;
			l234 = (l234 + 1);
			if (l234 < 2) { continue; } else { break; }
		}
		let mut l235: i32 = 0;
		loop {
			self.fRec225[l235 as usize] = 0.0;
			l235 = (l235 + 1);
			if (l235 < 3) { continue; } else { break; }
		}
		let mut l236: i32 = 0;
		loop {
			self.fVec29[l236 as usize] = 0.0;
			l236 = (l236 + 1);
			if (l236 < 2) { continue; } else { break; }
		}
		let mut l237: i32 = 0;
		loop {
			self.fRec224[l237 as usize] = 0.0;
			l237 = (l237 + 1);
			if (l237 < 2) { continue; } else { break; }
		}
		let mut l238: i32 = 0;
		loop {
			self.fRec223[l238 as usize] = 0.0;
			l238 = (l238 + 1);
			if (l238 < 3) { continue; } else { break; }
		}
		let mut l239: i32 = 0;
		loop {
			self.fRec222[l239 as usize] = 0.0;
			l239 = (l239 + 1);
			if (l239 < 3) { continue; } else { break; }
		}
		let mut l240: i32 = 0;
		loop {
			self.fRec221[l240 as usize] = 0.0;
			l240 = (l240 + 1);
			if (l240 < 3) { continue; } else { break; }
		}
		let mut l241: i32 = 0;
		loop {
			self.fRec231[l241 as usize] = 0.0;
			l241 = (l241 + 1);
			if (l241 < 2) { continue; } else { break; }
		}
		let mut l242: i32 = 0;
		loop {
			self.fRec230[l242 as usize] = 0.0;
			l242 = (l242 + 1);
			if (l242 < 3) { continue; } else { break; }
		}
		let mut l243: i32 = 0;
		loop {
			self.fVec30[l243 as usize] = 0.0;
			l243 = (l243 + 1);
			if (l243 < 2) { continue; } else { break; }
		}
		let mut l244: i32 = 0;
		loop {
			self.fRec229[l244 as usize] = 0.0;
			l244 = (l244 + 1);
			if (l244 < 2) { continue; } else { break; }
		}
		let mut l245: i32 = 0;
		loop {
			self.fRec228[l245 as usize] = 0.0;
			l245 = (l245 + 1);
			if (l245 < 3) { continue; } else { break; }
		}
		let mut l246: i32 = 0;
		loop {
			self.fRec227[l246 as usize] = 0.0;
			l246 = (l246 + 1);
			if (l246 < 3) { continue; } else { break; }
		}
		let mut l247: i32 = 0;
		loop {
			self.fRec235[l247 as usize] = 0.0;
			l247 = (l247 + 1);
			if (l247 < 2) { continue; } else { break; }
		}
		let mut l248: i32 = 0;
		loop {
			self.fRec234[l248 as usize] = 0.0;
			l248 = (l248 + 1);
			if (l248 < 3) { continue; } else { break; }
		}
		let mut l249: i32 = 0;
		loop {
			self.fVec31[l249 as usize] = 0.0;
			l249 = (l249 + 1);
			if (l249 < 2) { continue; } else { break; }
		}
		let mut l250: i32 = 0;
		loop {
			self.fRec233[l250 as usize] = 0.0;
			l250 = (l250 + 1);
			if (l250 < 2) { continue; } else { break; }
		}
		let mut l251: i32 = 0;
		loop {
			self.fRec232[l251 as usize] = 0.0;
			l251 = (l251 + 1);
			if (l251 < 3) { continue; } else { break; }
		}
		let mut l252: i32 = 0;
		loop {
			self.fRec237[l252 as usize] = 0.0;
			l252 = (l252 + 1);
			if (l252 < 2) { continue; } else { break; }
		}
		let mut l253: i32 = 0;
		loop {
			self.fRec236[l253 as usize] = 0.0;
			l253 = (l253 + 1);
			if (l253 < 3) { continue; } else { break; }
		}
		let mut l254: i32 = 0;
		loop {
			self.fRec242[l254 as usize] = 0.0;
			l254 = (l254 + 1);
			if (l254 < 2) { continue; } else { break; }
		}
		let mut l255: i32 = 0;
		loop {
			self.fRec241[l255 as usize] = 0.0;
			l255 = (l255 + 1);
			if (l255 < 3) { continue; } else { break; }
		}
		let mut l256: i32 = 0;
		loop {
			self.fRec240[l256 as usize] = 0.0;
			l256 = (l256 + 1);
			if (l256 < 3) { continue; } else { break; }
		}
		let mut l257: i32 = 0;
		loop {
			self.fRec239[l257 as usize] = 0.0;
			l257 = (l257 + 1);
			if (l257 < 3) { continue; } else { break; }
		}
		let mut l258: i32 = 0;
		loop {
			self.fRec238[l258 as usize] = 0.0;
			l258 = (l258 + 1);
			if (l258 < 3) { continue; } else { break; }
		}
		let mut l259: i32 = 0;
		loop {
			self.fRec248[l259 as usize] = 0.0;
			l259 = (l259 + 1);
			if (l259 < 2) { continue; } else { break; }
		}
		let mut l260: i32 = 0;
		loop {
			self.fRec247[l260 as usize] = 0.0;
			l260 = (l260 + 1);
			if (l260 < 3) { continue; } else { break; }
		}
		let mut l261: i32 = 0;
		loop {
			self.fVec32[l261 as usize] = 0.0;
			l261 = (l261 + 1);
			if (l261 < 2) { continue; } else { break; }
		}
		let mut l262: i32 = 0;
		loop {
			self.fRec246[l262 as usize] = 0.0;
			l262 = (l262 + 1);
			if (l262 < 2) { continue; } else { break; }
		}
		let mut l263: i32 = 0;
		loop {
			self.fRec245[l263 as usize] = 0.0;
			l263 = (l263 + 1);
			if (l263 < 3) { continue; } else { break; }
		}
		let mut l264: i32 = 0;
		loop {
			self.fRec244[l264 as usize] = 0.0;
			l264 = (l264 + 1);
			if (l264 < 3) { continue; } else { break; }
		}
		let mut l265: i32 = 0;
		loop {
			self.fRec243[l265 as usize] = 0.0;
			l265 = (l265 + 1);
			if (l265 < 3) { continue; } else { break; }
		}
		let mut l266: i32 = 0;
		loop {
			self.fRec253[l266 as usize] = 0.0;
			l266 = (l266 + 1);
			if (l266 < 2) { continue; } else { break; }
		}
		let mut l267: i32 = 0;
		loop {
			self.fRec252[l267 as usize] = 0.0;
			l267 = (l267 + 1);
			if (l267 < 3) { continue; } else { break; }
		}
		let mut l268: i32 = 0;
		loop {
			self.fVec33[l268 as usize] = 0.0;
			l268 = (l268 + 1);
			if (l268 < 2) { continue; } else { break; }
		}
		let mut l269: i32 = 0;
		loop {
			self.fRec251[l269 as usize] = 0.0;
			l269 = (l269 + 1);
			if (l269 < 2) { continue; } else { break; }
		}
		let mut l270: i32 = 0;
		loop {
			self.fRec250[l270 as usize] = 0.0;
			l270 = (l270 + 1);
			if (l270 < 3) { continue; } else { break; }
		}
		let mut l271: i32 = 0;
		loop {
			self.fRec249[l271 as usize] = 0.0;
			l271 = (l271 + 1);
			if (l271 < 3) { continue; } else { break; }
		}
		let mut l272: i32 = 0;
		loop {
			self.fRec257[l272 as usize] = 0.0;
			l272 = (l272 + 1);
			if (l272 < 2) { continue; } else { break; }
		}
		let mut l273: i32 = 0;
		loop {
			self.fRec256[l273 as usize] = 0.0;
			l273 = (l273 + 1);
			if (l273 < 3) { continue; } else { break; }
		}
		let mut l274: i32 = 0;
		loop {
			self.fVec34[l274 as usize] = 0.0;
			l274 = (l274 + 1);
			if (l274 < 2) { continue; } else { break; }
		}
		let mut l275: i32 = 0;
		loop {
			self.fRec255[l275 as usize] = 0.0;
			l275 = (l275 + 1);
			if (l275 < 2) { continue; } else { break; }
		}
		let mut l276: i32 = 0;
		loop {
			self.fRec254[l276 as usize] = 0.0;
			l276 = (l276 + 1);
			if (l276 < 3) { continue; } else { break; }
		}
		let mut l277: i32 = 0;
		loop {
			self.fRec259[l277 as usize] = 0.0;
			l277 = (l277 + 1);
			if (l277 < 2) { continue; } else { break; }
		}
		let mut l278: i32 = 0;
		loop {
			self.fRec258[l278 as usize] = 0.0;
			l278 = (l278 + 1);
			if (l278 < 3) { continue; } else { break; }
		}
		let mut l279: i32 = 0;
		loop {
			self.fRec264[l279 as usize] = 0.0;
			l279 = (l279 + 1);
			if (l279 < 2) { continue; } else { break; }
		}
		let mut l280: i32 = 0;
		loop {
			self.fRec263[l280 as usize] = 0.0;
			l280 = (l280 + 1);
			if (l280 < 3) { continue; } else { break; }
		}
		let mut l281: i32 = 0;
		loop {
			self.fRec262[l281 as usize] = 0.0;
			l281 = (l281 + 1);
			if (l281 < 3) { continue; } else { break; }
		}
		let mut l282: i32 = 0;
		loop {
			self.fRec261[l282 as usize] = 0.0;
			l282 = (l282 + 1);
			if (l282 < 3) { continue; } else { break; }
		}
		let mut l283: i32 = 0;
		loop {
			self.fRec260[l283 as usize] = 0.0;
			l283 = (l283 + 1);
			if (l283 < 3) { continue; } else { break; }
		}
		let mut l284: i32 = 0;
		loop {
			self.fRec270[l284 as usize] = 0.0;
			l284 = (l284 + 1);
			if (l284 < 2) { continue; } else { break; }
		}
		let mut l285: i32 = 0;
		loop {
			self.fRec269[l285 as usize] = 0.0;
			l285 = (l285 + 1);
			if (l285 < 3) { continue; } else { break; }
		}
		let mut l286: i32 = 0;
		loop {
			self.fVec35[l286 as usize] = 0.0;
			l286 = (l286 + 1);
			if (l286 < 2) { continue; } else { break; }
		}
		let mut l287: i32 = 0;
		loop {
			self.fRec268[l287 as usize] = 0.0;
			l287 = (l287 + 1);
			if (l287 < 2) { continue; } else { break; }
		}
		let mut l288: i32 = 0;
		loop {
			self.fRec267[l288 as usize] = 0.0;
			l288 = (l288 + 1);
			if (l288 < 3) { continue; } else { break; }
		}
		let mut l289: i32 = 0;
		loop {
			self.fRec266[l289 as usize] = 0.0;
			l289 = (l289 + 1);
			if (l289 < 3) { continue; } else { break; }
		}
		let mut l290: i32 = 0;
		loop {
			self.fRec265[l290 as usize] = 0.0;
			l290 = (l290 + 1);
			if (l290 < 3) { continue; } else { break; }
		}
		let mut l291: i32 = 0;
		loop {
			self.fRec275[l291 as usize] = 0.0;
			l291 = (l291 + 1);
			if (l291 < 2) { continue; } else { break; }
		}
		let mut l292: i32 = 0;
		loop {
			self.fRec274[l292 as usize] = 0.0;
			l292 = (l292 + 1);
			if (l292 < 3) { continue; } else { break; }
		}
		let mut l293: i32 = 0;
		loop {
			self.fVec36[l293 as usize] = 0.0;
			l293 = (l293 + 1);
			if (l293 < 2) { continue; } else { break; }
		}
		let mut l294: i32 = 0;
		loop {
			self.fRec273[l294 as usize] = 0.0;
			l294 = (l294 + 1);
			if (l294 < 2) { continue; } else { break; }
		}
		let mut l295: i32 = 0;
		loop {
			self.fRec272[l295 as usize] = 0.0;
			l295 = (l295 + 1);
			if (l295 < 3) { continue; } else { break; }
		}
		let mut l296: i32 = 0;
		loop {
			self.fRec271[l296 as usize] = 0.0;
			l296 = (l296 + 1);
			if (l296 < 3) { continue; } else { break; }
		}
		let mut l297: i32 = 0;
		loop {
			self.fRec279[l297 as usize] = 0.0;
			l297 = (l297 + 1);
			if (l297 < 2) { continue; } else { break; }
		}
		let mut l298: i32 = 0;
		loop {
			self.fRec278[l298 as usize] = 0.0;
			l298 = (l298 + 1);
			if (l298 < 3) { continue; } else { break; }
		}
		let mut l299: i32 = 0;
		loop {
			self.fVec37[l299 as usize] = 0.0;
			l299 = (l299 + 1);
			if (l299 < 2) { continue; } else { break; }
		}
		let mut l300: i32 = 0;
		loop {
			self.fRec277[l300 as usize] = 0.0;
			l300 = (l300 + 1);
			if (l300 < 2) { continue; } else { break; }
		}
		let mut l301: i32 = 0;
		loop {
			self.fRec276[l301 as usize] = 0.0;
			l301 = (l301 + 1);
			if (l301 < 3) { continue; } else { break; }
		}
		let mut l302: i32 = 0;
		loop {
			self.fRec281[l302 as usize] = 0.0;
			l302 = (l302 + 1);
			if (l302 < 2) { continue; } else { break; }
		}
		let mut l303: i32 = 0;
		loop {
			self.fRec280[l303 as usize] = 0.0;
			l303 = (l303 + 1);
			if (l303 < 3) { continue; } else { break; }
		}
		let mut l304: i32 = 0;
		loop {
			self.fRec286[l304 as usize] = 0.0;
			l304 = (l304 + 1);
			if (l304 < 2) { continue; } else { break; }
		}
		let mut l305: i32 = 0;
		loop {
			self.fRec285[l305 as usize] = 0.0;
			l305 = (l305 + 1);
			if (l305 < 3) { continue; } else { break; }
		}
		let mut l306: i32 = 0;
		loop {
			self.fRec284[l306 as usize] = 0.0;
			l306 = (l306 + 1);
			if (l306 < 3) { continue; } else { break; }
		}
		let mut l307: i32 = 0;
		loop {
			self.fRec283[l307 as usize] = 0.0;
			l307 = (l307 + 1);
			if (l307 < 3) { continue; } else { break; }
		}
		let mut l308: i32 = 0;
		loop {
			self.fRec282[l308 as usize] = 0.0;
			l308 = (l308 + 1);
			if (l308 < 3) { continue; } else { break; }
		}
		let mut l309: i32 = 0;
		loop {
			self.fRec292[l309 as usize] = 0.0;
			l309 = (l309 + 1);
			if (l309 < 2) { continue; } else { break; }
		}
		let mut l310: i32 = 0;
		loop {
			self.fRec291[l310 as usize] = 0.0;
			l310 = (l310 + 1);
			if (l310 < 3) { continue; } else { break; }
		}
		let mut l311: i32 = 0;
		loop {
			self.fVec38[l311 as usize] = 0.0;
			l311 = (l311 + 1);
			if (l311 < 2) { continue; } else { break; }
		}
		let mut l312: i32 = 0;
		loop {
			self.fRec290[l312 as usize] = 0.0;
			l312 = (l312 + 1);
			if (l312 < 2) { continue; } else { break; }
		}
		let mut l313: i32 = 0;
		loop {
			self.fRec289[l313 as usize] = 0.0;
			l313 = (l313 + 1);
			if (l313 < 3) { continue; } else { break; }
		}
		let mut l314: i32 = 0;
		loop {
			self.fRec288[l314 as usize] = 0.0;
			l314 = (l314 + 1);
			if (l314 < 3) { continue; } else { break; }
		}
		let mut l315: i32 = 0;
		loop {
			self.fRec287[l315 as usize] = 0.0;
			l315 = (l315 + 1);
			if (l315 < 3) { continue; } else { break; }
		}
		let mut l316: i32 = 0;
		loop {
			self.fRec297[l316 as usize] = 0.0;
			l316 = (l316 + 1);
			if (l316 < 2) { continue; } else { break; }
		}
		let mut l317: i32 = 0;
		loop {
			self.fRec296[l317 as usize] = 0.0;
			l317 = (l317 + 1);
			if (l317 < 3) { continue; } else { break; }
		}
		let mut l318: i32 = 0;
		loop {
			self.fVec39[l318 as usize] = 0.0;
			l318 = (l318 + 1);
			if (l318 < 2) { continue; } else { break; }
		}
		let mut l319: i32 = 0;
		loop {
			self.fRec295[l319 as usize] = 0.0;
			l319 = (l319 + 1);
			if (l319 < 2) { continue; } else { break; }
		}
		let mut l320: i32 = 0;
		loop {
			self.fRec294[l320 as usize] = 0.0;
			l320 = (l320 + 1);
			if (l320 < 3) { continue; } else { break; }
		}
		let mut l321: i32 = 0;
		loop {
			self.fRec293[l321 as usize] = 0.0;
			l321 = (l321 + 1);
			if (l321 < 3) { continue; } else { break; }
		}
		let mut l322: i32 = 0;
		loop {
			self.fRec301[l322 as usize] = 0.0;
			l322 = (l322 + 1);
			if (l322 < 2) { continue; } else { break; }
		}
		let mut l323: i32 = 0;
		loop {
			self.fRec300[l323 as usize] = 0.0;
			l323 = (l323 + 1);
			if (l323 < 3) { continue; } else { break; }
		}
		let mut l324: i32 = 0;
		loop {
			self.fVec40[l324 as usize] = 0.0;
			l324 = (l324 + 1);
			if (l324 < 2) { continue; } else { break; }
		}
		let mut l325: i32 = 0;
		loop {
			self.fRec299[l325 as usize] = 0.0;
			l325 = (l325 + 1);
			if (l325 < 2) { continue; } else { break; }
		}
		let mut l326: i32 = 0;
		loop {
			self.fRec298[l326 as usize] = 0.0;
			l326 = (l326 + 1);
			if (l326 < 3) { continue; } else { break; }
		}
		let mut l327: i32 = 0;
		loop {
			self.fRec303[l327 as usize] = 0.0;
			l327 = (l327 + 1);
			if (l327 < 2) { continue; } else { break; }
		}
		let mut l328: i32 = 0;
		loop {
			self.fRec302[l328 as usize] = 0.0;
			l328 = (l328 + 1);
			if (l328 < 3) { continue; } else { break; }
		}
		let mut l329: i32 = 0;
		loop {
			self.fRec308[l329 as usize] = 0.0;
			l329 = (l329 + 1);
			if (l329 < 2) { continue; } else { break; }
		}
		let mut l330: i32 = 0;
		loop {
			self.fRec307[l330 as usize] = 0.0;
			l330 = (l330 + 1);
			if (l330 < 3) { continue; } else { break; }
		}
		let mut l331: i32 = 0;
		loop {
			self.fRec306[l331 as usize] = 0.0;
			l331 = (l331 + 1);
			if (l331 < 3) { continue; } else { break; }
		}
		let mut l332: i32 = 0;
		loop {
			self.fRec305[l332 as usize] = 0.0;
			l332 = (l332 + 1);
			if (l332 < 3) { continue; } else { break; }
		}
		let mut l333: i32 = 0;
		loop {
			self.fRec304[l333 as usize] = 0.0;
			l333 = (l333 + 1);
			if (l333 < 3) { continue; } else { break; }
		}
		let mut l334: i32 = 0;
		loop {
			self.fRec314[l334 as usize] = 0.0;
			l334 = (l334 + 1);
			if (l334 < 2) { continue; } else { break; }
		}
		let mut l335: i32 = 0;
		loop {
			self.fRec313[l335 as usize] = 0.0;
			l335 = (l335 + 1);
			if (l335 < 3) { continue; } else { break; }
		}
		let mut l336: i32 = 0;
		loop {
			self.fVec41[l336 as usize] = 0.0;
			l336 = (l336 + 1);
			if (l336 < 2) { continue; } else { break; }
		}
		let mut l337: i32 = 0;
		loop {
			self.fRec312[l337 as usize] = 0.0;
			l337 = (l337 + 1);
			if (l337 < 2) { continue; } else { break; }
		}
		let mut l338: i32 = 0;
		loop {
			self.fRec311[l338 as usize] = 0.0;
			l338 = (l338 + 1);
			if (l338 < 3) { continue; } else { break; }
		}
		let mut l339: i32 = 0;
		loop {
			self.fRec310[l339 as usize] = 0.0;
			l339 = (l339 + 1);
			if (l339 < 3) { continue; } else { break; }
		}
		let mut l340: i32 = 0;
		loop {
			self.fRec309[l340 as usize] = 0.0;
			l340 = (l340 + 1);
			if (l340 < 3) { continue; } else { break; }
		}
		let mut l341: i32 = 0;
		loop {
			self.fRec319[l341 as usize] = 0.0;
			l341 = (l341 + 1);
			if (l341 < 2) { continue; } else { break; }
		}
		let mut l342: i32 = 0;
		loop {
			self.fRec318[l342 as usize] = 0.0;
			l342 = (l342 + 1);
			if (l342 < 3) { continue; } else { break; }
		}
		let mut l343: i32 = 0;
		loop {
			self.fVec42[l343 as usize] = 0.0;
			l343 = (l343 + 1);
			if (l343 < 2) { continue; } else { break; }
		}
		let mut l344: i32 = 0;
		loop {
			self.fRec317[l344 as usize] = 0.0;
			l344 = (l344 + 1);
			if (l344 < 2) { continue; } else { break; }
		}
		let mut l345: i32 = 0;
		loop {
			self.fRec316[l345 as usize] = 0.0;
			l345 = (l345 + 1);
			if (l345 < 3) { continue; } else { break; }
		}
		let mut l346: i32 = 0;
		loop {
			self.fRec315[l346 as usize] = 0.0;
			l346 = (l346 + 1);
			if (l346 < 3) { continue; } else { break; }
		}
		let mut l347: i32 = 0;
		loop {
			self.fRec323[l347 as usize] = 0.0;
			l347 = (l347 + 1);
			if (l347 < 2) { continue; } else { break; }
		}
		let mut l348: i32 = 0;
		loop {
			self.fRec322[l348 as usize] = 0.0;
			l348 = (l348 + 1);
			if (l348 < 3) { continue; } else { break; }
		}
		let mut l349: i32 = 0;
		loop {
			self.fVec43[l349 as usize] = 0.0;
			l349 = (l349 + 1);
			if (l349 < 2) { continue; } else { break; }
		}
		let mut l350: i32 = 0;
		loop {
			self.fRec321[l350 as usize] = 0.0;
			l350 = (l350 + 1);
			if (l350 < 2) { continue; } else { break; }
		}
		let mut l351: i32 = 0;
		loop {
			self.fRec320[l351 as usize] = 0.0;
			l351 = (l351 + 1);
			if (l351 < 3) { continue; } else { break; }
		}
		let mut l352: i32 = 0;
		loop {
			self.fRec325[l352 as usize] = 0.0;
			l352 = (l352 + 1);
			if (l352 < 2) { continue; } else { break; }
		}
		let mut l353: i32 = 0;
		loop {
			self.fRec324[l353 as usize] = 0.0;
			l353 = (l353 + 1);
			if (l353 < 3) { continue; } else { break; }
		}
		let mut l354: i32 = 0;
		loop {
			self.fRec330[l354 as usize] = 0.0;
			l354 = (l354 + 1);
			if (l354 < 2) { continue; } else { break; }
		}
		let mut l355: i32 = 0;
		loop {
			self.fRec329[l355 as usize] = 0.0;
			l355 = (l355 + 1);
			if (l355 < 3) { continue; } else { break; }
		}
		let mut l356: i32 = 0;
		loop {
			self.fRec328[l356 as usize] = 0.0;
			l356 = (l356 + 1);
			if (l356 < 3) { continue; } else { break; }
		}
		let mut l357: i32 = 0;
		loop {
			self.fRec327[l357 as usize] = 0.0;
			l357 = (l357 + 1);
			if (l357 < 3) { continue; } else { break; }
		}
		let mut l358: i32 = 0;
		loop {
			self.fRec326[l358 as usize] = 0.0;
			l358 = (l358 + 1);
			if (l358 < 3) { continue; } else { break; }
		}
		let mut l359: i32 = 0;
		loop {
			self.fRec336[l359 as usize] = 0.0;
			l359 = (l359 + 1);
			if (l359 < 2) { continue; } else { break; }
		}
		let mut l360: i32 = 0;
		loop {
			self.fRec335[l360 as usize] = 0.0;
			l360 = (l360 + 1);
			if (l360 < 3) { continue; } else { break; }
		}
		let mut l361: i32 = 0;
		loop {
			self.fVec44[l361 as usize] = 0.0;
			l361 = (l361 + 1);
			if (l361 < 2) { continue; } else { break; }
		}
		let mut l362: i32 = 0;
		loop {
			self.fRec334[l362 as usize] = 0.0;
			l362 = (l362 + 1);
			if (l362 < 2) { continue; } else { break; }
		}
		let mut l363: i32 = 0;
		loop {
			self.fRec333[l363 as usize] = 0.0;
			l363 = (l363 + 1);
			if (l363 < 3) { continue; } else { break; }
		}
		let mut l364: i32 = 0;
		loop {
			self.fRec332[l364 as usize] = 0.0;
			l364 = (l364 + 1);
			if (l364 < 3) { continue; } else { break; }
		}
		let mut l365: i32 = 0;
		loop {
			self.fRec331[l365 as usize] = 0.0;
			l365 = (l365 + 1);
			if (l365 < 3) { continue; } else { break; }
		}
		let mut l366: i32 = 0;
		loop {
			self.fRec341[l366 as usize] = 0.0;
			l366 = (l366 + 1);
			if (l366 < 2) { continue; } else { break; }
		}
		let mut l367: i32 = 0;
		loop {
			self.fRec340[l367 as usize] = 0.0;
			l367 = (l367 + 1);
			if (l367 < 3) { continue; } else { break; }
		}
		let mut l368: i32 = 0;
		loop {
			self.fVec45[l368 as usize] = 0.0;
			l368 = (l368 + 1);
			if (l368 < 2) { continue; } else { break; }
		}
		let mut l369: i32 = 0;
		loop {
			self.fRec339[l369 as usize] = 0.0;
			l369 = (l369 + 1);
			if (l369 < 2) { continue; } else { break; }
		}
		let mut l370: i32 = 0;
		loop {
			self.fRec338[l370 as usize] = 0.0;
			l370 = (l370 + 1);
			if (l370 < 3) { continue; } else { break; }
		}
		let mut l371: i32 = 0;
		loop {
			self.fRec337[l371 as usize] = 0.0;
			l371 = (l371 + 1);
			if (l371 < 3) { continue; } else { break; }
		}
		let mut l372: i32 = 0;
		loop {
			self.fRec345[l372 as usize] = 0.0;
			l372 = (l372 + 1);
			if (l372 < 2) { continue; } else { break; }
		}
		let mut l373: i32 = 0;
		loop {
			self.fRec344[l373 as usize] = 0.0;
			l373 = (l373 + 1);
			if (l373 < 3) { continue; } else { break; }
		}
		let mut l374: i32 = 0;
		loop {
			self.fVec46[l374 as usize] = 0.0;
			l374 = (l374 + 1);
			if (l374 < 2) { continue; } else { break; }
		}
		let mut l375: i32 = 0;
		loop {
			self.fRec343[l375 as usize] = 0.0;
			l375 = (l375 + 1);
			if (l375 < 2) { continue; } else { break; }
		}
		let mut l376: i32 = 0;
		loop {
			self.fRec342[l376 as usize] = 0.0;
			l376 = (l376 + 1);
			if (l376 < 3) { continue; } else { break; }
		}
		let mut l377: i32 = 0;
		loop {
			self.fRec347[l377 as usize] = 0.0;
			l377 = (l377 + 1);
			if (l377 < 2) { continue; } else { break; }
		}
		let mut l378: i32 = 0;
		loop {
			self.fRec346[l378 as usize] = 0.0;
			l378 = (l378 + 1);
			if (l378 < 3) { continue; } else { break; }
		}
		let mut l379: i32 = 0;
		loop {
			self.fRec352[l379 as usize] = 0.0;
			l379 = (l379 + 1);
			if (l379 < 2) { continue; } else { break; }
		}
		let mut l380: i32 = 0;
		loop {
			self.fRec351[l380 as usize] = 0.0;
			l380 = (l380 + 1);
			if (l380 < 3) { continue; } else { break; }
		}
		let mut l381: i32 = 0;
		loop {
			self.fRec350[l381 as usize] = 0.0;
			l381 = (l381 + 1);
			if (l381 < 3) { continue; } else { break; }
		}
		let mut l382: i32 = 0;
		loop {
			self.fRec349[l382 as usize] = 0.0;
			l382 = (l382 + 1);
			if (l382 < 3) { continue; } else { break; }
		}
		let mut l383: i32 = 0;
		loop {
			self.fRec348[l383 as usize] = 0.0;
			l383 = (l383 + 1);
			if (l383 < 3) { continue; } else { break; }
		}
		let mut l384: i32 = 0;
		loop {
			self.fRec358[l384 as usize] = 0.0;
			l384 = (l384 + 1);
			if (l384 < 2) { continue; } else { break; }
		}
		let mut l385: i32 = 0;
		loop {
			self.fRec357[l385 as usize] = 0.0;
			l385 = (l385 + 1);
			if (l385 < 3) { continue; } else { break; }
		}
		let mut l386: i32 = 0;
		loop {
			self.fVec47[l386 as usize] = 0.0;
			l386 = (l386 + 1);
			if (l386 < 2) { continue; } else { break; }
		}
		let mut l387: i32 = 0;
		loop {
			self.fRec356[l387 as usize] = 0.0;
			l387 = (l387 + 1);
			if (l387 < 2) { continue; } else { break; }
		}
		let mut l388: i32 = 0;
		loop {
			self.fRec355[l388 as usize] = 0.0;
			l388 = (l388 + 1);
			if (l388 < 3) { continue; } else { break; }
		}
		let mut l389: i32 = 0;
		loop {
			self.fRec354[l389 as usize] = 0.0;
			l389 = (l389 + 1);
			if (l389 < 3) { continue; } else { break; }
		}
		let mut l390: i32 = 0;
		loop {
			self.fRec353[l390 as usize] = 0.0;
			l390 = (l390 + 1);
			if (l390 < 3) { continue; } else { break; }
		}
		let mut l391: i32 = 0;
		loop {
			self.fRec363[l391 as usize] = 0.0;
			l391 = (l391 + 1);
			if (l391 < 2) { continue; } else { break; }
		}
		let mut l392: i32 = 0;
		loop {
			self.fRec362[l392 as usize] = 0.0;
			l392 = (l392 + 1);
			if (l392 < 3) { continue; } else { break; }
		}
		let mut l393: i32 = 0;
		loop {
			self.fVec48[l393 as usize] = 0.0;
			l393 = (l393 + 1);
			if (l393 < 2) { continue; } else { break; }
		}
		let mut l394: i32 = 0;
		loop {
			self.fRec361[l394 as usize] = 0.0;
			l394 = (l394 + 1);
			if (l394 < 2) { continue; } else { break; }
		}
		let mut l395: i32 = 0;
		loop {
			self.fRec360[l395 as usize] = 0.0;
			l395 = (l395 + 1);
			if (l395 < 3) { continue; } else { break; }
		}
		let mut l396: i32 = 0;
		loop {
			self.fRec359[l396 as usize] = 0.0;
			l396 = (l396 + 1);
			if (l396 < 3) { continue; } else { break; }
		}
		let mut l397: i32 = 0;
		loop {
			self.fRec367[l397 as usize] = 0.0;
			l397 = (l397 + 1);
			if (l397 < 2) { continue; } else { break; }
		}
		let mut l398: i32 = 0;
		loop {
			self.fRec366[l398 as usize] = 0.0;
			l398 = (l398 + 1);
			if (l398 < 3) { continue; } else { break; }
		}
		let mut l399: i32 = 0;
		loop {
			self.fVec49[l399 as usize] = 0.0;
			l399 = (l399 + 1);
			if (l399 < 2) { continue; } else { break; }
		}
		let mut l400: i32 = 0;
		loop {
			self.fRec365[l400 as usize] = 0.0;
			l400 = (l400 + 1);
			if (l400 < 2) { continue; } else { break; }
		}
		let mut l401: i32 = 0;
		loop {
			self.fRec364[l401 as usize] = 0.0;
			l401 = (l401 + 1);
			if (l401 < 3) { continue; } else { break; }
		}
		let mut l402: i32 = 0;
		loop {
			self.fRec369[l402 as usize] = 0.0;
			l402 = (l402 + 1);
			if (l402 < 2) { continue; } else { break; }
		}
		let mut l403: i32 = 0;
		loop {
			self.fRec368[l403 as usize] = 0.0;
			l403 = (l403 + 1);
			if (l403 < 3) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l404: i32 = 0;
		loop {
			self.fVec50[l404 as usize] = 0.0;
			l404 = (l404 + 1);
			if (l404 < 16384) { continue; } else { break; }
		}
		let mut l405: i32 = 0;
		loop {
			self.fRec0[l405 as usize] = 0.0;
			l405 = (l405 + 1);
			if (l405 < 3) { continue; } else { break; }
		}
		let mut l406: i32 = 0;
		loop {
			self.fVec51[l406 as usize] = 0.0;
			l406 = (l406 + 1);
			if (l406 < 2) { continue; } else { break; }
		}
		let mut l407: i32 = 0;
		loop {
			self.fVec52[l407 as usize] = 0.0;
			l407 = (l407 + 1);
			if (l407 < 16384) { continue; } else { break; }
		}
		let mut l408: i32 = 0;
		loop {
			self.fRec1[l408 as usize] = 0.0;
			l408 = (l408 + 1);
			if (l408 < 3) { continue; } else { break; }
		}
		let mut l409: i32 = 0;
		loop {
			self.fVec53[l409 as usize] = 0.0;
			l409 = (l409 + 1);
			if (l409 < 16384) { continue; } else { break; }
		}
		let mut l410: i32 = 0;
		loop {
			self.fRec2[l410 as usize] = 0.0;
			l410 = (l410 + 1);
			if (l410 < 3) { continue; } else { break; }
		}
		let mut l411: i32 = 0;
		loop {
			self.fVec54[l411 as usize] = 0.0;
			l411 = (l411 + 1);
			if (l411 < 16384) { continue; } else { break; }
		}
		let mut l412: i32 = 0;
		loop {
			self.fRec3[l412 as usize] = 0.0;
			l412 = (l412 + 1);
			if (l412 < 3) { continue; } else { break; }
		}
		let mut l413: i32 = 0;
		loop {
			self.fVec55[l413 as usize] = 0.0;
			l413 = (l413 + 1);
			if (l413 < 16384) { continue; } else { break; }
		}
		let mut l414: i32 = 0;
		loop {
			self.fRec4[l414 as usize] = 0.0;
			l414 = (l414 + 1);
			if (l414 < 3) { continue; } else { break; }
		}
		let mut l415: i32 = 0;
		loop {
			self.fVec56[l415 as usize] = 0.0;
			l415 = (l415 + 1);
			if (l415 < 16384) { continue; } else { break; }
		}
		let mut l416: i32 = 0;
		loop {
			self.fRec5[l416 as usize] = 0.0;
			l416 = (l416 + 1);
			if (l416 < 3) { continue; } else { break; }
		}
		let mut l417: i32 = 0;
		loop {
			self.fVec57[l417 as usize] = 0.0;
			l417 = (l417 + 1);
			if (l417 < 16384) { continue; } else { break; }
		}
		let mut l418: i32 = 0;
		loop {
			self.fRec6[l418 as usize] = 0.0;
			l418 = (l418 + 1);
			if (l418 < 3) { continue; } else { break; }
		}
		let mut l419: i32 = 0;
		loop {
			self.fVec58[l419 as usize] = 0.0;
			l419 = (l419 + 1);
			if (l419 < 16384) { continue; } else { break; }
		}
		let mut l420: i32 = 0;
		loop {
			self.fRec7[l420 as usize] = 0.0;
			l420 = (l420 + 1);
			if (l420 < 3) { continue; } else { break; }
		}
		let mut l421: i32 = 0;
		loop {
			self.fVec59[l421 as usize] = 0.0;
			l421 = (l421 + 1);
			if (l421 < 16384) { continue; } else { break; }
		}
		let mut l422: i32 = 0;
		loop {
			self.fRec8[l422 as usize] = 0.0;
			l422 = (l422 + 1);
			if (l422 < 3) { continue; } else { break; }
		}
		let mut l423: i32 = 0;
		loop {
			self.fVec60[l423 as usize] = 0.0;
			l423 = (l423 + 1);
			if (l423 < 16384) { continue; } else { break; }
		}
		let mut l424: i32 = 0;
		loop {
			self.fRec9[l424 as usize] = 0.0;
			l424 = (l424 + 1);
			if (l424 < 3) { continue; } else { break; }
		}
		let mut l425: i32 = 0;
		loop {
			self.fVec61[l425 as usize] = 0.0;
			l425 = (l425 + 1);
			if (l425 < 16384) { continue; } else { break; }
		}
		let mut l426: i32 = 0;
		loop {
			self.fRec10[l426 as usize] = 0.0;
			l426 = (l426 + 1);
			if (l426 < 3) { continue; } else { break; }
		}
		let mut l427: i32 = 0;
		loop {
			self.fVec62[l427 as usize] = 0.0;
			l427 = (l427 + 1);
			if (l427 < 16384) { continue; } else { break; }
		}
		let mut l428: i32 = 0;
		loop {
			self.fRec11[l428 as usize] = 0.0;
			l428 = (l428 + 1);
			if (l428 < 3) { continue; } else { break; }
		}
		let mut l429: i32 = 0;
		loop {
			self.fVec63[l429 as usize] = 0.0;
			l429 = (l429 + 1);
			if (l429 < 16384) { continue; } else { break; }
		}
		let mut l430: i32 = 0;
		loop {
			self.fRec12[l430 as usize] = 0.0;
			l430 = (l430 + 1);
			if (l430 < 3) { continue; } else { break; }
		}
		let mut l431: i32 = 0;
		loop {
			self.fVec64[l431 as usize] = 0.0;
			l431 = (l431 + 1);
			if (l431 < 16384) { continue; } else { break; }
		}
		let mut l432: i32 = 0;
		loop {
			self.fRec13[l432 as usize] = 0.0;
			l432 = (l432 + 1);
			if (l432 < 3) { continue; } else { break; }
		}
		let mut l433: i32 = 0;
		loop {
			self.fVec65[l433 as usize] = 0.0;
			l433 = (l433 + 1);
			if (l433 < 16384) { continue; } else { break; }
		}
		let mut l434: i32 = 0;
		loop {
			self.fRec14[l434 as usize] = 0.0;
			l434 = (l434 + 1);
			if (l434 < 3) { continue; } else { break; }
		}
		let mut l435: i32 = 0;
		loop {
			self.fVec66[l435 as usize] = 0.0;
			l435 = (l435 + 1);
			if (l435 < 16384) { continue; } else { break; }
		}
		let mut l436: i32 = 0;
		loop {
			self.fRec15[l436 as usize] = 0.0;
			l436 = (l436 + 1);
			if (l436 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1.0 / self.fConst0);
		self.fConst2 = (0.002915452 * self.fConst0);
		self.fConst3 = (3.14159274 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("fdnRev");
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's reverbs.lib for documentation and references");
		ui_interface.openVerticalBox("FEEDBACK DELAY NETWORK (FDN) REVERBERATOR, ORDER 16");
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("Band Crossover Frequencies");
		ui_interface.declare(&mut self.fHslider6, "0", "");
		ui_interface.declare(&mut self.fHslider6, "scale", "log");
		ui_interface.declare(&mut self.fHslider6, "tooltip", "Each delay-line signal is split into frequency-bands for separate  decay-time control in each band");
		ui_interface.declare(&mut self.fHslider6, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band 0 upper edge in Hz", &mut self.fHslider6, 500.0, 100.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider5, "1", "");
		ui_interface.declare(&mut self.fHslider5, "scale", "log");
		ui_interface.declare(&mut self.fHslider5, "tooltip", "Each delay-line signal is split into frequency-bands for separate  decay-time control in each band");
		ui_interface.declare(&mut self.fHslider5, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band 1 upper edge in Hz", &mut self.fHslider5, 1000.0, 100.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider3, "2", "");
		ui_interface.declare(&mut self.fHslider3, "scale", "log");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Each delay-line signal is split into frequency-bands for separate  decay-time control in each band");
		ui_interface.declare(&mut self.fHslider3, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band 2 upper edge in Hz", &mut self.fHslider3, 2000.0, 100.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider4, "3", "");
		ui_interface.declare(&mut self.fHslider4, "scale", "log");
		ui_interface.declare(&mut self.fHslider4, "tooltip", "Each delay-line signal is split into frequency-bands for separate  decay-time control in each band");
		ui_interface.declare(&mut self.fHslider4, "unit", "Hz");
		ui_interface.addHorizontalSlider("Band 3 upper edge in Hz", &mut self.fHslider4, 4000.0, 100.0, 10000.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("Band Decay Times (T60)");
		ui_interface.declare(&mut self.fVslider3, "0", "");
		ui_interface.declare(&mut self.fVslider3, "scale", "log");
		ui_interface.declare(&mut self.fVslider3, "tooltip", "T60 is the 60dB   decay-time in seconds. For concert halls, an overall reverberation time (T60) near   1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each   frequency band.  In real rooms, higher frequency bands generally decay faster due   to absorption and scattering.");
		ui_interface.declare(&mut self.fVslider3, "unit", "s");
		ui_interface.addVerticalSlider("0", &mut self.fVslider3, 8.4000000000000004, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider2, "1", "");
		ui_interface.declare(&mut self.fVslider2, "scale", "log");
		ui_interface.declare(&mut self.fVslider2, "tooltip", "T60 is the 60dB   decay-time in seconds. For concert halls, an overall reverberation time (T60) near   1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each   frequency band.  In real rooms, higher frequency bands generally decay faster due   to absorption and scattering.");
		ui_interface.declare(&mut self.fVslider2, "unit", "s");
		ui_interface.addVerticalSlider("1", &mut self.fVslider2, 6.5, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider1, "2", "");
		ui_interface.declare(&mut self.fVslider1, "scale", "log");
		ui_interface.declare(&mut self.fVslider1, "tooltip", "T60 is the 60dB   decay-time in seconds. For concert halls, an overall reverberation time (T60) near   1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each   frequency band.  In real rooms, higher frequency bands generally decay faster due   to absorption and scattering.");
		ui_interface.declare(&mut self.fVslider1, "unit", "s");
		ui_interface.addVerticalSlider("2", &mut self.fVslider1, 5.0, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider0, "3", "");
		ui_interface.declare(&mut self.fVslider0, "scale", "log");
		ui_interface.declare(&mut self.fVslider0, "tooltip", "T60 is the 60dB   decay-time in seconds. For concert halls, an overall reverberation time (T60) near   1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each   frequency band.  In real rooms, higher frequency bands generally decay faster due   to absorption and scattering.");
		ui_interface.declare(&mut self.fVslider0, "unit", "s");
		ui_interface.addVerticalSlider("3", &mut self.fVslider0, 3.7999999999999998, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fVslider4, "4", "");
		ui_interface.declare(&mut self.fVslider4, "scale", "log");
		ui_interface.declare(&mut self.fVslider4, "tooltip", "T60 is the 60dB   decay-time in seconds. For concert halls, an overall reverberation time (T60) near   1.9 seconds is typical [Beranek 2004]. Here we may set T60 independently in each   frequency band.  In real rooms, higher frequency bands generally decay faster due   to absorption and scattering.");
		ui_interface.declare(&mut self.fVslider4, "unit", "s");
		ui_interface.addVerticalSlider("4", &mut self.fVslider4, 2.7000000000000002, 0.10000000000000001, 100.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openVerticalBox("Room Dimensions");
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "This length (in meters) determines the shortest delay-line used in the FDN  reverberator. Think of it as the shortest wall-to-wall separation in the room.");
		ui_interface.declare(&mut self.fHslider1, "unit", "m");
		ui_interface.addHorizontalSlider("min acoustic ray length", &mut self.fHslider1, 46.0, 0.10000000000000001, 63.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider2, "2", "");
		ui_interface.declare(&mut self.fHslider2, "scale", "log");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "This length (in meters) determines the longest delay-line used in the   FDN reverberator. Think of it as the largest wall-to-wall separation in the room.");
		ui_interface.declare(&mut self.fHslider2, "unit", "m");
		ui_interface.addHorizontalSlider("max acoustic ray length", &mut self.fHslider2, 63.0, 0.10000000000000001, 63.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "4", "");
		ui_interface.openHorizontalBox("Input Controls");
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openVerticalBox("Reverb State");
		ui_interface.declare(&mut self.fButton2, "1", "");
		ui_interface.declare(&mut self.fButton2, "tooltip", "Hold down 'Quench' to clear the reverberator");
		ui_interface.addButton("Quench", &mut self.fButton2);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("Input Config");
		ui_interface.declare(&mut self.fCheckbox1, "1", "");
		ui_interface.declare(&mut self.fCheckbox1, "tooltip", "When this is checked, the stereo external audio inputs are   disabled (good for hearing the impulse response or pink-noise response alone)");
		ui_interface.addCheckButton("Mute Ext Inputs", &mut self.fCheckbox1);
		ui_interface.declare(&mut self.fCheckbox0, "2", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting   the EQ sections)");
		ui_interface.addCheckButton("Pink Noise", &mut self.fCheckbox0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("Impulse Selection");
		ui_interface.declare(&mut self.fButton1, "1", "");
		ui_interface.declare(&mut self.fButton1, "tooltip", "Send impulse into LEFT channel");
		ui_interface.addButton("Left", &mut self.fButton1);
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.declare(&mut self.fButton0, "tooltip", "Send impulse into LEFT and RIGHT channels");
		ui_interface.addButton("Center", &mut self.fButton0);
		ui_interface.declare(&mut self.fButton3, "3", "");
		ui_interface.declare(&mut self.fButton3, "tooltip", "Send impulse into RIGHT channel");
		ui_interface.addButton("Right", &mut self.fButton3);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fHslider0, "3", "");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Output scale factor");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Output Level (dB)", &mut self.fHslider0, -40.0, -70.0, 20.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32)));
		let mut fSlow1: f32 = (0.100000001 * (self.fCheckbox0 as f32));
		let mut fSlow2: f32 = (self.fButton0 as f32);
		let mut fSlow3: f32 = (self.fButton1 as f32);
		let mut fSlow4: f32 = (1.0 - (self.fCheckbox1 as f32));
		let mut fSlow5: f32 = (0.25 * (1.0 - (0.5 * (self.fButton2 as f32))));
		let mut fSlow6: f32 = (self.fHslider1 as f32);
		let mut fSlow7: f32 = ((self.fHslider2 as f32) / fSlow6);
		let mut fSlow8: f32 = f32::powf(2.0, f32::floor(((1.44269502 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.0))))) + 0.5)));
		let mut fSlow9: f32 = (0.0 - (6.90775537 * fSlow8));
		let mut fSlow10: f32 = (self.fVslider0 as f32);
		let mut fSlow11: f32 = f32::exp((self.fConst1 * (fSlow9 / fSlow10)));
		let mut fSlow12: f32 = f32::tan((self.fConst3 * (self.fHslider3 as f32)));
		let mut fSlow13: f32 = (1.0 / fSlow12);
		let mut fSlow14: f32 = (((fSlow13 + 1.0) / fSlow12) + 1.0);
		let mut fSlow15: f32 = (1.0 / fSlow14);
		let mut fSlow16: f32 = (1.0 / mydsp_faustpower2_f(fSlow12));
		let mut fSlow17: f32 = (fSlow13 + 1.0);
		let mut fSlow18: f32 = (0.0 - ((1.0 - fSlow13) / fSlow17));
		let mut fSlow19: f32 = (1.0 / fSlow17);
		let mut fSlow20: f32 = (0.0 - fSlow13);
		let mut fSlow21: f32 = f32::tan((self.fConst3 * (self.fHslider4 as f32)));
		let mut fSlow22: f32 = (1.0 / fSlow21);
		let mut fSlow23: f32 = (((fSlow22 + 1.0) / fSlow21) + 1.0);
		let mut fSlow24: f32 = (1.0 / fSlow23);
		let mut fSlow25: f32 = (fSlow22 + 1.0);
		let mut fSlow26: f32 = (0.0 - ((1.0 - fSlow22) / fSlow25));
		let mut fSlow27: f32 = (1.0 / fSlow25);
		let mut fSlow28: f32 = (1.0 / mydsp_faustpower2_f(fSlow21));
		let mut fSlow29: f32 = (2.0 * (1.0 - fSlow28));
		let mut fSlow30: f32 = (((fSlow22 + -1.0) / fSlow21) + 1.0);
		let mut fSlow31: f32 = (1.0 / (fSlow23 * fSlow12));
		let mut fSlow32: f32 = (2.0 * (1.0 - fSlow16));
		let mut fSlow33: f32 = (((fSlow13 + -1.0) / fSlow12) + 1.0);
		let mut fSlow34: f32 = (2.0 * (0.0 - fSlow16));
		let mut fSlow35: f32 = f32::tan((self.fConst3 * (self.fHslider5 as f32)));
		let mut fSlow36: f32 = (1.0 / fSlow35);
		let mut fSlow37: f32 = (1.0 / (((fSlow36 + 1.0) / fSlow35) + 1.0));
		let mut fSlow38: f32 = (1.0 / mydsp_faustpower2_f(fSlow35));
		let mut fSlow39: f32 = (2.0 * (1.0 - fSlow38));
		let mut fSlow40: f32 = (1.0 - ((1.0 - fSlow36) / fSlow35));
		let mut fSlow41: f32 = f32::tan((self.fConst3 * (self.fHslider6 as f32)));
		let mut fSlow42: f32 = (1.0 / fSlow41);
		let mut fSlow43: f32 = (1.0 / (((fSlow42 + 1.0) / fSlow41) + 1.0));
		let mut fSlow44: f32 = (1.0 / mydsp_faustpower2_f(fSlow41));
		let mut fSlow45: f32 = (2.0 * (1.0 - fSlow44));
		let mut fSlow46: f32 = (1.0 - ((1.0 - fSlow42) / fSlow41));
		let mut fSlow47: f32 = (self.fVslider1 as f32);
		let mut fSlow48: f32 = f32::exp((self.fConst1 * (fSlow9 / fSlow47)));
		let mut fSlow49: f32 = (((fSlow36 + 1.0) / fSlow35) + 1.0);
		let mut fSlow50: f32 = (1.0 / fSlow49);
		let mut fSlow51: f32 = (fSlow36 + 1.0);
		let mut fSlow52: f32 = (0.0 - ((1.0 - fSlow36) / fSlow51));
		let mut fSlow53: f32 = (1.0 / fSlow51);
		let mut fSlow54: f32 = (0.0 - fSlow36);
		let mut fSlow55: f32 = (1.0 / (fSlow14 * fSlow35));
		let mut fSlow56: f32 = (((fSlow36 + -1.0) / fSlow35) + 1.0);
		let mut fSlow57: f32 = (2.0 * (0.0 - fSlow38));
		let mut fSlow58: f32 = (1.0 / (((fSlow42 + 1.0) / fSlow41) + 1.0));
		let mut fSlow59: f32 = (self.fVslider2 as f32);
		let mut fSlow60: f32 = f32::exp((self.fConst1 * (fSlow9 / fSlow59)));
		let mut fSlow61: f32 = (fSlow42 + 1.0);
		let mut fSlow62: f32 = (0.0 - ((1.0 - fSlow42) / fSlow61));
		let mut fSlow63: f32 = (1.0 / fSlow61);
		let mut fSlow64: f32 = (0.0 - fSlow42);
		let mut fSlow65: f32 = (1.0 / (fSlow49 * fSlow41));
		let mut fSlow66: f32 = (((fSlow42 + -1.0) / fSlow41) + 1.0);
		let mut fSlow67: f32 = (2.0 * (0.0 - fSlow44));
		let mut fSlow68: f32 = (self.fVslider3 as f32);
		let mut fSlow69: f32 = f32::exp((self.fConst1 * (fSlow9 / fSlow68)));
		let mut fSlow70: f32 = (self.fVslider4 as f32);
		let mut fSlow71: f32 = f32::exp((self.fConst1 * (fSlow9 / fSlow70)));
		let mut fSlow72: f32 = (0.0 - fSlow22);
		let mut fSlow73: f32 = (2.0 * (0.0 - fSlow28));
		let mut fSlow74: f32 = (1.0 / (((fSlow13 + 1.0) / fSlow12) + 1.0));
		let mut fSlow75: f32 = (1.0 - ((1.0 - fSlow13) / fSlow12));
		let mut fSlow76: f32 = f32::powf(23.0, f32::floor(((0.318928987 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.533333361))))) + 0.5)));
		let mut fSlow77: f32 = (0.0 - (6.90775537 * fSlow76));
		let mut fSlow78: f32 = f32::exp((self.fConst1 * (fSlow77 / fSlow70)));
		let mut fSlow79: f32 = f32::exp((self.fConst1 * (fSlow77 / fSlow10)));
		let mut fSlow80: f32 = f32::exp((self.fConst1 * (fSlow77 / fSlow47)));
		let mut fSlow81: f32 = f32::exp((self.fConst1 * (fSlow77 / fSlow59)));
		let mut fSlow82: f32 = f32::exp((self.fConst1 * (fSlow77 / fSlow68)));
		let mut fSlow83: f32 = f32::powf(11.0, f32::floor(((0.417032391 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.266666681))))) + 0.5)));
		let mut fSlow84: f32 = (0.0 - (6.90775537 * fSlow83));
		let mut fSlow85: f32 = f32::exp((self.fConst1 * (fSlow84 / fSlow70)));
		let mut fSlow86: f32 = f32::exp((self.fConst1 * (fSlow84 / fSlow10)));
		let mut fSlow87: f32 = f32::exp((self.fConst1 * (fSlow84 / fSlow47)));
		let mut fSlow88: f32 = f32::exp((self.fConst1 * (fSlow84 / fSlow59)));
		let mut fSlow89: f32 = f32::exp((self.fConst1 * (fSlow84 / fSlow68)));
		let mut fSlow90: f32 = f32::powf(41.0, f32::floor(((0.26928252 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.800000012))))) + 0.5)));
		let mut fSlow91: f32 = (0.0 - (6.90775537 * fSlow90));
		let mut fSlow92: f32 = f32::exp((self.fConst1 * (fSlow91 / fSlow70)));
		let mut fSlow93: f32 = f32::exp((self.fConst1 * (fSlow91 / fSlow10)));
		let mut fSlow94: f32 = f32::exp((self.fConst1 * (fSlow91 / fSlow47)));
		let mut fSlow95: f32 = f32::exp((self.fConst1 * (fSlow91 / fSlow59)));
		let mut fSlow96: f32 = f32::exp((self.fConst1 * (fSlow91 / fSlow68)));
		let mut fSlow97: f32 = f32::powf(5.0, f32::floor(((0.62133491 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.13333334))))) + 0.5)));
		let mut fSlow98: f32 = (0.0 - (6.90775537 * fSlow97));
		let mut fSlow99: f32 = f32::exp((self.fConst1 * (fSlow98 / fSlow70)));
		let mut fSlow100: f32 = f32::exp((self.fConst1 * (fSlow98 / fSlow10)));
		let mut fSlow101: f32 = f32::exp((self.fConst1 * (fSlow98 / fSlow47)));
		let mut fSlow102: f32 = f32::exp((self.fConst1 * (fSlow98 / fSlow59)));
		let mut fSlow103: f32 = f32::exp((self.fConst1 * (fSlow98 / fSlow68)));
		let mut fSlow104: f32 = f32::powf(31.0, f32::floor(((0.291206688 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.666666687))))) + 0.5)));
		let mut fSlow105: f32 = (0.0 - (6.90775537 * fSlow104));
		let mut fSlow106: f32 = f32::exp((self.fConst1 * (fSlow105 / fSlow70)));
		let mut fSlow107: f32 = f32::exp((self.fConst1 * (fSlow105 / fSlow10)));
		let mut fSlow108: f32 = f32::exp((self.fConst1 * (fSlow105 / fSlow47)));
		let mut fSlow109: f32 = f32::exp((self.fConst1 * (fSlow105 / fSlow59)));
		let mut fSlow110: f32 = f32::exp((self.fConst1 * (fSlow105 / fSlow68)));
		let mut fSlow111: f32 = f32::powf(17.0, f32::floor(((0.352956116 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.400000006))))) + 0.5)));
		let mut fSlow112: f32 = (0.0 - (6.90775537 * fSlow111));
		let mut fSlow113: f32 = f32::exp((self.fConst1 * (fSlow112 / fSlow70)));
		let mut fSlow114: f32 = f32::exp((self.fConst1 * (fSlow112 / fSlow10)));
		let mut fSlow115: f32 = f32::exp((self.fConst1 * (fSlow112 / fSlow47)));
		let mut fSlow116: f32 = f32::exp((self.fConst1 * (fSlow112 / fSlow59)));
		let mut fSlow117: f32 = f32::exp((self.fConst1 * (fSlow112 / fSlow68)));
		let mut fSlow118: f32 = f32::powf(47.0, f32::floor(((0.259730309 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.933333337))))) + 0.5)));
		let mut fSlow119: f32 = (0.0 - (6.90775537 * fSlow118));
		let mut fSlow120: f32 = f32::exp((self.fConst1 * (fSlow119 / fSlow70)));
		let mut fSlow121: f32 = f32::exp((self.fConst1 * (fSlow119 / fSlow10)));
		let mut fSlow122: f32 = f32::exp((self.fConst1 * (fSlow119 / fSlow47)));
		let mut fSlow123: f32 = f32::exp((self.fConst1 * (fSlow119 / fSlow59)));
		let mut fSlow124: f32 = f32::exp((self.fConst1 * (fSlow119 / fSlow68)));
		let mut fSlow125: f32 = f32::powf(3.0, f32::floor(((0.91023922 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.0666666701))))) + 0.5)));
		let mut fSlow126: f32 = (0.0 - (6.90775537 * fSlow125));
		let mut fSlow127: f32 = f32::exp((self.fConst1 * (fSlow126 / fSlow70)));
		let mut fSlow128: f32 = f32::exp((self.fConst1 * (fSlow126 / fSlow10)));
		let mut fSlow129: f32 = f32::exp((self.fConst1 * (fSlow126 / fSlow47)));
		let mut fSlow130: f32 = f32::exp((self.fConst1 * (fSlow126 / fSlow59)));
		let mut fSlow131: f32 = f32::exp((self.fConst1 * (fSlow126 / fSlow68)));
		let mut fSlow132: f32 = f32::powf(29.0, f32::floor(((0.296974212 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.600000024))))) + 0.5)));
		let mut fSlow133: f32 = (0.0 - (6.90775537 * fSlow132));
		let mut fSlow134: f32 = f32::exp((self.fConst1 * (fSlow133 / fSlow70)));
		let mut fSlow135: f32 = f32::exp((self.fConst1 * (fSlow133 / fSlow10)));
		let mut fSlow136: f32 = f32::exp((self.fConst1 * (fSlow133 / fSlow47)));
		let mut fSlow137: f32 = f32::exp((self.fConst1 * (fSlow133 / fSlow59)));
		let mut fSlow138: f32 = f32::exp((self.fConst1 * (fSlow133 / fSlow68)));
		let mut fSlow139: f32 = f32::powf(13.0, f32::floor(((0.38987124 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.333333343))))) + 0.5)));
		let mut fSlow140: f32 = (0.0 - (6.90775537 * fSlow139));
		let mut fSlow141: f32 = f32::exp((self.fConst1 * (fSlow140 / fSlow70)));
		let mut fSlow142: f32 = f32::exp((self.fConst1 * (fSlow140 / fSlow10)));
		let mut fSlow143: f32 = f32::exp((self.fConst1 * (fSlow140 / fSlow47)));
		let mut fSlow144: f32 = f32::exp((self.fConst1 * (fSlow140 / fSlow59)));
		let mut fSlow145: f32 = f32::exp((self.fConst1 * (fSlow140 / fSlow68)));
		let mut fSlow146: f32 = f32::powf(43.0, f32::floor(((0.265872598 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.866666675))))) + 0.5)));
		let mut fSlow147: f32 = (0.0 - (6.90775537 * fSlow146));
		let mut fSlow148: f32 = f32::exp((self.fConst1 * (fSlow147 / fSlow70)));
		let mut fSlow149: f32 = f32::exp((self.fConst1 * (fSlow147 / fSlow10)));
		let mut fSlow150: f32 = f32::exp((self.fConst1 * (fSlow147 / fSlow47)));
		let mut fSlow151: f32 = f32::exp((self.fConst1 * (fSlow147 / fSlow59)));
		let mut fSlow152: f32 = f32::exp((self.fConst1 * (fSlow147 / fSlow68)));
		let mut fSlow153: f32 = f32::powf(7.0, f32::floor(((0.513898313 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.200000003))))) + 0.5)));
		let mut fSlow154: f32 = (0.0 - (6.90775537 * fSlow153));
		let mut fSlow155: f32 = f32::exp((self.fConst1 * (fSlow154 / fSlow70)));
		let mut fSlow156: f32 = f32::exp((self.fConst1 * (fSlow154 / fSlow10)));
		let mut fSlow157: f32 = f32::exp((self.fConst1 * (fSlow154 / fSlow47)));
		let mut fSlow158: f32 = f32::exp((self.fConst1 * (fSlow154 / fSlow59)));
		let mut fSlow159: f32 = f32::exp((self.fConst1 * (fSlow154 / fSlow68)));
		let mut fSlow160: f32 = f32::powf(37.0, f32::floor(((0.276937902 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.733333349))))) + 0.5)));
		let mut fSlow161: f32 = (0.0 - (6.90775537 * fSlow160));
		let mut fSlow162: f32 = f32::exp((self.fConst1 * (fSlow161 / fSlow70)));
		let mut fSlow163: f32 = f32::exp((self.fConst1 * (fSlow161 / fSlow10)));
		let mut fSlow164: f32 = f32::exp((self.fConst1 * (fSlow161 / fSlow47)));
		let mut fSlow165: f32 = f32::exp((self.fConst1 * (fSlow161 / fSlow59)));
		let mut fSlow166: f32 = f32::exp((self.fConst1 * (fSlow161 / fSlow68)));
		let mut fSlow167: f32 = f32::powf(19.0, f32::floor(((0.339623272 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 0.466666669))))) + 0.5)));
		let mut fSlow168: f32 = (0.0 - (6.90775537 * fSlow167));
		let mut fSlow169: f32 = f32::exp((self.fConst1 * (fSlow168 / fSlow70)));
		let mut fSlow170: f32 = f32::exp((self.fConst1 * (fSlow168 / fSlow10)));
		let mut fSlow171: f32 = f32::exp((self.fConst1 * (fSlow168 / fSlow47)));
		let mut fSlow172: f32 = f32::exp((self.fConst1 * (fSlow168 / fSlow59)));
		let mut fSlow173: f32 = f32::exp((self.fConst1 * (fSlow168 / fSlow68)));
		let mut fSlow174: f32 = f32::powf(53.0, f32::floor(((0.251870662 * f32::log((self.fConst2 * (fSlow6 * f32::powf(fSlow7, 1.0))))) + 0.5)));
		let mut fSlow175: f32 = (0.0 - (6.90775537 * fSlow174));
		let mut fSlow176: f32 = f32::exp((self.fConst1 * (fSlow175 / fSlow70)));
		let mut fSlow177: f32 = f32::exp((self.fConst1 * (fSlow175 / fSlow10)));
		let mut fSlow178: f32 = f32::exp((self.fConst1 * (fSlow175 / fSlow47)));
		let mut fSlow179: f32 = f32::exp((self.fConst1 * (fSlow175 / fSlow59)));
		let mut fSlow180: f32 = f32::exp((self.fConst1 * (fSlow175 / fSlow68)));
		let mut iSlow181: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow8 + -1.0))) as i32);
		let mut fSlow182: f32 = (self.fButton3 as f32);
		let mut iSlow183: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow125 + -1.0))) as i32);
		let mut iSlow184: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow97 + -1.0))) as i32);
		let mut iSlow185: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow153 + -1.0))) as i32);
		let mut iSlow186: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow83 + -1.0))) as i32);
		let mut iSlow187: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow139 + -1.0))) as i32);
		let mut iSlow188: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow111 + -1.0))) as i32);
		let mut iSlow189: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow167 + -1.0))) as i32);
		let mut iSlow190: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow76 + -1.0))) as i32);
		let mut iSlow191: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow132 + -1.0))) as i32);
		let mut iSlow192: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow104 + -1.0))) as i32);
		let mut iSlow193: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow160 + -1.0))) as i32);
		let mut iSlow194: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow90 + -1.0))) as i32);
		let mut iSlow195: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow146 + -1.0))) as i32);
		let mut iSlow196: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow118 + -1.0))) as i32);
		let mut iSlow197: i32 = (f32::min(8192.0, f32::max(0.0, (fSlow174 + -1.0))) as i32);
		let mut i: i32 = 0;
		loop {
			self.iRec17[0] = ((1103515245 * self.iRec17[1]) + 12345);
			self.fRec16[0] = (((0.522189379 * self.fRec16[3]) + ((4.65661287e-10 * (self.iRec17[0] as f32)) + (2.49495602 * self.fRec16[1]))) - (2.0172658 * self.fRec16[2]));
			let mut fTemp0: f32 = (fSlow1 * (((0.0499220341 * self.fRec16[0]) + (0.0506126992 * self.fRec16[2])) - ((0.0959935337 * self.fRec16[1]) + (0.00440878607 * self.fRec16[3]))));
			self.fVec0[0] = fSlow2;
			let mut iTemp1: i32 = (((fSlow2 - self.fVec0[1]) > 0.0) as i32);
			self.fVec1[0] = fSlow3;
			let mut iTemp2: i32 = (((fSlow3 - self.fVec1[1]) > 0.0) as i32);
			let mut fTemp3: f32 = (fSlow4 * (inputs[2][i as usize] as f32));
			self.fRec23[0] = ((fSlow26 * self.fRec23[1]) + (fSlow27 * (self.fRec0[1] + self.fRec0[2])));
			self.fRec22[0] = (self.fRec23[0] - (fSlow24 * ((fSlow29 * self.fRec22[1]) + (fSlow30 * self.fRec22[2]))));
			let mut fTemp4: f32 = (self.fRec22[2] + (self.fRec22[0] + (2.0 * self.fRec22[1])));
			let mut fTemp5: f32 = (fSlow24 * fTemp4);
			self.fVec2[0] = fTemp5;
			self.fRec21[0] = ((fSlow18 * self.fRec21[1]) + (fSlow19 * ((fSlow20 * self.fVec2[1]) + (fSlow31 * fTemp4))));
			self.fRec20[0] = (self.fRec21[0] - (fSlow15 * ((fSlow32 * self.fRec20[1]) + (fSlow33 * self.fRec20[2]))));
			let mut fTemp6: f32 = (fSlow39 * self.fRec19[1]);
			self.fRec19[0] = ((fSlow15 * ((fSlow16 * self.fRec20[2]) + ((fSlow16 * self.fRec20[0]) + (fSlow34 * self.fRec20[1])))) - (fSlow37 * (fTemp6 + (fSlow40 * self.fRec19[2]))));
			let mut fTemp7: f32 = (fSlow45 * self.fRec18[1]);
			self.fRec18[0] = ((self.fRec19[2] + (fSlow37 * (fTemp6 + (fSlow40 * self.fRec19[0])))) - (fSlow43 * (fTemp7 + (fSlow46 * self.fRec18[2]))));
			self.fRec28[0] = ((fSlow18 * self.fRec28[1]) + (fSlow19 * (fTemp5 + self.fVec2[1])));
			self.fRec27[0] = (self.fRec28[0] - (fSlow15 * ((fSlow32 * self.fRec27[1]) + (fSlow33 * self.fRec27[2]))));
			let mut fTemp8: f32 = (self.fRec27[2] + (self.fRec27[0] + (2.0 * self.fRec27[1])));
			let mut fTemp9: f32 = (fSlow15 * fTemp8);
			self.fVec3[0] = fTemp9;
			self.fRec26[0] = ((fSlow52 * self.fRec26[1]) + (fSlow53 * ((fSlow54 * self.fVec3[1]) + (fSlow55 * fTemp8))));
			self.fRec25[0] = (self.fRec26[0] - (fSlow50 * ((fSlow39 * self.fRec25[1]) + (fSlow56 * self.fRec25[2]))));
			let mut fTemp10: f32 = (fSlow45 * self.fRec24[1]);
			self.fRec24[0] = ((fSlow50 * (((fSlow38 * self.fRec25[0]) + (fSlow57 * self.fRec25[1])) + (fSlow38 * self.fRec25[2]))) - (fSlow43 * (fTemp10 + (fSlow46 * self.fRec24[2]))));
			self.fRec32[0] = ((fSlow52 * self.fRec32[1]) + (fSlow53 * (fTemp9 + self.fVec3[1])));
			self.fRec31[0] = (self.fRec32[0] - (fSlow50 * ((fSlow39 * self.fRec31[1]) + (fSlow56 * self.fRec31[2]))));
			let mut fTemp11: f32 = (self.fRec31[2] + (self.fRec31[0] + (2.0 * self.fRec31[1])));
			let mut fTemp12: f32 = (fSlow50 * fTemp11);
			self.fVec4[0] = fTemp12;
			self.fRec30[0] = ((fSlow62 * self.fRec30[1]) + (fSlow63 * ((fSlow64 * self.fVec4[1]) + (fSlow65 * fTemp11))));
			self.fRec29[0] = (self.fRec30[0] - (fSlow58 * ((fSlow45 * self.fRec29[1]) + (fSlow66 * self.fRec29[2]))));
			self.fRec34[0] = ((fSlow62 * self.fRec34[1]) + (fSlow63 * (fTemp12 + self.fVec4[1])));
			self.fRec33[0] = (self.fRec34[0] - (fSlow58 * ((fSlow45 * self.fRec33[1]) + (fSlow66 * self.fRec33[2]))));
			self.fRec39[0] = ((fSlow26 * self.fRec39[1]) + (fSlow27 * ((fSlow22 * self.fRec0[1]) + (fSlow72 * self.fRec0[2]))));
			self.fRec38[0] = (self.fRec39[0] - (fSlow24 * ((fSlow29 * self.fRec38[1]) + (fSlow30 * self.fRec38[2]))));
			let mut fTemp13: f32 = (fSlow32 * self.fRec37[1]);
			self.fRec37[0] = ((fSlow24 * (((fSlow28 * self.fRec38[0]) + (fSlow73 * self.fRec38[1])) + (fSlow28 * self.fRec38[2]))) - (fSlow74 * ((fSlow75 * self.fRec37[2]) + fTemp13)));
			let mut fTemp14: f32 = (fSlow39 * self.fRec36[1]);
			self.fRec36[0] = ((self.fRec37[2] + (fSlow74 * (fTemp13 + (fSlow75 * self.fRec37[0])))) - (fSlow37 * ((fSlow40 * self.fRec36[2]) + fTemp14)));
			let mut fTemp15: f32 = (fSlow45 * self.fRec35[1]);
			self.fRec35[0] = ((self.fRec36[2] + (fSlow37 * (fTemp14 + (fSlow40 * self.fRec36[0])))) - (fSlow43 * ((fSlow46 * self.fRec35[2]) + fTemp15)));
			let mut fTemp16: f32 = ((((fSlow11 * (self.fRec18[2] + (fSlow43 * (fTemp7 + (fSlow46 * self.fRec18[0]))))) + (fSlow48 * (self.fRec24[2] + (fSlow43 * (fTemp10 + (fSlow46 * self.fRec24[0])))))) + (fSlow58 * ((fSlow60 * (((fSlow44 * self.fRec29[0]) + (fSlow67 * self.fRec29[1])) + (fSlow44 * self.fRec29[2]))) + (fSlow69 * (self.fRec33[2] + (self.fRec33[0] + (2.0 * self.fRec33[1]))))))) + (fSlow71 * (self.fRec35[2] + (fSlow43 * (fTemp15 + (fSlow46 * self.fRec35[0]))))));
			self.fRec44[0] = ((fSlow26 * self.fRec44[1]) + (fSlow27 * ((fSlow22 * self.fRec8[1]) + (fSlow72 * self.fRec8[2]))));
			self.fRec43[0] = (self.fRec44[0] - (fSlow24 * ((fSlow29 * self.fRec43[1]) + (fSlow30 * self.fRec43[2]))));
			let mut fTemp17: f32 = (fSlow32 * self.fRec42[1]);
			self.fRec42[0] = ((fSlow24 * (((fSlow28 * self.fRec43[0]) + (fSlow73 * self.fRec43[1])) + (fSlow28 * self.fRec43[2]))) - (fSlow74 * (fTemp17 + (fSlow75 * self.fRec42[2]))));
			let mut fTemp18: f32 = (fSlow39 * self.fRec41[1]);
			self.fRec41[0] = ((self.fRec42[2] + (fSlow74 * (fTemp17 + (fSlow75 * self.fRec42[0])))) - (fSlow37 * (fTemp18 + (fSlow40 * self.fRec41[2]))));
			let mut fTemp19: f32 = (fSlow45 * self.fRec40[1]);
			self.fRec40[0] = ((self.fRec41[2] + (fSlow37 * (fTemp18 + (fSlow40 * self.fRec41[0])))) - (fSlow43 * (fTemp19 + (fSlow46 * self.fRec40[2]))));
			self.fRec50[0] = ((fSlow26 * self.fRec50[1]) + (fSlow27 * (self.fRec8[1] + self.fRec8[2])));
			self.fRec49[0] = (self.fRec50[0] - (fSlow24 * ((fSlow29 * self.fRec49[1]) + (fSlow30 * self.fRec49[2]))));
			let mut fTemp20: f32 = (self.fRec49[2] + (self.fRec49[0] + (2.0 * self.fRec49[1])));
			let mut fTemp21: f32 = (fSlow24 * fTemp20);
			self.fVec5[0] = fTemp21;
			self.fRec48[0] = ((fSlow18 * self.fRec48[1]) + (fSlow19 * ((fSlow20 * self.fVec5[1]) + (fSlow31 * fTemp20))));
			self.fRec47[0] = (self.fRec48[0] - (fSlow15 * ((fSlow32 * self.fRec47[1]) + (fSlow33 * self.fRec47[2]))));
			let mut fTemp22: f32 = (fSlow39 * self.fRec46[1]);
			self.fRec46[0] = ((fSlow15 * (((fSlow16 * self.fRec47[0]) + (fSlow34 * self.fRec47[1])) + (fSlow16 * self.fRec47[2]))) - (fSlow37 * (fTemp22 + (fSlow40 * self.fRec46[2]))));
			let mut fTemp23: f32 = (fSlow45 * self.fRec45[1]);
			self.fRec45[0] = ((self.fRec46[2] + (fSlow37 * (fTemp22 + (fSlow40 * self.fRec46[0])))) - (fSlow43 * (fTemp23 + (fSlow46 * self.fRec45[2]))));
			self.fRec55[0] = ((fSlow18 * self.fRec55[1]) + (fSlow19 * (self.fVec5[1] + fTemp21)));
			self.fRec54[0] = (self.fRec55[0] - (fSlow15 * ((fSlow32 * self.fRec54[1]) + (fSlow33 * self.fRec54[2]))));
			let mut fTemp24: f32 = (self.fRec54[2] + (self.fRec54[0] + (2.0 * self.fRec54[1])));
			let mut fTemp25: f32 = (fSlow15 * fTemp24);
			self.fVec6[0] = fTemp25;
			self.fRec53[0] = ((fSlow52 * self.fRec53[1]) + (fSlow53 * ((fSlow54 * self.fVec6[1]) + (fSlow55 * fTemp24))));
			self.fRec52[0] = (self.fRec53[0] - (fSlow50 * ((fSlow39 * self.fRec52[1]) + (fSlow56 * self.fRec52[2]))));
			let mut fTemp26: f32 = (fSlow45 * self.fRec51[1]);
			self.fRec51[0] = ((fSlow50 * (((fSlow38 * self.fRec52[0]) + (fSlow57 * self.fRec52[1])) + (fSlow38 * self.fRec52[2]))) - (fSlow43 * (fTemp26 + (fSlow46 * self.fRec51[2]))));
			self.fRec59[0] = ((fSlow52 * self.fRec59[1]) + (fSlow53 * (self.fVec6[1] + fTemp25)));
			self.fRec58[0] = (self.fRec59[0] - (fSlow50 * ((fSlow39 * self.fRec58[1]) + (fSlow56 * self.fRec58[2]))));
			let mut fTemp27: f32 = (self.fRec58[2] + (self.fRec58[0] + (2.0 * self.fRec58[1])));
			let mut fTemp28: f32 = (fSlow50 * fTemp27);
			self.fVec7[0] = fTemp28;
			self.fRec57[0] = ((fSlow62 * self.fRec57[1]) + (fSlow63 * ((fSlow64 * self.fVec7[1]) + (fSlow65 * fTemp27))));
			self.fRec56[0] = (self.fRec57[0] - (fSlow58 * ((fSlow45 * self.fRec56[1]) + (fSlow66 * self.fRec56[2]))));
			self.fRec61[0] = ((fSlow62 * self.fRec61[1]) + (fSlow63 * (self.fVec7[1] + fTemp28)));
			self.fRec60[0] = (self.fRec61[0] - (fSlow58 * ((fSlow45 * self.fRec60[1]) + (fSlow66 * self.fRec60[2]))));
			let mut fTemp29: f32 = ((((fSlow78 * (self.fRec40[2] + (fSlow43 * (fTemp19 + (fSlow46 * self.fRec40[0]))))) + (fSlow79 * (self.fRec45[2] + (fSlow43 * (fTemp23 + (fSlow46 * self.fRec45[0])))))) + (fSlow80 * (self.fRec51[2] + (fSlow43 * (fTemp26 + (fSlow46 * self.fRec51[0])))))) + (fSlow58 * ((fSlow81 * (((fSlow44 * self.fRec56[0]) + (fSlow67 * self.fRec56[1])) + (fSlow44 * self.fRec56[2]))) + (fSlow82 * (self.fRec60[2] + (self.fRec60[0] + (2.0 * self.fRec60[1])))))));
			let mut fTemp30: f32 = (fTemp16 + fTemp29);
			self.fRec66[0] = ((fSlow26 * self.fRec66[1]) + (fSlow27 * ((fSlow22 * self.fRec4[1]) + (fSlow72 * self.fRec4[2]))));
			self.fRec65[0] = (self.fRec66[0] - (fSlow24 * ((fSlow29 * self.fRec65[1]) + (fSlow30 * self.fRec65[2]))));
			let mut fTemp31: f32 = (fSlow32 * self.fRec64[1]);
			self.fRec64[0] = ((fSlow24 * (((fSlow28 * self.fRec65[0]) + (fSlow73 * self.fRec65[1])) + (fSlow28 * self.fRec65[2]))) - (fSlow74 * (fTemp31 + (fSlow75 * self.fRec64[2]))));
			let mut fTemp32: f32 = (fSlow39 * self.fRec63[1]);
			self.fRec63[0] = ((self.fRec64[2] + (fSlow74 * (fTemp31 + (fSlow75 * self.fRec64[0])))) - (fSlow37 * (fTemp32 + (fSlow40 * self.fRec63[2]))));
			let mut fTemp33: f32 = (fSlow45 * self.fRec62[1]);
			self.fRec62[0] = ((self.fRec63[2] + (fSlow37 * (fTemp32 + (fSlow40 * self.fRec63[0])))) - (fSlow43 * (fTemp33 + (fSlow46 * self.fRec62[2]))));
			self.fRec72[0] = ((fSlow26 * self.fRec72[1]) + (fSlow27 * (self.fRec4[1] + self.fRec4[2])));
			self.fRec71[0] = (self.fRec72[0] - (fSlow24 * ((fSlow29 * self.fRec71[1]) + (fSlow30 * self.fRec71[2]))));
			let mut fTemp34: f32 = (self.fRec71[2] + (self.fRec71[0] + (2.0 * self.fRec71[1])));
			let mut fTemp35: f32 = (fSlow24 * fTemp34);
			self.fVec8[0] = fTemp35;
			self.fRec70[0] = ((fSlow18 * self.fRec70[1]) + (fSlow19 * ((fSlow20 * self.fVec8[1]) + (fSlow31 * fTemp34))));
			self.fRec69[0] = (self.fRec70[0] - (fSlow15 * ((fSlow32 * self.fRec69[1]) + (fSlow33 * self.fRec69[2]))));
			let mut fTemp36: f32 = (fSlow39 * self.fRec68[1]);
			self.fRec68[0] = ((fSlow15 * (((fSlow16 * self.fRec69[0]) + (fSlow34 * self.fRec69[1])) + (fSlow16 * self.fRec69[2]))) - (fSlow37 * (fTemp36 + (fSlow40 * self.fRec68[2]))));
			let mut fTemp37: f32 = (fSlow45 * self.fRec67[1]);
			self.fRec67[0] = ((self.fRec68[2] + (fSlow37 * (fTemp36 + (fSlow40 * self.fRec68[0])))) - (fSlow43 * (fTemp37 + (fSlow46 * self.fRec67[2]))));
			self.fRec77[0] = ((fSlow18 * self.fRec77[1]) + (fSlow19 * (self.fVec8[1] + fTemp35)));
			self.fRec76[0] = (self.fRec77[0] - (fSlow15 * ((fSlow32 * self.fRec76[1]) + (fSlow33 * self.fRec76[2]))));
			let mut fTemp38: f32 = (self.fRec76[2] + (self.fRec76[0] + (2.0 * self.fRec76[1])));
			let mut fTemp39: f32 = (fSlow15 * fTemp38);
			self.fVec9[0] = fTemp39;
			self.fRec75[0] = ((fSlow52 * self.fRec75[1]) + (fSlow53 * ((fSlow54 * self.fVec9[1]) + (fSlow55 * fTemp38))));
			self.fRec74[0] = (self.fRec75[0] - (fSlow50 * ((fSlow39 * self.fRec74[1]) + (fSlow56 * self.fRec74[2]))));
			let mut fTemp40: f32 = (fSlow45 * self.fRec73[1]);
			self.fRec73[0] = ((fSlow50 * (((fSlow38 * self.fRec74[0]) + (fSlow57 * self.fRec74[1])) + (fSlow38 * self.fRec74[2]))) - (fSlow43 * (fTemp40 + (fSlow46 * self.fRec73[2]))));
			self.fRec81[0] = ((fSlow52 * self.fRec81[1]) + (fSlow53 * (self.fVec9[1] + fTemp39)));
			self.fRec80[0] = (self.fRec81[0] - (fSlow50 * ((fSlow39 * self.fRec80[1]) + (fSlow56 * self.fRec80[2]))));
			let mut fTemp41: f32 = (self.fRec80[2] + (self.fRec80[0] + (2.0 * self.fRec80[1])));
			let mut fTemp42: f32 = (fSlow50 * fTemp41);
			self.fVec10[0] = fTemp42;
			self.fRec79[0] = ((fSlow62 * self.fRec79[1]) + (fSlow63 * ((fSlow64 * self.fVec10[1]) + (fSlow65 * fTemp41))));
			self.fRec78[0] = (self.fRec79[0] - (fSlow58 * ((fSlow45 * self.fRec78[1]) + (fSlow66 * self.fRec78[2]))));
			self.fRec83[0] = ((fSlow62 * self.fRec83[1]) + (fSlow63 * (self.fVec10[1] + fTemp42)));
			self.fRec82[0] = (self.fRec83[0] - (fSlow58 * ((fSlow45 * self.fRec82[1]) + (fSlow66 * self.fRec82[2]))));
			let mut fTemp43: f32 = ((((fSlow85 * (self.fRec62[2] + (fSlow43 * (fTemp33 + (fSlow46 * self.fRec62[0]))))) + (fSlow86 * (self.fRec67[2] + (fSlow43 * (fTemp37 + (fSlow46 * self.fRec67[0])))))) + (fSlow87 * (self.fRec73[2] + (fSlow43 * (fTemp40 + (fSlow46 * self.fRec73[0])))))) + (fSlow58 * ((fSlow88 * (((fSlow44 * self.fRec78[0]) + (fSlow67 * self.fRec78[1])) + (fSlow44 * self.fRec78[2]))) + (fSlow89 * (self.fRec82[2] + (self.fRec82[0] + (2.0 * self.fRec82[1])))))));
			self.fRec88[0] = ((fSlow26 * self.fRec88[1]) + (fSlow27 * ((fSlow22 * self.fRec12[1]) + (fSlow72 * self.fRec12[2]))));
			self.fRec87[0] = (self.fRec88[0] - (fSlow24 * ((fSlow29 * self.fRec87[1]) + (fSlow30 * self.fRec87[2]))));
			let mut fTemp44: f32 = (fSlow32 * self.fRec86[1]);
			self.fRec86[0] = ((fSlow24 * (((fSlow28 * self.fRec87[0]) + (fSlow73 * self.fRec87[1])) + (fSlow28 * self.fRec87[2]))) - (fSlow74 * (fTemp44 + (fSlow75 * self.fRec86[2]))));
			let mut fTemp45: f32 = (fSlow39 * self.fRec85[1]);
			self.fRec85[0] = ((self.fRec86[2] + (fSlow74 * (fTemp44 + (fSlow75 * self.fRec86[0])))) - (fSlow37 * (fTemp45 + (fSlow40 * self.fRec85[2]))));
			let mut fTemp46: f32 = (fSlow45 * self.fRec84[1]);
			self.fRec84[0] = ((self.fRec85[2] + (fSlow37 * (fTemp45 + (fSlow40 * self.fRec85[0])))) - (fSlow43 * (fTemp46 + (fSlow46 * self.fRec84[2]))));
			self.fRec94[0] = ((fSlow26 * self.fRec94[1]) + (fSlow27 * (self.fRec12[1] + self.fRec12[2])));
			self.fRec93[0] = (self.fRec94[0] - (fSlow24 * ((fSlow29 * self.fRec93[1]) + (fSlow30 * self.fRec93[2]))));
			let mut fTemp47: f32 = (self.fRec93[2] + (self.fRec93[0] + (2.0 * self.fRec93[1])));
			let mut fTemp48: f32 = (fSlow24 * fTemp47);
			self.fVec11[0] = fTemp48;
			self.fRec92[0] = ((fSlow18 * self.fRec92[1]) + (fSlow19 * ((fSlow20 * self.fVec11[1]) + (fSlow31 * fTemp47))));
			self.fRec91[0] = (self.fRec92[0] - (fSlow15 * ((fSlow32 * self.fRec91[1]) + (fSlow33 * self.fRec91[2]))));
			let mut fTemp49: f32 = (fSlow39 * self.fRec90[1]);
			self.fRec90[0] = ((fSlow15 * (((fSlow16 * self.fRec91[0]) + (fSlow34 * self.fRec91[1])) + (fSlow16 * self.fRec91[2]))) - (fSlow37 * (fTemp49 + (fSlow40 * self.fRec90[2]))));
			let mut fTemp50: f32 = (fSlow45 * self.fRec89[1]);
			self.fRec89[0] = ((self.fRec90[2] + (fSlow37 * (fTemp49 + (fSlow40 * self.fRec90[0])))) - (fSlow43 * (fTemp50 + (fSlow46 * self.fRec89[2]))));
			self.fRec99[0] = ((fSlow18 * self.fRec99[1]) + (fSlow19 * (self.fVec11[1] + fTemp48)));
			self.fRec98[0] = (self.fRec99[0] - (fSlow15 * ((fSlow32 * self.fRec98[1]) + (fSlow33 * self.fRec98[2]))));
			let mut fTemp51: f32 = (self.fRec98[2] + (self.fRec98[0] + (2.0 * self.fRec98[1])));
			let mut fTemp52: f32 = (fSlow15 * fTemp51);
			self.fVec12[0] = fTemp52;
			self.fRec97[0] = ((fSlow52 * self.fRec97[1]) + (fSlow53 * ((fSlow54 * self.fVec12[1]) + (fSlow55 * fTemp51))));
			self.fRec96[0] = (self.fRec97[0] - (fSlow50 * ((fSlow39 * self.fRec96[1]) + (fSlow56 * self.fRec96[2]))));
			let mut fTemp53: f32 = (fSlow45 * self.fRec95[1]);
			self.fRec95[0] = ((fSlow50 * (((fSlow38 * self.fRec96[0]) + (fSlow57 * self.fRec96[1])) + (fSlow38 * self.fRec96[2]))) - (fSlow43 * (fTemp53 + (fSlow46 * self.fRec95[2]))));
			self.fRec103[0] = ((fSlow52 * self.fRec103[1]) + (fSlow53 * (self.fVec12[1] + fTemp52)));
			self.fRec102[0] = (self.fRec103[0] - (fSlow50 * ((fSlow39 * self.fRec102[1]) + (fSlow56 * self.fRec102[2]))));
			let mut fTemp54: f32 = (self.fRec102[2] + (self.fRec102[0] + (2.0 * self.fRec102[1])));
			let mut fTemp55: f32 = (fSlow50 * fTemp54);
			self.fVec13[0] = fTemp55;
			self.fRec101[0] = ((fSlow62 * self.fRec101[1]) + (fSlow63 * ((fSlow64 * self.fVec13[1]) + (fSlow65 * fTemp54))));
			self.fRec100[0] = (self.fRec101[0] - (fSlow58 * ((fSlow45 * self.fRec100[1]) + (fSlow66 * self.fRec100[2]))));
			self.fRec105[0] = ((fSlow62 * self.fRec105[1]) + (fSlow63 * (self.fVec13[1] + fTemp55)));
			self.fRec104[0] = (self.fRec105[0] - (fSlow58 * ((fSlow45 * self.fRec104[1]) + (fSlow66 * self.fRec104[2]))));
			let mut fTemp56: f32 = ((((fSlow92 * (self.fRec84[2] + (fSlow43 * (fTemp46 + (fSlow46 * self.fRec84[0]))))) + (fSlow93 * (self.fRec89[2] + (fSlow43 * (fTemp50 + (fSlow46 * self.fRec89[0])))))) + (fSlow94 * (self.fRec95[2] + (fSlow43 * (fTemp53 + (fSlow46 * self.fRec95[0])))))) + (fSlow58 * ((fSlow95 * (((fSlow44 * self.fRec100[0]) + (fSlow67 * self.fRec100[1])) + (fSlow44 * self.fRec100[2]))) + (fSlow96 * (self.fRec104[2] + (self.fRec104[0] + (2.0 * self.fRec104[1])))))));
			let mut fTemp57: f32 = (fTemp43 + fTemp56);
			let mut fTemp58: f32 = (fTemp30 + fTemp57);
			self.fRec110[0] = ((fSlow26 * self.fRec110[1]) + (fSlow27 * ((fSlow22 * self.fRec2[1]) + (fSlow72 * self.fRec2[2]))));
			self.fRec109[0] = (self.fRec110[0] - (fSlow24 * ((fSlow29 * self.fRec109[1]) + (fSlow30 * self.fRec109[2]))));
			let mut fTemp59: f32 = (fSlow32 * self.fRec108[1]);
			self.fRec108[0] = ((fSlow24 * (((fSlow28 * self.fRec109[0]) + (fSlow73 * self.fRec109[1])) + (fSlow28 * self.fRec109[2]))) - (fSlow74 * (fTemp59 + (fSlow75 * self.fRec108[2]))));
			let mut fTemp60: f32 = (fSlow39 * self.fRec107[1]);
			self.fRec107[0] = ((self.fRec108[2] + (fSlow74 * (fTemp59 + (fSlow75 * self.fRec108[0])))) - (fSlow37 * (fTemp60 + (fSlow40 * self.fRec107[2]))));
			let mut fTemp61: f32 = (fSlow45 * self.fRec106[1]);
			self.fRec106[0] = ((self.fRec107[2] + (fSlow37 * (fTemp60 + (fSlow40 * self.fRec107[0])))) - (fSlow43 * (fTemp61 + (fSlow46 * self.fRec106[2]))));
			self.fRec116[0] = ((fSlow26 * self.fRec116[1]) + (fSlow27 * (self.fRec2[1] + self.fRec2[2])));
			self.fRec115[0] = (self.fRec116[0] - (fSlow24 * ((fSlow29 * self.fRec115[1]) + (fSlow30 * self.fRec115[2]))));
			let mut fTemp62: f32 = (self.fRec115[2] + (self.fRec115[0] + (2.0 * self.fRec115[1])));
			let mut fTemp63: f32 = (fSlow24 * fTemp62);
			self.fVec14[0] = fTemp63;
			self.fRec114[0] = ((fSlow18 * self.fRec114[1]) + (fSlow19 * ((fSlow20 * self.fVec14[1]) + (fSlow31 * fTemp62))));
			self.fRec113[0] = (self.fRec114[0] - (fSlow15 * ((fSlow32 * self.fRec113[1]) + (fSlow33 * self.fRec113[2]))));
			let mut fTemp64: f32 = (fSlow39 * self.fRec112[1]);
			self.fRec112[0] = ((fSlow15 * (((fSlow16 * self.fRec113[0]) + (fSlow34 * self.fRec113[1])) + (fSlow16 * self.fRec113[2]))) - (fSlow37 * (fTemp64 + (fSlow40 * self.fRec112[2]))));
			let mut fTemp65: f32 = (fSlow45 * self.fRec111[1]);
			self.fRec111[0] = ((self.fRec112[2] + (fSlow37 * (fTemp64 + (fSlow40 * self.fRec112[0])))) - (fSlow43 * (fTemp65 + (fSlow46 * self.fRec111[2]))));
			self.fRec121[0] = ((fSlow18 * self.fRec121[1]) + (fSlow19 * (self.fVec14[1] + fTemp63)));
			self.fRec120[0] = (self.fRec121[0] - (fSlow15 * ((fSlow32 * self.fRec120[1]) + (fSlow33 * self.fRec120[2]))));
			let mut fTemp66: f32 = (self.fRec120[2] + (self.fRec120[0] + (2.0 * self.fRec120[1])));
			let mut fTemp67: f32 = (fSlow15 * fTemp66);
			self.fVec15[0] = fTemp67;
			self.fRec119[0] = ((fSlow52 * self.fRec119[1]) + (fSlow53 * ((fSlow54 * self.fVec15[1]) + (fSlow55 * fTemp66))));
			self.fRec118[0] = (self.fRec119[0] - (fSlow50 * ((fSlow39 * self.fRec118[1]) + (fSlow56 * self.fRec118[2]))));
			let mut fTemp68: f32 = (fSlow45 * self.fRec117[1]);
			self.fRec117[0] = ((fSlow50 * (((fSlow38 * self.fRec118[0]) + (fSlow57 * self.fRec118[1])) + (fSlow38 * self.fRec118[2]))) - (fSlow43 * (fTemp68 + (fSlow46 * self.fRec117[2]))));
			self.fRec125[0] = ((fSlow52 * self.fRec125[1]) + (fSlow53 * (self.fVec15[1] + fTemp67)));
			self.fRec124[0] = (self.fRec125[0] - (fSlow50 * ((fSlow39 * self.fRec124[1]) + (fSlow56 * self.fRec124[2]))));
			let mut fTemp69: f32 = (self.fRec124[2] + (self.fRec124[0] + (2.0 * self.fRec124[1])));
			let mut fTemp70: f32 = (fSlow50 * fTemp69);
			self.fVec16[0] = fTemp70;
			self.fRec123[0] = ((fSlow62 * self.fRec123[1]) + (fSlow63 * ((fSlow64 * self.fVec16[1]) + (fSlow65 * fTemp69))));
			self.fRec122[0] = (self.fRec123[0] - (fSlow58 * ((fSlow45 * self.fRec122[1]) + (fSlow66 * self.fRec122[2]))));
			self.fRec127[0] = ((fSlow62 * self.fRec127[1]) + (fSlow63 * (self.fVec16[1] + fTemp70)));
			self.fRec126[0] = (self.fRec127[0] - (fSlow58 * ((fSlow45 * self.fRec126[1]) + (fSlow66 * self.fRec126[2]))));
			let mut fTemp71: f32 = ((((fSlow99 * (self.fRec106[2] + (fSlow43 * (fTemp61 + (fSlow46 * self.fRec106[0]))))) + (fSlow100 * (self.fRec111[2] + (fSlow43 * (fTemp65 + (fSlow46 * self.fRec111[0])))))) + (fSlow101 * (self.fRec117[2] + (fSlow43 * (fTemp68 + (fSlow46 * self.fRec117[0])))))) + (fSlow58 * ((fSlow102 * (((fSlow44 * self.fRec122[0]) + (fSlow67 * self.fRec122[1])) + (fSlow44 * self.fRec122[2]))) + (fSlow103 * (self.fRec126[2] + (self.fRec126[0] + (2.0 * self.fRec126[1])))))));
			self.fRec132[0] = ((fSlow26 * self.fRec132[1]) + (fSlow27 * ((fSlow22 * self.fRec10[1]) + (fSlow72 * self.fRec10[2]))));
			self.fRec131[0] = (self.fRec132[0] - (fSlow24 * ((fSlow29 * self.fRec131[1]) + (fSlow30 * self.fRec131[2]))));
			let mut fTemp72: f32 = (fSlow32 * self.fRec130[1]);
			self.fRec130[0] = ((fSlow24 * (((fSlow28 * self.fRec131[0]) + (fSlow73 * self.fRec131[1])) + (fSlow28 * self.fRec131[2]))) - (fSlow74 * (fTemp72 + (fSlow75 * self.fRec130[2]))));
			let mut fTemp73: f32 = (fSlow39 * self.fRec129[1]);
			self.fRec129[0] = ((self.fRec130[2] + (fSlow74 * (fTemp72 + (fSlow75 * self.fRec130[0])))) - (fSlow37 * (fTemp73 + (fSlow40 * self.fRec129[2]))));
			let mut fTemp74: f32 = (fSlow45 * self.fRec128[1]);
			self.fRec128[0] = ((self.fRec129[2] + (fSlow37 * (fTemp73 + (fSlow40 * self.fRec129[0])))) - (fSlow43 * (fTemp74 + (fSlow46 * self.fRec128[2]))));
			self.fRec138[0] = ((fSlow26 * self.fRec138[1]) + (fSlow27 * (self.fRec10[1] + self.fRec10[2])));
			self.fRec137[0] = (self.fRec138[0] - (fSlow24 * ((fSlow29 * self.fRec137[1]) + (fSlow30 * self.fRec137[2]))));
			let mut fTemp75: f32 = (self.fRec137[2] + (self.fRec137[0] + (2.0 * self.fRec137[1])));
			let mut fTemp76: f32 = (fSlow24 * fTemp75);
			self.fVec17[0] = fTemp76;
			self.fRec136[0] = ((fSlow18 * self.fRec136[1]) + (fSlow19 * ((fSlow20 * self.fVec17[1]) + (fSlow31 * fTemp75))));
			self.fRec135[0] = (self.fRec136[0] - (fSlow15 * ((fSlow32 * self.fRec135[1]) + (fSlow33 * self.fRec135[2]))));
			let mut fTemp77: f32 = (fSlow39 * self.fRec134[1]);
			self.fRec134[0] = ((fSlow15 * (((fSlow16 * self.fRec135[0]) + (fSlow34 * self.fRec135[1])) + (fSlow16 * self.fRec135[2]))) - (fSlow37 * (fTemp77 + (fSlow40 * self.fRec134[2]))));
			let mut fTemp78: f32 = (fSlow45 * self.fRec133[1]);
			self.fRec133[0] = ((self.fRec134[2] + (fSlow37 * (fTemp77 + (fSlow40 * self.fRec134[0])))) - (fSlow43 * (fTemp78 + (fSlow46 * self.fRec133[2]))));
			self.fRec143[0] = ((fSlow18 * self.fRec143[1]) + (fSlow19 * (self.fVec17[1] + fTemp76)));
			self.fRec142[0] = (self.fRec143[0] - (fSlow15 * ((fSlow32 * self.fRec142[1]) + (fSlow33 * self.fRec142[2]))));
			let mut fTemp79: f32 = (self.fRec142[2] + (self.fRec142[0] + (2.0 * self.fRec142[1])));
			let mut fTemp80: f32 = (fSlow15 * fTemp79);
			self.fVec18[0] = fTemp80;
			self.fRec141[0] = ((fSlow52 * self.fRec141[1]) + (fSlow53 * ((fSlow54 * self.fVec18[1]) + (fSlow55 * fTemp79))));
			self.fRec140[0] = (self.fRec141[0] - (fSlow50 * ((fSlow39 * self.fRec140[1]) + (fSlow56 * self.fRec140[2]))));
			let mut fTemp81: f32 = (fSlow45 * self.fRec139[1]);
			self.fRec139[0] = ((fSlow50 * (((fSlow38 * self.fRec140[0]) + (fSlow57 * self.fRec140[1])) + (fSlow38 * self.fRec140[2]))) - (fSlow43 * (fTemp81 + (fSlow46 * self.fRec139[2]))));
			self.fRec147[0] = ((fSlow52 * self.fRec147[1]) + (fSlow53 * (self.fVec18[1] + fTemp80)));
			self.fRec146[0] = (self.fRec147[0] - (fSlow50 * ((fSlow39 * self.fRec146[1]) + (fSlow56 * self.fRec146[2]))));
			let mut fTemp82: f32 = (self.fRec146[2] + (self.fRec146[0] + (2.0 * self.fRec146[1])));
			let mut fTemp83: f32 = (fSlow50 * fTemp82);
			self.fVec19[0] = fTemp83;
			self.fRec145[0] = ((fSlow62 * self.fRec145[1]) + (fSlow63 * ((fSlow64 * self.fVec19[1]) + (fSlow65 * fTemp82))));
			self.fRec144[0] = (self.fRec145[0] - (fSlow58 * ((fSlow45 * self.fRec144[1]) + (fSlow66 * self.fRec144[2]))));
			self.fRec149[0] = ((fSlow62 * self.fRec149[1]) + (fSlow63 * (self.fVec19[1] + fTemp83)));
			self.fRec148[0] = (self.fRec149[0] - (fSlow58 * ((fSlow45 * self.fRec148[1]) + (fSlow66 * self.fRec148[2]))));
			let mut fTemp84: f32 = ((((fSlow106 * (self.fRec128[2] + (fSlow43 * (fTemp74 + (fSlow46 * self.fRec128[0]))))) + (fSlow107 * (self.fRec133[2] + (fSlow43 * (fTemp78 + (fSlow46 * self.fRec133[0])))))) + (fSlow108 * (self.fRec139[2] + (fSlow43 * (fTemp81 + (fSlow46 * self.fRec139[0])))))) + (fSlow58 * ((fSlow109 * (((fSlow44 * self.fRec144[0]) + (fSlow67 * self.fRec144[1])) + (fSlow44 * self.fRec144[2]))) + (fSlow110 * (self.fRec148[2] + (self.fRec148[0] + (2.0 * self.fRec148[1])))))));
			let mut fTemp85: f32 = (fTemp71 + fTemp84);
			self.fRec154[0] = ((fSlow26 * self.fRec154[1]) + (fSlow27 * ((fSlow22 * self.fRec6[1]) + (fSlow72 * self.fRec6[2]))));
			self.fRec153[0] = (self.fRec154[0] - (fSlow24 * ((fSlow29 * self.fRec153[1]) + (fSlow30 * self.fRec153[2]))));
			let mut fTemp86: f32 = (fSlow32 * self.fRec152[1]);
			self.fRec152[0] = ((fSlow24 * (((fSlow28 * self.fRec153[0]) + (fSlow73 * self.fRec153[1])) + (fSlow28 * self.fRec153[2]))) - (fSlow74 * (fTemp86 + (fSlow75 * self.fRec152[2]))));
			let mut fTemp87: f32 = (fSlow39 * self.fRec151[1]);
			self.fRec151[0] = ((self.fRec152[2] + (fSlow74 * (fTemp86 + (fSlow75 * self.fRec152[0])))) - (fSlow37 * (fTemp87 + (fSlow40 * self.fRec151[2]))));
			let mut fTemp88: f32 = (fSlow45 * self.fRec150[1]);
			self.fRec150[0] = ((self.fRec151[2] + (fSlow37 * (fTemp87 + (fSlow40 * self.fRec151[0])))) - (fSlow43 * (fTemp88 + (fSlow46 * self.fRec150[2]))));
			self.fRec160[0] = ((fSlow26 * self.fRec160[1]) + (fSlow27 * (self.fRec6[1] + self.fRec6[2])));
			self.fRec159[0] = (self.fRec160[0] - (fSlow24 * ((fSlow29 * self.fRec159[1]) + (fSlow30 * self.fRec159[2]))));
			let mut fTemp89: f32 = (self.fRec159[2] + (self.fRec159[0] + (2.0 * self.fRec159[1])));
			let mut fTemp90: f32 = (fSlow24 * fTemp89);
			self.fVec20[0] = fTemp90;
			self.fRec158[0] = ((fSlow18 * self.fRec158[1]) + (fSlow19 * ((fSlow20 * self.fVec20[1]) + (fSlow31 * fTemp89))));
			self.fRec157[0] = (self.fRec158[0] - (fSlow15 * ((fSlow32 * self.fRec157[1]) + (fSlow33 * self.fRec157[2]))));
			let mut fTemp91: f32 = (fSlow39 * self.fRec156[1]);
			self.fRec156[0] = ((fSlow15 * (((fSlow16 * self.fRec157[0]) + (fSlow34 * self.fRec157[1])) + (fSlow16 * self.fRec157[2]))) - (fSlow37 * (fTemp91 + (fSlow40 * self.fRec156[2]))));
			let mut fTemp92: f32 = (fSlow45 * self.fRec155[1]);
			self.fRec155[0] = ((self.fRec156[2] + (fSlow37 * (fTemp91 + (fSlow40 * self.fRec156[0])))) - (fSlow43 * (fTemp92 + (fSlow46 * self.fRec155[2]))));
			self.fRec165[0] = ((fSlow18 * self.fRec165[1]) + (fSlow19 * (self.fVec20[1] + fTemp90)));
			self.fRec164[0] = (self.fRec165[0] - (fSlow15 * ((fSlow32 * self.fRec164[1]) + (fSlow33 * self.fRec164[2]))));
			let mut fTemp93: f32 = (self.fRec164[2] + (self.fRec164[0] + (2.0 * self.fRec164[1])));
			let mut fTemp94: f32 = (fSlow15 * fTemp93);
			self.fVec21[0] = fTemp94;
			self.fRec163[0] = ((fSlow52 * self.fRec163[1]) + (fSlow53 * ((fSlow54 * self.fVec21[1]) + (fSlow55 * fTemp93))));
			self.fRec162[0] = (self.fRec163[0] - (fSlow50 * ((fSlow39 * self.fRec162[1]) + (fSlow56 * self.fRec162[2]))));
			let mut fTemp95: f32 = (fSlow45 * self.fRec161[1]);
			self.fRec161[0] = ((fSlow50 * (((fSlow38 * self.fRec162[0]) + (fSlow57 * self.fRec162[1])) + (fSlow38 * self.fRec162[2]))) - (fSlow43 * (fTemp95 + (fSlow46 * self.fRec161[2]))));
			self.fRec169[0] = ((fSlow52 * self.fRec169[1]) + (fSlow53 * (self.fVec21[1] + fTemp94)));
			self.fRec168[0] = (self.fRec169[0] - (fSlow50 * ((fSlow39 * self.fRec168[1]) + (fSlow56 * self.fRec168[2]))));
			let mut fTemp96: f32 = (self.fRec168[2] + (self.fRec168[0] + (2.0 * self.fRec168[1])));
			let mut fTemp97: f32 = (fSlow50 * fTemp96);
			self.fVec22[0] = fTemp97;
			self.fRec167[0] = ((fSlow62 * self.fRec167[1]) + (fSlow63 * ((fSlow64 * self.fVec22[1]) + (fSlow65 * fTemp96))));
			self.fRec166[0] = (self.fRec167[0] - (fSlow58 * ((fSlow45 * self.fRec166[1]) + (fSlow66 * self.fRec166[2]))));
			self.fRec171[0] = ((fSlow62 * self.fRec171[1]) + (fSlow63 * (self.fVec22[1] + fTemp97)));
			self.fRec170[0] = (self.fRec171[0] - (fSlow58 * ((fSlow45 * self.fRec170[1]) + (fSlow66 * self.fRec170[2]))));
			let mut fTemp98: f32 = ((((fSlow113 * (self.fRec150[2] + (fSlow43 * (fTemp88 + (fSlow46 * self.fRec150[0]))))) + (fSlow114 * (self.fRec155[2] + (fSlow43 * (fTemp92 + (fSlow46 * self.fRec155[0])))))) + (fSlow115 * (self.fRec161[2] + (fSlow43 * (fTemp95 + (fSlow46 * self.fRec161[0])))))) + (fSlow58 * ((fSlow116 * (((fSlow44 * self.fRec166[0]) + (fSlow67 * self.fRec166[1])) + (fSlow44 * self.fRec166[2]))) + (fSlow117 * (self.fRec170[2] + (self.fRec170[0] + (2.0 * self.fRec170[1])))))));
			self.fRec176[0] = ((fSlow26 * self.fRec176[1]) + (fSlow27 * ((fSlow22 * self.fRec14[1]) + (fSlow72 * self.fRec14[2]))));
			self.fRec175[0] = (self.fRec176[0] - (fSlow24 * ((fSlow29 * self.fRec175[1]) + (fSlow30 * self.fRec175[2]))));
			let mut fTemp99: f32 = (fSlow32 * self.fRec174[1]);
			self.fRec174[0] = ((fSlow24 * (((fSlow28 * self.fRec175[0]) + (fSlow73 * self.fRec175[1])) + (fSlow28 * self.fRec175[2]))) - (fSlow74 * (fTemp99 + (fSlow75 * self.fRec174[2]))));
			let mut fTemp100: f32 = (fSlow39 * self.fRec173[1]);
			self.fRec173[0] = ((self.fRec174[2] + (fSlow74 * (fTemp99 + (fSlow75 * self.fRec174[0])))) - (fSlow37 * (fTemp100 + (fSlow40 * self.fRec173[2]))));
			let mut fTemp101: f32 = (fSlow45 * self.fRec172[1]);
			self.fRec172[0] = ((self.fRec173[2] + (fSlow37 * (fTemp100 + (fSlow40 * self.fRec173[0])))) - (fSlow43 * (fTemp101 + (fSlow46 * self.fRec172[2]))));
			self.fRec182[0] = ((fSlow26 * self.fRec182[1]) + (fSlow27 * (self.fRec14[1] + self.fRec14[2])));
			self.fRec181[0] = (self.fRec182[0] - (fSlow24 * ((fSlow29 * self.fRec181[1]) + (fSlow30 * self.fRec181[2]))));
			let mut fTemp102: f32 = (self.fRec181[2] + (self.fRec181[0] + (2.0 * self.fRec181[1])));
			let mut fTemp103: f32 = (fSlow24 * fTemp102);
			self.fVec23[0] = fTemp103;
			self.fRec180[0] = ((fSlow18 * self.fRec180[1]) + (fSlow19 * ((fSlow20 * self.fVec23[1]) + (fSlow31 * fTemp102))));
			self.fRec179[0] = (self.fRec180[0] - (fSlow15 * ((fSlow32 * self.fRec179[1]) + (fSlow33 * self.fRec179[2]))));
			let mut fTemp104: f32 = (fSlow39 * self.fRec178[1]);
			self.fRec178[0] = ((fSlow15 * (((fSlow16 * self.fRec179[0]) + (fSlow34 * self.fRec179[1])) + (fSlow16 * self.fRec179[2]))) - (fSlow37 * (fTemp104 + (fSlow40 * self.fRec178[2]))));
			let mut fTemp105: f32 = (fSlow45 * self.fRec177[1]);
			self.fRec177[0] = ((self.fRec178[2] + (fSlow37 * (fTemp104 + (fSlow40 * self.fRec178[0])))) - (fSlow43 * (fTemp105 + (fSlow46 * self.fRec177[2]))));
			self.fRec187[0] = ((fSlow18 * self.fRec187[1]) + (fSlow19 * (self.fVec23[1] + fTemp103)));
			self.fRec186[0] = (self.fRec187[0] - (fSlow15 * ((fSlow32 * self.fRec186[1]) + (fSlow33 * self.fRec186[2]))));
			let mut fTemp106: f32 = (self.fRec186[2] + (self.fRec186[0] + (2.0 * self.fRec186[1])));
			let mut fTemp107: f32 = (fSlow15 * fTemp106);
			self.fVec24[0] = fTemp107;
			self.fRec185[0] = ((fSlow52 * self.fRec185[1]) + (fSlow53 * ((fSlow54 * self.fVec24[1]) + (fSlow55 * fTemp106))));
			self.fRec184[0] = (self.fRec185[0] - (fSlow50 * ((fSlow39 * self.fRec184[1]) + (fSlow56 * self.fRec184[2]))));
			let mut fTemp108: f32 = (fSlow45 * self.fRec183[1]);
			self.fRec183[0] = ((fSlow50 * (((fSlow38 * self.fRec184[0]) + (fSlow57 * self.fRec184[1])) + (fSlow38 * self.fRec184[2]))) - (fSlow43 * (fTemp108 + (fSlow46 * self.fRec183[2]))));
			self.fRec191[0] = ((fSlow52 * self.fRec191[1]) + (fSlow53 * (self.fVec24[1] + fTemp107)));
			self.fRec190[0] = (self.fRec191[0] - (fSlow50 * ((fSlow39 * self.fRec190[1]) + (fSlow56 * self.fRec190[2]))));
			let mut fTemp109: f32 = (self.fRec190[2] + (self.fRec190[0] + (2.0 * self.fRec190[1])));
			let mut fTemp110: f32 = (fSlow50 * fTemp109);
			self.fVec25[0] = fTemp110;
			self.fRec189[0] = ((fSlow62 * self.fRec189[1]) + (fSlow63 * ((fSlow64 * self.fVec25[1]) + (fSlow65 * fTemp109))));
			self.fRec188[0] = (self.fRec189[0] - (fSlow58 * ((fSlow45 * self.fRec188[1]) + (fSlow66 * self.fRec188[2]))));
			self.fRec193[0] = ((fSlow62 * self.fRec193[1]) + (fSlow63 * (self.fVec25[1] + fTemp110)));
			self.fRec192[0] = (self.fRec193[0] - (fSlow58 * ((fSlow45 * self.fRec192[1]) + (fSlow66 * self.fRec192[2]))));
			let mut fTemp111: f32 = ((((fSlow120 * (self.fRec172[2] + (fSlow43 * (fTemp101 + (fSlow46 * self.fRec172[0]))))) + (fSlow121 * (self.fRec177[2] + (fSlow43 * (fTemp105 + (fSlow46 * self.fRec177[0])))))) + (fSlow122 * (self.fRec183[2] + (fSlow43 * (fTemp108 + (fSlow46 * self.fRec183[0])))))) + (fSlow58 * ((fSlow123 * (((fSlow44 * self.fRec188[0]) + (fSlow67 * self.fRec188[1])) + (fSlow44 * self.fRec188[2]))) + (fSlow124 * (self.fRec192[2] + (self.fRec192[0] + (2.0 * self.fRec192[1])))))));
			let mut fTemp112: f32 = (fTemp98 + fTemp111);
			let mut fTemp113: f32 = (fTemp85 + fTemp112);
			let mut fTemp114: f32 = (fTemp58 + fTemp113);
			self.fRec198[0] = ((fSlow26 * self.fRec198[1]) + (fSlow27 * ((fSlow22 * self.fRec1[1]) + (fSlow72 * self.fRec1[2]))));
			self.fRec197[0] = (self.fRec198[0] - (fSlow24 * ((fSlow29 * self.fRec197[1]) + (fSlow30 * self.fRec197[2]))));
			let mut fTemp115: f32 = (fSlow32 * self.fRec196[1]);
			self.fRec196[0] = ((fSlow24 * (((fSlow28 * self.fRec197[0]) + (fSlow73 * self.fRec197[1])) + (fSlow28 * self.fRec197[2]))) - (fSlow74 * (fTemp115 + (fSlow75 * self.fRec196[2]))));
			let mut fTemp116: f32 = (fSlow39 * self.fRec195[1]);
			self.fRec195[0] = ((self.fRec196[2] + (fSlow74 * (fTemp115 + (fSlow75 * self.fRec196[0])))) - (fSlow37 * (fTemp116 + (fSlow40 * self.fRec195[2]))));
			let mut fTemp117: f32 = (fSlow45 * self.fRec194[1]);
			self.fRec194[0] = ((self.fRec195[2] + (fSlow37 * (fTemp116 + (fSlow40 * self.fRec195[0])))) - (fSlow43 * (fTemp117 + (fSlow46 * self.fRec194[2]))));
			self.fRec204[0] = ((fSlow26 * self.fRec204[1]) + (fSlow27 * (self.fRec1[1] + self.fRec1[2])));
			self.fRec203[0] = (self.fRec204[0] - (fSlow24 * ((fSlow29 * self.fRec203[1]) + (fSlow30 * self.fRec203[2]))));
			let mut fTemp118: f32 = (self.fRec203[2] + (self.fRec203[0] + (2.0 * self.fRec203[1])));
			let mut fTemp119: f32 = (fSlow24 * fTemp118);
			self.fVec26[0] = fTemp119;
			self.fRec202[0] = ((fSlow18 * self.fRec202[1]) + (fSlow19 * ((fSlow20 * self.fVec26[1]) + (fSlow31 * fTemp118))));
			self.fRec201[0] = (self.fRec202[0] - (fSlow15 * ((fSlow32 * self.fRec201[1]) + (fSlow33 * self.fRec201[2]))));
			let mut fTemp120: f32 = (fSlow39 * self.fRec200[1]);
			self.fRec200[0] = ((fSlow15 * (((fSlow16 * self.fRec201[0]) + (fSlow34 * self.fRec201[1])) + (fSlow16 * self.fRec201[2]))) - (fSlow37 * (fTemp120 + (fSlow40 * self.fRec200[2]))));
			let mut fTemp121: f32 = (fSlow45 * self.fRec199[1]);
			self.fRec199[0] = ((self.fRec200[2] + (fSlow37 * (fTemp120 + (fSlow40 * self.fRec200[0])))) - (fSlow43 * (fTemp121 + (fSlow46 * self.fRec199[2]))));
			self.fRec209[0] = ((fSlow18 * self.fRec209[1]) + (fSlow19 * (self.fVec26[1] + fTemp119)));
			self.fRec208[0] = (self.fRec209[0] - (fSlow15 * ((fSlow32 * self.fRec208[1]) + (fSlow33 * self.fRec208[2]))));
			let mut fTemp122: f32 = (self.fRec208[2] + (self.fRec208[0] + (2.0 * self.fRec208[1])));
			let mut fTemp123: f32 = (fSlow15 * fTemp122);
			self.fVec27[0] = fTemp123;
			self.fRec207[0] = ((fSlow52 * self.fRec207[1]) + (fSlow53 * ((fSlow54 * self.fVec27[1]) + (fSlow55 * fTemp122))));
			self.fRec206[0] = (self.fRec207[0] - (fSlow50 * ((fSlow39 * self.fRec206[1]) + (fSlow56 * self.fRec206[2]))));
			let mut fTemp124: f32 = (fSlow45 * self.fRec205[1]);
			self.fRec205[0] = ((fSlow50 * (((fSlow38 * self.fRec206[0]) + (fSlow57 * self.fRec206[1])) + (fSlow38 * self.fRec206[2]))) - (fSlow43 * (fTemp124 + (fSlow46 * self.fRec205[2]))));
			self.fRec213[0] = ((fSlow52 * self.fRec213[1]) + (fSlow53 * (self.fVec27[1] + fTemp123)));
			self.fRec212[0] = (self.fRec213[0] - (fSlow50 * ((fSlow39 * self.fRec212[1]) + (fSlow56 * self.fRec212[2]))));
			let mut fTemp125: f32 = (self.fRec212[2] + (self.fRec212[0] + (2.0 * self.fRec212[1])));
			let mut fTemp126: f32 = (fSlow50 * fTemp125);
			self.fVec28[0] = fTemp126;
			self.fRec211[0] = ((fSlow62 * self.fRec211[1]) + (fSlow63 * ((fSlow64 * self.fVec28[1]) + (fSlow65 * fTemp125))));
			self.fRec210[0] = (self.fRec211[0] - (fSlow58 * ((fSlow45 * self.fRec210[1]) + (fSlow66 * self.fRec210[2]))));
			self.fRec215[0] = ((fSlow62 * self.fRec215[1]) + (fSlow63 * (self.fVec28[1] + fTemp126)));
			self.fRec214[0] = (self.fRec215[0] - (fSlow58 * ((fSlow45 * self.fRec214[1]) + (fSlow66 * self.fRec214[2]))));
			let mut fTemp127: f32 = ((((fSlow127 * (self.fRec194[2] + (fSlow43 * (fTemp117 + (fSlow46 * self.fRec194[0]))))) + (fSlow128 * (self.fRec199[2] + (fSlow43 * (fTemp121 + (fSlow46 * self.fRec199[0])))))) + (fSlow129 * (self.fRec205[2] + (fSlow43 * (fTemp124 + (fSlow46 * self.fRec205[0])))))) + (fSlow58 * ((fSlow130 * (((fSlow44 * self.fRec210[0]) + (fSlow67 * self.fRec210[1])) + (fSlow44 * self.fRec210[2]))) + (fSlow131 * (self.fRec214[2] + (self.fRec214[0] + (2.0 * self.fRec214[1])))))));
			self.fRec220[0] = ((fSlow26 * self.fRec220[1]) + (fSlow27 * ((fSlow22 * self.fRec9[1]) + (fSlow72 * self.fRec9[2]))));
			self.fRec219[0] = (self.fRec220[0] - (fSlow24 * ((fSlow29 * self.fRec219[1]) + (fSlow30 * self.fRec219[2]))));
			let mut fTemp128: f32 = (fSlow32 * self.fRec218[1]);
			self.fRec218[0] = ((fSlow24 * (((fSlow28 * self.fRec219[0]) + (fSlow73 * self.fRec219[1])) + (fSlow28 * self.fRec219[2]))) - (fSlow74 * (fTemp128 + (fSlow75 * self.fRec218[2]))));
			let mut fTemp129: f32 = (fSlow39 * self.fRec217[1]);
			self.fRec217[0] = ((self.fRec218[2] + (fSlow74 * (fTemp128 + (fSlow75 * self.fRec218[0])))) - (fSlow37 * (fTemp129 + (fSlow40 * self.fRec217[2]))));
			let mut fTemp130: f32 = (fSlow45 * self.fRec216[1]);
			self.fRec216[0] = ((self.fRec217[2] + (fSlow37 * (fTemp129 + (fSlow40 * self.fRec217[0])))) - (fSlow43 * (fTemp130 + (fSlow46 * self.fRec216[2]))));
			self.fRec226[0] = ((fSlow26 * self.fRec226[1]) + (fSlow27 * (self.fRec9[1] + self.fRec9[2])));
			self.fRec225[0] = (self.fRec226[0] - (fSlow24 * ((fSlow29 * self.fRec225[1]) + (fSlow30 * self.fRec225[2]))));
			let mut fTemp131: f32 = (self.fRec225[2] + (self.fRec225[0] + (2.0 * self.fRec225[1])));
			let mut fTemp132: f32 = (fSlow24 * fTemp131);
			self.fVec29[0] = fTemp132;
			self.fRec224[0] = ((fSlow18 * self.fRec224[1]) + (fSlow19 * ((fSlow20 * self.fVec29[1]) + (fSlow31 * fTemp131))));
			self.fRec223[0] = (self.fRec224[0] - (fSlow15 * ((fSlow32 * self.fRec223[1]) + (fSlow33 * self.fRec223[2]))));
			let mut fTemp133: f32 = (fSlow39 * self.fRec222[1]);
			self.fRec222[0] = ((fSlow15 * (((fSlow16 * self.fRec223[0]) + (fSlow34 * self.fRec223[1])) + (fSlow16 * self.fRec223[2]))) - (fSlow37 * (fTemp133 + (fSlow40 * self.fRec222[2]))));
			let mut fTemp134: f32 = (fSlow45 * self.fRec221[1]);
			self.fRec221[0] = ((self.fRec222[2] + (fSlow37 * (fTemp133 + (fSlow40 * self.fRec222[0])))) - (fSlow43 * (fTemp134 + (fSlow46 * self.fRec221[2]))));
			self.fRec231[0] = ((fSlow18 * self.fRec231[1]) + (fSlow19 * (self.fVec29[1] + fTemp132)));
			self.fRec230[0] = (self.fRec231[0] - (fSlow15 * ((fSlow32 * self.fRec230[1]) + (fSlow33 * self.fRec230[2]))));
			let mut fTemp135: f32 = (self.fRec230[2] + (self.fRec230[0] + (2.0 * self.fRec230[1])));
			let mut fTemp136: f32 = (fSlow15 * fTemp135);
			self.fVec30[0] = fTemp136;
			self.fRec229[0] = ((fSlow52 * self.fRec229[1]) + (fSlow53 * ((fSlow54 * self.fVec30[1]) + (fSlow55 * fTemp135))));
			self.fRec228[0] = (self.fRec229[0] - (fSlow50 * ((fSlow39 * self.fRec228[1]) + (fSlow56 * self.fRec228[2]))));
			let mut fTemp137: f32 = (fSlow45 * self.fRec227[1]);
			self.fRec227[0] = ((fSlow50 * (((fSlow38 * self.fRec228[0]) + (fSlow57 * self.fRec228[1])) + (fSlow38 * self.fRec228[2]))) - (fSlow43 * (fTemp137 + (fSlow46 * self.fRec227[2]))));
			self.fRec235[0] = ((fSlow52 * self.fRec235[1]) + (fSlow53 * (self.fVec30[1] + fTemp136)));
			self.fRec234[0] = (self.fRec235[0] - (fSlow50 * ((fSlow39 * self.fRec234[1]) + (fSlow56 * self.fRec234[2]))));
			let mut fTemp138: f32 = (self.fRec234[2] + (self.fRec234[0] + (2.0 * self.fRec234[1])));
			let mut fTemp139: f32 = (fSlow50 * fTemp138);
			self.fVec31[0] = fTemp139;
			self.fRec233[0] = ((fSlow62 * self.fRec233[1]) + (fSlow63 * ((fSlow64 * self.fVec31[1]) + (fSlow65 * fTemp138))));
			self.fRec232[0] = (self.fRec233[0] - (fSlow58 * ((fSlow45 * self.fRec232[1]) + (fSlow66 * self.fRec232[2]))));
			self.fRec237[0] = ((fSlow62 * self.fRec237[1]) + (fSlow63 * (self.fVec31[1] + fTemp139)));
			self.fRec236[0] = (self.fRec237[0] - (fSlow58 * ((fSlow45 * self.fRec236[1]) + (fSlow66 * self.fRec236[2]))));
			let mut fTemp140: f32 = ((((fSlow134 * (self.fRec216[2] + (fSlow43 * (fTemp130 + (fSlow46 * self.fRec216[0]))))) + (fSlow135 * (self.fRec221[2] + (fSlow43 * (fTemp134 + (fSlow46 * self.fRec221[0])))))) + (fSlow136 * (self.fRec227[2] + (fSlow43 * (fTemp137 + (fSlow46 * self.fRec227[0])))))) + (fSlow58 * ((fSlow137 * (((fSlow44 * self.fRec232[0]) + (fSlow67 * self.fRec232[1])) + (fSlow44 * self.fRec232[2]))) + (fSlow138 * (self.fRec236[2] + (self.fRec236[0] + (2.0 * self.fRec236[1])))))));
			let mut fTemp141: f32 = (fTemp127 + fTemp140);
			self.fRec242[0] = ((fSlow26 * self.fRec242[1]) + (fSlow27 * ((fSlow22 * self.fRec5[1]) + (fSlow72 * self.fRec5[2]))));
			self.fRec241[0] = (self.fRec242[0] - (fSlow24 * ((fSlow29 * self.fRec241[1]) + (fSlow30 * self.fRec241[2]))));
			let mut fTemp142: f32 = (fSlow32 * self.fRec240[1]);
			self.fRec240[0] = ((fSlow24 * (((fSlow28 * self.fRec241[0]) + (fSlow73 * self.fRec241[1])) + (fSlow28 * self.fRec241[2]))) - (fSlow74 * (fTemp142 + (fSlow75 * self.fRec240[2]))));
			let mut fTemp143: f32 = (fSlow39 * self.fRec239[1]);
			self.fRec239[0] = ((self.fRec240[2] + (fSlow74 * (fTemp142 + (fSlow75 * self.fRec240[0])))) - (fSlow37 * (fTemp143 + (fSlow40 * self.fRec239[2]))));
			let mut fTemp144: f32 = (fSlow45 * self.fRec238[1]);
			self.fRec238[0] = ((self.fRec239[2] + (fSlow37 * (fTemp143 + (fSlow40 * self.fRec239[0])))) - (fSlow43 * (fTemp144 + (fSlow46 * self.fRec238[2]))));
			self.fRec248[0] = ((fSlow26 * self.fRec248[1]) + (fSlow27 * (self.fRec5[1] + self.fRec5[2])));
			self.fRec247[0] = (self.fRec248[0] - (fSlow24 * ((fSlow29 * self.fRec247[1]) + (fSlow30 * self.fRec247[2]))));
			let mut fTemp145: f32 = (self.fRec247[2] + (self.fRec247[0] + (2.0 * self.fRec247[1])));
			let mut fTemp146: f32 = (fSlow24 * fTemp145);
			self.fVec32[0] = fTemp146;
			self.fRec246[0] = ((fSlow18 * self.fRec246[1]) + (fSlow19 * ((fSlow20 * self.fVec32[1]) + (fSlow31 * fTemp145))));
			self.fRec245[0] = (self.fRec246[0] - (fSlow15 * ((fSlow32 * self.fRec245[1]) + (fSlow33 * self.fRec245[2]))));
			let mut fTemp147: f32 = (fSlow39 * self.fRec244[1]);
			self.fRec244[0] = ((fSlow15 * (((fSlow16 * self.fRec245[0]) + (fSlow34 * self.fRec245[1])) + (fSlow16 * self.fRec245[2]))) - (fSlow37 * (fTemp147 + (fSlow40 * self.fRec244[2]))));
			let mut fTemp148: f32 = (fSlow45 * self.fRec243[1]);
			self.fRec243[0] = ((self.fRec244[2] + (fSlow37 * (fTemp147 + (fSlow40 * self.fRec244[0])))) - (fSlow43 * (fTemp148 + (fSlow46 * self.fRec243[2]))));
			self.fRec253[0] = ((fSlow18 * self.fRec253[1]) + (fSlow19 * (self.fVec32[1] + fTemp146)));
			self.fRec252[0] = (self.fRec253[0] - (fSlow15 * ((fSlow32 * self.fRec252[1]) + (fSlow33 * self.fRec252[2]))));
			let mut fTemp149: f32 = (self.fRec252[2] + (self.fRec252[0] + (2.0 * self.fRec252[1])));
			let mut fTemp150: f32 = (fSlow15 * fTemp149);
			self.fVec33[0] = fTemp150;
			self.fRec251[0] = ((fSlow52 * self.fRec251[1]) + (fSlow53 * ((fSlow54 * self.fVec33[1]) + (fSlow55 * fTemp149))));
			self.fRec250[0] = (self.fRec251[0] - (fSlow50 * ((fSlow39 * self.fRec250[1]) + (fSlow56 * self.fRec250[2]))));
			let mut fTemp151: f32 = (fSlow45 * self.fRec249[1]);
			self.fRec249[0] = ((fSlow50 * (((fSlow38 * self.fRec250[0]) + (fSlow57 * self.fRec250[1])) + (fSlow38 * self.fRec250[2]))) - (fSlow43 * (fTemp151 + (fSlow46 * self.fRec249[2]))));
			self.fRec257[0] = ((fSlow52 * self.fRec257[1]) + (fSlow53 * (self.fVec33[1] + fTemp150)));
			self.fRec256[0] = (self.fRec257[0] - (fSlow50 * ((fSlow39 * self.fRec256[1]) + (fSlow56 * self.fRec256[2]))));
			let mut fTemp152: f32 = (self.fRec256[2] + (self.fRec256[0] + (2.0 * self.fRec256[1])));
			let mut fTemp153: f32 = (fSlow50 * fTemp152);
			self.fVec34[0] = fTemp153;
			self.fRec255[0] = ((fSlow62 * self.fRec255[1]) + (fSlow63 * ((fSlow64 * self.fVec34[1]) + (fSlow65 * fTemp152))));
			self.fRec254[0] = (self.fRec255[0] - (fSlow58 * ((fSlow45 * self.fRec254[1]) + (fSlow66 * self.fRec254[2]))));
			self.fRec259[0] = ((fSlow62 * self.fRec259[1]) + (fSlow63 * (self.fVec34[1] + fTemp153)));
			self.fRec258[0] = (self.fRec259[0] - (fSlow58 * ((fSlow45 * self.fRec258[1]) + (fSlow66 * self.fRec258[2]))));
			let mut fTemp154: f32 = ((((fSlow141 * (self.fRec238[2] + (fSlow43 * (fTemp144 + (fSlow46 * self.fRec238[0]))))) + (fSlow142 * (self.fRec243[2] + (fSlow43 * (fTemp148 + (fSlow46 * self.fRec243[0])))))) + (fSlow143 * (self.fRec249[2] + (fSlow43 * (fTemp151 + (fSlow46 * self.fRec249[0])))))) + (fSlow58 * ((fSlow144 * (((fSlow44 * self.fRec254[0]) + (fSlow67 * self.fRec254[1])) + (fSlow44 * self.fRec254[2]))) + (fSlow145 * (self.fRec258[2] + (self.fRec258[0] + (2.0 * self.fRec258[1])))))));
			self.fRec264[0] = ((fSlow26 * self.fRec264[1]) + (fSlow27 * ((fSlow22 * self.fRec13[1]) + (fSlow72 * self.fRec13[2]))));
			self.fRec263[0] = (self.fRec264[0] - (fSlow24 * ((fSlow29 * self.fRec263[1]) + (fSlow30 * self.fRec263[2]))));
			let mut fTemp155: f32 = (fSlow32 * self.fRec262[1]);
			self.fRec262[0] = ((fSlow24 * (((fSlow28 * self.fRec263[0]) + (fSlow73 * self.fRec263[1])) + (fSlow28 * self.fRec263[2]))) - (fSlow74 * (fTemp155 + (fSlow75 * self.fRec262[2]))));
			let mut fTemp156: f32 = (fSlow39 * self.fRec261[1]);
			self.fRec261[0] = ((self.fRec262[2] + (fSlow74 * (fTemp155 + (fSlow75 * self.fRec262[0])))) - (fSlow37 * (fTemp156 + (fSlow40 * self.fRec261[2]))));
			let mut fTemp157: f32 = (fSlow45 * self.fRec260[1]);
			self.fRec260[0] = ((self.fRec261[2] + (fSlow37 * (fTemp156 + (fSlow40 * self.fRec261[0])))) - (fSlow43 * (fTemp157 + (fSlow46 * self.fRec260[2]))));
			self.fRec270[0] = ((fSlow26 * self.fRec270[1]) + (fSlow27 * (self.fRec13[1] + self.fRec13[2])));
			self.fRec269[0] = (self.fRec270[0] - (fSlow24 * ((fSlow29 * self.fRec269[1]) + (fSlow30 * self.fRec269[2]))));
			let mut fTemp158: f32 = (self.fRec269[2] + (self.fRec269[0] + (2.0 * self.fRec269[1])));
			let mut fTemp159: f32 = (fSlow24 * fTemp158);
			self.fVec35[0] = fTemp159;
			self.fRec268[0] = ((fSlow18 * self.fRec268[1]) + (fSlow19 * ((fSlow20 * self.fVec35[1]) + (fSlow31 * fTemp158))));
			self.fRec267[0] = (self.fRec268[0] - (fSlow15 * ((fSlow32 * self.fRec267[1]) + (fSlow33 * self.fRec267[2]))));
			let mut fTemp160: f32 = (fSlow39 * self.fRec266[1]);
			self.fRec266[0] = ((fSlow15 * (((fSlow16 * self.fRec267[0]) + (fSlow34 * self.fRec267[1])) + (fSlow16 * self.fRec267[2]))) - (fSlow37 * (fTemp160 + (fSlow40 * self.fRec266[2]))));
			let mut fTemp161: f32 = (fSlow45 * self.fRec265[1]);
			self.fRec265[0] = ((self.fRec266[2] + (fSlow37 * (fTemp160 + (fSlow40 * self.fRec266[0])))) - (fSlow43 * (fTemp161 + (fSlow46 * self.fRec265[2]))));
			self.fRec275[0] = ((fSlow18 * self.fRec275[1]) + (fSlow19 * (self.fVec35[1] + fTemp159)));
			self.fRec274[0] = (self.fRec275[0] - (fSlow15 * ((fSlow32 * self.fRec274[1]) + (fSlow33 * self.fRec274[2]))));
			let mut fTemp162: f32 = (self.fRec274[2] + (self.fRec274[0] + (2.0 * self.fRec274[1])));
			let mut fTemp163: f32 = (fSlow15 * fTemp162);
			self.fVec36[0] = fTemp163;
			self.fRec273[0] = ((fSlow52 * self.fRec273[1]) + (fSlow53 * ((fSlow54 * self.fVec36[1]) + (fSlow55 * fTemp162))));
			self.fRec272[0] = (self.fRec273[0] - (fSlow50 * ((fSlow39 * self.fRec272[1]) + (fSlow56 * self.fRec272[2]))));
			let mut fTemp164: f32 = (fSlow45 * self.fRec271[1]);
			self.fRec271[0] = ((fSlow50 * (((fSlow38 * self.fRec272[0]) + (fSlow57 * self.fRec272[1])) + (fSlow38 * self.fRec272[2]))) - (fSlow43 * (fTemp164 + (fSlow46 * self.fRec271[2]))));
			self.fRec279[0] = ((fSlow52 * self.fRec279[1]) + (fSlow53 * (self.fVec36[1] + fTemp163)));
			self.fRec278[0] = (self.fRec279[0] - (fSlow50 * ((fSlow39 * self.fRec278[1]) + (fSlow56 * self.fRec278[2]))));
			let mut fTemp165: f32 = (self.fRec278[2] + (self.fRec278[0] + (2.0 * self.fRec278[1])));
			let mut fTemp166: f32 = (fSlow50 * fTemp165);
			self.fVec37[0] = fTemp166;
			self.fRec277[0] = ((fSlow62 * self.fRec277[1]) + (fSlow63 * ((fSlow64 * self.fVec37[1]) + (fSlow65 * fTemp165))));
			self.fRec276[0] = (self.fRec277[0] - (fSlow58 * ((fSlow45 * self.fRec276[1]) + (fSlow66 * self.fRec276[2]))));
			self.fRec281[0] = ((fSlow62 * self.fRec281[1]) + (fSlow63 * (self.fVec37[1] + fTemp166)));
			self.fRec280[0] = (self.fRec281[0] - (fSlow58 * ((fSlow45 * self.fRec280[1]) + (fSlow66 * self.fRec280[2]))));
			let mut fTemp167: f32 = ((((fSlow148 * (self.fRec260[2] + (fSlow43 * (fTemp157 + (fSlow46 * self.fRec260[0]))))) + (fSlow149 * (self.fRec265[2] + (fSlow43 * (fTemp161 + (fSlow46 * self.fRec265[0])))))) + (fSlow150 * (self.fRec271[2] + (fSlow43 * (fTemp164 + (fSlow46 * self.fRec271[0])))))) + (fSlow58 * ((fSlow151 * (((fSlow44 * self.fRec276[0]) + (fSlow67 * self.fRec276[1])) + (fSlow44 * self.fRec276[2]))) + (fSlow152 * (self.fRec280[2] + (self.fRec280[0] + (2.0 * self.fRec280[1])))))));
			let mut fTemp168: f32 = (fTemp154 + fTemp167);
			let mut fTemp169: f32 = (fTemp141 + fTemp168);
			self.fRec286[0] = ((fSlow26 * self.fRec286[1]) + (fSlow27 * ((fSlow22 * self.fRec3[1]) + (fSlow72 * self.fRec3[2]))));
			self.fRec285[0] = (self.fRec286[0] - (fSlow24 * ((fSlow29 * self.fRec285[1]) + (fSlow30 * self.fRec285[2]))));
			let mut fTemp170: f32 = (fSlow32 * self.fRec284[1]);
			self.fRec284[0] = ((fSlow24 * (((fSlow28 * self.fRec285[0]) + (fSlow73 * self.fRec285[1])) + (fSlow28 * self.fRec285[2]))) - (fSlow74 * (fTemp170 + (fSlow75 * self.fRec284[2]))));
			let mut fTemp171: f32 = (fSlow39 * self.fRec283[1]);
			self.fRec283[0] = ((self.fRec284[2] + (fSlow74 * (fTemp170 + (fSlow75 * self.fRec284[0])))) - (fSlow37 * (fTemp171 + (fSlow40 * self.fRec283[2]))));
			let mut fTemp172: f32 = (fSlow45 * self.fRec282[1]);
			self.fRec282[0] = ((self.fRec283[2] + (fSlow37 * (fTemp171 + (fSlow40 * self.fRec283[0])))) - (fSlow43 * (fTemp172 + (fSlow46 * self.fRec282[2]))));
			self.fRec292[0] = ((fSlow26 * self.fRec292[1]) + (fSlow27 * (self.fRec3[1] + self.fRec3[2])));
			self.fRec291[0] = (self.fRec292[0] - (fSlow24 * ((fSlow29 * self.fRec291[1]) + (fSlow30 * self.fRec291[2]))));
			let mut fTemp173: f32 = (self.fRec291[2] + (self.fRec291[0] + (2.0 * self.fRec291[1])));
			let mut fTemp174: f32 = (fSlow24 * fTemp173);
			self.fVec38[0] = fTemp174;
			self.fRec290[0] = ((fSlow18 * self.fRec290[1]) + (fSlow19 * ((fSlow20 * self.fVec38[1]) + (fSlow31 * fTemp173))));
			self.fRec289[0] = (self.fRec290[0] - (fSlow15 * ((fSlow32 * self.fRec289[1]) + (fSlow33 * self.fRec289[2]))));
			let mut fTemp175: f32 = (fSlow39 * self.fRec288[1]);
			self.fRec288[0] = ((fSlow15 * (((fSlow16 * self.fRec289[0]) + (fSlow34 * self.fRec289[1])) + (fSlow16 * self.fRec289[2]))) - (fSlow37 * (fTemp175 + (fSlow40 * self.fRec288[2]))));
			let mut fTemp176: f32 = (fSlow45 * self.fRec287[1]);
			self.fRec287[0] = ((self.fRec288[2] + (fSlow37 * (fTemp175 + (fSlow40 * self.fRec288[0])))) - (fSlow43 * (fTemp176 + (fSlow46 * self.fRec287[2]))));
			self.fRec297[0] = ((fSlow18 * self.fRec297[1]) + (fSlow19 * (self.fVec38[1] + fTemp174)));
			self.fRec296[0] = (self.fRec297[0] - (fSlow15 * ((fSlow32 * self.fRec296[1]) + (fSlow33 * self.fRec296[2]))));
			let mut fTemp177: f32 = (self.fRec296[2] + (self.fRec296[0] + (2.0 * self.fRec296[1])));
			let mut fTemp178: f32 = (fSlow15 * fTemp177);
			self.fVec39[0] = fTemp178;
			self.fRec295[0] = ((fSlow52 * self.fRec295[1]) + (fSlow53 * ((fSlow54 * self.fVec39[1]) + (fSlow55 * fTemp177))));
			self.fRec294[0] = (self.fRec295[0] - (fSlow50 * ((fSlow39 * self.fRec294[1]) + (fSlow56 * self.fRec294[2]))));
			let mut fTemp179: f32 = (fSlow45 * self.fRec293[1]);
			self.fRec293[0] = ((fSlow50 * (((fSlow38 * self.fRec294[0]) + (fSlow57 * self.fRec294[1])) + (fSlow38 * self.fRec294[2]))) - (fSlow43 * (fTemp179 + (fSlow46 * self.fRec293[2]))));
			self.fRec301[0] = ((fSlow52 * self.fRec301[1]) + (fSlow53 * (self.fVec39[1] + fTemp178)));
			self.fRec300[0] = (self.fRec301[0] - (fSlow50 * ((fSlow39 * self.fRec300[1]) + (fSlow56 * self.fRec300[2]))));
			let mut fTemp180: f32 = (self.fRec300[2] + (self.fRec300[0] + (2.0 * self.fRec300[1])));
			let mut fTemp181: f32 = (fSlow50 * fTemp180);
			self.fVec40[0] = fTemp181;
			self.fRec299[0] = ((fSlow62 * self.fRec299[1]) + (fSlow63 * ((fSlow64 * self.fVec40[1]) + (fSlow65 * fTemp180))));
			self.fRec298[0] = (self.fRec299[0] - (fSlow58 * ((fSlow45 * self.fRec298[1]) + (fSlow66 * self.fRec298[2]))));
			self.fRec303[0] = ((fSlow62 * self.fRec303[1]) + (fSlow63 * (self.fVec40[1] + fTemp181)));
			self.fRec302[0] = (self.fRec303[0] - (fSlow58 * ((fSlow45 * self.fRec302[1]) + (fSlow66 * self.fRec302[2]))));
			let mut fTemp182: f32 = ((((fSlow155 * (self.fRec282[2] + (fSlow43 * (fTemp172 + (fSlow46 * self.fRec282[0]))))) + (fSlow156 * (self.fRec287[2] + (fSlow43 * (fTemp176 + (fSlow46 * self.fRec287[0])))))) + (fSlow157 * (self.fRec293[2] + (fSlow43 * (fTemp179 + (fSlow46 * self.fRec293[0])))))) + (fSlow58 * ((fSlow158 * (((fSlow44 * self.fRec298[0]) + (fSlow67 * self.fRec298[1])) + (fSlow44 * self.fRec298[2]))) + (fSlow159 * (self.fRec302[2] + (self.fRec302[0] + (2.0 * self.fRec302[1])))))));
			self.fRec308[0] = ((fSlow26 * self.fRec308[1]) + (fSlow27 * ((fSlow22 * self.fRec11[1]) + (fSlow72 * self.fRec11[2]))));
			self.fRec307[0] = (self.fRec308[0] - (fSlow24 * ((fSlow29 * self.fRec307[1]) + (fSlow30 * self.fRec307[2]))));
			let mut fTemp183: f32 = (fSlow32 * self.fRec306[1]);
			self.fRec306[0] = ((fSlow24 * (((fSlow28 * self.fRec307[0]) + (fSlow73 * self.fRec307[1])) + (fSlow28 * self.fRec307[2]))) - (fSlow74 * (fTemp183 + (fSlow75 * self.fRec306[2]))));
			let mut fTemp184: f32 = (fSlow39 * self.fRec305[1]);
			self.fRec305[0] = ((self.fRec306[2] + (fSlow74 * (fTemp183 + (fSlow75 * self.fRec306[0])))) - (fSlow37 * (fTemp184 + (fSlow40 * self.fRec305[2]))));
			let mut fTemp185: f32 = (fSlow45 * self.fRec304[1]);
			self.fRec304[0] = ((self.fRec305[2] + (fSlow37 * (fTemp184 + (fSlow40 * self.fRec305[0])))) - (fSlow43 * (fTemp185 + (fSlow46 * self.fRec304[2]))));
			self.fRec314[0] = ((fSlow26 * self.fRec314[1]) + (fSlow27 * (self.fRec11[1] + self.fRec11[2])));
			self.fRec313[0] = (self.fRec314[0] - (fSlow24 * ((fSlow29 * self.fRec313[1]) + (fSlow30 * self.fRec313[2]))));
			let mut fTemp186: f32 = (self.fRec313[2] + (self.fRec313[0] + (2.0 * self.fRec313[1])));
			let mut fTemp187: f32 = (fSlow24 * fTemp186);
			self.fVec41[0] = fTemp187;
			self.fRec312[0] = ((fSlow18 * self.fRec312[1]) + (fSlow19 * ((fSlow20 * self.fVec41[1]) + (fSlow31 * fTemp186))));
			self.fRec311[0] = (self.fRec312[0] - (fSlow15 * ((fSlow32 * self.fRec311[1]) + (fSlow33 * self.fRec311[2]))));
			let mut fTemp188: f32 = (fSlow39 * self.fRec310[1]);
			self.fRec310[0] = ((fSlow15 * (((fSlow16 * self.fRec311[0]) + (fSlow34 * self.fRec311[1])) + (fSlow16 * self.fRec311[2]))) - (fSlow37 * (fTemp188 + (fSlow40 * self.fRec310[2]))));
			let mut fTemp189: f32 = (fSlow45 * self.fRec309[1]);
			self.fRec309[0] = ((self.fRec310[2] + (fSlow37 * (fTemp188 + (fSlow40 * self.fRec310[0])))) - (fSlow43 * (fTemp189 + (fSlow46 * self.fRec309[2]))));
			self.fRec319[0] = ((fSlow18 * self.fRec319[1]) + (fSlow19 * (self.fVec41[1] + fTemp187)));
			self.fRec318[0] = (self.fRec319[0] - (fSlow15 * ((fSlow32 * self.fRec318[1]) + (fSlow33 * self.fRec318[2]))));
			let mut fTemp190: f32 = (self.fRec318[2] + (self.fRec318[0] + (2.0 * self.fRec318[1])));
			let mut fTemp191: f32 = (fSlow15 * fTemp190);
			self.fVec42[0] = fTemp191;
			self.fRec317[0] = ((fSlow52 * self.fRec317[1]) + (fSlow53 * ((fSlow54 * self.fVec42[1]) + (fSlow55 * fTemp190))));
			self.fRec316[0] = (self.fRec317[0] - (fSlow50 * ((fSlow39 * self.fRec316[1]) + (fSlow56 * self.fRec316[2]))));
			let mut fTemp192: f32 = (fSlow45 * self.fRec315[1]);
			self.fRec315[0] = ((fSlow50 * (((fSlow38 * self.fRec316[0]) + (fSlow57 * self.fRec316[1])) + (fSlow38 * self.fRec316[2]))) - (fSlow43 * (fTemp192 + (fSlow46 * self.fRec315[2]))));
			self.fRec323[0] = ((fSlow52 * self.fRec323[1]) + (fSlow53 * (self.fVec42[1] + fTemp191)));
			self.fRec322[0] = (self.fRec323[0] - (fSlow50 * ((fSlow39 * self.fRec322[1]) + (fSlow56 * self.fRec322[2]))));
			let mut fTemp193: f32 = (self.fRec322[2] + (self.fRec322[0] + (2.0 * self.fRec322[1])));
			let mut fTemp194: f32 = (fSlow50 * fTemp193);
			self.fVec43[0] = fTemp194;
			self.fRec321[0] = ((fSlow62 * self.fRec321[1]) + (fSlow63 * ((fSlow64 * self.fVec43[1]) + (fSlow65 * fTemp193))));
			self.fRec320[0] = (self.fRec321[0] - (fSlow58 * ((fSlow45 * self.fRec320[1]) + (fSlow66 * self.fRec320[2]))));
			self.fRec325[0] = ((fSlow62 * self.fRec325[1]) + (fSlow63 * (self.fVec43[1] + fTemp194)));
			self.fRec324[0] = (self.fRec325[0] - (fSlow58 * ((fSlow45 * self.fRec324[1]) + (fSlow66 * self.fRec324[2]))));
			let mut fTemp195: f32 = ((((fSlow162 * (self.fRec304[2] + (fSlow43 * (fTemp185 + (fSlow46 * self.fRec304[0]))))) + (fSlow163 * (self.fRec309[2] + (fSlow43 * (fTemp189 + (fSlow46 * self.fRec309[0])))))) + (fSlow164 * (self.fRec315[2] + (fSlow43 * (fTemp192 + (fSlow46 * self.fRec315[0])))))) + (fSlow58 * ((fSlow165 * (((fSlow44 * self.fRec320[0]) + (fSlow67 * self.fRec320[1])) + (fSlow44 * self.fRec320[2]))) + (fSlow166 * (self.fRec324[2] + (self.fRec324[0] + (2.0 * self.fRec324[1])))))));
			let mut fTemp196: f32 = (fTemp182 + fTemp195);
			self.fRec330[0] = ((fSlow26 * self.fRec330[1]) + (fSlow27 * ((fSlow22 * self.fRec7[1]) + (fSlow72 * self.fRec7[2]))));
			self.fRec329[0] = (self.fRec330[0] - (fSlow24 * ((fSlow29 * self.fRec329[1]) + (fSlow30 * self.fRec329[2]))));
			let mut fTemp197: f32 = (fSlow32 * self.fRec328[1]);
			self.fRec328[0] = ((fSlow24 * (((fSlow28 * self.fRec329[0]) + (fSlow73 * self.fRec329[1])) + (fSlow28 * self.fRec329[2]))) - (fSlow74 * (fTemp197 + (fSlow75 * self.fRec328[2]))));
			let mut fTemp198: f32 = (fSlow39 * self.fRec327[1]);
			self.fRec327[0] = ((self.fRec328[2] + (fSlow74 * (fTemp197 + (fSlow75 * self.fRec328[0])))) - (fSlow37 * (fTemp198 + (fSlow40 * self.fRec327[2]))));
			let mut fTemp199: f32 = (fSlow45 * self.fRec326[1]);
			self.fRec326[0] = ((self.fRec327[2] + (fSlow37 * (fTemp198 + (fSlow40 * self.fRec327[0])))) - (fSlow43 * (fTemp199 + (fSlow46 * self.fRec326[2]))));
			self.fRec336[0] = ((fSlow26 * self.fRec336[1]) + (fSlow27 * (self.fRec7[1] + self.fRec7[2])));
			self.fRec335[0] = (self.fRec336[0] - (fSlow24 * ((fSlow29 * self.fRec335[1]) + (fSlow30 * self.fRec335[2]))));
			let mut fTemp200: f32 = (self.fRec335[2] + (self.fRec335[0] + (2.0 * self.fRec335[1])));
			let mut fTemp201: f32 = (fSlow24 * fTemp200);
			self.fVec44[0] = fTemp201;
			self.fRec334[0] = ((fSlow18 * self.fRec334[1]) + (fSlow19 * ((fSlow20 * self.fVec44[1]) + (fSlow31 * fTemp200))));
			self.fRec333[0] = (self.fRec334[0] - (fSlow15 * ((fSlow32 * self.fRec333[1]) + (fSlow33 * self.fRec333[2]))));
			let mut fTemp202: f32 = (fSlow39 * self.fRec332[1]);
			self.fRec332[0] = ((fSlow15 * (((fSlow16 * self.fRec333[0]) + (fSlow34 * self.fRec333[1])) + (fSlow16 * self.fRec333[2]))) - (fSlow37 * (fTemp202 + (fSlow40 * self.fRec332[2]))));
			let mut fTemp203: f32 = (fSlow45 * self.fRec331[1]);
			self.fRec331[0] = ((self.fRec332[2] + (fSlow37 * (fTemp202 + (fSlow40 * self.fRec332[0])))) - (fSlow43 * (fTemp203 + (fSlow46 * self.fRec331[2]))));
			self.fRec341[0] = ((fSlow18 * self.fRec341[1]) + (fSlow19 * (self.fVec44[1] + fTemp201)));
			self.fRec340[0] = (self.fRec341[0] - (fSlow15 * ((fSlow32 * self.fRec340[1]) + (fSlow33 * self.fRec340[2]))));
			let mut fTemp204: f32 = (self.fRec340[2] + (self.fRec340[0] + (2.0 * self.fRec340[1])));
			let mut fTemp205: f32 = (fSlow15 * fTemp204);
			self.fVec45[0] = fTemp205;
			self.fRec339[0] = ((fSlow52 * self.fRec339[1]) + (fSlow53 * ((fSlow54 * self.fVec45[1]) + (fSlow55 * fTemp204))));
			self.fRec338[0] = (self.fRec339[0] - (fSlow50 * ((fSlow39 * self.fRec338[1]) + (fSlow56 * self.fRec338[2]))));
			let mut fTemp206: f32 = (fSlow45 * self.fRec337[1]);
			self.fRec337[0] = ((fSlow50 * (((fSlow38 * self.fRec338[0]) + (fSlow57 * self.fRec338[1])) + (fSlow38 * self.fRec338[2]))) - (fSlow43 * (fTemp206 + (fSlow46 * self.fRec337[2]))));
			self.fRec345[0] = ((fSlow52 * self.fRec345[1]) + (fSlow53 * (self.fVec45[1] + fTemp205)));
			self.fRec344[0] = (self.fRec345[0] - (fSlow50 * ((fSlow39 * self.fRec344[1]) + (fSlow56 * self.fRec344[2]))));
			let mut fTemp207: f32 = (self.fRec344[2] + (self.fRec344[0] + (2.0 * self.fRec344[1])));
			let mut fTemp208: f32 = (fSlow50 * fTemp207);
			self.fVec46[0] = fTemp208;
			self.fRec343[0] = ((fSlow62 * self.fRec343[1]) + (fSlow63 * ((fSlow64 * self.fVec46[1]) + (fSlow65 * fTemp207))));
			self.fRec342[0] = (self.fRec343[0] - (fSlow58 * ((fSlow45 * self.fRec342[1]) + (fSlow66 * self.fRec342[2]))));
			self.fRec347[0] = ((fSlow62 * self.fRec347[1]) + (fSlow63 * (self.fVec46[1] + fTemp208)));
			self.fRec346[0] = (self.fRec347[0] - (fSlow58 * ((fSlow45 * self.fRec346[1]) + (fSlow66 * self.fRec346[2]))));
			let mut fTemp209: f32 = ((((fSlow169 * (self.fRec326[2] + (fSlow43 * (fTemp199 + (fSlow46 * self.fRec326[0]))))) + (fSlow170 * (self.fRec331[2] + (fSlow43 * (fTemp203 + (fSlow46 * self.fRec331[0])))))) + (fSlow171 * (self.fRec337[2] + (fSlow43 * (fTemp206 + (fSlow46 * self.fRec337[0])))))) + (fSlow58 * ((fSlow172 * (((fSlow44 * self.fRec342[0]) + (fSlow67 * self.fRec342[1])) + (fSlow44 * self.fRec342[2]))) + (fSlow173 * (self.fRec346[2] + (self.fRec346[0] + (2.0 * self.fRec346[1])))))));
			self.fRec352[0] = ((fSlow26 * self.fRec352[1]) + (fSlow27 * ((fSlow22 * self.fRec15[1]) + (fSlow72 * self.fRec15[2]))));
			self.fRec351[0] = (self.fRec352[0] - (fSlow24 * ((fSlow29 * self.fRec351[1]) + (fSlow30 * self.fRec351[2]))));
			let mut fTemp210: f32 = (fSlow32 * self.fRec350[1]);
			self.fRec350[0] = ((fSlow24 * (((fSlow28 * self.fRec351[0]) + (fSlow73 * self.fRec351[1])) + (fSlow28 * self.fRec351[2]))) - (fSlow74 * (fTemp210 + (fSlow75 * self.fRec350[2]))));
			let mut fTemp211: f32 = (fSlow39 * self.fRec349[1]);
			self.fRec349[0] = ((self.fRec350[2] + (fSlow74 * (fTemp210 + (fSlow75 * self.fRec350[0])))) - (fSlow37 * (fTemp211 + (fSlow40 * self.fRec349[2]))));
			let mut fTemp212: f32 = (fSlow45 * self.fRec348[1]);
			self.fRec348[0] = ((self.fRec349[2] + (fSlow37 * (fTemp211 + (fSlow40 * self.fRec349[0])))) - (fSlow43 * (fTemp212 + (fSlow46 * self.fRec348[2]))));
			self.fRec358[0] = ((fSlow26 * self.fRec358[1]) + (fSlow27 * (self.fRec15[1] + self.fRec15[2])));
			self.fRec357[0] = (self.fRec358[0] - (fSlow24 * ((fSlow29 * self.fRec357[1]) + (fSlow30 * self.fRec357[2]))));
			let mut fTemp213: f32 = (self.fRec357[2] + (self.fRec357[0] + (2.0 * self.fRec357[1])));
			let mut fTemp214: f32 = (fSlow24 * fTemp213);
			self.fVec47[0] = fTemp214;
			self.fRec356[0] = ((fSlow18 * self.fRec356[1]) + (fSlow19 * ((fSlow20 * self.fVec47[1]) + (fSlow31 * fTemp213))));
			self.fRec355[0] = (self.fRec356[0] - (fSlow15 * ((fSlow32 * self.fRec355[1]) + (fSlow33 * self.fRec355[2]))));
			let mut fTemp215: f32 = (fSlow39 * self.fRec354[1]);
			self.fRec354[0] = ((fSlow15 * (((fSlow16 * self.fRec355[0]) + (fSlow34 * self.fRec355[1])) + (fSlow16 * self.fRec355[2]))) - (fSlow37 * (fTemp215 + (fSlow40 * self.fRec354[2]))));
			let mut fTemp216: f32 = (fSlow45 * self.fRec353[1]);
			self.fRec353[0] = ((self.fRec354[2] + (fSlow37 * (fTemp215 + (fSlow40 * self.fRec354[0])))) - (fSlow43 * (fTemp216 + (fSlow46 * self.fRec353[2]))));
			self.fRec363[0] = ((fSlow18 * self.fRec363[1]) + (fSlow19 * (self.fVec47[1] + fTemp214)));
			self.fRec362[0] = (self.fRec363[0] - (fSlow15 * ((fSlow32 * self.fRec362[1]) + (fSlow33 * self.fRec362[2]))));
			let mut fTemp217: f32 = (self.fRec362[2] + (self.fRec362[0] + (2.0 * self.fRec362[1])));
			let mut fTemp218: f32 = (fSlow15 * fTemp217);
			self.fVec48[0] = fTemp218;
			self.fRec361[0] = ((fSlow52 * self.fRec361[1]) + (fSlow53 * ((fSlow54 * self.fVec48[1]) + (fSlow55 * fTemp217))));
			self.fRec360[0] = (self.fRec361[0] - (fSlow50 * ((fSlow39 * self.fRec360[1]) + (fSlow56 * self.fRec360[2]))));
			let mut fTemp219: f32 = (fSlow45 * self.fRec359[1]);
			self.fRec359[0] = ((fSlow50 * (((fSlow38 * self.fRec360[0]) + (fSlow57 * self.fRec360[1])) + (fSlow38 * self.fRec360[2]))) - (fSlow43 * (fTemp219 + (fSlow46 * self.fRec359[2]))));
			self.fRec367[0] = ((fSlow52 * self.fRec367[1]) + (fSlow53 * (self.fVec48[1] + fTemp218)));
			self.fRec366[0] = (self.fRec367[0] - (fSlow50 * ((fSlow39 * self.fRec366[1]) + (fSlow56 * self.fRec366[2]))));
			let mut fTemp220: f32 = (self.fRec366[2] + (self.fRec366[0] + (2.0 * self.fRec366[1])));
			let mut fTemp221: f32 = (fSlow50 * fTemp220);
			self.fVec49[0] = fTemp221;
			self.fRec365[0] = ((fSlow62 * self.fRec365[1]) + (fSlow63 * ((fSlow64 * self.fVec49[1]) + (fSlow65 * fTemp220))));
			self.fRec364[0] = (self.fRec365[0] - (fSlow58 * ((fSlow45 * self.fRec364[1]) + (fSlow66 * self.fRec364[2]))));
			self.fRec369[0] = ((fSlow62 * self.fRec369[1]) + (fSlow63 * (self.fVec49[1] + fTemp221)));
			self.fRec368[0] = (self.fRec369[0] - (fSlow58 * ((fSlow45 * self.fRec368[1]) + (fSlow66 * self.fRec368[2]))));
			let mut fTemp222: f32 = ((((fSlow176 * (self.fRec348[2] + (fSlow43 * (fTemp212 + (fSlow46 * self.fRec348[0]))))) + (fSlow177 * (self.fRec353[2] + (fSlow43 * (fTemp216 + (fSlow46 * self.fRec353[0])))))) + (fSlow178 * (self.fRec359[2] + (fSlow43 * (fTemp219 + (fSlow46 * self.fRec359[0])))))) + (fSlow58 * ((fSlow179 * (((fSlow44 * self.fRec364[0]) + (fSlow67 * self.fRec364[1])) + (fSlow44 * self.fRec364[2]))) + (fSlow180 * (self.fRec368[2] + (self.fRec368[0] + (2.0 * self.fRec368[1])))))));
			let mut fTemp223: f32 = (fTemp209 + fTemp222);
			let mut fTemp224: f32 = (fTemp196 + fTemp223);
			let mut fTemp225: f32 = (fTemp169 + fTemp224);
			self.fVec50[(self.IOTA & 16383) as usize] = (fTemp0 + ((iTemp1 as f32) + ((iTemp2 as f32) + (fTemp3 + (fSlow5 * (fTemp114 + fTemp225))))));
			self.fRec0[0] = self.fVec50[((self.IOTA - iSlow181) & 16383) as usize];
			self.fVec51[0] = fSlow182;
			let mut iTemp226: i32 = (((fSlow182 - self.fVec51[1]) > 0.0) as i32);
			let mut fTemp227: f32 = ((fSlow4 * (inputs[3][i as usize] as f32)) + ((iTemp1 as f32) + fTemp0));
			self.fVec52[(self.IOTA & 16383) as usize] = ((iTemp226 as f32) + ((fSlow5 * (fTemp114 - fTemp225)) + fTemp227));
			self.fRec1[0] = self.fVec52[((self.IOTA - iSlow183) & 16383) as usize];
			let mut fTemp228: f32 = (((iTemp1 as f32) + (fTemp3 + (iTemp2 as f32))) + fTemp0);
			let mut fTemp229: f32 = (fTemp58 - fTemp113);
			let mut fTemp230: f32 = (fTemp169 - fTemp224);
			self.fVec53[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp229 + fTemp230)));
			self.fRec2[0] = self.fVec53[((self.IOTA - iSlow184) & 16383) as usize];
			let mut fTemp231: f32 = ((iTemp226 as f32) + fTemp227);
			self.fVec54[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp229 - fTemp230)));
			self.fRec3[0] = self.fVec54[((self.IOTA - iSlow185) & 16383) as usize];
			let mut fTemp232: f32 = (fTemp30 - fTemp57);
			let mut fTemp233: f32 = (fTemp85 - fTemp112);
			let mut fTemp234: f32 = (fTemp232 + fTemp233);
			let mut fTemp235: f32 = (fTemp141 - fTemp168);
			let mut fTemp236: f32 = (fTemp196 - fTemp223);
			let mut fTemp237: f32 = (fTemp235 + fTemp236);
			self.fVec55[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp234 + fTemp237)));
			self.fRec4[0] = self.fVec55[((self.IOTA - iSlow186) & 16383) as usize];
			self.fVec56[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp234 - fTemp237)));
			self.fRec5[0] = self.fVec56[((self.IOTA - iSlow187) & 16383) as usize];
			let mut fTemp238: f32 = (fTemp232 - fTemp233);
			let mut fTemp239: f32 = (fTemp235 - fTemp236);
			self.fVec57[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp238 + fTemp239)));
			self.fRec6[0] = self.fVec57[((self.IOTA - iSlow188) & 16383) as usize];
			self.fVec58[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp238 - fTemp239)));
			self.fRec7[0] = self.fVec58[((self.IOTA - iSlow189) & 16383) as usize];
			let mut fTemp240: f32 = (fTemp16 - fTemp29);
			let mut fTemp241: f32 = (fTemp43 - fTemp56);
			let mut fTemp242: f32 = (fTemp240 + fTemp241);
			let mut fTemp243: f32 = (fTemp71 - fTemp84);
			let mut fTemp244: f32 = (fTemp98 - fTemp111);
			let mut fTemp245: f32 = (fTemp243 + fTemp244);
			let mut fTemp246: f32 = (fTemp242 + fTemp245);
			let mut fTemp247: f32 = (fTemp127 - fTemp140);
			let mut fTemp248: f32 = (fTemp154 - fTemp167);
			let mut fTemp249: f32 = (fTemp247 + fTemp248);
			let mut fTemp250: f32 = (fTemp209 - fTemp222);
			let mut fTemp251: f32 = (fTemp182 - fTemp195);
			let mut fTemp252: f32 = (fTemp250 + fTemp251);
			let mut fTemp253: f32 = (fTemp249 + fTemp252);
			self.fVec59[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp246 + fTemp253)));
			self.fRec8[0] = self.fVec59[((self.IOTA - iSlow190) & 16383) as usize];
			self.fVec60[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp246 - fTemp253)));
			self.fRec9[0] = self.fVec60[((self.IOTA - iSlow191) & 16383) as usize];
			let mut fTemp254: f32 = (fTemp242 - fTemp245);
			let mut fTemp255: f32 = (fTemp249 - fTemp252);
			self.fVec61[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp254 + fTemp255)));
			self.fRec10[0] = self.fVec61[((self.IOTA - iSlow192) & 16383) as usize];
			self.fVec62[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp254 - fTemp255)));
			self.fRec11[0] = self.fVec62[((self.IOTA - iSlow193) & 16383) as usize];
			let mut fTemp256: f32 = (fTemp240 - fTemp241);
			let mut fTemp257: f32 = (fTemp243 - fTemp244);
			let mut fTemp258: f32 = (fTemp256 + fTemp257);
			let mut fTemp259: f32 = (fTemp247 - fTemp248);
			let mut fTemp260: f32 = (fTemp251 - fTemp250);
			let mut fTemp261: f32 = (fTemp259 + fTemp260);
			self.fVec63[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp258 + fTemp261)));
			self.fRec12[0] = self.fVec63[((self.IOTA - iSlow194) & 16383) as usize];
			self.fVec64[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp258 - fTemp261)));
			self.fRec13[0] = self.fVec64[((self.IOTA - iSlow195) & 16383) as usize];
			let mut fTemp262: f32 = (fTemp256 - fTemp257);
			let mut fTemp263: f32 = (fTemp259 - fTemp260);
			self.fVec65[(self.IOTA & 16383) as usize] = (fTemp228 + (fSlow5 * (fTemp262 + fTemp263)));
			self.fRec14[0] = self.fVec65[((self.IOTA - iSlow196) & 16383) as usize];
			self.fVec66[(self.IOTA & 16383) as usize] = (fTemp231 + (fSlow5 * (fTemp262 - fTemp263)));
			self.fRec15[0] = self.fVec66[((self.IOTA - iSlow197) & 16383) as usize];
			outputs[0][i as usize] = ((fSlow0 * (((((((self.fRec0[0] + self.fRec2[0]) + self.fRec4[0]) + self.fRec6[0]) + self.fRec8[0]) + self.fRec10[0]) + self.fRec12[0]) + self.fRec14[0])) as f32);
			outputs[1][i as usize] = ((fSlow0 * (((((((self.fRec1[0] + self.fRec3[0]) + self.fRec5[0]) + self.fRec7[0]) + self.fRec9[0]) + self.fRec11[0]) + self.fRec13[0]) + self.fRec15[0])) as f32);
			self.iRec17[1] = self.iRec17[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec16[j0 as usize] = self.fRec16[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.fVec0[1] = self.fVec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec27[2] = self.fRec27[1];
			self.fRec27[1] = self.fRec27[0];
			self.fVec3[1] = self.fVec3[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec24[2] = self.fRec24[1];
			self.fRec24[1] = self.fRec24[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec31[2] = self.fRec31[1];
			self.fRec31[1] = self.fRec31[0];
			self.fVec4[1] = self.fVec4[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec39[1] = self.fRec39[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec37[2] = self.fRec37[1];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.fRec44[1] = self.fRec44[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec50[1] = self.fRec50[0];
			self.fRec49[2] = self.fRec49[1];
			self.fRec49[1] = self.fRec49[0];
			self.fVec5[1] = self.fVec5[0];
			self.fRec48[1] = self.fRec48[0];
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec55[1] = self.fRec55[0];
			self.fRec54[2] = self.fRec54[1];
			self.fRec54[1] = self.fRec54[0];
			self.fVec6[1] = self.fVec6[0];
			self.fRec53[1] = self.fRec53[0];
			self.fRec52[2] = self.fRec52[1];
			self.fRec52[1] = self.fRec52[0];
			self.fRec51[2] = self.fRec51[1];
			self.fRec51[1] = self.fRec51[0];
			self.fRec59[1] = self.fRec59[0];
			self.fRec58[2] = self.fRec58[1];
			self.fRec58[1] = self.fRec58[0];
			self.fVec7[1] = self.fVec7[0];
			self.fRec57[1] = self.fRec57[0];
			self.fRec56[2] = self.fRec56[1];
			self.fRec56[1] = self.fRec56[0];
			self.fRec61[1] = self.fRec61[0];
			self.fRec60[2] = self.fRec60[1];
			self.fRec60[1] = self.fRec60[0];
			self.fRec66[1] = self.fRec66[0];
			self.fRec65[2] = self.fRec65[1];
			self.fRec65[1] = self.fRec65[0];
			self.fRec64[2] = self.fRec64[1];
			self.fRec64[1] = self.fRec64[0];
			self.fRec63[2] = self.fRec63[1];
			self.fRec63[1] = self.fRec63[0];
			self.fRec62[2] = self.fRec62[1];
			self.fRec62[1] = self.fRec62[0];
			self.fRec72[1] = self.fRec72[0];
			self.fRec71[2] = self.fRec71[1];
			self.fRec71[1] = self.fRec71[0];
			self.fVec8[1] = self.fVec8[0];
			self.fRec70[1] = self.fRec70[0];
			self.fRec69[2] = self.fRec69[1];
			self.fRec69[1] = self.fRec69[0];
			self.fRec68[2] = self.fRec68[1];
			self.fRec68[1] = self.fRec68[0];
			self.fRec67[2] = self.fRec67[1];
			self.fRec67[1] = self.fRec67[0];
			self.fRec77[1] = self.fRec77[0];
			self.fRec76[2] = self.fRec76[1];
			self.fRec76[1] = self.fRec76[0];
			self.fVec9[1] = self.fVec9[0];
			self.fRec75[1] = self.fRec75[0];
			self.fRec74[2] = self.fRec74[1];
			self.fRec74[1] = self.fRec74[0];
			self.fRec73[2] = self.fRec73[1];
			self.fRec73[1] = self.fRec73[0];
			self.fRec81[1] = self.fRec81[0];
			self.fRec80[2] = self.fRec80[1];
			self.fRec80[1] = self.fRec80[0];
			self.fVec10[1] = self.fVec10[0];
			self.fRec79[1] = self.fRec79[0];
			self.fRec78[2] = self.fRec78[1];
			self.fRec78[1] = self.fRec78[0];
			self.fRec83[1] = self.fRec83[0];
			self.fRec82[2] = self.fRec82[1];
			self.fRec82[1] = self.fRec82[0];
			self.fRec88[1] = self.fRec88[0];
			self.fRec87[2] = self.fRec87[1];
			self.fRec87[1] = self.fRec87[0];
			self.fRec86[2] = self.fRec86[1];
			self.fRec86[1] = self.fRec86[0];
			self.fRec85[2] = self.fRec85[1];
			self.fRec85[1] = self.fRec85[0];
			self.fRec84[2] = self.fRec84[1];
			self.fRec84[1] = self.fRec84[0];
			self.fRec94[1] = self.fRec94[0];
			self.fRec93[2] = self.fRec93[1];
			self.fRec93[1] = self.fRec93[0];
			self.fVec11[1] = self.fVec11[0];
			self.fRec92[1] = self.fRec92[0];
			self.fRec91[2] = self.fRec91[1];
			self.fRec91[1] = self.fRec91[0];
			self.fRec90[2] = self.fRec90[1];
			self.fRec90[1] = self.fRec90[0];
			self.fRec89[2] = self.fRec89[1];
			self.fRec89[1] = self.fRec89[0];
			self.fRec99[1] = self.fRec99[0];
			self.fRec98[2] = self.fRec98[1];
			self.fRec98[1] = self.fRec98[0];
			self.fVec12[1] = self.fVec12[0];
			self.fRec97[1] = self.fRec97[0];
			self.fRec96[2] = self.fRec96[1];
			self.fRec96[1] = self.fRec96[0];
			self.fRec95[2] = self.fRec95[1];
			self.fRec95[1] = self.fRec95[0];
			self.fRec103[1] = self.fRec103[0];
			self.fRec102[2] = self.fRec102[1];
			self.fRec102[1] = self.fRec102[0];
			self.fVec13[1] = self.fVec13[0];
			self.fRec101[1] = self.fRec101[0];
			self.fRec100[2] = self.fRec100[1];
			self.fRec100[1] = self.fRec100[0];
			self.fRec105[1] = self.fRec105[0];
			self.fRec104[2] = self.fRec104[1];
			self.fRec104[1] = self.fRec104[0];
			self.fRec110[1] = self.fRec110[0];
			self.fRec109[2] = self.fRec109[1];
			self.fRec109[1] = self.fRec109[0];
			self.fRec108[2] = self.fRec108[1];
			self.fRec108[1] = self.fRec108[0];
			self.fRec107[2] = self.fRec107[1];
			self.fRec107[1] = self.fRec107[0];
			self.fRec106[2] = self.fRec106[1];
			self.fRec106[1] = self.fRec106[0];
			self.fRec116[1] = self.fRec116[0];
			self.fRec115[2] = self.fRec115[1];
			self.fRec115[1] = self.fRec115[0];
			self.fVec14[1] = self.fVec14[0];
			self.fRec114[1] = self.fRec114[0];
			self.fRec113[2] = self.fRec113[1];
			self.fRec113[1] = self.fRec113[0];
			self.fRec112[2] = self.fRec112[1];
			self.fRec112[1] = self.fRec112[0];
			self.fRec111[2] = self.fRec111[1];
			self.fRec111[1] = self.fRec111[0];
			self.fRec121[1] = self.fRec121[0];
			self.fRec120[2] = self.fRec120[1];
			self.fRec120[1] = self.fRec120[0];
			self.fVec15[1] = self.fVec15[0];
			self.fRec119[1] = self.fRec119[0];
			self.fRec118[2] = self.fRec118[1];
			self.fRec118[1] = self.fRec118[0];
			self.fRec117[2] = self.fRec117[1];
			self.fRec117[1] = self.fRec117[0];
			self.fRec125[1] = self.fRec125[0];
			self.fRec124[2] = self.fRec124[1];
			self.fRec124[1] = self.fRec124[0];
			self.fVec16[1] = self.fVec16[0];
			self.fRec123[1] = self.fRec123[0];
			self.fRec122[2] = self.fRec122[1];
			self.fRec122[1] = self.fRec122[0];
			self.fRec127[1] = self.fRec127[0];
			self.fRec126[2] = self.fRec126[1];
			self.fRec126[1] = self.fRec126[0];
			self.fRec132[1] = self.fRec132[0];
			self.fRec131[2] = self.fRec131[1];
			self.fRec131[1] = self.fRec131[0];
			self.fRec130[2] = self.fRec130[1];
			self.fRec130[1] = self.fRec130[0];
			self.fRec129[2] = self.fRec129[1];
			self.fRec129[1] = self.fRec129[0];
			self.fRec128[2] = self.fRec128[1];
			self.fRec128[1] = self.fRec128[0];
			self.fRec138[1] = self.fRec138[0];
			self.fRec137[2] = self.fRec137[1];
			self.fRec137[1] = self.fRec137[0];
			self.fVec17[1] = self.fVec17[0];
			self.fRec136[1] = self.fRec136[0];
			self.fRec135[2] = self.fRec135[1];
			self.fRec135[1] = self.fRec135[0];
			self.fRec134[2] = self.fRec134[1];
			self.fRec134[1] = self.fRec134[0];
			self.fRec133[2] = self.fRec133[1];
			self.fRec133[1] = self.fRec133[0];
			self.fRec143[1] = self.fRec143[0];
			self.fRec142[2] = self.fRec142[1];
			self.fRec142[1] = self.fRec142[0];
			self.fVec18[1] = self.fVec18[0];
			self.fRec141[1] = self.fRec141[0];
			self.fRec140[2] = self.fRec140[1];
			self.fRec140[1] = self.fRec140[0];
			self.fRec139[2] = self.fRec139[1];
			self.fRec139[1] = self.fRec139[0];
			self.fRec147[1] = self.fRec147[0];
			self.fRec146[2] = self.fRec146[1];
			self.fRec146[1] = self.fRec146[0];
			self.fVec19[1] = self.fVec19[0];
			self.fRec145[1] = self.fRec145[0];
			self.fRec144[2] = self.fRec144[1];
			self.fRec144[1] = self.fRec144[0];
			self.fRec149[1] = self.fRec149[0];
			self.fRec148[2] = self.fRec148[1];
			self.fRec148[1] = self.fRec148[0];
			self.fRec154[1] = self.fRec154[0];
			self.fRec153[2] = self.fRec153[1];
			self.fRec153[1] = self.fRec153[0];
			self.fRec152[2] = self.fRec152[1];
			self.fRec152[1] = self.fRec152[0];
			self.fRec151[2] = self.fRec151[1];
			self.fRec151[1] = self.fRec151[0];
			self.fRec150[2] = self.fRec150[1];
			self.fRec150[1] = self.fRec150[0];
			self.fRec160[1] = self.fRec160[0];
			self.fRec159[2] = self.fRec159[1];
			self.fRec159[1] = self.fRec159[0];
			self.fVec20[1] = self.fVec20[0];
			self.fRec158[1] = self.fRec158[0];
			self.fRec157[2] = self.fRec157[1];
			self.fRec157[1] = self.fRec157[0];
			self.fRec156[2] = self.fRec156[1];
			self.fRec156[1] = self.fRec156[0];
			self.fRec155[2] = self.fRec155[1];
			self.fRec155[1] = self.fRec155[0];
			self.fRec165[1] = self.fRec165[0];
			self.fRec164[2] = self.fRec164[1];
			self.fRec164[1] = self.fRec164[0];
			self.fVec21[1] = self.fVec21[0];
			self.fRec163[1] = self.fRec163[0];
			self.fRec162[2] = self.fRec162[1];
			self.fRec162[1] = self.fRec162[0];
			self.fRec161[2] = self.fRec161[1];
			self.fRec161[1] = self.fRec161[0];
			self.fRec169[1] = self.fRec169[0];
			self.fRec168[2] = self.fRec168[1];
			self.fRec168[1] = self.fRec168[0];
			self.fVec22[1] = self.fVec22[0];
			self.fRec167[1] = self.fRec167[0];
			self.fRec166[2] = self.fRec166[1];
			self.fRec166[1] = self.fRec166[0];
			self.fRec171[1] = self.fRec171[0];
			self.fRec170[2] = self.fRec170[1];
			self.fRec170[1] = self.fRec170[0];
			self.fRec176[1] = self.fRec176[0];
			self.fRec175[2] = self.fRec175[1];
			self.fRec175[1] = self.fRec175[0];
			self.fRec174[2] = self.fRec174[1];
			self.fRec174[1] = self.fRec174[0];
			self.fRec173[2] = self.fRec173[1];
			self.fRec173[1] = self.fRec173[0];
			self.fRec172[2] = self.fRec172[1];
			self.fRec172[1] = self.fRec172[0];
			self.fRec182[1] = self.fRec182[0];
			self.fRec181[2] = self.fRec181[1];
			self.fRec181[1] = self.fRec181[0];
			self.fVec23[1] = self.fVec23[0];
			self.fRec180[1] = self.fRec180[0];
			self.fRec179[2] = self.fRec179[1];
			self.fRec179[1] = self.fRec179[0];
			self.fRec178[2] = self.fRec178[1];
			self.fRec178[1] = self.fRec178[0];
			self.fRec177[2] = self.fRec177[1];
			self.fRec177[1] = self.fRec177[0];
			self.fRec187[1] = self.fRec187[0];
			self.fRec186[2] = self.fRec186[1];
			self.fRec186[1] = self.fRec186[0];
			self.fVec24[1] = self.fVec24[0];
			self.fRec185[1] = self.fRec185[0];
			self.fRec184[2] = self.fRec184[1];
			self.fRec184[1] = self.fRec184[0];
			self.fRec183[2] = self.fRec183[1];
			self.fRec183[1] = self.fRec183[0];
			self.fRec191[1] = self.fRec191[0];
			self.fRec190[2] = self.fRec190[1];
			self.fRec190[1] = self.fRec190[0];
			self.fVec25[1] = self.fVec25[0];
			self.fRec189[1] = self.fRec189[0];
			self.fRec188[2] = self.fRec188[1];
			self.fRec188[1] = self.fRec188[0];
			self.fRec193[1] = self.fRec193[0];
			self.fRec192[2] = self.fRec192[1];
			self.fRec192[1] = self.fRec192[0];
			self.fRec198[1] = self.fRec198[0];
			self.fRec197[2] = self.fRec197[1];
			self.fRec197[1] = self.fRec197[0];
			self.fRec196[2] = self.fRec196[1];
			self.fRec196[1] = self.fRec196[0];
			self.fRec195[2] = self.fRec195[1];
			self.fRec195[1] = self.fRec195[0];
			self.fRec194[2] = self.fRec194[1];
			self.fRec194[1] = self.fRec194[0];
			self.fRec204[1] = self.fRec204[0];
			self.fRec203[2] = self.fRec203[1];
			self.fRec203[1] = self.fRec203[0];
			self.fVec26[1] = self.fVec26[0];
			self.fRec202[1] = self.fRec202[0];
			self.fRec201[2] = self.fRec201[1];
			self.fRec201[1] = self.fRec201[0];
			self.fRec200[2] = self.fRec200[1];
			self.fRec200[1] = self.fRec200[0];
			self.fRec199[2] = self.fRec199[1];
			self.fRec199[1] = self.fRec199[0];
			self.fRec209[1] = self.fRec209[0];
			self.fRec208[2] = self.fRec208[1];
			self.fRec208[1] = self.fRec208[0];
			self.fVec27[1] = self.fVec27[0];
			self.fRec207[1] = self.fRec207[0];
			self.fRec206[2] = self.fRec206[1];
			self.fRec206[1] = self.fRec206[0];
			self.fRec205[2] = self.fRec205[1];
			self.fRec205[1] = self.fRec205[0];
			self.fRec213[1] = self.fRec213[0];
			self.fRec212[2] = self.fRec212[1];
			self.fRec212[1] = self.fRec212[0];
			self.fVec28[1] = self.fVec28[0];
			self.fRec211[1] = self.fRec211[0];
			self.fRec210[2] = self.fRec210[1];
			self.fRec210[1] = self.fRec210[0];
			self.fRec215[1] = self.fRec215[0];
			self.fRec214[2] = self.fRec214[1];
			self.fRec214[1] = self.fRec214[0];
			self.fRec220[1] = self.fRec220[0];
			self.fRec219[2] = self.fRec219[1];
			self.fRec219[1] = self.fRec219[0];
			self.fRec218[2] = self.fRec218[1];
			self.fRec218[1] = self.fRec218[0];
			self.fRec217[2] = self.fRec217[1];
			self.fRec217[1] = self.fRec217[0];
			self.fRec216[2] = self.fRec216[1];
			self.fRec216[1] = self.fRec216[0];
			self.fRec226[1] = self.fRec226[0];
			self.fRec225[2] = self.fRec225[1];
			self.fRec225[1] = self.fRec225[0];
			self.fVec29[1] = self.fVec29[0];
			self.fRec224[1] = self.fRec224[0];
			self.fRec223[2] = self.fRec223[1];
			self.fRec223[1] = self.fRec223[0];
			self.fRec222[2] = self.fRec222[1];
			self.fRec222[1] = self.fRec222[0];
			self.fRec221[2] = self.fRec221[1];
			self.fRec221[1] = self.fRec221[0];
			self.fRec231[1] = self.fRec231[0];
			self.fRec230[2] = self.fRec230[1];
			self.fRec230[1] = self.fRec230[0];
			self.fVec30[1] = self.fVec30[0];
			self.fRec229[1] = self.fRec229[0];
			self.fRec228[2] = self.fRec228[1];
			self.fRec228[1] = self.fRec228[0];
			self.fRec227[2] = self.fRec227[1];
			self.fRec227[1] = self.fRec227[0];
			self.fRec235[1] = self.fRec235[0];
			self.fRec234[2] = self.fRec234[1];
			self.fRec234[1] = self.fRec234[0];
			self.fVec31[1] = self.fVec31[0];
			self.fRec233[1] = self.fRec233[0];
			self.fRec232[2] = self.fRec232[1];
			self.fRec232[1] = self.fRec232[0];
			self.fRec237[1] = self.fRec237[0];
			self.fRec236[2] = self.fRec236[1];
			self.fRec236[1] = self.fRec236[0];
			self.fRec242[1] = self.fRec242[0];
			self.fRec241[2] = self.fRec241[1];
			self.fRec241[1] = self.fRec241[0];
			self.fRec240[2] = self.fRec240[1];
			self.fRec240[1] = self.fRec240[0];
			self.fRec239[2] = self.fRec239[1];
			self.fRec239[1] = self.fRec239[0];
			self.fRec238[2] = self.fRec238[1];
			self.fRec238[1] = self.fRec238[0];
			self.fRec248[1] = self.fRec248[0];
			self.fRec247[2] = self.fRec247[1];
			self.fRec247[1] = self.fRec247[0];
			self.fVec32[1] = self.fVec32[0];
			self.fRec246[1] = self.fRec246[0];
			self.fRec245[2] = self.fRec245[1];
			self.fRec245[1] = self.fRec245[0];
			self.fRec244[2] = self.fRec244[1];
			self.fRec244[1] = self.fRec244[0];
			self.fRec243[2] = self.fRec243[1];
			self.fRec243[1] = self.fRec243[0];
			self.fRec253[1] = self.fRec253[0];
			self.fRec252[2] = self.fRec252[1];
			self.fRec252[1] = self.fRec252[0];
			self.fVec33[1] = self.fVec33[0];
			self.fRec251[1] = self.fRec251[0];
			self.fRec250[2] = self.fRec250[1];
			self.fRec250[1] = self.fRec250[0];
			self.fRec249[2] = self.fRec249[1];
			self.fRec249[1] = self.fRec249[0];
			self.fRec257[1] = self.fRec257[0];
			self.fRec256[2] = self.fRec256[1];
			self.fRec256[1] = self.fRec256[0];
			self.fVec34[1] = self.fVec34[0];
			self.fRec255[1] = self.fRec255[0];
			self.fRec254[2] = self.fRec254[1];
			self.fRec254[1] = self.fRec254[0];
			self.fRec259[1] = self.fRec259[0];
			self.fRec258[2] = self.fRec258[1];
			self.fRec258[1] = self.fRec258[0];
			self.fRec264[1] = self.fRec264[0];
			self.fRec263[2] = self.fRec263[1];
			self.fRec263[1] = self.fRec263[0];
			self.fRec262[2] = self.fRec262[1];
			self.fRec262[1] = self.fRec262[0];
			self.fRec261[2] = self.fRec261[1];
			self.fRec261[1] = self.fRec261[0];
			self.fRec260[2] = self.fRec260[1];
			self.fRec260[1] = self.fRec260[0];
			self.fRec270[1] = self.fRec270[0];
			self.fRec269[2] = self.fRec269[1];
			self.fRec269[1] = self.fRec269[0];
			self.fVec35[1] = self.fVec35[0];
			self.fRec268[1] = self.fRec268[0];
			self.fRec267[2] = self.fRec267[1];
			self.fRec267[1] = self.fRec267[0];
			self.fRec266[2] = self.fRec266[1];
			self.fRec266[1] = self.fRec266[0];
			self.fRec265[2] = self.fRec265[1];
			self.fRec265[1] = self.fRec265[0];
			self.fRec275[1] = self.fRec275[0];
			self.fRec274[2] = self.fRec274[1];
			self.fRec274[1] = self.fRec274[0];
			self.fVec36[1] = self.fVec36[0];
			self.fRec273[1] = self.fRec273[0];
			self.fRec272[2] = self.fRec272[1];
			self.fRec272[1] = self.fRec272[0];
			self.fRec271[2] = self.fRec271[1];
			self.fRec271[1] = self.fRec271[0];
			self.fRec279[1] = self.fRec279[0];
			self.fRec278[2] = self.fRec278[1];
			self.fRec278[1] = self.fRec278[0];
			self.fVec37[1] = self.fVec37[0];
			self.fRec277[1] = self.fRec277[0];
			self.fRec276[2] = self.fRec276[1];
			self.fRec276[1] = self.fRec276[0];
			self.fRec281[1] = self.fRec281[0];
			self.fRec280[2] = self.fRec280[1];
			self.fRec280[1] = self.fRec280[0];
			self.fRec286[1] = self.fRec286[0];
			self.fRec285[2] = self.fRec285[1];
			self.fRec285[1] = self.fRec285[0];
			self.fRec284[2] = self.fRec284[1];
			self.fRec284[1] = self.fRec284[0];
			self.fRec283[2] = self.fRec283[1];
			self.fRec283[1] = self.fRec283[0];
			self.fRec282[2] = self.fRec282[1];
			self.fRec282[1] = self.fRec282[0];
			self.fRec292[1] = self.fRec292[0];
			self.fRec291[2] = self.fRec291[1];
			self.fRec291[1] = self.fRec291[0];
			self.fVec38[1] = self.fVec38[0];
			self.fRec290[1] = self.fRec290[0];
			self.fRec289[2] = self.fRec289[1];
			self.fRec289[1] = self.fRec289[0];
			self.fRec288[2] = self.fRec288[1];
			self.fRec288[1] = self.fRec288[0];
			self.fRec287[2] = self.fRec287[1];
			self.fRec287[1] = self.fRec287[0];
			self.fRec297[1] = self.fRec297[0];
			self.fRec296[2] = self.fRec296[1];
			self.fRec296[1] = self.fRec296[0];
			self.fVec39[1] = self.fVec39[0];
			self.fRec295[1] = self.fRec295[0];
			self.fRec294[2] = self.fRec294[1];
			self.fRec294[1] = self.fRec294[0];
			self.fRec293[2] = self.fRec293[1];
			self.fRec293[1] = self.fRec293[0];
			self.fRec301[1] = self.fRec301[0];
			self.fRec300[2] = self.fRec300[1];
			self.fRec300[1] = self.fRec300[0];
			self.fVec40[1] = self.fVec40[0];
			self.fRec299[1] = self.fRec299[0];
			self.fRec298[2] = self.fRec298[1];
			self.fRec298[1] = self.fRec298[0];
			self.fRec303[1] = self.fRec303[0];
			self.fRec302[2] = self.fRec302[1];
			self.fRec302[1] = self.fRec302[0];
			self.fRec308[1] = self.fRec308[0];
			self.fRec307[2] = self.fRec307[1];
			self.fRec307[1] = self.fRec307[0];
			self.fRec306[2] = self.fRec306[1];
			self.fRec306[1] = self.fRec306[0];
			self.fRec305[2] = self.fRec305[1];
			self.fRec305[1] = self.fRec305[0];
			self.fRec304[2] = self.fRec304[1];
			self.fRec304[1] = self.fRec304[0];
			self.fRec314[1] = self.fRec314[0];
			self.fRec313[2] = self.fRec313[1];
			self.fRec313[1] = self.fRec313[0];
			self.fVec41[1] = self.fVec41[0];
			self.fRec312[1] = self.fRec312[0];
			self.fRec311[2] = self.fRec311[1];
			self.fRec311[1] = self.fRec311[0];
			self.fRec310[2] = self.fRec310[1];
			self.fRec310[1] = self.fRec310[0];
			self.fRec309[2] = self.fRec309[1];
			self.fRec309[1] = self.fRec309[0];
			self.fRec319[1] = self.fRec319[0];
			self.fRec318[2] = self.fRec318[1];
			self.fRec318[1] = self.fRec318[0];
			self.fVec42[1] = self.fVec42[0];
			self.fRec317[1] = self.fRec317[0];
			self.fRec316[2] = self.fRec316[1];
			self.fRec316[1] = self.fRec316[0];
			self.fRec315[2] = self.fRec315[1];
			self.fRec315[1] = self.fRec315[0];
			self.fRec323[1] = self.fRec323[0];
			self.fRec322[2] = self.fRec322[1];
			self.fRec322[1] = self.fRec322[0];
			self.fVec43[1] = self.fVec43[0];
			self.fRec321[1] = self.fRec321[0];
			self.fRec320[2] = self.fRec320[1];
			self.fRec320[1] = self.fRec320[0];
			self.fRec325[1] = self.fRec325[0];
			self.fRec324[2] = self.fRec324[1];
			self.fRec324[1] = self.fRec324[0];
			self.fRec330[1] = self.fRec330[0];
			self.fRec329[2] = self.fRec329[1];
			self.fRec329[1] = self.fRec329[0];
			self.fRec328[2] = self.fRec328[1];
			self.fRec328[1] = self.fRec328[0];
			self.fRec327[2] = self.fRec327[1];
			self.fRec327[1] = self.fRec327[0];
			self.fRec326[2] = self.fRec326[1];
			self.fRec326[1] = self.fRec326[0];
			self.fRec336[1] = self.fRec336[0];
			self.fRec335[2] = self.fRec335[1];
			self.fRec335[1] = self.fRec335[0];
			self.fVec44[1] = self.fVec44[0];
			self.fRec334[1] = self.fRec334[0];
			self.fRec333[2] = self.fRec333[1];
			self.fRec333[1] = self.fRec333[0];
			self.fRec332[2] = self.fRec332[1];
			self.fRec332[1] = self.fRec332[0];
			self.fRec331[2] = self.fRec331[1];
			self.fRec331[1] = self.fRec331[0];
			self.fRec341[1] = self.fRec341[0];
			self.fRec340[2] = self.fRec340[1];
			self.fRec340[1] = self.fRec340[0];
			self.fVec45[1] = self.fVec45[0];
			self.fRec339[1] = self.fRec339[0];
			self.fRec338[2] = self.fRec338[1];
			self.fRec338[1] = self.fRec338[0];
			self.fRec337[2] = self.fRec337[1];
			self.fRec337[1] = self.fRec337[0];
			self.fRec345[1] = self.fRec345[0];
			self.fRec344[2] = self.fRec344[1];
			self.fRec344[1] = self.fRec344[0];
			self.fVec46[1] = self.fVec46[0];
			self.fRec343[1] = self.fRec343[0];
			self.fRec342[2] = self.fRec342[1];
			self.fRec342[1] = self.fRec342[0];
			self.fRec347[1] = self.fRec347[0];
			self.fRec346[2] = self.fRec346[1];
			self.fRec346[1] = self.fRec346[0];
			self.fRec352[1] = self.fRec352[0];
			self.fRec351[2] = self.fRec351[1];
			self.fRec351[1] = self.fRec351[0];
			self.fRec350[2] = self.fRec350[1];
			self.fRec350[1] = self.fRec350[0];
			self.fRec349[2] = self.fRec349[1];
			self.fRec349[1] = self.fRec349[0];
			self.fRec348[2] = self.fRec348[1];
			self.fRec348[1] = self.fRec348[0];
			self.fRec358[1] = self.fRec358[0];
			self.fRec357[2] = self.fRec357[1];
			self.fRec357[1] = self.fRec357[0];
			self.fVec47[1] = self.fVec47[0];
			self.fRec356[1] = self.fRec356[0];
			self.fRec355[2] = self.fRec355[1];
			self.fRec355[1] = self.fRec355[0];
			self.fRec354[2] = self.fRec354[1];
			self.fRec354[1] = self.fRec354[0];
			self.fRec353[2] = self.fRec353[1];
			self.fRec353[1] = self.fRec353[0];
			self.fRec363[1] = self.fRec363[0];
			self.fRec362[2] = self.fRec362[1];
			self.fRec362[1] = self.fRec362[0];
			self.fVec48[1] = self.fVec48[0];
			self.fRec361[1] = self.fRec361[0];
			self.fRec360[2] = self.fRec360[1];
			self.fRec360[1] = self.fRec360[0];
			self.fRec359[2] = self.fRec359[1];
			self.fRec359[1] = self.fRec359[0];
			self.fRec367[1] = self.fRec367[0];
			self.fRec366[2] = self.fRec366[1];
			self.fRec366[1] = self.fRec366[0];
			self.fVec49[1] = self.fVec49[0];
			self.fRec365[1] = self.fRec365[0];
			self.fRec364[2] = self.fRec364[1];
			self.fRec364[1] = self.fRec364[0];
			self.fRec369[1] = self.fRec369[0];
			self.fRec368[2] = self.fRec368[1];
			self.fRec368[1] = self.fRec368[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fVec51[1] = self.fVec51[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[2] = self.fRec15[1];
			self.fRec15[1] = self.fRec15[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

