


pub struct mydsp {
	
	fDummy: f32,
	fButton0: f32,
	fVec0: [f32;2],
	fCheckbox0: f32,
	fButton1: f32,
	fVec1: [f32;2],
	fCheckbox1: f32,
	iRec1: [i32;2],
	fRec0: [f32;4],
	fButton2: f32,
	fVec2: [f32;2],
	fSamplingFreq: i32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fButton0: 0.0,
			fVec0: [0.0;2],
			fCheckbox0: 0.0,
			fButton1: 0.0,
			fVec1: [0.0;2],
			fCheckbox1: 0.0,
			iRec1: [0;2],
			fRec0: [0.0;4],
			fButton2: 0.0,
			fVec2: [0.0;2],
			fSamplingFreq: 0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Handy test inputs for reverberator demos below.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "reverbTester");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		5
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			1 => {
				rate = 0;
				
			},
			2 => {
				rate = 0;
				
			},
			3 => {
				rate = 1;
				
			},
			4 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fButton0 = 0.0;
		self.fCheckbox0 = 0.0;
		self.fButton1 = 0.0;
		self.fCheckbox1 = 0.0;
		self.fButton2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fVec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fVec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.iRec1[l2 as usize] = 0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 4) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("reverbTester");
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("Input Config");
		ui_interface.declare(&mut self.fCheckbox0, "1", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the stereo external audio inputs are   disabled (good for hearing the impulse response or pink-noise response alone)");
		ui_interface.addCheckButton("Mute Ext Inputs", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fCheckbox1, "2", "");
		ui_interface.declare(&mut self.fCheckbox1, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting   the EQ sections)");
		ui_interface.addCheckButton("Pink Noise", &mut self.fCheckbox1);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("Impulse Selection");
		ui_interface.declare(&mut self.fButton1, "1", "");
		ui_interface.declare(&mut self.fButton1, "tooltip", "Send impulse into LEFT channel");
		ui_interface.addButton("Left", &mut self.fButton1);
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.declare(&mut self.fButton0, "tooltip", "Send impulse into LEFT and RIGHT channels");
		ui_interface.addButton("Center", &mut self.fButton0);
		ui_interface.declare(&mut self.fButton2, "3", "");
		ui_interface.declare(&mut self.fButton2, "tooltip", "Send impulse into RIGHT channel");
		ui_interface.addButton("Right", &mut self.fButton2);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fButton0 as f32);
		let mut fSlow1: f32 = (1.0 - (self.fCheckbox0 as f32));
		let mut fSlow2: f32 = (self.fButton1 as f32);
		let mut fSlow3: f32 = (0.100000001 * (self.fCheckbox1 as f32));
		let mut fSlow4: f32 = (self.fButton2 as f32);
		let mut i: i32 = 0;
		loop {
			self.fVec0[0] = fSlow0;
			let mut iTemp0: i32 = (((fSlow0 - self.fVec0[1]) > 0.0) as i32);
			self.fVec1[0] = fSlow2;
			self.iRec1[0] = ((1103515245 * self.iRec1[1]) + 12345);
			self.fRec0[0] = (((0.522189379 * self.fRec0[3]) + ((4.65661287e-10 * (self.iRec1[0] as f32)) + (2.49495602 * self.fRec0[1]))) - (2.0172658 * self.fRec0[2]));
			let mut fTemp1: f32 = (fSlow3 * (((0.0499220341 * self.fRec0[0]) + (0.0506126992 * self.fRec0[2])) - ((0.0959935337 * self.fRec0[1]) + (0.00440878607 * self.fRec0[3]))));
			outputs[0][i as usize] = ((((iTemp0 as f32) + ((fSlow1 * (inputs[3][i as usize] as f32)) + ((((fSlow2 - self.fVec1[1]) > 0.0) as i32) as f32))) + fTemp1) as f32);
			self.fVec2[0] = fSlow4;
			outputs[1][i as usize] = ((((((fSlow4 - self.fVec2[1]) > 0.0) as i32) as f32) + ((fSlow1 * (inputs[4][i as usize] as f32)) + ((iTemp0 as f32) + fTemp1))) as f32);
			self.fVec0[1] = self.fVec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.iRec1[1] = self.iRec1[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec0[j0 as usize] = self.fRec0[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.fVec2[1] = self.fVec2[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

