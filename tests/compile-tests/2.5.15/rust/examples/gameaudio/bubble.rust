


pub struct mydsp {
	
	fDummy: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fVslider0: f32,
	fConst2: f32,
	fVslider1: f32,
	iVec0: [i32;2],
	fRec9: [f32;2],
	fVslider2: f32,
	fConst3: f32,
	fHslider0: f32,
	fConst4: f32,
	fButton0: f32,
	fVec1: [f32;2],
	iRec12: [i32;2],
	fRec10: [f32;2],
	fRec11: [f32;2],
	fConst5: f32,
	fRec13: [f32;2],
	IOTA: i32,
	fVec2: [f32;8192],
	iConst6: i32,
	fRec8: [f32;2],
	fRec15: [f32;2],
	fVec3: [f32;8192],
	iConst7: i32,
	fRec14: [f32;2],
	fRec17: [f32;2],
	fVec4: [f32;8192],
	iConst8: i32,
	fRec16: [f32;2],
	fRec19: [f32;2],
	fVec5: [f32;8192],
	iConst9: i32,
	fRec18: [f32;2],
	fRec21: [f32;2],
	fVec6: [f32;8192],
	iConst10: i32,
	fRec20: [f32;2],
	fRec23: [f32;2],
	fVec7: [f32;8192],
	iConst11: i32,
	fRec22: [f32;2],
	fRec25: [f32;2],
	fVec8: [f32;8192],
	iConst12: i32,
	fRec24: [f32;2],
	fRec27: [f32;2],
	fVec9: [f32;8192],
	iConst13: i32,
	fRec26: [f32;2],
	fVec10: [f32;2048],
	iConst14: i32,
	iConst15: i32,
	fRec6: [f32;2],
	fVec11: [f32;2048],
	iConst16: i32,
	iConst17: i32,
	fRec4: [f32;2],
	fVec12: [f32;2048],
	iConst18: i32,
	iConst19: i32,
	fRec2: [f32;2],
	fVec13: [f32;1024],
	iConst20: i32,
	iConst21: i32,
	fRec0: [f32;2],
	fRec37: [f32;2],
	fVec14: [f32;8192],
	fConst22: f32,
	fVslider3: f32,
	fRec36: [f32;2],
	fRec39: [f32;2],
	fVec15: [f32;8192],
	fRec38: [f32;2],
	fRec41: [f32;2],
	fVec16: [f32;8192],
	fRec40: [f32;2],
	fRec43: [f32;2],
	fVec17: [f32;8192],
	fRec42: [f32;2],
	fRec45: [f32;2],
	fVec18: [f32;8192],
	fRec44: [f32;2],
	fRec47: [f32;2],
	fVec19: [f32;8192],
	fRec46: [f32;2],
	fRec49: [f32;2],
	fVec20: [f32;8192],
	fRec48: [f32;2],
	fRec51: [f32;2],
	fVec21: [f32;8192],
	fRec50: [f32;2],
	fVec22: [f32;2048],
	fRec34: [f32;2],
	fVec23: [f32;2048],
	fRec32: [f32;2],
	fVec24: [f32;2048],
	fRec30: [f32;2],
	fVec25: [f32;2048],
	fRec28: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fVslider0: 0.0,
			fConst2: 0.0,
			fVslider1: 0.0,
			iVec0: [0;2],
			fRec9: [0.0;2],
			fVslider2: 0.0,
			fConst3: 0.0,
			fHslider0: 0.0,
			fConst4: 0.0,
			fButton0: 0.0,
			fVec1: [0.0;2],
			iRec12: [0;2],
			fRec10: [0.0;2],
			fRec11: [0.0;2],
			fConst5: 0.0,
			fRec13: [0.0;2],
			IOTA: 0,
			fVec2: [0.0;8192],
			iConst6: 0,
			fRec8: [0.0;2],
			fRec15: [0.0;2],
			fVec3: [0.0;8192],
			iConst7: 0,
			fRec14: [0.0;2],
			fRec17: [0.0;2],
			fVec4: [0.0;8192],
			iConst8: 0,
			fRec16: [0.0;2],
			fRec19: [0.0;2],
			fVec5: [0.0;8192],
			iConst9: 0,
			fRec18: [0.0;2],
			fRec21: [0.0;2],
			fVec6: [0.0;8192],
			iConst10: 0,
			fRec20: [0.0;2],
			fRec23: [0.0;2],
			fVec7: [0.0;8192],
			iConst11: 0,
			fRec22: [0.0;2],
			fRec25: [0.0;2],
			fVec8: [0.0;8192],
			iConst12: 0,
			fRec24: [0.0;2],
			fRec27: [0.0;2],
			fVec9: [0.0;8192],
			iConst13: 0,
			fRec26: [0.0;2],
			fVec10: [0.0;2048],
			iConst14: 0,
			iConst15: 0,
			fRec6: [0.0;2],
			fVec11: [0.0;2048],
			iConst16: 0,
			iConst17: 0,
			fRec4: [0.0;2],
			fVec12: [0.0;2048],
			iConst18: 0,
			iConst19: 0,
			fRec2: [0.0;2],
			fVec13: [0.0;1024],
			iConst20: 0,
			iConst21: 0,
			fRec0: [0.0;2],
			fRec37: [0.0;2],
			fVec14: [0.0;8192],
			fConst22: 0.0,
			fVslider3: 0.0,
			fRec36: [0.0;2],
			fRec39: [0.0;2],
			fVec15: [0.0;8192],
			fRec38: [0.0;2],
			fRec41: [0.0;2],
			fVec16: [0.0;8192],
			fRec40: [0.0;2],
			fRec43: [0.0;2],
			fVec17: [0.0;8192],
			fRec42: [0.0;2],
			fRec45: [0.0;2],
			fVec18: [0.0;8192],
			fRec44: [0.0;2],
			fRec47: [0.0;2],
			fVec19: [0.0;8192],
			fRec46: [0.0;2],
			fRec49: [0.0;2],
			fVec20: [0.0;8192],
			fRec48: [0.0;2],
			fRec51: [0.0;2],
			fVec21: [0.0;8192],
			fRec50: [0.0;2],
			fVec22: [0.0;2048],
			fRec34: [0.0;2],
			fVec23: [0.0;2048],
			fRec32: [0.0;2],
			fVec24: [0.0;2048],
			fRec30: [0.0;2],
			fVec25: [0.0;2048],
			fRec28: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c) 2017: Yann Orlarey, GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Production of a water drop bubble sound.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "bubble");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("reverbs.lib/name", "Faust Reverb Library");
		m.declare("reverbs.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fVslider0 = 0.5;
		self.fVslider1 = 0.5;
		self.fVslider2 = 0.333299994;
		self.fHslider0 = 600.0;
		self.fButton0 = 0.0;
		self.fVslider3 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec9[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.iRec12[l3 as usize] = 0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec10[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec11[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec13[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l7: i32 = 0;
		loop {
			self.fVec2[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 8192) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec8[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec15[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fVec3[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 8192) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec14[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec17[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fVec4[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 8192) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec16[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec19[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fVec5[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 8192) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec18[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec21[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fVec6[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 8192) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec20[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec23[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fVec7[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 8192) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec22[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec25[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fVec8[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 8192) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec24[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec27[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fVec9[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 8192) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec26[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fVec10[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2048) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec6[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 2) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fVec11[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2048) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec4[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fVec12[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2048) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec2[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 2) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec13[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 1024) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec0[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec37[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fVec14[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 8192) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec36[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec39[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fVec15[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 8192) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec38[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec41[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fVec16[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 8192) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec40[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 2) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec43[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fVec17[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 8192) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec42[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 2) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec45[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fVec18[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 8192) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec44[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 2) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec47[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fVec19[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 8192) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec46[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec49[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 2) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fVec20[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 8192) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec48[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec51[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fVec21[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 8192) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec50[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fVec22[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2048) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec34[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 2) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fVec23[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 2048) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec32[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 2) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fVec24[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2048) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec30[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 2) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fVec25[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 2048) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec28[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (12348.0 / self.fConst0);
		self.fConst2 = (17640.0 / self.fConst0);
		self.fConst3 = (6.28318548 / self.fConst0);
		self.fConst4 = (0.075000003 / self.fConst0);
		self.fConst5 = (1.0 / self.fConst0);
		self.iConst6 = ((0.0253061224 * self.fConst0) as i32);
		self.iConst7 = ((0.0269387756 * self.fConst0) as i32);
		self.iConst8 = ((0.0289569162 * self.fConst0) as i32);
		self.iConst9 = ((0.0307482984 * self.fConst0) as i32);
		self.iConst10 = ((0.0322448984 * self.fConst0) as i32);
		self.iConst11 = ((0.033809524 * self.fConst0) as i32);
		self.iConst12 = ((0.0353061222 * self.fConst0) as i32);
		self.iConst13 = ((0.0366666652 * self.fConst0) as i32);
		self.iConst14 = ((0.0126077095 * self.fConst0) as i32);
		self.iConst15 = std::cmp::min(1024, std::cmp::max(0, (self.iConst14 + -1)));
		self.iConst16 = ((0.00999999978 * self.fConst0) as i32);
		self.iConst17 = std::cmp::min(1024, std::cmp::max(0, (self.iConst16 + -1)));
		self.iConst18 = ((0.00773242628 * self.fConst0) as i32);
		self.iConst19 = std::cmp::min(1024, std::cmp::max(0, (self.iConst18 + -1)));
		self.iConst20 = ((0.00510204071 * self.fConst0) as i32);
		self.iConst21 = std::cmp::min(1024, std::cmp::max(0, (self.iConst20 + -1)));
		self.fConst22 = (0.00104308384 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("bubble");
		ui_interface.openHorizontalBox("Freeverb");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openVerticalBox("0x00");
		ui_interface.declare(&mut self.fVslider1, "0", "");
		ui_interface.declare(&mut self.fVslider1, "style", "knob");
		ui_interface.declare(&mut self.fVslider1, "tooltip", "Somehow control the   density of the reverb.");
		ui_interface.addVerticalSlider("Damp", &mut self.fVslider1, 0.5, 0.0, 1.0, 0.025000000000000001);
		ui_interface.declare(&mut self.fVslider0, "1", "");
		ui_interface.declare(&mut self.fVslider0, "style", "knob");
		ui_interface.declare(&mut self.fVslider0, "tooltip", "The room size   between 0 and 1 with 1 for the largest room.");
		ui_interface.addVerticalSlider("RoomSize", &mut self.fVslider0, 0.5, 0.0, 1.0, 0.025000000000000001);
		ui_interface.declare(&mut self.fVslider3, "2", "");
		ui_interface.declare(&mut self.fVslider3, "style", "knob");
		ui_interface.declare(&mut self.fVslider3, "tooltip", "Spatial   spread between 0 and 1 with 1 for maximum spread.");
		ui_interface.addVerticalSlider("Stereo Spread", &mut self.fVslider3, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fVslider2, "1", "");
		ui_interface.declare(&mut self.fVslider2, "tooltip", "The amount of reverb applied to the signal   between 0 and 1 with 1 for the maximum amount of reverb.");
		ui_interface.addVerticalSlider("Wet", &mut self.fVslider2, 0.33329999999999999, 0.0, 1.0, 0.025000000000000001);
		ui_interface.closeBox();
		ui_interface.openVerticalBox("bubble");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider0, 600.0, 150.0, 2000.0, 1.0);
		ui_interface.closeBox();
		ui_interface.addButton("drop", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = ((self.fConst1 * (self.fVslider0 as f32)) + 0.699999988);
		let mut fSlow1: f32 = (self.fConst2 * (self.fVslider1 as f32));
		let mut fSlow2: f32 = (1.0 - fSlow1);
		let mut fSlow3: f32 = (self.fVslider2 as f32);
		let mut fSlow4: f32 = (0.200000003 * fSlow3);
		let mut fSlow5: f32 = (self.fHslider0 as f32);
		let mut fSlow6: f32 = (self.fConst3 * fSlow5);
		let mut fSlow7: f32 = ((0.0430000015 * fSlow5) + (0.00139999995 * f32::powf(fSlow5, 1.5)));
		let mut fSlow8: f32 = (self.fConst4 * fSlow7);
		let mut fSlow9: f32 = (self.fButton0 as f32);
		let mut fSlow10: f32 = (self.fConst5 * (0.0 - fSlow7));
		let mut fSlow11: f32 = (1.0 - fSlow3);
		let mut iSlow12: i32 = ((self.fConst22 * (self.fVslider3 as f32)) as i32);
		let mut iSlow13: i32 = (self.iConst6 + iSlow12);
		let mut iSlow14: i32 = (self.iConst7 + iSlow12);
		let mut iSlow15: i32 = (self.iConst8 + iSlow12);
		let mut iSlow16: i32 = (self.iConst9 + iSlow12);
		let mut iSlow17: i32 = (self.iConst10 + iSlow12);
		let mut iSlow18: i32 = (self.iConst11 + iSlow12);
		let mut iSlow19: i32 = (self.iConst12 + iSlow12);
		let mut iSlow20: i32 = (self.iConst13 + iSlow12);
		let mut iSlow21: i32 = (iSlow12 + -1);
		let mut iSlow22: i32 = std::cmp::min(1024, std::cmp::max(0, (self.iConst14 + iSlow21)));
		let mut iSlow23: i32 = std::cmp::min(1024, std::cmp::max(0, (self.iConst16 + iSlow21)));
		let mut iSlow24: i32 = std::cmp::min(1024, std::cmp::max(0, (self.iConst18 + iSlow21)));
		let mut iSlow25: i32 = std::cmp::min(1024, std::cmp::max(0, (self.iConst20 + iSlow21)));
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec9[0] = ((fSlow1 * self.fRec9[1]) + (fSlow2 * self.fRec8[1]));
			self.fVec1[0] = fSlow9;
			self.iRec12[0] = (if (((fSlow9 > self.fVec1[1]) as i32) as i32 == 1) { 0 } else { self.iRec12[1] } + 1);
			let mut fTemp0: f32 = (fSlow6 * ((fSlow8 * (self.iRec12[0] as f32)) + 1.0));
			let mut fTemp1: f32 = f32::sin(fTemp0);
			let mut fTemp2: f32 = f32::cos(fTemp0);
			self.fRec10[0] = ((self.fRec11[1] * fTemp1) + (self.fRec10[1] * fTemp2));
			self.fRec11[0] = (((self.fRec11[1] * fTemp2) + (self.fRec10[1] * (0.0 - fTemp1))) + ((1 - self.iVec0[1]) as f32));
			self.fRec13[0] = ((0.99000001 * self.fRec13[1]) + (0.00999999978 * f32::exp((fSlow10 * (self.iRec12[0] as f32)))));
			let mut fTemp3: f32 = (self.fRec10[0] * self.fRec13[0]);
			let mut fTemp4: f32 = (fSlow4 * fTemp3);
			self.fVec2[(self.IOTA & 8191) as usize] = ((fSlow0 * self.fRec9[0]) + fTemp4);
			self.fRec8[0] = self.fVec2[((self.IOTA - self.iConst6) & 8191) as usize];
			self.fRec15[0] = ((fSlow1 * self.fRec15[1]) + (fSlow2 * self.fRec14[1]));
			self.fVec3[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec15[0]));
			self.fRec14[0] = self.fVec3[((self.IOTA - self.iConst7) & 8191) as usize];
			self.fRec17[0] = ((fSlow1 * self.fRec17[1]) + (fSlow2 * self.fRec16[1]));
			self.fVec4[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec17[0]));
			self.fRec16[0] = self.fVec4[((self.IOTA - self.iConst8) & 8191) as usize];
			self.fRec19[0] = ((fSlow1 * self.fRec19[1]) + (fSlow2 * self.fRec18[1]));
			self.fVec5[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec19[0]));
			self.fRec18[0] = self.fVec5[((self.IOTA - self.iConst9) & 8191) as usize];
			self.fRec21[0] = ((fSlow1 * self.fRec21[1]) + (fSlow2 * self.fRec20[1]));
			self.fVec6[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec21[0]));
			self.fRec20[0] = self.fVec6[((self.IOTA - self.iConst10) & 8191) as usize];
			self.fRec23[0] = ((fSlow1 * self.fRec23[1]) + (fSlow2 * self.fRec22[1]));
			self.fVec7[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec23[0]));
			self.fRec22[0] = self.fVec7[((self.IOTA - self.iConst11) & 8191) as usize];
			self.fRec25[0] = ((fSlow1 * self.fRec25[1]) + (fSlow2 * self.fRec24[1]));
			self.fVec8[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec25[0]));
			self.fRec24[0] = self.fVec8[((self.IOTA - self.iConst12) & 8191) as usize];
			self.fRec27[0] = ((fSlow1 * self.fRec27[1]) + (fSlow2 * self.fRec26[1]));
			self.fVec9[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec27[0]));
			self.fRec26[0] = self.fVec9[((self.IOTA - self.iConst13) & 8191) as usize];
			let mut fTemp5: f32 = ((((((((self.fRec8[0] + self.fRec14[0]) + self.fRec16[0]) + self.fRec18[0]) + self.fRec20[0]) + self.fRec22[0]) + self.fRec24[0]) + self.fRec26[0]) + (0.5 * self.fRec6[1]));
			self.fVec10[(self.IOTA & 2047) as usize] = fTemp5;
			self.fRec6[0] = self.fVec10[((self.IOTA - self.iConst15) & 2047) as usize];
			let mut fRec7: f32 = (0.0 - (0.5 * fTemp5));
			let mut fTemp6: f32 = (self.fRec6[1] + (fRec7 + (0.5 * self.fRec4[1])));
			self.fVec11[(self.IOTA & 2047) as usize] = fTemp6;
			self.fRec4[0] = self.fVec11[((self.IOTA - self.iConst17) & 2047) as usize];
			let mut fRec5: f32 = (0.0 - (0.5 * fTemp6));
			let mut fTemp7: f32 = (self.fRec4[1] + (fRec5 + (0.5 * self.fRec2[1])));
			self.fVec12[(self.IOTA & 2047) as usize] = fTemp7;
			self.fRec2[0] = self.fVec12[((self.IOTA - self.iConst19) & 2047) as usize];
			let mut fRec3: f32 = (0.0 - (0.5 * fTemp7));
			let mut fTemp8: f32 = (self.fRec2[1] + (fRec3 + (0.5 * self.fRec0[1])));
			self.fVec13[(self.IOTA & 1023) as usize] = fTemp8;
			self.fRec0[0] = self.fVec13[((self.IOTA - self.iConst21) & 1023) as usize];
			let mut fRec1: f32 = (0.0 - (0.5 * fTemp8));
			let mut fTemp9: f32 = (fSlow11 * fTemp3);
			outputs[0][i as usize] = (((fRec1 + self.fRec0[1]) + fTemp9) as f32);
			self.fRec37[0] = ((fSlow1 * self.fRec37[1]) + (fSlow2 * self.fRec36[1]));
			self.fVec14[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec37[0]));
			self.fRec36[0] = self.fVec14[((self.IOTA - iSlow13) & 8191) as usize];
			self.fRec39[0] = ((fSlow1 * self.fRec39[1]) + (fSlow2 * self.fRec38[1]));
			self.fVec15[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec39[0]));
			self.fRec38[0] = self.fVec15[((self.IOTA - iSlow14) & 8191) as usize];
			self.fRec41[0] = ((fSlow1 * self.fRec41[1]) + (fSlow2 * self.fRec40[1]));
			self.fVec16[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec41[0]));
			self.fRec40[0] = self.fVec16[((self.IOTA - iSlow15) & 8191) as usize];
			self.fRec43[0] = ((fSlow1 * self.fRec43[1]) + (fSlow2 * self.fRec42[1]));
			self.fVec17[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec43[0]));
			self.fRec42[0] = self.fVec17[((self.IOTA - iSlow16) & 8191) as usize];
			self.fRec45[0] = ((fSlow1 * self.fRec45[1]) + (fSlow2 * self.fRec44[1]));
			self.fVec18[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec45[0]));
			self.fRec44[0] = self.fVec18[((self.IOTA - iSlow17) & 8191) as usize];
			self.fRec47[0] = ((fSlow1 * self.fRec47[1]) + (fSlow2 * self.fRec46[1]));
			self.fVec19[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec47[0]));
			self.fRec46[0] = self.fVec19[((self.IOTA - iSlow18) & 8191) as usize];
			self.fRec49[0] = ((fSlow1 * self.fRec49[1]) + (fSlow2 * self.fRec48[1]));
			self.fVec20[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec49[0]));
			self.fRec48[0] = self.fVec20[((self.IOTA - iSlow19) & 8191) as usize];
			self.fRec51[0] = ((fSlow1 * self.fRec51[1]) + (fSlow2 * self.fRec50[1]));
			self.fVec21[(self.IOTA & 8191) as usize] = (fTemp4 + (fSlow0 * self.fRec51[0]));
			self.fRec50[0] = self.fVec21[((self.IOTA - iSlow20) & 8191) as usize];
			let mut fTemp10: f32 = ((((((((self.fRec36[0] + self.fRec38[0]) + self.fRec40[0]) + self.fRec42[0]) + self.fRec44[0]) + self.fRec46[0]) + self.fRec48[0]) + self.fRec50[0]) + (0.5 * self.fRec34[1]));
			self.fVec22[(self.IOTA & 2047) as usize] = fTemp10;
			self.fRec34[0] = self.fVec22[((self.IOTA - iSlow22) & 2047) as usize];
			let mut fRec35: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp11: f32 = (self.fRec34[1] + (fRec35 + (0.5 * self.fRec32[1])));
			self.fVec23[(self.IOTA & 2047) as usize] = fTemp11;
			self.fRec32[0] = self.fVec23[((self.IOTA - iSlow23) & 2047) as usize];
			let mut fRec33: f32 = (0.0 - (0.5 * fTemp11));
			let mut fTemp12: f32 = (self.fRec32[1] + (fRec33 + (0.5 * self.fRec30[1])));
			self.fVec24[(self.IOTA & 2047) as usize] = fTemp12;
			self.fRec30[0] = self.fVec24[((self.IOTA - iSlow24) & 2047) as usize];
			let mut fRec31: f32 = (0.0 - (0.5 * fTemp12));
			let mut fTemp13: f32 = (self.fRec30[1] + (fRec31 + (0.5 * self.fRec28[1])));
			self.fVec25[(self.IOTA & 2047) as usize] = fTemp13;
			self.fRec28[0] = self.fVec25[((self.IOTA - iSlow25) & 2047) as usize];
			let mut fRec29: f32 = (0.0 - (0.5 * fTemp13));
			outputs[1][i as usize] = ((self.fRec28[1] + (fRec29 + fTemp9)) as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec9[1] = self.fRec9[0];
			self.fVec1[1] = self.fVec1[0];
			self.iRec12[1] = self.iRec12[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec13[1] = self.fRec13[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec8[1] = self.fRec8[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec17[1] = self.fRec17[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[1] = self.fRec36[0];
			self.fRec39[1] = self.fRec39[0];
			self.fRec38[1] = self.fRec38[0];
			self.fRec41[1] = self.fRec41[0];
			self.fRec40[1] = self.fRec40[0];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[1] = self.fRec42[0];
			self.fRec45[1] = self.fRec45[0];
			self.fRec44[1] = self.fRec44[0];
			self.fRec47[1] = self.fRec47[0];
			self.fRec46[1] = self.fRec46[0];
			self.fRec49[1] = self.fRec49[0];
			self.fRec48[1] = self.fRec48[0];
			self.fRec51[1] = self.fRec51[0];
			self.fRec50[1] = self.fRec50[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec28[1] = self.fRec28[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

