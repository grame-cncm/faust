
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fRec0: [f32;2],
	iRec1: [i32;2],
	fRec3: [f32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fRec6: [f32;2],
	fRec4: [f32;2],
	fRec9: [f32;2],
	fRec7: [f32;2],
	fRec12: [f32;2],
	fRec10: [f32;2],
	fRec15: [f32;2],
	fRec13: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fRec0: [0.0;2],
			iRec1: [0;2],
			fRec3: [0.0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fRec6: [0.0;2],
			fRec4: [0.0;2],
			fRec9: [0.0;2],
			fRec7: [0.0;2],
			fRec12: [0.0;2],
			fRec10: [0.0;2],
			fRec15: [0.0;2],
			fRec13: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "wind");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m.declare("vaeffects.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.660000026;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec0[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iRec1[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec3[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec6[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec9[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec7[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec12[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec10[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec15[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec13[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = (3.14159274 / f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32))));
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("wind");
		ui_interface.addHorizontalSlider("force", &mut self.fHslider0, 0.66000000000000003, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00300000003 * (self.fHslider0 as f32));
		let mut i: i32 = 0;
		loop {
			self.fRec0[0] = (fSlow0 + (0.996999979 * self.fRec0[1]));
			let mut iTemp0: i32 = (1103515245 * (self.iRec1[1] + 12345));
			self.iRec1[0] = (1103515245 * (iTemp0 + 12345));
			let mut iRec2: i32 = iTemp0;
			let mut fTemp1: f32 = (4.65661287e-10 * (self.iRec1[0] as f32));
			self.fRec3[0] = (fSlow0 + (0.996999979 * self.fRec3[1]));
			let mut fTemp2: f32 = mydsp_faustpower2_f((1.41419947 * self.fRec3[0]));
			let mut fTemp3: f32 = (1.99997997 * self.fRec3[0]);
			let mut fTemp4: f32 = (fTemp2 + fTemp3);
			let mut fTemp5: f32 = (fTemp3 + 2.0);
			let mut fTemp6: f32 = f32::tan((self.fConst0 * f32::max((440.0 * f32::powf(2.0, (0.0833333358 * ((87.0 * self.fRec3[0]) + -48.0)))), 20.0)));
			let mut fTemp7: f32 = (1.0 / fTemp6);
			let mut fTemp8: f32 = ((fTemp4 + ((fTemp5 + fTemp7) / fTemp6)) + 1.0);
			let mut fTemp9: f32 = ((fTemp4 + (1.0 - ((fTemp5 - fTemp7) / fTemp6))) / fTemp8);
			let mut fTemp10: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp9));
			let mut fTemp11: f32 = (0.0 - fTemp10);
			let mut fTemp12: f32 = (1.0 - mydsp_faustpower2_f(fTemp10));
			let mut fTemp13: f32 = f32::sqrt(f32::max(0.0, fTemp12));
			let mut fTemp14: f32 = ((self.fRec4[1] * fTemp11) + (fTemp1 * fTemp13));
			let mut fTemp15: f32 = (1.0 / mydsp_faustpower2_f(fTemp6));
			let mut fTemp16: f32 = (fTemp4 + (1.0 - fTemp15));
			let mut fTemp17: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp16 / (fTemp8 * (fTemp9 + 1.0))))));
			let mut fTemp18: f32 = (0.0 - fTemp17);
			let mut fTemp19: f32 = (1.0 - mydsp_faustpower2_f(fTemp17));
			let mut fTemp20: f32 = f32::sqrt(f32::max(0.0, fTemp19));
			self.fRec6[0] = ((self.fRec6[1] * fTemp18) + (fTemp14 * fTemp20));
			self.fRec4[0] = ((fTemp14 * fTemp17) + (self.fRec6[1] * fTemp20));
			let mut fRec5: f32 = self.fRec6[0];
			let mut fTemp21: f32 = (1.0 - (fTemp16 / fTemp8));
			let mut fTemp22: f32 = f32::sqrt(fTemp12);
			let mut fTemp23: f32 = ((1.0 - fTemp9) - (2.0 * (fTemp17 * fTemp21)));
			let mut fTemp24: f32 = (fTemp22 * f32::sqrt(fTemp19));
			let mut fTemp25: f32 = ((((fTemp1 * fTemp10) + (self.fRec4[1] * fTemp13)) + (2.0 * ((self.fRec4[0] * fTemp21) / fTemp22))) + ((fRec5 * fTemp23) / fTemp24));
			let mut fTemp26: f32 = (2.0 - fTemp3);
			let mut fTemp27: f32 = (1.0 - fTemp3);
			let mut fTemp28: f32 = ((fTemp2 + ((fTemp7 + fTemp26) / fTemp6)) + fTemp27);
			let mut fTemp29: f32 = (((fTemp2 + ((fTemp7 - fTemp26) / fTemp6)) + fTemp27) / fTemp28);
			let mut fTemp30: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp29));
			let mut fTemp31: f32 = (0.0 - fTemp30);
			let mut fTemp32: f32 = (1.0 - mydsp_faustpower2_f(fTemp30));
			let mut fTemp33: f32 = f32::sqrt(f32::max(0.0, fTemp32));
			let mut fTemp34: f32 = ((self.fRec7[1] * fTemp31) + ((fTemp25 * fTemp33) / fTemp8));
			let mut fTemp35: f32 = (fTemp2 + (1.0 - (fTemp3 + fTemp15)));
			let mut fTemp36: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp35 / (fTemp28 * (fTemp29 + 1.0))))));
			let mut fTemp37: f32 = (0.0 - fTemp36);
			let mut fTemp38: f32 = (1.0 - mydsp_faustpower2_f(fTemp36));
			let mut fTemp39: f32 = f32::sqrt(f32::max(0.0, fTemp38));
			self.fRec9[0] = ((self.fRec9[1] * fTemp37) + (fTemp34 * fTemp39));
			self.fRec7[0] = ((fTemp34 * fTemp36) + (self.fRec9[1] * fTemp39));
			let mut fRec8: f32 = self.fRec9[0];
			let mut fTemp40: f32 = (1.0 - (fTemp35 / fTemp28));
			let mut fTemp41: f32 = f32::sqrt(fTemp32);
			let mut fTemp42: f32 = ((1.0 - fTemp29) - (2.0 * (fTemp36 * fTemp40)));
			let mut fTemp43: f32 = (fTemp41 * f32::sqrt(fTemp38));
			outputs[0][i as usize] = (((self.fRec0[0] * (((((fTemp25 * fTemp30) / fTemp8) + (self.fRec7[1] * fTemp33)) + (2.0 * ((self.fRec7[0] * fTemp40) / fTemp41))) + ((fRec8 * fTemp42) / fTemp43))) / fTemp28) as f32);
			let mut fTemp44: f32 = (4.65661287e-10 * (iRec2 as f32));
			let mut fTemp45: f32 = ((fTemp11 * self.fRec10[1]) + (fTemp13 * fTemp44));
			self.fRec12[0] = ((fTemp18 * self.fRec12[1]) + (fTemp20 * fTemp45));
			self.fRec10[0] = ((fTemp17 * fTemp45) + (fTemp20 * self.fRec12[1]));
			let mut fRec11: f32 = self.fRec12[0];
			let mut fTemp46: f32 = ((((fTemp10 * fTemp44) + (fTemp13 * self.fRec10[1])) + (2.0 * ((self.fRec10[0] * fTemp21) / fTemp22))) + ((fRec11 * fTemp23) / fTemp24));
			let mut fTemp47: f32 = ((fTemp31 * self.fRec13[1]) + ((fTemp33 * fTemp46) / fTemp8));
			self.fRec15[0] = ((fTemp37 * self.fRec15[1]) + (fTemp39 * fTemp47));
			self.fRec13[0] = ((fTemp36 * fTemp47) + (fTemp39 * self.fRec15[1]));
			let mut fRec14: f32 = self.fRec15[0];
			outputs[1][i as usize] = (((self.fRec0[0] * (((((fTemp30 * fTemp46) / fTemp8) + (fTemp33 * self.fRec13[1])) + (2.0 * ((self.fRec13[0] * fTemp40) / fTemp41))) + ((fRec14 * fTemp42) / fTemp43))) / fTemp28) as f32);
			self.fRec0[1] = self.fRec0[0];
			self.iRec1[1] = self.iRec1[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec13[1] = self.fRec13[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

