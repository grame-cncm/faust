
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iRec10: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider1: f32,
	fRec29: [f32;2],
	fHslider2: f32,
	fHslider3: f32,
	fButton0: f32,
	fHslider4: f32,
	fVec0: [f32;2],
	fRec30: [f32;2],
	fRec25: [f32;2],
	fRec31: [f32;2],
	fRec33: [f32;4],
	IOTA: i32,
	fRec34: [f32;2048],
	fVec1: [f32;2],
	fHslider5: f32,
	iRec37: [i32;2],
	fConst3: f32,
	fRec36: [f32;3],
	fConst4: f32,
	fVec2: [f32;2],
	fRec38: [f32;2],
	fConst5: f32,
	fConst6: f32,
	fVec3: [f32;2],
	fRec32: [f32;2048],
	fRec21: [f32;2],
	fRec17: [f32;2048],
	fRec19: [f32;2],
	fRec15: [f32;4],
	iRec6: [i32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iRec10: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fRec29: [0.0;2],
			fHslider2: 0.0,
			fHslider3: 0.0,
			fButton0: 0.0,
			fHslider4: 0.0,
			fVec0: [0.0;2],
			fRec30: [0.0;2],
			fRec25: [0.0;2],
			fRec31: [0.0;2],
			fRec33: [0.0;4],
			IOTA: 0,
			fRec34: [0.0;2048],
			fVec1: [0.0;2],
			fHslider5: 0.0,
			iRec37: [0;2],
			fConst3: 0.0,
			fRec36: [0.0;3],
			fConst4: 0.0,
			fVec2: [0.0;2],
			fRec38: [0.0;2],
			fConst5: 0.0,
			fConst6: 0.0,
			fVec3: [0.0;2],
			fRec32: [0.0;2048],
			fRec21: [0.0;2],
			fRec17: [0.0;2048],
			fRec19: [0.0;2],
			fRec15: [0.0;4],
			iRec6: [0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple acoustic guitar model with nylon strings.");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "NylonGuitarMidi");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.800000012;
		self.fHslider2 = 440.0;
		self.fHslider3 = 1.0;
		self.fButton0 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 0.800000012;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec10[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec29[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec30[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec25[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec31[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec33[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l7: i32 = 0;
		loop {
			self.fRec34[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2048) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fVec1[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.iRec37[l9 as usize] = 0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec36[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fVec2[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec38[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fVec3[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec32[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2048) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec21[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec17[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2048) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec19[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec15[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 4) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.iRec6[l19 as usize] = 0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec2[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2048) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec0[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00882352982 * self.fConst0);
		self.fConst2 = (0.00147058826 * self.fConst0);
		self.fConst3 = (15.707963 / self.fConst0);
		self.fConst4 = (0.00400000019 * self.fConst0);
		self.fConst5 = (0.00200000009 * self.fConst0);
		self.fConst6 = (500.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("nylonGuitar");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider2, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "hidden", "1");
		ui_interface.declare(&mut self.fHslider3, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider3, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider5, "2", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider5, 0.80000000000000004, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "3", "");
		ui_interface.declare(&mut self.fHslider4, "hidden", "1");
		ui_interface.declare(&mut self.fHslider4, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "4", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "midi", "ctrl 1");
		ui_interface.addHorizontalSlider("pluckPosition", &mut self.fHslider1, 0.80000000000000004, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.00100000005 * (self.fHslider1 as f32));
		let mut fSlow2: f32 = (self.fHslider2 as f32);
		let mut fSlow3: f32 = (340.0 / fSlow2);
		let mut fSlow4: f32 = (self.fHslider3 as f32);
		let mut fSlow5: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider4 as f32)));
		let mut iSlow6: i32 = ((fSlow5 == 0.0) as i32);
		let mut fSlow7: f32 = (self.fHslider5 as f32);
		let mut fSlow8: f32 = (self.fConst3 * fSlow2);
		let mut fSlow9: f32 = (0.00033333333 * fSlow2);
		let mut i: i32 = 0;
		loop {
			self.iRec10[0] = 0;
			let mut iRec11: i32 = self.iRec10[1];
			let mut fRec14: f32 = ((self.iRec6[1] as f32) - (0.997843683 * ((0.699999988 * self.fRec15[2]) + (0.150000006 * (self.fRec15[1] + self.fRec15[3])))));
			self.fRec29[0] = (fSlow1 + (0.999000013 * self.fRec29[1]));
			self.fVec0[0] = fSlow5;
			let mut iTemp0: i32 = (((fSlow5 == self.fVec0[1]) as i32) | iSlow6);
			self.fRec30[0] = ((fSlow4 * (1.0 - (0.999000013 * (iTemp0 as f32)))) + (0.999000013 * ((iTemp0 as f32) * self.fRec30[1])));
			let mut fTemp1: f32 = ((fSlow3 / self.fRec30[0]) + -0.109999999);
			let mut fTemp2: f32 = (self.fConst2 * ((1.0 - self.fRec29[0]) * fTemp1));
			let mut fTemp3: f32 = (fTemp2 + -1.49999499);
			let mut iTemp4: i32 = (fTemp3 as i32);
			let mut iTemp5: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 as i32)) as f32)) as i32);
			let mut fTemp6: f32 = f32::floor(fTemp3);
			let mut fTemp7: f32 = (fTemp2 + (-1.0 - fTemp6));
			let mut fTemp8: f32 = (0.0 - fTemp7);
			let mut fTemp9: f32 = (fTemp2 + (-2.0 - fTemp6));
			let mut fTemp10: f32 = (0.0 - (0.5 * fTemp9));
			let mut fTemp11: f32 = (fTemp2 + (-3.0 - fTemp6));
			let mut fTemp12: f32 = (0.0 - (0.333333343 * fTemp11));
			let mut fTemp13: f32 = (fTemp2 + (-4.0 - fTemp6));
			let mut fTemp14: f32 = (0.0 - (0.25 * fTemp13));
			let mut fTemp15: f32 = (fTemp2 - fTemp6);
			let mut iTemp16: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 2) as i32)) as f32)) as i32);
			let mut fTemp17: f32 = (0.0 - fTemp11);
			let mut fTemp18: f32 = (0.0 - (0.5 * fTemp13));
			let mut iTemp19: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 1) as i32)) as f32)) as i32);
			let mut fTemp20: f32 = (0.0 - fTemp9);
			let mut fTemp21: f32 = (0.0 - (0.5 * fTemp11));
			let mut fTemp22: f32 = (0.0 - (0.333333343 * fTemp13));
			let mut fTemp23: f32 = (fTemp7 * fTemp9);
			let mut iTemp24: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 3) as i32)) as f32)) as i32);
			let mut fTemp25: f32 = (0.0 - fTemp13);
			let mut fTemp26: f32 = (fTemp23 * fTemp11);
			let mut iTemp27: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 4) as i32)) as f32)) as i32);
			self.fRec25[0] = (((((self.fRec2[((self.IOTA - (iTemp5 + 1)) & 2047) as usize] * fTemp8) * fTemp10) * fTemp12) * fTemp14) + (fTemp15 * ((((0.5 * (((fTemp7 * self.fRec2[((self.IOTA - (iTemp16 + 1)) & 2047) as usize]) * fTemp17) * fTemp18)) + (((self.fRec2[((self.IOTA - (iTemp19 + 1)) & 2047) as usize] * fTemp20) * fTemp21) * fTemp22)) + (0.166666672 * ((fTemp23 * self.fRec2[((self.IOTA - (iTemp24 + 1)) & 2047) as usize]) * fTemp25))) + (0.0416666679 * (fTemp26 * self.fRec2[((self.IOTA - (iTemp27 + 1)) & 2047) as usize])))));
			self.fRec31[0] = ((0.400000006 * self.fRec31[1]) + (0.600000024 * self.fRec25[1]));
			let mut fRec26: f32 = self.fRec31[0];
			self.fRec33[0] = self.fRec0[1];
			self.fRec34[(self.IOTA & 2047) as usize] = (0.0 - (0.997843683 * ((0.699999988 * self.fRec33[2]) + (0.150000006 * (self.fRec33[1] + self.fRec33[3])))));
			let mut iRec35: i32 = 0;
			let mut fTemp28: f32 = (self.fConst2 * (self.fRec29[0] * fTemp1));
			let mut fTemp29: f32 = (fTemp28 + -1.49999499);
			let mut iTemp30: i32 = (fTemp29 as i32);
			let mut iTemp31: i32 = (f32::min(self.fConst1, (std::cmp::max(0, (iTemp30 as i32)) as f32)) as i32);
			let mut fTemp32: f32 = f32::floor(fTemp29);
			let mut fTemp33: f32 = (fTemp28 + (-1.0 - fTemp32));
			let mut fTemp34: f32 = (0.0 - fTemp33);
			let mut fTemp35: f32 = (fTemp28 + (-2.0 - fTemp32));
			let mut fTemp36: f32 = (0.0 - (0.5 * fTemp35));
			let mut fTemp37: f32 = (fTemp28 + (-3.0 - fTemp32));
			let mut fTemp38: f32 = (0.0 - (0.333333343 * fTemp37));
			let mut fTemp39: f32 = (fTemp28 + (-4.0 - fTemp32));
			let mut fTemp40: f32 = (0.0 - (0.25 * fTemp39));
			let mut fTemp41: f32 = (fTemp28 - fTemp32);
			let mut iTemp42: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp30 + 2) as i32)) as f32)) as i32);
			let mut fTemp43: f32 = (0.0 - fTemp37);
			let mut fTemp44: f32 = (0.0 - (0.5 * fTemp39));
			let mut iTemp45: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp30 + 1) as i32)) as f32)) as i32);
			let mut fTemp46: f32 = (0.0 - fTemp35);
			let mut fTemp47: f32 = (0.0 - (0.5 * fTemp37));
			let mut fTemp48: f32 = (0.0 - (0.333333343 * fTemp39));
			let mut fTemp49: f32 = (fTemp33 * fTemp35);
			let mut iTemp50: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp30 + 3) as i32)) as f32)) as i32);
			let mut fTemp51: f32 = (0.0 - fTemp39);
			let mut fTemp52: f32 = (fTemp49 * fTemp37);
			let mut iTemp53: i32 = (f32::min(self.fConst1, (std::cmp::max(0, ((iTemp30 + 4) as i32)) as f32)) as i32);
			self.fVec1[0] = (((((self.fRec34[((self.IOTA - (iTemp31 + 2)) & 2047) as usize] * fTemp34) * fTemp36) * fTemp38) * fTemp40) + (fTemp41 * ((((0.5 * (((fTemp33 * self.fRec34[((self.IOTA - (iTemp42 + 2)) & 2047) as usize]) * fTemp43) * fTemp44)) + (((self.fRec34[((self.IOTA - (iTemp45 + 2)) & 2047) as usize] * fTemp46) * fTemp47) * fTemp48)) + (0.166666672 * ((fTemp49 * self.fRec34[((self.IOTA - (iTemp50 + 2)) & 2047) as usize]) * fTemp51))) + (0.0416666679 * (fTemp52 * self.fRec34[((self.IOTA - (iTemp53 + 2)) & 2047) as usize])))));
			self.iRec37[0] = ((1103515245 * self.iRec37[1]) + 12345);
			let mut fTemp54: f32 = f32::tan((fSlow8 * self.fRec30[0]));
			let mut fTemp55: f32 = (1.0 / fTemp54);
			let mut fTemp56: f32 = (((fTemp55 + 1.41421354) / fTemp54) + 1.0);
			self.fRec36[0] = ((4.65661287e-10 * (self.iRec37[0] as f32)) - (((self.fRec36[2] * (((fTemp55 + -1.41421354) / fTemp54) + 1.0)) + (2.0 * (self.fRec36[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp54)))))) / fTemp56));
			let mut fTemp57: f32 = mydsp_faustpower2_f((1.0 - (fSlow9 * self.fRec30[0])));
			self.fVec2[0] = fTemp57;
			let mut fTemp58: f32 = (self.fConst4 * fTemp57);
			self.fRec38[0] = if ((((((fSlow5 - self.fVec0[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(fTemp58, ((self.fRec38[1] + (self.fConst4 * (fTemp57 - self.fVec2[1]))) + 1.0)) };
			let mut fTemp59: f32 = (self.fConst5 * fTemp57);
			let mut iTemp60: i32 = ((self.fRec38[0] < fTemp59) as i32);
			let mut fTemp61: f32 = (fSlow7 * (((self.fRec36[2] + (self.fRec36[0] + (2.0 * self.fRec36[1]))) * if (iTemp60 as i32 == 1) { if (((self.fRec38[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp60 as i32 == 1) { (self.fConst6 * (self.fRec38[0] / fTemp57)) } else { 1.0 } } } else { if (((self.fRec38[0] < fTemp58) as i32) as i32 == 1) { ((self.fConst6 * ((0.0 - (self.fRec38[0] - fTemp59)) / fTemp57)) + 1.0) } else { 0.0 } }) / fTemp56));
			self.fVec3[0] = (self.fVec1[1] + fTemp61);
			self.fRec32[(self.IOTA & 2047) as usize] = ((0.400000006 * self.fRec32[((self.IOTA - 1) & 2047) as usize]) + (0.600000024 * self.fVec3[1]));
			let mut fRec27: f32 = (((((fTemp8 * fTemp10) * fTemp12) * fTemp14) * self.fRec32[((self.IOTA - iTemp5) & 2047) as usize]) + (fTemp15 * ((0.0416666679 * (fTemp26 * self.fRec32[((self.IOTA - iTemp27) & 2047) as usize])) + (((((fTemp20 * fTemp21) * fTemp22) * self.fRec32[((self.IOTA - iTemp19) & 2047) as usize]) + (0.5 * (((fTemp7 * fTemp17) * fTemp18) * self.fRec32[((self.IOTA - iTemp16) & 2047) as usize]))) + (0.166666672 * ((fTemp23 * fTemp25) * self.fRec32[((self.IOTA - iTemp24) & 2047) as usize]))))));
			let mut iRec28: i32 = iRec35;
			self.fRec21[0] = fRec26;
			let mut fRec22: f32 = (fTemp61 + self.fRec21[1]);
			let mut fRec23: f32 = fRec27;
			let mut iRec24: i32 = iRec28;
			self.fRec17[(self.IOTA & 2047) as usize] = fRec22;
			let mut fRec18: f32 = (((((fTemp34 * fTemp36) * fTemp38) * fTemp40) * self.fRec17[((self.IOTA - (iTemp31 + 1)) & 2047) as usize]) + (fTemp41 * (((0.166666672 * ((fTemp49 * fTemp51) * self.fRec17[((self.IOTA - (iTemp50 + 1)) & 2047) as usize])) + ((((fTemp46 * fTemp47) * fTemp48) * self.fRec17[((self.IOTA - (iTemp45 + 1)) & 2047) as usize]) + (0.5 * (((fTemp33 * fTemp43) * fTemp44) * self.fRec17[((self.IOTA - (iTemp42 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp52 * self.fRec17[((self.IOTA - (iTemp53 + 1)) & 2047) as usize])))));
			self.fRec19[0] = fRec23;
			let mut iRec20: i32 = iRec24;
			self.fRec15[0] = self.fRec19[1];
			let mut iRec16: i32 = iRec20;
			let mut fRec12: f32 = self.fRec15[1];
			let mut fRec13: f32 = ((iRec16 as f32) + self.fRec15[1]);
			self.iRec6[0] = iRec11;
			let mut fRec7: f32 = fRec14;
			let mut fRec8: f32 = fRec12;
			let mut fRec9: f32 = fRec13;
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = fRec18;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			let mut fTemp62: f32 = (fSlow0 * fRec1);
			outputs[0][i as usize] = (fTemp62 as f32);
			outputs[1][i as usize] = (fTemp62 as f32);
			self.iRec10[1] = self.iRec10[0];
			self.fRec29[1] = self.fRec29[0];
			self.fVec0[1] = self.fVec0[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec25[1] = self.fRec25[0];
			self.fRec31[1] = self.fRec31[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec33[j0 as usize] = self.fRec33[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec1[1] = self.fVec1[0];
			self.iRec37[1] = self.iRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec38[1] = self.fRec38[0];
			self.fVec3[1] = self.fVec3[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec19[1] = self.fRec19[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec15[j1 as usize] = self.fRec15[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.iRec6[1] = self.iRec6[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

