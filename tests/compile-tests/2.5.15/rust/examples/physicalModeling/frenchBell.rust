
static fmydspSIG0Wave0: [f32;350] = [0.972890019,0.542393029,0.495831996,0.897966027,0.552366972,0.557895005,0.61421299,0.353693992,0.436039001,0.441024005,0.674912989,0.566753983,0.755007982,0.699029982,0.164398,0.910040021,0.628373027,0.201718003,0.429517001,0.503714979,0.871173978,0.106885999,0.76117301,0.673601985,0.291936994,0.588590026,0.31527999,0.41308099,0.274464011,0.494062006,0.696120977,0.612010002,0.382757008,0.995113015,0.228806004,0.198449001,0.595847011,0.306263,0.252397001,0.0883567035,0.236085996,1.0,0.245278001,0.379388005,0.198824003,0.548892021,0.492763996,0.42087099,0.794637024,0.605633974,1.0,0.604158998,0.399841011,0.799346983,0.507187009,0.509809971,0.477382988,0.310225993,0.426975995,0.437622994,0.735711992,0.630728006,0.625784993,0.651167989,0.277738005,0.850857973,0.578078985,0.645353973,0.383700013,0.370597988,0.78254199,0.181325004,0.614391029,0.740683973,0.342440993,0.586185992,0.286909014,0.405196995,0.259214997,0.566982985,0.748219013,0.655897975,0.368259996,0.940814018,0.336156994,0.413702011,0.561556995,0.402175993,0.117697999,0.329369009,0.254570991,0.870706022,0.260980994,0.274122,0.206247002,0.645299971,0.400757998,0.36362201,0.636834025,0.584565997,0.975602984,0.616936982,0.295401007,0.650447011,0.464221001,0.465056986,0.312467009,0.238358006,0.383695006,0.399673998,0.753911972,0.662011981,0.504267991,0.599247992,0.378665,0.725363016,0.493214011,1.0,0.332836002,0.265888989,0.674072981,0.320401013,0.440017998,0.769782007,0.316419005,0.529968023,0.380508989,0.578675985,0.249013007,0.591383994,0.761717021,0.687057018,0.324436992,0.818863988,0.505369008,0.672484994,0.461782992,0.426198006,0.0678874999,0.43532899,0.347954988,0.708393991,0.293321997,0.328985989,0.258253992,0.893512011,0.320131004,0.433553994,0.459302008,0.542213023,0.817241013,0.516229987,0.205302,0.467354,0.388682991,0.388215989,0.171261996,0.150865003,0.291720003,0.311414003,0.658876002,0.570647001,0.38361901,0.502454996,0.364113986,0.532312989,0.352988988,1.0,0.261983991,0.219591007,0.544031024,0.337199003,0.279172987,0.668303013,0.208439007,0.399230003,0.418673992,0.648617983,0.234133005,0.504728973,0.645346999,0.572851002,0.232828006,0.614292026,0.48527199,0.666263998,0.316570014,0.320354998,0.191421002,0.340131015,0.342069,0.538371027,0.281130999,0.393115014,0.251394004,0.890725017,0.310644001,0.503700018,0.299089998,0.442478001,0.733128011,0.455217004,0.199322,0.315699011,0.375856012,0.376489997,0.0291450005,0.0200283006,0.279578,0.316799998,0.655956984,0.546842992,0.349665999,0.470248997,0.353765011,0.286794007,0.180185005,1.0,0.210831001,0.280133009,0.535853028,0.376488,0.153669998,0.634745002,0.0510449,0.485574991,0.593110979,0.917883992,0.380477011,0.422924995,0.599372983,0.311421007,0.135654002,0.359954,0.295747995,0.474438995,0.353338987,0.116742998,0.45431301,0.112857997,0.359310001,0.483897001,0.301607996,0.577341974,0.262663007,0.79498601,0.549579978,0.808085978,0.152511001,0.439590991,0.535941005,0.308017999,0.419836998,0.579191029,0.250427991,0.252119988,0.102860004,0.288331985,0.599678993,0.665108025,0.636285007,0.495234013,0.251612991,0.208526999,0.0939071998,0.458415002,0.318951994,0.235349998,0.215188995,0.313412011,0.0472786985,0.0386893004,0.0863358974,0.222345993,0.361510992,0.997036994,0.238508999,0.382140011,1.0,0.203554004,0.472086996,0.509015024,0.206370994,0.441013008,0.794008017,0.971623003,0.796383977,0.55043,0.687780023,0.554297984,0.0436545014,0.0595576987,0.214684993,0.581470013,0.277319998,0.36846599,0.121381998,0.152739003,0.0782243982,0.190496996,0.31626901,0.180455998,0.405196011,0.518715978,0.159364998,0.165808007,0.194371998,0.614763975,0.553415,0.644793987,0.441780001,0.441489995,0.221588001,1.0,0.579370975,0.606338978,0.529166996,0.0214475002,0.41704601,0.663151979,0.894841015,0.475751996,0.168289006,0.468589991,0.304603994,0.666369021,0.308337003,0.295091003,0.768944979,0.350910991,0.490680009,0.516583979,0.40011701,0.820686996,0.545485973,0.709357023,0.509759009,0.472005993,0.152455002,0.981265008,0.459134012,0.698665977,0.247153997,0.623252988,0.255508006,0.830815017,0.0887089968,0.126082003,0.0770623013,0.263327986];


pub struct mydspSIG0 {
	
	fmydspSIG0Wave0_idx: i32,
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		self.fmydspSIG0Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG0Wave0[self.fmydspSIG0Wave0_idx as usize];
			self.fmydspSIG0Wave0_idx = ((1 + self.fmydspSIG0Wave0_idx) % 350);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		fmydspSIG0Wave0_idx: 0,
	}
}
static ftbl0mydspSIG0: [f32;350][0.0;350],;
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fEntry0: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	iRec3: [i32;2],
	fConst6: f32,
	fConst7: f32,
	fRec2: [f32;3],
	fConst8: f32,
	fRec1: [f32;3],
	fButton0: f32,
	fVec0: [f32;2],
	fConst9: f32,
	fHslider2: f32,
	fVec1: [f32;2],
	fRec4: [f32;2],
	fConst10: f32,
	fConst11: f32,
	fConst12: f32,
	fConst13: f32,
	fConst14: f32,
	fRec0: [f32;3],
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fRec5: [f32;3],
	fConst18: f32,
	fConst19: f32,
	fConst20: f32,
	fRec6: [f32;3],
	fConst21: f32,
	fConst22: f32,
	fConst23: f32,
	fRec7: [f32;3],
	fConst24: f32,
	fConst25: f32,
	fConst26: f32,
	fRec8: [f32;3],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fRec9: [f32;3],
	fConst30: f32,
	fConst31: f32,
	fConst32: f32,
	fRec10: [f32;3],
	fConst33: f32,
	fConst34: f32,
	fConst35: f32,
	fRec11: [f32;3],
	fConst36: f32,
	fConst37: f32,
	fConst38: f32,
	fRec12: [f32;3],
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fRec13: [f32;3],
	fConst42: f32,
	fConst43: f32,
	fConst44: f32,
	fRec14: [f32;3],
	fConst45: f32,
	fConst46: f32,
	fConst47: f32,
	fRec15: [f32;3],
	fConst48: f32,
	fConst49: f32,
	fConst50: f32,
	fRec16: [f32;3],
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fRec17: [f32;3],
	fConst54: f32,
	fConst55: f32,
	fConst56: f32,
	fRec18: [f32;3],
	fConst57: f32,
	fConst58: f32,
	fConst59: f32,
	fRec19: [f32;3],
	fConst60: f32,
	fConst61: f32,
	fConst62: f32,
	fRec20: [f32;3],
	fConst63: f32,
	fConst64: f32,
	fConst65: f32,
	fRec21: [f32;3],
	fConst66: f32,
	fConst67: f32,
	fConst68: f32,
	fRec22: [f32;3],
	fConst69: f32,
	fConst70: f32,
	fConst71: f32,
	fRec23: [f32;3],
	fConst72: f32,
	fConst73: f32,
	fConst74: f32,
	fRec24: [f32;3],
	fConst75: f32,
	fConst76: f32,
	fConst77: f32,
	fRec25: [f32;3],
	fConst78: f32,
	fConst79: f32,
	fConst80: f32,
	fRec26: [f32;3],
	fConst81: f32,
	fConst82: f32,
	fConst83: f32,
	fRec27: [f32;3],
	fConst84: f32,
	fConst85: f32,
	fConst86: f32,
	fRec28: [f32;3],
	fConst87: f32,
	fConst88: f32,
	fConst89: f32,
	fRec29: [f32;3],
	fConst90: f32,
	fConst91: f32,
	fConst92: f32,
	fRec30: [f32;3],
	fConst93: f32,
	fConst94: f32,
	fConst95: f32,
	fRec31: [f32;3],
	fConst96: f32,
	fConst97: f32,
	fConst98: f32,
	fRec32: [f32;3],
	fConst99: f32,
	fConst100: f32,
	fConst101: f32,
	fRec33: [f32;3],
	fConst102: f32,
	fConst103: f32,
	fConst104: f32,
	fRec34: [f32;3],
	fConst105: f32,
	fConst106: f32,
	fConst107: f32,
	fRec35: [f32;3],
	fConst108: f32,
	fConst109: f32,
	fConst110: f32,
	fRec36: [f32;3],
	fConst111: f32,
	fConst112: f32,
	fConst113: f32,
	fRec37: [f32;3],
	fConst114: f32,
	fConst115: f32,
	fConst116: f32,
	fRec38: [f32;3],
	fConst117: f32,
	fConst118: f32,
	fConst119: f32,
	fRec39: [f32;3],
	fConst120: f32,
	fConst121: f32,
	fConst122: f32,
	fRec40: [f32;3],
	fConst123: f32,
	fConst124: f32,
	fConst125: f32,
	fRec41: [f32;3],
	fConst126: f32,
	fConst127: f32,
	fConst128: f32,
	fRec42: [f32;3],
	fConst129: f32,
	fConst130: f32,
	fConst131: f32,
	fRec43: [f32;3],
	fConst132: f32,
	fConst133: f32,
	fConst134: f32,
	fRec44: [f32;3],
	fConst135: f32,
	fConst136: f32,
	fConst137: f32,
	fRec45: [f32;3],
	fConst138: f32,
	fConst139: f32,
	fConst140: f32,
	fRec46: [f32;3],
	fConst141: f32,
	fConst142: f32,
	fConst143: f32,
	fRec47: [f32;3],
	fConst144: f32,
	fConst145: f32,
	fConst146: f32,
	fRec48: [f32;3],
	fConst147: f32,
	fConst148: f32,
	fConst149: f32,
	fRec49: [f32;3],
	fConst150: f32,
	fConst151: f32,
	fConst152: f32,
	fRec50: [f32;3],
	fConst153: f32,
	fConst154: f32,
	fConst155: f32,
	fRec51: [f32;3],
	fConst156: f32,
	fConst157: f32,
	fConst158: f32,
	fRec52: [f32;3],
	fConst159: f32,
	fConst160: f32,
	fConst161: f32,
	fRec53: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fEntry0: 0.0,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			iRec3: [0;2],
			fConst6: 0.0,
			fConst7: 0.0,
			fRec2: [0.0;3],
			fConst8: 0.0,
			fRec1: [0.0;3],
			fButton0: 0.0,
			fVec0: [0.0;2],
			fConst9: 0.0,
			fHslider2: 0.0,
			fVec1: [0.0;2],
			fRec4: [0.0;2],
			fConst10: 0.0,
			fConst11: 0.0,
			fConst12: 0.0,
			fConst13: 0.0,
			fConst14: 0.0,
			fRec0: [0.0;3],
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fRec5: [0.0;3],
			fConst18: 0.0,
			fConst19: 0.0,
			fConst20: 0.0,
			fRec6: [0.0;3],
			fConst21: 0.0,
			fConst22: 0.0,
			fConst23: 0.0,
			fRec7: [0.0;3],
			fConst24: 0.0,
			fConst25: 0.0,
			fConst26: 0.0,
			fRec8: [0.0;3],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fRec9: [0.0;3],
			fConst30: 0.0,
			fConst31: 0.0,
			fConst32: 0.0,
			fRec10: [0.0;3],
			fConst33: 0.0,
			fConst34: 0.0,
			fConst35: 0.0,
			fRec11: [0.0;3],
			fConst36: 0.0,
			fConst37: 0.0,
			fConst38: 0.0,
			fRec12: [0.0;3],
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fRec13: [0.0;3],
			fConst42: 0.0,
			fConst43: 0.0,
			fConst44: 0.0,
			fRec14: [0.0;3],
			fConst45: 0.0,
			fConst46: 0.0,
			fConst47: 0.0,
			fRec15: [0.0;3],
			fConst48: 0.0,
			fConst49: 0.0,
			fConst50: 0.0,
			fRec16: [0.0;3],
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fRec17: [0.0;3],
			fConst54: 0.0,
			fConst55: 0.0,
			fConst56: 0.0,
			fRec18: [0.0;3],
			fConst57: 0.0,
			fConst58: 0.0,
			fConst59: 0.0,
			fRec19: [0.0;3],
			fConst60: 0.0,
			fConst61: 0.0,
			fConst62: 0.0,
			fRec20: [0.0;3],
			fConst63: 0.0,
			fConst64: 0.0,
			fConst65: 0.0,
			fRec21: [0.0;3],
			fConst66: 0.0,
			fConst67: 0.0,
			fConst68: 0.0,
			fRec22: [0.0;3],
			fConst69: 0.0,
			fConst70: 0.0,
			fConst71: 0.0,
			fRec23: [0.0;3],
			fConst72: 0.0,
			fConst73: 0.0,
			fConst74: 0.0,
			fRec24: [0.0;3],
			fConst75: 0.0,
			fConst76: 0.0,
			fConst77: 0.0,
			fRec25: [0.0;3],
			fConst78: 0.0,
			fConst79: 0.0,
			fConst80: 0.0,
			fRec26: [0.0;3],
			fConst81: 0.0,
			fConst82: 0.0,
			fConst83: 0.0,
			fRec27: [0.0;3],
			fConst84: 0.0,
			fConst85: 0.0,
			fConst86: 0.0,
			fRec28: [0.0;3],
			fConst87: 0.0,
			fConst88: 0.0,
			fConst89: 0.0,
			fRec29: [0.0;3],
			fConst90: 0.0,
			fConst91: 0.0,
			fConst92: 0.0,
			fRec30: [0.0;3],
			fConst93: 0.0,
			fConst94: 0.0,
			fConst95: 0.0,
			fRec31: [0.0;3],
			fConst96: 0.0,
			fConst97: 0.0,
			fConst98: 0.0,
			fRec32: [0.0;3],
			fConst99: 0.0,
			fConst100: 0.0,
			fConst101: 0.0,
			fRec33: [0.0;3],
			fConst102: 0.0,
			fConst103: 0.0,
			fConst104: 0.0,
			fRec34: [0.0;3],
			fConst105: 0.0,
			fConst106: 0.0,
			fConst107: 0.0,
			fRec35: [0.0;3],
			fConst108: 0.0,
			fConst109: 0.0,
			fConst110: 0.0,
			fRec36: [0.0;3],
			fConst111: 0.0,
			fConst112: 0.0,
			fConst113: 0.0,
			fRec37: [0.0;3],
			fConst114: 0.0,
			fConst115: 0.0,
			fConst116: 0.0,
			fRec38: [0.0;3],
			fConst117: 0.0,
			fConst118: 0.0,
			fConst119: 0.0,
			fRec39: [0.0;3],
			fConst120: 0.0,
			fConst121: 0.0,
			fConst122: 0.0,
			fRec40: [0.0;3],
			fConst123: 0.0,
			fConst124: 0.0,
			fConst125: 0.0,
			fRec41: [0.0;3],
			fConst126: 0.0,
			fConst127: 0.0,
			fConst128: 0.0,
			fRec42: [0.0;3],
			fConst129: 0.0,
			fConst130: 0.0,
			fConst131: 0.0,
			fRec43: [0.0;3],
			fConst132: 0.0,
			fConst133: 0.0,
			fConst134: 0.0,
			fRec44: [0.0;3],
			fConst135: 0.0,
			fConst136: 0.0,
			fConst137: 0.0,
			fRec45: [0.0;3],
			fConst138: 0.0,
			fConst139: 0.0,
			fConst140: 0.0,
			fRec46: [0.0;3],
			fConst141: 0.0,
			fConst142: 0.0,
			fConst143: 0.0,
			fRec47: [0.0;3],
			fConst144: 0.0,
			fConst145: 0.0,
			fConst146: 0.0,
			fRec48: [0.0;3],
			fConst147: 0.0,
			fConst148: 0.0,
			fConst149: 0.0,
			fRec49: [0.0;3],
			fConst150: 0.0,
			fConst151: 0.0,
			fConst152: 0.0,
			fRec50: [0.0;3],
			fConst153: 0.0,
			fConst154: 0.0,
			fConst155: 0.0,
			fRec51: [0.0;3],
			fConst156: 0.0,
			fConst157: 0.0,
			fConst158: 0.0,
			fRec52: [0.0;3],
			fConst159: 0.0,
			fConst160: 0.0,
			fConst161: 0.0,
			fRec53: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("description", "French church bell physical model.");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "FrenchChurchBell");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(350, &mut ftbl0mydspSIG0);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fEntry0 = 0.0;
		self.fHslider0 = 1.0;
		self.fHslider1 = 6500.0;
		self.fButton0 = 0.0;
		self.fHslider2 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec3[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 3) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec4[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec6[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec8[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec9[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec10[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec12[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec13[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec14[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec15[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 3) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec16[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec17[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec18[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec19[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec20[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 3) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec21[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec22[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec23[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec24[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec25[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec26[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 3) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec27[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 3) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec28[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 3) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec29[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec30[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 3) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec31[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 3) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec32[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 3) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec33[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec34[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 3) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec35[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 3) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec36[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 3) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec37[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec38[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec39[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 3) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec40[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 3) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec41[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 3) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec42[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec43[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 3) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec44[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 3) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec45[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec46[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec47[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 3) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec48[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 3) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec49[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec50[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 3) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec51[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 3) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec52[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 3) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec53[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (3.14159274 / self.fConst0);
		self.fConst2 = f32::tan((31.415926 / self.fConst0));
		self.fConst3 = (1.0 / self.fConst2);
		self.fConst4 = (1.0 / (((self.fConst3 + 1.41421354) / self.fConst2) + 1.0));
		self.fConst5 = (1.0 / mydsp_faustpower2_f(self.fConst2));
		self.fConst6 = (((self.fConst3 + -1.41421354) / self.fConst2) + 1.0);
		self.fConst7 = (2.0 * (1.0 - self.fConst5));
		self.fConst8 = (2.0 * (0.0 - self.fConst5));
		self.fConst9 = (0.00400000019 * self.fConst0);
		self.fConst10 = (0.00200000009 * self.fConst0);
		self.fConst11 = (500.0 / self.fConst0);
		self.fConst12 = f32::powf(0.00100000005, (1.0 / (0.00617330708 * self.fConst0)));
		self.fConst13 = ((0.0 - (2.0 * self.fConst12)) * f32::cos((15107.542 / self.fConst0)));
		self.fConst14 = mydsp_faustpower2_f(self.fConst12);
		self.fConst15 = f32::powf(0.00100000005, (1.0 / (0.0056314161 * self.fConst0)));
		self.fConst16 = ((0.0 - (2.0 * self.fConst15)) * f32::cos((15136.1309 / self.fConst0)));
		self.fConst17 = mydsp_faustpower2_f(self.fConst15);
		self.fConst18 = f32::powf(0.00100000005, (1.0 / (17.0404034 * self.fConst0)));
		self.fConst19 = ((0.0 - (2.0 * self.fConst18)) * f32::cos((2758.80225 / self.fConst0)));
		self.fConst20 = mydsp_faustpower2_f(self.fConst18);
		self.fConst21 = f32::powf(0.00100000005, (1.0 / (17.0107555 * self.fConst0)));
		self.fConst22 = ((0.0 - (2.0 * self.fConst21)) * f32::cos((2766.51782 / self.fConst0)));
		self.fConst23 = mydsp_faustpower2_f(self.fConst21);
		self.fConst24 = f32::powf(0.00100000005, (1.0 / (13.3085108 * self.fConst0)));
		self.fConst25 = ((0.0 - (2.0 * self.fConst24)) * f32::cos((3810.4502 / self.fConst0)));
		self.fConst26 = mydsp_faustpower2_f(self.fConst24);
		self.fConst27 = f32::powf(0.00100000005, (1.0 / (13.1997375 * self.fConst0)));
		self.fConst28 = ((0.0 - (2.0 * self.fConst27)) * f32::cos((3843.90186 / self.fConst0)));
		self.fConst29 = mydsp_faustpower2_f(self.fConst27);
		self.fConst30 = f32::powf(0.00100000005, (1.0 / (11.3049049 * self.fConst0)));
		self.fConst31 = ((0.0 - (2.0 * self.fConst30)) * f32::cos((4458.65527 / self.fConst0)));
		self.fConst32 = mydsp_faustpower2_f(self.fConst30);
		self.fConst33 = f32::powf(0.00100000005, (1.0 / (11.300128 * self.fConst0)));
		self.fConst34 = ((0.0 - (2.0 * self.fConst33)) * f32::cos((4460.28857 / self.fConst0)));
		self.fConst35 = mydsp_faustpower2_f(self.fConst33);
		self.fConst36 = f32::powf(0.00100000005, (1.0 / (8.80774784 * self.fConst0)));
		self.fConst37 = ((0.0 - (2.0 * self.fConst36)) * f32::cos((5384.47607 / self.fConst0)));
		self.fConst38 = mydsp_faustpower2_f(self.fConst36);
		self.fConst39 = f32::powf(0.00100000005, (1.0 / (8.16906738 * self.fConst0)));
		self.fConst40 = ((0.0 - (2.0 * self.fConst39)) * f32::cos((5648.90381 / self.fConst0)));
		self.fConst41 = mydsp_faustpower2_f(self.fConst39);
		self.fConst42 = f32::powf(0.00100000005, (1.0 / (5.95891714 * self.fConst0)));
		self.fConst43 = ((0.0 - (2.0 * self.fConst42)) * f32::cos((6687.63379 / self.fConst0)));
		self.fConst44 = mydsp_faustpower2_f(self.fConst42);
		self.fConst45 = f32::powf(0.00100000005, (1.0 / (5.95436192 * self.fConst0)));
		self.fConst46 = ((0.0 - (2.0 * self.fConst45)) * f32::cos((6690.02148 / self.fConst0)));
		self.fConst47 = mydsp_faustpower2_f(self.fConst45);
		self.fConst48 = f32::powf(0.00100000005, (1.0 / (5.85568237 * self.fConst0)));
		self.fConst49 = ((0.0 - (2.0 * self.fConst48)) * f32::cos((6742.04639 / self.fConst0)));
		self.fConst50 = mydsp_faustpower2_f(self.fConst48);
		self.fConst51 = f32::powf(0.00100000005, (1.0 / (5.83910608 * self.fConst0)));
		self.fConst52 = ((0.0 - (2.0 * self.fConst51)) * f32::cos((6750.84277 / self.fConst0)));
		self.fConst53 = mydsp_faustpower2_f(self.fConst51);
		self.fConst54 = f32::powf(0.00100000005, (1.0 / (5.81371069 * self.fConst0)));
		self.fConst55 = ((0.0 - (2.0 * self.fConst54)) * f32::cos((6764.35156 / self.fConst0)));
		self.fConst56 = mydsp_faustpower2_f(self.fConst54);
		self.fConst57 = f32::powf(0.00100000005, (1.0 / (5.03897285 * self.fConst0)));
		self.fConst58 = ((0.0 - (2.0 * self.fConst57)) * f32::cos((7196.88623 / self.fConst0)));
		self.fConst59 = mydsp_faustpower2_f(self.fConst57);
		self.fConst60 = f32::powf(0.00100000005, (1.0 / (5.0017519 * self.fConst0)));
		self.fConst61 = ((0.0 - (2.0 * self.fConst60)) * f32::cos((7218.75146 / self.fConst0)));
		self.fConst62 = mydsp_faustpower2_f(self.fConst60);
		self.fConst63 = f32::powf(0.00100000005, (1.0 / (4.50501585 * self.fConst0)));
		self.fConst64 = ((0.0 - (2.0 * self.fConst63)) * f32::cos((7521.53809 / self.fConst0)));
		self.fConst65 = mydsp_faustpower2_f(self.fConst63);
		self.fConst66 = f32::powf(0.00100000005, (1.0 / (4.47701359 * self.fConst0)));
		self.fConst67 = ((0.0 - (2.0 * self.fConst66)) * f32::cos((7539.25684 / self.fConst0)));
		self.fConst68 = mydsp_faustpower2_f(self.fConst66);
		self.fConst69 = f32::powf(0.00100000005, (1.0 / (2.86205411 * self.fConst0)));
		self.fConst70 = ((0.0 - (2.0 * self.fConst69)) * f32::cos((8719.17578 / self.fConst0)));
		self.fConst71 = mydsp_faustpower2_f(self.fConst69);
		self.fConst72 = f32::powf(0.00100000005, (1.0 / (2.77140141 * self.fConst0)));
		self.fConst73 = ((0.0 - (2.0 * self.fConst72)) * f32::cos((8797.46484 / self.fConst0)));
		self.fConst74 = mydsp_faustpower2_f(self.fConst72);
		self.fConst75 = f32::powf(0.00100000005, (1.0 / (2.75552511 * self.fConst0)));
		self.fConst76 = ((0.0 - (2.0 * self.fConst75)) * f32::cos((8811.35059 / self.fConst0)));
		self.fConst77 = mydsp_faustpower2_f(self.fConst75);
		self.fConst78 = f32::powf(0.00100000005, (1.0 / (2.04149461 * self.fConst0)));
		self.fConst79 = ((0.0 - (2.0 * self.fConst78)) * f32::cos((9500.55273 / self.fConst0)));
		self.fConst80 = mydsp_faustpower2_f(self.fConst78);
		self.fConst81 = f32::powf(0.00100000005, (1.0 / (2.03562975 * self.fConst0)));
		self.fConst82 = ((0.0 - (2.0 * self.fConst81)) * f32::cos((9506.83594 / self.fConst0)));
		self.fConst83 = mydsp_faustpower2_f(self.fConst81);
		self.fConst84 = f32::powf(0.00100000005, (1.0 / (1.60488677 * self.fConst0)));
		self.fConst85 = ((0.0 - (2.0 * self.fConst84)) * f32::cos((10005.7842 / self.fConst0)));
		self.fConst86 = mydsp_faustpower2_f(self.fConst84);
		self.fConst87 = f32::powf(0.00100000005, (1.0 / (1.60049033 * self.fConst0)));
		self.fConst88 = ((0.0 - (2.0 * self.fConst87)) * f32::cos((10011.3135 / self.fConst0)));
		self.fConst89 = mydsp_faustpower2_f(self.fConst87);
		self.fConst90 = f32::powf(0.00100000005, (1.0 / (1.27547228 * self.fConst0)));
		self.fConst91 = ((0.0 - (2.0 * self.fConst90)) * f32::cos((10451.7646 / self.fConst0)));
		self.fConst92 = mydsp_faustpower2_f(self.fConst90);
		self.fConst93 = f32::powf(0.00100000005, (1.0 / (1.26255906 * self.fConst0)));
		self.fConst94 = ((0.0 - (2.0 * self.fConst93)) * f32::cos((10470.7402 / self.fConst0)));
		self.fConst95 = mydsp_faustpower2_f(self.fConst93);
		self.fConst96 = f32::powf(0.00100000005, (1.0 / (1.15959585 * self.fConst0)));
		self.fConst97 = ((0.0 - (2.0 * self.fConst96)) * f32::cos((10626.877 / self.fConst0)));
		self.fConst98 = mydsp_faustpower2_f(self.fConst96);
		self.fConst99 = f32::powf(0.00100000005, (1.0 / (1.14975893 * self.fConst0)));
		self.fConst100 = ((0.0 - (2.0 * self.fConst99)) * f32::cos((10642.2705 / self.fConst0)));
		self.fConst101 = mydsp_faustpower2_f(self.fConst99);
		self.fConst102 = f32::powf(0.00100000005, (1.0 / (0.75996846 * self.fConst0)));
		self.fConst103 = ((0.0 - (2.0 * self.fConst102)) * f32::cos((11340.0811 / self.fConst0)));
		self.fConst104 = mydsp_faustpower2_f(self.fConst102);
		self.fConst105 = f32::powf(0.00100000005, (1.0 / (0.747851193 * self.fConst0)));
		self.fConst106 = ((0.0 - (2.0 * self.fConst105)) * f32::cos((11365.2773 / self.fConst0)));
		self.fConst107 = mydsp_faustpower2_f(self.fConst105);
		self.fConst108 = f32::powf(0.00100000005, (1.0 / (0.714603662 * self.fConst0)));
		self.fConst109 = ((0.0 - (2.0 * self.fConst108)) * f32::cos((11435.8369 / self.fConst0)));
		self.fConst110 = mydsp_faustpower2_f(self.fConst108);
		self.fConst111 = f32::powf(0.00100000005, (1.0 / (0.638542414 * self.fConst0)));
		self.fConst112 = ((0.0 - (2.0 * self.fConst111)) * f32::cos((11605.9229 / self.fConst0)));
		self.fConst113 = mydsp_faustpower2_f(self.fConst111);
		self.fConst114 = f32::powf(0.00100000005, (1.0 / (0.48151058 * self.fConst0)));
		self.fConst115 = ((0.0 - (2.0 * self.fConst114)) * f32::cos((12005.4707 / self.fConst0)));
		self.fConst116 = mydsp_faustpower2_f(self.fConst114);
		self.fConst117 = f32::powf(0.00100000005, (1.0 / (0.444471955 * self.fConst0)));
		self.fConst118 = ((0.0 - (2.0 * self.fConst117)) * f32::cos((12112.0967 / self.fConst0)));
		self.fConst119 = mydsp_faustpower2_f(self.fConst117);
		self.fConst120 = f32::powf(0.00100000005, (1.0 / (0.253152221 * self.fConst0)));
		self.fConst121 = ((0.0 - (2.0 * self.fConst120)) * f32::cos((12786.7217 / self.fConst0)));
		self.fConst122 = mydsp_faustpower2_f(self.fConst120);
		self.fConst123 = f32::powf(0.00100000005, (1.0 / (0.247846678 * self.fConst0)));
		self.fConst124 = ((0.0 - (2.0 * self.fConst123)) * f32::cos((12809.7188 / self.fConst0)));
		self.fConst125 = mydsp_faustpower2_f(self.fConst123);
		self.fConst126 = f32::powf(0.00100000005, (1.0 / (0.2256172 * self.fConst0)));
		self.fConst127 = ((0.0 - (2.0 * self.fConst126)) * f32::cos((12909.8096 / self.fConst0)));
		self.fConst128 = mydsp_faustpower2_f(self.fConst126);
		self.fConst129 = f32::powf(0.00100000005, (1.0 / (0.224254459 * self.fConst0)));
		self.fConst130 = ((0.0 - (2.0 * self.fConst129)) * f32::cos((12916.1553 / self.fConst0)));
		self.fConst131 = mydsp_faustpower2_f(self.fConst129);
		self.fConst132 = f32::powf(0.00100000005, (1.0 / (0.194663718 * self.fConst0)));
		self.fConst133 = ((0.0 - (2.0 * self.fConst132)) * f32::cos((13060.7949 / self.fConst0)));
		self.fConst134 = mydsp_faustpower2_f(self.fConst132);
		self.fConst135 = f32::powf(0.00100000005, (1.0 / (0.179084182 * self.fConst0)));
		self.fConst136 = ((0.0 - (2.0 * self.fConst135)) * f32::cos((13142.916 / self.fConst0)));
		self.fConst137 = mydsp_faustpower2_f(self.fConst135);
		self.fConst138 = f32::powf(0.00100000005, (1.0 / (0.152662188 * self.fConst0)));
		self.fConst139 = ((0.0 - (2.0 * self.fConst138)) * f32::cos((13293.8379 / self.fConst0)));
		self.fConst140 = mydsp_faustpower2_f(self.fConst138);
		self.fConst141 = f32::powf(0.00100000005, (1.0 / (0.141256809 * self.fConst0)));
		self.fConst142 = ((0.0 - (2.0 * self.fConst141)) * f32::cos((13364.3984 / self.fConst0)));
		self.fConst143 = mydsp_faustpower2_f(self.fConst141);
		self.fConst144 = f32::powf(0.00100000005, (1.0 / (0.0741162524 * self.fConst0)));
		self.fConst145 = ((0.0 - (2.0 * self.fConst144)) * f32::cos((13884.96 / self.fConst0)));
		self.fConst146 = mydsp_faustpower2_f(self.fConst144);
		self.fConst147 = f32::powf(0.00100000005, (1.0 / (0.0714518651 * self.fConst0)));
		self.fConst148 = ((0.0 - (2.0 * self.fConst147)) * f32::cos((13911.2861 / self.fConst0)));
		self.fConst149 = mydsp_faustpower2_f(self.fConst147);
		self.fConst150 = f32::powf(0.00100000005, (1.0 / (0.0312931463 * self.fConst0)));
		self.fConst151 = ((0.0 - (2.0 * self.fConst150)) * f32::cos((14427.1357 / self.fConst0)));
		self.fConst152 = mydsp_faustpower2_f(self.fConst150);
		self.fConst153 = f32::powf(0.00100000005, (1.0 / (0.0305991787 * self.fConst0)));
		self.fConst154 = ((0.0 - (2.0 * self.fConst153)) * f32::cos((14439.2627 / self.fConst0)));
		self.fConst155 = mydsp_faustpower2_f(self.fConst153);
		self.fConst156 = f32::powf(0.00100000005, (1.0 / (0.0302826501 * self.fConst0)));
		self.fConst157 = ((0.0 - (2.0 * self.fConst156)) * f32::cos((14444.8545 / self.fConst0)));
		self.fConst158 = mydsp_faustpower2_f(self.fConst156);
		self.fConst159 = f32::powf(0.00100000005, (1.0 / (0.0273192264 * self.fConst0)));
		self.fConst160 = ((0.0 - (2.0 * self.fConst159)) * f32::cos((14499.2041 / self.fConst0)));
		self.fConst161 = mydsp_faustpower2_f(self.fConst159);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("frenchBell");
		ui_interface.declare(&mut self.fEntry0, "0", "");
		ui_interface.addNumEntry("strikePosition", &mut self.fEntry0, 0.0, 0.0, 4.0, 1.0);
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.addHorizontalSlider("strikeCutOff", &mut self.fHslider1, 6500.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fHslider2, "2", "");
		ui_interface.addHorizontalSlider("strikeSharpness", &mut self.fHslider2, 0.5, 0.01, 5.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "3", "");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider0, 1.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fButton0, "4", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = (50 * ((self.fEntry0 as f32) as i32));
		let mut fSlow1: f32 = f32::tan((self.fConst1 * (self.fHslider1 as f32)));
		let mut fSlow2: f32 = (1.0 / fSlow1);
		let mut fSlow3: f32 = (((fSlow2 + 1.41421354) / fSlow1) + 1.0);
		let mut fSlow4: f32 = ((self.fHslider0 as f32) / fSlow3);
		let mut fSlow5: f32 = (1.0 / fSlow3);
		let mut fSlow6: f32 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow1))));
		let mut fSlow7: f32 = (((fSlow2 + -1.41421354) / fSlow1) + 1.0);
		let mut fSlow8: f32 = (self.fButton0 as f32);
		let mut fSlow9: f32 = (self.fHslider2 as f32);
		let mut fSlow10: f32 = (self.fConst9 * fSlow9);
		let mut fSlow11: f32 = (self.fConst10 * fSlow9);
		let mut fSlow12: f32 = (self.fConst11 / fSlow9);
		let mut i: i32 = 0;
		loop {
			self.iRec3[0] = ((1103515245 * self.iRec3[1]) + 12345);
			self.fRec2[0] = ((4.65661287e-10 * (self.iRec3[0] as f32)) - (self.fConst4 * ((self.fConst6 * self.fRec2[2]) + (self.fConst7 * self.fRec2[1]))));
			self.fRec1[0] = ((self.fConst4 * (((self.fConst5 * self.fRec2[0]) + (self.fConst8 * self.fRec2[1])) + (self.fConst5 * self.fRec2[2]))) - (fSlow5 * ((fSlow6 * self.fRec1[1]) + (fSlow7 * self.fRec1[2]))));
			self.fVec0[0] = fSlow8;
			self.fVec1[0] = fSlow9;
			self.fRec4[0] = if ((((((fSlow8 - self.fVec0[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(fSlow10, ((self.fRec4[1] + (self.fConst9 * (fSlow9 - self.fVec1[1]))) + 1.0)) };
			let mut iTemp0: i32 = ((self.fRec4[0] < fSlow11) as i32);
			let mut fTemp1: f32 = (fSlow4 * ((self.fRec1[2] + (self.fRec1[0] + (2.0 * self.fRec1[1]))) * if (iTemp0 as i32 == 1) { if (((self.fRec4[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp0 as i32 == 1) { (fSlow12 * self.fRec4[0]) } else { 1.0 } } } else { if (((self.fRec4[0] < fSlow10) as i32) as i32 == 1) { ((fSlow12 * (0.0 - (self.fRec4[0] - fSlow11))) + 1.0) } else { 0.0 } }));
			self.fRec0[0] = (fTemp1 - ((self.fConst13 * self.fRec0[1]) + (self.fConst14 * self.fRec0[2])));
			self.fRec5[0] = (fTemp1 - ((self.fConst16 * self.fRec5[1]) + (self.fConst17 * self.fRec5[2])));
			self.fRec6[0] = (fTemp1 - ((self.fConst19 * self.fRec6[1]) + (self.fConst20 * self.fRec6[2])));
			self.fRec7[0] = (fTemp1 - ((self.fConst22 * self.fRec7[1]) + (self.fConst23 * self.fRec7[2])));
			self.fRec8[0] = (fTemp1 - ((self.fConst25 * self.fRec8[1]) + (self.fConst26 * self.fRec8[2])));
			self.fRec9[0] = (fTemp1 - ((self.fConst28 * self.fRec9[1]) + (self.fConst29 * self.fRec9[2])));
			self.fRec10[0] = (fTemp1 - ((self.fConst31 * self.fRec10[1]) + (self.fConst32 * self.fRec10[2])));
			self.fRec11[0] = (fTemp1 - ((self.fConst34 * self.fRec11[1]) + (self.fConst35 * self.fRec11[2])));
			self.fRec12[0] = (fTemp1 - ((self.fConst37 * self.fRec12[1]) + (self.fConst38 * self.fRec12[2])));
			self.fRec13[0] = (fTemp1 - ((self.fConst40 * self.fRec13[1]) + (self.fConst41 * self.fRec13[2])));
			self.fRec14[0] = (fTemp1 - ((self.fConst43 * self.fRec14[1]) + (self.fConst44 * self.fRec14[2])));
			self.fRec15[0] = (fTemp1 - ((self.fConst46 * self.fRec15[1]) + (self.fConst47 * self.fRec15[2])));
			self.fRec16[0] = (fTemp1 - ((self.fConst49 * self.fRec16[1]) + (self.fConst50 * self.fRec16[2])));
			self.fRec17[0] = (fTemp1 - ((self.fConst52 * self.fRec17[1]) + (self.fConst53 * self.fRec17[2])));
			self.fRec18[0] = (fTemp1 - ((self.fConst55 * self.fRec18[1]) + (self.fConst56 * self.fRec18[2])));
			self.fRec19[0] = (fTemp1 - ((self.fConst58 * self.fRec19[1]) + (self.fConst59 * self.fRec19[2])));
			self.fRec20[0] = (fTemp1 - ((self.fConst61 * self.fRec20[1]) + (self.fConst62 * self.fRec20[2])));
			self.fRec21[0] = (fTemp1 - ((self.fConst64 * self.fRec21[1]) + (self.fConst65 * self.fRec21[2])));
			self.fRec22[0] = (fTemp1 - ((self.fConst67 * self.fRec22[1]) + (self.fConst68 * self.fRec22[2])));
			self.fRec23[0] = (fTemp1 - ((self.fConst70 * self.fRec23[1]) + (self.fConst71 * self.fRec23[2])));
			self.fRec24[0] = (fTemp1 - ((self.fConst73 * self.fRec24[1]) + (self.fConst74 * self.fRec24[2])));
			self.fRec25[0] = (fTemp1 - ((self.fConst76 * self.fRec25[1]) + (self.fConst77 * self.fRec25[2])));
			self.fRec26[0] = (fTemp1 - ((self.fConst79 * self.fRec26[1]) + (self.fConst80 * self.fRec26[2])));
			self.fRec27[0] = (fTemp1 - ((self.fConst82 * self.fRec27[1]) + (self.fConst83 * self.fRec27[2])));
			self.fRec28[0] = (fTemp1 - ((self.fConst85 * self.fRec28[1]) + (self.fConst86 * self.fRec28[2])));
			self.fRec29[0] = (fTemp1 - ((self.fConst88 * self.fRec29[1]) + (self.fConst89 * self.fRec29[2])));
			self.fRec30[0] = (fTemp1 - ((self.fConst91 * self.fRec30[1]) + (self.fConst92 * self.fRec30[2])));
			self.fRec31[0] = (fTemp1 - ((self.fConst94 * self.fRec31[1]) + (self.fConst95 * self.fRec31[2])));
			self.fRec32[0] = (fTemp1 - ((self.fConst97 * self.fRec32[1]) + (self.fConst98 * self.fRec32[2])));
			self.fRec33[0] = (fTemp1 - ((self.fConst100 * self.fRec33[1]) + (self.fConst101 * self.fRec33[2])));
			self.fRec34[0] = (fTemp1 - ((self.fConst103 * self.fRec34[1]) + (self.fConst104 * self.fRec34[2])));
			self.fRec35[0] = (fTemp1 - ((self.fConst106 * self.fRec35[1]) + (self.fConst107 * self.fRec35[2])));
			self.fRec36[0] = (fTemp1 - ((self.fConst109 * self.fRec36[1]) + (self.fConst110 * self.fRec36[2])));
			self.fRec37[0] = (fTemp1 - ((self.fConst112 * self.fRec37[1]) + (self.fConst113 * self.fRec37[2])));
			self.fRec38[0] = (fTemp1 - ((self.fConst115 * self.fRec38[1]) + (self.fConst116 * self.fRec38[2])));
			self.fRec39[0] = (fTemp1 - ((self.fConst118 * self.fRec39[1]) + (self.fConst119 * self.fRec39[2])));
			self.fRec40[0] = (fTemp1 - ((self.fConst121 * self.fRec40[1]) + (self.fConst122 * self.fRec40[2])));
			self.fRec41[0] = (fTemp1 - ((self.fConst124 * self.fRec41[1]) + (self.fConst125 * self.fRec41[2])));
			self.fRec42[0] = (fTemp1 - ((self.fConst127 * self.fRec42[1]) + (self.fConst128 * self.fRec42[2])));
			self.fRec43[0] = (fTemp1 - ((self.fConst130 * self.fRec43[1]) + (self.fConst131 * self.fRec43[2])));
			self.fRec44[0] = (fTemp1 - ((self.fConst133 * self.fRec44[1]) + (self.fConst134 * self.fRec44[2])));
			self.fRec45[0] = (fTemp1 - ((self.fConst136 * self.fRec45[1]) + (self.fConst137 * self.fRec45[2])));
			self.fRec46[0] = (fTemp1 - ((self.fConst139 * self.fRec46[1]) + (self.fConst140 * self.fRec46[2])));
			self.fRec47[0] = (fTemp1 - ((self.fConst142 * self.fRec47[1]) + (self.fConst143 * self.fRec47[2])));
			self.fRec48[0] = (fTemp1 - ((self.fConst145 * self.fRec48[1]) + (self.fConst146 * self.fRec48[2])));
			self.fRec49[0] = (fTemp1 - ((self.fConst148 * self.fRec49[1]) + (self.fConst149 * self.fRec49[2])));
			self.fRec50[0] = (fTemp1 - ((self.fConst151 * self.fRec50[1]) + (self.fConst152 * self.fRec50[2])));
			self.fRec51[0] = (fTemp1 - ((self.fConst154 * self.fRec51[1]) + (self.fConst155 * self.fRec51[2])));
			self.fRec52[0] = (fTemp1 - ((self.fConst157 * self.fRec52[1]) + (self.fConst158 * self.fRec52[2])));
			self.fRec53[0] = (fTemp1 - ((self.fConst160 * self.fRec53[1]) + (self.fConst161 * self.fRec53[2])));
			let mut fTemp2: f32 = (0.0199999996 * ((((((((((((((((((((((((((((((((((((((((((((((((((ftbl0mydspSIG0[(iSlow0 + 48) as usize] * (self.fRec0[0] - self.fRec0[2])) + (ftbl0mydspSIG0[(iSlow0 + 49) as usize] * (self.fRec5[0] - self.fRec5[2]))) + (ftbl0mydspSIG0[iSlow0 as usize] * (self.fRec6[0] - self.fRec6[2]))) + (ftbl0mydspSIG0[(iSlow0 + 1) as usize] * (self.fRec7[0] - self.fRec7[2]))) + (ftbl0mydspSIG0[(iSlow0 + 2) as usize] * (self.fRec8[0] - self.fRec8[2]))) + (ftbl0mydspSIG0[(iSlow0 + 3) as usize] * (self.fRec9[0] - self.fRec9[2]))) + (ftbl0mydspSIG0[(iSlow0 + 4) as usize] * (self.fRec10[0] - self.fRec10[2]))) + (ftbl0mydspSIG0[(iSlow0 + 5) as usize] * (self.fRec11[0] - self.fRec11[2]))) + (ftbl0mydspSIG0[(iSlow0 + 6) as usize] * (self.fRec12[0] - self.fRec12[2]))) + (ftbl0mydspSIG0[(iSlow0 + 7) as usize] * (self.fRec13[0] - self.fRec13[2]))) + (ftbl0mydspSIG0[(iSlow0 + 8) as usize] * (self.fRec14[0] - self.fRec14[2]))) + (ftbl0mydspSIG0[(iSlow0 + 9) as usize] * (self.fRec15[0] - self.fRec15[2]))) + (ftbl0mydspSIG0[(iSlow0 + 10) as usize] * (self.fRec16[0] - self.fRec16[2]))) + (ftbl0mydspSIG0[(iSlow0 + 11) as usize] * (self.fRec17[0] - self.fRec17[2]))) + (ftbl0mydspSIG0[(iSlow0 + 12) as usize] * (self.fRec18[0] - self.fRec18[2]))) + (ftbl0mydspSIG0[(iSlow0 + 13) as usize] * (self.fRec19[0] - self.fRec19[2]))) + (ftbl0mydspSIG0[(iSlow0 + 14) as usize] * (self.fRec20[0] - self.fRec20[2]))) + (ftbl0mydspSIG0[(iSlow0 + 15) as usize] * (self.fRec21[0] - self.fRec21[2]))) + (ftbl0mydspSIG0[(iSlow0 + 16) as usize] * (self.fRec22[0] - self.fRec22[2]))) + (ftbl0mydspSIG0[(iSlow0 + 17) as usize] * (self.fRec23[0] - self.fRec23[2]))) + (ftbl0mydspSIG0[(iSlow0 + 18) as usize] * (self.fRec24[0] - self.fRec24[2]))) + (ftbl0mydspSIG0[(iSlow0 + 19) as usize] * (self.fRec25[0] - self.fRec25[2]))) + (ftbl0mydspSIG0[(iSlow0 + 20) as usize] * (self.fRec26[0] - self.fRec26[2]))) + (ftbl0mydspSIG0[(iSlow0 + 21) as usize] * (self.fRec27[0] - self.fRec27[2]))) + (ftbl0mydspSIG0[(iSlow0 + 22) as usize] * (self.fRec28[0] - self.fRec28[2]))) + (ftbl0mydspSIG0[(iSlow0 + 23) as usize] * (self.fRec29[0] - self.fRec29[2]))) + (ftbl0mydspSIG0[(iSlow0 + 24) as usize] * (self.fRec30[0] - self.fRec30[2]))) + (ftbl0mydspSIG0[(iSlow0 + 25) as usize] * (self.fRec31[0] - self.fRec31[2]))) + (ftbl0mydspSIG0[(iSlow0 + 26) as usize] * (self.fRec32[0] - self.fRec32[2]))) + (ftbl0mydspSIG0[(iSlow0 + 27) as usize] * (self.fRec33[0] - self.fRec33[2]))) + (ftbl0mydspSIG0[(iSlow0 + 28) as usize] * (self.fRec34[0] - self.fRec34[2]))) + (ftbl0mydspSIG0[(iSlow0 + 29) as usize] * (self.fRec35[0] - self.fRec35[2]))) + (ftbl0mydspSIG0[(iSlow0 + 30) as usize] * (self.fRec36[0] - self.fRec36[2]))) + (ftbl0mydspSIG0[(iSlow0 + 31) as usize] * (self.fRec37[0] - self.fRec37[2]))) + (ftbl0mydspSIG0[(iSlow0 + 32) as usize] * (self.fRec38[0] - self.fRec38[2]))) + (ftbl0mydspSIG0[(iSlow0 + 33) as usize] * (self.fRec39[0] - self.fRec39[2]))) + (ftbl0mydspSIG0[(iSlow0 + 34) as usize] * (self.fRec40[0] - self.fRec40[2]))) + (ftbl0mydspSIG0[(iSlow0 + 35) as usize] * (self.fRec41[0] - self.fRec41[2]))) + (ftbl0mydspSIG0[(iSlow0 + 36) as usize] * (self.fRec42[0] - self.fRec42[2]))) + (ftbl0mydspSIG0[(iSlow0 + 37) as usize] * (self.fRec43[0] - self.fRec43[2]))) + (ftbl0mydspSIG0[(iSlow0 + 38) as usize] * (self.fRec44[0] - self.fRec44[2]))) + (ftbl0mydspSIG0[(iSlow0 + 39) as usize] * (self.fRec45[0] - self.fRec45[2]))) + (ftbl0mydspSIG0[(iSlow0 + 40) as usize] * (self.fRec46[0] - self.fRec46[2]))) + (ftbl0mydspSIG0[(iSlow0 + 41) as usize] * (self.fRec47[0] - self.fRec47[2]))) + (ftbl0mydspSIG0[(iSlow0 + 42) as usize] * (self.fRec48[0] - self.fRec48[2]))) + (ftbl0mydspSIG0[(iSlow0 + 43) as usize] * (self.fRec49[0] - self.fRec49[2]))) + (ftbl0mydspSIG0[(iSlow0 + 44) as usize] * (self.fRec50[0] - self.fRec50[2]))) + (ftbl0mydspSIG0[(iSlow0 + 45) as usize] * (self.fRec51[0] - self.fRec51[2]))) + (ftbl0mydspSIG0[(iSlow0 + 46) as usize] * (self.fRec52[0] - self.fRec52[2]))) + (ftbl0mydspSIG0[(iSlow0 + 47) as usize] * (self.fRec53[0] - self.fRec53[2]))));
			outputs[0][i as usize] = (fTemp2 as f32);
			outputs[1][i as usize] = (fTemp2 as f32);
			self.iRec3[1] = self.iRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fVec0[1] = self.fVec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[2] = self.fRec15[1];
			self.fRec15[1] = self.fRec15[0];
			self.fRec16[2] = self.fRec16[1];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[2] = self.fRec23[1];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[2] = self.fRec24[1];
			self.fRec24[1] = self.fRec24[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec27[2] = self.fRec27[1];
			self.fRec27[1] = self.fRec27[0];
			self.fRec28[2] = self.fRec28[1];
			self.fRec28[1] = self.fRec28[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[2] = self.fRec30[1];
			self.fRec30[1] = self.fRec30[0];
			self.fRec31[2] = self.fRec31[1];
			self.fRec31[1] = self.fRec31[0];
			self.fRec32[2] = self.fRec32[1];
			self.fRec32[1] = self.fRec32[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec34[2] = self.fRec34[1];
			self.fRec34[1] = self.fRec34[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec37[2] = self.fRec37[1];
			self.fRec37[1] = self.fRec37[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec39[2] = self.fRec39[1];
			self.fRec39[1] = self.fRec39[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.fRec48[2] = self.fRec48[1];
			self.fRec48[1] = self.fRec48[0];
			self.fRec49[2] = self.fRec49[1];
			self.fRec49[1] = self.fRec49[0];
			self.fRec50[2] = self.fRec50[1];
			self.fRec50[1] = self.fRec50[0];
			self.fRec51[2] = self.fRec51[1];
			self.fRec51[1] = self.fRec51[0];
			self.fRec52[2] = self.fRec52[1];
			self.fRec52[1] = self.fRec52[0];
			self.fRec53[2] = self.fRec53[1];
			self.fRec53[1] = self.fRec53[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

