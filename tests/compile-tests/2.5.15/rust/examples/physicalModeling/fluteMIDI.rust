
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iRec15: [i32;2],
	iVec0: [i32;2],
	fRec22: [f32;2],
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider2: f32,
	fRec23: [f32;2],
	fRec24: [f32;2],
	fButton0: f32,
	fHslider3: f32,
	fVec1: [f32;2],
	fHslider4: f32,
	fConst2: f32,
	fHslider5: f32,
	fRec25: [f32;2],
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fConst6: f32,
	iRec27: [i32;2],
	fConst7: f32,
	fConst8: f32,
	fConst9: f32,
	fRec26: [f32;3],
	fRec28: [f32;2],
	IOTA: i32,
	fRec29: [f32;2048],
	fConst10: f32,
	fConst11: f32,
	fHslider6: f32,
	fHslider7: f32,
	fRec31: [f32;2],
	fHslider8: f32,
	fRec32: [f32;2],
	fVec2: [f32;2],
	fVec3: [f32;2048],
	fVec4: [f32;2],
	fRec20: [f32;2],
	fRec11: [f32;2048],
	fRec7: [f32;2],
	fRec3: [f32;2048],
	fRec1: [f32;2],
	fRec2: [f32;2],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iRec15: [0;2],
			iVec0: [0;2],
			fRec22: [0.0;2],
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider2: 0.0,
			fRec23: [0.0;2],
			fRec24: [0.0;2],
			fButton0: 0.0,
			fHslider3: 0.0,
			fVec1: [0.0;2],
			fHslider4: 0.0,
			fConst2: 0.0,
			fHslider5: 0.0,
			fRec25: [0.0;2],
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			iRec27: [0;2],
			fConst7: 0.0,
			fConst8: 0.0,
			fConst9: 0.0,
			fRec26: [0.0;3],
			fRec28: [0.0;2],
			IOTA: 0,
			fRec29: [0.0;2048],
			fConst10: 0.0,
			fConst11: 0.0,
			fHslider6: 0.0,
			fHslider7: 0.0,
			fRec31: [0.0;2],
			fHslider8: 0.0,
			fRec32: [0.0;2],
			fVec2: [0.0;2],
			fVec3: [0.0;2048],
			fVec4: [0.0;2],
			fRec20: [0.0;2],
			fRec11: [0.0;2048],
			fRec7: [0.0;2],
			fRec3: [0.0;2048],
			fRec1: [0.0;2],
			fRec2: [0.0;2],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple MIDI-controllable flute physical model with physical parameters.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "FluteMIDI");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.5;
		self.fHslider2 = 5.0;
		self.fButton0 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.899999976;
		self.fHslider5 = 1.0;
		self.fHslider6 = 440.0;
		self.fHslider7 = 1.0;
		self.fHslider8 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec15[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iVec0[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec22[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec23[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec24[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec1[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec25[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.iRec27[l7 as usize] = 0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec26[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec28[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l10: i32 = 0;
		loop {
			self.fRec29[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2048) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec31[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec32[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fVec2[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fVec3[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2048) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fVec4[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec20[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec11[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2048) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec7[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec3[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2048) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec1[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec2[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec0[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		self.fConst2 = (1000.0 / self.fConst0);
		self.fConst3 = f32::tan((6283.18555 / self.fConst0));
		self.fConst4 = (1.0 / self.fConst3);
		self.fConst5 = (((self.fConst4 + 1.41421354) / self.fConst3) + 1.0);
		self.fConst6 = (0.0500000007 / self.fConst5);
		self.fConst7 = (1.0 / self.fConst5);
		self.fConst8 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst3))));
		self.fConst9 = (((self.fConst4 + -1.41421354) / self.fConst3) + 1.0);
		self.fConst10 = (0.00882352982 * self.fConst0);
		self.fConst11 = (0.00147058826 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("flute");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider6, "0", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider6, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider7, "1", "");
		ui_interface.declare(&mut self.fHslider7, "hidden", "1");
		ui_interface.declare(&mut self.fHslider7, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider7, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider7, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider4, 0.90000000000000002, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider5, "3", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.addHorizontalSlider("envAttack", &mut self.fHslider5, 1.0, 0.0, 30.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "4", "");
		ui_interface.declare(&mut self.fHslider3, "hidden", "1");
		ui_interface.declare(&mut self.fHslider3, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fHslider8, "0", "");
		ui_interface.declare(&mut self.fHslider8, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider8, "style", "knob");
		ui_interface.addHorizontalSlider("mouthPosition", &mut self.fHslider8, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoFreq", &mut self.fHslider2, 5.0, 1.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoGain", &mut self.fHslider1, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "3", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.0399999991 * (self.fHslider1 as f32));
		let mut fSlow2: f32 = (self.fConst1 * (self.fHslider2 as f32));
		let mut fSlow3: f32 = f32::sin(fSlow2);
		let mut fSlow4: f32 = f32::cos(fSlow2);
		let mut fSlow5: f32 = (0.0 - fSlow3);
		let mut fSlow6: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider3 as f32)));
		let mut fSlow7: f32 = f32::exp((0.0 - (self.fConst2 / (self.fHslider5 as f32))));
		let mut fSlow8: f32 = ((fSlow6 * (self.fHslider4 as f32)) * (1.0 - fSlow7));
		let mut fSlow9: f32 = (340.0 / (self.fHslider6 as f32));
		let mut fSlow10: f32 = (self.fHslider7 as f32);
		let mut iSlow11: i32 = ((fSlow6 == 0.0) as i32);
		let mut fSlow12: f32 = (0.00100000005 * (self.fHslider8 as f32));
		let mut i: i32 = 0;
		loop {
			self.iRec15[0] = 0;
			self.iVec0[0] = 1;
			self.fRec22[0] = ((0.699999988 * self.fRec22[1]) + (0.284999996 * self.fRec20[1]));
			let mut fRec19: f32 = (self.fRec22[0] + (self.iRec15[1] as f32));
			self.fRec23[0] = ((fSlow3 * self.fRec24[1]) + (fSlow4 * self.fRec23[1]));
			self.fRec24[0] = (((fSlow4 * self.fRec24[1]) + (fSlow5 * self.fRec23[1])) + ((1 - self.iVec0[1]) as f32));
			self.fVec1[0] = fSlow6;
			self.fRec25[0] = (fSlow8 + (fSlow7 * self.fRec25[1]));
			self.iRec27[0] = ((1103515245 * self.iRec27[1]) + 12345);
			self.fRec26[0] = ((4.65661287e-10 * (self.iRec27[0] as f32)) - (self.fConst7 * ((self.fConst8 * self.fRec26[1]) + (self.fConst9 * self.fRec26[2]))));
			self.fRec28[0] = self.fRec1[1];
			self.fRec29[(self.IOTA & 2047) as usize] = (0.949999988 * self.fRec28[1]);
			let mut iRec30: i32 = 0;
			let mut iTemp0: i32 = (((fSlow6 == self.fVec1[1]) as i32) | iSlow11);
			self.fRec31[0] = ((fSlow10 * (1.0 - (0.999000013 * (iTemp0 as f32)))) + (0.999000013 * ((iTemp0 as f32) * self.fRec31[1])));
			let mut fTemp1: f32 = ((fSlow9 / self.fRec31[0]) + 0.270000011);
			self.fRec32[0] = (fSlow12 + (0.999000013 * self.fRec32[1]));
			let mut fTemp2: f32 = (0.400000006 * (self.fRec32[0] + -0.5));
			let mut fTemp3: f32 = (self.fConst11 * (fTemp1 * (fTemp2 + 0.270000011)));
			let mut fTemp4: f32 = (fTemp3 + -1.49999499);
			let mut iTemp5: i32 = (fTemp4 as i32);
			let mut iTemp6: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, (iTemp5 as i32)) as f32)) as i32) + 1);
			let mut fTemp7: f32 = f32::floor(fTemp4);
			let mut fTemp8: f32 = (fTemp3 + (-1.0 - fTemp7));
			let mut fTemp9: f32 = (0.0 - fTemp8);
			let mut fTemp10: f32 = (fTemp3 + (-2.0 - fTemp7));
			let mut fTemp11: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp12: f32 = (fTemp3 + (-3.0 - fTemp7));
			let mut fTemp13: f32 = (0.0 - (0.333333343 * fTemp12));
			let mut fTemp14: f32 = (fTemp3 + (-4.0 - fTemp7));
			let mut fTemp15: f32 = (0.0 - (0.25 * fTemp14));
			let mut fTemp16: f32 = (fTemp3 - fTemp7);
			let mut iTemp17: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp5 + 2) as i32)) as f32)) as i32) + 1);
			let mut fTemp18: f32 = (0.0 - fTemp12);
			let mut fTemp19: f32 = (0.0 - (0.5 * fTemp14));
			let mut iTemp20: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp5 + 1) as i32)) as f32)) as i32) + 1);
			let mut fTemp21: f32 = (0.0 - fTemp10);
			let mut fTemp22: f32 = (0.0 - (0.5 * fTemp12));
			let mut fTemp23: f32 = (0.0 - (0.333333343 * fTemp14));
			let mut fTemp24: f32 = (fTemp8 * fTemp10);
			let mut iTemp25: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp5 + 3) as i32)) as f32)) as i32) + 1);
			let mut fTemp26: f32 = (0.0 - fTemp14);
			let mut fTemp27: f32 = (fTemp24 * fTemp12);
			let mut iTemp28: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp5 + 4) as i32)) as f32)) as i32) + 1);
			self.fVec2[0] = (((((self.fRec29[((self.IOTA - iTemp6) & 2047) as usize] * fTemp9) * fTemp11) * fTemp13) * fTemp15) + (fTemp16 * ((((0.5 * (((fTemp8 * self.fRec29[((self.IOTA - iTemp17) & 2047) as usize]) * fTemp18) * fTemp19)) + (((self.fRec29[((self.IOTA - iTemp20) & 2047) as usize] * fTemp21) * fTemp22) * fTemp23)) + (0.166666672 * ((fTemp24 * self.fRec29[((self.IOTA - iTemp25) & 2047) as usize]) * fTemp26))) + (0.0416666679 * (fTemp27 * self.fRec29[((self.IOTA - iTemp28) & 2047) as usize])))));
			let mut fTemp29: f32 = (((fSlow1 * self.fRec23[0]) + (self.fRec25[0] * ((self.fConst6 * (self.fRec26[2] + (self.fRec26[0] + (2.0 * self.fRec26[1])))) + 1.0))) - (0.5 * self.fVec2[1]));
			let mut fTemp30: f32 = ((0.5 * self.fRec7[1]) + f32::max(-1.0, f32::min(1.0, (fTemp29 * (mydsp_faustpower2_f(fTemp29) + -1.0)))));
			self.fVec3[(self.IOTA & 2047) as usize] = fTemp30;
			let mut fTemp31: f32 = (self.fConst11 * (fTemp1 * (0.730000019 - fTemp2)));
			let mut fTemp32: f32 = (fTemp31 + -1.49999499);
			let mut iTemp33: i32 = (fTemp32 as i32);
			let mut iTemp34: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, (iTemp33 as i32)) as f32)) as i32) + 1);
			let mut fTemp35: f32 = f32::floor(fTemp32);
			let mut fTemp36: f32 = (fTemp31 + (-1.0 - fTemp35));
			let mut fTemp37: f32 = (0.0 - fTemp36);
			let mut fTemp38: f32 = (fTemp31 + (-2.0 - fTemp35));
			let mut fTemp39: f32 = (0.0 - (0.5 * fTemp38));
			let mut fTemp40: f32 = (fTemp31 + (-3.0 - fTemp35));
			let mut fTemp41: f32 = (0.0 - (0.333333343 * fTemp40));
			let mut fTemp42: f32 = (fTemp31 + (-4.0 - fTemp35));
			let mut fTemp43: f32 = (0.0 - (0.25 * fTemp42));
			let mut fTemp44: f32 = (fTemp31 - fTemp35);
			let mut iTemp45: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp33 + 2) as i32)) as f32)) as i32) + 1);
			let mut fTemp46: f32 = (0.0 - fTemp40);
			let mut fTemp47: f32 = (0.0 - (0.5 * fTemp42));
			let mut iTemp48: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp33 + 1) as i32)) as f32)) as i32) + 1);
			let mut fTemp49: f32 = (0.0 - fTemp38);
			let mut fTemp50: f32 = (0.0 - (0.5 * fTemp40));
			let mut fTemp51: f32 = (0.0 - (0.333333343 * fTemp42));
			let mut fTemp52: f32 = (fTemp36 * fTemp38);
			let mut iTemp53: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp33 + 3) as i32)) as f32)) as i32) + 1);
			let mut fTemp54: f32 = (0.0 - fTemp42);
			let mut fTemp55: f32 = (fTemp52 * fTemp40);
			let mut iTemp56: i32 = ((f32::min(self.fConst10, (std::cmp::max(0, ((iTemp33 + 4) as i32)) as f32)) as i32) + 1);
			self.fVec4[0] = (((((self.fVec3[((self.IOTA - iTemp34) & 2047) as usize] * fTemp37) * fTemp39) * fTemp41) * fTemp43) + (fTemp44 * ((((0.5 * (((fTemp36 * self.fVec3[((self.IOTA - iTemp45) & 2047) as usize]) * fTemp46) * fTemp47)) + (((self.fVec3[((self.IOTA - iTemp48) & 2047) as usize] * fTemp49) * fTemp50) * fTemp51)) + (0.166666672 * ((fTemp52 * self.fVec3[((self.IOTA - iTemp53) & 2047) as usize]) * fTemp54))) + (0.0416666679 * (fTemp55 * self.fVec3[((self.IOTA - iTemp56) & 2047) as usize])))));
			self.fRec20[0] = self.fVec4[1];
			let mut iRec21: i32 = iRec30;
			let mut fRec16: f32 = fRec19;
			let mut fRec17: f32 = self.fRec20[0];
			let mut fRec18: f32 = (self.fRec20[0] + (iRec21 as f32));
			self.fRec11[(self.IOTA & 2047) as usize] = fRec16;
			let mut fRec12: f32 = (((((fTemp37 * fTemp39) * fTemp41) * fTemp43) * self.fRec11[((self.IOTA - iTemp34) & 2047) as usize]) + (fTemp44 * (((0.166666672 * ((fTemp52 * fTemp54) * self.fRec11[((self.IOTA - iTemp53) & 2047) as usize])) + ((((fTemp49 * fTemp50) * fTemp51) * self.fRec11[((self.IOTA - iTemp48) & 2047) as usize]) + (0.5 * (((fTemp36 * fTemp46) * fTemp47) * self.fRec11[((self.IOTA - iTemp45) & 2047) as usize])))) + (0.0416666679 * (fTemp55 * self.fRec11[((self.IOTA - iTemp56) & 2047) as usize])))));
			let mut fRec13: f32 = fRec17;
			let mut fRec14: f32 = fRec18;
			self.fRec7[0] = fRec12;
			let mut fRec8: f32 = self.fRec7[1];
			let mut fRec9: f32 = fRec13;
			let mut fRec10: f32 = fRec14;
			self.fRec3[(self.IOTA & 2047) as usize] = fRec8;
			let mut fRec4: f32 = (((((fTemp9 * fTemp11) * fTemp13) * fTemp15) * self.fRec3[((self.IOTA - iTemp6) & 2047) as usize]) + (fTemp16 * (((0.166666672 * ((fTemp24 * fTemp26) * self.fRec3[((self.IOTA - iTemp25) & 2047) as usize])) + ((((fTemp21 * fTemp22) * fTemp23) * self.fRec3[((self.IOTA - iTemp20) & 2047) as usize]) + (0.5 * (((fTemp8 * fTemp18) * fTemp19) * self.fRec3[((self.IOTA - iTemp17) & 2047) as usize])))) + (0.0416666679 * (fTemp27 * self.fRec3[((self.IOTA - iTemp28) & 2047) as usize])))));
			let mut fRec5: f32 = fRec9;
			let mut fRec6: f32 = fRec10;
			self.fRec1[0] = fRec4;
			self.fRec2[0] = fRec6;
			self.fRec0[0] = ((self.fRec2[0] + (0.995000005 * self.fRec0[1])) - self.fRec2[1]);
			let mut fTemp57: f32 = (fSlow0 * self.fRec0[0]);
			outputs[0][i as usize] = (fTemp57 as f32);
			outputs[1][i as usize] = (fTemp57 as f32);
			self.iRec15[1] = self.iRec15[0];
			self.iVec0[1] = self.iVec0[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[1] = self.fRec24[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec25[1] = self.fRec25[0];
			self.iRec27[1] = self.iRec27[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec28[1] = self.fRec28[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec31[1] = self.fRec31[0];
			self.fRec32[1] = self.fRec32[0];
			self.fVec2[1] = self.fVec2[0];
			self.fVec4[1] = self.fVec4[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

