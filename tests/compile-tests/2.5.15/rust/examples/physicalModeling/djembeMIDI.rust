
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider2: f32,
	iRec3: [i32;2],
	fRec2: [f32;3],
	fRec1: [f32;3],
	fButton0: f32,
	fVec0: [f32;2],
	fConst2: f32,
	fHslider3: f32,
	fVec1: [f32;2],
	fRec4: [f32;2],
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fConst6: f32,
	fConst7: f32,
	fHslider4: f32,
	fConst8: f32,
	fRec0: [f32;3],
	fConst9: f32,
	fConst10: f32,
	fConst11: f32,
	fRec5: [f32;3],
	fConst12: f32,
	fConst13: f32,
	fConst14: f32,
	fRec6: [f32;3],
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fRec7: [f32;3],
	fConst18: f32,
	fConst19: f32,
	fConst20: f32,
	fRec8: [f32;3],
	fConst21: f32,
	fConst22: f32,
	fConst23: f32,
	fRec9: [f32;3],
	fConst24: f32,
	fConst25: f32,
	fConst26: f32,
	fRec10: [f32;3],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fRec11: [f32;3],
	fConst30: f32,
	fConst31: f32,
	fConst32: f32,
	fRec12: [f32;3],
	fConst33: f32,
	fConst34: f32,
	fConst35: f32,
	fRec13: [f32;3],
	fConst36: f32,
	fConst37: f32,
	fConst38: f32,
	fRec14: [f32;3],
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fRec15: [f32;3],
	fConst42: f32,
	fConst43: f32,
	fConst44: f32,
	fRec16: [f32;3],
	fConst45: f32,
	fConst46: f32,
	fConst47: f32,
	fRec17: [f32;3],
	fConst48: f32,
	fConst49: f32,
	fConst50: f32,
	fRec18: [f32;3],
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fRec19: [f32;3],
	fConst54: f32,
	fConst55: f32,
	fConst56: f32,
	fRec20: [f32;3],
	fConst57: f32,
	fConst58: f32,
	fConst59: f32,
	fRec21: [f32;3],
	fConst60: f32,
	fConst61: f32,
	fConst62: f32,
	fRec22: [f32;3],
	fConst63: f32,
	fConst64: f32,
	fConst65: f32,
	fRec23: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider2: 0.0,
			iRec3: [0;2],
			fRec2: [0.0;3],
			fRec1: [0.0;3],
			fButton0: 0.0,
			fVec0: [0.0;2],
			fConst2: 0.0,
			fHslider3: 0.0,
			fVec1: [0.0;2],
			fRec4: [0.0;2],
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			fConst7: 0.0,
			fHslider4: 0.0,
			fConst8: 0.0,
			fRec0: [0.0;3],
			fConst9: 0.0,
			fConst10: 0.0,
			fConst11: 0.0,
			fRec5: [0.0;3],
			fConst12: 0.0,
			fConst13: 0.0,
			fConst14: 0.0,
			fRec6: [0.0;3],
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fRec7: [0.0;3],
			fConst18: 0.0,
			fConst19: 0.0,
			fConst20: 0.0,
			fRec8: [0.0;3],
			fConst21: 0.0,
			fConst22: 0.0,
			fConst23: 0.0,
			fRec9: [0.0;3],
			fConst24: 0.0,
			fConst25: 0.0,
			fConst26: 0.0,
			fRec10: [0.0;3],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fRec11: [0.0;3],
			fConst30: 0.0,
			fConst31: 0.0,
			fConst32: 0.0,
			fRec12: [0.0;3],
			fConst33: 0.0,
			fConst34: 0.0,
			fConst35: 0.0,
			fRec13: [0.0;3],
			fConst36: 0.0,
			fConst37: 0.0,
			fConst38: 0.0,
			fRec14: [0.0;3],
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fRec15: [0.0;3],
			fConst42: 0.0,
			fConst43: 0.0,
			fConst44: 0.0,
			fRec16: [0.0;3],
			fConst45: 0.0,
			fConst46: 0.0,
			fConst47: 0.0,
			fRec17: [0.0;3],
			fConst48: 0.0,
			fConst49: 0.0,
			fConst50: 0.0,
			fRec18: [0.0;3],
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fRec19: [0.0;3],
			fConst54: 0.0,
			fConst55: 0.0,
			fConst56: 0.0,
			fRec20: [0.0;3],
			fConst57: 0.0,
			fConst58: 0.0,
			fConst59: 0.0,
			fRec21: [0.0;3],
			fConst60: 0.0,
			fConst61: 0.0,
			fConst62: 0.0,
			fRec22: [0.0;3],
			fConst63: 0.0,
			fConst64: 0.0,
			fConst65: 0.0,
			fRec23: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("description", "Simple MIDI-controllable djembe physical model.");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "DjembeMIDI");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 1.0;
		self.fHslider1 = 1.0;
		self.fHslider2 = 0.5;
		self.fButton0 = 0.0;
		self.fHslider3 = 0.5;
		self.fHslider4 = 60.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec3[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec2[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 3) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 3) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fVec0[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec4[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec6[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec7[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec8[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec9[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec10[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec11[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec12[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec13[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec14[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec15[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 3) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec16[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec17[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec18[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec19[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec20[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 3) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec21[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec22[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec23[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (3.14159274 / self.fConst0);
		self.fConst2 = (0.00400000019 * self.fConst0);
		self.fConst3 = (0.00200000009 * self.fConst0);
		self.fConst4 = (500.0 / self.fConst0);
		self.fConst5 = f32::powf(0.00100000005, (1.0 / (0.600000024 * self.fConst0)));
		self.fConst6 = (0.0 - (2.0 * self.fConst5));
		self.fConst7 = (6.28318548 / self.fConst0);
		self.fConst8 = mydsp_faustpower2_f(self.fConst5);
		self.fConst9 = f32::powf(0.00100000005, (1.0 / (0.569999993 * self.fConst0)));
		self.fConst10 = (0.0 - (2.0 * self.fConst9));
		self.fConst11 = mydsp_faustpower2_f(self.fConst9);
		self.fConst12 = f32::powf(0.00100000005, (1.0 / (0.540000021 * self.fConst0)));
		self.fConst13 = (0.0 - (2.0 * self.fConst12));
		self.fConst14 = mydsp_faustpower2_f(self.fConst12);
		self.fConst15 = f32::powf(0.00100000005, (1.0 / (0.50999999 * self.fConst0)));
		self.fConst16 = (0.0 - (2.0 * self.fConst15));
		self.fConst17 = mydsp_faustpower2_f(self.fConst15);
		self.fConst18 = f32::powf(0.00100000005, (1.0 / (0.479999989 * self.fConst0)));
		self.fConst19 = (0.0 - (2.0 * self.fConst18));
		self.fConst20 = mydsp_faustpower2_f(self.fConst18);
		self.fConst21 = f32::powf(0.00100000005, (1.0 / (0.449999988 * self.fConst0)));
		self.fConst22 = (0.0 - (2.0 * self.fConst21));
		self.fConst23 = mydsp_faustpower2_f(self.fConst21);
		self.fConst24 = f32::powf(0.00100000005, (1.0 / (0.419999987 * self.fConst0)));
		self.fConst25 = (0.0 - (2.0 * self.fConst24));
		self.fConst26 = mydsp_faustpower2_f(self.fConst24);
		self.fConst27 = f32::powf(0.00100000005, (1.0 / (0.389999986 * self.fConst0)));
		self.fConst28 = (0.0 - (2.0 * self.fConst27));
		self.fConst29 = mydsp_faustpower2_f(self.fConst27);
		self.fConst30 = f32::powf(0.00100000005, (1.0 / (0.360000014 * self.fConst0)));
		self.fConst31 = (0.0 - (2.0 * self.fConst30));
		self.fConst32 = mydsp_faustpower2_f(self.fConst30);
		self.fConst33 = f32::powf(0.00100000005, (1.0 / (0.330000013 * self.fConst0)));
		self.fConst34 = (0.0 - (2.0 * self.fConst33));
		self.fConst35 = mydsp_faustpower2_f(self.fConst33);
		self.fConst36 = f32::powf(0.00100000005, (1.0 / (0.300000012 * self.fConst0)));
		self.fConst37 = (0.0 - (2.0 * self.fConst36));
		self.fConst38 = mydsp_faustpower2_f(self.fConst36);
		self.fConst39 = f32::powf(0.00100000005, (1.0 / (0.270000011 * self.fConst0)));
		self.fConst40 = (0.0 - (2.0 * self.fConst39));
		self.fConst41 = mydsp_faustpower2_f(self.fConst39);
		self.fConst42 = f32::powf(0.00100000005, (1.0 / (0.239999995 * self.fConst0)));
		self.fConst43 = (0.0 - (2.0 * self.fConst42));
		self.fConst44 = mydsp_faustpower2_f(self.fConst42);
		self.fConst45 = f32::powf(0.00100000005, (1.0 / (0.209999993 * self.fConst0)));
		self.fConst46 = (0.0 - (2.0 * self.fConst45));
		self.fConst47 = mydsp_faustpower2_f(self.fConst45);
		self.fConst48 = f32::powf(0.00100000005, (1.0 / (0.180000007 * self.fConst0)));
		self.fConst49 = (0.0 - (2.0 * self.fConst48));
		self.fConst50 = mydsp_faustpower2_f(self.fConst48);
		self.fConst51 = f32::powf(0.00100000005, (1.0 / (0.150000006 * self.fConst0)));
		self.fConst52 = (0.0 - (2.0 * self.fConst51));
		self.fConst53 = mydsp_faustpower2_f(self.fConst51);
		self.fConst54 = f32::powf(0.00100000005, (1.0 / (0.119999997 * self.fConst0)));
		self.fConst55 = (0.0 - (2.0 * self.fConst54));
		self.fConst56 = mydsp_faustpower2_f(self.fConst54);
		self.fConst57 = f32::powf(0.00100000005, (1.0 / (0.0900000036 * self.fConst0)));
		self.fConst58 = (0.0 - (2.0 * self.fConst57));
		self.fConst59 = mydsp_faustpower2_f(self.fConst57);
		self.fConst60 = f32::powf(0.00100000005, (1.0 / (0.0599999987 * self.fConst0)));
		self.fConst61 = (0.0 - (2.0 * self.fConst60));
		self.fConst62 = mydsp_faustpower2_f(self.fConst60);
		self.fConst63 = f32::powf(0.00100000005, (1.0 / (0.0299999993 * self.fConst0)));
		self.fConst64 = (0.0 - (2.0 * self.fConst63));
		self.fConst65 = mydsp_faustpower2_f(self.fConst63);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("djembe");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider4, "0", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider4, 60.0, 50.0, 100.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider1, 1.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.declare(&mut self.fHslider2, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("strikePosition", &mut self.fHslider2, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("strikeSharpness", &mut self.fHslider3, 0.5, 0.01, 5.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 1.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "3", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.0500000007 * (self.fHslider0 as f32));
		let mut fSlow1: f32 = (self.fHslider2 as f32);
		let mut fSlow2: f32 = f32::tan((self.fConst1 * ((15000.0 * fSlow1) + 500.0)));
		let mut fSlow3: f32 = (1.0 / fSlow2);
		let mut fSlow4: f32 = (((fSlow3 + 1.41421354) / fSlow2) + 1.0);
		let mut fSlow5: f32 = ((self.fHslider1 as f32) / fSlow4);
		let mut fSlow6: f32 = f32::tan((self.fConst1 * ((500.0 * fSlow1) + 40.0)));
		let mut fSlow7: f32 = (1.0 / fSlow6);
		let mut fSlow8: f32 = (1.0 / (((fSlow7 + 1.41421354) / fSlow6) + 1.0));
		let mut fSlow9: f32 = (1.0 / mydsp_faustpower2_f(fSlow6));
		let mut fSlow10: f32 = (((fSlow7 + -1.41421354) / fSlow6) + 1.0);
		let mut fSlow11: f32 = (2.0 * (1.0 - fSlow9));
		let mut fSlow12: f32 = (2.0 * (0.0 - fSlow9));
		let mut fSlow13: f32 = (1.0 / fSlow4);
		let mut fSlow14: f32 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow2))));
		let mut fSlow15: f32 = (((fSlow3 + -1.41421354) / fSlow2) + 1.0);
		let mut fSlow16: f32 = (self.fButton0 as f32);
		let mut fSlow17: f32 = (self.fHslider3 as f32);
		let mut fSlow18: f32 = (self.fConst2 * fSlow17);
		let mut fSlow19: f32 = (self.fConst3 * fSlow17);
		let mut fSlow20: f32 = (self.fConst4 / fSlow17);
		let mut fSlow21: f32 = (self.fHslider4 as f32);
		let mut fSlow22: f32 = (self.fConst6 * f32::cos((self.fConst7 * fSlow21)));
		let mut fSlow23: f32 = (self.fConst10 * f32::cos((self.fConst7 * (fSlow21 + 200.0))));
		let mut fSlow24: f32 = (self.fConst13 * f32::cos((self.fConst7 * (fSlow21 + 400.0))));
		let mut fSlow25: f32 = (self.fConst16 * f32::cos((self.fConst7 * (fSlow21 + 600.0))));
		let mut fSlow26: f32 = (self.fConst19 * f32::cos((self.fConst7 * (fSlow21 + 800.0))));
		let mut fSlow27: f32 = (self.fConst22 * f32::cos((self.fConst7 * (fSlow21 + 1000.0))));
		let mut fSlow28: f32 = (self.fConst25 * f32::cos((self.fConst7 * (fSlow21 + 1200.0))));
		let mut fSlow29: f32 = (self.fConst28 * f32::cos((self.fConst7 * (fSlow21 + 1400.0))));
		let mut fSlow30: f32 = (self.fConst31 * f32::cos((self.fConst7 * (fSlow21 + 1600.0))));
		let mut fSlow31: f32 = (self.fConst34 * f32::cos((self.fConst7 * (fSlow21 + 1800.0))));
		let mut fSlow32: f32 = (self.fConst37 * f32::cos((self.fConst7 * (fSlow21 + 2000.0))));
		let mut fSlow33: f32 = (self.fConst40 * f32::cos((self.fConst7 * (fSlow21 + 2200.0))));
		let mut fSlow34: f32 = (self.fConst43 * f32::cos((self.fConst7 * (fSlow21 + 2400.0))));
		let mut fSlow35: f32 = (self.fConst46 * f32::cos((self.fConst7 * (fSlow21 + 2600.0))));
		let mut fSlow36: f32 = (self.fConst49 * f32::cos((self.fConst7 * (fSlow21 + 2800.0))));
		let mut fSlow37: f32 = (self.fConst52 * f32::cos((self.fConst7 * (fSlow21 + 3000.0))));
		let mut fSlow38: f32 = (self.fConst55 * f32::cos((self.fConst7 * (fSlow21 + 3200.0))));
		let mut fSlow39: f32 = (self.fConst58 * f32::cos((self.fConst7 * (fSlow21 + 3400.0))));
		let mut fSlow40: f32 = (self.fConst61 * f32::cos((self.fConst7 * (fSlow21 + 3600.0))));
		let mut fSlow41: f32 = (self.fConst64 * f32::cos((self.fConst7 * (fSlow21 + 3800.0))));
		let mut i: i32 = 0;
		loop {
			self.iRec3[0] = ((1103515245 * self.iRec3[1]) + 12345);
			self.fRec2[0] = ((4.65661287e-10 * (self.iRec3[0] as f32)) - (fSlow8 * ((fSlow10 * self.fRec2[2]) + (fSlow11 * self.fRec2[1]))));
			self.fRec1[0] = ((fSlow8 * (((fSlow9 * self.fRec2[0]) + (fSlow12 * self.fRec2[1])) + (fSlow9 * self.fRec2[2]))) - (fSlow13 * ((fSlow14 * self.fRec1[1]) + (fSlow15 * self.fRec1[2]))));
			self.fVec0[0] = fSlow16;
			self.fVec1[0] = fSlow17;
			self.fRec4[0] = if ((((((fSlow16 - self.fVec0[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(fSlow18, ((self.fRec4[1] + (self.fConst2 * (fSlow17 - self.fVec1[1]))) + 1.0)) };
			let mut iTemp0: i32 = ((self.fRec4[0] < fSlow19) as i32);
			let mut fTemp1: f32 = (fSlow5 * ((self.fRec1[2] + (self.fRec1[0] + (2.0 * self.fRec1[1]))) * if (iTemp0 as i32 == 1) { if (((self.fRec4[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp0 as i32 == 1) { (fSlow20 * self.fRec4[0]) } else { 1.0 } } } else { if (((self.fRec4[0] < fSlow18) as i32) as i32 == 1) { ((fSlow20 * (0.0 - (self.fRec4[0] - fSlow19))) + 1.0) } else { 0.0 } }));
			self.fRec0[0] = (fTemp1 - ((fSlow22 * self.fRec0[1]) + (self.fConst8 * self.fRec0[2])));
			self.fRec5[0] = (fTemp1 - ((fSlow23 * self.fRec5[1]) + (self.fConst11 * self.fRec5[2])));
			self.fRec6[0] = (fTemp1 - ((fSlow24 * self.fRec6[1]) + (self.fConst14 * self.fRec6[2])));
			self.fRec7[0] = (fTemp1 - ((fSlow25 * self.fRec7[1]) + (self.fConst17 * self.fRec7[2])));
			self.fRec8[0] = (fTemp1 - ((fSlow26 * self.fRec8[1]) + (self.fConst20 * self.fRec8[2])));
			self.fRec9[0] = (fTemp1 - ((fSlow27 * self.fRec9[1]) + (self.fConst23 * self.fRec9[2])));
			self.fRec10[0] = (fTemp1 - ((fSlow28 * self.fRec10[1]) + (self.fConst26 * self.fRec10[2])));
			self.fRec11[0] = (fTemp1 - ((fSlow29 * self.fRec11[1]) + (self.fConst29 * self.fRec11[2])));
			self.fRec12[0] = (fTemp1 - ((fSlow30 * self.fRec12[1]) + (self.fConst32 * self.fRec12[2])));
			self.fRec13[0] = (fTemp1 - ((fSlow31 * self.fRec13[1]) + (self.fConst35 * self.fRec13[2])));
			self.fRec14[0] = (fTemp1 - ((fSlow32 * self.fRec14[1]) + (self.fConst38 * self.fRec14[2])));
			self.fRec15[0] = (fTemp1 - ((fSlow33 * self.fRec15[1]) + (self.fConst41 * self.fRec15[2])));
			self.fRec16[0] = (fTemp1 - ((fSlow34 * self.fRec16[1]) + (self.fConst44 * self.fRec16[2])));
			self.fRec17[0] = (fTemp1 - ((fSlow35 * self.fRec17[1]) + (self.fConst47 * self.fRec17[2])));
			self.fRec18[0] = (fTemp1 - ((fSlow36 * self.fRec18[1]) + (self.fConst50 * self.fRec18[2])));
			self.fRec19[0] = (fTemp1 - ((fSlow37 * self.fRec19[1]) + (self.fConst53 * self.fRec19[2])));
			self.fRec20[0] = (fTemp1 - ((fSlow38 * self.fRec20[1]) + (self.fConst56 * self.fRec20[2])));
			self.fRec21[0] = (fTemp1 - ((fSlow39 * self.fRec21[1]) + (self.fConst59 * self.fRec21[2])));
			self.fRec22[0] = (fTemp1 - ((fSlow40 * self.fRec22[1]) + (self.fConst62 * self.fRec22[2])));
			self.fRec23[0] = (fTemp1 - ((fSlow41 * self.fRec23[1]) + (self.fConst65 * self.fRec23[2])));
			let mut fTemp2: f32 = (fSlow0 * ((((((((((((((((((((self.fRec0[0] + (0.25 * (self.fRec5[0] - self.fRec5[2]))) + (0.111111112 * (self.fRec6[0] - self.fRec6[2]))) + (0.0625 * (self.fRec7[0] - self.fRec7[2]))) + (0.0399999991 * (self.fRec8[0] - self.fRec8[2]))) + (0.027777778 * (self.fRec9[0] - self.fRec9[2]))) + (0.0204081628 * (self.fRec10[0] - self.fRec10[2]))) + (0.015625 * (self.fRec11[0] - self.fRec11[2]))) + (0.0123456791 * (self.fRec12[0] - self.fRec12[2]))) + (0.00999999978 * (self.fRec13[0] - self.fRec13[2]))) + (0.00826446246 * (self.fRec14[0] - self.fRec14[2]))) + (0.0069444445 * (self.fRec15[0] - self.fRec15[2]))) + (0.00591715984 * (self.fRec16[0] - self.fRec16[2]))) + (0.00510204071 * (self.fRec17[0] - self.fRec17[2]))) + (0.00444444455 * (self.fRec18[0] - self.fRec18[2]))) + (0.00390625 * (self.fRec19[0] - self.fRec19[2]))) + (0.00346020772 * (self.fRec20[0] - self.fRec20[2]))) + (0.00308641978 * (self.fRec21[0] - self.fRec21[2]))) + (0.00277008303 * (self.fRec22[0] - self.fRec22[2]))) + (0.00249999994 * (self.fRec23[0] - self.fRec23[2]))) - self.fRec0[2]));
			outputs[0][i as usize] = (fTemp2 as f32);
			outputs[1][i as usize] = (fTemp2 as f32);
			self.iRec3[1] = self.iRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fVec0[1] = self.fVec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[2] = self.fRec5[1];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[2] = self.fRec6[1];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[2] = self.fRec7[1];
			self.fRec7[1] = self.fRec7[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[2] = self.fRec15[1];
			self.fRec15[1] = self.fRec15[0];
			self.fRec16[2] = self.fRec16[1];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[2] = self.fRec23[1];
			self.fRec23[1] = self.fRec23[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

