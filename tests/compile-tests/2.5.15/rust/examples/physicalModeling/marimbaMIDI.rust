
static fmydspSIG0Wave0: [f32;250] = [1.0,0.776724994,0.625723004,0.855223,0.760159016,0.69837302,0.768010974,0.64112699,0.244034007,0.707754016,0.634012997,0.247527003,0.660848975,0.450396001,0.567782998,0.106361002,0.716813982,0.663919985,0.291207999,0.310598999,0.801495016,0.635291994,0.307435006,0.874123991,0.497667998,0.487087995,0.459114999,0.733455002,0.541818023,0.441318005,0.313919991,0.40309,0.685352981,0.603139997,0.400552005,0.453511,0.634386003,0.291547,0.131604999,0.368506998,0.839906991,0.602159977,0.288296014,0.579670012,0.0242493004,0.262746006,0.368588001,0.890284002,0.408962995,0.556071997,0.884427011,0.832109988,0.612015009,0.757175982,0.919476986,1.0,0.827962995,0.89240998,0.0357408002,0.480789006,0.75287199,0.0546301007,0.235936999,0.362937987,0.444471985,0.101751,0.703418016,0.453135997,0.316628993,0.490393996,0.982508004,0.551621974,0.602008998,0.666957021,0.776830018,0.905662,0.0987197012,0.402967989,0.829451978,0.307644993,0.640479982,0.983971,0.584204972,0.650364995,0.334446996,0.583570004,0.540190995,0.672533989,0.245711997,0.687298,0.883058012,0.792949975,0.600619018,0.572682023,0.122612,0.388247997,0.290657997,0.380255014,0.290966988,0.567818999,0.0737721026,0.42098999,0.0786577985,0.393994987,0.268983006,0.260614008,0.494085997,0.238025993,0.0987823978,0.277879,0.440562993,0.0770211965,0.450590998,0.128137007,0.0368275009,0.128699005,0.329605013,0.374511987,0.363590002,0.272594005,0.379052013,0.305240989,0.0741128996,0.34572801,0.299349993,0.221284002,0.0261390992,0.293202013,0.361885011,0.114330001,0.239004999,0.434156001,0.329582989,0.219459996,0.284175009,0.198554993,0.431975991,0.302985013,1.0,0.146220997,0.140700996,0.264243007,0.185996994,0.426322013,0.304780006,0.343989998,0.195429996,0.386954993,0.187600002,0.172812,0.0434115008,0.303761005,0.0694539994,0.453943014,0.832450986,0.317817003,0.940600991,1.0,0.180657998,0.737921,0.832297027,0.402352005,0.126785994,0.594398022,0.485455006,0.324470013,0.365101993,0.777921975,0.588271976,0.401353002,0.610734999,0.158693001,0.0746072009,0.825098991,0.925459027,0.65377003,0.260791987,0.719384015,0.559907973,0.372590005,0.360035002,0.622938991,0.210271001,0.444595009,0.311286002,0.464309007,0.557231009,0.524079978,0.0701055974,0.320749015,0.194460005,0.727608979,0.522062004,0.394003987,0.235035002,0.395646006,0.494796008,0.51731801,0.109751999,0.69284898,0.00632009003,0.0207582992,0.00306107011,0.0637191013,0.0816610008,0.0351100005,0.127813995,0.202294007,0.0764145032,0.263126999,0.400198996,0.267277986,0.633385003,1.0,0.73990202,0.413762987,0.418110013,0.612715006,0.67237401,0.339673996,0.211720005,0.459645003,0.102499999,0.325890005,0.148154005,0.265442014,0.0974304974,0.286437988,0.275213003,0.109111004,0.575088978,0.370283008,0.29411,0.259826005,0.0648718998,0.583418012,0.282662988,0.182004005,0.117421001,0.417726994,0.169650003,0.24853,0.122818999,0.185486004,0.0433618017,0.373849005,0.25276801,0.195103005,0.0927835032,0.166543007];


pub struct mydspSIG0 {
	
	fmydspSIG0Wave0_idx: i32,
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		self.fmydspSIG0Wave0_idx = 0;
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			output[i as usize] = fmydspSIG0Wave0[self.fmydspSIG0Wave0_idx as usize];
			self.fmydspSIG0Wave0_idx = ((1 + self.fmydspSIG0Wave0_idx) % 250);
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		fmydspSIG0Wave0_idx: 0,
	}
}
static ftbl0mydspSIG0: [f32;250][0.0;250],;
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iRec2: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider1: f32,
	fRec9: [f32;2],
	IOTA: i32,
	fVec0: [f32;2048],
	fConst2: f32,
	fRec6: [f32;2],
	fRec10: [f32;2],
	fConst3: f32,
	fEntry0: f32,
	fHslider2: f32,
	fConst4: f32,
	fHslider3: f32,
	fConst5: f32,
	fConst6: f32,
	fConst7: f32,
	fConst8: f32,
	iRec14: [i32;2],
	fConst9: f32,
	fConst10: f32,
	fRec13: [f32;3],
	fConst11: f32,
	fRec12: [f32;3],
	fButton0: f32,
	fVec1: [f32;2],
	fConst12: f32,
	fHslider4: f32,
	fVec2: [f32;2],
	fRec15: [f32;2],
	fConst13: f32,
	fConst14: f32,
	fConst15: f32,
	fConst16: f32,
	fConst17: f32,
	fConst18: f32,
	fRec11: [f32;3],
	fConst19: f32,
	fConst20: f32,
	fConst21: f32,
	fConst22: f32,
	fRec16: [f32;3],
	fConst23: f32,
	fConst24: f32,
	fConst25: f32,
	fConst26: f32,
	fRec17: [f32;3],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fConst30: f32,
	fRec18: [f32;3],
	fConst31: f32,
	fConst32: f32,
	fConst33: f32,
	fConst34: f32,
	fRec19: [f32;3],
	fConst35: f32,
	fConst36: f32,
	fConst37: f32,
	fConst38: f32,
	fRec20: [f32;3],
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fConst42: f32,
	fRec21: [f32;3],
	fConst43: f32,
	fConst44: f32,
	fConst45: f32,
	fConst46: f32,
	fRec22: [f32;3],
	fConst47: f32,
	fConst48: f32,
	fConst49: f32,
	fConst50: f32,
	fRec23: [f32;3],
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fConst54: f32,
	fRec24: [f32;3],
	fConst55: f32,
	fConst56: f32,
	fConst57: f32,
	fConst58: f32,
	fRec25: [f32;3],
	fConst59: f32,
	fConst60: f32,
	fConst61: f32,
	fConst62: f32,
	fRec26: [f32;3],
	fConst63: f32,
	fConst64: f32,
	fConst65: f32,
	fConst66: f32,
	fRec27: [f32;3],
	fConst67: f32,
	fConst68: f32,
	fConst69: f32,
	fConst70: f32,
	fRec28: [f32;3],
	fConst71: f32,
	fConst72: f32,
	fConst73: f32,
	fConst74: f32,
	fRec29: [f32;3],
	fConst75: f32,
	fConst76: f32,
	fConst77: f32,
	fConst78: f32,
	fRec30: [f32;3],
	fConst79: f32,
	fConst80: f32,
	fConst81: f32,
	fConst82: f32,
	fRec31: [f32;3],
	fConst83: f32,
	fConst84: f32,
	fConst85: f32,
	fConst86: f32,
	fRec32: [f32;3],
	fConst87: f32,
	fConst88: f32,
	fConst89: f32,
	fConst90: f32,
	fRec33: [f32;3],
	fConst91: f32,
	fConst92: f32,
	fConst93: f32,
	fConst94: f32,
	fRec34: [f32;3],
	fConst95: f32,
	fConst96: f32,
	fConst97: f32,
	fConst98: f32,
	fRec35: [f32;3],
	fConst99: f32,
	fConst100: f32,
	fConst101: f32,
	fConst102: f32,
	fRec36: [f32;3],
	fConst103: f32,
	fConst104: f32,
	fConst105: f32,
	fConst106: f32,
	fRec37: [f32;3],
	fConst107: f32,
	fConst108: f32,
	fConst109: f32,
	fConst110: f32,
	fRec38: [f32;3],
	fConst111: f32,
	fConst112: f32,
	fConst113: f32,
	fConst114: f32,
	fRec39: [f32;3],
	fConst115: f32,
	fConst116: f32,
	fConst117: f32,
	fConst118: f32,
	fRec40: [f32;3],
	fConst119: f32,
	fConst120: f32,
	fConst121: f32,
	fConst122: f32,
	fRec41: [f32;3],
	fConst123: f32,
	fConst124: f32,
	fConst125: f32,
	fConst126: f32,
	fRec42: [f32;3],
	fConst127: f32,
	fConst128: f32,
	fConst129: f32,
	fConst130: f32,
	fRec43: [f32;3],
	fConst131: f32,
	fConst132: f32,
	fConst133: f32,
	fConst134: f32,
	fRec44: [f32;3],
	fConst135: f32,
	fConst136: f32,
	fConst137: f32,
	fConst138: f32,
	fRec45: [f32;3],
	fConst139: f32,
	fConst140: f32,
	fConst141: f32,
	fConst142: f32,
	fRec46: [f32;3],
	fConst143: f32,
	fConst144: f32,
	fConst145: f32,
	fConst146: f32,
	fRec47: [f32;3],
	fConst147: f32,
	fConst148: f32,
	fConst149: f32,
	fConst150: f32,
	fRec48: [f32;3],
	fConst151: f32,
	fConst152: f32,
	fConst153: f32,
	fConst154: f32,
	fRec49: [f32;3],
	fConst155: f32,
	fConst156: f32,
	fConst157: f32,
	fConst158: f32,
	fRec50: [f32;3],
	fConst159: f32,
	fConst160: f32,
	fConst161: f32,
	fConst162: f32,
	fRec51: [f32;3],
	fConst163: f32,
	fConst164: f32,
	fConst165: f32,
	fConst166: f32,
	fRec52: [f32;3],
	fConst167: f32,
	fConst168: f32,
	fConst169: f32,
	fConst170: f32,
	fRec53: [f32;3],
	fConst171: f32,
	fConst172: f32,
	fConst173: f32,
	fConst174: f32,
	fRec54: [f32;3],
	fConst175: f32,
	fConst176: f32,
	fConst177: f32,
	fConst178: f32,
	fRec55: [f32;3],
	fConst179: f32,
	fConst180: f32,
	fConst181: f32,
	fConst182: f32,
	fRec56: [f32;3],
	fConst183: f32,
	fConst184: f32,
	fConst185: f32,
	fConst186: f32,
	fRec57: [f32;3],
	fConst187: f32,
	fConst188: f32,
	fConst189: f32,
	fConst190: f32,
	fRec58: [f32;3],
	fConst191: f32,
	fConst192: f32,
	fConst193: f32,
	fConst194: f32,
	fRec59: [f32;3],
	fConst195: f32,
	fConst196: f32,
	fConst197: f32,
	fConst198: f32,
	fRec60: [f32;3],
	fConst199: f32,
	fConst200: f32,
	fConst201: f32,
	fConst202: f32,
	fRec61: [f32;3],
	fConst203: f32,
	fConst204: f32,
	fConst205: f32,
	fConst206: f32,
	fRec62: [f32;3],
	fConst207: f32,
	fConst208: f32,
	fConst209: f32,
	fConst210: f32,
	fRec63: [f32;3],
	fConst211: f32,
	fConst212: f32,
	fConst213: f32,
	fConst214: f32,
	fRec64: [f32;3],
	fVec3: [f32;2],
	fVec4: [f32;2048],
	fRec7: [f32;2],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iRec2: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			fRec9: [0.0;2],
			IOTA: 0,
			fVec0: [0.0;2048],
			fConst2: 0.0,
			fRec6: [0.0;2],
			fRec10: [0.0;2],
			fConst3: 0.0,
			fEntry0: 0.0,
			fHslider2: 0.0,
			fConst4: 0.0,
			fHslider3: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			fConst7: 0.0,
			fConst8: 0.0,
			iRec14: [0;2],
			fConst9: 0.0,
			fConst10: 0.0,
			fRec13: [0.0;3],
			fConst11: 0.0,
			fRec12: [0.0;3],
			fButton0: 0.0,
			fVec1: [0.0;2],
			fConst12: 0.0,
			fHslider4: 0.0,
			fVec2: [0.0;2],
			fRec15: [0.0;2],
			fConst13: 0.0,
			fConst14: 0.0,
			fConst15: 0.0,
			fConst16: 0.0,
			fConst17: 0.0,
			fConst18: 0.0,
			fRec11: [0.0;3],
			fConst19: 0.0,
			fConst20: 0.0,
			fConst21: 0.0,
			fConst22: 0.0,
			fRec16: [0.0;3],
			fConst23: 0.0,
			fConst24: 0.0,
			fConst25: 0.0,
			fConst26: 0.0,
			fRec17: [0.0;3],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fConst30: 0.0,
			fRec18: [0.0;3],
			fConst31: 0.0,
			fConst32: 0.0,
			fConst33: 0.0,
			fConst34: 0.0,
			fRec19: [0.0;3],
			fConst35: 0.0,
			fConst36: 0.0,
			fConst37: 0.0,
			fConst38: 0.0,
			fRec20: [0.0;3],
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fConst42: 0.0,
			fRec21: [0.0;3],
			fConst43: 0.0,
			fConst44: 0.0,
			fConst45: 0.0,
			fConst46: 0.0,
			fRec22: [0.0;3],
			fConst47: 0.0,
			fConst48: 0.0,
			fConst49: 0.0,
			fConst50: 0.0,
			fRec23: [0.0;3],
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fConst54: 0.0,
			fRec24: [0.0;3],
			fConst55: 0.0,
			fConst56: 0.0,
			fConst57: 0.0,
			fConst58: 0.0,
			fRec25: [0.0;3],
			fConst59: 0.0,
			fConst60: 0.0,
			fConst61: 0.0,
			fConst62: 0.0,
			fRec26: [0.0;3],
			fConst63: 0.0,
			fConst64: 0.0,
			fConst65: 0.0,
			fConst66: 0.0,
			fRec27: [0.0;3],
			fConst67: 0.0,
			fConst68: 0.0,
			fConst69: 0.0,
			fConst70: 0.0,
			fRec28: [0.0;3],
			fConst71: 0.0,
			fConst72: 0.0,
			fConst73: 0.0,
			fConst74: 0.0,
			fRec29: [0.0;3],
			fConst75: 0.0,
			fConst76: 0.0,
			fConst77: 0.0,
			fConst78: 0.0,
			fRec30: [0.0;3],
			fConst79: 0.0,
			fConst80: 0.0,
			fConst81: 0.0,
			fConst82: 0.0,
			fRec31: [0.0;3],
			fConst83: 0.0,
			fConst84: 0.0,
			fConst85: 0.0,
			fConst86: 0.0,
			fRec32: [0.0;3],
			fConst87: 0.0,
			fConst88: 0.0,
			fConst89: 0.0,
			fConst90: 0.0,
			fRec33: [0.0;3],
			fConst91: 0.0,
			fConst92: 0.0,
			fConst93: 0.0,
			fConst94: 0.0,
			fRec34: [0.0;3],
			fConst95: 0.0,
			fConst96: 0.0,
			fConst97: 0.0,
			fConst98: 0.0,
			fRec35: [0.0;3],
			fConst99: 0.0,
			fConst100: 0.0,
			fConst101: 0.0,
			fConst102: 0.0,
			fRec36: [0.0;3],
			fConst103: 0.0,
			fConst104: 0.0,
			fConst105: 0.0,
			fConst106: 0.0,
			fRec37: [0.0;3],
			fConst107: 0.0,
			fConst108: 0.0,
			fConst109: 0.0,
			fConst110: 0.0,
			fRec38: [0.0;3],
			fConst111: 0.0,
			fConst112: 0.0,
			fConst113: 0.0,
			fConst114: 0.0,
			fRec39: [0.0;3],
			fConst115: 0.0,
			fConst116: 0.0,
			fConst117: 0.0,
			fConst118: 0.0,
			fRec40: [0.0;3],
			fConst119: 0.0,
			fConst120: 0.0,
			fConst121: 0.0,
			fConst122: 0.0,
			fRec41: [0.0;3],
			fConst123: 0.0,
			fConst124: 0.0,
			fConst125: 0.0,
			fConst126: 0.0,
			fRec42: [0.0;3],
			fConst127: 0.0,
			fConst128: 0.0,
			fConst129: 0.0,
			fConst130: 0.0,
			fRec43: [0.0;3],
			fConst131: 0.0,
			fConst132: 0.0,
			fConst133: 0.0,
			fConst134: 0.0,
			fRec44: [0.0;3],
			fConst135: 0.0,
			fConst136: 0.0,
			fConst137: 0.0,
			fConst138: 0.0,
			fRec45: [0.0;3],
			fConst139: 0.0,
			fConst140: 0.0,
			fConst141: 0.0,
			fConst142: 0.0,
			fRec46: [0.0;3],
			fConst143: 0.0,
			fConst144: 0.0,
			fConst145: 0.0,
			fConst146: 0.0,
			fRec47: [0.0;3],
			fConst147: 0.0,
			fConst148: 0.0,
			fConst149: 0.0,
			fConst150: 0.0,
			fRec48: [0.0;3],
			fConst151: 0.0,
			fConst152: 0.0,
			fConst153: 0.0,
			fConst154: 0.0,
			fRec49: [0.0;3],
			fConst155: 0.0,
			fConst156: 0.0,
			fConst157: 0.0,
			fConst158: 0.0,
			fRec50: [0.0;3],
			fConst159: 0.0,
			fConst160: 0.0,
			fConst161: 0.0,
			fConst162: 0.0,
			fRec51: [0.0;3],
			fConst163: 0.0,
			fConst164: 0.0,
			fConst165: 0.0,
			fConst166: 0.0,
			fRec52: [0.0;3],
			fConst167: 0.0,
			fConst168: 0.0,
			fConst169: 0.0,
			fConst170: 0.0,
			fRec53: [0.0;3],
			fConst171: 0.0,
			fConst172: 0.0,
			fConst173: 0.0,
			fConst174: 0.0,
			fRec54: [0.0;3],
			fConst175: 0.0,
			fConst176: 0.0,
			fConst177: 0.0,
			fConst178: 0.0,
			fRec55: [0.0;3],
			fConst179: 0.0,
			fConst180: 0.0,
			fConst181: 0.0,
			fConst182: 0.0,
			fRec56: [0.0;3],
			fConst183: 0.0,
			fConst184: 0.0,
			fConst185: 0.0,
			fConst186: 0.0,
			fRec57: [0.0;3],
			fConst187: 0.0,
			fConst188: 0.0,
			fConst189: 0.0,
			fConst190: 0.0,
			fRec58: [0.0;3],
			fConst191: 0.0,
			fConst192: 0.0,
			fConst193: 0.0,
			fConst194: 0.0,
			fRec59: [0.0;3],
			fConst195: 0.0,
			fConst196: 0.0,
			fConst197: 0.0,
			fConst198: 0.0,
			fRec60: [0.0;3],
			fConst199: 0.0,
			fConst200: 0.0,
			fConst201: 0.0,
			fConst202: 0.0,
			fRec61: [0.0;3],
			fConst203: 0.0,
			fConst204: 0.0,
			fConst205: 0.0,
			fConst206: 0.0,
			fRec62: [0.0;3],
			fConst207: 0.0,
			fConst208: 0.0,
			fConst209: 0.0,
			fConst210: 0.0,
			fRec63: [0.0;3],
			fConst211: 0.0,
			fConst212: 0.0,
			fConst213: 0.0,
			fConst214: 0.0,
			fRec64: [0.0;3],
			fVec3: [0.0;2],
			fVec4: [0.0;2048],
			fRec7: [0.0;2],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple MIDI-controllable marimba physical model.");
		m.declare("envelopes.lib/author", "GRAME");
		m.declare("envelopes.lib/copyright", "GRAME");
		m.declare("envelopes.lib/license", "LGPL with exception");
		m.declare("envelopes.lib/name", "Faust Envelope Library");
		m.declare("envelopes.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "MarimbaMIDI");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(250, &mut ftbl0mydspSIG0);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.800000012;
		self.fHslider1 = 440.0;
		self.fEntry0 = 0.0;
		self.fHslider2 = 1.0;
		self.fHslider3 = 6500.0;
		self.fButton0 = 0.0;
		self.fHslider4 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec2[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec9[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l2: i32 = 0;
		loop {
			self.fVec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2048) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec6[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec10[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.iRec14[l5 as usize] = 0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec13[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec12[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fVec1[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec2[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec15[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec11[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec16[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec17[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec18[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec19[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec20[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec21[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 3) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec22[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 3) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec23[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec24[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 3) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec25[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 3) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec26[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 3) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec27[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec28[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 3) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec29[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 3) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec30[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 3) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec31[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec32[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 3) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec33[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 3) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec34[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 3) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec35[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec36[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 3) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec37[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 3) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fRec38[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 3) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fRec39[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 3) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fRec40[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 3) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec41[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 3) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fRec42[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 3) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fRec43[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 3) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec44[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 3) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec45[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 3) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec46[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 3) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec47[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 3) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fRec48[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 3) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fRec49[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 3) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fRec50[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 3) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fRec51[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 3) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fRec52[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 3) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fRec53[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 3) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fRec54[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 3) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fRec55[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 3) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fRec56[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 3) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.fRec57[l53 as usize] = 0.0;
			l53 = (l53 + 1);
			if (l53 < 3) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec58[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 3) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec59[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 3) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec60[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 3) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec61[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 3) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec62[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 3) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec63[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 3) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fRec64[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 3) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fVec3[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fVec4[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 2048) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec7[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 2) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec0[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00147058826 * self.fConst0);
		self.fConst2 = (0.00882352982 * self.fConst0);
		self.fConst3 = ((0.5 * self.fConst0) + -1.0);
		self.fConst4 = (3.14159274 / self.fConst0);
		self.fConst5 = f32::tan((31.415926 / self.fConst0));
		self.fConst6 = (1.0 / self.fConst5);
		self.fConst7 = (1.0 / (((self.fConst6 + 1.41421354) / self.fConst5) + 1.0));
		self.fConst8 = (1.0 / mydsp_faustpower2_f(self.fConst5));
		self.fConst9 = (((self.fConst6 + -1.41421354) / self.fConst5) + 1.0);
		self.fConst10 = (2.0 * (1.0 - self.fConst8));
		self.fConst11 = (2.0 * (0.0 - self.fConst8));
		self.fConst12 = (0.00400000019 * self.fConst0);
		self.fConst13 = (0.00200000009 * self.fConst0);
		self.fConst14 = (500.0 / self.fConst0);
		self.fConst15 = f32::powf(0.00100000005, (1.0 / (0.0974743068 * self.fConst0)));
		self.fConst16 = (0.0 - (2.0 * self.fConst15));
		self.fConst17 = (6.28318548 / self.fConst0);
		self.fConst18 = mydsp_faustpower2_f(self.fConst15);
		self.fConst19 = f32::powf(0.00100000005, (1.0 / (0.0918262452 * self.fConst0)));
		self.fConst20 = (0.0 - (2.0 * self.fConst19));
		self.fConst21 = (20.8197117 / self.fConst0);
		self.fConst22 = mydsp_faustpower2_f(self.fConst19);
		self.fConst23 = f32::powf(0.00100000005, (1.0 / (0.0905909166 * self.fConst0)));
		self.fConst24 = (0.0 - (2.0 * self.fConst23));
		self.fConst25 = (24.0940685 / self.fConst0);
		self.fConst26 = mydsp_faustpower2_f(self.fConst23);
		self.fConst27 = f32::powf(0.00100000005, (1.0 / (0.0810509697 * self.fConst0)));
		self.fConst28 = (0.0 - (2.0 * self.fConst27));
		self.fConst29 = (50.6621399 / self.fConst0);
		self.fConst30 = mydsp_faustpower2_f(self.fConst27);
		self.fConst31 = f32::powf(0.00100000005, (1.0 / (0.0781081766 * self.fConst0)));
		self.fConst32 = (0.0 - (2.0 * self.fConst31));
		self.fConst33 = (59.3621521 / self.fConst0);
		self.fConst34 = mydsp_faustpower2_f(self.fConst31);
		self.fConst35 = f32::powf(0.00100000005, (1.0 / (0.0688085929 * self.fConst0)));
		self.fConst36 = (0.0 - (2.0 * self.fConst35));
		self.fConst37 = (88.6990967 / self.fConst0);
		self.fConst38 = mydsp_faustpower2_f(self.fConst35);
		self.fConst39 = f32::powf(0.00100000005, (1.0 / (0.0611052401 * self.fConst0)));
		self.fConst40 = (0.0 - (2.0 * self.fConst39));
		self.fConst41 = (115.510078 / self.fConst0);
		self.fConst42 = mydsp_faustpower2_f(self.fConst39);
		self.fConst43 = f32::powf(0.00100000005, (1.0 / (0.0567183308 * self.fConst0)));
		self.fConst44 = (0.0 - (2.0 * self.fConst43));
		self.fConst45 = (132.010986 / self.fConst0);
		self.fConst46 = mydsp_faustpower2_f(self.fConst43);
		self.fConst47 = f32::powf(0.00100000005, (1.0 / (0.0488223769 * self.fConst0)));
		self.fConst48 = (0.0 - (2.0 * self.fConst47));
		self.fConst49 = (164.478088 / self.fConst0);
		self.fConst50 = mydsp_faustpower2_f(self.fConst47);
		self.fConst51 = f32::powf(0.00100000005, (1.0 / (0.0449043326 * self.fConst0)));
		self.fConst52 = (0.0 - (2.0 * self.fConst51));
		self.fConst53 = (182.177185 / self.fConst0);
		self.fConst54 = mydsp_faustpower2_f(self.fConst51);
		self.fConst55 = f32::powf(0.00100000005, (1.0 / (0.0350424498 * self.fConst0)));
		self.fConst56 = (0.0 - (2.0 * self.fConst55));
		self.fConst57 = (232.935272 / self.fConst0);
		self.fConst58 = mydsp_faustpower2_f(self.fConst55);
		self.fConst59 = f32::powf(0.00100000005, (1.0 / (0.0341717675 * self.fConst0)));
		self.fConst60 = (0.0 - (2.0 * self.fConst59));
		self.fConst61 = (237.946106 / self.fConst0);
		self.fConst62 = mydsp_faustpower2_f(self.fConst59);
		self.fConst63 = f32::powf(0.00100000005, (1.0 / (0.031866312 * self.fConst0)));
		self.fConst64 = (0.0 - (2.0 * self.fConst63));
		self.fConst65 = (251.725769 / self.fConst0);
		self.fConst66 = mydsp_faustpower2_f(self.fConst63);
		self.fConst67 = f32::powf(0.00100000005, (1.0 / (0.0248362795 * self.fConst0)));
		self.fConst68 = (0.0 - (2.0 * self.fConst67));
		self.fConst69 = (299.355438 / self.fConst0);
		self.fConst70 = mydsp_faustpower2_f(self.fConst67);
		self.fConst71 = f32::powf(0.00100000005, (1.0 / (0.0221360233 * self.fConst0)));
		self.fConst72 = (0.0 - (2.0 * self.fConst71));
		self.fConst73 = (320.561829 / self.fConst0);
		self.fConst74 = mydsp_faustpower2_f(self.fConst71);
		self.fConst75 = f32::powf(0.00100000005, (1.0 / (0.0210792925 * self.fConst0)));
		self.fConst76 = (0.0 - (2.0 * self.fConst75));
		self.fConst77 = (329.427399 / self.fConst0);
		self.fConst78 = mydsp_faustpower2_f(self.fConst75);
		self.fConst79 = f32::powf(0.00100000005, (1.0 / (0.0171158724 * self.fConst0)));
		self.fConst80 = (0.0 - (2.0 * self.fConst79));
		self.fConst81 = (366.221741 / self.fConst0);
		self.fConst82 = mydsp_faustpower2_f(self.fConst79);
		self.fConst83 = f32::powf(0.00100000005, (1.0 / (0.0140852043 * self.fConst0)));
		self.fConst84 = (0.0 - (2.0 * self.fConst83));
		self.fConst85 = (399.287628 / self.fConst0);
		self.fConst86 = mydsp_faustpower2_f(self.fConst83);
		self.fConst87 = f32::powf(0.00100000005, (1.0 / (0.0131463278 * self.fConst0)));
		self.fConst88 = (0.0 - (2.0 * self.fConst87));
		self.fConst89 = (410.686584 / self.fConst0);
		self.fConst90 = mydsp_faustpower2_f(self.fConst87);
		self.fConst91 = f32::powf(0.00100000005, (1.0 / (0.0123624494 * self.fConst0)));
		self.fConst92 = (0.0 - (2.0 * self.fConst91));
		self.fConst93 = (420.713928 / self.fConst0);
		self.fConst94 = mydsp_faustpower2_f(self.fConst91);
		self.fConst95 = f32::powf(0.00100000005, (1.0 / (0.00913601927 * self.fConst0)));
		self.fConst96 = (0.0 - (2.0 * self.fConst95));
		self.fConst97 = (468.286438 / self.fConst0);
		self.fConst98 = mydsp_faustpower2_f(self.fConst95);
		self.fConst99 = f32::powf(0.00100000005, (1.0 / (0.00767402584 * self.fConst0)));
		self.fConst100 = (0.0 - (2.0 * self.fConst99));
		self.fConst101 = (494.436432 / self.fConst0);
		self.fConst102 = mydsp_faustpower2_f(self.fConst99);
		self.fConst103 = f32::powf(0.00100000005, (1.0 / (0.00699721137 * self.fConst0)));
		self.fConst104 = (0.0 - (2.0 * self.fConst103));
		self.fConst105 = (507.916992 / self.fConst0);
		self.fConst106 = mydsp_faustpower2_f(self.fConst103);
		self.fConst107 = f32::powf(0.00100000005, (1.0 / (0.00462675327 * self.fConst0)));
		self.fConst108 = (0.0 - (2.0 * self.fConst107));
		self.fConst109 = (565.34845 / self.fConst0);
		self.fConst110 = mydsp_faustpower2_f(self.fConst107);
		self.fConst111 = f32::powf(0.00100000005, (1.0 / (0.00401024008 * self.fConst0)));
		self.fConst112 = (0.0 - (2.0 * self.fConst111));
		self.fConst113 = (584.12323 / self.fConst0);
		self.fConst114 = mydsp_faustpower2_f(self.fConst111);
		self.fConst115 = f32::powf(0.00100000005, (1.0 / (0.00359531236 * self.fConst0)));
		self.fConst116 = (0.0 - (2.0 * self.fConst115));
		self.fConst117 = (598.105225 / self.fConst0);
		self.fConst118 = mydsp_faustpower2_f(self.fConst115);
		self.fConst119 = f32::powf(0.00100000005, (1.0 / (0.00320503488 * self.fConst0)));
		self.fConst120 = (0.0 - (2.0 * self.fConst119));
		self.fConst121 = (612.489319 / self.fConst0);
		self.fConst122 = mydsp_faustpower2_f(self.fConst119);
		self.fConst123 = f32::powf(0.00100000005, (1.0 / (0.0015662252 * self.fConst0)));
		self.fConst124 = (0.0 - (2.0 * self.fConst123));
		self.fConst125 = (695.045959 / self.fConst0);
		self.fConst126 = mydsp_faustpower2_f(self.fConst123);
		self.fConst127 = f32::powf(0.00100000005, (1.0 / (0.00143769139 * self.fConst0)));
		self.fConst128 = (0.0 - (2.0 * self.fConst127));
		self.fConst129 = (704.150269 / self.fConst0);
		self.fConst130 = mydsp_faustpower2_f(self.fConst127);
		self.fConst131 = f32::powf(0.00100000005, (1.0 / (0.00129330496 * self.fConst0)));
		self.fConst132 = (0.0 - (2.0 * self.fConst131));
		self.fConst133 = (715.18988 / self.fConst0);
		self.fConst134 = mydsp_faustpower2_f(self.fConst131);
		self.fConst135 = f32::powf(0.00100000005, (1.0 / (0.000912711956 * self.fConst0)));
		self.fConst136 = (0.0 - (2.0 * self.fConst135));
		self.fConst137 = (749.935852 / self.fConst0);
		self.fConst138 = mydsp_faustpower2_f(self.fConst135);
		self.fConst139 = f32::powf(0.00100000005, (1.0 / (0.000537810789 * self.fConst0)));
		self.fConst140 = (0.0 - (2.0 * self.fConst139));
		self.fConst141 = (798.247253 / self.fConst0);
		self.fConst142 = mydsp_faustpower2_f(self.fConst139);
		self.fConst143 = f32::powf(0.00100000005, (1.0 / (0.000432563043 * self.fConst0)));
		self.fConst144 = (0.0 - (2.0 * self.fConst143));
		self.fConst145 = (816.700989 / self.fConst0);
		self.fConst146 = mydsp_faustpower2_f(self.fConst143);
		self.fConst147 = f32::powf(0.00100000005, (1.0 / (0.000362893392 * self.fConst0)));
		self.fConst148 = (0.0 - (2.0 * self.fConst147));
		self.fConst149 = (831.007812 / self.fConst0);
		self.fConst150 = mydsp_faustpower2_f(self.fConst147);
		self.fConst151 = f32::powf(0.00100000005, (1.0 / (0.000329498813 * self.fConst0)));
		self.fConst152 = (0.0 - (2.0 * self.fConst151));
		self.fConst153 = (838.660706 / self.fConst0);
		self.fConst154 = mydsp_faustpower2_f(self.fConst151);
		self.fConst155 = f32::powf(0.00100000005, (1.0 / (0.000124247395 * self.fConst0)));
		self.fConst156 = (0.0 - (2.0 * self.fConst155));
		self.fConst157 = (908.228149 / self.fConst0);
		self.fConst158 = mydsp_faustpower2_f(self.fConst155);
		self.fConst159 = f32::powf(0.00100000005, (1.0 / (7.53835775e-05 * self.fConst0)));
		self.fConst160 = (0.0 - (2.0 * self.fConst159));
		self.fConst161 = (938.946655 / self.fConst0);
		self.fConst162 = mydsp_faustpower2_f(self.fConst159);
		self.fConst163 = f32::powf(0.00100000005, (1.0 / (5.65755508e-05 * self.fConst0)));
		self.fConst164 = (0.0 - (2.0 * self.fConst163));
		self.fConst165 = (955.251526 / self.fConst0);
		self.fConst166 = mydsp_faustpower2_f(self.fConst163);
		self.fConst167 = f32::powf(0.00100000005, (1.0 / (4.96453904e-05 * self.fConst0)));
		self.fConst168 = (0.0 - (2.0 * self.fConst167));
		self.fConst169 = (962.370361 / self.fConst0);
		self.fConst170 = mydsp_faustpower2_f(self.fConst167);
		self.fConst171 = f32::powf(0.00100000005, (1.0 / (3.7056674e-05 * self.fConst0)));
		self.fConst172 = (0.0 - (2.0 * self.fConst171));
		self.fConst173 = (977.644775 / self.fConst0);
		self.fConst174 = mydsp_faustpower2_f(self.fConst171);
		self.fConst175 = f32::powf(0.00100000005, (1.0 / (2.66114275e-05 * self.fConst0)));
		self.fConst176 = (0.0 - (2.0 * self.fConst175));
		self.fConst177 = (993.893127 / self.fConst0);
		self.fConst178 = mydsp_faustpower2_f(self.fConst175);
		self.fConst179 = f32::powf(0.00100000005, (1.0 / (5.79888183e-06 * self.fConst0)));
		self.fConst180 = (0.0 - (2.0 * self.fConst179));
		self.fConst181 = (1056.23486 / self.fConst0);
		self.fConst182 = mydsp_faustpower2_f(self.fConst179);
		self.fConst183 = f32::powf(0.00100000005, (1.0 / (2.80919903e-06 * self.fConst0)));
		self.fConst184 = (0.0 - (2.0 * self.fConst183));
		self.fConst185 = (1079.84705 / self.fConst0);
		self.fConst186 = mydsp_faustpower2_f(self.fConst183);
		self.fConst187 = f32::powf(0.00100000005, (1.0 / (1.5867239e-06 * self.fConst0)));
		self.fConst188 = (0.0 - (2.0 * self.fConst187));
		self.fConst189 = (1096.1897 / self.fConst0);
		self.fConst190 = mydsp_faustpower2_f(self.fConst187);
		self.fConst191 = f32::powf(0.00100000005, (1.0 / (4.94038545e-07 * self.fConst0)));
		self.fConst192 = (0.0 - (2.0 * self.fConst191));
		self.fConst193 = (1124.29431 / self.fConst0);
		self.fConst194 = mydsp_faustpower2_f(self.fConst191);
		self.fConst195 = f32::powf(0.00100000005, (1.0 / (2.19791588e-07 * self.fConst0)));
		self.fConst196 = (0.0 - (2.0 * self.fConst195));
		self.fConst197 = (1140.28503 / self.fConst0);
		self.fConst198 = mydsp_faustpower2_f(self.fConst195);
		self.fConst199 = f32::powf(0.00100000005, (1.0 / (4.53858888e-08 * self.fConst0)));
		self.fConst200 = (0.0 - (2.0 * self.fConst199));
		self.fConst201 = (1164.89001 / self.fConst0);
		self.fConst202 = mydsp_faustpower2_f(self.fConst199);
		self.fConst203 = f32::powf(0.00100000005, (1.0 / (1.88244775e-09 * self.fConst0)));
		self.fConst204 = (0.0 - (2.0 * self.fConst203));
		self.fConst205 = (1196.12366 / self.fConst0);
		self.fConst206 = mydsp_faustpower2_f(self.fConst203);
		self.fConst207 = f32::powf(0.00100000005, (1.0 / (2.61844324e-10 * self.fConst0)));
		self.fConst208 = (0.0 - (2.0 * self.fConst207));
		self.fConst209 = (1207.56543 / self.fConst0);
		self.fConst210 = mydsp_faustpower2_f(self.fConst207);
		self.fConst211 = f32::powf(0.00100000005, (1.0 / (6.3867631e-15 * self.fConst0)));
		self.fConst212 = (0.0 - (2.0 * self.fConst211));
		self.fConst213 = (1228.39417 / self.fConst0);
		self.fConst214 = mydsp_faustpower2_f(self.fConst211);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("marimba");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider1, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "2", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider2, 1.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fEntry0, "0", "");
		ui_interface.declare(&mut self.fEntry0, "midi", "ctrl 1");
		ui_interface.addNumEntry("strikePosition", &mut self.fEntry0, 0.0, 0.0, 4.0, 1.0);
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("strikeCutOff", &mut self.fHslider3, 6500.0, 20.0, 20000.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.80000000000000004, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("strikeSharpness", &mut self.fHslider4, 0.5, 0.01, 5.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "3", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut fSlow2: f32 = (self.fConst1 * ((340.0 / fSlow1) + -0.0399999991));
		let mut fSlow3: f32 = (fSlow2 + -1.49999499);
		let mut fSlow4: f32 = f32::floor(fSlow3);
		let mut fSlow5: f32 = (fSlow2 + (-1.0 - fSlow4));
		let mut fSlow6: f32 = (fSlow2 + (-2.0 - fSlow4));
		let mut fSlow7: f32 = (fSlow2 + (-3.0 - fSlow4));
		let mut fSlow8: f32 = (fSlow2 + (-4.0 - fSlow4));
		let mut fSlow9: f32 = ((((0.0 - fSlow5) * (0.0 - (0.5 * fSlow6))) * (0.0 - (0.333333343 * fSlow7))) * (0.0 - (0.25 * fSlow8)));
		let mut iSlow10: i32 = (fSlow3 as i32);
		let mut iSlow11: i32 = (f32::min(self.fConst2, (std::cmp::max(0, iSlow10) as f32)) as i32);
		let mut fSlow12: f32 = (fSlow2 - fSlow4);
		let mut fSlow13: f32 = (((0.0 - fSlow6) * (0.0 - (0.5 * fSlow7))) * (0.0 - (0.333333343 * fSlow8)));
		let mut iSlow14: i32 = (f32::min(self.fConst2, (std::cmp::max(0, (iSlow10 + 1)) as f32)) as i32);
		let mut fSlow15: f32 = (0.5 * ((fSlow5 * (0.0 - fSlow7)) * (0.0 - (0.5 * fSlow8))));
		let mut iSlow16: i32 = (f32::min(self.fConst2, (std::cmp::max(0, (iSlow10 + 2)) as f32)) as i32);
		let mut fSlow17: f32 = (fSlow5 * fSlow6);
		let mut fSlow18: f32 = (0.166666672 * (fSlow17 * (0.0 - fSlow8)));
		let mut iSlow19: i32 = (f32::min(self.fConst2, (std::cmp::max(0, (iSlow10 + 3)) as f32)) as i32);
		let mut fSlow20: f32 = (0.0416666679 * (fSlow17 * fSlow7));
		let mut iSlow21: i32 = (f32::min(self.fConst2, (std::cmp::max(0, (iSlow10 + 4)) as f32)) as i32);
		let mut iSlow22: i32 = (50 * ((self.fEntry0 as f32) as i32));
		let mut fSlow23: f32 = if (((fSlow1 < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[iSlow22 as usize] } else { 0.0 };
		let mut fSlow24: f32 = f32::tan((self.fConst4 * (self.fHslider3 as f32)));
		let mut fSlow25: f32 = (1.0 / fSlow24);
		let mut fSlow26: f32 = (((fSlow25 + 1.41421354) / fSlow24) + 1.0);
		let mut fSlow27: f32 = ((self.fHslider2 as f32) / fSlow26);
		let mut fSlow28: f32 = (1.0 / fSlow26);
		let mut fSlow29: f32 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(fSlow24))));
		let mut fSlow30: f32 = (((fSlow25 + -1.41421354) / fSlow24) + 1.0);
		let mut fSlow31: f32 = (self.fButton0 as f32);
		let mut fSlow32: f32 = (self.fHslider4 as f32);
		let mut fSlow33: f32 = (self.fConst12 * fSlow32);
		let mut fSlow34: f32 = (self.fConst13 * fSlow32);
		let mut fSlow35: f32 = (self.fConst14 / fSlow32);
		let mut fSlow36: f32 = (self.fConst16 * f32::cos((self.fConst17 * fSlow1)));
		let mut fSlow37: f32 = if ((((3.31356001 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 1) as usize] } else { 0.0 };
		let mut fSlow38: f32 = (self.fConst20 * f32::cos((self.fConst21 * fSlow1)));
		let mut fSlow39: f32 = if ((((3.83469009 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 2) as usize] } else { 0.0 };
		let mut fSlow40: f32 = (self.fConst24 * f32::cos((self.fConst25 * fSlow1)));
		let mut fSlow41: f32 = if ((((8.06313038 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 3) as usize] } else { 0.0 };
		let mut fSlow42: f32 = (self.fConst28 * f32::cos((self.fConst29 * fSlow1)));
		let mut fSlow43: f32 = if ((((9.44777966 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 4) as usize] } else { 0.0 };
		let mut fSlow44: f32 = (self.fConst32 * f32::cos((self.fConst33 * fSlow1)));
		let mut fSlow45: f32 = if ((((14.1169004 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 5) as usize] } else { 0.0 };
		let mut fSlow46: f32 = (self.fConst36 * f32::cos((self.fConst37 * fSlow1)));
		let mut fSlow47: f32 = if ((((18.3840008 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 6) as usize] } else { 0.0 };
		let mut fSlow48: f32 = (self.fConst40 * f32::cos((self.fConst41 * fSlow1)));
		let mut fSlow49: f32 = if ((((21.0102005 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 7) as usize] } else { 0.0 };
		let mut fSlow50: f32 = (self.fConst44 * f32::cos((self.fConst45 * fSlow1)));
		let mut fSlow51: f32 = if ((((26.1774998 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 8) as usize] } else { 0.0 };
		let mut fSlow52: f32 = (self.fConst48 * f32::cos((self.fConst49 * fSlow1)));
		let mut fSlow53: f32 = if ((((28.9944 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 9) as usize] } else { 0.0 };
		let mut fSlow54: f32 = (self.fConst52 * f32::cos((self.fConst53 * fSlow1)));
		let mut fSlow55: f32 = if ((((37.0727997 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 10) as usize] } else { 0.0 };
		let mut fSlow56: f32 = (self.fConst56 * f32::cos((self.fConst57 * fSlow1)));
		let mut fSlow57: f32 = if ((((37.8703003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 11) as usize] } else { 0.0 };
		let mut fSlow58: f32 = (self.fConst60 * f32::cos((self.fConst61 * fSlow1)));
		let mut fSlow59: f32 = if ((((40.0634003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 12) as usize] } else { 0.0 };
		let mut fSlow60: f32 = (self.fConst64 * f32::cos((self.fConst65 * fSlow1)));
		let mut fSlow61: f32 = if ((((47.6439018 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 13) as usize] } else { 0.0 };
		let mut fSlow62: f32 = (self.fConst68 * f32::cos((self.fConst69 * fSlow1)));
		let mut fSlow63: f32 = if ((((51.019001 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 14) as usize] } else { 0.0 };
		let mut fSlow64: f32 = (self.fConst72 * f32::cos((self.fConst73 * fSlow1)));
		let mut fSlow65: f32 = if ((((52.4300003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 15) as usize] } else { 0.0 };
		let mut fSlow66: f32 = (self.fConst76 * f32::cos((self.fConst77 * fSlow1)));
		let mut fSlow67: f32 = if ((((58.2859993 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 16) as usize] } else { 0.0 };
		let mut fSlow68: f32 = (self.fConst80 * f32::cos((self.fConst81 * fSlow1)));
		let mut fSlow69: f32 = if ((((63.5485992 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 17) as usize] } else { 0.0 };
		let mut fSlow70: f32 = (self.fConst84 * f32::cos((self.fConst85 * fSlow1)));
		let mut fSlow71: f32 = if ((((65.3628006 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 18) as usize] } else { 0.0 };
		let mut fSlow72: f32 = (self.fConst88 * f32::cos((self.fConst89 * fSlow1)));
		let mut fSlow73: f32 = if ((((66.9587021 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 19) as usize] } else { 0.0 };
		let mut fSlow74: f32 = (self.fConst92 * f32::cos((self.fConst93 * fSlow1)));
		let mut fSlow75: f32 = if ((((74.530098 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 20) as usize] } else { 0.0 };
		let mut fSlow76: f32 = (self.fConst96 * f32::cos((self.fConst97 * fSlow1)));
		let mut fSlow77: f32 = if ((((78.6920013 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 21) as usize] } else { 0.0 };
		let mut fSlow78: f32 = (self.fConst100 * f32::cos((self.fConst101 * fSlow1)));
		let mut fSlow79: f32 = if ((((80.8375015 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 22) as usize] } else { 0.0 };
		let mut fSlow80: f32 = (self.fConst104 * f32::cos((self.fConst105 * fSlow1)));
		let mut fSlow81: f32 = if ((((89.9779968 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 23) as usize] } else { 0.0 };
		let mut fSlow82: f32 = (self.fConst108 * f32::cos((self.fConst109 * fSlow1)));
		let mut fSlow83: f32 = if ((((92.9661026 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 24) as usize] } else { 0.0 };
		let mut fSlow84: f32 = (self.fConst112 * f32::cos((self.fConst113 * fSlow1)));
		let mut fSlow85: f32 = if ((((95.1913986 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 25) as usize] } else { 0.0 };
		let mut fSlow86: f32 = (self.fConst116 * f32::cos((self.fConst117 * fSlow1)));
		let mut fSlow87: f32 = if ((((97.4806976 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 26) as usize] } else { 0.0 };
		let mut fSlow88: f32 = (self.fConst120 * f32::cos((self.fConst121 * fSlow1)));
		let mut fSlow89: f32 = if ((((110.620003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 27) as usize] } else { 0.0 };
		let mut fSlow90: f32 = (self.fConst124 * f32::cos((self.fConst125 * fSlow1)));
		let mut fSlow91: f32 = if ((((112.069 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 28) as usize] } else { 0.0 };
		let mut fSlow92: f32 = (self.fConst128 * f32::cos((self.fConst129 * fSlow1)));
		let mut fSlow93: f32 = if ((((113.825996 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 29) as usize] } else { 0.0 };
		let mut fSlow94: f32 = (self.fConst132 * f32::cos((self.fConst133 * fSlow1)));
		let mut fSlow95: f32 = if ((((119.356003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 30) as usize] } else { 0.0 };
		let mut fSlow96: f32 = (self.fConst136 * f32::cos((self.fConst137 * fSlow1)));
		let mut fSlow97: f32 = if ((((127.044998 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 31) as usize] } else { 0.0 };
		let mut fSlow98: f32 = (self.fConst140 * f32::cos((self.fConst141 * fSlow1)));
		let mut fSlow99: f32 = if ((((129.981995 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 32) as usize] } else { 0.0 };
		let mut fSlow100: f32 = (self.fConst144 * f32::cos((self.fConst145 * fSlow1)));
		let mut fSlow101: f32 = if ((((132.259003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 33) as usize] } else { 0.0 };
		let mut fSlow102: f32 = (self.fConst148 * f32::cos((self.fConst149 * fSlow1)));
		let mut fSlow103: f32 = if ((((133.477005 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 34) as usize] } else { 0.0 };
		let mut fSlow104: f32 = (self.fConst152 * f32::cos((self.fConst153 * fSlow1)));
		let mut fSlow105: f32 = if ((((144.548996 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 35) as usize] } else { 0.0 };
		let mut fSlow106: f32 = (self.fConst156 * f32::cos((self.fConst157 * fSlow1)));
		let mut fSlow107: f32 = if ((((149.438004 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 36) as usize] } else { 0.0 };
		let mut fSlow108: f32 = (self.fConst160 * f32::cos((self.fConst161 * fSlow1)));
		let mut fSlow109: f32 = if ((((152.033005 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 37) as usize] } else { 0.0 };
		let mut fSlow110: f32 = (self.fConst164 * f32::cos((self.fConst165 * fSlow1)));
		let mut fSlow111: f32 = if ((((153.166 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 38) as usize] } else { 0.0 };
		let mut fSlow112: f32 = (self.fConst168 * f32::cos((self.fConst169 * fSlow1)));
		let mut fSlow113: f32 = if ((((155.597 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 39) as usize] } else { 0.0 };
		let mut fSlow114: f32 = (self.fConst172 * f32::cos((self.fConst173 * fSlow1)));
		let mut fSlow115: f32 = if ((((158.182999 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 40) as usize] } else { 0.0 };
		let mut fSlow116: f32 = (self.fConst176 * f32::cos((self.fConst177 * fSlow1)));
		let mut fSlow117: f32 = if ((((168.104996 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 41) as usize] } else { 0.0 };
		let mut fSlow118: f32 = (self.fConst180 * f32::cos((self.fConst181 * fSlow1)));
		let mut fSlow119: f32 = if ((((171.863007 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 42) as usize] } else { 0.0 };
		let mut fSlow120: f32 = (self.fConst184 * f32::cos((self.fConst185 * fSlow1)));
		let mut fSlow121: f32 = if ((((174.464005 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 43) as usize] } else { 0.0 };
		let mut fSlow122: f32 = (self.fConst188 * f32::cos((self.fConst189 * fSlow1)));
		let mut fSlow123: f32 = if ((((178.936996 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 44) as usize] } else { 0.0 };
		let mut fSlow124: f32 = (self.fConst192 * f32::cos((self.fConst193 * fSlow1)));
		let mut fSlow125: f32 = if ((((181.481995 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 45) as usize] } else { 0.0 };
		let mut fSlow126: f32 = (self.fConst196 * f32::cos((self.fConst197 * fSlow1)));
		let mut fSlow127: f32 = if ((((185.397995 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 46) as usize] } else { 0.0 };
		let mut fSlow128: f32 = (self.fConst200 * f32::cos((self.fConst201 * fSlow1)));
		let mut fSlow129: f32 = if ((((190.369003 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 47) as usize] } else { 0.0 };
		let mut fSlow130: f32 = (self.fConst204 * f32::cos((self.fConst205 * fSlow1)));
		let mut fSlow131: f32 = if ((((192.190002 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 48) as usize] } else { 0.0 };
		let mut fSlow132: f32 = (self.fConst208 * f32::cos((self.fConst209 * fSlow1)));
		let mut fSlow133: f32 = if ((((195.505005 * fSlow1) < self.fConst3) as i32) as i32 == 1) { ftbl0mydspSIG0[(iSlow22 + 49) as usize] } else { 0.0 };
		let mut fSlow134: f32 = (self.fConst212 * f32::cos((self.fConst213 * fSlow1)));
		let mut i: i32 = 0;
		loop {
			self.iRec2[0] = 0;
			self.fRec9[0] = ((0.949999988 * self.fRec9[1]) + (0.0500000007 * self.fRec7[1]));
			let mut fTemp0: f32 = ((0.99000001 * self.fRec9[0]) + (self.iRec2[1] as f32));
			self.fVec0[(self.IOTA & 2047) as usize] = fTemp0;
			self.fRec6[0] = ((fSlow9 * self.fVec0[((self.IOTA - iSlow11) & 2047) as usize]) + (fSlow12 * ((((fSlow13 * self.fVec0[((self.IOTA - iSlow14) & 2047) as usize]) + (fSlow15 * self.fVec0[((self.IOTA - iSlow16) & 2047) as usize])) + (fSlow18 * self.fVec0[((self.IOTA - iSlow19) & 2047) as usize])) + (fSlow20 * self.fVec0[((self.IOTA - iSlow21) & 2047) as usize]))));
			self.fRec10[0] = ((0.949999988 * self.fRec10[1]) + (0.0500000007 * self.fRec6[1]));
			self.iRec14[0] = ((1103515245 * self.iRec14[1]) + 12345);
			self.fRec13[0] = ((4.65661287e-10 * (self.iRec14[0] as f32)) - (self.fConst7 * ((self.fConst9 * self.fRec13[2]) + (self.fConst10 * self.fRec13[1]))));
			self.fRec12[0] = ((self.fConst7 * (((self.fConst8 * self.fRec13[0]) + (self.fConst11 * self.fRec13[1])) + (self.fConst8 * self.fRec13[2]))) - (fSlow28 * ((fSlow29 * self.fRec12[1]) + (fSlow30 * self.fRec12[2]))));
			self.fVec1[0] = fSlow31;
			self.fVec2[0] = fSlow32;
			self.fRec15[0] = if ((((((fSlow31 - self.fVec1[1]) > 0.0) as i32) > 0) as i32) as i32 == 1) { 0.0 } else { f32::min(fSlow33, ((self.fRec15[1] + (self.fConst12 * (fSlow32 - self.fVec2[1]))) + 1.0)) };
			let mut iTemp1: i32 = ((self.fRec15[0] < fSlow34) as i32);
			let mut fTemp2: f32 = (fSlow27 * ((self.fRec12[2] + (self.fRec12[0] + (2.0 * self.fRec12[1]))) * if (iTemp1 as i32 == 1) { if (((self.fRec15[0] < 0.0) as i32) as i32 == 1) { 0.0 } else { if (iTemp1 as i32 == 1) { (fSlow35 * self.fRec15[0]) } else { 1.0 } } } else { if (((self.fRec15[0] < fSlow33) as i32) as i32 == 1) { ((fSlow35 * (0.0 - (self.fRec15[0] - fSlow34))) + 1.0) } else { 0.0 } }));
			self.fRec11[0] = (fTemp2 - ((fSlow36 * self.fRec11[1]) + (self.fConst18 * self.fRec11[2])));
			self.fRec16[0] = (fTemp2 - ((fSlow38 * self.fRec16[1]) + (self.fConst22 * self.fRec16[2])));
			self.fRec17[0] = (fTemp2 - ((fSlow40 * self.fRec17[1]) + (self.fConst26 * self.fRec17[2])));
			self.fRec18[0] = (fTemp2 - ((fSlow42 * self.fRec18[1]) + (self.fConst30 * self.fRec18[2])));
			self.fRec19[0] = (fTemp2 - ((fSlow44 * self.fRec19[1]) + (self.fConst34 * self.fRec19[2])));
			self.fRec20[0] = (fTemp2 - ((fSlow46 * self.fRec20[1]) + (self.fConst38 * self.fRec20[2])));
			self.fRec21[0] = (fTemp2 - ((fSlow48 * self.fRec21[1]) + (self.fConst42 * self.fRec21[2])));
			self.fRec22[0] = (fTemp2 - ((fSlow50 * self.fRec22[1]) + (self.fConst46 * self.fRec22[2])));
			self.fRec23[0] = (fTemp2 - ((fSlow52 * self.fRec23[1]) + (self.fConst50 * self.fRec23[2])));
			self.fRec24[0] = (fTemp2 - ((fSlow54 * self.fRec24[1]) + (self.fConst54 * self.fRec24[2])));
			self.fRec25[0] = (fTemp2 - ((fSlow56 * self.fRec25[1]) + (self.fConst58 * self.fRec25[2])));
			self.fRec26[0] = (fTemp2 - ((fSlow58 * self.fRec26[1]) + (self.fConst62 * self.fRec26[2])));
			self.fRec27[0] = (fTemp2 - ((fSlow60 * self.fRec27[1]) + (self.fConst66 * self.fRec27[2])));
			self.fRec28[0] = (fTemp2 - ((fSlow62 * self.fRec28[1]) + (self.fConst70 * self.fRec28[2])));
			self.fRec29[0] = (fTemp2 - ((fSlow64 * self.fRec29[1]) + (self.fConst74 * self.fRec29[2])));
			self.fRec30[0] = (fTemp2 - ((fSlow66 * self.fRec30[1]) + (self.fConst78 * self.fRec30[2])));
			self.fRec31[0] = (fTemp2 - ((fSlow68 * self.fRec31[1]) + (self.fConst82 * self.fRec31[2])));
			self.fRec32[0] = (fTemp2 - ((fSlow70 * self.fRec32[1]) + (self.fConst86 * self.fRec32[2])));
			self.fRec33[0] = (fTemp2 - ((fSlow72 * self.fRec33[1]) + (self.fConst90 * self.fRec33[2])));
			self.fRec34[0] = (fTemp2 - ((fSlow74 * self.fRec34[1]) + (self.fConst94 * self.fRec34[2])));
			self.fRec35[0] = (fTemp2 - ((fSlow76 * self.fRec35[1]) + (self.fConst98 * self.fRec35[2])));
			self.fRec36[0] = (fTemp2 - ((fSlow78 * self.fRec36[1]) + (self.fConst102 * self.fRec36[2])));
			self.fRec37[0] = (fTemp2 - ((fSlow80 * self.fRec37[1]) + (self.fConst106 * self.fRec37[2])));
			self.fRec38[0] = (fTemp2 - ((fSlow82 * self.fRec38[1]) + (self.fConst110 * self.fRec38[2])));
			self.fRec39[0] = (fTemp2 - ((fSlow84 * self.fRec39[1]) + (self.fConst114 * self.fRec39[2])));
			self.fRec40[0] = (fTemp2 - ((fSlow86 * self.fRec40[1]) + (self.fConst118 * self.fRec40[2])));
			self.fRec41[0] = (fTemp2 - ((fSlow88 * self.fRec41[1]) + (self.fConst122 * self.fRec41[2])));
			self.fRec42[0] = (fTemp2 - ((fSlow90 * self.fRec42[1]) + (self.fConst126 * self.fRec42[2])));
			self.fRec43[0] = (fTemp2 - ((fSlow92 * self.fRec43[1]) + (self.fConst130 * self.fRec43[2])));
			self.fRec44[0] = (fTemp2 - ((fSlow94 * self.fRec44[1]) + (self.fConst134 * self.fRec44[2])));
			self.fRec45[0] = (fTemp2 - ((fSlow96 * self.fRec45[1]) + (self.fConst138 * self.fRec45[2])));
			self.fRec46[0] = (fTemp2 - ((fSlow98 * self.fRec46[1]) + (self.fConst142 * self.fRec46[2])));
			self.fRec47[0] = (fTemp2 - ((fSlow100 * self.fRec47[1]) + (self.fConst146 * self.fRec47[2])));
			self.fRec48[0] = (fTemp2 - ((fSlow102 * self.fRec48[1]) + (self.fConst150 * self.fRec48[2])));
			self.fRec49[0] = (fTemp2 - ((fSlow104 * self.fRec49[1]) + (self.fConst154 * self.fRec49[2])));
			self.fRec50[0] = (fTemp2 - ((fSlow106 * self.fRec50[1]) + (self.fConst158 * self.fRec50[2])));
			self.fRec51[0] = (fTemp2 - ((fSlow108 * self.fRec51[1]) + (self.fConst162 * self.fRec51[2])));
			self.fRec52[0] = (fTemp2 - ((fSlow110 * self.fRec52[1]) + (self.fConst166 * self.fRec52[2])));
			self.fRec53[0] = (fTemp2 - ((fSlow112 * self.fRec53[1]) + (self.fConst170 * self.fRec53[2])));
			self.fRec54[0] = (fTemp2 - ((fSlow114 * self.fRec54[1]) + (self.fConst174 * self.fRec54[2])));
			self.fRec55[0] = (fTemp2 - ((fSlow116 * self.fRec55[1]) + (self.fConst178 * self.fRec55[2])));
			self.fRec56[0] = (fTemp2 - ((fSlow118 * self.fRec56[1]) + (self.fConst182 * self.fRec56[2])));
			self.fRec57[0] = (fTemp2 - ((fSlow120 * self.fRec57[1]) + (self.fConst186 * self.fRec57[2])));
			self.fRec58[0] = (fTemp2 - ((fSlow122 * self.fRec58[1]) + (self.fConst190 * self.fRec58[2])));
			self.fRec59[0] = (fTemp2 - ((fSlow124 * self.fRec59[1]) + (self.fConst194 * self.fRec59[2])));
			self.fRec60[0] = (fTemp2 - ((fSlow126 * self.fRec60[1]) + (self.fConst198 * self.fRec60[2])));
			self.fRec61[0] = (fTemp2 - ((fSlow128 * self.fRec61[1]) + (self.fConst202 * self.fRec61[2])));
			self.fRec62[0] = (fTemp2 - ((fSlow130 * self.fRec62[1]) + (self.fConst206 * self.fRec62[2])));
			self.fRec63[0] = (fTemp2 - ((fSlow132 * self.fRec63[1]) + (self.fConst210 * self.fRec63[2])));
			self.fRec64[0] = (fTemp2 - ((fSlow134 * self.fRec64[1]) + (self.fConst214 * self.fRec64[2])));
			let mut fTemp3: f32 = ((((((((((((((((((((((((((((((((((((((((((((((((((fSlow23 * (self.fRec11[0] - self.fRec11[2])) + (fSlow37 * (self.fRec16[0] - self.fRec16[2]))) + (fSlow39 * (self.fRec17[0] - self.fRec17[2]))) + (fSlow41 * (self.fRec18[0] - self.fRec18[2]))) + (fSlow43 * (self.fRec19[0] - self.fRec19[2]))) + (fSlow45 * (self.fRec20[0] - self.fRec20[2]))) + (fSlow47 * (self.fRec21[0] - self.fRec21[2]))) + (fSlow49 * (self.fRec22[0] - self.fRec22[2]))) + (fSlow51 * (self.fRec23[0] - self.fRec23[2]))) + (fSlow53 * (self.fRec24[0] - self.fRec24[2]))) + (fSlow55 * (self.fRec25[0] - self.fRec25[2]))) + (fSlow57 * (self.fRec26[0] - self.fRec26[2]))) + (fSlow59 * (self.fRec27[0] - self.fRec27[2]))) + (fSlow61 * (self.fRec28[0] - self.fRec28[2]))) + (fSlow63 * (self.fRec29[0] - self.fRec29[2]))) + (fSlow65 * (self.fRec30[0] - self.fRec30[2]))) + (fSlow67 * (self.fRec31[0] - self.fRec31[2]))) + (fSlow69 * (self.fRec32[0] - self.fRec32[2]))) + (fSlow71 * (self.fRec33[0] - self.fRec33[2]))) + (fSlow73 * (self.fRec34[0] - self.fRec34[2]))) + (fSlow75 * (self.fRec35[0] - self.fRec35[2]))) + (fSlow77 * (self.fRec36[0] - self.fRec36[2]))) + (fSlow79 * (self.fRec37[0] - self.fRec37[2]))) + (fSlow81 * (self.fRec38[0] - self.fRec38[2]))) + (fSlow83 * (self.fRec39[0] - self.fRec39[2]))) + (fSlow85 * (self.fRec40[0] - self.fRec40[2]))) + (fSlow87 * (self.fRec41[0] - self.fRec41[2]))) + (fSlow89 * (self.fRec42[0] - self.fRec42[2]))) + (fSlow91 * (self.fRec43[0] - self.fRec43[2]))) + (fSlow93 * (self.fRec44[0] - self.fRec44[2]))) + (fSlow95 * (self.fRec45[0] - self.fRec45[2]))) + (fSlow97 * (self.fRec46[0] - self.fRec46[2]))) + (fSlow99 * (self.fRec47[0] - self.fRec47[2]))) + (fSlow101 * (self.fRec48[0] - self.fRec48[2]))) + (fSlow103 * (self.fRec49[0] - self.fRec49[2]))) + (fSlow105 * (self.fRec50[0] - self.fRec50[2]))) + (fSlow107 * (self.fRec51[0] - self.fRec51[2]))) + (fSlow109 * (self.fRec52[0] - self.fRec52[2]))) + (fSlow111 * (self.fRec53[0] - self.fRec53[2]))) + (fSlow113 * (self.fRec54[0] - self.fRec54[2]))) + (fSlow115 * (self.fRec55[0] - self.fRec55[2]))) + (fSlow117 * (self.fRec56[0] - self.fRec56[2]))) + (fSlow119 * (self.fRec57[0] - self.fRec57[2]))) + (fSlow121 * (self.fRec58[0] - self.fRec58[2]))) + (fSlow123 * (self.fRec59[0] - self.fRec59[2]))) + (fSlow125 * (self.fRec60[0] - self.fRec60[2]))) + (fSlow127 * (self.fRec61[0] - self.fRec61[2]))) + (fSlow129 * (self.fRec62[0] - self.fRec62[2]))) + (fSlow131 * (self.fRec63[0] - self.fRec63[2]))) + (fSlow133 * (self.fRec64[0] - self.fRec64[2])));
			self.fVec3[0] = fTemp3;
			let mut fTemp4: f32 = ((0.99000001 * self.fRec10[0]) + (0.0199999996 * self.fVec3[1]));
			self.fVec4[(self.IOTA & 2047) as usize] = fTemp4;
			self.fRec7[0] = ((fSlow9 * self.fVec4[((self.IOTA - iSlow11) & 2047) as usize]) + (fSlow12 * ((((fSlow13 * self.fVec4[((self.IOTA - iSlow14) & 2047) as usize]) + (fSlow15 * self.fVec4[((self.IOTA - iSlow16) & 2047) as usize])) + (fSlow18 * self.fVec4[((self.IOTA - iSlow19) & 2047) as usize])) + (fSlow20 * self.fVec4[((self.IOTA - iSlow21) & 2047) as usize]))));
			let mut iRec8: i32 = 0;
			let mut fRec3: f32 = self.fRec6[0];
			let mut fRec4: f32 = self.fRec7[0];
			let mut fRec5: f32 = (self.fRec7[0] + (iRec8 as f32));
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			let mut fTemp5: f32 = (fSlow0 * fRec1);
			outputs[0][i as usize] = (fTemp5 as f32);
			outputs[1][i as usize] = (fTemp5 as f32);
			self.iRec2[1] = self.iRec2[0];
			self.fRec9[1] = self.fRec9[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec6[1] = self.fRec6[0];
			self.fRec10[1] = self.fRec10[0];
			self.iRec14[1] = self.iRec14[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fVec1[1] = self.fVec1[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec16[2] = self.fRec16[1];
			self.fRec16[1] = self.fRec16[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec18[2] = self.fRec18[1];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[2] = self.fRec20[1];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[2] = self.fRec22[1];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[2] = self.fRec23[1];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[2] = self.fRec24[1];
			self.fRec24[1] = self.fRec24[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec27[2] = self.fRec27[1];
			self.fRec27[1] = self.fRec27[0];
			self.fRec28[2] = self.fRec28[1];
			self.fRec28[1] = self.fRec28[0];
			self.fRec29[2] = self.fRec29[1];
			self.fRec29[1] = self.fRec29[0];
			self.fRec30[2] = self.fRec30[1];
			self.fRec30[1] = self.fRec30[0];
			self.fRec31[2] = self.fRec31[1];
			self.fRec31[1] = self.fRec31[0];
			self.fRec32[2] = self.fRec32[1];
			self.fRec32[1] = self.fRec32[0];
			self.fRec33[2] = self.fRec33[1];
			self.fRec33[1] = self.fRec33[0];
			self.fRec34[2] = self.fRec34[1];
			self.fRec34[1] = self.fRec34[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec37[2] = self.fRec37[1];
			self.fRec37[1] = self.fRec37[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec39[2] = self.fRec39[1];
			self.fRec39[1] = self.fRec39[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec41[2] = self.fRec41[1];
			self.fRec41[1] = self.fRec41[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.fRec48[2] = self.fRec48[1];
			self.fRec48[1] = self.fRec48[0];
			self.fRec49[2] = self.fRec49[1];
			self.fRec49[1] = self.fRec49[0];
			self.fRec50[2] = self.fRec50[1];
			self.fRec50[1] = self.fRec50[0];
			self.fRec51[2] = self.fRec51[1];
			self.fRec51[1] = self.fRec51[0];
			self.fRec52[2] = self.fRec52[1];
			self.fRec52[1] = self.fRec52[0];
			self.fRec53[2] = self.fRec53[1];
			self.fRec53[1] = self.fRec53[0];
			self.fRec54[2] = self.fRec54[1];
			self.fRec54[1] = self.fRec54[0];
			self.fRec55[2] = self.fRec55[1];
			self.fRec55[1] = self.fRec55[0];
			self.fRec56[2] = self.fRec56[1];
			self.fRec56[1] = self.fRec56[0];
			self.fRec57[2] = self.fRec57[1];
			self.fRec57[1] = self.fRec57[0];
			self.fRec58[2] = self.fRec58[1];
			self.fRec58[1] = self.fRec58[0];
			self.fRec59[2] = self.fRec59[1];
			self.fRec59[1] = self.fRec59[0];
			self.fRec60[2] = self.fRec60[1];
			self.fRec60[1] = self.fRec60[0];
			self.fRec61[2] = self.fRec61[1];
			self.fRec61[1] = self.fRec61[0];
			self.fRec62[2] = self.fRec62[1];
			self.fRec62[1] = self.fRec62[0];
			self.fRec63[2] = self.fRec63[1];
			self.fRec63[1] = self.fRec63[0];
			self.fRec64[2] = self.fRec64[1];
			self.fRec64[1] = self.fRec64[0];
			self.fVec3[1] = self.fVec3[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

