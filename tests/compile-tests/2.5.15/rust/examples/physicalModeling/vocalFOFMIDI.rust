


pub struct mydspSIG0 {
	
	iRec6: [i32;2],
	
}

impl mydspSIG0 {
	
	pub fn getNumInputsmydspSIG0(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputsmydspSIG0(&mut self) -> i32 {
		1
	}
	pub fn getInputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRatemydspSIG0(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 0;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn instanceInitmydspSIG0(&mut self, samplingFreq: i32) {
		let mut l8: i32 = 0;
		loop {
			self.iRec6[l8 as usize] = 0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn fillmydspSIG0(&mut self, count: i32, output: &mut[f32]) {
		let mut i: i32 = 0;
		loop {
			self.iRec6[0] = (self.iRec6[1] + 1);
			output[i as usize] = f32::sin((9.58738019e-05 * ((self.iRec6[0] + -1) as f32)));
			self.iRec6[1] = self.iRec6[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}


pub fn newmydspSIG0() -> mydspSIG0 { 
	mydspSIG0 {
		iRec6: [0;2],
	}
}
static ftbl0mydspSIG0: [f32;65536][0.0;65536],;


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fHslider1: f32,
	iVec0: [i32;2],
	fHslider2: f32,
	fRec0: [f32;2],
	fHslider3: f32,
	fButton0: f32,
	fHslider4: f32,
	fVec1: [f32;2],
	fHslider5: f32,
	fRec1: [f32;2],
	fHslider6: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider7: f32,
	fRec2: [f32;2],
	fRec3: [f32;2],
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fRec4: [f32;2],
	fRec5: [f32;2],
	fConst6: f32,
	fRec9: [f32;2],
	fRec10: [f32;2],
	fVec2: [f32;2],
	fRec8: [f32;2],
	iVec3: [i32;2],
	fConst7: f32,
	fRec11: [f32;2],
	fRec7: [f32;2],
	fRec12: [f32;3],
	fRec14: [f32;2],
	fRec15: [f32;2],
	fRec13: [f32;3],
	fRec16: [f32;2],
	fRec18: [f32;2],
	fRec19: [f32;2],
	fRec17: [f32;3],
	fRec20: [f32;2],
	fRec22: [f32;2],
	fRec23: [f32;2],
	fRec21: [f32;3],
	fRec24: [f32;2],
	fRec26: [f32;2],
	fRec27: [f32;2],
	fRec25: [f32;3],
	fRec28: [f32;2],
	fHslider8: f32,
	fHslider9: f32,
	fRec29: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fHslider1: 0.0,
			iVec0: [0;2],
			fHslider2: 0.0,
			fRec0: [0.0;2],
			fHslider3: 0.0,
			fButton0: 0.0,
			fHslider4: 0.0,
			fVec1: [0.0;2],
			fHslider5: 0.0,
			fRec1: [0.0;2],
			fHslider6: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider7: 0.0,
			fRec2: [0.0;2],
			fRec3: [0.0;2],
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fRec4: [0.0;2],
			fRec5: [0.0;2],
			fConst6: 0.0,
			fRec9: [0.0;2],
			fRec10: [0.0;2],
			fVec2: [0.0;2],
			fRec8: [0.0;2],
			iVec3: [0;2],
			fConst7: 0.0,
			fRec11: [0.0;2],
			fRec7: [0.0;2],
			fRec12: [0.0;3],
			fRec14: [0.0;2],
			fRec15: [0.0;2],
			fRec13: [0.0;3],
			fRec16: [0.0;2],
			fRec18: [0.0;2],
			fRec19: [0.0;2],
			fRec17: [0.0;3],
			fRec20: [0.0;2],
			fRec22: [0.0;2],
			fRec23: [0.0;2],
			fRec21: [0.0;3],
			fRec24: [0.0;2],
			fRec26: [0.0;2],
			fRec27: [0.0;2],
			fRec25: [0.0;3],
			fRec28: [0.0;2],
			fHslider8: 0.0,
			fHslider9: 0.0,
			fRec29: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Mike Olsen, CCRMA (Stanford University)");
		m.declare("description", "MIDI-controllable FOF vocal synthesizer.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "Vocal FOF MIDI");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		let mut sig0: mydspSIG0 = newmydspSIG0();
		sig0.instanceInitmydspSIG0(samplingFreq);
		sig0.fillmydspSIG0(65536, &mut ftbl0mydspSIG0);
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 440.0;
		self.fButton0 = 0.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 1.0;
		self.fHslider6 = 0.5;
		self.fHslider7 = 6.0;
		self.fHslider8 = 0.899999976;
		self.fHslider9 = 10.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec3[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec4[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec5[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec9[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec10[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fVec2[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec8[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.iVec3[l13 as usize] = 0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec11[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec7[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec12[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec14[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec15[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fRec13[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 3) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fRec16[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec18[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fRec19[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fRec17[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 3) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fRec20[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fRec22[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fRec23[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fRec21[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 3) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fRec24[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec26[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fRec27[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		let mut l31: i32 = 0;
		loop {
			self.fRec25[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 3) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fRec28[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec29[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		self.fConst2 = (3.14159274 / self.fConst0);
		self.fConst3 = (1000.0 / self.fConst0);
		self.fConst4 = f32::exp((0.0 - self.fConst3));
		self.fConst5 = (1.0 - self.fConst4);
		self.fConst6 = (1.0 / self.fConst0);
		self.fConst7 = (1.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("vocal");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider3, "0", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider3, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider5, "1", "");
		ui_interface.declare(&mut self.fHslider5, "hidden", "1");
		ui_interface.declare(&mut self.fHslider5, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider5, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider8, "2", "");
		ui_interface.declare(&mut self.fHslider8, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider8, 0.90000000000000002, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider9, "3", "");
		ui_interface.declare(&mut self.fHslider9, "style", "knob");
		ui_interface.addHorizontalSlider("envAttack", &mut self.fHslider9, 10.0, 0.0, 30.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "4", "");
		ui_interface.declare(&mut self.fHslider4, "hidden", "1");
		ui_interface.declare(&mut self.fHslider4, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider4, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("voiceType", &mut self.fHslider1, 0.0, 0.0, 4.0, 1.0);
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("vowel", &mut self.fHslider2, 0.0, 0.0, 4.0, 0.01);
		ui_interface.declare(&mut self.fHslider7, "3", "");
		ui_interface.declare(&mut self.fHslider7, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoFreq", &mut self.fHslider7, 6.0, 1.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider6, "4", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoGain", &mut self.fHslider6, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "5", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (self.fHslider1 as f32);
		let mut iSlow2: i32 = if (((fSlow1 == 0.0) as i32) as i32 == 1) { 1 } else { if (((fSlow1 == 3.0) as i32) as i32 == 1) { 1 } else { 0 } };
		let mut iSlow3: i32 = ((iSlow2 == 0) as i32);
		let mut fSlow4: f32 = (5.0 * fSlow1);
		let mut fSlow5: f32 = (0.00100000005 * (self.fHslider2 as f32));
		let mut fSlow6: f32 = (5.0 * (1.0 - fSlow1));
		let mut fSlow7: f32 = (self.fHslider3 as f32);
		let mut fSlow8: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider4 as f32)));
		let mut iSlow9: i32 = ((fSlow8 == 0.0) as i32);
		let mut fSlow10: f32 = (self.fHslider5 as f32);
		let mut fSlow11: f32 = (0.100000001 * (self.fHslider6 as f32));
		let mut fSlow12: f32 = (self.fConst1 * (self.fHslider7 as f32));
		let mut fSlow13: f32 = f32::sin(fSlow12);
		let mut fSlow14: f32 = f32::cos(fSlow12);
		let mut fSlow15: f32 = (0.0 - fSlow13);
		let mut iSlow16: i32 = (5 * iSlow2);
		let mut iSlow17: i32 = ((iSlow2 >= 1) as i32);
		let mut fSlow18: f32 = if (iSlow17 as i32 == 1) { 174.610001 } else { 82.4100037 };
		let mut fSlow19: f32 = if (iSlow17 as i32 == 1) { 1046.5 } else { 523.25 };
		let mut fSlow20: f32 = (fSlow19 - fSlow18);
		let mut iSlow21: i32 = ((fSlow1 != 2.0) as i32);
		let mut fSlow22: f32 = (2.0 * fSlow7);
		let mut fSlow23: f32 = f32::exp((0.0 - (self.fConst3 / (self.fHslider9 as f32))));
		let mut fSlow24: f32 = (25.0 * ((fSlow8 * (self.fHslider8 as f32)) * (1.0 - fSlow23)));
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec0[0] = (fSlow5 + (0.999000013 * self.fRec0[1]));
			let mut fTemp0: f32 = (fSlow4 + self.fRec0[0]);
			let mut iTemp1: i32 = ((fTemp0 < 23.0) as i32);
			let mut iTemp2: i32 = ((fTemp0 < 22.0) as i32);
			let mut fTemp3: f32 = (fSlow4 + (self.fRec0[0] + -22.0));
			let mut iTemp4: i32 = ((fTemp0 < 21.0) as i32);
			let mut fTemp5: f32 = (fSlow4 + (self.fRec0[0] + -21.0));
			let mut iTemp6: i32 = ((fTemp0 < 20.0) as i32);
			let mut fTemp7: f32 = (fSlow4 + (self.fRec0[0] + -20.0));
			let mut iTemp8: i32 = ((fTemp0 < 19.0) as i32);
			let mut fTemp9: f32 = (fSlow4 + (self.fRec0[0] + -19.0));
			let mut iTemp10: i32 = ((fTemp0 < 18.0) as i32);
			let mut fTemp11: f32 = (fSlow4 + (self.fRec0[0] + -18.0));
			let mut iTemp12: i32 = ((fTemp0 < 17.0) as i32);
			let mut fTemp13: f32 = (fSlow4 + (self.fRec0[0] + -17.0));
			let mut iTemp14: i32 = ((fTemp0 < 16.0) as i32);
			let mut fTemp15: f32 = (fSlow4 + (self.fRec0[0] + -16.0));
			let mut iTemp16: i32 = ((fTemp0 < 15.0) as i32);
			let mut fTemp17: f32 = (fSlow4 + (self.fRec0[0] + -15.0));
			let mut iTemp18: i32 = ((fTemp0 < 14.0) as i32);
			let mut fTemp19: f32 = (fSlow4 + (self.fRec0[0] + -14.0));
			let mut iTemp20: i32 = ((fTemp0 < 13.0) as i32);
			let mut iTemp21: i32 = ((fTemp0 < 12.0) as i32);
			let mut fTemp22: f32 = (fSlow4 + (self.fRec0[0] + -12.0));
			let mut iTemp23: i32 = ((fTemp0 < 11.0) as i32);
			let mut fTemp24: f32 = (fSlow4 + (self.fRec0[0] + -11.0));
			let mut fTemp25: f32 = if (iTemp21 as i32 == 1) { (0.100000001 - (0.0841509998 * fTemp24)) } else { 0.0158489998 };
			let mut iTemp26: i32 = ((fTemp0 < 10.0) as i32);
			let mut fTemp27: f32 = (fSlow4 + (self.fRec0[0] + -10.0));
			let mut iTemp28: i32 = ((fTemp0 < 9.0) as i32);
			let mut fTemp29: f32 = (fSlow4 + (self.fRec0[0] + -9.0));
			let mut iTemp30: i32 = ((fTemp0 < 8.0) as i32);
			let mut fTemp31: f32 = (fSlow4 + (self.fRec0[0] + -8.0));
			let mut iTemp32: i32 = ((fTemp0 < 7.0) as i32);
			let mut fTemp33: f32 = (fSlow4 + (self.fRec0[0] + -7.0));
			let mut iTemp34: i32 = ((fTemp0 < 6.0) as i32);
			let mut fTemp35: f32 = (fSlow4 + (self.fRec0[0] + -6.0));
			let mut iTemp36: i32 = ((fTemp0 < 5.0) as i32);
			let mut fTemp37: f32 = (self.fRec0[0] - fSlow6);
			let mut iTemp38: i32 = ((fTemp0 < 4.0) as i32);
			let mut fTemp39: f32 = (fSlow4 + (self.fRec0[0] + -4.0));
			let mut iTemp40: i32 = ((fTemp0 < 3.0) as i32);
			let mut fTemp41: f32 = (fSlow4 + (self.fRec0[0] + -3.0));
			let mut iTemp42: i32 = ((fTemp0 < 2.0) as i32);
			let mut fTemp43: f32 = (fSlow4 + (self.fRec0[0] + -2.0));
			let mut fTemp44: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { 0.00100000005 } else { if (iTemp40 as i32 == 1) { ((0.000777999987 * fTemp43) + 0.00100000005) } else { 0.00177800003 } } } else { if (iTemp38 as i32 == 1) { (0.00177800003 - (0.001147 * fTemp41)) } else { 0.000630999974 } } } else { if (iTemp36 as i32 == 1) { ((0.0993689969 * fTemp39) + 0.000630999974) } else { 0.100000001 } } } else { if (iTemp34 as i32 == 1) { ((0.0258930009 * fTemp37) + 0.100000001) } else { 0.125892997 } } } else { if (iTemp32 as i32 == 1) { (0.125892997 - (0.0860819966 * fTemp35)) } else { 0.0398110002 } } } else { if (iTemp30 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp33)) } else { 0.00999999978 } } } else { if (iTemp28 as i32 == 1) { ((0.00584900007 * fTemp31) + 0.00999999978) } else { 0.0158489998 } } } else { if (iTemp26 as i32 == 1) { (0.0158489998 - (0.00325999991 * fTemp29)) } else { 0.0125890002 } } } else { if (iTemp23 as i32 == 1) { ((0.0874110013 * fTemp27) + 0.0125890002) } else { 0.100000001 } } } else { fTemp25 } } else { if (iTemp20 as i32 == 1) { ((0.00410400005 * fTemp22) + 0.0158489998) } else { 0.0199529994 } } } else { 0.0199529994 } } else { if (iTemp16 as i32 == 1) { (0.0199529994 - (0.0167909991 * fTemp19)) } else { 0.0031620001 } } } else { if (iTemp14 as i32 == 1) { (0.0031620001 - (0.00157700002 * fTemp17)) } else { 0.00158499996 } } } else { if (iTemp12 as i32 == 1) { ((0.00472499989 * fTemp15) + 0.00158499996) } else { 0.00631000008 } } } else { if (iTemp10 as i32 == 1) { (0.00631000008 - (0.00314799999 * fTemp13)) } else { 0.0031620001 } } } else { if (iTemp8 as i32 == 1) { (0.0031620001 - (0.00216199993 * fTemp11)) } else { 0.00100000005 } } } else { if (iTemp6 as i32 == 1) { ((0.0784329996 * fTemp9) + 0.00100000005) } else { 0.0794330016 } } } else { if (iTemp4 as i32 == 1) { ((0.0205669999 * fTemp7) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp2 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp5)) } else { 0.0316229984 } } } else { if (iTemp1 as i32 == 1) { ((0.0184959993 * fTemp3) + 0.0316229984) } else { 0.0501190014 } } } else { 0.0501190014 };
			self.fVec1[0] = fSlow8;
			let mut iTemp45: i32 = (((fSlow8 == self.fVec1[1]) as i32) | iSlow9);
			self.fRec1[0] = ((0.999000013 * (self.fRec1[1] * (iTemp45 as f32))) + (fSlow10 * (1.0 - (0.999000013 * (iTemp45 as f32)))));
			self.fRec2[0] = ((fSlow13 * self.fRec3[1]) + (fSlow14 * self.fRec2[1]));
			let mut iTemp46: i32 = (1 - self.iVec0[1]);
			self.fRec3[0] = (((fSlow14 * self.fRec3[1]) + (fSlow15 * self.fRec2[1])) + (iTemp46 as f32));
			let mut fTemp47: f32 = (fSlow7 * (self.fRec1[0] * ((fSlow11 * self.fRec2[0]) + 1.0)));
			let mut fTemp48: f32 = ((0.000839999993 * (1000.0 - fTemp47)) + 0.800000012);
			let mut fTemp49: f32 = ((0.00366666657 * (400.0 - fTemp47)) + 3.0);
			let mut iTemp50: i32 = ((fTemp0 < 24.0) as i32);
			let mut fTemp51: f32 = (fSlow4 + (self.fRec0[0] + -23.0));
			let mut fTemp52: f32 = (20.0 * fTemp7);
			let mut fTemp53: f32 = (20.0 * fTemp19);
			let mut fTemp54: f32 = (20.0 * fTemp27);
			let mut fTemp55: f32 = (20.0 * fTemp29);
			let mut fTemp56: f32 = (10.0 * fTemp37);
			let mut iTemp57: i32 = ((fTemp0 < 1.0) as i32);
			let mut iTemp58: i32 = ((fTemp0 < 0.0) as i32);
			let mut fTemp59: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 140.0 } else { if (iTemp57 as i32 == 1) { ((60.0 * fTemp0) + 140.0) } else { 200.0 } } } else { 200.0 } } else { if (iTemp40 as i32 == 1) { (200.0 - (65.0 * fTemp43)) } else { 135.0 } } } else { if (iTemp38 as i32 == 1) { ((65.0 * fTemp41) + 135.0) } else { 200.0 } } } else { if (iTemp36 as i32 == 1) { (200.0 - (70.0 * fTemp39)) } else { 130.0 } } } else { if (iTemp34 as i32 == 1) { (130.0 - fTemp56) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp26 as i32 == 1) { (fTemp55 + 120.0) } else { 140.0 } } } else { if (iTemp23 as i32 == 1) { (140.0 - fTemp54) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp16 as i32 == 1) { (fTemp53 + 120.0) } else { 140.0 } } } else { if (iTemp14 as i32 == 1) { ((60.0 * fTemp17) + 140.0) } else { 200.0 } } } else { if (iTemp12 as i32 == 1) { (200.0 - (80.0 * fTemp15)) } else { 120.0 } } } else { 120.0 } } else { if (iTemp8 as i32 == 1) { ((80.0 * fTemp11) + 120.0) } else { 200.0 } } } else { if (iTemp6 as i32 == 1) { (200.0 - (60.0 * fTemp9)) } else { 140.0 } } } else { if (iTemp4 as i32 == 1) { (140.0 - fTemp52) } else { 120.0 } } } else { 120.0 } } else { if (iTemp1 as i32 == 1) { ((15.0 * fTemp3) + 120.0) } else { 135.0 } } } else { if (iTemp50 as i32 == 1) { (135.0 - (15.0 * fTemp51)) } else { 120.0 } };
			self.fRec4[0] = ((self.fConst4 * self.fRec4[1]) + (self.fConst5 * fTemp59));
			let mut fTemp60: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec4[0])));
			let mut fTemp61: f32 = (self.fRec0[0] + (iSlow16 as f32));
			let mut iTemp62: i32 = ((fTemp61 >= 5.0) as i32);
			let mut iTemp63: i32 = ((fTemp61 >= 3.0) as i32);
			let mut iTemp64: i32 = ((fTemp61 >= 2.0) as i32);
			let mut iTemp65: i32 = ((fTemp61 >= 1.0) as i32);
			let mut iTemp66: i32 = ((fTemp61 >= 4.0) as i32);
			let mut iTemp67: i32 = ((fTemp61 >= 8.0) as i32);
			let mut iTemp68: i32 = ((fTemp61 >= 7.0) as i32);
			let mut iTemp69: i32 = ((fTemp61 >= 6.0) as i32);
			let mut fTemp70: f32 = if (iTemp62 as i32 == 1) { if (iTemp67 as i32 == 1) { 2.0 } else { if (iTemp68 as i32 == 1) { 3.0 } else { if (iTemp69 as i32 == 1) { 3.0 } else { 2.0 } } } } else { if (iTemp63 as i32 == 1) { if (iTemp66 as i32 == 1) { 1.5 } else { 1.0 } } else { if (iTemp64 as i32 == 1) { 1.25 } else { if (iTemp65 as i32 == 1) { 1.25 } else { 1.0 } } } };
			let mut fTemp71: f32 = (fTemp70 + ((if (iTemp62 as i32 == 1) { if (iTemp67 as i32 == 1) { 12.0 } else { if (iTemp68 as i32 == 1) { 12.0 } else { if (iTemp69 as i32 == 1) { 12.0 } else { 15.0 } } } } else { if (iTemp63 as i32 == 1) { if (iTemp66 as i32 == 1) { 4.0 } else { 10.0 } } else { if (iTemp64 as i32 == 1) { 2.5 } else { if (iTemp65 as i32 == 1) { 2.5 } else { 10.0 } } } } - fTemp70) * if (((fTemp47 <= fSlow18) as i32) as i32 == 1) { 0.0 } else { if (((fTemp47 >= fSlow19) as i32) as i32 == 1) { 1.0 } else { ((fTemp47 - fSlow18) / fSlow20) } }));
			self.fRec5[0] = ((self.fConst4 * self.fRec5[1]) + (self.fConst5 * (fTemp71 * fTemp59)));
			let mut fTemp72: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec5[0])));
			self.fRec9[0] = ((fSlow13 * self.fRec10[1]) + (fSlow14 * self.fRec9[1]));
			self.fRec10[0] = (((fSlow14 * self.fRec10[1]) + (fSlow15 * self.fRec9[1])) + (iTemp46 as f32));
			let mut fTemp73: f32 = (self.fRec1[0] * ((fSlow11 * self.fRec9[0]) + 1.0));
			let mut fTemp74: f32 = (fSlow7 * fTemp73);
			self.fVec2[0] = fTemp74;
			let mut fTemp75: f32 = (self.fRec8[1] + (self.fConst6 * self.fVec2[1]));
			self.fRec8[0] = (fTemp75 - f32::floor(fTemp75));
			let mut iTemp76: i32 = (((self.fRec8[0] - self.fRec8[1]) < 0.0) as i32);
			self.iVec3[0] = iTemp76;
			let mut iTemp77: i32 = (1 - ((iTemp76 > 0) as i32));
			self.fRec11[0] = (fSlow5 + (0.999000013 * self.fRec11[1]));
			let mut fTemp78: f32 = (fSlow4 + self.fRec11[0]);
			let mut iTemp79: i32 = ((fTemp78 < 23.0) as i32);
			let mut iTemp80: i32 = ((fTemp78 < 24.0) as i32);
			let mut fTemp81: f32 = (fSlow4 + (self.fRec11[0] + -23.0));
			let mut iTemp82: i32 = ((fTemp78 < 22.0) as i32);
			let mut fTemp83: f32 = (fSlow4 + (self.fRec11[0] + -22.0));
			let mut iTemp84: i32 = ((fTemp78 < 21.0) as i32);
			let mut fTemp85: f32 = (fSlow4 + (self.fRec11[0] + -21.0));
			let mut iTemp86: i32 = ((fTemp78 < 20.0) as i32);
			let mut fTemp87: f32 = (fSlow4 + (self.fRec11[0] + -20.0));
			let mut iTemp88: i32 = ((fTemp78 < 19.0) as i32);
			let mut fTemp89: f32 = (fSlow4 + (self.fRec11[0] + -19.0));
			let mut iTemp90: i32 = ((fTemp78 < 18.0) as i32);
			let mut iTemp91: i32 = ((fTemp78 < 17.0) as i32);
			let mut iTemp92: i32 = ((fTemp78 < 16.0) as i32);
			let mut iTemp93: i32 = ((fTemp78 < 15.0) as i32);
			let mut iTemp94: i32 = ((fTemp78 < 14.0) as i32);
			let mut fTemp95: f32 = (fSlow4 + (self.fRec11[0] + -14.0));
			let mut iTemp96: i32 = ((fTemp78 < 13.0) as i32);
			let mut fTemp97: f32 = (fSlow4 + (self.fRec11[0] + -13.0));
			let mut iTemp98: i32 = ((fTemp78 < 12.0) as i32);
			let mut fTemp99: f32 = (fSlow4 + (self.fRec11[0] + -12.0));
			let mut iTemp100: i32 = ((fTemp78 < 11.0) as i32);
			let mut fTemp101: f32 = (fSlow4 + (self.fRec11[0] + -11.0));
			let mut iTemp102: i32 = ((fTemp78 < 10.0) as i32);
			let mut fTemp103: f32 = (fSlow4 + (self.fRec11[0] + -10.0));
			let mut fTemp104: f32 = (50.0 * fTemp103);
			let mut iTemp105: i32 = ((fTemp78 < 9.0) as i32);
			let mut fTemp106: f32 = (fSlow4 + (self.fRec11[0] + -9.0));
			let mut iTemp107: i32 = ((fTemp78 < 8.0) as i32);
			let mut fTemp108: f32 = (fSlow4 + (self.fRec11[0] + -8.0));
			let mut fTemp109: f32 = (50.0 * fTemp108);
			let mut iTemp110: i32 = ((fTemp78 < 7.0) as i32);
			let mut fTemp111: f32 = (fSlow4 + (self.fRec11[0] + -7.0));
			let mut iTemp112: i32 = ((fTemp78 < 6.0) as i32);
			let mut fTemp113: f32 = (fSlow4 + (self.fRec11[0] + -6.0));
			let mut iTemp114: i32 = ((fTemp78 < 5.0) as i32);
			let mut fTemp115: f32 = (self.fRec11[0] - fSlow6);
			let mut fTemp116: f32 = (350.0 * fTemp115);
			let mut iTemp117: i32 = ((fTemp78 < 4.0) as i32);
			let mut fTemp118: f32 = (fSlow4 + (self.fRec11[0] + -4.0));
			let mut fTemp119: f32 = ((self.fRec7[1] * (iTemp77 as f32)) + (self.fConst7 * if (iTemp79 as i32 == 1) { if (iTemp82 as i32 == 1) { if (iTemp84 as i32 == 1) { if (iTemp86 as i32 == 1) { if (iTemp88 as i32 == 1) { if (iTemp90 as i32 == 1) { if (iTemp91 as i32 == 1) { if (iTemp92 as i32 == 1) { if (iTemp93 as i32 == 1) { if (iTemp94 as i32 == 1) { if (iTemp96 as i32 == 1) { if (iTemp98 as i32 == 1) { if (iTemp100 as i32 == 1) { if (iTemp102 as i32 == 1) { if (iTemp105 as i32 == 1) { if (iTemp107 as i32 == 1) { if (iTemp110 as i32 == 1) { if (iTemp112 as i32 == 1) { if (iTemp114 as i32 == 1) { if (iTemp117 as i32 == 1) { 4950.0 } else { if (iTemp114 as i32 == 1) { (4950.0 - (2200.0 * fTemp118)) } else { 2750.0 } } } else { if (iTemp112 as i32 == 1) { (fTemp116 + 2750.0) } else { 3100.0 } } } else { if (iTemp110 as i32 == 1) { ((240.0 * fTemp113) + 3100.0) } else { 3340.0 } } } else { if (iTemp107 as i32 == 1) { (3340.0 - (440.0 * fTemp111)) } else { 2900.0 } } } else { if (iTemp105 as i32 == 1) { (fTemp109 + 2900.0) } else { 2950.0 } } } else { if (iTemp102 as i32 == 1) { ((400.0 * fTemp106) + 2950.0) } else { 3350.0 } } } else { if (iTemp100 as i32 == 1) { (3350.0 - fTemp104) } else { 3300.0 } } } else { if (iTemp98 as i32 == 1) { ((290.0 * fTemp101) + 3300.0) } else { 3590.0 } } } else { if (iTemp96 as i32 == 1) { (3590.0 - (290.0 * fTemp99)) } else { 3300.0 } } } else { if (iTemp94 as i32 == 1) { ((100.0 * fTemp97) + 3300.0) } else { 3400.0 } } } else { if (iTemp93 as i32 == 1) { ((1550.0 * fTemp95) + 3400.0) } else { 4950.0 } } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { if (iTemp86 as i32 == 1) { (4950.0 - (1700.0 * fTemp89)) } else { 3250.0 } } } else { if (iTemp84 as i32 == 1) { ((330.0 * fTemp87) + 3250.0) } else { 3580.0 } } } else { if (iTemp82 as i32 == 1) { (3580.0 - (40.0 * fTemp85)) } else { 3540.0 } } } else { if (iTemp79 as i32 == 1) { (3540.0 - (540.0 * fTemp83)) } else { 3000.0 } } } else { if (iTemp80 as i32 == 1) { ((300.0 * fTemp81) + 3000.0) } else { 3300.0 } }));
			self.fRec7[0] = (fTemp119 - f32::floor(fTemp119));
			self.fRec12[0] = ((self.iVec3[1] as f32) - ((self.fRec12[1] * (0.0 - (fTemp72 + fTemp60))) + ((fTemp72 * fTemp60) * self.fRec12[2])));
			let mut fTemp120: f32 = (20.0 * fTemp17);
			let mut fTemp121: f32 = (10.0 * fTemp27);
			let mut fTemp122: f32 = (10.0 * fTemp39);
			let mut fTemp123: f32 = (20.0 * fTemp41);
			let mut fTemp124: f32 = (20.0 * fTemp43);
			let mut fTemp125: f32 = (fSlow4 + (self.fRec0[0] + -1.0));
			let mut fTemp126: f32 = (20.0 * fTemp0);
			let mut fTemp127: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 80.0 } else { if (iTemp57 as i32 == 1) { (80.0 - fTemp126) } else { 60.0 } } } else { if (iTemp42 as i32 == 1) { (60.0 - (10.0 * fTemp125)) } else { 50.0 } } } else { if (iTemp40 as i32 == 1) { (fTemp124 + 50.0) } else { 70.0 } } } else { if (iTemp38 as i32 == 1) { (70.0 - fTemp123) } else { 50.0 } } } else { if (iTemp36 as i32 == 1) { (fTemp122 + 50.0) } else { 60.0 } } } else { if (iTemp34 as i32 == 1) { (60.0 - (20.0 * fTemp37)) } else { 40.0 } } } else { if (iTemp32 as i32 == 1) { ((20.0 * fTemp35) + 40.0) } else { 60.0 } } } else { if (iTemp30 as i32 == 1) { (60.0 - (20.0 * fTemp33)) } else { 40.0 } } } else { 40.0 } } else { if (iTemp26 as i32 == 1) { (40.0 * (fTemp29 + 1.0)) } else { 80.0 } } } else { if (iTemp23 as i32 == 1) { (80.0 - fTemp121) } else { 70.0 } } } else { if (iTemp21 as i32 == 1) { (70.0 - (30.0 * fTemp24)) } else { 40.0 } } } else { 40.0 } } else { 40.0 } } else { if (iTemp16 as i32 == 1) { (40.0 * (fTemp19 + 1.0)) } else { 80.0 } } } else { if (iTemp14 as i32 == 1) { (80.0 - fTemp120) } else { 60.0 } } } else { 60.0 } } else { if (iTemp10 as i32 == 1) { (60.0 - (20.0 * fTemp13)) } else { 40.0 } } } else { if (iTemp8 as i32 == 1) { ((10.0 * fTemp11) + 40.0) } else { 50.0 } } } else { 50.0 } } else { if (iTemp4 as i32 == 1) { (fTemp52 + 50.0) } else { 70.0 } } } else { if (iTemp2 as i32 == 1) { (70.0 - (30.0 * fTemp5)) } else { 40.0 } } } else { if (iTemp1 as i32 == 1) { ((30.0 * fTemp3) + 40.0) } else { 70.0 } } } else { if (iTemp50 as i32 == 1) { (70.0 - (30.0 * fTemp51)) } else { 40.0 } };
			self.fRec14[0] = ((self.fConst4 * self.fRec14[1]) + (self.fConst5 * (fTemp71 * fTemp127)));
			let mut fTemp128: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec14[0])));
			self.fRec15[0] = ((self.fConst4 * self.fRec15[1]) + (self.fConst5 * fTemp127));
			let mut fTemp129: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec15[0])));
			self.fRec13[0] = ((self.iVec3[1] as f32) - ((self.fRec13[1] * (0.0 - (fTemp128 + fTemp129))) + ((fTemp128 * fTemp129) * self.fRec13[2])));
			let mut fTemp130: f32 = (fSlow4 + (self.fRec11[0] + -18.0));
			let mut fTemp131: f32 = (fSlow4 + (self.fRec11[0] + -17.0));
			let mut fTemp132: f32 = (fSlow4 + (self.fRec11[0] + -16.0));
			let mut fTemp133: f32 = (fSlow4 + (self.fRec11[0] + -15.0));
			let mut iTemp134: i32 = ((fTemp78 < 3.0) as i32);
			let mut fTemp135: f32 = (fSlow4 + (self.fRec11[0] + -3.0));
			let mut iTemp136: i32 = ((fTemp78 < 2.0) as i32);
			let mut fTemp137: f32 = (fSlow4 + (self.fRec11[0] + -2.0));
			let mut iTemp138: i32 = ((fTemp78 < 1.0) as i32);
			let mut fTemp139: f32 = (fSlow4 + (self.fRec11[0] + -1.0));
			let mut iTemp140: i32 = ((fTemp78 < 0.0) as i32);
			let mut fTemp141: f32 = if (iTemp79 as i32 == 1) { if (iTemp82 as i32 == 1) { if (iTemp84 as i32 == 1) { if (iTemp86 as i32 == 1) { if (iTemp88 as i32 == 1) { if (iTemp90 as i32 == 1) { if (iTemp91 as i32 == 1) { if (iTemp92 as i32 == 1) { if (iTemp93 as i32 == 1) { if (iTemp94 as i32 == 1) { if (iTemp96 as i32 == 1) { if (iTemp98 as i32 == 1) { if (iTemp100 as i32 == 1) { if (iTemp102 as i32 == 1) { if (iTemp105 as i32 == 1) { if (iTemp107 as i32 == 1) { if (iTemp110 as i32 == 1) { if (iTemp112 as i32 == 1) { if (iTemp114 as i32 == 1) { if (iTemp117 as i32 == 1) { if (iTemp134 as i32 == 1) { if (iTemp136 as i32 == 1) { if (iTemp138 as i32 == 1) { if (iTemp140 as i32 == 1) { 800.0 } else { if (iTemp138 as i32 == 1) { (800.0 - (400.0 * fTemp78)) } else { 400.0 } } } else { if (iTemp136 as i32 == 1) { (400.0 - (50.0 * fTemp139)) } else { 350.0 } } } else { if (iTemp134 as i32 == 1) { ((100.0 * fTemp137) + 350.0) } else { 450.0 } } } else { if (iTemp117 as i32 == 1) { (450.0 - (125.0 * fTemp135)) } else { 325.0 } } } else { if (iTemp114 as i32 == 1) { ((275.0 * fTemp118) + 325.0) } else { 600.0 } } } else { if (iTemp112 as i32 == 1) { (600.0 - (200.0 * fTemp115)) } else { 400.0 } } } else { if (iTemp110 as i32 == 1) { (400.0 - (150.0 * fTemp113)) } else { 250.0 } } } else { if (iTemp107 as i32 == 1) { ((150.0 * fTemp111) + 250.0) } else { 400.0 } } } else { if (iTemp105 as i32 == 1) { (400.0 - fTemp109) } else { 350.0 } } } else { if (iTemp102 as i32 == 1) { ((310.0 * fTemp106) + 350.0) } else { 660.0 } } } else { if (iTemp100 as i32 == 1) { (660.0 - (220.0 * fTemp103)) } else { 440.0 } } } else { if (iTemp98 as i32 == 1) { (440.0 - (170.0 * fTemp101)) } else { 270.0 } } } else { if (iTemp96 as i32 == 1) { ((160.0 * fTemp99) + 270.0) } else { 430.0 } } } else { if (iTemp94 as i32 == 1) { (430.0 - (60.0 * fTemp97)) } else { 370.0 } } } else { if (iTemp93 as i32 == 1) { ((430.0 * fTemp95) + 370.0) } else { 800.0 } } } else { if (iTemp92 as i32 == 1) { (800.0 - (450.0 * fTemp133)) } else { 350.0 } } } else { if (iTemp91 as i32 == 1) { (350.0 - (80.0 * fTemp132)) } else { 270.0 } } } else { if (iTemp90 as i32 == 1) { ((180.0 * fTemp131) + 270.0) } else { 450.0 } } } else { if (iTemp88 as i32 == 1) { (450.0 - (125.0 * fTemp130)) } else { 325.0 } } } else { if (iTemp86 as i32 == 1) { (325.0 * (fTemp89 + 1.0)) } else { 650.0 } } } else { if (iTemp84 as i32 == 1) { (650.0 - (250.0 * fTemp87)) } else { 400.0 } } } else { if (iTemp82 as i32 == 1) { (400.0 - (110.0 * fTemp85)) } else { 290.0 } } } else { if (iTemp79 as i32 == 1) { ((110.0 * fTemp83) + 290.0) } else { 400.0 } } } else { if (iTemp80 as i32 == 1) { (400.0 - (50.0 * fTemp81)) } else { 350.0 } };
			let mut fTemp142: f32 = ((self.fRec16[1] * (iTemp77 as f32)) + (self.fConst7 * if (((fTemp141 <= fTemp74) as i32) as i32 == 1) { fTemp74 } else { fTemp141 }));
			self.fRec16[0] = (fTemp142 - f32::floor(fTemp142));
			let mut fTemp143: f32 = (10.0 * fTemp3);
			let mut fTemp144: f32 = (10.0 * fTemp7);
			let mut fTemp145: f32 = (fSlow4 + (self.fRec0[0] + -13.0));
			let mut fTemp146: f32 = (10.0 * fTemp29);
			let mut fTemp147: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 90.0 } else { if (iTemp57 as i32 == 1) { (90.0 - (10.0 * fTemp0)) } else { 80.0 } } } else { if (iTemp42 as i32 == 1) { ((20.0 * fTemp125) + 80.0) } else { 100.0 } } } else { if (iTemp40 as i32 == 1) { (100.0 - fTemp124) } else { 80.0 } } } else { if (iTemp38 as i32 == 1) { (80.0 - fTemp123) } else { 60.0 } } } else { if (iTemp36 as i32 == 1) { (fTemp122 + 60.0) } else { 70.0 } } } else { if (iTemp34 as i32 == 1) { (fTemp56 + 70.0) } else { 80.0 } } } else { if (iTemp32 as i32 == 1) { ((10.0 * fTemp35) + 80.0) } else { 90.0 } } } else { if (iTemp30 as i32 == 1) { (90.0 - (10.0 * fTemp33)) } else { 80.0 } } } else { 80.0 } } else { if (iTemp26 as i32 == 1) { (fTemp146 + 80.0) } else { 90.0 } } } else { if (iTemp23 as i32 == 1) { (90.0 - fTemp121) } else { 80.0 } } } else { if (iTemp21 as i32 == 1) { ((10.0 * fTemp24) + 80.0) } else { 90.0 } } } else { if (iTemp20 as i32 == 1) { (90.0 - (10.0 * fTemp22)) } else { 80.0 } } } else { if (iTemp18 as i32 == 1) { (80.0 - (20.0 * fTemp145)) } else { 60.0 } } } else { if (iTemp16 as i32 == 1) { ((30.0 * fTemp19) + 60.0) } else { 90.0 } } } else { if (iTemp14 as i32 == 1) { ((10.0 * fTemp17) + 90.0) } else { 100.0 } } } else { if (iTemp12 as i32 == 1) { (100.0 - (10.0 * fTemp15)) } else { 90.0 } } } else { if (iTemp10 as i32 == 1) { (90.0 - (10.0 * fTemp13)) } else { 80.0 } } } else { if (iTemp8 as i32 == 1) { (80.0 - (20.0 * fTemp11)) } else { 60.0 } } } else { if (iTemp6 as i32 == 1) { ((30.0 * fTemp9) + 60.0) } else { 90.0 } } } else { if (iTemp4 as i32 == 1) { (90.0 - fTemp144) } else { 80.0 } } } else { if (iTemp2 as i32 == 1) { ((10.0 * fTemp5) + 80.0) } else { 90.0 } } } else { if (iTemp1 as i32 == 1) { (90.0 - fTemp143) } else { 80.0 } } } else { if (iTemp50 as i32 == 1) { (80.0 - (20.0 * fTemp51)) } else { 60.0 } };
			self.fRec18[0] = ((self.fConst4 * self.fRec18[1]) + (self.fConst5 * (fTemp71 * fTemp147)));
			let mut fTemp148: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec18[0])));
			self.fRec19[0] = ((self.fConst4 * self.fRec19[1]) + (self.fConst5 * fTemp147));
			let mut fTemp149: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec19[0])));
			self.fRec17[0] = ((self.iVec3[1] as f32) - ((self.fRec17[1] * (0.0 - (fTemp148 + fTemp149))) + ((fTemp148 * fTemp149) * self.fRec17[2])));
			let mut fTemp150: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 0.630957007 } else { if (iTemp57 as i32 == 1) { (0.630957007 - (0.567861021 * fTemp0)) } else { 0.0630960017 } } } else { if (iTemp42 as i32 == 1) { ((0.0369039997 * fTemp125) + 0.0630960017) } else { 0.100000001 } } } else { if (iTemp40 as i32 == 1) { ((0.254812986 * fTemp43) + 0.100000001) } else { 0.35481301 } } } else { if (iTemp38 as i32 == 1) { (0.35481301 - (0.103624001 * fTemp41)) } else { 0.251188993 } } } else { if (iTemp36 as i32 == 1) { ((0.195494995 * fTemp39) + 0.251188993) } else { 0.446684003 } } } else { if (iTemp34 as i32 == 1) { (0.446684003 - (0.195494995 * fTemp37)) } else { 0.251188993 } } } else { if (iTemp32 as i32 == 1) { (0.251188993 - (0.219566002 * fTemp35)) } else { 0.0316229984 } } } else { if (iTemp30 as i32 == 1) { ((0.250214994 * fTemp33) + 0.0316229984) } else { 0.281838 } } } else { if (iTemp28 as i32 == 1) { (0.281838 - (0.181838006 * fTemp31)) } else { 0.100000001 } } } else { if (iTemp26 as i32 == 1) { ((0.401187003 * fTemp29) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp23 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp27)) } else { 0.199525997 } } } else { if (iTemp21 as i32 == 1) { (0.199525997 - (0.136429995 * fTemp24)) } else { 0.0630960017 } } } else { if (iTemp20 as i32 == 1) { ((0.253131986 * fTemp22) + 0.0630960017) } else { 0.316228002 } } } else { if (iTemp18 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp145)) } else { 0.100000001 } } } else { if (iTemp16 as i32 == 1) { ((0.401187003 * fTemp19) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp14 as i32 == 1) { (0.501187027 - (0.401187003 * fTemp17)) } else { 0.100000001 } } } else { if (iTemp12 as i32 == 1) { ((0.151188999 * fTemp15) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp10 as i32 == 1) { ((0.0306490008 * fTemp13) + 0.251188993) } else { 0.281838 } } } else { if (iTemp8 as i32 == 1) { (0.281838 - (0.123349003 * fTemp11)) } else { 0.158489004 } } } else { if (iTemp6 as i32 == 1) { ((0.342698008 * fTemp9) + 0.158489004) } else { 0.501187027 } } } else { if (iTemp4 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp7)) } else { 0.199525997 } } } else { if (iTemp2 as i32 == 1) { (0.199525997 - (0.0216979999 * fTemp5)) } else { 0.177827999 } } } else { if (iTemp1 as i32 == 1) { ((0.138400003 * fTemp3) + 0.177827999) } else { 0.316228002 } } } else { if (iTemp50 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp51)) } else { 0.100000001 } };
			let mut fTemp151: f32 = if (iTemp79 as i32 == 1) { if (iTemp82 as i32 == 1) { if (iTemp84 as i32 == 1) { if (iTemp86 as i32 == 1) { if (iTemp88 as i32 == 1) { if (iTemp90 as i32 == 1) { if (iTemp91 as i32 == 1) { if (iTemp92 as i32 == 1) { if (iTemp93 as i32 == 1) { if (iTemp94 as i32 == 1) { if (iTemp96 as i32 == 1) { if (iTemp98 as i32 == 1) { if (iTemp100 as i32 == 1) { if (iTemp102 as i32 == 1) { if (iTemp105 as i32 == 1) { if (iTemp107 as i32 == 1) { if (iTemp110 as i32 == 1) { if (iTemp112 as i32 == 1) { if (iTemp114 as i32 == 1) { if (iTemp117 as i32 == 1) { if (iTemp134 as i32 == 1) { if (iTemp136 as i32 == 1) { if (iTemp138 as i32 == 1) { if (iTemp140 as i32 == 1) { 1150.0 } else { if (iTemp138 as i32 == 1) { ((450.0 * fTemp78) + 1150.0) } else { 1600.0 } } } else { if (iTemp136 as i32 == 1) { ((100.0 * fTemp139) + 1600.0) } else { 1700.0 } } } else { if (iTemp134 as i32 == 1) { (1700.0 - (900.0 * fTemp137)) } else { 800.0 } } } else { if (iTemp117 as i32 == 1) { (800.0 - (100.0 * fTemp135)) } else { 700.0 } } } else { if (iTemp114 as i32 == 1) { ((340.0 * fTemp118) + 700.0) } else { 1040.0 } } } else { if (iTemp112 as i32 == 1) { ((580.0 * fTemp115) + 1040.0) } else { 1620.0 } } } else { if (iTemp110 as i32 == 1) { ((130.0 * fTemp113) + 1620.0) } else { 1750.0 } } } else { if (iTemp107 as i32 == 1) { (1750.0 - (1000.0 * fTemp111)) } else { 750.0 } } } else { if (iTemp105 as i32 == 1) { (750.0 - (150.0 * fTemp108)) } else { 600.0 } } } else { if (iTemp102 as i32 == 1) { ((520.0 * fTemp106) + 600.0) } else { 1120.0 } } } else { if (iTemp100 as i32 == 1) { ((680.0 * fTemp103) + 1120.0) } else { 1800.0 } } } else { if (iTemp98 as i32 == 1) { ((50.0 * fTemp101) + 1800.0) } else { 1850.0 } } } else { if (iTemp96 as i32 == 1) { (1850.0 - (1030.0 * fTemp99)) } else { 820.0 } } } else { if (iTemp94 as i32 == 1) { (820.0 - (190.0 * fTemp97)) } else { 630.0 } } } else { if (iTemp93 as i32 == 1) { ((520.0 * fTemp95) + 630.0) } else { 1150.0 } } } else { if (iTemp92 as i32 == 1) { ((850.0 * fTemp133) + 1150.0) } else { 2000.0 } } } else { if (iTemp91 as i32 == 1) { ((140.0 * fTemp132) + 2000.0) } else { 2140.0 } } } else { if (iTemp90 as i32 == 1) { (2140.0 - (1340.0 * fTemp131)) } else { 800.0 } } } else { if (iTemp88 as i32 == 1) { (800.0 - (100.0 * fTemp130)) } else { 700.0 } } } else { if (iTemp86 as i32 == 1) { ((380.0 * fTemp89) + 700.0) } else { 1080.0 } } } else { if (iTemp84 as i32 == 1) { ((620.0 * fTemp87) + 1080.0) } else { 1700.0 } } } else { if (iTemp82 as i32 == 1) { ((170.0 * fTemp85) + 1700.0) } else { 1870.0 } } } else { if (iTemp79 as i32 == 1) { (1870.0 - (1070.0 * fTemp83)) } else { 800.0 } } } else { if (iTemp80 as i32 == 1) { (800.0 - (200.0 * fTemp81)) } else { 600.0 } };
			let mut fTemp152: f32 = ((fSlow22 * fTemp73) + 30.0);
			let mut fTemp153: f32 = (((iTemp77 as f32) * self.fRec20[1]) + (self.fConst7 * if (iSlow21 as i32 == 1) { if ((((fTemp151 >= 1300.0) as i32) & ((fTemp74 >= 200.0) as i32)) as i32 == 1) { (fTemp151 - (0.000952380942 * ((fTemp74 + -200.0) * (fTemp151 + -1300.0)))) } else { if (((fTemp151 <= fTemp152) as i32) as i32 == 1) { fTemp152 } else { fTemp151 } } } else { fTemp151 }));
			self.fRec20[0] = (fTemp153 - f32::floor(fTemp153));
			let mut fTemp154: f32 = (50.0 * fTemp9);
			let mut fTemp155: f32 = (60.0 * fTemp39);
			let mut fTemp156: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { 120.0 } else { if (iTemp40 as i32 == 1) { (120.0 - fTemp124) } else { 100.0 } } } else { if (iTemp38 as i32 == 1) { ((70.0 * fTemp41) + 100.0) } else { 170.0 } } } else { if (iTemp36 as i32 == 1) { (170.0 - fTemp155) } else { 110.0 } } } else { if (iTemp34 as i32 == 1) { (110.0 - fTemp56) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp26 as i32 == 1) { (fTemp55 + 100.0) } else { 120.0 } } } else { if (iTemp23 as i32 == 1) { (120.0 - fTemp54) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp16 as i32 == 1) { (fTemp53 + 100.0) } else { 120.0 } } } else { 120.0 } } else { if (iTemp12 as i32 == 1) { (120.0 - (20.0 * fTemp15)) } else { 100.0 } } } else { 100.0 } } else { if (iTemp8 as i32 == 1) { ((70.0 * fTemp11) + 100.0) } else { 170.0 } } } else { if (iTemp6 as i32 == 1) { (170.0 - fTemp154) } else { 120.0 } } } else { if (iTemp4 as i32 == 1) { (120.0 - fTemp52) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 };
			self.fRec22[0] = ((self.fConst4 * self.fRec22[1]) + (self.fConst5 * (fTemp71 * fTemp156)));
			let mut fTemp157: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec22[0])));
			self.fRec23[0] = ((self.fConst4 * self.fRec23[1]) + (self.fConst5 * fTemp156));
			let mut fTemp158: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec23[0])));
			self.fRec21[0] = ((self.iVec3[1] as f32) - ((self.fRec21[1] * (0.0 - (fTemp157 + fTemp158))) + ((fTemp157 * fTemp158) * self.fRec21[2])));
			let mut fTemp159: f32 = if (iTemp10 as i32 == 1) { ((0.0293140002 * fTemp13) + 0.0501190014) } else { 0.0794330016 };
			let mut fTemp160: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 0.100000001 } else { if (iTemp57 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp0)) } else { 0.0316229984 } } } else { 0.0316229984 } } else { if (iTemp40 as i32 == 1) { ((0.126865998 * fTemp43) + 0.0316229984) } else { 0.158489004 } } } else { if (iTemp38 as i32 == 1) { (0.158489004 - (0.126865998 * fTemp41)) } else { 0.0316229984 } } } else { if (iTemp36 as i32 == 1) { ((0.323190004 * fTemp39) + 0.0316229984) } else { 0.35481301 } } } else { 0.35481301 } } else { if (iTemp32 as i32 == 1) { (0.35481301 - (0.196324006 * fTemp35)) } else { 0.158489004 } } } else { if (iTemp30 as i32 == 1) { (0.158489004 - (0.0693639964 * fTemp33)) } else { 0.0891249999 } } } else { if (iTemp28 as i32 == 1) { (0.0891249999 - (0.0640060008 * fTemp31)) } else { 0.0251189992 } } } else { if (iTemp26 as i32 == 1) { ((0.0456760004 * fTemp29) + 0.0251189992) } else { 0.0707949996 } } } else { if (iTemp23 as i32 == 1) { ((0.0550980009 * fTemp27) + 0.0707949996) } else { 0.125892997 } } } else { if (iTemp21 as i32 == 1) { (0.125892997 - (0.0627970025 * fTemp24)) } else { 0.0630960017 } } } else { if (iTemp20 as i32 == 1) { (0.0630960017 - (0.0129770003 * fTemp22)) } else { 0.0501190014 } } } else { if (iTemp18 as i32 == 1) { ((0.020676 * fTemp145) + 0.0501190014) } else { 0.0707949996 } } } else { if (iTemp16 as i32 == 1) { (0.0707949996 - (0.0456760004 * fTemp19)) } else { 0.0251189992 } } } else { if (iTemp14 as i32 == 1) { ((0.152709007 * fTemp17) + 0.0251189992) } else { 0.177827999 } } } else { if (iTemp12 as i32 == 1) { (0.177827999 - (0.127709001 * fTemp15)) } else { 0.0501190014 } } } else { fTemp159 } } else { if (iTemp8 as i32 == 1) { (0.0794330016 - (0.0616500005 * fTemp11)) } else { 0.0177829992 } } } else { if (iTemp6 as i32 == 1) { ((0.428900987 * fTemp9) + 0.0177829992) } else { 0.446684003 } } } else { if (iTemp4 as i32 == 1) { (0.446684003 - (0.195494995 * fTemp7)) } else { 0.251188993 } } } else { if (iTemp2 as i32 == 1) { (0.251188993 - (0.125295997 * fTemp5)) } else { 0.125892997 } } } else { if (iTemp1 as i32 == 1) { ((0.125295997 * fTemp3) + 0.125892997) } else { 0.251188993 } } } else { if (iTemp50 as i32 == 1) { (0.251188993 - (0.109935001 * fTemp51)) } else { 0.141253993 } };
			let mut fTemp161: f32 = (100.0 * fTemp81);
			let mut fTemp162: f32 = (((iTemp77 as f32) * self.fRec24[1]) + (self.fConst7 * if (iTemp79 as i32 == 1) { if (iTemp82 as i32 == 1) { if (iTemp84 as i32 == 1) { if (iTemp86 as i32 == 1) { if (iTemp88 as i32 == 1) { if (iTemp90 as i32 == 1) { if (iTemp91 as i32 == 1) { if (iTemp92 as i32 == 1) { if (iTemp93 as i32 == 1) { if (iTemp94 as i32 == 1) { if (iTemp96 as i32 == 1) { if (iTemp98 as i32 == 1) { if (iTemp100 as i32 == 1) { if (iTemp102 as i32 == 1) { if (iTemp105 as i32 == 1) { if (iTemp107 as i32 == 1) { if (iTemp110 as i32 == 1) { if (iTemp112 as i32 == 1) { if (iTemp114 as i32 == 1) { if (iTemp117 as i32 == 1) { if (iTemp134 as i32 == 1) { if (iTemp136 as i32 == 1) { if (iTemp138 as i32 == 1) { if (iTemp140 as i32 == 1) { 2800.0 } else { if (iTemp138 as i32 == 1) { (2800.0 - (100.0 * fTemp78)) } else { 2700.0 } } } else { 2700.0 } } else { if (iTemp134 as i32 == 1) { ((130.0 * fTemp137) + 2700.0) } else { 2830.0 } } } else { if (iTemp117 as i32 == 1) { (2830.0 - (300.0 * fTemp135)) } else { 2530.0 } } } else { if (iTemp114 as i32 == 1) { (2530.0 - (280.0 * fTemp118)) } else { 2250.0 } } } else { if (iTemp112 as i32 == 1) { ((150.0 * fTemp115) + 2250.0) } else { 2400.0 } } } else { if (iTemp110 as i32 == 1) { ((200.0 * fTemp113) + 2400.0) } else { 2600.0 } } } else { if (iTemp107 as i32 == 1) { (2600.0 - (200.0 * fTemp111)) } else { 2400.0 } } } else { 2400.0 } } else { if (iTemp102 as i32 == 1) { ((350.0 * fTemp106) + 2400.0) } else { 2750.0 } } } else { if (iTemp100 as i32 == 1) { (2750.0 - fTemp104) } else { 2700.0 } } } else { if (iTemp98 as i32 == 1) { ((200.0 * fTemp101) + 2700.0) } else { 2900.0 } } } else { if (iTemp96 as i32 == 1) { (2900.0 - (200.0 * fTemp99)) } else { 2700.0 } } } else { if (iTemp94 as i32 == 1) { ((50.0 * fTemp97) + 2700.0) } else { 2750.0 } } } else { if (iTemp93 as i32 == 1) { ((150.0 * fTemp95) + 2750.0) } else { 2900.0 } } } else { if (iTemp92 as i32 == 1) { (2900.0 - (100.0 * fTemp133)) } else { 2800.0 } } } else { if (iTemp91 as i32 == 1) { ((150.0 * fTemp132) + 2800.0) } else { 2950.0 } } } else { if (iTemp90 as i32 == 1) { (2950.0 - (120.0 * fTemp131)) } else { 2830.0 } } } else { if (iTemp88 as i32 == 1) { (2830.0 - (130.0 * fTemp130)) } else { 2700.0 } } } else { if (iTemp86 as i32 == 1) { (2700.0 - (50.0 * fTemp89)) } else { 2650.0 } } } else { if (iTemp84 as i32 == 1) { (2650.0 - (50.0 * fTemp87)) } else { 2600.0 } } } else { if (iTemp82 as i32 == 1) { ((200.0 * fTemp85) + 2600.0) } else { 2800.0 } } } else { if (iTemp79 as i32 == 1) { (2800.0 - (200.0 * fTemp83)) } else { 2600.0 } } } else { if (iTemp80 as i32 == 1) { (fTemp161 + 2600.0) } else { 2700.0 } }));
			self.fRec24[0] = (fTemp162 - f32::floor(fTemp162));
			let mut fTemp163: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 130.0 } else { if (iTemp57 as i32 == 1) { (fTemp126 + 130.0) } else { 150.0 } } } else { 150.0 } } else { if (iTemp40 as i32 == 1) { (150.0 - fTemp124) } else { 130.0 } } } else { if (iTemp38 as i32 == 1) { ((50.0 * fTemp41) + 130.0) } else { 180.0 } } } else { if (iTemp36 as i32 == 1) { (180.0 - fTemp155) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp26 as i32 == 1) { (fTemp146 + 120.0) } else { 130.0 } } } else { if (iTemp23 as i32 == 1) { (130.0 - fTemp121) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp16 as i32 == 1) { ((10.0 * fTemp19) + 120.0) } else { 130.0 } } } else { if (iTemp14 as i32 == 1) { (fTemp120 + 130.0) } else { 150.0 } } } else { if (iTemp12 as i32 == 1) { (150.0 - (30.0 * fTemp15)) } else { 120.0 } } } else { 120.0 } } else { if (iTemp8 as i32 == 1) { ((60.0 * fTemp11) + 120.0) } else { 180.0 } } } else { if (iTemp6 as i32 == 1) { (180.0 - fTemp154) } else { 130.0 } } } else { if (iTemp4 as i32 == 1) { (130.0 - fTemp144) } else { 120.0 } } } else { 120.0 } } else { if (iTemp1 as i32 == 1) { (fTemp143 + 120.0) } else { 130.0 } } } else { if (iTemp50 as i32 == 1) { (130.0 - (10.0 * fTemp51)) } else { 120.0 } };
			self.fRec26[0] = ((self.fConst4 * self.fRec26[1]) + (self.fConst5 * (fTemp71 * fTemp163)));
			let mut fTemp164: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec26[0])));
			self.fRec27[0] = ((self.fConst4 * self.fRec27[1]) + (self.fConst5 * fTemp163));
			let mut fTemp165: f32 = f32::exp((self.fConst2 * (0.0 - self.fRec27[0])));
			self.fRec25[0] = ((self.iVec3[1] as f32) - ((self.fRec25[1] * (0.0 - (fTemp164 + fTemp165))) + ((fTemp164 * fTemp165) * self.fRec25[2])));
			let mut fTemp166: f32 = if (iTemp1 as i32 == 1) { if (iTemp2 as i32 == 1) { if (iTemp4 as i32 == 1) { if (iTemp6 as i32 == 1) { if (iTemp8 as i32 == 1) { if (iTemp10 as i32 == 1) { if (iTemp12 as i32 == 1) { if (iTemp14 as i32 == 1) { if (iTemp16 as i32 == 1) { if (iTemp18 as i32 == 1) { if (iTemp20 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp42 as i32 == 1) { if (iTemp57 as i32 == 1) { if (iTemp58 as i32 == 1) { 0.0158489998 } else { if (iTemp57 as i32 == 1) { ((0.00193400006 * fTemp0) + 0.0158489998) } else { 0.0177829992 } } } else { if (iTemp42 as i32 == 1) { (0.0177829992 - (0.00193400006 * fTemp125)) } else { 0.0158489998 } } } else { if (iTemp40 as i32 == 1) { ((0.0239620004 * fTemp43) + 0.0158489998) } else { 0.0398110002 } } } else { if (iTemp38 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp41)) } else { 0.00999999978 } } } else { if (iTemp36 as i32 == 1) { ((0.344812989 * fTemp39) + 0.00999999978) } else { 0.35481301 } } } else { if (iTemp34 as i32 == 1) { (0.35481301 - (0.103624001 * fTemp37)) } else { 0.251188993 } } } else { if (iTemp32 as i32 == 1) { (0.251188993 - (0.171755999 * fTemp35)) } else { 0.0794330016 } } } else { if (iTemp30 as i32 == 1) { ((0.0205669999 * fTemp33) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp28 as i32 == 1) { (0.100000001 - (0.0601890013 * fTemp31)) } else { 0.0398110002 } } } else { if (iTemp26 as i32 == 1) { ((0.0232849997 * fTemp29) + 0.0398110002) } else { 0.0630960017 } } } else { if (iTemp23 as i32 == 1) { ((0.0369039997 * fTemp27) + 0.0630960017) } else { 0.100000001 } } } else { fTemp25 } } else { if (iTemp20 as i32 == 1) { ((0.0635839999 * fTemp22) + 0.0158489998) } else { 0.0794330016 } } } else { if (iTemp18 as i32 == 1) { (0.0794330016 - (0.0478099994 * fTemp145)) } else { 0.0316229984 } } } else { if (iTemp16 as i32 == 1) { ((0.0683770031 * fTemp19) + 0.0316229984) } else { 0.100000001 } } } else { if (iTemp14 as i32 == 1) { (0.100000001 - (0.0900000036 * fTemp17)) } else { 0.00999999978 } } } else { if (iTemp12 as i32 == 1) { ((0.0401189998 * fTemp15) + 0.00999999978) } else { 0.0501190014 } } } else { fTemp159 } } else { if (iTemp8 as i32 == 1) { (0.0794330016 - (0.0694330037 * fTemp11)) } else { 0.00999999978 } } } else { if (iTemp6 as i32 == 1) { ((0.388107002 * fTemp9) + 0.00999999978) } else { 0.398106992 } } } else { if (iTemp4 as i32 == 1) { (0.398106992 - (0.198580995 * fTemp7)) } else { 0.199525997 } } } else { if (iTemp2 as i32 == 1) { (0.199525997 - (0.099526003 * fTemp5)) } else { 0.100000001 } } } else { if (iTemp1 as i32 == 1) { ((0.151188999 * fTemp3) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp50 as i32 == 1) { (0.251188993 - (0.0516630001 * fTemp51)) } else { 0.199525997 } };
			let mut fTemp167: f32 = (((iTemp77 as f32) * self.fRec28[1]) + (self.fConst7 * if (iTemp79 as i32 == 1) { if (iTemp82 as i32 == 1) { if (iTemp84 as i32 == 1) { if (iTemp86 as i32 == 1) { if (iTemp88 as i32 == 1) { if (iTemp90 as i32 == 1) { if (iTemp91 as i32 == 1) { if (iTemp92 as i32 == 1) { if (iTemp93 as i32 == 1) { if (iTemp94 as i32 == 1) { if (iTemp96 as i32 == 1) { if (iTemp98 as i32 == 1) { if (iTemp100 as i32 == 1) { if (iTemp102 as i32 == 1) { if (iTemp105 as i32 == 1) { if (iTemp107 as i32 == 1) { if (iTemp110 as i32 == 1) { if (iTemp112 as i32 == 1) { if (iTemp114 as i32 == 1) { if (iTemp117 as i32 == 1) { if (iTemp134 as i32 == 1) { if (iTemp136 as i32 == 1) { if (iTemp138 as i32 == 1) { if (iTemp140 as i32 == 1) { 3500.0 } else { if (iTemp138 as i32 == 1) { (3500.0 - (200.0 * fTemp78)) } else { 3300.0 } } } else { if (iTemp136 as i32 == 1) { ((400.0 * fTemp139) + 3300.0) } else { 3700.0 } } } else { if (iTemp134 as i32 == 1) { (3700.0 - (200.0 * fTemp137)) } else { 3500.0 } } } else { 3500.0 } } else { if (iTemp114 as i32 == 1) { (3500.0 - (1050.0 * fTemp118)) } else { 2450.0 } } } else { if (iTemp112 as i32 == 1) { (fTemp116 + 2450.0) } else { 2800.0 } } } else { if (iTemp110 as i32 == 1) { ((250.0 * fTemp113) + 2800.0) } else { 3050.0 } } } else { if (iTemp107 as i32 == 1) { (3050.0 - (450.0 * fTemp111)) } else { 2600.0 } } } else { if (iTemp105 as i32 == 1) { ((75.0 * fTemp108) + 2600.0) } else { 2675.0 } } } else { if (iTemp102 as i32 == 1) { ((325.0 * fTemp106) + 2675.0) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp98 as i32 == 1) { ((350.0 * fTemp101) + 3000.0) } else { 3350.0 } } } else { if (iTemp96 as i32 == 1) { (3350.0 - (350.0 * fTemp99)) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp93 as i32 == 1) { ((900.0 * fTemp95) + 3000.0) } else { 3900.0 } } } else { if (iTemp92 as i32 == 1) { (3900.0 - (300.0 * fTemp133)) } else { 3600.0 } } } else { if (iTemp91 as i32 == 1) { ((300.0 * fTemp132) + 3600.0) } else { 3900.0 } } } else { if (iTemp90 as i32 == 1) { (3900.0 - (100.0 * fTemp131)) } else { 3800.0 } } } else { 3800.0 } } else { if (iTemp86 as i32 == 1) { (3800.0 - (900.0 * fTemp89)) } else { 2900.0 } } } else { if (iTemp84 as i32 == 1) { ((300.0 * fTemp87) + 2900.0) } else { 3200.0 } } } else { if (iTemp82 as i32 == 1) { ((50.0 * fTemp85) + 3200.0) } else { 3250.0 } } } else { if (iTemp79 as i32 == 1) { (3250.0 - (450.0 * fTemp83)) } else { 2800.0 } } } else { if (iTemp80 as i32 == 1) { (fTemp161 + 2800.0) } else { 2900.0 } }));
			self.fRec28[0] = (fTemp167 - f32::floor(fTemp167));
			self.fRec29[0] = (fSlow24 + (fSlow23 * self.fRec29[1]));
			let mut fTemp168: f32 = (fSlow0 * ((((((((if (iSlow3 as i32 == 1) { (fTemp44 * fTemp49) } else { (fTemp44 * fTemp48) } * (1.0 - (((1.0 - fTemp60) * fTemp72) + fTemp60))) * ftbl0mydspSIG0[((65536.0 * self.fRec7[0]) as i32) as usize]) * self.fRec12[0]) + (((self.fRec13[0] * if (iSlow3 as i32 == 1) { fTemp49 } else { fTemp48 }) * (1.0 - (fTemp129 + (fTemp128 * (1.0 - fTemp129))))) * ftbl0mydspSIG0[((65536.0 * self.fRec16[0]) as i32) as usize])) + (((self.fRec17[0] * if (iSlow3 as i32 == 1) { (fTemp49 * fTemp150) } else { (fTemp48 * fTemp150) }) * (1.0 - (fTemp149 + (fTemp148 * (1.0 - fTemp149))))) * ftbl0mydspSIG0[((65536.0 * self.fRec20[0]) as i32) as usize])) + (((self.fRec21[0] * if (iSlow3 as i32 == 1) { (fTemp49 * fTemp160) } else { (fTemp48 * fTemp160) }) * (1.0 - (fTemp158 + (fTemp157 * (1.0 - fTemp158))))) * ftbl0mydspSIG0[((65536.0 * self.fRec24[0]) as i32) as usize])) + (((self.fRec25[0] * if (iSlow3 as i32 == 1) { (fTemp49 * fTemp166) } else { (fTemp48 * fTemp166) }) * (1.0 - (fTemp165 + (fTemp164 * (1.0 - fTemp165))))) * ftbl0mydspSIG0[((65536.0 * self.fRec28[0]) as i32) as usize])) * self.fRec29[0]));
			outputs[0][i as usize] = (fTemp168 as f32);
			outputs[1][i as usize] = (fTemp168 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec0[1] = self.fRec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[1] = self.fRec10[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec8[1] = self.fRec8[0];
			self.iVec3[1] = self.iVec3[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[1] = self.fRec15[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec16[1] = self.fRec16[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec17[2] = self.fRec17[1];
			self.fRec17[1] = self.fRec17[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec21[2] = self.fRec21[1];
			self.fRec21[1] = self.fRec21[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec29[1] = self.fRec29[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

