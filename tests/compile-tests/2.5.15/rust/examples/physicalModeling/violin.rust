
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iRec10: [i32;2],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fHslider1: f32,
	fRec26: [f32;2],
	fHslider2: f32,
	fRec27: [f32;2],
	fRec22: [f32;2],
	fHslider3: f32,
	fRec28: [f32;2],
	fRec29: [f32;4],
	IOTA: i32,
	fRec30: [f32;2048],
	fVec0: [f32;2],
	fHslider4: f32,
	fRec32: [f32;2],
	fVec1: [f32;2048],
	fRec18: [f32;2048],
	fRec20: [f32;2],
	fRec16: [f32;4],
	fConst6: f32,
	fConst7: f32,
	fRec14: [f32;3],
	fConst8: f32,
	iRec6: [i32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iRec10: [0;2],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fHslider1: 0.0,
			fRec26: [0.0;2],
			fHslider2: 0.0,
			fRec27: [0.0;2],
			fRec22: [0.0;2],
			fHslider3: 0.0,
			fRec28: [0.0;2],
			fRec29: [0.0;4],
			IOTA: 0,
			fRec30: [0.0;2048],
			fVec0: [0.0;2],
			fHslider4: 0.0,
			fRec32: [0.0;2],
			fVec1: [0.0;2048],
			fRec18: [0.0;2048],
			fRec20: [0.0;2],
			fRec16: [0.0;4],
			fConst6: 0.0,
			fConst7: 0.0,
			fRec14: [0.0;3],
			fConst8: 0.0,
			iRec6: [0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple violin physical model controlled with continuous parameters.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "Violin");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.699999988;
		self.fHslider2 = 0.75;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec10[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec26[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec27[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec22[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec28[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec29[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l6: i32 = 0;
		loop {
			self.fRec30[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2048) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec0[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec32[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec1[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2048) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec18[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2048) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec20[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec16[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 4) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec14[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.iRec6[l14 as usize] = 0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec2[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2048) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec0[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = f32::tan((1570.79639 / self.fConst0));
		self.fConst2 = (1.0 / self.fConst1);
		self.fConst3 = (1.0 / (((self.fConst2 + 0.5) / self.fConst1) + 1.0));
		self.fConst4 = (0.00882352982 * self.fConst0);
		self.fConst5 = (0.00147058826 * self.fConst0);
		self.fConst6 = (((self.fConst2 + -0.5) / self.fConst1) + 1.0);
		self.fConst7 = (2.0 * (1.0 - (1.0 / mydsp_faustpower2_f(self.fConst1))));
		self.fConst8 = (0.0 - self.fConst2);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("violin");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openVerticalBox("string");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.addHorizontalSlider("length", &mut self.fHslider2, 0.75, 0.0, 2.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("bow");
		ui_interface.declare(&mut self.fHslider3, "0", "");
		ui_interface.addHorizontalSlider("velocity", &mut self.fHslider3, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "1", "");
		ui_interface.addHorizontalSlider("pressure", &mut self.fHslider4, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.addHorizontalSlider("position", &mut self.fHslider1, 0.69999999999999996, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.00100000005 * (self.fHslider1 as f32));
		let mut fSlow2: f32 = (0.00100000005 * (self.fHslider2 as f32));
		let mut fSlow3: f32 = (0.00100000005 * (self.fHslider3 as f32));
		let mut fSlow4: f32 = (0.00100000005 * (self.fHslider4 as f32));
		let mut i: i32 = 0;
		loop {
			self.iRec10[0] = 0;
			let mut iRec11: i32 = self.iRec10[1];
			let mut fRec15: f32 = ((self.iRec6[1] as f32) - (0.989264667 * ((0.600000024 * self.fRec16[2]) + (0.200000003 * (self.fRec16[1] + self.fRec16[3])))));
			self.fRec26[0] = (fSlow1 + (0.999000013 * self.fRec26[1]));
			self.fRec27[0] = (fSlow2 + (0.999000013 * self.fRec27[1]));
			let mut fTemp0: f32 = (self.fRec27[0] + -0.0799999982);
			let mut fTemp1: f32 = (self.fConst5 * ((1.0 - self.fRec26[0]) * fTemp0));
			let mut fTemp2: f32 = (fTemp1 + -1.49999499);
			let mut iTemp3: i32 = (fTemp2 as i32);
			let mut iTemp4: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp3) as f32)) as i32);
			let mut fTemp5: f32 = f32::floor(fTemp2);
			let mut fTemp6: f32 = (fTemp1 + (-1.0 - fTemp5));
			let mut fTemp7: f32 = (0.0 - fTemp6);
			let mut fTemp8: f32 = (fTemp1 + (-2.0 - fTemp5));
			let mut fTemp9: f32 = (0.0 - (0.5 * fTemp8));
			let mut fTemp10: f32 = (fTemp1 + (-3.0 - fTemp5));
			let mut fTemp11: f32 = (0.0 - (0.333333343 * fTemp10));
			let mut fTemp12: f32 = (fTemp1 + (-4.0 - fTemp5));
			let mut fTemp13: f32 = (0.0 - (0.25 * fTemp12));
			let mut fTemp14: f32 = (fTemp1 - fTemp5);
			let mut iTemp15: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 2)) as f32)) as i32);
			let mut fTemp16: f32 = (0.0 - fTemp10);
			let mut fTemp17: f32 = (0.0 - (0.5 * fTemp12));
			let mut iTemp18: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 1)) as f32)) as i32);
			let mut fTemp19: f32 = (0.0 - fTemp8);
			let mut fTemp20: f32 = (0.0 - (0.5 * fTemp10));
			let mut fTemp21: f32 = (0.0 - (0.333333343 * fTemp12));
			let mut fTemp22: f32 = (fTemp6 * fTemp8);
			let mut iTemp23: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 3)) as f32)) as i32);
			let mut fTemp24: f32 = (0.0 - fTemp12);
			let mut fTemp25: f32 = (fTemp22 * fTemp10);
			let mut iTemp26: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp3 + 4)) as f32)) as i32);
			self.fRec22[0] = (((((self.fRec2[((self.IOTA - (iTemp4 + 1)) & 2047) as usize] * fTemp7) * fTemp9) * fTemp11) * fTemp13) + (fTemp14 * ((((0.5 * (((fTemp6 * self.fRec2[((self.IOTA - (iTemp15 + 1)) & 2047) as usize]) * fTemp16) * fTemp17)) + (((self.fRec2[((self.IOTA - (iTemp18 + 1)) & 2047) as usize] * fTemp19) * fTemp20) * fTemp21)) + (0.166666672 * ((fTemp22 * self.fRec2[((self.IOTA - (iTemp23 + 1)) & 2047) as usize]) * fTemp24))) + (0.0416666679 * (fTemp25 * self.fRec2[((self.IOTA - (iTemp26 + 1)) & 2047) as usize])))));
			self.fRec28[0] = (fSlow3 + (0.999000013 * self.fRec28[1]));
			self.fRec29[0] = self.fRec0[1];
			self.fRec30[(self.IOTA & 2047) as usize] = (0.0 - (0.99880147 * ((0.800000012 * self.fRec29[2]) + (0.100000001 * (self.fRec29[1] + self.fRec29[3])))));
			let mut iRec31: i32 = 0;
			let mut fTemp27: f32 = (self.fConst5 * (self.fRec26[0] * fTemp0));
			let mut fTemp28: f32 = (fTemp27 + -1.49999499);
			let mut iTemp29: i32 = (fTemp28 as i32);
			let mut iTemp30: i32 = (f32::min(self.fConst4, (std::cmp::max(0, iTemp29) as f32)) as i32);
			let mut fTemp31: f32 = f32::floor(fTemp28);
			let mut fTemp32: f32 = (fTemp27 + (-1.0 - fTemp31));
			let mut fTemp33: f32 = (0.0 - fTemp32);
			let mut fTemp34: f32 = (fTemp27 + (-2.0 - fTemp31));
			let mut fTemp35: f32 = (0.0 - (0.5 * fTemp34));
			let mut fTemp36: f32 = (fTemp27 + (-3.0 - fTemp31));
			let mut fTemp37: f32 = (0.0 - (0.333333343 * fTemp36));
			let mut fTemp38: f32 = (fTemp27 + (-4.0 - fTemp31));
			let mut fTemp39: f32 = (0.0 - (0.25 * fTemp38));
			let mut fTemp40: f32 = (fTemp27 - fTemp31);
			let mut iTemp41: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 2)) as f32)) as i32);
			let mut fTemp42: f32 = (0.0 - fTemp36);
			let mut fTemp43: f32 = (0.0 - (0.5 * fTemp38));
			let mut iTemp44: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 1)) as f32)) as i32);
			let mut fTemp45: f32 = (0.0 - fTemp34);
			let mut fTemp46: f32 = (0.0 - (0.5 * fTemp36));
			let mut fTemp47: f32 = (0.0 - (0.333333343 * fTemp38));
			let mut fTemp48: f32 = (fTemp32 * fTemp34);
			let mut iTemp49: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 3)) as f32)) as i32);
			let mut fTemp50: f32 = (0.0 - fTemp38);
			let mut fTemp51: f32 = (fTemp48 * fTemp36);
			let mut iTemp52: i32 = (f32::min(self.fConst4, (std::cmp::max(0, (iTemp29 + 4)) as f32)) as i32);
			self.fVec0[0] = (((((self.fRec30[((self.IOTA - (iTemp30 + 2)) & 2047) as usize] * fTemp33) * fTemp35) * fTemp37) * fTemp39) + (fTemp40 * ((((0.5 * (((fTemp32 * self.fRec30[((self.IOTA - (iTemp41 + 2)) & 2047) as usize]) * fTemp42) * fTemp43)) + (((self.fRec30[((self.IOTA - (iTemp44 + 2)) & 2047) as usize] * fTemp45) * fTemp46) * fTemp47)) + (0.166666672 * ((fTemp48 * self.fRec30[((self.IOTA - (iTemp49 + 2)) & 2047) as usize]) * fTemp50))) + (0.0416666679 * (fTemp51 * self.fRec30[((self.IOTA - (iTemp52 + 2)) & 2047) as usize])))));
			let mut fTemp53: f32 = (self.fRec28[0] - (self.fRec22[1] + self.fVec0[1]));
			self.fRec32[0] = (fSlow4 + (0.999000013 * self.fRec32[1]));
			let mut fTemp54: f32 = (fTemp53 * f32::min(1.0, (1.0 / mydsp_faustpower4_f((f32::abs(((5.0 - (4.0 * self.fRec32[0])) * fTemp53)) + 0.75)))));
			let mut fRec23: f32 = (self.fRec22[1] + fTemp54);
			let mut fTemp55: f32 = (self.fVec0[1] + fTemp54);
			self.fVec1[(self.IOTA & 2047) as usize] = fTemp55;
			let mut fRec24: f32 = (((((fTemp7 * fTemp9) * fTemp11) * fTemp13) * self.fVec1[((self.IOTA - iTemp4) & 2047) as usize]) + (fTemp14 * ((0.0416666679 * (fTemp25 * self.fVec1[((self.IOTA - iTemp26) & 2047) as usize])) + (((((fTemp19 * fTemp20) * fTemp21) * self.fVec1[((self.IOTA - iTemp18) & 2047) as usize]) + (0.5 * (((fTemp6 * fTemp16) * fTemp17) * self.fVec1[((self.IOTA - iTemp15) & 2047) as usize]))) + (0.166666672 * ((fTemp22 * fTemp24) * self.fVec1[((self.IOTA - iTemp23) & 2047) as usize]))))));
			let mut iRec25: i32 = iRec31;
			self.fRec18[(self.IOTA & 2047) as usize] = fRec23;
			let mut fRec19: f32 = (((((fTemp33 * fTemp35) * fTemp37) * fTemp39) * self.fRec18[((self.IOTA - (iTemp30 + 1)) & 2047) as usize]) + (fTemp40 * (((0.166666672 * ((fTemp48 * fTemp50) * self.fRec18[((self.IOTA - (iTemp49 + 1)) & 2047) as usize])) + ((((fTemp45 * fTemp46) * fTemp47) * self.fRec18[((self.IOTA - (iTemp44 + 1)) & 2047) as usize]) + (0.5 * (((fTemp32 * fTemp42) * fTemp43) * self.fRec18[((self.IOTA - (iTemp41 + 1)) & 2047) as usize])))) + (0.0416666679 * (fTemp51 * self.fRec18[((self.IOTA - (iTemp52 + 1)) & 2047) as usize])))));
			self.fRec20[0] = fRec24;
			let mut iRec21: i32 = iRec25;
			self.fRec16[0] = self.fRec20[1];
			let mut iRec17: i32 = iRec21;
			self.fRec14[0] = (self.fRec16[1] - (self.fConst3 * ((self.fConst6 * self.fRec14[2]) + (self.fConst7 * self.fRec14[1]))));
			let mut fTemp56: f32 = (self.fConst3 * ((self.fConst2 * self.fRec14[0]) + (self.fConst8 * self.fRec14[2])));
			let mut fRec12: f32 = fTemp56;
			let mut fRec13: f32 = ((iRec17 as f32) + fTemp56);
			self.iRec6[0] = iRec11;
			let mut fRec7: f32 = fRec15;
			let mut fRec8: f32 = fRec12;
			let mut fRec9: f32 = fRec13;
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = fRec19;
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			let mut fTemp57: f32 = (fSlow0 * fRec1);
			outputs[0][i as usize] = (fTemp57 as f32);
			outputs[1][i as usize] = (fTemp57 as f32);
			self.iRec10[1] = self.iRec10[0];
			self.fRec26[1] = self.fRec26[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec28[1] = self.fRec28[0];
			let mut j0: i32 = 3;
			loop {
				self.fRec29[j0 as usize] = self.fRec29[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.IOTA = (self.IOTA + 1);
			self.fVec0[1] = self.fVec0[0];
			self.fRec32[1] = self.fRec32[0];
			self.fRec20[1] = self.fRec20[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec16[j1 as usize] = self.fRec16[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.iRec6[1] = self.iRec6[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

