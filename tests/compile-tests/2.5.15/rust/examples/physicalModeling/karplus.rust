


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fRec11: [f32;2],
	IOTA: i32,
	fRec7: [f32;2048],
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider1: f32,
	fHslider2: f32,
	fButton0: f32,
	fHslider3: f32,
	fVec0: [f32;2],
	fRec12: [f32;2],
	fHslider4: f32,
	fVec1: [f32;2048],
	fRec3: [f32;2],
	fRec0: [f32;3],
	fRec1: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fRec11: [0.0;2],
			IOTA: 0,
			fRec7: [0.0;2048],
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fButton0: 0.0,
			fHslider3: 0.0,
			fVec0: [0.0;2],
			fRec12: [0.0;2],
			fHslider4: 0.0,
			fVec1: [0.0;2048],
			fRec3: [0.0;2],
			fRec0: [0.0;3],
			fRec1: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple call of the Karplus-Strong model for the Faust physical modeling library");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "KarplusStrong");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.00999999978;
		self.fHslider1 = 440.0;
		self.fHslider2 = 1.0;
		self.fButton0 = 0.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 0.800000012;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec11[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l1: i32 = 0;
		loop {
			self.fRec7[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2048) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fVec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec12[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2048) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec3[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec0[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec1[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (0.00882352982 * self.fConst0);
		self.fConst2 = (0.00147058826 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("karplus");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("params");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider1, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "hidden", "1");
		ui_interface.declare(&mut self.fHslider2, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider2, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "1", "");
		ui_interface.declare(&mut self.fHslider0, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("damping", &mut self.fHslider0, 0.01, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider4, 0.80000000000000004, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "3", "");
		ui_interface.declare(&mut self.fHslider3, "hidden", "1");
		ui_interface.declare(&mut self.fHslider3, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider3, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "1", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (0.00100000005 * (self.fHslider0 as f32));
		let mut fSlow1: f32 = (340.0 / (self.fHslider1 as f32));
		let mut fSlow2: f32 = (self.fHslider2 as f32);
		let mut fSlow3: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider3 as f32)));
		let mut iSlow4: i32 = ((fSlow3 == 0.0) as i32);
		let mut fSlow5: f32 = (self.fHslider4 as f32);
		let mut i: i32 = 0;
		loop {
			self.fRec11[0] = (fSlow0 + (0.999000013 * self.fRec11[1]));
			let mut fTemp0: f32 = (0.5 * ((self.fRec1[1] + self.fRec1[2]) * ((0.200000003 * (1.0 - self.fRec11[0])) + 0.800000012)));
			self.fRec7[(self.IOTA & 2047) as usize] = fTemp0;
			self.fVec0[0] = fSlow3;
			let mut iTemp1: i32 = (((fSlow3 == self.fVec0[1]) as i32) | iSlow4);
			self.fRec12[0] = ((fSlow2 * (1.0 - (0.999000013 * (iTemp1 as f32)))) + (0.999000013 * ((iTemp1 as f32) * self.fRec12[1])));
			let mut fTemp2: f32 = (self.fConst2 * ((fSlow1 / self.fRec12[0]) + -0.0500000007));
			let mut fTemp3: f32 = (fTemp2 + -1.49999499);
			let mut iTemp4: i32 = (fTemp3 as i32);
			let mut iTemp5: i32 = ((f32::min(self.fConst1, (std::cmp::max(0, (iTemp4 as i32)) as f32)) as i32) + 1);
			let mut fTemp6: f32 = f32::floor(fTemp3);
			let mut fTemp7: f32 = (fTemp2 + (-1.0 - fTemp6));
			let mut fTemp8: f32 = (0.0 - fTemp7);
			let mut fTemp9: f32 = (fTemp2 + (-2.0 - fTemp6));
			let mut fTemp10: f32 = (0.0 - (0.5 * fTemp9));
			let mut fTemp11: f32 = (fTemp2 + (-3.0 - fTemp6));
			let mut fTemp12: f32 = (0.0 - (0.333333343 * fTemp11));
			let mut fTemp13: f32 = (fTemp2 + (-4.0 - fTemp6));
			let mut fTemp14: f32 = (0.0 - (0.25 * fTemp13));
			let mut fTemp15: f32 = (fTemp2 - fTemp6);
			let mut iTemp16: i32 = ((f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 2) as i32)) as f32)) as i32) + 1);
			let mut fTemp17: f32 = (0.0 - fTemp11);
			let mut fTemp18: f32 = (0.0 - (0.5 * fTemp13));
			let mut iTemp19: i32 = ((f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 1) as i32)) as f32)) as i32) + 1);
			let mut fTemp20: f32 = (0.0 - fTemp9);
			let mut fTemp21: f32 = (0.0 - (0.5 * fTemp11));
			let mut fTemp22: f32 = (0.0 - (0.333333343 * fTemp13));
			let mut fTemp23: f32 = (fTemp7 * fTemp9);
			let mut iTemp24: i32 = ((f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 3) as i32)) as f32)) as i32) + 1);
			let mut fTemp25: f32 = (0.0 - fTemp13);
			let mut fTemp26: f32 = (fTemp23 * fTemp11);
			let mut iTemp27: i32 = ((f32::min(self.fConst1, (std::cmp::max(0, ((iTemp4 + 4) as i32)) as f32)) as i32) + 1);
			let mut fRec8: f32 = (((((self.fRec7[((self.IOTA - iTemp5) & 2047) as usize] * fTemp8) * fTemp10) * fTemp12) * fTemp14) + (fTemp15 * ((((0.5 * (((fTemp7 * self.fRec7[((self.IOTA - iTemp16) & 2047) as usize]) * fTemp17) * fTemp18)) + (((self.fRec7[((self.IOTA - iTemp19) & 2047) as usize] * fTemp20) * fTemp21) * fTemp22)) + (0.166666672 * ((fTemp23 * self.fRec7[((self.IOTA - iTemp24) & 2047) as usize]) * fTemp25))) + (0.0416666679 * (fTemp26 * self.fRec7[((self.IOTA - iTemp27) & 2047) as usize])))));
			let mut fTemp28: f32 = (fSlow5 * ((((fSlow3 - self.fVec0[1]) > 0.0) as i32) as f32));
			let mut fTemp29: f32 = (self.fRec0[2] + fTemp28);
			self.fVec1[(self.IOTA & 2047) as usize] = fTemp29;
			let mut fTemp30: f32 = ((((fTemp8 * fTemp10) * fTemp12) * fTemp14) * self.fVec1[((self.IOTA - iTemp5) & 2047) as usize]);
			let mut fTemp31: f32 = (fTemp15 * (((0.166666672 * ((fTemp23 * fTemp25) * self.fVec1[((self.IOTA - iTemp24) & 2047) as usize])) + ((((fTemp20 * fTemp21) * fTemp22) * self.fVec1[((self.IOTA - iTemp19) & 2047) as usize]) + (0.5 * (((fTemp7 * fTemp17) * fTemp18) * self.fVec1[((self.IOTA - iTemp16) & 2047) as usize])))) + (0.0416666679 * (fTemp26 * self.fVec1[((self.IOTA - iTemp27) & 2047) as usize]))));
			let mut fRec9: f32 = (fTemp30 + fTemp31);
			let mut fRec10: f32 = ((fTemp0 + fTemp30) + fTemp31);
			self.fRec3[0] = fRec8;
			let mut fRec4: f32 = (fTemp28 + self.fRec3[1]);
			let mut fRec5: f32 = fRec9;
			let mut fRec6: f32 = fRec10;
			self.fRec0[0] = fRec4;
			self.fRec1[0] = fRec5;
			let mut fRec2: f32 = fRec6;
			outputs[0][i as usize] = (fRec2 as f32);
			outputs[1][i as usize] = (fRec2 as f32);
			self.fRec11[1] = self.fRec11[0];
			self.IOTA = (self.IOTA + 1);
			self.fVec0[1] = self.fVec0[0];
			self.fRec12[1] = self.fRec12[0];
			self.fRec3[1] = self.fRec3[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

