
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iVec0: [i32;2],
	fButton0: f32,
	fHslider1: f32,
	fVec1: [f32;2],
	fHslider2: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider3: f32,
	fRec1: [f32;2],
	fHslider4: f32,
	fRec2: [f32;2],
	fConst2: f32,
	fHslider5: f32,
	fHslider6: f32,
	fRec5: [f32;2],
	fHslider7: f32,
	fConst3: f32,
	fHslider8: f32,
	fRec6: [f32;2],
	fRec7: [f32;2],
	fRec3: [f32;2],
	iRec8: [i32;2],
	fConst4: f32,
	fHslider9: f32,
	fHslider10: f32,
	fRec9: [f32;2],
	fRec10: [f32;2],
	fRec11: [f32;2],
	fRec0: [f32;3],
	fRec12: [f32;3],
	fRec13: [f32;3],
	fRec14: [f32;3],
	fRec15: [f32;3],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iVec0: [0;2],
			fButton0: 0.0,
			fHslider1: 0.0,
			fVec1: [0.0;2],
			fHslider2: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider3: 0.0,
			fRec1: [0.0;2],
			fHslider4: 0.0,
			fRec2: [0.0;2],
			fConst2: 0.0,
			fHslider5: 0.0,
			fHslider6: 0.0,
			fRec5: [0.0;2],
			fHslider7: 0.0,
			fConst3: 0.0,
			fHslider8: 0.0,
			fRec6: [0.0;2],
			fRec7: [0.0;2],
			fRec3: [0.0;2],
			iRec8: [0;2],
			fConst4: 0.0,
			fHslider9: 0.0,
			fHslider10: 0.0,
			fRec9: [0.0;2],
			fRec10: [0.0;2],
			fRec11: [0.0;2],
			fRec0: [0.0;3],
			fRec12: [0.0;3],
			fRec13: [0.0;3],
			fRec14: [0.0;3],
			fRec15: [0.0;3],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("description", "Simple MIDI-controllable source-filter vocal synthesizer.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "Vocal BandPass MIDI");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fButton0 = 0.0;
		self.fHslider1 = 0.0;
		self.fHslider2 = 0.899999976;
		self.fHslider3 = 10.0;
		self.fHslider4 = 0.0;
		self.fHslider5 = 440.0;
		self.fHslider6 = 1.0;
		self.fHslider7 = 0.5;
		self.fHslider8 = 6.0;
		self.fHslider9 = 0.0;
		self.fHslider10 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fVec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec2[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec5[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec6[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec7[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec3[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.iRec8[l8 as usize] = 0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec9[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec10[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec11[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec0[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 3) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec12[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 3) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fRec13[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 3) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fRec14[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 3) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec15[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 3) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1000.0 / self.fConst0);
		self.fConst2 = (1.0 / self.fConst0);
		self.fConst3 = (6.28318548 / self.fConst0);
		self.fConst4 = (3.14159274 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("vocal");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider5, "0", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider5, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider6, "1", "");
		ui_interface.declare(&mut self.fHslider6, "hidden", "1");
		ui_interface.declare(&mut self.fHslider6, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider6, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "2", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider2, 0.90000000000000002, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "3", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("envAttack", &mut self.fHslider3, 10.0, 0.0, 30.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "4", "");
		ui_interface.declare(&mut self.fHslider1, "hidden", "1");
		ui_interface.declare(&mut self.fHslider1, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider1, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fHslider9, "0", "");
		ui_interface.declare(&mut self.fHslider9, "style", "knob");
		ui_interface.addHorizontalSlider("voiceType", &mut self.fHslider9, 0.0, 0.0, 4.0, 1.0);
		ui_interface.declare(&mut self.fHslider10, "1", "");
		ui_interface.declare(&mut self.fHslider10, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider10, "style", "knob");
		ui_interface.addHorizontalSlider("vowel", &mut self.fHslider10, 0.0, 0.0, 4.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("fricative", &mut self.fHslider4, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider8, "3", "");
		ui_interface.declare(&mut self.fHslider8, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoFreq", &mut self.fHslider8, 6.0, 1.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider7, "4", "");
		ui_interface.declare(&mut self.fHslider7, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoGain", &mut self.fHslider7, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "5", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider1 as f32)));
		let mut fSlow2: f32 = f32::exp((0.0 - (self.fConst1 / (self.fHslider3 as f32))));
		let mut fSlow3: f32 = ((fSlow1 * (self.fHslider2 as f32)) * (1.0 - fSlow2));
		let mut fSlow4: f32 = (0.00100000005 * (self.fHslider4 as f32));
		let mut fSlow5: f32 = (self.fHslider5 as f32);
		let mut iSlow6: i32 = ((fSlow1 == 0.0) as i32);
		let mut fSlow7: f32 = (self.fHslider6 as f32);
		let mut fSlow8: f32 = (0.100000001 * (self.fHslider7 as f32));
		let mut fSlow9: f32 = (self.fConst3 * (self.fHslider8 as f32));
		let mut fSlow10: f32 = f32::sin(fSlow9);
		let mut fSlow11: f32 = f32::cos(fSlow9);
		let mut fSlow12: f32 = (0.0 - fSlow10);
		let mut fSlow13: f32 = (self.fHslider9 as f32);
		let mut fSlow14: f32 = (5.0 * fSlow13);
		let mut fSlow15: f32 = (0.00100000005 * (self.fHslider10 as f32));
		let mut fSlow16: f32 = (5.0 * (1.0 - fSlow13));
		let mut iSlow17: i32 = ((if (((fSlow13 == 0.0) as i32) as i32 == 1) { 1 } else { if (((fSlow13 == 3.0) as i32) as i32 == 1) { 1 } else { 0 } } == 0) as i32);
		let mut iSlow18: i32 = ((fSlow13 != 2.0) as i32);
		let mut fSlow19: f32 = (2.0 * fSlow5);
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fVec1[0] = fSlow1;
			self.fRec1[0] = (fSlow3 + (fSlow2 * self.fRec1[1]));
			self.fRec2[0] = (fSlow4 + (0.999000013 * self.fRec2[1]));
			let mut iTemp0: i32 = (((fSlow1 == self.fVec1[1]) as i32) | iSlow6);
			self.fRec5[0] = ((0.999000013 * (self.fRec5[1] * (iTemp0 as f32))) + (fSlow7 * (1.0 - (0.999000013 * (iTemp0 as f32)))));
			self.fRec6[0] = ((fSlow10 * self.fRec7[1]) + (fSlow11 * self.fRec6[1]));
			let mut iTemp1: i32 = (1 - self.iVec0[1]);
			self.fRec7[0] = (((fSlow11 * self.fRec7[1]) + (fSlow12 * self.fRec6[1])) + (iTemp1 as f32));
			let mut fTemp2: f32 = f32::max(1.00000001e-07, f32::abs((fSlow5 * (self.fRec5[0] * ((fSlow8 * self.fRec6[0]) + 1.0)))));
			let mut fTemp3: f32 = (self.fRec3[1] + (self.fConst2 * fTemp2));
			let mut fTemp4: f32 = (fTemp3 + -1.0);
			let mut iTemp5: i32 = ((fTemp4 < 0.0) as i32);
			self.fRec3[0] = if (iTemp5 as i32 == 1) { fTemp3 } else { fTemp4 };
			let mut fRec4: f32 = if (iTemp5 as i32 == 1) { fTemp3 } else { (fTemp3 + (fTemp4 * (1.0 - (self.fConst0 / fTemp2)))) };
			self.iRec8[0] = ((1103515245 * self.iRec8[1]) + 12345);
			let mut fTemp6: f32 = (self.fRec1[0] * (((1.0 - self.fRec2[0]) * ((2.0 * fRec4) + -1.0)) + (4.65661287e-10 * (self.fRec2[0] * (self.iRec8[0] as f32)))));
			self.fRec9[0] = (fSlow15 + (0.999000013 * self.fRec9[1]));
			let mut fTemp7: f32 = (fSlow14 + self.fRec9[0]);
			let mut iTemp8: i32 = ((fTemp7 < 23.0) as i32);
			let mut iTemp9: i32 = ((fTemp7 < 24.0) as i32);
			let mut fTemp10: f32 = (fSlow14 + (self.fRec9[0] + -23.0));
			let mut iTemp11: i32 = ((fTemp7 < 22.0) as i32);
			let mut fTemp12: f32 = (fSlow14 + (self.fRec9[0] + -22.0));
			let mut iTemp13: i32 = ((fTemp7 < 21.0) as i32);
			let mut fTemp14: f32 = (fSlow14 + (self.fRec9[0] + -21.0));
			let mut iTemp15: i32 = ((fTemp7 < 20.0) as i32);
			let mut fTemp16: f32 = (fSlow14 + (self.fRec9[0] + -20.0));
			let mut iTemp17: i32 = ((fTemp7 < 19.0) as i32);
			let mut fTemp18: f32 = (fSlow14 + (self.fRec9[0] + -19.0));
			let mut iTemp19: i32 = ((fTemp7 < 18.0) as i32);
			let mut fTemp20: f32 = (fSlow14 + (self.fRec9[0] + -18.0));
			let mut iTemp21: i32 = ((fTemp7 < 17.0) as i32);
			let mut fTemp22: f32 = (fSlow14 + (self.fRec9[0] + -17.0));
			let mut iTemp23: i32 = ((fTemp7 < 16.0) as i32);
			let mut fTemp24: f32 = (fSlow14 + (self.fRec9[0] + -16.0));
			let mut fTemp25: f32 = (80.0 * fTemp24);
			let mut iTemp26: i32 = ((fTemp7 < 15.0) as i32);
			let mut fTemp27: f32 = (fSlow14 + (self.fRec9[0] + -15.0));
			let mut iTemp28: i32 = ((fTemp7 < 14.0) as i32);
			let mut fTemp29: f32 = (fSlow14 + (self.fRec9[0] + -14.0));
			let mut iTemp30: i32 = ((fTemp7 < 13.0) as i32);
			let mut fTemp31: f32 = (fSlow14 + (self.fRec9[0] + -13.0));
			let mut iTemp32: i32 = ((fTemp7 < 12.0) as i32);
			let mut fTemp33: f32 = (fSlow14 + (self.fRec9[0] + -12.0));
			let mut iTemp34: i32 = ((fTemp7 < 11.0) as i32);
			let mut fTemp35: f32 = (fSlow14 + (self.fRec9[0] + -11.0));
			let mut iTemp36: i32 = ((fTemp7 < 10.0) as i32);
			let mut fTemp37: f32 = (fSlow14 + (self.fRec9[0] + -10.0));
			let mut iTemp38: i32 = ((fTemp7 < 9.0) as i32);
			let mut fTemp39: f32 = (fSlow14 + (self.fRec9[0] + -9.0));
			let mut iTemp40: i32 = ((fTemp7 < 8.0) as i32);
			let mut fTemp41: f32 = (fSlow14 + (self.fRec9[0] + -8.0));
			let mut fTemp42: f32 = (50.0 * fTemp41);
			let mut iTemp43: i32 = ((fTemp7 < 7.0) as i32);
			let mut fTemp44: f32 = (fSlow14 + (self.fRec9[0] + -7.0));
			let mut iTemp45: i32 = ((fTemp7 < 6.0) as i32);
			let mut fTemp46: f32 = (fSlow14 + (self.fRec9[0] + -6.0));
			let mut iTemp47: i32 = ((fTemp7 < 5.0) as i32);
			let mut fTemp48: f32 = (self.fRec9[0] - fSlow16);
			let mut iTemp49: i32 = ((fTemp7 < 4.0) as i32);
			let mut fTemp50: f32 = (fSlow14 + (self.fRec9[0] + -4.0));
			let mut iTemp51: i32 = ((fTemp7 < 3.0) as i32);
			let mut fTemp52: f32 = (fSlow14 + (self.fRec9[0] + -3.0));
			let mut iTemp53: i32 = ((fTemp7 < 2.0) as i32);
			let mut fTemp54: f32 = (fSlow14 + (self.fRec9[0] + -2.0));
			let mut iTemp55: i32 = ((fTemp7 < 1.0) as i32);
			let mut fTemp56: f32 = (fSlow14 + (self.fRec9[0] + -1.0));
			let mut iTemp57: i32 = ((fTemp7 < 0.0) as i32);
			let mut fTemp58: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 800.0 } else { if (iTemp55 as i32 == 1) { (800.0 - (400.0 * fTemp7)) } else { 400.0 } } } else { if (iTemp53 as i32 == 1) { (400.0 - (50.0 * fTemp56)) } else { 350.0 } } } else { if (iTemp51 as i32 == 1) { ((100.0 * fTemp54) + 350.0) } else { 450.0 } } } else { if (iTemp49 as i32 == 1) { (450.0 - (125.0 * fTemp52)) } else { 325.0 } } } else { if (iTemp47 as i32 == 1) { ((275.0 * fTemp50) + 325.0) } else { 600.0 } } } else { if (iTemp45 as i32 == 1) { (600.0 - (200.0 * fTemp48)) } else { 400.0 } } } else { if (iTemp43 as i32 == 1) { (400.0 - (150.0 * fTemp46)) } else { 250.0 } } } else { if (iTemp40 as i32 == 1) { ((150.0 * fTemp44) + 250.0) } else { 400.0 } } } else { if (iTemp38 as i32 == 1) { (400.0 - fTemp42) } else { 350.0 } } } else { if (iTemp36 as i32 == 1) { ((310.0 * fTemp39) + 350.0) } else { 660.0 } } } else { if (iTemp34 as i32 == 1) { (660.0 - (220.0 * fTemp37)) } else { 440.0 } } } else { if (iTemp32 as i32 == 1) { (440.0 - (170.0 * fTemp35)) } else { 270.0 } } } else { if (iTemp30 as i32 == 1) { ((160.0 * fTemp33) + 270.0) } else { 430.0 } } } else { if (iTemp28 as i32 == 1) { (430.0 - (60.0 * fTemp31)) } else { 370.0 } } } else { if (iTemp26 as i32 == 1) { ((430.0 * fTemp29) + 370.0) } else { 800.0 } } } else { if (iTemp23 as i32 == 1) { (800.0 - (450.0 * fTemp27)) } else { 350.0 } } } else { if (iTemp21 as i32 == 1) { (350.0 - fTemp25) } else { 270.0 } } } else { if (iTemp19 as i32 == 1) { ((180.0 * fTemp22) + 270.0) } else { 450.0 } } } else { if (iTemp17 as i32 == 1) { (450.0 - (125.0 * fTemp20)) } else { 325.0 } } } else { if (iTemp15 as i32 == 1) { (325.0 * (fTemp18 + 1.0)) } else { 650.0 } } } else { if (iTemp13 as i32 == 1) { (650.0 - (250.0 * fTemp16)) } else { 400.0 } } } else { if (iTemp11 as i32 == 1) { (400.0 - (110.0 * fTemp14)) } else { 290.0 } } } else { if (iTemp8 as i32 == 1) { ((110.0 * fTemp12) + 290.0) } else { 400.0 } } } else { if (iTemp9 as i32 == 1) { (400.0 - (50.0 * fTemp10)) } else { 350.0 } };
			self.fRec10[0] = ((fSlow10 * self.fRec11[1]) + (fSlow11 * self.fRec10[1]));
			self.fRec11[0] = (((fSlow11 * self.fRec11[1]) + (fSlow12 * self.fRec10[1])) + (iTemp1 as f32));
			let mut fTemp59: f32 = (self.fRec5[0] * ((fSlow8 * self.fRec10[0]) + 1.0));
			let mut fTemp60: f32 = (fSlow5 * fTemp59);
			let mut fTemp61: f32 = if (((fTemp58 <= fTemp60) as i32) as i32 == 1) { fTemp60 } else { fTemp58 };
			let mut fTemp62: f32 = f32::tan((self.fConst4 * fTemp61));
			let mut fTemp63: f32 = (1.0 / fTemp62);
			let mut fTemp64: f32 = (20.0 * fTemp16);
			let mut fTemp65: f32 = (20.0 * fTemp27);
			let mut fTemp66: f32 = (10.0 * fTemp37);
			let mut fTemp67: f32 = (10.0 * fTemp50);
			let mut fTemp68: f32 = (20.0 * fTemp52);
			let mut fTemp69: f32 = (20.0 * fTemp54);
			let mut fTemp70: f32 = (20.0 * fTemp7);
			let mut fTemp71: f32 = (if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 80.0 } else { if (iTemp55 as i32 == 1) { (80.0 - fTemp70) } else { 60.0 } } } else { if (iTemp53 as i32 == 1) { (60.0 - (10.0 * fTemp56)) } else { 50.0 } } } else { if (iTemp51 as i32 == 1) { (fTemp69 + 50.0) } else { 70.0 } } } else { if (iTemp49 as i32 == 1) { (70.0 - fTemp68) } else { 50.0 } } } else { if (iTemp47 as i32 == 1) { (fTemp67 + 50.0) } else { 60.0 } } } else { if (iTemp45 as i32 == 1) { (60.0 - (20.0 * fTemp48)) } else { 40.0 } } } else { if (iTemp43 as i32 == 1) { ((20.0 * fTemp46) + 40.0) } else { 60.0 } } } else { if (iTemp40 as i32 == 1) { (60.0 - (20.0 * fTemp44)) } else { 40.0 } } } else { 40.0 } } else { if (iTemp36 as i32 == 1) { (40.0 * (fTemp39 + 1.0)) } else { 80.0 } } } else { if (iTemp34 as i32 == 1) { (80.0 - fTemp66) } else { 70.0 } } } else { if (iTemp32 as i32 == 1) { (70.0 - (30.0 * fTemp35)) } else { 40.0 } } } else { 40.0 } } else { 40.0 } } else { if (iTemp26 as i32 == 1) { (40.0 * (fTemp29 + 1.0)) } else { 80.0 } } } else { if (iTemp23 as i32 == 1) { (80.0 - fTemp65) } else { 60.0 } } } else { 60.0 } } else { if (iTemp19 as i32 == 1) { (60.0 - (20.0 * fTemp22)) } else { 40.0 } } } else { if (iTemp17 as i32 == 1) { ((10.0 * fTemp20) + 40.0) } else { 50.0 } } } else { 50.0 } } else { if (iTemp13 as i32 == 1) { (fTemp64 + 50.0) } else { 70.0 } } } else { if (iTemp11 as i32 == 1) { (70.0 - (30.0 * fTemp14)) } else { 40.0 } } } else { if (iTemp8 as i32 == 1) { ((30.0 * fTemp12) + 40.0) } else { 70.0 } } } else { if (iTemp9 as i32 == 1) { (70.0 - (30.0 * fTemp10)) } else { 40.0 } } / fTemp61);
			let mut fTemp72: f32 = (((fTemp63 + fTemp71) / fTemp62) + 1.0);
			self.fRec0[0] = (fTemp6 - (((self.fRec0[2] * (((fTemp63 - fTemp71) / fTemp62) + 1.0)) + (2.0 * (self.fRec0[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp62)))))) / fTemp72));
			let mut fTemp73: f32 = ((0.000839999993 * (1000.0 - fTemp60)) + 0.800000012);
			let mut fTemp74: f32 = ((0.00366666657 * (400.0 - fTemp60)) + 3.0);
			let mut fTemp75: f32 = if (iSlow17 as i32 == 1) { fTemp74 } else { fTemp73 };
			let mut fTemp76: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 1150.0 } else { if (iTemp55 as i32 == 1) { ((450.0 * fTemp7) + 1150.0) } else { 1600.0 } } } else { if (iTemp53 as i32 == 1) { ((100.0 * fTemp56) + 1600.0) } else { 1700.0 } } } else { if (iTemp51 as i32 == 1) { (1700.0 - (900.0 * fTemp54)) } else { 800.0 } } } else { if (iTemp49 as i32 == 1) { (800.0 - (100.0 * fTemp52)) } else { 700.0 } } } else { if (iTemp47 as i32 == 1) { ((340.0 * fTemp50) + 700.0) } else { 1040.0 } } } else { if (iTemp45 as i32 == 1) { ((580.0 * fTemp48) + 1040.0) } else { 1620.0 } } } else { if (iTemp43 as i32 == 1) { ((130.0 * fTemp46) + 1620.0) } else { 1750.0 } } } else { if (iTemp40 as i32 == 1) { (1750.0 - (1000.0 * fTemp44)) } else { 750.0 } } } else { if (iTemp38 as i32 == 1) { (750.0 - (150.0 * fTemp41)) } else { 600.0 } } } else { if (iTemp36 as i32 == 1) { ((520.0 * fTemp39) + 600.0) } else { 1120.0 } } } else { if (iTemp34 as i32 == 1) { ((680.0 * fTemp37) + 1120.0) } else { 1800.0 } } } else { if (iTemp32 as i32 == 1) { ((50.0 * fTemp35) + 1800.0) } else { 1850.0 } } } else { if (iTemp30 as i32 == 1) { (1850.0 - (1030.0 * fTemp33)) } else { 820.0 } } } else { if (iTemp28 as i32 == 1) { (820.0 - (190.0 * fTemp31)) } else { 630.0 } } } else { if (iTemp26 as i32 == 1) { ((520.0 * fTemp29) + 630.0) } else { 1150.0 } } } else { if (iTemp23 as i32 == 1) { ((850.0 * fTemp27) + 1150.0) } else { 2000.0 } } } else { if (iTemp21 as i32 == 1) { ((140.0 * fTemp24) + 2000.0) } else { 2140.0 } } } else { if (iTemp19 as i32 == 1) { (2140.0 - (1340.0 * fTemp22)) } else { 800.0 } } } else { if (iTemp17 as i32 == 1) { (800.0 - (100.0 * fTemp20)) } else { 700.0 } } } else { if (iTemp15 as i32 == 1) { ((380.0 * fTemp18) + 700.0) } else { 1080.0 } } } else { if (iTemp13 as i32 == 1) { ((620.0 * fTemp16) + 1080.0) } else { 1700.0 } } } else { if (iTemp11 as i32 == 1) { ((170.0 * fTemp14) + 1700.0) } else { 1870.0 } } } else { if (iTemp8 as i32 == 1) { (1870.0 - (1070.0 * fTemp12)) } else { 800.0 } } } else { if (iTemp9 as i32 == 1) { (800.0 - (200.0 * fTemp10)) } else { 600.0 } };
			let mut fTemp77: f32 = ((fSlow19 * fTemp59) + 30.0);
			let mut fTemp78: f32 = if (iSlow18 as i32 == 1) { if ((((fTemp76 >= 1300.0) as i32) & ((fTemp60 >= 200.0) as i32)) as i32 == 1) { (fTemp76 - (0.000952380942 * ((fTemp60 + -200.0) * (fTemp76 + -1300.0)))) } else { if (((fTemp76 <= fTemp77) as i32) as i32 == 1) { fTemp77 } else { fTemp76 } } } else { fTemp76 };
			let mut fTemp79: f32 = f32::tan((self.fConst4 * fTemp78));
			let mut fTemp80: f32 = (1.0 / fTemp79);
			let mut fTemp81: f32 = (10.0 * fTemp12);
			let mut fTemp82: f32 = (10.0 * fTemp16);
			let mut fTemp83: f32 = (10.0 * fTemp39);
			let mut fTemp84: f32 = (10.0 * fTemp48);
			let mut fTemp85: f32 = (if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 90.0 } else { if (iTemp55 as i32 == 1) { (90.0 - (10.0 * fTemp7)) } else { 80.0 } } } else { if (iTemp53 as i32 == 1) { ((20.0 * fTemp56) + 80.0) } else { 100.0 } } } else { if (iTemp51 as i32 == 1) { (100.0 - fTemp69) } else { 80.0 } } } else { if (iTemp49 as i32 == 1) { (80.0 - fTemp68) } else { 60.0 } } } else { if (iTemp47 as i32 == 1) { (fTemp67 + 60.0) } else { 70.0 } } } else { if (iTemp45 as i32 == 1) { (fTemp84 + 70.0) } else { 80.0 } } } else { if (iTemp43 as i32 == 1) { ((10.0 * fTemp46) + 80.0) } else { 90.0 } } } else { if (iTemp40 as i32 == 1) { (90.0 - (10.0 * fTemp44)) } else { 80.0 } } } else { 80.0 } } else { if (iTemp36 as i32 == 1) { (fTemp83 + 80.0) } else { 90.0 } } } else { if (iTemp34 as i32 == 1) { (90.0 - fTemp66) } else { 80.0 } } } else { if (iTemp32 as i32 == 1) { ((10.0 * fTemp35) + 80.0) } else { 90.0 } } } else { if (iTemp30 as i32 == 1) { (90.0 - (10.0 * fTemp33)) } else { 80.0 } } } else { if (iTemp28 as i32 == 1) { (80.0 - (20.0 * fTemp31)) } else { 60.0 } } } else { if (iTemp26 as i32 == 1) { ((30.0 * fTemp29) + 60.0) } else { 90.0 } } } else { if (iTemp23 as i32 == 1) { ((10.0 * fTemp27) + 90.0) } else { 100.0 } } } else { if (iTemp21 as i32 == 1) { (100.0 - (10.0 * fTemp24)) } else { 90.0 } } } else { if (iTemp19 as i32 == 1) { (90.0 - (10.0 * fTemp22)) } else { 80.0 } } } else { if (iTemp17 as i32 == 1) { (80.0 - (20.0 * fTemp20)) } else { 60.0 } } } else { if (iTemp15 as i32 == 1) { ((30.0 * fTemp18) + 60.0) } else { 90.0 } } } else { if (iTemp13 as i32 == 1) { (90.0 - fTemp82) } else { 80.0 } } } else { if (iTemp11 as i32 == 1) { ((10.0 * fTemp14) + 80.0) } else { 90.0 } } } else { if (iTemp8 as i32 == 1) { (90.0 - fTemp81) } else { 80.0 } } } else { if (iTemp9 as i32 == 1) { (80.0 - (20.0 * fTemp10)) } else { 60.0 } } / fTemp78);
			let mut fTemp86: f32 = (((fTemp80 + fTemp85) / fTemp79) + 1.0);
			self.fRec12[0] = (fTemp6 - (((self.fRec12[2] * (((fTemp80 - fTemp85) / fTemp79) + 1.0)) + (2.0 * (self.fRec12[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp79)))))) / fTemp86));
			let mut fTemp87: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 0.630957007 } else { if (iTemp55 as i32 == 1) { (0.630957007 - (0.567861021 * fTemp7)) } else { 0.0630960017 } } } else { if (iTemp53 as i32 == 1) { ((0.0369039997 * fTemp56) + 0.0630960017) } else { 0.100000001 } } } else { if (iTemp51 as i32 == 1) { ((0.254812986 * fTemp54) + 0.100000001) } else { 0.35481301 } } } else { if (iTemp49 as i32 == 1) { (0.35481301 - (0.103624001 * fTemp52)) } else { 0.251188993 } } } else { if (iTemp47 as i32 == 1) { ((0.195494995 * fTemp50) + 0.251188993) } else { 0.446684003 } } } else { if (iTemp45 as i32 == 1) { (0.446684003 - (0.195494995 * fTemp48)) } else { 0.251188993 } } } else { if (iTemp43 as i32 == 1) { (0.251188993 - (0.219566002 * fTemp46)) } else { 0.0316229984 } } } else { if (iTemp40 as i32 == 1) { ((0.250214994 * fTemp44) + 0.0316229984) } else { 0.281838 } } } else { if (iTemp38 as i32 == 1) { (0.281838 - (0.181838006 * fTemp41)) } else { 0.100000001 } } } else { if (iTemp36 as i32 == 1) { ((0.401187003 * fTemp39) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp34 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp37)) } else { 0.199525997 } } } else { if (iTemp32 as i32 == 1) { (0.199525997 - (0.136429995 * fTemp35)) } else { 0.0630960017 } } } else { if (iTemp30 as i32 == 1) { ((0.253131986 * fTemp33) + 0.0630960017) } else { 0.316228002 } } } else { if (iTemp28 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp31)) } else { 0.100000001 } } } else { if (iTemp26 as i32 == 1) { ((0.401187003 * fTemp29) + 0.100000001) } else { 0.501187027 } } } else { if (iTemp23 as i32 == 1) { (0.501187027 - (0.401187003 * fTemp27)) } else { 0.100000001 } } } else { if (iTemp21 as i32 == 1) { ((0.151188999 * fTemp24) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp19 as i32 == 1) { ((0.0306490008 * fTemp22) + 0.251188993) } else { 0.281838 } } } else { if (iTemp17 as i32 == 1) { (0.281838 - (0.123349003 * fTemp20)) } else { 0.158489004 } } } else { if (iTemp15 as i32 == 1) { ((0.342698008 * fTemp18) + 0.158489004) } else { 0.501187027 } } } else { if (iTemp13 as i32 == 1) { (0.501187027 - (0.301661015 * fTemp16)) } else { 0.199525997 } } } else { if (iTemp11 as i32 == 1) { (0.199525997 - (0.0216979999 * fTemp14)) } else { 0.177827999 } } } else { if (iTemp8 as i32 == 1) { ((0.138400003 * fTemp12) + 0.177827999) } else { 0.316228002 } } } else { if (iTemp9 as i32 == 1) { (0.316228002 - (0.216227993 * fTemp10)) } else { 0.100000001 } };
			let mut fTemp88: f32 = if (iSlow17 as i32 == 1) { (fTemp74 * fTemp87) } else { (fTemp73 * fTemp87) };
			let mut fTemp89: f32 = (100.0 * fTemp10);
			let mut fTemp90: f32 = (50.0 * fTemp18);
			let mut fTemp91: f32 = (50.0 * fTemp37);
			let mut fTemp92: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 2800.0 } else { if (iTemp55 as i32 == 1) { (2800.0 - (100.0 * fTemp7)) } else { 2700.0 } } } else { 2700.0 } } else { if (iTemp51 as i32 == 1) { ((130.0 * fTemp54) + 2700.0) } else { 2830.0 } } } else { if (iTemp49 as i32 == 1) { (2830.0 - (300.0 * fTemp52)) } else { 2530.0 } } } else { if (iTemp47 as i32 == 1) { (2530.0 - (280.0 * fTemp50)) } else { 2250.0 } } } else { if (iTemp45 as i32 == 1) { ((150.0 * fTemp48) + 2250.0) } else { 2400.0 } } } else { if (iTemp43 as i32 == 1) { ((200.0 * fTemp46) + 2400.0) } else { 2600.0 } } } else { if (iTemp40 as i32 == 1) { (2600.0 - (200.0 * fTemp44)) } else { 2400.0 } } } else { 2400.0 } } else { if (iTemp36 as i32 == 1) { ((350.0 * fTemp39) + 2400.0) } else { 2750.0 } } } else { if (iTemp34 as i32 == 1) { (2750.0 - fTemp91) } else { 2700.0 } } } else { if (iTemp32 as i32 == 1) { ((200.0 * fTemp35) + 2700.0) } else { 2900.0 } } } else { if (iTemp30 as i32 == 1) { (2900.0 - (200.0 * fTemp33)) } else { 2700.0 } } } else { if (iTemp28 as i32 == 1) { ((50.0 * fTemp31) + 2700.0) } else { 2750.0 } } } else { if (iTemp26 as i32 == 1) { ((150.0 * fTemp29) + 2750.0) } else { 2900.0 } } } else { if (iTemp23 as i32 == 1) { (2900.0 - (100.0 * fTemp27)) } else { 2800.0 } } } else { if (iTemp21 as i32 == 1) { ((150.0 * fTemp24) + 2800.0) } else { 2950.0 } } } else { if (iTemp19 as i32 == 1) { (2950.0 - (120.0 * fTemp22)) } else { 2830.0 } } } else { if (iTemp17 as i32 == 1) { (2830.0 - (130.0 * fTemp20)) } else { 2700.0 } } } else { if (iTemp15 as i32 == 1) { (2700.0 - fTemp90) } else { 2650.0 } } } else { if (iTemp13 as i32 == 1) { (2650.0 - (50.0 * fTemp16)) } else { 2600.0 } } } else { if (iTemp11 as i32 == 1) { ((200.0 * fTemp14) + 2600.0) } else { 2800.0 } } } else { if (iTemp8 as i32 == 1) { (2800.0 - (200.0 * fTemp12)) } else { 2600.0 } } } else { if (iTemp9 as i32 == 1) { (fTemp89 + 2600.0) } else { 2700.0 } };
			let mut fTemp93: f32 = f32::tan((self.fConst4 * fTemp92));
			let mut fTemp94: f32 = (1.0 / fTemp93);
			let mut fTemp95: f32 = (20.0 * fTemp29);
			let mut fTemp96: f32 = (20.0 * fTemp37);
			let mut fTemp97: f32 = (20.0 * fTemp39);
			let mut fTemp98: f32 = (60.0 * fTemp50);
			let mut fTemp99: f32 = (if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { 120.0 } else { if (iTemp51 as i32 == 1) { (120.0 - fTemp69) } else { 100.0 } } } else { if (iTemp49 as i32 == 1) { ((70.0 * fTemp52) + 100.0) } else { 170.0 } } } else { if (iTemp47 as i32 == 1) { (170.0 - fTemp98) } else { 110.0 } } } else { if (iTemp45 as i32 == 1) { (110.0 - fTemp84) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp36 as i32 == 1) { (fTemp97 + 100.0) } else { 120.0 } } } else { if (iTemp34 as i32 == 1) { (120.0 - fTemp96) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } } else { if (iTemp26 as i32 == 1) { (fTemp95 + 100.0) } else { 120.0 } } } else { 120.0 } } else { if (iTemp21 as i32 == 1) { (120.0 - (20.0 * fTemp24)) } else { 100.0 } } } else { 100.0 } } else { if (iTemp17 as i32 == 1) { ((70.0 * fTemp20) + 100.0) } else { 170.0 } } } else { if (iTemp15 as i32 == 1) { (170.0 - fTemp90) } else { 120.0 } } } else { if (iTemp13 as i32 == 1) { (120.0 - fTemp64) } else { 100.0 } } } else { 100.0 } } else { 100.0 } } else { 100.0 } / fTemp92);
			let mut fTemp100: f32 = (((fTemp94 + fTemp99) / fTemp93) + 1.0);
			self.fRec13[0] = (fTemp6 - (((self.fRec13[2] * (((fTemp94 - fTemp99) / fTemp93) + 1.0)) + (2.0 * (self.fRec13[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp93)))))) / fTemp100));
			let mut fTemp101: f32 = if (iTemp19 as i32 == 1) { ((0.0293140002 * fTemp22) + 0.0501190014) } else { 0.0794330016 };
			let mut fTemp102: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 0.100000001 } else { if (iTemp55 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp7)) } else { 0.0316229984 } } } else { 0.0316229984 } } else { if (iTemp51 as i32 == 1) { ((0.126865998 * fTemp54) + 0.0316229984) } else { 0.158489004 } } } else { if (iTemp49 as i32 == 1) { (0.158489004 - (0.126865998 * fTemp52)) } else { 0.0316229984 } } } else { if (iTemp47 as i32 == 1) { ((0.323190004 * fTemp50) + 0.0316229984) } else { 0.35481301 } } } else { 0.35481301 } } else { if (iTemp43 as i32 == 1) { (0.35481301 - (0.196324006 * fTemp46)) } else { 0.158489004 } } } else { if (iTemp40 as i32 == 1) { (0.158489004 - (0.0693639964 * fTemp44)) } else { 0.0891249999 } } } else { if (iTemp38 as i32 == 1) { (0.0891249999 - (0.0640060008 * fTemp41)) } else { 0.0251189992 } } } else { if (iTemp36 as i32 == 1) { ((0.0456760004 * fTemp39) + 0.0251189992) } else { 0.0707949996 } } } else { if (iTemp34 as i32 == 1) { ((0.0550980009 * fTemp37) + 0.0707949996) } else { 0.125892997 } } } else { if (iTemp32 as i32 == 1) { (0.125892997 - (0.0627970025 * fTemp35)) } else { 0.0630960017 } } } else { if (iTemp30 as i32 == 1) { (0.0630960017 - (0.0129770003 * fTemp33)) } else { 0.0501190014 } } } else { if (iTemp28 as i32 == 1) { ((0.020676 * fTemp31) + 0.0501190014) } else { 0.0707949996 } } } else { if (iTemp26 as i32 == 1) { (0.0707949996 - (0.0456760004 * fTemp29)) } else { 0.0251189992 } } } else { if (iTemp23 as i32 == 1) { ((0.152709007 * fTemp27) + 0.0251189992) } else { 0.177827999 } } } else { if (iTemp21 as i32 == 1) { (0.177827999 - (0.127709001 * fTemp24)) } else { 0.0501190014 } } } else { fTemp101 } } else { if (iTemp17 as i32 == 1) { (0.0794330016 - (0.0616500005 * fTemp20)) } else { 0.0177829992 } } } else { if (iTemp15 as i32 == 1) { ((0.428900987 * fTemp18) + 0.0177829992) } else { 0.446684003 } } } else { if (iTemp13 as i32 == 1) { (0.446684003 - (0.195494995 * fTemp16)) } else { 0.251188993 } } } else { if (iTemp11 as i32 == 1) { (0.251188993 - (0.125295997 * fTemp14)) } else { 0.125892997 } } } else { if (iTemp8 as i32 == 1) { ((0.125295997 * fTemp12) + 0.125892997) } else { 0.251188993 } } } else { if (iTemp9 as i32 == 1) { (0.251188993 - (0.109935001 * fTemp10)) } else { 0.141253993 } };
			let mut fTemp103: f32 = if (iSlow17 as i32 == 1) { (fTemp74 * fTemp102) } else { (fTemp73 * fTemp102) };
			let mut fTemp104: f32 = (350.0 * fTemp48);
			let mut fTemp105: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 3500.0 } else { if (iTemp55 as i32 == 1) { (3500.0 - (200.0 * fTemp7)) } else { 3300.0 } } } else { if (iTemp53 as i32 == 1) { ((400.0 * fTemp56) + 3300.0) } else { 3700.0 } } } else { if (iTemp51 as i32 == 1) { (3700.0 - (200.0 * fTemp54)) } else { 3500.0 } } } else { 3500.0 } } else { if (iTemp47 as i32 == 1) { (3500.0 - (1050.0 * fTemp50)) } else { 2450.0 } } } else { if (iTemp45 as i32 == 1) { (fTemp104 + 2450.0) } else { 2800.0 } } } else { if (iTemp43 as i32 == 1) { ((250.0 * fTemp46) + 2800.0) } else { 3050.0 } } } else { if (iTemp40 as i32 == 1) { (3050.0 - (450.0 * fTemp44)) } else { 2600.0 } } } else { if (iTemp38 as i32 == 1) { ((75.0 * fTemp41) + 2600.0) } else { 2675.0 } } } else { if (iTemp36 as i32 == 1) { ((325.0 * fTemp39) + 2675.0) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp32 as i32 == 1) { ((350.0 * fTemp35) + 3000.0) } else { 3350.0 } } } else { if (iTemp30 as i32 == 1) { (3350.0 - (350.0 * fTemp33)) } else { 3000.0 } } } else { 3000.0 } } else { if (iTemp26 as i32 == 1) { ((900.0 * fTemp29) + 3000.0) } else { 3900.0 } } } else { if (iTemp23 as i32 == 1) { (3900.0 - (300.0 * fTemp27)) } else { 3600.0 } } } else { if (iTemp21 as i32 == 1) { ((300.0 * fTemp24) + 3600.0) } else { 3900.0 } } } else { if (iTemp19 as i32 == 1) { (3900.0 - (100.0 * fTemp22)) } else { 3800.0 } } } else { 3800.0 } } else { if (iTemp15 as i32 == 1) { (3800.0 - (900.0 * fTemp18)) } else { 2900.0 } } } else { if (iTemp13 as i32 == 1) { ((300.0 * fTemp16) + 2900.0) } else { 3200.0 } } } else { if (iTemp11 as i32 == 1) { ((50.0 * fTemp14) + 3200.0) } else { 3250.0 } } } else { if (iTemp8 as i32 == 1) { (3250.0 - (450.0 * fTemp12)) } else { 2800.0 } } } else { if (iTemp9 as i32 == 1) { (fTemp89 + 2800.0) } else { 2900.0 } };
			let mut fTemp106: f32 = f32::tan((self.fConst4 * fTemp105));
			let mut fTemp107: f32 = (1.0 / fTemp106);
			let mut fTemp108: f32 = (if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 130.0 } else { if (iTemp55 as i32 == 1) { (fTemp70 + 130.0) } else { 150.0 } } } else { 150.0 } } else { if (iTemp51 as i32 == 1) { (150.0 - fTemp69) } else { 130.0 } } } else { if (iTemp49 as i32 == 1) { ((50.0 * fTemp52) + 130.0) } else { 180.0 } } } else { if (iTemp47 as i32 == 1) { (180.0 - fTemp98) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp36 as i32 == 1) { (fTemp83 + 120.0) } else { 130.0 } } } else { if (iTemp34 as i32 == 1) { (130.0 - fTemp66) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp26 as i32 == 1) { ((10.0 * fTemp29) + 120.0) } else { 130.0 } } } else { if (iTemp23 as i32 == 1) { (fTemp65 + 130.0) } else { 150.0 } } } else { if (iTemp21 as i32 == 1) { (150.0 - (30.0 * fTemp24)) } else { 120.0 } } } else { 120.0 } } else { if (iTemp17 as i32 == 1) { ((60.0 * fTemp20) + 120.0) } else { 180.0 } } } else { if (iTemp15 as i32 == 1) { (180.0 - fTemp90) } else { 130.0 } } } else { if (iTemp13 as i32 == 1) { (130.0 - fTemp82) } else { 120.0 } } } else { 120.0 } } else { if (iTemp8 as i32 == 1) { (fTemp81 + 120.0) } else { 130.0 } } } else { if (iTemp9 as i32 == 1) { (130.0 - (10.0 * fTemp10)) } else { 120.0 } } / fTemp105);
			let mut fTemp109: f32 = (((fTemp107 + fTemp108) / fTemp106) + 1.0);
			self.fRec14[0] = (fTemp6 - (((self.fRec14[2] * (((fTemp107 - fTemp108) / fTemp106) + 1.0)) + (2.0 * (self.fRec14[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp106)))))) / fTemp109));
			let mut fTemp110: f32 = if (iTemp32 as i32 == 1) { (0.100000001 - (0.0841509998 * fTemp35)) } else { 0.0158489998 };
			let mut fTemp111: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 0.0158489998 } else { if (iTemp55 as i32 == 1) { ((0.00193400006 * fTemp7) + 0.0158489998) } else { 0.0177829992 } } } else { if (iTemp53 as i32 == 1) { (0.0177829992 - (0.00193400006 * fTemp56)) } else { 0.0158489998 } } } else { if (iTemp51 as i32 == 1) { ((0.0239620004 * fTemp54) + 0.0158489998) } else { 0.0398110002 } } } else { if (iTemp49 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp52)) } else { 0.00999999978 } } } else { if (iTemp47 as i32 == 1) { ((0.344812989 * fTemp50) + 0.00999999978) } else { 0.35481301 } } } else { if (iTemp45 as i32 == 1) { (0.35481301 - (0.103624001 * fTemp48)) } else { 0.251188993 } } } else { if (iTemp43 as i32 == 1) { (0.251188993 - (0.171755999 * fTemp46)) } else { 0.0794330016 } } } else { if (iTemp40 as i32 == 1) { ((0.0205669999 * fTemp44) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp38 as i32 == 1) { (0.100000001 - (0.0601890013 * fTemp41)) } else { 0.0398110002 } } } else { if (iTemp36 as i32 == 1) { ((0.0232849997 * fTemp39) + 0.0398110002) } else { 0.0630960017 } } } else { if (iTemp34 as i32 == 1) { ((0.0369039997 * fTemp37) + 0.0630960017) } else { 0.100000001 } } } else { fTemp110 } } else { if (iTemp30 as i32 == 1) { ((0.0635839999 * fTemp33) + 0.0158489998) } else { 0.0794330016 } } } else { if (iTemp28 as i32 == 1) { (0.0794330016 - (0.0478099994 * fTemp31)) } else { 0.0316229984 } } } else { if (iTemp26 as i32 == 1) { ((0.0683770031 * fTemp29) + 0.0316229984) } else { 0.100000001 } } } else { if (iTemp23 as i32 == 1) { (0.100000001 - (0.0900000036 * fTemp27)) } else { 0.00999999978 } } } else { if (iTemp21 as i32 == 1) { ((0.0401189998 * fTemp24) + 0.00999999978) } else { 0.0501190014 } } } else { fTemp101 } } else { if (iTemp17 as i32 == 1) { (0.0794330016 - (0.0694330037 * fTemp20)) } else { 0.00999999978 } } } else { if (iTemp15 as i32 == 1) { ((0.388107002 * fTemp18) + 0.00999999978) } else { 0.398106992 } } } else { if (iTemp13 as i32 == 1) { (0.398106992 - (0.198580995 * fTemp16)) } else { 0.199525997 } } } else { if (iTemp11 as i32 == 1) { (0.199525997 - (0.099526003 * fTemp14)) } else { 0.100000001 } } } else { if (iTemp8 as i32 == 1) { ((0.151188999 * fTemp12) + 0.100000001) } else { 0.251188993 } } } else { if (iTemp9 as i32 == 1) { (0.251188993 - (0.0516630001 * fTemp10)) } else { 0.199525997 } };
			let mut fTemp112: f32 = if (iSlow17 as i32 == 1) { (fTemp74 * fTemp111) } else { (fTemp73 * fTemp111) };
			let mut fTemp113: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { 4950.0 } else { if (iTemp47 as i32 == 1) { (4950.0 - (2200.0 * fTemp50)) } else { 2750.0 } } } else { if (iTemp45 as i32 == 1) { (fTemp104 + 2750.0) } else { 3100.0 } } } else { if (iTemp43 as i32 == 1) { ((240.0 * fTemp46) + 3100.0) } else { 3340.0 } } } else { if (iTemp40 as i32 == 1) { (3340.0 - (440.0 * fTemp44)) } else { 2900.0 } } } else { if (iTemp38 as i32 == 1) { (fTemp42 + 2900.0) } else { 2950.0 } } } else { if (iTemp36 as i32 == 1) { ((400.0 * fTemp39) + 2950.0) } else { 3350.0 } } } else { if (iTemp34 as i32 == 1) { (3350.0 - fTemp91) } else { 3300.0 } } } else { if (iTemp32 as i32 == 1) { ((290.0 * fTemp35) + 3300.0) } else { 3590.0 } } } else { if (iTemp30 as i32 == 1) { (3590.0 - (290.0 * fTemp33)) } else { 3300.0 } } } else { if (iTemp28 as i32 == 1) { ((100.0 * fTemp31) + 3300.0) } else { 3400.0 } } } else { if (iTemp26 as i32 == 1) { ((1550.0 * fTemp29) + 3400.0) } else { 4950.0 } } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { 4950.0 } } else { if (iTemp15 as i32 == 1) { (4950.0 - (1700.0 * fTemp18)) } else { 3250.0 } } } else { if (iTemp13 as i32 == 1) { ((330.0 * fTemp16) + 3250.0) } else { 3580.0 } } } else { if (iTemp11 as i32 == 1) { (3580.0 - (40.0 * fTemp14)) } else { 3540.0 } } } else { if (iTemp8 as i32 == 1) { (3540.0 - (540.0 * fTemp12)) } else { 3000.0 } } } else { if (iTemp9 as i32 == 1) { ((300.0 * fTemp10) + 3000.0) } else { 3300.0 } };
			let mut fTemp114: f32 = f32::tan((self.fConst4 * fTemp113));
			let mut fTemp115: f32 = (1.0 / fTemp114);
			let mut fTemp116: f32 = (if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { if (iTemp55 as i32 == 1) { if (iTemp57 as i32 == 1) { 140.0 } else { if (iTemp55 as i32 == 1) { ((60.0 * fTemp7) + 140.0) } else { 200.0 } } } else { 200.0 } } else { if (iTemp51 as i32 == 1) { (200.0 - (65.0 * fTemp54)) } else { 135.0 } } } else { if (iTemp49 as i32 == 1) { ((65.0 * fTemp52) + 135.0) } else { 200.0 } } } else { if (iTemp47 as i32 == 1) { (200.0 - (70.0 * fTemp50)) } else { 130.0 } } } else { if (iTemp45 as i32 == 1) { (130.0 - fTemp84) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp36 as i32 == 1) { (fTemp97 + 120.0) } else { 140.0 } } } else { if (iTemp34 as i32 == 1) { (140.0 - fTemp96) } else { 120.0 } } } else { 120.0 } } else { 120.0 } } else { 120.0 } } else { if (iTemp26 as i32 == 1) { (fTemp95 + 120.0) } else { 140.0 } } } else { if (iTemp23 as i32 == 1) { ((60.0 * fTemp27) + 140.0) } else { 200.0 } } } else { if (iTemp21 as i32 == 1) { (200.0 - fTemp25) } else { 120.0 } } } else { 120.0 } } else { if (iTemp17 as i32 == 1) { ((80.0 * fTemp20) + 120.0) } else { 200.0 } } } else { if (iTemp15 as i32 == 1) { (200.0 - (60.0 * fTemp18)) } else { 140.0 } } } else { if (iTemp13 as i32 == 1) { (140.0 - fTemp64) } else { 120.0 } } } else { 120.0 } } else { if (iTemp8 as i32 == 1) { ((15.0 * fTemp12) + 120.0) } else { 135.0 } } } else { if (iTemp9 as i32 == 1) { (135.0 - (15.0 * fTemp10)) } else { 120.0 } } / fTemp113);
			let mut fTemp117: f32 = (((fTemp115 + fTemp116) / fTemp114) + 1.0);
			self.fRec15[0] = (fTemp6 - (((self.fRec15[2] * (((fTemp115 - fTemp116) / fTemp114) + 1.0)) + (2.0 * (self.fRec15[1] * (1.0 - (1.0 / mydsp_faustpower2_f(fTemp114)))))) / fTemp117));
			let mut fTemp118: f32 = if (iTemp8 as i32 == 1) { if (iTemp11 as i32 == 1) { if (iTemp13 as i32 == 1) { if (iTemp15 as i32 == 1) { if (iTemp17 as i32 == 1) { if (iTemp19 as i32 == 1) { if (iTemp21 as i32 == 1) { if (iTemp23 as i32 == 1) { if (iTemp26 as i32 == 1) { if (iTemp28 as i32 == 1) { if (iTemp30 as i32 == 1) { if (iTemp32 as i32 == 1) { if (iTemp34 as i32 == 1) { if (iTemp36 as i32 == 1) { if (iTemp38 as i32 == 1) { if (iTemp40 as i32 == 1) { if (iTemp43 as i32 == 1) { if (iTemp45 as i32 == 1) { if (iTemp47 as i32 == 1) { if (iTemp49 as i32 == 1) { if (iTemp51 as i32 == 1) { if (iTemp53 as i32 == 1) { 0.00100000005 } else { if (iTemp51 as i32 == 1) { ((0.000777999987 * fTemp54) + 0.00100000005) } else { 0.00177800003 } } } else { if (iTemp49 as i32 == 1) { (0.00177800003 - (0.001147 * fTemp52)) } else { 0.000630999974 } } } else { if (iTemp47 as i32 == 1) { ((0.0993689969 * fTemp50) + 0.000630999974) } else { 0.100000001 } } } else { if (iTemp45 as i32 == 1) { ((0.0258930009 * fTemp48) + 0.100000001) } else { 0.125892997 } } } else { if (iTemp43 as i32 == 1) { (0.125892997 - (0.0860819966 * fTemp46)) } else { 0.0398110002 } } } else { if (iTemp40 as i32 == 1) { (0.0398110002 - (0.0298110005 * fTemp44)) } else { 0.00999999978 } } } else { if (iTemp38 as i32 == 1) { ((0.00584900007 * fTemp41) + 0.00999999978) } else { 0.0158489998 } } } else { if (iTemp36 as i32 == 1) { (0.0158489998 - (0.00325999991 * fTemp39)) } else { 0.0125890002 } } } else { if (iTemp34 as i32 == 1) { ((0.0874110013 * fTemp37) + 0.0125890002) } else { 0.100000001 } } } else { fTemp110 } } else { if (iTemp30 as i32 == 1) { ((0.00410400005 * fTemp33) + 0.0158489998) } else { 0.0199529994 } } } else { 0.0199529994 } } else { if (iTemp26 as i32 == 1) { (0.0199529994 - (0.0167909991 * fTemp29)) } else { 0.0031620001 } } } else { if (iTemp23 as i32 == 1) { (0.0031620001 - (0.00157700002 * fTemp27)) } else { 0.00158499996 } } } else { if (iTemp21 as i32 == 1) { ((0.00472499989 * fTemp24) + 0.00158499996) } else { 0.00631000008 } } } else { if (iTemp19 as i32 == 1) { (0.00631000008 - (0.00314799999 * fTemp22)) } else { 0.0031620001 } } } else { if (iTemp17 as i32 == 1) { (0.0031620001 - (0.00216199993 * fTemp20)) } else { 0.00100000005 } } } else { if (iTemp15 as i32 == 1) { ((0.0784329996 * fTemp18) + 0.00100000005) } else { 0.0794330016 } } } else { if (iTemp13 as i32 == 1) { ((0.0205669999 * fTemp16) + 0.0794330016) } else { 0.100000001 } } } else { if (iTemp11 as i32 == 1) { (0.100000001 - (0.0683770031 * fTemp14)) } else { 0.0316229984 } } } else { if (iTemp8 as i32 == 1) { ((0.0184959993 * fTemp12) + 0.0316229984) } else { 0.0501190014 } } } else { 0.0501190014 };
			let mut fTemp119: f32 = if (iSlow17 as i32 == 1) { (fTemp74 * fTemp118) } else { (fTemp73 * fTemp118) };
			let mut fTemp120: f32 = (fSlow0 * (((((((self.fRec0[2] * (0.0 - (fTemp75 / fTemp62))) + ((self.fRec0[0] * fTemp75) / fTemp62)) / fTemp72) + (((self.fRec12[2] * (0.0 - (fTemp88 / fTemp79))) + ((self.fRec12[0] * fTemp88) / fTemp79)) / fTemp86)) + (((self.fRec13[2] * (0.0 - (fTemp103 / fTemp93))) + ((self.fRec13[0] * fTemp103) / fTemp93)) / fTemp100)) + (((self.fRec14[2] * (0.0 - (fTemp112 / fTemp106))) + ((self.fRec14[0] * fTemp112) / fTemp106)) / fTemp109)) + (((self.fRec15[2] * (0.0 - (fTemp119 / fTemp114))) + ((self.fRec15[0] * fTemp119) / fTemp114)) / fTemp117)));
			outputs[0][i as usize] = (fTemp120 as f32);
			outputs[1][i as usize] = (fTemp120 as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec2[1] = self.fRec2[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec3[1] = self.fRec3[0];
			self.iRec8[1] = self.iRec8[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec0[2] = self.fRec0[1];
			self.fRec0[1] = self.fRec0[0];
			self.fRec12[2] = self.fRec12[1];
			self.fRec12[1] = self.fRec12[0];
			self.fRec13[2] = self.fRec13[1];
			self.fRec13[1] = self.fRec13[0];
			self.fRec14[2] = self.fRec14[1];
			self.fRec14[1] = self.fRec14[0];
			self.fRec15[2] = self.fRec15[1];
			self.fRec15[1] = self.fRec15[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

