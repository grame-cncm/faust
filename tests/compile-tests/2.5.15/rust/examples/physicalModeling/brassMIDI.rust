
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	iRec6: [i32;2],
	fHslider1: f32,
	iVec0: [i32;2],
	fRec14: [f32;2],
	fRec13: [f32;2],
	fRec15: [f32;2],
	fButton0: f32,
	fHslider2: f32,
	fVec1: [f32;2],
	fHslider3: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider4: f32,
	fRec20: [f32;2],
	fHslider5: f32,
	fConst2: f32,
	fHslider6: f32,
	fRec21: [f32;2],
	fRec22: [f32;2],
	fHslider7: f32,
	fHslider8: f32,
	fRec23: [f32;2],
	fHslider9: f32,
	fRec24: [f32;2],
	fRec19: [f32;3],
	fVec2: [f32;2],
	fRec18: [f32;2],
	IOTA: i32,
	fRec16: [f32;2048],
	fConst3: f32,
	fConst4: f32,
	fVec3: [f32;2],
	fRec11: [f32;2],
	fRec2: [f32;2048],
	fRec0: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			iRec6: [0;2],
			fHslider1: 0.0,
			iVec0: [0;2],
			fRec14: [0.0;2],
			fRec13: [0.0;2],
			fRec15: [0.0;2],
			fButton0: 0.0,
			fHslider2: 0.0,
			fVec1: [0.0;2],
			fHslider3: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider4: 0.0,
			fRec20: [0.0;2],
			fHslider5: 0.0,
			fConst2: 0.0,
			fHslider6: 0.0,
			fRec21: [0.0;2],
			fRec22: [0.0;2],
			fHslider7: 0.0,
			fHslider8: 0.0,
			fRec23: [0.0;2],
			fHslider9: 0.0,
			fRec24: [0.0;2],
			fRec19: [0.0;3],
			fVec2: [0.0;2],
			fRec18: [0.0;2],
			IOTA: 0,
			fRec16: [0.0;2048],
			fConst3: 0.0,
			fConst4: 0.0,
			fVec3: [0.0;2],
			fRec11: [0.0;2],
			fRec2: [0.0;2048],
			fRec0: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Simple MIDI-controllable brass instrument physical model with physical parameters.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("license", "MIT");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "BrassMIDI");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		0
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 0.5;
		self.fHslider1 = 0.5;
		self.fButton0 = 0.0;
		self.fHslider2 = 0.0;
		self.fHslider3 = 0.5;
		self.fHslider4 = 1.0;
		self.fHslider5 = 0.5;
		self.fHslider6 = 5.0;
		self.fHslider7 = 440.0;
		self.fHslider8 = 1.0;
		self.fHslider9 = 0.5;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iRec6[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iVec0[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec14[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec13[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec15[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec1[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec20[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec21[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec22[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec23[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec24[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec19[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec2[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec18[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l14: i32 = 0;
		loop {
			self.fRec16[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2048) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fVec3[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fRec11[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fRec2[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2048) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fRec0[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1000.0 / self.fConst0);
		self.fConst2 = (6.28318548 / self.fConst0);
		self.fConst3 = (0.00882352982 * self.fConst0);
		self.fConst4 = (0.5 * self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("brass");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("midi");
		ui_interface.declare(&mut self.fHslider7, "0", "");
		ui_interface.declare(&mut self.fHslider7, "style", "knob");
		ui_interface.addHorizontalSlider("freq", &mut self.fHslider7, 440.0, 50.0, 1000.0, 0.01);
		ui_interface.declare(&mut self.fHslider8, "1", "");
		ui_interface.declare(&mut self.fHslider8, "hidden", "1");
		ui_interface.declare(&mut self.fHslider8, "midi", "pitchwheel");
		ui_interface.declare(&mut self.fHslider8, "style", "knob");
		ui_interface.addHorizontalSlider("bend", &mut self.fHslider8, 1.0, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider3, "2", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("gain", &mut self.fHslider3, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider4, "3", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("envAttack", &mut self.fHslider4, 1.0, 0.0, 30.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "4", "");
		ui_interface.declare(&mut self.fHslider2, "hidden", "1");
		ui_interface.declare(&mut self.fHslider2, "midi", "ctrl 64");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("sustain", &mut self.fHslider2, 0.0, 0.0, 1.0, 1.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("otherParams");
		ui_interface.declare(&mut self.fHslider9, "0", "");
		ui_interface.declare(&mut self.fHslider9, "midi", "ctrl 1");
		ui_interface.declare(&mut self.fHslider9, "style", "knob");
		ui_interface.addHorizontalSlider("lipsTension", &mut self.fHslider9, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("mute", &mut self.fHslider1, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider6, "2", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoFreq", &mut self.fHslider6, 5.0, 1.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider5, "3", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.addHorizontalSlider("vibratoGain", &mut self.fHslider5, 0.5, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider0, "4", "");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.addHorizontalSlider("outGain", &mut self.fHslider0, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fButton0, "2", "");
		ui_interface.addButton("gate", &mut self.fButton0);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = (0.00100000005 * (self.fHslider1 as f32));
		let mut fSlow2: f32 = f32::min(1.0, ((self.fButton0 as f32) + (self.fHslider2 as f32)));
		let mut fSlow3: f32 = f32::exp((0.0 - (self.fConst1 / (self.fHslider4 as f32))));
		let mut fSlow4: f32 = ((fSlow2 * (self.fHslider3 as f32)) * (1.0 - fSlow3));
		let mut fSlow5: f32 = (0.0399999991 * (self.fHslider5 as f32));
		let mut fSlow6: f32 = (self.fConst2 * (self.fHslider6 as f32));
		let mut fSlow7: f32 = f32::sin(fSlow6);
		let mut fSlow8: f32 = f32::cos(fSlow6);
		let mut fSlow9: f32 = (0.0 - fSlow7);
		let mut fSlow10: f32 = (self.fHslider7 as f32);
		let mut fSlow11: f32 = (self.fConst2 * fSlow10);
		let mut fSlow12: f32 = (self.fHslider8 as f32);
		let mut iSlow13: i32 = ((fSlow2 == 0.0) as i32);
		let mut fSlow14: f32 = (0.00100000005 * (self.fHslider9 as f32));
		let mut fSlow15: f32 = (self.fConst4 / fSlow10);
		let mut i: i32 = 0;
		loop {
			self.iRec6[0] = 0;
			self.iVec0[0] = 1;
			self.fRec14[0] = (fSlow1 + (0.999000013 * self.fRec14[1]));
			self.fRec13[0] = ((self.fRec14[0] * self.fRec13[1]) + ((1.0 - self.fRec14[0]) * self.fRec11[1]));
			let mut fRec10: f32 = (self.fRec13[0] + (self.iRec6[1] as f32));
			self.fRec15[0] = self.fRec0[1];
			self.fVec1[0] = fSlow2;
			self.fRec20[0] = (fSlow4 + (fSlow3 * self.fRec20[1]));
			self.fRec21[0] = ((fSlow7 * self.fRec22[1]) + (fSlow8 * self.fRec21[1]));
			self.fRec22[0] = (((fSlow8 * self.fRec22[1]) + (fSlow9 * self.fRec21[1])) + ((1 - self.iVec0[1]) as f32));
			let mut fTemp0: f32 = (self.fRec20[0] * ((fSlow5 * (self.fRec20[0] * self.fRec21[0])) + 1.0));
			let mut iTemp1: i32 = (((fSlow2 == self.fVec1[1]) as i32) | iSlow13);
			self.fRec23[0] = ((fSlow12 * (1.0 - (0.999000013 * (iTemp1 as f32)))) + (0.999000013 * ((iTemp1 as f32) * self.fRec23[1])));
			self.fRec24[0] = (fSlow14 + (0.999000013 * self.fRec24[1]));
			self.fRec19[0] = ((0.0299999993 * ((0.300000012 * fTemp0) - (0.850000024 * self.fRec15[1]))) - ((self.fRec19[1] * (0.0 - (1.99399996 * f32::cos((fSlow11 * (self.fRec23[0] * f32::powf(4.0, ((2.0 * self.fRec24[0]) + -1.0)))))))) + (0.994009018 * self.fRec19[2])));
			let mut fTemp2: f32 = f32::max(-1.0, f32::min(1.0, mydsp_faustpower2_f(self.fRec19[0])));
			let mut fTemp3: f32 = (0.850000024 * (self.fRec15[1] * (1.0 - fTemp2)));
			let mut fTemp4: f32 = (0.300000012 * (fTemp0 * fTemp2));
			self.fVec2[0] = (fTemp4 + fTemp3);
			self.fRec18[0] = ((fTemp3 + ((0.995000005 * self.fRec18[1]) + fTemp4)) - self.fVec2[1]);
			self.fRec16[(self.IOTA & 2047) as usize] = self.fRec18[0];
			let mut iRec17: i32 = 0;
			let mut fTemp5: f32 = (fSlow15 / self.fRec23[0]);
			let mut fTemp6: f32 = (fTemp5 + -1.49999499);
			let mut iTemp7: i32 = (fTemp6 as i32);
			let mut iTemp8: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, (iTemp7 as i32)) as f32)) as i32) + 1);
			let mut fTemp9: f32 = f32::floor(fTemp6);
			let mut fTemp10: f32 = (fTemp5 + (-1.0 - fTemp9));
			let mut fTemp11: f32 = (0.0 - fTemp10);
			let mut fTemp12: f32 = (fTemp5 + (-2.0 - fTemp9));
			let mut fTemp13: f32 = (0.0 - (0.5 * fTemp12));
			let mut fTemp14: f32 = (fTemp5 + (-3.0 - fTemp9));
			let mut fTemp15: f32 = (0.0 - (0.333333343 * fTemp14));
			let mut fTemp16: f32 = (fTemp5 + (-4.0 - fTemp9));
			let mut fTemp17: f32 = (0.0 - (0.25 * fTemp16));
			let mut fTemp18: f32 = (fTemp5 - fTemp9);
			let mut iTemp19: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp7 + 2) as i32)) as f32)) as i32) + 1);
			let mut fTemp20: f32 = (0.0 - fTemp14);
			let mut fTemp21: f32 = (0.0 - (0.5 * fTemp16));
			let mut iTemp22: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp7 + 1) as i32)) as f32)) as i32) + 1);
			let mut fTemp23: f32 = (0.0 - fTemp12);
			let mut fTemp24: f32 = (0.0 - (0.5 * fTemp14));
			let mut fTemp25: f32 = (0.0 - (0.333333343 * fTemp16));
			let mut fTemp26: f32 = (fTemp10 * fTemp12);
			let mut iTemp27: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp7 + 3) as i32)) as f32)) as i32) + 1);
			let mut fTemp28: f32 = (0.0 - fTemp16);
			let mut fTemp29: f32 = (fTemp26 * fTemp14);
			let mut iTemp30: i32 = ((f32::min(self.fConst3, (std::cmp::max(0, ((iTemp7 + 4) as i32)) as f32)) as i32) + 1);
			self.fVec3[0] = (((((self.fRec16[((self.IOTA - iTemp8) & 2047) as usize] * fTemp11) * fTemp13) * fTemp15) * fTemp17) + (fTemp18 * ((((0.5 * (((fTemp10 * self.fRec16[((self.IOTA - iTemp19) & 2047) as usize]) * fTemp20) * fTemp21)) + (((self.fRec16[((self.IOTA - iTemp22) & 2047) as usize] * fTemp23) * fTemp24) * fTemp25)) + (0.166666672 * ((fTemp26 * self.fRec16[((self.IOTA - iTemp27) & 2047) as usize]) * fTemp28))) + (0.0416666679 * (fTemp29 * self.fRec16[((self.IOTA - iTemp30) & 2047) as usize])))));
			self.fRec11[0] = self.fVec3[1];
			let mut iRec12: i32 = iRec17;
			let mut fRec7: f32 = fRec10;
			let mut fRec8: f32 = self.fRec11[0];
			let mut fRec9: f32 = (self.fRec11[0] + (iRec12 as f32));
			self.fRec2[(self.IOTA & 2047) as usize] = fRec7;
			let mut fRec3: f32 = (((((fTemp11 * fTemp13) * fTemp15) * fTemp17) * self.fRec2[((self.IOTA - iTemp8) & 2047) as usize]) + (fTemp18 * (((0.166666672 * ((fTemp26 * fTemp28) * self.fRec2[((self.IOTA - iTemp27) & 2047) as usize])) + ((((fTemp23 * fTemp24) * fTemp25) * self.fRec2[((self.IOTA - iTemp22) & 2047) as usize]) + (0.5 * (((fTemp10 * fTemp20) * fTemp21) * self.fRec2[((self.IOTA - iTemp19) & 2047) as usize])))) + (0.0416666679 * (fTemp29 * self.fRec2[((self.IOTA - iTemp30) & 2047) as usize])))));
			let mut fRec4: f32 = fRec8;
			let mut fRec5: f32 = fRec9;
			self.fRec0[0] = fRec3;
			let mut fRec1: f32 = fRec5;
			let mut fTemp31: f32 = (fSlow0 * fRec1);
			outputs[0][i as usize] = (fTemp31 as f32);
			outputs[1][i as usize] = (fTemp31 as f32);
			self.iRec6[1] = self.iRec6[0];
			self.iVec0[1] = self.iVec0[0];
			self.fRec14[1] = self.fRec14[0];
			self.fRec13[1] = self.fRec13[0];
			self.fRec15[1] = self.fRec15[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[1] = self.fRec21[0];
			self.fRec22[1] = self.fRec22[0];
			self.fRec23[1] = self.fRec23[0];
			self.fRec24[1] = self.fRec24[0];
			self.fRec19[2] = self.fRec19[1];
			self.fRec19[1] = self.fRec19[0];
			self.fVec2[1] = self.fVec2[0];
			self.fRec18[1] = self.fRec18[0];
			self.IOTA = (self.IOTA + 1);
			self.fVec3[1] = self.fVec3[0];
			self.fRec11[1] = self.fRec11[0];
			self.fRec0[1] = self.fRec0[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

