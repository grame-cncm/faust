
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}
pub fn mydsp_faustpower3_f(value: f32) -> f32 {
	((value * value) * value)
}
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fHslider0: f32,
	iVec0: [i32;2],
	fCheckbox1: f32,
	fHslider1: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider2: f32,
	fHslider3: f32,
	fHslider4: f32,
	fConst2: f32,
	fHslider5: f32,
	fHslider6: f32,
	fHslider7: f32,
	fRec5: [f32;2],
	fRec6: [f32;2],
	fRec4: [f32;3],
	fRec3: [f32;3],
	fRec2: [f32;3],
	fRec1: [f32;3],
	fRec0: [f32;2],
	fCheckbox2: f32,
	fRec11: [f32;3],
	fRec10: [f32;3],
	fRec9: [f32;3],
	fRec8: [f32;3],
	fRec7: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fHslider0: 0.0,
			iVec0: [0;2],
			fCheckbox1: 0.0,
			fHslider1: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fHslider4: 0.0,
			fConst2: 0.0,
			fHslider5: 0.0,
			fHslider6: 0.0,
			fHslider7: 0.0,
			fRec5: [0.0;2],
			fRec6: [0.0;2],
			fRec4: [0.0;3],
			fRec3: [0.0;3],
			fRec2: [0.0;3],
			fRec1: [0.0;3],
			fRec0: [0.0;2],
			fCheckbox2: 0.0,
			fRec11: [0.0;3],
			fRec10: [0.0;3],
			fRec9: [0.0;3],
			fRec8: [0.0;3],
			fRec7: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "JOS, revised by RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Phaser demo application.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "phaser");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("phaflangers.lib/name", "Faust Phaser and Flanger Library");
		m.declare("phaflangers.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 0.0;
		self.fCheckbox1 = 0.0;
		self.fHslider1 = 1.0;
		self.fHslider2 = 1000.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 1.5;
		self.fHslider5 = 100.0;
		self.fHslider6 = 800.0;
		self.fHslider7 = 0.5;
		self.fCheckbox2 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec5[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec6[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec4[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 3) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec3[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 3) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec2[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 3) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec1[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 3) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fRec0[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec11[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 3) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec10[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 3) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fRec9[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 3) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fRec8[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 3) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fRec7[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1.0 / self.fConst0);
		self.fConst2 = (6.28318548 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference:   https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface.openVerticalBox("PHASER2");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the phaser   has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fCheckbox2, "1", "");
		ui_interface.addCheckButton("Invert Internal Phaser Sum", &mut self.fCheckbox2);
		ui_interface.declare(&mut self.fCheckbox1, "2", "");
		ui_interface.addCheckButton("Vibrato Mode", &mut self.fCheckbox1);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider7, "1", "");
		ui_interface.declare(&mut self.fHslider7, "style", "knob");
		ui_interface.declare(&mut self.fHslider7, "unit", "Hz");
		ui_interface.addHorizontalSlider("Speed", &mut self.fHslider7, 0.5, 0.0, 10.0, 0.001);
		ui_interface.declare(&mut self.fHslider1, "2", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.addHorizontalSlider("Notch Depth (Intensity)", &mut self.fHslider1, 1.0, 0.0, 1.0, 0.001);
		ui_interface.declare(&mut self.fHslider3, "3", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("Feedback Gain", &mut self.fHslider3, 0.0, -0.999, 0.999, 0.001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "scale", "log");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "unit", "Hz");
		ui_interface.addHorizontalSlider("Notch width", &mut self.fHslider2, 1000.0, 10.0, 5000.0, 1.0);
		ui_interface.declare(&mut self.fHslider5, "2", "");
		ui_interface.declare(&mut self.fHslider5, "scale", "log");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.declare(&mut self.fHslider5, "unit", "Hz");
		ui_interface.addHorizontalSlider("Min Notch1 Freq", &mut self.fHslider5, 100.0, 20.0, 5000.0, 1.0);
		ui_interface.declare(&mut self.fHslider6, "3", "");
		ui_interface.declare(&mut self.fHslider6, "scale", "log");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.declare(&mut self.fHslider6, "unit", "Hz");
		ui_interface.addHorizontalSlider("Max Notch1 Freq", &mut self.fHslider6, 800.0, 20.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider4, "4", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.addHorizontalSlider("Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n)", &mut self.fHslider4, 1.5, 1.1000000000000001, 4.0, 0.001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Phaser Output Level", &mut self.fHslider0, 0.0, -60.0, 10.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32)));
		let mut fSlow2: f32 = (0.5 * if (((self.fCheckbox1 as f32) as i32) as i32 == 1) { 2.0 } else { (self.fHslider1 as f32) });
		let mut fSlow3: f32 = (1.0 - fSlow2);
		let mut fSlow4: f32 = f32::exp((self.fConst1 * (0.0 - (3.14159274 * (self.fHslider2 as f32)))));
		let mut fSlow5: f32 = mydsp_faustpower2_f(fSlow4);
		let mut fSlow6: f32 = (self.fHslider3 as f32);
		let mut fSlow7: f32 = (0.0 - (2.0 * fSlow4));
		let mut fSlow8: f32 = (self.fHslider4 as f32);
		let mut fSlow9: f32 = (self.fHslider5 as f32);
		let mut fSlow10: f32 = (self.fConst2 * fSlow9);
		let mut fSlow11: f32 = (0.5 * (0.0 - (self.fConst2 * (fSlow9 - f32::max(fSlow9, (self.fHslider6 as f32))))));
		let mut fSlow12: f32 = (self.fConst2 * (self.fHslider7 as f32));
		let mut fSlow13: f32 = f32::sin(fSlow12);
		let mut fSlow14: f32 = f32::cos(fSlow12);
		let mut fSlow15: f32 = (0.0 - fSlow13);
		let mut fSlow16: f32 = mydsp_faustpower2_f(fSlow8);
		let mut fSlow17: f32 = mydsp_faustpower3_f(fSlow8);
		let mut fSlow18: f32 = mydsp_faustpower4_f(fSlow8);
		let mut fSlow19: f32 = if (((self.fCheckbox2 as f32) as i32) as i32 == 1) { (0.0 - fSlow2) } else { fSlow2 };
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 };
			self.iVec0[0] = 1;
			self.fRec5[0] = ((fSlow13 * self.fRec6[1]) + (fSlow14 * self.fRec5[1]));
			self.fRec6[0] = (((fSlow14 * self.fRec6[1]) + (fSlow15 * self.fRec5[1])) + ((1 - self.iVec0[1]) as f32));
			let mut fTemp2: f32 = (fSlow10 + (fSlow11 * (1.0 - self.fRec5[0])));
			let mut fTemp3: f32 = (self.fRec4[1] * f32::cos((fSlow8 * fTemp2)));
			self.fRec4[0] = (((fSlow1 * fTemp1) + (fSlow6 * self.fRec0[1])) - ((fSlow7 * fTemp3) + (fSlow5 * self.fRec4[2])));
			let mut fTemp4: f32 = (self.fRec3[1] * f32::cos((fSlow16 * fTemp2)));
			self.fRec3[0] = ((self.fRec4[2] + (fSlow7 * (fTemp3 - fTemp4))) + (fSlow5 * (self.fRec4[0] - self.fRec3[2])));
			let mut fTemp5: f32 = (self.fRec2[1] * f32::cos((fSlow17 * fTemp2)));
			self.fRec2[0] = ((self.fRec3[2] + (fSlow7 * (fTemp4 - fTemp5))) + (fSlow5 * (self.fRec3[0] - self.fRec2[2])));
			let mut fTemp6: f32 = (self.fRec1[1] * f32::cos((fSlow18 * fTemp2)));
			self.fRec1[0] = ((self.fRec2[2] + (fSlow7 * (fTemp5 - fTemp6))) + (fSlow5 * (self.fRec2[0] - self.fRec1[2])));
			self.fRec0[0] = ((fSlow5 * self.fRec1[0]) + ((fSlow7 * fTemp6) + self.fRec1[2]));
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { ((fSlow1 * (fTemp1 * fSlow3)) + (self.fRec0[0] * fSlow19)) } as f32);
			let mut fTemp7: f32 = (inputs[1][i as usize] as f32);
			let mut fTemp8: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp7 };
			let mut fTemp9: f32 = (fSlow10 + (fSlow11 * (1.0 - self.fRec6[0])));
			let mut fTemp10: f32 = (self.fRec11[1] * f32::cos((fSlow8 * fTemp9)));
			self.fRec11[0] = (((fSlow1 * fTemp8) + (fSlow6 * self.fRec7[1])) - ((fSlow7 * fTemp10) + (fSlow5 * self.fRec11[2])));
			let mut fTemp11: f32 = (self.fRec10[1] * f32::cos((fSlow16 * fTemp9)));
			self.fRec10[0] = ((self.fRec11[2] + (fSlow7 * (fTemp10 - fTemp11))) + (fSlow5 * (self.fRec11[0] - self.fRec10[2])));
			let mut fTemp12: f32 = (self.fRec9[1] * f32::cos((fSlow17 * fTemp9)));
			self.fRec9[0] = ((self.fRec10[2] + (fSlow7 * (fTemp11 - fTemp12))) + (fSlow5 * (self.fRec10[0] - self.fRec9[2])));
			let mut fTemp13: f32 = (self.fRec8[1] * f32::cos((fSlow18 * fTemp9)));
			self.fRec8[0] = ((self.fRec9[2] + (fSlow7 * (fTemp12 - fTemp13))) + (fSlow5 * (self.fRec9[0] - self.fRec8[2])));
			self.fRec7[0] = ((fSlow5 * self.fRec8[0]) + ((fSlow7 * fTemp13) + self.fRec8[2]));
			outputs[1][i as usize] = (if (iSlow0 as i32 == 1) { fTemp7 } else { ((fSlow1 * (fTemp8 * fSlow3)) + (self.fRec7[0] * fSlow19)) } as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec4[2] = self.fRec4[1];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec11[2] = self.fRec11[1];
			self.fRec11[1] = self.fRec11[0];
			self.fRec10[2] = self.fRec10[1];
			self.fRec10[1] = self.fRec10[0];
			self.fRec9[2] = self.fRec9[1];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[2] = self.fRec8[1];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[1] = self.fRec7[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

