


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider1: f32,
	iVec0: [i32;2],
	fRec0: [f32;2],
	fRec1: [f32;2],
	fHbargraph0: f32,
	fCheckbox1: f32,
	fHslider2: f32,
	fHslider3: f32,
	IOTA: i32,
	fVec1: [f32;4096],
	fHslider4: f32,
	fHslider5: f32,
	fRec2: [f32;2],
	fVec2: [f32;4096],
	fRec3: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			iVec0: [0;2],
			fRec0: [0.0;2],
			fRec1: [0.0;2],
			fHbargraph0: 0.0,
			fCheckbox1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			IOTA: 0,
			fVec1: [0.0;4096],
			fHslider4: 0.0,
			fHslider5: 0.0,
			fRec2: [0.0;2],
			fVec2: [0.0;4096],
			fRec3: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("author", "JOS, revised by RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("delays.lib/name", "Faust Delay Library");
		m.declare("delays.lib/version", "0.0");
		m.declare("description", "Flanger effect application.");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "flanger");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("phaflangers.lib/name", "Faust Phaser and Flanger Library");
		m.declare("phaflangers.lib/version", "0.0");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 0.0;
		self.fHslider1 = 0.5;
		self.fCheckbox1 = 0.0;
		self.fHslider2 = 1.0;
		self.fHslider3 = 0.0;
		self.fHslider4 = 1.0;
		self.fHslider5 = 10.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec0[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec1[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l3: i32 = 0;
		loop {
			self.fVec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 4096) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec2[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fVec2[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 4096) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fRec3[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (6.28318548 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface.openVerticalBox("FLANGER");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the flanger   has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fCheckbox1, "1", "");
		ui_interface.addCheckButton("Invert Flange Sum", &mut self.fCheckbox1);
		ui_interface.declare(&mut self.fHbargraph0, "2", "");
		ui_interface.declare(&mut self.fHbargraph0, "style", "led");
		ui_interface.declare(&mut self.fHbargraph0, "tooltip", "Display sum of flange delays");
		ui_interface.addHorizontalBargraph("Flange LFO", &mut self.fHbargraph0, -1.5, 1.5);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "unit", "Hz");
		ui_interface.addHorizontalSlider("Speed", &mut self.fHslider1, 0.5, 0.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "2", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.addHorizontalSlider("Depth", &mut self.fHslider2, 1.0, 0.0, 1.0, 0.001);
		ui_interface.declare(&mut self.fHslider3, "3", "");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.addHorizontalSlider("Feedback", &mut self.fHslider3, 0.0, -0.999, 0.999, 0.001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openHorizontalBox("Delay Controls");
		ui_interface.declare(&mut self.fHslider5, "1", "");
		ui_interface.declare(&mut self.fHslider5, "style", "knob");
		ui_interface.declare(&mut self.fHslider5, "unit", "ms");
		ui_interface.addHorizontalSlider("Flange Delay", &mut self.fHslider5, 10.0, 0.0, 20.0, 0.001);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.declare(&mut self.fHslider4, "unit", "ms");
		ui_interface.addHorizontalSlider("Delay Offset", &mut self.fHslider4, 1.0, 0.0, 20.0, 0.001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Flanger Output Level", &mut self.fHslider0, 0.0, -60.0, 10.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32)));
		let mut fSlow2: f32 = (self.fConst1 * (self.fHslider1 as f32));
		let mut fSlow3: f32 = f32::sin(fSlow2);
		let mut fSlow4: f32 = f32::cos(fSlow2);
		let mut fSlow5: f32 = (0.0 - fSlow3);
		let mut fSlow6: f32 = (self.fHslider2 as f32);
		let mut fSlow7: f32 = if (((self.fCheckbox1 as f32) as i32) as i32 == 1) { (0.0 - fSlow6) } else { fSlow6 };
		let mut fSlow8: f32 = (self.fHslider3 as f32);
		let mut fSlow9: f32 = (0.00100000005 * (self.fHslider4 as f32));
		let mut fSlow10: f32 = (0.000500000024 * (self.fHslider5 as f32));
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec0[0] = ((fSlow3 * self.fRec1[1]) + (fSlow4 * self.fRec0[1]));
			self.fRec1[0] = (((fSlow4 * self.fRec1[1]) + (fSlow5 * self.fRec0[1])) + ((1 - self.iVec0[1]) as f32));
			self.fHbargraph0 = ((self.fRec1[0] + self.fRec0[0]) as f32);
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = (fSlow1 * if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 });
			let mut fTemp2: f32 = ((fSlow8 * self.fRec2[1]) - fTemp1);
			self.fVec1[(self.IOTA & 4095) as usize] = fTemp2;
			let mut fTemp3: f32 = (self.fConst0 * (fSlow9 + (fSlow10 * (self.fRec0[0] + 1.0))));
			let mut iTemp4: i32 = (fTemp3 as i32);
			let mut fTemp5: f32 = f32::floor(fTemp3);
			self.fRec2[0] = ((self.fVec1[((self.IOTA - std::cmp::min(2049, std::cmp::max(0, iTemp4))) & 4095) as usize] * (fTemp5 + (1.0 - fTemp3))) + ((fTemp3 - fTemp5) * self.fVec1[((self.IOTA - std::cmp::min(2049, std::cmp::max(0, (iTemp4 + 1)))) & 4095) as usize]));
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { (0.5 * (fTemp1 + (fSlow7 * self.fRec2[0]))) } as f32);
			let mut fTemp6: f32 = (inputs[1][i as usize] as f32);
			let mut fTemp7: f32 = (fSlow1 * if (iSlow0 as i32 == 1) { 0.0 } else { fTemp6 });
			let mut fTemp8: f32 = ((fSlow8 * self.fRec3[1]) - fTemp7);
			self.fVec2[(self.IOTA & 4095) as usize] = fTemp8;
			let mut fTemp9: f32 = (self.fConst0 * (fSlow9 + (fSlow10 * (self.fRec1[0] + 1.0))));
			let mut iTemp10: i32 = (fTemp9 as i32);
			let mut fTemp11: f32 = f32::floor(fTemp9);
			self.fRec3[0] = ((self.fVec2[((self.IOTA - std::cmp::min(2049, std::cmp::max(0, iTemp10))) & 4095) as usize] * (fTemp11 + (1.0 - fTemp9))) + ((fTemp9 - fTemp11) * self.fVec2[((self.IOTA - std::cmp::min(2049, std::cmp::max(0, (iTemp10 + 1)))) & 4095) as usize]));
			outputs[1][i as usize] = (if (iSlow0 as i32 == 1) { fTemp6 } else { (0.5 * (fTemp7 + (fSlow7 * self.fRec3[0]))) } as f32);
			self.iVec0[1] = self.iVec0[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec1[1] = self.fRec1[0];
			self.IOTA = (self.IOTA + 1);
			self.fRec2[1] = self.fRec2[0];
			self.fRec3[1] = self.fRec3[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

