
pub fn mydsp_faustpower2_f(value: f32) -> f32 {
	(value * value)
}
pub fn mydsp_faustpower3_f(value: f32) -> f32 {
	((value * value) * value)
}
pub fn mydsp_faustpower4_f(value: f32) -> f32 {
	(((value * value) * value) * value)
}


pub struct mydsp {
	
	fDummy: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fHslider1: f32,
	iVec0: [i32;4],
	fConst2: f32,
	fConst3: f32,
	fConst4: f32,
	fConst5: f32,
	fConst6: f32,
	fConst7: f32,
	fConst8: f32,
	fConst9: f32,
	fConst10: f32,
	fConst11: f32,
	fConst12: f32,
	fConst13: f32,
	fCheckbox0: f32,
	fHslider2: f32,
	fRec4: [f32;2],
	fCheckbox1: f32,
	fVslider0: f32,
	fHslider3: f32,
	fRec10: [f32;2],
	fVslider1: f32,
	fEntry0: f32,
	fConst14: f32,
	fHslider4: f32,
	fVslider2: f32,
	fRec12: [f32;2],
	fVec1: [f32;2],
	fRec11: [f32;2],
	fConst15: f32,
	fVec2: [f32;2],
	fConst16: f32,
	fVec3: [f32;2],
	fVec4: [f32;2],
	fConst17: f32,
	fVec5: [f32;2],
	fVec6: [f32;2],
	fVec7: [f32;2],
	fVslider3: f32,
	fVec8: [f32;2],
	fRec13: [f32;2],
	fVec9: [f32;2],
	fVec10: [f32;2],
	fVec11: [f32;2],
	fVec12: [f32;2],
	fVec13: [f32;2],
	fVec14: [f32;2],
	fVslider4: f32,
	fVec15: [f32;2],
	fRec14: [f32;2],
	fVec16: [f32;2],
	fVec17: [f32;2],
	fVec18: [f32;2],
	fVec19: [f32;2],
	fVec20: [f32;2],
	fVec21: [f32;2],
	fConst18: f32,
	fVslider5: f32,
	fVec22: [f32;2],
	fRec15: [f32;2],
	fVec23: [f32;2],
	IOTA: i32,
	fVec24: [f32;4096],
	fConst19: f32,
	fVec25: [f32;2],
	fRec16: [f32;2],
	fVec26: [f32;2],
	fVec27: [f32;4096],
	fVec28: [f32;2],
	fRec17: [f32;2],
	fVec29: [f32;2],
	fVec30: [f32;4096],
	fConst20: f32,
	fVslider6: f32,
	fRec18: [f32;2],
	fRec19: [f32;2],
	fRec20: [f32;2],
	fVslider7: f32,
	fCheckbox2: f32,
	fVslider8: f32,
	fRec21: [f32;2],
	fConst21: f32,
	fVec31: [f32;2],
	fVec32: [f32;2],
	fVec33: [f32;4096],
	fVec34: [f32;2],
	fVec35: [f32;2],
	fVec36: [f32;4096],
	fVec37: [f32;2],
	fVec38: [f32;2],
	fVec39: [f32;4096],
	fVslider9: f32,
	iRec23: [i32;2],
	fRec22: [f32;4],
	fConst22: f32,
	fHslider5: f32,
	fRec24: [f32;2],
	fHslider6: f32,
	fRec9: [f32;2],
	fRec8: [f32;2],
	fRec7: [f32;2],
	fRec6: [f32;2],
	fRec5: [f32;2],
	fCheckbox3: f32,
	fConst23: f32,
	fRec27: [f32;2],
	fRec26: [f32;3],
	fRec25: [f32;3],
	fRec30: [f32;2],
	fRec28: [f32;2],
	fRec33: [f32;2],
	fRec31: [f32;2],
	fConst24: f32,
	fConst25: f32,
	fConst26: f32,
	fRec3: [f32;3],
	fConst27: f32,
	fConst28: f32,
	fConst29: f32,
	fRec2: [f32;3],
	fConst30: f32,
	fConst31: f32,
	fConst32: f32,
	fRec1: [f32;3],
	fConst33: f32,
	fRec0: [f32;2],
	fVbargraph0: f32,
	fConst34: f32,
	fConst35: f32,
	fConst36: f32,
	fConst37: f32,
	fConst38: f32,
	fConst39: f32,
	fConst40: f32,
	fConst41: f32,
	fConst42: f32,
	fConst43: f32,
	fConst44: f32,
	fConst45: f32,
	fConst46: f32,
	fConst47: f32,
	fConst48: f32,
	fConst49: f32,
	fConst50: f32,
	fConst51: f32,
	fConst52: f32,
	fConst53: f32,
	fConst54: f32,
	fRec40: [f32;3],
	fConst55: f32,
	fConst56: f32,
	fConst57: f32,
	fRec39: [f32;3],
	fConst58: f32,
	fConst59: f32,
	fConst60: f32,
	fRec38: [f32;3],
	fConst61: f32,
	fConst62: f32,
	fConst63: f32,
	fConst64: f32,
	fRec37: [f32;3],
	fConst65: f32,
	fConst66: f32,
	fConst67: f32,
	fRec36: [f32;3],
	fConst68: f32,
	fConst69: f32,
	fConst70: f32,
	fRec35: [f32;3],
	fConst71: f32,
	fRec34: [f32;2],
	fVbargraph1: f32,
	fConst72: f32,
	fConst73: f32,
	fConst74: f32,
	fConst75: f32,
	fConst76: f32,
	fConst77: f32,
	fConst78: f32,
	fConst79: f32,
	fConst80: f32,
	fConst81: f32,
	fConst82: f32,
	fConst83: f32,
	fConst84: f32,
	fConst85: f32,
	fConst86: f32,
	fConst87: f32,
	fConst88: f32,
	fConst89: f32,
	fConst90: f32,
	fConst91: f32,
	fConst92: f32,
	fRec47: [f32;3],
	fConst93: f32,
	fConst94: f32,
	fConst95: f32,
	fRec46: [f32;3],
	fConst96: f32,
	fConst97: f32,
	fConst98: f32,
	fRec45: [f32;3],
	fConst99: f32,
	fConst100: f32,
	fConst101: f32,
	fConst102: f32,
	fRec44: [f32;3],
	fConst103: f32,
	fConst104: f32,
	fConst105: f32,
	fRec43: [f32;3],
	fConst106: f32,
	fConst107: f32,
	fConst108: f32,
	fRec42: [f32;3],
	fConst109: f32,
	fRec41: [f32;2],
	fVbargraph2: f32,
	fConst110: f32,
	fConst111: f32,
	fConst112: f32,
	fConst113: f32,
	fConst114: f32,
	fConst115: f32,
	fConst116: f32,
	fConst117: f32,
	fConst118: f32,
	fConst119: f32,
	fConst120: f32,
	fConst121: f32,
	fConst122: f32,
	fConst123: f32,
	fConst124: f32,
	fConst125: f32,
	fConst126: f32,
	fConst127: f32,
	fConst128: f32,
	fConst129: f32,
	fConst130: f32,
	fRec54: [f32;3],
	fConst131: f32,
	fConst132: f32,
	fConst133: f32,
	fRec53: [f32;3],
	fConst134: f32,
	fConst135: f32,
	fConst136: f32,
	fRec52: [f32;3],
	fConst137: f32,
	fConst138: f32,
	fConst139: f32,
	fConst140: f32,
	fRec51: [f32;3],
	fConst141: f32,
	fConst142: f32,
	fConst143: f32,
	fRec50: [f32;3],
	fConst144: f32,
	fConst145: f32,
	fConst146: f32,
	fRec49: [f32;3],
	fConst147: f32,
	fRec48: [f32;2],
	fVbargraph3: f32,
	fConst148: f32,
	fConst149: f32,
	fConst150: f32,
	fConst151: f32,
	fConst152: f32,
	fConst153: f32,
	fConst154: f32,
	fConst155: f32,
	fConst156: f32,
	fConst157: f32,
	fConst158: f32,
	fConst159: f32,
	fConst160: f32,
	fConst161: f32,
	fConst162: f32,
	fConst163: f32,
	fConst164: f32,
	fConst165: f32,
	fConst166: f32,
	fConst167: f32,
	fConst168: f32,
	fRec61: [f32;3],
	fConst169: f32,
	fConst170: f32,
	fConst171: f32,
	fRec60: [f32;3],
	fConst172: f32,
	fConst173: f32,
	fConst174: f32,
	fRec59: [f32;3],
	fConst175: f32,
	fConst176: f32,
	fConst177: f32,
	fConst178: f32,
	fRec58: [f32;3],
	fConst179: f32,
	fConst180: f32,
	fConst181: f32,
	fRec57: [f32;3],
	fConst182: f32,
	fConst183: f32,
	fConst184: f32,
	fRec56: [f32;3],
	fConst185: f32,
	fRec55: [f32;2],
	fVbargraph4: f32,
	fConst186: f32,
	fConst187: f32,
	fConst188: f32,
	fConst189: f32,
	fConst190: f32,
	fConst191: f32,
	fConst192: f32,
	fConst193: f32,
	fConst194: f32,
	fConst195: f32,
	fConst196: f32,
	fConst197: f32,
	fConst198: f32,
	fConst199: f32,
	fConst200: f32,
	fConst201: f32,
	fConst202: f32,
	fConst203: f32,
	fConst204: f32,
	fConst205: f32,
	fConst206: f32,
	fRec68: [f32;3],
	fConst207: f32,
	fConst208: f32,
	fConst209: f32,
	fRec67: [f32;3],
	fConst210: f32,
	fConst211: f32,
	fConst212: f32,
	fRec66: [f32;3],
	fConst213: f32,
	fConst214: f32,
	fConst215: f32,
	fConst216: f32,
	fRec65: [f32;3],
	fConst217: f32,
	fConst218: f32,
	fConst219: f32,
	fRec64: [f32;3],
	fConst220: f32,
	fConst221: f32,
	fConst222: f32,
	fRec63: [f32;3],
	fConst223: f32,
	fRec62: [f32;2],
	fVbargraph5: f32,
	fConst224: f32,
	fConst225: f32,
	fConst226: f32,
	fConst227: f32,
	fConst228: f32,
	fConst229: f32,
	fConst230: f32,
	fConst231: f32,
	fConst232: f32,
	fConst233: f32,
	fConst234: f32,
	fConst235: f32,
	fConst236: f32,
	fConst237: f32,
	fConst238: f32,
	fConst239: f32,
	fConst240: f32,
	fConst241: f32,
	fConst242: f32,
	fConst243: f32,
	fConst244: f32,
	fRec75: [f32;3],
	fConst245: f32,
	fConst246: f32,
	fConst247: f32,
	fRec74: [f32;3],
	fConst248: f32,
	fConst249: f32,
	fConst250: f32,
	fRec73: [f32;3],
	fConst251: f32,
	fConst252: f32,
	fConst253: f32,
	fConst254: f32,
	fRec72: [f32;3],
	fConst255: f32,
	fConst256: f32,
	fConst257: f32,
	fRec71: [f32;3],
	fConst258: f32,
	fConst259: f32,
	fConst260: f32,
	fRec70: [f32;3],
	fConst261: f32,
	fRec69: [f32;2],
	fVbargraph6: f32,
	fConst262: f32,
	fConst263: f32,
	fConst264: f32,
	fConst265: f32,
	fConst266: f32,
	fConst267: f32,
	fConst268: f32,
	fConst269: f32,
	fConst270: f32,
	fConst271: f32,
	fConst272: f32,
	fConst273: f32,
	fConst274: f32,
	fConst275: f32,
	fConst276: f32,
	fConst277: f32,
	fConst278: f32,
	fConst279: f32,
	fConst280: f32,
	fConst281: f32,
	fConst282: f32,
	fRec82: [f32;3],
	fConst283: f32,
	fConst284: f32,
	fConst285: f32,
	fRec81: [f32;3],
	fConst286: f32,
	fConst287: f32,
	fConst288: f32,
	fRec80: [f32;3],
	fConst289: f32,
	fConst290: f32,
	fConst291: f32,
	fConst292: f32,
	fRec79: [f32;3],
	fConst293: f32,
	fConst294: f32,
	fConst295: f32,
	fRec78: [f32;3],
	fConst296: f32,
	fConst297: f32,
	fConst298: f32,
	fRec77: [f32;3],
	fConst299: f32,
	fRec76: [f32;2],
	fVbargraph7: f32,
	fConst300: f32,
	fConst301: f32,
	fConst302: f32,
	fConst303: f32,
	fConst304: f32,
	fConst305: f32,
	fConst306: f32,
	fConst307: f32,
	fConst308: f32,
	fConst309: f32,
	fConst310: f32,
	fConst311: f32,
	fConst312: f32,
	fConst313: f32,
	fConst314: f32,
	fConst315: f32,
	fConst316: f32,
	fConst317: f32,
	fConst318: f32,
	fConst319: f32,
	fConst320: f32,
	fRec89: [f32;3],
	fConst321: f32,
	fConst322: f32,
	fConst323: f32,
	fRec88: [f32;3],
	fConst324: f32,
	fConst325: f32,
	fConst326: f32,
	fRec87: [f32;3],
	fConst327: f32,
	fConst328: f32,
	fConst329: f32,
	fConst330: f32,
	fRec86: [f32;3],
	fConst331: f32,
	fConst332: f32,
	fConst333: f32,
	fRec85: [f32;3],
	fConst334: f32,
	fConst335: f32,
	fConst336: f32,
	fRec84: [f32;3],
	fConst337: f32,
	fRec83: [f32;2],
	fVbargraph8: f32,
	fConst338: f32,
	fConst339: f32,
	fConst340: f32,
	fConst341: f32,
	fConst342: f32,
	fConst343: f32,
	fConst344: f32,
	fConst345: f32,
	fConst346: f32,
	fConst347: f32,
	fConst348: f32,
	fConst349: f32,
	fConst350: f32,
	fConst351: f32,
	fConst352: f32,
	fConst353: f32,
	fConst354: f32,
	fConst355: f32,
	fConst356: f32,
	fConst357: f32,
	fConst358: f32,
	fRec96: [f32;3],
	fConst359: f32,
	fConst360: f32,
	fConst361: f32,
	fRec95: [f32;3],
	fConst362: f32,
	fConst363: f32,
	fConst364: f32,
	fRec94: [f32;3],
	fConst365: f32,
	fConst366: f32,
	fConst367: f32,
	fConst368: f32,
	fRec93: [f32;3],
	fConst369: f32,
	fConst370: f32,
	fConst371: f32,
	fRec92: [f32;3],
	fConst372: f32,
	fConst373: f32,
	fConst374: f32,
	fRec91: [f32;3],
	fConst375: f32,
	fRec90: [f32;2],
	fVbargraph9: f32,
	fConst376: f32,
	fConst377: f32,
	fConst378: f32,
	fConst379: f32,
	fConst380: f32,
	fConst381: f32,
	fConst382: f32,
	fConst383: f32,
	fConst384: f32,
	fConst385: f32,
	fConst386: f32,
	fConst387: f32,
	fConst388: f32,
	fConst389: f32,
	fConst390: f32,
	fConst391: f32,
	fConst392: f32,
	fConst393: f32,
	fConst394: f32,
	fConst395: f32,
	fConst396: f32,
	fRec103: [f32;3],
	fConst397: f32,
	fConst398: f32,
	fConst399: f32,
	fRec102: [f32;3],
	fConst400: f32,
	fConst401: f32,
	fConst402: f32,
	fRec101: [f32;3],
	fConst403: f32,
	fConst404: f32,
	fConst405: f32,
	fConst406: f32,
	fRec100: [f32;3],
	fConst407: f32,
	fConst408: f32,
	fConst409: f32,
	fRec99: [f32;3],
	fConst410: f32,
	fConst411: f32,
	fConst412: f32,
	fRec98: [f32;3],
	fConst413: f32,
	fRec97: [f32;2],
	fVbargraph10: f32,
	fConst414: f32,
	fConst415: f32,
	fConst416: f32,
	fConst417: f32,
	fConst418: f32,
	fConst419: f32,
	fConst420: f32,
	fConst421: f32,
	fConst422: f32,
	fConst423: f32,
	fConst424: f32,
	fConst425: f32,
	fConst426: f32,
	fConst427: f32,
	fConst428: f32,
	fConst429: f32,
	fConst430: f32,
	fConst431: f32,
	fConst432: f32,
	fConst433: f32,
	fConst434: f32,
	fRec110: [f32;3],
	fConst435: f32,
	fConst436: f32,
	fConst437: f32,
	fRec109: [f32;3],
	fConst438: f32,
	fConst439: f32,
	fConst440: f32,
	fRec108: [f32;3],
	fConst441: f32,
	fConst442: f32,
	fConst443: f32,
	fConst444: f32,
	fRec107: [f32;3],
	fConst445: f32,
	fConst446: f32,
	fConst447: f32,
	fRec106: [f32;3],
	fConst448: f32,
	fConst449: f32,
	fConst450: f32,
	fRec105: [f32;3],
	fConst451: f32,
	fRec104: [f32;2],
	fVbargraph11: f32,
	fConst452: f32,
	fConst453: f32,
	fConst454: f32,
	fConst455: f32,
	fConst456: f32,
	fConst457: f32,
	fConst458: f32,
	fConst459: f32,
	fConst460: f32,
	fConst461: f32,
	fConst462: f32,
	fConst463: f32,
	fConst464: f32,
	fConst465: f32,
	fConst466: f32,
	fConst467: f32,
	fConst468: f32,
	fConst469: f32,
	fConst470: f32,
	fConst471: f32,
	fConst472: f32,
	fRec117: [f32;3],
	fConst473: f32,
	fConst474: f32,
	fConst475: f32,
	fRec116: [f32;3],
	fConst476: f32,
	fConst477: f32,
	fConst478: f32,
	fRec115: [f32;3],
	fConst479: f32,
	fConst480: f32,
	fConst481: f32,
	fConst482: f32,
	fRec114: [f32;3],
	fConst483: f32,
	fConst484: f32,
	fConst485: f32,
	fRec113: [f32;3],
	fConst486: f32,
	fConst487: f32,
	fConst488: f32,
	fRec112: [f32;3],
	fConst489: f32,
	fRec111: [f32;2],
	fVbargraph12: f32,
	fConst490: f32,
	fConst491: f32,
	fConst492: f32,
	fConst493: f32,
	fConst494: f32,
	fConst495: f32,
	fConst496: f32,
	fConst497: f32,
	fConst498: f32,
	fConst499: f32,
	fConst500: f32,
	fConst501: f32,
	fConst502: f32,
	fConst503: f32,
	fConst504: f32,
	fConst505: f32,
	fConst506: f32,
	fConst507: f32,
	fConst508: f32,
	fConst509: f32,
	fConst510: f32,
	fRec124: [f32;3],
	fConst511: f32,
	fConst512: f32,
	fConst513: f32,
	fRec123: [f32;3],
	fConst514: f32,
	fConst515: f32,
	fConst516: f32,
	fRec122: [f32;3],
	fConst517: f32,
	fConst518: f32,
	fConst519: f32,
	fConst520: f32,
	fRec121: [f32;3],
	fConst521: f32,
	fConst522: f32,
	fConst523: f32,
	fRec120: [f32;3],
	fConst524: f32,
	fConst525: f32,
	fConst526: f32,
	fRec119: [f32;3],
	fConst527: f32,
	fRec118: [f32;2],
	fVbargraph13: f32,
	fConst528: f32,
	fConst529: f32,
	fConst530: f32,
	fConst531: f32,
	fConst532: f32,
	fConst533: f32,
	fConst534: f32,
	fConst535: f32,
	fConst536: f32,
	fRec128: [f32;3],
	fConst537: f32,
	fConst538: f32,
	fConst539: f32,
	fRec127: [f32;3],
	fConst540: f32,
	fConst541: f32,
	fConst542: f32,
	fRec126: [f32;3],
	fConst543: f32,
	fRec125: [f32;2],
	fVbargraph14: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fHslider1: 0.0,
			iVec0: [0;4],
			fConst2: 0.0,
			fConst3: 0.0,
			fConst4: 0.0,
			fConst5: 0.0,
			fConst6: 0.0,
			fConst7: 0.0,
			fConst8: 0.0,
			fConst9: 0.0,
			fConst10: 0.0,
			fConst11: 0.0,
			fConst12: 0.0,
			fConst13: 0.0,
			fCheckbox0: 0.0,
			fHslider2: 0.0,
			fRec4: [0.0;2],
			fCheckbox1: 0.0,
			fVslider0: 0.0,
			fHslider3: 0.0,
			fRec10: [0.0;2],
			fVslider1: 0.0,
			fEntry0: 0.0,
			fConst14: 0.0,
			fHslider4: 0.0,
			fVslider2: 0.0,
			fRec12: [0.0;2],
			fVec1: [0.0;2],
			fRec11: [0.0;2],
			fConst15: 0.0,
			fVec2: [0.0;2],
			fConst16: 0.0,
			fVec3: [0.0;2],
			fVec4: [0.0;2],
			fConst17: 0.0,
			fVec5: [0.0;2],
			fVec6: [0.0;2],
			fVec7: [0.0;2],
			fVslider3: 0.0,
			fVec8: [0.0;2],
			fRec13: [0.0;2],
			fVec9: [0.0;2],
			fVec10: [0.0;2],
			fVec11: [0.0;2],
			fVec12: [0.0;2],
			fVec13: [0.0;2],
			fVec14: [0.0;2],
			fVslider4: 0.0,
			fVec15: [0.0;2],
			fRec14: [0.0;2],
			fVec16: [0.0;2],
			fVec17: [0.0;2],
			fVec18: [0.0;2],
			fVec19: [0.0;2],
			fVec20: [0.0;2],
			fVec21: [0.0;2],
			fConst18: 0.0,
			fVslider5: 0.0,
			fVec22: [0.0;2],
			fRec15: [0.0;2],
			fVec23: [0.0;2],
			IOTA: 0,
			fVec24: [0.0;4096],
			fConst19: 0.0,
			fVec25: [0.0;2],
			fRec16: [0.0;2],
			fVec26: [0.0;2],
			fVec27: [0.0;4096],
			fVec28: [0.0;2],
			fRec17: [0.0;2],
			fVec29: [0.0;2],
			fVec30: [0.0;4096],
			fConst20: 0.0,
			fVslider6: 0.0,
			fRec18: [0.0;2],
			fRec19: [0.0;2],
			fRec20: [0.0;2],
			fVslider7: 0.0,
			fCheckbox2: 0.0,
			fVslider8: 0.0,
			fRec21: [0.0;2],
			fConst21: 0.0,
			fVec31: [0.0;2],
			fVec32: [0.0;2],
			fVec33: [0.0;4096],
			fVec34: [0.0;2],
			fVec35: [0.0;2],
			fVec36: [0.0;4096],
			fVec37: [0.0;2],
			fVec38: [0.0;2],
			fVec39: [0.0;4096],
			fVslider9: 0.0,
			iRec23: [0;2],
			fRec22: [0.0;4],
			fConst22: 0.0,
			fHslider5: 0.0,
			fRec24: [0.0;2],
			fHslider6: 0.0,
			fRec9: [0.0;2],
			fRec8: [0.0;2],
			fRec7: [0.0;2],
			fRec6: [0.0;2],
			fRec5: [0.0;2],
			fCheckbox3: 0.0,
			fConst23: 0.0,
			fRec27: [0.0;2],
			fRec26: [0.0;3],
			fRec25: [0.0;3],
			fRec30: [0.0;2],
			fRec28: [0.0;2],
			fRec33: [0.0;2],
			fRec31: [0.0;2],
			fConst24: 0.0,
			fConst25: 0.0,
			fConst26: 0.0,
			fRec3: [0.0;3],
			fConst27: 0.0,
			fConst28: 0.0,
			fConst29: 0.0,
			fRec2: [0.0;3],
			fConst30: 0.0,
			fConst31: 0.0,
			fConst32: 0.0,
			fRec1: [0.0;3],
			fConst33: 0.0,
			fRec0: [0.0;2],
			fVbargraph0: 0.0,
			fConst34: 0.0,
			fConst35: 0.0,
			fConst36: 0.0,
			fConst37: 0.0,
			fConst38: 0.0,
			fConst39: 0.0,
			fConst40: 0.0,
			fConst41: 0.0,
			fConst42: 0.0,
			fConst43: 0.0,
			fConst44: 0.0,
			fConst45: 0.0,
			fConst46: 0.0,
			fConst47: 0.0,
			fConst48: 0.0,
			fConst49: 0.0,
			fConst50: 0.0,
			fConst51: 0.0,
			fConst52: 0.0,
			fConst53: 0.0,
			fConst54: 0.0,
			fRec40: [0.0;3],
			fConst55: 0.0,
			fConst56: 0.0,
			fConst57: 0.0,
			fRec39: [0.0;3],
			fConst58: 0.0,
			fConst59: 0.0,
			fConst60: 0.0,
			fRec38: [0.0;3],
			fConst61: 0.0,
			fConst62: 0.0,
			fConst63: 0.0,
			fConst64: 0.0,
			fRec37: [0.0;3],
			fConst65: 0.0,
			fConst66: 0.0,
			fConst67: 0.0,
			fRec36: [0.0;3],
			fConst68: 0.0,
			fConst69: 0.0,
			fConst70: 0.0,
			fRec35: [0.0;3],
			fConst71: 0.0,
			fRec34: [0.0;2],
			fVbargraph1: 0.0,
			fConst72: 0.0,
			fConst73: 0.0,
			fConst74: 0.0,
			fConst75: 0.0,
			fConst76: 0.0,
			fConst77: 0.0,
			fConst78: 0.0,
			fConst79: 0.0,
			fConst80: 0.0,
			fConst81: 0.0,
			fConst82: 0.0,
			fConst83: 0.0,
			fConst84: 0.0,
			fConst85: 0.0,
			fConst86: 0.0,
			fConst87: 0.0,
			fConst88: 0.0,
			fConst89: 0.0,
			fConst90: 0.0,
			fConst91: 0.0,
			fConst92: 0.0,
			fRec47: [0.0;3],
			fConst93: 0.0,
			fConst94: 0.0,
			fConst95: 0.0,
			fRec46: [0.0;3],
			fConst96: 0.0,
			fConst97: 0.0,
			fConst98: 0.0,
			fRec45: [0.0;3],
			fConst99: 0.0,
			fConst100: 0.0,
			fConst101: 0.0,
			fConst102: 0.0,
			fRec44: [0.0;3],
			fConst103: 0.0,
			fConst104: 0.0,
			fConst105: 0.0,
			fRec43: [0.0;3],
			fConst106: 0.0,
			fConst107: 0.0,
			fConst108: 0.0,
			fRec42: [0.0;3],
			fConst109: 0.0,
			fRec41: [0.0;2],
			fVbargraph2: 0.0,
			fConst110: 0.0,
			fConst111: 0.0,
			fConst112: 0.0,
			fConst113: 0.0,
			fConst114: 0.0,
			fConst115: 0.0,
			fConst116: 0.0,
			fConst117: 0.0,
			fConst118: 0.0,
			fConst119: 0.0,
			fConst120: 0.0,
			fConst121: 0.0,
			fConst122: 0.0,
			fConst123: 0.0,
			fConst124: 0.0,
			fConst125: 0.0,
			fConst126: 0.0,
			fConst127: 0.0,
			fConst128: 0.0,
			fConst129: 0.0,
			fConst130: 0.0,
			fRec54: [0.0;3],
			fConst131: 0.0,
			fConst132: 0.0,
			fConst133: 0.0,
			fRec53: [0.0;3],
			fConst134: 0.0,
			fConst135: 0.0,
			fConst136: 0.0,
			fRec52: [0.0;3],
			fConst137: 0.0,
			fConst138: 0.0,
			fConst139: 0.0,
			fConst140: 0.0,
			fRec51: [0.0;3],
			fConst141: 0.0,
			fConst142: 0.0,
			fConst143: 0.0,
			fRec50: [0.0;3],
			fConst144: 0.0,
			fConst145: 0.0,
			fConst146: 0.0,
			fRec49: [0.0;3],
			fConst147: 0.0,
			fRec48: [0.0;2],
			fVbargraph3: 0.0,
			fConst148: 0.0,
			fConst149: 0.0,
			fConst150: 0.0,
			fConst151: 0.0,
			fConst152: 0.0,
			fConst153: 0.0,
			fConst154: 0.0,
			fConst155: 0.0,
			fConst156: 0.0,
			fConst157: 0.0,
			fConst158: 0.0,
			fConst159: 0.0,
			fConst160: 0.0,
			fConst161: 0.0,
			fConst162: 0.0,
			fConst163: 0.0,
			fConst164: 0.0,
			fConst165: 0.0,
			fConst166: 0.0,
			fConst167: 0.0,
			fConst168: 0.0,
			fRec61: [0.0;3],
			fConst169: 0.0,
			fConst170: 0.0,
			fConst171: 0.0,
			fRec60: [0.0;3],
			fConst172: 0.0,
			fConst173: 0.0,
			fConst174: 0.0,
			fRec59: [0.0;3],
			fConst175: 0.0,
			fConst176: 0.0,
			fConst177: 0.0,
			fConst178: 0.0,
			fRec58: [0.0;3],
			fConst179: 0.0,
			fConst180: 0.0,
			fConst181: 0.0,
			fRec57: [0.0;3],
			fConst182: 0.0,
			fConst183: 0.0,
			fConst184: 0.0,
			fRec56: [0.0;3],
			fConst185: 0.0,
			fRec55: [0.0;2],
			fVbargraph4: 0.0,
			fConst186: 0.0,
			fConst187: 0.0,
			fConst188: 0.0,
			fConst189: 0.0,
			fConst190: 0.0,
			fConst191: 0.0,
			fConst192: 0.0,
			fConst193: 0.0,
			fConst194: 0.0,
			fConst195: 0.0,
			fConst196: 0.0,
			fConst197: 0.0,
			fConst198: 0.0,
			fConst199: 0.0,
			fConst200: 0.0,
			fConst201: 0.0,
			fConst202: 0.0,
			fConst203: 0.0,
			fConst204: 0.0,
			fConst205: 0.0,
			fConst206: 0.0,
			fRec68: [0.0;3],
			fConst207: 0.0,
			fConst208: 0.0,
			fConst209: 0.0,
			fRec67: [0.0;3],
			fConst210: 0.0,
			fConst211: 0.0,
			fConst212: 0.0,
			fRec66: [0.0;3],
			fConst213: 0.0,
			fConst214: 0.0,
			fConst215: 0.0,
			fConst216: 0.0,
			fRec65: [0.0;3],
			fConst217: 0.0,
			fConst218: 0.0,
			fConst219: 0.0,
			fRec64: [0.0;3],
			fConst220: 0.0,
			fConst221: 0.0,
			fConst222: 0.0,
			fRec63: [0.0;3],
			fConst223: 0.0,
			fRec62: [0.0;2],
			fVbargraph5: 0.0,
			fConst224: 0.0,
			fConst225: 0.0,
			fConst226: 0.0,
			fConst227: 0.0,
			fConst228: 0.0,
			fConst229: 0.0,
			fConst230: 0.0,
			fConst231: 0.0,
			fConst232: 0.0,
			fConst233: 0.0,
			fConst234: 0.0,
			fConst235: 0.0,
			fConst236: 0.0,
			fConst237: 0.0,
			fConst238: 0.0,
			fConst239: 0.0,
			fConst240: 0.0,
			fConst241: 0.0,
			fConst242: 0.0,
			fConst243: 0.0,
			fConst244: 0.0,
			fRec75: [0.0;3],
			fConst245: 0.0,
			fConst246: 0.0,
			fConst247: 0.0,
			fRec74: [0.0;3],
			fConst248: 0.0,
			fConst249: 0.0,
			fConst250: 0.0,
			fRec73: [0.0;3],
			fConst251: 0.0,
			fConst252: 0.0,
			fConst253: 0.0,
			fConst254: 0.0,
			fRec72: [0.0;3],
			fConst255: 0.0,
			fConst256: 0.0,
			fConst257: 0.0,
			fRec71: [0.0;3],
			fConst258: 0.0,
			fConst259: 0.0,
			fConst260: 0.0,
			fRec70: [0.0;3],
			fConst261: 0.0,
			fRec69: [0.0;2],
			fVbargraph6: 0.0,
			fConst262: 0.0,
			fConst263: 0.0,
			fConst264: 0.0,
			fConst265: 0.0,
			fConst266: 0.0,
			fConst267: 0.0,
			fConst268: 0.0,
			fConst269: 0.0,
			fConst270: 0.0,
			fConst271: 0.0,
			fConst272: 0.0,
			fConst273: 0.0,
			fConst274: 0.0,
			fConst275: 0.0,
			fConst276: 0.0,
			fConst277: 0.0,
			fConst278: 0.0,
			fConst279: 0.0,
			fConst280: 0.0,
			fConst281: 0.0,
			fConst282: 0.0,
			fRec82: [0.0;3],
			fConst283: 0.0,
			fConst284: 0.0,
			fConst285: 0.0,
			fRec81: [0.0;3],
			fConst286: 0.0,
			fConst287: 0.0,
			fConst288: 0.0,
			fRec80: [0.0;3],
			fConst289: 0.0,
			fConst290: 0.0,
			fConst291: 0.0,
			fConst292: 0.0,
			fRec79: [0.0;3],
			fConst293: 0.0,
			fConst294: 0.0,
			fConst295: 0.0,
			fRec78: [0.0;3],
			fConst296: 0.0,
			fConst297: 0.0,
			fConst298: 0.0,
			fRec77: [0.0;3],
			fConst299: 0.0,
			fRec76: [0.0;2],
			fVbargraph7: 0.0,
			fConst300: 0.0,
			fConst301: 0.0,
			fConst302: 0.0,
			fConst303: 0.0,
			fConst304: 0.0,
			fConst305: 0.0,
			fConst306: 0.0,
			fConst307: 0.0,
			fConst308: 0.0,
			fConst309: 0.0,
			fConst310: 0.0,
			fConst311: 0.0,
			fConst312: 0.0,
			fConst313: 0.0,
			fConst314: 0.0,
			fConst315: 0.0,
			fConst316: 0.0,
			fConst317: 0.0,
			fConst318: 0.0,
			fConst319: 0.0,
			fConst320: 0.0,
			fRec89: [0.0;3],
			fConst321: 0.0,
			fConst322: 0.0,
			fConst323: 0.0,
			fRec88: [0.0;3],
			fConst324: 0.0,
			fConst325: 0.0,
			fConst326: 0.0,
			fRec87: [0.0;3],
			fConst327: 0.0,
			fConst328: 0.0,
			fConst329: 0.0,
			fConst330: 0.0,
			fRec86: [0.0;3],
			fConst331: 0.0,
			fConst332: 0.0,
			fConst333: 0.0,
			fRec85: [0.0;3],
			fConst334: 0.0,
			fConst335: 0.0,
			fConst336: 0.0,
			fRec84: [0.0;3],
			fConst337: 0.0,
			fRec83: [0.0;2],
			fVbargraph8: 0.0,
			fConst338: 0.0,
			fConst339: 0.0,
			fConst340: 0.0,
			fConst341: 0.0,
			fConst342: 0.0,
			fConst343: 0.0,
			fConst344: 0.0,
			fConst345: 0.0,
			fConst346: 0.0,
			fConst347: 0.0,
			fConst348: 0.0,
			fConst349: 0.0,
			fConst350: 0.0,
			fConst351: 0.0,
			fConst352: 0.0,
			fConst353: 0.0,
			fConst354: 0.0,
			fConst355: 0.0,
			fConst356: 0.0,
			fConst357: 0.0,
			fConst358: 0.0,
			fRec96: [0.0;3],
			fConst359: 0.0,
			fConst360: 0.0,
			fConst361: 0.0,
			fRec95: [0.0;3],
			fConst362: 0.0,
			fConst363: 0.0,
			fConst364: 0.0,
			fRec94: [0.0;3],
			fConst365: 0.0,
			fConst366: 0.0,
			fConst367: 0.0,
			fConst368: 0.0,
			fRec93: [0.0;3],
			fConst369: 0.0,
			fConst370: 0.0,
			fConst371: 0.0,
			fRec92: [0.0;3],
			fConst372: 0.0,
			fConst373: 0.0,
			fConst374: 0.0,
			fRec91: [0.0;3],
			fConst375: 0.0,
			fRec90: [0.0;2],
			fVbargraph9: 0.0,
			fConst376: 0.0,
			fConst377: 0.0,
			fConst378: 0.0,
			fConst379: 0.0,
			fConst380: 0.0,
			fConst381: 0.0,
			fConst382: 0.0,
			fConst383: 0.0,
			fConst384: 0.0,
			fConst385: 0.0,
			fConst386: 0.0,
			fConst387: 0.0,
			fConst388: 0.0,
			fConst389: 0.0,
			fConst390: 0.0,
			fConst391: 0.0,
			fConst392: 0.0,
			fConst393: 0.0,
			fConst394: 0.0,
			fConst395: 0.0,
			fConst396: 0.0,
			fRec103: [0.0;3],
			fConst397: 0.0,
			fConst398: 0.0,
			fConst399: 0.0,
			fRec102: [0.0;3],
			fConst400: 0.0,
			fConst401: 0.0,
			fConst402: 0.0,
			fRec101: [0.0;3],
			fConst403: 0.0,
			fConst404: 0.0,
			fConst405: 0.0,
			fConst406: 0.0,
			fRec100: [0.0;3],
			fConst407: 0.0,
			fConst408: 0.0,
			fConst409: 0.0,
			fRec99: [0.0;3],
			fConst410: 0.0,
			fConst411: 0.0,
			fConst412: 0.0,
			fRec98: [0.0;3],
			fConst413: 0.0,
			fRec97: [0.0;2],
			fVbargraph10: 0.0,
			fConst414: 0.0,
			fConst415: 0.0,
			fConst416: 0.0,
			fConst417: 0.0,
			fConst418: 0.0,
			fConst419: 0.0,
			fConst420: 0.0,
			fConst421: 0.0,
			fConst422: 0.0,
			fConst423: 0.0,
			fConst424: 0.0,
			fConst425: 0.0,
			fConst426: 0.0,
			fConst427: 0.0,
			fConst428: 0.0,
			fConst429: 0.0,
			fConst430: 0.0,
			fConst431: 0.0,
			fConst432: 0.0,
			fConst433: 0.0,
			fConst434: 0.0,
			fRec110: [0.0;3],
			fConst435: 0.0,
			fConst436: 0.0,
			fConst437: 0.0,
			fRec109: [0.0;3],
			fConst438: 0.0,
			fConst439: 0.0,
			fConst440: 0.0,
			fRec108: [0.0;3],
			fConst441: 0.0,
			fConst442: 0.0,
			fConst443: 0.0,
			fConst444: 0.0,
			fRec107: [0.0;3],
			fConst445: 0.0,
			fConst446: 0.0,
			fConst447: 0.0,
			fRec106: [0.0;3],
			fConst448: 0.0,
			fConst449: 0.0,
			fConst450: 0.0,
			fRec105: [0.0;3],
			fConst451: 0.0,
			fRec104: [0.0;2],
			fVbargraph11: 0.0,
			fConst452: 0.0,
			fConst453: 0.0,
			fConst454: 0.0,
			fConst455: 0.0,
			fConst456: 0.0,
			fConst457: 0.0,
			fConst458: 0.0,
			fConst459: 0.0,
			fConst460: 0.0,
			fConst461: 0.0,
			fConst462: 0.0,
			fConst463: 0.0,
			fConst464: 0.0,
			fConst465: 0.0,
			fConst466: 0.0,
			fConst467: 0.0,
			fConst468: 0.0,
			fConst469: 0.0,
			fConst470: 0.0,
			fConst471: 0.0,
			fConst472: 0.0,
			fRec117: [0.0;3],
			fConst473: 0.0,
			fConst474: 0.0,
			fConst475: 0.0,
			fRec116: [0.0;3],
			fConst476: 0.0,
			fConst477: 0.0,
			fConst478: 0.0,
			fRec115: [0.0;3],
			fConst479: 0.0,
			fConst480: 0.0,
			fConst481: 0.0,
			fConst482: 0.0,
			fRec114: [0.0;3],
			fConst483: 0.0,
			fConst484: 0.0,
			fConst485: 0.0,
			fRec113: [0.0;3],
			fConst486: 0.0,
			fConst487: 0.0,
			fConst488: 0.0,
			fRec112: [0.0;3],
			fConst489: 0.0,
			fRec111: [0.0;2],
			fVbargraph12: 0.0,
			fConst490: 0.0,
			fConst491: 0.0,
			fConst492: 0.0,
			fConst493: 0.0,
			fConst494: 0.0,
			fConst495: 0.0,
			fConst496: 0.0,
			fConst497: 0.0,
			fConst498: 0.0,
			fConst499: 0.0,
			fConst500: 0.0,
			fConst501: 0.0,
			fConst502: 0.0,
			fConst503: 0.0,
			fConst504: 0.0,
			fConst505: 0.0,
			fConst506: 0.0,
			fConst507: 0.0,
			fConst508: 0.0,
			fConst509: 0.0,
			fConst510: 0.0,
			fRec124: [0.0;3],
			fConst511: 0.0,
			fConst512: 0.0,
			fConst513: 0.0,
			fRec123: [0.0;3],
			fConst514: 0.0,
			fConst515: 0.0,
			fConst516: 0.0,
			fRec122: [0.0;3],
			fConst517: 0.0,
			fConst518: 0.0,
			fConst519: 0.0,
			fConst520: 0.0,
			fRec121: [0.0;3],
			fConst521: 0.0,
			fConst522: 0.0,
			fConst523: 0.0,
			fRec120: [0.0;3],
			fConst524: 0.0,
			fConst525: 0.0,
			fConst526: 0.0,
			fRec119: [0.0;3],
			fConst527: 0.0,
			fRec118: [0.0;2],
			fVbargraph13: 0.0,
			fConst528: 0.0,
			fConst529: 0.0,
			fConst530: 0.0,
			fConst531: 0.0,
			fConst532: 0.0,
			fConst533: 0.0,
			fConst534: 0.0,
			fConst535: 0.0,
			fConst536: 0.0,
			fRec128: [0.0;3],
			fConst537: 0.0,
			fConst538: 0.0,
			fConst539: 0.0,
			fRec127: [0.0;3],
			fConst540: 0.0,
			fConst541: 0.0,
			fConst542: 0.0,
			fRec126: [0.0;3],
			fConst543: 0.0,
			fRec125: [0.0;2],
			fVbargraph14: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("filters.lib/name", "Faust Filters Library");
		m.declare("filters.lib/version", "0.0");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "virtualAnalogLab");
		m.declare("noises.lib/name", "Faust Noise Generator Library");
		m.declare("noises.lib/version", "0.0");
		m.declare("oscillators.lib/name", "Faust Oscillator Library");
		m.declare("oscillators.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m.declare("vaeffects.lib/version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		1
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fHslider0 = 50.0;
		self.fHslider1 = 100.0;
		self.fCheckbox0 = 0.0;
		self.fHslider2 = 5.0;
		self.fCheckbox1 = 0.0;
		self.fVslider0 = 0.0;
		self.fHslider3 = -20.0;
		self.fVslider1 = 1.0;
		self.fEntry0 = 2.0;
		self.fHslider4 = 49.0;
		self.fVslider2 = 0.100000001;
		self.fVslider3 = -0.100000001;
		self.fVslider4 = 0.100000001;
		self.fVslider5 = 0.0;
		self.fVslider6 = 0.0;
		self.fVslider7 = 0.0;
		self.fCheckbox2 = 0.0;
		self.fVslider8 = 0.5;
		self.fVslider9 = 0.0;
		self.fHslider5 = 25.0;
		self.fHslider6 = 0.899999976;
		self.fCheckbox3 = 0.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.iVec0[l0 as usize] = 0;
			l0 = (l0 + 1);
			if (l0 < 4) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec4[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec10[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec12[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fVec1[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec11[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.fVec2[l6 as usize] = 0.0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.fVec3[l7 as usize] = 0.0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fVec4[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fVec5[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		let mut l10: i32 = 0;
		loop {
			self.fVec6[l10 as usize] = 0.0;
			l10 = (l10 + 1);
			if (l10 < 2) { continue; } else { break; }
		}
		let mut l11: i32 = 0;
		loop {
			self.fVec7[l11 as usize] = 0.0;
			l11 = (l11 + 1);
			if (l11 < 2) { continue; } else { break; }
		}
		let mut l12: i32 = 0;
		loop {
			self.fVec8[l12 as usize] = 0.0;
			l12 = (l12 + 1);
			if (l12 < 2) { continue; } else { break; }
		}
		let mut l13: i32 = 0;
		loop {
			self.fRec13[l13 as usize] = 0.0;
			l13 = (l13 + 1);
			if (l13 < 2) { continue; } else { break; }
		}
		let mut l14: i32 = 0;
		loop {
			self.fVec9[l14 as usize] = 0.0;
			l14 = (l14 + 1);
			if (l14 < 2) { continue; } else { break; }
		}
		let mut l15: i32 = 0;
		loop {
			self.fVec10[l15 as usize] = 0.0;
			l15 = (l15 + 1);
			if (l15 < 2) { continue; } else { break; }
		}
		let mut l16: i32 = 0;
		loop {
			self.fVec11[l16 as usize] = 0.0;
			l16 = (l16 + 1);
			if (l16 < 2) { continue; } else { break; }
		}
		let mut l17: i32 = 0;
		loop {
			self.fVec12[l17 as usize] = 0.0;
			l17 = (l17 + 1);
			if (l17 < 2) { continue; } else { break; }
		}
		let mut l18: i32 = 0;
		loop {
			self.fVec13[l18 as usize] = 0.0;
			l18 = (l18 + 1);
			if (l18 < 2) { continue; } else { break; }
		}
		let mut l19: i32 = 0;
		loop {
			self.fVec14[l19 as usize] = 0.0;
			l19 = (l19 + 1);
			if (l19 < 2) { continue; } else { break; }
		}
		let mut l20: i32 = 0;
		loop {
			self.fVec15[l20 as usize] = 0.0;
			l20 = (l20 + 1);
			if (l20 < 2) { continue; } else { break; }
		}
		let mut l21: i32 = 0;
		loop {
			self.fRec14[l21 as usize] = 0.0;
			l21 = (l21 + 1);
			if (l21 < 2) { continue; } else { break; }
		}
		let mut l22: i32 = 0;
		loop {
			self.fVec16[l22 as usize] = 0.0;
			l22 = (l22 + 1);
			if (l22 < 2) { continue; } else { break; }
		}
		let mut l23: i32 = 0;
		loop {
			self.fVec17[l23 as usize] = 0.0;
			l23 = (l23 + 1);
			if (l23 < 2) { continue; } else { break; }
		}
		let mut l24: i32 = 0;
		loop {
			self.fVec18[l24 as usize] = 0.0;
			l24 = (l24 + 1);
			if (l24 < 2) { continue; } else { break; }
		}
		let mut l25: i32 = 0;
		loop {
			self.fVec19[l25 as usize] = 0.0;
			l25 = (l25 + 1);
			if (l25 < 2) { continue; } else { break; }
		}
		let mut l26: i32 = 0;
		loop {
			self.fVec20[l26 as usize] = 0.0;
			l26 = (l26 + 1);
			if (l26 < 2) { continue; } else { break; }
		}
		let mut l27: i32 = 0;
		loop {
			self.fVec21[l27 as usize] = 0.0;
			l27 = (l27 + 1);
			if (l27 < 2) { continue; } else { break; }
		}
		let mut l28: i32 = 0;
		loop {
			self.fVec22[l28 as usize] = 0.0;
			l28 = (l28 + 1);
			if (l28 < 2) { continue; } else { break; }
		}
		let mut l29: i32 = 0;
		loop {
			self.fRec15[l29 as usize] = 0.0;
			l29 = (l29 + 1);
			if (l29 < 2) { continue; } else { break; }
		}
		let mut l30: i32 = 0;
		loop {
			self.fVec23[l30 as usize] = 0.0;
			l30 = (l30 + 1);
			if (l30 < 2) { continue; } else { break; }
		}
		self.IOTA = 0;
		let mut l31: i32 = 0;
		loop {
			self.fVec24[l31 as usize] = 0.0;
			l31 = (l31 + 1);
			if (l31 < 4096) { continue; } else { break; }
		}
		let mut l32: i32 = 0;
		loop {
			self.fVec25[l32 as usize] = 0.0;
			l32 = (l32 + 1);
			if (l32 < 2) { continue; } else { break; }
		}
		let mut l33: i32 = 0;
		loop {
			self.fRec16[l33 as usize] = 0.0;
			l33 = (l33 + 1);
			if (l33 < 2) { continue; } else { break; }
		}
		let mut l34: i32 = 0;
		loop {
			self.fVec26[l34 as usize] = 0.0;
			l34 = (l34 + 1);
			if (l34 < 2) { continue; } else { break; }
		}
		let mut l35: i32 = 0;
		loop {
			self.fVec27[l35 as usize] = 0.0;
			l35 = (l35 + 1);
			if (l35 < 4096) { continue; } else { break; }
		}
		let mut l36: i32 = 0;
		loop {
			self.fVec28[l36 as usize] = 0.0;
			l36 = (l36 + 1);
			if (l36 < 2) { continue; } else { break; }
		}
		let mut l37: i32 = 0;
		loop {
			self.fRec17[l37 as usize] = 0.0;
			l37 = (l37 + 1);
			if (l37 < 2) { continue; } else { break; }
		}
		let mut l38: i32 = 0;
		loop {
			self.fVec29[l38 as usize] = 0.0;
			l38 = (l38 + 1);
			if (l38 < 2) { continue; } else { break; }
		}
		let mut l39: i32 = 0;
		loop {
			self.fVec30[l39 as usize] = 0.0;
			l39 = (l39 + 1);
			if (l39 < 4096) { continue; } else { break; }
		}
		let mut l40: i32 = 0;
		loop {
			self.fRec18[l40 as usize] = 0.0;
			l40 = (l40 + 1);
			if (l40 < 2) { continue; } else { break; }
		}
		let mut l41: i32 = 0;
		loop {
			self.fRec19[l41 as usize] = 0.0;
			l41 = (l41 + 1);
			if (l41 < 2) { continue; } else { break; }
		}
		let mut l42: i32 = 0;
		loop {
			self.fRec20[l42 as usize] = 0.0;
			l42 = (l42 + 1);
			if (l42 < 2) { continue; } else { break; }
		}
		let mut l43: i32 = 0;
		loop {
			self.fRec21[l43 as usize] = 0.0;
			l43 = (l43 + 1);
			if (l43 < 2) { continue; } else { break; }
		}
		let mut l44: i32 = 0;
		loop {
			self.fVec31[l44 as usize] = 0.0;
			l44 = (l44 + 1);
			if (l44 < 2) { continue; } else { break; }
		}
		let mut l45: i32 = 0;
		loop {
			self.fVec32[l45 as usize] = 0.0;
			l45 = (l45 + 1);
			if (l45 < 2) { continue; } else { break; }
		}
		let mut l46: i32 = 0;
		loop {
			self.fVec33[l46 as usize] = 0.0;
			l46 = (l46 + 1);
			if (l46 < 4096) { continue; } else { break; }
		}
		let mut l47: i32 = 0;
		loop {
			self.fVec34[l47 as usize] = 0.0;
			l47 = (l47 + 1);
			if (l47 < 2) { continue; } else { break; }
		}
		let mut l48: i32 = 0;
		loop {
			self.fVec35[l48 as usize] = 0.0;
			l48 = (l48 + 1);
			if (l48 < 2) { continue; } else { break; }
		}
		let mut l49: i32 = 0;
		loop {
			self.fVec36[l49 as usize] = 0.0;
			l49 = (l49 + 1);
			if (l49 < 4096) { continue; } else { break; }
		}
		let mut l50: i32 = 0;
		loop {
			self.fVec37[l50 as usize] = 0.0;
			l50 = (l50 + 1);
			if (l50 < 2) { continue; } else { break; }
		}
		let mut l51: i32 = 0;
		loop {
			self.fVec38[l51 as usize] = 0.0;
			l51 = (l51 + 1);
			if (l51 < 2) { continue; } else { break; }
		}
		let mut l52: i32 = 0;
		loop {
			self.fVec39[l52 as usize] = 0.0;
			l52 = (l52 + 1);
			if (l52 < 4096) { continue; } else { break; }
		}
		let mut l53: i32 = 0;
		loop {
			self.iRec23[l53 as usize] = 0;
			l53 = (l53 + 1);
			if (l53 < 2) { continue; } else { break; }
		}
		let mut l54: i32 = 0;
		loop {
			self.fRec22[l54 as usize] = 0.0;
			l54 = (l54 + 1);
			if (l54 < 4) { continue; } else { break; }
		}
		let mut l55: i32 = 0;
		loop {
			self.fRec24[l55 as usize] = 0.0;
			l55 = (l55 + 1);
			if (l55 < 2) { continue; } else { break; }
		}
		let mut l56: i32 = 0;
		loop {
			self.fRec9[l56 as usize] = 0.0;
			l56 = (l56 + 1);
			if (l56 < 2) { continue; } else { break; }
		}
		let mut l57: i32 = 0;
		loop {
			self.fRec8[l57 as usize] = 0.0;
			l57 = (l57 + 1);
			if (l57 < 2) { continue; } else { break; }
		}
		let mut l58: i32 = 0;
		loop {
			self.fRec7[l58 as usize] = 0.0;
			l58 = (l58 + 1);
			if (l58 < 2) { continue; } else { break; }
		}
		let mut l59: i32 = 0;
		loop {
			self.fRec6[l59 as usize] = 0.0;
			l59 = (l59 + 1);
			if (l59 < 2) { continue; } else { break; }
		}
		let mut l60: i32 = 0;
		loop {
			self.fRec5[l60 as usize] = 0.0;
			l60 = (l60 + 1);
			if (l60 < 2) { continue; } else { break; }
		}
		let mut l61: i32 = 0;
		loop {
			self.fRec27[l61 as usize] = 0.0;
			l61 = (l61 + 1);
			if (l61 < 2) { continue; } else { break; }
		}
		let mut l62: i32 = 0;
		loop {
			self.fRec26[l62 as usize] = 0.0;
			l62 = (l62 + 1);
			if (l62 < 3) { continue; } else { break; }
		}
		let mut l63: i32 = 0;
		loop {
			self.fRec25[l63 as usize] = 0.0;
			l63 = (l63 + 1);
			if (l63 < 3) { continue; } else { break; }
		}
		let mut l64: i32 = 0;
		loop {
			self.fRec30[l64 as usize] = 0.0;
			l64 = (l64 + 1);
			if (l64 < 2) { continue; } else { break; }
		}
		let mut l65: i32 = 0;
		loop {
			self.fRec28[l65 as usize] = 0.0;
			l65 = (l65 + 1);
			if (l65 < 2) { continue; } else { break; }
		}
		let mut l66: i32 = 0;
		loop {
			self.fRec33[l66 as usize] = 0.0;
			l66 = (l66 + 1);
			if (l66 < 2) { continue; } else { break; }
		}
		let mut l67: i32 = 0;
		loop {
			self.fRec31[l67 as usize] = 0.0;
			l67 = (l67 + 1);
			if (l67 < 2) { continue; } else { break; }
		}
		let mut l68: i32 = 0;
		loop {
			self.fRec3[l68 as usize] = 0.0;
			l68 = (l68 + 1);
			if (l68 < 3) { continue; } else { break; }
		}
		let mut l69: i32 = 0;
		loop {
			self.fRec2[l69 as usize] = 0.0;
			l69 = (l69 + 1);
			if (l69 < 3) { continue; } else { break; }
		}
		let mut l70: i32 = 0;
		loop {
			self.fRec1[l70 as usize] = 0.0;
			l70 = (l70 + 1);
			if (l70 < 3) { continue; } else { break; }
		}
		let mut l71: i32 = 0;
		loop {
			self.fRec0[l71 as usize] = 0.0;
			l71 = (l71 + 1);
			if (l71 < 2) { continue; } else { break; }
		}
		let mut l72: i32 = 0;
		loop {
			self.fRec40[l72 as usize] = 0.0;
			l72 = (l72 + 1);
			if (l72 < 3) { continue; } else { break; }
		}
		let mut l73: i32 = 0;
		loop {
			self.fRec39[l73 as usize] = 0.0;
			l73 = (l73 + 1);
			if (l73 < 3) { continue; } else { break; }
		}
		let mut l74: i32 = 0;
		loop {
			self.fRec38[l74 as usize] = 0.0;
			l74 = (l74 + 1);
			if (l74 < 3) { continue; } else { break; }
		}
		let mut l75: i32 = 0;
		loop {
			self.fRec37[l75 as usize] = 0.0;
			l75 = (l75 + 1);
			if (l75 < 3) { continue; } else { break; }
		}
		let mut l76: i32 = 0;
		loop {
			self.fRec36[l76 as usize] = 0.0;
			l76 = (l76 + 1);
			if (l76 < 3) { continue; } else { break; }
		}
		let mut l77: i32 = 0;
		loop {
			self.fRec35[l77 as usize] = 0.0;
			l77 = (l77 + 1);
			if (l77 < 3) { continue; } else { break; }
		}
		let mut l78: i32 = 0;
		loop {
			self.fRec34[l78 as usize] = 0.0;
			l78 = (l78 + 1);
			if (l78 < 2) { continue; } else { break; }
		}
		let mut l79: i32 = 0;
		loop {
			self.fRec47[l79 as usize] = 0.0;
			l79 = (l79 + 1);
			if (l79 < 3) { continue; } else { break; }
		}
		let mut l80: i32 = 0;
		loop {
			self.fRec46[l80 as usize] = 0.0;
			l80 = (l80 + 1);
			if (l80 < 3) { continue; } else { break; }
		}
		let mut l81: i32 = 0;
		loop {
			self.fRec45[l81 as usize] = 0.0;
			l81 = (l81 + 1);
			if (l81 < 3) { continue; } else { break; }
		}
		let mut l82: i32 = 0;
		loop {
			self.fRec44[l82 as usize] = 0.0;
			l82 = (l82 + 1);
			if (l82 < 3) { continue; } else { break; }
		}
		let mut l83: i32 = 0;
		loop {
			self.fRec43[l83 as usize] = 0.0;
			l83 = (l83 + 1);
			if (l83 < 3) { continue; } else { break; }
		}
		let mut l84: i32 = 0;
		loop {
			self.fRec42[l84 as usize] = 0.0;
			l84 = (l84 + 1);
			if (l84 < 3) { continue; } else { break; }
		}
		let mut l85: i32 = 0;
		loop {
			self.fRec41[l85 as usize] = 0.0;
			l85 = (l85 + 1);
			if (l85 < 2) { continue; } else { break; }
		}
		let mut l86: i32 = 0;
		loop {
			self.fRec54[l86 as usize] = 0.0;
			l86 = (l86 + 1);
			if (l86 < 3) { continue; } else { break; }
		}
		let mut l87: i32 = 0;
		loop {
			self.fRec53[l87 as usize] = 0.0;
			l87 = (l87 + 1);
			if (l87 < 3) { continue; } else { break; }
		}
		let mut l88: i32 = 0;
		loop {
			self.fRec52[l88 as usize] = 0.0;
			l88 = (l88 + 1);
			if (l88 < 3) { continue; } else { break; }
		}
		let mut l89: i32 = 0;
		loop {
			self.fRec51[l89 as usize] = 0.0;
			l89 = (l89 + 1);
			if (l89 < 3) { continue; } else { break; }
		}
		let mut l90: i32 = 0;
		loop {
			self.fRec50[l90 as usize] = 0.0;
			l90 = (l90 + 1);
			if (l90 < 3) { continue; } else { break; }
		}
		let mut l91: i32 = 0;
		loop {
			self.fRec49[l91 as usize] = 0.0;
			l91 = (l91 + 1);
			if (l91 < 3) { continue; } else { break; }
		}
		let mut l92: i32 = 0;
		loop {
			self.fRec48[l92 as usize] = 0.0;
			l92 = (l92 + 1);
			if (l92 < 2) { continue; } else { break; }
		}
		let mut l93: i32 = 0;
		loop {
			self.fRec61[l93 as usize] = 0.0;
			l93 = (l93 + 1);
			if (l93 < 3) { continue; } else { break; }
		}
		let mut l94: i32 = 0;
		loop {
			self.fRec60[l94 as usize] = 0.0;
			l94 = (l94 + 1);
			if (l94 < 3) { continue; } else { break; }
		}
		let mut l95: i32 = 0;
		loop {
			self.fRec59[l95 as usize] = 0.0;
			l95 = (l95 + 1);
			if (l95 < 3) { continue; } else { break; }
		}
		let mut l96: i32 = 0;
		loop {
			self.fRec58[l96 as usize] = 0.0;
			l96 = (l96 + 1);
			if (l96 < 3) { continue; } else { break; }
		}
		let mut l97: i32 = 0;
		loop {
			self.fRec57[l97 as usize] = 0.0;
			l97 = (l97 + 1);
			if (l97 < 3) { continue; } else { break; }
		}
		let mut l98: i32 = 0;
		loop {
			self.fRec56[l98 as usize] = 0.0;
			l98 = (l98 + 1);
			if (l98 < 3) { continue; } else { break; }
		}
		let mut l99: i32 = 0;
		loop {
			self.fRec55[l99 as usize] = 0.0;
			l99 = (l99 + 1);
			if (l99 < 2) { continue; } else { break; }
		}
		let mut l100: i32 = 0;
		loop {
			self.fRec68[l100 as usize] = 0.0;
			l100 = (l100 + 1);
			if (l100 < 3) { continue; } else { break; }
		}
		let mut l101: i32 = 0;
		loop {
			self.fRec67[l101 as usize] = 0.0;
			l101 = (l101 + 1);
			if (l101 < 3) { continue; } else { break; }
		}
		let mut l102: i32 = 0;
		loop {
			self.fRec66[l102 as usize] = 0.0;
			l102 = (l102 + 1);
			if (l102 < 3) { continue; } else { break; }
		}
		let mut l103: i32 = 0;
		loop {
			self.fRec65[l103 as usize] = 0.0;
			l103 = (l103 + 1);
			if (l103 < 3) { continue; } else { break; }
		}
		let mut l104: i32 = 0;
		loop {
			self.fRec64[l104 as usize] = 0.0;
			l104 = (l104 + 1);
			if (l104 < 3) { continue; } else { break; }
		}
		let mut l105: i32 = 0;
		loop {
			self.fRec63[l105 as usize] = 0.0;
			l105 = (l105 + 1);
			if (l105 < 3) { continue; } else { break; }
		}
		let mut l106: i32 = 0;
		loop {
			self.fRec62[l106 as usize] = 0.0;
			l106 = (l106 + 1);
			if (l106 < 2) { continue; } else { break; }
		}
		let mut l107: i32 = 0;
		loop {
			self.fRec75[l107 as usize] = 0.0;
			l107 = (l107 + 1);
			if (l107 < 3) { continue; } else { break; }
		}
		let mut l108: i32 = 0;
		loop {
			self.fRec74[l108 as usize] = 0.0;
			l108 = (l108 + 1);
			if (l108 < 3) { continue; } else { break; }
		}
		let mut l109: i32 = 0;
		loop {
			self.fRec73[l109 as usize] = 0.0;
			l109 = (l109 + 1);
			if (l109 < 3) { continue; } else { break; }
		}
		let mut l110: i32 = 0;
		loop {
			self.fRec72[l110 as usize] = 0.0;
			l110 = (l110 + 1);
			if (l110 < 3) { continue; } else { break; }
		}
		let mut l111: i32 = 0;
		loop {
			self.fRec71[l111 as usize] = 0.0;
			l111 = (l111 + 1);
			if (l111 < 3) { continue; } else { break; }
		}
		let mut l112: i32 = 0;
		loop {
			self.fRec70[l112 as usize] = 0.0;
			l112 = (l112 + 1);
			if (l112 < 3) { continue; } else { break; }
		}
		let mut l113: i32 = 0;
		loop {
			self.fRec69[l113 as usize] = 0.0;
			l113 = (l113 + 1);
			if (l113 < 2) { continue; } else { break; }
		}
		let mut l114: i32 = 0;
		loop {
			self.fRec82[l114 as usize] = 0.0;
			l114 = (l114 + 1);
			if (l114 < 3) { continue; } else { break; }
		}
		let mut l115: i32 = 0;
		loop {
			self.fRec81[l115 as usize] = 0.0;
			l115 = (l115 + 1);
			if (l115 < 3) { continue; } else { break; }
		}
		let mut l116: i32 = 0;
		loop {
			self.fRec80[l116 as usize] = 0.0;
			l116 = (l116 + 1);
			if (l116 < 3) { continue; } else { break; }
		}
		let mut l117: i32 = 0;
		loop {
			self.fRec79[l117 as usize] = 0.0;
			l117 = (l117 + 1);
			if (l117 < 3) { continue; } else { break; }
		}
		let mut l118: i32 = 0;
		loop {
			self.fRec78[l118 as usize] = 0.0;
			l118 = (l118 + 1);
			if (l118 < 3) { continue; } else { break; }
		}
		let mut l119: i32 = 0;
		loop {
			self.fRec77[l119 as usize] = 0.0;
			l119 = (l119 + 1);
			if (l119 < 3) { continue; } else { break; }
		}
		let mut l120: i32 = 0;
		loop {
			self.fRec76[l120 as usize] = 0.0;
			l120 = (l120 + 1);
			if (l120 < 2) { continue; } else { break; }
		}
		let mut l121: i32 = 0;
		loop {
			self.fRec89[l121 as usize] = 0.0;
			l121 = (l121 + 1);
			if (l121 < 3) { continue; } else { break; }
		}
		let mut l122: i32 = 0;
		loop {
			self.fRec88[l122 as usize] = 0.0;
			l122 = (l122 + 1);
			if (l122 < 3) { continue; } else { break; }
		}
		let mut l123: i32 = 0;
		loop {
			self.fRec87[l123 as usize] = 0.0;
			l123 = (l123 + 1);
			if (l123 < 3) { continue; } else { break; }
		}
		let mut l124: i32 = 0;
		loop {
			self.fRec86[l124 as usize] = 0.0;
			l124 = (l124 + 1);
			if (l124 < 3) { continue; } else { break; }
		}
		let mut l125: i32 = 0;
		loop {
			self.fRec85[l125 as usize] = 0.0;
			l125 = (l125 + 1);
			if (l125 < 3) { continue; } else { break; }
		}
		let mut l126: i32 = 0;
		loop {
			self.fRec84[l126 as usize] = 0.0;
			l126 = (l126 + 1);
			if (l126 < 3) { continue; } else { break; }
		}
		let mut l127: i32 = 0;
		loop {
			self.fRec83[l127 as usize] = 0.0;
			l127 = (l127 + 1);
			if (l127 < 2) { continue; } else { break; }
		}
		let mut l128: i32 = 0;
		loop {
			self.fRec96[l128 as usize] = 0.0;
			l128 = (l128 + 1);
			if (l128 < 3) { continue; } else { break; }
		}
		let mut l129: i32 = 0;
		loop {
			self.fRec95[l129 as usize] = 0.0;
			l129 = (l129 + 1);
			if (l129 < 3) { continue; } else { break; }
		}
		let mut l130: i32 = 0;
		loop {
			self.fRec94[l130 as usize] = 0.0;
			l130 = (l130 + 1);
			if (l130 < 3) { continue; } else { break; }
		}
		let mut l131: i32 = 0;
		loop {
			self.fRec93[l131 as usize] = 0.0;
			l131 = (l131 + 1);
			if (l131 < 3) { continue; } else { break; }
		}
		let mut l132: i32 = 0;
		loop {
			self.fRec92[l132 as usize] = 0.0;
			l132 = (l132 + 1);
			if (l132 < 3) { continue; } else { break; }
		}
		let mut l133: i32 = 0;
		loop {
			self.fRec91[l133 as usize] = 0.0;
			l133 = (l133 + 1);
			if (l133 < 3) { continue; } else { break; }
		}
		let mut l134: i32 = 0;
		loop {
			self.fRec90[l134 as usize] = 0.0;
			l134 = (l134 + 1);
			if (l134 < 2) { continue; } else { break; }
		}
		let mut l135: i32 = 0;
		loop {
			self.fRec103[l135 as usize] = 0.0;
			l135 = (l135 + 1);
			if (l135 < 3) { continue; } else { break; }
		}
		let mut l136: i32 = 0;
		loop {
			self.fRec102[l136 as usize] = 0.0;
			l136 = (l136 + 1);
			if (l136 < 3) { continue; } else { break; }
		}
		let mut l137: i32 = 0;
		loop {
			self.fRec101[l137 as usize] = 0.0;
			l137 = (l137 + 1);
			if (l137 < 3) { continue; } else { break; }
		}
		let mut l138: i32 = 0;
		loop {
			self.fRec100[l138 as usize] = 0.0;
			l138 = (l138 + 1);
			if (l138 < 3) { continue; } else { break; }
		}
		let mut l139: i32 = 0;
		loop {
			self.fRec99[l139 as usize] = 0.0;
			l139 = (l139 + 1);
			if (l139 < 3) { continue; } else { break; }
		}
		let mut l140: i32 = 0;
		loop {
			self.fRec98[l140 as usize] = 0.0;
			l140 = (l140 + 1);
			if (l140 < 3) { continue; } else { break; }
		}
		let mut l141: i32 = 0;
		loop {
			self.fRec97[l141 as usize] = 0.0;
			l141 = (l141 + 1);
			if (l141 < 2) { continue; } else { break; }
		}
		let mut l142: i32 = 0;
		loop {
			self.fRec110[l142 as usize] = 0.0;
			l142 = (l142 + 1);
			if (l142 < 3) { continue; } else { break; }
		}
		let mut l143: i32 = 0;
		loop {
			self.fRec109[l143 as usize] = 0.0;
			l143 = (l143 + 1);
			if (l143 < 3) { continue; } else { break; }
		}
		let mut l144: i32 = 0;
		loop {
			self.fRec108[l144 as usize] = 0.0;
			l144 = (l144 + 1);
			if (l144 < 3) { continue; } else { break; }
		}
		let mut l145: i32 = 0;
		loop {
			self.fRec107[l145 as usize] = 0.0;
			l145 = (l145 + 1);
			if (l145 < 3) { continue; } else { break; }
		}
		let mut l146: i32 = 0;
		loop {
			self.fRec106[l146 as usize] = 0.0;
			l146 = (l146 + 1);
			if (l146 < 3) { continue; } else { break; }
		}
		let mut l147: i32 = 0;
		loop {
			self.fRec105[l147 as usize] = 0.0;
			l147 = (l147 + 1);
			if (l147 < 3) { continue; } else { break; }
		}
		let mut l148: i32 = 0;
		loop {
			self.fRec104[l148 as usize] = 0.0;
			l148 = (l148 + 1);
			if (l148 < 2) { continue; } else { break; }
		}
		let mut l149: i32 = 0;
		loop {
			self.fRec117[l149 as usize] = 0.0;
			l149 = (l149 + 1);
			if (l149 < 3) { continue; } else { break; }
		}
		let mut l150: i32 = 0;
		loop {
			self.fRec116[l150 as usize] = 0.0;
			l150 = (l150 + 1);
			if (l150 < 3) { continue; } else { break; }
		}
		let mut l151: i32 = 0;
		loop {
			self.fRec115[l151 as usize] = 0.0;
			l151 = (l151 + 1);
			if (l151 < 3) { continue; } else { break; }
		}
		let mut l152: i32 = 0;
		loop {
			self.fRec114[l152 as usize] = 0.0;
			l152 = (l152 + 1);
			if (l152 < 3) { continue; } else { break; }
		}
		let mut l153: i32 = 0;
		loop {
			self.fRec113[l153 as usize] = 0.0;
			l153 = (l153 + 1);
			if (l153 < 3) { continue; } else { break; }
		}
		let mut l154: i32 = 0;
		loop {
			self.fRec112[l154 as usize] = 0.0;
			l154 = (l154 + 1);
			if (l154 < 3) { continue; } else { break; }
		}
		let mut l155: i32 = 0;
		loop {
			self.fRec111[l155 as usize] = 0.0;
			l155 = (l155 + 1);
			if (l155 < 2) { continue; } else { break; }
		}
		let mut l156: i32 = 0;
		loop {
			self.fRec124[l156 as usize] = 0.0;
			l156 = (l156 + 1);
			if (l156 < 3) { continue; } else { break; }
		}
		let mut l157: i32 = 0;
		loop {
			self.fRec123[l157 as usize] = 0.0;
			l157 = (l157 + 1);
			if (l157 < 3) { continue; } else { break; }
		}
		let mut l158: i32 = 0;
		loop {
			self.fRec122[l158 as usize] = 0.0;
			l158 = (l158 + 1);
			if (l158 < 3) { continue; } else { break; }
		}
		let mut l159: i32 = 0;
		loop {
			self.fRec121[l159 as usize] = 0.0;
			l159 = (l159 + 1);
			if (l159 < 3) { continue; } else { break; }
		}
		let mut l160: i32 = 0;
		loop {
			self.fRec120[l160 as usize] = 0.0;
			l160 = (l160 + 1);
			if (l160 < 3) { continue; } else { break; }
		}
		let mut l161: i32 = 0;
		loop {
			self.fRec119[l161 as usize] = 0.0;
			l161 = (l161 + 1);
			if (l161 < 3) { continue; } else { break; }
		}
		let mut l162: i32 = 0;
		loop {
			self.fRec118[l162 as usize] = 0.0;
			l162 = (l162 + 1);
			if (l162 < 2) { continue; } else { break; }
		}
		let mut l163: i32 = 0;
		loop {
			self.fRec128[l163 as usize] = 0.0;
			l163 = (l163 + 1);
			if (l163 < 3) { continue; } else { break; }
		}
		let mut l164: i32 = 0;
		loop {
			self.fRec127[l164 as usize] = 0.0;
			l164 = (l164 + 1);
			if (l164 < 3) { continue; } else { break; }
		}
		let mut l165: i32 = 0;
		loop {
			self.fRec126[l165 as usize] = 0.0;
			l165 = (l165 + 1);
			if (l165 < 3) { continue; } else { break; }
		}
		let mut l166: i32 = 0;
		loop {
			self.fRec125[l166 as usize] = 0.0;
			l166 = (l166 + 1);
			if (l166 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1000.0 / self.fConst0);
		self.fConst2 = f32::tan((50265.4844 / self.fConst0));
		self.fConst3 = (1.0 / self.fConst2);
		self.fConst4 = (1.0 / (((self.fConst3 + 0.157482162) / self.fConst2) + 0.935140193));
		self.fConst5 = mydsp_faustpower2_f(self.fConst2);
		self.fConst6 = (50.0638084 / self.fConst5);
		self.fConst7 = (2.0 * (0.935140193 - self.fConst6));
		self.fConst8 = (1.0 / (((self.fConst3 + 0.743130445) / self.fConst2) + 1.4500711));
		self.fConst9 = (11.0520525 / self.fConst5);
		self.fConst10 = (2.0 * (1.4500711 - self.fConst9));
		self.fConst11 = (1.0 / (((self.fConst3 + 3.18972731) / self.fConst2) + 4.07678175));
		self.fConst12 = (0.00176617282 / self.fConst5);
		self.fConst13 = (2.0 * (0.000407678192 - self.fConst12));
		self.fConst14 = (1.0 / self.fConst0);
		self.fConst15 = (0.25 * self.fConst0);
		self.fConst16 = (0.0416666679 * mydsp_faustpower2_f(self.fConst0));
		self.fConst17 = (0.00520833349 * mydsp_faustpower3_f(self.fConst0));
		self.fConst18 = (0.0833333358 * self.fConst0);
		self.fConst19 = (0.5 * self.fConst0);
		self.fConst20 = (1.33333337 / self.fConst0);
		self.fConst21 = (0.013888889 * self.fConst0);
		self.fConst22 = (6.28318548 / self.fConst0);
		self.fConst23 = (3.14159274 / self.fConst0);
		self.fConst24 = (((self.fConst3 + -3.18972731) / self.fConst2) + 4.07678175);
		self.fConst25 = (1.0 / self.fConst5);
		self.fConst26 = (2.0 * (4.07678175 - self.fConst25));
		self.fConst27 = (self.fConst12 + 0.000407678192);
		self.fConst28 = (((self.fConst3 + -0.743130445) / self.fConst2) + 1.4500711);
		self.fConst29 = (2.0 * (1.4500711 - self.fConst25));
		self.fConst30 = (self.fConst9 + 1.4500711);
		self.fConst31 = (((self.fConst3 + -0.157482162) / self.fConst2) + 0.935140193);
		self.fConst32 = (2.0 * (0.935140193 - self.fConst25));
		self.fConst33 = (self.fConst6 + 0.935140193);
		self.fConst34 = f32::tan((31665.2695 / self.fConst0));
		self.fConst35 = (1.0 / self.fConst34);
		self.fConst36 = (1.0 / (((self.fConst35 + 0.157482162) / self.fConst34) + 0.935140193));
		self.fConst37 = mydsp_faustpower2_f(self.fConst34);
		self.fConst38 = (50.0638084 / self.fConst37);
		self.fConst39 = (2.0 * (0.935140193 - self.fConst38));
		self.fConst40 = (1.0 / (((self.fConst35 + 0.743130445) / self.fConst34) + 1.4500711));
		self.fConst41 = (11.0520525 / self.fConst37);
		self.fConst42 = (2.0 * (1.4500711 - self.fConst41));
		self.fConst43 = (1.0 / (((self.fConst35 + 3.18972731) / self.fConst34) + 4.07678175));
		self.fConst44 = (0.00176617282 / self.fConst37);
		self.fConst45 = (2.0 * (0.000407678192 - self.fConst44));
		self.fConst46 = (1.0 / (((self.fConst3 + 0.168404877) / self.fConst2) + 1.06935835));
		self.fConst47 = (2.0 * (53.5361519 - self.fConst25));
		self.fConst48 = (1.0 / (((self.fConst3 + 0.51247865) / self.fConst2) + 0.689621389));
		self.fConst49 = (2.0 * (7.62173128 - self.fConst25));
		self.fConst50 = (1.0 / (((self.fConst3 + 0.782413065) / self.fConst2) + 0.245291501));
		self.fConst51 = (9.99999975e-05 / self.fConst5);
		self.fConst52 = (2.0 * (0.000433227193 - self.fConst51));
		self.fConst53 = (((self.fConst3 + -0.782413065) / self.fConst2) + 0.245291501);
		self.fConst54 = (2.0 * (0.245291501 - self.fConst25));
		self.fConst55 = (self.fConst51 + 0.000433227193);
		self.fConst56 = (((self.fConst3 + -0.51247865) / self.fConst2) + 0.689621389);
		self.fConst57 = (2.0 * (0.689621389 - self.fConst25));
		self.fConst58 = (self.fConst25 + 7.62173128);
		self.fConst59 = (((self.fConst3 + -0.168404877) / self.fConst2) + 1.06935835);
		self.fConst60 = (2.0 * (1.06935835 - self.fConst25));
		self.fConst61 = (self.fConst25 + 53.5361519);
		self.fConst62 = (((self.fConst35 + -3.18972731) / self.fConst34) + 4.07678175);
		self.fConst63 = (1.0 / self.fConst37);
		self.fConst64 = (2.0 * (4.07678175 - self.fConst63));
		self.fConst65 = (self.fConst44 + 0.000407678192);
		self.fConst66 = (((self.fConst35 + -0.743130445) / self.fConst34) + 1.4500711);
		self.fConst67 = (2.0 * (1.4500711 - self.fConst63));
		self.fConst68 = (self.fConst41 + 1.4500711);
		self.fConst69 = (((self.fConst35 + -0.157482162) / self.fConst34) + 0.935140193);
		self.fConst70 = (2.0 * (0.935140193 - self.fConst63));
		self.fConst71 = (self.fConst38 + 0.935140193);
		self.fConst72 = f32::tan((19947.8691 / self.fConst0));
		self.fConst73 = (1.0 / self.fConst72);
		self.fConst74 = (1.0 / (((self.fConst73 + 0.157482162) / self.fConst72) + 0.935140193));
		self.fConst75 = mydsp_faustpower2_f(self.fConst72);
		self.fConst76 = (50.0638084 / self.fConst75);
		self.fConst77 = (2.0 * (0.935140193 - self.fConst76));
		self.fConst78 = (1.0 / (((self.fConst73 + 0.743130445) / self.fConst72) + 1.4500711));
		self.fConst79 = (11.0520525 / self.fConst75);
		self.fConst80 = (2.0 * (1.4500711 - self.fConst79));
		self.fConst81 = (1.0 / (((self.fConst73 + 3.18972731) / self.fConst72) + 4.07678175));
		self.fConst82 = (0.00176617282 / self.fConst75);
		self.fConst83 = (2.0 * (0.000407678192 - self.fConst82));
		self.fConst84 = (1.0 / (((self.fConst35 + 0.168404877) / self.fConst34) + 1.06935835));
		self.fConst85 = (2.0 * (53.5361519 - self.fConst63));
		self.fConst86 = (1.0 / (((self.fConst35 + 0.51247865) / self.fConst34) + 0.689621389));
		self.fConst87 = (2.0 * (7.62173128 - self.fConst63));
		self.fConst88 = (1.0 / (((self.fConst35 + 0.782413065) / self.fConst34) + 0.245291501));
		self.fConst89 = (9.99999975e-05 / self.fConst37);
		self.fConst90 = (2.0 * (0.000433227193 - self.fConst89));
		self.fConst91 = (((self.fConst35 + -0.782413065) / self.fConst34) + 0.245291501);
		self.fConst92 = (2.0 * (0.245291501 - self.fConst63));
		self.fConst93 = (self.fConst89 + 0.000433227193);
		self.fConst94 = (((self.fConst35 + -0.51247865) / self.fConst34) + 0.689621389);
		self.fConst95 = (2.0 * (0.689621389 - self.fConst63));
		self.fConst96 = (self.fConst63 + 7.62173128);
		self.fConst97 = (((self.fConst35 + -0.168404877) / self.fConst34) + 1.06935835);
		self.fConst98 = (2.0 * (1.06935835 - self.fConst63));
		self.fConst99 = (self.fConst63 + 53.5361519);
		self.fConst100 = (((self.fConst73 + -3.18972731) / self.fConst72) + 4.07678175);
		self.fConst101 = (1.0 / self.fConst75);
		self.fConst102 = (2.0 * (4.07678175 - self.fConst101));
		self.fConst103 = (self.fConst82 + 0.000407678192);
		self.fConst104 = (((self.fConst73 + -0.743130445) / self.fConst72) + 1.4500711);
		self.fConst105 = (2.0 * (1.4500711 - self.fConst101));
		self.fConst106 = (self.fConst79 + 1.4500711);
		self.fConst107 = (((self.fConst73 + -0.157482162) / self.fConst72) + 0.935140193);
		self.fConst108 = (2.0 * (0.935140193 - self.fConst101));
		self.fConst109 = (self.fConst76 + 0.935140193);
		self.fConst110 = f32::tan((12566.3711 / self.fConst0));
		self.fConst111 = (1.0 / self.fConst110);
		self.fConst112 = (1.0 / (((self.fConst111 + 0.157482162) / self.fConst110) + 0.935140193));
		self.fConst113 = mydsp_faustpower2_f(self.fConst110);
		self.fConst114 = (50.0638084 / self.fConst113);
		self.fConst115 = (2.0 * (0.935140193 - self.fConst114));
		self.fConst116 = (1.0 / (((self.fConst111 + 0.743130445) / self.fConst110) + 1.4500711));
		self.fConst117 = (11.0520525 / self.fConst113);
		self.fConst118 = (2.0 * (1.4500711 - self.fConst117));
		self.fConst119 = (1.0 / (((self.fConst111 + 3.18972731) / self.fConst110) + 4.07678175));
		self.fConst120 = (0.00176617282 / self.fConst113);
		self.fConst121 = (2.0 * (0.000407678192 - self.fConst120));
		self.fConst122 = (1.0 / (((self.fConst73 + 0.168404877) / self.fConst72) + 1.06935835));
		self.fConst123 = (2.0 * (53.5361519 - self.fConst101));
		self.fConst124 = (1.0 / (((self.fConst73 + 0.51247865) / self.fConst72) + 0.689621389));
		self.fConst125 = (2.0 * (7.62173128 - self.fConst101));
		self.fConst126 = (1.0 / (((self.fConst73 + 0.782413065) / self.fConst72) + 0.245291501));
		self.fConst127 = (9.99999975e-05 / self.fConst75);
		self.fConst128 = (2.0 * (0.000433227193 - self.fConst127));
		self.fConst129 = (((self.fConst73 + -0.782413065) / self.fConst72) + 0.245291501);
		self.fConst130 = (2.0 * (0.245291501 - self.fConst101));
		self.fConst131 = (self.fConst127 + 0.000433227193);
		self.fConst132 = (((self.fConst73 + -0.51247865) / self.fConst72) + 0.689621389);
		self.fConst133 = (2.0 * (0.689621389 - self.fConst101));
		self.fConst134 = (self.fConst101 + 7.62173128);
		self.fConst135 = (((self.fConst73 + -0.168404877) / self.fConst72) + 1.06935835);
		self.fConst136 = (2.0 * (1.06935835 - self.fConst101));
		self.fConst137 = (self.fConst101 + 53.5361519);
		self.fConst138 = (((self.fConst111 + -3.18972731) / self.fConst110) + 4.07678175);
		self.fConst139 = (1.0 / self.fConst113);
		self.fConst140 = (2.0 * (4.07678175 - self.fConst139));
		self.fConst141 = (self.fConst120 + 0.000407678192);
		self.fConst142 = (((self.fConst111 + -0.743130445) / self.fConst110) + 1.4500711);
		self.fConst143 = (2.0 * (1.4500711 - self.fConst139));
		self.fConst144 = (self.fConst117 + 1.4500711);
		self.fConst145 = (((self.fConst111 + -0.157482162) / self.fConst110) + 0.935140193);
		self.fConst146 = (2.0 * (0.935140193 - self.fConst139));
		self.fConst147 = (self.fConst114 + 0.935140193);
		self.fConst148 = f32::tan((7916.31738 / self.fConst0));
		self.fConst149 = (1.0 / self.fConst148);
		self.fConst150 = (1.0 / (((self.fConst149 + 0.157482162) / self.fConst148) + 0.935140193));
		self.fConst151 = mydsp_faustpower2_f(self.fConst148);
		self.fConst152 = (50.0638084 / self.fConst151);
		self.fConst153 = (2.0 * (0.935140193 - self.fConst152));
		self.fConst154 = (1.0 / (((self.fConst149 + 0.743130445) / self.fConst148) + 1.4500711));
		self.fConst155 = (11.0520525 / self.fConst151);
		self.fConst156 = (2.0 * (1.4500711 - self.fConst155));
		self.fConst157 = (1.0 / (((self.fConst149 + 3.18972731) / self.fConst148) + 4.07678175));
		self.fConst158 = (0.00176617282 / self.fConst151);
		self.fConst159 = (2.0 * (0.000407678192 - self.fConst158));
		self.fConst160 = (1.0 / (((self.fConst111 + 0.168404877) / self.fConst110) + 1.06935835));
		self.fConst161 = (2.0 * (53.5361519 - self.fConst139));
		self.fConst162 = (1.0 / (((self.fConst111 + 0.51247865) / self.fConst110) + 0.689621389));
		self.fConst163 = (2.0 * (7.62173128 - self.fConst139));
		self.fConst164 = (1.0 / (((self.fConst111 + 0.782413065) / self.fConst110) + 0.245291501));
		self.fConst165 = (9.99999975e-05 / self.fConst113);
		self.fConst166 = (2.0 * (0.000433227193 - self.fConst165));
		self.fConst167 = (((self.fConst111 + -0.782413065) / self.fConst110) + 0.245291501);
		self.fConst168 = (2.0 * (0.245291501 - self.fConst139));
		self.fConst169 = (self.fConst165 + 0.000433227193);
		self.fConst170 = (((self.fConst111 + -0.51247865) / self.fConst110) + 0.689621389);
		self.fConst171 = (2.0 * (0.689621389 - self.fConst139));
		self.fConst172 = (self.fConst139 + 7.62173128);
		self.fConst173 = (((self.fConst111 + -0.168404877) / self.fConst110) + 1.06935835);
		self.fConst174 = (2.0 * (1.06935835 - self.fConst139));
		self.fConst175 = (self.fConst139 + 53.5361519);
		self.fConst176 = (((self.fConst149 + -3.18972731) / self.fConst148) + 4.07678175);
		self.fConst177 = (1.0 / self.fConst151);
		self.fConst178 = (2.0 * (4.07678175 - self.fConst177));
		self.fConst179 = (self.fConst158 + 0.000407678192);
		self.fConst180 = (((self.fConst149 + -0.743130445) / self.fConst148) + 1.4500711);
		self.fConst181 = (2.0 * (1.4500711 - self.fConst177));
		self.fConst182 = (self.fConst155 + 1.4500711);
		self.fConst183 = (((self.fConst149 + -0.157482162) / self.fConst148) + 0.935140193);
		self.fConst184 = (2.0 * (0.935140193 - self.fConst177));
		self.fConst185 = (self.fConst152 + 0.935140193);
		self.fConst186 = f32::tan((4986.96729 / self.fConst0));
		self.fConst187 = (1.0 / self.fConst186);
		self.fConst188 = (1.0 / (((self.fConst187 + 0.157482162) / self.fConst186) + 0.935140193));
		self.fConst189 = mydsp_faustpower2_f(self.fConst186);
		self.fConst190 = (50.0638084 / self.fConst189);
		self.fConst191 = (2.0 * (0.935140193 - self.fConst190));
		self.fConst192 = (1.0 / (((self.fConst187 + 0.743130445) / self.fConst186) + 1.4500711));
		self.fConst193 = (11.0520525 / self.fConst189);
		self.fConst194 = (2.0 * (1.4500711 - self.fConst193));
		self.fConst195 = (1.0 / (((self.fConst187 + 3.18972731) / self.fConst186) + 4.07678175));
		self.fConst196 = (0.00176617282 / self.fConst189);
		self.fConst197 = (2.0 * (0.000407678192 - self.fConst196));
		self.fConst198 = (1.0 / (((self.fConst149 + 0.168404877) / self.fConst148) + 1.06935835));
		self.fConst199 = (2.0 * (53.5361519 - self.fConst177));
		self.fConst200 = (1.0 / (((self.fConst149 + 0.51247865) / self.fConst148) + 0.689621389));
		self.fConst201 = (2.0 * (7.62173128 - self.fConst177));
		self.fConst202 = (1.0 / (((self.fConst149 + 0.782413065) / self.fConst148) + 0.245291501));
		self.fConst203 = (9.99999975e-05 / self.fConst151);
		self.fConst204 = (2.0 * (0.000433227193 - self.fConst203));
		self.fConst205 = (((self.fConst149 + -0.782413065) / self.fConst148) + 0.245291501);
		self.fConst206 = (2.0 * (0.245291501 - self.fConst177));
		self.fConst207 = (self.fConst203 + 0.000433227193);
		self.fConst208 = (((self.fConst149 + -0.51247865) / self.fConst148) + 0.689621389);
		self.fConst209 = (2.0 * (0.689621389 - self.fConst177));
		self.fConst210 = (self.fConst177 + 7.62173128);
		self.fConst211 = (((self.fConst149 + -0.168404877) / self.fConst148) + 1.06935835);
		self.fConst212 = (2.0 * (1.06935835 - self.fConst177));
		self.fConst213 = (self.fConst177 + 53.5361519);
		self.fConst214 = (((self.fConst187 + -3.18972731) / self.fConst186) + 4.07678175);
		self.fConst215 = (1.0 / self.fConst189);
		self.fConst216 = (2.0 * (4.07678175 - self.fConst215));
		self.fConst217 = (self.fConst196 + 0.000407678192);
		self.fConst218 = (((self.fConst187 + -0.743130445) / self.fConst186) + 1.4500711);
		self.fConst219 = (2.0 * (1.4500711 - self.fConst215));
		self.fConst220 = (self.fConst193 + 1.4500711);
		self.fConst221 = (((self.fConst187 + -0.157482162) / self.fConst186) + 0.935140193);
		self.fConst222 = (2.0 * (0.935140193 - self.fConst215));
		self.fConst223 = (self.fConst190 + 0.935140193);
		self.fConst224 = f32::tan((3141.59277 / self.fConst0));
		self.fConst225 = (1.0 / self.fConst224);
		self.fConst226 = (1.0 / (((self.fConst225 + 0.157482162) / self.fConst224) + 0.935140193));
		self.fConst227 = mydsp_faustpower2_f(self.fConst224);
		self.fConst228 = (50.0638084 / self.fConst227);
		self.fConst229 = (2.0 * (0.935140193 - self.fConst228));
		self.fConst230 = (1.0 / (((self.fConst225 + 0.743130445) / self.fConst224) + 1.4500711));
		self.fConst231 = (11.0520525 / self.fConst227);
		self.fConst232 = (2.0 * (1.4500711 - self.fConst231));
		self.fConst233 = (1.0 / (((self.fConst225 + 3.18972731) / self.fConst224) + 4.07678175));
		self.fConst234 = (0.00176617282 / self.fConst227);
		self.fConst235 = (2.0 * (0.000407678192 - self.fConst234));
		self.fConst236 = (1.0 / (((self.fConst187 + 0.168404877) / self.fConst186) + 1.06935835));
		self.fConst237 = (2.0 * (53.5361519 - self.fConst215));
		self.fConst238 = (1.0 / (((self.fConst187 + 0.51247865) / self.fConst186) + 0.689621389));
		self.fConst239 = (2.0 * (7.62173128 - self.fConst215));
		self.fConst240 = (1.0 / (((self.fConst187 + 0.782413065) / self.fConst186) + 0.245291501));
		self.fConst241 = (9.99999975e-05 / self.fConst189);
		self.fConst242 = (2.0 * (0.000433227193 - self.fConst241));
		self.fConst243 = (((self.fConst187 + -0.782413065) / self.fConst186) + 0.245291501);
		self.fConst244 = (2.0 * (0.245291501 - self.fConst215));
		self.fConst245 = (self.fConst241 + 0.000433227193);
		self.fConst246 = (((self.fConst187 + -0.51247865) / self.fConst186) + 0.689621389);
		self.fConst247 = (2.0 * (0.689621389 - self.fConst215));
		self.fConst248 = (self.fConst215 + 7.62173128);
		self.fConst249 = (((self.fConst187 + -0.168404877) / self.fConst186) + 1.06935835);
		self.fConst250 = (2.0 * (1.06935835 - self.fConst215));
		self.fConst251 = (self.fConst215 + 53.5361519);
		self.fConst252 = (((self.fConst225 + -3.18972731) / self.fConst224) + 4.07678175);
		self.fConst253 = (1.0 / self.fConst227);
		self.fConst254 = (2.0 * (4.07678175 - self.fConst253));
		self.fConst255 = (self.fConst234 + 0.000407678192);
		self.fConst256 = (((self.fConst225 + -0.743130445) / self.fConst224) + 1.4500711);
		self.fConst257 = (2.0 * (1.4500711 - self.fConst253));
		self.fConst258 = (self.fConst231 + 1.4500711);
		self.fConst259 = (((self.fConst225 + -0.157482162) / self.fConst224) + 0.935140193);
		self.fConst260 = (2.0 * (0.935140193 - self.fConst253));
		self.fConst261 = (self.fConst228 + 0.935140193);
		self.fConst262 = f32::tan((1979.07935 / self.fConst0));
		self.fConst263 = (1.0 / self.fConst262);
		self.fConst264 = (1.0 / (((self.fConst263 + 0.157482162) / self.fConst262) + 0.935140193));
		self.fConst265 = mydsp_faustpower2_f(self.fConst262);
		self.fConst266 = (50.0638084 / self.fConst265);
		self.fConst267 = (2.0 * (0.935140193 - self.fConst266));
		self.fConst268 = (1.0 / (((self.fConst263 + 0.743130445) / self.fConst262) + 1.4500711));
		self.fConst269 = (11.0520525 / self.fConst265);
		self.fConst270 = (2.0 * (1.4500711 - self.fConst269));
		self.fConst271 = (1.0 / (((self.fConst263 + 3.18972731) / self.fConst262) + 4.07678175));
		self.fConst272 = (0.00176617282 / self.fConst265);
		self.fConst273 = (2.0 * (0.000407678192 - self.fConst272));
		self.fConst274 = (1.0 / (((self.fConst225 + 0.168404877) / self.fConst224) + 1.06935835));
		self.fConst275 = (2.0 * (53.5361519 - self.fConst253));
		self.fConst276 = (1.0 / (((self.fConst225 + 0.51247865) / self.fConst224) + 0.689621389));
		self.fConst277 = (2.0 * (7.62173128 - self.fConst253));
		self.fConst278 = (1.0 / (((self.fConst225 + 0.782413065) / self.fConst224) + 0.245291501));
		self.fConst279 = (9.99999975e-05 / self.fConst227);
		self.fConst280 = (2.0 * (0.000433227193 - self.fConst279));
		self.fConst281 = (((self.fConst225 + -0.782413065) / self.fConst224) + 0.245291501);
		self.fConst282 = (2.0 * (0.245291501 - self.fConst253));
		self.fConst283 = (self.fConst279 + 0.000433227193);
		self.fConst284 = (((self.fConst225 + -0.51247865) / self.fConst224) + 0.689621389);
		self.fConst285 = (2.0 * (0.689621389 - self.fConst253));
		self.fConst286 = (self.fConst253 + 7.62173128);
		self.fConst287 = (((self.fConst225 + -0.168404877) / self.fConst224) + 1.06935835);
		self.fConst288 = (2.0 * (1.06935835 - self.fConst253));
		self.fConst289 = (self.fConst253 + 53.5361519);
		self.fConst290 = (((self.fConst263 + -3.18972731) / self.fConst262) + 4.07678175);
		self.fConst291 = (1.0 / self.fConst265);
		self.fConst292 = (2.0 * (4.07678175 - self.fConst291));
		self.fConst293 = (self.fConst272 + 0.000407678192);
		self.fConst294 = (((self.fConst263 + -0.743130445) / self.fConst262) + 1.4500711);
		self.fConst295 = (2.0 * (1.4500711 - self.fConst291));
		self.fConst296 = (self.fConst269 + 1.4500711);
		self.fConst297 = (((self.fConst263 + -0.157482162) / self.fConst262) + 0.935140193);
		self.fConst298 = (2.0 * (0.935140193 - self.fConst291));
		self.fConst299 = (self.fConst266 + 0.935140193);
		self.fConst300 = f32::tan((1246.74182 / self.fConst0));
		self.fConst301 = (1.0 / self.fConst300);
		self.fConst302 = (1.0 / (((self.fConst301 + 0.157482162) / self.fConst300) + 0.935140193));
		self.fConst303 = mydsp_faustpower2_f(self.fConst300);
		self.fConst304 = (50.0638084 / self.fConst303);
		self.fConst305 = (2.0 * (0.935140193 - self.fConst304));
		self.fConst306 = (1.0 / (((self.fConst301 + 0.743130445) / self.fConst300) + 1.4500711));
		self.fConst307 = (11.0520525 / self.fConst303);
		self.fConst308 = (2.0 * (1.4500711 - self.fConst307));
		self.fConst309 = (1.0 / (((self.fConst301 + 3.18972731) / self.fConst300) + 4.07678175));
		self.fConst310 = (0.00176617282 / self.fConst303);
		self.fConst311 = (2.0 * (0.000407678192 - self.fConst310));
		self.fConst312 = (1.0 / (((self.fConst263 + 0.168404877) / self.fConst262) + 1.06935835));
		self.fConst313 = (2.0 * (53.5361519 - self.fConst291));
		self.fConst314 = (1.0 / (((self.fConst263 + 0.51247865) / self.fConst262) + 0.689621389));
		self.fConst315 = (2.0 * (7.62173128 - self.fConst291));
		self.fConst316 = (1.0 / (((self.fConst263 + 0.782413065) / self.fConst262) + 0.245291501));
		self.fConst317 = (9.99999975e-05 / self.fConst265);
		self.fConst318 = (2.0 * (0.000433227193 - self.fConst317));
		self.fConst319 = (((self.fConst263 + -0.782413065) / self.fConst262) + 0.245291501);
		self.fConst320 = (2.0 * (0.245291501 - self.fConst291));
		self.fConst321 = (self.fConst317 + 0.000433227193);
		self.fConst322 = (((self.fConst263 + -0.51247865) / self.fConst262) + 0.689621389);
		self.fConst323 = (2.0 * (0.689621389 - self.fConst291));
		self.fConst324 = (self.fConst291 + 7.62173128);
		self.fConst325 = (((self.fConst263 + -0.168404877) / self.fConst262) + 1.06935835);
		self.fConst326 = (2.0 * (1.06935835 - self.fConst291));
		self.fConst327 = (self.fConst291 + 53.5361519);
		self.fConst328 = (((self.fConst301 + -3.18972731) / self.fConst300) + 4.07678175);
		self.fConst329 = (1.0 / self.fConst303);
		self.fConst330 = (2.0 * (4.07678175 - self.fConst329));
		self.fConst331 = (self.fConst310 + 0.000407678192);
		self.fConst332 = (((self.fConst301 + -0.743130445) / self.fConst300) + 1.4500711);
		self.fConst333 = (2.0 * (1.4500711 - self.fConst329));
		self.fConst334 = (self.fConst307 + 1.4500711);
		self.fConst335 = (((self.fConst301 + -0.157482162) / self.fConst300) + 0.935140193);
		self.fConst336 = (2.0 * (0.935140193 - self.fConst329));
		self.fConst337 = (self.fConst304 + 0.935140193);
		self.fConst338 = f32::tan((785.398193 / self.fConst0));
		self.fConst339 = (1.0 / self.fConst338);
		self.fConst340 = (1.0 / (((self.fConst339 + 0.157482162) / self.fConst338) + 0.935140193));
		self.fConst341 = mydsp_faustpower2_f(self.fConst338);
		self.fConst342 = (50.0638084 / self.fConst341);
		self.fConst343 = (2.0 * (0.935140193 - self.fConst342));
		self.fConst344 = (1.0 / (((self.fConst339 + 0.743130445) / self.fConst338) + 1.4500711));
		self.fConst345 = (11.0520525 / self.fConst341);
		self.fConst346 = (2.0 * (1.4500711 - self.fConst345));
		self.fConst347 = (1.0 / (((self.fConst339 + 3.18972731) / self.fConst338) + 4.07678175));
		self.fConst348 = (0.00176617282 / self.fConst341);
		self.fConst349 = (2.0 * (0.000407678192 - self.fConst348));
		self.fConst350 = (1.0 / (((self.fConst301 + 0.168404877) / self.fConst300) + 1.06935835));
		self.fConst351 = (2.0 * (53.5361519 - self.fConst329));
		self.fConst352 = (1.0 / (((self.fConst301 + 0.51247865) / self.fConst300) + 0.689621389));
		self.fConst353 = (2.0 * (7.62173128 - self.fConst329));
		self.fConst354 = (1.0 / (((self.fConst301 + 0.782413065) / self.fConst300) + 0.245291501));
		self.fConst355 = (9.99999975e-05 / self.fConst303);
		self.fConst356 = (2.0 * (0.000433227193 - self.fConst355));
		self.fConst357 = (((self.fConst301 + -0.782413065) / self.fConst300) + 0.245291501);
		self.fConst358 = (2.0 * (0.245291501 - self.fConst329));
		self.fConst359 = (self.fConst355 + 0.000433227193);
		self.fConst360 = (((self.fConst301 + -0.51247865) / self.fConst300) + 0.689621389);
		self.fConst361 = (2.0 * (0.689621389 - self.fConst329));
		self.fConst362 = (self.fConst329 + 7.62173128);
		self.fConst363 = (((self.fConst301 + -0.168404877) / self.fConst300) + 1.06935835);
		self.fConst364 = (2.0 * (1.06935835 - self.fConst329));
		self.fConst365 = (self.fConst329 + 53.5361519);
		self.fConst366 = (((self.fConst339 + -3.18972731) / self.fConst338) + 4.07678175);
		self.fConst367 = (1.0 / self.fConst341);
		self.fConst368 = (2.0 * (4.07678175 - self.fConst367));
		self.fConst369 = (self.fConst348 + 0.000407678192);
		self.fConst370 = (((self.fConst339 + -0.743130445) / self.fConst338) + 1.4500711);
		self.fConst371 = (2.0 * (1.4500711 - self.fConst367));
		self.fConst372 = (self.fConst345 + 1.4500711);
		self.fConst373 = (((self.fConst339 + -0.157482162) / self.fConst338) + 0.935140193);
		self.fConst374 = (2.0 * (0.935140193 - self.fConst367));
		self.fConst375 = (self.fConst342 + 0.935140193);
		self.fConst376 = f32::tan((494.769836 / self.fConst0));
		self.fConst377 = (1.0 / self.fConst376);
		self.fConst378 = (1.0 / (((self.fConst377 + 0.157482162) / self.fConst376) + 0.935140193));
		self.fConst379 = mydsp_faustpower2_f(self.fConst376);
		self.fConst380 = (50.0638084 / self.fConst379);
		self.fConst381 = (2.0 * (0.935140193 - self.fConst380));
		self.fConst382 = (1.0 / (((self.fConst377 + 0.743130445) / self.fConst376) + 1.4500711));
		self.fConst383 = (11.0520525 / self.fConst379);
		self.fConst384 = (2.0 * (1.4500711 - self.fConst383));
		self.fConst385 = (1.0 / (((self.fConst377 + 3.18972731) / self.fConst376) + 4.07678175));
		self.fConst386 = (0.00176617282 / self.fConst379);
		self.fConst387 = (2.0 * (0.000407678192 - self.fConst386));
		self.fConst388 = (1.0 / (((self.fConst339 + 0.168404877) / self.fConst338) + 1.06935835));
		self.fConst389 = (2.0 * (53.5361519 - self.fConst367));
		self.fConst390 = (1.0 / (((self.fConst339 + 0.51247865) / self.fConst338) + 0.689621389));
		self.fConst391 = (2.0 * (7.62173128 - self.fConst367));
		self.fConst392 = (1.0 / (((self.fConst339 + 0.782413065) / self.fConst338) + 0.245291501));
		self.fConst393 = (9.99999975e-05 / self.fConst341);
		self.fConst394 = (2.0 * (0.000433227193 - self.fConst393));
		self.fConst395 = (((self.fConst339 + -0.782413065) / self.fConst338) + 0.245291501);
		self.fConst396 = (2.0 * (0.245291501 - self.fConst367));
		self.fConst397 = (self.fConst393 + 0.000433227193);
		self.fConst398 = (((self.fConst339 + -0.51247865) / self.fConst338) + 0.689621389);
		self.fConst399 = (2.0 * (0.689621389 - self.fConst367));
		self.fConst400 = (self.fConst367 + 7.62173128);
		self.fConst401 = (((self.fConst339 + -0.168404877) / self.fConst338) + 1.06935835);
		self.fConst402 = (2.0 * (1.06935835 - self.fConst367));
		self.fConst403 = (self.fConst367 + 53.5361519);
		self.fConst404 = (((self.fConst377 + -3.18972731) / self.fConst376) + 4.07678175);
		self.fConst405 = (1.0 / self.fConst379);
		self.fConst406 = (2.0 * (4.07678175 - self.fConst405));
		self.fConst407 = (self.fConst386 + 0.000407678192);
		self.fConst408 = (((self.fConst377 + -0.743130445) / self.fConst376) + 1.4500711);
		self.fConst409 = (2.0 * (1.4500711 - self.fConst405));
		self.fConst410 = (self.fConst383 + 1.4500711);
		self.fConst411 = (((self.fConst377 + -0.157482162) / self.fConst376) + 0.935140193);
		self.fConst412 = (2.0 * (0.935140193 - self.fConst405));
		self.fConst413 = (self.fConst380 + 0.935140193);
		self.fConst414 = f32::tan((311.685455 / self.fConst0));
		self.fConst415 = (1.0 / self.fConst414);
		self.fConst416 = (1.0 / (((self.fConst415 + 0.157482162) / self.fConst414) + 0.935140193));
		self.fConst417 = mydsp_faustpower2_f(self.fConst414);
		self.fConst418 = (50.0638084 / self.fConst417);
		self.fConst419 = (2.0 * (0.935140193 - self.fConst418));
		self.fConst420 = (1.0 / (((self.fConst415 + 0.743130445) / self.fConst414) + 1.4500711));
		self.fConst421 = (11.0520525 / self.fConst417);
		self.fConst422 = (2.0 * (1.4500711 - self.fConst421));
		self.fConst423 = (1.0 / (((self.fConst415 + 3.18972731) / self.fConst414) + 4.07678175));
		self.fConst424 = (0.00176617282 / self.fConst417);
		self.fConst425 = (2.0 * (0.000407678192 - self.fConst424));
		self.fConst426 = (1.0 / (((self.fConst377 + 0.168404877) / self.fConst376) + 1.06935835));
		self.fConst427 = (2.0 * (53.5361519 - self.fConst405));
		self.fConst428 = (1.0 / (((self.fConst377 + 0.51247865) / self.fConst376) + 0.689621389));
		self.fConst429 = (2.0 * (7.62173128 - self.fConst405));
		self.fConst430 = (1.0 / (((self.fConst377 + 0.782413065) / self.fConst376) + 0.245291501));
		self.fConst431 = (9.99999975e-05 / self.fConst379);
		self.fConst432 = (2.0 * (0.000433227193 - self.fConst431));
		self.fConst433 = (((self.fConst377 + -0.782413065) / self.fConst376) + 0.245291501);
		self.fConst434 = (2.0 * (0.245291501 - self.fConst405));
		self.fConst435 = (self.fConst431 + 0.000433227193);
		self.fConst436 = (((self.fConst377 + -0.51247865) / self.fConst376) + 0.689621389);
		self.fConst437 = (2.0 * (0.689621389 - self.fConst405));
		self.fConst438 = (self.fConst405 + 7.62173128);
		self.fConst439 = (((self.fConst377 + -0.168404877) / self.fConst376) + 1.06935835);
		self.fConst440 = (2.0 * (1.06935835 - self.fConst405));
		self.fConst441 = (self.fConst405 + 53.5361519);
		self.fConst442 = (((self.fConst415 + -3.18972731) / self.fConst414) + 4.07678175);
		self.fConst443 = (1.0 / self.fConst417);
		self.fConst444 = (2.0 * (4.07678175 - self.fConst443));
		self.fConst445 = (self.fConst424 + 0.000407678192);
		self.fConst446 = (((self.fConst415 + -0.743130445) / self.fConst414) + 1.4500711);
		self.fConst447 = (2.0 * (1.4500711 - self.fConst443));
		self.fConst448 = (self.fConst421 + 1.4500711);
		self.fConst449 = (((self.fConst415 + -0.157482162) / self.fConst414) + 0.935140193);
		self.fConst450 = (2.0 * (0.935140193 - self.fConst443));
		self.fConst451 = (self.fConst418 + 0.935140193);
		self.fConst452 = f32::tan((196.349548 / self.fConst0));
		self.fConst453 = (1.0 / self.fConst452);
		self.fConst454 = (1.0 / (((self.fConst453 + 0.157482162) / self.fConst452) + 0.935140193));
		self.fConst455 = mydsp_faustpower2_f(self.fConst452);
		self.fConst456 = (50.0638084 / self.fConst455);
		self.fConst457 = (2.0 * (0.935140193 - self.fConst456));
		self.fConst458 = (1.0 / (((self.fConst453 + 0.743130445) / self.fConst452) + 1.4500711));
		self.fConst459 = (11.0520525 / self.fConst455);
		self.fConst460 = (2.0 * (1.4500711 - self.fConst459));
		self.fConst461 = (1.0 / (((self.fConst453 + 3.18972731) / self.fConst452) + 4.07678175));
		self.fConst462 = (0.00176617282 / self.fConst455);
		self.fConst463 = (2.0 * (0.000407678192 - self.fConst462));
		self.fConst464 = (1.0 / (((self.fConst415 + 0.168404877) / self.fConst414) + 1.06935835));
		self.fConst465 = (2.0 * (53.5361519 - self.fConst443));
		self.fConst466 = (1.0 / (((self.fConst415 + 0.51247865) / self.fConst414) + 0.689621389));
		self.fConst467 = (2.0 * (7.62173128 - self.fConst443));
		self.fConst468 = (1.0 / (((self.fConst415 + 0.782413065) / self.fConst414) + 0.245291501));
		self.fConst469 = (9.99999975e-05 / self.fConst417);
		self.fConst470 = (2.0 * (0.000433227193 - self.fConst469));
		self.fConst471 = (((self.fConst415 + -0.782413065) / self.fConst414) + 0.245291501);
		self.fConst472 = (2.0 * (0.245291501 - self.fConst443));
		self.fConst473 = (self.fConst469 + 0.000433227193);
		self.fConst474 = (((self.fConst415 + -0.51247865) / self.fConst414) + 0.689621389);
		self.fConst475 = (2.0 * (0.689621389 - self.fConst443));
		self.fConst476 = (self.fConst443 + 7.62173128);
		self.fConst477 = (((self.fConst415 + -0.168404877) / self.fConst414) + 1.06935835);
		self.fConst478 = (2.0 * (1.06935835 - self.fConst443));
		self.fConst479 = (self.fConst443 + 53.5361519);
		self.fConst480 = (((self.fConst453 + -3.18972731) / self.fConst452) + 4.07678175);
		self.fConst481 = (1.0 / self.fConst455);
		self.fConst482 = (2.0 * (4.07678175 - self.fConst481));
		self.fConst483 = (self.fConst462 + 0.000407678192);
		self.fConst484 = (((self.fConst453 + -0.743130445) / self.fConst452) + 1.4500711);
		self.fConst485 = (2.0 * (1.4500711 - self.fConst481));
		self.fConst486 = (self.fConst459 + 1.4500711);
		self.fConst487 = (((self.fConst453 + -0.157482162) / self.fConst452) + 0.935140193);
		self.fConst488 = (2.0 * (0.935140193 - self.fConst481));
		self.fConst489 = (self.fConst456 + 0.935140193);
		self.fConst490 = f32::tan((123.692459 / self.fConst0));
		self.fConst491 = (1.0 / self.fConst490);
		self.fConst492 = (1.0 / (((self.fConst491 + 0.157482162) / self.fConst490) + 0.935140193));
		self.fConst493 = mydsp_faustpower2_f(self.fConst490);
		self.fConst494 = (50.0638084 / self.fConst493);
		self.fConst495 = (2.0 * (0.935140193 - self.fConst494));
		self.fConst496 = (1.0 / (((self.fConst491 + 0.743130445) / self.fConst490) + 1.4500711));
		self.fConst497 = (11.0520525 / self.fConst493);
		self.fConst498 = (2.0 * (1.4500711 - self.fConst497));
		self.fConst499 = (1.0 / (((self.fConst491 + 3.18972731) / self.fConst490) + 4.07678175));
		self.fConst500 = (0.00176617282 / self.fConst493);
		self.fConst501 = (2.0 * (0.000407678192 - self.fConst500));
		self.fConst502 = (1.0 / (((self.fConst453 + 0.168404877) / self.fConst452) + 1.06935835));
		self.fConst503 = (2.0 * (53.5361519 - self.fConst481));
		self.fConst504 = (1.0 / (((self.fConst453 + 0.51247865) / self.fConst452) + 0.689621389));
		self.fConst505 = (2.0 * (7.62173128 - self.fConst481));
		self.fConst506 = (1.0 / (((self.fConst453 + 0.782413065) / self.fConst452) + 0.245291501));
		self.fConst507 = (9.99999975e-05 / self.fConst455);
		self.fConst508 = (2.0 * (0.000433227193 - self.fConst507));
		self.fConst509 = (((self.fConst453 + -0.782413065) / self.fConst452) + 0.245291501);
		self.fConst510 = (2.0 * (0.245291501 - self.fConst481));
		self.fConst511 = (self.fConst507 + 0.000433227193);
		self.fConst512 = (((self.fConst453 + -0.51247865) / self.fConst452) + 0.689621389);
		self.fConst513 = (2.0 * (0.689621389 - self.fConst481));
		self.fConst514 = (self.fConst481 + 7.62173128);
		self.fConst515 = (((self.fConst453 + -0.168404877) / self.fConst452) + 1.06935835);
		self.fConst516 = (2.0 * (1.06935835 - self.fConst481));
		self.fConst517 = (self.fConst481 + 53.5361519);
		self.fConst518 = (((self.fConst491 + -3.18972731) / self.fConst490) + 4.07678175);
		self.fConst519 = (1.0 / self.fConst493);
		self.fConst520 = (2.0 * (4.07678175 - self.fConst519));
		self.fConst521 = (self.fConst500 + 0.000407678192);
		self.fConst522 = (((self.fConst491 + -0.743130445) / self.fConst490) + 1.4500711);
		self.fConst523 = (2.0 * (1.4500711 - self.fConst519));
		self.fConst524 = (self.fConst497 + 1.4500711);
		self.fConst525 = (((self.fConst491 + -0.157482162) / self.fConst490) + 0.935140193);
		self.fConst526 = (2.0 * (0.935140193 - self.fConst519));
		self.fConst527 = (self.fConst494 + 0.935140193);
		self.fConst528 = (1.0 / (((self.fConst491 + 0.168404877) / self.fConst490) + 1.06935835));
		self.fConst529 = (2.0 * (53.5361519 - self.fConst519));
		self.fConst530 = (1.0 / (((self.fConst491 + 0.51247865) / self.fConst490) + 0.689621389));
		self.fConst531 = (2.0 * (7.62173128 - self.fConst519));
		self.fConst532 = (1.0 / (((self.fConst491 + 0.782413065) / self.fConst490) + 0.245291501));
		self.fConst533 = (9.99999975e-05 / self.fConst493);
		self.fConst534 = (2.0 * (0.000433227193 - self.fConst533));
		self.fConst535 = (((self.fConst491 + -0.782413065) / self.fConst490) + 0.245291501);
		self.fConst536 = (2.0 * (0.245291501 - self.fConst519));
		self.fConst537 = (self.fConst533 + 0.000433227193);
		self.fConst538 = (((self.fConst491 + -0.51247865) / self.fConst490) + 0.689621389);
		self.fConst539 = (2.0 * (0.689621389 - self.fConst519));
		self.fConst540 = (self.fConst519 + 7.62173128);
		self.fConst541 = (((self.fConst491 + -0.168404877) / self.fConst490) + 1.06935835);
		self.fConst542 = (2.0 * (1.06935835 - self.fConst519));
		self.fConst543 = (self.fConst519 + 53.5361519);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.openVerticalBox("virtualAnalogLab");
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("0x00");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's oscillators.lib for documentation and references");
		ui_interface.openVerticalBox("VIRTUAL ANALOG OSCILLATORS");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("Signal Levels");
		ui_interface.declare(&mut self.fVslider1, "0", "");
		ui_interface.declare(&mut self.fVslider1, "style", "vslider");
		ui_interface.addVerticalSlider("Sawtooth", &mut self.fVslider1, 1.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openVerticalBox("Pulse Train");
		ui_interface.declare(&mut self.fCheckbox2, "0", "");
		ui_interface.declare(&mut self.fCheckbox2, "tooltip", "When checked, use 3rd-order aliasing suppression (up from 2)  See if you can hear a difference with the freq high and swept");
		ui_interface.addCheckButton("Order 3", &mut self.fCheckbox2);
		ui_interface.declare(&mut self.fVslider7, "1", "");
		ui_interface.declare(&mut self.fVslider7, "style", "vslider");
		ui_interface.addVerticalSlider("0x00", &mut self.fVslider7, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fVslider8, "2", "");
		ui_interface.declare(&mut self.fVslider8, "style", "knob");
		ui_interface.addVerticalSlider("Duty Cycle", &mut self.fVslider8, 0.5, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fVslider5, "2", "");
		ui_interface.declare(&mut self.fVslider5, "style", "vslider");
		ui_interface.addVerticalSlider("Square", &mut self.fVslider5, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fVslider6, "3", "");
		ui_interface.declare(&mut self.fVslider6, "style", "vslider");
		ui_interface.addVerticalSlider("Triangle", &mut self.fVslider6, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fVslider9, "4", "");
		ui_interface.declare(&mut self.fVslider9, "style", "vslider");
		ui_interface.declare(&mut self.fVslider9, "tooltip", "Pink Noise (or 1/f noise) is   Constant-Q Noise, meaning that it has the same total power in every octave   (uses only amplitude controls)");
		ui_interface.addVerticalSlider("Pink Noise", &mut self.fVslider9, 0.0, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fVslider0, "5", "");
		ui_interface.declare(&mut self.fVslider0, "style", "vslider");
		ui_interface.addVerticalSlider("Ext Input", &mut self.fVslider0, 0.0, 0.0, 1.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("Signal Parameters");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openVerticalBox("0x00");
		ui_interface.declare(&mut self.fHslider3, "1", "");
		ui_interface.declare(&mut self.fHslider3, "style", "hslider");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Sawtooth waveform amplitude");
		ui_interface.declare(&mut self.fHslider3, "unit", "dB");
		ui_interface.addHorizontalSlider("Mix Amplitude", &mut self.fHslider3, -20.0, -120.0, 10.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider4, "2", "");
		ui_interface.declare(&mut self.fHslider4, "style", "hslider");
		ui_interface.declare(&mut self.fHslider4, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface.declare(&mut self.fHslider4, "unit", "PK");
		ui_interface.addHorizontalSlider("Frequency", &mut self.fHslider4, 49.0, 1.0, 88.0, 0.01);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fVslider3, "3", "");
		ui_interface.declare(&mut self.fVslider3, "style", "knob");
		ui_interface.declare(&mut self.fVslider3, "tooltip", "Percentange frequency-shift up or down for second oscillator");
		ui_interface.declare(&mut self.fVslider3, "unit", "%%");
		ui_interface.addVerticalSlider("Detuning 1", &mut self.fVslider3, -0.10000000000000001, -10.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fVslider4, "4", "");
		ui_interface.declare(&mut self.fVslider4, "style", "knob");
		ui_interface.declare(&mut self.fVslider4, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface.declare(&mut self.fVslider4, "unit", "%%");
		ui_interface.addVerticalSlider("Detuning 2", &mut self.fVslider4, 0.10000000000000001, -10.0, 10.0, 0.01);
		ui_interface.declare(&mut self.fVslider2, "5", "");
		ui_interface.declare(&mut self.fVslider2, "scale", "log");
		ui_interface.declare(&mut self.fVslider2, "style", "knob");
		ui_interface.declare(&mut self.fVslider2, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface.declare(&mut self.fVslider2, "unit", "sec");
		ui_interface.addVerticalSlider("Portamento", &mut self.fVslider2, 0.10000000000000001, 0.001, 10.0, 0.001);
		ui_interface.declare(&mut self.fEntry0, "6", "");
		ui_interface.declare(&mut self.fEntry0, "tooltip", "Order of sawtooth aliasing  suppression");
		ui_interface.addNumEntry("Saw Order", &mut self.fEntry0, 2.0, 1.0, 4.0, 1.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "2", "");
		ui_interface.openVerticalBox("0x00");
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's   vaeffects.lib for info and references");
		ui_interface.openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the Moog VCF   has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fCheckbox1, "1", "");
		ui_interface.declare(&mut self.fCheckbox1, "tooltip", "Select moog_vcf_2b (two-biquad)   implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface.addCheckButton("Use Biquads", &mut self.fCheckbox1);
		ui_interface.declare(&mut self.fCheckbox3, "2", "");
		ui_interface.declare(&mut self.fCheckbox3, "tooltip", "If using biquads, make   them normalized ladders (moog_vcf_2bn)");
		ui_interface.addCheckButton("Normalized Ladders", &mut self.fCheckbox3);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fHslider5, "1", "");
		ui_interface.declare(&mut self.fHslider5, "tooltip", "The VCF resonates   at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).   The VCF response is flat below the corner frequency, and rolls off -24 dB per   octave above.");
		ui_interface.declare(&mut self.fHslider5, "unit", "PK");
		ui_interface.addHorizontalSlider("Corner Frequency", &mut self.fHslider5, 25.0, 1.0, 88.0, 0.01);
		ui_interface.declare(&mut self.fHslider6, "2", "");
		ui_interface.declare(&mut self.fHslider6, "style", "knob");
		ui_interface.declare(&mut self.fHslider6, "tooltip", "Amount of   resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface.addHorizontalSlider("Corner Resonance", &mut self.fHslider6, 0.90000000000000002, 0.0, 1.0, 0.01);
		ui_interface.declare(&mut self.fHslider2, "3", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "output level in decibels");
		ui_interface.declare(&mut self.fHslider2, "unit", "dB");
		ui_interface.addHorizontalSlider("VCF Output Level", &mut self.fHslider2, 5.0, -60.0, 20.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openVerticalBox("0x00");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.declare(&mut self.fDummy, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface.openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface.declare(&mut self.fVbargraph14, "0", "");
		ui_interface.declare(&mut self.fVbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph14, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e60fc00", &mut self.fVbargraph14, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph13, "1", "");
		ui_interface.declare(&mut self.fVbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph13, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e5fa320", &mut self.fVbargraph13, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph12, "2", "");
		ui_interface.declare(&mut self.fVbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph12, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e5d81d0", &mut self.fVbargraph12, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph11, "3", "");
		ui_interface.declare(&mut self.fVbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph11, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e5b6080", &mut self.fVbargraph11, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph10, "4", "");
		ui_interface.declare(&mut self.fVbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph10, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e593f30", &mut self.fVbargraph10, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph9, "5", "");
		ui_interface.declare(&mut self.fVbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph9, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e571de0", &mut self.fVbargraph9, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph8, "6", "");
		ui_interface.declare(&mut self.fVbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph8, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e54fc90", &mut self.fVbargraph8, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph7, "7", "");
		ui_interface.declare(&mut self.fVbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph7, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e52db40", &mut self.fVbargraph7, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph6, "8", "");
		ui_interface.declare(&mut self.fVbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph6, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e50b9f0", &mut self.fVbargraph6, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph5, "9", "");
		ui_interface.declare(&mut self.fVbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph5, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e4e5920", &mut self.fVbargraph5, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph4, "10", "");
		ui_interface.declare(&mut self.fVbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph4, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e4c37d0", &mut self.fVbargraph4, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph3, "11", "");
		ui_interface.declare(&mut self.fVbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph3, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e4a1680", &mut self.fVbargraph3, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph2, "12", "");
		ui_interface.declare(&mut self.fVbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph2, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e47f530", &mut self.fVbargraph2, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph1, "13", "");
		ui_interface.declare(&mut self.fVbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph1, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e45d3e0", &mut self.fVbargraph1, -50.0, 10.0);
		ui_interface.declare(&mut self.fVbargraph0, "14", "");
		ui_interface.declare(&mut self.fVbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface.declare(&mut self.fVbargraph0, "unit", "dB");
		ui_interface.addVerticalBargraph("0x7f841e43a200", &mut self.fVbargraph0, -50.0, 10.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface.declare(&mut self.fHslider1, "0", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface.declare(&mut self.fHslider1, "unit", "ms");
		ui_interface.addHorizontalSlider("Level Averaging Time", &mut self.fHslider1, 100.0, 1.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider0, "1", "");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Level offset in decibels");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Level dB Offset", &mut self.fHslider0, 50.0, -50.0, 100.0, 1.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut fSlow0: f32 = (self.fHslider0 as f32);
		let mut fSlow1: f32 = f32::exp((0.0 - (self.fConst1 / (self.fHslider1 as f32))));
		let mut fSlow2: f32 = (1.0 - fSlow1);
		let mut iSlow3: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow4: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fHslider2 as f32))));
		let mut iSlow5: i32 = ((self.fCheckbox1 as f32) as i32);
		let mut fSlow6: f32 = (self.fVslider0 as f32);
		let mut fSlow7: f32 = (0.00100000005 * f32::powf(10.0, (0.0500000007 * (self.fHslider3 as f32))));
		let mut fSlow8: f32 = (0.333333343 * (self.fVslider1 as f32));
		let mut iSlow9: i32 = (((self.fEntry0 as f32) + -1.0) as i32);
		let mut iSlow10: i32 = ((iSlow9 >= 2) as i32);
		let mut iSlow11: i32 = ((iSlow9 >= 1) as i32);
		let mut fSlow12: f32 = f32::exp((0.0 - (self.fConst14 / (self.fVslider2 as f32))));
		let mut fSlow13: f32 = (440.0 * (f32::powf(2.0, (0.0833333358 * ((self.fHslider4 as f32) + -49.0))) * (1.0 - fSlow12)));
		let mut iSlow14: i32 = ((iSlow9 >= 3) as i32);
		let mut fSlow15: f32 = (1.0 - (0.00999999978 * (self.fVslider3 as f32)));
		let mut fSlow16: f32 = ((0.00999999978 * (self.fVslider4 as f32)) + 1.0);
		let mut fSlow17: f32 = (self.fConst18 * (self.fVslider5 as f32));
		let mut fSlow18: f32 = (self.fConst20 * (self.fVslider6 as f32));
		let mut fSlow19: f32 = (self.fConst0 * (self.fVslider7 as f32));
		let mut fSlow20: f32 = (self.fCheckbox2 as f32);
		let mut fSlow21: f32 = (0.0833333358 * (1.0 - fSlow20));
		let mut fSlow22: f32 = (0.00999999978 * (self.fVslider8 as f32));
		let mut fSlow23: f32 = (self.fConst21 * fSlow20);
		let mut fSlow24: f32 = (self.fVslider9 as f32);
		let mut fSlow25: f32 = (0.439999998 * f32::powf(2.0, (0.0833333358 * ((self.fHslider5 as f32) + -49.0))));
		let mut fSlow26: f32 = (self.fHslider6 as f32);
		let mut fSlow27: f32 = (0.0 - (4.0 * f32::max(0.0, f32::min(mydsp_faustpower4_f(fSlow26), 0.999998987))));
		let mut iSlow28: i32 = ((self.fCheckbox3 as f32) as i32);
		let mut fSlow29: f32 = f32::min(1.41419947, (1.41421354 * fSlow26));
		let mut fSlow30: f32 = (fSlow29 * (fSlow29 + 1.41421354));
		let mut fSlow31: f32 = (1.41421354 * fSlow29);
		let mut fSlow32: f32 = (fSlow31 + 2.0);
		let mut fSlow33: f32 = (fSlow29 * (fSlow29 + -1.41421354));
		let mut fSlow34: f32 = (2.0 - fSlow31);
		let mut fSlow35: f32 = mydsp_faustpower2_f((1.41419947 * fSlow26));
		let mut fSlow36: f32 = (1.99997997 * fSlow26);
		let mut fSlow37: f32 = (fSlow35 + fSlow36);
		let mut fSlow38: f32 = (fSlow36 + 2.0);
		let mut fSlow39: f32 = (2.0 - fSlow36);
		let mut i: i32 = 0;
		loop {
			self.iVec0[0] = 1;
			self.fRec4[0] = (fSlow4 + (0.999000013 * self.fRec4[1]));
			self.fRec10[0] = (fSlow7 + (0.999000013 * self.fRec10[1]));
			self.fRec12[0] = (fSlow13 + (fSlow12 * self.fRec12[1]));
			let mut fTemp0: f32 = f32::max(20.0, f32::abs(self.fRec12[0]));
			self.fVec1[0] = fTemp0;
			let mut fTemp1: f32 = (self.fRec11[1] + (self.fConst14 * self.fVec1[1]));
			self.fRec11[0] = (fTemp1 - f32::floor(fTemp1));
			let mut fTemp2: f32 = (2.0 * self.fRec11[0]);
			let mut fTemp3: f32 = (fTemp2 + -1.0);
			let mut fTemp4: f32 = mydsp_faustpower2_f(fTemp3);
			self.fVec2[0] = fTemp4;
			let mut fTemp5: f32 = mydsp_faustpower3_f(fTemp3);
			self.fVec3[0] = (fTemp5 + (1.0 - fTemp2));
			let mut fTemp6: f32 = ((fTemp5 + (1.0 - (fTemp2 + self.fVec3[1]))) / fTemp0);
			self.fVec4[0] = fTemp6;
			let mut fTemp7: f32 = (fTemp4 * (fTemp4 + -2.0));
			self.fVec5[0] = fTemp7;
			let mut fTemp8: f32 = ((fTemp7 - self.fVec5[1]) / fTemp0);
			self.fVec6[0] = fTemp8;
			let mut fTemp9: f32 = ((fTemp8 - self.fVec6[1]) / fTemp0);
			self.fVec7[0] = fTemp9;
			let mut fTemp10: f32 = (fSlow15 * self.fRec12[0]);
			let mut fTemp11: f32 = f32::max(20.0, f32::abs(fTemp10));
			self.fVec8[0] = fTemp11;
			let mut fTemp12: f32 = (self.fRec13[1] + (self.fConst14 * self.fVec8[1]));
			self.fRec13[0] = (fTemp12 - f32::floor(fTemp12));
			let mut fTemp13: f32 = (2.0 * self.fRec13[0]);
			let mut fTemp14: f32 = (fTemp13 + -1.0);
			let mut fTemp15: f32 = mydsp_faustpower2_f(fTemp14);
			self.fVec9[0] = fTemp15;
			let mut fTemp16: f32 = mydsp_faustpower3_f(fTemp14);
			self.fVec10[0] = (fTemp16 + (1.0 - fTemp13));
			let mut fTemp17: f32 = ((fTemp16 + (1.0 - (fTemp13 + self.fVec10[1]))) / fTemp11);
			self.fVec11[0] = fTemp17;
			let mut fTemp18: f32 = (fTemp15 * (fTemp15 + -2.0));
			self.fVec12[0] = fTemp18;
			let mut fTemp19: f32 = ((fTemp18 - self.fVec12[1]) / fTemp11);
			self.fVec13[0] = fTemp19;
			let mut fTemp20: f32 = ((fTemp19 - self.fVec13[1]) / fTemp11);
			self.fVec14[0] = fTemp20;
			let mut fTemp21: f32 = (fSlow16 * self.fRec12[0]);
			let mut fTemp22: f32 = f32::max(20.0, f32::abs(fTemp21));
			self.fVec15[0] = fTemp22;
			let mut fTemp23: f32 = (self.fRec14[1] + (self.fConst14 * self.fVec15[1]));
			self.fRec14[0] = (fTemp23 - f32::floor(fTemp23));
			let mut fTemp24: f32 = (2.0 * self.fRec14[0]);
			let mut fTemp25: f32 = (fTemp24 + -1.0);
			let mut fTemp26: f32 = mydsp_faustpower2_f(fTemp25);
			self.fVec16[0] = fTemp26;
			let mut fTemp27: f32 = mydsp_faustpower3_f(fTemp25);
			self.fVec17[0] = (fTemp27 + (1.0 - fTemp24));
			let mut fTemp28: f32 = ((fTemp27 + (1.0 - (fTemp24 + self.fVec17[1]))) / fTemp22);
			self.fVec18[0] = fTemp28;
			let mut fTemp29: f32 = (fTemp26 * (fTemp26 + -2.0));
			self.fVec19[0] = fTemp29;
			let mut fTemp30: f32 = ((fTemp29 - self.fVec19[1]) / fTemp22);
			self.fVec20[0] = fTemp30;
			let mut fTemp31: f32 = ((fTemp30 - self.fVec20[1]) / fTemp22);
			self.fVec21[0] = fTemp31;
			let mut fTemp32: f32 = f32::max(self.fRec12[0], 23.4489498);
			let mut fTemp33: f32 = f32::max(20.0, f32::abs(fTemp32));
			self.fVec22[0] = fTemp33;
			let mut fTemp34: f32 = (self.fRec15[1] + (self.fConst14 * self.fVec22[1]));
			self.fRec15[0] = (fTemp34 - f32::floor(fTemp34));
			let mut fTemp35: f32 = (2.0 * self.fRec15[0]);
			let mut fTemp36: f32 = (fTemp35 + -1.0);
			let mut fTemp37: f32 = mydsp_faustpower2_f(fTemp36);
			self.fVec23[0] = fTemp37;
			let mut fTemp38: f32 = (((self.iVec0[1] as f32) * (fTemp37 - self.fVec23[1])) / fTemp33);
			self.fVec24[(self.IOTA & 4095) as usize] = fTemp38;
			let mut fTemp39: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst19 / fTemp32)));
			let mut iTemp40: i32 = (fTemp39 as i32);
			let mut fTemp41: f32 = f32::floor(fTemp39);
			let mut fTemp42: f32 = ((fTemp38 - (self.fVec24[((self.IOTA - iTemp40) & 4095) as usize] * (fTemp41 + (1.0 - fTemp39)))) - ((fTemp39 - fTemp41) * self.fVec24[((self.IOTA - (iTemp40 + 1)) & 4095) as usize]));
			let mut fTemp43: f32 = f32::max(fTemp10, 23.4489498);
			let mut fTemp44: f32 = f32::max(20.0, f32::abs(fTemp43));
			self.fVec25[0] = fTemp44;
			let mut fTemp45: f32 = (self.fRec16[1] + (self.fConst14 * self.fVec25[1]));
			self.fRec16[0] = (fTemp45 - f32::floor(fTemp45));
			let mut fTemp46: f32 = (2.0 * self.fRec16[0]);
			let mut fTemp47: f32 = (fTemp46 + -1.0);
			let mut fTemp48: f32 = mydsp_faustpower2_f(fTemp47);
			self.fVec26[0] = fTemp48;
			let mut fTemp49: f32 = (((self.iVec0[1] as f32) * (fTemp48 - self.fVec26[1])) / fTemp44);
			self.fVec27[(self.IOTA & 4095) as usize] = fTemp49;
			let mut fTemp50: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst19 / fTemp43)));
			let mut iTemp51: i32 = (fTemp50 as i32);
			let mut fTemp52: f32 = f32::floor(fTemp50);
			let mut fTemp53: f32 = ((fTemp49 - (self.fVec27[((self.IOTA - iTemp51) & 4095) as usize] * (fTemp52 + (1.0 - fTemp50)))) - ((fTemp50 - fTemp52) * self.fVec27[((self.IOTA - (iTemp51 + 1)) & 4095) as usize]));
			let mut fTemp54: f32 = f32::max(fTemp21, 23.4489498);
			let mut fTemp55: f32 = f32::max(20.0, f32::abs(fTemp54));
			self.fVec28[0] = fTemp55;
			let mut fTemp56: f32 = (self.fRec17[1] + (self.fConst14 * self.fVec28[1]));
			self.fRec17[0] = (fTemp56 - f32::floor(fTemp56));
			let mut fTemp57: f32 = (2.0 * self.fRec17[0]);
			let mut fTemp58: f32 = (fTemp57 + -1.0);
			let mut fTemp59: f32 = mydsp_faustpower2_f(fTemp58);
			self.fVec29[0] = fTemp59;
			let mut fTemp60: f32 = (((self.iVec0[1] as f32) * (fTemp59 - self.fVec29[1])) / fTemp55);
			self.fVec30[(self.IOTA & 4095) as usize] = fTemp60;
			let mut fTemp61: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst19 / fTemp54)));
			let mut iTemp62: i32 = (fTemp61 as i32);
			let mut fTemp63: f32 = f32::floor(fTemp61);
			let mut fTemp64: f32 = ((fTemp60 - (self.fVec30[((self.IOTA - iTemp62) & 4095) as usize] * (fTemp63 + (1.0 - fTemp61)))) - ((fTemp61 - fTemp63) * self.fVec30[((self.IOTA - (iTemp62 + 1)) & 4095) as usize]));
			self.fRec18[0] = ((self.fConst15 * fTemp42) + (0.999000013 * self.fRec18[1]));
			self.fRec19[0] = ((self.fConst15 * fTemp53) + (0.999000013 * self.fRec19[1]));
			self.fRec20[0] = ((self.fConst15 * fTemp64) + (0.999000013 * self.fRec20[1]));
			self.fRec21[0] = (fSlow22 + (0.99000001 * self.fRec21[1]));
			let mut fTemp65: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst0 * (self.fRec21[0] / fTemp32))));
			let mut fTemp66: f32 = f32::floor(fTemp65);
			let mut fTemp67: f32 = (fTemp66 + (1.0 - fTemp65));
			let mut iTemp68: i32 = (fTemp65 as i32);
			let mut fTemp69: f32 = (fTemp65 - fTemp66);
			let mut iTemp70: i32 = (iTemp68 + 1);
			let mut fTemp71: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst0 * (self.fRec21[0] / fTemp43))));
			let mut fTemp72: f32 = f32::floor(fTemp71);
			let mut fTemp73: f32 = (fTemp72 + (1.0 - fTemp71));
			let mut iTemp74: i32 = (fTemp71 as i32);
			let mut fTemp75: f32 = (fTemp71 - fTemp72);
			let mut iTemp76: i32 = (iTemp74 + 1);
			let mut fTemp77: f32 = f32::max(0.0, f32::min(2047.0, (self.fConst0 * (self.fRec21[0] / fTemp54))));
			let mut fTemp78: f32 = f32::floor(fTemp77);
			let mut fTemp79: f32 = (fTemp78 + (1.0 - fTemp77));
			let mut iTemp80: i32 = (fTemp77 as i32);
			let mut fTemp81: f32 = (fTemp77 - fTemp78);
			let mut iTemp82: i32 = (iTemp80 + 1);
			let mut fTemp83: f32 = mydsp_faustpower3_f(fTemp36);
			self.fVec31[0] = (fTemp83 + (1.0 - fTemp35));
			let mut fTemp84: f32 = ((fTemp83 + (1.0 - (fTemp35 + self.fVec31[1]))) / fTemp33);
			self.fVec32[0] = fTemp84;
			let mut fTemp85: f32 = (((self.iVec0[2] as f32) * (fTemp84 - self.fVec32[1])) / fTemp33);
			self.fVec33[(self.IOTA & 4095) as usize] = fTemp85;
			let mut fTemp86: f32 = mydsp_faustpower3_f(fTemp47);
			self.fVec34[0] = (fTemp86 + (1.0 - fTemp46));
			let mut fTemp87: f32 = ((fTemp86 + (1.0 - (fTemp46 + self.fVec34[1]))) / fTemp44);
			self.fVec35[0] = fTemp87;
			let mut fTemp88: f32 = (((self.iVec0[2] as f32) * (fTemp87 - self.fVec35[1])) / fTemp44);
			self.fVec36[(self.IOTA & 4095) as usize] = fTemp88;
			let mut fTemp89: f32 = mydsp_faustpower3_f(fTemp58);
			self.fVec37[0] = (fTemp89 + (1.0 - fTemp57));
			let mut fTemp90: f32 = ((fTemp89 + (1.0 - (fTemp57 + self.fVec37[1]))) / fTemp55);
			self.fVec38[0] = fTemp90;
			let mut fTemp91: f32 = (((self.iVec0[2] as f32) * (fTemp90 - self.fVec38[1])) / fTemp55);
			self.fVec39[(self.IOTA & 4095) as usize] = fTemp91;
			self.iRec23[0] = ((1103515245 * self.iRec23[1]) + 12345);
			self.fRec22[0] = (((0.522189379 * self.fRec22[3]) + ((4.65661287e-10 * (self.iRec23[0] as f32)) + (2.49495602 * self.fRec22[1]))) - (2.0172658 * self.fRec22[2]));
			let mut fTemp92: f32 = ((fSlow6 * (inputs[0][i as usize] as f32)) + (self.fRec10[0] * (((((fSlow8 * ((if (iSlow10 as i32 == 1) { if (iSlow14 as i32 == 1) { (self.fConst17 * (((self.iVec0[3] as f32) * (fTemp9 - self.fVec7[1])) / fTemp0)) } else { (self.fConst16 * (((self.iVec0[2] as f32) * (fTemp6 - self.fVec4[1])) / fTemp0)) } } else { if (iSlow11 as i32 == 1) { (self.fConst15 * (((self.iVec0[1] as f32) * (fTemp4 - self.fVec2[1])) / fTemp0)) } else { fTemp3 } } + if (iSlow10 as i32 == 1) { if (iSlow14 as i32 == 1) { (self.fConst17 * (((self.iVec0[3] as f32) * (fTemp20 - self.fVec14[1])) / fTemp11)) } else { (self.fConst16 * (((self.iVec0[2] as f32) * (fTemp17 - self.fVec11[1])) / fTemp11)) } } else { if (iSlow11 as i32 == 1) { (self.fConst15 * (((self.iVec0[1] as f32) * (fTemp15 - self.fVec9[1])) / fTemp11)) } else { fTemp14 } }) + if (iSlow10 as i32 == 1) { if (iSlow14 as i32 == 1) { (self.fConst17 * (((self.iVec0[3] as f32) * (fTemp31 - self.fVec21[1])) / fTemp22)) } else { (self.fConst16 * (((self.iVec0[2] as f32) * (fTemp28 - self.fVec18[1])) / fTemp22)) } } else { if (iSlow11 as i32 == 1) { (self.fConst15 * (((self.iVec0[1] as f32) * (fTemp26 - self.fVec16[1])) / fTemp22)) } else { fTemp25 } })) + (fSlow17 * ((fTemp42 + fTemp53) + fTemp64))) + (fSlow18 * (self.fRec12[0] * ((self.fRec18[0] + (fSlow15 * self.fRec19[0])) + (fSlow16 * self.fRec20[0]))))) + (fSlow19 * ((fSlow21 * ((((fTemp38 - (fTemp67 * self.fVec24[((self.IOTA - iTemp68) & 4095) as usize])) - (fTemp69 * self.fVec24[((self.IOTA - iTemp70) & 4095) as usize])) + ((fTemp49 - (fTemp73 * self.fVec27[((self.IOTA - iTemp74) & 4095) as usize])) - (fTemp75 * self.fVec27[((self.IOTA - iTemp76) & 4095) as usize]))) + ((fTemp60 - (fTemp79 * self.fVec30[((self.IOTA - iTemp80) & 4095) as usize])) - (fTemp81 * self.fVec30[((self.IOTA - iTemp82) & 4095) as usize])))) + (fSlow23 * ((((fTemp85 - (self.fVec33[((self.IOTA - iTemp68) & 4095) as usize] * fTemp67)) - (fTemp69 * self.fVec33[((self.IOTA - iTemp70) & 4095) as usize])) + ((fTemp88 - (self.fVec36[((self.IOTA - iTemp74) & 4095) as usize] * fTemp73)) - (fTemp75 * self.fVec36[((self.IOTA - iTemp76) & 4095) as usize]))) + ((fTemp91 - (self.fVec39[((self.IOTA - iTemp80) & 4095) as usize] * fTemp79)) - (fTemp81 * self.fVec39[((self.IOTA - iTemp82) & 4095) as usize]))))))) + (fSlow24 * (((0.0499220341 * self.fRec22[0]) + (0.0506126992 * self.fRec22[2])) - ((0.0959935337 * self.fRec22[1]) + (0.00440878607 * self.fRec22[3])))))));
			let mut fTemp93: f32 = if (iSlow3 as i32 == 1) { 0.0 } else { fTemp92 };
			self.fRec24[0] = (fSlow25 + (0.999000013 * self.fRec24[1]));
			let mut fTemp94: f32 = (self.fConst22 * self.fRec24[0]);
			let mut fTemp95: f32 = (1.0 - fTemp94);
			self.fRec9[0] = (fTemp93 + ((fTemp95 * self.fRec9[1]) + (fSlow27 * self.fRec5[1])));
			self.fRec8[0] = (self.fRec9[0] + (fTemp95 * self.fRec8[1]));
			self.fRec7[0] = (self.fRec8[0] + (fTemp95 * self.fRec7[1]));
			self.fRec6[0] = (self.fRec7[0] + (self.fRec6[1] * fTemp95));
			self.fRec5[0] = (self.fRec6[0] * f32::powf(fTemp94, 4.0));
			self.fRec27[0] = (fSlow25 + (0.999000013 * self.fRec27[1]));
			let mut fTemp96: f32 = f32::tan((self.fConst23 * f32::max(20.0, f32::min(10000.0, self.fRec27[0]))));
			let mut fTemp97: f32 = (1.0 / fTemp96);
			let mut fTemp98: f32 = (1.0 - (1.0 / mydsp_faustpower2_f(fTemp96)));
			let mut fTemp99: f32 = (fSlow30 + (((fSlow32 + fTemp97) / fTemp96) + 1.0));
			self.fRec26[0] = (fTemp93 - (((self.fRec26[2] * (fSlow30 + (((fTemp97 - fSlow32) / fTemp96) + 1.0))) + (2.0 * (self.fRec26[1] * (fSlow30 + fTemp98)))) / fTemp99));
			let mut fTemp100: f32 = (fSlow33 + (((fSlow34 + fTemp97) / fTemp96) + 1.0));
			self.fRec25[0] = (((self.fRec26[2] + (self.fRec26[0] + (2.0 * self.fRec26[1]))) / fTemp99) - (((self.fRec25[2] * (fSlow33 + (((fTemp97 - fSlow34) / fTemp96) + 1.0))) + (2.0 * (self.fRec25[1] * (fSlow33 + fTemp98)))) / fTemp100));
			let mut fTemp101: f32 = f32::tan((self.fConst23 * f32::max(self.fRec27[0], 20.0)));
			let mut fTemp102: f32 = (1.0 / fTemp101);
			let mut fTemp103: f32 = (fSlow37 + (((fSlow38 + fTemp102) / fTemp101) + 1.0));
			let mut fTemp104: f32 = ((fSlow37 + (1.0 - ((fSlow38 - fTemp102) / fTemp101))) / fTemp103);
			let mut fTemp105: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp104));
			let mut fTemp106: f32 = (1.0 - mydsp_faustpower2_f(fTemp105));
			let mut fTemp107: f32 = f32::sqrt(f32::max(0.0, fTemp106));
			let mut fTemp108: f32 = ((self.fRec28[1] * (0.0 - fTemp105)) + (fTemp93 * fTemp107));
			let mut fTemp109: f32 = (1.0 - (1.0 / mydsp_faustpower2_f(fTemp101)));
			let mut fTemp110: f32 = (fSlow37 + fTemp109);
			let mut fTemp111: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp110 / (fTemp103 * (fTemp104 + 1.0))))));
			let mut fTemp112: f32 = (1.0 - mydsp_faustpower2_f(fTemp111));
			let mut fTemp113: f32 = f32::sqrt(f32::max(0.0, fTemp112));
			self.fRec30[0] = ((self.fRec30[1] * (0.0 - fTemp111)) + (fTemp108 * fTemp113));
			self.fRec28[0] = ((fTemp108 * fTemp111) + (self.fRec30[1] * fTemp113));
			let mut fRec29: f32 = self.fRec30[0];
			let mut fTemp114: f32 = (1.0 - (fTemp110 / fTemp103));
			let mut fTemp115: f32 = f32::sqrt(fTemp106);
			let mut fTemp116: f32 = ((((fTemp93 * fTemp105) + (self.fRec28[1] * fTemp107)) + (2.0 * ((self.fRec28[0] * fTemp114) / fTemp115))) + ((fRec29 * ((1.0 - fTemp104) - (2.0 * (fTemp111 * fTemp114)))) / (fTemp115 * f32::sqrt(fTemp112))));
			let mut fTemp117: f32 = (fSlow35 + ((((fSlow39 + fTemp102) / fTemp101) + 1.0) - fSlow36));
			let mut fTemp118: f32 = ((fSlow35 + ((((fTemp102 - fSlow39) / fTemp101) + 1.0) - fSlow36)) / fTemp117);
			let mut fTemp119: f32 = f32::max(-0.999899983, f32::min(0.999899983, fTemp118));
			let mut fTemp120: f32 = (1.0 - mydsp_faustpower2_f(fTemp119));
			let mut fTemp121: f32 = f32::sqrt(f32::max(0.0, fTemp120));
			let mut fTemp122: f32 = ((self.fRec31[1] * (0.0 - fTemp119)) + ((fTemp116 * fTemp121) / fTemp103));
			let mut fTemp123: f32 = (fSlow35 + (fTemp109 - fSlow36));
			let mut fTemp124: f32 = f32::max(-0.999899983, f32::min(0.999899983, (2.0 * (fTemp123 / (fTemp117 * (fTemp118 + 1.0))))));
			let mut fTemp125: f32 = (1.0 - mydsp_faustpower2_f(fTemp124));
			let mut fTemp126: f32 = f32::sqrt(f32::max(0.0, fTemp125));
			self.fRec33[0] = ((self.fRec33[1] * (0.0 - fTemp124)) + (fTemp122 * fTemp126));
			self.fRec31[0] = ((fTemp122 * fTemp124) + (self.fRec33[1] * fTemp126));
			let mut fRec32: f32 = self.fRec33[0];
			let mut fTemp127: f32 = (1.0 - (fTemp123 / fTemp117));
			let mut fTemp128: f32 = f32::sqrt(fTemp120);
			let mut fTemp129: f32 = if (iSlow3 as i32 == 1) { fTemp92 } else { (self.fRec4[0] * if (iSlow5 as i32 == 1) { if (iSlow28 as i32 == 1) { ((((((fTemp116 * fTemp119) / fTemp103) + (self.fRec31[1] * fTemp121)) + (2.0 * ((self.fRec31[0] * fTemp127) / fTemp128))) + ((fRec32 * ((1.0 - fTemp118) - (2.0 * (fTemp124 * fTemp127)))) / (fTemp128 * f32::sqrt(fTemp125)))) / fTemp117) } else { ((self.fRec25[2] + (self.fRec25[0] + (2.0 * self.fRec25[1]))) / fTemp100) } } else { self.fRec5[0] }) };
			self.fRec3[0] = (fTemp129 - (self.fConst11 * ((self.fConst24 * self.fRec3[2]) + (self.fConst26 * self.fRec3[1]))));
			self.fRec2[0] = ((self.fConst11 * (((self.fConst13 * self.fRec3[1]) + (self.fConst27 * self.fRec3[0])) + (self.fConst27 * self.fRec3[2]))) - (self.fConst8 * ((self.fConst28 * self.fRec2[2]) + (self.fConst29 * self.fRec2[1]))));
			self.fRec1[0] = ((self.fConst8 * (((self.fConst10 * self.fRec2[1]) + (self.fConst30 * self.fRec2[0])) + (self.fConst30 * self.fRec2[2]))) - (self.fConst4 * ((self.fConst31 * self.fRec1[2]) + (self.fConst32 * self.fRec1[1]))));
			self.fRec0[0] = ((fSlow1 * self.fRec0[1]) + (fSlow2 * f32::abs((self.fConst4 * (((self.fConst7 * self.fRec1[1]) + (self.fConst33 * self.fRec1[0])) + (self.fConst33 * self.fRec1[2]))))));
			self.fVbargraph0 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec0[0])))) as f32);
			self.fRec40[0] = (fTemp129 - (self.fConst50 * ((self.fConst53 * self.fRec40[2]) + (self.fConst54 * self.fRec40[1]))));
			self.fRec39[0] = ((self.fConst50 * (((self.fConst52 * self.fRec40[1]) + (self.fConst55 * self.fRec40[0])) + (self.fConst55 * self.fRec40[2]))) - (self.fConst48 * ((self.fConst56 * self.fRec39[2]) + (self.fConst57 * self.fRec39[1]))));
			self.fRec38[0] = ((self.fConst48 * (((self.fConst49 * self.fRec39[1]) + (self.fConst58 * self.fRec39[0])) + (self.fConst58 * self.fRec39[2]))) - (self.fConst46 * ((self.fConst59 * self.fRec38[2]) + (self.fConst60 * self.fRec38[1]))));
			let mut fTemp130: f32 = (self.fConst46 * (((self.fConst47 * self.fRec38[1]) + (self.fConst61 * self.fRec38[0])) + (self.fConst61 * self.fRec38[2])));
			self.fRec37[0] = (fTemp130 - (self.fConst43 * ((self.fConst62 * self.fRec37[2]) + (self.fConst64 * self.fRec37[1]))));
			self.fRec36[0] = ((self.fConst43 * (((self.fConst45 * self.fRec37[1]) + (self.fConst65 * self.fRec37[0])) + (self.fConst65 * self.fRec37[2]))) - (self.fConst40 * ((self.fConst66 * self.fRec36[2]) + (self.fConst67 * self.fRec36[1]))));
			self.fRec35[0] = ((self.fConst40 * (((self.fConst42 * self.fRec36[1]) + (self.fConst68 * self.fRec36[0])) + (self.fConst68 * self.fRec36[2]))) - (self.fConst36 * ((self.fConst69 * self.fRec35[2]) + (self.fConst70 * self.fRec35[1]))));
			self.fRec34[0] = ((fSlow1 * self.fRec34[1]) + (fSlow2 * f32::abs((self.fConst36 * (((self.fConst39 * self.fRec35[1]) + (self.fConst71 * self.fRec35[0])) + (self.fConst71 * self.fRec35[2]))))));
			self.fVbargraph1 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec34[0])))) as f32);
			self.fRec47[0] = (fTemp130 - (self.fConst88 * ((self.fConst91 * self.fRec47[2]) + (self.fConst92 * self.fRec47[1]))));
			self.fRec46[0] = ((self.fConst88 * (((self.fConst90 * self.fRec47[1]) + (self.fConst93 * self.fRec47[0])) + (self.fConst93 * self.fRec47[2]))) - (self.fConst86 * ((self.fConst94 * self.fRec46[2]) + (self.fConst95 * self.fRec46[1]))));
			self.fRec45[0] = ((self.fConst86 * (((self.fConst87 * self.fRec46[1]) + (self.fConst96 * self.fRec46[0])) + (self.fConst96 * self.fRec46[2]))) - (self.fConst84 * ((self.fConst97 * self.fRec45[2]) + (self.fConst98 * self.fRec45[1]))));
			let mut fTemp131: f32 = (self.fConst84 * (((self.fConst85 * self.fRec45[1]) + (self.fConst99 * self.fRec45[0])) + (self.fConst99 * self.fRec45[2])));
			self.fRec44[0] = (fTemp131 - (self.fConst81 * ((self.fConst100 * self.fRec44[2]) + (self.fConst102 * self.fRec44[1]))));
			self.fRec43[0] = ((self.fConst81 * (((self.fConst83 * self.fRec44[1]) + (self.fConst103 * self.fRec44[0])) + (self.fConst103 * self.fRec44[2]))) - (self.fConst78 * ((self.fConst104 * self.fRec43[2]) + (self.fConst105 * self.fRec43[1]))));
			self.fRec42[0] = ((self.fConst78 * (((self.fConst80 * self.fRec43[1]) + (self.fConst106 * self.fRec43[0])) + (self.fConst106 * self.fRec43[2]))) - (self.fConst74 * ((self.fConst107 * self.fRec42[2]) + (self.fConst108 * self.fRec42[1]))));
			self.fRec41[0] = ((fSlow1 * self.fRec41[1]) + (fSlow2 * f32::abs((self.fConst74 * (((self.fConst77 * self.fRec42[1]) + (self.fConst109 * self.fRec42[0])) + (self.fConst109 * self.fRec42[2]))))));
			self.fVbargraph2 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec41[0])))) as f32);
			self.fRec54[0] = (fTemp131 - (self.fConst126 * ((self.fConst129 * self.fRec54[2]) + (self.fConst130 * self.fRec54[1]))));
			self.fRec53[0] = ((self.fConst126 * (((self.fConst128 * self.fRec54[1]) + (self.fConst131 * self.fRec54[0])) + (self.fConst131 * self.fRec54[2]))) - (self.fConst124 * ((self.fConst132 * self.fRec53[2]) + (self.fConst133 * self.fRec53[1]))));
			self.fRec52[0] = ((self.fConst124 * (((self.fConst125 * self.fRec53[1]) + (self.fConst134 * self.fRec53[0])) + (self.fConst134 * self.fRec53[2]))) - (self.fConst122 * ((self.fConst135 * self.fRec52[2]) + (self.fConst136 * self.fRec52[1]))));
			let mut fTemp132: f32 = (self.fConst122 * (((self.fConst123 * self.fRec52[1]) + (self.fConst137 * self.fRec52[0])) + (self.fConst137 * self.fRec52[2])));
			self.fRec51[0] = (fTemp132 - (self.fConst119 * ((self.fConst138 * self.fRec51[2]) + (self.fConst140 * self.fRec51[1]))));
			self.fRec50[0] = ((self.fConst119 * (((self.fConst121 * self.fRec51[1]) + (self.fConst141 * self.fRec51[0])) + (self.fConst141 * self.fRec51[2]))) - (self.fConst116 * ((self.fConst142 * self.fRec50[2]) + (self.fConst143 * self.fRec50[1]))));
			self.fRec49[0] = ((self.fConst116 * (((self.fConst118 * self.fRec50[1]) + (self.fConst144 * self.fRec50[0])) + (self.fConst144 * self.fRec50[2]))) - (self.fConst112 * ((self.fConst145 * self.fRec49[2]) + (self.fConst146 * self.fRec49[1]))));
			self.fRec48[0] = ((fSlow1 * self.fRec48[1]) + (fSlow2 * f32::abs((self.fConst112 * (((self.fConst115 * self.fRec49[1]) + (self.fConst147 * self.fRec49[0])) + (self.fConst147 * self.fRec49[2]))))));
			self.fVbargraph3 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec48[0])))) as f32);
			self.fRec61[0] = (fTemp132 - (self.fConst164 * ((self.fConst167 * self.fRec61[2]) + (self.fConst168 * self.fRec61[1]))));
			self.fRec60[0] = ((self.fConst164 * (((self.fConst166 * self.fRec61[1]) + (self.fConst169 * self.fRec61[0])) + (self.fConst169 * self.fRec61[2]))) - (self.fConst162 * ((self.fConst170 * self.fRec60[2]) + (self.fConst171 * self.fRec60[1]))));
			self.fRec59[0] = ((self.fConst162 * (((self.fConst163 * self.fRec60[1]) + (self.fConst172 * self.fRec60[0])) + (self.fConst172 * self.fRec60[2]))) - (self.fConst160 * ((self.fConst173 * self.fRec59[2]) + (self.fConst174 * self.fRec59[1]))));
			let mut fTemp133: f32 = (self.fConst160 * (((self.fConst161 * self.fRec59[1]) + (self.fConst175 * self.fRec59[0])) + (self.fConst175 * self.fRec59[2])));
			self.fRec58[0] = (fTemp133 - (self.fConst157 * ((self.fConst176 * self.fRec58[2]) + (self.fConst178 * self.fRec58[1]))));
			self.fRec57[0] = ((self.fConst157 * (((self.fConst159 * self.fRec58[1]) + (self.fConst179 * self.fRec58[0])) + (self.fConst179 * self.fRec58[2]))) - (self.fConst154 * ((self.fConst180 * self.fRec57[2]) + (self.fConst181 * self.fRec57[1]))));
			self.fRec56[0] = ((self.fConst154 * (((self.fConst156 * self.fRec57[1]) + (self.fConst182 * self.fRec57[0])) + (self.fConst182 * self.fRec57[2]))) - (self.fConst150 * ((self.fConst183 * self.fRec56[2]) + (self.fConst184 * self.fRec56[1]))));
			self.fRec55[0] = ((fSlow1 * self.fRec55[1]) + (fSlow2 * f32::abs((self.fConst150 * (((self.fConst153 * self.fRec56[1]) + (self.fConst185 * self.fRec56[0])) + (self.fConst185 * self.fRec56[2]))))));
			self.fVbargraph4 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec55[0])))) as f32);
			self.fRec68[0] = (fTemp133 - (self.fConst202 * ((self.fConst205 * self.fRec68[2]) + (self.fConst206 * self.fRec68[1]))));
			self.fRec67[0] = ((self.fConst202 * (((self.fConst204 * self.fRec68[1]) + (self.fConst207 * self.fRec68[0])) + (self.fConst207 * self.fRec68[2]))) - (self.fConst200 * ((self.fConst208 * self.fRec67[2]) + (self.fConst209 * self.fRec67[1]))));
			self.fRec66[0] = ((self.fConst200 * (((self.fConst201 * self.fRec67[1]) + (self.fConst210 * self.fRec67[0])) + (self.fConst210 * self.fRec67[2]))) - (self.fConst198 * ((self.fConst211 * self.fRec66[2]) + (self.fConst212 * self.fRec66[1]))));
			let mut fTemp134: f32 = (self.fConst198 * (((self.fConst199 * self.fRec66[1]) + (self.fConst213 * self.fRec66[0])) + (self.fConst213 * self.fRec66[2])));
			self.fRec65[0] = (fTemp134 - (self.fConst195 * ((self.fConst214 * self.fRec65[2]) + (self.fConst216 * self.fRec65[1]))));
			self.fRec64[0] = ((self.fConst195 * (((self.fConst197 * self.fRec65[1]) + (self.fConst217 * self.fRec65[0])) + (self.fConst217 * self.fRec65[2]))) - (self.fConst192 * ((self.fConst218 * self.fRec64[2]) + (self.fConst219 * self.fRec64[1]))));
			self.fRec63[0] = ((self.fConst192 * (((self.fConst194 * self.fRec64[1]) + (self.fConst220 * self.fRec64[0])) + (self.fConst220 * self.fRec64[2]))) - (self.fConst188 * ((self.fConst221 * self.fRec63[2]) + (self.fConst222 * self.fRec63[1]))));
			self.fRec62[0] = ((fSlow1 * self.fRec62[1]) + (fSlow2 * f32::abs((self.fConst188 * (((self.fConst191 * self.fRec63[1]) + (self.fConst223 * self.fRec63[0])) + (self.fConst223 * self.fRec63[2]))))));
			self.fVbargraph5 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec62[0])))) as f32);
			self.fRec75[0] = (fTemp134 - (self.fConst240 * ((self.fConst243 * self.fRec75[2]) + (self.fConst244 * self.fRec75[1]))));
			self.fRec74[0] = ((self.fConst240 * (((self.fConst242 * self.fRec75[1]) + (self.fConst245 * self.fRec75[0])) + (self.fConst245 * self.fRec75[2]))) - (self.fConst238 * ((self.fConst246 * self.fRec74[2]) + (self.fConst247 * self.fRec74[1]))));
			self.fRec73[0] = ((self.fConst238 * (((self.fConst239 * self.fRec74[1]) + (self.fConst248 * self.fRec74[0])) + (self.fConst248 * self.fRec74[2]))) - (self.fConst236 * ((self.fConst249 * self.fRec73[2]) + (self.fConst250 * self.fRec73[1]))));
			let mut fTemp135: f32 = (self.fConst236 * (((self.fConst237 * self.fRec73[1]) + (self.fConst251 * self.fRec73[0])) + (self.fConst251 * self.fRec73[2])));
			self.fRec72[0] = (fTemp135 - (self.fConst233 * ((self.fConst252 * self.fRec72[2]) + (self.fConst254 * self.fRec72[1]))));
			self.fRec71[0] = ((self.fConst233 * (((self.fConst235 * self.fRec72[1]) + (self.fConst255 * self.fRec72[0])) + (self.fConst255 * self.fRec72[2]))) - (self.fConst230 * ((self.fConst256 * self.fRec71[2]) + (self.fConst257 * self.fRec71[1]))));
			self.fRec70[0] = ((self.fConst230 * (((self.fConst232 * self.fRec71[1]) + (self.fConst258 * self.fRec71[0])) + (self.fConst258 * self.fRec71[2]))) - (self.fConst226 * ((self.fConst259 * self.fRec70[2]) + (self.fConst260 * self.fRec70[1]))));
			self.fRec69[0] = ((fSlow1 * self.fRec69[1]) + (fSlow2 * f32::abs((self.fConst226 * (((self.fConst229 * self.fRec70[1]) + (self.fConst261 * self.fRec70[0])) + (self.fConst261 * self.fRec70[2]))))));
			self.fVbargraph6 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec69[0])))) as f32);
			self.fRec82[0] = (fTemp135 - (self.fConst278 * ((self.fConst281 * self.fRec82[2]) + (self.fConst282 * self.fRec82[1]))));
			self.fRec81[0] = ((self.fConst278 * (((self.fConst280 * self.fRec82[1]) + (self.fConst283 * self.fRec82[0])) + (self.fConst283 * self.fRec82[2]))) - (self.fConst276 * ((self.fConst284 * self.fRec81[2]) + (self.fConst285 * self.fRec81[1]))));
			self.fRec80[0] = ((self.fConst276 * (((self.fConst277 * self.fRec81[1]) + (self.fConst286 * self.fRec81[0])) + (self.fConst286 * self.fRec81[2]))) - (self.fConst274 * ((self.fConst287 * self.fRec80[2]) + (self.fConst288 * self.fRec80[1]))));
			let mut fTemp136: f32 = (self.fConst274 * (((self.fConst275 * self.fRec80[1]) + (self.fConst289 * self.fRec80[0])) + (self.fConst289 * self.fRec80[2])));
			self.fRec79[0] = (fTemp136 - (self.fConst271 * ((self.fConst290 * self.fRec79[2]) + (self.fConst292 * self.fRec79[1]))));
			self.fRec78[0] = ((self.fConst271 * (((self.fConst273 * self.fRec79[1]) + (self.fConst293 * self.fRec79[0])) + (self.fConst293 * self.fRec79[2]))) - (self.fConst268 * ((self.fConst294 * self.fRec78[2]) + (self.fConst295 * self.fRec78[1]))));
			self.fRec77[0] = ((self.fConst268 * (((self.fConst270 * self.fRec78[1]) + (self.fConst296 * self.fRec78[0])) + (self.fConst296 * self.fRec78[2]))) - (self.fConst264 * ((self.fConst297 * self.fRec77[2]) + (self.fConst298 * self.fRec77[1]))));
			self.fRec76[0] = ((fSlow1 * self.fRec76[1]) + (fSlow2 * f32::abs((self.fConst264 * (((self.fConst267 * self.fRec77[1]) + (self.fConst299 * self.fRec77[0])) + (self.fConst299 * self.fRec77[2]))))));
			self.fVbargraph7 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec76[0])))) as f32);
			self.fRec89[0] = (fTemp136 - (self.fConst316 * ((self.fConst319 * self.fRec89[2]) + (self.fConst320 * self.fRec89[1]))));
			self.fRec88[0] = ((self.fConst316 * (((self.fConst318 * self.fRec89[1]) + (self.fConst321 * self.fRec89[0])) + (self.fConst321 * self.fRec89[2]))) - (self.fConst314 * ((self.fConst322 * self.fRec88[2]) + (self.fConst323 * self.fRec88[1]))));
			self.fRec87[0] = ((self.fConst314 * (((self.fConst315 * self.fRec88[1]) + (self.fConst324 * self.fRec88[0])) + (self.fConst324 * self.fRec88[2]))) - (self.fConst312 * ((self.fConst325 * self.fRec87[2]) + (self.fConst326 * self.fRec87[1]))));
			let mut fTemp137: f32 = (self.fConst312 * (((self.fConst313 * self.fRec87[1]) + (self.fConst327 * self.fRec87[0])) + (self.fConst327 * self.fRec87[2])));
			self.fRec86[0] = (fTemp137 - (self.fConst309 * ((self.fConst328 * self.fRec86[2]) + (self.fConst330 * self.fRec86[1]))));
			self.fRec85[0] = ((self.fConst309 * (((self.fConst311 * self.fRec86[1]) + (self.fConst331 * self.fRec86[0])) + (self.fConst331 * self.fRec86[2]))) - (self.fConst306 * ((self.fConst332 * self.fRec85[2]) + (self.fConst333 * self.fRec85[1]))));
			self.fRec84[0] = ((self.fConst306 * (((self.fConst308 * self.fRec85[1]) + (self.fConst334 * self.fRec85[0])) + (self.fConst334 * self.fRec85[2]))) - (self.fConst302 * ((self.fConst335 * self.fRec84[2]) + (self.fConst336 * self.fRec84[1]))));
			self.fRec83[0] = ((fSlow1 * self.fRec83[1]) + (fSlow2 * f32::abs((self.fConst302 * (((self.fConst305 * self.fRec84[1]) + (self.fConst337 * self.fRec84[0])) + (self.fConst337 * self.fRec84[2]))))));
			self.fVbargraph8 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec83[0])))) as f32);
			self.fRec96[0] = (fTemp137 - (self.fConst354 * ((self.fConst357 * self.fRec96[2]) + (self.fConst358 * self.fRec96[1]))));
			self.fRec95[0] = ((self.fConst354 * (((self.fConst356 * self.fRec96[1]) + (self.fConst359 * self.fRec96[0])) + (self.fConst359 * self.fRec96[2]))) - (self.fConst352 * ((self.fConst360 * self.fRec95[2]) + (self.fConst361 * self.fRec95[1]))));
			self.fRec94[0] = ((self.fConst352 * (((self.fConst353 * self.fRec95[1]) + (self.fConst362 * self.fRec95[0])) + (self.fConst362 * self.fRec95[2]))) - (self.fConst350 * ((self.fConst363 * self.fRec94[2]) + (self.fConst364 * self.fRec94[1]))));
			let mut fTemp138: f32 = (self.fConst350 * (((self.fConst351 * self.fRec94[1]) + (self.fConst365 * self.fRec94[0])) + (self.fConst365 * self.fRec94[2])));
			self.fRec93[0] = (fTemp138 - (self.fConst347 * ((self.fConst366 * self.fRec93[2]) + (self.fConst368 * self.fRec93[1]))));
			self.fRec92[0] = ((self.fConst347 * (((self.fConst349 * self.fRec93[1]) + (self.fConst369 * self.fRec93[0])) + (self.fConst369 * self.fRec93[2]))) - (self.fConst344 * ((self.fConst370 * self.fRec92[2]) + (self.fConst371 * self.fRec92[1]))));
			self.fRec91[0] = ((self.fConst344 * (((self.fConst346 * self.fRec92[1]) + (self.fConst372 * self.fRec92[0])) + (self.fConst372 * self.fRec92[2]))) - (self.fConst340 * ((self.fConst373 * self.fRec91[2]) + (self.fConst374 * self.fRec91[1]))));
			self.fRec90[0] = ((fSlow1 * self.fRec90[1]) + (fSlow2 * f32::abs((self.fConst340 * (((self.fConst343 * self.fRec91[1]) + (self.fConst375 * self.fRec91[0])) + (self.fConst375 * self.fRec91[2]))))));
			self.fVbargraph9 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec90[0])))) as f32);
			self.fRec103[0] = (fTemp138 - (self.fConst392 * ((self.fConst395 * self.fRec103[2]) + (self.fConst396 * self.fRec103[1]))));
			self.fRec102[0] = ((self.fConst392 * (((self.fConst394 * self.fRec103[1]) + (self.fConst397 * self.fRec103[0])) + (self.fConst397 * self.fRec103[2]))) - (self.fConst390 * ((self.fConst398 * self.fRec102[2]) + (self.fConst399 * self.fRec102[1]))));
			self.fRec101[0] = ((self.fConst390 * (((self.fConst391 * self.fRec102[1]) + (self.fConst400 * self.fRec102[0])) + (self.fConst400 * self.fRec102[2]))) - (self.fConst388 * ((self.fConst401 * self.fRec101[2]) + (self.fConst402 * self.fRec101[1]))));
			let mut fTemp139: f32 = (self.fConst388 * (((self.fConst389 * self.fRec101[1]) + (self.fConst403 * self.fRec101[0])) + (self.fConst403 * self.fRec101[2])));
			self.fRec100[0] = (fTemp139 - (self.fConst385 * ((self.fConst404 * self.fRec100[2]) + (self.fConst406 * self.fRec100[1]))));
			self.fRec99[0] = ((self.fConst385 * (((self.fConst387 * self.fRec100[1]) + (self.fConst407 * self.fRec100[0])) + (self.fConst407 * self.fRec100[2]))) - (self.fConst382 * ((self.fConst408 * self.fRec99[2]) + (self.fConst409 * self.fRec99[1]))));
			self.fRec98[0] = ((self.fConst382 * (((self.fConst384 * self.fRec99[1]) + (self.fConst410 * self.fRec99[0])) + (self.fConst410 * self.fRec99[2]))) - (self.fConst378 * ((self.fConst411 * self.fRec98[2]) + (self.fConst412 * self.fRec98[1]))));
			self.fRec97[0] = ((fSlow1 * self.fRec97[1]) + (fSlow2 * f32::abs((self.fConst378 * (((self.fConst381 * self.fRec98[1]) + (self.fConst413 * self.fRec98[0])) + (self.fConst413 * self.fRec98[2]))))));
			self.fVbargraph10 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec97[0])))) as f32);
			self.fRec110[0] = (fTemp139 - (self.fConst430 * ((self.fConst433 * self.fRec110[2]) + (self.fConst434 * self.fRec110[1]))));
			self.fRec109[0] = ((self.fConst430 * (((self.fConst432 * self.fRec110[1]) + (self.fConst435 * self.fRec110[0])) + (self.fConst435 * self.fRec110[2]))) - (self.fConst428 * ((self.fConst436 * self.fRec109[2]) + (self.fConst437 * self.fRec109[1]))));
			self.fRec108[0] = ((self.fConst428 * (((self.fConst429 * self.fRec109[1]) + (self.fConst438 * self.fRec109[0])) + (self.fConst438 * self.fRec109[2]))) - (self.fConst426 * ((self.fConst439 * self.fRec108[2]) + (self.fConst440 * self.fRec108[1]))));
			let mut fTemp140: f32 = (self.fConst426 * (((self.fConst427 * self.fRec108[1]) + (self.fConst441 * self.fRec108[0])) + (self.fConst441 * self.fRec108[2])));
			self.fRec107[0] = (fTemp140 - (self.fConst423 * ((self.fConst442 * self.fRec107[2]) + (self.fConst444 * self.fRec107[1]))));
			self.fRec106[0] = ((self.fConst423 * (((self.fConst425 * self.fRec107[1]) + (self.fConst445 * self.fRec107[0])) + (self.fConst445 * self.fRec107[2]))) - (self.fConst420 * ((self.fConst446 * self.fRec106[2]) + (self.fConst447 * self.fRec106[1]))));
			self.fRec105[0] = ((self.fConst420 * (((self.fConst422 * self.fRec106[1]) + (self.fConst448 * self.fRec106[0])) + (self.fConst448 * self.fRec106[2]))) - (self.fConst416 * ((self.fConst449 * self.fRec105[2]) + (self.fConst450 * self.fRec105[1]))));
			self.fRec104[0] = ((fSlow1 * self.fRec104[1]) + (fSlow2 * f32::abs((self.fConst416 * (((self.fConst419 * self.fRec105[1]) + (self.fConst451 * self.fRec105[0])) + (self.fConst451 * self.fRec105[2]))))));
			self.fVbargraph11 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec104[0])))) as f32);
			self.fRec117[0] = (fTemp140 - (self.fConst468 * ((self.fConst471 * self.fRec117[2]) + (self.fConst472 * self.fRec117[1]))));
			self.fRec116[0] = ((self.fConst468 * (((self.fConst470 * self.fRec117[1]) + (self.fConst473 * self.fRec117[0])) + (self.fConst473 * self.fRec117[2]))) - (self.fConst466 * ((self.fConst474 * self.fRec116[2]) + (self.fConst475 * self.fRec116[1]))));
			self.fRec115[0] = ((self.fConst466 * (((self.fConst467 * self.fRec116[1]) + (self.fConst476 * self.fRec116[0])) + (self.fConst476 * self.fRec116[2]))) - (self.fConst464 * ((self.fConst477 * self.fRec115[2]) + (self.fConst478 * self.fRec115[1]))));
			let mut fTemp141: f32 = (self.fConst464 * (((self.fConst465 * self.fRec115[1]) + (self.fConst479 * self.fRec115[0])) + (self.fConst479 * self.fRec115[2])));
			self.fRec114[0] = (fTemp141 - (self.fConst461 * ((self.fConst480 * self.fRec114[2]) + (self.fConst482 * self.fRec114[1]))));
			self.fRec113[0] = ((self.fConst461 * (((self.fConst463 * self.fRec114[1]) + (self.fConst483 * self.fRec114[0])) + (self.fConst483 * self.fRec114[2]))) - (self.fConst458 * ((self.fConst484 * self.fRec113[2]) + (self.fConst485 * self.fRec113[1]))));
			self.fRec112[0] = ((self.fConst458 * (((self.fConst460 * self.fRec113[1]) + (self.fConst486 * self.fRec113[0])) + (self.fConst486 * self.fRec113[2]))) - (self.fConst454 * ((self.fConst487 * self.fRec112[2]) + (self.fConst488 * self.fRec112[1]))));
			self.fRec111[0] = ((fSlow1 * self.fRec111[1]) + (fSlow2 * f32::abs((self.fConst454 * (((self.fConst457 * self.fRec112[1]) + (self.fConst489 * self.fRec112[0])) + (self.fConst489 * self.fRec112[2]))))));
			self.fVbargraph12 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec111[0])))) as f32);
			self.fRec124[0] = (fTemp141 - (self.fConst506 * ((self.fConst509 * self.fRec124[2]) + (self.fConst510 * self.fRec124[1]))));
			self.fRec123[0] = ((self.fConst506 * (((self.fConst508 * self.fRec124[1]) + (self.fConst511 * self.fRec124[0])) + (self.fConst511 * self.fRec124[2]))) - (self.fConst504 * ((self.fConst512 * self.fRec123[2]) + (self.fConst513 * self.fRec123[1]))));
			self.fRec122[0] = ((self.fConst504 * (((self.fConst505 * self.fRec123[1]) + (self.fConst514 * self.fRec123[0])) + (self.fConst514 * self.fRec123[2]))) - (self.fConst502 * ((self.fConst515 * self.fRec122[2]) + (self.fConst516 * self.fRec122[1]))));
			let mut fTemp142: f32 = (self.fConst502 * (((self.fConst503 * self.fRec122[1]) + (self.fConst517 * self.fRec122[0])) + (self.fConst517 * self.fRec122[2])));
			self.fRec121[0] = (fTemp142 - (self.fConst499 * ((self.fConst518 * self.fRec121[2]) + (self.fConst520 * self.fRec121[1]))));
			self.fRec120[0] = ((self.fConst499 * (((self.fConst501 * self.fRec121[1]) + (self.fConst521 * self.fRec121[0])) + (self.fConst521 * self.fRec121[2]))) - (self.fConst496 * ((self.fConst522 * self.fRec120[2]) + (self.fConst523 * self.fRec120[1]))));
			self.fRec119[0] = ((self.fConst496 * (((self.fConst498 * self.fRec120[1]) + (self.fConst524 * self.fRec120[0])) + (self.fConst524 * self.fRec120[2]))) - (self.fConst492 * ((self.fConst525 * self.fRec119[2]) + (self.fConst526 * self.fRec119[1]))));
			self.fRec118[0] = ((fSlow1 * self.fRec118[1]) + (fSlow2 * f32::abs((self.fConst492 * (((self.fConst495 * self.fRec119[1]) + (self.fConst527 * self.fRec119[0])) + (self.fConst527 * self.fRec119[2]))))));
			self.fVbargraph13 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec118[0])))) as f32);
			self.fRec128[0] = (fTemp142 - (self.fConst532 * ((self.fConst535 * self.fRec128[2]) + (self.fConst536 * self.fRec128[1]))));
			self.fRec127[0] = ((self.fConst532 * (((self.fConst534 * self.fRec128[1]) + (self.fConst537 * self.fRec128[0])) + (self.fConst537 * self.fRec128[2]))) - (self.fConst530 * ((self.fConst538 * self.fRec127[2]) + (self.fConst539 * self.fRec127[1]))));
			self.fRec126[0] = ((self.fConst530 * (((self.fConst531 * self.fRec127[1]) + (self.fConst540 * self.fRec127[0])) + (self.fConst540 * self.fRec127[2]))) - (self.fConst528 * ((self.fConst541 * self.fRec126[2]) + (self.fConst542 * self.fRec126[1]))));
			self.fRec125[0] = ((fSlow1 * self.fRec125[1]) + (fSlow2 * f32::abs((self.fConst528 * (((self.fConst529 * self.fRec126[1]) + (self.fConst543 * self.fRec126[0])) + (self.fConst543 * self.fRec126[2]))))));
			self.fVbargraph14 = ((fSlow0 + (20.0 * f32::log10(f32::max(1.00000001e-07, self.fRec125[0])))) as f32);
			outputs[0][i as usize] = (fTemp129 as f32);
			outputs[1][i as usize] = (fTemp129 as f32);
			let mut j0: i32 = 3;
			loop {
				self.iVec0[j0 as usize] = self.iVec0[(j0 - 1) as usize];
				j0 = (j0 - 1);
				if (j0 > 0) { continue; } else { break; }
			}
			self.fRec4[1] = self.fRec4[0];
			self.fRec10[1] = self.fRec10[0];
			self.fRec12[1] = self.fRec12[0];
			self.fVec1[1] = self.fVec1[0];
			self.fRec11[1] = self.fRec11[0];
			self.fVec2[1] = self.fVec2[0];
			self.fVec3[1] = self.fVec3[0];
			self.fVec4[1] = self.fVec4[0];
			self.fVec5[1] = self.fVec5[0];
			self.fVec6[1] = self.fVec6[0];
			self.fVec7[1] = self.fVec7[0];
			self.fVec8[1] = self.fVec8[0];
			self.fRec13[1] = self.fRec13[0];
			self.fVec9[1] = self.fVec9[0];
			self.fVec10[1] = self.fVec10[0];
			self.fVec11[1] = self.fVec11[0];
			self.fVec12[1] = self.fVec12[0];
			self.fVec13[1] = self.fVec13[0];
			self.fVec14[1] = self.fVec14[0];
			self.fVec15[1] = self.fVec15[0];
			self.fRec14[1] = self.fRec14[0];
			self.fVec16[1] = self.fVec16[0];
			self.fVec17[1] = self.fVec17[0];
			self.fVec18[1] = self.fVec18[0];
			self.fVec19[1] = self.fVec19[0];
			self.fVec20[1] = self.fVec20[0];
			self.fVec21[1] = self.fVec21[0];
			self.fVec22[1] = self.fVec22[0];
			self.fRec15[1] = self.fRec15[0];
			self.fVec23[1] = self.fVec23[0];
			self.IOTA = (self.IOTA + 1);
			self.fVec25[1] = self.fVec25[0];
			self.fRec16[1] = self.fRec16[0];
			self.fVec26[1] = self.fVec26[0];
			self.fVec28[1] = self.fVec28[0];
			self.fRec17[1] = self.fRec17[0];
			self.fVec29[1] = self.fVec29[0];
			self.fRec18[1] = self.fRec18[0];
			self.fRec19[1] = self.fRec19[0];
			self.fRec20[1] = self.fRec20[0];
			self.fRec21[1] = self.fRec21[0];
			self.fVec31[1] = self.fVec31[0];
			self.fVec32[1] = self.fVec32[0];
			self.fVec34[1] = self.fVec34[0];
			self.fVec35[1] = self.fVec35[0];
			self.fVec37[1] = self.fVec37[0];
			self.fVec38[1] = self.fVec38[0];
			self.iRec23[1] = self.iRec23[0];
			let mut j1: i32 = 3;
			loop {
				self.fRec22[j1 as usize] = self.fRec22[(j1 - 1) as usize];
				j1 = (j1 - 1);
				if (j1 > 0) { continue; } else { break; }
			}
			self.fRec24[1] = self.fRec24[0];
			self.fRec9[1] = self.fRec9[0];
			self.fRec8[1] = self.fRec8[0];
			self.fRec7[1] = self.fRec7[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec27[1] = self.fRec27[0];
			self.fRec26[2] = self.fRec26[1];
			self.fRec26[1] = self.fRec26[0];
			self.fRec25[2] = self.fRec25[1];
			self.fRec25[1] = self.fRec25[0];
			self.fRec30[1] = self.fRec30[0];
			self.fRec28[1] = self.fRec28[0];
			self.fRec33[1] = self.fRec33[0];
			self.fRec31[1] = self.fRec31[0];
			self.fRec3[2] = self.fRec3[1];
			self.fRec3[1] = self.fRec3[0];
			self.fRec2[2] = self.fRec2[1];
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[2] = self.fRec1[1];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec40[2] = self.fRec40[1];
			self.fRec40[1] = self.fRec40[0];
			self.fRec39[2] = self.fRec39[1];
			self.fRec39[1] = self.fRec39[0];
			self.fRec38[2] = self.fRec38[1];
			self.fRec38[1] = self.fRec38[0];
			self.fRec37[2] = self.fRec37[1];
			self.fRec37[1] = self.fRec37[0];
			self.fRec36[2] = self.fRec36[1];
			self.fRec36[1] = self.fRec36[0];
			self.fRec35[2] = self.fRec35[1];
			self.fRec35[1] = self.fRec35[0];
			self.fRec34[1] = self.fRec34[0];
			self.fRec47[2] = self.fRec47[1];
			self.fRec47[1] = self.fRec47[0];
			self.fRec46[2] = self.fRec46[1];
			self.fRec46[1] = self.fRec46[0];
			self.fRec45[2] = self.fRec45[1];
			self.fRec45[1] = self.fRec45[0];
			self.fRec44[2] = self.fRec44[1];
			self.fRec44[1] = self.fRec44[0];
			self.fRec43[2] = self.fRec43[1];
			self.fRec43[1] = self.fRec43[0];
			self.fRec42[2] = self.fRec42[1];
			self.fRec42[1] = self.fRec42[0];
			self.fRec41[1] = self.fRec41[0];
			self.fRec54[2] = self.fRec54[1];
			self.fRec54[1] = self.fRec54[0];
			self.fRec53[2] = self.fRec53[1];
			self.fRec53[1] = self.fRec53[0];
			self.fRec52[2] = self.fRec52[1];
			self.fRec52[1] = self.fRec52[0];
			self.fRec51[2] = self.fRec51[1];
			self.fRec51[1] = self.fRec51[0];
			self.fRec50[2] = self.fRec50[1];
			self.fRec50[1] = self.fRec50[0];
			self.fRec49[2] = self.fRec49[1];
			self.fRec49[1] = self.fRec49[0];
			self.fRec48[1] = self.fRec48[0];
			self.fRec61[2] = self.fRec61[1];
			self.fRec61[1] = self.fRec61[0];
			self.fRec60[2] = self.fRec60[1];
			self.fRec60[1] = self.fRec60[0];
			self.fRec59[2] = self.fRec59[1];
			self.fRec59[1] = self.fRec59[0];
			self.fRec58[2] = self.fRec58[1];
			self.fRec58[1] = self.fRec58[0];
			self.fRec57[2] = self.fRec57[1];
			self.fRec57[1] = self.fRec57[0];
			self.fRec56[2] = self.fRec56[1];
			self.fRec56[1] = self.fRec56[0];
			self.fRec55[1] = self.fRec55[0];
			self.fRec68[2] = self.fRec68[1];
			self.fRec68[1] = self.fRec68[0];
			self.fRec67[2] = self.fRec67[1];
			self.fRec67[1] = self.fRec67[0];
			self.fRec66[2] = self.fRec66[1];
			self.fRec66[1] = self.fRec66[0];
			self.fRec65[2] = self.fRec65[1];
			self.fRec65[1] = self.fRec65[0];
			self.fRec64[2] = self.fRec64[1];
			self.fRec64[1] = self.fRec64[0];
			self.fRec63[2] = self.fRec63[1];
			self.fRec63[1] = self.fRec63[0];
			self.fRec62[1] = self.fRec62[0];
			self.fRec75[2] = self.fRec75[1];
			self.fRec75[1] = self.fRec75[0];
			self.fRec74[2] = self.fRec74[1];
			self.fRec74[1] = self.fRec74[0];
			self.fRec73[2] = self.fRec73[1];
			self.fRec73[1] = self.fRec73[0];
			self.fRec72[2] = self.fRec72[1];
			self.fRec72[1] = self.fRec72[0];
			self.fRec71[2] = self.fRec71[1];
			self.fRec71[1] = self.fRec71[0];
			self.fRec70[2] = self.fRec70[1];
			self.fRec70[1] = self.fRec70[0];
			self.fRec69[1] = self.fRec69[0];
			self.fRec82[2] = self.fRec82[1];
			self.fRec82[1] = self.fRec82[0];
			self.fRec81[2] = self.fRec81[1];
			self.fRec81[1] = self.fRec81[0];
			self.fRec80[2] = self.fRec80[1];
			self.fRec80[1] = self.fRec80[0];
			self.fRec79[2] = self.fRec79[1];
			self.fRec79[1] = self.fRec79[0];
			self.fRec78[2] = self.fRec78[1];
			self.fRec78[1] = self.fRec78[0];
			self.fRec77[2] = self.fRec77[1];
			self.fRec77[1] = self.fRec77[0];
			self.fRec76[1] = self.fRec76[0];
			self.fRec89[2] = self.fRec89[1];
			self.fRec89[1] = self.fRec89[0];
			self.fRec88[2] = self.fRec88[1];
			self.fRec88[1] = self.fRec88[0];
			self.fRec87[2] = self.fRec87[1];
			self.fRec87[1] = self.fRec87[0];
			self.fRec86[2] = self.fRec86[1];
			self.fRec86[1] = self.fRec86[0];
			self.fRec85[2] = self.fRec85[1];
			self.fRec85[1] = self.fRec85[0];
			self.fRec84[2] = self.fRec84[1];
			self.fRec84[1] = self.fRec84[0];
			self.fRec83[1] = self.fRec83[0];
			self.fRec96[2] = self.fRec96[1];
			self.fRec96[1] = self.fRec96[0];
			self.fRec95[2] = self.fRec95[1];
			self.fRec95[1] = self.fRec95[0];
			self.fRec94[2] = self.fRec94[1];
			self.fRec94[1] = self.fRec94[0];
			self.fRec93[2] = self.fRec93[1];
			self.fRec93[1] = self.fRec93[0];
			self.fRec92[2] = self.fRec92[1];
			self.fRec92[1] = self.fRec92[0];
			self.fRec91[2] = self.fRec91[1];
			self.fRec91[1] = self.fRec91[0];
			self.fRec90[1] = self.fRec90[0];
			self.fRec103[2] = self.fRec103[1];
			self.fRec103[1] = self.fRec103[0];
			self.fRec102[2] = self.fRec102[1];
			self.fRec102[1] = self.fRec102[0];
			self.fRec101[2] = self.fRec101[1];
			self.fRec101[1] = self.fRec101[0];
			self.fRec100[2] = self.fRec100[1];
			self.fRec100[1] = self.fRec100[0];
			self.fRec99[2] = self.fRec99[1];
			self.fRec99[1] = self.fRec99[0];
			self.fRec98[2] = self.fRec98[1];
			self.fRec98[1] = self.fRec98[0];
			self.fRec97[1] = self.fRec97[0];
			self.fRec110[2] = self.fRec110[1];
			self.fRec110[1] = self.fRec110[0];
			self.fRec109[2] = self.fRec109[1];
			self.fRec109[1] = self.fRec109[0];
			self.fRec108[2] = self.fRec108[1];
			self.fRec108[1] = self.fRec108[0];
			self.fRec107[2] = self.fRec107[1];
			self.fRec107[1] = self.fRec107[0];
			self.fRec106[2] = self.fRec106[1];
			self.fRec106[1] = self.fRec106[0];
			self.fRec105[2] = self.fRec105[1];
			self.fRec105[1] = self.fRec105[0];
			self.fRec104[1] = self.fRec104[0];
			self.fRec117[2] = self.fRec117[1];
			self.fRec117[1] = self.fRec117[0];
			self.fRec116[2] = self.fRec116[1];
			self.fRec116[1] = self.fRec116[0];
			self.fRec115[2] = self.fRec115[1];
			self.fRec115[1] = self.fRec115[0];
			self.fRec114[2] = self.fRec114[1];
			self.fRec114[1] = self.fRec114[0];
			self.fRec113[2] = self.fRec113[1];
			self.fRec113[1] = self.fRec113[0];
			self.fRec112[2] = self.fRec112[1];
			self.fRec112[1] = self.fRec112[0];
			self.fRec111[1] = self.fRec111[0];
			self.fRec124[2] = self.fRec124[1];
			self.fRec124[1] = self.fRec124[0];
			self.fRec123[2] = self.fRec123[1];
			self.fRec123[1] = self.fRec123[0];
			self.fRec122[2] = self.fRec122[1];
			self.fRec122[1] = self.fRec122[0];
			self.fRec121[2] = self.fRec121[1];
			self.fRec121[1] = self.fRec121[0];
			self.fRec120[2] = self.fRec120[1];
			self.fRec120[1] = self.fRec120[0];
			self.fRec119[2] = self.fRec119[1];
			self.fRec119[1] = self.fRec119[0];
			self.fRec118[1] = self.fRec118[0];
			self.fRec128[2] = self.fRec128[1];
			self.fRec128[1] = self.fRec128[0];
			self.fRec127[2] = self.fRec127[1];
			self.fRec127[1] = self.fRec127[0];
			self.fRec126[2] = self.fRec126[1];
			self.fRec126[1] = self.fRec126[0];
			self.fRec125[1] = self.fRec125[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

