


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider0: f32,
	fHslider1: f32,
	fRec3: [f32;2],
	fHslider2: f32,
	iVec0: [i32;2],
	fHslider3: f32,
	iRec4: [i32;2],
	fRec1: [f32;2],
	fRec0: [f32;2],
	fHbargraph0: f32,
	fRec8: [f32;2],
	iVec1: [i32;2],
	iRec9: [i32;2],
	fRec6: [f32;2],
	fRec5: [f32;2],
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider0: 0.0,
			fHslider1: 0.0,
			fRec3: [0.0;2],
			fHslider2: 0.0,
			iVec0: [0;2],
			fHslider3: 0.0,
			iRec4: [0;2],
			fRec1: [0.0;2],
			fRec0: [0.0;2],
			fHbargraph0: 0.0,
			fRec8: [0.0;2],
			iVec1: [0;2],
			iRec9: [0;2],
			fRec6: [0.0;2],
			fRec5: [0.0;2],
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("author", "JOS, revised by RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("description", "Gate demo application.");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("misceffects.lib/name", "Faust Math Library");
		m.declare("misceffects.lib/version", "2.0");
		m.declare("name", "noiseGate");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 10.0;
		self.fHslider1 = 100.0;
		self.fHslider2 = -30.0;
		self.fHslider3 = 200.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec3[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.iVec0[l1 as usize] = 0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.iRec4[l2 as usize] = 0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec1[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec0[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec8[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		let mut l6: i32 = 0;
		loop {
			self.iVec1[l6 as usize] = 0;
			l6 = (l6 + 1);
			if (l6 < 2) { continue; } else { break; }
		}
		let mut l7: i32 = 0;
		loop {
			self.iRec9[l7 as usize] = 0;
			l7 = (l7 + 1);
			if (l7 < 2) { continue; } else { break; }
		}
		let mut l8: i32 = 0;
		loop {
			self.fRec6[l8 as usize] = 0.0;
			l8 = (l8 + 1);
			if (l8 < 2) { continue; } else { break; }
		}
		let mut l9: i32 = 0;
		loop {
			self.fRec5[l9 as usize] = 0.0;
			l9 = (l9 + 1);
			if (l9 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (1.0 / self.fConst0);
		self.fConst2 = (1.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference:   http://en.wikipedia.org/wiki/Noise_gate");
		ui_interface.openVerticalBox("GATE");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked,   the gate has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fHbargraph0, "1", "");
		ui_interface.declare(&mut self.fHbargraph0, "tooltip", "Current gain of the  gate in dB");
		ui_interface.declare(&mut self.fHbargraph0, "unit", "dB");
		ui_interface.addHorizontalBargraph("Gate Gain", &mut self.fHbargraph0, -50.0, 10.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fHslider2, "1", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "When   the signal level falls below the Threshold (expressed in dB), the signal is   muted");
		ui_interface.declare(&mut self.fHslider2, "unit", "dB");
		ui_interface.addHorizontalSlider("Threshold", &mut self.fHslider2, -30.0, -120.0, 0.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider0, "2", "");
		ui_interface.declare(&mut self.fHslider0, "scale", "log");
		ui_interface.declare(&mut self.fHslider0, "style", "knob");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "Time constant in MICROseconds (1/e smoothing time) for the gate  gain to go (exponentially) from 0 (muted) to 1 (unmuted)");
		ui_interface.declare(&mut self.fHslider0, "unit", "us");
		ui_interface.addHorizontalSlider("Attack", &mut self.fHslider0, 10.0, 10.0, 10000.0, 1.0);
		ui_interface.declare(&mut self.fHslider3, "3", "");
		ui_interface.declare(&mut self.fHslider3, "scale", "log");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Time in ms to keep the gate open (no muting) after the signal  level falls below the Threshold");
		ui_interface.declare(&mut self.fHslider3, "unit", "ms");
		ui_interface.addHorizontalSlider("Hold", &mut self.fHslider3, 200.0, 1.0, 1000.0, 1.0);
		ui_interface.declare(&mut self.fHslider1, "4", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "tooltip", "Time constant in ms (1/e smoothing time) for the gain to go  (exponentially) from 1 (unmuted) to 0 (muted)");
		ui_interface.declare(&mut self.fHslider1, "unit", "ms");
		ui_interface.addHorizontalSlider("Release", &mut self.fHslider1, 100.0, 1.0, 1000.0, 1.0);
		ui_interface.closeBox();
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = f32::max(self.fConst2, (9.99999997e-07 * (self.fHslider0 as f32)));
		let mut fSlow2: f32 = f32::max(self.fConst2, (0.00100000005 * (self.fHslider1 as f32)));
		let mut fSlow3: f32 = f32::exp((0.0 - (self.fConst1 / f32::min(fSlow1, fSlow2))));
		let mut fSlow4: f32 = (1.0 - fSlow3);
		let mut fSlow5: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider2 as f32)));
		let mut iSlow6: i32 = ((self.fConst0 * f32::max(self.fConst2, (0.00100000005 * (self.fHslider3 as f32)))) as i32);
		let mut fSlow7: f32 = f32::exp((0.0 - (self.fConst1 / fSlow1)));
		let mut fSlow8: f32 = f32::exp((0.0 - (self.fConst1 / fSlow2)));
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 };
			let mut fTemp2: f32 = (inputs[1][i as usize] as f32);
			let mut fTemp3: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp2 };
			let mut fTemp4: f32 = f32::abs(fTemp3);
			self.fRec3[0] = ((fSlow3 * self.fRec3[1]) + (fSlow4 * f32::abs((f32::abs(fTemp1) + fTemp4))));
			let mut fRec2: f32 = self.fRec3[0];
			let mut iTemp5: i32 = ((fRec2 > fSlow5) as i32);
			self.iVec0[0] = iTemp5;
			self.iRec4[0] = std::cmp::max(((iSlow6 * ((iTemp5 < self.iVec0[1]) as i32)) as i32), ((self.iRec4[1] + -1) as i32));
			let mut fTemp6: f32 = f32::abs(f32::max((iTemp5 as f32), (((self.iRec4[0] > 0) as i32) as f32)));
			let mut fTemp7: f32 = if (((self.fRec0[1] > fTemp6) as i32) as i32 == 1) { fSlow8 } else { fSlow7 };
			self.fRec1[0] = ((self.fRec1[1] * fTemp7) + (fTemp6 * (1.0 - fTemp7)));
			self.fRec0[0] = self.fRec1[0];
			self.fHbargraph0 = ((20.0 * f32::log10(self.fRec0[0])) as f32);
			self.fRec8[0] = ((fSlow3 * self.fRec8[1]) + (fSlow4 * f32::abs((fTemp4 + f32::abs(fTemp1)))));
			let mut fRec7: f32 = self.fRec8[0];
			let mut iTemp8: i32 = ((fRec7 > fSlow5) as i32);
			self.iVec1[0] = iTemp8;
			self.iRec9[0] = std::cmp::max(((iSlow6 * ((iTemp8 < self.iVec1[1]) as i32)) as i32), ((self.iRec9[1] + -1) as i32));
			let mut fTemp9: f32 = f32::abs(f32::max((iTemp8 as f32), (((self.iRec9[0] > 0) as i32) as f32)));
			let mut fTemp10: f32 = if (((self.fRec5[1] > fTemp9) as i32) as i32 == 1) { fSlow8 } else { fSlow7 };
			self.fRec6[0] = ((self.fRec6[1] * fTemp10) + (fTemp9 * (1.0 - fTemp10)));
			self.fRec5[0] = self.fRec6[0];
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { (fTemp1 * self.fRec5[0]) } as f32);
			outputs[1][i as usize] = (if (iSlow0 as i32 == 1) { fTemp2 } else { (fTemp3 * self.fRec5[0]) } as f32);
			self.fRec3[1] = self.fRec3[0];
			self.iVec0[1] = self.iVec0[0];
			self.iRec4[1] = self.iRec4[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec8[1] = self.fRec8[0];
			self.iVec1[1] = self.iVec1[0];
			self.iRec9[1] = self.iRec9[0];
			self.fRec6[1] = self.fRec6[0];
			self.fRec5[1] = self.fRec5[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

