


pub struct mydsp {
	
	fDummy: f32,
	fCheckbox0: f32,
	fHslider0: f32,
	fSamplingFreq: i32,
	fConst0: f32,
	fConst1: f32,
	fConst2: f32,
	fHslider1: f32,
	fHslider2: f32,
	fHslider3: f32,
	fRec2: [f32;2],
	fRec1: [f32;2],
	fHslider4: f32,
	fRec0: [f32;2],
	fRec5: [f32;2],
	fRec4: [f32;2],
	fRec3: [f32;2],
	fHbargraph0: f32,
	
}

impl mydsp {
		
	pub fn new() -> mydsp { 
		mydsp {
			fDummy: 0 as f32,
			fCheckbox0: 0.0,
			fHslider0: 0.0,
			fSamplingFreq: 0,
			fConst0: 0.0,
			fConst1: 0.0,
			fConst2: 0.0,
			fHslider1: 0.0,
			fHslider2: 0.0,
			fHslider3: 0.0,
			fRec2: [0.0;2],
			fRec1: [0.0;2],
			fHslider4: 0.0,
			fRec0: [0.0;2],
			fRec5: [0.0;2],
			fRec4: [0.0;2],
			fRec3: [0.0;2],
			fHbargraph0: 0.0,
		}
	}
	
	pub fn metadata(&mut self, m: &mut Meta) { 
		m.declare("analyzers.lib/name", "Faust Analyzer Library");
		m.declare("analyzers.lib/version", "0.0");
		m.declare("author", "JOS, revised by RM");
		m.declare("basics.lib/name", "Faust Basic Element Library");
		m.declare("basics.lib/version", "0.0");
		m.declare("compressors.lib/name", "Faust Compressor Effect Library");
		m.declare("compressors.lib/version", "0.0");
		m.declare("description", "Compressor demo application");
		m.declare("maths.lib/author", "GRAME");
		m.declare("maths.lib/copyright", "GRAME");
		m.declare("maths.lib/license", "LGPL with exception");
		m.declare("maths.lib/name", "Faust Math Library");
		m.declare("maths.lib/version", "2.1");
		m.declare("name", "compressor");
		m.declare("routes.lib/name", "Faust Signal Routing Library");
		m.declare("routes.lib/version", "0.0");
		m.declare("signals.lib/name", "Faust Signal Routing Library");
		m.declare("signals.lib/version", "0.0");
		m.declare("version", "0.0");
	}

	pub fn getSampleRate(&mut self) -> i32 {
		self.fSamplingFreq
	}
	pub fn getNumInputs(&mut self) -> i32 {
		2
	}
	pub fn getNumOutputs(&mut self) -> i32 {
		2
	}
	pub fn getInputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	pub fn getOutputRate(&mut self, channel: i32) -> i32 {
		let mut rate: i32;
		match (channel) {
			0 => {
				rate = 1;
				
			},
			1 => {
				rate = 1;
				
			},
			_ => {
				rate = -1;
				
			},
			
		} 
		rate
	}
	
	pub fn classInit(samplingFreq: i32) {
		
	}
	
	pub fn instanceResetUserInterface(&mut self) {
		self.fCheckbox0 = 0.0;
		self.fHslider0 = 40.0;
		self.fHslider1 = 50.0;
		self.fHslider2 = 5.0;
		self.fHslider3 = 500.0;
		self.fHslider4 = -30.0;
		
	}
	
	pub fn instanceClear(&mut self) {
		let mut l0: i32 = 0;
		loop {
			self.fRec2[l0 as usize] = 0.0;
			l0 = (l0 + 1);
			if (l0 < 2) { continue; } else { break; }
		}
		let mut l1: i32 = 0;
		loop {
			self.fRec1[l1 as usize] = 0.0;
			l1 = (l1 + 1);
			if (l1 < 2) { continue; } else { break; }
		}
		let mut l2: i32 = 0;
		loop {
			self.fRec0[l2 as usize] = 0.0;
			l2 = (l2 + 1);
			if (l2 < 2) { continue; } else { break; }
		}
		let mut l3: i32 = 0;
		loop {
			self.fRec5[l3 as usize] = 0.0;
			l3 = (l3 + 1);
			if (l3 < 2) { continue; } else { break; }
		}
		let mut l4: i32 = 0;
		loop {
			self.fRec4[l4 as usize] = 0.0;
			l4 = (l4 + 1);
			if (l4 < 2) { continue; } else { break; }
		}
		let mut l5: i32 = 0;
		loop {
			self.fRec3[l5 as usize] = 0.0;
			l5 = (l5 + 1);
			if (l5 < 2) { continue; } else { break; }
		}
		
	}
	
	pub fn instanceConstants(&mut self, samplingFreq: i32) {
		self.fSamplingFreq = samplingFreq;
		self.fConst0 = f32::min(192000.0, f32::max(1.0, (self.fSamplingFreq as f32)));
		self.fConst1 = (2.0 / self.fConst0);
		self.fConst2 = (1.0 / self.fConst0);
		
	}
	
	pub fn instanceInit(&mut self, samplingFreq: i32) {
		self.instanceConstants(samplingFreq);
		self.instanceResetUserInterface();
		self.instanceClear();
	}
	
	pub fn init(&mut self, samplingFreq: i32) {
		mydsp::classInit(samplingFreq);
		self.instanceInit(samplingFreq);
	}
	
	pub fn buildUserInterface(&mut self, ui_interface: &mut UI<f32>) {
		ui_interface.declare(&mut self.fDummy, "tooltip", "Reference:   http://en.wikipedia.org/wiki/Dynamic_range_compression");
		ui_interface.openVerticalBox("COMPRESSOR");
		ui_interface.declare(&mut self.fDummy, "0", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fCheckbox0, "0", "");
		ui_interface.declare(&mut self.fCheckbox0, "tooltip", "When this is checked, the compressor   has no effect");
		ui_interface.addCheckButton("Bypass", &mut self.fCheckbox0);
		ui_interface.declare(&mut self.fHbargraph0, "1", "");
		ui_interface.declare(&mut self.fHbargraph0, "tooltip", "Current gain of  the compressor in dB");
		ui_interface.declare(&mut self.fHbargraph0, "unit", "dB");
		ui_interface.addHorizontalBargraph("Compressor Gain", &mut self.fHbargraph0, -50.0, 10.0);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "1", "");
		ui_interface.openHorizontalBox("0x00");
		ui_interface.declare(&mut self.fDummy, "3", "");
		ui_interface.openHorizontalBox("Compression Control");
		ui_interface.declare(&mut self.fHslider2, "0", "");
		ui_interface.declare(&mut self.fHslider2, "style", "knob");
		ui_interface.declare(&mut self.fHslider2, "tooltip", "A compression Ratio of N means that for each N dB increase in input  signal level above Threshold, the output level goes up 1 dB");
		ui_interface.addHorizontalSlider("Ratio", &mut self.fHslider2, 5.0, 1.0, 20.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider4, "1", "");
		ui_interface.declare(&mut self.fHslider4, "style", "knob");
		ui_interface.declare(&mut self.fHslider4, "tooltip", "When the signal level exceeds the Threshold (in dB), its level  is compressed according to the Ratio");
		ui_interface.declare(&mut self.fHslider4, "unit", "dB");
		ui_interface.addHorizontalSlider("Threshold", &mut self.fHslider4, -30.0, -100.0, 10.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fDummy, "4", "");
		ui_interface.openHorizontalBox("Compression Response");
		ui_interface.declare(&mut self.fHslider1, "1", "");
		ui_interface.declare(&mut self.fHslider1, "scale", "log");
		ui_interface.declare(&mut self.fHslider1, "style", "knob");
		ui_interface.declare(&mut self.fHslider1, "unit", "ms");
		ui_interface.addHorizontalSlider("Attack     tooltip: Time constant in ms (1/e smoothing time) for the compression gain  to approach (exponentially) a new lower target level (the compression  `kicking in')]", &mut self.fHslider1, 50.0, 1.0, 1000.0, 0.10000000000000001);
		ui_interface.declare(&mut self.fHslider3, "2", "");
		ui_interface.declare(&mut self.fHslider3, "scale", "log");
		ui_interface.declare(&mut self.fHslider3, "style", "knob");
		ui_interface.declare(&mut self.fHslider3, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain  to approach (exponentially) a new higher target level (the compression  'releasing')");
		ui_interface.declare(&mut self.fHslider3, "unit", "ms");
		ui_interface.addHorizontalSlider("Release", &mut self.fHslider3, 500.0, 1.0, 1000.0, 0.10000000000000001);
		ui_interface.closeBox();
		ui_interface.closeBox();
		ui_interface.declare(&mut self.fHslider0, "5", "");
		ui_interface.declare(&mut self.fHslider0, "tooltip", "The compressed-signal output level is increased by this amount  (in dB) to make up for the level lost due to compression");
		ui_interface.declare(&mut self.fHslider0, "unit", "dB");
		ui_interface.addHorizontalSlider("Makeup Gain", &mut self.fHslider0, 40.0, -96.0, 96.0, 0.10000000000000001);
		ui_interface.closeBox();
		
	}
	
	pub fn compute(&mut self, count: i32, inputs: &[&[f32]], outputs: &mut[&mut[f32]]) {
		let mut iSlow0: i32 = ((self.fCheckbox0 as f32) as i32);
		let mut fSlow1: f32 = f32::powf(10.0, (0.0500000007 * (self.fHslider0 as f32)));
		let mut fSlow2: f32 = f32::max(self.fConst2, (0.00100000005 * (self.fHslider1 as f32)));
		let mut fSlow3: f32 = f32::exp((0.0 - (self.fConst1 / fSlow2)));
		let mut fSlow4: f32 = (((1.0 / (self.fHslider2 as f32)) + -1.0) * (1.0 - fSlow3));
		let mut fSlow5: f32 = f32::exp((0.0 - (self.fConst2 / fSlow2)));
		let mut fSlow6: f32 = f32::exp((0.0 - (self.fConst2 / f32::max(self.fConst2, (0.00100000005 * (self.fHslider3 as f32))))));
		let mut fSlow7: f32 = (self.fHslider4 as f32);
		let mut i: i32 = 0;
		loop {
			let mut fTemp0: f32 = (inputs[0][i as usize] as f32);
			let mut fTemp1: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp0 };
			let mut fTemp2: f32 = (inputs[1][i as usize] as f32);
			let mut fTemp3: f32 = if (iSlow0 as i32 == 1) { 0.0 } else { fTemp2 };
			let mut fTemp4: f32 = f32::abs((f32::abs(fTemp1) + f32::abs(fTemp3)));
			let mut fTemp5: f32 = if (((self.fRec1[1] > fTemp4) as i32) as i32 == 1) { fSlow6 } else { fSlow5 };
			self.fRec2[0] = ((self.fRec2[1] * fTemp5) + (fTemp4 * (1.0 - fTemp5)));
			self.fRec1[0] = self.fRec2[0];
			self.fRec0[0] = ((fSlow3 * self.fRec0[1]) + (fSlow4 * f32::max(((20.0 * f32::log10(self.fRec1[0])) - fSlow7), 0.0)));
			let mut fTemp6: f32 = f32::powf(10.0, (0.0500000007 * self.fRec0[0]));
			let mut fTemp7: f32 = (fTemp1 * fTemp6);
			outputs[0][i as usize] = (if (iSlow0 as i32 == 1) { fTemp0 } else { (fSlow1 * fTemp7) } as f32);
			let mut fTemp8: f32 = (fTemp3 * fTemp6);
			let mut fTemp9: f32 = f32::abs((f32::abs(fTemp7) + f32::abs(fTemp8)));
			let mut fTemp10: f32 = if (((self.fRec4[1] > fTemp9) as i32) as i32 == 1) { fSlow6 } else { fSlow5 };
			self.fRec5[0] = ((self.fRec5[1] * fTemp10) + (fTemp9 * (1.0 - fTemp10)));
			self.fRec4[0] = self.fRec5[0];
			self.fRec3[0] = ((fSlow3 * self.fRec3[1]) + (fSlow4 * f32::max(((20.0 * f32::log10(self.fRec4[0])) - fSlow7), 0.0)));
			self.fHbargraph0 = ((20.0 * f32::log10(f32::powf(10.0, (0.0500000007 * self.fRec3[0])))) as f32);
			outputs[1][i as usize] = (if (iSlow0 as i32 == 1) { fTemp2 } else { (fSlow1 * fTemp8) } as f32);
			self.fRec2[1] = self.fRec2[0];
			self.fRec1[1] = self.fRec1[0];
			self.fRec0[1] = self.fRec0[0];
			self.fRec5[1] = self.fRec5[0];
			self.fRec4[1] = self.fRec4[0];
			self.fRec3[1] = self.fRec3[0];
			i = (i + 1);
			if (i < count) { continue; } else { break; }
		}
		
	}

}

