/* ------------------------------------------------------------
name: "math"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var abs = foreign.abs;
	var asinf = foreign.asin;
	var atan2f = foreign.atan2;
	var atanf = foreign.atan;
	var ceilf = foreign.ceil;
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var floorf = foreign.floor;
	var logf = foreign.log;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var sqrtf = foreign.sqrt;
	var tanf = foreign.tan;
	function rintf(dummy0);

	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 6;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 8 >> 2] = (samplingFreq | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 8 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var input2 = 0;
		var input3 = 0;
		var input4 = 0;
		var input5 = 0;
		var output0 = 0;
		var i = 0;
		var iTemp0 = 0;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		input2 = (HEAP32[inputs + (2 << 2) >> 2] | 0);
		input3 = (HEAP32[inputs + (3 << 2) >> 2] | 0);
		input4 = (HEAP32[inputs + (4 << 2) >> 2] | 0);
		input5 = (HEAP32[inputs + (5 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = (((HEAP32[dsp + 0 + (1 << 2) >> 2] | 0) + 1) | 0);
			iTemp0 = (((HEAP32[dsp + 0 + (0 << 2) >> 2] | 0) + -1) | 0);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(sqrtf(+((iTemp0 | 0)))) + +(+(tanf(+((iTemp0 | 0)))) + +(+(rintf(+((iTemp0 | 0)))) + +(+(sinf(+((iTemp0 | 0)))) + +(+(remainderf(+((iTemp0 | 0)), +(+(HEAPF[input5 + ((i | 0) << 2) >> 2])))) + +(+(powf(+(+(HEAPF[input4 + ((i | 0) << 2) >> 2])), +((iTemp0 | 0)))) + +(+(min_f(+((iTemp0 | 0)), +(+(HEAPF[input3 + ((i | 0) << 2) >> 2])))) + +(+(logf(+((iTemp0 | 0)))) + +(+(log10f(+((iTemp0 | 0)))) + +(+(+(+(+(+(+(+(+(+(((abs((iTemp0 | 0))) | 0)) + +(asinf(+((iTemp0 | 0))))) + +(atan2f(+((iTemp0 | 0)), +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]))))) + +(atanf(+((iTemp0 | 0))))) + +(ceilf(+((iTemp0 | 0))))) + +(cosf(+((iTemp0 | 0))))) + +(expf(+((iTemp0 | 0))))) + +(floorf(+((iTemp0 | 0))))) + +(fmodf(+((iTemp0 | 0)), +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]))))) + +(max_f(+((iTemp0 | 0)), +(+(HEAPF[input2 + ((i | 0) << 2) >> 2])))))))))))))));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 12;
}

function getPathTablemydsp() {
	var pathTable = [];
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"math\",\"inputs\":\"6\",\"outputs\":\"1\",\"meta\":[{\"math.lib/author\":\"GRAME\"},{\"math.lib/copyright\":\"GRAME\"},{\"math.lib/deprecated\":\"This library is deprecated and is not maintained anymore. It will be removed in August 2017.\"},{\"math.lib/license\":\"LGPL with exception\"},{\"math.lib/name\":\"Math Library\"},{\"math.lib/version\":\"1.0\"},{\"music.lib/author\":\"GRAME\"},{\"music.lib/copyright\":\"GRAME\"},{\"music.lib/deprecated\":\"This library is deprecated and is not maintained anymore. It will be removed in August 2017.\"},{\"music.lib/license\":\"LGPL with exception\"},{\"music.lib/name\":\"Music Library\"},{\"music.lib/version\":\"1.0\"},{\"name\":\"math\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"math\",\"items\":[]}]}";
}

function metadatamydsp(m) {
	m.declare("math.lib/author", "GRAME");
	m.declare("math.lib/copyright", "GRAME");
	m.declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
	m.declare("math.lib/license", "LGPL with exception");
	m.declare("math.lib/name", "Math Library");
	m.declare("math.lib/version", "1.0");
	m.declare("music.lib/author", "GRAME");
	m.declare("music.lib/copyright", "GRAME");
	m.declare("music.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
	m.declare("music.lib/license", "LGPL with exception");
	m.declare("music.lib/name", "Music Library");
	m.declare("music.lib/version", "1.0");
	m.declare("name", "math");
}

