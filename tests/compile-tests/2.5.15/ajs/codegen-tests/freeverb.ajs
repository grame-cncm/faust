/* ------------------------------------------------------------
name: "freeverb"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 149840 >> 2] = (samplingFreq | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.333299994;
		HEAPF[dsp + 4 >> 2] = 0.5;
		HEAPF[dsp + 8 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		var l32 = 0;
		var l33 = 0;
		var l34 = 0;
		var l35 = 0;
		var l36 = 0;
		var l37 = 0;
		var l38 = 0;
		var l39 = 0;
		var l40 = 0;
		var l41 = 0;
		var l42 = 0;
		var l43 = 0;
		var l44 = 0;
		var l45 = 0;
		var l46 = 0;
		var l47 = 0;
		var l48 = 0;
		var l49 = 0;
		var l50 = 0;
		var l51 = 0;
		var l52 = 0;
		var l53 = 0;
		var l54 = 0;
		var l55 = 0;
		var l56 = 0;
		var l57 = 0;
		var l58 = 0;
		var l59 = 0;
		var l60 = 0;
		var l61 = 0;
		var l62 = 0;
		var l63 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 12 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 20 >> 2] = 0;
		for (l1 = 0; (((l1 | 0) < 2048) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 8216 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 8224 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2048) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 8232 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 16424 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 16432 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2048) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 16440 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 24632 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 24640 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2048) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 24648 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 32840 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 32848 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2048) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 32856 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 41048 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 41056 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2048) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 41064 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 49256 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 49264 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2048) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 49272 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 57464 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 57472 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2048) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 57480 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 65672 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 1024) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 65680 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 69776 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 512) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 69784 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 71832 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 512) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 71840 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 73888 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 256) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 73896 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 2) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 74920 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		for (l32 = 0; (((l32 | 0) < 2) | 0); l32 = (((l32 | 0) + 1) | 0)) {
			HEAPF[dsp + 74928 + ((l32 | 0) << 2) >> 2] = 0.;
			
		}
		for (l33 = 0; (((l33 | 0) < 2048) | 0); l33 = (((l33 | 0) + 1) | 0)) {
			HEAPF[dsp + 74936 + ((l33 | 0) << 2) >> 2] = 0.;
			
		}
		for (l34 = 0; (((l34 | 0) < 2) | 0); l34 = (((l34 | 0) + 1) | 0)) {
			HEAPF[dsp + 83128 + ((l34 | 0) << 2) >> 2] = 0.;
			
		}
		for (l35 = 0; (((l35 | 0) < 2) | 0); l35 = (((l35 | 0) + 1) | 0)) {
			HEAPF[dsp + 83136 + ((l35 | 0) << 2) >> 2] = 0.;
			
		}
		for (l36 = 0; (((l36 | 0) < 2048) | 0); l36 = (((l36 | 0) + 1) | 0)) {
			HEAPF[dsp + 83144 + ((l36 | 0) << 2) >> 2] = 0.;
			
		}
		for (l37 = 0; (((l37 | 0) < 2) | 0); l37 = (((l37 | 0) + 1) | 0)) {
			HEAPF[dsp + 91336 + ((l37 | 0) << 2) >> 2] = 0.;
			
		}
		for (l38 = 0; (((l38 | 0) < 2) | 0); l38 = (((l38 | 0) + 1) | 0)) {
			HEAPF[dsp + 91344 + ((l38 | 0) << 2) >> 2] = 0.;
			
		}
		for (l39 = 0; (((l39 | 0) < 2048) | 0); l39 = (((l39 | 0) + 1) | 0)) {
			HEAPF[dsp + 91352 + ((l39 | 0) << 2) >> 2] = 0.;
			
		}
		for (l40 = 0; (((l40 | 0) < 2) | 0); l40 = (((l40 | 0) + 1) | 0)) {
			HEAPF[dsp + 99544 + ((l40 | 0) << 2) >> 2] = 0.;
			
		}
		for (l41 = 0; (((l41 | 0) < 2) | 0); l41 = (((l41 | 0) + 1) | 0)) {
			HEAPF[dsp + 99552 + ((l41 | 0) << 2) >> 2] = 0.;
			
		}
		for (l42 = 0; (((l42 | 0) < 2048) | 0); l42 = (((l42 | 0) + 1) | 0)) {
			HEAPF[dsp + 99560 + ((l42 | 0) << 2) >> 2] = 0.;
			
		}
		for (l43 = 0; (((l43 | 0) < 2) | 0); l43 = (((l43 | 0) + 1) | 0)) {
			HEAPF[dsp + 107752 + ((l43 | 0) << 2) >> 2] = 0.;
			
		}
		for (l44 = 0; (((l44 | 0) < 2) | 0); l44 = (((l44 | 0) + 1) | 0)) {
			HEAPF[dsp + 107760 + ((l44 | 0) << 2) >> 2] = 0.;
			
		}
		for (l45 = 0; (((l45 | 0) < 2048) | 0); l45 = (((l45 | 0) + 1) | 0)) {
			HEAPF[dsp + 107768 + ((l45 | 0) << 2) >> 2] = 0.;
			
		}
		for (l46 = 0; (((l46 | 0) < 2) | 0); l46 = (((l46 | 0) + 1) | 0)) {
			HEAPF[dsp + 115960 + ((l46 | 0) << 2) >> 2] = 0.;
			
		}
		for (l47 = 0; (((l47 | 0) < 2) | 0); l47 = (((l47 | 0) + 1) | 0)) {
			HEAPF[dsp + 115968 + ((l47 | 0) << 2) >> 2] = 0.;
			
		}
		for (l48 = 0; (((l48 | 0) < 2048) | 0); l48 = (((l48 | 0) + 1) | 0)) {
			HEAPF[dsp + 115976 + ((l48 | 0) << 2) >> 2] = 0.;
			
		}
		for (l49 = 0; (((l49 | 0) < 2) | 0); l49 = (((l49 | 0) + 1) | 0)) {
			HEAPF[dsp + 124168 + ((l49 | 0) << 2) >> 2] = 0.;
			
		}
		for (l50 = 0; (((l50 | 0) < 2) | 0); l50 = (((l50 | 0) + 1) | 0)) {
			HEAPF[dsp + 124176 + ((l50 | 0) << 2) >> 2] = 0.;
			
		}
		for (l51 = 0; (((l51 | 0) < 2048) | 0); l51 = (((l51 | 0) + 1) | 0)) {
			HEAPF[dsp + 124184 + ((l51 | 0) << 2) >> 2] = 0.;
			
		}
		for (l52 = 0; (((l52 | 0) < 2) | 0); l52 = (((l52 | 0) + 1) | 0)) {
			HEAPF[dsp + 132376 + ((l52 | 0) << 2) >> 2] = 0.;
			
		}
		for (l53 = 0; (((l53 | 0) < 2) | 0); l53 = (((l53 | 0) + 1) | 0)) {
			HEAPF[dsp + 132384 + ((l53 | 0) << 2) >> 2] = 0.;
			
		}
		for (l54 = 0; (((l54 | 0) < 2048) | 0); l54 = (((l54 | 0) + 1) | 0)) {
			HEAPF[dsp + 132392 + ((l54 | 0) << 2) >> 2] = 0.;
			
		}
		for (l55 = 0; (((l55 | 0) < 2) | 0); l55 = (((l55 | 0) + 1) | 0)) {
			HEAPF[dsp + 140584 + ((l55 | 0) << 2) >> 2] = 0.;
			
		}
		for (l56 = 0; (((l56 | 0) < 1024) | 0); l56 = (((l56 | 0) + 1) | 0)) {
			HEAPF[dsp + 140592 + ((l56 | 0) << 2) >> 2] = 0.;
			
		}
		for (l57 = 0; (((l57 | 0) < 2) | 0); l57 = (((l57 | 0) + 1) | 0)) {
			HEAPF[dsp + 144688 + ((l57 | 0) << 2) >> 2] = 0.;
			
		}
		for (l58 = 0; (((l58 | 0) < 512) | 0); l58 = (((l58 | 0) + 1) | 0)) {
			HEAPF[dsp + 144696 + ((l58 | 0) << 2) >> 2] = 0.;
			
		}
		for (l59 = 0; (((l59 | 0) < 2) | 0); l59 = (((l59 | 0) + 1) | 0)) {
			HEAPF[dsp + 146744 + ((l59 | 0) << 2) >> 2] = 0.;
			
		}
		for (l60 = 0; (((l60 | 0) < 512) | 0); l60 = (((l60 | 0) + 1) | 0)) {
			HEAPF[dsp + 146752 + ((l60 | 0) << 2) >> 2] = 0.;
			
		}
		for (l61 = 0; (((l61 | 0) < 2) | 0); l61 = (((l61 | 0) + 1) | 0)) {
			HEAPF[dsp + 148800 + ((l61 | 0) << 2) >> 2] = 0.;
			
		}
		for (l62 = 0; (((l62 | 0) < 256) | 0); l62 = (((l62 | 0) + 1) | 0)) {
			HEAPF[dsp + 148808 + ((l62 | 0) << 2) >> 2] = 0.;
			
		}
		for (l63 = 0; (((l63 | 0) < 2) | 0); l63 = (((l63 | 0) + 1) | 0)) {
			HEAPF[dsp + 149832 + ((l63 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 149840 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fRec7 = 0.;
		var fRec5 = 0.;
		var fRec3 = 0.;
		var fRec1 = 0.;
		var fTemp4 = 0.;
		var fRec31 = 0.;
		var fRec29 = 0.;
		var fRec27 = 0.;
		var fRec25 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(+(0.280000001 * +(+(HEAPF[dsp + 4 >> 2]))) + 0.699999988);
		fSlow2 = +(0.400000006 * +(+(HEAPF[dsp + 8 >> 2])));
		fSlow3 = +(1. - +(fSlow2));
		fSlow4 = +(1. - +(fSlow0));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 12 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 12 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 8216 + (1 << 2) >> 2])));
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp1 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp2 = +(0.0149999997 * +(+(fTemp0) + +(fTemp1)));
			HEAPF[dsp + 24 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 12 + (0 << 2) >> 2])) + +(fTemp2));
			HEAPF[dsp + 8216 + (0 << 2) >> 2] = +(HEAPF[dsp + 24 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1116) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 8224 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 8224 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 16424 + (1 << 2) >> 2])));
			HEAPF[dsp + 8232 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 8224 + (0 << 2) >> 2])));
			HEAPF[dsp + 16424 + (0 << 2) >> 2] = +(HEAPF[dsp + 8232 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1188) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 16432 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 16432 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 24632 + (1 << 2) >> 2])));
			HEAPF[dsp + 16440 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 16432 + (0 << 2) >> 2])));
			HEAPF[dsp + 24632 + (0 << 2) >> 2] = +(HEAPF[dsp + 16440 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1277) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 24640 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 24640 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 32840 + (1 << 2) >> 2])));
			HEAPF[dsp + 24648 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 24640 + (0 << 2) >> 2])));
			HEAPF[dsp + 32840 + (0 << 2) >> 2] = +(HEAPF[dsp + 24648 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1356) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 32848 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 32848 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 41048 + (1 << 2) >> 2])));
			HEAPF[dsp + 32856 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 32848 + (0 << 2) >> 2])));
			HEAPF[dsp + 41048 + (0 << 2) >> 2] = +(HEAPF[dsp + 32856 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1422) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 41056 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 41056 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 49256 + (1 << 2) >> 2])));
			HEAPF[dsp + 41064 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 41056 + (0 << 2) >> 2])));
			HEAPF[dsp + 49256 + (0 << 2) >> 2] = +(HEAPF[dsp + 41064 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1491) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 49264 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 49264 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 57464 + (1 << 2) >> 2])));
			HEAPF[dsp + 49272 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 49264 + (0 << 2) >> 2])));
			HEAPF[dsp + 57464 + (0 << 2) >> 2] = +(HEAPF[dsp + 49272 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1557) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 57472 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 57472 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 65672 + (1 << 2) >> 2])));
			HEAPF[dsp + 57480 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 57472 + (0 << 2) >> 2])));
			HEAPF[dsp + 65672 + (0 << 2) >> 2] = +(HEAPF[dsp + 57480 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1617) | 0) & 2047) | 0) << 2) >> 2]);
			fTemp3 = +(+(+(+(+(+(+(+(HEAPF[dsp + 8216 + (0 << 2) >> 2]) + +(HEAPF[dsp + 16424 + (0 << 2) >> 2])) + +(HEAPF[dsp + 24632 + (0 << 2) >> 2])) + +(HEAPF[dsp + 32840 + (0 << 2) >> 2])) + +(HEAPF[dsp + 41048 + (0 << 2) >> 2])) + +(HEAPF[dsp + 49256 + (0 << 2) >> 2])) + +(HEAPF[dsp + 57464 + (0 << 2) >> 2])) + +(HEAPF[dsp + 65672 + (0 << 2) >> 2]));
			HEAPF[dsp + 65680 + ((((HEAP32[dsp + 20 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(fTemp3) + +(0.5 * +(HEAPF[dsp + 69776 + (1 << 2) >> 2])));
			HEAPF[dsp + 69776 + (0 << 2) >> 2] = +(HEAPF[dsp + 65680 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 556) | 0) & 1023) | 0) << 2) >> 2]);
			fRec7 = +(+(HEAPF[dsp + 69776 + (1 << 2) >> 2]) - +(fTemp3));
			HEAPF[dsp + 69784 + ((((HEAP32[dsp + 20 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec7) + +(0.5 * +(HEAPF[dsp + 71832 + (1 << 2) >> 2])));
			HEAPF[dsp + 71832 + (0 << 2) >> 2] = +(HEAPF[dsp + 69784 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 441) | 0) & 511) | 0) << 2) >> 2]);
			fRec5 = +(+(HEAPF[dsp + 71832 + (1 << 2) >> 2]) - +(fRec7));
			HEAPF[dsp + 71840 + ((((HEAP32[dsp + 20 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec5) + +(0.5 * +(HEAPF[dsp + 73888 + (1 << 2) >> 2])));
			HEAPF[dsp + 73888 + (0 << 2) >> 2] = +(HEAPF[dsp + 71840 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 341) | 0) & 511) | 0) << 2) >> 2]);
			fRec3 = +(+(HEAPF[dsp + 73888 + (1 << 2) >> 2]) - +(fRec5));
			HEAPF[dsp + 73896 + ((((HEAP32[dsp + 20 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(fRec3) + +(0.5 * +(HEAPF[dsp + 74920 + (1 << 2) >> 2])));
			HEAPF[dsp + 74920 + (0 << 2) >> 2] = +(HEAPF[dsp + 73896 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 225) | 0) & 255) | 0) << 2) >> 2]);
			fRec1 = +(+(HEAPF[dsp + 74920 + (1 << 2) >> 2]) - +(fRec3));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(fSlow0) * +(fRec1)) + +(+(fSlow4) * +(fTemp0))));
			HEAPF[dsp + 74928 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 74928 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 83128 + (1 << 2) >> 2])));
			HEAPF[dsp + 74936 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 74928 + (0 << 2) >> 2])));
			HEAPF[dsp + 83128 + (0 << 2) >> 2] = +(HEAPF[dsp + 74936 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1139) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 83136 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 83136 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 91336 + (1 << 2) >> 2])));
			HEAPF[dsp + 83144 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 83136 + (0 << 2) >> 2])));
			HEAPF[dsp + 91336 + (0 << 2) >> 2] = +(HEAPF[dsp + 83144 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1211) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 91344 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 91344 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 99544 + (1 << 2) >> 2])));
			HEAPF[dsp + 91352 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 91344 + (0 << 2) >> 2])));
			HEAPF[dsp + 99544 + (0 << 2) >> 2] = +(HEAPF[dsp + 91352 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1300) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 99552 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 99552 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 107752 + (1 << 2) >> 2])));
			HEAPF[dsp + 99560 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 99552 + (0 << 2) >> 2])));
			HEAPF[dsp + 107752 + (0 << 2) >> 2] = +(HEAPF[dsp + 99560 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1379) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 107760 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 107760 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 115960 + (1 << 2) >> 2])));
			HEAPF[dsp + 107768 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 107760 + (0 << 2) >> 2])));
			HEAPF[dsp + 115960 + (0 << 2) >> 2] = +(HEAPF[dsp + 107768 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1445) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 115968 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 115968 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 124168 + (1 << 2) >> 2])));
			HEAPF[dsp + 115976 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 115968 + (0 << 2) >> 2])));
			HEAPF[dsp + 124168 + (0 << 2) >> 2] = +(HEAPF[dsp + 115976 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1514) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 124176 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 124176 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 132376 + (1 << 2) >> 2])));
			HEAPF[dsp + 124184 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 124176 + (0 << 2) >> 2])));
			HEAPF[dsp + 132376 + (0 << 2) >> 2] = +(HEAPF[dsp + 124184 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1580) | 0) & 2047) | 0) << 2) >> 2]);
			HEAPF[dsp + 132384 + (0 << 2) >> 2] = +(+(+(fSlow2) * +(HEAPF[dsp + 132384 + (1 << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 140584 + (1 << 2) >> 2])));
			HEAPF[dsp + 132392 + ((((HEAP32[dsp + 20 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow1) * +(HEAPF[dsp + 132384 + (0 << 2) >> 2])));
			HEAPF[dsp + 140584 + (0 << 2) >> 2] = +(HEAPF[dsp + 132392 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 1640) | 0) & 2047) | 0) << 2) >> 2]);
			fTemp4 = +(+(+(+(+(+(+(+(HEAPF[dsp + 83128 + (0 << 2) >> 2]) + +(HEAPF[dsp + 91336 + (0 << 2) >> 2])) + +(HEAPF[dsp + 99544 + (0 << 2) >> 2])) + +(HEAPF[dsp + 107752 + (0 << 2) >> 2])) + +(HEAPF[dsp + 115960 + (0 << 2) >> 2])) + +(HEAPF[dsp + 124168 + (0 << 2) >> 2])) + +(HEAPF[dsp + 132376 + (0 << 2) >> 2])) + +(HEAPF[dsp + 140584 + (0 << 2) >> 2]));
			HEAPF[dsp + 140592 + ((((HEAP32[dsp + 20 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(+(fTemp4) + +(0.5 * +(HEAPF[dsp + 144688 + (1 << 2) >> 2])));
			HEAPF[dsp + 144688 + (0 << 2) >> 2] = +(HEAPF[dsp + 140592 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 579) | 0) & 1023) | 0) << 2) >> 2]);
			fRec31 = +(+(HEAPF[dsp + 144688 + (1 << 2) >> 2]) - +(fTemp4));
			HEAPF[dsp + 144696 + ((((HEAP32[dsp + 20 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec31) + +(0.5 * +(HEAPF[dsp + 146744 + (1 << 2) >> 2])));
			HEAPF[dsp + 146744 + (0 << 2) >> 2] = +(HEAPF[dsp + 144696 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 464) | 0) & 511) | 0) << 2) >> 2]);
			fRec29 = +(+(HEAPF[dsp + 146744 + (1 << 2) >> 2]) - +(fRec31));
			HEAPF[dsp + 146752 + ((((HEAP32[dsp + 20 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(fRec29) + +(0.5 * +(HEAPF[dsp + 148800 + (1 << 2) >> 2])));
			HEAPF[dsp + 148800 + (0 << 2) >> 2] = +(HEAPF[dsp + 146752 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 364) | 0) & 511) | 0) << 2) >> 2]);
			fRec27 = +(+(HEAPF[dsp + 148800 + (1 << 2) >> 2]) - +(fRec29));
			HEAPF[dsp + 148808 + ((((HEAP32[dsp + 20 >> 2] | 0) & 255) | 0) << 2) >> 2] = +(+(fRec27) + +(0.5 * +(HEAPF[dsp + 149832 + (1 << 2) >> 2])));
			HEAPF[dsp + 149832 + (0 << 2) >> 2] = +(HEAPF[dsp + 148808 + ((((((HEAP32[dsp + 20 >> 2] | 0) - 248) | 0) & 255) | 0) << 2) >> 2]);
			fRec25 = +(+(HEAPF[dsp + 149832 + (1 << 2) >> 2]) - +(fRec27));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(fSlow0) * +(fRec25)) + +(+(fSlow4) * +(fTemp1))));
			HEAPF[dsp + 12 + (1 << 2) >> 2] = +(HEAPF[dsp + 12 + (0 << 2) >> 2]);
			HEAP32[dsp + 20 >> 2] = (((HEAP32[dsp + 20 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8216 + (1 << 2) >> 2] = +(HEAPF[dsp + 8216 + (0 << 2) >> 2]);
			HEAPF[dsp + 8224 + (1 << 2) >> 2] = +(HEAPF[dsp + 8224 + (0 << 2) >> 2]);
			HEAPF[dsp + 16424 + (1 << 2) >> 2] = +(HEAPF[dsp + 16424 + (0 << 2) >> 2]);
			HEAPF[dsp + 16432 + (1 << 2) >> 2] = +(HEAPF[dsp + 16432 + (0 << 2) >> 2]);
			HEAPF[dsp + 24632 + (1 << 2) >> 2] = +(HEAPF[dsp + 24632 + (0 << 2) >> 2]);
			HEAPF[dsp + 24640 + (1 << 2) >> 2] = +(HEAPF[dsp + 24640 + (0 << 2) >> 2]);
			HEAPF[dsp + 32840 + (1 << 2) >> 2] = +(HEAPF[dsp + 32840 + (0 << 2) >> 2]);
			HEAPF[dsp + 32848 + (1 << 2) >> 2] = +(HEAPF[dsp + 32848 + (0 << 2) >> 2]);
			HEAPF[dsp + 41048 + (1 << 2) >> 2] = +(HEAPF[dsp + 41048 + (0 << 2) >> 2]);
			HEAPF[dsp + 41056 + (1 << 2) >> 2] = +(HEAPF[dsp + 41056 + (0 << 2) >> 2]);
			HEAPF[dsp + 49256 + (1 << 2) >> 2] = +(HEAPF[dsp + 49256 + (0 << 2) >> 2]);
			HEAPF[dsp + 49264 + (1 << 2) >> 2] = +(HEAPF[dsp + 49264 + (0 << 2) >> 2]);
			HEAPF[dsp + 57464 + (1 << 2) >> 2] = +(HEAPF[dsp + 57464 + (0 << 2) >> 2]);
			HEAPF[dsp + 57472 + (1 << 2) >> 2] = +(HEAPF[dsp + 57472 + (0 << 2) >> 2]);
			HEAPF[dsp + 65672 + (1 << 2) >> 2] = +(HEAPF[dsp + 65672 + (0 << 2) >> 2]);
			HEAPF[dsp + 69776 + (1 << 2) >> 2] = +(HEAPF[dsp + 69776 + (0 << 2) >> 2]);
			HEAPF[dsp + 71832 + (1 << 2) >> 2] = +(HEAPF[dsp + 71832 + (0 << 2) >> 2]);
			HEAPF[dsp + 73888 + (1 << 2) >> 2] = +(HEAPF[dsp + 73888 + (0 << 2) >> 2]);
			HEAPF[dsp + 74920 + (1 << 2) >> 2] = +(HEAPF[dsp + 74920 + (0 << 2) >> 2]);
			HEAPF[dsp + 74928 + (1 << 2) >> 2] = +(HEAPF[dsp + 74928 + (0 << 2) >> 2]);
			HEAPF[dsp + 83128 + (1 << 2) >> 2] = +(HEAPF[dsp + 83128 + (0 << 2) >> 2]);
			HEAPF[dsp + 83136 + (1 << 2) >> 2] = +(HEAPF[dsp + 83136 + (0 << 2) >> 2]);
			HEAPF[dsp + 91336 + (1 << 2) >> 2] = +(HEAPF[dsp + 91336 + (0 << 2) >> 2]);
			HEAPF[dsp + 91344 + (1 << 2) >> 2] = +(HEAPF[dsp + 91344 + (0 << 2) >> 2]);
			HEAPF[dsp + 99544 + (1 << 2) >> 2] = +(HEAPF[dsp + 99544 + (0 << 2) >> 2]);
			HEAPF[dsp + 99552 + (1 << 2) >> 2] = +(HEAPF[dsp + 99552 + (0 << 2) >> 2]);
			HEAPF[dsp + 107752 + (1 << 2) >> 2] = +(HEAPF[dsp + 107752 + (0 << 2) >> 2]);
			HEAPF[dsp + 107760 + (1 << 2) >> 2] = +(HEAPF[dsp + 107760 + (0 << 2) >> 2]);
			HEAPF[dsp + 115960 + (1 << 2) >> 2] = +(HEAPF[dsp + 115960 + (0 << 2) >> 2]);
			HEAPF[dsp + 115968 + (1 << 2) >> 2] = +(HEAPF[dsp + 115968 + (0 << 2) >> 2]);
			HEAPF[dsp + 124168 + (1 << 2) >> 2] = +(HEAPF[dsp + 124168 + (0 << 2) >> 2]);
			HEAPF[dsp + 124176 + (1 << 2) >> 2] = +(HEAPF[dsp + 124176 + (0 << 2) >> 2]);
			HEAPF[dsp + 132376 + (1 << 2) >> 2] = +(HEAPF[dsp + 132376 + (0 << 2) >> 2]);
			HEAPF[dsp + 132384 + (1 << 2) >> 2] = +(HEAPF[dsp + 132384 + (0 << 2) >> 2]);
			HEAPF[dsp + 140584 + (1 << 2) >> 2] = +(HEAPF[dsp + 140584 + (0 << 2) >> 2]);
			HEAPF[dsp + 144688 + (1 << 2) >> 2] = +(HEAPF[dsp + 144688 + (0 << 2) >> 2]);
			HEAPF[dsp + 146744 + (1 << 2) >> 2] = +(HEAPF[dsp + 146744 + (0 << 2) >> 2]);
			HEAPF[dsp + 148800 + (1 << 2) >> 2] = +(HEAPF[dsp + 148800 + (0 << 2) >> 2]);
			HEAPF[dsp + 149832 + (1 << 2) >> 2] = +(HEAPF[dsp + 149832 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 149844;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/Freeverb/Wet"] = 0;
	pathTable["/Freeverb/RoomSize"] = 4;
	pathTable["/Freeverb/Damp"] = 8;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"freeverb\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"name\":\"freeverb\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Freeverb\",\"items\":[{\"type\":\"hslider\",\"label\":\"Damp\",\"address\":\"/Freeverb/Damp\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"hslider\",\"label\":\"RoomSize\",\"address\":\"/Freeverb/RoomSize\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"hslider\",\"label\":\"Wet\",\"address\":\"/Freeverb/Wet\",\"init\":\"0.3333\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("name", "freeverb");
}

