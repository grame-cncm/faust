/* ------------------------------------------------------------
name: "bowed"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 20 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 24 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 20 >> 2] | 0))))));
		HEAPF[dsp + 28 >> 2] = +(expf(+(0. - +(10. / +(HEAPF[dsp + 24 >> 2])))));
		HEAPF[dsp + 32 >> 2] = +(expf(+(0. - +(1. / +(HEAPF[dsp + 24 >> 2])))));
		HEAPF[dsp + 52 >> 2] = +(6.28318548 / +(HEAPF[dsp + 24 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 8 >> 2] = 0.5;
		HEAPF[dsp + 56 >> 2] = 0.;
		HEAPF[dsp + 60 >> 2] = 400.;
		HEAPF[dsp + 64 >> 2] = 1.;
		HEAPF[dsp + 84 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 12 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 44 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 76 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 112 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 128 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 136 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 144 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 152 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 160 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 168 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 176 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 184 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 192 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 200 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 208 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 216 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 224 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 232 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 240 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 248 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 256 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 2) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 264 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 272 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 2) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 280 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 2) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 288 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 20 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var iSlow1 = 0;
		var iSlow2 = 0;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var iSlow5 = 0;
		var iSlow6 = 0;
		var iSlow7 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var iTemp6 = 0;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(+(HEAPF[dsp + 8 >> 2])));
		iSlow1 = ~~(+(+(HEAPF[dsp + 56 >> 2])));
		iSlow2 = (((iSlow1 | 0) == 3) | 0);
		fSlow3 = +(+(+(HEAPF[dsp + 60 >> 2])) * +(+(HEAPF[dsp + 64 >> 2])));
		fSlow4 = +(0.00100000005 * +(+(HEAPF[dsp + 84 >> 2])));
		iSlow5 = (((iSlow1 | 0) == 2) | 0);
		iSlow6 = (((iSlow1 | 0) == 0) | 0);
		iSlow7 = (((iSlow1 | 0) == 1) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 12 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 12 + (1 << 2) >> 2])));
			fTemp0 = +(fabsf(+(fabsf(+(+(HEAPF[dsp + 12 + (0 << 2) >> 2]) - +(HEAPF[dsp + 12 + (1 << 2) >> 2]))))));
			fTemp1 = +(((+(HEAPF[dsp + 44 + (1 << 2) >> 2]) > +(fTemp0)) | 0)?+(HEAPF[dsp + 32 >> 2]):+(HEAPF[dsp + 28 >> 2]));
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 36 + (1 << 2) >> 2]) * +(fTemp1)) + +(+(fTemp0) * +(1. - +(fTemp1))));
			HEAPF[dsp + 44 + (0 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +((iSlow2 | 0)?+(fSlow3):+(HEAPF[dsp + 68 + (1 << 2) >> 2]));
			HEAPF[dsp + 76 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 76 + (1 << 2) >> 2])) + +(0.00100000005 * +(HEAPF[dsp + 68 + (0 << 2) >> 2])));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(+(fSlow4) + +(0.999000013 * +(HEAPF[dsp + 88 + (1 << 2) >> 2])));
			fTemp2 = +(+(0.300000012 * +(HEAPF[dsp + 88 + (0 << 2) >> 2])) + 1.);
			fTemp3 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 76 + (0 << 2) >> 2]) * +(fTemp2)));
			fTemp4 = +(sinf(+(fTemp3)));
			fTemp5 = +(cosf(+(fTemp3)));
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 104 + (1 << 2) >> 2]) * +(fTemp4)) + +(+(HEAPF[dsp + 96 + (1 << 2) >> 2]) * +(fTemp5)));
			iTemp6 = ((1 - (HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 104 + (1 << 2) >> 2]) * +(fTemp5)) + +(+(HEAPF[dsp + 96 + (1 << 2) >> 2]) * +(0. - +(fTemp4)))) + +((iTemp6 | 0)));
			HEAPF[dsp + 112 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 112 + (1 << 2) >> 2])));
			fTemp7 = +(fabsf(+(fabsf(+(+(HEAPF[dsp + 112 + (0 << 2) >> 2]) - +(HEAPF[dsp + 112 + (1 << 2) >> 2]))))));
			fTemp8 = +(((+(HEAPF[dsp + 128 + (1 << 2) >> 2]) > +(fTemp7)) | 0)?+(HEAPF[dsp + 32 >> 2]):+(HEAPF[dsp + 28 >> 2]));
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 120 + (1 << 2) >> 2]) * +(fTemp8)) + +(+(fTemp7) * +(1. - +(fTemp8))));
			HEAPF[dsp + 128 + (0 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			fTemp9 = +(min_f(1., +(8000. * +(HEAPF[dsp + 128 + (0 << 2) >> 2]))));
			fTemp10 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 76 + (0 << 2) >> 2]) + +(1000. * +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) * +(fTemp9)))));
			fTemp11 = +(sinf(+(fTemp10)));
			fTemp12 = +(cosf(+(fTemp10)));
			HEAPF[dsp + 136 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 144 + (1 << 2) >> 2]) * +(fTemp11)) + +(+(HEAPF[dsp + 136 + (1 << 2) >> 2]) * +(fTemp12)));
			HEAPF[dsp + 144 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 144 + (1 << 2) >> 2]) * +(fTemp12)) + +(+(HEAPF[dsp + 136 + (1 << 2) >> 2]) * +(0. - +(fTemp11)))) + +((iTemp6 | 0)));
			HEAPF[dsp + 152 + (0 << 2) >> 2] = +((iSlow5 | 0)?+(fSlow3):+(HEAPF[dsp + 152 + (1 << 2) >> 2]));
			HEAPF[dsp + 160 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 160 + (1 << 2) >> 2])) + +(0.00100000005 * +(HEAPF[dsp + 152 + (0 << 2) >> 2])));
			fTemp13 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 160 + (0 << 2) >> 2]) * +(fTemp2)));
			fTemp14 = +(sinf(+(fTemp13)));
			fTemp15 = +(cosf(+(fTemp13)));
			HEAPF[dsp + 168 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 176 + (1 << 2) >> 2]) * +(fTemp14)) + +(+(HEAPF[dsp + 168 + (1 << 2) >> 2]) * +(fTemp15)));
			HEAPF[dsp + 176 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 176 + (1 << 2) >> 2]) * +(fTemp15)) + +(+(HEAPF[dsp + 168 + (1 << 2) >> 2]) * +(0. - +(fTemp14)))) + +((iTemp6 | 0)));
			fTemp16 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 160 + (0 << 2) >> 2]) + +(1000. * +(+(HEAPF[dsp + 168 + (0 << 2) >> 2]) * +(fTemp9)))));
			fTemp17 = +(sinf(+(fTemp16)));
			fTemp18 = +(cosf(+(fTemp16)));
			HEAPF[dsp + 184 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 192 + (1 << 2) >> 2]) * +(fTemp17)) + +(+(HEAPF[dsp + 184 + (1 << 2) >> 2]) * +(fTemp18)));
			HEAPF[dsp + 192 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 192 + (1 << 2) >> 2]) * +(fTemp18)) + +(+(HEAPF[dsp + 184 + (1 << 2) >> 2]) * +(0. - +(fTemp17)))) + +((iTemp6 | 0)));
			HEAPF[dsp + 200 + (0 << 2) >> 2] = +((iSlow6 | 0)?+(fSlow3):+(HEAPF[dsp + 200 + (1 << 2) >> 2]));
			HEAPF[dsp + 208 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 208 + (1 << 2) >> 2])) + +(0.00100000005 * +(HEAPF[dsp + 200 + (0 << 2) >> 2])));
			fTemp19 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 208 + (0 << 2) >> 2]) * +(fTemp2)));
			fTemp20 = +(sinf(+(fTemp19)));
			fTemp21 = +(cosf(+(fTemp19)));
			HEAPF[dsp + 216 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 224 + (1 << 2) >> 2]) * +(fTemp20)) + +(+(HEAPF[dsp + 216 + (1 << 2) >> 2]) * +(fTemp21)));
			HEAPF[dsp + 224 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 224 + (1 << 2) >> 2]) * +(fTemp21)) + +(+(HEAPF[dsp + 216 + (1 << 2) >> 2]) * +(0. - +(fTemp20)))) + +((iTemp6 | 0)));
			fTemp22 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 208 + (0 << 2) >> 2]) + +(1000. * +(+(HEAPF[dsp + 216 + (0 << 2) >> 2]) * +(fTemp9)))));
			fTemp23 = +(sinf(+(fTemp22)));
			fTemp24 = +(cosf(+(fTemp22)));
			HEAPF[dsp + 232 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 240 + (1 << 2) >> 2]) * +(fTemp23)) + +(+(HEAPF[dsp + 232 + (1 << 2) >> 2]) * +(fTemp24)));
			HEAPF[dsp + 240 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 240 + (1 << 2) >> 2]) * +(fTemp24)) + +(+(HEAPF[dsp + 232 + (1 << 2) >> 2]) * +(0. - +(fTemp23)))) + +((iTemp6 | 0)));
			HEAPF[dsp + 248 + (0 << 2) >> 2] = +((iSlow7 | 0)?+(fSlow3):+(HEAPF[dsp + 248 + (1 << 2) >> 2]));
			HEAPF[dsp + 256 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 256 + (1 << 2) >> 2])) + +(0.00100000005 * +(HEAPF[dsp + 248 + (0 << 2) >> 2])));
			fTemp25 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 256 + (0 << 2) >> 2]) * +(fTemp2)));
			fTemp26 = +(sinf(+(fTemp25)));
			fTemp27 = +(cosf(+(fTemp25)));
			HEAPF[dsp + 264 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 272 + (1 << 2) >> 2]) * +(fTemp26)) + +(+(HEAPF[dsp + 264 + (1 << 2) >> 2]) * +(fTemp27)));
			HEAPF[dsp + 272 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 272 + (1 << 2) >> 2]) * +(fTemp27)) + +(+(HEAPF[dsp + 264 + (1 << 2) >> 2]) * +(0. - +(fTemp26)))) + +((iTemp6 | 0)));
			fTemp28 = +(+(HEAPF[dsp + 52 >> 2]) * +(+(HEAPF[dsp + 256 + (0 << 2) >> 2]) + +(1000. * +(+(HEAPF[dsp + 264 + (0 << 2) >> 2]) * +(fTemp9)))));
			fTemp29 = +(sinf(+(fTemp28)));
			fTemp30 = +(cosf(+(fTemp28)));
			HEAPF[dsp + 280 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 288 + (1 << 2) >> 2]) * +(fTemp29)) + +(+(HEAPF[dsp + 280 + (1 << 2) >> 2]) * +(fTemp30)));
			HEAPF[dsp + 288 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 288 + (1 << 2) >> 2]) * +(fTemp30)) + +(+(HEAPF[dsp + 280 + (1 << 2) >> 2]) * +(0. - +(fTemp29)))) + +((iTemp6 | 0)));
			fTemp31 = +(+(min_f(1., +(8000. * +(HEAPF[dsp + 44 + (0 << 2) >> 2])))) * +(+(HEAPF[dsp + 136 + (0 << 2) >> 2]) + +(+(HEAPF[dsp + 184 + (0 << 2) >> 2]) + +(+(HEAPF[dsp + 232 + (0 << 2) >> 2]) + +(HEAPF[dsp + 280 + (0 << 2) >> 2])))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp31));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp31));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 12 + (1 << 2) >> 2] = +(HEAPF[dsp + 12 + (0 << 2) >> 2]);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 44 + (1 << 2) >> 2] = +(HEAPF[dsp + 44 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 + (1 << 2) >> 2] = +(HEAPF[dsp + 76 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 112 + (1 << 2) >> 2] = +(HEAPF[dsp + 112 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			HEAPF[dsp + 128 + (1 << 2) >> 2] = +(HEAPF[dsp + 128 + (0 << 2) >> 2]);
			HEAPF[dsp + 136 + (1 << 2) >> 2] = +(HEAPF[dsp + 136 + (0 << 2) >> 2]);
			HEAPF[dsp + 144 + (1 << 2) >> 2] = +(HEAPF[dsp + 144 + (0 << 2) >> 2]);
			HEAPF[dsp + 152 + (1 << 2) >> 2] = +(HEAPF[dsp + 152 + (0 << 2) >> 2]);
			HEAPF[dsp + 160 + (1 << 2) >> 2] = +(HEAPF[dsp + 160 + (0 << 2) >> 2]);
			HEAPF[dsp + 168 + (1 << 2) >> 2] = +(HEAPF[dsp + 168 + (0 << 2) >> 2]);
			HEAPF[dsp + 176 + (1 << 2) >> 2] = +(HEAPF[dsp + 176 + (0 << 2) >> 2]);
			HEAPF[dsp + 184 + (1 << 2) >> 2] = +(HEAPF[dsp + 184 + (0 << 2) >> 2]);
			HEAPF[dsp + 192 + (1 << 2) >> 2] = +(HEAPF[dsp + 192 + (0 << 2) >> 2]);
			HEAPF[dsp + 200 + (1 << 2) >> 2] = +(HEAPF[dsp + 200 + (0 << 2) >> 2]);
			HEAPF[dsp + 208 + (1 << 2) >> 2] = +(HEAPF[dsp + 208 + (0 << 2) >> 2]);
			HEAPF[dsp + 216 + (1 << 2) >> 2] = +(HEAPF[dsp + 216 + (0 << 2) >> 2]);
			HEAPF[dsp + 224 + (1 << 2) >> 2] = +(HEAPF[dsp + 224 + (0 << 2) >> 2]);
			HEAPF[dsp + 232 + (1 << 2) >> 2] = +(HEAPF[dsp + 232 + (0 << 2) >> 2]);
			HEAPF[dsp + 240 + (1 << 2) >> 2] = +(HEAPF[dsp + 240 + (0 << 2) >> 2]);
			HEAPF[dsp + 248 + (1 << 2) >> 2] = +(HEAPF[dsp + 248 + (0 << 2) >> 2]);
			HEAPF[dsp + 256 + (1 << 2) >> 2] = +(HEAPF[dsp + 256 + (0 << 2) >> 2]);
			HEAPF[dsp + 264 + (1 << 2) >> 2] = +(HEAPF[dsp + 264 + (0 << 2) >> 2]);
			HEAPF[dsp + 272 + (1 << 2) >> 2] = +(HEAPF[dsp + 272 + (0 << 2) >> 2]);
			HEAPF[dsp + 280 + (1 << 2) >> 2] = +(HEAPF[dsp + 280 + (0 << 2) >> 2]);
			HEAPF[dsp + 288 + (1 << 2) >> 2] = +(HEAPF[dsp + 288 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 296;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/bowed/x"] = 8;
	pathTable["/bowed/keyboard"] = 56;
	pathTable["/bowed/freq"] = 60;
	pathTable["/bowed/bend"] = 64;
	pathTable["/bowed/y"] = 84;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"bowed\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 0 - Send Y':'0',  'Keyboard 1 - Send Y':'0',  'Keyboard 2 - Send Y':'0',  'Keyboard 3 - Send Y':'0',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 4 - Key 0 - Label':'Bow' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"bowed\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"bowed\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/bowed/bend\",\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/bowed/freq\",\"init\":\"400\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"keyboard\",\"address\":\"/bowed/keyboard\",\"init\":\"0\",\"min\":\"0\",\"max\":\"5\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"x\",\"address\":\"/bowed/x\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/bowed/y\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("analyzers.lib/name", "Faust Analyzer Library");
	m.declare("analyzers.lib/version", "0.0");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 0 - Send Y':'0',  'Keyboard 1 - Send Y':'0',  'Keyboard 2 - Send Y':'0',  'Keyboard 3 - Send Y':'0',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 4 - Key 0 - Label':'Bow' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "bowed");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("synths.lib/name", "Faust Synthesizer Library");
	m.declare("synths.lib/version", "0.0");
}

