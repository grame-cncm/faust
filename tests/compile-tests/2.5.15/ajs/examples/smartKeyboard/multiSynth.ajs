/* ------------------------------------------------------------
name: "multiSynth"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var fabsf = foreign.abs;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 36 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 40 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 36 >> 2] | 0))))));
		HEAPF[dsp + 44 >> 2] = +(3.14159274 / +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 64 >> 2] = +(0.25 * +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 68 >> 2] = +(1. / +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 16500 >> 2] = +(0.5 * +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 16504 >> 2] = +(4. / +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 16516 >> 2] = +(6.28318548 / +(HEAPF[dsp + 40 >> 2]));
		HEAPF[dsp + 16536 >> 2] = +(1. / +(HEAPF[dsp + 40 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 8 >> 2] = 0.;
		HEAPF[dsp + 12 >> 2] = 0.;
		HEAPF[dsp + 24 >> 2] = 1.;
		HEAPF[dsp + 48 >> 2] = 1.;
		HEAPF[dsp + 60 >> 2] = 0.;
		HEAPF[dsp + 72 >> 2] = 300.;
		HEAPF[dsp + 76 >> 2] = 1.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 112 >> 2] = 0;
		for (l8 = 0; (((l8 | 0) < 4096) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 116 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 16508 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 16520 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 16528 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 16540 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 16548 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 16556 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 3) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 16564 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 36 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var iSlow3 = 0;
		var iSlow4 = 0;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var iSlow7 = 0;
		var iSlow8 = 0;
		var fSlow9 = 0.;
		var iSlow10 = 0;
		var fSlow11 = 0.;
		var iSlow12 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var iTemp3 = 0;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var iTemp11 = 0;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var iTemp20 = 0;
		var fRec10 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(min_f(1., +(+(+(HEAPF[dsp + 8 >> 2])) + +(+(HEAPF[dsp + 12 >> 2])))));
		fSlow1 = +(0.00100000005 * +(+(fSlow0) * +(+(HEAPF[dsp + 24 >> 2]))));
		fSlow2 = +(0.00100000005 * +(+(HEAPF[dsp + 48 >> 2])));
		iSlow3 = ~~(+(+(HEAPF[dsp + 60 >> 2])));
		iSlow4 = (((iSlow3 | 0) == 2) | 0);
		fSlow5 = +(+(HEAPF[dsp + 72 >> 2]));
		fSlow6 = +(+(HEAPF[dsp + 76 >> 2]));
		iSlow7 = ((+(fSlow0) == 0.) | 0);
		iSlow8 = (((iSlow3 | 0) == 1) | 0);
		fSlow9 = +(+(HEAPF[dsp + 16504 >> 2]) * +(fSlow5));
		iSlow10 = (((iSlow3 | 0) == 3) | 0);
		fSlow11 = +(+(HEAPF[dsp + 16516 >> 2]) * +(fSlow5));
		iSlow12 = (((iSlow3 | 0) == 0) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(fSlow0);
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 28 + (1 << 2) >> 2])));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(fSlow2) + +(0.999000013 * +(HEAPF[dsp + 52 + (1 << 2) >> 2])));
			fTemp0 = +(tanf(+(+(HEAPF[dsp + 44 >> 2]) * +(+(4000. * +(HEAPF[dsp + 52 + (0 << 2) >> 2])) + 50.))));
			fTemp1 = +(1. / +(fTemp0));
			fTemp2 = +(+(fTemp1) + 1.);
			iTemp3 = ((((+(fSlow0) == +(HEAPF[dsp + 16 + (1 << 2) >> 2])) | 0) | (iSlow7 | 0)) | 0);
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(+(fSlow6) * +(1. - +(0.999000013 * +((iTemp3 | 0))))) + +(0.999000013 * +(+((iTemp3 | 0)) * +(HEAPF[dsp + 80 + (1 << 2) >> 2]))));
			fTemp4 = +(+(fSlow5) * +(HEAPF[dsp + 80 + (0 << 2) >> 2]));
			fTemp5 = +(max_f(+(fTemp4), 23.4489498));
			fTemp6 = +(max_f(20., +(fabsf(+(fTemp5)))));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(fTemp6);
			fTemp7 = +(+(HEAPF[dsp + 96 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 68 >> 2]) * +(HEAPF[dsp + 88 + (1 << 2) >> 2])));
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(fTemp7) - +(floorf(+(fTemp7))));
			fTemp8 = +(powf(+(+(2. * +(HEAPF[dsp + 96 + (0 << 2) >> 2])) + -1.), 2.));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(fTemp8);
			fTemp9 = +(+(+((HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)) * +(+(fTemp8) - +(HEAPF[dsp + 104 + (1 << 2) >> 2]))) / +(fTemp6));
			HEAPF[dsp + 116 + ((((HEAP32[dsp + 112 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp9);
			fTemp10 = +(max_f(0., +(min_f(2047., +(+(HEAPF[dsp + 16500 >> 2]) / +(fTemp5))))));
			iTemp11 = ~~(+(fTemp10));
			fTemp12 = +(floorf(+(fTemp10)));
			fTemp13 = +(+(HEAPF[dsp + 64 >> 2]) * +(+(+(fTemp9) - +(+(HEAPF[dsp + 116 + ((((((HEAP32[dsp + 112 >> 2] | 0) - (iTemp11 | 0)) | 0) & 4095) | 0) << 2) >> 2]) * +(+(fTemp12) + +(1. - +(fTemp10))))) - +(+(+(fTemp10) - +(fTemp12)) * +(HEAPF[dsp + 116 + ((((((HEAP32[dsp + 112 >> 2] | 0) - (((iTemp11 | 0) + 1) | 0)) | 0) & 4095) | 0) << 2) >> 2]))));
			HEAPF[dsp + 16508 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 16508 + (1 << 2) >> 2])) + +(fTemp13));
			fTemp14 = +(+(fSlow11) * +(HEAPF[dsp + 80 + (0 << 2) >> 2]));
			fTemp15 = +(sinf(+(fTemp14)));
			fTemp16 = +(cosf(+(fTemp14)));
			HEAPF[dsp + 16520 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 16528 + (1 << 2) >> 2]) * +(fTemp15)) + +(+(HEAPF[dsp + 16520 + (1 << 2) >> 2]) * +(fTemp16)));
			HEAPF[dsp + 16528 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 16528 + (1 << 2) >> 2]) * +(fTemp16)) + +(+(HEAPF[dsp + 16520 + (1 << 2) >> 2]) * +(0. - +(fTemp15)))) + +(((1 - (HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)) | 0)));
			fTemp17 = +(max_f(1.00000001e-07, +(fabsf(+(fTemp4)))));
			fTemp18 = +(+(HEAPF[dsp + 16540 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 16536 >> 2]) * +(fTemp17)));
			fTemp19 = +(+(fTemp18) + -1.);
			iTemp20 = ((+(fTemp19) < 0.) | 0);
			HEAPF[dsp + 16540 + (0 << 2) >> 2] = +((iTemp20 | 0)?+(fTemp18):+(fTemp19));
			fRec10 = +((iTemp20 | 0)?+(fTemp18):+(+(fTemp18) + +(+(1. - +(+(HEAPF[dsp + 40 >> 2]) / +(fTemp17))) * +(fTemp19))));
			fTemp21 = +(+((iSlow4 | 0)?+(fTemp13):0.) + +(+((iSlow8 | 0)?+(+(fSlow9) * +(+(HEAPF[dsp + 80 + (0 << 2) >> 2]) * +(HEAPF[dsp + 16508 + (0 << 2) >> 2]))):0.) + +(+((iSlow10 | 0)?+(HEAPF[dsp + 16520 + (0 << 2) >> 2]):0.) + +((iSlow12 | 0)?+(+(2. * +(fRec10)) + -1.):0.))));
			HEAPF[dsp + 16548 + (0 << 2) >> 2] = +(fTemp21);
			HEAPF[dsp + 16556 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 16556 + (1 << 2) >> 2]) * +(0. - +(+(1. - +(fTemp1)) / +(fTemp2)))) + +(+(+(fTemp21) + +(HEAPF[dsp + 16548 + (1 << 2) >> 2])) / +(fTemp2)));
			fTemp22 = +(+(+(+(fTemp1) + 1.) / +(fTemp0)) + 1.);
			HEAPF[dsp + 16564 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 16556 + (0 << 2) >> 2]) - +(+(+(+(HEAPF[dsp + 16564 + (2 << 2) >> 2]) * +(+(+(+(fTemp1) + -1.) / +(fTemp0)) + 1.)) + +(2. * +(+(HEAPF[dsp + 16564 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp0), 2.))))))) / +(fTemp22)));
			fTemp23 = +(+(+(HEAPF[dsp + 28 + (0 << 2) >> 2]) * +(+(HEAPF[dsp + 16564 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 16564 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 16564 + (1 << 2) >> 2]))))) / +(fTemp22));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp23));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp23));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAP32[dsp + 112 >> 2] = (((HEAP32[dsp + 112 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 16508 + (1 << 2) >> 2] = +(HEAPF[dsp + 16508 + (0 << 2) >> 2]);
			HEAPF[dsp + 16520 + (1 << 2) >> 2] = +(HEAPF[dsp + 16520 + (0 << 2) >> 2]);
			HEAPF[dsp + 16528 + (1 << 2) >> 2] = +(HEAPF[dsp + 16528 + (0 << 2) >> 2]);
			HEAPF[dsp + 16540 + (1 << 2) >> 2] = +(HEAPF[dsp + 16540 + (0 << 2) >> 2]);
			HEAPF[dsp + 16548 + (1 << 2) >> 2] = +(HEAPF[dsp + 16548 + (0 << 2) >> 2]);
			HEAPF[dsp + 16556 + (1 << 2) >> 2] = +(HEAPF[dsp + 16556 + (0 << 2) >> 2]);
			HEAPF[dsp + 16564 + (2 << 2) >> 2] = +(HEAPF[dsp + 16564 + (1 << 2) >> 2]);
			HEAPF[dsp + 16564 + (1 << 2) >> 2] = +(HEAPF[dsp + 16564 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 16576;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/multiSynth/gate"] = 8;
	pathTable["/multiSynth/sustain"] = 12;
	pathTable["/multiSynth/gain"] = 24;
	pathTable["/multiSynth/y"] = 48;
	pathTable["/multiSynth/keyboard"] = 60;
	pathTable["/multiSynth/freq"] = 72;
	pathTable["/multiSynth/bend"] = 76;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"multiSynth\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'4',  'Rounding Mode':'2',  'Inter-Keyboard Slide':'0',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'60',  'Keyboard 1 - Lowest Key':'60',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'60',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"multiSynth\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"multiSynth\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/multiSynth/bend\",\"meta\":[{\"midi\":\"pitchwheel\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/multiSynth/freq\",\"init\":\"300\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/multiSynth/gain\",\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/multiSynth/gate\"},{\"type\":\"hslider\",\"label\":\"keyboard\",\"address\":\"/multiSynth/keyboard\",\"init\":\"0\",\"min\":\"0\",\"max\":\"3\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/multiSynth/sustain\",\"meta\":[{\"midi\":\"ctrl 64\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/multiSynth/y\",\"meta\":[{\"midi\":\"ctrl 1\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'4',  'Rounding Mode':'2',  'Inter-Keyboard Slide':'0',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'60',  'Keyboard 1 - Lowest Key':'60',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'60',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "multiSynth");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

