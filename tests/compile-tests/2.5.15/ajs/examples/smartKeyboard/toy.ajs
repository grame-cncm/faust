/* ------------------------------------------------------------
name: "toy"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 16 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 12 >> 2] | 0))))));
		HEAPF[dsp + 32 >> 2] = +(1. / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 64 >> 2] = +(3.14159274 / +(HEAPF[dsp + 16 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 20 >> 2] = 0.5;
		HEAPF[dsp + 36 >> 2] = 0.5;
		HEAPF[dsp + 68 >> 2] = 0.5;
		HEAPF[dsp + 80 >> 2] = 30.;
		HEAPF[dsp + 524396 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 84 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 3) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 92 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 104 >> 2] = 0;
		for (l8 = 0; (((l8 | 0) < 131072) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 108 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 524400 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 12 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(+(HEAPF[dsp + 0 >> 2])));
		fSlow1 = +(0.00100000005 * +(+(HEAPF[dsp + 20 >> 2])));
		fSlow2 = +(0.00100000005 * +(+(HEAPF[dsp + 36 >> 2])));
		fSlow3 = +(0.00100000005 * +(+(HEAPF[dsp + 68 >> 2])));
		fSlow4 = +(0.00100000005 * +(+(HEAPF[dsp + 80 >> 2])));
		fSlow5 = +(0.00100000005 * +(+(HEAPF[dsp + 524396 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 4 + (1 << 2) >> 2])));
			HEAPF[dsp + 24 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 24 + (1 << 2) >> 2])));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(+(fSlow2) + +(0.999000013 * +(HEAPF[dsp + 40 + (1 << 2) >> 2])));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(+(20. * +(HEAPF[dsp + 40 + (0 << 2) >> 2])) + 2.);
			fTemp0 = +(+(HEAPF[dsp + 56 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 32 >> 2]) * +(HEAPF[dsp + 48 + (1 << 2) >> 2])));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(+(fTemp0) - +(floorf(+(fTemp0))));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(+(fSlow3) + +(0.999000013 * +(HEAPF[dsp + 72 + (1 << 2) >> 2])));
			fTemp1 = +(tanf(+(+(HEAPF[dsp + 64 >> 2]) * +(+(3000. * +(HEAPF[dsp + 72 + (0 << 2) >> 2])) + 300.))));
			fTemp2 = +(1. / +(fTemp1));
			HEAPF[dsp + 84 + (0 << 2) >> 2] = +(+(fSlow4) + +(0.999000013 * +(HEAPF[dsp + 84 + (1 << 2) >> 2])));
			fTemp3 = +(1. / +(HEAPF[dsp + 84 + (0 << 2) >> 2]));
			fTemp4 = +(+(+(+(fTemp2) + +(fTemp3)) / +(fTemp1)) + 1.);
			HEAPF[dsp + 92 + (0 << 2) >> 2] = +(+(((+(+(HEAPF[dsp + 56 + (0 << 2) >> 2]) - +(HEAPF[dsp + 56 + (1 << 2) >> 2])) < 0.) | 0)) - +(+(+(+(HEAPF[dsp + 92 + (2 << 2) >> 2]) * +(+(+(+(fTemp2) - +(fTemp3)) / +(fTemp1)) + 1.)) + +(2. * +(+(HEAPF[dsp + 92 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp1), 2.))))))) / +(fTemp4)));
			HEAPF[dsp + 108 + ((((HEAP32[dsp + 104 >> 2] | 0) & 131071) | 0) << 2) >> 2] = +(+(+(HEAPF[dsp + 4 + (0 << 2) >> 2]) * +(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - ((~~(+(min_f(65536., +(max_f(0., +(+(HEAPF[dsp + 16 >> 2]) * +(HEAPF[dsp + 24 + (0 << 2) >> 2]))))))) + 1) | 0)) | 0) & 131071) | 0) << 2) >> 2])) + +(+(+(HEAPF[dsp + 92 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 92 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 92 + (1 << 2) >> 2])))) / +(fTemp4)));
			HEAPF[dsp + 524400 + (0 << 2) >> 2] = +(+(fSlow5) + +(0.999000013 * +(HEAPF[dsp + 524400 + (1 << 2) >> 2])));
			fTemp5 = +(max_f(-1., +(min_f(1., +(+(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - 0) | 0) & 131071) | 0) << 2) >> 2]) * +(powf(10., +(2. * +(HEAPF[dsp + 524400 + (0 << 2) >> 2])))))))));
			fTemp6 = +(0.949999988 * +(+(fTemp5) * +(1. - +(0.333333343 * +(powf(+(fTemp5), 2.))))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp6));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp6));
			HEAPF[dsp + 4 + (1 << 2) >> 2] = +(HEAPF[dsp + 4 + (0 << 2) >> 2]);
			HEAPF[dsp + 24 + (1 << 2) >> 2] = +(HEAPF[dsp + 24 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 84 + (1 << 2) >> 2] = +(HEAPF[dsp + 84 + (0 << 2) >> 2]);
			HEAPF[dsp + 92 + (2 << 2) >> 2] = +(HEAPF[dsp + 92 + (1 << 2) >> 2]);
			HEAPF[dsp + 92 + (1 << 2) >> 2] = +(HEAPF[dsp + 92 + (0 << 2) >> 2]);
			HEAP32[dsp + 104 >> 2] = (((HEAP32[dsp + 104 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 524400 + (1 << 2) >> 2] = +(HEAPF[dsp + 524400 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 524408;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/toy/fb"] = 0;
	pathTable["/toy/del"] = 20;
	pathTable["/toy/x0"] = 36;
	pathTable["/toy/y0"] = 68;
	pathTable["/toy/q"] = 80;
	pathTable["/toy/y1"] = 524396;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"toy\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'1',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'1',  'Keyboard 0 - Send Freq':'0',  'Keyboard 0 - Static Mode':'1',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 0 - Send Numbered X':'1',  'Keyboard 0 - Send Numbered Y':'1' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"misceffects.lib/name\":\"Faust Math Library\"},{\"misceffects.lib/version\":\"2.0\"},{\"name\":\"toy\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"toy\",\"items\":[{\"type\":\"hslider\",\"label\":\"del\",\"address\":\"/toy/del\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"0.5\",\"min\":\"0.01\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"fb\",\"address\":\"/toy/fb\",\"meta\":[{\"acc\":\"1 0 -10 0 10\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"q\",\"address\":\"/toy/q\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"30\",\"min\":\"10\",\"max\":\"50\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"x0\",\"address\":\"/toy/x0\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"y0\",\"address\":\"/toy/y0\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"y1\",\"address\":\"/toy/y1\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'1',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'1',  'Keyboard 0 - Send Freq':'0',  'Keyboard 0 - Static Mode':'1',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 0 - Send Numbered X':'1',  'Keyboard 0 - Send Numbered Y':'1' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("misceffects.lib/name", "Faust Math Library");
	m.declare("misceffects.lib/version", "2.0");
	m.declare("name", "toy");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

