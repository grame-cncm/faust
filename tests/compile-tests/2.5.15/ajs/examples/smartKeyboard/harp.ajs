/* ------------------------------------------------------------
name: "harp"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var expf = foreign.exp;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 20 >> 2] = +(1000. / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 48 >> 2] = +(0.00200000009 * +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 60 >> 2] = +(0.00100000005 * +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 16 >> 2] = 400.;
		HEAPF[dsp + 24 >> 2] = 2.;
		HEAPF[dsp + 36 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAP32[dsp + 28 + ((l1 | 0) << 2) >> 2] = 0;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 64 >> 2] = 0;
		for (l4 = 0; (((l4 | 0) < 2048) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 8260 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 8268 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var iSlow6 = 0;
		var iSlow7 = 0;
		var fSlow8 = 0.;
		var iSlow9 = 0;
		var i = 0;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 4 >> 2]) / +(+(HEAPF[dsp + 16 >> 2])));
		fSlow1 = +(+(fSlow0) + -1.);
		fSlow2 = +(floorf(+(fSlow1)));
		fSlow3 = +(+(fSlow2) + +(2. - +(fSlow0)));
		fSlow4 = +(expf(+(0. - +(+(HEAPF[dsp + 20 >> 2]) / +(+(HEAPF[dsp + 24 >> 2]))))));
		fSlow5 = +(+(HEAPF[dsp + 36 >> 2]));
		iSlow6 = ~~(+(fSlow1));
		iSlow7 = ((min_i(1025, ((max_i(0, (iSlow6 | 0))) | 0))) | 0);
		fSlow8 = +(+(fSlow0) + +(-1. - +(fSlow2)));
		iSlow9 = ((min_i(1025, ((max_i(0, (((iSlow6 | 0) + 1) | 0))) | 0))) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + (0 << 2) >> 2] = +(HEAPF[dsp + 4 >> 2]);
			HEAP32[dsp + 28 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 28 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(fSlow5);
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(((((+(+(fSlow5) - +(HEAPF[dsp + 40 + (1 << 2) >> 2])) > 0.) | 0) > 0) | 0)?0.:+(min_f(+(HEAPF[dsp + 48 >> 2]), +(+(+(HEAPF[dsp + 52 + (1 << 2) >> 2]) + +(0.00200000009 * +(+(HEAPF[dsp + 4 >> 2]) - +(HEAPF[dsp + 8 + (1 << 2) >> 2])))) + 1.))));
			iTemp0 = ((+(HEAPF[dsp + 52 + (0 << 2) >> 2]) < +(HEAPF[dsp + 60 >> 2])) | 0);
			fTemp1 = +(+(+(fSlow4) * +(HEAPF[dsp + 8260 + (1 << 2) >> 2])) + +(4.65661287e-10 * +(+((HEAP32[dsp + 28 + (0 << 2) >> 2] | 0)) * +((iTemp0 | 0)?+(((+(HEAPF[dsp + 52 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp0 | 0)?+(+(HEAPF[dsp + 20 >> 2]) * +(HEAPF[dsp + 52 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 52 + (0 << 2) >> 2]) < +(HEAPF[dsp + 48 >> 2])) | 0)?+(+(+(HEAPF[dsp + 20 >> 2]) * +(0. - +(+(HEAPF[dsp + 52 + (0 << 2) >> 2]) - +(HEAPF[dsp + 60 >> 2])))) + 1.):0.)))));
			HEAPF[dsp + 68 + ((((HEAP32[dsp + 64 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp1);
			HEAPF[dsp + 8260 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 68 + ((((((HEAP32[dsp + 64 >> 2] | 0) - (iSlow7 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fSlow8) * +(HEAPF[dsp + 68 + ((((((HEAP32[dsp + 64 >> 2] | 0) - (iSlow9 | 0)) | 0) & 2047) | 0) << 2) >> 2])));
			HEAPF[dsp + 8268 + (0 << 2) >> 2] = +(fTemp1);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(HEAPF[dsp + 8268 + (1 << 2) >> 2]));
			HEAPF[dsp + 8 + (1 << 2) >> 2] = +(HEAPF[dsp + 8 + (0 << 2) >> 2]);
			HEAP32[dsp + 28 + (1 << 2) >> 2] = (HEAP32[dsp + 28 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAP32[dsp + 64 >> 2] = (((HEAP32[dsp + 64 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8260 + (1 << 2) >> 2] = +(HEAPF[dsp + 8260 + (0 << 2) >> 2]);
			HEAPF[dsp + 8268 + (1 << 2) >> 2] = +(HEAPF[dsp + 8268 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 8276;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/harp/gate"] = 36;
	pathTable["/harp/freq"] = 16;
	pathTable["/harp/res"] = 24;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"harp\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Lowest Key':'40',  'Keyboard 1 - Lowest Key':'45',  'Keyboard 2 - Lowest Key':'50',  'Keyboard 3 - Lowest Key':'55',  'Keyboard 4 - Lowest Key':'60',  'Keyboard 5 - Lowest Key':'65',  'Keyboard 6 - Lowest Key':'70',  'Keyboard 7 - Lowest Key':'75',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"harp\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"harp\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/harp/freq\",\"init\":\"400\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/harp/gate\"},{\"type\":\"hslider\",\"label\":\"res\",\"address\":\"/harp/res\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"2\",\"min\":\"0.1\",\"max\":\"4\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("envelopes.lib/author", "GRAME");
	m.declare("envelopes.lib/copyright", "GRAME");
	m.declare("envelopes.lib/license", "LGPL with exception");
	m.declare("envelopes.lib/name", "Faust Envelope Library");
	m.declare("envelopes.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Lowest Key':'40',  'Keyboard 1 - Lowest Key':'45',  'Keyboard 2 - Lowest Key':'50',  'Keyboard 3 - Lowest Key':'55',  'Keyboard 4 - Lowest Key':'60',  'Keyboard 5 - Lowest Key':'65',  'Keyboard 6 - Lowest Key':'70',  'Keyboard 7 - Lowest Key':'75',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "harp");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("synths.lib/name", "Faust Synthesizer Library");
	m.declare("synths.lib/version", "0.0");
}

