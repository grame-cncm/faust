/* ------------------------------------------------------------
name: "crazyGuiro"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 16 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 20 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 16 >> 2] | 0))))));
		HEAPF[dsp + 32 >> 2] = +(1382.30078 / +(HEAPF[dsp + 20 >> 2]));
		HEAPF[dsp + 64 >> 2] = +(0.00200000009 * +(HEAPF[dsp + 20 >> 2]));
		HEAPF[dsp + 76 >> 2] = +(0.00100000005 * +(HEAPF[dsp + 20 >> 2]));
		HEAPF[dsp + 80 >> 2] = +(1000. / +(HEAPF[dsp + 20 >> 2]));
		HEAP32[dsp + 32868 >> 2] = ~~(+(0.0253061224 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 65656 >> 2] = ~~(+(0.0269387756 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 98444 >> 2] = ~~(+(0.0289569162 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 131232 >> 2] = ~~(+(0.0307482984 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 164020 >> 2] = ~~(+(0.0322448984 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 196808 >> 2] = ~~(+(0.033809524 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 229596 >> 2] = ~~(+(0.0353061222 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 262384 >> 2] = ~~(+(0.0366666652 * +(HEAPF[dsp + 20 >> 2])));
		HEAP32[dsp + 270588 >> 2] = ((min_i(1024, ((max_i(0, ((~~(+(0.0126077095 * +(HEAPF[dsp + 20 >> 2]))) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 278792 >> 2] = ((min_i(1024, ((max_i(0, ((~~(+(0.00999999978 * +(HEAPF[dsp + 20 >> 2]))) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 286996 >> 2] = ((min_i(1024, ((max_i(0, ((~~(+(0.00773242628 * +(HEAPF[dsp + 20 >> 2]))) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 291104 >> 2] = ((min_i(1024, ((max_i(0, ((~~(+(0.00510204071 * +(HEAPF[dsp + 20 >> 2]))) + -1) | 0))) | 0))) | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 12 >> 2] = 0.;
		HEAPF[dsp + 36 >> 2] = 0.;
		HEAPF[dsp + 40 >> 2] = 0.;
		HEAPF[dsp + 52 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		var l32 = 0;
		var l33 = 0;
		var l34 = 0;
		var l35 = 0;
		var l36 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAP32[dsp + 44 + ((l2 | 0) << 2) >> 2] = 0;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 3) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 84 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 96 >> 2] = 0;
		for (l6 = 0; (((l6 | 0) < 8192) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 100 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 32872 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 32880 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 8192) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 32888 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 65660 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 65668 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 8192) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 65676 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 98448 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 98456 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 8192) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 98464 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 131236 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 131244 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 8192) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 131252 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 164024 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 164032 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 8192) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 164040 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 196812 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 196820 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 8192) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 196828 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 229600 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 229608 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 8192) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 229616 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 2) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 262388 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2048) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 262396 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 2) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 270592 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 2048) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 270600 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		for (l32 = 0; (((l32 | 0) < 2) | 0); l32 = (((l32 | 0) + 1) | 0)) {
			HEAPF[dsp + 278796 + ((l32 | 0) << 2) >> 2] = 0.;
			
		}
		for (l33 = 0; (((l33 | 0) < 2048) | 0); l33 = (((l33 | 0) + 1) | 0)) {
			HEAPF[dsp + 278804 + ((l33 | 0) << 2) >> 2] = 0.;
			
		}
		for (l34 = 0; (((l34 | 0) < 2) | 0); l34 = (((l34 | 0) + 1) | 0)) {
			HEAPF[dsp + 287000 + ((l34 | 0) << 2) >> 2] = 0.;
			
		}
		for (l35 = 0; (((l35 | 0) < 1024) | 0); l35 = (((l35 | 0) + 1) | 0)) {
			HEAPF[dsp + 287008 + ((l35 | 0) << 2) >> 2] = 0.;
			
		}
		for (l36 = 0; (((l36 | 0) < 2) | 0); l36 = (((l36 | 0) + 1) | 0)) {
			HEAPF[dsp + 291108 + ((l36 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 16 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fRec7 = 0.;
		var fTemp4 = 0.;
		var fRec5 = 0.;
		var fTemp5 = 0.;
		var fRec3 = 0.;
		var fTemp6 = 0.;
		var fRec1 = 0.;
		var fTemp7 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(+(HEAPF[dsp + 12 >> 2]));
		fSlow2 = +(tanf(+(+(HEAPF[dsp + 32 >> 2]) * +(powf(2., +(0.0833333358 * +(+(+(+(HEAPF[dsp + 36 >> 2])) + +(8. * +(+(HEAPF[dsp + 40 >> 2])))) + -19.)))))));
		fSlow3 = +(1. / +(fSlow2));
		fSlow4 = +(+(+(+(fSlow3) + 0.125) / +(fSlow2)) + 1.);
		fSlow5 = +(+(fSlow1) / +(fSlow4));
		fSlow6 = +(+(HEAPF[dsp + 52 >> 2]));
		fSlow7 = +(1. / +(fSlow4));
		fSlow8 = +(+(+(+(fSlow3) + -0.125) / +(fSlow2)) + 1.);
		fSlow9 = +(2. * +(1. - +(1. / +(powf(+(fSlow2), 2.)))));
		fSlow10 = +(0. - +(fSlow3));
		fSlow11 = +(+(1. - +(fSlow1)) / +(fSlow4));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 4 + (1 << 2) >> 2]) + +(HEAPF[dsp + 32872 + (1 << 2) >> 2])));
			HEAPF[dsp + 24 + (0 << 2) >> 2] = +(HEAPF[dsp + 20 >> 2]);
			HEAP32[dsp + 44 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 44 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(fSlow6);
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +(((((+(+(fSlow6) - +(HEAPF[dsp + 56 + (1 << 2) >> 2])) > 0.) | 0) > 0) | 0)?0.:+(min_f(+(HEAPF[dsp + 64 >> 2]), +(+(+(HEAPF[dsp + 68 + (1 << 2) >> 2]) + +(0.00200000009 * +(+(HEAPF[dsp + 20 >> 2]) - +(HEAPF[dsp + 24 + (1 << 2) >> 2])))) + 1.))));
			iTemp0 = ((+(HEAPF[dsp + 68 + (0 << 2) >> 2]) < +(HEAPF[dsp + 76 >> 2])) | 0);
			HEAPF[dsp + 84 + (0 << 2) >> 2] = +(+(4.65661287e-10 * +(+((HEAP32[dsp + 44 + (0 << 2) >> 2] | 0)) * +((iTemp0 | 0)?+(((+(HEAPF[dsp + 68 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp0 | 0)?+(+(HEAPF[dsp + 80 >> 2]) * +(HEAPF[dsp + 68 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 68 + (0 << 2) >> 2]) < +(HEAPF[dsp + 64 >> 2])) | 0)?+(+(+(HEAPF[dsp + 80 >> 2]) * +(0. - +(+(HEAPF[dsp + 68 + (0 << 2) >> 2]) - +(HEAPF[dsp + 76 >> 2])))) + 1.):0.)))) - +(+(fSlow7) * +(+(+(fSlow8) * +(HEAPF[dsp + 84 + (2 << 2) >> 2])) + +(+(fSlow9) * +(HEAPF[dsp + 84 + (1 << 2) >> 2])))));
			fTemp1 = +(+(+(fSlow3) * +(HEAPF[dsp + 84 + (0 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 84 + (2 << 2) >> 2])));
			fTemp2 = +(+(fSlow5) * +(fTemp1));
			HEAPF[dsp + 100 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow0) * +(HEAPF[dsp + 4 + (0 << 2) >> 2])) + +(fTemp2));
			HEAPF[dsp + 32872 + (0 << 2) >> 2] = +(HEAPF[dsp + 100 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 32868 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 32880 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 32880 + (1 << 2) >> 2]) + +(HEAPF[dsp + 65660 + (1 << 2) >> 2])));
			HEAPF[dsp + 32888 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 32880 + (0 << 2) >> 2])));
			HEAPF[dsp + 65660 + (0 << 2) >> 2] = +(HEAPF[dsp + 32888 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 65656 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 65668 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 65668 + (1 << 2) >> 2]) + +(HEAPF[dsp + 98448 + (1 << 2) >> 2])));
			HEAPF[dsp + 65676 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 65668 + (0 << 2) >> 2])));
			HEAPF[dsp + 98448 + (0 << 2) >> 2] = +(HEAPF[dsp + 65676 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 98444 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 98456 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 98456 + (1 << 2) >> 2]) + +(HEAPF[dsp + 131236 + (1 << 2) >> 2])));
			HEAPF[dsp + 98464 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 98456 + (0 << 2) >> 2])));
			HEAPF[dsp + 131236 + (0 << 2) >> 2] = +(HEAPF[dsp + 98464 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 131232 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 131244 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 131244 + (1 << 2) >> 2]) + +(HEAPF[dsp + 164024 + (1 << 2) >> 2])));
			HEAPF[dsp + 131252 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 131244 + (0 << 2) >> 2])));
			HEAPF[dsp + 164024 + (0 << 2) >> 2] = +(HEAPF[dsp + 131252 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 164020 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 164032 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 164032 + (1 << 2) >> 2]) + +(HEAPF[dsp + 196812 + (1 << 2) >> 2])));
			HEAPF[dsp + 164040 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 164032 + (0 << 2) >> 2])));
			HEAPF[dsp + 196812 + (0 << 2) >> 2] = +(HEAPF[dsp + 164040 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 196808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 196820 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 196820 + (1 << 2) >> 2]) + +(HEAPF[dsp + 229600 + (1 << 2) >> 2])));
			HEAPF[dsp + 196828 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 196820 + (0 << 2) >> 2])));
			HEAPF[dsp + 229600 + (0 << 2) >> 2] = +(HEAPF[dsp + 196828 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 229596 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 229608 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 229608 + (1 << 2) >> 2]) + +(HEAPF[dsp + 262388 + (1 << 2) >> 2])));
			HEAPF[dsp + 229616 + ((((HEAP32[dsp + 96 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 229608 + (0 << 2) >> 2])));
			HEAPF[dsp + 262388 + (0 << 2) >> 2] = +(HEAPF[dsp + 229616 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 262384 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp3 = +(+(+(+(+(+(+(+(+(HEAPF[dsp + 32872 + (0 << 2) >> 2]) + +(HEAPF[dsp + 65660 + (0 << 2) >> 2])) + +(HEAPF[dsp + 98448 + (0 << 2) >> 2])) + +(HEAPF[dsp + 131236 + (0 << 2) >> 2])) + +(HEAPF[dsp + 164024 + (0 << 2) >> 2])) + +(HEAPF[dsp + 196812 + (0 << 2) >> 2])) + +(HEAPF[dsp + 229600 + (0 << 2) >> 2])) + +(HEAPF[dsp + 262388 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF[dsp + 270592 + (1 << 2) >> 2])));
			HEAPF[dsp + 262396 + ((((HEAP32[dsp + 96 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp3);
			HEAPF[dsp + 270592 + (0 << 2) >> 2] = +(HEAPF[dsp + 262396 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 270588 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec7 = +(0. - +(0.5 * +(fTemp3)));
			fTemp4 = +(+(HEAPF[dsp + 270592 + (1 << 2) >> 2]) + +(+(fRec7) + +(0.5 * +(HEAPF[dsp + 278796 + (1 << 2) >> 2]))));
			HEAPF[dsp + 270600 + ((((HEAP32[dsp + 96 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp4);
			HEAPF[dsp + 278796 + (0 << 2) >> 2] = +(HEAPF[dsp + 270600 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 278792 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec5 = +(0. - +(0.5 * +(fTemp4)));
			fTemp5 = +(+(HEAPF[dsp + 278796 + (1 << 2) >> 2]) + +(+(fRec5) + +(0.5 * +(HEAPF[dsp + 287000 + (1 << 2) >> 2]))));
			HEAPF[dsp + 278804 + ((((HEAP32[dsp + 96 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp5);
			HEAPF[dsp + 287000 + (0 << 2) >> 2] = +(HEAPF[dsp + 278804 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 286996 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec3 = +(0. - +(0.5 * +(fTemp5)));
			fTemp6 = +(+(HEAPF[dsp + 287000 + (1 << 2) >> 2]) + +(+(fRec3) + +(0.5 * +(HEAPF[dsp + 291108 + (1 << 2) >> 2]))));
			HEAPF[dsp + 287008 + ((((HEAP32[dsp + 96 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp6);
			HEAPF[dsp + 291108 + (0 << 2) >> 2] = +(HEAPF[dsp + 287008 + ((((((HEAP32[dsp + 96 >> 2] | 0) - (HEAP32[dsp + 291104 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec1 = +(0. - +(0.5 * +(fTemp6)));
			fTemp7 = +(+(HEAPF[dsp + 291108 + (1 << 2) >> 2]) + +(+(fRec1) + +(+(fSlow11) * +(fTemp1))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp7));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp7));
			HEAPF[dsp + 4 + (1 << 2) >> 2] = +(HEAPF[dsp + 4 + (0 << 2) >> 2]);
			HEAPF[dsp + 24 + (1 << 2) >> 2] = +(HEAPF[dsp + 24 + (0 << 2) >> 2]);
			HEAP32[dsp + 44 + (1 << 2) >> 2] = (HEAP32[dsp + 44 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 84 + (2 << 2) >> 2] = +(HEAPF[dsp + 84 + (1 << 2) >> 2]);
			HEAPF[dsp + 84 + (1 << 2) >> 2] = +(HEAPF[dsp + 84 + (0 << 2) >> 2]);
			HEAP32[dsp + 96 >> 2] = (((HEAP32[dsp + 96 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 32872 + (1 << 2) >> 2] = +(HEAPF[dsp + 32872 + (0 << 2) >> 2]);
			HEAPF[dsp + 32880 + (1 << 2) >> 2] = +(HEAPF[dsp + 32880 + (0 << 2) >> 2]);
			HEAPF[dsp + 65660 + (1 << 2) >> 2] = +(HEAPF[dsp + 65660 + (0 << 2) >> 2]);
			HEAPF[dsp + 65668 + (1 << 2) >> 2] = +(HEAPF[dsp + 65668 + (0 << 2) >> 2]);
			HEAPF[dsp + 98448 + (1 << 2) >> 2] = +(HEAPF[dsp + 98448 + (0 << 2) >> 2]);
			HEAPF[dsp + 98456 + (1 << 2) >> 2] = +(HEAPF[dsp + 98456 + (0 << 2) >> 2]);
			HEAPF[dsp + 131236 + (1 << 2) >> 2] = +(HEAPF[dsp + 131236 + (0 << 2) >> 2]);
			HEAPF[dsp + 131244 + (1 << 2) >> 2] = +(HEAPF[dsp + 131244 + (0 << 2) >> 2]);
			HEAPF[dsp + 164024 + (1 << 2) >> 2] = +(HEAPF[dsp + 164024 + (0 << 2) >> 2]);
			HEAPF[dsp + 164032 + (1 << 2) >> 2] = +(HEAPF[dsp + 164032 + (0 << 2) >> 2]);
			HEAPF[dsp + 196812 + (1 << 2) >> 2] = +(HEAPF[dsp + 196812 + (0 << 2) >> 2]);
			HEAPF[dsp + 196820 + (1 << 2) >> 2] = +(HEAPF[dsp + 196820 + (0 << 2) >> 2]);
			HEAPF[dsp + 229600 + (1 << 2) >> 2] = +(HEAPF[dsp + 229600 + (0 << 2) >> 2]);
			HEAPF[dsp + 229608 + (1 << 2) >> 2] = +(HEAPF[dsp + 229608 + (0 << 2) >> 2]);
			HEAPF[dsp + 262388 + (1 << 2) >> 2] = +(HEAPF[dsp + 262388 + (0 << 2) >> 2]);
			HEAPF[dsp + 270592 + (1 << 2) >> 2] = +(HEAPF[dsp + 270592 + (0 << 2) >> 2]);
			HEAPF[dsp + 278796 + (1 << 2) >> 2] = +(HEAPF[dsp + 278796 + (0 << 2) >> 2]);
			HEAPF[dsp + 287000 + (1 << 2) >> 2] = +(HEAPF[dsp + 287000 + (0 << 2) >> 2]);
			HEAPF[dsp + 291108 + (1 << 2) >> 2] = +(HEAPF[dsp + 291108 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 291116;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/crazyGuiro/gate"] = 52;
	pathTable["/crazyGuiro/res"] = 0;
	pathTable["/crazyGuiro/wet"] = 12;
	pathTable["/crazyGuiro/key"] = 36;
	pathTable["/crazyGuiro/keyboard"] = 40;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"crazyGuiro\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"crazyGuiro\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"crazyGuiro\",\"items\":[{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/crazyGuiro/gate\"},{\"type\":\"hslider\",\"label\":\"key\",\"address\":\"/crazyGuiro/key\",\"init\":\"0\",\"min\":\"0\",\"max\":\"2\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"keyboard\",\"address\":\"/crazyGuiro/keyboard\",\"init\":\"0\",\"min\":\"0\",\"max\":\"2\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"res\",\"address\":\"/crazyGuiro/res\",\"meta\":[{\"acc\":\"1 0 -10 0 10\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"wet\",\"address\":\"/crazyGuiro/wet\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("envelopes.lib/author", "GRAME");
	m.declare("envelopes.lib/copyright", "GRAME");
	m.declare("envelopes.lib/license", "LGPL with exception");
	m.declare("envelopes.lib/name", "Faust Envelope Library");
	m.declare("envelopes.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'8',  'Keyboard 0 - Number of Keys':'16',  'Keyboard 1 - Number of Keys':'16',  'Keyboard 2 - Number of Keys':'16',  'Keyboard 3 - Number of Keys':'16',  'Keyboard 4 - Number of Keys':'16',  'Keyboard 5 - Number of Keys':'16',  'Keyboard 6 - Number of Keys':'16',  'Keyboard 7 - Number of Keys':'16',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "crazyGuiro");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("reverbs.lib/name", "Faust Reverb Library");
	m.declare("reverbs.lib/version", "0.0");
	m.declare("synths.lib/name", "Faust Synthesizer Library");
	m.declare("synths.lib/version", "0.0");
}

