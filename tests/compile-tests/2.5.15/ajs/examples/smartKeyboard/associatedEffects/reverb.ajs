/* ------------------------------------------------------------
name: "reverb"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sqrtf = foreign.sqrt;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 65564 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 65568 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 65564 >> 2] | 0))))));
		HEAPF[dsp + 65572 >> 2] = +(6.28318548 / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 65592 >> 2] = +(floorf(+(+(0.219990999 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 65596 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 65592 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 65604 >> 2] = +(6.28318548 / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 65616 >> 2] = +(3.14159274 / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 196712 >> 2] = +(floorf(+(+(0.0191229992 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 196716 >> 2] = ~~(+(min_f(16384., +(max_f(0., +(+(HEAPF[dsp + 65592 >> 2]) - +(HEAPF[dsp + 196712 >> 2])))))));
		HEAPF[dsp + 262256 >> 2] = +(0.00100000005 * +(HEAPF[dsp + 65568 >> 2]));
		HEAP32[dsp + 270456 >> 2] = ~~(+(min_f(1024., +(max_f(0., +(+(HEAPF[dsp + 196712 >> 2]) + -1.))))));
		HEAPF[dsp + 270468 >> 2] = +(floorf(+(+(0.256891012 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 270472 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 270468 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 401564 >> 2] = +(floorf(+(+(0.0273330007 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 401568 >> 2] = ~~(+(min_f(16384., +(max_f(0., +(+(HEAPF[dsp + 270468 >> 2]) - +(HEAPF[dsp + 401564 >> 2])))))));
		HEAP32[dsp + 417956 >> 2] = ~~(+(min_f(2048., +(max_f(0., +(+(HEAPF[dsp + 401564 >> 2]) + -1.))))));
		HEAPF[dsp + 417968 >> 2] = +(floorf(+(+(0.192303002 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 417972 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 417968 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 483528 >> 2] = +(floorf(+(+(0.0292910002 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 483532 >> 2] = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 417968 >> 2]) - +(HEAPF[dsp + 483528 >> 2])))))));
		HEAP32[dsp + 499920 >> 2] = ~~(+(min_f(2048., +(max_f(0., +(+(HEAPF[dsp + 483528 >> 2]) + -1.))))));
		HEAPF[dsp + 499932 >> 2] = +(floorf(+(+(0.210389003 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 499936 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 499932 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 631028 >> 2] = +(floorf(+(+(0.0244210009 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 631032 >> 2] = ~~(+(min_f(16384., +(max_f(0., +(+(HEAPF[dsp + 499932 >> 2]) - +(HEAPF[dsp + 631028 >> 2])))))));
		HEAP32[dsp + 647420 >> 2] = ~~(+(min_f(2048., +(max_f(0., +(+(HEAPF[dsp + 631028 >> 2]) + -1.))))));
		HEAPF[dsp + 647432 >> 2] = +(floorf(+(+(0.125 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 647436 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 647432 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 712992 >> 2] = +(floorf(+(+(0.0134579996 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 712996 >> 2] = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 647432 >> 2]) - +(HEAPF[dsp + 712992 >> 2])))))));
		HEAP32[dsp + 721192 >> 2] = ~~(+(min_f(1024., +(max_f(0., +(+(HEAPF[dsp + 712992 >> 2]) + -1.))))));
		HEAPF[dsp + 721204 >> 2] = +(floorf(+(+(0.127837002 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 721208 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 721204 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 786764 >> 2] = +(floorf(+(+(0.0316039994 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 786768 >> 2] = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 721204 >> 2]) - +(HEAPF[dsp + 786764 >> 2])))))));
		HEAP32[dsp + 803156 >> 2] = ~~(+(min_f(2048., +(max_f(0., +(+(HEAPF[dsp + 786764 >> 2]) + -1.))))));
		HEAPF[dsp + 803168 >> 2] = +(floorf(+(+(0.174713001 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 803172 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 803168 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 868728 >> 2] = +(floorf(+(+(0.0229039993 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 868732 >> 2] = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 803168 >> 2]) - +(HEAPF[dsp + 868728 >> 2])))))));
		HEAP32[dsp + 885120 >> 2] = ~~(+(min_f(2048., +(max_f(0., +(+(HEAPF[dsp + 868728 >> 2]) + -1.))))));
		HEAPF[dsp + 885132 >> 2] = +(floorf(+(+(0.153128996 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAPF[dsp + 885136 >> 2] = +(+(0. - +(6.90775537 * +(HEAPF[dsp + 885132 >> 2]))) / +(HEAPF[dsp + 65568 >> 2]));
		HEAPF[dsp + 950692 >> 2] = +(floorf(+(+(0.0203460008 * +(HEAPF[dsp + 65568 >> 2])) + 0.5)));
		HEAP32[dsp + 950696 >> 2] = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 885132 >> 2]) - +(HEAPF[dsp + 950692 >> 2])))))));
		HEAP32[dsp + 958892 >> 2] = ~~(+(min_f(1024., +(max_f(0., +(+(HEAPF[dsp + 950692 >> 2]) + -1.))))));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = -20.;
		HEAPF[dsp + 65552 >> 2] = 0.;
		HEAPF[dsp + 65576 >> 2] = 1500.;
		HEAPF[dsp + 65580 >> 2] = 0.;
		HEAPF[dsp + 65584 >> 2] = 315.;
		HEAPF[dsp + 65588 >> 2] = 0.;
		HEAPF[dsp + 65600 >> 2] = 2.;
		HEAPF[dsp + 65608 >> 2] = 6000.;
		HEAPF[dsp + 65612 >> 2] = 3.;
		HEAPF[dsp + 65620 >> 2] = 200.;
		HEAPF[dsp + 262260 >> 2] = 60.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		var l32 = 0;
		var l33 = 0;
		var l34 = 0;
		var l35 = 0;
		var l36 = 0;
		var l37 = 0;
		var l38 = 0;
		var l39 = 0;
		var l40 = 0;
		var l41 = 0;
		var l42 = 0;
		var l43 = 0;
		var l44 = 0;
		var l45 = 0;
		var l46 = 0;
		var l47 = 0;
		var l48 = 0;
		var l49 = 0;
		var l50 = 0;
		var l51 = 0;
		var l52 = 0;
		var l53 = 0;
		var l54 = 0;
		var l55 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 12 >> 2] = 0;
		for (l1 = 0; (((l1 | 0) < 16384) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 65556 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 65624 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 65632 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 32768) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 65640 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 16384) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 196720 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2048) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 262264 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 270460 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 270476 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 270484 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 32768) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 270492 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 4096) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 401572 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 417960 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 417976 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 417984 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 16384) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 417992 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 4096) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 483536 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 499924 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 499940 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 499948 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 32768) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 499956 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 4096) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 631036 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 647424 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 647440 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 647448 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 16384) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 647456 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2048) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 713000 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 2) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 721196 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 721212 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 2) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 721220 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 16384) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 721228 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		for (l32 = 0; (((l32 | 0) < 4096) | 0); l32 = (((l32 | 0) + 1) | 0)) {
			HEAPF[dsp + 786772 + ((l32 | 0) << 2) >> 2] = 0.;
			
		}
		for (l33 = 0; (((l33 | 0) < 2) | 0); l33 = (((l33 | 0) + 1) | 0)) {
			HEAPF[dsp + 803160 + ((l33 | 0) << 2) >> 2] = 0.;
			
		}
		for (l34 = 0; (((l34 | 0) < 2) | 0); l34 = (((l34 | 0) + 1) | 0)) {
			HEAPF[dsp + 803176 + ((l34 | 0) << 2) >> 2] = 0.;
			
		}
		for (l35 = 0; (((l35 | 0) < 2) | 0); l35 = (((l35 | 0) + 1) | 0)) {
			HEAPF[dsp + 803184 + ((l35 | 0) << 2) >> 2] = 0.;
			
		}
		for (l36 = 0; (((l36 | 0) < 16384) | 0); l36 = (((l36 | 0) + 1) | 0)) {
			HEAPF[dsp + 803192 + ((l36 | 0) << 2) >> 2] = 0.;
			
		}
		for (l37 = 0; (((l37 | 0) < 4096) | 0); l37 = (((l37 | 0) + 1) | 0)) {
			HEAPF[dsp + 868736 + ((l37 | 0) << 2) >> 2] = 0.;
			
		}
		for (l38 = 0; (((l38 | 0) < 2) | 0); l38 = (((l38 | 0) + 1) | 0)) {
			HEAPF[dsp + 885124 + ((l38 | 0) << 2) >> 2] = 0.;
			
		}
		for (l39 = 0; (((l39 | 0) < 2) | 0); l39 = (((l39 | 0) + 1) | 0)) {
			HEAPF[dsp + 885140 + ((l39 | 0) << 2) >> 2] = 0.;
			
		}
		for (l40 = 0; (((l40 | 0) < 2) | 0); l40 = (((l40 | 0) + 1) | 0)) {
			HEAPF[dsp + 885148 + ((l40 | 0) << 2) >> 2] = 0.;
			
		}
		for (l41 = 0; (((l41 | 0) < 16384) | 0); l41 = (((l41 | 0) + 1) | 0)) {
			HEAPF[dsp + 885156 + ((l41 | 0) << 2) >> 2] = 0.;
			
		}
		for (l42 = 0; (((l42 | 0) < 2048) | 0); l42 = (((l42 | 0) + 1) | 0)) {
			HEAPF[dsp + 950700 + ((l42 | 0) << 2) >> 2] = 0.;
			
		}
		for (l43 = 0; (((l43 | 0) < 2) | 0); l43 = (((l43 | 0) + 1) | 0)) {
			HEAPF[dsp + 958896 + ((l43 | 0) << 2) >> 2] = 0.;
			
		}
		for (l44 = 0; (((l44 | 0) < 3) | 0); l44 = (((l44 | 0) + 1) | 0)) {
			HEAPF[dsp + 958904 + ((l44 | 0) << 2) >> 2] = 0.;
			
		}
		for (l45 = 0; (((l45 | 0) < 3) | 0); l45 = (((l45 | 0) + 1) | 0)) {
			HEAPF[dsp + 958916 + ((l45 | 0) << 2) >> 2] = 0.;
			
		}
		for (l46 = 0; (((l46 | 0) < 3) | 0); l46 = (((l46 | 0) + 1) | 0)) {
			HEAPF[dsp + 958928 + ((l46 | 0) << 2) >> 2] = 0.;
			
		}
		for (l47 = 0; (((l47 | 0) < 3) | 0); l47 = (((l47 | 0) + 1) | 0)) {
			HEAPF[dsp + 958940 + ((l47 | 0) << 2) >> 2] = 0.;
			
		}
		for (l48 = 0; (((l48 | 0) < 3) | 0); l48 = (((l48 | 0) + 1) | 0)) {
			HEAPF[dsp + 958952 + ((l48 | 0) << 2) >> 2] = 0.;
			
		}
		for (l49 = 0; (((l49 | 0) < 3) | 0); l49 = (((l49 | 0) + 1) | 0)) {
			HEAPF[dsp + 958964 + ((l49 | 0) << 2) >> 2] = 0.;
			
		}
		for (l50 = 0; (((l50 | 0) < 3) | 0); l50 = (((l50 | 0) + 1) | 0)) {
			HEAPF[dsp + 958976 + ((l50 | 0) << 2) >> 2] = 0.;
			
		}
		for (l51 = 0; (((l51 | 0) < 3) | 0); l51 = (((l51 | 0) + 1) | 0)) {
			HEAPF[dsp + 958988 + ((l51 | 0) << 2) >> 2] = 0.;
			
		}
		for (l52 = 0; (((l52 | 0) < 3) | 0); l52 = (((l52 | 0) + 1) | 0)) {
			HEAPF[dsp + 959000 + ((l52 | 0) << 2) >> 2] = 0.;
			
		}
		for (l53 = 0; (((l53 | 0) < 3) | 0); l53 = (((l53 | 0) + 1) | 0)) {
			HEAPF[dsp + 959012 + ((l53 | 0) << 2) >> 2] = 0.;
			
		}
		for (l54 = 0; (((l54 | 0) < 3) | 0); l54 = (((l54 | 0) + 1) | 0)) {
			HEAPF[dsp + 959024 + ((l54 | 0) << 2) >> 2] = 0.;
			
		}
		for (l55 = 0; (((l55 | 0) < 3) | 0); l55 = (((l55 | 0) + 1) | 0)) {
			HEAPF[dsp + 959036 + ((l55 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 65564 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var iSlow26 = 0;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var fSlow30 = 0.;
		var fSlow31 = 0.;
		var fSlow32 = 0.;
		var fSlow33 = 0.;
		var fSlow34 = 0.;
		var fSlow35 = 0.;
		var fSlow36 = 0.;
		var fSlow37 = 0.;
		var fSlow38 = 0.;
		var fSlow39 = 0.;
		var fSlow40 = 0.;
		var fSlow41 = 0.;
		var fSlow42 = 0.;
		var fSlow43 = 0.;
		var fSlow44 = 0.;
		var fSlow45 = 0.;
		var fSlow46 = 0.;
		var fSlow47 = 0.;
		var fSlow48 = 0.;
		var fSlow49 = 0.;
		var fSlow50 = 0.;
		var fSlow51 = 0.;
		var fSlow52 = 0.;
		var fSlow53 = 0.;
		var fSlow54 = 0.;
		var fSlow55 = 0.;
		var fSlow56 = 0.;
		var fSlow57 = 0.;
		var fSlow58 = 0.;
		var fSlow59 = 0.;
		var fSlow60 = 0.;
		var fSlow61 = 0.;
		var fSlow62 = 0.;
		var fSlow63 = 0.;
		var fSlow64 = 0.;
		var fSlow65 = 0.;
		var fSlow66 = 0.;
		var fSlow67 = 0.;
		var fSlow68 = 0.;
		var fSlow69 = 0.;
		var fSlow70 = 0.;
		var fSlow71 = 0.;
		var fSlow72 = 0.;
		var fSlow73 = 0.;
		var fSlow74 = 0.;
		var fSlow75 = 0.;
		var fSlow76 = 0.;
		var fSlow77 = 0.;
		var fSlow78 = 0.;
		var fSlow79 = 0.;
		var fSlow80 = 0.;
		var fSlow81 = 0.;
		var fSlow82 = 0.;
		var fSlow83 = 0.;
		var fSlow84 = 0.;
		var fSlow85 = 0.;
		var fSlow86 = 0.;
		var fSlow87 = 0.;
		var fSlow88 = 0.;
		var fSlow89 = 0.;
		var fSlow90 = 0.;
		var fSlow91 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fRec13 = 0.;
		var fTemp6 = 0.;
		var fRec17 = 0.;
		var fTemp7 = 0.;
		var fRec21 = 0.;
		var fTemp8 = 0.;
		var fRec25 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fRec29 = 0.;
		var fTemp11 = 0.;
		var fRec33 = 0.;
		var fTemp12 = 0.;
		var fRec37 = 0.;
		var fTemp13 = 0.;
		var fRec41 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 0 >> 2]))))));
		fSlow1 = +(0.00100000005 * +(+(HEAPF[dsp + 65552 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 65576 >> 2]));
		fSlow3 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 65580 >> 2])))));
		fSlow4 = +(+(HEAPF[dsp + 65572 >> 2]) * +(+(fSlow2) / +(sqrtf(+(max_f(0., +(fSlow3)))))));
		fSlow5 = +(+(1. - +(fSlow4)) / +(+(fSlow4) + 1.));
		fSlow6 = +(+(HEAPF[dsp + 65584 >> 2]));
		fSlow7 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 65588 >> 2])))));
		fSlow8 = +(+(HEAPF[dsp + 65572 >> 2]) * +(+(fSlow6) / +(sqrtf(+(max_f(0., +(fSlow7)))))));
		fSlow9 = +(+(1. - +(fSlow8)) / +(+(fSlow8) + 1.));
		fSlow10 = +(+(HEAPF[dsp + 65600 >> 2]));
		fSlow11 = +(expf(+(+(HEAPF[dsp + 65596 >> 2]) / +(fSlow10))));
		fSlow12 = +(powf(+(fSlow11), 2.));
		fSlow13 = +(cosf(+(+(HEAPF[dsp + 65604 >> 2]) * +(+(HEAPF[dsp + 65608 >> 2])))));
		fSlow14 = +(1. - +(+(fSlow12) * +(fSlow13)));
		fSlow15 = +(1. - +(fSlow12));
		fSlow16 = +(+(fSlow14) / +(fSlow15));
		fSlow17 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow14), 2.)) / +(powf(+(fSlow15), 2.))) + -1.)))));
		fSlow18 = +(+(fSlow16) - +(fSlow17));
		fSlow19 = +(+(fSlow11) * +(+(fSlow17) + +(1. - +(fSlow16))));
		fSlow20 = +(+(HEAPF[dsp + 65612 >> 2]));
		fSlow21 = +(+(+(expf(+(+(HEAPF[dsp + 65596 >> 2]) / +(fSlow20)))) / +(fSlow11)) + -1.);
		fSlow22 = +(1. / +(tanf(+(+(HEAPF[dsp + 65616 >> 2]) * +(+(HEAPF[dsp + 65620 >> 2]))))));
		fSlow23 = +(+(fSlow22) + 1.);
		fSlow24 = +(0. - +(+(1. - +(fSlow22)) / +(fSlow23)));
		fSlow25 = +(1. / +(fSlow23));
		iSlow26 = ~~(+(min_f(8192., +(max_f(0., +(+(HEAPF[dsp + 262256 >> 2]) * +(+(HEAPF[dsp + 262260 >> 2]))))))));
		fSlow27 = +(expf(+(+(HEAPF[dsp + 270472 >> 2]) / +(fSlow10))));
		fSlow28 = +(powf(+(fSlow27), 2.));
		fSlow29 = +(1. - +(+(fSlow13) * +(fSlow28)));
		fSlow30 = +(1. - +(fSlow28));
		fSlow31 = +(+(fSlow29) / +(fSlow30));
		fSlow32 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow29), 2.)) / +(powf(+(fSlow30), 2.))) + -1.)))));
		fSlow33 = +(+(fSlow31) - +(fSlow32));
		fSlow34 = +(+(fSlow27) * +(+(fSlow32) + +(1. - +(fSlow31))));
		fSlow35 = +(+(+(expf(+(+(HEAPF[dsp + 270472 >> 2]) / +(fSlow20)))) / +(fSlow27)) + -1.);
		fSlow36 = +(expf(+(+(HEAPF[dsp + 417972 >> 2]) / +(fSlow10))));
		fSlow37 = +(powf(+(fSlow36), 2.));
		fSlow38 = +(1. - +(+(fSlow13) * +(fSlow37)));
		fSlow39 = +(1. - +(fSlow37));
		fSlow40 = +(+(fSlow38) / +(fSlow39));
		fSlow41 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow38), 2.)) / +(powf(+(fSlow39), 2.))) + -1.)))));
		fSlow42 = +(+(fSlow40) - +(fSlow41));
		fSlow43 = +(+(fSlow36) * +(+(fSlow41) + +(1. - +(fSlow40))));
		fSlow44 = +(+(+(expf(+(+(HEAPF[dsp + 417972 >> 2]) / +(fSlow20)))) / +(fSlow36)) + -1.);
		fSlow45 = +(expf(+(+(HEAPF[dsp + 499936 >> 2]) / +(fSlow10))));
		fSlow46 = +(powf(+(fSlow45), 2.));
		fSlow47 = +(1. - +(+(fSlow13) * +(fSlow46)));
		fSlow48 = +(1. - +(fSlow46));
		fSlow49 = +(+(fSlow47) / +(fSlow48));
		fSlow50 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow47), 2.)) / +(powf(+(fSlow48), 2.))) + -1.)))));
		fSlow51 = +(+(fSlow49) - +(fSlow50));
		fSlow52 = +(+(fSlow45) * +(+(fSlow50) + +(1. - +(fSlow49))));
		fSlow53 = +(+(+(expf(+(+(HEAPF[dsp + 499936 >> 2]) / +(fSlow20)))) / +(fSlow45)) + -1.);
		fSlow54 = +(expf(+(+(HEAPF[dsp + 647436 >> 2]) / +(fSlow10))));
		fSlow55 = +(powf(+(fSlow54), 2.));
		fSlow56 = +(1. - +(+(fSlow13) * +(fSlow55)));
		fSlow57 = +(1. - +(fSlow55));
		fSlow58 = +(+(fSlow56) / +(fSlow57));
		fSlow59 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow56), 2.)) / +(powf(+(fSlow57), 2.))) + -1.)))));
		fSlow60 = +(+(fSlow58) - +(fSlow59));
		fSlow61 = +(+(fSlow54) * +(+(fSlow59) + +(1. - +(fSlow58))));
		fSlow62 = +(+(+(expf(+(+(HEAPF[dsp + 647436 >> 2]) / +(fSlow20)))) / +(fSlow54)) + -1.);
		fSlow63 = +(expf(+(+(HEAPF[dsp + 721208 >> 2]) / +(fSlow10))));
		fSlow64 = +(powf(+(fSlow63), 2.));
		fSlow65 = +(1. - +(+(fSlow13) * +(fSlow64)));
		fSlow66 = +(1. - +(fSlow64));
		fSlow67 = +(+(fSlow65) / +(fSlow66));
		fSlow68 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow65), 2.)) / +(powf(+(fSlow66), 2.))) + -1.)))));
		fSlow69 = +(+(fSlow67) - +(fSlow68));
		fSlow70 = +(+(fSlow63) * +(+(fSlow68) + +(1. - +(fSlow67))));
		fSlow71 = +(+(+(expf(+(+(HEAPF[dsp + 721208 >> 2]) / +(fSlow20)))) / +(fSlow63)) + -1.);
		fSlow72 = +(expf(+(+(HEAPF[dsp + 803172 >> 2]) / +(fSlow10))));
		fSlow73 = +(powf(+(fSlow72), 2.));
		fSlow74 = +(1. - +(+(fSlow13) * +(fSlow73)));
		fSlow75 = +(1. - +(fSlow73));
		fSlow76 = +(+(fSlow74) / +(fSlow75));
		fSlow77 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow74), 2.)) / +(powf(+(fSlow75), 2.))) + -1.)))));
		fSlow78 = +(+(fSlow76) - +(fSlow77));
		fSlow79 = +(+(fSlow72) * +(+(fSlow77) + +(1. - +(fSlow76))));
		fSlow80 = +(+(+(expf(+(+(HEAPF[dsp + 803172 >> 2]) / +(fSlow20)))) / +(fSlow72)) + -1.);
		fSlow81 = +(expf(+(+(HEAPF[dsp + 885136 >> 2]) / +(fSlow10))));
		fSlow82 = +(powf(+(fSlow81), 2.));
		fSlow83 = +(1. - +(+(fSlow13) * +(fSlow82)));
		fSlow84 = +(1. - +(fSlow82));
		fSlow85 = +(+(fSlow83) / +(fSlow84));
		fSlow86 = +(sqrtf(+(max_f(0., +(+(+(powf(+(fSlow83), 2.)) / +(powf(+(fSlow84), 2.))) + -1.)))));
		fSlow87 = +(+(fSlow85) - +(fSlow86));
		fSlow88 = +(+(fSlow81) * +(+(fSlow86) + +(1. - +(fSlow85))));
		fSlow89 = +(+(+(expf(+(+(HEAPF[dsp + 885136 >> 2]) / +(fSlow20)))) / +(fSlow81)) + -1.);
		fSlow90 = +(+(0. - +(cosf(+(+(HEAPF[dsp + 65572 >> 2]) * +(fSlow6))))) * +(+(fSlow9) + 1.));
		fSlow91 = +(+(0. - +(cosf(+(+(HEAPF[dsp + 65572 >> 2]) * +(fSlow2))))) * +(+(fSlow5) + 1.));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 4 + (1 << 2) >> 2])));
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 16 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(fTemp0);
			HEAPF[dsp + 65556 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 65556 + (1 << 2) >> 2])));
			fTemp1 = +(+(HEAPF[dsp + 65556 + (0 << 2) >> 2]) + 1.);
			fTemp2 = +(1. - +(0.5 * +(fTemp1)));
			HEAPF[dsp + 65624 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 65624 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958988 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958988 + (2 << 2) >> 2]))));
			HEAPF[dsp + 65632 + (0 << 2) >> 2] = +(+(+(fSlow18) * +(HEAPF[dsp + 65632 + (1 << 2) >> 2])) + +(+(fSlow19) * +(+(HEAPF[dsp + 958988 + (1 << 2) >> 2]) + +(+(fSlow21) * +(HEAPF[dsp + 65624 + (0 << 2) >> 2])))));
			HEAPF[dsp + 65640 + ((((HEAP32[dsp + 12 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 65632 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp3 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 196720 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(fTemp3);
			fTemp4 = +(0.300000012 * +(HEAPF[dsp + 196720 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (iSlow26 | 0)) | 0) & 16383) | 0) << 2) >> 2]));
			fTemp5 = +(+(+(0.600000024 * +(HEAPF[dsp + 270460 + (1 << 2) >> 2])) + +(HEAPF[dsp + 65640 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 196716 >> 2] | 0)) | 0) & 32767) | 0) << 2) >> 2])) - +(fTemp4));
			HEAPF[dsp + 262264 + ((((HEAP32[dsp + 12 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp5);
			HEAPF[dsp + 270460 + (0 << 2) >> 2] = +(HEAPF[dsp + 262264 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 270456 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec13 = +(0. - +(0.600000024 * +(fTemp5)));
			HEAPF[dsp + 270476 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 270476 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958940 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958940 + (2 << 2) >> 2]))));
			HEAPF[dsp + 270484 + (0 << 2) >> 2] = +(+(+(fSlow33) * +(HEAPF[dsp + 270484 + (1 << 2) >> 2])) + +(+(fSlow34) * +(+(HEAPF[dsp + 958940 + (1 << 2) >> 2]) + +(+(fSlow35) * +(HEAPF[dsp + 270476 + (0 << 2) >> 2])))));
			HEAPF[dsp + 270492 + ((((HEAP32[dsp + 12 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 270484 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp6 = +(+(+(0.600000024 * +(HEAPF[dsp + 417960 + (1 << 2) >> 2])) + +(HEAPF[dsp + 270492 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 401568 >> 2] | 0)) | 0) & 32767) | 0) << 2) >> 2])) - +(fTemp4));
			HEAPF[dsp + 401572 + ((((HEAP32[dsp + 12 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp6);
			HEAPF[dsp + 417960 + (0 << 2) >> 2] = +(HEAPF[dsp + 401572 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 417956 >> 2] | 0)) | 0) & 4095) | 0) << 2) >> 2]);
			fRec17 = +(0. - +(0.600000024 * +(fTemp6)));
			HEAPF[dsp + 417976 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 417976 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958964 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958964 + (2 << 2) >> 2]))));
			HEAPF[dsp + 417984 + (0 << 2) >> 2] = +(+(+(fSlow42) * +(HEAPF[dsp + 417984 + (1 << 2) >> 2])) + +(+(fSlow43) * +(+(HEAPF[dsp + 958964 + (1 << 2) >> 2]) + +(+(fSlow44) * +(HEAPF[dsp + 417976 + (0 << 2) >> 2])))));
			HEAPF[dsp + 417992 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 417984 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp7 = +(+(HEAPF[dsp + 417992 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 483532 >> 2] | 0)) | 0) & 16383) | 0) << 2) >> 2]) + +(+(fTemp4) + +(0.600000024 * +(HEAPF[dsp + 499924 + (1 << 2) >> 2]))));
			HEAPF[dsp + 483536 + ((((HEAP32[dsp + 12 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp7);
			HEAPF[dsp + 499924 + (0 << 2) >> 2] = +(HEAPF[dsp + 483536 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 499920 >> 2] | 0)) | 0) & 4095) | 0) << 2) >> 2]);
			fRec21 = +(0. - +(0.600000024 * +(fTemp7)));
			HEAPF[dsp + 499940 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 499940 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958916 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958916 + (2 << 2) >> 2]))));
			HEAPF[dsp + 499948 + (0 << 2) >> 2] = +(+(+(fSlow51) * +(HEAPF[dsp + 499948 + (1 << 2) >> 2])) + +(+(fSlow52) * +(+(HEAPF[dsp + 958916 + (1 << 2) >> 2]) + +(+(fSlow53) * +(HEAPF[dsp + 499940 + (0 << 2) >> 2])))));
			HEAPF[dsp + 499956 + ((((HEAP32[dsp + 12 >> 2] | 0) & 32767) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 499948 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp8 = +(+(fTemp4) + +(+(0.600000024 * +(HEAPF[dsp + 647424 + (1 << 2) >> 2])) + +(HEAPF[dsp + 499956 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 631032 >> 2] | 0)) | 0) & 32767) | 0) << 2) >> 2])));
			HEAPF[dsp + 631036 + ((((HEAP32[dsp + 12 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp8);
			HEAPF[dsp + 647424 + (0 << 2) >> 2] = +(HEAPF[dsp + 631036 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 647420 >> 2] | 0)) | 0) & 4095) | 0) << 2) >> 2]);
			fRec25 = +(0. - +(0.600000024 * +(fTemp8)));
			HEAPF[dsp + 647440 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 647440 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958976 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958976 + (2 << 2) >> 2]))));
			HEAPF[dsp + 647448 + (0 << 2) >> 2] = +(+(+(fSlow60) * +(HEAPF[dsp + 647448 + (1 << 2) >> 2])) + +(+(fSlow61) * +(+(HEAPF[dsp + 958976 + (1 << 2) >> 2]) + +(+(fSlow62) * +(HEAPF[dsp + 647440 + (0 << 2) >> 2])))));
			HEAPF[dsp + 647456 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 647448 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp9 = +(0.300000012 * +(HEAPF[dsp + 16 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (iSlow26 | 0)) | 0) & 16383) | 0) << 2) >> 2]));
			fTemp10 = +(+(HEAPF[dsp + 647456 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 712996 >> 2] | 0)) | 0) & 16383) | 0) << 2) >> 2]) - +(+(fTemp9) + +(0.600000024 * +(HEAPF[dsp + 721196 + (1 << 2) >> 2]))));
			HEAPF[dsp + 713000 + ((((HEAP32[dsp + 12 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp10);
			HEAPF[dsp + 721196 + (0 << 2) >> 2] = +(HEAPF[dsp + 713000 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 721192 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec29 = +(0.600000024 * +(fTemp10));
			HEAPF[dsp + 721212 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 721212 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958928 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958928 + (2 << 2) >> 2]))));
			HEAPF[dsp + 721220 + (0 << 2) >> 2] = +(+(+(fSlow69) * +(HEAPF[dsp + 721220 + (1 << 2) >> 2])) + +(+(fSlow70) * +(+(HEAPF[dsp + 958928 + (1 << 2) >> 2]) + +(+(fSlow71) * +(HEAPF[dsp + 721212 + (0 << 2) >> 2])))));
			HEAPF[dsp + 721228 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 721220 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp11 = +(+(HEAPF[dsp + 721228 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 786768 >> 2] | 0)) | 0) & 16383) | 0) << 2) >> 2]) - +(+(fTemp9) + +(0.600000024 * +(HEAPF[dsp + 803160 + (1 << 2) >> 2]))));
			HEAPF[dsp + 786772 + ((((HEAP32[dsp + 12 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp11);
			HEAPF[dsp + 803160 + (0 << 2) >> 2] = +(HEAPF[dsp + 786772 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 803156 >> 2] | 0)) | 0) & 4095) | 0) << 2) >> 2]);
			fRec33 = +(0.600000024 * +(fTemp11));
			HEAPF[dsp + 803176 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 803176 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958952 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958952 + (2 << 2) >> 2]))));
			HEAPF[dsp + 803184 + (0 << 2) >> 2] = +(+(+(fSlow78) * +(HEAPF[dsp + 803184 + (1 << 2) >> 2])) + +(+(fSlow79) * +(+(HEAPF[dsp + 958952 + (1 << 2) >> 2]) + +(+(fSlow80) * +(HEAPF[dsp + 803176 + (0 << 2) >> 2])))));
			HEAPF[dsp + 803192 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 803184 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp12 = +(+(+(fTemp9) + +(HEAPF[dsp + 803192 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 868732 >> 2] | 0)) | 0) & 16383) | 0) << 2) >> 2])) - +(0.600000024 * +(HEAPF[dsp + 885124 + (1 << 2) >> 2])));
			HEAPF[dsp + 868736 + ((((HEAP32[dsp + 12 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp12);
			HEAPF[dsp + 885124 + (0 << 2) >> 2] = +(HEAPF[dsp + 868736 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 885120 >> 2] | 0)) | 0) & 4095) | 0) << 2) >> 2]);
			fRec37 = +(0.600000024 * +(fTemp12));
			HEAPF[dsp + 885140 + (0 << 2) >> 2] = +(+(+(fSlow24) * +(HEAPF[dsp + 885140 + (1 << 2) >> 2])) + +(+(fSlow25) * +(+(HEAPF[dsp + 958904 + (1 << 2) >> 2]) + +(HEAPF[dsp + 958904 + (2 << 2) >> 2]))));
			HEAPF[dsp + 885148 + (0 << 2) >> 2] = +(+(+(fSlow87) * +(HEAPF[dsp + 885148 + (1 << 2) >> 2])) + +(+(fSlow88) * +(+(HEAPF[dsp + 958904 + (1 << 2) >> 2]) + +(+(fSlow89) * +(HEAPF[dsp + 885140 + (0 << 2) >> 2])))));
			HEAPF[dsp + 885156 + ((((HEAP32[dsp + 12 >> 2] | 0) & 16383) | 0) << 2) >> 2] = +(+(0.353553385 * +(HEAPF[dsp + 885148 + (0 << 2) >> 2])) + 9.99999968e-21);
			fTemp13 = +(+(+(HEAPF[dsp + 885156 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 950696 >> 2] | 0)) | 0) & 16383) | 0) << 2) >> 2]) + +(fTemp9)) - +(0.600000024 * +(HEAPF[dsp + 958896 + (1 << 2) >> 2])));
			HEAPF[dsp + 950700 + ((((HEAP32[dsp + 12 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp13);
			HEAPF[dsp + 958896 + (0 << 2) >> 2] = +(HEAPF[dsp + 950700 + ((((((HEAP32[dsp + 12 >> 2] | 0) - (HEAP32[dsp + 958892 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec41 = +(0.600000024 * +(fTemp13));
			fTemp14 = +(+(fRec41) + +(fRec37));
			fTemp15 = +(+(fRec29) + +(+(fRec33) + +(fTemp14)));
			HEAPF[dsp + 958904 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec17) + +(+(fRec21) + +(+(fRec25) + +(fTemp15)))))))))))));
			HEAPF[dsp + 958916 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(fTemp15))))) - +(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec17) + +(+(fRec25) + +(fRec21)))))))));
			fTemp16 = +(+(fRec33) + +(fRec29));
			HEAPF[dsp + 958928 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec21) + +(+(fRec25) + +(fTemp14))))))) - +(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec17) + +(fTemp16))))))));
			HEAPF[dsp + 958940 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec17) + +(fTemp14))))))) - +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(fRec21) + +(+(fRec25) + +(fTemp16))))))));
			fTemp17 = +(+(fRec41) + +(fRec33));
			fTemp18 = +(+(fRec37) + +(fRec29));
			HEAPF[dsp + 958952 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec17) + +(+(fRec25) + +(fTemp17))))))) - +(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec21) + +(fTemp18))))))));
			HEAPF[dsp + 958964 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec21) + +(fTemp17))))))) - +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(fRec17) + +(+(fRec25) + +(fTemp18))))))));
			fTemp19 = +(+(fRec41) + +(fRec29));
			fTemp20 = +(+(fRec37) + +(fRec33));
			HEAPF[dsp + 958976 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec25) + +(fTemp19))))))) - +(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(fRec17) + +(+(fRec21) + +(fTemp20))))))));
			HEAPF[dsp + 958988 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 417960 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 499924 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 721196 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 958896 + (1 << 2) >> 2]) + +(+(fRec17) + +(+(fRec21) + +(fTemp19))))))) - +(+(HEAPF[dsp + 270460 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 647424 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 803160 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 885124 + (1 << 2) >> 2]) + +(+(fRec13) + +(+(fRec25) + +(fTemp20))))))));
			fTemp21 = +(0.370000005 * +(+(HEAPF[dsp + 958916 + (0 << 2) >> 2]) + +(HEAPF[dsp + 958928 + (0 << 2) >> 2])));
			fTemp22 = +(+(fSlow90) * +(HEAPF[dsp + 959000 + (1 << 2) >> 2]));
			HEAPF[dsp + 959000 + (0 << 2) >> 2] = +(+(fTemp21) - +(+(fTemp22) + +(+(fSlow9) * +(HEAPF[dsp + 959000 + (2 << 2) >> 2]))));
			fTemp23 = +(+(fSlow9) * +(HEAPF[dsp + 959000 + (0 << 2) >> 2]));
			fTemp24 = +(0.5 * +(+(+(fTemp23) + +(+(HEAPF[dsp + 959000 + (2 << 2) >> 2]) + +(+(fTemp21) + +(fTemp22)))) + +(+(fSlow7) * +(+(+(fTemp23) + +(+(fTemp22) + +(HEAPF[dsp + 959000 + (2 << 2) >> 2]))) - +(fTemp21)))));
			fTemp25 = +(+(fSlow91) * +(HEAPF[dsp + 959012 + (1 << 2) >> 2]));
			HEAPF[dsp + 959012 + (0 << 2) >> 2] = +(+(fTemp24) - +(+(fTemp25) + +(+(fSlow5) * +(HEAPF[dsp + 959012 + (2 << 2) >> 2]))));
			fTemp26 = +(+(fSlow5) * +(HEAPF[dsp + 959012 + (0 << 2) >> 2]));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(0.5 * +(+(HEAPF[dsp + 4 + (0 << 2) >> 2]) * +(+(+(fTemp0) * +(fTemp1)) + +(+(fTemp2) * +(+(+(fTemp26) + +(+(HEAPF[dsp + 959012 + (2 << 2) >> 2]) + +(+(fTemp24) + +(fTemp25)))) + +(+(fSlow3) * +(+(+(fTemp26) + +(+(fTemp25) + +(HEAPF[dsp + 959012 + (2 << 2) >> 2]))) - +(fTemp24)))))))));
			fTemp27 = +(0.370000005 * +(+(HEAPF[dsp + 958916 + (0 << 2) >> 2]) - +(HEAPF[dsp + 958928 + (0 << 2) >> 2])));
			fTemp28 = +(+(fSlow90) * +(HEAPF[dsp + 959024 + (1 << 2) >> 2]));
			HEAPF[dsp + 959024 + (0 << 2) >> 2] = +(+(fTemp27) - +(+(fTemp28) + +(+(fSlow9) * +(HEAPF[dsp + 959024 + (2 << 2) >> 2]))));
			fTemp29 = +(+(fSlow9) * +(HEAPF[dsp + 959024 + (0 << 2) >> 2]));
			fTemp30 = +(0.5 * +(+(+(fTemp29) + +(+(HEAPF[dsp + 959024 + (2 << 2) >> 2]) + +(+(fTemp27) + +(fTemp28)))) + +(+(fSlow7) * +(+(+(fTemp29) + +(+(fTemp28) + +(HEAPF[dsp + 959024 + (2 << 2) >> 2]))) - +(fTemp27)))));
			fTemp31 = +(+(fSlow91) * +(HEAPF[dsp + 959036 + (1 << 2) >> 2]));
			HEAPF[dsp + 959036 + (0 << 2) >> 2] = +(+(fTemp30) - +(+(fTemp31) + +(+(fSlow5) * +(HEAPF[dsp + 959036 + (2 << 2) >> 2]))));
			fTemp32 = +(+(fSlow5) * +(HEAPF[dsp + 959036 + (0 << 2) >> 2]));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(0.5 * +(+(HEAPF[dsp + 4 + (0 << 2) >> 2]) * +(+(+(fTemp3) * +(fTemp1)) + +(+(fTemp2) * +(+(+(fTemp32) + +(+(HEAPF[dsp + 959036 + (2 << 2) >> 2]) + +(+(fTemp30) + +(fTemp31)))) + +(+(fSlow3) * +(+(+(fTemp32) + +(+(fTemp31) + +(HEAPF[dsp + 959036 + (2 << 2) >> 2]))) - +(fTemp30)))))))));
			HEAPF[dsp + 4 + (1 << 2) >> 2] = +(HEAPF[dsp + 4 + (0 << 2) >> 2]);
			HEAP32[dsp + 12 >> 2] = (((HEAP32[dsp + 12 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 65556 + (1 << 2) >> 2] = +(HEAPF[dsp + 65556 + (0 << 2) >> 2]);
			HEAPF[dsp + 65624 + (1 << 2) >> 2] = +(HEAPF[dsp + 65624 + (0 << 2) >> 2]);
			HEAPF[dsp + 65632 + (1 << 2) >> 2] = +(HEAPF[dsp + 65632 + (0 << 2) >> 2]);
			HEAPF[dsp + 270460 + (1 << 2) >> 2] = +(HEAPF[dsp + 270460 + (0 << 2) >> 2]);
			HEAPF[dsp + 270476 + (1 << 2) >> 2] = +(HEAPF[dsp + 270476 + (0 << 2) >> 2]);
			HEAPF[dsp + 270484 + (1 << 2) >> 2] = +(HEAPF[dsp + 270484 + (0 << 2) >> 2]);
			HEAPF[dsp + 417960 + (1 << 2) >> 2] = +(HEAPF[dsp + 417960 + (0 << 2) >> 2]);
			HEAPF[dsp + 417976 + (1 << 2) >> 2] = +(HEAPF[dsp + 417976 + (0 << 2) >> 2]);
			HEAPF[dsp + 417984 + (1 << 2) >> 2] = +(HEAPF[dsp + 417984 + (0 << 2) >> 2]);
			HEAPF[dsp + 499924 + (1 << 2) >> 2] = +(HEAPF[dsp + 499924 + (0 << 2) >> 2]);
			HEAPF[dsp + 499940 + (1 << 2) >> 2] = +(HEAPF[dsp + 499940 + (0 << 2) >> 2]);
			HEAPF[dsp + 499948 + (1 << 2) >> 2] = +(HEAPF[dsp + 499948 + (0 << 2) >> 2]);
			HEAPF[dsp + 647424 + (1 << 2) >> 2] = +(HEAPF[dsp + 647424 + (0 << 2) >> 2]);
			HEAPF[dsp + 647440 + (1 << 2) >> 2] = +(HEAPF[dsp + 647440 + (0 << 2) >> 2]);
			HEAPF[dsp + 647448 + (1 << 2) >> 2] = +(HEAPF[dsp + 647448 + (0 << 2) >> 2]);
			HEAPF[dsp + 721196 + (1 << 2) >> 2] = +(HEAPF[dsp + 721196 + (0 << 2) >> 2]);
			HEAPF[dsp + 721212 + (1 << 2) >> 2] = +(HEAPF[dsp + 721212 + (0 << 2) >> 2]);
			HEAPF[dsp + 721220 + (1 << 2) >> 2] = +(HEAPF[dsp + 721220 + (0 << 2) >> 2]);
			HEAPF[dsp + 803160 + (1 << 2) >> 2] = +(HEAPF[dsp + 803160 + (0 << 2) >> 2]);
			HEAPF[dsp + 803176 + (1 << 2) >> 2] = +(HEAPF[dsp + 803176 + (0 << 2) >> 2]);
			HEAPF[dsp + 803184 + (1 << 2) >> 2] = +(HEAPF[dsp + 803184 + (0 << 2) >> 2]);
			HEAPF[dsp + 885124 + (1 << 2) >> 2] = +(HEAPF[dsp + 885124 + (0 << 2) >> 2]);
			HEAPF[dsp + 885140 + (1 << 2) >> 2] = +(HEAPF[dsp + 885140 + (0 << 2) >> 2]);
			HEAPF[dsp + 885148 + (1 << 2) >> 2] = +(HEAPF[dsp + 885148 + (0 << 2) >> 2]);
			HEAPF[dsp + 958896 + (1 << 2) >> 2] = +(HEAPF[dsp + 958896 + (0 << 2) >> 2]);
			HEAPF[dsp + 958904 + (2 << 2) >> 2] = +(HEAPF[dsp + 958904 + (1 << 2) >> 2]);
			HEAPF[dsp + 958904 + (1 << 2) >> 2] = +(HEAPF[dsp + 958904 + (0 << 2) >> 2]);
			HEAPF[dsp + 958916 + (2 << 2) >> 2] = +(HEAPF[dsp + 958916 + (1 << 2) >> 2]);
			HEAPF[dsp + 958916 + (1 << 2) >> 2] = +(HEAPF[dsp + 958916 + (0 << 2) >> 2]);
			HEAPF[dsp + 958928 + (2 << 2) >> 2] = +(HEAPF[dsp + 958928 + (1 << 2) >> 2]);
			HEAPF[dsp + 958928 + (1 << 2) >> 2] = +(HEAPF[dsp + 958928 + (0 << 2) >> 2]);
			HEAPF[dsp + 958940 + (2 << 2) >> 2] = +(HEAPF[dsp + 958940 + (1 << 2) >> 2]);
			HEAPF[dsp + 958940 + (1 << 2) >> 2] = +(HEAPF[dsp + 958940 + (0 << 2) >> 2]);
			HEAPF[dsp + 958952 + (2 << 2) >> 2] = +(HEAPF[dsp + 958952 + (1 << 2) >> 2]);
			HEAPF[dsp + 958952 + (1 << 2) >> 2] = +(HEAPF[dsp + 958952 + (0 << 2) >> 2]);
			HEAPF[dsp + 958964 + (2 << 2) >> 2] = +(HEAPF[dsp + 958964 + (1 << 2) >> 2]);
			HEAPF[dsp + 958964 + (1 << 2) >> 2] = +(HEAPF[dsp + 958964 + (0 << 2) >> 2]);
			HEAPF[dsp + 958976 + (2 << 2) >> 2] = +(HEAPF[dsp + 958976 + (1 << 2) >> 2]);
			HEAPF[dsp + 958976 + (1 << 2) >> 2] = +(HEAPF[dsp + 958976 + (0 << 2) >> 2]);
			HEAPF[dsp + 958988 + (2 << 2) >> 2] = +(HEAPF[dsp + 958988 + (1 << 2) >> 2]);
			HEAPF[dsp + 958988 + (1 << 2) >> 2] = +(HEAPF[dsp + 958988 + (0 << 2) >> 2]);
			HEAPF[dsp + 959000 + (2 << 2) >> 2] = +(HEAPF[dsp + 959000 + (1 << 2) >> 2]);
			HEAPF[dsp + 959000 + (1 << 2) >> 2] = +(HEAPF[dsp + 959000 + (0 << 2) >> 2]);
			HEAPF[dsp + 959012 + (2 << 2) >> 2] = +(HEAPF[dsp + 959012 + (1 << 2) >> 2]);
			HEAPF[dsp + 959012 + (1 << 2) >> 2] = +(HEAPF[dsp + 959012 + (0 << 2) >> 2]);
			HEAPF[dsp + 959024 + (2 << 2) >> 2] = +(HEAPF[dsp + 959024 + (1 << 2) >> 2]);
			HEAPF[dsp + 959024 + (1 << 2) >> 2] = +(HEAPF[dsp + 959024 + (0 << 2) >> 2]);
			HEAPF[dsp + 959036 + (2 << 2) >> 2] = +(HEAPF[dsp + 959036 + (1 << 2) >> 2]);
			HEAPF[dsp + 959036 + (1 << 2) >> 2] = +(HEAPF[dsp + 959036 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 959048;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/Zita_Rev1/Output/Level"] = 0;
	pathTable["/Zita_Rev1/Output/Dry/Wet_Mix"] = 65552;
	pathTable["/Zita_Rev1/Input/In_Delay"] = 262260;
	pathTable["/Zita_Rev1/RM_Peaking_Equalizer_2/Eq2_Freq"] = 65576;
	pathTable["/Zita_Rev1/RM_Peaking_Equalizer_2/Eq2_Level"] = 65580;
	pathTable["/Zita_Rev1/RM_Peaking_Equalizer_1/Eq1_Freq"] = 65584;
	pathTable["/Zita_Rev1/RM_Peaking_Equalizer_1/Eq1_Level"] = 65588;
	pathTable["/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/Mid_RT60"] = 65600;
	pathTable["/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/HF_Damping"] = 65608;
	pathTable["/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/Low_RT60"] = 65612;
	pathTable["/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/LF_X"] = 65620;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"reverb\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"reverb\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"Zita_Rev1\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"~ ZITA REV1 FEEDBACK DELAY NETWORK (FDN) & SCHROEDER  ALLPASS-COMB REVERBERATOR (8x8). See Faust's reverbs.lib for documentation and  references\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"Input\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"In Delay\",\"address\":\"/Zita_Rev1/Input/In_Delay\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Delay in ms   before reverberation begins\"},{\"unit\":\"ms\"}],\"init\":\"60\",\"min\":\"20\",\"max\":\"100\",\"step\":\"1\"}]},{\"type\":\"hgroup\",\"label\":\"Decay Times in Bands (see tooltips)\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"LF X\",\"address\":\"/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/LF_X\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Crossover frequency (Hz) separating low and middle frequencies\"},{\"unit\":\"Hz\"}],\"init\":\"200\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"1\"},{\"type\":\"vslider\",\"label\":\"Low RT60\",\"address\":\"/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/Low_RT60\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"T60 = time (in seconds) to decay 60dB in low-frequency band\"},{\"unit\":\"s\"}],\"init\":\"3\",\"min\":\"1\",\"max\":\"8\",\"step\":\"0.1\"},{\"type\":\"vslider\",\"label\":\"Mid RT60\",\"address\":\"/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/Mid_RT60\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"T60 = time (in seconds) to decay 60dB in middle band\"},{\"unit\":\"s\"}],\"init\":\"2\",\"min\":\"1\",\"max\":\"8\",\"step\":\"0.1\"},{\"type\":\"vslider\",\"label\":\"HF Damping\",\"address\":\"/Zita_Rev1/Decay_Times_in_Bands_(see_tooltips)/HF_Damping\",\"meta\":[{\"4\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Frequency (Hz) at which the high-frequency T60 is half the middle-band's T60\"},{\"unit\":\"Hz\"}],\"init\":\"6000\",\"min\":\"1500\",\"max\":\"23520\",\"step\":\"1\"}]},{\"type\":\"hgroup\",\"label\":\"RM Peaking Equalizer 1\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Eq1 Freq\",\"address\":\"/Zita_Rev1/RM_Peaking_Equalizer_1/Eq1_Freq\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Center-frequency of second-order Regalia-Mitra peaking equalizer section 1\"},{\"unit\":\"Hz\"}],\"init\":\"315\",\"min\":\"40\",\"max\":\"2500\",\"step\":\"1\"},{\"type\":\"vslider\",\"label\":\"Eq1 Level\",\"address\":\"/Zita_Rev1/RM_Peaking_Equalizer_1/Eq1_Level\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Peak level   in dB of second-order Regalia-Mitra peaking equalizer section 1\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-15\",\"max\":\"15\",\"step\":\"0.1\"}]},{\"type\":\"hgroup\",\"label\":\"RM Peaking Equalizer 2\",\"meta\":[{\"4\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Eq2 Freq\",\"address\":\"/Zita_Rev1/RM_Peaking_Equalizer_2/Eq2_Freq\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Center-frequency of second-order Regalia-Mitra peaking equalizer section 2\"},{\"unit\":\"Hz\"}],\"init\":\"1500\",\"min\":\"160\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"vslider\",\"label\":\"Eq2 Level\",\"address\":\"/Zita_Rev1/RM_Peaking_Equalizer_2/Eq2_Level\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Peak level   in dB of second-order Regalia-Mitra peaking equalizer section 2\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-15\",\"max\":\"15\",\"step\":\"0.1\"}]},{\"type\":\"hgroup\",\"label\":\"Output\",\"meta\":[{\"5\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Dry/Wet Mix\",\"address\":\"/Zita_Rev1/Output/Dry/Wet_Mix\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"-1 = dry, 1 = wet\"}],\"init\":\"0\",\"min\":\"-1\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Level\",\"address\":\"/Zita_Rev1/Output/Level\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Output scale   factor\"},{\"unit\":\"dB\"}],\"init\":\"-20\",\"min\":\"-70\",\"max\":\"40\",\"step\":\"0.1\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "reverb");
	m.declare("reverbs.lib/name", "Faust Reverb Library");
	m.declare("reverbs.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

