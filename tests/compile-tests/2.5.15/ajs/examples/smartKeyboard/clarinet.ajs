/* ------------------------------------------------------------
name: "clarinet"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var expf = foreign.exp;
	var fabsf = foreign.abs;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 16 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 20 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 16 >> 2] | 0))))));
		HEAPF[dsp + 24 >> 2] = +(expf(+(0. - +(50. / +(HEAPF[dsp + 20 >> 2])))));
		HEAPF[dsp + 28 >> 2] = +(1. - +(HEAPF[dsp + 24 >> 2]));
		HEAPF[dsp + 8264 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 20 >> 2]));
		HEAPF[dsp + 8268 >> 2] = +(0.00147058826 * +(HEAPF[dsp + 20 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 56 >> 2] = 0.;
		HEAPF[dsp + 8272 >> 2] = 0.;
		HEAPF[dsp + 8276 >> 2] = 0.;
		HEAPF[dsp + 8280 >> 2] = 0.;
		HEAPF[dsp + 8284 >> 2] = 0.;
		HEAPF[dsp + 8288 >> 2] = 0.;
		HEAPF[dsp + 8292 >> 2] = 0.;
		HEAPF[dsp + 8296 >> 2] = 0.;
		HEAPF[dsp + 8300 >> 2] = 0.;
		HEAPF[dsp + 8320 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 32 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 68 >> 2] = 0;
		for (l6 = 0; (((l6 | 0) < 2048) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAP32[dsp + 8304 + ((l7 | 0) << 2) >> 2] = 0;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAP32[dsp + 8312 + ((l8 | 0) << 2) >> 2] = 0;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAP32[dsp + 8324 + ((l9 | 0) << 2) >> 2] = 0;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAP32[dsp + 8332 + ((l10 | 0) << 2) >> 2] = 0;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 8340 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 8348 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 8356 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2048) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 8364 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 16556 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 16 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var iSlow1 = 0;
		var iSlow2 = 0;
		var iSlow3 = 0;
		var iSlow4 = 0;
		var iSlow5 = 0;
		var iSlow6 = 0;
		var iSlow7 = 0;
		var iSlow8 = 0;
		var iSlow9 = 0;
		var iSlow10 = 0;
		var iSlow11 = 0;
		var iSlow12 = 0;
		var iSlow13 = 0;
		var iSlow14 = 0;
		var iSlow15 = 0;
		var iSlow16 = 0;
		var fSlow17 = 0.;
		var iSlow18 = 0;
		var iSlow19 = 0;
		var iSlow20 = 0;
		var iSlow21 = 0;
		var iSlow22 = 0;
		var iSlow23 = 0;
		var iSlow24 = 0;
		var iSlow25 = 0;
		var iSlow26 = 0;
		var iSlow27 = 0;
		var iSlow28 = 0;
		var iSlow29 = 0;
		var iSlow30 = 0;
		var iSlow31 = 0;
		var iSlow32 = 0;
		var iSlow33 = 0;
		var iSlow34 = 0;
		var i = 0;
		var fRec10 = 0.;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var iRec16 = 0;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var iTemp5 = 0;
		var iTemp6 = 0;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var iTemp17 = 0;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var iTemp20 = 0;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var iTemp25 = 0;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var iTemp28 = 0;
		var iRec12 = 0;
		var fRec7 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec3 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec1 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(+(HEAPF[dsp + 56 >> 2])));
		iSlow1 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8272 >> 2])))));
		iSlow2 = (((iSlow1 | 0) == 1) | 0);
		iSlow3 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8276 >> 2])))));
		iSlow4 = (((iSlow3 | 0) == 1) | 0);
		iSlow5 = (((iSlow2 | 0) & (iSlow4 | 0)) | 0);
		iSlow6 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8280 >> 2])))));
		iSlow7 = (((iSlow6 | 0) == 0) | 0);
		iSlow8 = (((iSlow5 | 0) & (iSlow7 | 0)) | 0);
		iSlow9 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8284 >> 2])))));
		iSlow10 = (((iSlow9 | 0) == 0) | 0);
		iSlow11 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8288 >> 2])))));
		iSlow12 = (((iSlow11 | 0) == 0) | 0);
		iSlow13 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8292 >> 2])))));
		iSlow14 = (((iSlow13 | 0) == 0) | 0);
		iSlow15 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8296 >> 2])))));
		iSlow16 = (((iSlow15 | 0) == 0) | 0);
		fSlow17 = +(4. * +(1. - +((((((((((iSlow8 | 0) & (iSlow10 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0))));
		iSlow18 = (((iSlow6 | 0) == 1) | 0);
		iSlow19 = (((iSlow5 | 0) & (iSlow18 | 0)) | 0);
		iSlow20 = (((iSlow9 | 0) == 1) | 0);
		iSlow21 = (((iSlow19 | 0) & (iSlow20 | 0)) | 0);
		iSlow22 = (((iSlow11 | 0) == 1) | 0);
		iSlow23 = (((iSlow21 | 0) & (iSlow22 | 0)) | 0);
		iSlow24 = (((iSlow23 | 0) & (((iSlow13 | 0) == 1) | 0)) | 0);
		iSlow25 = (((iSlow15 | 0) == 1) | 0);
		iSlow26 = (((iSlow23 | 0) & (iSlow14 | 0)) | 0);
		iSlow27 = (((iSlow19 | 0) & (iSlow10 | 0)) | 0);
		iSlow28 = (((iSlow1 | 0) == 0) | 0);
		iSlow29 = (((iSlow3 | 0) == 0) | 0);
		iSlow30 = (((iSlow2 | 0) & (iSlow29 | 0)) | 0);
		iSlow31 = (((imul(13, (((iSlow24 | 0) & (iSlow25 | 0)) | 0)) | 0) + (((imul(11, (((iSlow24 | 0) & (iSlow16 | 0)) | 0)) | 0) + (((imul(10, (((iSlow26 | 0) & (iSlow25 | 0)) | 0)) | 0) + (((imul(9, (((iSlow26 | 0) & (iSlow16 | 0)) | 0)) | 0) + (((imul(8, (((((((iSlow21 | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0) + (((imul(7, (((((((iSlow27 | 0) & (iSlow22 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0) + (((imul(6, (((((((iSlow27 | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0) + (((((((((((((((((((iSlow28 | 0) & (iSlow4 | 0)) | 0) & (iSlow7 | 0)) | 0) & (iSlow10 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0) + (imul(2, (((((((((((iSlow30 | 0) & (iSlow7 | 0)) | 0) & (iSlow10 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0)) | 0) + (imul(3, (((((((((((iSlow30 | 0) & (iSlow18 | 0)) | 0) & (iSlow10 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0)) | 0) + (imul(5, (((((((((iSlow8 | 0) & (iSlow20 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow16 | 0)) | 0)) | 0)) | 0)) | 0)) | 0)) | 0)) | 0)) | 0)) | 0)) | 0);
		iSlow32 = (((((((((((((iSlow28 | 0) & (iSlow29 | 0)) | 0) & (iSlow7 | 0)) | 0) & (iSlow10 | 0)) | 0) & (iSlow12 | 0)) | 0) & (iSlow14 | 0)) | 0) & (iSlow25 | 0)) | 0);
		iSlow33 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8300 >> 2])))));
		iSlow34 = ~~(+(min_f(1., +(+(HEAPF[dsp + 8320 >> 2])))));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = 0;
			HEAPF[dsp + 8 + (0 << 2) >> 2] = +(0.5 * +(+(HEAPF[dsp + 8 + (1 << 2) >> 2]) + +(HEAPF[dsp + 8356 + (1 << 2) >> 2])));
			fRec10 = +(+(HEAPF[dsp + 8 + (0 << 2) >> 2]) + +((HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)));
			fTemp0 = +(fabsf(+(+(HEAPF[input0 + ((i | 0) << 2) >> 2]))));
			HEAPF[dsp + 32 + (0 << 2) >> 2] = +(max_f(+(fTemp0), +(+(+(HEAPF[dsp + 24 >> 2]) * +(HEAPF[dsp + 32 + (1 << 2) >> 2])) + +(+(HEAPF[dsp + 28 >> 2]) * +(fTemp0)))));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 24 >> 2]) * +(HEAPF[dsp + 40 + (1 << 2) >> 2])) + +(+(HEAPF[dsp + 28 >> 2]) * +(HEAPF[dsp + 32 + (0 << 2) >> 2])));
			fTemp1 = +(0.699999988 * +(HEAPF[dsp + 40 + (0 << 2) >> 2]));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 16556 + (1 << 2) >> 2]) + +(fTemp1));
			fTemp2 = +(0. - +(HEAPF[dsp + 48 + (1 << 2) >> 2]));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 60 + (1 << 2) >> 2])));
			HEAPF[dsp + 72 + ((((HEAP32[dsp + 68 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(fTemp1) + +(+(fTemp2) * +(max_f(-1., +(min_f(1., +(+(+(fTemp2) * +(+(0.25999999 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + -0.439999998)) + 0.699999988)))))));
			iRec16 = 0;
			HEAP32[dsp + 8304 + (0 << 2) >> 2] = (iSlow33 | 0);
			HEAP32[dsp + 8312 + (0 << 2) >> 2] = (((((((iSlow33 | 0) - (HEAP32[dsp + 8304 + (1 << 2) >> 2] | 0)) | 0) > 0) | 0) + (HEAP32[dsp + 8312 + (1 << 2) >> 2] | 0)) | 0);
			HEAP32[dsp + 8324 + (0 << 2) >> 2] = (iSlow34 | 0);
			HEAP32[dsp + 8332 + (0 << 2) >> 2] = (((((((iSlow34 | 0) - (HEAP32[dsp + 8324 + (1 << 2) >> 2] | 0)) | 0) > 0) | 0) + (HEAP32[dsp + 8332 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF[dsp + 8340 + (0 << 2) >> 2] = +(+(0.999000013 * +(HEAPF[dsp + 8340 + (1 << 2) >> 2])) + +(0.000772727246 / +(powf(2., +(0.0833333358 * +(+(fSlow17) - +((((iSlow31 | 0) + (imul(12, (((iSlow32 | 0) - (((HEAP32[dsp + 8312 + (0 << 2) >> 2] | 0) - (HEAP32[dsp + 8332 + (0 << 2) >> 2] | 0)) | 0)) | 0)) | 0)) | 0))))))));
			fTemp3 = +(+(HEAPF[dsp + 8268 >> 2]) * +(+(0.5 * +(HEAPF[dsp + 8340 + (0 << 2) >> 2])) + -0.0500000007));
			fTemp4 = +(+(fTemp3) + -1.49999499);
			iTemp5 = ~~(+(fTemp4));
			iTemp6 = ((~~(+(min_f(+(HEAPF[dsp + 8264 >> 2]), +(((max_i(0, ~~((iTemp5 | 0)))) | 0))))) + 1) | 0);
			fTemp7 = +(floorf(+(fTemp4)));
			fTemp8 = +(+(fTemp3) + +(-1. - +(fTemp7)));
			fTemp9 = +(0. - +(fTemp8));
			fTemp10 = +(+(fTemp3) + +(-2. - +(fTemp7)));
			fTemp11 = +(0. - +(0.5 * +(fTemp10)));
			fTemp12 = +(+(fTemp3) + +(-3. - +(fTemp7)));
			fTemp13 = +(0. - +(0.333333343 * +(fTemp12)));
			fTemp14 = +(+(fTemp3) + +(-4. - +(fTemp7)));
			fTemp15 = +(0. - +(0.25 * +(fTemp14)));
			fTemp16 = +(+(fTemp3) - +(fTemp7));
			iTemp17 = ((~~(+(min_f(+(HEAPF[dsp + 8264 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 2) | 0)))) | 0))))) + 1) | 0);
			fTemp18 = +(0. - +(fTemp12));
			fTemp19 = +(0. - +(0.5 * +(fTemp14)));
			iTemp20 = ((~~(+(min_f(+(HEAPF[dsp + 8264 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 1) | 0)))) | 0))))) + 1) | 0);
			fTemp21 = +(0. - +(fTemp10));
			fTemp22 = +(0. - +(0.5 * +(fTemp12)));
			fTemp23 = +(0. - +(0.333333343 * +(fTemp14)));
			fTemp24 = +(+(fTemp8) * +(fTemp10));
			iTemp25 = ((~~(+(min_f(+(HEAPF[dsp + 8264 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 3) | 0)))) | 0))))) + 1) | 0);
			fTemp26 = +(0. - +(fTemp14));
			fTemp27 = +(+(fTemp24) * +(fTemp12));
			iTemp28 = ((~~(+(min_f(+(HEAPF[dsp + 8264 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 4) | 0)))) | 0))))) + 1) | 0);
			HEAPF[dsp + 8348 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 72 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp6 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp9)) * +(fTemp11)) * +(fTemp13)) * +(fTemp15)) + +(+(fTemp16) * +(+(+(+(0.5 * +(+(+(+(fTemp8) * +(HEAPF[dsp + 72 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp17 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp18)) * +(fTemp19))) + +(+(+(+(HEAPF[dsp + 72 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp20 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp21)) * +(fTemp22)) * +(fTemp23))) + +(0.166666672 * +(+(+(fTemp24) * +(HEAPF[dsp + 72 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp25 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp26)))) + +(0.0416666679 * +(+(fTemp27) * +(HEAPF[dsp + 72 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp28 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 8356 + (0 << 2) >> 2] = +(HEAPF[dsp + 8348 + (1 << 2) >> 2]);
			iRec12 = (iRec16 | 0);
			fRec7 = +(fRec10);
			fRec8 = +(HEAPF[dsp + 8356 + (0 << 2) >> 2]);
			fRec9 = +(+(HEAPF[dsp + 8356 + (0 << 2) >> 2]) + +((iRec12 | 0)));
			HEAPF[dsp + 8364 + ((((HEAP32[dsp + 68 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec7);
			fRec3 = +(+(+(+(+(+(fTemp9) * +(fTemp11)) * +(fTemp13)) * +(fTemp15)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp6 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp16) * +(+(+(0.166666672 * +(+(+(fTemp24) * +(fTemp26)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp25 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp21) * +(fTemp22)) * +(fTemp23)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp20 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp8) * +(fTemp18)) * +(fTemp19)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp17 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp27) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 68 >> 2] | 0) - (iTemp28 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fRec4 = +(fRec8);
			fRec5 = +(fRec9);
			HEAPF[dsp + 16556 + (0 << 2) >> 2] = +(fRec3);
			fRec1 = +(fRec5);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 8 + (1 << 2) >> 2] = +(HEAPF[dsp + 8 + (0 << 2) >> 2]);
			HEAPF[dsp + 32 + (1 << 2) >> 2] = +(HEAPF[dsp + 32 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAP32[dsp + 68 >> 2] = (((HEAP32[dsp + 68 >> 2] | 0) + 1) | 0);
			HEAP32[dsp + 8304 + (1 << 2) >> 2] = (HEAP32[dsp + 8304 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 8312 + (1 << 2) >> 2] = (HEAP32[dsp + 8312 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 8324 + (1 << 2) >> 2] = (HEAP32[dsp + 8324 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 8332 + (1 << 2) >> 2] = (HEAP32[dsp + 8332 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 8340 + (1 << 2) >> 2] = +(HEAPF[dsp + 8340 + (0 << 2) >> 2]);
			HEAPF[dsp + 8348 + (1 << 2) >> 2] = +(HEAPF[dsp + 8348 + (0 << 2) >> 2]);
			HEAPF[dsp + 8356 + (1 << 2) >> 2] = +(HEAPF[dsp + 8356 + (0 << 2) >> 2]);
			HEAPF[dsp + 16556 + (1 << 2) >> 2] = +(HEAPF[dsp + 16556 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 16564;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/clarinet/reedStiffness"] = 56;
	pathTable["/clarinet/kb0k0status"] = 8272;
	pathTable["/clarinet/kb0k1status"] = 8276;
	pathTable["/clarinet/kb0k2status"] = 8280;
	pathTable["/clarinet/kb1k0status"] = 8284;
	pathTable["/clarinet/kb1k1status"] = 8288;
	pathTable["/clarinet/kb1k2status"] = 8292;
	pathTable["/clarinet/kb1k3status"] = 8296;
	pathTable["/clarinet/kb0k3status"] = 8300;
	pathTable["/clarinet/kb1k4status"] = 8320;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"clarinet\",\"inputs\":\"1\",\"outputs\":\"2\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'2',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'4',   'Keyboard 1 - Number of Keys':'5',  'Keyboard 0 - Send Freq':'0',   'Keyboard 1 - Send Freq':'0',  'Keyboard 0 - Piano Keyboard':'0',   'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 0 - Send Key Status':'1',  'Keyboard 1 - Send Key Status':'1',  'Keyboard 0 - Key 3 - Label':'O+',  'Keyboard 1 - Key 4 - Label':'O-' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"clarinet\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"clarinet\",\"items\":[{\"type\":\"hslider\",\"label\":\"kb0k0status\",\"address\":\"/clarinet/kb0k0status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb0k1status\",\"address\":\"/clarinet/kb0k1status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb0k2status\",\"address\":\"/clarinet/kb0k2status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb0k3status\",\"address\":\"/clarinet/kb0k3status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb1k0status\",\"address\":\"/clarinet/kb1k0status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb1k1status\",\"address\":\"/clarinet/kb1k1status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb1k2status\",\"address\":\"/clarinet/kb1k2status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb1k3status\",\"address\":\"/clarinet/kb1k3status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"kb1k4status\",\"address\":\"/clarinet/kb1k4status\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"reedStiffness\",\"address\":\"/clarinet/reedStiffness\",\"meta\":[{\"acc\":\"1 1 -10 0 10\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("analyzers.lib/name", "Faust Analyzer Library");
	m.declare("analyzers.lib/version", "0.0");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'2',  'Max Keyboard Polyphony':'0',  'Keyboard 0 - Number of Keys':'4',   'Keyboard 1 - Number of Keys':'5',  'Keyboard 0 - Send Freq':'0',   'Keyboard 1 - Send Freq':'0',  'Keyboard 0 - Piano Keyboard':'0',   'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 0 - Send Key Status':'1',  'Keyboard 1 - Send Key Status':'1',  'Keyboard 0 - Key 3 - Label':'O+',  'Keyboard 1 - Key 4 - Label':'O-' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "clarinet");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

