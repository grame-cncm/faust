/* ------------------------------------------------------------
name: "trumpet"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(3.14159274 / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 52 >> 2] = +(1. / +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 1.;
		HEAPF[dsp + 24 >> 2] = 0.;
		HEAPF[dsp + 28 >> 2] = 0.;
		HEAPF[dsp + 40 >> 2] = 1.;
		HEAPF[dsp + 56 >> 2] = 300.;
		HEAPF[dsp + 60 >> 2] = 1.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 32 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 44 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 3) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var iSlow5 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var iTemp3 = 0;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var iTemp7 = 0;
		var fRec5 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(+(HEAPF[dsp + 12 >> 2])));
		fSlow1 = +(min_f(1., +(+(+(HEAPF[dsp + 24 >> 2])) + +(+(HEAPF[dsp + 28 >> 2])))));
		fSlow2 = +(0.00100000005 * +(+(fSlow1) * +(+(HEAPF[dsp + 40 >> 2]))));
		fSlow3 = +(+(HEAPF[dsp + 56 >> 2]));
		fSlow4 = +(+(HEAPF[dsp + 60 >> 2]));
		iSlow5 = ((+(fSlow1) == 0.) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 16 + (1 << 2) >> 2])));
			fTemp0 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(4000. * +(HEAPF[dsp + 16 + (0 << 2) >> 2])) + 50.))));
			fTemp1 = +(1. / +(fTemp0));
			fTemp2 = +(+(fTemp1) + 1.);
			HEAPF[dsp + 32 + (0 << 2) >> 2] = +(fSlow1);
			HEAPF[dsp + 44 + (0 << 2) >> 2] = +(+(fSlow2) + +(0.999000013 * +(HEAPF[dsp + 44 + (1 << 2) >> 2])));
			iTemp3 = ((((+(fSlow1) == +(HEAPF[dsp + 32 + (1 << 2) >> 2])) | 0) | (iSlow5 | 0)) | 0);
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(+(fSlow4) * +(1. - +(0.999000013 * +((iTemp3 | 0))))) + +(0.999000013 * +(+((iTemp3 | 0)) * +(HEAPF[dsp + 64 + (1 << 2) >> 2]))));
			fTemp4 = +(max_f(1.00000001e-07, +(fabsf(+(+(fSlow3) * +(HEAPF[dsp + 64 + (0 << 2) >> 2]))))));
			fTemp5 = +(+(HEAPF[dsp + 72 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 52 >> 2]) * +(fTemp4)));
			fTemp6 = +(+(fTemp5) + -1.);
			iTemp7 = ((+(fTemp6) < 0.) | 0);
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +((iTemp7 | 0)?+(fTemp5):+(fTemp6));
			fRec5 = +((iTemp7 | 0)?+(fTemp5):+(+(fTemp5) + +(+(1. - +(+(HEAPF[dsp + 4 >> 2]) / +(fTemp4))) * +(fTemp6))));
			fTemp8 = +(+(HEAPF[dsp + 44 + (0 << 2) >> 2]) * +(+(2. * +(fRec5)) + -1.));
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(fTemp8);
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 88 + (1 << 2) >> 2]) * +(0. - +(+(1. - +(fTemp1)) / +(fTemp2)))) + +(+(+(fTemp8) + +(HEAPF[dsp + 80 + (1 << 2) >> 2])) / +(fTemp2)));
			fTemp9 = +(+(+(+(fTemp1) + 1.) / +(fTemp0)) + 1.);
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 88 + (0 << 2) >> 2]) - +(+(+(+(HEAPF[dsp + 96 + (2 << 2) >> 2]) * +(+(+(+(fTemp1) + -1.) / +(fTemp0)) + 1.)) + +(2. * +(+(HEAPF[dsp + 96 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp0), 2.))))))) / +(fTemp9)));
			fTemp10 = +(+(+(HEAPF[dsp + 96 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 96 + (1 << 2) >> 2])))) / +(fTemp9));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp10));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp10));
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			HEAPF[dsp + 32 + (1 << 2) >> 2] = +(HEAPF[dsp + 32 + (0 << 2) >> 2]);
			HEAPF[dsp + 44 + (1 << 2) >> 2] = +(HEAPF[dsp + 44 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (2 << 2) >> 2] = +(HEAPF[dsp + 96 + (1 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 108;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/trumpet/gate"] = 24;
	pathTable["/trumpet/y"] = 12;
	pathTable["/trumpet/sustain"] = 28;
	pathTable["/trumpet/gain"] = 40;
	pathTable["/trumpet/freq"] = 56;
	pathTable["/trumpet/bend"] = 60;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"trumpet\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'1',  'Mono Mode':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'77',  'Keyboard 1 - Lowest Key':'72',  'Keyboard 2 - Lowest Key':'67',  'Keyboard 3 - Lowest Key':'62',  'Keyboard 4 - Lowest Key':'57',  'Rounding Mode':'2',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1',  'Keyboard 4 - Send Y':'1', }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"trumpet\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"trumpet\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/trumpet/bend\",\"meta\":[{\"midi\":\"pitchwheel\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/trumpet/freq\",\"init\":\"300\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/trumpet/gain\",\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/trumpet/gate\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/trumpet/sustain\",\"meta\":[{\"midi\":\"ctrl 64\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/trumpet/y\",\"meta\":[{\"midi\":\"ctrl 1\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'1',  'Mono Mode':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'77',  'Keyboard 1 - Lowest Key':'72',  'Keyboard 2 - Lowest Key':'67',  'Keyboard 3 - Lowest Key':'62',  'Keyboard 4 - Lowest Key':'57',  'Rounding Mode':'2',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1',  'Keyboard 4 - Send Y':'1', }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "trumpet");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

