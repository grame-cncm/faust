/* ------------------------------------------------------------
name: "elecGuitar"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 24 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 28 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 24 >> 2] | 0))))));
		HEAPF[dsp + 32 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 36 >> 2] = +(0.000294117635 * +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 8284 >> 2] = +(0.00117647054 * +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 8308 >> 2] = +(15.707963 / +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 8324 >> 2] = +(0.00400000019 * +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 8344 >> 2] = +(0.00200000009 * +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 8348 >> 2] = +(500. / +(HEAPF[dsp + 28 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.;
		HEAPF[dsp + 4 >> 2] = 0.;
		HEAPF[dsp + 40 >> 2] = 300.;
		HEAPF[dsp + 44 >> 2] = 1.;
		HEAPF[dsp + 8296 >> 2] = 1.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 4) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 88 >> 2] = 0;
		for (l6 = 0; (((l6 | 0) < 2048) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 92 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 8288 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAP32[dsp + 8300 + ((l8 | 0) << 2) >> 2] = 0;
			
		}
		for (l9 = 0; (((l9 | 0) < 3) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 8312 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 8328 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 8336 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 3) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 8352 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 512) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 8364 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 10412 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 10420 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2048) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 10428 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 18620 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 4) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 18628 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 18644 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 512) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 18652 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 20700 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 24 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var iSlow1 = 0;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var i = 0;
		var fRec10 = 0.;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var iTemp6 = 0;
		var iTemp7 = 0;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var iTemp18 = 0;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var iTemp21 = 0;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var iTemp26 = 0;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var iTemp29 = 0;
		var fRec27 = 0.;
		var iRec35 = 0;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var iTemp32 = 0;
		var iTemp33 = 0;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var iTemp44 = 0;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var iTemp47 = 0;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var iTemp52 = 0;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var iTemp55 = 0;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var iTemp62 = 0;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fRec28 = 0.;
		var fRec29 = 0.;
		var fRec23 = 0.;
		var fRec24 = 0.;
		var fRec25 = 0.;
		var fRec19 = 0.;
		var fRec20 = 0.;
		var fRec21 = 0.;
		var fRec15 = 0.;
		var fRec17 = 0.;
		var fRec12 = 0.;
		var fRec7 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec3 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec1 = 0.;
		var j0 = 3;
		var j1 = 3;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(min_f(1., +(+(+(HEAPF[dsp + 0 >> 2])) + +(+(HEAPF[dsp + 4 >> 2])))));
		iSlow1 = ((+(fSlow0) == 0.) | 0);
		fSlow2 = +(+(HEAPF[dsp + 40 >> 2]));
		fSlow3 = +(+(HEAPF[dsp + 44 >> 2]));
		fSlow4 = +(+(HEAPF[dsp + 8296 >> 2]));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fRec10 = +(0. - +(0.997305274 * +(+(0.899999976 * +(HEAPF[dsp + 18628 + (2 << 2) >> 2])) + +(0.0500000007 * +(+(HEAPF[dsp + 18628 + (1 << 2) >> 2]) + +(HEAPF[dsp + 18628 + (3 << 2) >> 2]))))));
			HEAPF[dsp + 8 + (0 << 2) >> 2] = +(fSlow0);
			iTemp0 = ((((+(fSlow0) == +(HEAPF[dsp + 8 + (1 << 2) >> 2])) | 0) | (iSlow1 | 0)) | 0);
			fTemp1 = +(1. - +(0.999000013 * +((iTemp0 | 0))));
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(+(+(fSlow0) * +(fTemp1)) + +(0.999000013 * +(+((iTemp0 | 0)) * +(HEAPF[dsp + 16 + (1 << 2) >> 2]))));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(fTemp1)) + +(0.999000013 * +(+((iTemp0 | 0)) * +(HEAPF[dsp + 48 + (1 << 2) >> 2]))));
			fTemp2 = +(max_f(60., +(+(fSlow2) * +(HEAPF[dsp + 48 + (0 << 2) >> 2]))));
			fTemp3 = +(+(340. / +(fTemp2)) + -0.109999999);
			fTemp4 = +(+(HEAPF[dsp + 36 >> 2]) * +(fTemp3));
			fTemp5 = +(+(fTemp4) + -1.49999499);
			iTemp6 = ~~(+(fTemp5));
			iTemp7 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((iTemp6 | 0)))) | 0)))));
			fTemp8 = +(floorf(+(fTemp5)));
			fTemp9 = +(+(fTemp4) + +(-1. - +(fTemp8)));
			fTemp10 = +(0. - +(fTemp9));
			fTemp11 = +(+(fTemp4) + +(-2. - +(fTemp8)));
			fTemp12 = +(0. - +(0.5 * +(fTemp11)));
			fTemp13 = +(+(fTemp4) + +(-3. - +(fTemp8)));
			fTemp14 = +(0. - +(0.333333343 * +(fTemp13)));
			fTemp15 = +(+(fTemp4) + +(-4. - +(fTemp8)));
			fTemp16 = +(0. - +(0.25 * +(fTemp15)));
			fTemp17 = +(+(fTemp4) - +(fTemp8));
			iTemp18 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp6 | 0) + 2) | 0)))) | 0)))));
			fTemp19 = +(0. - +(fTemp13));
			fTemp20 = +(0. - +(0.5 * +(fTemp15)));
			iTemp21 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp6 | 0) + 1) | 0)))) | 0)))));
			fTemp22 = +(0. - +(fTemp11));
			fTemp23 = +(0. - +(0.5 * +(fTemp13)));
			fTemp24 = +(0. - +(0.333333343 * +(fTemp15)));
			fTemp25 = +(+(fTemp9) * +(fTemp11));
			iTemp26 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp6 | 0) + 3) | 0)))) | 0)))));
			fTemp27 = +(0. - +(fTemp15));
			fTemp28 = +(+(fTemp25) * +(fTemp13));
			iTemp29 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp6 | 0) + 4) | 0)))) | 0)))));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 18652 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp7 | 0) + 1) | 0)) | 0) & 511) | 0) << 2) >> 2]) * +(fTemp10)) * +(fTemp12)) * +(fTemp14)) * +(fTemp16)) + +(+(fTemp17) * +(+(+(+(0.5 * +(+(+(+(fTemp9) * +(HEAPF[dsp + 18652 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp18 | 0) + 1) | 0)) | 0) & 511) | 0) << 2) >> 2])) * +(fTemp19)) * +(fTemp20))) + +(+(+(+(HEAPF[dsp + 18652 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp21 | 0) + 1) | 0)) | 0) & 511) | 0) << 2) >> 2]) * +(fTemp22)) * +(fTemp23)) * +(fTemp24))) + +(0.166666672 * +(+(+(fTemp25) * +(HEAPF[dsp + 18652 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp26 | 0) + 1) | 0)) | 0) & 511) | 0) << 2) >> 2])) * +(fTemp27)))) + +(0.0416666679 * +(+(fTemp28) * +(HEAPF[dsp + 18652 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp29 | 0) + 1) | 0)) | 0) & 511) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(0.0500000007 * +(HEAPF[dsp + 64 + (1 << 2) >> 2])) + +(0.949999988 * +(HEAPF[dsp + 56 + (1 << 2) >> 2])));
			fRec27 = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(HEAPF[dsp + 20700 + (1 << 2) >> 2]);
			HEAPF[dsp + 92 + ((((HEAP32[dsp + 88 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(0. - +(0.997305274 * +(+(0.899999976 * +(HEAPF[dsp + 72 + (2 << 2) >> 2])) + +(0.0500000007 * +(+(HEAPF[dsp + 72 + (1 << 2) >> 2]) + +(HEAPF[dsp + 72 + (3 << 2) >> 2]))))));
			iRec35 = 0;
			fTemp30 = +(+(HEAPF[dsp + 8284 >> 2]) * +(fTemp3));
			fTemp31 = +(+(fTemp30) + -1.49999499);
			iTemp32 = ~~(+(fTemp31));
			iTemp33 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((iTemp32 | 0)))) | 0)))));
			fTemp34 = +(floorf(+(fTemp31)));
			fTemp35 = +(+(fTemp30) + +(-1. - +(fTemp34)));
			fTemp36 = +(0. - +(fTemp35));
			fTemp37 = +(+(fTemp30) + +(-2. - +(fTemp34)));
			fTemp38 = +(0. - +(0.5 * +(fTemp37)));
			fTemp39 = +(+(fTemp30) + +(-3. - +(fTemp34)));
			fTemp40 = +(0. - +(0.333333343 * +(fTemp39)));
			fTemp41 = +(+(fTemp30) + +(-4. - +(fTemp34)));
			fTemp42 = +(0. - +(0.25 * +(fTemp41)));
			fTemp43 = +(+(fTemp30) - +(fTemp34));
			iTemp44 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp32 | 0) + 2) | 0)))) | 0)))));
			fTemp45 = +(0. - +(fTemp39));
			fTemp46 = +(0. - +(0.5 * +(fTemp41)));
			iTemp47 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp32 | 0) + 1) | 0)))) | 0)))));
			fTemp48 = +(0. - +(fTemp37));
			fTemp49 = +(0. - +(0.5 * +(fTemp39)));
			fTemp50 = +(0. - +(0.333333343 * +(fTemp41)));
			fTemp51 = +(+(fTemp35) * +(fTemp37));
			iTemp52 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp32 | 0) + 3) | 0)))) | 0)))));
			fTemp53 = +(0. - +(fTemp41));
			fTemp54 = +(+(fTemp51) * +(fTemp39));
			iTemp55 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, ~~((((iTemp32 | 0) + 4) | 0)))) | 0)))));
			HEAPF[dsp + 8288 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 92 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp33 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp36)) * +(fTemp38)) * +(fTemp40)) * +(fTemp42)) + +(+(fTemp43) * +(+(+(+(0.5 * +(+(+(+(fTemp35) * +(HEAPF[dsp + 92 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp44 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp45)) * +(fTemp46))) + +(+(+(+(HEAPF[dsp + 92 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp47 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp48)) * +(fTemp49)) * +(fTemp50))) + +(0.166666672 * +(+(+(fTemp51) * +(HEAPF[dsp + 92 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp52 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp53)))) + +(0.0416666679 * +(+(fTemp54) * +(HEAPF[dsp + 92 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp55 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAP32[dsp + 8300 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 8300 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			fTemp56 = +(tanf(+(+(HEAPF[dsp + 8308 >> 2]) * +(fTemp2))));
			fTemp57 = +(1. / +(fTemp56));
			fTemp58 = +(+(+(+(fTemp57) + 1.41421354) / +(fTemp56)) + 1.);
			HEAPF[dsp + 8312 + (0 << 2) >> 2] = +(+(4.65661287e-10 * +((HEAP32[dsp + 8300 + (0 << 2) >> 2] | 0))) - +(+(+(+(HEAPF[dsp + 8312 + (2 << 2) >> 2]) * +(+(+(+(fTemp57) + -1.41421354) / +(fTemp56)) + 1.)) + +(2. * +(+(HEAPF[dsp + 8312 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp56), 2.))))))) / +(fTemp58)));
			fTemp59 = +(powf(+(1. - +(0.000500000024 * +(fTemp2))), 2.));
			HEAPF[dsp + 8328 + (0 << 2) >> 2] = +(fTemp59);
			fTemp60 = +(+(HEAPF[dsp + 8324 >> 2]) * +(fTemp59));
			HEAPF[dsp + 8336 + (0 << 2) >> 2] = +(((((+(+(fSlow0) - +(HEAPF[dsp + 8 + (1 << 2) >> 2])) > 0.) | 0) > 0) | 0)?0.:+(min_f(+(fTemp60), +(+(+(HEAPF[dsp + 8336 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 8324 >> 2]) * +(+(fTemp59) - +(HEAPF[dsp + 8328 + (1 << 2) >> 2])))) + 1.))));
			fTemp61 = +(+(HEAPF[dsp + 8344 >> 2]) * +(fTemp59));
			iTemp62 = ((+(HEAPF[dsp + 8336 + (0 << 2) >> 2]) < +(fTemp61)) | 0);
			fTemp63 = +(+(fSlow4) * +(+(+(+(HEAPF[dsp + 8312 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 8312 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 8312 + (1 << 2) >> 2])))) * +((iTemp62 | 0)?+(((+(HEAPF[dsp + 8336 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp62 | 0)?+(+(HEAPF[dsp + 8348 >> 2]) * +(+(HEAPF[dsp + 8336 + (0 << 2) >> 2]) / +(fTemp59))):1.)):+(((+(HEAPF[dsp + 8336 + (0 << 2) >> 2]) < +(fTemp60)) | 0)?+(+(+(HEAPF[dsp + 8348 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 8336 + (0 << 2) >> 2]) - +(fTemp61))) / +(fTemp59))) + 1.):0.))) / +(fTemp58)));
			fTemp64 = +(+(HEAPF[dsp + 8288 + (1 << 2) >> 2]) + +(fTemp63));
			HEAPF[dsp + 8352 + (0 << 2) >> 2] = +(fTemp64);
			HEAPF[dsp + 8364 + ((((HEAP32[dsp + 88 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(+(0.0500000007 * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - 1) | 0) & 511) | 0) << 2) >> 2])) + +(0.949999988 * +(HEAPF[dsp + 8352 + (2 << 2) >> 2])));
			fRec28 = +(+(+(+(+(+(fTemp10) * +(fTemp12)) * +(fTemp14)) * +(fTemp16)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (iTemp7 | 0)) | 0) & 511) | 0) << 2) >> 2])) + +(+(fTemp17) * +(+(0.0416666679 * +(+(fTemp28) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (iTemp29 | 0)) | 0) & 511) | 0) << 2) >> 2]))) + +(+(+(+(+(+(fTemp22) * +(fTemp23)) * +(fTemp24)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (iTemp21 | 0)) | 0) & 511) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp9) * +(fTemp19)) * +(fTemp20)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (iTemp18 | 0)) | 0) & 511) | 0) << 2) >> 2])))) + +(0.166666672 * +(+(+(fTemp25) * +(fTemp27)) * +(HEAPF[dsp + 8364 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (iTemp26 | 0)) | 0) & 511) | 0) << 2) >> 2])))))));
			fRec29 = +(+(HEAPF[dsp + 10412 + (1 << 2) >> 2]) + +(+((iRec35 | 0)) + +(HEAPF[dsp + 8352 + (1 << 2) >> 2])));
			HEAPF[dsp + 10412 + (0 << 2) >> 2] = +(fRec27);
			fRec23 = +(HEAPF[dsp + 10412 + (1 << 2) >> 2]);
			fRec24 = +(fRec28);
			fRec25 = +(fRec29);
			HEAPF[dsp + 10420 + (0 << 2) >> 2] = +(fRec23);
			fRec19 = +(+(fTemp63) + +(HEAPF[dsp + 10420 + (1 << 2) >> 2]));
			fRec20 = +(fRec24);
			fRec21 = +(fRec25);
			HEAPF[dsp + 10428 + ((((HEAP32[dsp + 88 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec19);
			fRec15 = +(+(+(+(+(+(fTemp36) * +(fTemp38)) * +(fTemp40)) * +(fTemp42)) * +(HEAPF[dsp + 10428 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp33 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp43) * +(+(+(0.166666672 * +(+(+(fTemp51) * +(fTemp53)) * +(HEAPF[dsp + 10428 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp52 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp48) * +(fTemp49)) * +(fTemp50)) * +(HEAPF[dsp + 10428 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp47 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp35) * +(fTemp45)) * +(fTemp46)) * +(HEAPF[dsp + 10428 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp44 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp54) * +(HEAPF[dsp + 10428 + ((((((HEAP32[dsp + 88 >> 2] | 0) - (((iTemp55 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 18620 + (0 << 2) >> 2] = +(fRec20);
			fRec17 = +(fRec21);
			HEAPF[dsp + 18628 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 16 + (0 << 2) >> 2]) * +(HEAPF[dsp + 18620 + (1 << 2) >> 2]));
			fRec12 = +(fRec17);
			HEAPF[dsp + 18644 + (0 << 2) >> 2] = +(fRec10);
			fRec7 = +(+(HEAPF[dsp + 16 + (0 << 2) >> 2]) * +(HEAPF[dsp + 18644 + (1 << 2) >> 2]));
			fRec8 = +(HEAPF[dsp + 18628 + (0 << 2) >> 2]);
			fRec9 = +(fRec12);
			HEAPF[dsp + 18652 + ((((HEAP32[dsp + 88 >> 2] | 0) & 511) | 0) << 2) >> 2] = +(fRec7);
			fRec3 = +(fRec15);
			fRec4 = +(fRec8);
			fRec5 = +(fRec9);
			HEAPF[dsp + 20700 + (0 << 2) >> 2] = +(fRec3);
			fRec1 = +(fRec5);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAPF[dsp + 8 + (1 << 2) >> 2] = +(HEAPF[dsp + 8 + (0 << 2) >> 2]);
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			for (j0 = 3; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF[dsp + 72 + ((j0 | 0) << 2) >> 2] = +(HEAPF[dsp + 72 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAP32[dsp + 88 >> 2] = (((HEAP32[dsp + 88 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8288 + (1 << 2) >> 2] = +(HEAPF[dsp + 8288 + (0 << 2) >> 2]);
			HEAP32[dsp + 8300 + (1 << 2) >> 2] = (HEAP32[dsp + 8300 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 8312 + (2 << 2) >> 2] = +(HEAPF[dsp + 8312 + (1 << 2) >> 2]);
			HEAPF[dsp + 8312 + (1 << 2) >> 2] = +(HEAPF[dsp + 8312 + (0 << 2) >> 2]);
			HEAPF[dsp + 8328 + (1 << 2) >> 2] = +(HEAPF[dsp + 8328 + (0 << 2) >> 2]);
			HEAPF[dsp + 8336 + (1 << 2) >> 2] = +(HEAPF[dsp + 8336 + (0 << 2) >> 2]);
			HEAPF[dsp + 8352 + (2 << 2) >> 2] = +(HEAPF[dsp + 8352 + (1 << 2) >> 2]);
			HEAPF[dsp + 8352 + (1 << 2) >> 2] = +(HEAPF[dsp + 8352 + (0 << 2) >> 2]);
			HEAPF[dsp + 10412 + (1 << 2) >> 2] = +(HEAPF[dsp + 10412 + (0 << 2) >> 2]);
			HEAPF[dsp + 10420 + (1 << 2) >> 2] = +(HEAPF[dsp + 10420 + (0 << 2) >> 2]);
			HEAPF[dsp + 18620 + (1 << 2) >> 2] = +(HEAPF[dsp + 18620 + (0 << 2) >> 2]);
			for (j1 = 3; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF[dsp + 18628 + ((j1 | 0) << 2) >> 2] = +(HEAPF[dsp + 18628 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF[dsp + 18644 + (1 << 2) >> 2] = +(HEAPF[dsp + 18644 + (0 << 2) >> 2]);
			HEAPF[dsp + 20700 + (1 << 2) >> 2] = +(HEAPF[dsp + 20700 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 20708;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/elecGuitar/gate"] = 0;
	pathTable["/elecGuitar/sustain"] = 4;
	pathTable["/elecGuitar/freq"] = 40;
	pathTable["/elecGuitar/bend"] = 44;
	pathTable["/elecGuitar/gain"] = 8296;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"elecGuitar\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'6',  'Max Keyboard Polyphony':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 5 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'72',  'Keyboard 1 - Lowest Key':'67',  'Keyboard 2 - Lowest Key':'62',  'Keyboard 3 - Lowest Key':'57',  'Keyboard 4 - Lowest Key':'52',  'Keyboard 5 - Lowest Key':'47',  'Rounding Mode':'2' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"elecGuitar\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"elecGuitar\",\"items\":[{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/elecGuitar/bend\",\"meta\":[{\"midi\":\"pitchwheel\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/elecGuitar/freq\",\"init\":\"300\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/elecGuitar/gain\",\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/elecGuitar/gate\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/elecGuitar/sustain\",\"meta\":[{\"midi\":\"ctrl 64\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("envelopes.lib/author", "GRAME");
	m.declare("envelopes.lib/copyright", "GRAME");
	m.declare("envelopes.lib/license", "LGPL with exception");
	m.declare("envelopes.lib/name", "Faust Envelope Library");
	m.declare("envelopes.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'6',  'Max Keyboard Polyphony':'1',  'Keyboard 0 - Number of Keys':'13',  'Keyboard 1 - Number of Keys':'13',  'Keyboard 2 - Number of Keys':'13',  'Keyboard 3 - Number of Keys':'13',  'Keyboard 4 - Number of Keys':'13',  'Keyboard 5 - Number of Keys':'13',  'Keyboard 0 - Lowest Key':'72',  'Keyboard 1 - Lowest Key':'67',  'Keyboard 2 - Lowest Key':'62',  'Keyboard 3 - Lowest Key':'57',  'Keyboard 4 - Lowest Key':'52',  'Keyboard 5 - Lowest Key':'47',  'Rounding Mode':'2' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "elecGuitar");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

