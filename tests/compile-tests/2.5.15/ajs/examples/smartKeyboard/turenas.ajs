/* ------------------------------------------------------------
name: "turenas"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(6.28318548 / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 84 >> 2] = +(0.00100000005 * +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 88 >> 2] = +(1. / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 92 >> 2] = +(1000. / +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 400.;
		HEAPF[dsp + 16 >> 2] = 0.;
		HEAPF[dsp + 44 >> 2] = 0.;
		HEAPF[dsp + 56 >> 2] = 2.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 20 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 76 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 112 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 128 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 136 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 144 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 152 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 160 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 168 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 176 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 184 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 192 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 200 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 208 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 216 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 224 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 232 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 240 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 248 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var iTemp1 = 0;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var iTemp7 = 0;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var iTemp10 = 0;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var iTemp13 = 0;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var iTemp16 = 0;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var iTemp19 = 0;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 12 >> 2]));
		fSlow1 = +(+(HEAPF[dsp + 16 >> 2]));
		fSlow2 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(0.833333313 * +(fSlow1)) + 1.)));
		fSlow3 = +(sinf(+(fSlow2)));
		fSlow4 = +(cosf(+(fSlow2)));
		fSlow5 = +(0. - +(fSlow3));
		fSlow6 = +(+(HEAPF[dsp + 44 >> 2]));
		fSlow7 = +(0.00100000005 * +(+(HEAPF[dsp + 56 >> 2])));
		fSlow8 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(1.66666663 * +(fSlow1)) + 1.)));
		fSlow9 = +(sinf(+(fSlow8)));
		fSlow10 = +(cosf(+(fSlow8)));
		fSlow11 = +(0. - +(fSlow9));
		fSlow12 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(2.5 * +(fSlow1)) + 1.)));
		fSlow13 = +(sinf(+(fSlow12)));
		fSlow14 = +(cosf(+(fSlow12)));
		fSlow15 = +(0. - +(fSlow13));
		fSlow16 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(3.33333325 * +(fSlow1)) + 1.)));
		fSlow17 = +(sinf(+(fSlow16)));
		fSlow18 = +(cosf(+(fSlow16)));
		fSlow19 = +(0. - +(fSlow17));
		fSlow20 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(4.16666651 * +(fSlow1)) + 1.)));
		fSlow21 = +(sinf(+(fSlow20)));
		fSlow22 = +(cosf(+(fSlow20)));
		fSlow23 = +(0. - +(fSlow21));
		fSlow24 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(+(5. * +(fSlow1)) + 1.)));
		fSlow25 = +(sinf(+(fSlow24)));
		fSlow26 = +(cosf(+(fSlow24)));
		fSlow27 = +(0. - +(fSlow25));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 20 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 36 + (1 << 2) >> 2])) + +(+(fSlow4) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])));
			iTemp0 = ((1 - (HEAP32[dsp + 20 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(+(+(+(fSlow4) * +(HEAPF[dsp + 36 + (1 << 2) >> 2])) + +(+(fSlow5) * +(HEAPF[dsp + 28 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(fSlow6);
			iTemp1 = ((((+(+(fSlow6) - +(HEAPF[dsp + 48 + (1 << 2) >> 2])) > 0.) | 0) > 0) | 0);
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(fSlow7) + +(0.999000013 * +(HEAPF[dsp + 60 + (1 << 2) >> 2])));
			fTemp2 = +(+(HEAPF[dsp + 60 + (0 << 2) >> 2]) + 0.00100000005);
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +(fTemp2);
			fTemp3 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp2));
			HEAPF[dsp + 76 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp3), +(+(HEAPF[dsp + 76 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 68 + (1 << 2) >> 2]) - +(fTemp2))))))));
			iTemp4 = ((+(HEAPF[dsp + 76 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 104 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 96 + (1 << 2) >> 2])));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(+(fSlow10) * +(HEAPF[dsp + 104 + (1 << 2) >> 2])) + +(+(fSlow11) * +(HEAPF[dsp + 96 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp5 = +(+(0.866666675 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + 0.00100000005);
			HEAPF[dsp + 112 + (0 << 2) >> 2] = +(fTemp5);
			fTemp6 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp5));
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp6), +(+(HEAPF[dsp + 120 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 112 + (1 << 2) >> 2]) - +(fTemp5))))))));
			iTemp7 = ((+(HEAPF[dsp + 120 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[dsp + 128 + (0 << 2) >> 2] = +(+(+(fSlow13) * +(HEAPF[dsp + 136 + (1 << 2) >> 2])) + +(+(fSlow14) * +(HEAPF[dsp + 128 + (1 << 2) >> 2])));
			HEAPF[dsp + 136 + (0 << 2) >> 2] = +(+(+(+(fSlow14) * +(HEAPF[dsp + 136 + (1 << 2) >> 2])) + +(+(fSlow15) * +(HEAPF[dsp + 128 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp8 = +(+(0.733333349 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + 0.00100000005);
			HEAPF[dsp + 144 + (0 << 2) >> 2] = +(fTemp8);
			fTemp9 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp8));
			HEAPF[dsp + 152 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp9), +(+(HEAPF[dsp + 152 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 144 + (1 << 2) >> 2]) - +(fTemp8))))))));
			iTemp10 = ((+(HEAPF[dsp + 152 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[dsp + 160 + (0 << 2) >> 2] = +(+(+(fSlow17) * +(HEAPF[dsp + 168 + (1 << 2) >> 2])) + +(+(fSlow18) * +(HEAPF[dsp + 160 + (1 << 2) >> 2])));
			HEAPF[dsp + 168 + (0 << 2) >> 2] = +(+(+(+(fSlow18) * +(HEAPF[dsp + 168 + (1 << 2) >> 2])) + +(+(fSlow19) * +(HEAPF[dsp + 160 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp11 = +(+(0.600000024 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + 0.00100000005);
			HEAPF[dsp + 176 + (0 << 2) >> 2] = +(fTemp11);
			fTemp12 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp11));
			HEAPF[dsp + 184 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp12), +(+(HEAPF[dsp + 184 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 176 + (1 << 2) >> 2]) - +(fTemp11))))))));
			iTemp13 = ((+(HEAPF[dsp + 184 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[dsp + 192 + (0 << 2) >> 2] = +(+(+(fSlow21) * +(HEAPF[dsp + 200 + (1 << 2) >> 2])) + +(+(fSlow22) * +(HEAPF[dsp + 192 + (1 << 2) >> 2])));
			HEAPF[dsp + 200 + (0 << 2) >> 2] = +(+(+(+(fSlow22) * +(HEAPF[dsp + 200 + (1 << 2) >> 2])) + +(+(fSlow23) * +(HEAPF[dsp + 192 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp14 = +(+(0.466666669 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + 0.00100000005);
			HEAPF[dsp + 208 + (0 << 2) >> 2] = +(fTemp14);
			fTemp15 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp14));
			HEAPF[dsp + 216 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp15), +(+(HEAPF[dsp + 216 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 208 + (1 << 2) >> 2]) - +(fTemp14))))))));
			iTemp16 = ((+(HEAPF[dsp + 216 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[dsp + 224 + (0 << 2) >> 2] = +(+(+(fSlow25) * +(HEAPF[dsp + 232 + (1 << 2) >> 2])) + +(+(fSlow26) * +(HEAPF[dsp + 224 + (1 << 2) >> 2])));
			HEAPF[dsp + 232 + (0 << 2) >> 2] = +(+(+(+(fSlow26) * +(HEAPF[dsp + 232 + (1 << 2) >> 2])) + +(+(fSlow27) * +(HEAPF[dsp + 224 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp17 = +(+(0.333333343 * +(HEAPF[dsp + 60 + (0 << 2) >> 2])) + 0.00100000005);
			HEAPF[dsp + 240 + (0 << 2) >> 2] = +(fTemp17);
			fTemp18 = +(+(HEAPF[dsp + 4 >> 2]) * +(fTemp17));
			HEAPF[dsp + 248 + (0 << 2) >> 2] = +((iTemp1 | 0)?0.:+(min_f(+(fTemp18), +(+(HEAPF[dsp + 248 + (1 << 2) >> 2]) + +(1. - +(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 240 + (1 << 2) >> 2]) - +(fTemp17))))))));
			iTemp19 = ((+(HEAPF[dsp + 248 + (0 << 2) >> 2]) < +(HEAPF[dsp + 84 >> 2])) | 0);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(0.0500000007 * +(+(+(+(+(+(0.444444448 * +(+(HEAPF[dsp + 28 + (0 << 2) >> 2]) * +((iTemp4 | 0)?+(((+(HEAPF[dsp + 76 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp4 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 76 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 76 + (0 << 2) >> 2]) < +(fTemp3)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 76 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp2) + -0.00100000005))) + 1.):0.)))) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) * +(0. - +(0.111111112 * +((iTemp7 | 0)?+(((+(HEAPF[dsp + 120 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp7 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 120 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 120 + (0 << 2) >> 2]) < +(fTemp6)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 120 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp5) + -0.00100000005))) + 1.):0.)))))) + +(+(HEAPF[dsp + 128 + (0 << 2) >> 2]) * +(0. - +(0.666666687 * +((iTemp10 | 0)?+(((+(HEAPF[dsp + 152 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp10 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 152 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 152 + (0 << 2) >> 2]) < +(fTemp9)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 152 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp8) + -0.00100000005))) + 1.):0.)))))) + +(+(HEAPF[dsp + 160 + (0 << 2) >> 2]) * +(0. - +(1.22222221 * +((iTemp13 | 0)?+(((+(HEAPF[dsp + 184 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp13 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 184 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 184 + (0 << 2) >> 2]) < +(fTemp12)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 184 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp11) + -0.00100000005))) + 1.):0.)))))) + +(+(HEAPF[dsp + 192 + (0 << 2) >> 2]) * +(0. - +(1.77777779 * +((iTemp16 | 0)?+(((+(HEAPF[dsp + 216 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp16 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 216 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 216 + (0 << 2) >> 2]) < +(fTemp15)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 216 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp14) + -0.00100000005))) + 1.):0.)))))) + +(+(HEAPF[dsp + 224 + (0 << 2) >> 2]) * +(0. - +(2.33333325 * +((iTemp19 | 0)?+(((+(HEAPF[dsp + 248 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp19 | 0)?+(+(HEAPF[dsp + 92 >> 2]) * +(HEAPF[dsp + 248 + (0 << 2) >> 2])):1.)):+(((+(HEAPF[dsp + 248 + (0 << 2) >> 2]) < +(fTemp18)) | 0)?+(+(+(HEAPF[dsp + 88 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 248 + (0 << 2) >> 2]) - +(HEAPF[dsp + 84 >> 2]))) / +(+(fTemp17) + -0.00100000005))) + 1.):0.))))))));
			HEAP32[dsp + 20 + (1 << 2) >> 2] = (HEAP32[dsp + 20 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 + (1 << 2) >> 2] = +(HEAPF[dsp + 76 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 112 + (1 << 2) >> 2] = +(HEAPF[dsp + 112 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			HEAPF[dsp + 128 + (1 << 2) >> 2] = +(HEAPF[dsp + 128 + (0 << 2) >> 2]);
			HEAPF[dsp + 136 + (1 << 2) >> 2] = +(HEAPF[dsp + 136 + (0 << 2) >> 2]);
			HEAPF[dsp + 144 + (1 << 2) >> 2] = +(HEAPF[dsp + 144 + (0 << 2) >> 2]);
			HEAPF[dsp + 152 + (1 << 2) >> 2] = +(HEAPF[dsp + 152 + (0 << 2) >> 2]);
			HEAPF[dsp + 160 + (1 << 2) >> 2] = +(HEAPF[dsp + 160 + (0 << 2) >> 2]);
			HEAPF[dsp + 168 + (1 << 2) >> 2] = +(HEAPF[dsp + 168 + (0 << 2) >> 2]);
			HEAPF[dsp + 176 + (1 << 2) >> 2] = +(HEAPF[dsp + 176 + (0 << 2) >> 2]);
			HEAPF[dsp + 184 + (1 << 2) >> 2] = +(HEAPF[dsp + 184 + (0 << 2) >> 2]);
			HEAPF[dsp + 192 + (1 << 2) >> 2] = +(HEAPF[dsp + 192 + (0 << 2) >> 2]);
			HEAPF[dsp + 200 + (1 << 2) >> 2] = +(HEAPF[dsp + 200 + (0 << 2) >> 2]);
			HEAPF[dsp + 208 + (1 << 2) >> 2] = +(HEAPF[dsp + 208 + (0 << 2) >> 2]);
			HEAPF[dsp + 216 + (1 << 2) >> 2] = +(HEAPF[dsp + 216 + (0 << 2) >> 2]);
			HEAPF[dsp + 224 + (1 << 2) >> 2] = +(HEAPF[dsp + 224 + (0 << 2) >> 2]);
			HEAPF[dsp + 232 + (1 << 2) >> 2] = +(HEAPF[dsp + 232 + (0 << 2) >> 2]);
			HEAPF[dsp + 240 + (1 << 2) >> 2] = +(HEAPF[dsp + 240 + (0 << 2) >> 2]);
			HEAPF[dsp + 248 + (1 << 2) >> 2] = +(HEAPF[dsp + 248 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 256;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/turenas/gate"] = 44;
	pathTable["/turenas/freq"] = 12;
	pathTable["/turenas/y"] = 16;
	pathTable["/turenas/res"] = 56;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"turenas\",\"inputs\":\"0\",\"outputs\":\"1\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"interface\":\"SmartKeyboard{  'Number of Keyboards':'10',  'Keyboard 0 - Number of Keys':'18',  'Keyboard 1 - Number of Keys':'18',  'Keyboard 2 - Number of Keys':'18',  'Keyboard 3 - Number of Keys':'18',  'Keyboard 4 - Number of Keys':'18',  'Keyboard 5 - Number of Keys':'18',  'Keyboard 6 - Number of Keys':'18',  'Keyboard 7 - Number of Keys':'18',  'Keyboard 8 - Number of Keys':'18',  'Keyboard 9 - Number of Keys':'18',  'Keyboard 0 - Lowest Key':'50',  'Keyboard 1 - Lowest Key':'55',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'65',  'Keyboard 4 - Lowest Key':'70',  'Keyboard 5 - Lowest Key':'75',  'Keyboard 6 - Lowest Key':'80',  'Keyboard 7 - Lowest Key':'85',  'Keyboard 8 - Lowest Key':'90',  'Keyboard 9 - Lowest Key':'95',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0',  'Keyboard 8 - Piano Keyboard':'0',  'Keyboard 9 - Piano Keyboard':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 4 - Send X':'0',  'Keyboard 5 - Send X':'0',  'Keyboard 6 - Send X':'0',  'Keyboard 7 - Send X':'0',  'Keyboard 8 - Send X':'0',  'Keyboard 9 - Send X':'0' }\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"turenas\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"synths.lib/name\":\"Faust Synthesizer Library\"},{\"synths.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"turenas\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/turenas/freq\",\"init\":\"400\",\"min\":\"50\",\"max\":\"2000\",\"step\":\"0.01\"},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/turenas/gate\"},{\"type\":\"hslider\",\"label\":\"res\",\"address\":\"/turenas/res\",\"meta\":[{\"acc\":\"0 0 -10 0 10\"}],\"init\":\"2.5\",\"min\":\"0.01\",\"max\":\"5\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"y\",\"address\":\"/turenas/y\",\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("envelopes.lib/author", "GRAME");
	m.declare("envelopes.lib/copyright", "GRAME");
	m.declare("envelopes.lib/license", "LGPL with exception");
	m.declare("envelopes.lib/name", "Faust Envelope Library");
	m.declare("envelopes.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("interface", "SmartKeyboard{  'Number of Keyboards':'10',  'Keyboard 0 - Number of Keys':'18',  'Keyboard 1 - Number of Keys':'18',  'Keyboard 2 - Number of Keys':'18',  'Keyboard 3 - Number of Keys':'18',  'Keyboard 4 - Number of Keys':'18',  'Keyboard 5 - Number of Keys':'18',  'Keyboard 6 - Number of Keys':'18',  'Keyboard 7 - Number of Keys':'18',  'Keyboard 8 - Number of Keys':'18',  'Keyboard 9 - Number of Keys':'18',  'Keyboard 0 - Lowest Key':'50',  'Keyboard 1 - Lowest Key':'55',  'Keyboard 2 - Lowest Key':'60',  'Keyboard 3 - Lowest Key':'65',  'Keyboard 4 - Lowest Key':'70',  'Keyboard 5 - Lowest Key':'75',  'Keyboard 6 - Lowest Key':'80',  'Keyboard 7 - Lowest Key':'85',  'Keyboard 8 - Lowest Key':'90',  'Keyboard 9 - Lowest Key':'95',  'Keyboard 0 - Piano Keyboard':'0',  'Keyboard 1 - Piano Keyboard':'0',  'Keyboard 2 - Piano Keyboard':'0',  'Keyboard 3 - Piano Keyboard':'0',  'Keyboard 4 - Piano Keyboard':'0',  'Keyboard 5 - Piano Keyboard':'0',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 7 - Piano Keyboard':'0',  'Keyboard 8 - Piano Keyboard':'0',  'Keyboard 9 - Piano Keyboard':'0',  'Keyboard 0 - Send X':'0',  'Keyboard 1 - Send X':'0',  'Keyboard 2 - Send X':'0',  'Keyboard 3 - Send X':'0',  'Keyboard 4 - Send X':'0',  'Keyboard 5 - Send X':'0',  'Keyboard 6 - Send X':'0',  'Keyboard 7 - Send X':'0',  'Keyboard 8 - Send X':'0',  'Keyboard 9 - Send X':'0' }");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "turenas");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("synths.lib/name", "Faust Synthesizer Library");
	m.declare("synths.lib/version", "0.0");
}

