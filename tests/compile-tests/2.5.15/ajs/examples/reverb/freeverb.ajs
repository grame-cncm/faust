/* ------------------------------------------------------------
author: "RM"
name: "freeverb"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(12348. / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 16 >> 2] = +(17640. / +(HEAPF[dsp + 4 >> 2]));
		HEAP32[dsp + 32808 >> 2] = ~~(+(0.0253061224 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 65596 >> 2] = ~~(+(0.0269387756 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 98384 >> 2] = ~~(+(0.0289569162 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 131172 >> 2] = ~~(+(0.0307482984 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 163960 >> 2] = ~~(+(0.0322448984 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 196748 >> 2] = ~~(+(0.033809524 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 229536 >> 2] = ~~(+(0.0353061222 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 262324 >> 2] = ~~(+(0.0366666652 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 270528 >> 2] = ~~(+(0.0126077095 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 270532 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 270528 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 278736 >> 2] = ~~(+(0.00999999978 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 278740 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 278736 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 286944 >> 2] = ~~(+(0.00773242628 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 286948 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 286944 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 291056 >> 2] = ~~(+(0.00510204071 * +(HEAPF[dsp + 4 >> 2])));
		HEAP32[dsp + 291060 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 291056 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAPF[dsp + 323848 >> 2] = +(0.00104308384 * +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 0.5;
		HEAPF[dsp + 20 >> 2] = 0.5;
		HEAPF[dsp + 32 >> 2] = 0.333299994;
		HEAPF[dsp + 323852 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		var l32 = 0;
		var l33 = 0;
		var l34 = 0;
		var l35 = 0;
		var l36 = 0;
		var l37 = 0;
		var l38 = 0;
		var l39 = 0;
		var l40 = 0;
		var l41 = 0;
		var l42 = 0;
		var l43 = 0;
		var l44 = 0;
		var l45 = 0;
		var l46 = 0;
		var l47 = 0;
		var l48 = 0;
		var l49 = 0;
		var l50 = 0;
		var l51 = 0;
		var l52 = 0;
		var l53 = 0;
		var l54 = 0;
		var l55 = 0;
		var l56 = 0;
		var l57 = 0;
		var l58 = 0;
		var l59 = 0;
		var l60 = 0;
		var l61 = 0;
		var l62 = 0;
		var l63 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 36 >> 2] = 0;
		for (l1 = 0; (((l1 | 0) < 8192) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 32812 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 32820 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 8192) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 32828 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 65600 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 65608 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 8192) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 65616 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 98388 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 98396 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 8192) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 98404 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 131176 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 131184 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 8192) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 131192 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 163964 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 163972 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 8192) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 163980 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 196752 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 196760 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 8192) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 196768 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 229540 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 229548 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 8192) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 229556 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 262328 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2048) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 262336 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 270536 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2048) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 270544 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 278744 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 2048) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 278752 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 286952 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 1024) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 286960 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 2) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 291064 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		for (l32 = 0; (((l32 | 0) < 2) | 0); l32 = (((l32 | 0) + 1) | 0)) {
			HEAPF[dsp + 291072 + ((l32 | 0) << 2) >> 2] = 0.;
			
		}
		for (l33 = 0; (((l33 | 0) < 8192) | 0); l33 = (((l33 | 0) + 1) | 0)) {
			HEAPF[dsp + 291080 + ((l33 | 0) << 2) >> 2] = 0.;
			
		}
		for (l34 = 0; (((l34 | 0) < 2) | 0); l34 = (((l34 | 0) + 1) | 0)) {
			HEAPF[dsp + 323856 + ((l34 | 0) << 2) >> 2] = 0.;
			
		}
		for (l35 = 0; (((l35 | 0) < 2) | 0); l35 = (((l35 | 0) + 1) | 0)) {
			HEAPF[dsp + 323864 + ((l35 | 0) << 2) >> 2] = 0.;
			
		}
		for (l36 = 0; (((l36 | 0) < 8192) | 0); l36 = (((l36 | 0) + 1) | 0)) {
			HEAPF[dsp + 323872 + ((l36 | 0) << 2) >> 2] = 0.;
			
		}
		for (l37 = 0; (((l37 | 0) < 2) | 0); l37 = (((l37 | 0) + 1) | 0)) {
			HEAPF[dsp + 356640 + ((l37 | 0) << 2) >> 2] = 0.;
			
		}
		for (l38 = 0; (((l38 | 0) < 2) | 0); l38 = (((l38 | 0) + 1) | 0)) {
			HEAPF[dsp + 356648 + ((l38 | 0) << 2) >> 2] = 0.;
			
		}
		for (l39 = 0; (((l39 | 0) < 8192) | 0); l39 = (((l39 | 0) + 1) | 0)) {
			HEAPF[dsp + 356656 + ((l39 | 0) << 2) >> 2] = 0.;
			
		}
		for (l40 = 0; (((l40 | 0) < 2) | 0); l40 = (((l40 | 0) + 1) | 0)) {
			HEAPF[dsp + 389424 + ((l40 | 0) << 2) >> 2] = 0.;
			
		}
		for (l41 = 0; (((l41 | 0) < 2) | 0); l41 = (((l41 | 0) + 1) | 0)) {
			HEAPF[dsp + 389432 + ((l41 | 0) << 2) >> 2] = 0.;
			
		}
		for (l42 = 0; (((l42 | 0) < 8192) | 0); l42 = (((l42 | 0) + 1) | 0)) {
			HEAPF[dsp + 389440 + ((l42 | 0) << 2) >> 2] = 0.;
			
		}
		for (l43 = 0; (((l43 | 0) < 2) | 0); l43 = (((l43 | 0) + 1) | 0)) {
			HEAPF[dsp + 422208 + ((l43 | 0) << 2) >> 2] = 0.;
			
		}
		for (l44 = 0; (((l44 | 0) < 2) | 0); l44 = (((l44 | 0) + 1) | 0)) {
			HEAPF[dsp + 422216 + ((l44 | 0) << 2) >> 2] = 0.;
			
		}
		for (l45 = 0; (((l45 | 0) < 8192) | 0); l45 = (((l45 | 0) + 1) | 0)) {
			HEAPF[dsp + 422224 + ((l45 | 0) << 2) >> 2] = 0.;
			
		}
		for (l46 = 0; (((l46 | 0) < 2) | 0); l46 = (((l46 | 0) + 1) | 0)) {
			HEAPF[dsp + 454992 + ((l46 | 0) << 2) >> 2] = 0.;
			
		}
		for (l47 = 0; (((l47 | 0) < 2) | 0); l47 = (((l47 | 0) + 1) | 0)) {
			HEAPF[dsp + 455000 + ((l47 | 0) << 2) >> 2] = 0.;
			
		}
		for (l48 = 0; (((l48 | 0) < 8192) | 0); l48 = (((l48 | 0) + 1) | 0)) {
			HEAPF[dsp + 455008 + ((l48 | 0) << 2) >> 2] = 0.;
			
		}
		for (l49 = 0; (((l49 | 0) < 2) | 0); l49 = (((l49 | 0) + 1) | 0)) {
			HEAPF[dsp + 487776 + ((l49 | 0) << 2) >> 2] = 0.;
			
		}
		for (l50 = 0; (((l50 | 0) < 2) | 0); l50 = (((l50 | 0) + 1) | 0)) {
			HEAPF[dsp + 487784 + ((l50 | 0) << 2) >> 2] = 0.;
			
		}
		for (l51 = 0; (((l51 | 0) < 8192) | 0); l51 = (((l51 | 0) + 1) | 0)) {
			HEAPF[dsp + 487792 + ((l51 | 0) << 2) >> 2] = 0.;
			
		}
		for (l52 = 0; (((l52 | 0) < 2) | 0); l52 = (((l52 | 0) + 1) | 0)) {
			HEAPF[dsp + 520560 + ((l52 | 0) << 2) >> 2] = 0.;
			
		}
		for (l53 = 0; (((l53 | 0) < 2) | 0); l53 = (((l53 | 0) + 1) | 0)) {
			HEAPF[dsp + 520568 + ((l53 | 0) << 2) >> 2] = 0.;
			
		}
		for (l54 = 0; (((l54 | 0) < 8192) | 0); l54 = (((l54 | 0) + 1) | 0)) {
			HEAPF[dsp + 520576 + ((l54 | 0) << 2) >> 2] = 0.;
			
		}
		for (l55 = 0; (((l55 | 0) < 2) | 0); l55 = (((l55 | 0) + 1) | 0)) {
			HEAPF[dsp + 553344 + ((l55 | 0) << 2) >> 2] = 0.;
			
		}
		for (l56 = 0; (((l56 | 0) < 2048) | 0); l56 = (((l56 | 0) + 1) | 0)) {
			HEAPF[dsp + 553352 + ((l56 | 0) << 2) >> 2] = 0.;
			
		}
		for (l57 = 0; (((l57 | 0) < 2) | 0); l57 = (((l57 | 0) + 1) | 0)) {
			HEAPF[dsp + 561544 + ((l57 | 0) << 2) >> 2] = 0.;
			
		}
		for (l58 = 0; (((l58 | 0) < 2048) | 0); l58 = (((l58 | 0) + 1) | 0)) {
			HEAPF[dsp + 561552 + ((l58 | 0) << 2) >> 2] = 0.;
			
		}
		for (l59 = 0; (((l59 | 0) < 2) | 0); l59 = (((l59 | 0) + 1) | 0)) {
			HEAPF[dsp + 569744 + ((l59 | 0) << 2) >> 2] = 0.;
			
		}
		for (l60 = 0; (((l60 | 0) < 2048) | 0); l60 = (((l60 | 0) + 1) | 0)) {
			HEAPF[dsp + 569752 + ((l60 | 0) << 2) >> 2] = 0.;
			
		}
		for (l61 = 0; (((l61 | 0) < 2) | 0); l61 = (((l61 | 0) + 1) | 0)) {
			HEAPF[dsp + 577944 + ((l61 | 0) << 2) >> 2] = 0.;
			
		}
		for (l62 = 0; (((l62 | 0) < 2048) | 0); l62 = (((l62 | 0) + 1) | 0)) {
			HEAPF[dsp + 577952 + ((l62 | 0) << 2) >> 2] = 0.;
			
		}
		for (l63 = 0; (((l63 | 0) < 2) | 0); l63 = (((l63 | 0) + 1) | 0)) {
			HEAPF[dsp + 586144 + ((l63 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var iSlow6 = 0;
		var iSlow7 = 0;
		var iSlow8 = 0;
		var iSlow9 = 0;
		var iSlow10 = 0;
		var iSlow11 = 0;
		var iSlow12 = 0;
		var iSlow13 = 0;
		var iSlow14 = 0;
		var iSlow15 = 0;
		var iSlow16 = 0;
		var iSlow17 = 0;
		var iSlow18 = 0;
		var iSlow19 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fRec7 = 0.;
		var fTemp4 = 0.;
		var fRec5 = 0.;
		var fTemp5 = 0.;
		var fRec3 = 0.;
		var fTemp6 = 0.;
		var fRec1 = 0.;
		var fTemp7 = 0.;
		var fRec31 = 0.;
		var fTemp8 = 0.;
		var fRec29 = 0.;
		var fTemp9 = 0.;
		var fRec27 = 0.;
		var fTemp10 = 0.;
		var fRec25 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 12 >> 2]))) + 0.699999988);
		fSlow1 = +(+(HEAPF[dsp + 16 >> 2]) * +(+(HEAPF[dsp + 20 >> 2])));
		fSlow2 = +(1. - +(fSlow1));
		fSlow3 = +(+(HEAPF[dsp + 32 >> 2]));
		fSlow4 = +(0.100000001 * +(fSlow3));
		fSlow5 = +(1. - +(fSlow3));
		iSlow6 = ~~(+(+(HEAPF[dsp + 323848 >> 2]) * +(+(HEAPF[dsp + 323852 >> 2]))));
		iSlow7 = (((HEAP32[dsp + 32808 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow8 = (((HEAP32[dsp + 65596 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow9 = (((HEAP32[dsp + 98384 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow10 = (((HEAP32[dsp + 131172 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow11 = (((HEAP32[dsp + 163960 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow12 = (((HEAP32[dsp + 196748 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow13 = (((HEAP32[dsp + 229536 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow14 = (((HEAP32[dsp + 262324 >> 2] | 0) + (iSlow6 | 0)) | 0);
		iSlow15 = (((iSlow6 | 0) + -1) | 0);
		iSlow16 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 270528 >> 2] | 0) + (iSlow15 | 0)) | 0))) | 0))) | 0);
		iSlow17 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 278736 >> 2] | 0) + (iSlow15 | 0)) | 0))) | 0))) | 0);
		iSlow18 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 286944 >> 2] | 0) + (iSlow15 | 0)) | 0))) | 0))) | 0);
		iSlow19 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 291056 >> 2] | 0) + (iSlow15 | 0)) | 0))) | 0))) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 24 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 32812 + (1 << 2) >> 2])));
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp1 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp2 = +(+(fSlow4) * +(+(fTemp0) + +(fTemp1)));
			HEAPF[dsp + 40 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow0) * +(HEAPF[dsp + 24 + (0 << 2) >> 2])) + +(fTemp2));
			HEAPF[dsp + 32812 + (0 << 2) >> 2] = +(HEAPF[dsp + 40 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 32808 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 32820 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 32820 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 65600 + (1 << 2) >> 2])));
			HEAPF[dsp + 32828 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 32820 + (0 << 2) >> 2])));
			HEAPF[dsp + 65600 + (0 << 2) >> 2] = +(HEAPF[dsp + 32828 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 65596 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 65608 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 65608 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 98388 + (1 << 2) >> 2])));
			HEAPF[dsp + 65616 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 65608 + (0 << 2) >> 2])));
			HEAPF[dsp + 98388 + (0 << 2) >> 2] = +(HEAPF[dsp + 65616 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 98384 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 98396 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 98396 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 131176 + (1 << 2) >> 2])));
			HEAPF[dsp + 98404 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 98396 + (0 << 2) >> 2])));
			HEAPF[dsp + 131176 + (0 << 2) >> 2] = +(HEAPF[dsp + 98404 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 131172 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 131184 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 131184 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 163964 + (1 << 2) >> 2])));
			HEAPF[dsp + 131192 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 131184 + (0 << 2) >> 2])));
			HEAPF[dsp + 163964 + (0 << 2) >> 2] = +(HEAPF[dsp + 131192 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 163960 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 163972 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 163972 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 196752 + (1 << 2) >> 2])));
			HEAPF[dsp + 163980 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 163972 + (0 << 2) >> 2])));
			HEAPF[dsp + 196752 + (0 << 2) >> 2] = +(HEAPF[dsp + 163980 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 196748 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 196760 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 196760 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 229540 + (1 << 2) >> 2])));
			HEAPF[dsp + 196768 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 196760 + (0 << 2) >> 2])));
			HEAPF[dsp + 229540 + (0 << 2) >> 2] = +(HEAPF[dsp + 196768 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 229536 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 229548 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 229548 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 262328 + (1 << 2) >> 2])));
			HEAPF[dsp + 229556 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 229548 + (0 << 2) >> 2])));
			HEAPF[dsp + 262328 + (0 << 2) >> 2] = +(HEAPF[dsp + 229556 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 262324 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp3 = +(+(+(+(+(+(+(+(+(HEAPF[dsp + 32812 + (0 << 2) >> 2]) + +(HEAPF[dsp + 65600 + (0 << 2) >> 2])) + +(HEAPF[dsp + 98388 + (0 << 2) >> 2])) + +(HEAPF[dsp + 131176 + (0 << 2) >> 2])) + +(HEAPF[dsp + 163964 + (0 << 2) >> 2])) + +(HEAPF[dsp + 196752 + (0 << 2) >> 2])) + +(HEAPF[dsp + 229540 + (0 << 2) >> 2])) + +(HEAPF[dsp + 262328 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF[dsp + 270536 + (1 << 2) >> 2])));
			HEAPF[dsp + 262336 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp3);
			HEAPF[dsp + 270536 + (0 << 2) >> 2] = +(HEAPF[dsp + 262336 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 270532 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec7 = +(0. - +(0.5 * +(fTemp3)));
			fTemp4 = +(+(HEAPF[dsp + 270536 + (1 << 2) >> 2]) + +(+(fRec7) + +(0.5 * +(HEAPF[dsp + 278744 + (1 << 2) >> 2]))));
			HEAPF[dsp + 270544 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp4);
			HEAPF[dsp + 278744 + (0 << 2) >> 2] = +(HEAPF[dsp + 270544 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 278740 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec5 = +(0. - +(0.5 * +(fTemp4)));
			fTemp5 = +(+(HEAPF[dsp + 278744 + (1 << 2) >> 2]) + +(+(fRec5) + +(0.5 * +(HEAPF[dsp + 286952 + (1 << 2) >> 2]))));
			HEAPF[dsp + 278752 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp5);
			HEAPF[dsp + 286952 + (0 << 2) >> 2] = +(HEAPF[dsp + 278752 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 286948 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec3 = +(0. - +(0.5 * +(fTemp5)));
			fTemp6 = +(+(HEAPF[dsp + 286952 + (1 << 2) >> 2]) + +(+(fRec3) + +(0.5 * +(HEAPF[dsp + 291064 + (1 << 2) >> 2]))));
			HEAPF[dsp + 286960 + ((((HEAP32[dsp + 36 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp6);
			HEAPF[dsp + 291064 + (0 << 2) >> 2] = +(HEAPF[dsp + 286960 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (HEAP32[dsp + 291060 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec1 = +(0. - +(0.5 * +(fTemp6)));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(fRec1) + +(HEAPF[dsp + 291064 + (1 << 2) >> 2])) + +(+(fSlow5) * +(fTemp0))));
			HEAPF[dsp + 291072 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 291072 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 323856 + (1 << 2) >> 2])));
			HEAPF[dsp + 291080 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 291072 + (0 << 2) >> 2])));
			HEAPF[dsp + 323856 + (0 << 2) >> 2] = +(HEAPF[dsp + 291080 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow7 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 323864 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 323864 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 356640 + (1 << 2) >> 2])));
			HEAPF[dsp + 323872 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 323864 + (0 << 2) >> 2])));
			HEAPF[dsp + 356640 + (0 << 2) >> 2] = +(HEAPF[dsp + 323872 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow8 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 356648 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 356648 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 389424 + (1 << 2) >> 2])));
			HEAPF[dsp + 356656 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 356648 + (0 << 2) >> 2])));
			HEAPF[dsp + 389424 + (0 << 2) >> 2] = +(HEAPF[dsp + 356656 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow9 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 389432 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 389432 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 422208 + (1 << 2) >> 2])));
			HEAPF[dsp + 389440 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 389432 + (0 << 2) >> 2])));
			HEAPF[dsp + 422208 + (0 << 2) >> 2] = +(HEAPF[dsp + 389440 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow10 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 422216 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 422216 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 454992 + (1 << 2) >> 2])));
			HEAPF[dsp + 422224 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 422216 + (0 << 2) >> 2])));
			HEAPF[dsp + 454992 + (0 << 2) >> 2] = +(HEAPF[dsp + 422224 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow11 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 455000 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 455000 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 487776 + (1 << 2) >> 2])));
			HEAPF[dsp + 455008 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 455000 + (0 << 2) >> 2])));
			HEAPF[dsp + 487776 + (0 << 2) >> 2] = +(HEAPF[dsp + 455008 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow12 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 487784 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 487784 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 520560 + (1 << 2) >> 2])));
			HEAPF[dsp + 487792 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 487784 + (0 << 2) >> 2])));
			HEAPF[dsp + 520560 + (0 << 2) >> 2] = +(HEAPF[dsp + 487792 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow13 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 520568 + (0 << 2) >> 2] = +(+(+(fSlow1) * +(HEAPF[dsp + 520568 + (1 << 2) >> 2])) + +(+(fSlow2) * +(HEAPF[dsp + 553344 + (1 << 2) >> 2])));
			HEAPF[dsp + 520576 + ((((HEAP32[dsp + 36 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp2) + +(+(fSlow0) * +(HEAPF[dsp + 520568 + (0 << 2) >> 2])));
			HEAPF[dsp + 553344 + (0 << 2) >> 2] = +(HEAPF[dsp + 520576 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow14 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp7 = +(+(+(+(+(+(+(+(+(HEAPF[dsp + 323856 + (0 << 2) >> 2]) + +(HEAPF[dsp + 356640 + (0 << 2) >> 2])) + +(HEAPF[dsp + 389424 + (0 << 2) >> 2])) + +(HEAPF[dsp + 422208 + (0 << 2) >> 2])) + +(HEAPF[dsp + 454992 + (0 << 2) >> 2])) + +(HEAPF[dsp + 487776 + (0 << 2) >> 2])) + +(HEAPF[dsp + 520560 + (0 << 2) >> 2])) + +(HEAPF[dsp + 553344 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF[dsp + 561544 + (1 << 2) >> 2])));
			HEAPF[dsp + 553352 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp7);
			HEAPF[dsp + 561544 + (0 << 2) >> 2] = +(HEAPF[dsp + 553352 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow16 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec31 = +(0. - +(0.5 * +(fTemp7)));
			fTemp8 = +(+(HEAPF[dsp + 561544 + (1 << 2) >> 2]) + +(+(fRec31) + +(0.5 * +(HEAPF[dsp + 569744 + (1 << 2) >> 2]))));
			HEAPF[dsp + 561552 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp8);
			HEAPF[dsp + 569744 + (0 << 2) >> 2] = +(HEAPF[dsp + 561552 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow17 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec29 = +(0. - +(0.5 * +(fTemp8)));
			fTemp9 = +(+(HEAPF[dsp + 569744 + (1 << 2) >> 2]) + +(+(fRec29) + +(0.5 * +(HEAPF[dsp + 577944 + (1 << 2) >> 2]))));
			HEAPF[dsp + 569752 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp9);
			HEAPF[dsp + 577944 + (0 << 2) >> 2] = +(HEAPF[dsp + 569752 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow18 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec27 = +(0. - +(0.5 * +(fTemp9)));
			fTemp10 = +(+(HEAPF[dsp + 577944 + (1 << 2) >> 2]) + +(+(fRec27) + +(0.5 * +(HEAPF[dsp + 586144 + (1 << 2) >> 2]))));
			HEAPF[dsp + 577952 + ((((HEAP32[dsp + 36 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp10);
			HEAPF[dsp + 586144 + (0 << 2) >> 2] = +(HEAPF[dsp + 577952 + ((((((HEAP32[dsp + 36 >> 2] | 0) - (iSlow19 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec25 = +(0. - +(0.5 * +(fTemp10)));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(fSlow5) * +(fTemp1)) + +(+(fRec25) + +(HEAPF[dsp + 586144 + (1 << 2) >> 2]))));
			HEAPF[dsp + 24 + (1 << 2) >> 2] = +(HEAPF[dsp + 24 + (0 << 2) >> 2]);
			HEAP32[dsp + 36 >> 2] = (((HEAP32[dsp + 36 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 32812 + (1 << 2) >> 2] = +(HEAPF[dsp + 32812 + (0 << 2) >> 2]);
			HEAPF[dsp + 32820 + (1 << 2) >> 2] = +(HEAPF[dsp + 32820 + (0 << 2) >> 2]);
			HEAPF[dsp + 65600 + (1 << 2) >> 2] = +(HEAPF[dsp + 65600 + (0 << 2) >> 2]);
			HEAPF[dsp + 65608 + (1 << 2) >> 2] = +(HEAPF[dsp + 65608 + (0 << 2) >> 2]);
			HEAPF[dsp + 98388 + (1 << 2) >> 2] = +(HEAPF[dsp + 98388 + (0 << 2) >> 2]);
			HEAPF[dsp + 98396 + (1 << 2) >> 2] = +(HEAPF[dsp + 98396 + (0 << 2) >> 2]);
			HEAPF[dsp + 131176 + (1 << 2) >> 2] = +(HEAPF[dsp + 131176 + (0 << 2) >> 2]);
			HEAPF[dsp + 131184 + (1 << 2) >> 2] = +(HEAPF[dsp + 131184 + (0 << 2) >> 2]);
			HEAPF[dsp + 163964 + (1 << 2) >> 2] = +(HEAPF[dsp + 163964 + (0 << 2) >> 2]);
			HEAPF[dsp + 163972 + (1 << 2) >> 2] = +(HEAPF[dsp + 163972 + (0 << 2) >> 2]);
			HEAPF[dsp + 196752 + (1 << 2) >> 2] = +(HEAPF[dsp + 196752 + (0 << 2) >> 2]);
			HEAPF[dsp + 196760 + (1 << 2) >> 2] = +(HEAPF[dsp + 196760 + (0 << 2) >> 2]);
			HEAPF[dsp + 229540 + (1 << 2) >> 2] = +(HEAPF[dsp + 229540 + (0 << 2) >> 2]);
			HEAPF[dsp + 229548 + (1 << 2) >> 2] = +(HEAPF[dsp + 229548 + (0 << 2) >> 2]);
			HEAPF[dsp + 262328 + (1 << 2) >> 2] = +(HEAPF[dsp + 262328 + (0 << 2) >> 2]);
			HEAPF[dsp + 270536 + (1 << 2) >> 2] = +(HEAPF[dsp + 270536 + (0 << 2) >> 2]);
			HEAPF[dsp + 278744 + (1 << 2) >> 2] = +(HEAPF[dsp + 278744 + (0 << 2) >> 2]);
			HEAPF[dsp + 286952 + (1 << 2) >> 2] = +(HEAPF[dsp + 286952 + (0 << 2) >> 2]);
			HEAPF[dsp + 291064 + (1 << 2) >> 2] = +(HEAPF[dsp + 291064 + (0 << 2) >> 2]);
			HEAPF[dsp + 291072 + (1 << 2) >> 2] = +(HEAPF[dsp + 291072 + (0 << 2) >> 2]);
			HEAPF[dsp + 323856 + (1 << 2) >> 2] = +(HEAPF[dsp + 323856 + (0 << 2) >> 2]);
			HEAPF[dsp + 323864 + (1 << 2) >> 2] = +(HEAPF[dsp + 323864 + (0 << 2) >> 2]);
			HEAPF[dsp + 356640 + (1 << 2) >> 2] = +(HEAPF[dsp + 356640 + (0 << 2) >> 2]);
			HEAPF[dsp + 356648 + (1 << 2) >> 2] = +(HEAPF[dsp + 356648 + (0 << 2) >> 2]);
			HEAPF[dsp + 389424 + (1 << 2) >> 2] = +(HEAPF[dsp + 389424 + (0 << 2) >> 2]);
			HEAPF[dsp + 389432 + (1 << 2) >> 2] = +(HEAPF[dsp + 389432 + (0 << 2) >> 2]);
			HEAPF[dsp + 422208 + (1 << 2) >> 2] = +(HEAPF[dsp + 422208 + (0 << 2) >> 2]);
			HEAPF[dsp + 422216 + (1 << 2) >> 2] = +(HEAPF[dsp + 422216 + (0 << 2) >> 2]);
			HEAPF[dsp + 454992 + (1 << 2) >> 2] = +(HEAPF[dsp + 454992 + (0 << 2) >> 2]);
			HEAPF[dsp + 455000 + (1 << 2) >> 2] = +(HEAPF[dsp + 455000 + (0 << 2) >> 2]);
			HEAPF[dsp + 487776 + (1 << 2) >> 2] = +(HEAPF[dsp + 487776 + (0 << 2) >> 2]);
			HEAPF[dsp + 487784 + (1 << 2) >> 2] = +(HEAPF[dsp + 487784 + (0 << 2) >> 2]);
			HEAPF[dsp + 520560 + (1 << 2) >> 2] = +(HEAPF[dsp + 520560 + (0 << 2) >> 2]);
			HEAPF[dsp + 520568 + (1 << 2) >> 2] = +(HEAPF[dsp + 520568 + (0 << 2) >> 2]);
			HEAPF[dsp + 553344 + (1 << 2) >> 2] = +(HEAPF[dsp + 553344 + (0 << 2) >> 2]);
			HEAPF[dsp + 561544 + (1 << 2) >> 2] = +(HEAPF[dsp + 561544 + (0 << 2) >> 2]);
			HEAPF[dsp + 569744 + (1 << 2) >> 2] = +(HEAPF[dsp + 569744 + (0 << 2) >> 2]);
			HEAPF[dsp + 577944 + (1 << 2) >> 2] = +(HEAPF[dsp + 577944 + (0 << 2) >> 2]);
			HEAPF[dsp + 586144 + (1 << 2) >> 2] = +(HEAPF[dsp + 586144 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 586152;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/Freeverb/0x00/RoomSize"] = 12;
	pathTable["/Freeverb/0x00/Damp"] = 20;
	pathTable["/Freeverb/Wet"] = 32;
	pathTable["/Freeverb/0x00/Stereo_Spread"] = 323852;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"freeverb\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"RM\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Freeverb demo application.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"freeverb\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"Freeverb\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Damp\",\"address\":\"/Freeverb/0x00/Damp\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Somehow control the   density of the reverb.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"vslider\",\"label\":\"RoomSize\",\"address\":\"/Freeverb/0x00/RoomSize\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"The room size   between 0 and 1 with 1 for the largest room.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"vslider\",\"label\":\"Stereo Spread\",\"address\":\"/Freeverb/0x00/Stereo_Spread\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Spatial   spread between 0 and 1 with 1 for maximum spread.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"vslider\",\"label\":\"Wet\",\"address\":\"/Freeverb/Wet\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"The amount of reverb applied to the signal   between 0 and 1 with 1 for the maximum amount of reverb.\"}],\"init\":\"0.3333\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "RM");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Freeverb demo application.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "freeverb");
	m.declare("reverbs.lib/name", "Faust Reverb Library");
	m.declare("reverbs.lib/version", "0.0");
	m.declare("version", "0.0");
}

