/* ------------------------------------------------------------
author: "RM"
name: "reverbTester"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 5;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 68 >> 2] = (samplingFreq | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.;
		HEAPF[dsp + 12 >> 2] = 0.;
		HEAPF[dsp + 16 >> 2] = 0.;
		HEAPF[dsp + 28 >> 2] = 0.;
		HEAPF[dsp + 56 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAP32[dsp + 32 + ((l2 | 0) << 2) >> 2] = 0;
			
		}
		for (l3 = 0; (((l3 | 0) < 4) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 68 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var input2 = 0;
		var input3 = 0;
		var input4 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var j0 = 3;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		input2 = (HEAP32[inputs + (2 << 2) >> 2] | 0);
		input3 = (HEAP32[inputs + (3 << 2) >> 2] | 0);
		input4 = (HEAP32[inputs + (4 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(1. - +(+(HEAPF[dsp + 12 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 16 >> 2]));
		fSlow3 = +(0.100000001 * +(+(HEAPF[dsp + 28 >> 2])));
		fSlow4 = +(+(HEAPF[dsp + 56 >> 2]));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + (0 << 2) >> 2] = +(fSlow0);
			iTemp0 = ((+(+(fSlow0) - +(HEAPF[dsp + 4 + (1 << 2) >> 2])) > 0.) | 0);
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(fSlow2);
			HEAP32[dsp + 32 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 32 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(+(+(0.522189379 * +(HEAPF[dsp + 40 + (3 << 2) >> 2])) + +(+(4.65661287e-10 * +((HEAP32[dsp + 32 + (0 << 2) >> 2] | 0))) + +(2.49495602 * +(HEAPF[dsp + 40 + (1 << 2) >> 2])))) - +(2.0172658 * +(HEAPF[dsp + 40 + (2 << 2) >> 2])));
			fTemp1 = +(+(fSlow3) * +(+(+(0.0499220341 * +(HEAPF[dsp + 40 + (0 << 2) >> 2])) + +(0.0506126992 * +(HEAPF[dsp + 40 + (2 << 2) >> 2]))) - +(+(0.0959935337 * +(HEAPF[dsp + 40 + (1 << 2) >> 2])) + +(0.00440878607 * +(HEAPF[dsp + 40 + (3 << 2) >> 2])))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+((iTemp0 | 0)) + +(+(+(fSlow1) * +(+(HEAPF[input3 + ((i | 0) << 2) >> 2]))) + +(((+(+(fSlow2) - +(HEAPF[dsp + 20 + (1 << 2) >> 2])) > 0.) | 0)))) + +(fTemp1)));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(fSlow4);
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(((+(+(fSlow4) - +(HEAPF[dsp + 60 + (1 << 2) >> 2])) > 0.) | 0)) + +(+(+(fSlow1) * +(+(HEAPF[input4 + ((i | 0) << 2) >> 2]))) + +(+((iTemp0 | 0)) + +(fTemp1)))));
			HEAPF[dsp + 4 + (1 << 2) >> 2] = +(HEAPF[dsp + 4 + (0 << 2) >> 2]);
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			HEAP32[dsp + 32 + (1 << 2) >> 2] = (HEAP32[dsp + 32 + (0 << 2) >> 2] | 0);
			for (j0 = 3; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF[dsp + 40 + ((j0 | 0) << 2) >> 2] = +(HEAPF[dsp + 40 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 72;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/reverbTester/Impulse_Selection/Center"] = 0;
	pathTable["/reverbTester/Impulse_Selection/Left"] = 16;
	pathTable["/reverbTester/Impulse_Selection/Right"] = 56;
	pathTable["/reverbTester/Input_Config/Mute_Ext_Inputs"] = 12;
	pathTable["/reverbTester/Input_Config/Pink_Noise"] = 28;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"reverbTester\",\"inputs\":\"5\",\"outputs\":\"2\",\"meta\":[{\"author\":\"RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Handy test inputs for reverberator demos below.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"reverbTester\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"reverbTester\",\"items\":[{\"type\":\"vgroup\",\"label\":\"Input Config\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Mute Ext Inputs\",\"address\":\"/reverbTester/Input_Config/Mute_Ext_Inputs\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"When this is checked, the stereo external audio inputs are   disabled (good for hearing the impulse response or pink-noise response alone)\"}]},{\"type\":\"checkbox\",\"label\":\"Pink Noise\",\"address\":\"/reverbTester/Input_Config/Pink_Noise\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Pink Noise (or 1/f noise) is Constant-Q Noise (useful for adjusting   the EQ sections)\"}]}]},{\"type\":\"hgroup\",\"label\":\"Impulse Selection\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"button\",\"label\":\"Left\",\"address\":\"/reverbTester/Impulse_Selection/Left\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Send impulse into LEFT channel\"}]},{\"type\":\"button\",\"label\":\"Center\",\"address\":\"/reverbTester/Impulse_Selection/Center\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Send impulse into LEFT and RIGHT channels\"}]},{\"type\":\"button\",\"label\":\"Right\",\"address\":\"/reverbTester/Impulse_Selection/Right\",\"meta\":[{\"3\":\"\"},{\"tooltip\":\"Send impulse into RIGHT channel\"}]}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "RM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("description", "Handy test inputs for reverberator demos below.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "reverbTester");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("version", "0.0");
}

