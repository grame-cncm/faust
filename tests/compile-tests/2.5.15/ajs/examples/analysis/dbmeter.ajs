/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "dbmeter"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 8;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 8;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(80. / +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0)))))));
		HEAP32[dsp + 20 >> 2] = 0;
		HEAP32[dsp + 36 >> 2] = 0;
		HEAP32[dsp + 52 >> 2] = 0;
		HEAP32[dsp + 68 >> 2] = 0;
		HEAP32[dsp + 84 >> 2] = 0;
		HEAP32[dsp + 100 >> 2] = 0;
		HEAP32[dsp + 116 >> 2] = 0;
		HEAP32[dsp + 132 >> 2] = 0;
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var input2 = 0;
		var input3 = 0;
		var input4 = 0;
		var input5 = 0;
		var input6 = 0;
		var input7 = 0;
		var output0 = 0;
		var output1 = 0;
		var output2 = 0;
		var output3 = 0;
		var output4 = 0;
		var output5 = 0;
		var output6 = 0;
		var output7 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		input2 = (HEAP32[inputs + (2 << 2) >> 2] | 0);
		input3 = (HEAP32[inputs + (3 << 2) >> 2] | 0);
		input4 = (HEAP32[inputs + (4 << 2) >> 2] | 0);
		input5 = (HEAP32[inputs + (5 << 2) >> 2] | 0);
		input6 = (HEAP32[inputs + (6 << 2) >> 2] | 0);
		input7 = (HEAP32[inputs + (7 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		output2 = (HEAP32[outputs + (2 << 2) >> 2] | 0);
		output3 = (HEAP32[outputs + (3 << 2) >> 2] | 0);
		output4 = (HEAP32[outputs + (4 << 2) >> 2] | 0);
		output5 = (HEAP32[outputs + (5 << 2) >> 2] | 0);
		output6 = (HEAP32[outputs + (6 << 2) >> 2] | 0);
		output7 = (HEAP32[outputs + (7 << 2) >> 2] | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 8 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 8 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp0))))))))))));
			HEAPF[dsp + 16 >> 2] = +(+(HEAPF[dsp + 8 + (0 << 2) >> 2]));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 20 >> 2] | 0));
			fTemp1 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 24 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 24 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp1))))))))))));
			HEAPF[dsp + 32 >> 2] = +(+(HEAPF[dsp + 24 + (0 << 2) >> 2]));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 36 >> 2] | 0));
			fTemp2 = +(+(HEAPF[input2 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 40 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp2))))))))))));
			HEAPF[dsp + 48 >> 2] = +(+(HEAPF[dsp + 40 + (0 << 2) >> 2]));
			HEAPF[output2 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 52 >> 2] | 0));
			fTemp3 = +(+(HEAPF[input3 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 56 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp3))))))))))));
			HEAPF[dsp + 64 >> 2] = +(+(HEAPF[dsp + 56 + (0 << 2) >> 2]));
			HEAPF[output3 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 68 >> 2] | 0));
			fTemp4 = +(+(HEAPF[input4 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 72 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp4))))))))))));
			HEAPF[dsp + 80 >> 2] = +(+(HEAPF[dsp + 72 + (0 << 2) >> 2]));
			HEAPF[output4 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 84 >> 2] | 0));
			fTemp5 = +(+(HEAPF[input5 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 88 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp5))))))))))));
			HEAPF[dsp + 96 >> 2] = +(+(HEAPF[dsp + 88 + (0 << 2) >> 2]));
			HEAPF[output5 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 100 >> 2] | 0));
			fTemp6 = +(+(HEAPF[input6 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 104 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp6))))))))))));
			HEAPF[dsp + 112 >> 2] = +(+(HEAPF[dsp + 104 + (0 << 2) >> 2]));
			HEAPF[output6 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 116 >> 2] | 0));
			fTemp7 = +(+(HEAPF[input7 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 120 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(min_f(10., +(20. * +(log10f(+(max_f(0.000316227757, +(fabsf(+(fTemp7))))))))))));
			HEAPF[dsp + 128 >> 2] = +(+(HEAPF[dsp + 120 + (0 << 2) >> 2]));
			HEAPF[output7 + ((i | 0) << 2) >> 2] = +((HEAP32[dsp + 132 >> 2] | 0));
			HEAPF[dsp + 8 + (1 << 2) >> 2] = +(HEAPF[dsp + 8 + (0 << 2) >> 2]);
			HEAPF[dsp + 24 + (1 << 2) >> 2] = +(HEAPF[dsp + 24 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 136;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/8_channels_dB_meter/0/0x7fe2e0d30ed0"] = 16;
	pathTable["/8_channels_dB_meter/1/0x7fe2e0d35790"] = 32;
	pathTable["/8_channels_dB_meter/2/0x7fe2e0d3a050"] = 48;
	pathTable["/8_channels_dB_meter/3/0x7fe2e0d3e9c0"] = 64;
	pathTable["/8_channels_dB_meter/4/0x7fe2e0d433e0"] = 80;
	pathTable["/8_channels_dB_meter/5/0x7fe2e0d47eb0"] = 96;
	pathTable["/8_channels_dB_meter/6/0x7fe2e0d4ca30"] = 112;
	pathTable["/8_channels_dB_meter/7/0x7fe2e0d51660"] = 128;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"dbmeter\",\"inputs\":\"8\",\"outputs\":\"8\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"dbmeter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"8 channels dB meter\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d30ed0\",\"address\":\"/8_channels_dB_meter/0/0x7fe2e0d30ed0\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"1\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d35790\",\"address\":\"/8_channels_dB_meter/1/0x7fe2e0d35790\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"2\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d3a050\",\"address\":\"/8_channels_dB_meter/2/0x7fe2e0d3a050\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"3\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d3e9c0\",\"address\":\"/8_channels_dB_meter/3/0x7fe2e0d3e9c0\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"4\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d433e0\",\"address\":\"/8_channels_dB_meter/4/0x7fe2e0d433e0\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"5\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d47eb0\",\"address\":\"/8_channels_dB_meter/5/0x7fe2e0d47eb0\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"6\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d4ca30\",\"address\":\"/8_channels_dB_meter/6/0x7fe2e0d4ca30\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]},{\"type\":\"vgroup\",\"label\":\"7\",\"items\":[{\"type\":\"vbargraph\",\"label\":\"0x7fe2e0d51660\",\"address\":\"/8_channels_dB_meter/7/0x7fe2e0d51660\",\"meta\":[{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"10\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Grame");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)GRAME 2006");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "dbmeter");
	m.declare("version", "1.0");
}

