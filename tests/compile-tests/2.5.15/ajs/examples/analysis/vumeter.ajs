/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "vumeter"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(1. / +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0)))))));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 8 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 8 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 8 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(fabsf(+(fTemp0)))));
			HEAPF[dsp + 16 >> 2] = +(+(20. * +(log10f(+(max_f(0.000316227757, +(HEAPF[dsp + 8 + (0 << 2) >> 2])))))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp0));
			fTemp1 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(max_f(+(+(HEAPF[dsp + 20 + (1 << 2) >> 2]) - +(HEAPF[dsp + 4 >> 2])), +(fabsf(+(fTemp1)))));
			HEAPF[dsp + 28 >> 2] = +(+(20. * +(log10f(+(max_f(0.000316227757, +(HEAPF[dsp + 20 + (0 << 2) >> 2])))))));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp1));
			HEAPF[dsp + 8 + (1 << 2) >> 2] = +(HEAPF[dsp + 8 + (0 << 2) >> 2]);
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 32;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/vumeter/0x7fc6164dc550"] = 16;
	pathTable["/vumeter/0x7fc6164dfe60"] = 28;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"vumeter\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2006\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"vumeter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"vumeter\",\"items\":[{\"type\":\"hbargraph\",\"label\":\"0x7fc6164dc550\",\"address\":\"/vumeter/0x7fc6164dc550\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"},{\"type\":\"hbargraph\",\"label\":\"0x7fc6164dfe60\",\"address\":\"/vumeter/0x7fc6164dfe60\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"min\":\"-70\",\"max\":\"5\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Grame");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)GRAME 2006");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "vumeter");
	m.declare("version", "1.0");
}

