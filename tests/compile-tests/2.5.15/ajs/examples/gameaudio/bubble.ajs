/* ------------------------------------------------------------
copyright: "(c) 2017: Yann Orlarey, GRAME"
license: "MIT"
name: "bubble"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 16 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 12 >> 2] | 0))))));
		HEAPF[dsp + 20 >> 2] = +(6.28318548 / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 28 >> 2] = +(0.075000003 / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 68 >> 2] = +(1. / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 80 >> 2] = +(12348. / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 88 >> 2] = +(17640. / +(HEAPF[dsp + 16 >> 2]));
		HEAP32[dsp + 32876 >> 2] = ~~(+(0.0253061224 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 65664 >> 2] = ~~(+(0.0269387756 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 98452 >> 2] = ~~(+(0.0289569162 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 131240 >> 2] = ~~(+(0.0307482984 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 164028 >> 2] = ~~(+(0.0322448984 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 196816 >> 2] = ~~(+(0.033809524 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 229604 >> 2] = ~~(+(0.0353061222 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 262392 >> 2] = ~~(+(0.0366666652 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 270596 >> 2] = ~~(+(0.0126077095 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 270600 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 270596 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 278804 >> 2] = ~~(+(0.00999999978 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 278808 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 278804 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 287012 >> 2] = ~~(+(0.00773242628 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 287016 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 287012 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAP32[dsp + 291124 >> 2] = ~~(+(0.00510204071 * +(HEAPF[dsp + 16 >> 2])));
		HEAP32[dsp + 291128 >> 2] = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 291124 >> 2] | 0) + -1) | 0))) | 0))) | 0);
		HEAPF[dsp + 323916 >> 2] = +(0.00104308384 * +(HEAPF[dsp + 16 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 8 >> 2] = 0.333299994;
		HEAPF[dsp + 24 >> 2] = 600.;
		HEAPF[dsp + 32 >> 2] = 0.;
		HEAPF[dsp + 84 >> 2] = 0.5;
		HEAPF[dsp + 92 >> 2] = 0.5;
		HEAPF[dsp + 323920 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		var l29 = 0;
		var l30 = 0;
		var l31 = 0;
		var l32 = 0;
		var l33 = 0;
		var l34 = 0;
		var l35 = 0;
		var l36 = 0;
		var l37 = 0;
		var l38 = 0;
		var l39 = 0;
		var l40 = 0;
		var l41 = 0;
		var l42 = 0;
		var l43 = 0;
		var l44 = 0;
		var l45 = 0;
		var l46 = 0;
		var l47 = 0;
		var l48 = 0;
		var l49 = 0;
		var l50 = 0;
		var l51 = 0;
		var l52 = 0;
		var l53 = 0;
		var l54 = 0;
		var l55 = 0;
		var l56 = 0;
		var l57 = 0;
		var l58 = 0;
		var l59 = 0;
		var l60 = 0;
		var l61 = 0;
		var l62 = 0;
		var l63 = 0;
		var l64 = 0;
		var l65 = 0;
		var l66 = 0;
		var l67 = 0;
		var l68 = 0;
		var l69 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAP32[dsp + 44 + ((l2 | 0) << 2) >> 2] = 0;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 104 >> 2] = 0;
		for (l7 = 0; (((l7 | 0) < 8192) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 108 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 32880 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 32888 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 8192) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 32896 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 65668 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 65676 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 8192) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 65684 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 98456 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 98464 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 8192) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 98472 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 131244 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 131252 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 8192) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 131260 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 164032 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 164040 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 8192) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 164048 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 196820 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 196828 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 8192) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 196836 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 229608 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAPF[dsp + 229616 + ((l27 | 0) << 2) >> 2] = 0.;
			
		}
		for (l28 = 0; (((l28 | 0) < 8192) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 229624 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		for (l29 = 0; (((l29 | 0) < 2) | 0); l29 = (((l29 | 0) + 1) | 0)) {
			HEAPF[dsp + 262396 + ((l29 | 0) << 2) >> 2] = 0.;
			
		}
		for (l30 = 0; (((l30 | 0) < 2048) | 0); l30 = (((l30 | 0) + 1) | 0)) {
			HEAPF[dsp + 262404 + ((l30 | 0) << 2) >> 2] = 0.;
			
		}
		for (l31 = 0; (((l31 | 0) < 2) | 0); l31 = (((l31 | 0) + 1) | 0)) {
			HEAPF[dsp + 270604 + ((l31 | 0) << 2) >> 2] = 0.;
			
		}
		for (l32 = 0; (((l32 | 0) < 2048) | 0); l32 = (((l32 | 0) + 1) | 0)) {
			HEAPF[dsp + 270612 + ((l32 | 0) << 2) >> 2] = 0.;
			
		}
		for (l33 = 0; (((l33 | 0) < 2) | 0); l33 = (((l33 | 0) + 1) | 0)) {
			HEAPF[dsp + 278812 + ((l33 | 0) << 2) >> 2] = 0.;
			
		}
		for (l34 = 0; (((l34 | 0) < 2048) | 0); l34 = (((l34 | 0) + 1) | 0)) {
			HEAPF[dsp + 278820 + ((l34 | 0) << 2) >> 2] = 0.;
			
		}
		for (l35 = 0; (((l35 | 0) < 2) | 0); l35 = (((l35 | 0) + 1) | 0)) {
			HEAPF[dsp + 287020 + ((l35 | 0) << 2) >> 2] = 0.;
			
		}
		for (l36 = 0; (((l36 | 0) < 1024) | 0); l36 = (((l36 | 0) + 1) | 0)) {
			HEAPF[dsp + 287028 + ((l36 | 0) << 2) >> 2] = 0.;
			
		}
		for (l37 = 0; (((l37 | 0) < 2) | 0); l37 = (((l37 | 0) + 1) | 0)) {
			HEAPF[dsp + 291132 + ((l37 | 0) << 2) >> 2] = 0.;
			
		}
		for (l38 = 0; (((l38 | 0) < 2) | 0); l38 = (((l38 | 0) + 1) | 0)) {
			HEAPF[dsp + 291140 + ((l38 | 0) << 2) >> 2] = 0.;
			
		}
		for (l39 = 0; (((l39 | 0) < 8192) | 0); l39 = (((l39 | 0) + 1) | 0)) {
			HEAPF[dsp + 291148 + ((l39 | 0) << 2) >> 2] = 0.;
			
		}
		for (l40 = 0; (((l40 | 0) < 2) | 0); l40 = (((l40 | 0) + 1) | 0)) {
			HEAPF[dsp + 323924 + ((l40 | 0) << 2) >> 2] = 0.;
			
		}
		for (l41 = 0; (((l41 | 0) < 2) | 0); l41 = (((l41 | 0) + 1) | 0)) {
			HEAPF[dsp + 323932 + ((l41 | 0) << 2) >> 2] = 0.;
			
		}
		for (l42 = 0; (((l42 | 0) < 8192) | 0); l42 = (((l42 | 0) + 1) | 0)) {
			HEAPF[dsp + 323940 + ((l42 | 0) << 2) >> 2] = 0.;
			
		}
		for (l43 = 0; (((l43 | 0) < 2) | 0); l43 = (((l43 | 0) + 1) | 0)) {
			HEAPF[dsp + 356708 + ((l43 | 0) << 2) >> 2] = 0.;
			
		}
		for (l44 = 0; (((l44 | 0) < 2) | 0); l44 = (((l44 | 0) + 1) | 0)) {
			HEAPF[dsp + 356716 + ((l44 | 0) << 2) >> 2] = 0.;
			
		}
		for (l45 = 0; (((l45 | 0) < 8192) | 0); l45 = (((l45 | 0) + 1) | 0)) {
			HEAPF[dsp + 356724 + ((l45 | 0) << 2) >> 2] = 0.;
			
		}
		for (l46 = 0; (((l46 | 0) < 2) | 0); l46 = (((l46 | 0) + 1) | 0)) {
			HEAPF[dsp + 389492 + ((l46 | 0) << 2) >> 2] = 0.;
			
		}
		for (l47 = 0; (((l47 | 0) < 2) | 0); l47 = (((l47 | 0) + 1) | 0)) {
			HEAPF[dsp + 389500 + ((l47 | 0) << 2) >> 2] = 0.;
			
		}
		for (l48 = 0; (((l48 | 0) < 8192) | 0); l48 = (((l48 | 0) + 1) | 0)) {
			HEAPF[dsp + 389508 + ((l48 | 0) << 2) >> 2] = 0.;
			
		}
		for (l49 = 0; (((l49 | 0) < 2) | 0); l49 = (((l49 | 0) + 1) | 0)) {
			HEAPF[dsp + 422276 + ((l49 | 0) << 2) >> 2] = 0.;
			
		}
		for (l50 = 0; (((l50 | 0) < 2) | 0); l50 = (((l50 | 0) + 1) | 0)) {
			HEAPF[dsp + 422284 + ((l50 | 0) << 2) >> 2] = 0.;
			
		}
		for (l51 = 0; (((l51 | 0) < 8192) | 0); l51 = (((l51 | 0) + 1) | 0)) {
			HEAPF[dsp + 422292 + ((l51 | 0) << 2) >> 2] = 0.;
			
		}
		for (l52 = 0; (((l52 | 0) < 2) | 0); l52 = (((l52 | 0) + 1) | 0)) {
			HEAPF[dsp + 455060 + ((l52 | 0) << 2) >> 2] = 0.;
			
		}
		for (l53 = 0; (((l53 | 0) < 2) | 0); l53 = (((l53 | 0) + 1) | 0)) {
			HEAPF[dsp + 455068 + ((l53 | 0) << 2) >> 2] = 0.;
			
		}
		for (l54 = 0; (((l54 | 0) < 8192) | 0); l54 = (((l54 | 0) + 1) | 0)) {
			HEAPF[dsp + 455076 + ((l54 | 0) << 2) >> 2] = 0.;
			
		}
		for (l55 = 0; (((l55 | 0) < 2) | 0); l55 = (((l55 | 0) + 1) | 0)) {
			HEAPF[dsp + 487844 + ((l55 | 0) << 2) >> 2] = 0.;
			
		}
		for (l56 = 0; (((l56 | 0) < 2) | 0); l56 = (((l56 | 0) + 1) | 0)) {
			HEAPF[dsp + 487852 + ((l56 | 0) << 2) >> 2] = 0.;
			
		}
		for (l57 = 0; (((l57 | 0) < 8192) | 0); l57 = (((l57 | 0) + 1) | 0)) {
			HEAPF[dsp + 487860 + ((l57 | 0) << 2) >> 2] = 0.;
			
		}
		for (l58 = 0; (((l58 | 0) < 2) | 0); l58 = (((l58 | 0) + 1) | 0)) {
			HEAPF[dsp + 520628 + ((l58 | 0) << 2) >> 2] = 0.;
			
		}
		for (l59 = 0; (((l59 | 0) < 2) | 0); l59 = (((l59 | 0) + 1) | 0)) {
			HEAPF[dsp + 520636 + ((l59 | 0) << 2) >> 2] = 0.;
			
		}
		for (l60 = 0; (((l60 | 0) < 8192) | 0); l60 = (((l60 | 0) + 1) | 0)) {
			HEAPF[dsp + 520644 + ((l60 | 0) << 2) >> 2] = 0.;
			
		}
		for (l61 = 0; (((l61 | 0) < 2) | 0); l61 = (((l61 | 0) + 1) | 0)) {
			HEAPF[dsp + 553412 + ((l61 | 0) << 2) >> 2] = 0.;
			
		}
		for (l62 = 0; (((l62 | 0) < 2048) | 0); l62 = (((l62 | 0) + 1) | 0)) {
			HEAPF[dsp + 553420 + ((l62 | 0) << 2) >> 2] = 0.;
			
		}
		for (l63 = 0; (((l63 | 0) < 2) | 0); l63 = (((l63 | 0) + 1) | 0)) {
			HEAPF[dsp + 561612 + ((l63 | 0) << 2) >> 2] = 0.;
			
		}
		for (l64 = 0; (((l64 | 0) < 2048) | 0); l64 = (((l64 | 0) + 1) | 0)) {
			HEAPF[dsp + 561620 + ((l64 | 0) << 2) >> 2] = 0.;
			
		}
		for (l65 = 0; (((l65 | 0) < 2) | 0); l65 = (((l65 | 0) + 1) | 0)) {
			HEAPF[dsp + 569812 + ((l65 | 0) << 2) >> 2] = 0.;
			
		}
		for (l66 = 0; (((l66 | 0) < 2048) | 0); l66 = (((l66 | 0) + 1) | 0)) {
			HEAPF[dsp + 569820 + ((l66 | 0) << 2) >> 2] = 0.;
			
		}
		for (l67 = 0; (((l67 | 0) < 2) | 0); l67 = (((l67 | 0) + 1) | 0)) {
			HEAPF[dsp + 578012 + ((l67 | 0) << 2) >> 2] = 0.;
			
		}
		for (l68 = 0; (((l68 | 0) < 2048) | 0); l68 = (((l68 | 0) + 1) | 0)) {
			HEAPF[dsp + 578020 + ((l68 | 0) << 2) >> 2] = 0.;
			
		}
		for (l69 = 0; (((l69 | 0) < 2) | 0); l69 = (((l69 | 0) + 1) | 0)) {
			HEAPF[dsp + 586212 + ((l69 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 12 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var iSlow12 = 0;
		var iSlow13 = 0;
		var iSlow14 = 0;
		var iSlow15 = 0;
		var iSlow16 = 0;
		var iSlow17 = 0;
		var iSlow18 = 0;
		var iSlow19 = 0;
		var iSlow20 = 0;
		var iSlow21 = 0;
		var iSlow22 = 0;
		var iSlow23 = 0;
		var iSlow24 = 0;
		var iSlow25 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fRec11 = 0.;
		var fTemp7 = 0.;
		var fRec9 = 0.;
		var fTemp8 = 0.;
		var fRec7 = 0.;
		var fTemp9 = 0.;
		var fRec5 = 0.;
		var fTemp10 = 0.;
		var fRec35 = 0.;
		var fTemp11 = 0.;
		var fRec33 = 0.;
		var fTemp12 = 0.;
		var fRec31 = 0.;
		var fTemp13 = 0.;
		var fRec29 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 8 >> 2]));
		fSlow1 = +(1. - +(fSlow0));
		fSlow2 = +(+(HEAPF[dsp + 24 >> 2]));
		fSlow3 = +(+(HEAPF[dsp + 20 >> 2]) * +(fSlow2));
		fSlow4 = +(+(0.0430000015 * +(fSlow2)) + +(0.00139999995 * +(powf(+(fSlow2), 1.5))));
		fSlow5 = +(+(HEAPF[dsp + 28 >> 2]) * +(fSlow4));
		fSlow6 = +(+(HEAPF[dsp + 32 >> 2]));
		fSlow7 = +(+(HEAPF[dsp + 68 >> 2]) * +(0. - +(fSlow4)));
		fSlow8 = +(+(+(HEAPF[dsp + 80 >> 2]) * +(+(HEAPF[dsp + 84 >> 2]))) + 0.699999988);
		fSlow9 = +(+(HEAPF[dsp + 88 >> 2]) * +(+(HEAPF[dsp + 92 >> 2])));
		fSlow10 = +(1. - +(fSlow9));
		fSlow11 = +(0.200000003 * +(fSlow0));
		iSlow12 = ~~(+(+(HEAPF[dsp + 323916 >> 2]) * +(+(HEAPF[dsp + 323920 >> 2]))));
		iSlow13 = (((HEAP32[dsp + 32876 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow14 = (((HEAP32[dsp + 65664 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow15 = (((HEAP32[dsp + 98452 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow16 = (((HEAP32[dsp + 131240 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow17 = (((HEAP32[dsp + 164028 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow18 = (((HEAP32[dsp + 196816 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow19 = (((HEAP32[dsp + 229604 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow20 = (((HEAP32[dsp + 262392 >> 2] | 0) + (iSlow12 | 0)) | 0);
		iSlow21 = (((iSlow12 | 0) + -1) | 0);
		iSlow22 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 270596 >> 2] | 0) + (iSlow21 | 0)) | 0))) | 0))) | 0);
		iSlow23 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 278804 >> 2] | 0) + (iSlow21 | 0)) | 0))) | 0))) | 0);
		iSlow24 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 287012 >> 2] | 0) + (iSlow21 | 0)) | 0))) | 0))) | 0);
		iSlow25 = ((min_i(1024, ((max_i(0, (((HEAP32[dsp + 291124 >> 2] | 0) + (iSlow21 | 0)) | 0))) | 0))) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(fSlow6);
			HEAP32[dsp + 44 + (0 << 2) >> 2] = ((((((+(fSlow6) > +(HEAPF[dsp + 36 + (1 << 2) >> 2])) | 0)?0:(HEAP32[dsp + 44 + (1 << 2) >> 2] | 0)) | 0) + 1) | 0);
			fTemp0 = +(+(fSlow3) * +(+(+(fSlow5) * +((HEAP32[dsp + 44 + (0 << 2) >> 2] | 0))) + 1.));
			fTemp1 = +(sinf(+(fTemp0)));
			fTemp2 = +(cosf(+(fTemp0)));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 60 + (1 << 2) >> 2]) * +(fTemp1)) + +(+(HEAPF[dsp + 52 + (1 << 2) >> 2]) * +(fTemp2)));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(+(+(HEAPF[dsp + 60 + (1 << 2) >> 2]) * +(fTemp2)) + +(+(HEAPF[dsp + 52 + (1 << 2) >> 2]) * +(0. - +(fTemp1)))) + +(((1 - (HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)) | 0)));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(+(0.99000001 * +(HEAPF[dsp + 72 + (1 << 2) >> 2])) + +(0.00999999978 * +(expf(+(+(fSlow7) * +((HEAP32[dsp + 44 + (0 << 2) >> 2] | 0)))))));
			fTemp3 = +(+(HEAPF[dsp + 52 + (0 << 2) >> 2]) * +(HEAPF[dsp + 72 + (0 << 2) >> 2]));
			fTemp4 = +(+(fSlow1) * +(fTemp3));
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 96 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 32880 + (1 << 2) >> 2])));
			fTemp5 = +(+(fSlow11) * +(fTemp3));
			HEAPF[dsp + 108 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 96 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 32880 + (0 << 2) >> 2] = +(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 32876 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 32888 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 32888 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 65668 + (1 << 2) >> 2])));
			HEAPF[dsp + 32896 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 32888 + (0 << 2) >> 2])));
			HEAPF[dsp + 65668 + (0 << 2) >> 2] = +(HEAPF[dsp + 32896 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 65664 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 65676 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 65676 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 98456 + (1 << 2) >> 2])));
			HEAPF[dsp + 65684 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 65676 + (0 << 2) >> 2])));
			HEAPF[dsp + 98456 + (0 << 2) >> 2] = +(HEAPF[dsp + 65684 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 98452 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 98464 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 98464 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 131244 + (1 << 2) >> 2])));
			HEAPF[dsp + 98472 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 98464 + (0 << 2) >> 2])));
			HEAPF[dsp + 131244 + (0 << 2) >> 2] = +(HEAPF[dsp + 98472 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 131240 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 131252 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 131252 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 164032 + (1 << 2) >> 2])));
			HEAPF[dsp + 131260 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 131252 + (0 << 2) >> 2])));
			HEAPF[dsp + 164032 + (0 << 2) >> 2] = +(HEAPF[dsp + 131260 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 164028 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 164040 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 164040 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 196820 + (1 << 2) >> 2])));
			HEAPF[dsp + 164048 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 164040 + (0 << 2) >> 2])));
			HEAPF[dsp + 196820 + (0 << 2) >> 2] = +(HEAPF[dsp + 164048 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 196816 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 196828 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 196828 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 229608 + (1 << 2) >> 2])));
			HEAPF[dsp + 196836 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 196828 + (0 << 2) >> 2])));
			HEAPF[dsp + 229608 + (0 << 2) >> 2] = +(HEAPF[dsp + 196836 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 229604 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 229616 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 229616 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 262396 + (1 << 2) >> 2])));
			HEAPF[dsp + 229624 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(fTemp5) + +(+(fSlow8) * +(HEAPF[dsp + 229616 + (0 << 2) >> 2])));
			HEAPF[dsp + 262396 + (0 << 2) >> 2] = +(HEAPF[dsp + 229624 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 262392 >> 2] | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp6 = +(+(+(+(+(+(+(+(+(HEAPF[dsp + 32880 + (0 << 2) >> 2]) + +(HEAPF[dsp + 65668 + (0 << 2) >> 2])) + +(HEAPF[dsp + 98456 + (0 << 2) >> 2])) + +(HEAPF[dsp + 131244 + (0 << 2) >> 2])) + +(HEAPF[dsp + 164032 + (0 << 2) >> 2])) + +(HEAPF[dsp + 196820 + (0 << 2) >> 2])) + +(HEAPF[dsp + 229608 + (0 << 2) >> 2])) + +(HEAPF[dsp + 262396 + (0 << 2) >> 2])) + +(0.5 * +(HEAPF[dsp + 270604 + (1 << 2) >> 2])));
			HEAPF[dsp + 262404 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp6);
			HEAPF[dsp + 270604 + (0 << 2) >> 2] = +(HEAPF[dsp + 262404 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 270600 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec11 = +(0. - +(0.5 * +(fTemp6)));
			fTemp7 = +(+(HEAPF[dsp + 270604 + (1 << 2) >> 2]) + +(+(fRec11) + +(0.5 * +(HEAPF[dsp + 278812 + (1 << 2) >> 2]))));
			HEAPF[dsp + 270612 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp7);
			HEAPF[dsp + 278812 + (0 << 2) >> 2] = +(HEAPF[dsp + 270612 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 278808 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec9 = +(0. - +(0.5 * +(fTemp7)));
			fTemp8 = +(+(HEAPF[dsp + 278812 + (1 << 2) >> 2]) + +(+(fRec9) + +(0.5 * +(HEAPF[dsp + 287020 + (1 << 2) >> 2]))));
			HEAPF[dsp + 278820 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp8);
			HEAPF[dsp + 287020 + (0 << 2) >> 2] = +(HEAPF[dsp + 278820 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 287016 >> 2] | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec7 = +(0. - +(0.5 * +(fTemp8)));
			fTemp9 = +(+(+(fRec7) + +(0.5 * +(HEAPF[dsp + 291132 + (1 << 2) >> 2]))) + +(HEAPF[dsp + 287020 + (1 << 2) >> 2]));
			HEAPF[dsp + 287028 + ((((HEAP32[dsp + 104 >> 2] | 0) & 1023) | 0) << 2) >> 2] = +(fTemp9);
			HEAPF[dsp + 291132 + (0 << 2) >> 2] = +(HEAPF[dsp + 287028 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (HEAP32[dsp + 291128 >> 2] | 0)) | 0) & 1023) | 0) << 2) >> 2]);
			fRec5 = +(0. - +(0.5 * +(fTemp9)));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp4) + +(fRec5)) + +(HEAPF[dsp + 291132 + (1 << 2) >> 2])));
			HEAPF[dsp + 291140 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 291140 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 323924 + (1 << 2) >> 2])));
			HEAPF[dsp + 291148 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 291140 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 323924 + (0 << 2) >> 2] = +(HEAPF[dsp + 291148 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow13 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 323932 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 323932 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 356708 + (1 << 2) >> 2])));
			HEAPF[dsp + 323940 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 323932 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 356708 + (0 << 2) >> 2] = +(HEAPF[dsp + 323940 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow14 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 356716 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 356716 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 389492 + (1 << 2) >> 2])));
			HEAPF[dsp + 356724 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 356716 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 389492 + (0 << 2) >> 2] = +(HEAPF[dsp + 356724 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow15 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 389500 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 389500 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 422276 + (1 << 2) >> 2])));
			HEAPF[dsp + 389508 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 389500 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 422276 + (0 << 2) >> 2] = +(HEAPF[dsp + 389508 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow16 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 422284 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 422284 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 455060 + (1 << 2) >> 2])));
			HEAPF[dsp + 422292 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 422284 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 455060 + (0 << 2) >> 2] = +(HEAPF[dsp + 422292 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow17 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 455068 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 455068 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 487844 + (1 << 2) >> 2])));
			HEAPF[dsp + 455076 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 455068 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 487844 + (0 << 2) >> 2] = +(HEAPF[dsp + 455076 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow18 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 487852 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 487852 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 520628 + (1 << 2) >> 2])));
			HEAPF[dsp + 487860 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 487852 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 520628 + (0 << 2) >> 2] = +(HEAPF[dsp + 487860 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow19 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			HEAPF[dsp + 520636 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 520636 + (1 << 2) >> 2])) + +(+(fSlow10) * +(HEAPF[dsp + 553412 + (1 << 2) >> 2])));
			HEAPF[dsp + 520644 + ((((HEAP32[dsp + 104 >> 2] | 0) & 8191) | 0) << 2) >> 2] = +(+(+(fSlow8) * +(HEAPF[dsp + 520636 + (0 << 2) >> 2])) + +(fTemp5));
			HEAPF[dsp + 553412 + (0 << 2) >> 2] = +(HEAPF[dsp + 520644 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow20 | 0)) | 0) & 8191) | 0) << 2) >> 2]);
			fTemp10 = +(+(+(+(+(+(+(+(+(0.5 * +(HEAPF[dsp + 561612 + (1 << 2) >> 2])) + +(HEAPF[dsp + 323924 + (0 << 2) >> 2])) + +(HEAPF[dsp + 356708 + (0 << 2) >> 2])) + +(HEAPF[dsp + 389492 + (0 << 2) >> 2])) + +(HEAPF[dsp + 422276 + (0 << 2) >> 2])) + +(HEAPF[dsp + 455060 + (0 << 2) >> 2])) + +(HEAPF[dsp + 487844 + (0 << 2) >> 2])) + +(HEAPF[dsp + 520628 + (0 << 2) >> 2])) + +(HEAPF[dsp + 553412 + (0 << 2) >> 2]));
			HEAPF[dsp + 553420 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp10);
			HEAPF[dsp + 561612 + (0 << 2) >> 2] = +(HEAPF[dsp + 553420 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow22 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec35 = +(0. - +(0.5 * +(fTemp10)));
			fTemp11 = +(+(+(0.5 * +(HEAPF[dsp + 569812 + (1 << 2) >> 2])) + +(HEAPF[dsp + 561612 + (1 << 2) >> 2])) + +(fRec35));
			HEAPF[dsp + 561620 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp11);
			HEAPF[dsp + 569812 + (0 << 2) >> 2] = +(HEAPF[dsp + 561620 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow23 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec33 = +(0. - +(0.5 * +(fTemp11)));
			fTemp12 = +(+(+(0.5 * +(HEAPF[dsp + 578012 + (1 << 2) >> 2])) + +(HEAPF[dsp + 569812 + (1 << 2) >> 2])) + +(fRec33));
			HEAPF[dsp + 569820 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp12);
			HEAPF[dsp + 578012 + (0 << 2) >> 2] = +(HEAPF[dsp + 569820 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow24 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec31 = +(0. - +(0.5 * +(fTemp12)));
			fTemp13 = +(+(+(0.5 * +(HEAPF[dsp + 586212 + (1 << 2) >> 2])) + +(HEAPF[dsp + 578012 + (1 << 2) >> 2])) + +(fRec31));
			HEAPF[dsp + 578020 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp13);
			HEAPF[dsp + 586212 + (0 << 2) >> 2] = +(HEAPF[dsp + 578020 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iSlow25 | 0)) | 0) & 2047) | 0) << 2) >> 2]);
			fRec29 = +(0. - +(0.5 * +(fTemp13)));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp4) + +(HEAPF[dsp + 586212 + (1 << 2) >> 2])) + +(fRec29)));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAP32[dsp + 44 + (1 << 2) >> 2] = (HEAP32[dsp + 44 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAP32[dsp + 104 >> 2] = (((HEAP32[dsp + 104 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 32880 + (1 << 2) >> 2] = +(HEAPF[dsp + 32880 + (0 << 2) >> 2]);
			HEAPF[dsp + 32888 + (1 << 2) >> 2] = +(HEAPF[dsp + 32888 + (0 << 2) >> 2]);
			HEAPF[dsp + 65668 + (1 << 2) >> 2] = +(HEAPF[dsp + 65668 + (0 << 2) >> 2]);
			HEAPF[dsp + 65676 + (1 << 2) >> 2] = +(HEAPF[dsp + 65676 + (0 << 2) >> 2]);
			HEAPF[dsp + 98456 + (1 << 2) >> 2] = +(HEAPF[dsp + 98456 + (0 << 2) >> 2]);
			HEAPF[dsp + 98464 + (1 << 2) >> 2] = +(HEAPF[dsp + 98464 + (0 << 2) >> 2]);
			HEAPF[dsp + 131244 + (1 << 2) >> 2] = +(HEAPF[dsp + 131244 + (0 << 2) >> 2]);
			HEAPF[dsp + 131252 + (1 << 2) >> 2] = +(HEAPF[dsp + 131252 + (0 << 2) >> 2]);
			HEAPF[dsp + 164032 + (1 << 2) >> 2] = +(HEAPF[dsp + 164032 + (0 << 2) >> 2]);
			HEAPF[dsp + 164040 + (1 << 2) >> 2] = +(HEAPF[dsp + 164040 + (0 << 2) >> 2]);
			HEAPF[dsp + 196820 + (1 << 2) >> 2] = +(HEAPF[dsp + 196820 + (0 << 2) >> 2]);
			HEAPF[dsp + 196828 + (1 << 2) >> 2] = +(HEAPF[dsp + 196828 + (0 << 2) >> 2]);
			HEAPF[dsp + 229608 + (1 << 2) >> 2] = +(HEAPF[dsp + 229608 + (0 << 2) >> 2]);
			HEAPF[dsp + 229616 + (1 << 2) >> 2] = +(HEAPF[dsp + 229616 + (0 << 2) >> 2]);
			HEAPF[dsp + 262396 + (1 << 2) >> 2] = +(HEAPF[dsp + 262396 + (0 << 2) >> 2]);
			HEAPF[dsp + 270604 + (1 << 2) >> 2] = +(HEAPF[dsp + 270604 + (0 << 2) >> 2]);
			HEAPF[dsp + 278812 + (1 << 2) >> 2] = +(HEAPF[dsp + 278812 + (0 << 2) >> 2]);
			HEAPF[dsp + 287020 + (1 << 2) >> 2] = +(HEAPF[dsp + 287020 + (0 << 2) >> 2]);
			HEAPF[dsp + 291132 + (1 << 2) >> 2] = +(HEAPF[dsp + 291132 + (0 << 2) >> 2]);
			HEAPF[dsp + 291140 + (1 << 2) >> 2] = +(HEAPF[dsp + 291140 + (0 << 2) >> 2]);
			HEAPF[dsp + 323924 + (1 << 2) >> 2] = +(HEAPF[dsp + 323924 + (0 << 2) >> 2]);
			HEAPF[dsp + 323932 + (1 << 2) >> 2] = +(HEAPF[dsp + 323932 + (0 << 2) >> 2]);
			HEAPF[dsp + 356708 + (1 << 2) >> 2] = +(HEAPF[dsp + 356708 + (0 << 2) >> 2]);
			HEAPF[dsp + 356716 + (1 << 2) >> 2] = +(HEAPF[dsp + 356716 + (0 << 2) >> 2]);
			HEAPF[dsp + 389492 + (1 << 2) >> 2] = +(HEAPF[dsp + 389492 + (0 << 2) >> 2]);
			HEAPF[dsp + 389500 + (1 << 2) >> 2] = +(HEAPF[dsp + 389500 + (0 << 2) >> 2]);
			HEAPF[dsp + 422276 + (1 << 2) >> 2] = +(HEAPF[dsp + 422276 + (0 << 2) >> 2]);
			HEAPF[dsp + 422284 + (1 << 2) >> 2] = +(HEAPF[dsp + 422284 + (0 << 2) >> 2]);
			HEAPF[dsp + 455060 + (1 << 2) >> 2] = +(HEAPF[dsp + 455060 + (0 << 2) >> 2]);
			HEAPF[dsp + 455068 + (1 << 2) >> 2] = +(HEAPF[dsp + 455068 + (0 << 2) >> 2]);
			HEAPF[dsp + 487844 + (1 << 2) >> 2] = +(HEAPF[dsp + 487844 + (0 << 2) >> 2]);
			HEAPF[dsp + 487852 + (1 << 2) >> 2] = +(HEAPF[dsp + 487852 + (0 << 2) >> 2]);
			HEAPF[dsp + 520628 + (1 << 2) >> 2] = +(HEAPF[dsp + 520628 + (0 << 2) >> 2]);
			HEAPF[dsp + 520636 + (1 << 2) >> 2] = +(HEAPF[dsp + 520636 + (0 << 2) >> 2]);
			HEAPF[dsp + 553412 + (1 << 2) >> 2] = +(HEAPF[dsp + 553412 + (0 << 2) >> 2]);
			HEAPF[dsp + 561612 + (1 << 2) >> 2] = +(HEAPF[dsp + 561612 + (0 << 2) >> 2]);
			HEAPF[dsp + 569812 + (1 << 2) >> 2] = +(HEAPF[dsp + 569812 + (0 << 2) >> 2]);
			HEAPF[dsp + 578012 + (1 << 2) >> 2] = +(HEAPF[dsp + 578012 + (0 << 2) >> 2]);
			HEAPF[dsp + 586212 + (1 << 2) >> 2] = +(HEAPF[dsp + 586212 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 586220;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/bubble/drop"] = 32;
	pathTable["/bubble/bubble/freq"] = 24;
	pathTable["/bubble/Freeverb/Wet"] = 8;
	pathTable["/bubble/Freeverb/0x00/RoomSize"] = 84;
	pathTable["/bubble/Freeverb/0x00/Damp"] = 92;
	pathTable["/bubble/Freeverb/0x00/Stereo_Spread"] = 323920;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"bubble\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c) 2017: Yann Orlarey, GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Production of a water drop bubble sound.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"bubble\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"reverbs.lib/name\":\"Faust Reverb Library\"},{\"reverbs.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"bubble\",\"items\":[{\"type\":\"hgroup\",\"label\":\"Freeverb\",\"items\":[{\"type\":\"vgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Damp\",\"address\":\"/bubble/Freeverb/0x00/Damp\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Somehow control the   density of the reverb.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"vslider\",\"label\":\"RoomSize\",\"address\":\"/bubble/Freeverb/0x00/RoomSize\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"The room size   between 0 and 1 with 1 for the largest room.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"},{\"type\":\"vslider\",\"label\":\"Stereo Spread\",\"address\":\"/bubble/Freeverb/0x00/Stereo_Spread\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Spatial   spread between 0 and 1 with 1 for maximum spread.\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"vslider\",\"label\":\"Wet\",\"address\":\"/bubble/Freeverb/Wet\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"The amount of reverb applied to the signal   between 0 and 1 with 1 for the maximum amount of reverb.\"}],\"init\":\"0.3333\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.025\"}]},{\"type\":\"vgroup\",\"label\":\"bubble\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/bubble/bubble/freq\",\"init\":\"600\",\"min\":\"150\",\"max\":\"2000\",\"step\":\"1\"}]},{\"type\":\"button\",\"label\":\"drop\",\"address\":\"/bubble/drop\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c) 2017: Yann Orlarey, GRAME");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Production of a water drop bubble sound.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "bubble");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("reverbs.lib/name", "Faust Reverb Library");
	m.declare("reverbs.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

