/* ------------------------------------------------------------
author: "JOS, revised by RM"
name: "flanger"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 8 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 12 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 8 >> 2] | 0))))));
		HEAPF[dsp + 16 >> 2] = +(6.28318548 / +(HEAPF[dsp + 12 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.;
		HEAPF[dsp + 4 >> 2] = 0.;
		HEAPF[dsp + 20 >> 2] = 0.5;
		HEAPF[dsp + 52 >> 2] = 0.;
		HEAPF[dsp + 56 >> 2] = 1.;
		HEAPF[dsp + 60 >> 2] = 0.;
		HEAPF[dsp + 16452 >> 2] = 1.;
		HEAPF[dsp + 16456 >> 2] = 10.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 24 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 32 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 64 >> 2] = 0;
		for (l3 = 0; (((l3 | 0) < 4096) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 16460 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 4096) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 16468 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 32852 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 8 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var iSlow0 = 0;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var iTemp10 = 0;
		var fTemp11 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		iSlow0 = ~~(+(+(HEAPF[dsp + 0 >> 2])));
		fSlow1 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 4 >> 2])))));
		fSlow2 = +(+(HEAPF[dsp + 16 >> 2]) * +(+(HEAPF[dsp + 20 >> 2])));
		fSlow3 = +(sinf(+(fSlow2)));
		fSlow4 = +(cosf(+(fSlow2)));
		fSlow5 = +(0. - +(fSlow3));
		fSlow6 = +(+(HEAPF[dsp + 56 >> 2]));
		fSlow7 = +(~~(+(+(HEAPF[dsp + 52 >> 2])))?+(0. - +(fSlow6)):+(fSlow6));
		fSlow8 = +(+(HEAPF[dsp + 60 >> 2]));
		fSlow9 = +(0.00100000005 * +(+(HEAPF[dsp + 16452 >> 2])));
		fSlow10 = +(0.000500000024 * +(+(HEAPF[dsp + 16456 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 24 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 32 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 40 + (1 << 2) >> 2])) + +(+(fSlow4) * +(HEAPF[dsp + 32 + (1 << 2) >> 2])));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(+(+(+(fSlow4) * +(HEAPF[dsp + 40 + (1 << 2) >> 2])) + +(+(fSlow5) * +(HEAPF[dsp + 32 + (1 << 2) >> 2]))) + +(((1 - (HEAP32[dsp + 24 + (1 << 2) >> 2] | 0)) | 0)));
			HEAPF[dsp + 48 >> 2] = +(+(+(HEAPF[dsp + 40 + (0 << 2) >> 2]) + +(HEAPF[dsp + 32 + (0 << 2) >> 2])));
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp1 = +(+(fSlow1) * +((iSlow0 | 0)?0.:+(fTemp0)));
			fTemp2 = +(+(+(fSlow8) * +(HEAPF[dsp + 16460 + (1 << 2) >> 2])) - +(fTemp1));
			HEAPF[dsp + 68 + ((((HEAP32[dsp + 64 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp2);
			fTemp3 = +(+(HEAPF[dsp + 12 >> 2]) * +(+(fSlow9) + +(+(fSlow10) * +(+(HEAPF[dsp + 32 + (0 << 2) >> 2]) + 1.))));
			iTemp4 = ~~(+(fTemp3));
			fTemp5 = +(floorf(+(fTemp3)));
			HEAPF[dsp + 16460 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 68 + ((((((HEAP32[dsp + 64 >> 2] | 0) - ((min_i(2049, ((max_i(0, (iTemp4 | 0))) | 0))) | 0)) | 0) & 4095) | 0) << 2) >> 2]) * +(+(fTemp5) + +(1. - +(fTemp3)))) + +(+(+(fTemp3) - +(fTemp5)) * +(HEAPF[dsp + 68 + ((((((HEAP32[dsp + 64 >> 2] | 0) - ((min_i(2049, ((max_i(0, (((iTemp4 | 0) + 1) | 0))) | 0))) | 0)) | 0) & 4095) | 0) << 2) >> 2])));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp0):+(0.5 * +(+(fTemp1) + +(+(fSlow7) * +(HEAPF[dsp + 16460 + (0 << 2) >> 2]))))));
			fTemp6 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp7 = +(+(fSlow1) * +((iSlow0 | 0)?0.:+(fTemp6)));
			fTemp8 = +(+(+(fSlow8) * +(HEAPF[dsp + 32852 + (1 << 2) >> 2])) - +(fTemp7));
			HEAPF[dsp + 16468 + ((((HEAP32[dsp + 64 >> 2] | 0) & 4095) | 0) << 2) >> 2] = +(fTemp8);
			fTemp9 = +(+(HEAPF[dsp + 12 >> 2]) * +(+(fSlow9) + +(+(fSlow10) * +(+(HEAPF[dsp + 40 + (0 << 2) >> 2]) + 1.))));
			iTemp10 = ~~(+(fTemp9));
			fTemp11 = +(floorf(+(fTemp9)));
			HEAPF[dsp + 32852 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 16468 + ((((((HEAP32[dsp + 64 >> 2] | 0) - ((min_i(2049, ((max_i(0, (iTemp10 | 0))) | 0))) | 0)) | 0) & 4095) | 0) << 2) >> 2]) * +(+(fTemp11) + +(1. - +(fTemp9)))) + +(+(+(fTemp9) - +(fTemp11)) * +(HEAPF[dsp + 16468 + ((((((HEAP32[dsp + 64 >> 2] | 0) - ((min_i(2049, ((max_i(0, (((iTemp10 | 0) + 1) | 0))) | 0))) | 0)) | 0) & 4095) | 0) << 2) >> 2])));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp6):+(0.5 * +(+(fTemp7) + +(+(fSlow7) * +(HEAPF[dsp + 32852 + (0 << 2) >> 2]))))));
			HEAP32[dsp + 24 + (1 << 2) >> 2] = (HEAP32[dsp + 24 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 32 + (1 << 2) >> 2] = +(HEAPF[dsp + 32 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAP32[dsp + 64 >> 2] = (((HEAP32[dsp + 64 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 16460 + (1 << 2) >> 2] = +(HEAPF[dsp + 16460 + (0 << 2) >> 2]);
			HEAPF[dsp + 32852 + (1 << 2) >> 2] = +(HEAPF[dsp + 32852 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 32860;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/FLANGER/0x00/Bypass"] = 0;
	pathTable["/FLANGER/0x00/Invert_Flange_Sum"] = 52;
	pathTable["/FLANGER/0x00/Flange_LFO"] = 48;
	pathTable["/FLANGER/0x00/Flanger_Output_Level"] = 4;
	pathTable["/FLANGER/0x00/Speed"] = 20;
	pathTable["/FLANGER/0x00/Depth"] = 56;
	pathTable["/FLANGER/0x00/Feedback"] = 60;
	pathTable["/FLANGER/Delay_Controls/Delay_Offset"] = 16452;
	pathTable["/FLANGER/Delay_Controls/Flange_Delay"] = 16456;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"flanger\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Flanger effect application.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"flanger\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"phaflangers.lib/name\":\"Faust Phaser and Flanger Library\"},{\"phaflangers.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"FLANGER\",\"meta\":[{\"tooltip\":\"Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/FLANGER/0x00/Bypass\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the flanger   has no effect\"}]},{\"type\":\"checkbox\",\"label\":\"Invert Flange Sum\",\"address\":\"/FLANGER/0x00/Invert_Flange_Sum\",\"meta\":[{\"1\":\"\"}]},{\"type\":\"hbargraph\",\"label\":\"Flange LFO\",\"address\":\"/FLANGER/0x00/Flange_LFO\",\"meta\":[{\"2\":\"\"},{\"style\":\"led\"},{\"tooltip\":\"Display sum of flange delays\"}],\"min\":\"-1.5\",\"max\":\"1.5\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Speed\",\"address\":\"/FLANGER/0x00/Speed\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"Depth\",\"address\":\"/FLANGER/0x00/Depth\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Feedback\",\"address\":\"/FLANGER/0x00/Feedback\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-0.999\",\"max\":\"0.999\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"Delay Controls\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Flange Delay\",\"address\":\"/FLANGER/Delay_Controls/Flange_Delay\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"10\",\"min\":\"0\",\"max\":\"20\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Delay Offset\",\"address\":\"/FLANGER/Delay_Controls/Delay_Offset\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"20\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Flanger Output Level\",\"address\":\"/FLANGER/0x00/Flanger_Output_Level\",\"meta\":[{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-60\",\"max\":\"10\",\"step\":\"0.1\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "JOS, revised by RM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Flanger effect application.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "flanger");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("phaflangers.lib/name", "Faust Phaser and Flanger Library");
	m.declare("phaflangers.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "0.0");
}

