/* ------------------------------------------------------------
author: "JOS, revised by RM"
name: "phaser"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 24 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 28 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 24 >> 2] | 0))))));
		HEAPF[dsp + 32 >> 2] = +(1. / +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 48 >> 2] = +(6.28318548 / +(HEAPF[dsp + 28 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.;
		HEAPF[dsp + 4 >> 2] = 0.;
		HEAPF[dsp + 16 >> 2] = 0.;
		HEAPF[dsp + 20 >> 2] = 1.;
		HEAPF[dsp + 36 >> 2] = 1000.;
		HEAPF[dsp + 40 >> 2] = 0.;
		HEAPF[dsp + 44 >> 2] = 1.5;
		HEAPF[dsp + 52 >> 2] = 100.;
		HEAPF[dsp + 56 >> 2] = 800.;
		HEAPF[dsp + 60 >> 2] = 0.5;
		HEAPF[dsp + 136 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 8 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 3) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 3) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 92 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 3) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 3) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 116 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 128 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 3) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 140 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 3) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 152 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 3) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 164 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 3) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 176 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 188 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 24 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var iSlow0 = 0;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		iSlow0 = ~~(+(+(HEAPF[dsp + 0 >> 2])));
		fSlow1 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 4 >> 2])))));
		fSlow2 = +(0.5 * +(~~(+(+(HEAPF[dsp + 16 >> 2])))?2.:+(+(HEAPF[dsp + 20 >> 2]))));
		fSlow3 = +(1. - +(fSlow2));
		fSlow4 = +(expf(+(+(HEAPF[dsp + 32 >> 2]) * +(0. - +(3.14159274 * +(+(HEAPF[dsp + 36 >> 2])))))));
		fSlow5 = +(powf(+(fSlow4), 2.));
		fSlow6 = +(+(HEAPF[dsp + 40 >> 2]));
		fSlow7 = +(0. - +(2. * +(fSlow4)));
		fSlow8 = +(+(HEAPF[dsp + 44 >> 2]));
		fSlow9 = +(+(HEAPF[dsp + 52 >> 2]));
		fSlow10 = +(+(HEAPF[dsp + 48 >> 2]) * +(fSlow9));
		fSlow11 = +(0.5 * +(0. - +(+(HEAPF[dsp + 48 >> 2]) * +(+(fSlow9) - +(max_f(+(fSlow9), +(+(HEAPF[dsp + 56 >> 2]))))))));
		fSlow12 = +(+(HEAPF[dsp + 48 >> 2]) * +(+(HEAPF[dsp + 60 >> 2])));
		fSlow13 = +(sinf(+(fSlow12)));
		fSlow14 = +(cosf(+(fSlow12)));
		fSlow15 = +(0. - +(fSlow13));
		fSlow16 = +(powf(+(fSlow8), 2.));
		fSlow17 = +(powf(+(fSlow8), 3.));
		fSlow18 = +(powf(+(fSlow8), 4.));
		fSlow19 = +(~~(+(+(HEAPF[dsp + 136 >> 2])))?+(0. - +(fSlow2)):+(fSlow2));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp1 = +((iSlow0 | 0)?0.:+(fTemp0));
			HEAP32[dsp + 8 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(+(fSlow13) * +(HEAPF[dsp + 72 + (1 << 2) >> 2])) + +(+(fSlow14) * +(HEAPF[dsp + 64 + (1 << 2) >> 2])));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(+(+(+(fSlow14) * +(HEAPF[dsp + 72 + (1 << 2) >> 2])) + +(+(fSlow15) * +(HEAPF[dsp + 64 + (1 << 2) >> 2]))) + +(((1 - (HEAP32[dsp + 8 + (1 << 2) >> 2] | 0)) | 0)));
			fTemp2 = +(+(fSlow10) + +(+(fSlow11) * +(1. - +(HEAPF[dsp + 64 + (0 << 2) >> 2]))));
			fTemp3 = +(+(HEAPF[dsp + 80 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow8) * +(fTemp2)))));
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(+(+(fSlow1) * +(fTemp1)) + +(+(fSlow6) * +(HEAPF[dsp + 128 + (1 << 2) >> 2]))) - +(+(+(fSlow7) * +(fTemp3)) + +(+(fSlow5) * +(HEAPF[dsp + 80 + (2 << 2) >> 2]))));
			fTemp4 = +(+(HEAPF[dsp + 92 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow16) * +(fTemp2)))));
			HEAPF[dsp + 92 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 80 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp3) - +(fTemp4)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 80 + (0 << 2) >> 2]) - +(HEAPF[dsp + 92 + (2 << 2) >> 2]))));
			fTemp5 = +(+(HEAPF[dsp + 104 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow17) * +(fTemp2)))));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 92 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp4) - +(fTemp5)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 92 + (0 << 2) >> 2]) - +(HEAPF[dsp + 104 + (2 << 2) >> 2]))));
			fTemp6 = +(+(HEAPF[dsp + 116 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow18) * +(fTemp2)))));
			HEAPF[dsp + 116 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 104 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp5) - +(fTemp6)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 104 + (0 << 2) >> 2]) - +(HEAPF[dsp + 116 + (2 << 2) >> 2]))));
			HEAPF[dsp + 128 + (0 << 2) >> 2] = +(+(+(fSlow5) * +(HEAPF[dsp + 116 + (0 << 2) >> 2])) + +(+(+(fSlow7) * +(fTemp6)) + +(HEAPF[dsp + 116 + (2 << 2) >> 2])));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp0):+(+(+(fSlow1) * +(+(fTemp1) * +(fSlow3))) + +(+(HEAPF[dsp + 128 + (0 << 2) >> 2]) * +(fSlow19)))));
			fTemp7 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp8 = +((iSlow0 | 0)?0.:+(fTemp7));
			fTemp9 = +(+(fSlow10) + +(+(fSlow11) * +(1. - +(HEAPF[dsp + 72 + (0 << 2) >> 2]))));
			fTemp10 = +(+(HEAPF[dsp + 140 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow8) * +(fTemp9)))));
			HEAPF[dsp + 140 + (0 << 2) >> 2] = +(+(+(+(fSlow1) * +(fTemp8)) + +(+(fSlow6) * +(HEAPF[dsp + 188 + (1 << 2) >> 2]))) - +(+(+(fSlow7) * +(fTemp10)) + +(+(fSlow5) * +(HEAPF[dsp + 140 + (2 << 2) >> 2]))));
			fTemp11 = +(+(HEAPF[dsp + 152 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow16) * +(fTemp9)))));
			HEAPF[dsp + 152 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 140 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp10) - +(fTemp11)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 140 + (0 << 2) >> 2]) - +(HEAPF[dsp + 152 + (2 << 2) >> 2]))));
			fTemp12 = +(+(HEAPF[dsp + 164 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow17) * +(fTemp9)))));
			HEAPF[dsp + 164 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 152 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp11) - +(fTemp12)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 152 + (0 << 2) >> 2]) - +(HEAPF[dsp + 164 + (2 << 2) >> 2]))));
			fTemp13 = +(+(HEAPF[dsp + 176 + (1 << 2) >> 2]) * +(cosf(+(+(fSlow18) * +(fTemp9)))));
			HEAPF[dsp + 176 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 164 + (2 << 2) >> 2]) + +(+(fSlow7) * +(+(fTemp12) - +(fTemp13)))) + +(+(fSlow5) * +(+(HEAPF[dsp + 164 + (0 << 2) >> 2]) - +(HEAPF[dsp + 176 + (2 << 2) >> 2]))));
			HEAPF[dsp + 188 + (0 << 2) >> 2] = +(+(+(fSlow5) * +(HEAPF[dsp + 176 + (0 << 2) >> 2])) + +(+(+(fSlow7) * +(fTemp13)) + +(HEAPF[dsp + 176 + (2 << 2) >> 2])));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp7):+(+(+(fSlow1) * +(+(fTemp8) * +(fSlow3))) + +(+(HEAPF[dsp + 188 + (0 << 2) >> 2]) * +(fSlow19)))));
			HEAP32[dsp + 8 + (1 << 2) >> 2] = (HEAP32[dsp + 8 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (2 << 2) >> 2] = +(HEAPF[dsp + 80 + (1 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 92 + (2 << 2) >> 2] = +(HEAPF[dsp + 92 + (1 << 2) >> 2]);
			HEAPF[dsp + 92 + (1 << 2) >> 2] = +(HEAPF[dsp + 92 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (2 << 2) >> 2] = +(HEAPF[dsp + 104 + (1 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 116 + (2 << 2) >> 2] = +(HEAPF[dsp + 116 + (1 << 2) >> 2]);
			HEAPF[dsp + 116 + (1 << 2) >> 2] = +(HEAPF[dsp + 116 + (0 << 2) >> 2]);
			HEAPF[dsp + 128 + (1 << 2) >> 2] = +(HEAPF[dsp + 128 + (0 << 2) >> 2]);
			HEAPF[dsp + 140 + (2 << 2) >> 2] = +(HEAPF[dsp + 140 + (1 << 2) >> 2]);
			HEAPF[dsp + 140 + (1 << 2) >> 2] = +(HEAPF[dsp + 140 + (0 << 2) >> 2]);
			HEAPF[dsp + 152 + (2 << 2) >> 2] = +(HEAPF[dsp + 152 + (1 << 2) >> 2]);
			HEAPF[dsp + 152 + (1 << 2) >> 2] = +(HEAPF[dsp + 152 + (0 << 2) >> 2]);
			HEAPF[dsp + 164 + (2 << 2) >> 2] = +(HEAPF[dsp + 164 + (1 << 2) >> 2]);
			HEAPF[dsp + 164 + (1 << 2) >> 2] = +(HEAPF[dsp + 164 + (0 << 2) >> 2]);
			HEAPF[dsp + 176 + (2 << 2) >> 2] = +(HEAPF[dsp + 176 + (1 << 2) >> 2]);
			HEAPF[dsp + 176 + (1 << 2) >> 2] = +(HEAPF[dsp + 176 + (0 << 2) >> 2]);
			HEAPF[dsp + 188 + (1 << 2) >> 2] = +(HEAPF[dsp + 188 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 196;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/PHASER2/0x00/Bypass"] = 0;
	pathTable["/PHASER2/0x00/Vibrato_Mode"] = 16;
	pathTable["/PHASER2/0x00/Invert_Internal_Phaser_Sum"] = 136;
	pathTable["/PHASER2/0x00/Phaser_Output_Level"] = 4;
	pathTable["/PHASER2/0x00/Notch_Depth_(Intensity)"] = 20;
	pathTable["/PHASER2/0x00/Notch_width"] = 36;
	pathTable["/PHASER2/0x00/Feedback_Gain"] = 40;
	pathTable["/PHASER2/0x00/Notch_Freq_Ratio:_NotchFreq(n+1)/NotchFreq(n)"] = 44;
	pathTable["/PHASER2/0x00/Min_Notch1_Freq"] = 52;
	pathTable["/PHASER2/0x00/Max_Notch1_Freq"] = 56;
	pathTable["/PHASER2/0x00/Speed"] = 60;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"phaser\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Phaser demo application.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"phaser\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"phaflangers.lib/name\":\"Faust Phaser and Flanger Library\"},{\"phaflangers.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"PHASER2\",\"meta\":[{\"tooltip\":\"Reference:   https://ccrma.stanford.edu/~jos/pasp/Flanging.html\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/PHASER2/0x00/Bypass\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked, the phaser   has no effect\"}]},{\"type\":\"checkbox\",\"label\":\"Invert Internal Phaser Sum\",\"address\":\"/PHASER2/0x00/Invert_Internal_Phaser_Sum\",\"meta\":[{\"1\":\"\"}]},{\"type\":\"checkbox\",\"label\":\"Vibrato Mode\",\"address\":\"/PHASER2/0x00/Vibrato_Mode\",\"meta\":[{\"2\":\"\"}]}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Speed\",\"address\":\"/PHASER2/0x00/Speed\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Notch Depth (Intensity)\",\"address\":\"/PHASER2/0x00/Notch_Depth_(Intensity)\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Feedback Gain\",\"address\":\"/PHASER2/0x00/Feedback_Gain\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"-0.999\",\"max\":\"0.999\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"2\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Notch width\",\"address\":\"/PHASER2/0x00/Notch_width\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"1000\",\"min\":\"10\",\"max\":\"5000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Min Notch1 Freq\",\"address\":\"/PHASER2/0x00/Min_Notch1_Freq\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"100\",\"min\":\"20\",\"max\":\"5000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Max Notch1 Freq\",\"address\":\"/PHASER2/0x00/Max_Notch1_Freq\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"800\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n)\",\"address\":\"/PHASER2/0x00/Notch_Freq_Ratio:_NotchFreq(n+1)/NotchFreq(n)\",\"meta\":[{\"4\":\"\"},{\"style\":\"knob\"}],\"init\":\"1.5\",\"min\":\"1.1\",\"max\":\"4\",\"step\":\"0.001\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Phaser Output Level\",\"address\":\"/PHASER2/0x00/Phaser_Output_Level\",\"meta\":[{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-60\",\"max\":\"10\",\"step\":\"0.1\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "JOS, revised by RM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("description", "Phaser demo application.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "phaser");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("phaflangers.lib/name", "Faust Phaser and Flanger Library");
	m.declare("phaflangers.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "0.0");
}

