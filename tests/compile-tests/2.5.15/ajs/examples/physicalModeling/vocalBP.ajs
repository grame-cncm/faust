/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "Vocal BandPass"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 24 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 28 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 24 >> 2] | 0))))));
		HEAPF[dsp + 32 >> 2] = +(1. / +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 44 >> 2] = +(6.28318548 / +(HEAPF[dsp + 28 >> 2]));
		HEAPF[dsp + 84 >> 2] = +(3.14159274 / +(HEAPF[dsp + 28 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.899999976;
		HEAPF[dsp + 12 >> 2] = 0.;
		HEAPF[dsp + 36 >> 2] = 440.;
		HEAPF[dsp + 40 >> 2] = 0.5;
		HEAPF[dsp + 48 >> 2] = 6.;
		HEAPF[dsp + 88 >> 2] = 0.;
		HEAPF[dsp + 92 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAP32[dsp + 76 + ((l5 | 0) << 2) >> 2] = 0;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 112 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 3) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 3) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 132 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 3) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 144 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 3) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 156 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 3) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 168 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 24 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var iSlow12 = 0;
		var iSlow13 = 0;
		var fSlow14 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var fRec3 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var iTemp7 = 0;
		var iTemp8 = 0;
		var fTemp9 = 0.;
		var iTemp10 = 0;
		var fTemp11 = 0.;
		var iTemp12 = 0;
		var fTemp13 = 0.;
		var iTemp14 = 0;
		var fTemp15 = 0.;
		var iTemp16 = 0;
		var fTemp17 = 0.;
		var iTemp18 = 0;
		var fTemp19 = 0.;
		var iTemp20 = 0;
		var fTemp21 = 0.;
		var iTemp22 = 0;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var iTemp25 = 0;
		var fTemp26 = 0.;
		var iTemp27 = 0;
		var fTemp28 = 0.;
		var iTemp29 = 0;
		var fTemp30 = 0.;
		var iTemp31 = 0;
		var fTemp32 = 0.;
		var iTemp33 = 0;
		var fTemp34 = 0.;
		var iTemp35 = 0;
		var fTemp36 = 0.;
		var iTemp37 = 0;
		var fTemp38 = 0.;
		var iTemp39 = 0;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var iTemp42 = 0;
		var fTemp43 = 0.;
		var iTemp44 = 0;
		var fTemp45 = 0.;
		var iTemp46 = 0;
		var fTemp47 = 0.;
		var iTemp48 = 0;
		var fTemp49 = 0.;
		var iTemp50 = 0;
		var fTemp51 = 0.;
		var iTemp52 = 0;
		var fTemp53 = 0.;
		var iTemp54 = 0;
		var fTemp55 = 0.;
		var iTemp56 = 0;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fTemp62 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var fTemp69 = 0.;
		var fTemp70 = 0.;
		var fTemp71 = 0.;
		var fTemp72 = 0.;
		var fTemp73 = 0.;
		var fTemp74 = 0.;
		var fTemp75 = 0.;
		var fTemp76 = 0.;
		var fTemp77 = 0.;
		var fTemp78 = 0.;
		var fTemp79 = 0.;
		var fTemp80 = 0.;
		var fTemp81 = 0.;
		var fTemp82 = 0.;
		var fTemp83 = 0.;
		var fTemp84 = 0.;
		var fTemp85 = 0.;
		var fTemp86 = 0.;
		var fTemp87 = 0.;
		var fTemp88 = 0.;
		var fTemp89 = 0.;
		var fTemp90 = 0.;
		var fTemp91 = 0.;
		var fTemp92 = 0.;
		var fTemp93 = 0.;
		var fTemp94 = 0.;
		var fTemp95 = 0.;
		var fTemp96 = 0.;
		var fTemp97 = 0.;
		var fTemp98 = 0.;
		var fTemp99 = 0.;
		var fTemp100 = 0.;
		var fTemp101 = 0.;
		var fTemp102 = 0.;
		var fTemp103 = 0.;
		var fTemp104 = 0.;
		var fTemp105 = 0.;
		var fTemp106 = 0.;
		var fTemp107 = 0.;
		var fTemp108 = 0.;
		var fTemp109 = 0.;
		var fTemp110 = 0.;
		var fTemp111 = 0.;
		var fTemp112 = 0.;
		var fTemp113 = 0.;
		var fTemp114 = 0.;
		var fTemp115 = 0.;
		var fTemp116 = 0.;
		var fTemp117 = 0.;
		var fTemp118 = 0.;
		var fTemp119 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(0.00100000005 * +(+(HEAPF[dsp + 12 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 36 >> 2]));
		fSlow3 = +(0.100000001 * +(+(HEAPF[dsp + 40 >> 2])));
		fSlow4 = +(+(HEAPF[dsp + 44 >> 2]) * +(+(HEAPF[dsp + 48 >> 2])));
		fSlow5 = +(sinf(+(fSlow4)));
		fSlow6 = +(cosf(+(fSlow4)));
		fSlow7 = +(0. - +(fSlow5));
		fSlow8 = +(+(HEAPF[dsp + 88 >> 2]));
		fSlow9 = +(5. * +(fSlow8));
		fSlow10 = +(0.00100000005 * +(+(HEAPF[dsp + 92 >> 2])));
		fSlow11 = +(5. * +(1. - +(fSlow8)));
		iSlow12 = ((((((+(fSlow8) == 0.) | 0)?1:((((+(fSlow8) == 3.) | 0)?1:0) | 0)) | 0) == 0) | 0);
		iSlow13 = ((+(fSlow8) != 2.) | 0);
		fSlow14 = +(2. * +(fSlow2));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 16 + (1 << 2) >> 2])));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(+(fSlow5) * +(HEAPF[dsp + 60 + (1 << 2) >> 2])) + +(+(fSlow6) * +(HEAPF[dsp + 52 + (1 << 2) >> 2])));
			iTemp0 = ((1 - (HEAP32[dsp + 4 + (1 << 2) >> 2] | 0)) | 0);
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(+(+(fSlow6) * +(HEAPF[dsp + 60 + (1 << 2) >> 2])) + +(+(fSlow7) * +(HEAPF[dsp + 52 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp1 = +(max_f(1.00000001e-07, +(fabsf(+(+(fSlow2) * +(+(+(fSlow3) * +(HEAPF[dsp + 52 + (0 << 2) >> 2])) + 1.))))));
			fTemp2 = +(+(HEAPF[dsp + 68 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 32 >> 2]) * +(fTemp1)));
			fTemp3 = +(+(fTemp2) + -1.);
			iTemp4 = ((+(fTemp3) < 0.) | 0);
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +((iTemp4 | 0)?+(fTemp2):+(fTemp3));
			fRec3 = +((iTemp4 | 0)?+(fTemp2):+(+(fTemp2) + +(+(fTemp3) * +(1. - +(+(HEAPF[dsp + 28 >> 2]) / +(fTemp1))))));
			HEAP32[dsp + 76 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 76 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			fTemp5 = +(+(fSlow0) * +(+(+(1. - +(HEAPF[dsp + 16 + (0 << 2) >> 2])) * +(+(2. * +(fRec3)) + -1.)) + +(4.65661287e-10 * +(+(HEAPF[dsp + 16 + (0 << 2) >> 2]) * +((HEAP32[dsp + 76 + (0 << 2) >> 2] | 0))))));
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(+(fSlow10) + +(0.999000013 * +(HEAPF[dsp + 96 + (1 << 2) >> 2])));
			fTemp6 = +(+(fSlow9) + +(HEAPF[dsp + 96 + (0 << 2) >> 2]));
			iTemp7 = ((+(fTemp6) < 23.) | 0);
			iTemp8 = ((+(fTemp6) < 24.) | 0);
			fTemp9 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -23.));
			iTemp10 = ((+(fTemp6) < 22.) | 0);
			fTemp11 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -22.));
			iTemp12 = ((+(fTemp6) < 21.) | 0);
			fTemp13 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -21.));
			iTemp14 = ((+(fTemp6) < 20.) | 0);
			fTemp15 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -20.));
			iTemp16 = ((+(fTemp6) < 19.) | 0);
			fTemp17 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -19.));
			iTemp18 = ((+(fTemp6) < 18.) | 0);
			fTemp19 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -18.));
			iTemp20 = ((+(fTemp6) < 17.) | 0);
			fTemp21 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -17.));
			iTemp22 = ((+(fTemp6) < 16.) | 0);
			fTemp23 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -16.));
			fTemp24 = +(80. * +(fTemp23));
			iTemp25 = ((+(fTemp6) < 15.) | 0);
			fTemp26 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -15.));
			iTemp27 = ((+(fTemp6) < 14.) | 0);
			fTemp28 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -14.));
			iTemp29 = ((+(fTemp6) < 13.) | 0);
			fTemp30 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -13.));
			iTemp31 = ((+(fTemp6) < 12.) | 0);
			fTemp32 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -12.));
			iTemp33 = ((+(fTemp6) < 11.) | 0);
			fTemp34 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -11.));
			iTemp35 = ((+(fTemp6) < 10.) | 0);
			fTemp36 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -10.));
			iTemp37 = ((+(fTemp6) < 9.) | 0);
			fTemp38 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -9.));
			iTemp39 = ((+(fTemp6) < 8.) | 0);
			fTemp40 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -8.));
			fTemp41 = +(50. * +(fTemp40));
			iTemp42 = ((+(fTemp6) < 7.) | 0);
			fTemp43 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -7.));
			iTemp44 = ((+(fTemp6) < 6.) | 0);
			fTemp45 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -6.));
			iTemp46 = ((+(fTemp6) < 5.) | 0);
			fTemp47 = +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) - +(fSlow11));
			iTemp48 = ((+(fTemp6) < 4.) | 0);
			fTemp49 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -4.));
			iTemp50 = ((+(fTemp6) < 3.) | 0);
			fTemp51 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -3.));
			iTemp52 = ((+(fTemp6) < 2.) | 0);
			fTemp53 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -2.));
			iTemp54 = ((+(fTemp6) < 1.) | 0);
			fTemp55 = +(+(fSlow9) + +(+(HEAPF[dsp + 96 + (0 << 2) >> 2]) + -1.));
			iTemp56 = ((+(fTemp6) < 0.) | 0);
			fTemp57 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?800.:+((iTemp54 | 0)?+(800. - +(400. * +(fTemp6))):400.)):+((iTemp52 | 0)?+(400. - +(50. * +(fTemp55))):350.)):+((iTemp50 | 0)?+(+(100. * +(fTemp53)) + 350.):450.)):+((iTemp48 | 0)?+(450. - +(125. * +(fTemp51))):325.)):+((iTemp46 | 0)?+(+(275. * +(fTemp49)) + 325.):600.)):+((iTemp44 | 0)?+(600. - +(200. * +(fTemp47))):400.)):+((iTemp42 | 0)?+(400. - +(150. * +(fTemp45))):250.)):+((iTemp39 | 0)?+(+(150. * +(fTemp43)) + 250.):400.)):+((iTemp37 | 0)?+(400. - +(fTemp41)):350.)):+((iTemp35 | 0)?+(+(310. * +(fTemp38)) + 350.):660.)):+((iTemp33 | 0)?+(660. - +(220. * +(fTemp36))):440.)):+((iTemp31 | 0)?+(440. - +(170. * +(fTemp34))):270.)):+((iTemp29 | 0)?+(+(160. * +(fTemp32)) + 270.):430.)):+((iTemp27 | 0)?+(430. - +(60. * +(fTemp30))):370.)):+((iTemp25 | 0)?+(+(430. * +(fTemp28)) + 370.):800.)):+((iTemp22 | 0)?+(800. - +(450. * +(fTemp26))):350.)):+((iTemp20 | 0)?+(350. - +(fTemp24)):270.)):+((iTemp18 | 0)?+(+(180. * +(fTemp21)) + 270.):450.)):+((iTemp16 | 0)?+(450. - +(125. * +(fTemp19))):325.)):+((iTemp14 | 0)?+(325. * +(+(fTemp17) + 1.)):650.)):+((iTemp12 | 0)?+(650. - +(250. * +(fTemp15))):400.)):+((iTemp10 | 0)?+(400. - +(110. * +(fTemp13))):290.)):+((iTemp7 | 0)?+(+(110. * +(fTemp11)) + 290.):400.)):+((iTemp8 | 0)?+(400. - +(50. * +(fTemp9))):350.));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(fSlow5) * +(HEAPF[dsp + 112 + (1 << 2) >> 2])) + +(+(fSlow6) * +(HEAPF[dsp + 104 + (1 << 2) >> 2])));
			HEAPF[dsp + 112 + (0 << 2) >> 2] = +(+(+(+(fSlow6) * +(HEAPF[dsp + 112 + (1 << 2) >> 2])) + +(+(fSlow7) * +(HEAPF[dsp + 104 + (1 << 2) >> 2]))) + +((iTemp0 | 0)));
			fTemp58 = +(+(+(fSlow3) * +(HEAPF[dsp + 104 + (0 << 2) >> 2])) + 1.);
			fTemp59 = +(+(fSlow2) * +(fTemp58));
			fTemp60 = +(((+(fTemp57) <= +(fTemp59)) | 0)?+(fTemp59):+(fTemp57));
			fTemp61 = +(tanf(+(+(HEAPF[dsp + 84 >> 2]) * +(fTemp60))));
			fTemp62 = +(1. / +(fTemp61));
			fTemp63 = +(20. * +(fTemp15));
			fTemp64 = +(20. * +(fTemp26));
			fTemp65 = +(10. * +(fTemp36));
			fTemp66 = +(10. * +(fTemp49));
			fTemp67 = +(20. * +(fTemp51));
			fTemp68 = +(20. * +(fTemp53));
			fTemp69 = +(20. * +(fTemp6));
			fTemp70 = +(+((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?80.:+((iTemp54 | 0)?+(80. - +(fTemp69)):60.)):+((iTemp52 | 0)?+(60. - +(10. * +(fTemp55))):50.)):+((iTemp50 | 0)?+(+(fTemp68) + 50.):70.)):+((iTemp48 | 0)?+(70. - +(fTemp67)):50.)):+((iTemp46 | 0)?+(+(fTemp66) + 50.):60.)):+((iTemp44 | 0)?+(60. - +(20. * +(fTemp47))):40.)):+((iTemp42 | 0)?+(+(20. * +(fTemp45)) + 40.):60.)):+((iTemp39 | 0)?+(60. - +(20. * +(fTemp43))):40.)):40.):+((iTemp35 | 0)?+(40. * +(+(fTemp38) + 1.)):80.)):+((iTemp33 | 0)?+(80. - +(fTemp65)):70.)):+((iTemp31 | 0)?+(70. - +(30. * +(fTemp34))):40.)):40.):40.):+((iTemp25 | 0)?+(40. * +(+(fTemp28) + 1.)):80.)):+((iTemp22 | 0)?+(80. - +(fTemp64)):60.)):60.):+((iTemp18 | 0)?+(60. - +(20. * +(fTemp21))):40.)):+((iTemp16 | 0)?+(+(10. * +(fTemp19)) + 40.):50.)):50.):+((iTemp12 | 0)?+(+(fTemp63) + 50.):70.)):+((iTemp10 | 0)?+(70. - +(30. * +(fTemp13))):40.)):+((iTemp7 | 0)?+(+(30. * +(fTemp11)) + 40.):70.)):+((iTemp8 | 0)?+(70. - +(30. * +(fTemp9))):40.)) / +(fTemp60));
			fTemp71 = +(+(+(+(fTemp62) + +(fTemp70)) / +(fTemp61)) + 1.);
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +(+(fTemp5) - +(+(+(+(HEAPF[dsp + 120 + (2 << 2) >> 2]) * +(+(+(+(fTemp62) - +(fTemp70)) / +(fTemp61)) + 1.)) + +(2. * +(+(HEAPF[dsp + 120 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp61), 2.))))))) / +(fTemp71)));
			fTemp72 = +(+(0.000839999993 * +(1000. - +(fTemp59))) + 0.800000012);
			fTemp73 = +(+(0.00366666657 * +(400. - +(fTemp59))) + 3.);
			fTemp74 = +((iSlow12 | 0)?+(fTemp73):+(fTemp72));
			fTemp75 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?1150.:+((iTemp54 | 0)?+(+(450. * +(fTemp6)) + 1150.):1600.)):+((iTemp52 | 0)?+(+(100. * +(fTemp55)) + 1600.):1700.)):+((iTemp50 | 0)?+(1700. - +(900. * +(fTemp53))):800.)):+((iTemp48 | 0)?+(800. - +(100. * +(fTemp51))):700.)):+((iTemp46 | 0)?+(+(340. * +(fTemp49)) + 700.):1040.)):+((iTemp44 | 0)?+(+(580. * +(fTemp47)) + 1040.):1620.)):+((iTemp42 | 0)?+(+(130. * +(fTemp45)) + 1620.):1750.)):+((iTemp39 | 0)?+(1750. - +(1000. * +(fTemp43))):750.)):+((iTemp37 | 0)?+(750. - +(150. * +(fTemp40))):600.)):+((iTemp35 | 0)?+(+(520. * +(fTemp38)) + 600.):1120.)):+((iTemp33 | 0)?+(+(680. * +(fTemp36)) + 1120.):1800.)):+((iTemp31 | 0)?+(+(50. * +(fTemp34)) + 1800.):1850.)):+((iTemp29 | 0)?+(1850. - +(1030. * +(fTemp32))):820.)):+((iTemp27 | 0)?+(820. - +(190. * +(fTemp30))):630.)):+((iTemp25 | 0)?+(+(520. * +(fTemp28)) + 630.):1150.)):+((iTemp22 | 0)?+(+(850. * +(fTemp26)) + 1150.):2000.)):+((iTemp20 | 0)?+(+(140. * +(fTemp23)) + 2000.):2140.)):+((iTemp18 | 0)?+(2140. - +(1340. * +(fTemp21))):800.)):+((iTemp16 | 0)?+(800. - +(100. * +(fTemp19))):700.)):+((iTemp14 | 0)?+(+(380. * +(fTemp17)) + 700.):1080.)):+((iTemp12 | 0)?+(+(620. * +(fTemp15)) + 1080.):1700.)):+((iTemp10 | 0)?+(+(170. * +(fTemp13)) + 1700.):1870.)):+((iTemp7 | 0)?+(1870. - +(1070. * +(fTemp11))):800.)):+((iTemp8 | 0)?+(800. - +(200. * +(fTemp9))):600.));
			fTemp76 = +(+(+(fSlow14) * +(fTemp58)) + 30.);
			fTemp77 = +((iSlow13 | 0)?+(((((+(fTemp75) >= 1300.) | 0) & ((+(fTemp59) >= 200.) | 0)) | 0)?+(+(fTemp75) - +(0.000952380942 * +(+(+(fTemp59) + -200.) * +(+(fTemp75) + -1300.)))):+(((+(fTemp75) <= +(fTemp76)) | 0)?+(fTemp76):+(fTemp75))):+(fTemp75));
			fTemp78 = +(tanf(+(+(HEAPF[dsp + 84 >> 2]) * +(fTemp77))));
			fTemp79 = +(1. / +(fTemp78));
			fTemp80 = +(10. * +(fTemp11));
			fTemp81 = +(10. * +(fTemp15));
			fTemp82 = +(10. * +(fTemp38));
			fTemp83 = +(10. * +(fTemp47));
			fTemp84 = +(+((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?90.:+((iTemp54 | 0)?+(90. - +(10. * +(fTemp6))):80.)):+((iTemp52 | 0)?+(+(20. * +(fTemp55)) + 80.):100.)):+((iTemp50 | 0)?+(100. - +(fTemp68)):80.)):+((iTemp48 | 0)?+(80. - +(fTemp67)):60.)):+((iTemp46 | 0)?+(+(fTemp66) + 60.):70.)):+((iTemp44 | 0)?+(+(fTemp83) + 70.):80.)):+((iTemp42 | 0)?+(+(10. * +(fTemp45)) + 80.):90.)):+((iTemp39 | 0)?+(90. - +(10. * +(fTemp43))):80.)):80.):+((iTemp35 | 0)?+(+(fTemp82) + 80.):90.)):+((iTemp33 | 0)?+(90. - +(fTemp65)):80.)):+((iTemp31 | 0)?+(+(10. * +(fTemp34)) + 80.):90.)):+((iTemp29 | 0)?+(90. - +(10. * +(fTemp32))):80.)):+((iTemp27 | 0)?+(80. - +(20. * +(fTemp30))):60.)):+((iTemp25 | 0)?+(+(30. * +(fTemp28)) + 60.):90.)):+((iTemp22 | 0)?+(+(10. * +(fTemp26)) + 90.):100.)):+((iTemp20 | 0)?+(100. - +(10. * +(fTemp23))):90.)):+((iTemp18 | 0)?+(90. - +(10. * +(fTemp21))):80.)):+((iTemp16 | 0)?+(80. - +(20. * +(fTemp19))):60.)):+((iTemp14 | 0)?+(+(30. * +(fTemp17)) + 60.):90.)):+((iTemp12 | 0)?+(90. - +(fTemp81)):80.)):+((iTemp10 | 0)?+(+(10. * +(fTemp13)) + 80.):90.)):+((iTemp7 | 0)?+(90. - +(fTemp80)):80.)):+((iTemp8 | 0)?+(80. - +(20. * +(fTemp9))):60.)) / +(fTemp77));
			fTemp85 = +(+(+(+(fTemp79) + +(fTemp84)) / +(fTemp78)) + 1.);
			HEAPF[dsp + 132 + (0 << 2) >> 2] = +(+(fTemp5) - +(+(+(+(HEAPF[dsp + 132 + (2 << 2) >> 2]) * +(+(+(+(fTemp79) - +(fTemp84)) / +(fTemp78)) + 1.)) + +(2. * +(+(HEAPF[dsp + 132 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp78), 2.))))))) / +(fTemp85)));
			fTemp86 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?0.630957007:+((iTemp54 | 0)?+(0.630957007 - +(0.567861021 * +(fTemp6))):0.0630960017)):+((iTemp52 | 0)?+(+(0.0369039997 * +(fTemp55)) + 0.0630960017):0.100000001)):+((iTemp50 | 0)?+(+(0.254812986 * +(fTemp53)) + 0.100000001):0.35481301)):+((iTemp48 | 0)?+(0.35481301 - +(0.103624001 * +(fTemp51))):0.251188993)):+((iTemp46 | 0)?+(+(0.195494995 * +(fTemp49)) + 0.251188993):0.446684003)):+((iTemp44 | 0)?+(0.446684003 - +(0.195494995 * +(fTemp47))):0.251188993)):+((iTemp42 | 0)?+(0.251188993 - +(0.219566002 * +(fTemp45))):0.0316229984)):+((iTemp39 | 0)?+(+(0.250214994 * +(fTemp43)) + 0.0316229984):0.281838)):+((iTemp37 | 0)?+(0.281838 - +(0.181838006 * +(fTemp40))):0.100000001)):+((iTemp35 | 0)?+(+(0.401187003 * +(fTemp38)) + 0.100000001):0.501187027)):+((iTemp33 | 0)?+(0.501187027 - +(0.301661015 * +(fTemp36))):0.199525997)):+((iTemp31 | 0)?+(0.199525997 - +(0.136429995 * +(fTemp34))):0.0630960017)):+((iTemp29 | 0)?+(+(0.253131986 * +(fTemp32)) + 0.0630960017):0.316228002)):+((iTemp27 | 0)?+(0.316228002 - +(0.216227993 * +(fTemp30))):0.100000001)):+((iTemp25 | 0)?+(+(0.401187003 * +(fTemp28)) + 0.100000001):0.501187027)):+((iTemp22 | 0)?+(0.501187027 - +(0.401187003 * +(fTemp26))):0.100000001)):+((iTemp20 | 0)?+(+(0.151188999 * +(fTemp23)) + 0.100000001):0.251188993)):+((iTemp18 | 0)?+(+(0.0306490008 * +(fTemp21)) + 0.251188993):0.281838)):+((iTemp16 | 0)?+(0.281838 - +(0.123349003 * +(fTemp19))):0.158489004)):+((iTemp14 | 0)?+(+(0.342698008 * +(fTemp17)) + 0.158489004):0.501187027)):+((iTemp12 | 0)?+(0.501187027 - +(0.301661015 * +(fTemp15))):0.199525997)):+((iTemp10 | 0)?+(0.199525997 - +(0.0216979999 * +(fTemp13))):0.177827999)):+((iTemp7 | 0)?+(+(0.138400003 * +(fTemp11)) + 0.177827999):0.316228002)):+((iTemp8 | 0)?+(0.316228002 - +(0.216227993 * +(fTemp9))):0.100000001));
			fTemp87 = +((iSlow12 | 0)?+(+(fTemp73) * +(fTemp86)):+(+(fTemp72) * +(fTemp86)));
			fTemp88 = +(100. * +(fTemp9));
			fTemp89 = +(50. * +(fTemp17));
			fTemp90 = +(50. * +(fTemp36));
			fTemp91 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?2800.:+((iTemp54 | 0)?+(2800. - +(100. * +(fTemp6))):2700.)):2700.):+((iTemp50 | 0)?+(+(130. * +(fTemp53)) + 2700.):2830.)):+((iTemp48 | 0)?+(2830. - +(300. * +(fTemp51))):2530.)):+((iTemp46 | 0)?+(2530. - +(280. * +(fTemp49))):2250.)):+((iTemp44 | 0)?+(+(150. * +(fTemp47)) + 2250.):2400.)):+((iTemp42 | 0)?+(+(200. * +(fTemp45)) + 2400.):2600.)):+((iTemp39 | 0)?+(2600. - +(200. * +(fTemp43))):2400.)):2400.):+((iTemp35 | 0)?+(+(350. * +(fTemp38)) + 2400.):2750.)):+((iTemp33 | 0)?+(2750. - +(fTemp90)):2700.)):+((iTemp31 | 0)?+(+(200. * +(fTemp34)) + 2700.):2900.)):+((iTemp29 | 0)?+(2900. - +(200. * +(fTemp32))):2700.)):+((iTemp27 | 0)?+(+(50. * +(fTemp30)) + 2700.):2750.)):+((iTemp25 | 0)?+(+(150. * +(fTemp28)) + 2750.):2900.)):+((iTemp22 | 0)?+(2900. - +(100. * +(fTemp26))):2800.)):+((iTemp20 | 0)?+(+(150. * +(fTemp23)) + 2800.):2950.)):+((iTemp18 | 0)?+(2950. - +(120. * +(fTemp21))):2830.)):+((iTemp16 | 0)?+(2830. - +(130. * +(fTemp19))):2700.)):+((iTemp14 | 0)?+(2700. - +(fTemp89)):2650.)):+((iTemp12 | 0)?+(2650. - +(50. * +(fTemp15))):2600.)):+((iTemp10 | 0)?+(+(200. * +(fTemp13)) + 2600.):2800.)):+((iTemp7 | 0)?+(2800. - +(200. * +(fTemp11))):2600.)):+((iTemp8 | 0)?+(+(fTemp88) + 2600.):2700.));
			fTemp92 = +(tanf(+(+(HEAPF[dsp + 84 >> 2]) * +(fTemp91))));
			fTemp93 = +(1. / +(fTemp92));
			fTemp94 = +(20. * +(fTemp28));
			fTemp95 = +(20. * +(fTemp36));
			fTemp96 = +(20. * +(fTemp38));
			fTemp97 = +(60. * +(fTemp49));
			fTemp98 = +(+((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?120.:+((iTemp50 | 0)?+(120. - +(fTemp68)):100.)):+((iTemp48 | 0)?+(+(70. * +(fTemp51)) + 100.):170.)):+((iTemp46 | 0)?+(170. - +(fTemp97)):110.)):+((iTemp44 | 0)?+(110. - +(fTemp83)):100.)):100.):100.):100.):+((iTemp35 | 0)?+(+(fTemp96) + 100.):120.)):+((iTemp33 | 0)?+(120. - +(fTemp95)):100.)):100.):100.):100.):+((iTemp25 | 0)?+(+(fTemp94) + 100.):120.)):120.):+((iTemp20 | 0)?+(120. - +(20. * +(fTemp23))):100.)):100.):+((iTemp16 | 0)?+(+(70. * +(fTemp19)) + 100.):170.)):+((iTemp14 | 0)?+(170. - +(fTemp89)):120.)):+((iTemp12 | 0)?+(120. - +(fTemp63)):100.)):100.):100.):100.) / +(fTemp91));
			fTemp99 = +(+(+(+(fTemp93) + +(fTemp98)) / +(fTemp92)) + 1.);
			HEAPF[dsp + 144 + (0 << 2) >> 2] = +(+(fTemp5) - +(+(+(+(HEAPF[dsp + 144 + (2 << 2) >> 2]) * +(+(+(+(fTemp93) - +(fTemp98)) / +(fTemp92)) + 1.)) + +(2. * +(+(HEAPF[dsp + 144 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp92), 2.))))))) / +(fTemp99)));
			fTemp100 = +((iTemp18 | 0)?+(+(0.0293140002 * +(fTemp21)) + 0.0501190014):0.0794330016);
			fTemp101 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?0.100000001:+((iTemp54 | 0)?+(0.100000001 - +(0.0683770031 * +(fTemp6))):0.0316229984)):0.0316229984):+((iTemp50 | 0)?+(+(0.126865998 * +(fTemp53)) + 0.0316229984):0.158489004)):+((iTemp48 | 0)?+(0.158489004 - +(0.126865998 * +(fTemp51))):0.0316229984)):+((iTemp46 | 0)?+(+(0.323190004 * +(fTemp49)) + 0.0316229984):0.35481301)):0.35481301):+((iTemp42 | 0)?+(0.35481301 - +(0.196324006 * +(fTemp45))):0.158489004)):+((iTemp39 | 0)?+(0.158489004 - +(0.0693639964 * +(fTemp43))):0.0891249999)):+((iTemp37 | 0)?+(0.0891249999 - +(0.0640060008 * +(fTemp40))):0.0251189992)):+((iTemp35 | 0)?+(+(0.0456760004 * +(fTemp38)) + 0.0251189992):0.0707949996)):+((iTemp33 | 0)?+(+(0.0550980009 * +(fTemp36)) + 0.0707949996):0.125892997)):+((iTemp31 | 0)?+(0.125892997 - +(0.0627970025 * +(fTemp34))):0.0630960017)):+((iTemp29 | 0)?+(0.0630960017 - +(0.0129770003 * +(fTemp32))):0.0501190014)):+((iTemp27 | 0)?+(+(0.020676 * +(fTemp30)) + 0.0501190014):0.0707949996)):+((iTemp25 | 0)?+(0.0707949996 - +(0.0456760004 * +(fTemp28))):0.0251189992)):+((iTemp22 | 0)?+(+(0.152709007 * +(fTemp26)) + 0.0251189992):0.177827999)):+((iTemp20 | 0)?+(0.177827999 - +(0.127709001 * +(fTemp23))):0.0501190014)):+(fTemp100)):+((iTemp16 | 0)?+(0.0794330016 - +(0.0616500005 * +(fTemp19))):0.0177829992)):+((iTemp14 | 0)?+(+(0.428900987 * +(fTemp17)) + 0.0177829992):0.446684003)):+((iTemp12 | 0)?+(0.446684003 - +(0.195494995 * +(fTemp15))):0.251188993)):+((iTemp10 | 0)?+(0.251188993 - +(0.125295997 * +(fTemp13))):0.125892997)):+((iTemp7 | 0)?+(+(0.125295997 * +(fTemp11)) + 0.125892997):0.251188993)):+((iTemp8 | 0)?+(0.251188993 - +(0.109935001 * +(fTemp9))):0.141253993));
			fTemp102 = +((iSlow12 | 0)?+(+(fTemp73) * +(fTemp101)):+(+(fTemp72) * +(fTemp101)));
			fTemp103 = +(350. * +(fTemp47));
			fTemp104 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?3500.:+((iTemp54 | 0)?+(3500. - +(200. * +(fTemp6))):3300.)):+((iTemp52 | 0)?+(+(400. * +(fTemp55)) + 3300.):3700.)):+((iTemp50 | 0)?+(3700. - +(200. * +(fTemp53))):3500.)):3500.):+((iTemp46 | 0)?+(3500. - +(1050. * +(fTemp49))):2450.)):+((iTemp44 | 0)?+(+(fTemp103) + 2450.):2800.)):+((iTemp42 | 0)?+(+(250. * +(fTemp45)) + 2800.):3050.)):+((iTemp39 | 0)?+(3050. - +(450. * +(fTemp43))):2600.)):+((iTemp37 | 0)?+(+(75. * +(fTemp40)) + 2600.):2675.)):+((iTemp35 | 0)?+(+(325. * +(fTemp38)) + 2675.):3000.)):3000.):+((iTemp31 | 0)?+(+(350. * +(fTemp34)) + 3000.):3350.)):+((iTemp29 | 0)?+(3350. - +(350. * +(fTemp32))):3000.)):3000.):+((iTemp25 | 0)?+(+(900. * +(fTemp28)) + 3000.):3900.)):+((iTemp22 | 0)?+(3900. - +(300. * +(fTemp26))):3600.)):+((iTemp20 | 0)?+(+(300. * +(fTemp23)) + 3600.):3900.)):+((iTemp18 | 0)?+(3900. - +(100. * +(fTemp21))):3800.)):3800.):+((iTemp14 | 0)?+(3800. - +(900. * +(fTemp17))):2900.)):+((iTemp12 | 0)?+(+(300. * +(fTemp15)) + 2900.):3200.)):+((iTemp10 | 0)?+(+(50. * +(fTemp13)) + 3200.):3250.)):+((iTemp7 | 0)?+(3250. - +(450. * +(fTemp11))):2800.)):+((iTemp8 | 0)?+(+(fTemp88) + 2800.):2900.));
			fTemp105 = +(tanf(+(+(HEAPF[dsp + 84 >> 2]) * +(fTemp104))));
			fTemp106 = +(1. / +(fTemp105));
			fTemp107 = +(+((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?130.:+((iTemp54 | 0)?+(+(fTemp69) + 130.):150.)):150.):+((iTemp50 | 0)?+(150. - +(fTemp68)):130.)):+((iTemp48 | 0)?+(+(50. * +(fTemp51)) + 130.):180.)):+((iTemp46 | 0)?+(180. - +(fTemp97)):120.)):120.):120.):120.):120.):+((iTemp35 | 0)?+(+(fTemp82) + 120.):130.)):+((iTemp33 | 0)?+(130. - +(fTemp65)):120.)):120.):120.):120.):+((iTemp25 | 0)?+(+(10. * +(fTemp28)) + 120.):130.)):+((iTemp22 | 0)?+(+(fTemp64) + 130.):150.)):+((iTemp20 | 0)?+(150. - +(30. * +(fTemp23))):120.)):120.):+((iTemp16 | 0)?+(+(60. * +(fTemp19)) + 120.):180.)):+((iTemp14 | 0)?+(180. - +(fTemp89)):130.)):+((iTemp12 | 0)?+(130. - +(fTemp81)):120.)):120.):+((iTemp7 | 0)?+(+(fTemp80) + 120.):130.)):+((iTemp8 | 0)?+(130. - +(10. * +(fTemp9))):120.)) / +(fTemp104));
			fTemp108 = +(+(+(+(fTemp106) + +(fTemp107)) / +(fTemp105)) + 1.);
			HEAPF[dsp + 156 + (0 << 2) >> 2] = +(+(fTemp5) - +(+(+(+(HEAPF[dsp + 156 + (2 << 2) >> 2]) * +(+(+(+(fTemp106) - +(fTemp107)) / +(fTemp105)) + 1.)) + +(2. * +(+(HEAPF[dsp + 156 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp105), 2.))))))) / +(fTemp108)));
			fTemp109 = +((iTemp31 | 0)?+(0.100000001 - +(0.0841509998 * +(fTemp34))):0.0158489998);
			fTemp110 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?0.0158489998:+((iTemp54 | 0)?+(+(0.00193400006 * +(fTemp6)) + 0.0158489998):0.0177829992)):+((iTemp52 | 0)?+(0.0177829992 - +(0.00193400006 * +(fTemp55))):0.0158489998)):+((iTemp50 | 0)?+(+(0.0239620004 * +(fTemp53)) + 0.0158489998):0.0398110002)):+((iTemp48 | 0)?+(0.0398110002 - +(0.0298110005 * +(fTemp51))):0.00999999978)):+((iTemp46 | 0)?+(+(0.344812989 * +(fTemp49)) + 0.00999999978):0.35481301)):+((iTemp44 | 0)?+(0.35481301 - +(0.103624001 * +(fTemp47))):0.251188993)):+((iTemp42 | 0)?+(0.251188993 - +(0.171755999 * +(fTemp45))):0.0794330016)):+((iTemp39 | 0)?+(+(0.0205669999 * +(fTemp43)) + 0.0794330016):0.100000001)):+((iTemp37 | 0)?+(0.100000001 - +(0.0601890013 * +(fTemp40))):0.0398110002)):+((iTemp35 | 0)?+(+(0.0232849997 * +(fTemp38)) + 0.0398110002):0.0630960017)):+((iTemp33 | 0)?+(+(0.0369039997 * +(fTemp36)) + 0.0630960017):0.100000001)):+(fTemp109)):+((iTemp29 | 0)?+(+(0.0635839999 * +(fTemp32)) + 0.0158489998):0.0794330016)):+((iTemp27 | 0)?+(0.0794330016 - +(0.0478099994 * +(fTemp30))):0.0316229984)):+((iTemp25 | 0)?+(+(0.0683770031 * +(fTemp28)) + 0.0316229984):0.100000001)):+((iTemp22 | 0)?+(0.100000001 - +(0.0900000036 * +(fTemp26))):0.00999999978)):+((iTemp20 | 0)?+(+(0.0401189998 * +(fTemp23)) + 0.00999999978):0.0501190014)):+(fTemp100)):+((iTemp16 | 0)?+(0.0794330016 - +(0.0694330037 * +(fTemp19))):0.00999999978)):+((iTemp14 | 0)?+(+(0.388107002 * +(fTemp17)) + 0.00999999978):0.398106992)):+((iTemp12 | 0)?+(0.398106992 - +(0.198580995 * +(fTemp15))):0.199525997)):+((iTemp10 | 0)?+(0.199525997 - +(0.099526003 * +(fTemp13))):0.100000001)):+((iTemp7 | 0)?+(+(0.151188999 * +(fTemp11)) + 0.100000001):0.251188993)):+((iTemp8 | 0)?+(0.251188993 - +(0.0516630001 * +(fTemp9))):0.199525997));
			fTemp111 = +((iSlow12 | 0)?+(+(fTemp73) * +(fTemp110)):+(+(fTemp72) * +(fTemp110)));
			fTemp112 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?4950.:+((iTemp46 | 0)?+(4950. - +(2200. * +(fTemp49))):2750.)):+((iTemp44 | 0)?+(+(fTemp103) + 2750.):3100.)):+((iTemp42 | 0)?+(+(240. * +(fTemp45)) + 3100.):3340.)):+((iTemp39 | 0)?+(3340. - +(440. * +(fTemp43))):2900.)):+((iTemp37 | 0)?+(+(fTemp41) + 2900.):2950.)):+((iTemp35 | 0)?+(+(400. * +(fTemp38)) + 2950.):3350.)):+((iTemp33 | 0)?+(3350. - +(fTemp90)):3300.)):+((iTemp31 | 0)?+(+(290. * +(fTemp34)) + 3300.):3590.)):+((iTemp29 | 0)?+(3590. - +(290. * +(fTemp32))):3300.)):+((iTemp27 | 0)?+(+(100. * +(fTemp30)) + 3300.):3400.)):+((iTemp25 | 0)?+(+(1550. * +(fTemp28)) + 3400.):4950.)):4950.):4950.):4950.):4950.):+((iTemp14 | 0)?+(4950. - +(1700. * +(fTemp17))):3250.)):+((iTemp12 | 0)?+(+(330. * +(fTemp15)) + 3250.):3580.)):+((iTemp10 | 0)?+(3580. - +(40. * +(fTemp13))):3540.)):+((iTemp7 | 0)?+(3540. - +(540. * +(fTemp11))):3000.)):+((iTemp8 | 0)?+(+(300. * +(fTemp9)) + 3000.):3300.));
			fTemp113 = +(tanf(+(+(HEAPF[dsp + 84 >> 2]) * +(fTemp112))));
			fTemp114 = +(1. / +(fTemp113));
			fTemp115 = +(+((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?+((iTemp54 | 0)?+((iTemp56 | 0)?140.:+((iTemp54 | 0)?+(+(60. * +(fTemp6)) + 140.):200.)):200.):+((iTemp50 | 0)?+(200. - +(65. * +(fTemp53))):135.)):+((iTemp48 | 0)?+(+(65. * +(fTemp51)) + 135.):200.)):+((iTemp46 | 0)?+(200. - +(70. * +(fTemp49))):130.)):+((iTemp44 | 0)?+(130. - +(fTemp83)):120.)):120.):120.):120.):+((iTemp35 | 0)?+(+(fTemp96) + 120.):140.)):+((iTemp33 | 0)?+(140. - +(fTemp95)):120.)):120.):120.):120.):+((iTemp25 | 0)?+(+(fTemp94) + 120.):140.)):+((iTemp22 | 0)?+(+(60. * +(fTemp26)) + 140.):200.)):+((iTemp20 | 0)?+(200. - +(fTemp24)):120.)):120.):+((iTemp16 | 0)?+(+(80. * +(fTemp19)) + 120.):200.)):+((iTemp14 | 0)?+(200. - +(60. * +(fTemp17))):140.)):+((iTemp12 | 0)?+(140. - +(fTemp63)):120.)):120.):+((iTemp7 | 0)?+(+(15. * +(fTemp11)) + 120.):135.)):+((iTemp8 | 0)?+(135. - +(15. * +(fTemp9))):120.)) / +(fTemp112));
			fTemp116 = +(+(+(+(fTemp114) + +(fTemp115)) / +(fTemp113)) + 1.);
			HEAPF[dsp + 168 + (0 << 2) >> 2] = +(+(fTemp5) - +(+(+(+(HEAPF[dsp + 168 + (2 << 2) >> 2]) * +(+(+(+(fTemp114) - +(fTemp115)) / +(fTemp113)) + 1.)) + +(2. * +(+(HEAPF[dsp + 168 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp113), 2.))))))) / +(fTemp116)));
			fTemp117 = +((iTemp7 | 0)?+((iTemp10 | 0)?+((iTemp12 | 0)?+((iTemp14 | 0)?+((iTemp16 | 0)?+((iTemp18 | 0)?+((iTemp20 | 0)?+((iTemp22 | 0)?+((iTemp25 | 0)?+((iTemp27 | 0)?+((iTemp29 | 0)?+((iTemp31 | 0)?+((iTemp33 | 0)?+((iTemp35 | 0)?+((iTemp37 | 0)?+((iTemp39 | 0)?+((iTemp42 | 0)?+((iTemp44 | 0)?+((iTemp46 | 0)?+((iTemp48 | 0)?+((iTemp50 | 0)?+((iTemp52 | 0)?0.00100000005:+((iTemp50 | 0)?+(+(0.000777999987 * +(fTemp53)) + 0.00100000005):0.00177800003)):+((iTemp48 | 0)?+(0.00177800003 - +(0.001147 * +(fTemp51))):0.000630999974)):+((iTemp46 | 0)?+(+(0.0993689969 * +(fTemp49)) + 0.000630999974):0.100000001)):+((iTemp44 | 0)?+(+(0.0258930009 * +(fTemp47)) + 0.100000001):0.125892997)):+((iTemp42 | 0)?+(0.125892997 - +(0.0860819966 * +(fTemp45))):0.0398110002)):+((iTemp39 | 0)?+(0.0398110002 - +(0.0298110005 * +(fTemp43))):0.00999999978)):+((iTemp37 | 0)?+(+(0.00584900007 * +(fTemp40)) + 0.00999999978):0.0158489998)):+((iTemp35 | 0)?+(0.0158489998 - +(0.00325999991 * +(fTemp38))):0.0125890002)):+((iTemp33 | 0)?+(+(0.0874110013 * +(fTemp36)) + 0.0125890002):0.100000001)):+(fTemp109)):+((iTemp29 | 0)?+(+(0.00410400005 * +(fTemp32)) + 0.0158489998):0.0199529994)):0.0199529994):+((iTemp25 | 0)?+(0.0199529994 - +(0.0167909991 * +(fTemp28))):0.0031620001)):+((iTemp22 | 0)?+(0.0031620001 - +(0.00157700002 * +(fTemp26))):0.00158499996)):+((iTemp20 | 0)?+(+(0.00472499989 * +(fTemp23)) + 0.00158499996):0.00631000008)):+((iTemp18 | 0)?+(0.00631000008 - +(0.00314799999 * +(fTemp21))):0.0031620001)):+((iTemp16 | 0)?+(0.0031620001 - +(0.00216199993 * +(fTemp19))):0.00100000005)):+((iTemp14 | 0)?+(+(0.0784329996 * +(fTemp17)) + 0.00100000005):0.0794330016)):+((iTemp12 | 0)?+(+(0.0205669999 * +(fTemp15)) + 0.0794330016):0.100000001)):+((iTemp10 | 0)?+(0.100000001 - +(0.0683770031 * +(fTemp13))):0.0316229984)):+((iTemp7 | 0)?+(+(0.0184959993 * +(fTemp11)) + 0.0316229984):0.0501190014)):0.0501190014);
			fTemp118 = +((iSlow12 | 0)?+(+(fTemp73) * +(fTemp117)):+(+(fTemp72) * +(fTemp117)));
			fTemp119 = +(+(+(+(+(+(+(+(HEAPF[dsp + 120 + (2 << 2) >> 2]) * +(0. - +(+(fTemp74) / +(fTemp61)))) + +(+(+(HEAPF[dsp + 120 + (0 << 2) >> 2]) * +(fTemp74)) / +(fTemp61))) / +(fTemp71)) + +(+(+(+(HEAPF[dsp + 132 + (2 << 2) >> 2]) * +(0. - +(+(fTemp87) / +(fTemp78)))) + +(+(+(HEAPF[dsp + 132 + (0 << 2) >> 2]) * +(fTemp87)) / +(fTemp78))) / +(fTemp85))) + +(+(+(+(HEAPF[dsp + 144 + (2 << 2) >> 2]) * +(0. - +(+(fTemp102) / +(fTemp92)))) + +(+(+(HEAPF[dsp + 144 + (0 << 2) >> 2]) * +(fTemp102)) / +(fTemp92))) / +(fTemp99))) + +(+(+(+(HEAPF[dsp + 156 + (2 << 2) >> 2]) * +(0. - +(+(fTemp111) / +(fTemp105)))) + +(+(+(HEAPF[dsp + 156 + (0 << 2) >> 2]) * +(fTemp111)) / +(fTemp105))) / +(fTemp108))) + +(+(+(+(HEAPF[dsp + 168 + (2 << 2) >> 2]) * +(0. - +(+(fTemp118) / +(fTemp113)))) + +(+(+(HEAPF[dsp + 168 + (0 << 2) >> 2]) * +(fTemp118)) / +(fTemp113))) / +(fTemp116)));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp119));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp119));
			HEAP32[dsp + 4 + (1 << 2) >> 2] = (HEAP32[dsp + 4 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAP32[dsp + 76 + (1 << 2) >> 2] = (HEAP32[dsp + 76 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 112 + (1 << 2) >> 2] = +(HEAPF[dsp + 112 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (2 << 2) >> 2] = +(HEAPF[dsp + 120 + (1 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			HEAPF[dsp + 132 + (2 << 2) >> 2] = +(HEAPF[dsp + 132 + (1 << 2) >> 2]);
			HEAPF[dsp + 132 + (1 << 2) >> 2] = +(HEAPF[dsp + 132 + (0 << 2) >> 2]);
			HEAPF[dsp + 144 + (2 << 2) >> 2] = +(HEAPF[dsp + 144 + (1 << 2) >> 2]);
			HEAPF[dsp + 144 + (1 << 2) >> 2] = +(HEAPF[dsp + 144 + (0 << 2) >> 2]);
			HEAPF[dsp + 156 + (2 << 2) >> 2] = +(HEAPF[dsp + 156 + (1 << 2) >> 2]);
			HEAPF[dsp + 156 + (1 << 2) >> 2] = +(HEAPF[dsp + 156 + (0 << 2) >> 2]);
			HEAPF[dsp + 168 + (2 << 2) >> 2] = +(HEAPF[dsp + 168 + (1 << 2) >> 2]);
			HEAPF[dsp + 168 + (1 << 2) >> 2] = +(HEAPF[dsp + 168 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 180;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/vocal/gain"] = 0;
	pathTable["/vocal/fricative"] = 12;
	pathTable["/vocal/freq"] = 36;
	pathTable["/vocal/vibratoGain"] = 40;
	pathTable["/vocal/vibratoFreq"] = 48;
	pathTable["/vocal/voiceType"] = 88;
	pathTable["/vocal/vowel"] = 92;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"Vocal BandPass\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"description\":\"Simple source-filter vocal synthesizer.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Vocal BandPass\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"vocal\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/vocal/freq\",\"meta\":[{\"0\":\"\"}],\"init\":\"440\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/vocal/gain\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.9\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"voiceType\",\"address\":\"/vocal/voiceType\",\"meta\":[{\"2\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"4\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"vowel\",\"address\":\"/vocal/vowel\",\"meta\":[{\"3\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"4\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"fricative\",\"address\":\"/vocal/fricative\",\"meta\":[{\"4\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoFreq\",\"address\":\"/vocal/vibratoFreq\",\"meta\":[{\"5\":\"\"}],\"init\":\"6\",\"min\":\"1\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoGain\",\"address\":\"/vocal/vibratoGain\",\"meta\":[{\"6\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
	m.declare("description", "Simple source-filter vocal synthesizer.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "Vocal BandPass");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

