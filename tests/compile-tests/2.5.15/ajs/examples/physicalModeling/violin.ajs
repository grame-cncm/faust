/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "Violin"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var fabsf = foreign.abs;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 16 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 12 >> 2] | 0))))));
		HEAPF[dsp + 20 >> 2] = +(tanf(+(1570.79639 / +(HEAPF[dsp + 16 >> 2]))));
		HEAPF[dsp + 24 >> 2] = +(1. / +(HEAPF[dsp + 20 >> 2]));
		HEAPF[dsp + 28 >> 2] = +(1. / +(+(+(+(HEAPF[dsp + 24 >> 2]) + 0.5) / +(HEAPF[dsp + 20 >> 2])) + 1.));
		HEAPF[dsp + 32 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 36 >> 2] = +(0.00147058826 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 24724 >> 2] = +(+(+(+(HEAPF[dsp + 24 >> 2]) + -0.5) / +(HEAPF[dsp + 20 >> 2])) + 1.);
		HEAPF[dsp + 24728 >> 2] = +(2. * +(1. - +(1. / +(powf(+(HEAPF[dsp + 20 >> 2]), 2.)))));
		HEAPF[dsp + 24744 >> 2] = +(0. - +(HEAPF[dsp + 24 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 40 >> 2] = 0.699999988;
		HEAPF[dsp + 52 >> 2] = 0.75;
		HEAPF[dsp + 72 >> 2] = 0.;
		HEAPF[dsp + 8304 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 44 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 76 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 4) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 84 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 100 >> 2] = 0;
		for (l6 = 0; (((l6 | 0) < 2048) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 8296 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 8308 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2048) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 8316 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2048) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 16508 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 24700 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 4) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 24708 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 3) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 24732 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAP32[dsp + 24748 + ((l14 | 0) << 2) >> 2] = 0;
			
		}
		for (l15 = 0; (((l15 | 0) < 2048) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 24756 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 32948 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 12 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var i = 0;
		var iRec11 = 0;
		var fRec15 = 0.;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var iTemp3 = 0;
		var iTemp4 = 0;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var iTemp15 = 0;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var iTemp18 = 0;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var iTemp23 = 0;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var iTemp26 = 0;
		var iRec31 = 0;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var iTemp29 = 0;
		var iTemp30 = 0;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var iTemp41 = 0;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var iTemp44 = 0;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var iTemp49 = 0;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var iTemp52 = 0;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var fRec23 = 0.;
		var fTemp55 = 0.;
		var fRec24 = 0.;
		var iRec25 = 0;
		var fRec19 = 0.;
		var iRec21 = 0;
		var iRec17 = 0;
		var fTemp56 = 0.;
		var fRec12 = 0.;
		var fRec13 = 0.;
		var fRec7 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec3 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec1 = 0.;
		var fTemp57 = 0.;
		var j0 = 3;
		var j1 = 3;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(0.00100000005 * +(+(HEAPF[dsp + 40 >> 2])));
		fSlow2 = +(0.00100000005 * +(+(HEAPF[dsp + 52 >> 2])));
		fSlow3 = +(0.00100000005 * +(+(HEAPF[dsp + 72 >> 2])));
		fSlow4 = +(0.00100000005 * +(+(HEAPF[dsp + 8304 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + (0 << 2) >> 2] = 0;
			iRec11 = (HEAP32[dsp + 4 + (1 << 2) >> 2] | 0);
			fRec15 = +(+((HEAP32[dsp + 24748 + (1 << 2) >> 2] | 0)) - +(0.989264667 * +(+(0.600000024 * +(HEAPF[dsp + 24708 + (2 << 2) >> 2])) + +(0.200000003 * +(+(HEAPF[dsp + 24708 + (1 << 2) >> 2]) + +(HEAPF[dsp + 24708 + (3 << 2) >> 2]))))));
			HEAPF[dsp + 44 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 44 + (1 << 2) >> 2])));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(+(fSlow2) + +(0.999000013 * +(HEAPF[dsp + 56 + (1 << 2) >> 2])));
			fTemp0 = +(+(HEAPF[dsp + 56 + (0 << 2) >> 2]) + -0.0799999982);
			fTemp1 = +(+(HEAPF[dsp + 36 >> 2]) * +(+(1. - +(HEAPF[dsp + 44 + (0 << 2) >> 2])) * +(fTemp0)));
			fTemp2 = +(+(fTemp1) + -1.49999499);
			iTemp3 = ~~(+(fTemp2));
			iTemp4 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (iTemp3 | 0))) | 0)))));
			fTemp5 = +(floorf(+(fTemp2)));
			fTemp6 = +(+(fTemp1) + +(-1. - +(fTemp5)));
			fTemp7 = +(0. - +(fTemp6));
			fTemp8 = +(+(fTemp1) + +(-2. - +(fTemp5)));
			fTemp9 = +(0. - +(0.5 * +(fTemp8)));
			fTemp10 = +(+(fTemp1) + +(-3. - +(fTemp5)));
			fTemp11 = +(0. - +(0.333333343 * +(fTemp10)));
			fTemp12 = +(+(fTemp1) + +(-4. - +(fTemp5)));
			fTemp13 = +(0. - +(0.25 * +(fTemp12)));
			fTemp14 = +(+(fTemp1) - +(fTemp5));
			iTemp15 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp3 | 0) + 2) | 0))) | 0)))));
			fTemp16 = +(0. - +(fTemp10));
			fTemp17 = +(0. - +(0.5 * +(fTemp12)));
			iTemp18 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp3 | 0) + 1) | 0))) | 0)))));
			fTemp19 = +(0. - +(fTemp8));
			fTemp20 = +(0. - +(0.5 * +(fTemp10)));
			fTemp21 = +(0. - +(0.333333343 * +(fTemp12)));
			fTemp22 = +(+(fTemp6) * +(fTemp8));
			iTemp23 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp3 | 0) + 3) | 0))) | 0)))));
			fTemp24 = +(0. - +(fTemp12));
			fTemp25 = +(+(fTemp22) * +(fTemp10));
			iTemp26 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp3 | 0) + 4) | 0))) | 0)))));
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 24756 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp4 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp7)) * +(fTemp9)) * +(fTemp11)) * +(fTemp13)) + +(+(fTemp14) * +(+(+(+(0.5 * +(+(+(+(fTemp6) * +(HEAPF[dsp + 24756 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp15 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp16)) * +(fTemp17))) + +(+(+(+(HEAPF[dsp + 24756 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp18 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp19)) * +(fTemp20)) * +(fTemp21))) + +(0.166666672 * +(+(+(fTemp22) * +(HEAPF[dsp + 24756 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp23 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp24)))) + +(0.0416666679 * +(+(fTemp25) * +(HEAPF[dsp + 24756 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp26 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 76 + (0 << 2) >> 2] = +(+(fSlow3) + +(0.999000013 * +(HEAPF[dsp + 76 + (1 << 2) >> 2])));
			HEAPF[dsp + 84 + (0 << 2) >> 2] = +(HEAPF[dsp + 32948 + (1 << 2) >> 2]);
			HEAPF[dsp + 104 + ((((HEAP32[dsp + 100 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(0. - +(0.99880147 * +(+(0.800000012 * +(HEAPF[dsp + 84 + (2 << 2) >> 2])) + +(0.100000001 * +(+(HEAPF[dsp + 84 + (1 << 2) >> 2]) + +(HEAPF[dsp + 84 + (3 << 2) >> 2]))))));
			iRec31 = 0;
			fTemp27 = +(+(HEAPF[dsp + 36 >> 2]) * +(+(HEAPF[dsp + 44 + (0 << 2) >> 2]) * +(fTemp0)));
			fTemp28 = +(+(fTemp27) + -1.49999499);
			iTemp29 = ~~(+(fTemp28));
			iTemp30 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (iTemp29 | 0))) | 0)))));
			fTemp31 = +(floorf(+(fTemp28)));
			fTemp32 = +(+(fTemp27) + +(-1. - +(fTemp31)));
			fTemp33 = +(0. - +(fTemp32));
			fTemp34 = +(+(fTemp27) + +(-2. - +(fTemp31)));
			fTemp35 = +(0. - +(0.5 * +(fTemp34)));
			fTemp36 = +(+(fTemp27) + +(-3. - +(fTemp31)));
			fTemp37 = +(0. - +(0.333333343 * +(fTemp36)));
			fTemp38 = +(+(fTemp27) + +(-4. - +(fTemp31)));
			fTemp39 = +(0. - +(0.25 * +(fTemp38)));
			fTemp40 = +(+(fTemp27) - +(fTemp31));
			iTemp41 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp29 | 0) + 2) | 0))) | 0)))));
			fTemp42 = +(0. - +(fTemp36));
			fTemp43 = +(0. - +(0.5 * +(fTemp38)));
			iTemp44 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp29 | 0) + 1) | 0))) | 0)))));
			fTemp45 = +(0. - +(fTemp34));
			fTemp46 = +(0. - +(0.5 * +(fTemp36)));
			fTemp47 = +(0. - +(0.333333343 * +(fTemp38)));
			fTemp48 = +(+(fTemp32) * +(fTemp34));
			iTemp49 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp29 | 0) + 3) | 0))) | 0)))));
			fTemp50 = +(0. - +(fTemp38));
			fTemp51 = +(+(fTemp48) * +(fTemp36));
			iTemp52 = ~~(+(min_f(+(HEAPF[dsp + 32 >> 2]), +(((max_i(0, (((iTemp29 | 0) + 4) | 0))) | 0)))));
			HEAPF[dsp + 8296 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 104 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp30 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp33)) * +(fTemp35)) * +(fTemp37)) * +(fTemp39)) + +(+(fTemp40) * +(+(+(+(0.5 * +(+(+(+(fTemp32) * +(HEAPF[dsp + 104 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp41 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp42)) * +(fTemp43))) + +(+(+(+(HEAPF[dsp + 104 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp44 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp45)) * +(fTemp46)) * +(fTemp47))) + +(0.166666672 * +(+(+(fTemp48) * +(HEAPF[dsp + 104 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp49 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp50)))) + +(0.0416666679 * +(+(fTemp51) * +(HEAPF[dsp + 104 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp52 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fTemp53 = +(+(HEAPF[dsp + 76 + (0 << 2) >> 2]) - +(+(HEAPF[dsp + 64 + (1 << 2) >> 2]) + +(HEAPF[dsp + 8296 + (1 << 2) >> 2])));
			HEAPF[dsp + 8308 + (0 << 2) >> 2] = +(+(fSlow4) + +(0.999000013 * +(HEAPF[dsp + 8308 + (1 << 2) >> 2])));
			fTemp54 = +(+(fTemp53) * +(min_f(1., +(1. / +(powf(+(+(fabsf(+(+(5. - +(4. * +(HEAPF[dsp + 8308 + (0 << 2) >> 2]))) * +(fTemp53)))) + 0.75), 4.))))));
			fRec23 = +(+(HEAPF[dsp + 64 + (1 << 2) >> 2]) + +(fTemp54));
			fTemp55 = +(+(HEAPF[dsp + 8296 + (1 << 2) >> 2]) + +(fTemp54));
			HEAPF[dsp + 8316 + ((((HEAP32[dsp + 100 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp55);
			fRec24 = +(+(+(+(+(+(fTemp7) * +(fTemp9)) * +(fTemp11)) * +(fTemp13)) * +(HEAPF[dsp + 8316 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (iTemp4 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp14) * +(+(0.0416666679 * +(+(fTemp25) * +(HEAPF[dsp + 8316 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (iTemp26 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(+(fTemp19) * +(fTemp20)) * +(fTemp21)) * +(HEAPF[dsp + 8316 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (iTemp18 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp6) * +(fTemp16)) * +(fTemp17)) * +(HEAPF[dsp + 8316 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (iTemp15 | 0)) | 0) & 2047) | 0) << 2) >> 2])))) + +(0.166666672 * +(+(+(fTemp22) * +(fTemp24)) * +(HEAPF[dsp + 8316 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (iTemp23 | 0)) | 0) & 2047) | 0) << 2) >> 2])))))));
			iRec25 = (iRec31 | 0);
			HEAPF[dsp + 16508 + ((((HEAP32[dsp + 100 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec23);
			fRec19 = +(+(+(+(+(+(fTemp33) * +(fTemp35)) * +(fTemp37)) * +(fTemp39)) * +(HEAPF[dsp + 16508 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp30 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp40) * +(+(+(0.166666672 * +(+(+(fTemp48) * +(fTemp50)) * +(HEAPF[dsp + 16508 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp49 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp45) * +(fTemp46)) * +(fTemp47)) * +(HEAPF[dsp + 16508 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp44 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp32) * +(fTemp42)) * +(fTemp43)) * +(HEAPF[dsp + 16508 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp41 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp51) * +(HEAPF[dsp + 16508 + ((((((HEAP32[dsp + 100 >> 2] | 0) - (((iTemp52 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 24700 + (0 << 2) >> 2] = +(fRec24);
			iRec21 = (iRec25 | 0);
			HEAPF[dsp + 24708 + (0 << 2) >> 2] = +(HEAPF[dsp + 24700 + (1 << 2) >> 2]);
			iRec17 = (iRec21 | 0);
			HEAPF[dsp + 24732 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 24708 + (1 << 2) >> 2]) - +(+(HEAPF[dsp + 28 >> 2]) * +(+(+(HEAPF[dsp + 24724 >> 2]) * +(HEAPF[dsp + 24732 + (2 << 2) >> 2])) + +(+(HEAPF[dsp + 24728 >> 2]) * +(HEAPF[dsp + 24732 + (1 << 2) >> 2])))));
			fTemp56 = +(+(HEAPF[dsp + 28 >> 2]) * +(+(+(HEAPF[dsp + 24 >> 2]) * +(HEAPF[dsp + 24732 + (0 << 2) >> 2])) + +(+(HEAPF[dsp + 24744 >> 2]) * +(HEAPF[dsp + 24732 + (2 << 2) >> 2]))));
			fRec12 = +(fTemp56);
			fRec13 = +(+((iRec17 | 0)) + +(fTemp56));
			HEAP32[dsp + 24748 + (0 << 2) >> 2] = (iRec11 | 0);
			fRec7 = +(fRec15);
			fRec8 = +(fRec12);
			fRec9 = +(fRec13);
			HEAPF[dsp + 24756 + ((((HEAP32[dsp + 100 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec7);
			fRec3 = +(fRec19);
			fRec4 = +(fRec8);
			fRec5 = +(fRec9);
			HEAPF[dsp + 32948 + (0 << 2) >> 2] = +(fRec3);
			fRec1 = +(fRec5);
			fTemp57 = +(+(fSlow0) * +(fRec1));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp57));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp57));
			HEAP32[dsp + 4 + (1 << 2) >> 2] = (HEAP32[dsp + 4 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 44 + (1 << 2) >> 2] = +(HEAPF[dsp + 44 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 + (1 << 2) >> 2] = +(HEAPF[dsp + 76 + (0 << 2) >> 2]);
			for (j0 = 3; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF[dsp + 84 + ((j0 | 0) << 2) >> 2] = +(HEAPF[dsp + 84 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAP32[dsp + 100 >> 2] = (((HEAP32[dsp + 100 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8296 + (1 << 2) >> 2] = +(HEAPF[dsp + 8296 + (0 << 2) >> 2]);
			HEAPF[dsp + 8308 + (1 << 2) >> 2] = +(HEAPF[dsp + 8308 + (0 << 2) >> 2]);
			HEAPF[dsp + 24700 + (1 << 2) >> 2] = +(HEAPF[dsp + 24700 + (0 << 2) >> 2]);
			for (j1 = 3; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF[dsp + 24708 + ((j1 | 0) << 2) >> 2] = +(HEAPF[dsp + 24708 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAPF[dsp + 24732 + (2 << 2) >> 2] = +(HEAPF[dsp + 24732 + (1 << 2) >> 2]);
			HEAPF[dsp + 24732 + (1 << 2) >> 2] = +(HEAPF[dsp + 24732 + (0 << 2) >> 2]);
			HEAP32[dsp + 24748 + (1 << 2) >> 2] = (HEAP32[dsp + 24748 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 32948 + (1 << 2) >> 2] = +(HEAPF[dsp + 32948 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 32956;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/violin/outGain"] = 0;
	pathTable["/violin/bow/position"] = 40;
	pathTable["/violin/string/length"] = 52;
	pathTable["/violin/bow/velocity"] = 72;
	pathTable["/violin/bow/pressure"] = 8304;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"Violin\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple violin physical model controlled with continuous parameters.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Violin\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"violin\",\"items\":[{\"type\":\"vgroup\",\"label\":\"string\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"length\",\"address\":\"/violin/string/length\",\"meta\":[{\"0\":\"\"}],\"init\":\"0.75\",\"min\":\"0\",\"max\":\"2\",\"step\":\"0.01\"}]},{\"type\":\"vgroup\",\"label\":\"bow\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"velocity\",\"address\":\"/violin/bow/velocity\",\"meta\":[{\"0\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"pressure\",\"address\":\"/violin/bow/pressure\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"position\",\"address\":\"/violin/bow/position\",\"meta\":[{\"2\":\"\"}],\"init\":\"0.7\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"hslider\",\"label\":\"outGain\",\"address\":\"/violin/outGain\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Simple violin physical model controlled with continuous parameters.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "Violin");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

