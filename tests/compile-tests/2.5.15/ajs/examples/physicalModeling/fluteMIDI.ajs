/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "FluteMIDI"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 32 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 36 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 32 >> 2] | 0))))));
		HEAPF[dsp + 40 >> 2] = +(6.28318548 / +(HEAPF[dsp + 36 >> 2]));
		HEAPF[dsp + 84 >> 2] = +(1000. / +(HEAPF[dsp + 36 >> 2]));
		HEAPF[dsp + 100 >> 2] = +(tanf(+(6283.18555 / +(HEAPF[dsp + 36 >> 2]))));
		HEAPF[dsp + 104 >> 2] = +(1. / +(HEAPF[dsp + 100 >> 2]));
		HEAPF[dsp + 108 >> 2] = +(+(+(+(HEAPF[dsp + 104 >> 2]) + 1.41421354) / +(HEAPF[dsp + 100 >> 2])) + 1.);
		HEAPF[dsp + 112 >> 2] = +(0.0500000007 / +(HEAPF[dsp + 108 >> 2]));
		HEAPF[dsp + 124 >> 2] = +(1. / +(HEAPF[dsp + 108 >> 2]));
		HEAPF[dsp + 128 >> 2] = +(2. * +(1. - +(1. / +(powf(+(HEAPF[dsp + 100 >> 2]), 2.)))));
		HEAPF[dsp + 132 >> 2] = +(+(+(+(HEAPF[dsp + 104 >> 2]) + -1.41421354) / +(HEAPF[dsp + 100 >> 2])) + 1.);
		HEAPF[dsp + 8352 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 36 >> 2]));
		HEAPF[dsp + 8356 >> 2] = +(0.00147058826 * +(HEAPF[dsp + 36 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 28 >> 2] = 0.5;
		HEAPF[dsp + 44 >> 2] = 5.;
		HEAPF[dsp + 64 >> 2] = 0.;
		HEAPF[dsp + 68 >> 2] = 0.;
		HEAPF[dsp + 80 >> 2] = 0.899999976;
		HEAPF[dsp + 88 >> 2] = 1.;
		HEAPF[dsp + 8360 >> 2] = 440.;
		HEAPF[dsp + 8364 >> 2] = 1.;
		HEAPF[dsp + 8376 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAP32[dsp + 12 + ((l1 | 0) << 2) >> 2] = 0;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 92 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAP32[dsp + 116 + ((l7 | 0) << 2) >> 2] = 0;
			
		}
		for (l8 = 0; (((l8 | 0) < 3) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 136 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 148 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 156 >> 2] = 0;
		for (l10 = 0; (((l10 | 0) < 2048) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 160 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 8368 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 8380 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 8388 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2048) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 8396 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 16588 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 16596 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2048) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 16604 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 24796 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2048) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 24804 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 32996 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 33004 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 33012 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 32 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var iSlow11 = 0;
		var fSlow12 = 0.;
		var i = 0;
		var fRec19 = 0.;
		var iRec30 = 0;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var iTemp5 = 0;
		var iTemp6 = 0;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var iTemp17 = 0;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var iTemp20 = 0;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var iTemp25 = 0;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var iTemp28 = 0;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var iTemp33 = 0;
		var iTemp34 = 0;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var iTemp45 = 0;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var iTemp48 = 0;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var iTemp53 = 0;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var iTemp56 = 0;
		var iRec21 = 0;
		var fRec16 = 0.;
		var fRec17 = 0.;
		var fRec18 = 0.;
		var fRec12 = 0.;
		var fRec13 = 0.;
		var fRec14 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec10 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec6 = 0.;
		var fTemp57 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(0.0399999991 * +(+(HEAPF[dsp + 28 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 40 >> 2]) * +(+(HEAPF[dsp + 44 >> 2])));
		fSlow3 = +(sinf(+(fSlow2)));
		fSlow4 = +(cosf(+(fSlow2)));
		fSlow5 = +(0. - +(fSlow3));
		fSlow6 = +(min_f(1., +(+(+(HEAPF[dsp + 64 >> 2])) + +(+(HEAPF[dsp + 68 >> 2])))));
		fSlow7 = +(expf(+(0. - +(+(HEAPF[dsp + 84 >> 2]) / +(+(HEAPF[dsp + 88 >> 2]))))));
		fSlow8 = +(+(+(fSlow6) * +(+(HEAPF[dsp + 80 >> 2]))) * +(1. - +(fSlow7)));
		fSlow9 = +(340. / +(+(HEAPF[dsp + 8360 >> 2])));
		fSlow10 = +(+(HEAPF[dsp + 8364 >> 2]));
		iSlow11 = ((+(fSlow6) == 0.) | 0);
		fSlow12 = +(0.00100000005 * +(+(HEAPF[dsp + 8376 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + (0 << 2) >> 2] = 0;
			HEAP32[dsp + 12 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(+(0.699999988 * +(HEAPF[dsp + 20 + (1 << 2) >> 2])) + +(0.284999996 * +(HEAPF[dsp + 16596 + (1 << 2) >> 2])));
			fRec19 = +(+(HEAPF[dsp + 20 + (0 << 2) >> 2]) + +((HEAP32[dsp + 4 + (1 << 2) >> 2] | 0)));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 56 + (1 << 2) >> 2])) + +(+(fSlow4) * +(HEAPF[dsp + 48 + (1 << 2) >> 2])));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(+(+(+(fSlow4) * +(HEAPF[dsp + 56 + (1 << 2) >> 2])) + +(+(fSlow5) * +(HEAPF[dsp + 48 + (1 << 2) >> 2]))) + +(((1 - (HEAP32[dsp + 12 + (1 << 2) >> 2] | 0)) | 0)));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(fSlow6);
			HEAPF[dsp + 92 + (0 << 2) >> 2] = +(+(fSlow8) + +(+(fSlow7) * +(HEAPF[dsp + 92 + (1 << 2) >> 2])));
			HEAP32[dsp + 116 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 116 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 136 + (0 << 2) >> 2] = +(+(4.65661287e-10 * +((HEAP32[dsp + 116 + (0 << 2) >> 2] | 0))) - +(+(HEAPF[dsp + 124 >> 2]) * +(+(+(HEAPF[dsp + 128 >> 2]) * +(HEAPF[dsp + 136 + (1 << 2) >> 2])) + +(+(HEAPF[dsp + 132 >> 2]) * +(HEAPF[dsp + 136 + (2 << 2) >> 2])))));
			HEAPF[dsp + 148 + (0 << 2) >> 2] = +(HEAPF[dsp + 32996 + (1 << 2) >> 2]);
			HEAPF[dsp + 160 + ((((HEAP32[dsp + 156 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(0.949999988 * +(HEAPF[dsp + 148 + (1 << 2) >> 2]));
			iRec30 = 0;
			iTemp0 = ((((+(fSlow6) == +(HEAPF[dsp + 72 + (1 << 2) >> 2])) | 0) | (iSlow11 | 0)) | 0);
			HEAPF[dsp + 8368 + (0 << 2) >> 2] = +(+(+(fSlow10) * +(1. - +(0.999000013 * +((iTemp0 | 0))))) + +(0.999000013 * +(+((iTemp0 | 0)) * +(HEAPF[dsp + 8368 + (1 << 2) >> 2]))));
			fTemp1 = +(+(+(fSlow9) / +(HEAPF[dsp + 8368 + (0 << 2) >> 2])) + 0.270000011);
			HEAPF[dsp + 8380 + (0 << 2) >> 2] = +(+(fSlow12) + +(0.999000013 * +(HEAPF[dsp + 8380 + (1 << 2) >> 2])));
			fTemp2 = +(0.400000006 * +(+(HEAPF[dsp + 8380 + (0 << 2) >> 2]) + -0.5));
			fTemp3 = +(+(HEAPF[dsp + 8356 >> 2]) * +(+(fTemp1) * +(+(fTemp2) + 0.270000011)));
			fTemp4 = +(+(fTemp3) + -1.49999499);
			iTemp5 = ~~(+(fTemp4));
			iTemp6 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((iTemp5 | 0)))) | 0))))) + 1) | 0);
			fTemp7 = +(floorf(+(fTemp4)));
			fTemp8 = +(+(fTemp3) + +(-1. - +(fTemp7)));
			fTemp9 = +(0. - +(fTemp8));
			fTemp10 = +(+(fTemp3) + +(-2. - +(fTemp7)));
			fTemp11 = +(0. - +(0.5 * +(fTemp10)));
			fTemp12 = +(+(fTemp3) + +(-3. - +(fTemp7)));
			fTemp13 = +(0. - +(0.333333343 * +(fTemp12)));
			fTemp14 = +(+(fTemp3) + +(-4. - +(fTemp7)));
			fTemp15 = +(0. - +(0.25 * +(fTemp14)));
			fTemp16 = +(+(fTemp3) - +(fTemp7));
			iTemp17 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 2) | 0)))) | 0))))) + 1) | 0);
			fTemp18 = +(0. - +(fTemp12));
			fTemp19 = +(0. - +(0.5 * +(fTemp14)));
			iTemp20 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 1) | 0)))) | 0))))) + 1) | 0);
			fTemp21 = +(0. - +(fTemp10));
			fTemp22 = +(0. - +(0.5 * +(fTemp12)));
			fTemp23 = +(0. - +(0.333333343 * +(fTemp14)));
			fTemp24 = +(+(fTemp8) * +(fTemp10));
			iTemp25 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 3) | 0)))) | 0))))) + 1) | 0);
			fTemp26 = +(0. - +(fTemp14));
			fTemp27 = +(+(fTemp24) * +(fTemp12));
			iTemp28 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp5 | 0) + 4) | 0)))) | 0))))) + 1) | 0);
			HEAPF[dsp + 8388 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 160 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp6 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp9)) * +(fTemp11)) * +(fTemp13)) * +(fTemp15)) + +(+(fTemp16) * +(+(+(+(0.5 * +(+(+(+(fTemp8) * +(HEAPF[dsp + 160 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp17 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp18)) * +(fTemp19))) + +(+(+(+(HEAPF[dsp + 160 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp20 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp21)) * +(fTemp22)) * +(fTemp23))) + +(0.166666672 * +(+(+(fTemp24) * +(HEAPF[dsp + 160 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp25 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp26)))) + +(0.0416666679 * +(+(fTemp27) * +(HEAPF[dsp + 160 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp28 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fTemp29 = +(+(+(+(fSlow1) * +(HEAPF[dsp + 48 + (0 << 2) >> 2])) + +(+(HEAPF[dsp + 92 + (0 << 2) >> 2]) * +(+(+(HEAPF[dsp + 112 >> 2]) * +(+(HEAPF[dsp + 136 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 136 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 136 + (1 << 2) >> 2]))))) + 1.))) - +(0.5 * +(HEAPF[dsp + 8388 + (1 << 2) >> 2])));
			fTemp30 = +(+(0.5 * +(HEAPF[dsp + 24796 + (1 << 2) >> 2])) + +(max_f(-1., +(min_f(1., +(+(fTemp29) * +(+(powf(+(fTemp29), 2.)) + -1.)))))));
			HEAPF[dsp + 8396 + ((((HEAP32[dsp + 156 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fTemp30);
			fTemp31 = +(+(HEAPF[dsp + 8356 >> 2]) * +(+(fTemp1) * +(0.730000019 - +(fTemp2))));
			fTemp32 = +(+(fTemp31) + -1.49999499);
			iTemp33 = ~~(+(fTemp32));
			iTemp34 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((iTemp33 | 0)))) | 0))))) + 1) | 0);
			fTemp35 = +(floorf(+(fTemp32)));
			fTemp36 = +(+(fTemp31) + +(-1. - +(fTemp35)));
			fTemp37 = +(0. - +(fTemp36));
			fTemp38 = +(+(fTemp31) + +(-2. - +(fTemp35)));
			fTemp39 = +(0. - +(0.5 * +(fTemp38)));
			fTemp40 = +(+(fTemp31) + +(-3. - +(fTemp35)));
			fTemp41 = +(0. - +(0.333333343 * +(fTemp40)));
			fTemp42 = +(+(fTemp31) + +(-4. - +(fTemp35)));
			fTemp43 = +(0. - +(0.25 * +(fTemp42)));
			fTemp44 = +(+(fTemp31) - +(fTemp35));
			iTemp45 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp33 | 0) + 2) | 0)))) | 0))))) + 1) | 0);
			fTemp46 = +(0. - +(fTemp40));
			fTemp47 = +(0. - +(0.5 * +(fTemp42)));
			iTemp48 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp33 | 0) + 1) | 0)))) | 0))))) + 1) | 0);
			fTemp49 = +(0. - +(fTemp38));
			fTemp50 = +(0. - +(0.5 * +(fTemp40)));
			fTemp51 = +(0. - +(0.333333343 * +(fTemp42)));
			fTemp52 = +(+(fTemp36) * +(fTemp38));
			iTemp53 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp33 | 0) + 3) | 0)))) | 0))))) + 1) | 0);
			fTemp54 = +(0. - +(fTemp42));
			fTemp55 = +(+(fTemp52) * +(fTemp40));
			iTemp56 = ((~~(+(min_f(+(HEAPF[dsp + 8352 >> 2]), +(((max_i(0, ~~((((iTemp33 | 0) + 4) | 0)))) | 0))))) + 1) | 0);
			HEAPF[dsp + 16588 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 8396 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp34 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp37)) * +(fTemp39)) * +(fTemp41)) * +(fTemp43)) + +(+(fTemp44) * +(+(+(+(0.5 * +(+(+(+(fTemp36) * +(HEAPF[dsp + 8396 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp45 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp46)) * +(fTemp47))) + +(+(+(+(HEAPF[dsp + 8396 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp48 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp49)) * +(fTemp50)) * +(fTemp51))) + +(0.166666672 * +(+(+(fTemp52) * +(HEAPF[dsp + 8396 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp53 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp54)))) + +(0.0416666679 * +(+(fTemp55) * +(HEAPF[dsp + 8396 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp56 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 16596 + (0 << 2) >> 2] = +(HEAPF[dsp + 16588 + (1 << 2) >> 2]);
			iRec21 = (iRec30 | 0);
			fRec16 = +(fRec19);
			fRec17 = +(HEAPF[dsp + 16596 + (0 << 2) >> 2]);
			fRec18 = +(+(HEAPF[dsp + 16596 + (0 << 2) >> 2]) + +((iRec21 | 0)));
			HEAPF[dsp + 16604 + ((((HEAP32[dsp + 156 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec16);
			fRec12 = +(+(+(+(+(+(fTemp37) * +(fTemp39)) * +(fTemp41)) * +(fTemp43)) * +(HEAPF[dsp + 16604 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp34 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp44) * +(+(+(0.166666672 * +(+(+(fTemp52) * +(fTemp54)) * +(HEAPF[dsp + 16604 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp53 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp49) * +(fTemp50)) * +(fTemp51)) * +(HEAPF[dsp + 16604 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp48 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp36) * +(fTemp46)) * +(fTemp47)) * +(HEAPF[dsp + 16604 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp45 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp55) * +(HEAPF[dsp + 16604 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp56 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fRec13 = +(fRec17);
			fRec14 = +(fRec18);
			HEAPF[dsp + 24796 + (0 << 2) >> 2] = +(fRec12);
			fRec8 = +(HEAPF[dsp + 24796 + (1 << 2) >> 2]);
			fRec9 = +(fRec13);
			fRec10 = +(fRec14);
			HEAPF[dsp + 24804 + ((((HEAP32[dsp + 156 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec8);
			fRec4 = +(+(+(+(+(+(fTemp9) * +(fTemp11)) * +(fTemp13)) * +(fTemp15)) * +(HEAPF[dsp + 24804 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp6 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp16) * +(+(+(0.166666672 * +(+(+(fTemp24) * +(fTemp26)) * +(HEAPF[dsp + 24804 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp25 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp21) * +(fTemp22)) * +(fTemp23)) * +(HEAPF[dsp + 24804 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp20 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp8) * +(fTemp18)) * +(fTemp19)) * +(HEAPF[dsp + 24804 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp17 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp27) * +(HEAPF[dsp + 24804 + ((((((HEAP32[dsp + 156 >> 2] | 0) - (iTemp28 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fRec5 = +(fRec9);
			fRec6 = +(fRec10);
			HEAPF[dsp + 32996 + (0 << 2) >> 2] = +(fRec4);
			HEAPF[dsp + 33004 + (0 << 2) >> 2] = +(fRec6);
			HEAPF[dsp + 33012 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 33004 + (0 << 2) >> 2]) + +(0.995000005 * +(HEAPF[dsp + 33012 + (1 << 2) >> 2]))) - +(HEAPF[dsp + 33004 + (1 << 2) >> 2]));
			fTemp57 = +(+(fSlow0) * +(HEAPF[dsp + 33012 + (0 << 2) >> 2]));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp57));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp57));
			HEAP32[dsp + 4 + (1 << 2) >> 2] = (HEAP32[dsp + 4 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 12 + (1 << 2) >> 2] = (HEAP32[dsp + 12 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 92 + (1 << 2) >> 2] = +(HEAPF[dsp + 92 + (0 << 2) >> 2]);
			HEAP32[dsp + 116 + (1 << 2) >> 2] = (HEAP32[dsp + 116 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 136 + (2 << 2) >> 2] = +(HEAPF[dsp + 136 + (1 << 2) >> 2]);
			HEAPF[dsp + 136 + (1 << 2) >> 2] = +(HEAPF[dsp + 136 + (0 << 2) >> 2]);
			HEAPF[dsp + 148 + (1 << 2) >> 2] = +(HEAPF[dsp + 148 + (0 << 2) >> 2]);
			HEAP32[dsp + 156 >> 2] = (((HEAP32[dsp + 156 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8368 + (1 << 2) >> 2] = +(HEAPF[dsp + 8368 + (0 << 2) >> 2]);
			HEAPF[dsp + 8380 + (1 << 2) >> 2] = +(HEAPF[dsp + 8380 + (0 << 2) >> 2]);
			HEAPF[dsp + 8388 + (1 << 2) >> 2] = +(HEAPF[dsp + 8388 + (0 << 2) >> 2]);
			HEAPF[dsp + 16588 + (1 << 2) >> 2] = +(HEAPF[dsp + 16588 + (0 << 2) >> 2]);
			HEAPF[dsp + 16596 + (1 << 2) >> 2] = +(HEAPF[dsp + 16596 + (0 << 2) >> 2]);
			HEAPF[dsp + 24796 + (1 << 2) >> 2] = +(HEAPF[dsp + 24796 + (0 << 2) >> 2]);
			HEAPF[dsp + 32996 + (1 << 2) >> 2] = +(HEAPF[dsp + 32996 + (0 << 2) >> 2]);
			HEAPF[dsp + 33004 + (1 << 2) >> 2] = +(HEAPF[dsp + 33004 + (0 << 2) >> 2]);
			HEAPF[dsp + 33012 + (1 << 2) >> 2] = +(HEAPF[dsp + 33012 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 33020;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/flute/gate"] = 64;
	pathTable["/flute/otherParams/outGain"] = 0;
	pathTable["/flute/otherParams/vibratoGain"] = 28;
	pathTable["/flute/otherParams/vibratoFreq"] = 44;
	pathTable["/flute/midi/sustain"] = 68;
	pathTable["/flute/midi/gain"] = 80;
	pathTable["/flute/midi/envAttack"] = 88;
	pathTable["/flute/midi/freq"] = 8360;
	pathTable["/flute/midi/bend"] = 8364;
	pathTable["/flute/otherParams/mouthPosition"] = 8376;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"FluteMIDI\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple MIDI-controllable flute physical model with physical parameters.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"FluteMIDI\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"flute\",\"items\":[{\"type\":\"hgroup\",\"label\":\"midi\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/flute/midi/freq\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"}],\"init\":\"440\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/flute/midi/bend\",\"meta\":[{\"1\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"pitchwheel\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/flute/midi/gain\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.9\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"envAttack\",\"address\":\"/flute/midi/envAttack\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"30\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/flute/midi/sustain\",\"meta\":[{\"4\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"ctrl 64\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"}]},{\"type\":\"hgroup\",\"label\":\"otherParams\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"mouthPosition\",\"address\":\"/flute/otherParams/mouthPosition\",\"meta\":[{\"0\":\"\"},{\"midi\":\"ctrl 1\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoFreq\",\"address\":\"/flute/otherParams/vibratoFreq\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"}],\"init\":\"5\",\"min\":\"1\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"vibratoGain\",\"address\":\"/flute/otherParams/vibratoGain\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"outGain\",\"address\":\"/flute/otherParams/outGain\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/flute/gate\",\"meta\":[{\"2\":\"\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Simple MIDI-controllable flute physical model with physical parameters.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "FluteMIDI");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

