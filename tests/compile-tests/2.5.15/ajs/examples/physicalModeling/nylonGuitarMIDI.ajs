/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "NylonGuitarMidi"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 16 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 12 >> 2] | 0))))));
		HEAPF[dsp + 20 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 24 >> 2] = +(0.00147058826 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 8320 >> 2] = +(15.707963 / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 8336 >> 2] = +(0.00400000019 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 8356 >> 2] = +(0.00200000009 * +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 8360 >> 2] = +(500. / +(HEAPF[dsp + 16 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 28 >> 2] = 0.800000012;
		HEAPF[dsp + 40 >> 2] = 440.;
		HEAPF[dsp + 44 >> 2] = 1.;
		HEAPF[dsp + 48 >> 2] = 0.;
		HEAPF[dsp + 52 >> 2] = 0.;
		HEAPF[dsp + 8308 >> 2] = 0.800000012;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 32 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 56 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 4) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 104 >> 2] = 0;
		for (l7 = 0; (((l7 | 0) < 2048) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 108 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 8300 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAP32[dsp + 8312 + ((l9 | 0) << 2) >> 2] = 0;
			
		}
		for (l10 = 0; (((l10 | 0) < 3) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 8324 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 8340 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 8348 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 8364 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2048) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 8372 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 16564 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2048) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 16572 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 24764 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 4) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 24772 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAP32[dsp + 24788 + ((l19 | 0) << 2) >> 2] = 0;
			
		}
		for (l20 = 0; (((l20 | 0) < 2048) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 24796 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 32988 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 12 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var iSlow6 = 0;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var i = 0;
		var iRec11 = 0;
		var fRec14 = 0.;
		var iTemp0 = 0;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var iTemp4 = 0;
		var iTemp5 = 0;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var iTemp16 = 0;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var iTemp19 = 0;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var iTemp24 = 0;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var iTemp27 = 0;
		var fRec26 = 0.;
		var iRec35 = 0;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var iTemp30 = 0;
		var iTemp31 = 0;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var iTemp42 = 0;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var iTemp45 = 0;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var iTemp50 = 0;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var iTemp53 = 0;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var iTemp60 = 0;
		var fTemp61 = 0.;
		var fRec27 = 0.;
		var iRec28 = 0;
		var fRec22 = 0.;
		var fRec23 = 0.;
		var iRec24 = 0;
		var fRec18 = 0.;
		var iRec20 = 0;
		var iRec16 = 0;
		var fRec12 = 0.;
		var fRec13 = 0.;
		var fRec7 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec3 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec1 = 0.;
		var fTemp62 = 0.;
		var j0 = 3;
		var j1 = 3;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(0.00100000005 * +(+(HEAPF[dsp + 28 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 40 >> 2]));
		fSlow3 = +(340. / +(fSlow2));
		fSlow4 = +(+(HEAPF[dsp + 44 >> 2]));
		fSlow5 = +(min_f(1., +(+(+(HEAPF[dsp + 48 >> 2])) + +(+(HEAPF[dsp + 52 >> 2])))));
		iSlow6 = ((+(fSlow5) == 0.) | 0);
		fSlow7 = +(+(HEAPF[dsp + 8308 >> 2]));
		fSlow8 = +(+(HEAPF[dsp + 8320 >> 2]) * +(fSlow2));
		fSlow9 = +(0.00033333333 * +(fSlow2));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + (0 << 2) >> 2] = 0;
			iRec11 = (HEAP32[dsp + 4 + (1 << 2) >> 2] | 0);
			fRec14 = +(+((HEAP32[dsp + 24788 + (1 << 2) >> 2] | 0)) - +(0.997843683 * +(+(0.699999988 * +(HEAPF[dsp + 24772 + (2 << 2) >> 2])) + +(0.150000006 * +(+(HEAPF[dsp + 24772 + (1 << 2) >> 2]) + +(HEAPF[dsp + 24772 + (3 << 2) >> 2]))))));
			HEAPF[dsp + 32 + (0 << 2) >> 2] = +(+(fSlow1) + +(0.999000013 * +(HEAPF[dsp + 32 + (1 << 2) >> 2])));
			HEAPF[dsp + 56 + (0 << 2) >> 2] = +(fSlow5);
			iTemp0 = ((((+(fSlow5) == +(HEAPF[dsp + 56 + (1 << 2) >> 2])) | 0) | (iSlow6 | 0)) | 0);
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(+(fSlow4) * +(1. - +(0.999000013 * +((iTemp0 | 0))))) + +(0.999000013 * +(+((iTemp0 | 0)) * +(HEAPF[dsp + 64 + (1 << 2) >> 2]))));
			fTemp1 = +(+(+(fSlow3) / +(HEAPF[dsp + 64 + (0 << 2) >> 2])) + -0.109999999);
			fTemp2 = +(+(HEAPF[dsp + 24 >> 2]) * +(+(1. - +(HEAPF[dsp + 32 + (0 << 2) >> 2])) * +(fTemp1)));
			fTemp3 = +(+(fTemp2) + -1.49999499);
			iTemp4 = ~~(+(fTemp3));
			iTemp5 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((iTemp4 | 0)))) | 0)))));
			fTemp6 = +(floorf(+(fTemp3)));
			fTemp7 = +(+(fTemp2) + +(-1. - +(fTemp6)));
			fTemp8 = +(0. - +(fTemp7));
			fTemp9 = +(+(fTemp2) + +(-2. - +(fTemp6)));
			fTemp10 = +(0. - +(0.5 * +(fTemp9)));
			fTemp11 = +(+(fTemp2) + +(-3. - +(fTemp6)));
			fTemp12 = +(0. - +(0.333333343 * +(fTemp11)));
			fTemp13 = +(+(fTemp2) + +(-4. - +(fTemp6)));
			fTemp14 = +(0. - +(0.25 * +(fTemp13)));
			fTemp15 = +(+(fTemp2) - +(fTemp6));
			iTemp16 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp4 | 0) + 2) | 0)))) | 0)))));
			fTemp17 = +(0. - +(fTemp11));
			fTemp18 = +(0. - +(0.5 * +(fTemp13)));
			iTemp19 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp4 | 0) + 1) | 0)))) | 0)))));
			fTemp20 = +(0. - +(fTemp9));
			fTemp21 = +(0. - +(0.5 * +(fTemp11)));
			fTemp22 = +(0. - +(0.333333343 * +(fTemp13)));
			fTemp23 = +(+(fTemp7) * +(fTemp9));
			iTemp24 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp4 | 0) + 3) | 0)))) | 0)))));
			fTemp25 = +(0. - +(fTemp13));
			fTemp26 = +(+(fTemp23) * +(fTemp11));
			iTemp27 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp4 | 0) + 4) | 0)))) | 0)))));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 24796 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp5 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp8)) * +(fTemp10)) * +(fTemp12)) * +(fTemp14)) + +(+(fTemp15) * +(+(+(+(0.5 * +(+(+(+(fTemp7) * +(HEAPF[dsp + 24796 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp16 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp17)) * +(fTemp18))) + +(+(+(+(HEAPF[dsp + 24796 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp19 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp20)) * +(fTemp21)) * +(fTemp22))) + +(0.166666672 * +(+(+(fTemp23) * +(HEAPF[dsp + 24796 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp24 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp25)))) + +(0.0416666679 * +(+(fTemp26) * +(HEAPF[dsp + 24796 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp27 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(0.400000006 * +(HEAPF[dsp + 80 + (1 << 2) >> 2])) + +(0.600000024 * +(HEAPF[dsp + 72 + (1 << 2) >> 2])));
			fRec26 = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(HEAPF[dsp + 32988 + (1 << 2) >> 2]);
			HEAPF[dsp + 108 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(0. - +(0.997843683 * +(+(0.699999988 * +(HEAPF[dsp + 88 + (2 << 2) >> 2])) + +(0.150000006 * +(+(HEAPF[dsp + 88 + (1 << 2) >> 2]) + +(HEAPF[dsp + 88 + (3 << 2) >> 2]))))));
			iRec35 = 0;
			fTemp28 = +(+(HEAPF[dsp + 24 >> 2]) * +(+(HEAPF[dsp + 32 + (0 << 2) >> 2]) * +(fTemp1)));
			fTemp29 = +(+(fTemp28) + -1.49999499);
			iTemp30 = ~~(+(fTemp29));
			iTemp31 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((iTemp30 | 0)))) | 0)))));
			fTemp32 = +(floorf(+(fTemp29)));
			fTemp33 = +(+(fTemp28) + +(-1. - +(fTemp32)));
			fTemp34 = +(0. - +(fTemp33));
			fTemp35 = +(+(fTemp28) + +(-2. - +(fTemp32)));
			fTemp36 = +(0. - +(0.5 * +(fTemp35)));
			fTemp37 = +(+(fTemp28) + +(-3. - +(fTemp32)));
			fTemp38 = +(0. - +(0.333333343 * +(fTemp37)));
			fTemp39 = +(+(fTemp28) + +(-4. - +(fTemp32)));
			fTemp40 = +(0. - +(0.25 * +(fTemp39)));
			fTemp41 = +(+(fTemp28) - +(fTemp32));
			iTemp42 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp30 | 0) + 2) | 0)))) | 0)))));
			fTemp43 = +(0. - +(fTemp37));
			fTemp44 = +(0. - +(0.5 * +(fTemp39)));
			iTemp45 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp30 | 0) + 1) | 0)))) | 0)))));
			fTemp46 = +(0. - +(fTemp35));
			fTemp47 = +(0. - +(0.5 * +(fTemp37)));
			fTemp48 = +(0. - +(0.333333343 * +(fTemp39)));
			fTemp49 = +(+(fTemp33) * +(fTemp35));
			iTemp50 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp30 | 0) + 3) | 0)))) | 0)))));
			fTemp51 = +(0. - +(fTemp39));
			fTemp52 = +(+(fTemp49) * +(fTemp37));
			iTemp53 = ~~(+(min_f(+(HEAPF[dsp + 20 >> 2]), +(((max_i(0, ~~((((iTemp30 | 0) + 4) | 0)))) | 0)))));
			HEAPF[dsp + 8300 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp31 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp34)) * +(fTemp36)) * +(fTemp38)) * +(fTemp40)) + +(+(fTemp41) * +(+(+(+(0.5 * +(+(+(+(fTemp33) * +(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp42 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp43)) * +(fTemp44))) + +(+(+(+(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp45 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp46)) * +(fTemp47)) * +(fTemp48))) + +(0.166666672 * +(+(+(fTemp49) * +(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp50 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp51)))) + +(0.0416666679 * +(+(fTemp52) * +(HEAPF[dsp + 108 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp53 | 0) + 2) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAP32[dsp + 8312 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 8312 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			fTemp54 = +(tanf(+(+(fSlow8) * +(HEAPF[dsp + 64 + (0 << 2) >> 2]))));
			fTemp55 = +(1. / +(fTemp54));
			fTemp56 = +(+(+(+(fTemp55) + 1.41421354) / +(fTemp54)) + 1.);
			HEAPF[dsp + 8324 + (0 << 2) >> 2] = +(+(4.65661287e-10 * +((HEAP32[dsp + 8312 + (0 << 2) >> 2] | 0))) - +(+(+(+(HEAPF[dsp + 8324 + (2 << 2) >> 2]) * +(+(+(+(fTemp55) + -1.41421354) / +(fTemp54)) + 1.)) + +(2. * +(+(HEAPF[dsp + 8324 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp54), 2.))))))) / +(fTemp56)));
			fTemp57 = +(powf(+(1. - +(+(fSlow9) * +(HEAPF[dsp + 64 + (0 << 2) >> 2]))), 2.));
			HEAPF[dsp + 8340 + (0 << 2) >> 2] = +(fTemp57);
			fTemp58 = +(+(HEAPF[dsp + 8336 >> 2]) * +(fTemp57));
			HEAPF[dsp + 8348 + (0 << 2) >> 2] = +(((((+(+(fSlow5) - +(HEAPF[dsp + 56 + (1 << 2) >> 2])) > 0.) | 0) > 0) | 0)?0.:+(min_f(+(fTemp58), +(+(+(HEAPF[dsp + 8348 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 8336 >> 2]) * +(+(fTemp57) - +(HEAPF[dsp + 8340 + (1 << 2) >> 2])))) + 1.))));
			fTemp59 = +(+(HEAPF[dsp + 8356 >> 2]) * +(fTemp57));
			iTemp60 = ((+(HEAPF[dsp + 8348 + (0 << 2) >> 2]) < +(fTemp59)) | 0);
			fTemp61 = +(+(fSlow7) * +(+(+(+(HEAPF[dsp + 8324 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 8324 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 8324 + (1 << 2) >> 2])))) * +((iTemp60 | 0)?+(((+(HEAPF[dsp + 8348 + (0 << 2) >> 2]) < 0.) | 0)?0.:+((iTemp60 | 0)?+(+(HEAPF[dsp + 8360 >> 2]) * +(+(HEAPF[dsp + 8348 + (0 << 2) >> 2]) / +(fTemp57))):1.)):+(((+(HEAPF[dsp + 8348 + (0 << 2) >> 2]) < +(fTemp58)) | 0)?+(+(+(HEAPF[dsp + 8360 >> 2]) * +(+(0. - +(+(HEAPF[dsp + 8348 + (0 << 2) >> 2]) - +(fTemp59))) / +(fTemp57))) + 1.):0.))) / +(fTemp56)));
			HEAPF[dsp + 8364 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 8300 + (1 << 2) >> 2]) + +(fTemp61));
			HEAPF[dsp + 8372 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(+(0.400000006 * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - 1) | 0) & 2047) | 0) << 2) >> 2])) + +(0.600000024 * +(HEAPF[dsp + 8364 + (1 << 2) >> 2])));
			fRec27 = +(+(+(+(+(+(fTemp8) * +(fTemp10)) * +(fTemp12)) * +(fTemp14)) * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iTemp5 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp15) * +(+(0.0416666679 * +(+(fTemp26) * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iTemp27 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(+(fTemp20) * +(fTemp21)) * +(fTemp22)) * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iTemp19 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp7) * +(fTemp17)) * +(fTemp18)) * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iTemp16 | 0)) | 0) & 2047) | 0) << 2) >> 2])))) + +(0.166666672 * +(+(+(fTemp23) * +(fTemp25)) * +(HEAPF[dsp + 8372 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (iTemp24 | 0)) | 0) & 2047) | 0) << 2) >> 2])))))));
			iRec28 = (iRec35 | 0);
			HEAPF[dsp + 16564 + (0 << 2) >> 2] = +(fRec26);
			fRec22 = +(+(fTemp61) + +(HEAPF[dsp + 16564 + (1 << 2) >> 2]));
			fRec23 = +(fRec27);
			iRec24 = (iRec28 | 0);
			HEAPF[dsp + 16572 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec22);
			fRec18 = +(+(+(+(+(+(fTemp34) * +(fTemp36)) * +(fTemp38)) * +(fTemp40)) * +(HEAPF[dsp + 16572 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp31 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp41) * +(+(+(0.166666672 * +(+(+(fTemp49) * +(fTemp51)) * +(HEAPF[dsp + 16572 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp50 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp46) * +(fTemp47)) * +(fTemp48)) * +(HEAPF[dsp + 16572 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp45 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp33) * +(fTemp43)) * +(fTemp44)) * +(HEAPF[dsp + 16572 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp42 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp52) * +(HEAPF[dsp + 16572 + ((((((HEAP32[dsp + 104 >> 2] | 0) - (((iTemp53 | 0) + 1) | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 24764 + (0 << 2) >> 2] = +(fRec23);
			iRec20 = (iRec24 | 0);
			HEAPF[dsp + 24772 + (0 << 2) >> 2] = +(HEAPF[dsp + 24764 + (1 << 2) >> 2]);
			iRec16 = (iRec20 | 0);
			fRec12 = +(HEAPF[dsp + 24772 + (1 << 2) >> 2]);
			fRec13 = +(+((iRec16 | 0)) + +(HEAPF[dsp + 24772 + (1 << 2) >> 2]));
			HEAP32[dsp + 24788 + (0 << 2) >> 2] = (iRec11 | 0);
			fRec7 = +(fRec14);
			fRec8 = +(fRec12);
			fRec9 = +(fRec13);
			HEAPF[dsp + 24796 + ((((HEAP32[dsp + 104 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec7);
			fRec3 = +(fRec18);
			fRec4 = +(fRec8);
			fRec5 = +(fRec9);
			HEAPF[dsp + 32988 + (0 << 2) >> 2] = +(fRec3);
			fRec1 = +(fRec5);
			fTemp62 = +(+(fSlow0) * +(fRec1));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fTemp62));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fTemp62));
			HEAP32[dsp + 4 + (1 << 2) >> 2] = (HEAP32[dsp + 4 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 32 + (1 << 2) >> 2] = +(HEAPF[dsp + 32 + (0 << 2) >> 2]);
			HEAPF[dsp + 56 + (1 << 2) >> 2] = +(HEAPF[dsp + 56 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			for (j0 = 3; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAPF[dsp + 88 + ((j0 | 0) << 2) >> 2] = +(HEAPF[dsp + 88 + ((((j0 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAP32[dsp + 104 >> 2] = (((HEAP32[dsp + 104 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8300 + (1 << 2) >> 2] = +(HEAPF[dsp + 8300 + (0 << 2) >> 2]);
			HEAP32[dsp + 8312 + (1 << 2) >> 2] = (HEAP32[dsp + 8312 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 8324 + (2 << 2) >> 2] = +(HEAPF[dsp + 8324 + (1 << 2) >> 2]);
			HEAPF[dsp + 8324 + (1 << 2) >> 2] = +(HEAPF[dsp + 8324 + (0 << 2) >> 2]);
			HEAPF[dsp + 8340 + (1 << 2) >> 2] = +(HEAPF[dsp + 8340 + (0 << 2) >> 2]);
			HEAPF[dsp + 8348 + (1 << 2) >> 2] = +(HEAPF[dsp + 8348 + (0 << 2) >> 2]);
			HEAPF[dsp + 8364 + (1 << 2) >> 2] = +(HEAPF[dsp + 8364 + (0 << 2) >> 2]);
			HEAPF[dsp + 16564 + (1 << 2) >> 2] = +(HEAPF[dsp + 16564 + (0 << 2) >> 2]);
			HEAPF[dsp + 24764 + (1 << 2) >> 2] = +(HEAPF[dsp + 24764 + (0 << 2) >> 2]);
			for (j1 = 3; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF[dsp + 24772 + ((j1 | 0) << 2) >> 2] = +(HEAPF[dsp + 24772 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			HEAP32[dsp + 24788 + (1 << 2) >> 2] = (HEAP32[dsp + 24788 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 32988 + (1 << 2) >> 2] = +(HEAPF[dsp + 32988 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 32996;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/nylonGuitar/gate"] = 48;
	pathTable["/nylonGuitar/outGain"] = 0;
	pathTable["/nylonGuitar/pluckPosition"] = 28;
	pathTable["/nylonGuitar/midi/freq"] = 40;
	pathTable["/nylonGuitar/midi/bend"] = 44;
	pathTable["/nylonGuitar/midi/sustain"] = 52;
	pathTable["/nylonGuitar/midi/gain"] = 8308;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"NylonGuitarMidi\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple acoustic guitar model with nylon strings.\"},{\"envelopes.lib/author\":\"GRAME\"},{\"envelopes.lib/copyright\":\"GRAME\"},{\"envelopes.lib/license\":\"LGPL with exception\"},{\"envelopes.lib/name\":\"Faust Envelope Library\"},{\"envelopes.lib/version\":\"0.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"NylonGuitarMidi\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"nylonGuitar\",\"items\":[{\"type\":\"hgroup\",\"label\":\"midi\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/nylonGuitar/midi/freq\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"}],\"init\":\"440\",\"min\":\"50\",\"max\":\"1000\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"bend\",\"address\":\"/nylonGuitar/midi/bend\",\"meta\":[{\"1\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"pitchwheel\"},{\"style\":\"knob\"}],\"init\":\"1\",\"min\":\"0\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/nylonGuitar/midi/gain\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"}],\"init\":\"0.8\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"sustain\",\"address\":\"/nylonGuitar/midi/sustain\",\"meta\":[{\"3\":\"\"},{\"hidden\":\"1\"},{\"midi\":\"ctrl 64\"},{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"1\"}]},{\"type\":\"button\",\"label\":\"gate\",\"address\":\"/nylonGuitar/gate\",\"meta\":[{\"4\":\"\"}]},{\"type\":\"hslider\",\"label\":\"outGain\",\"address\":\"/nylonGuitar/outGain\",\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"pluckPosition\",\"address\":\"/nylonGuitar/pluckPosition\",\"meta\":[{\"midi\":\"ctrl 1\"}],\"init\":\"0.8\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Simple acoustic guitar model with nylon strings.");
	m.declare("envelopes.lib/author", "GRAME");
	m.declare("envelopes.lib/copyright", "GRAME");
	m.declare("envelopes.lib/license", "LGPL with exception");
	m.declare("envelopes.lib/name", "Faust Envelope Library");
	m.declare("envelopes.lib/version", "0.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "NylonGuitarMidi");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

