/* ------------------------------------------------------------
copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
license: "MIT"
name: "Brass"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 48 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 52 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 48 >> 2] | 0))))));
		HEAPF[dsp + 56 >> 2] = +(6.28318548 / +(HEAPF[dsp + 52 >> 2]));
		HEAPF[dsp + 96 >> 2] = +(3.14159274 / +(HEAPF[dsp + 52 >> 2]));
		HEAPF[dsp + 124 >> 2] = +(2136.28296 / +(HEAPF[dsp + 52 >> 2]));
		HEAPF[dsp + 8376 >> 2] = +(0.00882352982 * +(HEAPF[dsp + 52 >> 2]));
		HEAPF[dsp + 8380 >> 2] = +(0.00147058826 * +(HEAPF[dsp + 52 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 8 >> 2] = 0.5;
		HEAPF[dsp + 44 >> 2] = 0.25;
		HEAPF[dsp + 60 >> 2] = 5.;
		HEAPF[dsp + 80 >> 2] = 0.;
		HEAPF[dsp + 92 >> 2] = 0.100000001;
		HEAPF[dsp + 100 >> 2] = 2000.;
		HEAPF[dsp + 128 >> 2] = 0.5;
		HEAPF[dsp + 140 >> 2] = 0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAP32[dsp + 12 + ((l1 | 0) << 2) >> 2] = 0;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 72 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 84 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAP32[dsp + 104 + ((l8 | 0) << 2) >> 2] = 0;
			
		}
		for (l9 = 0; (((l9 | 0) < 3) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 112 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 132 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 144 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 3) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 152 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 164 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 172 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 180 >> 2] = 0;
		for (l15 = 0; (((l15 | 0) < 2048) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 184 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 8384 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 8392 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2048) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 8400 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 16592 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 48 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var i = 0;
		var fRec10 = 0.;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var iRec17 = 0;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var iTemp6 = 0;
		var iTemp7 = 0;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var iTemp18 = 0;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var iTemp21 = 0;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var iTemp26 = 0;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var iTemp29 = 0;
		var iRec12 = 0;
		var fRec7 = 0.;
		var fRec8 = 0.;
		var fRec9 = 0.;
		var fRec3 = 0.;
		var fRec4 = 0.;
		var fRec5 = 0.;
		var fRec1 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(+(HEAPF[dsp + 8 >> 2])));
		fSlow1 = +(0.0299999993 * +(+(HEAPF[dsp + 44 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 56 >> 2]) * +(+(HEAPF[dsp + 60 >> 2])));
		fSlow3 = +(sinf(+(fSlow2)));
		fSlow4 = +(cosf(+(fSlow2)));
		fSlow5 = +(0. - +(fSlow3));
		fSlow6 = +(0.00100000005 * +(+(HEAPF[dsp + 80 >> 2])));
		fSlow7 = +(tanf(+(+(HEAPF[dsp + 96 >> 2]) * +(+(HEAPF[dsp + 100 >> 2])))));
		fSlow8 = +(1. / +(fSlow7));
		fSlow9 = +(+(+(+(fSlow8) + 1.41421354) / +(fSlow7)) + 1.);
		fSlow10 = +(0.0500000007 * +(+(+(HEAPF[dsp + 92 >> 2])) / +(fSlow9)));
		fSlow11 = +(1. / +(fSlow9));
		fSlow12 = +(+(+(+(fSlow8) + -1.41421354) / +(fSlow7)) + 1.);
		fSlow13 = +(2. * +(1. - +(1. / +(powf(+(fSlow7), 2.)))));
		fSlow14 = +(0.00100000005 * +(+(HEAPF[dsp + 128 >> 2])));
		fSlow15 = +(0.00100000005 * +(+(HEAPF[dsp + 140 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 0 + (0 << 2) >> 2] = 0;
			HEAP32[dsp + 12 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 20 + (1 << 2) >> 2])));
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 20 + (0 << 2) >> 2]) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])) + +(+(1. - +(HEAPF[dsp + 20 + (0 << 2) >> 2])) * +(HEAPF[dsp + 8392 + (1 << 2) >> 2])));
			fRec10 = +(+(HEAPF[dsp + 28 + (0 << 2) >> 2]) + +((HEAP32[dsp + 0 + (1 << 2) >> 2] | 0)));
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(HEAPF[dsp + 16592 + (1 << 2) >> 2]);
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 72 + (1 << 2) >> 2])) + +(+(fSlow4) * +(HEAPF[dsp + 64 + (1 << 2) >> 2])));
			HEAPF[dsp + 72 + (0 << 2) >> 2] = +(+(+(+(fSlow4) * +(HEAPF[dsp + 72 + (1 << 2) >> 2])) + +(+(fSlow5) * +(HEAPF[dsp + 64 + (1 << 2) >> 2]))) + +(((1 - (HEAP32[dsp + 12 + (1 << 2) >> 2] | 0)) | 0)));
			HEAPF[dsp + 84 + (0 << 2) >> 2] = +(+(fSlow6) + +(0.999000013 * +(HEAPF[dsp + 84 + (1 << 2) >> 2])));
			HEAP32[dsp + 104 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 104 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 112 + (0 << 2) >> 2] = +(+(4.65661287e-10 * +((HEAP32[dsp + 104 + (0 << 2) >> 2] | 0))) - +(+(fSlow11) * +(+(+(fSlow12) * +(HEAPF[dsp + 112 + (2 << 2) >> 2])) + +(+(fSlow13) * +(HEAPF[dsp + 112 + (1 << 2) >> 2])))));
			fTemp0 = +(+(+(fSlow1) * +(HEAPF[dsp + 64 + (0 << 2) >> 2])) + +(+(HEAPF[dsp + 84 + (0 << 2) >> 2]) * +(+(+(fSlow10) * +(+(HEAPF[dsp + 112 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 112 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 112 + (1 << 2) >> 2]))))) + 1.)));
			HEAPF[dsp + 132 + (0 << 2) >> 2] = +(+(fSlow14) + +(0.999000013 * +(HEAPF[dsp + 132 + (1 << 2) >> 2])));
			HEAPF[dsp + 144 + (0 << 2) >> 2] = +(+(fSlow15) + +(0.999000013 * +(HEAPF[dsp + 144 + (1 << 2) >> 2])));
			HEAPF[dsp + 152 + (0 << 2) >> 2] = +(+(0.0299999993 * +(+(0.300000012 * +(fTemp0)) - +(0.850000024 * +(HEAPF[dsp + 36 + (1 << 2) >> 2])))) - +(+(+(HEAPF[dsp + 152 + (1 << 2) >> 2]) * +(0. - +(1.99399996 * +(cosf(+(+(HEAPF[dsp + 124 >> 2]) * +(+(powf(4., +(+(2. * +(HEAPF[dsp + 132 + (0 << 2) >> 2])) + -1.))) / +(HEAPF[dsp + 144 + (0 << 2) >> 2])))))))) + +(0.994009018 * +(HEAPF[dsp + 152 + (2 << 2) >> 2]))));
			fTemp1 = +(max_f(-1., +(min_f(1., +(powf(+(HEAPF[dsp + 152 + (0 << 2) >> 2]), 2.))))));
			fTemp2 = +(0.850000024 * +(+(HEAPF[dsp + 36 + (1 << 2) >> 2]) * +(1. - +(fTemp1))));
			fTemp3 = +(0.300000012 * +(+(fTemp0) * +(fTemp1)));
			HEAPF[dsp + 164 + (0 << 2) >> 2] = +(+(fTemp3) + +(fTemp2));
			HEAPF[dsp + 172 + (0 << 2) >> 2] = +(+(+(fTemp2) + +(+(0.995000005 * +(HEAPF[dsp + 172 + (1 << 2) >> 2])) + +(fTemp3))) - +(HEAPF[dsp + 164 + (1 << 2) >> 2]));
			HEAPF[dsp + 184 + ((((HEAP32[dsp + 180 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(HEAPF[dsp + 172 + (0 << 2) >> 2]);
			iRec17 = 0;
			fTemp4 = +(+(HEAPF[dsp + 8380 >> 2]) * +(HEAPF[dsp + 144 + (0 << 2) >> 2]));
			fTemp5 = +(+(fTemp4) + -1.49999499);
			iTemp6 = ~~(+(fTemp5));
			iTemp7 = ((~~(+(min_f(+(HEAPF[dsp + 8376 >> 2]), +(((max_i(0, (iTemp6 | 0))) | 0))))) + 1) | 0);
			fTemp8 = +(floorf(+(fTemp5)));
			fTemp9 = +(+(fTemp4) + +(-1. - +(fTemp8)));
			fTemp10 = +(0. - +(fTemp9));
			fTemp11 = +(+(fTemp4) + +(-2. - +(fTemp8)));
			fTemp12 = +(0. - +(0.5 * +(fTemp11)));
			fTemp13 = +(+(fTemp4) + +(-3. - +(fTemp8)));
			fTemp14 = +(0. - +(0.333333343 * +(fTemp13)));
			fTemp15 = +(+(fTemp4) + +(-4. - +(fTemp8)));
			fTemp16 = +(0. - +(0.25 * +(fTemp15)));
			fTemp17 = +(+(fTemp4) - +(fTemp8));
			iTemp18 = ((~~(+(min_f(+(HEAPF[dsp + 8376 >> 2]), +(((max_i(0, (((iTemp6 | 0) + 2) | 0))) | 0))))) + 1) | 0);
			fTemp19 = +(0. - +(fTemp13));
			fTemp20 = +(0. - +(0.5 * +(fTemp15)));
			iTemp21 = ((~~(+(min_f(+(HEAPF[dsp + 8376 >> 2]), +(((max_i(0, (((iTemp6 | 0) + 1) | 0))) | 0))))) + 1) | 0);
			fTemp22 = +(0. - +(fTemp11));
			fTemp23 = +(0. - +(0.5 * +(fTemp13)));
			fTemp24 = +(0. - +(0.333333343 * +(fTemp15)));
			fTemp25 = +(+(fTemp9) * +(fTemp11));
			iTemp26 = ((~~(+(min_f(+(HEAPF[dsp + 8376 >> 2]), +(((max_i(0, (((iTemp6 | 0) + 3) | 0))) | 0))))) + 1) | 0);
			fTemp27 = +(0. - +(fTemp15));
			fTemp28 = +(+(fTemp25) * +(fTemp13));
			iTemp29 = ((~~(+(min_f(+(HEAPF[dsp + 8376 >> 2]), +(((max_i(0, (((iTemp6 | 0) + 4) | 0))) | 0))))) + 1) | 0);
			HEAPF[dsp + 8384 + (0 << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 184 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp7 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp10)) * +(fTemp12)) * +(fTemp14)) * +(fTemp16)) + +(+(fTemp17) * +(+(+(+(0.5 * +(+(+(+(fTemp9) * +(HEAPF[dsp + 184 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp18 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp19)) * +(fTemp20))) + +(+(+(+(HEAPF[dsp + 184 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp21 | 0)) | 0) & 2047) | 0) << 2) >> 2]) * +(fTemp22)) * +(fTemp23)) * +(fTemp24))) + +(0.166666672 * +(+(+(fTemp25) * +(HEAPF[dsp + 184 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp26 | 0)) | 0) & 2047) | 0) << 2) >> 2])) * +(fTemp27)))) + +(0.0416666679 * +(+(fTemp28) * +(HEAPF[dsp + 184 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp29 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			HEAPF[dsp + 8392 + (0 << 2) >> 2] = +(HEAPF[dsp + 8384 + (1 << 2) >> 2]);
			iRec12 = (iRec17 | 0);
			fRec7 = +(fRec10);
			fRec8 = +(HEAPF[dsp + 8392 + (0 << 2) >> 2]);
			fRec9 = +(+(HEAPF[dsp + 8392 + (0 << 2) >> 2]) + +((iRec12 | 0)));
			HEAPF[dsp + 8400 + ((((HEAP32[dsp + 180 >> 2] | 0) & 2047) | 0) << 2) >> 2] = +(fRec7);
			fRec3 = +(+(+(+(+(+(fTemp10) * +(fTemp12)) * +(fTemp14)) * +(fTemp16)) * +(HEAPF[dsp + 8400 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp7 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(+(fTemp17) * +(+(+(0.166666672 * +(+(+(fTemp25) * +(fTemp27)) * +(HEAPF[dsp + 8400 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp26 | 0)) | 0) & 2047) | 0) << 2) >> 2]))) + +(+(+(+(+(fTemp22) * +(fTemp23)) * +(fTemp24)) * +(HEAPF[dsp + 8400 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp21 | 0)) | 0) & 2047) | 0) << 2) >> 2])) + +(0.5 * +(+(+(+(fTemp9) * +(fTemp19)) * +(fTemp20)) * +(HEAPF[dsp + 8400 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp18 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))) + +(0.0416666679 * +(+(fTemp28) * +(HEAPF[dsp + 8400 + ((((((HEAP32[dsp + 180 >> 2] | 0) - (iTemp29 | 0)) | 0) & 2047) | 0) << 2) >> 2]))))));
			fRec4 = +(fRec8);
			fRec5 = +(fRec9);
			HEAPF[dsp + 16592 + (0 << 2) >> 2] = +(fRec3);
			fRec1 = +(fRec5);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(fRec1));
			HEAP32[dsp + 0 + (1 << 2) >> 2] = (HEAP32[dsp + 0 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 12 + (1 << 2) >> 2] = (HEAP32[dsp + 12 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 72 + (1 << 2) >> 2] = +(HEAPF[dsp + 72 + (0 << 2) >> 2]);
			HEAPF[dsp + 84 + (1 << 2) >> 2] = +(HEAPF[dsp + 84 + (0 << 2) >> 2]);
			HEAP32[dsp + 104 + (1 << 2) >> 2] = (HEAP32[dsp + 104 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 112 + (2 << 2) >> 2] = +(HEAPF[dsp + 112 + (1 << 2) >> 2]);
			HEAPF[dsp + 112 + (1 << 2) >> 2] = +(HEAPF[dsp + 112 + (0 << 2) >> 2]);
			HEAPF[dsp + 132 + (1 << 2) >> 2] = +(HEAPF[dsp + 132 + (0 << 2) >> 2]);
			HEAPF[dsp + 144 + (1 << 2) >> 2] = +(HEAPF[dsp + 144 + (0 << 2) >> 2]);
			HEAPF[dsp + 152 + (2 << 2) >> 2] = +(HEAPF[dsp + 152 + (1 << 2) >> 2]);
			HEAPF[dsp + 152 + (1 << 2) >> 2] = +(HEAPF[dsp + 152 + (0 << 2) >> 2]);
			HEAPF[dsp + 164 + (1 << 2) >> 2] = +(HEAPF[dsp + 164 + (0 << 2) >> 2]);
			HEAPF[dsp + 172 + (1 << 2) >> 2] = +(HEAPF[dsp + 172 + (0 << 2) >> 2]);
			HEAP32[dsp + 180 >> 2] = (((HEAP32[dsp + 180 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 8384 + (1 << 2) >> 2] = +(HEAPF[dsp + 8384 + (0 << 2) >> 2]);
			HEAPF[dsp + 8392 + (1 << 2) >> 2] = +(HEAPF[dsp + 8392 + (0 << 2) >> 2]);
			HEAPF[dsp + 16592 + (1 << 2) >> 2] = +(HEAPF[dsp + 16592 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 16600;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/brass/brassModel/mute"] = 8;
	pathTable["/brass/blower/vibratoGain"] = 44;
	pathTable["/brass/blower/vibratoFreq"] = 60;
	pathTable["/brass/blower/pressure"] = 80;
	pathTable["/brass/blower/breathGain"] = 92;
	pathTable["/brass/blower/breathCutoff"] = 100;
	pathTable["/brass/brassModel/lipsTension"] = 128;
	pathTable["/brass/brassModel/tubeLength"] = 140;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"Brass\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"copyright\":\"(c)Romain Michon, CCRMA (Stanford University), GRAME\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"description\":\"Simple brass instrument physical model with physical parameters.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"MIT\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"Brass\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"brass\",\"items\":[{\"type\":\"vgroup\",\"label\":\"blower\",\"items\":[{\"type\":\"hslider\",\"label\":\"pressure\",\"address\":\"/brass/blower/pressure\",\"meta\":[{\"0\":\"\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"breathGain\",\"address\":\"/brass/blower/breathGain\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.1\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"breathCutoff\",\"address\":\"/brass/blower/breathCutoff\",\"meta\":[{\"2\":\"\"}],\"init\":\"2000\",\"min\":\"20\",\"max\":\"20000\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"vibratoFreq\",\"address\":\"/brass/blower/vibratoFreq\",\"meta\":[{\"3\":\"\"}],\"init\":\"5\",\"min\":\"0.1\",\"max\":\"10\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"vibratoGain\",\"address\":\"/brass/blower/vibratoGain\",\"meta\":[{\"4\":\"\"}],\"init\":\"0.25\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]},{\"type\":\"vgroup\",\"label\":\"brassModel\",\"items\":[{\"type\":\"hslider\",\"label\":\"tubeLength\",\"address\":\"/brass/brassModel/tubeLength\",\"meta\":[{\"1\":\"\"}],\"init\":\"0.5\",\"min\":\"0.01\",\"max\":\"2.5\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"lipsTension\",\"address\":\"/brass/brassModel/lipsTension\",\"meta\":[{\"2\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"},{\"type\":\"hslider\",\"label\":\"mute\",\"address\":\"/brass/brassModel/mute\",\"meta\":[{\"3\":\"\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("description", "Simple brass instrument physical model with physical parameters.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "MIT");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "Brass");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

