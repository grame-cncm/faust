/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "pitchShifter"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var floorf = foreign.floor;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var min_i = foreign.min;
	var powf = foreign.pow;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 524312 >> 2] = (samplingFreq | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 524292 >> 2] = 1000.;
		HEAPF[dsp + 524296 >> 2] = 0.;
		HEAPF[dsp + 524308 >> 2] = 10.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		HEAP32[dsp + 0 >> 2] = 0;
		for (l0 = 0; (((l0 | 0) < 131072) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 524300 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 524312 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var iTemp1 = 0;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var iTemp6 = 0;
		var fTemp7 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 524292 >> 2]));
		fSlow1 = +(powf(2., +(0.0833333358 * +(+(HEAPF[dsp + 524296 >> 2])))));
		fSlow2 = +(1. / +(+(HEAPF[dsp + 524308 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 4 + ((((HEAP32[dsp + 0 >> 2] | 0) & 131071) | 0) << 2) >> 2] = +(fTemp0);
			HEAPF[dsp + 524300 + (0 << 2) >> 2] = +(fmodf(+(+(fSlow0) + +(+(+(HEAPF[dsp + 524300 + (1 << 2) >> 2]) + 1.) - +(fSlow1))), +(fSlow0)));
			iTemp1 = ~~(+(HEAPF[dsp + 524300 + (0 << 2) >> 2]));
			fTemp2 = +(floorf(+(HEAPF[dsp + 524300 + (0 << 2) >> 2])));
			fTemp3 = +(1. - +(HEAPF[dsp + 524300 + (0 << 2) >> 2]));
			fTemp4 = +(min_f(+(+(fSlow2) * +(HEAPF[dsp + 524300 + (0 << 2) >> 2])), 1.));
			fTemp5 = +(+(fSlow0) + +(HEAPF[dsp + 524300 + (0 << 2) >> 2]));
			iTemp6 = ~~(+(fTemp5));
			fTemp7 = +(floorf(+(fTemp5)));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(HEAPF[dsp + 4 + ((((((HEAP32[dsp + 0 >> 2] | 0) - ((min_i(65537, ((max_i(0, (iTemp1 | 0))) | 0))) | 0)) | 0) & 131071) | 0) << 2) >> 2]) * +(+(fTemp2) + +(fTemp3))) + +(+(+(HEAPF[dsp + 524300 + (0 << 2) >> 2]) - +(fTemp2)) * +(HEAPF[dsp + 4 + ((((((HEAP32[dsp + 0 >> 2] | 0) - ((min_i(65537, ((max_i(0, (((iTemp1 | 0) + 1) | 0))) | 0))) | 0)) | 0) & 131071) | 0) << 2) >> 2]))) * +(fTemp4)) + +(+(+(+(HEAPF[dsp + 4 + ((((((HEAP32[dsp + 0 >> 2] | 0) - ((min_i(65537, ((max_i(0, (iTemp6 | 0))) | 0))) | 0)) | 0) & 131071) | 0) << 2) >> 2]) * +(+(+(fTemp7) + +(fTemp3)) - +(fSlow0))) + +(+(+(fSlow0) + +(+(HEAPF[dsp + 524300 + (0 << 2) >> 2]) - +(fTemp7))) * +(HEAPF[dsp + 4 + ((((((HEAP32[dsp + 0 >> 2] | 0) - ((min_i(65537, ((max_i(0, (((iTemp6 | 0) + 1) | 0))) | 0))) | 0)) | 0) & 131071) | 0) << 2) >> 2]))) * +(1. - +(fTemp4)))));
			HEAP32[dsp + 0 >> 2] = (((HEAP32[dsp + 0 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 524300 + (1 << 2) >> 2] = +(HEAPF[dsp + 524300 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 524316;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/Pitch_Shifter/window_(samples)"] = 524292;
	pathTable["/Pitch_Shifter/shift_(semitones)"] = 524296;
	pathTable["/Pitch_Shifter/xfade_(samples)"] = 524308;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"pitchShifter\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"author\":\"Grame\"},{\"copyright\":\"(c)GRAME 2006\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"misceffects.lib/name\":\"Faust Math Library\"},{\"misceffects.lib/version\":\"2.0\"},{\"name\":\"pitchShifter\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Pitch Shifter\",\"items\":[{\"type\":\"hslider\",\"label\":\"shift (semitones)\",\"address\":\"/Pitch_Shifter/shift_(semitones)\",\"init\":\"0\",\"min\":\"-12\",\"max\":\"12\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"window (samples)\",\"address\":\"/Pitch_Shifter/window_(samples)\",\"init\":\"1000\",\"min\":\"50\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"xfade (samples)\",\"address\":\"/Pitch_Shifter/xfade_(samples)\",\"init\":\"10\",\"min\":\"1\",\"max\":\"10000\",\"step\":\"1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Grame");
	m.declare("copyright", "(c)GRAME 2006");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("misceffects.lib/name", "Faust Math Library");
	m.declare("misceffects.lib/version", "2.0");
	m.declare("name", "pitchShifter");
	m.declare("version", "1.0");
}

