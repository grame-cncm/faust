/* ------------------------------------------------------------
author: "JOS, revised by RM"
name: "noiseGate"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var expf = foreign.exp;
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var max_i = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 4 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 8 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 4 >> 2] | 0))))));
		HEAPF[dsp + 12 >> 2] = +(1. / +(HEAPF[dsp + 8 >> 2]));
		HEAPF[dsp + 16 >> 2] = +(1. / +(HEAPF[dsp + 8 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.;
		HEAPF[dsp + 20 >> 2] = 10.;
		HEAPF[dsp + 24 >> 2] = 100.;
		HEAPF[dsp + 36 >> 2] = -30.;
		HEAPF[dsp + 48 >> 2] = 200.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAP32[dsp + 40 + ((l1 | 0) << 2) >> 2] = 0;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAP32[dsp + 52 + ((l2 | 0) << 2) >> 2] = 0;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAP32[dsp + 88 + ((l6 | 0) << 2) >> 2] = 0;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAP32[dsp + 96 + ((l7 | 0) << 2) >> 2] = 0;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 112 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 4 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var iSlow0 = 0;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var iSlow6 = 0;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fRec2 = 0.;
		var iTemp5 = 0;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fRec7 = 0.;
		var iTemp8 = 0;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		iSlow0 = ~~(+(+(HEAPF[dsp + 0 >> 2])));
		fSlow1 = +(max_f(+(HEAPF[dsp + 16 >> 2]), +(9.99999997e-07 * +(+(HEAPF[dsp + 20 >> 2])))));
		fSlow2 = +(max_f(+(HEAPF[dsp + 16 >> 2]), +(0.00100000005 * +(+(HEAPF[dsp + 24 >> 2])))));
		fSlow3 = +(expf(+(0. - +(+(HEAPF[dsp + 12 >> 2]) / +(min_f(+(fSlow1), +(fSlow2)))))));
		fSlow4 = +(1. - +(fSlow3));
		fSlow5 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 36 >> 2])))));
		iSlow6 = ~~(+(+(HEAPF[dsp + 8 >> 2]) * +(max_f(+(HEAPF[dsp + 16 >> 2]), +(0.00100000005 * +(+(HEAPF[dsp + 48 >> 2])))))));
		fSlow7 = +(expf(+(0. - +(+(HEAPF[dsp + 12 >> 2]) / +(fSlow1)))));
		fSlow8 = +(expf(+(0. - +(+(HEAPF[dsp + 12 >> 2]) / +(fSlow2)))));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp1 = +((iSlow0 | 0)?0.:+(fTemp0));
			fTemp2 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp3 = +((iSlow0 | 0)?0.:+(fTemp2));
			fTemp4 = +(fabsf(+(fTemp3)));
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])) + +(+(fSlow4) * +(fabsf(+(+(fabsf(+(fTemp1))) + +(fTemp4))))));
			fRec2 = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			iTemp5 = ((+(fRec2) > +(fSlow5)) | 0);
			HEAP32[dsp + 40 + (0 << 2) >> 2] = (iTemp5 | 0);
			HEAP32[dsp + 52 + (0 << 2) >> 2] = ((max_i(~~((imul((iSlow6 | 0), (((iTemp5 | 0) < (HEAP32[dsp + 40 + (1 << 2) >> 2] | 0)) | 0)) | 0)), ~~((((HEAP32[dsp + 52 + (1 << 2) >> 2] | 0) + -1) | 0)))) | 0);
			fTemp6 = +(fabsf(+(max_f(+((iTemp5 | 0)), +((((HEAP32[dsp + 52 + (0 << 2) >> 2] | 0) > 0) | 0))))));
			fTemp7 = +(((+(HEAPF[dsp + 68 + (1 << 2) >> 2]) > +(fTemp6)) | 0)?+(fSlow8):+(fSlow7));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 60 + (1 << 2) >> 2]) * +(fTemp7)) + +(+(fTemp6) * +(1. - +(fTemp7))));
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 >> 2] = +(+(20. * +(log10f(+(HEAPF[dsp + 68 + (0 << 2) >> 2])))));
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(+(fSlow3) * +(HEAPF[dsp + 80 + (1 << 2) >> 2])) + +(+(fSlow4) * +(fabsf(+(+(fTemp4) + +(fabsf(+(fTemp1))))))));
			fRec7 = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			iTemp8 = ((+(fRec7) > +(fSlow5)) | 0);
			HEAP32[dsp + 88 + (0 << 2) >> 2] = (iTemp8 | 0);
			HEAP32[dsp + 96 + (0 << 2) >> 2] = ((max_i(~~((imul((iSlow6 | 0), (((iTemp8 | 0) < (HEAP32[dsp + 88 + (1 << 2) >> 2] | 0)) | 0)) | 0)), ~~((((HEAP32[dsp + 96 + (1 << 2) >> 2] | 0) + -1) | 0)))) | 0);
			fTemp9 = +(fabsf(+(max_f(+((iTemp8 | 0)), +((((HEAP32[dsp + 96 + (0 << 2) >> 2] | 0) > 0) | 0))))));
			fTemp10 = +(((+(HEAPF[dsp + 112 + (1 << 2) >> 2]) > +(fTemp9)) | 0)?+(fSlow8):+(fSlow7));
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 104 + (1 << 2) >> 2]) * +(fTemp10)) + +(+(fTemp9) * +(1. - +(fTemp10))));
			HEAPF[dsp + 112 + (0 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp0):+(+(fTemp1) * +(HEAPF[dsp + 112 + (0 << 2) >> 2]))));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+((iSlow0 | 0)?+(fTemp2):+(+(fTemp3) * +(HEAPF[dsp + 112 + (0 << 2) >> 2]))));
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAP32[dsp + 40 + (1 << 2) >> 2] = (HEAP32[dsp + 40 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 52 + (1 << 2) >> 2] = (HEAP32[dsp + 52 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAP32[dsp + 88 + (1 << 2) >> 2] = (HEAP32[dsp + 88 + (0 << 2) >> 2] | 0);
			HEAP32[dsp + 96 + (1 << 2) >> 2] = (HEAP32[dsp + 96 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			HEAPF[dsp + 112 + (1 << 2) >> 2] = +(HEAPF[dsp + 112 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 120;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/GATE/0x00/Bypass"] = 0;
	pathTable["/GATE/0x00/Gate_Gain"] = 76;
	pathTable["/GATE/0x00/Attack"] = 20;
	pathTable["/GATE/0x00/Release"] = 24;
	pathTable["/GATE/0x00/Threshold"] = 36;
	pathTable["/GATE/0x00/Hold"] = 48;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"noiseGate\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Gate demo application.\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"misceffects.lib/name\":\"Faust Math Library\"},{\"misceffects.lib/version\":\"2.0\"},{\"name\":\"noiseGate\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"GATE\",\"meta\":[{\"tooltip\":\"Reference:   http://en.wikipedia.org/wiki/Noise_gate\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/GATE/0x00/Bypass\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked,   the gate has no effect\"}]},{\"type\":\"hbargraph\",\"label\":\"Gate Gain\",\"address\":\"/GATE/0x00/Gate_Gain\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Current gain of the  gate in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Threshold\",\"address\":\"/GATE/0x00/Threshold\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"When   the signal level falls below the Threshold (expressed in dB), the signal is   muted\"},{\"unit\":\"dB\"}],\"init\":\"-30\",\"min\":\"-120\",\"max\":\"0\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Attack\",\"address\":\"/GATE/0x00/Attack\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in MICROseconds (1/e smoothing time) for the gate  gain to go (exponentially) from 0 (muted) to 1 (unmuted)\"},{\"unit\":\"us\"}],\"init\":\"10\",\"min\":\"10\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Hold\",\"address\":\"/GATE/0x00/Hold\",\"meta\":[{\"3\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time in ms to keep the gate open (no muting) after the signal  level falls below the Threshold\"},{\"unit\":\"ms\"}],\"init\":\"200\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Release\",\"address\":\"/GATE/0x00/Release\",\"meta\":[{\"4\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in ms (1/e smoothing time) for the gain to go  (exponentially) from 1 (unmuted) to 0 (muted)\"},{\"unit\":\"ms\"}],\"init\":\"100\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"1\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("analyzers.lib/name", "Faust Analyzer Library");
	m.declare("analyzers.lib/version", "0.0");
	m.declare("author", "JOS, revised by RM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("description", "Gate demo application.");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("misceffects.lib/name", "Faust Math Library");
	m.declare("misceffects.lib/version", "2.0");
	m.declare("name", "noiseGate");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "0.0");
}

