/* ------------------------------------------------------------
name: "parametricEqualizer"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(3.14159274 / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 72 >> 2] = +(1382.30078 / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 92 >> 2] = +(1. / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 96 >> 2] = +(1382.30078 * +(HEAPF[dsp + 92 >> 2]));
		HEAPF[dsp + 104 >> 2] = +(2764.60156 * +(HEAPF[dsp + 92 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 8000.;
		HEAPF[dsp + 16 >> 2] = 200.;
		HEAPF[dsp + 48 >> 2] = 0.;
		HEAPF[dsp + 76 >> 2] = 49.;
		HEAPF[dsp + 88 >> 2] = 0.;
		HEAPF[dsp + 100 >> 2] = 40.;
		HEAPF[dsp + 148 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 3) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 3) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 3) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 108 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 128 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 3) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 136 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 152 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 3) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 160 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var iSlow20 = 0;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var fSlow23 = 0.;
		var fSlow24 = 0.;
		var fSlow25 = 0.;
		var fSlow26 = 0.;
		var fSlow27 = 0.;
		var fSlow28 = 0.;
		var fSlow29 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 12 >> 2])))));
		fSlow1 = +(1. / +(fSlow0));
		fSlow2 = +(1. / +(+(+(+(fSlow1) + 1.) / +(fSlow0)) + 1.));
		fSlow3 = +(+(fSlow1) + 1.);
		fSlow4 = +(0. - +(+(1. - +(fSlow1)) / +(fSlow3)));
		fSlow5 = +(1. / +(fSlow3));
		fSlow6 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 16 >> 2])))));
		fSlow7 = +(1. / +(fSlow6));
		fSlow8 = +(1. / +(+(+(+(fSlow7) + 1.) / +(fSlow6)) + 1.));
		fSlow9 = +(1. / +(powf(+(fSlow6), 2.)));
		fSlow10 = +(+(fSlow7) + 1.);
		fSlow11 = +(0. - +(+(1. - +(fSlow7)) / +(fSlow10)));
		fSlow12 = +(1. / +(fSlow10));
		fSlow13 = +(0. - +(fSlow7));
		fSlow14 = +(2. * +(1. - +(fSlow9)));
		fSlow15 = +(+(+(+(fSlow7) + -1.) / +(fSlow6)) + 1.);
		fSlow16 = +(2. * +(0. - +(fSlow9)));
		fSlow17 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 48 >> 2])))));
		fSlow18 = +(0.00100000005 * +(+(HEAPF[dsp + 76 >> 2])));
		fSlow19 = +(+(HEAPF[dsp + 88 >> 2]));
		iSlow20 = ((+(fSlow19) > 0.) | 0);
		fSlow21 = +(+(HEAPF[dsp + 100 >> 2]));
		fSlow22 = +(+(HEAPF[dsp + 96 >> 2]) * +(+(powf(10., +(0.0500000007 * +(fabsf(+(fSlow19)))))) / +(fSlow21)));
		fSlow23 = +(+(HEAPF[dsp + 96 >> 2]) / +(fSlow21));
		fSlow24 = +(1. / +(powf(+(fSlow0), 2.)));
		fSlow25 = +(2. * +(1. - +(fSlow24)));
		fSlow26 = +(+(+(+(fSlow1) + -1.) / +(fSlow0)) + 1.);
		fSlow27 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 148 >> 2])))));
		fSlow28 = +(0. - +(fSlow1));
		fSlow29 = +(2. * +(0. - +(fSlow24)));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(fTemp0);
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(+(fSlow11) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])) + +(+(fSlow12) * +(+(+(fSlow7) * +(fTemp0)) + +(+(fSlow13) * +(HEAPF[dsp + 20 + (1 << 2) >> 2])))));
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 28 + (0 << 2) >> 2]) - +(+(fSlow8) * +(+(+(fSlow14) * +(HEAPF[dsp + 36 + (1 << 2) >> 2])) + +(+(fSlow15) * +(HEAPF[dsp + 36 + (2 << 2) >> 2])))));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(+(fSlow11) * +(HEAPF[dsp + 52 + (1 << 2) >> 2])) + +(+(fSlow12) * +(+(fTemp0) + +(HEAPF[dsp + 20 + (1 << 2) >> 2]))));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 52 + (0 << 2) >> 2]) - +(+(fSlow8) * +(+(+(fSlow14) * +(HEAPF[dsp + 60 + (1 << 2) >> 2])) + +(+(fSlow15) * +(HEAPF[dsp + 60 + (2 << 2) >> 2])))));
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(fSlow18) + +(0.999000013 * +(HEAPF[dsp + 80 + (1 << 2) >> 2])));
			fTemp1 = +(powf(2., +(0.0833333358 * +(+(HEAPF[dsp + 80 + (0 << 2) >> 2]) + -49.))));
			fTemp2 = +(tanf(+(+(HEAPF[dsp + 72 >> 2]) * +(fTemp1))));
			fTemp3 = +(1. / +(fTemp2));
			fTemp4 = +(+(fTemp1) / +(sinf(+(+(HEAPF[dsp + 104 >> 2]) * +(fTemp1)))));
			fTemp5 = +(+(fSlow22) * +(fTemp4));
			fTemp6 = +(+(fSlow23) * +(fTemp4));
			fTemp7 = +((iSlow20 | 0)?+(fTemp6):+(fTemp5));
			fTemp8 = +(2. * +(+(HEAPF[dsp + 108 + (1 << 2) >> 2]) * +(1. - +(1. / +(powf(+(fTemp2), 2.))))));
			fTemp9 = +(+(+(+(fTemp3) + +(fTemp7)) / +(fTemp2)) + 1.);
			HEAPF[dsp + 108 + (0 << 2) >> 2] = +(+(+(fSlow8) * +(+(+(+(+(fSlow9) * +(HEAPF[dsp + 36 + (0 << 2) >> 2])) + +(+(fSlow16) * +(HEAPF[dsp + 36 + (1 << 2) >> 2]))) + +(+(fSlow9) * +(HEAPF[dsp + 36 + (2 << 2) >> 2]))) + +(+(fSlow17) * +(+(HEAPF[dsp + 60 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 60 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 60 + (1 << 2) >> 2]))))))) - +(+(+(+(HEAPF[dsp + 108 + (2 << 2) >> 2]) * +(+(+(+(fTemp3) - +(fTemp7)) / +(fTemp2)) + 1.)) + +(fTemp8)) / +(fTemp9)));
			fTemp10 = +((iSlow20 | 0)?+(fTemp5):+(fTemp6));
			fTemp11 = +(+(+(+(fTemp8) + +(+(HEAPF[dsp + 108 + (0 << 2) >> 2]) * +(+(+(+(fTemp3) + +(fTemp10)) / +(fTemp2)) + 1.))) + +(+(HEAPF[dsp + 108 + (2 << 2) >> 2]) * +(+(+(+(fTemp3) - +(fTemp10)) / +(fTemp2)) + 1.))) / +(fTemp9));
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +(fTemp11);
			HEAPF[dsp + 128 + (0 << 2) >> 2] = +(+(+(fSlow4) * +(HEAPF[dsp + 128 + (1 << 2) >> 2])) + +(+(fSlow5) * +(+(HEAPF[dsp + 120 + (1 << 2) >> 2]) + +(fTemp11))));
			HEAPF[dsp + 136 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 128 + (0 << 2) >> 2]) - +(+(fSlow2) * +(+(+(fSlow25) * +(HEAPF[dsp + 136 + (1 << 2) >> 2])) + +(+(fSlow26) * +(HEAPF[dsp + 136 + (2 << 2) >> 2])))));
			HEAPF[dsp + 152 + (0 << 2) >> 2] = +(+(+(fSlow4) * +(HEAPF[dsp + 152 + (1 << 2) >> 2])) + +(+(fSlow5) * +(+(+(fSlow28) * +(HEAPF[dsp + 120 + (1 << 2) >> 2])) + +(+(fSlow1) * +(fTemp11)))));
			HEAPF[dsp + 160 + (0 << 2) >> 2] = +(+(HEAPF[dsp + 152 + (0 << 2) >> 2]) - +(+(fSlow2) * +(+(+(fSlow25) * +(HEAPF[dsp + 160 + (1 << 2) >> 2])) + +(+(fSlow26) * +(HEAPF[dsp + 160 + (2 << 2) >> 2])))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(fSlow2) * +(+(+(HEAPF[dsp + 136 + (2 << 2) >> 2]) + +(+(HEAPF[dsp + 136 + (0 << 2) >> 2]) + +(2. * +(HEAPF[dsp + 136 + (1 << 2) >> 2])))) + +(+(fSlow27) * +(+(+(+(fSlow24) * +(HEAPF[dsp + 160 + (0 << 2) >> 2])) + +(+(fSlow29) * +(HEAPF[dsp + 160 + (1 << 2) >> 2]))) + +(+(fSlow24) * +(HEAPF[dsp + 160 + (2 << 2) >> 2])))))));
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 36 + (2 << 2) >> 2] = +(HEAPF[dsp + 36 + (1 << 2) >> 2]);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (2 << 2) >> 2] = +(HEAPF[dsp + 60 + (1 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 108 + (2 << 2) >> 2] = +(HEAPF[dsp + 108 + (1 << 2) >> 2]);
			HEAPF[dsp + 108 + (1 << 2) >> 2] = +(HEAPF[dsp + 108 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			HEAPF[dsp + 128 + (1 << 2) >> 2] = +(HEAPF[dsp + 128 + (0 << 2) >> 2]);
			HEAPF[dsp + 136 + (2 << 2) >> 2] = +(HEAPF[dsp + 136 + (1 << 2) >> 2]);
			HEAPF[dsp + 136 + (1 << 2) >> 2] = +(HEAPF[dsp + 136 + (0 << 2) >> 2]);
			HEAPF[dsp + 152 + (1 << 2) >> 2] = +(HEAPF[dsp + 152 + (0 << 2) >> 2]);
			HEAPF[dsp + 160 + (2 << 2) >> 2] = +(HEAPF[dsp + 160 + (1 << 2) >> 2]);
			HEAPF[dsp + 160 + (1 << 2) >> 2] = +(HEAPF[dsp + 160 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 172;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/PARAMETRIC_EQ_SECTIONS/High_Shelf/Transition_Frequency"] = 12;
	pathTable["/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Transition_Frequency"] = 16;
	pathTable["/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Low_Boost|Cut"] = 48;
	pathTable["/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Frequency"] = 76;
	pathTable["/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Boost|Cut"] = 88;
	pathTable["/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Q"] = 100;
	pathTable["/PARAMETRIC_EQ_SECTIONS/High_Shelf/High_Boost|Cut"] = 148;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"parametricEqualizer\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"Exercise and compare Parametric Equalizer sections on test signals\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"parametricEqualizer\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"hgroup\",\"label\":\"PARAMETRIC EQ SECTIONS\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"See Faust's filters.lib   for info and pointers\"}],\"items\":[{\"type\":\"vgroup\",\"label\":\"Low Shelf\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Low Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Low_Boost|Cut\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of low-frequency boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Transition Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Low_Shelf/Transition_Frequency\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Transition-frequency from boost (cut) to unity gain\"},{\"unit\":\"Hz\"}],\"init\":\"200\",\"min\":\"1\",\"max\":\"5000\",\"step\":\"1\"}]},{\"type\":\"vgroup\",\"label\":\"Peaking Equalizer\",\"meta\":[{\"2\":\"\"},{\"tooltip\":\"Parametric Equalizer   sections from filters.lib\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Peak Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Boost|Cut\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of   local boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Peak Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Frequency\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Peak   Frequency in Piano Key (PK) units (A440 = 49PK)\"},{\"unit\":\"PK\"}],\"init\":\"49\",\"min\":\"1\",\"max\":\"100\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Peak Q\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/Peaking_Equalizer/Peak_Q\",\"meta\":[{\"2\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Quality factor   (Q) of the peak = center-frequency/bandwidth\"}],\"init\":\"40\",\"min\":\"1\",\"max\":\"1000\",\"step\":\"0.1\"}]},{\"type\":\"vgroup\",\"label\":\"High Shelf\",\"meta\":[{\"3\":\"\"},{\"tooltip\":\"A high shelf provides a boost   or cut above some frequency\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"High Boost|Cut\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/High_Shelf/High_Boost|Cut\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Amount of   high-frequency boost or cut in decibels\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-40\",\"max\":\"40\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Transition Frequency\",\"address\":\"/PARAMETRIC_EQ_SECTIONS/High_Shelf/Transition_Frequency\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Transition-frequency from boost (cut) to unity gain\"},{\"unit\":\"Hz\"}],\"init\":\"8000\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("analyzers.lib/name", "Faust Analyzer Library");
	m.declare("analyzers.lib/version", "0.0");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("description", "Exercise and compare Parametric Equalizer sections on test signals");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "parametricEqualizer");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

