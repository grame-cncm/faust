/* ------------------------------------------------------------
author: "JOS"
license: "STK-4.3"
name: "DNN"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 8;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 8;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var input2 = 0;
		var input3 = 0;
		var input4 = 0;
		var input5 = 0;
		var input6 = 0;
		var input7 = 0;
		var output0 = 0;
		var output1 = 0;
		var output2 = 0;
		var output3 = 0;
		var output4 = 0;
		var output5 = 0;
		var output6 = 0;
		var output7 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		input2 = (HEAP32[inputs + (2 << 2) >> 2] | 0);
		input3 = (HEAP32[inputs + (3 << 2) >> 2] | 0);
		input4 = (HEAP32[inputs + (4 << 2) >> 2] | 0);
		input5 = (HEAP32[inputs + (5 << 2) >> 2] | 0);
		input6 = (HEAP32[inputs + (6 << 2) >> 2] | 0);
		input7 = (HEAP32[inputs + (7 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		output2 = (HEAP32[outputs + (2 << 2) >> 2] | 0);
		output3 = (HEAP32[outputs + (3 << 2) >> 2] | 0);
		output4 = (HEAP32[outputs + (4 << 2) >> 2] | 0);
		output5 = (HEAP32[outputs + (5 << 2) >> 2] | 0);
		output6 = (HEAP32[outputs + (6 << 2) >> 2] | 0);
		output7 = (HEAP32[outputs + (7 << 2) >> 2] | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input7 + ((i | 0) << 2) >> 2]));
			fTemp1 = +(+(HEAPF[input6 + ((i | 0) << 2) >> 2]));
			fTemp2 = +(+(HEAPF[input5 + ((i | 0) << 2) >> 2]));
			fTemp3 = +(+(HEAPF[input4 + ((i | 0) << 2) >> 2]));
			fTemp4 = +(+(HEAPF[input2 + ((i | 0) << 2) >> 2]));
			fTemp5 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp6 = +(+(HEAPF[input3 + ((i | 0) << 2) >> 2]));
			fTemp7 = +(+(30. * +(fTemp0)) + +(+(60. * +(fTemp1)) + +(+(10. * +(fTemp2)) + +(+(40. * +(fTemp3)) + +(+(+(20. * +(fTemp4)) + +(50. * +(fTemp5))) + +(70. * +(fTemp6)))))));
			fTemp8 = +(+(((+(fTemp7) > 0.) | 0)) * +(fTemp7));
			fTemp9 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp10 = +(+(43. * +(fTemp0)) + +(+(+(23. * +(fTemp2)) + +(+(53. * +(fTemp3)) + +(+(3. * +(fTemp6)) + +(+(33. * +(fTemp4)) + +(+(13. * +(fTemp9)) + +(63. * +(fTemp5))))))) + +(73. * +(fTemp1))));
			fTemp11 = +(+(((+(fTemp10) > 0.) | 0)) * +(fTemp10));
			fTemp12 = +(+(61. * +(fTemp0)) + +(+(11. * +(fTemp1)) + +(+(41. * +(fTemp2)) + +(+(+(21. * +(fTemp6)) + +(+(+(fTemp5) + +(31. * +(fTemp9))) + +(51. * +(fTemp4)))) + +(71. * +(fTemp3))))));
			fTemp13 = +(+(((+(fTemp12) > 0.) | 0)) * +(fTemp12));
			fTemp14 = +(+(+(24. * +(fTemp1)) + +(+(54. * +(fTemp2)) + +(+(4. * +(fTemp3)) + +(+(34. * +(fTemp6)) + +(+(+(14. * +(fTemp5)) + +(44. * +(fTemp9))) + +(64. * +(fTemp4))))))) + +(74. * +(fTemp0)));
			fTemp15 = +(+(fTemp14) * +(((+(fTemp14) > 0.) | 0)));
			fTemp16 = +(+(12. * +(fTemp0)) + +(+(42. * +(fTemp1)) + +(+(+(22. * +(fTemp3)) + +(+(52. * +(fTemp6)) + +(+(2. * +(fTemp4)) + +(+(32. * +(fTemp5)) + +(62. * +(fTemp9)))))) + +(72. * +(fTemp2)))));
			fTemp17 = +(+(((+(fTemp16) > 0.) | 0)) * +(fTemp16));
			fTemp18 = +(+(+(+(+(100. * +(fTemp8)) + +(110. * +(fTemp11))) + +(120. * +(fTemp13))) + +(130. * +(fTemp15))) + +(140. * +(fTemp17)));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(fTemp18) * +(((+(fTemp18) > 0.) | 0))));
			fTemp19 = +(+(121. * +(fTemp17)) + +(+(111. * +(fTemp15)) + +(+(101. * +(fTemp13)) + +(+(131. * +(fTemp8)) + +(141. * +(fTemp11))))));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp19) > 0.) | 0)) * +(fTemp19)));
			fTemp20 = +(+(102. * +(fTemp17)) + +(+(+(+(112. * +(fTemp8)) + +(122. * +(fTemp11))) + +(132. * +(fTemp13))) + +(142. * +(fTemp15))));
			HEAPF[output2 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp20) > 0.) | 0)) * +(fTemp20)));
			fTemp21 = +(+(133. * +(fTemp17)) + +(+(123. * +(fTemp15)) + +(+(113. * +(fTemp13)) + +(+(103. * +(fTemp11)) + +(143. * +(fTemp8))))));
			HEAPF[output3 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp21) > 0.) | 0)) * +(fTemp21)));
			fTemp22 = +(+(114. * +(fTemp17)) + +(+(104. * +(fTemp15)) + +(+(+(124. * +(fTemp8)) + +(134. * +(fTemp11))) + +(144. * +(fTemp13)))));
			HEAPF[output4 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp22) > 0.) | 0)) * +(fTemp22)));
			fTemp23 = +(+(+(+(+(105. * +(fTemp8)) + +(115. * +(fTemp11))) + +(125. * +(fTemp13))) + +(135. * +(fTemp15))) + +(145. * +(fTemp17)));
			HEAPF[output5 + ((i | 0) << 2) >> 2] = +(+(+(fTemp23) * +(((+(fTemp23) > 0.) | 0))));
			fTemp24 = +(+(126. * +(fTemp17)) + +(+(116. * +(fTemp15)) + +(+(106. * +(fTemp13)) + +(+(136. * +(fTemp8)) + +(146. * +(fTemp11))))));
			HEAPF[output6 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp24) > 0.) | 0)) * +(fTemp24)));
			fTemp25 = +(+(107. * +(fTemp17)) + +(+(+(+(117. * +(fTemp8)) + +(127. * +(fTemp11))) + +(137. * +(fTemp13))) + +(147. * +(fTemp15))));
			HEAPF[output7 + ((i | 0) << 2) >> 2] = +(+(+(((+(fTemp25) > 0.) | 0)) * +(fTemp25)));
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 4;
}

function getPathTablemydsp() {
	var pathTable = [];
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"DNN\",\"inputs\":\"8\",\"outputs\":\"8\",\"meta\":[{\"author\":\"JOS\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"license\":\"STK-4.3\"},{\"name\":\"DNN\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"DNN\",\"items\":[]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "JOS");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("license", "STK-4.3");
	m.declare("name", "DNN");
}

