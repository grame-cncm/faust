/* ------------------------------------------------------------
name: "spectralTilt"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(3.14159274 / +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 24 >> 2] = +(1. / +(tanf(+(0.5 / +(HEAPF[dsp + 4 >> 2])))));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 100.;
		HEAPF[dsp + 16 >> 2] = 5000.;
		HEAPF[dsp + 20 >> 2] = -0.5;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 36 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 44 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var fSlow19 = 0.;
		var fSlow20 = 0.;
		var fSlow21 = 0.;
		var fSlow22 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 12 >> 2]));
		fSlow1 = +(powf(+(+(+(fSlow0) + +(+(HEAPF[dsp + 16 >> 2]))) / +(fSlow0)), 1.));
		fSlow2 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(fSlow1)))));
		fSlow3 = +(+(HEAPF[dsp + 20 >> 2]));
		fSlow4 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(powf(+(fSlow1), +(1. - +(fSlow3))))))));
		fSlow5 = +(+(fSlow2) / +(fSlow4));
		fSlow6 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(fSlow0))));
		fSlow7 = +(6.28318548 * +(+(+(fSlow0) * +(fSlow2)) / +(fSlow6)));
		fSlow8 = +(+(HEAPF[dsp + 24 >> 2]) + +(fSlow7));
		fSlow9 = +(0. - +(+(+(fSlow7) - +(HEAPF[dsp + 24 >> 2])) / +(fSlow8)));
		fSlow10 = +(1. / +(fSlow8));
		fSlow11 = +(6.28318548 * +(+(+(fSlow0) * +(fSlow4)) / +(fSlow6)));
		fSlow12 = +(+(fSlow11) - +(HEAPF[dsp + 24 >> 2]));
		fSlow13 = +(tanf(+(+(HEAPF[dsp + 8 >> 2]) * +(+(fSlow0) * +(powf(+(fSlow1), +(0. - +(fSlow3))))))));
		fSlow14 = +(+(fSlow6) / +(fSlow13));
		fSlow15 = +(6.28318548 * +(fSlow0));
		fSlow16 = +(+(HEAPF[dsp + 24 >> 2]) + +(fSlow15));
		fSlow17 = +(0. - +(+(+(fSlow15) - +(HEAPF[dsp + 24 >> 2])) / +(fSlow16)));
		fSlow18 = +(1. / +(fSlow16));
		fSlow19 = +(6.28318548 * +(+(+(fSlow0) * +(fSlow13)) / +(fSlow6)));
		fSlow20 = +(+(HEAPF[dsp + 24 >> 2]) + +(fSlow19));
		fSlow21 = +(+(fSlow19) - +(HEAPF[dsp + 24 >> 2]));
		fSlow22 = +(+(+(fSlow6) * +(+(HEAPF[dsp + 24 >> 2]) + +(fSlow11))) / +(fSlow13));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(fTemp0);
			HEAPF[dsp + 36 + (0 << 2) >> 2] = +(+(+(fSlow17) * +(HEAPF[dsp + 36 + (1 << 2) >> 2])) + +(+(fSlow18) * +(+(+(fSlow20) * +(fTemp0)) + +(+(fSlow21) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])))));
			HEAPF[dsp + 44 + (0 << 2) >> 2] = +(+(fSlow14) * +(HEAPF[dsp + 36 + (0 << 2) >> 2]));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(+(fSlow9) * +(HEAPF[dsp + 52 + (1 << 2) >> 2])) + +(+(fSlow10) * +(+(+(fSlow12) * +(HEAPF[dsp + 44 + (1 << 2) >> 2])) + +(+(fSlow22) * +(HEAPF[dsp + 36 + (0 << 2) >> 2])))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(fSlow5) * +(HEAPF[dsp + 52 + (0 << 2) >> 2])));
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 36 + (1 << 2) >> 2] = +(HEAPF[dsp + 36 + (0 << 2) >> 2]);
			HEAPF[dsp + 44 + (1 << 2) >> 2] = +(HEAPF[dsp + 44 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 60;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/spectralTilt/Band_Start_Frequency"] = 12;
	pathTable["/spectralTilt/Band_Width"] = 16;
	pathTable["/spectralTilt/Slope_of_Spectral_Tilt_across_Band"] = 20;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"spectralTilt\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"description\":\"Demonstrate the Spectral Tilt effect on test signals\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"spectralTilt\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"spectralTilt\",\"items\":[{\"type\":\"hslider\",\"label\":\"Slope of Spectral Tilt across Band\",\"address\":\"/spectralTilt/Slope_of_Spectral_Tilt_across_Band\",\"meta\":[{\"1\":\"\"}],\"init\":\"-0.5\",\"min\":\"-1\",\"max\":\"1\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Band Start Frequency\",\"address\":\"/spectralTilt/Band_Start_Frequency\",\"meta\":[{\"2\":\"\"},{\"unit\":\"Hz\"}],\"init\":\"100\",\"min\":\"20\",\"max\":\"10000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Band Width\",\"address\":\"/spectralTilt/Band_Width\",\"meta\":[{\"3\":\"\"},{\"unit\":\"Hz\"}],\"init\":\"5000\",\"min\":\"100\",\"max\":\"10000\",\"step\":\"1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("description", "Demonstrate the Spectral Tilt effect on test signals");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "spectralTilt");
}

