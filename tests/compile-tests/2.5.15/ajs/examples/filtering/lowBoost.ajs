/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2006"
license: "BSD"
name: "lowboost"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sqrtf = foreign.sqrt;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(3.14159274 / +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0)))))));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 8 >> 2] = 1000.;
		HEAPF[dsp + 12 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		for (l0 = 0; (((l0 | 0) < 3) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var i = 0;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(tanf(+(+(HEAPF[dsp + 4 >> 2]) * +(+(HEAPF[dsp + 8 >> 2])))));
		fSlow1 = +(1. / +(+(+(fSlow0) * +(+(fSlow0) + 1.41421354)) + 1.));
		fSlow2 = +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 12 >> 2])))));
		fSlow3 = +(powf(+(fSlow0), 2.));
		fSlow4 = +(2. * +(+(+(fSlow2) * +(fSlow3)) + -1.));
		fSlow5 = +(+(+(fSlow0) * +(+(fSlow0) + -1.41421354)) + 1.);
		fSlow6 = +(2. * +(+(fSlow3) + -1.));
		fSlow7 = +(sqrtf(+(2. * +(fSlow2))));
		fSlow8 = +(+(fSlow2) * +(fSlow0));
		fSlow9 = +(+(+(fSlow0) * +(+(fSlow7) + +(fSlow8))) + 1.);
		fSlow10 = +(1. - +(+(fSlow0) * +(+(fSlow7) - +(fSlow8))));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(+(+(HEAPF[input0 + ((i | 0) << 2) >> 2])) - +(+(fSlow1) * +(+(+(fSlow5) * +(HEAPF[dsp + 16 + (2 << 2) >> 2])) + +(+(fSlow6) * +(HEAPF[dsp + 16 + (1 << 2) >> 2])))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(fSlow1) * +(+(+(+(fSlow4) * +(HEAPF[dsp + 16 + (1 << 2) >> 2])) + +(+(fSlow9) * +(HEAPF[dsp + 16 + (0 << 2) >> 2]))) + +(+(fSlow10) * +(HEAPF[dsp + 16 + (2 << 2) >> 2])))));
			HEAPF[dsp + 16 + (2 << 2) >> 2] = +(HEAPF[dsp + 16 + (1 << 2) >> 2]);
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 28;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/low-freq_shelving_boost/freq"] = 8;
	pathTable["/low-freq_shelving_boost/gain"] = 12;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"lowboost\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"author\":\"Grame\"},{\"copyright\":\"(c)GRAME 2006\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"lowboost\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"low-freq shelving boost\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/low-freq_shelving_boost/freq\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"unit\":\"Hz\"}],\"init\":\"1000\",\"min\":\"20\",\"max\":\"20000\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"gain\",\"address\":\"/low-freq_shelving_boost/gain\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"unit\":\"dB\"}],\"init\":\"0\",\"min\":\"-20\",\"max\":\"20\",\"step\":\"0.1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Grame");
	m.declare("copyright", "(c)GRAME 2006");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "lowboost");
	m.declare("version", "1.0");
}

