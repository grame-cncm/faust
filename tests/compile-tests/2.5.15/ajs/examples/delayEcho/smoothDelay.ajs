/* ------------------------------------------------------------
author: "Yann Orlarey"
copyright: "Grame"
license: "STK-4.3"
name: "smoothDelay"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var max_f = foreign.max;
	var min_f = foreign.min;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))));
		HEAPF[dsp + 8 >> 2] = +(0.00100000005 * +(HEAPF[dsp + 4 >> 2]));
		HEAPF[dsp + 16 >> 2] = +(1000. / +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 0.;
		HEAPF[dsp + 20 >> 2] = 10.;
		HEAPF[dsp + 56 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 24 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 32 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 48 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		HEAP32[dsp + 60 >> 2] = 0;
		for (l4 = 0; (((l4 | 0) < 1048576) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 4194368 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 1048576) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 4194376 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 8388680 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var iTemp3 = 0;
		var iTemp4 = 0;
		var fTemp5 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 12 >> 2])));
		fSlow1 = +(+(HEAPF[dsp + 16 >> 2]) / +(+(HEAPF[dsp + 20 >> 2])));
		fSlow2 = +(0. - +(fSlow1));
		fSlow3 = +(0.00999999978 * +(+(HEAPF[dsp + 56 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(((+(HEAPF[dsp + 24 + (1 << 2) >> 2]) != 0.) | 0)?+(((((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) > 0.) | 0) & ((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) < 1.) | 0)) | 0)?+(HEAPF[dsp + 24 + (1 << 2) >> 2]):0.):+(((((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) == 0.) | 0) & ((+(fSlow0) != +(HEAPF[dsp + 40 + (1 << 2) >> 2])) | 0)) | 0)?+(fSlow1):+(((((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) == 1.) | 0) & ((+(fSlow0) != +(HEAPF[dsp + 48 + (1 << 2) >> 2])) | 0)) | 0)?+(fSlow2):0.)));
			HEAPF[dsp + 24 + (0 << 2) >> 2] = +(fTemp0);
			HEAPF[dsp + 32 + (0 << 2) >> 2] = +(max_f(0., +(min_f(1., +(+(HEAPF[dsp + 32 + (1 << 2) >> 2]) + +(fTemp0))))));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(((((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) >= 1.) | 0) & ((+(HEAPF[dsp + 48 + (1 << 2) >> 2]) != +(fSlow0)) | 0)) | 0)?+(fSlow0):+(HEAPF[dsp + 40 + (1 << 2) >> 2]));
			HEAPF[dsp + 48 + (0 << 2) >> 2] = +(((((+(HEAPF[dsp + 32 + (1 << 2) >> 2]) <= 0.) | 0) & ((+(HEAPF[dsp + 40 + (1 << 2) >> 2]) != +(fSlow0)) | 0)) | 0)?+(fSlow0):+(HEAPF[dsp + 48 + (1 << 2) >> 2]));
			fTemp1 = +(1. - +(HEAPF[dsp + 32 + (0 << 2) >> 2]));
			fTemp2 = +(+(+(HEAPF[input0 + ((i | 0) << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 4194368 + (1 << 2) >> 2])));
			HEAPF[dsp + 64 + ((((HEAP32[dsp + 60 >> 2] | 0) & 1048575) | 0) << 2) >> 2] = +(fTemp2);
			iTemp3 = ~~(+(min_f(524288., +(max_f(0., +(HEAPF[dsp + 40 + (0 << 2) >> 2]))))));
			iTemp4 = ~~(+(min_f(524288., +(max_f(0., +(HEAPF[dsp + 48 + (0 << 2) >> 2]))))));
			HEAPF[dsp + 4194368 + (0 << 2) >> 2] = +(+(+(fTemp1) * +(HEAPF[dsp + 64 + ((((((HEAP32[dsp + 60 >> 2] | 0) - (iTemp3 | 0)) | 0) & 1048575) | 0) << 2) >> 2])) + +(+(HEAPF[dsp + 32 + (0 << 2) >> 2]) * +(HEAPF[dsp + 64 + ((((((HEAP32[dsp + 60 >> 2] | 0) - (iTemp4 | 0)) | 0) & 1048575) | 0) << 2) >> 2])));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(HEAPF[dsp + 4194368 + (0 << 2) >> 2]));
			fTemp5 = +(+(+(HEAPF[input1 + ((i | 0) << 2) >> 2])) + +(+(fSlow3) * +(HEAPF[dsp + 8388680 + (1 << 2) >> 2])));
			HEAPF[dsp + 4194376 + ((((HEAP32[dsp + 60 >> 2] | 0) & 1048575) | 0) << 2) >> 2] = +(fTemp5);
			HEAPF[dsp + 8388680 + (0 << 2) >> 2] = +(+(+(fTemp1) * +(HEAPF[dsp + 4194376 + ((((((HEAP32[dsp + 60 >> 2] | 0) - (iTemp3 | 0)) | 0) & 1048575) | 0) << 2) >> 2])) + +(+(HEAPF[dsp + 32 + (0 << 2) >> 2]) * +(HEAPF[dsp + 4194376 + ((((((HEAP32[dsp + 60 >> 2] | 0) - (iTemp4 | 0)) | 0) & 1048575) | 0) << 2) >> 2])));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(HEAPF[dsp + 8388680 + (0 << 2) >> 2]));
			HEAPF[dsp + 24 + (1 << 2) >> 2] = +(HEAPF[dsp + 24 + (0 << 2) >> 2]);
			HEAPF[dsp + 32 + (1 << 2) >> 2] = +(HEAPF[dsp + 32 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 48 + (1 << 2) >> 2] = +(HEAPF[dsp + 48 + (0 << 2) >> 2]);
			HEAP32[dsp + 60 >> 2] = (((HEAP32[dsp + 60 >> 2] | 0) + 1) | 0);
			HEAPF[dsp + 4194368 + (1 << 2) >> 2] = +(HEAPF[dsp + 4194368 + (0 << 2) >> 2]);
			HEAPF[dsp + 8388680 + (1 << 2) >> 2] = +(HEAPF[dsp + 8388680 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 8388688;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/smoothDelay/delay"] = 12;
	pathTable["/smoothDelay/interpolation"] = 20;
	pathTable["/smoothDelay/feedback"] = 56;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"smoothDelay\",\"inputs\":\"2\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Yann Orlarey\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"Grame\"},{\"delays.lib/name\":\"Faust Delay Library\"},{\"delays.lib/version\":\"0.0\"},{\"license\":\"STK-4.3\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"smoothDelay\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"smoothDelay\",\"items\":[{\"type\":\"hslider\",\"label\":\"delay\",\"address\":\"/smoothDelay/delay\",\"meta\":[{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"5000\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"feedback\",\"address\":\"/smoothDelay/feedback\",\"meta\":[{\"style\":\"knob\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"100\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"interpolation\",\"address\":\"/smoothDelay/interpolation\",\"meta\":[{\"style\":\"knob\"},{\"unit\":\"ms\"}],\"init\":\"10\",\"min\":\"1\",\"max\":\"100\",\"step\":\"0.1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Yann Orlarey");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "Grame");
	m.declare("delays.lib/name", "Faust Delay Library");
	m.declare("delays.lib/version", "0.0");
	m.declare("license", "STK-4.3");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "smoothDelay");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "1.0");
}

