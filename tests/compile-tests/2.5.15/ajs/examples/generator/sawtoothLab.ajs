/* ------------------------------------------------------------
author: "JOS, revised by RM"
name: "sawtoothLab"
version: "0.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var expf = foreign.exp;
	var fabsf = foreign.abs;
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 40 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 44 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 40 >> 2] | 0))))));
		HEAPF[dsp + 48 >> 2] = +(1. / +(HEAPF[dsp + 44 >> 2]));
		HEAPF[dsp + 84 >> 2] = +(0.25 * +(HEAPF[dsp + 44 >> 2]));
		HEAPF[dsp + 96 >> 2] = +(0.0416666679 * +(powf(+(HEAPF[dsp + 44 >> 2]), 2.)));
		HEAPF[dsp + 116 >> 2] = +(0.00520833349 * +(powf(+(HEAPF[dsp + 44 >> 2]), 3.)));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = -20.;
		HEAPF[dsp + 28 >> 2] = 0.;
		HEAPF[dsp + 32 >> 2] = 0.;
		HEAPF[dsp + 36 >> 2] = 2.;
		HEAPF[dsp + 52 >> 2] = 49.;
		HEAPF[dsp + 56 >> 2] = 0.100000001;
		HEAPF[dsp + 144 >> 2] = -0.100000001;
		HEAPF[dsp + 212 >> 2] = 0.100000001;
		HEAPF[dsp + 280 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		var l8 = 0;
		var l9 = 0;
		var l10 = 0;
		var l11 = 0;
		var l12 = 0;
		var l13 = 0;
		var l14 = 0;
		var l15 = 0;
		var l16 = 0;
		var l17 = 0;
		var l18 = 0;
		var l19 = 0;
		var l20 = 0;
		var l21 = 0;
		var l22 = 0;
		var l23 = 0;
		var l24 = 0;
		var l25 = 0;
		var l26 = 0;
		var l27 = 0;
		var l28 = 0;
		for (l0 = 0; (((l0 | 0) < 4) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + ((l0 | 0) << 2) >> 2] = 0;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 20 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 76 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 100 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 108 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		for (l8 = 0; (((l8 | 0) < 2) | 0); l8 = (((l8 | 0) + 1) | 0)) {
			HEAPF[dsp + 120 + ((l8 | 0) << 2) >> 2] = 0.;
			
		}
		for (l9 = 0; (((l9 | 0) < 2) | 0); l9 = (((l9 | 0) + 1) | 0)) {
			HEAPF[dsp + 128 + ((l9 | 0) << 2) >> 2] = 0.;
			
		}
		for (l10 = 0; (((l10 | 0) < 2) | 0); l10 = (((l10 | 0) + 1) | 0)) {
			HEAPF[dsp + 136 + ((l10 | 0) << 2) >> 2] = 0.;
			
		}
		for (l11 = 0; (((l11 | 0) < 2) | 0); l11 = (((l11 | 0) + 1) | 0)) {
			HEAPF[dsp + 148 + ((l11 | 0) << 2) >> 2] = 0.;
			
		}
		for (l12 = 0; (((l12 | 0) < 2) | 0); l12 = (((l12 | 0) + 1) | 0)) {
			HEAPF[dsp + 156 + ((l12 | 0) << 2) >> 2] = 0.;
			
		}
		for (l13 = 0; (((l13 | 0) < 2) | 0); l13 = (((l13 | 0) + 1) | 0)) {
			HEAPF[dsp + 164 + ((l13 | 0) << 2) >> 2] = 0.;
			
		}
		for (l14 = 0; (((l14 | 0) < 2) | 0); l14 = (((l14 | 0) + 1) | 0)) {
			HEAPF[dsp + 172 + ((l14 | 0) << 2) >> 2] = 0.;
			
		}
		for (l15 = 0; (((l15 | 0) < 2) | 0); l15 = (((l15 | 0) + 1) | 0)) {
			HEAPF[dsp + 180 + ((l15 | 0) << 2) >> 2] = 0.;
			
		}
		for (l16 = 0; (((l16 | 0) < 2) | 0); l16 = (((l16 | 0) + 1) | 0)) {
			HEAPF[dsp + 188 + ((l16 | 0) << 2) >> 2] = 0.;
			
		}
		for (l17 = 0; (((l17 | 0) < 2) | 0); l17 = (((l17 | 0) + 1) | 0)) {
			HEAPF[dsp + 196 + ((l17 | 0) << 2) >> 2] = 0.;
			
		}
		for (l18 = 0; (((l18 | 0) < 2) | 0); l18 = (((l18 | 0) + 1) | 0)) {
			HEAPF[dsp + 204 + ((l18 | 0) << 2) >> 2] = 0.;
			
		}
		for (l19 = 0; (((l19 | 0) < 2) | 0); l19 = (((l19 | 0) + 1) | 0)) {
			HEAPF[dsp + 216 + ((l19 | 0) << 2) >> 2] = 0.;
			
		}
		for (l20 = 0; (((l20 | 0) < 2) | 0); l20 = (((l20 | 0) + 1) | 0)) {
			HEAPF[dsp + 224 + ((l20 | 0) << 2) >> 2] = 0.;
			
		}
		for (l21 = 0; (((l21 | 0) < 2) | 0); l21 = (((l21 | 0) + 1) | 0)) {
			HEAPF[dsp + 232 + ((l21 | 0) << 2) >> 2] = 0.;
			
		}
		for (l22 = 0; (((l22 | 0) < 2) | 0); l22 = (((l22 | 0) + 1) | 0)) {
			HEAPF[dsp + 240 + ((l22 | 0) << 2) >> 2] = 0.;
			
		}
		for (l23 = 0; (((l23 | 0) < 2) | 0); l23 = (((l23 | 0) + 1) | 0)) {
			HEAPF[dsp + 248 + ((l23 | 0) << 2) >> 2] = 0.;
			
		}
		for (l24 = 0; (((l24 | 0) < 2) | 0); l24 = (((l24 | 0) + 1) | 0)) {
			HEAPF[dsp + 256 + ((l24 | 0) << 2) >> 2] = 0.;
			
		}
		for (l25 = 0; (((l25 | 0) < 2) | 0); l25 = (((l25 | 0) + 1) | 0)) {
			HEAPF[dsp + 264 + ((l25 | 0) << 2) >> 2] = 0.;
			
		}
		for (l26 = 0; (((l26 | 0) < 2) | 0); l26 = (((l26 | 0) + 1) | 0)) {
			HEAPF[dsp + 272 + ((l26 | 0) << 2) >> 2] = 0.;
			
		}
		for (l27 = 0; (((l27 | 0) < 2) | 0); l27 = (((l27 | 0) + 1) | 0)) {
			HEAP32[dsp + 284 + ((l27 | 0) << 2) >> 2] = 0;
			
		}
		for (l28 = 0; (((l28 | 0) < 4) | 0); l28 = (((l28 | 0) + 1) | 0)) {
			HEAPF[dsp + 292 + ((l28 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 40 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var iSlow1 = 0;
		var iSlow2 = 0;
		var iSlow3 = 0;
		var iSlow4 = 0;
		var iSlow5 = 0;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var iSlow8 = 0;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var iSlow11 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var fTemp12 = 0.;
		var fTemp13 = 0.;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var fTemp18 = 0.;
		var fTemp19 = 0.;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var j0 = 3;
		var j1 = 3;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 0 >> 2]))))));
		iSlow1 = ~~(+(+(HEAPF[dsp + 28 >> 2])));
		iSlow2 = ~~(+(+(HEAPF[dsp + 32 >> 2])));
		iSlow3 = ~~(+(+(+(HEAPF[dsp + 36 >> 2])) + -1.));
		iSlow4 = (((iSlow3 | 0) >= 2) | 0);
		iSlow5 = (((iSlow3 | 0) >= 1) | 0);
		fSlow6 = +(expf(+(0. - +(+(HEAPF[dsp + 48 >> 2]) / +(+(HEAPF[dsp + 56 >> 2]))))));
		fSlow7 = +(440. * +(+(powf(2., +(0.0833333358 * +(+(+(HEAPF[dsp + 52 >> 2])) + -49.)))) * +(1. - +(fSlow6))));
		iSlow8 = (((iSlow3 | 0) >= 3) | 0);
		fSlow9 = +(+(0.00999999978 * +(+(HEAPF[dsp + 144 >> 2]))) + 1.);
		fSlow10 = +(+(0.00999999978 * +(+(HEAPF[dsp + 212 >> 2]))) + 1.);
		iSlow11 = ~~(+(+(HEAPF[dsp + 280 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 4 + (0 << 2) >> 2] = 1;
			HEAPF[dsp + 20 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 20 + (1 << 2) >> 2])));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(fSlow7) + +(+(fSlow6) * +(HEAPF[dsp + 60 + (1 << 2) >> 2])));
			fTemp0 = +(max_f(20., +(fabsf(+(HEAPF[dsp + 60 + (0 << 2) >> 2])))));
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +(fTemp0);
			fTemp1 = +(+(HEAPF[dsp + 76 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 48 >> 2]) * +(HEAPF[dsp + 68 + (1 << 2) >> 2])));
			HEAPF[dsp + 76 + (0 << 2) >> 2] = +(+(fTemp1) - +(floorf(+(fTemp1))));
			fTemp2 = +(2. * +(HEAPF[dsp + 76 + (0 << 2) >> 2]));
			fTemp3 = +(+(fTemp2) + -1.);
			fTemp4 = +(powf(+(fTemp3), 2.));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(fTemp4);
			fTemp5 = +(powf(+(fTemp3), 3.));
			HEAPF[dsp + 100 + (0 << 2) >> 2] = +(+(fTemp5) + +(1. - +(fTemp2)));
			fTemp6 = +(+(+(fTemp5) + +(1. - +(+(fTemp2) + +(HEAPF[dsp + 100 + (1 << 2) >> 2])))) / +(fTemp0));
			HEAPF[dsp + 108 + (0 << 2) >> 2] = +(fTemp6);
			fTemp7 = +(+(fTemp4) * +(+(fTemp4) + -2.));
			HEAPF[dsp + 120 + (0 << 2) >> 2] = +(fTemp7);
			fTemp8 = +(+(+(fTemp7) - +(HEAPF[dsp + 120 + (1 << 2) >> 2])) / +(fTemp0));
			HEAPF[dsp + 128 + (0 << 2) >> 2] = +(fTemp8);
			fTemp9 = +(+(+(fTemp8) - +(HEAPF[dsp + 128 + (1 << 2) >> 2])) / +(fTemp0));
			HEAPF[dsp + 136 + (0 << 2) >> 2] = +(fTemp9);
			fTemp10 = +(max_f(20., +(fabsf(+(+(fSlow9) * +(HEAPF[dsp + 60 + (0 << 2) >> 2]))))));
			HEAPF[dsp + 148 + (0 << 2) >> 2] = +(fTemp10);
			fTemp11 = +(+(HEAPF[dsp + 156 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 48 >> 2]) * +(HEAPF[dsp + 148 + (1 << 2) >> 2])));
			HEAPF[dsp + 156 + (0 << 2) >> 2] = +(+(fTemp11) - +(floorf(+(fTemp11))));
			fTemp12 = +(2. * +(HEAPF[dsp + 156 + (0 << 2) >> 2]));
			fTemp13 = +(+(fTemp12) + -1.);
			fTemp14 = +(powf(+(fTemp13), 2.));
			HEAPF[dsp + 164 + (0 << 2) >> 2] = +(fTemp14);
			fTemp15 = +(powf(+(fTemp13), 3.));
			HEAPF[dsp + 172 + (0 << 2) >> 2] = +(+(fTemp15) + +(1. - +(fTemp12)));
			fTemp16 = +(+(+(fTemp15) + +(1. - +(+(fTemp12) + +(HEAPF[dsp + 172 + (1 << 2) >> 2])))) / +(fTemp10));
			HEAPF[dsp + 180 + (0 << 2) >> 2] = +(fTemp16);
			fTemp17 = +(+(fTemp14) * +(+(fTemp14) + -2.));
			HEAPF[dsp + 188 + (0 << 2) >> 2] = +(fTemp17);
			fTemp18 = +(+(+(fTemp17) - +(HEAPF[dsp + 188 + (1 << 2) >> 2])) / +(fTemp10));
			HEAPF[dsp + 196 + (0 << 2) >> 2] = +(fTemp18);
			fTemp19 = +(+(+(fTemp18) - +(HEAPF[dsp + 196 + (1 << 2) >> 2])) / +(fTemp10));
			HEAPF[dsp + 204 + (0 << 2) >> 2] = +(fTemp19);
			fTemp20 = +(max_f(20., +(fabsf(+(+(fSlow10) * +(HEAPF[dsp + 60 + (0 << 2) >> 2]))))));
			HEAPF[dsp + 216 + (0 << 2) >> 2] = +(fTemp20);
			fTemp21 = +(+(HEAPF[dsp + 224 + (1 << 2) >> 2]) + +(+(HEAPF[dsp + 48 >> 2]) * +(HEAPF[dsp + 216 + (1 << 2) >> 2])));
			HEAPF[dsp + 224 + (0 << 2) >> 2] = +(+(fTemp21) - +(floorf(+(fTemp21))));
			fTemp22 = +(2. * +(HEAPF[dsp + 224 + (0 << 2) >> 2]));
			fTemp23 = +(+(fTemp22) + -1.);
			fTemp24 = +(powf(+(fTemp23), 2.));
			HEAPF[dsp + 232 + (0 << 2) >> 2] = +(fTemp24);
			fTemp25 = +(powf(+(fTemp23), 3.));
			HEAPF[dsp + 240 + (0 << 2) >> 2] = +(+(fTemp25) + +(1. - +(fTemp22)));
			fTemp26 = +(+(+(fTemp25) + +(1. - +(+(fTemp22) + +(HEAPF[dsp + 240 + (1 << 2) >> 2])))) / +(fTemp20));
			HEAPF[dsp + 248 + (0 << 2) >> 2] = +(fTemp26);
			fTemp27 = +(+(fTemp24) * +(+(fTemp24) + -2.));
			HEAPF[dsp + 256 + (0 << 2) >> 2] = +(fTemp27);
			fTemp28 = +(+(+(fTemp27) - +(HEAPF[dsp + 256 + (1 << 2) >> 2])) / +(fTemp20));
			HEAPF[dsp + 264 + (0 << 2) >> 2] = +(fTemp28);
			fTemp29 = +(+(+(fTemp28) - +(HEAPF[dsp + 264 + (1 << 2) >> 2])) / +(fTemp20));
			HEAPF[dsp + 272 + (0 << 2) >> 2] = +(fTemp29);
			HEAP32[dsp + 284 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 284 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			fTemp30 = +(4.65661287e-10 * +((HEAP32[dsp + 284 + (0 << 2) >> 2] | 0)));
			HEAPF[dsp + 292 + (0 << 2) >> 2] = +(+(+(0.522189379 * +(HEAPF[dsp + 292 + (3 << 2) >> 2])) + +(+(fTemp30) + +(2.49495602 * +(HEAPF[dsp + 292 + (1 << 2) >> 2])))) - +(2.0172658 * +(HEAPF[dsp + 292 + (2 << 2) >> 2])));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(HEAPF[dsp + 20 + (0 << 2) >> 2]) * +((iSlow1 | 0)?+(+(HEAPF[input0 + ((i | 0) << 2) >> 2])):+((iSlow2 | 0)?+((iSlow11 | 0)?+(+(+(0.0499220341 * +(HEAPF[dsp + 292 + (0 << 2) >> 2])) + +(0.0506126992 * +(HEAPF[dsp + 292 + (2 << 2) >> 2]))) - +(+(0.0959935337 * +(HEAPF[dsp + 292 + (1 << 2) >> 2])) + +(0.00440878607 * +(HEAPF[dsp + 292 + (3 << 2) >> 2])))):+(fTemp30)):+(0.333333343 * +(+(HEAPF[dsp + 20 + (0 << 2) >> 2]) * +(+(+((iSlow4 | 0)?+((iSlow8 | 0)?+(+(HEAPF[dsp + 116 >> 2]) * +(+(+((HEAP32[dsp + 4 + (3 << 2) >> 2] | 0)) * +(+(fTemp9) - +(HEAPF[dsp + 136 + (1 << 2) >> 2]))) / +(fTemp0))):+(+(HEAPF[dsp + 96 >> 2]) * +(+(+((HEAP32[dsp + 4 + (2 << 2) >> 2] | 0)) * +(+(fTemp6) - +(HEAPF[dsp + 108 + (1 << 2) >> 2]))) / +(fTemp0)))):+((iSlow5 | 0)?+(+(HEAPF[dsp + 84 >> 2]) * +(+(+((HEAP32[dsp + 4 + (1 << 2) >> 2] | 0)) * +(+(fTemp4) - +(HEAPF[dsp + 88 + (1 << 2) >> 2]))) / +(fTemp0))):+(fTemp3))) + +((iSlow4 | 0)?+((iSlow8 | 0)?+(+(HEAPF[dsp + 116 >> 2]) * +(+(+((HEAP32[dsp + 4 + (3 << 2) >> 2] | 0)) * +(+(fTemp19) - +(HEAPF[dsp + 204 + (1 << 2) >> 2]))) / +(fTemp10))):+(+(HEAPF[dsp + 96 >> 2]) * +(+(+((HEAP32[dsp + 4 + (2 << 2) >> 2] | 0)) * +(+(fTemp16) - +(HEAPF[dsp + 180 + (1 << 2) >> 2]))) / +(fTemp10)))):+((iSlow5 | 0)?+(+(HEAPF[dsp + 84 >> 2]) * +(+(+((HEAP32[dsp + 4 + (1 << 2) >> 2] | 0)) * +(+(fTemp14) - +(HEAPF[dsp + 164 + (1 << 2) >> 2]))) / +(fTemp10))):+(fTemp13)))) + +((iSlow4 | 0)?+((iSlow8 | 0)?+(+(HEAPF[dsp + 116 >> 2]) * +(+(+((HEAP32[dsp + 4 + (3 << 2) >> 2] | 0)) * +(+(fTemp29) - +(HEAPF[dsp + 272 + (1 << 2) >> 2]))) / +(fTemp20))):+(+(HEAPF[dsp + 96 >> 2]) * +(+(+((HEAP32[dsp + 4 + (2 << 2) >> 2] | 0)) * +(+(fTemp26) - +(HEAPF[dsp + 248 + (1 << 2) >> 2]))) / +(fTemp20)))):+((iSlow5 | 0)?+(+(HEAPF[dsp + 84 >> 2]) * +(+(+((HEAP32[dsp + 4 + (1 << 2) >> 2] | 0)) * +(+(fTemp24) - +(HEAPF[dsp + 232 + (1 << 2) >> 2]))) / +(fTemp20))):+(fTemp23))))))))));
			for (j0 = 3; (((j0 | 0) > 0) | 0); j0 = (((j0 | 0) - 1) | 0)) {
				HEAP32[dsp + 4 + ((j0 | 0) << 2) >> 2] = (HEAP32[dsp + 4 + ((((j0 | 0) - 1) | 0) << 2) >> 2] | 0);
				
			}
			HEAPF[dsp + 20 + (1 << 2) >> 2] = +(HEAPF[dsp + 20 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 + (1 << 2) >> 2] = +(HEAPF[dsp + 76 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 100 + (1 << 2) >> 2] = +(HEAPF[dsp + 100 + (0 << 2) >> 2]);
			HEAPF[dsp + 108 + (1 << 2) >> 2] = +(HEAPF[dsp + 108 + (0 << 2) >> 2]);
			HEAPF[dsp + 120 + (1 << 2) >> 2] = +(HEAPF[dsp + 120 + (0 << 2) >> 2]);
			HEAPF[dsp + 128 + (1 << 2) >> 2] = +(HEAPF[dsp + 128 + (0 << 2) >> 2]);
			HEAPF[dsp + 136 + (1 << 2) >> 2] = +(HEAPF[dsp + 136 + (0 << 2) >> 2]);
			HEAPF[dsp + 148 + (1 << 2) >> 2] = +(HEAPF[dsp + 148 + (0 << 2) >> 2]);
			HEAPF[dsp + 156 + (1 << 2) >> 2] = +(HEAPF[dsp + 156 + (0 << 2) >> 2]);
			HEAPF[dsp + 164 + (1 << 2) >> 2] = +(HEAPF[dsp + 164 + (0 << 2) >> 2]);
			HEAPF[dsp + 172 + (1 << 2) >> 2] = +(HEAPF[dsp + 172 + (0 << 2) >> 2]);
			HEAPF[dsp + 180 + (1 << 2) >> 2] = +(HEAPF[dsp + 180 + (0 << 2) >> 2]);
			HEAPF[dsp + 188 + (1 << 2) >> 2] = +(HEAPF[dsp + 188 + (0 << 2) >> 2]);
			HEAPF[dsp + 196 + (1 << 2) >> 2] = +(HEAPF[dsp + 196 + (0 << 2) >> 2]);
			HEAPF[dsp + 204 + (1 << 2) >> 2] = +(HEAPF[dsp + 204 + (0 << 2) >> 2]);
			HEAPF[dsp + 216 + (1 << 2) >> 2] = +(HEAPF[dsp + 216 + (0 << 2) >> 2]);
			HEAPF[dsp + 224 + (1 << 2) >> 2] = +(HEAPF[dsp + 224 + (0 << 2) >> 2]);
			HEAPF[dsp + 232 + (1 << 2) >> 2] = +(HEAPF[dsp + 232 + (0 << 2) >> 2]);
			HEAPF[dsp + 240 + (1 << 2) >> 2] = +(HEAPF[dsp + 240 + (0 << 2) >> 2]);
			HEAPF[dsp + 248 + (1 << 2) >> 2] = +(HEAPF[dsp + 248 + (0 << 2) >> 2]);
			HEAPF[dsp + 256 + (1 << 2) >> 2] = +(HEAPF[dsp + 256 + (0 << 2) >> 2]);
			HEAPF[dsp + 264 + (1 << 2) >> 2] = +(HEAPF[dsp + 264 + (0 << 2) >> 2]);
			HEAPF[dsp + 272 + (1 << 2) >> 2] = +(HEAPF[dsp + 272 + (0 << 2) >> 2]);
			HEAP32[dsp + 284 + (1 << 2) >> 2] = (HEAP32[dsp + 284 + (0 << 2) >> 2] | 0);
			for (j1 = 3; (((j1 | 0) > 0) | 0); j1 = (((j1 | 0) - 1) | 0)) {
				HEAPF[dsp + 292 + ((j1 | 0) << 2) >> 2] = +(HEAPF[dsp + 292 + ((((j1 | 0) - 1) | 0) << 2) >> 2]);
				
			}
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 308;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/External_Signal_Input_(overrides_Sawtooth/Noise___selection_above)"] = 28;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/Noise_(White_or_Pink_-_uses_only_Amplitude_control_on___the_left)"] = 32;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/Pink_instead_of_White_Noise_(also_called_1/f_Noise)"] = 280;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Saw_Order"] = 36;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Amplitude"] = 0;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Frequency"] = 52;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Portamento"] = 56;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Detuning_1"] = 144;
	pathTable["/SAWTOOTH_OSCILLATOR/0x00/Detuning_2"] = 212;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"sawtoothLab\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"author\":\"JOS, revised by RM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"description\":\"An application demonstrating the different sawtooth oscillators of Faust.\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"sawtoothLab\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"SAWTOOTH OSCILLATOR\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"See Faust's oscillators.lib   for documentation and references\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"vslider\",\"label\":\"Amplitude\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Amplitude\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Sawtooth   waveform amplitude\"},{\"unit\":\"dB\"}],\"init\":\"-20\",\"min\":\"-120\",\"max\":\"10\",\"step\":\"0.1\"},{\"type\":\"vslider\",\"label\":\"Frequency\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Frequency\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)\"},{\"unit\":\"PK\"}],\"init\":\"49\",\"min\":\"1\",\"max\":\"88\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Detuning 1\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Detuning_1\",\"meta\":[{\"3\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Percentange frequency-shift  up or down for second oscillator\"},{\"unit\":\"%%\"}],\"init\":\"-0.1\",\"min\":\"-10\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Detuning 2\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Detuning_2\",\"meta\":[{\"4\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Percentange frequency-shift up or down for third detuned oscillator\"},{\"unit\":\"%%\"}],\"init\":\"0.1\",\"min\":\"-10\",\"max\":\"10\",\"step\":\"0.01\"},{\"type\":\"vslider\",\"label\":\"Portamento\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Portamento\",\"meta\":[{\"5\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Portamento (frequency-glide) time-constant in seconds\"},{\"unit\":\"sec\"}],\"init\":\"0.1\",\"min\":\"0.001\",\"max\":\"10\",\"step\":\"0.001\"},{\"type\":\"nentry\",\"label\":\"Saw Order\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Saw_Order\",\"meta\":[{\"6\":\"\"},{\"tooltip\":\"Order of sawtootn aliasing   suppression\"}],\"init\":\"2\",\"min\":\"1\",\"max\":\"4\",\"step\":\"1\"},{\"type\":\"vgroup\",\"label\":\"Alternate Signals\",\"meta\":[{\"7\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Noise (White or Pink - uses only Amplitude control on   the left)\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/Noise_(White_or_Pink_-_uses_only_Amplitude_control_on___the_left)\",\"meta\":[{\"0\":\"\"}]},{\"type\":\"checkbox\",\"label\":\"Pink instead of White Noise (also called 1/f Noise)\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/Pink_instead_of_White_Noise_(also_called_1/f_Noise)\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the   same total power in every octave\"}]},{\"type\":\"checkbox\",\"label\":\"External Signal Input (overrides Sawtooth/Noise   selection above)\",\"address\":\"/SAWTOOTH_OSCILLATOR/0x00/Alternate_Signals/External_Signal_Input_(overrides_Sawtooth/Noise___selection_above)\",\"meta\":[{\"2\":\"\"}]}]}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "JOS, revised by RM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("description", "An application demonstrating the different sawtooth oscillators of Faust.");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "sawtoothLab");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "0.0");
}

