/* ------------------------------------------------------------
author: "Grame"
copyright: "(c)GRAME 2014"
license: "BSD"
name: "tester2"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var floorf = foreign.floor;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }

	function getNumInputsmydspSIG0(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputsmydspSIG0(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function instanceInitmydspSIG0(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		var l2 = 0;
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAP32[dsp + 262228 + ((l2 | 0) << 2) >> 2] = 0;
			
		}
		
	}
	
	function fillmydspSIG0(dsp, count, output) {
		dsp = dsp | 0;
		count = count | 0;
		output = output | 0;
		var i = 0;
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAP32[dsp + 262228 + (0 << 2) >> 2] = (((HEAP32[dsp + 262228 + (1 << 2) >> 2] | 0) + 1) | 0);
			HEAPF[output + ((i | 0) << 2) >> 2] = +(sinf(+(9.58738019e-05 * +((((HEAP32[dsp + 262228 + (0 << 2) >> 2] | 0) + -1) | 0)))));
			HEAP32[dsp + 262228 + (1 << 2) >> 2] = (HEAP32[dsp + 262228 + (0 << 2) >> 2] | 0);
			
		}
		
	}
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 0;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 2;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceInitmydspSIG0(dsp, (samplingFreq | 0));
		fillmydspSIG0(dsp, 65537, (dsp + 0 | 0));
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 262176 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 262180 >> 2] = +(1. / +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 262176 >> 2] | 0)))))));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 262148 >> 2] = -96.;
		HEAPF[dsp + 262160 >> 2] = 0.;
		HEAPF[dsp + 262172 >> 2] = 0.;
		HEAPF[dsp + 262184 >> 2] = 440.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 262152 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 262164 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 262188 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 3) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAP32[dsp + 262196 + ((l4 | 0) << 2) >> 2] = 0;
			
		}
		for (l5 = 0; (((l5 | 0) < 3) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 262208 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 262220 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 262176 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var output0 = 0;
		var output1 = 0;
		var fSlow0 = 0.;
		var iSlow1 = 0;
		var iSlow2 = 0;
		var iSlow3 = 0;
		var iSlow4 = 0;
		var iSlow5 = 0;
		var fSlow6 = 0.;
		var iSlow7 = 0;
		var i = 0;
		var fTemp0 = 0.;
		var iTemp1 = 0;
		var fTemp2 = 0.;
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		fSlow0 = +(0.00100000005 * +(powf(10., +(0.0500000007 * +(+(HEAPF[dsp + 262148 >> 2]))))));
		iSlow1 = ~~(+(+(HEAPF[dsp + 262160 >> 2])));
		iSlow2 = (((((iSlow1 | 0) & 1) | 0) != 0) | 0);
		iSlow3 = ~~(+(+(HEAPF[dsp + 262172 >> 2])));
		iSlow4 = (((iSlow3 | 0) == 0) | 0);
		iSlow5 = (((iSlow3 | 0) == 1) | 0);
		fSlow6 = +(+(HEAPF[dsp + 262180 >> 2]) * +(+(HEAPF[dsp + 262184 >> 2])));
		iSlow7 = (((((iSlow1 | 0) & 2) | 0) != 0) | 0);
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 262152 + (0 << 2) >> 2] = +(+(fSlow0) + +(0.999000013 * +(HEAPF[dsp + 262152 + (1 << 2) >> 2])));
			HEAPF[dsp + 262164 + (0 << 2) >> 2] = +(((+(HEAPF[dsp + 262164 + (1 << 2) >> 2]) < +((iSlow2 | 0))) | 0)?+(min_f(+(+(HEAPF[dsp + 262164 + (1 << 2) >> 2]) + 0.000226757373), +((iSlow2 | 0)))):+(max_f(+(+(HEAPF[dsp + 262164 + (1 << 2) >> 2]) + -0.000226757373), +((iSlow2 | 0)))));
			HEAPF[dsp + 262188 + (0 << 2) >> 2] = +(+(fSlow6) + +(+(HEAPF[dsp + 262188 + (1 << 2) >> 2]) - +(floorf(+(+(fSlow6) + +(HEAPF[dsp + 262188 + (1 << 2) >> 2]))))));
			fTemp0 = +(65536. * +(HEAPF[dsp + 262188 + (0 << 2) >> 2]));
			iTemp1 = ~~(+(fTemp0));
			HEAP32[dsp + 262196 + (0 << 2) >> 2] = (((imul(1103515245, (HEAP32[dsp + 262196 + (1 << 2) >> 2] | 0)) | 0) + 12345) | 0);
			HEAPF[dsp + 262208 + (0 << 2) >> 2] = +(+(+(6.90678287e-12 * +((HEAP32[dsp + 262196 + (2 << 2) >> 2] | 0))) + +(+(1.80116081 * +(HEAPF[dsp + 262208 + (1 << 2) >> 2])) + +(2.30852802e-11 * +((HEAP32[dsp + 262196 + (0 << 2) >> 2] | 0))))) - +(+(0.802577376 * +(HEAPF[dsp + 262208 + (2 << 2) >> 2])) + +(2.93626512e-11 * +((HEAP32[dsp + 262196 + (1 << 2) >> 2] | 0)))));
			fTemp2 = +((iSlow4 | 0)?+(4.65661287e-10 * +((HEAP32[dsp + 262196 + (0 << 2) >> 2] | 0))):+((iSlow5 | 0)?+(HEAPF[dsp + 262208 + (0 << 2) >> 2]):+(+(HEAPF[dsp + 0 + ((iTemp1 | 0) << 2) >> 2]) + +(+(+(fTemp0) - +(floorf(+(fTemp0)))) * +(+(HEAPF[dsp + 0 + ((((iTemp1 | 0) + 1) | 0) << 2) >> 2]) - +(HEAPF[dsp + 0 + ((iTemp1 | 0) << 2) >> 2]))))));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(HEAPF[dsp + 262152 + (0 << 2) >> 2]) * +(HEAPF[dsp + 262164 + (0 << 2) >> 2])) * +(fTemp2)));
			HEAPF[dsp + 262220 + (0 << 2) >> 2] = +(((+(HEAPF[dsp + 262220 + (1 << 2) >> 2]) < +((iSlow7 | 0))) | 0)?+(min_f(+(+(HEAPF[dsp + 262220 + (1 << 2) >> 2]) + 0.000226757373), +((iSlow7 | 0)))):+(max_f(+(+(HEAPF[dsp + 262220 + (1 << 2) >> 2]) + -0.000226757373), +((iSlow7 | 0)))));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(HEAPF[dsp + 262152 + (0 << 2) >> 2]) * +(HEAPF[dsp + 262220 + (0 << 2) >> 2])) * +(fTemp2)));
			HEAPF[dsp + 262152 + (1 << 2) >> 2] = +(HEAPF[dsp + 262152 + (0 << 2) >> 2]);
			HEAPF[dsp + 262164 + (1 << 2) >> 2] = +(HEAPF[dsp + 262164 + (0 << 2) >> 2]);
			HEAPF[dsp + 262188 + (1 << 2) >> 2] = +(HEAPF[dsp + 262188 + (0 << 2) >> 2]);
			HEAP32[dsp + 262196 + (2 << 2) >> 2] = (HEAP32[dsp + 262196 + (1 << 2) >> 2] | 0);
			HEAP32[dsp + 262196 + (1 << 2) >> 2] = (HEAP32[dsp + 262196 + (0 << 2) >> 2] | 0);
			HEAPF[dsp + 262208 + (2 << 2) >> 2] = +(HEAPF[dsp + 262208 + (1 << 2) >> 2]);
			HEAPF[dsp + 262208 + (1 << 2) >> 2] = +(HEAPF[dsp + 262208 + (0 << 2) >> 2]);
			HEAPF[dsp + 262220 + (1 << 2) >> 2] = +(HEAPF[dsp + 262220 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 262236;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/Stereo_Audio_Tester/volume"] = 262148;
	pathTable["/Stereo_Audio_Tester/channel"] = 262160;
	pathTable["/Stereo_Audio_Tester/signal"] = 262172;
	pathTable["/Stereo_Audio_Tester/freq"] = 262184;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"tester2\",\"inputs\":\"0\",\"outputs\":\"2\",\"meta\":[{\"author\":\"Grame\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)GRAME 2014\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"tester2\"},{\"noises.lib/name\":\"Faust Noise Generator Library\"},{\"noises.lib/version\":\"0.0\"},{\"oscillators.lib/name\":\"Faust Oscillator Library\"},{\"oscillators.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"Stereo Audio Tester\",\"items\":[{\"type\":\"hslider\",\"label\":\"freq\",\"address\":\"/Stereo_Audio_Tester/freq\",\"meta\":[{\"1\":\"\"},{\"scale\":\"log\"},{\"unit\":\"Hz\"}],\"init\":\"440\",\"min\":\"40\",\"max\":\"20000\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"volume\",\"address\":\"/Stereo_Audio_Tester/volume\",\"meta\":[{\"2\":\"\"},{\"unit\":\"dB\"}],\"init\":\"-96\",\"min\":\"-96\",\"max\":\"0\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"signal\",\"address\":\"/Stereo_Audio_Tester/signal\",\"meta\":[{\"3\":\"\"},{\"style\":\"menu{'white noise':0;'pink noise':1;'sine':2}\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"2\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"channel\",\"address\":\"/Stereo_Audio_Tester/channel\",\"meta\":[{\"4\":\"\"},{\"style\":\"radio{'none':0;'left':1;'right':2;'both':3}\"}],\"init\":\"0\",\"min\":\"0\",\"max\":\"3\",\"step\":\"1\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "Grame");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)GRAME 2014");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "tester2");
	m.declare("noises.lib/name", "Faust Noise Generator Library");
	m.declare("noises.lib/version", "0.0");
	m.declare("oscillators.lib/name", "Faust Oscillator Library");
	m.declare("oscillators.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "1.0");
}

