/* ------------------------------------------------------------
name: "harmonicExciter"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var expf = foreign.exp;
	var fabsf = foreign.abs;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var tanf = foreign.tan;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 1;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 12 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 16 >> 2] = +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 12 >> 2] | 0))))));
		HEAPF[dsp + 20 >> 2] = +(2. / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 24 >> 2] = +(1. / +(HEAPF[dsp + 16 >> 2]));
		HEAPF[dsp + 36 >> 2] = +(3.14159274 / +(HEAPF[dsp + 16 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 0 >> 2] = 0.5;
		HEAPF[dsp + 4 >> 2] = 20.;
		HEAPF[dsp + 8 >> 2] = 0.;
		HEAPF[dsp + 28 >> 2] = 50.;
		HEAPF[dsp + 32 >> 2] = 5.;
		HEAPF[dsp + 40 >> 2] = 5000.;
		HEAPF[dsp + 56 >> 2] = 500.;
		HEAPF[dsp + 76 >> 2] = -30.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		for (l0 = 0; (((l0 | 0) < 3) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 44 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 60 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 68 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 80 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 96 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 104 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 12 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var output0 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var iSlow4 = 0;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var fSlow8 = 0.;
		var fSlow9 = 0.;
		var fSlow10 = 0.;
		var fSlow11 = 0.;
		var fSlow12 = 0.;
		var fSlow13 = 0.;
		var fSlow14 = 0.;
		var fSlow15 = 0.;
		var fSlow16 = 0.;
		var fSlow17 = 0.;
		var fSlow18 = 0.;
		var i = 0;
		var fTemp0 = 0.;
		var fTemp1 = 0.;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var fTemp6 = 0.;
		var fTemp7 = 0.;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 0 >> 2]));
		fSlow1 = +(+(HEAPF[dsp + 4 >> 2]));
		fSlow2 = +(100. * +(+(fSlow0) / +(fSlow1)));
		fSlow3 = +(0.00999999978 * +(fSlow1));
		iSlow4 = ~~(+(+(HEAPF[dsp + 8 >> 2])));
		fSlow5 = +(max_f(+(HEAPF[dsp + 24 >> 2]), +(0.00100000005 * +(+(HEAPF[dsp + 28 >> 2])))));
		fSlow6 = +(expf(+(0. - +(+(HEAPF[dsp + 20 >> 2]) / +(fSlow5)))));
		fSlow7 = +(+(+(1. / +(+(HEAPF[dsp + 32 >> 2]))) + -1.) * +(1. - +(fSlow6)));
		fSlow8 = +(tanf(+(+(HEAPF[dsp + 36 >> 2]) * +(+(HEAPF[dsp + 40 >> 2])))));
		fSlow9 = +(1. / +(fSlow8));
		fSlow10 = +(1. / +(+(+(+(fSlow9) + 1.41421354) / +(fSlow8)) + 1.));
		fSlow11 = +(1. / +(powf(+(fSlow8), 2.)));
		fSlow12 = +(+(+(+(fSlow9) + -1.41421354) / +(fSlow8)) + 1.);
		fSlow13 = +(2. * +(1. - +(fSlow11)));
		fSlow14 = +(2. * +(0. - +(fSlow11)));
		fSlow15 = +(expf(+(0. - +(+(HEAPF[dsp + 24 >> 2]) / +(fSlow5)))));
		fSlow16 = +(expf(+(0. - +(+(HEAPF[dsp + 24 >> 2]) / +(max_f(+(HEAPF[dsp + 24 >> 2]), +(0.00100000005 * +(+(HEAPF[dsp + 56 >> 2])))))))));
		fSlow17 = +(+(HEAPF[dsp + 76 >> 2]));
		fSlow18 = +(1. - +(fSlow0));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			fTemp0 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			HEAPF[dsp + 44 + (0 << 2) >> 2] = +(+(fTemp0) - +(+(fSlow10) * +(+(+(fSlow12) * +(HEAPF[dsp + 44 + (2 << 2) >> 2])) + +(+(fSlow13) * +(HEAPF[dsp + 44 + (1 << 2) >> 2])))));
			fTemp1 = +(+(fSlow10) * +(+(+(+(fSlow11) * +(HEAPF[dsp + 44 + (0 << 2) >> 2])) + +(+(fSlow14) * +(HEAPF[dsp + 44 + (1 << 2) >> 2]))) + +(+(fSlow11) * +(HEAPF[dsp + 44 + (2 << 2) >> 2]))));
			fTemp2 = +((iSlow4 | 0)?0.:+(fTemp1));
			fTemp3 = +(fabsf(+(fTemp2)));
			fTemp4 = +(((+(HEAPF[dsp + 68 + (1 << 2) >> 2]) > +(fTemp3)) | 0)?+(fSlow16):+(fSlow15));
			HEAPF[dsp + 60 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 60 + (1 << 2) >> 2]) * +(fTemp4)) + +(+(fTemp3) * +(1. - +(fTemp4))));
			HEAPF[dsp + 68 + (0 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (0 << 2) >> 2] = +(+(+(fSlow6) * +(HEAPF[dsp + 80 + (1 << 2) >> 2])) + +(+(fSlow7) * +(max_f(+(+(20. * +(log10f(+(HEAPF[dsp + 68 + (0 << 2) >> 2])))) - +(fSlow17)), 0.))));
			fTemp5 = +(+(fTemp2) * +(powf(10., +(0.0500000007 * +(HEAPF[dsp + 80 + (0 << 2) >> 2])))));
			fTemp6 = +(fabsf(+(fabsf(+(fTemp5)))));
			fTemp7 = +(((+(HEAPF[dsp + 96 + (1 << 2) >> 2]) > +(fTemp6)) | 0)?+(fSlow16):+(fSlow15));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(+(+(HEAPF[dsp + 88 + (1 << 2) >> 2]) * +(fTemp7)) + +(+(fTemp6) * +(1. - +(fTemp7))));
			HEAPF[dsp + 96 + (0 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (0 << 2) >> 2] = +(+(+(fSlow6) * +(HEAPF[dsp + 104 + (1 << 2) >> 2])) + +(+(fSlow7) * +(max_f(+(+(20. * +(log10f(+(HEAPF[dsp + 96 + (0 << 2) >> 2])))) - +(fSlow17)), 0.))));
			HEAPF[dsp + 112 >> 2] = +(+(20. * +(log10f(+(powf(10., +(0.0500000007 * +(HEAPF[dsp + 104 + (0 << 2) >> 2]))))))));
			fTemp8 = +((iSlow4 | 0)?+(fTemp1):+(fTemp5));
			fTemp9 = +(+(fSlow3) * +(fTemp8));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(fSlow2) * +(+(+(+(fSlow3) * +(+(fTemp8) * +(((+(fTemp9) < 0.) | 0)))) + +(+((imul(((+(fTemp9) >= 0.) | 0), ((+(fTemp9) <= 1.) | 0)) | 0)) * +(+(fTemp9) - +(0.333333343 * +(powf(+(fTemp9), 3.)))))) + +(0.666666687 * +(((+(fTemp9) > 1.) | 0))))) + +(+(fSlow18) * +(fTemp0))));
			HEAPF[dsp + 44 + (2 << 2) >> 2] = +(HEAPF[dsp + 44 + (1 << 2) >> 2]);
			HEAPF[dsp + 44 + (1 << 2) >> 2] = +(HEAPF[dsp + 44 + (0 << 2) >> 2]);
			HEAPF[dsp + 60 + (1 << 2) >> 2] = +(HEAPF[dsp + 60 + (0 << 2) >> 2]);
			HEAPF[dsp + 68 + (1 << 2) >> 2] = +(HEAPF[dsp + 68 + (0 << 2) >> 2]);
			HEAPF[dsp + 80 + (1 << 2) >> 2] = +(HEAPF[dsp + 80 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 96 + (1 << 2) >> 2] = +(HEAPF[dsp + 96 + (0 << 2) >> 2]);
			HEAPF[dsp + 104 + (1 << 2) >> 2] = +(HEAPF[dsp + 104 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 116;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Bypass"] = 8;
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Compressor_Gain"] = 112;
	pathTable["/harmonicExciter/EXCITER/Mix"] = 0;
	pathTable["/harmonicExciter/EXCITER/Harmonics"] = 4;
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Compression_Response/Attack"] = 28;
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Compression_Control/Ratio"] = 32;
	pathTable["/harmonicExciter/EXCITER/Cutoff_Frequency"] = 40;
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Compression_Response/Release"] = 56;
	pathTable["/harmonicExciter/COMPRESSOR/0x00/Compression_Control/Threshold"] = 76;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"harmonicExciter\",\"inputs\":\"1\",\"outputs\":\"1\",\"meta\":[{\"analyzers.lib/name\":\"Faust Analyzer Library\"},{\"analyzers.lib/version\":\"0.0\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"compressors.lib/name\":\"Faust Compressor Effect Library\"},{\"compressors.lib/version\":\"0.0\"},{\"description\":\"Psychoacoustic harmonic exciter, with GUI\"},{\"exciter_author\":\"Priyanka Shekar (pshekar@ccrma.stanford.edu), revised by RM\"},{\"exciter_copyright\":\"Copyright (c) 2013 Priyanka Shekar\"},{\"exciter_license\":\"MIT License (MIT)\"},{\"exciter_name\":\"harmonicExciter\"},{\"exciter_version\":\"1.0\"},{\"filters.lib/name\":\"Faust Filters Library\"},{\"filters.lib/version\":\"0.0\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"harmonicExciter\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"harmonicExciter\",\"items\":[{\"type\":\"vgroup\",\"label\":\"COMPRESSOR\",\"meta\":[{\"tooltip\":\"Reference:    http://en.wikipedia.org/wiki/Dynamic_range_compression\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"0\":\"\"}],\"items\":[{\"type\":\"checkbox\",\"label\":\"Bypass\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Bypass\",\"meta\":[{\"0\":\"\"},{\"tooltip\":\"When this is checked,   the compressor has no effect\"}]},{\"type\":\"hbargraph\",\"label\":\"Compressor Gain\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Compressor_Gain\",\"meta\":[{\"1\":\"\"},{\"tooltip\":\"Current gain   of the compressor in dB\"},{\"unit\":\"dB\"}],\"min\":\"-50\",\"max\":\"10\"}]},{\"type\":\"hgroup\",\"label\":\"0x00\",\"meta\":[{\"1\":\"\"}],\"items\":[{\"type\":\"hgroup\",\"label\":\"Compression Control\",\"meta\":[{\"3\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Ratio\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Compression_Control/Ratio\",\"meta\":[{\"0\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"A compression Ratio  of N means that for each N dB increase in input signal level above Threshold, the  output level goes up 1 dB\"}],\"init\":\"5\",\"min\":\"1\",\"max\":\"20\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Threshold\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Compression_Control/Threshold\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"When the signal level exceeds the Threshold (in dB), its level is compressed  according to the Ratio\"},{\"unit\":\"dB\"}],\"init\":\"-30\",\"min\":\"-100\",\"max\":\"10\",\"step\":\"0.1\"}]},{\"type\":\"hgroup\",\"label\":\"Compression Response\",\"meta\":[{\"4\":\"\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Attack\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Compression_Response/Attack\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in ms (1/e smoothing time) for the compression gain to approach  (exponentially) a new lower target level (the compression `kicking in')\"},{\"unit\":\"ms\"}],\"init\":\"50\",\"min\":\"0\",\"max\":\"500\",\"step\":\"0.1\"},{\"type\":\"hslider\",\"label\":\"Release\",\"address\":\"/harmonicExciter/COMPRESSOR/0x00/Compression_Response/Release\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Time constant in ms (1/e smoothing time) for the compression gain to approach  (exponentially) a new higher target level (the compression 'releasing')\"},{\"unit\":\"ms\"}],\"init\":\"500\",\"min\":\"0\",\"max\":\"1000\",\"step\":\"0.1\"}]}]}]},{\"type\":\"hgroup\",\"label\":\"EXCITER\",\"meta\":[{\"tooltip\":\"Reference: Patent US4150253 A\"}],\"items\":[{\"type\":\"hslider\",\"label\":\"Cutoff Frequency\",\"address\":\"/harmonicExciter/EXCITER/Cutoff_Frequency\",\"meta\":[{\"0\":\"\"},{\"scale\":\"log\"},{\"style\":\"knob\"},{\"tooltip\":\"Cutoff frequency for highpassed components to be excited\"},{\"unit\":\"Hz\"}],\"init\":\"5000\",\"min\":\"1000\",\"max\":\"10000\",\"step\":\"100\"},{\"type\":\"hslider\",\"label\":\"Harmonics\",\"address\":\"/harmonicExciter/EXCITER/Harmonics\",\"meta\":[{\"1\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Percentage of harmonics generated\"},{\"unit\":\"percent\"}],\"init\":\"20\",\"min\":\"0\",\"max\":\"200\",\"step\":\"1\"},{\"type\":\"hslider\",\"label\":\"Mix\",\"address\":\"/harmonicExciter/EXCITER/Mix\",\"meta\":[{\"2\":\"\"},{\"style\":\"knob\"},{\"tooltip\":\"Dry/Wet mix of original signal   to excited signal\"}],\"init\":\"0.5\",\"min\":\"0\",\"max\":\"1\",\"step\":\"0.01\"}]}]}]}";
}

function metadatamydsp(m) {
	m.declare("analyzers.lib/name", "Faust Analyzer Library");
	m.declare("analyzers.lib/version", "0.0");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("compressors.lib/name", "Faust Compressor Effect Library");
	m.declare("compressors.lib/version", "0.0");
	m.declare("description", "Psychoacoustic harmonic exciter, with GUI");
	m.declare("exciter_author", "Priyanka Shekar (pshekar@ccrma.stanford.edu), revised by RM");
	m.declare("exciter_copyright", "Copyright (c) 2013 Priyanka Shekar");
	m.declare("exciter_license", "MIT License (MIT)");
	m.declare("exciter_name", "harmonicExciter");
	m.declare("exciter_version", "1.0");
	m.declare("filters.lib/name", "Faust Filters Library");
	m.declare("filters.lib/version", "0.0");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "harmonicExciter");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
}

