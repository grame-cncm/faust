/* ------------------------------------------------------------
author: "CICM"
copyright: "(c)CICM 2013"
license: "BSD"
name: "fourSourcesToOcto"
version: "1.0"
Code generated with Faust 2.5.15 (https://faust.grame.fr)
Compilation options: ajs, -scal -ftz 0
------------------------------------------------------------ */


function mydspModule(global, foreign, buffer) {
	
	'use asm';
	
	var HEAP32 = new global.Int32Array(buffer);
	var HEAPF = new global.Float32Array(buffer);
	
	var imul = foreign.imul;
	var log = foreign.log;
	var round = foreign.round;
	
	var cosf = foreign.cos;
	var expf = foreign.exp;
	var max_f = foreign.max;
	var min_f = foreign.min;
	var powf = foreign.pow;
	var sinf = foreign.sin;
	function fmodf(x, y) { x = +x; y = +y; return +(x % y); }
	function log10f(a) { a = +a; return +(+log(a) / +log(10.)); }
	function remainderf(x, y) { x = +x; y = +y; return +(x - +round(x/y) * y); }
	
	function getNumInputs(dsp) {
		dsp = dsp | 0;
		return 4;
	}
	
	function getNumOutputs(dsp) {
		dsp = dsp | 0;
		return 8;
	}
	
	function classInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		
	}
	
	function instanceConstants(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		HEAP32[dsp + 0 >> 2] = (samplingFreq | 0);
		HEAPF[dsp + 4 >> 2] = +(expf(+(0. - +(50. / +(min_f(192000., +(max_f(1., +((HEAP32[dsp + 0 >> 2] | 0))))))))));
		HEAPF[dsp + 8 >> 2] = +(1. - +(HEAPF[dsp + 4 >> 2]));
		
	}
	
	function instanceResetUserInterface(dsp) {
		dsp = dsp | 0;
		HEAPF[dsp + 12 >> 2] = 1.;
		HEAPF[dsp + 24 >> 2] = 1.;
		HEAPF[dsp + 36 >> 2] = 1.;
		HEAPF[dsp + 48 >> 2] = 1.;
		HEAPF[dsp + 60 >> 2] = 0.;
		HEAPF[dsp + 72 >> 2] = 0.;
		HEAPF[dsp + 84 >> 2] = 0.;
		HEAPF[dsp + 96 >> 2] = 0.;
		
	}
	
	function instanceClear(dsp) {
		dsp = dsp | 0;
		var l0 = 0;
		var l1 = 0;
		var l2 = 0;
		var l3 = 0;
		var l4 = 0;
		var l5 = 0;
		var l6 = 0;
		var l7 = 0;
		for (l0 = 0; (((l0 | 0) < 2) | 0); l0 = (((l0 | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + ((l0 | 0) << 2) >> 2] = 0.;
			
		}
		for (l1 = 0; (((l1 | 0) < 2) | 0); l1 = (((l1 | 0) + 1) | 0)) {
			HEAPF[dsp + 28 + ((l1 | 0) << 2) >> 2] = 0.;
			
		}
		for (l2 = 0; (((l2 | 0) < 2) | 0); l2 = (((l2 | 0) + 1) | 0)) {
			HEAPF[dsp + 40 + ((l2 | 0) << 2) >> 2] = 0.;
			
		}
		for (l3 = 0; (((l3 | 0) < 2) | 0); l3 = (((l3 | 0) + 1) | 0)) {
			HEAPF[dsp + 52 + ((l3 | 0) << 2) >> 2] = 0.;
			
		}
		for (l4 = 0; (((l4 | 0) < 2) | 0); l4 = (((l4 | 0) + 1) | 0)) {
			HEAPF[dsp + 64 + ((l4 | 0) << 2) >> 2] = 0.;
			
		}
		for (l5 = 0; (((l5 | 0) < 2) | 0); l5 = (((l5 | 0) + 1) | 0)) {
			HEAPF[dsp + 76 + ((l5 | 0) << 2) >> 2] = 0.;
			
		}
		for (l6 = 0; (((l6 | 0) < 2) | 0); l6 = (((l6 | 0) + 1) | 0)) {
			HEAPF[dsp + 88 + ((l6 | 0) << 2) >> 2] = 0.;
			
		}
		for (l7 = 0; (((l7 | 0) < 2) | 0); l7 = (((l7 | 0) + 1) | 0)) {
			HEAPF[dsp + 100 + ((l7 | 0) << 2) >> 2] = 0.;
			
		}
		
	}
	
	function init(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		classInit(dsp, samplingFreq);
		instanceInit(dsp, samplingFreq);
	}
	
	function instanceInit(dsp, samplingFreq) {
		dsp = dsp | 0;
		samplingFreq = samplingFreq | 0;
		instanceConstants(dsp, samplingFreq);
		instanceResetUserInterface(dsp);
		instanceClear(dsp);
	}
	
	function getSampleRate(dsp) {
		dsp = dsp | 0;
		return HEAP32[dsp + 0 >> 2] | 0;
	}
	
	function setParamValue(dsp, offset, value) {
		dsp = dsp | 0;
		offset = offset | 0;
		value = +value;
		HEAPF[dsp + offset >> 2] = value;
	}
	
	function getParamValue(dsp, offset) {
		dsp = dsp | 0;
		offset = offset | 0;
		return +(HEAPF[dsp + offset >> 2]);
	}
	
	function compute(dsp, count, inputs, outputs) {
		dsp = dsp | 0;
		count = count | 0;
		inputs = inputs | 0;
		outputs = outputs | 0;
		var input0 = 0;
		var input1 = 0;
		var input2 = 0;
		var input3 = 0;
		var output0 = 0;
		var output1 = 0;
		var output2 = 0;
		var output3 = 0;
		var output4 = 0;
		var output5 = 0;
		var output6 = 0;
		var output7 = 0;
		var fSlow0 = 0.;
		var fSlow1 = 0.;
		var fSlow2 = 0.;
		var fSlow3 = 0.;
		var fSlow4 = 0.;
		var fSlow5 = 0.;
		var fSlow6 = 0.;
		var fSlow7 = 0.;
		var i = 0;
		var iTemp0 = 0;
		var iTemp1 = 0;
		var fTemp2 = 0.;
		var fTemp3 = 0.;
		var fTemp4 = 0.;
		var fTemp5 = 0.;
		var iTemp6 = 0;
		var iTemp7 = 0;
		var fTemp8 = 0.;
		var fTemp9 = 0.;
		var fTemp10 = 0.;
		var fTemp11 = 0.;
		var iTemp12 = 0;
		var iTemp13 = 0;
		var fTemp14 = 0.;
		var fTemp15 = 0.;
		var fTemp16 = 0.;
		var fTemp17 = 0.;
		var iTemp18 = 0;
		var iTemp19 = 0;
		var fTemp20 = 0.;
		var fTemp21 = 0.;
		var fTemp22 = 0.;
		var fTemp23 = 0.;
		var fTemp24 = 0.;
		var fTemp25 = 0.;
		var fTemp26 = 0.;
		var fTemp27 = 0.;
		var fTemp28 = 0.;
		var fTemp29 = 0.;
		var fTemp30 = 0.;
		var fTemp31 = 0.;
		var fTemp32 = 0.;
		var fTemp33 = 0.;
		var fTemp34 = 0.;
		var fTemp35 = 0.;
		var fTemp36 = 0.;
		var fTemp37 = 0.;
		var fTemp38 = 0.;
		var fTemp39 = 0.;
		var fTemp40 = 0.;
		var fTemp41 = 0.;
		var fTemp42 = 0.;
		var fTemp43 = 0.;
		var fTemp44 = 0.;
		var fTemp45 = 0.;
		var fTemp46 = 0.;
		var fTemp47 = 0.;
		var fTemp48 = 0.;
		var fTemp49 = 0.;
		var fTemp50 = 0.;
		var fTemp51 = 0.;
		var fTemp52 = 0.;
		var fTemp53 = 0.;
		var fTemp54 = 0.;
		var fTemp55 = 0.;
		var fTemp56 = 0.;
		var fTemp57 = 0.;
		var fTemp58 = 0.;
		var fTemp59 = 0.;
		var fTemp60 = 0.;
		var fTemp61 = 0.;
		var fTemp62 = 0.;
		var fTemp63 = 0.;
		var fTemp64 = 0.;
		var fTemp65 = 0.;
		var fTemp66 = 0.;
		var fTemp67 = 0.;
		var fTemp68 = 0.;
		var fTemp69 = 0.;
		var fTemp70 = 0.;
		var fTemp71 = 0.;
		var fTemp72 = 0.;
		var fTemp73 = 0.;
		var fTemp74 = 0.;
		var fTemp75 = 0.;
		var fTemp76 = 0.;
		var fTemp77 = 0.;
		var fTemp78 = 0.;
		var fTemp79 = 0.;
		var fTemp80 = 0.;
		input0 = (HEAP32[inputs + (0 << 2) >> 2] | 0);
		input1 = (HEAP32[inputs + (1 << 2) >> 2] | 0);
		input2 = (HEAP32[inputs + (2 << 2) >> 2] | 0);
		input3 = (HEAP32[inputs + (3 << 2) >> 2] | 0);
		output0 = (HEAP32[outputs + (0 << 2) >> 2] | 0);
		output1 = (HEAP32[outputs + (1 << 2) >> 2] | 0);
		output2 = (HEAP32[outputs + (2 << 2) >> 2] | 0);
		output3 = (HEAP32[outputs + (3 << 2) >> 2] | 0);
		output4 = (HEAP32[outputs + (4 << 2) >> 2] | 0);
		output5 = (HEAP32[outputs + (5 << 2) >> 2] | 0);
		output6 = (HEAP32[outputs + (6 << 2) >> 2] | 0);
		output7 = (HEAP32[outputs + (7 << 2) >> 2] | 0);
		fSlow0 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 12 >> 2])));
		fSlow1 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 24 >> 2])));
		fSlow2 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 36 >> 2])));
		fSlow3 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 48 >> 2])));
		fSlow4 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 60 >> 2])));
		fSlow5 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 72 >> 2])));
		fSlow6 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 84 >> 2])));
		fSlow7 = +(+(HEAPF[dsp + 8 >> 2]) * +(+(HEAPF[dsp + 96 >> 2])));
		for (i = 0; (((i | 0) < (count | 0)) | 0); i = (((i | 0) + 1) | 0)) {
			HEAPF[dsp + 16 + (0 << 2) >> 2] = +(+(fSlow0) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 16 + (1 << 2) >> 2])));
			iTemp0 = ((+(HEAPF[dsp + 16 + (0 << 2) >> 2]) > 1.) | 0);
			iTemp1 = ((+(HEAPF[dsp + 16 + (0 << 2) >> 2]) < 1.) | 0);
			fTemp2 = +(+((iTemp0 | 0)) + +(+(HEAPF[dsp + 16 + (0 << 2) >> 2]) * +((iTemp1 | 0))));
			fTemp3 = +(+(1.38629436 * +(1. - +(fTemp2))) + 1.);
			fTemp4 = +(+(HEAPF[input0 + ((i | 0) << 2) >> 2]));
			fTemp5 = +(+((iTemp1 | 0)) + +(+(powf(+(HEAPF[dsp + 16 + (0 << 2) >> 2]), 2.)) * +((iTemp0 | 0))));
			HEAPF[dsp + 28 + (0 << 2) >> 2] = +(+(fSlow1) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 28 + (1 << 2) >> 2])));
			iTemp6 = ((+(HEAPF[dsp + 28 + (0 << 2) >> 2]) > 1.) | 0);
			iTemp7 = ((+(HEAPF[dsp + 28 + (0 << 2) >> 2]) < 1.) | 0);
			fTemp8 = +(+((iTemp6 | 0)) + +(+(HEAPF[dsp + 28 + (0 << 2) >> 2]) * +((iTemp7 | 0))));
			fTemp9 = +(+(1.38629436 * +(1. - +(fTemp8))) + 1.);
			fTemp10 = +(+(HEAPF[input1 + ((i | 0) << 2) >> 2]));
			fTemp11 = +(+((iTemp7 | 0)) + +(+(powf(+(HEAPF[dsp + 28 + (0 << 2) >> 2]), 2.)) * +((iTemp6 | 0))));
			HEAPF[dsp + 40 + (0 << 2) >> 2] = +(+(fSlow2) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 40 + (1 << 2) >> 2])));
			iTemp12 = ((+(HEAPF[dsp + 40 + (0 << 2) >> 2]) > 1.) | 0);
			iTemp13 = ((+(HEAPF[dsp + 40 + (0 << 2) >> 2]) < 1.) | 0);
			fTemp14 = +(+((iTemp12 | 0)) + +(+(HEAPF[dsp + 40 + (0 << 2) >> 2]) * +((iTemp13 | 0))));
			fTemp15 = +(+(1.38629436 * +(1. - +(fTemp14))) + 1.);
			fTemp16 = +(+(HEAPF[input2 + ((i | 0) << 2) >> 2]));
			fTemp17 = +(+((iTemp13 | 0)) + +(+(powf(+(HEAPF[dsp + 40 + (0 << 2) >> 2]), 2.)) * +((iTemp12 | 0))));
			HEAPF[dsp + 52 + (0 << 2) >> 2] = +(+(fSlow3) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 52 + (1 << 2) >> 2])));
			iTemp18 = ((+(HEAPF[dsp + 52 + (0 << 2) >> 2]) > 1.) | 0);
			iTemp19 = ((+(HEAPF[dsp + 52 + (0 << 2) >> 2]) < 1.) | 0);
			fTemp20 = +(+((iTemp18 | 0)) + +(+(HEAPF[dsp + 52 + (0 << 2) >> 2]) * +((iTemp19 | 0))));
			fTemp21 = +(+(1.38629436 * +(1. - +(fTemp20))) + 1.);
			fTemp22 = +(+(HEAPF[input3 + ((i | 0) << 2) >> 2]));
			fTemp23 = +(+((iTemp19 | 0)) + +(+(powf(+(HEAPF[dsp + 52 + (0 << 2) >> 2]), 2.)) * +((iTemp18 | 0))));
			fTemp24 = +(0.142857149 * +(+(+(+(+(+(fTemp3) * +(fTemp4)) / +(fTemp5)) + +(+(+(fTemp9) * +(fTemp10)) / +(fTemp11))) + +(+(+(fTemp15) * +(fTemp16)) / +(fTemp17))) + +(+(+(fTemp21) * +(fTemp22)) / +(fTemp23))));
			fTemp25 = +(2. * +(fTemp2));
			fTemp26 = +(+(2. * +(+(+(fTemp2) * +(((+(fTemp25) > 0.) | 0))) * +(((+(fTemp25) <= 1.) | 0)))) + +(((+(fTemp25) > 1.) | 0)));
			HEAPF[dsp + 64 + (0 << 2) >> 2] = +(+(fSlow4) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 64 + (1 << 2) >> 2])));
			fTemp27 = +(2. * +(fTemp8));
			fTemp28 = +(+(2. * +(+(+(fTemp8) * +(((+(fTemp27) > 0.) | 0))) * +(((+(fTemp27) <= 1.) | 0)))) + +(((+(fTemp27) > 1.) | 0)));
			HEAPF[dsp + 76 + (0 << 2) >> 2] = +(+(fSlow5) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 76 + (1 << 2) >> 2])));
			fTemp29 = +(2. * +(fTemp14));
			fTemp30 = +(+(2. * +(+(+(fTemp14) * +(((+(fTemp29) > 0.) | 0))) * +(((+(fTemp29) <= 1.) | 0)))) + +(((+(fTemp29) > 1.) | 0)));
			HEAPF[dsp + 88 + (0 << 2) >> 2] = +(+(fSlow6) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 88 + (1 << 2) >> 2])));
			fTemp31 = +(2. * +(fTemp20));
			fTemp32 = +(+(2. * +(+(+(fTemp20) * +(((+(fTemp31) > 0.) | 0))) * +(((+(fTemp31) <= 1.) | 0)))) + +(((+(fTemp31) > 1.) | 0)));
			HEAPF[dsp + 100 + (0 << 2) >> 2] = +(+(fSlow7) + +(+(HEAPF[dsp + 4 >> 2]) * +(HEAPF[dsp + 100 + (1 << 2) >> 2])));
			fTemp33 = +(+(+(+(+(+(+(+(fTemp3) * +(fTemp26)) * +(cosf(+(HEAPF[dsp + 64 + (0 << 2) >> 2])))) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(fTemp9) * +(fTemp28)) * +(cosf(+(HEAPF[dsp + 76 + (0 << 2) >> 2])))) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(fTemp15) * +(fTemp30)) * +(cosf(+(HEAPF[dsp + 88 + (0 << 2) >> 2])))) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(fTemp21) * +(fTemp32)) * +(cosf(+(HEAPF[dsp + 100 + (0 << 2) >> 2])))) * +(fTemp22)) / +(fTemp23)));
			fTemp34 = +(0.214285716 * +(fTemp33));
			fTemp35 = +(2. * +(HEAPF[dsp + 64 + (0 << 2) >> 2]));
			fTemp36 = +(1.38629436 * +(fTemp2));
			fTemp37 = +(+(fTemp36) + -0.693147182);
			fTemp38 = +(2.46630335 * +(fTemp37));
			fTemp39 = +(+(2.46630335 * +(+(+(fTemp37) * +(((+(fTemp38) > 0.) | 0))) * +(((+(fTemp38) <= 1.) | 0)))) + +(((+(fTemp38) > 1.) | 0)));
			fTemp40 = +(2. * +(HEAPF[dsp + 76 + (0 << 2) >> 2]));
			fTemp41 = +(1.38629436 * +(fTemp8));
			fTemp42 = +(+(fTemp41) + -0.693147182);
			fTemp43 = +(2.46630335 * +(fTemp42));
			fTemp44 = +(+(2.46630335 * +(+(+(fTemp42) * +(((+(fTemp43) > 0.) | 0))) * +(((+(fTemp43) <= 1.) | 0)))) + +(((+(fTemp43) > 1.) | 0)));
			fTemp45 = +(2. * +(HEAPF[dsp + 88 + (0 << 2) >> 2]));
			fTemp46 = +(1.38629436 * +(fTemp14));
			fTemp47 = +(+(fTemp46) + -0.693147182);
			fTemp48 = +(2.46630335 * +(fTemp47));
			fTemp49 = +(+(2.46630335 * +(+(+(fTemp47) * +(((+(fTemp48) > 0.) | 0))) * +(((+(fTemp48) <= 1.) | 0)))) + +(((+(fTemp48) > 1.) | 0)));
			fTemp50 = +(2. * +(HEAPF[dsp + 100 + (0 << 2) >> 2]));
			fTemp51 = +(1.38629436 * +(fTemp20));
			fTemp52 = +(+(fTemp51) + -0.693147182);
			fTemp53 = +(2.46630335 * +(fTemp52));
			fTemp54 = +(+(2.46630335 * +(+(+(fTemp52) * +(((+(fTemp53) > 0.) | 0))) * +(((+(fTemp53) <= 1.) | 0)))) + +(((+(fTemp53) > 1.) | 0)));
			fTemp55 = +(0.0857142881 * +(+(+(+(+(+(+(+(cosf(+(fTemp35))) * +(fTemp3)) * +(fTemp39)) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(cosf(+(fTemp40))) * +(fTemp9)) * +(fTemp44)) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(cosf(+(fTemp45))) * +(fTemp15)) * +(fTemp49)) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(cosf(+(fTemp50))) * +(fTemp21)) * +(fTemp54)) * +(fTemp22)) / +(fTemp23))));
			fTemp56 = +(3. * +(HEAPF[dsp + 64 + (0 << 2) >> 2]));
			fTemp57 = +(+(fTemp36) + -1.09861231);
			fTemp58 = +(3.47605944 * +(fTemp57));
			fTemp59 = +(+(3.47605944 * +(+(+(fTemp57) * +(((+(fTemp58) > 0.) | 0))) * +(((+(fTemp58) <= 1.) | 0)))) + +(((+(fTemp58) > 1.) | 0)));
			fTemp60 = +(3. * +(HEAPF[dsp + 76 + (0 << 2) >> 2]));
			fTemp61 = +(+(fTemp41) + -1.09861231);
			fTemp62 = +(3.47605944 * +(fTemp61));
			fTemp63 = +(+(3.47605944 * +(+(+(fTemp61) * +(((+(fTemp62) > 0.) | 0))) * +(((+(fTemp62) <= 1.) | 0)))) + +(((+(fTemp62) > 1.) | 0)));
			fTemp64 = +(3. * +(HEAPF[dsp + 88 + (0 << 2) >> 2]));
			fTemp65 = +(+(fTemp46) + -1.09861231);
			fTemp66 = +(3.47605944 * +(fTemp65));
			fTemp67 = +(+(3.47605944 * +(+(+(fTemp65) * +(((+(fTemp66) > 0.) | 0))) * +(((+(fTemp66) <= 1.) | 0)))) + +(((+(fTemp66) > 1.) | 0)));
			fTemp68 = +(3. * +(HEAPF[dsp + 100 + (0 << 2) >> 2]));
			fTemp69 = +(+(fTemp51) + -1.09861231);
			fTemp70 = +(3.47605944 * +(fTemp69));
			fTemp71 = +(+(3.47605944 * +(+(+(fTemp69) * +(((+(fTemp70) > 0.) | 0))) * +(((+(fTemp70) <= 1.) | 0)))) + +(((+(fTemp70) > 1.) | 0)));
			fTemp72 = +(+(+(+(+(+(+(+(cosf(+(fTemp56))) * +(fTemp3)) * +(fTemp59)) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(cosf(+(fTemp60))) * +(fTemp9)) * +(fTemp63)) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(cosf(+(fTemp64))) * +(fTemp15)) * +(fTemp67)) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(cosf(+(fTemp68))) * +(fTemp21)) * +(fTemp71)) * +(fTemp22)) / +(fTemp23)));
			fTemp73 = +(0.0142857144 * +(fTemp72));
			HEAPF[output0 + ((i | 0) << 2) >> 2] = +(+(+(+(+(fTemp24) + +(fTemp34)) + +(fTemp55)) + +(fTemp73)));
			fTemp74 = +(+(+(+(+(+(+(+(fTemp3) * +(sinf(+(HEAPF[dsp + 64 + (0 << 2) >> 2])))) * +(fTemp26)) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(fTemp9) * +(sinf(+(HEAPF[dsp + 76 + (0 << 2) >> 2])))) * +(fTemp28)) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(fTemp15) * +(sinf(+(HEAPF[dsp + 88 + (0 << 2) >> 2])))) * +(fTemp30)) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(fTemp21) * +(sinf(+(HEAPF[dsp + 100 + (0 << 2) >> 2])))) * +(fTemp32)) * +(fTemp22)) / +(fTemp23)));
			fTemp75 = +(0.151522875 * +(fTemp74));
			fTemp76 = +(0.0857142881 * +(+(+(+(+(+(+(+(sinf(+(fTemp35))) * +(fTemp3)) * +(fTemp39)) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(sinf(+(fTemp40))) * +(fTemp9)) * +(fTemp44)) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(sinf(+(fTemp45))) * +(fTemp15)) * +(fTemp49)) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(sinf(+(fTemp50))) * +(fTemp21)) * +(fTemp54)) * +(fTemp22)) / +(fTemp23))));
			fTemp77 = +(+(+(+(+(+(+(+(sinf(+(fTemp56))) * +(fTemp3)) * +(fTemp59)) * +(fTemp4)) / +(fTemp5)) + +(+(+(+(+(sinf(+(fTemp60))) * +(fTemp9)) * +(fTemp63)) * +(fTemp10)) / +(fTemp11))) + +(+(+(+(+(sinf(+(fTemp64))) * +(fTemp15)) * +(fTemp67)) * +(fTemp16)) / +(fTemp17))) + +(+(+(+(+(sinf(+(fTemp68))) * +(fTemp21)) * +(fTemp71)) * +(fTemp22)) / +(fTemp23)));
			HEAPF[output1 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(+(fTemp24) + +(fTemp75)) + +(0.151522875 * +(fTemp33))) + +(fTemp76)) + +(0.0101015251 * +(fTemp77))) - +(0.0101015251 * +(fTemp72))));
			fTemp78 = +(0.214285716 * +(fTemp74));
			fTemp79 = +(0.0142857144 * +(fTemp77));
			HEAPF[output2 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp24) + +(fTemp78)) - +(+(fTemp55) + +(fTemp79))));
			fTemp80 = +(0.151522875 * +(fTemp33));
			HEAPF[output3 + ((i | 0) << 2) >> 2] = +(+(+(+(+(+(fTemp24) + +(0.151522875 * +(fTemp74))) + +(0.0101015251 * +(fTemp77))) + +(0.0101015251 * +(fTemp72))) - +(+(fTemp76) + +(fTemp80))));
			HEAPF[output4 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp24) + +(fTemp55)) - +(+(fTemp34) + +(fTemp73))));
			HEAPF[output5 + ((i | 0) << 2) >> 2] = +(+(+(+(+(fTemp24) + +(fTemp76)) + +(0.0101015251 * +(fTemp72))) - +(+(+(fTemp75) + +(0.151522875 * +(fTemp33))) + +(0.0101015251 * +(fTemp77)))));
			HEAPF[output6 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp24) + +(fTemp79)) - +(+(fTemp55) + +(fTemp78))));
			HEAPF[output7 + ((i | 0) << 2) >> 2] = +(+(+(+(fTemp24) + +(fTemp80)) - +(+(+(+(fTemp76) + +(0.151522875 * +(fTemp74))) + +(0.0101015251 * +(fTemp77))) + +(0.0101015251 * +(fTemp72)))));
			HEAPF[dsp + 16 + (1 << 2) >> 2] = +(HEAPF[dsp + 16 + (0 << 2) >> 2]);
			HEAPF[dsp + 28 + (1 << 2) >> 2] = +(HEAPF[dsp + 28 + (0 << 2) >> 2]);
			HEAPF[dsp + 40 + (1 << 2) >> 2] = +(HEAPF[dsp + 40 + (0 << 2) >> 2]);
			HEAPF[dsp + 52 + (1 << 2) >> 2] = +(HEAPF[dsp + 52 + (0 << 2) >> 2]);
			HEAPF[dsp + 64 + (1 << 2) >> 2] = +(HEAPF[dsp + 64 + (0 << 2) >> 2]);
			HEAPF[dsp + 76 + (1 << 2) >> 2] = +(HEAPF[dsp + 76 + (0 << 2) >> 2]);
			HEAPF[dsp + 88 + (1 << 2) >> 2] = +(HEAPF[dsp + 88 + (0 << 2) >> 2]);
			HEAPF[dsp + 100 + (1 << 2) >> 2] = +(HEAPF[dsp + 100 + (0 << 2) >> 2]);
			
		}
		
	}
	
	return { getNumInputs : getNumInputs, getNumOutputs : getNumOutputs, classInit : classInit, instanceInit : instanceInit, instanceConstants : instanceConstants, instanceResetUserInterface : instanceResetUserInterface, instanceClear : instanceClear, init : init, getSampleRate : getSampleRate, setParamValue : setParamValue, getParamValue : getParamValue, compute : compute };
}

function getSizemydsp() {
	return 108;
}

function getPathTablemydsp() {
	var pathTable = [];
	pathTable["/fourSourcesToOcto/Radius1"] = 12;
	pathTable["/fourSourcesToOcto/Radius2"] = 24;
	pathTable["/fourSourcesToOcto/Radius3"] = 36;
	pathTable["/fourSourcesToOcto/Radius4"] = 48;
	pathTable["/fourSourcesToOcto/Angle1"] = 60;
	pathTable["/fourSourcesToOcto/Angle2"] = 72;
	pathTable["/fourSourcesToOcto/Angle3"] = 84;
	pathTable["/fourSourcesToOcto/Angle4"] = 96;
	return pathTable;
}

function getJSONmydsp() {
	return "{\"name\":\"fourSourcesToOcto\",\"inputs\":\"4\",\"outputs\":\"8\",\"meta\":[{\"author\":\"CICM\"},{\"basics.lib/name\":\"Faust Basic Element Library\"},{\"basics.lib/version\":\"0.0\"},{\"copyright\":\"(c)CICM 2013\"},{\"hoa.lib/author\":\"Pierre Guillot\"},{\"hoa.lib/copyright\":\"2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8\"},{\"hoa.lib/name\":\"High Order Ambisonics library\"},{\"license\":\"BSD\"},{\"maths.lib/author\":\"GRAME\"},{\"maths.lib/copyright\":\"GRAME\"},{\"maths.lib/license\":\"LGPL with exception\"},{\"maths.lib/name\":\"Faust Math Library\"},{\"maths.lib/version\":\"2.1\"},{\"name\":\"fourSourcesToOcto\"},{\"routes.lib/name\":\"Faust Signal Routing Library\"},{\"routes.lib/version\":\"0.0\"},{\"signals.lib/name\":\"Faust Signal Routing Library\"},{\"signals.lib/version\":\"0.0\"},{\"version\":\"1.0\"}],\"ui\":[{\"type\":\"vgroup\",\"label\":\"fourSourcesToOcto\",\"items\":[{\"type\":\"hslider\",\"label\":\"Angle1\",\"address\":\"/fourSourcesToOcto/Angle1\",\"init\":\"0\",\"min\":\"-6.28319\",\"max\":\"6.28319\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Angle2\",\"address\":\"/fourSourcesToOcto/Angle2\",\"init\":\"0\",\"min\":\"-6.28319\",\"max\":\"6.28319\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Angle3\",\"address\":\"/fourSourcesToOcto/Angle3\",\"init\":\"0\",\"min\":\"-6.28319\",\"max\":\"6.28319\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Angle4\",\"address\":\"/fourSourcesToOcto/Angle4\",\"init\":\"0\",\"min\":\"-6.28319\",\"max\":\"6.28319\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Radius1\",\"address\":\"/fourSourcesToOcto/Radius1\",\"init\":\"1\",\"min\":\"0\",\"max\":\"5\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Radius2\",\"address\":\"/fourSourcesToOcto/Radius2\",\"init\":\"1\",\"min\":\"0\",\"max\":\"5\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Radius3\",\"address\":\"/fourSourcesToOcto/Radius3\",\"init\":\"1\",\"min\":\"0\",\"max\":\"5\",\"step\":\"0.001\"},{\"type\":\"hslider\",\"label\":\"Radius4\",\"address\":\"/fourSourcesToOcto/Radius4\",\"init\":\"1\",\"min\":\"0\",\"max\":\"5\",\"step\":\"0.001\"}]}]}";
}

function metadatamydsp(m) {
	m.declare("author", "CICM");
	m.declare("basics.lib/name", "Faust Basic Element Library");
	m.declare("basics.lib/version", "0.0");
	m.declare("copyright", "(c)CICM 2013");
	m.declare("hoa.lib/author", "Pierre Guillot");
	m.declare("hoa.lib/copyright", "2012-2013 Guillot, Paris, Colafrancesco, CICM labex art H2H, U. Paris 8");
	m.declare("hoa.lib/name", "High Order Ambisonics library");
	m.declare("license", "BSD");
	m.declare("maths.lib/author", "GRAME");
	m.declare("maths.lib/copyright", "GRAME");
	m.declare("maths.lib/license", "LGPL with exception");
	m.declare("maths.lib/name", "Faust Math Library");
	m.declare("maths.lib/version", "2.1");
	m.declare("name", "fourSourcesToOcto");
	m.declare("routes.lib/name", "Faust Signal Routing Library");
	m.declare("routes.lib/version", "0.0");
	m.declare("signals.lib/name", "Faust Signal Routing Library");
	m.declare("signals.lib/version", "0.0");
	m.declare("version", "1.0");
}

