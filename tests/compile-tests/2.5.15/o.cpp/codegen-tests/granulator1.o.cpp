//----------------------------------------------------------
// name: "granulator1"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fTempPerm0;
	float 	fConst0;
	int 	iConst1;
	int 	iRec3[2];
	int 	iTempPerm1;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	int 	iRec4[2];
	int 	iRec2[2];
	int 	iTempPerm2;
	int 	iVec0[2];
	int 	iTempPerm3;
	float 	fConst2;
	float 	fConst3;
	float 	fRec5[2];
	float 	fRec1[2];
	float 	fRec0[2];
	int 	iTempPerm4;
	int 	iVec1[2];
	int 	iTempPerm5;
	float 	fRec8[2];
	float 	fRec7[2];
	float 	fRec6[2];
	float 	fTempPerm6;
	int 	IOTA;
	float 	fVec2[524288];
	int 	iConst4;
	int 	iTempPerm7;
	int 	iVec3[2];
	int 	iTempPerm8;
	float 	fRec11[2];
	float 	fRec10[2];
	float 	fRec9[2];
	int 	iConst5;
	int 	iTempPerm9;
	int 	iVec4[2];
	int 	iTempPerm10;
	float 	fRec14[2];
	float 	fRec13[2];
	float 	fRec12[2];
	int 	iConst6;
	int 	iTempPerm11;
	int 	iVec5[2];
	int 	iTempPerm12;
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fRec15[2];
	int 	iConst7;
	int 	iTempPerm13;
	int 	iVec6[2];
	int 	iTempPerm14;
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fRec18[2];
	int 	iConst8;
	int 	iTempPerm15;
	int 	iVec7[2];
	int 	iTempPerm16;
	float 	fRec23[2];
	float 	fRec22[2];
	float 	fRec21[2];
	int 	iConst9;
	int 	iTempPerm17;
	int 	iVec8[2];
	int 	iTempPerm18;
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	int 	iConst10;
	int 	iTempPerm19;
	int 	iVec9[2];
	int 	iTempPerm20;
	float 	fRec29[2];
	float 	fRec28[2];
	float 	fRec27[2];
	int 	iConst11;
	int 	iTempPerm21;
	int 	iVec10[2];
	int 	iTempPerm22;
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fRec30[2];
	int 	iConst12;
	int 	iTempPerm23;
	int 	iVec11[2];
	int 	iTempPerm24;
	float 	fRec35[2];
	float 	fRec34[2];
	float 	fRec33[2];
	int 	iConst13;
	int 	iTempPerm25;
	int 	iVec12[2];
	int 	iTempPerm26;
	float 	fRec38[2];
	float 	fRec37[2];
	float 	fRec36[2];
	int 	iConst14;
	int 	iTempPerm27;
	int 	iVec13[2];
	int 	iTempPerm28;
	float 	fRec41[2];
	float 	fRec40[2];
	float 	fRec39[2];
	int 	iConst15;
	int 	iTempPerm29;
	int 	iVec14[2];
	int 	iTempPerm30;
	float 	fRec44[2];
	float 	fRec43[2];
	float 	fRec42[2];
	int 	iConst16;
	int 	iTempPerm31;
	int 	iVec15[2];
	int 	iTempPerm32;
	float 	fRec47[2];
	float 	fRec46[2];
	float 	fRec45[2];
	int 	iConst17;
	int 	iTempPerm33;
	int 	iVec16[2];
	int 	iTempPerm34;
	float 	fRec50[2];
	float 	fRec49[2];
	float 	fRec48[2];
	int 	iConst18;
	int 	iTempPerm35;
	int 	iVec17[2];
	int 	iTempPerm36;
	float 	fRec53[2];
	float 	fRec52[2];
	float 	fRec51[2];
	int 	iConst19;
	int 	iTempPerm37;
	int 	iVec18[2];
	int 	iTempPerm38;
	float 	fRec56[2];
	float 	fRec55[2];
	float 	fRec54[2];
	int 	iConst20;
	int 	iTempPerm39;
	int 	iVec19[2];
	int 	iTempPerm40;
	float 	fRec59[2];
	float 	fRec58[2];
	float 	fRec57[2];
	int 	iConst21;
	int 	iTempPerm41;
	int 	iVec20[2];
	int 	iTempPerm42;
	float 	fRec62[2];
	float 	fRec61[2];
	float 	fRec60[2];
	int 	iConst22;
	int 	iTempPerm43;
	int 	iVec21[2];
	int 	iTempPerm44;
	float 	fRec65[2];
	float 	fRec64[2];
	float 	fRec63[2];
	int 	iConst23;
	int 	iTempPerm45;
	int 	iVec22[2];
	int 	iTempPerm46;
	float 	fRec68[2];
	float 	fRec67[2];
	float 	fRec66[2];
	int 	iConst24;
	int 	iTempPerm47;
	int 	iVec23[2];
	int 	iTempPerm48;
	float 	fRec71[2];
	float 	fRec70[2];
	float 	fRec69[2];
	int 	iConst25;
	int 	iTempPerm49;
	int 	iVec24[2];
	int 	iTempPerm50;
	float 	fRec74[2];
	float 	fRec73[2];
	float 	fRec72[2];
	int 	iConst26;
	int 	iTempPerm51;
	int 	iVec25[2];
	int 	iTempPerm52;
	float 	fRec77[2];
	float 	fRec76[2];
	float 	fRec75[2];
	int 	iConst27;
	int 	iTempPerm53;
	int 	iVec26[2];
	int 	iTempPerm54;
	float 	fRec80[2];
	float 	fRec79[2];
	float 	fRec78[2];
	int 	iConst28;
	int 	iTempPerm55;
	int 	iVec27[2];
	int 	iTempPerm56;
	float 	fRec83[2];
	float 	fRec82[2];
	float 	fRec81[2];
	int 	iConst29;
	int 	iTempPerm57;
	int 	iVec28[2];
	int 	iTempPerm58;
	float 	fRec86[2];
	float 	fRec85[2];
	float 	fRec84[2];
	int 	iConst30;
	int 	iTempPerm59;
	int 	iVec29[2];
	int 	iTempPerm60;
	float 	fRec89[2];
	float 	fRec88[2];
	float 	fRec87[2];
	int 	iConst31;
	int 	iTempPerm61;
	int 	iVec30[2];
	int 	iTempPerm62;
	float 	fRec92[2];
	float 	fRec91[2];
	float 	fRec90[2];
	int 	iConst32;
	int 	iTempPerm63;
	int 	iVec31[2];
	int 	iTempPerm64;
	float 	fRec95[2];
	float 	fRec94[2];
	float 	fRec93[2];
	int 	iConst33;
	int 	iTempPerm65;
	int 	iVec32[2];
	int 	iTempPerm66;
	float 	fRec98[2];
	float 	fRec97[2];
	float 	fRec96[2];
	int 	iConst34;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("math.lib/author", "GRAME");
		m->declare("math.lib/copyright", "GRAME");
		m->declare("math.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("math.lib/license", "LGPL with exception");
		m->declare("math.lib/name", "Math Library");
		m->declare("math.lib/version", "1.0");
		m->declare("music.lib/author", "GRAME");
		m->declare("music.lib/copyright", "GRAME");
		m->declare("music.lib/deprecated", "This library is deprecated and is not maintained anymore. It will be removed in August 2017.");
		m->declare("music.lib/license", "LGPL with exception");
		m->declare("music.lib/name", "Music Library");
		m->declare("music.lib/version", "1.0");
		m->declare("name", "granulator1");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fTempPerm0 = 0;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		iConst1 = int((0.0072992700729927005f * fConst0));
		iTempPerm1 = 0;
		iTempPerm2 = 0;
		iTempPerm3 = 0;
		fConst2 = (4 * ((20.0f - (400.0f / fConst0)) / fConst0));
		fConst3 = (3200.0f / faustpower<2>(fConst0));
		iTempPerm4 = 0;
		iTempPerm5 = 0;
		fTempPerm6 = 0;
		iConst4 = int((int((0.3125f * fConst0)) & 524287));
		iTempPerm7 = 0;
		iTempPerm8 = 0;
		iConst5 = int((int((0.625f * fConst0)) & 524287));
		iTempPerm9 = 0;
		iTempPerm10 = 0;
		iConst6 = int((int((0.9375f * fConst0)) & 524287));
		iTempPerm11 = 0;
		iTempPerm12 = 0;
		iConst7 = int((int((1.25f * fConst0)) & 524287));
		iTempPerm13 = 0;
		iTempPerm14 = 0;
		iConst8 = int((int((1.5625f * fConst0)) & 524287));
		iTempPerm15 = 0;
		iTempPerm16 = 0;
		iConst9 = int((int((1.875f * fConst0)) & 524287));
		iTempPerm17 = 0;
		iTempPerm18 = 0;
		iConst10 = int((int((2.1875f * fConst0)) & 524287));
		iTempPerm19 = 0;
		iTempPerm20 = 0;
		iConst11 = int((int((2.5f * fConst0)) & 524287));
		iTempPerm21 = 0;
		iTempPerm22 = 0;
		iConst12 = int((int((2.8125f * fConst0)) & 524287));
		iTempPerm23 = 0;
		iTempPerm24 = 0;
		iConst13 = int((int((3.125f * fConst0)) & 524287));
		iTempPerm25 = 0;
		iTempPerm26 = 0;
		iConst14 = int((int((3.4375f * fConst0)) & 524287));
		iTempPerm27 = 0;
		iTempPerm28 = 0;
		iConst15 = int((int((3.75f * fConst0)) & 524287));
		iTempPerm29 = 0;
		iTempPerm30 = 0;
		iConst16 = int((int((4.0625f * fConst0)) & 524287));
		iTempPerm31 = 0;
		iTempPerm32 = 0;
		iConst17 = int((int((4.375f * fConst0)) & 524287));
		iTempPerm33 = 0;
		iTempPerm34 = 0;
		iConst18 = int((int((4.6875f * fConst0)) & 524287));
		iTempPerm35 = 0;
		iTempPerm36 = 0;
		iConst19 = int((int((0.15625f * fConst0)) & 524287));
		iTempPerm37 = 0;
		iTempPerm38 = 0;
		iConst20 = int((int((0.46875f * fConst0)) & 524287));
		iTempPerm39 = 0;
		iTempPerm40 = 0;
		iConst21 = int((int((0.78125f * fConst0)) & 524287));
		iTempPerm41 = 0;
		iTempPerm42 = 0;
		iConst22 = int((int((1.09375f * fConst0)) & 524287));
		iTempPerm43 = 0;
		iTempPerm44 = 0;
		iConst23 = int((int((1.40625f * fConst0)) & 524287));
		iTempPerm45 = 0;
		iTempPerm46 = 0;
		iConst24 = int((int((1.71875f * fConst0)) & 524287));
		iTempPerm47 = 0;
		iTempPerm48 = 0;
		iConst25 = int((int((2.03125f * fConst0)) & 524287));
		iTempPerm49 = 0;
		iTempPerm50 = 0;
		iConst26 = int((int((2.34375f * fConst0)) & 524287));
		iTempPerm51 = 0;
		iTempPerm52 = 0;
		iConst27 = int((int((2.65625f * fConst0)) & 524287));
		iTempPerm53 = 0;
		iTempPerm54 = 0;
		iConst28 = int((int((2.96875f * fConst0)) & 524287));
		iTempPerm55 = 0;
		iTempPerm56 = 0;
		iConst29 = int((int((3.28125f * fConst0)) & 524287));
		iTempPerm57 = 0;
		iTempPerm58 = 0;
		iConst30 = int((int((3.59375f * fConst0)) & 524287));
		iTempPerm59 = 0;
		iTempPerm60 = 0;
		iConst31 = int((int((3.90625f * fConst0)) & 524287));
		iTempPerm61 = 0;
		iTempPerm62 = 0;
		iConst32 = int((int((4.21875f * fConst0)) & 524287));
		iTempPerm63 = 0;
		iTempPerm64 = 0;
		iConst33 = int((int((4.53125f * fConst0)) & 524287));
		iTempPerm65 = 0;
		iTempPerm66 = 0;
		iConst34 = int((int((4.84375f * fConst0)) & 524287));
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.0f;
		fslider1 = 0.0f;
		fslider2 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iRec3[i] = 0;
		for (int i=0; i<2; i++) iRec4[i] = 0;
		for (int i=0; i<2; i++) iRec2[i] = 0;
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iVec1[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		IOTA = 0;
		for (int i=0; i<524288; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) iVec3[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) iVec4[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) iVec5[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) iVec6[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) iVec7[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) iVec8[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) iVec9[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) iVec10[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) iVec11[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) iVec12[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) iVec13[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) iVec14[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) iVec15[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) iVec16[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) iVec17[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) iVec18[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<2; i++) iVec19[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) iVec20[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) iVec21[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) iVec22[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) iVec23[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) iVec24[i] = 0;
		for (int i=0; i<2; i++) fRec74[i] = 0;
		for (int i=0; i<2; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) iVec25[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<2; i++) iVec26[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) iVec27[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) iVec28[i] = 0;
		for (int i=0; i<2; i++) fRec86[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) iVec29[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<2; i++) iVec30[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) iVec31[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) iVec32[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<2; i++) fRec96[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("granulator1");
		ui_interface->addHorizontalSlider("lim1", &fslider1, 0.0f, 0.0f, 10000.0f, 1.0f);
		ui_interface->addHorizontalSlider("lim2", &fslider2, 0.0f, 0.0f, 10000.0f, 1.0f);
		ui_interface->addHorizontalSlider("vol", &fslider0, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = float(fslider1);
		float 	fSlow2 = float(fslider2);
		float 	fSlow3 = (0.5f * (fSlow1 + fSlow2));
		float 	fSlow4 = (2.3283064376228985e-10f * (fSlow2 - fSlow1));
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			fTempPerm0 = (float)input0[i];
			iRec3[0] = ((iRec3[1] + 1) % iConst1);
			iTempPerm1 = (iRec3[0] == 0);
			iRec4[0] = ((1103515245 * iRec4[1]) + 12345);
			iRec2[0] = (((1 - iTempPerm1) * iRec2[1]) + (iTempPerm1 * int((fSlow3 + (fSlow4 * iRec4[0])))));
			iTempPerm2 = (iRec2[0] == 0);
			iVec0[0] = iTempPerm2;
			iTempPerm3 = (((fRec0[1] > 0) | iVec0[0]) | iVec0[1]);
			fRec5[0] = ((fRec5[1] - fConst3) * iTempPerm3);
			fRec1[0] = (iTempPerm3 * (fConst2 + (fRec1[1] + fRec5[1])));
			fRec0[0] = max((float)0, fRec1[1]);
			iTempPerm4 = (iRec2[0] == 2);
			iVec1[0] = iTempPerm4;
			iTempPerm5 = (((fRec6[1] > 0) | iVec1[0]) | iVec1[1]);
			fRec8[0] = ((fRec8[1] - fConst3) * iTempPerm5);
			fRec7[0] = (iTempPerm5 * (fConst2 + (fRec7[1] + fRec8[1])));
			fRec6[0] = max((float)0, fRec7[1]);
			fTempPerm6 = (fSlow0 * fTempPerm0);
			fVec2[IOTA&524287] = fTempPerm6;
			iTempPerm7 = (iRec2[0] == 4);
			iVec3[0] = iTempPerm7;
			iTempPerm8 = (((fRec9[1] > 0) | iVec3[0]) | iVec3[1]);
			fRec11[0] = ((fRec11[1] - fConst3) * iTempPerm8);
			fRec10[0] = (iTempPerm8 * (fConst2 + (fRec10[1] + fRec11[1])));
			fRec9[0] = max((float)0, fRec10[1]);
			iTempPerm9 = (iRec2[0] == 6);
			iVec4[0] = iTempPerm9;
			iTempPerm10 = (((fRec12[1] > 0) | iVec4[0]) | iVec4[1]);
			fRec14[0] = ((fRec14[1] - fConst3) * iTempPerm10);
			fRec13[0] = (iTempPerm10 * (fConst2 + (fRec13[1] + fRec14[1])));
			fRec12[0] = max((float)0, fRec13[1]);
			iTempPerm11 = (iRec2[0] == 8);
			iVec5[0] = iTempPerm11;
			iTempPerm12 = (((fRec15[1] > 0) | iVec5[0]) | iVec5[1]);
			fRec17[0] = ((fRec17[1] - fConst3) * iTempPerm12);
			fRec16[0] = (iTempPerm12 * (fConst2 + (fRec16[1] + fRec17[1])));
			fRec15[0] = max((float)0, fRec16[1]);
			iTempPerm13 = (iRec2[0] == 10);
			iVec6[0] = iTempPerm13;
			iTempPerm14 = (((fRec18[1] > 0) | iVec6[0]) | iVec6[1]);
			fRec20[0] = ((fRec20[1] - fConst3) * iTempPerm14);
			fRec19[0] = (iTempPerm14 * (fConst2 + (fRec19[1] + fRec20[1])));
			fRec18[0] = max((float)0, fRec19[1]);
			iTempPerm15 = (iRec2[0] == 12);
			iVec7[0] = iTempPerm15;
			iTempPerm16 = (((fRec21[1] > 0) | iVec7[0]) | iVec7[1]);
			fRec23[0] = ((fRec23[1] - fConst3) * iTempPerm16);
			fRec22[0] = (iTempPerm16 * (fConst2 + (fRec22[1] + fRec23[1])));
			fRec21[0] = max((float)0, fRec22[1]);
			iTempPerm17 = (iRec2[0] == 14);
			iVec8[0] = iTempPerm17;
			iTempPerm18 = (((fRec24[1] > 0) | iVec8[0]) | iVec8[1]);
			fRec26[0] = ((fRec26[1] - fConst3) * iTempPerm18);
			fRec25[0] = (iTempPerm18 * (fConst2 + (fRec25[1] + fRec26[1])));
			fRec24[0] = max((float)0, fRec25[1]);
			iTempPerm19 = (iRec2[0] == 16);
			iVec9[0] = iTempPerm19;
			iTempPerm20 = (((fRec27[1] > 0) | iVec9[0]) | iVec9[1]);
			fRec29[0] = ((fRec29[1] - fConst3) * iTempPerm20);
			fRec28[0] = (iTempPerm20 * (fConst2 + (fRec28[1] + fRec29[1])));
			fRec27[0] = max((float)0, fRec28[1]);
			iTempPerm21 = (iRec2[0] == 18);
			iVec10[0] = iTempPerm21;
			iTempPerm22 = (((fRec30[1] > 0) | iVec10[0]) | iVec10[1]);
			fRec32[0] = ((fRec32[1] - fConst3) * iTempPerm22);
			fRec31[0] = (iTempPerm22 * (fConst2 + (fRec31[1] + fRec32[1])));
			fRec30[0] = max((float)0, fRec31[1]);
			iTempPerm23 = (iRec2[0] == 20);
			iVec11[0] = iTempPerm23;
			iTempPerm24 = (((fRec33[1] > 0) | iVec11[0]) | iVec11[1]);
			fRec35[0] = ((fRec35[1] - fConst3) * iTempPerm24);
			fRec34[0] = (iTempPerm24 * (fConst2 + (fRec34[1] + fRec35[1])));
			fRec33[0] = max((float)0, fRec34[1]);
			iTempPerm25 = (iRec2[0] == 22);
			iVec12[0] = iTempPerm25;
			iTempPerm26 = (((fRec36[1] > 0) | iVec12[0]) | iVec12[1]);
			fRec38[0] = ((fRec38[1] - fConst3) * iTempPerm26);
			fRec37[0] = (iTempPerm26 * (fConst2 + (fRec37[1] + fRec38[1])));
			fRec36[0] = max((float)0, fRec37[1]);
			iTempPerm27 = (iRec2[0] == 24);
			iVec13[0] = iTempPerm27;
			iTempPerm28 = (((fRec39[1] > 0) | iVec13[0]) | iVec13[1]);
			fRec41[0] = ((fRec41[1] - fConst3) * iTempPerm28);
			fRec40[0] = (iTempPerm28 * (fConst2 + (fRec40[1] + fRec41[1])));
			fRec39[0] = max((float)0, fRec40[1]);
			iTempPerm29 = (iRec2[0] == 26);
			iVec14[0] = iTempPerm29;
			iTempPerm30 = (((fRec42[1] > 0) | iVec14[0]) | iVec14[1]);
			fRec44[0] = ((fRec44[1] - fConst3) * iTempPerm30);
			fRec43[0] = (iTempPerm30 * (fConst2 + (fRec43[1] + fRec44[1])));
			fRec42[0] = max((float)0, fRec43[1]);
			iTempPerm31 = (iRec2[0] == 28);
			iVec15[0] = iTempPerm31;
			iTempPerm32 = (((fRec45[1] > 0) | iVec15[0]) | iVec15[1]);
			fRec47[0] = ((fRec47[1] - fConst3) * iTempPerm32);
			fRec46[0] = (iTempPerm32 * (fConst2 + (fRec46[1] + fRec47[1])));
			fRec45[0] = max((float)0, fRec46[1]);
			iTempPerm33 = (iRec2[0] == 30);
			iVec16[0] = iTempPerm33;
			iTempPerm34 = (((fRec48[1] > 0) | iVec16[0]) | iVec16[1]);
			fRec50[0] = ((fRec50[1] - fConst3) * iTempPerm34);
			fRec49[0] = (iTempPerm34 * (fConst2 + (fRec49[1] + fRec50[1])));
			fRec48[0] = max((float)0, fRec49[1]);
			output0[i] = (FAUSTFLOAT)((((((((((((((((fSlow0 * (fTempPerm0 * fRec0[0])) + (fRec6[0] * fVec2[(IOTA-iConst4)&524287])) + (fRec9[0] * fVec2[(IOTA-iConst5)&524287])) + (fRec12[0] * fVec2[(IOTA-iConst6)&524287])) + (fRec15[0] * fVec2[(IOTA-iConst7)&524287])) + (fRec18[0] * fVec2[(IOTA-iConst8)&524287])) + (fRec21[0] * fVec2[(IOTA-iConst9)&524287])) + (fRec24[0] * fVec2[(IOTA-iConst10)&524287])) + (fRec27[0] * fVec2[(IOTA-iConst11)&524287])) + (fRec30[0] * fVec2[(IOTA-iConst12)&524287])) + (fRec33[0] * fVec2[(IOTA-iConst13)&524287])) + (fRec36[0] * fVec2[(IOTA-iConst14)&524287])) + (fRec39[0] * fVec2[(IOTA-iConst15)&524287])) + (fRec42[0] * fVec2[(IOTA-iConst16)&524287])) + (fRec45[0] * fVec2[(IOTA-iConst17)&524287])) + (fRec48[0] * fVec2[(IOTA-iConst18)&524287]));
			iTempPerm35 = (iRec2[0] == 1);
			iVec17[0] = iTempPerm35;
			iTempPerm36 = (((fRec51[1] > 0) | iVec17[0]) | iVec17[1]);
			fRec53[0] = ((fRec53[1] - fConst3) * iTempPerm36);
			fRec52[0] = (iTempPerm36 * (fConst2 + (fRec52[1] + fRec53[1])));
			fRec51[0] = max((float)0, fRec52[1]);
			iTempPerm37 = (iRec2[0] == 3);
			iVec18[0] = iTempPerm37;
			iTempPerm38 = (((fRec54[1] > 0) | iVec18[0]) | iVec18[1]);
			fRec56[0] = ((fRec56[1] - fConst3) * iTempPerm38);
			fRec55[0] = (iTempPerm38 * (fConst2 + (fRec55[1] + fRec56[1])));
			fRec54[0] = max((float)0, fRec55[1]);
			iTempPerm39 = (iRec2[0] == 5);
			iVec19[0] = iTempPerm39;
			iTempPerm40 = (((fRec57[1] > 0) | iVec19[0]) | iVec19[1]);
			fRec59[0] = ((fRec59[1] - fConst3) * iTempPerm40);
			fRec58[0] = (iTempPerm40 * (fConst2 + (fRec58[1] + fRec59[1])));
			fRec57[0] = max((float)0, fRec58[1]);
			iTempPerm41 = (iRec2[0] == 7);
			iVec20[0] = iTempPerm41;
			iTempPerm42 = (((fRec60[1] > 0) | iVec20[0]) | iVec20[1]);
			fRec62[0] = ((fRec62[1] - fConst3) * iTempPerm42);
			fRec61[0] = (iTempPerm42 * (fConst2 + (fRec61[1] + fRec62[1])));
			fRec60[0] = max((float)0, fRec61[1]);
			iTempPerm43 = (iRec2[0] == 9);
			iVec21[0] = iTempPerm43;
			iTempPerm44 = (((fRec63[1] > 0) | iVec21[0]) | iVec21[1]);
			fRec65[0] = ((fRec65[1] - fConst3) * iTempPerm44);
			fRec64[0] = (iTempPerm44 * (fConst2 + (fRec64[1] + fRec65[1])));
			fRec63[0] = max((float)0, fRec64[1]);
			iTempPerm45 = (iRec2[0] == 11);
			iVec22[0] = iTempPerm45;
			iTempPerm46 = (((fRec66[1] > 0) | iVec22[0]) | iVec22[1]);
			fRec68[0] = ((fRec68[1] - fConst3) * iTempPerm46);
			fRec67[0] = (iTempPerm46 * (fConst2 + (fRec67[1] + fRec68[1])));
			fRec66[0] = max((float)0, fRec67[1]);
			iTempPerm47 = (iRec2[0] == 13);
			iVec23[0] = iTempPerm47;
			iTempPerm48 = (((fRec69[1] > 0) | iVec23[0]) | iVec23[1]);
			fRec71[0] = ((fRec71[1] - fConst3) * iTempPerm48);
			fRec70[0] = (iTempPerm48 * (fConst2 + (fRec70[1] + fRec71[1])));
			fRec69[0] = max((float)0, fRec70[1]);
			iTempPerm49 = (iRec2[0] == 15);
			iVec24[0] = iTempPerm49;
			iTempPerm50 = (((fRec72[1] > 0) | iVec24[0]) | iVec24[1]);
			fRec74[0] = ((fRec74[1] - fConst3) * iTempPerm50);
			fRec73[0] = (iTempPerm50 * (fConst2 + (fRec73[1] + fRec74[1])));
			fRec72[0] = max((float)0, fRec73[1]);
			iTempPerm51 = (iRec2[0] == 17);
			iVec25[0] = iTempPerm51;
			iTempPerm52 = (((fRec75[1] > 0) | iVec25[0]) | iVec25[1]);
			fRec77[0] = ((fRec77[1] - fConst3) * iTempPerm52);
			fRec76[0] = (iTempPerm52 * (fConst2 + (fRec76[1] + fRec77[1])));
			fRec75[0] = max((float)0, fRec76[1]);
			iTempPerm53 = (iRec2[0] == 19);
			iVec26[0] = iTempPerm53;
			iTempPerm54 = (((fRec78[1] > 0) | iVec26[0]) | iVec26[1]);
			fRec80[0] = ((fRec80[1] - fConst3) * iTempPerm54);
			fRec79[0] = (iTempPerm54 * (fConst2 + (fRec79[1] + fRec80[1])));
			fRec78[0] = max((float)0, fRec79[1]);
			iTempPerm55 = (iRec2[0] == 21);
			iVec27[0] = iTempPerm55;
			iTempPerm56 = (((fRec81[1] > 0) | iVec27[0]) | iVec27[1]);
			fRec83[0] = ((fRec83[1] - fConst3) * iTempPerm56);
			fRec82[0] = (iTempPerm56 * (fConst2 + (fRec82[1] + fRec83[1])));
			fRec81[0] = max((float)0, fRec82[1]);
			iTempPerm57 = (iRec2[0] == 23);
			iVec28[0] = iTempPerm57;
			iTempPerm58 = (((fRec84[1] > 0) | iVec28[0]) | iVec28[1]);
			fRec86[0] = ((fRec86[1] - fConst3) * iTempPerm58);
			fRec85[0] = (iTempPerm58 * (fConst2 + (fRec85[1] + fRec86[1])));
			fRec84[0] = max((float)0, fRec85[1]);
			iTempPerm59 = (iRec2[0] == 25);
			iVec29[0] = iTempPerm59;
			iTempPerm60 = (((fRec87[1] > 0) | iVec29[0]) | iVec29[1]);
			fRec89[0] = ((fRec89[1] - fConst3) * iTempPerm60);
			fRec88[0] = (iTempPerm60 * (fConst2 + (fRec88[1] + fRec89[1])));
			fRec87[0] = max((float)0, fRec88[1]);
			iTempPerm61 = (iRec2[0] == 27);
			iVec30[0] = iTempPerm61;
			iTempPerm62 = (((fRec90[1] > 0) | iVec30[0]) | iVec30[1]);
			fRec92[0] = ((fRec92[1] - fConst3) * iTempPerm62);
			fRec91[0] = (iTempPerm62 * (fConst2 + (fRec91[1] + fRec92[1])));
			fRec90[0] = max((float)0, fRec91[1]);
			iTempPerm63 = (iRec2[0] == 29);
			iVec31[0] = iTempPerm63;
			iTempPerm64 = (((fRec93[1] > 0) | iVec31[0]) | iVec31[1]);
			fRec95[0] = ((fRec95[1] - fConst3) * iTempPerm64);
			fRec94[0] = (iTempPerm64 * (fConst2 + (fRec94[1] + fRec95[1])));
			fRec93[0] = max((float)0, fRec94[1]);
			iTempPerm65 = (iRec2[0] == 31);
			iVec32[0] = iTempPerm65;
			iTempPerm66 = (((fRec96[1] > 0) | iVec32[0]) | iVec32[1]);
			fRec98[0] = ((fRec98[1] - fConst3) * iTempPerm66);
			fRec97[0] = (iTempPerm66 * (fConst2 + (fRec97[1] + fRec98[1])));
			fRec96[0] = max((float)0, fRec97[1]);
			output1[i] = (FAUSTFLOAT)((((((((((((((((fRec51[0] * fVec2[(IOTA-iConst19)&524287]) + (fRec54[0] * fVec2[(IOTA-iConst20)&524287])) + (fRec57[0] * fVec2[(IOTA-iConst21)&524287])) + (fRec60[0] * fVec2[(IOTA-iConst22)&524287])) + (fRec63[0] * fVec2[(IOTA-iConst23)&524287])) + (fRec66[0] * fVec2[(IOTA-iConst24)&524287])) + (fRec69[0] * fVec2[(IOTA-iConst25)&524287])) + (fRec72[0] * fVec2[(IOTA-iConst26)&524287])) + (fRec75[0] * fVec2[(IOTA-iConst27)&524287])) + (fRec78[0] * fVec2[(IOTA-iConst28)&524287])) + (fRec81[0] * fVec2[(IOTA-iConst29)&524287])) + (fRec84[0] * fVec2[(IOTA-iConst30)&524287])) + (fRec87[0] * fVec2[(IOTA-iConst31)&524287])) + (fRec90[0] * fVec2[(IOTA-iConst32)&524287])) + (fRec93[0] * fVec2[(IOTA-iConst33)&524287])) + (fRec96[0] * fVec2[(IOTA-iConst34)&524287]));
			// post processing
			fRec96[1] = fRec96[0];
			fRec97[1] = fRec97[0];
			fRec98[1] = fRec98[0];
			iVec32[1] = iVec32[0];
			fRec93[1] = fRec93[0];
			fRec94[1] = fRec94[0];
			fRec95[1] = fRec95[0];
			iVec31[1] = iVec31[0];
			fRec90[1] = fRec90[0];
			fRec91[1] = fRec91[0];
			fRec92[1] = fRec92[0];
			iVec30[1] = iVec30[0];
			fRec87[1] = fRec87[0];
			fRec88[1] = fRec88[0];
			fRec89[1] = fRec89[0];
			iVec29[1] = iVec29[0];
			fRec84[1] = fRec84[0];
			fRec85[1] = fRec85[0];
			fRec86[1] = fRec86[0];
			iVec28[1] = iVec28[0];
			fRec81[1] = fRec81[0];
			fRec82[1] = fRec82[0];
			fRec83[1] = fRec83[0];
			iVec27[1] = iVec27[0];
			fRec78[1] = fRec78[0];
			fRec79[1] = fRec79[0];
			fRec80[1] = fRec80[0];
			iVec26[1] = iVec26[0];
			fRec75[1] = fRec75[0];
			fRec76[1] = fRec76[0];
			fRec77[1] = fRec77[0];
			iVec25[1] = iVec25[0];
			fRec72[1] = fRec72[0];
			fRec73[1] = fRec73[0];
			fRec74[1] = fRec74[0];
			iVec24[1] = iVec24[0];
			fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fRec71[1] = fRec71[0];
			iVec23[1] = iVec23[0];
			fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			iVec22[1] = iVec22[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec65[1] = fRec65[0];
			iVec21[1] = iVec21[0];
			fRec60[1] = fRec60[0];
			fRec61[1] = fRec61[0];
			fRec62[1] = fRec62[0];
			iVec20[1] = iVec20[0];
			fRec57[1] = fRec57[0];
			fRec58[1] = fRec58[0];
			fRec59[1] = fRec59[0];
			iVec19[1] = iVec19[0];
			fRec54[1] = fRec54[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			iVec18[1] = iVec18[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec53[1] = fRec53[0];
			iVec17[1] = iVec17[0];
			fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fRec50[1] = fRec50[0];
			iVec16[1] = iVec16[0];
			fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fRec47[1] = fRec47[0];
			iVec15[1] = iVec15[0];
			fRec42[1] = fRec42[0];
			fRec43[1] = fRec43[0];
			fRec44[1] = fRec44[0];
			iVec14[1] = iVec14[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec41[1] = fRec41[0];
			iVec13[1] = iVec13[0];
			fRec36[1] = fRec36[0];
			fRec37[1] = fRec37[0];
			fRec38[1] = fRec38[0];
			iVec12[1] = iVec12[0];
			fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fRec35[1] = fRec35[0];
			iVec11[1] = iVec11[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			iVec10[1] = iVec10[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			iVec9[1] = iVec9[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			iVec8[1] = iVec8[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			iVec7[1] = iVec7[0];
			fRec18[1] = fRec18[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			iVec6[1] = iVec6[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			iVec5[1] = iVec5[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec14[1] = fRec14[0];
			iVec4[1] = iVec4[0];
			fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fRec11[1] = fRec11[0];
			iVec3[1] = iVec3[0];
			IOTA = IOTA+1;
			fRec6[1] = fRec6[0];
			fRec7[1] = fRec7[0];
			fRec8[1] = fRec8[0];
			iVec1[1] = iVec1[0];
			fRec0[1] = fRec0[0];
			fRec1[1] = fRec1[0];
			fRec5[1] = fRec5[0];
			iVec0[1] = iVec0[0];
			iRec2[1] = iRec2[0];
			iRec4[1] = iRec4[0];
			iRec3[1] = iRec3[0];
		}
	}
};


