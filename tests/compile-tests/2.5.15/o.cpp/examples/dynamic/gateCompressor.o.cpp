//----------------------------------------------------------
// name: "gateCompressor"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[4];
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	FAUSTFLOAT 	fcheckbox4;
	int 	iRec5[2];
	float 	fTempPerm0;
	float 	fRec4[4];
	FAUSTFLOAT 	fentry0;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fRec7[2];
	float 	fTempPerm1;
	float 	fVec1[2];
	float 	fTempPerm2;
	float 	fRec6[2];
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fVec2[2];
	float 	fTempPerm6;
	float 	fVec3[2];
	float 	fTempPerm7;
	float 	fVec4[2];
	float 	fTempPerm8;
	float 	fVec5[2];
	float 	fConst17;
	float 	fTempPerm9;
	float 	fVec6[2];
	float 	fTempPerm10;
	float 	fVec7[2];
	float 	fConst18;
	FAUSTFLOAT 	fslider4;
	float 	fTempPerm11;
	float 	fVec8[2];
	float 	fTempPerm12;
	float 	fRec8[2];
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fVec9[2];
	float 	fTempPerm16;
	float 	fVec10[2];
	float 	fTempPerm17;
	float 	fVec11[2];
	float 	fTempPerm18;
	float 	fVec12[2];
	float 	fTempPerm19;
	float 	fVec13[2];
	float 	fTempPerm20;
	float 	fVec14[2];
	FAUSTFLOAT 	fslider5;
	float 	fTempPerm21;
	float 	fVec15[2];
	float 	fTempPerm22;
	float 	fRec9[2];
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fVec16[2];
	float 	fTempPerm26;
	float 	fVec17[2];
	float 	fTempPerm27;
	float 	fVec18[2];
	float 	fTempPerm28;
	float 	fVec19[2];
	float 	fTempPerm29;
	float 	fVec20[2];
	float 	fTempPerm30;
	float 	fVec21[2];
	FAUSTFLOAT 	fslider6;
	float 	fRec10[2];
	float 	fTempPerm31;
	float 	fConst19;
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fRec14[2];
	FAUSTFLOAT 	fslider9;
	int 	iTempPerm34;
	int 	iVec22[2];
	FAUSTFLOAT 	fslider10;
	int 	iRec15[2];
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fRec12[2];
	float 	fRec11[2];
	FAUSTFLOAT 	fbargraph0;
	float 	fTempPerm37;
	float 	fRec19[2];
	int 	iTempPerm38;
	int 	iVec23[2];
	int 	iRec20[2];
	float 	fTempPerm39;
	float 	fTempPerm40;
	float 	fRec17[2];
	float 	fRec16[2];
	float 	fTempPerm41;
	FAUSTFLOAT 	fslider11;
	float 	fTempPerm42;
	float 	fConst20;
	FAUSTFLOAT 	fslider12;
	FAUSTFLOAT 	fslider13;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fTempPerm45;
	FAUSTFLOAT 	fslider14;
	float 	fTempPerm46;
	float 	fRec23[2];
	float 	fRec22[2];
	FAUSTFLOAT 	fslider15;
	float 	fRec21[2];
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	float 	fRec26[2];
	float 	fRec25[2];
	float 	fRec24[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fTempPerm52;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fRec3[3];
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fRec2[3];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fRec1[3];
	float 	fConst30;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fRec33[3];
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fRec32[3];
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec31[3];
	float 	fConst58;
	float 	fTempPerm53;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fRec30[3];
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec29[3];
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fRec28[3];
	float 	fConst68;
	float 	fRec27[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fRec40[3];
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fRec39[3];
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fRec38[3];
	float 	fConst96;
	float 	fTempPerm54;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fRec37[3];
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fRec36[3];
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fRec35[3];
	float 	fConst106;
	float 	fRec34[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fRec47[3];
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fRec46[3];
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fRec45[3];
	float 	fConst134;
	float 	fTempPerm55;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fRec44[3];
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fRec43[3];
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fRec42[3];
	float 	fConst144;
	float 	fRec41[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fRec54[3];
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fRec53[3];
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fRec52[3];
	float 	fConst172;
	float 	fTempPerm56;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fRec51[3];
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fRec50[3];
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fRec49[3];
	float 	fConst182;
	float 	fRec48[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fRec61[3];
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fRec60[3];
	float 	fConst207;
	float 	fConst208;
	float 	fConst209;
	float 	fRec59[3];
	float 	fConst210;
	float 	fTempPerm57;
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fRec58[3];
	float 	fConst214;
	float 	fConst215;
	float 	fConst216;
	float 	fRec57[3];
	float 	fConst217;
	float 	fConst218;
	float 	fConst219;
	float 	fRec56[3];
	float 	fConst220;
	float 	fRec55[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fRec68[3];
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fRec67[3];
	float 	fConst245;
	float 	fConst246;
	float 	fConst247;
	float 	fRec66[3];
	float 	fConst248;
	float 	fTempPerm58;
	float 	fConst249;
	float 	fConst250;
	float 	fConst251;
	float 	fRec65[3];
	float 	fConst252;
	float 	fConst253;
	float 	fConst254;
	float 	fRec64[3];
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fRec63[3];
	float 	fConst258;
	float 	fRec62[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst259;
	float 	fConst260;
	float 	fConst261;
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fConst273;
	float 	fConst274;
	float 	fConst275;
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fConst279;
	float 	fRec75[3];
	float 	fConst280;
	float 	fConst281;
	float 	fConst282;
	float 	fRec74[3];
	float 	fConst283;
	float 	fConst284;
	float 	fConst285;
	float 	fRec73[3];
	float 	fConst286;
	float 	fTempPerm59;
	float 	fConst287;
	float 	fConst288;
	float 	fConst289;
	float 	fRec72[3];
	float 	fConst290;
	float 	fConst291;
	float 	fConst292;
	float 	fRec71[3];
	float 	fConst293;
	float 	fConst294;
	float 	fConst295;
	float 	fRec70[3];
	float 	fConst296;
	float 	fRec69[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst297;
	float 	fConst298;
	float 	fConst299;
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fConst317;
	float 	fRec82[3];
	float 	fConst318;
	float 	fConst319;
	float 	fConst320;
	float 	fRec81[3];
	float 	fConst321;
	float 	fConst322;
	float 	fConst323;
	float 	fRec80[3];
	float 	fConst324;
	float 	fTempPerm60;
	float 	fConst325;
	float 	fConst326;
	float 	fConst327;
	float 	fRec79[3];
	float 	fConst328;
	float 	fConst329;
	float 	fConst330;
	float 	fRec78[3];
	float 	fConst331;
	float 	fConst332;
	float 	fConst333;
	float 	fRec77[3];
	float 	fConst334;
	float 	fRec76[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fConst338;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fConst353;
	float 	fConst354;
	float 	fConst355;
	float 	fRec89[3];
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fRec88[3];
	float 	fConst359;
	float 	fConst360;
	float 	fConst361;
	float 	fRec87[3];
	float 	fConst362;
	float 	fTempPerm61;
	float 	fConst363;
	float 	fConst364;
	float 	fConst365;
	float 	fRec86[3];
	float 	fConst366;
	float 	fConst367;
	float 	fConst368;
	float 	fRec85[3];
	float 	fConst369;
	float 	fConst370;
	float 	fConst371;
	float 	fRec84[3];
	float 	fConst372;
	float 	fRec83[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst373;
	float 	fConst374;
	float 	fConst375;
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fConst389;
	float 	fConst390;
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fRec96[3];
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fRec95[3];
	float 	fConst397;
	float 	fConst398;
	float 	fConst399;
	float 	fRec94[3];
	float 	fConst400;
	float 	fTempPerm62;
	float 	fConst401;
	float 	fConst402;
	float 	fConst403;
	float 	fRec93[3];
	float 	fConst404;
	float 	fConst405;
	float 	fConst406;
	float 	fRec92[3];
	float 	fConst407;
	float 	fConst408;
	float 	fConst409;
	float 	fRec91[3];
	float 	fConst410;
	float 	fRec90[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fConst425;
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fRec103[3];
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fRec102[3];
	float 	fConst435;
	float 	fConst436;
	float 	fConst437;
	float 	fRec101[3];
	float 	fConst438;
	float 	fTempPerm63;
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fRec100[3];
	float 	fConst442;
	float 	fConst443;
	float 	fConst444;
	float 	fRec99[3];
	float 	fConst445;
	float 	fConst446;
	float 	fConst447;
	float 	fRec98[3];
	float 	fConst448;
	float 	fRec97[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fRec110[3];
	float 	fConst470;
	float 	fConst471;
	float 	fConst472;
	float 	fRec109[3];
	float 	fConst473;
	float 	fConst474;
	float 	fConst475;
	float 	fRec108[3];
	float 	fConst476;
	float 	fTempPerm64;
	float 	fConst477;
	float 	fConst478;
	float 	fConst479;
	float 	fRec107[3];
	float 	fConst480;
	float 	fConst481;
	float 	fConst482;
	float 	fRec106[3];
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fRec105[3];
	float 	fConst486;
	float 	fRec104[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fRec117[3];
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fRec116[3];
	float 	fConst511;
	float 	fConst512;
	float 	fConst513;
	float 	fRec115[3];
	float 	fConst514;
	float 	fTempPerm65;
	float 	fConst515;
	float 	fConst516;
	float 	fConst517;
	float 	fRec114[3];
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fRec113[3];
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fRec112[3];
	float 	fConst524;
	float 	fRec111[2];
	FAUSTFLOAT 	fbargraph15;
	float 	fConst525;
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fConst533;
	float 	fRec121[3];
	float 	fConst534;
	float 	fConst535;
	float 	fConst536;
	float 	fRec120[3];
	float 	fConst537;
	float 	fConst538;
	float 	fConst539;
	float 	fRec119[3];
	float 	fConst540;
	float 	fRec118[2];
	FAUSTFLOAT 	fbargraph16;
	float 	fTempPerm66;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("compressors.lib/name", "Faust Compressor Effect Library");
		m->declare("compressors.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("misceffects.lib/name", "Faust Math Library");
		m->declare("misceffects.lib/version", "2.0");
		m->declare("name", "gateCompressor");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = tanf((50265.482457436687f / fConst0));
		fConst3 = (1.0f / fConst2);
		fConst4 = (1.0f / (((fConst3 + 0.157482159302087f) / fConst2) + 0.93514016703154246f));
		fConst5 = faustpower<2>(fConst2);
		fConst6 = (50.063807016150385f / fConst5);
		fConst7 = (2 * (0.93514016703154246f - fConst6));
		fConst8 = (1.0f / (((fConst3 + 0.74313046010703965f) / fConst2) + 1.450071084655647f));
		fConst9 = (11.052052171507189f / fConst5);
		fConst10 = (2 * (1.450071084655647f - fConst9));
		fConst11 = (1.0f / (((fConst3 + 3.1897274020965583f) / fConst2) + 4.0767819696438066f));
		fConst12 = (0.0017661728399818856f / fConst5);
		fConst13 = (2 * (0.00040767818495825777f - fConst12));
		fTempPerm0 = 0;
		fConst14 = float(fConst0);
		fConst15 = (0.005208333333333333f * faustpower<3>(fConst14));
		fConst16 = (1.0f / fConst0);
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fConst17 = (0.041666666666666664f * faustpower<2>(fConst14));
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fConst18 = (0.25f * fConst14);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fConst19 = (1.0f / fConst14);
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		iTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		iTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fConst20 = (2.0f / fConst0);
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fConst21 = (((fConst3 + -3.1897274020965583f) / fConst2) + 4.0767819696438066f);
		fConst22 = (1.0f / fConst5);
		fConst23 = (2 * (4.0767819696438066f - fConst22));
		fConst24 = (fConst12 + 0.00040767818495825777f);
		fConst25 = (((fConst3 + -0.74313046010703965f) / fConst2) + 1.450071084655647f);
		fConst26 = (2 * (1.450071084655647f - fConst22));
		fConst27 = (fConst9 + 1.450071084655647f);
		fConst28 = (((fConst3 + -0.157482159302087f) / fConst2) + 0.93514016703154246f);
		fConst29 = (2 * (0.93514016703154246f - fConst22));
		fConst30 = (fConst6 + 0.93514016703154246f);
		fConst31 = tanf((31665.269715622984f / fConst0));
		fConst32 = (1.0f / fConst31);
		fConst33 = (1.0f / (((fConst32 + 0.157482159302087f) / fConst31) + 0.93514016703154246f));
		fConst34 = faustpower<2>(fConst31);
		fConst35 = (50.063807016150385f / fConst34);
		fConst36 = (2 * (0.93514016703154246f - fConst35));
		fConst37 = (1.0f / (((fConst32 + 0.74313046010703965f) / fConst31) + 1.450071084655647f));
		fConst38 = (11.052052171507189f / fConst34);
		fConst39 = (2 * (1.450071084655647f - fConst38));
		fConst40 = (1.0f / (((fConst32 + 3.1897274020965583f) / fConst31) + 4.0767819696438066f));
		fConst41 = (0.0017661728399818856f / fConst34);
		fConst42 = (2 * (0.00040767818495825777f - fConst41));
		fConst43 = (1.0f / (((fConst3 + 0.16840487111358901f) / fConst2) + 1.0693584077073119f));
		fConst44 = (2 * (53.536152954556727f - fConst22));
		fConst45 = (1.0f / (((fConst3 + 0.51247864188914105f) / fConst2) + 0.68962136448467504f));
		fConst46 = (2 * (7.6217312988706034f - fConst22));
		fConst47 = (1.0f / (((fConst3 + 0.78241304682164503f) / fConst2) + 0.24529150870616001f));
		fConst48 = (9.9999997054999994e-05f / fConst5);
		fConst49 = (2 * (0.00043322720055500002f - fConst48));
		fConst50 = (((fConst3 + -0.78241304682164503f) / fConst2) + 0.24529150870616001f);
		fConst51 = (2 * (0.24529150870616001f - fConst22));
		fConst52 = (fConst48 + 0.00043322720055500002f);
		fConst53 = (((fConst3 + -0.51247864188914105f) / fConst2) + 0.68962136448467504f);
		fConst54 = (2 * (0.68962136448467504f - fConst22));
		fConst55 = (fConst22 + 7.6217312988706034f);
		fConst56 = (((fConst3 + -0.16840487111358901f) / fConst2) + 1.0693584077073119f);
		fConst57 = (2 * (1.0693584077073119f - fConst22));
		fConst58 = (fConst22 + 53.536152954556727f);
		fTempPerm53 = 0;
		fConst59 = (((fConst32 + -3.1897274020965583f) / fConst31) + 4.0767819696438066f);
		fConst60 = (1.0f / fConst34);
		fConst61 = (2 * (4.0767819696438066f - fConst60));
		fConst62 = (fConst41 + 0.00040767818495825777f);
		fConst63 = (((fConst32 + -0.74313046010703965f) / fConst31) + 1.450071084655647f);
		fConst64 = (2 * (1.450071084655647f - fConst60));
		fConst65 = (fConst38 + 1.450071084655647f);
		fConst66 = (((fConst32 + -0.157482159302087f) / fConst31) + 0.93514016703154246f);
		fConst67 = (2 * (0.93514016703154246f - fConst60));
		fConst68 = (fConst35 + 0.93514016703154246f);
		fConst69 = tanf((19947.869932656024f / fConst0));
		fConst70 = (1.0f / fConst69);
		fConst71 = (1.0f / (((fConst70 + 0.157482159302087f) / fConst69) + 0.93514016703154246f));
		fConst72 = faustpower<2>(fConst69);
		fConst73 = (50.063807016150385f / fConst72);
		fConst74 = (2 * (0.93514016703154246f - fConst73));
		fConst75 = (1.0f / (((fConst70 + 0.74313046010703965f) / fConst69) + 1.450071084655647f));
		fConst76 = (11.052052171507189f / fConst72);
		fConst77 = (2 * (1.450071084655647f - fConst76));
		fConst78 = (1.0f / (((fConst70 + 3.1897274020965583f) / fConst69) + 4.0767819696438066f));
		fConst79 = (0.0017661728399818856f / fConst72);
		fConst80 = (2 * (0.00040767818495825777f - fConst79));
		fConst81 = (1.0f / (((fConst32 + 0.16840487111358901f) / fConst31) + 1.0693584077073119f));
		fConst82 = (2 * (53.536152954556727f - fConst60));
		fConst83 = (1.0f / (((fConst32 + 0.51247864188914105f) / fConst31) + 0.68962136448467504f));
		fConst84 = (2 * (7.6217312988706034f - fConst60));
		fConst85 = (1.0f / (((fConst32 + 0.78241304682164503f) / fConst31) + 0.24529150870616001f));
		fConst86 = (9.9999997054999994e-05f / fConst34);
		fConst87 = (2 * (0.00043322720055500002f - fConst86));
		fConst88 = (((fConst32 + -0.78241304682164503f) / fConst31) + 0.24529150870616001f);
		fConst89 = (2 * (0.24529150870616001f - fConst60));
		fConst90 = (fConst86 + 0.00043322720055500002f);
		fConst91 = (((fConst32 + -0.51247864188914105f) / fConst31) + 0.68962136448467504f);
		fConst92 = (2 * (0.68962136448467504f - fConst60));
		fConst93 = (fConst60 + 7.6217312988706034f);
		fConst94 = (((fConst32 + -0.16840487111358901f) / fConst31) + 1.0693584077073119f);
		fConst95 = (2 * (1.0693584077073119f - fConst60));
		fConst96 = (fConst60 + 53.536152954556727f);
		fTempPerm54 = 0;
		fConst97 = (((fConst70 + -3.1897274020965583f) / fConst69) + 4.0767819696438066f);
		fConst98 = (1.0f / fConst72);
		fConst99 = (2 * (4.0767819696438066f - fConst98));
		fConst100 = (fConst79 + 0.00040767818495825777f);
		fConst101 = (((fConst70 + -0.74313046010703965f) / fConst69) + 1.450071084655647f);
		fConst102 = (2 * (1.450071084655647f - fConst98));
		fConst103 = (fConst76 + 1.450071084655647f);
		fConst104 = (((fConst70 + -0.157482159302087f) / fConst69) + 0.93514016703154246f);
		fConst105 = (2 * (0.93514016703154246f - fConst98));
		fConst106 = (fConst73 + 0.93514016703154246f);
		fConst107 = tanf((12566.370614359172f / fConst0));
		fConst108 = (1.0f / fConst107);
		fConst109 = (1.0f / (((fConst108 + 0.157482159302087f) / fConst107) + 0.93514016703154246f));
		fConst110 = faustpower<2>(fConst107);
		fConst111 = (50.063807016150385f / fConst110);
		fConst112 = (2 * (0.93514016703154246f - fConst111));
		fConst113 = (1.0f / (((fConst108 + 0.74313046010703965f) / fConst107) + 1.450071084655647f));
		fConst114 = (11.052052171507189f / fConst110);
		fConst115 = (2 * (1.450071084655647f - fConst114));
		fConst116 = (1.0f / (((fConst108 + 3.1897274020965583f) / fConst107) + 4.0767819696438066f));
		fConst117 = (0.0017661728399818856f / fConst110);
		fConst118 = (2 * (0.00040767818495825777f - fConst117));
		fConst119 = (1.0f / (((fConst70 + 0.16840487111358901f) / fConst69) + 1.0693584077073119f));
		fConst120 = (2 * (53.536152954556727f - fConst98));
		fConst121 = (1.0f / (((fConst70 + 0.51247864188914105f) / fConst69) + 0.68962136448467504f));
		fConst122 = (2 * (7.6217312988706034f - fConst98));
		fConst123 = (1.0f / (((fConst70 + 0.78241304682164503f) / fConst69) + 0.24529150870616001f));
		fConst124 = (9.9999997054999994e-05f / fConst72);
		fConst125 = (2 * (0.00043322720055500002f - fConst124));
		fConst126 = (((fConst70 + -0.78241304682164503f) / fConst69) + 0.24529150870616001f);
		fConst127 = (2 * (0.24529150870616001f - fConst98));
		fConst128 = (fConst124 + 0.00043322720055500002f);
		fConst129 = (((fConst70 + -0.51247864188914105f) / fConst69) + 0.68962136448467504f);
		fConst130 = (2 * (0.68962136448467504f - fConst98));
		fConst131 = (fConst98 + 7.6217312988706034f);
		fConst132 = (((fConst70 + -0.16840487111358901f) / fConst69) + 1.0693584077073119f);
		fConst133 = (2 * (1.0693584077073119f - fConst98));
		fConst134 = (fConst98 + 53.536152954556727f);
		fTempPerm55 = 0;
		fConst135 = (((fConst108 + -3.1897274020965583f) / fConst107) + 4.0767819696438066f);
		fConst136 = (1.0f / fConst110);
		fConst137 = (2 * (4.0767819696438066f - fConst136));
		fConst138 = (fConst117 + 0.00040767818495825777f);
		fConst139 = (((fConst108 + -0.74313046010703965f) / fConst107) + 1.450071084655647f);
		fConst140 = (2 * (1.450071084655647f - fConst136));
		fConst141 = (fConst114 + 1.450071084655647f);
		fConst142 = (((fConst108 + -0.157482159302087f) / fConst107) + 0.93514016703154246f);
		fConst143 = (2 * (0.93514016703154246f - fConst136));
		fConst144 = (fConst111 + 0.93514016703154246f);
		fConst145 = tanf((7916.3174289057461f / fConst0));
		fConst146 = (1.0f / fConst145);
		fConst147 = (1.0f / (((fConst146 + 0.157482159302087f) / fConst145) + 0.93514016703154246f));
		fConst148 = faustpower<2>(fConst145);
		fConst149 = (50.063807016150385f / fConst148);
		fConst150 = (2 * (0.93514016703154246f - fConst149));
		fConst151 = (1.0f / (((fConst146 + 0.74313046010703965f) / fConst145) + 1.450071084655647f));
		fConst152 = (11.052052171507189f / fConst148);
		fConst153 = (2 * (1.450071084655647f - fConst152));
		fConst154 = (1.0f / (((fConst146 + 3.1897274020965583f) / fConst145) + 4.0767819696438066f));
		fConst155 = (0.0017661728399818856f / fConst148);
		fConst156 = (2 * (0.00040767818495825777f - fConst155));
		fConst157 = (1.0f / (((fConst108 + 0.16840487111358901f) / fConst107) + 1.0693584077073119f));
		fConst158 = (2 * (53.536152954556727f - fConst136));
		fConst159 = (1.0f / (((fConst108 + 0.51247864188914105f) / fConst107) + 0.68962136448467504f));
		fConst160 = (2 * (7.6217312988706034f - fConst136));
		fConst161 = (1.0f / (((fConst108 + 0.78241304682164503f) / fConst107) + 0.24529150870616001f));
		fConst162 = (9.9999997054999994e-05f / fConst110);
		fConst163 = (2 * (0.00043322720055500002f - fConst162));
		fConst164 = (((fConst108 + -0.78241304682164503f) / fConst107) + 0.24529150870616001f);
		fConst165 = (2 * (0.24529150870616001f - fConst136));
		fConst166 = (fConst162 + 0.00043322720055500002f);
		fConst167 = (((fConst108 + -0.51247864188914105f) / fConst107) + 0.68962136448467504f);
		fConst168 = (2 * (0.68962136448467504f - fConst136));
		fConst169 = (fConst136 + 7.6217312988706034f);
		fConst170 = (((fConst108 + -0.16840487111358901f) / fConst107) + 1.0693584077073119f);
		fConst171 = (2 * (1.0693584077073119f - fConst136));
		fConst172 = (fConst136 + 53.536152954556727f);
		fTempPerm56 = 0;
		fConst173 = (((fConst146 + -3.1897274020965583f) / fConst145) + 4.0767819696438066f);
		fConst174 = (1.0f / fConst148);
		fConst175 = (2 * (4.0767819696438066f - fConst174));
		fConst176 = (fConst155 + 0.00040767818495825777f);
		fConst177 = (((fConst146 + -0.74313046010703965f) / fConst145) + 1.450071084655647f);
		fConst178 = (2 * (1.450071084655647f - fConst174));
		fConst179 = (fConst152 + 1.450071084655647f);
		fConst180 = (((fConst146 + -0.157482159302087f) / fConst145) + 0.93514016703154246f);
		fConst181 = (2 * (0.93514016703154246f - fConst174));
		fConst182 = (fConst149 + 0.93514016703154246f);
		fConst183 = tanf((4986.967483164005f / fConst0));
		fConst184 = (1.0f / fConst183);
		fConst185 = (1.0f / (((fConst184 + 0.157482159302087f) / fConst183) + 0.93514016703154246f));
		fConst186 = faustpower<2>(fConst183);
		fConst187 = (50.063807016150385f / fConst186);
		fConst188 = (2 * (0.93514016703154246f - fConst187));
		fConst189 = (1.0f / (((fConst184 + 0.74313046010703965f) / fConst183) + 1.450071084655647f));
		fConst190 = (11.052052171507189f / fConst186);
		fConst191 = (2 * (1.450071084655647f - fConst190));
		fConst192 = (1.0f / (((fConst184 + 3.1897274020965583f) / fConst183) + 4.0767819696438066f));
		fConst193 = (0.0017661728399818856f / fConst186);
		fConst194 = (2 * (0.00040767818495825777f - fConst193));
		fConst195 = (1.0f / (((fConst146 + 0.16840487111358901f) / fConst145) + 1.0693584077073119f));
		fConst196 = (2 * (53.536152954556727f - fConst174));
		fConst197 = (1.0f / (((fConst146 + 0.51247864188914105f) / fConst145) + 0.68962136448467504f));
		fConst198 = (2 * (7.6217312988706034f - fConst174));
		fConst199 = (1.0f / (((fConst146 + 0.78241304682164503f) / fConst145) + 0.24529150870616001f));
		fConst200 = (9.9999997054999994e-05f / fConst148);
		fConst201 = (2 * (0.00043322720055500002f - fConst200));
		fConst202 = (((fConst146 + -0.78241304682164503f) / fConst145) + 0.24529150870616001f);
		fConst203 = (2 * (0.24529150870616001f - fConst174));
		fConst204 = (fConst200 + 0.00043322720055500002f);
		fConst205 = (((fConst146 + -0.51247864188914105f) / fConst145) + 0.68962136448467504f);
		fConst206 = (2 * (0.68962136448467504f - fConst174));
		fConst207 = (fConst174 + 7.6217312988706034f);
		fConst208 = (((fConst146 + -0.16840487111358901f) / fConst145) + 1.0693584077073119f);
		fConst209 = (2 * (1.0693584077073119f - fConst174));
		fConst210 = (fConst174 + 53.536152954556727f);
		fTempPerm57 = 0;
		fConst211 = (((fConst184 + -3.1897274020965583f) / fConst183) + 4.0767819696438066f);
		fConst212 = (1.0f / fConst186);
		fConst213 = (2 * (4.0767819696438066f - fConst212));
		fConst214 = (fConst193 + 0.00040767818495825777f);
		fConst215 = (((fConst184 + -0.74313046010703965f) / fConst183) + 1.450071084655647f);
		fConst216 = (2 * (1.450071084655647f - fConst212));
		fConst217 = (fConst190 + 1.450071084655647f);
		fConst218 = (((fConst184 + -0.157482159302087f) / fConst183) + 0.93514016703154246f);
		fConst219 = (2 * (0.93514016703154246f - fConst212));
		fConst220 = (fConst187 + 0.93514016703154246f);
		fConst221 = tanf((3141.5926535897929f / fConst0));
		fConst222 = (1.0f / fConst221);
		fConst223 = (1.0f / (((fConst222 + 0.157482159302087f) / fConst221) + 0.93514016703154246f));
		fConst224 = faustpower<2>(fConst221);
		fConst225 = (50.063807016150385f / fConst224);
		fConst226 = (2 * (0.93514016703154246f - fConst225));
		fConst227 = (1.0f / (((fConst222 + 0.74313046010703965f) / fConst221) + 1.450071084655647f));
		fConst228 = (11.052052171507189f / fConst224);
		fConst229 = (2 * (1.450071084655647f - fConst228));
		fConst230 = (1.0f / (((fConst222 + 3.1897274020965583f) / fConst221) + 4.0767819696438066f));
		fConst231 = (0.0017661728399818856f / fConst224);
		fConst232 = (2 * (0.00040767818495825777f - fConst231));
		fConst233 = (1.0f / (((fConst184 + 0.16840487111358901f) / fConst183) + 1.0693584077073119f));
		fConst234 = (2 * (53.536152954556727f - fConst212));
		fConst235 = (1.0f / (((fConst184 + 0.51247864188914105f) / fConst183) + 0.68962136448467504f));
		fConst236 = (2 * (7.6217312988706034f - fConst212));
		fConst237 = (1.0f / (((fConst184 + 0.78241304682164503f) / fConst183) + 0.24529150870616001f));
		fConst238 = (9.9999997054999994e-05f / fConst186);
		fConst239 = (2 * (0.00043322720055500002f - fConst238));
		fConst240 = (((fConst184 + -0.78241304682164503f) / fConst183) + 0.24529150870616001f);
		fConst241 = (2 * (0.24529150870616001f - fConst212));
		fConst242 = (fConst238 + 0.00043322720055500002f);
		fConst243 = (((fConst184 + -0.51247864188914105f) / fConst183) + 0.68962136448467504f);
		fConst244 = (2 * (0.68962136448467504f - fConst212));
		fConst245 = (fConst212 + 7.6217312988706034f);
		fConst246 = (((fConst184 + -0.16840487111358901f) / fConst183) + 1.0693584077073119f);
		fConst247 = (2 * (1.0693584077073119f - fConst212));
		fConst248 = (fConst212 + 53.536152954556727f);
		fTempPerm58 = 0;
		fConst249 = (((fConst222 + -3.1897274020965583f) / fConst221) + 4.0767819696438066f);
		fConst250 = (1.0f / fConst224);
		fConst251 = (2 * (4.0767819696438066f - fConst250));
		fConst252 = (fConst231 + 0.00040767818495825777f);
		fConst253 = (((fConst222 + -0.74313046010703965f) / fConst221) + 1.450071084655647f);
		fConst254 = (2 * (1.450071084655647f - fConst250));
		fConst255 = (fConst228 + 1.450071084655647f);
		fConst256 = (((fConst222 + -0.157482159302087f) / fConst221) + 0.93514016703154246f);
		fConst257 = (2 * (0.93514016703154246f - fConst250));
		fConst258 = (fConst225 + 0.93514016703154246f);
		fConst259 = tanf((1979.0793572264361f / fConst0));
		fConst260 = (1.0f / fConst259);
		fConst261 = (1.0f / (((fConst260 + 0.157482159302087f) / fConst259) + 0.93514016703154246f));
		fConst262 = faustpower<2>(fConst259);
		fConst263 = (50.063807016150385f / fConst262);
		fConst264 = (2 * (0.93514016703154246f - fConst263));
		fConst265 = (1.0f / (((fConst260 + 0.74313046010703965f) / fConst259) + 1.450071084655647f));
		fConst266 = (11.052052171507189f / fConst262);
		fConst267 = (2 * (1.450071084655647f - fConst266));
		fConst268 = (1.0f / (((fConst260 + 3.1897274020965583f) / fConst259) + 4.0767819696438066f));
		fConst269 = (0.0017661728399818856f / fConst262);
		fConst270 = (2 * (0.00040767818495825777f - fConst269));
		fConst271 = (1.0f / (((fConst222 + 0.16840487111358901f) / fConst221) + 1.0693584077073119f));
		fConst272 = (2 * (53.536152954556727f - fConst250));
		fConst273 = (1.0f / (((fConst222 + 0.51247864188914105f) / fConst221) + 0.68962136448467504f));
		fConst274 = (2 * (7.6217312988706034f - fConst250));
		fConst275 = (1.0f / (((fConst222 + 0.78241304682164503f) / fConst221) + 0.24529150870616001f));
		fConst276 = (9.9999997054999994e-05f / fConst224);
		fConst277 = (2 * (0.00043322720055500002f - fConst276));
		fConst278 = (((fConst222 + -0.78241304682164503f) / fConst221) + 0.24529150870616001f);
		fConst279 = (2 * (0.24529150870616001f - fConst250));
		fConst280 = (fConst276 + 0.00043322720055500002f);
		fConst281 = (((fConst222 + -0.51247864188914105f) / fConst221) + 0.68962136448467504f);
		fConst282 = (2 * (0.68962136448467504f - fConst250));
		fConst283 = (fConst250 + 7.6217312988706034f);
		fConst284 = (((fConst222 + -0.16840487111358901f) / fConst221) + 1.0693584077073119f);
		fConst285 = (2 * (1.0693584077073119f - fConst250));
		fConst286 = (fConst250 + 53.536152954556727f);
		fTempPerm59 = 0;
		fConst287 = (((fConst260 + -3.1897274020965583f) / fConst259) + 4.0767819696438066f);
		fConst288 = (1.0f / fConst262);
		fConst289 = (2 * (4.0767819696438066f - fConst288));
		fConst290 = (fConst269 + 0.00040767818495825777f);
		fConst291 = (((fConst260 + -0.74313046010703965f) / fConst259) + 1.450071084655647f);
		fConst292 = (2 * (1.450071084655647f - fConst288));
		fConst293 = (fConst266 + 1.450071084655647f);
		fConst294 = (((fConst260 + -0.157482159302087f) / fConst259) + 0.93514016703154246f);
		fConst295 = (2 * (0.93514016703154246f - fConst288));
		fConst296 = (fConst263 + 0.93514016703154246f);
		fConst297 = tanf((1246.7418707910015f / fConst0));
		fConst298 = (1.0f / fConst297);
		fConst299 = (1.0f / (((fConst298 + 0.157482159302087f) / fConst297) + 0.93514016703154246f));
		fConst300 = faustpower<2>(fConst297);
		fConst301 = (50.063807016150385f / fConst300);
		fConst302 = (2 * (0.93514016703154246f - fConst301));
		fConst303 = (1.0f / (((fConst298 + 0.74313046010703965f) / fConst297) + 1.450071084655647f));
		fConst304 = (11.052052171507189f / fConst300);
		fConst305 = (2 * (1.450071084655647f - fConst304));
		fConst306 = (1.0f / (((fConst298 + 3.1897274020965583f) / fConst297) + 4.0767819696438066f));
		fConst307 = (0.0017661728399818856f / fConst300);
		fConst308 = (2 * (0.00040767818495825777f - fConst307));
		fConst309 = (1.0f / (((fConst260 + 0.16840487111358901f) / fConst259) + 1.0693584077073119f));
		fConst310 = (2 * (53.536152954556727f - fConst288));
		fConst311 = (1.0f / (((fConst260 + 0.51247864188914105f) / fConst259) + 0.68962136448467504f));
		fConst312 = (2 * (7.6217312988706034f - fConst288));
		fConst313 = (1.0f / (((fConst260 + 0.78241304682164503f) / fConst259) + 0.24529150870616001f));
		fConst314 = (9.9999997054999994e-05f / fConst262);
		fConst315 = (2 * (0.00043322720055500002f - fConst314));
		fConst316 = (((fConst260 + -0.78241304682164503f) / fConst259) + 0.24529150870616001f);
		fConst317 = (2 * (0.24529150870616001f - fConst288));
		fConst318 = (fConst314 + 0.00043322720055500002f);
		fConst319 = (((fConst260 + -0.51247864188914105f) / fConst259) + 0.68962136448467504f);
		fConst320 = (2 * (0.68962136448467504f - fConst288));
		fConst321 = (fConst288 + 7.6217312988706034f);
		fConst322 = (((fConst260 + -0.16840487111358901f) / fConst259) + 1.0693584077073119f);
		fConst323 = (2 * (1.0693584077073119f - fConst288));
		fConst324 = (fConst288 + 53.536152954556727f);
		fTempPerm60 = 0;
		fConst325 = (((fConst298 + -3.1897274020965583f) / fConst297) + 4.0767819696438066f);
		fConst326 = (1.0f / fConst300);
		fConst327 = (2 * (4.0767819696438066f - fConst326));
		fConst328 = (fConst307 + 0.00040767818495825777f);
		fConst329 = (((fConst298 + -0.74313046010703965f) / fConst297) + 1.450071084655647f);
		fConst330 = (2 * (1.450071084655647f - fConst326));
		fConst331 = (fConst304 + 1.450071084655647f);
		fConst332 = (((fConst298 + -0.157482159302087f) / fConst297) + 0.93514016703154246f);
		fConst333 = (2 * (0.93514016703154246f - fConst326));
		fConst334 = (fConst301 + 0.93514016703154246f);
		fConst335 = tanf((785.39816339744823f / fConst0));
		fConst336 = (1.0f / fConst335);
		fConst337 = (1.0f / (((fConst336 + 0.157482159302087f) / fConst335) + 0.93514016703154246f));
		fConst338 = faustpower<2>(fConst335);
		fConst339 = (50.063807016150385f / fConst338);
		fConst340 = (2 * (0.93514016703154246f - fConst339));
		fConst341 = (1.0f / (((fConst336 + 0.74313046010703965f) / fConst335) + 1.450071084655647f));
		fConst342 = (11.052052171507189f / fConst338);
		fConst343 = (2 * (1.450071084655647f - fConst342));
		fConst344 = (1.0f / (((fConst336 + 3.1897274020965583f) / fConst335) + 4.0767819696438066f));
		fConst345 = (0.0017661728399818856f / fConst338);
		fConst346 = (2 * (0.00040767818495825777f - fConst345));
		fConst347 = (1.0f / (((fConst298 + 0.16840487111358901f) / fConst297) + 1.0693584077073119f));
		fConst348 = (2 * (53.536152954556727f - fConst326));
		fConst349 = (1.0f / (((fConst298 + 0.51247864188914105f) / fConst297) + 0.68962136448467504f));
		fConst350 = (2 * (7.6217312988706034f - fConst326));
		fConst351 = (1.0f / (((fConst298 + 0.78241304682164503f) / fConst297) + 0.24529150870616001f));
		fConst352 = (9.9999997054999994e-05f / fConst300);
		fConst353 = (2 * (0.00043322720055500002f - fConst352));
		fConst354 = (((fConst298 + -0.78241304682164503f) / fConst297) + 0.24529150870616001f);
		fConst355 = (2 * (0.24529150870616001f - fConst326));
		fConst356 = (fConst352 + 0.00043322720055500002f);
		fConst357 = (((fConst298 + -0.51247864188914105f) / fConst297) + 0.68962136448467504f);
		fConst358 = (2 * (0.68962136448467504f - fConst326));
		fConst359 = (fConst326 + 7.6217312988706034f);
		fConst360 = (((fConst298 + -0.16840487111358901f) / fConst297) + 1.0693584077073119f);
		fConst361 = (2 * (1.0693584077073119f - fConst326));
		fConst362 = (fConst326 + 53.536152954556727f);
		fTempPerm61 = 0;
		fConst363 = (((fConst336 + -3.1897274020965583f) / fConst335) + 4.0767819696438066f);
		fConst364 = (1.0f / fConst338);
		fConst365 = (2 * (4.0767819696438066f - fConst364));
		fConst366 = (fConst345 + 0.00040767818495825777f);
		fConst367 = (((fConst336 + -0.74313046010703965f) / fConst335) + 1.450071084655647f);
		fConst368 = (2 * (1.450071084655647f - fConst364));
		fConst369 = (fConst342 + 1.450071084655647f);
		fConst370 = (((fConst336 + -0.157482159302087f) / fConst335) + 0.93514016703154246f);
		fConst371 = (2 * (0.93514016703154246f - fConst364));
		fConst372 = (fConst339 + 0.93514016703154246f);
		fConst373 = tanf((494.76983930660901f / fConst0));
		fConst374 = (1.0f / fConst373);
		fConst375 = (1.0f / (((fConst374 + 0.157482159302087f) / fConst373) + 0.93514016703154246f));
		fConst376 = faustpower<2>(fConst373);
		fConst377 = (50.063807016150385f / fConst376);
		fConst378 = (2 * (0.93514016703154246f - fConst377));
		fConst379 = (1.0f / (((fConst374 + 0.74313046010703965f) / fConst373) + 1.450071084655647f));
		fConst380 = (11.052052171507189f / fConst376);
		fConst381 = (2 * (1.450071084655647f - fConst380));
		fConst382 = (1.0f / (((fConst374 + 3.1897274020965583f) / fConst373) + 4.0767819696438066f));
		fConst383 = (0.0017661728399818856f / fConst376);
		fConst384 = (2 * (0.00040767818495825777f - fConst383));
		fConst385 = (1.0f / (((fConst336 + 0.16840487111358901f) / fConst335) + 1.0693584077073119f));
		fConst386 = (2 * (53.536152954556727f - fConst364));
		fConst387 = (1.0f / (((fConst336 + 0.51247864188914105f) / fConst335) + 0.68962136448467504f));
		fConst388 = (2 * (7.6217312988706034f - fConst364));
		fConst389 = (1.0f / (((fConst336 + 0.78241304682164503f) / fConst335) + 0.24529150870616001f));
		fConst390 = (9.9999997054999994e-05f / fConst338);
		fConst391 = (2 * (0.00043322720055500002f - fConst390));
		fConst392 = (((fConst336 + -0.78241304682164503f) / fConst335) + 0.24529150870616001f);
		fConst393 = (2 * (0.24529150870616001f - fConst364));
		fConst394 = (fConst390 + 0.00043322720055500002f);
		fConst395 = (((fConst336 + -0.51247864188914105f) / fConst335) + 0.68962136448467504f);
		fConst396 = (2 * (0.68962136448467504f - fConst364));
		fConst397 = (fConst364 + 7.6217312988706034f);
		fConst398 = (((fConst336 + -0.16840487111358901f) / fConst335) + 1.0693584077073119f);
		fConst399 = (2 * (1.0693584077073119f - fConst364));
		fConst400 = (fConst364 + 53.536152954556727f);
		fTempPerm62 = 0;
		fConst401 = (((fConst374 + -3.1897274020965583f) / fConst373) + 4.0767819696438066f);
		fConst402 = (1.0f / fConst376);
		fConst403 = (2 * (4.0767819696438066f - fConst402));
		fConst404 = (fConst383 + 0.00040767818495825777f);
		fConst405 = (((fConst374 + -0.74313046010703965f) / fConst373) + 1.450071084655647f);
		fConst406 = (2 * (1.450071084655647f - fConst402));
		fConst407 = (fConst380 + 1.450071084655647f);
		fConst408 = (((fConst374 + -0.157482159302087f) / fConst373) + 0.93514016703154246f);
		fConst409 = (2 * (0.93514016703154246f - fConst402));
		fConst410 = (fConst377 + 0.93514016703154246f);
		fConst411 = tanf((311.68546769775037f / fConst0));
		fConst412 = (1.0f / fConst411);
		fConst413 = (1.0f / (((fConst412 + 0.157482159302087f) / fConst411) + 0.93514016703154246f));
		fConst414 = faustpower<2>(fConst411);
		fConst415 = (50.063807016150385f / fConst414);
		fConst416 = (2 * (0.93514016703154246f - fConst415));
		fConst417 = (1.0f / (((fConst412 + 0.74313046010703965f) / fConst411) + 1.450071084655647f));
		fConst418 = (11.052052171507189f / fConst414);
		fConst419 = (2 * (1.450071084655647f - fConst418));
		fConst420 = (1.0f / (((fConst412 + 3.1897274020965583f) / fConst411) + 4.0767819696438066f));
		fConst421 = (0.0017661728399818856f / fConst414);
		fConst422 = (2 * (0.00040767818495825777f - fConst421));
		fConst423 = (1.0f / (((fConst374 + 0.16840487111358901f) / fConst373) + 1.0693584077073119f));
		fConst424 = (2 * (53.536152954556727f - fConst402));
		fConst425 = (1.0f / (((fConst374 + 0.51247864188914105f) / fConst373) + 0.68962136448467504f));
		fConst426 = (2 * (7.6217312988706034f - fConst402));
		fConst427 = (1.0f / (((fConst374 + 0.78241304682164503f) / fConst373) + 0.24529150870616001f));
		fConst428 = (9.9999997054999994e-05f / fConst376);
		fConst429 = (2 * (0.00043322720055500002f - fConst428));
		fConst430 = (((fConst374 + -0.78241304682164503f) / fConst373) + 0.24529150870616001f);
		fConst431 = (2 * (0.24529150870616001f - fConst402));
		fConst432 = (fConst428 + 0.00043322720055500002f);
		fConst433 = (((fConst374 + -0.51247864188914105f) / fConst373) + 0.68962136448467504f);
		fConst434 = (2 * (0.68962136448467504f - fConst402));
		fConst435 = (fConst402 + 7.6217312988706034f);
		fConst436 = (((fConst374 + -0.16840487111358901f) / fConst373) + 1.0693584077073119f);
		fConst437 = (2 * (1.0693584077073119f - fConst402));
		fConst438 = (fConst402 + 53.536152954556727f);
		fTempPerm63 = 0;
		fConst439 = (((fConst412 + -3.1897274020965583f) / fConst411) + 4.0767819696438066f);
		fConst440 = (1.0f / fConst414);
		fConst441 = (2 * (4.0767819696438066f - fConst440));
		fConst442 = (fConst421 + 0.00040767818495825777f);
		fConst443 = (((fConst412 + -0.74313046010703965f) / fConst411) + 1.450071084655647f);
		fConst444 = (2 * (1.450071084655647f - fConst440));
		fConst445 = (fConst418 + 1.450071084655647f);
		fConst446 = (((fConst412 + -0.157482159302087f) / fConst411) + 0.93514016703154246f);
		fConst447 = (2 * (0.93514016703154246f - fConst440));
		fConst448 = (fConst415 + 0.93514016703154246f);
		fConst449 = tanf((196.34954084936206f / fConst0));
		fConst450 = (1.0f / fConst449);
		fConst451 = (1.0f / (((fConst450 + 0.157482159302087f) / fConst449) + 0.93514016703154246f));
		fConst452 = faustpower<2>(fConst449);
		fConst453 = (50.063807016150385f / fConst452);
		fConst454 = (2 * (0.93514016703154246f - fConst453));
		fConst455 = (1.0f / (((fConst450 + 0.74313046010703965f) / fConst449) + 1.450071084655647f));
		fConst456 = (11.052052171507189f / fConst452);
		fConst457 = (2 * (1.450071084655647f - fConst456));
		fConst458 = (1.0f / (((fConst450 + 3.1897274020965583f) / fConst449) + 4.0767819696438066f));
		fConst459 = (0.0017661728399818856f / fConst452);
		fConst460 = (2 * (0.00040767818495825777f - fConst459));
		fConst461 = (1.0f / (((fConst412 + 0.16840487111358901f) / fConst411) + 1.0693584077073119f));
		fConst462 = (2 * (53.536152954556727f - fConst440));
		fConst463 = (1.0f / (((fConst412 + 0.51247864188914105f) / fConst411) + 0.68962136448467504f));
		fConst464 = (2 * (7.6217312988706034f - fConst440));
		fConst465 = (1.0f / (((fConst412 + 0.78241304682164503f) / fConst411) + 0.24529150870616001f));
		fConst466 = (9.9999997054999994e-05f / fConst414);
		fConst467 = (2 * (0.00043322720055500002f - fConst466));
		fConst468 = (((fConst412 + -0.78241304682164503f) / fConst411) + 0.24529150870616001f);
		fConst469 = (2 * (0.24529150870616001f - fConst440));
		fConst470 = (fConst466 + 0.00043322720055500002f);
		fConst471 = (((fConst412 + -0.51247864188914105f) / fConst411) + 0.68962136448467504f);
		fConst472 = (2 * (0.68962136448467504f - fConst440));
		fConst473 = (fConst440 + 7.6217312988706034f);
		fConst474 = (((fConst412 + -0.16840487111358901f) / fConst411) + 1.0693584077073119f);
		fConst475 = (2 * (1.0693584077073119f - fConst440));
		fConst476 = (fConst440 + 53.536152954556727f);
		fTempPerm64 = 0;
		fConst477 = (((fConst450 + -3.1897274020965583f) / fConst449) + 4.0767819696438066f);
		fConst478 = (1.0f / fConst452);
		fConst479 = (2 * (4.0767819696438066f - fConst478));
		fConst480 = (fConst459 + 0.00040767818495825777f);
		fConst481 = (((fConst450 + -0.74313046010703965f) / fConst449) + 1.450071084655647f);
		fConst482 = (2 * (1.450071084655647f - fConst478));
		fConst483 = (fConst456 + 1.450071084655647f);
		fConst484 = (((fConst450 + -0.157482159302087f) / fConst449) + 0.93514016703154246f);
		fConst485 = (2 * (0.93514016703154246f - fConst478));
		fConst486 = (fConst453 + 0.93514016703154246f);
		fConst487 = tanf((123.69245982665232f / fConst0));
		fConst488 = (1.0f / fConst487);
		fConst489 = (1.0f / (((fConst488 + 0.157482159302087f) / fConst487) + 0.93514016703154246f));
		fConst490 = faustpower<2>(fConst487);
		fConst491 = (50.063807016150385f / fConst490);
		fConst492 = (2 * (0.93514016703154246f - fConst491));
		fConst493 = (1.0f / (((fConst488 + 0.74313046010703965f) / fConst487) + 1.450071084655647f));
		fConst494 = (11.052052171507189f / fConst490);
		fConst495 = (2 * (1.450071084655647f - fConst494));
		fConst496 = (1.0f / (((fConst488 + 3.1897274020965583f) / fConst487) + 4.0767819696438066f));
		fConst497 = (0.0017661728399818856f / fConst490);
		fConst498 = (2 * (0.00040767818495825777f - fConst497));
		fConst499 = (1.0f / (((fConst450 + 0.16840487111358901f) / fConst449) + 1.0693584077073119f));
		fConst500 = (2 * (53.536152954556727f - fConst478));
		fConst501 = (1.0f / (((fConst450 + 0.51247864188914105f) / fConst449) + 0.68962136448467504f));
		fConst502 = (2 * (7.6217312988706034f - fConst478));
		fConst503 = (1.0f / (((fConst450 + 0.78241304682164503f) / fConst449) + 0.24529150870616001f));
		fConst504 = (9.9999997054999994e-05f / fConst452);
		fConst505 = (2 * (0.00043322720055500002f - fConst504));
		fConst506 = (((fConst450 + -0.78241304682164503f) / fConst449) + 0.24529150870616001f);
		fConst507 = (2 * (0.24529150870616001f - fConst478));
		fConst508 = (fConst504 + 0.00043322720055500002f);
		fConst509 = (((fConst450 + -0.51247864188914105f) / fConst449) + 0.68962136448467504f);
		fConst510 = (2 * (0.68962136448467504f - fConst478));
		fConst511 = (fConst478 + 7.6217312988706034f);
		fConst512 = (((fConst450 + -0.16840487111358901f) / fConst449) + 1.0693584077073119f);
		fConst513 = (2 * (1.0693584077073119f - fConst478));
		fConst514 = (fConst478 + 53.536152954556727f);
		fTempPerm65 = 0;
		fConst515 = (((fConst488 + -3.1897274020965583f) / fConst487) + 4.0767819696438066f);
		fConst516 = (1.0f / fConst490);
		fConst517 = (2 * (4.0767819696438066f - fConst516));
		fConst518 = (fConst497 + 0.00040767818495825777f);
		fConst519 = (((fConst488 + -0.74313046010703965f) / fConst487) + 1.450071084655647f);
		fConst520 = (2 * (1.450071084655647f - fConst516));
		fConst521 = (fConst494 + 1.450071084655647f);
		fConst522 = (((fConst488 + -0.157482159302087f) / fConst487) + 0.93514016703154246f);
		fConst523 = (2 * (0.93514016703154246f - fConst516));
		fConst524 = (fConst491 + 0.93514016703154246f);
		fConst525 = (1.0f / (((fConst488 + 0.16840487111358901f) / fConst487) + 1.0693584077073119f));
		fConst526 = (2 * (53.536152954556727f - fConst516));
		fConst527 = (1.0f / (((fConst488 + 0.51247864188914105f) / fConst487) + 0.68962136448467504f));
		fConst528 = (2 * (7.6217312988706034f - fConst516));
		fConst529 = (1.0f / (((fConst488 + 0.78241304682164503f) / fConst487) + 0.24529150870616001f));
		fConst530 = (9.9999997054999994e-05f / fConst490);
		fConst531 = (2 * (0.00043322720055500002f - fConst530));
		fConst532 = (((fConst488 + -0.78241304682164503f) / fConst487) + 0.24529150870616001f);
		fConst533 = (2 * (0.24529150870616001f - fConst516));
		fConst534 = (fConst530 + 0.00043322720055500002f);
		fConst535 = (((fConst488 + -0.51247864188914105f) / fConst487) + 0.68962136448467504f);
		fConst536 = (2 * (0.68962136448467504f - fConst516));
		fConst537 = (fConst516 + 7.6217312988706034f);
		fConst538 = (((fConst488 + -0.16840487111358901f) / fConst487) + 1.0693584077073119f);
		fConst539 = (2 * (1.0693584077073119f - fConst516));
		fConst540 = (fConst516 + 53.536152954556727f);
		fTempPerm66 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fcheckbox4 = 0.0;
		fentry0 = 2.0f;
		fslider2 = 49.0f;
		fslider3 = 0.10000000000000001f;
		fslider4 = -0.10000000000000001f;
		fslider5 = 0.10000000000000001f;
		fslider6 = -20.0f;
		fslider7 = 10.0f;
		fslider8 = 100.0f;
		fslider9 = -30.0f;
		fslider10 = 200.0f;
		fslider11 = 40.0f;
		fslider12 = 50.0f;
		fslider13 = 5.0f;
		fslider14 = 500.0f;
		fslider15 = -30.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<4; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) iRec5[i] = 0;
		for (int i=0; i<4; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) iVec22[i] = 0;
		for (int i=0; i<2; i++) iRec15[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) iVec23[i] = 0;
		for (int i=0; i<2; i++) iRec20[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec72[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<3; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<3; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<3; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec100[i] = 0;
		for (int i=0; i<3; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("gateCompressor");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillators.lib   for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider6, "1", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Sawtooth   waveform amplitude");
		ui_interface->declare(&fslider6, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider6, -20.0f, -120.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider2, "2", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider2, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider2, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider4, "3", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Percentange frequency-shift  up or down for second oscillator");
		ui_interface->declare(&fslider4, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider4, -0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider5, "4", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider5, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider5, 0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider3, "5", "");
		ui_interface->declare(&fslider3, "scale", "log");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider3, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider3, 0.10000000000000001f, 0.001f, 10.0f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing   suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox3, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on   the left)", &fcheckbox3);
		ui_interface->declare(&fcheckbox4, "1", "");
		ui_interface->declare(&fcheckbox4, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the   same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox4);
		ui_interface->declare(&fcheckbox2, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise   selection above)", &fcheckbox2);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference:   http://en.wikipedia.org/wiki/Noise_gate");
		ui_interface->openVerticalBox("GATE");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->declare(&fcheckbox1, "tooltip", "When this is checked,   the gate has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox1);
		ui_interface->declare(&fbargraph0, "1", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Current gain of the  gate in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addHorizontalBargraph("Gate Gain", &fbargraph0, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider9, "1", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "When   the signal level falls below the Threshold (expressed in dB), the signal is   muted");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fslider9, -30.0f, -120.0f, 0.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider7, "2", "");
		ui_interface->declare(&fslider7, "scale", "log");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Time constant in MICROseconds (1/e smoothing time) for the gate  gain to go (exponentially) from 0 (muted) to 1 (unmuted)");
		ui_interface->declare(&fslider7, "unit", "us");
		ui_interface->addHorizontalSlider("Attack", &fslider7, 10.0f, 10.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider10, "3", "");
		ui_interface->declare(&fslider10, "scale", "log");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "Time in ms to keep the gate open (no muting) after the signal  level falls below the Threshold");
		ui_interface->declare(&fslider10, "unit", "ms");
		ui_interface->addHorizontalSlider("Hold", &fslider10, 200.0f, 1.0f, 1000.0f, 1.0f);
		ui_interface->declare(&fslider8, "4", "");
		ui_interface->declare(&fslider8, "scale", "log");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Time constant in ms (1/e smoothing time) for the gain to go  (exponentially) from 1 (unmuted) to 0 (muted)");
		ui_interface->declare(&fslider8, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fslider8, 100.0f, 1.0f, 1000.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference:   http://en.wikipedia.org/wiki/Dynamic_range_compression");
		ui_interface->openVerticalBox("COMPRESSOR");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the compressor   has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fbargraph1, "1", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Current gain of  the compressor in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addHorizontalBargraph("Compressor Gain", &fbargraph1, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("Compression Control");
		ui_interface->declare(&fslider13, "0", "");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->declare(&fslider13, "tooltip", "A compression Ratio of N means that for each N dB increase in input  signal level above Threshold, the output level goes up 1 dB");
		ui_interface->addHorizontalSlider("Ratio", &fslider13, 5.0f, 1.0f, 20.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider15, "1", "");
		ui_interface->declare(&fslider15, "style", "knob");
		ui_interface->declare(&fslider15, "tooltip", "When the signal level exceeds the Threshold (in dB), its level  is compressed according to the Ratio");
		ui_interface->declare(&fslider15, "unit", "dB");
		ui_interface->addHorizontalSlider("Threshold", &fslider15, -30.0f, -100.0f, 10.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openHorizontalBox("Compression Response");
		ui_interface->declare(&fslider12, "1", "");
		ui_interface->declare(&fslider12, "scale", "log");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "unit", "ms");
		ui_interface->addHorizontalSlider("Attack     tooltip: Time constant in ms (1/e smoothing time) for the compression gain  to approach (exponentially) a new lower target level (the compression  `kicking in')]", &fslider12, 50.0f, 1.0f, 1000.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider14, "2", "");
		ui_interface->declare(&fslider14, "scale", "log");
		ui_interface->declare(&fslider14, "style", "knob");
		ui_interface->declare(&fslider14, "tooltip", "Time constant in ms (1/e smoothing time) for the compression gain  to approach (exponentially) a new higher target level (the compression  'releasing')");
		ui_interface->declare(&fslider14, "unit", "ms");
		ui_interface->addHorizontalSlider("Release", &fslider14, 500.0f, 1.0f, 1000.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(&fslider11, "5", "");
		ui_interface->declare(&fslider11, "tooltip", "The compressed-signal output level is increased by this amount  (in dB) to make up for the level lost due to compression");
		ui_interface->declare(&fslider11, "unit", "dB");
		ui_interface->addHorizontalSlider("Makeup Gain", &fslider11, 40.0f, -96.0f, 96.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph16, "0", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3ed530", &fbargraph16, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph15, "1", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3e2f50", &fbargraph15, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph14, "2", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3cf690", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "3", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3bbe00", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "4", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3a8640", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "5", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e394ec0", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "6", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e381750", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "7", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e36e010", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "8", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e35a8d0", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "9", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3471d0", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "10", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e333ad0", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "11", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e3203d0", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "12", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e30cd70", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "13", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e2f5ab0", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "14", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fd35e2e19a0", &fbargraph2, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst1 / float(fslider1))));
		float 	fSlow2 = (1.0f - fSlow1);
		int 	iSlow3 = int(float(fcheckbox0));
		int 	iSlow4 = int(float(fcheckbox1));
		int 	iSlow5 = int(float(fcheckbox2));
		int 	iSlow6 = int(float(fcheckbox3));
		int 	iSlow7 = int(float(fcheckbox4));
		int 	iSlow8 = int((float(fentry0) + -1));
		int 	iSlow9 = int((iSlow8 >= 2));
		int 	iSlow10 = int((iSlow8 >= 3));
		float 	fSlow11 = expf((0 - (fConst16 / float(fslider3))));
		float 	fSlow12 = (440.0f * (powf(2.0f,(0.083333333333333329f * (float(fslider2) + -49.0f))) * (1.0f - fSlow11)));
		int 	iSlow13 = int((iSlow8 >= 1));
		float 	fSlow14 = ((0.01f * float(fslider4)) + 1);
		float 	fSlow15 = ((0.01f * float(fslider5)) + 1);
		float 	fSlow16 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider6))));
		float 	fSlow17 = max(fConst19, (9.9999999999999995e-07f * float(fslider7)));
		float 	fSlow18 = max(fConst19, (0.001f * float(fslider8)));
		float 	fSlow19 = expf((0 - (fConst16 / min(fSlow17, fSlow18))));
		float 	fSlow20 = (1.0f - fSlow19);
		float 	fSlow21 = powf(10,(0.050000000000000003f * float(fslider9)));
		int 	iSlow22 = int((fConst0 * max(fConst19, (0.001f * float(fslider10)))));
		float 	fSlow23 = expf((0 - (fConst16 / fSlow18)));
		float 	fSlow24 = expf((0 - (fConst16 / fSlow17)));
		float 	fSlow25 = powf(10,(0.050000000000000003f * float(fslider11)));
		float 	fSlow26 = max(fConst16, (0.001f * float(fslider12)));
		float 	fSlow27 = expf((0 - (fConst20 / fSlow26)));
		float 	fSlow28 = (((1.0f / float(float(fslider13))) + -1.0f) * (1.0f - fSlow27));
		float 	fSlow29 = expf((0 - (fConst16 / max(fConst16, (0.001f * float(fslider14))))));
		float 	fSlow30 = expf((0 - (fConst16 / fSlow26)));
		float 	fSlow31 = float(fslider15);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			iRec5[0] = ((1103515245 * iRec5[1]) + 12345);
			fTempPerm0 = (4.6566128752457969e-10f * iRec5[0]);
			fRec4[0] = ((fTempPerm0 + ((2.4949560019999999f * fRec4[1]) + (0.52218940000000003f * fRec4[3]))) - (2.0172658750000001f * fRec4[2]));
			fRec7[0] = (fSlow12 + (fSlow11 * fRec7[1]));
			fTempPerm1 = max(20.0f, fabsf(fRec7[0]));
			fVec1[0] = fTempPerm1;
			fTempPerm2 = (fRec6[1] + (fConst16 * fVec1[1]));
			fRec6[0] = (fTempPerm2 - floorf(fTempPerm2));
			fTempPerm3 = (2 * fRec6[0]);
			fTempPerm4 = (fTempPerm3 + -1);
			fTempPerm5 = faustpower<2>(fTempPerm4);
			fVec2[0] = fTempPerm5;
			fTempPerm6 = (fVec2[0] * (fVec2[0] + -2.0f));
			fVec3[0] = fTempPerm6;
			fTempPerm7 = ((fVec3[0] - fVec3[1]) / fVec1[0]);
			fVec4[0] = fTempPerm7;
			fTempPerm8 = ((fVec4[0] - fVec4[1]) / fVec1[0]);
			fVec5[0] = fTempPerm8;
			fTempPerm9 = faustpower<3>(fTempPerm4);
			fVec6[0] = (fTempPerm9 + (1 - fTempPerm3));
			fTempPerm10 = ((fTempPerm9 + (1 - (fVec6[1] + fTempPerm3))) / fVec1[0]);
			fVec7[0] = fTempPerm10;
			fTempPerm11 = max(20.0f, fabsf((fSlow14 * fRec7[0])));
			fVec8[0] = fTempPerm11;
			fTempPerm12 = (fRec8[1] + (fConst16 * fVec8[1]));
			fRec8[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = (2 * fRec8[0]);
			fTempPerm14 = (fTempPerm13 + -1);
			fTempPerm15 = faustpower<2>(fTempPerm14);
			fVec9[0] = fTempPerm15;
			fTempPerm16 = (fVec9[0] * (fVec9[0] + -2.0f));
			fVec10[0] = fTempPerm16;
			fTempPerm17 = ((fVec10[0] - fVec10[1]) / fVec8[0]);
			fVec11[0] = fTempPerm17;
			fTempPerm18 = ((fVec11[0] - fVec11[1]) / fVec8[0]);
			fVec12[0] = fTempPerm18;
			fTempPerm19 = faustpower<3>(fTempPerm14);
			fVec13[0] = (fTempPerm19 + (1 - fTempPerm13));
			fTempPerm20 = ((fTempPerm19 + (1 - (fVec13[1] + fTempPerm13))) / fVec8[0]);
			fVec14[0] = fTempPerm20;
			fTempPerm21 = max(20.0f, fabsf((fSlow15 * fRec7[0])));
			fVec15[0] = fTempPerm21;
			fTempPerm22 = (fRec9[1] + (fConst16 * fVec15[1]));
			fRec9[0] = (fTempPerm22 - floorf(fTempPerm22));
			fTempPerm23 = (2 * fRec9[0]);
			fTempPerm24 = (fTempPerm23 + -1);
			fTempPerm25 = faustpower<2>(fTempPerm24);
			fVec16[0] = fTempPerm25;
			fTempPerm26 = (fVec16[0] * (fVec16[0] + -2.0f));
			fVec17[0] = fTempPerm26;
			fTempPerm27 = ((fVec17[0] - fVec17[1]) / fVec15[0]);
			fVec18[0] = fTempPerm27;
			fTempPerm28 = ((fVec18[0] - fVec18[1]) / fVec15[0]);
			fVec19[0] = fTempPerm28;
			fTempPerm29 = faustpower<3>(fTempPerm24);
			fVec20[0] = (fTempPerm29 + (1 - fTempPerm23));
			fTempPerm30 = ((fTempPerm29 + (1 - (fVec20[1] + fTempPerm23))) / fVec15[0]);
			fVec21[0] = fTempPerm30;
			fRec10[0] = (fSlow16 + (0.999f * fRec10[1]));
			fTempPerm31 = (((iSlow5)?(float)input0[i]:((iSlow6)?((iSlow7)?(((0.049922034999999997f * fRec4[0]) + (0.050612698999999997f * fRec4[2])) - ((0.095993537000000004f * fRec4[1]) + (0.0044087859999999996f * fRec4[3]))):fTempPerm0):(0.33333333333333331f * (((((iSlow9)?((iSlow10)?(fConst15 * (((fVec5[0] - fVec5[1]) * iVec0[3]) / fVec1[0])):(fConst17 * (((fVec7[0] - fVec7[1]) * iVec0[2]) / fVec1[0]))):((iSlow13)?(fConst18 * (((fVec2[0] - fVec2[1]) * iVec0[1]) / fVec1[0])):fTempPerm4)) + ((iSlow9)?((iSlow10)?(fConst15 * (((fVec12[0] - fVec12[1]) * iVec0[3]) / fVec8[0])):(fConst17 * (((fVec14[0] - fVec14[1]) * iVec0[2]) / fVec8[0]))):((iSlow13)?(fConst18 * (((fVec9[0] - fVec9[1]) * iVec0[1]) / fVec8[0])):fTempPerm14))) + ((iSlow9)?((iSlow10)?(fConst15 * (((fVec19[0] - fVec19[1]) * iVec0[3]) / fVec15[0])):(fConst17 * (((fVec21[0] - fVec21[1]) * iVec0[2]) / fVec15[0]))):((iSlow13)?(fConst18 * (((fVec16[0] - fVec16[1]) * iVec0[1]) / fVec15[0])):fTempPerm24))) * fRec10[0])))) * fRec10[0]);
			fTempPerm32 = ((iSlow4)?0:fTempPerm31);
			fTempPerm33 = fabsf(fTempPerm32);
			fRec14[0] = ((fSlow19 * fRec14[1]) + (fSlow20 * fabsf((2 * fTempPerm33))));
			float 	fRec13 = fRec14[0];
			iTempPerm34 = (fRec13 > fSlow21);
			iVec22[0] = iTempPerm34;
			iRec15[0] = max((int)(iSlow22 * (iVec22[0] < iVec22[1])), (int)(iRec15[1] + -1));
			fTempPerm35 = fabsf(max(float(iVec22[0]), (float)(iRec15[0] > 0)));
			fTempPerm36 = ((int((fRec11[1] > fTempPerm35)))?fSlow23:fSlow24);
			fRec12[0] = ((fRec12[1] * fTempPerm36) + (fTempPerm35 * (1.0f - fTempPerm36)));
			fRec11[0] = fRec12[0];
			fbargraph0 = (20 * log10f(fRec11[0]));
			fTempPerm37 = fTempPerm32;
			fRec19[0] = ((fSlow19 * fRec19[1]) + (fSlow20 * fabsf((fTempPerm33 + fabsf(fTempPerm37)))));
			float 	fRec18 = fRec19[0];
			iTempPerm38 = (fRec18 > fSlow21);
			iVec23[0] = iTempPerm38;
			iRec20[0] = max((int)(iSlow22 * (iVec23[0] < iVec23[1])), (int)(iRec20[1] + -1));
			fTempPerm39 = fabsf(max(float(iVec23[0]), (float)(iRec20[0] > 0)));
			fTempPerm40 = ((int((fRec16[1] > fTempPerm39)))?fSlow23:fSlow24);
			fRec17[0] = ((fRec17[1] * fTempPerm40) + (fTempPerm39 * (1.0f - fTempPerm40)));
			fRec16[0] = fRec17[0];
			fTempPerm41 = ((iSlow4)?fTempPerm31:(fTempPerm37 * fRec16[0]));
			fTempPerm42 = ((iSlow3)?0:fTempPerm41);
			fTempPerm43 = ((iSlow4)?fTempPerm31:(fTempPerm32 * fRec16[0]));
			fTempPerm44 = ((iSlow3)?0:fTempPerm43);
			fTempPerm45 = fabsf((fabsf(fTempPerm42) + fabsf(fTempPerm44)));
			fTempPerm46 = ((int((fRec22[1] > fTempPerm45)))?fSlow29:fSlow30);
			fRec23[0] = ((fRec23[1] * fTempPerm46) + (fTempPerm45 * (1.0f - fTempPerm46)));
			fRec22[0] = fRec23[0];
			fRec21[0] = ((fSlow27 * fRec21[1]) + (fSlow28 * max(((20 * log10f(fRec22[0])) - fSlow31), 0.0f)));
			fTempPerm47 = powf(10,(0.050000000000000003f * fRec21[0]));
			fTempPerm48 = (fTempPerm42 * fTempPerm47);
			fTempPerm49 = (fTempPerm44 * fTempPerm47);
			fTempPerm50 = fabsf((fabsf(fTempPerm48) + fabsf(fTempPerm49)));
			fTempPerm51 = ((int((fRec25[1] > fTempPerm50)))?fSlow29:fSlow30);
			fRec26[0] = ((fRec26[1] * fTempPerm51) + (fTempPerm50 * (1.0f - fTempPerm51)));
			fRec25[0] = fRec26[0];
			fRec24[0] = ((fSlow27 * fRec24[1]) + (fSlow28 * max(((20 * log10f(fRec25[0])) - fSlow31), 0.0f)));
			fbargraph1 = (20 * log10f(powf(10,(0.050000000000000003f * fRec24[0]))));
			fTempPerm52 = (((iSlow3)?fTempPerm41:(fSlow25 * fTempPerm48)) + ((iSlow3)?fTempPerm43:(fSlow25 * fTempPerm49)));
			fRec3[0] = (fTempPerm52 - (fConst11 * ((fConst21 * fRec3[2]) + (fConst23 * fRec3[1]))));
			fRec2[0] = ((fConst11 * (((fConst13 * fRec3[1]) + (fConst24 * fRec3[0])) + (fConst24 * fRec3[2]))) - (fConst8 * ((fConst25 * fRec2[2]) + (fConst26 * fRec2[1]))));
			fRec1[0] = ((fConst8 * (((fConst10 * fRec2[1]) + (fConst27 * fRec2[0])) + (fConst27 * fRec2[2]))) - (fConst4 * ((fConst28 * fRec1[2]) + (fConst29 * fRec1[1]))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * fabsf((fConst4 * (((fConst7 * fRec1[1]) + (fConst30 * fRec1[0])) + (fConst30 * fRec1[2]))))));
			fbargraph2 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec0[0]))));
			fRec33[0] = (fTempPerm52 - (fConst47 * ((fConst50 * fRec33[2]) + (fConst51 * fRec33[1]))));
			fRec32[0] = ((fConst47 * (((fConst49 * fRec33[1]) + (fConst52 * fRec33[0])) + (fConst52 * fRec33[2]))) - (fConst45 * ((fConst53 * fRec32[2]) + (fConst54 * fRec32[1]))));
			fRec31[0] = ((fConst45 * (((fConst46 * fRec32[1]) + (fConst55 * fRec32[0])) + (fConst55 * fRec32[2]))) - (fConst43 * ((fConst56 * fRec31[2]) + (fConst57 * fRec31[1]))));
			fTempPerm53 = (fConst43 * (((fConst44 * fRec31[1]) + (fConst58 * fRec31[0])) + (fConst58 * fRec31[2])));
			fRec30[0] = (fTempPerm53 - (fConst40 * ((fConst59 * fRec30[2]) + (fConst61 * fRec30[1]))));
			fRec29[0] = ((fConst40 * (((fConst42 * fRec30[1]) + (fConst62 * fRec30[0])) + (fConst62 * fRec30[2]))) - (fConst37 * ((fConst63 * fRec29[2]) + (fConst64 * fRec29[1]))));
			fRec28[0] = ((fConst37 * (((fConst39 * fRec29[1]) + (fConst65 * fRec29[0])) + (fConst65 * fRec29[2]))) - (fConst33 * ((fConst66 * fRec28[2]) + (fConst67 * fRec28[1]))));
			fRec27[0] = ((fSlow1 * fRec27[1]) + (fSlow2 * fabsf((fConst33 * (((fConst36 * fRec28[1]) + (fConst68 * fRec28[0])) + (fConst68 * fRec28[2]))))));
			fbargraph3 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec27[0]))));
			fRec40[0] = (fTempPerm53 - (fConst85 * ((fConst88 * fRec40[2]) + (fConst89 * fRec40[1]))));
			fRec39[0] = ((fConst85 * (((fConst87 * fRec40[1]) + (fConst90 * fRec40[0])) + (fConst90 * fRec40[2]))) - (fConst83 * ((fConst91 * fRec39[2]) + (fConst92 * fRec39[1]))));
			fRec38[0] = ((fConst83 * (((fConst84 * fRec39[1]) + (fConst93 * fRec39[0])) + (fConst93 * fRec39[2]))) - (fConst81 * ((fConst94 * fRec38[2]) + (fConst95 * fRec38[1]))));
			fTempPerm54 = (fConst81 * (((fConst82 * fRec38[1]) + (fConst96 * fRec38[0])) + (fConst96 * fRec38[2])));
			fRec37[0] = (fTempPerm54 - (fConst78 * ((fConst97 * fRec37[2]) + (fConst99 * fRec37[1]))));
			fRec36[0] = ((fConst78 * (((fConst80 * fRec37[1]) + (fConst100 * fRec37[0])) + (fConst100 * fRec37[2]))) - (fConst75 * ((fConst101 * fRec36[2]) + (fConst102 * fRec36[1]))));
			fRec35[0] = ((fConst75 * (((fConst77 * fRec36[1]) + (fConst103 * fRec36[0])) + (fConst103 * fRec36[2]))) - (fConst71 * ((fConst104 * fRec35[2]) + (fConst105 * fRec35[1]))));
			fRec34[0] = ((fSlow1 * fRec34[1]) + (fSlow2 * fabsf((fConst71 * (((fConst74 * fRec35[1]) + (fConst106 * fRec35[0])) + (fConst106 * fRec35[2]))))));
			fbargraph4 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec34[0]))));
			fRec47[0] = (fTempPerm54 - (fConst123 * ((fConst126 * fRec47[2]) + (fConst127 * fRec47[1]))));
			fRec46[0] = ((fConst123 * (((fConst125 * fRec47[1]) + (fConst128 * fRec47[0])) + (fConst128 * fRec47[2]))) - (fConst121 * ((fConst129 * fRec46[2]) + (fConst130 * fRec46[1]))));
			fRec45[0] = ((fConst121 * (((fConst122 * fRec46[1]) + (fConst131 * fRec46[0])) + (fConst131 * fRec46[2]))) - (fConst119 * ((fConst132 * fRec45[2]) + (fConst133 * fRec45[1]))));
			fTempPerm55 = (fConst119 * (((fConst120 * fRec45[1]) + (fConst134 * fRec45[0])) + (fConst134 * fRec45[2])));
			fRec44[0] = (fTempPerm55 - (fConst116 * ((fConst135 * fRec44[2]) + (fConst137 * fRec44[1]))));
			fRec43[0] = ((fConst116 * (((fConst118 * fRec44[1]) + (fConst138 * fRec44[0])) + (fConst138 * fRec44[2]))) - (fConst113 * ((fConst139 * fRec43[2]) + (fConst140 * fRec43[1]))));
			fRec42[0] = ((fConst113 * (((fConst115 * fRec43[1]) + (fConst141 * fRec43[0])) + (fConst141 * fRec43[2]))) - (fConst109 * ((fConst142 * fRec42[2]) + (fConst143 * fRec42[1]))));
			fRec41[0] = ((fSlow1 * fRec41[1]) + (fSlow2 * fabsf((fConst109 * (((fConst112 * fRec42[1]) + (fConst144 * fRec42[0])) + (fConst144 * fRec42[2]))))));
			fbargraph5 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec41[0]))));
			fRec54[0] = (fTempPerm55 - (fConst161 * ((fConst164 * fRec54[2]) + (fConst165 * fRec54[1]))));
			fRec53[0] = ((fConst161 * (((fConst163 * fRec54[1]) + (fConst166 * fRec54[0])) + (fConst166 * fRec54[2]))) - (fConst159 * ((fConst167 * fRec53[2]) + (fConst168 * fRec53[1]))));
			fRec52[0] = ((fConst159 * (((fConst160 * fRec53[1]) + (fConst169 * fRec53[0])) + (fConst169 * fRec53[2]))) - (fConst157 * ((fConst170 * fRec52[2]) + (fConst171 * fRec52[1]))));
			fTempPerm56 = (fConst157 * (((fConst158 * fRec52[1]) + (fConst172 * fRec52[0])) + (fConst172 * fRec52[2])));
			fRec51[0] = (fTempPerm56 - (fConst154 * ((fConst173 * fRec51[2]) + (fConst175 * fRec51[1]))));
			fRec50[0] = ((fConst154 * (((fConst156 * fRec51[1]) + (fConst176 * fRec51[0])) + (fConst176 * fRec51[2]))) - (fConst151 * ((fConst177 * fRec50[2]) + (fConst178 * fRec50[1]))));
			fRec49[0] = ((fConst151 * (((fConst153 * fRec50[1]) + (fConst179 * fRec50[0])) + (fConst179 * fRec50[2]))) - (fConst147 * ((fConst180 * fRec49[2]) + (fConst181 * fRec49[1]))));
			fRec48[0] = ((fSlow1 * fRec48[1]) + (fSlow2 * fabsf((fConst147 * (((fConst150 * fRec49[1]) + (fConst182 * fRec49[0])) + (fConst182 * fRec49[2]))))));
			fbargraph6 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec48[0]))));
			fRec61[0] = (fTempPerm56 - (fConst199 * ((fConst202 * fRec61[2]) + (fConst203 * fRec61[1]))));
			fRec60[0] = ((fConst199 * (((fConst201 * fRec61[1]) + (fConst204 * fRec61[0])) + (fConst204 * fRec61[2]))) - (fConst197 * ((fConst205 * fRec60[2]) + (fConst206 * fRec60[1]))));
			fRec59[0] = ((fConst197 * (((fConst198 * fRec60[1]) + (fConst207 * fRec60[0])) + (fConst207 * fRec60[2]))) - (fConst195 * ((fConst208 * fRec59[2]) + (fConst209 * fRec59[1]))));
			fTempPerm57 = (fConst195 * (((fConst196 * fRec59[1]) + (fConst210 * fRec59[0])) + (fConst210 * fRec59[2])));
			fRec58[0] = (fTempPerm57 - (fConst192 * ((fConst211 * fRec58[2]) + (fConst213 * fRec58[1]))));
			fRec57[0] = ((fConst192 * (((fConst194 * fRec58[1]) + (fConst214 * fRec58[0])) + (fConst214 * fRec58[2]))) - (fConst189 * ((fConst215 * fRec57[2]) + (fConst216 * fRec57[1]))));
			fRec56[0] = ((fConst189 * (((fConst191 * fRec57[1]) + (fConst217 * fRec57[0])) + (fConst217 * fRec57[2]))) - (fConst185 * ((fConst218 * fRec56[2]) + (fConst219 * fRec56[1]))));
			fRec55[0] = ((fSlow1 * fRec55[1]) + (fSlow2 * fabsf((fConst185 * (((fConst188 * fRec56[1]) + (fConst220 * fRec56[0])) + (fConst220 * fRec56[2]))))));
			fbargraph7 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec55[0]))));
			fRec68[0] = (fTempPerm57 - (fConst237 * ((fConst240 * fRec68[2]) + (fConst241 * fRec68[1]))));
			fRec67[0] = ((fConst237 * (((fConst239 * fRec68[1]) + (fConst242 * fRec68[0])) + (fConst242 * fRec68[2]))) - (fConst235 * ((fConst243 * fRec67[2]) + (fConst244 * fRec67[1]))));
			fRec66[0] = ((fConst235 * (((fConst236 * fRec67[1]) + (fConst245 * fRec67[0])) + (fConst245 * fRec67[2]))) - (fConst233 * ((fConst246 * fRec66[2]) + (fConst247 * fRec66[1]))));
			fTempPerm58 = (fConst233 * (((fConst234 * fRec66[1]) + (fConst248 * fRec66[0])) + (fConst248 * fRec66[2])));
			fRec65[0] = (fTempPerm58 - (fConst230 * ((fConst249 * fRec65[2]) + (fConst251 * fRec65[1]))));
			fRec64[0] = ((fConst230 * (((fConst232 * fRec65[1]) + (fConst252 * fRec65[0])) + (fConst252 * fRec65[2]))) - (fConst227 * ((fConst253 * fRec64[2]) + (fConst254 * fRec64[1]))));
			fRec63[0] = ((fConst227 * (((fConst229 * fRec64[1]) + (fConst255 * fRec64[0])) + (fConst255 * fRec64[2]))) - (fConst223 * ((fConst256 * fRec63[2]) + (fConst257 * fRec63[1]))));
			fRec62[0] = ((fSlow1 * fRec62[1]) + (fSlow2 * fabsf((fConst223 * (((fConst226 * fRec63[1]) + (fConst258 * fRec63[0])) + (fConst258 * fRec63[2]))))));
			fbargraph8 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec62[0]))));
			fRec75[0] = (fTempPerm58 - (fConst275 * ((fConst278 * fRec75[2]) + (fConst279 * fRec75[1]))));
			fRec74[0] = ((fConst275 * (((fConst277 * fRec75[1]) + (fConst280 * fRec75[0])) + (fConst280 * fRec75[2]))) - (fConst273 * ((fConst281 * fRec74[2]) + (fConst282 * fRec74[1]))));
			fRec73[0] = ((fConst273 * (((fConst274 * fRec74[1]) + (fConst283 * fRec74[0])) + (fConst283 * fRec74[2]))) - (fConst271 * ((fConst284 * fRec73[2]) + (fConst285 * fRec73[1]))));
			fTempPerm59 = (fConst271 * (((fConst272 * fRec73[1]) + (fConst286 * fRec73[0])) + (fConst286 * fRec73[2])));
			fRec72[0] = (fTempPerm59 - (fConst268 * ((fConst287 * fRec72[2]) + (fConst289 * fRec72[1]))));
			fRec71[0] = ((fConst268 * (((fConst270 * fRec72[1]) + (fConst290 * fRec72[0])) + (fConst290 * fRec72[2]))) - (fConst265 * ((fConst291 * fRec71[2]) + (fConst292 * fRec71[1]))));
			fRec70[0] = ((fConst265 * (((fConst267 * fRec71[1]) + (fConst293 * fRec71[0])) + (fConst293 * fRec71[2]))) - (fConst261 * ((fConst294 * fRec70[2]) + (fConst295 * fRec70[1]))));
			fRec69[0] = ((fSlow1 * fRec69[1]) + (fSlow2 * fabsf((fConst261 * (((fConst264 * fRec70[1]) + (fConst296 * fRec70[0])) + (fConst296 * fRec70[2]))))));
			fbargraph9 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec69[0]))));
			fRec82[0] = (fTempPerm59 - (fConst313 * ((fConst316 * fRec82[2]) + (fConst317 * fRec82[1]))));
			fRec81[0] = ((fConst313 * (((fConst315 * fRec82[1]) + (fConst318 * fRec82[0])) + (fConst318 * fRec82[2]))) - (fConst311 * ((fConst319 * fRec81[2]) + (fConst320 * fRec81[1]))));
			fRec80[0] = ((fConst311 * (((fConst312 * fRec81[1]) + (fConst321 * fRec81[0])) + (fConst321 * fRec81[2]))) - (fConst309 * ((fConst322 * fRec80[2]) + (fConst323 * fRec80[1]))));
			fTempPerm60 = (fConst309 * (((fConst310 * fRec80[1]) + (fConst324 * fRec80[0])) + (fConst324 * fRec80[2])));
			fRec79[0] = (fTempPerm60 - (fConst306 * ((fConst325 * fRec79[2]) + (fConst327 * fRec79[1]))));
			fRec78[0] = ((fConst306 * (((fConst308 * fRec79[1]) + (fConst328 * fRec79[0])) + (fConst328 * fRec79[2]))) - (fConst303 * ((fConst329 * fRec78[2]) + (fConst330 * fRec78[1]))));
			fRec77[0] = ((fConst303 * (((fConst305 * fRec78[1]) + (fConst331 * fRec78[0])) + (fConst331 * fRec78[2]))) - (fConst299 * ((fConst332 * fRec77[2]) + (fConst333 * fRec77[1]))));
			fRec76[0] = ((fSlow1 * fRec76[1]) + (fSlow2 * fabsf((fConst299 * (((fConst302 * fRec77[1]) + (fConst334 * fRec77[0])) + (fConst334 * fRec77[2]))))));
			fbargraph10 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec76[0]))));
			fRec89[0] = (fTempPerm60 - (fConst351 * ((fConst354 * fRec89[2]) + (fConst355 * fRec89[1]))));
			fRec88[0] = ((fConst351 * (((fConst353 * fRec89[1]) + (fConst356 * fRec89[0])) + (fConst356 * fRec89[2]))) - (fConst349 * ((fConst357 * fRec88[2]) + (fConst358 * fRec88[1]))));
			fRec87[0] = ((fConst349 * (((fConst350 * fRec88[1]) + (fConst359 * fRec88[0])) + (fConst359 * fRec88[2]))) - (fConst347 * ((fConst360 * fRec87[2]) + (fConst361 * fRec87[1]))));
			fTempPerm61 = (fConst347 * (((fConst348 * fRec87[1]) + (fConst362 * fRec87[0])) + (fConst362 * fRec87[2])));
			fRec86[0] = (fTempPerm61 - (fConst344 * ((fConst363 * fRec86[2]) + (fConst365 * fRec86[1]))));
			fRec85[0] = ((fConst344 * (((fConst346 * fRec86[1]) + (fConst366 * fRec86[0])) + (fConst366 * fRec86[2]))) - (fConst341 * ((fConst367 * fRec85[2]) + (fConst368 * fRec85[1]))));
			fRec84[0] = ((fConst341 * (((fConst343 * fRec85[1]) + (fConst369 * fRec85[0])) + (fConst369 * fRec85[2]))) - (fConst337 * ((fConst370 * fRec84[2]) + (fConst371 * fRec84[1]))));
			fRec83[0] = ((fSlow1 * fRec83[1]) + (fSlow2 * fabsf((fConst337 * (((fConst340 * fRec84[1]) + (fConst372 * fRec84[0])) + (fConst372 * fRec84[2]))))));
			fbargraph11 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec83[0]))));
			fRec96[0] = (fTempPerm61 - (fConst389 * ((fConst392 * fRec96[2]) + (fConst393 * fRec96[1]))));
			fRec95[0] = ((fConst389 * (((fConst391 * fRec96[1]) + (fConst394 * fRec96[0])) + (fConst394 * fRec96[2]))) - (fConst387 * ((fConst395 * fRec95[2]) + (fConst396 * fRec95[1]))));
			fRec94[0] = ((fConst387 * (((fConst388 * fRec95[1]) + (fConst397 * fRec95[0])) + (fConst397 * fRec95[2]))) - (fConst385 * ((fConst398 * fRec94[2]) + (fConst399 * fRec94[1]))));
			fTempPerm62 = (fConst385 * (((fConst386 * fRec94[1]) + (fConst400 * fRec94[0])) + (fConst400 * fRec94[2])));
			fRec93[0] = (fTempPerm62 - (fConst382 * ((fConst401 * fRec93[2]) + (fConst403 * fRec93[1]))));
			fRec92[0] = ((fConst382 * (((fConst384 * fRec93[1]) + (fConst404 * fRec93[0])) + (fConst404 * fRec93[2]))) - (fConst379 * ((fConst405 * fRec92[2]) + (fConst406 * fRec92[1]))));
			fRec91[0] = ((fConst379 * (((fConst381 * fRec92[1]) + (fConst407 * fRec92[0])) + (fConst407 * fRec92[2]))) - (fConst375 * ((fConst408 * fRec91[2]) + (fConst409 * fRec91[1]))));
			fRec90[0] = ((fSlow1 * fRec90[1]) + (fSlow2 * fabsf((fConst375 * (((fConst378 * fRec91[1]) + (fConst410 * fRec91[0])) + (fConst410 * fRec91[2]))))));
			fbargraph12 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec90[0]))));
			fRec103[0] = (fTempPerm62 - (fConst427 * ((fConst430 * fRec103[2]) + (fConst431 * fRec103[1]))));
			fRec102[0] = ((fConst427 * (((fConst429 * fRec103[1]) + (fConst432 * fRec103[0])) + (fConst432 * fRec103[2]))) - (fConst425 * ((fConst433 * fRec102[2]) + (fConst434 * fRec102[1]))));
			fRec101[0] = ((fConst425 * (((fConst426 * fRec102[1]) + (fConst435 * fRec102[0])) + (fConst435 * fRec102[2]))) - (fConst423 * ((fConst436 * fRec101[2]) + (fConst437 * fRec101[1]))));
			fTempPerm63 = (fConst423 * (((fConst424 * fRec101[1]) + (fConst438 * fRec101[0])) + (fConst438 * fRec101[2])));
			fRec100[0] = (fTempPerm63 - (fConst420 * ((fConst439 * fRec100[2]) + (fConst441 * fRec100[1]))));
			fRec99[0] = ((fConst420 * (((fConst422 * fRec100[1]) + (fConst442 * fRec100[0])) + (fConst442 * fRec100[2]))) - (fConst417 * ((fConst443 * fRec99[2]) + (fConst444 * fRec99[1]))));
			fRec98[0] = ((fConst417 * (((fConst419 * fRec99[1]) + (fConst445 * fRec99[0])) + (fConst445 * fRec99[2]))) - (fConst413 * ((fConst446 * fRec98[2]) + (fConst447 * fRec98[1]))));
			fRec97[0] = ((fSlow1 * fRec97[1]) + (fSlow2 * fabsf((fConst413 * (((fConst416 * fRec98[1]) + (fConst448 * fRec98[0])) + (fConst448 * fRec98[2]))))));
			fbargraph13 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec97[0]))));
			fRec110[0] = (fTempPerm63 - (fConst465 * ((fConst468 * fRec110[2]) + (fConst469 * fRec110[1]))));
			fRec109[0] = ((fConst465 * (((fConst467 * fRec110[1]) + (fConst470 * fRec110[0])) + (fConst470 * fRec110[2]))) - (fConst463 * ((fConst471 * fRec109[2]) + (fConst472 * fRec109[1]))));
			fRec108[0] = ((fConst463 * (((fConst464 * fRec109[1]) + (fConst473 * fRec109[0])) + (fConst473 * fRec109[2]))) - (fConst461 * ((fConst474 * fRec108[2]) + (fConst475 * fRec108[1]))));
			fTempPerm64 = (fConst461 * (((fConst462 * fRec108[1]) + (fConst476 * fRec108[0])) + (fConst476 * fRec108[2])));
			fRec107[0] = (fTempPerm64 - (fConst458 * ((fConst477 * fRec107[2]) + (fConst479 * fRec107[1]))));
			fRec106[0] = ((fConst458 * (((fConst460 * fRec107[1]) + (fConst480 * fRec107[0])) + (fConst480 * fRec107[2]))) - (fConst455 * ((fConst481 * fRec106[2]) + (fConst482 * fRec106[1]))));
			fRec105[0] = ((fConst455 * (((fConst457 * fRec106[1]) + (fConst483 * fRec106[0])) + (fConst483 * fRec106[2]))) - (fConst451 * ((fConst484 * fRec105[2]) + (fConst485 * fRec105[1]))));
			fRec104[0] = ((fSlow1 * fRec104[1]) + (fSlow2 * fabsf((fConst451 * (((fConst454 * fRec105[1]) + (fConst486 * fRec105[0])) + (fConst486 * fRec105[2]))))));
			fbargraph14 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec104[0]))));
			fRec117[0] = (fTempPerm64 - (fConst503 * ((fConst506 * fRec117[2]) + (fConst507 * fRec117[1]))));
			fRec116[0] = ((fConst503 * (((fConst505 * fRec117[1]) + (fConst508 * fRec117[0])) + (fConst508 * fRec117[2]))) - (fConst501 * ((fConst509 * fRec116[2]) + (fConst510 * fRec116[1]))));
			fRec115[0] = ((fConst501 * (((fConst502 * fRec116[1]) + (fConst511 * fRec116[0])) + (fConst511 * fRec116[2]))) - (fConst499 * ((fConst512 * fRec115[2]) + (fConst513 * fRec115[1]))));
			fTempPerm65 = (fConst499 * (((fConst500 * fRec115[1]) + (fConst514 * fRec115[0])) + (fConst514 * fRec115[2])));
			fRec114[0] = (fTempPerm65 - (fConst496 * ((fConst515 * fRec114[2]) + (fConst517 * fRec114[1]))));
			fRec113[0] = ((fConst496 * (((fConst498 * fRec114[1]) + (fConst518 * fRec114[0])) + (fConst518 * fRec114[2]))) - (fConst493 * ((fConst519 * fRec113[2]) + (fConst520 * fRec113[1]))));
			fRec112[0] = ((fConst493 * (((fConst495 * fRec113[1]) + (fConst521 * fRec113[0])) + (fConst521 * fRec113[2]))) - (fConst489 * ((fConst522 * fRec112[2]) + (fConst523 * fRec112[1]))));
			fRec111[0] = ((fSlow1 * fRec111[1]) + (fSlow2 * fabsf((fConst489 * (((fConst492 * fRec112[1]) + (fConst524 * fRec112[0])) + (fConst524 * fRec112[2]))))));
			fbargraph15 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec111[0]))));
			fRec121[0] = (fTempPerm65 - (fConst529 * ((fConst532 * fRec121[2]) + (fConst533 * fRec121[1]))));
			fRec120[0] = ((fConst529 * (((fConst531 * fRec121[1]) + (fConst534 * fRec121[0])) + (fConst534 * fRec121[2]))) - (fConst527 * ((fConst535 * fRec120[2]) + (fConst536 * fRec120[1]))));
			fRec119[0] = ((fConst527 * (((fConst528 * fRec120[1]) + (fConst537 * fRec120[0])) + (fConst537 * fRec120[2]))) - (fConst525 * ((fConst538 * fRec119[2]) + (fConst539 * fRec119[1]))));
			fRec118[0] = ((fSlow1 * fRec118[1]) + (fSlow2 * fabsf((fConst525 * (((fConst526 * fRec119[1]) + (fConst540 * fRec119[0])) + (fConst540 * fRec119[2]))))));
			fbargraph16 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec118[0]))));
			fTempPerm66 = fTempPerm52;
			output0[i] = (FAUSTFLOAT)fTempPerm66;
			output1[i] = (FAUSTFLOAT)fTempPerm66;
			// post processing
			fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec69[1] = fRec69[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec24[1] = fRec24[0];
			fRec25[1] = fRec25[0];
			fRec26[1] = fRec26[0];
			fRec21[1] = fRec21[0];
			fRec22[1] = fRec22[0];
			fRec23[1] = fRec23[0];
			fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			iRec20[1] = iRec20[0];
			iVec23[1] = iVec23[0];
			fRec19[1] = fRec19[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			iRec15[1] = iRec15[0];
			iVec22[1] = iVec22[0];
			fRec14[1] = fRec14[0];
			fRec10[1] = fRec10[0];
			fVec21[1] = fVec21[0];
			fVec20[1] = fVec20[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			fRec9[1] = fRec9[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			fVec9[1] = fVec9[0];
			fRec8[1] = fRec8[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			fVec6[1] = fVec6[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec6[1] = fRec6[0];
			fVec1[1] = fVec1[0];
			fRec7[1] = fRec7[0];
			for (int i=3; i>0; i--) fRec4[i] = fRec4[i-1];
			iRec5[1] = iRec5[0];
			for (int i=3; i>0; i--) iVec0[i] = iVec0[i-1];
		}
	}
};


