//----------------------------------------------------------
// copyright: "(c)Romain Michon, CCRMA (Stanford University), GRAME"
// license: "MIT"
// name: "MarimbaMIDI"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSamplingFreq;
		static float 	fWave0[250];
		int 	idxfWave0;
		float 	fTempPerm1;
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			idxfWave0 = 0;
			fTempPerm1 = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				fTempPerm1 = fWave0[idxfWave0];
				output[i] = fTempPerm1;
				// post processing
				idxfWave0 = (idxfWave0 + 1) % 250;
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	int 	iRec2[2];
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	float 	fRec9[2];
	float 	fTempPerm0;
	int 	IOTA;
	float 	fVec0[2048];
	float 	fConst2;
	float 	fRec6[2];
	float 	fConst3;
	static float 	ftbl0[250];
	FAUSTFLOAT 	fentry0;
	FAUSTFLOAT 	fslider2;
	float 	fConst4;
	FAUSTFLOAT 	fslider3;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	int 	iRec13[2];
	float 	fConst9;
	float 	fConst10;
	float 	fRec12[3];
	float 	fConst11;
	float 	fRec11[3];
	FAUSTFLOAT 	fbutton0;
	float 	fVec1[2];
	float 	fConst12;
	FAUSTFLOAT 	fslider4;
	float 	fVec2[2];
	float 	fRec14[2];
	float 	fConst13;
	int 	iTempPerm2;
	float 	fConst14;
	float 	fTempPerm3;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fRec10[3];
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fRec15[3];
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fRec16[3];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fRec17[3];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fRec18[3];
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fRec19[3];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fRec20[3];
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fRec21[3];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec22[3];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fRec23[3];
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fRec24[3];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fRec25[3];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fRec26[3];
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fRec27[3];
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fRec28[3];
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fRec29[3];
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fRec30[3];
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fRec31[3];
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fRec32[3];
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fRec33[3];
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fRec34[3];
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fRec35[3];
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fRec36[3];
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fRec37[3];
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fRec38[3];
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fRec39[3];
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fRec40[3];
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fRec41[3];
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fRec42[3];
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fRec43[3];
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fRec44[3];
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fRec45[3];
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fRec46[3];
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fRec47[3];
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fRec48[3];
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fRec49[3];
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fRec50[3];
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fRec51[3];
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fRec52[3];
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fRec53[3];
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fRec54[3];
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	float 	fRec55[3];
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fRec56[3];
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fRec57[3];
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fRec58[3];
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fRec59[3];
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fRec60[3];
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fRec61[3];
	float 	fConst207;
	float 	fConst208;
	float 	fConst209;
	float 	fConst210;
	float 	fRec62[3];
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fConst214;
	float 	fRec63[3];
	float 	fTempPerm4;
	float 	fVec3[2];
	float 	fRec64[2];
	float 	fTempPerm5;
	float 	fVec4[2048];
	float 	fRec7[2];
	float 	fRec0[2];
	float 	fTempPerm6;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("copyright", "(c)Romain Michon, CCRMA (Stanford University), GRAME");
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("description", "Simple MIDI-controllable marimba physical model.");
		m->declare("envelopes.lib/author", "GRAME");
		m->declare("envelopes.lib/copyright", "GRAME");
		m->declare("envelopes.lib/license", "LGPL with exception");
		m->declare("envelopes.lib/name", "Faust Envelope Library");
		m->declare("envelopes.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("license", "MIT");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "MarimbaMIDI");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(250,ftbl0);
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (0.0014705882352941176f * fConst0);
		fTempPerm0 = 0;
		fConst2 = (0.0088235294117647058f * fConst0);
		fConst3 = ((0.5f * fConst0) + -1);
		fConst4 = (3.1415926535897931f / fConst0);
		fConst5 = tanf((31.415926535897931f / fConst0));
		fConst6 = (1.0f / fConst5);
		fConst7 = (1.0f / (((fConst6 + 1.4142135623730949f) / fConst5) + 1));
		fConst8 = (1.0f / faustpower<2>(fConst5));
		fConst9 = (((fConst6 + -1.4142135623730949f) / fConst5) + 1);
		fConst10 = (2 * (1 - fConst8));
		fConst11 = (2 * (0 - fConst8));
		fConst12 = (0.0040000000000000001f * fConst0);
		fConst13 = (0.002f * fConst0);
		iTempPerm2 = 0;
		fConst14 = (500.0f / fConst0);
		fTempPerm3 = 0;
		fConst15 = powf(0.001f,(1.0f / float((4.9645391222209098e-05f * fConst0))));
		fConst16 = (0 - (2 * fConst15));
		fConst17 = (962.37036075946844f / fConst0);
		fConst18 = faustpower<2>(fConst15);
		fConst19 = powf(0.001f,(1.0f / float((3.7056673649757808e-05f * fConst0))));
		fConst20 = (0 - (2 * fConst19));
		fConst21 = (977.64478424122217f / fConst0);
		fConst22 = faustpower<2>(fConst19);
		fConst23 = powf(0.001f,(1.0f / float((2.6611426648693639e-05f * fConst0))));
		fConst24 = (0 - (2 * fConst23));
		fConst25 = (993.8931014455884f / fConst0);
		fConst26 = faustpower<2>(fConst23);
		fConst27 = powf(0.001f,(1.0f / float((5.7988817176967093e-06f * fConst0))));
		fConst28 = (0 - (2 * fConst27));
		fConst29 = (1056.2348660634243f / fConst0);
		fConst30 = faustpower<2>(fConst27);
		fConst31 = powf(0.001f,(1.0f / float((2.809199130291947e-06f * fConst0))));
		fConst32 = (0 - (2 * fConst31));
		fConst33 = (1079.8470764478052f / fConst0);
		fConst34 = faustpower<2>(fConst31);
		fConst35 = powf(0.001f,(1.0f / float((1.586723937549244e-06f * fConst0))));
		fConst36 = (0 - (2 * fConst35));
		fConst37 = (1096.1896414317794f / fConst0);
		fConst38 = faustpower<2>(fConst35);
		fConst39 = powf(0.001f,(1.0f / float((4.9403856251943075e-07f * fConst0))));
		fConst40 = (0 - (2 * fConst39));
		fConst41 = (1124.2943293107937f / fConst0);
		fConst42 = faustpower<2>(fConst39);
		fConst43 = powf(0.001f,(1.0f / float((2.1979158623736698e-07f * fConst0))));
		fConst44 = (0 - (2 * fConst43));
		fConst45 = (1140.2850359175657f / fConst0);
		fConst46 = faustpower<2>(fConst43);
		fConst47 = powf(0.001f,(1.0f / float((4.5385890455348844e-08f * fConst0))));
		fConst48 = (0 - (2 * fConst47));
		fConst49 = (1164.8899895804809f / fConst0);
		fConst50 = faustpower<2>(fConst47);
		fConst51 = powf(0.001f,(1.0f / float((1.882447659147356e-09f * fConst0))));
		fConst52 = (0 - (2 * fConst51));
		fConst53 = (1196.1237037424708f / fConst0);
		fConst54 = faustpower<2>(fConst51);
		fConst55 = powf(0.001f,(1.0f / float((2.6184431878089083e-10f * fConst0))));
		fConst56 = (0 - (2 * fConst55));
		fConst57 = (1207.5653841868448f / fConst0);
		fConst58 = faustpower<2>(fConst55);
		fConst59 = powf(0.001f,(1.0f / float((6.3867633090692316e-15f * fConst0))));
		fConst60 = (0 - (2 * fConst59));
		fConst61 = (1228.394143480145f / fConst0);
		fConst62 = faustpower<2>(fConst59);
		fConst63 = powf(0.001f,(1.0f / float((0.097474303978351162f * fConst0))));
		fConst64 = (0 - (2 * fConst63));
		fConst65 = (6.2831853071795862f / fConst0);
		fConst66 = faustpower<2>(fConst63);
		fConst67 = powf(0.001f,(1.0f / float((0.0918262465321492f * fConst0))));
		fConst68 = (0 - (2 * fConst67));
		fConst69 = (20.819711506457988f / fConst0);
		fConst70 = faustpower<2>(fConst67);
		fConst71 = powf(0.001f,(1.0f / float((0.090590915053309143f * fConst0))));
		fConst72 = (0 - (2 * fConst71));
		fConst73 = (24.094067865588489f / fConst0);
		fConst74 = faustpower<2>(fConst71);
		fConst75 = powf(0.001f,(1.0f / float((0.08105096624961694f * fConst0))));
		fConst76 = (0 - (2 * fConst75));
		fConst77 = (50.662139945878934f / fConst0);
		fConst78 = faustpower<2>(fConst75);
		fConst79 = powf(0.001f,(1.0f / float((0.07810817603988833f * fConst0))));
		fConst80 = (0 - (2 * fConst79));
		fConst81 = (59.362152481465152f / fConst0);
		fConst82 = faustpower<2>(fConst79);
		fConst83 = powf(0.001f,(1.0f / float((0.068808592940972621f * fConst0))));
		fConst84 = (0 - (2 * fConst83));
		fConst85 = (88.69909866292349f / fConst0);
		fConst86 = faustpower<2>(fConst83);
		fConst87 = powf(0.001f,(1.0f / float((0.061105240119560006f * fConst0))));
		fConst88 = (0 - (2 * fConst87));
		fConst89 = (115.51007868718952f / fConst0);
		fConst90 = faustpower<2>(fConst87);
		fConst91 = powf(0.001f,(1.0f / float((0.056718331127413028f * fConst0))));
		fConst92 = (0 - (2 * fConst91));
		fConst93 = (132.01097994090455f / fConst0);
		fConst94 = faustpower<2>(fConst91);
		fConst95 = powf(0.001f,(1.0f / float((0.048822377453816158f * fConst0))));
		fConst96 = (0 - (2 * fConst95));
		fConst97 = (164.47808337869361f / fConst0);
		fConst98 = faustpower<2>(fConst95);
		fConst99 = powf(0.001f,(1.0f / float((0.044904331633815464f * fConst0))));
		fConst100 = (0 - (2 * fConst99));
		fConst101 = (182.1771880704878f / fConst0);
		fConst102 = faustpower<2>(fConst99);
		fConst103 = powf(0.001f,(1.0f / float((0.035042451147732516f * fConst0))));
		fConst104 = (0 - (2 * fConst103));
		fConst105 = (232.93527225600738f / fConst0);
		fConst106 = faustpower<2>(fConst103);
		fConst107 = powf(0.001f,(1.0f / float((0.034171768048966468f * fConst0))));
		fConst108 = (0 - (2 * fConst107));
		fConst109 = (237.94611253848308f / fConst0);
		fConst110 = faustpower<2>(fConst107);
		fConst111 = powf(0.001f,(1.0f / float((0.031866313554980333f * fConst0))));
		fConst112 = (0 - (2 * fConst111));
		fConst113 = (251.72576623565865f / fConst0);
		fConst114 = faustpower<2>(fConst111);
		fConst115 = powf(0.001f,(1.0f / float((0.024836279169006825f * fConst0))));
		fConst116 = (0 - (2 * fConst115));
		fConst117 = (299.35545245673347f / fConst0);
		fConst118 = faustpower<2>(fConst115);
		fConst119 = powf(0.001f,(1.0f / float((0.0221360236125791f * fConst0))));
		fConst120 = (0 - (2 * fConst119));
		fConst121 = (320.56183118699528f / fConst0);
		fConst122 = faustpower<2>(fConst119);
		fConst123 = powf(0.001f,(1.0f / float((0.021079292512596045f * fConst0))));
		fConst124 = (0 - (2 * fConst123));
		fConst125 = (329.42740565542573f / fConst0);
		fConst126 = faustpower<2>(fConst123);
		fConst127 = powf(0.001f,(1.0f / float((0.017115872465307391f * fConst0))));
		fConst128 = (0 - (2 * fConst127));
		fConst129 = (366.22173881426937f / fConst0);
		fConst130 = faustpower<2>(fConst127);
		fConst131 = powf(0.001f,(1.0f / float((0.014085203994647423f * fConst0))));
		fConst132 = (0 - (2 * fConst131));
		fConst133 = (399.28762981183263f / fConst0);
		fConst134 = faustpower<2>(fConst131);
		fConst135 = powf(0.001f,(1.0f / float((0.013146327398988947f * fConst0))));
		fConst136 = (0 - (2 * fConst135));
		fConst137 = (410.68658459611783f / fConst0);
		fConst138 = faustpower<2>(fConst135);
		fConst139 = powf(0.001f,(1.0f / float((0.012362449224479479f * fConst0))));
		fConst140 = (0 - (2 * fConst139));
		fConst141 = (420.71392002784575f / fConst0);
		fConst142 = faustpower<2>(fConst139);
		fConst143 = powf(0.001f,(1.0f / float((0.0091360196542605247f * fConst0))));
		fConst144 = (0 - (2 * fConst143));
		fConst145 = (468.28642926262529f / fConst0);
		fConst146 = faustpower<2>(fConst143);
		fConst147 = powf(0.001f,(1.0f / float((0.0076740258299543042f * fConst0))));
		fConst148 = (0 - (2 * fConst147));
		fConst149 = (494.43641819257596f / fConst0);
		fConst150 = faustpower<2>(fConst147);
		fConst151 = powf(0.001f,(1.0f / float((0.0069972114834927976f * fConst0))));
		fConst152 = (0 - (2 * fConst151));
		fConst153 = (507.91699226912982f / fConst0);
		fConst154 = faustpower<2>(fConst151);
		fConst155 = powf(0.001f,(1.0f / float((0.0046267534711074212f * fConst0))));
		fConst156 = (0 - (2 * fConst155));
		fConst157 = (565.34844756940481f / fConst0);
		fConst158 = faustpower<2>(fConst155);
		fConst159 = powf(0.001f,(1.0f / float((0.0040102398719896425f * fConst0))));
		fConst160 = (0 - (2 * fConst159));
		fConst161 = (584.12323358578817f / fConst0);
		fConst162 = faustpower<2>(fConst159);
		fConst163 = powf(0.001f,(1.0f / float((0.0035953123694467612f * fConst0))));
		fConst164 = (0 - (2 * fConst163));
		fConst165 = (598.10520584985488f / fConst0);
		fConst166 = faustpower<2>(fConst163);
		fConst167 = powf(0.001f,(1.0f / float((0.003205034910942792f * fConst0))));
		fConst168 = (0 - (2 * fConst167));
		fConst169 = (612.48930197358106f / fConst0);
		fConst170 = faustpower<2>(fConst167);
		fConst171 = powf(0.001f,(1.0f / float((0.0015662252345659728f * fConst0))));
		fConst172 = (0 - (2 * fConst171));
		fConst173 = (695.0459586802059f / fConst0);
		fConst174 = faustpower<2>(fConst171);
		fConst175 = powf(0.001f,(1.0f / float((0.0014376914278006732f * fConst0))));
		fConst176 = (0 - (2 * fConst175));
		fConst177 = (704.15029419030907f / fConst0);
		fConst178 = faustpower<2>(fConst175);
		fConst179 = powf(0.001f,(1.0f / float((0.0012933049128383948f * fConst0))));
		fConst180 = (0 - (2 * fConst179));
		fConst181 = (715.1898507750235f / fConst0);
		fConst182 = faustpower<2>(fConst179);
		fConst183 = powf(0.001f,(1.0f / float((0.00091271198331390477f * fConst0))));
		fConst184 = (0 - (2 * fConst183));
		fConst185 = (749.93586552372665f / fConst0);
		fConst186 = faustpower<2>(fConst183);
		fConst187 = powf(0.001f,(1.0f / float((0.00053781077913303446f * fConst0))));
		fConst188 = (0 - (2 * fConst187));
		fConst189 = (798.2472773506305f / fConst0);
		fConst190 = faustpower<2>(fConst187);
		fConst191 = powf(0.001f,(1.0f / float((0.00043256305034293144f * fConst0))));
		fConst192 = (0 - (2 * fConst191));
		fConst193 = (816.70099259781693f / fConst0);
		fConst194 = faustpower<2>(fConst191);
		fConst195 = powf(0.001f,(1.0f / float((0.00036289338688757724f * fConst0))));
		fConst196 = (0 - (2 * fConst195));
		fConst197 = (831.0078055422648f / fConst0);
		fConst198 = faustpower<2>(fConst195);
		fConst199 = powf(0.001f,(1.0f / float((0.00032949880712616832f * fConst0))));
		fConst200 = (0 - (2 * fConst199));
		fConst201 = (838.6607252464097f / fConst0);
		fConst202 = faustpower<2>(fConst199);
		fConst203 = powf(0.001f,(1.0f / float((0.00012424740079868988f * fConst0))));
		fConst204 = (0 - (2 * fConst203));
		fConst205 = (908.22815296750207f / fConst0);
		fConst206 = faustpower<2>(fConst203);
		fConst207 = powf(0.001f,(1.0f / float((7.5383577458230166e-05f * fConst0))));
		fConst208 = (0 - (2 * fConst207));
		fConst209 = (938.94664593430298f / fConst0);
		fConst210 = faustpower<2>(fConst207);
		fConst211 = powf(0.001f,(1.0f / float((5.6575550806042981e-05f * fConst0))));
		fConst212 = (0 - (2 * fConst211));
		fConst213 = (955.251511806434f / fConst0);
		fConst214 = faustpower<2>(fConst211);
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.80000000000000004f;
		fslider1 = 440.0f;
		fentry0 = 0.0f;
		fslider2 = 1.0f;
		fslider3 = 6500.0f;
		fbutton0 = 0.0;
		fslider4 = 0.5f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iRec2[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		IOTA = 0;
		for (int i=0; i<2048; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) iRec13[i] = 0;
		for (int i=0; i<3; i++) fRec12[i] = 0;
		for (int i=0; i<3; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec10[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2048; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("marimba");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("midi");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->addHorizontalSlider("freq", &fslider1, 440.0f, 50.0f, 1000.0f, 0.01f);
		ui_interface->declare(&fslider2, "2", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->addHorizontalSlider("gain", &fslider2, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("otherParams");
		ui_interface->declare(&fentry0, "0", "");
		ui_interface->declare(&fentry0, "midi", "ctrl 1");
		ui_interface->addNumEntry("strikePosition", &fentry0, 0.0f, 0.0f, 4.0f, 1.0f);
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "midi", "ctrl 1");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->addHorizontalSlider("strikeCutOff", &fslider3, 6500.0f, 20.0f, 20000.0f, 1.0f);
		ui_interface->declare(&fslider0, "2", "");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->addHorizontalSlider("outGain", &fslider0, 0.80000000000000004f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider4, "2", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->addHorizontalSlider("strikeSharpness", &fslider4, 0.5f, 0.01f, 5.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fbutton0, "3", "");
		ui_interface->addButton("gate", &fbutton0);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = float(fslider1);
		float 	fSlow2 = (fConst1 * ((float(340) / fSlow1) + -0.040000000000000001f));
		float 	fSlow3 = (fSlow2 + -1.499995f);
		float 	fSlow4 = floorf(fSlow3);
		float 	fSlow5 = (fSlow2 + (-1 - fSlow4));
		float 	fSlow6 = (fSlow2 + (-2 - fSlow4));
		float 	fSlow7 = (fSlow2 + (-3 - fSlow4));
		float 	fSlow8 = (fSlow2 + (-4 - fSlow4));
		float 	fSlow9 = ((((0 - fSlow5) * (0 - (0.5f * fSlow6))) * (0 - (0.33333333333333331f * fSlow7))) * (0 - (0.25f * fSlow8)));
		int 	iSlow10 = int(fSlow3);
		int 	iSlow11 = int(min(fConst2, (float)max(0, iSlow10)));
		float 	fSlow12 = (fSlow2 - fSlow4);
		float 	fSlow13 = (((0 - fSlow6) * (0 - (0.5f * fSlow7))) * (0 - (0.33333333333333331f * fSlow8)));
		int 	iSlow14 = int(min(fConst2, (float)max(0, (iSlow10 + 1))));
		float 	fSlow15 = (0.5f * ((fSlow5 * (0 - fSlow7)) * (0 - (0.5f * fSlow8))));
		int 	iSlow16 = int(min(fConst2, (float)max(0, (iSlow10 + 2))));
		float 	fSlow17 = (fSlow5 * fSlow6);
		float 	fSlow18 = (0.16666666666666666f * (fSlow17 * (0 - fSlow8)));
		int 	iSlow19 = int(min(fConst2, (float)max(0, (iSlow10 + 3))));
		float 	fSlow20 = (0.041666666666666664f * (fSlow17 * fSlow7));
		int 	iSlow21 = int(min(fConst2, (float)max(0, (iSlow10 + 4))));
		int 	iSlow22 = (50 * int(float(fentry0)));
		float 	fSlow23 = ((int(((153.166f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 38))]:0);
		float 	fSlow24 = tanf((fConst4 * float(fslider3)));
		float 	fSlow25 = (1.0f / fSlow24);
		float 	fSlow26 = (((fSlow25 + 1.4142135623730949f) / fSlow24) + 1);
		float 	fSlow27 = (float(fslider2) / fSlow26);
		float 	fSlow28 = (1.0f / fSlow26);
		float 	fSlow29 = (2 * (1 - (1.0f / faustpower<2>(fSlow24))));
		float 	fSlow30 = (((fSlow25 + -1.4142135623730949f) / fSlow24) + 1);
		float 	fSlow31 = float(fbutton0);
		float 	fSlow32 = float(fslider4);
		float 	fSlow33 = (fConst12 * fSlow32);
		float 	fSlow34 = (fConst13 * fSlow32);
		float 	fSlow35 = (fConst14 / fSlow32);
		float 	fSlow36 = (fConst16 * cosf((fConst17 * fSlow1)));
		float 	fSlow37 = ((int(((155.59700000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 39))]:0);
		float 	fSlow38 = (fConst20 * cosf((fConst21 * fSlow1)));
		float 	fSlow39 = ((int(((158.18299999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 40))]:0);
		float 	fSlow40 = (fConst24 * cosf((fConst25 * fSlow1)));
		float 	fSlow41 = ((int(((168.10499999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 41))]:0);
		float 	fSlow42 = (fConst28 * cosf((fConst29 * fSlow1)));
		float 	fSlow43 = ((int(((171.863f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 42))]:0);
		float 	fSlow44 = (fConst32 * cosf((fConst33 * fSlow1)));
		float 	fSlow45 = ((int(((174.464f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 43))]:0);
		float 	fSlow46 = (fConst36 * cosf((fConst37 * fSlow1)));
		float 	fSlow47 = ((int(((178.93700000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 44))]:0);
		float 	fSlow48 = (fConst40 * cosf((fConst41 * fSlow1)));
		float 	fSlow49 = ((int(((181.482f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 45))]:0);
		float 	fSlow50 = (fConst44 * cosf((fConst45 * fSlow1)));
		float 	fSlow51 = ((int(((185.398f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 46))]:0);
		float 	fSlow52 = (fConst48 * cosf((fConst49 * fSlow1)));
		float 	fSlow53 = ((int(((190.369f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 47))]:0);
		float 	fSlow54 = (fConst52 * cosf((fConst53 * fSlow1)));
		float 	fSlow55 = ((int(((192.19f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 48))]:0);
		float 	fSlow56 = (fConst56 * cosf((fConst57 * fSlow1)));
		float 	fSlow57 = ((int(((195.505f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 49))]:0);
		float 	fSlow58 = (fConst60 * cosf((fConst61 * fSlow1)));
		float 	fSlow59 = ((int((fSlow1 < fConst3)))?ftbl0[int(iSlow22)]:0);
		float 	fSlow60 = (fConst64 * cosf((fConst65 * fSlow1)));
		float 	fSlow61 = ((int(((3.3135599999999998f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 1))]:0);
		float 	fSlow62 = (fConst68 * cosf((fConst69 * fSlow1)));
		float 	fSlow63 = ((int(((3.8346900000000002f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 2))]:0);
		float 	fSlow64 = (fConst72 * cosf((fConst73 * fSlow1)));
		float 	fSlow65 = ((int(((8.0631299999999992f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 3))]:0);
		float 	fSlow66 = (fConst76 * cosf((fConst77 * fSlow1)));
		float 	fSlow67 = ((int(((9.4477799999999998f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 4))]:0);
		float 	fSlow68 = (fConst80 * cosf((fConst81 * fSlow1)));
		float 	fSlow69 = ((int(((14.116899999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 5))]:0);
		float 	fSlow70 = (fConst84 * cosf((fConst85 * fSlow1)));
		float 	fSlow71 = ((int(((18.384f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 6))]:0);
		float 	fSlow72 = (fConst88 * cosf((fConst89 * fSlow1)));
		float 	fSlow73 = ((int(((21.010200000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 7))]:0);
		float 	fSlow74 = (fConst92 * cosf((fConst93 * fSlow1)));
		float 	fSlow75 = ((int(((26.177499999999998f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 8))]:0);
		float 	fSlow76 = (fConst96 * cosf((fConst97 * fSlow1)));
		float 	fSlow77 = ((int(((28.994399999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 9))]:0);
		float 	fSlow78 = (fConst100 * cosf((fConst101 * fSlow1)));
		float 	fSlow79 = ((int(((37.072800000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 10))]:0);
		float 	fSlow80 = (fConst104 * cosf((fConst105 * fSlow1)));
		float 	fSlow81 = ((int(((37.8703f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 11))]:0);
		float 	fSlow82 = (fConst108 * cosf((fConst109 * fSlow1)));
		float 	fSlow83 = ((int(((40.063400000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 12))]:0);
		float 	fSlow84 = (fConst112 * cosf((fConst113 * fSlow1)));
		float 	fSlow85 = ((int(((47.643900000000002f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 13))]:0);
		float 	fSlow86 = (fConst116 * cosf((fConst117 * fSlow1)));
		float 	fSlow87 = ((int(((51.018999999999998f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 14))]:0);
		float 	fSlow88 = (fConst120 * cosf((fConst121 * fSlow1)));
		float 	fSlow89 = ((int(((52.43f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 15))]:0);
		float 	fSlow90 = (fConst124 * cosf((fConst125 * fSlow1)));
		float 	fSlow91 = ((int(((58.286000000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 16))]:0);
		float 	fSlow92 = (fConst128 * cosf((fConst129 * fSlow1)));
		float 	fSlow93 = ((int(((63.5486f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 17))]:0);
		float 	fSlow94 = (fConst132 * cosf((fConst133 * fSlow1)));
		float 	fSlow95 = ((int(((65.362799999999993f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 18))]:0);
		float 	fSlow96 = (fConst136 * cosf((fConst137 * fSlow1)));
		float 	fSlow97 = ((int(((66.958699999999993f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 19))]:0);
		float 	fSlow98 = (fConst140 * cosf((fConst141 * fSlow1)));
		float 	fSlow99 = ((int(((74.530100000000004f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 20))]:0);
		float 	fSlow100 = (fConst144 * cosf((fConst145 * fSlow1)));
		float 	fSlow101 = ((int(((78.691999999999993f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 21))]:0);
		float 	fSlow102 = (fConst148 * cosf((fConst149 * fSlow1)));
		float 	fSlow103 = ((int(((80.837500000000006f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 22))]:0);
		float 	fSlow104 = (fConst152 * cosf((fConst153 * fSlow1)));
		float 	fSlow105 = ((int(((89.977999999999994f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 23))]:0);
		float 	fSlow106 = (fConst156 * cosf((fConst157 * fSlow1)));
		float 	fSlow107 = ((int(((92.966099999999997f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 24))]:0);
		float 	fSlow108 = (fConst160 * cosf((fConst161 * fSlow1)));
		float 	fSlow109 = ((int(((95.191400000000002f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 25))]:0);
		float 	fSlow110 = (fConst164 * cosf((fConst165 * fSlow1)));
		float 	fSlow111 = ((int(((97.480699999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 26))]:0);
		float 	fSlow112 = (fConst168 * cosf((fConst169 * fSlow1)));
		float 	fSlow113 = ((int(((110.62f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 27))]:0);
		float 	fSlow114 = (fConst172 * cosf((fConst173 * fSlow1)));
		float 	fSlow115 = ((int(((112.069f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 28))]:0);
		float 	fSlow116 = (fConst176 * cosf((fConst177 * fSlow1)));
		float 	fSlow117 = ((int(((113.82599999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 29))]:0);
		float 	fSlow118 = (fConst180 * cosf((fConst181 * fSlow1)));
		float 	fSlow119 = ((int(((119.35599999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 30))]:0);
		float 	fSlow120 = (fConst184 * cosf((fConst185 * fSlow1)));
		float 	fSlow121 = ((int(((127.045f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 31))]:0);
		float 	fSlow122 = (fConst188 * cosf((fConst189 * fSlow1)));
		float 	fSlow123 = ((int(((129.982f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 32))]:0);
		float 	fSlow124 = (fConst192 * cosf((fConst193 * fSlow1)));
		float 	fSlow125 = ((int(((132.25899999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 33))]:0);
		float 	fSlow126 = (fConst196 * cosf((fConst197 * fSlow1)));
		float 	fSlow127 = ((int(((133.477f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 34))]:0);
		float 	fSlow128 = (fConst200 * cosf((fConst201 * fSlow1)));
		float 	fSlow129 = ((int(((144.54900000000001f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 35))]:0);
		float 	fSlow130 = (fConst204 * cosf((fConst205 * fSlow1)));
		float 	fSlow131 = ((int(((149.43799999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 36))]:0);
		float 	fSlow132 = (fConst208 * cosf((fConst209 * fSlow1)));
		float 	fSlow133 = ((int(((152.03299999999999f * fSlow1) < fConst3)))?ftbl0[int((iSlow22 + 37))]:0);
		float 	fSlow134 = (fConst212 * cosf((fConst213 * fSlow1)));
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iRec2[0] = 0;
			fRec9[0] = ((0.94999999999999996f * fRec9[1]) + (0.050000000000000044f * fRec7[1]));
			fTempPerm0 = ((0.98999999999999999f * fRec9[0]) + iRec2[1]);
			fVec0[IOTA&2047] = fTempPerm0;
			fRec6[0] = ((fSlow9 * fVec0[(IOTA-iSlow11)&2047]) + (fSlow12 * ((((fSlow13 * fVec0[(IOTA-iSlow14)&2047]) + (fSlow15 * fVec0[(IOTA-iSlow16)&2047])) + (fSlow18 * fVec0[(IOTA-iSlow19)&2047])) + (fSlow20 * fVec0[(IOTA-iSlow21)&2047]))));
			iRec13[0] = ((1103515245 * iRec13[1]) + 12345);
			fRec12[0] = ((4.6566128752457969e-10f * iRec13[0]) - (fConst7 * ((fConst9 * fRec12[2]) + (fConst10 * fRec12[1]))));
			fRec11[0] = ((fConst7 * (((fConst8 * fRec12[0]) + (fConst11 * fRec12[1])) + (fConst8 * fRec12[2]))) - (fSlow28 * ((fSlow29 * fRec11[1]) + (fSlow30 * fRec11[2]))));
			fVec1[0] = fSlow31;
			fVec2[0] = fSlow32;
			fRec14[0] = ((int((((fSlow31 - fVec1[1]) > 0) > 0)))?0:min(fSlow33, ((fRec14[1] + (fConst12 * (fSlow32 - fVec2[1]))) + 1)));
			iTempPerm2 = int((fRec14[0] < fSlow34));
			fTempPerm3 = (fSlow27 * ((fRec11[2] + (fRec11[0] + (2.0f * fRec11[1]))) * ((iTempPerm2)?((int((fRec14[0] < 0)))?0:((iTempPerm2)?(fSlow35 * fRec14[0]):1)):((int((fRec14[0] < fSlow33)))?((fSlow35 * (0 - (fRec14[0] - fSlow34))) + 1):0))));
			fRec10[0] = (fTempPerm3 - ((fSlow36 * fRec10[1]) + (fConst18 * fRec10[2])));
			fRec15[0] = (fTempPerm3 - ((fSlow38 * fRec15[1]) + (fConst22 * fRec15[2])));
			fRec16[0] = (fTempPerm3 - ((fSlow40 * fRec16[1]) + (fConst26 * fRec16[2])));
			fRec17[0] = (fTempPerm3 - ((fSlow42 * fRec17[1]) + (fConst30 * fRec17[2])));
			fRec18[0] = (fTempPerm3 - ((fSlow44 * fRec18[1]) + (fConst34 * fRec18[2])));
			fRec19[0] = (fTempPerm3 - ((fSlow46 * fRec19[1]) + (fConst38 * fRec19[2])));
			fRec20[0] = (fTempPerm3 - ((fSlow48 * fRec20[1]) + (fConst42 * fRec20[2])));
			fRec21[0] = (fTempPerm3 - ((fSlow50 * fRec21[1]) + (fConst46 * fRec21[2])));
			fRec22[0] = (fTempPerm3 - ((fSlow52 * fRec22[1]) + (fConst50 * fRec22[2])));
			fRec23[0] = (fTempPerm3 - ((fSlow54 * fRec23[1]) + (fConst54 * fRec23[2])));
			fRec24[0] = (fTempPerm3 - ((fSlow56 * fRec24[1]) + (fConst58 * fRec24[2])));
			fRec25[0] = (fTempPerm3 - ((fSlow58 * fRec25[1]) + (fConst62 * fRec25[2])));
			fRec26[0] = (fTempPerm3 - ((fSlow60 * fRec26[1]) + (fConst66 * fRec26[2])));
			fRec27[0] = (fTempPerm3 - ((fSlow62 * fRec27[1]) + (fConst70 * fRec27[2])));
			fRec28[0] = (fTempPerm3 - ((fSlow64 * fRec28[1]) + (fConst74 * fRec28[2])));
			fRec29[0] = (fTempPerm3 - ((fSlow66 * fRec29[1]) + (fConst78 * fRec29[2])));
			fRec30[0] = (fTempPerm3 - ((fSlow68 * fRec30[1]) + (fConst82 * fRec30[2])));
			fRec31[0] = (fTempPerm3 - ((fSlow70 * fRec31[1]) + (fConst86 * fRec31[2])));
			fRec32[0] = (fTempPerm3 - ((fSlow72 * fRec32[1]) + (fConst90 * fRec32[2])));
			fRec33[0] = (fTempPerm3 - ((fSlow74 * fRec33[1]) + (fConst94 * fRec33[2])));
			fRec34[0] = (fTempPerm3 - ((fSlow76 * fRec34[1]) + (fConst98 * fRec34[2])));
			fRec35[0] = (fTempPerm3 - ((fSlow78 * fRec35[1]) + (fConst102 * fRec35[2])));
			fRec36[0] = (fTempPerm3 - ((fSlow80 * fRec36[1]) + (fConst106 * fRec36[2])));
			fRec37[0] = (fTempPerm3 - ((fSlow82 * fRec37[1]) + (fConst110 * fRec37[2])));
			fRec38[0] = (fTempPerm3 - ((fSlow84 * fRec38[1]) + (fConst114 * fRec38[2])));
			fRec39[0] = (fTempPerm3 - ((fSlow86 * fRec39[1]) + (fConst118 * fRec39[2])));
			fRec40[0] = (fTempPerm3 - ((fSlow88 * fRec40[1]) + (fConst122 * fRec40[2])));
			fRec41[0] = (fTempPerm3 - ((fSlow90 * fRec41[1]) + (fConst126 * fRec41[2])));
			fRec42[0] = (fTempPerm3 - ((fSlow92 * fRec42[1]) + (fConst130 * fRec42[2])));
			fRec43[0] = (fTempPerm3 - ((fSlow94 * fRec43[1]) + (fConst134 * fRec43[2])));
			fRec44[0] = (fTempPerm3 - ((fSlow96 * fRec44[1]) + (fConst138 * fRec44[2])));
			fRec45[0] = (fTempPerm3 - ((fSlow98 * fRec45[1]) + (fConst142 * fRec45[2])));
			fRec46[0] = (fTempPerm3 - ((fSlow100 * fRec46[1]) + (fConst146 * fRec46[2])));
			fRec47[0] = (fTempPerm3 - ((fSlow102 * fRec47[1]) + (fConst150 * fRec47[2])));
			fRec48[0] = (fTempPerm3 - ((fSlow104 * fRec48[1]) + (fConst154 * fRec48[2])));
			fRec49[0] = (fTempPerm3 - ((fSlow106 * fRec49[1]) + (fConst158 * fRec49[2])));
			fRec50[0] = (fTempPerm3 - ((fSlow108 * fRec50[1]) + (fConst162 * fRec50[2])));
			fRec51[0] = (fTempPerm3 - ((fSlow110 * fRec51[1]) + (fConst166 * fRec51[2])));
			fRec52[0] = (fTempPerm3 - ((fSlow112 * fRec52[1]) + (fConst170 * fRec52[2])));
			fRec53[0] = (fTempPerm3 - ((fSlow114 * fRec53[1]) + (fConst174 * fRec53[2])));
			fRec54[0] = (fTempPerm3 - ((fSlow116 * fRec54[1]) + (fConst178 * fRec54[2])));
			fRec55[0] = (fTempPerm3 - ((fSlow118 * fRec55[1]) + (fConst182 * fRec55[2])));
			fRec56[0] = (fTempPerm3 - ((fSlow120 * fRec56[1]) + (fConst186 * fRec56[2])));
			fRec57[0] = (fTempPerm3 - ((fSlow122 * fRec57[1]) + (fConst190 * fRec57[2])));
			fRec58[0] = (fTempPerm3 - ((fSlow124 * fRec58[1]) + (fConst194 * fRec58[2])));
			fRec59[0] = (fTempPerm3 - ((fSlow126 * fRec59[1]) + (fConst198 * fRec59[2])));
			fRec60[0] = (fTempPerm3 - ((fSlow128 * fRec60[1]) + (fConst202 * fRec60[2])));
			fRec61[0] = (fTempPerm3 - ((fSlow130 * fRec61[1]) + (fConst206 * fRec61[2])));
			fRec62[0] = (fTempPerm3 - ((fSlow132 * fRec62[1]) + (fConst210 * fRec62[2])));
			fRec63[0] = (fTempPerm3 - ((fSlow134 * fRec63[1]) + (fConst214 * fRec63[2])));
			fTempPerm4 = ((((((((((((((((((((((((((((((((((((((((((((((((((fSlow23 * (fRec10[0] - fRec10[2])) + (fSlow37 * (fRec15[0] - fRec15[2]))) + (fSlow39 * (fRec16[0] - fRec16[2]))) + (fSlow41 * (fRec17[0] - fRec17[2]))) + (fSlow43 * (fRec18[0] - fRec18[2]))) + (fSlow45 * (fRec19[0] - fRec19[2]))) + (fSlow47 * (fRec20[0] - fRec20[2]))) + (fSlow49 * (fRec21[0] - fRec21[2]))) + (fSlow51 * (fRec22[0] - fRec22[2]))) + (fSlow53 * (fRec23[0] - fRec23[2]))) + (fSlow55 * (fRec24[0] - fRec24[2]))) + (fSlow57 * (fRec25[0] - fRec25[2]))) + (fSlow59 * (fRec26[0] - fRec26[2]))) + (fSlow61 * (fRec27[0] - fRec27[2]))) + (fSlow63 * (fRec28[0] - fRec28[2]))) + (fSlow65 * (fRec29[0] - fRec29[2]))) + (fSlow67 * (fRec30[0] - fRec30[2]))) + (fSlow69 * (fRec31[0] - fRec31[2]))) + (fSlow71 * (fRec32[0] - fRec32[2]))) + (fSlow73 * (fRec33[0] - fRec33[2]))) + (fSlow75 * (fRec34[0] - fRec34[2]))) + (fSlow77 * (fRec35[0] - fRec35[2]))) + (fSlow79 * (fRec36[0] - fRec36[2]))) + (fSlow81 * (fRec37[0] - fRec37[2]))) + (fSlow83 * (fRec38[0] - fRec38[2]))) + (fSlow85 * (fRec39[0] - fRec39[2]))) + (fSlow87 * (fRec40[0] - fRec40[2]))) + (fSlow89 * (fRec41[0] - fRec41[2]))) + (fSlow91 * (fRec42[0] - fRec42[2]))) + (fSlow93 * (fRec43[0] - fRec43[2]))) + (fSlow95 * (fRec44[0] - fRec44[2]))) + (fSlow97 * (fRec45[0] - fRec45[2]))) + (fSlow99 * (fRec46[0] - fRec46[2]))) + (fSlow101 * (fRec47[0] - fRec47[2]))) + (fSlow103 * (fRec48[0] - fRec48[2]))) + (fSlow105 * (fRec49[0] - fRec49[2]))) + (fSlow107 * (fRec50[0] - fRec50[2]))) + (fSlow109 * (fRec51[0] - fRec51[2]))) + (fSlow111 * (fRec52[0] - fRec52[2]))) + (fSlow113 * (fRec53[0] - fRec53[2]))) + (fSlow115 * (fRec54[0] - fRec54[2]))) + (fSlow117 * (fRec55[0] - fRec55[2]))) + (fSlow119 * (fRec56[0] - fRec56[2]))) + (fSlow121 * (fRec57[0] - fRec57[2]))) + (fSlow123 * (fRec58[0] - fRec58[2]))) + (fSlow125 * (fRec59[0] - fRec59[2]))) + (fSlow127 * (fRec60[0] - fRec60[2]))) + (fSlow129 * (fRec61[0] - fRec61[2]))) + (fSlow131 * (fRec62[0] - fRec62[2]))) + (fSlow133 * (fRec63[0] - fRec63[2])));
			fVec3[0] = fTempPerm4;
			fRec64[0] = ((0.94999999999999996f * fRec64[1]) + (0.050000000000000044f * fRec6[1]));
			fTempPerm5 = ((0.02f * fVec3[1]) + (0.98999999999999999f * fRec64[0]));
			fVec4[IOTA&2047] = fTempPerm5;
			fRec7[0] = ((fSlow9 * fVec4[(IOTA-iSlow11)&2047]) + (fSlow12 * ((fSlow20 * fVec4[(IOTA-iSlow21)&2047]) + (((fSlow13 * fVec4[(IOTA-iSlow14)&2047]) + (fSlow15 * fVec4[(IOTA-iSlow16)&2047])) + (fSlow18 * fVec4[(IOTA-iSlow19)&2047])))));
			int 	iRec8 = 0;
			float 	fRec3 = fRec6[0];
			float 	fRec4 = fRec7[0];
			float 	fRec5 = (fRec7[0] + iRec8);
			fRec0[0] = fRec3;
			float 	fRec1 = fRec5;
			fTempPerm6 = (fSlow0 * fRec1);
			output0[i] = (FAUSTFLOAT)fTempPerm6;
			output1[i] = (FAUSTFLOAT)fTempPerm6;
			// post processing
			fRec0[1] = fRec0[0];
			fRec7[1] = fRec7[0];
			fRec64[1] = fRec64[0];
			fVec3[1] = fVec3[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec14[1] = fRec14[0];
			fVec2[1] = fVec2[0];
			fVec1[1] = fVec1[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			iRec13[1] = iRec13[0];
			fRec6[1] = fRec6[0];
			IOTA = IOTA+1;
			fRec9[1] = fRec9[0];
			iRec2[1] = iRec2[0];
		}
	}
};


float 	mydsp::SIG0::fWave0[250] = {1,0.776725f,0.62572300000000003f,0.85522299999999996f,0.76015900000000003f,0.69837300000000002f,0.768011f,0.641127f,0.244034f,0.70775399999999999f,0.63401300000000005f,0.247527f,0.66084900000000002f,0.45039600000000002f,0.56778300000000004f,0.106361f,0.71681399999999995f,0.66391999999999995f,0.29120800000000002f,0.31059900000000001f,0.80149499999999996f,0.63529199999999997f,0.30743500000000001f,0.87412400000000001f,0.497668f,0.48708800000000002f,0.459115f,0.73345499999999997f,0.54181800000000002f,0.44131799999999999f,0.31391999999999998f,0.40309f,0.68535299999999999f,0.60314000000000001f,0.40055200000000002f,0.453511f,0.63438600000000001f,0.291547f,0.131605f,0.36850699999999997f,0.83990699999999996f,0.60216000000000003f,0.288296f,0.57967000000000002f,0.024249300000000001f,0.26274599999999998f,0.36858800000000003f,0.89028399999999996f,0.40896300000000002f,0.55607200000000001f,0.88442699999999996f,0.83211000000000002f,0.61201499999999998f,0.75717599999999996f,0.91947699999999999f,1,0.827963f,0.89241000000000004f,0.035740800000000003f,0.48078900000000002f,0.75287199999999999f,0.054630100000000001f,0.23593700000000001f,0.36293799999999998f,0.44447199999999998f,0.10175099999999999f,0.70341799999999999f,0.45313599999999998f,0.31662899999999999f,0.490394f,0.98250800000000005f,0.55162199999999995f,0.60200900000000002f,0.66695700000000002f,0.77683000000000002f,0.90566199999999997f,0.098719699999999994f,0.40296799999999999f,0.82945199999999997f,0.307645f,0.64048000000000005f,0.98397100000000004f,0.58420499999999997f,0.65036499999999997f,0.33444699999999999f,0.58357000000000003f,0.54019099999999998f,0.67253399999999997f,0.24571200000000001f,0.68729799999999996f,0.88305800000000001f,0.79295000000000004f,0.60061900000000001f,0.57268200000000002f,0.122612f,0.38824799999999998f,0.29065800000000003f,0.38025500000000001f,0.29096699999999998f,0.56781899999999996f,0.073772099999999993f,0.42098999999999998f,0.0786578f,0.39399499999999998f,0.26898300000000003f,0.26061400000000001f,0.49408600000000003f,0.23802599999999999f,0.098782400000000006f,0.27787899999999999f,0.44056299999999998f,0.077021199999999998f,0.45059100000000002f,0.128137f,0.036827499999999999f,0.12869900000000001f,0.32960499999999998f,0.37451200000000001f,0.36359000000000002f,0.272594f,0.379052f,0.30524099999999998f,0.074112899999999995f,0.34572799999999998f,0.29935f,0.22128400000000001f,0.026139099999999998f,0.29320200000000002f,0.36188500000000001f,0.11433f,0.239005f,0.43415599999999999f,0.32958300000000001f,0.21945999999999999f,0.28417500000000001f,0.19855500000000001f,0.43197600000000003f,0.302985f,1,0.14622099999999999f,0.14070099999999999f,0.26424300000000001f,0.185997f,0.42632199999999998f,0.30478f,0.34399000000000002f,0.19542999999999999f,0.38695499999999999f,0.18759999999999999f,0.17281199999999999f,0.043411499999999999f,0.303761f,0.069454000000000002f,0.45394299999999999f,0.83245100000000005f,0.31781700000000002f,0.94060100000000002f,1,0.18065800000000001f,0.73792100000000005f,0.83229699999999995f,0.40235199999999999f,0.12678600000000001f,0.59439799999999998f,0.48545500000000003f,0.32446999999999998f,0.36510199999999998f,0.777922f,0.58827200000000002f,0.40135300000000002f,0.61073500000000003f,0.158693f,0.074607199999999999f,0.82509900000000003f,0.92545900000000003f,0.65376999999999996f,0.26079200000000002f,0.71938400000000002f,0.55990799999999996f,0.37258999999999998f,0.36003499999999999f,0.62293900000000002f,0.21027100000000001f,0.44459500000000002f,0.31128600000000001f,0.46430900000000003f,0.55723100000000003f,0.52407999999999999f,0.070105600000000004f,0.32074900000000001f,0.19445999999999999f,0.72760899999999995f,0.52206200000000003f,0.39400400000000002f,0.23503499999999999f,0.395646f,0.49479600000000001f,0.51731799999999994f,0.109752f,0.69284900000000005f,0.0063200900000000004f,0.0207583f,0.0030610699999999999f,0.063719100000000001f,0.081660999999999997f,0.035110000000000002f,0.12781400000000001f,0.202294f,0.076414499999999996f,0.263127f,0.40019900000000003f,0.26727800000000002f,0.63338499999999998f,1,0.73990199999999995f,0.41376299999999999f,0.41810999999999998f,0.61271500000000001f,0.67237400000000003f,0.33967399999999998f,0.21171999999999999f,0.45964500000000003f,0.10249999999999999f,0.32589000000000001f,0.14815400000000001f,0.26544200000000001f,0.097430500000000003f,0.28643800000000003f,0.27521299999999999f,0.109111f,0.57508899999999996f,0.37028299999999997f,0.29410999999999998f,0.259826f,0.064871899999999996f,0.58341799999999999f,0.282663f,0.182004f,0.117421f,0.41772700000000001f,0.16965f,0.24853f,0.122819f,0.18548600000000001f,0.043361799999999999f,0.37384899999999999f,0.25276799999999999f,0.195103f,0.092783500000000005f,0.166543f};
float 	mydsp::ftbl0[250];
