//----------------------------------------------------------
// copyright: "(c)Mike Olsen, CCRMA (Stanford University)"
// license: "MIT"
// name: "Vocal FOF MIDI"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	class SIG0 {
	  private:
		int fSamplingFreq;
		int 	iRec11[2];
		float 	fTempPerm74;
	  public:
		int getNumInputs() { return 0; }
		int getNumOutputs() { return 1; }
		void init(int samplingFreq) {
			fSamplingFreq = samplingFreq;
			fTempPerm74 = 0;
			for (int i=0; i<2; i++) iRec11[i] = 0;
		}
		void fill (int count, float output[]) {
			for (int i=0; i<count; i++) {
				iRec11[0] = (iRec11[1] + 1);
				fTempPerm74 = sinf((9.5873799242852573e-05f * float((iRec11[0] + -1))));
				output[i] = fTempPerm74;
				// post processing
				iRec11[1] = iRec11[0];
			}
		}
	};


	FAUSTFLOAT 	fslider0;
	int 	iVec0[2];
	FAUSTFLOAT 	fbutton0;
	FAUSTFLOAT 	fslider1;
	float 	fVec1[2];
	FAUSTFLOAT 	fslider2;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider3;
	float 	fRec0[2];
	float 	fConst2;
	FAUSTFLOAT 	fslider4;
	int 	iTempPerm0;
	FAUSTFLOAT 	fslider5;
	float 	fRec3[2];
	FAUSTFLOAT 	fslider6;
	float 	fConst3;
	FAUSTFLOAT 	fslider7;
	float 	fRec4[2];
	int 	iTempPerm1;
	float 	fRec5[2];
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fVec2[2];
	float 	fTempPerm4;
	float 	fRec2[2];
	int 	iTempPerm5;
	int 	iVec3[2];
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	FAUSTFLOAT 	fslider8;
	float 	fRec7[2];
	FAUSTFLOAT 	fslider9;
	float 	fTempPerm6;
	int 	iTempPerm7;
	int 	iTempPerm8;
	int 	iTempPerm9;
	int 	iTempPerm10;
	int 	iTempPerm11;
	int 	iTempPerm12;
	int 	iTempPerm13;
	int 	iTempPerm14;
	float 	fTempPerm15;
	float 	fRec8[2];
	float 	fRec9[2];
	float 	fTempPerm16;
	float 	fTempPerm17;
	float 	fTempPerm18;
	int 	iTempPerm19;
	int 	iTempPerm20;
	int 	iTempPerm21;
	int 	iTempPerm22;
	int 	iTempPerm23;
	int 	iTempPerm24;
	int 	iTempPerm25;
	int 	iTempPerm26;
	int 	iTempPerm27;
	int 	iTempPerm28;
	int 	iTempPerm29;
	int 	iTempPerm30;
	int 	iTempPerm31;
	int 	iTempPerm32;
	int 	iTempPerm33;
	int 	iTempPerm34;
	int 	iTempPerm35;
	int 	iTempPerm36;
	int 	iTempPerm37;
	int 	iTempPerm38;
	int 	iTempPerm39;
	int 	iTempPerm40;
	int 	iTempPerm41;
	int 	iTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fTempPerm45;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fTempPerm56;
	float 	fTempPerm57;
	float 	fTempPerm58;
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	int 	iTempPerm67;
	float 	fTempPerm68;
	float 	fTempPerm69;
	float 	fRec6[2];
	float 	fTempPerm70;
	float 	fRec10[2];
	float 	fTempPerm71;
	float 	fRec1[3];
	float 	fTempPerm72;
	float 	fTempPerm73;
	static float 	ftbl0[65536];
	int 	iTempPerm75;
	float 	fConst7;
	float 	fRec13[2];
	float 	fTempPerm76;
	int 	iTempPerm77;
	int 	iTempPerm78;
	int 	iTempPerm79;
	int 	iTempPerm80;
	int 	iTempPerm81;
	int 	iTempPerm82;
	int 	iTempPerm83;
	int 	iTempPerm84;
	int 	iTempPerm85;
	int 	iTempPerm86;
	int 	iTempPerm87;
	int 	iTempPerm88;
	int 	iTempPerm89;
	int 	iTempPerm90;
	int 	iTempPerm91;
	int 	iTempPerm92;
	int 	iTempPerm93;
	int 	iTempPerm94;
	int 	iTempPerm95;
	int 	iTempPerm96;
	int 	iTempPerm97;
	int 	iTempPerm98;
	int 	iTempPerm99;
	int 	iTempPerm100;
	float 	fTempPerm101;
	float 	fTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	float 	fTempPerm105;
	float 	fTempPerm106;
	float 	fTempPerm107;
	float 	fTempPerm108;
	float 	fTempPerm109;
	float 	fTempPerm110;
	float 	fTempPerm111;
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fTempPerm114;
	float 	fTempPerm115;
	float 	fTempPerm116;
	float 	fTempPerm117;
	float 	fTempPerm118;
	float 	fTempPerm119;
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	int 	iTempPerm124;
	float 	fTempPerm125;
	float 	fTempPerm126;
	float 	fTempPerm127;
	float 	fRec12[2];
	float 	fTempPerm128;
	float 	fTempPerm129;
	float 	fTempPerm130;
	float 	fTempPerm131;
	float 	fTempPerm132;
	float 	fTempPerm133;
	float 	fTempPerm134;
	float 	fTempPerm135;
	float 	fTempPerm136;
	float 	fRec15[2];
	float 	fTempPerm137;
	float 	fRec16[2];
	float 	fTempPerm138;
	float 	fRec14[3];
	float 	fTempPerm139;
	float 	fTempPerm140;
	float 	fTempPerm141;
	float 	fTempPerm142;
	float 	fTempPerm143;
	float 	fRec17[2];
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fTempPerm146;
	float 	fTempPerm147;
	float 	fTempPerm148;
	float 	fTempPerm149;
	float 	fRec19[2];
	float 	fTempPerm150;
	float 	fRec20[2];
	float 	fTempPerm151;
	float 	fRec18[3];
	float 	fTempPerm152;
	float 	fTempPerm153;
	float 	fTempPerm154;
	float 	fTempPerm155;
	float 	fTempPerm156;
	float 	fRec21[2];
	float 	fTempPerm157;
	float 	fRec23[2];
	float 	fTempPerm158;
	float 	fRec24[2];
	float 	fTempPerm159;
	float 	fRec22[3];
	float 	fTempPerm160;
	float 	fTempPerm161;
	float 	fTempPerm162;
	float 	fTempPerm163;
	float 	fRec25[2];
	float 	fTempPerm164;
	float 	fRec27[2];
	float 	fTempPerm165;
	float 	fRec28[2];
	float 	fTempPerm166;
	float 	fRec26[3];
	float 	fTempPerm167;
	float 	fTempPerm168;
	float 	fRec29[2];
	float 	fTempPerm169;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("copyright", "(c)Mike Olsen, CCRMA (Stanford University)");
		m->declare("description", "MIDI-controllable FOF vocal synthesizer.");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("license", "MIT");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "Vocal FOF MIDI");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
		SIG0 sig0;
		sig0.init(samplingFreq);
		sig0.fill(65536,ftbl0);
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = (1.0f / fConst0);
		iTempPerm0 = 0;
		fConst3 = (6.2831853071795862f / fConst0);
		iTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		iTempPerm5 = 0;
		fConst4 = (3.1415926535897931f / fConst0);
		fConst5 = expf((0 - fConst1));
		fConst6 = (1.0f - fConst5);
		fTempPerm6 = 0;
		iTempPerm7 = 0;
		iTempPerm8 = 0;
		iTempPerm9 = 0;
		iTempPerm10 = 0;
		iTempPerm11 = 0;
		iTempPerm12 = 0;
		iTempPerm13 = 0;
		iTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		iTempPerm19 = 0;
		iTempPerm20 = 0;
		iTempPerm21 = 0;
		iTempPerm22 = 0;
		iTempPerm23 = 0;
		iTempPerm24 = 0;
		iTempPerm25 = 0;
		iTempPerm26 = 0;
		iTempPerm27 = 0;
		iTempPerm28 = 0;
		iTempPerm29 = 0;
		iTempPerm30 = 0;
		iTempPerm31 = 0;
		iTempPerm32 = 0;
		iTempPerm33 = 0;
		iTempPerm34 = 0;
		iTempPerm35 = 0;
		iTempPerm36 = 0;
		iTempPerm37 = 0;
		iTempPerm38 = 0;
		iTempPerm39 = 0;
		iTempPerm40 = 0;
		iTempPerm41 = 0;
		iTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		iTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		iTempPerm75 = 0;
		fConst7 = (1.0f / float(fConst0));
		fTempPerm76 = 0;
		iTempPerm77 = 0;
		iTempPerm78 = 0;
		iTempPerm79 = 0;
		iTempPerm80 = 0;
		iTempPerm81 = 0;
		iTempPerm82 = 0;
		iTempPerm83 = 0;
		iTempPerm84 = 0;
		iTempPerm85 = 0;
		iTempPerm86 = 0;
		iTempPerm87 = 0;
		iTempPerm88 = 0;
		iTempPerm89 = 0;
		iTempPerm90 = 0;
		iTempPerm91 = 0;
		iTempPerm92 = 0;
		iTempPerm93 = 0;
		iTempPerm94 = 0;
		iTempPerm95 = 0;
		iTempPerm96 = 0;
		iTempPerm97 = 0;
		iTempPerm98 = 0;
		iTempPerm99 = 0;
		iTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		iTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		fTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		fTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		fTempPerm165 = 0;
		fTempPerm166 = 0;
		fTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fbutton0 = 0.0;
		fslider1 = 0.0f;
		fslider2 = 0.90000000000000002f;
		fslider3 = 10.0f;
		fslider4 = 440.0f;
		fslider5 = 1.0f;
		fslider6 = 0.5f;
		fslider7 = 6.0f;
		fslider8 = 0.0f;
		fslider9 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) iVec3[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("vocal");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("midi");
		ui_interface->declare(&fslider4, "0", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->addHorizontalSlider("freq", &fslider4, 440.0f, 50.0f, 1000.0f, 0.01f);
		ui_interface->declare(&fslider5, "1", "");
		ui_interface->declare(&fslider5, "hidden", "1");
		ui_interface->declare(&fslider5, "midi", "pitchwheel");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->addHorizontalSlider("bend", &fslider5, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider2, "2", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->addHorizontalSlider("gain", &fslider2, 0.90000000000000002f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider3, "3", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->addHorizontalSlider("envAttack", &fslider3, 10.0f, 0.0f, 30.0f, 0.01f);
		ui_interface->declare(&fslider1, "4", "");
		ui_interface->declare(&fslider1, "hidden", "1");
		ui_interface->declare(&fslider1, "midi", "ctrl 64");
		ui_interface->declare(&fslider1, "style", "knob");
		ui_interface->addHorizontalSlider("sustain", &fslider1, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("otherParams");
		ui_interface->declare(&fslider9, "0", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->addHorizontalSlider("voiceType", &fslider9, 0.0f, 0.0f, 4.0f, 1.0f);
		ui_interface->declare(&fslider8, "1", "");
		ui_interface->declare(&fslider8, "midi", "ctrl 1");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->addHorizontalSlider("vowel", &fslider8, 0.0f, 0.0f, 4.0f, 0.01f);
		ui_interface->declare(&fslider7, "3", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->addHorizontalSlider("vibratoFreq", &fslider7, 6.0f, 1.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider6, "4", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->addHorizontalSlider("vibratoGain", &fslider6, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider0, "5", "");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->addHorizontalSlider("outGain", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fbutton0, "2", "");
		ui_interface->addButton("gate", &fbutton0);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = min((float)1, (float(fbutton0) + float(fslider1)));
		float 	fSlow2 = expf((0 - (fConst1 / float(fslider3))));
		float 	fSlow3 = (25.0f * ((fSlow1 * float(fslider2)) * (1.0f - fSlow2)));
		float 	fSlow4 = float(fslider4);
		int 	iSlow5 = (fSlow1 == 0);
		float 	fSlow6 = float(fslider5);
		float 	fSlow7 = (0.10000000000000001f * float(fslider6));
		float 	fSlow8 = (fConst3 * float(fslider7));
		float 	fSlow9 = sinf(fSlow8);
		float 	fSlow10 = cosf(fSlow8);
		float 	fSlow11 = (0 - fSlow9);
		float 	fSlow12 = (0.0010000000000000009f * float(fslider8));
		float 	fSlow13 = float(fslider9);
		int 	iSlow14 = ((int((fSlow13 == 0)))?1:((int((fSlow13 == 3)))?1:0));
		int 	iSlow15 = (5 * iSlow14);
		int 	iSlow16 = int((iSlow14 >= 1));
		float 	fSlow17 = ((iSlow16)?174.61000000000001f:82.409999999999997f);
		float 	fSlow18 = ((iSlow16)?1046.5f:523.25f);
		float 	fSlow19 = (fSlow18 - fSlow17);
		float 	fSlow20 = (5 * fSlow13);
		float 	fSlow21 = (5 * (1 - fSlow13));
		int 	iSlow22 = int((iSlow14 == 0));
		int 	iSlow23 = int((fSlow13 != 2));
		float 	fSlow24 = (2 * fSlow4);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fVec1[0] = fSlow1;
			fRec0[0] = (fSlow3 + (fSlow2 * fRec0[1]));
			iTempPerm0 = ((fSlow1 == fVec1[1]) | iSlow5);
			fRec3[0] = ((0.999f * (fRec3[1] * iTempPerm0)) + (fSlow6 * (1.0f - (0.999f * iTempPerm0))));
			fRec4[0] = ((fSlow9 * fRec5[1]) + (fSlow10 * fRec4[1]));
			iTempPerm1 = (1 - iVec0[1]);
			fRec5[0] = (((fSlow10 * fRec5[1]) + (fSlow11 * fRec4[1])) + iTempPerm1);
			fTempPerm2 = (fRec3[0] * ((fSlow7 * fRec4[0]) + 1));
			fTempPerm3 = (fSlow4 * fTempPerm2);
			fVec2[0] = fTempPerm3;
			fTempPerm4 = (fRec2[1] + (fConst2 * fVec2[1]));
			fRec2[0] = (fTempPerm4 - floorf(fTempPerm4));
			iTempPerm5 = ((fRec2[0] - fRec2[1]) < 0);
			iVec3[0] = iTempPerm5;
			fRec7[0] = (fSlow12 + (0.999f * fRec7[1]));
			fTempPerm6 = (fRec7[0] + iSlow15);
			iTempPerm7 = int((fTempPerm6 >= 5));
			iTempPerm8 = int((fTempPerm6 >= 8));
			iTempPerm9 = int((fTempPerm6 >= 7));
			iTempPerm10 = int((fTempPerm6 >= 6));
			iTempPerm11 = int((fTempPerm6 >= 3));
			iTempPerm12 = int((fTempPerm6 >= 4));
			iTempPerm13 = int((fTempPerm6 >= 2));
			iTempPerm14 = int((fTempPerm6 >= 1));
			fTempPerm15 = ((iTempPerm7)?((iTempPerm8)?2.0f:((iTempPerm9)?3.0f:((iTempPerm10)?3.0f:2.0f))):((iTempPerm11)?((iTempPerm12)?1.5f:1.0f):((iTempPerm13)?1.25f:((iTempPerm14)?1.25f:1.0f))));
			fRec8[0] = ((fSlow9 * fRec9[1]) + (fSlow10 * fRec8[1]));
			fRec9[0] = (((fSlow10 * fRec9[1]) + (fSlow11 * fRec8[1])) + iTempPerm1);
			fTempPerm16 = (fSlow4 * (fRec3[0] * ((fSlow7 * fRec8[0]) + 1)));
			fTempPerm17 = (fTempPerm15 + ((((iTempPerm7)?((iTempPerm8)?12.0f:((iTempPerm9)?12.0f:((iTempPerm10)?12.0f:15.0f))):((iTempPerm11)?((iTempPerm12)?4.0f:10.0f):((iTempPerm13)?2.5f:((iTempPerm14)?2.5f:10.0f)))) - fTempPerm15) * ((int((fTempPerm16 <= fSlow17)))?0.0f:((int((fTempPerm16 >= fSlow18)))?1.0f:((fTempPerm16 - fSlow17) / fSlow19)))));
			fTempPerm18 = (fSlow20 + fRec7[0]);
			iTempPerm19 = int((fTempPerm18 < 23));
			iTempPerm20 = int((fTempPerm18 < 22));
			iTempPerm21 = int((fTempPerm18 < 21));
			iTempPerm22 = int((fTempPerm18 < 20));
			iTempPerm23 = int((fTempPerm18 < 19));
			iTempPerm24 = int((fTempPerm18 < 18));
			iTempPerm25 = int((fTempPerm18 < 17));
			iTempPerm26 = int((fTempPerm18 < 16));
			iTempPerm27 = int((fTempPerm18 < 15));
			iTempPerm28 = int((fTempPerm18 < 14));
			iTempPerm29 = int((fTempPerm18 < 13));
			iTempPerm30 = int((fTempPerm18 < 12));
			iTempPerm31 = int((fTempPerm18 < 11));
			iTempPerm32 = int((fTempPerm18 < 10));
			iTempPerm33 = int((fTempPerm18 < 9));
			iTempPerm34 = int((fTempPerm18 < 8));
			iTempPerm35 = int((fTempPerm18 < 7));
			iTempPerm36 = int((fTempPerm18 < 6));
			iTempPerm37 = int((fTempPerm18 < 5));
			iTempPerm38 = int((fTempPerm18 < 4));
			iTempPerm39 = int((fTempPerm18 < 3));
			iTempPerm40 = int((fTempPerm18 < 2));
			iTempPerm41 = int((fTempPerm18 < 1));
			iTempPerm42 = int((fTempPerm18 < 0));
			fTempPerm43 = (20 * fTempPerm18);
			fTempPerm44 = (fSlow20 + (fRec7[0] + -1));
			fTempPerm45 = (fSlow20 + (fRec7[0] + -2));
			fTempPerm46 = (20 * fTempPerm45);
			fTempPerm47 = (fSlow20 + (fRec7[0] + -3));
			fTempPerm48 = (20 * fTempPerm47);
			fTempPerm49 = (fSlow20 + (fRec7[0] + -4));
			fTempPerm50 = (10 * fTempPerm49);
			fTempPerm51 = (fRec7[0] - fSlow21);
			fTempPerm52 = (fSlow20 + (fRec7[0] + -6));
			fTempPerm53 = (fSlow20 + (fRec7[0] + -7));
			fTempPerm54 = (fSlow20 + (fRec7[0] + -9));
			fTempPerm55 = (fSlow20 + (fRec7[0] + -10));
			fTempPerm56 = (10 * fTempPerm55);
			fTempPerm57 = (fSlow20 + (fRec7[0] + -11));
			fTempPerm58 = (fSlow20 + (fRec7[0] + -14));
			fTempPerm59 = (fSlow20 + (fRec7[0] + -15));
			fTempPerm60 = (20 * fTempPerm59);
			fTempPerm61 = (fSlow20 + (fRec7[0] + -17));
			fTempPerm62 = (fSlow20 + (fRec7[0] + -18));
			fTempPerm63 = (fSlow20 + (fRec7[0] + -20));
			fTempPerm64 = (20 * fTempPerm63);
			fTempPerm65 = (fSlow20 + (fRec7[0] + -21));
			fTempPerm66 = (fSlow20 + (fRec7[0] + -22));
			iTempPerm67 = int((fTempPerm18 < 24));
			fTempPerm68 = (fSlow20 + (fRec7[0] + -23));
			fTempPerm69 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?80:((iTempPerm41)?(80 - fTempPerm43):60)):((iTempPerm40)?(60 - (10 * fTempPerm44)):50)):((iTempPerm39)?(fTempPerm46 + 50):70)):((iTempPerm38)?(70 - fTempPerm48):50)):((iTempPerm37)?(fTempPerm50 + 50):60)):((iTempPerm36)?(60 - (20 * fTempPerm51)):40)):((iTempPerm35)?((20 * fTempPerm52) + 40):60)):((iTempPerm34)?(60 - (20 * fTempPerm53)):40)):40):((iTempPerm32)?(40 * (fTempPerm54 + 1)):80)):((iTempPerm31)?(80 - fTempPerm56):70)):((iTempPerm30)?(70 - (30 * fTempPerm57)):40)):40):40):((iTempPerm27)?(40 * (fTempPerm58 + 1)):80)):((iTempPerm26)?(80 - fTempPerm60):60)):60):((iTempPerm24)?(60 - (20 * fTempPerm61)):40)):((iTempPerm23)?((10 * fTempPerm62) + 40):50)):50):((iTempPerm21)?(fTempPerm64 + 50):70)):((iTempPerm20)?(70 - (30 * fTempPerm65)):40)):((iTempPerm19)?((30 * fTempPerm66) + 40):70)):((iTempPerm67)?(70 - (30 * fTempPerm68)):40));
			fRec6[0] = ((fConst5 * fRec6[1]) + (fConst6 * (fTempPerm17 * fTempPerm69)));
			fTempPerm70 = expf((fConst4 * (0 - fRec6[0])));
			fRec10[0] = ((fConst5 * fRec10[1]) + (fConst6 * fTempPerm69));
			fTempPerm71 = expf((fConst4 * (0 - fRec10[0])));
			fRec1[0] = (iVec3[1] - ((fRec1[1] * (0 - (fTempPerm70 + fTempPerm71))) + ((fTempPerm70 * fTempPerm71) * fRec1[2])));
			fTempPerm72 = ((0.003666666666666667f * (400 - fTempPerm16)) + 3);
			fTempPerm73 = ((0.00084000000000000003f * (1000 - fTempPerm16)) + 0.80000000000000004f);
			iTempPerm75 = (1 - (iVec3[0] > 0));
			fRec13[0] = (fSlow12 + (0.999f * fRec13[1]));
			fTempPerm76 = (fSlow20 + fRec13[0]);
			iTempPerm77 = int((fTempPerm76 < 23));
			iTempPerm78 = int((fTempPerm76 < 22));
			iTempPerm79 = int((fTempPerm76 < 21));
			iTempPerm80 = int((fTempPerm76 < 20));
			iTempPerm81 = int((fTempPerm76 < 19));
			iTempPerm82 = int((fTempPerm76 < 18));
			iTempPerm83 = int((fTempPerm76 < 17));
			iTempPerm84 = int((fTempPerm76 < 16));
			iTempPerm85 = int((fTempPerm76 < 15));
			iTempPerm86 = int((fTempPerm76 < 14));
			iTempPerm87 = int((fTempPerm76 < 13));
			iTempPerm88 = int((fTempPerm76 < 12));
			iTempPerm89 = int((fTempPerm76 < 11));
			iTempPerm90 = int((fTempPerm76 < 10));
			iTempPerm91 = int((fTempPerm76 < 9));
			iTempPerm92 = int((fTempPerm76 < 8));
			iTempPerm93 = int((fTempPerm76 < 7));
			iTempPerm94 = int((fTempPerm76 < 6));
			iTempPerm95 = int((fTempPerm76 < 5));
			iTempPerm96 = int((fTempPerm76 < 4));
			iTempPerm97 = int((fTempPerm76 < 3));
			iTempPerm98 = int((fTempPerm76 < 2));
			iTempPerm99 = int((fTempPerm76 < 1));
			iTempPerm100 = int((fTempPerm76 < 0));
			fTempPerm101 = (fSlow20 + (fRec13[0] + -1));
			fTempPerm102 = (fSlow20 + (fRec13[0] + -2));
			fTempPerm103 = (fSlow20 + (fRec13[0] + -3));
			fTempPerm104 = (fSlow20 + (fRec13[0] + -4));
			fTempPerm105 = (fRec13[0] - fSlow21);
			fTempPerm106 = (fSlow20 + (fRec13[0] + -6));
			fTempPerm107 = (fSlow20 + (fRec13[0] + -7));
			fTempPerm108 = (fSlow20 + (fRec13[0] + -8));
			fTempPerm109 = (50 * fTempPerm108);
			fTempPerm110 = (fSlow20 + (fRec13[0] + -9));
			fTempPerm111 = (fSlow20 + (fRec13[0] + -10));
			fTempPerm112 = (fSlow20 + (fRec13[0] + -11));
			fTempPerm113 = (fSlow20 + (fRec13[0] + -12));
			fTempPerm114 = (fSlow20 + (fRec13[0] + -13));
			fTempPerm115 = (fSlow20 + (fRec13[0] + -14));
			fTempPerm116 = (fSlow20 + (fRec13[0] + -15));
			fTempPerm117 = (fSlow20 + (fRec13[0] + -16));
			fTempPerm118 = (fSlow20 + (fRec13[0] + -17));
			fTempPerm119 = (fSlow20 + (fRec13[0] + -18));
			fTempPerm120 = (fSlow20 + (fRec13[0] + -19));
			fTempPerm121 = (fSlow20 + (fRec13[0] + -20));
			fTempPerm122 = (fSlow20 + (fRec13[0] + -21));
			fTempPerm123 = (fSlow20 + (fRec13[0] + -22));
			iTempPerm124 = int((fTempPerm76 < 24));
			fTempPerm125 = (fSlow20 + (fRec13[0] + -23));
			fTempPerm126 = ((iTempPerm77)?((iTempPerm78)?((iTempPerm79)?((iTempPerm80)?((iTempPerm81)?((iTempPerm82)?((iTempPerm83)?((iTempPerm84)?((iTempPerm85)?((iTempPerm86)?((iTempPerm87)?((iTempPerm88)?((iTempPerm89)?((iTempPerm90)?((iTempPerm91)?((iTempPerm92)?((iTempPerm93)?((iTempPerm94)?((iTempPerm95)?((iTempPerm96)?((iTempPerm97)?((iTempPerm98)?((iTempPerm99)?((iTempPerm100)?800:((iTempPerm99)?(800 - (400 * fTempPerm76)):400)):((iTempPerm98)?(400 - (50 * fTempPerm101)):350)):((iTempPerm97)?((100 * fTempPerm102) + 350):450)):((iTempPerm96)?(450 - (125 * fTempPerm103)):325)):((iTempPerm95)?((275 * fTempPerm104) + 325):600)):((iTempPerm94)?(600 - (200 * fTempPerm105)):400)):((iTempPerm93)?(400 - (150 * fTempPerm106)):250)):((iTempPerm92)?((150 * fTempPerm107) + 250):400)):((iTempPerm91)?(400 - fTempPerm109):350)):((iTempPerm90)?((310 * fTempPerm110) + 350):660)):((iTempPerm89)?(660 - (220 * fTempPerm111)):440)):((iTempPerm88)?(440 - (170 * fTempPerm112)):270)):((iTempPerm87)?((160 * fTempPerm113) + 270):430)):((iTempPerm86)?(430 - (60 * fTempPerm114)):370)):((iTempPerm85)?((430 * fTempPerm115) + 370):800)):((iTempPerm84)?(800 - (450 * fTempPerm116)):350)):((iTempPerm83)?(350 - (80 * fTempPerm117)):270)):((iTempPerm82)?((180 * fTempPerm118) + 270):450)):((iTempPerm81)?(450 - (125 * fTempPerm119)):325)):((iTempPerm80)?(325 * (fTempPerm120 + 1)):650)):((iTempPerm79)?(650 - (250 * fTempPerm121)):400)):((iTempPerm78)?(400 - (110 * fTempPerm122)):290)):((iTempPerm77)?((110 * fTempPerm123) + 290):400)):((iTempPerm124)?(400 - (50 * fTempPerm125)):350));
			fTempPerm127 = ((fRec12[1] * iTempPerm75) + (fConst7 * ((int((fTempPerm126 <= fVec2[0])))?fVec2[0]:fTempPerm126)));
			fRec12[0] = (fTempPerm127 - floorf(fTempPerm127));
			fTempPerm128 = (10 * fTempPerm51);
			fTempPerm129 = (10 * fTempPerm54);
			fTempPerm130 = (fSlow20 + (fRec7[0] + -12));
			fTempPerm131 = (fSlow20 + (fRec7[0] + -13));
			fTempPerm132 = (fSlow20 + (fRec7[0] + -16));
			fTempPerm133 = (fSlow20 + (fRec7[0] + -19));
			fTempPerm134 = (10 * fTempPerm63);
			fTempPerm135 = (10 * fTempPerm66);
			fTempPerm136 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?90:((iTempPerm41)?(90 - (10 * fTempPerm18)):80)):((iTempPerm40)?((20 * fTempPerm44) + 80):100)):((iTempPerm39)?(100 - fTempPerm46):80)):((iTempPerm38)?(80 - fTempPerm48):60)):((iTempPerm37)?(fTempPerm50 + 60):70)):((iTempPerm36)?(fTempPerm128 + 70):80)):((iTempPerm35)?((10 * fTempPerm52) + 80):90)):((iTempPerm34)?(90 - (10 * fTempPerm53)):80)):80):((iTempPerm32)?(fTempPerm129 + 80):90)):((iTempPerm31)?(90 - fTempPerm56):80)):((iTempPerm30)?((10 * fTempPerm57) + 80):90)):((iTempPerm29)?(90 - (10 * fTempPerm130)):80)):((iTempPerm28)?(80 - (20 * fTempPerm131)):60)):((iTempPerm27)?((30 * fTempPerm58) + 60):90)):((iTempPerm26)?((10 * fTempPerm59) + 90):100)):((iTempPerm25)?(100 - (10 * fTempPerm132)):90)):((iTempPerm24)?(90 - (10 * fTempPerm61)):80)):((iTempPerm23)?(80 - (20 * fTempPerm62)):60)):((iTempPerm22)?((30 * fTempPerm133) + 60):90)):((iTempPerm21)?(90 - fTempPerm134):80)):((iTempPerm20)?((10 * fTempPerm65) + 80):90)):((iTempPerm19)?(90 - fTempPerm135):80)):((iTempPerm67)?(80 - (20 * fTempPerm68)):60));
			fRec15[0] = ((fConst5 * fRec15[1]) + (fConst6 * (fTempPerm17 * fTempPerm136)));
			fTempPerm137 = expf((fConst4 * (0 - fRec15[0])));
			fRec16[0] = ((fConst5 * fRec16[1]) + (fConst6 * fTempPerm136));
			fTempPerm138 = expf((fConst4 * (0 - fRec16[0])));
			fRec14[0] = (iVec3[1] - ((fRec14[1] * (0 - (fTempPerm137 + fTempPerm138))) + ((fTempPerm137 * fTempPerm138) * fRec14[2])));
			fTempPerm139 = (fSlow20 + (fRec7[0] + -8));
			fTempPerm140 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?0.63095699999999999f:((iTempPerm41)?(0.63095699999999999f - (0.56786099999999995f * fTempPerm18)):0.063095999999999999f)):((iTempPerm40)?((0.036904000000000006f * fTempPerm44) + 0.063095999999999999f):0.10000000000000001f)):((iTempPerm39)?((0.25481299999999996f * fTempPerm45) + 0.10000000000000001f):0.35481299999999999f)):((iTempPerm38)?(0.35481299999999999f - (0.10362399999999999f * fTempPerm47)):0.251189f)):((iTempPerm37)?((0.19549500000000003f * fTempPerm49) + 0.251189f):0.44668400000000003f)):((iTempPerm36)?(0.44668400000000003f - (0.19549500000000003f * fTempPerm51)):0.251189f)):((iTempPerm35)?(0.251189f - (0.21956599999999998f * fTempPerm52)):0.031622999999999998f)):((iTempPerm34)?((0.25021499999999997f * fTempPerm53) + 0.031622999999999998f):0.28183799999999998f)):((iTempPerm33)?(0.28183799999999998f - (0.18183799999999997f * fTempPerm139)):0.10000000000000001f)):((iTempPerm32)?((0.40118700000000007f * fTempPerm54) + 0.10000000000000001f):0.50118700000000005f)):((iTempPerm31)?(0.50118700000000005f - (0.30166100000000007f * fTempPerm55)):0.19952600000000001f)):((iTempPerm30)?(0.19952600000000001f - (0.13643f * fTempPerm57)):0.063095999999999999f)):((iTempPerm29)?((0.25313200000000002f * fTempPerm130) + 0.063095999999999999f):0.31622800000000001f)):((iTempPerm28)?(0.31622800000000001f - (0.216228f * fTempPerm131)):0.10000000000000001f)):((iTempPerm27)?((0.40118700000000007f * fTempPerm58) + 0.10000000000000001f):0.50118700000000005f)):((iTempPerm26)?(0.50118700000000005f - (0.40118700000000007f * fTempPerm59)):0.10000000000000001f)):((iTempPerm25)?((0.15118899999999999f * fTempPerm132) + 0.10000000000000001f):0.251189f)):((iTempPerm24)?((0.030648999999999982f * fTempPerm61) + 0.251189f):0.28183799999999998f)):((iTempPerm23)?(0.28183799999999998f - (0.12334899999999999f * fTempPerm62)):0.15848899999999999f)):((iTempPerm22)?((0.34269800000000006f * fTempPerm133) + 0.15848899999999999f):0.50118700000000005f)):((iTempPerm21)?(0.50118700000000005f - (0.30166100000000007f * fTempPerm63)):0.19952600000000001f)):((iTempPerm20)?(0.19952600000000001f - (0.021697999999999995f * fTempPerm65)):0.17782800000000001f)):((iTempPerm19)?((0.1384f * fTempPerm66) + 0.17782800000000001f):0.31622800000000001f)):((iTempPerm67)?(0.31622800000000001f - (0.216228f * fTempPerm68)):0.10000000000000001f));
			fTempPerm141 = ((iTempPerm77)?((iTempPerm78)?((iTempPerm79)?((iTempPerm80)?((iTempPerm81)?((iTempPerm82)?((iTempPerm83)?((iTempPerm84)?((iTempPerm85)?((iTempPerm86)?((iTempPerm87)?((iTempPerm88)?((iTempPerm89)?((iTempPerm90)?((iTempPerm91)?((iTempPerm92)?((iTempPerm93)?((iTempPerm94)?((iTempPerm95)?((iTempPerm96)?((iTempPerm97)?((iTempPerm98)?((iTempPerm99)?((iTempPerm100)?1150:((iTempPerm99)?((450 * fTempPerm76) + 1150):1600)):((iTempPerm98)?((100 * fTempPerm101) + 1600):1700)):((iTempPerm97)?(1700 - (900 * fTempPerm102)):800)):((iTempPerm96)?(800 - (100 * fTempPerm103)):700)):((iTempPerm95)?((340 * fTempPerm104) + 700):1040)):((iTempPerm94)?((580 * fTempPerm105) + 1040):1620)):((iTempPerm93)?((130 * fTempPerm106) + 1620):1750)):((iTempPerm92)?(1750 - (1000 * fTempPerm107)):750)):((iTempPerm91)?(750 - (150 * fTempPerm108)):600)):((iTempPerm90)?((520 * fTempPerm110) + 600):1120)):((iTempPerm89)?((680 * fTempPerm111) + 1120):1800)):((iTempPerm88)?((50 * fTempPerm112) + 1800):1850)):((iTempPerm87)?(1850 - (1030 * fTempPerm113)):820)):((iTempPerm86)?(820 - (190 * fTempPerm114)):630)):((iTempPerm85)?((520 * fTempPerm115) + 630):1150)):((iTempPerm84)?((850 * fTempPerm116) + 1150):2000)):((iTempPerm83)?((140 * fTempPerm117) + 2000):2140)):((iTempPerm82)?(2140 - (1340 * fTempPerm118)):800)):((iTempPerm81)?(800 - (100 * fTempPerm119)):700)):((iTempPerm80)?((380 * fTempPerm120) + 700):1080)):((iTempPerm79)?((620 * fTempPerm121) + 1080):1700)):((iTempPerm78)?((170 * fTempPerm122) + 1700):1870)):((iTempPerm77)?(1870 - (1070 * fTempPerm123)):800)):((iTempPerm124)?(800 - (200 * fTempPerm125)):600));
			fTempPerm142 = ((fSlow24 * fTempPerm2) + 30);
			fTempPerm143 = ((iTempPerm75 * fRec17[1]) + (fConst7 * ((iSlow23)?((int(((fTempPerm141 >= 1300) & (fVec2[0] >= 200))))?(fTempPerm141 - (0.00095238095238095238f * ((fVec2[0] + -200) * (fTempPerm141 + -1300)))):((int((fTempPerm141 <= fTempPerm142)))?fTempPerm142:fTempPerm141)):fTempPerm141)));
			fRec17[0] = (fTempPerm143 - floorf(fTempPerm143));
			fTempPerm144 = (60 * fTempPerm49);
			fTempPerm145 = (20 * fTempPerm54);
			fTempPerm146 = (20 * fTempPerm55);
			fTempPerm147 = (20 * fTempPerm58);
			fTempPerm148 = (50 * fTempPerm133);
			fTempPerm149 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?120:((iTempPerm39)?(120 - fTempPerm46):100)):((iTempPerm38)?((70 * fTempPerm47) + 100):170)):((iTempPerm37)?(170 - fTempPerm144):110)):((iTempPerm36)?(110 - fTempPerm128):100)):100):100):100):((iTempPerm32)?(fTempPerm145 + 100):120)):((iTempPerm31)?(120 - fTempPerm146):100)):100):100):100):((iTempPerm27)?(fTempPerm147 + 100):120)):120):((iTempPerm25)?(120 - (20 * fTempPerm132)):100)):100):((iTempPerm23)?((70 * fTempPerm62) + 100):170)):((iTempPerm22)?(170 - fTempPerm148):120)):((iTempPerm21)?(120 - fTempPerm64):100)):100):100):100);
			fRec19[0] = ((fConst5 * fRec19[1]) + (fConst6 * (fTempPerm17 * fTempPerm149)));
			fTempPerm150 = expf((fConst4 * (0 - fRec19[0])));
			fRec20[0] = ((fConst5 * fRec20[1]) + (fConst6 * fTempPerm149));
			fTempPerm151 = expf((fConst4 * (0 - fRec20[0])));
			fRec18[0] = (iVec3[1] - ((fRec18[1] * (0 - (fTempPerm150 + fTempPerm151))) + ((fTempPerm150 * fTempPerm151) * fRec18[2])));
			fTempPerm152 = ((iTempPerm24)?((0.029314000000000007f * fTempPerm61) + 0.050118999999999997f):0.079433000000000004f);
			fTempPerm153 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?0.10000000000000001f:((iTempPerm41)?(0.10000000000000001f - (0.068377000000000007f * fTempPerm18)):0.031622999999999998f)):0.031622999999999998f):((iTempPerm39)?((0.12686599999999998f * fTempPerm45) + 0.031622999999999998f):0.15848899999999999f)):((iTempPerm38)?(0.15848899999999999f - (0.12686599999999998f * fTempPerm47)):0.031622999999999998f)):((iTempPerm37)?((0.32318999999999998f * fTempPerm49) + 0.031622999999999998f):0.35481299999999999f)):0.35481299999999999f):((iTempPerm35)?(0.35481299999999999f - (0.196324f * fTempPerm52)):0.15848899999999999f)):((iTempPerm34)?(0.15848899999999999f - (0.069363999999999995f * fTempPerm53)):0.089124999999999996f)):((iTempPerm33)?(0.089124999999999996f - (0.064005999999999993f * fTempPerm139)):0.025118999999999999f)):((iTempPerm32)?((0.045675999999999994f * fTempPerm54) + 0.025118999999999999f):0.070794999999999997f)):((iTempPerm31)?((0.055098000000000008f * fTempPerm55) + 0.070794999999999997f):0.125893f)):((iTempPerm30)?(0.125893f - (0.062797000000000006f * fTempPerm57)):0.063095999999999999f)):((iTempPerm29)?(0.063095999999999999f - (0.012977000000000002f * fTempPerm130)):0.050118999999999997f)):((iTempPerm28)?((0.020676f * fTempPerm131) + 0.050118999999999997f):0.070794999999999997f)):((iTempPerm27)?(0.070794999999999997f - (0.045675999999999994f * fTempPerm58)):0.025118999999999999f)):((iTempPerm26)?((0.15270900000000001f * fTempPerm59) + 0.025118999999999999f):0.17782800000000001f)):((iTempPerm25)?(0.17782800000000001f - (0.12770900000000002f * fTempPerm132)):0.050118999999999997f)):fTempPerm152):((iTempPerm23)?(0.079433000000000004f - (0.061650000000000003f * fTempPerm62)):0.017783f)):((iTempPerm22)?((0.42890100000000003f * fTempPerm133) + 0.017783f):0.44668400000000003f)):((iTempPerm21)?(0.44668400000000003f - (0.19549500000000003f * fTempPerm63)):0.251189f)):((iTempPerm20)?(0.251189f - (0.12529599999999999f * fTempPerm65)):0.125893f)):((iTempPerm19)?((0.12529599999999999f * fTempPerm66) + 0.125893f):0.251189f)):((iTempPerm67)?(0.251189f - (0.109935f * fTempPerm68)):0.14125399999999999f));
			fTempPerm154 = (50 * fTempPerm111);
			fTempPerm155 = (100 * fTempPerm125);
			fTempPerm156 = ((iTempPerm75 * fRec21[1]) + (fConst7 * ((iTempPerm77)?((iTempPerm78)?((iTempPerm79)?((iTempPerm80)?((iTempPerm81)?((iTempPerm82)?((iTempPerm83)?((iTempPerm84)?((iTempPerm85)?((iTempPerm86)?((iTempPerm87)?((iTempPerm88)?((iTempPerm89)?((iTempPerm90)?((iTempPerm91)?((iTempPerm92)?((iTempPerm93)?((iTempPerm94)?((iTempPerm95)?((iTempPerm96)?((iTempPerm97)?((iTempPerm98)?((iTempPerm99)?((iTempPerm100)?2800:((iTempPerm99)?(2800 - (100 * fTempPerm76)):2700)):2700):((iTempPerm97)?((130 * fTempPerm102) + 2700):2830)):((iTempPerm96)?(2830 - (300 * fTempPerm103)):2530)):((iTempPerm95)?(2530 - (280 * fTempPerm104)):2250)):((iTempPerm94)?((150 * fTempPerm105) + 2250):2400)):((iTempPerm93)?((200 * fTempPerm106) + 2400):2600)):((iTempPerm92)?(2600 - (200 * fTempPerm107)):2400)):2400):((iTempPerm90)?((350 * fTempPerm110) + 2400):2750)):((iTempPerm89)?(2750 - fTempPerm154):2700)):((iTempPerm88)?((200 * fTempPerm112) + 2700):2900)):((iTempPerm87)?(2900 - (200 * fTempPerm113)):2700)):((iTempPerm86)?((50 * fTempPerm114) + 2700):2750)):((iTempPerm85)?((150 * fTempPerm115) + 2750):2900)):((iTempPerm84)?(2900 - (100 * fTempPerm116)):2800)):((iTempPerm83)?((150 * fTempPerm117) + 2800):2950)):((iTempPerm82)?(2950 - (120 * fTempPerm118)):2830)):((iTempPerm81)?(2830 - (130 * fTempPerm119)):2700)):((iTempPerm80)?(2700 - (50 * fTempPerm120)):2650)):((iTempPerm79)?(2650 - (50 * fTempPerm121)):2600)):((iTempPerm78)?((200 * fTempPerm122) + 2600):2800)):((iTempPerm77)?(2800 - (200 * fTempPerm123)):2600)):((iTempPerm124)?(fTempPerm155 + 2600):2700))));
			fRec21[0] = (fTempPerm156 - floorf(fTempPerm156));
			fTempPerm157 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?130:((iTempPerm41)?(fTempPerm43 + 130):150)):150):((iTempPerm39)?(150 - fTempPerm46):130)):((iTempPerm38)?((50 * fTempPerm47) + 130):180)):((iTempPerm37)?(180 - fTempPerm144):120)):120):120):120):120):((iTempPerm32)?(fTempPerm129 + 120):130)):((iTempPerm31)?(130 - fTempPerm56):120)):120):120):120):((iTempPerm27)?((10 * fTempPerm58) + 120):130)):((iTempPerm26)?(fTempPerm60 + 130):150)):((iTempPerm25)?(150 - (30 * fTempPerm132)):120)):120):((iTempPerm23)?((60 * fTempPerm62) + 120):180)):((iTempPerm22)?(180 - fTempPerm148):130)):((iTempPerm21)?(130 - fTempPerm134):120)):120):((iTempPerm19)?(fTempPerm135 + 120):130)):((iTempPerm67)?(130 - (10 * fTempPerm68)):120));
			fRec23[0] = ((fConst5 * fRec23[1]) + (fConst6 * (fTempPerm17 * fTempPerm157)));
			fTempPerm158 = expf((fConst4 * (0 - fRec23[0])));
			fRec24[0] = ((fConst5 * fRec24[1]) + (fConst6 * fTempPerm157));
			fTempPerm159 = expf((fConst4 * (0 - fRec24[0])));
			fRec22[0] = (iVec3[1] - ((fRec22[1] * (0 - (fTempPerm158 + fTempPerm159))) + ((fTempPerm158 * fTempPerm159) * fRec22[2])));
			fTempPerm160 = ((iTempPerm30)?(0.10000000000000001f - (0.084151000000000004f * fTempPerm57)):0.015848999999999999f);
			fTempPerm161 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?0.015848999999999999f:((iTempPerm41)?((0.0019340000000000017f * fTempPerm18) + 0.015848999999999999f):0.017783f)):((iTempPerm40)?(0.017783f - (0.0019340000000000017f * fTempPerm44)):0.015848999999999999f)):((iTempPerm39)?((0.023962000000000001f * fTempPerm45) + 0.015848999999999999f):0.039810999999999999f)):((iTempPerm38)?(0.039810999999999999f - (0.029810999999999997f * fTempPerm47)):0.01f)):((iTempPerm37)?((0.34481299999999998f * fTempPerm49) + 0.01f):0.35481299999999999f)):((iTempPerm36)?(0.35481299999999999f - (0.10362399999999999f * fTempPerm51)):0.251189f)):((iTempPerm35)?(0.251189f - (0.17175599999999999f * fTempPerm52)):0.079433000000000004f)):((iTempPerm34)?((0.020567000000000002f * fTempPerm53) + 0.079433000000000004f):0.10000000000000001f)):((iTempPerm33)?(0.10000000000000001f - (0.060189000000000006f * fTempPerm139)):0.039810999999999999f)):((iTempPerm32)?((0.023285f * fTempPerm54) + 0.039810999999999999f):0.063095999999999999f)):((iTempPerm31)?((0.036904000000000006f * fTempPerm55) + 0.063095999999999999f):0.10000000000000001f)):fTempPerm160):((iTempPerm29)?((0.063584000000000002f * fTempPerm130) + 0.015848999999999999f):0.079433000000000004f)):((iTempPerm28)?(0.079433000000000004f - (0.047810000000000005f * fTempPerm131)):0.031622999999999998f)):((iTempPerm27)?((0.068377000000000007f * fTempPerm58) + 0.031622999999999998f):0.10000000000000001f)):((iTempPerm26)?(0.10000000000000001f - (0.090000000000000011f * fTempPerm59)):0.01f)):((iTempPerm25)?((0.040118999999999995f * fTempPerm132) + 0.01f):0.050118999999999997f)):fTempPerm152):((iTempPerm23)?(0.079433000000000004f - (0.069433000000000009f * fTempPerm62)):0.01f)):((iTempPerm22)?((0.38810699999999998f * fTempPerm133) + 0.01f):0.39810699999999999f)):((iTempPerm21)?(0.39810699999999999f - (0.19858099999999998f * fTempPerm63)):0.19952600000000001f)):((iTempPerm20)?(0.19952600000000001f - (0.099526000000000003f * fTempPerm65)):0.10000000000000001f)):((iTempPerm19)?((0.15118899999999999f * fTempPerm66) + 0.10000000000000001f):0.251189f)):((iTempPerm67)?(0.251189f - (0.051662999999999987f * fTempPerm68)):0.19952600000000001f));
			fTempPerm162 = (350 * fTempPerm105);
			fTempPerm163 = ((iTempPerm75 * fRec25[1]) + (fConst7 * ((iTempPerm77)?((iTempPerm78)?((iTempPerm79)?((iTempPerm80)?((iTempPerm81)?((iTempPerm82)?((iTempPerm83)?((iTempPerm84)?((iTempPerm85)?((iTempPerm86)?((iTempPerm87)?((iTempPerm88)?((iTempPerm89)?((iTempPerm90)?((iTempPerm91)?((iTempPerm92)?((iTempPerm93)?((iTempPerm94)?((iTempPerm95)?((iTempPerm96)?((iTempPerm97)?((iTempPerm98)?((iTempPerm99)?((iTempPerm100)?3500:((iTempPerm99)?(3500 - (200 * fTempPerm76)):3300)):((iTempPerm98)?((400 * fTempPerm101) + 3300):3700)):((iTempPerm97)?(3700 - (200 * fTempPerm102)):3500)):3500):((iTempPerm95)?(3500 - (1050 * fTempPerm104)):2450)):((iTempPerm94)?(fTempPerm162 + 2450):2800)):((iTempPerm93)?((250 * fTempPerm106) + 2800):3050)):((iTempPerm92)?(3050 - (450 * fTempPerm107)):2600)):((iTempPerm91)?((75 * fTempPerm108) + 2600):2675)):((iTempPerm90)?((325 * fTempPerm110) + 2675):3000)):3000):((iTempPerm88)?((350 * fTempPerm112) + 3000):3350)):((iTempPerm87)?(3350 - (350 * fTempPerm113)):3000)):3000):((iTempPerm85)?((900 * fTempPerm115) + 3000):3900)):((iTempPerm84)?(3900 - (300 * fTempPerm116)):3600)):((iTempPerm83)?((300 * fTempPerm117) + 3600):3900)):((iTempPerm82)?(3900 - (100 * fTempPerm118)):3800)):3800):((iTempPerm80)?(3800 - (900 * fTempPerm120)):2900)):((iTempPerm79)?((300 * fTempPerm121) + 2900):3200)):((iTempPerm78)?((50 * fTempPerm122) + 3200):3250)):((iTempPerm77)?(3250 - (450 * fTempPerm123)):2800)):((iTempPerm124)?(fTempPerm155 + 2800):2900))));
			fRec25[0] = (fTempPerm163 - floorf(fTempPerm163));
			fTempPerm164 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?((iTempPerm41)?((iTempPerm42)?140:((iTempPerm41)?((60 * fTempPerm18) + 140):200)):200):((iTempPerm39)?(200 - (65 * fTempPerm45)):135)):((iTempPerm38)?((65 * fTempPerm47) + 135):200)):((iTempPerm37)?(200 - (70 * fTempPerm49)):130)):((iTempPerm36)?(130 - fTempPerm128):120)):120):120):120):((iTempPerm32)?(fTempPerm145 + 120):140)):((iTempPerm31)?(140 - fTempPerm146):120)):120):120):120):((iTempPerm27)?(fTempPerm147 + 120):140)):((iTempPerm26)?((60 * fTempPerm59) + 140):200)):((iTempPerm25)?(200 - (80 * fTempPerm132)):120)):120):((iTempPerm23)?((80 * fTempPerm62) + 120):200)):((iTempPerm22)?(200 - (60 * fTempPerm133)):140)):((iTempPerm21)?(140 - fTempPerm64):120)):120):((iTempPerm19)?((15 * fTempPerm66) + 120):135)):((iTempPerm67)?(135 - (15 * fTempPerm68)):120));
			fRec27[0] = ((fConst5 * fRec27[1]) + (fConst6 * (fTempPerm17 * fTempPerm164)));
			fTempPerm165 = expf((fConst4 * (0 - fRec27[0])));
			fRec28[0] = ((fConst5 * fRec28[1]) + (fConst6 * fTempPerm164));
			fTempPerm166 = expf((fConst4 * (0 - fRec28[0])));
			fRec26[0] = (iVec3[1] - ((fRec26[1] * (0 - (fTempPerm165 + fTempPerm166))) + ((fTempPerm165 * fTempPerm166) * fRec26[2])));
			fTempPerm167 = ((iTempPerm19)?((iTempPerm20)?((iTempPerm21)?((iTempPerm22)?((iTempPerm23)?((iTempPerm24)?((iTempPerm25)?((iTempPerm26)?((iTempPerm27)?((iTempPerm28)?((iTempPerm29)?((iTempPerm30)?((iTempPerm31)?((iTempPerm32)?((iTempPerm33)?((iTempPerm34)?((iTempPerm35)?((iTempPerm36)?((iTempPerm37)?((iTempPerm38)?((iTempPerm39)?((iTempPerm40)?0.001f:((iTempPerm39)?((0.00077800000000000005f * fTempPerm45) + 0.001f):0.0017780000000000001f)):((iTempPerm38)?(0.0017780000000000001f - (0.001147f * fTempPerm47)):0.00063100000000000005f)):((iTempPerm37)?((0.099368999999999999f * fTempPerm49) + 0.00063100000000000005f):0.10000000000000001f)):((iTempPerm36)?((0.025892999999999999f * fTempPerm51) + 0.10000000000000001f):0.125893f)):((iTempPerm35)?(0.125893f - (0.086082000000000006f * fTempPerm52)):0.039810999999999999f)):((iTempPerm34)?(0.039810999999999999f - (0.029810999999999997f * fTempPerm53)):0.01f)):((iTempPerm33)?((0.0058489999999999983f * fTempPerm139) + 0.01f):0.015848999999999999f)):((iTempPerm32)?(0.015848999999999999f - (0.003259999999999999f * fTempPerm54)):0.012588999999999999f)):((iTempPerm31)?((0.087411000000000003f * fTempPerm55) + 0.012588999999999999f):0.10000000000000001f)):fTempPerm160):((iTempPerm29)?((0.004104f * fTempPerm130) + 0.015848999999999999f):0.019952999999999999f)):0.019952999999999999f):((iTempPerm27)?(0.019952999999999999f - (0.016791f * fTempPerm58)):0.0031619999999999999f)):((iTempPerm26)?(0.0031619999999999999f - (0.0015769999999999998f * fTempPerm59)):0.001585f)):((iTempPerm25)?((0.004725f * fTempPerm132) + 0.001585f):0.0063099999999999996f)):((iTempPerm24)?(0.0063099999999999996f - (0.0031479999999999998f * fTempPerm61)):0.0031619999999999999f)):((iTempPerm23)?(0.0031619999999999999f - (0.0021619999999999999f * fTempPerm62)):0.001f)):((iTempPerm22)?((0.078433000000000003f * fTempPerm133) + 0.001f):0.079433000000000004f)):((iTempPerm21)?((0.020567000000000002f * fTempPerm63) + 0.079433000000000004f):0.10000000000000001f)):((iTempPerm20)?(0.10000000000000001f - (0.068377000000000007f * fTempPerm65)):0.031622999999999998f)):((iTempPerm19)?((0.018495999999999999f * fTempPerm66) + 0.031622999999999998f):0.050118999999999997f)):0.050118999999999997f);
			fTempPerm168 = ((iTempPerm75 * fRec29[1]) + (fConst7 * ((iTempPerm77)?((iTempPerm78)?((iTempPerm79)?((iTempPerm80)?((iTempPerm81)?((iTempPerm82)?((iTempPerm83)?((iTempPerm84)?((iTempPerm85)?((iTempPerm86)?((iTempPerm87)?((iTempPerm88)?((iTempPerm89)?((iTempPerm90)?((iTempPerm91)?((iTempPerm92)?((iTempPerm93)?((iTempPerm94)?((iTempPerm95)?((iTempPerm96)?4950:((iTempPerm95)?(4950 - (2200 * fTempPerm104)):2750)):((iTempPerm94)?(fTempPerm162 + 2750):3100)):((iTempPerm93)?((240 * fTempPerm106) + 3100):3340)):((iTempPerm92)?(3340 - (440 * fTempPerm107)):2900)):((iTempPerm91)?(fTempPerm109 + 2900):2950)):((iTempPerm90)?((400 * fTempPerm110) + 2950):3350)):((iTempPerm89)?(3350 - fTempPerm154):3300)):((iTempPerm88)?((290 * fTempPerm112) + 3300):3590)):((iTempPerm87)?(3590 - (290 * fTempPerm113)):3300)):((iTempPerm86)?((100 * fTempPerm114) + 3300):3400)):((iTempPerm85)?((1550 * fTempPerm115) + 3400):4950)):4950):4950):4950):4950):((iTempPerm80)?(4950 - (1700 * fTempPerm120)):3250)):((iTempPerm79)?((330 * fTempPerm121) + 3250):3580)):((iTempPerm78)?(3580 - (40 * fTempPerm122)):3540)):((iTempPerm77)?(3540 - (540 * fTempPerm123)):3000)):((iTempPerm124)?((300 * fTempPerm125) + 3000):3300))));
			fRec29[0] = (fTempPerm168 - floorf(fTempPerm168));
			fTempPerm169 = (fSlow0 * (fRec0[0] * (((((((fRec1[0] * ((iSlow22)?fTempPerm72:fTempPerm73)) * (1 - (fTempPerm71 + (fTempPerm70 * (1 - fTempPerm71))))) * ftbl0[int((65536 * fRec12[0]))]) + (((fRec14[0] * ((iSlow22)?(fTempPerm72 * fTempPerm140):(fTempPerm73 * fTempPerm140))) * (1 - (fTempPerm138 + (fTempPerm137 * (1 - fTempPerm138))))) * ftbl0[int((65536 * fRec17[0]))])) + (((fRec18[0] * ((iSlow22)?(fTempPerm72 * fTempPerm153):(fTempPerm73 * fTempPerm153))) * (1 - (fTempPerm151 + (fTempPerm150 * (1 - fTempPerm151))))) * ftbl0[int((65536 * fRec21[0]))])) + (((fRec22[0] * ((iSlow22)?(fTempPerm72 * fTempPerm161):(fTempPerm73 * fTempPerm161))) * (1 - (fTempPerm159 + (fTempPerm158 * (1 - fTempPerm159))))) * ftbl0[int((65536 * fRec25[0]))])) + (((fRec26[0] * ((iSlow22)?(fTempPerm72 * fTempPerm167):(fTempPerm73 * fTempPerm167))) * (1 - (fTempPerm166 + (fTempPerm165 * (1 - fTempPerm166))))) * ftbl0[int((65536 * fRec29[0]))]))));
			output0[i] = (FAUSTFLOAT)fTempPerm169;
			output1[i] = (FAUSTFLOAT)fTempPerm169;
			// post processing
			fRec29[1] = fRec29[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec28[1] = fRec28[0];
			fRec27[1] = fRec27[0];
			fRec25[1] = fRec25[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec24[1] = fRec24[0];
			fRec23[1] = fRec23[0];
			fRec21[1] = fRec21[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec20[1] = fRec20[0];
			fRec19[1] = fRec19[0];
			fRec17[1] = fRec17[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			fRec12[1] = fRec12[0];
			fRec13[1] = fRec13[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec10[1] = fRec10[0];
			fRec6[1] = fRec6[0];
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			iVec3[1] = iVec3[0];
			fRec2[1] = fRec2[0];
			fVec2[1] = fVec2[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			fRec3[1] = fRec3[0];
			fRec0[1] = fRec0[0];
			fVec1[1] = fVec1[0];
			iVec0[1] = iVec0[0];
		}
	}
};


float 	mydsp::ftbl0[65536];
