//----------------------------------------------------------
// name: "violin2"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iRec10[2];
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fRec26[2];
	float 	fTempPerm0;
	float 	fTempPerm1;
	float 	fTempPerm2;
	int 	iTempPerm3;
	int 	iTempPerm4;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fTempPerm13;
	float 	fTempPerm14;
	int 	iTempPerm15;
	float 	fTempPerm16;
	float 	fTempPerm17;
	int 	iTempPerm18;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	int 	iTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	int 	iTempPerm26;
	float 	fRec22[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fRec28[2];
	float 	fRec27[2];
	float 	fRec29[4];
	int 	IOTA;
	float 	fRec30[2048];
	float 	fConst6;
	float 	fTempPerm27;
	float 	fTempPerm28;
	int 	iTempPerm29;
	int 	iTempPerm30;
	float 	fTempPerm31;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	int 	iTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	int 	iTempPerm44;
	float 	fTempPerm45;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	int 	iTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	int 	iTempPerm52;
	float 	fVec0[2];
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fVec1[2048];
	float 	fRec18[2048];
	float 	fRec20[2];
	float 	fRec16[4];
	float 	fConst7;
	float 	fConst8;
	float 	fRec14[3];
	float 	fConst9;
	float 	fTempPerm56;
	int 	iRec6[2];
	float 	fRec2[2048];
	float 	fRec0[2];
	int 	iRec42[2];
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fRec58[2];
	float 	fTempPerm57;
	float 	fTempPerm58;
	float 	fTempPerm59;
	int 	iTempPerm60;
	int 	iTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	float 	fTempPerm68;
	float 	fTempPerm69;
	float 	fTempPerm70;
	float 	fTempPerm71;
	int 	iTempPerm72;
	float 	fTempPerm73;
	float 	fTempPerm74;
	int 	iTempPerm75;
	float 	fTempPerm76;
	float 	fTempPerm77;
	float 	fTempPerm78;
	float 	fTempPerm79;
	int 	iTempPerm80;
	float 	fTempPerm81;
	float 	fTempPerm82;
	int 	iTempPerm83;
	float 	fRec54[2];
	FAUSTFLOAT 	fslider6;
	float 	fRec59[4];
	float 	fRec60[2048];
	float 	fTempPerm84;
	float 	fTempPerm85;
	int 	iTempPerm86;
	int 	iTempPerm87;
	float 	fTempPerm88;
	float 	fTempPerm89;
	float 	fTempPerm90;
	float 	fTempPerm91;
	float 	fTempPerm92;
	float 	fTempPerm93;
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fTempPerm96;
	float 	fTempPerm97;
	int 	iTempPerm98;
	float 	fTempPerm99;
	float 	fTempPerm100;
	int 	iTempPerm101;
	float 	fTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	float 	fTempPerm105;
	int 	iTempPerm106;
	float 	fTempPerm107;
	float 	fTempPerm108;
	int 	iTempPerm109;
	float 	fVec2[2];
	float 	fTempPerm110;
	float 	fTempPerm111;
	float 	fTempPerm112;
	float 	fVec3[2048];
	float 	fRec50[2048];
	float 	fRec52[2];
	float 	fRec48[4];
	float 	fRec46[3];
	float 	fTempPerm113;
	int 	iRec38[2];
	float 	fRec34[2048];
	float 	fRec32[2];
	int 	iRec72[2];
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fRec88[2];
	float 	fTempPerm114;
	float 	fTempPerm115;
	float 	fTempPerm116;
	int 	iTempPerm117;
	int 	iTempPerm118;
	float 	fTempPerm119;
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	float 	fTempPerm124;
	float 	fTempPerm125;
	float 	fTempPerm126;
	float 	fTempPerm127;
	float 	fTempPerm128;
	int 	iTempPerm129;
	float 	fTempPerm130;
	float 	fTempPerm131;
	int 	iTempPerm132;
	float 	fTempPerm133;
	float 	fTempPerm134;
	float 	fTempPerm135;
	float 	fTempPerm136;
	int 	iTempPerm137;
	float 	fTempPerm138;
	float 	fTempPerm139;
	int 	iTempPerm140;
	float 	fRec84[2];
	FAUSTFLOAT 	fslider9;
	float 	fRec89[4];
	float 	fRec90[2048];
	float 	fTempPerm141;
	float 	fTempPerm142;
	int 	iTempPerm143;
	int 	iTempPerm144;
	float 	fTempPerm145;
	float 	fTempPerm146;
	float 	fTempPerm147;
	float 	fTempPerm148;
	float 	fTempPerm149;
	float 	fTempPerm150;
	float 	fTempPerm151;
	float 	fTempPerm152;
	float 	fTempPerm153;
	float 	fTempPerm154;
	int 	iTempPerm155;
	float 	fTempPerm156;
	float 	fTempPerm157;
	int 	iTempPerm158;
	float 	fTempPerm159;
	float 	fTempPerm160;
	float 	fTempPerm161;
	float 	fTempPerm162;
	int 	iTempPerm163;
	float 	fTempPerm164;
	float 	fTempPerm165;
	int 	iTempPerm166;
	float 	fVec4[2];
	float 	fTempPerm167;
	float 	fTempPerm168;
	float 	fTempPerm169;
	float 	fVec5[2048];
	float 	fRec80[2048];
	float 	fRec82[2];
	float 	fRec78[4];
	float 	fRec76[3];
	float 	fTempPerm170;
	int 	iRec68[2];
	float 	fRec64[2048];
	float 	fRec62[2];
	int 	iRec102[2];
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fRec118[2];
	float 	fTempPerm171;
	float 	fTempPerm172;
	float 	fTempPerm173;
	int 	iTempPerm174;
	int 	iTempPerm175;
	float 	fTempPerm176;
	float 	fTempPerm177;
	float 	fTempPerm178;
	float 	fTempPerm179;
	float 	fTempPerm180;
	float 	fTempPerm181;
	float 	fTempPerm182;
	float 	fTempPerm183;
	float 	fTempPerm184;
	float 	fTempPerm185;
	int 	iTempPerm186;
	float 	fTempPerm187;
	float 	fTempPerm188;
	int 	iTempPerm189;
	float 	fTempPerm190;
	float 	fTempPerm191;
	float 	fTempPerm192;
	float 	fTempPerm193;
	int 	iTempPerm194;
	float 	fTempPerm195;
	float 	fTempPerm196;
	int 	iTempPerm197;
	float 	fRec114[2];
	FAUSTFLOAT 	fslider12;
	float 	fRec119[4];
	float 	fRec120[2048];
	float 	fTempPerm198;
	float 	fTempPerm199;
	int 	iTempPerm200;
	int 	iTempPerm201;
	float 	fTempPerm202;
	float 	fTempPerm203;
	float 	fTempPerm204;
	float 	fTempPerm205;
	float 	fTempPerm206;
	float 	fTempPerm207;
	float 	fTempPerm208;
	float 	fTempPerm209;
	float 	fTempPerm210;
	float 	fTempPerm211;
	int 	iTempPerm212;
	float 	fTempPerm213;
	float 	fTempPerm214;
	int 	iTempPerm215;
	float 	fTempPerm216;
	float 	fTempPerm217;
	float 	fTempPerm218;
	float 	fTempPerm219;
	int 	iTempPerm220;
	float 	fTempPerm221;
	float 	fTempPerm222;
	int 	iTempPerm223;
	float 	fVec6[2];
	float 	fTempPerm224;
	float 	fTempPerm225;
	float 	fTempPerm226;
	float 	fVec7[2048];
	float 	fRec110[2048];
	float 	fRec112[2];
	float 	fRec108[4];
	float 	fRec106[3];
	float 	fTempPerm227;
	int 	iRec98[2];
	float 	fRec94[2048];
	float 	fRec92[2];
	float 	fTempPerm228;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("interface", "SmartKeyboard{  'Number of Keyboards':'4',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Send Fingers Count':'1',  'Keyboard 0 - Number of Keys':'12',  'Keyboard 1 - Number of Keys':'12',  'Keyboard 2 - Number of Keys':'12',  'Keyboard 3 - Number of Keys':'12',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 0 - Send Y':'1',  'Keyboard 1 - Send Y':'1',  'Keyboard 2 - Send Y':'1',  'Keyboard 3 - Send Y':'1' }");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "violin2");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = tanf((1570.7963267948965f / fConst0));
		fConst2 = (1.0f / fConst1);
		fConst3 = (1.0f / (((fConst2 + 0.5f) / fConst1) + 1));
		fConst4 = (0.0088235294117647058f * fConst0);
		fConst5 = (0.00044117647058823536f * fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		iTempPerm3 = 0;
		iTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		iTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		iTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		iTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		iTempPerm26 = 0;
		fConst6 = (0.0010294117647058822f * fConst0);
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		iTempPerm29 = 0;
		iTempPerm30 = 0;
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		iTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		iTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		iTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		iTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fConst7 = (((fConst2 + -0.5f) / fConst1) + 1);
		fConst8 = (2 * (1 - (1.0f / faustpower<2>(fConst1))));
		fConst9 = (0 - fConst2);
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		iTempPerm60 = 0;
		iTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fTempPerm71 = 0;
		iTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		iTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		iTempPerm80 = 0;
		fTempPerm81 = 0;
		fTempPerm82 = 0;
		iTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		iTempPerm86 = 0;
		iTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		iTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		iTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		iTempPerm106 = 0;
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		iTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		iTempPerm117 = 0;
		iTempPerm118 = 0;
		fTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		iTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		iTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		iTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		iTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		iTempPerm143 = 0;
		iTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		iTempPerm155 = 0;
		fTempPerm156 = 0;
		fTempPerm157 = 0;
		iTempPerm158 = 0;
		fTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		iTempPerm163 = 0;
		fTempPerm164 = 0;
		fTempPerm165 = 0;
		iTempPerm166 = 0;
		fTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		iTempPerm174 = 0;
		iTempPerm175 = 0;
		fTempPerm176 = 0;
		fTempPerm177 = 0;
		fTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		fTempPerm181 = 0;
		fTempPerm182 = 0;
		fTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		iTempPerm186 = 0;
		fTempPerm187 = 0;
		fTempPerm188 = 0;
		iTempPerm189 = 0;
		fTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		fTempPerm193 = 0;
		iTempPerm194 = 0;
		fTempPerm195 = 0;
		fTempPerm196 = 0;
		iTempPerm197 = 0;
		fTempPerm198 = 0;
		fTempPerm199 = 0;
		iTempPerm200 = 0;
		iTempPerm201 = 0;
		fTempPerm202 = 0;
		fTempPerm203 = 0;
		fTempPerm204 = 0;
		fTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		fTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		iTempPerm212 = 0;
		fTempPerm213 = 0;
		fTempPerm214 = 0;
		iTempPerm215 = 0;
		fTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		fTempPerm219 = 0;
		iTempPerm220 = 0;
		fTempPerm221 = 0;
		fTempPerm222 = 0;
		iTempPerm223 = 0;
		fTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		fTempPerm228 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 220.0f;
		fslider1 = 1.0f;
		fslider2 = 0.0f;
		fslider3 = 0.0f;
		fslider4 = 330.0f;
		fslider5 = 1.0f;
		fslider6 = 0.0f;
		fslider7 = 440.0f;
		fslider8 = 1.0f;
		fslider9 = 0.0f;
		fslider10 = 550.0f;
		fslider11 = 1.0f;
		fslider12 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iRec10[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<4; i++) fRec29[i] = 0;
		IOTA = 0;
		for (int i=0; i<2048; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2048; i++) fVec1[i] = 0;
		for (int i=0; i<2048; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<4; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<2048; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec42[i] = 0;
		for (int i=0; i<2; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fRec54[i] = 0;
		for (int i=0; i<4; i++) fRec59[i] = 0;
		for (int i=0; i<2048; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		for (int i=0; i<2048; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<4; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) iRec38[i] = 0;
		for (int i=0; i<2048; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) iRec72[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<4; i++) fRec89[i] = 0;
		for (int i=0; i<2048; i++) fRec90[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		for (int i=0; i<2048; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<4; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) iRec68[i] = 0;
		for (int i=0; i<2048; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) iRec102[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
		for (int i=0; i<2; i++) fRec114[i] = 0;
		for (int i=0; i<4; i++) fRec119[i] = 0;
		for (int i=0; i<2048; i++) fRec120[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2048; i++) fVec7[i] = 0;
		for (int i=0; i<2048; i++) fRec110[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<4; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<2; i++) iRec98[i] = 0;
		for (int i=0; i<2048; i++) fRec94[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("violin2");
		ui_interface->addHorizontalSlider("kb0bend", &fslider1, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb0fingers", &fslider2, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb0freq", &fslider0, 220.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1bend", &fslider5, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1fingers", &fslider6, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb1freq", &fslider4, 330.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2bend", &fslider8, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2fingers", &fslider9, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb2freq", &fslider7, 440.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3bend", &fslider11, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3fingers", &fslider12, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb3freq", &fslider10, 550.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("y", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.3400000000000003f / (float(fslider0) * float(fslider1)));
		int 	iSlow1 = (int(float(fslider2)) > 0);
		float 	fSlow2 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow3 = (0.3400000000000003f / (float(fslider4) * float(fslider5)));
		int 	iSlow4 = (int(float(fslider6)) > 0);
		float 	fSlow5 = (0.3400000000000003f / (float(fslider7) * float(fslider8)));
		int 	iSlow6 = (int(float(fslider9)) > 0);
		float 	fSlow7 = (0.3400000000000003f / (float(fslider10) * float(fslider11)));
		int 	iSlow8 = (int(float(fslider12)) > 0);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iRec10[0] = 0;
			int 	iRec11 = iRec10[1];
			float 	fRec15 = (iRec6[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec16[2]) + (0.20000000000000001f * (fRec16[1] + fRec16[3])))));
			fRec26[0] = (fSlow0 + (0.999f * fRec26[1]));
			fTempPerm0 = (fRec26[0] + -0.080000000000000002f);
			fTempPerm1 = (fConst5 * fTempPerm0);
			fTempPerm2 = (fTempPerm1 + -1.499995f);
			iTempPerm3 = int(fTempPerm2);
			iTempPerm4 = int(min(fConst4, (float)max(0, iTempPerm3)));
			fTempPerm5 = floorf(fTempPerm2);
			fTempPerm6 = (fTempPerm1 + (-1 - fTempPerm5));
			fTempPerm7 = (0 - fTempPerm6);
			fTempPerm8 = (fTempPerm1 + (-2 - fTempPerm5));
			fTempPerm9 = (0 - (0.5f * fTempPerm8));
			fTempPerm10 = (fTempPerm1 + (-3 - fTempPerm5));
			fTempPerm11 = (0 - (0.33333333333333331f * fTempPerm10));
			fTempPerm12 = (fTempPerm1 + (-4 - fTempPerm5));
			fTempPerm13 = (0 - (0.25f * fTempPerm12));
			fTempPerm14 = (fTempPerm1 - fTempPerm5);
			iTempPerm15 = int(min(fConst4, (float)max(0, (iTempPerm3 + 2))));
			fTempPerm16 = (0 - fTempPerm10);
			fTempPerm17 = (0 - (0.5f * fTempPerm12));
			iTempPerm18 = int(min(fConst4, (float)max(0, (iTempPerm3 + 1))));
			fTempPerm19 = (0 - fTempPerm8);
			fTempPerm20 = (0 - (0.5f * fTempPerm10));
			fTempPerm21 = (0 - (0.33333333333333331f * fTempPerm12));
			fTempPerm22 = (fTempPerm6 * fTempPerm8);
			iTempPerm23 = int(min(fConst4, (float)max(0, (iTempPerm3 + 3))));
			fTempPerm24 = (0 - fTempPerm12);
			fTempPerm25 = (fTempPerm22 * fTempPerm10);
			iTempPerm26 = int(min(fConst4, (float)max(0, (iTempPerm3 + 4))));
			fRec22[0] = (((((fRec2[(IOTA-int((iTempPerm4 + 1)))&2047] * fTempPerm7) * fTempPerm9) * fTempPerm11) * fTempPerm13) + (fTempPerm14 * ((((0.5f * (((fTempPerm6 * fRec2[(IOTA-int((iTempPerm15 + 1)))&2047]) * fTempPerm16) * fTempPerm17)) + (((fRec2[(IOTA-int((iTempPerm18 + 1)))&2047] * fTempPerm19) * fTempPerm20) * fTempPerm21)) + (0.16666666666666666f * ((fTempPerm22 * fRec2[(IOTA-int((iTempPerm23 + 1)))&2047]) * fTempPerm24))) + (0.041666666666666664f * (fTempPerm25 * fRec2[(IOTA-int((iTempPerm26 + 1)))&2047])))));
			fRec28[0] = (fSlow2 + (0.999f * fRec28[1]));
			fRec27[0] = ((0.999f * fRec27[1]) + (0.0010000000000000009f * min((float)1, (3000 * fabsf((fRec28[0] - fRec28[1]))))));
			fRec29[0] = fRec0[1];
			fRec30[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec29[2]) + (0.10000000000000001f * (fRec29[1] + fRec29[3])))));
			int 	iRec31 = 0;
			fTempPerm27 = (fConst6 * fTempPerm0);
			fTempPerm28 = (fTempPerm27 + -1.499995f);
			iTempPerm29 = int(fTempPerm28);
			iTempPerm30 = int(min(fConst4, (float)max(0, iTempPerm29)));
			fTempPerm31 = floorf(fTempPerm28);
			fTempPerm32 = (fTempPerm27 + (-1 - fTempPerm31));
			fTempPerm33 = (0 - fTempPerm32);
			fTempPerm34 = (fTempPerm27 + (-2 - fTempPerm31));
			fTempPerm35 = (0 - (0.5f * fTempPerm34));
			fTempPerm36 = (fTempPerm27 + (-3 - fTempPerm31));
			fTempPerm37 = (0 - (0.33333333333333331f * fTempPerm36));
			fTempPerm38 = (fTempPerm27 + (-4 - fTempPerm31));
			fTempPerm39 = (0 - (0.25f * fTempPerm38));
			fTempPerm40 = (fTempPerm27 - fTempPerm31);
			iTempPerm41 = int(min(fConst4, (float)max(0, (iTempPerm29 + 2))));
			fTempPerm42 = (0 - fTempPerm36);
			fTempPerm43 = (0 - (0.5f * fTempPerm38));
			iTempPerm44 = int(min(fConst4, (float)max(0, (iTempPerm29 + 1))));
			fTempPerm45 = (0 - fTempPerm34);
			fTempPerm46 = (0 - (0.5f * fTempPerm36));
			fTempPerm47 = (0 - (0.33333333333333331f * fTempPerm38));
			fTempPerm48 = (fTempPerm32 * fTempPerm34);
			iTempPerm49 = int(min(fConst4, (float)max(0, (iTempPerm29 + 3))));
			fTempPerm50 = (0 - fTempPerm38);
			fTempPerm51 = (fTempPerm48 * fTempPerm36);
			iTempPerm52 = int(min(fConst4, (float)max(0, (iTempPerm29 + 4))));
			fVec0[0] = (((((fRec30[(IOTA-int((iTempPerm30 + 2)))&2047] * fTempPerm33) * fTempPerm35) * fTempPerm37) * fTempPerm39) + (fTempPerm40 * ((((0.5f * (((fTempPerm32 * fRec30[(IOTA-int((iTempPerm41 + 2)))&2047]) * fTempPerm42) * fTempPerm43)) + (((fRec30[(IOTA-int((iTempPerm44 + 2)))&2047] * fTempPerm45) * fTempPerm46) * fTempPerm47)) + (0.16666666666666666f * ((fTempPerm48 * fRec30[(IOTA-int((iTempPerm49 + 2)))&2047]) * fTempPerm50))) + (0.041666666666666664f * (fTempPerm51 * fRec30[(IOTA-int((iTempPerm52 + 2)))&2047])))));
			fTempPerm53 = ((iSlow1 * fRec27[0]) - (fRec22[1] + fVec0[1]));
			fTempPerm54 = (fTempPerm53 * min((float)1, (1.0f / faustpower<4>((fabsf((3.0f * fTempPerm53)) + 0.75f)))));
			float 	fRec23 = (fRec22[1] + fTempPerm54);
			fTempPerm55 = (fVec0[1] + fTempPerm54);
			fVec1[IOTA&2047] = fTempPerm55;
			float 	fRec24 = (((((fTempPerm7 * fTempPerm9) * fTempPerm11) * fTempPerm13) * fVec1[(IOTA-iTempPerm4)&2047]) + (fTempPerm14 * ((0.041666666666666664f * (fTempPerm25 * fVec1[(IOTA-iTempPerm26)&2047])) + (((((fTempPerm19 * fTempPerm20) * fTempPerm21) * fVec1[(IOTA-iTempPerm18)&2047]) + (0.5f * (((fTempPerm6 * fTempPerm16) * fTempPerm17) * fVec1[(IOTA-iTempPerm15)&2047]))) + (0.16666666666666666f * ((fTempPerm22 * fTempPerm24) * fVec1[(IOTA-iTempPerm23)&2047]))))));
			int 	iRec25 = iRec31;
			fRec18[IOTA&2047] = fRec23;
			float 	fRec19 = (((((fTempPerm33 * fTempPerm35) * fTempPerm37) * fTempPerm39) * fRec18[(IOTA-int((iTempPerm30 + 1)))&2047]) + (fTempPerm40 * (((0.16666666666666666f * ((fTempPerm48 * fTempPerm50) * fRec18[(IOTA-int((iTempPerm49 + 1)))&2047])) + ((((fTempPerm45 * fTempPerm46) * fTempPerm47) * fRec18[(IOTA-int((iTempPerm44 + 1)))&2047]) + (0.5f * (((fTempPerm32 * fTempPerm42) * fTempPerm43) * fRec18[(IOTA-int((iTempPerm41 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm51 * fRec18[(IOTA-int((iTempPerm52 + 1)))&2047])))));
			fRec20[0] = fRec24;
			int 	iRec21 = iRec25;
			fRec16[0] = fRec20[1];
			int 	iRec17 = iRec21;
			fRec14[0] = (fRec16[1] - (fConst3 * ((fConst7 * fRec14[2]) + (fConst8 * fRec14[1]))));
			fTempPerm56 = (fConst3 * ((fConst2 * fRec14[0]) + (fConst9 * fRec14[2])));
			float 	fRec12 = fTempPerm56;
			float 	fRec13 = (iRec17 + fTempPerm56);
			iRec6[0] = iRec11;
			float 	fRec7 = fRec15;
			float 	fRec8 = fRec12;
			float 	fRec9 = fRec13;
			fRec2[IOTA&2047] = fRec7;
			float 	fRec3 = fRec19;
			float 	fRec4 = fRec8;
			float 	fRec5 = fRec9;
			fRec0[0] = fRec3;
			float 	fRec1 = fRec5;
			iRec42[0] = 0;
			int 	iRec43 = iRec42[1];
			float 	fRec47 = (iRec38[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec48[2]) + (0.20000000000000001f * (fRec48[1] + fRec48[3])))));
			fRec58[0] = (fSlow3 + (0.999f * fRec58[1]));
			fTempPerm57 = (fRec58[0] + -0.080000000000000002f);
			fTempPerm58 = (fConst5 * fTempPerm57);
			fTempPerm59 = (fTempPerm58 + -1.499995f);
			iTempPerm60 = int(fTempPerm59);
			iTempPerm61 = int(min(fConst4, (float)max(0, iTempPerm60)));
			fTempPerm62 = floorf(fTempPerm59);
			fTempPerm63 = (fTempPerm58 + (-1 - fTempPerm62));
			fTempPerm64 = (0 - fTempPerm63);
			fTempPerm65 = (fTempPerm58 + (-2 - fTempPerm62));
			fTempPerm66 = (0 - (0.5f * fTempPerm65));
			fTempPerm67 = (fTempPerm58 + (-3 - fTempPerm62));
			fTempPerm68 = (0 - (0.33333333333333331f * fTempPerm67));
			fTempPerm69 = (fTempPerm58 + (-4 - fTempPerm62));
			fTempPerm70 = (0 - (0.25f * fTempPerm69));
			fTempPerm71 = (fTempPerm58 - fTempPerm62);
			iTempPerm72 = int(min(fConst4, (float)max(0, (iTempPerm60 + 2))));
			fTempPerm73 = (0 - fTempPerm67);
			fTempPerm74 = (0 - (0.5f * fTempPerm69));
			iTempPerm75 = int(min(fConst4, (float)max(0, (iTempPerm60 + 1))));
			fTempPerm76 = (0 - fTempPerm65);
			fTempPerm77 = (0 - (0.5f * fTempPerm67));
			fTempPerm78 = (0 - (0.33333333333333331f * fTempPerm69));
			fTempPerm79 = (fTempPerm63 * fTempPerm65);
			iTempPerm80 = int(min(fConst4, (float)max(0, (iTempPerm60 + 3))));
			fTempPerm81 = (0 - fTempPerm69);
			fTempPerm82 = (fTempPerm79 * fTempPerm67);
			iTempPerm83 = int(min(fConst4, (float)max(0, (iTempPerm60 + 4))));
			fRec54[0] = (((((fRec34[(IOTA-int((iTempPerm61 + 1)))&2047] * fTempPerm64) * fTempPerm66) * fTempPerm68) * fTempPerm70) + (fTempPerm71 * ((((0.5f * (((fTempPerm63 * fRec34[(IOTA-int((iTempPerm72 + 1)))&2047]) * fTempPerm73) * fTempPerm74)) + (((fRec34[(IOTA-int((iTempPerm75 + 1)))&2047] * fTempPerm76) * fTempPerm77) * fTempPerm78)) + (0.16666666666666666f * ((fTempPerm79 * fRec34[(IOTA-int((iTempPerm80 + 1)))&2047]) * fTempPerm81))) + (0.041666666666666664f * (fTempPerm82 * fRec34[(IOTA-int((iTempPerm83 + 1)))&2047])))));
			fRec59[0] = fRec32[1];
			fRec60[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec59[2]) + (0.10000000000000001f * (fRec59[1] + fRec59[3])))));
			int 	iRec61 = 0;
			fTempPerm84 = (fConst6 * fTempPerm57);
			fTempPerm85 = (fTempPerm84 + -1.499995f);
			iTempPerm86 = int(fTempPerm85);
			iTempPerm87 = int(min(fConst4, (float)max(0, iTempPerm86)));
			fTempPerm88 = floorf(fTempPerm85);
			fTempPerm89 = (fTempPerm84 + (-1 - fTempPerm88));
			fTempPerm90 = (0 - fTempPerm89);
			fTempPerm91 = (fTempPerm84 + (-2 - fTempPerm88));
			fTempPerm92 = (0 - (0.5f * fTempPerm91));
			fTempPerm93 = (fTempPerm84 + (-3 - fTempPerm88));
			fTempPerm94 = (0 - (0.33333333333333331f * fTempPerm93));
			fTempPerm95 = (fTempPerm84 + (-4 - fTempPerm88));
			fTempPerm96 = (0 - (0.25f * fTempPerm95));
			fTempPerm97 = (fTempPerm84 - fTempPerm88);
			iTempPerm98 = int(min(fConst4, (float)max(0, (iTempPerm86 + 2))));
			fTempPerm99 = (0 - fTempPerm93);
			fTempPerm100 = (0 - (0.5f * fTempPerm95));
			iTempPerm101 = int(min(fConst4, (float)max(0, (iTempPerm86 + 1))));
			fTempPerm102 = (0 - fTempPerm91);
			fTempPerm103 = (0 - (0.5f * fTempPerm93));
			fTempPerm104 = (0 - (0.33333333333333331f * fTempPerm95));
			fTempPerm105 = (fTempPerm89 * fTempPerm91);
			iTempPerm106 = int(min(fConst4, (float)max(0, (iTempPerm86 + 3))));
			fTempPerm107 = (0 - fTempPerm95);
			fTempPerm108 = (fTempPerm105 * fTempPerm93);
			iTempPerm109 = int(min(fConst4, (float)max(0, (iTempPerm86 + 4))));
			fVec2[0] = (((((fRec60[(IOTA-int((iTempPerm87 + 2)))&2047] * fTempPerm90) * fTempPerm92) * fTempPerm94) * fTempPerm96) + (fTempPerm97 * ((((0.5f * (((fTempPerm89 * fRec60[(IOTA-int((iTempPerm98 + 2)))&2047]) * fTempPerm99) * fTempPerm100)) + (((fRec60[(IOTA-int((iTempPerm101 + 2)))&2047] * fTempPerm102) * fTempPerm103) * fTempPerm104)) + (0.16666666666666666f * ((fTempPerm105 * fRec60[(IOTA-int((iTempPerm106 + 2)))&2047]) * fTempPerm107))) + (0.041666666666666664f * (fTempPerm108 * fRec60[(IOTA-int((iTempPerm109 + 2)))&2047])))));
			fTempPerm110 = ((iSlow4 * fRec27[0]) - (fRec54[1] + fVec2[1]));
			fTempPerm111 = (fTempPerm110 * min((float)1, (1.0f / faustpower<4>((fabsf((3.0f * fTempPerm110)) + 0.75f)))));
			float 	fRec55 = (fRec54[1] + fTempPerm111);
			fTempPerm112 = (fVec2[1] + fTempPerm111);
			fVec3[IOTA&2047] = fTempPerm112;
			float 	fRec56 = (((((fTempPerm64 * fTempPerm66) * fTempPerm68) * fTempPerm70) * fVec3[(IOTA-iTempPerm61)&2047]) + (fTempPerm71 * ((0.041666666666666664f * (fTempPerm82 * fVec3[(IOTA-iTempPerm83)&2047])) + (((((fTempPerm76 * fTempPerm77) * fTempPerm78) * fVec3[(IOTA-iTempPerm75)&2047]) + (0.5f * (((fTempPerm63 * fTempPerm73) * fTempPerm74) * fVec3[(IOTA-iTempPerm72)&2047]))) + (0.16666666666666666f * ((fTempPerm79 * fTempPerm81) * fVec3[(IOTA-iTempPerm80)&2047]))))));
			int 	iRec57 = iRec61;
			fRec50[IOTA&2047] = fRec55;
			float 	fRec51 = (((((fTempPerm90 * fTempPerm92) * fTempPerm94) * fTempPerm96) * fRec50[(IOTA-int((iTempPerm87 + 1)))&2047]) + (fTempPerm97 * (((0.16666666666666666f * ((fTempPerm105 * fTempPerm107) * fRec50[(IOTA-int((iTempPerm106 + 1)))&2047])) + ((((fTempPerm102 * fTempPerm103) * fTempPerm104) * fRec50[(IOTA-int((iTempPerm101 + 1)))&2047]) + (0.5f * (((fTempPerm89 * fTempPerm99) * fTempPerm100) * fRec50[(IOTA-int((iTempPerm98 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm108 * fRec50[(IOTA-int((iTempPerm109 + 1)))&2047])))));
			fRec52[0] = fRec56;
			int 	iRec53 = iRec57;
			fRec48[0] = fRec52[1];
			int 	iRec49 = iRec53;
			fRec46[0] = (fRec48[1] - (fConst3 * ((fConst8 * fRec46[1]) + (fConst7 * fRec46[2]))));
			fTempPerm113 = (fConst3 * ((fConst2 * fRec46[0]) + (fConst9 * fRec46[2])));
			float 	fRec44 = fTempPerm113;
			float 	fRec45 = (iRec49 + fTempPerm113);
			iRec38[0] = iRec43;
			float 	fRec39 = fRec47;
			float 	fRec40 = fRec44;
			float 	fRec41 = fRec45;
			fRec34[IOTA&2047] = fRec39;
			float 	fRec35 = fRec51;
			float 	fRec36 = fRec40;
			float 	fRec37 = fRec41;
			fRec32[0] = fRec35;
			float 	fRec33 = fRec37;
			iRec72[0] = 0;
			int 	iRec73 = iRec72[1];
			float 	fRec77 = (iRec68[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec78[2]) + (0.20000000000000001f * (fRec78[1] + fRec78[3])))));
			fRec88[0] = (fSlow5 + (0.999f * fRec88[1]));
			fTempPerm114 = (fRec88[0] + -0.080000000000000002f);
			fTempPerm115 = (fConst5 * fTempPerm114);
			fTempPerm116 = (fTempPerm115 + -1.499995f);
			iTempPerm117 = int(fTempPerm116);
			iTempPerm118 = int(min(fConst4, (float)max(0, iTempPerm117)));
			fTempPerm119 = floorf(fTempPerm116);
			fTempPerm120 = (fTempPerm115 + (-1 - fTempPerm119));
			fTempPerm121 = (0 - fTempPerm120);
			fTempPerm122 = (fTempPerm115 + (-2 - fTempPerm119));
			fTempPerm123 = (0 - (0.5f * fTempPerm122));
			fTempPerm124 = (fTempPerm115 + (-3 - fTempPerm119));
			fTempPerm125 = (0 - (0.33333333333333331f * fTempPerm124));
			fTempPerm126 = (fTempPerm115 + (-4 - fTempPerm119));
			fTempPerm127 = (0 - (0.25f * fTempPerm126));
			fTempPerm128 = (fTempPerm115 - fTempPerm119);
			iTempPerm129 = int(min(fConst4, (float)max(0, (iTempPerm117 + 2))));
			fTempPerm130 = (0 - fTempPerm124);
			fTempPerm131 = (0 - (0.5f * fTempPerm126));
			iTempPerm132 = int(min(fConst4, (float)max(0, (iTempPerm117 + 1))));
			fTempPerm133 = (0 - fTempPerm122);
			fTempPerm134 = (0 - (0.5f * fTempPerm124));
			fTempPerm135 = (0 - (0.33333333333333331f * fTempPerm126));
			fTempPerm136 = (fTempPerm120 * fTempPerm122);
			iTempPerm137 = int(min(fConst4, (float)max(0, (iTempPerm117 + 3))));
			fTempPerm138 = (0 - fTempPerm126);
			fTempPerm139 = (fTempPerm136 * fTempPerm124);
			iTempPerm140 = int(min(fConst4, (float)max(0, (iTempPerm117 + 4))));
			fRec84[0] = (((((fRec64[(IOTA-int((iTempPerm118 + 1)))&2047] * fTempPerm121) * fTempPerm123) * fTempPerm125) * fTempPerm127) + (fTempPerm128 * ((((0.5f * (((fTempPerm120 * fRec64[(IOTA-int((iTempPerm129 + 1)))&2047]) * fTempPerm130) * fTempPerm131)) + (((fRec64[(IOTA-int((iTempPerm132 + 1)))&2047] * fTempPerm133) * fTempPerm134) * fTempPerm135)) + (0.16666666666666666f * ((fTempPerm136 * fRec64[(IOTA-int((iTempPerm137 + 1)))&2047]) * fTempPerm138))) + (0.041666666666666664f * (fTempPerm139 * fRec64[(IOTA-int((iTempPerm140 + 1)))&2047])))));
			fRec89[0] = fRec62[1];
			fRec90[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec89[2]) + (0.10000000000000001f * (fRec89[1] + fRec89[3])))));
			int 	iRec91 = 0;
			fTempPerm141 = (fConst6 * fTempPerm114);
			fTempPerm142 = (fTempPerm141 + -1.499995f);
			iTempPerm143 = int(fTempPerm142);
			iTempPerm144 = int(min(fConst4, (float)max(0, iTempPerm143)));
			fTempPerm145 = floorf(fTempPerm142);
			fTempPerm146 = (fTempPerm141 + (-1 - fTempPerm145));
			fTempPerm147 = (0 - fTempPerm146);
			fTempPerm148 = (fTempPerm141 + (-2 - fTempPerm145));
			fTempPerm149 = (0 - (0.5f * fTempPerm148));
			fTempPerm150 = (fTempPerm141 + (-3 - fTempPerm145));
			fTempPerm151 = (0 - (0.33333333333333331f * fTempPerm150));
			fTempPerm152 = (fTempPerm141 + (-4 - fTempPerm145));
			fTempPerm153 = (0 - (0.25f * fTempPerm152));
			fTempPerm154 = (fTempPerm141 - fTempPerm145);
			iTempPerm155 = int(min(fConst4, (float)max(0, (iTempPerm143 + 2))));
			fTempPerm156 = (0 - fTempPerm150);
			fTempPerm157 = (0 - (0.5f * fTempPerm152));
			iTempPerm158 = int(min(fConst4, (float)max(0, (iTempPerm143 + 1))));
			fTempPerm159 = (0 - fTempPerm148);
			fTempPerm160 = (0 - (0.5f * fTempPerm150));
			fTempPerm161 = (0 - (0.33333333333333331f * fTempPerm152));
			fTempPerm162 = (fTempPerm146 * fTempPerm148);
			iTempPerm163 = int(min(fConst4, (float)max(0, (iTempPerm143 + 3))));
			fTempPerm164 = (0 - fTempPerm152);
			fTempPerm165 = (fTempPerm162 * fTempPerm150);
			iTempPerm166 = int(min(fConst4, (float)max(0, (iTempPerm143 + 4))));
			fVec4[0] = (((((fRec90[(IOTA-int((iTempPerm144 + 2)))&2047] * fTempPerm147) * fTempPerm149) * fTempPerm151) * fTempPerm153) + (fTempPerm154 * ((((0.5f * (((fTempPerm146 * fRec90[(IOTA-int((iTempPerm155 + 2)))&2047]) * fTempPerm156) * fTempPerm157)) + (((fRec90[(IOTA-int((iTempPerm158 + 2)))&2047] * fTempPerm159) * fTempPerm160) * fTempPerm161)) + (0.16666666666666666f * ((fTempPerm162 * fRec90[(IOTA-int((iTempPerm163 + 2)))&2047]) * fTempPerm164))) + (0.041666666666666664f * (fTempPerm165 * fRec90[(IOTA-int((iTempPerm166 + 2)))&2047])))));
			fTempPerm167 = ((iSlow6 * fRec27[0]) - (fRec84[1] + fVec4[1]));
			fTempPerm168 = (fTempPerm167 * min((float)1, (1.0f / faustpower<4>((fabsf((3.0f * fTempPerm167)) + 0.75f)))));
			float 	fRec85 = (fRec84[1] + fTempPerm168);
			fTempPerm169 = (fVec4[1] + fTempPerm168);
			fVec5[IOTA&2047] = fTempPerm169;
			float 	fRec86 = (((((fTempPerm121 * fTempPerm123) * fTempPerm125) * fTempPerm127) * fVec5[(IOTA-iTempPerm118)&2047]) + (fTempPerm128 * ((0.041666666666666664f * (fTempPerm139 * fVec5[(IOTA-iTempPerm140)&2047])) + (((((fTempPerm133 * fTempPerm134) * fTempPerm135) * fVec5[(IOTA-iTempPerm132)&2047]) + (0.5f * (((fTempPerm120 * fTempPerm130) * fTempPerm131) * fVec5[(IOTA-iTempPerm129)&2047]))) + (0.16666666666666666f * ((fTempPerm136 * fTempPerm138) * fVec5[(IOTA-iTempPerm137)&2047]))))));
			int 	iRec87 = iRec91;
			fRec80[IOTA&2047] = fRec85;
			float 	fRec81 = (((((fTempPerm147 * fTempPerm149) * fTempPerm151) * fTempPerm153) * fRec80[(IOTA-int((iTempPerm144 + 1)))&2047]) + (fTempPerm154 * (((0.16666666666666666f * ((fTempPerm162 * fTempPerm164) * fRec80[(IOTA-int((iTempPerm163 + 1)))&2047])) + ((((fTempPerm159 * fTempPerm160) * fTempPerm161) * fRec80[(IOTA-int((iTempPerm158 + 1)))&2047]) + (0.5f * (((fTempPerm146 * fTempPerm156) * fTempPerm157) * fRec80[(IOTA-int((iTempPerm155 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm165 * fRec80[(IOTA-int((iTempPerm166 + 1)))&2047])))));
			fRec82[0] = fRec86;
			int 	iRec83 = iRec87;
			fRec78[0] = fRec82[1];
			int 	iRec79 = iRec83;
			fRec76[0] = (fRec78[1] - (fConst3 * ((fConst8 * fRec76[1]) + (fConst7 * fRec76[2]))));
			fTempPerm170 = (fConst3 * ((fConst2 * fRec76[0]) + (fConst9 * fRec76[2])));
			float 	fRec74 = fTempPerm170;
			float 	fRec75 = (iRec79 + fTempPerm170);
			iRec68[0] = iRec73;
			float 	fRec69 = fRec77;
			float 	fRec70 = fRec74;
			float 	fRec71 = fRec75;
			fRec64[IOTA&2047] = fRec69;
			float 	fRec65 = fRec81;
			float 	fRec66 = fRec70;
			float 	fRec67 = fRec71;
			fRec62[0] = fRec65;
			float 	fRec63 = fRec67;
			iRec102[0] = 0;
			int 	iRec103 = iRec102[1];
			float 	fRec107 = (iRec98[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec108[2]) + (0.20000000000000001f * (fRec108[1] + fRec108[3])))));
			fRec118[0] = (fSlow7 + (0.999f * fRec118[1]));
			fTempPerm171 = (fRec118[0] + -0.080000000000000002f);
			fTempPerm172 = (fConst5 * fTempPerm171);
			fTempPerm173 = (fTempPerm172 + -1.499995f);
			iTempPerm174 = int(fTempPerm173);
			iTempPerm175 = int(min(fConst4, (float)max(0, iTempPerm174)));
			fTempPerm176 = floorf(fTempPerm173);
			fTempPerm177 = (fTempPerm172 + (-1 - fTempPerm176));
			fTempPerm178 = (0 - fTempPerm177);
			fTempPerm179 = (fTempPerm172 + (-2 - fTempPerm176));
			fTempPerm180 = (0 - (0.5f * fTempPerm179));
			fTempPerm181 = (fTempPerm172 + (-3 - fTempPerm176));
			fTempPerm182 = (0 - (0.33333333333333331f * fTempPerm181));
			fTempPerm183 = (fTempPerm172 + (-4 - fTempPerm176));
			fTempPerm184 = (0 - (0.25f * fTempPerm183));
			fTempPerm185 = (fTempPerm172 - fTempPerm176);
			iTempPerm186 = int(min(fConst4, (float)max(0, (iTempPerm174 + 2))));
			fTempPerm187 = (0 - fTempPerm181);
			fTempPerm188 = (0 - (0.5f * fTempPerm183));
			iTempPerm189 = int(min(fConst4, (float)max(0, (iTempPerm174 + 1))));
			fTempPerm190 = (0 - fTempPerm179);
			fTempPerm191 = (0 - (0.5f * fTempPerm181));
			fTempPerm192 = (0 - (0.33333333333333331f * fTempPerm183));
			fTempPerm193 = (fTempPerm177 * fTempPerm179);
			iTempPerm194 = int(min(fConst4, (float)max(0, (iTempPerm174 + 3))));
			fTempPerm195 = (0 - fTempPerm183);
			fTempPerm196 = (fTempPerm193 * fTempPerm181);
			iTempPerm197 = int(min(fConst4, (float)max(0, (iTempPerm174 + 4))));
			fRec114[0] = (((((fRec94[(IOTA-int((iTempPerm175 + 1)))&2047] * fTempPerm178) * fTempPerm180) * fTempPerm182) * fTempPerm184) + (fTempPerm185 * ((((0.5f * (((fTempPerm177 * fRec94[(IOTA-int((iTempPerm186 + 1)))&2047]) * fTempPerm187) * fTempPerm188)) + (((fRec94[(IOTA-int((iTempPerm189 + 1)))&2047] * fTempPerm190) * fTempPerm191) * fTempPerm192)) + (0.16666666666666666f * ((fTempPerm193 * fRec94[(IOTA-int((iTempPerm194 + 1)))&2047]) * fTempPerm195))) + (0.041666666666666664f * (fTempPerm196 * fRec94[(IOTA-int((iTempPerm197 + 1)))&2047])))));
			fRec119[0] = fRec92[1];
			fRec120[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec119[2]) + (0.10000000000000001f * (fRec119[1] + fRec119[3])))));
			int 	iRec121 = 0;
			fTempPerm198 = (fConst6 * fTempPerm171);
			fTempPerm199 = (fTempPerm198 + -1.499995f);
			iTempPerm200 = int(fTempPerm199);
			iTempPerm201 = int(min(fConst4, (float)max(0, iTempPerm200)));
			fTempPerm202 = floorf(fTempPerm199);
			fTempPerm203 = (fTempPerm198 + (-1 - fTempPerm202));
			fTempPerm204 = (0 - fTempPerm203);
			fTempPerm205 = (fTempPerm198 + (-2 - fTempPerm202));
			fTempPerm206 = (0 - (0.5f * fTempPerm205));
			fTempPerm207 = (fTempPerm198 + (-3 - fTempPerm202));
			fTempPerm208 = (0 - (0.33333333333333331f * fTempPerm207));
			fTempPerm209 = (fTempPerm198 + (-4 - fTempPerm202));
			fTempPerm210 = (0 - (0.25f * fTempPerm209));
			fTempPerm211 = (fTempPerm198 - fTempPerm202);
			iTempPerm212 = int(min(fConst4, (float)max(0, (iTempPerm200 + 2))));
			fTempPerm213 = (0 - fTempPerm207);
			fTempPerm214 = (0 - (0.5f * fTempPerm209));
			iTempPerm215 = int(min(fConst4, (float)max(0, (iTempPerm200 + 1))));
			fTempPerm216 = (0 - fTempPerm205);
			fTempPerm217 = (0 - (0.5f * fTempPerm207));
			fTempPerm218 = (0 - (0.33333333333333331f * fTempPerm209));
			fTempPerm219 = (fTempPerm203 * fTempPerm205);
			iTempPerm220 = int(min(fConst4, (float)max(0, (iTempPerm200 + 3))));
			fTempPerm221 = (0 - fTempPerm209);
			fTempPerm222 = (fTempPerm219 * fTempPerm207);
			iTempPerm223 = int(min(fConst4, (float)max(0, (iTempPerm200 + 4))));
			fVec6[0] = (((((fRec120[(IOTA-int((iTempPerm201 + 2)))&2047] * fTempPerm204) * fTempPerm206) * fTempPerm208) * fTempPerm210) + (fTempPerm211 * ((((0.5f * (((fTempPerm203 * fRec120[(IOTA-int((iTempPerm212 + 2)))&2047]) * fTempPerm213) * fTempPerm214)) + (((fRec120[(IOTA-int((iTempPerm215 + 2)))&2047] * fTempPerm216) * fTempPerm217) * fTempPerm218)) + (0.16666666666666666f * ((fTempPerm219 * fRec120[(IOTA-int((iTempPerm220 + 2)))&2047]) * fTempPerm221))) + (0.041666666666666664f * (fTempPerm222 * fRec120[(IOTA-int((iTempPerm223 + 2)))&2047])))));
			fTempPerm224 = ((iSlow8 * fRec27[0]) - (fRec114[1] + fVec6[1]));
			fTempPerm225 = (fTempPerm224 * min((float)1, (1.0f / faustpower<4>((fabsf((3.0f * fTempPerm224)) + 0.75f)))));
			float 	fRec115 = (fRec114[1] + fTempPerm225);
			fTempPerm226 = (fVec6[1] + fTempPerm225);
			fVec7[IOTA&2047] = fTempPerm226;
			float 	fRec116 = (((((fTempPerm178 * fTempPerm180) * fTempPerm182) * fTempPerm184) * fVec7[(IOTA-iTempPerm175)&2047]) + (fTempPerm185 * ((0.041666666666666664f * (fTempPerm196 * fVec7[(IOTA-iTempPerm197)&2047])) + (((((fTempPerm190 * fTempPerm191) * fTempPerm192) * fVec7[(IOTA-iTempPerm189)&2047]) + (0.5f * (((fTempPerm177 * fTempPerm187) * fTempPerm188) * fVec7[(IOTA-iTempPerm186)&2047]))) + (0.16666666666666666f * ((fTempPerm193 * fTempPerm195) * fVec7[(IOTA-iTempPerm194)&2047]))))));
			int 	iRec117 = iRec121;
			fRec110[IOTA&2047] = fRec115;
			float 	fRec111 = (((((fTempPerm204 * fTempPerm206) * fTempPerm208) * fTempPerm210) * fRec110[(IOTA-int((iTempPerm201 + 1)))&2047]) + (fTempPerm211 * (((0.16666666666666666f * ((fTempPerm219 * fTempPerm221) * fRec110[(IOTA-int((iTempPerm220 + 1)))&2047])) + ((((fTempPerm216 * fTempPerm217) * fTempPerm218) * fRec110[(IOTA-int((iTempPerm215 + 1)))&2047]) + (0.5f * (((fTempPerm203 * fTempPerm213) * fTempPerm214) * fRec110[(IOTA-int((iTempPerm212 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm222 * fRec110[(IOTA-int((iTempPerm223 + 1)))&2047])))));
			fRec112[0] = fRec116;
			int 	iRec113 = iRec117;
			fRec108[0] = fRec112[1];
			int 	iRec109 = iRec113;
			fRec106[0] = (fRec108[1] - (fConst3 * ((fConst8 * fRec106[1]) + (fConst7 * fRec106[2]))));
			fTempPerm227 = (fConst3 * ((fConst2 * fRec106[0]) + (fConst9 * fRec106[2])));
			float 	fRec104 = fTempPerm227;
			float 	fRec105 = (iRec109 + fTempPerm227);
			iRec98[0] = iRec103;
			float 	fRec99 = fRec107;
			float 	fRec100 = fRec104;
			float 	fRec101 = fRec105;
			fRec94[IOTA&2047] = fRec99;
			float 	fRec95 = fRec111;
			float 	fRec96 = fRec100;
			float 	fRec97 = fRec101;
			fRec92[0] = fRec95;
			float 	fRec93 = fRec97;
			fTempPerm228 = (((fRec1 + fRec33) + fRec63) + fRec93);
			output0[i] = (FAUSTFLOAT)fTempPerm228;
			output1[i] = (FAUSTFLOAT)fTempPerm228;
			// post processing
			fRec92[1] = fRec92[0];
			iRec98[1] = iRec98[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			for (int i=3; i>0; i--) fRec108[i] = fRec108[i-1];
			fRec112[1] = fRec112[0];
			fVec6[1] = fVec6[0];
			for (int i=3; i>0; i--) fRec119[i] = fRec119[i-1];
			fRec114[1] = fRec114[0];
			fRec118[1] = fRec118[0];
			iRec102[1] = iRec102[0];
			fRec62[1] = fRec62[0];
			iRec68[1] = iRec68[0];
			fRec76[2] = fRec76[1]; fRec76[1] = fRec76[0];
			for (int i=3; i>0; i--) fRec78[i] = fRec78[i-1];
			fRec82[1] = fRec82[0];
			fVec4[1] = fVec4[0];
			for (int i=3; i>0; i--) fRec89[i] = fRec89[i-1];
			fRec84[1] = fRec84[0];
			fRec88[1] = fRec88[0];
			iRec72[1] = iRec72[0];
			fRec32[1] = fRec32[0];
			iRec38[1] = iRec38[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			for (int i=3; i>0; i--) fRec48[i] = fRec48[i-1];
			fRec52[1] = fRec52[0];
			fVec2[1] = fVec2[0];
			for (int i=3; i>0; i--) fRec59[i] = fRec59[i-1];
			fRec54[1] = fRec54[0];
			fRec58[1] = fRec58[0];
			iRec42[1] = iRec42[0];
			fRec0[1] = fRec0[0];
			iRec6[1] = iRec6[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			for (int i=3; i>0; i--) fRec16[i] = fRec16[i-1];
			fRec20[1] = fRec20[0];
			fVec0[1] = fVec0[0];
			IOTA = IOTA+1;
			for (int i=3; i>0; i--) fRec29[i] = fRec29[i-1];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec22[1] = fRec22[0];
			fRec26[1] = fRec26[0];
			iRec10[1] = iRec10[0];
		}
	}
};


