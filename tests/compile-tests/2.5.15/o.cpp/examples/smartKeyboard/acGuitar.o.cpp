//----------------------------------------------------------
// name: "acGuitar"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iRec10[2];
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	FAUSTFLOAT 	fslider0;
	float 	fRec29[2];
	float 	fTempPerm0;
	FAUSTFLOAT 	fslider1;
	FAUSTFLOAT 	fslider2;
	float 	fRec30[2];
	float 	fTempPerm1;
	float 	fTempPerm2;
	float 	fTempPerm3;
	int 	iTempPerm4;
	int 	iTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	int 	iTempPerm16;
	float 	fTempPerm17;
	float 	fTempPerm18;
	int 	iTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	float 	fTempPerm23;
	int 	iTempPerm24;
	float 	fTempPerm25;
	float 	fTempPerm26;
	int 	iTempPerm27;
	float 	fRec25[2];
	float 	fRec31[2];
	float 	fRec33[4];
	int 	IOTA;
	float 	fRec34[2048];
	float 	fTempPerm28;
	float 	fTempPerm29;
	int 	iTempPerm30;
	int 	iTempPerm31;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	float 	fTempPerm41;
	int 	iTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	int 	iTempPerm45;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fTempPerm49;
	int 	iTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	int 	iTempPerm53;
	float 	fVec0[2];
	FAUSTFLOAT 	fslider3;
	int 	iVec1[2];
	int 	iTempPerm54;
	float 	fVec2[2];
	float 	fRec32[2048];
	float 	fRec21[2];
	float 	fRec17[2048];
	float 	fRec19[2];
	float 	fRec15[4];
	int 	iRec6[2];
	float 	fRec2[2048];
	float 	fRec0[2];
	int 	iRec46[2];
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fslider5;
	float 	fRec65[2];
	float 	fTempPerm55;
	float 	fTempPerm56;
	float 	fTempPerm57;
	int 	iTempPerm58;
	int 	iTempPerm59;
	float 	fTempPerm60;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	float 	fTempPerm68;
	float 	fTempPerm69;
	int 	iTempPerm70;
	float 	fTempPerm71;
	float 	fTempPerm72;
	int 	iTempPerm73;
	float 	fTempPerm74;
	float 	fTempPerm75;
	float 	fTempPerm76;
	float 	fTempPerm77;
	int 	iTempPerm78;
	float 	fTempPerm79;
	float 	fTempPerm80;
	int 	iTempPerm81;
	float 	fRec61[2];
	float 	fRec66[2];
	FAUSTFLOAT 	fslider6;
	int 	iVec3[2];
	int 	iTempPerm82;
	float 	fRec68[4];
	float 	fRec69[2048];
	float 	fTempPerm83;
	float 	fTempPerm84;
	int 	iTempPerm85;
	int 	iTempPerm86;
	float 	fTempPerm87;
	float 	fTempPerm88;
	float 	fTempPerm89;
	float 	fTempPerm90;
	float 	fTempPerm91;
	float 	fTempPerm92;
	float 	fTempPerm93;
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fTempPerm96;
	int 	iTempPerm97;
	float 	fTempPerm98;
	float 	fTempPerm99;
	int 	iTempPerm100;
	float 	fTempPerm101;
	float 	fTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	int 	iTempPerm105;
	float 	fTempPerm106;
	float 	fTempPerm107;
	int 	iTempPerm108;
	float 	fVec4[2];
	float 	fVec5[2];
	float 	fRec67[2048];
	float 	fRec57[2];
	float 	fRec53[2048];
	float 	fRec55[2];
	float 	fRec51[4];
	int 	iRec42[2];
	float 	fRec38[2048];
	float 	fRec36[2];
	int 	iRec81[2];
	FAUSTFLOAT 	fslider7;
	FAUSTFLOAT 	fslider8;
	float 	fRec100[2];
	float 	fTempPerm109;
	float 	fTempPerm110;
	float 	fTempPerm111;
	int 	iTempPerm112;
	int 	iTempPerm113;
	float 	fTempPerm114;
	float 	fTempPerm115;
	float 	fTempPerm116;
	float 	fTempPerm117;
	float 	fTempPerm118;
	float 	fTempPerm119;
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	int 	iTempPerm124;
	float 	fTempPerm125;
	float 	fTempPerm126;
	int 	iTempPerm127;
	float 	fTempPerm128;
	float 	fTempPerm129;
	float 	fTempPerm130;
	float 	fTempPerm131;
	int 	iTempPerm132;
	float 	fTempPerm133;
	float 	fTempPerm134;
	int 	iTempPerm135;
	float 	fRec96[2];
	float 	fRec101[2];
	FAUSTFLOAT 	fslider9;
	int 	iVec6[2];
	int 	iTempPerm136;
	float 	fRec103[4];
	float 	fRec104[2048];
	float 	fTempPerm137;
	float 	fTempPerm138;
	int 	iTempPerm139;
	int 	iTempPerm140;
	float 	fTempPerm141;
	float 	fTempPerm142;
	float 	fTempPerm143;
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fTempPerm146;
	float 	fTempPerm147;
	float 	fTempPerm148;
	float 	fTempPerm149;
	float 	fTempPerm150;
	int 	iTempPerm151;
	float 	fTempPerm152;
	float 	fTempPerm153;
	int 	iTempPerm154;
	float 	fTempPerm155;
	float 	fTempPerm156;
	float 	fTempPerm157;
	float 	fTempPerm158;
	int 	iTempPerm159;
	float 	fTempPerm160;
	float 	fTempPerm161;
	int 	iTempPerm162;
	float 	fVec7[2];
	float 	fVec8[2];
	float 	fRec102[2048];
	float 	fRec92[2];
	float 	fRec88[2048];
	float 	fRec90[2];
	float 	fRec86[4];
	int 	iRec77[2];
	float 	fRec73[2048];
	float 	fRec71[2];
	int 	iRec116[2];
	FAUSTFLOAT 	fslider10;
	FAUSTFLOAT 	fslider11;
	float 	fRec135[2];
	float 	fTempPerm163;
	float 	fTempPerm164;
	float 	fTempPerm165;
	int 	iTempPerm166;
	int 	iTempPerm167;
	float 	fTempPerm168;
	float 	fTempPerm169;
	float 	fTempPerm170;
	float 	fTempPerm171;
	float 	fTempPerm172;
	float 	fTempPerm173;
	float 	fTempPerm174;
	float 	fTempPerm175;
	float 	fTempPerm176;
	float 	fTempPerm177;
	int 	iTempPerm178;
	float 	fTempPerm179;
	float 	fTempPerm180;
	int 	iTempPerm181;
	float 	fTempPerm182;
	float 	fTempPerm183;
	float 	fTempPerm184;
	float 	fTempPerm185;
	int 	iTempPerm186;
	float 	fTempPerm187;
	float 	fTempPerm188;
	int 	iTempPerm189;
	float 	fRec131[2];
	float 	fRec136[2];
	FAUSTFLOAT 	fslider12;
	int 	iVec9[2];
	int 	iTempPerm190;
	float 	fRec138[4];
	float 	fRec139[2048];
	float 	fTempPerm191;
	float 	fTempPerm192;
	int 	iTempPerm193;
	int 	iTempPerm194;
	float 	fTempPerm195;
	float 	fTempPerm196;
	float 	fTempPerm197;
	float 	fTempPerm198;
	float 	fTempPerm199;
	float 	fTempPerm200;
	float 	fTempPerm201;
	float 	fTempPerm202;
	float 	fTempPerm203;
	float 	fTempPerm204;
	int 	iTempPerm205;
	float 	fTempPerm206;
	float 	fTempPerm207;
	int 	iTempPerm208;
	float 	fTempPerm209;
	float 	fTempPerm210;
	float 	fTempPerm211;
	float 	fTempPerm212;
	int 	iTempPerm213;
	float 	fTempPerm214;
	float 	fTempPerm215;
	int 	iTempPerm216;
	float 	fVec10[2];
	float 	fVec11[2];
	float 	fRec137[2048];
	float 	fRec127[2];
	float 	fRec123[2048];
	float 	fRec125[2];
	float 	fRec121[4];
	int 	iRec112[2];
	float 	fRec108[2048];
	float 	fRec106[2];
	int 	iRec151[2];
	FAUSTFLOAT 	fslider13;
	FAUSTFLOAT 	fslider14;
	float 	fRec170[2];
	float 	fTempPerm217;
	float 	fTempPerm218;
	float 	fTempPerm219;
	int 	iTempPerm220;
	int 	iTempPerm221;
	float 	fTempPerm222;
	float 	fTempPerm223;
	float 	fTempPerm224;
	float 	fTempPerm225;
	float 	fTempPerm226;
	float 	fTempPerm227;
	float 	fTempPerm228;
	float 	fTempPerm229;
	float 	fTempPerm230;
	float 	fTempPerm231;
	int 	iTempPerm232;
	float 	fTempPerm233;
	float 	fTempPerm234;
	int 	iTempPerm235;
	float 	fTempPerm236;
	float 	fTempPerm237;
	float 	fTempPerm238;
	float 	fTempPerm239;
	int 	iTempPerm240;
	float 	fTempPerm241;
	float 	fTempPerm242;
	int 	iTempPerm243;
	float 	fRec166[2];
	float 	fRec171[2];
	FAUSTFLOAT 	fslider15;
	int 	iVec12[2];
	int 	iTempPerm244;
	float 	fRec173[4];
	float 	fRec174[2048];
	float 	fTempPerm245;
	float 	fTempPerm246;
	int 	iTempPerm247;
	int 	iTempPerm248;
	float 	fTempPerm249;
	float 	fTempPerm250;
	float 	fTempPerm251;
	float 	fTempPerm252;
	float 	fTempPerm253;
	float 	fTempPerm254;
	float 	fTempPerm255;
	float 	fTempPerm256;
	float 	fTempPerm257;
	float 	fTempPerm258;
	int 	iTempPerm259;
	float 	fTempPerm260;
	float 	fTempPerm261;
	int 	iTempPerm262;
	float 	fTempPerm263;
	float 	fTempPerm264;
	float 	fTempPerm265;
	float 	fTempPerm266;
	int 	iTempPerm267;
	float 	fTempPerm268;
	float 	fTempPerm269;
	int 	iTempPerm270;
	float 	fVec13[2];
	float 	fVec14[2];
	float 	fRec172[2048];
	float 	fRec162[2];
	float 	fRec158[2048];
	float 	fRec160[2];
	float 	fRec156[4];
	int 	iRec147[2];
	float 	fRec143[2048];
	float 	fRec141[2];
	int 	iRec186[2];
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	float 	fRec205[2];
	float 	fTempPerm271;
	float 	fTempPerm272;
	float 	fTempPerm273;
	int 	iTempPerm274;
	int 	iTempPerm275;
	float 	fTempPerm276;
	float 	fTempPerm277;
	float 	fTempPerm278;
	float 	fTempPerm279;
	float 	fTempPerm280;
	float 	fTempPerm281;
	float 	fTempPerm282;
	float 	fTempPerm283;
	float 	fTempPerm284;
	float 	fTempPerm285;
	int 	iTempPerm286;
	float 	fTempPerm287;
	float 	fTempPerm288;
	int 	iTempPerm289;
	float 	fTempPerm290;
	float 	fTempPerm291;
	float 	fTempPerm292;
	float 	fTempPerm293;
	int 	iTempPerm294;
	float 	fTempPerm295;
	float 	fTempPerm296;
	int 	iTempPerm297;
	float 	fRec201[2];
	float 	fRec206[2];
	FAUSTFLOAT 	fslider18;
	int 	iVec15[2];
	int 	iTempPerm298;
	float 	fRec208[4];
	float 	fRec209[2048];
	float 	fTempPerm299;
	float 	fTempPerm300;
	int 	iTempPerm301;
	int 	iTempPerm302;
	float 	fTempPerm303;
	float 	fTempPerm304;
	float 	fTempPerm305;
	float 	fTempPerm306;
	float 	fTempPerm307;
	float 	fTempPerm308;
	float 	fTempPerm309;
	float 	fTempPerm310;
	float 	fTempPerm311;
	float 	fTempPerm312;
	int 	iTempPerm313;
	float 	fTempPerm314;
	float 	fTempPerm315;
	int 	iTempPerm316;
	float 	fTempPerm317;
	float 	fTempPerm318;
	float 	fTempPerm319;
	float 	fTempPerm320;
	int 	iTempPerm321;
	float 	fTempPerm322;
	float 	fTempPerm323;
	int 	iTempPerm324;
	float 	fVec16[2];
	float 	fVec17[2];
	float 	fRec207[2048];
	float 	fRec197[2];
	float 	fRec193[2048];
	float 	fRec195[2];
	float 	fRec191[4];
	int 	iRec182[2];
	float 	fRec178[2048];
	float 	fRec176[2];
	float 	fTempPerm325;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("interface", "SmartKeyboard{  'Number of Keyboards':'7',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Keyboard 0 - Number of Keys':'14',   'Keyboard 1 - Number of Keys':'14',  'Keyboard 2 - Number of Keys':'14',  'Keyboard 3 - Number of Keys':'14',  'Keyboard 4 - Number of Keys':'14',  'Keyboard 5 - Number of Keys':'14',  'Keyboard 6 - Number of Keys':'6',  'Keyboard 0 - Lowest Key':'52',  'Keyboard 1 - Lowest Key':'57',  'Keyboard 2 - Lowest Key':'62',  'Keyboard 3 - Lowest Key':'67',  'Keyboard 4 - Lowest Key':'71',  'Keyboard 5 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 4 - Send Keyboard Freq':'1',  'Keyboard 5 - Send Keyboard Freq':'1',  'Keyboard 6 - Piano Keyboard':'0',  'Keyboard 6 - Send Key Status':'1',  'Keyboard 6 - Key 0 - Label':'S0',  'Keyboard 6 - Key 1 - Label':'S1',  'Keyboard 6 - Key 2 - Label':'S2',  'Keyboard 6 - Key 3 - Label':'S3',  'Keyboard 6 - Key 4 - Label':'S4',  'Keyboard 6 - Key 5 - Label':'S5' }");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "acGuitar");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (0.0088235294117647058f * fConst0);
		fConst2 = (0.0014705882352941176f * fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		iTempPerm4 = 0;
		iTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		iTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		iTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		iTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		iTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		iTempPerm30 = 0;
		iTempPerm31 = 0;
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		iTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		iTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		iTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		iTempPerm53 = 0;
		iTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		iTempPerm58 = 0;
		iTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		iTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		iTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		iTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		iTempPerm81 = 0;
		iTempPerm82 = 0;
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		iTempPerm85 = 0;
		iTempPerm86 = 0;
		fTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		iTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		iTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		iTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		iTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		iTempPerm112 = 0;
		iTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		iTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		iTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		iTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		iTempPerm135 = 0;
		iTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		iTempPerm139 = 0;
		iTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		iTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		iTempPerm154 = 0;
		fTempPerm155 = 0;
		fTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		iTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		iTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		fTempPerm165 = 0;
		iTempPerm166 = 0;
		iTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
		fTempPerm175 = 0;
		fTempPerm176 = 0;
		fTempPerm177 = 0;
		iTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		iTempPerm181 = 0;
		fTempPerm182 = 0;
		fTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		iTempPerm186 = 0;
		fTempPerm187 = 0;
		fTempPerm188 = 0;
		iTempPerm189 = 0;
		iTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		iTempPerm193 = 0;
		iTempPerm194 = 0;
		fTempPerm195 = 0;
		fTempPerm196 = 0;
		fTempPerm197 = 0;
		fTempPerm198 = 0;
		fTempPerm199 = 0;
		fTempPerm200 = 0;
		fTempPerm201 = 0;
		fTempPerm202 = 0;
		fTempPerm203 = 0;
		fTempPerm204 = 0;
		iTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		iTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		fTempPerm212 = 0;
		iTempPerm213 = 0;
		fTempPerm214 = 0;
		fTempPerm215 = 0;
		iTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		fTempPerm219 = 0;
		iTempPerm220 = 0;
		iTempPerm221 = 0;
		fTempPerm222 = 0;
		fTempPerm223 = 0;
		fTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		fTempPerm228 = 0;
		fTempPerm229 = 0;
		fTempPerm230 = 0;
		fTempPerm231 = 0;
		iTempPerm232 = 0;
		fTempPerm233 = 0;
		fTempPerm234 = 0;
		iTempPerm235 = 0;
		fTempPerm236 = 0;
		fTempPerm237 = 0;
		fTempPerm238 = 0;
		fTempPerm239 = 0;
		iTempPerm240 = 0;
		fTempPerm241 = 0;
		fTempPerm242 = 0;
		iTempPerm243 = 0;
		iTempPerm244 = 0;
		fTempPerm245 = 0;
		fTempPerm246 = 0;
		iTempPerm247 = 0;
		iTempPerm248 = 0;
		fTempPerm249 = 0;
		fTempPerm250 = 0;
		fTempPerm251 = 0;
		fTempPerm252 = 0;
		fTempPerm253 = 0;
		fTempPerm254 = 0;
		fTempPerm255 = 0;
		fTempPerm256 = 0;
		fTempPerm257 = 0;
		fTempPerm258 = 0;
		iTempPerm259 = 0;
		fTempPerm260 = 0;
		fTempPerm261 = 0;
		iTempPerm262 = 0;
		fTempPerm263 = 0;
		fTempPerm264 = 0;
		fTempPerm265 = 0;
		fTempPerm266 = 0;
		iTempPerm267 = 0;
		fTempPerm268 = 0;
		fTempPerm269 = 0;
		iTempPerm270 = 0;
		fTempPerm271 = 0;
		fTempPerm272 = 0;
		fTempPerm273 = 0;
		iTempPerm274 = 0;
		iTempPerm275 = 0;
		fTempPerm276 = 0;
		fTempPerm277 = 0;
		fTempPerm278 = 0;
		fTempPerm279 = 0;
		fTempPerm280 = 0;
		fTempPerm281 = 0;
		fTempPerm282 = 0;
		fTempPerm283 = 0;
		fTempPerm284 = 0;
		fTempPerm285 = 0;
		iTempPerm286 = 0;
		fTempPerm287 = 0;
		fTempPerm288 = 0;
		iTempPerm289 = 0;
		fTempPerm290 = 0;
		fTempPerm291 = 0;
		fTempPerm292 = 0;
		fTempPerm293 = 0;
		iTempPerm294 = 0;
		fTempPerm295 = 0;
		fTempPerm296 = 0;
		iTempPerm297 = 0;
		iTempPerm298 = 0;
		fTempPerm299 = 0;
		fTempPerm300 = 0;
		iTempPerm301 = 0;
		iTempPerm302 = 0;
		fTempPerm303 = 0;
		fTempPerm304 = 0;
		fTempPerm305 = 0;
		fTempPerm306 = 0;
		fTempPerm307 = 0;
		fTempPerm308 = 0;
		fTempPerm309 = 0;
		fTempPerm310 = 0;
		fTempPerm311 = 0;
		fTempPerm312 = 0;
		iTempPerm313 = 0;
		fTempPerm314 = 0;
		fTempPerm315 = 0;
		iTempPerm316 = 0;
		fTempPerm317 = 0;
		fTempPerm318 = 0;
		fTempPerm319 = 0;
		fTempPerm320 = 0;
		iTempPerm321 = 0;
		fTempPerm322 = 0;
		fTempPerm323 = 0;
		iTempPerm324 = 0;
		fTempPerm325 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 164.80000000000001f;
		fslider2 = 1.0f;
		fslider3 = 0.0f;
		fslider4 = 220.0f;
		fslider5 = 1.0f;
		fslider6 = 0.0f;
		fslider7 = 293.69999999999999f;
		fslider8 = 1.0f;
		fslider9 = 0.0f;
		fslider10 = 392.0f;
		fslider11 = 1.0f;
		fslider12 = 0.0f;
		fslider13 = 493.89999999999998f;
		fslider14 = 1.0f;
		fslider15 = 0.0f;
		fslider16 = 659.20000000000005f;
		fslider17 = 1.0f;
		fslider18 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iRec10[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<4; i++) fRec33[i] = 0;
		IOTA = 0;
		for (int i=0; i<2048; i++) fRec34[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) iVec1[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2048; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<2048; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<4; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<2048; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec46[i] = 0;
		for (int i=0; i<2; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec66[i] = 0;
		for (int i=0; i<2; i++) iVec3[i] = 0;
		for (int i=0; i<4; i++) fRec68[i] = 0;
		for (int i=0; i<2048; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2048; i++) fRec67[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<2048; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<4; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) iRec42[i] = 0;
		for (int i=0; i<2048; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) iRec81[i] = 0;
		for (int i=0; i<2; i++) fRec100[i] = 0;
		for (int i=0; i<2; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fRec101[i] = 0;
		for (int i=0; i<2; i++) iVec6[i] = 0;
		for (int i=0; i<4; i++) fRec103[i] = 0;
		for (int i=0; i<2048; i++) fRec104[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2048; i++) fRec102[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2048; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<4; i++) fRec86[i] = 0;
		for (int i=0; i<2; i++) iRec77[i] = 0;
		for (int i=0; i<2048; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) iRec116[i] = 0;
		for (int i=0; i<2; i++) fRec135[i] = 0;
		for (int i=0; i<2; i++) fRec131[i] = 0;
		for (int i=0; i<2; i++) fRec136[i] = 0;
		for (int i=0; i<2; i++) iVec9[i] = 0;
		for (int i=0; i<4; i++) fRec138[i] = 0;
		for (int i=0; i<2048; i++) fRec139[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2048; i++) fRec137[i] = 0;
		for (int i=0; i<2; i++) fRec127[i] = 0;
		for (int i=0; i<2048; i++) fRec123[i] = 0;
		for (int i=0; i<2; i++) fRec125[i] = 0;
		for (int i=0; i<4; i++) fRec121[i] = 0;
		for (int i=0; i<2; i++) iRec112[i] = 0;
		for (int i=0; i<2048; i++) fRec108[i] = 0;
		for (int i=0; i<2; i++) fRec106[i] = 0;
		for (int i=0; i<2; i++) iRec151[i] = 0;
		for (int i=0; i<2; i++) fRec170[i] = 0;
		for (int i=0; i<2; i++) fRec166[i] = 0;
		for (int i=0; i<2; i++) fRec171[i] = 0;
		for (int i=0; i<2; i++) iVec12[i] = 0;
		for (int i=0; i<4; i++) fRec173[i] = 0;
		for (int i=0; i<2048; i++) fRec174[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2048; i++) fRec172[i] = 0;
		for (int i=0; i<2; i++) fRec162[i] = 0;
		for (int i=0; i<2048; i++) fRec158[i] = 0;
		for (int i=0; i<2; i++) fRec160[i] = 0;
		for (int i=0; i<4; i++) fRec156[i] = 0;
		for (int i=0; i<2; i++) iRec147[i] = 0;
		for (int i=0; i<2048; i++) fRec143[i] = 0;
		for (int i=0; i<2; i++) fRec141[i] = 0;
		for (int i=0; i<2; i++) iRec186[i] = 0;
		for (int i=0; i<2; i++) fRec205[i] = 0;
		for (int i=0; i<2; i++) fRec201[i] = 0;
		for (int i=0; i<2; i++) fRec206[i] = 0;
		for (int i=0; i<2; i++) iVec15[i] = 0;
		for (int i=0; i<4; i++) fRec208[i] = 0;
		for (int i=0; i<2048; i++) fRec209[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2048; i++) fRec207[i] = 0;
		for (int i=0; i<2; i++) fRec197[i] = 0;
		for (int i=0; i<2048; i++) fRec193[i] = 0;
		for (int i=0; i<2; i++) fRec195[i] = 0;
		for (int i=0; i<4; i++) fRec191[i] = 0;
		for (int i=0; i<2; i++) iRec182[i] = 0;
		for (int i=0; i<2048; i++) fRec178[i] = 0;
		for (int i=0; i<2; i++) fRec176[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("acGuitar");
		ui_interface->addHorizontalSlider("kb0bend", &fslider2, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb0freq", &fslider1, 164.80000000000001f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1bend", &fslider5, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1freq", &fslider4, 220.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2bend", &fslider8, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2freq", &fslider7, 293.69999999999999f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3bend", &fslider11, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3freq", &fslider10, 392.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb4bend", &fslider14, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb4freq", &fslider13, 493.89999999999998f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb5bend", &fslider17, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb5freq", &fslider16, 659.20000000000005f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb6k0status", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb6k1status", &fslider6, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb6k2status", &fslider9, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb6k3status", &fslider12, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb6k4status", &fslider15, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb6k5status", &fslider18, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->declare(&fslider0, "acc", "1 0 -10 0 10");
		ui_interface->addHorizontalSlider("pluckPosition", &fslider0, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow1 = (0.3400000000000003f / (float(fslider1) * float(fslider2)));
		float 	fSlow2 = float(fslider3);
		int 	iSlow3 = int(((fSlow2 == 1) | (fSlow2 == 4)));
		float 	fSlow4 = (0.3400000000000003f / (float(fslider4) * float(fslider5)));
		float 	fSlow5 = float(fslider6);
		int 	iSlow6 = int(((fSlow5 == 1) | (fSlow5 == 4)));
		float 	fSlow7 = (0.3400000000000003f / (float(fslider7) * float(fslider8)));
		float 	fSlow8 = float(fslider9);
		int 	iSlow9 = int(((fSlow8 == 1) | (fSlow8 == 4)));
		float 	fSlow10 = (0.3400000000000003f / (float(fslider10) * float(fslider11)));
		float 	fSlow11 = float(fslider12);
		int 	iSlow12 = int(((fSlow11 == 1) | (fSlow11 == 4)));
		float 	fSlow13 = (0.3400000000000003f / (float(fslider13) * float(fslider14)));
		float 	fSlow14 = float(fslider15);
		int 	iSlow15 = int(((fSlow14 == 1) | (fSlow14 == 4)));
		float 	fSlow16 = (0.3400000000000003f / (float(fslider16) * float(fslider17)));
		float 	fSlow17 = float(fslider18);
		int 	iSlow18 = int(((fSlow17 == 1) | (fSlow17 == 4)));
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iRec10[0] = 0;
			int 	iRec11 = iRec10[1];
			float 	fRec14 = (iRec6[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec15[2]) + (0.14999999999999999f * (fRec15[1] + fRec15[3])))));
			fRec29[0] = (fSlow0 + (0.999f * fRec29[1]));
			fTempPerm0 = (1 - fRec29[0]);
			fRec30[0] = (fSlow1 + (0.999f * fRec30[1]));
			fTempPerm1 = (fRec30[0] + -0.11f);
			fTempPerm2 = (fConst2 * (fTempPerm0 * fTempPerm1));
			fTempPerm3 = (fTempPerm2 + -1.499995f);
			iTempPerm4 = int(fTempPerm3);
			iTempPerm5 = int(min(fConst1, (float)max(0, iTempPerm4)));
			fTempPerm6 = floorf(fTempPerm3);
			fTempPerm7 = (fTempPerm2 + (-1 - fTempPerm6));
			fTempPerm8 = (0 - fTempPerm7);
			fTempPerm9 = (fTempPerm2 + (-2 - fTempPerm6));
			fTempPerm10 = (0 - (0.5f * fTempPerm9));
			fTempPerm11 = (fTempPerm2 + (-3 - fTempPerm6));
			fTempPerm12 = (0 - (0.33333333333333331f * fTempPerm11));
			fTempPerm13 = (fTempPerm2 + (-4 - fTempPerm6));
			fTempPerm14 = (0 - (0.25f * fTempPerm13));
			fTempPerm15 = (fTempPerm2 - fTempPerm6);
			iTempPerm16 = int(min(fConst1, (float)max(0, (iTempPerm4 + 2))));
			fTempPerm17 = (0 - fTempPerm11);
			fTempPerm18 = (0 - (0.5f * fTempPerm13));
			iTempPerm19 = int(min(fConst1, (float)max(0, (iTempPerm4 + 1))));
			fTempPerm20 = (0 - fTempPerm9);
			fTempPerm21 = (0 - (0.5f * fTempPerm11));
			fTempPerm22 = (0 - (0.33333333333333331f * fTempPerm13));
			fTempPerm23 = (fTempPerm7 * fTempPerm9);
			iTempPerm24 = int(min(fConst1, (float)max(0, (iTempPerm4 + 3))));
			fTempPerm25 = (0 - fTempPerm13);
			fTempPerm26 = (fTempPerm23 * fTempPerm11);
			iTempPerm27 = int(min(fConst1, (float)max(0, (iTempPerm4 + 4))));
			fRec25[0] = (((((fRec2[(IOTA-int((iTempPerm5 + 1)))&2047] * fTempPerm8) * fTempPerm10) * fTempPerm12) * fTempPerm14) + (fTempPerm15 * ((((0.5f * (((fTempPerm7 * fRec2[(IOTA-int((iTempPerm16 + 1)))&2047]) * fTempPerm17) * fTempPerm18)) + (((fRec2[(IOTA-int((iTempPerm19 + 1)))&2047] * fTempPerm20) * fTempPerm21) * fTempPerm22)) + (0.16666666666666666f * ((fTempPerm23 * fRec2[(IOTA-int((iTempPerm24 + 1)))&2047]) * fTempPerm25))) + (0.041666666666666664f * (fTempPerm26 * fRec2[(IOTA-int((iTempPerm27 + 1)))&2047])))));
			fRec31[0] = ((0.40000000000000002f * fRec31[1]) + (0.59999999999999998f * fRec25[1]));
			float 	fRec26 = fRec31[0];
			fRec33[0] = fRec0[1];
			fRec34[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec33[2]) + (0.14999999999999999f * (fRec33[1] + fRec33[3])))));
			int 	iRec35 = 0;
			fTempPerm28 = (fConst2 * (fRec29[0] * fTempPerm1));
			fTempPerm29 = (fTempPerm28 + -1.499995f);
			iTempPerm30 = int(fTempPerm29);
			iTempPerm31 = int(min(fConst1, (float)max(0, iTempPerm30)));
			fTempPerm32 = floorf(fTempPerm29);
			fTempPerm33 = (fTempPerm28 + (-1 - fTempPerm32));
			fTempPerm34 = (0 - fTempPerm33);
			fTempPerm35 = (fTempPerm28 + (-2 - fTempPerm32));
			fTempPerm36 = (0 - (0.5f * fTempPerm35));
			fTempPerm37 = (fTempPerm28 + (-3 - fTempPerm32));
			fTempPerm38 = (0 - (0.33333333333333331f * fTempPerm37));
			fTempPerm39 = (fTempPerm28 + (-4 - fTempPerm32));
			fTempPerm40 = (0 - (0.25f * fTempPerm39));
			fTempPerm41 = (fTempPerm28 - fTempPerm32);
			iTempPerm42 = int(min(fConst1, (float)max(0, (iTempPerm30 + 2))));
			fTempPerm43 = (0 - fTempPerm37);
			fTempPerm44 = (0 - (0.5f * fTempPerm39));
			iTempPerm45 = int(min(fConst1, (float)max(0, (iTempPerm30 + 1))));
			fTempPerm46 = (0 - fTempPerm35);
			fTempPerm47 = (0 - (0.5f * fTempPerm37));
			fTempPerm48 = (0 - (0.33333333333333331f * fTempPerm39));
			fTempPerm49 = (fTempPerm33 * fTempPerm35);
			iTempPerm50 = int(min(fConst1, (float)max(0, (iTempPerm30 + 3))));
			fTempPerm51 = (0 - fTempPerm39);
			fTempPerm52 = (fTempPerm49 * fTempPerm37);
			iTempPerm53 = int(min(fConst1, (float)max(0, (iTempPerm30 + 4))));
			fVec0[0] = (((((fRec34[(IOTA-int((iTempPerm31 + 2)))&2047] * fTempPerm34) * fTempPerm36) * fTempPerm38) * fTempPerm40) + (fTempPerm41 * ((((0.5f * (((fTempPerm33 * fRec34[(IOTA-int((iTempPerm42 + 2)))&2047]) * fTempPerm43) * fTempPerm44)) + (((fRec34[(IOTA-int((iTempPerm45 + 2)))&2047] * fTempPerm46) * fTempPerm47) * fTempPerm48)) + (0.16666666666666666f * ((fTempPerm49 * fRec34[(IOTA-int((iTempPerm50 + 2)))&2047]) * fTempPerm51))) + (0.041666666666666664f * (fTempPerm52 * fRec34[(IOTA-int((iTempPerm53 + 2)))&2047])))));
			iVec1[0] = iSlow3;
			iTempPerm54 = ((iSlow3 - iVec1[1]) > 0);
			fVec2[0] = (fVec0[1] + iTempPerm54);
			fRec32[IOTA&2047] = ((0.40000000000000002f * fRec32[(IOTA-1)&2047]) + (0.59999999999999998f * fVec2[1]));
			float 	fRec27 = (((((fTempPerm8 * fTempPerm10) * fTempPerm12) * fTempPerm14) * fRec32[(IOTA-iTempPerm5)&2047]) + (fTempPerm15 * ((0.041666666666666664f * (fTempPerm26 * fRec32[(IOTA-iTempPerm27)&2047])) + (((((fTempPerm20 * fTempPerm21) * fTempPerm22) * fRec32[(IOTA-iTempPerm19)&2047]) + (0.5f * (((fTempPerm7 * fTempPerm17) * fTempPerm18) * fRec32[(IOTA-iTempPerm16)&2047]))) + (0.16666666666666666f * ((fTempPerm23 * fTempPerm25) * fRec32[(IOTA-iTempPerm24)&2047]))))));
			int 	iRec28 = iRec35;
			fRec21[0] = fRec26;
			float 	fRec22 = (iTempPerm54 + fRec21[1]);
			float 	fRec23 = fRec27;
			int 	iRec24 = iRec28;
			fRec17[IOTA&2047] = fRec22;
			float 	fRec18 = (((((fTempPerm34 * fTempPerm36) * fTempPerm38) * fTempPerm40) * fRec17[(IOTA-int((iTempPerm31 + 1)))&2047]) + (fTempPerm41 * (((0.16666666666666666f * ((fTempPerm49 * fTempPerm51) * fRec17[(IOTA-int((iTempPerm50 + 1)))&2047])) + ((((fTempPerm46 * fTempPerm47) * fTempPerm48) * fRec17[(IOTA-int((iTempPerm45 + 1)))&2047]) + (0.5f * (((fTempPerm33 * fTempPerm43) * fTempPerm44) * fRec17[(IOTA-int((iTempPerm42 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm52 * fRec17[(IOTA-int((iTempPerm53 + 1)))&2047])))));
			fRec19[0] = fRec23;
			int 	iRec20 = iRec24;
			fRec15[0] = fRec19[1];
			int 	iRec16 = iRec20;
			float 	fRec12 = fRec15[1];
			float 	fRec13 = (iRec16 + fRec15[1]);
			iRec6[0] = iRec11;
			float 	fRec7 = fRec14;
			float 	fRec8 = fRec12;
			float 	fRec9 = fRec13;
			fRec2[IOTA&2047] = fRec7;
			float 	fRec3 = fRec18;
			float 	fRec4 = fRec8;
			float 	fRec5 = fRec9;
			fRec0[0] = fRec3;
			float 	fRec1 = fRec5;
			iRec46[0] = 0;
			int 	iRec47 = iRec46[1];
			float 	fRec50 = (iRec42[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec51[2]) + (0.14999999999999999f * (fRec51[1] + fRec51[3])))));
			fRec65[0] = (fSlow4 + (0.999f * fRec65[1]));
			fTempPerm55 = (fRec65[0] + -0.11f);
			fTempPerm56 = (fConst2 * (fTempPerm0 * fTempPerm55));
			fTempPerm57 = (fTempPerm56 + -1.499995f);
			iTempPerm58 = int(fTempPerm57);
			iTempPerm59 = int(min(fConst1, (float)max(0, iTempPerm58)));
			fTempPerm60 = floorf(fTempPerm57);
			fTempPerm61 = (fTempPerm56 + (-1 - fTempPerm60));
			fTempPerm62 = (0 - fTempPerm61);
			fTempPerm63 = (fTempPerm56 + (-2 - fTempPerm60));
			fTempPerm64 = (0 - (0.5f * fTempPerm63));
			fTempPerm65 = (fTempPerm56 + (-3 - fTempPerm60));
			fTempPerm66 = (0 - (0.33333333333333331f * fTempPerm65));
			fTempPerm67 = (fTempPerm56 + (-4 - fTempPerm60));
			fTempPerm68 = (0 - (0.25f * fTempPerm67));
			fTempPerm69 = (fTempPerm56 - fTempPerm60);
			iTempPerm70 = int(min(fConst1, (float)max(0, (iTempPerm58 + 2))));
			fTempPerm71 = (0 - fTempPerm65);
			fTempPerm72 = (0 - (0.5f * fTempPerm67));
			iTempPerm73 = int(min(fConst1, (float)max(0, (iTempPerm58 + 1))));
			fTempPerm74 = (0 - fTempPerm63);
			fTempPerm75 = (0 - (0.5f * fTempPerm65));
			fTempPerm76 = (0 - (0.33333333333333331f * fTempPerm67));
			fTempPerm77 = (fTempPerm61 * fTempPerm63);
			iTempPerm78 = int(min(fConst1, (float)max(0, (iTempPerm58 + 3))));
			fTempPerm79 = (0 - fTempPerm67);
			fTempPerm80 = (fTempPerm77 * fTempPerm65);
			iTempPerm81 = int(min(fConst1, (float)max(0, (iTempPerm58 + 4))));
			fRec61[0] = (((((fRec38[(IOTA-int((iTempPerm59 + 1)))&2047] * fTempPerm62) * fTempPerm64) * fTempPerm66) * fTempPerm68) + (fTempPerm69 * ((((0.5f * (((fTempPerm61 * fRec38[(IOTA-int((iTempPerm70 + 1)))&2047]) * fTempPerm71) * fTempPerm72)) + (((fRec38[(IOTA-int((iTempPerm73 + 1)))&2047] * fTempPerm74) * fTempPerm75) * fTempPerm76)) + (0.16666666666666666f * ((fTempPerm77 * fRec38[(IOTA-int((iTempPerm78 + 1)))&2047]) * fTempPerm79))) + (0.041666666666666664f * (fTempPerm80 * fRec38[(IOTA-int((iTempPerm81 + 1)))&2047])))));
			fRec66[0] = ((0.59999999999999998f * fRec61[1]) + (0.40000000000000002f * fRec66[1]));
			float 	fRec62 = fRec66[0];
			iVec3[0] = iSlow6;
			iTempPerm82 = ((iSlow6 - iVec3[1]) > 0);
			fRec68[0] = fRec36[1];
			fRec69[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec68[2]) + (0.14999999999999999f * (fRec68[1] + fRec68[3])))));
			int 	iRec70 = 0;
			fTempPerm83 = (fConst2 * (fRec29[0] * fTempPerm55));
			fTempPerm84 = (fTempPerm83 + -1.499995f);
			iTempPerm85 = int(fTempPerm84);
			iTempPerm86 = int(min(fConst1, (float)max(0, iTempPerm85)));
			fTempPerm87 = floorf(fTempPerm84);
			fTempPerm88 = (fTempPerm83 + (-1 - fTempPerm87));
			fTempPerm89 = (0 - fTempPerm88);
			fTempPerm90 = (fTempPerm83 + (-2 - fTempPerm87));
			fTempPerm91 = (0 - (0.5f * fTempPerm90));
			fTempPerm92 = (fTempPerm83 + (-3 - fTempPerm87));
			fTempPerm93 = (0 - (0.33333333333333331f * fTempPerm92));
			fTempPerm94 = (fTempPerm83 + (-4 - fTempPerm87));
			fTempPerm95 = (0 - (0.25f * fTempPerm94));
			fTempPerm96 = (fTempPerm83 - fTempPerm87);
			iTempPerm97 = int(min(fConst1, (float)max(0, (iTempPerm85 + 2))));
			fTempPerm98 = (0 - fTempPerm92);
			fTempPerm99 = (0 - (0.5f * fTempPerm94));
			iTempPerm100 = int(min(fConst1, (float)max(0, (iTempPerm85 + 1))));
			fTempPerm101 = (0 - fTempPerm90);
			fTempPerm102 = (0 - (0.5f * fTempPerm92));
			fTempPerm103 = (0 - (0.33333333333333331f * fTempPerm94));
			fTempPerm104 = (fTempPerm88 * fTempPerm90);
			iTempPerm105 = int(min(fConst1, (float)max(0, (iTempPerm85 + 3))));
			fTempPerm106 = (0 - fTempPerm94);
			fTempPerm107 = (fTempPerm104 * fTempPerm92);
			iTempPerm108 = int(min(fConst1, (float)max(0, (iTempPerm85 + 4))));
			fVec4[0] = (((((fRec69[(IOTA-int((iTempPerm86 + 2)))&2047] * fTempPerm89) * fTempPerm91) * fTempPerm93) * fTempPerm95) + (fTempPerm96 * ((((0.5f * (((fTempPerm88 * fRec69[(IOTA-int((iTempPerm97 + 2)))&2047]) * fTempPerm98) * fTempPerm99)) + (((fRec69[(IOTA-int((iTempPerm100 + 2)))&2047] * fTempPerm101) * fTempPerm102) * fTempPerm103)) + (0.16666666666666666f * ((fTempPerm104 * fRec69[(IOTA-int((iTempPerm105 + 2)))&2047]) * fTempPerm106))) + (0.041666666666666664f * (fTempPerm107 * fRec69[(IOTA-int((iTempPerm108 + 2)))&2047])))));
			fVec5[0] = (iTempPerm82 + fVec4[1]);
			fRec67[IOTA&2047] = ((0.40000000000000002f * fRec67[(IOTA-1)&2047]) + (0.59999999999999998f * fVec5[1]));
			float 	fRec63 = (((((fTempPerm62 * fTempPerm64) * fTempPerm66) * fTempPerm68) * fRec67[(IOTA-iTempPerm59)&2047]) + (fTempPerm69 * ((0.041666666666666664f * (fTempPerm80 * fRec67[(IOTA-iTempPerm81)&2047])) + (((((fTempPerm74 * fTempPerm75) * fTempPerm76) * fRec67[(IOTA-iTempPerm73)&2047]) + (0.5f * (((fTempPerm61 * fTempPerm71) * fTempPerm72) * fRec67[(IOTA-iTempPerm70)&2047]))) + (0.16666666666666666f * ((fTempPerm77 * fTempPerm79) * fRec67[(IOTA-iTempPerm78)&2047]))))));
			int 	iRec64 = iRec70;
			fRec57[0] = fRec62;
			float 	fRec58 = (iTempPerm82 + fRec57[1]);
			float 	fRec59 = fRec63;
			int 	iRec60 = iRec64;
			fRec53[IOTA&2047] = fRec58;
			float 	fRec54 = (((((fTempPerm89 * fTempPerm91) * fTempPerm93) * fTempPerm95) * fRec53[(IOTA-int((iTempPerm86 + 1)))&2047]) + (fTempPerm96 * (((0.16666666666666666f * ((fTempPerm104 * fTempPerm106) * fRec53[(IOTA-int((iTempPerm105 + 1)))&2047])) + ((((fTempPerm101 * fTempPerm102) * fTempPerm103) * fRec53[(IOTA-int((iTempPerm100 + 1)))&2047]) + (0.5f * (((fTempPerm88 * fTempPerm98) * fTempPerm99) * fRec53[(IOTA-int((iTempPerm97 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm107 * fRec53[(IOTA-int((iTempPerm108 + 1)))&2047])))));
			fRec55[0] = fRec59;
			int 	iRec56 = iRec60;
			fRec51[0] = fRec55[1];
			int 	iRec52 = iRec56;
			float 	fRec48 = fRec51[1];
			float 	fRec49 = (iRec52 + fRec51[1]);
			iRec42[0] = iRec47;
			float 	fRec43 = fRec50;
			float 	fRec44 = fRec48;
			float 	fRec45 = fRec49;
			fRec38[IOTA&2047] = fRec43;
			float 	fRec39 = fRec54;
			float 	fRec40 = fRec44;
			float 	fRec41 = fRec45;
			fRec36[0] = fRec39;
			float 	fRec37 = fRec41;
			iRec81[0] = 0;
			int 	iRec82 = iRec81[1];
			float 	fRec85 = (iRec77[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec86[2]) + (0.14999999999999999f * (fRec86[1] + fRec86[3])))));
			fRec100[0] = (fSlow7 + (0.999f * fRec100[1]));
			fTempPerm109 = (fRec100[0] + -0.11f);
			fTempPerm110 = (fConst2 * (fTempPerm0 * fTempPerm109));
			fTempPerm111 = (fTempPerm110 + -1.499995f);
			iTempPerm112 = int(fTempPerm111);
			iTempPerm113 = int(min(fConst1, (float)max(0, iTempPerm112)));
			fTempPerm114 = floorf(fTempPerm111);
			fTempPerm115 = (fTempPerm110 + (-1 - fTempPerm114));
			fTempPerm116 = (0 - fTempPerm115);
			fTempPerm117 = (fTempPerm110 + (-2 - fTempPerm114));
			fTempPerm118 = (0 - (0.5f * fTempPerm117));
			fTempPerm119 = (fTempPerm110 + (-3 - fTempPerm114));
			fTempPerm120 = (0 - (0.33333333333333331f * fTempPerm119));
			fTempPerm121 = (fTempPerm110 + (-4 - fTempPerm114));
			fTempPerm122 = (0 - (0.25f * fTempPerm121));
			fTempPerm123 = (fTempPerm110 - fTempPerm114);
			iTempPerm124 = int(min(fConst1, (float)max(0, (iTempPerm112 + 2))));
			fTempPerm125 = (0 - fTempPerm119);
			fTempPerm126 = (0 - (0.5f * fTempPerm121));
			iTempPerm127 = int(min(fConst1, (float)max(0, (iTempPerm112 + 1))));
			fTempPerm128 = (0 - fTempPerm117);
			fTempPerm129 = (0 - (0.5f * fTempPerm119));
			fTempPerm130 = (0 - (0.33333333333333331f * fTempPerm121));
			fTempPerm131 = (fTempPerm115 * fTempPerm117);
			iTempPerm132 = int(min(fConst1, (float)max(0, (iTempPerm112 + 3))));
			fTempPerm133 = (0 - fTempPerm121);
			fTempPerm134 = (fTempPerm131 * fTempPerm119);
			iTempPerm135 = int(min(fConst1, (float)max(0, (iTempPerm112 + 4))));
			fRec96[0] = (((((fRec73[(IOTA-int((iTempPerm113 + 1)))&2047] * fTempPerm116) * fTempPerm118) * fTempPerm120) * fTempPerm122) + (fTempPerm123 * ((((0.5f * (((fTempPerm115 * fRec73[(IOTA-int((iTempPerm124 + 1)))&2047]) * fTempPerm125) * fTempPerm126)) + (((fRec73[(IOTA-int((iTempPerm127 + 1)))&2047] * fTempPerm128) * fTempPerm129) * fTempPerm130)) + (0.16666666666666666f * ((fTempPerm131 * fRec73[(IOTA-int((iTempPerm132 + 1)))&2047]) * fTempPerm133))) + (0.041666666666666664f * (fTempPerm134 * fRec73[(IOTA-int((iTempPerm135 + 1)))&2047])))));
			fRec101[0] = ((0.59999999999999998f * fRec96[1]) + (0.40000000000000002f * fRec101[1]));
			float 	fRec97 = fRec101[0];
			iVec6[0] = iSlow9;
			iTempPerm136 = ((iSlow9 - iVec6[1]) > 0);
			fRec103[0] = fRec71[1];
			fRec104[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec103[2]) + (0.14999999999999999f * (fRec103[1] + fRec103[3])))));
			int 	iRec105 = 0;
			fTempPerm137 = (fConst2 * (fRec29[0] * fTempPerm109));
			fTempPerm138 = (fTempPerm137 + -1.499995f);
			iTempPerm139 = int(fTempPerm138);
			iTempPerm140 = int(min(fConst1, (float)max(0, iTempPerm139)));
			fTempPerm141 = floorf(fTempPerm138);
			fTempPerm142 = (fTempPerm137 + (-1 - fTempPerm141));
			fTempPerm143 = (0 - fTempPerm142);
			fTempPerm144 = (fTempPerm137 + (-2 - fTempPerm141));
			fTempPerm145 = (0 - (0.5f * fTempPerm144));
			fTempPerm146 = (fTempPerm137 + (-3 - fTempPerm141));
			fTempPerm147 = (0 - (0.33333333333333331f * fTempPerm146));
			fTempPerm148 = (fTempPerm137 + (-4 - fTempPerm141));
			fTempPerm149 = (0 - (0.25f * fTempPerm148));
			fTempPerm150 = (fTempPerm137 - fTempPerm141);
			iTempPerm151 = int(min(fConst1, (float)max(0, (iTempPerm139 + 2))));
			fTempPerm152 = (0 - fTempPerm146);
			fTempPerm153 = (0 - (0.5f * fTempPerm148));
			iTempPerm154 = int(min(fConst1, (float)max(0, (iTempPerm139 + 1))));
			fTempPerm155 = (0 - fTempPerm144);
			fTempPerm156 = (0 - (0.5f * fTempPerm146));
			fTempPerm157 = (0 - (0.33333333333333331f * fTempPerm148));
			fTempPerm158 = (fTempPerm142 * fTempPerm144);
			iTempPerm159 = int(min(fConst1, (float)max(0, (iTempPerm139 + 3))));
			fTempPerm160 = (0 - fTempPerm148);
			fTempPerm161 = (fTempPerm158 * fTempPerm146);
			iTempPerm162 = int(min(fConst1, (float)max(0, (iTempPerm139 + 4))));
			fVec7[0] = (((((fRec104[(IOTA-int((iTempPerm140 + 2)))&2047] * fTempPerm143) * fTempPerm145) * fTempPerm147) * fTempPerm149) + (fTempPerm150 * ((((0.5f * (((fTempPerm142 * fRec104[(IOTA-int((iTempPerm151 + 2)))&2047]) * fTempPerm152) * fTempPerm153)) + (((fRec104[(IOTA-int((iTempPerm154 + 2)))&2047] * fTempPerm155) * fTempPerm156) * fTempPerm157)) + (0.16666666666666666f * ((fTempPerm158 * fRec104[(IOTA-int((iTempPerm159 + 2)))&2047]) * fTempPerm160))) + (0.041666666666666664f * (fTempPerm161 * fRec104[(IOTA-int((iTempPerm162 + 2)))&2047])))));
			fVec8[0] = (iTempPerm136 + fVec7[1]);
			fRec102[IOTA&2047] = ((0.40000000000000002f * fRec102[(IOTA-1)&2047]) + (0.59999999999999998f * fVec8[1]));
			float 	fRec98 = (((((fTempPerm116 * fTempPerm118) * fTempPerm120) * fTempPerm122) * fRec102[(IOTA-iTempPerm113)&2047]) + (fTempPerm123 * ((0.041666666666666664f * (fTempPerm134 * fRec102[(IOTA-iTempPerm135)&2047])) + (((((fTempPerm128 * fTempPerm129) * fTempPerm130) * fRec102[(IOTA-iTempPerm127)&2047]) + (0.5f * (((fTempPerm115 * fTempPerm125) * fTempPerm126) * fRec102[(IOTA-iTempPerm124)&2047]))) + (0.16666666666666666f * ((fTempPerm131 * fTempPerm133) * fRec102[(IOTA-iTempPerm132)&2047]))))));
			int 	iRec99 = iRec105;
			fRec92[0] = fRec97;
			float 	fRec93 = (iTempPerm136 + fRec92[1]);
			float 	fRec94 = fRec98;
			int 	iRec95 = iRec99;
			fRec88[IOTA&2047] = fRec93;
			float 	fRec89 = (((((fTempPerm143 * fTempPerm145) * fTempPerm147) * fTempPerm149) * fRec88[(IOTA-int((iTempPerm140 + 1)))&2047]) + (fTempPerm150 * (((0.16666666666666666f * ((fTempPerm158 * fTempPerm160) * fRec88[(IOTA-int((iTempPerm159 + 1)))&2047])) + ((((fTempPerm155 * fTempPerm156) * fTempPerm157) * fRec88[(IOTA-int((iTempPerm154 + 1)))&2047]) + (0.5f * (((fTempPerm142 * fTempPerm152) * fTempPerm153) * fRec88[(IOTA-int((iTempPerm151 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm161 * fRec88[(IOTA-int((iTempPerm162 + 1)))&2047])))));
			fRec90[0] = fRec94;
			int 	iRec91 = iRec95;
			fRec86[0] = fRec90[1];
			int 	iRec87 = iRec91;
			float 	fRec83 = fRec86[1];
			float 	fRec84 = (iRec87 + fRec86[1]);
			iRec77[0] = iRec82;
			float 	fRec78 = fRec85;
			float 	fRec79 = fRec83;
			float 	fRec80 = fRec84;
			fRec73[IOTA&2047] = fRec78;
			float 	fRec74 = fRec89;
			float 	fRec75 = fRec79;
			float 	fRec76 = fRec80;
			fRec71[0] = fRec74;
			float 	fRec72 = fRec76;
			iRec116[0] = 0;
			int 	iRec117 = iRec116[1];
			float 	fRec120 = (iRec112[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec121[2]) + (0.14999999999999999f * (fRec121[1] + fRec121[3])))));
			fRec135[0] = (fSlow10 + (0.999f * fRec135[1]));
			fTempPerm163 = (fRec135[0] + -0.11f);
			fTempPerm164 = (fConst2 * (fTempPerm0 * fTempPerm163));
			fTempPerm165 = (fTempPerm164 + -1.499995f);
			iTempPerm166 = int(fTempPerm165);
			iTempPerm167 = int(min(fConst1, (float)max(0, iTempPerm166)));
			fTempPerm168 = floorf(fTempPerm165);
			fTempPerm169 = (fTempPerm164 + (-1 - fTempPerm168));
			fTempPerm170 = (0 - fTempPerm169);
			fTempPerm171 = (fTempPerm164 + (-2 - fTempPerm168));
			fTempPerm172 = (0 - (0.5f * fTempPerm171));
			fTempPerm173 = (fTempPerm164 + (-3 - fTempPerm168));
			fTempPerm174 = (0 - (0.33333333333333331f * fTempPerm173));
			fTempPerm175 = (fTempPerm164 + (-4 - fTempPerm168));
			fTempPerm176 = (0 - (0.25f * fTempPerm175));
			fTempPerm177 = (fTempPerm164 - fTempPerm168);
			iTempPerm178 = int(min(fConst1, (float)max(0, (iTempPerm166 + 2))));
			fTempPerm179 = (0 - fTempPerm173);
			fTempPerm180 = (0 - (0.5f * fTempPerm175));
			iTempPerm181 = int(min(fConst1, (float)max(0, (iTempPerm166 + 1))));
			fTempPerm182 = (0 - fTempPerm171);
			fTempPerm183 = (0 - (0.5f * fTempPerm173));
			fTempPerm184 = (0 - (0.33333333333333331f * fTempPerm175));
			fTempPerm185 = (fTempPerm169 * fTempPerm171);
			iTempPerm186 = int(min(fConst1, (float)max(0, (iTempPerm166 + 3))));
			fTempPerm187 = (0 - fTempPerm175);
			fTempPerm188 = (fTempPerm185 * fTempPerm173);
			iTempPerm189 = int(min(fConst1, (float)max(0, (iTempPerm166 + 4))));
			fRec131[0] = (((((fRec108[(IOTA-int((iTempPerm167 + 1)))&2047] * fTempPerm170) * fTempPerm172) * fTempPerm174) * fTempPerm176) + (fTempPerm177 * ((((0.5f * (((fTempPerm169 * fRec108[(IOTA-int((iTempPerm178 + 1)))&2047]) * fTempPerm179) * fTempPerm180)) + (((fRec108[(IOTA-int((iTempPerm181 + 1)))&2047] * fTempPerm182) * fTempPerm183) * fTempPerm184)) + (0.16666666666666666f * ((fTempPerm185 * fRec108[(IOTA-int((iTempPerm186 + 1)))&2047]) * fTempPerm187))) + (0.041666666666666664f * (fTempPerm188 * fRec108[(IOTA-int((iTempPerm189 + 1)))&2047])))));
			fRec136[0] = ((0.59999999999999998f * fRec131[1]) + (0.40000000000000002f * fRec136[1]));
			float 	fRec132 = fRec136[0];
			iVec9[0] = iSlow12;
			iTempPerm190 = ((iSlow12 - iVec9[1]) > 0);
			fRec138[0] = fRec106[1];
			fRec139[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec138[2]) + (0.14999999999999999f * (fRec138[1] + fRec138[3])))));
			int 	iRec140 = 0;
			fTempPerm191 = (fConst2 * (fRec29[0] * fTempPerm163));
			fTempPerm192 = (fTempPerm191 + -1.499995f);
			iTempPerm193 = int(fTempPerm192);
			iTempPerm194 = int(min(fConst1, (float)max(0, iTempPerm193)));
			fTempPerm195 = floorf(fTempPerm192);
			fTempPerm196 = (fTempPerm191 + (-1 - fTempPerm195));
			fTempPerm197 = (0 - fTempPerm196);
			fTempPerm198 = (fTempPerm191 + (-2 - fTempPerm195));
			fTempPerm199 = (0 - (0.5f * fTempPerm198));
			fTempPerm200 = (fTempPerm191 + (-3 - fTempPerm195));
			fTempPerm201 = (0 - (0.33333333333333331f * fTempPerm200));
			fTempPerm202 = (fTempPerm191 + (-4 - fTempPerm195));
			fTempPerm203 = (0 - (0.25f * fTempPerm202));
			fTempPerm204 = (fTempPerm191 - fTempPerm195);
			iTempPerm205 = int(min(fConst1, (float)max(0, (iTempPerm193 + 2))));
			fTempPerm206 = (0 - fTempPerm200);
			fTempPerm207 = (0 - (0.5f * fTempPerm202));
			iTempPerm208 = int(min(fConst1, (float)max(0, (iTempPerm193 + 1))));
			fTempPerm209 = (0 - fTempPerm198);
			fTempPerm210 = (0 - (0.5f * fTempPerm200));
			fTempPerm211 = (0 - (0.33333333333333331f * fTempPerm202));
			fTempPerm212 = (fTempPerm196 * fTempPerm198);
			iTempPerm213 = int(min(fConst1, (float)max(0, (iTempPerm193 + 3))));
			fTempPerm214 = (0 - fTempPerm202);
			fTempPerm215 = (fTempPerm212 * fTempPerm200);
			iTempPerm216 = int(min(fConst1, (float)max(0, (iTempPerm193 + 4))));
			fVec10[0] = (((((fRec139[(IOTA-int((iTempPerm194 + 2)))&2047] * fTempPerm197) * fTempPerm199) * fTempPerm201) * fTempPerm203) + (fTempPerm204 * ((((0.5f * (((fTempPerm196 * fRec139[(IOTA-int((iTempPerm205 + 2)))&2047]) * fTempPerm206) * fTempPerm207)) + (((fRec139[(IOTA-int((iTempPerm208 + 2)))&2047] * fTempPerm209) * fTempPerm210) * fTempPerm211)) + (0.16666666666666666f * ((fTempPerm212 * fRec139[(IOTA-int((iTempPerm213 + 2)))&2047]) * fTempPerm214))) + (0.041666666666666664f * (fTempPerm215 * fRec139[(IOTA-int((iTempPerm216 + 2)))&2047])))));
			fVec11[0] = (iTempPerm190 + fVec10[1]);
			fRec137[IOTA&2047] = ((0.40000000000000002f * fRec137[(IOTA-1)&2047]) + (0.59999999999999998f * fVec11[1]));
			float 	fRec133 = (((((fTempPerm170 * fTempPerm172) * fTempPerm174) * fTempPerm176) * fRec137[(IOTA-iTempPerm167)&2047]) + (fTempPerm177 * ((0.041666666666666664f * (fTempPerm188 * fRec137[(IOTA-iTempPerm189)&2047])) + (((((fTempPerm182 * fTempPerm183) * fTempPerm184) * fRec137[(IOTA-iTempPerm181)&2047]) + (0.5f * (((fTempPerm169 * fTempPerm179) * fTempPerm180) * fRec137[(IOTA-iTempPerm178)&2047]))) + (0.16666666666666666f * ((fTempPerm185 * fTempPerm187) * fRec137[(IOTA-iTempPerm186)&2047]))))));
			int 	iRec134 = iRec140;
			fRec127[0] = fRec132;
			float 	fRec128 = (iTempPerm190 + fRec127[1]);
			float 	fRec129 = fRec133;
			int 	iRec130 = iRec134;
			fRec123[IOTA&2047] = fRec128;
			float 	fRec124 = (((((fTempPerm197 * fTempPerm199) * fTempPerm201) * fTempPerm203) * fRec123[(IOTA-int((iTempPerm194 + 1)))&2047]) + (fTempPerm204 * (((0.16666666666666666f * ((fTempPerm212 * fTempPerm214) * fRec123[(IOTA-int((iTempPerm213 + 1)))&2047])) + ((((fTempPerm209 * fTempPerm210) * fTempPerm211) * fRec123[(IOTA-int((iTempPerm208 + 1)))&2047]) + (0.5f * (((fTempPerm196 * fTempPerm206) * fTempPerm207) * fRec123[(IOTA-int((iTempPerm205 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm215 * fRec123[(IOTA-int((iTempPerm216 + 1)))&2047])))));
			fRec125[0] = fRec129;
			int 	iRec126 = iRec130;
			fRec121[0] = fRec125[1];
			int 	iRec122 = iRec126;
			float 	fRec118 = fRec121[1];
			float 	fRec119 = (iRec122 + fRec121[1]);
			iRec112[0] = iRec117;
			float 	fRec113 = fRec120;
			float 	fRec114 = fRec118;
			float 	fRec115 = fRec119;
			fRec108[IOTA&2047] = fRec113;
			float 	fRec109 = fRec124;
			float 	fRec110 = fRec114;
			float 	fRec111 = fRec115;
			fRec106[0] = fRec109;
			float 	fRec107 = fRec111;
			iRec151[0] = 0;
			int 	iRec152 = iRec151[1];
			float 	fRec155 = (iRec147[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec156[2]) + (0.14999999999999999f * (fRec156[1] + fRec156[3])))));
			fRec170[0] = (fSlow13 + (0.999f * fRec170[1]));
			fTempPerm217 = (fRec170[0] + -0.11f);
			fTempPerm218 = (fConst2 * (fTempPerm0 * fTempPerm217));
			fTempPerm219 = (fTempPerm218 + -1.499995f);
			iTempPerm220 = int(fTempPerm219);
			iTempPerm221 = int(min(fConst1, (float)max(0, iTempPerm220)));
			fTempPerm222 = floorf(fTempPerm219);
			fTempPerm223 = (fTempPerm218 + (-1 - fTempPerm222));
			fTempPerm224 = (0 - fTempPerm223);
			fTempPerm225 = (fTempPerm218 + (-2 - fTempPerm222));
			fTempPerm226 = (0 - (0.5f * fTempPerm225));
			fTempPerm227 = (fTempPerm218 + (-3 - fTempPerm222));
			fTempPerm228 = (0 - (0.33333333333333331f * fTempPerm227));
			fTempPerm229 = (fTempPerm218 + (-4 - fTempPerm222));
			fTempPerm230 = (0 - (0.25f * fTempPerm229));
			fTempPerm231 = (fTempPerm218 - fTempPerm222);
			iTempPerm232 = int(min(fConst1, (float)max(0, (iTempPerm220 + 2))));
			fTempPerm233 = (0 - fTempPerm227);
			fTempPerm234 = (0 - (0.5f * fTempPerm229));
			iTempPerm235 = int(min(fConst1, (float)max(0, (iTempPerm220 + 1))));
			fTempPerm236 = (0 - fTempPerm225);
			fTempPerm237 = (0 - (0.5f * fTempPerm227));
			fTempPerm238 = (0 - (0.33333333333333331f * fTempPerm229));
			fTempPerm239 = (fTempPerm223 * fTempPerm225);
			iTempPerm240 = int(min(fConst1, (float)max(0, (iTempPerm220 + 3))));
			fTempPerm241 = (0 - fTempPerm229);
			fTempPerm242 = (fTempPerm239 * fTempPerm227);
			iTempPerm243 = int(min(fConst1, (float)max(0, (iTempPerm220 + 4))));
			fRec166[0] = (((((fRec143[(IOTA-int((iTempPerm221 + 1)))&2047] * fTempPerm224) * fTempPerm226) * fTempPerm228) * fTempPerm230) + (fTempPerm231 * ((((0.5f * (((fTempPerm223 * fRec143[(IOTA-int((iTempPerm232 + 1)))&2047]) * fTempPerm233) * fTempPerm234)) + (((fRec143[(IOTA-int((iTempPerm235 + 1)))&2047] * fTempPerm236) * fTempPerm237) * fTempPerm238)) + (0.16666666666666666f * ((fTempPerm239 * fRec143[(IOTA-int((iTempPerm240 + 1)))&2047]) * fTempPerm241))) + (0.041666666666666664f * (fTempPerm242 * fRec143[(IOTA-int((iTempPerm243 + 1)))&2047])))));
			fRec171[0] = ((0.59999999999999998f * fRec166[1]) + (0.40000000000000002f * fRec171[1]));
			float 	fRec167 = fRec171[0];
			iVec12[0] = iSlow15;
			iTempPerm244 = ((iSlow15 - iVec12[1]) > 0);
			fRec173[0] = fRec141[1];
			fRec174[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec173[2]) + (0.14999999999999999f * (fRec173[1] + fRec173[3])))));
			int 	iRec175 = 0;
			fTempPerm245 = (fConst2 * (fRec29[0] * fTempPerm217));
			fTempPerm246 = (fTempPerm245 + -1.499995f);
			iTempPerm247 = int(fTempPerm246);
			iTempPerm248 = int(min(fConst1, (float)max(0, iTempPerm247)));
			fTempPerm249 = floorf(fTempPerm246);
			fTempPerm250 = (fTempPerm245 + (-1 - fTempPerm249));
			fTempPerm251 = (0 - fTempPerm250);
			fTempPerm252 = (fTempPerm245 + (-2 - fTempPerm249));
			fTempPerm253 = (0 - (0.5f * fTempPerm252));
			fTempPerm254 = (fTempPerm245 + (-3 - fTempPerm249));
			fTempPerm255 = (0 - (0.33333333333333331f * fTempPerm254));
			fTempPerm256 = (fTempPerm245 + (-4 - fTempPerm249));
			fTempPerm257 = (0 - (0.25f * fTempPerm256));
			fTempPerm258 = (fTempPerm245 - fTempPerm249);
			iTempPerm259 = int(min(fConst1, (float)max(0, (iTempPerm247 + 2))));
			fTempPerm260 = (0 - fTempPerm254);
			fTempPerm261 = (0 - (0.5f * fTempPerm256));
			iTempPerm262 = int(min(fConst1, (float)max(0, (iTempPerm247 + 1))));
			fTempPerm263 = (0 - fTempPerm252);
			fTempPerm264 = (0 - (0.5f * fTempPerm254));
			fTempPerm265 = (0 - (0.33333333333333331f * fTempPerm256));
			fTempPerm266 = (fTempPerm250 * fTempPerm252);
			iTempPerm267 = int(min(fConst1, (float)max(0, (iTempPerm247 + 3))));
			fTempPerm268 = (0 - fTempPerm256);
			fTempPerm269 = (fTempPerm266 * fTempPerm254);
			iTempPerm270 = int(min(fConst1, (float)max(0, (iTempPerm247 + 4))));
			fVec13[0] = (((((fRec174[(IOTA-int((iTempPerm248 + 2)))&2047] * fTempPerm251) * fTempPerm253) * fTempPerm255) * fTempPerm257) + (fTempPerm258 * ((((0.5f * (((fTempPerm250 * fRec174[(IOTA-int((iTempPerm259 + 2)))&2047]) * fTempPerm260) * fTempPerm261)) + (((fRec174[(IOTA-int((iTempPerm262 + 2)))&2047] * fTempPerm263) * fTempPerm264) * fTempPerm265)) + (0.16666666666666666f * ((fTempPerm266 * fRec174[(IOTA-int((iTempPerm267 + 2)))&2047]) * fTempPerm268))) + (0.041666666666666664f * (fTempPerm269 * fRec174[(IOTA-int((iTempPerm270 + 2)))&2047])))));
			fVec14[0] = (iTempPerm244 + fVec13[1]);
			fRec172[IOTA&2047] = ((0.40000000000000002f * fRec172[(IOTA-1)&2047]) + (0.59999999999999998f * fVec14[1]));
			float 	fRec168 = (((((fTempPerm224 * fTempPerm226) * fTempPerm228) * fTempPerm230) * fRec172[(IOTA-iTempPerm221)&2047]) + (fTempPerm231 * ((0.041666666666666664f * (fTempPerm242 * fRec172[(IOTA-iTempPerm243)&2047])) + (((((fTempPerm236 * fTempPerm237) * fTempPerm238) * fRec172[(IOTA-iTempPerm235)&2047]) + (0.5f * (((fTempPerm223 * fTempPerm233) * fTempPerm234) * fRec172[(IOTA-iTempPerm232)&2047]))) + (0.16666666666666666f * ((fTempPerm239 * fTempPerm241) * fRec172[(IOTA-iTempPerm240)&2047]))))));
			int 	iRec169 = iRec175;
			fRec162[0] = fRec167;
			float 	fRec163 = (iTempPerm244 + fRec162[1]);
			float 	fRec164 = fRec168;
			int 	iRec165 = iRec169;
			fRec158[IOTA&2047] = fRec163;
			float 	fRec159 = (((((fTempPerm251 * fTempPerm253) * fTempPerm255) * fTempPerm257) * fRec158[(IOTA-int((iTempPerm248 + 1)))&2047]) + (fTempPerm258 * (((0.16666666666666666f * ((fTempPerm266 * fTempPerm268) * fRec158[(IOTA-int((iTempPerm267 + 1)))&2047])) + ((((fTempPerm263 * fTempPerm264) * fTempPerm265) * fRec158[(IOTA-int((iTempPerm262 + 1)))&2047]) + (0.5f * (((fTempPerm250 * fTempPerm260) * fTempPerm261) * fRec158[(IOTA-int((iTempPerm259 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm269 * fRec158[(IOTA-int((iTempPerm270 + 1)))&2047])))));
			fRec160[0] = fRec164;
			int 	iRec161 = iRec165;
			fRec156[0] = fRec160[1];
			int 	iRec157 = iRec161;
			float 	fRec153 = fRec156[1];
			float 	fRec154 = (iRec157 + fRec156[1]);
			iRec147[0] = iRec152;
			float 	fRec148 = fRec155;
			float 	fRec149 = fRec153;
			float 	fRec150 = fRec154;
			fRec143[IOTA&2047] = fRec148;
			float 	fRec144 = fRec159;
			float 	fRec145 = fRec149;
			float 	fRec146 = fRec150;
			fRec141[0] = fRec144;
			float 	fRec142 = fRec146;
			iRec186[0] = 0;
			int 	iRec187 = iRec186[1];
			float 	fRec190 = (iRec182[1] - (0.99784365473539205f * ((0.69999999999999996f * fRec191[2]) + (0.14999999999999999f * (fRec191[1] + fRec191[3])))));
			fRec205[0] = (fSlow16 + (0.999f * fRec205[1]));
			fTempPerm271 = (fRec205[0] + -0.11f);
			fTempPerm272 = (fConst2 * (fTempPerm0 * fTempPerm271));
			fTempPerm273 = (fTempPerm272 + -1.499995f);
			iTempPerm274 = int(fTempPerm273);
			iTempPerm275 = int(min(fConst1, (float)max(0, iTempPerm274)));
			fTempPerm276 = floorf(fTempPerm273);
			fTempPerm277 = (fTempPerm272 + (-1 - fTempPerm276));
			fTempPerm278 = (0 - fTempPerm277);
			fTempPerm279 = (fTempPerm272 + (-2 - fTempPerm276));
			fTempPerm280 = (0 - (0.5f * fTempPerm279));
			fTempPerm281 = (fTempPerm272 + (-3 - fTempPerm276));
			fTempPerm282 = (0 - (0.33333333333333331f * fTempPerm281));
			fTempPerm283 = (fTempPerm272 + (-4 - fTempPerm276));
			fTempPerm284 = (0 - (0.25f * fTempPerm283));
			fTempPerm285 = (fTempPerm272 - fTempPerm276);
			iTempPerm286 = int(min(fConst1, (float)max(0, (iTempPerm274 + 2))));
			fTempPerm287 = (0 - fTempPerm281);
			fTempPerm288 = (0 - (0.5f * fTempPerm283));
			iTempPerm289 = int(min(fConst1, (float)max(0, (iTempPerm274 + 1))));
			fTempPerm290 = (0 - fTempPerm279);
			fTempPerm291 = (0 - (0.5f * fTempPerm281));
			fTempPerm292 = (0 - (0.33333333333333331f * fTempPerm283));
			fTempPerm293 = (fTempPerm277 * fTempPerm279);
			iTempPerm294 = int(min(fConst1, (float)max(0, (iTempPerm274 + 3))));
			fTempPerm295 = (0 - fTempPerm283);
			fTempPerm296 = (fTempPerm293 * fTempPerm281);
			iTempPerm297 = int(min(fConst1, (float)max(0, (iTempPerm274 + 4))));
			fRec201[0] = (((((fRec178[(IOTA-int((iTempPerm275 + 1)))&2047] * fTempPerm278) * fTempPerm280) * fTempPerm282) * fTempPerm284) + (fTempPerm285 * ((((0.5f * (((fTempPerm277 * fRec178[(IOTA-int((iTempPerm286 + 1)))&2047]) * fTempPerm287) * fTempPerm288)) + (((fRec178[(IOTA-int((iTempPerm289 + 1)))&2047] * fTempPerm290) * fTempPerm291) * fTempPerm292)) + (0.16666666666666666f * ((fTempPerm293 * fRec178[(IOTA-int((iTempPerm294 + 1)))&2047]) * fTempPerm295))) + (0.041666666666666664f * (fTempPerm296 * fRec178[(IOTA-int((iTempPerm297 + 1)))&2047])))));
			fRec206[0] = ((0.59999999999999998f * fRec201[1]) + (0.40000000000000002f * fRec206[1]));
			float 	fRec202 = fRec206[0];
			iVec15[0] = iSlow18;
			iTempPerm298 = ((iSlow18 - iVec15[1]) > 0);
			fRec208[0] = fRec176[1];
			fRec209[IOTA&2047] = (0 - (0.99784365473539205f * ((0.69999999999999996f * fRec208[2]) + (0.14999999999999999f * (fRec208[1] + fRec208[3])))));
			int 	iRec210 = 0;
			fTempPerm299 = (fConst2 * (fRec29[0] * fTempPerm271));
			fTempPerm300 = (fTempPerm299 + -1.499995f);
			iTempPerm301 = int(fTempPerm300);
			iTempPerm302 = int(min(fConst1, (float)max(0, iTempPerm301)));
			fTempPerm303 = floorf(fTempPerm300);
			fTempPerm304 = (fTempPerm299 + (-1 - fTempPerm303));
			fTempPerm305 = (0 - fTempPerm304);
			fTempPerm306 = (fTempPerm299 + (-2 - fTempPerm303));
			fTempPerm307 = (0 - (0.5f * fTempPerm306));
			fTempPerm308 = (fTempPerm299 + (-3 - fTempPerm303));
			fTempPerm309 = (0 - (0.33333333333333331f * fTempPerm308));
			fTempPerm310 = (fTempPerm299 + (-4 - fTempPerm303));
			fTempPerm311 = (0 - (0.25f * fTempPerm310));
			fTempPerm312 = (fTempPerm299 - fTempPerm303);
			iTempPerm313 = int(min(fConst1, (float)max(0, (iTempPerm301 + 2))));
			fTempPerm314 = (0 - fTempPerm308);
			fTempPerm315 = (0 - (0.5f * fTempPerm310));
			iTempPerm316 = int(min(fConst1, (float)max(0, (iTempPerm301 + 1))));
			fTempPerm317 = (0 - fTempPerm306);
			fTempPerm318 = (0 - (0.5f * fTempPerm308));
			fTempPerm319 = (0 - (0.33333333333333331f * fTempPerm310));
			fTempPerm320 = (fTempPerm304 * fTempPerm306);
			iTempPerm321 = int(min(fConst1, (float)max(0, (iTempPerm301 + 3))));
			fTempPerm322 = (0 - fTempPerm310);
			fTempPerm323 = (fTempPerm320 * fTempPerm308);
			iTempPerm324 = int(min(fConst1, (float)max(0, (iTempPerm301 + 4))));
			fVec16[0] = (((((fRec209[(IOTA-int((iTempPerm302 + 2)))&2047] * fTempPerm305) * fTempPerm307) * fTempPerm309) * fTempPerm311) + (fTempPerm312 * ((((0.5f * (((fTempPerm304 * fRec209[(IOTA-int((iTempPerm313 + 2)))&2047]) * fTempPerm314) * fTempPerm315)) + (((fRec209[(IOTA-int((iTempPerm316 + 2)))&2047] * fTempPerm317) * fTempPerm318) * fTempPerm319)) + (0.16666666666666666f * ((fTempPerm320 * fRec209[(IOTA-int((iTempPerm321 + 2)))&2047]) * fTempPerm322))) + (0.041666666666666664f * (fTempPerm323 * fRec209[(IOTA-int((iTempPerm324 + 2)))&2047])))));
			fVec17[0] = (iTempPerm298 + fVec16[1]);
			fRec207[IOTA&2047] = ((0.40000000000000002f * fRec207[(IOTA-1)&2047]) + (0.59999999999999998f * fVec17[1]));
			float 	fRec203 = (((((fTempPerm278 * fTempPerm280) * fTempPerm282) * fTempPerm284) * fRec207[(IOTA-iTempPerm275)&2047]) + (fTempPerm285 * ((0.041666666666666664f * (fTempPerm296 * fRec207[(IOTA-iTempPerm297)&2047])) + (((((fTempPerm290 * fTempPerm291) * fTempPerm292) * fRec207[(IOTA-iTempPerm289)&2047]) + (0.5f * (((fTempPerm277 * fTempPerm287) * fTempPerm288) * fRec207[(IOTA-iTempPerm286)&2047]))) + (0.16666666666666666f * ((fTempPerm293 * fTempPerm295) * fRec207[(IOTA-iTempPerm294)&2047]))))));
			int 	iRec204 = iRec210;
			fRec197[0] = fRec202;
			float 	fRec198 = (iTempPerm298 + fRec197[1]);
			float 	fRec199 = fRec203;
			int 	iRec200 = iRec204;
			fRec193[IOTA&2047] = fRec198;
			float 	fRec194 = (((((fTempPerm305 * fTempPerm307) * fTempPerm309) * fTempPerm311) * fRec193[(IOTA-int((iTempPerm302 + 1)))&2047]) + (fTempPerm312 * (((0.16666666666666666f * ((fTempPerm320 * fTempPerm322) * fRec193[(IOTA-int((iTempPerm321 + 1)))&2047])) + ((((fTempPerm317 * fTempPerm318) * fTempPerm319) * fRec193[(IOTA-int((iTempPerm316 + 1)))&2047]) + (0.5f * (((fTempPerm304 * fTempPerm314) * fTempPerm315) * fRec193[(IOTA-int((iTempPerm313 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm323 * fRec193[(IOTA-int((iTempPerm324 + 1)))&2047])))));
			fRec195[0] = fRec199;
			int 	iRec196 = iRec200;
			fRec191[0] = fRec195[1];
			int 	iRec192 = iRec196;
			float 	fRec188 = fRec191[1];
			float 	fRec189 = (iRec192 + fRec191[1]);
			iRec182[0] = iRec187;
			float 	fRec183 = fRec190;
			float 	fRec184 = fRec188;
			float 	fRec185 = fRec189;
			fRec178[IOTA&2047] = fRec183;
			float 	fRec179 = fRec194;
			float 	fRec180 = fRec184;
			float 	fRec181 = fRec185;
			fRec176[0] = fRec179;
			float 	fRec177 = fRec181;
			fTempPerm325 = (((((fRec1 + fRec37) + fRec72) + fRec107) + fRec142) + fRec177);
			output0[i] = (FAUSTFLOAT)fTempPerm325;
			output1[i] = (FAUSTFLOAT)fTempPerm325;
			// post processing
			fRec176[1] = fRec176[0];
			iRec182[1] = iRec182[0];
			for (int i=3; i>0; i--) fRec191[i] = fRec191[i-1];
			fRec195[1] = fRec195[0];
			fRec197[1] = fRec197[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			for (int i=3; i>0; i--) fRec208[i] = fRec208[i-1];
			iVec15[1] = iVec15[0];
			fRec206[1] = fRec206[0];
			fRec201[1] = fRec201[0];
			fRec205[1] = fRec205[0];
			iRec186[1] = iRec186[0];
			fRec141[1] = fRec141[0];
			iRec147[1] = iRec147[0];
			for (int i=3; i>0; i--) fRec156[i] = fRec156[i-1];
			fRec160[1] = fRec160[0];
			fRec162[1] = fRec162[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			for (int i=3; i>0; i--) fRec173[i] = fRec173[i-1];
			iVec12[1] = iVec12[0];
			fRec171[1] = fRec171[0];
			fRec166[1] = fRec166[0];
			fRec170[1] = fRec170[0];
			iRec151[1] = iRec151[0];
			fRec106[1] = fRec106[0];
			iRec112[1] = iRec112[0];
			for (int i=3; i>0; i--) fRec121[i] = fRec121[i-1];
			fRec125[1] = fRec125[0];
			fRec127[1] = fRec127[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			for (int i=3; i>0; i--) fRec138[i] = fRec138[i-1];
			iVec9[1] = iVec9[0];
			fRec136[1] = fRec136[0];
			fRec131[1] = fRec131[0];
			fRec135[1] = fRec135[0];
			iRec116[1] = iRec116[0];
			fRec71[1] = fRec71[0];
			iRec77[1] = iRec77[0];
			for (int i=3; i>0; i--) fRec86[i] = fRec86[i-1];
			fRec90[1] = fRec90[0];
			fRec92[1] = fRec92[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			for (int i=3; i>0; i--) fRec103[i] = fRec103[i-1];
			iVec6[1] = iVec6[0];
			fRec101[1] = fRec101[0];
			fRec96[1] = fRec96[0];
			fRec100[1] = fRec100[0];
			iRec81[1] = iRec81[0];
			fRec36[1] = fRec36[0];
			iRec42[1] = iRec42[0];
			for (int i=3; i>0; i--) fRec51[i] = fRec51[i-1];
			fRec55[1] = fRec55[0];
			fRec57[1] = fRec57[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			for (int i=3; i>0; i--) fRec68[i] = fRec68[i-1];
			iVec3[1] = iVec3[0];
			fRec66[1] = fRec66[0];
			fRec61[1] = fRec61[0];
			fRec65[1] = fRec65[0];
			iRec46[1] = iRec46[0];
			fRec0[1] = fRec0[0];
			iRec6[1] = iRec6[0];
			for (int i=3; i>0; i--) fRec15[i] = fRec15[i-1];
			fRec19[1] = fRec19[0];
			fRec21[1] = fRec21[0];
			fVec2[1] = fVec2[0];
			iVec1[1] = iVec1[0];
			fVec0[1] = fVec0[0];
			IOTA = IOTA+1;
			for (int i=3; i>0; i--) fRec33[i] = fRec33[i-1];
			fRec31[1] = fRec31[0];
			fRec25[1] = fRec25[0];
			fRec30[1] = fRec30[0];
			fRec29[1] = fRec29[0];
			iRec10[1] = iRec10[0];
		}
	}
};


