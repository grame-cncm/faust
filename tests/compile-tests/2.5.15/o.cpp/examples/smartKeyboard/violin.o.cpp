//----------------------------------------------------------
// name: "violin"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	int 	iRec10[2];
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fRec26[2];
	float 	fTempPerm0;
	float 	fTempPerm1;
	float 	fTempPerm2;
	int 	iTempPerm3;
	int 	iTempPerm4;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fTempPerm13;
	float 	fTempPerm14;
	int 	iTempPerm15;
	float 	fTempPerm16;
	float 	fTempPerm17;
	int 	iTempPerm18;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	int 	iTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	int 	iTempPerm26;
	float 	fRec22[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fRec28[2];
	float 	fRec27[2];
	float 	fRec29[4];
	int 	IOTA;
	float 	fRec30[2048];
	float 	fConst6;
	float 	fTempPerm27;
	float 	fTempPerm28;
	int 	iTempPerm29;
	int 	iTempPerm30;
	float 	fTempPerm31;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	int 	iTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	int 	iTempPerm44;
	float 	fTempPerm45;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	int 	iTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	int 	iTempPerm52;
	float 	fVec0[2];
	float 	fTempPerm53;
	FAUSTFLOAT 	fslider4;
	float 	fRec32[2];
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fTempPerm56;
	float 	fVec1[2048];
	float 	fRec18[2048];
	float 	fRec20[2];
	float 	fRec16[4];
	float 	fConst7;
	float 	fConst8;
	float 	fRec14[3];
	float 	fConst9;
	float 	fTempPerm57;
	int 	iRec6[2];
	float 	fRec2[2048];
	float 	fRec0[2];
	int 	iRec43[2];
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fRec59[2];
	float 	fTempPerm58;
	float 	fTempPerm59;
	float 	fTempPerm60;
	int 	iTempPerm61;
	int 	iTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	float 	fTempPerm68;
	float 	fTempPerm69;
	float 	fTempPerm70;
	float 	fTempPerm71;
	float 	fTempPerm72;
	int 	iTempPerm73;
	float 	fTempPerm74;
	float 	fTempPerm75;
	int 	iTempPerm76;
	float 	fTempPerm77;
	float 	fTempPerm78;
	float 	fTempPerm79;
	float 	fTempPerm80;
	int 	iTempPerm81;
	float 	fTempPerm82;
	float 	fTempPerm83;
	int 	iTempPerm84;
	float 	fRec55[2];
	FAUSTFLOAT 	fslider7;
	float 	fRec60[4];
	float 	fRec61[2048];
	float 	fTempPerm85;
	float 	fTempPerm86;
	int 	iTempPerm87;
	int 	iTempPerm88;
	float 	fTempPerm89;
	float 	fTempPerm90;
	float 	fTempPerm91;
	float 	fTempPerm92;
	float 	fTempPerm93;
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fTempPerm96;
	float 	fTempPerm97;
	float 	fTempPerm98;
	int 	iTempPerm99;
	float 	fTempPerm100;
	float 	fTempPerm101;
	int 	iTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	float 	fTempPerm105;
	float 	fTempPerm106;
	int 	iTempPerm107;
	float 	fTempPerm108;
	float 	fTempPerm109;
	int 	iTempPerm110;
	float 	fVec2[2];
	float 	fTempPerm111;
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fVec3[2048];
	float 	fRec51[2048];
	float 	fRec53[2];
	float 	fRec49[4];
	float 	fRec47[3];
	float 	fTempPerm114;
	int 	iRec39[2];
	float 	fRec35[2048];
	float 	fRec33[2];
	int 	iRec73[2];
	FAUSTFLOAT 	fslider8;
	FAUSTFLOAT 	fslider9;
	float 	fRec89[2];
	float 	fTempPerm115;
	float 	fTempPerm116;
	float 	fTempPerm117;
	int 	iTempPerm118;
	int 	iTempPerm119;
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	float 	fTempPerm124;
	float 	fTempPerm125;
	float 	fTempPerm126;
	float 	fTempPerm127;
	float 	fTempPerm128;
	float 	fTempPerm129;
	int 	iTempPerm130;
	float 	fTempPerm131;
	float 	fTempPerm132;
	int 	iTempPerm133;
	float 	fTempPerm134;
	float 	fTempPerm135;
	float 	fTempPerm136;
	float 	fTempPerm137;
	int 	iTempPerm138;
	float 	fTempPerm139;
	float 	fTempPerm140;
	int 	iTempPerm141;
	float 	fRec85[2];
	FAUSTFLOAT 	fslider10;
	float 	fRec90[4];
	float 	fRec91[2048];
	float 	fTempPerm142;
	float 	fTempPerm143;
	int 	iTempPerm144;
	int 	iTempPerm145;
	float 	fTempPerm146;
	float 	fTempPerm147;
	float 	fTempPerm148;
	float 	fTempPerm149;
	float 	fTempPerm150;
	float 	fTempPerm151;
	float 	fTempPerm152;
	float 	fTempPerm153;
	float 	fTempPerm154;
	float 	fTempPerm155;
	int 	iTempPerm156;
	float 	fTempPerm157;
	float 	fTempPerm158;
	int 	iTempPerm159;
	float 	fTempPerm160;
	float 	fTempPerm161;
	float 	fTempPerm162;
	float 	fTempPerm163;
	int 	iTempPerm164;
	float 	fTempPerm165;
	float 	fTempPerm166;
	int 	iTempPerm167;
	float 	fVec4[2];
	float 	fTempPerm168;
	float 	fTempPerm169;
	float 	fTempPerm170;
	float 	fVec5[2048];
	float 	fRec81[2048];
	float 	fRec83[2];
	float 	fRec79[4];
	float 	fRec77[3];
	float 	fTempPerm171;
	int 	iRec69[2];
	float 	fRec65[2048];
	float 	fRec63[2];
	int 	iRec103[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fRec119[2];
	float 	fTempPerm172;
	float 	fTempPerm173;
	float 	fTempPerm174;
	int 	iTempPerm175;
	int 	iTempPerm176;
	float 	fTempPerm177;
	float 	fTempPerm178;
	float 	fTempPerm179;
	float 	fTempPerm180;
	float 	fTempPerm181;
	float 	fTempPerm182;
	float 	fTempPerm183;
	float 	fTempPerm184;
	float 	fTempPerm185;
	float 	fTempPerm186;
	int 	iTempPerm187;
	float 	fTempPerm188;
	float 	fTempPerm189;
	int 	iTempPerm190;
	float 	fTempPerm191;
	float 	fTempPerm192;
	float 	fTempPerm193;
	float 	fTempPerm194;
	int 	iTempPerm195;
	float 	fTempPerm196;
	float 	fTempPerm197;
	int 	iTempPerm198;
	float 	fRec115[2];
	FAUSTFLOAT 	fslider13;
	float 	fRec120[4];
	float 	fRec121[2048];
	float 	fTempPerm199;
	float 	fTempPerm200;
	int 	iTempPerm201;
	int 	iTempPerm202;
	float 	fTempPerm203;
	float 	fTempPerm204;
	float 	fTempPerm205;
	float 	fTempPerm206;
	float 	fTempPerm207;
	float 	fTempPerm208;
	float 	fTempPerm209;
	float 	fTempPerm210;
	float 	fTempPerm211;
	float 	fTempPerm212;
	int 	iTempPerm213;
	float 	fTempPerm214;
	float 	fTempPerm215;
	int 	iTempPerm216;
	float 	fTempPerm217;
	float 	fTempPerm218;
	float 	fTempPerm219;
	float 	fTempPerm220;
	int 	iTempPerm221;
	float 	fTempPerm222;
	float 	fTempPerm223;
	int 	iTempPerm224;
	float 	fVec6[2];
	float 	fTempPerm225;
	float 	fTempPerm226;
	float 	fTempPerm227;
	float 	fVec7[2048];
	float 	fRec111[2048];
	float 	fRec113[2];
	float 	fRec109[4];
	float 	fRec107[3];
	float 	fTempPerm228;
	int 	iRec99[2];
	float 	fRec95[2048];
	float 	fRec93[2];
	float 	fTempPerm229;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("interface", "SmartKeyboard{  'Number of Keyboards':'5',  'Max Keyboard Polyphony':'0',  'Rounding Mode':'2',  'Send Fingers Count':'1',  'Keyboard 0 - Number of Keys':'19',  'Keyboard 1 - Number of Keys':'19',  'Keyboard 2 - Number of Keys':'19',  'Keyboard 3 - Number of Keys':'19',  'Keyboard 4 - Number of Keys':'1',  'Keyboard 0 - Lowest Key':'55',  'Keyboard 1 - Lowest Key':'62',  'Keyboard 2 - Lowest Key':'69',  'Keyboard 3 - Lowest Key':'76',  'Keyboard 0 - Send Keyboard Freq':'1',  'Keyboard 1 - Send Keyboard Freq':'1',  'Keyboard 2 - Send Keyboard Freq':'1',  'Keyboard 3 - Send Keyboard Freq':'1',  'Keyboard 4 - Send Freq':'0',  'Keyboard 4 - Send Key X':'1',  'Keyboard 4 - Send Key Y':'1',  'Keyboard 4 - Key 0 - Label':'Bow',  'Keyboard 4 - Static Mode':'1' }");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "violin");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = tanf((1570.7963267948965f / fConst0));
		fConst2 = (1.0f / fConst1);
		fConst3 = (1.0f / (((fConst2 + 0.5f) / fConst1) + 1));
		fConst4 = (0.0088235294117647058f * fConst0);
		fConst5 = (0.00044117647058823536f * fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		iTempPerm3 = 0;
		iTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		iTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		iTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		iTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		iTempPerm26 = 0;
		fConst6 = (0.0010294117647058822f * fConst0);
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		iTempPerm29 = 0;
		iTempPerm30 = 0;
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		iTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		iTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		iTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		iTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fConst7 = (((fConst2 + -0.5f) / fConst1) + 1);
		fConst8 = (2 * (1 - (1.0f / faustpower<2>(fConst1))));
		fConst9 = (0 - fConst2);
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		iTempPerm61 = 0;
		iTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		iTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		iTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		iTempPerm81 = 0;
		fTempPerm82 = 0;
		fTempPerm83 = 0;
		iTempPerm84 = 0;
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		iTempPerm87 = 0;
		iTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		iTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		iTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		iTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		iTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		iTempPerm118 = 0;
		iTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		iTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		iTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		iTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		iTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		iTempPerm144 = 0;
		iTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		iTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		iTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		iTempPerm164 = 0;
		fTempPerm165 = 0;
		fTempPerm166 = 0;
		iTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
		iTempPerm175 = 0;
		iTempPerm176 = 0;
		fTempPerm177 = 0;
		fTempPerm178 = 0;
		fTempPerm179 = 0;
		fTempPerm180 = 0;
		fTempPerm181 = 0;
		fTempPerm182 = 0;
		fTempPerm183 = 0;
		fTempPerm184 = 0;
		fTempPerm185 = 0;
		fTempPerm186 = 0;
		iTempPerm187 = 0;
		fTempPerm188 = 0;
		fTempPerm189 = 0;
		iTempPerm190 = 0;
		fTempPerm191 = 0;
		fTempPerm192 = 0;
		fTempPerm193 = 0;
		fTempPerm194 = 0;
		iTempPerm195 = 0;
		fTempPerm196 = 0;
		fTempPerm197 = 0;
		iTempPerm198 = 0;
		fTempPerm199 = 0;
		fTempPerm200 = 0;
		iTempPerm201 = 0;
		iTempPerm202 = 0;
		fTempPerm203 = 0;
		fTempPerm204 = 0;
		fTempPerm205 = 0;
		fTempPerm206 = 0;
		fTempPerm207 = 0;
		fTempPerm208 = 0;
		fTempPerm209 = 0;
		fTempPerm210 = 0;
		fTempPerm211 = 0;
		fTempPerm212 = 0;
		iTempPerm213 = 0;
		fTempPerm214 = 0;
		fTempPerm215 = 0;
		iTempPerm216 = 0;
		fTempPerm217 = 0;
		fTempPerm218 = 0;
		fTempPerm219 = 0;
		fTempPerm220 = 0;
		iTempPerm221 = 0;
		fTempPerm222 = 0;
		fTempPerm223 = 0;
		iTempPerm224 = 0;
		fTempPerm225 = 0;
		fTempPerm226 = 0;
		fTempPerm227 = 0;
		fTempPerm228 = 0;
		fTempPerm229 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 220.0f;
		fslider1 = 1.0f;
		fslider2 = 0.0f;
		fslider3 = 0.0f;
		fslider4 = 0.0f;
		fslider5 = 330.0f;
		fslider6 = 1.0f;
		fslider7 = 0.0f;
		fslider8 = 440.0f;
		fslider9 = 1.0f;
		fslider10 = 0.0f;
		fslider11 = 550.0f;
		fslider12 = 1.0f;
		fslider13 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iRec10[i] = 0;
		for (int i=0; i<2; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<4; i++) fRec29[i] = 0;
		IOTA = 0;
		for (int i=0; i<2048; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2048; i++) fVec1[i] = 0;
		for (int i=0; i<2048; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<4; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<2048; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) iRec43[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<4; i++) fRec60[i] = 0;
		for (int i=0; i<2048; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2048; i++) fVec3[i] = 0;
		for (int i=0; i<2048; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec53[i] = 0;
		for (int i=0; i<4; i++) fRec49[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) iRec39[i] = 0;
		for (int i=0; i<2048; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) iRec73[i] = 0;
		for (int i=0; i<2; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec85[i] = 0;
		for (int i=0; i<4; i++) fRec90[i] = 0;
		for (int i=0; i<2048; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2048; i++) fVec5[i] = 0;
		for (int i=0; i<2048; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<4; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) iRec69[i] = 0;
		for (int i=0; i<2048; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) iRec103[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) fRec115[i] = 0;
		for (int i=0; i<4; i++) fRec120[i] = 0;
		for (int i=0; i<2048; i++) fRec121[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2048; i++) fVec7[i] = 0;
		for (int i=0; i<2048; i++) fRec111[i] = 0;
		for (int i=0; i<2; i++) fRec113[i] = 0;
		for (int i=0; i<4; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<2; i++) iRec99[i] = 0;
		for (int i=0; i<2048; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fRec93[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("violin");
		ui_interface->addHorizontalSlider("kb0bend", &fslider1, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb0fingers", &fslider2, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb0freq", &fslider0, 220.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1bend", &fslider6, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb1fingers", &fslider7, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb1freq", &fslider5, 330.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2bend", &fslider9, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb2fingers", &fslider10, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb2freq", &fslider8, 440.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3bend", &fslider12, 1.0f, 0.0f, 10.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb3fingers", &fslider13, 0.0f, 0.0f, 10.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb3freq", &fslider11, 550.0f, 20.0f, 10000.0f, 0.01f);
		ui_interface->addHorizontalSlider("kb4k0x", &fslider3, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->addHorizontalSlider("kb4k0y", &fslider4, 0.0f, 0.0f, 1.0f, 1.0f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = (0.3400000000000003f / (float(fslider0) * float(fslider1)));
		int 	iSlow1 = (int(float(fslider2)) > 0);
		float 	fSlow2 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow3 = (0.0010000000000000009f * float(fslider4));
		float 	fSlow4 = (0.3400000000000003f / (float(fslider5) * float(fslider6)));
		int 	iSlow5 = (int(float(fslider7)) > 0);
		float 	fSlow6 = (0.3400000000000003f / (float(fslider8) * float(fslider9)));
		int 	iSlow7 = (int(float(fslider10)) > 0);
		float 	fSlow8 = (0.3400000000000003f / (float(fslider11) * float(fslider12)));
		int 	iSlow9 = (int(float(fslider13)) > 0);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iRec10[0] = 0;
			int 	iRec11 = iRec10[1];
			float 	fRec15 = (iRec6[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec16[2]) + (0.20000000000000001f * (fRec16[1] + fRec16[3])))));
			fRec26[0] = (fSlow0 + (0.999f * fRec26[1]));
			fTempPerm0 = (fRec26[0] + -0.080000000000000002f);
			fTempPerm1 = (fConst5 * fTempPerm0);
			fTempPerm2 = (fTempPerm1 + -1.499995f);
			iTempPerm3 = int(fTempPerm2);
			iTempPerm4 = int(min(fConst4, (float)max(0, iTempPerm3)));
			fTempPerm5 = floorf(fTempPerm2);
			fTempPerm6 = (fTempPerm1 + (-1 - fTempPerm5));
			fTempPerm7 = (0 - fTempPerm6);
			fTempPerm8 = (fTempPerm1 + (-2 - fTempPerm5));
			fTempPerm9 = (0 - (0.5f * fTempPerm8));
			fTempPerm10 = (fTempPerm1 + (-3 - fTempPerm5));
			fTempPerm11 = (0 - (0.33333333333333331f * fTempPerm10));
			fTempPerm12 = (fTempPerm1 + (-4 - fTempPerm5));
			fTempPerm13 = (0 - (0.25f * fTempPerm12));
			fTempPerm14 = (fTempPerm1 - fTempPerm5);
			iTempPerm15 = int(min(fConst4, (float)max(0, (iTempPerm3 + 2))));
			fTempPerm16 = (0 - fTempPerm10);
			fTempPerm17 = (0 - (0.5f * fTempPerm12));
			iTempPerm18 = int(min(fConst4, (float)max(0, (iTempPerm3 + 1))));
			fTempPerm19 = (0 - fTempPerm8);
			fTempPerm20 = (0 - (0.5f * fTempPerm10));
			fTempPerm21 = (0 - (0.33333333333333331f * fTempPerm12));
			fTempPerm22 = (fTempPerm6 * fTempPerm8);
			iTempPerm23 = int(min(fConst4, (float)max(0, (iTempPerm3 + 3))));
			fTempPerm24 = (0 - fTempPerm12);
			fTempPerm25 = (fTempPerm22 * fTempPerm10);
			iTempPerm26 = int(min(fConst4, (float)max(0, (iTempPerm3 + 4))));
			fRec22[0] = (((((fRec2[(IOTA-int((iTempPerm4 + 1)))&2047] * fTempPerm7) * fTempPerm9) * fTempPerm11) * fTempPerm13) + (fTempPerm14 * ((((0.5f * (((fTempPerm6 * fRec2[(IOTA-int((iTempPerm15 + 1)))&2047]) * fTempPerm16) * fTempPerm17)) + (((fRec2[(IOTA-int((iTempPerm18 + 1)))&2047] * fTempPerm19) * fTempPerm20) * fTempPerm21)) + (0.16666666666666666f * ((fTempPerm22 * fRec2[(IOTA-int((iTempPerm23 + 1)))&2047]) * fTempPerm24))) + (0.041666666666666664f * (fTempPerm25 * fRec2[(IOTA-int((iTempPerm26 + 1)))&2047])))));
			fRec28[0] = (fSlow2 + (0.999f * fRec28[1]));
			fRec27[0] = ((0.999f * fRec27[1]) + (0.0010000000000000009f * min((float)1, (8000 * fabsf((fRec28[0] - fRec28[1]))))));
			fRec29[0] = fRec0[1];
			fRec30[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec29[2]) + (0.10000000000000001f * (fRec29[1] + fRec29[3])))));
			int 	iRec31 = 0;
			fTempPerm27 = (fConst6 * fTempPerm0);
			fTempPerm28 = (fTempPerm27 + -1.499995f);
			iTempPerm29 = int(fTempPerm28);
			iTempPerm30 = int(min(fConst4, (float)max(0, iTempPerm29)));
			fTempPerm31 = floorf(fTempPerm28);
			fTempPerm32 = (fTempPerm27 + (-1 - fTempPerm31));
			fTempPerm33 = (0 - fTempPerm32);
			fTempPerm34 = (fTempPerm27 + (-2 - fTempPerm31));
			fTempPerm35 = (0 - (0.5f * fTempPerm34));
			fTempPerm36 = (fTempPerm27 + (-3 - fTempPerm31));
			fTempPerm37 = (0 - (0.33333333333333331f * fTempPerm36));
			fTempPerm38 = (fTempPerm27 + (-4 - fTempPerm31));
			fTempPerm39 = (0 - (0.25f * fTempPerm38));
			fTempPerm40 = (fTempPerm27 - fTempPerm31);
			iTempPerm41 = int(min(fConst4, (float)max(0, (iTempPerm29 + 2))));
			fTempPerm42 = (0 - fTempPerm36);
			fTempPerm43 = (0 - (0.5f * fTempPerm38));
			iTempPerm44 = int(min(fConst4, (float)max(0, (iTempPerm29 + 1))));
			fTempPerm45 = (0 - fTempPerm34);
			fTempPerm46 = (0 - (0.5f * fTempPerm36));
			fTempPerm47 = (0 - (0.33333333333333331f * fTempPerm38));
			fTempPerm48 = (fTempPerm32 * fTempPerm34);
			iTempPerm49 = int(min(fConst4, (float)max(0, (iTempPerm29 + 3))));
			fTempPerm50 = (0 - fTempPerm38);
			fTempPerm51 = (fTempPerm48 * fTempPerm36);
			iTempPerm52 = int(min(fConst4, (float)max(0, (iTempPerm29 + 4))));
			fVec0[0] = (((((fRec30[(IOTA-int((iTempPerm30 + 2)))&2047] * fTempPerm33) * fTempPerm35) * fTempPerm37) * fTempPerm39) + (fTempPerm40 * ((((0.5f * (((fTempPerm32 * fRec30[(IOTA-int((iTempPerm41 + 2)))&2047]) * fTempPerm42) * fTempPerm43)) + (((fRec30[(IOTA-int((iTempPerm44 + 2)))&2047] * fTempPerm45) * fTempPerm46) * fTempPerm47)) + (0.16666666666666666f * ((fTempPerm48 * fRec30[(IOTA-int((iTempPerm49 + 2)))&2047]) * fTempPerm50))) + (0.041666666666666664f * (fTempPerm51 * fRec30[(IOTA-int((iTempPerm52 + 2)))&2047])))));
			fTempPerm53 = ((iSlow1 * fRec27[0]) - (fRec22[1] + fVec0[1]));
			fRec32[0] = (fSlow3 + (0.999f * fRec32[1]));
			fTempPerm54 = (5 - (4 * fRec32[0]));
			fTempPerm55 = (fTempPerm53 * min((float)1, (1.0f / faustpower<4>((fabsf((fTempPerm54 * fTempPerm53)) + 0.75f)))));
			float 	fRec23 = (fRec22[1] + fTempPerm55);
			fTempPerm56 = (fVec0[1] + fTempPerm55);
			fVec1[IOTA&2047] = fTempPerm56;
			float 	fRec24 = (((((fTempPerm7 * fTempPerm9) * fTempPerm11) * fTempPerm13) * fVec1[(IOTA-iTempPerm4)&2047]) + (fTempPerm14 * ((0.041666666666666664f * (fTempPerm25 * fVec1[(IOTA-iTempPerm26)&2047])) + (((((fTempPerm19 * fTempPerm20) * fTempPerm21) * fVec1[(IOTA-iTempPerm18)&2047]) + (0.5f * (((fTempPerm6 * fTempPerm16) * fTempPerm17) * fVec1[(IOTA-iTempPerm15)&2047]))) + (0.16666666666666666f * ((fTempPerm22 * fTempPerm24) * fVec1[(IOTA-iTempPerm23)&2047]))))));
			int 	iRec25 = iRec31;
			fRec18[IOTA&2047] = fRec23;
			float 	fRec19 = (((((fTempPerm33 * fTempPerm35) * fTempPerm37) * fTempPerm39) * fRec18[(IOTA-int((iTempPerm30 + 1)))&2047]) + (fTempPerm40 * (((0.16666666666666666f * ((fTempPerm48 * fTempPerm50) * fRec18[(IOTA-int((iTempPerm49 + 1)))&2047])) + ((((fTempPerm45 * fTempPerm46) * fTempPerm47) * fRec18[(IOTA-int((iTempPerm44 + 1)))&2047]) + (0.5f * (((fTempPerm32 * fTempPerm42) * fTempPerm43) * fRec18[(IOTA-int((iTempPerm41 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm51 * fRec18[(IOTA-int((iTempPerm52 + 1)))&2047])))));
			fRec20[0] = fRec24;
			int 	iRec21 = iRec25;
			fRec16[0] = fRec20[1];
			int 	iRec17 = iRec21;
			fRec14[0] = (fRec16[1] - (fConst3 * ((fConst7 * fRec14[2]) + (fConst8 * fRec14[1]))));
			fTempPerm57 = (fConst3 * ((fConst2 * fRec14[0]) + (fConst9 * fRec14[2])));
			float 	fRec12 = fTempPerm57;
			float 	fRec13 = (iRec17 + fTempPerm57);
			iRec6[0] = iRec11;
			float 	fRec7 = fRec15;
			float 	fRec8 = fRec12;
			float 	fRec9 = fRec13;
			fRec2[IOTA&2047] = fRec7;
			float 	fRec3 = fRec19;
			float 	fRec4 = fRec8;
			float 	fRec5 = fRec9;
			fRec0[0] = fRec3;
			float 	fRec1 = fRec5;
			iRec43[0] = 0;
			int 	iRec44 = iRec43[1];
			float 	fRec48 = (iRec39[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec49[2]) + (0.20000000000000001f * (fRec49[1] + fRec49[3])))));
			fRec59[0] = (fSlow4 + (0.999f * fRec59[1]));
			fTempPerm58 = (fRec59[0] + -0.080000000000000002f);
			fTempPerm59 = (fConst5 * fTempPerm58);
			fTempPerm60 = (fTempPerm59 + -1.499995f);
			iTempPerm61 = int(fTempPerm60);
			iTempPerm62 = int(min(fConst4, (float)max(0, iTempPerm61)));
			fTempPerm63 = floorf(fTempPerm60);
			fTempPerm64 = (fTempPerm59 + (-1 - fTempPerm63));
			fTempPerm65 = (0 - fTempPerm64);
			fTempPerm66 = (fTempPerm59 + (-2 - fTempPerm63));
			fTempPerm67 = (0 - (0.5f * fTempPerm66));
			fTempPerm68 = (fTempPerm59 + (-3 - fTempPerm63));
			fTempPerm69 = (0 - (0.33333333333333331f * fTempPerm68));
			fTempPerm70 = (fTempPerm59 + (-4 - fTempPerm63));
			fTempPerm71 = (0 - (0.25f * fTempPerm70));
			fTempPerm72 = (fTempPerm59 - fTempPerm63);
			iTempPerm73 = int(min(fConst4, (float)max(0, (iTempPerm61 + 2))));
			fTempPerm74 = (0 - fTempPerm68);
			fTempPerm75 = (0 - (0.5f * fTempPerm70));
			iTempPerm76 = int(min(fConst4, (float)max(0, (iTempPerm61 + 1))));
			fTempPerm77 = (0 - fTempPerm66);
			fTempPerm78 = (0 - (0.5f * fTempPerm68));
			fTempPerm79 = (0 - (0.33333333333333331f * fTempPerm70));
			fTempPerm80 = (fTempPerm64 * fTempPerm66);
			iTempPerm81 = int(min(fConst4, (float)max(0, (iTempPerm61 + 3))));
			fTempPerm82 = (0 - fTempPerm70);
			fTempPerm83 = (fTempPerm80 * fTempPerm68);
			iTempPerm84 = int(min(fConst4, (float)max(0, (iTempPerm61 + 4))));
			fRec55[0] = (((((fRec35[(IOTA-int((iTempPerm62 + 1)))&2047] * fTempPerm65) * fTempPerm67) * fTempPerm69) * fTempPerm71) + (fTempPerm72 * ((((0.5f * (((fTempPerm64 * fRec35[(IOTA-int((iTempPerm73 + 1)))&2047]) * fTempPerm74) * fTempPerm75)) + (((fRec35[(IOTA-int((iTempPerm76 + 1)))&2047] * fTempPerm77) * fTempPerm78) * fTempPerm79)) + (0.16666666666666666f * ((fTempPerm80 * fRec35[(IOTA-int((iTempPerm81 + 1)))&2047]) * fTempPerm82))) + (0.041666666666666664f * (fTempPerm83 * fRec35[(IOTA-int((iTempPerm84 + 1)))&2047])))));
			fRec60[0] = fRec33[1];
			fRec61[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec60[2]) + (0.10000000000000001f * (fRec60[1] + fRec60[3])))));
			int 	iRec62 = 0;
			fTempPerm85 = (fConst6 * fTempPerm58);
			fTempPerm86 = (fTempPerm85 + -1.499995f);
			iTempPerm87 = int(fTempPerm86);
			iTempPerm88 = int(min(fConst4, (float)max(0, iTempPerm87)));
			fTempPerm89 = floorf(fTempPerm86);
			fTempPerm90 = (fTempPerm85 + (-1 - fTempPerm89));
			fTempPerm91 = (0 - fTempPerm90);
			fTempPerm92 = (fTempPerm85 + (-2 - fTempPerm89));
			fTempPerm93 = (0 - (0.5f * fTempPerm92));
			fTempPerm94 = (fTempPerm85 + (-3 - fTempPerm89));
			fTempPerm95 = (0 - (0.33333333333333331f * fTempPerm94));
			fTempPerm96 = (fTempPerm85 + (-4 - fTempPerm89));
			fTempPerm97 = (0 - (0.25f * fTempPerm96));
			fTempPerm98 = (fTempPerm85 - fTempPerm89);
			iTempPerm99 = int(min(fConst4, (float)max(0, (iTempPerm87 + 2))));
			fTempPerm100 = (0 - fTempPerm94);
			fTempPerm101 = (0 - (0.5f * fTempPerm96));
			iTempPerm102 = int(min(fConst4, (float)max(0, (iTempPerm87 + 1))));
			fTempPerm103 = (0 - fTempPerm92);
			fTempPerm104 = (0 - (0.5f * fTempPerm94));
			fTempPerm105 = (0 - (0.33333333333333331f * fTempPerm96));
			fTempPerm106 = (fTempPerm90 * fTempPerm92);
			iTempPerm107 = int(min(fConst4, (float)max(0, (iTempPerm87 + 3))));
			fTempPerm108 = (0 - fTempPerm96);
			fTempPerm109 = (fTempPerm106 * fTempPerm94);
			iTempPerm110 = int(min(fConst4, (float)max(0, (iTempPerm87 + 4))));
			fVec2[0] = (((((fRec61[(IOTA-int((iTempPerm88 + 2)))&2047] * fTempPerm91) * fTempPerm93) * fTempPerm95) * fTempPerm97) + (fTempPerm98 * ((((0.5f * (((fTempPerm90 * fRec61[(IOTA-int((iTempPerm99 + 2)))&2047]) * fTempPerm100) * fTempPerm101)) + (((fRec61[(IOTA-int((iTempPerm102 + 2)))&2047] * fTempPerm103) * fTempPerm104) * fTempPerm105)) + (0.16666666666666666f * ((fTempPerm106 * fRec61[(IOTA-int((iTempPerm107 + 2)))&2047]) * fTempPerm108))) + (0.041666666666666664f * (fTempPerm109 * fRec61[(IOTA-int((iTempPerm110 + 2)))&2047])))));
			fTempPerm111 = ((iSlow5 * fRec27[0]) - (fRec55[1] + fVec2[1]));
			fTempPerm112 = (fTempPerm111 * min((float)1, (1.0f / faustpower<4>((fabsf((fTempPerm54 * fTempPerm111)) + 0.75f)))));
			float 	fRec56 = (fRec55[1] + fTempPerm112);
			fTempPerm113 = (fVec2[1] + fTempPerm112);
			fVec3[IOTA&2047] = fTempPerm113;
			float 	fRec57 = (((((fTempPerm65 * fTempPerm67) * fTempPerm69) * fTempPerm71) * fVec3[(IOTA-iTempPerm62)&2047]) + (fTempPerm72 * ((0.041666666666666664f * (fTempPerm83 * fVec3[(IOTA-iTempPerm84)&2047])) + (((((fTempPerm77 * fTempPerm78) * fTempPerm79) * fVec3[(IOTA-iTempPerm76)&2047]) + (0.5f * (((fTempPerm64 * fTempPerm74) * fTempPerm75) * fVec3[(IOTA-iTempPerm73)&2047]))) + (0.16666666666666666f * ((fTempPerm80 * fTempPerm82) * fVec3[(IOTA-iTempPerm81)&2047]))))));
			int 	iRec58 = iRec62;
			fRec51[IOTA&2047] = fRec56;
			float 	fRec52 = (((((fTempPerm91 * fTempPerm93) * fTempPerm95) * fTempPerm97) * fRec51[(IOTA-int((iTempPerm88 + 1)))&2047]) + (fTempPerm98 * (((0.16666666666666666f * ((fTempPerm106 * fTempPerm108) * fRec51[(IOTA-int((iTempPerm107 + 1)))&2047])) + ((((fTempPerm103 * fTempPerm104) * fTempPerm105) * fRec51[(IOTA-int((iTempPerm102 + 1)))&2047]) + (0.5f * (((fTempPerm90 * fTempPerm100) * fTempPerm101) * fRec51[(IOTA-int((iTempPerm99 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm109 * fRec51[(IOTA-int((iTempPerm110 + 1)))&2047])))));
			fRec53[0] = fRec57;
			int 	iRec54 = iRec58;
			fRec49[0] = fRec53[1];
			int 	iRec50 = iRec54;
			fRec47[0] = (fRec49[1] - (fConst3 * ((fConst8 * fRec47[1]) + (fConst7 * fRec47[2]))));
			fTempPerm114 = (fConst3 * ((fConst2 * fRec47[0]) + (fConst9 * fRec47[2])));
			float 	fRec45 = fTempPerm114;
			float 	fRec46 = (iRec50 + fTempPerm114);
			iRec39[0] = iRec44;
			float 	fRec40 = fRec48;
			float 	fRec41 = fRec45;
			float 	fRec42 = fRec46;
			fRec35[IOTA&2047] = fRec40;
			float 	fRec36 = fRec52;
			float 	fRec37 = fRec41;
			float 	fRec38 = fRec42;
			fRec33[0] = fRec36;
			float 	fRec34 = fRec38;
			iRec73[0] = 0;
			int 	iRec74 = iRec73[1];
			float 	fRec78 = (iRec69[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec79[2]) + (0.20000000000000001f * (fRec79[1] + fRec79[3])))));
			fRec89[0] = (fSlow6 + (0.999f * fRec89[1]));
			fTempPerm115 = (fRec89[0] + -0.080000000000000002f);
			fTempPerm116 = (fConst5 * fTempPerm115);
			fTempPerm117 = (fTempPerm116 + -1.499995f);
			iTempPerm118 = int(fTempPerm117);
			iTempPerm119 = int(min(fConst4, (float)max(0, iTempPerm118)));
			fTempPerm120 = floorf(fTempPerm117);
			fTempPerm121 = (fTempPerm116 + (-1 - fTempPerm120));
			fTempPerm122 = (0 - fTempPerm121);
			fTempPerm123 = (fTempPerm116 + (-2 - fTempPerm120));
			fTempPerm124 = (0 - (0.5f * fTempPerm123));
			fTempPerm125 = (fTempPerm116 + (-3 - fTempPerm120));
			fTempPerm126 = (0 - (0.33333333333333331f * fTempPerm125));
			fTempPerm127 = (fTempPerm116 + (-4 - fTempPerm120));
			fTempPerm128 = (0 - (0.25f * fTempPerm127));
			fTempPerm129 = (fTempPerm116 - fTempPerm120);
			iTempPerm130 = int(min(fConst4, (float)max(0, (iTempPerm118 + 2))));
			fTempPerm131 = (0 - fTempPerm125);
			fTempPerm132 = (0 - (0.5f * fTempPerm127));
			iTempPerm133 = int(min(fConst4, (float)max(0, (iTempPerm118 + 1))));
			fTempPerm134 = (0 - fTempPerm123);
			fTempPerm135 = (0 - (0.5f * fTempPerm125));
			fTempPerm136 = (0 - (0.33333333333333331f * fTempPerm127));
			fTempPerm137 = (fTempPerm121 * fTempPerm123);
			iTempPerm138 = int(min(fConst4, (float)max(0, (iTempPerm118 + 3))));
			fTempPerm139 = (0 - fTempPerm127);
			fTempPerm140 = (fTempPerm137 * fTempPerm125);
			iTempPerm141 = int(min(fConst4, (float)max(0, (iTempPerm118 + 4))));
			fRec85[0] = (((((fRec65[(IOTA-int((iTempPerm119 + 1)))&2047] * fTempPerm122) * fTempPerm124) * fTempPerm126) * fTempPerm128) + (fTempPerm129 * ((((0.5f * (((fTempPerm121 * fRec65[(IOTA-int((iTempPerm130 + 1)))&2047]) * fTempPerm131) * fTempPerm132)) + (((fRec65[(IOTA-int((iTempPerm133 + 1)))&2047] * fTempPerm134) * fTempPerm135) * fTempPerm136)) + (0.16666666666666666f * ((fTempPerm137 * fRec65[(IOTA-int((iTempPerm138 + 1)))&2047]) * fTempPerm139))) + (0.041666666666666664f * (fTempPerm140 * fRec65[(IOTA-int((iTempPerm141 + 1)))&2047])))));
			fRec90[0] = fRec63[1];
			fRec91[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec90[2]) + (0.10000000000000001f * (fRec90[1] + fRec90[3])))));
			int 	iRec92 = 0;
			fTempPerm142 = (fConst6 * fTempPerm115);
			fTempPerm143 = (fTempPerm142 + -1.499995f);
			iTempPerm144 = int(fTempPerm143);
			iTempPerm145 = int(min(fConst4, (float)max(0, iTempPerm144)));
			fTempPerm146 = floorf(fTempPerm143);
			fTempPerm147 = (fTempPerm142 + (-1 - fTempPerm146));
			fTempPerm148 = (0 - fTempPerm147);
			fTempPerm149 = (fTempPerm142 + (-2 - fTempPerm146));
			fTempPerm150 = (0 - (0.5f * fTempPerm149));
			fTempPerm151 = (fTempPerm142 + (-3 - fTempPerm146));
			fTempPerm152 = (0 - (0.33333333333333331f * fTempPerm151));
			fTempPerm153 = (fTempPerm142 + (-4 - fTempPerm146));
			fTempPerm154 = (0 - (0.25f * fTempPerm153));
			fTempPerm155 = (fTempPerm142 - fTempPerm146);
			iTempPerm156 = int(min(fConst4, (float)max(0, (iTempPerm144 + 2))));
			fTempPerm157 = (0 - fTempPerm151);
			fTempPerm158 = (0 - (0.5f * fTempPerm153));
			iTempPerm159 = int(min(fConst4, (float)max(0, (iTempPerm144 + 1))));
			fTempPerm160 = (0 - fTempPerm149);
			fTempPerm161 = (0 - (0.5f * fTempPerm151));
			fTempPerm162 = (0 - (0.33333333333333331f * fTempPerm153));
			fTempPerm163 = (fTempPerm147 * fTempPerm149);
			iTempPerm164 = int(min(fConst4, (float)max(0, (iTempPerm144 + 3))));
			fTempPerm165 = (0 - fTempPerm153);
			fTempPerm166 = (fTempPerm163 * fTempPerm151);
			iTempPerm167 = int(min(fConst4, (float)max(0, (iTempPerm144 + 4))));
			fVec4[0] = (((((fRec91[(IOTA-int((iTempPerm145 + 2)))&2047] * fTempPerm148) * fTempPerm150) * fTempPerm152) * fTempPerm154) + (fTempPerm155 * ((((0.5f * (((fTempPerm147 * fRec91[(IOTA-int((iTempPerm156 + 2)))&2047]) * fTempPerm157) * fTempPerm158)) + (((fRec91[(IOTA-int((iTempPerm159 + 2)))&2047] * fTempPerm160) * fTempPerm161) * fTempPerm162)) + (0.16666666666666666f * ((fTempPerm163 * fRec91[(IOTA-int((iTempPerm164 + 2)))&2047]) * fTempPerm165))) + (0.041666666666666664f * (fTempPerm166 * fRec91[(IOTA-int((iTempPerm167 + 2)))&2047])))));
			fTempPerm168 = ((iSlow7 * fRec27[0]) - (fRec85[1] + fVec4[1]));
			fTempPerm169 = (fTempPerm168 * min((float)1, (1.0f / faustpower<4>((fabsf((fTempPerm54 * fTempPerm168)) + 0.75f)))));
			float 	fRec86 = (fRec85[1] + fTempPerm169);
			fTempPerm170 = (fVec4[1] + fTempPerm169);
			fVec5[IOTA&2047] = fTempPerm170;
			float 	fRec87 = (((((fTempPerm122 * fTempPerm124) * fTempPerm126) * fTempPerm128) * fVec5[(IOTA-iTempPerm119)&2047]) + (fTempPerm129 * ((0.041666666666666664f * (fTempPerm140 * fVec5[(IOTA-iTempPerm141)&2047])) + (((((fTempPerm134 * fTempPerm135) * fTempPerm136) * fVec5[(IOTA-iTempPerm133)&2047]) + (0.5f * (((fTempPerm121 * fTempPerm131) * fTempPerm132) * fVec5[(IOTA-iTempPerm130)&2047]))) + (0.16666666666666666f * ((fTempPerm137 * fTempPerm139) * fVec5[(IOTA-iTempPerm138)&2047]))))));
			int 	iRec88 = iRec92;
			fRec81[IOTA&2047] = fRec86;
			float 	fRec82 = (((((fTempPerm148 * fTempPerm150) * fTempPerm152) * fTempPerm154) * fRec81[(IOTA-int((iTempPerm145 + 1)))&2047]) + (fTempPerm155 * (((0.16666666666666666f * ((fTempPerm163 * fTempPerm165) * fRec81[(IOTA-int((iTempPerm164 + 1)))&2047])) + ((((fTempPerm160 * fTempPerm161) * fTempPerm162) * fRec81[(IOTA-int((iTempPerm159 + 1)))&2047]) + (0.5f * (((fTempPerm147 * fTempPerm157) * fTempPerm158) * fRec81[(IOTA-int((iTempPerm156 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm166 * fRec81[(IOTA-int((iTempPerm167 + 1)))&2047])))));
			fRec83[0] = fRec87;
			int 	iRec84 = iRec88;
			fRec79[0] = fRec83[1];
			int 	iRec80 = iRec84;
			fRec77[0] = (fRec79[1] - (fConst3 * ((fConst8 * fRec77[1]) + (fConst7 * fRec77[2]))));
			fTempPerm171 = (fConst3 * ((fConst2 * fRec77[0]) + (fConst9 * fRec77[2])));
			float 	fRec75 = fTempPerm171;
			float 	fRec76 = (iRec80 + fTempPerm171);
			iRec69[0] = iRec74;
			float 	fRec70 = fRec78;
			float 	fRec71 = fRec75;
			float 	fRec72 = fRec76;
			fRec65[IOTA&2047] = fRec70;
			float 	fRec66 = fRec82;
			float 	fRec67 = fRec71;
			float 	fRec68 = fRec72;
			fRec63[0] = fRec66;
			float 	fRec64 = fRec68;
			iRec103[0] = 0;
			int 	iRec104 = iRec103[1];
			float 	fRec108 = (iRec99[1] - (0.98926467176774091f * ((0.59999999999999998f * fRec109[2]) + (0.20000000000000001f * (fRec109[1] + fRec109[3])))));
			fRec119[0] = (fSlow8 + (0.999f * fRec119[1]));
			fTempPerm172 = (fRec119[0] + -0.080000000000000002f);
			fTempPerm173 = (fConst5 * fTempPerm172);
			fTempPerm174 = (fTempPerm173 + -1.499995f);
			iTempPerm175 = int(fTempPerm174);
			iTempPerm176 = int(min(fConst4, (float)max(0, iTempPerm175)));
			fTempPerm177 = floorf(fTempPerm174);
			fTempPerm178 = (fTempPerm173 + (-1 - fTempPerm177));
			fTempPerm179 = (0 - fTempPerm178);
			fTempPerm180 = (fTempPerm173 + (-2 - fTempPerm177));
			fTempPerm181 = (0 - (0.5f * fTempPerm180));
			fTempPerm182 = (fTempPerm173 + (-3 - fTempPerm177));
			fTempPerm183 = (0 - (0.33333333333333331f * fTempPerm182));
			fTempPerm184 = (fTempPerm173 + (-4 - fTempPerm177));
			fTempPerm185 = (0 - (0.25f * fTempPerm184));
			fTempPerm186 = (fTempPerm173 - fTempPerm177);
			iTempPerm187 = int(min(fConst4, (float)max(0, (iTempPerm175 + 2))));
			fTempPerm188 = (0 - fTempPerm182);
			fTempPerm189 = (0 - (0.5f * fTempPerm184));
			iTempPerm190 = int(min(fConst4, (float)max(0, (iTempPerm175 + 1))));
			fTempPerm191 = (0 - fTempPerm180);
			fTempPerm192 = (0 - (0.5f * fTempPerm182));
			fTempPerm193 = (0 - (0.33333333333333331f * fTempPerm184));
			fTempPerm194 = (fTempPerm178 * fTempPerm180);
			iTempPerm195 = int(min(fConst4, (float)max(0, (iTempPerm175 + 3))));
			fTempPerm196 = (0 - fTempPerm184);
			fTempPerm197 = (fTempPerm194 * fTempPerm182);
			iTempPerm198 = int(min(fConst4, (float)max(0, (iTempPerm175 + 4))));
			fRec115[0] = (((((fRec95[(IOTA-int((iTempPerm176 + 1)))&2047] * fTempPerm179) * fTempPerm181) * fTempPerm183) * fTempPerm185) + (fTempPerm186 * ((((0.5f * (((fTempPerm178 * fRec95[(IOTA-int((iTempPerm187 + 1)))&2047]) * fTempPerm188) * fTempPerm189)) + (((fRec95[(IOTA-int((iTempPerm190 + 1)))&2047] * fTempPerm191) * fTempPerm192) * fTempPerm193)) + (0.16666666666666666f * ((fTempPerm194 * fRec95[(IOTA-int((iTempPerm195 + 1)))&2047]) * fTempPerm196))) + (0.041666666666666664f * (fTempPerm197 * fRec95[(IOTA-int((iTempPerm198 + 1)))&2047])))));
			fRec120[0] = fRec93[1];
			fRec121[IOTA&2047] = (0 - (0.99880145575930335f * ((0.80000000000000004f * fRec120[2]) + (0.10000000000000001f * (fRec120[1] + fRec120[3])))));
			int 	iRec122 = 0;
			fTempPerm199 = (fConst6 * fTempPerm172);
			fTempPerm200 = (fTempPerm199 + -1.499995f);
			iTempPerm201 = int(fTempPerm200);
			iTempPerm202 = int(min(fConst4, (float)max(0, iTempPerm201)));
			fTempPerm203 = floorf(fTempPerm200);
			fTempPerm204 = (fTempPerm199 + (-1 - fTempPerm203));
			fTempPerm205 = (0 - fTempPerm204);
			fTempPerm206 = (fTempPerm199 + (-2 - fTempPerm203));
			fTempPerm207 = (0 - (0.5f * fTempPerm206));
			fTempPerm208 = (fTempPerm199 + (-3 - fTempPerm203));
			fTempPerm209 = (0 - (0.33333333333333331f * fTempPerm208));
			fTempPerm210 = (fTempPerm199 + (-4 - fTempPerm203));
			fTempPerm211 = (0 - (0.25f * fTempPerm210));
			fTempPerm212 = (fTempPerm199 - fTempPerm203);
			iTempPerm213 = int(min(fConst4, (float)max(0, (iTempPerm201 + 2))));
			fTempPerm214 = (0 - fTempPerm208);
			fTempPerm215 = (0 - (0.5f * fTempPerm210));
			iTempPerm216 = int(min(fConst4, (float)max(0, (iTempPerm201 + 1))));
			fTempPerm217 = (0 - fTempPerm206);
			fTempPerm218 = (0 - (0.5f * fTempPerm208));
			fTempPerm219 = (0 - (0.33333333333333331f * fTempPerm210));
			fTempPerm220 = (fTempPerm204 * fTempPerm206);
			iTempPerm221 = int(min(fConst4, (float)max(0, (iTempPerm201 + 3))));
			fTempPerm222 = (0 - fTempPerm210);
			fTempPerm223 = (fTempPerm220 * fTempPerm208);
			iTempPerm224 = int(min(fConst4, (float)max(0, (iTempPerm201 + 4))));
			fVec6[0] = (((((fRec121[(IOTA-int((iTempPerm202 + 2)))&2047] * fTempPerm205) * fTempPerm207) * fTempPerm209) * fTempPerm211) + (fTempPerm212 * ((((0.5f * (((fTempPerm204 * fRec121[(IOTA-int((iTempPerm213 + 2)))&2047]) * fTempPerm214) * fTempPerm215)) + (((fRec121[(IOTA-int((iTempPerm216 + 2)))&2047] * fTempPerm217) * fTempPerm218) * fTempPerm219)) + (0.16666666666666666f * ((fTempPerm220 * fRec121[(IOTA-int((iTempPerm221 + 2)))&2047]) * fTempPerm222))) + (0.041666666666666664f * (fTempPerm223 * fRec121[(IOTA-int((iTempPerm224 + 2)))&2047])))));
			fTempPerm225 = ((iSlow9 * fRec27[0]) - (fRec115[1] + fVec6[1]));
			fTempPerm226 = (fTempPerm225 * min((float)1, (1.0f / faustpower<4>((fabsf((fTempPerm54 * fTempPerm225)) + 0.75f)))));
			float 	fRec116 = (fRec115[1] + fTempPerm226);
			fTempPerm227 = (fVec6[1] + fTempPerm226);
			fVec7[IOTA&2047] = fTempPerm227;
			float 	fRec117 = (((((fTempPerm179 * fTempPerm181) * fTempPerm183) * fTempPerm185) * fVec7[(IOTA-iTempPerm176)&2047]) + (fTempPerm186 * ((0.041666666666666664f * (fTempPerm197 * fVec7[(IOTA-iTempPerm198)&2047])) + (((((fTempPerm191 * fTempPerm192) * fTempPerm193) * fVec7[(IOTA-iTempPerm190)&2047]) + (0.5f * (((fTempPerm178 * fTempPerm188) * fTempPerm189) * fVec7[(IOTA-iTempPerm187)&2047]))) + (0.16666666666666666f * ((fTempPerm194 * fTempPerm196) * fVec7[(IOTA-iTempPerm195)&2047]))))));
			int 	iRec118 = iRec122;
			fRec111[IOTA&2047] = fRec116;
			float 	fRec112 = (((((fTempPerm205 * fTempPerm207) * fTempPerm209) * fTempPerm211) * fRec111[(IOTA-int((iTempPerm202 + 1)))&2047]) + (fTempPerm212 * (((0.16666666666666666f * ((fTempPerm220 * fTempPerm222) * fRec111[(IOTA-int((iTempPerm221 + 1)))&2047])) + ((((fTempPerm217 * fTempPerm218) * fTempPerm219) * fRec111[(IOTA-int((iTempPerm216 + 1)))&2047]) + (0.5f * (((fTempPerm204 * fTempPerm214) * fTempPerm215) * fRec111[(IOTA-int((iTempPerm213 + 1)))&2047])))) + (0.041666666666666664f * (fTempPerm223 * fRec111[(IOTA-int((iTempPerm224 + 1)))&2047])))));
			fRec113[0] = fRec117;
			int 	iRec114 = iRec118;
			fRec109[0] = fRec113[1];
			int 	iRec110 = iRec114;
			fRec107[0] = (fRec109[1] - (fConst3 * ((fConst8 * fRec107[1]) + (fConst7 * fRec107[2]))));
			fTempPerm228 = (fConst3 * ((fConst2 * fRec107[0]) + (fConst9 * fRec107[2])));
			float 	fRec105 = fTempPerm228;
			float 	fRec106 = (iRec110 + fTempPerm228);
			iRec99[0] = iRec104;
			float 	fRec100 = fRec108;
			float 	fRec101 = fRec105;
			float 	fRec102 = fRec106;
			fRec95[IOTA&2047] = fRec100;
			float 	fRec96 = fRec112;
			float 	fRec97 = fRec101;
			float 	fRec98 = fRec102;
			fRec93[0] = fRec96;
			float 	fRec94 = fRec98;
			fTempPerm229 = (((fRec1 + fRec34) + fRec64) + fRec94);
			output0[i] = (FAUSTFLOAT)fTempPerm229;
			output1[i] = (FAUSTFLOAT)fTempPerm229;
			// post processing
			fRec93[1] = fRec93[0];
			iRec99[1] = iRec99[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			for (int i=3; i>0; i--) fRec109[i] = fRec109[i-1];
			fRec113[1] = fRec113[0];
			fVec6[1] = fVec6[0];
			for (int i=3; i>0; i--) fRec120[i] = fRec120[i-1];
			fRec115[1] = fRec115[0];
			fRec119[1] = fRec119[0];
			iRec103[1] = iRec103[0];
			fRec63[1] = fRec63[0];
			iRec69[1] = iRec69[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			for (int i=3; i>0; i--) fRec79[i] = fRec79[i-1];
			fRec83[1] = fRec83[0];
			fVec4[1] = fVec4[0];
			for (int i=3; i>0; i--) fRec90[i] = fRec90[i-1];
			fRec85[1] = fRec85[0];
			fRec89[1] = fRec89[0];
			iRec73[1] = iRec73[0];
			fRec33[1] = fRec33[0];
			iRec39[1] = iRec39[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			for (int i=3; i>0; i--) fRec49[i] = fRec49[i-1];
			fRec53[1] = fRec53[0];
			fVec2[1] = fVec2[0];
			for (int i=3; i>0; i--) fRec60[i] = fRec60[i-1];
			fRec55[1] = fRec55[0];
			fRec59[1] = fRec59[0];
			iRec43[1] = iRec43[0];
			fRec0[1] = fRec0[0];
			iRec6[1] = iRec6[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			for (int i=3; i>0; i--) fRec16[i] = fRec16[i-1];
			fRec20[1] = fRec20[0];
			fRec32[1] = fRec32[0];
			fVec0[1] = fVec0[0];
			IOTA = IOTA+1;
			for (int i=3; i>0; i--) fRec29[i] = fRec29[i-1];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec22[1] = fRec22[0];
			fRec26[1] = fRec26[0];
			iRec10[1] = iRec10[0];
		}
	}
};


