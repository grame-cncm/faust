//----------------------------------------------------------
// name: "graphicEqLab"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[4];
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider2;
	float 	fRec4[2];
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	int 	iRec6[2];
	float 	fTempPerm0;
	float 	fRec5[4];
	FAUSTFLOAT 	fentry0;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fRec8[2];
	float 	fTempPerm1;
	float 	fVec1[2];
	float 	fTempPerm2;
	float 	fRec7[2];
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fVec2[2];
	float 	fTempPerm6;
	float 	fVec3[2];
	float 	fTempPerm7;
	float 	fVec4[2];
	float 	fTempPerm8;
	float 	fVec5[2];
	float 	fConst17;
	float 	fTempPerm9;
	float 	fVec6[2];
	float 	fTempPerm10;
	float 	fVec7[2];
	float 	fConst18;
	FAUSTFLOAT 	fslider5;
	float 	fTempPerm11;
	float 	fVec8[2];
	float 	fTempPerm12;
	float 	fRec9[2];
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fVec9[2];
	float 	fTempPerm16;
	float 	fVec10[2];
	float 	fTempPerm17;
	float 	fVec11[2];
	float 	fTempPerm18;
	float 	fVec12[2];
	float 	fTempPerm19;
	float 	fVec13[2];
	float 	fTempPerm20;
	float 	fVec14[2];
	FAUSTFLOAT 	fslider6;
	float 	fTempPerm21;
	float 	fVec15[2];
	float 	fTempPerm22;
	float 	fRec10[2];
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fVec16[2];
	float 	fTempPerm26;
	float 	fVec17[2];
	float 	fTempPerm27;
	float 	fVec18[2];
	float 	fTempPerm28;
	float 	fVec19[2];
	float 	fTempPerm29;
	float 	fVec20[2];
	float 	fTempPerm30;
	float 	fVec21[2];
	float 	fTempPerm31;
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fTempPerm32;
	float 	fVec22[2];
	float 	fConst29;
	float 	fRec21[2];
	float 	fConst30;
	float 	fConst31;
	float 	fRec20[3];
	float 	fConst32;
	float 	fRec19[3];
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fTempPerm33;
	float 	fRec18[3];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fTempPerm34;
	float 	fRec17[3];
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fTempPerm35;
	float 	fRec16[3];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fTempPerm36;
	float 	fRec15[3];
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fTempPerm37;
	float 	fRec14[3];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fTempPerm38;
	float 	fRec13[3];
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fTempPerm39;
	float 	fRec12[3];
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fTempPerm40;
	float 	fRec11[3];
	FAUSTFLOAT 	fslider7;
	float 	fRec22[2];
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fRec35[2];
	float 	fRec34[3];
	float 	fRec33[3];
	float 	fTempPerm41;
	float 	fVec23[2];
	float 	fConst88;
	float 	fRec32[2];
	float 	fConst89;
	float 	fRec31[3];
	float 	fConst90;
	float 	fRec30[3];
	float 	fTempPerm42;
	float 	fRec29[3];
	float 	fTempPerm43;
	float 	fRec28[3];
	float 	fTempPerm44;
	float 	fRec27[3];
	float 	fTempPerm45;
	float 	fRec26[3];
	float 	fTempPerm46;
	float 	fRec25[3];
	float 	fTempPerm47;
	float 	fRec24[3];
	float 	fTempPerm48;
	float 	fRec23[3];
	FAUSTFLOAT 	fslider8;
	float 	fRec36[2];
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fRec48[2];
	float 	fRec47[3];
	float 	fRec46[3];
	float 	fTempPerm49;
	float 	fVec24[2];
	float 	fConst98;
	float 	fRec45[2];
	float 	fConst99;
	float 	fRec44[3];
	float 	fConst100;
	float 	fRec43[3];
	float 	fTempPerm50;
	float 	fRec42[3];
	float 	fTempPerm51;
	float 	fRec41[3];
	float 	fTempPerm52;
	float 	fRec40[3];
	float 	fTempPerm53;
	float 	fRec39[3];
	float 	fTempPerm54;
	float 	fRec38[3];
	float 	fTempPerm55;
	float 	fRec37[3];
	FAUSTFLOAT 	fslider9;
	float 	fRec49[2];
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fRec60[2];
	float 	fRec59[3];
	float 	fRec58[3];
	float 	fTempPerm56;
	float 	fVec25[2];
	float 	fConst108;
	float 	fRec57[2];
	float 	fConst109;
	float 	fRec56[3];
	float 	fConst110;
	float 	fRec55[3];
	float 	fTempPerm57;
	float 	fRec54[3];
	float 	fTempPerm58;
	float 	fRec53[3];
	float 	fTempPerm59;
	float 	fRec52[3];
	float 	fTempPerm60;
	float 	fRec51[3];
	float 	fTempPerm61;
	float 	fRec50[3];
	FAUSTFLOAT 	fslider10;
	float 	fRec61[2];
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fRec71[2];
	float 	fRec70[3];
	float 	fRec69[3];
	float 	fTempPerm62;
	float 	fVec26[2];
	float 	fConst118;
	float 	fRec68[2];
	float 	fConst119;
	float 	fRec67[3];
	float 	fConst120;
	float 	fRec66[3];
	float 	fTempPerm63;
	float 	fRec65[3];
	float 	fTempPerm64;
	float 	fRec64[3];
	float 	fTempPerm65;
	float 	fRec63[3];
	float 	fTempPerm66;
	float 	fRec62[3];
	FAUSTFLOAT 	fslider11;
	float 	fRec72[2];
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fRec81[2];
	float 	fRec80[3];
	float 	fRec79[3];
	float 	fTempPerm67;
	float 	fVec27[2];
	float 	fConst128;
	float 	fRec78[2];
	float 	fConst129;
	float 	fRec77[3];
	float 	fConst130;
	float 	fRec76[3];
	float 	fTempPerm68;
	float 	fRec75[3];
	float 	fTempPerm69;
	float 	fRec74[3];
	float 	fTempPerm70;
	float 	fRec73[3];
	FAUSTFLOAT 	fslider12;
	float 	fRec82[2];
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fRec90[2];
	float 	fRec89[3];
	float 	fRec88[3];
	float 	fTempPerm71;
	float 	fVec28[2];
	float 	fConst138;
	float 	fRec87[2];
	float 	fConst139;
	float 	fRec86[3];
	float 	fConst140;
	float 	fRec85[3];
	float 	fTempPerm72;
	float 	fRec84[3];
	float 	fTempPerm73;
	float 	fRec83[3];
	FAUSTFLOAT 	fslider13;
	float 	fRec91[2];
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fRec98[2];
	float 	fRec97[3];
	float 	fRec96[3];
	float 	fTempPerm74;
	float 	fVec29[2];
	float 	fConst148;
	float 	fRec95[2];
	float 	fConst149;
	float 	fRec94[3];
	float 	fConst150;
	float 	fRec93[3];
	float 	fTempPerm75;
	float 	fRec92[3];
	FAUSTFLOAT 	fslider14;
	float 	fRec99[2];
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fRec105[2];
	float 	fRec104[3];
	float 	fRec103[3];
	float 	fTempPerm76;
	float 	fVec30[2];
	float 	fConst157;
	float 	fRec102[2];
	float 	fConst158;
	float 	fRec101[3];
	float 	fConst159;
	float 	fRec100[3];
	FAUSTFLOAT 	fslider15;
	float 	fRec106[2];
	float 	fRec109[2];
	float 	fRec108[3];
	float 	fRec107[3];
	FAUSTFLOAT 	fslider16;
	float 	fRec110[2];
	float 	fTempPerm77;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fRec3[3];
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fRec2[3];
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fRec1[3];
	float 	fConst169;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph0;
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fRec117[3];
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fRec116[3];
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fRec115[3];
	float 	fConst197;
	float 	fTempPerm78;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fRec114[3];
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fRec113[3];
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fRec112[3];
	float 	fConst207;
	float 	fRec111[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst208;
	float 	fConst209;
	float 	fConst210;
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fConst216;
	float 	fConst217;
	float 	fConst218;
	float 	fConst219;
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fRec124[3];
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fRec123[3];
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fRec122[3];
	float 	fConst235;
	float 	fTempPerm79;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fRec121[3];
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fRec120[3];
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fRec119[3];
	float 	fConst245;
	float 	fRec118[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst246;
	float 	fConst247;
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fConst251;
	float 	fConst252;
	float 	fConst253;
	float 	fConst254;
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fConst258;
	float 	fConst259;
	float 	fConst260;
	float 	fConst261;
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fRec131[3];
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fRec130[3];
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fRec129[3];
	float 	fConst273;
	float 	fTempPerm80;
	float 	fConst274;
	float 	fConst275;
	float 	fConst276;
	float 	fRec128[3];
	float 	fConst277;
	float 	fConst278;
	float 	fConst279;
	float 	fRec127[3];
	float 	fConst280;
	float 	fConst281;
	float 	fConst282;
	float 	fRec126[3];
	float 	fConst283;
	float 	fRec125[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst284;
	float 	fConst285;
	float 	fConst286;
	float 	fConst287;
	float 	fConst288;
	float 	fConst289;
	float 	fConst290;
	float 	fConst291;
	float 	fConst292;
	float 	fConst293;
	float 	fConst294;
	float 	fConst295;
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fConst299;
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fRec138[3];
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fRec137[3];
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fRec136[3];
	float 	fConst311;
	float 	fTempPerm81;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fRec135[3];
	float 	fConst315;
	float 	fConst316;
	float 	fConst317;
	float 	fRec134[3];
	float 	fConst318;
	float 	fConst319;
	float 	fConst320;
	float 	fRec133[3];
	float 	fConst321;
	float 	fRec132[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst322;
	float 	fConst323;
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fConst327;
	float 	fConst328;
	float 	fConst329;
	float 	fConst330;
	float 	fConst331;
	float 	fConst332;
	float 	fConst333;
	float 	fConst334;
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fConst338;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fRec145[3];
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fRec144[3];
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fRec143[3];
	float 	fConst349;
	float 	fTempPerm82;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fRec142[3];
	float 	fConst353;
	float 	fConst354;
	float 	fConst355;
	float 	fRec141[3];
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fRec140[3];
	float 	fConst359;
	float 	fRec139[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst360;
	float 	fConst361;
	float 	fConst362;
	float 	fConst363;
	float 	fConst364;
	float 	fConst365;
	float 	fConst366;
	float 	fConst367;
	float 	fConst368;
	float 	fConst369;
	float 	fConst370;
	float 	fConst371;
	float 	fConst372;
	float 	fConst373;
	float 	fConst374;
	float 	fConst375;
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fRec152[3];
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fRec151[3];
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fRec150[3];
	float 	fConst387;
	float 	fTempPerm83;
	float 	fConst388;
	float 	fConst389;
	float 	fConst390;
	float 	fRec149[3];
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fRec148[3];
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fRec147[3];
	float 	fConst397;
	float 	fRec146[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst398;
	float 	fConst399;
	float 	fConst400;
	float 	fConst401;
	float 	fConst402;
	float 	fConst403;
	float 	fConst404;
	float 	fConst405;
	float 	fConst406;
	float 	fConst407;
	float 	fConst408;
	float 	fConst409;
	float 	fConst410;
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fRec159[3];
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fRec158[3];
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fRec157[3];
	float 	fConst425;
	float 	fTempPerm84;
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fRec156[3];
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fRec155[3];
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fRec154[3];
	float 	fConst435;
	float 	fRec153[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst436;
	float 	fConst437;
	float 	fConst438;
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fConst442;
	float 	fConst443;
	float 	fConst444;
	float 	fConst445;
	float 	fConst446;
	float 	fConst447;
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fRec166[3];
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fRec165[3];
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fRec164[3];
	float 	fConst463;
	float 	fTempPerm85;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fRec163[3];
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fRec162[3];
	float 	fConst470;
	float 	fConst471;
	float 	fConst472;
	float 	fRec161[3];
	float 	fConst473;
	float 	fRec160[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst474;
	float 	fConst475;
	float 	fConst476;
	float 	fConst477;
	float 	fConst478;
	float 	fConst479;
	float 	fConst480;
	float 	fConst481;
	float 	fConst482;
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fRec173[3];
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fRec172[3];
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fRec171[3];
	float 	fConst501;
	float 	fTempPerm86;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fRec170[3];
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fRec169[3];
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fRec168[3];
	float 	fConst511;
	float 	fRec167[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst512;
	float 	fConst513;
	float 	fConst514;
	float 	fConst515;
	float 	fConst516;
	float 	fConst517;
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fConst525;
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fRec180[3];
	float 	fConst533;
	float 	fConst534;
	float 	fConst535;
	float 	fRec179[3];
	float 	fConst536;
	float 	fConst537;
	float 	fConst538;
	float 	fRec178[3];
	float 	fConst539;
	float 	fTempPerm87;
	float 	fConst540;
	float 	fConst541;
	float 	fConst542;
	float 	fRec177[3];
	float 	fConst543;
	float 	fConst544;
	float 	fConst545;
	float 	fRec176[3];
	float 	fConst546;
	float 	fConst547;
	float 	fConst548;
	float 	fRec175[3];
	float 	fConst549;
	float 	fRec174[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst550;
	float 	fConst551;
	float 	fConst552;
	float 	fConst553;
	float 	fConst554;
	float 	fConst555;
	float 	fConst556;
	float 	fConst557;
	float 	fConst558;
	float 	fConst559;
	float 	fConst560;
	float 	fConst561;
	float 	fConst562;
	float 	fConst563;
	float 	fConst564;
	float 	fConst565;
	float 	fConst566;
	float 	fConst567;
	float 	fConst568;
	float 	fConst569;
	float 	fConst570;
	float 	fRec187[3];
	float 	fConst571;
	float 	fConst572;
	float 	fConst573;
	float 	fRec186[3];
	float 	fConst574;
	float 	fConst575;
	float 	fConst576;
	float 	fRec185[3];
	float 	fConst577;
	float 	fTempPerm88;
	float 	fConst578;
	float 	fConst579;
	float 	fConst580;
	float 	fRec184[3];
	float 	fConst581;
	float 	fConst582;
	float 	fConst583;
	float 	fRec183[3];
	float 	fConst584;
	float 	fConst585;
	float 	fConst586;
	float 	fRec182[3];
	float 	fConst587;
	float 	fRec181[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst588;
	float 	fConst589;
	float 	fConst590;
	float 	fConst591;
	float 	fConst592;
	float 	fConst593;
	float 	fConst594;
	float 	fConst595;
	float 	fConst596;
	float 	fConst597;
	float 	fConst598;
	float 	fConst599;
	float 	fConst600;
	float 	fConst601;
	float 	fConst602;
	float 	fConst603;
	float 	fConst604;
	float 	fConst605;
	float 	fConst606;
	float 	fConst607;
	float 	fConst608;
	float 	fRec194[3];
	float 	fConst609;
	float 	fConst610;
	float 	fConst611;
	float 	fRec193[3];
	float 	fConst612;
	float 	fConst613;
	float 	fConst614;
	float 	fRec192[3];
	float 	fConst615;
	float 	fTempPerm89;
	float 	fConst616;
	float 	fConst617;
	float 	fConst618;
	float 	fRec191[3];
	float 	fConst619;
	float 	fConst620;
	float 	fConst621;
	float 	fRec190[3];
	float 	fConst622;
	float 	fConst623;
	float 	fConst624;
	float 	fRec189[3];
	float 	fConst625;
	float 	fRec188[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst626;
	float 	fConst627;
	float 	fConst628;
	float 	fConst629;
	float 	fConst630;
	float 	fConst631;
	float 	fConst632;
	float 	fConst633;
	float 	fConst634;
	float 	fConst635;
	float 	fConst636;
	float 	fConst637;
	float 	fConst638;
	float 	fConst639;
	float 	fConst640;
	float 	fConst641;
	float 	fConst642;
	float 	fConst643;
	float 	fConst644;
	float 	fConst645;
	float 	fConst646;
	float 	fRec201[3];
	float 	fConst647;
	float 	fConst648;
	float 	fConst649;
	float 	fRec200[3];
	float 	fConst650;
	float 	fConst651;
	float 	fConst652;
	float 	fRec199[3];
	float 	fConst653;
	float 	fTempPerm90;
	float 	fConst654;
	float 	fConst655;
	float 	fConst656;
	float 	fRec198[3];
	float 	fConst657;
	float 	fConst658;
	float 	fConst659;
	float 	fRec197[3];
	float 	fConst660;
	float 	fConst661;
	float 	fConst662;
	float 	fRec196[3];
	float 	fConst663;
	float 	fRec195[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst664;
	float 	fConst665;
	float 	fConst666;
	float 	fConst667;
	float 	fConst668;
	float 	fConst669;
	float 	fConst670;
	float 	fConst671;
	float 	fConst672;
	float 	fRec205[3];
	float 	fConst673;
	float 	fConst674;
	float 	fConst675;
	float 	fRec204[3];
	float 	fConst676;
	float 	fConst677;
	float 	fConst678;
	float 	fRec203[3];
	float 	fConst679;
	float 	fRec202[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fTempPerm91;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("description", "Signal generators through a filter bank with spectrum analysis display");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "graphicEqLab");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = tanf((50265.482457436687f / fConst0));
		fConst3 = (1.0f / fConst2);
		fConst4 = (1.0f / (((fConst3 + 0.157482159302087f) / fConst2) + 0.93514016703154246f));
		fConst5 = faustpower<2>(fConst2);
		fConst6 = (50.063807016150385f / fConst5);
		fConst7 = (2 * (0.93514016703154246f - fConst6));
		fConst8 = (1.0f / (((fConst3 + 0.74313046010703965f) / fConst2) + 1.450071084655647f));
		fConst9 = (11.052052171507189f / fConst5);
		fConst10 = (2 * (1.450071084655647f - fConst9));
		fConst11 = (1.0f / (((fConst3 + 3.1897274020965583f) / fConst2) + 4.0767819696438066f));
		fConst12 = (0.0017661728399818856f / fConst5);
		fConst13 = (2 * (0.00040767818495825777f - fConst12));
		fTempPerm0 = 0;
		fConst14 = float(fConst0);
		fConst15 = (0.005208333333333333f * faustpower<3>(fConst14));
		fConst16 = (1.0f / fConst0);
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fConst17 = (0.041666666666666664f * faustpower<2>(fConst14));
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fConst18 = (0.25f * fConst14);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fConst19 = tanf((31415.926535897932f / fConst0));
		fConst20 = (1.0f / fConst19);
		fConst21 = (((fConst20 + 0.61803398874989468f) / fConst19) + 1);
		fConst22 = (1.0f / fConst21);
		fConst23 = (1.0f / faustpower<2>(fConst19));
		fConst24 = (2 * (0 - fConst23));
		fConst25 = (1.0f / (((fConst20 + 1.6180339887498947f) / fConst19) + 1));
		fConst26 = (fConst20 + 1);
		fConst27 = (0 - ((1 - fConst20) / fConst26));
		fConst28 = (1.0f / fConst26);
		fTempPerm32 = 0;
		fConst29 = (0 - fConst20);
		fConst30 = (2 * (1 - fConst23));
		fConst31 = (((fConst20 + -1.6180339887498947f) / fConst19) + 1);
		fConst32 = (((fConst20 + -0.61803398874989468f) / fConst19) + 1);
		fConst33 = tanf((122.7184630308513f / fConst0));
		fConst34 = (1.0f / fConst33);
		fConst35 = (1.0f / (((fConst34 + 1.6180339887498949f) / fConst33) + 1));
		fConst36 = (((fConst34 + -1.6180339887498949f) / fConst33) + 1);
		fConst37 = (1.0f / faustpower<2>(fConst33));
		fConst38 = (2 * (1 - fConst37));
		fTempPerm33 = 0;
		fConst39 = tanf((245.43692606170259f / fConst0));
		fConst40 = (1.0f / fConst39);
		fConst41 = (1.0f / (((fConst40 + 1.6180339887498949f) / fConst39) + 1));
		fConst42 = (((fConst40 + -1.6180339887498949f) / fConst39) + 1);
		fConst43 = (1.0f / faustpower<2>(fConst39));
		fConst44 = (2 * (1 - fConst43));
		fTempPerm34 = 0;
		fConst45 = tanf((490.87385212340519f / fConst0));
		fConst46 = (1.0f / fConst45);
		fConst47 = (1.0f / (((fConst46 + 1.6180339887498949f) / fConst45) + 1));
		fConst48 = (((fConst46 + -1.6180339887498949f) / fConst45) + 1);
		fConst49 = (1.0f / faustpower<2>(fConst45));
		fConst50 = (2 * (1 - fConst49));
		fTempPerm35 = 0;
		fConst51 = tanf((981.74770424681037f / fConst0));
		fConst52 = (1.0f / fConst51);
		fConst53 = (1.0f / (((fConst52 + 1.6180339887498949f) / fConst51) + 1));
		fConst54 = (((fConst52 + -1.6180339887498949f) / fConst51) + 1);
		fConst55 = (1.0f / faustpower<2>(fConst51));
		fConst56 = (2 * (1 - fConst55));
		fTempPerm36 = 0;
		fConst57 = tanf((1963.4954084936207f / fConst0));
		fConst58 = (1.0f / fConst57);
		fConst59 = (1.0f / (((fConst58 + 1.6180339887498949f) / fConst57) + 1));
		fConst60 = (((fConst58 + -1.6180339887498949f) / fConst57) + 1);
		fConst61 = (1.0f / faustpower<2>(fConst57));
		fConst62 = (2 * (1 - fConst61));
		fTempPerm37 = 0;
		fConst63 = tanf((3926.9908169872415f / fConst0));
		fConst64 = (1.0f / fConst63);
		fConst65 = (1.0f / (((fConst64 + 1.6180339887498949f) / fConst63) + 1));
		fConst66 = (((fConst64 + -1.6180339887498949f) / fConst63) + 1);
		fConst67 = (1.0f / faustpower<2>(fConst63));
		fConst68 = (2 * (1 - fConst67));
		fTempPerm38 = 0;
		fConst69 = tanf((7853.981633974483f / fConst0));
		fConst70 = (1.0f / fConst69);
		fConst71 = (1.0f / (((fConst70 + 1.6180339887498949f) / fConst69) + 1));
		fConst72 = (((fConst70 + -1.6180339887498949f) / fConst69) + 1);
		fConst73 = (1.0f / faustpower<2>(fConst69));
		fConst74 = (2 * (1 - fConst73));
		fTempPerm39 = 0;
		fConst75 = tanf((15707.963267948966f / fConst0));
		fConst76 = (1.0f / fConst75);
		fConst77 = (1.0f / (((fConst76 + 1.6180339887498949f) / fConst75) + 1));
		fConst78 = (((fConst76 + -1.6180339887498949f) / fConst75) + 1);
		fConst79 = (1.0f / faustpower<2>(fConst75));
		fConst80 = (2 * (1 - fConst79));
		fTempPerm40 = 0;
		fConst81 = (((fConst76 + 0.61803398874989468f) / fConst75) + 1);
		fConst82 = (1.0f / fConst81);
		fConst83 = (2 * (0 - fConst79));
		fConst84 = (1.0f / (((fConst76 + 1.6180339887498947f) / fConst75) + 1));
		fConst85 = (fConst76 + 1);
		fConst86 = (0 - ((1 - fConst76) / fConst85));
		fConst87 = (1.0f / (fConst21 * fConst85));
		fTempPerm41 = 0;
		fConst88 = (0 - fConst76);
		fConst89 = (((fConst76 + -1.6180339887498947f) / fConst75) + 1);
		fConst90 = (((fConst76 + -0.61803398874989468f) / fConst75) + 1);
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fConst91 = (((fConst70 + 0.61803398874989468f) / fConst69) + 1);
		fConst92 = (1.0f / fConst91);
		fConst93 = (2 * (0 - fConst73));
		fConst94 = (1.0f / (((fConst70 + 1.6180339887498947f) / fConst69) + 1));
		fConst95 = (fConst70 + 1);
		fConst96 = (0 - ((1 - fConst70) / fConst95));
		fConst97 = (1.0f / (fConst81 * fConst95));
		fTempPerm49 = 0;
		fConst98 = (0 - fConst70);
		fConst99 = (((fConst70 + -1.6180339887498947f) / fConst69) + 1);
		fConst100 = (((fConst70 + -0.61803398874989468f) / fConst69) + 1);
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fConst101 = (((fConst64 + 0.61803398874989468f) / fConst63) + 1);
		fConst102 = (1.0f / fConst101);
		fConst103 = (2 * (0 - fConst67));
		fConst104 = (1.0f / (((fConst64 + 1.6180339887498947f) / fConst63) + 1));
		fConst105 = (fConst64 + 1);
		fConst106 = (0 - ((1 - fConst64) / fConst105));
		fConst107 = (1.0f / (fConst91 * fConst105));
		fTempPerm56 = 0;
		fConst108 = (0 - fConst64);
		fConst109 = (((fConst64 + -1.6180339887498947f) / fConst63) + 1);
		fConst110 = (((fConst64 + -0.61803398874989468f) / fConst63) + 1);
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fConst111 = (((fConst58 + 0.61803398874989468f) / fConst57) + 1);
		fConst112 = (1.0f / fConst111);
		fConst113 = (2 * (0 - fConst61));
		fConst114 = (1.0f / (((fConst58 + 1.6180339887498947f) / fConst57) + 1));
		fConst115 = (fConst58 + 1);
		fConst116 = (0 - ((1 - fConst58) / fConst115));
		fConst117 = (1.0f / (fConst101 * fConst115));
		fTempPerm62 = 0;
		fConst118 = (0 - fConst58);
		fConst119 = (((fConst58 + -1.6180339887498947f) / fConst57) + 1);
		fConst120 = (((fConst58 + -0.61803398874989468f) / fConst57) + 1);
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fConst121 = (((fConst52 + 0.61803398874989468f) / fConst51) + 1);
		fConst122 = (1.0f / fConst121);
		fConst123 = (2 * (0 - fConst55));
		fConst124 = (1.0f / (((fConst52 + 1.6180339887498947f) / fConst51) + 1));
		fConst125 = (fConst52 + 1);
		fConst126 = (0 - ((1 - fConst52) / fConst125));
		fConst127 = (1.0f / (fConst111 * fConst125));
		fTempPerm67 = 0;
		fConst128 = (0 - fConst52);
		fConst129 = (((fConst52 + -1.6180339887498947f) / fConst51) + 1);
		fConst130 = (((fConst52 + -0.61803398874989468f) / fConst51) + 1);
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fConst131 = (((fConst46 + 0.61803398874989468f) / fConst45) + 1);
		fConst132 = (1.0f / fConst131);
		fConst133 = (2 * (0 - fConst49));
		fConst134 = (1.0f / (((fConst46 + 1.6180339887498947f) / fConst45) + 1));
		fConst135 = (fConst46 + 1);
		fConst136 = (0 - ((1 - fConst46) / fConst135));
		fConst137 = (1.0f / (fConst121 * fConst135));
		fTempPerm71 = 0;
		fConst138 = (0 - fConst46);
		fConst139 = (((fConst46 + -1.6180339887498947f) / fConst45) + 1);
		fConst140 = (((fConst46 + -0.61803398874989468f) / fConst45) + 1);
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fConst141 = (((fConst40 + 0.61803398874989468f) / fConst39) + 1);
		fConst142 = (1.0f / fConst141);
		fConst143 = (2 * (0 - fConst43));
		fConst144 = (1.0f / (((fConst40 + 1.6180339887498947f) / fConst39) + 1));
		fConst145 = (fConst40 + 1);
		fConst146 = (0 - ((1 - fConst40) / fConst145));
		fConst147 = (1.0f / (fConst131 * fConst145));
		fTempPerm74 = 0;
		fConst148 = (0 - fConst40);
		fConst149 = (((fConst40 + -1.6180339887498947f) / fConst39) + 1);
		fConst150 = (((fConst40 + -0.61803398874989468f) / fConst39) + 1);
		fTempPerm75 = 0;
		fConst151 = (1.0f / (((fConst34 + 0.61803398874989468f) / fConst33) + 1));
		fConst152 = (2 * (0 - fConst37));
		fConst153 = (1.0f / (((fConst34 + 1.6180339887498947f) / fConst33) + 1));
		fConst154 = (fConst34 + 1);
		fConst155 = (0 - ((1 - fConst34) / fConst154));
		fConst156 = (1.0f / (fConst154 * fConst141));
		fTempPerm76 = 0;
		fConst157 = (0 - fConst34);
		fConst158 = (((fConst34 + -1.6180339887498947f) / fConst33) + 1);
		fConst159 = (((fConst34 + -0.61803398874989468f) / fConst33) + 1);
		fTempPerm77 = 0;
		fConst160 = (((fConst3 + -3.1897274020965583f) / fConst2) + 4.0767819696438066f);
		fConst161 = (1.0f / fConst5);
		fConst162 = (2 * (4.0767819696438066f - fConst161));
		fConst163 = (fConst12 + 0.00040767818495825777f);
		fConst164 = (((fConst3 + -0.74313046010703965f) / fConst2) + 1.450071084655647f);
		fConst165 = (2 * (1.450071084655647f - fConst161));
		fConst166 = (fConst9 + 1.450071084655647f);
		fConst167 = (((fConst3 + -0.157482159302087f) / fConst2) + 0.93514016703154246f);
		fConst168 = (2 * (0.93514016703154246f - fConst161));
		fConst169 = (fConst6 + 0.93514016703154246f);
		fConst170 = tanf((31665.269715622984f / fConst0));
		fConst171 = (1.0f / fConst170);
		fConst172 = (1.0f / (((fConst171 + 0.157482159302087f) / fConst170) + 0.93514016703154246f));
		fConst173 = faustpower<2>(fConst170);
		fConst174 = (50.063807016150385f / fConst173);
		fConst175 = (2 * (0.93514016703154246f - fConst174));
		fConst176 = (1.0f / (((fConst171 + 0.74313046010703965f) / fConst170) + 1.450071084655647f));
		fConst177 = (11.052052171507189f / fConst173);
		fConst178 = (2 * (1.450071084655647f - fConst177));
		fConst179 = (1.0f / (((fConst171 + 3.1897274020965583f) / fConst170) + 4.0767819696438066f));
		fConst180 = (0.0017661728399818856f / fConst173);
		fConst181 = (2 * (0.00040767818495825777f - fConst180));
		fConst182 = (1.0f / (((fConst3 + 0.16840487111358901f) / fConst2) + 1.0693584077073119f));
		fConst183 = (2 * (53.536152954556727f - fConst161));
		fConst184 = (1.0f / (((fConst3 + 0.51247864188914105f) / fConst2) + 0.68962136448467504f));
		fConst185 = (2 * (7.6217312988706034f - fConst161));
		fConst186 = (1.0f / (((fConst3 + 0.78241304682164503f) / fConst2) + 0.24529150870616001f));
		fConst187 = (9.9999997054999994e-05f / fConst5);
		fConst188 = (2 * (0.00043322720055500002f - fConst187));
		fConst189 = (((fConst3 + -0.78241304682164503f) / fConst2) + 0.24529150870616001f);
		fConst190 = (2 * (0.24529150870616001f - fConst161));
		fConst191 = (fConst187 + 0.00043322720055500002f);
		fConst192 = (((fConst3 + -0.51247864188914105f) / fConst2) + 0.68962136448467504f);
		fConst193 = (2 * (0.68962136448467504f - fConst161));
		fConst194 = (fConst161 + 7.6217312988706034f);
		fConst195 = (((fConst3 + -0.16840487111358901f) / fConst2) + 1.0693584077073119f);
		fConst196 = (2 * (1.0693584077073119f - fConst161));
		fConst197 = (fConst161 + 53.536152954556727f);
		fTempPerm78 = 0;
		fConst198 = (((fConst171 + -3.1897274020965583f) / fConst170) + 4.0767819696438066f);
		fConst199 = (1.0f / fConst173);
		fConst200 = (2 * (4.0767819696438066f - fConst199));
		fConst201 = (fConst180 + 0.00040767818495825777f);
		fConst202 = (((fConst171 + -0.74313046010703965f) / fConst170) + 1.450071084655647f);
		fConst203 = (2 * (1.450071084655647f - fConst199));
		fConst204 = (fConst177 + 1.450071084655647f);
		fConst205 = (((fConst171 + -0.157482159302087f) / fConst170) + 0.93514016703154246f);
		fConst206 = (2 * (0.93514016703154246f - fConst199));
		fConst207 = (fConst174 + 0.93514016703154246f);
		fConst208 = tanf((19947.869932656024f / fConst0));
		fConst209 = (1.0f / fConst208);
		fConst210 = (1.0f / (((fConst209 + 0.157482159302087f) / fConst208) + 0.93514016703154246f));
		fConst211 = faustpower<2>(fConst208);
		fConst212 = (50.063807016150385f / fConst211);
		fConst213 = (2 * (0.93514016703154246f - fConst212));
		fConst214 = (1.0f / (((fConst209 + 0.74313046010703965f) / fConst208) + 1.450071084655647f));
		fConst215 = (11.052052171507189f / fConst211);
		fConst216 = (2 * (1.450071084655647f - fConst215));
		fConst217 = (1.0f / (((fConst209 + 3.1897274020965583f) / fConst208) + 4.0767819696438066f));
		fConst218 = (0.0017661728399818856f / fConst211);
		fConst219 = (2 * (0.00040767818495825777f - fConst218));
		fConst220 = (1.0f / (((fConst171 + 0.16840487111358901f) / fConst170) + 1.0693584077073119f));
		fConst221 = (2 * (53.536152954556727f - fConst199));
		fConst222 = (1.0f / (((fConst171 + 0.51247864188914105f) / fConst170) + 0.68962136448467504f));
		fConst223 = (2 * (7.6217312988706034f - fConst199));
		fConst224 = (1.0f / (((fConst171 + 0.78241304682164503f) / fConst170) + 0.24529150870616001f));
		fConst225 = (9.9999997054999994e-05f / fConst173);
		fConst226 = (2 * (0.00043322720055500002f - fConst225));
		fConst227 = (((fConst171 + -0.78241304682164503f) / fConst170) + 0.24529150870616001f);
		fConst228 = (2 * (0.24529150870616001f - fConst199));
		fConst229 = (fConst225 + 0.00043322720055500002f);
		fConst230 = (((fConst171 + -0.51247864188914105f) / fConst170) + 0.68962136448467504f);
		fConst231 = (2 * (0.68962136448467504f - fConst199));
		fConst232 = (fConst199 + 7.6217312988706034f);
		fConst233 = (((fConst171 + -0.16840487111358901f) / fConst170) + 1.0693584077073119f);
		fConst234 = (2 * (1.0693584077073119f - fConst199));
		fConst235 = (fConst199 + 53.536152954556727f);
		fTempPerm79 = 0;
		fConst236 = (((fConst209 + -3.1897274020965583f) / fConst208) + 4.0767819696438066f);
		fConst237 = (1.0f / fConst211);
		fConst238 = (2 * (4.0767819696438066f - fConst237));
		fConst239 = (fConst218 + 0.00040767818495825777f);
		fConst240 = (((fConst209 + -0.74313046010703965f) / fConst208) + 1.450071084655647f);
		fConst241 = (2 * (1.450071084655647f - fConst237));
		fConst242 = (fConst215 + 1.450071084655647f);
		fConst243 = (((fConst209 + -0.157482159302087f) / fConst208) + 0.93514016703154246f);
		fConst244 = (2 * (0.93514016703154246f - fConst237));
		fConst245 = (fConst212 + 0.93514016703154246f);
		fConst246 = tanf((12566.370614359172f / fConst0));
		fConst247 = (1.0f / fConst246);
		fConst248 = (1.0f / (((fConst247 + 0.157482159302087f) / fConst246) + 0.93514016703154246f));
		fConst249 = faustpower<2>(fConst246);
		fConst250 = (50.063807016150385f / fConst249);
		fConst251 = (2 * (0.93514016703154246f - fConst250));
		fConst252 = (1.0f / (((fConst247 + 0.74313046010703965f) / fConst246) + 1.450071084655647f));
		fConst253 = (11.052052171507189f / fConst249);
		fConst254 = (2 * (1.450071084655647f - fConst253));
		fConst255 = (1.0f / (((fConst247 + 3.1897274020965583f) / fConst246) + 4.0767819696438066f));
		fConst256 = (0.0017661728399818856f / fConst249);
		fConst257 = (2 * (0.00040767818495825777f - fConst256));
		fConst258 = (1.0f / (((fConst209 + 0.16840487111358901f) / fConst208) + 1.0693584077073119f));
		fConst259 = (2 * (53.536152954556727f - fConst237));
		fConst260 = (1.0f / (((fConst209 + 0.51247864188914105f) / fConst208) + 0.68962136448467504f));
		fConst261 = (2 * (7.6217312988706034f - fConst237));
		fConst262 = (1.0f / (((fConst209 + 0.78241304682164503f) / fConst208) + 0.24529150870616001f));
		fConst263 = (9.9999997054999994e-05f / fConst211);
		fConst264 = (2 * (0.00043322720055500002f - fConst263));
		fConst265 = (((fConst209 + -0.78241304682164503f) / fConst208) + 0.24529150870616001f);
		fConst266 = (2 * (0.24529150870616001f - fConst237));
		fConst267 = (fConst263 + 0.00043322720055500002f);
		fConst268 = (((fConst209 + -0.51247864188914105f) / fConst208) + 0.68962136448467504f);
		fConst269 = (2 * (0.68962136448467504f - fConst237));
		fConst270 = (fConst237 + 7.6217312988706034f);
		fConst271 = (((fConst209 + -0.16840487111358901f) / fConst208) + 1.0693584077073119f);
		fConst272 = (2 * (1.0693584077073119f - fConst237));
		fConst273 = (fConst237 + 53.536152954556727f);
		fTempPerm80 = 0;
		fConst274 = (((fConst247 + -3.1897274020965583f) / fConst246) + 4.0767819696438066f);
		fConst275 = (1.0f / fConst249);
		fConst276 = (2 * (4.0767819696438066f - fConst275));
		fConst277 = (fConst256 + 0.00040767818495825777f);
		fConst278 = (((fConst247 + -0.74313046010703965f) / fConst246) + 1.450071084655647f);
		fConst279 = (2 * (1.450071084655647f - fConst275));
		fConst280 = (fConst253 + 1.450071084655647f);
		fConst281 = (((fConst247 + -0.157482159302087f) / fConst246) + 0.93514016703154246f);
		fConst282 = (2 * (0.93514016703154246f - fConst275));
		fConst283 = (fConst250 + 0.93514016703154246f);
		fConst284 = tanf((7916.3174289057461f / fConst0));
		fConst285 = (1.0f / fConst284);
		fConst286 = (1.0f / (((fConst285 + 0.157482159302087f) / fConst284) + 0.93514016703154246f));
		fConst287 = faustpower<2>(fConst284);
		fConst288 = (50.063807016150385f / fConst287);
		fConst289 = (2 * (0.93514016703154246f - fConst288));
		fConst290 = (1.0f / (((fConst285 + 0.74313046010703965f) / fConst284) + 1.450071084655647f));
		fConst291 = (11.052052171507189f / fConst287);
		fConst292 = (2 * (1.450071084655647f - fConst291));
		fConst293 = (1.0f / (((fConst285 + 3.1897274020965583f) / fConst284) + 4.0767819696438066f));
		fConst294 = (0.0017661728399818856f / fConst287);
		fConst295 = (2 * (0.00040767818495825777f - fConst294));
		fConst296 = (1.0f / (((fConst247 + 0.16840487111358901f) / fConst246) + 1.0693584077073119f));
		fConst297 = (2 * (53.536152954556727f - fConst275));
		fConst298 = (1.0f / (((fConst247 + 0.51247864188914105f) / fConst246) + 0.68962136448467504f));
		fConst299 = (2 * (7.6217312988706034f - fConst275));
		fConst300 = (1.0f / (((fConst247 + 0.78241304682164503f) / fConst246) + 0.24529150870616001f));
		fConst301 = (9.9999997054999994e-05f / fConst249);
		fConst302 = (2 * (0.00043322720055500002f - fConst301));
		fConst303 = (((fConst247 + -0.78241304682164503f) / fConst246) + 0.24529150870616001f);
		fConst304 = (2 * (0.24529150870616001f - fConst275));
		fConst305 = (fConst301 + 0.00043322720055500002f);
		fConst306 = (((fConst247 + -0.51247864188914105f) / fConst246) + 0.68962136448467504f);
		fConst307 = (2 * (0.68962136448467504f - fConst275));
		fConst308 = (fConst275 + 7.6217312988706034f);
		fConst309 = (((fConst247 + -0.16840487111358901f) / fConst246) + 1.0693584077073119f);
		fConst310 = (2 * (1.0693584077073119f - fConst275));
		fConst311 = (fConst275 + 53.536152954556727f);
		fTempPerm81 = 0;
		fConst312 = (((fConst285 + -3.1897274020965583f) / fConst284) + 4.0767819696438066f);
		fConst313 = (1.0f / fConst287);
		fConst314 = (2 * (4.0767819696438066f - fConst313));
		fConst315 = (fConst294 + 0.00040767818495825777f);
		fConst316 = (((fConst285 + -0.74313046010703965f) / fConst284) + 1.450071084655647f);
		fConst317 = (2 * (1.450071084655647f - fConst313));
		fConst318 = (fConst291 + 1.450071084655647f);
		fConst319 = (((fConst285 + -0.157482159302087f) / fConst284) + 0.93514016703154246f);
		fConst320 = (2 * (0.93514016703154246f - fConst313));
		fConst321 = (fConst288 + 0.93514016703154246f);
		fConst322 = tanf((4986.967483164005f / fConst0));
		fConst323 = (1.0f / fConst322);
		fConst324 = (1.0f / (((fConst323 + 0.157482159302087f) / fConst322) + 0.93514016703154246f));
		fConst325 = faustpower<2>(fConst322);
		fConst326 = (50.063807016150385f / fConst325);
		fConst327 = (2 * (0.93514016703154246f - fConst326));
		fConst328 = (1.0f / (((fConst323 + 0.74313046010703965f) / fConst322) + 1.450071084655647f));
		fConst329 = (11.052052171507189f / fConst325);
		fConst330 = (2 * (1.450071084655647f - fConst329));
		fConst331 = (1.0f / (((fConst323 + 3.1897274020965583f) / fConst322) + 4.0767819696438066f));
		fConst332 = (0.0017661728399818856f / fConst325);
		fConst333 = (2 * (0.00040767818495825777f - fConst332));
		fConst334 = (1.0f / (((fConst285 + 0.16840487111358901f) / fConst284) + 1.0693584077073119f));
		fConst335 = (2 * (53.536152954556727f - fConst313));
		fConst336 = (1.0f / (((fConst285 + 0.51247864188914105f) / fConst284) + 0.68962136448467504f));
		fConst337 = (2 * (7.6217312988706034f - fConst313));
		fConst338 = (1.0f / (((fConst285 + 0.78241304682164503f) / fConst284) + 0.24529150870616001f));
		fConst339 = (9.9999997054999994e-05f / fConst287);
		fConst340 = (2 * (0.00043322720055500002f - fConst339));
		fConst341 = (((fConst285 + -0.78241304682164503f) / fConst284) + 0.24529150870616001f);
		fConst342 = (2 * (0.24529150870616001f - fConst313));
		fConst343 = (fConst339 + 0.00043322720055500002f);
		fConst344 = (((fConst285 + -0.51247864188914105f) / fConst284) + 0.68962136448467504f);
		fConst345 = (2 * (0.68962136448467504f - fConst313));
		fConst346 = (fConst313 + 7.6217312988706034f);
		fConst347 = (((fConst285 + -0.16840487111358901f) / fConst284) + 1.0693584077073119f);
		fConst348 = (2 * (1.0693584077073119f - fConst313));
		fConst349 = (fConst313 + 53.536152954556727f);
		fTempPerm82 = 0;
		fConst350 = (((fConst323 + -3.1897274020965583f) / fConst322) + 4.0767819696438066f);
		fConst351 = (1.0f / fConst325);
		fConst352 = (2 * (4.0767819696438066f - fConst351));
		fConst353 = (fConst332 + 0.00040767818495825777f);
		fConst354 = (((fConst323 + -0.74313046010703965f) / fConst322) + 1.450071084655647f);
		fConst355 = (2 * (1.450071084655647f - fConst351));
		fConst356 = (fConst329 + 1.450071084655647f);
		fConst357 = (((fConst323 + -0.157482159302087f) / fConst322) + 0.93514016703154246f);
		fConst358 = (2 * (0.93514016703154246f - fConst351));
		fConst359 = (fConst326 + 0.93514016703154246f);
		fConst360 = tanf((3141.5926535897929f / fConst0));
		fConst361 = (1.0f / fConst360);
		fConst362 = (1.0f / (((fConst361 + 0.157482159302087f) / fConst360) + 0.93514016703154246f));
		fConst363 = faustpower<2>(fConst360);
		fConst364 = (50.063807016150385f / fConst363);
		fConst365 = (2 * (0.93514016703154246f - fConst364));
		fConst366 = (1.0f / (((fConst361 + 0.74313046010703965f) / fConst360) + 1.450071084655647f));
		fConst367 = (11.052052171507189f / fConst363);
		fConst368 = (2 * (1.450071084655647f - fConst367));
		fConst369 = (1.0f / (((fConst361 + 3.1897274020965583f) / fConst360) + 4.0767819696438066f));
		fConst370 = (0.0017661728399818856f / fConst363);
		fConst371 = (2 * (0.00040767818495825777f - fConst370));
		fConst372 = (1.0f / (((fConst323 + 0.16840487111358901f) / fConst322) + 1.0693584077073119f));
		fConst373 = (2 * (53.536152954556727f - fConst351));
		fConst374 = (1.0f / (((fConst323 + 0.51247864188914105f) / fConst322) + 0.68962136448467504f));
		fConst375 = (2 * (7.6217312988706034f - fConst351));
		fConst376 = (1.0f / (((fConst323 + 0.78241304682164503f) / fConst322) + 0.24529150870616001f));
		fConst377 = (9.9999997054999994e-05f / fConst325);
		fConst378 = (2 * (0.00043322720055500002f - fConst377));
		fConst379 = (((fConst323 + -0.78241304682164503f) / fConst322) + 0.24529150870616001f);
		fConst380 = (2 * (0.24529150870616001f - fConst351));
		fConst381 = (fConst377 + 0.00043322720055500002f);
		fConst382 = (((fConst323 + -0.51247864188914105f) / fConst322) + 0.68962136448467504f);
		fConst383 = (2 * (0.68962136448467504f - fConst351));
		fConst384 = (fConst351 + 7.6217312988706034f);
		fConst385 = (((fConst323 + -0.16840487111358901f) / fConst322) + 1.0693584077073119f);
		fConst386 = (2 * (1.0693584077073119f - fConst351));
		fConst387 = (fConst351 + 53.536152954556727f);
		fTempPerm83 = 0;
		fConst388 = (((fConst361 + -3.1897274020965583f) / fConst360) + 4.0767819696438066f);
		fConst389 = (1.0f / fConst363);
		fConst390 = (2 * (4.0767819696438066f - fConst389));
		fConst391 = (fConst370 + 0.00040767818495825777f);
		fConst392 = (((fConst361 + -0.74313046010703965f) / fConst360) + 1.450071084655647f);
		fConst393 = (2 * (1.450071084655647f - fConst389));
		fConst394 = (fConst367 + 1.450071084655647f);
		fConst395 = (((fConst361 + -0.157482159302087f) / fConst360) + 0.93514016703154246f);
		fConst396 = (2 * (0.93514016703154246f - fConst389));
		fConst397 = (fConst364 + 0.93514016703154246f);
		fConst398 = tanf((1979.0793572264361f / fConst0));
		fConst399 = (1.0f / fConst398);
		fConst400 = (1.0f / (((fConst399 + 0.157482159302087f) / fConst398) + 0.93514016703154246f));
		fConst401 = faustpower<2>(fConst398);
		fConst402 = (50.063807016150385f / fConst401);
		fConst403 = (2 * (0.93514016703154246f - fConst402));
		fConst404 = (1.0f / (((fConst399 + 0.74313046010703965f) / fConst398) + 1.450071084655647f));
		fConst405 = (11.052052171507189f / fConst401);
		fConst406 = (2 * (1.450071084655647f - fConst405));
		fConst407 = (1.0f / (((fConst399 + 3.1897274020965583f) / fConst398) + 4.0767819696438066f));
		fConst408 = (0.0017661728399818856f / fConst401);
		fConst409 = (2 * (0.00040767818495825777f - fConst408));
		fConst410 = (1.0f / (((fConst361 + 0.16840487111358901f) / fConst360) + 1.0693584077073119f));
		fConst411 = (2 * (53.536152954556727f - fConst389));
		fConst412 = (1.0f / (((fConst361 + 0.51247864188914105f) / fConst360) + 0.68962136448467504f));
		fConst413 = (2 * (7.6217312988706034f - fConst389));
		fConst414 = (1.0f / (((fConst361 + 0.78241304682164503f) / fConst360) + 0.24529150870616001f));
		fConst415 = (9.9999997054999994e-05f / fConst363);
		fConst416 = (2 * (0.00043322720055500002f - fConst415));
		fConst417 = (((fConst361 + -0.78241304682164503f) / fConst360) + 0.24529150870616001f);
		fConst418 = (2 * (0.24529150870616001f - fConst389));
		fConst419 = (fConst415 + 0.00043322720055500002f);
		fConst420 = (((fConst361 + -0.51247864188914105f) / fConst360) + 0.68962136448467504f);
		fConst421 = (2 * (0.68962136448467504f - fConst389));
		fConst422 = (fConst389 + 7.6217312988706034f);
		fConst423 = (((fConst361 + -0.16840487111358901f) / fConst360) + 1.0693584077073119f);
		fConst424 = (2 * (1.0693584077073119f - fConst389));
		fConst425 = (fConst389 + 53.536152954556727f);
		fTempPerm84 = 0;
		fConst426 = (((fConst399 + -3.1897274020965583f) / fConst398) + 4.0767819696438066f);
		fConst427 = (1.0f / fConst401);
		fConst428 = (2 * (4.0767819696438066f - fConst427));
		fConst429 = (fConst408 + 0.00040767818495825777f);
		fConst430 = (((fConst399 + -0.74313046010703965f) / fConst398) + 1.450071084655647f);
		fConst431 = (2 * (1.450071084655647f - fConst427));
		fConst432 = (fConst405 + 1.450071084655647f);
		fConst433 = (((fConst399 + -0.157482159302087f) / fConst398) + 0.93514016703154246f);
		fConst434 = (2 * (0.93514016703154246f - fConst427));
		fConst435 = (fConst402 + 0.93514016703154246f);
		fConst436 = tanf((1246.7418707910015f / fConst0));
		fConst437 = (1.0f / fConst436);
		fConst438 = (1.0f / (((fConst437 + 0.157482159302087f) / fConst436) + 0.93514016703154246f));
		fConst439 = faustpower<2>(fConst436);
		fConst440 = (50.063807016150385f / fConst439);
		fConst441 = (2 * (0.93514016703154246f - fConst440));
		fConst442 = (1.0f / (((fConst437 + 0.74313046010703965f) / fConst436) + 1.450071084655647f));
		fConst443 = (11.052052171507189f / fConst439);
		fConst444 = (2 * (1.450071084655647f - fConst443));
		fConst445 = (1.0f / (((fConst437 + 3.1897274020965583f) / fConst436) + 4.0767819696438066f));
		fConst446 = (0.0017661728399818856f / fConst439);
		fConst447 = (2 * (0.00040767818495825777f - fConst446));
		fConst448 = (1.0f / (((fConst399 + 0.16840487111358901f) / fConst398) + 1.0693584077073119f));
		fConst449 = (2 * (53.536152954556727f - fConst427));
		fConst450 = (1.0f / (((fConst399 + 0.51247864188914105f) / fConst398) + 0.68962136448467504f));
		fConst451 = (2 * (7.6217312988706034f - fConst427));
		fConst452 = (1.0f / (((fConst399 + 0.78241304682164503f) / fConst398) + 0.24529150870616001f));
		fConst453 = (9.9999997054999994e-05f / fConst401);
		fConst454 = (2 * (0.00043322720055500002f - fConst453));
		fConst455 = (((fConst399 + -0.78241304682164503f) / fConst398) + 0.24529150870616001f);
		fConst456 = (2 * (0.24529150870616001f - fConst427));
		fConst457 = (fConst453 + 0.00043322720055500002f);
		fConst458 = (((fConst399 + -0.51247864188914105f) / fConst398) + 0.68962136448467504f);
		fConst459 = (2 * (0.68962136448467504f - fConst427));
		fConst460 = (fConst427 + 7.6217312988706034f);
		fConst461 = (((fConst399 + -0.16840487111358901f) / fConst398) + 1.0693584077073119f);
		fConst462 = (2 * (1.0693584077073119f - fConst427));
		fConst463 = (fConst427 + 53.536152954556727f);
		fTempPerm85 = 0;
		fConst464 = (((fConst437 + -3.1897274020965583f) / fConst436) + 4.0767819696438066f);
		fConst465 = (1.0f / fConst439);
		fConst466 = (2 * (4.0767819696438066f - fConst465));
		fConst467 = (fConst446 + 0.00040767818495825777f);
		fConst468 = (((fConst437 + -0.74313046010703965f) / fConst436) + 1.450071084655647f);
		fConst469 = (2 * (1.450071084655647f - fConst465));
		fConst470 = (fConst443 + 1.450071084655647f);
		fConst471 = (((fConst437 + -0.157482159302087f) / fConst436) + 0.93514016703154246f);
		fConst472 = (2 * (0.93514016703154246f - fConst465));
		fConst473 = (fConst440 + 0.93514016703154246f);
		fConst474 = tanf((785.39816339744823f / fConst0));
		fConst475 = (1.0f / fConst474);
		fConst476 = (1.0f / (((fConst475 + 0.157482159302087f) / fConst474) + 0.93514016703154246f));
		fConst477 = faustpower<2>(fConst474);
		fConst478 = (50.063807016150385f / fConst477);
		fConst479 = (2 * (0.93514016703154246f - fConst478));
		fConst480 = (1.0f / (((fConst475 + 0.74313046010703965f) / fConst474) + 1.450071084655647f));
		fConst481 = (11.052052171507189f / fConst477);
		fConst482 = (2 * (1.450071084655647f - fConst481));
		fConst483 = (1.0f / (((fConst475 + 3.1897274020965583f) / fConst474) + 4.0767819696438066f));
		fConst484 = (0.0017661728399818856f / fConst477);
		fConst485 = (2 * (0.00040767818495825777f - fConst484));
		fConst486 = (1.0f / (((fConst437 + 0.16840487111358901f) / fConst436) + 1.0693584077073119f));
		fConst487 = (2 * (53.536152954556727f - fConst465));
		fConst488 = (1.0f / (((fConst437 + 0.51247864188914105f) / fConst436) + 0.68962136448467504f));
		fConst489 = (2 * (7.6217312988706034f - fConst465));
		fConst490 = (1.0f / (((fConst437 + 0.78241304682164503f) / fConst436) + 0.24529150870616001f));
		fConst491 = (9.9999997054999994e-05f / fConst439);
		fConst492 = (2 * (0.00043322720055500002f - fConst491));
		fConst493 = (((fConst437 + -0.78241304682164503f) / fConst436) + 0.24529150870616001f);
		fConst494 = (2 * (0.24529150870616001f - fConst465));
		fConst495 = (fConst491 + 0.00043322720055500002f);
		fConst496 = (((fConst437 + -0.51247864188914105f) / fConst436) + 0.68962136448467504f);
		fConst497 = (2 * (0.68962136448467504f - fConst465));
		fConst498 = (fConst465 + 7.6217312988706034f);
		fConst499 = (((fConst437 + -0.16840487111358901f) / fConst436) + 1.0693584077073119f);
		fConst500 = (2 * (1.0693584077073119f - fConst465));
		fConst501 = (fConst465 + 53.536152954556727f);
		fTempPerm86 = 0;
		fConst502 = (((fConst475 + -3.1897274020965583f) / fConst474) + 4.0767819696438066f);
		fConst503 = (1.0f / fConst477);
		fConst504 = (2 * (4.0767819696438066f - fConst503));
		fConst505 = (fConst484 + 0.00040767818495825777f);
		fConst506 = (((fConst475 + -0.74313046010703965f) / fConst474) + 1.450071084655647f);
		fConst507 = (2 * (1.450071084655647f - fConst503));
		fConst508 = (fConst481 + 1.450071084655647f);
		fConst509 = (((fConst475 + -0.157482159302087f) / fConst474) + 0.93514016703154246f);
		fConst510 = (2 * (0.93514016703154246f - fConst503));
		fConst511 = (fConst478 + 0.93514016703154246f);
		fConst512 = tanf((494.76983930660901f / fConst0));
		fConst513 = (1.0f / fConst512);
		fConst514 = (1.0f / (((fConst513 + 0.157482159302087f) / fConst512) + 0.93514016703154246f));
		fConst515 = faustpower<2>(fConst512);
		fConst516 = (50.063807016150385f / fConst515);
		fConst517 = (2 * (0.93514016703154246f - fConst516));
		fConst518 = (1.0f / (((fConst513 + 0.74313046010703965f) / fConst512) + 1.450071084655647f));
		fConst519 = (11.052052171507189f / fConst515);
		fConst520 = (2 * (1.450071084655647f - fConst519));
		fConst521 = (1.0f / (((fConst513 + 3.1897274020965583f) / fConst512) + 4.0767819696438066f));
		fConst522 = (0.0017661728399818856f / fConst515);
		fConst523 = (2 * (0.00040767818495825777f - fConst522));
		fConst524 = (1.0f / (((fConst475 + 0.16840487111358901f) / fConst474) + 1.0693584077073119f));
		fConst525 = (2 * (53.536152954556727f - fConst503));
		fConst526 = (1.0f / (((fConst475 + 0.51247864188914105f) / fConst474) + 0.68962136448467504f));
		fConst527 = (2 * (7.6217312988706034f - fConst503));
		fConst528 = (1.0f / (((fConst475 + 0.78241304682164503f) / fConst474) + 0.24529150870616001f));
		fConst529 = (9.9999997054999994e-05f / fConst477);
		fConst530 = (2 * (0.00043322720055500002f - fConst529));
		fConst531 = (((fConst475 + -0.78241304682164503f) / fConst474) + 0.24529150870616001f);
		fConst532 = (2 * (0.24529150870616001f - fConst503));
		fConst533 = (fConst529 + 0.00043322720055500002f);
		fConst534 = (((fConst475 + -0.51247864188914105f) / fConst474) + 0.68962136448467504f);
		fConst535 = (2 * (0.68962136448467504f - fConst503));
		fConst536 = (fConst503 + 7.6217312988706034f);
		fConst537 = (((fConst475 + -0.16840487111358901f) / fConst474) + 1.0693584077073119f);
		fConst538 = (2 * (1.0693584077073119f - fConst503));
		fConst539 = (fConst503 + 53.536152954556727f);
		fTempPerm87 = 0;
		fConst540 = (((fConst513 + -3.1897274020965583f) / fConst512) + 4.0767819696438066f);
		fConst541 = (1.0f / fConst515);
		fConst542 = (2 * (4.0767819696438066f - fConst541));
		fConst543 = (fConst522 + 0.00040767818495825777f);
		fConst544 = (((fConst513 + -0.74313046010703965f) / fConst512) + 1.450071084655647f);
		fConst545 = (2 * (1.450071084655647f - fConst541));
		fConst546 = (fConst519 + 1.450071084655647f);
		fConst547 = (((fConst513 + -0.157482159302087f) / fConst512) + 0.93514016703154246f);
		fConst548 = (2 * (0.93514016703154246f - fConst541));
		fConst549 = (fConst516 + 0.93514016703154246f);
		fConst550 = tanf((311.68546769775037f / fConst0));
		fConst551 = (1.0f / fConst550);
		fConst552 = (1.0f / (((fConst551 + 0.157482159302087f) / fConst550) + 0.93514016703154246f));
		fConst553 = faustpower<2>(fConst550);
		fConst554 = (50.063807016150385f / fConst553);
		fConst555 = (2 * (0.93514016703154246f - fConst554));
		fConst556 = (1.0f / (((fConst551 + 0.74313046010703965f) / fConst550) + 1.450071084655647f));
		fConst557 = (11.052052171507189f / fConst553);
		fConst558 = (2 * (1.450071084655647f - fConst557));
		fConst559 = (1.0f / (((fConst551 + 3.1897274020965583f) / fConst550) + 4.0767819696438066f));
		fConst560 = (0.0017661728399818856f / fConst553);
		fConst561 = (2 * (0.00040767818495825777f - fConst560));
		fConst562 = (1.0f / (((fConst513 + 0.16840487111358901f) / fConst512) + 1.0693584077073119f));
		fConst563 = (2 * (53.536152954556727f - fConst541));
		fConst564 = (1.0f / (((fConst513 + 0.51247864188914105f) / fConst512) + 0.68962136448467504f));
		fConst565 = (2 * (7.6217312988706034f - fConst541));
		fConst566 = (1.0f / (((fConst513 + 0.78241304682164503f) / fConst512) + 0.24529150870616001f));
		fConst567 = (9.9999997054999994e-05f / fConst515);
		fConst568 = (2 * (0.00043322720055500002f - fConst567));
		fConst569 = (((fConst513 + -0.78241304682164503f) / fConst512) + 0.24529150870616001f);
		fConst570 = (2 * (0.24529150870616001f - fConst541));
		fConst571 = (fConst567 + 0.00043322720055500002f);
		fConst572 = (((fConst513 + -0.51247864188914105f) / fConst512) + 0.68962136448467504f);
		fConst573 = (2 * (0.68962136448467504f - fConst541));
		fConst574 = (fConst541 + 7.6217312988706034f);
		fConst575 = (((fConst513 + -0.16840487111358901f) / fConst512) + 1.0693584077073119f);
		fConst576 = (2 * (1.0693584077073119f - fConst541));
		fConst577 = (fConst541 + 53.536152954556727f);
		fTempPerm88 = 0;
		fConst578 = (((fConst551 + -3.1897274020965583f) / fConst550) + 4.0767819696438066f);
		fConst579 = (1.0f / fConst553);
		fConst580 = (2 * (4.0767819696438066f - fConst579));
		fConst581 = (fConst560 + 0.00040767818495825777f);
		fConst582 = (((fConst551 + -0.74313046010703965f) / fConst550) + 1.450071084655647f);
		fConst583 = (2 * (1.450071084655647f - fConst579));
		fConst584 = (fConst557 + 1.450071084655647f);
		fConst585 = (((fConst551 + -0.157482159302087f) / fConst550) + 0.93514016703154246f);
		fConst586 = (2 * (0.93514016703154246f - fConst579));
		fConst587 = (fConst554 + 0.93514016703154246f);
		fConst588 = tanf((196.34954084936206f / fConst0));
		fConst589 = (1.0f / fConst588);
		fConst590 = (1.0f / (((fConst589 + 0.157482159302087f) / fConst588) + 0.93514016703154246f));
		fConst591 = faustpower<2>(fConst588);
		fConst592 = (50.063807016150385f / fConst591);
		fConst593 = (2 * (0.93514016703154246f - fConst592));
		fConst594 = (1.0f / (((fConst589 + 0.74313046010703965f) / fConst588) + 1.450071084655647f));
		fConst595 = (11.052052171507189f / fConst591);
		fConst596 = (2 * (1.450071084655647f - fConst595));
		fConst597 = (1.0f / (((fConst589 + 3.1897274020965583f) / fConst588) + 4.0767819696438066f));
		fConst598 = (0.0017661728399818856f / fConst591);
		fConst599 = (2 * (0.00040767818495825777f - fConst598));
		fConst600 = (1.0f / (((fConst551 + 0.16840487111358901f) / fConst550) + 1.0693584077073119f));
		fConst601 = (2 * (53.536152954556727f - fConst579));
		fConst602 = (1.0f / (((fConst551 + 0.51247864188914105f) / fConst550) + 0.68962136448467504f));
		fConst603 = (2 * (7.6217312988706034f - fConst579));
		fConst604 = (1.0f / (((fConst551 + 0.78241304682164503f) / fConst550) + 0.24529150870616001f));
		fConst605 = (9.9999997054999994e-05f / fConst553);
		fConst606 = (2 * (0.00043322720055500002f - fConst605));
		fConst607 = (((fConst551 + -0.78241304682164503f) / fConst550) + 0.24529150870616001f);
		fConst608 = (2 * (0.24529150870616001f - fConst579));
		fConst609 = (fConst605 + 0.00043322720055500002f);
		fConst610 = (((fConst551 + -0.51247864188914105f) / fConst550) + 0.68962136448467504f);
		fConst611 = (2 * (0.68962136448467504f - fConst579));
		fConst612 = (fConst579 + 7.6217312988706034f);
		fConst613 = (((fConst551 + -0.16840487111358901f) / fConst550) + 1.0693584077073119f);
		fConst614 = (2 * (1.0693584077073119f - fConst579));
		fConst615 = (fConst579 + 53.536152954556727f);
		fTempPerm89 = 0;
		fConst616 = (((fConst589 + -3.1897274020965583f) / fConst588) + 4.0767819696438066f);
		fConst617 = (1.0f / fConst591);
		fConst618 = (2 * (4.0767819696438066f - fConst617));
		fConst619 = (fConst598 + 0.00040767818495825777f);
		fConst620 = (((fConst589 + -0.74313046010703965f) / fConst588) + 1.450071084655647f);
		fConst621 = (2 * (1.450071084655647f - fConst617));
		fConst622 = (fConst595 + 1.450071084655647f);
		fConst623 = (((fConst589 + -0.157482159302087f) / fConst588) + 0.93514016703154246f);
		fConst624 = (2 * (0.93514016703154246f - fConst617));
		fConst625 = (fConst592 + 0.93514016703154246f);
		fConst626 = tanf((123.69245982665232f / fConst0));
		fConst627 = (1.0f / fConst626);
		fConst628 = (1.0f / (((fConst627 + 0.157482159302087f) / fConst626) + 0.93514016703154246f));
		fConst629 = faustpower<2>(fConst626);
		fConst630 = (50.063807016150385f / fConst629);
		fConst631 = (2 * (0.93514016703154246f - fConst630));
		fConst632 = (1.0f / (((fConst627 + 0.74313046010703965f) / fConst626) + 1.450071084655647f));
		fConst633 = (11.052052171507189f / fConst629);
		fConst634 = (2 * (1.450071084655647f - fConst633));
		fConst635 = (1.0f / (((fConst627 + 3.1897274020965583f) / fConst626) + 4.0767819696438066f));
		fConst636 = (0.0017661728399818856f / fConst629);
		fConst637 = (2 * (0.00040767818495825777f - fConst636));
		fConst638 = (1.0f / (((fConst589 + 0.16840487111358901f) / fConst588) + 1.0693584077073119f));
		fConst639 = (2 * (53.536152954556727f - fConst617));
		fConst640 = (1.0f / (((fConst589 + 0.51247864188914105f) / fConst588) + 0.68962136448467504f));
		fConst641 = (2 * (7.6217312988706034f - fConst617));
		fConst642 = (1.0f / (((fConst589 + 0.78241304682164503f) / fConst588) + 0.24529150870616001f));
		fConst643 = (9.9999997054999994e-05f / fConst591);
		fConst644 = (2 * (0.00043322720055500002f - fConst643));
		fConst645 = (((fConst589 + -0.78241304682164503f) / fConst588) + 0.24529150870616001f);
		fConst646 = (2 * (0.24529150870616001f - fConst617));
		fConst647 = (fConst643 + 0.00043322720055500002f);
		fConst648 = (((fConst589 + -0.51247864188914105f) / fConst588) + 0.68962136448467504f);
		fConst649 = (2 * (0.68962136448467504f - fConst617));
		fConst650 = (fConst617 + 7.6217312988706034f);
		fConst651 = (((fConst589 + -0.16840487111358901f) / fConst588) + 1.0693584077073119f);
		fConst652 = (2 * (1.0693584077073119f - fConst617));
		fConst653 = (fConst617 + 53.536152954556727f);
		fTempPerm90 = 0;
		fConst654 = (((fConst627 + -3.1897274020965583f) / fConst626) + 4.0767819696438066f);
		fConst655 = (1.0f / fConst629);
		fConst656 = (2 * (4.0767819696438066f - fConst655));
		fConst657 = (fConst636 + 0.00040767818495825777f);
		fConst658 = (((fConst627 + -0.74313046010703965f) / fConst626) + 1.450071084655647f);
		fConst659 = (2 * (1.450071084655647f - fConst655));
		fConst660 = (fConst633 + 1.450071084655647f);
		fConst661 = (((fConst627 + -0.157482159302087f) / fConst626) + 0.93514016703154246f);
		fConst662 = (2 * (0.93514016703154246f - fConst655));
		fConst663 = (fConst630 + 0.93514016703154246f);
		fConst664 = (1.0f / (((fConst627 + 0.16840487111358901f) / fConst626) + 1.0693584077073119f));
		fConst665 = (2 * (53.536152954556727f - fConst655));
		fConst666 = (1.0f / (((fConst627 + 0.51247864188914105f) / fConst626) + 0.68962136448467504f));
		fConst667 = (2 * (7.6217312988706034f - fConst655));
		fConst668 = (1.0f / (((fConst627 + 0.78241304682164503f) / fConst626) + 0.24529150870616001f));
		fConst669 = (9.9999997054999994e-05f / fConst629);
		fConst670 = (2 * (0.00043322720055500002f - fConst669));
		fConst671 = (((fConst627 + -0.78241304682164503f) / fConst626) + 0.24529150870616001f);
		fConst672 = (2 * (0.24529150870616001f - fConst655));
		fConst673 = (fConst669 + 0.00043322720055500002f);
		fConst674 = (((fConst627 + -0.51247864188914105f) / fConst626) + 0.68962136448467504f);
		fConst675 = (2 * (0.68962136448467504f - fConst655));
		fConst676 = (fConst655 + 7.6217312988706034f);
		fConst677 = (((fConst627 + -0.16840487111358901f) / fConst626) + 1.0693584077073119f);
		fConst678 = (2 * (1.0693584077073119f - fConst655));
		fConst679 = (fConst655 + 53.536152954556727f);
		fTempPerm91 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fcheckbox0 = 0.0;
		fslider2 = -20.0f;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fentry0 = 2.0f;
		fslider3 = 49.0f;
		fslider4 = 0.10000000000000001f;
		fslider5 = -0.10000000000000001f;
		fslider6 = 0.10000000000000001f;
		fslider7 = -10.0f;
		fslider8 = -10.0f;
		fslider9 = -10.0f;
		fslider10 = -10.0f;
		fslider11 = -10.0f;
		fslider12 = -10.0f;
		fslider13 = -10.0f;
		fslider14 = -10.0f;
		fslider15 = -10.0f;
		fslider16 = -10.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<4; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<4; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<3; i++) fRec12[i] = 0;
		for (int i=0; i<3; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<2; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec79[i] = 0;
		for (int i=0; i<2; i++) fVec27[i] = 0;
		for (int i=0; i<2; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<3; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec82[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
		for (int i=0; i<2; i++) fRec105[i] = 0;
		for (int i=0; i<3; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<2; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec100[i] = 0;
		for (int i=0; i<2; i++) fRec106[i] = 0;
		for (int i=0; i<2; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<2; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec124[i] = 0;
		for (int i=0; i<3; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
		for (int i=0; i<3; i++) fRec131[i] = 0;
		for (int i=0; i<3; i++) fRec130[i] = 0;
		for (int i=0; i<3; i++) fRec129[i] = 0;
		for (int i=0; i<3; i++) fRec128[i] = 0;
		for (int i=0; i<3; i++) fRec127[i] = 0;
		for (int i=0; i<3; i++) fRec126[i] = 0;
		for (int i=0; i<2; i++) fRec125[i] = 0;
		for (int i=0; i<3; i++) fRec138[i] = 0;
		for (int i=0; i<3; i++) fRec137[i] = 0;
		for (int i=0; i<3; i++) fRec136[i] = 0;
		for (int i=0; i<3; i++) fRec135[i] = 0;
		for (int i=0; i<3; i++) fRec134[i] = 0;
		for (int i=0; i<3; i++) fRec133[i] = 0;
		for (int i=0; i<2; i++) fRec132[i] = 0;
		for (int i=0; i<3; i++) fRec145[i] = 0;
		for (int i=0; i<3; i++) fRec144[i] = 0;
		for (int i=0; i<3; i++) fRec143[i] = 0;
		for (int i=0; i<3; i++) fRec142[i] = 0;
		for (int i=0; i<3; i++) fRec141[i] = 0;
		for (int i=0; i<3; i++) fRec140[i] = 0;
		for (int i=0; i<2; i++) fRec139[i] = 0;
		for (int i=0; i<3; i++) fRec152[i] = 0;
		for (int i=0; i<3; i++) fRec151[i] = 0;
		for (int i=0; i<3; i++) fRec150[i] = 0;
		for (int i=0; i<3; i++) fRec149[i] = 0;
		for (int i=0; i<3; i++) fRec148[i] = 0;
		for (int i=0; i<3; i++) fRec147[i] = 0;
		for (int i=0; i<2; i++) fRec146[i] = 0;
		for (int i=0; i<3; i++) fRec159[i] = 0;
		for (int i=0; i<3; i++) fRec158[i] = 0;
		for (int i=0; i<3; i++) fRec157[i] = 0;
		for (int i=0; i<3; i++) fRec156[i] = 0;
		for (int i=0; i<3; i++) fRec155[i] = 0;
		for (int i=0; i<3; i++) fRec154[i] = 0;
		for (int i=0; i<2; i++) fRec153[i] = 0;
		for (int i=0; i<3; i++) fRec166[i] = 0;
		for (int i=0; i<3; i++) fRec165[i] = 0;
		for (int i=0; i<3; i++) fRec164[i] = 0;
		for (int i=0; i<3; i++) fRec163[i] = 0;
		for (int i=0; i<3; i++) fRec162[i] = 0;
		for (int i=0; i<3; i++) fRec161[i] = 0;
		for (int i=0; i<2; i++) fRec160[i] = 0;
		for (int i=0; i<3; i++) fRec173[i] = 0;
		for (int i=0; i<3; i++) fRec172[i] = 0;
		for (int i=0; i<3; i++) fRec171[i] = 0;
		for (int i=0; i<3; i++) fRec170[i] = 0;
		for (int i=0; i<3; i++) fRec169[i] = 0;
		for (int i=0; i<3; i++) fRec168[i] = 0;
		for (int i=0; i<2; i++) fRec167[i] = 0;
		for (int i=0; i<3; i++) fRec180[i] = 0;
		for (int i=0; i<3; i++) fRec179[i] = 0;
		for (int i=0; i<3; i++) fRec178[i] = 0;
		for (int i=0; i<3; i++) fRec177[i] = 0;
		for (int i=0; i<3; i++) fRec176[i] = 0;
		for (int i=0; i<3; i++) fRec175[i] = 0;
		for (int i=0; i<2; i++) fRec174[i] = 0;
		for (int i=0; i<3; i++) fRec187[i] = 0;
		for (int i=0; i<3; i++) fRec186[i] = 0;
		for (int i=0; i<3; i++) fRec185[i] = 0;
		for (int i=0; i<3; i++) fRec184[i] = 0;
		for (int i=0; i<3; i++) fRec183[i] = 0;
		for (int i=0; i<3; i++) fRec182[i] = 0;
		for (int i=0; i<2; i++) fRec181[i] = 0;
		for (int i=0; i<3; i++) fRec194[i] = 0;
		for (int i=0; i<3; i++) fRec193[i] = 0;
		for (int i=0; i<3; i++) fRec192[i] = 0;
		for (int i=0; i<3; i++) fRec191[i] = 0;
		for (int i=0; i<3; i++) fRec190[i] = 0;
		for (int i=0; i<3; i++) fRec189[i] = 0;
		for (int i=0; i<2; i++) fRec188[i] = 0;
		for (int i=0; i<3; i++) fRec201[i] = 0;
		for (int i=0; i<3; i++) fRec200[i] = 0;
		for (int i=0; i<3; i++) fRec199[i] = 0;
		for (int i=0; i<3; i++) fRec198[i] = 0;
		for (int i=0; i<3; i++) fRec197[i] = 0;
		for (int i=0; i<3; i++) fRec196[i] = 0;
		for (int i=0; i<2; i++) fRec195[i] = 0;
		for (int i=0; i<3; i++) fRec205[i] = 0;
		for (int i=0; i<3; i++) fRec204[i] = 0;
		for (int i=0; i<3; i++) fRec203[i] = 0;
		for (int i=0; i<2; i++) fRec202[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("graphicEqLab");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillators.lib   for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider2, "1", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Sawtooth   waveform amplitude");
		ui_interface->declare(&fslider2, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider2, -20.0f, -120.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider3, "2", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider3, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider3, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider5, "3", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Percentange frequency-shift  up or down for second oscillator");
		ui_interface->declare(&fslider5, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider5, -0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider6, "4", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider6, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider6, 0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider4, "5", "");
		ui_interface->declare(&fslider4, "scale", "log");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider4, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider4, 0.10000000000000001f, 0.001f, 10.0f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing   suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox2, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on   the left)", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "1", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the   same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox3);
		ui_interface->declare(&fcheckbox1, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise   selection above)", &fcheckbox1);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openVerticalBox("CONSTANT-Q FILTER BANK (Butterworth dyadic tree)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the filter-bank has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider16, "1", "");
		ui_interface->declare(&fslider16, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider16, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider16, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider15, "2", "");
		ui_interface->declare(&fslider15, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider15, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider15, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider14, "3", "");
		ui_interface->declare(&fslider14, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider14, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider14, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider13, "4", "");
		ui_interface->declare(&fslider13, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider13, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider13, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider12, "5", "");
		ui_interface->declare(&fslider12, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider12, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider12, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider11, "6", "");
		ui_interface->declare(&fslider11, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider11, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider11, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider10, "7", "");
		ui_interface->declare(&fslider10, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider10, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider10, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider9, "8", "");
		ui_interface->declare(&fslider9, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider9, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider8, "9", "");
		ui_interface->declare(&fslider8, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider8, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider7, "10", "");
		ui_interface->declare(&fslider7, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider7, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider7, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4de66c0", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4ddc180", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4dc8960", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4db5150", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4da1950", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d8e170", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d7a9a0", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d67200", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d53a40", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d402b0", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d2cb70", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d19430", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4d05cd0", &fbargraph2, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4cee5e0", &fbargraph1, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fb1d4cda000", &fbargraph0, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst1 / float(fslider1))));
		float 	fSlow2 = (1.0f - fSlow1);
		int 	iSlow3 = int(float(fcheckbox0));
		float 	fSlow4 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider2))));
		int 	iSlow5 = int(float(fcheckbox1));
		int 	iSlow6 = int(float(fcheckbox2));
		int 	iSlow7 = int(float(fcheckbox3));
		int 	iSlow8 = int((float(fentry0) + -1));
		int 	iSlow9 = int((iSlow8 >= 2));
		int 	iSlow10 = int((iSlow8 >= 3));
		float 	fSlow11 = expf((0 - (fConst16 / float(fslider4))));
		float 	fSlow12 = (440.0f * (powf(2.0f,(0.083333333333333329f * (float(fslider3) + -49.0f))) * (1.0f - fSlow11)));
		int 	iSlow13 = int((iSlow8 >= 1));
		float 	fSlow14 = ((0.01f * float(fslider5)) + 1);
		float 	fSlow15 = ((0.01f * float(fslider6)) + 1);
		float 	fSlow16 = (0.0010000000000000009f * float(fslider7));
		float 	fSlow17 = (0.0010000000000000009f * float(fslider8));
		float 	fSlow18 = (0.0010000000000000009f * float(fslider9));
		float 	fSlow19 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow20 = (0.0010000000000000009f * float(fslider11));
		float 	fSlow21 = (0.0010000000000000009f * float(fslider12));
		float 	fSlow22 = (0.0010000000000000009f * float(fslider13));
		float 	fSlow23 = (0.0010000000000000009f * float(fslider14));
		float 	fSlow24 = (0.0010000000000000009f * float(fslider15));
		float 	fSlow25 = (0.0010000000000000009f * float(fslider16));
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec4[0] = (fSlow4 + (0.999f * fRec4[1]));
			iRec6[0] = ((1103515245 * iRec6[1]) + 12345);
			fTempPerm0 = (4.6566128752457969e-10f * iRec6[0]);
			fRec5[0] = (((0.52218940000000003f * fRec5[3]) + (fTempPerm0 + (2.4949560019999999f * fRec5[1]))) - (2.0172658750000001f * fRec5[2]));
			fRec8[0] = (fSlow12 + (fSlow11 * fRec8[1]));
			fTempPerm1 = max(20.0f, fabsf(fRec8[0]));
			fVec1[0] = fTempPerm1;
			fTempPerm2 = (fRec7[1] + (fConst16 * fVec1[1]));
			fRec7[0] = (fTempPerm2 - floorf(fTempPerm2));
			fTempPerm3 = (2 * fRec7[0]);
			fTempPerm4 = (fTempPerm3 + -1);
			fTempPerm5 = faustpower<2>(fTempPerm4);
			fVec2[0] = fTempPerm5;
			fTempPerm6 = (fVec2[0] * (fVec2[0] + -2.0f));
			fVec3[0] = fTempPerm6;
			fTempPerm7 = ((fVec3[0] - fVec3[1]) / fVec1[0]);
			fVec4[0] = fTempPerm7;
			fTempPerm8 = ((fVec4[0] - fVec4[1]) / fVec1[0]);
			fVec5[0] = fTempPerm8;
			fTempPerm9 = faustpower<3>(fTempPerm4);
			fVec6[0] = (fTempPerm9 + (1 - fTempPerm3));
			fTempPerm10 = ((fTempPerm9 + (1 - (fTempPerm3 + fVec6[1]))) / fVec1[0]);
			fVec7[0] = fTempPerm10;
			fTempPerm11 = max(20.0f, fabsf((fSlow14 * fRec8[0])));
			fVec8[0] = fTempPerm11;
			fTempPerm12 = (fRec9[1] + (fConst16 * fVec8[1]));
			fRec9[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = (2 * fRec9[0]);
			fTempPerm14 = (fTempPerm13 + -1);
			fTempPerm15 = faustpower<2>(fTempPerm14);
			fVec9[0] = fTempPerm15;
			fTempPerm16 = (fVec9[0] * (fVec9[0] + -2.0f));
			fVec10[0] = fTempPerm16;
			fTempPerm17 = ((fVec10[0] - fVec10[1]) / fVec8[0]);
			fVec11[0] = fTempPerm17;
			fTempPerm18 = ((fVec11[0] - fVec11[1]) / fVec8[0]);
			fVec12[0] = fTempPerm18;
			fTempPerm19 = faustpower<3>(fTempPerm14);
			fVec13[0] = (fTempPerm19 + (1 - fTempPerm13));
			fTempPerm20 = ((fTempPerm19 + (1 - (fTempPerm13 + fVec13[1]))) / fVec8[0]);
			fVec14[0] = fTempPerm20;
			fTempPerm21 = max(20.0f, fabsf((fSlow15 * fRec8[0])));
			fVec15[0] = fTempPerm21;
			fTempPerm22 = (fRec10[1] + (fConst16 * fVec15[1]));
			fRec10[0] = (fTempPerm22 - floorf(fTempPerm22));
			fTempPerm23 = (2 * fRec10[0]);
			fTempPerm24 = (fTempPerm23 + -1);
			fTempPerm25 = faustpower<2>(fTempPerm24);
			fVec16[0] = fTempPerm25;
			fTempPerm26 = (fVec16[0] * (fVec16[0] + -2.0f));
			fVec17[0] = fTempPerm26;
			fTempPerm27 = ((fVec17[0] - fVec17[1]) / fVec15[0]);
			fVec18[0] = fTempPerm27;
			fTempPerm28 = ((fVec18[0] - fVec18[1]) / fVec15[0]);
			fVec19[0] = fTempPerm28;
			fTempPerm29 = faustpower<3>(fTempPerm24);
			fVec20[0] = (fTempPerm29 + (1 - fTempPerm23));
			fTempPerm30 = ((fTempPerm29 + (1 - (fTempPerm23 + fVec20[1]))) / fVec15[0]);
			fVec21[0] = fTempPerm30;
			fTempPerm31 = (fRec4[0] * ((iSlow5)?(float)input0[i]:((iSlow6)?((iSlow7)?(((0.049922034999999997f * fRec5[0]) + (0.050612698999999997f * fRec5[2])) - ((0.095993537000000004f * fRec5[1]) + (0.0044087859999999996f * fRec5[3]))):fTempPerm0):(0.33333333333333331f * (fRec4[0] * ((((iSlow9)?((iSlow10)?(fConst15 * ((iVec0[3] * (fVec5[0] - fVec5[1])) / fVec1[0])):(fConst17 * ((iVec0[2] * (fVec7[0] - fVec7[1])) / fVec1[0]))):((iSlow13)?(fConst18 * ((iVec0[1] * (fVec2[0] - fVec2[1])) / fVec1[0])):fTempPerm4)) + ((iSlow9)?((iSlow10)?(fConst15 * ((iVec0[3] * (fVec12[0] - fVec12[1])) / fVec8[0])):(fConst17 * ((iVec0[2] * (fVec14[0] - fVec14[1])) / fVec8[0]))):((iSlow13)?(fConst18 * ((iVec0[1] * (fVec9[0] - fVec9[1])) / fVec8[0])):fTempPerm14))) + ((iSlow9)?((iSlow10)?(fConst15 * ((iVec0[3] * (fVec19[0] - fVec19[1])) / fVec15[0])):(fConst17 * ((iVec0[2] * (fVec21[0] - fVec21[1])) / fVec15[0]))):((iSlow13)?(fConst18 * ((iVec0[1] * (fVec16[0] - fVec16[1])) / fVec15[0])):fTempPerm24))))))));
			fTempPerm32 = ((iSlow3)?0:fTempPerm31);
			fVec22[0] = fTempPerm32;
			fRec21[0] = ((fConst27 * fRec21[1]) + (fConst28 * ((fConst20 * fVec22[0]) + (fConst29 * fVec22[1]))));
			fRec20[0] = (fRec21[0] - (fConst25 * ((fConst30 * fRec20[1]) + (fConst31 * fRec20[2]))));
			fRec19[0] = ((fConst25 * (((fConst24 * fRec20[1]) + (fConst23 * fRec20[0])) + (fConst23 * fRec20[2]))) - (fConst22 * ((fConst30 * fRec19[1]) + (fConst32 * fRec19[2]))));
			fTempPerm33 = (fConst38 * fRec18[1]);
			fRec18[0] = ((fConst22 * (((fConst24 * fRec19[1]) + (fConst23 * fRec19[0])) + (fConst23 * fRec19[2]))) - (fConst35 * ((fConst36 * fRec18[2]) + fTempPerm33)));
			fTempPerm34 = (fConst44 * fRec17[1]);
			fRec17[0] = ((fRec18[2] + (fConst35 * (fTempPerm33 + (fConst36 * fRec18[0])))) - (fConst41 * ((fConst42 * fRec17[2]) + fTempPerm34)));
			fTempPerm35 = (fConst50 * fRec16[1]);
			fRec16[0] = ((fRec17[2] + (fConst41 * (fTempPerm34 + (fConst42 * fRec17[0])))) - (fConst47 * ((fConst48 * fRec16[2]) + fTempPerm35)));
			fTempPerm36 = (fConst56 * fRec15[1]);
			fRec15[0] = ((fRec16[2] + (fConst47 * (fTempPerm35 + (fConst48 * fRec16[0])))) - (fConst53 * ((fConst54 * fRec15[2]) + fTempPerm36)));
			fTempPerm37 = (fConst62 * fRec14[1]);
			fRec14[0] = ((fRec15[2] + (fConst53 * (fTempPerm36 + (fConst54 * fRec15[0])))) - (fConst59 * ((fConst60 * fRec14[2]) + fTempPerm37)));
			fTempPerm38 = (fConst68 * fRec13[1]);
			fRec13[0] = ((fRec14[2] + (fConst59 * (fTempPerm37 + (fConst60 * fRec14[0])))) - (fConst65 * ((fConst66 * fRec13[2]) + fTempPerm38)));
			fTempPerm39 = (fConst74 * fRec12[1]);
			fRec12[0] = ((fRec13[2] + (fConst65 * (fTempPerm38 + (fConst66 * fRec13[0])))) - (fConst71 * ((fConst72 * fRec12[2]) + fTempPerm39)));
			fTempPerm40 = (fConst80 * fRec11[1]);
			fRec11[0] = ((fRec12[2] + (fConst71 * (fTempPerm39 + (fConst72 * fRec12[0])))) - (fConst77 * ((fConst78 * fRec11[2]) + fTempPerm40)));
			fRec22[0] = (fSlow16 + (0.999f * fRec22[1]));
			fRec35[0] = ((fConst27 * fRec35[1]) + (fConst28 * (fVec22[0] + fVec22[1])));
			fRec34[0] = (fRec35[0] - (fConst25 * ((fConst30 * fRec34[1]) + (fConst31 * fRec34[2]))));
			fRec33[0] = ((fConst25 * (fRec34[2] + (fRec34[0] + (2.0f * fRec34[1])))) - (fConst22 * ((fConst30 * fRec33[1]) + (fConst32 * fRec33[2]))));
			fTempPerm41 = (fRec33[2] + (fRec33[0] + (2.0f * fRec33[1])));
			fVec23[0] = fTempPerm41;
			fRec32[0] = ((fConst86 * fRec32[1]) + (fConst87 * ((fConst76 * fVec23[0]) + (fConst88 * fVec23[1]))));
			fRec31[0] = (fRec32[0] - (fConst84 * ((fConst80 * fRec31[1]) + (fConst89 * fRec31[2]))));
			fRec30[0] = ((fConst84 * (((fConst79 * fRec31[0]) + (fConst83 * fRec31[1])) + (fConst79 * fRec31[2]))) - (fConst82 * ((fConst80 * fRec30[1]) + (fConst90 * fRec30[2]))));
			fTempPerm42 = (fConst38 * fRec29[1]);
			fRec29[0] = ((fConst82 * (((fConst83 * fRec30[1]) + (fConst79 * fRec30[0])) + (fConst79 * fRec30[2]))) - (fConst35 * (fTempPerm42 + (fConst36 * fRec29[2]))));
			fTempPerm43 = (fConst44 * fRec28[1]);
			fRec28[0] = ((fRec29[2] + (fConst35 * (fTempPerm42 + (fConst36 * fRec29[0])))) - (fConst41 * (fTempPerm43 + (fConst42 * fRec28[2]))));
			fTempPerm44 = (fConst50 * fRec27[1]);
			fRec27[0] = ((fRec28[2] + (fConst41 * (fTempPerm43 + (fConst42 * fRec28[0])))) - (fConst47 * (fTempPerm44 + (fConst48 * fRec27[2]))));
			fTempPerm45 = (fConst56 * fRec26[1]);
			fRec26[0] = ((fRec27[2] + (fConst47 * (fTempPerm44 + (fConst48 * fRec27[0])))) - (fConst53 * (fTempPerm45 + (fConst54 * fRec26[2]))));
			fTempPerm46 = (fConst62 * fRec25[1]);
			fRec25[0] = ((fRec26[2] + (fConst53 * (fTempPerm45 + (fConst54 * fRec26[0])))) - (fConst59 * (fTempPerm46 + (fConst60 * fRec25[2]))));
			fTempPerm47 = (fConst68 * fRec24[1]);
			fRec24[0] = ((fRec25[2] + (fConst59 * (fTempPerm46 + (fConst60 * fRec25[0])))) - (fConst65 * (fTempPerm47 + (fConst66 * fRec24[2]))));
			fTempPerm48 = (fConst74 * fRec23[1]);
			fRec23[0] = ((fRec24[2] + (fConst65 * (fTempPerm47 + (fConst66 * fRec24[0])))) - (fConst71 * (fTempPerm48 + (fConst72 * fRec23[2]))));
			fRec36[0] = (fSlow17 + (0.999f * fRec36[1]));
			fRec48[0] = ((fConst86 * fRec48[1]) + (fConst87 * (fVec23[0] + fVec23[1])));
			fRec47[0] = (fRec48[0] - (fConst84 * ((fConst80 * fRec47[1]) + (fConst89 * fRec47[2]))));
			fRec46[0] = ((fConst84 * (fRec47[2] + (fRec47[0] + (2.0f * fRec47[1])))) - (fConst82 * ((fConst80 * fRec46[1]) + (fConst90 * fRec46[2]))));
			fTempPerm49 = (fRec46[2] + (fRec46[0] + (2.0f * fRec46[1])));
			fVec24[0] = fTempPerm49;
			fRec45[0] = ((fConst96 * fRec45[1]) + (fConst97 * ((fConst70 * fVec24[0]) + (fConst98 * fVec24[1]))));
			fRec44[0] = (fRec45[0] - (fConst94 * ((fConst74 * fRec44[1]) + (fConst99 * fRec44[2]))));
			fRec43[0] = ((fConst94 * (((fConst73 * fRec44[0]) + (fConst93 * fRec44[1])) + (fConst73 * fRec44[2]))) - (fConst92 * ((fConst74 * fRec43[1]) + (fConst100 * fRec43[2]))));
			fTempPerm50 = (fConst38 * fRec42[1]);
			fRec42[0] = ((fConst92 * (((fConst93 * fRec43[1]) + (fConst73 * fRec43[0])) + (fConst73 * fRec43[2]))) - (fConst35 * (fTempPerm50 + (fConst36 * fRec42[2]))));
			fTempPerm51 = (fConst44 * fRec41[1]);
			fRec41[0] = ((fRec42[2] + (fConst35 * (fTempPerm50 + (fConst36 * fRec42[0])))) - (fConst41 * (fTempPerm51 + (fConst42 * fRec41[2]))));
			fTempPerm52 = (fConst50 * fRec40[1]);
			fRec40[0] = ((fRec41[2] + (fConst41 * (fTempPerm51 + (fConst42 * fRec41[0])))) - (fConst47 * (fTempPerm52 + (fConst48 * fRec40[2]))));
			fTempPerm53 = (fConst56 * fRec39[1]);
			fRec39[0] = ((fRec40[2] + (fConst47 * (fTempPerm52 + (fConst48 * fRec40[0])))) - (fConst53 * (fTempPerm53 + (fConst54 * fRec39[2]))));
			fTempPerm54 = (fConst62 * fRec38[1]);
			fRec38[0] = ((fRec39[2] + (fConst53 * (fTempPerm53 + (fConst54 * fRec39[0])))) - (fConst59 * (fTempPerm54 + (fConst60 * fRec38[2]))));
			fTempPerm55 = (fConst68 * fRec37[1]);
			fRec37[0] = ((fRec38[2] + (fConst59 * (fTempPerm54 + (fConst60 * fRec38[0])))) - (fConst65 * (fTempPerm55 + (fConst66 * fRec37[2]))));
			fRec49[0] = (fSlow18 + (0.999f * fRec49[1]));
			fRec60[0] = ((fConst96 * fRec60[1]) + (fConst97 * (fVec24[0] + fVec24[1])));
			fRec59[0] = (fRec60[0] - (fConst94 * ((fConst74 * fRec59[1]) + (fConst99 * fRec59[2]))));
			fRec58[0] = ((fConst94 * (fRec59[2] + (fRec59[0] + (2.0f * fRec59[1])))) - (fConst92 * ((fConst74 * fRec58[1]) + (fConst100 * fRec58[2]))));
			fTempPerm56 = (fRec58[2] + (fRec58[0] + (2.0f * fRec58[1])));
			fVec25[0] = fTempPerm56;
			fRec57[0] = ((fConst106 * fRec57[1]) + (fConst107 * ((fConst64 * fVec25[0]) + (fConst108 * fVec25[1]))));
			fRec56[0] = (fRec57[0] - (fConst104 * ((fConst68 * fRec56[1]) + (fConst109 * fRec56[2]))));
			fRec55[0] = ((fConst104 * (((fConst67 * fRec56[0]) + (fConst103 * fRec56[1])) + (fConst67 * fRec56[2]))) - (fConst102 * ((fConst68 * fRec55[1]) + (fConst110 * fRec55[2]))));
			fTempPerm57 = (fConst38 * fRec54[1]);
			fRec54[0] = ((fConst102 * (((fConst103 * fRec55[1]) + (fConst67 * fRec55[0])) + (fConst67 * fRec55[2]))) - (fConst35 * (fTempPerm57 + (fConst36 * fRec54[2]))));
			fTempPerm58 = (fConst44 * fRec53[1]);
			fRec53[0] = ((fRec54[2] + (fConst35 * (fTempPerm57 + (fConst36 * fRec54[0])))) - (fConst41 * (fTempPerm58 + (fConst42 * fRec53[2]))));
			fTempPerm59 = (fConst50 * fRec52[1]);
			fRec52[0] = ((fRec53[2] + (fConst41 * (fTempPerm58 + (fConst42 * fRec53[0])))) - (fConst47 * (fTempPerm59 + (fConst48 * fRec52[2]))));
			fTempPerm60 = (fConst56 * fRec51[1]);
			fRec51[0] = ((fRec52[2] + (fConst47 * (fTempPerm59 + (fConst48 * fRec52[0])))) - (fConst53 * (fTempPerm60 + (fConst54 * fRec51[2]))));
			fTempPerm61 = (fConst62 * fRec50[1]);
			fRec50[0] = ((fRec51[2] + (fConst53 * (fTempPerm60 + (fConst54 * fRec51[0])))) - (fConst59 * (fTempPerm61 + (fConst60 * fRec50[2]))));
			fRec61[0] = (fSlow19 + (0.999f * fRec61[1]));
			fRec71[0] = ((fConst106 * fRec71[1]) + (fConst107 * (fVec25[0] + fVec25[1])));
			fRec70[0] = (fRec71[0] - (fConst104 * ((fConst68 * fRec70[1]) + (fConst109 * fRec70[2]))));
			fRec69[0] = ((fConst104 * (fRec70[2] + (fRec70[0] + (2.0f * fRec70[1])))) - (fConst102 * ((fConst68 * fRec69[1]) + (fConst110 * fRec69[2]))));
			fTempPerm62 = (fRec69[2] + (fRec69[0] + (2.0f * fRec69[1])));
			fVec26[0] = fTempPerm62;
			fRec68[0] = ((fConst116 * fRec68[1]) + (fConst117 * ((fConst58 * fVec26[0]) + (fConst118 * fVec26[1]))));
			fRec67[0] = (fRec68[0] - (fConst114 * ((fConst62 * fRec67[1]) + (fConst119 * fRec67[2]))));
			fRec66[0] = ((fConst114 * (((fConst61 * fRec67[0]) + (fConst113 * fRec67[1])) + (fConst61 * fRec67[2]))) - (fConst112 * ((fConst62 * fRec66[1]) + (fConst120 * fRec66[2]))));
			fTempPerm63 = (fConst38 * fRec65[1]);
			fRec65[0] = ((fConst112 * (((fConst113 * fRec66[1]) + (fConst61 * fRec66[0])) + (fConst61 * fRec66[2]))) - (fConst35 * (fTempPerm63 + (fConst36 * fRec65[2]))));
			fTempPerm64 = (fConst44 * fRec64[1]);
			fRec64[0] = ((fRec65[2] + (fConst35 * (fTempPerm63 + (fConst36 * fRec65[0])))) - (fConst41 * (fTempPerm64 + (fConst42 * fRec64[2]))));
			fTempPerm65 = (fConst50 * fRec63[1]);
			fRec63[0] = ((fRec64[2] + (fConst41 * (fTempPerm64 + (fConst42 * fRec64[0])))) - (fConst47 * (fTempPerm65 + (fConst48 * fRec63[2]))));
			fTempPerm66 = (fConst56 * fRec62[1]);
			fRec62[0] = ((fRec63[2] + (fConst47 * (fTempPerm65 + (fConst48 * fRec63[0])))) - (fConst53 * (fTempPerm66 + (fConst54 * fRec62[2]))));
			fRec72[0] = (fSlow20 + (0.999f * fRec72[1]));
			fRec81[0] = ((fConst116 * fRec81[1]) + (fConst117 * (fVec26[0] + fVec26[1])));
			fRec80[0] = (fRec81[0] - (fConst114 * ((fConst62 * fRec80[1]) + (fConst119 * fRec80[2]))));
			fRec79[0] = ((fConst114 * (fRec80[2] + (fRec80[0] + (2.0f * fRec80[1])))) - (fConst112 * ((fConst62 * fRec79[1]) + (fConst120 * fRec79[2]))));
			fTempPerm67 = (fRec79[2] + (fRec79[0] + (2.0f * fRec79[1])));
			fVec27[0] = fTempPerm67;
			fRec78[0] = ((fConst126 * fRec78[1]) + (fConst127 * ((fConst52 * fVec27[0]) + (fConst128 * fVec27[1]))));
			fRec77[0] = (fRec78[0] - (fConst124 * ((fConst56 * fRec77[1]) + (fConst129 * fRec77[2]))));
			fRec76[0] = ((fConst124 * (((fConst55 * fRec77[0]) + (fConst123 * fRec77[1])) + (fConst55 * fRec77[2]))) - (fConst122 * ((fConst56 * fRec76[1]) + (fConst130 * fRec76[2]))));
			fTempPerm68 = (fConst38 * fRec75[1]);
			fRec75[0] = ((fConst122 * (((fConst123 * fRec76[1]) + (fConst55 * fRec76[0])) + (fConst55 * fRec76[2]))) - (fConst35 * (fTempPerm68 + (fConst36 * fRec75[2]))));
			fTempPerm69 = (fConst44 * fRec74[1]);
			fRec74[0] = ((fRec75[2] + (fConst35 * (fTempPerm68 + (fConst36 * fRec75[0])))) - (fConst41 * (fTempPerm69 + (fConst42 * fRec74[2]))));
			fTempPerm70 = (fConst50 * fRec73[1]);
			fRec73[0] = ((fRec74[2] + (fConst41 * (fTempPerm69 + (fConst42 * fRec74[0])))) - (fConst47 * (fTempPerm70 + (fConst48 * fRec73[2]))));
			fRec82[0] = (fSlow21 + (0.999f * fRec82[1]));
			fRec90[0] = ((fConst126 * fRec90[1]) + (fConst127 * (fVec27[0] + fVec27[1])));
			fRec89[0] = (fRec90[0] - (fConst124 * ((fConst56 * fRec89[1]) + (fConst129 * fRec89[2]))));
			fRec88[0] = ((fConst124 * (fRec89[2] + (fRec89[0] + (2.0f * fRec89[1])))) - (fConst122 * ((fConst56 * fRec88[1]) + (fConst130 * fRec88[2]))));
			fTempPerm71 = (fRec88[2] + (fRec88[0] + (2.0f * fRec88[1])));
			fVec28[0] = fTempPerm71;
			fRec87[0] = ((fConst136 * fRec87[1]) + (fConst137 * ((fConst46 * fVec28[0]) + (fConst138 * fVec28[1]))));
			fRec86[0] = (fRec87[0] - (fConst134 * ((fConst50 * fRec86[1]) + (fConst139 * fRec86[2]))));
			fRec85[0] = ((fConst134 * (((fConst49 * fRec86[0]) + (fConst133 * fRec86[1])) + (fConst49 * fRec86[2]))) - (fConst132 * ((fConst50 * fRec85[1]) + (fConst140 * fRec85[2]))));
			fTempPerm72 = (fConst38 * fRec84[1]);
			fRec84[0] = ((fConst132 * (((fConst133 * fRec85[1]) + (fConst49 * fRec85[0])) + (fConst49 * fRec85[2]))) - (fConst35 * (fTempPerm72 + (fConst36 * fRec84[2]))));
			fTempPerm73 = (fConst44 * fRec83[1]);
			fRec83[0] = ((fRec84[2] + (fConst35 * (fTempPerm72 + (fConst36 * fRec84[0])))) - (fConst41 * (fTempPerm73 + (fConst42 * fRec83[2]))));
			fRec91[0] = (fSlow22 + (0.999f * fRec91[1]));
			fRec98[0] = ((fConst136 * fRec98[1]) + (fConst137 * (fVec28[0] + fVec28[1])));
			fRec97[0] = (fRec98[0] - (fConst134 * ((fConst50 * fRec97[1]) + (fConst139 * fRec97[2]))));
			fRec96[0] = ((fConst134 * (fRec97[2] + (fRec97[0] + (2.0f * fRec97[1])))) - (fConst132 * ((fConst50 * fRec96[1]) + (fConst140 * fRec96[2]))));
			fTempPerm74 = (fRec96[2] + (fRec96[0] + (2.0f * fRec96[1])));
			fVec29[0] = fTempPerm74;
			fRec95[0] = ((fConst146 * fRec95[1]) + (fConst147 * ((fConst40 * fVec29[0]) + (fConst148 * fVec29[1]))));
			fRec94[0] = (fRec95[0] - (fConst144 * ((fConst44 * fRec94[1]) + (fConst149 * fRec94[2]))));
			fRec93[0] = ((fConst144 * (((fConst43 * fRec94[0]) + (fConst143 * fRec94[1])) + (fConst43 * fRec94[2]))) - (fConst142 * ((fConst44 * fRec93[1]) + (fConst150 * fRec93[2]))));
			fTempPerm75 = (fConst38 * fRec92[1]);
			fRec92[0] = ((fConst142 * (((fConst143 * fRec93[1]) + (fConst43 * fRec93[0])) + (fConst43 * fRec93[2]))) - (fConst35 * (fTempPerm75 + (fConst36 * fRec92[2]))));
			fRec99[0] = (fSlow23 + (0.999f * fRec99[1]));
			fRec105[0] = ((fConst146 * fRec105[1]) + (fConst147 * (fVec29[0] + fVec29[1])));
			fRec104[0] = (fRec105[0] - (fConst144 * ((fConst44 * fRec104[1]) + (fConst149 * fRec104[2]))));
			fRec103[0] = ((fConst144 * (fRec104[2] + (fRec104[0] + (2.0f * fRec104[1])))) - (fConst142 * ((fConst44 * fRec103[1]) + (fConst150 * fRec103[2]))));
			fTempPerm76 = (fRec103[2] + (fRec103[0] + (2.0f * fRec103[1])));
			fVec30[0] = fTempPerm76;
			fRec102[0] = ((fConst155 * fRec102[1]) + (fConst156 * ((fConst34 * fVec30[0]) + (fConst157 * fVec30[1]))));
			fRec101[0] = (fRec102[0] - (fConst153 * ((fConst38 * fRec101[1]) + (fConst158 * fRec101[2]))));
			fRec100[0] = ((fConst153 * (((fConst37 * fRec101[0]) + (fConst152 * fRec101[1])) + (fConst37 * fRec101[2]))) - (fConst151 * ((fConst38 * fRec100[1]) + (fConst159 * fRec100[2]))));
			fRec106[0] = (fSlow24 + (0.999f * fRec106[1]));
			fRec109[0] = ((fConst155 * fRec109[1]) + (fConst156 * (fVec30[0] + fVec30[1])));
			fRec108[0] = (fRec109[0] - (fConst153 * ((fConst38 * fRec108[1]) + (fConst158 * fRec108[2]))));
			fRec107[0] = ((fConst153 * (fRec108[2] + (fRec108[0] + (2.0f * fRec108[1])))) - (fConst151 * ((fConst38 * fRec107[1]) + (fConst159 * fRec107[2]))));
			fRec110[0] = (fSlow25 + (0.999f * fRec110[1]));
			fTempPerm77 = ((iSlow3)?fTempPerm31:((((((((((fRec11[2] + (fConst77 * (fTempPerm40 + (fConst78 * fRec11[0])))) * powf(10,(0.050000000000000003f * fRec22[0]))) + ((fRec23[2] + (fConst71 * (fTempPerm48 + (fConst72 * fRec23[0])))) * powf(10,(0.050000000000000003f * fRec36[0])))) + ((fRec37[2] + (fConst65 * (fTempPerm55 + (fConst66 * fRec37[0])))) * powf(10,(0.050000000000000003f * fRec49[0])))) + ((fRec50[2] + (fConst59 * (fTempPerm61 + (fConst60 * fRec50[0])))) * powf(10,(0.050000000000000003f * fRec61[0])))) + ((fRec62[2] + (fConst53 * (fTempPerm66 + (fConst54 * fRec62[0])))) * powf(10,(0.050000000000000003f * fRec72[0])))) + ((fRec73[2] + (fConst47 * (fTempPerm70 + (fConst48 * fRec73[0])))) * powf(10,(0.050000000000000003f * fRec82[0])))) + ((fRec83[2] + (fConst41 * (fTempPerm73 + (fConst42 * fRec83[0])))) * powf(10,(0.050000000000000003f * fRec91[0])))) + ((fRec92[2] + (fConst35 * (fTempPerm75 + (fConst36 * fRec92[0])))) * powf(10,(0.050000000000000003f * fRec99[0])))) + (fConst151 * (((((fConst152 * fRec100[1]) + (fConst37 * fRec100[0])) + (fConst37 * fRec100[2])) * powf(10,(0.050000000000000003f * fRec106[0]))) + ((fRec107[2] + (fRec107[0] + (2.0f * fRec107[1]))) * powf(10,(0.050000000000000003f * fRec110[0])))))));
			fRec3[0] = (fTempPerm77 - (fConst11 * ((fConst160 * fRec3[2]) + (fConst162 * fRec3[1]))));
			fRec2[0] = ((fConst11 * (((fConst13 * fRec3[1]) + (fConst163 * fRec3[0])) + (fConst163 * fRec3[2]))) - (fConst8 * ((fConst164 * fRec2[2]) + (fConst165 * fRec2[1]))));
			fRec1[0] = ((fConst8 * (((fConst10 * fRec2[1]) + (fConst166 * fRec2[0])) + (fConst166 * fRec2[2]))) - (fConst4 * ((fConst167 * fRec1[2]) + (fConst168 * fRec1[1]))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * fabsf((fConst4 * (((fConst7 * fRec1[1]) + (fConst169 * fRec1[0])) + (fConst169 * fRec1[2]))))));
			fbargraph0 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec0[0]))));
			fRec117[0] = (fTempPerm77 - (fConst186 * ((fConst189 * fRec117[2]) + (fConst190 * fRec117[1]))));
			fRec116[0] = ((fConst186 * (((fConst188 * fRec117[1]) + (fConst191 * fRec117[0])) + (fConst191 * fRec117[2]))) - (fConst184 * ((fConst192 * fRec116[2]) + (fConst193 * fRec116[1]))));
			fRec115[0] = ((fConst184 * (((fConst185 * fRec116[1]) + (fConst194 * fRec116[0])) + (fConst194 * fRec116[2]))) - (fConst182 * ((fConst195 * fRec115[2]) + (fConst196 * fRec115[1]))));
			fTempPerm78 = (fConst182 * (((fConst183 * fRec115[1]) + (fConst197 * fRec115[0])) + (fConst197 * fRec115[2])));
			fRec114[0] = (fTempPerm78 - (fConst179 * ((fConst198 * fRec114[2]) + (fConst200 * fRec114[1]))));
			fRec113[0] = ((fConst179 * (((fConst181 * fRec114[1]) + (fConst201 * fRec114[0])) + (fConst201 * fRec114[2]))) - (fConst176 * ((fConst202 * fRec113[2]) + (fConst203 * fRec113[1]))));
			fRec112[0] = ((fConst176 * (((fConst178 * fRec113[1]) + (fConst204 * fRec113[0])) + (fConst204 * fRec113[2]))) - (fConst172 * ((fConst205 * fRec112[2]) + (fConst206 * fRec112[1]))));
			fRec111[0] = ((fSlow1 * fRec111[1]) + (fSlow2 * fabsf((fConst172 * (((fConst175 * fRec112[1]) + (fConst207 * fRec112[0])) + (fConst207 * fRec112[2]))))));
			fbargraph1 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec111[0]))));
			fRec124[0] = (fTempPerm78 - (fConst224 * ((fConst227 * fRec124[2]) + (fConst228 * fRec124[1]))));
			fRec123[0] = ((fConst224 * (((fConst226 * fRec124[1]) + (fConst229 * fRec124[0])) + (fConst229 * fRec124[2]))) - (fConst222 * ((fConst230 * fRec123[2]) + (fConst231 * fRec123[1]))));
			fRec122[0] = ((fConst222 * (((fConst223 * fRec123[1]) + (fConst232 * fRec123[0])) + (fConst232 * fRec123[2]))) - (fConst220 * ((fConst233 * fRec122[2]) + (fConst234 * fRec122[1]))));
			fTempPerm79 = (fConst220 * (((fConst221 * fRec122[1]) + (fConst235 * fRec122[0])) + (fConst235 * fRec122[2])));
			fRec121[0] = (fTempPerm79 - (fConst217 * ((fConst236 * fRec121[2]) + (fConst238 * fRec121[1]))));
			fRec120[0] = ((fConst217 * (((fConst219 * fRec121[1]) + (fConst239 * fRec121[0])) + (fConst239 * fRec121[2]))) - (fConst214 * ((fConst240 * fRec120[2]) + (fConst241 * fRec120[1]))));
			fRec119[0] = ((fConst214 * (((fConst216 * fRec120[1]) + (fConst242 * fRec120[0])) + (fConst242 * fRec120[2]))) - (fConst210 * ((fConst243 * fRec119[2]) + (fConst244 * fRec119[1]))));
			fRec118[0] = ((fSlow1 * fRec118[1]) + (fSlow2 * fabsf((fConst210 * (((fConst213 * fRec119[1]) + (fConst245 * fRec119[0])) + (fConst245 * fRec119[2]))))));
			fbargraph2 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec118[0]))));
			fRec131[0] = (fTempPerm79 - (fConst262 * ((fConst265 * fRec131[2]) + (fConst266 * fRec131[1]))));
			fRec130[0] = ((fConst262 * (((fConst264 * fRec131[1]) + (fConst267 * fRec131[0])) + (fConst267 * fRec131[2]))) - (fConst260 * ((fConst268 * fRec130[2]) + (fConst269 * fRec130[1]))));
			fRec129[0] = ((fConst260 * (((fConst261 * fRec130[1]) + (fConst270 * fRec130[0])) + (fConst270 * fRec130[2]))) - (fConst258 * ((fConst271 * fRec129[2]) + (fConst272 * fRec129[1]))));
			fTempPerm80 = (fConst258 * (((fConst259 * fRec129[1]) + (fConst273 * fRec129[0])) + (fConst273 * fRec129[2])));
			fRec128[0] = (fTempPerm80 - (fConst255 * ((fConst274 * fRec128[2]) + (fConst276 * fRec128[1]))));
			fRec127[0] = ((fConst255 * (((fConst257 * fRec128[1]) + (fConst277 * fRec128[0])) + (fConst277 * fRec128[2]))) - (fConst252 * ((fConst278 * fRec127[2]) + (fConst279 * fRec127[1]))));
			fRec126[0] = ((fConst252 * (((fConst254 * fRec127[1]) + (fConst280 * fRec127[0])) + (fConst280 * fRec127[2]))) - (fConst248 * ((fConst281 * fRec126[2]) + (fConst282 * fRec126[1]))));
			fRec125[0] = ((fSlow1 * fRec125[1]) + (fSlow2 * fabsf((fConst248 * (((fConst251 * fRec126[1]) + (fConst283 * fRec126[0])) + (fConst283 * fRec126[2]))))));
			fbargraph3 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec125[0]))));
			fRec138[0] = (fTempPerm80 - (fConst300 * ((fConst303 * fRec138[2]) + (fConst304 * fRec138[1]))));
			fRec137[0] = ((fConst300 * (((fConst302 * fRec138[1]) + (fConst305 * fRec138[0])) + (fConst305 * fRec138[2]))) - (fConst298 * ((fConst306 * fRec137[2]) + (fConst307 * fRec137[1]))));
			fRec136[0] = ((fConst298 * (((fConst299 * fRec137[1]) + (fConst308 * fRec137[0])) + (fConst308 * fRec137[2]))) - (fConst296 * ((fConst309 * fRec136[2]) + (fConst310 * fRec136[1]))));
			fTempPerm81 = (fConst296 * (((fConst297 * fRec136[1]) + (fConst311 * fRec136[0])) + (fConst311 * fRec136[2])));
			fRec135[0] = (fTempPerm81 - (fConst293 * ((fConst312 * fRec135[2]) + (fConst314 * fRec135[1]))));
			fRec134[0] = ((fConst293 * (((fConst295 * fRec135[1]) + (fConst315 * fRec135[0])) + (fConst315 * fRec135[2]))) - (fConst290 * ((fConst316 * fRec134[2]) + (fConst317 * fRec134[1]))));
			fRec133[0] = ((fConst290 * (((fConst292 * fRec134[1]) + (fConst318 * fRec134[0])) + (fConst318 * fRec134[2]))) - (fConst286 * ((fConst319 * fRec133[2]) + (fConst320 * fRec133[1]))));
			fRec132[0] = ((fSlow1 * fRec132[1]) + (fSlow2 * fabsf((fConst286 * (((fConst289 * fRec133[1]) + (fConst321 * fRec133[0])) + (fConst321 * fRec133[2]))))));
			fbargraph4 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec132[0]))));
			fRec145[0] = (fTempPerm81 - (fConst338 * ((fConst341 * fRec145[2]) + (fConst342 * fRec145[1]))));
			fRec144[0] = ((fConst338 * (((fConst340 * fRec145[1]) + (fConst343 * fRec145[0])) + (fConst343 * fRec145[2]))) - (fConst336 * ((fConst344 * fRec144[2]) + (fConst345 * fRec144[1]))));
			fRec143[0] = ((fConst336 * (((fConst337 * fRec144[1]) + (fConst346 * fRec144[0])) + (fConst346 * fRec144[2]))) - (fConst334 * ((fConst347 * fRec143[2]) + (fConst348 * fRec143[1]))));
			fTempPerm82 = (fConst334 * (((fConst335 * fRec143[1]) + (fConst349 * fRec143[0])) + (fConst349 * fRec143[2])));
			fRec142[0] = (fTempPerm82 - (fConst331 * ((fConst350 * fRec142[2]) + (fConst352 * fRec142[1]))));
			fRec141[0] = ((fConst331 * (((fConst333 * fRec142[1]) + (fConst353 * fRec142[0])) + (fConst353 * fRec142[2]))) - (fConst328 * ((fConst354 * fRec141[2]) + (fConst355 * fRec141[1]))));
			fRec140[0] = ((fConst328 * (((fConst330 * fRec141[1]) + (fConst356 * fRec141[0])) + (fConst356 * fRec141[2]))) - (fConst324 * ((fConst357 * fRec140[2]) + (fConst358 * fRec140[1]))));
			fRec139[0] = ((fSlow1 * fRec139[1]) + (fSlow2 * fabsf((fConst324 * (((fConst327 * fRec140[1]) + (fConst359 * fRec140[0])) + (fConst359 * fRec140[2]))))));
			fbargraph5 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec139[0]))));
			fRec152[0] = (fTempPerm82 - (fConst376 * ((fConst379 * fRec152[2]) + (fConst380 * fRec152[1]))));
			fRec151[0] = ((fConst376 * (((fConst378 * fRec152[1]) + (fConst381 * fRec152[0])) + (fConst381 * fRec152[2]))) - (fConst374 * ((fConst382 * fRec151[2]) + (fConst383 * fRec151[1]))));
			fRec150[0] = ((fConst374 * (((fConst375 * fRec151[1]) + (fConst384 * fRec151[0])) + (fConst384 * fRec151[2]))) - (fConst372 * ((fConst385 * fRec150[2]) + (fConst386 * fRec150[1]))));
			fTempPerm83 = (fConst372 * (((fConst373 * fRec150[1]) + (fConst387 * fRec150[0])) + (fConst387 * fRec150[2])));
			fRec149[0] = (fTempPerm83 - (fConst369 * ((fConst388 * fRec149[2]) + (fConst390 * fRec149[1]))));
			fRec148[0] = ((fConst369 * (((fConst371 * fRec149[1]) + (fConst391 * fRec149[0])) + (fConst391 * fRec149[2]))) - (fConst366 * ((fConst392 * fRec148[2]) + (fConst393 * fRec148[1]))));
			fRec147[0] = ((fConst366 * (((fConst368 * fRec148[1]) + (fConst394 * fRec148[0])) + (fConst394 * fRec148[2]))) - (fConst362 * ((fConst395 * fRec147[2]) + (fConst396 * fRec147[1]))));
			fRec146[0] = ((fSlow1 * fRec146[1]) + (fSlow2 * fabsf((fConst362 * (((fConst365 * fRec147[1]) + (fConst397 * fRec147[0])) + (fConst397 * fRec147[2]))))));
			fbargraph6 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec146[0]))));
			fRec159[0] = (fTempPerm83 - (fConst414 * ((fConst417 * fRec159[2]) + (fConst418 * fRec159[1]))));
			fRec158[0] = ((fConst414 * (((fConst416 * fRec159[1]) + (fConst419 * fRec159[0])) + (fConst419 * fRec159[2]))) - (fConst412 * ((fConst420 * fRec158[2]) + (fConst421 * fRec158[1]))));
			fRec157[0] = ((fConst412 * (((fConst413 * fRec158[1]) + (fConst422 * fRec158[0])) + (fConst422 * fRec158[2]))) - (fConst410 * ((fConst423 * fRec157[2]) + (fConst424 * fRec157[1]))));
			fTempPerm84 = (fConst410 * (((fConst411 * fRec157[1]) + (fConst425 * fRec157[0])) + (fConst425 * fRec157[2])));
			fRec156[0] = (fTempPerm84 - (fConst407 * ((fConst426 * fRec156[2]) + (fConst428 * fRec156[1]))));
			fRec155[0] = ((fConst407 * (((fConst409 * fRec156[1]) + (fConst429 * fRec156[0])) + (fConst429 * fRec156[2]))) - (fConst404 * ((fConst430 * fRec155[2]) + (fConst431 * fRec155[1]))));
			fRec154[0] = ((fConst404 * (((fConst406 * fRec155[1]) + (fConst432 * fRec155[0])) + (fConst432 * fRec155[2]))) - (fConst400 * ((fConst433 * fRec154[2]) + (fConst434 * fRec154[1]))));
			fRec153[0] = ((fSlow1 * fRec153[1]) + (fSlow2 * fabsf((fConst400 * (((fConst403 * fRec154[1]) + (fConst435 * fRec154[0])) + (fConst435 * fRec154[2]))))));
			fbargraph7 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec153[0]))));
			fRec166[0] = (fTempPerm84 - (fConst452 * ((fConst455 * fRec166[2]) + (fConst456 * fRec166[1]))));
			fRec165[0] = ((fConst452 * (((fConst454 * fRec166[1]) + (fConst457 * fRec166[0])) + (fConst457 * fRec166[2]))) - (fConst450 * ((fConst458 * fRec165[2]) + (fConst459 * fRec165[1]))));
			fRec164[0] = ((fConst450 * (((fConst451 * fRec165[1]) + (fConst460 * fRec165[0])) + (fConst460 * fRec165[2]))) - (fConst448 * ((fConst461 * fRec164[2]) + (fConst462 * fRec164[1]))));
			fTempPerm85 = (fConst448 * (((fConst449 * fRec164[1]) + (fConst463 * fRec164[0])) + (fConst463 * fRec164[2])));
			fRec163[0] = (fTempPerm85 - (fConst445 * ((fConst464 * fRec163[2]) + (fConst466 * fRec163[1]))));
			fRec162[0] = ((fConst445 * (((fConst447 * fRec163[1]) + (fConst467 * fRec163[0])) + (fConst467 * fRec163[2]))) - (fConst442 * ((fConst468 * fRec162[2]) + (fConst469 * fRec162[1]))));
			fRec161[0] = ((fConst442 * (((fConst444 * fRec162[1]) + (fConst470 * fRec162[0])) + (fConst470 * fRec162[2]))) - (fConst438 * ((fConst471 * fRec161[2]) + (fConst472 * fRec161[1]))));
			fRec160[0] = ((fSlow1 * fRec160[1]) + (fSlow2 * fabsf((fConst438 * (((fConst441 * fRec161[1]) + (fConst473 * fRec161[0])) + (fConst473 * fRec161[2]))))));
			fbargraph8 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec160[0]))));
			fRec173[0] = (fTempPerm85 - (fConst490 * ((fConst493 * fRec173[2]) + (fConst494 * fRec173[1]))));
			fRec172[0] = ((fConst490 * (((fConst492 * fRec173[1]) + (fConst495 * fRec173[0])) + (fConst495 * fRec173[2]))) - (fConst488 * ((fConst496 * fRec172[2]) + (fConst497 * fRec172[1]))));
			fRec171[0] = ((fConst488 * (((fConst489 * fRec172[1]) + (fConst498 * fRec172[0])) + (fConst498 * fRec172[2]))) - (fConst486 * ((fConst499 * fRec171[2]) + (fConst500 * fRec171[1]))));
			fTempPerm86 = (fConst486 * (((fConst487 * fRec171[1]) + (fConst501 * fRec171[0])) + (fConst501 * fRec171[2])));
			fRec170[0] = (fTempPerm86 - (fConst483 * ((fConst502 * fRec170[2]) + (fConst504 * fRec170[1]))));
			fRec169[0] = ((fConst483 * (((fConst485 * fRec170[1]) + (fConst505 * fRec170[0])) + (fConst505 * fRec170[2]))) - (fConst480 * ((fConst506 * fRec169[2]) + (fConst507 * fRec169[1]))));
			fRec168[0] = ((fConst480 * (((fConst482 * fRec169[1]) + (fConst508 * fRec169[0])) + (fConst508 * fRec169[2]))) - (fConst476 * ((fConst509 * fRec168[2]) + (fConst510 * fRec168[1]))));
			fRec167[0] = ((fSlow1 * fRec167[1]) + (fSlow2 * fabsf((fConst476 * (((fConst479 * fRec168[1]) + (fConst511 * fRec168[0])) + (fConst511 * fRec168[2]))))));
			fbargraph9 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec167[0]))));
			fRec180[0] = (fTempPerm86 - (fConst528 * ((fConst531 * fRec180[2]) + (fConst532 * fRec180[1]))));
			fRec179[0] = ((fConst528 * (((fConst530 * fRec180[1]) + (fConst533 * fRec180[0])) + (fConst533 * fRec180[2]))) - (fConst526 * ((fConst534 * fRec179[2]) + (fConst535 * fRec179[1]))));
			fRec178[0] = ((fConst526 * (((fConst527 * fRec179[1]) + (fConst536 * fRec179[0])) + (fConst536 * fRec179[2]))) - (fConst524 * ((fConst537 * fRec178[2]) + (fConst538 * fRec178[1]))));
			fTempPerm87 = (fConst524 * (((fConst525 * fRec178[1]) + (fConst539 * fRec178[0])) + (fConst539 * fRec178[2])));
			fRec177[0] = (fTempPerm87 - (fConst521 * ((fConst540 * fRec177[2]) + (fConst542 * fRec177[1]))));
			fRec176[0] = ((fConst521 * (((fConst523 * fRec177[1]) + (fConst543 * fRec177[0])) + (fConst543 * fRec177[2]))) - (fConst518 * ((fConst544 * fRec176[2]) + (fConst545 * fRec176[1]))));
			fRec175[0] = ((fConst518 * (((fConst520 * fRec176[1]) + (fConst546 * fRec176[0])) + (fConst546 * fRec176[2]))) - (fConst514 * ((fConst547 * fRec175[2]) + (fConst548 * fRec175[1]))));
			fRec174[0] = ((fSlow1 * fRec174[1]) + (fSlow2 * fabsf((fConst514 * (((fConst517 * fRec175[1]) + (fConst549 * fRec175[0])) + (fConst549 * fRec175[2]))))));
			fbargraph10 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec174[0]))));
			fRec187[0] = (fTempPerm87 - (fConst566 * ((fConst569 * fRec187[2]) + (fConst570 * fRec187[1]))));
			fRec186[0] = ((fConst566 * (((fConst568 * fRec187[1]) + (fConst571 * fRec187[0])) + (fConst571 * fRec187[2]))) - (fConst564 * ((fConst572 * fRec186[2]) + (fConst573 * fRec186[1]))));
			fRec185[0] = ((fConst564 * (((fConst565 * fRec186[1]) + (fConst574 * fRec186[0])) + (fConst574 * fRec186[2]))) - (fConst562 * ((fConst575 * fRec185[2]) + (fConst576 * fRec185[1]))));
			fTempPerm88 = (fConst562 * (((fConst563 * fRec185[1]) + (fConst577 * fRec185[0])) + (fConst577 * fRec185[2])));
			fRec184[0] = (fTempPerm88 - (fConst559 * ((fConst578 * fRec184[2]) + (fConst580 * fRec184[1]))));
			fRec183[0] = ((fConst559 * (((fConst561 * fRec184[1]) + (fConst581 * fRec184[0])) + (fConst581 * fRec184[2]))) - (fConst556 * ((fConst582 * fRec183[2]) + (fConst583 * fRec183[1]))));
			fRec182[0] = ((fConst556 * (((fConst558 * fRec183[1]) + (fConst584 * fRec183[0])) + (fConst584 * fRec183[2]))) - (fConst552 * ((fConst585 * fRec182[2]) + (fConst586 * fRec182[1]))));
			fRec181[0] = ((fSlow1 * fRec181[1]) + (fSlow2 * fabsf((fConst552 * (((fConst555 * fRec182[1]) + (fConst587 * fRec182[0])) + (fConst587 * fRec182[2]))))));
			fbargraph11 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec181[0]))));
			fRec194[0] = (fTempPerm88 - (fConst604 * ((fConst607 * fRec194[2]) + (fConst608 * fRec194[1]))));
			fRec193[0] = ((fConst604 * (((fConst606 * fRec194[1]) + (fConst609 * fRec194[0])) + (fConst609 * fRec194[2]))) - (fConst602 * ((fConst610 * fRec193[2]) + (fConst611 * fRec193[1]))));
			fRec192[0] = ((fConst602 * (((fConst603 * fRec193[1]) + (fConst612 * fRec193[0])) + (fConst612 * fRec193[2]))) - (fConst600 * ((fConst613 * fRec192[2]) + (fConst614 * fRec192[1]))));
			fTempPerm89 = (fConst600 * (((fConst601 * fRec192[1]) + (fConst615 * fRec192[0])) + (fConst615 * fRec192[2])));
			fRec191[0] = (fTempPerm89 - (fConst597 * ((fConst616 * fRec191[2]) + (fConst618 * fRec191[1]))));
			fRec190[0] = ((fConst597 * (((fConst599 * fRec191[1]) + (fConst619 * fRec191[0])) + (fConst619 * fRec191[2]))) - (fConst594 * ((fConst620 * fRec190[2]) + (fConst621 * fRec190[1]))));
			fRec189[0] = ((fConst594 * (((fConst596 * fRec190[1]) + (fConst622 * fRec190[0])) + (fConst622 * fRec190[2]))) - (fConst590 * ((fConst623 * fRec189[2]) + (fConst624 * fRec189[1]))));
			fRec188[0] = ((fSlow1 * fRec188[1]) + (fSlow2 * fabsf((fConst590 * (((fConst593 * fRec189[1]) + (fConst625 * fRec189[0])) + (fConst625 * fRec189[2]))))));
			fbargraph12 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec188[0]))));
			fRec201[0] = (fTempPerm89 - (fConst642 * ((fConst645 * fRec201[2]) + (fConst646 * fRec201[1]))));
			fRec200[0] = ((fConst642 * (((fConst644 * fRec201[1]) + (fConst647 * fRec201[0])) + (fConst647 * fRec201[2]))) - (fConst640 * ((fConst648 * fRec200[2]) + (fConst649 * fRec200[1]))));
			fRec199[0] = ((fConst640 * (((fConst641 * fRec200[1]) + (fConst650 * fRec200[0])) + (fConst650 * fRec200[2]))) - (fConst638 * ((fConst651 * fRec199[2]) + (fConst652 * fRec199[1]))));
			fTempPerm90 = (fConst638 * (((fConst639 * fRec199[1]) + (fConst653 * fRec199[0])) + (fConst653 * fRec199[2])));
			fRec198[0] = (fTempPerm90 - (fConst635 * ((fConst654 * fRec198[2]) + (fConst656 * fRec198[1]))));
			fRec197[0] = ((fConst635 * (((fConst637 * fRec198[1]) + (fConst657 * fRec198[0])) + (fConst657 * fRec198[2]))) - (fConst632 * ((fConst658 * fRec197[2]) + (fConst659 * fRec197[1]))));
			fRec196[0] = ((fConst632 * (((fConst634 * fRec197[1]) + (fConst660 * fRec197[0])) + (fConst660 * fRec197[2]))) - (fConst628 * ((fConst661 * fRec196[2]) + (fConst662 * fRec196[1]))));
			fRec195[0] = ((fSlow1 * fRec195[1]) + (fSlow2 * fabsf((fConst628 * (((fConst631 * fRec196[1]) + (fConst663 * fRec196[0])) + (fConst663 * fRec196[2]))))));
			fbargraph13 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec195[0]))));
			fRec205[0] = (fTempPerm90 - (fConst668 * ((fConst671 * fRec205[2]) + (fConst672 * fRec205[1]))));
			fRec204[0] = ((fConst668 * (((fConst670 * fRec205[1]) + (fConst673 * fRec205[0])) + (fConst673 * fRec205[2]))) - (fConst666 * ((fConst674 * fRec204[2]) + (fConst675 * fRec204[1]))));
			fRec203[0] = ((fConst666 * (((fConst667 * fRec204[1]) + (fConst676 * fRec204[0])) + (fConst676 * fRec204[2]))) - (fConst664 * ((fConst677 * fRec203[2]) + (fConst678 * fRec203[1]))));
			fRec202[0] = ((fSlow1 * fRec202[1]) + (fSlow2 * fabsf((fConst664 * (((fConst665 * fRec203[1]) + (fConst679 * fRec203[0])) + (fConst679 * fRec203[2]))))));
			fbargraph14 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec202[0]))));
			fTempPerm91 = fTempPerm77;
			output0[i] = (FAUSTFLOAT)fTempPerm91;
			output1[i] = (FAUSTFLOAT)fTempPerm91;
			// post processing
			fRec202[1] = fRec202[0];
			fRec203[2] = fRec203[1]; fRec203[1] = fRec203[0];
			fRec204[2] = fRec204[1]; fRec204[1] = fRec204[0];
			fRec205[2] = fRec205[1]; fRec205[1] = fRec205[0];
			fRec195[1] = fRec195[0];
			fRec196[2] = fRec196[1]; fRec196[1] = fRec196[0];
			fRec197[2] = fRec197[1]; fRec197[1] = fRec197[0];
			fRec198[2] = fRec198[1]; fRec198[1] = fRec198[0];
			fRec199[2] = fRec199[1]; fRec199[1] = fRec199[0];
			fRec200[2] = fRec200[1]; fRec200[1] = fRec200[0];
			fRec201[2] = fRec201[1]; fRec201[1] = fRec201[0];
			fRec188[1] = fRec188[0];
			fRec189[2] = fRec189[1]; fRec189[1] = fRec189[0];
			fRec190[2] = fRec190[1]; fRec190[1] = fRec190[0];
			fRec191[2] = fRec191[1]; fRec191[1] = fRec191[0];
			fRec192[2] = fRec192[1]; fRec192[1] = fRec192[0];
			fRec193[2] = fRec193[1]; fRec193[1] = fRec193[0];
			fRec194[2] = fRec194[1]; fRec194[1] = fRec194[0];
			fRec181[1] = fRec181[0];
			fRec182[2] = fRec182[1]; fRec182[1] = fRec182[0];
			fRec183[2] = fRec183[1]; fRec183[1] = fRec183[0];
			fRec184[2] = fRec184[1]; fRec184[1] = fRec184[0];
			fRec185[2] = fRec185[1]; fRec185[1] = fRec185[0];
			fRec186[2] = fRec186[1]; fRec186[1] = fRec186[0];
			fRec187[2] = fRec187[1]; fRec187[1] = fRec187[0];
			fRec174[1] = fRec174[0];
			fRec175[2] = fRec175[1]; fRec175[1] = fRec175[0];
			fRec176[2] = fRec176[1]; fRec176[1] = fRec176[0];
			fRec177[2] = fRec177[1]; fRec177[1] = fRec177[0];
			fRec178[2] = fRec178[1]; fRec178[1] = fRec178[0];
			fRec179[2] = fRec179[1]; fRec179[1] = fRec179[0];
			fRec180[2] = fRec180[1]; fRec180[1] = fRec180[0];
			fRec167[1] = fRec167[0];
			fRec168[2] = fRec168[1]; fRec168[1] = fRec168[0];
			fRec169[2] = fRec169[1]; fRec169[1] = fRec169[0];
			fRec170[2] = fRec170[1]; fRec170[1] = fRec170[0];
			fRec171[2] = fRec171[1]; fRec171[1] = fRec171[0];
			fRec172[2] = fRec172[1]; fRec172[1] = fRec172[0];
			fRec173[2] = fRec173[1]; fRec173[1] = fRec173[0];
			fRec160[1] = fRec160[0];
			fRec161[2] = fRec161[1]; fRec161[1] = fRec161[0];
			fRec162[2] = fRec162[1]; fRec162[1] = fRec162[0];
			fRec163[2] = fRec163[1]; fRec163[1] = fRec163[0];
			fRec164[2] = fRec164[1]; fRec164[1] = fRec164[0];
			fRec165[2] = fRec165[1]; fRec165[1] = fRec165[0];
			fRec166[2] = fRec166[1]; fRec166[1] = fRec166[0];
			fRec153[1] = fRec153[0];
			fRec154[2] = fRec154[1]; fRec154[1] = fRec154[0];
			fRec155[2] = fRec155[1]; fRec155[1] = fRec155[0];
			fRec156[2] = fRec156[1]; fRec156[1] = fRec156[0];
			fRec157[2] = fRec157[1]; fRec157[1] = fRec157[0];
			fRec158[2] = fRec158[1]; fRec158[1] = fRec158[0];
			fRec159[2] = fRec159[1]; fRec159[1] = fRec159[0];
			fRec146[1] = fRec146[0];
			fRec147[2] = fRec147[1]; fRec147[1] = fRec147[0];
			fRec148[2] = fRec148[1]; fRec148[1] = fRec148[0];
			fRec149[2] = fRec149[1]; fRec149[1] = fRec149[0];
			fRec150[2] = fRec150[1]; fRec150[1] = fRec150[0];
			fRec151[2] = fRec151[1]; fRec151[1] = fRec151[0];
			fRec152[2] = fRec152[1]; fRec152[1] = fRec152[0];
			fRec139[1] = fRec139[0];
			fRec140[2] = fRec140[1]; fRec140[1] = fRec140[0];
			fRec141[2] = fRec141[1]; fRec141[1] = fRec141[0];
			fRec142[2] = fRec142[1]; fRec142[1] = fRec142[0];
			fRec143[2] = fRec143[1]; fRec143[1] = fRec143[0];
			fRec144[2] = fRec144[1]; fRec144[1] = fRec144[0];
			fRec145[2] = fRec145[1]; fRec145[1] = fRec145[0];
			fRec132[1] = fRec132[0];
			fRec133[2] = fRec133[1]; fRec133[1] = fRec133[0];
			fRec134[2] = fRec134[1]; fRec134[1] = fRec134[0];
			fRec135[2] = fRec135[1]; fRec135[1] = fRec135[0];
			fRec136[2] = fRec136[1]; fRec136[1] = fRec136[0];
			fRec137[2] = fRec137[1]; fRec137[1] = fRec137[0];
			fRec138[2] = fRec138[1]; fRec138[1] = fRec138[0];
			fRec125[1] = fRec125[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec127[2] = fRec127[1]; fRec127[1] = fRec127[0];
			fRec128[2] = fRec128[1]; fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec130[2] = fRec130[1]; fRec130[1] = fRec130[0];
			fRec131[2] = fRec131[1]; fRec131[1] = fRec131[0];
			fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec124[2] = fRec124[1]; fRec124[1] = fRec124[0];
			fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec110[1] = fRec110[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[1] = fRec109[0];
			fRec106[1] = fRec106[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[1] = fRec102[0];
			fVec30[1] = fVec30[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec105[1] = fRec105[0];
			fRec99[1] = fRec99[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[1] = fRec95[0];
			fVec29[1] = fVec29[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[1] = fRec98[0];
			fRec91[1] = fRec91[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[1] = fRec87[0];
			fVec28[1] = fVec28[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[1] = fRec90[0];
			fRec82[1] = fRec82[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec76[2] = fRec76[1]; fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[1] = fRec78[0];
			fVec27[1] = fVec27[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[1] = fRec81[0];
			fRec72[1] = fRec72[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fVec26[1] = fVec26[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec71[1] = fRec71[0];
			fRec61[1] = fRec61[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[1] = fRec57[0];
			fVec25[1] = fVec25[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec49[1] = fRec49[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[1] = fRec45[0];
			fVec24[1] = fVec24[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec36[1] = fRec36[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fVec23[1] = fVec23[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec35[1] = fRec35[0];
			fRec22[1] = fRec22[0];
			fRec11[2] = fRec11[1]; fRec11[1] = fRec11[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fVec22[1] = fVec22[0];
			fVec21[1] = fVec21[0];
			fVec20[1] = fVec20[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			fRec10[1] = fRec10[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			fVec9[1] = fVec9[0];
			fRec9[1] = fRec9[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			fVec6[1] = fVec6[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec7[1] = fRec7[0];
			fVec1[1] = fVec1[0];
			fRec8[1] = fRec8[0];
			for (int i=3; i>0; i--) fRec5[i] = fRec5[i-1];
			iRec6[1] = iRec6[0];
			fRec4[1] = fRec4[0];
			for (int i=3; i>0; i--) iVec0[i] = iVec0[i-1];
		}
	}
};


