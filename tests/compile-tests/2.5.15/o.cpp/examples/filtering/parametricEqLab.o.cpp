//----------------------------------------------------------
// name: "parametricEqLab"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[4];
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fConst14;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fRec9[2];
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fcheckbox2;
	int 	iRec11[2];
	float 	fTempPerm0;
	float 	fRec10[4];
	FAUSTFLOAT 	fentry0;
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fRec13[2];
	float 	fTempPerm1;
	float 	fVec1[2];
	float 	fTempPerm2;
	float 	fRec12[2];
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fVec2[2];
	float 	fTempPerm6;
	float 	fVec3[2];
	float 	fTempPerm7;
	float 	fVec4[2];
	float 	fTempPerm8;
	float 	fVec5[2];
	float 	fConst18;
	float 	fTempPerm9;
	float 	fVec6[2];
	float 	fTempPerm10;
	float 	fVec7[2];
	float 	fConst19;
	FAUSTFLOAT 	fslider7;
	float 	fTempPerm11;
	float 	fVec8[2];
	float 	fTempPerm12;
	float 	fRec14[2];
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fVec9[2];
	float 	fTempPerm16;
	float 	fVec10[2];
	float 	fTempPerm17;
	float 	fVec11[2];
	float 	fTempPerm18;
	float 	fVec12[2];
	float 	fTempPerm19;
	float 	fVec13[2];
	float 	fTempPerm20;
	float 	fVec14[2];
	FAUSTFLOAT 	fslider8;
	float 	fTempPerm21;
	float 	fVec15[2];
	float 	fTempPerm22;
	float 	fRec15[2];
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fVec16[2];
	float 	fTempPerm26;
	float 	fVec17[2];
	float 	fTempPerm27;
	float 	fVec18[2];
	float 	fTempPerm28;
	float 	fVec19[2];
	float 	fTempPerm29;
	float 	fVec20[2];
	float 	fTempPerm30;
	float 	fVec21[2];
	float 	fTempPerm31;
	float 	fVec22[2];
	float 	fRec8[2];
	float 	fRec7[3];
	FAUSTFLOAT 	fslider9;
	float 	fRec17[2];
	float 	fRec16[3];
	float 	fConst20;
	FAUSTFLOAT 	fslider10;
	float 	fRec18[2];
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	FAUSTFLOAT 	fslider11;
	float 	fConst21;
	float 	fConst22;
	FAUSTFLOAT 	fslider12;
	float 	fConst23;
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	float 	fRec6[3];
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fVec23[2];
	float 	fRec5[2];
	float 	fRec4[3];
	FAUSTFLOAT 	fslider13;
	float 	fRec20[2];
	float 	fRec19[3];
	float 	fTempPerm43;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fRec3[3];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fRec2[3];
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fRec1[3];
	float 	fConst33;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph0;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fRec27[3];
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec26[3];
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fRec25[3];
	float 	fConst61;
	float 	fTempPerm44;
	float 	fConst62;
	float 	fConst63;
	float 	fConst64;
	float 	fRec24[3];
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fRec23[3];
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fRec22[3];
	float 	fConst71;
	float 	fRec21[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fRec34[3];
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fRec33[3];
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fRec32[3];
	float 	fConst99;
	float 	fTempPerm45;
	float 	fConst100;
	float 	fConst101;
	float 	fConst102;
	float 	fRec31[3];
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fRec30[3];
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fRec29[3];
	float 	fConst109;
	float 	fRec28[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fRec41[3];
	float 	fConst131;
	float 	fConst132;
	float 	fConst133;
	float 	fRec40[3];
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fRec39[3];
	float 	fConst137;
	float 	fTempPerm46;
	float 	fConst138;
	float 	fConst139;
	float 	fConst140;
	float 	fRec38[3];
	float 	fConst141;
	float 	fConst142;
	float 	fConst143;
	float 	fRec37[3];
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fRec36[3];
	float 	fConst147;
	float 	fRec35[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fRec48[3];
	float 	fConst169;
	float 	fConst170;
	float 	fConst171;
	float 	fRec47[3];
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fRec46[3];
	float 	fConst175;
	float 	fTempPerm47;
	float 	fConst176;
	float 	fConst177;
	float 	fConst178;
	float 	fRec45[3];
	float 	fConst179;
	float 	fConst180;
	float 	fConst181;
	float 	fRec44[3];
	float 	fConst182;
	float 	fConst183;
	float 	fConst184;
	float 	fRec43[3];
	float 	fConst185;
	float 	fRec42[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fRec55[3];
	float 	fConst207;
	float 	fConst208;
	float 	fConst209;
	float 	fRec54[3];
	float 	fConst210;
	float 	fConst211;
	float 	fConst212;
	float 	fRec53[3];
	float 	fConst213;
	float 	fTempPerm48;
	float 	fConst214;
	float 	fConst215;
	float 	fConst216;
	float 	fRec52[3];
	float 	fConst217;
	float 	fConst218;
	float 	fConst219;
	float 	fRec51[3];
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fRec50[3];
	float 	fConst223;
	float 	fRec49[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fRec62[3];
	float 	fConst245;
	float 	fConst246;
	float 	fConst247;
	float 	fRec61[3];
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fRec60[3];
	float 	fConst251;
	float 	fTempPerm49;
	float 	fConst252;
	float 	fConst253;
	float 	fConst254;
	float 	fRec59[3];
	float 	fConst255;
	float 	fConst256;
	float 	fConst257;
	float 	fRec58[3];
	float 	fConst258;
	float 	fConst259;
	float 	fConst260;
	float 	fRec57[3];
	float 	fConst261;
	float 	fRec56[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fConst273;
	float 	fConst274;
	float 	fConst275;
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fConst279;
	float 	fConst280;
	float 	fConst281;
	float 	fConst282;
	float 	fRec69[3];
	float 	fConst283;
	float 	fConst284;
	float 	fConst285;
	float 	fRec68[3];
	float 	fConst286;
	float 	fConst287;
	float 	fConst288;
	float 	fRec67[3];
	float 	fConst289;
	float 	fTempPerm50;
	float 	fConst290;
	float 	fConst291;
	float 	fConst292;
	float 	fRec66[3];
	float 	fConst293;
	float 	fConst294;
	float 	fConst295;
	float 	fRec65[3];
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fRec64[3];
	float 	fConst299;
	float 	fRec63[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fConst317;
	float 	fConst318;
	float 	fConst319;
	float 	fConst320;
	float 	fRec76[3];
	float 	fConst321;
	float 	fConst322;
	float 	fConst323;
	float 	fRec75[3];
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fRec74[3];
	float 	fConst327;
	float 	fTempPerm51;
	float 	fConst328;
	float 	fConst329;
	float 	fConst330;
	float 	fRec73[3];
	float 	fConst331;
	float 	fConst332;
	float 	fConst333;
	float 	fRec72[3];
	float 	fConst334;
	float 	fConst335;
	float 	fConst336;
	float 	fRec71[3];
	float 	fConst337;
	float 	fRec70[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst338;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fConst353;
	float 	fConst354;
	float 	fConst355;
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fRec83[3];
	float 	fConst359;
	float 	fConst360;
	float 	fConst361;
	float 	fRec82[3];
	float 	fConst362;
	float 	fConst363;
	float 	fConst364;
	float 	fRec81[3];
	float 	fConst365;
	float 	fTempPerm52;
	float 	fConst366;
	float 	fConst367;
	float 	fConst368;
	float 	fRec80[3];
	float 	fConst369;
	float 	fConst370;
	float 	fConst371;
	float 	fRec79[3];
	float 	fConst372;
	float 	fConst373;
	float 	fConst374;
	float 	fRec78[3];
	float 	fConst375;
	float 	fRec77[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fConst389;
	float 	fConst390;
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fRec90[3];
	float 	fConst397;
	float 	fConst398;
	float 	fConst399;
	float 	fRec89[3];
	float 	fConst400;
	float 	fConst401;
	float 	fConst402;
	float 	fRec88[3];
	float 	fConst403;
	float 	fTempPerm53;
	float 	fConst404;
	float 	fConst405;
	float 	fConst406;
	float 	fRec87[3];
	float 	fConst407;
	float 	fConst408;
	float 	fConst409;
	float 	fRec86[3];
	float 	fConst410;
	float 	fConst411;
	float 	fConst412;
	float 	fRec85[3];
	float 	fConst413;
	float 	fRec84[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fConst425;
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fRec97[3];
	float 	fConst435;
	float 	fConst436;
	float 	fConst437;
	float 	fRec96[3];
	float 	fConst438;
	float 	fConst439;
	float 	fConst440;
	float 	fRec95[3];
	float 	fConst441;
	float 	fTempPerm54;
	float 	fConst442;
	float 	fConst443;
	float 	fConst444;
	float 	fRec94[3];
	float 	fConst445;
	float 	fConst446;
	float 	fConst447;
	float 	fRec93[3];
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fRec92[3];
	float 	fConst451;
	float 	fRec91[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst452;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fConst472;
	float 	fRec104[3];
	float 	fConst473;
	float 	fConst474;
	float 	fConst475;
	float 	fRec103[3];
	float 	fConst476;
	float 	fConst477;
	float 	fConst478;
	float 	fRec102[3];
	float 	fConst479;
	float 	fTempPerm55;
	float 	fConst480;
	float 	fConst481;
	float 	fConst482;
	float 	fRec101[3];
	float 	fConst483;
	float 	fConst484;
	float 	fConst485;
	float 	fRec100[3];
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fRec99[3];
	float 	fConst489;
	float 	fRec98[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fRec111[3];
	float 	fConst511;
	float 	fConst512;
	float 	fConst513;
	float 	fRec110[3];
	float 	fConst514;
	float 	fConst515;
	float 	fConst516;
	float 	fRec109[3];
	float 	fConst517;
	float 	fTempPerm56;
	float 	fConst518;
	float 	fConst519;
	float 	fConst520;
	float 	fRec108[3];
	float 	fConst521;
	float 	fConst522;
	float 	fConst523;
	float 	fRec107[3];
	float 	fConst524;
	float 	fConst525;
	float 	fConst526;
	float 	fRec106[3];
	float 	fConst527;
	float 	fRec105[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst528;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fConst533;
	float 	fConst534;
	float 	fConst535;
	float 	fConst536;
	float 	fConst537;
	float 	fConst538;
	float 	fConst539;
	float 	fConst540;
	float 	fConst541;
	float 	fConst542;
	float 	fConst543;
	float 	fConst544;
	float 	fConst545;
	float 	fConst546;
	float 	fConst547;
	float 	fConst548;
	float 	fRec118[3];
	float 	fConst549;
	float 	fConst550;
	float 	fConst551;
	float 	fRec117[3];
	float 	fConst552;
	float 	fConst553;
	float 	fConst554;
	float 	fRec116[3];
	float 	fConst555;
	float 	fTempPerm57;
	float 	fConst556;
	float 	fConst557;
	float 	fConst558;
	float 	fRec115[3];
	float 	fConst559;
	float 	fConst560;
	float 	fConst561;
	float 	fRec114[3];
	float 	fConst562;
	float 	fConst563;
	float 	fConst564;
	float 	fRec113[3];
	float 	fConst565;
	float 	fRec112[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fConst566;
	float 	fConst567;
	float 	fConst568;
	float 	fConst569;
	float 	fConst570;
	float 	fConst571;
	float 	fConst572;
	float 	fConst573;
	float 	fConst574;
	float 	fConst575;
	float 	fConst576;
	float 	fConst577;
	float 	fConst578;
	float 	fConst579;
	float 	fConst580;
	float 	fConst581;
	float 	fConst582;
	float 	fConst583;
	float 	fConst584;
	float 	fConst585;
	float 	fConst586;
	float 	fRec125[3];
	float 	fConst587;
	float 	fConst588;
	float 	fConst589;
	float 	fRec124[3];
	float 	fConst590;
	float 	fConst591;
	float 	fConst592;
	float 	fRec123[3];
	float 	fConst593;
	float 	fTempPerm58;
	float 	fConst594;
	float 	fConst595;
	float 	fConst596;
	float 	fRec122[3];
	float 	fConst597;
	float 	fConst598;
	float 	fConst599;
	float 	fRec121[3];
	float 	fConst600;
	float 	fConst601;
	float 	fConst602;
	float 	fRec120[3];
	float 	fConst603;
	float 	fRec119[2];
	FAUSTFLOAT 	fbargraph15;
	float 	fConst604;
	float 	fConst605;
	float 	fConst606;
	float 	fConst607;
	float 	fConst608;
	float 	fConst609;
	float 	fConst610;
	float 	fConst611;
	float 	fConst612;
	float 	fConst613;
	float 	fConst614;
	float 	fConst615;
	float 	fConst616;
	float 	fConst617;
	float 	fConst618;
	float 	fConst619;
	float 	fConst620;
	float 	fConst621;
	float 	fConst622;
	float 	fConst623;
	float 	fConst624;
	float 	fRec132[3];
	float 	fConst625;
	float 	fConst626;
	float 	fConst627;
	float 	fRec131[3];
	float 	fConst628;
	float 	fConst629;
	float 	fConst630;
	float 	fRec130[3];
	float 	fConst631;
	float 	fTempPerm59;
	float 	fConst632;
	float 	fConst633;
	float 	fConst634;
	float 	fRec129[3];
	float 	fConst635;
	float 	fConst636;
	float 	fConst637;
	float 	fRec128[3];
	float 	fConst638;
	float 	fConst639;
	float 	fConst640;
	float 	fRec127[3];
	float 	fConst641;
	float 	fRec126[2];
	FAUSTFLOAT 	fbargraph16;
	float 	fConst642;
	float 	fConst643;
	float 	fConst644;
	float 	fConst645;
	float 	fConst646;
	float 	fConst647;
	float 	fConst648;
	float 	fConst649;
	float 	fConst650;
	float 	fConst651;
	float 	fConst652;
	float 	fConst653;
	float 	fConst654;
	float 	fConst655;
	float 	fConst656;
	float 	fConst657;
	float 	fConst658;
	float 	fConst659;
	float 	fConst660;
	float 	fConst661;
	float 	fConst662;
	float 	fRec139[3];
	float 	fConst663;
	float 	fConst664;
	float 	fConst665;
	float 	fRec138[3];
	float 	fConst666;
	float 	fConst667;
	float 	fConst668;
	float 	fRec137[3];
	float 	fConst669;
	float 	fTempPerm60;
	float 	fConst670;
	float 	fConst671;
	float 	fConst672;
	float 	fRec136[3];
	float 	fConst673;
	float 	fConst674;
	float 	fConst675;
	float 	fRec135[3];
	float 	fConst676;
	float 	fConst677;
	float 	fConst678;
	float 	fRec134[3];
	float 	fConst679;
	float 	fRec133[2];
	FAUSTFLOAT 	fbargraph17;
	float 	fConst680;
	float 	fConst681;
	float 	fConst682;
	float 	fConst683;
	float 	fConst684;
	float 	fConst685;
	float 	fConst686;
	float 	fConst687;
	float 	fConst688;
	float 	fConst689;
	float 	fConst690;
	float 	fConst691;
	float 	fConst692;
	float 	fConst693;
	float 	fConst694;
	float 	fConst695;
	float 	fConst696;
	float 	fConst697;
	float 	fConst698;
	float 	fConst699;
	float 	fConst700;
	float 	fRec146[3];
	float 	fConst701;
	float 	fConst702;
	float 	fConst703;
	float 	fRec145[3];
	float 	fConst704;
	float 	fConst705;
	float 	fConst706;
	float 	fRec144[3];
	float 	fConst707;
	float 	fTempPerm61;
	float 	fConst708;
	float 	fConst709;
	float 	fConst710;
	float 	fRec143[3];
	float 	fConst711;
	float 	fConst712;
	float 	fConst713;
	float 	fRec142[3];
	float 	fConst714;
	float 	fConst715;
	float 	fConst716;
	float 	fRec141[3];
	float 	fConst717;
	float 	fRec140[2];
	FAUSTFLOAT 	fbargraph18;
	float 	fConst718;
	float 	fConst719;
	float 	fConst720;
	float 	fConst721;
	float 	fConst722;
	float 	fConst723;
	float 	fConst724;
	float 	fConst725;
	float 	fConst726;
	float 	fRec150[3];
	float 	fConst727;
	float 	fConst728;
	float 	fConst729;
	float 	fRec149[3];
	float 	fConst730;
	float 	fConst731;
	float 	fConst732;
	float 	fRec148[3];
	float 	fConst733;
	float 	fRec147[2];
	FAUSTFLOAT 	fbargraph19;
	float 	fTempPerm62;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("description", "Demonstrate the Parametric Equalizer sections on test signals with spectrum analysis display");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "parametricEqLab");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = tanf((50265.482457436687f / fConst0));
		fConst3 = (1.0f / fConst2);
		fConst4 = (1.0f / (((fConst3 + 0.157482159302087f) / fConst2) + 0.93514016703154246f));
		fConst5 = faustpower<2>(fConst2);
		fConst6 = (50.063807016150385f / fConst5);
		fConst7 = (2 * (0.93514016703154246f - fConst6));
		fConst8 = (1.0f / (((fConst3 + 0.74313046010703965f) / fConst2) + 1.450071084655647f));
		fConst9 = (11.052052171507189f / fConst5);
		fConst10 = (2 * (1.450071084655647f - fConst9));
		fConst11 = (1.0f / (((fConst3 + 3.1897274020965583f) / fConst2) + 4.0767819696438066f));
		fConst12 = (0.0017661728399818856f / fConst5);
		fConst13 = (2 * (0.00040767818495825777f - fConst12));
		fConst14 = (3.1415926535897931f / fConst0);
		fTempPerm0 = 0;
		fConst15 = float(fConst0);
		fConst16 = (0.005208333333333333f * faustpower<3>(fConst15));
		fConst17 = (1.0f / fConst0);
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fConst18 = (0.041666666666666664f * faustpower<2>(fConst15));
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fConst19 = (0.25f * fConst15);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fConst20 = (1382.3007675795091f / fConst0);
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fConst21 = float(fConst17);
		fConst22 = (1382.3007675795091f * fConst21);
		fConst23 = (2764.6015351590181f * fConst21);
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fConst24 = (((fConst3 + -3.1897274020965583f) / fConst2) + 4.0767819696438066f);
		fConst25 = (1.0f / fConst5);
		fConst26 = (2 * (4.0767819696438066f - fConst25));
		fConst27 = (fConst12 + 0.00040767818495825777f);
		fConst28 = (((fConst3 + -0.74313046010703965f) / fConst2) + 1.450071084655647f);
		fConst29 = (2 * (1.450071084655647f - fConst25));
		fConst30 = (fConst9 + 1.450071084655647f);
		fConst31 = (((fConst3 + -0.157482159302087f) / fConst2) + 0.93514016703154246f);
		fConst32 = (2 * (0.93514016703154246f - fConst25));
		fConst33 = (fConst6 + 0.93514016703154246f);
		fConst34 = tanf((35543.063505266931f / fConst0));
		fConst35 = (1.0f / fConst34);
		fConst36 = (1.0f / (((fConst35 + 0.157482159302087f) / fConst34) + 0.93514016703154246f));
		fConst37 = faustpower<2>(fConst34);
		fConst38 = (50.063807016150385f / fConst37);
		fConst39 = (2 * (0.93514016703154246f - fConst38));
		fConst40 = (1.0f / (((fConst35 + 0.74313046010703965f) / fConst34) + 1.450071084655647f));
		fConst41 = (11.052052171507189f / fConst37);
		fConst42 = (2 * (1.450071084655647f - fConst41));
		fConst43 = (1.0f / (((fConst35 + 3.1897274020965583f) / fConst34) + 4.0767819696438066f));
		fConst44 = (0.0017661728399818856f / fConst37);
		fConst45 = (2 * (0.00040767818495825777f - fConst44));
		fConst46 = (1.0f / (((fConst3 + 0.16840487111358901f) / fConst2) + 1.0693584077073119f));
		fConst47 = (2 * (53.536152954556727f - fConst25));
		fConst48 = (1.0f / (((fConst3 + 0.51247864188914105f) / fConst2) + 0.68962136448467504f));
		fConst49 = (2 * (7.6217312988706034f - fConst25));
		fConst50 = (1.0f / (((fConst3 + 0.78241304682164503f) / fConst2) + 0.24529150870616001f));
		fConst51 = (9.9999997054999994e-05f / fConst5);
		fConst52 = (2 * (0.00043322720055500002f - fConst51));
		fConst53 = (((fConst3 + -0.78241304682164503f) / fConst2) + 0.24529150870616001f);
		fConst54 = (2 * (0.24529150870616001f - fConst25));
		fConst55 = (fConst51 + 0.00043322720055500002f);
		fConst56 = (((fConst3 + -0.51247864188914105f) / fConst2) + 0.68962136448467504f);
		fConst57 = (2 * (0.68962136448467504f - fConst25));
		fConst58 = (fConst25 + 7.6217312988706034f);
		fConst59 = (((fConst3 + -0.16840487111358901f) / fConst2) + 1.0693584077073119f);
		fConst60 = (2 * (1.0693584077073119f - fConst25));
		fConst61 = (fConst25 + 53.536152954556727f);
		fTempPerm44 = 0;
		fConst62 = (((fConst35 + -3.1897274020965583f) / fConst34) + 4.0767819696438066f);
		fConst63 = (1.0f / fConst37);
		fConst64 = (2 * (4.0767819696438066f - fConst63));
		fConst65 = (fConst44 + 0.00040767818495825777f);
		fConst66 = (((fConst35 + -0.74313046010703965f) / fConst34) + 1.450071084655647f);
		fConst67 = (2 * (1.450071084655647f - fConst63));
		fConst68 = (fConst41 + 1.450071084655647f);
		fConst69 = (((fConst35 + -0.157482159302087f) / fConst34) + 0.93514016703154246f);
		fConst70 = (2 * (0.93514016703154246f - fConst63));
		fConst71 = (fConst38 + 0.93514016703154246f);
		fConst72 = tanf((25132.741228718343f / fConst0));
		fConst73 = (1.0f / fConst72);
		fConst74 = (1.0f / (((fConst73 + 0.157482159302087f) / fConst72) + 0.93514016703154246f));
		fConst75 = faustpower<2>(fConst72);
		fConst76 = (50.063807016150385f / fConst75);
		fConst77 = (2 * (0.93514016703154246f - fConst76));
		fConst78 = (1.0f / (((fConst73 + 0.74313046010703965f) / fConst72) + 1.450071084655647f));
		fConst79 = (11.052052171507189f / fConst75);
		fConst80 = (2 * (1.450071084655647f - fConst79));
		fConst81 = (1.0f / (((fConst73 + 3.1897274020965583f) / fConst72) + 4.0767819696438066f));
		fConst82 = (0.0017661728399818856f / fConst75);
		fConst83 = (2 * (0.00040767818495825777f - fConst82));
		fConst84 = (1.0f / (((fConst35 + 0.16840487111358901f) / fConst34) + 1.0693584077073119f));
		fConst85 = (2 * (53.536152954556727f - fConst63));
		fConst86 = (1.0f / (((fConst35 + 0.51247864188914105f) / fConst34) + 0.68962136448467504f));
		fConst87 = (2 * (7.6217312988706034f - fConst63));
		fConst88 = (1.0f / (((fConst35 + 0.78241304682164503f) / fConst34) + 0.24529150870616001f));
		fConst89 = (9.9999997054999994e-05f / fConst37);
		fConst90 = (2 * (0.00043322720055500002f - fConst89));
		fConst91 = (((fConst35 + -0.78241304682164503f) / fConst34) + 0.24529150870616001f);
		fConst92 = (2 * (0.24529150870616001f - fConst63));
		fConst93 = (fConst89 + 0.00043322720055500002f);
		fConst94 = (((fConst35 + -0.51247864188914105f) / fConst34) + 0.68962136448467504f);
		fConst95 = (2 * (0.68962136448467504f - fConst63));
		fConst96 = (fConst63 + 7.6217312988706034f);
		fConst97 = (((fConst35 + -0.16840487111358901f) / fConst34) + 1.0693584077073119f);
		fConst98 = (2 * (1.0693584077073119f - fConst63));
		fConst99 = (fConst63 + 53.536152954556727f);
		fTempPerm45 = 0;
		fConst100 = (((fConst73 + -3.1897274020965583f) / fConst72) + 4.0767819696438066f);
		fConst101 = (1.0f / fConst75);
		fConst102 = (2 * (4.0767819696438066f - fConst101));
		fConst103 = (fConst82 + 0.00040767818495825777f);
		fConst104 = (((fConst73 + -0.74313046010703965f) / fConst72) + 1.450071084655647f);
		fConst105 = (2 * (1.450071084655647f - fConst101));
		fConst106 = (fConst79 + 1.450071084655647f);
		fConst107 = (((fConst73 + -0.157482159302087f) / fConst72) + 0.93514016703154246f);
		fConst108 = (2 * (0.93514016703154246f - fConst101));
		fConst109 = (fConst76 + 0.93514016703154246f);
		fConst110 = tanf((17771.531752633466f / fConst0));
		fConst111 = (1.0f / fConst110);
		fConst112 = (1.0f / (((fConst111 + 0.157482159302087f) / fConst110) + 0.93514016703154246f));
		fConst113 = faustpower<2>(fConst110);
		fConst114 = (50.063807016150385f / fConst113);
		fConst115 = (2 * (0.93514016703154246f - fConst114));
		fConst116 = (1.0f / (((fConst111 + 0.74313046010703965f) / fConst110) + 1.450071084655647f));
		fConst117 = (11.052052171507189f / fConst113);
		fConst118 = (2 * (1.450071084655647f - fConst117));
		fConst119 = (1.0f / (((fConst111 + 3.1897274020965583f) / fConst110) + 4.0767819696438066f));
		fConst120 = (0.0017661728399818856f / fConst113);
		fConst121 = (2 * (0.00040767818495825777f - fConst120));
		fConst122 = (1.0f / (((fConst73 + 0.16840487111358901f) / fConst72) + 1.0693584077073119f));
		fConst123 = (2 * (53.536152954556727f - fConst101));
		fConst124 = (1.0f / (((fConst73 + 0.51247864188914105f) / fConst72) + 0.68962136448467504f));
		fConst125 = (2 * (7.6217312988706034f - fConst101));
		fConst126 = (1.0f / (((fConst73 + 0.78241304682164503f) / fConst72) + 0.24529150870616001f));
		fConst127 = (9.9999997054999994e-05f / fConst75);
		fConst128 = (2 * (0.00043322720055500002f - fConst127));
		fConst129 = (((fConst73 + -0.78241304682164503f) / fConst72) + 0.24529150870616001f);
		fConst130 = (2 * (0.24529150870616001f - fConst101));
		fConst131 = (fConst127 + 0.00043322720055500002f);
		fConst132 = (((fConst73 + -0.51247864188914105f) / fConst72) + 0.68962136448467504f);
		fConst133 = (2 * (0.68962136448467504f - fConst101));
		fConst134 = (fConst101 + 7.6217312988706034f);
		fConst135 = (((fConst73 + -0.16840487111358901f) / fConst72) + 1.0693584077073119f);
		fConst136 = (2 * (1.0693584077073119f - fConst101));
		fConst137 = (fConst101 + 53.536152954556727f);
		fTempPerm46 = 0;
		fConst138 = (((fConst111 + -3.1897274020965583f) / fConst110) + 4.0767819696438066f);
		fConst139 = (1.0f / fConst113);
		fConst140 = (2 * (4.0767819696438066f - fConst139));
		fConst141 = (fConst120 + 0.00040767818495825777f);
		fConst142 = (((fConst111 + -0.74313046010703965f) / fConst110) + 1.450071084655647f);
		fConst143 = (2 * (1.450071084655647f - fConst139));
		fConst144 = (fConst117 + 1.450071084655647f);
		fConst145 = (((fConst111 + -0.157482159302087f) / fConst110) + 0.93514016703154246f);
		fConst146 = (2 * (0.93514016703154246f - fConst139));
		fConst147 = (fConst114 + 0.93514016703154246f);
		fConst148 = tanf((12566.370614359172f / fConst0));
		fConst149 = (1.0f / fConst148);
		fConst150 = (1.0f / (((fConst149 + 0.157482159302087f) / fConst148) + 0.93514016703154246f));
		fConst151 = faustpower<2>(fConst148);
		fConst152 = (50.063807016150385f / fConst151);
		fConst153 = (2 * (0.93514016703154246f - fConst152));
		fConst154 = (1.0f / (((fConst149 + 0.74313046010703965f) / fConst148) + 1.450071084655647f));
		fConst155 = (11.052052171507189f / fConst151);
		fConst156 = (2 * (1.450071084655647f - fConst155));
		fConst157 = (1.0f / (((fConst149 + 3.1897274020965583f) / fConst148) + 4.0767819696438066f));
		fConst158 = (0.0017661728399818856f / fConst151);
		fConst159 = (2 * (0.00040767818495825777f - fConst158));
		fConst160 = (1.0f / (((fConst111 + 0.16840487111358901f) / fConst110) + 1.0693584077073119f));
		fConst161 = (2 * (53.536152954556727f - fConst139));
		fConst162 = (1.0f / (((fConst111 + 0.51247864188914105f) / fConst110) + 0.68962136448467504f));
		fConst163 = (2 * (7.6217312988706034f - fConst139));
		fConst164 = (1.0f / (((fConst111 + 0.78241304682164503f) / fConst110) + 0.24529150870616001f));
		fConst165 = (9.9999997054999994e-05f / fConst113);
		fConst166 = (2 * (0.00043322720055500002f - fConst165));
		fConst167 = (((fConst111 + -0.78241304682164503f) / fConst110) + 0.24529150870616001f);
		fConst168 = (2 * (0.24529150870616001f - fConst139));
		fConst169 = (fConst165 + 0.00043322720055500002f);
		fConst170 = (((fConst111 + -0.51247864188914105f) / fConst110) + 0.68962136448467504f);
		fConst171 = (2 * (0.68962136448467504f - fConst139));
		fConst172 = (fConst139 + 7.6217312988706034f);
		fConst173 = (((fConst111 + -0.16840487111358901f) / fConst110) + 1.0693584077073119f);
		fConst174 = (2 * (1.0693584077073119f - fConst139));
		fConst175 = (fConst139 + 53.536152954556727f);
		fTempPerm47 = 0;
		fConst176 = (((fConst149 + -3.1897274020965583f) / fConst148) + 4.0767819696438066f);
		fConst177 = (1.0f / fConst151);
		fConst178 = (2 * (4.0767819696438066f - fConst177));
		fConst179 = (fConst158 + 0.00040767818495825777f);
		fConst180 = (((fConst149 + -0.74313046010703965f) / fConst148) + 1.450071084655647f);
		fConst181 = (2 * (1.450071084655647f - fConst177));
		fConst182 = (fConst155 + 1.450071084655647f);
		fConst183 = (((fConst149 + -0.157482159302087f) / fConst148) + 0.93514016703154246f);
		fConst184 = (2 * (0.93514016703154246f - fConst177));
		fConst185 = (fConst152 + 0.93514016703154246f);
		fConst186 = tanf((8885.7658763167328f / fConst0));
		fConst187 = (1.0f / fConst186);
		fConst188 = (1.0f / (((fConst187 + 0.157482159302087f) / fConst186) + 0.93514016703154246f));
		fConst189 = faustpower<2>(fConst186);
		fConst190 = (50.063807016150385f / fConst189);
		fConst191 = (2 * (0.93514016703154246f - fConst190));
		fConst192 = (1.0f / (((fConst187 + 0.74313046010703965f) / fConst186) + 1.450071084655647f));
		fConst193 = (11.052052171507189f / fConst189);
		fConst194 = (2 * (1.450071084655647f - fConst193));
		fConst195 = (1.0f / (((fConst187 + 3.1897274020965583f) / fConst186) + 4.0767819696438066f));
		fConst196 = (0.0017661728399818856f / fConst189);
		fConst197 = (2 * (0.00040767818495825777f - fConst196));
		fConst198 = (1.0f / (((fConst149 + 0.16840487111358901f) / fConst148) + 1.0693584077073119f));
		fConst199 = (2 * (53.536152954556727f - fConst177));
		fConst200 = (1.0f / (((fConst149 + 0.51247864188914105f) / fConst148) + 0.68962136448467504f));
		fConst201 = (2 * (7.6217312988706034f - fConst177));
		fConst202 = (1.0f / (((fConst149 + 0.78241304682164503f) / fConst148) + 0.24529150870616001f));
		fConst203 = (9.9999997054999994e-05f / fConst151);
		fConst204 = (2 * (0.00043322720055500002f - fConst203));
		fConst205 = (((fConst149 + -0.78241304682164503f) / fConst148) + 0.24529150870616001f);
		fConst206 = (2 * (0.24529150870616001f - fConst177));
		fConst207 = (fConst203 + 0.00043322720055500002f);
		fConst208 = (((fConst149 + -0.51247864188914105f) / fConst148) + 0.68962136448467504f);
		fConst209 = (2 * (0.68962136448467504f - fConst177));
		fConst210 = (fConst177 + 7.6217312988706034f);
		fConst211 = (((fConst149 + -0.16840487111358901f) / fConst148) + 1.0693584077073119f);
		fConst212 = (2 * (1.0693584077073119f - fConst177));
		fConst213 = (fConst177 + 53.536152954556727f);
		fTempPerm48 = 0;
		fConst214 = (((fConst187 + -3.1897274020965583f) / fConst186) + 4.0767819696438066f);
		fConst215 = (1.0f / fConst189);
		fConst216 = (2 * (4.0767819696438066f - fConst215));
		fConst217 = (fConst196 + 0.00040767818495825777f);
		fConst218 = (((fConst187 + -0.74313046010703965f) / fConst186) + 1.450071084655647f);
		fConst219 = (2 * (1.450071084655647f - fConst215));
		fConst220 = (fConst193 + 1.450071084655647f);
		fConst221 = (((fConst187 + -0.157482159302087f) / fConst186) + 0.93514016703154246f);
		fConst222 = (2 * (0.93514016703154246f - fConst215));
		fConst223 = (fConst190 + 0.93514016703154246f);
		fConst224 = tanf((6283.1853071795858f / fConst0));
		fConst225 = (1.0f / fConst224);
		fConst226 = (1.0f / (((fConst225 + 0.157482159302087f) / fConst224) + 0.93514016703154246f));
		fConst227 = faustpower<2>(fConst224);
		fConst228 = (50.063807016150385f / fConst227);
		fConst229 = (2 * (0.93514016703154246f - fConst228));
		fConst230 = (1.0f / (((fConst225 + 0.74313046010703965f) / fConst224) + 1.450071084655647f));
		fConst231 = (11.052052171507189f / fConst227);
		fConst232 = (2 * (1.450071084655647f - fConst231));
		fConst233 = (1.0f / (((fConst225 + 3.1897274020965583f) / fConst224) + 4.0767819696438066f));
		fConst234 = (0.0017661728399818856f / fConst227);
		fConst235 = (2 * (0.00040767818495825777f - fConst234));
		fConst236 = (1.0f / (((fConst187 + 0.16840487111358901f) / fConst186) + 1.0693584077073119f));
		fConst237 = (2 * (53.536152954556727f - fConst215));
		fConst238 = (1.0f / (((fConst187 + 0.51247864188914105f) / fConst186) + 0.68962136448467504f));
		fConst239 = (2 * (7.6217312988706034f - fConst215));
		fConst240 = (1.0f / (((fConst187 + 0.78241304682164503f) / fConst186) + 0.24529150870616001f));
		fConst241 = (9.9999997054999994e-05f / fConst189);
		fConst242 = (2 * (0.00043322720055500002f - fConst241));
		fConst243 = (((fConst187 + -0.78241304682164503f) / fConst186) + 0.24529150870616001f);
		fConst244 = (2 * (0.24529150870616001f - fConst215));
		fConst245 = (fConst241 + 0.00043322720055500002f);
		fConst246 = (((fConst187 + -0.51247864188914105f) / fConst186) + 0.68962136448467504f);
		fConst247 = (2 * (0.68962136448467504f - fConst215));
		fConst248 = (fConst215 + 7.6217312988706034f);
		fConst249 = (((fConst187 + -0.16840487111358901f) / fConst186) + 1.0693584077073119f);
		fConst250 = (2 * (1.0693584077073119f - fConst215));
		fConst251 = (fConst215 + 53.536152954556727f);
		fTempPerm49 = 0;
		fConst252 = (((fConst225 + -3.1897274020965583f) / fConst224) + 4.0767819696438066f);
		fConst253 = (1.0f / fConst227);
		fConst254 = (2 * (4.0767819696438066f - fConst253));
		fConst255 = (fConst234 + 0.00040767818495825777f);
		fConst256 = (((fConst225 + -0.74313046010703965f) / fConst224) + 1.450071084655647f);
		fConst257 = (2 * (1.450071084655647f - fConst253));
		fConst258 = (fConst231 + 1.450071084655647f);
		fConst259 = (((fConst225 + -0.157482159302087f) / fConst224) + 0.93514016703154246f);
		fConst260 = (2 * (0.93514016703154246f - fConst253));
		fConst261 = (fConst228 + 0.93514016703154246f);
		fConst262 = tanf((4442.8829381583664f / fConst0));
		fConst263 = (1.0f / fConst262);
		fConst264 = (1.0f / (((fConst263 + 0.157482159302087f) / fConst262) + 0.93514016703154246f));
		fConst265 = faustpower<2>(fConst262);
		fConst266 = (50.063807016150385f / fConst265);
		fConst267 = (2 * (0.93514016703154246f - fConst266));
		fConst268 = (1.0f / (((fConst263 + 0.74313046010703965f) / fConst262) + 1.450071084655647f));
		fConst269 = (11.052052171507189f / fConst265);
		fConst270 = (2 * (1.450071084655647f - fConst269));
		fConst271 = (1.0f / (((fConst263 + 3.1897274020965583f) / fConst262) + 4.0767819696438066f));
		fConst272 = (0.0017661728399818856f / fConst265);
		fConst273 = (2 * (0.00040767818495825777f - fConst272));
		fConst274 = (1.0f / (((fConst225 + 0.16840487111358901f) / fConst224) + 1.0693584077073119f));
		fConst275 = (2 * (53.536152954556727f - fConst253));
		fConst276 = (1.0f / (((fConst225 + 0.51247864188914105f) / fConst224) + 0.68962136448467504f));
		fConst277 = (2 * (7.6217312988706034f - fConst253));
		fConst278 = (1.0f / (((fConst225 + 0.78241304682164503f) / fConst224) + 0.24529150870616001f));
		fConst279 = (9.9999997054999994e-05f / fConst227);
		fConst280 = (2 * (0.00043322720055500002f - fConst279));
		fConst281 = (((fConst225 + -0.78241304682164503f) / fConst224) + 0.24529150870616001f);
		fConst282 = (2 * (0.24529150870616001f - fConst253));
		fConst283 = (fConst279 + 0.00043322720055500002f);
		fConst284 = (((fConst225 + -0.51247864188914105f) / fConst224) + 0.68962136448467504f);
		fConst285 = (2 * (0.68962136448467504f - fConst253));
		fConst286 = (fConst253 + 7.6217312988706034f);
		fConst287 = (((fConst225 + -0.16840487111358901f) / fConst224) + 1.0693584077073119f);
		fConst288 = (2 * (1.0693584077073119f - fConst253));
		fConst289 = (fConst253 + 53.536152954556727f);
		fTempPerm50 = 0;
		fConst290 = (((fConst263 + -3.1897274020965583f) / fConst262) + 4.0767819696438066f);
		fConst291 = (1.0f / fConst265);
		fConst292 = (2 * (4.0767819696438066f - fConst291));
		fConst293 = (fConst272 + 0.00040767818495825777f);
		fConst294 = (((fConst263 + -0.74313046010703965f) / fConst262) + 1.450071084655647f);
		fConst295 = (2 * (1.450071084655647f - fConst291));
		fConst296 = (fConst269 + 1.450071084655647f);
		fConst297 = (((fConst263 + -0.157482159302087f) / fConst262) + 0.93514016703154246f);
		fConst298 = (2 * (0.93514016703154246f - fConst291));
		fConst299 = (fConst266 + 0.93514016703154246f);
		fConst300 = tanf((3141.5926535897929f / fConst0));
		fConst301 = (1.0f / fConst300);
		fConst302 = (1.0f / (((fConst301 + 0.157482159302087f) / fConst300) + 0.93514016703154246f));
		fConst303 = faustpower<2>(fConst300);
		fConst304 = (50.063807016150385f / fConst303);
		fConst305 = (2 * (0.93514016703154246f - fConst304));
		fConst306 = (1.0f / (((fConst301 + 0.74313046010703965f) / fConst300) + 1.450071084655647f));
		fConst307 = (11.052052171507189f / fConst303);
		fConst308 = (2 * (1.450071084655647f - fConst307));
		fConst309 = (1.0f / (((fConst301 + 3.1897274020965583f) / fConst300) + 4.0767819696438066f));
		fConst310 = (0.0017661728399818856f / fConst303);
		fConst311 = (2 * (0.00040767818495825777f - fConst310));
		fConst312 = (1.0f / (((fConst263 + 0.16840487111358901f) / fConst262) + 1.0693584077073119f));
		fConst313 = (2 * (53.536152954556727f - fConst291));
		fConst314 = (1.0f / (((fConst263 + 0.51247864188914105f) / fConst262) + 0.68962136448467504f));
		fConst315 = (2 * (7.6217312988706034f - fConst291));
		fConst316 = (1.0f / (((fConst263 + 0.78241304682164503f) / fConst262) + 0.24529150870616001f));
		fConst317 = (9.9999997054999994e-05f / fConst265);
		fConst318 = (2 * (0.00043322720055500002f - fConst317));
		fConst319 = (((fConst263 + -0.78241304682164503f) / fConst262) + 0.24529150870616001f);
		fConst320 = (2 * (0.24529150870616001f - fConst291));
		fConst321 = (fConst317 + 0.00043322720055500002f);
		fConst322 = (((fConst263 + -0.51247864188914105f) / fConst262) + 0.68962136448467504f);
		fConst323 = (2 * (0.68962136448467504f - fConst291));
		fConst324 = (fConst291 + 7.6217312988706034f);
		fConst325 = (((fConst263 + -0.16840487111358901f) / fConst262) + 1.0693584077073119f);
		fConst326 = (2 * (1.0693584077073119f - fConst291));
		fConst327 = (fConst291 + 53.536152954556727f);
		fTempPerm51 = 0;
		fConst328 = (((fConst301 + -3.1897274020965583f) / fConst300) + 4.0767819696438066f);
		fConst329 = (1.0f / fConst303);
		fConst330 = (2 * (4.0767819696438066f - fConst329));
		fConst331 = (fConst310 + 0.00040767818495825777f);
		fConst332 = (((fConst301 + -0.74313046010703965f) / fConst300) + 1.450071084655647f);
		fConst333 = (2 * (1.450071084655647f - fConst329));
		fConst334 = (fConst307 + 1.450071084655647f);
		fConst335 = (((fConst301 + -0.157482159302087f) / fConst300) + 0.93514016703154246f);
		fConst336 = (2 * (0.93514016703154246f - fConst329));
		fConst337 = (fConst304 + 0.93514016703154246f);
		fConst338 = tanf((2221.4414690791832f / fConst0));
		fConst339 = (1.0f / fConst338);
		fConst340 = (1.0f / (((fConst339 + 0.157482159302087f) / fConst338) + 0.93514016703154246f));
		fConst341 = faustpower<2>(fConst338);
		fConst342 = (50.063807016150385f / fConst341);
		fConst343 = (2 * (0.93514016703154246f - fConst342));
		fConst344 = (1.0f / (((fConst339 + 0.74313046010703965f) / fConst338) + 1.450071084655647f));
		fConst345 = (11.052052171507189f / fConst341);
		fConst346 = (2 * (1.450071084655647f - fConst345));
		fConst347 = (1.0f / (((fConst339 + 3.1897274020965583f) / fConst338) + 4.0767819696438066f));
		fConst348 = (0.0017661728399818856f / fConst341);
		fConst349 = (2 * (0.00040767818495825777f - fConst348));
		fConst350 = (1.0f / (((fConst301 + 0.16840487111358901f) / fConst300) + 1.0693584077073119f));
		fConst351 = (2 * (53.536152954556727f - fConst329));
		fConst352 = (1.0f / (((fConst301 + 0.51247864188914105f) / fConst300) + 0.68962136448467504f));
		fConst353 = (2 * (7.6217312988706034f - fConst329));
		fConst354 = (1.0f / (((fConst301 + 0.78241304682164503f) / fConst300) + 0.24529150870616001f));
		fConst355 = (9.9999997054999994e-05f / fConst303);
		fConst356 = (2 * (0.00043322720055500002f - fConst355));
		fConst357 = (((fConst301 + -0.78241304682164503f) / fConst300) + 0.24529150870616001f);
		fConst358 = (2 * (0.24529150870616001f - fConst329));
		fConst359 = (fConst355 + 0.00043322720055500002f);
		fConst360 = (((fConst301 + -0.51247864188914105f) / fConst300) + 0.68962136448467504f);
		fConst361 = (2 * (0.68962136448467504f - fConst329));
		fConst362 = (fConst329 + 7.6217312988706034f);
		fConst363 = (((fConst301 + -0.16840487111358901f) / fConst300) + 1.0693584077073119f);
		fConst364 = (2 * (1.0693584077073119f - fConst329));
		fConst365 = (fConst329 + 53.536152954556727f);
		fTempPerm52 = 0;
		fConst366 = (((fConst339 + -3.1897274020965583f) / fConst338) + 4.0767819696438066f);
		fConst367 = (1.0f / fConst341);
		fConst368 = (2 * (4.0767819696438066f - fConst367));
		fConst369 = (fConst348 + 0.00040767818495825777f);
		fConst370 = (((fConst339 + -0.74313046010703965f) / fConst338) + 1.450071084655647f);
		fConst371 = (2 * (1.450071084655647f - fConst367));
		fConst372 = (fConst345 + 1.450071084655647f);
		fConst373 = (((fConst339 + -0.157482159302087f) / fConst338) + 0.93514016703154246f);
		fConst374 = (2 * (0.93514016703154246f - fConst367));
		fConst375 = (fConst342 + 0.93514016703154246f);
		fConst376 = tanf((1570.7963267948965f / fConst0));
		fConst377 = (1.0f / fConst376);
		fConst378 = (1.0f / (((fConst377 + 0.157482159302087f) / fConst376) + 0.93514016703154246f));
		fConst379 = faustpower<2>(fConst376);
		fConst380 = (50.063807016150385f / fConst379);
		fConst381 = (2 * (0.93514016703154246f - fConst380));
		fConst382 = (1.0f / (((fConst377 + 0.74313046010703965f) / fConst376) + 1.450071084655647f));
		fConst383 = (11.052052171507189f / fConst379);
		fConst384 = (2 * (1.450071084655647f - fConst383));
		fConst385 = (1.0f / (((fConst377 + 3.1897274020965583f) / fConst376) + 4.0767819696438066f));
		fConst386 = (0.0017661728399818856f / fConst379);
		fConst387 = (2 * (0.00040767818495825777f - fConst386));
		fConst388 = (1.0f / (((fConst339 + 0.16840487111358901f) / fConst338) + 1.0693584077073119f));
		fConst389 = (2 * (53.536152954556727f - fConst367));
		fConst390 = (1.0f / (((fConst339 + 0.51247864188914105f) / fConst338) + 0.68962136448467504f));
		fConst391 = (2 * (7.6217312988706034f - fConst367));
		fConst392 = (1.0f / (((fConst339 + 0.78241304682164503f) / fConst338) + 0.24529150870616001f));
		fConst393 = (9.9999997054999994e-05f / fConst341);
		fConst394 = (2 * (0.00043322720055500002f - fConst393));
		fConst395 = (((fConst339 + -0.78241304682164503f) / fConst338) + 0.24529150870616001f);
		fConst396 = (2 * (0.24529150870616001f - fConst367));
		fConst397 = (fConst393 + 0.00043322720055500002f);
		fConst398 = (((fConst339 + -0.51247864188914105f) / fConst338) + 0.68962136448467504f);
		fConst399 = (2 * (0.68962136448467504f - fConst367));
		fConst400 = (fConst367 + 7.6217312988706034f);
		fConst401 = (((fConst339 + -0.16840487111358901f) / fConst338) + 1.0693584077073119f);
		fConst402 = (2 * (1.0693584077073119f - fConst367));
		fConst403 = (fConst367 + 53.536152954556727f);
		fTempPerm53 = 0;
		fConst404 = (((fConst377 + -3.1897274020965583f) / fConst376) + 4.0767819696438066f);
		fConst405 = (1.0f / fConst379);
		fConst406 = (2 * (4.0767819696438066f - fConst405));
		fConst407 = (fConst386 + 0.00040767818495825777f);
		fConst408 = (((fConst377 + -0.74313046010703965f) / fConst376) + 1.450071084655647f);
		fConst409 = (2 * (1.450071084655647f - fConst405));
		fConst410 = (fConst383 + 1.450071084655647f);
		fConst411 = (((fConst377 + -0.157482159302087f) / fConst376) + 0.93514016703154246f);
		fConst412 = (2 * (0.93514016703154246f - fConst405));
		fConst413 = (fConst380 + 0.93514016703154246f);
		fConst414 = tanf((1110.7207345395916f / fConst0));
		fConst415 = (1.0f / fConst414);
		fConst416 = (1.0f / (((fConst415 + 0.157482159302087f) / fConst414) + 0.93514016703154246f));
		fConst417 = faustpower<2>(fConst414);
		fConst418 = (50.063807016150385f / fConst417);
		fConst419 = (2 * (0.93514016703154246f - fConst418));
		fConst420 = (1.0f / (((fConst415 + 0.74313046010703965f) / fConst414) + 1.450071084655647f));
		fConst421 = (11.052052171507189f / fConst417);
		fConst422 = (2 * (1.450071084655647f - fConst421));
		fConst423 = (1.0f / (((fConst415 + 3.1897274020965583f) / fConst414) + 4.0767819696438066f));
		fConst424 = (0.0017661728399818856f / fConst417);
		fConst425 = (2 * (0.00040767818495825777f - fConst424));
		fConst426 = (1.0f / (((fConst377 + 0.16840487111358901f) / fConst376) + 1.0693584077073119f));
		fConst427 = (2 * (53.536152954556727f - fConst405));
		fConst428 = (1.0f / (((fConst377 + 0.51247864188914105f) / fConst376) + 0.68962136448467504f));
		fConst429 = (2 * (7.6217312988706034f - fConst405));
		fConst430 = (1.0f / (((fConst377 + 0.78241304682164503f) / fConst376) + 0.24529150870616001f));
		fConst431 = (9.9999997054999994e-05f / fConst379);
		fConst432 = (2 * (0.00043322720055500002f - fConst431));
		fConst433 = (((fConst377 + -0.78241304682164503f) / fConst376) + 0.24529150870616001f);
		fConst434 = (2 * (0.24529150870616001f - fConst405));
		fConst435 = (fConst431 + 0.00043322720055500002f);
		fConst436 = (((fConst377 + -0.51247864188914105f) / fConst376) + 0.68962136448467504f);
		fConst437 = (2 * (0.68962136448467504f - fConst405));
		fConst438 = (fConst405 + 7.6217312988706034f);
		fConst439 = (((fConst377 + -0.16840487111358901f) / fConst376) + 1.0693584077073119f);
		fConst440 = (2 * (1.0693584077073119f - fConst405));
		fConst441 = (fConst405 + 53.536152954556727f);
		fTempPerm54 = 0;
		fConst442 = (((fConst415 + -3.1897274020965583f) / fConst414) + 4.0767819696438066f);
		fConst443 = (1.0f / fConst417);
		fConst444 = (2 * (4.0767819696438066f - fConst443));
		fConst445 = (fConst424 + 0.00040767818495825777f);
		fConst446 = (((fConst415 + -0.74313046010703965f) / fConst414) + 1.450071084655647f);
		fConst447 = (2 * (1.450071084655647f - fConst443));
		fConst448 = (fConst421 + 1.450071084655647f);
		fConst449 = (((fConst415 + -0.157482159302087f) / fConst414) + 0.93514016703154246f);
		fConst450 = (2 * (0.93514016703154246f - fConst443));
		fConst451 = (fConst418 + 0.93514016703154246f);
		fConst452 = tanf((785.39816339744823f / fConst0));
		fConst453 = (1.0f / fConst452);
		fConst454 = (1.0f / (((fConst453 + 0.157482159302087f) / fConst452) + 0.93514016703154246f));
		fConst455 = faustpower<2>(fConst452);
		fConst456 = (50.063807016150385f / fConst455);
		fConst457 = (2 * (0.93514016703154246f - fConst456));
		fConst458 = (1.0f / (((fConst453 + 0.74313046010703965f) / fConst452) + 1.450071084655647f));
		fConst459 = (11.052052171507189f / fConst455);
		fConst460 = (2 * (1.450071084655647f - fConst459));
		fConst461 = (1.0f / (((fConst453 + 3.1897274020965583f) / fConst452) + 4.0767819696438066f));
		fConst462 = (0.0017661728399818856f / fConst455);
		fConst463 = (2 * (0.00040767818495825777f - fConst462));
		fConst464 = (1.0f / (((fConst415 + 0.16840487111358901f) / fConst414) + 1.0693584077073119f));
		fConst465 = (2 * (53.536152954556727f - fConst443));
		fConst466 = (1.0f / (((fConst415 + 0.51247864188914105f) / fConst414) + 0.68962136448467504f));
		fConst467 = (2 * (7.6217312988706034f - fConst443));
		fConst468 = (1.0f / (((fConst415 + 0.78241304682164503f) / fConst414) + 0.24529150870616001f));
		fConst469 = (9.9999997054999994e-05f / fConst417);
		fConst470 = (2 * (0.00043322720055500002f - fConst469));
		fConst471 = (((fConst415 + -0.78241304682164503f) / fConst414) + 0.24529150870616001f);
		fConst472 = (2 * (0.24529150870616001f - fConst443));
		fConst473 = (fConst469 + 0.00043322720055500002f);
		fConst474 = (((fConst415 + -0.51247864188914105f) / fConst414) + 0.68962136448467504f);
		fConst475 = (2 * (0.68962136448467504f - fConst443));
		fConst476 = (fConst443 + 7.6217312988706034f);
		fConst477 = (((fConst415 + -0.16840487111358901f) / fConst414) + 1.0693584077073119f);
		fConst478 = (2 * (1.0693584077073119f - fConst443));
		fConst479 = (fConst443 + 53.536152954556727f);
		fTempPerm55 = 0;
		fConst480 = (((fConst453 + -3.1897274020965583f) / fConst452) + 4.0767819696438066f);
		fConst481 = (1.0f / fConst455);
		fConst482 = (2 * (4.0767819696438066f - fConst481));
		fConst483 = (fConst462 + 0.00040767818495825777f);
		fConst484 = (((fConst453 + -0.74313046010703965f) / fConst452) + 1.450071084655647f);
		fConst485 = (2 * (1.450071084655647f - fConst481));
		fConst486 = (fConst459 + 1.450071084655647f);
		fConst487 = (((fConst453 + -0.157482159302087f) / fConst452) + 0.93514016703154246f);
		fConst488 = (2 * (0.93514016703154246f - fConst481));
		fConst489 = (fConst456 + 0.93514016703154246f);
		fConst490 = tanf((555.3603672697958f / fConst0));
		fConst491 = (1.0f / fConst490);
		fConst492 = (1.0f / (((fConst491 + 0.157482159302087f) / fConst490) + 0.93514016703154246f));
		fConst493 = faustpower<2>(fConst490);
		fConst494 = (50.063807016150385f / fConst493);
		fConst495 = (2 * (0.93514016703154246f - fConst494));
		fConst496 = (1.0f / (((fConst491 + 0.74313046010703965f) / fConst490) + 1.450071084655647f));
		fConst497 = (11.052052171507189f / fConst493);
		fConst498 = (2 * (1.450071084655647f - fConst497));
		fConst499 = (1.0f / (((fConst491 + 3.1897274020965583f) / fConst490) + 4.0767819696438066f));
		fConst500 = (0.0017661728399818856f / fConst493);
		fConst501 = (2 * (0.00040767818495825777f - fConst500));
		fConst502 = (1.0f / (((fConst453 + 0.16840487111358901f) / fConst452) + 1.0693584077073119f));
		fConst503 = (2 * (53.536152954556727f - fConst481));
		fConst504 = (1.0f / (((fConst453 + 0.51247864188914105f) / fConst452) + 0.68962136448467504f));
		fConst505 = (2 * (7.6217312988706034f - fConst481));
		fConst506 = (1.0f / (((fConst453 + 0.78241304682164503f) / fConst452) + 0.24529150870616001f));
		fConst507 = (9.9999997054999994e-05f / fConst455);
		fConst508 = (2 * (0.00043322720055500002f - fConst507));
		fConst509 = (((fConst453 + -0.78241304682164503f) / fConst452) + 0.24529150870616001f);
		fConst510 = (2 * (0.24529150870616001f - fConst481));
		fConst511 = (fConst507 + 0.00043322720055500002f);
		fConst512 = (((fConst453 + -0.51247864188914105f) / fConst452) + 0.68962136448467504f);
		fConst513 = (2 * (0.68962136448467504f - fConst481));
		fConst514 = (fConst481 + 7.6217312988706034f);
		fConst515 = (((fConst453 + -0.16840487111358901f) / fConst452) + 1.0693584077073119f);
		fConst516 = (2 * (1.0693584077073119f - fConst481));
		fConst517 = (fConst481 + 53.536152954556727f);
		fTempPerm56 = 0;
		fConst518 = (((fConst491 + -3.1897274020965583f) / fConst490) + 4.0767819696438066f);
		fConst519 = (1.0f / fConst493);
		fConst520 = (2 * (4.0767819696438066f - fConst519));
		fConst521 = (fConst500 + 0.00040767818495825777f);
		fConst522 = (((fConst491 + -0.74313046010703965f) / fConst490) + 1.450071084655647f);
		fConst523 = (2 * (1.450071084655647f - fConst519));
		fConst524 = (fConst497 + 1.450071084655647f);
		fConst525 = (((fConst491 + -0.157482159302087f) / fConst490) + 0.93514016703154246f);
		fConst526 = (2 * (0.93514016703154246f - fConst519));
		fConst527 = (fConst494 + 0.93514016703154246f);
		fConst528 = tanf((392.69908169872411f / fConst0));
		fConst529 = (1.0f / fConst528);
		fConst530 = (1.0f / (((fConst529 + 0.157482159302087f) / fConst528) + 0.93514016703154246f));
		fConst531 = faustpower<2>(fConst528);
		fConst532 = (50.063807016150385f / fConst531);
		fConst533 = (2 * (0.93514016703154246f - fConst532));
		fConst534 = (1.0f / (((fConst529 + 0.74313046010703965f) / fConst528) + 1.450071084655647f));
		fConst535 = (11.052052171507189f / fConst531);
		fConst536 = (2 * (1.450071084655647f - fConst535));
		fConst537 = (1.0f / (((fConst529 + 3.1897274020965583f) / fConst528) + 4.0767819696438066f));
		fConst538 = (0.0017661728399818856f / fConst531);
		fConst539 = (2 * (0.00040767818495825777f - fConst538));
		fConst540 = (1.0f / (((fConst491 + 0.16840487111358901f) / fConst490) + 1.0693584077073119f));
		fConst541 = (2 * (53.536152954556727f - fConst519));
		fConst542 = (1.0f / (((fConst491 + 0.51247864188914105f) / fConst490) + 0.68962136448467504f));
		fConst543 = (2 * (7.6217312988706034f - fConst519));
		fConst544 = (1.0f / (((fConst491 + 0.78241304682164503f) / fConst490) + 0.24529150870616001f));
		fConst545 = (9.9999997054999994e-05f / fConst493);
		fConst546 = (2 * (0.00043322720055500002f - fConst545));
		fConst547 = (((fConst491 + -0.78241304682164503f) / fConst490) + 0.24529150870616001f);
		fConst548 = (2 * (0.24529150870616001f - fConst519));
		fConst549 = (fConst545 + 0.00043322720055500002f);
		fConst550 = (((fConst491 + -0.51247864188914105f) / fConst490) + 0.68962136448467504f);
		fConst551 = (2 * (0.68962136448467504f - fConst519));
		fConst552 = (fConst519 + 7.6217312988706034f);
		fConst553 = (((fConst491 + -0.16840487111358901f) / fConst490) + 1.0693584077073119f);
		fConst554 = (2 * (1.0693584077073119f - fConst519));
		fConst555 = (fConst519 + 53.536152954556727f);
		fTempPerm57 = 0;
		fConst556 = (((fConst529 + -3.1897274020965583f) / fConst528) + 4.0767819696438066f);
		fConst557 = (1.0f / fConst531);
		fConst558 = (2 * (4.0767819696438066f - fConst557));
		fConst559 = (fConst538 + 0.00040767818495825777f);
		fConst560 = (((fConst529 + -0.74313046010703965f) / fConst528) + 1.450071084655647f);
		fConst561 = (2 * (1.450071084655647f - fConst557));
		fConst562 = (fConst535 + 1.450071084655647f);
		fConst563 = (((fConst529 + -0.157482159302087f) / fConst528) + 0.93514016703154246f);
		fConst564 = (2 * (0.93514016703154246f - fConst557));
		fConst565 = (fConst532 + 0.93514016703154246f);
		fConst566 = tanf((277.6801836348979f / fConst0));
		fConst567 = (1.0f / fConst566);
		fConst568 = (1.0f / (((fConst567 + 0.157482159302087f) / fConst566) + 0.93514016703154246f));
		fConst569 = faustpower<2>(fConst566);
		fConst570 = (50.063807016150385f / fConst569);
		fConst571 = (2 * (0.93514016703154246f - fConst570));
		fConst572 = (1.0f / (((fConst567 + 0.74313046010703965f) / fConst566) + 1.450071084655647f));
		fConst573 = (11.052052171507189f / fConst569);
		fConst574 = (2 * (1.450071084655647f - fConst573));
		fConst575 = (1.0f / (((fConst567 + 3.1897274020965583f) / fConst566) + 4.0767819696438066f));
		fConst576 = (0.0017661728399818856f / fConst569);
		fConst577 = (2 * (0.00040767818495825777f - fConst576));
		fConst578 = (1.0f / (((fConst529 + 0.16840487111358901f) / fConst528) + 1.0693584077073119f));
		fConst579 = (2 * (53.536152954556727f - fConst557));
		fConst580 = (1.0f / (((fConst529 + 0.51247864188914105f) / fConst528) + 0.68962136448467504f));
		fConst581 = (2 * (7.6217312988706034f - fConst557));
		fConst582 = (1.0f / (((fConst529 + 0.78241304682164503f) / fConst528) + 0.24529150870616001f));
		fConst583 = (9.9999997054999994e-05f / fConst531);
		fConst584 = (2 * (0.00043322720055500002f - fConst583));
		fConst585 = (((fConst529 + -0.78241304682164503f) / fConst528) + 0.24529150870616001f);
		fConst586 = (2 * (0.24529150870616001f - fConst557));
		fConst587 = (fConst583 + 0.00043322720055500002f);
		fConst588 = (((fConst529 + -0.51247864188914105f) / fConst528) + 0.68962136448467504f);
		fConst589 = (2 * (0.68962136448467504f - fConst557));
		fConst590 = (fConst557 + 7.6217312988706034f);
		fConst591 = (((fConst529 + -0.16840487111358901f) / fConst528) + 1.0693584077073119f);
		fConst592 = (2 * (1.0693584077073119f - fConst557));
		fConst593 = (fConst557 + 53.536152954556727f);
		fTempPerm58 = 0;
		fConst594 = (((fConst567 + -3.1897274020965583f) / fConst566) + 4.0767819696438066f);
		fConst595 = (1.0f / fConst569);
		fConst596 = (2 * (4.0767819696438066f - fConst595));
		fConst597 = (fConst576 + 0.00040767818495825777f);
		fConst598 = (((fConst567 + -0.74313046010703965f) / fConst566) + 1.450071084655647f);
		fConst599 = (2 * (1.450071084655647f - fConst595));
		fConst600 = (fConst573 + 1.450071084655647f);
		fConst601 = (((fConst567 + -0.157482159302087f) / fConst566) + 0.93514016703154246f);
		fConst602 = (2 * (0.93514016703154246f - fConst595));
		fConst603 = (fConst570 + 0.93514016703154246f);
		fConst604 = tanf((196.34954084936206f / fConst0));
		fConst605 = (1.0f / fConst604);
		fConst606 = (1.0f / (((fConst605 + 0.157482159302087f) / fConst604) + 0.93514016703154246f));
		fConst607 = faustpower<2>(fConst604);
		fConst608 = (50.063807016150385f / fConst607);
		fConst609 = (2 * (0.93514016703154246f - fConst608));
		fConst610 = (1.0f / (((fConst605 + 0.74313046010703965f) / fConst604) + 1.450071084655647f));
		fConst611 = (11.052052171507189f / fConst607);
		fConst612 = (2 * (1.450071084655647f - fConst611));
		fConst613 = (1.0f / (((fConst605 + 3.1897274020965583f) / fConst604) + 4.0767819696438066f));
		fConst614 = (0.0017661728399818856f / fConst607);
		fConst615 = (2 * (0.00040767818495825777f - fConst614));
		fConst616 = (1.0f / (((fConst567 + 0.16840487111358901f) / fConst566) + 1.0693584077073119f));
		fConst617 = (2 * (53.536152954556727f - fConst595));
		fConst618 = (1.0f / (((fConst567 + 0.51247864188914105f) / fConst566) + 0.68962136448467504f));
		fConst619 = (2 * (7.6217312988706034f - fConst595));
		fConst620 = (1.0f / (((fConst567 + 0.78241304682164503f) / fConst566) + 0.24529150870616001f));
		fConst621 = (9.9999997054999994e-05f / fConst569);
		fConst622 = (2 * (0.00043322720055500002f - fConst621));
		fConst623 = (((fConst567 + -0.78241304682164503f) / fConst566) + 0.24529150870616001f);
		fConst624 = (2 * (0.24529150870616001f - fConst595));
		fConst625 = (fConst621 + 0.00043322720055500002f);
		fConst626 = (((fConst567 + -0.51247864188914105f) / fConst566) + 0.68962136448467504f);
		fConst627 = (2 * (0.68962136448467504f - fConst595));
		fConst628 = (fConst595 + 7.6217312988706034f);
		fConst629 = (((fConst567 + -0.16840487111358901f) / fConst566) + 1.0693584077073119f);
		fConst630 = (2 * (1.0693584077073119f - fConst595));
		fConst631 = (fConst595 + 53.536152954556727f);
		fTempPerm59 = 0;
		fConst632 = (((fConst605 + -3.1897274020965583f) / fConst604) + 4.0767819696438066f);
		fConst633 = (1.0f / fConst607);
		fConst634 = (2 * (4.0767819696438066f - fConst633));
		fConst635 = (fConst614 + 0.00040767818495825777f);
		fConst636 = (((fConst605 + -0.74313046010703965f) / fConst604) + 1.450071084655647f);
		fConst637 = (2 * (1.450071084655647f - fConst633));
		fConst638 = (fConst611 + 1.450071084655647f);
		fConst639 = (((fConst605 + -0.157482159302087f) / fConst604) + 0.93514016703154246f);
		fConst640 = (2 * (0.93514016703154246f - fConst633));
		fConst641 = (fConst608 + 0.93514016703154246f);
		fConst642 = tanf((138.84009181744895f / fConst0));
		fConst643 = (1.0f / fConst642);
		fConst644 = (1.0f / (((fConst643 + 0.157482159302087f) / fConst642) + 0.93514016703154246f));
		fConst645 = faustpower<2>(fConst642);
		fConst646 = (50.063807016150385f / fConst645);
		fConst647 = (2 * (0.93514016703154246f - fConst646));
		fConst648 = (1.0f / (((fConst643 + 0.74313046010703965f) / fConst642) + 1.450071084655647f));
		fConst649 = (11.052052171507189f / fConst645);
		fConst650 = (2 * (1.450071084655647f - fConst649));
		fConst651 = (1.0f / (((fConst643 + 3.1897274020965583f) / fConst642) + 4.0767819696438066f));
		fConst652 = (0.0017661728399818856f / fConst645);
		fConst653 = (2 * (0.00040767818495825777f - fConst652));
		fConst654 = (1.0f / (((fConst605 + 0.16840487111358901f) / fConst604) + 1.0693584077073119f));
		fConst655 = (2 * (53.536152954556727f - fConst633));
		fConst656 = (1.0f / (((fConst605 + 0.51247864188914105f) / fConst604) + 0.68962136448467504f));
		fConst657 = (2 * (7.6217312988706034f - fConst633));
		fConst658 = (1.0f / (((fConst605 + 0.78241304682164503f) / fConst604) + 0.24529150870616001f));
		fConst659 = (9.9999997054999994e-05f / fConst607);
		fConst660 = (2 * (0.00043322720055500002f - fConst659));
		fConst661 = (((fConst605 + -0.78241304682164503f) / fConst604) + 0.24529150870616001f);
		fConst662 = (2 * (0.24529150870616001f - fConst633));
		fConst663 = (fConst659 + 0.00043322720055500002f);
		fConst664 = (((fConst605 + -0.51247864188914105f) / fConst604) + 0.68962136448467504f);
		fConst665 = (2 * (0.68962136448467504f - fConst633));
		fConst666 = (fConst633 + 7.6217312988706034f);
		fConst667 = (((fConst605 + -0.16840487111358901f) / fConst604) + 1.0693584077073119f);
		fConst668 = (2 * (1.0693584077073119f - fConst633));
		fConst669 = (fConst633 + 53.536152954556727f);
		fTempPerm60 = 0;
		fConst670 = (((fConst643 + -3.1897274020965583f) / fConst642) + 4.0767819696438066f);
		fConst671 = (1.0f / fConst645);
		fConst672 = (2 * (4.0767819696438066f - fConst671));
		fConst673 = (fConst652 + 0.00040767818495825777f);
		fConst674 = (((fConst643 + -0.74313046010703965f) / fConst642) + 1.450071084655647f);
		fConst675 = (2 * (1.450071084655647f - fConst671));
		fConst676 = (fConst649 + 1.450071084655647f);
		fConst677 = (((fConst643 + -0.157482159302087f) / fConst642) + 0.93514016703154246f);
		fConst678 = (2 * (0.93514016703154246f - fConst671));
		fConst679 = (fConst646 + 0.93514016703154246f);
		fConst680 = tanf((98.174770424681029f / fConst0));
		fConst681 = (1.0f / fConst680);
		fConst682 = (1.0f / (((fConst681 + 0.157482159302087f) / fConst680) + 0.93514016703154246f));
		fConst683 = faustpower<2>(fConst680);
		fConst684 = (50.063807016150385f / fConst683);
		fConst685 = (2 * (0.93514016703154246f - fConst684));
		fConst686 = (1.0f / (((fConst681 + 0.74313046010703965f) / fConst680) + 1.450071084655647f));
		fConst687 = (11.052052171507189f / fConst683);
		fConst688 = (2 * (1.450071084655647f - fConst687));
		fConst689 = (1.0f / (((fConst681 + 3.1897274020965583f) / fConst680) + 4.0767819696438066f));
		fConst690 = (0.0017661728399818856f / fConst683);
		fConst691 = (2 * (0.00040767818495825777f - fConst690));
		fConst692 = (1.0f / (((fConst643 + 0.16840487111358901f) / fConst642) + 1.0693584077073119f));
		fConst693 = (2 * (53.536152954556727f - fConst671));
		fConst694 = (1.0f / (((fConst643 + 0.51247864188914105f) / fConst642) + 0.68962136448467504f));
		fConst695 = (2 * (7.6217312988706034f - fConst671));
		fConst696 = (1.0f / (((fConst643 + 0.78241304682164503f) / fConst642) + 0.24529150870616001f));
		fConst697 = (9.9999997054999994e-05f / fConst645);
		fConst698 = (2 * (0.00043322720055500002f - fConst697));
		fConst699 = (((fConst643 + -0.78241304682164503f) / fConst642) + 0.24529150870616001f);
		fConst700 = (2 * (0.24529150870616001f - fConst671));
		fConst701 = (fConst697 + 0.00043322720055500002f);
		fConst702 = (((fConst643 + -0.51247864188914105f) / fConst642) + 0.68962136448467504f);
		fConst703 = (2 * (0.68962136448467504f - fConst671));
		fConst704 = (fConst671 + 7.6217312988706034f);
		fConst705 = (((fConst643 + -0.16840487111358901f) / fConst642) + 1.0693584077073119f);
		fConst706 = (2 * (1.0693584077073119f - fConst671));
		fConst707 = (fConst671 + 53.536152954556727f);
		fTempPerm61 = 0;
		fConst708 = (((fConst681 + -3.1897274020965583f) / fConst680) + 4.0767819696438066f);
		fConst709 = (1.0f / fConst683);
		fConst710 = (2 * (4.0767819696438066f - fConst709));
		fConst711 = (fConst690 + 0.00040767818495825777f);
		fConst712 = (((fConst681 + -0.74313046010703965f) / fConst680) + 1.450071084655647f);
		fConst713 = (2 * (1.450071084655647f - fConst709));
		fConst714 = (fConst687 + 1.450071084655647f);
		fConst715 = (((fConst681 + -0.157482159302087f) / fConst680) + 0.93514016703154246f);
		fConst716 = (2 * (0.93514016703154246f - fConst709));
		fConst717 = (fConst684 + 0.93514016703154246f);
		fConst718 = (1.0f / (((fConst681 + 0.16840487111358901f) / fConst680) + 1.0693584077073119f));
		fConst719 = (2 * (53.536152954556727f - fConst709));
		fConst720 = (1.0f / (((fConst681 + 0.51247864188914105f) / fConst680) + 0.68962136448467504f));
		fConst721 = (2 * (7.6217312988706034f - fConst709));
		fConst722 = (1.0f / (((fConst681 + 0.78241304682164503f) / fConst680) + 0.24529150870616001f));
		fConst723 = (9.9999997054999994e-05f / fConst683);
		fConst724 = (2 * (0.00043322720055500002f - fConst723));
		fConst725 = (((fConst681 + -0.78241304682164503f) / fConst680) + 0.24529150870616001f);
		fConst726 = (2 * (0.24529150870616001f - fConst709));
		fConst727 = (fConst723 + 0.00043322720055500002f);
		fConst728 = (((fConst681 + -0.51247864188914105f) / fConst680) + 0.68962136448467504f);
		fConst729 = (2 * (0.68962136448467504f - fConst709));
		fConst730 = (fConst709 + 7.6217312988706034f);
		fConst731 = (((fConst681 + -0.16840487111358901f) / fConst680) + 1.0693584077073119f);
		fConst732 = (2 * (1.0693584077073119f - fConst709));
		fConst733 = (fConst709 + 53.536152954556727f);
		fTempPerm62 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fslider2 = 8000.0f;
		fslider3 = 200.0f;
		fslider4 = -20.0f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fcheckbox2 = 0.0;
		fentry0 = 2.0f;
		fslider5 = 49.0f;
		fslider6 = 0.10000000000000001f;
		fslider7 = -0.10000000000000001f;
		fslider8 = 0.10000000000000001f;
		fslider9 = 0.0f;
		fslider10 = 49.0f;
		fslider11 = 0.0f;
		fslider12 = 40.0f;
		fslider13 = 0.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<4; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) iRec11[i] = 0;
		for (int i=0; i<4; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<3; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<3; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<2; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec72[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<2; i++) fRec77[i] = 0;
		for (int i=0; i<3; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<3; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<3; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<3; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec100[i] = 0;
		for (int i=0; i<3; i++) fRec99[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<3; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<2; i++) fRec105[i] = 0;
		for (int i=0; i<3; i++) fRec118[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<3; i++) fRec125[i] = 0;
		for (int i=0; i<3; i++) fRec124[i] = 0;
		for (int i=0; i<3; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<3; i++) fRec132[i] = 0;
		for (int i=0; i<3; i++) fRec131[i] = 0;
		for (int i=0; i<3; i++) fRec130[i] = 0;
		for (int i=0; i<3; i++) fRec129[i] = 0;
		for (int i=0; i<3; i++) fRec128[i] = 0;
		for (int i=0; i<3; i++) fRec127[i] = 0;
		for (int i=0; i<2; i++) fRec126[i] = 0;
		for (int i=0; i<3; i++) fRec139[i] = 0;
		for (int i=0; i<3; i++) fRec138[i] = 0;
		for (int i=0; i<3; i++) fRec137[i] = 0;
		for (int i=0; i<3; i++) fRec136[i] = 0;
		for (int i=0; i<3; i++) fRec135[i] = 0;
		for (int i=0; i<3; i++) fRec134[i] = 0;
		for (int i=0; i<2; i++) fRec133[i] = 0;
		for (int i=0; i<3; i++) fRec146[i] = 0;
		for (int i=0; i<3; i++) fRec145[i] = 0;
		for (int i=0; i<3; i++) fRec144[i] = 0;
		for (int i=0; i<3; i++) fRec143[i] = 0;
		for (int i=0; i<3; i++) fRec142[i] = 0;
		for (int i=0; i<3; i++) fRec141[i] = 0;
		for (int i=0; i<2; i++) fRec140[i] = 0;
		for (int i=0; i<3; i++) fRec150[i] = 0;
		for (int i=0; i<3; i++) fRec149[i] = 0;
		for (int i=0; i<3; i++) fRec148[i] = 0;
		for (int i=0; i<2; i++) fRec147[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("parametricEqLab");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillators.lib   for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider4, "1", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Sawtooth   waveform amplitude");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider4, -20.0f, -120.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider5, "2", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider5, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider5, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider7, "3", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Percentange frequency-shift  up or down for second oscillator");
		ui_interface->declare(&fslider7, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider7, -0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider8, "4", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider8, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider8, 0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider6, "5", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider6, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider6, 0.10000000000000001f, 0.001f, 10.0f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing   suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on   the left)", &fcheckbox1);
		ui_interface->declare(&fcheckbox2, "1", "");
		ui_interface->declare(&fcheckbox2, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the   same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox2);
		ui_interface->declare(&fcheckbox0, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise   selection above)", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib   for info and pointers");
		ui_interface->openHorizontalBox("PARAMETRIC EQ SECTIONS");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Low Shelf");
		ui_interface->declare(&fslider9, "0", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->declare(&fslider9, "tooltip", "Amount of low-frequency boost or cut in decibels");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addHorizontalSlider("Low Boost|Cut", &fslider9, 0.0f, -40.0f, 40.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "scale", "log");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider3, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider3, 200.0f, 1.0f, 5000.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->declare(0, "tooltip", "Parametric Equalizer   sections from filters.lib");
		ui_interface->openVerticalBox("Peaking Equalizer");
		ui_interface->declare(&fslider11, "0", "");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "tooltip", "Amount of   local boost or cut in decibels");
		ui_interface->declare(&fslider11, "unit", "dB");
		ui_interface->addHorizontalSlider("Peak Boost|Cut", &fslider11, 0.0f, -40.0f, 40.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider10, "1", "");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->declare(&fslider10, "tooltip", "Peak   Frequency in Piano Key (PK) units (A440 = 49PK)");
		ui_interface->declare(&fslider10, "unit", "PK");
		ui_interface->addHorizontalSlider("Peak Frequency", &fslider10, 49.0f, 1.0f, 100.0f, 1.0f);
		ui_interface->declare(&fslider12, "2", "");
		ui_interface->declare(&fslider12, "scale", "log");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "tooltip", "Quality factor   (Q) of the peak = center-frequency/bandwidth");
		ui_interface->addHorizontalSlider("Peak Q", &fslider12, 40.0f, 1.0f, 1000.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->declare(0, "tooltip", "A high shelf provides a boost   or cut above some frequency");
		ui_interface->openVerticalBox("High Shelf");
		ui_interface->declare(&fslider13, "0", "");
		ui_interface->declare(&fslider13, "style", "knob");
		ui_interface->declare(&fslider13, "tooltip", "Amount of   high-frequency boost or cut in decibels");
		ui_interface->declare(&fslider13, "unit", "dB");
		ui_interface->addHorizontalSlider("High Boost|Cut", &fslider13, 0.0f, -40.0f, 40.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider2, "1", "");
		ui_interface->declare(&fslider2, "scale", "log");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Transition-frequency from boost (cut) to unity gain");
		ui_interface->declare(&fslider2, "unit", "Hz");
		ui_interface->addHorizontalSlider("Transition Frequency", &fslider2, 8000.0f, 20.0f, 10000.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 20 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph19, "0", "");
		ui_interface->declare(&fbargraph19, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph19, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154572490", &fbargraph19, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph18, "1", "");
		ui_interface->declare(&fbargraph18, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph18, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154567ef0", &fbargraph18, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph17, "2", "");
		ui_interface->declare(&fbargraph17, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154554690", &fbargraph17, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph16, "3", "");
		ui_interface->declare(&fbargraph16, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154540e20", &fbargraph16, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph15, "4", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f815452d5d0", &fbargraph15, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph14, "5", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154519d80", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "6", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154506550", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "7", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544eedc0", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "8", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544db650", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "9", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544c7f60", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "10", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544b4890", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "11", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544a11e0", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "12", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f815448db40", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "13", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f815447a4a0", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "14", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154466e40", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "15", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f81544537e0", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "16", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154440180", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "17", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f815442cbc0", &fbargraph2, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph1, "18", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154419890", &fbargraph1, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph0, "19", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7f8154405820", &fbargraph0, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst1 / float(fslider1))));
		float 	fSlow2 = (1.0f - fSlow1);
		float 	fSlow3 = tanf((fConst14 * float(fslider2)));
		float 	fSlow4 = (1.0f / fSlow3);
		float 	fSlow5 = (1.0f / (((fSlow4 + 1.0000000000000002f) / fSlow3) + 1));
		float 	fSlow6 = (fSlow4 + 1);
		float 	fSlow7 = (0 - ((1 - fSlow4) / fSlow6));
		float 	fSlow8 = (1.0f / fSlow6);
		float 	fSlow9 = tanf((fConst14 * float(fslider3)));
		float 	fSlow10 = (1.0f / fSlow9);
		float 	fSlow11 = (1.0f / (((fSlow10 + 1.0000000000000002f) / fSlow9) + 1));
		float 	fSlow12 = (1.0f / faustpower<2>(fSlow9));
		float 	fSlow13 = (2 * (0 - fSlow12));
		float 	fSlow14 = (fSlow10 + 1);
		float 	fSlow15 = (0 - ((1 - fSlow10) / fSlow14));
		float 	fSlow16 = (1.0f / fSlow14);
		float 	fSlow17 = (0 - fSlow10);
		float 	fSlow18 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider4))));
		int 	iSlow19 = int(float(fcheckbox0));
		int 	iSlow20 = int(float(fcheckbox1));
		int 	iSlow21 = int(float(fcheckbox2));
		int 	iSlow22 = int((float(fentry0) + -1));
		int 	iSlow23 = int((iSlow22 >= 2));
		int 	iSlow24 = int((iSlow22 >= 3));
		float 	fSlow25 = expf((0 - (fConst17 / float(fslider6))));
		float 	fSlow26 = (440.0f * (powf(2.0f,(0.083333333333333329f * (float(fslider5) + -49.0f))) * (1.0f - fSlow25)));
		int 	iSlow27 = int((iSlow22 >= 1));
		float 	fSlow28 = ((0.01f * float(fslider7)) + 1);
		float 	fSlow29 = ((0.01f * float(fslider8)) + 1);
		float 	fSlow30 = (((fSlow10 + -1.0000000000000002f) / fSlow9) + 1);
		float 	fSlow31 = (2 * (1 - fSlow12));
		float 	fSlow32 = powf(10,(0.050000000000000003f * float(fslider9)));
		float 	fSlow33 = (0.0010000000000000009f * float(fslider10));
		float 	fSlow34 = float(fslider11);
		int 	iSlow35 = int((fSlow34 > 0));
		float 	fSlow36 = float(fslider12);
		float 	fSlow37 = (fConst22 / fSlow36);
		float 	fSlow38 = (fConst22 * (powf(10,(0.050000000000000003f * fabsf(fSlow34))) / fSlow36));
		float 	fSlow39 = (1.0f / faustpower<2>(fSlow3));
		float 	fSlow40 = (2 * (1 - fSlow39));
		float 	fSlow41 = (((fSlow4 + -1.0000000000000002f) / fSlow3) + 1);
		float 	fSlow42 = powf(10,(0.050000000000000003f * float(fslider13)));
		float 	fSlow43 = (2 * (0 - fSlow39));
		float 	fSlow44 = (0 - fSlow4);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec9[0] = (fSlow18 + (0.999f * fRec9[1]));
			iRec11[0] = ((1103515245 * iRec11[1]) + 12345);
			fTempPerm0 = (4.6566128752457969e-10f * iRec11[0]);
			fRec10[0] = (((0.52218940000000003f * fRec10[3]) + (fTempPerm0 + (2.4949560019999999f * fRec10[1]))) - (2.0172658750000001f * fRec10[2]));
			fRec13[0] = (fSlow26 + (fSlow25 * fRec13[1]));
			fTempPerm1 = max(20.0f, fabsf(fRec13[0]));
			fVec1[0] = fTempPerm1;
			fTempPerm2 = (fRec12[1] + (fConst17 * fVec1[1]));
			fRec12[0] = (fTempPerm2 - floorf(fTempPerm2));
			fTempPerm3 = (2 * fRec12[0]);
			fTempPerm4 = (fTempPerm3 + -1);
			fTempPerm5 = faustpower<2>(fTempPerm4);
			fVec2[0] = fTempPerm5;
			fTempPerm6 = (fVec2[0] * (fVec2[0] + -2.0f));
			fVec3[0] = fTempPerm6;
			fTempPerm7 = ((fVec3[0] - fVec3[1]) / fVec1[0]);
			fVec4[0] = fTempPerm7;
			fTempPerm8 = ((fVec4[0] - fVec4[1]) / fVec1[0]);
			fVec5[0] = fTempPerm8;
			fTempPerm9 = faustpower<3>(fTempPerm4);
			fVec6[0] = (fTempPerm9 + (1 - fTempPerm3));
			fTempPerm10 = ((fTempPerm9 + (1 - (fTempPerm3 + fVec6[1]))) / fVec1[0]);
			fVec7[0] = fTempPerm10;
			fTempPerm11 = max(20.0f, fabsf((fSlow28 * fRec13[0])));
			fVec8[0] = fTempPerm11;
			fTempPerm12 = (fRec14[1] + (fConst17 * fVec8[1]));
			fRec14[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = (2 * fRec14[0]);
			fTempPerm14 = (fTempPerm13 + -1);
			fTempPerm15 = faustpower<2>(fTempPerm14);
			fVec9[0] = fTempPerm15;
			fTempPerm16 = (fVec9[0] * (fVec9[0] + -2.0f));
			fVec10[0] = fTempPerm16;
			fTempPerm17 = ((fVec10[0] - fVec10[1]) / fVec8[0]);
			fVec11[0] = fTempPerm17;
			fTempPerm18 = ((fVec11[0] - fVec11[1]) / fVec8[0]);
			fVec12[0] = fTempPerm18;
			fTempPerm19 = faustpower<3>(fTempPerm14);
			fVec13[0] = (fTempPerm19 + (1 - fTempPerm13));
			fTempPerm20 = ((fTempPerm19 + (1 - (fTempPerm13 + fVec13[1]))) / fVec8[0]);
			fVec14[0] = fTempPerm20;
			fTempPerm21 = max(20.0f, fabsf((fSlow29 * fRec13[0])));
			fVec15[0] = fTempPerm21;
			fTempPerm22 = (fRec15[1] + (fConst17 * fVec15[1]));
			fRec15[0] = (fTempPerm22 - floorf(fTempPerm22));
			fTempPerm23 = (2 * fRec15[0]);
			fTempPerm24 = (fTempPerm23 + -1);
			fTempPerm25 = faustpower<2>(fTempPerm24);
			fVec16[0] = fTempPerm25;
			fTempPerm26 = (fVec16[0] * (fVec16[0] + -2.0f));
			fVec17[0] = fTempPerm26;
			fTempPerm27 = ((fVec17[0] - fVec17[1]) / fVec15[0]);
			fVec18[0] = fTempPerm27;
			fTempPerm28 = ((fVec18[0] - fVec18[1]) / fVec15[0]);
			fVec19[0] = fTempPerm28;
			fTempPerm29 = faustpower<3>(fTempPerm24);
			fVec20[0] = (fTempPerm29 + (1 - fTempPerm23));
			fTempPerm30 = ((fTempPerm29 + (1 - (fTempPerm23 + fVec20[1]))) / fVec15[0]);
			fVec21[0] = fTempPerm30;
			fTempPerm31 = (fRec9[0] * ((iSlow19)?(float)input0[i]:((iSlow20)?((iSlow21)?(((0.049922034999999997f * fRec10[0]) + (0.050612698999999997f * fRec10[2])) - ((0.095993537000000004f * fRec10[1]) + (0.0044087859999999996f * fRec10[3]))):fTempPerm0):(0.33333333333333331f * (fRec9[0] * ((((iSlow23)?((iSlow24)?(fConst16 * ((iVec0[3] * (fVec5[0] - fVec5[1])) / fVec1[0])):(fConst18 * ((iVec0[2] * (fVec7[0] - fVec7[1])) / fVec1[0]))):((iSlow27)?(fConst19 * ((iVec0[1] * (fVec2[0] - fVec2[1])) / fVec1[0])):fTempPerm4)) + ((iSlow23)?((iSlow24)?(fConst16 * ((iVec0[3] * (fVec12[0] - fVec12[1])) / fVec8[0])):(fConst18 * ((iVec0[2] * (fVec14[0] - fVec14[1])) / fVec8[0]))):((iSlow27)?(fConst19 * ((iVec0[1] * (fVec9[0] - fVec9[1])) / fVec8[0])):fTempPerm14))) + ((iSlow23)?((iSlow24)?(fConst16 * ((iVec0[3] * (fVec19[0] - fVec19[1])) / fVec15[0])):(fConst18 * ((iVec0[2] * (fVec21[0] - fVec21[1])) / fVec15[0]))):((iSlow27)?(fConst19 * ((iVec0[1] * (fVec16[0] - fVec16[1])) / fVec15[0])):fTempPerm24))))))));
			fVec22[0] = fTempPerm31;
			fRec8[0] = ((fSlow15 * fRec8[1]) + (fSlow16 * ((fSlow17 * fVec22[1]) + (fSlow10 * fVec22[0]))));
			fRec7[0] = (fRec8[0] - (fSlow11 * ((fSlow30 * fRec7[2]) + (fSlow31 * fRec7[1]))));
			fRec17[0] = ((fSlow15 * fRec17[1]) + (fSlow16 * (fVec22[0] + fVec22[1])));
			fRec16[0] = (fRec17[0] - (fSlow11 * ((fSlow31 * fRec16[1]) + (fSlow30 * fRec16[2]))));
			fRec18[0] = (fSlow33 + (0.999f * fRec18[1]));
			fTempPerm32 = powf(2.0f,(0.083333333333333329f * (fRec18[0] + -49.0f)));
			fTempPerm33 = tanf((fConst20 * fTempPerm32));
			fTempPerm34 = (1.0f / fTempPerm33);
			fTempPerm35 = (fTempPerm32 / sinf((fConst23 * fTempPerm32)));
			fTempPerm36 = (fSlow37 * fTempPerm35);
			fTempPerm37 = (fSlow38 * fTempPerm35);
			fTempPerm38 = ((iSlow35)?fTempPerm36:fTempPerm37);
			fTempPerm39 = (2 * (fRec6[1] * (1 - (1.0f / faustpower<2>(fTempPerm33)))));
			fTempPerm40 = (((fTempPerm34 + fTempPerm38) / fTempPerm33) + 1);
			fRec6[0] = ((fSlow11 * ((((fSlow13 * fRec7[1]) + (fSlow12 * fRec7[0])) + (fSlow12 * fRec7[2])) + (fSlow32 * (fRec16[2] + (fRec16[0] + (2.0f * fRec16[1])))))) - (((fRec6[2] * (((fTempPerm34 - fTempPerm38) / fTempPerm33) + 1)) + fTempPerm39) / fTempPerm40));
			fTempPerm41 = ((iSlow35)?fTempPerm37:fTempPerm36);
			fTempPerm42 = (((fTempPerm39 + (fRec6[0] * (((fTempPerm34 + fTempPerm41) / fTempPerm33) + 1))) + (fRec6[2] * (((fTempPerm34 - fTempPerm41) / fTempPerm33) + 1))) / fTempPerm40);
			fVec23[0] = fTempPerm42;
			fRec5[0] = ((fSlow7 * fRec5[1]) + (fSlow8 * (fVec23[0] + fVec23[1])));
			fRec4[0] = (fRec5[0] - (fSlow5 * ((fSlow40 * fRec4[1]) + (fSlow41 * fRec4[2]))));
			fRec20[0] = ((fSlow7 * fRec20[1]) + (fSlow8 * ((fSlow44 * fVec23[1]) + (fSlow4 * fVec23[0]))));
			fRec19[0] = (fRec20[0] - (fSlow5 * ((fSlow41 * fRec19[2]) + (fSlow40 * fRec19[1]))));
			fTempPerm43 = (fSlow5 * ((fRec4[2] + (fRec4[0] + (2.0f * fRec4[1]))) + (fSlow42 * (((fSlow43 * fRec19[1]) + (fSlow39 * fRec19[0])) + (fSlow39 * fRec19[2])))));
			fRec3[0] = (fTempPerm43 - (fConst11 * ((fConst24 * fRec3[2]) + (fConst26 * fRec3[1]))));
			fRec2[0] = ((fConst11 * (((fConst13 * fRec3[1]) + (fConst27 * fRec3[0])) + (fConst27 * fRec3[2]))) - (fConst8 * ((fConst28 * fRec2[2]) + (fConst29 * fRec2[1]))));
			fRec1[0] = ((fConst8 * (((fConst10 * fRec2[1]) + (fConst30 * fRec2[0])) + (fConst30 * fRec2[2]))) - (fConst4 * ((fConst31 * fRec1[2]) + (fConst32 * fRec1[1]))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * fabsf((fConst4 * (((fConst7 * fRec1[1]) + (fConst33 * fRec1[0])) + (fConst33 * fRec1[2]))))));
			fbargraph0 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec0[0]))));
			fRec27[0] = (fTempPerm43 - (fConst50 * ((fConst53 * fRec27[2]) + (fConst54 * fRec27[1]))));
			fRec26[0] = ((fConst50 * (((fConst52 * fRec27[1]) + (fConst55 * fRec27[0])) + (fConst55 * fRec27[2]))) - (fConst48 * ((fConst56 * fRec26[2]) + (fConst57 * fRec26[1]))));
			fRec25[0] = ((fConst48 * (((fConst49 * fRec26[1]) + (fConst58 * fRec26[0])) + (fConst58 * fRec26[2]))) - (fConst46 * ((fConst59 * fRec25[2]) + (fConst60 * fRec25[1]))));
			fTempPerm44 = (fConst46 * (((fConst47 * fRec25[1]) + (fConst61 * fRec25[0])) + (fConst61 * fRec25[2])));
			fRec24[0] = (fTempPerm44 - (fConst43 * ((fConst62 * fRec24[2]) + (fConst64 * fRec24[1]))));
			fRec23[0] = ((fConst43 * (((fConst45 * fRec24[1]) + (fConst65 * fRec24[0])) + (fConst65 * fRec24[2]))) - (fConst40 * ((fConst66 * fRec23[2]) + (fConst67 * fRec23[1]))));
			fRec22[0] = ((fConst40 * (((fConst42 * fRec23[1]) + (fConst68 * fRec23[0])) + (fConst68 * fRec23[2]))) - (fConst36 * ((fConst69 * fRec22[2]) + (fConst70 * fRec22[1]))));
			fRec21[0] = ((fSlow1 * fRec21[1]) + (fSlow2 * fabsf((fConst36 * (((fConst39 * fRec22[1]) + (fConst71 * fRec22[0])) + (fConst71 * fRec22[2]))))));
			fbargraph1 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec21[0]))));
			fRec34[0] = (fTempPerm44 - (fConst88 * ((fConst91 * fRec34[2]) + (fConst92 * fRec34[1]))));
			fRec33[0] = ((fConst88 * (((fConst90 * fRec34[1]) + (fConst93 * fRec34[0])) + (fConst93 * fRec34[2]))) - (fConst86 * ((fConst94 * fRec33[2]) + (fConst95 * fRec33[1]))));
			fRec32[0] = ((fConst86 * (((fConst87 * fRec33[1]) + (fConst96 * fRec33[0])) + (fConst96 * fRec33[2]))) - (fConst84 * ((fConst97 * fRec32[2]) + (fConst98 * fRec32[1]))));
			fTempPerm45 = (fConst84 * (((fConst85 * fRec32[1]) + (fConst99 * fRec32[0])) + (fConst99 * fRec32[2])));
			fRec31[0] = (fTempPerm45 - (fConst81 * ((fConst100 * fRec31[2]) + (fConst102 * fRec31[1]))));
			fRec30[0] = ((fConst81 * (((fConst83 * fRec31[1]) + (fConst103 * fRec31[0])) + (fConst103 * fRec31[2]))) - (fConst78 * ((fConst104 * fRec30[2]) + (fConst105 * fRec30[1]))));
			fRec29[0] = ((fConst78 * (((fConst80 * fRec30[1]) + (fConst106 * fRec30[0])) + (fConst106 * fRec30[2]))) - (fConst74 * ((fConst107 * fRec29[2]) + (fConst108 * fRec29[1]))));
			fRec28[0] = ((fSlow1 * fRec28[1]) + (fSlow2 * fabsf((fConst74 * (((fConst77 * fRec29[1]) + (fConst109 * fRec29[0])) + (fConst109 * fRec29[2]))))));
			fbargraph2 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec28[0]))));
			fRec41[0] = (fTempPerm45 - (fConst126 * ((fConst129 * fRec41[2]) + (fConst130 * fRec41[1]))));
			fRec40[0] = ((fConst126 * (((fConst128 * fRec41[1]) + (fConst131 * fRec41[0])) + (fConst131 * fRec41[2]))) - (fConst124 * ((fConst132 * fRec40[2]) + (fConst133 * fRec40[1]))));
			fRec39[0] = ((fConst124 * (((fConst125 * fRec40[1]) + (fConst134 * fRec40[0])) + (fConst134 * fRec40[2]))) - (fConst122 * ((fConst135 * fRec39[2]) + (fConst136 * fRec39[1]))));
			fTempPerm46 = (fConst122 * (((fConst123 * fRec39[1]) + (fConst137 * fRec39[0])) + (fConst137 * fRec39[2])));
			fRec38[0] = (fTempPerm46 - (fConst119 * ((fConst138 * fRec38[2]) + (fConst140 * fRec38[1]))));
			fRec37[0] = ((fConst119 * (((fConst121 * fRec38[1]) + (fConst141 * fRec38[0])) + (fConst141 * fRec38[2]))) - (fConst116 * ((fConst142 * fRec37[2]) + (fConst143 * fRec37[1]))));
			fRec36[0] = ((fConst116 * (((fConst118 * fRec37[1]) + (fConst144 * fRec37[0])) + (fConst144 * fRec37[2]))) - (fConst112 * ((fConst145 * fRec36[2]) + (fConst146 * fRec36[1]))));
			fRec35[0] = ((fSlow1 * fRec35[1]) + (fSlow2 * fabsf((fConst112 * (((fConst115 * fRec36[1]) + (fConst147 * fRec36[0])) + (fConst147 * fRec36[2]))))));
			fbargraph3 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec35[0]))));
			fRec48[0] = (fTempPerm46 - (fConst164 * ((fConst167 * fRec48[2]) + (fConst168 * fRec48[1]))));
			fRec47[0] = ((fConst164 * (((fConst166 * fRec48[1]) + (fConst169 * fRec48[0])) + (fConst169 * fRec48[2]))) - (fConst162 * ((fConst170 * fRec47[2]) + (fConst171 * fRec47[1]))));
			fRec46[0] = ((fConst162 * (((fConst163 * fRec47[1]) + (fConst172 * fRec47[0])) + (fConst172 * fRec47[2]))) - (fConst160 * ((fConst173 * fRec46[2]) + (fConst174 * fRec46[1]))));
			fTempPerm47 = (fConst160 * (((fConst161 * fRec46[1]) + (fConst175 * fRec46[0])) + (fConst175 * fRec46[2])));
			fRec45[0] = (fTempPerm47 - (fConst157 * ((fConst176 * fRec45[2]) + (fConst178 * fRec45[1]))));
			fRec44[0] = ((fConst157 * (((fConst159 * fRec45[1]) + (fConst179 * fRec45[0])) + (fConst179 * fRec45[2]))) - (fConst154 * ((fConst180 * fRec44[2]) + (fConst181 * fRec44[1]))));
			fRec43[0] = ((fConst154 * (((fConst156 * fRec44[1]) + (fConst182 * fRec44[0])) + (fConst182 * fRec44[2]))) - (fConst150 * ((fConst183 * fRec43[2]) + (fConst184 * fRec43[1]))));
			fRec42[0] = ((fSlow1 * fRec42[1]) + (fSlow2 * fabsf((fConst150 * (((fConst153 * fRec43[1]) + (fConst185 * fRec43[0])) + (fConst185 * fRec43[2]))))));
			fbargraph4 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec42[0]))));
			fRec55[0] = (fTempPerm47 - (fConst202 * ((fConst205 * fRec55[2]) + (fConst206 * fRec55[1]))));
			fRec54[0] = ((fConst202 * (((fConst204 * fRec55[1]) + (fConst207 * fRec55[0])) + (fConst207 * fRec55[2]))) - (fConst200 * ((fConst208 * fRec54[2]) + (fConst209 * fRec54[1]))));
			fRec53[0] = ((fConst200 * (((fConst201 * fRec54[1]) + (fConst210 * fRec54[0])) + (fConst210 * fRec54[2]))) - (fConst198 * ((fConst211 * fRec53[2]) + (fConst212 * fRec53[1]))));
			fTempPerm48 = (fConst198 * (((fConst199 * fRec53[1]) + (fConst213 * fRec53[0])) + (fConst213 * fRec53[2])));
			fRec52[0] = (fTempPerm48 - (fConst195 * ((fConst214 * fRec52[2]) + (fConst216 * fRec52[1]))));
			fRec51[0] = ((fConst195 * (((fConst197 * fRec52[1]) + (fConst217 * fRec52[0])) + (fConst217 * fRec52[2]))) - (fConst192 * ((fConst218 * fRec51[2]) + (fConst219 * fRec51[1]))));
			fRec50[0] = ((fConst192 * (((fConst194 * fRec51[1]) + (fConst220 * fRec51[0])) + (fConst220 * fRec51[2]))) - (fConst188 * ((fConst221 * fRec50[2]) + (fConst222 * fRec50[1]))));
			fRec49[0] = ((fSlow1 * fRec49[1]) + (fSlow2 * fabsf((fConst188 * (((fConst191 * fRec50[1]) + (fConst223 * fRec50[0])) + (fConst223 * fRec50[2]))))));
			fbargraph5 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec49[0]))));
			fRec62[0] = (fTempPerm48 - (fConst240 * ((fConst243 * fRec62[2]) + (fConst244 * fRec62[1]))));
			fRec61[0] = ((fConst240 * (((fConst242 * fRec62[1]) + (fConst245 * fRec62[0])) + (fConst245 * fRec62[2]))) - (fConst238 * ((fConst246 * fRec61[2]) + (fConst247 * fRec61[1]))));
			fRec60[0] = ((fConst238 * (((fConst239 * fRec61[1]) + (fConst248 * fRec61[0])) + (fConst248 * fRec61[2]))) - (fConst236 * ((fConst249 * fRec60[2]) + (fConst250 * fRec60[1]))));
			fTempPerm49 = (fConst236 * (((fConst237 * fRec60[1]) + (fConst251 * fRec60[0])) + (fConst251 * fRec60[2])));
			fRec59[0] = (fTempPerm49 - (fConst233 * ((fConst252 * fRec59[2]) + (fConst254 * fRec59[1]))));
			fRec58[0] = ((fConst233 * (((fConst235 * fRec59[1]) + (fConst255 * fRec59[0])) + (fConst255 * fRec59[2]))) - (fConst230 * ((fConst256 * fRec58[2]) + (fConst257 * fRec58[1]))));
			fRec57[0] = ((fConst230 * (((fConst232 * fRec58[1]) + (fConst258 * fRec58[0])) + (fConst258 * fRec58[2]))) - (fConst226 * ((fConst259 * fRec57[2]) + (fConst260 * fRec57[1]))));
			fRec56[0] = ((fSlow1 * fRec56[1]) + (fSlow2 * fabsf((fConst226 * (((fConst229 * fRec57[1]) + (fConst261 * fRec57[0])) + (fConst261 * fRec57[2]))))));
			fbargraph6 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec56[0]))));
			fRec69[0] = (fTempPerm49 - (fConst278 * ((fConst281 * fRec69[2]) + (fConst282 * fRec69[1]))));
			fRec68[0] = ((fConst278 * (((fConst280 * fRec69[1]) + (fConst283 * fRec69[0])) + (fConst283 * fRec69[2]))) - (fConst276 * ((fConst284 * fRec68[2]) + (fConst285 * fRec68[1]))));
			fRec67[0] = ((fConst276 * (((fConst277 * fRec68[1]) + (fConst286 * fRec68[0])) + (fConst286 * fRec68[2]))) - (fConst274 * ((fConst287 * fRec67[2]) + (fConst288 * fRec67[1]))));
			fTempPerm50 = (fConst274 * (((fConst275 * fRec67[1]) + (fConst289 * fRec67[0])) + (fConst289 * fRec67[2])));
			fRec66[0] = (fTempPerm50 - (fConst271 * ((fConst290 * fRec66[2]) + (fConst292 * fRec66[1]))));
			fRec65[0] = ((fConst271 * (((fConst273 * fRec66[1]) + (fConst293 * fRec66[0])) + (fConst293 * fRec66[2]))) - (fConst268 * ((fConst294 * fRec65[2]) + (fConst295 * fRec65[1]))));
			fRec64[0] = ((fConst268 * (((fConst270 * fRec65[1]) + (fConst296 * fRec65[0])) + (fConst296 * fRec65[2]))) - (fConst264 * ((fConst297 * fRec64[2]) + (fConst298 * fRec64[1]))));
			fRec63[0] = ((fSlow1 * fRec63[1]) + (fSlow2 * fabsf((fConst264 * (((fConst267 * fRec64[1]) + (fConst299 * fRec64[0])) + (fConst299 * fRec64[2]))))));
			fbargraph7 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec63[0]))));
			fRec76[0] = (fTempPerm50 - (fConst316 * ((fConst319 * fRec76[2]) + (fConst320 * fRec76[1]))));
			fRec75[0] = ((fConst316 * (((fConst318 * fRec76[1]) + (fConst321 * fRec76[0])) + (fConst321 * fRec76[2]))) - (fConst314 * ((fConst322 * fRec75[2]) + (fConst323 * fRec75[1]))));
			fRec74[0] = ((fConst314 * (((fConst315 * fRec75[1]) + (fConst324 * fRec75[0])) + (fConst324 * fRec75[2]))) - (fConst312 * ((fConst325 * fRec74[2]) + (fConst326 * fRec74[1]))));
			fTempPerm51 = (fConst312 * (((fConst313 * fRec74[1]) + (fConst327 * fRec74[0])) + (fConst327 * fRec74[2])));
			fRec73[0] = (fTempPerm51 - (fConst309 * ((fConst328 * fRec73[2]) + (fConst330 * fRec73[1]))));
			fRec72[0] = ((fConst309 * (((fConst311 * fRec73[1]) + (fConst331 * fRec73[0])) + (fConst331 * fRec73[2]))) - (fConst306 * ((fConst332 * fRec72[2]) + (fConst333 * fRec72[1]))));
			fRec71[0] = ((fConst306 * (((fConst308 * fRec72[1]) + (fConst334 * fRec72[0])) + (fConst334 * fRec72[2]))) - (fConst302 * ((fConst335 * fRec71[2]) + (fConst336 * fRec71[1]))));
			fRec70[0] = ((fSlow1 * fRec70[1]) + (fSlow2 * fabsf((fConst302 * (((fConst305 * fRec71[1]) + (fConst337 * fRec71[0])) + (fConst337 * fRec71[2]))))));
			fbargraph8 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec70[0]))));
			fRec83[0] = (fTempPerm51 - (fConst354 * ((fConst357 * fRec83[2]) + (fConst358 * fRec83[1]))));
			fRec82[0] = ((fConst354 * (((fConst356 * fRec83[1]) + (fConst359 * fRec83[0])) + (fConst359 * fRec83[2]))) - (fConst352 * ((fConst360 * fRec82[2]) + (fConst361 * fRec82[1]))));
			fRec81[0] = ((fConst352 * (((fConst353 * fRec82[1]) + (fConst362 * fRec82[0])) + (fConst362 * fRec82[2]))) - (fConst350 * ((fConst363 * fRec81[2]) + (fConst364 * fRec81[1]))));
			fTempPerm52 = (fConst350 * (((fConst351 * fRec81[1]) + (fConst365 * fRec81[0])) + (fConst365 * fRec81[2])));
			fRec80[0] = (fTempPerm52 - (fConst347 * ((fConst366 * fRec80[2]) + (fConst368 * fRec80[1]))));
			fRec79[0] = ((fConst347 * (((fConst349 * fRec80[1]) + (fConst369 * fRec80[0])) + (fConst369 * fRec80[2]))) - (fConst344 * ((fConst370 * fRec79[2]) + (fConst371 * fRec79[1]))));
			fRec78[0] = ((fConst344 * (((fConst346 * fRec79[1]) + (fConst372 * fRec79[0])) + (fConst372 * fRec79[2]))) - (fConst340 * ((fConst373 * fRec78[2]) + (fConst374 * fRec78[1]))));
			fRec77[0] = ((fSlow1 * fRec77[1]) + (fSlow2 * fabsf((fConst340 * (((fConst343 * fRec78[1]) + (fConst375 * fRec78[0])) + (fConst375 * fRec78[2]))))));
			fbargraph9 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec77[0]))));
			fRec90[0] = (fTempPerm52 - (fConst392 * ((fConst395 * fRec90[2]) + (fConst396 * fRec90[1]))));
			fRec89[0] = ((fConst392 * (((fConst394 * fRec90[1]) + (fConst397 * fRec90[0])) + (fConst397 * fRec90[2]))) - (fConst390 * ((fConst398 * fRec89[2]) + (fConst399 * fRec89[1]))));
			fRec88[0] = ((fConst390 * (((fConst391 * fRec89[1]) + (fConst400 * fRec89[0])) + (fConst400 * fRec89[2]))) - (fConst388 * ((fConst401 * fRec88[2]) + (fConst402 * fRec88[1]))));
			fTempPerm53 = (fConst388 * (((fConst389 * fRec88[1]) + (fConst403 * fRec88[0])) + (fConst403 * fRec88[2])));
			fRec87[0] = (fTempPerm53 - (fConst385 * ((fConst404 * fRec87[2]) + (fConst406 * fRec87[1]))));
			fRec86[0] = ((fConst385 * (((fConst387 * fRec87[1]) + (fConst407 * fRec87[0])) + (fConst407 * fRec87[2]))) - (fConst382 * ((fConst408 * fRec86[2]) + (fConst409 * fRec86[1]))));
			fRec85[0] = ((fConst382 * (((fConst384 * fRec86[1]) + (fConst410 * fRec86[0])) + (fConst410 * fRec86[2]))) - (fConst378 * ((fConst411 * fRec85[2]) + (fConst412 * fRec85[1]))));
			fRec84[0] = ((fSlow1 * fRec84[1]) + (fSlow2 * fabsf((fConst378 * (((fConst381 * fRec85[1]) + (fConst413 * fRec85[0])) + (fConst413 * fRec85[2]))))));
			fbargraph10 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec84[0]))));
			fRec97[0] = (fTempPerm53 - (fConst430 * ((fConst433 * fRec97[2]) + (fConst434 * fRec97[1]))));
			fRec96[0] = ((fConst430 * (((fConst432 * fRec97[1]) + (fConst435 * fRec97[0])) + (fConst435 * fRec97[2]))) - (fConst428 * ((fConst436 * fRec96[2]) + (fConst437 * fRec96[1]))));
			fRec95[0] = ((fConst428 * (((fConst429 * fRec96[1]) + (fConst438 * fRec96[0])) + (fConst438 * fRec96[2]))) - (fConst426 * ((fConst439 * fRec95[2]) + (fConst440 * fRec95[1]))));
			fTempPerm54 = (fConst426 * (((fConst427 * fRec95[1]) + (fConst441 * fRec95[0])) + (fConst441 * fRec95[2])));
			fRec94[0] = (fTempPerm54 - (fConst423 * ((fConst442 * fRec94[2]) + (fConst444 * fRec94[1]))));
			fRec93[0] = ((fConst423 * (((fConst425 * fRec94[1]) + (fConst445 * fRec94[0])) + (fConst445 * fRec94[2]))) - (fConst420 * ((fConst446 * fRec93[2]) + (fConst447 * fRec93[1]))));
			fRec92[0] = ((fConst420 * (((fConst422 * fRec93[1]) + (fConst448 * fRec93[0])) + (fConst448 * fRec93[2]))) - (fConst416 * ((fConst449 * fRec92[2]) + (fConst450 * fRec92[1]))));
			fRec91[0] = ((fSlow1 * fRec91[1]) + (fSlow2 * fabsf((fConst416 * (((fConst419 * fRec92[1]) + (fConst451 * fRec92[0])) + (fConst451 * fRec92[2]))))));
			fbargraph11 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec91[0]))));
			fRec104[0] = (fTempPerm54 - (fConst468 * ((fConst471 * fRec104[2]) + (fConst472 * fRec104[1]))));
			fRec103[0] = ((fConst468 * (((fConst470 * fRec104[1]) + (fConst473 * fRec104[0])) + (fConst473 * fRec104[2]))) - (fConst466 * ((fConst474 * fRec103[2]) + (fConst475 * fRec103[1]))));
			fRec102[0] = ((fConst466 * (((fConst467 * fRec103[1]) + (fConst476 * fRec103[0])) + (fConst476 * fRec103[2]))) - (fConst464 * ((fConst477 * fRec102[2]) + (fConst478 * fRec102[1]))));
			fTempPerm55 = (fConst464 * (((fConst465 * fRec102[1]) + (fConst479 * fRec102[0])) + (fConst479 * fRec102[2])));
			fRec101[0] = (fTempPerm55 - (fConst461 * ((fConst480 * fRec101[2]) + (fConst482 * fRec101[1]))));
			fRec100[0] = ((fConst461 * (((fConst463 * fRec101[1]) + (fConst483 * fRec101[0])) + (fConst483 * fRec101[2]))) - (fConst458 * ((fConst484 * fRec100[2]) + (fConst485 * fRec100[1]))));
			fRec99[0] = ((fConst458 * (((fConst460 * fRec100[1]) + (fConst486 * fRec100[0])) + (fConst486 * fRec100[2]))) - (fConst454 * ((fConst487 * fRec99[2]) + (fConst488 * fRec99[1]))));
			fRec98[0] = ((fSlow1 * fRec98[1]) + (fSlow2 * fabsf((fConst454 * (((fConst457 * fRec99[1]) + (fConst489 * fRec99[0])) + (fConst489 * fRec99[2]))))));
			fbargraph12 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec98[0]))));
			fRec111[0] = (fTempPerm55 - (fConst506 * ((fConst509 * fRec111[2]) + (fConst510 * fRec111[1]))));
			fRec110[0] = ((fConst506 * (((fConst508 * fRec111[1]) + (fConst511 * fRec111[0])) + (fConst511 * fRec111[2]))) - (fConst504 * ((fConst512 * fRec110[2]) + (fConst513 * fRec110[1]))));
			fRec109[0] = ((fConst504 * (((fConst505 * fRec110[1]) + (fConst514 * fRec110[0])) + (fConst514 * fRec110[2]))) - (fConst502 * ((fConst515 * fRec109[2]) + (fConst516 * fRec109[1]))));
			fTempPerm56 = (fConst502 * (((fConst503 * fRec109[1]) + (fConst517 * fRec109[0])) + (fConst517 * fRec109[2])));
			fRec108[0] = (fTempPerm56 - (fConst499 * ((fConst518 * fRec108[2]) + (fConst520 * fRec108[1]))));
			fRec107[0] = ((fConst499 * (((fConst501 * fRec108[1]) + (fConst521 * fRec108[0])) + (fConst521 * fRec108[2]))) - (fConst496 * ((fConst522 * fRec107[2]) + (fConst523 * fRec107[1]))));
			fRec106[0] = ((fConst496 * (((fConst498 * fRec107[1]) + (fConst524 * fRec107[0])) + (fConst524 * fRec107[2]))) - (fConst492 * ((fConst525 * fRec106[2]) + (fConst526 * fRec106[1]))));
			fRec105[0] = ((fSlow1 * fRec105[1]) + (fSlow2 * fabsf((fConst492 * (((fConst495 * fRec106[1]) + (fConst527 * fRec106[0])) + (fConst527 * fRec106[2]))))));
			fbargraph13 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec105[0]))));
			fRec118[0] = (fTempPerm56 - (fConst544 * ((fConst547 * fRec118[2]) + (fConst548 * fRec118[1]))));
			fRec117[0] = ((fConst544 * (((fConst546 * fRec118[1]) + (fConst549 * fRec118[0])) + (fConst549 * fRec118[2]))) - (fConst542 * ((fConst550 * fRec117[2]) + (fConst551 * fRec117[1]))));
			fRec116[0] = ((fConst542 * (((fConst543 * fRec117[1]) + (fConst552 * fRec117[0])) + (fConst552 * fRec117[2]))) - (fConst540 * ((fConst553 * fRec116[2]) + (fConst554 * fRec116[1]))));
			fTempPerm57 = (fConst540 * (((fConst541 * fRec116[1]) + (fConst555 * fRec116[0])) + (fConst555 * fRec116[2])));
			fRec115[0] = (fTempPerm57 - (fConst537 * ((fConst556 * fRec115[2]) + (fConst558 * fRec115[1]))));
			fRec114[0] = ((fConst537 * (((fConst539 * fRec115[1]) + (fConst559 * fRec115[0])) + (fConst559 * fRec115[2]))) - (fConst534 * ((fConst560 * fRec114[2]) + (fConst561 * fRec114[1]))));
			fRec113[0] = ((fConst534 * (((fConst536 * fRec114[1]) + (fConst562 * fRec114[0])) + (fConst562 * fRec114[2]))) - (fConst530 * ((fConst563 * fRec113[2]) + (fConst564 * fRec113[1]))));
			fRec112[0] = ((fSlow1 * fRec112[1]) + (fSlow2 * fabsf((fConst530 * (((fConst533 * fRec113[1]) + (fConst565 * fRec113[0])) + (fConst565 * fRec113[2]))))));
			fbargraph14 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec112[0]))));
			fRec125[0] = (fTempPerm57 - (fConst582 * ((fConst585 * fRec125[2]) + (fConst586 * fRec125[1]))));
			fRec124[0] = ((fConst582 * (((fConst584 * fRec125[1]) + (fConst587 * fRec125[0])) + (fConst587 * fRec125[2]))) - (fConst580 * ((fConst588 * fRec124[2]) + (fConst589 * fRec124[1]))));
			fRec123[0] = ((fConst580 * (((fConst581 * fRec124[1]) + (fConst590 * fRec124[0])) + (fConst590 * fRec124[2]))) - (fConst578 * ((fConst591 * fRec123[2]) + (fConst592 * fRec123[1]))));
			fTempPerm58 = (fConst578 * (((fConst579 * fRec123[1]) + (fConst593 * fRec123[0])) + (fConst593 * fRec123[2])));
			fRec122[0] = (fTempPerm58 - (fConst575 * ((fConst594 * fRec122[2]) + (fConst596 * fRec122[1]))));
			fRec121[0] = ((fConst575 * (((fConst577 * fRec122[1]) + (fConst597 * fRec122[0])) + (fConst597 * fRec122[2]))) - (fConst572 * ((fConst598 * fRec121[2]) + (fConst599 * fRec121[1]))));
			fRec120[0] = ((fConst572 * (((fConst574 * fRec121[1]) + (fConst600 * fRec121[0])) + (fConst600 * fRec121[2]))) - (fConst568 * ((fConst601 * fRec120[2]) + (fConst602 * fRec120[1]))));
			fRec119[0] = ((fSlow1 * fRec119[1]) + (fSlow2 * fabsf((fConst568 * (((fConst571 * fRec120[1]) + (fConst603 * fRec120[0])) + (fConst603 * fRec120[2]))))));
			fbargraph15 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec119[0]))));
			fRec132[0] = (fTempPerm58 - (fConst620 * ((fConst623 * fRec132[2]) + (fConst624 * fRec132[1]))));
			fRec131[0] = ((fConst620 * (((fConst622 * fRec132[1]) + (fConst625 * fRec132[0])) + (fConst625 * fRec132[2]))) - (fConst618 * ((fConst626 * fRec131[2]) + (fConst627 * fRec131[1]))));
			fRec130[0] = ((fConst618 * (((fConst619 * fRec131[1]) + (fConst628 * fRec131[0])) + (fConst628 * fRec131[2]))) - (fConst616 * ((fConst629 * fRec130[2]) + (fConst630 * fRec130[1]))));
			fTempPerm59 = (fConst616 * (((fConst617 * fRec130[1]) + (fConst631 * fRec130[0])) + (fConst631 * fRec130[2])));
			fRec129[0] = (fTempPerm59 - (fConst613 * ((fConst632 * fRec129[2]) + (fConst634 * fRec129[1]))));
			fRec128[0] = ((fConst613 * (((fConst615 * fRec129[1]) + (fConst635 * fRec129[0])) + (fConst635 * fRec129[2]))) - (fConst610 * ((fConst636 * fRec128[2]) + (fConst637 * fRec128[1]))));
			fRec127[0] = ((fConst610 * (((fConst612 * fRec128[1]) + (fConst638 * fRec128[0])) + (fConst638 * fRec128[2]))) - (fConst606 * ((fConst639 * fRec127[2]) + (fConst640 * fRec127[1]))));
			fRec126[0] = ((fSlow1 * fRec126[1]) + (fSlow2 * fabsf((fConst606 * (((fConst609 * fRec127[1]) + (fConst641 * fRec127[0])) + (fConst641 * fRec127[2]))))));
			fbargraph16 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec126[0]))));
			fRec139[0] = (fTempPerm59 - (fConst658 * ((fConst661 * fRec139[2]) + (fConst662 * fRec139[1]))));
			fRec138[0] = ((fConst658 * (((fConst660 * fRec139[1]) + (fConst663 * fRec139[0])) + (fConst663 * fRec139[2]))) - (fConst656 * ((fConst664 * fRec138[2]) + (fConst665 * fRec138[1]))));
			fRec137[0] = ((fConst656 * (((fConst657 * fRec138[1]) + (fConst666 * fRec138[0])) + (fConst666 * fRec138[2]))) - (fConst654 * ((fConst667 * fRec137[2]) + (fConst668 * fRec137[1]))));
			fTempPerm60 = (fConst654 * (((fConst655 * fRec137[1]) + (fConst669 * fRec137[0])) + (fConst669 * fRec137[2])));
			fRec136[0] = (fTempPerm60 - (fConst651 * ((fConst670 * fRec136[2]) + (fConst672 * fRec136[1]))));
			fRec135[0] = ((fConst651 * (((fConst653 * fRec136[1]) + (fConst673 * fRec136[0])) + (fConst673 * fRec136[2]))) - (fConst648 * ((fConst674 * fRec135[2]) + (fConst675 * fRec135[1]))));
			fRec134[0] = ((fConst648 * (((fConst650 * fRec135[1]) + (fConst676 * fRec135[0])) + (fConst676 * fRec135[2]))) - (fConst644 * ((fConst677 * fRec134[2]) + (fConst678 * fRec134[1]))));
			fRec133[0] = ((fSlow1 * fRec133[1]) + (fSlow2 * fabsf((fConst644 * (((fConst647 * fRec134[1]) + (fConst679 * fRec134[0])) + (fConst679 * fRec134[2]))))));
			fbargraph17 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec133[0]))));
			fRec146[0] = (fTempPerm60 - (fConst696 * ((fConst699 * fRec146[2]) + (fConst700 * fRec146[1]))));
			fRec145[0] = ((fConst696 * (((fConst698 * fRec146[1]) + (fConst701 * fRec146[0])) + (fConst701 * fRec146[2]))) - (fConst694 * ((fConst702 * fRec145[2]) + (fConst703 * fRec145[1]))));
			fRec144[0] = ((fConst694 * (((fConst695 * fRec145[1]) + (fConst704 * fRec145[0])) + (fConst704 * fRec145[2]))) - (fConst692 * ((fConst705 * fRec144[2]) + (fConst706 * fRec144[1]))));
			fTempPerm61 = (fConst692 * (((fConst693 * fRec144[1]) + (fConst707 * fRec144[0])) + (fConst707 * fRec144[2])));
			fRec143[0] = (fTempPerm61 - (fConst689 * ((fConst708 * fRec143[2]) + (fConst710 * fRec143[1]))));
			fRec142[0] = ((fConst689 * (((fConst691 * fRec143[1]) + (fConst711 * fRec143[0])) + (fConst711 * fRec143[2]))) - (fConst686 * ((fConst712 * fRec142[2]) + (fConst713 * fRec142[1]))));
			fRec141[0] = ((fConst686 * (((fConst688 * fRec142[1]) + (fConst714 * fRec142[0])) + (fConst714 * fRec142[2]))) - (fConst682 * ((fConst715 * fRec141[2]) + (fConst716 * fRec141[1]))));
			fRec140[0] = ((fSlow1 * fRec140[1]) + (fSlow2 * fabsf((fConst682 * (((fConst685 * fRec141[1]) + (fConst717 * fRec141[0])) + (fConst717 * fRec141[2]))))));
			fbargraph18 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec140[0]))));
			fRec150[0] = (fTempPerm61 - (fConst722 * ((fConst725 * fRec150[2]) + (fConst726 * fRec150[1]))));
			fRec149[0] = ((fConst722 * (((fConst724 * fRec150[1]) + (fConst727 * fRec150[0])) + (fConst727 * fRec150[2]))) - (fConst720 * ((fConst728 * fRec149[2]) + (fConst729 * fRec149[1]))));
			fRec148[0] = ((fConst720 * (((fConst721 * fRec149[1]) + (fConst730 * fRec149[0])) + (fConst730 * fRec149[2]))) - (fConst718 * ((fConst731 * fRec148[2]) + (fConst732 * fRec148[1]))));
			fRec147[0] = ((fSlow1 * fRec147[1]) + (fSlow2 * fabsf((fConst718 * (((fConst719 * fRec148[1]) + (fConst733 * fRec148[0])) + (fConst733 * fRec148[2]))))));
			fbargraph19 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec147[0]))));
			fTempPerm62 = fTempPerm43;
			output0[i] = (FAUSTFLOAT)fTempPerm62;
			output1[i] = (FAUSTFLOAT)fTempPerm62;
			// post processing
			fRec147[1] = fRec147[0];
			fRec148[2] = fRec148[1]; fRec148[1] = fRec148[0];
			fRec149[2] = fRec149[1]; fRec149[1] = fRec149[0];
			fRec150[2] = fRec150[1]; fRec150[1] = fRec150[0];
			fRec140[1] = fRec140[0];
			fRec141[2] = fRec141[1]; fRec141[1] = fRec141[0];
			fRec142[2] = fRec142[1]; fRec142[1] = fRec142[0];
			fRec143[2] = fRec143[1]; fRec143[1] = fRec143[0];
			fRec144[2] = fRec144[1]; fRec144[1] = fRec144[0];
			fRec145[2] = fRec145[1]; fRec145[1] = fRec145[0];
			fRec146[2] = fRec146[1]; fRec146[1] = fRec146[0];
			fRec133[1] = fRec133[0];
			fRec134[2] = fRec134[1]; fRec134[1] = fRec134[0];
			fRec135[2] = fRec135[1]; fRec135[1] = fRec135[0];
			fRec136[2] = fRec136[1]; fRec136[1] = fRec136[0];
			fRec137[2] = fRec137[1]; fRec137[1] = fRec137[0];
			fRec138[2] = fRec138[1]; fRec138[1] = fRec138[0];
			fRec139[2] = fRec139[1]; fRec139[1] = fRec139[0];
			fRec126[1] = fRec126[0];
			fRec127[2] = fRec127[1]; fRec127[1] = fRec127[0];
			fRec128[2] = fRec128[1]; fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec130[2] = fRec130[1]; fRec130[1] = fRec130[0];
			fRec131[2] = fRec131[1]; fRec131[1] = fRec131[0];
			fRec132[2] = fRec132[1]; fRec132[1] = fRec132[0];
			fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec124[2] = fRec124[1]; fRec124[1] = fRec124[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec118[2] = fRec118[1]; fRec118[1] = fRec118[0];
			fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec111[2] = fRec111[1]; fRec111[1] = fRec111[0];
			fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec104[2] = fRec104[1]; fRec104[1] = fRec104[0];
			fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec70[1] = fRec70[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec76[2] = fRec76[1]; fRec76[1] = fRec76[0];
			fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec49[1] = fRec49[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
			fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec21[1] = fRec21[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[1] = fRec5[0];
			fVec23[1] = fVec23[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec18[1] = fRec18[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[1] = fRec17[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[1] = fRec8[0];
			fVec22[1] = fVec22[0];
			fVec21[1] = fVec21[0];
			fVec20[1] = fVec20[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			fRec15[1] = fRec15[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			fVec9[1] = fVec9[0];
			fRec14[1] = fRec14[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			fVec6[1] = fVec6[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec12[1] = fRec12[0];
			fVec1[1] = fVec1[0];
			fRec13[1] = fRec13[0];
			for (int i=3; i>0; i--) fRec10[i] = fRec10[i-1];
			iRec11[1] = iRec11[0];
			fRec9[1] = fRec9[0];
			for (int i=3; i>0; i--) iVec0[i] = iVec0[i-1];
		}
	}
};


