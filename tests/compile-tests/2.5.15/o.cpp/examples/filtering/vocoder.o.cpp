//----------------------------------------------------------
// author: "RM"
// name: "Vocoder"
// version: "0.0"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	FAUSTFLOAT 	fslider0;
	FAUSTFLOAT 	fslider1;
	float 	fRec1[2];
	float 	fConst3;
	FAUSTFLOAT 	fslider2;
	float 	fVec0[2];
	float 	fTempPerm0;
	float 	fRec2[2];
	float 	fTempPerm1;
	float 	fConst4;
	float 	fRec0[3];
	float 	fTempPerm2;
	float 	fRec5[3];
	float 	fConst5;
	float 	fTempPerm3;
	float 	fConst6;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fTempPerm4;
	float 	fRec4[2];
	float 	fRec3[2];
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fRec6[3];
	float 	fRec9[3];
	float 	fConst10;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fRec8[2];
	float 	fRec7[2];
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	float 	fRec10[3];
	float 	fRec13[3];
	float 	fConst14;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fRec12[2];
	float 	fRec11[2];
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fRec14[3];
	float 	fRec17[3];
	float 	fConst18;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fRec16[2];
	float 	fRec15[2];
	float 	fConst19;
	float 	fConst20;
	float 	fConst21;
	float 	fRec18[3];
	float 	fRec21[3];
	float 	fConst22;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fRec20[2];
	float 	fRec19[2];
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fRec22[3];
	float 	fRec25[3];
	float 	fConst26;
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fRec24[2];
	float 	fRec23[2];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fRec26[3];
	float 	fRec29[3];
	float 	fConst30;
	float 	fTempPerm15;
	float 	fTempPerm16;
	float 	fRec28[2];
	float 	fRec27[2];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fRec30[3];
	float 	fRec33[3];
	float 	fConst34;
	float 	fTempPerm17;
	float 	fTempPerm18;
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fRec34[3];
	float 	fRec37[3];
	float 	fConst38;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fRec36[2];
	float 	fRec35[2];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fRec38[3];
	float 	fRec41[3];
	float 	fConst42;
	float 	fTempPerm21;
	float 	fTempPerm22;
	float 	fRec40[2];
	float 	fRec39[2];
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fRec42[3];
	float 	fRec45[3];
	float 	fConst46;
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fRec44[2];
	float 	fRec43[2];
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fRec46[3];
	float 	fRec49[3];
	float 	fConst50;
	float 	fTempPerm25;
	float 	fTempPerm26;
	float 	fRec48[2];
	float 	fRec47[2];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fRec50[3];
	float 	fRec53[3];
	float 	fConst54;
	float 	fTempPerm27;
	float 	fTempPerm28;
	float 	fRec52[2];
	float 	fRec51[2];
	float 	fConst55;
	float 	fConst56;
	float 	fConst57;
	float 	fRec54[3];
	float 	fRec57[3];
	float 	fConst58;
	float 	fTempPerm29;
	float 	fTempPerm30;
	float 	fRec56[2];
	float 	fRec55[2];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fRec58[3];
	float 	fRec61[3];
	float 	fConst62;
	float 	fTempPerm31;
	float 	fTempPerm32;
	float 	fRec60[2];
	float 	fRec59[2];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fRec62[3];
	float 	fRec65[3];
	float 	fConst66;
	float 	fTempPerm33;
	float 	fTempPerm34;
	float 	fRec64[2];
	float 	fRec63[2];
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fRec66[3];
	float 	fRec69[3];
	float 	fConst70;
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fRec68[2];
	float 	fRec67[2];
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fRec70[3];
	float 	fRec73[3];
	float 	fConst74;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fRec72[2];
	float 	fRec71[2];
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fRec74[3];
	float 	fRec77[3];
	float 	fConst78;
	float 	fTempPerm39;
	float 	fTempPerm40;
	float 	fRec76[2];
	float 	fRec75[2];
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fRec78[3];
	float 	fRec81[3];
	float 	fConst82;
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fRec80[2];
	float 	fRec79[2];
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fRec82[3];
	float 	fRec85[3];
	float 	fConst86;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fRec84[2];
	float 	fRec83[2];
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fRec86[3];
	float 	fRec89[3];
	float 	fConst90;
	float 	fTempPerm45;
	float 	fTempPerm46;
	float 	fRec88[2];
	float 	fRec87[2];
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fRec90[3];
	float 	fRec93[3];
	float 	fConst94;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fRec92[2];
	float 	fRec91[2];
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fRec94[3];
	float 	fRec97[3];
	float 	fConst98;
	float 	fTempPerm49;
	float 	fTempPerm50;
	float 	fRec96[2];
	float 	fRec95[2];
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fRec98[3];
	float 	fRec101[3];
	float 	fConst102;
	float 	fTempPerm51;
	float 	fTempPerm52;
	float 	fRec100[2];
	float 	fRec99[2];
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fRec102[3];
	float 	fRec105[3];
	float 	fConst106;
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fRec104[2];
	float 	fRec103[2];
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fRec106[3];
	float 	fRec109[3];
	float 	fConst110;
	float 	fTempPerm55;
	float 	fTempPerm56;
	float 	fRec108[2];
	float 	fRec107[2];
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fRec110[3];
	float 	fRec113[3];
	float 	fConst114;
	float 	fTempPerm57;
	float 	fTempPerm58;
	float 	fRec112[2];
	float 	fRec111[2];
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fRec114[3];
	float 	fRec117[3];
	float 	fConst118;
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fRec116[2];
	float 	fRec115[2];
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fRec118[3];
	float 	fRec121[3];
	float 	fConst122;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fRec120[2];
	float 	fRec119[2];
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fRec122[3];
	float 	fRec125[3];
	float 	fConst126;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fRec124[2];
	float 	fRec123[2];
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fRec126[3];
	float 	fRec129[3];
	float 	fConst130;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fRec128[2];
	float 	fRec127[2];
	float 	fTempPerm67;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("author", "RM");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("description", "Use example of the vocoder function where an impulse train is used as excitation.");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "Vocoder");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
		m->declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m->declare("vaeffects.lib/version", "0.0");
		m->declare("version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = tanf((95.445304460225799f / fConst0));
		fConst2 = (1.0f / fConst1);
		fConst3 = (1.0f / fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fConst4 = (2 * (1 - (1.0f / faustpower<2>(fConst1))));
		fTempPerm2 = 0;
		fConst5 = (0 - fConst2);
		fTempPerm3 = 0;
		fConst6 = (1000.0f / fConst0);
		fTempPerm4 = 0;
		fConst7 = tanf((115.98965426782146f / fConst0));
		fConst8 = (1.0f / fConst7);
		fConst9 = (2 * (1 - (1.0f / faustpower<2>(fConst7))));
		fConst10 = (0 - fConst8);
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fConst11 = tanf((140.95612113401737f / fConst0));
		fConst12 = (1.0f / fConst11);
		fConst13 = (2 * (1 - (1.0f / faustpower<2>(fConst11))));
		fConst14 = (0 - fConst12);
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fConst15 = tanf((171.29655408120178f / fConst0));
		fConst16 = (1.0f / fConst15);
		fConst17 = (2 * (1 - (1.0f / faustpower<2>(fConst15))));
		fConst18 = (0 - fConst16);
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fConst19 = tanf((208.16768512093211f / fConst0));
		fConst20 = (1.0f / fConst19);
		fConst21 = (2 * (1 - (1.0f / faustpower<2>(fConst19))));
		fConst22 = (0 - fConst20);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fConst23 = tanf((252.97522977645821f / fConst0));
		fConst24 = (1.0f / fConst23);
		fConst25 = (2 * (1 - (1.0f / faustpower<2>(fConst23))));
		fConst26 = (0 - fConst24);
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fConst27 = tanf((307.42748012629335f / fConst0));
		fConst28 = (1.0f / fConst27);
		fConst29 = (2 * (1 - (1.0f / faustpower<2>(fConst27))));
		fConst30 = (0 - fConst28);
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fConst31 = tanf((373.6004336089261f / fConst0));
		fConst32 = (1.0f / fConst31);
		fConst33 = (2 * (1 - (1.0f / faustpower<2>(fConst31))));
		fConst34 = (0 - fConst32);
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fConst35 = tanf((454.01694063080589f / fConst0));
		fConst36 = (1.0f / fConst35);
		fConst37 = (2 * (1 - (1.0f / faustpower<2>(fConst35))));
		fConst38 = (0 - fConst36);
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fConst39 = tanf((551.74288848799608f / fConst0));
		fConst40 = (1.0f / fConst39);
		fConst41 = (2 * (1 - (1.0f / faustpower<2>(fConst39))));
		fConst42 = (0 - fConst40);
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fConst43 = tanf((670.50408862303561f / fConst0));
		fConst44 = (1.0f / fConst43);
		fConst45 = (2 * (1 - (1.0f / faustpower<2>(fConst43))));
		fConst46 = (0 - fConst44);
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fConst47 = tanf((814.82832355525409f / fConst0));
		fConst48 = (1.0f / fConst47);
		fConst49 = (2 * (1 - (1.0f / faustpower<2>(fConst47))));
		fConst50 = (0 - fConst48);
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fConst51 = tanf((990.217969037834f / fConst0));
		fConst52 = (1.0f / fConst51);
		fConst53 = (2 * (1 - (1.0f / faustpower<2>(fConst51))));
		fConst54 = (0 - fConst52);
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fConst55 = tanf((1203.3597726784494f / fConst0));
		fConst56 = (1.0f / fConst55);
		fConst57 = (2 * (1 - (1.0f / faustpower<2>(fConst55))));
		fConst58 = (0 - fConst56);
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fConst59 = tanf((1462.3797868541828f / fConst0));
		fConst60 = (1.0f / fConst59);
		fConst61 = (2 * (1 - (1.0f / faustpower<2>(fConst59))));
		fConst62 = (0 - fConst60);
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		fConst63 = tanf((1777.1531752633464f / fConst0));
		fConst64 = (1.0f / fConst63);
		fConst65 = (2 * (1 - (1.0f / faustpower<2>(fConst63))));
		fConst66 = (0 - fConst64);
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fConst67 = tanf((2159.6807045196892f / fConst0));
		fConst68 = (1.0f / fConst67);
		fConst69 = (2 * (1 - (1.0f / faustpower<2>(fConst67))));
		fConst70 = (0 - fConst68);
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fConst71 = tanf((2624.5462745683112f / fConst0));
		fConst72 = (1.0f / fConst71);
		fConst73 = (2 * (1 - (1.0f / faustpower<2>(fConst71))));
		fConst74 = (0 - fConst72);
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fConst75 = tanf((3189.472931315715f / fConst0));
		fConst76 = (1.0f / fConst75);
		fConst77 = (2 * (1 - (1.0f / faustpower<2>(fConst75))));
		fConst78 = (0 - fConst76);
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fConst79 = tanf((3875.99855951059f / fConst0));
		fConst80 = (1.0f / fConst79);
		fConst81 = (2 * (1 - (1.0f / faustpower<2>(fConst79))));
		fConst82 = (0 - fConst80);
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fConst83 = tanf((4710.2970167333451f / fConst0));
		fConst84 = (1.0f / fConst83);
		fConst85 = (2 * (1 - (1.0f / faustpower<2>(fConst83))));
		fConst86 = (0 - fConst84);
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fConst87 = tanf((5724.176014309076f / fConst0));
		fConst88 = (1.0f / fConst87);
		fConst89 = (2 * (1 - (1.0f / faustpower<2>(fConst87))));
		fConst90 = (0 - fConst88);
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fConst91 = tanf((6956.2897894526277f / fConst0));
		fConst92 = (1.0f / fConst91);
		fConst93 = (2 * (1 - (1.0f / faustpower<2>(fConst91))));
		fConst94 = (0 - fConst92);
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fConst95 = tanf((8453.6128018913969f / fConst0));
		fConst96 = (1.0f / fConst95);
		fConst97 = (2 * (1 - (1.0f / faustpower<2>(fConst95))));
		fConst98 = (0 - fConst96);
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		fConst99 = tanf((10273.230639795614f / fConst0));
		fConst100 = (1.0f / fConst99);
		fConst101 = (2 * (1 - (1.0f / faustpower<2>(fConst99))));
		fConst102 = (0 - fConst100);
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fConst103 = tanf((12484.516413482084f / fConst0));
		fConst104 = (1.0f / fConst103);
		fConst105 = (2 * (1 - (1.0f / faustpower<2>(fConst103))));
		fConst106 = (0 - fConst104);
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fConst107 = tanf((15171.775612116937f / fConst0));
		fConst108 = (1.0f / fConst107);
		fConst109 = (2 * (1 - (1.0f / faustpower<2>(fConst107))));
		fConst110 = (0 - fConst108);
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fConst111 = tanf((18437.460258841165f / fConst0));
		fConst112 = (1.0f / fConst111);
		fConst113 = (2 * (1 - (1.0f / faustpower<2>(fConst111))));
		fConst114 = (0 - fConst112);
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fConst115 = tanf((22406.074904301538f / fConst0));
		fConst116 = (1.0f / fConst115);
		fConst117 = (2 * (1 - (1.0f / faustpower<2>(fConst115))));
		fConst118 = (0 - fConst116);
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fConst119 = tanf((27228.923374977083f / fConst0));
		fConst120 = (1.0f / fConst119);
		fConst121 = (2 * (1 - (1.0f / faustpower<2>(fConst119))));
		fConst122 = (0 - fConst120);
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fConst123 = tanf((33089.877246551383f / fConst0));
		fConst124 = (1.0f / fConst123);
		fConst125 = (2 * (1 - (1.0f / faustpower<2>(fConst123))));
		fConst126 = (0 - fConst124);
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fConst127 = tanf((40212.385965949354f / fConst0));
		fConst128 = (1.0f / fConst127);
		fConst129 = (2 * (1 - (1.0f / faustpower<2>(fConst127))));
		fConst130 = (0 - fConst128);
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 0.5f;
		fslider1 = 0.5f;
		fslider2 = 330.0f;
		fslider3 = 5.0f;
		fslider4 = 5.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec6[i] = 0;
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<3; i++) fRec10[i] = 0;
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec21[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<2; i++) fRec36[i] = 0;
		for (int i=0; i<2; i++) fRec35[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<2; i++) fRec40[i] = 0;
		for (int i=0; i<2; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<2; i++) fRec44[i] = 0;
		for (int i=0; i<2; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<2; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<2; i++) fRec52[i] = 0;
		for (int i=0; i<2; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<2; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<2; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<2; i++) fRec64[i] = 0;
		for (int i=0; i<2; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<2; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<2; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<2; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<2; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<2; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<2; i++) fRec100[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<2; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		for (int i=0; i<2; i++) fRec108[i] = 0;
		for (int i=0; i<2; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<2; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<2; i++) fRec116[i] = 0;
		for (int i=0; i<2; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec118[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<2; i++) fRec120[i] = 0;
		for (int i=0; i<2; i++) fRec119[i] = 0;
		for (int i=0; i<3; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec125[i] = 0;
		for (int i=0; i<2; i++) fRec124[i] = 0;
		for (int i=0; i<2; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec126[i] = 0;
		for (int i=0; i<3; i++) fRec129[i] = 0;
		for (int i=0; i<2; i++) fRec128[i] = 0;
		for (int i=0; i<2; i++) fRec127[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openHorizontalBox("My Vocoder");
		ui_interface->openVerticalBox("Excitation");
		ui_interface->declare(&fslider2, "0", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->addHorizontalSlider("Freq", &fslider2, 330.0f, 50.0f, 2000.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider1, "1", "");
		ui_interface->addVerticalSlider("Gain", &fslider1, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->openVerticalBox("Vocoder");
		ui_interface->declare(&fslider4, "0", "");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Attack time in seconds");
		ui_interface->addHorizontalSlider("Attack", &fslider4, 5.0f, 0.10000000000000001f, 100.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Release time in seconds");
		ui_interface->addHorizontalSlider("Release", &fslider3, 5.0f, 0.10000000000000001f, 100.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider0, "2", "");
		ui_interface->declare(&fslider0, "style", "knob");
		ui_interface->declare(&fslider0, "tooltip", "Coefficient to adjust the   bandwidth of each band");
		ui_interface->addHorizontalSlider("BW", &fslider0, 0.5f, 0.10000000000000001f, 2.0f, 0.001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = (0.17712226092301761f * fSlow0);
		float 	fSlow2 = (1.0f / ((fConst2 * (fConst2 + fSlow1)) + 1));
		float 	fSlow3 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow4 = float(fslider2);
		float 	fSlow5 = ((fConst2 * (fConst2 - fSlow1)) + 1);
		float 	fSlow6 = expf((0 - (fConst6 / float(fslider3))));
		float 	fSlow7 = expf((0 - (fConst6 / float(fslider4))));
		float 	fSlow8 = (0.1771222609230175f * fSlow0);
		float 	fSlow9 = (1.0f / ((fConst8 * (fConst8 + fSlow8)) + 1));
		float 	fSlow10 = ((fConst8 * (fConst8 - fSlow8)) + 1);
		float 	fSlow11 = (1.0f / ((fConst12 * (fConst12 + fSlow1)) + 1));
		float 	fSlow12 = ((fConst12 * (fConst12 - fSlow1)) + 1);
		float 	fSlow13 = (0.17712226092301758f * fSlow0);
		float 	fSlow14 = (1.0f / ((fConst16 * (fConst16 + fSlow13)) + 1));
		float 	fSlow15 = ((fConst16 * (fConst16 - fSlow13)) + 1);
		float 	fSlow16 = (0.17712226092301767f * fSlow0);
		float 	fSlow17 = (1.0f / ((fConst20 * (fConst20 + fSlow16)) + 1));
		float 	fSlow18 = ((fConst20 * (fConst20 - fSlow16)) + 1);
		float 	fSlow19 = (0.17712226092301739f * fSlow0);
		float 	fSlow20 = (1.0f / ((fConst24 * (fConst24 + fSlow19)) + 1));
		float 	fSlow21 = ((fConst24 * (fConst24 - fSlow19)) + 1);
		float 	fSlow22 = (0.17712226092301764f * fSlow0);
		float 	fSlow23 = (1.0f / ((fConst28 * (fConst28 + fSlow22)) + 1));
		float 	fSlow24 = ((fConst28 * (fConst28 - fSlow22)) + 1);
		float 	fSlow25 = (1.0f / ((fConst32 * (fConst32 + fSlow1)) + 1));
		float 	fSlow26 = ((fConst32 * (fConst32 - fSlow1)) + 1);
		float 	fSlow27 = (1.0f / ((fConst36 * (fConst36 + fSlow16)) + 1));
		float 	fSlow28 = ((fConst36 * (fConst36 - fSlow16)) + 1);
		float 	fSlow29 = (1.0f / ((fConst40 * (fConst40 + fSlow8)) + 1));
		float 	fSlow30 = ((fConst40 * (fConst40 - fSlow8)) + 1);
		float 	fSlow31 = (0.17712226092301769f * fSlow0);
		float 	fSlow32 = (1.0f / ((fConst44 * (fConst44 + fSlow31)) + 1));
		float 	fSlow33 = ((fConst44 * (fConst44 - fSlow31)) + 1);
		float 	fSlow34 = (0.17712226092301736f * fSlow0);
		float 	fSlow35 = (1.0f / ((fConst48 * (fConst48 + fSlow34)) + 1));
		float 	fSlow36 = ((fConst48 * (fConst48 - fSlow34)) + 1);
		float 	fSlow37 = (1.0f / ((fConst52 * (fConst52 + fSlow31)) + 1));
		float 	fSlow38 = ((fConst52 * (fConst52 - fSlow31)) + 1);
		float 	fSlow39 = (0.17712226092301755f * fSlow0);
		float 	fSlow40 = (1.0f / ((fConst56 * (fConst56 + fSlow39)) + 1));
		float 	fSlow41 = ((fConst56 * (fConst56 - fSlow39)) + 1);
		float 	fSlow42 = (1.0f / ((fConst60 * (fConst60 + fSlow13)) + 1));
		float 	fSlow43 = ((fConst60 * (fConst60 - fSlow13)) + 1);
		float 	fSlow44 = (1.0f / ((fConst64 * (fConst64 + fSlow13)) + 1));
		float 	fSlow45 = ((fConst64 * (fConst64 - fSlow13)) + 1);
		float 	fSlow46 = (1.0f / ((fConst68 * (fConst68 + fSlow8)) + 1));
		float 	fSlow47 = ((fConst68 * (fConst68 - fSlow8)) + 1);
		float 	fSlow48 = (0.17712226092301753f * fSlow0);
		float 	fSlow49 = (1.0f / ((fConst72 * (fConst72 + fSlow48)) + 1));
		float 	fSlow50 = ((fConst72 * (fConst72 - fSlow48)) + 1);
		float 	fSlow51 = (1.0f / ((fConst76 * (fConst76 + fSlow16)) + 1));
		float 	fSlow52 = ((fConst76 * (fConst76 - fSlow16)) + 1);
		float 	fSlow53 = (1.0f / ((fConst80 * (fConst80 + fSlow39)) + 1));
		float 	fSlow54 = ((fConst80 * (fConst80 - fSlow39)) + 1);
		float 	fSlow55 = (1.0f / ((fConst84 * (fConst84 + fSlow22)) + 1));
		float 	fSlow56 = ((fConst84 * (fConst84 - fSlow22)) + 1);
		float 	fSlow57 = (1.0f / ((fConst88 * (fConst88 + fSlow39)) + 1));
		float 	fSlow58 = ((fConst88 * (fConst88 - fSlow39)) + 1);
		float 	fSlow59 = (1.0f / ((fConst92 * (fConst92 + fSlow22)) + 1));
		float 	fSlow60 = ((fConst92 * (fConst92 - fSlow22)) + 1);
		float 	fSlow61 = (0.17712226092301747f * fSlow0);
		float 	fSlow62 = (1.0f / ((fConst96 * (fConst96 + fSlow61)) + 1));
		float 	fSlow63 = ((fConst96 * (fConst96 - fSlow61)) + 1);
		float 	fSlow64 = (1.0f / ((fConst100 * (fConst100 + fSlow13)) + 1));
		float 	fSlow65 = ((fConst100 * (fConst100 - fSlow13)) + 1);
		float 	fSlow66 = (1.0f / ((fConst104 * (fConst104 + fSlow1)) + 1));
		float 	fSlow67 = ((fConst104 * (fConst104 - fSlow1)) + 1);
		float 	fSlow68 = (1.0f / ((fConst108 * (fConst108 + fSlow31)) + 1));
		float 	fSlow69 = ((fConst108 * (fConst108 - fSlow31)) + 1);
		float 	fSlow70 = (0.17712226092301742f * fSlow0);
		float 	fSlow71 = (1.0f / ((fConst112 * (fConst112 + fSlow70)) + 1));
		float 	fSlow72 = ((fConst112 * (fConst112 - fSlow70)) + 1);
		float 	fSlow73 = (1.0f / ((fConst116 * (fConst116 + fSlow1)) + 1));
		float 	fSlow74 = ((fConst116 * (fConst116 - fSlow1)) + 1);
		float 	fSlow75 = (1.0f / ((fConst120 * (fConst120 + fSlow39)) + 1));
		float 	fSlow76 = ((fConst120 * (fConst120 - fSlow39)) + 1);
		float 	fSlow77 = (0.17712226092301772f * fSlow0);
		float 	fSlow78 = (1.0f / ((fConst124 * (fConst124 + fSlow77)) + 1));
		float 	fSlow79 = ((fConst124 * (fConst124 - fSlow77)) + 1);
		float 	fSlow80 = (1.0f / ((fConst128 * (fConst128 + fSlow61)) + 1));
		float 	fSlow81 = ((fConst128 * (fConst128 - fSlow61)) + 1);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			fRec1[0] = (fSlow3 + (0.999f * fRec1[1]));
			fVec0[0] = fSlow4;
			fTempPerm0 = (fRec2[1] + (fConst3 * fVec0[1]));
			fRec2[0] = (fTempPerm0 - floorf(fTempPerm0));
			fTempPerm1 = (fRec1[0] * ((fRec2[0] - fRec2[1]) < 0));
			fRec0[0] = (fTempPerm1 - (fSlow2 * ((fSlow5 * fRec0[2]) + (fConst4 * fRec0[1]))));
			fTempPerm2 = (float)input0[i];
			fRec5[0] = (fTempPerm2 - (fSlow2 * ((fConst4 * fRec5[1]) + (fSlow5 * fRec5[2]))));
			fTempPerm3 = fabsf((fSlow2 * ((fConst2 * fRec5[0]) + (fConst5 * fRec5[2]))));
			fTempPerm4 = ((int((fRec3[1] > fTempPerm3)))?fSlow6:fSlow7);
			fRec4[0] = ((fRec4[1] * fTempPerm4) + (fTempPerm3 * (1.0f - fTempPerm4)));
			fRec3[0] = fRec4[0];
			fRec6[0] = (fTempPerm1 - (fSlow9 * ((fSlow10 * fRec6[2]) + (fConst9 * fRec6[1]))));
			fRec9[0] = (fTempPerm2 - (fSlow9 * ((fConst9 * fRec9[1]) + (fSlow10 * fRec9[2]))));
			fTempPerm5 = fabsf((fSlow9 * ((fConst8 * fRec9[0]) + (fConst10 * fRec9[2]))));
			fTempPerm6 = ((int((fRec7[1] > fTempPerm5)))?fSlow6:fSlow7);
			fRec8[0] = ((fRec8[1] * fTempPerm6) + (fTempPerm5 * (1.0f - fTempPerm6)));
			fRec7[0] = fRec8[0];
			fRec10[0] = (fTempPerm1 - (fSlow11 * ((fSlow12 * fRec10[2]) + (fConst13 * fRec10[1]))));
			fRec13[0] = (fTempPerm2 - (fSlow11 * ((fConst13 * fRec13[1]) + (fSlow12 * fRec13[2]))));
			fTempPerm7 = fabsf((fSlow11 * ((fConst12 * fRec13[0]) + (fConst14 * fRec13[2]))));
			fTempPerm8 = ((int((fRec11[1] > fTempPerm7)))?fSlow6:fSlow7);
			fRec12[0] = ((fRec12[1] * fTempPerm8) + (fTempPerm7 * (1.0f - fTempPerm8)));
			fRec11[0] = fRec12[0];
			fRec14[0] = (fTempPerm1 - (fSlow14 * ((fSlow15 * fRec14[2]) + (fConst17 * fRec14[1]))));
			fRec17[0] = (fTempPerm2 - (fSlow14 * ((fConst17 * fRec17[1]) + (fSlow15 * fRec17[2]))));
			fTempPerm9 = fabsf((fSlow14 * ((fConst16 * fRec17[0]) + (fConst18 * fRec17[2]))));
			fTempPerm10 = ((int((fRec15[1] > fTempPerm9)))?fSlow6:fSlow7);
			fRec16[0] = ((fRec16[1] * fTempPerm10) + (fTempPerm9 * (1.0f - fTempPerm10)));
			fRec15[0] = fRec16[0];
			fRec18[0] = (fTempPerm1 - (fSlow17 * ((fSlow18 * fRec18[2]) + (fConst21 * fRec18[1]))));
			fRec21[0] = (fTempPerm2 - (fSlow17 * ((fConst21 * fRec21[1]) + (fSlow18 * fRec21[2]))));
			fTempPerm11 = fabsf((fSlow17 * ((fConst20 * fRec21[0]) + (fConst22 * fRec21[2]))));
			fTempPerm12 = ((int((fRec19[1] > fTempPerm11)))?fSlow6:fSlow7);
			fRec20[0] = ((fRec20[1] * fTempPerm12) + (fTempPerm11 * (1.0f - fTempPerm12)));
			fRec19[0] = fRec20[0];
			fRec22[0] = (fTempPerm1 - (fSlow20 * ((fSlow21 * fRec22[2]) + (fConst25 * fRec22[1]))));
			fRec25[0] = (fTempPerm2 - (fSlow20 * ((fConst25 * fRec25[1]) + (fSlow21 * fRec25[2]))));
			fTempPerm13 = fabsf((fSlow20 * ((fConst24 * fRec25[0]) + (fConst26 * fRec25[2]))));
			fTempPerm14 = ((int((fRec23[1] > fTempPerm13)))?fSlow6:fSlow7);
			fRec24[0] = ((fRec24[1] * fTempPerm14) + (fTempPerm13 * (1.0f - fTempPerm14)));
			fRec23[0] = fRec24[0];
			fRec26[0] = (fTempPerm1 - (fSlow23 * ((fSlow24 * fRec26[2]) + (fConst29 * fRec26[1]))));
			fRec29[0] = (fTempPerm2 - (fSlow23 * ((fConst29 * fRec29[1]) + (fSlow24 * fRec29[2]))));
			fTempPerm15 = fabsf((fSlow23 * ((fConst28 * fRec29[0]) + (fConst30 * fRec29[2]))));
			fTempPerm16 = ((int((fRec27[1] > fTempPerm15)))?fSlow6:fSlow7);
			fRec28[0] = ((fRec28[1] * fTempPerm16) + (fTempPerm15 * (1.0f - fTempPerm16)));
			fRec27[0] = fRec28[0];
			fRec30[0] = (fTempPerm1 - (fSlow25 * ((fSlow26 * fRec30[2]) + (fConst33 * fRec30[1]))));
			fRec33[0] = (fTempPerm2 - (fSlow25 * ((fConst33 * fRec33[1]) + (fSlow26 * fRec33[2]))));
			fTempPerm17 = fabsf((fSlow25 * ((fConst32 * fRec33[0]) + (fConst34 * fRec33[2]))));
			fTempPerm18 = ((int((fRec31[1] > fTempPerm17)))?fSlow6:fSlow7);
			fRec32[0] = ((fRec32[1] * fTempPerm18) + (fTempPerm17 * (1.0f - fTempPerm18)));
			fRec31[0] = fRec32[0];
			fRec34[0] = (fTempPerm1 - (fSlow27 * ((fSlow28 * fRec34[2]) + (fConst37 * fRec34[1]))));
			fRec37[0] = (fTempPerm2 - (fSlow27 * ((fConst37 * fRec37[1]) + (fSlow28 * fRec37[2]))));
			fTempPerm19 = fabsf((fSlow27 * ((fConst36 * fRec37[0]) + (fConst38 * fRec37[2]))));
			fTempPerm20 = ((int((fRec35[1] > fTempPerm19)))?fSlow6:fSlow7);
			fRec36[0] = ((fRec36[1] * fTempPerm20) + (fTempPerm19 * (1.0f - fTempPerm20)));
			fRec35[0] = fRec36[0];
			fRec38[0] = (fTempPerm1 - (fSlow29 * ((fSlow30 * fRec38[2]) + (fConst41 * fRec38[1]))));
			fRec41[0] = (fTempPerm2 - (fSlow29 * ((fConst41 * fRec41[1]) + (fSlow30 * fRec41[2]))));
			fTempPerm21 = fabsf((fSlow29 * ((fConst40 * fRec41[0]) + (fConst42 * fRec41[2]))));
			fTempPerm22 = ((int((fRec39[1] > fTempPerm21)))?fSlow6:fSlow7);
			fRec40[0] = ((fRec40[1] * fTempPerm22) + (fTempPerm21 * (1.0f - fTempPerm22)));
			fRec39[0] = fRec40[0];
			fRec42[0] = (fTempPerm1 - (fSlow32 * ((fSlow33 * fRec42[2]) + (fConst45 * fRec42[1]))));
			fRec45[0] = (fTempPerm2 - (fSlow32 * ((fConst45 * fRec45[1]) + (fSlow33 * fRec45[2]))));
			fTempPerm23 = fabsf((fSlow32 * ((fConst44 * fRec45[0]) + (fConst46 * fRec45[2]))));
			fTempPerm24 = ((int((fRec43[1] > fTempPerm23)))?fSlow6:fSlow7);
			fRec44[0] = ((fRec44[1] * fTempPerm24) + (fTempPerm23 * (1.0f - fTempPerm24)));
			fRec43[0] = fRec44[0];
			fRec46[0] = (fTempPerm1 - (fSlow35 * ((fSlow36 * fRec46[2]) + (fConst49 * fRec46[1]))));
			fRec49[0] = (fTempPerm2 - (fSlow35 * ((fConst49 * fRec49[1]) + (fSlow36 * fRec49[2]))));
			fTempPerm25 = fabsf((fSlow35 * ((fConst48 * fRec49[0]) + (fConst50 * fRec49[2]))));
			fTempPerm26 = ((int((fRec47[1] > fTempPerm25)))?fSlow6:fSlow7);
			fRec48[0] = ((fRec48[1] * fTempPerm26) + (fTempPerm25 * (1.0f - fTempPerm26)));
			fRec47[0] = fRec48[0];
			fRec50[0] = (fTempPerm1 - (fSlow37 * ((fSlow38 * fRec50[2]) + (fConst53 * fRec50[1]))));
			fRec53[0] = (fTempPerm2 - (fSlow37 * ((fConst53 * fRec53[1]) + (fSlow38 * fRec53[2]))));
			fTempPerm27 = fabsf((fSlow37 * ((fConst52 * fRec53[0]) + (fConst54 * fRec53[2]))));
			fTempPerm28 = ((int((fRec51[1] > fTempPerm27)))?fSlow6:fSlow7);
			fRec52[0] = ((fRec52[1] * fTempPerm28) + (fTempPerm27 * (1.0f - fTempPerm28)));
			fRec51[0] = fRec52[0];
			fRec54[0] = (fTempPerm1 - (fSlow40 * ((fSlow41 * fRec54[2]) + (fConst57 * fRec54[1]))));
			fRec57[0] = (fTempPerm2 - (fSlow40 * ((fConst57 * fRec57[1]) + (fSlow41 * fRec57[2]))));
			fTempPerm29 = fabsf((fSlow40 * ((fConst56 * fRec57[0]) + (fConst58 * fRec57[2]))));
			fTempPerm30 = ((int((fRec55[1] > fTempPerm29)))?fSlow6:fSlow7);
			fRec56[0] = ((fRec56[1] * fTempPerm30) + (fTempPerm29 * (1.0f - fTempPerm30)));
			fRec55[0] = fRec56[0];
			fRec58[0] = (fTempPerm1 - (fSlow42 * ((fSlow43 * fRec58[2]) + (fConst61 * fRec58[1]))));
			fRec61[0] = (fTempPerm2 - (fSlow42 * ((fConst61 * fRec61[1]) + (fSlow43 * fRec61[2]))));
			fTempPerm31 = fabsf((fSlow42 * ((fConst60 * fRec61[0]) + (fConst62 * fRec61[2]))));
			fTempPerm32 = ((int((fRec59[1] > fTempPerm31)))?fSlow6:fSlow7);
			fRec60[0] = ((fRec60[1] * fTempPerm32) + (fTempPerm31 * (1.0f - fTempPerm32)));
			fRec59[0] = fRec60[0];
			fRec62[0] = (fTempPerm1 - (fSlow44 * ((fSlow45 * fRec62[2]) + (fConst65 * fRec62[1]))));
			fRec65[0] = (fTempPerm2 - (fSlow44 * ((fConst65 * fRec65[1]) + (fSlow45 * fRec65[2]))));
			fTempPerm33 = fabsf((fSlow44 * ((fConst64 * fRec65[0]) + (fConst66 * fRec65[2]))));
			fTempPerm34 = ((int((fRec63[1] > fTempPerm33)))?fSlow6:fSlow7);
			fRec64[0] = ((fRec64[1] * fTempPerm34) + (fTempPerm33 * (1.0f - fTempPerm34)));
			fRec63[0] = fRec64[0];
			fRec66[0] = (fTempPerm1 - (fSlow46 * ((fSlow47 * fRec66[2]) + (fConst69 * fRec66[1]))));
			fRec69[0] = (fTempPerm2 - (fSlow46 * ((fConst69 * fRec69[1]) + (fSlow47 * fRec69[2]))));
			fTempPerm35 = fabsf((fSlow46 * ((fConst68 * fRec69[0]) + (fConst70 * fRec69[2]))));
			fTempPerm36 = ((int((fRec67[1] > fTempPerm35)))?fSlow6:fSlow7);
			fRec68[0] = ((fRec68[1] * fTempPerm36) + (fTempPerm35 * (1.0f - fTempPerm36)));
			fRec67[0] = fRec68[0];
			fRec70[0] = (fTempPerm1 - (fSlow49 * ((fSlow50 * fRec70[2]) + (fConst73 * fRec70[1]))));
			fRec73[0] = (fTempPerm2 - (fSlow49 * ((fConst73 * fRec73[1]) + (fSlow50 * fRec73[2]))));
			fTempPerm37 = fabsf((fSlow49 * ((fConst72 * fRec73[0]) + (fConst74 * fRec73[2]))));
			fTempPerm38 = ((int((fRec71[1] > fTempPerm37)))?fSlow6:fSlow7);
			fRec72[0] = ((fRec72[1] * fTempPerm38) + (fTempPerm37 * (1.0f - fTempPerm38)));
			fRec71[0] = fRec72[0];
			fRec74[0] = (fTempPerm1 - (fSlow51 * ((fSlow52 * fRec74[2]) + (fConst77 * fRec74[1]))));
			fRec77[0] = (fTempPerm2 - (fSlow51 * ((fConst77 * fRec77[1]) + (fSlow52 * fRec77[2]))));
			fTempPerm39 = fabsf((fSlow51 * ((fConst76 * fRec77[0]) + (fConst78 * fRec77[2]))));
			fTempPerm40 = ((int((fRec75[1] > fTempPerm39)))?fSlow6:fSlow7);
			fRec76[0] = ((fRec76[1] * fTempPerm40) + (fTempPerm39 * (1.0f - fTempPerm40)));
			fRec75[0] = fRec76[0];
			fRec78[0] = (fTempPerm1 - (fSlow53 * ((fSlow54 * fRec78[2]) + (fConst81 * fRec78[1]))));
			fRec81[0] = (fTempPerm2 - (fSlow53 * ((fConst81 * fRec81[1]) + (fSlow54 * fRec81[2]))));
			fTempPerm41 = fabsf((fSlow53 * ((fConst80 * fRec81[0]) + (fConst82 * fRec81[2]))));
			fTempPerm42 = ((int((fRec79[1] > fTempPerm41)))?fSlow6:fSlow7);
			fRec80[0] = ((fRec80[1] * fTempPerm42) + (fTempPerm41 * (1.0f - fTempPerm42)));
			fRec79[0] = fRec80[0];
			fRec82[0] = (fTempPerm1 - (fSlow55 * ((fSlow56 * fRec82[2]) + (fConst85 * fRec82[1]))));
			fRec85[0] = (fTempPerm2 - (fSlow55 * ((fConst85 * fRec85[1]) + (fSlow56 * fRec85[2]))));
			fTempPerm43 = fabsf((fSlow55 * ((fConst84 * fRec85[0]) + (fConst86 * fRec85[2]))));
			fTempPerm44 = ((int((fRec83[1] > fTempPerm43)))?fSlow6:fSlow7);
			fRec84[0] = ((fRec84[1] * fTempPerm44) + (fTempPerm43 * (1.0f - fTempPerm44)));
			fRec83[0] = fRec84[0];
			fRec86[0] = (fTempPerm1 - (fSlow57 * ((fSlow58 * fRec86[2]) + (fConst89 * fRec86[1]))));
			fRec89[0] = (fTempPerm2 - (fSlow57 * ((fConst89 * fRec89[1]) + (fSlow58 * fRec89[2]))));
			fTempPerm45 = fabsf((fSlow57 * ((fConst88 * fRec89[0]) + (fConst90 * fRec89[2]))));
			fTempPerm46 = ((int((fRec87[1] > fTempPerm45)))?fSlow6:fSlow7);
			fRec88[0] = ((fRec88[1] * fTempPerm46) + (fTempPerm45 * (1.0f - fTempPerm46)));
			fRec87[0] = fRec88[0];
			fRec90[0] = (fTempPerm1 - (fSlow59 * ((fSlow60 * fRec90[2]) + (fConst93 * fRec90[1]))));
			fRec93[0] = (fTempPerm2 - (fSlow59 * ((fConst93 * fRec93[1]) + (fSlow60 * fRec93[2]))));
			fTempPerm47 = fabsf((fSlow59 * ((fConst92 * fRec93[0]) + (fConst94 * fRec93[2]))));
			fTempPerm48 = ((int((fRec91[1] > fTempPerm47)))?fSlow6:fSlow7);
			fRec92[0] = ((fRec92[1] * fTempPerm48) + (fTempPerm47 * (1.0f - fTempPerm48)));
			fRec91[0] = fRec92[0];
			fRec94[0] = (fTempPerm1 - (fSlow62 * ((fSlow63 * fRec94[2]) + (fConst97 * fRec94[1]))));
			fRec97[0] = (fTempPerm2 - (fSlow62 * ((fConst97 * fRec97[1]) + (fSlow63 * fRec97[2]))));
			fTempPerm49 = fabsf((fSlow62 * ((fConst96 * fRec97[0]) + (fConst98 * fRec97[2]))));
			fTempPerm50 = ((int((fRec95[1] > fTempPerm49)))?fSlow6:fSlow7);
			fRec96[0] = ((fRec96[1] * fTempPerm50) + (fTempPerm49 * (1.0f - fTempPerm50)));
			fRec95[0] = fRec96[0];
			fRec98[0] = (fTempPerm1 - (fSlow64 * ((fSlow65 * fRec98[2]) + (fConst101 * fRec98[1]))));
			fRec101[0] = (fTempPerm2 - (fSlow64 * ((fConst101 * fRec101[1]) + (fSlow65 * fRec101[2]))));
			fTempPerm51 = fabsf((fSlow64 * ((fConst100 * fRec101[0]) + (fConst102 * fRec101[2]))));
			fTempPerm52 = ((int((fRec99[1] > fTempPerm51)))?fSlow6:fSlow7);
			fRec100[0] = ((fRec100[1] * fTempPerm52) + (fTempPerm51 * (1.0f - fTempPerm52)));
			fRec99[0] = fRec100[0];
			fRec102[0] = (fTempPerm1 - (fSlow66 * ((fSlow67 * fRec102[2]) + (fConst105 * fRec102[1]))));
			fRec105[0] = (fTempPerm2 - (fSlow66 * ((fConst105 * fRec105[1]) + (fSlow67 * fRec105[2]))));
			fTempPerm53 = fabsf((fSlow66 * ((fConst104 * fRec105[0]) + (fConst106 * fRec105[2]))));
			fTempPerm54 = ((int((fRec103[1] > fTempPerm53)))?fSlow6:fSlow7);
			fRec104[0] = ((fRec104[1] * fTempPerm54) + (fTempPerm53 * (1.0f - fTempPerm54)));
			fRec103[0] = fRec104[0];
			fRec106[0] = (fTempPerm1 - (fSlow68 * ((fSlow69 * fRec106[2]) + (fConst109 * fRec106[1]))));
			fRec109[0] = (fTempPerm2 - (fSlow68 * ((fConst109 * fRec109[1]) + (fSlow69 * fRec109[2]))));
			fTempPerm55 = fabsf((fSlow68 * ((fConst108 * fRec109[0]) + (fConst110 * fRec109[2]))));
			fTempPerm56 = ((int((fRec107[1] > fTempPerm55)))?fSlow6:fSlow7);
			fRec108[0] = ((fRec108[1] * fTempPerm56) + (fTempPerm55 * (1.0f - fTempPerm56)));
			fRec107[0] = fRec108[0];
			fRec110[0] = (fTempPerm1 - (fSlow71 * ((fSlow72 * fRec110[2]) + (fConst113 * fRec110[1]))));
			fRec113[0] = (fTempPerm2 - (fSlow71 * ((fConst113 * fRec113[1]) + (fSlow72 * fRec113[2]))));
			fTempPerm57 = fabsf((fSlow71 * ((fConst112 * fRec113[0]) + (fConst114 * fRec113[2]))));
			fTempPerm58 = ((int((fRec111[1] > fTempPerm57)))?fSlow6:fSlow7);
			fRec112[0] = ((fRec112[1] * fTempPerm58) + (fTempPerm57 * (1.0f - fTempPerm58)));
			fRec111[0] = fRec112[0];
			fRec114[0] = (fTempPerm1 - (fSlow73 * ((fSlow74 * fRec114[2]) + (fConst117 * fRec114[1]))));
			fRec117[0] = (fTempPerm2 - (fSlow73 * ((fConst117 * fRec117[1]) + (fSlow74 * fRec117[2]))));
			fTempPerm59 = fabsf((fSlow73 * ((fConst116 * fRec117[0]) + (fConst118 * fRec117[2]))));
			fTempPerm60 = ((int((fRec115[1] > fTempPerm59)))?fSlow6:fSlow7);
			fRec116[0] = ((fRec116[1] * fTempPerm60) + (fTempPerm59 * (1.0f - fTempPerm60)));
			fRec115[0] = fRec116[0];
			fRec118[0] = (fTempPerm1 - (fSlow75 * ((fSlow76 * fRec118[2]) + (fConst121 * fRec118[1]))));
			fRec121[0] = (fTempPerm2 - (fSlow75 * ((fConst121 * fRec121[1]) + (fSlow76 * fRec121[2]))));
			fTempPerm61 = fabsf((fSlow75 * ((fConst120 * fRec121[0]) + (fConst122 * fRec121[2]))));
			fTempPerm62 = ((int((fRec119[1] > fTempPerm61)))?fSlow6:fSlow7);
			fRec120[0] = ((fRec120[1] * fTempPerm62) + (fTempPerm61 * (1.0f - fTempPerm62)));
			fRec119[0] = fRec120[0];
			fRec122[0] = (fTempPerm1 - (fSlow78 * ((fSlow79 * fRec122[2]) + (fConst125 * fRec122[1]))));
			fRec125[0] = (fTempPerm2 - (fSlow78 * ((fConst125 * fRec125[1]) + (fSlow79 * fRec125[2]))));
			fTempPerm63 = fabsf((fSlow78 * ((fConst124 * fRec125[0]) + (fConst126 * fRec125[2]))));
			fTempPerm64 = ((int((fRec123[1] > fTempPerm63)))?fSlow6:fSlow7);
			fRec124[0] = ((fRec124[1] * fTempPerm64) + (fTempPerm63 * (1.0f - fTempPerm64)));
			fRec123[0] = fRec124[0];
			fRec126[0] = (fTempPerm1 - (fSlow80 * ((fSlow81 * fRec126[2]) + (fConst129 * fRec126[1]))));
			fRec129[0] = (fTempPerm2 - (fSlow80 * ((fConst129 * fRec129[1]) + (fSlow81 * fRec129[2]))));
			fTempPerm65 = fabsf((fSlow80 * ((fConst128 * fRec129[0]) + (fConst130 * fRec129[2]))));
			fTempPerm66 = ((int((fRec127[1] > fTempPerm65)))?fSlow6:fSlow7);
			fRec128[0] = ((fRec128[1] * fTempPerm66) + (fTempPerm65 * (1.0f - fTempPerm66)));
			fRec127[0] = fRec128[0];
			fTempPerm67 = ((((((((((((((((((((((((((((((((fSlow2 * ((fRec0[2] * (0 - (fConst2 * fRec3[0]))) + (fConst2 * (fRec0[0] * fRec3[0])))) + (fSlow9 * ((fRec6[2] * (0 - (fConst8 * fRec7[0]))) + (fConst8 * (fRec6[0] * fRec7[0]))))) + (fSlow11 * ((fRec10[2] * (0 - (fConst12 * fRec11[0]))) + (fConst12 * (fRec10[0] * fRec11[0]))))) + (fSlow14 * ((fRec14[2] * (0 - (fConst16 * fRec15[0]))) + (fConst16 * (fRec14[0] * fRec15[0]))))) + (fSlow17 * ((fRec18[2] * (0 - (fConst20 * fRec19[0]))) + (fConst20 * (fRec18[0] * fRec19[0]))))) + (fSlow20 * ((fRec22[2] * (0 - (fConst24 * fRec23[0]))) + (fConst24 * (fRec22[0] * fRec23[0]))))) + (fSlow23 * ((fRec26[2] * (0 - (fConst28 * fRec27[0]))) + (fConst28 * (fRec26[0] * fRec27[0]))))) + (fSlow25 * ((fRec30[2] * (0 - (fConst32 * fRec31[0]))) + (fConst32 * (fRec30[0] * fRec31[0]))))) + (fSlow27 * ((fRec34[2] * (0 - (fConst36 * fRec35[0]))) + (fConst36 * (fRec34[0] * fRec35[0]))))) + (fSlow29 * ((fRec38[2] * (0 - (fConst40 * fRec39[0]))) + (fConst40 * (fRec38[0] * fRec39[0]))))) + (fSlow32 * ((fRec42[2] * (0 - (fConst44 * fRec43[0]))) + (fConst44 * (fRec42[0] * fRec43[0]))))) + (fSlow35 * ((fRec46[2] * (0 - (fConst48 * fRec47[0]))) + (fConst48 * (fRec46[0] * fRec47[0]))))) + (fSlow37 * ((fRec50[2] * (0 - (fConst52 * fRec51[0]))) + (fConst52 * (fRec50[0] * fRec51[0]))))) + (fSlow40 * ((fRec54[2] * (0 - (fConst56 * fRec55[0]))) + (fConst56 * (fRec54[0] * fRec55[0]))))) + (fSlow42 * ((fRec58[2] * (0 - (fConst60 * fRec59[0]))) + (fConst60 * (fRec58[0] * fRec59[0]))))) + (fSlow44 * ((fRec62[2] * (0 - (fConst64 * fRec63[0]))) + (fConst64 * (fRec62[0] * fRec63[0]))))) + (fSlow46 * ((fRec66[2] * (0 - (fConst68 * fRec67[0]))) + (fConst68 * (fRec66[0] * fRec67[0]))))) + (fSlow49 * ((fRec70[2] * (0 - (fConst72 * fRec71[0]))) + (fConst72 * (fRec70[0] * fRec71[0]))))) + (fSlow51 * ((fRec74[2] * (0 - (fConst76 * fRec75[0]))) + (fConst76 * (fRec74[0] * fRec75[0]))))) + (fSlow53 * ((fRec78[2] * (0 - (fConst80 * fRec79[0]))) + (fConst80 * (fRec78[0] * fRec79[0]))))) + (fSlow55 * ((fRec82[2] * (0 - (fConst84 * fRec83[0]))) + (fConst84 * (fRec82[0] * fRec83[0]))))) + (fSlow57 * ((fRec86[2] * (0 - (fConst88 * fRec87[0]))) + (fConst88 * (fRec86[0] * fRec87[0]))))) + (fSlow59 * ((fRec90[2] * (0 - (fConst92 * fRec91[0]))) + (fConst92 * (fRec90[0] * fRec91[0]))))) + (fSlow62 * ((fRec94[2] * (0 - (fConst96 * fRec95[0]))) + (fConst96 * (fRec94[0] * fRec95[0]))))) + (fSlow64 * ((fRec98[2] * (0 - (fConst100 * fRec99[0]))) + (fConst100 * (fRec98[0] * fRec99[0]))))) + (fSlow66 * ((fRec102[2] * (0 - (fConst104 * fRec103[0]))) + (fConst104 * (fRec102[0] * fRec103[0]))))) + (fSlow68 * ((fRec106[2] * (0 - (fConst108 * fRec107[0]))) + (fConst108 * (fRec106[0] * fRec107[0]))))) + (fSlow71 * ((fRec110[2] * (0 - (fConst112 * fRec111[0]))) + (fConst112 * (fRec110[0] * fRec111[0]))))) + (fSlow73 * ((fRec114[2] * (0 - (fConst116 * fRec115[0]))) + (fConst116 * (fRec114[0] * fRec115[0]))))) + (fSlow75 * ((fRec118[2] * (0 - (fConst120 * fRec119[0]))) + (fConst120 * (fRec118[0] * fRec119[0]))))) + (fSlow78 * ((fRec122[2] * (0 - (fConst124 * fRec123[0]))) + (fConst124 * (fRec122[0] * fRec123[0]))))) + (fSlow80 * ((fRec126[2] * (0 - (fConst128 * fRec127[0]))) + (fConst128 * (fRec126[0] * fRec127[0])))));
			output0[i] = (FAUSTFLOAT)fTempPerm67;
			output1[i] = (FAUSTFLOAT)fTempPerm67;
			// post processing
			fRec127[1] = fRec127[0];
			fRec128[1] = fRec128[0];
			fRec129[2] = fRec129[1]; fRec129[1] = fRec129[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec123[1] = fRec123[0];
			fRec124[1] = fRec124[0];
			fRec125[2] = fRec125[1]; fRec125[1] = fRec125[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec119[1] = fRec119[0];
			fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec118[2] = fRec118[1]; fRec118[1] = fRec118[0];
			fRec115[1] = fRec115[0];
			fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec111[1] = fRec111[0];
			fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec107[1] = fRec107[0];
			fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec103[1] = fRec103[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec99[1] = fRec99[0];
			fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec95[1] = fRec95[0];
			fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec91[1] = fRec91[0];
			fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec87[1] = fRec87[0];
			fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec83[1] = fRec83[0];
			fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec79[1] = fRec79[0];
			fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec75[1] = fRec75[0];
			fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec71[1] = fRec71[0];
			fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec67[1] = fRec67[0];
			fRec68[1] = fRec68[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec63[1] = fRec63[0];
			fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec55[1] = fRec55[0];
			fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec51[1] = fRec51[0];
			fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec47[1] = fRec47[0];
			fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec43[1] = fRec43[0];
			fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec39[1] = fRec39[0];
			fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec35[1] = fRec35[0];
			fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec34[2] = fRec34[1]; fRec34[1] = fRec34[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec27[1] = fRec27[0];
			fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec19[1] = fRec19[0];
			fRec20[1] = fRec20[0];
			fRec21[2] = fRec21[1]; fRec21[1] = fRec21[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec15[1] = fRec15[0];
			fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec11[1] = fRec11[0];
			fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec10[2] = fRec10[1]; fRec10[1] = fRec10[0];
			fRec7[1] = fRec7[0];
			fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec3[1] = fRec3[0];
			fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
			fRec2[1] = fRec2[0];
			fVec0[1] = fVec0[0];
			fRec1[1] = fRec1[0];
		}
	}
};


