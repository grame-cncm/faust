//----------------------------------------------------------
// name: "filterBank"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fcheckbox0;
	float 	fTempPerm0;
	float 	fConst0;
	float 	fConst1;
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fTempPerm1;
	float 	fVec0[2];
	float 	fConst11;
	float 	fRec10[2];
	float 	fConst12;
	float 	fConst13;
	float 	fRec9[3];
	float 	fConst14;
	float 	fRec8[3];
	float 	fConst15;
	float 	fConst16;
	float 	fConst17;
	float 	fConst18;
	float 	fConst19;
	float 	fConst20;
	float 	fTempPerm2;
	float 	fRec7[3];
	float 	fConst21;
	float 	fConst22;
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fConst26;
	float 	fTempPerm3;
	float 	fRec6[3];
	float 	fConst27;
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fTempPerm4;
	float 	fRec5[3];
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fTempPerm5;
	float 	fRec4[3];
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fTempPerm6;
	float 	fRec3[3];
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fTempPerm7;
	float 	fRec2[3];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fTempPerm8;
	float 	fRec1[3];
	float 	fConst57;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fConst62;
	float 	fTempPerm9;
	float 	fRec0[3];
	FAUSTFLOAT 	fslider0;
	float 	fRec11[2];
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fConst69;
	float 	fRec24[2];
	float 	fRec23[3];
	float 	fRec22[3];
	float 	fTempPerm10;
	float 	fVec1[2];
	float 	fConst70;
	float 	fRec21[2];
	float 	fConst71;
	float 	fRec20[3];
	float 	fConst72;
	float 	fRec19[3];
	float 	fTempPerm11;
	float 	fRec18[3];
	float 	fTempPerm12;
	float 	fRec17[3];
	float 	fTempPerm13;
	float 	fRec16[3];
	float 	fTempPerm14;
	float 	fRec15[3];
	float 	fTempPerm15;
	float 	fRec14[3];
	float 	fTempPerm16;
	float 	fRec13[3];
	float 	fTempPerm17;
	float 	fRec12[3];
	FAUSTFLOAT 	fslider1;
	float 	fRec25[2];
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fRec37[2];
	float 	fRec36[3];
	float 	fRec35[3];
	float 	fTempPerm18;
	float 	fVec2[2];
	float 	fConst80;
	float 	fRec34[2];
	float 	fConst81;
	float 	fRec33[3];
	float 	fConst82;
	float 	fRec32[3];
	float 	fTempPerm19;
	float 	fRec31[3];
	float 	fTempPerm20;
	float 	fRec30[3];
	float 	fTempPerm21;
	float 	fRec29[3];
	float 	fTempPerm22;
	float 	fRec28[3];
	float 	fTempPerm23;
	float 	fRec27[3];
	float 	fTempPerm24;
	float 	fRec26[3];
	FAUSTFLOAT 	fslider2;
	float 	fRec38[2];
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fRec49[2];
	float 	fRec48[3];
	float 	fRec47[3];
	float 	fTempPerm25;
	float 	fVec3[2];
	float 	fConst90;
	float 	fRec46[2];
	float 	fConst91;
	float 	fRec45[3];
	float 	fConst92;
	float 	fRec44[3];
	float 	fTempPerm26;
	float 	fRec43[3];
	float 	fTempPerm27;
	float 	fRec42[3];
	float 	fTempPerm28;
	float 	fRec41[3];
	float 	fTempPerm29;
	float 	fRec40[3];
	float 	fTempPerm30;
	float 	fRec39[3];
	FAUSTFLOAT 	fslider3;
	float 	fRec50[2];
	float 	fConst93;
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fRec60[2];
	float 	fRec59[3];
	float 	fRec58[3];
	float 	fTempPerm31;
	float 	fVec4[2];
	float 	fConst100;
	float 	fRec57[2];
	float 	fConst101;
	float 	fRec56[3];
	float 	fConst102;
	float 	fRec55[3];
	float 	fTempPerm32;
	float 	fRec54[3];
	float 	fTempPerm33;
	float 	fRec53[3];
	float 	fTempPerm34;
	float 	fRec52[3];
	float 	fTempPerm35;
	float 	fRec51[3];
	FAUSTFLOAT 	fslider4;
	float 	fRec61[2];
	float 	fConst103;
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fRec70[2];
	float 	fRec69[3];
	float 	fRec68[3];
	float 	fTempPerm36;
	float 	fVec5[2];
	float 	fConst110;
	float 	fRec67[2];
	float 	fConst111;
	float 	fRec66[3];
	float 	fConst112;
	float 	fRec65[3];
	float 	fTempPerm37;
	float 	fRec64[3];
	float 	fTempPerm38;
	float 	fRec63[3];
	float 	fTempPerm39;
	float 	fRec62[3];
	FAUSTFLOAT 	fslider5;
	float 	fRec71[2];
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fRec79[2];
	float 	fRec78[3];
	float 	fRec77[3];
	float 	fTempPerm40;
	float 	fVec6[2];
	float 	fConst120;
	float 	fRec76[2];
	float 	fConst121;
	float 	fRec75[3];
	float 	fConst122;
	float 	fRec74[3];
	float 	fTempPerm41;
	float 	fRec73[3];
	float 	fTempPerm42;
	float 	fRec72[3];
	FAUSTFLOAT 	fslider6;
	float 	fRec80[2];
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fRec87[2];
	float 	fRec86[3];
	float 	fRec85[3];
	float 	fTempPerm43;
	float 	fVec7[2];
	float 	fConst130;
	float 	fRec84[2];
	float 	fConst131;
	float 	fRec83[3];
	float 	fConst132;
	float 	fRec82[3];
	float 	fTempPerm44;
	float 	fRec81[3];
	FAUSTFLOAT 	fslider7;
	float 	fRec88[2];
	float 	fConst133;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fConst138;
	float 	fRec94[2];
	float 	fRec93[3];
	float 	fRec92[3];
	float 	fTempPerm45;
	float 	fVec8[2];
	float 	fConst139;
	float 	fRec91[2];
	float 	fConst140;
	float 	fRec90[3];
	float 	fConst141;
	float 	fRec89[3];
	FAUSTFLOAT 	fslider8;
	float 	fRec95[2];
	float 	fRec98[2];
	float 	fRec97[3];
	float 	fRec96[3];
	FAUSTFLOAT 	fslider9;
	float 	fRec99[2];
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("description", "Graphic Equalizer consisting of a filter-bank driving a bank of faders");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "filterBank");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 1; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fTempPerm0 = 0;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = tanf((31415.926535897932f / fConst0));
		fConst2 = (1.0f / fConst1);
		fConst3 = (((fConst2 + 0.61803398874989468f) / fConst1) + 1);
		fConst4 = (1.0f / fConst3);
		fConst5 = (1.0f / faustpower<2>(fConst1));
		fConst6 = (2 * (0 - fConst5));
		fConst7 = (1.0f / (((fConst2 + 1.6180339887498947f) / fConst1) + 1));
		fConst8 = (fConst2 + 1);
		fConst9 = (0 - ((1 - fConst2) / fConst8));
		fConst10 = (1.0f / fConst8);
		fTempPerm1 = 0;
		fConst11 = (0 - fConst2);
		fConst12 = (2 * (1 - fConst5));
		fConst13 = (((fConst2 + -1.6180339887498947f) / fConst1) + 1);
		fConst14 = (((fConst2 + -0.61803398874989468f) / fConst1) + 1);
		fConst15 = tanf((122.7184630308513f / fConst0));
		fConst16 = (1.0f / fConst15);
		fConst17 = (1.0f / (((fConst16 + 1.6180339887498949f) / fConst15) + 1));
		fConst18 = (((fConst16 + -1.6180339887498949f) / fConst15) + 1);
		fConst19 = (1.0f / faustpower<2>(fConst15));
		fConst20 = (2 * (1 - fConst19));
		fTempPerm2 = 0;
		fConst21 = tanf((245.43692606170259f / fConst0));
		fConst22 = (1.0f / fConst21);
		fConst23 = (1.0f / (((fConst22 + 1.6180339887498949f) / fConst21) + 1));
		fConst24 = (((fConst22 + -1.6180339887498949f) / fConst21) + 1);
		fConst25 = (1.0f / faustpower<2>(fConst21));
		fConst26 = (2 * (1 - fConst25));
		fTempPerm3 = 0;
		fConst27 = tanf((490.87385212340519f / fConst0));
		fConst28 = (1.0f / fConst27);
		fConst29 = (1.0f / (((fConst28 + 1.6180339887498949f) / fConst27) + 1));
		fConst30 = (((fConst28 + -1.6180339887498949f) / fConst27) + 1);
		fConst31 = (1.0f / faustpower<2>(fConst27));
		fConst32 = (2 * (1 - fConst31));
		fTempPerm4 = 0;
		fConst33 = tanf((981.74770424681037f / fConst0));
		fConst34 = (1.0f / fConst33);
		fConst35 = (1.0f / (((fConst34 + 1.6180339887498949f) / fConst33) + 1));
		fConst36 = (((fConst34 + -1.6180339887498949f) / fConst33) + 1);
		fConst37 = (1.0f / faustpower<2>(fConst33));
		fConst38 = (2 * (1 - fConst37));
		fTempPerm5 = 0;
		fConst39 = tanf((1963.4954084936207f / fConst0));
		fConst40 = (1.0f / fConst39);
		fConst41 = (1.0f / (((fConst40 + 1.6180339887498949f) / fConst39) + 1));
		fConst42 = (((fConst40 + -1.6180339887498949f) / fConst39) + 1);
		fConst43 = (1.0f / faustpower<2>(fConst39));
		fConst44 = (2 * (1 - fConst43));
		fTempPerm6 = 0;
		fConst45 = tanf((3926.9908169872415f / fConst0));
		fConst46 = (1.0f / fConst45);
		fConst47 = (1.0f / (((fConst46 + 1.6180339887498949f) / fConst45) + 1));
		fConst48 = (((fConst46 + -1.6180339887498949f) / fConst45) + 1);
		fConst49 = (1.0f / faustpower<2>(fConst45));
		fConst50 = (2 * (1 - fConst49));
		fTempPerm7 = 0;
		fConst51 = tanf((7853.981633974483f / fConst0));
		fConst52 = (1.0f / fConst51);
		fConst53 = (1.0f / (((fConst52 + 1.6180339887498949f) / fConst51) + 1));
		fConst54 = (((fConst52 + -1.6180339887498949f) / fConst51) + 1);
		fConst55 = (1.0f / faustpower<2>(fConst51));
		fConst56 = (2 * (1 - fConst55));
		fTempPerm8 = 0;
		fConst57 = tanf((15707.963267948966f / fConst0));
		fConst58 = (1.0f / fConst57);
		fConst59 = (1.0f / (((fConst58 + 1.6180339887498949f) / fConst57) + 1));
		fConst60 = (((fConst58 + -1.6180339887498949f) / fConst57) + 1);
		fConst61 = (1.0f / faustpower<2>(fConst57));
		fConst62 = (2 * (1 - fConst61));
		fTempPerm9 = 0;
		fConst63 = (((fConst58 + 0.61803398874989468f) / fConst57) + 1);
		fConst64 = (1.0f / fConst63);
		fConst65 = (2 * (0 - fConst61));
		fConst66 = (1.0f / (((fConst58 + 1.6180339887498947f) / fConst57) + 1));
		fConst67 = (fConst58 + 1);
		fConst68 = (0 - ((1 - fConst58) / fConst67));
		fConst69 = (1.0f / (fConst3 * fConst67));
		fTempPerm10 = 0;
		fConst70 = (0 - fConst58);
		fConst71 = (((fConst58 + -1.6180339887498947f) / fConst57) + 1);
		fConst72 = (((fConst58 + -0.61803398874989468f) / fConst57) + 1);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fConst73 = (((fConst52 + 0.61803398874989468f) / fConst51) + 1);
		fConst74 = (1.0f / fConst73);
		fConst75 = (2 * (0 - fConst55));
		fConst76 = (1.0f / (((fConst52 + 1.6180339887498947f) / fConst51) + 1));
		fConst77 = (fConst52 + 1);
		fConst78 = (0 - ((1 - fConst52) / fConst77));
		fConst79 = (1.0f / (fConst77 * fConst63));
		fTempPerm18 = 0;
		fConst80 = (0 - fConst52);
		fConst81 = (((fConst52 + -1.6180339887498947f) / fConst51) + 1);
		fConst82 = (((fConst52 + -0.61803398874989468f) / fConst51) + 1);
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fConst83 = (((fConst46 + 0.61803398874989468f) / fConst45) + 1);
		fConst84 = (1.0f / fConst83);
		fConst85 = (2 * (0 - fConst49));
		fConst86 = (1.0f / (((fConst46 + 1.6180339887498947f) / fConst45) + 1));
		fConst87 = (fConst46 + 1);
		fConst88 = (0 - ((1 - fConst46) / fConst87));
		fConst89 = (1.0f / (fConst73 * fConst87));
		fTempPerm25 = 0;
		fConst90 = (0 - fConst46);
		fConst91 = (((fConst46 + -1.6180339887498947f) / fConst45) + 1);
		fConst92 = (((fConst46 + -0.61803398874989468f) / fConst45) + 1);
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fConst93 = (((fConst40 + 0.61803398874989468f) / fConst39) + 1);
		fConst94 = (1.0f / fConst93);
		fConst95 = (2 * (0 - fConst43));
		fConst96 = (1.0f / (((fConst40 + 1.6180339887498947f) / fConst39) + 1));
		fConst97 = (fConst40 + 1);
		fConst98 = (0 - ((1 - fConst40) / fConst97));
		fConst99 = (1.0f / (fConst83 * fConst97));
		fTempPerm31 = 0;
		fConst100 = (0 - fConst40);
		fConst101 = (((fConst40 + -1.6180339887498947f) / fConst39) + 1);
		fConst102 = (((fConst40 + -0.61803398874989468f) / fConst39) + 1);
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fConst103 = (((fConst34 + 0.61803398874989468f) / fConst33) + 1);
		fConst104 = (1.0f / fConst103);
		fConst105 = (2 * (0 - fConst37));
		fConst106 = (1.0f / (((fConst34 + 1.6180339887498947f) / fConst33) + 1));
		fConst107 = (fConst34 + 1);
		fConst108 = (0 - ((1 - fConst34) / fConst107));
		fConst109 = (1.0f / (fConst93 * fConst107));
		fTempPerm36 = 0;
		fConst110 = (0 - fConst34);
		fConst111 = (((fConst34 + -1.6180339887498947f) / fConst33) + 1);
		fConst112 = (((fConst34 + -0.61803398874989468f) / fConst33) + 1);
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fConst113 = (((fConst28 + 0.61803398874989468f) / fConst27) + 1);
		fConst114 = (1.0f / fConst113);
		fConst115 = (2 * (0 - fConst31));
		fConst116 = (1.0f / (((fConst28 + 1.6180339887498947f) / fConst27) + 1));
		fConst117 = (fConst28 + 1);
		fConst118 = (0 - ((1 - fConst28) / fConst117));
		fConst119 = (1.0f / (fConst103 * fConst117));
		fTempPerm40 = 0;
		fConst120 = (0 - fConst28);
		fConst121 = (((fConst28 + -1.6180339887498947f) / fConst27) + 1);
		fConst122 = (((fConst28 + -0.61803398874989468f) / fConst27) + 1);
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fConst123 = (((fConst22 + 0.61803398874989468f) / fConst21) + 1);
		fConst124 = (1.0f / fConst123);
		fConst125 = (2 * (0 - fConst25));
		fConst126 = (1.0f / (((fConst22 + 1.6180339887498947f) / fConst21) + 1));
		fConst127 = (fConst22 + 1);
		fConst128 = (0 - ((1 - fConst22) / fConst127));
		fConst129 = (1.0f / (fConst113 * fConst127));
		fTempPerm43 = 0;
		fConst130 = (0 - fConst22);
		fConst131 = (((fConst22 + -1.6180339887498947f) / fConst21) + 1);
		fConst132 = (((fConst22 + -0.61803398874989468f) / fConst21) + 1);
		fTempPerm44 = 0;
		fConst133 = (1.0f / (((fConst16 + 0.61803398874989468f) / fConst15) + 1));
		fConst134 = (2 * (0 - fConst19));
		fConst135 = (1.0f / (((fConst16 + 1.6180339887498947f) / fConst15) + 1));
		fConst136 = (fConst16 + 1);
		fConst137 = (0 - ((1 - fConst16) / fConst136));
		fConst138 = (1.0f / (fConst123 * fConst136));
		fTempPerm45 = 0;
		fConst139 = (0 - fConst16);
		fConst140 = (((fConst16 + -1.6180339887498947f) / fConst15) + 1);
		fConst141 = (((fConst16 + -0.61803398874989468f) / fConst15) + 1);
	}
	virtual void instanceResetUserInterface() {
		fcheckbox0 = 0.0;
		fslider0 = -10.0f;
		fslider1 = -10.0f;
		fslider2 = -10.0f;
		fslider3 = -10.0f;
		fslider4 = -10.0f;
		fslider5 = -10.0f;
		fslider6 = -10.0f;
		fslider7 = -10.0f;
		fslider8 = -10.0f;
		fslider9 = -10.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) fVec0[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<3; i++) fRec9[i] = 0;
		for (int i=0; i<3; i++) fRec8[i] = 0;
		for (int i=0; i<3; i++) fRec7[i] = 0;
		for (int i=0; i<3; i++) fRec6[i] = 0;
		for (int i=0; i<3; i++) fRec5[i] = 0;
		for (int i=0; i<3; i++) fRec4[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<3; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec19[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<3; i++) fRec14[i] = 0;
		for (int i=0; i<3; i++) fRec13[i] = 0;
		for (int i=0; i<3; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec38[i] = 0;
		for (int i=0; i<2; i++) fRec49[i] = 0;
		for (int i=0; i<3; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<3; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<2; i++) fRec50[i] = 0;
		for (int i=0; i<2; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<3; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<2; i++) fRec61[i] = 0;
		for (int i=0; i<2; i++) fRec70[i] = 0;
		for (int i=0; i<3; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<3; i++) fRec62[i] = 0;
		for (int i=0; i<2; i++) fRec71[i] = 0;
		for (int i=0; i<2; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec72[i] = 0;
		for (int i=0; i<2; i++) fRec80[i] = 0;
		for (int i=0; i<2; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fRec84[i] = 0;
		for (int i=0; i<3; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<2; i++) fRec88[i] = 0;
		for (int i=0; i<2; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec91[i] = 0;
		for (int i=0; i<3; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<2; i++) fRec95[i] = 0;
		for (int i=0; i<2; i++) fRec98[i] = 0;
		for (int i=0; i<3; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<2; i++) fRec99[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openVerticalBox("CONSTANT-Q FILTER BANK (Butterworth dyadic tree)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the filter-bank has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider9, "1", "");
		ui_interface->declare(&fslider9, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider9, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider9, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider8, "2", "");
		ui_interface->declare(&fslider8, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider8, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider8, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider7, "3", "");
		ui_interface->declare(&fslider7, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider7, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider7, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider6, "4", "");
		ui_interface->declare(&fslider6, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider6, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider6, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider5, "5", "");
		ui_interface->declare(&fslider5, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider5, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider5, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider4, "6", "");
		ui_interface->declare(&fslider4, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider4, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider4, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider3, "7", "");
		ui_interface->declare(&fslider3, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider3, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider3, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider2, "8", "");
		ui_interface->declare(&fslider2, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider2, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider2, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider1, "9", "");
		ui_interface->declare(&fslider1, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider1, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider1, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider0, "10", "");
		ui_interface->declare(&fslider0, "tooltip", "Bandpass filter   gain in dB");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addVerticalSlider("0x00", &fslider0, -10.0f, -70.0f, 10.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		int 	iSlow0 = int(float(fcheckbox0));
		float 	fSlow1 = (0.0010000000000000009f * float(fslider0));
		float 	fSlow2 = (0.0010000000000000009f * float(fslider1));
		float 	fSlow3 = (0.0010000000000000009f * float(fslider2));
		float 	fSlow4 = (0.0010000000000000009f * float(fslider3));
		float 	fSlow5 = (0.0010000000000000009f * float(fslider4));
		float 	fSlow6 = (0.0010000000000000009f * float(fslider5));
		float 	fSlow7 = (0.0010000000000000009f * float(fslider6));
		float 	fSlow8 = (0.0010000000000000009f * float(fslider7));
		float 	fSlow9 = (0.0010000000000000009f * float(fslider8));
		float 	fSlow10 = (0.0010000000000000009f * float(fslider9));
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			fTempPerm0 = (float)input0[i];
			fTempPerm1 = ((iSlow0)?0:fTempPerm0);
			fVec0[0] = fTempPerm1;
			fRec10[0] = ((fConst9 * fRec10[1]) + (fConst10 * ((fConst2 * fVec0[0]) + (fConst11 * fVec0[1]))));
			fRec9[0] = (fRec10[0] - (fConst7 * ((fConst12 * fRec9[1]) + (fConst13 * fRec9[2]))));
			fRec8[0] = ((fConst7 * (((fConst5 * fRec9[0]) + (fConst6 * fRec9[1])) + (fConst5 * fRec9[2]))) - (fConst4 * ((fConst12 * fRec8[1]) + (fConst14 * fRec8[2]))));
			fTempPerm2 = (fConst20 * fRec7[1]);
			fRec7[0] = ((fConst4 * (((fConst6 * fRec8[1]) + (fConst5 * fRec8[0])) + (fConst5 * fRec8[2]))) - (fConst17 * ((fConst18 * fRec7[2]) + fTempPerm2)));
			fTempPerm3 = (fConst26 * fRec6[1]);
			fRec6[0] = ((fRec7[2] + (fConst17 * (fTempPerm2 + (fConst18 * fRec7[0])))) - (fConst23 * ((fConst24 * fRec6[2]) + fTempPerm3)));
			fTempPerm4 = (fConst32 * fRec5[1]);
			fRec5[0] = ((fRec6[2] + (fConst23 * (fTempPerm3 + (fConst24 * fRec6[0])))) - (fConst29 * ((fConst30 * fRec5[2]) + fTempPerm4)));
			fTempPerm5 = (fConst38 * fRec4[1]);
			fRec4[0] = ((fRec5[2] + (fConst29 * (fTempPerm4 + (fConst30 * fRec5[0])))) - (fConst35 * ((fConst36 * fRec4[2]) + fTempPerm5)));
			fTempPerm6 = (fConst44 * fRec3[1]);
			fRec3[0] = ((fRec4[2] + (fConst35 * (fTempPerm5 + (fConst36 * fRec4[0])))) - (fConst41 * ((fConst42 * fRec3[2]) + fTempPerm6)));
			fTempPerm7 = (fConst50 * fRec2[1]);
			fRec2[0] = ((fRec3[2] + (fConst41 * (fTempPerm6 + (fConst42 * fRec3[0])))) - (fConst47 * ((fConst48 * fRec2[2]) + fTempPerm7)));
			fTempPerm8 = (fConst56 * fRec1[1]);
			fRec1[0] = ((fRec2[2] + (fConst47 * (fTempPerm7 + (fConst48 * fRec2[0])))) - (fConst53 * ((fConst54 * fRec1[2]) + fTempPerm8)));
			fTempPerm9 = (fConst62 * fRec0[1]);
			fRec0[0] = ((fRec1[2] + (fConst53 * (fTempPerm8 + (fConst54 * fRec1[0])))) - (fConst59 * ((fConst60 * fRec0[2]) + fTempPerm9)));
			fRec11[0] = (fSlow1 + (0.999f * fRec11[1]));
			fRec24[0] = ((fConst9 * fRec24[1]) + (fConst10 * (fVec0[0] + fVec0[1])));
			fRec23[0] = (fRec24[0] - (fConst7 * ((fConst12 * fRec23[1]) + (fConst13 * fRec23[2]))));
			fRec22[0] = ((fConst7 * (fRec23[2] + (fRec23[0] + (2.0f * fRec23[1])))) - (fConst4 * ((fConst12 * fRec22[1]) + (fConst14 * fRec22[2]))));
			fTempPerm10 = (fRec22[2] + (fRec22[0] + (2.0f * fRec22[1])));
			fVec1[0] = fTempPerm10;
			fRec21[0] = ((fConst68 * fRec21[1]) + (fConst69 * ((fConst58 * fVec1[0]) + (fConst70 * fVec1[1]))));
			fRec20[0] = (fRec21[0] - (fConst66 * ((fConst62 * fRec20[1]) + (fConst71 * fRec20[2]))));
			fRec19[0] = ((fConst66 * (((fConst61 * fRec20[0]) + (fConst65 * fRec20[1])) + (fConst61 * fRec20[2]))) - (fConst64 * ((fConst62 * fRec19[1]) + (fConst72 * fRec19[2]))));
			fTempPerm11 = (fConst20 * fRec18[1]);
			fRec18[0] = ((fConst64 * (((fConst65 * fRec19[1]) + (fConst61 * fRec19[0])) + (fConst61 * fRec19[2]))) - (fConst17 * (fTempPerm11 + (fConst18 * fRec18[2]))));
			fTempPerm12 = (fConst26 * fRec17[1]);
			fRec17[0] = ((fRec18[2] + (fConst17 * (fTempPerm11 + (fConst18 * fRec18[0])))) - (fConst23 * (fTempPerm12 + (fConst24 * fRec17[2]))));
			fTempPerm13 = (fConst32 * fRec16[1]);
			fRec16[0] = ((fRec17[2] + (fConst23 * (fTempPerm12 + (fConst24 * fRec17[0])))) - (fConst29 * (fTempPerm13 + (fConst30 * fRec16[2]))));
			fTempPerm14 = (fConst38 * fRec15[1]);
			fRec15[0] = ((fRec16[2] + (fConst29 * (fTempPerm13 + (fConst30 * fRec16[0])))) - (fConst35 * (fTempPerm14 + (fConst36 * fRec15[2]))));
			fTempPerm15 = (fConst44 * fRec14[1]);
			fRec14[0] = ((fRec15[2] + (fConst35 * (fTempPerm14 + (fConst36 * fRec15[0])))) - (fConst41 * (fTempPerm15 + (fConst42 * fRec14[2]))));
			fTempPerm16 = (fConst50 * fRec13[1]);
			fRec13[0] = ((fRec14[2] + (fConst41 * (fTempPerm15 + (fConst42 * fRec14[0])))) - (fConst47 * (fTempPerm16 + (fConst48 * fRec13[2]))));
			fTempPerm17 = (fConst56 * fRec12[1]);
			fRec12[0] = ((fRec13[2] + (fConst47 * (fTempPerm16 + (fConst48 * fRec13[0])))) - (fConst53 * (fTempPerm17 + (fConst54 * fRec12[2]))));
			fRec25[0] = (fSlow2 + (0.999f * fRec25[1]));
			fRec37[0] = ((fConst68 * fRec37[1]) + (fConst69 * (fVec1[0] + fVec1[1])));
			fRec36[0] = (fRec37[0] - (fConst66 * ((fConst62 * fRec36[1]) + (fConst71 * fRec36[2]))));
			fRec35[0] = ((fConst66 * (fRec36[2] + (fRec36[0] + (2.0f * fRec36[1])))) - (fConst64 * ((fConst62 * fRec35[1]) + (fConst72 * fRec35[2]))));
			fTempPerm18 = (fRec35[2] + (fRec35[0] + (2.0f * fRec35[1])));
			fVec2[0] = fTempPerm18;
			fRec34[0] = ((fConst78 * fRec34[1]) + (fConst79 * ((fConst52 * fVec2[0]) + (fConst80 * fVec2[1]))));
			fRec33[0] = (fRec34[0] - (fConst76 * ((fConst56 * fRec33[1]) + (fConst81 * fRec33[2]))));
			fRec32[0] = ((fConst76 * (((fConst55 * fRec33[0]) + (fConst75 * fRec33[1])) + (fConst55 * fRec33[2]))) - (fConst74 * ((fConst56 * fRec32[1]) + (fConst82 * fRec32[2]))));
			fTempPerm19 = (fConst20 * fRec31[1]);
			fRec31[0] = ((fConst74 * (((fConst75 * fRec32[1]) + (fConst55 * fRec32[0])) + (fConst55 * fRec32[2]))) - (fConst17 * (fTempPerm19 + (fConst18 * fRec31[2]))));
			fTempPerm20 = (fConst26 * fRec30[1]);
			fRec30[0] = ((fRec31[2] + (fConst17 * (fTempPerm19 + (fConst18 * fRec31[0])))) - (fConst23 * (fTempPerm20 + (fConst24 * fRec30[2]))));
			fTempPerm21 = (fConst32 * fRec29[1]);
			fRec29[0] = ((fRec30[2] + (fConst23 * (fTempPerm20 + (fConst24 * fRec30[0])))) - (fConst29 * (fTempPerm21 + (fConst30 * fRec29[2]))));
			fTempPerm22 = (fConst38 * fRec28[1]);
			fRec28[0] = ((fRec29[2] + (fConst29 * (fTempPerm21 + (fConst30 * fRec29[0])))) - (fConst35 * (fTempPerm22 + (fConst36 * fRec28[2]))));
			fTempPerm23 = (fConst44 * fRec27[1]);
			fRec27[0] = ((fRec28[2] + (fConst35 * (fTempPerm22 + (fConst36 * fRec28[0])))) - (fConst41 * (fTempPerm23 + (fConst42 * fRec27[2]))));
			fTempPerm24 = (fConst50 * fRec26[1]);
			fRec26[0] = ((fRec27[2] + (fConst41 * (fTempPerm23 + (fConst42 * fRec27[0])))) - (fConst47 * (fTempPerm24 + (fConst48 * fRec26[2]))));
			fRec38[0] = (fSlow3 + (0.999f * fRec38[1]));
			fRec49[0] = ((fConst78 * fRec49[1]) + (fConst79 * (fVec2[0] + fVec2[1])));
			fRec48[0] = (fRec49[0] - (fConst76 * ((fConst56 * fRec48[1]) + (fConst81 * fRec48[2]))));
			fRec47[0] = ((fConst76 * (fRec48[2] + (fRec48[0] + (2.0f * fRec48[1])))) - (fConst74 * ((fConst56 * fRec47[1]) + (fConst82 * fRec47[2]))));
			fTempPerm25 = (fRec47[2] + (fRec47[0] + (2.0f * fRec47[1])));
			fVec3[0] = fTempPerm25;
			fRec46[0] = ((fConst88 * fRec46[1]) + (fConst89 * ((fConst46 * fVec3[0]) + (fConst90 * fVec3[1]))));
			fRec45[0] = (fRec46[0] - (fConst86 * ((fConst50 * fRec45[1]) + (fConst91 * fRec45[2]))));
			fRec44[0] = ((fConst86 * (((fConst49 * fRec45[0]) + (fConst85 * fRec45[1])) + (fConst49 * fRec45[2]))) - (fConst84 * ((fConst50 * fRec44[1]) + (fConst92 * fRec44[2]))));
			fTempPerm26 = (fConst20 * fRec43[1]);
			fRec43[0] = ((fConst84 * (((fConst85 * fRec44[1]) + (fConst49 * fRec44[0])) + (fConst49 * fRec44[2]))) - (fConst17 * (fTempPerm26 + (fConst18 * fRec43[2]))));
			fTempPerm27 = (fConst26 * fRec42[1]);
			fRec42[0] = ((fRec43[2] + (fConst17 * (fTempPerm26 + (fConst18 * fRec43[0])))) - (fConst23 * (fTempPerm27 + (fConst24 * fRec42[2]))));
			fTempPerm28 = (fConst32 * fRec41[1]);
			fRec41[0] = ((fRec42[2] + (fConst23 * (fTempPerm27 + (fConst24 * fRec42[0])))) - (fConst29 * (fTempPerm28 + (fConst30 * fRec41[2]))));
			fTempPerm29 = (fConst38 * fRec40[1]);
			fRec40[0] = ((fRec41[2] + (fConst29 * (fTempPerm28 + (fConst30 * fRec41[0])))) - (fConst35 * (fTempPerm29 + (fConst36 * fRec40[2]))));
			fTempPerm30 = (fConst44 * fRec39[1]);
			fRec39[0] = ((fRec40[2] + (fConst35 * (fTempPerm29 + (fConst36 * fRec40[0])))) - (fConst41 * (fTempPerm30 + (fConst42 * fRec39[2]))));
			fRec50[0] = (fSlow4 + (0.999f * fRec50[1]));
			fRec60[0] = ((fConst88 * fRec60[1]) + (fConst89 * (fVec3[0] + fVec3[1])));
			fRec59[0] = (fRec60[0] - (fConst86 * ((fConst50 * fRec59[1]) + (fConst91 * fRec59[2]))));
			fRec58[0] = ((fConst86 * (fRec59[2] + (fRec59[0] + (2.0f * fRec59[1])))) - (fConst84 * ((fConst50 * fRec58[1]) + (fConst92 * fRec58[2]))));
			fTempPerm31 = (fRec58[2] + (fRec58[0] + (2.0f * fRec58[1])));
			fVec4[0] = fTempPerm31;
			fRec57[0] = ((fConst98 * fRec57[1]) + (fConst99 * ((fConst40 * fVec4[0]) + (fConst100 * fVec4[1]))));
			fRec56[0] = (fRec57[0] - (fConst96 * ((fConst44 * fRec56[1]) + (fConst101 * fRec56[2]))));
			fRec55[0] = ((fConst96 * (((fConst43 * fRec56[0]) + (fConst95 * fRec56[1])) + (fConst43 * fRec56[2]))) - (fConst94 * ((fConst44 * fRec55[1]) + (fConst102 * fRec55[2]))));
			fTempPerm32 = (fConst20 * fRec54[1]);
			fRec54[0] = ((fConst94 * (((fConst95 * fRec55[1]) + (fConst43 * fRec55[0])) + (fConst43 * fRec55[2]))) - (fConst17 * (fTempPerm32 + (fConst18 * fRec54[2]))));
			fTempPerm33 = (fConst26 * fRec53[1]);
			fRec53[0] = ((fRec54[2] + (fConst17 * (fTempPerm32 + (fConst18 * fRec54[0])))) - (fConst23 * (fTempPerm33 + (fConst24 * fRec53[2]))));
			fTempPerm34 = (fConst32 * fRec52[1]);
			fRec52[0] = ((fRec53[2] + (fConst23 * (fTempPerm33 + (fConst24 * fRec53[0])))) - (fConst29 * (fTempPerm34 + (fConst30 * fRec52[2]))));
			fTempPerm35 = (fConst38 * fRec51[1]);
			fRec51[0] = ((fRec52[2] + (fConst29 * (fTempPerm34 + (fConst30 * fRec52[0])))) - (fConst35 * (fTempPerm35 + (fConst36 * fRec51[2]))));
			fRec61[0] = (fSlow5 + (0.999f * fRec61[1]));
			fRec70[0] = ((fConst98 * fRec70[1]) + (fConst99 * (fVec4[0] + fVec4[1])));
			fRec69[0] = (fRec70[0] - (fConst96 * ((fConst44 * fRec69[1]) + (fConst101 * fRec69[2]))));
			fRec68[0] = ((fConst96 * (fRec69[2] + (fRec69[0] + (2.0f * fRec69[1])))) - (fConst94 * ((fConst44 * fRec68[1]) + (fConst102 * fRec68[2]))));
			fTempPerm36 = (fRec68[2] + (fRec68[0] + (2.0f * fRec68[1])));
			fVec5[0] = fTempPerm36;
			fRec67[0] = ((fConst108 * fRec67[1]) + (fConst109 * ((fConst34 * fVec5[0]) + (fConst110 * fVec5[1]))));
			fRec66[0] = (fRec67[0] - (fConst106 * ((fConst38 * fRec66[1]) + (fConst111 * fRec66[2]))));
			fRec65[0] = ((fConst106 * (((fConst37 * fRec66[0]) + (fConst105 * fRec66[1])) + (fConst37 * fRec66[2]))) - (fConst104 * ((fConst38 * fRec65[1]) + (fConst112 * fRec65[2]))));
			fTempPerm37 = (fConst20 * fRec64[1]);
			fRec64[0] = ((fConst104 * (((fConst105 * fRec65[1]) + (fConst37 * fRec65[0])) + (fConst37 * fRec65[2]))) - (fConst17 * (fTempPerm37 + (fConst18 * fRec64[2]))));
			fTempPerm38 = (fConst26 * fRec63[1]);
			fRec63[0] = ((fRec64[2] + (fConst17 * (fTempPerm37 + (fConst18 * fRec64[0])))) - (fConst23 * (fTempPerm38 + (fConst24 * fRec63[2]))));
			fTempPerm39 = (fConst32 * fRec62[1]);
			fRec62[0] = ((fRec63[2] + (fConst23 * (fTempPerm38 + (fConst24 * fRec63[0])))) - (fConst29 * (fTempPerm39 + (fConst30 * fRec62[2]))));
			fRec71[0] = (fSlow6 + (0.999f * fRec71[1]));
			fRec79[0] = ((fConst108 * fRec79[1]) + (fConst109 * (fVec5[0] + fVec5[1])));
			fRec78[0] = (fRec79[0] - (fConst106 * ((fConst38 * fRec78[1]) + (fConst111 * fRec78[2]))));
			fRec77[0] = ((fConst106 * (fRec78[2] + (fRec78[0] + (2.0f * fRec78[1])))) - (fConst104 * ((fConst38 * fRec77[1]) + (fConst112 * fRec77[2]))));
			fTempPerm40 = (fRec77[2] + (fRec77[0] + (2.0f * fRec77[1])));
			fVec6[0] = fTempPerm40;
			fRec76[0] = ((fConst118 * fRec76[1]) + (fConst119 * ((fConst28 * fVec6[0]) + (fConst120 * fVec6[1]))));
			fRec75[0] = (fRec76[0] - (fConst116 * ((fConst32 * fRec75[1]) + (fConst121 * fRec75[2]))));
			fRec74[0] = ((fConst116 * (((fConst31 * fRec75[0]) + (fConst115 * fRec75[1])) + (fConst31 * fRec75[2]))) - (fConst114 * ((fConst32 * fRec74[1]) + (fConst122 * fRec74[2]))));
			fTempPerm41 = (fConst20 * fRec73[1]);
			fRec73[0] = ((fConst114 * (((fConst115 * fRec74[1]) + (fConst31 * fRec74[0])) + (fConst31 * fRec74[2]))) - (fConst17 * (fTempPerm41 + (fConst18 * fRec73[2]))));
			fTempPerm42 = (fConst26 * fRec72[1]);
			fRec72[0] = ((fRec73[2] + (fConst17 * (fTempPerm41 + (fConst18 * fRec73[0])))) - (fConst23 * (fTempPerm42 + (fConst24 * fRec72[2]))));
			fRec80[0] = (fSlow7 + (0.999f * fRec80[1]));
			fRec87[0] = ((fConst118 * fRec87[1]) + (fConst119 * (fVec6[0] + fVec6[1])));
			fRec86[0] = (fRec87[0] - (fConst116 * ((fConst32 * fRec86[1]) + (fConst121 * fRec86[2]))));
			fRec85[0] = ((fConst116 * (fRec86[2] + (fRec86[0] + (2.0f * fRec86[1])))) - (fConst114 * ((fConst32 * fRec85[1]) + (fConst122 * fRec85[2]))));
			fTempPerm43 = (fRec85[2] + (fRec85[0] + (2.0f * fRec85[1])));
			fVec7[0] = fTempPerm43;
			fRec84[0] = ((fConst128 * fRec84[1]) + (fConst129 * ((fConst22 * fVec7[0]) + (fConst130 * fVec7[1]))));
			fRec83[0] = (fRec84[0] - (fConst126 * ((fConst26 * fRec83[1]) + (fConst131 * fRec83[2]))));
			fRec82[0] = ((fConst126 * (((fConst25 * fRec83[0]) + (fConst125 * fRec83[1])) + (fConst25 * fRec83[2]))) - (fConst124 * ((fConst26 * fRec82[1]) + (fConst132 * fRec82[2]))));
			fTempPerm44 = (fConst20 * fRec81[1]);
			fRec81[0] = ((fConst124 * (((fConst125 * fRec82[1]) + (fConst25 * fRec82[0])) + (fConst25 * fRec82[2]))) - (fConst17 * (fTempPerm44 + (fConst18 * fRec81[2]))));
			fRec88[0] = (fSlow8 + (0.999f * fRec88[1]));
			fRec94[0] = ((fConst128 * fRec94[1]) + (fConst129 * (fVec7[0] + fVec7[1])));
			fRec93[0] = (fRec94[0] - (fConst126 * ((fConst26 * fRec93[1]) + (fConst131 * fRec93[2]))));
			fRec92[0] = ((fConst126 * (fRec93[2] + (fRec93[0] + (2.0f * fRec93[1])))) - (fConst124 * ((fConst26 * fRec92[1]) + (fConst132 * fRec92[2]))));
			fTempPerm45 = (fRec92[2] + (fRec92[0] + (2.0f * fRec92[1])));
			fVec8[0] = fTempPerm45;
			fRec91[0] = ((fConst137 * fRec91[1]) + (fConst138 * ((fConst16 * fVec8[0]) + (fConst139 * fVec8[1]))));
			fRec90[0] = (fRec91[0] - (fConst135 * ((fConst20 * fRec90[1]) + (fConst140 * fRec90[2]))));
			fRec89[0] = ((fConst135 * (((fConst19 * fRec90[0]) + (fConst134 * fRec90[1])) + (fConst19 * fRec90[2]))) - (fConst133 * ((fConst20 * fRec89[1]) + (fConst141 * fRec89[2]))));
			fRec95[0] = (fSlow9 + (0.999f * fRec95[1]));
			fRec98[0] = ((fConst137 * fRec98[1]) + (fConst138 * (fVec8[0] + fVec8[1])));
			fRec97[0] = (fRec98[0] - (fConst135 * ((fConst20 * fRec97[1]) + (fConst140 * fRec97[2]))));
			fRec96[0] = ((fConst135 * (fRec97[2] + (fRec97[0] + (2.0f * fRec97[1])))) - (fConst133 * ((fConst20 * fRec96[1]) + (fConst141 * fRec96[2]))));
			fRec99[0] = (fSlow10 + (0.999f * fRec99[1]));
			output0[i] = (FAUSTFLOAT)((iSlow0)?fTempPerm0:((((((((((fRec0[2] + (fConst59 * (fTempPerm9 + (fConst60 * fRec0[0])))) * powf(10,(0.050000000000000003f * fRec11[0]))) + ((fRec12[2] + (fConst53 * (fTempPerm17 + (fConst54 * fRec12[0])))) * powf(10,(0.050000000000000003f * fRec25[0])))) + ((fRec26[2] + (fConst47 * (fTempPerm24 + (fConst48 * fRec26[0])))) * powf(10,(0.050000000000000003f * fRec38[0])))) + ((fRec39[2] + (fConst41 * (fTempPerm30 + (fConst42 * fRec39[0])))) * powf(10,(0.050000000000000003f * fRec50[0])))) + ((fRec51[2] + (fConst35 * (fTempPerm35 + (fConst36 * fRec51[0])))) * powf(10,(0.050000000000000003f * fRec61[0])))) + ((fRec62[2] + (fConst29 * (fTempPerm39 + (fConst30 * fRec62[0])))) * powf(10,(0.050000000000000003f * fRec71[0])))) + ((fRec72[2] + (fConst23 * (fTempPerm42 + (fConst24 * fRec72[0])))) * powf(10,(0.050000000000000003f * fRec80[0])))) + ((fRec81[2] + (fConst17 * (fTempPerm44 + (fConst18 * fRec81[0])))) * powf(10,(0.050000000000000003f * fRec88[0])))) + (fConst133 * (((((fConst134 * fRec89[1]) + (fConst19 * fRec89[0])) + (fConst19 * fRec89[2])) * powf(10,(0.050000000000000003f * fRec95[0]))) + ((fRec96[2] + (fRec96[0] + (2.0f * fRec96[1]))) * powf(10,(0.050000000000000003f * fRec99[0])))))));
			// post processing
			fRec99[1] = fRec99[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec97[2] = fRec97[1]; fRec97[1] = fRec97[0];
			fRec98[1] = fRec98[0];
			fRec95[1] = fRec95[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec90[2] = fRec90[1]; fRec90[1] = fRec90[0];
			fRec91[1] = fRec91[0];
			fVec8[1] = fVec8[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[1] = fRec94[0];
			fRec88[1] = fRec88[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec83[2] = fRec83[1]; fRec83[1] = fRec83[0];
			fRec84[1] = fRec84[0];
			fVec7[1] = fVec7[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[1] = fRec87[0];
			fRec80[1] = fRec80[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec76[1] = fRec76[0];
			fVec6[1] = fVec6[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[1] = fRec79[0];
			fRec71[1] = fRec71[0];
			fRec62[2] = fRec62[1]; fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[1] = fRec67[0];
			fVec5[1] = fVec5[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec69[2] = fRec69[1]; fRec69[1] = fRec69[0];
			fRec70[1] = fRec70[0];
			fRec61[1] = fRec61[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec55[2] = fRec55[1]; fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[1] = fRec57[0];
			fVec4[1] = fVec4[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[1] = fRec60[0];
			fRec50[1] = fRec50[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec41[2] = fRec41[1]; fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[1] = fRec46[0];
			fVec3[1] = fVec3[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec48[2] = fRec48[1]; fRec48[1] = fRec48[0];
			fRec49[1] = fRec49[0];
			fRec38[1] = fRec38[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec34[1] = fRec34[0];
			fVec2[1] = fVec2[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[1] = fRec37[0];
			fRec25[1] = fRec25[0];
			fRec12[2] = fRec12[1]; fRec12[1] = fRec12[0];
			fRec13[2] = fRec13[1]; fRec13[1] = fRec13[0];
			fRec14[2] = fRec14[1]; fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec19[2] = fRec19[1]; fRec19[1] = fRec19[0];
			fRec20[2] = fRec20[1]; fRec20[1] = fRec20[0];
			fRec21[1] = fRec21[0];
			fVec1[1] = fVec1[0];
			fRec22[2] = fRec22[1]; fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[1] = fRec24[0];
			fRec11[1] = fRec11[0];
			fRec0[2] = fRec0[1]; fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec4[2] = fRec4[1]; fRec4[1] = fRec4[0];
			fRec5[2] = fRec5[1]; fRec5[1] = fRec5[0];
			fRec6[2] = fRec6[1]; fRec6[1] = fRec6[0];
			fRec7[2] = fRec7[1]; fRec7[1] = fRec7[0];
			fRec8[2] = fRec8[1]; fRec8[1] = fRec8[0];
			fRec9[2] = fRec9[1]; fRec9[1] = fRec9[0];
			fRec10[1] = fRec10[0];
			fVec0[1] = fVec0[0];
		}
	}
};


