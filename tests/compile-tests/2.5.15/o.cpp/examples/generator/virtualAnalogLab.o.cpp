//----------------------------------------------------------
// name: "virtualAnalogLab"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[4];
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	float 	fRec4[2];
	FAUSTFLOAT 	fslider4;
	FAUSTFLOAT 	fentry0;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	FAUSTFLOAT 	fslider5;
	FAUSTFLOAT 	fslider6;
	float 	fRec6[2];
	float 	fTempPerm0;
	float 	fVec1[2];
	float 	fTempPerm1;
	float 	fRec5[2];
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fVec2[2];
	float 	fTempPerm5;
	float 	fVec3[2];
	float 	fTempPerm6;
	float 	fVec4[2];
	float 	fTempPerm7;
	float 	fVec5[2];
	float 	fConst17;
	float 	fTempPerm8;
	float 	fVec6[2];
	float 	fTempPerm9;
	float 	fVec7[2];
	float 	fConst18;
	FAUSTFLOAT 	fslider7;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fVec8[2];
	float 	fTempPerm12;
	float 	fRec7[2];
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fVec9[2];
	float 	fTempPerm16;
	float 	fVec10[2];
	float 	fTempPerm17;
	float 	fVec11[2];
	float 	fTempPerm18;
	float 	fVec12[2];
	float 	fTempPerm19;
	float 	fVec13[2];
	float 	fTempPerm20;
	float 	fVec14[2];
	FAUSTFLOAT 	fslider8;
	float 	fTempPerm21;
	float 	fTempPerm22;
	float 	fVec15[2];
	float 	fTempPerm23;
	float 	fRec8[2];
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fTempPerm26;
	float 	fVec16[2];
	float 	fTempPerm27;
	float 	fVec17[2];
	float 	fTempPerm28;
	float 	fVec18[2];
	float 	fTempPerm29;
	float 	fVec19[2];
	float 	fTempPerm30;
	float 	fVec20[2];
	float 	fTempPerm31;
	float 	fVec21[2];
	float 	fConst19;
	FAUSTFLOAT 	fslider9;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fVec22[2];
	float 	fTempPerm34;
	float 	fRec9[2];
	float 	fTempPerm35;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fVec23[2];
	float 	fTempPerm38;
	int 	IOTA;
	float 	fVec24[4096];
	float 	fConst20;
	float 	fTempPerm39;
	int 	iTempPerm40;
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fVec25[2];
	float 	fTempPerm45;
	float 	fRec10[2];
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fVec26[2];
	float 	fTempPerm49;
	float 	fVec27[4096];
	float 	fTempPerm50;
	int 	iTempPerm51;
	float 	fTempPerm52;
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fVec28[2];
	float 	fTempPerm56;
	float 	fRec11[2];
	float 	fTempPerm57;
	float 	fTempPerm58;
	float 	fTempPerm59;
	float 	fVec29[2];
	float 	fTempPerm60;
	float 	fVec30[4096];
	float 	fTempPerm61;
	int 	iTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fConst21;
	FAUSTFLOAT 	fslider10;
	float 	fRec12[2];
	float 	fRec13[2];
	float 	fRec14[2];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fslider12;
	float 	fRec15[2];
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	int 	iTempPerm68;
	float 	fTempPerm69;
	int 	iTempPerm70;
	float 	fTempPerm71;
	float 	fTempPerm72;
	float 	fTempPerm73;
	int 	iTempPerm74;
	float 	fTempPerm75;
	int 	iTempPerm76;
	float 	fTempPerm77;
	float 	fTempPerm78;
	float 	fTempPerm79;
	int 	iTempPerm80;
	float 	fTempPerm81;
	int 	iTempPerm82;
	float 	fConst22;
	float 	fTempPerm83;
	float 	fVec31[2];
	float 	fTempPerm84;
	float 	fVec32[2];
	float 	fTempPerm85;
	float 	fVec33[4096];
	float 	fTempPerm86;
	float 	fVec34[2];
	float 	fTempPerm87;
	float 	fVec35[2];
	float 	fTempPerm88;
	float 	fVec36[4096];
	float 	fTempPerm89;
	float 	fVec37[2];
	float 	fTempPerm90;
	float 	fVec38[2];
	float 	fTempPerm91;
	float 	fVec39[4096];
	FAUSTFLOAT 	fslider13;
	int 	iRec17[2];
	float 	fRec16[4];
	float 	fTempPerm92;
	FAUSTFLOAT 	fslider14;
	float 	fRec18[2];
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	float 	fTempPerm93;
	FAUSTFLOAT 	fslider15;
	float 	fConst23;
	FAUSTFLOAT 	fslider16;
	float 	fRec19[2];
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fTempPerm96;
	float 	fTempPerm97;
	float 	fTempPerm98;
	float 	fTempPerm99;
	float 	fTempPerm100;
	float 	fTempPerm101;
	float 	fTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	float 	fTempPerm105;
	float 	fTempPerm106;
	float 	fRec22[2];
	float 	fRec20[2];
	float 	fTempPerm107;
	float 	fTempPerm108;
	float 	fTempPerm109;
	float 	fTempPerm110;
	float 	fTempPerm111;
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fTempPerm114;
	float 	fTempPerm115;
	float 	fTempPerm116;
	float 	fTempPerm117;
	float 	fTempPerm118;
	float 	fTempPerm119;
	float 	fRec25[2];
	float 	fRec23[2];
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	float 	fTempPerm124;
	float 	fTempPerm125;
	float 	fRec27[3];
	float 	fTempPerm126;
	float 	fRec26[3];
	float 	fConst24;
	float 	fRec33[2];
	float 	fTempPerm127;
	float 	fTempPerm128;
	float 	fRec32[2];
	float 	fRec31[2];
	float 	fRec30[2];
	float 	fRec29[2];
	float 	fRec28[2];
	float 	fTempPerm129;
	float 	fConst25;
	float 	fConst26;
	float 	fConst27;
	float 	fRec3[3];
	float 	fConst28;
	float 	fConst29;
	float 	fConst30;
	float 	fRec2[3];
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fRec1[3];
	float 	fConst34;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph0;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fConst54;
	float 	fConst55;
	float 	fRec40[3];
	float 	fConst56;
	float 	fConst57;
	float 	fConst58;
	float 	fRec39[3];
	float 	fConst59;
	float 	fConst60;
	float 	fConst61;
	float 	fRec38[3];
	float 	fConst62;
	float 	fTempPerm130;
	float 	fConst63;
	float 	fConst64;
	float 	fConst65;
	float 	fRec37[3];
	float 	fConst66;
	float 	fConst67;
	float 	fConst68;
	float 	fRec36[3];
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fRec35[3];
	float 	fConst72;
	float 	fRec34[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fConst92;
	float 	fConst93;
	float 	fRec47[3];
	float 	fConst94;
	float 	fConst95;
	float 	fConst96;
	float 	fRec46[3];
	float 	fConst97;
	float 	fConst98;
	float 	fConst99;
	float 	fRec45[3];
	float 	fConst100;
	float 	fTempPerm131;
	float 	fConst101;
	float 	fConst102;
	float 	fConst103;
	float 	fRec44[3];
	float 	fConst104;
	float 	fConst105;
	float 	fConst106;
	float 	fRec43[3];
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fRec42[3];
	float 	fConst110;
	float 	fRec41[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fConst130;
	float 	fConst131;
	float 	fRec54[3];
	float 	fConst132;
	float 	fConst133;
	float 	fConst134;
	float 	fRec53[3];
	float 	fConst135;
	float 	fConst136;
	float 	fConst137;
	float 	fRec52[3];
	float 	fConst138;
	float 	fTempPerm132;
	float 	fConst139;
	float 	fConst140;
	float 	fConst141;
	float 	fRec51[3];
	float 	fConst142;
	float 	fConst143;
	float 	fConst144;
	float 	fRec50[3];
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fRec49[3];
	float 	fConst148;
	float 	fRec48[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fConst168;
	float 	fConst169;
	float 	fRec61[3];
	float 	fConst170;
	float 	fConst171;
	float 	fConst172;
	float 	fRec60[3];
	float 	fConst173;
	float 	fConst174;
	float 	fConst175;
	float 	fRec59[3];
	float 	fConst176;
	float 	fTempPerm133;
	float 	fConst177;
	float 	fConst178;
	float 	fConst179;
	float 	fRec58[3];
	float 	fConst180;
	float 	fConst181;
	float 	fConst182;
	float 	fRec57[3];
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fRec56[3];
	float 	fConst186;
	float 	fRec55[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fConst206;
	float 	fConst207;
	float 	fRec68[3];
	float 	fConst208;
	float 	fConst209;
	float 	fConst210;
	float 	fRec67[3];
	float 	fConst211;
	float 	fConst212;
	float 	fConst213;
	float 	fRec66[3];
	float 	fConst214;
	float 	fTempPerm134;
	float 	fConst215;
	float 	fConst216;
	float 	fConst217;
	float 	fRec65[3];
	float 	fConst218;
	float 	fConst219;
	float 	fConst220;
	float 	fRec64[3];
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fRec63[3];
	float 	fConst224;
	float 	fRec62[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fConst244;
	float 	fConst245;
	float 	fRec75[3];
	float 	fConst246;
	float 	fConst247;
	float 	fConst248;
	float 	fRec74[3];
	float 	fConst249;
	float 	fConst250;
	float 	fConst251;
	float 	fRec73[3];
	float 	fConst252;
	float 	fTempPerm135;
	float 	fConst253;
	float 	fConst254;
	float 	fConst255;
	float 	fRec72[3];
	float 	fConst256;
	float 	fConst257;
	float 	fConst258;
	float 	fRec71[3];
	float 	fConst259;
	float 	fConst260;
	float 	fConst261;
	float 	fRec70[3];
	float 	fConst262;
	float 	fRec69[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst263;
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fConst273;
	float 	fConst274;
	float 	fConst275;
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fConst279;
	float 	fConst280;
	float 	fConst281;
	float 	fConst282;
	float 	fConst283;
	float 	fRec82[3];
	float 	fConst284;
	float 	fConst285;
	float 	fConst286;
	float 	fRec81[3];
	float 	fConst287;
	float 	fConst288;
	float 	fConst289;
	float 	fRec80[3];
	float 	fConst290;
	float 	fTempPerm136;
	float 	fConst291;
	float 	fConst292;
	float 	fConst293;
	float 	fRec79[3];
	float 	fConst294;
	float 	fConst295;
	float 	fConst296;
	float 	fRec78[3];
	float 	fConst297;
	float 	fConst298;
	float 	fConst299;
	float 	fRec77[3];
	float 	fConst300;
	float 	fRec76[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst301;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fConst317;
	float 	fConst318;
	float 	fConst319;
	float 	fConst320;
	float 	fConst321;
	float 	fRec89[3];
	float 	fConst322;
	float 	fConst323;
	float 	fConst324;
	float 	fRec88[3];
	float 	fConst325;
	float 	fConst326;
	float 	fConst327;
	float 	fRec87[3];
	float 	fConst328;
	float 	fTempPerm137;
	float 	fConst329;
	float 	fConst330;
	float 	fConst331;
	float 	fRec86[3];
	float 	fConst332;
	float 	fConst333;
	float 	fConst334;
	float 	fRec85[3];
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fRec84[3];
	float 	fConst338;
	float 	fRec83[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fConst353;
	float 	fConst354;
	float 	fConst355;
	float 	fConst356;
	float 	fConst357;
	float 	fConst358;
	float 	fConst359;
	float 	fRec96[3];
	float 	fConst360;
	float 	fConst361;
	float 	fConst362;
	float 	fRec95[3];
	float 	fConst363;
	float 	fConst364;
	float 	fConst365;
	float 	fRec94[3];
	float 	fConst366;
	float 	fTempPerm138;
	float 	fConst367;
	float 	fConst368;
	float 	fConst369;
	float 	fRec93[3];
	float 	fConst370;
	float 	fConst371;
	float 	fConst372;
	float 	fRec92[3];
	float 	fConst373;
	float 	fConst374;
	float 	fConst375;
	float 	fRec91[3];
	float 	fConst376;
	float 	fRec90[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fConst389;
	float 	fConst390;
	float 	fConst391;
	float 	fConst392;
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fConst396;
	float 	fConst397;
	float 	fRec103[3];
	float 	fConst398;
	float 	fConst399;
	float 	fConst400;
	float 	fRec102[3];
	float 	fConst401;
	float 	fConst402;
	float 	fConst403;
	float 	fRec101[3];
	float 	fConst404;
	float 	fTempPerm139;
	float 	fConst405;
	float 	fConst406;
	float 	fConst407;
	float 	fRec100[3];
	float 	fConst408;
	float 	fConst409;
	float 	fConst410;
	float 	fRec99[3];
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fRec98[3];
	float 	fConst414;
	float 	fRec97[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fConst425;
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fConst434;
	float 	fConst435;
	float 	fRec110[3];
	float 	fConst436;
	float 	fConst437;
	float 	fConst438;
	float 	fRec109[3];
	float 	fConst439;
	float 	fConst440;
	float 	fConst441;
	float 	fRec108[3];
	float 	fConst442;
	float 	fTempPerm140;
	float 	fConst443;
	float 	fConst444;
	float 	fConst445;
	float 	fRec107[3];
	float 	fConst446;
	float 	fConst447;
	float 	fConst448;
	float 	fRec106[3];
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fRec105[3];
	float 	fConst452;
	float 	fRec104[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fConst472;
	float 	fConst473;
	float 	fRec117[3];
	float 	fConst474;
	float 	fConst475;
	float 	fConst476;
	float 	fRec116[3];
	float 	fConst477;
	float 	fConst478;
	float 	fConst479;
	float 	fRec115[3];
	float 	fConst480;
	float 	fTempPerm141;
	float 	fConst481;
	float 	fConst482;
	float 	fConst483;
	float 	fRec114[3];
	float 	fConst484;
	float 	fConst485;
	float 	fConst486;
	float 	fRec113[3];
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fRec112[3];
	float 	fConst490;
	float 	fRec111[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fConst507;
	float 	fConst508;
	float 	fConst509;
	float 	fConst510;
	float 	fConst511;
	float 	fRec124[3];
	float 	fConst512;
	float 	fConst513;
	float 	fConst514;
	float 	fRec123[3];
	float 	fConst515;
	float 	fConst516;
	float 	fConst517;
	float 	fRec122[3];
	float 	fConst518;
	float 	fTempPerm142;
	float 	fConst519;
	float 	fConst520;
	float 	fConst521;
	float 	fRec121[3];
	float 	fConst522;
	float 	fConst523;
	float 	fConst524;
	float 	fRec120[3];
	float 	fConst525;
	float 	fConst526;
	float 	fConst527;
	float 	fRec119[3];
	float 	fConst528;
	float 	fRec118[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fConst533;
	float 	fConst534;
	float 	fConst535;
	float 	fConst536;
	float 	fConst537;
	float 	fRec128[3];
	float 	fConst538;
	float 	fConst539;
	float 	fConst540;
	float 	fRec127[3];
	float 	fConst541;
	float 	fConst542;
	float 	fConst543;
	float 	fRec126[3];
	float 	fConst544;
	float 	fRec125[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fTempPerm143;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "virtualAnalogLab");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
		m->declare("vaeffects.lib/name", "Faust Virtual Analog Filter Effect Library");
		m->declare("vaeffects.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = tanf((50265.482457436687f / fConst0));
		fConst3 = (1.0f / fConst2);
		fConst4 = (1.0f / (((fConst3 + 0.157482159302087f) / fConst2) + 0.93514016703154246f));
		fConst5 = faustpower<2>(fConst2);
		fConst6 = (50.063807016150385f / fConst5);
		fConst7 = (2 * (0.93514016703154246f - fConst6));
		fConst8 = (1.0f / (((fConst3 + 0.74313046010703965f) / fConst2) + 1.450071084655647f));
		fConst9 = (11.052052171507189f / fConst5);
		fConst10 = (2 * (1.450071084655647f - fConst9));
		fConst11 = (1.0f / (((fConst3 + 3.1897274020965583f) / fConst2) + 4.0767819696438066f));
		fConst12 = (0.0017661728399818856f / fConst5);
		fConst13 = (2 * (0.00040767818495825777f - fConst12));
		fConst14 = float(fConst0);
		fConst15 = (0.005208333333333333f * faustpower<3>(fConst14));
		fConst16 = (1.0f / fConst0);
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fConst17 = (0.041666666666666664f * faustpower<2>(fConst14));
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fConst18 = (0.25f * fConst14);
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fConst19 = (0.083333333333333329f * fConst14);
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fConst20 = (0.5f * fConst14);
		fTempPerm39 = 0;
		iTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		iTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		iTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fConst21 = (1.3333333333333333f / fConst0);
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		iTempPerm68 = 0;
		fTempPerm69 = 0;
		iTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		iTempPerm74 = 0;
		fTempPerm75 = 0;
		iTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		iTempPerm80 = 0;
		fTempPerm81 = 0;
		iTempPerm82 = 0;
		fConst22 = (0.013888888888888888f * fConst14);
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		fTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fConst23 = (3.1415926535897931f / fConst0);
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fConst24 = (6.2831853071795862f / fConst0);
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fConst25 = (((fConst3 + -3.1897274020965583f) / fConst2) + 4.0767819696438066f);
		fConst26 = (1.0f / fConst5);
		fConst27 = (2 * (4.0767819696438066f - fConst26));
		fConst28 = (fConst12 + 0.00040767818495825777f);
		fConst29 = (((fConst3 + -0.74313046010703965f) / fConst2) + 1.450071084655647f);
		fConst30 = (2 * (1.450071084655647f - fConst26));
		fConst31 = (fConst9 + 1.450071084655647f);
		fConst32 = (((fConst3 + -0.157482159302087f) / fConst2) + 0.93514016703154246f);
		fConst33 = (2 * (0.93514016703154246f - fConst26));
		fConst34 = (fConst6 + 0.93514016703154246f);
		fConst35 = tanf((31665.269715622984f / fConst0));
		fConst36 = (1.0f / fConst35);
		fConst37 = (1.0f / (((fConst36 + 0.157482159302087f) / fConst35) + 0.93514016703154246f));
		fConst38 = faustpower<2>(fConst35);
		fConst39 = (50.063807016150385f / fConst38);
		fConst40 = (2 * (0.93514016703154246f - fConst39));
		fConst41 = (1.0f / (((fConst36 + 0.74313046010703965f) / fConst35) + 1.450071084655647f));
		fConst42 = (11.052052171507189f / fConst38);
		fConst43 = (2 * (1.450071084655647f - fConst42));
		fConst44 = (1.0f / (((fConst36 + 3.1897274020965583f) / fConst35) + 4.0767819696438066f));
		fConst45 = (0.0017661728399818856f / fConst38);
		fConst46 = (2 * (0.00040767818495825777f - fConst45));
		fConst47 = (1.0f / (((fConst3 + 0.16840487111358901f) / fConst2) + 1.0693584077073119f));
		fConst48 = (2 * (53.536152954556727f - fConst26));
		fConst49 = (1.0f / (((fConst3 + 0.51247864188914105f) / fConst2) + 0.68962136448467504f));
		fConst50 = (2 * (7.6217312988706034f - fConst26));
		fConst51 = (1.0f / (((fConst3 + 0.78241304682164503f) / fConst2) + 0.24529150870616001f));
		fConst52 = (9.9999997054999994e-05f / fConst5);
		fConst53 = (2 * (0.00043322720055500002f - fConst52));
		fConst54 = (((fConst3 + -0.78241304682164503f) / fConst2) + 0.24529150870616001f);
		fConst55 = (2 * (0.24529150870616001f - fConst26));
		fConst56 = (fConst52 + 0.00043322720055500002f);
		fConst57 = (((fConst3 + -0.51247864188914105f) / fConst2) + 0.68962136448467504f);
		fConst58 = (2 * (0.68962136448467504f - fConst26));
		fConst59 = (fConst26 + 7.6217312988706034f);
		fConst60 = (((fConst3 + -0.16840487111358901f) / fConst2) + 1.0693584077073119f);
		fConst61 = (2 * (1.0693584077073119f - fConst26));
		fConst62 = (fConst26 + 53.536152954556727f);
		fTempPerm130 = 0;
		fConst63 = (((fConst36 + -3.1897274020965583f) / fConst35) + 4.0767819696438066f);
		fConst64 = (1.0f / fConst38);
		fConst65 = (2 * (4.0767819696438066f - fConst64));
		fConst66 = (fConst45 + 0.00040767818495825777f);
		fConst67 = (((fConst36 + -0.74313046010703965f) / fConst35) + 1.450071084655647f);
		fConst68 = (2 * (1.450071084655647f - fConst64));
		fConst69 = (fConst42 + 1.450071084655647f);
		fConst70 = (((fConst36 + -0.157482159302087f) / fConst35) + 0.93514016703154246f);
		fConst71 = (2 * (0.93514016703154246f - fConst64));
		fConst72 = (fConst39 + 0.93514016703154246f);
		fConst73 = tanf((19947.869932656024f / fConst0));
		fConst74 = (1.0f / fConst73);
		fConst75 = (1.0f / (((fConst74 + 0.157482159302087f) / fConst73) + 0.93514016703154246f));
		fConst76 = faustpower<2>(fConst73);
		fConst77 = (50.063807016150385f / fConst76);
		fConst78 = (2 * (0.93514016703154246f - fConst77));
		fConst79 = (1.0f / (((fConst74 + 0.74313046010703965f) / fConst73) + 1.450071084655647f));
		fConst80 = (11.052052171507189f / fConst76);
		fConst81 = (2 * (1.450071084655647f - fConst80));
		fConst82 = (1.0f / (((fConst74 + 3.1897274020965583f) / fConst73) + 4.0767819696438066f));
		fConst83 = (0.0017661728399818856f / fConst76);
		fConst84 = (2 * (0.00040767818495825777f - fConst83));
		fConst85 = (1.0f / (((fConst36 + 0.16840487111358901f) / fConst35) + 1.0693584077073119f));
		fConst86 = (2 * (53.536152954556727f - fConst64));
		fConst87 = (1.0f / (((fConst36 + 0.51247864188914105f) / fConst35) + 0.68962136448467504f));
		fConst88 = (2 * (7.6217312988706034f - fConst64));
		fConst89 = (1.0f / (((fConst36 + 0.78241304682164503f) / fConst35) + 0.24529150870616001f));
		fConst90 = (9.9999997054999994e-05f / fConst38);
		fConst91 = (2 * (0.00043322720055500002f - fConst90));
		fConst92 = (((fConst36 + -0.78241304682164503f) / fConst35) + 0.24529150870616001f);
		fConst93 = (2 * (0.24529150870616001f - fConst64));
		fConst94 = (fConst90 + 0.00043322720055500002f);
		fConst95 = (((fConst36 + -0.51247864188914105f) / fConst35) + 0.68962136448467504f);
		fConst96 = (2 * (0.68962136448467504f - fConst64));
		fConst97 = (fConst64 + 7.6217312988706034f);
		fConst98 = (((fConst36 + -0.16840487111358901f) / fConst35) + 1.0693584077073119f);
		fConst99 = (2 * (1.0693584077073119f - fConst64));
		fConst100 = (fConst64 + 53.536152954556727f);
		fTempPerm131 = 0;
		fConst101 = (((fConst74 + -3.1897274020965583f) / fConst73) + 4.0767819696438066f);
		fConst102 = (1.0f / fConst76);
		fConst103 = (2 * (4.0767819696438066f - fConst102));
		fConst104 = (fConst83 + 0.00040767818495825777f);
		fConst105 = (((fConst74 + -0.74313046010703965f) / fConst73) + 1.450071084655647f);
		fConst106 = (2 * (1.450071084655647f - fConst102));
		fConst107 = (fConst80 + 1.450071084655647f);
		fConst108 = (((fConst74 + -0.157482159302087f) / fConst73) + 0.93514016703154246f);
		fConst109 = (2 * (0.93514016703154246f - fConst102));
		fConst110 = (fConst77 + 0.93514016703154246f);
		fConst111 = tanf((12566.370614359172f / fConst0));
		fConst112 = (1.0f / fConst111);
		fConst113 = (1.0f / (((fConst112 + 0.157482159302087f) / fConst111) + 0.93514016703154246f));
		fConst114 = faustpower<2>(fConst111);
		fConst115 = (50.063807016150385f / fConst114);
		fConst116 = (2 * (0.93514016703154246f - fConst115));
		fConst117 = (1.0f / (((fConst112 + 0.74313046010703965f) / fConst111) + 1.450071084655647f));
		fConst118 = (11.052052171507189f / fConst114);
		fConst119 = (2 * (1.450071084655647f - fConst118));
		fConst120 = (1.0f / (((fConst112 + 3.1897274020965583f) / fConst111) + 4.0767819696438066f));
		fConst121 = (0.0017661728399818856f / fConst114);
		fConst122 = (2 * (0.00040767818495825777f - fConst121));
		fConst123 = (1.0f / (((fConst74 + 0.16840487111358901f) / fConst73) + 1.0693584077073119f));
		fConst124 = (2 * (53.536152954556727f - fConst102));
		fConst125 = (1.0f / (((fConst74 + 0.51247864188914105f) / fConst73) + 0.68962136448467504f));
		fConst126 = (2 * (7.6217312988706034f - fConst102));
		fConst127 = (1.0f / (((fConst74 + 0.78241304682164503f) / fConst73) + 0.24529150870616001f));
		fConst128 = (9.9999997054999994e-05f / fConst76);
		fConst129 = (2 * (0.00043322720055500002f - fConst128));
		fConst130 = (((fConst74 + -0.78241304682164503f) / fConst73) + 0.24529150870616001f);
		fConst131 = (2 * (0.24529150870616001f - fConst102));
		fConst132 = (fConst128 + 0.00043322720055500002f);
		fConst133 = (((fConst74 + -0.51247864188914105f) / fConst73) + 0.68962136448467504f);
		fConst134 = (2 * (0.68962136448467504f - fConst102));
		fConst135 = (fConst102 + 7.6217312988706034f);
		fConst136 = (((fConst74 + -0.16840487111358901f) / fConst73) + 1.0693584077073119f);
		fConst137 = (2 * (1.0693584077073119f - fConst102));
		fConst138 = (fConst102 + 53.536152954556727f);
		fTempPerm132 = 0;
		fConst139 = (((fConst112 + -3.1897274020965583f) / fConst111) + 4.0767819696438066f);
		fConst140 = (1.0f / fConst114);
		fConst141 = (2 * (4.0767819696438066f - fConst140));
		fConst142 = (fConst121 + 0.00040767818495825777f);
		fConst143 = (((fConst112 + -0.74313046010703965f) / fConst111) + 1.450071084655647f);
		fConst144 = (2 * (1.450071084655647f - fConst140));
		fConst145 = (fConst118 + 1.450071084655647f);
		fConst146 = (((fConst112 + -0.157482159302087f) / fConst111) + 0.93514016703154246f);
		fConst147 = (2 * (0.93514016703154246f - fConst140));
		fConst148 = (fConst115 + 0.93514016703154246f);
		fConst149 = tanf((7916.3174289057461f / fConst0));
		fConst150 = (1.0f / fConst149);
		fConst151 = (1.0f / (((fConst150 + 0.157482159302087f) / fConst149) + 0.93514016703154246f));
		fConst152 = faustpower<2>(fConst149);
		fConst153 = (50.063807016150385f / fConst152);
		fConst154 = (2 * (0.93514016703154246f - fConst153));
		fConst155 = (1.0f / (((fConst150 + 0.74313046010703965f) / fConst149) + 1.450071084655647f));
		fConst156 = (11.052052171507189f / fConst152);
		fConst157 = (2 * (1.450071084655647f - fConst156));
		fConst158 = (1.0f / (((fConst150 + 3.1897274020965583f) / fConst149) + 4.0767819696438066f));
		fConst159 = (0.0017661728399818856f / fConst152);
		fConst160 = (2 * (0.00040767818495825777f - fConst159));
		fConst161 = (1.0f / (((fConst112 + 0.16840487111358901f) / fConst111) + 1.0693584077073119f));
		fConst162 = (2 * (53.536152954556727f - fConst140));
		fConst163 = (1.0f / (((fConst112 + 0.51247864188914105f) / fConst111) + 0.68962136448467504f));
		fConst164 = (fConst140 + 7.6217312988706034f);
		fConst165 = (1.0f / (((fConst112 + 0.78241304682164503f) / fConst111) + 0.24529150870616001f));
		fConst166 = (9.9999997054999994e-05f / fConst114);
		fConst167 = (2 * (0.00043322720055500002f - fConst166));
		fConst168 = (((fConst112 + -0.78241304682164503f) / fConst111) + 0.24529150870616001f);
		fConst169 = (2 * (0.24529150870616001f - fConst140));
		fConst170 = (fConst166 + 0.00043322720055500002f);
		fConst171 = (((fConst112 + -0.51247864188914105f) / fConst111) + 0.68962136448467504f);
		fConst172 = (2 * (0.68962136448467504f - fConst140));
		fConst173 = (2 * (7.6217312988706034f - fConst140));
		fConst174 = (((fConst112 + -0.16840487111358901f) / fConst111) + 1.0693584077073119f);
		fConst175 = (2 * (1.0693584077073119f - fConst140));
		fConst176 = (fConst140 + 53.536152954556727f);
		fTempPerm133 = 0;
		fConst177 = (((fConst150 + -3.1897274020965583f) / fConst149) + 4.0767819696438066f);
		fConst178 = (1.0f / fConst152);
		fConst179 = (2 * (4.0767819696438066f - fConst178));
		fConst180 = (fConst159 + 0.00040767818495825777f);
		fConst181 = (((fConst150 + -0.74313046010703965f) / fConst149) + 1.450071084655647f);
		fConst182 = (2 * (1.450071084655647f - fConst178));
		fConst183 = (fConst156 + 1.450071084655647f);
		fConst184 = (((fConst150 + -0.157482159302087f) / fConst149) + 0.93514016703154246f);
		fConst185 = (2 * (0.93514016703154246f - fConst178));
		fConst186 = (fConst153 + 0.93514016703154246f);
		fConst187 = tanf((4986.967483164005f / fConst0));
		fConst188 = (1.0f / fConst187);
		fConst189 = (1.0f / (((fConst188 + 0.157482159302087f) / fConst187) + 0.93514016703154246f));
		fConst190 = faustpower<2>(fConst187);
		fConst191 = (50.063807016150385f / fConst190);
		fConst192 = (2 * (0.93514016703154246f - fConst191));
		fConst193 = (1.0f / (((fConst188 + 0.74313046010703965f) / fConst187) + 1.450071084655647f));
		fConst194 = (11.052052171507189f / fConst190);
		fConst195 = (2 * (1.450071084655647f - fConst194));
		fConst196 = (1.0f / (((fConst188 + 3.1897274020965583f) / fConst187) + 4.0767819696438066f));
		fConst197 = (0.0017661728399818856f / fConst190);
		fConst198 = (2 * (0.00040767818495825777f - fConst197));
		fConst199 = (1.0f / (((fConst150 + 0.16840487111358901f) / fConst149) + 1.0693584077073119f));
		fConst200 = (2 * (53.536152954556727f - fConst178));
		fConst201 = (1.0f / (((fConst150 + 0.51247864188914105f) / fConst149) + 0.68962136448467504f));
		fConst202 = (2 * (7.6217312988706034f - fConst178));
		fConst203 = (1.0f / (((fConst150 + 0.78241304682164503f) / fConst149) + 0.24529150870616001f));
		fConst204 = (9.9999997054999994e-05f / fConst152);
		fConst205 = (2 * (0.00043322720055500002f - fConst204));
		fConst206 = (((fConst150 + -0.78241304682164503f) / fConst149) + 0.24529150870616001f);
		fConst207 = (2 * (0.24529150870616001f - fConst178));
		fConst208 = (fConst204 + 0.00043322720055500002f);
		fConst209 = (((fConst150 + -0.51247864188914105f) / fConst149) + 0.68962136448467504f);
		fConst210 = (2 * (0.68962136448467504f - fConst178));
		fConst211 = (fConst178 + 7.6217312988706034f);
		fConst212 = (((fConst150 + -0.16840487111358901f) / fConst149) + 1.0693584077073119f);
		fConst213 = (2 * (1.0693584077073119f - fConst178));
		fConst214 = (fConst178 + 53.536152954556727f);
		fTempPerm134 = 0;
		fConst215 = (((fConst188 + -3.1897274020965583f) / fConst187) + 4.0767819696438066f);
		fConst216 = (1.0f / fConst190);
		fConst217 = (2 * (4.0767819696438066f - fConst216));
		fConst218 = (fConst197 + 0.00040767818495825777f);
		fConst219 = (((fConst188 + -0.74313046010703965f) / fConst187) + 1.450071084655647f);
		fConst220 = (2 * (1.450071084655647f - fConst216));
		fConst221 = (fConst194 + 1.450071084655647f);
		fConst222 = (((fConst188 + -0.157482159302087f) / fConst187) + 0.93514016703154246f);
		fConst223 = (2 * (0.93514016703154246f - fConst216));
		fConst224 = (fConst191 + 0.93514016703154246f);
		fConst225 = tanf((3141.5926535897929f / fConst0));
		fConst226 = (1.0f / fConst225);
		fConst227 = (1.0f / (((fConst226 + 0.157482159302087f) / fConst225) + 0.93514016703154246f));
		fConst228 = faustpower<2>(fConst225);
		fConst229 = (50.063807016150385f / fConst228);
		fConst230 = (2 * (0.93514016703154246f - fConst229));
		fConst231 = (1.0f / (((fConst226 + 0.74313046010703965f) / fConst225) + 1.450071084655647f));
		fConst232 = (11.052052171507189f / fConst228);
		fConst233 = (2 * (1.450071084655647f - fConst232));
		fConst234 = (1.0f / (((fConst226 + 3.1897274020965583f) / fConst225) + 4.0767819696438066f));
		fConst235 = (0.0017661728399818856f / fConst228);
		fConst236 = (2 * (0.00040767818495825777f - fConst235));
		fConst237 = (1.0f / (((fConst188 + 0.16840487111358901f) / fConst187) + 1.0693584077073119f));
		fConst238 = (2 * (53.536152954556727f - fConst216));
		fConst239 = (1.0f / (((fConst188 + 0.51247864188914105f) / fConst187) + 0.68962136448467504f));
		fConst240 = (2 * (7.6217312988706034f - fConst216));
		fConst241 = (1.0f / (((fConst188 + 0.78241304682164503f) / fConst187) + 0.24529150870616001f));
		fConst242 = (9.9999997054999994e-05f / fConst190);
		fConst243 = (2 * (0.00043322720055500002f - fConst242));
		fConst244 = (((fConst188 + -0.78241304682164503f) / fConst187) + 0.24529150870616001f);
		fConst245 = (2 * (0.24529150870616001f - fConst216));
		fConst246 = (fConst242 + 0.00043322720055500002f);
		fConst247 = (((fConst188 + -0.51247864188914105f) / fConst187) + 0.68962136448467504f);
		fConst248 = (2 * (0.68962136448467504f - fConst216));
		fConst249 = (fConst216 + 7.6217312988706034f);
		fConst250 = (((fConst188 + -0.16840487111358901f) / fConst187) + 1.0693584077073119f);
		fConst251 = (2 * (1.0693584077073119f - fConst216));
		fConst252 = (fConst216 + 53.536152954556727f);
		fTempPerm135 = 0;
		fConst253 = (((fConst226 + -3.1897274020965583f) / fConst225) + 4.0767819696438066f);
		fConst254 = (1.0f / fConst228);
		fConst255 = (2 * (4.0767819696438066f - fConst254));
		fConst256 = (fConst235 + 0.00040767818495825777f);
		fConst257 = (((fConst226 + -0.74313046010703965f) / fConst225) + 1.450071084655647f);
		fConst258 = (2 * (1.450071084655647f - fConst254));
		fConst259 = (fConst232 + 1.450071084655647f);
		fConst260 = (((fConst226 + -0.157482159302087f) / fConst225) + 0.93514016703154246f);
		fConst261 = (2 * (0.93514016703154246f - fConst254));
		fConst262 = (fConst229 + 0.93514016703154246f);
		fConst263 = tanf((1979.0793572264361f / fConst0));
		fConst264 = (1.0f / fConst263);
		fConst265 = (1.0f / (((fConst264 + 0.157482159302087f) / fConst263) + 0.93514016703154246f));
		fConst266 = faustpower<2>(fConst263);
		fConst267 = (50.063807016150385f / fConst266);
		fConst268 = (2 * (0.93514016703154246f - fConst267));
		fConst269 = (1.0f / (((fConst264 + 0.74313046010703965f) / fConst263) + 1.450071084655647f));
		fConst270 = (11.052052171507189f / fConst266);
		fConst271 = (2 * (1.450071084655647f - fConst270));
		fConst272 = (1.0f / (((fConst264 + 3.1897274020965583f) / fConst263) + 4.0767819696438066f));
		fConst273 = (0.0017661728399818856f / fConst266);
		fConst274 = (2 * (0.00040767818495825777f - fConst273));
		fConst275 = (1.0f / (((fConst226 + 0.16840487111358901f) / fConst225) + 1.0693584077073119f));
		fConst276 = (2 * (53.536152954556727f - fConst254));
		fConst277 = (1.0f / (((fConst226 + 0.51247864188914105f) / fConst225) + 0.68962136448467504f));
		fConst278 = (2 * (7.6217312988706034f - fConst254));
		fConst279 = (1.0f / (((fConst226 + 0.78241304682164503f) / fConst225) + 0.24529150870616001f));
		fConst280 = (9.9999997054999994e-05f / fConst228);
		fConst281 = (2 * (0.00043322720055500002f - fConst280));
		fConst282 = (((fConst226 + -0.78241304682164503f) / fConst225) + 0.24529150870616001f);
		fConst283 = (2 * (0.24529150870616001f - fConst254));
		fConst284 = (fConst280 + 0.00043322720055500002f);
		fConst285 = (((fConst226 + -0.51247864188914105f) / fConst225) + 0.68962136448467504f);
		fConst286 = (2 * (0.68962136448467504f - fConst254));
		fConst287 = (fConst254 + 7.6217312988706034f);
		fConst288 = (((fConst226 + -0.16840487111358901f) / fConst225) + 1.0693584077073119f);
		fConst289 = (2 * (1.0693584077073119f - fConst254));
		fConst290 = (fConst254 + 53.536152954556727f);
		fTempPerm136 = 0;
		fConst291 = (((fConst264 + -3.1897274020965583f) / fConst263) + 4.0767819696438066f);
		fConst292 = (1.0f / fConst266);
		fConst293 = (2 * (4.0767819696438066f - fConst292));
		fConst294 = (fConst273 + 0.00040767818495825777f);
		fConst295 = (((fConst264 + -0.74313046010703965f) / fConst263) + 1.450071084655647f);
		fConst296 = (2 * (1.450071084655647f - fConst292));
		fConst297 = (fConst270 + 1.450071084655647f);
		fConst298 = (((fConst264 + -0.157482159302087f) / fConst263) + 0.93514016703154246f);
		fConst299 = (2 * (0.93514016703154246f - fConst292));
		fConst300 = (fConst267 + 0.93514016703154246f);
		fConst301 = tanf((1246.7418707910015f / fConst0));
		fConst302 = (1.0f / fConst301);
		fConst303 = (1.0f / (((fConst302 + 0.157482159302087f) / fConst301) + 0.93514016703154246f));
		fConst304 = faustpower<2>(fConst301);
		fConst305 = (50.063807016150385f / fConst304);
		fConst306 = (2 * (0.93514016703154246f - fConst305));
		fConst307 = (1.0f / (((fConst302 + 0.74313046010703965f) / fConst301) + 1.450071084655647f));
		fConst308 = (11.052052171507189f / fConst304);
		fConst309 = (2 * (1.450071084655647f - fConst308));
		fConst310 = (1.0f / (((fConst302 + 3.1897274020965583f) / fConst301) + 4.0767819696438066f));
		fConst311 = (0.0017661728399818856f / fConst304);
		fConst312 = (2 * (0.00040767818495825777f - fConst311));
		fConst313 = (1.0f / (((fConst264 + 0.16840487111358901f) / fConst263) + 1.0693584077073119f));
		fConst314 = (2 * (53.536152954556727f - fConst292));
		fConst315 = (1.0f / (((fConst264 + 0.51247864188914105f) / fConst263) + 0.68962136448467504f));
		fConst316 = (2 * (7.6217312988706034f - fConst292));
		fConst317 = (1.0f / (((fConst264 + 0.78241304682164503f) / fConst263) + 0.24529150870616001f));
		fConst318 = (9.9999997054999994e-05f / fConst266);
		fConst319 = (2 * (0.00043322720055500002f - fConst318));
		fConst320 = (((fConst264 + -0.78241304682164503f) / fConst263) + 0.24529150870616001f);
		fConst321 = (2 * (0.24529150870616001f - fConst292));
		fConst322 = (fConst318 + 0.00043322720055500002f);
		fConst323 = (((fConst264 + -0.51247864188914105f) / fConst263) + 0.68962136448467504f);
		fConst324 = (2 * (0.68962136448467504f - fConst292));
		fConst325 = (fConst292 + 7.6217312988706034f);
		fConst326 = (((fConst264 + -0.16840487111358901f) / fConst263) + 1.0693584077073119f);
		fConst327 = (2 * (1.0693584077073119f - fConst292));
		fConst328 = (fConst292 + 53.536152954556727f);
		fTempPerm137 = 0;
		fConst329 = (((fConst302 + -3.1897274020965583f) / fConst301) + 4.0767819696438066f);
		fConst330 = (1.0f / fConst304);
		fConst331 = (2 * (4.0767819696438066f - fConst330));
		fConst332 = (fConst311 + 0.00040767818495825777f);
		fConst333 = (((fConst302 + -0.74313046010703965f) / fConst301) + 1.450071084655647f);
		fConst334 = (2 * (1.450071084655647f - fConst330));
		fConst335 = (fConst308 + 1.450071084655647f);
		fConst336 = (((fConst302 + -0.157482159302087f) / fConst301) + 0.93514016703154246f);
		fConst337 = (2 * (0.93514016703154246f - fConst330));
		fConst338 = (fConst305 + 0.93514016703154246f);
		fConst339 = tanf((785.39816339744823f / fConst0));
		fConst340 = (1.0f / fConst339);
		fConst341 = (1.0f / (((fConst340 + 0.157482159302087f) / fConst339) + 0.93514016703154246f));
		fConst342 = faustpower<2>(fConst339);
		fConst343 = (50.063807016150385f / fConst342);
		fConst344 = (2 * (0.93514016703154246f - fConst343));
		fConst345 = (1.0f / (((fConst340 + 0.74313046010703965f) / fConst339) + 1.450071084655647f));
		fConst346 = (11.052052171507189f / fConst342);
		fConst347 = (2 * (1.450071084655647f - fConst346));
		fConst348 = (1.0f / (((fConst340 + 3.1897274020965583f) / fConst339) + 4.0767819696438066f));
		fConst349 = (0.0017661728399818856f / fConst342);
		fConst350 = (2 * (0.00040767818495825777f - fConst349));
		fConst351 = (1.0f / (((fConst302 + 0.16840487111358901f) / fConst301) + 1.0693584077073119f));
		fConst352 = (2 * (53.536152954556727f - fConst330));
		fConst353 = (1.0f / (((fConst302 + 0.51247864188914105f) / fConst301) + 0.68962136448467504f));
		fConst354 = (2 * (7.6217312988706034f - fConst330));
		fConst355 = (1.0f / (((fConst302 + 0.78241304682164503f) / fConst301) + 0.24529150870616001f));
		fConst356 = (9.9999997054999994e-05f / fConst304);
		fConst357 = (2 * (0.00043322720055500002f - fConst356));
		fConst358 = (((fConst302 + -0.78241304682164503f) / fConst301) + 0.24529150870616001f);
		fConst359 = (2 * (0.24529150870616001f - fConst330));
		fConst360 = (fConst356 + 0.00043322720055500002f);
		fConst361 = (((fConst302 + -0.51247864188914105f) / fConst301) + 0.68962136448467504f);
		fConst362 = (2 * (0.68962136448467504f - fConst330));
		fConst363 = (fConst330 + 7.6217312988706034f);
		fConst364 = (((fConst302 + -0.16840487111358901f) / fConst301) + 1.0693584077073119f);
		fConst365 = (2 * (1.0693584077073119f - fConst330));
		fConst366 = (fConst330 + 53.536152954556727f);
		fTempPerm138 = 0;
		fConst367 = (((fConst340 + -3.1897274020965583f) / fConst339) + 4.0767819696438066f);
		fConst368 = (1.0f / fConst342);
		fConst369 = (2 * (4.0767819696438066f - fConst368));
		fConst370 = (fConst349 + 0.00040767818495825777f);
		fConst371 = (((fConst340 + -0.74313046010703965f) / fConst339) + 1.450071084655647f);
		fConst372 = (2 * (1.450071084655647f - fConst368));
		fConst373 = (fConst346 + 1.450071084655647f);
		fConst374 = (((fConst340 + -0.157482159302087f) / fConst339) + 0.93514016703154246f);
		fConst375 = (2 * (0.93514016703154246f - fConst368));
		fConst376 = (fConst343 + 0.93514016703154246f);
		fConst377 = tanf((494.76983930660901f / fConst0));
		fConst378 = (1.0f / fConst377);
		fConst379 = (1.0f / (((fConst378 + 0.157482159302087f) / fConst377) + 0.93514016703154246f));
		fConst380 = faustpower<2>(fConst377);
		fConst381 = (50.063807016150385f / fConst380);
		fConst382 = (2 * (0.93514016703154246f - fConst381));
		fConst383 = (1.0f / (((fConst378 + 0.74313046010703965f) / fConst377) + 1.450071084655647f));
		fConst384 = (11.052052171507189f / fConst380);
		fConst385 = (2 * (1.450071084655647f - fConst384));
		fConst386 = (1.0f / (((fConst378 + 3.1897274020965583f) / fConst377) + 4.0767819696438066f));
		fConst387 = (0.0017661728399818856f / fConst380);
		fConst388 = (2 * (0.00040767818495825777f - fConst387));
		fConst389 = (1.0f / (((fConst340 + 0.16840487111358901f) / fConst339) + 1.0693584077073119f));
		fConst390 = (2 * (53.536152954556727f - fConst368));
		fConst391 = (1.0f / (((fConst340 + 0.51247864188914105f) / fConst339) + 0.68962136448467504f));
		fConst392 = (2 * (7.6217312988706034f - fConst368));
		fConst393 = (1.0f / (((fConst340 + 0.78241304682164503f) / fConst339) + 0.24529150870616001f));
		fConst394 = (9.9999997054999994e-05f / fConst342);
		fConst395 = (2 * (0.00043322720055500002f - fConst394));
		fConst396 = (((fConst340 + -0.78241304682164503f) / fConst339) + 0.24529150870616001f);
		fConst397 = (2 * (0.24529150870616001f - fConst368));
		fConst398 = (fConst394 + 0.00043322720055500002f);
		fConst399 = (((fConst340 + -0.51247864188914105f) / fConst339) + 0.68962136448467504f);
		fConst400 = (2 * (0.68962136448467504f - fConst368));
		fConst401 = (fConst368 + 7.6217312988706034f);
		fConst402 = (((fConst340 + -0.16840487111358901f) / fConst339) + 1.0693584077073119f);
		fConst403 = (2 * (1.0693584077073119f - fConst368));
		fConst404 = (fConst368 + 53.536152954556727f);
		fTempPerm139 = 0;
		fConst405 = (((fConst378 + -3.1897274020965583f) / fConst377) + 4.0767819696438066f);
		fConst406 = (1.0f / fConst380);
		fConst407 = (2 * (4.0767819696438066f - fConst406));
		fConst408 = (fConst387 + 0.00040767818495825777f);
		fConst409 = (((fConst378 + -0.74313046010703965f) / fConst377) + 1.450071084655647f);
		fConst410 = (2 * (1.450071084655647f - fConst406));
		fConst411 = (fConst384 + 1.450071084655647f);
		fConst412 = (((fConst378 + -0.157482159302087f) / fConst377) + 0.93514016703154246f);
		fConst413 = (2 * (0.93514016703154246f - fConst406));
		fConst414 = (fConst381 + 0.93514016703154246f);
		fConst415 = tanf((311.68546769775037f / fConst0));
		fConst416 = (1.0f / fConst415);
		fConst417 = (1.0f / (((fConst416 + 0.157482159302087f) / fConst415) + 0.93514016703154246f));
		fConst418 = faustpower<2>(fConst415);
		fConst419 = (50.063807016150385f / fConst418);
		fConst420 = (2 * (0.93514016703154246f - fConst419));
		fConst421 = (1.0f / (((fConst416 + 0.74313046010703965f) / fConst415) + 1.450071084655647f));
		fConst422 = (11.052052171507189f / fConst418);
		fConst423 = (2 * (1.450071084655647f - fConst422));
		fConst424 = (1.0f / (((fConst416 + 3.1897274020965583f) / fConst415) + 4.0767819696438066f));
		fConst425 = (0.0017661728399818856f / fConst418);
		fConst426 = (2 * (0.00040767818495825777f - fConst425));
		fConst427 = (1.0f / (((fConst378 + 0.16840487111358901f) / fConst377) + 1.0693584077073119f));
		fConst428 = (2 * (53.536152954556727f - fConst406));
		fConst429 = (1.0f / (((fConst378 + 0.51247864188914105f) / fConst377) + 0.68962136448467504f));
		fConst430 = (2 * (7.6217312988706034f - fConst406));
		fConst431 = (1.0f / (((fConst378 + 0.78241304682164503f) / fConst377) + 0.24529150870616001f));
		fConst432 = (9.9999997054999994e-05f / fConst380);
		fConst433 = (2 * (0.00043322720055500002f - fConst432));
		fConst434 = (((fConst378 + -0.78241304682164503f) / fConst377) + 0.24529150870616001f);
		fConst435 = (2 * (0.24529150870616001f - fConst406));
		fConst436 = (fConst432 + 0.00043322720055500002f);
		fConst437 = (((fConst378 + -0.51247864188914105f) / fConst377) + 0.68962136448467504f);
		fConst438 = (2 * (0.68962136448467504f - fConst406));
		fConst439 = (fConst406 + 7.6217312988706034f);
		fConst440 = (((fConst378 + -0.16840487111358901f) / fConst377) + 1.0693584077073119f);
		fConst441 = (2 * (1.0693584077073119f - fConst406));
		fConst442 = (fConst406 + 53.536152954556727f);
		fTempPerm140 = 0;
		fConst443 = (((fConst416 + -3.1897274020965583f) / fConst415) + 4.0767819696438066f);
		fConst444 = (1.0f / fConst418);
		fConst445 = (2 * (4.0767819696438066f - fConst444));
		fConst446 = (fConst425 + 0.00040767818495825777f);
		fConst447 = (((fConst416 + -0.74313046010703965f) / fConst415) + 1.450071084655647f);
		fConst448 = (2 * (1.450071084655647f - fConst444));
		fConst449 = (fConst422 + 1.450071084655647f);
		fConst450 = (((fConst416 + -0.157482159302087f) / fConst415) + 0.93514016703154246f);
		fConst451 = (2 * (0.93514016703154246f - fConst444));
		fConst452 = (fConst419 + 0.93514016703154246f);
		fConst453 = tanf((196.34954084936206f / fConst0));
		fConst454 = (1.0f / fConst453);
		fConst455 = (1.0f / (((fConst454 + 0.157482159302087f) / fConst453) + 0.93514016703154246f));
		fConst456 = faustpower<2>(fConst453);
		fConst457 = (50.063807016150385f / fConst456);
		fConst458 = (2 * (0.93514016703154246f - fConst457));
		fConst459 = (1.0f / (((fConst454 + 0.74313046010703965f) / fConst453) + 1.450071084655647f));
		fConst460 = (11.052052171507189f / fConst456);
		fConst461 = (2 * (1.450071084655647f - fConst460));
		fConst462 = (1.0f / (((fConst454 + 3.1897274020965583f) / fConst453) + 4.0767819696438066f));
		fConst463 = (0.0017661728399818856f / fConst456);
		fConst464 = (2 * (0.00040767818495825777f - fConst463));
		fConst465 = (1.0f / (((fConst416 + 0.16840487111358901f) / fConst415) + 1.0693584077073119f));
		fConst466 = (2 * (53.536152954556727f - fConst444));
		fConst467 = (1.0f / (((fConst416 + 0.51247864188914105f) / fConst415) + 0.68962136448467504f));
		fConst468 = (2 * (7.6217312988706034f - fConst444));
		fConst469 = (1.0f / (((fConst416 + 0.78241304682164503f) / fConst415) + 0.24529150870616001f));
		fConst470 = (9.9999997054999994e-05f / fConst418);
		fConst471 = (2 * (0.00043322720055500002f - fConst470));
		fConst472 = (((fConst416 + -0.78241304682164503f) / fConst415) + 0.24529150870616001f);
		fConst473 = (2 * (0.24529150870616001f - fConst444));
		fConst474 = (fConst470 + 0.00043322720055500002f);
		fConst475 = (((fConst416 + -0.51247864188914105f) / fConst415) + 0.68962136448467504f);
		fConst476 = (2 * (0.68962136448467504f - fConst444));
		fConst477 = (fConst444 + 7.6217312988706034f);
		fConst478 = (((fConst416 + -0.16840487111358901f) / fConst415) + 1.0693584077073119f);
		fConst479 = (2 * (1.0693584077073119f - fConst444));
		fConst480 = (fConst444 + 53.536152954556727f);
		fTempPerm141 = 0;
		fConst481 = (((fConst454 + -3.1897274020965583f) / fConst453) + 4.0767819696438066f);
		fConst482 = (1.0f / fConst456);
		fConst483 = (2 * (4.0767819696438066f - fConst482));
		fConst484 = (fConst463 + 0.00040767818495825777f);
		fConst485 = (((fConst454 + -0.74313046010703965f) / fConst453) + 1.450071084655647f);
		fConst486 = (2 * (1.450071084655647f - fConst482));
		fConst487 = (fConst460 + 1.450071084655647f);
		fConst488 = (((fConst454 + -0.157482159302087f) / fConst453) + 0.93514016703154246f);
		fConst489 = (2 * (0.93514016703154246f - fConst482));
		fConst490 = (fConst457 + 0.93514016703154246f);
		fConst491 = tanf((123.69245982665232f / fConst0));
		fConst492 = (1.0f / fConst491);
		fConst493 = (1.0f / (((fConst492 + 0.157482159302087f) / fConst491) + 0.93514016703154246f));
		fConst494 = faustpower<2>(fConst491);
		fConst495 = (50.063807016150385f / fConst494);
		fConst496 = (2 * (0.93514016703154246f - fConst495));
		fConst497 = (1.0f / (((fConst492 + 0.74313046010703965f) / fConst491) + 1.450071084655647f));
		fConst498 = (11.052052171507189f / fConst494);
		fConst499 = (2 * (1.450071084655647f - fConst498));
		fConst500 = (1.0f / (((fConst492 + 3.1897274020965583f) / fConst491) + 4.0767819696438066f));
		fConst501 = (0.0017661728399818856f / fConst494);
		fConst502 = (2 * (0.00040767818495825777f - fConst501));
		fConst503 = (1.0f / (((fConst454 + 0.16840487111358901f) / fConst453) + 1.0693584077073119f));
		fConst504 = (2 * (53.536152954556727f - fConst482));
		fConst505 = (1.0f / (((fConst454 + 0.51247864188914105f) / fConst453) + 0.68962136448467504f));
		fConst506 = (2 * (7.6217312988706034f - fConst482));
		fConst507 = (1.0f / (((fConst454 + 0.78241304682164503f) / fConst453) + 0.24529150870616001f));
		fConst508 = (9.9999997054999994e-05f / fConst456);
		fConst509 = (2 * (0.00043322720055500002f - fConst508));
		fConst510 = (((fConst454 + -0.78241304682164503f) / fConst453) + 0.24529150870616001f);
		fConst511 = (2 * (0.24529150870616001f - fConst482));
		fConst512 = (fConst508 + 0.00043322720055500002f);
		fConst513 = (((fConst454 + -0.51247864188914105f) / fConst453) + 0.68962136448467504f);
		fConst514 = (2 * (0.68962136448467504f - fConst482));
		fConst515 = (fConst482 + 7.6217312988706034f);
		fConst516 = (((fConst454 + -0.16840487111358901f) / fConst453) + 1.0693584077073119f);
		fConst517 = (2 * (1.0693584077073119f - fConst482));
		fConst518 = (fConst482 + 53.536152954556727f);
		fTempPerm142 = 0;
		fConst519 = (((fConst492 + -3.1897274020965583f) / fConst491) + 4.0767819696438066f);
		fConst520 = (1.0f / fConst494);
		fConst521 = (2 * (4.0767819696438066f - fConst520));
		fConst522 = (fConst501 + 0.00040767818495825777f);
		fConst523 = (((fConst492 + -0.74313046010703965f) / fConst491) + 1.450071084655647f);
		fConst524 = (2 * (1.450071084655647f - fConst520));
		fConst525 = (fConst498 + 1.450071084655647f);
		fConst526 = (((fConst492 + -0.157482159302087f) / fConst491) + 0.93514016703154246f);
		fConst527 = (2 * (0.93514016703154246f - fConst520));
		fConst528 = (fConst495 + 0.93514016703154246f);
		fConst529 = (1.0f / (((fConst492 + 0.16840487111358901f) / fConst491) + 1.0693584077073119f));
		fConst530 = (2 * (53.536152954556727f - fConst520));
		fConst531 = (1.0f / (((fConst492 + 0.51247864188914105f) / fConst491) + 0.68962136448467504f));
		fConst532 = (2 * (7.6217312988706034f - fConst520));
		fConst533 = (1.0f / (((fConst492 + 0.78241304682164503f) / fConst491) + 0.24529150870616001f));
		fConst534 = (9.9999997054999994e-05f / fConst494);
		fConst535 = (2 * (0.00043322720055500002f - fConst534));
		fConst536 = (((fConst492 + -0.78241304682164503f) / fConst491) + 0.24529150870616001f);
		fConst537 = (2 * (0.24529150870616001f - fConst520));
		fConst538 = (fConst534 + 0.00043322720055500002f);
		fConst539 = (((fConst492 + -0.51247864188914105f) / fConst491) + 0.68962136448467504f);
		fConst540 = (2 * (0.68962136448467504f - fConst520));
		fConst541 = (fConst520 + 7.6217312988706034f);
		fConst542 = (((fConst492 + -0.16840487111358901f) / fConst491) + 1.0693584077073119f);
		fConst543 = (2 * (1.0693584077073119f - fConst520));
		fConst544 = (fConst520 + 53.536152954556727f);
		fTempPerm143 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fcheckbox0 = 0.0;
		fslider2 = 0.0f;
		fslider3 = -20.0f;
		fslider4 = 1.0f;
		fentry0 = 2.0f;
		fslider5 = 49.0f;
		fslider6 = 0.10000000000000001f;
		fslider7 = -0.10000000000000001f;
		fslider8 = 0.10000000000000001f;
		fslider9 = 0.0f;
		fslider10 = 0.0f;
		fslider11 = 0.0f;
		fcheckbox1 = 0.0;
		fslider12 = 0.5f;
		fslider13 = 0.0f;
		fslider14 = 5.0f;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fslider15 = 0.90000000000000002f;
		fslider16 = 25.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<4; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec23[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec24[i] = 0;
		for (int i=0; i<2; i++) fVec25[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fVec26[i] = 0;
		for (int i=0; i<4096; i++) fVec27[i] = 0;
		for (int i=0; i<2; i++) fVec28[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fVec29[i] = 0;
		for (int i=0; i<4096; i++) fVec30[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fVec31[i] = 0;
		for (int i=0; i<2; i++) fVec32[i] = 0;
		for (int i=0; i<4096; i++) fVec33[i] = 0;
		for (int i=0; i<2; i++) fVec34[i] = 0;
		for (int i=0; i<2; i++) fVec35[i] = 0;
		for (int i=0; i<4096; i++) fVec36[i] = 0;
		for (int i=0; i<2; i++) fVec37[i] = 0;
		for (int i=0; i<2; i++) fVec38[i] = 0;
		for (int i=0; i<4096; i++) fVec39[i] = 0;
		for (int i=0; i<2; i++) iRec17[i] = 0;
		for (int i=0; i<4; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<2; i++) fRec25[i] = 0;
		for (int i=0; i<2; i++) fRec23[i] = 0;
		for (int i=0; i<3; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<2; i++) fRec33[i] = 0;
		for (int i=0; i<2; i++) fRec32[i] = 0;
		for (int i=0; i<2; i++) fRec31[i] = 0;
		for (int i=0; i<2; i++) fRec30[i] = 0;
		for (int i=0; i<2; i++) fRec29[i] = 0;
		for (int i=0; i<2; i++) fRec28[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec72[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<3; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<3; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<3; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec100[i] = 0;
		for (int i=0; i<3; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec124[i] = 0;
		for (int i=0; i<3; i++) fRec123[i] = 0;
		for (int i=0; i<3; i++) fRec122[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
		for (int i=0; i<3; i++) fRec128[i] = 0;
		for (int i=0; i<3; i++) fRec127[i] = 0;
		for (int i=0; i<3; i++) fRec126[i] = 0;
		for (int i=0; i<2; i++) fRec125[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("virtualAnalogLab");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillators.lib for documentation and references");
		ui_interface->openVerticalBox("VIRTUAL ANALOG OSCILLATORS");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("Signal Levels");
		ui_interface->declare(&fslider4, "0", "");
		ui_interface->declare(&fslider4, "style", "vslider");
		ui_interface->addVerticalSlider("Sawtooth", &fslider4, 1.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("Pulse Train");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->declare(&fcheckbox1, "tooltip", "When checked, use 3rd-order aliasing suppression (up from 2)  See if you can hear a difference with the freq high and swept");
		ui_interface->addCheckButton("Order 3", &fcheckbox1);
		ui_interface->declare(&fslider11, "1", "");
		ui_interface->declare(&fslider11, "style", "vslider");
		ui_interface->addVerticalSlider("0x00", &fslider11, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider12, "2", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->addVerticalSlider("Duty Cycle", &fslider12, 0.5f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider9, "2", "");
		ui_interface->declare(&fslider9, "style", "vslider");
		ui_interface->addVerticalSlider("Square", &fslider9, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider10, "3", "");
		ui_interface->declare(&fslider10, "style", "vslider");
		ui_interface->addVerticalSlider("Triangle", &fslider10, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider13, "4", "");
		ui_interface->declare(&fslider13, "style", "vslider");
		ui_interface->declare(&fslider13, "tooltip", "Pink Noise (or 1/f noise) is   Constant-Q Noise, meaning that it has the same total power in every octave   (uses only amplitude controls)");
		ui_interface->addVerticalSlider("Pink Noise", &fslider13, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider2, "5", "");
		ui_interface->declare(&fslider2, "style", "vslider");
		ui_interface->addVerticalSlider("Ext Input", &fslider2, 0.0f, 0.0f, 1.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("Signal Parameters");
		ui_interface->declare(0, "0", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(&fslider3, "1", "");
		ui_interface->declare(&fslider3, "style", "hslider");
		ui_interface->declare(&fslider3, "tooltip", "Sawtooth waveform amplitude");
		ui_interface->declare(&fslider3, "unit", "dB");
		ui_interface->addHorizontalSlider("Mix Amplitude", &fslider3, -20.0f, -120.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider5, "2", "");
		ui_interface->declare(&fslider5, "style", "hslider");
		ui_interface->declare(&fslider5, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider5, "unit", "PK");
		ui_interface->addHorizontalSlider("Frequency", &fslider5, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider7, "3", "");
		ui_interface->declare(&fslider7, "style", "knob");
		ui_interface->declare(&fslider7, "tooltip", "Percentange frequency-shift up or down for second oscillator");
		ui_interface->declare(&fslider7, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider7, -0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider8, "4", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider8, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider8, 0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider6, "5", "");
		ui_interface->declare(&fslider6, "scale", "log");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider6, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider6, 0.10000000000000001f, 0.001f, 10.0f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtooth aliasing  suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "See Faust's   vaeffects.lib for info and references");
		ui_interface->openHorizontalBox("MOOG VCF (Voltage Controlled Filter)");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the Moog VCF   has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fcheckbox2, "1", "");
		ui_interface->declare(&fcheckbox2, "tooltip", "Select moog_vcf_2b (two-biquad)   implementation, instead of the default moog_vcf (analog style) implementation");
		ui_interface->addCheckButton("Use Biquads", &fcheckbox2);
		ui_interface->declare(&fcheckbox3, "2", "");
		ui_interface->declare(&fcheckbox3, "tooltip", "If using biquads, make   them normalized ladders (moog_vcf_2bn)");
		ui_interface->addCheckButton("Normalized Ladders", &fcheckbox3);
		ui_interface->closeBox();
		ui_interface->declare(&fslider16, "1", "");
		ui_interface->declare(&fslider16, "tooltip", "The VCF resonates   at the corner frequency (specified in PianoKey (PK) units, with A440 = 49 PK).   The VCF response is flat below the corner frequency, and rolls off -24 dB per   octave above.");
		ui_interface->declare(&fslider16, "unit", "PK");
		ui_interface->addHorizontalSlider("Corner Frequency", &fslider16, 25.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider15, "2", "");
		ui_interface->declare(&fslider15, "style", "knob");
		ui_interface->declare(&fslider15, "tooltip", "Amount of   resonance near VCF corner frequency (specified between 0 and 1)");
		ui_interface->addHorizontalSlider("Corner Resonance", &fslider15, 0.90000000000000002f, 0.0f, 1.0f, 0.01f);
		ui_interface->declare(&fslider14, "3", "");
		ui_interface->declare(&fslider14, "style", "knob");
		ui_interface->declare(&fslider14, "tooltip", "output level in decibels");
		ui_interface->declare(&fslider14, "unit", "dB");
		ui_interface->addHorizontalSlider("VCF Output Level", &fslider14, 5.0f, -60.0f, 20.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph14, "0", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3ed290", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "1", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3e2d50", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "2", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3cf530", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "3", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3bbd20", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "4", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3a8530", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "5", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c394e30", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "6", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c381780", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "7", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c36e0e0", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "8", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c35aa40", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "9", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c3473e0", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "10", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c333d80", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "11", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c320720", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "12", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c30d160", &fbargraph2, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph1, "13", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c2f5e90", &fbargraph1, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph0, "14", "");
		ui_interface->declare(&fbargraph0, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph0, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fdc4c2e1e20", &fbargraph0, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst1 / float(fslider1))));
		float 	fSlow2 = (1.0f - fSlow1);
		int 	iSlow3 = int(float(fcheckbox0));
		float 	fSlow4 = float(fslider2);
		float 	fSlow5 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider3))));
		float 	fSlow6 = (0.33333333333333331f * float(fslider4));
		int 	iSlow7 = int((float(fentry0) + -1));
		int 	iSlow8 = int((iSlow7 >= 2));
		int 	iSlow9 = int((iSlow7 >= 3));
		float 	fSlow10 = expf((0 - (fConst16 / float(fslider6))));
		float 	fSlow11 = (440.0f * (powf(2.0f,(0.083333333333333329f * (float(fslider5) + -49.0f))) * (1.0f - fSlow10)));
		int 	iSlow12 = int((iSlow7 >= 1));
		float 	fSlow13 = (1 - (0.01f * float(fslider7)));
		float 	fSlow14 = ((0.01f * float(fslider8)) + 1);
		float 	fSlow15 = (fConst19 * float(fslider9));
		float 	fSlow16 = (fConst21 * float(fslider10));
		float 	fSlow17 = (fConst14 * float(fslider11));
		float 	fSlow18 = float(fcheckbox1);
		float 	fSlow19 = (0.083333333333333329f * (1 - fSlow18));
		float 	fSlow20 = (0.010000000000000009f * float(fslider12));
		float 	fSlow21 = (fConst22 * fSlow18);
		float 	fSlow22 = float(fslider13);
		float 	fSlow23 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider14))));
		int 	iSlow24 = int(float(fcheckbox2));
		int 	iSlow25 = int(float(fcheckbox3));
		float 	fSlow26 = float(fslider15);
		float 	fSlow27 = faustpower<2>((1.4141994202374715f * fSlow26));
		float 	fSlow28 = (1.9999800000000003f * fSlow26);
		float 	fSlow29 = (fSlow27 + fSlow28);
		float 	fSlow30 = (fSlow28 + 2);
		float 	fSlow31 = (0.44000000000000039f * powf(2.0f,(0.083333333333333329f * (float(fslider16) + -49.0f))));
		float 	fSlow32 = (2 - fSlow28);
		float 	fSlow33 = min(1.4141994202374715f, (1.4142135623730951f * fSlow26));
		float 	fSlow34 = (fSlow33 * (fSlow33 + 1.4142135623730951f));
		float 	fSlow35 = (1.4142135623730951f * fSlow33);
		float 	fSlow36 = (fSlow35 + 2);
		float 	fSlow37 = (fSlow33 * (fSlow33 + -1.4142135623730951f));
		float 	fSlow38 = (2 - fSlow35);
		float 	fSlow39 = (0 - (4.0f * max((float)0, min(faustpower<4>(fSlow26), 0.99999899999999997f))));
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec4[0] = (fSlow5 + (0.999f * fRec4[1]));
			fRec6[0] = (fSlow11 + (fSlow10 * fRec6[1]));
			fTempPerm0 = max(20.0f, fabsf(fRec6[0]));
			fVec1[0] = fTempPerm0;
			fTempPerm1 = (fRec5[1] + (fConst16 * fVec1[1]));
			fRec5[0] = (fTempPerm1 - floorf(fTempPerm1));
			fTempPerm2 = (2 * fRec5[0]);
			fTempPerm3 = (fTempPerm2 + -1);
			fTempPerm4 = faustpower<2>(fTempPerm3);
			fVec2[0] = fTempPerm4;
			fTempPerm5 = (fVec2[0] * (fVec2[0] + -2.0f));
			fVec3[0] = fTempPerm5;
			fTempPerm6 = ((fVec3[0] - fVec3[1]) / fVec1[0]);
			fVec4[0] = fTempPerm6;
			fTempPerm7 = ((fVec4[0] - fVec4[1]) / fVec1[0]);
			fVec5[0] = fTempPerm7;
			fTempPerm8 = faustpower<3>(fTempPerm3);
			fVec6[0] = (fTempPerm8 + (1 - fTempPerm2));
			fTempPerm9 = ((fTempPerm8 + (1 - (fTempPerm2 + fVec6[1]))) / fVec1[0]);
			fVec7[0] = fTempPerm9;
			fTempPerm10 = (fSlow13 * fRec6[0]);
			fTempPerm11 = max(20.0f, fabsf(fTempPerm10));
			fVec8[0] = fTempPerm11;
			fTempPerm12 = (fRec7[1] + (fConst16 * fVec8[1]));
			fRec7[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = (2 * fRec7[0]);
			fTempPerm14 = (fTempPerm13 + -1);
			fTempPerm15 = faustpower<2>(fTempPerm14);
			fVec9[0] = fTempPerm15;
			fTempPerm16 = (fVec9[0] * (fVec9[0] + -2.0f));
			fVec10[0] = fTempPerm16;
			fTempPerm17 = ((fVec10[0] - fVec10[1]) / fVec8[0]);
			fVec11[0] = fTempPerm17;
			fTempPerm18 = ((fVec11[0] - fVec11[1]) / fVec8[0]);
			fVec12[0] = fTempPerm18;
			fTempPerm19 = faustpower<3>(fTempPerm14);
			fVec13[0] = (fTempPerm19 + (1 - fTempPerm13));
			fTempPerm20 = ((fTempPerm19 + (1 - (fTempPerm13 + fVec13[1]))) / fVec8[0]);
			fVec14[0] = fTempPerm20;
			fTempPerm21 = (fSlow14 * fRec6[0]);
			fTempPerm22 = max(20.0f, fabsf(fTempPerm21));
			fVec15[0] = fTempPerm22;
			fTempPerm23 = (fRec8[1] + (fConst16 * fVec15[1]));
			fRec8[0] = (fTempPerm23 - floorf(fTempPerm23));
			fTempPerm24 = (2 * fRec8[0]);
			fTempPerm25 = (fTempPerm24 + -1);
			fTempPerm26 = faustpower<2>(fTempPerm25);
			fVec16[0] = fTempPerm26;
			fTempPerm27 = (fVec16[0] * (fVec16[0] + -2.0f));
			fVec17[0] = fTempPerm27;
			fTempPerm28 = ((fVec17[0] - fVec17[1]) / fVec15[0]);
			fVec18[0] = fTempPerm28;
			fTempPerm29 = ((fVec18[0] - fVec18[1]) / fVec15[0]);
			fVec19[0] = fTempPerm29;
			fTempPerm30 = faustpower<3>(fTempPerm25);
			fVec20[0] = (fTempPerm30 + (1 - fTempPerm24));
			fTempPerm31 = ((fTempPerm30 + (1 - (fTempPerm24 + fVec20[1]))) / fVec15[0]);
			fVec21[0] = fTempPerm31;
			fTempPerm32 = max(fRec6[0], 23.448949682462139f);
			fTempPerm33 = max(20.0f, fabsf(fTempPerm32));
			fVec22[0] = fTempPerm33;
			fTempPerm34 = (fRec9[1] + (fConst16 * fVec22[1]));
			fRec9[0] = (fTempPerm34 - floorf(fTempPerm34));
			fTempPerm35 = (2 * fRec9[0]);
			fTempPerm36 = (fTempPerm35 + -1);
			fTempPerm37 = faustpower<2>(fTempPerm36);
			fVec23[0] = fTempPerm37;
			fTempPerm38 = ((iVec0[1] * (fVec23[0] - fVec23[1])) / fVec22[0]);
			fVec24[IOTA&4095] = fTempPerm38;
			fTempPerm39 = max((float)0, min((float)2047, (fConst20 / fTempPerm32)));
			iTempPerm40 = int(fTempPerm39);
			fTempPerm41 = floorf(fTempPerm39);
			fTempPerm42 = ((fVec24[IOTA&4095] - (fVec24[(IOTA-iTempPerm40)&4095] * (fTempPerm41 + (1 - fTempPerm39)))) - ((fTempPerm39 - fTempPerm41) * fVec24[(IOTA-int((iTempPerm40 + 1)))&4095]));
			fTempPerm43 = max(fTempPerm10, 23.448949682462139f);
			fTempPerm44 = max(20.0f, fabsf(fTempPerm43));
			fVec25[0] = fTempPerm44;
			fTempPerm45 = (fRec10[1] + (fConst16 * fVec25[1]));
			fRec10[0] = (fTempPerm45 - floorf(fTempPerm45));
			fTempPerm46 = (2 * fRec10[0]);
			fTempPerm47 = (fTempPerm46 + -1);
			fTempPerm48 = faustpower<2>(fTempPerm47);
			fVec26[0] = fTempPerm48;
			fTempPerm49 = ((iVec0[1] * (fVec26[0] - fVec26[1])) / fVec25[0]);
			fVec27[IOTA&4095] = fTempPerm49;
			fTempPerm50 = max((float)0, min((float)2047, (fConst20 / fTempPerm43)));
			iTempPerm51 = int(fTempPerm50);
			fTempPerm52 = floorf(fTempPerm50);
			fTempPerm53 = ((fVec27[IOTA&4095] - (fVec27[(IOTA-iTempPerm51)&4095] * (fTempPerm52 + (1 - fTempPerm50)))) - ((fTempPerm50 - fTempPerm52) * fVec27[(IOTA-int((iTempPerm51 + 1)))&4095]));
			fTempPerm54 = max(fTempPerm21, 23.448949682462139f);
			fTempPerm55 = max(20.0f, fabsf(fTempPerm54));
			fVec28[0] = fTempPerm55;
			fTempPerm56 = (fRec11[1] + (fConst16 * fVec28[1]));
			fRec11[0] = (fTempPerm56 - floorf(fTempPerm56));
			fTempPerm57 = (2 * fRec11[0]);
			fTempPerm58 = (fTempPerm57 + -1);
			fTempPerm59 = faustpower<2>(fTempPerm58);
			fVec29[0] = fTempPerm59;
			fTempPerm60 = ((iVec0[1] * (fVec29[0] - fVec29[1])) / fVec28[0]);
			fVec30[IOTA&4095] = fTempPerm60;
			fTempPerm61 = max((float)0, min((float)2047, (fConst20 / fTempPerm54)));
			iTempPerm62 = int(fTempPerm61);
			fTempPerm63 = floorf(fTempPerm61);
			fTempPerm64 = ((fVec30[IOTA&4095] - (fVec30[(IOTA-iTempPerm62)&4095] * (fTempPerm63 + (1 - fTempPerm61)))) - ((fTempPerm61 - fTempPerm63) * fVec30[(IOTA-int((iTempPerm62 + 1)))&4095]));
			fRec12[0] = ((fConst18 * fTempPerm42) + (0.999f * fRec12[1]));
			fRec13[0] = ((fConst18 * fTempPerm53) + (0.999f * fRec13[1]));
			fRec14[0] = ((fConst18 * fTempPerm64) + (0.999f * fRec14[1]));
			fRec15[0] = (fSlow20 + (0.98999999999999999f * fRec15[1]));
			fTempPerm65 = max((float)0, min((float)2047, (fConst14 * (fRec15[0] / fTempPerm32))));
			fTempPerm66 = floorf(fTempPerm65);
			fTempPerm67 = (fTempPerm66 + (1 - fTempPerm65));
			iTempPerm68 = int(fTempPerm65);
			fTempPerm69 = (fTempPerm65 - fTempPerm66);
			iTempPerm70 = int((iTempPerm68 + 1));
			fTempPerm71 = max((float)0, min((float)2047, (fConst14 * (fRec15[0] / fTempPerm43))));
			fTempPerm72 = floorf(fTempPerm71);
			fTempPerm73 = (fTempPerm72 + (1 - fTempPerm71));
			iTempPerm74 = int(fTempPerm71);
			fTempPerm75 = (fTempPerm71 - fTempPerm72);
			iTempPerm76 = int((iTempPerm74 + 1));
			fTempPerm77 = max((float)0, min((float)2047, (fConst14 * (fRec15[0] / fTempPerm54))));
			fTempPerm78 = floorf(fTempPerm77);
			fTempPerm79 = (fTempPerm78 + (1 - fTempPerm77));
			iTempPerm80 = int(fTempPerm77);
			fTempPerm81 = (fTempPerm77 - fTempPerm78);
			iTempPerm82 = int((iTempPerm80 + 1));
			fTempPerm83 = faustpower<3>(fTempPerm36);
			fVec31[0] = (fTempPerm83 + (1 - fTempPerm35));
			fTempPerm84 = ((fTempPerm83 + (1 - (fTempPerm35 + fVec31[1]))) / fVec22[0]);
			fVec32[0] = fTempPerm84;
			fTempPerm85 = ((iVec0[2] * (fVec32[0] - fVec32[1])) / fVec22[0]);
			fVec33[IOTA&4095] = fTempPerm85;
			fTempPerm86 = faustpower<3>(fTempPerm47);
			fVec34[0] = (fTempPerm86 + (1 - fTempPerm46));
			fTempPerm87 = ((fTempPerm86 + (1 - (fTempPerm46 + fVec34[1]))) / fVec25[0]);
			fVec35[0] = fTempPerm87;
			fTempPerm88 = ((iVec0[2] * (fVec35[0] - fVec35[1])) / fVec25[0]);
			fVec36[IOTA&4095] = fTempPerm88;
			fTempPerm89 = faustpower<3>(fTempPerm58);
			fVec37[0] = (fTempPerm89 + (1 - fTempPerm57));
			fTempPerm90 = ((fTempPerm89 + (1 - (fTempPerm57 + fVec37[1]))) / fVec28[0]);
			fVec38[0] = fTempPerm90;
			fTempPerm91 = ((iVec0[2] * (fVec38[0] - fVec38[1])) / fVec28[0]);
			fVec39[IOTA&4095] = fTempPerm91;
			iRec17[0] = ((1103515245 * iRec17[1]) + 12345);
			fRec16[0] = (((0.52218940000000003f * fRec16[3]) + ((4.6566128752457969e-10f * iRec17[0]) + (2.4949560019999999f * fRec16[1]))) - (2.0172658750000001f * fRec16[2]));
			fTempPerm92 = ((fSlow4 * (float)input0[i]) + (fRec4[0] * (((((fSlow6 * ((((iSlow8)?((iSlow9)?(fConst15 * ((iVec0[3] * (fVec5[0] - fVec5[1])) / fVec1[0])):(fConst17 * ((iVec0[2] * (fVec7[0] - fVec7[1])) / fVec1[0]))):((iSlow12)?(fConst18 * ((iVec0[1] * (fVec2[0] - fVec2[1])) / fVec1[0])):fTempPerm3)) + ((iSlow8)?((iSlow9)?(fConst15 * ((iVec0[3] * (fVec12[0] - fVec12[1])) / fVec8[0])):(fConst17 * ((iVec0[2] * (fVec14[0] - fVec14[1])) / fVec8[0]))):((iSlow12)?(fConst18 * ((iVec0[1] * (fVec9[0] - fVec9[1])) / fVec8[0])):fTempPerm14))) + ((iSlow8)?((iSlow9)?(fConst15 * ((iVec0[3] * (fVec19[0] - fVec19[1])) / fVec15[0])):(fConst17 * ((iVec0[2] * (fVec21[0] - fVec21[1])) / fVec15[0]))):((iSlow12)?(fConst18 * ((iVec0[1] * (fVec16[0] - fVec16[1])) / fVec15[0])):fTempPerm25)))) + (fSlow15 * ((fTempPerm42 + fTempPerm53) + fTempPerm64))) + (fSlow16 * (fRec6[0] * ((fRec12[0] + (fSlow13 * fRec13[0])) + (fSlow14 * fRec14[0]))))) + (fSlow17 * ((fSlow19 * ((((fVec24[IOTA&4095] - (fTempPerm67 * fVec24[(IOTA-iTempPerm68)&4095])) - (fTempPerm69 * fVec24[(IOTA-iTempPerm70)&4095])) + ((fVec27[IOTA&4095] - (fTempPerm73 * fVec27[(IOTA-iTempPerm74)&4095])) - (fTempPerm75 * fVec27[(IOTA-iTempPerm76)&4095]))) + ((fVec30[IOTA&4095] - (fTempPerm79 * fVec30[(IOTA-iTempPerm80)&4095])) - (fTempPerm81 * fVec30[(IOTA-iTempPerm82)&4095])))) + (fSlow21 * ((((fVec33[IOTA&4095] - (fVec33[(IOTA-iTempPerm68)&4095] * fTempPerm67)) - (fTempPerm69 * fVec33[(IOTA-iTempPerm70)&4095])) + ((fVec36[IOTA&4095] - (fVec36[(IOTA-iTempPerm74)&4095] * fTempPerm73)) - (fTempPerm75 * fVec36[(IOTA-iTempPerm76)&4095]))) + ((fVec39[IOTA&4095] - (fVec39[(IOTA-iTempPerm80)&4095] * fTempPerm79)) - (fTempPerm81 * fVec39[(IOTA-iTempPerm82)&4095]))))))) + (fSlow22 * (((0.049922034999999997f * fRec16[0]) + (0.050612698999999997f * fRec16[2])) - ((0.095993537000000004f * fRec16[1]) + (0.0044087859999999996f * fRec16[3])))))));
			fRec18[0] = (fSlow23 + (0.999f * fRec18[1]));
			fTempPerm93 = ((iSlow3)?0:fTempPerm92);
			fRec19[0] = (fSlow31 + (0.999f * fRec19[1]));
			fTempPerm94 = tanf((fConst23 * max(fRec19[0], (float)20)));
			fTempPerm95 = (1.0f / fTempPerm94);
			fTempPerm96 = (fSlow29 + (((fSlow30 + fTempPerm95) / fTempPerm94) + 1));
			fTempPerm97 = ((fSlow29 + (1 - ((fSlow30 - fTempPerm95) / fTempPerm94))) / fTempPerm96);
			fTempPerm98 = max(-0.99990000000000001f, min(0.99990000000000001f, fTempPerm97));
			fTempPerm99 = (1 - faustpower<2>(fTempPerm98));
			fTempPerm100 = sqrtf(max((float)0, fTempPerm99));
			fTempPerm101 = ((fRec20[1] * (0 - fTempPerm98)) + (fTempPerm93 * fTempPerm100));
			fTempPerm102 = (1 - (1.0f / faustpower<2>(fTempPerm94)));
			fTempPerm103 = (fSlow29 + fTempPerm102);
			fTempPerm104 = max(-0.99990000000000001f, min(0.99990000000000001f, (2 * (fTempPerm103 / (fTempPerm96 * (fTempPerm97 + 1))))));
			fTempPerm105 = (1 - faustpower<2>(fTempPerm104));
			fTempPerm106 = sqrtf(max((float)0, fTempPerm105));
			fRec22[0] = ((fRec22[1] * (0 - fTempPerm104)) + (fTempPerm101 * fTempPerm106));
			fRec20[0] = ((fTempPerm101 * fTempPerm104) + (fRec22[1] * fTempPerm106));
			float 	fRec21 = fRec22[0];
			fTempPerm107 = (1.0f - (fTempPerm103 / fTempPerm96));
			fTempPerm108 = sqrtf(fTempPerm99);
			fTempPerm109 = ((((fTempPerm93 * fTempPerm98) + (fRec20[1] * fTempPerm100)) + (2.0f * ((fRec20[0] * fTempPerm107) / fTempPerm108))) + ((fRec21 * ((1.0f - fTempPerm97) - (2.0f * (fTempPerm104 * fTempPerm107)))) / (fTempPerm108 * sqrtf(fTempPerm105))));
			fTempPerm110 = (fSlow27 + ((((fSlow32 + fTempPerm95) / fTempPerm94) + 1) - fSlow28));
			fTempPerm111 = ((fSlow27 + ((((fTempPerm95 - fSlow32) / fTempPerm94) + 1) - fSlow28)) / fTempPerm110);
			fTempPerm112 = max(-0.99990000000000001f, min(0.99990000000000001f, fTempPerm111));
			fTempPerm113 = (1 - faustpower<2>(fTempPerm112));
			fTempPerm114 = sqrtf(max((float)0, fTempPerm113));
			fTempPerm115 = ((fRec23[1] * (0 - fTempPerm112)) + ((fTempPerm109 * fTempPerm114) / fTempPerm96));
			fTempPerm116 = (fSlow27 + (fTempPerm102 - fSlow28));
			fTempPerm117 = max(-0.99990000000000001f, min(0.99990000000000001f, (2 * (fTempPerm116 / (fTempPerm110 * (fTempPerm111 + 1))))));
			fTempPerm118 = (1 - faustpower<2>(fTempPerm117));
			fTempPerm119 = sqrtf(max((float)0, fTempPerm118));
			fRec25[0] = ((fRec25[1] * (0 - fTempPerm117)) + (fTempPerm115 * fTempPerm119));
			fRec23[0] = ((fTempPerm115 * fTempPerm117) + (fRec25[1] * fTempPerm119));
			float 	fRec24 = fRec25[0];
			fTempPerm120 = (1.0f - (fTempPerm116 / fTempPerm110));
			fTempPerm121 = sqrtf(fTempPerm113);
			fTempPerm122 = tanf((fConst23 * max((float)20, min((float)10000, fRec19[0]))));
			fTempPerm123 = (1.0f / fTempPerm122);
			fTempPerm124 = (1 - (1.0f / faustpower<2>(fTempPerm122)));
			fTempPerm125 = (fSlow34 + (((fSlow36 + fTempPerm123) / fTempPerm122) + 1));
			fRec27[0] = (fTempPerm93 - (((fRec27[2] * (fSlow34 + (((fTempPerm123 - fSlow36) / fTempPerm122) + 1))) + (2 * (fRec27[1] * (fSlow34 + fTempPerm124)))) / fTempPerm125));
			fTempPerm126 = (fSlow37 + (((fSlow38 + fTempPerm123) / fTempPerm122) + 1));
			fRec26[0] = (((fRec27[2] + (fRec27[0] + (2.0f * fRec27[1]))) / fTempPerm125) - (((fRec26[2] * (fSlow37 + (((fTempPerm123 - fSlow38) / fTempPerm122) + 1))) + (2 * (fRec26[1] * (fSlow37 + fTempPerm124)))) / fTempPerm126));
			fRec33[0] = (fSlow31 + (0.999f * fRec33[1]));
			fTempPerm127 = (fConst24 * fRec33[0]);
			fTempPerm128 = (1.0f - fTempPerm127);
			fRec32[0] = (fTempPerm93 + ((fTempPerm128 * fRec32[1]) + (fSlow39 * fRec28[1])));
			fRec31[0] = (fRec32[0] + (fTempPerm128 * fRec31[1]));
			fRec30[0] = (fRec31[0] + (fTempPerm128 * fRec30[1]));
			fRec29[0] = (fRec30[0] + (fRec29[1] * fTempPerm128));
			fRec28[0] = (fRec29[0] * powf(fTempPerm127,4.0f));
			fTempPerm129 = ((iSlow3)?fTempPerm92:(fRec18[0] * ((iSlow24)?((iSlow25)?((((((fTempPerm109 * fTempPerm112) / fTempPerm96) + (fRec23[1] * fTempPerm114)) + (2.0f * ((fRec23[0] * fTempPerm120) / fTempPerm121))) + ((fRec24 * ((1.0f - fTempPerm111) - (2.0f * (fTempPerm117 * fTempPerm120)))) / (fTempPerm121 * sqrtf(fTempPerm118)))) / fTempPerm110):((fRec26[2] + (fRec26[0] + (2.0f * fRec26[1]))) / fTempPerm126)):fRec28[0])));
			fRec3[0] = (fTempPerm129 - (fConst11 * ((fConst25 * fRec3[2]) + (fConst27 * fRec3[1]))));
			fRec2[0] = ((fConst11 * (((fConst13 * fRec3[1]) + (fConst28 * fRec3[0])) + (fConst28 * fRec3[2]))) - (fConst8 * ((fConst29 * fRec2[2]) + (fConst30 * fRec2[1]))));
			fRec1[0] = ((fConst8 * (((fConst10 * fRec2[1]) + (fConst31 * fRec2[0])) + (fConst31 * fRec2[2]))) - (fConst4 * ((fConst32 * fRec1[2]) + (fConst33 * fRec1[1]))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * fabsf((fConst4 * (((fConst7 * fRec1[1]) + (fConst34 * fRec1[0])) + (fConst34 * fRec1[2]))))));
			fbargraph0 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec0[0]))));
			fRec40[0] = (fTempPerm129 - (fConst51 * ((fConst54 * fRec40[2]) + (fConst55 * fRec40[1]))));
			fRec39[0] = ((fConst51 * (((fConst53 * fRec40[1]) + (fConst56 * fRec40[0])) + (fConst56 * fRec40[2]))) - (fConst49 * ((fConst57 * fRec39[2]) + (fConst58 * fRec39[1]))));
			fRec38[0] = ((fConst49 * (((fConst50 * fRec39[1]) + (fConst59 * fRec39[0])) + (fConst59 * fRec39[2]))) - (fConst47 * ((fConst60 * fRec38[2]) + (fConst61 * fRec38[1]))));
			fTempPerm130 = (fConst47 * (((fConst48 * fRec38[1]) + (fConst62 * fRec38[0])) + (fConst62 * fRec38[2])));
			fRec37[0] = (fTempPerm130 - (fConst44 * ((fConst63 * fRec37[2]) + (fConst65 * fRec37[1]))));
			fRec36[0] = ((fConst44 * (((fConst46 * fRec37[1]) + (fConst66 * fRec37[0])) + (fConst66 * fRec37[2]))) - (fConst41 * ((fConst67 * fRec36[2]) + (fConst68 * fRec36[1]))));
			fRec35[0] = ((fConst41 * (((fConst43 * fRec36[1]) + (fConst69 * fRec36[0])) + (fConst69 * fRec36[2]))) - (fConst37 * ((fConst70 * fRec35[2]) + (fConst71 * fRec35[1]))));
			fRec34[0] = ((fSlow1 * fRec34[1]) + (fSlow2 * fabsf((fConst37 * (((fConst40 * fRec35[1]) + (fConst72 * fRec35[0])) + (fConst72 * fRec35[2]))))));
			fbargraph1 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec34[0]))));
			fRec47[0] = (fTempPerm130 - (fConst89 * ((fConst92 * fRec47[2]) + (fConst93 * fRec47[1]))));
			fRec46[0] = ((fConst89 * (((fConst91 * fRec47[1]) + (fConst94 * fRec47[0])) + (fConst94 * fRec47[2]))) - (fConst87 * ((fConst95 * fRec46[2]) + (fConst96 * fRec46[1]))));
			fRec45[0] = ((fConst87 * (((fConst88 * fRec46[1]) + (fConst97 * fRec46[0])) + (fConst97 * fRec46[2]))) - (fConst85 * ((fConst98 * fRec45[2]) + (fConst99 * fRec45[1]))));
			fTempPerm131 = (fConst85 * (((fConst86 * fRec45[1]) + (fConst100 * fRec45[0])) + (fConst100 * fRec45[2])));
			fRec44[0] = (fTempPerm131 - (fConst82 * ((fConst101 * fRec44[2]) + (fConst103 * fRec44[1]))));
			fRec43[0] = ((fConst82 * (((fConst84 * fRec44[1]) + (fConst104 * fRec44[0])) + (fConst104 * fRec44[2]))) - (fConst79 * ((fConst105 * fRec43[2]) + (fConst106 * fRec43[1]))));
			fRec42[0] = ((fConst79 * (((fConst81 * fRec43[1]) + (fConst107 * fRec43[0])) + (fConst107 * fRec43[2]))) - (fConst75 * ((fConst108 * fRec42[2]) + (fConst109 * fRec42[1]))));
			fRec41[0] = ((fSlow1 * fRec41[1]) + (fSlow2 * fabsf((fConst75 * (((fConst78 * fRec42[1]) + (fConst110 * fRec42[0])) + (fConst110 * fRec42[2]))))));
			fbargraph2 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec41[0]))));
			fRec54[0] = (fTempPerm131 - (fConst127 * ((fConst130 * fRec54[2]) + (fConst131 * fRec54[1]))));
			fRec53[0] = ((fConst127 * (((fConst129 * fRec54[1]) + (fConst132 * fRec54[0])) + (fConst132 * fRec54[2]))) - (fConst125 * ((fConst133 * fRec53[2]) + (fConst134 * fRec53[1]))));
			fRec52[0] = ((fConst125 * (((fConst126 * fRec53[1]) + (fConst135 * fRec53[0])) + (fConst135 * fRec53[2]))) - (fConst123 * ((fConst136 * fRec52[2]) + (fConst137 * fRec52[1]))));
			fTempPerm132 = (fConst123 * (((fConst124 * fRec52[1]) + (fConst138 * fRec52[0])) + (fConst138 * fRec52[2])));
			fRec51[0] = (fTempPerm132 - (fConst120 * ((fConst139 * fRec51[2]) + (fConst141 * fRec51[1]))));
			fRec50[0] = ((fConst120 * (((fConst122 * fRec51[1]) + (fConst142 * fRec51[0])) + (fConst142 * fRec51[2]))) - (fConst117 * ((fConst143 * fRec50[2]) + (fConst144 * fRec50[1]))));
			fRec49[0] = ((fConst117 * (((fConst119 * fRec50[1]) + (fConst145 * fRec50[0])) + (fConst145 * fRec50[2]))) - (fConst113 * ((fConst146 * fRec49[2]) + (fConst147 * fRec49[1]))));
			fRec48[0] = ((fSlow1 * fRec48[1]) + (fSlow2 * fabsf((fConst113 * (((fConst116 * fRec49[1]) + (fConst148 * fRec49[0])) + (fConst148 * fRec49[2]))))));
			fbargraph3 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec48[0]))));
			fRec61[0] = (fTempPerm132 - (fConst165 * ((fConst168 * fRec61[2]) + (fConst169 * fRec61[1]))));
			fRec60[0] = ((fConst165 * (((fConst167 * fRec61[1]) + (fConst170 * fRec61[0])) + (fConst170 * fRec61[2]))) - (fConst163 * ((fConst171 * fRec60[2]) + (fConst172 * fRec60[1]))));
			fRec59[0] = ((fConst163 * (((fConst164 * fRec60[0]) + (fConst173 * fRec60[1])) + (fConst164 * fRec60[2]))) - (fConst161 * ((fConst174 * fRec59[2]) + (fConst175 * fRec59[1]))));
			fTempPerm133 = (fConst161 * (((fConst162 * fRec59[1]) + (fConst176 * fRec59[0])) + (fConst176 * fRec59[2])));
			fRec58[0] = (fTempPerm133 - (fConst158 * ((fConst177 * fRec58[2]) + (fConst179 * fRec58[1]))));
			fRec57[0] = ((fConst158 * (((fConst160 * fRec58[1]) + (fConst180 * fRec58[0])) + (fConst180 * fRec58[2]))) - (fConst155 * ((fConst181 * fRec57[2]) + (fConst182 * fRec57[1]))));
			fRec56[0] = ((fConst155 * (((fConst157 * fRec57[1]) + (fConst183 * fRec57[0])) + (fConst183 * fRec57[2]))) - (fConst151 * ((fConst184 * fRec56[2]) + (fConst185 * fRec56[1]))));
			fRec55[0] = ((fSlow1 * fRec55[1]) + (fSlow2 * fabsf((fConst151 * (((fConst154 * fRec56[1]) + (fConst186 * fRec56[0])) + (fConst186 * fRec56[2]))))));
			fbargraph4 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec55[0]))));
			fRec68[0] = (fTempPerm133 - (fConst203 * ((fConst206 * fRec68[2]) + (fConst207 * fRec68[1]))));
			fRec67[0] = ((fConst203 * (((fConst205 * fRec68[1]) + (fConst208 * fRec68[0])) + (fConst208 * fRec68[2]))) - (fConst201 * ((fConst209 * fRec67[2]) + (fConst210 * fRec67[1]))));
			fRec66[0] = ((fConst201 * (((fConst202 * fRec67[1]) + (fConst211 * fRec67[0])) + (fConst211 * fRec67[2]))) - (fConst199 * ((fConst212 * fRec66[2]) + (fConst213 * fRec66[1]))));
			fTempPerm134 = (fConst199 * (((fConst200 * fRec66[1]) + (fConst214 * fRec66[0])) + (fConst214 * fRec66[2])));
			fRec65[0] = (fTempPerm134 - (fConst196 * ((fConst215 * fRec65[2]) + (fConst217 * fRec65[1]))));
			fRec64[0] = ((fConst196 * (((fConst198 * fRec65[1]) + (fConst218 * fRec65[0])) + (fConst218 * fRec65[2]))) - (fConst193 * ((fConst219 * fRec64[2]) + (fConst220 * fRec64[1]))));
			fRec63[0] = ((fConst193 * (((fConst195 * fRec64[1]) + (fConst221 * fRec64[0])) + (fConst221 * fRec64[2]))) - (fConst189 * ((fConst222 * fRec63[2]) + (fConst223 * fRec63[1]))));
			fRec62[0] = ((fSlow1 * fRec62[1]) + (fSlow2 * fabsf((fConst189 * (((fConst192 * fRec63[1]) + (fConst224 * fRec63[0])) + (fConst224 * fRec63[2]))))));
			fbargraph5 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec62[0]))));
			fRec75[0] = (fTempPerm134 - (fConst241 * ((fConst244 * fRec75[2]) + (fConst245 * fRec75[1]))));
			fRec74[0] = ((fConst241 * (((fConst243 * fRec75[1]) + (fConst246 * fRec75[0])) + (fConst246 * fRec75[2]))) - (fConst239 * ((fConst247 * fRec74[2]) + (fConst248 * fRec74[1]))));
			fRec73[0] = ((fConst239 * (((fConst240 * fRec74[1]) + (fConst249 * fRec74[0])) + (fConst249 * fRec74[2]))) - (fConst237 * ((fConst250 * fRec73[2]) + (fConst251 * fRec73[1]))));
			fTempPerm135 = (fConst237 * (((fConst238 * fRec73[1]) + (fConst252 * fRec73[0])) + (fConst252 * fRec73[2])));
			fRec72[0] = (fTempPerm135 - (fConst234 * ((fConst253 * fRec72[2]) + (fConst255 * fRec72[1]))));
			fRec71[0] = ((fConst234 * (((fConst236 * fRec72[1]) + (fConst256 * fRec72[0])) + (fConst256 * fRec72[2]))) - (fConst231 * ((fConst257 * fRec71[2]) + (fConst258 * fRec71[1]))));
			fRec70[0] = ((fConst231 * (((fConst233 * fRec71[1]) + (fConst259 * fRec71[0])) + (fConst259 * fRec71[2]))) - (fConst227 * ((fConst260 * fRec70[2]) + (fConst261 * fRec70[1]))));
			fRec69[0] = ((fSlow1 * fRec69[1]) + (fSlow2 * fabsf((fConst227 * (((fConst230 * fRec70[1]) + (fConst262 * fRec70[0])) + (fConst262 * fRec70[2]))))));
			fbargraph6 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec69[0]))));
			fRec82[0] = (fTempPerm135 - (fConst279 * ((fConst282 * fRec82[2]) + (fConst283 * fRec82[1]))));
			fRec81[0] = ((fConst279 * (((fConst281 * fRec82[1]) + (fConst284 * fRec82[0])) + (fConst284 * fRec82[2]))) - (fConst277 * ((fConst285 * fRec81[2]) + (fConst286 * fRec81[1]))));
			fRec80[0] = ((fConst277 * (((fConst278 * fRec81[1]) + (fConst287 * fRec81[0])) + (fConst287 * fRec81[2]))) - (fConst275 * ((fConst288 * fRec80[2]) + (fConst289 * fRec80[1]))));
			fTempPerm136 = (fConst275 * (((fConst276 * fRec80[1]) + (fConst290 * fRec80[0])) + (fConst290 * fRec80[2])));
			fRec79[0] = (fTempPerm136 - (fConst272 * ((fConst291 * fRec79[2]) + (fConst293 * fRec79[1]))));
			fRec78[0] = ((fConst272 * (((fConst274 * fRec79[1]) + (fConst294 * fRec79[0])) + (fConst294 * fRec79[2]))) - (fConst269 * ((fConst295 * fRec78[2]) + (fConst296 * fRec78[1]))));
			fRec77[0] = ((fConst269 * (((fConst271 * fRec78[1]) + (fConst297 * fRec78[0])) + (fConst297 * fRec78[2]))) - (fConst265 * ((fConst298 * fRec77[2]) + (fConst299 * fRec77[1]))));
			fRec76[0] = ((fSlow1 * fRec76[1]) + (fSlow2 * fabsf((fConst265 * (((fConst268 * fRec77[1]) + (fConst300 * fRec77[0])) + (fConst300 * fRec77[2]))))));
			fbargraph7 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec76[0]))));
			fRec89[0] = (fTempPerm136 - (fConst317 * ((fConst320 * fRec89[2]) + (fConst321 * fRec89[1]))));
			fRec88[0] = ((fConst317 * (((fConst319 * fRec89[1]) + (fConst322 * fRec89[0])) + (fConst322 * fRec89[2]))) - (fConst315 * ((fConst323 * fRec88[2]) + (fConst324 * fRec88[1]))));
			fRec87[0] = ((fConst315 * (((fConst316 * fRec88[1]) + (fConst325 * fRec88[0])) + (fConst325 * fRec88[2]))) - (fConst313 * ((fConst326 * fRec87[2]) + (fConst327 * fRec87[1]))));
			fTempPerm137 = (fConst313 * (((fConst314 * fRec87[1]) + (fConst328 * fRec87[0])) + (fConst328 * fRec87[2])));
			fRec86[0] = (fTempPerm137 - (fConst310 * ((fConst329 * fRec86[2]) + (fConst331 * fRec86[1]))));
			fRec85[0] = ((fConst310 * (((fConst312 * fRec86[1]) + (fConst332 * fRec86[0])) + (fConst332 * fRec86[2]))) - (fConst307 * ((fConst333 * fRec85[2]) + (fConst334 * fRec85[1]))));
			fRec84[0] = ((fConst307 * (((fConst309 * fRec85[1]) + (fConst335 * fRec85[0])) + (fConst335 * fRec85[2]))) - (fConst303 * ((fConst336 * fRec84[2]) + (fConst337 * fRec84[1]))));
			fRec83[0] = ((fSlow1 * fRec83[1]) + (fSlow2 * fabsf((fConst303 * (((fConst306 * fRec84[1]) + (fConst338 * fRec84[0])) + (fConst338 * fRec84[2]))))));
			fbargraph8 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec83[0]))));
			fRec96[0] = (fTempPerm137 - (fConst355 * ((fConst358 * fRec96[2]) + (fConst359 * fRec96[1]))));
			fRec95[0] = ((fConst355 * (((fConst357 * fRec96[1]) + (fConst360 * fRec96[0])) + (fConst360 * fRec96[2]))) - (fConst353 * ((fConst361 * fRec95[2]) + (fConst362 * fRec95[1]))));
			fRec94[0] = ((fConst353 * (((fConst354 * fRec95[1]) + (fConst363 * fRec95[0])) + (fConst363 * fRec95[2]))) - (fConst351 * ((fConst364 * fRec94[2]) + (fConst365 * fRec94[1]))));
			fTempPerm138 = (fConst351 * (((fConst352 * fRec94[1]) + (fConst366 * fRec94[0])) + (fConst366 * fRec94[2])));
			fRec93[0] = (fTempPerm138 - (fConst348 * ((fConst367 * fRec93[2]) + (fConst369 * fRec93[1]))));
			fRec92[0] = ((fConst348 * (((fConst350 * fRec93[1]) + (fConst370 * fRec93[0])) + (fConst370 * fRec93[2]))) - (fConst345 * ((fConst371 * fRec92[2]) + (fConst372 * fRec92[1]))));
			fRec91[0] = ((fConst345 * (((fConst347 * fRec92[1]) + (fConst373 * fRec92[0])) + (fConst373 * fRec92[2]))) - (fConst341 * ((fConst374 * fRec91[2]) + (fConst375 * fRec91[1]))));
			fRec90[0] = ((fSlow1 * fRec90[1]) + (fSlow2 * fabsf((fConst341 * (((fConst344 * fRec91[1]) + (fConst376 * fRec91[0])) + (fConst376 * fRec91[2]))))));
			fbargraph9 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec90[0]))));
			fRec103[0] = (fTempPerm138 - (fConst393 * ((fConst396 * fRec103[2]) + (fConst397 * fRec103[1]))));
			fRec102[0] = ((fConst393 * (((fConst395 * fRec103[1]) + (fConst398 * fRec103[0])) + (fConst398 * fRec103[2]))) - (fConst391 * ((fConst399 * fRec102[2]) + (fConst400 * fRec102[1]))));
			fRec101[0] = ((fConst391 * (((fConst392 * fRec102[1]) + (fConst401 * fRec102[0])) + (fConst401 * fRec102[2]))) - (fConst389 * ((fConst402 * fRec101[2]) + (fConst403 * fRec101[1]))));
			fTempPerm139 = (fConst389 * (((fConst390 * fRec101[1]) + (fConst404 * fRec101[0])) + (fConst404 * fRec101[2])));
			fRec100[0] = (fTempPerm139 - (fConst386 * ((fConst405 * fRec100[2]) + (fConst407 * fRec100[1]))));
			fRec99[0] = ((fConst386 * (((fConst388 * fRec100[1]) + (fConst408 * fRec100[0])) + (fConst408 * fRec100[2]))) - (fConst383 * ((fConst409 * fRec99[2]) + (fConst410 * fRec99[1]))));
			fRec98[0] = ((fConst383 * (((fConst385 * fRec99[1]) + (fConst411 * fRec99[0])) + (fConst411 * fRec99[2]))) - (fConst379 * ((fConst412 * fRec98[2]) + (fConst413 * fRec98[1]))));
			fRec97[0] = ((fSlow1 * fRec97[1]) + (fSlow2 * fabsf((fConst379 * (((fConst382 * fRec98[1]) + (fConst414 * fRec98[0])) + (fConst414 * fRec98[2]))))));
			fbargraph10 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec97[0]))));
			fRec110[0] = (fTempPerm139 - (fConst431 * ((fConst434 * fRec110[2]) + (fConst435 * fRec110[1]))));
			fRec109[0] = ((fConst431 * (((fConst433 * fRec110[1]) + (fConst436 * fRec110[0])) + (fConst436 * fRec110[2]))) - (fConst429 * ((fConst437 * fRec109[2]) + (fConst438 * fRec109[1]))));
			fRec108[0] = ((fConst429 * (((fConst430 * fRec109[1]) + (fConst439 * fRec109[0])) + (fConst439 * fRec109[2]))) - (fConst427 * ((fConst440 * fRec108[2]) + (fConst441 * fRec108[1]))));
			fTempPerm140 = (fConst427 * (((fConst428 * fRec108[1]) + (fConst442 * fRec108[0])) + (fConst442 * fRec108[2])));
			fRec107[0] = (fTempPerm140 - (fConst424 * ((fConst443 * fRec107[2]) + (fConst445 * fRec107[1]))));
			fRec106[0] = ((fConst424 * (((fConst426 * fRec107[1]) + (fConst446 * fRec107[0])) + (fConst446 * fRec107[2]))) - (fConst421 * ((fConst447 * fRec106[2]) + (fConst448 * fRec106[1]))));
			fRec105[0] = ((fConst421 * (((fConst423 * fRec106[1]) + (fConst449 * fRec106[0])) + (fConst449 * fRec106[2]))) - (fConst417 * ((fConst450 * fRec105[2]) + (fConst451 * fRec105[1]))));
			fRec104[0] = ((fSlow1 * fRec104[1]) + (fSlow2 * fabsf((fConst417 * (((fConst420 * fRec105[1]) + (fConst452 * fRec105[0])) + (fConst452 * fRec105[2]))))));
			fbargraph11 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec104[0]))));
			fRec117[0] = (fTempPerm140 - (fConst469 * ((fConst472 * fRec117[2]) + (fConst473 * fRec117[1]))));
			fRec116[0] = ((fConst469 * (((fConst471 * fRec117[1]) + (fConst474 * fRec117[0])) + (fConst474 * fRec117[2]))) - (fConst467 * ((fConst475 * fRec116[2]) + (fConst476 * fRec116[1]))));
			fRec115[0] = ((fConst467 * (((fConst468 * fRec116[1]) + (fConst477 * fRec116[0])) + (fConst477 * fRec116[2]))) - (fConst465 * ((fConst478 * fRec115[2]) + (fConst479 * fRec115[1]))));
			fTempPerm141 = (fConst465 * (((fConst466 * fRec115[1]) + (fConst480 * fRec115[0])) + (fConst480 * fRec115[2])));
			fRec114[0] = (fTempPerm141 - (fConst462 * ((fConst481 * fRec114[2]) + (fConst483 * fRec114[1]))));
			fRec113[0] = ((fConst462 * (((fConst464 * fRec114[1]) + (fConst484 * fRec114[0])) + (fConst484 * fRec114[2]))) - (fConst459 * ((fConst485 * fRec113[2]) + (fConst486 * fRec113[1]))));
			fRec112[0] = ((fConst459 * (((fConst461 * fRec113[1]) + (fConst487 * fRec113[0])) + (fConst487 * fRec113[2]))) - (fConst455 * ((fConst488 * fRec112[2]) + (fConst489 * fRec112[1]))));
			fRec111[0] = ((fSlow1 * fRec111[1]) + (fSlow2 * fabsf((fConst455 * (((fConst458 * fRec112[1]) + (fConst490 * fRec112[0])) + (fConst490 * fRec112[2]))))));
			fbargraph12 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec111[0]))));
			fRec124[0] = (fTempPerm141 - (fConst507 * ((fConst510 * fRec124[2]) + (fConst511 * fRec124[1]))));
			fRec123[0] = ((fConst507 * (((fConst509 * fRec124[1]) + (fConst512 * fRec124[0])) + (fConst512 * fRec124[2]))) - (fConst505 * ((fConst513 * fRec123[2]) + (fConst514 * fRec123[1]))));
			fRec122[0] = ((fConst505 * (((fConst506 * fRec123[1]) + (fConst515 * fRec123[0])) + (fConst515 * fRec123[2]))) - (fConst503 * ((fConst516 * fRec122[2]) + (fConst517 * fRec122[1]))));
			fTempPerm142 = (fConst503 * (((fConst504 * fRec122[1]) + (fConst518 * fRec122[0])) + (fConst518 * fRec122[2])));
			fRec121[0] = (fTempPerm142 - (fConst500 * ((fConst519 * fRec121[2]) + (fConst521 * fRec121[1]))));
			fRec120[0] = ((fConst500 * (((fConst502 * fRec121[1]) + (fConst522 * fRec121[0])) + (fConst522 * fRec121[2]))) - (fConst497 * ((fConst523 * fRec120[2]) + (fConst524 * fRec120[1]))));
			fRec119[0] = ((fConst497 * (((fConst499 * fRec120[1]) + (fConst525 * fRec120[0])) + (fConst525 * fRec120[2]))) - (fConst493 * ((fConst526 * fRec119[2]) + (fConst527 * fRec119[1]))));
			fRec118[0] = ((fSlow1 * fRec118[1]) + (fSlow2 * fabsf((fConst493 * (((fConst496 * fRec119[1]) + (fConst528 * fRec119[0])) + (fConst528 * fRec119[2]))))));
			fbargraph13 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec118[0]))));
			fRec128[0] = (fTempPerm142 - (fConst533 * ((fConst536 * fRec128[2]) + (fConst537 * fRec128[1]))));
			fRec127[0] = ((fConst533 * (((fConst535 * fRec128[1]) + (fConst538 * fRec128[0])) + (fConst538 * fRec128[2]))) - (fConst531 * ((fConst539 * fRec127[2]) + (fConst540 * fRec127[1]))));
			fRec126[0] = ((fConst531 * (((fConst532 * fRec127[1]) + (fConst541 * fRec127[0])) + (fConst541 * fRec127[2]))) - (fConst529 * ((fConst542 * fRec126[2]) + (fConst543 * fRec126[1]))));
			fRec125[0] = ((fSlow1 * fRec125[1]) + (fSlow2 * fabsf((fConst529 * (((fConst530 * fRec126[1]) + (fConst544 * fRec126[0])) + (fConst544 * fRec126[2]))))));
			fbargraph14 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec125[0]))));
			fTempPerm143 = fTempPerm129;
			output0[i] = (FAUSTFLOAT)fTempPerm143;
			output1[i] = (FAUSTFLOAT)fTempPerm143;
			// post processing
			fRec125[1] = fRec125[0];
			fRec126[2] = fRec126[1]; fRec126[1] = fRec126[0];
			fRec127[2] = fRec127[1]; fRec127[1] = fRec127[0];
			fRec128[2] = fRec128[1]; fRec128[1] = fRec128[0];
			fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec122[2] = fRec122[1]; fRec122[1] = fRec122[0];
			fRec123[2] = fRec123[1]; fRec123[1] = fRec123[0];
			fRec124[2] = fRec124[1]; fRec124[1] = fRec124[0];
			fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec69[1] = fRec69[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec28[1] = fRec28[0];
			fRec29[1] = fRec29[0];
			fRec30[1] = fRec30[0];
			fRec31[1] = fRec31[0];
			fRec32[1] = fRec32[0];
			fRec33[1] = fRec33[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec27[2] = fRec27[1]; fRec27[1] = fRec27[0];
			fRec23[1] = fRec23[0];
			fRec25[1] = fRec25[0];
			fRec20[1] = fRec20[0];
			fRec22[1] = fRec22[0];
			fRec19[1] = fRec19[0];
			fRec18[1] = fRec18[0];
			for (int i=3; i>0; i--) fRec16[i] = fRec16[i-1];
			iRec17[1] = iRec17[0];
			fVec38[1] = fVec38[0];
			fVec37[1] = fVec37[0];
			fVec35[1] = fVec35[0];
			fVec34[1] = fVec34[0];
			fVec32[1] = fVec32[0];
			fVec31[1] = fVec31[0];
			fRec15[1] = fRec15[0];
			fRec14[1] = fRec14[0];
			fRec13[1] = fRec13[0];
			fRec12[1] = fRec12[0];
			fVec29[1] = fVec29[0];
			fRec11[1] = fRec11[0];
			fVec28[1] = fVec28[0];
			fVec26[1] = fVec26[0];
			fRec10[1] = fRec10[0];
			fVec25[1] = fVec25[0];
			IOTA = IOTA+1;
			fVec23[1] = fVec23[0];
			fRec9[1] = fRec9[0];
			fVec22[1] = fVec22[0];
			fVec21[1] = fVec21[0];
			fVec20[1] = fVec20[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			fRec8[1] = fRec8[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			fVec9[1] = fVec9[0];
			fRec7[1] = fRec7[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			fVec6[1] = fVec6[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec5[1] = fRec5[0];
			fVec1[1] = fVec1[0];
			fRec6[1] = fRec6[0];
			fRec4[1] = fRec4[0];
			for (int i=3; i>0; i--) iVec0[i] = iVec0[i-1];
		}
	}
};


