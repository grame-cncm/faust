//----------------------------------------------------------
// author: "JOS"
// license: "STK-4.3"
// name: "FFT"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[2];
	FAUSTFLOAT 	fslider2;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fbargraph0;
	int 	iRec1[2];
	float 	fRec2[2];
	float 	fRec3[2];
	float 	fTempPerm0;
	int 	IOTA;
	float 	fVec1[32];
	float 	fTempPerm1;
	float 	fTempPerm2;
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fTempPerm6;
	float 	fTempPerm7;
	float 	fTempPerm8;
	float 	fTempPerm9;
	float 	fTempPerm10;
	float 	fTempPerm11;
	float 	fTempPerm12;
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fTempPerm16;
	float 	fTempPerm17;
	float 	fTempPerm18;
	float 	fTempPerm19;
	float 	fTempPerm20;
	float 	fTempPerm21;
	float 	fTempPerm22;
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fTempPerm26;
	float 	fTempPerm27;
	float 	fTempPerm28;
	float 	fTempPerm29;
	float 	fTempPerm30;
	float 	fTempPerm31;
	float 	fTempPerm32;
	float 	fTempPerm33;
	float 	fTempPerm34;
	float 	fTempPerm35;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fTempPerm36;
	float 	fTempPerm37;
	float 	fTempPerm38;
	float 	fTempPerm39;
	float 	fTempPerm40;
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fTempPerm43;
	float 	fTempPerm44;
	float 	fTempPerm45;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fTempPerm49;
	float 	fTempPerm50;
	float 	fTempPerm51;
	float 	fTempPerm52;
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fTempPerm56;
	float 	fTempPerm57;
	float 	fTempPerm58;
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fTempPerm61;
	float 	fTempPerm62;
	float 	fTempPerm63;
	float 	fTempPerm64;
	float 	fTempPerm65;
	float 	fTempPerm66;
	float 	fTempPerm67;
	float 	fTempPerm68;
	float 	fTempPerm69;
	float 	fTempPerm70;
	float 	fTempPerm71;
	float 	fTempPerm72;
	float 	fTempPerm73;
	float 	fTempPerm74;
	float 	fTempPerm75;
	float 	fRec4[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fTempPerm76;
	float 	fTempPerm77;
	float 	fTempPerm78;
	float 	fTempPerm79;
	float 	fTempPerm80;
	float 	fTempPerm81;
	float 	fTempPerm82;
	float 	fTempPerm83;
	float 	fTempPerm84;
	float 	fTempPerm85;
	float 	fTempPerm86;
	float 	fTempPerm87;
	float 	fTempPerm88;
	float 	fTempPerm89;
	float 	fTempPerm90;
	float 	fTempPerm91;
	float 	fTempPerm92;
	float 	fTempPerm93;
	float 	fTempPerm94;
	float 	fTempPerm95;
	float 	fTempPerm96;
	float 	fTempPerm97;
	float 	fTempPerm98;
	float 	fTempPerm99;
	float 	fTempPerm100;
	float 	fRec5[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fTempPerm101;
	float 	fTempPerm102;
	float 	fTempPerm103;
	float 	fTempPerm104;
	float 	fTempPerm105;
	float 	fTempPerm106;
	float 	fTempPerm107;
	float 	fTempPerm108;
	float 	fTempPerm109;
	float 	fTempPerm110;
	float 	fTempPerm111;
	float 	fTempPerm112;
	float 	fTempPerm113;
	float 	fTempPerm114;
	float 	fTempPerm115;
	float 	fTempPerm116;
	float 	fRec6[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fTempPerm117;
	float 	fTempPerm118;
	float 	fTempPerm119;
	float 	fTempPerm120;
	float 	fTempPerm121;
	float 	fTempPerm122;
	float 	fTempPerm123;
	float 	fTempPerm124;
	float 	fTempPerm125;
	float 	fTempPerm126;
	float 	fRec7[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fTempPerm127;
	float 	fTempPerm128;
	float 	fTempPerm129;
	float 	fTempPerm130;
	float 	fTempPerm131;
	float 	fTempPerm132;
	float 	fTempPerm133;
	float 	fTempPerm134;
	float 	fTempPerm135;
	float 	fTempPerm136;
	float 	fTempPerm137;
	float 	fTempPerm138;
	float 	fTempPerm139;
	float 	fTempPerm140;
	float 	fTempPerm141;
	float 	fTempPerm142;
	float 	fRec8[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fTempPerm143;
	float 	fTempPerm144;
	float 	fTempPerm145;
	float 	fTempPerm146;
	float 	fRec9[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fTempPerm147;
	float 	fTempPerm148;
	float 	fTempPerm149;
	float 	fTempPerm150;
	float 	fTempPerm151;
	float 	fTempPerm152;
	float 	fTempPerm153;
	float 	fTempPerm154;
	float 	fTempPerm155;
	float 	fTempPerm156;
	float 	fTempPerm157;
	float 	fTempPerm158;
	float 	fRec10[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fTempPerm159;
	float 	fRec11[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fTempPerm160;
	float 	fTempPerm161;
	float 	fRec12[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fTempPerm162;
	float 	fTempPerm163;
	float 	fTempPerm164;
	float 	fTempPerm165;
	float 	fRec13[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fTempPerm166;
	float 	fTempPerm167;
	float 	fRec14[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fRec15[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fTempPerm168;
	float 	fTempPerm169;
	float 	fRec16[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fTempPerm170;
	float 	fTempPerm171;
	float 	fRec17[2];
	FAUSTFLOAT 	fbargraph15;
	float 	fTempPerm172;
	float 	fTempPerm173;
	float 	fRec18[2];
	FAUSTFLOAT 	fbargraph16;
	float 	fRec19[2];
	FAUSTFLOAT 	fbargraph17;
	float 	fTempPerm174;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("author", "JOS");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("license", "STK-4.3");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "FFT");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 0; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = (1000.0f / min(192000.0f, max(1.0f, (float)fSamplingFreq)));
		fTempPerm0 = 0;
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		fTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		fTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fTempPerm61 = 0;
		fTempPerm62 = 0;
		fTempPerm63 = 0;
		fTempPerm64 = 0;
		fTempPerm65 = 0;
		fTempPerm66 = 0;
		fTempPerm67 = 0;
		fTempPerm68 = 0;
		fTempPerm69 = 0;
		fTempPerm70 = 0;
		fTempPerm71 = 0;
		fTempPerm72 = 0;
		fTempPerm73 = 0;
		fTempPerm74 = 0;
		fTempPerm75 = 0;
		fTempPerm76 = 0;
		fTempPerm77 = 0;
		fTempPerm78 = 0;
		fTempPerm79 = 0;
		fTempPerm80 = 0;
		fTempPerm81 = 0;
		fTempPerm82 = 0;
		fTempPerm83 = 0;
		fTempPerm84 = 0;
		fTempPerm85 = 0;
		fTempPerm86 = 0;
		fTempPerm87 = 0;
		fTempPerm88 = 0;
		fTempPerm89 = 0;
		fTempPerm90 = 0;
		fTempPerm91 = 0;
		fTempPerm92 = 0;
		fTempPerm93 = 0;
		fTempPerm94 = 0;
		fTempPerm95 = 0;
		fTempPerm96 = 0;
		fTempPerm97 = 0;
		fTempPerm98 = 0;
		fTempPerm99 = 0;
		fTempPerm100 = 0;
		fTempPerm101 = 0;
		fTempPerm102 = 0;
		fTempPerm103 = 0;
		fTempPerm104 = 0;
		fTempPerm105 = 0;
		fTempPerm106 = 0;
		fTempPerm107 = 0;
		fTempPerm108 = 0;
		fTempPerm109 = 0;
		fTempPerm110 = 0;
		fTempPerm111 = 0;
		fTempPerm112 = 0;
		fTempPerm113 = 0;
		fTempPerm114 = 0;
		fTempPerm115 = 0;
		fTempPerm116 = 0;
		fTempPerm117 = 0;
		fTempPerm118 = 0;
		fTempPerm119 = 0;
		fTempPerm120 = 0;
		fTempPerm121 = 0;
		fTempPerm122 = 0;
		fTempPerm123 = 0;
		fTempPerm124 = 0;
		fTempPerm125 = 0;
		fTempPerm126 = 0;
		fTempPerm127 = 0;
		fTempPerm128 = 0;
		fTempPerm129 = 0;
		fTempPerm130 = 0;
		fTempPerm131 = 0;
		fTempPerm132 = 0;
		fTempPerm133 = 0;
		fTempPerm134 = 0;
		fTempPerm135 = 0;
		fTempPerm136 = 0;
		fTempPerm137 = 0;
		fTempPerm138 = 0;
		fTempPerm139 = 0;
		fTempPerm140 = 0;
		fTempPerm141 = 0;
		fTempPerm142 = 0;
		fTempPerm143 = 0;
		fTempPerm144 = 0;
		fTempPerm145 = 0;
		fTempPerm146 = 0;
		fTempPerm147 = 0;
		fTempPerm148 = 0;
		fTempPerm149 = 0;
		fTempPerm150 = 0;
		fTempPerm151 = 0;
		fTempPerm152 = 0;
		fTempPerm153 = 0;
		fTempPerm154 = 0;
		fTempPerm155 = 0;
		fTempPerm156 = 0;
		fTempPerm157 = 0;
		fTempPerm158 = 0;
		fTempPerm159 = 0;
		fTempPerm160 = 0;
		fTempPerm161 = 0;
		fTempPerm162 = 0;
		fTempPerm163 = 0;
		fTempPerm164 = 0;
		fTempPerm165 = 0;
		fTempPerm166 = 0;
		fTempPerm167 = 0;
		fTempPerm168 = 0;
		fTempPerm169 = 0;
		fTempPerm170 = 0;
		fTempPerm171 = 0;
		fTempPerm172 = 0;
		fTempPerm173 = 0;
		fTempPerm174 = 0;
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fslider2 = 0.10000000000000001f;
		fslider3 = 8.0f;
	}
	virtual void instanceClear() {
		for (int i=0; i<2; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) iRec1[i] = 0;
		for (int i=0; i<2; i++) fRec2[i] = 0;
		for (int i=0; i<2; i++) fRec3[i] = 0;
		IOTA = 0;
		for (int i=0; i<32; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec6[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<2; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec16[i] = 0;
		for (int i=0; i<2; i++) fRec17[i] = 0;
		for (int i=0; i<2; i++) fRec18[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("FFT");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "fft_spectral_level in Faust's analyzers.lib");
		ui_interface->openHorizontalBox("FFT SPECTRUM ANALYZER, 32 bands");
		ui_interface->declare(&fbargraph1, "0", "");
		ui_interface->declare(&fbargraph1, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853a47f0", &fbargraph1, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "1", "");
		ui_interface->declare(&fbargraph2, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853afea0", &fbargraph2, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "2", "");
		ui_interface->declare(&fbargraph3, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853b84a0", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "3", "");
		ui_interface->declare(&fbargraph4, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853c17d0", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "4", "");
		ui_interface->declare(&fbargraph5, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853c6c10", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "5", "");
		ui_interface->declare(&fbargraph6, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853cf5e0", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "6", "");
		ui_interface->declare(&fbargraph7, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853d4bc0", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "7", "");
		ui_interface->declare(&fbargraph8, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853dd840", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "8", "");
		ui_interface->declare(&fbargraph9, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853e1a70", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "9", "");
		ui_interface->declare(&fbargraph10, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853e6ea0", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "10", "");
		ui_interface->declare(&fbargraph11, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853ec660", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "11", "");
		ui_interface->declare(&fbargraph12, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853f2210", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "12", "");
		ui_interface->declare(&fbargraph13, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853f6090", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph14, "13", "");
		ui_interface->declare(&fbargraph14, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc853fbe70", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph15, "14", "");
		ui_interface->declare(&fbargraph15, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc862055a0", &fbargraph15, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph16, "15", "");
		ui_interface->declare(&fbargraph16, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph16, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc8620bd50", &fbargraph16, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph17, "16", "");
		ui_interface->declare(&fbargraph17, "tooltip", "FFT Spectral Band Level in dB");
		ui_interface->declare(&fbargraph17, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fbc8620fbf0", &fbargraph17, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("FFT SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->declare(&fslider3, "2", "");
		ui_interface->addHorizontalSlider("FFT Bin Number", &fslider3, 8.0f, 0.0f, 16.0f, 0.001f);
		ui_interface->declare(&fbargraph0, "3", "");
		ui_interface->addHorizontalBargraph("Measured FFT Bin Number", &fbargraph0, 0.0f, 16.0f);
		ui_interface->declare(&fslider2, "4", "");
		ui_interface->addHorizontalSlider("Amplitude", &fslider2, 0.10000000000000001f, 0.0f, 1.0f, 0.001f);
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst0 / float(fslider1))));
		float 	fSlow2 = (10.0f * (1.0f - fSlow1));
		float 	fSlow3 = float(fslider2);
		int 	iSlow4 = int(float(fslider3));
		fbargraph0 = iSlow4;
		int 	iSlow5 = iSlow4;
		int 	iSlow6 = int((iSlow5 == 0));
		int 	iSlow7 = int((iSlow5 == 16));
		float 	fSlow8 = (0.19634954084936207f * float(iSlow5));
		float 	fSlow9 = sinf(fSlow8);
		float 	fSlow10 = cosf(fSlow8);
		float 	fSlow11 = (0 - fSlow9);
		//zone2b
		//zone3
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			iRec1[0] = (1 - (iVec0[1] + iRec1[1]));
			fRec2[0] = ((fSlow9 * fRec3[1]) + (fSlow10 * fRec2[1]));
			fRec3[0] = (((fSlow10 * fRec3[1]) + (fSlow11 * fRec2[1])) + (1 - iVec0[1]));
			fTempPerm0 = (fSlow3 * ((iSlow6)?1.0f:((iSlow7)?iRec1[0]:(2.0f * fRec3[0]))));
			fVec1[IOTA&31] = fTempPerm0;
			fTempPerm1 = fVec1[(IOTA-31)&31];
			fTempPerm2 = fVec1[(IOTA-15)&31];
			fTempPerm3 = fVec1[(IOTA-23)&31];
			fTempPerm4 = fVec1[(IOTA-7)&31];
			fTempPerm5 = fVec1[(IOTA-27)&31];
			fTempPerm6 = fVec1[(IOTA-11)&31];
			fTempPerm7 = fVec1[(IOTA-19)&31];
			fTempPerm8 = fVec1[(IOTA-3)&31];
			fTempPerm9 = fVec1[(IOTA-29)&31];
			fTempPerm10 = fVec1[(IOTA-13)&31];
			fTempPerm11 = fVec1[(IOTA-21)&31];
			fTempPerm12 = fVec1[(IOTA-5)&31];
			fTempPerm13 = fVec1[(IOTA-25)&31];
			fTempPerm14 = fVec1[(IOTA-9)&31];
			fTempPerm15 = fVec1[(IOTA-17)&31];
			fTempPerm16 = fVec1[(IOTA-1)&31];
			fTempPerm17 = fVec1[(IOTA-30)&31];
			fTempPerm18 = fVec1[(IOTA-14)&31];
			fTempPerm19 = fVec1[(IOTA-22)&31];
			fTempPerm20 = fVec1[(IOTA-6)&31];
			fTempPerm21 = fVec1[(IOTA-26)&31];
			fTempPerm22 = fVec1[(IOTA-10)&31];
			fTempPerm23 = fVec1[(IOTA-18)&31];
			fTempPerm24 = fVec1[(IOTA-2)&31];
			fTempPerm25 = fVec1[(IOTA-28)&31];
			fTempPerm26 = fVec1[(IOTA-12)&31];
			fTempPerm27 = fVec1[(IOTA-20)&31];
			fTempPerm28 = fVec1[(IOTA-4)&31];
			fTempPerm29 = fVec1[(IOTA-24)&31];
			fTempPerm30 = fVec1[(IOTA-16)&31];
			fTempPerm31 = (fVec1[IOTA&31] + fTempPerm30);
			fTempPerm32 = fVec1[(IOTA-8)&31];
			fTempPerm33 = (fTempPerm29 + (fTempPerm31 + fTempPerm32));
			fTempPerm34 = (fTempPerm25 + (fTempPerm26 + (fTempPerm27 + (fTempPerm28 + fTempPerm33))));
			fTempPerm35 = (fTempPerm17 + (fTempPerm18 + (fTempPerm19 + (fTempPerm20 + (fTempPerm21 + (fTempPerm22 + (fTempPerm23 + (fTempPerm24 + fTempPerm34))))))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, faustpower<2>(fabsf((fTempPerm1 + (fTempPerm2 + (fTempPerm3 + (fTempPerm4 + (fTempPerm5 + (fTempPerm6 + (fTempPerm7 + (fTempPerm8 + (fTempPerm9 + (fTempPerm10 + (fTempPerm11 + (fTempPerm12 + (fTempPerm13 + (fTempPerm14 + (fTempPerm15 + (fTempPerm16 + fTempPerm35))))))))))))))))))))));
			fbargraph1 = (fSlow0 + fRec0[0]);
			fTempPerm36 = (fTempPerm2 - fTempPerm1);
			fTempPerm37 = (0 - fTempPerm36);
			fTempPerm38 = (fTempPerm4 - fTempPerm3);
			fTempPerm39 = (0.70710678118654746f * fTempPerm38);
			fTempPerm40 = ((fTempPerm5 + (0.70710678118654757f * fTempPerm37)) - (fTempPerm6 + fTempPerm39));
			fTempPerm41 = (0.92387953251128674f * fTempPerm40);
			fTempPerm42 = (fTempPerm10 - fTempPerm9);
			fTempPerm43 = (0 - fTempPerm42);
			fTempPerm44 = (fTempPerm13 + (0.70710678118654757f * fTempPerm43));
			fTempPerm45 = (fTempPerm12 - fTempPerm11);
			fTempPerm46 = (0.70710678118654746f * fTempPerm45);
			fTempPerm47 = (fTempPerm14 + fTempPerm46);
			fTempPerm48 = (0.70710678118654746f * fTempPerm37);
			fTempPerm49 = (0.70710678118654757f * fTempPerm38);
			fTempPerm50 = ((fTempPerm48 + (fTempPerm8 + fTempPerm49)) - fTempPerm7);
			fTempPerm51 = ((fTempPerm41 + fTempPerm44) - (fTempPerm47 + (0.38268343236508978f * fTempPerm50)));
			fTempPerm52 = (fTempPerm18 - fTempPerm17);
			fTempPerm53 = (0 - fTempPerm52);
			fTempPerm54 = (fTempPerm20 - fTempPerm19);
			fTempPerm55 = (0.70710678118654746f * fTempPerm54);
			fTempPerm56 = ((fTempPerm21 + (0.70710678118654757f * fTempPerm53)) - (fTempPerm22 + fTempPerm55));
			fTempPerm57 = (fTempPerm26 - fTempPerm25);
			fTempPerm58 = (0 - fTempPerm57);
			fTempPerm59 = (0.70710678118654746f * fTempPerm58);
			fTempPerm60 = (fTempPerm28 - fTempPerm27);
			fTempPerm61 = (0.70710678118654757f * fTempPerm60);
			fTempPerm62 = (fTempPerm59 + (fVec1[IOTA&31] + fTempPerm61));
			fTempPerm63 = (0.70710678118654746f * fTempPerm53);
			fTempPerm64 = (0.70710678118654757f * fTempPerm54);
			fTempPerm65 = ((fTempPerm63 + (fTempPerm24 + fTempPerm64)) - fTempPerm23);
			fTempPerm66 = (0.92387953251128674f * fTempPerm65);
			fTempPerm67 = (0.70710678118654746f * fTempPerm43);
			fTempPerm68 = (0.70710678118654757f * fTempPerm45);
			fTempPerm69 = (fTempPerm67 + (fTempPerm16 + fTempPerm68));
			fTempPerm70 = (0.92387953251128674f * fTempPerm50);
			fTempPerm71 = (((0.38268343236508978f * fTempPerm40) + (fTempPerm69 + fTempPerm70)) - fTempPerm15);
			fTempPerm72 = (0.92387953251128674f * fTempPerm56);
			fTempPerm73 = (fTempPerm29 + (0.70710678118654757f * fTempPerm58));
			fTempPerm74 = (0.70710678118654746f * fTempPerm60);
			fTempPerm75 = (fTempPerm32 + fTempPerm74);
			fRec4[0] = ((fSlow1 * fRec4[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.19509032201612825f * fTempPerm51) + (((0.38268343236508978f * fTempPerm56) + (fTempPerm62 + fTempPerm66)) + (0.98078528040323043f * fTempPerm71))) - fTempPerm30))) + faustpower<2>(fabsf((((0.98078528040323043f * fTempPerm51) + (fTempPerm72 + fTempPerm73)) - ((fTempPerm75 + (0.38268343236508978f * fTempPerm65)) + (0.19509032201612825f * fTempPerm71))))))))));
			fbargraph2 = (fSlow0 + fRec4[0]);
			fTempPerm76 = (fTempPerm10 + fTempPerm9);
			fTempPerm77 = (fTempPerm4 + fTempPerm3);
			fTempPerm78 = (fTempPerm77 - (fTempPerm2 + fTempPerm1));
			fTempPerm79 = (0 - fTempPerm78);
			fTempPerm80 = (fTempPerm12 + fTempPerm11);
			fTempPerm81 = (fTempPerm8 + fTempPerm7);
			fTempPerm82 = (fTempPerm81 - (fTempPerm6 + fTempPerm5));
			fTempPerm83 = (0.70710678118654746f * fTempPerm82);
			fTempPerm84 = ((fTempPerm76 + (0.70710678118654757f * fTempPerm79)) - (fTempPerm80 + fTempPerm83));
			fTempPerm85 = (fTempPerm20 + fTempPerm19);
			fTempPerm86 = (fTempPerm85 - (fTempPerm18 + fTempPerm17));
			fTempPerm87 = (0 - fTempPerm86);
			fTempPerm88 = (0.70710678118654746f * fTempPerm87);
			fTempPerm89 = (fTempPerm24 + fTempPerm23);
			fTempPerm90 = (fTempPerm89 - (fTempPerm22 + fTempPerm21));
			fTempPerm91 = (0.70710678118654757f * fTempPerm90);
			fTempPerm92 = (0.70710678118654746f * fTempPerm79);
			fTempPerm93 = (fTempPerm16 + fTempPerm15);
			fTempPerm94 = (0.70710678118654757f * fTempPerm82);
			fTempPerm95 = (fTempPerm14 + fTempPerm13);
			fTempPerm96 = ((fTempPerm92 + (fTempPerm93 + fTempPerm94)) - fTempPerm95);
			fTempPerm97 = (fTempPerm32 + fTempPerm29);
			fTempPerm98 = (fTempPerm26 + fTempPerm25);
			fTempPerm99 = (fTempPerm28 + fTempPerm27);
			fTempPerm100 = (0.70710678118654746f * fTempPerm90);
			fRec5[0] = ((fSlow1 * fRec5[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.38268343236508978f * fTempPerm84) + ((fTempPerm88 + (fTempPerm31 + fTempPerm91)) + (0.92387953251128674f * fTempPerm96))) - fTempPerm97))) + faustpower<2>(fabsf((((0.92387953251128674f * fTempPerm84) + (fTempPerm98 + (0.70710678118654757f * fTempPerm87))) - ((0.38268343236508978f * fTempPerm96) + (fTempPerm99 + fTempPerm100))))))))));
			fbargraph3 = (fSlow0 + fRec5[0]);
			fTempPerm101 = (0.70710678118654746f * fTempPerm36);
			fTempPerm102 = (fTempPerm6 - (fTempPerm101 + (fTempPerm5 + fTempPerm49)));
			fTempPerm103 = (0.70710678118654746f * fTempPerm42);
			fTempPerm104 = (fTempPerm103 + (fTempPerm13 + fTempPerm68));
			fTempPerm105 = ((fTempPerm8 + (0.70710678118654757f * fTempPerm36)) - (fTempPerm7 + fTempPerm39));
			fTempPerm106 = ((fTempPerm14 + (0.38268343236508984f * fTempPerm102)) - (fTempPerm104 + (0.92387953251128674f * fTempPerm105)));
			fTempPerm107 = (0.70710678118654746f * fTempPerm52);
			fTempPerm108 = (fTempPerm22 - (fTempPerm107 + (fTempPerm21 + fTempPerm64)));
			fTempPerm109 = (fVec1[IOTA&31] + (0.70710678118654757f * fTempPerm57));
			fTempPerm110 = ((fTempPerm24 + (0.70710678118654757f * fTempPerm52)) - (fTempPerm23 + fTempPerm55));
			fTempPerm111 = (fTempPerm16 + (0.70710678118654757f * fTempPerm42));
			fTempPerm112 = (fTempPerm15 + fTempPerm46);
			fTempPerm113 = (((0.92387953251128674f * fTempPerm102) + (fTempPerm111 + (0.38268343236508984f * fTempPerm105))) - fTempPerm112);
			fTempPerm114 = (fTempPerm30 + fTempPerm74);
			fTempPerm115 = (0.70710678118654746f * fTempPerm57);
			fTempPerm116 = (fTempPerm115 + (fTempPerm29 + fTempPerm61));
			fRec6[0] = ((fSlow1 * fRec6[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.55557023301960218f * fTempPerm106) + (((0.92387953251128674f * fTempPerm108) + (fTempPerm109 + (0.38268343236508984f * fTempPerm110))) + (0.83146961230254524f * fTempPerm113))) - fTempPerm114))) + faustpower<2>(fabsf((((0.83146961230254524f * fTempPerm106) + (fTempPerm32 + (0.38268343236508984f * fTempPerm108))) - ((fTempPerm116 + (0.92387953251128674f * fTempPerm110)) + (0.55557023301960218f * fTempPerm113))))))))));
			fbargraph4 = (fSlow0 + fRec6[0]);
			fTempPerm117 = (fTempPerm5 + (fTempPerm81 + fTempPerm6));
			fTempPerm118 = (fTempPerm117 - (fTempPerm1 + (fTempPerm77 + fTempPerm2)));
			fTempPerm119 = (0 - fTempPerm118);
			fTempPerm120 = (fTempPerm13 + (fTempPerm93 + fTempPerm14));
			fTempPerm121 = (fTempPerm120 - (fTempPerm9 + (fTempPerm80 + fTempPerm10)));
			fTempPerm122 = (0.70710678118654757f * fTempPerm121);
			fTempPerm123 = (fTempPerm25 + (fTempPerm99 + fTempPerm26));
			fTempPerm124 = (fTempPerm17 + (fTempPerm85 + fTempPerm18));
			fTempPerm125 = (fTempPerm21 + (fTempPerm89 + fTempPerm22));
			fTempPerm126 = (0.70710678118654746f * fTempPerm121);
			fRec7[0] = ((fSlow1 * fRec7[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.70710678118654746f * fTempPerm119) + (fTempPerm33 + fTempPerm122)) - fTempPerm123))) + faustpower<2>(fabsf(((fTempPerm124 + (0.70710678118654757f * fTempPerm119)) - (fTempPerm125 + fTempPerm126)))))))));
			fbargraph5 = (fSlow0 + fRec7[0]);
			fTempPerm127 = (fTempPerm13 + fTempPerm46);
			fTempPerm128 = ((fTempPerm5 + fTempPerm39) - (fTempPerm6 + (0.70710678118654768f * fTempPerm37)));
			fTempPerm129 = (fTempPerm14 + (0.70710678118654768f * fTempPerm43));
			fTempPerm130 = (0.70710678118654768f * fTempPerm38);
			fTempPerm131 = (fTempPerm8 - (fTempPerm48 + (fTempPerm7 + fTempPerm130)));
			fTempPerm132 = (fTempPerm127 - ((0.38268343236508973f * fTempPerm128) + (fTempPerm129 + (0.92387953251128674f * fTempPerm131))));
			fTempPerm133 = ((fTempPerm21 + fTempPerm55) - (fTempPerm22 + (0.70710678118654768f * fTempPerm53)));
			fTempPerm134 = (0.70710678118654768f * fTempPerm45);
			fTempPerm135 = (fTempPerm67 + (fTempPerm15 + fTempPerm134));
			fTempPerm136 = ((fTempPerm16 + (0.92387953251128674f * fTempPerm128)) - (fTempPerm135 + (0.38268343236508973f * fTempPerm131)));
			fTempPerm137 = (0.70710678118654768f * fTempPerm60);
			fTempPerm138 = (fTempPerm59 + (fTempPerm30 + fTempPerm137));
			fTempPerm139 = (0.70710678118654768f * fTempPerm54);
			fTempPerm140 = (fTempPerm24 - (fTempPerm63 + (fTempPerm23 + fTempPerm139)));
			fTempPerm141 = (fTempPerm29 + fTempPerm74);
			fTempPerm142 = (fTempPerm32 + (0.70710678118654768f * fTempPerm58));
			fRec8[0] = ((fSlow1 * fRec8[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.83146961230254512f * fTempPerm132) + ((fVec1[IOTA&31] + (0.92387953251128674f * fTempPerm133)) + (0.55557023301960229f * fTempPerm136))) - (fTempPerm138 + (0.38268343236508973f * fTempPerm140))))) + faustpower<2>(fabsf(((fTempPerm141 + (0.55557023301960229f * fTempPerm132)) - ((0.83146961230254512f * fTempPerm136) + ((0.38268343236508973f * fTempPerm133) + (fTempPerm142 + (0.92387953251128674f * fTempPerm140))))))))))));
			fbargraph6 = (fSlow0 + fRec8[0]);
			fTempPerm143 = (0.70710678118654746f * fTempPerm78);
			fTempPerm144 = (fTempPerm80 - (fTempPerm143 + (fTempPerm76 + fTempPerm94)));
			fTempPerm145 = ((fTempPerm93 + (0.70710678118654757f * fTempPerm78)) - (fTempPerm95 + fTempPerm83));
			fTempPerm146 = (0.70710678118654746f * fTempPerm86);
			fRec9[0] = ((fSlow1 * fRec9[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.92387953251128674f * fTempPerm144) + ((fTempPerm31 + (0.70710678118654757f * fTempPerm86)) + (0.38268343236508984f * fTempPerm145))) - (fTempPerm97 + fTempPerm100)))) + faustpower<2>(fabsf(((fTempPerm99 + (0.38268343236508984f * fTempPerm144)) - ((0.92387953251128674f * fTempPerm145) + (fTempPerm146 + (fTempPerm98 + fTempPerm91)))))))))));
			fbargraph7 = (fSlow0 + fRec9[0]);
			fTempPerm147 = (fTempPerm103 + (fTempPerm14 + fTempPerm134));
			fTempPerm148 = ((fTempPerm101 + (fTempPerm6 + fTempPerm130)) - fTempPerm5);
			fTempPerm149 = ((fTempPerm8 + fTempPerm39) - (fTempPerm7 + (0.70710678118654768f * fTempPerm36)));
			fTempPerm150 = (fTempPerm147 - ((0.92387953251128674f * fTempPerm148) + (fTempPerm13 + (0.38268343236508984f * fTempPerm149))));
			fTempPerm151 = (fVec1[IOTA&31] + fTempPerm74);
			fTempPerm152 = ((fTempPerm107 + (fTempPerm22 + fTempPerm139)) - fTempPerm21);
			fTempPerm153 = (fTempPerm16 + fTempPerm46);
			fTempPerm154 = (fTempPerm15 + (0.70710678118654768f * fTempPerm42));
			fTempPerm155 = ((fTempPerm153 + (0.38268343236508984f * fTempPerm148)) - (fTempPerm154 + (0.92387953251128674f * fTempPerm149)));
			fTempPerm156 = (fTempPerm30 + (0.70710678118654768f * fTempPerm57));
			fTempPerm157 = ((fTempPerm24 + fTempPerm55) - (fTempPerm23 + (0.70710678118654768f * fTempPerm52)));
			fTempPerm158 = (fTempPerm115 + (fTempPerm32 + fTempPerm137));
			fRec10[0] = ((fSlow1 * fRec10[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((0.98078528040323043f * fTempPerm150) + ((fTempPerm151 + (0.38268343236508984f * fTempPerm152)) + (0.1950903220161283f * fTempPerm155))) - (fTempPerm156 + (0.92387953251128674f * fTempPerm157))))) + faustpower<2>(fabsf(((fTempPerm158 + (0.1950903220161283f * fTempPerm150)) - ((0.98078528040323043f * fTempPerm155) + ((0.92387953251128674f * fTempPerm152) + (fTempPerm29 + (0.38268343236508984f * fTempPerm157))))))))))));
			fbargraph8 = (fSlow0 + fRec10[0]);
			fTempPerm159 = (fTempPerm9 + (fTempPerm10 + (fTempPerm11 + (fTempPerm12 + fTempPerm120))));
			fRec11[0] = ((fSlow1 * fRec11[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((fTempPerm34 - (fTempPerm17 + (fTempPerm18 + (fTempPerm19 + (fTempPerm20 + fTempPerm125))))))) + faustpower<2>(fabsf((0 - (fTempPerm159 - (fTempPerm1 + (fTempPerm2 + (fTempPerm3 + (fTempPerm4 + fTempPerm117)))))))))))));
			fbargraph9 = (fSlow0 + fRec11[0]);
			fTempPerm160 = ((fTempPerm44 + (0.38268343236508967f * fTempPerm50)) - (fTempPerm41 + fTempPerm47));
			fTempPerm161 = (fTempPerm69 - ((0.38268343236508967f * fTempPerm40) + (fTempPerm15 + fTempPerm70)));
			fRec12[0] = ((fSlow1 * fRec12[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf(((fTempPerm62 + (0.98078528040323043f * fTempPerm160)) - (((0.38268343236508967f * fTempPerm56) + (fTempPerm30 + fTempPerm66)) + (0.19509032201612819f * fTempPerm161))))) + faustpower<2>(fabsf(((fTempPerm73 + (0.38268343236508967f * fTempPerm65)) - ((0.19509032201612819f * fTempPerm160) + ((fTempPerm72 + fTempPerm75) + (0.98078528040323043f * fTempPerm161)))))))))));
			fbargraph10 = (fSlow0 + fRec12[0]);
			fTempPerm162 = ((fTempPerm76 + fTempPerm83) - (fTempPerm80 + (0.70710678118654768f * fTempPerm79)));
			fTempPerm163 = (0.70710678118654768f * fTempPerm90);
			fTempPerm164 = (0.70710678118654768f * fTempPerm82);
			fTempPerm165 = (fTempPerm93 - (fTempPerm92 + (fTempPerm95 + fTempPerm164)));
			fRec13[0] = ((fSlow1 * fRec13[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf(((fTempPerm31 + (0.92387953251128674f * fTempPerm162)) - ((fTempPerm88 + (fTempPerm97 + fTempPerm163)) + (0.38268343236508973f * fTempPerm165))))) + faustpower<2>(fabsf(((fTempPerm98 + fTempPerm100) - ((0.38268343236508973f * fTempPerm162) + ((fTempPerm99 + (0.70710678118654768f * fTempPerm87)) + (0.92387953251128674f * fTempPerm165)))))))))));
			fbargraph11 = (fSlow0 + fRec13[0]);
			fTempPerm166 = ((fTempPerm14 + (0.92387953251128652f * fTempPerm105)) - (fTempPerm104 + (0.38268343236509034f * fTempPerm102)));
			fTempPerm167 = (fTempPerm111 - ((0.92387953251128652f * fTempPerm102) + (fTempPerm112 + (0.38268343236509034f * fTempPerm105))));
			fRec14[0] = ((fSlow1 * fRec14[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf(((fTempPerm109 + (0.83146961230254546f * fTempPerm166)) - (((0.92387953251128652f * fTempPerm108) + (fTempPerm114 + (0.38268343236509034f * fTempPerm110))) + (0.55557023301960196f * fTempPerm167))))) + faustpower<2>(fabsf(((fTempPerm32 + (0.92387953251128652f * fTempPerm110)) - ((0.55557023301960196f * fTempPerm166) + ((fTempPerm116 + (0.38268343236509034f * fTempPerm108)) + (0.83146961230254546f * fTempPerm167)))))))))));
			fbargraph12 = (fSlow0 + fRec14[0]);
			fRec15[0] = ((fSlow1 * fRec15[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf(((fTempPerm33 + (0.70710678118654757f * fTempPerm118)) - (fTempPerm123 + fTempPerm126)))) + faustpower<2>(fabsf((fTempPerm125 - ((0.70710678118654746f * fTempPerm118) + (fTempPerm124 + fTempPerm122))))))))));
			fbargraph13 = (fSlow0 + fRec15[0]);
			fTempPerm168 = (((0.38268343236509f * fTempPerm128) + (fTempPerm127 + (0.92387953251128663f * fTempPerm131))) - fTempPerm129);
			fTempPerm169 = ((fTempPerm16 + (0.38268343236509f * fTempPerm131)) - (fTempPerm135 + (0.92387953251128663f * fTempPerm128)));
			fRec16[0] = ((fSlow1 * fRec16[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((fVec1[IOTA&31] + (0.38268343236509f * fTempPerm140)) + (0.55557023301960218f * fTempPerm168)) - ((fTempPerm138 + (0.92387953251128663f * fTempPerm133)) + (0.83146961230254535f * fTempPerm169))))) + faustpower<2>(fabsf((((0.38268343236509f * fTempPerm133) + (fTempPerm141 + (0.92387953251128663f * fTempPerm140))) - ((0.83146961230254535f * fTempPerm168) + (fTempPerm142 + (0.55557023301960218f * fTempPerm169)))))))))));
			fbargraph14 = (fSlow0 + fRec16[0]);
			fTempPerm170 = ((fTempPerm143 + (fTempPerm80 + fTempPerm164)) - fTempPerm76);
			fTempPerm171 = ((fTempPerm93 + fTempPerm83) - (fTempPerm95 + (0.70710678118654768f * fTempPerm78)));
			fRec17[0] = ((fSlow1 * fRec17[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((fTempPerm31 + fTempPerm100) + (0.38268343236508984f * fTempPerm170)) - ((fTempPerm97 + (0.70710678118654768f * fTempPerm86)) + (0.92387953251128674f * fTempPerm171))))) + faustpower<2>(fabsf(((fTempPerm146 + (fTempPerm99 + fTempPerm163)) - ((0.92387953251128674f * fTempPerm170) + (fTempPerm98 + (0.38268343236508984f * fTempPerm171)))))))))));
			fbargraph15 = (fSlow0 + fRec17[0]);
			fTempPerm172 = (((0.92387953251128652f * fTempPerm148) + (fTempPerm147 + (0.38268343236509039f * fTempPerm149))) - fTempPerm13);
			fTempPerm173 = ((fTempPerm153 + (0.92387953251128652f * fTempPerm149)) - (fTempPerm154 + (0.38268343236509039f * fTempPerm148)));
			fRec18[0] = ((fSlow1 * fRec18[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, (faustpower<2>(fabsf((((fTempPerm151 + (0.92387953251128652f * fTempPerm157)) + (0.19509032201612858f * fTempPerm172)) - ((fTempPerm156 + (0.38268343236509039f * fTempPerm152)) + (0.98078528040323043f * fTempPerm173))))) + faustpower<2>(fabsf((((0.92387953251128652f * fTempPerm152) + (fTempPerm158 + (0.38268343236509039f * fTempPerm157))) - ((0.98078528040323043f * fTempPerm172) + (fTempPerm29 + (0.19509032201612858f * fTempPerm173)))))))))));
			fbargraph16 = (fSlow0 + fRec18[0]);
			fRec19[0] = ((fSlow1 * fRec19[1]) + (fSlow2 * log10f(max(9.9999999999999995e-08f, faustpower<2>(fabsf((fTempPerm35 - (fTempPerm1 + (fTempPerm2 + (fTempPerm3 + (fTempPerm4 + (fTempPerm5 + (fTempPerm6 + (fTempPerm7 + (fTempPerm8 + fTempPerm159)))))))))))))));
			fbargraph17 = (fSlow0 + fRec19[0]);
			fTempPerm174 = fVec1[IOTA&31];
			output0[i] = (FAUSTFLOAT)fTempPerm174;
			output1[i] = (FAUSTFLOAT)fTempPerm174;
			// post processing
			fRec19[1] = fRec19[0];
			fRec18[1] = fRec18[0];
			fRec17[1] = fRec17[0];
			fRec16[1] = fRec16[0];
			fRec15[1] = fRec15[0];
			fRec14[1] = fRec14[0];
			fRec13[1] = fRec13[0];
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			fRec10[1] = fRec10[0];
			fRec9[1] = fRec9[0];
			fRec8[1] = fRec8[0];
			fRec7[1] = fRec7[0];
			fRec6[1] = fRec6[0];
			fRec5[1] = fRec5[0];
			fRec4[1] = fRec4[0];
			fRec0[1] = fRec0[0];
			IOTA = IOTA+1;
			fRec3[1] = fRec3[0];
			fRec2[1] = fRec2[0];
			iRec1[1] = iRec1[0];
			iVec0[1] = iVec0[0];
		}
	}
};


