//----------------------------------------------------------
// name: "phaserFlangerLab"
//
// Code generated with Faust 2.5.15 (https://faust.grame.fr)
//----------------------------------------------------------

/* link with  */
#include <math.h>
#ifndef FAUSTPOWER
#define FAUSTPOWER
#include <cmath>
template <int N> inline int faustpower(int x)              { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline int faustpower<0>(int x)            { return 1; }
template <> 	 inline int faustpower<1>(int x)            { return x; }
template <> 	 inline int faustpower<2>(int x)            { return x*x; }
template <int N> inline float faustpower(float x)            { return faustpower<N/2>(x) * faustpower<N-N/2>(x); } 
template <> 	 inline float faustpower<0>(float x)          { return 1; }
template <> 	 inline float faustpower<1>(float x)          { return x; }
template <> 	 inline float faustpower<2>(float x)          { return x*x; }
#endif

// algorithm is required for min and max
#include <algorithm>
#include "gui/UI.h"

using namespace std;

// the struct below are not defined in UI.h
struct dsp {
};

struct Meta {
	void declare(const char*, const char*) {}
};
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 


#ifndef FAUSTCLASS 
#define FAUSTCLASS mydsp
#endif

class mydsp : public dsp {
  private:
	FAUSTFLOAT 	fslider0;
	float 	fConst0;
	float 	fConst1;
	FAUSTFLOAT 	fslider1;
	int 	iVec0[4];
	float 	fConst2;
	float 	fConst3;
	float 	fConst4;
	float 	fConst5;
	float 	fConst6;
	float 	fConst7;
	float 	fConst8;
	float 	fConst9;
	float 	fConst10;
	float 	fConst11;
	float 	fConst12;
	float 	fConst13;
	FAUSTFLOAT 	fcheckbox0;
	FAUSTFLOAT 	fcheckbox1;
	FAUSTFLOAT 	fslider2;
	float 	fRec4[2];
	FAUSTFLOAT 	fcheckbox2;
	FAUSTFLOAT 	fcheckbox3;
	FAUSTFLOAT 	fcheckbox4;
	int 	iRec6[2];
	float 	fTempPerm0;
	float 	fRec5[4];
	FAUSTFLOAT 	fentry0;
	float 	fConst14;
	float 	fConst15;
	float 	fConst16;
	FAUSTFLOAT 	fslider3;
	FAUSTFLOAT 	fslider4;
	float 	fRec8[2];
	float 	fTempPerm1;
	float 	fVec1[2];
	float 	fTempPerm2;
	float 	fRec7[2];
	float 	fTempPerm3;
	float 	fTempPerm4;
	float 	fTempPerm5;
	float 	fVec2[2];
	float 	fTempPerm6;
	float 	fVec3[2];
	float 	fTempPerm7;
	float 	fVec4[2];
	float 	fTempPerm8;
	float 	fVec5[2];
	float 	fConst17;
	float 	fTempPerm9;
	float 	fVec6[2];
	float 	fTempPerm10;
	float 	fVec7[2];
	float 	fConst18;
	FAUSTFLOAT 	fslider5;
	float 	fTempPerm11;
	float 	fVec8[2];
	float 	fTempPerm12;
	float 	fRec9[2];
	float 	fTempPerm13;
	float 	fTempPerm14;
	float 	fTempPerm15;
	float 	fVec9[2];
	float 	fTempPerm16;
	float 	fVec10[2];
	float 	fTempPerm17;
	float 	fVec11[2];
	float 	fTempPerm18;
	float 	fVec12[2];
	float 	fTempPerm19;
	float 	fVec13[2];
	float 	fTempPerm20;
	float 	fVec14[2];
	FAUSTFLOAT 	fslider6;
	float 	fTempPerm21;
	float 	fVec15[2];
	float 	fTempPerm22;
	float 	fRec10[2];
	float 	fTempPerm23;
	float 	fTempPerm24;
	float 	fTempPerm25;
	float 	fVec16[2];
	float 	fTempPerm26;
	float 	fVec17[2];
	float 	fTempPerm27;
	float 	fVec18[2];
	float 	fTempPerm28;
	float 	fVec19[2];
	float 	fTempPerm29;
	float 	fVec20[2];
	float 	fTempPerm30;
	float 	fVec21[2];
	float 	fTempPerm31;
	FAUSTFLOAT 	fslider7;
	float 	fConst19;
	FAUSTFLOAT 	fslider8;
	float 	fRec11[2];
	int 	iTempPerm32;
	float 	fRec12[2];
	FAUSTFLOAT 	fbargraph0;
	float 	fTempPerm33;
	float 	fTempPerm34;
	FAUSTFLOAT 	fcheckbox5;
	FAUSTFLOAT 	fslider9;
	FAUSTFLOAT 	fslider10;
	float 	fTempPerm35;
	int 	IOTA;
	float 	fVec22[4096];
	FAUSTFLOAT 	fslider11;
	FAUSTFLOAT 	fslider12;
	float 	fTempPerm36;
	int 	iTempPerm37;
	float 	fTempPerm38;
	float 	fRec13[2];
	float 	fTempPerm39;
	FAUSTFLOAT 	fslider13;
	float 	fTempPerm40;
	FAUSTFLOAT 	fcheckbox6;
	FAUSTFLOAT 	fslider14;
	FAUSTFLOAT 	fslider15;
	FAUSTFLOAT 	fslider16;
	FAUSTFLOAT 	fslider17;
	FAUSTFLOAT 	fslider18;
	FAUSTFLOAT 	fslider19;
	FAUSTFLOAT 	fslider20;
	float 	fRec19[2];
	float 	fRec20[2];
	float 	fTempPerm41;
	float 	fTempPerm42;
	float 	fRec18[3];
	float 	fTempPerm43;
	float 	fRec17[3];
	float 	fTempPerm44;
	float 	fRec16[3];
	float 	fTempPerm45;
	float 	fRec15[3];
	float 	fRec14[2];
	FAUSTFLOAT 	fcheckbox7;
	float 	fTempPerm46;
	float 	fTempPerm47;
	float 	fTempPerm48;
	float 	fVec23[4096];
	float 	fTempPerm49;
	int 	iTempPerm50;
	float 	fTempPerm51;
	float 	fRec21[2];
	float 	fTempPerm52;
	float 	fTempPerm53;
	float 	fTempPerm54;
	float 	fTempPerm55;
	float 	fRec26[3];
	float 	fTempPerm56;
	float 	fRec25[3];
	float 	fTempPerm57;
	float 	fRec24[3];
	float 	fTempPerm58;
	float 	fRec23[3];
	float 	fRec22[2];
	float 	fTempPerm59;
	float 	fTempPerm60;
	float 	fConst20;
	float 	fConst21;
	float 	fConst22;
	float 	fRec3[3];
	float 	fConst23;
	float 	fConst24;
	float 	fConst25;
	float 	fRec2[3];
	float 	fConst26;
	float 	fConst27;
	float 	fConst28;
	float 	fRec1[3];
	float 	fConst29;
	float 	fRec0[2];
	FAUSTFLOAT 	fbargraph1;
	float 	fConst30;
	float 	fConst31;
	float 	fConst32;
	float 	fConst33;
	float 	fConst34;
	float 	fConst35;
	float 	fConst36;
	float 	fConst37;
	float 	fConst38;
	float 	fConst39;
	float 	fConst40;
	float 	fConst41;
	float 	fConst42;
	float 	fConst43;
	float 	fConst44;
	float 	fConst45;
	float 	fConst46;
	float 	fConst47;
	float 	fConst48;
	float 	fConst49;
	float 	fConst50;
	float 	fRec33[3];
	float 	fConst51;
	float 	fConst52;
	float 	fConst53;
	float 	fRec32[3];
	float 	fConst54;
	float 	fConst55;
	float 	fConst56;
	float 	fRec31[3];
	float 	fConst57;
	float 	fTempPerm61;
	float 	fConst58;
	float 	fConst59;
	float 	fConst60;
	float 	fRec30[3];
	float 	fConst61;
	float 	fConst62;
	float 	fConst63;
	float 	fRec29[3];
	float 	fConst64;
	float 	fConst65;
	float 	fConst66;
	float 	fRec28[3];
	float 	fConst67;
	float 	fRec27[2];
	FAUSTFLOAT 	fbargraph2;
	float 	fConst68;
	float 	fConst69;
	float 	fConst70;
	float 	fConst71;
	float 	fConst72;
	float 	fConst73;
	float 	fConst74;
	float 	fConst75;
	float 	fConst76;
	float 	fConst77;
	float 	fConst78;
	float 	fConst79;
	float 	fConst80;
	float 	fConst81;
	float 	fConst82;
	float 	fConst83;
	float 	fConst84;
	float 	fConst85;
	float 	fConst86;
	float 	fConst87;
	float 	fConst88;
	float 	fRec40[3];
	float 	fConst89;
	float 	fConst90;
	float 	fConst91;
	float 	fRec39[3];
	float 	fConst92;
	float 	fConst93;
	float 	fConst94;
	float 	fRec38[3];
	float 	fConst95;
	float 	fTempPerm62;
	float 	fConst96;
	float 	fConst97;
	float 	fConst98;
	float 	fRec37[3];
	float 	fConst99;
	float 	fConst100;
	float 	fConst101;
	float 	fRec36[3];
	float 	fConst102;
	float 	fConst103;
	float 	fConst104;
	float 	fRec35[3];
	float 	fConst105;
	float 	fRec34[2];
	FAUSTFLOAT 	fbargraph3;
	float 	fConst106;
	float 	fConst107;
	float 	fConst108;
	float 	fConst109;
	float 	fConst110;
	float 	fConst111;
	float 	fConst112;
	float 	fConst113;
	float 	fConst114;
	float 	fConst115;
	float 	fConst116;
	float 	fConst117;
	float 	fConst118;
	float 	fConst119;
	float 	fConst120;
	float 	fConst121;
	float 	fConst122;
	float 	fConst123;
	float 	fConst124;
	float 	fConst125;
	float 	fConst126;
	float 	fRec47[3];
	float 	fConst127;
	float 	fConst128;
	float 	fConst129;
	float 	fRec46[3];
	float 	fConst130;
	float 	fConst131;
	float 	fConst132;
	float 	fRec45[3];
	float 	fConst133;
	float 	fTempPerm63;
	float 	fConst134;
	float 	fConst135;
	float 	fConst136;
	float 	fRec44[3];
	float 	fConst137;
	float 	fConst138;
	float 	fConst139;
	float 	fRec43[3];
	float 	fConst140;
	float 	fConst141;
	float 	fConst142;
	float 	fRec42[3];
	float 	fConst143;
	float 	fRec41[2];
	FAUSTFLOAT 	fbargraph4;
	float 	fConst144;
	float 	fConst145;
	float 	fConst146;
	float 	fConst147;
	float 	fConst148;
	float 	fConst149;
	float 	fConst150;
	float 	fConst151;
	float 	fConst152;
	float 	fConst153;
	float 	fConst154;
	float 	fConst155;
	float 	fConst156;
	float 	fConst157;
	float 	fConst158;
	float 	fConst159;
	float 	fConst160;
	float 	fConst161;
	float 	fConst162;
	float 	fConst163;
	float 	fConst164;
	float 	fRec54[3];
	float 	fConst165;
	float 	fConst166;
	float 	fConst167;
	float 	fRec53[3];
	float 	fConst168;
	float 	fConst169;
	float 	fConst170;
	float 	fRec52[3];
	float 	fConst171;
	float 	fTempPerm64;
	float 	fConst172;
	float 	fConst173;
	float 	fConst174;
	float 	fRec51[3];
	float 	fConst175;
	float 	fConst176;
	float 	fConst177;
	float 	fRec50[3];
	float 	fConst178;
	float 	fConst179;
	float 	fConst180;
	float 	fRec49[3];
	float 	fConst181;
	float 	fRec48[2];
	FAUSTFLOAT 	fbargraph5;
	float 	fConst182;
	float 	fConst183;
	float 	fConst184;
	float 	fConst185;
	float 	fConst186;
	float 	fConst187;
	float 	fConst188;
	float 	fConst189;
	float 	fConst190;
	float 	fConst191;
	float 	fConst192;
	float 	fConst193;
	float 	fConst194;
	float 	fConst195;
	float 	fConst196;
	float 	fConst197;
	float 	fConst198;
	float 	fConst199;
	float 	fConst200;
	float 	fConst201;
	float 	fConst202;
	float 	fRec61[3];
	float 	fConst203;
	float 	fConst204;
	float 	fConst205;
	float 	fRec60[3];
	float 	fConst206;
	float 	fConst207;
	float 	fConst208;
	float 	fRec59[3];
	float 	fConst209;
	float 	fTempPerm65;
	float 	fConst210;
	float 	fConst211;
	float 	fConst212;
	float 	fRec58[3];
	float 	fConst213;
	float 	fConst214;
	float 	fConst215;
	float 	fRec57[3];
	float 	fConst216;
	float 	fConst217;
	float 	fConst218;
	float 	fRec56[3];
	float 	fConst219;
	float 	fRec55[2];
	FAUSTFLOAT 	fbargraph6;
	float 	fConst220;
	float 	fConst221;
	float 	fConst222;
	float 	fConst223;
	float 	fConst224;
	float 	fConst225;
	float 	fConst226;
	float 	fConst227;
	float 	fConst228;
	float 	fConst229;
	float 	fConst230;
	float 	fConst231;
	float 	fConst232;
	float 	fConst233;
	float 	fConst234;
	float 	fConst235;
	float 	fConst236;
	float 	fConst237;
	float 	fConst238;
	float 	fConst239;
	float 	fConst240;
	float 	fRec68[3];
	float 	fConst241;
	float 	fConst242;
	float 	fConst243;
	float 	fRec67[3];
	float 	fConst244;
	float 	fConst245;
	float 	fConst246;
	float 	fRec66[3];
	float 	fConst247;
	float 	fTempPerm66;
	float 	fConst248;
	float 	fConst249;
	float 	fConst250;
	float 	fRec65[3];
	float 	fConst251;
	float 	fConst252;
	float 	fConst253;
	float 	fRec64[3];
	float 	fConst254;
	float 	fConst255;
	float 	fConst256;
	float 	fRec63[3];
	float 	fConst257;
	float 	fRec62[2];
	FAUSTFLOAT 	fbargraph7;
	float 	fConst258;
	float 	fConst259;
	float 	fConst260;
	float 	fConst261;
	float 	fConst262;
	float 	fConst263;
	float 	fConst264;
	float 	fConst265;
	float 	fConst266;
	float 	fConst267;
	float 	fConst268;
	float 	fConst269;
	float 	fConst270;
	float 	fConst271;
	float 	fConst272;
	float 	fConst273;
	float 	fConst274;
	float 	fConst275;
	float 	fConst276;
	float 	fConst277;
	float 	fConst278;
	float 	fRec75[3];
	float 	fConst279;
	float 	fConst280;
	float 	fConst281;
	float 	fRec74[3];
	float 	fConst282;
	float 	fConst283;
	float 	fConst284;
	float 	fRec73[3];
	float 	fConst285;
	float 	fTempPerm67;
	float 	fConst286;
	float 	fConst287;
	float 	fConst288;
	float 	fRec72[3];
	float 	fConst289;
	float 	fConst290;
	float 	fConst291;
	float 	fRec71[3];
	float 	fConst292;
	float 	fConst293;
	float 	fConst294;
	float 	fRec70[3];
	float 	fConst295;
	float 	fRec69[2];
	FAUSTFLOAT 	fbargraph8;
	float 	fConst296;
	float 	fConst297;
	float 	fConst298;
	float 	fConst299;
	float 	fConst300;
	float 	fConst301;
	float 	fConst302;
	float 	fConst303;
	float 	fConst304;
	float 	fConst305;
	float 	fConst306;
	float 	fConst307;
	float 	fConst308;
	float 	fConst309;
	float 	fConst310;
	float 	fConst311;
	float 	fConst312;
	float 	fConst313;
	float 	fConst314;
	float 	fConst315;
	float 	fConst316;
	float 	fRec82[3];
	float 	fConst317;
	float 	fConst318;
	float 	fConst319;
	float 	fRec81[3];
	float 	fConst320;
	float 	fConst321;
	float 	fConst322;
	float 	fRec80[3];
	float 	fConst323;
	float 	fTempPerm68;
	float 	fConst324;
	float 	fConst325;
	float 	fConst326;
	float 	fRec79[3];
	float 	fConst327;
	float 	fConst328;
	float 	fConst329;
	float 	fRec78[3];
	float 	fConst330;
	float 	fConst331;
	float 	fConst332;
	float 	fRec77[3];
	float 	fConst333;
	float 	fRec76[2];
	FAUSTFLOAT 	fbargraph9;
	float 	fConst334;
	float 	fConst335;
	float 	fConst336;
	float 	fConst337;
	float 	fConst338;
	float 	fConst339;
	float 	fConst340;
	float 	fConst341;
	float 	fConst342;
	float 	fConst343;
	float 	fConst344;
	float 	fConst345;
	float 	fConst346;
	float 	fConst347;
	float 	fConst348;
	float 	fConst349;
	float 	fConst350;
	float 	fConst351;
	float 	fConst352;
	float 	fConst353;
	float 	fConst354;
	float 	fRec89[3];
	float 	fConst355;
	float 	fConst356;
	float 	fConst357;
	float 	fRec88[3];
	float 	fConst358;
	float 	fConst359;
	float 	fConst360;
	float 	fRec87[3];
	float 	fConst361;
	float 	fTempPerm69;
	float 	fConst362;
	float 	fConst363;
	float 	fConst364;
	float 	fRec86[3];
	float 	fConst365;
	float 	fConst366;
	float 	fConst367;
	float 	fRec85[3];
	float 	fConst368;
	float 	fConst369;
	float 	fConst370;
	float 	fRec84[3];
	float 	fConst371;
	float 	fRec83[2];
	FAUSTFLOAT 	fbargraph10;
	float 	fConst372;
	float 	fConst373;
	float 	fConst374;
	float 	fConst375;
	float 	fConst376;
	float 	fConst377;
	float 	fConst378;
	float 	fConst379;
	float 	fConst380;
	float 	fConst381;
	float 	fConst382;
	float 	fConst383;
	float 	fConst384;
	float 	fConst385;
	float 	fConst386;
	float 	fConst387;
	float 	fConst388;
	float 	fConst389;
	float 	fConst390;
	float 	fConst391;
	float 	fConst392;
	float 	fRec96[3];
	float 	fConst393;
	float 	fConst394;
	float 	fConst395;
	float 	fRec95[3];
	float 	fConst396;
	float 	fConst397;
	float 	fConst398;
	float 	fRec94[3];
	float 	fConst399;
	float 	fTempPerm70;
	float 	fConst400;
	float 	fConst401;
	float 	fConst402;
	float 	fRec93[3];
	float 	fConst403;
	float 	fConst404;
	float 	fConst405;
	float 	fRec92[3];
	float 	fConst406;
	float 	fConst407;
	float 	fConst408;
	float 	fRec91[3];
	float 	fConst409;
	float 	fRec90[2];
	FAUSTFLOAT 	fbargraph11;
	float 	fConst410;
	float 	fConst411;
	float 	fConst412;
	float 	fConst413;
	float 	fConst414;
	float 	fConst415;
	float 	fConst416;
	float 	fConst417;
	float 	fConst418;
	float 	fConst419;
	float 	fConst420;
	float 	fConst421;
	float 	fConst422;
	float 	fConst423;
	float 	fConst424;
	float 	fConst425;
	float 	fConst426;
	float 	fConst427;
	float 	fConst428;
	float 	fConst429;
	float 	fConst430;
	float 	fRec103[3];
	float 	fConst431;
	float 	fConst432;
	float 	fConst433;
	float 	fRec102[3];
	float 	fConst434;
	float 	fConst435;
	float 	fConst436;
	float 	fRec101[3];
	float 	fConst437;
	float 	fTempPerm71;
	float 	fConst438;
	float 	fConst439;
	float 	fConst440;
	float 	fRec100[3];
	float 	fConst441;
	float 	fConst442;
	float 	fConst443;
	float 	fRec99[3];
	float 	fConst444;
	float 	fConst445;
	float 	fConst446;
	float 	fRec98[3];
	float 	fConst447;
	float 	fRec97[2];
	FAUSTFLOAT 	fbargraph12;
	float 	fConst448;
	float 	fConst449;
	float 	fConst450;
	float 	fConst451;
	float 	fConst452;
	float 	fConst453;
	float 	fConst454;
	float 	fConst455;
	float 	fConst456;
	float 	fConst457;
	float 	fConst458;
	float 	fConst459;
	float 	fConst460;
	float 	fConst461;
	float 	fConst462;
	float 	fConst463;
	float 	fConst464;
	float 	fConst465;
	float 	fConst466;
	float 	fConst467;
	float 	fConst468;
	float 	fRec110[3];
	float 	fConst469;
	float 	fConst470;
	float 	fConst471;
	float 	fRec109[3];
	float 	fConst472;
	float 	fConst473;
	float 	fConst474;
	float 	fRec108[3];
	float 	fConst475;
	float 	fTempPerm72;
	float 	fConst476;
	float 	fConst477;
	float 	fConst478;
	float 	fRec107[3];
	float 	fConst479;
	float 	fConst480;
	float 	fConst481;
	float 	fRec106[3];
	float 	fConst482;
	float 	fConst483;
	float 	fConst484;
	float 	fRec105[3];
	float 	fConst485;
	float 	fRec104[2];
	FAUSTFLOAT 	fbargraph13;
	float 	fConst486;
	float 	fConst487;
	float 	fConst488;
	float 	fConst489;
	float 	fConst490;
	float 	fConst491;
	float 	fConst492;
	float 	fConst493;
	float 	fConst494;
	float 	fConst495;
	float 	fConst496;
	float 	fConst497;
	float 	fConst498;
	float 	fConst499;
	float 	fConst500;
	float 	fConst501;
	float 	fConst502;
	float 	fConst503;
	float 	fConst504;
	float 	fConst505;
	float 	fConst506;
	float 	fRec117[3];
	float 	fConst507;
	float 	fConst508;
	float 	fConst509;
	float 	fRec116[3];
	float 	fConst510;
	float 	fConst511;
	float 	fConst512;
	float 	fRec115[3];
	float 	fConst513;
	float 	fTempPerm73;
	float 	fConst514;
	float 	fConst515;
	float 	fConst516;
	float 	fRec114[3];
	float 	fConst517;
	float 	fConst518;
	float 	fConst519;
	float 	fRec113[3];
	float 	fConst520;
	float 	fConst521;
	float 	fConst522;
	float 	fRec112[3];
	float 	fConst523;
	float 	fRec111[2];
	FAUSTFLOAT 	fbargraph14;
	float 	fConst524;
	float 	fConst525;
	float 	fConst526;
	float 	fConst527;
	float 	fConst528;
	float 	fConst529;
	float 	fConst530;
	float 	fConst531;
	float 	fConst532;
	float 	fRec121[3];
	float 	fConst533;
	float 	fConst534;
	float 	fConst535;
	float 	fRec120[3];
	float 	fConst536;
	float 	fConst537;
	float 	fConst538;
	float 	fRec119[3];
	float 	fConst539;
	float 	fRec118[2];
	FAUSTFLOAT 	fbargraph15;
	int fSamplingFreq;

  public:
	virtual void metadata(Meta* m) { 
		m->declare("analyzers.lib/name", "Faust Analyzer Library");
		m->declare("analyzers.lib/version", "0.0");
		m->declare("basics.lib/name", "Faust Basic Element Library");
		m->declare("basics.lib/version", "0.0");
		m->declare("delays.lib/name", "Faust Delay Library");
		m->declare("delays.lib/version", "0.0");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/version", "0.0");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "phaserFlangerLab");
		m->declare("noises.lib/name", "Faust Noise Generator Library");
		m->declare("noises.lib/version", "0.0");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
		m->declare("phaflangers.lib/name", "Faust Phaser and Flanger Library");
		m->declare("phaflangers.lib/version", "0.0");
		m->declare("routes.lib/name", "Faust Signal Routing Library");
		m->declare("routes.lib/version", "0.0");
		m->declare("signals.lib/name", "Faust Signal Routing Library");
		m->declare("signals.lib/version", "0.0");
	}

	virtual int getNumInputs() { return 1; }
	virtual int getNumOutputs() { return 2; }
	static void classInit(int samplingFreq) {
	}
	virtual void instanceConstants(int samplingFreq) {
		fSamplingFreq = samplingFreq;
		fConst0 = min(192000.0f, max(1.0f, (float)fSamplingFreq));
		fConst1 = (1000.0f / fConst0);
		fConst2 = tanf((50265.482457436687f / fConst0));
		fConst3 = (1.0f / fConst2);
		fConst4 = (1.0f / (((fConst3 + 0.157482159302087f) / fConst2) + 0.93514016703154246f));
		fConst5 = faustpower<2>(fConst2);
		fConst6 = (50.063807016150385f / fConst5);
		fConst7 = (2 * (0.93514016703154246f - fConst6));
		fConst8 = (1.0f / (((fConst3 + 0.74313046010703965f) / fConst2) + 1.450071084655647f));
		fConst9 = (11.052052171507189f / fConst5);
		fConst10 = (2 * (1.450071084655647f - fConst9));
		fConst11 = (1.0f / (((fConst3 + 3.1897274020965583f) / fConst2) + 4.0767819696438066f));
		fConst12 = (0.0017661728399818856f / fConst5);
		fConst13 = (2 * (0.00040767818495825777f - fConst12));
		fTempPerm0 = 0;
		fConst14 = float(fConst0);
		fConst15 = (0.005208333333333333f * faustpower<3>(fConst14));
		fConst16 = (1.0f / fConst0);
		fTempPerm1 = 0;
		fTempPerm2 = 0;
		fTempPerm3 = 0;
		fTempPerm4 = 0;
		fTempPerm5 = 0;
		fTempPerm6 = 0;
		fTempPerm7 = 0;
		fTempPerm8 = 0;
		fConst17 = (0.041666666666666664f * faustpower<2>(fConst14));
		fTempPerm9 = 0;
		fTempPerm10 = 0;
		fConst18 = (0.25f * fConst14);
		fTempPerm11 = 0;
		fTempPerm12 = 0;
		fTempPerm13 = 0;
		fTempPerm14 = 0;
		fTempPerm15 = 0;
		fTempPerm16 = 0;
		fTempPerm17 = 0;
		fTempPerm18 = 0;
		fTempPerm19 = 0;
		fTempPerm20 = 0;
		fTempPerm21 = 0;
		fTempPerm22 = 0;
		fTempPerm23 = 0;
		fTempPerm24 = 0;
		fTempPerm25 = 0;
		fTempPerm26 = 0;
		fTempPerm27 = 0;
		fTempPerm28 = 0;
		fTempPerm29 = 0;
		fTempPerm30 = 0;
		fTempPerm31 = 0;
		fConst19 = (6.2831853071795862f / fConst0);
		iTempPerm32 = 0;
		fTempPerm33 = 0;
		fTempPerm34 = 0;
		fTempPerm35 = 0;
		fTempPerm36 = 0;
		iTempPerm37 = 0;
		fTempPerm38 = 0;
		fTempPerm39 = 0;
		fTempPerm40 = 0;
		fTempPerm41 = 0;
		fTempPerm42 = 0;
		fTempPerm43 = 0;
		fTempPerm44 = 0;
		fTempPerm45 = 0;
		fTempPerm46 = 0;
		fTempPerm47 = 0;
		fTempPerm48 = 0;
		fTempPerm49 = 0;
		iTempPerm50 = 0;
		fTempPerm51 = 0;
		fTempPerm52 = 0;
		fTempPerm53 = 0;
		fTempPerm54 = 0;
		fTempPerm55 = 0;
		fTempPerm56 = 0;
		fTempPerm57 = 0;
		fTempPerm58 = 0;
		fTempPerm59 = 0;
		fTempPerm60 = 0;
		fConst20 = (((fConst3 + -3.1897274020965583f) / fConst2) + 4.0767819696438066f);
		fConst21 = (1.0f / fConst5);
		fConst22 = (2 * (4.0767819696438066f - fConst21));
		fConst23 = (fConst12 + 0.00040767818495825777f);
		fConst24 = (((fConst3 + -0.74313046010703965f) / fConst2) + 1.450071084655647f);
		fConst25 = (2 * (1.450071084655647f - fConst21));
		fConst26 = (fConst9 + 1.450071084655647f);
		fConst27 = (((fConst3 + -0.157482159302087f) / fConst2) + 0.93514016703154246f);
		fConst28 = (2 * (0.93514016703154246f - fConst21));
		fConst29 = (fConst6 + 0.93514016703154246f);
		fConst30 = tanf((31665.269715622984f / fConst0));
		fConst31 = (1.0f / fConst30);
		fConst32 = (1.0f / (((fConst31 + 0.157482159302087f) / fConst30) + 0.93514016703154246f));
		fConst33 = faustpower<2>(fConst30);
		fConst34 = (50.063807016150385f / fConst33);
		fConst35 = (2 * (0.93514016703154246f - fConst34));
		fConst36 = (1.0f / (((fConst31 + 0.74313046010703965f) / fConst30) + 1.450071084655647f));
		fConst37 = (11.052052171507189f / fConst33);
		fConst38 = (2 * (1.450071084655647f - fConst37));
		fConst39 = (1.0f / (((fConst31 + 3.1897274020965583f) / fConst30) + 4.0767819696438066f));
		fConst40 = (0.0017661728399818856f / fConst33);
		fConst41 = (2 * (0.00040767818495825777f - fConst40));
		fConst42 = (1.0f / (((fConst3 + 0.16840487111358901f) / fConst2) + 1.0693584077073119f));
		fConst43 = (2 * (53.536152954556727f - fConst21));
		fConst44 = (1.0f / (((fConst3 + 0.51247864188914105f) / fConst2) + 0.68962136448467504f));
		fConst45 = (2 * (7.6217312988706034f - fConst21));
		fConst46 = (1.0f / (((fConst3 + 0.78241304682164503f) / fConst2) + 0.24529150870616001f));
		fConst47 = (9.9999997054999994e-05f / fConst5);
		fConst48 = (2 * (0.00043322720055500002f - fConst47));
		fConst49 = (((fConst3 + -0.78241304682164503f) / fConst2) + 0.24529150870616001f);
		fConst50 = (2 * (0.24529150870616001f - fConst21));
		fConst51 = (fConst47 + 0.00043322720055500002f);
		fConst52 = (((fConst3 + -0.51247864188914105f) / fConst2) + 0.68962136448467504f);
		fConst53 = (2 * (0.68962136448467504f - fConst21));
		fConst54 = (fConst21 + 7.6217312988706034f);
		fConst55 = (((fConst3 + -0.16840487111358901f) / fConst2) + 1.0693584077073119f);
		fConst56 = (2 * (1.0693584077073119f - fConst21));
		fConst57 = (fConst21 + 53.536152954556727f);
		fTempPerm61 = 0;
		fConst58 = (((fConst31 + -3.1897274020965583f) / fConst30) + 4.0767819696438066f);
		fConst59 = (1.0f / fConst33);
		fConst60 = (2 * (4.0767819696438066f - fConst59));
		fConst61 = (fConst40 + 0.00040767818495825777f);
		fConst62 = (((fConst31 + -0.74313046010703965f) / fConst30) + 1.450071084655647f);
		fConst63 = (2 * (1.450071084655647f - fConst59));
		fConst64 = (fConst37 + 1.450071084655647f);
		fConst65 = (((fConst31 + -0.157482159302087f) / fConst30) + 0.93514016703154246f);
		fConst66 = (2 * (0.93514016703154246f - fConst59));
		fConst67 = (fConst34 + 0.93514016703154246f);
		fConst68 = tanf((19947.869932656024f / fConst0));
		fConst69 = (1.0f / fConst68);
		fConst70 = (1.0f / (((fConst69 + 0.157482159302087f) / fConst68) + 0.93514016703154246f));
		fConst71 = faustpower<2>(fConst68);
		fConst72 = (50.063807016150385f / fConst71);
		fConst73 = (2 * (0.93514016703154246f - fConst72));
		fConst74 = (1.0f / (((fConst69 + 0.74313046010703965f) / fConst68) + 1.450071084655647f));
		fConst75 = (11.052052171507189f / fConst71);
		fConst76 = (2 * (1.450071084655647f - fConst75));
		fConst77 = (1.0f / (((fConst69 + 3.1897274020965583f) / fConst68) + 4.0767819696438066f));
		fConst78 = (0.0017661728399818856f / fConst71);
		fConst79 = (2 * (0.00040767818495825777f - fConst78));
		fConst80 = (1.0f / (((fConst31 + 0.16840487111358901f) / fConst30) + 1.0693584077073119f));
		fConst81 = (2 * (53.536152954556727f - fConst59));
		fConst82 = (1.0f / (((fConst31 + 0.51247864188914105f) / fConst30) + 0.68962136448467504f));
		fConst83 = (2 * (7.6217312988706034f - fConst59));
		fConst84 = (1.0f / (((fConst31 + 0.78241304682164503f) / fConst30) + 0.24529150870616001f));
		fConst85 = (9.9999997054999994e-05f / fConst33);
		fConst86 = (2 * (0.00043322720055500002f - fConst85));
		fConst87 = (((fConst31 + -0.78241304682164503f) / fConst30) + 0.24529150870616001f);
		fConst88 = (2 * (0.24529150870616001f - fConst59));
		fConst89 = (fConst85 + 0.00043322720055500002f);
		fConst90 = (((fConst31 + -0.51247864188914105f) / fConst30) + 0.68962136448467504f);
		fConst91 = (2 * (0.68962136448467504f - fConst59));
		fConst92 = (fConst59 + 7.6217312988706034f);
		fConst93 = (((fConst31 + -0.16840487111358901f) / fConst30) + 1.0693584077073119f);
		fConst94 = (2 * (1.0693584077073119f - fConst59));
		fConst95 = (fConst59 + 53.536152954556727f);
		fTempPerm62 = 0;
		fConst96 = (((fConst69 + -3.1897274020965583f) / fConst68) + 4.0767819696438066f);
		fConst97 = (1.0f / fConst71);
		fConst98 = (2 * (4.0767819696438066f - fConst97));
		fConst99 = (fConst78 + 0.00040767818495825777f);
		fConst100 = (((fConst69 + -0.74313046010703965f) / fConst68) + 1.450071084655647f);
		fConst101 = (2 * (1.450071084655647f - fConst97));
		fConst102 = (fConst75 + 1.450071084655647f);
		fConst103 = (((fConst69 + -0.157482159302087f) / fConst68) + 0.93514016703154246f);
		fConst104 = (2 * (0.93514016703154246f - fConst97));
		fConst105 = (fConst72 + 0.93514016703154246f);
		fConst106 = tanf((12566.370614359172f / fConst0));
		fConst107 = (1.0f / fConst106);
		fConst108 = (1.0f / (((fConst107 + 0.157482159302087f) / fConst106) + 0.93514016703154246f));
		fConst109 = faustpower<2>(fConst106);
		fConst110 = (50.063807016150385f / fConst109);
		fConst111 = (2 * (0.93514016703154246f - fConst110));
		fConst112 = (1.0f / (((fConst107 + 0.74313046010703965f) / fConst106) + 1.450071084655647f));
		fConst113 = (11.052052171507189f / fConst109);
		fConst114 = (2 * (1.450071084655647f - fConst113));
		fConst115 = (1.0f / (((fConst107 + 3.1897274020965583f) / fConst106) + 4.0767819696438066f));
		fConst116 = (0.0017661728399818856f / fConst109);
		fConst117 = (2 * (0.00040767818495825777f - fConst116));
		fConst118 = (1.0f / (((fConst69 + 0.16840487111358901f) / fConst68) + 1.0693584077073119f));
		fConst119 = (2 * (53.536152954556727f - fConst97));
		fConst120 = (1.0f / (((fConst69 + 0.51247864188914105f) / fConst68) + 0.68962136448467504f));
		fConst121 = (2 * (7.6217312988706034f - fConst97));
		fConst122 = (1.0f / (((fConst69 + 0.78241304682164503f) / fConst68) + 0.24529150870616001f));
		fConst123 = (9.9999997054999994e-05f / fConst71);
		fConst124 = (2 * (0.00043322720055500002f - fConst123));
		fConst125 = (((fConst69 + -0.78241304682164503f) / fConst68) + 0.24529150870616001f);
		fConst126 = (2 * (0.24529150870616001f - fConst97));
		fConst127 = (fConst123 + 0.00043322720055500002f);
		fConst128 = (((fConst69 + -0.51247864188914105f) / fConst68) + 0.68962136448467504f);
		fConst129 = (2 * (0.68962136448467504f - fConst97));
		fConst130 = (fConst97 + 7.6217312988706034f);
		fConst131 = (((fConst69 + -0.16840487111358901f) / fConst68) + 1.0693584077073119f);
		fConst132 = (2 * (1.0693584077073119f - fConst97));
		fConst133 = (fConst97 + 53.536152954556727f);
		fTempPerm63 = 0;
		fConst134 = (((fConst107 + -3.1897274020965583f) / fConst106) + 4.0767819696438066f);
		fConst135 = (1.0f / fConst109);
		fConst136 = (2 * (4.0767819696438066f - fConst135));
		fConst137 = (fConst116 + 0.00040767818495825777f);
		fConst138 = (((fConst107 + -0.74313046010703965f) / fConst106) + 1.450071084655647f);
		fConst139 = (2 * (1.450071084655647f - fConst135));
		fConst140 = (fConst113 + 1.450071084655647f);
		fConst141 = (((fConst107 + -0.157482159302087f) / fConst106) + 0.93514016703154246f);
		fConst142 = (2 * (0.93514016703154246f - fConst135));
		fConst143 = (fConst110 + 0.93514016703154246f);
		fConst144 = tanf((7916.3174289057461f / fConst0));
		fConst145 = (1.0f / fConst144);
		fConst146 = (1.0f / (((fConst145 + 0.157482159302087f) / fConst144) + 0.93514016703154246f));
		fConst147 = faustpower<2>(fConst144);
		fConst148 = (50.063807016150385f / fConst147);
		fConst149 = (2 * (0.93514016703154246f - fConst148));
		fConst150 = (1.0f / (((fConst145 + 0.74313046010703965f) / fConst144) + 1.450071084655647f));
		fConst151 = (11.052052171507189f / fConst147);
		fConst152 = (2 * (1.450071084655647f - fConst151));
		fConst153 = (1.0f / (((fConst145 + 3.1897274020965583f) / fConst144) + 4.0767819696438066f));
		fConst154 = (0.0017661728399818856f / fConst147);
		fConst155 = (2 * (0.00040767818495825777f - fConst154));
		fConst156 = (1.0f / (((fConst107 + 0.16840487111358901f) / fConst106) + 1.0693584077073119f));
		fConst157 = (2 * (53.536152954556727f - fConst135));
		fConst158 = (1.0f / (((fConst107 + 0.51247864188914105f) / fConst106) + 0.68962136448467504f));
		fConst159 = (2 * (7.6217312988706034f - fConst135));
		fConst160 = (1.0f / (((fConst107 + 0.78241304682164503f) / fConst106) + 0.24529150870616001f));
		fConst161 = (9.9999997054999994e-05f / fConst109);
		fConst162 = (2 * (0.00043322720055500002f - fConst161));
		fConst163 = (((fConst107 + -0.78241304682164503f) / fConst106) + 0.24529150870616001f);
		fConst164 = (2 * (0.24529150870616001f - fConst135));
		fConst165 = (fConst161 + 0.00043322720055500002f);
		fConst166 = (((fConst107 + -0.51247864188914105f) / fConst106) + 0.68962136448467504f);
		fConst167 = (2 * (0.68962136448467504f - fConst135));
		fConst168 = (fConst135 + 7.6217312988706034f);
		fConst169 = (((fConst107 + -0.16840487111358901f) / fConst106) + 1.0693584077073119f);
		fConst170 = (2 * (1.0693584077073119f - fConst135));
		fConst171 = (fConst135 + 53.536152954556727f);
		fTempPerm64 = 0;
		fConst172 = (((fConst145 + -3.1897274020965583f) / fConst144) + 4.0767819696438066f);
		fConst173 = (1.0f / fConst147);
		fConst174 = (2 * (4.0767819696438066f - fConst173));
		fConst175 = (fConst154 + 0.00040767818495825777f);
		fConst176 = (((fConst145 + -0.74313046010703965f) / fConst144) + 1.450071084655647f);
		fConst177 = (2 * (1.450071084655647f - fConst173));
		fConst178 = (fConst151 + 1.450071084655647f);
		fConst179 = (((fConst145 + -0.157482159302087f) / fConst144) + 0.93514016703154246f);
		fConst180 = (2 * (0.93514016703154246f - fConst173));
		fConst181 = (fConst148 + 0.93514016703154246f);
		fConst182 = tanf((4986.967483164005f / fConst0));
		fConst183 = (1.0f / fConst182);
		fConst184 = (1.0f / (((fConst183 + 0.157482159302087f) / fConst182) + 0.93514016703154246f));
		fConst185 = faustpower<2>(fConst182);
		fConst186 = (50.063807016150385f / fConst185);
		fConst187 = (2 * (0.93514016703154246f - fConst186));
		fConst188 = (1.0f / (((fConst183 + 0.74313046010703965f) / fConst182) + 1.450071084655647f));
		fConst189 = (11.052052171507189f / fConst185);
		fConst190 = (2 * (1.450071084655647f - fConst189));
		fConst191 = (1.0f / (((fConst183 + 3.1897274020965583f) / fConst182) + 4.0767819696438066f));
		fConst192 = (0.0017661728399818856f / fConst185);
		fConst193 = (2 * (0.00040767818495825777f - fConst192));
		fConst194 = (1.0f / (((fConst145 + 0.16840487111358901f) / fConst144) + 1.0693584077073119f));
		fConst195 = (2 * (53.536152954556727f - fConst173));
		fConst196 = (1.0f / (((fConst145 + 0.51247864188914105f) / fConst144) + 0.68962136448467504f));
		fConst197 = (2 * (7.6217312988706034f - fConst173));
		fConst198 = (1.0f / (((fConst145 + 0.78241304682164503f) / fConst144) + 0.24529150870616001f));
		fConst199 = (9.9999997054999994e-05f / fConst147);
		fConst200 = (2 * (0.00043322720055500002f - fConst199));
		fConst201 = (((fConst145 + -0.78241304682164503f) / fConst144) + 0.24529150870616001f);
		fConst202 = (2 * (0.24529150870616001f - fConst173));
		fConst203 = (fConst199 + 0.00043322720055500002f);
		fConst204 = (((fConst145 + -0.51247864188914105f) / fConst144) + 0.68962136448467504f);
		fConst205 = (2 * (0.68962136448467504f - fConst173));
		fConst206 = (fConst173 + 7.6217312988706034f);
		fConst207 = (((fConst145 + -0.16840487111358901f) / fConst144) + 1.0693584077073119f);
		fConst208 = (2 * (1.0693584077073119f - fConst173));
		fConst209 = (fConst173 + 53.536152954556727f);
		fTempPerm65 = 0;
		fConst210 = (((fConst183 + -3.1897274020965583f) / fConst182) + 4.0767819696438066f);
		fConst211 = (1.0f / fConst185);
		fConst212 = (2 * (4.0767819696438066f - fConst211));
		fConst213 = (fConst192 + 0.00040767818495825777f);
		fConst214 = (((fConst183 + -0.74313046010703965f) / fConst182) + 1.450071084655647f);
		fConst215 = (2 * (1.450071084655647f - fConst211));
		fConst216 = (fConst189 + 1.450071084655647f);
		fConst217 = (((fConst183 + -0.157482159302087f) / fConst182) + 0.93514016703154246f);
		fConst218 = (2 * (0.93514016703154246f - fConst211));
		fConst219 = (fConst186 + 0.93514016703154246f);
		fConst220 = tanf((3141.5926535897929f / fConst0));
		fConst221 = (1.0f / fConst220);
		fConst222 = (1.0f / (((fConst221 + 0.157482159302087f) / fConst220) + 0.93514016703154246f));
		fConst223 = faustpower<2>(fConst220);
		fConst224 = (50.063807016150385f / fConst223);
		fConst225 = (2 * (0.93514016703154246f - fConst224));
		fConst226 = (1.0f / (((fConst221 + 0.74313046010703965f) / fConst220) + 1.450071084655647f));
		fConst227 = (11.052052171507189f / fConst223);
		fConst228 = (2 * (1.450071084655647f - fConst227));
		fConst229 = (1.0f / (((fConst221 + 3.1897274020965583f) / fConst220) + 4.0767819696438066f));
		fConst230 = (0.0017661728399818856f / fConst223);
		fConst231 = (2 * (0.00040767818495825777f - fConst230));
		fConst232 = (1.0f / (((fConst183 + 0.16840487111358901f) / fConst182) + 1.0693584077073119f));
		fConst233 = (2 * (53.536152954556727f - fConst211));
		fConst234 = (1.0f / (((fConst183 + 0.51247864188914105f) / fConst182) + 0.68962136448467504f));
		fConst235 = (2 * (7.6217312988706034f - fConst211));
		fConst236 = (1.0f / (((fConst183 + 0.78241304682164503f) / fConst182) + 0.24529150870616001f));
		fConst237 = (9.9999997054999994e-05f / fConst185);
		fConst238 = (2 * (0.00043322720055500002f - fConst237));
		fConst239 = (((fConst183 + -0.78241304682164503f) / fConst182) + 0.24529150870616001f);
		fConst240 = (2 * (0.24529150870616001f - fConst211));
		fConst241 = (fConst237 + 0.00043322720055500002f);
		fConst242 = (((fConst183 + -0.51247864188914105f) / fConst182) + 0.68962136448467504f);
		fConst243 = (2 * (0.68962136448467504f - fConst211));
		fConst244 = (fConst211 + 7.6217312988706034f);
		fConst245 = (((fConst183 + -0.16840487111358901f) / fConst182) + 1.0693584077073119f);
		fConst246 = (2 * (1.0693584077073119f - fConst211));
		fConst247 = (fConst211 + 53.536152954556727f);
		fTempPerm66 = 0;
		fConst248 = (((fConst221 + -3.1897274020965583f) / fConst220) + 4.0767819696438066f);
		fConst249 = (1.0f / fConst223);
		fConst250 = (2 * (4.0767819696438066f - fConst249));
		fConst251 = (fConst230 + 0.00040767818495825777f);
		fConst252 = (((fConst221 + -0.74313046010703965f) / fConst220) + 1.450071084655647f);
		fConst253 = (2 * (1.450071084655647f - fConst249));
		fConst254 = (fConst227 + 1.450071084655647f);
		fConst255 = (((fConst221 + -0.157482159302087f) / fConst220) + 0.93514016703154246f);
		fConst256 = (2 * (0.93514016703154246f - fConst249));
		fConst257 = (fConst224 + 0.93514016703154246f);
		fConst258 = tanf((1979.0793572264361f / fConst0));
		fConst259 = (1.0f / fConst258);
		fConst260 = (1.0f / (((fConst259 + 0.157482159302087f) / fConst258) + 0.93514016703154246f));
		fConst261 = faustpower<2>(fConst258);
		fConst262 = (50.063807016150385f / fConst261);
		fConst263 = (2 * (0.93514016703154246f - fConst262));
		fConst264 = (1.0f / (((fConst259 + 0.74313046010703965f) / fConst258) + 1.450071084655647f));
		fConst265 = (11.052052171507189f / fConst261);
		fConst266 = (2 * (1.450071084655647f - fConst265));
		fConst267 = (1.0f / (((fConst259 + 3.1897274020965583f) / fConst258) + 4.0767819696438066f));
		fConst268 = (0.0017661728399818856f / fConst261);
		fConst269 = (2 * (0.00040767818495825777f - fConst268));
		fConst270 = (1.0f / (((fConst221 + 0.16840487111358901f) / fConst220) + 1.0693584077073119f));
		fConst271 = (2 * (53.536152954556727f - fConst249));
		fConst272 = (1.0f / (((fConst221 + 0.51247864188914105f) / fConst220) + 0.68962136448467504f));
		fConst273 = (2 * (7.6217312988706034f - fConst249));
		fConst274 = (1.0f / (((fConst221 + 0.78241304682164503f) / fConst220) + 0.24529150870616001f));
		fConst275 = (9.9999997054999994e-05f / fConst223);
		fConst276 = (2 * (0.00043322720055500002f - fConst275));
		fConst277 = (((fConst221 + -0.78241304682164503f) / fConst220) + 0.24529150870616001f);
		fConst278 = (2 * (0.24529150870616001f - fConst249));
		fConst279 = (fConst275 + 0.00043322720055500002f);
		fConst280 = (((fConst221 + -0.51247864188914105f) / fConst220) + 0.68962136448467504f);
		fConst281 = (2 * (0.68962136448467504f - fConst249));
		fConst282 = (fConst249 + 7.6217312988706034f);
		fConst283 = (((fConst221 + -0.16840487111358901f) / fConst220) + 1.0693584077073119f);
		fConst284 = (2 * (1.0693584077073119f - fConst249));
		fConst285 = (fConst249 + 53.536152954556727f);
		fTempPerm67 = 0;
		fConst286 = (((fConst259 + -3.1897274020965583f) / fConst258) + 4.0767819696438066f);
		fConst287 = (1.0f / fConst261);
		fConst288 = (2 * (4.0767819696438066f - fConst287));
		fConst289 = (fConst268 + 0.00040767818495825777f);
		fConst290 = (((fConst259 + -0.74313046010703965f) / fConst258) + 1.450071084655647f);
		fConst291 = (2 * (1.450071084655647f - fConst287));
		fConst292 = (fConst265 + 1.450071084655647f);
		fConst293 = (((fConst259 + -0.157482159302087f) / fConst258) + 0.93514016703154246f);
		fConst294 = (2 * (0.93514016703154246f - fConst287));
		fConst295 = (fConst262 + 0.93514016703154246f);
		fConst296 = tanf((1246.7418707910015f / fConst0));
		fConst297 = (1.0f / fConst296);
		fConst298 = (1.0f / (((fConst297 + 0.157482159302087f) / fConst296) + 0.93514016703154246f));
		fConst299 = faustpower<2>(fConst296);
		fConst300 = (50.063807016150385f / fConst299);
		fConst301 = (2 * (0.93514016703154246f - fConst300));
		fConst302 = (1.0f / (((fConst297 + 0.74313046010703965f) / fConst296) + 1.450071084655647f));
		fConst303 = (11.052052171507189f / fConst299);
		fConst304 = (2 * (1.450071084655647f - fConst303));
		fConst305 = (1.0f / (((fConst297 + 3.1897274020965583f) / fConst296) + 4.0767819696438066f));
		fConst306 = (0.0017661728399818856f / fConst299);
		fConst307 = (2 * (0.00040767818495825777f - fConst306));
		fConst308 = (1.0f / (((fConst259 + 0.16840487111358901f) / fConst258) + 1.0693584077073119f));
		fConst309 = (2 * (53.536152954556727f - fConst287));
		fConst310 = (1.0f / (((fConst259 + 0.51247864188914105f) / fConst258) + 0.68962136448467504f));
		fConst311 = (2 * (7.6217312988706034f - fConst287));
		fConst312 = (1.0f / (((fConst259 + 0.78241304682164503f) / fConst258) + 0.24529150870616001f));
		fConst313 = (9.9999997054999994e-05f / fConst261);
		fConst314 = (2 * (0.00043322720055500002f - fConst313));
		fConst315 = (((fConst259 + -0.78241304682164503f) / fConst258) + 0.24529150870616001f);
		fConst316 = (2 * (0.24529150870616001f - fConst287));
		fConst317 = (fConst313 + 0.00043322720055500002f);
		fConst318 = (((fConst259 + -0.51247864188914105f) / fConst258) + 0.68962136448467504f);
		fConst319 = (2 * (0.68962136448467504f - fConst287));
		fConst320 = (fConst287 + 7.6217312988706034f);
		fConst321 = (((fConst259 + -0.16840487111358901f) / fConst258) + 1.0693584077073119f);
		fConst322 = (2 * (1.0693584077073119f - fConst287));
		fConst323 = (fConst287 + 53.536152954556727f);
		fTempPerm68 = 0;
		fConst324 = (((fConst297 + -3.1897274020965583f) / fConst296) + 4.0767819696438066f);
		fConst325 = (1.0f / fConst299);
		fConst326 = (2 * (4.0767819696438066f - fConst325));
		fConst327 = (fConst306 + 0.00040767818495825777f);
		fConst328 = (((fConst297 + -0.74313046010703965f) / fConst296) + 1.450071084655647f);
		fConst329 = (2 * (1.450071084655647f - fConst325));
		fConst330 = (fConst303 + 1.450071084655647f);
		fConst331 = (((fConst297 + -0.157482159302087f) / fConst296) + 0.93514016703154246f);
		fConst332 = (2 * (0.93514016703154246f - fConst325));
		fConst333 = (fConst300 + 0.93514016703154246f);
		fConst334 = tanf((785.39816339744823f / fConst0));
		fConst335 = (1.0f / fConst334);
		fConst336 = (1.0f / (((fConst335 + 0.157482159302087f) / fConst334) + 0.93514016703154246f));
		fConst337 = faustpower<2>(fConst334);
		fConst338 = (50.063807016150385f / fConst337);
		fConst339 = (2 * (0.93514016703154246f - fConst338));
		fConst340 = (1.0f / (((fConst335 + 0.74313046010703965f) / fConst334) + 1.450071084655647f));
		fConst341 = (11.052052171507189f / fConst337);
		fConst342 = (2 * (1.450071084655647f - fConst341));
		fConst343 = (1.0f / (((fConst335 + 3.1897274020965583f) / fConst334) + 4.0767819696438066f));
		fConst344 = (0.0017661728399818856f / fConst337);
		fConst345 = (2 * (0.00040767818495825777f - fConst344));
		fConst346 = (1.0f / (((fConst297 + 0.16840487111358901f) / fConst296) + 1.0693584077073119f));
		fConst347 = (2 * (53.536152954556727f - fConst325));
		fConst348 = (1.0f / (((fConst297 + 0.51247864188914105f) / fConst296) + 0.68962136448467504f));
		fConst349 = (2 * (7.6217312988706034f - fConst325));
		fConst350 = (1.0f / (((fConst297 + 0.78241304682164503f) / fConst296) + 0.24529150870616001f));
		fConst351 = (9.9999997054999994e-05f / fConst299);
		fConst352 = (2 * (0.00043322720055500002f - fConst351));
		fConst353 = (((fConst297 + -0.78241304682164503f) / fConst296) + 0.24529150870616001f);
		fConst354 = (2 * (0.24529150870616001f - fConst325));
		fConst355 = (fConst351 + 0.00043322720055500002f);
		fConst356 = (((fConst297 + -0.51247864188914105f) / fConst296) + 0.68962136448467504f);
		fConst357 = (2 * (0.68962136448467504f - fConst325));
		fConst358 = (fConst325 + 7.6217312988706034f);
		fConst359 = (((fConst297 + -0.16840487111358901f) / fConst296) + 1.0693584077073119f);
		fConst360 = (2 * (1.0693584077073119f - fConst325));
		fConst361 = (fConst325 + 53.536152954556727f);
		fTempPerm69 = 0;
		fConst362 = (((fConst335 + -3.1897274020965583f) / fConst334) + 4.0767819696438066f);
		fConst363 = (1.0f / fConst337);
		fConst364 = (2 * (4.0767819696438066f - fConst363));
		fConst365 = (fConst344 + 0.00040767818495825777f);
		fConst366 = (((fConst335 + -0.74313046010703965f) / fConst334) + 1.450071084655647f);
		fConst367 = (2 * (1.450071084655647f - fConst363));
		fConst368 = (fConst341 + 1.450071084655647f);
		fConst369 = (((fConst335 + -0.157482159302087f) / fConst334) + 0.93514016703154246f);
		fConst370 = (2 * (0.93514016703154246f - fConst363));
		fConst371 = (fConst338 + 0.93514016703154246f);
		fConst372 = tanf((494.76983930660901f / fConst0));
		fConst373 = (1.0f / fConst372);
		fConst374 = (1.0f / (((fConst373 + 0.157482159302087f) / fConst372) + 0.93514016703154246f));
		fConst375 = faustpower<2>(fConst372);
		fConst376 = (50.063807016150385f / fConst375);
		fConst377 = (2 * (0.93514016703154246f - fConst376));
		fConst378 = (1.0f / (((fConst373 + 0.74313046010703965f) / fConst372) + 1.450071084655647f));
		fConst379 = (11.052052171507189f / fConst375);
		fConst380 = (2 * (1.450071084655647f - fConst379));
		fConst381 = (1.0f / (((fConst373 + 3.1897274020965583f) / fConst372) + 4.0767819696438066f));
		fConst382 = (0.0017661728399818856f / fConst375);
		fConst383 = (2 * (0.00040767818495825777f - fConst382));
		fConst384 = (1.0f / (((fConst335 + 0.16840487111358901f) / fConst334) + 1.0693584077073119f));
		fConst385 = (2 * (53.536152954556727f - fConst363));
		fConst386 = (1.0f / (((fConst335 + 0.51247864188914105f) / fConst334) + 0.68962136448467504f));
		fConst387 = (2 * (7.6217312988706034f - fConst363));
		fConst388 = (1.0f / (((fConst335 + 0.78241304682164503f) / fConst334) + 0.24529150870616001f));
		fConst389 = (9.9999997054999994e-05f / fConst337);
		fConst390 = (2 * (0.00043322720055500002f - fConst389));
		fConst391 = (((fConst335 + -0.78241304682164503f) / fConst334) + 0.24529150870616001f);
		fConst392 = (2 * (0.24529150870616001f - fConst363));
		fConst393 = (fConst389 + 0.00043322720055500002f);
		fConst394 = (((fConst335 + -0.51247864188914105f) / fConst334) + 0.68962136448467504f);
		fConst395 = (2 * (0.68962136448467504f - fConst363));
		fConst396 = (fConst363 + 7.6217312988706034f);
		fConst397 = (((fConst335 + -0.16840487111358901f) / fConst334) + 1.0693584077073119f);
		fConst398 = (2 * (1.0693584077073119f - fConst363));
		fConst399 = (fConst363 + 53.536152954556727f);
		fTempPerm70 = 0;
		fConst400 = (((fConst373 + -3.1897274020965583f) / fConst372) + 4.0767819696438066f);
		fConst401 = (1.0f / fConst375);
		fConst402 = (2 * (4.0767819696438066f - fConst401));
		fConst403 = (fConst382 + 0.00040767818495825777f);
		fConst404 = (((fConst373 + -0.74313046010703965f) / fConst372) + 1.450071084655647f);
		fConst405 = (2 * (1.450071084655647f - fConst401));
		fConst406 = (fConst379 + 1.450071084655647f);
		fConst407 = (((fConst373 + -0.157482159302087f) / fConst372) + 0.93514016703154246f);
		fConst408 = (2 * (0.93514016703154246f - fConst401));
		fConst409 = (fConst376 + 0.93514016703154246f);
		fConst410 = tanf((311.68546769775037f / fConst0));
		fConst411 = (1.0f / fConst410);
		fConst412 = (1.0f / (((fConst411 + 0.157482159302087f) / fConst410) + 0.93514016703154246f));
		fConst413 = faustpower<2>(fConst410);
		fConst414 = (50.063807016150385f / fConst413);
		fConst415 = (2 * (0.93514016703154246f - fConst414));
		fConst416 = (1.0f / (((fConst411 + 0.74313046010703965f) / fConst410) + 1.450071084655647f));
		fConst417 = (11.052052171507189f / fConst413);
		fConst418 = (2 * (1.450071084655647f - fConst417));
		fConst419 = (1.0f / (((fConst411 + 3.1897274020965583f) / fConst410) + 4.0767819696438066f));
		fConst420 = (0.0017661728399818856f / fConst413);
		fConst421 = (2 * (0.00040767818495825777f - fConst420));
		fConst422 = (1.0f / (((fConst373 + 0.16840487111358901f) / fConst372) + 1.0693584077073119f));
		fConst423 = (2 * (53.536152954556727f - fConst401));
		fConst424 = (1.0f / (((fConst373 + 0.51247864188914105f) / fConst372) + 0.68962136448467504f));
		fConst425 = (2 * (7.6217312988706034f - fConst401));
		fConst426 = (1.0f / (((fConst373 + 0.78241304682164503f) / fConst372) + 0.24529150870616001f));
		fConst427 = (9.9999997054999994e-05f / fConst375);
		fConst428 = (2 * (0.00043322720055500002f - fConst427));
		fConst429 = (((fConst373 + -0.78241304682164503f) / fConst372) + 0.24529150870616001f);
		fConst430 = (2 * (0.24529150870616001f - fConst401));
		fConst431 = (fConst427 + 0.00043322720055500002f);
		fConst432 = (((fConst373 + -0.51247864188914105f) / fConst372) + 0.68962136448467504f);
		fConst433 = (2 * (0.68962136448467504f - fConst401));
		fConst434 = (fConst401 + 7.6217312988706034f);
		fConst435 = (((fConst373 + -0.16840487111358901f) / fConst372) + 1.0693584077073119f);
		fConst436 = (2 * (1.0693584077073119f - fConst401));
		fConst437 = (fConst401 + 53.536152954556727f);
		fTempPerm71 = 0;
		fConst438 = (((fConst411 + -3.1897274020965583f) / fConst410) + 4.0767819696438066f);
		fConst439 = (1.0f / fConst413);
		fConst440 = (2 * (4.0767819696438066f - fConst439));
		fConst441 = (fConst420 + 0.00040767818495825777f);
		fConst442 = (((fConst411 + -0.74313046010703965f) / fConst410) + 1.450071084655647f);
		fConst443 = (2 * (1.450071084655647f - fConst439));
		fConst444 = (fConst417 + 1.450071084655647f);
		fConst445 = (((fConst411 + -0.157482159302087f) / fConst410) + 0.93514016703154246f);
		fConst446 = (2 * (0.93514016703154246f - fConst439));
		fConst447 = (fConst414 + 0.93514016703154246f);
		fConst448 = tanf((196.34954084936206f / fConst0));
		fConst449 = (1.0f / fConst448);
		fConst450 = (1.0f / (((fConst449 + 0.157482159302087f) / fConst448) + 0.93514016703154246f));
		fConst451 = faustpower<2>(fConst448);
		fConst452 = (50.063807016150385f / fConst451);
		fConst453 = (2 * (0.93514016703154246f - fConst452));
		fConst454 = (1.0f / (((fConst449 + 0.74313046010703965f) / fConst448) + 1.450071084655647f));
		fConst455 = (11.052052171507189f / fConst451);
		fConst456 = (2 * (1.450071084655647f - fConst455));
		fConst457 = (1.0f / (((fConst449 + 3.1897274020965583f) / fConst448) + 4.0767819696438066f));
		fConst458 = (0.0017661728399818856f / fConst451);
		fConst459 = (2 * (0.00040767818495825777f - fConst458));
		fConst460 = (1.0f / (((fConst411 + 0.16840487111358901f) / fConst410) + 1.0693584077073119f));
		fConst461 = (2 * (53.536152954556727f - fConst439));
		fConst462 = (1.0f / (((fConst411 + 0.51247864188914105f) / fConst410) + 0.68962136448467504f));
		fConst463 = (2 * (7.6217312988706034f - fConst439));
		fConst464 = (1.0f / (((fConst411 + 0.78241304682164503f) / fConst410) + 0.24529150870616001f));
		fConst465 = (9.9999997054999994e-05f / fConst413);
		fConst466 = (2 * (0.00043322720055500002f - fConst465));
		fConst467 = (((fConst411 + -0.78241304682164503f) / fConst410) + 0.24529150870616001f);
		fConst468 = (2 * (0.24529150870616001f - fConst439));
		fConst469 = (fConst465 + 0.00043322720055500002f);
		fConst470 = (((fConst411 + -0.51247864188914105f) / fConst410) + 0.68962136448467504f);
		fConst471 = (2 * (0.68962136448467504f - fConst439));
		fConst472 = (fConst439 + 7.6217312988706034f);
		fConst473 = (((fConst411 + -0.16840487111358901f) / fConst410) + 1.0693584077073119f);
		fConst474 = (2 * (1.0693584077073119f - fConst439));
		fConst475 = (fConst439 + 53.536152954556727f);
		fTempPerm72 = 0;
		fConst476 = (((fConst449 + -3.1897274020965583f) / fConst448) + 4.0767819696438066f);
		fConst477 = (1.0f / fConst451);
		fConst478 = (2 * (4.0767819696438066f - fConst477));
		fConst479 = (fConst458 + 0.00040767818495825777f);
		fConst480 = (((fConst449 + -0.74313046010703965f) / fConst448) + 1.450071084655647f);
		fConst481 = (2 * (1.450071084655647f - fConst477));
		fConst482 = (fConst455 + 1.450071084655647f);
		fConst483 = (((fConst449 + -0.157482159302087f) / fConst448) + 0.93514016703154246f);
		fConst484 = (2 * (0.93514016703154246f - fConst477));
		fConst485 = (fConst452 + 0.93514016703154246f);
		fConst486 = tanf((123.69245982665232f / fConst0));
		fConst487 = (1.0f / fConst486);
		fConst488 = (1.0f / (((fConst487 + 0.157482159302087f) / fConst486) + 0.93514016703154246f));
		fConst489 = faustpower<2>(fConst486);
		fConst490 = (50.063807016150385f / fConst489);
		fConst491 = (2 * (0.93514016703154246f - fConst490));
		fConst492 = (1.0f / (((fConst487 + 0.74313046010703965f) / fConst486) + 1.450071084655647f));
		fConst493 = (11.052052171507189f / fConst489);
		fConst494 = (2 * (1.450071084655647f - fConst493));
		fConst495 = (1.0f / (((fConst487 + 3.1897274020965583f) / fConst486) + 4.0767819696438066f));
		fConst496 = (0.0017661728399818856f / fConst489);
		fConst497 = (2 * (0.00040767818495825777f - fConst496));
		fConst498 = (1.0f / (((fConst449 + 0.16840487111358901f) / fConst448) + 1.0693584077073119f));
		fConst499 = (2 * (53.536152954556727f - fConst477));
		fConst500 = (1.0f / (((fConst449 + 0.51247864188914105f) / fConst448) + 0.68962136448467504f));
		fConst501 = (2 * (7.6217312988706034f - fConst477));
		fConst502 = (1.0f / (((fConst449 + 0.78241304682164503f) / fConst448) + 0.24529150870616001f));
		fConst503 = (9.9999997054999994e-05f / fConst451);
		fConst504 = (2 * (0.00043322720055500002f - fConst503));
		fConst505 = (((fConst449 + -0.78241304682164503f) / fConst448) + 0.24529150870616001f);
		fConst506 = (2 * (0.24529150870616001f - fConst477));
		fConst507 = (fConst503 + 0.00043322720055500002f);
		fConst508 = (((fConst449 + -0.51247864188914105f) / fConst448) + 0.68962136448467504f);
		fConst509 = (2 * (0.68962136448467504f - fConst477));
		fConst510 = (fConst477 + 7.6217312988706034f);
		fConst511 = (((fConst449 + -0.16840487111358901f) / fConst448) + 1.0693584077073119f);
		fConst512 = (2 * (1.0693584077073119f - fConst477));
		fConst513 = (fConst477 + 53.536152954556727f);
		fTempPerm73 = 0;
		fConst514 = (((fConst487 + -3.1897274020965583f) / fConst486) + 4.0767819696438066f);
		fConst515 = (1.0f / fConst489);
		fConst516 = (2 * (4.0767819696438066f - fConst515));
		fConst517 = (fConst496 + 0.00040767818495825777f);
		fConst518 = (((fConst487 + -0.74313046010703965f) / fConst486) + 1.450071084655647f);
		fConst519 = (2 * (1.450071084655647f - fConst515));
		fConst520 = (fConst493 + 1.450071084655647f);
		fConst521 = (((fConst487 + -0.157482159302087f) / fConst486) + 0.93514016703154246f);
		fConst522 = (2 * (0.93514016703154246f - fConst515));
		fConst523 = (fConst490 + 0.93514016703154246f);
		fConst524 = (1.0f / (((fConst487 + 0.16840487111358901f) / fConst486) + 1.0693584077073119f));
		fConst525 = (2 * (53.536152954556727f - fConst515));
		fConst526 = (1.0f / (((fConst487 + 0.51247864188914105f) / fConst486) + 0.68962136448467504f));
		fConst527 = (2 * (7.6217312988706034f - fConst515));
		fConst528 = (1.0f / (((fConst487 + 0.78241304682164503f) / fConst486) + 0.24529150870616001f));
		fConst529 = (9.9999997054999994e-05f / fConst489);
		fConst530 = (2 * (0.00043322720055500002f - fConst529));
		fConst531 = (((fConst487 + -0.78241304682164503f) / fConst486) + 0.24529150870616001f);
		fConst532 = (2 * (0.24529150870616001f - fConst515));
		fConst533 = (fConst529 + 0.00043322720055500002f);
		fConst534 = (((fConst487 + -0.51247864188914105f) / fConst486) + 0.68962136448467504f);
		fConst535 = (2 * (0.68962136448467504f - fConst515));
		fConst536 = (fConst515 + 7.6217312988706034f);
		fConst537 = (((fConst487 + -0.16840487111358901f) / fConst486) + 1.0693584077073119f);
		fConst538 = (2 * (1.0693584077073119f - fConst515));
		fConst539 = (fConst515 + 53.536152954556727f);
	}
	virtual void instanceResetUserInterface() {
		fslider0 = 50.0f;
		fslider1 = 100.0f;
		fcheckbox0 = 0.0;
		fcheckbox1 = 0.0;
		fslider2 = -20.0f;
		fcheckbox2 = 0.0;
		fcheckbox3 = 0.0;
		fcheckbox4 = 0.0;
		fentry0 = 2.0f;
		fslider3 = 49.0f;
		fslider4 = 0.10000000000000001f;
		fslider5 = -0.10000000000000001f;
		fslider6 = 0.10000000000000001f;
		fslider7 = 0.0f;
		fslider8 = 0.5f;
		fcheckbox5 = 0.0;
		fslider9 = 1.0f;
		fslider10 = 0.0f;
		fslider11 = 1.0f;
		fslider12 = 10.0f;
		fslider13 = 0.0f;
		fcheckbox6 = 0.0;
		fslider14 = 1.0f;
		fslider15 = 1000.0f;
		fslider16 = 0.0f;
		fslider17 = 1.5f;
		fslider18 = 100.0f;
		fslider19 = 800.0f;
		fslider20 = 0.5f;
		fcheckbox7 = 0.0;
	}
	virtual void instanceClear() {
		for (int i=0; i<4; i++) iVec0[i] = 0;
		for (int i=0; i<2; i++) fRec4[i] = 0;
		for (int i=0; i<2; i++) iRec6[i] = 0;
		for (int i=0; i<4; i++) fRec5[i] = 0;
		for (int i=0; i<2; i++) fRec8[i] = 0;
		for (int i=0; i<2; i++) fVec1[i] = 0;
		for (int i=0; i<2; i++) fRec7[i] = 0;
		for (int i=0; i<2; i++) fVec2[i] = 0;
		for (int i=0; i<2; i++) fVec3[i] = 0;
		for (int i=0; i<2; i++) fVec4[i] = 0;
		for (int i=0; i<2; i++) fVec5[i] = 0;
		for (int i=0; i<2; i++) fVec6[i] = 0;
		for (int i=0; i<2; i++) fVec7[i] = 0;
		for (int i=0; i<2; i++) fVec8[i] = 0;
		for (int i=0; i<2; i++) fRec9[i] = 0;
		for (int i=0; i<2; i++) fVec9[i] = 0;
		for (int i=0; i<2; i++) fVec10[i] = 0;
		for (int i=0; i<2; i++) fVec11[i] = 0;
		for (int i=0; i<2; i++) fVec12[i] = 0;
		for (int i=0; i<2; i++) fVec13[i] = 0;
		for (int i=0; i<2; i++) fVec14[i] = 0;
		for (int i=0; i<2; i++) fVec15[i] = 0;
		for (int i=0; i<2; i++) fRec10[i] = 0;
		for (int i=0; i<2; i++) fVec16[i] = 0;
		for (int i=0; i<2; i++) fVec17[i] = 0;
		for (int i=0; i<2; i++) fVec18[i] = 0;
		for (int i=0; i<2; i++) fVec19[i] = 0;
		for (int i=0; i<2; i++) fVec20[i] = 0;
		for (int i=0; i<2; i++) fVec21[i] = 0;
		for (int i=0; i<2; i++) fRec11[i] = 0;
		for (int i=0; i<2; i++) fRec12[i] = 0;
		IOTA = 0;
		for (int i=0; i<4096; i++) fVec22[i] = 0;
		for (int i=0; i<2; i++) fRec13[i] = 0;
		for (int i=0; i<2; i++) fRec19[i] = 0;
		for (int i=0; i<2; i++) fRec20[i] = 0;
		for (int i=0; i<3; i++) fRec18[i] = 0;
		for (int i=0; i<3; i++) fRec17[i] = 0;
		for (int i=0; i<3; i++) fRec16[i] = 0;
		for (int i=0; i<3; i++) fRec15[i] = 0;
		for (int i=0; i<2; i++) fRec14[i] = 0;
		for (int i=0; i<4096; i++) fVec23[i] = 0;
		for (int i=0; i<2; i++) fRec21[i] = 0;
		for (int i=0; i<3; i++) fRec26[i] = 0;
		for (int i=0; i<3; i++) fRec25[i] = 0;
		for (int i=0; i<3; i++) fRec24[i] = 0;
		for (int i=0; i<3; i++) fRec23[i] = 0;
		for (int i=0; i<2; i++) fRec22[i] = 0;
		for (int i=0; i<3; i++) fRec3[i] = 0;
		for (int i=0; i<3; i++) fRec2[i] = 0;
		for (int i=0; i<3; i++) fRec1[i] = 0;
		for (int i=0; i<2; i++) fRec0[i] = 0;
		for (int i=0; i<3; i++) fRec33[i] = 0;
		for (int i=0; i<3; i++) fRec32[i] = 0;
		for (int i=0; i<3; i++) fRec31[i] = 0;
		for (int i=0; i<3; i++) fRec30[i] = 0;
		for (int i=0; i<3; i++) fRec29[i] = 0;
		for (int i=0; i<3; i++) fRec28[i] = 0;
		for (int i=0; i<2; i++) fRec27[i] = 0;
		for (int i=0; i<3; i++) fRec40[i] = 0;
		for (int i=0; i<3; i++) fRec39[i] = 0;
		for (int i=0; i<3; i++) fRec38[i] = 0;
		for (int i=0; i<3; i++) fRec37[i] = 0;
		for (int i=0; i<3; i++) fRec36[i] = 0;
		for (int i=0; i<3; i++) fRec35[i] = 0;
		for (int i=0; i<2; i++) fRec34[i] = 0;
		for (int i=0; i<3; i++) fRec47[i] = 0;
		for (int i=0; i<3; i++) fRec46[i] = 0;
		for (int i=0; i<3; i++) fRec45[i] = 0;
		for (int i=0; i<3; i++) fRec44[i] = 0;
		for (int i=0; i<3; i++) fRec43[i] = 0;
		for (int i=0; i<3; i++) fRec42[i] = 0;
		for (int i=0; i<2; i++) fRec41[i] = 0;
		for (int i=0; i<3; i++) fRec54[i] = 0;
		for (int i=0; i<3; i++) fRec53[i] = 0;
		for (int i=0; i<3; i++) fRec52[i] = 0;
		for (int i=0; i<3; i++) fRec51[i] = 0;
		for (int i=0; i<3; i++) fRec50[i] = 0;
		for (int i=0; i<3; i++) fRec49[i] = 0;
		for (int i=0; i<2; i++) fRec48[i] = 0;
		for (int i=0; i<3; i++) fRec61[i] = 0;
		for (int i=0; i<3; i++) fRec60[i] = 0;
		for (int i=0; i<3; i++) fRec59[i] = 0;
		for (int i=0; i<3; i++) fRec58[i] = 0;
		for (int i=0; i<3; i++) fRec57[i] = 0;
		for (int i=0; i<3; i++) fRec56[i] = 0;
		for (int i=0; i<2; i++) fRec55[i] = 0;
		for (int i=0; i<3; i++) fRec68[i] = 0;
		for (int i=0; i<3; i++) fRec67[i] = 0;
		for (int i=0; i<3; i++) fRec66[i] = 0;
		for (int i=0; i<3; i++) fRec65[i] = 0;
		for (int i=0; i<3; i++) fRec64[i] = 0;
		for (int i=0; i<3; i++) fRec63[i] = 0;
		for (int i=0; i<2; i++) fRec62[i] = 0;
		for (int i=0; i<3; i++) fRec75[i] = 0;
		for (int i=0; i<3; i++) fRec74[i] = 0;
		for (int i=0; i<3; i++) fRec73[i] = 0;
		for (int i=0; i<3; i++) fRec72[i] = 0;
		for (int i=0; i<3; i++) fRec71[i] = 0;
		for (int i=0; i<3; i++) fRec70[i] = 0;
		for (int i=0; i<2; i++) fRec69[i] = 0;
		for (int i=0; i<3; i++) fRec82[i] = 0;
		for (int i=0; i<3; i++) fRec81[i] = 0;
		for (int i=0; i<3; i++) fRec80[i] = 0;
		for (int i=0; i<3; i++) fRec79[i] = 0;
		for (int i=0; i<3; i++) fRec78[i] = 0;
		for (int i=0; i<3; i++) fRec77[i] = 0;
		for (int i=0; i<2; i++) fRec76[i] = 0;
		for (int i=0; i<3; i++) fRec89[i] = 0;
		for (int i=0; i<3; i++) fRec88[i] = 0;
		for (int i=0; i<3; i++) fRec87[i] = 0;
		for (int i=0; i<3; i++) fRec86[i] = 0;
		for (int i=0; i<3; i++) fRec85[i] = 0;
		for (int i=0; i<3; i++) fRec84[i] = 0;
		for (int i=0; i<2; i++) fRec83[i] = 0;
		for (int i=0; i<3; i++) fRec96[i] = 0;
		for (int i=0; i<3; i++) fRec95[i] = 0;
		for (int i=0; i<3; i++) fRec94[i] = 0;
		for (int i=0; i<3; i++) fRec93[i] = 0;
		for (int i=0; i<3; i++) fRec92[i] = 0;
		for (int i=0; i<3; i++) fRec91[i] = 0;
		for (int i=0; i<2; i++) fRec90[i] = 0;
		for (int i=0; i<3; i++) fRec103[i] = 0;
		for (int i=0; i<3; i++) fRec102[i] = 0;
		for (int i=0; i<3; i++) fRec101[i] = 0;
		for (int i=0; i<3; i++) fRec100[i] = 0;
		for (int i=0; i<3; i++) fRec99[i] = 0;
		for (int i=0; i<3; i++) fRec98[i] = 0;
		for (int i=0; i<2; i++) fRec97[i] = 0;
		for (int i=0; i<3; i++) fRec110[i] = 0;
		for (int i=0; i<3; i++) fRec109[i] = 0;
		for (int i=0; i<3; i++) fRec108[i] = 0;
		for (int i=0; i<3; i++) fRec107[i] = 0;
		for (int i=0; i<3; i++) fRec106[i] = 0;
		for (int i=0; i<3; i++) fRec105[i] = 0;
		for (int i=0; i<2; i++) fRec104[i] = 0;
		for (int i=0; i<3; i++) fRec117[i] = 0;
		for (int i=0; i<3; i++) fRec116[i] = 0;
		for (int i=0; i<3; i++) fRec115[i] = 0;
		for (int i=0; i<3; i++) fRec114[i] = 0;
		for (int i=0; i<3; i++) fRec113[i] = 0;
		for (int i=0; i<3; i++) fRec112[i] = 0;
		for (int i=0; i<2; i++) fRec111[i] = 0;
		for (int i=0; i<3; i++) fRec121[i] = 0;
		for (int i=0; i<3; i++) fRec120[i] = 0;
		for (int i=0; i<3; i++) fRec119[i] = 0;
		for (int i=0; i<2; i++) fRec118[i] = 0;
	}
	virtual void init(int samplingFreq) {
		classInit(samplingFreq);
		instanceInit(samplingFreq);
	}
	virtual void instanceInit(int samplingFreq) {
		instanceConstants(samplingFreq);
		instanceResetUserInterface();
		instanceClear();
	}
	virtual mydsp* clone() {
		return new mydsp();
	}
	virtual int getSampleRate() {
		return fSamplingFreq;
	}
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openVerticalBox("phaserFlangerLab");
		ui_interface->declare(0, "1", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's oscillators.lib   for documentation and references");
		ui_interface->openVerticalBox("SAWTOOTH OSCILLATOR");
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider2, "1", "");
		ui_interface->declare(&fslider2, "style", "knob");
		ui_interface->declare(&fslider2, "tooltip", "Sawtooth   waveform amplitude");
		ui_interface->declare(&fslider2, "unit", "dB");
		ui_interface->addVerticalSlider("Amplitude", &fslider2, -20.0f, -120.0f, 10.0f, 0.10000000000000001f);
		ui_interface->declare(&fslider3, "2", "");
		ui_interface->declare(&fslider3, "style", "knob");
		ui_interface->declare(&fslider3, "tooltip", "Sawtooth   frequency as a Piano Key (PK) number (A440 = key 49)");
		ui_interface->declare(&fslider3, "unit", "PK");
		ui_interface->addVerticalSlider("Frequency", &fslider3, 49.0f, 1.0f, 88.0f, 0.01f);
		ui_interface->declare(&fslider5, "3", "");
		ui_interface->declare(&fslider5, "style", "knob");
		ui_interface->declare(&fslider5, "tooltip", "Percentange frequency-shift  up or down for second oscillator");
		ui_interface->declare(&fslider5, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 1", &fslider5, -0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider6, "4", "");
		ui_interface->declare(&fslider6, "style", "knob");
		ui_interface->declare(&fslider6, "tooltip", "Percentange frequency-shift up or down for third detuned oscillator");
		ui_interface->declare(&fslider6, "unit", "%%");
		ui_interface->addVerticalSlider("Detuning 2", &fslider6, 0.10000000000000001f, -10.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider4, "5", "");
		ui_interface->declare(&fslider4, "scale", "log");
		ui_interface->declare(&fslider4, "style", "knob");
		ui_interface->declare(&fslider4, "tooltip", "Portamento (frequency-glide) time-constant in seconds");
		ui_interface->declare(&fslider4, "unit", "sec");
		ui_interface->addVerticalSlider("Portamento", &fslider4, 0.10000000000000001f, 0.001f, 10.0f, 0.001f);
		ui_interface->declare(&fentry0, "6", "");
		ui_interface->declare(&fentry0, "tooltip", "Order of sawtootn aliasing   suppression");
		ui_interface->addNumEntry("Saw Order", &fentry0, 2.0f, 1.0f, 4.0f, 1.0f);
		ui_interface->declare(0, "7", "");
		ui_interface->openVerticalBox("Alternate Signals");
		ui_interface->declare(&fcheckbox3, "0", "");
		ui_interface->addCheckButton("Noise (White or Pink - uses only Amplitude control on   the left)", &fcheckbox3);
		ui_interface->declare(&fcheckbox4, "1", "");
		ui_interface->declare(&fcheckbox4, "tooltip", "Pink Noise (or 1/f noise) is Constant-Q Noise, meaning that it has the   same total power in every octave");
		ui_interface->addCheckButton("Pink instead of White Noise (also called 1/f Noise)", &fcheckbox4);
		ui_interface->declare(&fcheckbox2, "2", "");
		ui_interface->addCheckButton("External Signal Input (overrides Sawtooth/Noise   selection above)", &fcheckbox2);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference: https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface->openVerticalBox("FLANGER");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox1, "0", "");
		ui_interface->declare(&fcheckbox1, "tooltip", "When this is checked, the flanger   has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox1);
		ui_interface->declare(&fcheckbox5, "1", "");
		ui_interface->addCheckButton("Invert Flange Sum", &fcheckbox5);
		ui_interface->declare(&fbargraph0, "2", "");
		ui_interface->declare(&fbargraph0, "style", "led");
		ui_interface->declare(&fbargraph0, "tooltip", "Display sum of flange delays");
		ui_interface->addHorizontalBargraph("Flange LFO", &fbargraph0, -1.5f, 1.5f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider8, "1", "");
		ui_interface->declare(&fslider8, "style", "knob");
		ui_interface->declare(&fslider8, "unit", "Hz");
		ui_interface->addHorizontalSlider("Speed", &fslider8, 0.5f, 0.0f, 10.0f, 0.01f);
		ui_interface->declare(&fslider9, "2", "");
		ui_interface->declare(&fslider9, "style", "knob");
		ui_interface->addHorizontalSlider("Depth", &fslider9, 1.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->declare(&fslider10, "3", "");
		ui_interface->declare(&fslider10, "style", "knob");
		ui_interface->addHorizontalSlider("Feedback", &fslider10, 0.0f, -0.999f, 0.999f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("Delay Controls");
		ui_interface->declare(&fslider12, "1", "");
		ui_interface->declare(&fslider12, "style", "knob");
		ui_interface->declare(&fslider12, "unit", "ms");
		ui_interface->addHorizontalSlider("Flange Delay", &fslider12, 10.0f, 0.0f, 20.0f, 0.001f);
		ui_interface->declare(&fslider11, "2", "");
		ui_interface->declare(&fslider11, "style", "knob");
		ui_interface->declare(&fslider11, "unit", "ms");
		ui_interface->addHorizontalSlider("Delay Offset", &fslider11, 1.0f, 0.0f, 20.0f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider7, "unit", "dB");
		ui_interface->addHorizontalSlider("Flanger Output Level", &fslider7, 0.0f, -60.0f, 10.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "tooltip", "Reference:   https://ccrma.stanford.edu/~jos/pasp/Flanging.html");
		ui_interface->openVerticalBox("PHASER2");
		ui_interface->declare(0, "0", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fcheckbox0, "0", "");
		ui_interface->declare(&fcheckbox0, "tooltip", "When this is checked, the phaser   has no effect");
		ui_interface->addCheckButton("Bypass", &fcheckbox0);
		ui_interface->declare(&fcheckbox7, "1", "");
		ui_interface->addCheckButton("Invert Internal Phaser Sum", &fcheckbox7);
		ui_interface->declare(&fcheckbox6, "2", "");
		ui_interface->addCheckButton("Vibrato Mode", &fcheckbox6);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider20, "1", "");
		ui_interface->declare(&fslider20, "style", "knob");
		ui_interface->declare(&fslider20, "unit", "Hz");
		ui_interface->addHorizontalSlider("Speed", &fslider20, 0.5f, 0.0f, 10.0f, 0.001f);
		ui_interface->declare(&fslider14, "2", "");
		ui_interface->declare(&fslider14, "style", "knob");
		ui_interface->addHorizontalSlider("Notch Depth (Intensity)", &fslider14, 1.0f, 0.0f, 1.0f, 0.001f);
		ui_interface->declare(&fslider16, "3", "");
		ui_interface->declare(&fslider16, "style", "knob");
		ui_interface->addHorizontalSlider("Feedback Gain", &fslider16, 0.0f, -0.999f, 0.999f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "2", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider15, "1", "");
		ui_interface->declare(&fslider15, "scale", "log");
		ui_interface->declare(&fslider15, "style", "knob");
		ui_interface->declare(&fslider15, "unit", "Hz");
		ui_interface->addHorizontalSlider("Notch width", &fslider15, 1000.0f, 10.0f, 5000.0f, 1.0f);
		ui_interface->declare(&fslider18, "2", "");
		ui_interface->declare(&fslider18, "scale", "log");
		ui_interface->declare(&fslider18, "style", "knob");
		ui_interface->declare(&fslider18, "unit", "Hz");
		ui_interface->addHorizontalSlider("Min Notch1 Freq", &fslider18, 100.0f, 20.0f, 5000.0f, 1.0f);
		ui_interface->declare(&fslider19, "3", "");
		ui_interface->declare(&fslider19, "scale", "log");
		ui_interface->declare(&fslider19, "style", "knob");
		ui_interface->declare(&fslider19, "unit", "Hz");
		ui_interface->addHorizontalSlider("Max Notch1 Freq", &fslider19, 800.0f, 20.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider17, "4", "");
		ui_interface->declare(&fslider17, "style", "knob");
		ui_interface->addHorizontalSlider("Notch Freq Ratio: NotchFreq(n+1)/NotchFreq(n)", &fslider17, 1.5f, 1.1000000000000001f, 4.0f, 0.001f);
		ui_interface->closeBox();
		ui_interface->declare(0, "3", "");
		ui_interface->openHorizontalBox("0x00");
		ui_interface->declare(&fslider13, "unit", "dB");
		ui_interface->addHorizontalSlider("Phaser Output Level", &fslider13, 0.0f, -60.0f, 10.0f, 0.10000000000000001f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->declare(0, "4", "");
		ui_interface->openVerticalBox("0x00");
		ui_interface->declare(0, "0", "");
		ui_interface->declare(0, "tooltip", "See Faust's filters.lib for documentation and references");
		ui_interface->openHorizontalBox("CONSTANT-Q SPECTRUM ANALYZER (6E), 15 bands spanning    LP, 9 octaves below 16000 Hz, HP");
		ui_interface->declare(&fbargraph15, "0", "");
		ui_interface->declare(&fbargraph15, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph15, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218e00170", &fbargraph15, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph14, "1", "");
		ui_interface->declare(&fbargraph14, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph14, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218df1c10", &fbargraph14, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph13, "2", "");
		ui_interface->declare(&fbargraph13, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph13, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218dde350", &fbargraph13, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph12, "3", "");
		ui_interface->declare(&fbargraph12, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph12, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218dcaac0", &fbargraph12, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph11, "4", "");
		ui_interface->declare(&fbargraph11, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph11, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218db7300", &fbargraph11, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph10, "5", "");
		ui_interface->declare(&fbargraph10, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph10, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218da3b80", &fbargraph10, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph9, "6", "");
		ui_interface->declare(&fbargraph9, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph9, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d90430", &fbargraph9, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph8, "7", "");
		ui_interface->declare(&fbargraph8, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph8, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d7ccf0", &fbargraph8, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph7, "8", "");
		ui_interface->declare(&fbargraph7, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph7, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d695b0", &fbargraph7, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph6, "9", "");
		ui_interface->declare(&fbargraph6, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph6, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d55eb0", &fbargraph6, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph5, "10", "");
		ui_interface->declare(&fbargraph5, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph5, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d427b0", &fbargraph5, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph4, "11", "");
		ui_interface->declare(&fbargraph4, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph4, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d2f0b0", &fbargraph4, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph3, "12", "");
		ui_interface->declare(&fbargraph3, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph3, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d1ba50", &fbargraph3, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph2, "13", "");
		ui_interface->declare(&fbargraph2, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph2, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218d08760", &fbargraph2, -50.0f, 10.0f);
		ui_interface->declare(&fbargraph1, "14", "");
		ui_interface->declare(&fbargraph1, "tooltip", "Spectral Band Level in dB");
		ui_interface->declare(&fbargraph1, "unit", "dB");
		ui_interface->addVerticalBargraph("0x7fa218cf06d0", &fbargraph1, -50.0f, 10.0f);
		ui_interface->closeBox();
		ui_interface->declare(0, "1", "");
		ui_interface->openHorizontalBox("SPECTRUM ANALYZER CONTROLS");
		ui_interface->declare(&fslider1, "0", "");
		ui_interface->declare(&fslider1, "scale", "log");
		ui_interface->declare(&fslider1, "tooltip", "band-level averaging time in milliseconds");
		ui_interface->declare(&fslider1, "unit", "ms");
		ui_interface->addHorizontalSlider("Level Averaging Time", &fslider1, 100.0f, 1.0f, 10000.0f, 1.0f);
		ui_interface->declare(&fslider0, "1", "");
		ui_interface->declare(&fslider0, "tooltip", "Level offset in decibels");
		ui_interface->declare(&fslider0, "unit", "dB");
		ui_interface->addHorizontalSlider("Level dB Offset", &fslider0, 50.0f, -50.0f, 100.0f, 1.0f);
		ui_interface->closeBox();
		ui_interface->closeBox();
		ui_interface->closeBox();
	}
	virtual void compute (int count, FAUSTFLOAT** input, FAUSTFLOAT** output) {
		//zone1
		//zone2
		float 	fSlow0 = float(fslider0);
		float 	fSlow1 = expf((0 - (fConst1 / float(fslider1))));
		float 	fSlow2 = (1.0f - fSlow1);
		int 	iSlow3 = int(float(fcheckbox0));
		int 	iSlow4 = int(float(fcheckbox1));
		float 	fSlow5 = (0.0010000000000000009f * powf(10,(0.050000000000000003f * float(fslider2))));
		int 	iSlow6 = int(float(fcheckbox2));
		int 	iSlow7 = int(float(fcheckbox3));
		int 	iSlow8 = int(float(fcheckbox4));
		int 	iSlow9 = int((float(fentry0) + -1));
		int 	iSlow10 = int((iSlow9 >= 2));
		int 	iSlow11 = int((iSlow9 >= 3));
		float 	fSlow12 = expf((0 - (fConst16 / float(fslider4))));
		float 	fSlow13 = (440.0f * (powf(2.0f,(0.083333333333333329f * (float(fslider3) + -49.0f))) * (1.0f - fSlow12)));
		int 	iSlow14 = int((iSlow9 >= 1));
		float 	fSlow15 = ((0.01f * float(fslider5)) + 1);
		float 	fSlow16 = ((0.01f * float(fslider6)) + 1);
		float 	fSlow17 = powf(10,(0.050000000000000003f * float(fslider7)));
		float 	fSlow18 = (fConst19 * float(fslider8));
		float 	fSlow19 = sinf(fSlow18);
		float 	fSlow20 = cosf(fSlow18);
		float 	fSlow21 = (0 - fSlow19);
		float 	fSlow22 = float(fslider9);
		float 	fSlow23 = ((int(float(fcheckbox5)))?(0 - fSlow22):fSlow22);
		float 	fSlow24 = float(fslider10);
		float 	fSlow25 = (0.001f * float(fslider11));
		float 	fSlow26 = (0.00050000000000000001f * float(fslider12));
		float 	fSlow27 = powf(10,(0.050000000000000003f * float(fslider13)));
		float 	fSlow28 = (0.5f * ((int(float(fcheckbox6)))?2:float(fslider14)));
		float 	fSlow29 = (1 - fSlow28);
		float 	fSlow30 = expf((fConst16 * (0 - (3.1415926535897931f * float(fslider15)))));
		float 	fSlow31 = faustpower<2>(fSlow30);
		float 	fSlow32 = float(fslider16);
		float 	fSlow33 = (0 - (2 * fSlow30));
		float 	fSlow34 = float(fslider17);
		float 	fSlow35 = float(fslider18);
		float 	fSlow36 = (fConst19 * fSlow35);
		float 	fSlow37 = (0.5f * (0 - (fConst19 * (fSlow35 - max(fSlow35, float(fslider19))))));
		float 	fSlow38 = (fConst19 * float(fslider20));
		float 	fSlow39 = sinf(fSlow38);
		float 	fSlow40 = cosf(fSlow38);
		float 	fSlow41 = (0 - fSlow39);
		float 	fSlow42 = faustpower<2>(fSlow34);
		float 	fSlow43 = faustpower<3>(fSlow34);
		float 	fSlow44 = faustpower<4>(fSlow34);
		float 	fSlow45 = ((int(float(fcheckbox7)))?(0 - fSlow28):fSlow28);
		//zone2b
		//zone3
		FAUSTFLOAT* input0 = input[0];
		FAUSTFLOAT* output0 = output[0];
		FAUSTFLOAT* output1 = output[1];
		//LoopGraphScalar
		for (int i=0; i<count; i++) {
			iVec0[0] = 1;
			fRec4[0] = (fSlow5 + (0.999f * fRec4[1]));
			iRec6[0] = ((1103515245 * iRec6[1]) + 12345);
			fTempPerm0 = (4.6566128752457969e-10f * iRec6[0]);
			fRec5[0] = (((0.52218940000000003f * fRec5[3]) + (fTempPerm0 + (2.4949560019999999f * fRec5[1]))) - (2.0172658750000001f * fRec5[2]));
			fRec8[0] = (fSlow13 + (fSlow12 * fRec8[1]));
			fTempPerm1 = max(20.0f, fabsf(fRec8[0]));
			fVec1[0] = fTempPerm1;
			fTempPerm2 = (fRec7[1] + (fConst16 * fVec1[1]));
			fRec7[0] = (fTempPerm2 - floorf(fTempPerm2));
			fTempPerm3 = (2 * fRec7[0]);
			fTempPerm4 = (fTempPerm3 + -1);
			fTempPerm5 = faustpower<2>(fTempPerm4);
			fVec2[0] = fTempPerm5;
			fTempPerm6 = (fVec2[0] * (fVec2[0] + -2.0f));
			fVec3[0] = fTempPerm6;
			fTempPerm7 = ((fVec3[0] - fVec3[1]) / fVec1[0]);
			fVec4[0] = fTempPerm7;
			fTempPerm8 = ((fVec4[0] - fVec4[1]) / fVec1[0]);
			fVec5[0] = fTempPerm8;
			fTempPerm9 = faustpower<3>(fTempPerm4);
			fVec6[0] = (fTempPerm9 + (1 - fTempPerm3));
			fTempPerm10 = ((fTempPerm9 + (1 - (fTempPerm3 + fVec6[1]))) / fVec1[0]);
			fVec7[0] = fTempPerm10;
			fTempPerm11 = max(20.0f, fabsf((fSlow15 * fRec8[0])));
			fVec8[0] = fTempPerm11;
			fTempPerm12 = (fRec9[1] + (fConst16 * fVec8[1]));
			fRec9[0] = (fTempPerm12 - floorf(fTempPerm12));
			fTempPerm13 = (2 * fRec9[0]);
			fTempPerm14 = (fTempPerm13 + -1);
			fTempPerm15 = faustpower<2>(fTempPerm14);
			fVec9[0] = fTempPerm15;
			fTempPerm16 = (fVec9[0] * (fVec9[0] + -2.0f));
			fVec10[0] = fTempPerm16;
			fTempPerm17 = ((fVec10[0] - fVec10[1]) / fVec8[0]);
			fVec11[0] = fTempPerm17;
			fTempPerm18 = ((fVec11[0] - fVec11[1]) / fVec8[0]);
			fVec12[0] = fTempPerm18;
			fTempPerm19 = faustpower<3>(fTempPerm14);
			fVec13[0] = (fTempPerm19 + (1 - fTempPerm13));
			fTempPerm20 = ((fTempPerm19 + (1 - (fTempPerm13 + fVec13[1]))) / fVec8[0]);
			fVec14[0] = fTempPerm20;
			fTempPerm21 = max(20.0f, fabsf((fSlow16 * fRec8[0])));
			fVec15[0] = fTempPerm21;
			fTempPerm22 = (fRec10[1] + (fConst16 * fVec15[1]));
			fRec10[0] = (fTempPerm22 - floorf(fTempPerm22));
			fTempPerm23 = (2 * fRec10[0]);
			fTempPerm24 = (fTempPerm23 + -1);
			fTempPerm25 = faustpower<2>(fTempPerm24);
			fVec16[0] = fTempPerm25;
			fTempPerm26 = (fVec16[0] * (fVec16[0] + -2.0f));
			fVec17[0] = fTempPerm26;
			fTempPerm27 = ((fVec17[0] - fVec17[1]) / fVec15[0]);
			fVec18[0] = fTempPerm27;
			fTempPerm28 = ((fVec18[0] - fVec18[1]) / fVec15[0]);
			fVec19[0] = fTempPerm28;
			fTempPerm29 = faustpower<3>(fTempPerm24);
			fVec20[0] = (fTempPerm29 + (1 - fTempPerm23));
			fTempPerm30 = ((fTempPerm29 + (1 - (fTempPerm23 + fVec20[1]))) / fVec15[0]);
			fVec21[0] = fTempPerm30;
			fTempPerm31 = (fRec4[0] * ((iSlow6)?(float)input0[i]:((iSlow7)?((iSlow8)?(((0.049922034999999997f * fRec5[0]) + (0.050612698999999997f * fRec5[2])) - ((0.095993537000000004f * fRec5[1]) + (0.0044087859999999996f * fRec5[3]))):fTempPerm0):(0.33333333333333331f * (fRec4[0] * ((((iSlow10)?((iSlow11)?(fConst15 * ((iVec0[3] * (fVec5[0] - fVec5[1])) / fVec1[0])):(fConst17 * ((iVec0[2] * (fVec7[0] - fVec7[1])) / fVec1[0]))):((iSlow14)?(fConst18 * ((iVec0[1] * (fVec2[0] - fVec2[1])) / fVec1[0])):fTempPerm4)) + ((iSlow10)?((iSlow11)?(fConst15 * ((iVec0[3] * (fVec12[0] - fVec12[1])) / fVec8[0])):(fConst17 * ((iVec0[2] * (fVec14[0] - fVec14[1])) / fVec8[0]))):((iSlow14)?(fConst18 * ((iVec0[1] * (fVec9[0] - fVec9[1])) / fVec8[0])):fTempPerm14))) + ((iSlow10)?((iSlow11)?(fConst15 * ((iVec0[3] * (fVec19[0] - fVec19[1])) / fVec15[0])):(fConst17 * ((iVec0[2] * (fVec21[0] - fVec21[1])) / fVec15[0]))):((iSlow14)?(fConst18 * ((iVec0[1] * (fVec16[0] - fVec16[1])) / fVec15[0])):fTempPerm24))))))));
			fRec11[0] = ((fSlow19 * fRec12[1]) + (fSlow20 * fRec11[1]));
			iTempPerm32 = (1 - iVec0[1]);
			fRec12[0] = (((fSlow20 * fRec12[1]) + (fSlow21 * fRec11[1])) + iTempPerm32);
			fbargraph0 = (fRec12[0] + fRec11[0]);
			fTempPerm33 = ((iSlow4)?0:fTempPerm31);
			fTempPerm34 = (fSlow17 * fTempPerm33);
			fTempPerm35 = ((fSlow24 * fRec13[1]) - fTempPerm34);
			fVec22[IOTA&4095] = fTempPerm35;
			fTempPerm36 = (fConst0 * (fSlow25 + (fSlow26 * (fRec11[0] + 1))));
			iTempPerm37 = int(fTempPerm36);
			fTempPerm38 = floorf(fTempPerm36);
			fRec13[0] = ((fVec22[(IOTA-int(min(2049, max(0, iTempPerm37))))&4095] * (fTempPerm38 + (1 - fTempPerm36))) + ((fTempPerm36 - fTempPerm38) * fVec22[(IOTA-int(min(2049, max(0, (iTempPerm37 + 1)))))&4095]));
			fTempPerm39 = ((iSlow4)?fTempPerm31:(0.5f * (fTempPerm34 + (fSlow23 * fRec13[0]))));
			fTempPerm40 = ((iSlow3)?0:fTempPerm39);
			fRec19[0] = ((fSlow39 * fRec20[1]) + (fSlow40 * fRec19[1]));
			fRec20[0] = (((fSlow40 * fRec20[1]) + (fSlow41 * fRec19[1])) + iTempPerm32);
			fTempPerm41 = (fSlow36 + (fSlow37 * (1 - fRec19[0])));
			fTempPerm42 = (fRec18[1] * cosf((fSlow34 * fTempPerm41)));
			fRec18[0] = (((fSlow27 * fTempPerm40) + (fSlow32 * fRec14[1])) - ((fSlow33 * fTempPerm42) + (fSlow31 * fRec18[2])));
			fTempPerm43 = (fRec17[1] * cosf((fSlow42 * fTempPerm41)));
			fRec17[0] = ((fRec18[2] + (fSlow33 * (fTempPerm42 - fTempPerm43))) + (fSlow31 * (fRec18[0] - fRec17[2])));
			fTempPerm44 = (fRec16[1] * cosf((fSlow43 * fTempPerm41)));
			fRec16[0] = ((fRec17[2] + (fSlow33 * (fTempPerm43 - fTempPerm44))) + (fSlow31 * (fRec17[0] - fRec16[2])));
			fTempPerm45 = (fRec15[1] * cosf((fSlow44 * fTempPerm41)));
			fRec15[0] = ((fRec16[2] + (fSlow33 * (fTempPerm44 - fTempPerm45))) + (fSlow31 * (fRec16[0] - fRec15[2])));
			fRec14[0] = ((fSlow31 * fRec15[0]) + ((fSlow33 * fTempPerm45) + fRec15[2]));
			fTempPerm46 = ((iSlow3)?fTempPerm39:((fSlow27 * (fTempPerm40 * fSlow29)) + (fRec14[0] * fSlow45)));
			fTempPerm47 = (fSlow17 * fTempPerm33);
			fTempPerm48 = ((fSlow24 * fRec21[1]) - fTempPerm47);
			fVec23[IOTA&4095] = fTempPerm48;
			fTempPerm49 = (fConst0 * (fSlow25 + (fSlow26 * (fRec12[0] + 1))));
			iTempPerm50 = int(fTempPerm49);
			fTempPerm51 = floorf(fTempPerm49);
			fRec21[0] = ((fVec23[(IOTA-int(min(2049, max(0, iTempPerm50))))&4095] * (fTempPerm51 + (1 - fTempPerm49))) + ((fTempPerm49 - fTempPerm51) * fVec23[(IOTA-int(min(2049, max(0, (iTempPerm50 + 1)))))&4095]));
			fTempPerm52 = ((iSlow4)?fTempPerm31:(0.5f * (fTempPerm47 + (fSlow23 * fRec21[0]))));
			fTempPerm53 = ((iSlow3)?0:fTempPerm52);
			fTempPerm54 = (fSlow36 + (fSlow37 * (1 - fRec20[0])));
			fTempPerm55 = (fRec26[1] * cosf((fSlow34 * fTempPerm54)));
			fRec26[0] = (((fSlow27 * fTempPerm53) + (fSlow32 * fRec22[1])) - ((fSlow33 * fTempPerm55) + (fSlow31 * fRec26[2])));
			fTempPerm56 = (fRec25[1] * cosf((fSlow42 * fTempPerm54)));
			fRec25[0] = ((fRec26[2] + (fSlow33 * (fTempPerm55 - fTempPerm56))) + (fSlow31 * (fRec26[0] - fRec25[2])));
			fTempPerm57 = (fRec24[1] * cosf((fSlow43 * fTempPerm54)));
			fRec24[0] = ((fRec25[2] + (fSlow33 * (fTempPerm56 - fTempPerm57))) + (fSlow31 * (fRec25[0] - fRec24[2])));
			fTempPerm58 = (fRec23[1] * cosf((fSlow44 * fTempPerm54)));
			fRec23[0] = ((fRec24[2] + (fSlow33 * (fTempPerm57 - fTempPerm58))) + (fSlow31 * (fRec24[0] - fRec23[2])));
			fRec22[0] = ((fSlow31 * fRec23[0]) + ((fSlow33 * fTempPerm58) + fRec23[2]));
			fTempPerm59 = ((iSlow3)?fTempPerm52:((fSlow27 * (fSlow29 * fTempPerm53)) + (fRec22[0] * fSlow45)));
			fTempPerm60 = (fTempPerm46 + fTempPerm59);
			fRec3[0] = (fTempPerm60 - (fConst11 * ((fConst20 * fRec3[2]) + (fConst22 * fRec3[1]))));
			fRec2[0] = ((fConst11 * (((fConst13 * fRec3[1]) + (fConst23 * fRec3[0])) + (fConst23 * fRec3[2]))) - (fConst8 * ((fConst24 * fRec2[2]) + (fConst25 * fRec2[1]))));
			fRec1[0] = ((fConst8 * (((fConst10 * fRec2[1]) + (fConst26 * fRec2[0])) + (fConst26 * fRec2[2]))) - (fConst4 * ((fConst27 * fRec1[2]) + (fConst28 * fRec1[1]))));
			fRec0[0] = ((fSlow1 * fRec0[1]) + (fSlow2 * fabsf((fConst4 * (((fConst7 * fRec1[1]) + (fConst29 * fRec1[0])) + (fConst29 * fRec1[2]))))));
			fbargraph1 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec0[0]))));
			fRec33[0] = (fTempPerm60 - (fConst46 * ((fConst49 * fRec33[2]) + (fConst50 * fRec33[1]))));
			fRec32[0] = ((fConst46 * (((fConst48 * fRec33[1]) + (fConst51 * fRec33[0])) + (fConst51 * fRec33[2]))) - (fConst44 * ((fConst52 * fRec32[2]) + (fConst53 * fRec32[1]))));
			fRec31[0] = ((fConst44 * (((fConst45 * fRec32[1]) + (fConst54 * fRec32[0])) + (fConst54 * fRec32[2]))) - (fConst42 * ((fConst55 * fRec31[2]) + (fConst56 * fRec31[1]))));
			fTempPerm61 = (fConst42 * (((fConst43 * fRec31[1]) + (fConst57 * fRec31[0])) + (fConst57 * fRec31[2])));
			fRec30[0] = (fTempPerm61 - (fConst39 * ((fConst58 * fRec30[2]) + (fConst60 * fRec30[1]))));
			fRec29[0] = ((fConst39 * (((fConst41 * fRec30[1]) + (fConst61 * fRec30[0])) + (fConst61 * fRec30[2]))) - (fConst36 * ((fConst62 * fRec29[2]) + (fConst63 * fRec29[1]))));
			fRec28[0] = ((fConst36 * (((fConst38 * fRec29[1]) + (fConst64 * fRec29[0])) + (fConst64 * fRec29[2]))) - (fConst32 * ((fConst65 * fRec28[2]) + (fConst66 * fRec28[1]))));
			fRec27[0] = ((fSlow1 * fRec27[1]) + (fSlow2 * fabsf((fConst32 * (((fConst35 * fRec28[1]) + (fConst67 * fRec28[0])) + (fConst67 * fRec28[2]))))));
			fbargraph2 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec27[0]))));
			fRec40[0] = (fTempPerm61 - (fConst84 * ((fConst87 * fRec40[2]) + (fConst88 * fRec40[1]))));
			fRec39[0] = ((fConst84 * (((fConst86 * fRec40[1]) + (fConst89 * fRec40[0])) + (fConst89 * fRec40[2]))) - (fConst82 * ((fConst90 * fRec39[2]) + (fConst91 * fRec39[1]))));
			fRec38[0] = ((fConst82 * (((fConst83 * fRec39[1]) + (fConst92 * fRec39[0])) + (fConst92 * fRec39[2]))) - (fConst80 * ((fConst93 * fRec38[2]) + (fConst94 * fRec38[1]))));
			fTempPerm62 = (fConst80 * (((fConst81 * fRec38[1]) + (fConst95 * fRec38[0])) + (fConst95 * fRec38[2])));
			fRec37[0] = (fTempPerm62 - (fConst77 * ((fConst96 * fRec37[2]) + (fConst98 * fRec37[1]))));
			fRec36[0] = ((fConst77 * (((fConst79 * fRec37[1]) + (fConst99 * fRec37[0])) + (fConst99 * fRec37[2]))) - (fConst74 * ((fConst100 * fRec36[2]) + (fConst101 * fRec36[1]))));
			fRec35[0] = ((fConst74 * (((fConst76 * fRec36[1]) + (fConst102 * fRec36[0])) + (fConst102 * fRec36[2]))) - (fConst70 * ((fConst103 * fRec35[2]) + (fConst104 * fRec35[1]))));
			fRec34[0] = ((fSlow1 * fRec34[1]) + (fSlow2 * fabsf((fConst70 * (((fConst73 * fRec35[1]) + (fConst105 * fRec35[0])) + (fConst105 * fRec35[2]))))));
			fbargraph3 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec34[0]))));
			fRec47[0] = (fTempPerm62 - (fConst122 * ((fConst125 * fRec47[2]) + (fConst126 * fRec47[1]))));
			fRec46[0] = ((fConst122 * (((fConst124 * fRec47[1]) + (fConst127 * fRec47[0])) + (fConst127 * fRec47[2]))) - (fConst120 * ((fConst128 * fRec46[2]) + (fConst129 * fRec46[1]))));
			fRec45[0] = ((fConst120 * (((fConst121 * fRec46[1]) + (fConst130 * fRec46[0])) + (fConst130 * fRec46[2]))) - (fConst118 * ((fConst131 * fRec45[2]) + (fConst132 * fRec45[1]))));
			fTempPerm63 = (fConst118 * (((fConst119 * fRec45[1]) + (fConst133 * fRec45[0])) + (fConst133 * fRec45[2])));
			fRec44[0] = (fTempPerm63 - (fConst115 * ((fConst134 * fRec44[2]) + (fConst136 * fRec44[1]))));
			fRec43[0] = ((fConst115 * (((fConst117 * fRec44[1]) + (fConst137 * fRec44[0])) + (fConst137 * fRec44[2]))) - (fConst112 * ((fConst138 * fRec43[2]) + (fConst139 * fRec43[1]))));
			fRec42[0] = ((fConst112 * (((fConst114 * fRec43[1]) + (fConst140 * fRec43[0])) + (fConst140 * fRec43[2]))) - (fConst108 * ((fConst141 * fRec42[2]) + (fConst142 * fRec42[1]))));
			fRec41[0] = ((fSlow1 * fRec41[1]) + (fSlow2 * fabsf((fConst108 * (((fConst111 * fRec42[1]) + (fConst143 * fRec42[0])) + (fConst143 * fRec42[2]))))));
			fbargraph4 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec41[0]))));
			fRec54[0] = (fTempPerm63 - (fConst160 * ((fConst163 * fRec54[2]) + (fConst164 * fRec54[1]))));
			fRec53[0] = ((fConst160 * (((fConst162 * fRec54[1]) + (fConst165 * fRec54[0])) + (fConst165 * fRec54[2]))) - (fConst158 * ((fConst166 * fRec53[2]) + (fConst167 * fRec53[1]))));
			fRec52[0] = ((fConst158 * (((fConst159 * fRec53[1]) + (fConst168 * fRec53[0])) + (fConst168 * fRec53[2]))) - (fConst156 * ((fConst169 * fRec52[2]) + (fConst170 * fRec52[1]))));
			fTempPerm64 = (fConst156 * (((fConst157 * fRec52[1]) + (fConst171 * fRec52[0])) + (fConst171 * fRec52[2])));
			fRec51[0] = (fTempPerm64 - (fConst153 * ((fConst172 * fRec51[2]) + (fConst174 * fRec51[1]))));
			fRec50[0] = ((fConst153 * (((fConst155 * fRec51[1]) + (fConst175 * fRec51[0])) + (fConst175 * fRec51[2]))) - (fConst150 * ((fConst176 * fRec50[2]) + (fConst177 * fRec50[1]))));
			fRec49[0] = ((fConst150 * (((fConst152 * fRec50[1]) + (fConst178 * fRec50[0])) + (fConst178 * fRec50[2]))) - (fConst146 * ((fConst179 * fRec49[2]) + (fConst180 * fRec49[1]))));
			fRec48[0] = ((fSlow1 * fRec48[1]) + (fSlow2 * fabsf((fConst146 * (((fConst149 * fRec49[1]) + (fConst181 * fRec49[0])) + (fConst181 * fRec49[2]))))));
			fbargraph5 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec48[0]))));
			fRec61[0] = (fTempPerm64 - (fConst198 * ((fConst201 * fRec61[2]) + (fConst202 * fRec61[1]))));
			fRec60[0] = ((fConst198 * (((fConst200 * fRec61[1]) + (fConst203 * fRec61[0])) + (fConst203 * fRec61[2]))) - (fConst196 * ((fConst204 * fRec60[2]) + (fConst205 * fRec60[1]))));
			fRec59[0] = ((fConst196 * (((fConst197 * fRec60[1]) + (fConst206 * fRec60[0])) + (fConst206 * fRec60[2]))) - (fConst194 * ((fConst207 * fRec59[2]) + (fConst208 * fRec59[1]))));
			fTempPerm65 = (fConst194 * (((fConst195 * fRec59[1]) + (fConst209 * fRec59[0])) + (fConst209 * fRec59[2])));
			fRec58[0] = (fTempPerm65 - (fConst191 * ((fConst210 * fRec58[2]) + (fConst212 * fRec58[1]))));
			fRec57[0] = ((fConst191 * (((fConst193 * fRec58[1]) + (fConst213 * fRec58[0])) + (fConst213 * fRec58[2]))) - (fConst188 * ((fConst214 * fRec57[2]) + (fConst215 * fRec57[1]))));
			fRec56[0] = ((fConst188 * (((fConst190 * fRec57[1]) + (fConst216 * fRec57[0])) + (fConst216 * fRec57[2]))) - (fConst184 * ((fConst217 * fRec56[2]) + (fConst218 * fRec56[1]))));
			fRec55[0] = ((fSlow1 * fRec55[1]) + (fSlow2 * fabsf((fConst184 * (((fConst187 * fRec56[1]) + (fConst219 * fRec56[0])) + (fConst219 * fRec56[2]))))));
			fbargraph6 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec55[0]))));
			fRec68[0] = (fTempPerm65 - (fConst236 * ((fConst239 * fRec68[2]) + (fConst240 * fRec68[1]))));
			fRec67[0] = ((fConst236 * (((fConst238 * fRec68[1]) + (fConst241 * fRec68[0])) + (fConst241 * fRec68[2]))) - (fConst234 * ((fConst242 * fRec67[2]) + (fConst243 * fRec67[1]))));
			fRec66[0] = ((fConst234 * (((fConst235 * fRec67[1]) + (fConst244 * fRec67[0])) + (fConst244 * fRec67[2]))) - (fConst232 * ((fConst245 * fRec66[2]) + (fConst246 * fRec66[1]))));
			fTempPerm66 = (fConst232 * (((fConst233 * fRec66[1]) + (fConst247 * fRec66[0])) + (fConst247 * fRec66[2])));
			fRec65[0] = (fTempPerm66 - (fConst229 * ((fConst248 * fRec65[2]) + (fConst250 * fRec65[1]))));
			fRec64[0] = ((fConst229 * (((fConst231 * fRec65[1]) + (fConst251 * fRec65[0])) + (fConst251 * fRec65[2]))) - (fConst226 * ((fConst252 * fRec64[2]) + (fConst253 * fRec64[1]))));
			fRec63[0] = ((fConst226 * (((fConst228 * fRec64[1]) + (fConst254 * fRec64[0])) + (fConst254 * fRec64[2]))) - (fConst222 * ((fConst255 * fRec63[2]) + (fConst256 * fRec63[1]))));
			fRec62[0] = ((fSlow1 * fRec62[1]) + (fSlow2 * fabsf((fConst222 * (((fConst225 * fRec63[1]) + (fConst257 * fRec63[0])) + (fConst257 * fRec63[2]))))));
			fbargraph7 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec62[0]))));
			fRec75[0] = (fTempPerm66 - (fConst274 * ((fConst277 * fRec75[2]) + (fConst278 * fRec75[1]))));
			fRec74[0] = ((fConst274 * (((fConst276 * fRec75[1]) + (fConst279 * fRec75[0])) + (fConst279 * fRec75[2]))) - (fConst272 * ((fConst280 * fRec74[2]) + (fConst281 * fRec74[1]))));
			fRec73[0] = ((fConst272 * (((fConst273 * fRec74[1]) + (fConst282 * fRec74[0])) + (fConst282 * fRec74[2]))) - (fConst270 * ((fConst283 * fRec73[2]) + (fConst284 * fRec73[1]))));
			fTempPerm67 = (fConst270 * (((fConst271 * fRec73[1]) + (fConst285 * fRec73[0])) + (fConst285 * fRec73[2])));
			fRec72[0] = (fTempPerm67 - (fConst267 * ((fConst286 * fRec72[2]) + (fConst288 * fRec72[1]))));
			fRec71[0] = ((fConst267 * (((fConst269 * fRec72[1]) + (fConst289 * fRec72[0])) + (fConst289 * fRec72[2]))) - (fConst264 * ((fConst290 * fRec71[2]) + (fConst291 * fRec71[1]))));
			fRec70[0] = ((fConst264 * (((fConst266 * fRec71[1]) + (fConst292 * fRec71[0])) + (fConst292 * fRec71[2]))) - (fConst260 * ((fConst293 * fRec70[2]) + (fConst294 * fRec70[1]))));
			fRec69[0] = ((fSlow1 * fRec69[1]) + (fSlow2 * fabsf((fConst260 * (((fConst263 * fRec70[1]) + (fConst295 * fRec70[0])) + (fConst295 * fRec70[2]))))));
			fbargraph8 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec69[0]))));
			fRec82[0] = (fTempPerm67 - (fConst312 * ((fConst315 * fRec82[2]) + (fConst316 * fRec82[1]))));
			fRec81[0] = ((fConst312 * (((fConst314 * fRec82[1]) + (fConst317 * fRec82[0])) + (fConst317 * fRec82[2]))) - (fConst310 * ((fConst318 * fRec81[2]) + (fConst319 * fRec81[1]))));
			fRec80[0] = ((fConst310 * (((fConst311 * fRec81[1]) + (fConst320 * fRec81[0])) + (fConst320 * fRec81[2]))) - (fConst308 * ((fConst321 * fRec80[2]) + (fConst322 * fRec80[1]))));
			fTempPerm68 = (fConst308 * (((fConst309 * fRec80[1]) + (fConst323 * fRec80[0])) + (fConst323 * fRec80[2])));
			fRec79[0] = (fTempPerm68 - (fConst305 * ((fConst324 * fRec79[2]) + (fConst326 * fRec79[1]))));
			fRec78[0] = ((fConst305 * (((fConst307 * fRec79[1]) + (fConst327 * fRec79[0])) + (fConst327 * fRec79[2]))) - (fConst302 * ((fConst328 * fRec78[2]) + (fConst329 * fRec78[1]))));
			fRec77[0] = ((fConst302 * (((fConst304 * fRec78[1]) + (fConst330 * fRec78[0])) + (fConst330 * fRec78[2]))) - (fConst298 * ((fConst331 * fRec77[2]) + (fConst332 * fRec77[1]))));
			fRec76[0] = ((fSlow1 * fRec76[1]) + (fSlow2 * fabsf((fConst298 * (((fConst301 * fRec77[1]) + (fConst333 * fRec77[0])) + (fConst333 * fRec77[2]))))));
			fbargraph9 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec76[0]))));
			fRec89[0] = (fTempPerm68 - (fConst350 * ((fConst353 * fRec89[2]) + (fConst354 * fRec89[1]))));
			fRec88[0] = ((fConst350 * (((fConst352 * fRec89[1]) + (fConst355 * fRec89[0])) + (fConst355 * fRec89[2]))) - (fConst348 * ((fConst356 * fRec88[2]) + (fConst357 * fRec88[1]))));
			fRec87[0] = ((fConst348 * (((fConst349 * fRec88[1]) + (fConst358 * fRec88[0])) + (fConst358 * fRec88[2]))) - (fConst346 * ((fConst359 * fRec87[2]) + (fConst360 * fRec87[1]))));
			fTempPerm69 = (fConst346 * (((fConst347 * fRec87[1]) + (fConst361 * fRec87[0])) + (fConst361 * fRec87[2])));
			fRec86[0] = (fTempPerm69 - (fConst343 * ((fConst362 * fRec86[2]) + (fConst364 * fRec86[1]))));
			fRec85[0] = ((fConst343 * (((fConst345 * fRec86[1]) + (fConst365 * fRec86[0])) + (fConst365 * fRec86[2]))) - (fConst340 * ((fConst366 * fRec85[2]) + (fConst367 * fRec85[1]))));
			fRec84[0] = ((fConst340 * (((fConst342 * fRec85[1]) + (fConst368 * fRec85[0])) + (fConst368 * fRec85[2]))) - (fConst336 * ((fConst369 * fRec84[2]) + (fConst370 * fRec84[1]))));
			fRec83[0] = ((fSlow1 * fRec83[1]) + (fSlow2 * fabsf((fConst336 * (((fConst339 * fRec84[1]) + (fConst371 * fRec84[0])) + (fConst371 * fRec84[2]))))));
			fbargraph10 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec83[0]))));
			fRec96[0] = (fTempPerm69 - (fConst388 * ((fConst391 * fRec96[2]) + (fConst392 * fRec96[1]))));
			fRec95[0] = ((fConst388 * (((fConst390 * fRec96[1]) + (fConst393 * fRec96[0])) + (fConst393 * fRec96[2]))) - (fConst386 * ((fConst394 * fRec95[2]) + (fConst395 * fRec95[1]))));
			fRec94[0] = ((fConst386 * (((fConst387 * fRec95[1]) + (fConst396 * fRec95[0])) + (fConst396 * fRec95[2]))) - (fConst384 * ((fConst397 * fRec94[2]) + (fConst398 * fRec94[1]))));
			fTempPerm70 = (fConst384 * (((fConst385 * fRec94[1]) + (fConst399 * fRec94[0])) + (fConst399 * fRec94[2])));
			fRec93[0] = (fTempPerm70 - (fConst381 * ((fConst400 * fRec93[2]) + (fConst402 * fRec93[1]))));
			fRec92[0] = ((fConst381 * (((fConst383 * fRec93[1]) + (fConst403 * fRec93[0])) + (fConst403 * fRec93[2]))) - (fConst378 * ((fConst404 * fRec92[2]) + (fConst405 * fRec92[1]))));
			fRec91[0] = ((fConst378 * (((fConst380 * fRec92[1]) + (fConst406 * fRec92[0])) + (fConst406 * fRec92[2]))) - (fConst374 * ((fConst407 * fRec91[2]) + (fConst408 * fRec91[1]))));
			fRec90[0] = ((fSlow1 * fRec90[1]) + (fSlow2 * fabsf((fConst374 * (((fConst377 * fRec91[1]) + (fConst409 * fRec91[0])) + (fConst409 * fRec91[2]))))));
			fbargraph11 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec90[0]))));
			fRec103[0] = (fTempPerm70 - (fConst426 * ((fConst429 * fRec103[2]) + (fConst430 * fRec103[1]))));
			fRec102[0] = ((fConst426 * (((fConst428 * fRec103[1]) + (fConst431 * fRec103[0])) + (fConst431 * fRec103[2]))) - (fConst424 * ((fConst432 * fRec102[2]) + (fConst433 * fRec102[1]))));
			fRec101[0] = ((fConst424 * (((fConst425 * fRec102[1]) + (fConst434 * fRec102[0])) + (fConst434 * fRec102[2]))) - (fConst422 * ((fConst435 * fRec101[2]) + (fConst436 * fRec101[1]))));
			fTempPerm71 = (fConst422 * (((fConst423 * fRec101[1]) + (fConst437 * fRec101[0])) + (fConst437 * fRec101[2])));
			fRec100[0] = (fTempPerm71 - (fConst419 * ((fConst438 * fRec100[2]) + (fConst440 * fRec100[1]))));
			fRec99[0] = ((fConst419 * (((fConst421 * fRec100[1]) + (fConst441 * fRec100[0])) + (fConst441 * fRec100[2]))) - (fConst416 * ((fConst442 * fRec99[2]) + (fConst443 * fRec99[1]))));
			fRec98[0] = ((fConst416 * (((fConst418 * fRec99[1]) + (fConst444 * fRec99[0])) + (fConst444 * fRec99[2]))) - (fConst412 * ((fConst445 * fRec98[2]) + (fConst446 * fRec98[1]))));
			fRec97[0] = ((fSlow1 * fRec97[1]) + (fSlow2 * fabsf((fConst412 * (((fConst415 * fRec98[1]) + (fConst447 * fRec98[0])) + (fConst447 * fRec98[2]))))));
			fbargraph12 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec97[0]))));
			fRec110[0] = (fTempPerm71 - (fConst464 * ((fConst467 * fRec110[2]) + (fConst468 * fRec110[1]))));
			fRec109[0] = ((fConst464 * (((fConst466 * fRec110[1]) + (fConst469 * fRec110[0])) + (fConst469 * fRec110[2]))) - (fConst462 * ((fConst470 * fRec109[2]) + (fConst471 * fRec109[1]))));
			fRec108[0] = ((fConst462 * (((fConst463 * fRec109[1]) + (fConst472 * fRec109[0])) + (fConst472 * fRec109[2]))) - (fConst460 * ((fConst473 * fRec108[2]) + (fConst474 * fRec108[1]))));
			fTempPerm72 = (fConst460 * (((fConst461 * fRec108[1]) + (fConst475 * fRec108[0])) + (fConst475 * fRec108[2])));
			fRec107[0] = (fTempPerm72 - (fConst457 * ((fConst476 * fRec107[2]) + (fConst478 * fRec107[1]))));
			fRec106[0] = ((fConst457 * (((fConst459 * fRec107[1]) + (fConst479 * fRec107[0])) + (fConst479 * fRec107[2]))) - (fConst454 * ((fConst480 * fRec106[2]) + (fConst481 * fRec106[1]))));
			fRec105[0] = ((fConst454 * (((fConst456 * fRec106[1]) + (fConst482 * fRec106[0])) + (fConst482 * fRec106[2]))) - (fConst450 * ((fConst483 * fRec105[2]) + (fConst484 * fRec105[1]))));
			fRec104[0] = ((fSlow1 * fRec104[1]) + (fSlow2 * fabsf((fConst450 * (((fConst453 * fRec105[1]) + (fConst485 * fRec105[0])) + (fConst485 * fRec105[2]))))));
			fbargraph13 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec104[0]))));
			fRec117[0] = (fTempPerm72 - (fConst502 * ((fConst505 * fRec117[2]) + (fConst506 * fRec117[1]))));
			fRec116[0] = ((fConst502 * (((fConst504 * fRec117[1]) + (fConst507 * fRec117[0])) + (fConst507 * fRec117[2]))) - (fConst500 * ((fConst508 * fRec116[2]) + (fConst509 * fRec116[1]))));
			fRec115[0] = ((fConst500 * (((fConst501 * fRec116[1]) + (fConst510 * fRec116[0])) + (fConst510 * fRec116[2]))) - (fConst498 * ((fConst511 * fRec115[2]) + (fConst512 * fRec115[1]))));
			fTempPerm73 = (fConst498 * (((fConst499 * fRec115[1]) + (fConst513 * fRec115[0])) + (fConst513 * fRec115[2])));
			fRec114[0] = (fTempPerm73 - (fConst495 * ((fConst514 * fRec114[2]) + (fConst516 * fRec114[1]))));
			fRec113[0] = ((fConst495 * (((fConst497 * fRec114[1]) + (fConst517 * fRec114[0])) + (fConst517 * fRec114[2]))) - (fConst492 * ((fConst518 * fRec113[2]) + (fConst519 * fRec113[1]))));
			fRec112[0] = ((fConst492 * (((fConst494 * fRec113[1]) + (fConst520 * fRec113[0])) + (fConst520 * fRec113[2]))) - (fConst488 * ((fConst521 * fRec112[2]) + (fConst522 * fRec112[1]))));
			fRec111[0] = ((fSlow1 * fRec111[1]) + (fSlow2 * fabsf((fConst488 * (((fConst491 * fRec112[1]) + (fConst523 * fRec112[0])) + (fConst523 * fRec112[2]))))));
			fbargraph14 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec111[0]))));
			fRec121[0] = (fTempPerm73 - (fConst528 * ((fConst531 * fRec121[2]) + (fConst532 * fRec121[1]))));
			fRec120[0] = ((fConst528 * (((fConst530 * fRec121[1]) + (fConst533 * fRec121[0])) + (fConst533 * fRec121[2]))) - (fConst526 * ((fConst534 * fRec120[2]) + (fConst535 * fRec120[1]))));
			fRec119[0] = ((fConst526 * (((fConst527 * fRec120[1]) + (fConst536 * fRec120[0])) + (fConst536 * fRec120[2]))) - (fConst524 * ((fConst537 * fRec119[2]) + (fConst538 * fRec119[1]))));
			fRec118[0] = ((fSlow1 * fRec118[1]) + (fSlow2 * fabsf((fConst524 * (((fConst525 * fRec119[1]) + (fConst539 * fRec119[0])) + (fConst539 * fRec119[2]))))));
			fbargraph15 = (fSlow0 + (20 * log10f(max(9.9999999999999995e-08f, fRec118[0]))));
			output0[i] = (FAUSTFLOAT)fTempPerm46;
			output1[i] = (FAUSTFLOAT)fTempPerm59;
			// post processing
			fRec118[1] = fRec118[0];
			fRec119[2] = fRec119[1]; fRec119[1] = fRec119[0];
			fRec120[2] = fRec120[1]; fRec120[1] = fRec120[0];
			fRec121[2] = fRec121[1]; fRec121[1] = fRec121[0];
			fRec111[1] = fRec111[0];
			fRec112[2] = fRec112[1]; fRec112[1] = fRec112[0];
			fRec113[2] = fRec113[1]; fRec113[1] = fRec113[0];
			fRec114[2] = fRec114[1]; fRec114[1] = fRec114[0];
			fRec115[2] = fRec115[1]; fRec115[1] = fRec115[0];
			fRec116[2] = fRec116[1]; fRec116[1] = fRec116[0];
			fRec117[2] = fRec117[1]; fRec117[1] = fRec117[0];
			fRec104[1] = fRec104[0];
			fRec105[2] = fRec105[1]; fRec105[1] = fRec105[0];
			fRec106[2] = fRec106[1]; fRec106[1] = fRec106[0];
			fRec107[2] = fRec107[1]; fRec107[1] = fRec107[0];
			fRec108[2] = fRec108[1]; fRec108[1] = fRec108[0];
			fRec109[2] = fRec109[1]; fRec109[1] = fRec109[0];
			fRec110[2] = fRec110[1]; fRec110[1] = fRec110[0];
			fRec97[1] = fRec97[0];
			fRec98[2] = fRec98[1]; fRec98[1] = fRec98[0];
			fRec99[2] = fRec99[1]; fRec99[1] = fRec99[0];
			fRec100[2] = fRec100[1]; fRec100[1] = fRec100[0];
			fRec101[2] = fRec101[1]; fRec101[1] = fRec101[0];
			fRec102[2] = fRec102[1]; fRec102[1] = fRec102[0];
			fRec103[2] = fRec103[1]; fRec103[1] = fRec103[0];
			fRec90[1] = fRec90[0];
			fRec91[2] = fRec91[1]; fRec91[1] = fRec91[0];
			fRec92[2] = fRec92[1]; fRec92[1] = fRec92[0];
			fRec93[2] = fRec93[1]; fRec93[1] = fRec93[0];
			fRec94[2] = fRec94[1]; fRec94[1] = fRec94[0];
			fRec95[2] = fRec95[1]; fRec95[1] = fRec95[0];
			fRec96[2] = fRec96[1]; fRec96[1] = fRec96[0];
			fRec83[1] = fRec83[0];
			fRec84[2] = fRec84[1]; fRec84[1] = fRec84[0];
			fRec85[2] = fRec85[1]; fRec85[1] = fRec85[0];
			fRec86[2] = fRec86[1]; fRec86[1] = fRec86[0];
			fRec87[2] = fRec87[1]; fRec87[1] = fRec87[0];
			fRec88[2] = fRec88[1]; fRec88[1] = fRec88[0];
			fRec89[2] = fRec89[1]; fRec89[1] = fRec89[0];
			fRec76[1] = fRec76[0];
			fRec77[2] = fRec77[1]; fRec77[1] = fRec77[0];
			fRec78[2] = fRec78[1]; fRec78[1] = fRec78[0];
			fRec79[2] = fRec79[1]; fRec79[1] = fRec79[0];
			fRec80[2] = fRec80[1]; fRec80[1] = fRec80[0];
			fRec81[2] = fRec81[1]; fRec81[1] = fRec81[0];
			fRec82[2] = fRec82[1]; fRec82[1] = fRec82[0];
			fRec69[1] = fRec69[0];
			fRec70[2] = fRec70[1]; fRec70[1] = fRec70[0];
			fRec71[2] = fRec71[1]; fRec71[1] = fRec71[0];
			fRec72[2] = fRec72[1]; fRec72[1] = fRec72[0];
			fRec73[2] = fRec73[1]; fRec73[1] = fRec73[0];
			fRec74[2] = fRec74[1]; fRec74[1] = fRec74[0];
			fRec75[2] = fRec75[1]; fRec75[1] = fRec75[0];
			fRec62[1] = fRec62[0];
			fRec63[2] = fRec63[1]; fRec63[1] = fRec63[0];
			fRec64[2] = fRec64[1]; fRec64[1] = fRec64[0];
			fRec65[2] = fRec65[1]; fRec65[1] = fRec65[0];
			fRec66[2] = fRec66[1]; fRec66[1] = fRec66[0];
			fRec67[2] = fRec67[1]; fRec67[1] = fRec67[0];
			fRec68[2] = fRec68[1]; fRec68[1] = fRec68[0];
			fRec55[1] = fRec55[0];
			fRec56[2] = fRec56[1]; fRec56[1] = fRec56[0];
			fRec57[2] = fRec57[1]; fRec57[1] = fRec57[0];
			fRec58[2] = fRec58[1]; fRec58[1] = fRec58[0];
			fRec59[2] = fRec59[1]; fRec59[1] = fRec59[0];
			fRec60[2] = fRec60[1]; fRec60[1] = fRec60[0];
			fRec61[2] = fRec61[1]; fRec61[1] = fRec61[0];
			fRec48[1] = fRec48[0];
			fRec49[2] = fRec49[1]; fRec49[1] = fRec49[0];
			fRec50[2] = fRec50[1]; fRec50[1] = fRec50[0];
			fRec51[2] = fRec51[1]; fRec51[1] = fRec51[0];
			fRec52[2] = fRec52[1]; fRec52[1] = fRec52[0];
			fRec53[2] = fRec53[1]; fRec53[1] = fRec53[0];
			fRec54[2] = fRec54[1]; fRec54[1] = fRec54[0];
			fRec41[1] = fRec41[0];
			fRec42[2] = fRec42[1]; fRec42[1] = fRec42[0];
			fRec43[2] = fRec43[1]; fRec43[1] = fRec43[0];
			fRec44[2] = fRec44[1]; fRec44[1] = fRec44[0];
			fRec45[2] = fRec45[1]; fRec45[1] = fRec45[0];
			fRec46[2] = fRec46[1]; fRec46[1] = fRec46[0];
			fRec47[2] = fRec47[1]; fRec47[1] = fRec47[0];
			fRec34[1] = fRec34[0];
			fRec35[2] = fRec35[1]; fRec35[1] = fRec35[0];
			fRec36[2] = fRec36[1]; fRec36[1] = fRec36[0];
			fRec37[2] = fRec37[1]; fRec37[1] = fRec37[0];
			fRec38[2] = fRec38[1]; fRec38[1] = fRec38[0];
			fRec39[2] = fRec39[1]; fRec39[1] = fRec39[0];
			fRec40[2] = fRec40[1]; fRec40[1] = fRec40[0];
			fRec27[1] = fRec27[0];
			fRec28[2] = fRec28[1]; fRec28[1] = fRec28[0];
			fRec29[2] = fRec29[1]; fRec29[1] = fRec29[0];
			fRec30[2] = fRec30[1]; fRec30[1] = fRec30[0];
			fRec31[2] = fRec31[1]; fRec31[1] = fRec31[0];
			fRec32[2] = fRec32[1]; fRec32[1] = fRec32[0];
			fRec33[2] = fRec33[1]; fRec33[1] = fRec33[0];
			fRec0[1] = fRec0[0];
			fRec1[2] = fRec1[1]; fRec1[1] = fRec1[0];
			fRec2[2] = fRec2[1]; fRec2[1] = fRec2[0];
			fRec3[2] = fRec3[1]; fRec3[1] = fRec3[0];
			fRec22[1] = fRec22[0];
			fRec23[2] = fRec23[1]; fRec23[1] = fRec23[0];
			fRec24[2] = fRec24[1]; fRec24[1] = fRec24[0];
			fRec25[2] = fRec25[1]; fRec25[1] = fRec25[0];
			fRec26[2] = fRec26[1]; fRec26[1] = fRec26[0];
			fRec21[1] = fRec21[0];
			fRec14[1] = fRec14[0];
			fRec15[2] = fRec15[1]; fRec15[1] = fRec15[0];
			fRec16[2] = fRec16[1]; fRec16[1] = fRec16[0];
			fRec17[2] = fRec17[1]; fRec17[1] = fRec17[0];
			fRec18[2] = fRec18[1]; fRec18[1] = fRec18[0];
			fRec20[1] = fRec20[0];
			fRec19[1] = fRec19[0];
			fRec13[1] = fRec13[0];
			IOTA = IOTA+1;
			fRec12[1] = fRec12[0];
			fRec11[1] = fRec11[0];
			fVec21[1] = fVec21[0];
			fVec20[1] = fVec20[0];
			fVec19[1] = fVec19[0];
			fVec18[1] = fVec18[0];
			fVec17[1] = fVec17[0];
			fVec16[1] = fVec16[0];
			fRec10[1] = fRec10[0];
			fVec15[1] = fVec15[0];
			fVec14[1] = fVec14[0];
			fVec13[1] = fVec13[0];
			fVec12[1] = fVec12[0];
			fVec11[1] = fVec11[0];
			fVec10[1] = fVec10[0];
			fVec9[1] = fVec9[0];
			fRec9[1] = fRec9[0];
			fVec8[1] = fVec8[0];
			fVec7[1] = fVec7[0];
			fVec6[1] = fVec6[0];
			fVec5[1] = fVec5[0];
			fVec4[1] = fVec4[0];
			fVec3[1] = fVec3[0];
			fVec2[1] = fVec2[0];
			fRec7[1] = fRec7[0];
			fVec1[1] = fVec1[0];
			fRec8[1] = fRec8[0];
			for (int i=3; i>0; i--) fRec5[i] = fRec5[i-1];
			iRec6[1] = iRec6[0];
			fRec4[1] = fRec4[0];
			for (int i=3; i>0; i--) iVec0[i] = iVec0[i-1];
		}
	}
};


