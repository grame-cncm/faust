type FaustModule = any;

interface IntVector { size(): number; get(i: number): number; }

interface FaustWasm {
    /* The C++ factory pointer as in integer */
    cfactory: number;
    /* The compiled wasm binary code */
    data: IntVector;
    /* The DSP JSON description */
    json: string;
}

type TFaustInfoType = "help" | "version" | "libdir" | "includedir" | "archdir" | "dspdir" | "pathslist";

/**
 *   Low level interface to the Faust library.
 *   Used for internal dev purpose only (not public).
 */

interface LibFaust {

    /**
     * Return the Faust compiler version.
     * 
     * @returns {string} the version
     */
    version(): string;

    /**
     * Create a dsp factory from Faust code.
     *
     * @param {string} name - an arbitrary name for the Faust module
     * @param {string} dsp_code - Faust dsp code
     * @param {string} args - the compiler options
     * @param {boolean} internal_memory - tell the compiler to generate static embedded memory or not
     * @returns {FaustWasm} an opaque reference to the factory
     */
    createDSPFactory(name: string, dsp_code: string, args: string, internal_memory: boolean): FaustWasm;

    /**
     * Delete a dsp factory.
     *
     * @param {number} cfactory - the factory C++ internal pointer as a number
     */
    deleteDSPFactory(cfactory: number): void;

    /**
     * Expand Faust code i.e. linearize included libraries.
     *
     * @param {string} name - an arbitrary name for the Faust module
     * @param {string} dsp_code - Faust dsp code
     * @param {string} args - the compiler options
     * @returns {string} return the expanded dsp code
     */
    expandDSP(name: string, dsp_code: string, args: string): string

    /**
     * Generates auxiliary files from Faust code. The output depends on the compiler options.
     *
     * @param {string} name - an arbitrary name for the faust module
     * @param {string} dsp_code - Faust dsp code
     * @param {string} args - the compiler options
     */
    generateAuxFiles(name: string, dsp_code: string, args: string): boolean;

    /**
     * Delete all existing dsp factories.
     */
    deleteAllDSPFactories(): void;

    /**
     * Exception management: gives an error string
     */
    getErrorAfterException(): string;

    /**
     * Exception management: cleanup
     * Should be called after each exception generated by the LibFaust methods.
     */
    cleanupAfterException(): void;

    /**
     * Get info about the embedded Faust engine
     * @param {string} what - the requested info
     */
    getInfos(what: TFaustInfoType): string;

    module(): FaustModule;

    toString(): string;
}

// Moved at the end of the file to please Visual Studio code completion tools.

/************************************************************************
 ************************************************************************
    FAUST compiler
    Copyright (C) 2003-2020 GRAME, Centre National de Creation Musicale
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 ************************************************************************
 ************************************************************************/