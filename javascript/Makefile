
jssrc := $(wildcard src/*.ts)

MAKE      ?= make
BUILD     := ../build
FAUSTWEB  := $(shell grep out tsconfig.json | cut -d: -f 2 | sed -e 's/[",]*//g')
FAUSTNODE := $(shell grep out nodeconfig.json | cut -d: -f 2 | sed -e 's/[",]*//g')
DISTDIR   := npm
SAMPLEDIR := npm/exemples
FAUSTAPI  := src/FaustCompiler.d.ts src/FaustWebAudio.d.ts src/FaustUtilities.d.ts src/FaustGenerator.d.ts src/FaustWAP.d.ts
FAUSTDIST := $(FAUSTAPI:src/%=$(DISTDIR)/%)
CHECKDIR  := tmp
SRC       := $(shell find src -name "*.ts" | egrep -v ".d.ts")
CHECKOUT  := $(SRC:src/%.ts=$(CHECKDIR)/%.js)
CHECKDIST := $(FAUSTDIST:$(DISTDIR)/%.ts=$(CHECKDIR)/%.js)
FAUSTDIST := $(FAUSTAPI:src/%=$(DISTDIR)/%)

NODESRC   := libfaust.ts FaustCompiler.ts FaustUtilities.ts FaustGenerator.ts # FaustSHA.ts
NODESRC   := $(NODESRC:%=src/%)

.PHONY: node

all: 
	$(MAKE) wasm
	$(MAKE) js
	$(MAKE) dist

help:
	@echo "============================================================"
	@echo "                     Faust Wasm Library"
	@echo "This Makefile is intended to generate the Faust wasm library"
	@echo "============================================================"
	@echo "Available targets are:"
	@echo "  all (default) : call the wasm, js and dist targets"
	@echo "  wasm          : compiles the wasm library"
	@echo "  js            : compiles the javascript library"
	@echo "  node          : compiles the javascript library for node (without audio node)"
	@echo "  dist          : build the public library interface"
	@echo
	@echo "Development specific targets:"
	@echo "  check    : check individual ts files compilation, including the dist interface"
	@echo "  cmake    : re-generates the wasm library makefile using cmake"
	@echo "  clean    : remove the files generated by the wasm, js and dist targets"
	@echo
	@echo "Utilities:"
	@echo "  deps     : generates a dependency graph of the source code"
	@echo
	@echo "Making the current version publicly available:"
	@echo "  publish  : publish to npm (use with caution)"


wasm:
	$(MAKE) -C $(BUILD) wasmlib

js: $(FAUSTWEB)

node: $(DISTDIR)/FaustNode.js

$(DISTDIR)/FaustNode.js : $(NODESRC) webpack.config.js
	tsc -p nodeconfig.json
	npm run pack

dist: 
	cp $(FAUSTAPI) $(DISTDIR)
	cp $(FAUSTWEB) $(SAMPLEDIR)
	cp $(BUILD)/lib/libfaust-wasm.* $(DISTDIR)
	cp $(BUILD)/lib/libfaust-wasm.* $(SAMPLEDIR)

$(FAUSTWEB) : $(jssrc)
	tsc --strict --strictNullChecks --alwaysStrict

clean:
	$(MAKE) -C $(BUILD)/faustdir/emcc clean
	rm -f $(FAUSTWEB) $(FAUSTDIST)
	rm -f $(FAUSTDIST) $(DISTDIR)/libfaust-wasm.*
	rm -f $(SAMPLEDIR)/libfaust-wasm.*

cmake:
	$(MAKE) -C $(BUILD) cmake

deps: refs.pdf

refs.pdf: refs.dot
	dot -Tpdf -o $@ $< 

refs.dot: $(SRC)
	echo "digraph impl { " > $@
	echo "margin=0.05;\n" >> $@
	grep '///<reference' src/*.* | sed -e 's/:[^=]*="/" -> "/' | sed -e 's/\/>/;/' | sed -e 's/^src\//"/' >> $@
	echo "}\n" >> $@

test:
	@echo $(FAUSTWEB)


##############################################################
# publishing to npm
##############################################################
publish: VERSION := $(shell grep version $(DISTDIR)/package.json | cut -d: -f 2 | sed -e 's/[^0-9.]*//g')
publish: 
	@echo "You are about to publish the libfaust package v.$(VERSION) on npm."
	@echo "Make sure you are logged in (npm login)"
	@read -p "Continue [y|n]: " answer && [ $$answer == "y" ]
	cd npm && npm publish --access public
	@echo "libfaust version " $(VERSION) " published"


###################################################
# check that individual files compile correctly
# check that public interfaces are self contained (no refs to undefined types) 
check: $(CHECKDIR) $(CHECKOUT) $(CHECKDIST)

$(CHECKDIR) :
	mkdir $(FAUSTDIST)

###################################################
# rules to compile individual files

TSOPT  := --strict --strictNullChecks --noImplicitAny --strictFunctionTypes --noImplicitThis --alwaysStrict --noImplicitReturns --noFallthroughCasesInSwitch --target ES2015

$(CHECKDIR)/%.d.js: $(DISTDIR)/%.d.ts
	tsc $(TSOPT) -out $@ $< || (rm $@ ; false)

$(CHECKDIR)/%.js: src/%.ts
	tsc $(TSOPT) -out $@ $< || (rm $@ ; false)
