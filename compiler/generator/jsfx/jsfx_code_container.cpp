/************************************************************************
 ************************************************************************
    FAUST compiler
    Copyright (C) 2022 GRAME, Centre National de Creation Musicale
    ---------------------------------------------------------------------
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 ************************************************************************
 ************************************************************************/

#include<regex>
#include<string>

#include "jsfx_code_container.hh"
#include "Text.hh"
#include "exception.hh"
#include "fir_function_builder.hh"
#include "floats.hh"
#include "global.hh"

using namespace std;

map<string, bool> JSFXInstVisitor::gFunctionSymbolTable;

dsp_factory_base* JSFXCodeContainer::produceFactory()
{
    return new text_dsp_factory_aux(fKlassName, "", "",
        ((dynamic_cast<ostringstream*>(fOut)) ? dynamic_cast<ostringstream*>(fOut)->str() : ""), "");
}

JSFXCodeContainer::JSFXCodeContainer(const std::string& name, int numInputs, int numOutputs, std::ostream* out)
{
    // Mandatory
    initialize(numInputs, numOutputs);
    fKlassName = name;
    fOut = out;
    
    // Allocate one static visitor
    if (!gGlobal->gJSFXVisitor) {
        gGlobal->gJSFXVisitor = new JSFXInstVisitor(out, name);
    }
}

CodeContainer* JSFXCodeContainer::createScalarContainer(const string& name, int sub_container_type)
{
    return new JSFXScalarCodeContainer(name, 0, 1, fOut, sub_container_type);
}

/*
    The given template implements -scalar (= default) and -vec mode.
    For options like -omp, -sch, the corresponding JSFXOpenMPCodeContainer
    and JSFXWorkStealingCodeContainer classes would have to be implemented
    and activated.
*/
CodeContainer* JSFXCodeContainer::createContainer(const string& name, int numInputs, int numOutputs, ostream* dst)
{
    gGlobal->gDSPStruct = true;
    CodeContainer* container;

    if (gGlobal->gOpenCLSwitch) {
        throw faustexception("ERROR : OpenCL not supported for JSFX\n");
    }
    if (gGlobal->gCUDASwitch) {
        throw faustexception("ERROR : CUDA not supported for JSFX\n");
    }

    if (gGlobal->gOpenMPSwitch) {
        throw faustexception("ERROR : OpenMP not supported for JSFX\n");
    } else if (gGlobal->gSchedulerSwitch) {
        throw faustexception("ERROR : Scheduler not supported for JSFX\n");
    } else if (gGlobal->gVectorSwitch) {
        throw faustexception("ERROR : Vector not supported for JSFX\n");
    } else {
        container = new JSFXScalarCodeContainer(name, numInputs, numOutputs, dst, kInt);
    }

    return container;
}

// Used for subcontainers if 'inlining sub containers' model is not used
void JSFXCodeContainer::produceInternal()
{}

/*
 Given as an example of what a real backend would have to do: add or remove FIR visiting code etc.
*/
void JSFXCodeContainer::produceClass()
{
    fOut->precision(numeric_limits<double>::digits10 + 1);
    int n = 0;

    *fOut << "/*\n"
          << " * Generated by 'faust " << gGlobal->printCompilationOptions1() << "'\n"
          << " */\n";
    
    *fOut << "desc: Effect " << fKlassName << "\n";

    // Needed ?
    produceMetadata(n);
    
    // buildUserInterface
    generateUserInterface(gGlobal->gJSFXVisitor);

    // inputs/outputs
    tab(n, *fOut);
    if (fNumInputs > 64) {
        throw(faustexception("ERROR : JSFX format does not support more than 64 inputs\n"));
    }
    if (fNumOutputs > 64) {
        throw(faustexception("ERROR : JSFX format does not support more than 64 outputs\n"));
    }
    for (int i = 0; i < fNumInputs; i++) {
        *fOut << "in_pin:input" << std::to_string(i)<< "\n";
    }
    for (int i = 0; i < fNumOutputs; i++) {
        *fOut << "out_pin:output" << std::to_string(i)<< "\n";
    }
    tab(n, *fOut);
   
    // classInit
    *fOut << "@init" << endl;
    
    *fOut << "\n"
             << "// GLOBAL Functions \n"
             << "\n";
    // Globals functions 
    *fOut << "/*\n"
             << " * Initialise memory allocator \n"
             << " */\n"
             << "function init_memory() instance(index) (\n"
             << " index = 0;\n"
             << ");\n";
    *fOut << "/*\n"
             << " *Allocate memory \n"
             << " */\n"
             << "function alloc_memory(amount) instance(index) local(i) (\n"
             << " i = index; \n"
             << " index += amount; \n"
             << " i;\n"
             << ");\n";

    *fOut << "MEMORY.init_memory();\n\n";

    *fOut <<"function zeros(address, amount) (\n"
          << " i = 0;\n"
          << " loop(amount, address[i] = 0; i+=1;);\n"
          << " address;\n"
          << ");\n";

    // Int32 operations
    *fOut << "function int32(x) ( \n"
            " x >= 2147483648 ? x - 4294967296 : x; \n"
            "); \n"

            "function uint32(x) ( \n"
            " x < 0 ? x + 4294967296 : x; \n"
            "); \n"
             
            "function add32(x, y) ( \n"
            " (x += y) >= 4294967296 ? x - 4294967296 : x; \n"
            "); \n"

            "function sub32(x, y) ( \n"
            " (x -= y) < 0 ? x + 4294967296 : x; \n"
            "); \n"

            "function mul32(x, y) local(a, b) ( \n"
            " x = uint32(x); \n"
            " y = uint32(y); \n"
            " a = x & 0xFFFF; \n"
            " b = y & 0xFFFF; \n"
            " y = ((((y / 65536)|0) * a + ((x / 65536)|0) * b) & 0xFFFF) * 65536 + a * b; \n"
            " y >= 4294967296 ? y - 4294967296 : y; \n"
            "); \n"
        
            "function ftoi32(x) ( \n"
            " x <= -1 ? ((min(max(-2147483648, x), -1)|0) + 4294967296;) : (min(max(0, x), 4294967295)|0;); \n"
            ");"
            
            "function limit(x, min, max) (\n"
            "   (x < min) ? min : (x > max) ? max : x; \n"
            ");\n"
            
            "function midi_scale(x, min, max, step) (\n"
            "   diff = (max - min);\n"
            "   min + (diff * (x / 127));\n"
            ");\n"
            "function mtof(mid) (\n"
            "   440 * exp(0.0577622645 * (mid - 69));\n"
            ");\n";

    *fOut << "/*\n"
          << " * Mathematical functions \n"
          << " */\n"
          << "function exp2(arg) (pow(2, n)); \n"
          << "function exp10(arg) (pow(10, n)); \n"
          << "function log2(x) (log(x) / log(2)); \n"
          << "function round(N) (0|(N+sign(N)*0.5)); \n"
          << "function rint(x) (round(int32(x))); \n"
          << "function mod(a,b) (a%b); \n"
          << "function remainder(x,y) (\n"
          << " x - (round(x/y)*y);\n"
          << ");\n"
          << "function fmod(x,y) ( \n"
          << " y = abs(y); \n"
          << " res = remainder(abs(x), y); \n"
          << " (res < 0) ? res += y; \n" 
          << " (x < 0) ? -res : res; \n" 
          << ");\n";
    
        *fOut << "/* \n"
          << " * MIDI Constants \n"
          << " */ \n"
          << "CC = 0xB0; \n"
          << "NOTE_ON = 0x90; \n"
          << "NOTE_OFF = 0x80; \n";
        
    tab(n, *fOut);
    
    mergeSubContainers();

    // Print header
    *fOut << "num_inputs = " << fNumInputs << ";\n"
          << "num_outputs = " << fNumOutputs << ";\n\n";
    // Possibly missing mathematical functions
    // Possibly merge sub containers (with an empty 'produceInternal' method)

    *fOut << "nvoices = " << nvoices << ";\n\n";
    *fOut << "voice_idx = 0; \n";
    JSFXInitFieldsVisitor initializer(fOut, n + 2);
    for (const auto& it : fGlobalDeclarationInstructions->fCode) {
        if (dynamic_cast<DeclareVarInst*>(it)) {
            it->accept(&initializer);
        } 
    }
    
    if(poly && gGlobal->gJSFXVisitor->mode == JSFXMIDIVoiceMode::voice_steal)
    {
        *fOut << "voices_arr = MEMORY.alloc_memory(" << nvoices << ");\n";
        for(size_t i = 0; i < nvoices; ++i) {
            *fOut << "voices_arr[" << i << "] = " << i << ";\n";
        }
        *fOut << "function sort_voices(n) (\n"
        "   cnt = nvoices-1;\n"
        "   while(cnt > 0) (\n"
        "       voices_arr[cnt] = voices_arr[cnt - 1];\n"
        "       cnt -= 1;\n"
        "   );\n"
        "   voices_arr[0] = n;\n"
        ");\n"
        "function get_oldest_voice() (\n"
        "   voices_arr[nvoices-1];\n"
        ");\n";
    }

    tab(n, *fOut);
    //*fOut << "addresses = MEMORY.alloc_memory(nvoices);\n";
    *fOut << "function get_dsp(index) (\n"
    //"   addresses[index];\n"
    "  dsp.memory + dsp.size * index \n"
    ");\n";


    int total_size = 0;
    *fOut << "// DSP struct memory layout \n";
    *fOut << "dsp.memory = MEMORY.alloc_memory(0); \n // check current memory index \n";
    std::string class_decl;
    StructInstVisitor struct_visitor;
    fDeclarationInstructions->accept(&struct_visitor);
    for(const auto& it : fDeclarationInstructions->fCode) {
        std::cout << "decl >> " << it->getName() << std::endl;
        auto desc = struct_visitor.getMemoryDesc(it->getName());
        class_decl += "dsp." + it->getName() +  " = " +  std::to_string(total_size) + ";\n";
        total_size += desc.fSize;
    }
    
    for(const auto& it : fComputeBlockInstructions->fCode) {
        std::cout << "compute block >> " << it->getName() << std::endl;
        std::string name = it->getName();
        if(name.find("output") != name.npos || name.find("input") != name.npos)
            continue;
        class_decl += "dsp." + it->getName() + " = " + std::to_string(total_size) + ";\n";
        total_size++;
    }
    
    for(const auto& it : fPostComputeBlockInstructions->fCode) {
        std::cout << "post compute block >> " << it->getName() << std::endl;
    }
    
    
    if(poly) {
        *fOut << "// Two identifiers to know which noteoff goes to which voice \n";
        class_decl += "dsp.key_id = " + std::to_string(total_size) + ";\n";
        total_size++;
        class_decl += "dsp.gate = " + std::to_string(total_size) + ";\n";
        total_size++;
    }
    
    *fOut << "dsp.size = " << std::to_string(total_size + fNumOutputs) << ";\n";
    *fOut << class_decl;
    for(size_t i = 0; i < fNumOutputs; i++) {
        *fOut << "dsp.output" << i << " = " << ++total_size - 1 << "; \n";
    }
    
    *fOut << "\n";
    *fOut << "function create_instances() (\n"
    << "voice_idx = 0; \n"
    << "while(voice_idx < nvoices) (\n"
    << "obj = MEMORY.alloc_memory(dsp.size); \n";
    //<< "addresses[voice_idx] = obj;\n";
    generateDeclarations(&initializer);
    *fOut << "voice_idx += 1; \n" << ");\n);\n\n";
    
    
    *fOut << "function init_instances() (\n"
    << "voice_idx = 0; \n"
    << "while(voice_idx < nvoices) ( \n"
    << "obj = get_dsp(voice_idx); \n";
    generateClear(gGlobal->gJSFXVisitor);

    inlineSubcontainersFunCalls(fStaticInitInstructions)->accept(gGlobal->gJSFXVisitor);
    inlineSubcontainersFunCalls(fInitInstructions)->accept(gGlobal->gJSFXVisitor);

    *fOut << "voice_idx += 1; \n"
    << "); \n);\n";
    
    *fOut << "create_instances(); \n"
    << "init_instances(); \n\n";

    generateCompute(n);
    tab(n, *fOut);
    
    
    *fOut << "@postCompute\n";
    generatePostComputeBlock(gGlobal->gJSFXVisitor);
}

void JSFXCodeContainer::produceMetadata(int tabs)
{
    // We do not want to accumulate metadata from all hierachical levels, so the upper level only is kept
    for (const auto& i : gGlobal->gMetaDataSet) {
        if (i.first == tree("options")) {
            for (set<Tree>::iterator j = i.second.begin(); j != i.second.end(); j++) {
                std::stringstream ss;
                ss<<**j;
                std::string s;
                ss >> s;
                if (s.find("[midi:on]") != s.npos) {
                    midi = true;
                }
                if (s.find("[nvoices:")) {
                    std::regex r("\\[nvoices:([0-9]+)\\]");
                    for (std::sregex_iterator i = std::sregex_iterator(s.begin(), s.end(), r); i != std::sregex_iterator(); ++i) {
                        poly = true;
                        midi = true;
                        std::smatch m = *i;
                        nvoices = std::stoi(m[1].str());
                        if(nvoices < 1) 
                            throw(faustexception("nvoices must be >= to 1"));
                    }
                    gGlobal->gJSFXVisitor->poly = poly;
                    gGlobal->gJSFXVisitor->nvoices = nvoices;
                    
                    
                }
                *fOut << "desc: " << *(i.first) << " " << **j << "\n";
            }
        } else {
            // But the "author" meta data is accumulated, the upper level becomes the main author and sub-levels become
            // "contributor"
            for (set<Tree>::iterator j = i.second.begin(); j != i.second.end(); j++) {
                if (j == i.second.begin()) {
                    *fOut << "desc: " << *(i.first) << " " << **j << "\n";
                } else {
                    *fOut << "desc: " << "contributor" << " " << **j << "\n";
                }
            }
        }
    }
    tab(tabs, *fOut);
    *fOut << endl;
}

// Scalar
JSFXScalarCodeContainer::JSFXScalarCodeContainer(const string& name,
                                                int numInputs, int numOutputs,
                                                std::ostream* out,
                                                int sub_container_type)
    : JSFXCodeContainer(name, numInputs, numOutputs, out)
{
    fSubContainerType = sub_container_type;
}

// Given as an example of what a real backend would have to implement.
void JSFXScalarCodeContainer::generateCompute(int n)
{
    tab(n, *fOut);
    *fOut << "function control() (";
    tab(n, *fOut);
    // Empty functions are not allowed, so generate a dummy line
    *fOut << "dummy = 0;";
    tab(n, *fOut);
    *fOut << "voice_idx = 0;\n"
    << "while(voice_idx < nvoices) (\n"
    << "obj = get_dsp(voice_idx);\n";
    generateComputeBlock(gGlobal->gJSFXVisitor);
    *fOut << "voice_idx += 1;\n"
    << ");\n";
    *fOut << ");";
    tab(n, *fOut);
    
    tab(n, *fOut);
    *fOut << "function compute() (\n";
    tab(n, *fOut);
    *fOut << "voice_idx = 0;\n"
    << "while(voice_idx < nvoices) (\n"
    << "obj = get_dsp(voice_idx);\n";
    SimpleForLoopInst* loop = fCurLoop->generateSimpleScalarLoop(fFullCount);
    loop->accept(gGlobal->gJSFXVisitor);
    *fOut << "voice_idx += 1;\n"
    << ");\n";
    *fOut << ");";
    tab(n, *fOut);
    
    tab(n, *fOut);
    *fOut << "@block";
    tab(n, *fOut);
    gGlobal->gJSFXVisitor->generateMIDIInstructions();
    tab(n, *fOut);
    
    
    if(midi || poly) {
        // * TO DO >  Detect in midi Loop if something happened (notein, cc or anything to refresh control smoothly and only when events are fired)
        // Not implemented in midirecv yet
        *fOut << "(midi_event > 0) ? (control());\n";
    }
    
    tab(n, *fOut);
    *fOut << "@slider";
    tab(n, *fOut);
    *fOut << "control();";
    tab(n, *fOut);
    
    tab(n, *fOut);
    *fOut << "@sample";
    tab(n, *fOut);
    *fOut << "compute();";
    for(size_t i = 0; i < fNumOutputs; ++i)
    {
        tab(n, *fOut);
        *fOut << "spl" << i << " = ";
        for(size_t v = 0; v < nvoices; ++v) 
        {
            *fOut << "get_dsp(" << v << ")[dsp.output" << i << "]";
            if(v < (nvoices - 1))
                *fOut << " + ";
        }
        *fOut << ";";
    }
    tab(n, *fOut);
}
