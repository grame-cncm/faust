#line 1 "faustlexer.cpp"

#line 3 "faustlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer FAUST_create_buffer
#define yy_delete_buffer FAUST_delete_buffer
#define yy_scan_buffer FAUST_scan_buffer
#define yy_scan_string FAUST_scan_string
#define yy_scan_bytes FAUST_scan_bytes
#define yy_init_buffer FAUST_init_buffer
#define yy_flush_buffer FAUST_flush_buffer
#define yy_load_buffer_state FAUST_load_buffer_state
#define yy_switch_to_buffer FAUST_switch_to_buffer
#define yypush_buffer_state FAUSTpush_buffer_state
#define yypop_buffer_state FAUSTpop_buffer_state
#define yyensure_buffer_stack FAUSTensure_buffer_stack
#define yy_flex_debug FAUST_flex_debug
#define yyin FAUSTin
#define yyleng FAUSTleng
#define yylex FAUSTlex
#define yylineno FAUSTlineno
#define yyout FAUSTout
#define yyrestart FAUSTrestart
#define yytext FAUSTtext
#define yywrap FAUSTwrap
#define yyalloc FAUSTalloc
#define yyrealloc FAUSTrealloc
#define yyfree FAUSTfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define FAUST_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer FAUST_create_buffer
#endif

#ifdef yy_delete_buffer
#define FAUST_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer FAUST_delete_buffer
#endif

#ifdef yy_scan_buffer
#define FAUST_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer FAUST_scan_buffer
#endif

#ifdef yy_scan_string
#define FAUST_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string FAUST_scan_string
#endif

#ifdef yy_scan_bytes
#define FAUST_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes FAUST_scan_bytes
#endif

#ifdef yy_init_buffer
#define FAUST_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer FAUST_init_buffer
#endif

#ifdef yy_flush_buffer
#define FAUST_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer FAUST_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define FAUST_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state FAUST_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define FAUST_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer FAUST_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define FAUSTpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state FAUSTpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define FAUSTpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state FAUSTpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define FAUSTensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack FAUSTensure_buffer_stack
#endif

#ifdef yylex
#define FAUSTlex_ALREADY_DEFINED
#else
#define yylex FAUSTlex
#endif

#ifdef yyrestart
#define FAUSTrestart_ALREADY_DEFINED
#else
#define yyrestart FAUSTrestart
#endif

#ifdef yylex_init
#define FAUSTlex_init_ALREADY_DEFINED
#else
#define yylex_init FAUSTlex_init
#endif

#ifdef yylex_init_extra
#define FAUSTlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra FAUSTlex_init_extra
#endif

#ifdef yylex_destroy
#define FAUSTlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy FAUSTlex_destroy
#endif

#ifdef yyget_debug
#define FAUSTget_debug_ALREADY_DEFINED
#else
#define yyget_debug FAUSTget_debug
#endif

#ifdef yyset_debug
#define FAUSTset_debug_ALREADY_DEFINED
#else
#define yyset_debug FAUSTset_debug
#endif

#ifdef yyget_extra
#define FAUSTget_extra_ALREADY_DEFINED
#else
#define yyget_extra FAUSTget_extra
#endif

#ifdef yyset_extra
#define FAUSTset_extra_ALREADY_DEFINED
#else
#define yyset_extra FAUSTset_extra
#endif

#ifdef yyget_in
#define FAUSTget_in_ALREADY_DEFINED
#else
#define yyget_in FAUSTget_in
#endif

#ifdef yyset_in
#define FAUSTset_in_ALREADY_DEFINED
#else
#define yyset_in FAUSTset_in
#endif

#ifdef yyget_out
#define FAUSTget_out_ALREADY_DEFINED
#else
#define yyget_out FAUSTget_out
#endif

#ifdef yyset_out
#define FAUSTset_out_ALREADY_DEFINED
#else
#define yyset_out FAUSTset_out
#endif

#ifdef yyget_leng
#define FAUSTget_leng_ALREADY_DEFINED
#else
#define yyget_leng FAUSTget_leng
#endif

#ifdef yyget_text
#define FAUSTget_text_ALREADY_DEFINED
#else
#define yyget_text FAUSTget_text
#endif

#ifdef yyget_lineno
#define FAUSTget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno FAUSTget_lineno
#endif

#ifdef yyset_lineno
#define FAUSTset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno FAUSTset_lineno
#endif

#ifdef yywrap
#define FAUSTwrap_ALREADY_DEFINED
#else
#define yywrap FAUSTwrap
#endif

#ifdef yyalloc
#define FAUSTalloc_ALREADY_DEFINED
#else
#define yyalloc FAUSTalloc
#endif

#ifdef yyrealloc
#define FAUSTrealloc_ALREADY_DEFINED
#else
#define yyrealloc FAUSTrealloc
#endif

#ifdef yyfree
#define FAUSTfree_ALREADY_DEFINED
#else
#define yyfree FAUSTfree
#endif

#ifdef yytext
#define FAUSTtext_ALREADY_DEFINED
#else
#define yytext FAUSTtext
#endif

#ifdef yyleng
#define FAUSTleng_ALREADY_DEFINED
#else
#define yyleng FAUSTleng
#endif

#ifdef yyin
#define FAUSTin_ALREADY_DEFINED
#else
#define yyin FAUSTin
#endif

#ifdef yyout
#define FAUSTout_ALREADY_DEFINED
#else
#define yyout FAUSTout
#endif

#ifdef yy_flex_debug
#define FAUST_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug FAUST_flex_debug
#endif

#ifdef yylineno
#define FAUSTlineno_ALREADY_DEFINED
#else
#define yylineno FAUSTlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 162
#define YY_END_OF_BUFFER 163
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[613] =
    {   0,
        0,    0,    2,    2,    0,    0,    0,    0,  163,  161,
      160,  160,   66,  161,   77,   78,   51,   54,   53,   69,
       70,   49,   47,   42,   48,   76,   50,   29,   41,   67,
       59,   68,   61,   52,  155,   73,   75,   74,  117,   65,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       71,   55,   72,   46,    2,    5,    6,    3,    9,   10,
        9,  162,   27,  162,   26,  162,  162,  162,  162,  160,
       64,    0,  156,   44,  146,   37,    1,  159,   31,   29,
        0,   30,    0,   45,    0,    0,   43,   57,   60,  158,

        0,    0,   63,  145,   62,   58,  155,    0,  155,    0,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,    2,    4,    3,
        3,    7,    0,    0,    0,    0,    0,    0,   28,    0,
        0,    0,    0,    0,    0,   38,  159,   31,    0,   32,
        0,   35,  154,    0,    0,    0,    0,    0,    0,    0,

      120,  155,   86,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  111,  155,  155,  155,  155,  114,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,   84,  155,  155,  115,  155,  122,   82,  121,  155,
      155,  130,  118,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  129,  112,  155,  155,  131,  113,  155,  155,
      155,  155,  155,  155,  155,   56,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   39,    0,
       33,   36,  154,    0,  157,    0,    0,    0,    0,  155,
        0,  107,  108,  155,  109,  155,  155,  144,  126,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  123,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  132,  155,  155,
      155,  127,  155,  155,  155,  155,  155,  155,  119,  155,
      155,  155,  155,  155,  155,   79,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   21,   40,   34,    0,
        0,    0,    0,    0,  155,  155,  110,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,   85,
      125,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      116,  155,  155,  155,  155,  155,  155,  155,  155,  128,

      140,  155,  155,  155,  155,  155,  155,  155,  155,  155,
       81,    0,    0,    0,    0,    0,    0,    0,    0,   22,
        0,  154,    0,    0,    0,    0,    8,  155,  105,   94,
      155,  155,  155,  155,  155,  141,  155,  155,  155,  155,
      155,  155,  100,  155,  155,  135,  133,   80,  155,  148,
      106,   98,  155,   83,  155,  155,  155,  155,  155,  155,
      155,  101,  155,   99,  155,  155,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  154,    0,    0,    0,  155,
      155,  155,  142,  143,  155,  155,  155,  155,  155,  155,
      155,  149,   97,  137,  134,  155,   87,  155,   88,   89,

       90,  155,  155,  155,   96,  155,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  155,   95,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  139,    0,    0,   13,    0,    0,    0,
        0,    0,   24,    0,    0,    0,  155,  136,  155,  155,
       92,   91,  155,   93,  103,  155,  124,  155,  104,  102,
       16,    0,    0,    0,   11,    0,    0,   17,    0,    0,
      155,  155,  155,  155,  155,  155,   14,   18,   12,    0,
        0,   15,   19,  155,  155,  138,  155,  155,  155,    0,
       25,  147,  155,  155,  155,  155,   23,  155,  155,  152,

      155,  155,  155,  155,  151,  155,  150,  155,  155,  155,
      153,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   25,   25,   25,   25,   25,   26,   27,   28,
       29,   30,    1,   31,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   32,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   32,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[66] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    1,    4,    4,
        5,    5,    5,    5,    5,    6,    1,    4,    4,    4,
        1,    7,    1,    1,    1,    1,    8,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[630] =
    {   0,
        0,    0,   63,   65,   67,   68,   65,   68, 1169, 1170,
       79,   87, 1139, 1160, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1136, 1170, 1135,   77,   59,  104,   47, 1170,
      111,   57,   74, 1170, 1138, 1170, 1170, 1170, 1170, 1126,
       93,   50,  112,   94,   84,  116,  127,  126,  135,  141,
      109,  132,  142,  143,  162,  159,  146,  176,   67,  144,
     1170, 1170, 1170, 1170,    0, 1158, 1170,  177, 1170, 1170,
      186, 1170, 1170, 1131, 1170,   76, 1122, 1118, 1104,  220,
     1170, 1150, 1170, 1170, 1170,  216, 1170,    0,  221,  228,
      244, 1170, 1119, 1170,    0,  177, 1170, 1170, 1170, 1170,

      253, 1114, 1170, 1170, 1170, 1170, 1128, 1127, 1126, 1114,
      152,  203,  172,  229,  248,  222,  206,  165,  188,  250,
      251,  230,  254,  259,  262,  263,  264,  267,  268,  269,
      270,  271,  173,  275,  276,  277,  280,  283,  272,  284,
      288,  289,  291,  295,  300,  301,  304,  309,  306,  308,
      314,  312,  316,  317,  323,  319,  324,  322,  327,  326,
      330,  332,  333,  335,  337,  340,  341,    0, 1170,  367,
      368, 1170, 1101, 1103, 1095, 1101, 1104, 1094, 1170, 1092,
     1088, 1094, 1090, 1083,  376, 1170,    0,  381,  391, 1170,
      396,  404, 1113, 1101, 1107, 1090, 1082, 1092, 1082, 1095,

     1105,  382, 1104,  384,  348,  385,  404,  396,  349,  405,
      406,  407,  410, 1103,  412,  415,  417,  418, 1102,  413,
      419,  423,  424,  168,  414,  422,  429,  425,  431,  432,
      435, 1101,  441,  445,  363,  446, 1100, 1099,  448,  447,
      452, 1098, 1097,  453,  456,  460,  455,  464,  458,  459,
      468,  463, 1096,  472,  461,  465, 1095, 1094,  481,  482,
      484,  487,  486,  491,  492, 1093, 1077, 1079, 1059, 1060,
     1058, 1057, 1070, 1055, 1055, 1069, 1066,  501,  517,  525,
      530, 1170, 1081, 1080, 1170, 1067, 1047, 1047, 1062, 1075,
     1063, 1073, 1072,  503,  504,  494,  493, 1071, 1070,  517,

      505,  532,  533,  535,  536,  537,  539,  540,  541,  542,
      543, 1069,  544,  548,  546,  551,  555,  550,  549,  553,
      561,  580,  552,  559,  563,  562,  574, 1068,  576,  582,
      583, 1067,  584,  585,  587,  592,  586,  589, 1066,  588,
      596,  597,  598,  605,  607, 1065, 1039, 1045, 1050, 1031,
     1048, 1039, 1034, 1029, 1040, 1025, 1170, 1170, 1170, 1043,
     1035, 1040, 1039, 1046, 1049,  609, 1048,  610,  611,  612,
      616,  617,  615,  618,  620,  621,  624,  626,  627, 1047,
     1046,  632,  630,  631,  633,  645,  637,  641,  638,  647,
     1045,  648,  649,  650,  651,  655,  659,  660,  664, 1044,

     1043,  668,  663,  676,  666,  665,  669,  672,  680,  674,
     1042, 1027, 1012, 1009, 1018, 1022, 1022, 1020, 1014, 1170,
     1021, 1032, 1020, 1002,  999, 1013, 1170,  671, 1027, 1026,
      677,  694,  673,  700,  686, 1025,  701,  703,  704,  705,
      706,  708, 1024,  707,  711, 1023, 1022, 1021,  709, 1020,
     1019, 1018,  713, 1017,  717,  718,  714,  722,  743,  721,
      726, 1016,  723, 1015,  727,  728, 1010, 1001,  992,  987,
      998,  993,  992,  994,  988, 1005,  992,  983,  990,  732,
      731,  736, 1001, 1000,  745,  748,  750,  751,  749,  753,
      752,  999,  998,  997,  996,  754,  995,  761,  994,  993,

      992,  758,  759,  762,  991,  764, 1170,  967,  964,  970,
      957,  788,  962,  954,  955,  960,  957,  951,  763,  980,
      766,  779,  783,  770,  780,  784,  785,  772,  789,  790,
      797,  798,  792,  979,  974,  953, 1170,  964,  981,  970,
      959,  942, 1170,  967,  946,  957,  793,  968,  802,  803,
      943,  935,  805,  928,  927,  807,  917,  806,  882,  881,
     1170,  876,  875,  874, 1170,  857,  859, 1170,  870,  869,
      810,  812,  815,  821,  819,  822, 1170, 1170, 1170,  855,
      855, 1170, 1170,  823,  824,  867,  826,  830,  828,  837,
     1170,  862,  829,  834,  837,  831, 1170,  833,  846,  358,

      838,  840,  848,  841,  231,  843,  129,  856,  844,  859,
       90, 1170,  909,  917,  925,  933,  938,  941,  943,  951,
      959,  967,  969,  108,  973,  975,  979,  981,  985
    } ;

static const flex_int16_t yy_def[630] =
    {   0,
      612,    1,  613,  613,  614,  614,  615,  615,  612,  612,
      612,  612,  612,  616,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      617,  612,  612,  612,  618,  612,  612,  612,  612,  619,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      612,  612,  612,  612,  620,  612,  612,  621,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  616,  612,  612,  612,  612,  612,  622,  612,  612,
      612,  612,  623,  612,  624,  612,  612,  612,  612,  612,

      617,  101,  612,  612,  612,  612,  618,  612,  618,  619,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  620,  612,  621,
      621,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  622,  612,  612,  612,
      612,  612,  625,  623,  612,  612,  612,  612,  101,  626,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  625,  612,  612,  612,  612,  612,  101,  627,
      626,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  628,
      612,  612,  612,  101,  627,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  629,  628,  612,  612,  612,  612,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  629,  612,  612,  612,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      618,  618,  618,  618,  618,  618,  612,  612,  612,  612,
      612,  612,  612,  618,  618,  618,  618,  618,  618,  612,
      612,  618,  618,  618,  618,  618,  612,  618,  618,  618,

      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,    0,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612
    } ;

static const flex_int16_t yy_nxt[1236] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   35,   47,   48,   35,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   35,   58,   59,   60,
       35,   61,   62,   63,   64,   66,   67,   66,   67,   70,
       70,   73,   93,   87,   73,  108,   94,   68,   88,   68,
       80,   80,   80,   80,   74,  103,  104,   74,   80,   80,
       80,   80,  108,   75,   71,   71,   75,   86,   86,   86,

       86,   86,  105,  106,  164,   76,  116,   77,   76,  108,
       77,  165,  166,   78,  195,  108,   78,  180,  108,  108,
       79,  181,   89,   79,   90,   90,   90,   90,   90,   95,
       96,  111,  112,  123,  108,  121,   97,  108,   98,   99,
      100,  108,  113,  124,  122,   91,   92,  114,  115,  117,
      143,  108,  108,  118,  108,  125,  119,  108,  126,  102,
      108,  127,  120,  128,  129,  131,  108,  108,  108,  108,
      132,  108,  133,  130,  135,  136,  137,  108,  140,  145,
      138,  134,  141,  159,  108,  139,  142,  108,  144,  160,
      108,  171,  146,  108,  167,  147,  172,  108,  108,  148,

      154,  108,  149,  150,  155,  173,  201,  151,  312,  156,
      210,  157,  152,  108,  161,  158,  228,  196,  197,  162,
      153,   80,   80,   80,   80,  198,  174,  175,  108,  211,
      163,  108,  203,  176,  177,  178,   86,   86,   86,   86,
       86,  188,  188,  188,  188,  188,   89,  108,   90,   90,
       90,   90,   90,  202,  108,  108,  108,  185,  186,  191,
      209,  191,  189,  190,  192,  192,  192,  192,  192,   91,
       92,   95,  612,  108,  204,  108,  108,  208,  612,  108,
      612,  612,  100,  205,  108,  206,  216,  108,  108,  108,
      215,  217,  108,  108,  108,  108,  108,  108,  212,  213,

      108,  108,  108,  207,  214,  108,  225,  226,  108,  108,
      219,  218,  220,  108,  108,  235,  108,  223,  224,  221,
      108,  234,  229,  222,  227,  108,  108,  230,  231,  108,
      236,  108,  232,  108,  108,  233,  238,  108,  239,  108,
      240,  108,  108,  237,  108,  244,  246,  108,  108,  108,
      241,  108,  108,  242,  245,  108,  248,  108,  108,  243,
      108,  247,  108,  249,  252,  108,  108,  260,  250,  253,
      257,  251,  254,  108,  108,  255,  258,  256,  264,  259,
      262,  612,  171,  108,  322,  261,  612,  172,  108,  294,
      298,  278,  263,  278,  266,  265,  279,  279,  279,  279,

      279,  188,  188,  188,  188,  188,  280,  108,  280,  108,
      108,  281,  281,  281,  281,  281,  192,  192,  192,  192,
      192,  108,  189,  190,  192,  192,  192,  192,  192,  108,
      108,  108,  108,  293,  295,  108,  292,  108,  108,  108,
      108,  296,  108,  108,  108,  300,  282,  108,  108,  108,
      108,  297,  299,  304,  108,  305,  108,  108,  301,  303,
      108,  310,  307,  306,  309,  302,  108,  313,  308,  316,
      108,  108,  108,  108,  311,  314,  317,  108,  108,  315,
      108,  108,  318,  108,  108,  108,  108,  323,  108,  108,
      108,  319,  330,  108,  320,  327,  328,  108,  321,  324,

      329,  331,  325,  326,  336,  335,  108,  108,  333,  108,
      338,  108,  108,  332,  334,  337,  108,  108,  108,  108,
      339,  279,  279,  279,  279,  279,  367,  344,  108,  108,
      108,  340,  343,  368,  342,  341,  346,  279,  279,  279,
      279,  279,  108,  369,  345,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  371,  366,  108,  108,  358,
      108,  108,  108,  370,  108,  108,  108,  108,  108,  108,
      373,  108,  359,  108,  108,  108,  108,  108,  108,  378,
      108,  379,  374,  375,  108,  372,  108,  108,  108,  382,
      376,  383,  385,  377,  389,  386,  381,  380,  390,  108,

      391,  108,  384,  387,  388,  108,  392,  108,  108,  108,
      108,  108,  108,  108,  108,  393,  394,  108,  395,  396,
      398,  108,  108,  108,  400,  402,  401,  397,  399,  405,
      108,  403,  108,  404,  108,  108,  108,  108,  409,  407,
      108,  108,  108,  108,  406,  108,  108,  410,  411,  108,
      431,  108,  108,  408,  429,  108,  108,  108,  108,  435,
      430,  436,  108,  108,  428,  432,  108,  433,  434,  441,
      108,  437,  108,  108,  108,  108,  108,  448,  440,  438,
      108,  439,  443,  442,  108,  108,  445,  444,  108,  108,
      108,  108,  446,  108,  108,  447,  108,  108,  108,  108,

      449,  108,  108,  450,  451,  108,  453,  456,  461,  480,
      452,  108,  455,  457,  454,  458,  462,  460,  459,  108,
      483,  465,  463,  464,  466,  108,  108,  481,  108,  108,
      108,  108,  108,  108,  108,  482,  108,  485,  108,  108,
      487,  484,  108,  108,  490,  491,  108,  108,  108,  488,
      486,  108,  108,  108,  498,  489,  108,  108,  496,  497,
      504,  108,  492,  499,  493,  500,  501,  495,  108,  494,
      108,  503,  502,  108,  108,  108,  108,  108,  108,  108,
      505,  506,  519,  108,  108,  521,  108,  108,  108,  108,
      520,  108,  539,  529,  526,  108,  523,  108,  522,  524,

      527,  525,  530,  528,  108,  108,  532,  540,  108,  108,
      108,  531,  534,  533,  108,  108,  555,  108,  108,  547,
      549,  548,  108,  108,  550,  551,  554,  108,  108,  552,
      108,  108,  108,  553,  556,  108,  560,  108,  558,  559,
      108,  572,  571,  557,  108,  576,  108,  108,  108,  108,
      584,  108,  573,  108,  108,  108,  108,  585,  108,  108,
      574,  575,  108,  108,  588,  108,  108,  589,  108,  108,
      586,  108,  587,  108,  598,  599,  601,  592,  593,  594,
      595,  108,  596,  602,  108,  603,  600,  108,  604,  605,
      607,  597,  108,  606,  610,  591,  590,  608,  583,  582,

      581,  609,  580,  579,  578,  577,  108,  108,  611,   65,
       65,   65,   65,   65,   65,   65,   65,   69,   69,   69,
       69,   69,   69,   69,   69,   72,   72,   72,   72,   72,
       72,   72,   72,   82,   82,   82,   82,   82,   82,   82,
       82,  101,  108,  101,  101,  107,  107,  107,  107,  109,
      109,  168,  108,  108,  168,  168,  168,  168,  168,  170,
      108,  170,  170,  170,  170,  170,  170,  187,  108,  187,
      187,  187,  187,  187,  187,  193,  193,  283,  283,  283,
      283,  290,  290,  365,  365,  365,  365,  422,  422,  476,
      476,  476,  476,  108,  570,  569,  568,  567,  566,  565,

      564,  563,  562,  561,  108,  108,  546,  545,  544,  543,
      542,  541,  538,  537,  536,  535,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  518,  517,  516,
      284,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  479,  478,  477,  423,  284,  475,  474,
      473,  472,  471,  470,  469,  468,  467,  108,  108,  108,
      108,  108,  108,  108,  108,  427,  426,  425,  424,  423,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  291,

      108,  364,  363,  362,  361,  360,  284,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  291,  289,  288,  287,  286,  285,  194,  284,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      110,  108,  200,  108,  199,  194,   83,  184,  183,  182,
      179,  169,  110,  108,   85,   84,   83,   81,  612,    9,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612
    } ;

static const flex_int16_t yy_chk[1236] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    5,
        6,    7,   29,   27,    8,   42,   29,    3,   27,    4,
       11,   11,   11,   11,    7,   32,   32,    8,   12,   12,
       12,   12,   59,    7,    5,    6,    8,   26,   26,   26,

       26,   26,   33,   33,   59,    7,   42,    7,    8,   45,
        8,   59,   59,    7,  624,  611,    8,   76,   41,   44,
        7,   76,   28,    8,   28,   28,   28,   28,   28,   31,
       31,   41,   41,   45,   51,   44,   31,   43,   31,   31,
       31,   46,   41,   45,   44,   28,   28,   41,   41,   43,
       51,   48,   47,   43,  607,   46,   43,   52,   46,   31,
       49,   46,   43,   46,   46,   47,   50,   53,   54,   60,
       47,   57,   47,   46,   48,   48,   49,  111,   50,   53,
       49,   47,   50,   57,   56,   49,   50,   55,   52,   57,
      118,   68,   53,  224,   60,   53,   68,  113,  133,   54,

       56,   58,   55,   55,   56,   71,  111,   55,  224,   56,
      118,   56,   55,  119,   58,   56,  133,   96,   96,   58,
       55,   80,   80,   80,   80,   96,   71,   71,  112,  119,
       58,  117,  113,   71,   71,   71,   86,   86,   86,   86,
       86,   89,   89,   89,   89,   89,   90,  116,   90,   90,
       90,   90,   90,  112,  114,  122,  605,   86,   86,   91,
      117,   91,   89,   89,   91,   91,   91,   91,   91,   90,
       90,  101,  101,  115,  114,  120,  121,  116,  101,  123,
      101,  101,  101,  114,  124,  115,  122,  125,  126,  127,
      121,  123,  128,  129,  130,  131,  132,  139,  120,  120,

      134,  135,  136,  115,  120,  137,  130,  131,  138,  140,
      124,  123,  125,  141,  142,  139,  143,  128,  129,  126,
      144,  138,  134,  127,  132,  145,  146,  135,  136,  147,
      139,  149,  136,  150,  148,  137,  141,  152,  142,  151,
      143,  153,  154,  140,  156,  147,  148,  158,  155,  157,
      144,  160,  159,  145,  147,  161,  150,  162,  163,  146,
      164,  149,  165,  151,  154,  166,  167,  161,  152,  154,
      158,  153,  155,  205,  209,  156,  159,  157,  165,  160,
      163,  170,  171,  600,  235,  162,  170,  171,  235,  205,
      209,  185,  164,  185,  167,  166,  185,  185,  185,  185,

      185,  188,  188,  188,  188,  188,  189,  202,  189,  204,
      206,  189,  189,  189,  189,  189,  191,  191,  191,  191,
      191,  208,  188,  188,  192,  192,  192,  192,  192,  207,
      210,  211,  212,  204,  206,  213,  202,  215,  220,  225,
      216,  207,  217,  218,  221,  211,  192,  226,  222,  223,
      228,  208,  210,  216,  227,  217,  229,  230,  212,  215,
      231,  223,  220,  218,  222,  213,  233,  225,  221,  228,
      234,  236,  240,  239,  223,  226,  229,  241,  244,  227,
      247,  245,  230,  249,  250,  246,  255,  236,  252,  248,
      256,  231,  247,  251,  233,  244,  245,  254,  234,  239,

      246,  248,  240,  241,  252,  251,  259,  260,  250,  261,
      255,  263,  262,  249,  250,  254,  264,  265,  297,  296,
      256,  278,  278,  278,  278,  278,  295,  263,  294,  295,
      301,  259,  262,  296,  261,  260,  265,  279,  279,  279,
      279,  279,  300,  297,  264,  280,  280,  280,  280,  280,
      281,  281,  281,  281,  281,  301,  294,  302,  303,  279,
      304,  305,  306,  300,  307,  308,  309,  310,  311,  313,
      303,  315,  281,  314,  319,  318,  316,  323,  320,  308,
      317,  309,  304,  305,  324,  302,  321,  326,  325,  313,
      306,  314,  316,  307,  320,  317,  311,  310,  321,  327,

      322,  329,  315,  318,  319,  322,  323,  330,  331,  333,
      334,  337,  335,  340,  338,  324,  325,  336,  326,  327,
      330,  341,  342,  343,  333,  335,  334,  329,  331,  338,
      344,  336,  345,  337,  366,  368,  369,  370,  343,  341,
      373,  371,  372,  374,  340,  375,  376,  344,  345,  377,
      370,  378,  379,  342,  368,  383,  384,  382,  385,  374,
      369,  375,  387,  389,  366,  371,  388,  372,  373,  382,
      386,  376,  390,  392,  393,  394,  395,  389,  379,  377,
      396,  378,  384,  383,  397,  398,  386,  385,  403,  399,
      406,  405,  387,  402,  407,  388,  428,  408,  433,  410,

      390,  404,  431,  392,  393,  409,  395,  398,  405,  428,
      394,  435,  397,  399,  396,  402,  406,  404,  403,  432,
      433,  409,  407,  408,  410,  434,  437,  431,  438,  439,
      440,  441,  444,  442,  449,  432,  445,  435,  453,  457,
      438,  434,  455,  456,  441,  442,  460,  458,  463,  439,
      437,  461,  465,  466,  457,  440,  481,  480,  455,  456,
      463,  482,  444,  458,  445,  459,  459,  453,  459,  449,
      485,  461,  460,  486,  489,  487,  488,  491,  490,  496,
      465,  466,  480,  502,  503,  482,  498,  504,  519,  506,
      481,  521,  512,  496,  489,  524,  486,  528,  485,  487,

      490,  488,  498,  491,  522,  525,  503,  512,  523,  526,
      527,  502,  506,  504,  529,  530,  528,  533,  547,  519,
      522,  521,  531,  532,  523,  524,  527,  549,  550,  525,
      553,  558,  556,  526,  529,  571,  533,  572,  531,  532,
      573,  549,  547,  530,  575,  558,  574,  576,  584,  585,
      571,  587,  550,  589,  593,  588,  596,  572,  598,  594,
      553,  556,  595,  601,  575,  602,  604,  576,  606,  609,
      573,  599,  574,  603,  593,  594,  596,  584,  585,  587,
      588,  608,  589,  598,  610,  599,  595,  592,  601,  602,
      604,  590,  586,  603,  609,  581,  580,  606,  570,  569,

      567,  608,  566,  564,  563,  562,  560,  559,  610,  613,
      613,  613,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  614,  614,  614,  615,  615,  615,  615,  615,
      615,  615,  615,  616,  616,  616,  616,  616,  616,  616,
      616,  617,  557,  617,  617,  618,  618,  618,  618,  619,
      619,  620,  555,  554,  620,  620,  620,  620,  620,  621,
      552,  621,  621,  621,  621,  621,  621,  622,  551,  622,
      622,  622,  622,  622,  622,  623,  623,  625,  625,  625,
      625,  626,  626,  627,  627,  627,  627,  628,  628,  629,
      629,  629,  629,  548,  546,  545,  544,  542,  541,  540,

      539,  538,  536,  535,  534,  520,  518,  517,  516,  515,
      514,  513,  511,  510,  509,  508,  505,  501,  500,  499,
      497,  495,  494,  493,  492,  484,  483,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      464,  462,  454,  452,  451,  450,  448,  447,  446,  443,
      436,  430,  429,  426,  425,  424,  423,  422,  421,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  401,  400,
      391,  381,  380,  367,  365,  364,  363,  362,  361,  360,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  339,  332,  328,  312,  299,  298,  293,  292,  291,

      290,  289,  288,  287,  286,  284,  283,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  258,
      257,  253,  243,  242,  238,  237,  232,  219,  214,  203,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  184,
      183,  182,  181,  180,  178,  177,  176,  175,  174,  173,
      110,  109,  108,  107,  102,   93,   82,   79,   78,   77,
       74,   66,   40,   35,   25,   23,   14,   13,    9,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,

      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[163] =
    {   0,
0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "faustlexer.l"
/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4 -*- */
/* Scanner for the Faust language */
#line 6 "faustlexer.l"
#include "tree.hh"
#include "faustparser.hpp"
#if defined(WIN32)
#if !defined(__MINGW32__) && !defined(__MSYS__)
// We don't want to include compatibility.hh here, since it pulls in whole lot
// of unneeded stuff which breaks other things, so here's some stuff to make
// MSVC happy.
#include <io.h>
#define isatty _isatty
#define fileno _fileno
#define YY_NO_UNISTD_H
#endif
#else
#include "compatibility.hh"
#include "errormsg.hh"

#define YY_FATAL_ERROR lexerror
#endif

#define register        // suppress the deprecated 'register' warning

#line 1236 "faustlexer.cpp"

#line 1238 "faustlexer.cpp"

#define INITIAL 0
#define comment 1
#define doc 2
#define lst 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 43 "faustlexer.l"


#line 1459 "faustlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 613 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1170 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "faustlexer.l"
BEGIN(comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "faustlexer.l"
/* eat anything that's not a '*'         */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "faustlexer.l"
/* eat up '*'s not followed by '/'s     */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 48 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 49 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "faustlexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "faustlexer.l"
{ BEGIN(doc); return BDOC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "faustlexer.l"
return DOCCHAR; /* char by char, may be slow ?? */
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 55 "faustlexer.l"
return DOCCHAR; /* keep newline chars */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "faustlexer.l"
{ BEGIN(lst);        return BLST; } /* autoclosing tag */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "faustlexer.l"
{ BEGIN(INITIAL);     return BEQN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "faustlexer.l"
{ BEGIN(doc);         return EEQN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "faustlexer.l"
{ BEGIN(INITIAL);     return BDGM; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "faustlexer.l"
{ BEGIN(doc);         return EDGM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "faustlexer.l"
{ BEGIN(INITIAL);     return BMETADATA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "faustlexer.l"
{ BEGIN(doc);         return EMETADATA; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "faustlexer.l"
{ BEGIN(INITIAL);     return EDOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "faustlexer.l"
return LSTTRUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "faustlexer.l"
return LSTFALSE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "faustlexer.l"
return LSTDEPENDENCIES;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "faustlexer.l"
return LSTMDOCTAGS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "faustlexer.l"
return LSTDISTRIBUTED;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "faustlexer.l"
return LSTEQ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "faustlexer.l"
return LSTQ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 74 "faustlexer.l"
{ BEGIN(doc);     return ELST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 77 "faustlexer.l"
return INT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 91 "faustlexer.l"
return SEQ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 92 "faustlexer.l"
return PAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 93 "faustlexer.l"
return SPLIT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 94 "faustlexer.l"
return MIX;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 95 "faustlexer.l"
return MIX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 96 "faustlexer.l"
return REC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "faustlexer.l"
return ADD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "faustlexer.l"
return SUB;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "faustlexer.l"
return MUL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "faustlexer.l"
return DIV;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "faustlexer.l"
return MOD;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "faustlexer.l"
return FDELAY;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "faustlexer.l"
return DELAY1;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "faustlexer.l"
return AND;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "faustlexer.l"
return OR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "faustlexer.l"
return XOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "faustlexer.l"
return LSH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "faustlexer.l"
return RSH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "faustlexer.l"
return LT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "faustlexer.l"
return LE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "faustlexer.l"
return GT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "faustlexer.l"
return GE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "faustlexer.l"
return EQ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "faustlexer.l"
return NE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "faustlexer.l"
return WIRE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "faustlexer.l"
return CUT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "faustlexer.l"
return ENDDEF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "faustlexer.l"
return DEF;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "faustlexer.l"
return LPAR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "faustlexer.l"
return RPAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "faustlexer.l"
return LBRAQ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "faustlexer.l"
return RBRAQ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "faustlexer.l"
return LCROC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "faustlexer.l"
return RCROC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "faustlexer.l"
return LAMBDA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "faustlexer.l"
return DOT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "faustlexer.l"
return HASH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "faustlexer.l"
return CASH;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "faustlexer.l"
return WITH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "faustlexer.l"
return LETREC;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "faustlexer.l"
return WHERE;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 140 "faustlexer.l"
return MEM;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 141 "faustlexer.l"
return PREFIX;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "faustlexer.l"
return INTCAST;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "faustlexer.l"
return FLOATCAST;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "faustlexer.l"
return NOTYPECAST;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "faustlexer.l"
return RDTBL;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "faustlexer.l"
return RWTBL;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "faustlexer.l"
return SELECT2;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "faustlexer.l"
return SELECT3;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "faustlexer.l"
return FFUNCTION;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 154 "faustlexer.l"
return FCONSTANT;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 155 "faustlexer.l"
return FVARIABLE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 157 "faustlexer.l"
return BUTTON;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 158 "faustlexer.l"
return CHECKBOX;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 159 "faustlexer.l"
return VSLIDER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 160 "faustlexer.l"
return HSLIDER;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 161 "faustlexer.l"
return NENTRY;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 162 "faustlexer.l"
return VGROUP;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "faustlexer.l"
return HGROUP;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "faustlexer.l"
return TGROUP;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "faustlexer.l"
return VBARGRAPH;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 166 "faustlexer.l"
return HBARGRAPH;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "faustlexer.l"
return SOUNDFILE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 169 "faustlexer.l"
return ATTACH;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 170 "faustlexer.l"
return MODULATE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "faustlexer.l"
return ACOS;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 173 "faustlexer.l"
return ASIN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 174 "faustlexer.l"
return ATAN;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 175 "faustlexer.l"
return ATAN2;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 177 "faustlexer.l"
return COS;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 178 "faustlexer.l"
return SIN;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 179 "faustlexer.l"
return TAN;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 181 "faustlexer.l"
return EXP;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 182 "faustlexer.l"
return LOG;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 183 "faustlexer.l"
return LOG10;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 184 "faustlexer.l"
return POWOP;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 185 "faustlexer.l"
return POWFUN;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 186 "faustlexer.l"
return SQRT;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 188 "faustlexer.l"
return ABS;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 189 "faustlexer.l"
return MIN;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 190 "faustlexer.l"
return MAX;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 192 "faustlexer.l"
return FMOD;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 193 "faustlexer.l"
return REMAINDER;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 195 "faustlexer.l"
return FLOOR;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 196 "faustlexer.l"
return CEIL;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 197 "faustlexer.l"
return RINT;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 198 "faustlexer.l"
return ROUND;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 200 "faustlexer.l"
return ISEQ;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 201 "faustlexer.l"
return IPAR;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 202 "faustlexer.l"
return ISUM;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 203 "faustlexer.l"
return IPROD;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 205 "faustlexer.l"
return INPUTS;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 206 "faustlexer.l"
return OUTPUTS;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 208 "faustlexer.l"
return IMPORT;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 209 "faustlexer.l"
return COMPONENT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 210 "faustlexer.l"
return LIBRARY;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 211 "faustlexer.l"
return ENVIRONMENT;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 213 "faustlexer.l"
return WAVEFORM;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 214 "faustlexer.l"
return ROUTE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 215 "faustlexer.l"
return ENABLE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 216 "faustlexer.l"
return CONTROL;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 218 "faustlexer.l"
return DECLARE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 220 "faustlexer.l"
return CASE;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 221 "faustlexer.l"
return ARROW;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 222 "faustlexer.l"
return LAPPLY;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 224 "faustlexer.l"
return ASSERTBOUNDS;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 225 "faustlexer.l"
return LOWEST;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 226 "faustlexer.l"
return HIGHEST;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 228 "faustlexer.l"
return FLOATMODE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 229 "faustlexer.l"
return DOUBLEMODE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 230 "faustlexer.l"
return QUADMODE;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 231 "faustlexer.l"
return FIXEDPOINTMODE;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "faustlexer.l"
return IDENT;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 235 "faustlexer.l"
return IDENT;
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 237 "faustlexer.l"
return STRING;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 239 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 240 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 243 "faustlexer.l"
/* eat up one-line comments */
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 245 "faustlexer.l"
/* eat up whitespace */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(doc):
case YY_STATE_EOF(lst):
#line 247 "faustlexer.l"
yyterminate();
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 249 "faustlexer.l"
printf("extra text is : %s\n", yytext); return EXTRA;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 252 "faustlexer.l"
ECHO;
	YY_BREAK
#line 2348 "faustlexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 613 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 613 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 612);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 252 "faustlexer.l"

int yywrap() { return 1; }

