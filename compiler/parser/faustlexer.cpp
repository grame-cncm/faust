#line 1 "faustlexer.cpp"

#line 3 "faustlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[565] =
    {   0,
        0,    0,    2,    2,    0,    0,    0,    0,  153,  151,
      150,  150,   66,  151,   51,   54,   53,   69,   70,   49,
       47,   42,   48,   76,   50,   29,   41,   67,   59,   68,
       61,   52,  145,   73,   75,   74,  112,   65,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,   71,   55,
       72,   46,    2,    5,    6,    3,    9,   10,    9,  152,
       27,  152,   26,  152,  152,  152,  152,  150,   64,    0,
      146,   44,   37,    1,  149,   31,   29,    0,   30,   45,
        0,    0,   43,   57,   60,  148,    0,    0,   63,  139,

       62,   58,  145,  144,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,    2,    4,
        3,    3,    7,    0,    0,    0,    0,    0,    0,   28,
        0,    0,    0,    0,    0,    0,   38,  149,   31,    0,
       32,    0,   35,    0,    0,    0,    0,    0,  144,  115,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      106,  145,  145,  145,  145,  109,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,   81,  145,  145,
      110,  117,   79,  116,  145,  145,  124,  113,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  123,  107,  145,
      145,  125,  108,  145,  145,  145,  145,  145,  145,   56,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   39,    0,   33,   36,  147,    0,    0,    0,
        0,  102,  103,  104,  145,  145,  138,  121,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      118,  145,  145,  145,  145,  145,  145,  145,  145,  145,

      145,  145,  145,  126,  145,  145,  145,  122,  145,  145,
      145,  145,  145,  114,  145,  145,  145,  145,  145,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       21,   40,   34,    0,    0,    0,    0,  105,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
       82,  120,  145,  145,  145,  145,  145,  145,  145,  145,
      111,  145,  145,  145,  145,  145,  145,  134,  145,  145,
      145,  145,  145,  145,  145,  145,  145,    0,    0,    0,
        0,    0,    0,    0,    0,   22,    0,    0,    0,    0,
        8,  101,   90,  145,  145,  145,  145,  145,  135,  145,

      145,  145,  145,  145,  145,   96,  145,  129,  127,   78,
      145,   94,  145,   80,  145,  145,  145,  145,  145,  145,
      145,   97,  145,   95,  145,  145,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  145,  145,
      136,  137,  145,  145,  145,  145,  145,  145,  145,   93,
      131,  128,  145,   83,  145,   84,   85,   86,  145,  145,
      145,   92,  145,   20,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   91,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  133,
        0,    0,   13,    0,    0,    0,    0,    0,   24,    0,

        0,    0,  130,  145,  145,   88,   87,  145,   89,   99,
      145,  119,  145,  100,   98,   16,    0,    0,    0,   11,
        0,    0,   17,    0,    0,  145,  145,  145,  145,  145,
       14,   18,   12,    0,    0,   15,   19,  145,  132,  145,
      145,  145,    0,   25,  145,  145,  145,  145,   23,  145,
      145,  142,  145,  145,  145,  145,  141,  145,  140,  145,
      145,  145,  143,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   30,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   30,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    4,    4,    5,    5,
        5,    5,    5,    4,    1,    4,    4,    4,    1,    6,
        1,    1,    1,    1,    5,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[577] =
    {   0,
        0,    0,   61,   63,   65,   66,   63,   66,  710,  711,
       75,   83,  682,  701,  711,  711,  711,  711,  711,  711,
      679,  711,  711,   75,   88,  102,  678,  711,  109,   44,
       55,  711,    0,  711,  711,  711,  711,    0,   62,  650,
       98,   63,   60,  107,  102,   81,  117,  124,  664,  648,
      110,  647,  130,  127,  116,  135,   96,  652,  711,  711,
      711,  711,    0,  696,  711,   96,  711,  711,  155,  711,
      711,  671,  711,  140,  662,  658,  644,  187,  711,  688,
      711,  711,  177,  711,    0,  185,  192,  208,  711,  711,
        0,  146,  711,  711,  711,  711,  217,  655,  711,  711,

      711,  711,    0,    0,  640,  643,  647,   95,  636,  636,
      644,  647,  189,  648,  630,   94,  634,  634,  627,  623,
      631,  630,  642,  641,  624,  629,  624,  166,  619,  635,
      629,  612,  622,  620,  619,  612,  613,  607,  170,  627,
      608,  614,  612,  604,  604,  200,  609,  601,  603,  607,
      605,  600,  615,  598,  603,  592,  593,  594,    0,  711,
      234,  235,  711,  598,  600,  592,  598,  601,  591,  711,
      589,  585,  591,  587,  580,  240,  711,    0,  245,  255,
      711,  260,  268,  606,  589,  581,  591,  581,    0,    0,
      576,  580,  579,  590,  571,  584,  577,  584,  571,  566,

        0,  573,  581,  580,  572,    0,  567,  566,  573,  221,
      573,  559,  558,  560,  564,  558,  551,    0,  553,  552,
      583,    0,    0,    0,  548,  551,    0,    0,  559,  560,
      559,  561,  560,  541,  540,  557,  552,    0,  549,  542,
      535,    0,    0,  539,  535,  537,  541,  544,  540,    0,
      543,  545,  525,  526,  524,  523,  536,  521,  521,  535,
      532,  273,  278,  283,  291,  711,  711,  535,  515,  515,
      530,    0,    0,  546,  528,  516,    0,    0,  519,  514,
      510,  525,  514,  513,  506,  504,  518,  516,  500,  501,
        0,  508,  509,  495,  510,  496,  493,  506,  509,  525,

      491,  487,  497,    0,  490,  502,  494,    0,  497,  499,
      497,  488,  494,    0,  477,  489,  475,  490,  487,    0,
      478,  484,  489,  470,  487,  478,  473,  468,  479,  464,
      711,  711,  711,  475,  480,  479,  486,    0,  470,  464,
      474,  462,  460,  456,  467,  466,  456,  450,  449,  452,
        0,    0,  465,  448,  449,  458,  443,  443,  457,  442,
        0,  434,  438,  433,  438,  443,  440,    0,  441,  432,
      445,  443,  433,  430,  431,  440,  430,  440,  425,  422,
      431,  435,  435,  433,  427,  711,  434,  417,  414,  428,
      711,    0,    0,  417,  425,  418,  423,  412,    0,  413,

      424,  415,  409,  420,  420,    0,  403,    0,    0,    0,
      395,    0,  400,    0,  412,  411,  411,  409,  217,  398,
      403,    0,  410,    0,  393,  392,  415,  406,  397,  392,
      403,  398,  397,  399,  393,  398,  389,  396,  373,  382,
        0,    0,  377,  381,  379,  377,  381,  378,  373,    0,
        0,    0,  384,    0,  381,    0,    0,    0,  368,  373,
      368,    0,  370,  711,  369,  366,  372,  359,  302,  364,
      356,  357,  362,  359,  353,    0,  352,  365,  364,  349,
      354,  353,  360,  356,  354,  345,  356,  355,  351,    0,
      365,  344,  711,  355,  372,  361,  350,  333,  711,  358,

      337,  348,    0,  345,  334,    0,    0,  321,    0,    0,
      316,    0,  326,    0,    0,  711,  335,  330,  303,  711,
      286,  289,  711,  300,  299,  282,  271,  274,  279,  278,
      711,  711,  711,  281,  279,  711,  711,  264,    0,  264,
      266,  255,  231,  711,  229,  232,  210,  211,  711,  201,
      211,    0,  191,  175,  177,  135,    0,  128,    0,  131,
      116,   63,    0,  711,  332,  338,  344,  350,  353,  355,
       83,  361,  367,  373,   69,  375
    } ;

static const flex_int16_t yy_def[577] =
    {   0,
      564,    1,  565,  565,  566,  566,  567,  567,  564,  564,
      564,  564,  564,  568,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  569,  564,
      564,  564,  570,  564,  564,  564,  564,  571,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  564,  564,
      564,  564,  572,  564,  564,  573,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  568,
      564,  564,  564,  564,  574,  564,  564,  564,  564,  564,
      575,  564,  564,  564,  564,  564,  569,   97,  564,  564,

      564,  564,  570,  576,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  572,  564,
      573,  573,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  574,  564,  564,
      564,  564,  564,  564,  564,  564,  564,   97,  576,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
       97,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,   97,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  570,  570,  570,  570,  570,  570,  570,  570,  570,

      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,

      564,  564,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  570,  570,  570,  570,  570,
      564,  564,  564,  564,  564,  564,  564,  570,  570,  570,
      570,  570,  564,  564,  570,  570,  570,  570,  564,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  570,
      570,  570,  570,    0,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564
    } ;

static const flex_int16_t yy_nxt[775] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   33,   45,   46,   33,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   33,   56,   57,   58,   33,   59,
       60,   61,   62,   64,   65,   64,   65,   68,   68,   71,
       99,  100,   71,   66,  184,   66,   78,   78,   78,   78,
       72,  101,  102,   72,   78,   78,   78,   78,  104,   73,
       69,   69,   73,   83,   83,   83,   83,   83,  105,  106,

       84,   74,  114,   75,   74,   85,   75,  116,  162,   76,
      563,  115,   76,  163,  107,  108,   77,  117,   86,   77,
       87,   87,   87,   87,   87,   91,   92,  127,  128,  204,
      193,  156,   93,  110,   94,   95,   96,  111,  124,  157,
      112,   88,   89,  125,  118,  137,  113,  119,  194,  205,
      120,  151,  121,  122,  126,   98,  129,  152,  138,  132,
      130,  139,  123,  133,  562,  131,  146,  134,  141,  142,
      147,  153,  164,  143,  561,  148,  154,  149,  144,  171,
      560,  150,  559,  172,  185,  186,  145,  155,   78,   78,
       78,   78,  187,  165,  166,   83,   83,   83,   83,   83,

      167,  168,  169,  179,  179,  179,  179,  179,   86,  229,
       87,   87,   87,   87,   87,  217,  176,  177,  230,  218,
      558,  182,  557,  182,  180,  181,  183,  183,  183,  183,
      183,   88,   89,   91,  564,  199,  200,  457,  458,  556,
      564,  201,  564,  564,   96,  237,  564,  162,  555,  554,
      238,  564,  163,  262,  553,  262,  289,  552,  263,  263,
      263,  263,  263,  179,  179,  179,  179,  179,  264,  290,
      264,  551,  550,  265,  265,  265,  265,  265,  183,  183,
      183,  183,  183,  549,  180,  181,  183,  183,  183,  183,
      183,  263,  263,  263,  263,  263,  263,  263,  263,  263,

      263,  265,  265,  265,  265,  265,  495,  548,  266,  265,
      265,  265,  265,  265,  547,  546,  545,  544,  332,  496,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  333,   63,   63,   63,   63,   63,   63,   67,   67,
       67,   67,   67,   67,   70,   70,   70,   70,   70,   70,
       80,   80,   80,   80,   80,   80,   97,  532,   97,  103,
      103,  159,  531,  530,  159,  159,  159,  161,  529,  161,
      161,  161,  161,  178,  528,  178,  178,  178,  178,  189,
      189,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,

      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,

      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,

      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  261,  260,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  241,  240,  239,  236,  235,  234,
      233,  232,  231,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  203,  202,  198,  197,  196,  195,
      192,  191,  190,  188,   81,  175,  174,  173,  170,  160,

      158,  140,  136,  135,  109,   90,   82,   81,   79,  564,
        9,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564
    } ;

static const flex_int16_t yy_chk[775] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    6,    7,
       30,   30,    8,    3,  575,    4,   11,   11,   11,   11,
        7,   31,   31,    8,   12,   12,   12,   12,  571,    7,
        5,    6,    8,   24,   24,   24,   24,   24,   39,   39,

       25,    7,   42,    7,    8,   25,    8,   43,   66,    7,
      562,   42,    8,   66,   39,   39,    7,   43,   26,    8,
       26,   26,   26,   26,   26,   29,   29,   46,   46,  116,
      108,   57,   29,   41,   29,   29,   29,   41,   45,   57,
       41,   26,   26,   45,   44,   51,   41,   44,  108,  116,
       44,   55,   44,   44,   45,   29,   47,   55,   51,   48,
       47,   51,   44,   48,  561,   47,   54,   48,   53,   53,
       54,   56,   69,   53,  560,   54,   56,   54,   53,   74,
      558,   54,  556,   74,   92,   92,   53,   56,   78,   78,
       78,   78,   92,   69,   69,   83,   83,   83,   83,   83,

       69,   69,   69,   86,   86,   86,   86,   86,   87,  139,
       87,   87,   87,   87,   87,  128,   83,   83,  139,  128,
      555,   88,  554,   88,   86,   86,   88,   88,   88,   88,
       88,   87,   87,   97,   97,  113,  113,  419,  419,  553,
       97,  113,   97,   97,   97,  146,  161,  162,  551,  550,
      146,  161,  162,  176,  548,  176,  210,  547,  176,  176,
      176,  176,  176,  179,  179,  179,  179,  179,  180,  210,
      180,  546,  545,  180,  180,  180,  180,  180,  182,  182,
      182,  182,  182,  543,  179,  179,  183,  183,  183,  183,
      183,  262,  262,  262,  262,  262,  263,  263,  263,  263,

      263,  264,  264,  264,  264,  264,  469,  542,  183,  265,
      265,  265,  265,  265,  541,  540,  538,  535,  263,  469,
      534,  530,  529,  528,  527,  526,  525,  524,  522,  521,
      519,  265,  565,  565,  565,  565,  565,  565,  566,  566,
      566,  566,  566,  566,  567,  567,  567,  567,  567,  567,
      568,  568,  568,  568,  568,  568,  569,  518,  569,  570,
      570,  572,  517,  513,  572,  572,  572,  573,  511,  573,
      573,  573,  573,  574,  508,  574,  574,  574,  574,  576,
      576,  505,  504,  502,  501,  500,  498,  497,  496,  495,
      494,  492,  491,  489,  488,  487,  486,  485,  484,  483,

      482,  481,  480,  479,  478,  477,  475,  474,  473,  472,
      471,  470,  468,  467,  466,  465,  463,  461,  460,  459,
      455,  453,  449,  448,  447,  446,  445,  444,  443,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  423,  421,  420,  418,  417,
      416,  415,  413,  411,  407,  405,  404,  403,  402,  401,
      400,  398,  397,  396,  395,  394,  390,  389,  388,  387,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  367,  366,  365,
      364,  363,  362,  360,  359,  358,  357,  356,  355,  354,

      353,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  337,  336,  335,  334,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  319,  318,  317,
      316,  315,  313,  312,  311,  310,  309,  307,  306,  305,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  276,  275,  274,  271,  270,  269,
      268,  261,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  249,  248,  247,  246,  245,  244,  241,  240,
      239,  237,  236,  235,  234,  233,  232,  231,  230,  229,

      226,  225,  221,  220,  219,  217,  216,  215,  214,  213,
      212,  211,  209,  208,  207,  205,  204,  203,  202,  200,
      199,  198,  197,  196,  195,  194,  193,  192,  191,  188,
      187,  186,  185,  184,  175,  174,  173,  172,  171,  169,
      168,  167,  166,  165,  164,  158,  157,  156,  155,  154,
      153,  152,  151,  150,  149,  148,  147,  145,  144,  143,
      142,  141,  140,  138,  137,  136,  135,  134,  133,  132,
      131,  130,  129,  127,  126,  125,  124,  123,  122,  121,
      120,  119,  118,  117,  115,  114,  112,  111,  110,  109,
      107,  106,  105,   98,   80,   77,   76,   75,   72,   64,

       58,   52,   50,   49,   40,   27,   21,   14,   13,    9,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[153] =
    {   0,
0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "faustlexer.l"
/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4 -*- */
/* Scanner for the Faust language */
#line 6 "faustlexer.l"
#include "tree.hh"
#include "faustparser.hpp"
#if defined(WIN32)
#if !defined(__MINGW32__) && !defined(__MSYS__)
// We don't want to include compatibility.hh here, since it pulls in whole lot
// of unneeded stuff which breaks other things, so here's some stuff to make
// MSVC happy.
#include <io.h>
#define isatty _isatty
#define fileno _fileno
#define YY_NO_UNISTD_H
#endif
#else
#include "compatibility.hh"
#include "errormsg.hh"

#define YY_FATAL_ERROR lexerror
#endif

#define register		// suppress the deprecated 'register' warning

#line 855 "faustlexer.cpp"

#line 857 "faustlexer.cpp"

#define INITIAL 0
#define comment 1
#define doc 2
#define lst 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 44 "faustlexer.l"



#line 1079 "faustlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 565 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 711 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 47 "faustlexer.l"
BEGIN(comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 48 "faustlexer.l"
/* eat anything that's not a '*' 		*/
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 49 "faustlexer.l"
/* eat up '*'s not followed by '/'s 	*/
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 50 "faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 52 "faustlexer.l"
/* no need to increment yylineno here 	*/
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 53 "faustlexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 55 "faustlexer.l"
{ BEGIN(doc); return BDOC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 56 "faustlexer.l"
return DOCCHAR; /* char by char, may be slow ?? */
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 57 "faustlexer.l"
return DOCCHAR; /* keep newline chars */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 58 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 59 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 60 "faustlexer.l"
{ BEGIN(lst);		return BLST; } /* autoclosing tag */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 61 "faustlexer.l"
{ BEGIN(INITIAL); 	return BEQN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 62 "faustlexer.l"
{ BEGIN(doc); 		return EEQN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 63 "faustlexer.l"
{ BEGIN(INITIAL); 	return BDGM; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 64 "faustlexer.l"
{ BEGIN(doc); 		return EDGM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 65 "faustlexer.l"
{ BEGIN(INITIAL); 	return BMETADATA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 66 "faustlexer.l"
{ BEGIN(doc); 		return EMETADATA; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 67 "faustlexer.l"
{ BEGIN(INITIAL); 	return EDOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "faustlexer.l"
return LSTTRUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "faustlexer.l"
return LSTFALSE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "faustlexer.l"
return LSTDEPENDENCIES;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "faustlexer.l"
return LSTMDOCTAGS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 73 "faustlexer.l"
return LSTDISTRIBUTED;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 74 "faustlexer.l"
return LSTEQ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 75 "faustlexer.l"
return LSTQ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 76 "faustlexer.l"
{ BEGIN(doc); 	return ELST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "faustlexer.l"
return INT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 81 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "faustlexer.l"
return SEQ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "faustlexer.l"
return PAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "faustlexer.l"
return SPLIT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "faustlexer.l"
return MIX;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "faustlexer.l"
return MIX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "faustlexer.l"
return REC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 100 "faustlexer.l"
return ADD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 101 "faustlexer.l"
return SUB;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 102 "faustlexer.l"
return MUL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 103 "faustlexer.l"
return DIV;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 104 "faustlexer.l"
return MOD;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "faustlexer.l"
return FDELAY;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "faustlexer.l"
return DELAY1;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "faustlexer.l"
return AND;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "faustlexer.l"
return OR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "faustlexer.l"
return XOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 112 "faustlexer.l"
return LSH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 113 "faustlexer.l"
return RSH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 115 "faustlexer.l"
return LT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "faustlexer.l"
return LE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "faustlexer.l"
return GT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "faustlexer.l"
return GE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "faustlexer.l"
return EQ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "faustlexer.l"
return NE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 122 "faustlexer.l"
return WIRE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 123 "faustlexer.l"
return CUT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 125 "faustlexer.l"
return ENDDEF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 126 "faustlexer.l"
return DEF;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 127 "faustlexer.l"
return LPAR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 128 "faustlexer.l"
return RPAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 129 "faustlexer.l"
return LBRAQ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 130 "faustlexer.l"
return RBRAQ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 131 "faustlexer.l"
return LCROC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "faustlexer.l"
return RCROC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "faustlexer.l"
return LAMBDA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "faustlexer.l"
return DOT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "faustlexer.l"
return WITH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "faustlexer.l"
return LETREC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "faustlexer.l"
return MEM;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "faustlexer.l"
return PREFIX;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "faustlexer.l"
return INTCAST;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "faustlexer.l"
return FLOATCAST;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 145 "faustlexer.l"
return RDTBL;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 146 "faustlexer.l"
return RWTBL;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 148 "faustlexer.l"
return SELECT2;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 149 "faustlexer.l"
return SELECT3;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 151 "faustlexer.l"
return FFUNCTION;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 152 "faustlexer.l"
return FCONSTANT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 153 "faustlexer.l"
return FVARIABLE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 155 "faustlexer.l"
return BUTTON;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 156 "faustlexer.l"
return CHECKBOX;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 157 "faustlexer.l"
return VSLIDER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 158 "faustlexer.l"
return HSLIDER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 159 "faustlexer.l"
return NENTRY;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 160 "faustlexer.l"
return VGROUP;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 161 "faustlexer.l"
return HGROUP;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 162 "faustlexer.l"
return TGROUP;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 163 "faustlexer.l"
return VBARGRAPH;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 164 "faustlexer.l"
return HBARGRAPH;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 165 "faustlexer.l"
return SOUNDFILE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 167 "faustlexer.l"
return ATTACH;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 169 "faustlexer.l"
return ACOS;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 170 "faustlexer.l"
return ASIN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 171 "faustlexer.l"
return ATAN;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 172 "faustlexer.l"
return ATAN2;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 174 "faustlexer.l"
return COS;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 175 "faustlexer.l"
return SIN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 176 "faustlexer.l"
return TAN;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 178 "faustlexer.l"
return EXP;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 179 "faustlexer.l"
return LOG;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 180 "faustlexer.l"
return LOG10;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 181 "faustlexer.l"
return POWOP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 182 "faustlexer.l"
return POWFUN;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 183 "faustlexer.l"
return SQRT;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 185 "faustlexer.l"
return ABS;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 186 "faustlexer.l"
return MIN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 187 "faustlexer.l"
return MAX;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 189 "faustlexer.l"
return FMOD;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 190 "faustlexer.l"
return REMAINDER;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 192 "faustlexer.l"
return FLOOR;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 193 "faustlexer.l"
return CEIL;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 194 "faustlexer.l"
return RINT;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 196 "faustlexer.l"
return ISEQ;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 197 "faustlexer.l"
return IPAR;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 198 "faustlexer.l"
return ISUM;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 199 "faustlexer.l"
return IPROD;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 201 "faustlexer.l"
return INPUTS;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 202 "faustlexer.l"
return OUTPUTS;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 204 "faustlexer.l"
return IMPORT;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 205 "faustlexer.l"
return COMPONENT;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 206 "faustlexer.l"
return LIBRARY;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 207 "faustlexer.l"
return ENVIRONMENT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 209 "faustlexer.l"
return WAVEFORM;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 210 "faustlexer.l"
return ROUTE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 211 "faustlexer.l"
return ENABLE;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 212 "faustlexer.l"
return CONTROL;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 214 "faustlexer.l"
return DECLARE;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 216 "faustlexer.l"
return CASE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 217 "faustlexer.l"
return ARROW;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "faustlexer.l"
return FLOATMODE;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 220 "faustlexer.l"
return DOUBLEMODE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 221 "faustlexer.l"
return QUADMODE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 222 "faustlexer.l"
return FIXEDPOINTMODE;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 225 "faustlexer.l"
return IDENT;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 226 "faustlexer.l"
return IDENT;
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 228 "faustlexer.l"
return STRING;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 230 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 231 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 234 "faustlexer.l"
/* eat up one-line comments */
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 236 "faustlexer.l"
/* eat up whitespace */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(doc):
case YY_STATE_EOF(lst):
#line 238 "faustlexer.l"
yyterminate();
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 240 "faustlexer.l"
printf("extra text is : %s\n", yytext); return EXTRA;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 243 "faustlexer.l"
ECHO;
	YY_BREAK
#line 1918 "faustlexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 565 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 565 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 564);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 243 "faustlexer.l"

int yywrap() { return 1; }

