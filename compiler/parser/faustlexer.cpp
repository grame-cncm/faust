#line 1 "faustlexer.cpp"

#line 3 "faustlexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer FAUST_create_buffer
#define yy_delete_buffer FAUST_delete_buffer
#define yy_scan_buffer FAUST_scan_buffer
#define yy_scan_string FAUST_scan_string
#define yy_scan_bytes FAUST_scan_bytes
#define yy_init_buffer FAUST_init_buffer
#define yy_flush_buffer FAUST_flush_buffer
#define yy_load_buffer_state FAUST_load_buffer_state
#define yy_switch_to_buffer FAUST_switch_to_buffer
#define yypush_buffer_state FAUSTpush_buffer_state
#define yypop_buffer_state FAUSTpop_buffer_state
#define yyensure_buffer_stack FAUSTensure_buffer_stack
#define yy_flex_debug FAUST_flex_debug
#define yyin FAUSTin
#define yyleng FAUSTleng
#define yylex FAUSTlex
#define yylineno FAUSTlineno
#define yyout FAUSTout
#define yyrestart FAUSTrestart
#define yytext FAUSTtext
#define yywrap FAUSTwrap
#define yyalloc FAUSTalloc
#define yyrealloc FAUSTrealloc
#define yyfree FAUSTfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define FAUST_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer FAUST_create_buffer
#endif

#ifdef yy_delete_buffer
#define FAUST_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer FAUST_delete_buffer
#endif

#ifdef yy_scan_buffer
#define FAUST_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer FAUST_scan_buffer
#endif

#ifdef yy_scan_string
#define FAUST_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string FAUST_scan_string
#endif

#ifdef yy_scan_bytes
#define FAUST_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes FAUST_scan_bytes
#endif

#ifdef yy_init_buffer
#define FAUST_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer FAUST_init_buffer
#endif

#ifdef yy_flush_buffer
#define FAUST_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer FAUST_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define FAUST_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state FAUST_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define FAUST_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer FAUST_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define FAUSTpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state FAUSTpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define FAUSTpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state FAUSTpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define FAUSTensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack FAUSTensure_buffer_stack
#endif

#ifdef yylex
#define FAUSTlex_ALREADY_DEFINED
#else
#define yylex FAUSTlex
#endif

#ifdef yyrestart
#define FAUSTrestart_ALREADY_DEFINED
#else
#define yyrestart FAUSTrestart
#endif

#ifdef yylex_init
#define FAUSTlex_init_ALREADY_DEFINED
#else
#define yylex_init FAUSTlex_init
#endif

#ifdef yylex_init_extra
#define FAUSTlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra FAUSTlex_init_extra
#endif

#ifdef yylex_destroy
#define FAUSTlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy FAUSTlex_destroy
#endif

#ifdef yyget_debug
#define FAUSTget_debug_ALREADY_DEFINED
#else
#define yyget_debug FAUSTget_debug
#endif

#ifdef yyset_debug
#define FAUSTset_debug_ALREADY_DEFINED
#else
#define yyset_debug FAUSTset_debug
#endif

#ifdef yyget_extra
#define FAUSTget_extra_ALREADY_DEFINED
#else
#define yyget_extra FAUSTget_extra
#endif

#ifdef yyset_extra
#define FAUSTset_extra_ALREADY_DEFINED
#else
#define yyset_extra FAUSTset_extra
#endif

#ifdef yyget_in
#define FAUSTget_in_ALREADY_DEFINED
#else
#define yyget_in FAUSTget_in
#endif

#ifdef yyset_in
#define FAUSTset_in_ALREADY_DEFINED
#else
#define yyset_in FAUSTset_in
#endif

#ifdef yyget_out
#define FAUSTget_out_ALREADY_DEFINED
#else
#define yyget_out FAUSTget_out
#endif

#ifdef yyset_out
#define FAUSTset_out_ALREADY_DEFINED
#else
#define yyset_out FAUSTset_out
#endif

#ifdef yyget_leng
#define FAUSTget_leng_ALREADY_DEFINED
#else
#define yyget_leng FAUSTget_leng
#endif

#ifdef yyget_text
#define FAUSTget_text_ALREADY_DEFINED
#else
#define yyget_text FAUSTget_text
#endif

#ifdef yyget_lineno
#define FAUSTget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno FAUSTget_lineno
#endif

#ifdef yyset_lineno
#define FAUSTset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno FAUSTset_lineno
#endif

#ifdef yywrap
#define FAUSTwrap_ALREADY_DEFINED
#else
#define yywrap FAUSTwrap
#endif

#ifdef yyalloc
#define FAUSTalloc_ALREADY_DEFINED
#else
#define yyalloc FAUSTalloc
#endif

#ifdef yyrealloc
#define FAUSTrealloc_ALREADY_DEFINED
#else
#define yyrealloc FAUSTrealloc
#endif

#ifdef yyfree
#define FAUSTfree_ALREADY_DEFINED
#else
#define yyfree FAUSTfree
#endif

#ifdef yytext
#define FAUSTtext_ALREADY_DEFINED
#else
#define yytext FAUSTtext
#endif

#ifdef yyleng
#define FAUSTleng_ALREADY_DEFINED
#else
#define yyleng FAUSTleng
#endif

#ifdef yyin
#define FAUSTin_ALREADY_DEFINED
#else
#define yyin FAUSTin
#endif

#ifdef yyout
#define FAUSTout_ALREADY_DEFINED
#else
#define yyout FAUSTout
#endif

#ifdef yy_flex_debug
#define FAUST_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug FAUST_flex_debug
#endif

#ifdef yylineno
#define FAUSTlineno_ALREADY_DEFINED
#else
#define yylineno FAUSTlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 160
#define YY_END_OF_BUFFER 161
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[611] =
    {   0,
        0,    0,    2,    2,    0,    0,    0,    0,  161,  159,
      158,  158,   66,  159,   51,   54,   53,   69,   70,   49,
       47,   42,   48,   76,   50,   29,   41,   67,   59,   68,
       61,   52,  153,   73,   75,   74,  115,   65,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,   71,   55,
       72,   46,    2,    5,    6,    3,    9,   10,    9,  160,
       27,  160,   26,  160,  160,  160,  160,  158,   64,    0,
      154,   44,  144,   37,    1,  157,   31,   29,    0,   30,
        0,   45,    0,    0,   43,   57,   60,  156,    0,    0,

       63,  143,   62,   58,  153,    0,  153,    0,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,    2,    4,    3,    3,    7,
        0,    0,    0,    0,    0,    0,   28,    0,    0,    0,
        0,    0,    0,   38,  157,   31,    0,   32,    0,   35,
      152,    0,    0,    0,    0,    0,    0,    0,  118,  153,

       84,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  109,  153,  153,  153,  153,  112,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   82,
      153,  153,  113,  153,  120,   80,  119,  153,  153,  128,
      116,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      127,  110,  153,  153,  129,  111,  153,  153,  153,  153,
      153,  153,  153,   56,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   39,    0,   33,   36,
      152,    0,  155,    0,    0,    0,    0,  153,    0,  105,
      106,  153,  107,  153,  153,  142,  124,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  121,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  130,  153,  153,  153,  125,
      153,  153,  153,  153,  153,  153,  117,  153,  153,  153,
      153,  153,  153,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   21,   40,   34,    0,    0,    0,
        0,    0,  153,  153,  108,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   83,  123,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  114,  153,
      153,  153,  153,  153,  153,  153,  153,  126,  138,  153,

      153,  153,  153,  153,  153,  153,  153,  153,   79,    0,
        0,    0,    0,    0,    0,    0,    0,   22,    0,  152,
        0,    0,    0,    0,    8,  153,  103,   92,  153,  153,
      153,  153,  153,  139,  153,  153,  153,  153,  153,  153,
       98,  153,  153,  133,  131,   78,  153,  146,  104,   96,
      153,   81,  153,  153,  153,  153,  153,  153,  153,   99,
      153,   97,  153,  153,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  152,    0,    0,    0,  153,  153,  153,
      140,  141,  153,  153,  153,  153,  153,  153,  153,  147,
       95,  135,  132,  153,   85,  153,   86,   87,   88,  153,

      153,  153,   94,  153,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  153,   93,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  137,    0,    0,   13,    0,    0,    0,    0,    0,
       24,    0,    0,    0,  153,  134,  153,  153,   90,   89,
      153,   91,  101,  153,  122,  153,  102,  100,   16,    0,
        0,    0,   11,    0,    0,   17,    0,    0,  153,  153,
      153,  153,  153,  153,   14,   18,   12,    0,    0,   15,
       19,  153,  153,  136,  153,  153,  153,    0,   25,  145,
      153,  153,  153,  153,   23,  153,  153,  150,  153,  153,

      153,  153,  149,  153,  148,  153,  153,  153,  151,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,    1,   29,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       31,   32,   33,   34,   35,    1,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   30,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   30,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    4,    4,    5,    5,
        5,    5,    5,    6,    1,    4,    4,    4,    1,    7,
        1,    1,    1,    1,    8,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[628] =
    {   0,
        0,    0,   61,   63,   65,   66,   63,   66, 1167, 1168,
       75,   83, 1139, 1158, 1168, 1168, 1168, 1168, 1168, 1168,
     1136, 1168, 1135,   75,   88,  102,   47, 1168,  109,   55,
       72, 1168, 1138, 1168, 1168, 1168, 1168, 1126,   91,   48,
      110,   92,   90,  116,  127,  128,  134,  137,  107,   94,
      143,  131,  158,  161,  164,  166,  185,  142, 1168, 1168,
     1168, 1168,    0, 1156, 1168,  152, 1168, 1168,  178, 1168,
     1168, 1131, 1168,   68, 1122, 1118, 1104,  228, 1168, 1148,
     1168, 1168, 1168,  215, 1168,    0,  220,  227,  243, 1168,
     1119, 1168,    0,  230, 1168, 1168, 1168, 1168,  254, 1114,

     1168, 1168, 1168, 1168, 1128, 1127, 1126, 1114,  160,  144,
      163,  170,  249,  221,  230,   65,  180,  252,  250,  203,
      255,  260,  263,  262,  265,  266,  269,  175,  268,  270,
      271,  273,  274,  277,  272,  283,  290,  278,  282,  285,
      292,  284,  297,  301,  304,  306,  310,  313,  311,  315,
      317,  321,  326,  322,  324,  319,  327,  328,  332,  330,
      333,  331,  338,  337,  341,    0, 1168,  368,  370, 1168,
     1101, 1103, 1095, 1101, 1104, 1094, 1168, 1092, 1088, 1094,
     1090, 1083,  376, 1168,    0,  381,  391, 1168,  396,  404,
     1113, 1101, 1107, 1090, 1082, 1092, 1082, 1095, 1105,  382,

     1104,  360,  345,  385,  396,  404,  349,  405,  406,  407,
      410, 1103,  413,  412,  415,  416, 1102,  414,  417,  423,
      418,  422,  419,  424,  426,   87,  429,  431,  339, 1101,
      432,  442,  448,  445, 1100, 1099,  446,  450,  453, 1098,
     1097,  454,  458,  459,  455,  457,  462,  463,  464,  465,
     1096,  466,  475,  468, 1095, 1094,  477,  478,  482,  483,
      485,  486,  489, 1093, 1077, 1079, 1059, 1060, 1058, 1057,
     1070, 1055, 1055, 1069, 1066,  514,  520,  525,  530, 1168,
     1081, 1080, 1168, 1067, 1047, 1047, 1062, 1075, 1063, 1073,
     1072,  504,  491,  530,  531, 1071, 1070,  533,  534,  535,

      536,  538,  539,  540,  541,  543,  490,  542,  545, 1069,
      546,  549,  550,  553,  562,  551,  552,  555,  564,  500,
      558,  565,  574,  575,  578, 1068,  583,  580,  584, 1067,
      585,  589,  586,  594,  588,  592, 1066,  590,  595,  591,
      597,  601,  603, 1065, 1039, 1045, 1050, 1031, 1048, 1039,
     1034, 1029, 1040, 1025, 1168, 1168, 1168, 1043, 1035, 1040,
     1039, 1046, 1049,  611, 1048,  614,  615,  616,  620,  617,
      623,  624,  627,  625,  626,  628,  631, 1047, 1046,  634,
      632,  635,  630,  636,  637,  645,  648,  638, 1045,  647,
      649,  653,  654,  655,  663,  664,  668, 1044, 1043,  665,

      669,  678,  673,  670,  672,  671,  682,  676, 1042, 1027,
     1012, 1009, 1018, 1022, 1022, 1020, 1014, 1168, 1021, 1032,
     1020, 1002,  999, 1013, 1168,  680, 1027, 1026,  681,  695,
      683,  702,  703, 1025,  685,  704,  707,  708,  710,  712,
     1024,  713,  714, 1023, 1022, 1021,  715, 1020, 1019, 1018,
      717, 1017,  719,  720,  722,  725,  734,  721,  728, 1016,
      726, 1015,  730,  739, 1010, 1001,  992,  987,  998,  993,
      992,  994,  988, 1005,  992,  983,  990,  740,  744,  745,
     1001, 1000,  749,  751,  752,  754,  753,  759,  756,  999,
      998,  997,  996,  757,  995,  764,  994,  993,  992,  755,

      762,  760,  991,  766, 1168,  967,  964,  970,  957,  791,
      962,  954,  955,  960,  957,  951,  761,  980,  763,  775,
      787,  768,  770,  788,  790,  795,  796,  797,  799,  801,
      800,  979,  974,  953, 1168,  964,  981,  970,  959,  942,
     1168,  943,  915,  920,  802,  931,  804,  805,  921,  886,
      807,  885,  884,  809,  881,  808,  880,  879, 1168,  874,
      873,  870, 1168,  853,  855, 1168,  866,  864,  813,  810,
      811,  820,  823,  824, 1168, 1168, 1168,  850,  825, 1168,
     1168,  821,  827,  675,  831,  832,  833,  468, 1168,  496,
      834,  835,  836,  845, 1168,  839,  847,  494,  842,  848,

      849,  852,  229,  853,  228,  855,  858,  863,  227, 1168,
      911,  919,  927,  935,  940,  943,  945,  953,  961,  969,
      971,  182,  975,  977,  981,  983,  987
    } ;

static const flex_int16_t yy_def[628] =
    {   0,
      610,    1,  611,  611,  612,  612,  613,  613,  610,  610,
      610,  610,  610,  614,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  615,  610,
      610,  610,  616,  610,  610,  610,  610,  617,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  610,  610,
      610,  610,  618,  610,  610,  619,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  614,
      610,  610,  610,  610,  610,  620,  610,  610,  610,  610,
      621,  610,  622,  610,  610,  610,  610,  610,  615,   99,

      610,  610,  610,  610,  616,  610,  616,  617,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  618,  610,  619,  619,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  620,  610,  610,  610,  610,  610,
      623,  621,  610,  610,  610,  610,   99,  624,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      623,  610,  610,  610,  610,  610,   99,  625,  624,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  626,  610,  610,
      610,   99,  625,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  627,
      626,  610,  610,  610,  610,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  627,  610,  610,  610,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  616,  616,
      616,  616,  616,  616,  610,  610,  610,  610,  610,  610,
      610,  616,  616,  616,  616,  616,  616,  610,  610,  616,
      616,  616,  616,  616,  610,  616,  616,  616,  616,  616,

      616,  616,  616,  616,  616,  616,  616,  616,  616,    0,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610
    } ;

static const flex_int16_t yy_nxt[1232] =
    {   0,
       10,   11,   12,   11,   11,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   33,   45,   46,   33,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   33,   56,   57,   58,   33,   59,
       60,   61,   62,   64,   65,   64,   65,   68,   68,   71,
       91,  106,   71,   66,   92,   66,   78,   78,   78,   78,
       72,  101,  102,   72,   78,   78,   78,   78,  106,   73,
       69,   69,   73,   84,   84,   84,   84,   84,  103,  104,

       85,   74,  114,   75,   74,   86,   75,  178,  208,   76,
      106,  179,   76,  106,  106,  106,   77,  106,   87,   77,
       88,   88,   88,   88,   88,   93,   94,  109,  110,  314,
      106,  119,   95,  106,   96,   97,   98,  121,  111,  106,
      120,   89,   90,  112,  113,  115,  141,  122,  142,  116,
      106,  106,  117,  123,  106,  100,  124,  106,  118,  125,
      106,  126,  127,  129,  169,  106,  106,  106,  130,  170,
      131,  128,  138,  135,  133,  134,  139,  136,  143,  132,
      140,  106,  137,  106,  106,  146,  106,  106,  193,  106,
      165,  144,  200,  106,  145,  171,  147,  148,  106,  157,

      152,  149,  159,  106,  153,  158,  150,  160,  106,  154,
      223,  155,  199,  202,  151,  156,  172,  173,  161,  209,
      162,  201,  203,  174,  175,  176,  106,  163,  164,   78,
       78,   78,   78,   84,   84,   84,   84,   84,  186,  186,
      186,  186,  186,   87,  106,   88,   88,   88,   88,   88,
      106,  106,  106,  106,  183,  184,  189,  214,  189,  187,
      188,  190,  190,  190,  190,  190,   89,   90,  194,  195,
       93,  610,  106,  106,  206,  106,  196,  610,  106,  610,
      610,   98,  207,  106,  204,  106,  106,  213,  106,  106,
      215,  106,  106,  106,  106,  106,  106,  106,  210,  211,

      106,  106,  205,  224,  212,  106,  106,  106,  106,  217,
      216,  218,  226,  106,  221,  106,  219,  222,  227,  232,
      106,  225,  220,  228,  106,  231,  229,  106,  236,  106,
      230,  233,  237,  106,  106,  235,  106,  239,  106,  238,
      106,  244,  106,  242,  106,  106,  234,  106,  240,  106,
      106,  106,  243,  106,  106,  106,  106,  241,  247,  246,
      106,  106,  106,  245,  106,  255,  250,  258,  106,  248,
      249,  251,  106,  252,  256,  254,  253,  262,  260,  257,
      610,  259,  169,  106,  292,  610,  261,  170,  296,  276,
      263,  276,  264,  317,  277,  277,  277,  277,  277,  186,

      186,  186,  186,  186,  278,  106,  278,  291,  106,  279,
      279,  279,  279,  279,  190,  190,  190,  190,  190,  106,
      187,  188,  190,  190,  190,  190,  190,  106,  106,  106,
      106,  294,  293,  106,  290,  106,  106,  106,  106,  106,
      106,  106,  106,  298,  280,  106,  106,  106,  302,  106,
      297,  303,  106,  308,  106,  106,  299,  295,  301,  304,
      310,  305,  307,  300,  306,  106,  309,  320,  106,  106,
      311,  106,  315,  106,  313,  312,  106,  106,  106,  316,
      106,  106,  106,  318,  321,  106,  106,  106,  106,  106,
      328,  106,  329,  319,  325,  322,  326,  327,  106,  333,

      106,  106,  324,  323,  334,  106,  106,  335,  106,  106,
      331,  365,  106,  106,  106,  330,  332,  106,  389,  106,
      595,  337,  336,  106,  342,  338,  341,  106,  377,  339,
      340,  344,  277,  277,  277,  277,  277,  343,  277,  277,
      277,  277,  277,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  106,  106,  364,  106,  106,  106,  106,
      356,  106,  106,  106,  106,  106,  106,  366,  106,  106,
      357,  371,  106,  106,  106,  106,  106,  368,  106,  367,
      376,  106,  369,  372,  373,  106,  370,  106,  106,  380,
      381,  374,  383,  375,  387,  378,  379,  106,  106,  388,

      384,  106,  385,  106,  382,  386,  106,  106,  106,  106,
      390,  106,  106,  106,  106,  106,  396,  106,  106,  391,
      106,  394,  400,  398,  106,  392,  106,  397,  399,  393,
      403,  401,  395,  402,  106,  407,  405,  106,  106,  106,
      106,  408,  409,  106,  404,  406,  106,  106,  106,  106,
      106,  106,  429,  106,  106,  106,  427,  106,  106,  106,
      106,  106,  428,  433,  426,  431,  434,  430,  106,  439,
      106,  106,  106,  435,  432,  443,  106,  106,  106,  436,
      438,  437,  442,  440,  441,  446,  106,  106,  106,  447,
      444,  106,  106,  106,  106,  106,  106,  445,  106,  106,

      448,  106,  449,  106,  106,  106,  106,  451,  106,  454,
      456,  450,  452,  459,  453,  455,  478,  458,  106,  460,
      462,  463,  457,  461,  464,  106,  106,  106,  481,  479,
      106,  106,  484,  106,  480,  106,  106,  106,  106,  485,
      106,  482,  106,  106,  106,  106,  488,  489,  106,  106,
      486,  106,  483,  106,  498,  499,  487,  106,  494,  495,
      496,  502,  106,  106,  497,  491,  490,  106,  106,  493,
      500,  501,  106,  492,  106,  106,  106,  106,  106,  106,
      106,  503,  106,  106,  106,  106,  106,  106,  517,  106,
      504,  106,  519,  106,  527,  537,  524,  521,  106,  522,

      520,  518,  523,  528,  525,  526,  529,  530,  538,  531,
      106,  106,  532,  106,  547,  545,  546,  550,  106,  106,
      106,  549,  106,  106,  106,  106,  548,  106,  106,  552,
      106,  106,  106,  106,  106,  551,  106,  553,  556,  554,
      557,  570,  558,  106,  106,  574,  106,  106,  555,  569,
      106,  582,  571,  583,  106,  106,  106,  106,  106,  106,
      572,  573,  106,  589,  584,  106,  586,  587,  106,  585,
      106,  106,  106,  590,  597,  106,  106,  596,  106,  591,
      593,  106,  592,  598,  601,  594,  106,  600,  599,  588,
      602,  581,  604,  580,  579,  603,  578,  577,  607,  605,

      576,  575,  106,  106,  106,  606,  608,  106,  106,  106,
      609,   63,   63,   63,   63,   63,   63,   63,   63,   67,
       67,   67,   67,   67,   67,   67,   67,   70,   70,   70,
       70,   70,   70,   70,   70,   80,   80,   80,   80,   80,
       80,   80,   80,   99,  106,   99,   99,  105,  105,  105,
      105,  107,  107,  166,  106,  568,  166,  166,  166,  166,
      166,  168,  567,  168,  168,  168,  168,  168,  168,  185,
      566,  185,  185,  185,  185,  185,  185,  191,  191,  281,
      281,  281,  281,  288,  288,  363,  363,  363,  363,  420,
      420,  474,  474,  474,  474,  565,  564,  563,  562,  561,

      560,  559,  106,  106,  544,  543,  542,  541,  540,  539,
      536,  535,  534,  533,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  516,  515,  514,  282,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  477,  476,  475,  421,  282,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  106,  106,  106,  106,  106,
      106,  106,  106,  425,  424,  423,  422,  421,  419,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  289,  106,  362,

      361,  360,  359,  358,  282,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  289,
      287,  286,  285,  284,  283,  192,  282,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  108,  106,
      198,  106,  197,  192,   81,  182,  181,  180,  177,  167,
      108,  106,   83,   82,   81,   79,  610,    9,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610
    } ;

static const flex_int16_t yy_chk[1232] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    4,    4,    5,    6,    7,
       27,   40,    8,    3,   27,    4,   11,   11,   11,   11,
        7,   30,   30,    8,   12,   12,   12,   12,  116,    7,
        5,    6,    8,   24,   24,   24,   24,   24,   31,   31,

       25,    7,   40,    7,    8,   25,    8,   74,  116,    7,
      226,   74,    8,   43,   39,   42,    7,   50,   26,    8,
       26,   26,   26,   26,   26,   29,   29,   39,   39,  226,
       49,   42,   29,   41,   29,   29,   29,   43,   39,   44,
       42,   26,   26,   39,   39,   41,   49,   43,   50,   41,
       45,   46,   41,   44,   52,   29,   44,   47,   41,   44,
       48,   44,   44,   45,   66,   58,   51,  110,   45,   66,
       45,   44,   48,   47,   46,   46,   48,   47,   51,   45,
       48,   53,   47,  109,   54,   52,  111,   55,  622,   56,
       58,   51,  110,  112,   51,   69,   53,   53,  128,   55,

       54,   53,   56,  117,   54,   55,   53,   56,   57,   54,
      128,   54,  109,  112,   53,   54,   69,   69,   56,  117,
       57,  111,  112,   69,   69,   69,  120,   57,   57,   78,
       78,   78,   78,   84,   84,   84,   84,   84,   87,   87,
       87,   87,   87,   88,  114,   88,   88,   88,   88,   88,
      609,  605,  603,  115,   84,   84,   89,  120,   89,   87,
       87,   89,   89,   89,   89,   89,   88,   88,   94,   94,
       99,   99,  113,  119,  114,  118,   94,   99,  121,   99,
       99,   99,  115,  122,  113,  124,  123,  119,  125,  126,
      121,  129,  127,  130,  131,  135,  132,  133,  118,  118,

      134,  138,  113,  129,  118,  139,  136,  142,  140,  122,
      121,  123,  131,  137,  126,  141,  124,  127,  132,  136,
      143,  130,  125,  133,  144,  135,  134,  145,  139,  146,
      134,  137,  140,  147,  149,  138,  148,  142,  150,  141,
      151,  146,  156,  145,  152,  154,  137,  155,  143,  153,
      157,  158,  145,  160,  162,  159,  161,  144,  149,  148,
      164,  163,  229,  147,  165,  156,  152,  159,  203,  150,
      151,  152,  207,  153,  157,  155,  154,  163,  161,  158,
      168,  160,  169,  202,  203,  168,  162,  169,  207,  183,
      164,  183,  165,  229,  183,  183,  183,  183,  183,  186,

      186,  186,  186,  186,  187,  200,  187,  202,  204,  187,
      187,  187,  187,  187,  189,  189,  189,  189,  189,  205,
      186,  186,  190,  190,  190,  190,  190,  206,  208,  209,
      210,  205,  204,  211,  200,  214,  213,  218,  215,  216,
      219,  221,  223,  209,  190,  222,  220,  224,  214,  225,
      208,  215,  227,  221,  228,  231,  210,  206,  213,  216,
      222,  218,  220,  211,  219,  232,  221,  233,  234,  237,
      223,  233,  227,  238,  225,  224,  239,  242,  245,  228,
      246,  243,  244,  231,  234,  247,  248,  249,  250,  252,
      245,  254,  246,  232,  242,  237,  243,  244,  253,  249,

      257,  258,  239,  238,  250,  259,  260,  252,  261,  262,
      248,  293,  263,  307,  293,  247,  248,  598,  320,  590,
      588,  254,  253,  320,  261,  257,  260,  292,  307,  258,
      259,  263,  276,  276,  276,  276,  276,  262,  277,  277,
      277,  277,  277,  278,  278,  278,  278,  278,  279,  279,
      279,  279,  279,  294,  295,  292,  298,  299,  300,  301,
      277,  302,  303,  304,  305,  308,  306,  294,  309,  311,
      279,  301,  312,  313,  316,  317,  314,  298,  318,  295,
      306,  321,  299,  302,  303,  315,  300,  319,  322,  311,
      312,  304,  314,  305,  318,  308,  309,  323,  324,  319,

      315,  325,  316,  328,  313,  317,  327,  329,  331,  333,
      321,  335,  332,  338,  340,  336,  328,  334,  339,  322,
      341,  325,  333,  331,  342,  323,  343,  329,  332,  324,
      336,  334,  327,  335,  364,  341,  339,  366,  367,  368,
      370,  342,  343,  369,  338,  340,  371,  372,  374,  375,
      373,  376,  368,  383,  377,  381,  366,  380,  382,  384,
      385,  388,  367,  372,  364,  370,  373,  369,  386,  380,
      390,  387,  391,  374,  371,  384,  392,  393,  394,  375,
      377,  376,  383,  381,  382,  387,  395,  396,  400,  388,
      385,  397,  401,  404,  406,  405,  403,  386,  584,  408,

      390,  402,  391,  426,  429,  407,  431,  393,  435,  396,
      400,  392,  394,  403,  395,  397,  426,  402,  430,  404,
      406,  407,  401,  405,  408,  432,  433,  436,  431,  429,
      437,  438,  435,  439,  430,  440,  442,  443,  447,  436,
      451,  432,  453,  454,  458,  455,  439,  440,  456,  461,
      437,  459,  433,  463,  457,  457,  438,  457,  453,  454,
      455,  461,  464,  478,  456,  443,  442,  479,  480,  451,
      458,  459,  483,  447,  484,  485,  487,  486,  500,  489,
      494,  463,  488,  502,  517,  501,  519,  496,  478,  504,
      464,  522,  480,  523,  494,  510,  487,  484,  520,  485,

      483,  479,  486,  496,  488,  489,  500,  501,  510,  502,
      521,  524,  504,  525,  520,  517,  519,  523,  526,  527,
      528,  522,  529,  531,  530,  545,  521,  547,  548,  525,
      551,  556,  554,  570,  571,  524,  569,  526,  529,  527,
      530,  547,  531,  572,  582,  556,  573,  574,  528,  545,
      583,  569,  548,  570,  585,  586,  587,  591,  592,  593,
      551,  554,  596,  579,  571,  599,  573,  574,  594,  572,
      597,  600,  601,  582,  592,  602,  604,  591,  606,  583,
      586,  607,  585,  593,  597,  587,  608,  596,  594,  578,
      599,  568,  601,  567,  565,  600,  564,  562,  606,  602,

      561,  560,  558,  557,  555,  604,  607,  553,  552,  550,
      608,  611,  611,  611,  611,  611,  611,  611,  611,  612,
      612,  612,  612,  612,  612,  612,  612,  613,  613,  613,
      613,  613,  613,  613,  613,  614,  614,  614,  614,  614,
      614,  614,  614,  615,  549,  615,  615,  616,  616,  616,
      616,  617,  617,  618,  546,  544,  618,  618,  618,  618,
      618,  619,  543,  619,  619,  619,  619,  619,  619,  620,
      542,  620,  620,  620,  620,  620,  620,  621,  621,  623,
      623,  623,  623,  624,  624,  625,  625,  625,  625,  626,
      626,  627,  627,  627,  627,  540,  539,  538,  537,  536,

      534,  533,  532,  518,  516,  515,  514,  513,  512,  511,
      509,  508,  507,  506,  503,  499,  498,  497,  495,  493,
      492,  491,  490,  482,  481,  477,  476,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  462,  460,
      452,  450,  449,  448,  446,  445,  444,  441,  434,  428,
      427,  424,  423,  422,  421,  420,  419,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  399,  398,  389,  379,
      378,  365,  363,  362,  361,  360,  359,  358,  354,  353,
      352,  351,  350,  349,  348,  347,  346,  345,  344,  337,
      330,  326,  310,  297,  296,  291,  290,  289,  288,  287,

      286,  285,  284,  282,  281,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  256,  255,  251,
      241,  240,  236,  235,  230,  217,  212,  201,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  182,  181,  180,
      179,  178,  176,  175,  174,  173,  172,  171,  108,  107,
      106,  105,  100,   91,   80,   77,   76,   75,   72,   64,
       38,   33,   23,   21,   14,   13,    9,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[161] =
    {   0,
0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "faustlexer.l"
/* -*- Mode: C++; tab-width: 4; c-basic-offset: 4 -*- */
/* Scanner for the Faust language */
#line 6 "faustlexer.l"
#include "tree.hh"
#include "faustparser.hpp"
#if defined(WIN32)
#if !defined(__MINGW32__) && !defined(__MSYS__)
// We don't want to include compatibility.hh here, since it pulls in whole lot
// of unneeded stuff which breaks other things, so here's some stuff to make
// MSVC happy.
#include <io.h>
#define isatty _isatty
#define fileno _fileno
#define YY_NO_UNISTD_H
#endif
#else
#include "compatibility.hh"
#include "errormsg.hh"

#define YY_FATAL_ERROR lexerror
#endif

#define register        // suppress the deprecated 'register' warning

#line 1235 "faustlexer.cpp"

#line 1237 "faustlexer.cpp"

#define INITIAL 0
#define comment 1
#define doc 2
#define lst 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 43 "faustlexer.l"


#line 1458 "faustlexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 611 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1168 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "faustlexer.l"
BEGIN(comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "faustlexer.l"
/* eat anything that's not a '*'         */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "faustlexer.l"
/* eat up '*'s not followed by '/'s     */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 48 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 49 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "faustlexer.l"
/* no need to increment yylineno here     */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "faustlexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 53 "faustlexer.l"
{ BEGIN(doc); return BDOC; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 54 "faustlexer.l"
return DOCCHAR; /* char by char, may be slow ?? */
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 55 "faustlexer.l"
return DOCCHAR; /* keep newline chars */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "faustlexer.l"
return NOTICE;  /* autoclosing tag */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 58 "faustlexer.l"
{ BEGIN(lst);        return BLST; } /* autoclosing tag */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 59 "faustlexer.l"
{ BEGIN(INITIAL);     return BEQN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 60 "faustlexer.l"
{ BEGIN(doc);         return EEQN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 61 "faustlexer.l"
{ BEGIN(INITIAL);     return BDGM; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "faustlexer.l"
{ BEGIN(doc);         return EDGM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 63 "faustlexer.l"
{ BEGIN(INITIAL);     return BMETADATA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 64 "faustlexer.l"
{ BEGIN(doc);         return EMETADATA; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 65 "faustlexer.l"
{ BEGIN(INITIAL);     return EDOC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 67 "faustlexer.l"
return LSTTRUE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 68 "faustlexer.l"
return LSTFALSE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 69 "faustlexer.l"
return LSTDEPENDENCIES;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "faustlexer.l"
return LSTMDOCTAGS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 71 "faustlexer.l"
return LSTDISTRIBUTED;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 72 "faustlexer.l"
return LSTEQ;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 73 "faustlexer.l"
return LSTQ;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 74 "faustlexer.l"
{ BEGIN(doc);     return ELST; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 77 "faustlexer.l"
return INT;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "faustlexer.l"
return FLOAT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 91 "faustlexer.l"
return SEQ;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 92 "faustlexer.l"
return PAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 93 "faustlexer.l"
return SPLIT;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 94 "faustlexer.l"
return MIX;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 95 "faustlexer.l"
return MIX;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 96 "faustlexer.l"
return REC;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 98 "faustlexer.l"
return ADD;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 99 "faustlexer.l"
return SUB;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 100 "faustlexer.l"
return MUL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 101 "faustlexer.l"
return DIV;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 102 "faustlexer.l"
return MOD;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 103 "faustlexer.l"
return FDELAY;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 104 "faustlexer.l"
return DELAY1;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "faustlexer.l"
return AND;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "faustlexer.l"
return OR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "faustlexer.l"
return XOR;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "faustlexer.l"
return LSH;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "faustlexer.l"
return RSH;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "faustlexer.l"
return LT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "faustlexer.l"
return LE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "faustlexer.l"
return GT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "faustlexer.l"
return GE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "faustlexer.l"
return EQ;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "faustlexer.l"
return NE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "faustlexer.l"
return WIRE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "faustlexer.l"
return CUT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "faustlexer.l"
return ENDDEF;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "faustlexer.l"
return DEF;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "faustlexer.l"
return LPAR;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "faustlexer.l"
return RPAR;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "faustlexer.l"
return LBRAQ;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "faustlexer.l"
return RBRAQ;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "faustlexer.l"
return LCROC;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "faustlexer.l"
return RCROC;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 132 "faustlexer.l"
return LAMBDA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 133 "faustlexer.l"
return DOT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 134 "faustlexer.l"
return WITH;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 135 "faustlexer.l"
return LETREC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "faustlexer.l"
return WHERE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 138 "faustlexer.l"
return MEM;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 139 "faustlexer.l"
return PREFIX;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "faustlexer.l"
return INTCAST;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "faustlexer.l"
return FLOATCAST;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "faustlexer.l"
return NOTYPECAST;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "faustlexer.l"
return RDTBL;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "faustlexer.l"
return RWTBL;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "faustlexer.l"
return SELECT2;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "faustlexer.l"
return SELECT3;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 151 "faustlexer.l"
return FFUNCTION;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 152 "faustlexer.l"
return FCONSTANT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 153 "faustlexer.l"
return FVARIABLE;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 155 "faustlexer.l"
return BUTTON;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 156 "faustlexer.l"
return CHECKBOX;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 157 "faustlexer.l"
return VSLIDER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 158 "faustlexer.l"
return HSLIDER;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 159 "faustlexer.l"
return NENTRY;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 160 "faustlexer.l"
return VGROUP;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 161 "faustlexer.l"
return HGROUP;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 162 "faustlexer.l"
return TGROUP;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 163 "faustlexer.l"
return VBARGRAPH;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 164 "faustlexer.l"
return HBARGRAPH;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 165 "faustlexer.l"
return SOUNDFILE;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 167 "faustlexer.l"
return ATTACH;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 168 "faustlexer.l"
return MODULATE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 170 "faustlexer.l"
return ACOS;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 171 "faustlexer.l"
return ASIN;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 172 "faustlexer.l"
return ATAN;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 173 "faustlexer.l"
return ATAN2;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 175 "faustlexer.l"
return COS;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 176 "faustlexer.l"
return SIN;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 177 "faustlexer.l"
return TAN;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 179 "faustlexer.l"
return EXP;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 180 "faustlexer.l"
return LOG;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 181 "faustlexer.l"
return LOG10;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 182 "faustlexer.l"
return POWOP;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 183 "faustlexer.l"
return POWFUN;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 184 "faustlexer.l"
return SQRT;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 186 "faustlexer.l"
return ABS;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 187 "faustlexer.l"
return MIN;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 188 "faustlexer.l"
return MAX;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 190 "faustlexer.l"
return FMOD;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 191 "faustlexer.l"
return REMAINDER;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 193 "faustlexer.l"
return FLOOR;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 194 "faustlexer.l"
return CEIL;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 195 "faustlexer.l"
return RINT;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 196 "faustlexer.l"
return ROUND;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 198 "faustlexer.l"
return ISEQ;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 199 "faustlexer.l"
return IPAR;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 200 "faustlexer.l"
return ISUM;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 201 "faustlexer.l"
return IPROD;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 203 "faustlexer.l"
return INPUTS;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 204 "faustlexer.l"
return OUTPUTS;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 206 "faustlexer.l"
return IMPORT;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 207 "faustlexer.l"
return COMPONENT;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 208 "faustlexer.l"
return LIBRARY;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 209 "faustlexer.l"
return ENVIRONMENT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 211 "faustlexer.l"
return WAVEFORM;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 212 "faustlexer.l"
return ROUTE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 213 "faustlexer.l"
return ENABLE;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 214 "faustlexer.l"
return CONTROL;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 216 "faustlexer.l"
return DECLARE;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 218 "faustlexer.l"
return CASE;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 219 "faustlexer.l"
return ARROW;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 220 "faustlexer.l"
return LAPPLY;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 222 "faustlexer.l"
return ASSERTBOUNDS;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 223 "faustlexer.l"
return LOWEST;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 224 "faustlexer.l"
return HIGHEST;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 226 "faustlexer.l"
return FLOATMODE;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 227 "faustlexer.l"
return DOUBLEMODE;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 228 "faustlexer.l"
return QUADMODE;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 229 "faustlexer.l"
return FIXEDPOINTMODE;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "faustlexer.l"
return IDENT;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 233 "faustlexer.l"
return IDENT;
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 235 "faustlexer.l"
return STRING;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 237 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 238 "faustlexer.l"
return FSTRING;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 241 "faustlexer.l"
/* eat up one-line comments */
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 243 "faustlexer.l"
/* eat up whitespace */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(doc):
case YY_STATE_EOF(lst):
#line 245 "faustlexer.l"
yyterminate();
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 247 "faustlexer.l"
printf("extra text is : %s\n", yytext); return EXTRA;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 250 "faustlexer.l"
ECHO;
	YY_BREAK
#line 2337 "faustlexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 611 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 611 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 610);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "faustlexer.l"

int yywrap() { return 1; }

